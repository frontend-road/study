{"id":87808,"title":"JavaScript语法（一）：在script标签写export为什么会抛错？","content":"<p>你好，我是winter，今天我们进入到语法部分的学习。在讲解具体的语法结构之前，这一堂课我首先要给你介绍一下JavaScript语法的一些基本规则。</p><h2>脚本和模块</h2><p>首先，JavaScript有两种源文件，一种叫做脚本，一种叫做模块。这个区分是在ES6引入了模块机制开始的，在ES5和之前的版本中，就只有一种源文件类型（就只有脚本）。</p><p>脚本是可以由浏览器或者node环境引入执行的，而模块只能由JavaScript代码用import引入执行。</p><p>从概念上，我们可以认为脚本具有主动性的JavaScript代码段，是控制宿主完成一定任务的代码；而模块是被动性的JavaScript代码段，是等待被调用的库。</p><p>我们对标准中的语法产生式做一些对比，不难发现，实际上模块和脚本之间的区别仅仅在于是否包含import 和 export。</p><p>脚本是一种兼容之前的版本的定义，在这个模式下，没有import就不需要处理加载“.js”文件问题。</p><p>现代浏览器可以支持用script标签引入模块或者脚本，如果要引入模块，必须给script标签添加type=“module”。如果引入脚本，则不需要type。</p><pre><code class=\"language-HTML\">&lt;script type=\"module\" src=\"xxxxx.js\"&gt;&lt;/script&gt;\n</code></pre><!-- [[[read_end]]] --><p>这样，就回答了我们标题中的问题，script标签如果不加<code>type=“module”</code>，默认认为我们加载的文件是脚本而非模块，如果我们在脚本中写了export，当然会抛错。</p><p>脚本中可以包含语句。模块中可以包含三种内容：import声明，export声明和语句。普通语句我们会在下一课专门给你讲解，下面我们就来讲讲import声明和export声明。</p><p><img src=\"https://static001.geekbang.org/resource/image/43/44/43fdb35c0300e73bb19c143431f50a44.jpg?wh=1040*596\" alt=\"\"></p><h3>import声明</h3><p>我们首先来介绍一下import声明，import声明有两种用法，一个是直接import一个模块，另一个是带from的import，它能引入模块里的一些信息。</p><pre><code class=\"language-JavaScript\">import \"mod\"; //引入一个模块\nimport v from \"mod\";  //把模块默认的导出值放入变量v\n</code></pre><p>直接import一个模块，只是保证了这个模块代码被执行，引用它的模块是无法获得它的任何信息的。</p><p>带from的import意思是引入模块中的一部分信息，可以把它们变成本地的变量。</p><p>带from的import细分又有三种用法，我们可以分别看下例子：</p><ul>\n<li><code>import x from \"./a.js\"</code> 引入模块中导出的默认值。</li>\n<li><code>import {a as x, modify} from \"./a.js\";</code> 引入模块中的变量。</li>\n<li><code>import * as x from \"./a.js\"</code> 把模块中所有的变量以类似对象属性的方式引入。</li>\n</ul><p>第一种方式还可以跟后两种组合使用。</p><ul>\n<li><code>import d, {a as x, modify} from \"./a.js\"</code></li>\n<li><code>import d, * as x from \"./a.js\"</code></li>\n</ul><p>语法要求不带as的默认值永远在最前。注意，这里的变量实际上仍然可以受到原来模块的控制。</p><p>我们看一个例子，假设有两个模块a和b。我们在模块a中声明了变量和一个修改变量的函数，并且把它们导出。我们用b模块导入了变量和修改变量的函数。</p><p><strong>模块a：</strong></p><pre><code class=\"language-JavaScript\">\nexport var a = 1;\n\nexport function modify(){\n    a = 2;\n}\n\n</code></pre><p><strong>模块b：</strong></p><pre><code class=\"language-JavaScript\">import {a, modify} from \"./a.js\";\n\nconsole.log(a);\n\nmodify();\n\nconsole.log(a);\n</code></pre><p>当我们调用修改变量的函数后，b模块变量也跟着发生了改变。这说明导入与一般的赋值不同，导入后的变量只是改变了名字，它仍然与原来的变量是同一个。</p><h3>export声明</h3><p>我们再来说说export声明。与import相对，export声明承担的是导出的任务。</p><p>模块中导出变量的方式有两种，一种是独立使用export声明，另一种是直接在声明型语句前添加export关键字。</p><p>独立使用export声明就是一个export关键字加上变量名列表，例如：</p><pre><code class=\"language-JavaScript\">export {a, b, c};\n</code></pre><p>我们也可以直接在声明型语句前添加export关键字，这里的export可以加在任何声明性质的语句之前，整理如下：</p><ul>\n<li>var</li>\n<li>function (含async和generator)</li>\n<li>class</li>\n<li>let</li>\n<li>const</li>\n</ul><p>export还有一种特殊的用法，就是跟default联合使用。export default 表示导出一个默认变量值，它可以用于function和class。这里导出的变量是没有名称的，可以使用<code>import x from \"./a.js\"</code>这样的语法，在模块中引入。</p><p>export default 还支持一种语法，后面跟一个表达式，例如：</p><pre><code class=\"language-JavaScript\">var a = {};\nexport default a;\n</code></pre><p>但是，这里的行为跟导出变量是不一致的，这里导出的是值，导出的就是普通变量a的值，以后a的变化与导出的值就无关了，修改变量a，不会使得其他模块中引入的default值发生改变。</p><p>在import语句前无法加入export，但是我们可以直接使用export from语法。</p><pre><code class=\"language-JavaScript\">export a from \"a.js\"\n</code></pre><p>JavaScript引擎除了执行脚本和模块之外，还可以执行函数。而函数体跟脚本和模块有一定的相似之处，所以接下来，给你讲讲函数体的相关知识。</p><h2>函数体</h2><p>执行函数的行为通常是在JavaScript代码执行时，注册宿主环境的某些事件触发的，而执行的过程，就是执行函数体（函数的花括号中间的部分）。</p><p>我们先看一个例子，感性地理解一下：</p><pre><code class=\"language-JavaScript\">setTimeout(function(){\n    console.log(\"go go go\");\n}, 10000)\n</code></pre><p>这段代码通过setTimeout函数注册了一个函数给宿主，当一定时间之后，宿主就会执行这个函数。</p><p>你还记得吗，我们前面已经在运行时这部分讲过，宿主会为这样的函数创建宏任务。</p><p>当我们学习了语法之后，我们可以认为，宏任务中可能会执行的代码包括“脚本(script)”“模块（module）”和“函数体（function body）”。正因为这样的相似性，我们把函数体也放到本课来讲解。</p><p>函数体其实也是一个语句的列表。跟脚本和模块比起来，函数体中的语句列表中多了return语句可以用。</p><p>函数体实际上有四种，下面，我来分别介绍一下。</p><ul>\n<li>普通函数体，例如：</li>\n</ul><pre><code class=\"language-JavaScript\">function foo(){\n    //Function body\n}\n</code></pre><ul>\n<li>异步函数体，例如：</li>\n</ul><pre><code class=\"language-JavaScript\">async function foo(){\n    //Function body\n}\n</code></pre><ul>\n<li>生成器函数体，例如：</li>\n</ul><pre><code class=\"language-JavaScript\">function *foo(){\n    //Function body\n}\n</code></pre><ul>\n<li>异步生成器函数体，例如：</li>\n</ul><pre><code class=\"language-JavaScript\">async function *foo(){\n    //Function body\n}\n</code></pre><p>上面四种函数体的区别在于：能否使用await或者yield语句。</p><p>关于函数体、模块和脚本能使用的语句，我整理了一个表格，你可以参考一下：</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/50/0b24e78625beb70e3346aad1e8cfff50.jpg?wh=914*461\" alt=\"\"></p><p>讲完了三种语法结构，我再来介绍两个JavaScript语法的全局机制：预处理和指令序言。</p><p>这两个机制对于我们解释一些JavaScript的语法现象非常重要。不理解预处理机制我们就无法理解var等声明类语句的行为，而不理解指令序言，我们就无法解释严格模式。</p><h2>预处理</h2><p>JavaScript执行前，会对脚本、模块和函数体中的语句进行预处理。预处理过程将会提前处理var、函数声明、class、const和let这些语句，以确定其中变量的意义。</p><p>因为一些历史包袱，这一部分内容非常复杂，首先我们看一下var声明。</p><h3>var声明</h3><p>var声明永远作用于脚本、模块和函数体这个级别，在预处理阶段，不关心赋值的部分，只管在当前作用域声明这个变量。</p><p>我们还是从实例来进行学习。</p><pre><code class=\"language-JavaScript\">var a = 1;\n\nfunction foo() {\n    console.log(a);\n    var a = 2;\n}\n\nfoo();\n</code></pre><p>这段代码声明了一个脚本级别的a，又声明了foo函数体级别的a，我们注意到，函数体级的<code>var</code>出现在console.log语句之后。</p><p>但是预处理过程在执行之前，所以有函数体级的变量a，就不会去访问外层作用域中的变量a了，而函数体级的变量a此时还没有赋值，所以是undefined。我们再看一个情况：</p><pre><code class=\"language-JavaScript\">var a = 1;\n\nfunction foo() {\n    console.log(a);\n    if(false) {\n        var a = 2;\n    }\n}\n\nfoo();\n</code></pre><p>这段代码比上一段代码在<code>var a = 2</code>之外多了一段if，我们知道if(false)中的代码永远不会被执行，但是预处理阶段并不管这个，var的作用能够穿透一切语句结构，它只认脚本、模块和函数体三种语法结构。所以这里结果跟前一段代码完全一样，我们会得到undefined。</p><p>我们看下一个例子，我们在运行时部分讲过类似的例子。</p><pre><code class=\"language-JavaScript\">var a = 1;\n\nfunction foo() {\n    var o= {a:3}\n    with(o) {\n        var a = 2;\n    }\n    console.log(o.a);\n    console.log(a);\n}\n\nfoo();\n</code></pre><p>在这个例子中，我们引入了with语句，我们用with(o)创建了一个作用域，并把o对象加入词法环境，在其中使用了<code>var a = 2;</code>语句。</p><p>在预处理阶段，只认<code>var</code>中声明的变量，所以同样为foo的作用域创建了a这个变量，但是没有赋值。</p><p>在执行阶段，当执行到<code>var a = 2</code>时，作用域变成了with语句内，这时候的a被认为访问到了对象o的属性a，所以最终执行的结果，我们得到了2和undefined。</p><p>这个行为是JavaScript公认的设计失误之一，一个语句中的a在预处理阶段和执行阶段被当做两个不同的变量，严重违背了直觉，但是今天，在JavaScript设计原则“don’t break the web”之下，已经无法修正了，所以你需要特别注意。</p><p>因为早年JavaScript没有let和const，只能用var，又因为var除了脚本和函数体都会穿透，人民群众发明了“立即执行的函数表达式（IIFE）”这一用法，用来产生作用域，例如：</p><pre><code class=\"language-JavaScript\">\nfor(var i = 0; i &lt; 20; i ++) {\n    void function(i){\n        var div = document.createElement(\"div\");\n        div.innerHTML = i;\n        div.onclick = function(){\n            console.log(i);\n        }\n        document.body.appendChild(div);\n    }(i);\n}\n\n</code></pre><p>这段代码非常经典，常常在实际开发中见到，也经常被用作面试题，为文档添加了20个div元素，并且绑定了点击事件，打印它们的序号。</p><p>我们通过IIFE在循环内构造了作用域，每次循环都产生一个新的环境记录，这样，每个div都能访问到环境中的i。</p><p>如果我们不用IIFE：</p><pre><code class=\"language-JavaScript\">for(var i = 0; i &lt; 20; i ++) {\n    var div = document.createElement(\"div\");\n    div.innerHTML = i;\n    div.onclick = function(){\n        console.log(i);\n    }\n    document.body.appendChild(div);\n}\n</code></pre><p>这段代码的结果将会是点每个div都打印20，因为全局只有一个i，执行完循环后，i变成了20。</p><h3>function声明</h3><p>function声明的行为原本跟var非常相似，但是在最新的JavaScript标准中，对它进行了一定的修改，这让情况变得更加复杂了。</p><p>在全局（脚本、模块和函数体），function声明表现跟var相似，不同之处在于，function声明不但在作用域中加入变量，还会给它赋值。</p><p>我们看一下function声明的例子：</p><pre><code class=\"language-JavaScript\">console.log(foo);\nfunction foo(){\n\n}\n</code></pre><p>这里声明了函数foo，在声明之前，我们用console.log打印函数foo，我们可以发现，已经是函数foo的值了。</p><p>function声明出现在if等语句中的情况有点复杂，它仍然作用于脚本、模块和函数体级别，在预处理阶段，仍然会产生变量，它不再被提前赋值：</p><pre><code class=\"language-JavaScript\">console.log(foo);\nif(true) {\n    function foo(){\n\n    }\n}\n</code></pre><p>这段代码得到undefined。如果没有函数声明，则会抛出错误。</p><p>这说明function在预处理阶段仍然发生了作用，在作用域中产生了变量，没有产生赋值，赋值行为发生在了执行阶段。</p><p>出现在if等语句中的function，在if创建的作用域中仍然会被提前，产生赋值效果，我们会在下一节课继续讨论。</p><h3>class声明</h3><p>class声明在全局的行为跟function和var都不一样。</p><p>在class声明之前使用class名，会抛错：</p><pre><code class=\"language-JavaScript\">console.log(c);\nclass c{\n\n}\n</code></pre><p>这段代码我们试图在class前打印变量c，我们得到了个错误，这个行为很像是class没有预处理，但是实际上并非如此。</p><p>我们看个复杂一点的例子：</p><pre><code class=\"language-JavaScript\">var c = 1;\nfunction foo(){\n    console.log(c);\n    class c {}\n}\nfoo();\n</code></pre><p>这个例子中，我们把class放进了一个函数体中，在外层作用域中有变量c。然后试图在class之前打印c。</p><p>执行后，我们看到，仍然抛出了错误，如果去掉class声明，则会正常打印出1，也就是说，出现在后面的class声明影响了前面语句的结果。</p><p>这说明，class声明也是会被预处理的，它会在作用域中创建变量，并且要求访问它时抛出错误。</p><p>class的声明作用不会穿透if等语句结构，所以只有写在全局环境才会有声明作用，这部分我们将会在下一节课讲解。</p><p>这样的class设计比function和var更符合直觉，而且在遇到一些比较奇怪的用法时，倾向于抛出错误。</p><p>按照现代语言设计的评价标准，及早抛错是好事，它能够帮助我们尽量在开发阶段就发现代码的可能问题。</p><h2>指令序言机制</h2><p>脚本和模块都支持一种特别的语法，叫做指令序言（Directive Prologs）。</p><p>这里的指令序言最早是为了use strict设计的，它规定了一种给JavaScript代码添加元信息的方式。</p><pre><code class=\"language-JavaScript\">\"use strict\";\nfunction f(){\n    console.log(this);\n};\nf.call(null);\n</code></pre><p>这段代码展示了严格模式的用法，我这里定义了函数f，f中打印this值，然后用call的方法调用f，传入null作为this值，我们可以看到最终结果是null原封不动地被当做this值打印了出来，这是严格模式的特征。</p><p>如果我们去掉严格模式的指令需要，打印的结果将会变成global。</p><p><code>\"use strict\"</code>是JavaScript标准中规定的唯一一种指令序言，但是设计指令序言的目的是，留给JavaScript的引擎和实现者一些统一的表达方式，在静态扫描时指定JavaScript代码的一些特性。</p><p>例如，假设我们要设计一种声明本文件不需要进行lint检查的指令，我们可以这样设计：</p><pre><code class=\"language-JavaScript\">\"no lint\";\n\"use strict\";\nfunction doSth(){\n    //......\n}\n//......\n</code></pre><p>JavaScript的指令序言是只有一个字符串直接量的表达式语句，它只能出现在脚本、模块和函数体的最前面。</p><p>我们看两个例子：</p><pre><code class=\"language-JavaScript\">function doSth(){\n    //......\n}\n\"use strict\";\nvar a = 1;\n//......\n</code></pre><p>这个例子中，<code>\"use strict\"</code>没有出现在最前，所以不是指令序言。</p><pre><code class=\"language-JavaScript\">'use strict';\nfunction doSth(){\n    //......\n}\nvar a = 1;\n//......\n</code></pre><p>这个例子中，<code>'use strict'</code>是单引号，这不妨碍它仍然是指令序言。</p><h2>结语</h2><p>今天，我们一起进入了JavaScript的语法部分，在开始学习之前，我先介绍了一部分语法的基本规则。</p><p>我们首先介绍了JavaScript语法的全局结构，JavaScript有两种源文件，一种叫做脚本，一种叫做模块。介绍完脚本和模块的基础概念，我们再来把它们往下分，脚本中可以包含语句。模块中可以包含三种内容：import声明，export声明和语句。</p><p>最后，我介绍了两个JavaScript语法的全局机制：预处理和指令序言。</p><p>最后，给你留一个小任务，我们试着用babel，分析一段JavaScript的模块代码，并且找出它中间的所有export的变量。</p><p></p>","neighbors":{"left":{"article_title":"JavaScript语法（预备篇）：到底要不要写分号呢？","id":87179},"right":{"article_title":"JavaScript语法（二）：你知道哪些JavaScript语句？","id":88538}},"comments":[{"had_liked":false,"id":80909,"user_name":"Richard","can_delete":false,"product_type":"c1","uid":1183058,"ip_address":"","ucode":"562CD251652E31","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/52/6c39f46e.jpg","comment_is_top":false,"comment_ctime":1553754003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"723108259731","product_id":100023201,"comment_content":"当你认为你已经掌握了JS，JS会反手给你一巴掌。","like_count":169},{"had_liked":false,"id":81908,"user_name":"以勒","can_delete":false,"product_type":"c1","uid":1380700,"ip_address":"","ucode":"A03A1FD784A5B1","user_header":"https://static001.geekbang.org/account/avatar/00/15/11/5c/9f6827cc.jpg","comment_is_top":false,"comment_ctime":1554081551,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"516950157071","product_id":100023201,"comment_content":"前面学的宏观任务和微观人物 还记得的同学举个手，点个赞","like_count":121},{"had_liked":false,"id":80779,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1553733380,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"134697719556","product_id":100023201,"comment_content":"作为一个非前段程序员 看了老师的专栏发现 js 坑真多 各种奇怪的语法和表现 感觉像语言的 bug 一样","like_count":32,"discussions":[{"author":{"id":1443282,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLC8PUibuQKpagHpCX0eoxicT6Ts0NSib2VmsGyiae2aGctQZqdXk3ezcicTw4BDCYe2bAicuUzgbaZVEg/132","nickname":"李","note":"","ucode":"A56C15259A151B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285666,"discussion_content":"自信点就是bug","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1592908516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1292688,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b9/90/215816c2.jpg","nickname":"阿拉丁神猫","note":"","ucode":"32C76B9536B46D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337284,"discussion_content":"就是bug。。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1608861955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640477,"avatar":"https://static001.geekbang.org/account/avatar/00/19/08/1d/30b32c93.jpg","nickname":"路人丁","note":"","ucode":"078F0235DAFCA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380288,"discussion_content":"哈哈，js 本来就天生有缺陷，后天各种乱补！老实说，就是个垃圾语言，只是人家混的不错，命好，没办法。你没发现吗，其他语言很简单搞定的事情，js 非要复杂化，乱七八糟的规则，其实是底子烂，没办法而已。要用，就好好适应吧！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624428185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169632,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d8/e0/591a635e.jpg","nickname":"owenblank","note":"","ucode":"AC742BB3E35A05","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374713,"discussion_content":"这就像是一个偏门知识 自然看得头皮发麻 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621324421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013281,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/21/abb7bfe3.jpg","nickname":"Damon","note":"","ucode":"E07522227DE1E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311944,"discussion_content":"每个语言深入都有坑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602550252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1158994,"avatar":"https://static001.geekbang.org/account/avatar/00/11/af/52/67055c19.jpg","nickname":"鱼不知水","note":"","ucode":"C50CF5D21D5EBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282601,"discussion_content":"作为一个老的C和cobol程序员，看js更是各种不适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592025325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1632052,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e7/34/66289bd6.jpg","nickname":"Tokiomi","note":"","ucode":"E2C0A59D1B1D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1158994,"avatar":"https://static001.geekbang.org/account/avatar/00/11/af/52/67055c19.jpg","nickname":"鱼不知水","note":"","ucode":"C50CF5D21D5EBE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291567,"discussion_content":"写C和java，看JS头皮发麻","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594869168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":282601,"ip_address":""},"score":291567,"extra":""}]}]},{"had_liked":false,"id":130694,"user_name":"洛克不菲勒","can_delete":false,"product_type":"c1","uid":1547101,"ip_address":"","ucode":"94D14CF02C92D9","user_header":"https://static001.geekbang.org/account/avatar/00/17/9b/5d/629fa226.jpg","comment_is_top":false,"comment_ctime":1567511930,"is_pvip":false,"replies":[{"id":"54045","content":"读完以后可以自己查阅相关资料，补充自己的能力体系。","user_name":"作者回复","comment_id":130694,"uid":"1268524","ip_address":"","utype":1,"ctime":1570773156,"user_name_real":"winter"}],"discussion_count":2,"race_medal":0,"score":"65992021370","product_id":100023201,"comment_content":"看了之后好像明白了，但是又好像什么都没学到，是否需要多看几遍？","like_count":16,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466072,"discussion_content":"读完以后可以自己查阅相关资料，补充自己的能力体系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570773156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013281,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/21/abb7bfe3.jpg","nickname":"Damon","note":"","ucode":"E07522227DE1E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311945,"discussion_content":"量变到质变","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602550303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81523,"user_name":"让时间说真话","can_delete":false,"product_type":"c1","uid":1387656,"ip_address":"","ucode":"5C86450864189F","user_header":"https://static001.geekbang.org/account/avatar/00/15/2c/88/2a7fe1a9.jpg","comment_is_top":false,"comment_ctime":1553935366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40208641030","product_id":100023201,"comment_content":"首先讲了脚本和模块，而这次老师讲的模块补缺我近段时间用模块时的一些疑问，Js的预处理语法让我更加理解了以前经常用到的作用域。感谢winter！！！","like_count":9},{"had_liked":false,"id":242949,"user_name":"alue","can_delete":false,"product_type":"c1","uid":2037455,"ip_address":"","ucode":"97A343C46C09CF","user_header":"https://static001.geekbang.org/account/avatar/00/1f/16/cf/bfde35d6.jpg","comment_is_top":false,"comment_ctime":1597900846,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"31662671918","product_id":100023201,"comment_content":"这个教程我总感觉支零破碎的，像盲人摸象一样。可能是我的问题吧","like_count":8,"discussions":[{"author":{"id":2200964,"avatar":"https://static001.geekbang.org/account/avatar/00/21/95/84/9722a0a5.jpg","nickname":"ownclock  ͮ ͣ ͤ~","note":"","ucode":"E69CDF23315732","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376506,"discussion_content":"这节不难吧 有的章节是有点难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622168305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201536,"avatar":"https://static001.geekbang.org/account/avatar/00/12/55/80/da466409.jpg","nickname":"Lampard","note":"","ucode":"058D750DA319B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319455,"discussion_content":"同感，感觉很乱，而且讲的也晦涩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604033712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81161,"user_name":"费马","can_delete":false,"product_type":"c1","uid":1190201,"ip_address":"","ucode":"BCAAF9C16F0CC5","user_header":"https://static001.geekbang.org/account/avatar/00/12/29/39/0aec7827.jpg","comment_is_top":false,"comment_ctime":1553823849,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27323627625","product_id":100023201,"comment_content":"能否讲讲为什么导出的无论是基本类型还是引用类型，都会和原模块的变量有绑定关系？","like_count":6,"discussions":[{"author":{"id":1645251,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1a/c3/02bb2ebe.jpg","nickname":"尤璐洁","note":"","ucode":"4ED9B2FEC90744","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46252,"discussion_content":"import {c, d} from &#39;./a.js&#39;;\nconsole.log(c)\n的babel转码为\nvar _a = require(&#34;./a.js&#34;);\nconsole.log(_a.c);\n---\nexports.modify = modify;\nexports.a = void 0;\nvar a = 1;\nexports.a = a;\n\nfunction modify() {\n  exports.a = a = 2;\n}\n---\n可以看到modify直接改变了exports的值，\n而import的部分直接是exports的值，\n这或许可以解释为什么一起变了\n\n而default的情况，看看babel\nfunction modify() {\n  b = 2;\n}\n没有修改exports，没有变\n","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1573135371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1485706,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ab/8a/e1a8b835.jpg","nickname":"窗外明月","note":"","ucode":"D4C0BA5CC496CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645251,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1a/c3/02bb2ebe.jpg","nickname":"尤璐洁","note":"","ucode":"4ED9B2FEC90744","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206521,"discussion_content":"以为然","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584411504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":46252,"ip_address":""},"score":206521,"extra":""}]}]},{"had_liked":false,"id":80934,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1553758509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27323562285","product_id":100023201,"comment_content":"通过@babel&#47;parser解析模块文件，然后通过遍历ExportNamedDeclaration，找出所有export的变量，<br>spec参考：https:&#47;&#47;github.com&#47;babel&#47;babel&#47;blob&#47;master&#47;packages&#47;babel-parser&#47;ast&#47;spec.md#exports","like_count":6},{"had_liked":false,"id":80879,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1553747869,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27323551645","product_id":100023201,"comment_content":"https:&#47;&#47;github.com&#47;aimergenge&#47;get-exported-names-via-babel","like_count":6,"discussions":[{"author":{"id":1377514,"avatar":"https://static001.geekbang.org/account/avatar/00/15/04/ea/b4201254.jpg","nickname":"george","note":"","ucode":"3F4126B35A5EDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3797,"discussion_content":"能加好友有机会网上请教一下么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564816930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80886,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1553749430,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18733618614","product_id":100023201,"comment_content":"* 预处理机制让我对 js 中的声明有了更全面的认识，很多文章中提到的一个词是“提升”，与这里提到的预处理机制不无关联。<br>* 关于声明这块儿，这篇文章讲得也有点意思，不知道winter老师怎么看：<br>https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;28140450<br>* 在我看来，if中的function声明在预处理阶段的”赋值“行为好像被if形成的块级作用域”拦截“了，导致这个赋值行为推迟到if语句块执行开始之前。（这里只是一种隐喻，并不准确）。<br>* let,const,class这些在js中的”后来者“由于没有历史包袱，行为大多更加正常（符合直觉，及早抛错）。这让我想到了一篇文章中介绍的temporal dead zone机制：http:&#47;&#47;es6.ruanyifeng.com&#47;#docs&#47;let#%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA","like_count":4,"discussions":[{"author":{"id":1013281,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/21/abb7bfe3.jpg","nickname":"Damon","note":"","ucode":"E07522227DE1E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311947,"discussion_content":"这位同学有点优秀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602550418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1377514,"avatar":"https://static001.geekbang.org/account/avatar/00/15/04/ea/b4201254.jpg","nickname":"george","note":"","ucode":"3F4126B35A5EDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3796,"discussion_content":"感觉像是交叉验证了这一个知识点，只是叫的名字不同而已，但做的事发挥的功效是相同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564816823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89609,"user_name":"南墙的树","can_delete":false,"product_type":"c1","uid":1384130,"ip_address":"","ucode":"289B98CA489C09","user_header":"https://static001.geekbang.org/account/avatar/00/15/1e/c2/edf5dfcb.jpg","comment_is_top":false,"comment_ctime":1556236459,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14441138347","product_id":100023201,"comment_content":"with 作用域那里不太明白，大神能否解答一下？","like_count":3,"discussions":[{"author":{"id":2912869,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/72/65/75986486.jpg","nickname":"可达鸭","note":"","ucode":"F59FD683DFC882","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553234,"discussion_content":"with 一个对象以后x 里面引用它的属性就可以不用x.a x.b 可以直接写 a ,b 然后里面var a = 2 var a这个申明穿透到了var o = {} 上面  真正执行的时候  a = 2 拿到的a其实是with里面的a 所以。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645778312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83651,"user_name":"xwchris","can_delete":false,"product_type":"c1","uid":1389660,"ip_address":"","ucode":"E4A32FC25AD5F6","user_header":"","comment_is_top":false,"comment_ctime":1554690524,"is_pvip":false,"replies":[{"id":"30361","content":"老内核和新内核不一样","user_name":"作者回复","comment_id":83651,"uid":"1268524","ip_address":"","utype":1,"ctime":1554804473,"user_name_real":"winter"}],"discussion_count":1,"race_medal":0,"score":"14439592412","product_id":100023201,"comment_content":"console.log(foo);<br><br>if (true) {<br>      function foo() {}<br>}<br><br>为什么这段代码 我在chrome73中执行得到的是ƒ foo() {}","like_count":3,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446116,"discussion_content":"老内核和新内核不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554804473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230937,"user_name":"∝卓然","can_delete":false,"product_type":"c1","uid":1628776,"ip_address":"","ucode":"CB4E6E7A971ABE","user_header":"https://static001.geekbang.org/account/avatar/00/18/da/68/688318f3.jpg","comment_is_top":false,"comment_ctime":1593526133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10183460725","product_id":100023201,"comment_content":"希望可以在有样例代码后面添加执行结果，让读者更明白，手机端用户没法运行代码，代码水平层次不齐，很难保证作者和读者会保持同一语境。","like_count":2},{"had_liked":false,"id":137611,"user_name":"二狗","can_delete":false,"product_type":"c1","uid":1244288,"ip_address":"","ucode":"91C38887F4F07B","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/80/21d67b9b.jpg","comment_is_top":false,"comment_ctime":1569805871,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10159740463","product_id":100023201,"comment_content":"作为一个非前端程序员，日常工作觉得简单的js都会写，复杂的js都能看懂  现在已经一脸问号？？？","like_count":2},{"had_liked":false,"id":117578,"user_name":"Geek_7e2326","can_delete":false,"product_type":"c1","uid":1595305,"ip_address":"","ucode":"F9834331F11BD6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIic4jon8dBkYh5qbKnpeB0YsFjHsicrr0d9DKmuaZX6rcQ2QtH9VqJPGOnURNlaKfT6eRZThXQjPVA/132","comment_is_top":false,"comment_ctime":1564097931,"is_pvip":false,"replies":[{"id":"54073","content":"光秃秃的一个论点，没来源没分析，就说我讲错了，我还真不知道该怎么反驳你……","user_name":"作者回复","comment_id":117578,"uid":"1268524","ip_address":"","utype":1,"ctime":1570775334,"user_name_real":"winter"}],"discussion_count":3,"race_medal":0,"score":"10154032523","product_id":100023201,"comment_content":"闭包那边解释的不对吧，闭包应该可以看做一个函数，可以让外部访问函数内部的变量，而不会污染全局。<br>你说的是访问外部的变量。","like_count":2,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460035,"discussion_content":"光秃秃的一个论点，没来源没分析，就说我讲错了，我还真不知道该怎么反驳你……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570775334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1545279,"avatar":"https://static001.geekbang.org/account/avatar/00/17/94/3f/11f559f2.jpg","nickname":"黄小鱼","note":"","ucode":"96D69277B56C2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303424,"discussion_content":"闭包是把函数与其被定义时的环境绑定在一起，然后该函数可以访问其被定义时的环境里的变量。js里每创建一个函数，就会创建一个对应的闭包。winter大佬讲的偏理论与概念，阮老师讲的只是闭包的一种应用而已。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599236867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632052,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e7/34/66289bd6.jpg","nickname":"Tokiomi","note":"","ucode":"E2C0A59D1B1D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291568,"discussion_content":"阮一峰的解释：\n闭包就是能够读取其他函数内部变量的函数。\n由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成&#34;定义在一个函数内部的函数&#34;。\n所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\nhttp://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\n和winter大佬观点不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594869309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80904,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1553752980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10143687572","product_id":100023201,"comment_content":"看了老师的文章，越来越理解为啥TS出现的地方越来越多了","like_count":2},{"had_liked":false,"id":80809,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1553736905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10143671497","product_id":100023201,"comment_content":"想问一个问题：import 进来的引用为什么可以获取到最新的值，是类似于 getter 的机制吗？","like_count":2},{"had_liked":false,"id":255411,"user_name":"lcssptz","can_delete":false,"product_type":"c1","uid":2086825,"ip_address":"","ucode":"10A7BCC37E935D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL7uzzeFTnYxgeqsibzUFSxiblnv0qibkN8eCIGgfSCpfT4oygtcTrPM7Wb6YIR6RXfMhdDYcPXG7rCA/132","comment_is_top":false,"comment_ctime":1603338017,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5898305313","product_id":100023201,"comment_content":"读了老师的文章，像是读过了，又像是什么都没读。但每篇文章之后都可以罗列一大堆问题，每个问题都可以定义一个主题，每个主题可以写一篇博客，未来几个月不怕没灵感写东西了，这种感觉不要太酸爽。谢谢winter老师。","like_count":1},{"had_liked":false,"id":112699,"user_name":"学聪","can_delete":false,"product_type":"c1","uid":1024573,"ip_address":"","ucode":"C1F3950FAFE827","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/3d/c6b68ce8.jpg","comment_is_top":false,"comment_ctime":1562807845,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5857775141","product_id":100023201,"comment_content":"export a from &quot;a.js&quot;<br>这语法没问题吗？是不是得改成<br>export {a} from &quot;a.js&quot;<br>","like_count":1,"discussions":[{"author":{"id":1163321,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c0/39/16340f72.jpg","nickname":"zlxag","note":"","ucode":"136FB0201B64A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287198,"discussion_content":"自己去看看语法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593398246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110573,"user_name":"奋逗的码农哥","can_delete":false,"product_type":"c1","uid":1582667,"ip_address":"","ucode":"46195536825201","user_header":"https://static001.geekbang.org/account/avatar/00/18/26/4b/d1fc46d6.jpg","comment_is_top":false,"comment_ctime":1562295278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857262574","product_id":100023201,"comment_content":"看完老师的文章，再看看大家的留言评论，能够体会到交流学习的乐趣。:-)","like_count":1},{"had_liked":false,"id":86197,"user_name":"马儿","can_delete":false,"product_type":"c1","uid":1501633,"ip_address":"","ucode":"E48B834AE7F88B","user_header":"https://static001.geekbang.org/account/avatar/00/16/e9/c1/bd86aaba.jpg","comment_is_top":false,"comment_ctime":1555322521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5850289817","product_id":100023201,"comment_content":"真不亏为大神！长见识了","like_count":1},{"had_liked":false,"id":313019,"user_name":"「前端天地」公众号","can_delete":false,"product_type":"c1","uid":2218558,"ip_address":"","ucode":"D1A4F37BA50569","user_header":"https://static001.geekbang.org/account/avatar/00/21/da/3e/e0d073ca.jpg","comment_is_top":false,"comment_ctime":1632211149,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632211149","product_id":100023201,"comment_content":"{<br> function foo() {}<br> foo = 1;<br> foo = 2;<br> function foo() {}<br> foo = 10;<br>}<br>console.log(foo);<br>winter老师，这个怎么解释呢","like_count":0},{"had_liked":false,"id":311801,"user_name":"fms","can_delete":false,"product_type":"c1","uid":1862311,"ip_address":"","ucode":"94D086779DA5F6","user_header":"","comment_is_top":false,"comment_ctime":1631478007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631478007","product_id":100023201,"comment_content":"一定是特别的缘分才让我入了js的坑，一定是_(:i」∠)_","like_count":0},{"had_liked":false,"id":266497,"user_name":"dingww","can_delete":false,"product_type":"c1","uid":1442744,"ip_address":"","ucode":"B4A6AFB2550F66","user_header":"https://static001.geekbang.org/account/avatar/00/16/03/b8/bf7c310e.jpg","comment_is_top":false,"comment_ctime":1607354595,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1607354595","product_id":100023201,"comment_content":"export a from &quot;a.js&quot; 什么场景会用到呢？","like_count":0,"discussions":[{"author":{"id":1547073,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9b/41/0c62ae9a.jpg","nickname":"a仁A仁阿仁啊仁","note":"","ucode":"0A52AE9396B8F6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364731,"discussion_content":"引入变量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617588211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216078,"user_name":"Yully","can_delete":false,"product_type":"c1","uid":1254946,"ip_address":"","ucode":"66034995A6282F","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/22/dd505e6d.jpg","comment_is_top":false,"comment_ctime":1589184424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589184424","product_id":100023201,"comment_content":"通过老师的问题又对babel有了进一步的了解。神奇的JavaScript To JavaScript","like_count":0},{"had_liked":false,"id":208168,"user_name":"hhhh","can_delete":false,"product_type":"c1","uid":1256101,"ip_address":"","ucode":"9E87017424B382","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/a5/625c0a2e.jpg","comment_is_top":false,"comment_ctime":1587289258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587289258","product_id":100023201,"comment_content":"js感觉是自己给自己挖坑完了还不填","like_count":0},{"had_liked":false,"id":169937,"user_name":"固执的鱼wu","can_delete":false,"product_type":"c1","uid":1797545,"ip_address":"","ucode":"97D7885C0C12BD","user_header":"https://static001.geekbang.org/account/avatar/00/1b/6d/a9/4f461d80.jpg","comment_is_top":false,"comment_ctime":1578477538,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1578477538","product_id":100023201,"comment_content":"for(var i = 0; i &lt; 20; i ++) {    void function(i){        var div = document.createElement(&quot;div&quot;);        div.innerHTML = i;        div.onclick = function(){            console.log(i);        }        document.body.appendChild(div);    }(i);}此处的function之前为何要加void，求解答","like_count":0,"discussions":[{"author":{"id":1689268,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c6/b4/e80a4fc8.jpg","nickname":"Wise","note":"","ucode":"A1915E54C26948","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249416,"discussion_content":"那是因为 （）的执行是 函数表达式的，而不能是函数声明，所以 前面加一个 void ，就可以变成表达式，这个的效果跟 把函数加上（） 括起来是一个效果 或者 在前面加上号 例如 ！ + 都可以把 函数声明变成 表达式， 并且 加void 还可以避免 括号在行开始位置 前面 必须加分号的，如果不加分号，可能引起bug 的好处 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587917666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1163321,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c0/39/16340f72.jpg","nickname":"zlxag","note":"","ucode":"136FB0201B64A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1689268,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c6/b4/e80a4fc8.jpg","nickname":"Wise","note":"","ucode":"A1915E54C26948","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287195,"discussion_content":"酱紫就形成是无副作用的立即执行函数表达式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593398148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249416,"ip_address":""},"score":287195,"extra":""}]}]},{"had_liked":false,"id":140237,"user_name":"Geek_gaoqin","can_delete":false,"product_type":"c1","uid":1646743,"ip_address":"","ucode":"760365FDCE6E27","user_header":"https://static001.geekbang.org/account/avatar/00/19/20/97/919f5e6b.jpg","comment_is_top":false,"comment_ctime":1570859623,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1570859623","product_id":100023201,"comment_content":"“如果我们不用 IIFE”的那个例子，我跑出来为什么也是0到19,而不是老师说的全是20呢？！好想贴个截图，可这个应用没看到上传图片的地方","like_count":0,"discussions":[{"author":{"id":1689268,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c6/b4/e80a4fc8.jpg","nickname":"Wise","note":"","ucode":"A1915E54C26948","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249420,"discussion_content":"我认为，你说的是 在浏览器页面上打出的数字是0到19，因为这里没有产生闭包，所以i的值是正常显示的，但是，事件监听onclick的函数的时候已经产生闭包，所以控制台的数值都是 20 。你可以打开控制台看一看","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587918080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1071909,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5b/25/d78cc1fe.jpg","nickname":"都市夜归人","note":"","ucode":"DFF59BE3D80B42","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1689268,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c6/b4/e80a4fc8.jpg","nickname":"Wise","note":"","ucode":"A1915E54C26948","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278328,"discussion_content":"新浏览器做了处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591174451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249420,"ip_address":""},"score":278328,"extra":""}]},{"author":{"id":1622524,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c1/fc/ac3760ed.jpg","nickname":"sugus","note":"","ucode":"CAF009F622338A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64564,"discussion_content":"新浏览器做了处理","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574950754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125657,"user_name":"板栗","can_delete":false,"product_type":"c1","uid":1145918,"ip_address":"","ucode":"9774FA44227B22","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/3e/a9eeb2df.jpg","comment_is_top":false,"comment_ctime":1566222213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566222213","product_id":100023201,"comment_content":"这篇文章是站在全局的高度对 js 进行了解释。可执行代码：文件、模块、函数体。以及代码的处理方式：预处理、执行序言。666","like_count":0},{"had_liked":false,"id":113460,"user_name":"五十四","can_delete":false,"product_type":"c1","uid":1384799,"ip_address":"","ucode":"1CCFD2BF844CB3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eocyE7pjenvDhNpu26cNyS0HxHPeex6XLCzDOWT8hW2sx675hzeq3ssicObMdKQlicibNrwUPneFMGmg/132","comment_is_top":false,"comment_ctime":1563021693,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563021693","product_id":100023201,"comment_content":"第一次a不能赋值，这样才能不被改变，这是为什么呢？<br><br>a.js<br><br>let a<br><br>let setTestA = function(n){<br>  a = n<br>}<br><br>export default{<br>  a,<br>  setTestA<br>}<br><br>b.js<br><br>import x from &#39;.&#47;script&#47;a&#39;<br>x.setTestA(123)<br>console.log(x.a) &#47;&#47; undefined<br><br><br>---------------<br>a.js<br><br>let a = {}<br><br>let setTestA = function(n){<br>  a.bb = n<br>}<br><br>export default{<br>  a,<br>  setTestA<br>}<br><br>b.js<br><br>import x from &#39;.&#47;script&#47;a&#39;<br>x.setTestA(123)<br>console.log(x.a.bb) &#47;&#47; 123<br>","like_count":0,"discussions":[{"author":{"id":1385958,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLyyNcUCZJbMdfvW6Z2ib8q1Dfrh7aafWPJXKUYGfL6LxXR4QC44lvUedWyecwarqgpl4Jr0hDxLaQ/132","nickname":"夜间飞行","note":"","ucode":"14B425425C8919","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203134,"discussion_content":"export default只会导出变量的值，也就是栈内存中的内容。第一次的a是一个基本数据类型，引入的在b.js中开辟一个新的栈内存存储a.js中a的值，使用setTestA改变a.js中的a不会影响到b.js。第二次a是个引用数据类型，栈内存中存着指向堆内存的地址，所以a.js和b.js的a都指向同一个堆内存，setTestA改变a.js中的a，也就改变了堆内存中的值，所以b.js中的a会发生改变。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584003186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91514,"user_name":"温木","can_delete":false,"product_type":"c1","uid":1507210,"ip_address":"","ucode":"EAB6EDD6EDFE96","user_header":"","comment_is_top":false,"comment_ctime":1557046857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557046857","product_id":100023201,"comment_content":"函数提升分为赋值和不赋值两种情况。","like_count":0},{"had_liked":false,"id":91447,"user_name":"zhy＿windy","can_delete":false,"product_type":"c1","uid":1376002,"ip_address":"","ucode":"38E49B2F99DDF1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLJicZI12KXFM4hztIAMfHvBlOiaFt1g4U6OzPo8nvSMtUrP3mibdjBdrNX2LABzzeVm2GOpUlcKMgXg/132","comment_is_top":false,"comment_ctime":1557040204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557040204","product_id":100023201,"comment_content":"最近遇到一个问题，对导出的变量，进行赋值，在其他地方引用，值没有变化，原来是因为导出的仅仅是值，之前一直说变量提升和作用域的概念，其实都是这里说的预处理分不开，突然又get到新知识","like_count":0},{"had_liked":false,"id":89593,"user_name":"窗外明月","can_delete":false,"product_type":"c1","uid":1485706,"ip_address":"","ucode":"D4C0BA5CC496CA","user_header":"https://static001.geekbang.org/account/avatar/00/16/ab/8a/e1a8b835.jpg","comment_is_top":false,"comment_ctime":1556232813,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1556232813","product_id":100023201,"comment_content":"a.js声明一个对象obj，export default obj，然后b.js import并改变obj对象里的属性值，c.js再import 得到的是改变后的obj，为什么呢？","like_count":0,"discussions":[{"author":{"id":1384799,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eocyE7pjenvDhNpu26cNyS0HxHPeex6XLCzDOWT8hW2sx675hzeq3ssicObMdKQlicibNrwUPneFMGmg/132","nickname":"五十四","note":"","ucode":"1CCFD2BF844CB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1877,"discussion_content":"第一次a不能赋值，这样才能不被改变，这是为什么呢？\n\na.js\n\nlet a\n\nlet setTestA = function(n){\n  a = n\n}\n\nexport default{\n  a,\n  setTestA\n}\n\nb.js\n\nimport x from &#39;./script/a&#39;\nx.setTestA(123)\nconsole.log(x.a)   // undefined\n\n\n---------------\na.js\n\nlet a = {}\n\nlet setTestA = function(n){\n  a.bb = n\n}\n\nexport default{\n  a,\n  setTestA\n}\n\nb.js\n\nimport x from &#39;./script/a&#39;\nx.setTestA(123)\nconsole.log(x.a.bb)   // 123","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563021601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86204,"user_name":"马儿","can_delete":false,"product_type":"c1","uid":1501633,"ip_address":"","ucode":"E48B834AE7F88B","user_header":"https://static001.geekbang.org/account/avatar/00/16/e9/c1/bd86aaba.jpg","comment_is_top":false,"comment_ctime":1555323243,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1555323243","product_id":100023201,"comment_content":"把var的那个例子改写成let，报错a is not defined 。不明白let是怎么进行预处理的","like_count":0,"discussions":[{"author":{"id":1243029,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f7/95/c3a2ad6e.jpg","nickname":"　Burning","note":"","ucode":"2D69F65CE99879","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218283,"discussion_content":"https://zhuanlan.zhihu.com/p/28140450  看看这个你就明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585643787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81110,"user_name":"favorlm","can_delete":false,"product_type":"c1","uid":1120997,"ip_address":"","ucode":"CFD52127AA6E1D","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/e5/6899701e.jpg","comment_is_top":false,"comment_ctime":1553818597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553818597","product_id":100023201,"comment_content":"准备用babel进行分析","like_count":0},{"had_liked":false,"id":80887,"user_name":"翰弟","can_delete":false,"product_type":"c1","uid":1144772,"ip_address":"","ucode":"42149ACC75AA08","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/EJZoM46wR6QqTeibhPZsO5wJTeUia4RndGicWfDZLw153WibjsnJXqEtGZICxAa8icb36pDkficTic3FViaySd1z9HmQBw/132","comment_is_top":false,"comment_ctime":1553749580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553749580","product_id":100023201,"comment_content":"君子承诺 老师出的课 继续买反复看","like_count":0}]}