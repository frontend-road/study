{"id":168980,"title":"06 | x: break x;  搞懂如何在循环外使用break，方知语句执行真解","content":"<p>你好，我是周爱民。</p><p>上一讲的<code>for</code>语句为你揭开了JavaScript执行环境的一角。在执行系统的厚重面纱之下，到底还隐藏了哪些秘密呢？那些所谓的执行环境、上下文、闭包或块与块级作用域，到底有什么用，或者它们之间又是如何相互作用的呢？</p><p>接下来的几讲，我就将重点为你讲述这些方面的内容。</p><h2>用中断（Break）代替跳转</h2><p>在Basic语言还很流行的时代，许多语言的设计中都会让程序代码支持带地址的“语句”。例如，Basic就为每行代码提供一个标号，你可以把它叫做“<strong>行号</strong>”，但它又不是绝对物理的行号，通常为了增减程序的方便，会使用“1，10，20…...”等等这样的间隔。如果想在第10行后追加1行，就可以将它的行号命名为“11”。</p><p>行号是一种很有历史的程序逻辑控制技术，更早一些可以追溯到汇编语言，或可以手写机器代码的时代（确实存在这样的时代）。那时由于程序装入位置被标定成内存的指定位置，所以这个位置也通常就是个地址偏移量，可以用数字化或符号化的形式来表达。</p><p>所有这些“为代码语句标示一个位置”的做法，其根本目的都是<span class=\"orange\">为了实现“GOTO跳转”</span>，任何时候都可以通过“GOTO 标号”的语法来转移执行流程。</p><p>然而，这种黑科技在20世纪的60~70年代就已经普遍地被先辈们批判过了。这样的编程方式只会大大地降低程序的可维护性，其正确性或正确性验证都难以保障。所以，后面的故事想必你都知道了，半个多世纪之前开始的<strong>“结构化”运动</strong>一直影响至今，包括现在我与你讨论的这个JavaScript，都是“结构化程序设计”思想的产物。</p><!-- [[[read_end]]] --><p>所以，简单地说：JavaScript中没有GOTO语句了。取而代之的，是<strong>分块代码</strong>，以及<strong>基于代码分块的流程控制技术</strong>。这些控制逻辑基于一个简单而明了的原则：<span class=\"orange\">如果代码分块中需要GOTO的逻辑，那么就为它设计一个“自己的GOTO”</span>。</p><p>这样一来，所有的GOTO都是“块（或块所在语句）自己知道的”。这使得程序可以在“自己知情的前提下自由地GOTO”。整体看起来还不错，很酷。然而，问题是那些“标号”啊，或者“程序地址”之类的东西已经被先辈们干掉了，因此就算设计了GOTO也找不到去处，那该怎么办呢？</p><h3>第一种中断</h3><p>第一种处理方法最为简洁，就是<strong>约定“可以通过GOTO到达的位置”</strong>。</p><p>在这种情况下，JavaScript将GOTO的“离开某个语句”这一行为理解为“中断（Break）该语句的执行”。由于这个中断行为是明确针对于该语句的，所以“GOTO到达的位置”也就可以毫无分歧地约定为该语句（作为代码块）的结束位置。这是“break”作为子句的由来。它用在某些“可中断语句（<em>BreakableStatement</em>）”的内部，用于中断并将程序流程“跳转（GOTO）到语句的结束位置”。</p><p>在语法上，这表示为（该语法只作用于对“可中断语句”的中断）：</p><blockquote>\n<p><strong><em>break</em></strong>;</p>\n</blockquote><p>所谓“可中断语句”其实只有两种，包括全部的<strong>循环语句</strong>，以及<strong>switch语句</strong>。在这两种语句内部使用的“break;”，采用的就是这种处理机制——中断当前语句，将执行逻辑交给下一语句。</p><h3>第二种中断</h3><p>与第一种处理方法的限制不同，第二种中断语句可以中断“任意的标签化语句”。所谓标签化语句，就是在一般语句之前加上“xxx:”这样的标签，用以指示该语句。就如我在文章中写的这两段示例：</p><pre><code>// 标签aaa\naaa: {\n   ...\n}\n\n// 标符bbb\nbbb: if (true) {\n   ...\n}\n</code></pre><p>对比这两段示例代码，你难道不会有这么一个疑惑吗？在标签aaa中，显然aaa指示的是后续的“块语句”的块级作用域；而在标签bbb中，<code>if</code>语句是没有块级作用域的，那么bbb到底指示的是“if语句”呢，还是其后的<code>then</code>分支中的“块语句”呢？</p><p>这个问题本质上是在“块级作用域”与“标签作用的（语句）范围”之间撕裂了一条鸿沟。由于标签bbb在语义上只是要“标识其后的一行语句”，因此这种指示是与“块级作用域（或词法环境）”没有关系的。简单地说，<span class=\"orange\">标签化语句理解的是“位置”，而不是“（语句在执行环境中的）范围”</span>。</p><p>因此，中断这种标签化语句的“break”的语法，也是显式地用“标签”来标示位置的。例如：</p><blockquote>\n<p><strong><em>break</em></strong> <em>labelName;</em></p>\n</blockquote><p>所以你才会看到，我在文章中写的这两种语句都是可行的：</p><pre><code>// 在if语句的两个分支中都可以使用break；\n// （在分支中深层嵌套的语句中也是可以使用break的）\naaa: if (true) {\n   ...\n}\nelse {\n  ...\n  break aaa;\n}\n \n// 在try...catch...finally中也可以使用break;\nbbb: try {\n  ...\n}\nfinally {\n  break bbb;\n}\n</code></pre><p>对于标签bbb的finally块中使用的这个特例，我需要再特别说明：<span class=\"orange\">如果在try或try..finally块中使用了return，那么这个break将发生于最后一行语句之后，但是却是在return语句之前</span>。例如我在文章中写的这段代码：</p><pre><code>var i = 100;\nfunction foo() {\n  bbb: try {\n    console.log(&quot;Hi&quot;);\n    return i++; //  &lt;-位置1：i++表达式将被执行\n  }\n  finally {\n    break bbb;\n  }\n  console.log(&quot;Here&quot;);\n  return i; //  &lt;-位置2\n}\n</code></pre><p>测试如下：</p><pre><code>&gt; foo()\nHi\nHere\n101\n</code></pre><p>在这个例子中，你的预期可能会是“位置1”返回的100，而事实上将执行到输出“Here”并通过位置2返回101。这也很好地说明了**<code>break</code>语句本质上就是作用于其后的“一个语句”，而与它“有多少个块级作用域”无关**。</p><h2>执行现场的回收</h2><p>break将“语句的‘代码块’”理解为<strong>位置</strong>，而不是理解为作用域/环境，这是非常重要的前设！</p><p>然而，我在上面已经讲过了，程序代码中的“位置”已经被先辈们干掉了。他们用了半个世纪来证明了一件事情：<strong>想要更好、更稳定和更可读的代码，那么就忘掉“（程序的）位置”这个东西吧！</strong></p><p>通过“作用域”来管理代码的确很好，但是作用域与“语句的位置”以及“GOTO到新的程序执行”这样的理念是矛盾的。它们并不在同一个语义系统内，这也是<strong>标签</strong>与<strong>变量</strong>可以重名而不相互影响的根本原因。由于这个原因，在使用标签的代码上下文中，<strong>执行现场的回收</strong>就与传统的“块”以及“块级作用域”根本上不同。</p><p>JavaScript的执行机制包括“执行权”和“数据资源”两个部分，分别映射可计算系统中的“逻辑”与“数据”。而块级作用域（也称为词法作用域）以及其他的作用域本质上就是一帧数据，以保存执行现场的一个瞬时状态（也就是每一个执行步骤后的现场快照）。而JavaScript的运行环境被描述为一个后入先出的栈，这个栈顶永远就是当前“执行权”的所有者持用的那一帧数据，也就是代码活动的现场。</p><p>JavaScript的运行环境通过函数的CALL/RETURN来模拟上述“数据帧”在栈上的入栈与出栈过程。任何一次函数的调用，即是向栈顶压入该函数的上下文环境（也就是作用域、数据帧等等，它们在不同场合下的相同概念）。所以，包括那些在全局或模块全局中执行的代码，以及Promise中执行调度的那些内部处理，所有的这些JavaScript内部过程或外部程序都统一地被封装成函数，通过CALL/RETURN来激活、挂起。</p><p>所以，“作用域”就是在上述过程中被操作的一个对象。</p><ul>\n<li>作用域退出，就是函数RETURN。</li>\n<li>作用域挂起，就是执行权的转移。</li>\n<li>作用域的创建，就是一个闭包的初始化。</li>\n<li>……</li>\n</ul><p>然而如之前所说的，“<strong>break</strong> labelName;”这一语法独立于“执行过程”的体系，它表达一个位置的跳转，而不是一个数据帧在栈上的进出栈。这是labelName独立于标识符体系（也就是词法环境）所带来的附加收益！</p><p>基于对“语句”的不同理解，JavaScript设计了一种全新方法，用来清除这个跳转所带来的影响（也就是回收跳转之前的资源分配）。而这多余出来的设计，其实也是上述收益所需要付出的代价。</p><h2>语句执行的意义</h2><p>对于语句的跳转来说，“离开语句”意味着清除语句所持有的一切资源，如同函数退出时回收闭包。但是，这也同样意味着“语句”中发生的一切都消失了，对于函数来说，return和yield是唯二从这个现场发出信息的方式。那么语句呢？语句的执行现场从这个“程序逻辑的世界”中湮灭之后，又留下了什么呢？</p><blockquote>\n<p>NOTE: 确实存在从函数中传出信息的其他结构，但这些也将援引别的解释方式，这些就留待今后再讲了。</p>\n</blockquote><p>语句执行与函数执行并不一样。函数是求值，所以返回的是对该函数求值的结果（Result），该结果或是值（Value），或是结果的引用（Reference）。而语句是命令，语句执行的返回结果是该命令得以完成的状态（Completion, Completion Record Specification Type）。</p><p>注意，<span class=\"orange\">JavaScript是一门混合了函数式与命令式范型的语言，而这里对函数和语句的不同处理，正是两种语言范型根本上的不同抽象模型带来的差异</span>。</p><p>在ECMAScript规范层面，本质上所有JavaScript的执行都是语句执行（这很大程度上解释了为什么eval是执行语句）。因此，ECMAScript规范中对执行的描述都称为“运行期语义（Runtime Semantics）”，它描述一个JavaScript内部的行为或者用户逻辑的行为的过程与结果。也就是说这些运行期语义都最终会以一个完成状态（Completion）来返回。例如：</p><ul>\n<li>一个函数的调用：调用函数——执行函数体（EvaluateBody）并得到它的“完成”结果（result）。</li>\n<li>一个块语句的执行：执行块中的每行语句，得到它们的“完成”结果（result）。</li>\n</ul><p>这些结果（result）包括的状态有五种，称为完成的类型：normal、break、continue、return、throw。也就是说，任何语句的行为，要么是包含了有效的、可用于计算的数据值（Value）：</p><ul>\n<li>正常完成（normal）</li>\n<li>一个函数调用的返回（return）</li>\n</ul><p>要么是一个不可（像数据那样）用于计算或传递的纯粹状态：</p><ul>\n<li>循环过程中的继续下次迭代（continue）</li>\n<li>中断（break）</li>\n<li>异常（throw）</li>\n</ul><blockquote>\n<p>NOTE: throw是一个很特殊的流程控制语句，它与这里的讨论的流程控制有相似性，不同的地方在于：它并不需要标签。关于throw更多的特性，我还会在稍后的课程中给你具体地分析。</p>\n</blockquote><p>所以当运行期出现了一这个称为“中断（break）”的状态时，JavaScript引擎需要找到这个“break”标示的目标位置（<strong>result</strong>.Target），然后与当前语句的标签（如果有的话）对比：</p><ul>\n<li>如果一样，则取break源位置的语句执行结果为值（Value）并以正常完成状态返回；</li>\n<li>如果不一样，则继续返回break状态。</li>\n</ul><p>这与函数调用的过程有一点类似之处：由于对“break状态”的拦截交给语句退出（完成）之后的下一个语句，因此如果语句是嵌套的，那么其后续（也就是外层的）语句就可以得到处理这个“break状态”的机会。举例来说：</p><pre><code>console.log(eval(`\n  aaa: {\n    1+2;\n    bbb: {\n     3+4;\n     break aaa;\n    }\n  }\n`)); // 输出值：7\n</code></pre><p>在这个示例中，“break aaa”语句是发生于bbb标签所示块中的。但当这个中断发生时，</p><ul>\n<li>标签化语句bbb将首先捕获到这个语句完成状态，并携带有标签aaa；</li>\n<li>由于bbb语句完成时检查到的状态中的中断目标（Target）与自己的标签不同，所以它将这个状态继续作为自己的完成状态，返回给外层的aaa标签化语句aaa；</li>\n<li>语句aaa得到上述状态，并对比标签成功，返回结果为语句<code>3+4</code>的值（作为完成状态传出）。</li>\n</ul><p>所以，语句执行总是返回它的完成状态，且如果这个完成状态是包含值（Value）的话，那么它是可以作为JavaScript代码可访问的数据来使用的。例如，如果该语句被作为<code>eval()</code>来执行，那么它就是eval()函数返回的值。</p><h2>中断语句的特殊性</h2><p>最后的一个问题是：标题中的这行代码有什么特殊性呢？</p><p>相信你知道我总是会设计一些难解的，以及表面上矛盾和歧义的代码，并围绕这样的代码来组织我的专题的每一讲的内容。而今天这行代码在“貌似难解”的背后，其实并不包含任何特殊的执行效果，它的执行过程并不会对其他任何代码构成任何影响。</p><p>我列出这行代码的原因有两点。</p><ol>\n<li>它是最小化的break语句的用法，你不可能写出更短的代码来做break的示例了；</li>\n<li>这种所谓“不会对其他任何代码构成任何影响”的语句，也是JavaScript中的特有设计。</li>\n</ol><p>首先，由于“标签化语句”必须作用于“一个”语句，而<strong>语句</strong>理论上的最小化形式是“空语句”。但是将空语句作为break的目标标签语句是不可能的，因为你还必须在标签语句所示的语句范围内使用break来中断。空语句以及其他一些单语句是没有这样的语句范围的，因此最小化的示例就只能是对break语句自身的中断。</p><p>其次，语句的返回与函数的返回有相似性。例如，函数可以不返回任何东西给外部，这种情况下外部代码得到的函数出口信息会是undefined值。</p><p>由于典型的函数式语言的“函数”应该是没有副作用的，所以这意味着该函数的执行过程不影响任何其他逻辑——也不在这个“程序逻辑的世界”中留下任何的状态。事实上，你还可以用“void”运算符来阻止一个函数返回的值影响它的外部世界。函数是“表达式运算”这个体系中的，因此用一个运算符来限制它的逻辑，这很合理。</p><p>虽然“<strong>break</strong> labelName”的中止过程是可以传出“最后执行语句”的状态的，但是你只要回忆一下这个过程就会发现一个悖论：<span class=\"orange\">任何被break的代码上下文中，最后执行语句必然会是“break语句”本身！</span>所以，如果要在这个逻辑中实现“语句执行状态”的传递，那么就必须确保：</p><ol>\n<li>“break语句”不返回任何值（ECMAScript内部约定用“Empty”值来表示）；</li>\n<li>上述“不返回任何值”的语句，也不会影响任何语句的既有返回值。</li>\n</ol><p>所以，事实上我们已经探究了“break语句”返回值的两个关键特性的由来：</p><ul>\n<li>它的类型必然是“break”；</li>\n<li>它的返回值必然是“空（Empty）”。</li>\n</ul><p>对于Empty值，在ECMAScript中约定：在多行语句执行时它可以被其他非Empty值更新（UpdateEmpty），而Empty不可以覆盖其他任何值。</p><p>这就是空语句等也同样“不会对其他任何代码构成任何影响”的原因了。</p><h2>知识回顾</h2><p>今天的内容有一些非常重要的、关键的点，主要包括：</p><ol>\n<li>“GOTO语句是有害的。”——1972年图灵奖得主艾兹格·迪科斯彻（Edsger Wybe Dijkstra, 1968）。</li>\n<li>很多新的语句或语法被设计出来用来替代GOTO的效果的，但考虑到GOTO的失败以及无与伦比的破坏性，这些新语法都被设计为功能受限的了。</li>\n<li>任何的一种GOTO带来的都是对“顺序执行”过程的中断以及现场的破坏，所以也都存在相应的执行现场回收的机制。</li>\n<li>有两种中断语句，它们的语义和应用场景都不相同。</li>\n<li>语句有返回值。</li>\n<li>在顺序执行时，当语句返回Empty的时候，不会改写既有的其他语句的返回值。</li>\n<li>标题中的代码，是一个“最小化的break语句示例”。</li>\n</ol><h2>思考题</h2><ul>\n<li>找到其他返回Empty的语句。</li>\n<li>尝试完整地对比函数执行与语句执行的过程。</li>\n</ul><p>欢迎你在进行深入思考后，与其他同学分享自己的想法，也让我有机会能听听你的收获。</p>","neighbors":{"left":{"article_title":"加餐 | 捡豆吃豆的学问（下）：这门课该怎么学？","id":171125},"right":{"article_title":"07 | `${1}`：详解JavaScript中特殊的可执行结构","id":169584}},"comments":[{"had_liked":false,"id":154463,"user_name":"不将就","can_delete":false,"product_type":"c1","uid":1462422,"ip_address":"","ucode":"20A1EFAB085B0F","user_header":"https://static001.geekbang.org/account/avatar/00/16/50/96/dd23dcb0.jpg","comment_is_top":false,"comment_ctime":1574436059,"is_pvip":false,"replies":[{"id":"59534","content":"不是。块级作用域与它内部声明了什么没关系。例如，一个“块语句{ }”就有一个块级作用域，哪怕它内部一行代码也没有。<br><br>对于你说的if(1)这个例子来说，这里有两个语句，一个是if语句本身，它是个“单语句”（ECMAScript就是这么定义的，NodeJS的错误提示里也有），它没有块级作用域；而后面的一对大括号“{}”，是一个“块语句”，有一个块。<br><br>传统习惯上过来的开发人员会把“if () { ... }”理解成一个语句，而在JavaScript中，这是两个语句。","user_name":"作者回复","comment_id":154463,"uid":"1521669","ip_address":"","utype":1,"ctime":1574660544,"user_name_real":"Aiming"}],"discussion_count":1,"race_medal":0,"score":"121833520347","product_id":100039701,"comment_content":"老师，问个问题，<br>{<br>let a=10<br>}<br>这是块级作用域<br><br>{<br>var a=10<br>}<br>在外层可以访问到a为未定义，这是不是可以说明{}这对括号里只有出现let&#47;const才算有块级作用域？但是如下<br>if(1){<br>let b=10<br>}<br>这个if语句有括号而且用了let，老师为什么又说if语句没有块级作用域？<br>","like_count":29,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475478,"discussion_content":"不是。块级作用域与它内部声明了什么没关系。例如，一个“块语句{ }”就有一个块级作用域，哪怕它内部一行代码也没有。\n\n对于你说的if(1)这个例子来说，这里有两个语句，一个是if语句本身，它是个“单语句”（ECMAScript就是这么定义的，NodeJS的错误提示里也有），它没有块级作用域；而后面的一对大括号“{}”，是一个“块语句”，有一个块。\n\n传统习惯上过来的开发人员会把“if () { ... }”理解成一个语句，而在JavaScript中，这是两个语句。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574660544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156490,"user_name":"海绵薇薇","can_delete":false,"product_type":"c1","uid":1601296,"ip_address":"","ucode":"37C7CC2EB81909","user_header":"https://static001.geekbang.org/account/avatar/00/18/6f/10/bfbf81dc.jpg","comment_is_top":false,"comment_ctime":1574902682,"is_pvip":false,"replies":[{"id":"60104","content":"我之前没有注意过这个例子，倒是忽略了它在语句执行上的特点。不过这并不算特例。<br><br>因为在finally{}块中的执行流程仍然会回到try{}块，例如说，你在try{}块中使用return语句，那么在return之前会执行到finally{}块，而finally{}执行完之后，还会回到try{}块里的return语句来返回。所以最终“完成并退出”整个try语句的，还是try块。<br><br>在效果上，这类似于（也就是finally{}是一个call()）：<br>try {<br>  return void finally(), x;<br>}<br>catch {}","user_name":"作者回复","comment_id":156490,"uid":"1521669","ip_address":"","utype":1,"ctime":1574909968,"user_name_real":"Aiming"}],"discussion_count":1,"race_medal":0,"score":"87474248602","product_id":100039701,"comment_content":"Hello，老师好：）阅读完文章还存在如下问题，期待有解答或方向，感谢：）<br><br>try { <br><br>​\t1<br><br>} finally {<br><br>​\tconsole.log(&#39;finally&#39;)<br><br>​\t2<br><br>}<br><br>输出：<br><br>&gt; finally<br><br>&gt; 1<br><br>1. try finally 语句输出的Result 是{type: normal, value: 1}。但是最后一个语句是finally中的2，value不应该是2吗？<br><br>try {<br><br>​\tthrow 1<br><br>} catch(ex) {<br><br>​\t2<br><br>}<br><br>这里确实输出了2。<br><br><br>function foo() {<br><br>​\taaa: try {<br><br>​\t\treturn 1;<br><br>​\t} finally {<br><br>​\t\tbreak aaa;<br><br>​\t}<br><br>}<br><br>return 1   Result是{type: return, value: 1}<br>break      Result是{type: break, value: empty, target: aaa}<br><br>2. 这里finally中语句的结果却覆盖了try中语句的结果，这是一个特例吗？","like_count":20,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476128,"discussion_content":"我之前没有注意过这个例子，倒是忽略了它在语句执行上的特点。不过这并不算特例。\n\n因为在finally{}块中的执行流程仍然会回到try{}块，例如说，你在try{}块中使用return语句，那么在return之前会执行到finally{}块，而finally{}执行完之后，还会回到try{}块里的return语句来返回。所以最终“完成并退出”整个try语句的，还是try块。\n\n在效果上，这类似于（也就是finally{}是一个call()）：\ntry {\n  return void finally(), x;\n}\ncatch {}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574909968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160403,"user_name":"Elmer","can_delete":false,"product_type":"c1","uid":1233975,"ip_address":"","ucode":"61FC9CE0BA5BC1","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/37/528a43e7.jpg","comment_is_top":false,"comment_ctime":1575945205,"is_pvip":true,"replies":[{"id":"61257","content":"其实真实的情况与你想的有点区别（也与我在文章中讲的有点细节上的不同）。关键在于：所有的表达式，原则上都是既可以返回完成记录，也可以返回引用，也可以返回值的。<br><br>后面两种比较容易理解，但表达式返回“完成记录”的意义在哪儿呢？多数情况下是没有意义的，但是只有允许这种情况，ECMAScript才能在表达式（的实现逻辑）中抛异常啊。所以多数情况下表达式返回值的Result都是值或引用两种，但偶尔也会返回类型为Throw的异常完成记录。也正是因为这个缘故，在ECMAScript中，所有所有的取表达式计算结果的写法，都采用类似下面这种模式：<br>```<br>* Let ref be the result of evaluating ...<br>* Let val be ? GetValue(ref)<br>```<br>首先，在GetValue()里面会写，如果ref不是引用，那么就直接返回，这样GetValue就会把“异常类型”的完成记录原样抛出来。然后，你注意第二行中的那个“？”号，那个表明如果GetValue()的调用结果是“异常类型”的完成记录，那么就结束当前的执行，继续把异常往外抛。<br><br>而且?号还有一个作用，就是直接从Normal类型的完成记录中把值解出来。也就是如果r是NormalCompletion，那么r = r.value。这样一来，就确保任何`?...`操作的结果，要么是异常被抛出，要么就是完成记录r中的值（r.value）。<br><br>所以，事实上整个“表达式执行”的结果Result也是支持返回值为完成记录的（而不仅仅是引用和值），只是绝大多数都过滤掉了。<br><br>接下来才是你的问题。函数执行也只是正常地返回了一个完成记录而已（如上面所说的，这是正常的行为，而不是语句执行的特例）。如果它是使用Return，那么也会在调用完成前被替换成Normal类型。然后函数调用操作会保证在完成之前得到的仅仅是一个一般的JavaScript语言类型中的数据（Result），或者非正常的完成类型。你看看这里就明白了：<br>```<br>&#47;&#47; FROM: https:&#47;&#47;tc39.es&#47;ecma262&#47;#sec-evaluatecall<br><br>...<br>&#47;&#47; 取函数调用结果<br>* Let result be Call(func, thisValue, argList).<br><br>&#47;&#47; 断言：要么是非正常返回，要么就是语言类型<br>* Assert: If result is not an abrupt completion, then Type(result) is an ECMAScript language type.<br>```<br><br>而Call()是调用F.[[Call]]来实现的，它的主要代码就一行：<br>```<br>&#47;&#47; FROM: https:&#47;&#47;tc39.es&#47;ecma262&#47;#sec-call<br>* Return ? F.[[Call]](V, argumentsList).<br>```<br>注意这里的？号，就是要么抛异常出去，要么就是把结果（完成记录r）中的值（r.value）取出来了。——这里再强调一个小的关键点：函数调用是不能返回规范类型中的“引用”的，也就是说结果值已经用GetValue(ref)把值取出来过了。","user_name":"作者回复","comment_id":160403,"uid":"1521669","ip_address":"","utype":1,"ctime":1575963426,"user_name_real":"Aiming"}],"discussion_count":3,"race_medal":0,"score":"44525618165","product_id":100039701,"comment_content":"觉得函数执行应该是语句执行的一部分或者一个特例，返回值都已经统一为文中的result。<br>只不过函数执行具体实现了本身的上下文创建与回收，并用额外的栈来记录当前执行状况。<br>两者都是流程控制的一种形式。关系应为语句执行包含函数执行。<br>不知道理解的对不对。","like_count":10,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477364,"discussion_content":"其实真实的情况与你想的有点区别（也与我在文章中讲的有点细节上的不同）。关键在于：所有的表达式，原则上都是既可以返回完成记录，也可以返回引用，也可以返回值的。\n\n后面两种比较容易理解，但表达式返回“完成记录”的意义在哪儿呢？多数情况下是没有意义的，但是只有允许这种情况，ECMAScript才能在表达式（的实现逻辑）中抛异常啊。所以多数情况下表达式返回值的Result都是值或引用两种，但偶尔也会返回类型为Throw的异常完成记录。也正是因为这个缘故，在ECMAScript中，所有所有的取表达式计算结果的写法，都采用类似下面这种模式：\n```\n* Let ref be the result of evaluating ...\n* Let val be ? GetValue(ref)\n```\n首先，在GetValue()里面会写，如果ref不是引用，那么就直接返回，这样GetValue就会把“异常类型”的完成记录原样抛出来。然后，你注意第二行中的那个“？”号，那个表明如果GetValue()的调用结果是“异常类型”的完成记录，那么就结束当前的执行，继续把异常往外抛。\n\n而且?号还有一个作用，就是直接从Normal类型的完成记录中把值解出来。也就是如果r是NormalCompletion，那么r = r.value。这样一来，就确保任何`?...`操作的结果，要么是异常被抛出，要么就是完成记录r中的值（r.value）。\n\n所以，事实上整个“表达式执行”的结果Result也是支持返回值为完成记录的（而不仅仅是引用和值），只是绝大多数都过滤掉了。\n\n接下来才是你的问题。函数执行也只是正常地返回了一个完成记录而已（如上面所说的，这是正常的行为，而不是语句执行的特例）。如果它是使用Return，那么也会在调用完成前被替换成Normal类型。然后函数调用操作会保证在完成之前得到的仅仅是一个一般的JavaScript语言类型中的数据（Result），或者非正常的完成类型。你看看这里就明白了：\n```\n// FROM: https://tc39.es/ecma262/#sec-evaluatecall\n\n...\n// 取函数调用结果\n* Let result be Call(func, thisValue, argList).\n\n// 断言：要么是非正常返回，要么就是语言类型\n* Assert: If result is not an abrupt completion, then Type(result) is an ECMAScript language type.\n```\n\n而Call()是调用F.[[Call]]来实现的，它的主要代码就一行：\n```\n// FROM: https://tc39.es/ecma262/#sec-call\n* Return ? F.[[Call]](V, argumentsList).\n```\n注意这里的？号，就是要么抛异常出去，要么就是把结果（完成记录r）中的值（r.value）取出来了。——这里再强调一个小的关键点：函数调用是不能返回规范类型中的“引用”的，也就是说结果值已经用GetValue(ref)把值取出来过了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575963426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1338736,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6d/70/25ba4287.jpg","nickname":"明月","note":"","ucode":"D6586156BF09CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":584495,"discussion_content":"老师是不是可以理解，从某些角度看，函数执行就是表达式执行可以返回完成记录的一个证明？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660878111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":477364,"ip_address":"上海"},"score":584495,"extra":""}]},{"author":{"id":1018203,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","nickname":"孜孜","note":"","ucode":"7EF4FB644357CE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283317,"discussion_content":"原理上说明了函数调用不能作为左操作数。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1592234217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154154,"user_name":"zcdll","can_delete":false,"product_type":"c1","uid":1004086,"ip_address":"","ucode":"F1F20EB17D8789","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/36/18f5d218.jpg","comment_is_top":false,"comment_ctime":1574385565,"is_pvip":false,"replies":[{"id":"59195","content":"你说的都是。不过也不止的哟。比如说break语句自己就返回empty呀，还有continue，还有for语句的某些处理，以及yield等等，都有返回Empty的情况。","user_name":"作者回复","comment_id":154154,"uid":"1521669","ip_address":"","utype":1,"ctime":1574400200,"user_name_real":"Aiming"}],"discussion_count":1,"race_medal":0,"score":"40229091229","product_id":100039701,"comment_content":"返回 Empty 的语句，是不是还有 单独的一个 分号，和  if 不写大括号，或者大括号中为空？","like_count":9,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475389,"discussion_content":"你说的都是。不过也不止的哟。比如说break语句自己就返回empty呀，还有continue，还有for语句的某些处理，以及yield等等，都有返回Empty的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574400200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203237,"user_name":"林逸舟","can_delete":false,"product_type":"c1","uid":1608085,"ip_address":"","ucode":"46A7F77D248A2A","user_header":"https://static001.geekbang.org/account/avatar/00/18/89/95/622cec8d.jpg","comment_is_top":false,"comment_ctime":1586159384,"is_pvip":false,"replies":[{"id":"75945","content":"谢谢。挺好的一份答案。<br>其中有些东西阅读到后面的小结就可以得到印证了。^^.","user_name":"作者回复","comment_id":203237,"uid":"1521669","ip_address":"","utype":1,"ctime":1586168417,"user_name_real":"Aiming"}],"discussion_count":2,"race_medal":0,"score":"27355963160","product_id":100039701,"comment_content":"尝试完整地对比函数执行与语句执行的过程：<br><br>·操作返回值：<br>函数执行：在函数体的最后进行一次返回值的赋值<br>语句执行：在每句后更新返回值<br><br>如下所示：<br>function foo() {<br>    1 + 1;<br>    return 1; &#47;&#47;函数的执行结果为1 赋值动作仅有一次<br>}<br><br>foo();<br><br><br>{<br>    1 + 1; &#47;&#47;整个块语句的执行结果更新为2<br>    2 + 2; &#47;&#47;整个块语句的执行结果更新为4<br>}<br><br>·堆栈顺序<br>函数执行与语句执行类似 是先入后出的堆栈<br><br>如下所示：<br><br>function bar() {<br>    return;<br>}<br><br>function foo() {<br>    1 + 1;<br>    bar()<br>    return 1; &#47;&#47;函数的执行结果为1 赋值动作仅有一次<br>}<br><br>foo();<br><br>&#47;&#47;开始执行foo-&gt;开始执行bar-&gt;bar执行结束-&gt;foo执行结束<br><br>{<br>    1 + 1; &#47;&#47;整个块语句的执行结果更新为2<br>    2 + 2; &#47;&#47;整个块语句的执行结果更新为4<br>}<br><br><br>&#47;&#47;开始执行块语句{}-&gt;执行1+1-&gt;1+1执行结束-&gt;执行2+2-&gt;2+2执行结束-&gt;块语句执行结束<br><br>·操作Result的对象<br>函数：getValue(ref)||ref传递给上一层表达式使用<br>语句：Completion传递给引擎进行使用","like_count":6,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490806,"discussion_content":"谢谢。挺好的一份答案。\n其中有些东西阅读到后面的小结就可以得到印证了。^^.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586168417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222955,"discussion_content":"〇，是小节，不是小结😸","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586181451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155822,"user_name":"穿秋裤的男孩","can_delete":false,"product_type":"c1","uid":1748640,"ip_address":"","ucode":"D0F48C66377893","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ae/a0/707350ef.jpg","comment_is_top":false,"comment_ctime":1574761464,"is_pvip":false,"replies":[{"id":"59896","content":"如果你说的是`for each ( ... in ...)`，那么这个语句不在ECMAScript的规范里面，在mozilla的spidermonkey引擎里，也是被废弃的特性了。<br><br>https:&#47;&#47;developer.mozilla.org&#47;en-US&#47;docs&#47;Web&#47;JavaScript&#47;Reference&#47;Statements&#47;for_each...in","user_name":"作者回复","comment_id":155822,"uid":"1521669","ip_address":"","utype":1,"ctime":1574776256,"user_name_real":"Aiming"}],"discussion_count":6,"race_medal":0,"score":"23049597944","product_id":100039701,"comment_content":"所谓“可中断语句”其实只有两种，包括全部的循环语句，以及 swtich 语句。<br><br>老师，那forEach不属于循环语句吗？为什么break不可以在forEach中使用呢","like_count":5,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475887,"discussion_content":"如果你说的是`for each ( ... in ...)`，那么这个语句不在ECMAScript的规范里面，在mozilla的spidermonkey引擎里，也是被废弃的特性了。\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574776256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1094421,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b3/15/01ef8470.jpg","nickname":"人间动物园","note":"","ucode":"FAF6DC16334C2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261694,"discussion_content":"forEach实际上是一种回调，可以在Array上实现一个简易的forEach来体会一下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588993096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1338736,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6d/70/25ba4287.jpg","nickname":"明月","note":"","ucode":"D6586156BF09CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1094421,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b3/15/01ef8470.jpg","nickname":"人间动物园","note":"","ucode":"FAF6DC16334C2F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583998,"discussion_content":"这么一想，map， filter 这些操作符号都是一种回调函数而已。👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660554931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":261694,"ip_address":"上海"},"score":583998,"extra":""}]},{"author":{"id":1293057,"avatar":"https://static001.geekbang.org/account/avatar/00/13/bb/01/568ac2d6.jpg","nickname":"K4SHIFZ","note":"","ucode":"BFB49AAC0E4C74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236474,"discussion_content":"函数调用应该是表达式范畴，语句是规范中静态定义的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587096908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039504,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dc/90/c980113a.jpg","nickname":"行问","note":"","ucode":"F3AED699218475","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70147,"discussion_content":"说的应该是 Array 的 forEach 和 map ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575332177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1601296,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6f/10/bfbf81dc.jpg","nickname":"海绵薇薇","note":"","ucode":"37C7CC2EB81909","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":61265,"discussion_content":"总感觉哪里不太对，但是又说不上来。break作用于语句，但是函数调用和语句之间是啥关系？有点搞不清。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574776588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330577,"user_name":"黑山老妖","can_delete":false,"product_type":"c1","uid":1115958,"ip_address":"","ucode":"A1659F99C5BE1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/36/d677e741.jpg","comment_is_top":false,"comment_ctime":1642054779,"is_pvip":false,"replies":[{"id":"120587","content":"非常棒的总结！<br><br>关于未解疑问中的第1个，你自己的回答是对的，就是语言层面上消化了那些问题。——既然RETURN是一个完成状态，那么就一定是按语句返回来做的，但f()是一个“函数调用表达式”，那就是最终按表达式运算结果做了处理。<br><br>两个分开的小的疑问点。其一，函数的RETURN不是用来“传状态”。如果函数内有一个特别的状态，那一定是THROW，如果没这样的状态，那就一定RETURN出来个东西。函数的RETURN要与参数结合起来理解，就是一进一出的求值=&gt;数据传递方式。——多说一句，yield带来的是多进多出的数据传递。<br><br>其二是关于break lableName的，你的理解没错。它只与块相关。<br><br>其它的都非常赞，表达的也清晰明了。再赞+n","user_name":"作者回复","comment_id":330577,"uid":"1521669","ip_address":"","utype":1,"ctime":1642091179,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"18821923963","product_id":100039701,"comment_content":"1、传统习惯上过来的开发人员会把“if () { ... }”理解成一个语句，而在JavaScript中，这是两个语句。<br>2、在try{}块中使用return语句，那么在return之前会执行到finally{}块，而finally{}执行完之后，还会回到try{}块里的return语句来返回。所以最终“完成并退出”整个try语句的，还是try块。<br>3、·操作Result的对象<br>函数：getValue(ref)||ref传递给上一层表达式使用<br>语句：Completion传递给引擎进行使用  <br>4、所谓“可中断语句”其实只有两种，包括全部的循环语句，以及 swtich 语句。<br>5、1、执行结果方面：<br><br>JavaScript 是一门混合了函数式与命令式范型的语言，对函数和语句的不同处理，正是两种语言范型根本上的不同抽象模型带来的差异。<br><br>本质上所有 JavaScript 的执行都是语句执行（包括函数执行），语句执行的过程因语句类型而异，但结果都返回的是一个“完成”结果。<br><br>但【函数语句执行】和【普通语句（非函数）执行】的区别在于：函数语句执行返回的“完成”结果是值或者引用（未报异常的情况下），而普通语句执行返回的是一个完成状态（Completion）。<br><br><br>2、执行过程方面：<br><br>总体来讲，<br><br>JavaScript 的执行机制包含两部分：【执行权（逻辑）】和【数据资源（数据）】<br><br>JavaScript的执行（运行）环境：是一个后入先出的栈，栈顶就是当前“执行权”拥有者所持有的那一帧数据，运行环境通过函数的 CALL&#47;RETURN 来模拟“数据帧”（也称上下文环境或作用域）在栈上的入栈和出栈过程。<br><br>但&quot;break labelName&quot;这一语法跟上面不同，它表达一个位置的跳转，而不是一个数据帧的进出栈。<br><br>另外，各种类型的语句执行过程（内部逻辑）也可能有差异：<br><br>2.1 函数执行过程<br>2.2 break 执行过程<br>2.3 case 执行过程<br>2.4 switch 执行过程<br>2.5 循环语句执行过程<br>2.6 try...catch 执行过程<br><br><br>【仍旧未解的疑问】<br><br>1、函数执行和语句执行返回的都是一个完成状态？还是函数执行返回的只能是值或引用？亦或是其他说法？表达式执行（包括函数执行），本质上都是求值运算，所以它们应当只返回值。但是事实上所有的执行——包括函数、表达式和语句也都“同时”是可以返回完成状态，这样才能在表达式中向外抛异常，因为异常抛出就是一个完成状态。<br><br>但是ECMAScript对所有在表达式层面上返回的“完成状态”做了处理，相当于在语言层面上“消化了”这些状态。所以绝大多数情况下，你认为表达式执行返回的Result是值或引用就好了。稍有例外的是，函数调用返回的是一个type为Return的完成状态，只不过它在内部方法Call处理之后，也已经变成了值而已。<br><br><br>1、可以理解为函数中return的设计是为了传递函数的状态，break的设计则是为了传递语句的状态么？可以<br>2、可以认为break;只可以中断语句，不能用在函数中，break label;可以用在函数中，它返回了上一行语句的完成状态并作为所在函数的返回值？. 不太对。break labelName只与“块”相关，与函数没直接关系。语句的“块”也是有返回值的，因为JavaScript里面存在“语句执行是有值的”这个设定。<br><br>注意有许多语句是有“块（块级作用域）”的，而不仅仅是块语句（也就是一对大括号，它称为Block语句）。<br><br>函数执行啊，其实是表达式执行的特例。它会通过完成记录来返回return语句返回结果。<br><br>但是，在内部过程Call()的调用中它会取出值，而不是直接返回“Return类型的完成类型”。所以在“函数调用作为表达式的操作数”时，运算处理的还是“Result&#47;Value值”，而不是“完成记录”。<br><br>由于函数调用会“从完成记录中取出值”，所以它不能返回“引用（规范类型）”<br><br><br>在js中，语句执行跟表达式执行是分开的，是两种不同概念的东西。而函数执行其实是表达式执行的一种，其中函数名（亦即是函数）是运算数，而一对括号是运算符。——这是确实的，并且这个称为“函数调用运算符”的括号也是有优先级的，你可以直接在MDN里面查到。<br><br>表面来看，函数就是一堆语句，但其实“函数执行”时的返回值是由return来决定的，对吧。而语句执行却不是，语句执行的结果值是由“最后一个有效语句”来决定的。当你使用eval()来执行一批语句时，就可以看到这个结果值了。——并且，这也是语句执行要被拿出来讨论的原因，亦即是“动态执行”执行的是语句，而不是函数，也不是表达式。<br>","like_count":4,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545957,"discussion_content":"非常棒的总结！\n\n关于未解疑问中的第1个，你自己的回答是对的，就是语言层面上消化了那些问题。——既然RETURN是一个完成状态，那么就一定是按语句返回来做的，但f()是一个“函数调用表达式”，那就是最终按表达式运算结果做了处理。\n\n两个分开的小的疑问点。其一，函数的RETURN不是用来“传状态”。如果函数内有一个特别的状态，那一定是THROW，如果没这样的状态，那就一定RETURN出来个东西。函数的RETURN要与参数结合起来理解，就是一进一出的求值=&gt;数据传递方式。——多说一句，yield带来的是多进多出的数据传递。\n\n其二是关于break lableName的，你的理解没错。它只与块相关。\n\n其它的都非常赞，表达的也清晰明了。再赞+n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642091180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161248,"user_name":"Real Aaron","can_delete":false,"product_type":"c1","uid":1098313,"ip_address":"","ucode":"F2601A2F744AE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/49/6d68160e.jpg","comment_is_top":false,"comment_ctime":1576156210,"is_pvip":false,"replies":[{"id":"61512","content":"谢谢Aaron。<br><br>我想你读过前11章，看到第二篇加餐内容（“让JavaScript运行起来”）之后，你的大多数问题就都有解了，而且会对你已经领悟到的内容有许多“更新”，认识会再加深一些的。<br><br>说回你最后的两个疑问。表达式执行（包括函数执行），本质上都是求值运算，所以它们应当只返回值。但是事实上所有的执行——包括函数、表达式和语句也都“同时”是可以返回完成状态，这样才能在表达式中向外抛异常，因为异常抛出就是一个完成状态。<br><br>但是ECMAScript对所有在表达式层面上返回的“完成状态”做了处理，相当于在语言层面上“消化了”这些状态。所以绝大多数情况下，你认为表达式执行返回的Result是值或引用就好了。稍有例外的是，函数调用返回的是一个type为Return的完成状态，只不过它在内部方法Call处理之后，也已经变成了值而已。<br><br>关于这个问题，正好是在这一课的留言中，我给Elmer的回复中解释了更多的细节。你可以看看。","user_name":"作者回复","comment_id":161248,"uid":"1521669","ip_address":"","utype":1,"ctime":1576205048,"user_name_real":"Aiming"}],"discussion_count":2,"race_medal":0,"score":"18756025394","product_id":100039701,"comment_content":"【学习方式大变化】<br><br>前5讲看下来，主要有两个感觉：<br><br>1、课程的内容非常深入而且重要，经常中间看到一段文字，就有一种“原来如此“的体验。<br>2、逻辑顺序看不懂，看完一讲之后，好像学到一些零碎知识，但串不一起来。<br><br>今天凑巧看到了加餐中的”学习这门课的正确姿势“，原来老师用心良苦，没有将知识点清晰的串起来是希望大家自己能主动理清思路，串出逻辑。<br><br>参考加餐中的方法，今天换了一种学习方式：一边学习内容，一边将关键词和疑惑（dots）写在本子上，反复琢磨其中的来龙去脉。最终写满了两页纸，然后将其中的各个点串起来（connecting the dots），形成了下面的笔记。<br><br>【本讲的一些记录和归纳】<br><br>1、执行结果方面：<br><br>JavaScript 是一门混合了函数式与命令式范型的语言，对函数和语句的不同处理，正是两种语言范型根本上的不同抽象模型带来的差异。<br><br>本质上所有 JavaScript 的执行都是语句执行（包括函数执行），语句执行的过程因语句类型而异，但结果都返回的是一个“完成”结果。<br><br>但【函数语句执行】和【普通语句（非函数）执行】的区别在于：函数语句执行返回的“完成”结果是值或者引用（未报异常的情况下），而普通语句执行返回的是一个完成状态（Completion）。<br><br><br>2、执行过程方面：<br><br>总体来讲，<br><br>JavaScript 的执行机制包含两部分：【执行权（逻辑）】和【数据资源（数据）】<br><br>JavaScript的执行（运行）环境：是一个后入先出的栈，栈顶就是当前“执行权”拥有者所持有的那一帧数据，运行环境通过函数的 CALL&#47;RETURN 来模拟“数据帧”（也称上下文环境或作用域）在栈上的入栈和出栈过程。<br><br>但&quot;break labelName&quot;这一语法跟上面不同，它表达一个位置的跳转，而不是一个数据帧的进出栈。<br><br>另外，各种类型的语句执行过程（内部逻辑）也可能有差异：<br><br>2.1 函数执行过程<br>2.2 break 执行过程<br>2.3 case 执行过程<br>2.4 switch 执行过程<br>2.5 循环语句执行过程<br>2.6 try...catch 执行过程<br><br><br>【仍旧未解的疑问】<br><br>1、函数执行和语句执行返回的都是一个完成状态？还是函数执行返回的只能是值或引用？亦或是其他说法？<br><br>希望老师能解答一下，非常感谢。","like_count":4,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477659,"discussion_content":"谢谢Aaron。\n\n我想你读过前11章，看到第二篇加餐内容（“让JavaScript运行起来”）之后，你的大多数问题就都有解了，而且会对你已经领悟到的内容有许多“更新”，认识会再加深一些的。\n\n说回你最后的两个疑问。表达式执行（包括函数执行），本质上都是求值运算，所以它们应当只返回值。但是事实上所有的执行——包括函数、表达式和语句也都“同时”是可以返回完成状态，这样才能在表达式中向外抛异常，因为异常抛出就是一个完成状态。\n\n但是ECMAScript对所有在表达式层面上返回的“完成状态”做了处理，相当于在语言层面上“消化了”这些状态。所以绝大多数情况下，你认为表达式执行返回的Result是值或引用就好了。稍有例外的是，函数调用返回的是一个type为Return的完成状态，只不过它在内部方法Call处理之后，也已经变成了值而已。\n\n关于这个问题，正好是在这一课的留言中，我给Elmer的回复中解释了更多的细节。你可以看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576205048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098313,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c2/49/6d68160e.jpg","nickname":"Real Aaron","note":"","ucode":"F2601A2F744AE6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81057,"discussion_content":"明白了，谢谢周老师的回复~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576216587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154539,"user_name":"桔子","can_delete":false,"product_type":"c1","uid":1387844,"ip_address":"","ucode":"9555BC4494A28C","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/44/0a209c31.jpg","comment_is_top":false,"comment_ctime":1574476190,"is_pvip":false,"replies":[{"id":"59532","content":"1. 可以。<br>2. 不太对。break labelName只与“块”相关，与函数没直接关系。语句的“块”也是有返回值的，因为JavaScript里面存在“语句执行是有值的”这个设定。<br><br>注意有许多语句是有“块（块级作用域）”的，而不仅仅是块语句（也就是一对大括号，它称为Block语句）。","user_name":"作者回复","comment_id":154539,"uid":"1521669","ip_address":"","utype":1,"ctime":1574660074,"user_name_real":"Aiming"}],"discussion_count":1,"race_medal":0,"score":"18754345374","product_id":100039701,"comment_content":"1、可以理解为函数中return的设计是为了传递函数的状态，break的设计则是为了传递语句的状态么？<br>2、可以认为break;只可以中断语句，不能用在函数中，break label;可以用在函数中，它返回了上一行语句的完成状态并作为所在函数的返回值？","like_count":4,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475501,"discussion_content":"1. 可以。\n2. 不太对。break labelName只与“块”相关，与函数没直接关系。语句的“块”也是有返回值的，因为JavaScript里面存在“语句执行是有值的”这个设定。\n\n注意有许多语句是有“块（块级作用域）”的，而不仅仅是块语句（也就是一对大括号，它称为Block语句）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574660074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165991,"user_name":"Elmer","can_delete":false,"product_type":"c1","uid":1233975,"ip_address":"","ucode":"61FC9CE0BA5BC1","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/37/528a43e7.jpg","comment_is_top":false,"comment_ctime":1577359302,"is_pvip":true,"replies":[{"id":"63297","content":"函数执行啊，其实是表达式执行的特例。它会通过完成记录来返回return语句返回结果。<br><br>但是，在内部过程Call()的调用中它会取出值，而不是直接返回“Return类型的完成类型”。所以在“函数调用作为表达式的操作数”时，运算处理的还是“Result&#47;Value值”，而不是“完成记录”。<br><br>由于函数调用会“从完成记录中取出值”，所以它不能返回“引用（规范类型）”。举例来说：<br><br>```<br># 示例<br>&gt; obj = { foo() { return this === obj } }<br><br># 分组表达式能返回引用<br>&gt; (obj.foo)()<br>true<br><br># return不能返回引用<br>&gt; (function () { return obj.foo })()()<br>false<br>```","user_name":"作者回复","comment_id":165991,"uid":"1521669","ip_address":"","utype":1,"ctime":1577376705,"user_name_real":"Aiming"}],"discussion_count":1,"race_medal":0,"score":"14462261190","product_id":100039701,"comment_content":"求函数执行与语句执行的过程对比。","like_count":3,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479344,"discussion_content":"函数执行啊，其实是表达式执行的特例。它会通过完成记录来返回return语句返回结果。\n\n但是，在内部过程Call()的调用中它会取出值，而不是直接返回“Return类型的完成类型”。所以在“函数调用作为表达式的操作数”时，运算处理的还是“Result/Value值”，而不是“完成记录”。\n\n由于函数调用会“从完成记录中取出值”，所以它不能返回“引用（规范类型）”。举例来说：\n\n```\n# 示例\n&amp;gt; obj = { foo() { return this === obj } }\n\n# 分组表达式能返回引用\n&amp;gt; (obj.foo)()\ntrue\n\n# return不能返回引用\n&amp;gt; (function () { return obj.foo })()()\nfalse\n```","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577376705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346614,"user_name":"Geek8740","can_delete":false,"product_type":"c1","uid":2811378,"ip_address":"","ucode":"2A01A14A8A6F28","user_header":"","comment_is_top":false,"comment_ctime":1653288620,"is_pvip":false,"replies":[{"id":"126535","content":"很赞的三个示例！<br><br>第三个示例最简单，catch{}块执行不到，所以流程是通过finally{}块之后，在函数结束处返回你的，你的结果输出中应该少显示了一个“return: 3”。<br><br>第一、二个示例分别返回1和3，你感觉最奇怪的地方，应该有两处。首先是示例2中为什么没有回到try{}块中的return，其次是示例1中为什么结果是1，而不是finally{}块中修改过的值3。<br><br>其一，如果在finally{}中有return，那么流程会提前返回，而不会退回到try{}块中的return。简单地说，在try{}中使用return，会触发finally{}块中的代码，而反过来，finaly{}块中使用return却没有这种“触发”的效果。这是因为finally{}块是整个try..catch..finally语句中的结束处理，它的语义被设计为“整个结构化异常处理块”结束之前被触发一次。——“被触发”是它的语义决定的。<br><br>接下来说说为什么“示例1的结果是1，而不是3”。在引擎中，return发生时，并不是“立即”清理栈并退出函数（这与我们大多数人想像的并不一样）。在引擎里，对于&#39;try .. finally ..&#39;这个结构来说，return实际是try {}这里的语句块的“语句执行结果”。——也就是说，把try块中的代码按行执行，到最后一行的结果B（Result，Completion Record，完成状态）。这个完成记录B的type是RETURN。然后，引擎回到try{}块并处理finally{}块。然后忽略掉finally块的完成记录F（如果这个记录F的类型是normal的话），用try{}中的返回。——但是，如果F的类型是RETURN、THROW、BREAK等，那么它就会使用F的结果值来返回了。<br><br>这段逻辑在：<br>https:&#47;&#47;tc39.es&#47;ecma262&#47;#sec-try-statement-runtime-semantics-evaluation<br>```<br>TryStatement : try Block Finally<br>------<br>1. Let B be the result of evaluating Block.<br>2. Let F be the result of evaluating Finally.<br>3. If F.[[Type]] is normal, set F to B.<br>4. Return ? UpdateEmpty(F, undefined).<br>```<br><br>也就是说，“finally{}块正常执行完，就使用try{}的结果；如果finally{}非正常返回，那么就使用finally{}的结果”。所以你的问题中，示例1使用了try{}块的结果，而示例2使用了finally{}的结果。","user_name":"作者回复","comment_id":346614,"uid":"1521669","ip_address":"","utype":1,"ctime":1653641862,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"5948255916","product_id":100039701,"comment_content":"老师，try finaly中return的执行机制到底是怎样的？我下面几个例子彻底弄懵了<br><br>&#47;&#47; 测试样例1：try里有return finally里没有return<br>let x = 0;<br>function f (){<br>    try {<br>        console.log(&quot;try start:&quot;,x)<br>        x = 1<br>        console.log(&quot;try end:&quot;,x)<br>       return x;<br>    } catch(e){<br>    }<br>    finally{<br>        console.log(&quot;finally: start&quot;,x)<br>        x = 3;<br>        console.log(&quot;finally: end&quot;,x)<br>    }<br>    console.log(&quot;return:&quot;,x)<br>    return x;<br>}<br>console.log(f())<br>&#47;* 输出结果：<br>try start: 0<br>try end: 1<br>finally: start 1<br>finally: end 3<br>1<br><br>&#47;&#47;疑问：既然finally里的x和try是同一个，且赋值是后执行，为啥最后return的x值还是1呢？<br>*&#47;<br><br>&#47;&#47; 测试样例2：如果在finally里也加个return语句<br>let x = 0;<br>function f (){<br>    try {<br>        console.log(&quot;try start:&quot;,x)<br>        x = 1<br>        console.log(&quot;try end:&quot;,x)<br>       return x;<br>    } catch(e){<br>    }<br>    finally{<br>        console.log(&quot;finally: start&quot;,x)<br>        x = 3;<br>        console.log(&quot;finally: end&quot;,x)<br>        return x<br>    }<br>    console.log(&quot;return:&quot;,x)<br>    return x;<br>}<br>console.log(f())<br>&#47;* 输出结果：<br>try start: 0<br>try end: 1<br>finally: start 1<br>finally: end 3<br>3<br>*&#47;<br><br>&#47;&#47; 测试样例3：如果finally和try语句块里都没有return语句<br>let x = 0;<br>function f (){<br>    try {<br>        console.log(&quot;try start:&quot;,x)<br>        x = 1<br>        console.log(&quot;try end:&quot;,x)<br>    } catch(e){<br>        x = 2;<br>        return x;<br>    }<br>    finally{<br>        console.log(&quot;finally: start&quot;,x)<br>        x = 3;<br>        console.log(&quot;finally: end&quot;,x)<br>    }<br>    console.log(&quot;return:&quot;,x)<br>    return x;<br>}<br>console.log(f())<br>&#47;* 输出结果：<br>try start: 0<br>try end: 1<br>finally: start 1<br>finally: end 3<br>3<br>*&#47;","like_count":1,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573793,"discussion_content":"很赞的三个示例！\n\n第三个示例最简单，catch{}块执行不到，所以流程是通过finally{}块之后，在函数结束处返回你的，你的结果输出中应该少显示了一个“return: 3”。\n\n第一、二个示例分别返回1和3，你感觉最奇怪的地方，应该有两处。首先是示例2中为什么没有回到try{}块中的return，其次是示例1中为什么结果是1，而不是finally{}块中修改过的值3。\n\n其一，如果在finally{}中有return，那么流程会提前返回，而不会退回到try{}块中的return。简单地说，在try{}中使用return，会触发finally{}块中的代码，而反过来，finaly{}块中使用return却没有这种“触发”的效果。这是因为finally{}块是整个try..catch..finally语句中的结束处理，它的语义被设计为“整个结构化异常处理块”结束之前被触发一次。——“被触发”是它的语义决定的。\n\n接下来说说为什么“示例1的结果是1，而不是3”。在引擎中，return发生时，并不是“立即”清理栈并退出函数（这与我们大多数人想像的并不一样）。在引擎里，对于&#39;try .. finally ..&#39;这个结构来说，return实际是try {}这里的语句块的“语句执行结果”。——也就是说，把try块中的代码按行执行，到最后一行的结果B（Result，Completion Record，完成状态）。这个完成记录B的type是RETURN。然后，引擎回到try{}块并处理finally{}块。然后忽略掉finally块的完成记录F（如果这个记录F的类型是normal的话），用try{}中的返回。——但是，如果F的类型是RETURN、THROW、BREAK等，那么它就会使用F的结果值来返回了。\n\n这段逻辑在：\nhttps://tc39.es/ecma262/#sec-try-statement-runtime-semantics-evaluation\n```\nTryStatement : try Block Finally\n------\n1. Let B be the result of evaluating Block.\n2. Let F be the result of evaluating Finally.\n3. If F.[[Type]] is normal, set F to B.\n4. Return ? UpdateEmpty(F, undefined).\n```\n\n也就是说，“finally{}块正常执行完，就使用try{}的结果；如果finally{}非正常返回，那么就使用finally{}的结果”。所以你的问题中，示例1使用了try{}块的结果，而示例2使用了finally{}的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653641863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573794,"discussion_content":"\n执行流程理顺了，唯一的问题在于，为什么示例1是值1，而不是3。这是因为try{}块也好，finally{}块也好，它们的执行结果都是“语句执行结果，并返回一个完成记录”。完成记录是对引用取值的，不能返回引用本身。也就是说，在执行中拿到的B、F等记录，其中的.value字段的值就已经是提前执行过GetValue(r)，并取出Value值了。所以，示例1的try{}块中的return x，实际上只会得到1，而不会得到（后来才变更成的）3这个值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653641922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290724,"user_name":"undefined","can_delete":false,"product_type":"c1","uid":1100750,"ip_address":"","ucode":"768098DBDBE333","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/ce/d9e00eb5.jpg","comment_is_top":false,"comment_ctime":1619704936,"is_pvip":false,"replies":[{"id":"105348","content":"Oh ya.... :(~<br><br>这回是我的锅。呜呼。我请编辑们改过改过~","user_name":"作者回复","comment_id":290724,"uid":"1521669","ip_address":"","utype":1,"ctime":1619708693,"user_name_real":"Aiming"}],"discussion_count":1,"race_medal":0,"score":"5914672232","product_id":100039701,"comment_content":"我又来了…<br><br>原文 ↓<br><br>如果在 try 或 try..except 块中使用了 return<br><br>应该是<br><br>try...finally<br>","like_count":1,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519270,"discussion_content":"Oh ya.... :(~\n\n这回是我的锅。呜呼。我请编辑们改过改过~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619708693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281917,"user_name":"王美红","can_delete":false,"product_type":"c1","uid":2368780,"ip_address":"","ucode":"DFC11E3EB5CE74","user_header":"https://static001.geekbang.org/account/avatar/00/24/25/0c/d2ad7cb7.jpg","comment_is_top":false,"comment_ctime":1614946864,"is_pvip":false,"replies":[{"id":"102538","content":"在js中，语句执行跟表达式执行是分开的，是两种不同概念的东西。而函数执行其实是表达式执行的一种，其中函数名（亦即是函数）是运算数，而一对括号是运算符。——这是确实的，并且这个称为“函数调用运算符”的括号也是有优先级的，你可以直接在MDN里面查到。<br><br>表面来看，函数就是一堆语句，但其实“函数执行”时的返回值是由return来决定的，对吧。而语句执行却不是，语句执行的结果值是由“最后一个有效语句”来决定的。当你使用eval()来执行一批语句时，就可以看到这个结果值了。——并且，这也是语句执行要被拿出来讨论的原因，亦即是“动态执行”执行的是语句，而不是函数，也不是表达式。<br><br>一点细节，可以参见这篇文章：<br>https:&#47;&#47;blog.csdn.net&#47;aimingoo&#47;article&#47;details&#47;51136511","user_name":"作者回复","comment_id":281917,"uid":"1521669","ip_address":"","utype":1,"ctime":1615219845,"user_name_real":"Aiming"}],"discussion_count":1,"race_medal":0,"score":"5909914160","product_id":100039701,"comment_content":"老师，想问下，函数不就是语句构成的，为什么要说 函数执行和语句执行的结果不一样呢？不太懂为啥要这样分开讨论？","like_count":1,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516549,"discussion_content":"在js中，语句执行跟表达式执行是分开的，是两种不同概念的东西。而函数执行其实是表达式执行的一种，其中函数名（亦即是函数）是运算数，而一对括号是运算符。——这是确实的，并且这个称为“函数调用运算符”的括号也是有优先级的，你可以直接在MDN里面查到。\n\n表面来看，函数就是一堆语句，但其实“函数执行”时的返回值是由return来决定的，对吧。而语句执行却不是，语句执行的结果值是由“最后一个有效语句”来决定的。当你使用eval()来执行一批语句时，就可以看到这个结果值了。——并且，这也是语句执行要被拿出来讨论的原因，亦即是“动态执行”执行的是语句，而不是函数，也不是表达式。\n\n一点细节，可以参见这篇文章：\nhttps://blog.csdn.net/aimingoo/article/details/51136511","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615219845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226625,"user_name":"孜孜","can_delete":false,"product_type":"c1","uid":1018203,"ip_address":"","ucode":"7EF4FB644357CE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","comment_is_top":false,"comment_ctime":1592154664,"is_pvip":true,"replies":[{"id":"83665","content":"这个在11讲之后的加餐“让JavaScript运行起来”里面有讲（还有图）。在这里：<br><br>&gt; https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;175261","user_name":"作者回复","comment_id":226625,"uid":"1521669","ip_address":"","utype":1,"ctime":1592296956,"user_name_real":"Aiming"}],"discussion_count":1,"race_medal":0,"score":"5887121960","product_id":100039701,"comment_content":"表达式的result引用和语句的result有联系吗？","like_count":1,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498309,"discussion_content":"这个在11讲之后的加餐“让JavaScript运行起来”里面有讲（还有图）。在这里：\n\n&amp;gt; https://time.geekbang.org/column/article/175261","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592296956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155688,"user_name":"晓小东","can_delete":false,"product_type":"c1","uid":1194643,"ip_address":"","ucode":"93F9462EAAA63C","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/93/d7be8a1a.jpg","comment_is_top":false,"comment_ctime":1574736872,"is_pvip":true,"replies":[{"id":"59901","content":"这个是优先级的问题。你在c3里面去掉了一对括号，运算符的优先级变了。","user_name":"作者回复","comment_id":155688,"uid":"1521669","ip_address":"","utype":1,"ctime":1574776894,"user_name_real":"Aiming"}],"discussion_count":2,"race_medal":0,"score":"5869704168","product_id":100039701,"comment_content":"老师有一个表达式执行让我感到困惑， 我在做位运算符的时候碰到这么一个现象<br>let n = 2;<br>    let c1 = n != 0;<br>    let c2 = (n &amp; (n - 1)) === 0;<br>    let c3 = n &amp; (n - 1) === 0;<br>    console.log(c1, c2, c3);  <br><br>打印： true true 0   <br>c3 结果为什么变成了0  按照表达式 左右操作数的逻辑","like_count":1,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475835,"discussion_content":"这个是优先级的问题。你在c3里面去掉了一对括号，运算符的优先级变了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574776894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194643,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/93/d7be8a1a.jpg","nickname":"晓小东","note":"","ucode":"93F9462EAAA63C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66378,"discussion_content":"嗯，明白了，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575043175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154144,"user_name":"westfall","can_delete":false,"product_type":"c1","uid":1632773,"ip_address":"","ucode":"F3F5CB7DF695FC","user_header":"https://static001.geekbang.org/account/avatar/00/18/ea/05/b164dc15.jpg","comment_is_top":false,"comment_ctime":1574384716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869352012","product_id":100039701,"comment_content":"第一次看到标签化语句，请问老师，标签化语句除了用来 break，在实际的开发中还有哪些应用场景?","like_count":1},{"had_liked":false,"id":354722,"user_name":"明月","can_delete":false,"product_type":"c1","uid":1338736,"ip_address":"江苏","ucode":"D6586156BF09CF","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/70/25ba4287.jpg","comment_is_top":false,"comment_ctime":1660718198,"is_pvip":false,"replies":[{"id":"129076","content":"这个问题有两个回答的角度。<br><br>第一个角度是关于“标签化语句”的，ECMAScript有专门的标签化语句定义，并且所有的标签化语句都是使用LabelledEvaluation这个内部执行期语义（流程）来执行的。这意味着break x的返回，也就位于LabelledEvaluation()这个过程——以及它的执行帧的内部，而引擎只需要从栈上回收这个LabelledEvaluation()之后的所有东西即可。——有点类似从多层级的函数调用中throw异常时发生的回收。<br>参考：https:&#47;&#47;tc39.es&#47;ecma262&#47;#sec-runtime-semantics-labelledevaluation<br><br>第二个角度则是纯粹的设计角度，与ECMAScript如何实现无关。举例来说，`x: break x;`这行代码并没有一个块级作用域，因为`break x;`是单语句，而`x: ...`也不需要有作用域。所以当这行语句放在一个更外层的块中，并放到引擎中去执行的时候，如何能通过“出栈&#47;入栈”来实现执行效果呢？——这个问题与你的问题是同义的。<br><br>答案是，严格来说，有且只有“可执行结构”才具有执行上下文，并且只有“执行上下文”才需要通过“出入栈”来在引擎中调度。所谓“作用域”实际映射的是“环境”，环境可以通过outer域来指向外层环境，从而形成一个反向查找的链。每个执行上下文持有一个（实际是两个）这样的环境链，并且在执行过程中，随着作用域的展开而展开这个链，当离开某个作用域的时候就从链上反向顺着outer查找，直到找到这个作用域的外层。<br><br>所以，无论`break x`外面包含多少层级，只要它在一个上下文中（亦即是同一个可执行结构中），它都并不会导致出入栈，而是通过操作环境链来跳出作用域就可以了。<br><br>唯一的限制是：你不可以跨“可执行结构”来break。例如下面的代码：<br>&gt; aaa: function foo() { break aaa };<br>&gt; foo()<br>Uncaught SyntaxError: Undefined label &#39;aaa&#39;<br><br>这个课程的早期一直将作用域、环境和执行上下文混在一起讲的，因为大多数情况下它们的意思是重叠的。要到了第20讲的时候，在“eval 在哪儿执行”这个小节中才开始把它们分开，独立讲述每个组件。所以你才会有这样的疑问。 :)<br><br>你可以跳到20讲看看先。^^.","user_name":"作者回复","comment_id":354722,"uid":"1521669","ip_address":"江苏","utype":1,"ctime":1660801244,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1660718198","product_id":100039701,"comment_content":"基于对“语句”的不同理解，JavaScript 设计了一种全新方法，用来清除这个跳转所带来的影响（也就是回收跳转之前的资源分配）。而这多余出来的设计，其实也是上述收益所需要付出的代价。<br>有个地方有疑惑还希望获得老师的解答：块语句存在块级作用域的，当块语句中执行到break中断语句后，块级作用域会如何（没有break中断语句时块级作用域是出栈的）","like_count":1,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584389,"discussion_content":"这个问题有两个回答的角度。\n\n第一个角度是关于“标签化语句”的，ECMAScript有专门的标签化语句定义，并且所有的标签化语句都是使用LabelledEvaluation这个内部执行期语义（流程）来执行的。这意味着break x的返回，也就位于LabelledEvaluation()这个过程——以及它的执行帧的内部，而引擎只需要从栈上回收这个LabelledEvaluation()之后的所有东西即可。——有点类似从多层级的函数调用中throw异常时发生的回收。\n参考：https://tc39.es/ecma262/#sec-runtime-semantics-labelledevaluation\n\n第二个角度则是纯粹的设计角度，与ECMAScript如何实现无关。举例来说，`x: break x;`这行代码并没有一个块级作用域，因为`break x;`是单语句，而`x: ...`也不需要有作用域。所以当这行语句放在一个更外层的块中，并放到引擎中去执行的时候，如何能通过“出栈/入栈”来实现执行效果呢？——这个问题与你的问题是同义的。\n\n答案是，严格来说，有且只有“可执行结构”才具有执行上下文，并且只有“执行上下文”才需要通过“出入栈”来在引擎中调度。所谓“作用域”实际映射的是“环境”，环境可以通过outer域来指向外层环境，从而形成一个反向查找的链。每个执行上下文持有一个（实际是两个）这样的环境链，并且在执行过程中，随着作用域的展开而展开这个链，当离开某个作用域的时候就从链上反向顺着outer查找，直到找到这个作用域的外层。\n\n所以，无论`break x`外面包含多少层级，只要它在一个上下文中（亦即是同一个可执行结构中），它都并不会导致出入栈，而是通过操作环境链来跳出作用域就可以了。\n\n唯一的限制是：你不可以跨“可执行结构”来break。例如下面的代码：\n&gt; aaa: function foo() { break aaa };\n&gt; foo()\nUncaught SyntaxError: Undefined label &#39;aaa&#39;\n\n这个课程的早期一直将作用域、环境和执行上下文混在一起讲的，因为大多数情况下它们的意思是重叠的。要到了第20讲的时候，在“eval 在哪儿执行”这个小节中才开始把它们分开，独立讲述每个组件。所以你才会有这样的疑问。 :)\n\n你可以跳到20讲看看先。^^.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660801244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330297,"user_name":"ayu","can_delete":false,"product_type":"c1","uid":1640515,"ip_address":"","ucode":"8DB850105E4379","user_header":"https://static001.geekbang.org/account/avatar/00/19/08/43/d2a8d8c8.jpg","comment_is_top":false,"comment_ctime":1641896839,"is_pvip":false,"replies":[{"id":"120553","content":"在shell中执行Node：<br>&gt; node -p  -e &#39;eval( &quot;aaa: {     1+2;     bbb: {      void 7;      break aaa;     }   }&quot;)&#39;<br>undefined<br><br>结果是undefined呀？<br>","user_name":"作者回复","comment_id":330297,"uid":"1521669","ip_address":"","utype":1,"ctime":1642056398,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1641896839","product_id":100039701,"comment_content":"eval( &#39;aaa: {     1+2;     bbb: {      void 7;      break aaa;     }   }&#39;) &#47;&#47; NaN<br><br>老师能解释下返回 NaN 而不是 undefined 的原理吗","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545809,"discussion_content":"在shell中执行Node：\n&gt; node -p  -e &#39;eval( &#34;aaa: {     1+2;     bbb: {      void 7;      break aaa;     }   }&#34;)&#39;\nundefined\n\n结果是undefined呀？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642056399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304849,"user_name":"Sam","can_delete":false,"product_type":"c1","uid":1314195,"ip_address":"","ucode":"C6454F1D848055","user_header":"","comment_is_top":false,"comment_ctime":1627638454,"is_pvip":false,"replies":[{"id":"110306","content":"Q1<br>t作为单值表达式被先计算，然后进入finally块，然后再处理return 语义来返回。<br><br>Q2<br>在你的例子中是同一个。但try&#47;catch&#47;finally中如果声明了自己的let t，那么他们与外部的t，以及他们之间都不是同一个。","user_name":"作者回复","comment_id":304849,"uid":"1521669","ip_address":"","utype":1,"ctime":1627706744,"user_name_real":"Aiming"}],"discussion_count":1,"race_medal":0,"score":"1627638454","product_id":100039701,"comment_content":"function testBlock () {<br>    let t = 1;<br>    try {<br>        t = 2;<br>        return t;<br>    }<br>    finally {<br>        t = 3<br>    }<br>}<br>console.log(testBlock()) &#47;&#47;输出为2<br>想请教下老师：<br>1. 如果finally块，是在try的块中return语句执行前执行话，怎么返回的变量t是try块中赋的值<br>2. 在try和finally中的t变量与外部let定义的t是同一个吗？","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524186,"discussion_content":"Q1\nt作为单值表达式被先计算，然后进入finally块，然后再处理return 语义来返回。\n\nQ2\n在你的例子中是同一个。但try/catch/finally中如果声明了自己的let t，那么他们与外部的t，以及他们之间都不是同一个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627706744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234078,"user_name":"爱呀顶呀","can_delete":false,"product_type":"c1","uid":1153768,"ip_address":"","ucode":"52206B98CA6907","user_header":"https://static001.geekbang.org/account/avatar/00/11/9a/e8/37163caf.jpg","comment_is_top":false,"comment_ctime":1594571236,"is_pvip":false,"replies":[{"id":"86396","content":"我倒是没有明白你的问题是什么呢？<br><br>对于try的例子，课程的正语言紧接着就有一个。if语句也并没有什么特殊的，你试着写一个就明白了。<br><br>总之break就是提前中止语句执行，在break语句之后的都不会执行到了。","user_name":"作者回复","comment_id":234078,"uid":"1521669","ip_address":"","utype":1,"ctime":1594609737,"user_name_real":"Aiming"}],"discussion_count":1,"race_medal":0,"score":"1594571236","product_id":100039701,"comment_content":"<br>&#47;&#47; 在if语句的两个分支中都可以使用break；<br>&#47;&#47; （在分支中深层嵌套的语句中也是可以使用break的）<br>aaa: if (true) {<br>   ...<br>}<br>else {<br>  ...<br>  break aaa;<br>}<br> <br>&#47;&#47; 在try...catch...finally中也可以使用break;<br>bbb: try {<br>  ...<br>}<br>finally {<br>  break bbb;<br>}<br><br><br>能详细解释下吗？ 看不懂呀","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501270,"discussion_content":"我倒是没有明白你的问题是什么呢？\n\n对于try的例子，课程的正语言紧接着就有一个。if语句也并没有什么特殊的，你试着写一个就明白了。\n\n总之break就是提前中止语句执行，在break语句之后的都不会执行到了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594609737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226660,"user_name":"卡尔","can_delete":false,"product_type":"c1","uid":1445936,"ip_address":"","ucode":"BD6F76BC18FF8F","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/30/c07d419c.jpg","comment_is_top":false,"comment_ctime":1592181272,"is_pvip":false,"replies":[{"id":"83664","content":"这个在11讲之后的加餐“让JavaScript运行起来”里面有讲（还有图）。在这里：<br><br>&gt; https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;175261","user_name":"作者回复","user_name_real":"Aiming","uid":"1521669","ctime":1592296952,"ip_address":"","comment_id":226660,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1592181272","product_id":100039701,"comment_content":"函数执行，语句执行，表达式执行。后两者是什么关系？","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498322,"discussion_content":"这个在11讲之后的加餐“让JavaScript运行起来”里面有讲（还有图）。在这里：\n\n&amp;gt; https://time.geekbang.org/column/article/175261","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592296952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1445936,"avatar":"https://static001.geekbang.org/account/avatar/00/16/10/30/c07d419c.jpg","nickname":"卡尔","note":"","ucode":"BD6F76BC18FF8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283657,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592321394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216252,"user_name":"HoSalt","can_delete":false,"product_type":"c1","uid":1156074,"ip_address":"","ucode":"610B03E2A002D1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","comment_is_top":false,"comment_ctime":1589209822,"is_pvip":false,"replies":[{"id":"80068","content":"好的。多谢。已经申请在线fix了。","user_name":"作者回复","user_name_real":"Aiming","uid":"1521669","ctime":1589250026,"ip_address":"","comment_id":216252,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589209822","product_id":100039701,"comment_content":"aaa: if (true) {<br>  ...<br>} else {  <br>  ...  <br>  break bbb;<br>}<br>这惹人应该是break aaa 吧","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494734,"discussion_content":"好的。多谢。已经申请在线fix了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589250026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178028,"user_name":"antimony","can_delete":false,"product_type":"c1","uid":1394138,"ip_address":"","ucode":"7DFA3DCFD5138C","user_header":"https://static001.geekbang.org/account/avatar/00/15/45/da/71b7599d.jpg","comment_is_top":false,"comment_ctime":1581573960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581573960","product_id":100039701,"comment_content":"因为从没用过标签语句所以一开始看这篇文章时有些难以理解，有相同问题的同学可以先在mdn上了解一下标签的使用https:&#47;&#47;developer.mozilla.org&#47;en-US&#47;docs&#47;Web&#47;JavaScript&#47;Reference&#47;Statements&#47;label。","like_count":0},{"had_liked":false,"id":157749,"user_name":"阿鑫","can_delete":false,"product_type":"c1","uid":1230313,"ip_address":"","ucode":"97A0BE95FB7383","user_header":"https://static001.geekbang.org/account/avatar/00/12/c5/e9/4013a191.jpg","comment_is_top":false,"comment_ctime":1575255230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575255230","product_id":100039701,"comment_content":"居然还有标签语句，涨见识了","like_count":0},{"had_liked":false,"id":155128,"user_name":"Wiggle Wiggle","can_delete":false,"product_type":"c1","uid":1036052,"ip_address":"","ucode":"EFE746551BA998","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/14/384258ba.jpg","comment_is_top":false,"comment_ctime":1574649631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574649631","product_id":100039701,"comment_content":"我觉得函数执行与语句执行的区别就是：函数调用涉及到入栈出栈，语句执行不涉及。","like_count":0},{"had_liked":false,"id":154471,"user_name":"leslee","can_delete":false,"product_type":"c1","uid":1384326,"ip_address":"","ucode":"DB1CBF9F8D16BF","user_header":"https://static001.geekbang.org/account/avatar/00/15/1f/86/3a7eeac4.jpg","comment_is_top":false,"comment_ctime":1574436977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574436977","product_id":100039701,"comment_content":"这篇看来要看很多次了……","like_count":0},{"had_liked":false,"id":154363,"user_name":"shengsheng","can_delete":false,"product_type":"c1","uid":1198582,"ip_address":"","ucode":"D15DF751F7C0E6","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/f6/ef3e5c81.jpg","comment_is_top":false,"comment_ctime":1574415377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574415377","product_id":100039701,"comment_content":"03年我在学vb的时候，并没有提到goto有学，不过后面越来越多资料指出goto问题。","like_count":0}]}