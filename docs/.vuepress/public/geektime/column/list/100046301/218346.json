{"id":218346,"title":"17 | 高性能架构案例：如何设计一个秒杀系统？","content":"<p>你好，我是王庆友。</p><p>在上一讲中，我和你详细介绍了打造一个高性能系统的应对策略和架构手段。那么今天，我就以1号店的秒杀系统为例，来具体说明如何实现一个高性能的系统。</p><h2>背景和问题</h2><p>先说下背景。在2014年的时候，1号店作为网上超市类电商，经常在线上举行各种大促活动。比如进口牛奶促销活动，每次促销的牛奶有几十万盒，促销价格非常优惠，一般这样的促销活动会在某个整点的时间进行开卖（如上午10点）。对于这种质高价优并且是刚需的商品，会有大量的用户来抢购，俗话说“手快有，手慢无”，往往短短几分钟内，所有牛奶就能售卖完毕。</p><p>这本质上是一种秒杀活动，但商品数量非常大，一瞬间会有大量的用户流量涌入，流量可以高达平时的几十倍。而且和少量商品的秒杀不同，这些都是有效流量，最终会生成订单。</p><p>而在正常情况下，系统因为资源有限，只能处理10%的流量，无法处理剩下的90%流量，瞬间高并发的流量涌入，很大程度上会引起后台系统超时报错，导致用户下单不成功。这样一来，用户就会反复刷新页面，多次尝试下单，不但用户的体验不好，而且系统的压力会更大。</p><p><strong>最终的结果就是，系统往往由于过载，整体处理能力下降，甚至瘫痪，导致所有用户都无法购买。</strong>就像下图表示的一样，在秒杀场景下，系统会面临这样的困境：</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/e9/31/e933d73f5e41c6ef89080cf56be90031.jpg?wh=2284*1080\" alt=\"\"></p><p>在这种情况下，对于用户来说，能不能买到商品，拼的是体力和人品，由于体验不好，用户会逐渐对活动失去兴趣；而对于系统来说，我们需要拼命地加机器来满足峰值流量。</p><p>每次1号店要进行大促的时候，在活动开始前，运营和技术人员会坐在一起，大家一起来预估活动的峰值流量，然后技术人员做评估，系统的哪些节点需要加机器，以及要加多少机器。但这样的做法其实存在几个问题：</p><ul>\n<li>首先，我们对峰值流量的预估以及要加多少机器都是拍脑袋的，和实际出入往往很大，一旦估计少了，系统同样会面临过载的风险；</li>\n<li>其次，为了短暂的几分钟促销，我们需要增加大量的机器，事先要做很多的运维准备工作，不但浪费资源，而且效率很低；</li>\n<li>最为关键的是，有些处理节点，系统不是通过加机器就能扩展处理能力的，比如商品库存数据库，下单时，我们需要扣库存，而为了防止库存更新冲突，我们需要锁定库存记录，导致系统的并发处理能力有限，这个问题单靠加机器是解决不了的。</li>\n</ul><h2>总体方案</h2><p>对于这种高并发情况，看来让系统单纯地通过加机器去硬扛，是不可行的。<strong>那么，我们有没有更好的办法，既保证用户体验，又保证系统能够轻松地应对流量挑战呢？</strong></p><p>我们先来深入分析下业务场景。这个秒杀活动的特点是，在短期的1~2分钟内，用户流量很大，但只要促销的商品卖完，流量马上恢复常态。所以，对于前端短期内这么大的下单请求，后端如果实时处理，压力会非常大，但如果把这个处理时间延长到10分钟，后端是可以完成下单的。那对用户来说，商品优惠的力度这么大，他们关心的是能否买到，所以会愿意多等一段时间，而不是在页面上一次次点击下单，每次系统都提示下单失败。</p><p>当然，如果我们把订单处理的时间延长了，只要我们在前台告诉用户，系统已经接受了他们的订单，并且不断同步用户订单处理的进度，用户体验的问题其实也不大。</p><p>基于这个分析，我们就可以利用<strong><span class=\"orange\">异步处理</span></strong>的思路来应对秒杀活动。</p><p>我们先在前端接收用户所有的下单请求，但不在后端实时生成订单，而是放在队列里；然后系统根据后端订单中心的实际处理能力，从队列里获取订单请求，再交给订单中心生成实际的订单。同时，系统告诉用户当前的处理进度，有多少订单排在TA的前面，TA还要等多久。</p><p>这样对于用户来说，在前台下单一次就可以了，然后等系统慢慢处理，这也符合先到先得的原则，非常公平合理。对系统来说，只要根据大促的商品总量，一定程度上增强系统处理能力，保证下单请求从进来到最后处理完成，这个时间相对合理就可以了。</p><p>比如说，有20万件的商品，每人限购一件，预计用户会在2分钟内完成下单，但用户能够接受系统在20分钟内完成订单处理。这样，系统只要保证每分钟能处理1万订单就行；而如果不采取排队的方式，系统就需要每分钟处理10万订单，它的压力就会提升一个数量级。</p><p>基于排队的思路，系统总体架构设计如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/7f/6a809c9da997868271c2b493cb4f397f.jpg?wh=2284*1540\" alt=\"\"></p><p>在这个架构中，我们<strong>在前台和后台下单系统之间，新增了<span class=\"orange\">排队系统</span>，它包括排队区和处理区两个部分。</strong>系统整体的处理过程是这样的：</p><ol>\n<li>用户在商品详情页提交订单后，这个订单会作为预订单进入排队区，同时排队系统会返回用户一个排队编号，这个编号用于跟踪后续的订单处理进度；</li>\n<li>用户被引导到一个等待页，这个页面会根据排队号，定时地查询排队系统，排队系统会返回预订单在队列中的位置信息，包括它前面还有多少未处理的预订单，以及后台系统大概还要多久会处理这个预订单，这样用户就不会焦虑；</li>\n<li>在排队系统的处理区，有很多消费者，它们依次从排队区的队列里获取预订单，然后调用后台下单系统生成实际的订单；</li>\n<li>随着预订单变成正式的订单，队列里的预订单会逐渐变少，如果当前的预订单已经从队列里被移除了，用户的等待页就会检测到这个情况，页面自动跳转到订单完成页，这就和常规的购物流程一样了，用户进行最后的支付，最终完成整个前台下单过程。</li>\n</ol><p>这里，你可以看到，<strong>前台</strong>的预订单有瞬时的大流量，但我们只是把它们放到队列里，这个处理起来很快，排队系统可以轻松应对；而<strong>后台</strong>生成实际的订单是匀速的，并且最大化地发挥了下单系统的处理能力。另一方面，对于用户体验来说，用户可以选择在等待页等候，实时获取订单处理进度的反馈，也可以选择离开，然后在用户中心的“待支付订单”里完成支付。通过这样的设计，排队系统既保证了系统处理订单的能力，也保证了用户良好的体验。</p><p>下面是一张用户等待页的效果图，你可以直观地了解秒杀系统的用户体验。</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/30/c8e4840b1e3064ecf84b6c77d38b9630.jpg?wh=2284*1080\" alt=\"\"></p><p>现在，你已经了解了秒杀系统的总体设计。接下来，我深入介绍下这个排队系统的内部设计细节，帮助你更好地理解它。</p><h2>内部设计</h2><p>首先，<strong>针对队列的技术选型</strong>，排队系统使用的是<strong>Redis</strong>，而不是MQ。因为相对于MQ来说，Redis更轻量级，性能更好，它内置了队列数据结构，除了和MQ一样支持消息的先进先出以外，我们还可以获取队列的长度，以及通过排队号获取消息在队列中的位置，这样我们就可以给前端反馈预订单的处理进度。</p><p>对于秒杀场景来说，一个订单只能包含一个商品，这里我们<strong>为每个秒杀商品提供一个单独的队列</strong>，这样就可以分散数据在Redis中的存取，多个队列可以提供更好的性能。</p><p><strong>关于队列的调度问题</strong>，也就是消费者优先从哪个队列里拿预订单，排队系统会结合下单时间和队列的长度来确定，以保证用户合理的时间体验。比如说，某个秒杀商品的队列很长，消费者会优先从这个队列拿预订单，从而避免用户等待太长的时间。</p><p><strong>关于队列长度</strong>，为了保证用户能够买到商品，我们并不是把所有前台的下单请求都会放到队列里，而是根据参与活动的秒杀商品数量，按照1:1的比例，设置队列初始长度，这样就保证了进入队列的请求最终都能生成订单。</p><p>这个可用队列长度会随着预订单进入队列，不断地减少，当数值变为0时，下单前台会拒绝接受新请求进入队列，直接反馈用户下单失败。当然，如果后台订单生成异常或用户取消订单后，可用队列长度会增加，前台会重新开放预订单进入队列。</p><h2>更多优化：建立活动库存</h2><p>除了秒杀流程，系统还有<strong>常规的购物流程</strong>，这两个购物方式都是从详情页开始，到订单完成页结束。不同的地方是，常规购物流程走的是购物车和结算页，系统是同步处理的，这样可以有更好的用户体验。</p><p>在这里，我们在系统设计上，可以很好地同时支持秒杀流程和常规购物流程。</p><p>如果运营人员在后台上架商品的时候，设置这是一个秒杀商品，那么从详情页开始，系统就会引导用户走秒杀流程，否则就走常规购物流程。特别是在早期秒杀系统刚落地的时候，如果发现秒杀流程有问题，我们还可以快速切回到常规的购物流程，实现了一定程度上的系统互备。</p><p><img src=\"https://static001.geekbang.org/resource/image/74/75/74d1a5c896d5f21f42c202f4f3d3bc75.jpg?wh=2284*640\" alt=\"\"></p><p>此外，对于秒杀活动来说，参与活动的商品种类是有限的，但这些商品库存的扣减非常频繁，因此我们建立了<strong><span class=\"orange\">活动库存</span></strong>的概念，把少量参与促销的商品种类单独放在一个库里，避免和大量常规的商品放在一起，这样也大幅度地提高了库存数据库的读写性能。</p><p>好了，通过这个秒杀系统的架构设计，你可以看到，我们巧妙地通过请求的异步化处理，对流量进行削峰，从而保证了系统的高性能。这里我们不需要增加太多的机器，在系统落地时，我们通过排队系统对前后台解耦，后台下单系统基本上也不需要修改，系统整体改造的工作量不大，整个落地过程也非常顺利。</p><p>不过值得注意的是，<strong>这种方式比较适合瞬时有高并发流量的场景</strong>，比如这里说的秒杀场景。如果订单高峰会持续一段较长的时间，而用户对订单处理又有比较高的时间要求，那就不适合采用这种异步削峰的方式。</p><p>举个例子，外卖订单的午高峰通常会持续两个小时，而用户普遍期待订单半小时能够送达。对于这种情况，我们就需要正面应对高峰流量，比如通过水平扩展各个节点，提升系统的处理能力。这也要求系统能够做到弹性伸缩，高效地支持资源的缩容或扩容，节省成本。</p><h2>总结</h2><p>今天，我针对1号店的大促业务挑战，与你分享了一个秒杀系统的具体设计，对照我在上一讲中介绍的高性能应对策略，秒杀系统主要使用了<strong>异步化处理</strong>的方式，这也符合实际的业务场景。</p><p>通过今天的分享，相信你对如何保障系统的高性能有了更深入的体会，如果你也有类似的瞬时高并发的场景，你也可以在实践中参考这里的做法。</p><p><strong>最后，给你留一道思考题：</strong> 你的公司业务上有高并发的场景吗，系统是如何应对的呢？</p><p>欢迎给我留言，我会及时给你反馈。如果这节课对你有帮助，也欢迎你把它分享给你的朋友。感谢你的阅读，我们下期再见。</p>","neighbors":{"left":{"article_title":"16 | 高性能和可伸缩架构：业务增长，能不能加台机器就搞定？","id":217152},"right":{"article_title":"18 | 可伸缩架构案例：数据太多，如何无限扩展你的数据库？","id":218385}},"comments":[{"had_liked":false,"id":200579,"user_name":"小祺","can_delete":false,"product_type":"c1","uid":1193548,"ip_address":"","ucode":"2819BCA9E71C9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/36/4c/46c43cce.jpg","comment_is_top":false,"comment_ctime":1585620168,"is_pvip":false,"replies":[{"id":"75032","content":"后台下单时，会有异常订单自动审核，比如黄牛下的单，恶意订单等，这部分库存会回到前台可用队列中，只要是正常订单，不会出现大面积不支付的情况","user_name":"作者回复","comment_id":200579,"uid":"1268522","ip_address":"","utype":1,"ctime":1585626372,"user_name_real":"王庆友"}],"discussion_count":2,"race_medal":0,"score":"61715162312","product_id":100046301,"comment_content":"20W用户下单成功，后面的用户提示下单失败，预下单成功的用户全部放弃支付，导致活动结束了但是商品没卖出去，怎么解决？","like_count":14,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490075,"discussion_content":"后台下单时，会有异常订单自动审核，比如黄牛下的单，恶意订单等，这部分库存会回到前台可用队列中，只要是正常订单，不会出现大面积不支付的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585626372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1051631,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0b/ef/de0374ac.jpg","nickname":"祝洪娇","note":"","ucode":"59AC347FFABAE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577393,"discussion_content":"有些系统还会提示用户  前方客户还未支付完成，您还有机会购买等，会限制时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656065093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200165,"user_name":"zeor","can_delete":false,"product_type":"c1","uid":1888276,"ip_address":"","ucode":"20DA6DB3527D21","user_header":"https://static001.geekbang.org/account/avatar/00/1c/d0/14/50782491.jpg","comment_is_top":false,"comment_ctime":1585552239,"is_pvip":false,"replies":[{"id":"74939","content":"可以用redis放库存数据，利用redis的锁保证互斥访问。这样相当于把redis作为前置数据库。<br>应用直接改redis数据，通过发消息，再异步改db的数据。","user_name":"作者回复","comment_id":200165,"uid":"1268522","ip_address":"","utype":1,"ctime":1585568797,"user_name_real":"王庆友"}],"discussion_count":3,"race_medal":0,"score":"35945290607","product_id":100046301,"comment_content":"老师您好，当正常下单时采用同步方式，但流量也很大，如果按您说的，库存只有一个库，但库已经达到了瓶颈，有什么方式在同步情况下解决这个瓶颈？","like_count":9,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489952,"discussion_content":"可以用redis放库存数据，利用redis的锁保证互斥访问。这样相当于把redis作为前置数据库。\n应用直接改redis数据，通过发消息，再异步改db的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585568797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2037841,"avatar":"","nickname":"huan","note":"","ucode":"C98A40D3667336","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318679,"discussion_content":"可以使用lua脚本扣减库存，再通过发消息异步改db的数据。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603805580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048888,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/38/554ece99.jpg","nickname":"厕所看C","note":"","ucode":"344DC9E80F0F9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219106,"discussion_content":"redis热点数据前置，异步改db数据。这个模式很通用哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585735559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292980,"user_name":"独孤九剑","can_delete":false,"product_type":"c1","uid":2230909,"ip_address":"","ucode":"6C1253E2B8C1D4","user_header":"https://static001.geekbang.org/account/avatar/00/22/0a/7d/ac715471.jpg","comment_is_top":false,"comment_ctime":1621137957,"is_pvip":false,"replies":[{"id":"106109","content":"一般来说，减轻后端处理有两种方式，可以在服务端做页面级缓存，比如squid缓存，在访问tomcat前即返回详情页内容。也可以在前端通过ajax获取必须的信息，比如库存&#47;价格。<br>在秒杀场景下，具体看业务上要求是什么。","user_name":"作者回复","comment_id":292980,"uid":"1268522","ip_address":"","utype":1,"ctime":1621238749,"user_name_real":"王庆友"}],"discussion_count":3,"race_medal":0,"score":"14506039845","product_id":100046301,"comment_content":"请问老师，如何处理“商品详情页”在秒杀时间段的过载问题呢？","like_count":3,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520033,"discussion_content":"一般来说，减轻后端处理有两种方式，可以在服务端做页面级缓存，比如squid缓存，在访问tomcat前即返回详情页内容。也可以在前端通过ajax获取必须的信息，比如库存/价格。\n在秒杀场景下，具体看业务上要求是什么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621238749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2019534,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/d0/ce/a81126ea.jpg","nickname":"代先生。","note":"","ucode":"1CBFB13D7FD3B1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584763,"discussion_content":"一般不就是个静态页面，cdn处理的吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661095747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2152273,"avatar":"https://static001.geekbang.org/account/avatar/00/20/d7/51/62bc3521.jpg","nickname":"风中","note":"","ucode":"E09DA170BE13F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541464,"discussion_content":"请问老师，使用缓存时，秒杀商品是一个商品一个缓存，还是不同用户各有一个缓存？使用缓存后秒杀商品列表的销量，预约状态以及是否售罄这种动态的数据，有必要提供一个接口让前端调用，来获取实时的动态数据吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640392741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200327,"user_name":"孙同学","can_delete":false,"product_type":"c1","uid":1676238,"ip_address":"","ucode":"C6C82400D15336","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/ce/092acd6a.jpg","comment_is_top":false,"comment_ctime":1585572921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14470474809","product_id":100046301,"comment_content":"https:&#47;&#47;www.processon.com&#47;view&#47;link&#47;5e51378ce4b0c037b5f9d1e3 整理学习更新 又学到一些 自己之前做过一个思想类似的 利用redis做缓存 异步慢慢消费数据","like_count":3},{"had_liked":false,"id":200241,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1585561917,"is_pvip":false,"replies":[{"id":"74936","content":"对于接入系统来说，这点流量照常接，没有变化，所以文章里就没提","user_name":"作者回复","comment_id":200241,"uid":"1268522","ip_address":"","utype":1,"ctime":1585566847,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"10175496509","product_id":100046301,"comment_content":"如果有些前置知识会比较好，比如流量洪峰到来的时候对于秒杀这种类型的活动，首先要把流量接下来，起码不能在网关入口处就被拒绝了，这个时候能用到的技术有哪些，比如nginx或者其他的方式。接下来，流量怎么分发到后端的应用服务器，负载均衡或者是直接操作redis，这里也有一些技术点。<br>老师整体上讲的比较言简意赅，不过我还是想关注下一些技术点，哪怕一笔带过略微提一下，也可以受益匪浅哈！感谢！","like_count":2,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489969,"discussion_content":"对于接入系统来说，这点流量照常接，没有变化，所以文章里就没提","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585566847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200113,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1585545556,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"10175480148","product_id":100046301,"comment_content":"1.秒杀案例讲得很棒。<br>2.外卖那个场景，其实单纯讲加机器，易伸缩。感觉没说到点子上。这个场景其实是做性能优化，价值会很高的场景。如何通过技术手段和各种权衡，在有限的资源下满足更多的并发。这个话题会比较在点子上。<br>3.限于篇幅，已经很棒，感谢栏主分享。","like_count":2,"discussions":[{"author":{"id":1701867,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","nickname":"，","note":"","ucode":"A5543C8DFEB198","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292387,"discussion_content":"       我的理解是这样的:\n      1.正确的代码本身就是高性能的,再做优化其实成效不大,如果去做数据库索引优化,JVM优化,中间件性能优化等等,那就是另一个话题了,基本上各成一个话题,跟现在这门课联系不大,而且太细节了,未必见得对我们有用\n     2.关键的业务场景,应该不会把资源限制的很死,通常是有商量的余地的\n      我在很多专栏下面都看到过你的回复,感觉你的回复都挺有价值的,希望能跟你多交流交流~","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1595212685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1701867,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","nickname":"，","note":"","ucode":"A5543C8DFEB198","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":292398,"discussion_content":"1.从代码质量的角度看，临时变量要跟着方法走。这是一个整体，易于隔离复杂性。但从性能角度看，这不利于调优。因为大部分变量获取其实都是io等待的（rpc）。如果重新编排顺序，将所有io等待的变量获取提取到头部，并行执行。那么响应就能下来，并发就能上去，只是动态上内存占用相对会升高。调优找到一个合适的拐点值。\n\n2.我也说不好这样做好不好，毕竟它破坏了复杂性隔离，对代码质量是一种伤害。但是编译器的指令重排比较难优化到这种程度，所以如果对外影响能收敛，响应要求高的接口采用这种业务侵入的调优，应该还是能接受的。\n\n3.所以，正确的代码本身不见得能高性能。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595215155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":292387,"ip_address":""},"score":292398,"extra":""},{"author":{"id":1701867,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","nickname":"，","note":"","ucode":"A5543C8DFEB198","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292414,"discussion_content":"       你是说把局部变量提升成成员变量可以减少对象的创建和销毁，减少io进而提高性能是吧，emmm......对象的创建，销毁本来就是很快的事情，而且只是在cpu和内存之间操作，根据老师那张表来讲的话，除非是很大的对象，否则这种程度带来的改变我觉得微乎其微，而且我感觉这个说法有点过于抠底层了，我不是很能接受，有可供参考的案例吗？或者你有做过这种实验吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595219256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":292398,"ip_address":""},"score":292414,"extra":""},{"author":{"id":1701867,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","nickname":"，","note":"","ucode":"A5543C8DFEB198","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292416,"discussion_content":"      而且这个问题的最终落脚点应该是具体的编程语言的内存管理机制吧,如果是java的话就得抠jvm里的实现了,如果是别的语言,我也不太懂了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595219794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":292398,"ip_address":""},"score":292416,"extra":""}]}]},{"had_liked":false,"id":295320,"user_name":"大龄程序员在线治掉发","can_delete":false,"product_type":"c1","uid":1763091,"ip_address":"","ucode":"A246D4E4683589","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e7/13/6f76ada6.jpg","comment_is_top":false,"comment_ctime":1622364627,"is_pvip":false,"replies":[{"id":"107444","content":"websocket也可以，不过实现比较复杂一点。直接定时轮询就可以，前提是服务端处理很快，本案例查缓存，几个ms就能返回。","user_name":"作者回复","comment_id":295320,"uid":"1268522","ip_address":"","utype":1,"ctime":1622714746,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"5917331923","product_id":100046301,"comment_content":"用户在排队中,如果要通知用户秒杀成功或失败,这个时候是不是应该使用websocket的方式推送?","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521033,"discussion_content":"websocket也可以，不过实现比较复杂一点。直接定时轮询就可以，前提是服务端处理很快，本案例查缓存，几个ms就能返回。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622714746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272544,"user_name":"寒光","can_delete":false,"product_type":"c1","uid":1206187,"ip_address":"","ucode":"061BE413595F21","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/ab/fcf0cec4.jpg","comment_is_top":false,"comment_ctime":1610120329,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905087625","product_id":100046301,"comment_content":"库存扣减部分，有一个思路是先把要扣的写一条记录到一个流水表，后面检查库存够不够是就拿库存表中的库存减去流水表中的汇总库存，够就继续写入流水表，不够就返回库存不够。<br><br>这样减少了真实库存表因为更新操作带来的并发效率下降问题。<br><br>当然，流水表里的记录不能太多，达到一定数量后就要及时转移并更新真实库存表。","like_count":1},{"had_liked":false,"id":226793,"user_name":"乖，摸摸头","can_delete":false,"product_type":"c1","uid":1611745,"ip_address":"","ucode":"BD92741A11D3CD","user_header":"https://static001.geekbang.org/account/avatar/00/18/97/e1/0f4d90ff.jpg","comment_is_top":false,"comment_ctime":1592205466,"is_pvip":true,"replies":[{"id":"84629","content":"应该是LINDEX接口，用起来性能还可以。<br><br>请求队列包含下单所有信息，商品，用户，收货地址等，是一个预定单的概念，不知你说的商品秒杀队列具体是什么概念。","user_name":"作者回复","comment_id":226793,"uid":"1268522","ip_address":"","utype":1,"ctime":1592967454,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"5887172762","product_id":100046301,"comment_content":"根据排队号获取消息在队列中的位置，是怎么实现的？redis list 并没找到这样的接口。如果是通过 LINDEX 来获取，感觉比 遍历还慢。<br><br>为啥还要弄个请求队列，不直接去读商品秒杀队列，商品队列读取不到了就返回失败","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498365,"discussion_content":"应该是LINDEX接口，用起来性能还可以。\n\n请求队列包含下单所有信息，商品，用户，收货地址等，是一个预定单的概念，不知你说的商品秒杀队列具体是什么概念。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592967454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221933,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1590635744,"is_pvip":false,"replies":[{"id":"81863","content":"这个主要是评估后面下单服务的处理能力，把下单能力充分发挥就可以。每个消费者是一个线程","user_name":"作者回复","comment_id":221933,"uid":"1268522","ip_address":"","utype":1,"ctime":1590677088,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"5885603040","product_id":100046301,"comment_content":"老师,后台服务消费队列的线程数这个是压测得来的吗,这个是使用的程序内部的线程是吧","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496615,"discussion_content":"这个主要是评估后面下单服务的处理能力，把下单能力充分发挥就可以。每个消费者是一个线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590677088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202773,"user_name":"小洛","can_delete":false,"product_type":"c1","uid":1005062,"ip_address":"","ucode":"227EC21891012B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/06/ea49b29d.jpg","comment_is_top":false,"comment_ctime":1586066330,"is_pvip":false,"replies":[{"id":"76095","content":"10万请求入队，是分1-2分钟，处理得过来，要限流的话，直接在接入层就限流。","user_name":"作者回复","comment_id":202773,"uid":"1268522","ip_address":"","utype":1,"ctime":1586244094,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"5881033626","product_id":100046301,"comment_content":"首先感谢老师您的分享 有两个问题请教下老师：<br>1、一个秒杀商品一个单独redis队列，如果秒杀商品几十万，就算按照1:1的比例  那么理论上瞬间也有10万的请求打到redis上，单个redis 支撑10W， 这里是不是还有一些限流的策略？<br>2、老师能加餐分享下库存的方案吗<br>","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490681,"discussion_content":"10万请求入队，是分1-2分钟，处理得过来，要限流的话，直接在接入层就限流。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586244094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200662,"user_name":"蓝天","can_delete":false,"product_type":"c1","uid":1023233,"ip_address":"","ucode":"3846830C97D97A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/01/23306c79.jpg","comment_is_top":false,"comment_ctime":1585631938,"is_pvip":false,"replies":[{"id":"75098","content":"很好的思考，要持久化的，这是关键的业务数据。","user_name":"作者回复","comment_id":200662,"uid":"1268522","ip_address":"","utype":1,"ctime":1585641471,"user_name_real":"王庆友"}],"discussion_count":2,"race_medal":0,"score":"5880599234","product_id":100046301,"comment_content":"排队数据存在redis中是不也需要开启持久化呢","like_count":2,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490091,"discussion_content":"很好的思考，要持久化的，这是关键的业务数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585641471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048888,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/38/554ece99.jpg","nickname":"厕所看C","note":"","ucode":"344DC9E80F0F9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219103,"discussion_content":"如果在活动期间Redis发生了down机然后恢复，对业务上有什么影响呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585735480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354285,"user_name":"😶😶😶😶","can_delete":false,"product_type":"c1","uid":1209557,"ip_address":"上海","ucode":"3DC0660A024B5F","user_header":"https://static001.geekbang.org/account/avatar/00/12/74/d5/bd75fe69.jpg","comment_is_top":false,"comment_ctime":1660262957,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660262957","product_id":100046301,"comment_content":"改变业务流程  ","like_count":0},{"had_liked":false,"id":353485,"user_name":"Geek__b3bddc1474fa","can_delete":false,"product_type":"c1","uid":1465820,"ip_address":"浙江","ucode":"5EDBC40BF3EA94","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er0h19PTdaZDp4oHBHocYp5uYZicCPMibIPQ9c8TP29hRObZl8kJgaSQHdHGdXGCRiaLibJN3I1IxnWKg/132","comment_is_top":false,"comment_ctime":1659496287,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1659496287","product_id":100046301,"comment_content":"我之前做过电商中央库存系统的建设，活动库存的难点不在于文章中的内容。一个品今天可以作为活动库存，明天可以作为非活动库存，甚至一天内50%作为活动品去卖，50%作为非活动品去卖。如果产品提出这种需求，文章的方案就行不通哦","like_count":1},{"had_liked":false,"id":312961,"user_name":"兔子先生","can_delete":false,"product_type":"c1","uid":2652181,"ip_address":"","ucode":"9303B568DFAF34","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/laZ13g1QHoYX3Q72a8t86zIaOAY1eAkicRu9wNcTO14Bc2ocnaMxJGzsuSN4tRbrbuAXKVfYB6w72XvXl8KhvAw/132","comment_is_top":false,"comment_ctime":1632149378,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1632149378","product_id":100046301,"comment_content":"老师，期待外卖订单的午高峰来一讲","like_count":0},{"had_liked":false,"id":311849,"user_name":"被雪吹过的夏天","can_delete":false,"product_type":"c1","uid":2235293,"ip_address":"","ucode":"18ECB7DEB982C6","user_header":"https://static001.geekbang.org/account/avatar/00/22/1b/9d/78cd27a9.jpg","comment_is_top":false,"comment_ctime":1631505618,"is_pvip":false,"replies":[{"id":"120393","content":"常规流程扣减常规库的商品库存就可以，秒杀流程切换常规流程时，提前在运营后台设置常规库的正确库存就可以。","user_name":"作者回复","comment_id":311849,"uid":"1268522","ip_address":"","utype":1,"ctime":1641977555,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1631505618","product_id":100046301,"comment_content":"&quot;如果发现秒杀流程有问题，我们还可以快速切回到常规的购物流程&quot; ，和下文  &quot;因此我们建立了活动库存的概念，把少量参与促销的商品种类单独放在一个库里&quot;。  换言之，常规和秒杀两个流程，都会指向一个单独的活动库。  这样可能引发几个问题:  1. 势必要修改常规流程的业务代码，2. 常规流程扣减库存会操作两个数据库","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545502,"discussion_content":"常规流程扣减常规库的商品库存就可以，秒杀流程切换常规流程时，提前在运营后台设置常规库的正确库存就可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641977555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249817,"user_name":"sgl","can_delete":false,"product_type":"c1","uid":1252243,"ip_address":"","ucode":"D73875BA22954F","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/93/e3b44969.jpg","comment_is_top":false,"comment_ctime":1600822398,"is_pvip":false,"replies":[{"id":"92440","content":"key是排队号，value是订单内容，后端处理不快的话，队列里可能有上10万个单。","user_name":"作者回复","comment_id":249817,"uid":"1268522","ip_address":"","utype":1,"ctime":1602577931,"user_name_real":"王庆友"}],"discussion_count":3,"race_medal":0,"score":"1600822398","product_id":100046301,"comment_content":"用redis做队列，如果一个商品有40万库存，这个队列就是大key，会有这个问题吗","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506025,"discussion_content":"key是排队号，value是订单内容，后端处理不快的话，队列里可能有上10万个单。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602577931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2417306,"avatar":"https://static001.geekbang.org/account/avatar/00/24/e2/9a/9ff4869c.jpg","nickname":"阔别","note":"","ucode":"E37411D178B604","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380208,"discussion_content":"同一个商品也可以多个队列啊，比如用户id做hash决定落哪个队列","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624372983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2037841,"avatar":"","nickname":"huan","note":"","ucode":"C98A40D3667336","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318677,"discussion_content":"没太明白答案，key是排队号，那用的不是list结构?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603805325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239661,"user_name":"图灵机","can_delete":false,"product_type":"c1","uid":2034632,"ip_address":"","ucode":"EB02DB653AD591","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0b/c8/15f055d3.jpg","comment_is_top":false,"comment_ctime":1596609257,"is_pvip":true,"replies":[{"id":"90021","content":"理解本质就好，不用纠结细节哈。","user_name":"作者回复","comment_id":239661,"uid":"1268522","ip_address":"","utype":1,"ctime":1598604022,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"1596609257","product_id":100046301,"comment_content":"redis list 没有设置初始长度的操作吧，那么这个初始长度值是另存到一个key中吗，这样的话每次新增订单需要先查一次初始长度和list llen吧?还有lindex是时间复杂度O(n)的操作吧,假如都是十万量级的list长度，redis是用链表去存，这样的话遍历也用不到局部性原理，实际应用中需要考虑这种问题吗？还有一个问题就是处理完成的订单订单号会从队列里弹出吗，这样的话和商品数量1:1的队列长度再有新的订单号进来不就超过实际商品量了吗？如果处理订单是维护一个游标移动的话是不是就符合这个问题了","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503180,"discussion_content":"理解本质就好，不用纠结细节哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598604022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214844,"user_name":"Robin康F","can_delete":false,"product_type":"c1","uid":1962437,"ip_address":"","ucode":"618F8686D1231D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJyLCPnVq4gKMN5jPcd9wVVEXtZMibCNAkLrJf4uZKdV40Nelb3uPtCETfuw5hbbC693sUHQpRUMiaA/132","comment_is_top":false,"comment_ctime":1588830345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588830345","product_id":100046301,"comment_content":"公司应对高并发的措施有：限流、降级、异步消息、redis缓存化、增加节点","like_count":1},{"had_liked":false,"id":214726,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1588811161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588811161","product_id":100046301,"comment_content":"通过排队系统，对流量进行消峰","like_count":0},{"had_liked":false,"id":206718,"user_name":"……","can_delete":false,"product_type":"c1","uid":1161361,"ip_address":"","ucode":"6E3D9E217F0955","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/91/1cc25137.jpg","comment_is_top":false,"comment_ctime":1586920738,"is_pvip":false,"replies":[{"id":"77211","content":"不是遍历，遍历太慢，具体你看下redis list对象提供的接口。","user_name":"作者回复","user_name_real":"王庆友","uid":"1268522","ctime":1586922349,"ip_address":"","comment_id":206718,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586920738","product_id":100046301,"comment_content":"根据排队号获取消息再队列中的位置，怎么实现的，通过遍历吗？","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491876,"discussion_content":"不是遍历，遍历太慢，具体你看下redis list对象提供的接口。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586922349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203128,"user_name":"雨霖铃声声慢","can_delete":false,"product_type":"c1","uid":1052607,"ip_address":"","ucode":"656D98310C6DA3","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/bf/ee93c4cf.jpg","comment_is_top":false,"comment_ctime":1586142561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586142561","product_id":100046301,"comment_content":"我们的并发场景没那么多用户，所以靠最土的办法: 增加机器节点+缓存 扛过去的，囧","like_count":0},{"had_liked":false,"id":200634,"user_name":"正在减肥的胖籽。","can_delete":false,"product_type":"c1","uid":1033728,"ip_address":"","ucode":"99E2E4DF599236","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c6/00/683bb4f0.jpg","comment_is_top":false,"comment_ctime":1585626686,"is_pvip":false,"replies":[{"id":"75033","content":"1.秒杀不会有上万个商品，一般就十几个<br>2.异步处理，后台下单根据实际能力来，库存正常该怎么扣就怎么扣，一分钟更新1-2万次不是问题","user_name":"作者回复","user_name_real":"王庆友","uid":"1268522","ctime":1585626880,"ip_address":"","comment_id":200634,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585626686","product_id":100046301,"comment_content":"老师您好。我有几个问题先请教你下。<br>1.如果系统有上万个商品，redis一个商品一个队列，然后生成上万个队列？<br>2.异步化处理逻辑，来削峰流量。但是如果需要同步，库存事实扣的？这种可以讲一下吗？因为数据库是有状态的，数据库并发能力就比较弱，这方面可以讲一下吗？<br>3.","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490083,"discussion_content":"1.秒杀不会有上万个商品，一般就十几个\n2.异步处理，后台下单根据实际能力来，库存正常该怎么扣就怎么扣，一分钟更新1-2万次不是问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585626880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200172,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1585552434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585552434","product_id":100046301,"comment_content":"这节课讲得方法挺适合我们的，我们之前上过一个抢购的活动，由于没有经验，所以跑起来很卡，今天讲的方法不复杂，还能解决问题，真好。","like_count":0},{"had_liked":false,"id":200102,"user_name":"阿杜","can_delete":false,"product_type":"c1","uid":1066705,"ip_address":"","ucode":"349D3572F5ABE7","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/d1/a1ddf49f.jpg","comment_is_top":false,"comment_ctime":1585544162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585544162","product_id":100046301,"comment_content":"讲解的比较精炼，也很实用，能满足大部分秒杀业务，业务落地简单快速。","like_count":0}]}