{"id":388776,"title":"14 | 使用浮动层：如何展示对话框，并给对话框传递参数？","content":"<p>你好，我是王沛。今天我们来聊聊如何在 React 中处理对话框。</p><p>对话框是前端应用中非常常用的一种界面模式，它们通常是应用中的一个独立窗口，用于展示信息或者输入信息。</p><p>但是在 React 中，使用对话框其实并不容易，主要原因在于两点：</p><p>一方面，对话框需要先在父组件中声明，才能在子组件中控制其是否显示。</p><p>比如说我们需要同时在布局的 header 和 sider 上用菜单去控制某个对话框是否显示，那么这个对话框就必须定义在根组件上。</p><p>另一方面，给对话框传递参数只能由 props 传入，这意味着所有的状态管理都需要在更高级别的组件上。而实际上呢，这个对话框的参数可能只在子组件中才会维护，这时我们就需要利用自定义事件将参数回传，非常麻烦。</p><h2>案例导入：处理对话框的误区</h2><p>为了方便你理解这两点，我给你举一个实际场景的例子，你就能明白为什么说在 React 中，常用的对话框是比较难处理的。比如说我们需要实现下面这个截图演示的功能：</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/2d/f8be7ed1yyac44c70caa9bfc74ce4c2d.png?wh=1470x726\" alt=\"\"></p><p>在这个例子中，我们有一个左右布局的页面。左边栏有一个新建用户的按钮，右边是一个用户列表。点击新建用户的按钮，或者点击表格中的编辑按钮，都会显示同一个对话框。这个对话框根据是否传入用户数据作为参数，来决定是新建还是编辑用户。</p><!-- [[[read_end]]] --><p>这个页面的代码一般会用下面的 JSX 去实现：</p><pre><code>&lt;div className=&quot;main-layout&quot;&gt;\n  &lt;Sider /&gt;\n  &lt;UserList /&gt;\n&lt;/div&gt;\n</code></pre><p>可以看到，这里的主布局包含了Sider 和 UserList 两个同层级的组件。但是它们要使用同一个对话框以显示编辑用户。而我们都知道，在 React 中，所有的 UI 都是状态驱动，这意味着我们必须将对话框相关的状态，以及状态管理逻辑提升到父组件中去实现，也就是这里的 Layout 组件。</p><p>那么，一般会用类似下面的代码逻辑去实现：</p><pre><code>function MainLayout() {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [user, setUser] = useState(null);\n  const showUserModal = (user) =&gt; {\n    setModalVisible(true);\n    setUser(user);\n  }\n  return (\n    &lt;div className=&quot;main-layout&quot;&gt;\n      &lt;Sider onNewUser={showUserModal}/&gt;\n      &lt;UserList onEditUser={user =&gt; showUserModal(user)}/&gt;\n      &lt;UserInfoModal visible={modalVisible} user={user} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><p>在这段代码中，我们将 UserInfoModal 这个对话框组件定义在了父组件 Layout 中，通过 visible 控制其是否显示。然后再在 Sider 和 UserList 这两个组件中，用自定义事件来告知父组件，用户点击了某个按钮了，应该显示对话框。</p><p>这样的用法固然是可以正确工作的，也是我看到的大多数同学的常规写法。但这种写法其实隐含着如下两个问题。</p><p>第一，<strong>语义隔离不明确</strong>。MainLayout 这个组件应该只做布局的事情，而不应该有其他的业务逻辑。但是在这里，由于我们加入了用户信息处理的逻辑，就让本不相关的两块功能产生了依赖。</p><p>而且，如果要增加另外一个对话框，那意味着又要在 Layout 上增加新的业务逻辑了。这样的话，代码很快就会变得臃肿，且难以理解和维护。</p><p>第二，<strong>难以扩展</strong>。现在我们只是在 MainLayout 下面的两个组件共享了对话框，但是如果和MainLayout 同级的组件也要访问这个对话框呢？又或者， MainLayout 下面的某个深层级的孙子组件也要能显示同一个对话框呢？</p><p>这样处理的话就会非常麻烦。前者意味着代码需要重构，继续提升状态到父组件；后者意味着业务逻辑处理更复杂，需要通过层层的自定义事件回调来完成。</p><p>所以，按照 React 方式的做法，或者大多数教程上演示的对话框的用法，其实在实际项目中是会遇到上面所述的各种问题。而这些问题的本质就是，<strong>一个实现业务逻辑的 Modal 究竟应该在哪个组件中去声明？又该怎么和它进行交互呢？</strong></p><p>接下来，我会和你分享在一个比较大型的项目中，<strong>如何用一个统一的方式去管理对话框，从而让对话框相关的业务逻辑能够更加模块化，以及和其他业务逻辑进行解耦</strong>。</p><p>不过也特别说明一下，这种方式更多的是我个人经验的总结，并不一定是唯一的，或者说最佳的方式。所以如果你有任何疑问，欢迎在留言区和我交流讨论。</p><h2>思路：使用全局状态管理所有对话框</h2><p>要解决上面例子中演示的问题，我们可以先仔细思考下对话框这种 UI 模式的本质。</p><p>对话框在本质上，其实是<strong>独立于其他界面的一个窗口，用于完成一个独立的功能</strong>。</p><p>如果从视觉角度出发，你会发现在使用对话框的时候，你完全不会关心它是从哪个具体的组件中弹出来的，而只会关心对框本身的内容。</p><p>比如说，一个设置用户选项的对话框，它可能是从顶部菜单中点出来的，也可能是在某个具体页面的按钮点出来的，但都自动显示了上下文相关的设置选项。</p><p>对话框的这样一个本质，就决定了在组件层级上，它其实是应该独立于各个组件之外的。虽然很可能在一开始这个对话框的实现和某个组件非常高的相关度，但是在整个应用的不断开发和演进过程中，是很可能不断变化的。</p><p>所以，在定义一个对话框的时候，其定位基本会等价于<strong>定义一个具有唯一 URL 路径的页面</strong>。只是前者由弹出层实现，后者是页面的切换。</p><p>对于页面级别的 UI 切换，我们很容易理解，就是定义全局的路由嘛。那么同样的，如果我们以同样的方式去思考对话框，其实就是将对话框全局化，然后通过一个全局的机制来管理这些对话框。</p><p>这个过程和页面 URL 的切换非常类似，那么我们就可以给每一个对话框定义一个全局唯一的 ID，然后通过这个 ID 去显示或者隐藏一个对话框，并且给它传递参数。</p><p>基于这样一个设想，我们就来尝试去设计一个 API 去做对话框的全局管理。假设我们将这个对话框的实现命名为 NiceModal，那么我们的目标就是能够用以下的方式去操作对话框：</p><pre><code>// 通过 create API 创建一个对话框，主要为了能够全局的控制对话框的展现\nconst UserInfoModal = NiceModal.create(\n  'user-info-modal',\n  RealUserInfoModal\n);\n\n// 创建一个 useNiceModal 这样的 Hook，用于获取某个 id 的对话框的操作对象\nconst modal = useNiceModal('user-info-modal');\n// 通过 modal.show 显示一个对话框，并能够给它传递参数\nmodal.show(args);\n// 通过 modal.hide 关闭对话框\nmodal.hide();\n</code></pre><p>可以看到，如果有这样的 API，那么无论在哪个层级的组件，只要知道某个 Modal 的 ID，那就都可以统一使用这些对话框，而不再需要考虑该在哪个层级的组件去定义了，使用起来会更加直观。</p><p>所以，通过上面的思考和验证，我们可以认为对话框这种模式的本质就是一个独立的窗口，它和一个拥有独立 URL 的页面在功能上和形式上都是极为类似的。这就意味着我们可以用和 URL 一样的方法去实现通用的对话框管理。</p><h2>实现：创建 NiceModal 组件和相关 API</h2><p>下面，我们就来看看如何去实现这样的一个 NiceModal 机制。为了让你比较好地理解实现的逻辑，我尽量通过代码注释的方式来解释实现思路和原理，所以你要仔细阅读代码，确保理解了实现的细节。</p><p>首先要考虑的便是如何管理全局状态，在这里我们以 Redux 为例，来创建一个可以处理所有对话框状态的 reducer：</p><pre><code>const modalReducer = (state = { hiding: {} }, action) =&gt; {\n  switch (action.type) {\n    case &quot;nice-modal/show&quot;:\n      const { modalId, args } = action.payload;\n      return {\n        ...state,\n        // 如果存在 modalId 对应的状态，就显示这个对话框\n        [modalId]: args || true,\n        // 定义一个 hiding 状态用于处理对话框关闭动画\n        hiding: {\n          ...state.hiding,\n          [modalId]: false,\n        },\n      };\n    case &quot;nice-modal/hide&quot;:\n     const { modalId, force } = action.payload;\n      // 只有 force 时才真正移除对话框\n      return action.payload.force\n        ? {\n            ...state,\n            [modalId]: false,\n            hiding: { [modalId]: false },\n          }\n        : { ...state, hiding: { [.modalId]: true } };\n    default:\n      return state;\n  }\n};\n</code></pre><p>这段代码的<strong>主要思路</strong>就是通过 Redux 的 store 去存储每个对话框状态和参数。在这里，我们设计了两个 action ，分别用来显示和隐藏对话框。</p><p>特别要注意的是，这里我们加入了 hiding 这样一个状态，用来处理对话框关闭过程的动画，确保用户体验。</p><p>为了让 Redux 的 action 使用起来更方便，我们可以定义一个 useNiceModal 这样的 Hook，在其内部封装对 Store 的操作，从而实现对话框状态管理的逻辑重用，并以更友好的方式暴露给用户：</p><pre><code>// 使用 action creator 来创建显示和隐藏对话框的 action\nfunction showModal(modalId, args) {\n  return {\n    type: &quot;nice-modal/show&quot;,\n    payload: {\n      modalId,\n      args,\n    },\n  };\n}\n\nfunction hideModal(modalId, force) {\n  return {\n    type: &quot;nice-modal/hide&quot;,\n    payload: {\n      modalId,\n      force,\n    },\n  };\n}\n\n// 创建自定义 Hook 用于处理对话框逻辑\nexport const useNiceModal = (modalId) =&gt; {\n  const dispatch = useDispatch();\n  // 封装 Redux action 用于显示对话框\n  const show = useCallback((args) =&gt; {\n    dispatch(showModal(modalId, args));\n  }, [\n    dispatch,\n    modalId,\n  ]);\n  // 封装 Redux action 用于隐藏对话框\n  const hide = useCallback((force) =&gt; {\n    dispatch(hideModal(modalId, force));\n  }, [\n    dispatch,\n    modalId,\n  ]);\n\n  const args = useSelector((s) =&gt; s[modalId]);\n  const hiding = useSelector((s) =&gt; s.hiding[modalId]);\n\n  // 只要有参数就认为对话框应该显示，如果没有传递 args，在reducer 中会使用\n  // 默认值 true\n  return { args, hiding, visible: !!args, show, hide };\n};\n</code></pre><p>同时，我们可以实现 NiceModal 这样一个组件，去封装通用的对话框操作逻辑。比如关闭按钮，确定按钮的事件处理，等等。为了方便演示，我们以 Ant Design 中的 Modal 组件为例：</p><pre><code>function NiceModal({ id, children, ...rest }) {\n  const modal = useNiceModal(id);\n  return (\n    &lt;Modal\n      onCancel={() =&gt; modal.hide()} // 默认点击 cancel 时关闭对话框\n      onOk={() =&gt; modal.hide()} // 默认点击确定关闭对话框\n      afterClose={() =&gt; modal.hide(true)} // 动画完成后真正关闭\n      visible={!modal.hiding}\n      {...rest} // 允许在使用 NiceModal 时透传参数给实际的 Modal\n    &gt;\n      {children}\n    &lt;/Modal&gt;\n  );\n}\n\n</code></pre><p>最后呢，我们用一个第10讲提到的容器模式，它会在对话框不可见时直接返回 null，从而不渲染任何内容；并且确保即使页面上定义了100个对话框，也不会影响性能：</p><pre><code>export const createNiceModal = (modalId, Comp) =&gt; {\n  return (props) =&gt; {\n    const { visible, args } = useNiceModal(modalId);\n    if (!visible) return null;\n    return &lt;Comp {...args} {...props} /&gt;;\n  };\n};\n</code></pre><p>这样，我们就实现了一个 NiceModal 这样的全局对话框管理框架。基于这样一个框架，使用对话框的时候就会非常方便。比如下面的代码：</p><pre><code>import { Button } from &quot;antd&quot;;\nimport NiceModal, {\n  createNiceModal,\n  useNiceModal,\n} from &quot;./NiceModal&quot;;\n\nconst MyModal = createNiceModal(&quot;my-modal&quot;, () =&gt; {\n  return (\n    &lt;NiceModal id=&quot;my-modal&quot; title=&quot;Nice Modal&quot;&gt;\n      Hello NiceModal!\n    &lt;/NiceModal&gt;\n  );\n});\n\nfunction MyModalExample() {\n  const modal = useNiceModal(&quot;my-modal&quot;);\n  return (\n    &lt;&gt;\n      &lt;Button type=&quot;primary&quot; onClick={() =&gt; modal.show()}&gt;\n        Show Modal\n      &lt;/Button&gt;\n      &lt;MyModal /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre><p>在这个例子中，我们首先定义了一个简单的 MyModal 组件，这样我们就可以把多画框逻辑写在单独的组件中，而不是嵌入到父组件。在这个 MyModal 组件内部使用了 NiceModal 作为基础，从而可以绑定对话框 ID，并重用通用的对话框逻辑。</p><p>通过这个 Modal ID，我们就能够在应用的任何组件中去管理这个对话框了。</p><p>可以看到，在这部分我们基本完整实现了一个 NiceModal 的机制，它可以帮助你很好地去全局管理对话框。不过你再仔细点的话，会发现这里其实还缺少了一个直观的机制，那就是<strong>如何处理对话框的返回值</strong>。</p><h2>处理对话框返回值</h2><p>如果说对话框和页面这两种 UI 模式基本上是一致的，都是独立窗口完成独立逻辑。但是在用户交互上，却是有一定的差别，</p><ul>\n<li>对话框可能需要返回值给调用者；</li>\n<li>而页面切换一般不会关心页面执行的结果是什么。</li>\n</ul><p>那么基于上面的 NiceModal 实现逻辑，现在的问题就是，<strong>我们应该如何让调用者获得返回值呢？</strong></p><p>考虑到我们可以把用户在对话框中的操作看成一个异步操作逻辑，那么用户在完成了对话框中内容的操作之后，就认为异步逻辑完成了。因此我们可以<strong>利用 Promise</strong> 来完成这样的逻辑。</p><p>那么，我们要实现的 API 如下所示：</p><pre><code>const modal = useNiceModal('my-modal');\n// 实现一个 promise API 来处理返回值\nmodal.show(args).then(result =&gt; {});\n</code></pre><p>事实上，要实现这样一个机制并不困难，就是在 useNiceModal 这个 Hook 的实现中提供一个 modal.resolve 这样的方法，能够去 resolve modal.show 返回的 Promise。</p><p>实现的代码思路如下所示：</p><pre><code>const modal = useNiceModal('my-modal');\n// 实现一个 promise API 来处理返回值\nmodal.show(args).then(result =&gt; {});\n</code></pre><p>代码的核心思路就是<strong>将 show 和 resolve 两个函数通过 Promise 联系起来</strong>。因为两个函数的调用位置不一样，所以我们使用了一个局部的临时变量，来存放 resolve 回调函数。通过这样的机制，就可以在对话框中去调用 modal.resolve 来返回值了。</p><p>下面的代码演示了具体使用的一个例子：</p><pre><code>// 使用一个 object 缓存 promise 的 resolve 回调函数\nconst modalCallbacks = {};\nexport const useNiceModal = (modalId) =&gt; {\n  const dispatch = useDispatch();\n  const show = useCallback(\n    (args) =&gt; {\n      return new Promise((resolve) =&gt; {\n        // 显示对话框时，返回 promise 并且将 resolve 方法临时存起来\n        modalCallbacks[modalId] = resolve;\n        dispatch(showModal(modalId, args));\n      });\n    },\n    [dispatch, modalId],\n  );\n  const resolve = useCallback(\n    (args) =&gt; {\n      if (modalCallbacks[modalId]) {\n        // 如果存在 resolve 回调函数，那么就调用\n        modalCallbacks[modalId](args);\n        // 确保只能 resolve 一次\n        delete modalCallbacks[modalId];\n      }\n    },\n    [modalId],\n  );\n  \n  // 其它逻辑...\n\n  // 将 resolve 也作为返回值的一部分\n  return { show, hide, resolve, visible, hiding };\n};\n</code></pre><p>这段示意代码包括两个部分。</p><p>首先是在 UserList 的表格组件中，由编辑按钮触发对话框的显示，并在对话框返回后，将用户输入更新到表格。</p><p>第二部分则是在对话框中，用户点击了确定按钮后调用 modal.resolve 方法，将用户输入返回给 UserList 组件，从而完成整个编辑流程。</p><h2>小结</h2><p>在这节课我们主要学习了在 React 中使用对话框的一种实践方式：<strong>利用全局状态来管理对话框。</strong></p><p>其核心思路在于<strong>从 UI 模式的角度出发，认识到对话框和页面在很多时候是非常类似的，都是一个独立功能的 UI 展现</strong>。</p><p>因此，用全局的方式去管理对话框就是一种非常合理的方式。这样，我们就能解决很多在 React 开发中经常遇到的各种对话框实现难题，从而让组件的语义更加清楚，代码更容易理解和维护。</p><p>这里要着重强调一点。在实现部分，我们用到了 Redux 作为全局状态管理框架来管理对话框的状态，并利用了自定义 Hook useNiceModal 去实现状态管理逻辑的重用。</p><p>虽然看上去是实现了一个框架级别的机制，但是实际上核心代码只有100行左右，你在实际项目中完全可以将其复制到你的项目中，并在理解的基础上，根据自己的需求和场景去定制使用。到时候你就能感受到这个机制带给你的惊喜了。</p><p>这里也要说明一点，使用了全局方式管理对话框，并不意味着你就不能使用本地状态的对话框了。对于一些非常简单的场景，比如你很确定某个对话框一定只在某个组件内才被使用，也是可以继续使用本地声明的对话框的。我们要明白，全局方式和本地方式是完全不冲突的，是可以共存的。</p><p>文中所有的示例代码和运行效果都可以通过 codesandbox 查看：<a href=\"https://codesandbox.io/s/react-hooks-course-20vzg\">https://codesandbox.io/s/react-hooks-course-20vzg</a> 。</p><h2>思考题</h2><p>在本文中，我们使用的是 Redux 来管理所有对话框的所有状态。但有时候你的项目并不一定使用了 Redux，那么我们其实也可以使用 Context 来管理对话框的全局状态。那么请你思考一下，如果基于 Context ，应该如何实现 NiceModal 呢？</p><p>欢迎把你的想法和思考分享在留言区，我会和你交流。同时，我也会把其中一些不错的回答在留言区置顶，供大家学习讨论。</p>","neighbors":{"left":{"article_title":"13｜Form：Hooks 给 Form 处理带来了哪些新变化？","id":387824},"right":{"article_title":"15 | 路由管理：为什么每一个前端应用都需要使用路由机制？","id":389596}},"comments":[{"had_liked":false,"id":314775,"user_name":"咚门","can_delete":false,"product_type":"c1","uid":1448473,"ip_address":"","ucode":"DD4E8734370BBF","user_header":"https://static001.geekbang.org/account/avatar/00/16/1a/19/5e4ca139.jpg","comment_is_top":false,"comment_ctime":1633419928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57467994776","product_id":100079901,"comment_content":"其实我感觉有点简单问题复杂化了，文章一开始要解决的问题是两个组件需要用到同一个modal的问题，这时候本身就不该把UserInfoModal放到Sider和UserInfo的父亲组件，这不符合react的组合思想，而是应该在Sider和UserInfo里分别调用UserInfoModal 并控制显示与否就好了。定义全局modal状态管理违背了前面几章讲的文件组合去依赖这个原则吧，整个系统的modal高度耦合，新人来了得花很多时间理解。并且，看代码虽然判断了visible反回null,但是本身是有多少个modal就一直存在了少个 instance,而modal往往只能同时存在一个。","like_count":13},{"had_liked":false,"id":300020,"user_name":"珍惜眼前人","can_delete":false,"product_type":"c1","uid":1387988,"ip_address":"","ucode":"7443DA4F24E35B","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/d4/76ffbdfc.jpg","comment_is_top":false,"comment_ctime":1624956876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40279662540","product_id":100079901,"comment_content":"建议大家一定要跟着老师的代码敲，这节对于我这个新手来说有点难度","like_count":9},{"had_liked":false,"id":308124,"user_name":"Brave","can_delete":false,"product_type":"c1","uid":1378339,"ip_address":"","ucode":"4F66150D471D3B","user_header":"https://static001.geekbang.org/account/avatar/00/15/08/23/1cc7d190.jpg","comment_is_top":false,"comment_ctime":1629422699,"is_pvip":false,"replies":[{"id":"111729","content":"回答的很好，结合了 useReducer 和 useContext ，可以看到，从 redux 转到 context，基本代码逻辑是没有变化的，都是 dispatch action。这里也看到了 useReducer 的使用场景，通常都会和 useContext 结合来完成一些比较复杂的数据管理逻辑，在一定程度可以取代 redux。","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1629726225,"ip_address":"","comment_id":308124,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35989161067","product_id":100079901,"comment_content":"对于思考题这是我的想法：<br><br>import React, {useContext, useReducer} from &#39;react&#39;<br>import {reducer, ModalContext} from &quot;.&#47;NiceModal&#47;modalContext&quot;;<br>import Demo1 from &quot;.&#47;demo1&quot;;<br><br>const Main = () =&gt; {<br><br>    const context = useContext(ModalContext)<br>    const [state, dispatch] = useReducer(reducer, context.state)<br>    return (<br>        &lt;ModalContext.Provider value={{<br>            state,<br>            dispatch,<br>        }}&gt;<br>            &lt;Demo1&#47;&gt;<br>        &lt;&#47;ModalContext.Provider&gt;<br>    )<br>}<br><br>export default Main<br><br>创建useNiceModal：<br><br>const useNiceModal = (modalId) =&gt; {<br>    const {state, dispatch} = useContext(ModalContext)<br>    const args = state[modalId]<br><br>    const show = useCallback((args) =&gt; {<br>        dispatch({<br>            type: &#39;show&#39;,<br>            modalId,<br>            args<br>        })<br>    }, [modalId, args, dispatch])<br><br>    const hide = useCallback(() =&gt; {<br>        dispatch({<br>            type: &#39;hide&#39;,<br>            modalId<br>        })<br>    }, [dispatch, modalId])<br><br>    return {<br>        show,<br>        hide,<br>        args,<br>        visible: !!args,<br>    }<br>}<br><br>export default useNiceModal<br><br>在Demo1中：<br><br>const Demo1 = () =&gt; {<br><br>    const modalId = &#39;my-first-modal&#39;<br><br>    const Content = (props) =&gt; {<br>        return (<br>            &lt;div&gt;Hello world!&lt;&#47;div&gt;<br>        )<br>    }<br><br>    const MyModal = createNiceModal({<br>        modalId,<br>        title: &#39;这是我的标题&#39;,<br>        content: &#39;这是我的内容&#39;<br>    }, Content)<br><br>    const modal = useNiceModal(modalId)<br><br>    return (<br>        &lt;div&gt;<br>            &lt;button onClick={() =&gt; modal.show()}&gt;<br>                打开弹窗<br>            &lt;&#47;button&gt;<br>            &lt;MyModal&#47;&gt;<br>        &lt;&#47;div&gt;<br>    )<br>}<br><br>export default Demo1<br>","like_count":8,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525399,"discussion_content":"回答的很好，结合了 useReducer 和 useContext ，可以看到，从 redux 转到 context，基本代码逻辑是没有变化的，都是 dispatch action。这里也看到了 useReducer 的使用场景，通常都会和 useContext 结合来完成一些比较复杂的数据管理逻辑，在一定程度可以取代 redux。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629726225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299473,"user_name":"何用","can_delete":false,"product_type":"c1","uid":1377393,"ip_address":"","ucode":"B0C6E8176AE6FD","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/71/0b949a4c.jpg","comment_is_top":false,"comment_ctime":1624663929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14509565817","product_id":100079901,"comment_content":"弹出层并不仅限于 Modal, 还有 Drawer 等等。这些弹出层显隐处理逻辑都很相似，因而可以考虑个更通用的命名，比如说叫 Overlay。","like_count":3},{"had_liked":false,"id":314774,"user_name":"咚门","can_delete":false,"product_type":"c1","uid":1448473,"ip_address":"","ucode":"DD4E8734370BBF","user_header":"https://static001.geekbang.org/account/avatar/00/16/1a/19/5e4ca139.jpg","comment_is_top":false,"comment_ctime":1633419817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10223354409","product_id":100079901,"comment_content":"其实我感觉有点简单问题复杂化了，文章一开始要解决的问题是两个组件需要用到同一个modal的问题，这时候本身就不该把UserInfoModal放到Sider和UserInfo的父亲组件，这不符合react的组合思想，而是应该在Sider和UserInfo里分别调用UserInfoModal 并控制显示与否就好了。定义全局modal状态管理违背了前面几章讲的文件组合去依赖这个原则吧，整个系统的modal高度耦合，新人来了得花很多时间理解。并且，看代码虽然判断了visible反回null,但是本身是有多少个modal就一直存在了少个 instance,而modal往往只能同时存在一个。","like_count":2},{"had_liked":false,"id":300877,"user_name":"Bug般的存在","can_delete":false,"product_type":"c1","uid":1573766,"ip_address":"","ucode":"7A61F7AA3B49A3","user_header":"https://static001.geekbang.org/account/avatar/00/18/03/86/c9051c6a.jpg","comment_is_top":false,"comment_ctime":1625412722,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10215347314","product_id":100079901,"comment_content":"modal.show().then() 感觉这个思路打死我我也想不出来，我不配做程序员😂","like_count":2,"discussions":[{"author":{"id":1573766,"avatar":"https://static001.geekbang.org/account/avatar/00/18/03/86/c9051c6a.jpg","nickname":"Bug般的存在","note":"","ucode":"7A61F7AA3B49A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382154,"discussion_content":"最近加腾讯防水墙，正好利用这个思路改造了一下\n一开始就想怎么拿到防水墙的`res` ，没有思路，就只好传入了一个回调，但是很不灵活。改造后可以直接从外部拿到结果，想怎么用就怎么用，爽~😄\n有个疑问：我这段代码可能会生成大量 `pending` 状态的 promise，不知道会不会有影响，要不要把 `if (res.ret !== 0) return;` 去掉呢\n\n```js\nclass TencentCaptcha {\n// ...\nprivate initCaptcha() {\n    this.tencentCaptcha = new window.TencentCaptcha(\n      tencentCaptchaAppId,\n      (res) => {\n        if (res.ret !== 0) return;\n        this.getResult({\n          randstr: res.randstr,\n          ticket: res.ticket,\n        });\n      },\n      this.options,\n    );\n  }\n\n  show() {\n    this.tencentCaptcha.show();\n    return new Promise((resolve) => {\n      this.getResult = resolve\n    })\n  }\n// ...\n}\n```","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625453072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336070,"user_name":"Geek_6304e3","can_delete":false,"product_type":"c1","uid":2905630,"ip_address":"","ucode":"8DD9A6D8E7DC60","user_header":"","comment_is_top":false,"comment_ctime":1645879824,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5940847120","product_id":100079901,"comment_content":"感觉没必要，这样子简单的问题复杂化了","like_count":1},{"had_liked":false,"id":299472,"user_name":"何用","can_delete":false,"product_type":"c1","uid":1377393,"ip_address":"","ucode":"B0C6E8176AE6FD","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/71/0b949a4c.jpg","comment_is_top":false,"comment_ctime":1624663663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5919630959","product_id":100079901,"comment_content":"单纯用 react 来管理对话框的全局状态，可以使用 Context + useReducer API 来实现，思路大同小异","like_count":1},{"had_liked":false,"id":360400,"user_name":"Geek_3656b2","can_delete":false,"product_type":"c1","uid":1306962,"ip_address":"福建","ucode":"8562CCE7E86951","user_header":"","comment_is_top":false,"comment_ctime":1666540949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666540949","product_id":100079901,"comment_content":"在这个例子中，我们首先定义了一个简单的 MyModal 组件，这样我们就可以把多画框逻辑写在单独的组件中…<br><br>多画框应该是对话框。","like_count":0},{"had_liked":false,"id":353955,"user_name":"搁浅","can_delete":false,"product_type":"c1","uid":2819061,"ip_address":"福建","ucode":"351D5C13345B5C","user_header":"https://static001.geekbang.org/account/avatar/00/2b/03/f5/ed243c62.jpg","comment_is_top":false,"comment_ctime":1659950744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659950744","product_id":100079901,"comment_content":"我感觉只是复用同一个对话框，比较方便，但对于每一个页面来说，对话框显示的内容都是不一样的，所以这种方式，也不是非常方便","like_count":0},{"had_liked":false,"id":349607,"user_name":"鲁滨逊","can_delete":false,"product_type":"c1","uid":1387826,"ip_address":"","ucode":"AD58F1115DF311","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/32/43595745.jpg","comment_is_top":false,"comment_ctime":1656134127,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656134127","product_id":100079901,"comment_content":"感觉代码比较多的章节还是需要去 codesandbox上看完整的代码实现，然后自己敲一遍，最好在找几个场景用一下，不然还是掌握不了","like_count":0},{"had_liked":false,"id":347276,"user_name":"Geek_4e92cc","can_delete":false,"product_type":"c1","uid":2995810,"ip_address":"","ucode":"1DD2764FD8C4E8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotuhVFN9phZsthxdS2bBAV9Cjb1NqIFbSQhiclmtsUDCn1cOKrzU8Ie1ickxlWC4kIlI3S69XrST7w/132","comment_is_top":false,"comment_ctime":1653894010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653894010","product_id":100079901,"comment_content":"为什么不用传送门传到根节点render呢？","like_count":0},{"had_liked":false,"id":343056,"user_name":"Sun 🙃","can_delete":false,"product_type":"c1","uid":1396293,"ip_address":"","ucode":"342590FE20F231","user_header":"https://static001.geekbang.org/account/avatar/00/15/4e/45/1e463459.jpg","comment_is_top":false,"comment_ctime":1650612366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650612366","product_id":100079901,"comment_content":"Modal为什么不能放在子组件中呢，哪个组件调用modal就把这个modal组件放在哪个组件中不行吗？","like_count":0},{"had_liked":false,"id":335609,"user_name":"Geek_ccb74b","can_delete":false,"product_type":"c1","uid":1284027,"ip_address":"","ucode":"3C3C1C87238170","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Uc6N5Zug5c195JzkUslt08GvVgLDWcleRcsgUOrIwXPHlAib65GJtEFHESVeQ9sfklLSXMPMsU1UqNb4q4B6gxw/132","comment_is_top":false,"comment_ctime":1645602829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645602829","product_id":100079901,"comment_content":"没看懂，通读完回头便敲边看，这一章我定会搞明白，因为平时写 modal 太痛苦了。","like_count":0},{"had_liked":false,"id":320619,"user_name":"天天","can_delete":false,"product_type":"c1","uid":2000254,"ip_address":"","ucode":"2B9414A72EB338","user_header":"https://static001.geekbang.org/account/avatar/00/1e/85/7e/dc5ee66c.jpg","comment_is_top":false,"comment_ctime":1636424843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636424843","product_id":100079901,"comment_content":"这一篇确实思路可以借鉴，但是感觉还是做得有点重了，可能有大规模弹窗的业务适合","like_count":0},{"had_liked":false,"id":317655,"user_name":"斯塔克","can_delete":false,"product_type":"c1","uid":2019446,"ip_address":"","ucode":"8BE17C01CADF0F","user_header":"","comment_is_top":false,"comment_ctime":1634881762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634881762","product_id":100079901,"comment_content":"model id是不是可以用枚举管理","like_count":0},{"had_liked":false,"id":314223,"user_name":"小炭","can_delete":false,"product_type":"c1","uid":1109544,"ip_address":"","ucode":"E20E3958CAF06C","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/28/c04a0c83.jpg","comment_is_top":false,"comment_ctime":1632906012,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1632906012","product_id":100079901,"comment_content":"老师，问一个语法问题，“export const useNiceModal = (modalId) =&gt; { ” 代码中的export const 这种写法有哪些好处？","like_count":0},{"had_liked":false,"id":302806,"user_name":"SenjougaharaSama","can_delete":false,"product_type":"c1","uid":1007787,"ip_address":"","ucode":"B90D94A3763045","user_header":"https://static001.geekbang.org/account/avatar/00/0f/60/ab/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1626394912,"is_pvip":false,"replies":[{"id":"109873","content":"文中示例的 antd modal 就是基于 portal 实现的。","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1626855137,"ip_address":"","comment_id":302806,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626394912","product_id":100079901,"comment_content":"为啥不直接通过portal？","like_count":0,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523435,"discussion_content":"文中示例的 antd modal 就是基于 portal 实现的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626855137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301382,"user_name":"发芽的紫菜","can_delete":false,"product_type":"c1","uid":1055836,"ip_address":"","ucode":"49450F3287DF28","user_header":"https://static001.geekbang.org/account/avatar/00/10/1c/5c/f5f24221.jpg","comment_is_top":false,"comment_ctime":1625654950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625654950","product_id":100079901,"comment_content":"NiceModal里面有  const modal = useNiceModal(id);  <br>在MyModalExample也用了  const modal = useNiceModal(&quot;my-modal&quot;);  <br>用了两次useNiceModal，返回值的两个modal应该是不同的对象吧？ modal里面的hide、show函数应该也是不一样的，对吗？<br>不过数据都存在const store = createStore(modalReducer); 的store里了，是全局的","like_count":0},{"had_liked":false,"id":301054,"user_name":"帅气小熊猫","can_delete":false,"product_type":"c1","uid":1022199,"ip_address":"","ucode":"88FE6B57F55063","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/f7/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1625498637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625498637","product_id":100079901,"comment_content":"<br>这种全局的东西 我觉得用 react.creatPortal 更合适.","like_count":0},{"had_liked":false,"id":300872,"user_name":"Bug般的存在","can_delete":false,"product_type":"c1","uid":1573766,"ip_address":"","ucode":"7A61F7AA3B49A3","user_header":"https://static001.geekbang.org/account/avatar/00/18/03/86/c9051c6a.jpg","comment_is_top":false,"comment_ctime":1625412203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625412203","product_id":100079901,"comment_content":"感觉reducer中的state定义不是很好理解，不知道是不是更深层次的考虑<br><br>我是定义成了三个状态<br><br>enum TModalStatusEnum {<br>  SHOWN = &#39;可见的&#39;,<br>  HIDING = &#39;正在隐藏&#39;,<br>  HIDDEN = &#39;不可见&#39;,<br>}<br><br>interface TState {<br>  [modalId: string]: {<br>    status: TModalStatusEnum;<br>    args: any;<br>  }<br>}<br><br>&#47;&#47; reducer中<br><br> case TNiceModalActionEnum.HIDE:<br>      return {<br>        ...state,<br>        [modalId]: {<br>          args: null,<br>          status: force ? TModalStatusEnum.HIDDEN : TModalStatusEnum.HIDING,<br>        },<br>      }<br><br>export const createNiceModal = &lt;T, P&gt;(<br>  modalId: string,<br>  Component: React.ComponentType&lt;T &amp; P&gt;<br>) =&gt; {<br>  &#47;&#47; 这里的 props 是 &lt;UserInfoModal props &#47;&gt; 中的 props<br>  return (props: P) =&gt; {<br>    const { status, args } = useNiceModal&lt;T&gt;(modalId)<br>    &#47;&#47; 完全隐藏后销毁 modal<br>    if (status === TModalStatusEnum.HIDDEN) return null<br>    return &lt;Component {...props} {...args} &#47;&gt;<br>  }<br>}<br><br>ps：个人习惯 type 的定义以 T 开头","like_count":0},{"had_liked":false,"id":299578,"user_name":"凡凡","can_delete":false,"product_type":"c1","uid":1374266,"ip_address":"","ucode":"CAEA596A037D9A","user_header":"https://static001.geekbang.org/account/avatar/00/14/f8/3a/dbf7bdee.jpg","comment_is_top":false,"comment_ctime":1624720646,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1624720646","product_id":100079901,"comment_content":" 捉虫：modal.resolve 这样的方法后面的代码示例重复上一段的代码示例","like_count":0}]}