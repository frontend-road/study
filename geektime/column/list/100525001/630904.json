{"id":630904,"title":"06｜分析工具：几百万行规模的遗留系统怎么分析？","content":"<p>你好，我是黄俊彬。上节课我们分析了Sharing项目旧架构的痛点，同时也对新的架构做了规划，接下来我们就开始落地改造。不过在动手之前，我们要先设想一下如何计划整个重构的工作。</p><p>首先，我们已经设计了未来的架构，那怎么把现在的代码变成未来架构的样子呢？这是个关键问题。其次，我们还得对重构的复杂度有一个整体的评估，这样才能合理安排任务，因为架构的改造没办法一蹴而就，只能分而治之。最后是怎么验收，也就是如何确保重构后的代码符合未来的架构设计？</p><p>总结一下，就是这三个方面的问题。</p><p>1.怎么评估工作量？从旧的架构重构到新的架构，我们总共需要调整哪些代码？<br>\n2.怎么制定优先级？哪些代码先重构，哪些代码后重构？<br>\n3. 怎么进行度量？如何确定阶段性成果和最终成果？</p><p>这些问题都是我们在落地改造之前要先搞清楚的，不然最终的架构重构结果，大概率很难像设计的那样落地。我们这个课程中的Sharing项目由于做了简化，代码量不多，分析起来相对容易。但在实际的项目中，我们往往面对的是几百万行规模的遗留系统，如果仅靠人工分析，效率肯定是非常低的，而且还容易出错。</p><p>所以，这里建议的做法是采用自动化工具来辅助分析遗留系统。而分析遗留系统的整体思路就是，<strong>借助自动化的工具，分析现有架构与未来架构设计的差距，梳理出需要重构的代码</strong>。然后就可以制定优先级，分阶段重构改造了。</p><!-- [[[read_end]]] --><p>因此这节课，我将带你一起学习两种常见的遗留系统重构分析工具，分别是ArchUnit和Android Studio的Dependencies依赖分析工具。我会给你介绍这两个工具的基本使用方法，并通过示例给你讲解如何运用它们分析遗留系统架构。</p><h2>ArchUnit 架构守护</h2><p>我们先来看ArchUnit。<a href=\"https://www.archunit.org/\">ArchUnit</a> 是一个免费、简单且可扩展的库，它可以用任何Java单元测试框架来检查Java代码的架构，还可以检查包和类、层和片之间的依赖关系，非常适合对遗留系统做分析，还可以作为架构的守护门禁。</p><p>下面我用一个简单的例子，给你简单讲解一下ArchUnit的使用方式。首先，我们需要在配置文件中引入ArchUnit的依赖。</p><pre><code class=\"language-plain\">testImplementation 'com.tngtech.archunit:archunit:1.0.0-rc1'\n</code></pre><p>接着跟编写单元测试一样，在测试用例中用ArchUnit封装好的API来编写架构约束用例。</p><pre><code class=\"language-plain\">@RunWith(ArchUnitRunner.class)\n@AnalyzeClasses(packages = \"com.jkb.junbin.sharing\")\npublic class MyArchitectureTest {\n    //消息组件不能依赖文件组件\n    @ArchTest\n    public static final ArchRule message_should_not_depends_file = noClasses().that().resideInAPackage(\"..message..\")\n                .should().dependOnClassesThat().resideInAPackage(\"..file..\");\n}\n\n</code></pre><p>编写完后，就可以像运行单元测试用例一样运行ArchUnit用例了。</p><p><img src=\"https://static001.geekbang.org/resource/image/01/e1/014ca2a2ac25ba478c2927d1c89a22e1.jpg?wh=3242x1470\" alt=\"\"></p><p>如果你已经掌握了基本的测试用例编写，那么要用好ArchUnit，你只需要了解其提供的API就可以了。这里我将常用的四种ArchUnit语法规则总结到了下面的表格中，更多的使用场景，你可以参考ArchUnit在官网中总结的<a href=\"https://www.archunit.org/use-cases\">编写示例</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/5a/d1aba329a2ae1b09c15cd2de8aca165a.jpg?wh=3600x2354\" alt=\"\"></p><p>和单元测试一样，<strong>我们可以将这些架构守护用例集成到CI的质量门禁上，这样就能防止破坏架构规则的代码被合入</strong>。</p><p>我们前面介绍了如何用ArchUnit设计架构用例，那怎么将ArchUnit应用到遗留系统的架构分析中呢？</p><p>其实方法很简单，我们只需要用ArchUnit的语法，把未来的架构设计编写成架构守护规则即可。这个时候执行这些用例会有大量的错误，但如果把这些错误都解决了，那就意味着我们已经重构出符合新的约束规则的架构。</p><p>我们具体来看看怎么在Sharing项目中应用。还记得我们上节课针对Sharing新架构，总结的两个核心架构约束规则吗？一个是业务组件之间不能有直接的依赖，另一个是下层组件不能反向依赖上层的组件。</p><p>现在我们以消息组件不能直接依赖文件组件为例，设计架构守护用例，约束规则是后面这样。</p><pre><code class=\"language-plain\">@ArchTest\npublic static final ArchRule message_should_not_depends_file = noClasses().that().resideInAPackage(\"..message..\")\n                .should().dependOnClassesThat().resideInAPackage(\"..file..\");\n</code></pre><p>然后我们执行该用例，可以发现这个用例现在是不通过的，提示的日志是后面这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/5d/b4/5dc554f04de994b39aa441dd39923ab4.jpg?wh=3578x1018\" alt=\"\"></p><p>从上图可以看到，消息组件中的MessageFragment依赖了文件组件的FileController，这个依赖不符合新的架构设计，需要进行解耦。如上图所示，错误的日志会提示具体的方法、变量以及对应的代码行，我们借此定位到具体的异常依赖代码就很方便了。</p><p>但如果每次都需要我们去分析这个日志，特别是当耦合特别复杂时，效率就会非常低。所以下面我给你介绍第二种可视化做得更好的分析工具：Android Studio的Dependencies分析功能。</p><h2>Dependencies 依赖分析</h2><p>Android Studio的 <a href=\"https://www.jetbrains.com/help/idea/dependencies-analysis.html\">Dependencies依赖分析</a>功能可以分析应用程序中组件、包和类之间的依赖关系。使用时，只需要在项目中选择：Code-&gt;Analyze Code-&gt;Dependencies，就能触发对当前工程的依赖分析。</p><p><img src=\"https://static001.geekbang.org/resource/image/93/f2/9335f2892dd8d03f7619ab29960e77f2.jpg?wh=2589x1470\" alt=\"\"></p><p>分析完成后，在Dependency Viewer中可以查看项目的依赖情况，如下图所示，在左边的视图选择需要分析的目录后，右边的视图会自动显示其依赖的库和代码。这里我们选择消息组件主页面MessageFragment后，可以看到它依赖的类有AccountController和FileController等。</p><p><img src=\"https://static001.geekbang.org/resource/image/67/70/6730b67d4864eac1efee94b15ba77570.jpg?wh=3006x863\" alt=\"\"></p><p>根据Sharing新架构的规则，业务组件之间不能有依赖，所以，MessageFragment对AccountController和FileController的依赖明显是异常的，需要进行解耦。</p><p>但是，如果项目中的代码规模很大，我们很难一个个进行人工排查，如何利用Dependencies依赖分析功能来自动化地进行大规模分析呢？</p><p>答案是使用Dependency Validation功能检查代码。具体来讲就是点击Edit Rule，使用正则表达式配置约束条件，从而扫描代码中不符合规则的异常依赖。就像后面图里展示的这样，我们配置消息组件不能依赖文件和账户组件。</p><p><img src=\"https://static001.geekbang.org/resource/image/f7/9c/f71fb3yy0420508bb565c481de77529c.jpg?wh=2371x2011\" alt=\"\"></p><p>增加完这条约束规则后，我们重新触发Dependencies功能进行分析，这个时候IDE会自动标红显示异常的依赖。每当我们<strong>在本地完成依赖解耦后，都可以频繁触发Dependencies扫描，来判断重构后的代码是否符合新的架构规则</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/2f/94/2f1458932c79dyy74aaf7c00d71b1894.jpg?wh=2980x1282\" alt=\"\"></p><p>你可能会想，这个规则自己用着不错，怎么在团队里共享呢？很简单，在编写规则的时候勾上Share through VCS，规则文件就会自动保存在.idea目录下，然后将对应的配置文件也提交到版本管理仓库中，就可以在团队内共享同一个规则了。</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/3e/ed91980dcc75ab0yyd50021736cd293e.jpg?wh=2980x538\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/0a/26/0a72cde30e1308f3ee3259be25a79826.jpg?wh=2980x1076\" alt=\"\"></p><p>另外，Dependencies依赖分析还支持将依赖关系导出为xml，你可以利用这个功能将xml导入到excel或者编写脚本中进行分析，便于定制统计筛选。</p><p><img src=\"https://static001.geekbang.org/resource/image/08/91/088132d3e08db6df15328e171bd2bf91.jpg?wh=2587x1624\" alt=\"\"></p><h2>总结</h2><p>好，这节课到这里就结束了。今天我给你介绍了两个常用的遗留系统依赖分析工具：ArchUnit和Dependencies依赖分析，这两个工具可以帮助我们分析当前架构与未来架构的设计差距，自动梳理出需要重构的代码。下面我给你总结一下这两个工具的优缺点。</p><p><img src=\"https://static001.geekbang.org/resource/image/86/89/86577eef56038b65d7ec9d2550982f89.jpg?wh=2756x1570\" alt=\"\"></p><p>在实际的项目中，我建议将两个工具结合使用：Dependencies依赖分析可以更多用于开发阶段，当重构完成后频繁扫描代码，验证不符合架构规则的依赖是否解耦；ArchUnit则可以作为架构守护工具在CI上进行验证，避免破坏架构规则的代码被合入版本库中。</p><p>最后，让我们再回到开头的三个问题。<strong>首先是怎么评估工作量？从旧的架构重构到新的架构，我们总共需要调整哪些代码？</strong>对此，我们可以通过ArchUnit、Dependencies依赖分析等工具将未来架构的设计转化成约束规则，对当前工程的代码进行扫描分析，这样我们就能得出重构需要处理的问题清单。</p><p><strong>第二个问题是怎么制定优先级？</strong>哪些代码先重构，哪些后重构？其实在实际的项目中，我们需要结合业务的迭代、组件影响面以及重构的复杂度来制定优先级。我们要优先挑选出没有在开发新功能的组件；其次再优先考虑重构功能组件和技术组件，因为这些组件是支持业务的基础；最后结合分析出的异常依赖数量评估业务组件重构的复杂度。</p><p><strong>最后一个问题是怎么进行度量？如何确定阶段性成果和最终成果？</strong>我们判断是否重构一个组件的标准是：ArchUnit的架构约束用例执行通过，或者Dependencies依赖分析的扫描没有识别出红色的警告。我们可以把这个标准作为验收一个组件是否完成解耦的标准，确保重构工作是按照新的架构设计进行的，并且落实到位，最终完成整个系统的重构。</p><p>下节课，我们将使用ArchUnit和Dependencies依赖分析，对Sharing项目进行架构分析，梳理出按未来架构设计需要处理的问题清单，作为后续架构重构落地的输入，敬请期待。</p><h2>思考题</h2><p>感谢你学完了今天的内容，今天的思考题是这样的：在你的项目中是如何进行架构的守护，防止代码腐化的？</p><p>欢迎你在留言区与我交流讨论，也欢迎你把它分享给你的同事或朋友，我们一起来高效、高质量交付软件！</p>","comments":[{"had_liked":false,"id":369042,"user_name":"zenk","can_delete":false,"product_type":"c1","uid":1013669,"ip_address":"上海","ucode":"B235D5EBCF49BC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/a5/c5ae871d.jpg","comment_is_top":false,"comment_ctime":1677041425,"is_pvip":false,"replies":[{"id":134431,"content":"Hi，zenk。如果这里指的是重构的优先级。通常情况下得结合业务需求的迭代情况以及本身组件的耦合情况来综合判定。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1677114023,"ip_address":"上海","comment_id":369042,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"老师，业务组件的优先级，是不是复杂度低的优先？\n\n我理解这样重构以后可能会降低复杂度高的业务组件","like_count":1,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606348,"discussion_content":"Hi，zenk。如果这里指的是重构的优先级。通常情况下得结合业务需求的迭代情况以及本身组件的耦合情况来综合判定。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677114023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371338,"user_name":"稻草人的忧桑","can_delete":false,"product_type":"c1","uid":1125998,"ip_address":"安徽","ucode":"00A65AB42DE44B","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/6e/05230eb6.jpg","comment_is_top":false,"comment_ctime":1679817829,"is_pvip":false,"replies":[{"id":135456,"content":"Hi，何敬。dependency分析工具主要是分析依赖的，如果想扫描单例可以考虑用其他的代码扫描工具。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1679886842,"ip_address":"广东","comment_id":371338,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"dependency的依赖分析，单例是不是分析不出来","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":610964,"discussion_content":"Hi，何敬。dependency分析工具主要是分析依赖的，如果想扫描单例可以考虑用其他的代码扫描工具。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679886842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1125998,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2e/6e/05230eb6.jpg","nickname":"稻草人的忧桑","note":"","ucode":"00A65AB42DE44B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":611377,"discussion_content":"kotlin文件的modularize用不了，怎么解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680061721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":610964,"ip_address":"浙江","group_id":0},"score":611377,"extra":""}]}]},{"had_liked":false,"id":370725,"user_name":"永远年轻","can_delete":false,"product_type":"c1","uid":1097653,"ip_address":"浙江","ucode":"349BF9EEB4FE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/bf/b5/a8db0572.jpg","comment_is_top":false,"comment_ctime":1679152926,"is_pvip":false,"replies":[{"id":135284,"content":"Hi，评论这里不好放截图。通常来说都是在IDE使用界面直接操作定义的。在.idea目录下会生成对应的配置文件。下面我贴一下示例。\n文件模块Scope定义：\n&lt;component name=&quot;DependencyValidationManager&quot;&gt;\n  &lt;scope name=&quot;file&quot; pattern=&quot;src[Sharing.app.main]:com.jkb.junbin.sharing.feature.file.*&quot; &#47;&gt;\n&lt;&#47;component&gt;\n约束规则：\n&lt;component name=&quot;DependencyValidationManager&quot;&gt;\n  &lt;state&gt;\n    &lt;deny_rule from_scope=&quot;file&quot; to_scope=&quot;message&quot; is_deny=&quot;true&quot; &#47;&gt;\n  &lt;&#47;state&gt;\n&lt;&#47;component&gt;","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1679275594,"ip_address":"广东","comment_id":370725,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"答案是使用 Dependency Validation 功能检查代码。具体来讲就是点击 Edit Rule，使用正则表达式配置约束条件，从而扫描代码中不符合规则的异常依赖。就像后面图里展示的这样，我们配置消息组件不能依赖文件和账户组件。\n======\n能详细讲下上述提到「正则表达式」吗","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609872,"discussion_content":"Hi，评论这里不好放截图。通常来说都是在IDE使用界面直接操作定义的。在.idea目录下会生成对应的配置文件。下面我贴一下示例。\n文件模块Scope定义：\n&lt;component name=&#34;DependencyValidationManager&#34;&gt;\n  &lt;scope name=&#34;file&#34; pattern=&#34;src[Sharing.app.main]:com.jkb.junbin.sharing.feature.file.*&#34; /&gt;\n&lt;/component&gt;\n约束规则：\n&lt;component name=&#34;DependencyValidationManager&#34;&gt;\n  &lt;state&gt;\n    &lt;deny_rule from_scope=&#34;file&#34; to_scope=&#34;message&#34; is_deny=&#34;true&#34; /&gt;\n  &lt;/state&gt;\n&lt;/component&gt;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679275594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369684,"user_name":"MrsLEO","can_delete":false,"product_type":"c1","uid":1331358,"ip_address":"广东","ucode":"6535EAAD1C6A7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/50/9e/f8d9c6cb.jpg","comment_is_top":false,"comment_ctime":1677810483,"is_pvip":false,"replies":[{"id":134786,"content":"Hi，MrsLEO。支持的，后续的重构改造也会有kotlin代码。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1677933460,"ip_address":"广东","comment_id":369684,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"archunit支持kotlin项目么","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607546,"discussion_content":"Hi，MrsLEO。支持的，后续的重构改造也会有kotlin代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677933460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369141,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"上海","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1677141483,"is_pvip":true,"replies":[{"id":134498,"content":"可以找到的，下一篇会有详细的使用介绍，你可以参考一下具体的用法。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1677204751,"ip_address":"广东","comment_id":369141,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"老师好，ArchUnit只能找到当前module的包吗，其他module可以找到吗","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606525,"discussion_content":"可以找到的，下一篇会有详细的使用介绍，你可以参考一下具体的用法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677204751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369021,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1677027489,"is_pvip":false,"replies":[{"id":134432,"content":"Hi，Peter。\nQ1：层和片对应的是ArchUnit里面的Layer 及slices的api，具体的用法可以查看官网的介绍，https:&#47;&#47;www.archunit.org&#47;use-cases。\nQ2：这里是对的，应该还有另外一个类的名字Y，感谢反馈。\nQ3：可以用于移动端。Jenkins只是一个构建的平台工具，与具体的语言及平台无关。\nQ4：在Dependencies扫描结果上有一个小扳手🔧的图标就是EditRule。\n期待你的再次留言🤝","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1677114541,"ip_address":"上海","comment_id":369021,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"请教老师几个问题：\nQ1：“层”、“片”是什么？\nArchUnit部分，提到“还可以检查包和类、层和片之间的依赖关系”，这里的“层”和“片”是什么？“层”可能是指分层，那么“片”是什么？\nQ2：类依赖分析API的例子中，为什么只有一个类的名字X？\n类依赖，必然有两个类，应该有两个名字，但此处为什么只有一个名字X？\nQ3：Jekens也能用于移动端吗？\n我了解一点后端，印象中Jekens是用于后端的，安卓端也可以用吗？\nQ4：找不到Dependency Validation.\nAS2021,code - Analyze code - Dependencies，没有找到配置规则的界面。文中说“点击EditRule”，但我这里没有发现。 我是win10下用AS2021，","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606350,"discussion_content":"Hi，Peter。\nQ1：层和片对应的是ArchUnit里面的Layer 及slices的api，具体的用法可以查看官网的介绍，https://www.archunit.org/use-cases。\nQ2：这里是对的，应该还有另外一个类的名字Y，感谢反馈。\nQ3：可以用于移动端。Jenkins只是一个构建的平台工具，与具体的语言及平台无关。\nQ4：在Dependencies扫描结果上有一个小扳手🔧的图标就是EditRule。\n期待你的再次留言🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677114541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373049,"user_name":"Geek_6061ea","can_delete":false,"product_type":"c1","uid":1124903,"ip_address":"北京","ucode":"5C017923512BE4","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/27/4c32c4ad.jpg","comment_is_top":false,"comment_ctime":1681969217,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"如果模块太多，添加了非常多的 xxx.xml 文件到 Scopes 文件夹下，这些 xml 都会展示在 Android Studio 最左边的 Project&#47;Android 切换菜单栏里面，影响每个同学切换 Project&#47;Android 的体验。有什么方法可以不展示在 Project&#47;Android 切换菜单栏吗？","like_count":0}]}