{"id":741031,"title":"第 9 章 安装RPM包或源码包","content":"\n<p>在Windows系统下安装软件很简单，只要双击后缀为.exe的文件，然后根据提示连续单击“下一步”按钮即可。然而在Linux系统下安装软件就没那么容易了，因为我们不是在图形界面下操作。所以，你必须学会如何在Linux下安装软件。</p>\n<p>前面我们多次提到了<code>yum</code>命令，它是Red Hat所特有的安装RPM程序包的工具。使用RPM工具安装某一个程序包时，有可能会因为该程序包依赖另一个程序包而无法安装；而使用yum工具时，就可以连同依赖的程序包也一起安装，很方便。在CentOS里使用yum工具是免费的，但在Red Hat里，使用yum工具需要付费。在介绍yum工具之前，我们先来了解一下RPM。</p>\n<h2 id=\"nav_point_140\">9.1 RPM工具</h2>\n<p>RPM是Red Hat Package Manager的缩写，由Red Hat公司开发。它是以一种数据库记录的方式将我们所需要的套件安装到Linux主机的一套管理程序。也就是说，你的Linux系统中存在着一个关于RPM的数据库，它记录了安装的包以及包与包之间的依赖关系。RPM包是预先在Linux机器上编译并打包的文件，安装非常快捷。但它也有一些缺点，比如安装环境必须要与编译时的环境一致或者相当、包与包之间存在着相互依赖的情况、卸载包时需要先把依赖的包卸载。如果依赖的包是系统所必需的，就不能卸载这个包，否则系统会崩溃。</p><!-- [[[read_end]]] -->\n<p>由于我们在安装CentOS 8时下载的ISO镜像文件为boot版，所以我们无法在该ISO镜像文件里找到RPM包。需要自己下载。</p>\n<p>每个RPM包的名称都被-和.分成了若干部分。比如在acl-2.2.53-1.el8.x86_64.rpm包中，acl为包名、2.2.53为版本信息、1.el8为发布版本号、x86_64为运行平台。常见的运行平台有i386、i586、i686和x86_64。需要注意的是，CPU目前分32位和64位，i386、i586和i686都为32位平台，x86_64则为64位平台。另外，有些RPM包并没有写具体的平台而是noarch（如adcli-doc-0.8.2-3.el8.noarch.rpm），这说明这个RPM包没有硬件平台限制。</p>\n<p>下面介绍一下RPM工具常用的命令。</p>\n<h3 id=\"nav_point_141\">9.1.1 安装RPM包</h3>\n<p>安装RPM包的命令如下：</p>\n<pre class=\"code-rows\"><code># yum install –y wget // 安装wget命令，wget为下载工具\n# wget http://mirrors.aliyun.com/centos/8/BaseOS/x86_64/os/Packages/at-3.1.20-11.el8.x86_64.rpm\n# rpm -ivh at-3.1.20-11.el8.x86_64.rpm\nVerifying... ################################# [100%]\n准备中... ################################# [100%]\n正在升级/安装...\n 1:at-3.1.20-11.el8 ################################# [100%]</code></pre>\n<p>其中各个选项的含义如下。</p>\n<ul>\n<li><strong><code>-i</code></strong>：表示安装。</li>\n<li><strong><code>-v</code></strong>：表示可视化。</li>\n<li><strong><code>-h</code></strong>：表示显示安装进度。</li>\n</ul>\n<p>当然，RPM工具也支持直接通过网络安装RPM包，如下所示：</p>\n<pre class=\"code-rows\"><code># rpm -ivh http://mirrors.aliyun.com/centos/8/BaseOS/x86_64/os/Packages/bc-1.07.1-5.el8.x86_64.rpm\n获取http://mirrors.aliyun.com/centos/8/BaseOS/x86_64/os/Packages/bc-1.07.1-5.el8.x86_64.rpm\nVerifying... ################################# [100%]\n准备中... ################################# [100%]\n正在升级/安装...\n 1:bc-1.07.1-5.el8 ################################# [100%]</code></pre>\n<p>另外，在安装RPM包时，常用的附带参数还包括如下几项。</p>\n<ul>\n<li><strong><code>--force</code></strong>：表示强制安装，即使覆盖属于其他包的文件也要安装。</li>\n<li><strong><code>--nodeps</code></strong>：表示当要安装的RPM包依赖于其他包时，即使其依赖他包没有安装，也要安装这个包。</li>\n</ul>\n<h3 id=\"nav_point_142\">9.1.2 升级RPM包</h3>\n<p>升级RPM包的命令为<code>rpm -Uvh filename</code>，其中<code>-U</code>选项表示升级。</p>\n<h3 id=\"nav_point_143\">9.1.3 卸载RPM包</h3>\n<p>卸载RPM包的命令为<code>rpm -e filename</code>，这里的<code>filename</code>是通过<code>rpm</code>的查询功能所查询到的，稍后会进行介绍。下面先查找一个已经安装的包，然后使用<code>-e</code>选项卸载它。示例命令如下：</p>\n<pre class=\"code-rows\"><code># rpm -qa at\nat-3.1.20-11.el8.x86_64\n# rpm -e at</code></pre>\n<p>卸载时，<code>-e</code>选项后面的<code>filename</code>和安装时是有区别的。安装时，是把一个存在的文件作为参数，而卸载时只需要包名即可。</p>\n<h3 id=\"nav_point_144\">9.1.4 查询一个包是否已安装</h3>\n<p>查询一个包的命令为<code>rpm -q RPM包名</code>，这里的“包名”是不带平台信息和后缀名的。示例命令如下：</p>\n<pre class=\"code-rows\"><code># rpm -q at\n未安装软件包 at\n# rpm -ivh at-3.1.20-11.el8.x86_64.rpm\nVerifying... ################################# [100%]\n准备中... ################################# [100%]\n正在升级/安装...\n 1:at-3.1.20-11.el8 ################################# [100%]\n# rpm -q at\nat-3.1.20-11.el8.x86_64</code></pre>\n<p>我们可以使用命令<code>rpm -qa</code>查询当前系统所有已安装的RPM包，限于篇幅，这里只列出前10个，如下所示：</p>\n<pre class=\"code-rows\"><code># rpm -qa |head\nlibevent-2.1.8-5.el8.x86_64\ngeolite2-city-20180605-1.el8.noarch\nrpm-plugin-selinux-4.14.2-25.el8.x86_64\ncentos-gpg-keys-8.1-1.1911.0.8.el8.noarch\npython3-unbound-1.7.3-8.el8.x86_64\nfilesystem-3.8-2.el8.x86_64\npython3-dateutil-2.6.1-6.el8.noarch\nncurses-base-6.1-7.20180224.el8.noarch\npython3-libselinux-2.9-2.1.el8.x86_64\nglibc-langpack-zh-2.28-72.el8.x86_64</code></pre>\n<h3 id=\"nav_point_145\">9.1.5 得到一个已安装的RPM包的相关信息</h3>\n<p>要得到一个已安装RPM包的相关信息，可以使用命令<code>rpm -qi 包名</code>，这里也不需要加平台信息和后缀名。示例命令如下：</p>\n<pre class=\"code-rows\"><code># # rpm -qi at\nName : at\nVersion : 3.1.20\nRelease : 11.el8\nArchitecture: x86_64\nInstall Date: 2020年02月06日 星期四 03时12分20秒\nGroup : System Environment/Daemons\nSize : 131790\nLicense : GPLv3+ and GPLv2+ and ISC and MIT and Public Domain\nSignature : RSA/SHA256, 2019年07月01日 星期一 16时40分54秒, Key ID 05b555b38483c65d\nSource RPM : at-3.1.20-11.el8.src.rpm\nBuild Date : 2019年05月11日 星期六 09时12分23秒\nBuild Host : x86-02.mbox.centos.org\nRelocations : (not relocatable)\nPackager : CentOS Buildsys &lt;bugs@centos.org&gt;\nVendor : CentOS\nURL : http://ftp.debian.org/debian/pool/main/a/at\nSummary : Job spooling tools\nDescription :\nAt and batch read commands from standard input or from a specified\nfile. At allows you to specify that a command will be run at a\nparticular time. Batch will execute commands when the system load\nlevels drop to a particular level. Both commands use user's shell.\n\nYou should install the at package if you need a utility for\ntime-oriented job control. Note: If it is a recurring job that will\nneed to be repeated at the same time every day/week, etc. you should\nuse crontab instead.</code></pre>\n<h3 id=\"nav_point_146\">9.1.6 列出一个RPM包的安装文件</h3>\n<p>列出一个RPM包的安装文件的命令为<code>rpm -ql 包名</code>，示例命令如下：</p>\n<pre class=\"code-rows\"><code># # rpm -ql at\n/etc/at.deny\n/etc/pam.d/atd\n/etc/sysconfig/atd\n/usr/bin/at\n/usr/bin/atq\n/usr/bin/atrm\n/usr/bin/batch\n/usr/lib/.build-id\n/usr/lib/.build-id/5b\n/usr/lib/.build-id/5b/62f43486550b03dd4fc8620421cdb5a191ddcf\n/usr/lib/.build-id/83\n/usr/lib/.build-id/83/49b3653cd2bee7e0d8c391862f7c0dd2de32c9\n/usr/lib/systemd/system/atd.service\n/usr/sbin/atd\n/usr/sbin/atrun\n/usr/share/doc/at\n/usr/share/doc/at/ChangeLog\n/usr/share/doc/at/README\n/usr/share/doc/at/timespec\n/usr/share/licenses/at\n/usr/share/licenses/at/COPYING\n/usr/share/licenses/at/Copyright\n/usr/share/man/man1/at.1.gz\n/usr/share/man/man1/atq.1.gz\n/usr/share/man/man1/atrm.1.gz\n/usr/share/man/man1/batch.1.gz\n/usr/share/man/man5/at.allow.5.gz\n/usr/share/man/man5/at.deny.5.gz\n/usr/share/man/man8/atd.8.gz\n/usr/share/man/man8/atrun.8.gz\n/var/spool/at\n/var/spool/at/.SEQ\n/var/spool/at/spool</code></pre>\n<p>通过上面的命令可以看出，文件 /usr/sbin/atrun是通过安装at这个RPM包得来的。那么，如何通过文件去查找它的RPM包呢？</p>\n<h3 id=\"nav_point_147\">9.1.7 列出某个文件属于哪个RPM包</h3>\n<p>列出某个文件属于哪个RPM包的命令为<code>rpm -qf 文件的绝对路径</code>，示例命令如下：</p>\n<pre class=\"code-rows\"><code># rpm -qf /usr/sbin/atrun\nat-3.1.20-11.el8.x86_64</code></pre>\n<h2 id=\"nav_point_148\">9.2 yum工具</h2>\n<p>如果你使用的Linux系统支持yum工具，那么使用该工具比使用RPM工具更加方便。yum工具最大的优势在于可以联网去下载所需要的RPM包，然后自动安装。如果要安装的RPM包有依赖关系，yum工具会帮我们依次安装所有相关的RPM包。下面阿铭介绍一下常用的<code>yum</code>命令。</p>\n<h3 id=\"nav_point_149\">9.2.1 列出所有可用的RPM包</h3>\n<p>使用<code>yum list</code>命令，可以列出所有的RPM包资源，如下所示：</p>\n<pre class=\"code-rows\"><code># yum list |head -20\n上次元数据过期检查：0:18:34 前，执行于 2020年02月06日 星期四 02时56分59秒。\n已安装的软件包\nNetworkManager.x86_64 1:1.20.0-3.el8 @anaconda\nNetworkManager-libnm.x86_64 1:1.20.0-3.el8 @anaconda\nNetworkManager-team.x86_64 1:1.20.0-3.el8 @anaconda\nNetworkManager-tui.x86_64 1:1.20.0-3.el8 @anaconda\nacl.x86_64 2.2.53-1.el8 @anaconda\nat.x86_64 3.1.20-11.el8 @System\naudit.x86_64 3.0-0.10.20180831git0047a6c.el8 @anaconda\naudit-libs.x86_64 3.0-0.10.20180831git0047a6c.el8 @anaconda\nauthselect.x86_64 1.1-2.el8 @anaconda\nauthselect-libs.x86_64 1.1-2.el8 @anaconda\nbasesystem.noarch 11-5.el8 @anaconda\nbash.x86_64 4.4.19-10.el8 @anaconda\nbc.x86_64 1.07.1-5.el8 @System\nbind-export-libs.x86_64 32:9.11.4-26.P2.el8 @anaconda\nbiosdevname.x86_64 0.7.3-2.el8 @anaconda\nbrotli.x86_64 1.0.6-1.el8 @anaconda\nbzip2-libs.x86_64 1.0.6-26.el8 @anaconda\nc-ares.x86_64 1.13.0-5.el8 @anaconda</code></pre>\n<p>限于篇幅，阿铭只列举了18个RPM包的信息。如上例所示，最左侧是RPM包名，中间是版本信息，最右侧是安装信息。如果已安装，最右侧就显示<code>@AppStream</code>或者<code>@ anaconda</code>，它们前面都会有一个 @ 符号，这很好区分。如果未安装，则显示<code>AppStream</code>、<code>BaseOS</code>。如果你仔细看看，就会发现<code>yum list</code>命令会先列出已安装的包（installed package），然后再列出可安装的包（available package）。</p>\n<h3 id=\"nav_point_150\">9.2.2 搜索RPM包</h3>\n<p>搜索RPM包的命令为<code>yum search [相关关键词]</code>，示例命令如下：</p>\n<pre class=\"code-rows\"><code># yum search vim\n上次元数据过期检查：0:25:30 前，执行于 2020年02月06日 星期四 02时56分59秒。\n============================== 名称 和 概况 匹配：vim =================================\nvim-filesystem.noarch : VIM filesystem layout\nvim-minimal.x86_64 : A minimal version of the VIM editor\nvim-minimal.x86_64 : A minimal version of the VIM editor\nvim-common.x86_64 : The common files needed by any version of the VIM editor\nvim-X11.x86_64 : The VIM version of the vi editor for the X Window System - GVim\nvim-enhanced.x86_64 : A version of the VIM editor which includes recent enhancements</code></pre>\n<p>除了这样的搜索方法外，阿铭还常通过<code>grep</code>来过滤，从而找到相应的RPM包，如下所示：</p>\n<pre class=\"code-rows\"><code># yum list |grep vim\nvim-common.x86_64 2:8.0.1763-13.el8 @AppStream\nvim-enhanced.x86_64 2:8.0.1763-13.el8 @AppStream\nvim-filesystem.noarch 2:8.0.1763-13.el8 @AppStream\nvim-minimal.x86_64 2:8.0.1763-13.el8 @anaconda\nvim-X11.x86_64 2:8.0.1763-13.el8 AppStream</code></pre>\n<h3 id=\"nav_point_151\">9.2.3 安装RPM包</h3>\n<p>安装RPM包的命令为<code>yum install [-y] [RPM包名]</code>，如果不加<code>-y</code>选项，则会以与用户交互的方式安装。示例命令如下：</p>\n<pre class=\"code-rows\"><code># # yum install -y psmisc\n上次元数据过期检查：0:30:11 前，执行于 2020年02月06日 星期四 02时56分59秒。\n依赖关系解决。\n==================================================================================\n 软件包 架构 版本 仓库 大小\n==================================================================================\n安装:\n psmisc x86_64 23.1-3.el8 BaseOS 151 k\n\n事务概要\n==================================================================================安装 1 软件包\n\n总下载：151 k\n安装大小：487 k\n下载软件包：\npsmisc-23.1-3.el8.x86_64.rpm 420 kB/s | 151 kB 00:00\n----------------------------------------------------------------------------------\n总计 101 kB/s | 151 kB 00:01\n运行事务检查\n事务检查成功。\n运行事务测试\n事务测试成功。\n运行事务\n 准备中 : 1/1\n 安装 : psmisc-23.1-3.el8.x86_64 1/1\n 运行脚本: psmisc-23.1-3.el8.x86_64 1/1\n 验证 : psmisc-23.1-3.el8.x86_64 1/1\n\n已安装:\n psmisc-23.1-3.el8.x86_64\n\n完毕！</code></pre>\n<p>在这个过程中，首先会把需要安装的RPM包列出来，如果有依赖关系，也会把所有依赖的包列出来。然后询问用户是否需要安装，输入y则安装，输入n则不安装。但阿铭觉得这样太麻烦，所以会直接加上<code>-y</code>选项，这样就省略了询问用户是否安装的那一步。</p>\n<h3 id=\"nav_point_152\">9.2.4 卸载RPM包</h3>\n<p>卸载RPM包的命令为<code>yum remove [-y] [RPM包名]</code>，示例命令如下：</p>\n<pre class=\"code-rows\"><code># yum remove psmisc\n依赖关系解决\n\n================================================================================\n 软件包 架构 版本 仓库 大小\n================================================================================\n移除::\n psmisc x86_64 23.1-3.el8 @BaseOS 487k\n\n事务概要\n================================================================================\n移除 1 软件包\n\n将会释放空间：487 k\n确定吗？[y/N]： y\n运行事务检查\n事务检查成功。\n运行事务测试\n事务测试成功。\n运行事务\n 准备中 : 1/1\n 删除 : psmisc-23.1-3.el8.x86_64 1/1\n 运行脚本: psmisc-23.1-3.el8.x86_64 1/1\n 验证 : psmisc-23.1-3.el8.x86_64 1/1\n\n已移除:\n psmisc-23.1-3.el8.x86_64\n\n完毕！</code></pre>\n<p>卸载和安装一样，也可以直接加上<code>-y</code>选项，从而省略与用户交互的那一步。这里阿铭需要提醒一下，卸载某个RPM包时一定要看清楚，不要连其他重要的RPM包也一起卸载了，以免影响正常的业务，所以使用<code>yum remove</code>命令卸载包时，还是不要加<code>-y</code>选项了。</p>\n<h3 id=\"nav_point_153\">9.2.5 升级RPM包</h3>\n<p>升级RPM包的命令为<code>yum update [-y] [RPM包]</code>，示例命令如下：</p>\n<pre class=\"code-rows\"><code># yum update bash\n上次元数据过期检查：0:37:08 前，执行于 2020年02月06日 星期四 02时56分59秒。\n依赖关系解决。\n无须任何处理。\n完毕！</code></pre>\n<p>只不过阿铭的系统目前没有任何可以升级的RPM包。前面介绍了如何使用yum工具搜索、安装、卸载以及升级RPM包，如果你掌握了这些技能，基本上就可以解决日常工作中遇到的与RPM包相关的问题了。当然，yum工具还有好多其他好用的命令，阿铭不再一一举出，如果你感兴趣，可以使用<code>man</code>命令查阅帮助信息。除此之外，阿铭还会教你一些关于yum工具的小应用。</p>\n<h3 id=\"nav_point_154\">9.2.6 更改yum仓库为国内镜像站</h3>\n<p>上面也提到，yum是从网络获取RPM包的，那么它是去哪里下载的RPM包呢？大家可以通过查看配置文件/etc/yum.repos.d/CentOS-Base.repo获得下载地址：</p>\n<pre class=\"code-rows\"><code># cat /etc/yum.repos.d/CentOS-Base.repo\n# CentOS-Base.repo\n#\n# The mirror system uses the connecting IP address of the client and the\n# update status of each mirror to pick mirrors that are updated to and\n# geographically close to the client. You should use this for CentOS updates\n# unless you are manually picking other mirrors.\n#\n# If the mirrorlist= does not work for you, as a fall back you can try the\n# remarked out baseurl= line instead.\n#\n#\n\n[BaseOS]\nname=CentOS-$releasever - Base\nmirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=BaseOS&amp;infra=$infra\n#baseurl=http://mirror.centos.org/$contentdir/$releasever/BaseOS/$basearch/os/\ngpgcheck=1\nenabled=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</code></pre>\n<p>这里的mirrorlist.centos.org为下载RPM的地址，该站点在国外，相对来说访问比较慢，我们可以将其更改为国内的镜像站点，比如阿里云的，具体方法如下。</p>\n<p>(1) 更改/etc/yum.repos.d/CentOS-Base.repo文件：</p>\n<pre class=\"code-rows\"><code># vim /etc/yum.repos.d/CentOS-Base.repo //改为如下内容\n[BaseOS]\nname=CentOS-$releasever - Base\nbaseurl=http://mirrors.aliyun.com/centos/$releasever/BaseOS/$basearch/os/\ngpgcheck=1\nenabled=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</code></pre>\n<p>(2) 更改/etc/yum.repos.d/CentOS-AppStream.repo文件：</p>\n<pre class=\"code-rows\"><code># vim /etc/yum.repos.d/CentOS-AppStream.repo // 改为如下内容\n[AppStream]\nname=CentOS-$releasever - AppStream\nbaseurl=http://mirrors.aliyun.com/centos/$releasever/AppStream/$basearch/os/\ngpgcheck=1\nenabled=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</code></pre>\n<p>(3) 刷新repos生成缓存，命令如下所示：</p>\n<pre class=\"code-rows\"><code># yum clean all\n# yum makecache</code></pre>\n<p>然后就可以使用<code>yum</code>命令安装所需要的软件包了，比如我们可以安装一个tftp的RPM包，命令如下所示：</p>\n<pre class=\"code-rows\"><code># yum install –y tftp</code></pre>\n<h3 id=\"nav_point_155\">9.2.7 利用yum工具下载RPM包</h3>\n<p>有时我们需要下载RPM包但不安装，而仅仅是复制给其他机器使用。其实，通过yum安装RPM包时，它需要先下载这个RPM包，然后再去安装，所以使用yum工具完全可以做到只下载而不安装。</p>\n<p>首先需要安装一个yum的工具：</p>\n<pre class=\"code-rows\"><code># yum install -y yum-utils</code></pre>\n<p>然后使用<code>yumdownloader</code>命令就可以直接下载RPM包了，它会将RPM包下载到当前目录下，当然如果不指定任何选项，它会只下载指定的RPM包，而不下载依赖的包。要想连同依赖的包一起下载，还需要指定<code>--resolve</code>选项，命令如下：</p>\n<pre class=\"code-rows\"><code># mkdir /tmp/rmps\n# cd /tmp/rmps\n# yumdownloader --resolve zlib-devel\n上次元数据过期检查：0:02:01 前，执行于 2020年02月06日 星期四 05时59分10秒。\n(1/8): libpkgconf-1.4.2-1.el8.x86_64.rpm 106 kB/s | 35 kB 00:00\n(2/8): pkgconf-m4-1.4.2-1.el8.noarch.rpm 234 kB/s | 17 kB 00:00\n(3/8): pkgconf-1.4.2-1.el8.x86_64.rpm 93 kB/s | 38 kB 00:00\n(4/8): zlib-1.2.11-10.el8.i686.rpm 795 kB/s | 103 kB 00:00\n(5/8): pkgconf-pkg-config-1.4.2-1.el8.x86_64.rpm 107 kB/s | 15 kB 00:00\n(6/8): zlib-devel-1.2.11-10.el8.i686.rpm 324 kB/s | 56 kB 00:00\n(7/8): zlib-devel-1.2.11-10.el8.x86_64.rpm 326 kB/s | 56 kB 00:00\n(8/8): glibc32-2.28-42.1.el8.x86_64.rpm 1.8 MB/s | 1.5 MB 00:00\n# ls\nglibc32-2.28-42.1.el8.x86_64.rpm pkgconf-m4-1.4.2-1.el8.noarch.rpm zlib-devel-1.2.11-10.el8.i686.rpm\nlibpkgconf-1.4.2-1.el8.x86_64.rpm pkgconf-pkg-config-1.4.2-1.el8.x86_64.rpm zlib-devel-1.2.11-10.el8.x86_64.rpm\npkgconf-1.4.2-1.el8.x86_64.rpm zlib-1.2.11-10.el8.i686.rpm</code></pre>\n<h2 id=\"nav_point_156\">9.3 安装源码包</h2>\n<p>在Linux下安装源码包是最常用的。在日常的管理工作中，阿铭的大部分软件都是通过源码安装的。安装源码包需要我们把源代码编译成可执行的二进制文件。如果你能读懂这些源代码，就可以修改其中的自定义功能，然后再按自己的需求编译。使用源码包除了可以自定义修改源代码外，还可以定制相关的功能，因为源码包在编译时可以附加额外的选项。</p>\n<p>源码包的编译用到了Linux系统里的编译器。常见的源码包一般都是用C语言开发的，因为C语言是Linux上最标准的程序语言。Linux上的C语言编译器称为gcc，利用它可以把C语言编译成可执行的二进制文件。所以，如果你的机器上没有安装gcc，就无法编译源码，你可以使用命令<code>yum install -y gcc</code>来安装gcc。</p>\n<p>安装源码包通常需要以下3个步骤。</p>\n<p>(1) <strong><code>./configure</code></strong>。这一步可以定制功能，加上相应的选项即可，具体有什么选项可以通过命令<code>./configure --help</code>来查看。这一步会自动检测你的Linux系统与相关的套件是否有编译该源码包时所需要的库，因为一旦缺少某个库，就不能完成编译。只有检测通过后，才会生成Makefile文件。</p>\n<p>(2) <strong><code>make</code></strong>。使用这个命令，会根据Makefile文件中预设的参数进行编译，这一步其实就是gcc在工作。</p>\n<p>(3) <strong><code>make install</code></strong>。这一步是安装步骤，用于创建相关软件的存放目录和配置文件。</p>\n<p>对于以上这3个步骤，并不是所有的源码包软件都一样，也就是说，源码包的安装并没有标准的安装步骤。这就需要你拿到源码包解压后，进入目录，找到相关的帮助文档（通常，会以INSTALL或者README为文件名）。下面阿铭会编译安装一个源码包来帮助你更深刻地理解安装源码包的过程。</p>\n<h3 id=\"nav_point_157\">9.3.1 下载源码包</h3>\n<p>下载源码包一定要去官方站点，因为你从其他网站下载的源码包很有可能是被修改过的。我们先把Nginx的源码包下载到 /usr/local/src/ 目录下，命令如下所示：</p>\n<pre class=\"code-rows\"><code># cd /usr/local/src/\n# wget http://nginx.org/download/nginx-1.17.8.tar.gz`</code></pre>\n<p>`在下载之前，阿铭先进入 /usr/local/src目录，这是因为阿铭习惯把源码包都放到这个目录下。这样做的好处是方便自己和其他管理员维护。所以，阿铭建议你将下载的源码包都统一放到这个目录下。</p>\n<h3 id=\"nav_point_158\">9.3.2 解压源码包</h3>\n<p>解压 .tar.gz格式的压缩包，这在前面已经介绍过，示例命令如下：</p>\n<pre class=\"code-rows\"><code># tar -zxvf nginx-1.17.8.tar.gz</code></pre>\n<h3 id=\"nav_point_159\">9.3.3 配置相关的选项并生成Makefile</h3>\n<p>首先，进入解压后的源码目录，在配置之前可以查看可用的配置参数，如下所示：</p>\n<pre class=\"code-rows\"><code># cd nginx-1.17.8\n# ./configure --help |less\n--help print this message\n\n --prefix=PATH set installation prefix\n --sbin-path=PATH set nginx binary pathname\n --modules-path=PATH set modules path\n --conf-path=PATH set nginx.conf pathname\n --error-log-path=PATH set error log pathname\n --pid-path=PATH set nginx.pid pathname\n --lock-path=PATH set nginx.lock pathname\n\n --user=USER set non-privileged user for\n worker processes\n --group=GROUP set non-privileged group for\n worker processes</code></pre>\n<p>限于篇幅，后面的内容阿铭省略了。常用的配置选项有<code>--prefix=PREFIX</code>，它的意思是定义软件包的安装路径。如果你想了解其他配置选项，也可以使用命令<code>./configure --help</code>查看详情。这里阿铭把Nginx安装在 /usr/local/nginx目录下，该选项的配置为<code>--prefix=/usr/local/nginx</code>。配置过程如下所示：</p>\n<pre class=\"code-rows\"><code># ./configure --prefix=/usr/local/nginx\nchecking for OS\n + Linux 4.18.0-147.3.1.el8_1.x86_64 x86_64\nchecking for C compiler ... found\n + using GNU C compiler\n + gcc version: 8.3.1 20190507 (Red Hat 8.3.1-4) (GCC)\nchecking for gcc -pipe switch ... found\nchecking for -Wl,-E switch ... found\nchecking for gcc builtin atomic operations ... found\nchecking for C99 variadic macros ... found\nchecking for gcc variadic macros ... found\nchecking for gcc builtin 64 bit byteswap ... found\nchecking for unistd.h ... found\nchecking for inttypes.h ... found\nchecking for limits.h ... found\n中间省略\n\n./configure: error: the HTTP rewrite module requires the PCRE library.\nYou can either disable the module by using --without-http_rewrite_module\noption, or install the PCRE library into the system, or build the PCRE library\nstatically from the source with nginx by using --with-pcre=&lt;path&gt; option.</code></pre>\n<p>不幸的是配置刚开始就报错了，因为Nginx需要pcre库，该系统并未安装。安装命令如下：</p>\n<pre class=\"code-rows\"><code># yum install -y pcre-devel</code></pre>\n<p>安装后再继续上面的步骤，如下所示：</p>\n<pre class=\"code-rows\"><code># ./configure --prefix=/usr/local/nginx // 有诸多信息输入，阿铭不再提供</code></pre>\n<p>此时又有新的错误：</p>\n<pre class=\"code-rows\"><code>./configure: error: the HTTP gzip module requires the zlib library.\nYou can either disable the module by using --without-http_gzip_module\noption, or install the zlib library into the system, or build the zlib library\nstatically from the source with nginx by using --with-zlib=&lt;path&gt; option.</code></pre>\n<p>根据提示，很容易解决此问题，安装zlib即可：</p>\n<pre class=\"code-rows\"><code># yum install -y zlib-devel</code></pre>\n<p>然后继续 ./configure那一步，最终通过，验证这一步是否成功的命令是：</p>\n<pre class=\"code-rows\"><code># echo $?\n0</code></pre>\n<p>这里返回值是0，说明执行成功，否则就没有成功。此时就成功生成Makefile了。查看结果如下：</p>\n<pre class=\"code-rows\"><code># ls -l Makefile\n-rw-r--r--. 1 root root 376 2月 6 06:16 Makefile</code></pre>\n<h3 id=\"nav_point_160\">9.3.4 进行编译</h3>\n<p>生成Makefile后，需要进行编译，如下所示：</p>\n<pre class=\"code-rows\"><code># make\n-bash: make: 未找到命令\n说明：这是因为我们的系统还未安装make命令，安装即可\n# yum install –y make\n# make\n# make\nmake -f objs/Makefile\nmake[1]: 进入目录“/usr/local/src/nginx-1.17.8”\ncc -c -pipe -O -W -Wall -Wpointer-arith -Wno-unused-parameter -Werror -g -I src/core -I src/event -I src/event/modules -I src/os/unix -I objs \\\n -o objs/src/core/nginx.o \\\n src/core/nginx.c\ncc -c -pipe -O -W -Wall -Wpointer-arith -Wno-unused-parameter -Werror -g -I src/core -I src/event -I src/event/modules -I src/os/unix -I objs \\</code></pre>\n<p>编译时会出现类似这样杂乱的信息。限于篇幅，阿铭只列出一小部分内容。编译的时间会比较长，这是因为CPU高速计算时的使用率很高。编译后再使用命令<code>echo $?</code>验证是否编译成功，如下所示：</p>\n<pre class=\"code-rows\"><code># echo $?\n0</code></pre>\n<p>如果验证结果是0，就可以执行最后一步了。</p>\n<h3 id=\"nav_point_161\">9.3.5 安装</h3>\n<p>安装源码包的命令为<code>make install</code>，如下所示：</p>\n<pre class=\"code-rows\"><code># make install\nmake -f objs/Makefile install\nmake[1]: 进入目录“/usr/local/src/nginx-1.17.8”\ntest -d '/usr/local/nginx' || mkdir -p '/usr/local/nginx'\ntest -d '/usr/local/nginx/sbin' \\\n || mkdir -p '/usr/local/nginx/sbin'\ntest ! -f '/usr/local/nginx/sbin/nginx' \\\n || mv '/usr/local/nginx/sbin/nginx' \\\n '/usr/local/nginx/sbin/nginx.old'\ncp objs/nginx '/usr/local/nginx/sbin/nginx'\ntest -d '/usr/local/nginx/conf' \\\n || mkdir -p '/usr/local/nginx/conf'\ncp conf/koi-win '/usr/local/nginx/conf'\ncp conf/koi-utf '/usr/local/nginx/conf'\ncp conf/win-utf '/usr/local/nginx/conf'</code></pre>\n<p>当然，你也可以使用命令<code>echo $?</code>验证是否已正确安装。执行完这一步，则会在 /usr/local/nginx目录下增加很多目录。使用<code>ls</code>命令查看该目录，如下所示：</p>\n<pre class=\"code-rows\"><code># ls /usr/local/nginx/\nconf html logs sbin</code></pre>\n<p>到此，Nginx源码的安装就完成了。其实在日常的源码安装过程中，遇到错误不能完成安装的情况很多，这些错误通常是因为缺少某一个库文件。这需要你仔细琢磨报错信息或者查看当前目录下的config.log以得到相关的信息。如果你实在不能解决，请联系阿铭。</p>\n<h2 id=\"nav_point_162\">9.4 课后习题</h2>\n<p>(1) 区分<code>rpm</code>与<code>-qi</code>、<code>-qf</code>、<code>-ql</code>和<code>-qa</code>这4个不同选项组合的作用。</p>\n<p>(2) <code>rpm -qi</code>后面如果跟一个未安装的包名，会显示什么信息？</p>\n<p>(3) <code>vim</code>命令是由哪个RPM包安装来的？</p>\n<p>(4) 使用RPM工具安装和卸载某个包的命令是什么？</p>\n<p>(5) 当安装某个有依赖关系的RPM包时，如何忽略依赖关系，强制安装该包？</p>\n<p>(6) 如何使用RPM工具升级包？</p>\n<p>(7) 请使用yum工具搜索包含关键词tidy的RPM包并安装，安装后再使用yum工具将其卸载。</p>\n<p>(8) 如何使用yum工具来下载RPM包？</p>\n<p>(9) 请到PHP的官方网站下载PHP的源码包，并动手试试编译安装它。</p>\n<p>(10) 查资料指出<code>yum upgrade</code>与<code>yum update</code>的区别，它们在什么情况下使用？</p>\n<p>(11) 如何查看Linux系统中（CentOS）是否安装过某个包？</p>\n<p>(12) ./configure完成后，我们并不知道有没有成功，用什么命令可以验证呢？</p>\n<p>(13) 如果在./configure这一步出现这样的错误：configure: error: no acceptable C compiler found in $PATH，我们该怎么办？</p>\n<p>(14) 有时你会忘记某个编译参数是如何写的，你怎么办？</p>\n<p>(15) 查资料使用iso镜像文件或者系统安装盘构建yum仓库。</p>\n\n<br style=\"page-break-after:always\" />","comments":[{"had_liked":false,"id":387044,"user_name":"王云峰","can_delete":false,"product_type":"c1","uid":1421980,"ip_address":"浙江","ucode":"699E46BE31495B","user_header":"https://static001.geekbang.org/account/avatar/00/15/b2/9c/b7b9896c.jpg","comment_is_top":false,"comment_ctime":1706259411,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100636611,"comment_content":"我把服务器的apm 和yum都卸载了，怎么搞","like_count":0}]}