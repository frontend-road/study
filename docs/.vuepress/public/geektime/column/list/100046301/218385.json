{"id":218385,"title":"18 | 可伸缩架构案例：数据太多，如何无限扩展你的数据库？","content":"<p>你好，我是王庆友。在<a href=\"https://time.geekbang.org/column/article/217152\">第16讲</a>中，我和你介绍了很多可伸缩的架构策略和原则。那么今天，我会通过1号店订单水平分库的实际案例，和你具体介绍如何实现系统的可伸缩。</p><h2>问题和解决思路</h2><p>2013年，随着1号店业务的发展，每日的订单量接近100万。这个时候，订单库已有上亿条记录，订单表有上百个字段，这些数据存储在一个Oracle数据库里。当时，我们已经实现了订单的服务化改造，只有订单服务才能访问这个订单数据库，但随着单量的增长以及在线促销的常态化，单一数据库的存储容量和访问性能都已经不能满足业务需求了，订单数据库已成为系统的瓶颈。所以，对这个数据库的拆分势在必行。</p><p>数据库拆分一般有两种做法，一个是垂直分库，还有一个是水平分库。</p><ul>\n<li><strong>垂直分库</strong></li>\n</ul><p>简单来说，垂直分库就是数据库里的表太多，我们把它们分散到多个数据库，一般是根据业务进行划分，把关系密切的表放在同一个数据库里，这个改造相对比较简单。</p><ul>\n<li><strong>水平分库</strong></li>\n</ul><p>某些表太大，单个数据库存储不下，或者数据库的读写性能有压力。通过水平分库，我们把一张表拆成多张表，每张表存放部分记录，分别保存在不同的数据库里，水平分库需要对应用做比较大的改造。</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/81/6a414d387a08a6dc291c3a3a9e763c81.jpg?wh=2284*1280\" alt=\"\"></p><p>当时，1号店已经通过服务化，实现了订单库的<strong>垂直拆分</strong>，它的订单库主要包括订单基本信息表、订单商品明细表、订单扩展表。这里的问题不是表的数量太多，而是单表的数据量太大，读写性能差。所以，1号店通过<strong>水平分库</strong>，把这3张表的记录分到多个数据库当中，从而分散了数据库的存储和性能压力。</p><!-- [[[read_end]]] --><p>水平分库后，应用通过订单服务来访问多个订单数据库，具体的方式如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/7c/9f/7cf1df5c241cd515d5e89456d2a7f39f.jpg?wh=2284*1580\" alt=\"\"></p><p>原来的一个Oracle库被现在的多个MySQL库给取代了，每个MySQL数据库包括了1主1备2从，都支持读写分离，主备之间通过自带的同步机制来实现数据同步。所以，你可以发现，<strong>这个项目实际包含了水平分库和去Oracle两大改造目标。</strong></p><h2>分库策略</h2><p>我们先来讨论一下水平分库的具体策略，包括要选择哪个分库维度，数据记录如何划分，以及要分为几个数据库。</p><h3>分库维度怎么定？</h3><p>首先，我们需要考虑根据哪个字段来作为分库的维度。</p><p>这个字段选择的标准是，尽量避免应用代码和SQL性能受到影响。具体地说，就是现有的SQL在分库后，它的访问尽量落在单个数据库里，否则原来的单库访问就变成了多库扫描，不但SQL的性能会受到影响，而且相应的代码也需要进行改造。</p><p>具体到订单数据库的拆分，你可能首先会想到按照<strong>用户ID</strong>来进行拆分。这个结论是没错，但我们最好还是要有量化的数据支持，不能拍脑袋。</p><p>这里，最好的做法是，先收集所有SQL，挑选出WHERE语句中最常出现的过滤字段，比如说这里有三个候选对象，分别是用户ID、订单ID和商家ID，每个字段在SQL中都会出现三种情况：</p><ol>\n<li>单ID过滤，比如说“用户ID=？”；</li>\n<li>多ID过滤，比如“用户ID IN(?,?,?)”；</li>\n<li>该ID不出现。</li>\n</ol><p>最后，我们分别统计这三个字段的使用情况，假设共有500个SQL访问订单库，3个候选字段出现的情况如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/26/9a/26480ace17c1629c24f5881f65f2fa9a.jpg?wh=2284*1160\" alt=\"\"></p><p>从这张表来看，结论非常明显，我们应该选择用户ID来进行分库。</p><p>不过，等一等，这<strong>只是静态分析</strong>。我们知道，每个SQL访问的频率是不一样的，所以，我们还要分析每个SQL的实际访问量。</p><p>在项目中，我们分析了Top15执行次数最多的SQL （它们占总执行次数85%，具有足够代表性），按照执行的次数，如果使用用户ID进行分库，这些SQL 85%会落到单个数据库，13%落到多个数据库，只有2%需要遍历所有的数据库。所以说，<strong>从SQL动态执行次数的角度来看</strong>，用户ID分库也明显优于使用其他两个ID进行分库。</p><p>这样，通过前面的量化分析，我们知道按照用户ID分库是最优的选择，同时也大致知道了分库对现有系统会造成多大影响。比如在这个例子中，85%的SQL会落到单个数据库，那么这部分的数据访问相对于不分库来说，执行性能会得到一定的优化，这样也解决了我们之前对分库是否有效果的疑问，坚定了分库的信心。</p><h3>数据怎么分？</h3><p>好，分库维度确定了以后，我们如何把记录分到各个库里呢？</p><p>一般有两种数据分法：</p><ol>\n<li><strong>根据ID范围进行分库</strong>，比如把用户ID为1 ~ 999的记录分到第一个库，1000 ~ 1999的分到第二个库，以此类推。</li>\n<li><strong>根据ID取模进行分库</strong>，比如把用户ID mod 10，余数为0的记录放到第一个库，余数为1的放到第二个库，以此类推。</li>\n</ol><p>这两种分法，各自存在优缺点，如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/81/3bf9fb5fb9e1569cf4478c493c02f081.jpg?wh=2284*1980\" alt=\"\"></p><p>在实践中，为了运维方便，选择ID取模进行分库的做法比较多。同时为了数据迁移方便，一般分库的数量是按照倍数增加的，比如说，一开始是4个库，二次分裂为8个，再分成16个。这样对于某个库的数据，在分裂的时候，一半数据会移到新库，剩余的可以不用动。与此相反，如果我们每次只增加一个库，所有记录都要按照新的模数做调整。</p><p>在这个项目中，我们结合订单数据的实际情况，最后采用的是<strong><span class=\"orange\">取模</span></strong>的方式来拆分记录。</p><p><span class=\"reference\"><strong>补充说明：</strong>按照取模进行分库，每个库记录数一般比较均匀，但也有些数据库，存在超级ID，这些ID的记录远远超过其他ID。比如在广告场景下，某个大广告主的广告数可能占很大比例。如果按照广告主ID取模进行分库，某些库的记录数会特别多，对于这些超级ID，需要提供单独库来存储记录。</span></p><h3>分几个库？</h3><p>现在，我们确定了记录要怎么分，但具体要分成几个数据库呢？</p><p>分库数量，首先和<strong>单库能处理的记录数</strong>有关。一般来说，MySQL单库超过了5000万条记录，Oracle单库超过了1亿条记录，DB的压力就很大（当然这也和字段数量、字段长度和查询模式有关系）。</p><p>在满足前面记录数量限制的前提下，如果分库的数量太少，我们达不到分散存储和减轻DB性能压力的目的；如果分库的数量太多，好处是单库访问性能好，但对于跨多个库的访问，应用程序需要同时访问多个库，如果我们并发地访问所有数据库，就意味着要消耗更多的线程资源；如果是串行的访问模式，执行的时间会大大地增加。</p><p>另外，分库数量还直接影响了<strong>硬件的投入</strong>，多一个库，就意味着要多投入硬件设备。所以，具体分多少个库，需要做一个综合评估，一般初次分库，我建议你分成4~8个库。在项目中，我们拆分为了6个数据库，这样可以满足较长一段时间的订单业务需求。</p><h2>分库带来的问题</h2><p>不过水平分库解决了单个数据库容量和性能瓶颈的同时，也给我们带来了一系列新的问题，包括数据库路由、分页以及字段映射的问题。</p><h3>分库路由</h3><p>分库从某种意义上来说，意味着DB Schema改变了，必然会影响应用，但这种改变和业务无关，所以我们要尽量保证分库相关的逻辑都在数据访问层进行处理，对上层的订单服务透明，服务代码无需改造。</p><p>当然，要完全做到这一点会很困难。那么具体哪些改动应该由DAL（数据访问层）负责，哪些由订单服务负责，这里我给你一些可行的建议：</p><ul>\n<li>对于<strong>单库访问</strong>，比如查询条件已经指定了用户ID，那么该SQL只需访问特定库即可。此时应该由DAL层自动路由到特定库，当库二次分裂时，我们也只需要修改取模因子就可以了，应用代码不会受到影响。</li>\n<li>对于<strong>简单的多库查询</strong>，DAL层负责汇总各个分库返回的记录，此时它仍对上层应用透明。</li>\n<li>对于<strong>带聚合运算的多库查询</strong>，比如说带groupby、orderby、min、max、avg等关键字，建议可以让DAL层汇总单个库返回的结果，然后由上层应用做进一步的处理。这样做有两方面的原因，一方面是因为让DAL层支持所有可能的聚合场景，实现逻辑会很复杂；另一方面，从1号店的实践来看，这样的聚合场景并不多，在上层应用做针对性处理，会更加灵活。</li>\n</ul><p>DAL层还可以进一步细分为<strong>底层JDBC驱动层</strong>和<strong>偏上面的数据访问层</strong>。如果我们基于JDBC层面实现分库路由，系统开发难度大，灵活性低，目前也没有很好的成功案例。</p><p>在实践中，我们一般是基于持久层框架，把它进一步封装成<strong>DDAL</strong>（Distributed Data Access Layer，分布式数据访问层），实现分库路由。1号店的DDAL就是基于iBatis进一步封装而来的。</p><h3>分页处理</h3><p>水平分库后，分页查询的问题比较突出，因为有些分页查询需要遍历所有库。</p><p>举个例子，假设我们要按时间顺序展示某个商家的订单，每页有100条记录，由于是按商家查询，我们需要遍历所有数据库。假设库数量是8，我们来看下水平分库后的分页逻辑：</p><ul>\n<li>如果是取第1页数据，我们需要从每个库里按时间顺序取前100条记录，8个库汇总后共有800条，然后我们对这800条记录在应用里进行二次排序，最后取前100条；</li>\n<li>如果取第10页数据，则需要从每个库里取前1000（100*10）条记录，汇总后共有8000条记录，然后我们对这8000条记录进行二次排序后，取第900到1000之间的记录。</li>\n</ul><p>你可以看到，在分库情况下，对于每个数据库，我们要取更多的记录，并且汇总后，还要在应用里做二次排序，越是靠后的分页，系统要耗费更多的内存和执行时间。而在不分库的情况下，无论取哪一页，我们只要从单个DB里取100条记录即可，也无需在应用内部做二次排序，非常简单。</p><p><strong>那么，我们如何解决分库情况下的分页问题呢？</strong>这需要具体情况具体分析：</p><ul>\n<li>如果是为前台应用提供分页，我们可以限定用户只能看到前面n页（这个限制在业务上也是合理的，一般看后面的分页意义不大，如果一定要看，可以要求用户缩小范围重新查询）；</li>\n<li>如果是后台批处理任务要求分批获取数据，我们可以加大分页的大小，比如设定每次获取5000条记录，这样可以有效减少分页的访问次数；</li>\n<li>分库设计时，一般还有配套的大数据平台负责汇总所有分库的记录，所以有些分页查询，我们可以考虑走大数据平台。</li>\n</ul><h3>分库字段映射</h3><p>分库字段只有一个，比如这里，我们用的是用户ID，如果给定用户ID，这个查询会落到具体的某个库。但我们知道，在订单服务里，根据<strong>订单ID</strong>查询的场景也很多见，不过由于订单ID不是分库字段，如果不对它做特殊处理，系统会盲目查询所有分库，从而带来不必要的资源开销。</p><p>所以，这里我们<strong>为订单ID和用户ID创建映射，保存在Lookup表里</strong>，我们就可以根据订单ID，找到相应的用户ID，从而实现单库定位。</p><p>Lookup表的记录数和订单库记录总数相等，但它只有2个字段，所以存储和查询性能都不是问题，这个表在单独的数据库里存放。在实际使用时，我们可以通过<strong>分布式缓存</strong>，来优化Lookup表的查询性能。此外，对于新增的订单，除了写订单表，我们同时还要写Lookup表。</p><h2>整体架构</h2><p>通过以上分析，最终的1号店订单水平分库的总体技术架构如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/9c/3ae46ab0d2d5430f03b436c87247d59c.jpg?wh=2284*1800\" alt=\"\"></p><ul>\n<li><strong>上层应用</strong>通过订单服务访问数据库；</li>\n<li><strong>分库代理</strong>实现了分库相关的功能，包括聚合运算、订单ID到用户ID的映射，做到分库逻辑对订单服务透明；</li>\n<li><strong>Lookup表</strong>用于订单ID和用户ID的映射，保证订单服务按订单ID访问时，可以直接落到单个库，Cache是Lookup表数据的缓存；</li>\n<li><strong>DDAL</strong>提供库的路由，可以根据用户ID定位到某个库，对于多库访问，DDAL支持可选的多线程并发访问模式，并支持简单的记录汇总；</li>\n<li><strong>Lookup表初始化数据</strong>来自于现有的分库数据，当新增订单记录时，由分库代理异步写入。</li>\n</ul><h2>如何安全落地？</h2><p>订单表是系统的核心业务表，它的水平拆分会影响到很多业务，订单服务本身的代码改造也很大，很容易导致依赖订单服务的应用出现问题。我们在上线时，必须谨慎考虑。</p><p>所以，为了保证订单水平分库的总体改造可以安全落地，整个方案的实施过程如下：</p><ul>\n<li>首先，实现Oracle和MySQL两套库并行，所有数据读写指向Oracle库，我们通过数据同步程序，把数据从Oracle拆分到多个MySQL库，比如说3分钟增量同步一次。</li>\n<li>其次，我们选择几个对数据实时性要求不高的访问场景（比如访问历史订单），把订单服务转向访问MySQL数据库，以检验整套方案的可行性。</li>\n<li>最后，经过大量测试，如果性能和功能都没有问题，我们再一次性把所有实时读写访问转向MySQL，废弃Oracle。</li>\n</ul><p>这里，我们把上线分成了两个阶段：<strong>第一阶段</strong>，把部分非实时的功能切换到MySQL，这个阶段主要是为了<strong>验证技术</strong>，它包括了分库代理、DDAL、Lookup表等基础设施的改造；<strong>第二阶段</strong>，主要是<strong>验证业务功能</strong>，我们把所有订单场景全面接入MySQL。1号店两个阶段的上线都是一次性成功的，特别是第二阶段的上线，100多个依赖订单服务的应用，通过简单的重启就完成了系统的升级，中间没有出现一例较大的问题。</p><h2>项目总结</h2><p>1号店在完成订单水平分库的同时，也实现了去Oracle，设备从小型机换成了X86服务器，我们通过水平分库和去Oracle，不但支持了订单量的未来增长，并且总体成本也大幅下降。</p><p>不过由于去Oracle和订单分库一起实施，带来了双重的性能影响，我们花了很大精力做<span class=\"orange\">性能测试</span>。为了模拟真实的线上场景，我们通过<strong>TCPCopy</strong>，把线上实际的查询流量引到测试环境，先后经过13轮的性能测试，最终6个MySQL库相对一个Oracle，在当时的数据量下，SQL执行时间基本持平。这样，我们<strong>在性能不降低的情况下，通过水平分库优化了架构，实现了订单处理能力的水平扩展。</strong></p><p>1号店最终是根据用户ID后三位取模进行分库，初始分成了6个库，理论上可以支持多达768个库。同时我们还改造了订单ID的生成规则，使其包括用户ID后三位，这样新订单ID本身就包含了库定位所需信息，无需走Lookup映射机制。随着老订单归档到历史库，在前面给出的架构中，Lookup表相关的部分就可以逐渐废弃了。</p><p>如果要扩充数据库的数量，从6个升到12个，我们可以分三步走：</p><ol>\n<li>增加6个MySQL实例，把现有6个库的数据同步到新的库，比如说，0号库同步到6号库，1号库同步到7号库等等；</li>\n<li>在配置文件里把分库的取模从6变成12；</li>\n<li>通过数据库脚本，每个库删掉一半数据，比如对于0号库，删掉用户ID%12=6的记录，对于6号库，删掉用户ID%12=0的记录。</li>\n</ol><p>你可以看到，通过这样的分库方式，整个数据库扩展是非常容易的，不涉及复杂的数据跨库迁移工作。</p><p>订单的水平分库是一项系统性工作，需要大胆设计，谨慎实施。<strong>你需要把握住这几个要点：</strong></p><ul>\n<li>首先，你需要在分库策略的指导下，结合实际情况，在每个方面做出最合适的选择；</li>\n<li>其次，对于特殊场景，如分页查询，你需要具体问题具体解决；</li>\n<li>最后，你要总体规划，控制好落地步骤，包括对系统改造、性能测试、数据迁移、上线实施等各个环节做好衔接，保证业务不出问题。</li>\n</ul><h2>总结</h2><p>今天我和你分享了1号店订单水平分库的实际案例，并给出了具体的做法和原因，相信你已经掌握了如何通过对数据库的水平拆分，来保证系统的高性能和可伸缩。</p><p><strong>水平分库是针对有状态的存储节点进行水平扩展</strong>，相对于无状态的节点，系统改造的复杂性比较高，要考虑的点也比较多。通过今天的分享，希望你以后在设计一个复杂方案时，能够更全面地思考相关的细节，提升架构设计能力。</p><p><strong>最后，给你留一道思考题</strong>：你公司的数据库有什么瓶颈吗，你计划对它做什么样的改造呢？</p><p>欢迎在留言区和我互动，我会第一时间给你反馈。如果这节课对你有帮助，也欢迎你把它分享给你的朋友。感谢阅读，我们下期再见。</p>","neighbors":{"left":{"article_title":"17 | 高性能架构案例：如何设计一个秒杀系统？","id":218346},"right":{"article_title":"19 | 综合案例：电商平台技术架构是如何演变的？","id":219788}},"comments":[{"had_liked":false,"id":201332,"user_name":"李博","can_delete":false,"product_type":"c1","uid":1119919,"ip_address":"","ucode":"04C2DE916B84AB","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/af/bada0f59.jpg","comment_is_top":false,"comment_ctime":1585752560,"is_pvip":false,"replies":[{"id":"75326","content":"你看的很仔细啊，三位数最大是999，从6开始翻倍，最大翻到768，这已经够用了。","user_name":"作者回复","comment_id":201332,"uid":"1268522","ip_address":"","utype":1,"ctime":1585755617,"user_name_real":"王庆友"}],"discussion_count":2,"race_medal":0,"score":"48830392816","product_id":100046301,"comment_content":"1 号店最终是根据用户 ID 后三位取模进行分库，初始分成了 6 个库，理论上可以支持多达 768 个库。 <br> 老师这个最大支持768怎么算出来的？","like_count":12,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490302,"discussion_content":"你看的很仔细啊，三位数最大是999，从6开始翻倍，最大翻到768，这已经够用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585755617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1051631,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0b/ef/de0374ac.jpg","nickname":"祝洪娇","note":"","ucode":"59AC347FFABAE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577713,"discussion_content":"原来是这样，也想问来着，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656307159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202782,"user_name":"小洛","can_delete":false,"product_type":"c1","uid":1005062,"ip_address":"","ucode":"227EC21891012B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/06/ea49b29d.jpg","comment_is_top":false,"comment_ctime":1586068377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44535741337","product_id":100046301,"comment_content":"谢谢老师的分享，我们这边的分库是一次性分128个   因为综合考虑下公司的业务量、未来增长、和成本，以及如果以后再次扩容，需要做数据迁移的工作，数据迁移的工作 还是比较繁琐的，什么双写方案、数据校验、不停机平滑迁移扩容等，就是琐碎的很，所以就直接一步到位了。然后分页这块看具体场景了，确实没有好的方案，一般非实时走ES，如果不行 就和产品撕逼，看看做这个的意义何在，多问他为什么？然后呢？一般有时候他自己都被问懵了，还是看具体场景，有时候业务和技术要折中～","like_count":11},{"had_liked":false,"id":201109,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1585717424,"is_pvip":false,"replies":[{"id":"75224","content":"1. 分页怎么处理具体要看场景，实时性要求不高的可以走大数据或ES，要求高的还是要并行直接查数据库。<br>2. 关于数据迁移逻辑，原来6个库（编号为0-5），分别放 Id %6后0-5的数据，现在新增加编号是6-11号库，原来0号库一半数据(id%12=6)要迁到6号库,文中说的6号库，指的是迁移后新加的6号库。<br>3. 文章最后提到，最后落的方案是按照用户id后三位取模，对订单编号进行改造，加入了用户ID后三位。","user_name":"作者回复","comment_id":201109,"uid":"1268522","ip_address":"","utype":1,"ctime":1585720400,"user_name_real":"王庆友"}],"discussion_count":2,"race_medal":0,"score":"27355521200","product_id":100046301,"comment_content":"1.分页为何不走es？ 这样聚合多库数据觉得比较复杂，而复杂本身就是需要警惕的事。<br><br>2.取模那里，0库转移%12=7的数据。没有6号库，只有5号库，转移%12=11的数据。<br><br>3.用户id可以截取写入订单号中，以此减少一次中间表映射的成本。担心安全性，则做加密处理。毕竟加密解密是cpu密集操作，其效率正常都会比查表这种io操作快，更何况这表字段虽少，但写频繁，切行数不会少。","like_count":6,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490241,"discussion_content":"1. 分页怎么处理具体要看场景，实时性要求不高的可以走大数据或ES，要求高的还是要并行直接查数据库。\n2. 关于数据迁移逻辑，原来6个库（编号为0-5），分别放 Id %6后0-5的数据，现在新增加编号是6-11号库，原来0号库一半数据(id%12=6)要迁到6号库,文中说的6号库，指的是迁移后新加的6号库。\n3. 文章最后提到，最后落的方案是按照用户id后三位取模，对订单编号进行改造，加入了用户ID后三位。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585720400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1363834,"avatar":"https://static001.geekbang.org/account/avatar/00/14/cf/7a/51951b07.jpg","nickname":"微笑","note":"","ucode":"6E8E2964D0191F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234954,"discussion_content":"用户id后三位要放在订单号最后面吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587008003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222088,"user_name":"Geek_ae94ad","can_delete":false,"product_type":"c1","uid":1167056,"ip_address":"","ucode":"519C5BE3AD8653","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/d0/3f887fb8.jpg","comment_is_top":false,"comment_ctime":1590673984,"is_pvip":false,"replies":[{"id":"81861","content":"分库字段是这个主键id吗？如果不是的话，那老数据不影响。如果是，还是可以直接取模方式分，只是新id的算法要换下，改为由数据库外部服务统一生成，比如雪花算法等。","user_name":"作者回复","comment_id":222088,"uid":"1268522","ip_address":"","utype":1,"ctime":1590676942,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"18770543168","product_id":100046301,"comment_content":"现有数据库的表是主键id自增的方式，现在想分库分表，老数据如何做数据兼容操作？","like_count":4,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496663,"discussion_content":"分库字段是这个主键id吗？如果不是的话，那老数据不影响。如果是，还是可以直接取模方式分，只是新id的算法要换下，改为由数据库外部服务统一生成，比如雪花算法等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590676942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299729,"user_name":"biscuitlife","can_delete":false,"product_type":"c1","uid":1293532,"ip_address":"","ucode":"7F6124C8175FAB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo5vic8QksE4bxiaZXCOXaIBlYVeldLaWjSyMJfDjdhyaw3jviaPDrRiaoibKru5zXzKibicnY3PcEsSUo4Q/132","comment_is_top":false,"comment_ctime":1624838478,"is_pvip":true,"replies":[{"id":"109813","content":"分库是比较大的动作，还是停服一下比较好，当然可以通过周密计划，大幅缩短停服时间。","user_name":"作者回复","comment_id":299729,"uid":"1268522","ip_address":"","utype":1,"ctime":1626774225,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"10214773070","product_id":100046301,"comment_content":"停服分库有点low，老师有么有更好的办法？","like_count":2,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522522,"discussion_content":"分库是比较大的动作，还是停服一下比较好，当然可以通过周密计划，大幅缩短停服时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626774225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201838,"user_name":"Middleware","can_delete":false,"product_type":"c1","uid":1072015,"ip_address":"","ucode":"C0028293ECDD47","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/8f/4b0ab5db.jpg","comment_is_top":false,"comment_ctime":1585843556,"is_pvip":true,"replies":[{"id":"75527","content":"最简单的方式就是所有库拿数据，然后在内存里重排取记录，从数据库拿可以使用多线程并发。<br><br>分页没有特别好办法，需要具体情况具体分析。","user_name":"作者回复","comment_id":201838,"uid":"1268522","ip_address":"","utype":1,"ctime":1585899534,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"10175778148","product_id":100046301,"comment_content":"分页的处理方法可否进一步分享一下 可落地的实现办法","like_count":2,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490434,"discussion_content":"最简单的方式就是所有库拿数据，然后在内存里重排取记录，从数据库拿可以使用多线程并发。\n\n分页没有特别好办法，需要具体情况具体分析。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585899534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237168,"user_name":"开心小毛","can_delete":false,"product_type":"c1","uid":1023762,"ip_address":"","ucode":"9D57A2773759F3","user_header":"","comment_is_top":false,"comment_ctime":1595701294,"is_pvip":false,"replies":[{"id":"90022","content":"现在数据库设计实践，一般不在数据库物理层面设置外键，而是在应用系统维护。","user_name":"作者回复","comment_id":237168,"uid":"1268522","ip_address":"","utype":1,"ctime":1598604122,"user_name_real":"王庆友"}],"discussion_count":2,"race_medal":0,"score":"5890668590","product_id":100046301,"comment_content":"请问王老师：在垂直分库之后，是否会存在跨数据库的外键 (foreign key constraint)：<br>是否必须把存在外键关联的表分到同一个数据库中；还是说我们必须在分库之后必须删除外键限制，再在应用层模拟外键。","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502323,"discussion_content":"现在数据库设计实践，一般不在数据库物理层面设置外键，而是在应用系统维护。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598604122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2113464,"avatar":"","nickname":"Geek_47e6bf","note":"","ucode":"B101445163A7D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300575,"discussion_content":"好多公司分库分表都禁止使用mysql外键,都是逻辑上关联起来","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598178179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201120,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1585719879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880687175","product_id":100046301,"comment_content":"都是具体的，有步骤的，可以落地的经验，收藏！","like_count":1},{"had_liked":false,"id":201080,"user_name":"正在减肥的胖籽。","can_delete":false,"product_type":"c1","uid":1033728,"ip_address":"","ucode":"99E2E4DF599236","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c6/00/683bb4f0.jpg","comment_is_top":false,"comment_ctime":1585713121,"is_pvip":false,"replies":[{"id":"75218","content":"凌晨2-3点短暂停系统，提前全网会发公告","user_name":"作者回复","comment_id":201080,"uid":"1268522","ip_address":"","utype":1,"ctime":1585719429,"user_name_real":"王庆友"}],"discussion_count":3,"race_medal":0,"score":"5880680417","product_id":100046301,"comment_content":"老师中午好，请教你几个问题<br>1.水平拆分库，代码层面也就是修改路由。你们线上怎么实现平滑迁移？如果我现在4个表，需要拆分成8个表。上线的时候用户还需要正常访问。我现在没想到好的方案。","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490234,"discussion_content":"凌晨2-3点短暂停系统，提前全网会发公告","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585719429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1443117,"avatar":"","nickname":"witluo","note":"","ucode":"3D9608C3DDDD95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242997,"discussion_content":"老师您好，我想请问一下，这种分库是将用户所有的订单全部放在一起，那么一年，两年，五年后，如果数据量过大，如何存储呢，比如一个库一个订单表放0.5亿条数据，那么12个库也只能放6亿数据，日单100万的话，2年数据就存满了，想听听老师的见解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587516298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1701867,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","nickname":"，","note":"","ucode":"A5543C8DFEB198","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1443117,"avatar":"","nickname":"witluo","note":"","ucode":"3D9608C3DDDD95","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292660,"discussion_content":"老订单归档到历史库,或者继续添加新库,老师文章里有说","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595298641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":242997,"ip_address":""},"score":292660,"extra":""}]}]},{"had_liked":false,"id":200980,"user_name":"AlfredLover","can_delete":false,"product_type":"c1","uid":1042354,"ip_address":"","ucode":"A3A998F362CC37","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/b2/334bc992.jpg","comment_is_top":false,"comment_ctime":1585702084,"is_pvip":true,"replies":[{"id":"75203","content":"文章后面有提到，dal层提供开关，让上层调用时选择是否并行执行","user_name":"作者回复","comment_id":200980,"uid":"1268522","ip_address":"","utype":1,"ctime":1585706614,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"5880669380","product_id":100046301,"comment_content":"精彩，分页这里，代码层面是循环去查询每个库的记录，还是每个库一个线程并行的方式去查询？","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490199,"discussion_content":"文章后面有提到，dal层提供开关，让上层调用时选择是否并行执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585706614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354829,"user_name":"Nero Lou","can_delete":false,"product_type":"c1","uid":2936454,"ip_address":"上海","ucode":"02DAB6AB8FDE82","user_header":"","comment_is_top":false,"comment_ctime":1660810399,"is_pvip":false,"replies":[{"id":"130109","content":"水平分库针对具体的库，比如订单数据库使用用户ID，商品数据库使用商家id等。如果库里的某些表，不支持id分库，特殊情况，是可以冗余到每个库里。","user_name":"作者回复","comment_id":354829,"uid":"1268522","ip_address":"上海","utype":1,"ctime":1663325796,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1660810399","product_id":100046301,"comment_content":"请问根据用户ID分库的话，那些跟用户ID无关的表，比如商品。是不是得冗余到每个库中？好像微服务之类比较好分，维度太多的业务模型比较难搞","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587863,"discussion_content":"水平分库针对具体的库，比如订单数据库使用用户ID，商品数据库使用商家id等。如果库里的某些表，不支持id分库，特殊情况，是可以冗余到每个库里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663325796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227480,"user_name":"陈方义","can_delete":false,"product_type":"c1","uid":1095925,"ip_address":"","ucode":"84FB515ECB32DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/b8/f5/19a02ac4.jpg","comment_is_top":false,"comment_ctime":1592389264,"is_pvip":false,"replies":[{"id":"84607","content":"简单的聚合是可以，但分页的话可以选择放在应用里二次排序然后选择范围，在代理层做会比较复杂。","user_name":"作者回复","comment_id":227480,"uid":"1268522","ip_address":"","utype":1,"ctime":1592966210,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"1592389264","product_id":100046301,"comment_content":"王老师好，请问一下：sharding-proxy能解决分片后的聚合、分页问题吗？","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498657,"discussion_content":"简单的聚合是可以，但分页的话可以选择放在应用里二次排序然后选择范围，在代理层做会比较复杂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592966210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222697,"user_name":"四喜","can_delete":false,"product_type":"c1","uid":1071389,"ip_address":"","ucode":"C5EBED19C0F332","user_header":"https://static001.geekbang.org/account/avatar/00/10/59/1d/c89abcd8.jpg","comment_is_top":false,"comment_ctime":1590895100,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590895100","product_id":100046301,"comment_content":"用一致性哈希的分法，分库的时候迁移的数据量会更少。","like_count":0},{"had_liked":false,"id":222109,"user_name":"Geek_ae94ad","can_delete":false,"product_type":"c1","uid":1167056,"ip_address":"","ucode":"519C5BE3AD8653","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/d0/3f887fb8.jpg","comment_is_top":false,"comment_ctime":1590678201,"is_pvip":false,"replies":[{"id":"81933","content":"应该是文档嵌套的形式合成一个index，简化查询","user_name":"作者回复","comment_id":222109,"uid":"1268522","ip_address":"","utype":1,"ctime":1590728653,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"1590678201","product_id":100046301,"comment_content":"老师，针对订单中心的表数据，业务库用mysql，同步到es做查询时，比如一个订单主表，关联5个子表，比如商品表，优惠分摊表，订单属性扩展表等，在es存的时候是以嵌套的形式存一个index，还是mysql一张表，对应es的一个index，然后维护父子关系？或者有更好的方案，我这边的需求是想支持各个维度的查询操作","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496671,"discussion_content":"应该是文档嵌套的形式合成一个index，简化查询","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590728653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215143,"user_name":"Robin康F","can_delete":false,"product_type":"c1","uid":1962437,"ip_address":"","ucode":"618F8686D1231D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJyLCPnVq4gKMN5jPcd9wVVEXtZMibCNAkLrJf4uZKdV40Nelb3uPtCETfuw5hbbC693sUHQpRUMiaA/132","comment_is_top":false,"comment_ctime":1588915014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588915014","product_id":100046301,"comment_content":"公司的老系统之前数据库也有订单表，采用的方式是保留3个月的数据，其余都通过定时脚本转移到备份表，再好一点是转移到别的数据库，再好一点呢就是做分表了","like_count":0},{"had_liked":false,"id":204735,"user_name":"飞哥","can_delete":false,"product_type":"c1","uid":1329839,"ip_address":"","ucode":"51947696ADAD3E","user_header":"https://static001.geekbang.org/account/avatar/00/14/4a/af/422dda48.jpg","comment_is_top":false,"comment_ctime":1586447514,"is_pvip":false,"replies":[{"id":"76552","content":"可以，这个量不算大","user_name":"作者回复","comment_id":204735,"uid":"1268522","ip_address":"","utype":1,"ctime":1586486735,"user_name_real":"王庆友"}],"discussion_count":2,"race_medal":0,"score":"1586447514","product_id":100046301,"comment_content":"MySQL数据库订单表在千万行级别，30列左右，使用数据库的分区功能是否可以","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491273,"discussion_content":"可以，这个量不算大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586486735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2652181,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/laZ13g1QHoYX3Q72a8t86zIaOAY1eAkicRu9wNcTO14Bc2ocnaMxJGzsuSN4tRbrbuAXKVfYB6w72XvXl8KhvAw/132","nickname":"兔子先生","note":"","ucode":"9303B568DFAF34","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394989,"discussion_content":"所以到达什么量级应该做分库分表？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632153490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204243,"user_name":"孙同学","can_delete":false,"product_type":"c1","uid":1676238,"ip_address":"","ucode":"C6C82400D15336","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/ce/092acd6a.jpg","comment_is_top":false,"comment_ctime":1586355492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586355492","product_id":100046301,"comment_content":"https:&#47;&#47;www.processon.com&#47;view&#47;link&#47;5e51378ce4b0c037b5f9d1e3 整理更新 ","like_count":0},{"had_liked":false,"id":201539,"user_name":"蓝天","can_delete":false,"product_type":"c1","uid":1023233,"ip_address":"","ucode":"3846830C97D97A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/01/23306c79.jpg","comment_is_top":false,"comment_ctime":1585801503,"is_pvip":false,"replies":[{"id":"75392","content":"1. 物理机部署，分库本来的目的就是解决存储和性能的问题，使用逻辑库意义不大。<br>2. 如果用mysql，可以一台机器装多个实例，每个微服务使用自己的实例。","user_name":"作者回复","comment_id":201539,"uid":"1268522","ip_address":"","utype":1,"ctime":1585811848,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"1585801503","product_id":100046301,"comment_content":"1，老师这里分库是逻辑上的分库吧，不是物理上的吧，否则几张表一个库有点浪费<br>2，我们现在用的rds，现在一个慢sql全卡住了，微服务用rds是不是成本会高呢","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490360,"discussion_content":"1. 物理机部署，分库本来的目的就是解决存储和性能的问题，使用逻辑库意义不大。\n2. 如果用mysql，可以一台机器装多个实例，每个微服务使用自己的实例。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585811848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201140,"user_name":"台风骆骆","can_delete":false,"product_type":"c1","uid":1170748,"ip_address":"","ucode":"891D3599644ABD","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/3c/a595eb2a.jpg","comment_is_top":false,"comment_ctime":1585722440,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585722440","product_id":100046301,"comment_content":"老师的课特别接地气，实用，赞","like_count":0}]}