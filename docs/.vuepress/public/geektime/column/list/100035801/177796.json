{"id":177796,"title":"35 |  流量控制：高并发系统中我们如何操纵流量？","content":"<p>你好，我是唐扬。</p><p>上一节课里，我带你了解了微服务架构中常见的两种有损的服务保护策略：熔断和降级。它们都是通过暂时关闭某些非核心服务或者组件从而保护核心系统的可用性。但是，并不是所有的场景下都可以使用熔断降级的策略，比如，电商系统在双十一、618大促的场景。</p><p>这种场景下，系统的峰值流量会超过了预估的峰值，对于核心服务也产生了比较大的影响，而你总不能把核心服务整体降级吧？那么在这个时候要如何保证服务的稳定性呢？你认为可以使用限流的方案。而提到限流，我相信你多多少少在以下几个地方出错过：</p><ul>\n<li>限流算法选择不当，导致限流效果不好；</li>\n<li>开启了限流却发现整体性能有损耗；</li>\n<li>只实现了单机的限流却没有实现整体系统的限流。</li>\n</ul><p>说白了，你之所以出现这些问题还是对限流的算法以及实际应用不熟练，而本节课，我将带你了解这些内容，希望你能将这些经验应用到实际项目中，从而提升整体系统的鲁棒性。</p><h2>究竟什么是限流</h2><p>限流指的是通过限制到达系统的并发请求数量，保证系统能够正常响应部分用户请求，而对于超过限制的流量，则只能通过拒绝服务的方式保证整体系统的可用性。限流策略一般部署在服务的入口层，比如API网关中，这样可以对系统整体流量做塑形。而在微服务架构中，你也可以在RPC客户端中引入限流的策略，来保证单个服务不会被过大的流量压垮。</p><!-- [[[read_end]]] --><p>其实，无论在实际工作生活中还是在之前学习过的知识中，你都可能对限流策略有过应用，我给你举几个例子。</p><p>比如，到了十一黄金周的时候你想去九寨沟游玩，结果到了九寨沟才发现景区有了临时的通知，每天仅仅售卖10万张门票，而当天没有抢到门票的游客就只能第二天起早继续来抢了。这就是一种常见的限流策略，也就是对一段时间内（在这里是一天）流量做整体的控制，它可以避免出现游客过多导致的景区环境受到影响的情况，也能保证游客的安全。而且，如果你挤过地铁，就更能感同身受了。北京早高峰的地铁都会限流，想法很直接，就是控制进入地铁的人数，保证地铁不会被挤爆，也可以尽量保障人们的安全。</p><p>再比如，在TCP协议中有一个滑动窗口的概念，可以实现对网络传输流量的控制。你可以想象一下，如果没有流量控制，当流量接收方处理速度变慢而发送方还是继续以之前的速率发送数据，那么必然会导致流量拥塞。而TCP的滑动窗口实际上可以理解为接收方所能提供的缓冲区的大小。</p><p>在接收方回复发送方的ACK消息中，会带上这个窗口的大小。这样，发送方就可以通过这个滑动窗口的大小决定发送数据的速率了。如果接收方处理了一些缓冲区的数据，那么这个滑动窗口就会变大，发送方发送数据的速率就会提升；反之，如果接收方接收了一些数据还没有来得及处理，那么这个滑动窗口就会减小，发送方发送数据的速率就会减慢。</p><p><img src=\"https://static001.geekbang.org/resource/image/fa/30/faedbfa270c449410c8aa404cfb58e30.jpg?wh=1142*358\" alt=\"\"></p><p>而无论是在一体化架构还是微服务化架构中，我们也可以在多个维度上对到达系统的流量做控制，比如：</p><ul>\n<li>你可以对系统每分钟处理多少请求做出限制；</li>\n<li>可以针对单个接口设置每分钟请求流量的限制；</li>\n<li>可以限制单个IP、用户ID或者设备ID在一段时间内发送请求的数量；</li>\n<li>对于服务于多个第三方应用的开放平台来说，每一个第三方应用对于平台方来说都有一个唯一的appkey来标识，那么你也可以限制单个appkey的访问接口的速率。</li>\n</ul><p>而实现上述限制速率的方式是基于一些限流算法的，那么常见的限流的算法有哪些呢？你在实现限流的时候都有哪些方式呢？</p><h2>你应该知道的限流算法</h2><h4>固定窗口与滑动窗口的算法</h4><p>我们知道，限流的目的是限制一段时间内发向系统的总体请求量，比如，限制一分钟之内系统只能承接1万次请求，那么最暴力的一种方式就是记录这一分钟之内访问系统的请求量有多少，如果超过了1万次的限制，那么就触发限流的策略返回请求失败的错误。如果这一分钟的请求量没有达到限制，那么在下一分钟到来的时候先重置请求量的计数，再统计这一分钟的请求量是否超过限制。</p><p>这种算法叫做固定窗口算法，在实现它的时候，首先要启动一个定时器定期重置计数，比如你需要限制每秒钟访问次数，那么简单的实现代码是这样的：</p><pre><code>private AtomicInteger counter;\nScheduledExecutorService timer = Executors.newSingleThreadScheduledExecutor();\ntimer.scheduleAtFixedRate(new Runnable(){\n    @Override\n    public void run() {\n        counter.set(0);\n    }\n}, 0, 1, TimeUnit.SECONDS);\n</code></pre><p>而限流的逻辑就非常简单了，只需要比较计数值是否大于阈值就可以了：</p><pre><code>public boolena isRateLimit() {\n  return counter.incrementAndGet() &gt;= allowedLimit;\n}\n</code></pre><p><strong>这种算法虽然实现非常简单，但是却有一个很大的缺陷</strong> ：无法限制短时间之内的集中流量。假如我们需要限制每秒钟只能处理10次请求，如果前一秒钟产生了10次请求，这10次请求全部集中在最后的10毫秒中，而下一秒钟的前10毫秒也产生了10次请求，那么在这20毫秒中就产生了20次请求，超过了限流的阈值。但是因为这20次请求分布在两个时间窗口内，所以没有触发限流，这就造成了限流的策略并没有生效。</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/4e/6c19e7da07a7c8095f5799ffae644f4e.jpg?wh=1142*376\" alt=\"\"></p><p><strong>为了解决这个缺陷，就有了基于滑动窗口的算法。</strong> 这个算法的原理是将时间的窗口划分为多个小窗口，每个小窗口中都有单独的请求计数。比如下面这张图，我们将1s的时间窗口划分为5份，每一份就是200ms；那么当在1s和1.2s之间来了一次新的请求时，我们就需要统计之前的一秒钟内的请求量，也就是0.2s～1.2s这个区间的总请求量，如果请求量超过了限流阈值那么就执行限流策略。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/56/d1b889ca30bd4fa1a29096726f6e9256.jpg?wh=1142*487\" alt=\"\"></p><p>滑动窗口的算法解决了临界时间点上突发流量无法控制的问题，但是却因为要存储每个小的时间窗口内的计数，所以空间复杂度有所增加。</p><p>虽然滑动窗口算法解决了窗口边界的大流量的问题，但是它和固定窗口算法一样，还是无法限制短时间之内的集中流量，也就是说无法控制流量让它们更加平滑。<strong>因此，在实际的项目中，我很少使用基于时间窗口的限流算法，而是使用其他限流的算法：一种算法叫做漏桶算法，一种叫做令牌筒算法。</strong></p><h4>漏桶算法与令牌筒算法</h4><p>漏桶算法的原理很简单，它就像在流量产生端和接收端之间增加一个漏桶，流量会进入和暂存到漏桶里面，而漏桶的出口处会按照一个固定的速率将流量漏出到接收端（也就是服务接口）。</p><p>如果流入的流量在某一段时间内大增，超过了漏桶的承受极限，那么多余的流量就会触发限流策略，被拒绝服务。</p><p>经过了漏桶算法之后，随机产生的流量就会成为比较平滑的流量到达服务端，从而避免了突发的大流量对于服务接口的影响。<strong>这很像倚天屠龙记里，九阳真经的口诀：他强由他强，清风拂山岗，他横由他横，明月照大江 。</strong> 也就是说，无论流入的流量有多么强横，多么不规则，经过漏桶处理之后，流出的流量都会变得比较平滑。</p><p>而在实现时，我们一般会使用消息队列作为漏桶的实现，流量首先被放入到消息队列中排队，由固定的几个队列处理程序来消费流量，如果消息队列中的流量溢出，那么后续的流量就会被拒绝。这个算法的思想是不是与消息队列削峰填谷的作用相似呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/c1/8d/c19e0e5099cfeb979b6b70c678b3238d.jpg?wh=1142*914\" alt=\"\"></p><p>另一种令牌桶算法的基本算法是这样的：</p><ul>\n<li>如果我们需要在一秒内限制访问次数为N次，那么就每隔1/N的时间，往桶内放入一个令牌；</li>\n<li>在处理请求之前先要从桶中获得一个令牌，如果桶中已经没有了令牌，那么就需要等待新的令牌或者直接拒绝服务；</li>\n<li>桶中的令牌总数也要有一个限制，如果超过了限制就不能向桶中再增加新的令牌了。这样可以限制令牌的总数，一定程度上可以避免瞬时流量高峰的问题。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/40/9b/4054d20a39fb41e7f9aa924205ba839b.jpg?wh=1142*460\" alt=\"\"></p><p>如果要从这两种算法中做选择，我更倾向于使用令牌桶算法，<strong>原因是漏桶算法在面对突发流量的时候，采用的解决方式是缓存在漏桶中，</strong> 这样流量的响应时间就会增长，这就与互联网业务低延迟的要求不符；而令牌桶算法可以在令牌中暂存一定量的令牌，能够应对一定的突发流量，所以一般我会使用令牌桶算法来实现限流方案，而Guava中的限流方案就是使用令牌桶算法来实现的。</p><p>你可以看到，使用令牌桶算法就需要存储令牌的数量，如果是单机上实现限流的话，可以在进程中使用一个变量来存储；但是如果在分布式环境下，不同的机器之间无法共享进程中的变量，我们就一般会使用Redis来存储这个令牌的数量。这样的话，每次请求的时候都需要请求一次Redis来获取一个令牌，会增加几毫秒的延迟，性能上会有一些损耗。<strong>因此，一个折中的思路是：</strong> 我们可以在每次取令牌的时候，不再只获取一个令牌，而是获取一批令牌，这样可以尽量减少请求Redis的次数。</p><h2>课程小结</h2><p>以上就是本节课的全部内容了。本节课我带你了解了限流的定义和作用，以及常见的几种限流算法，你需要了解的重点是：</p><ol>\n<li>限流是一种常见的服务保护策略，你可以在整体服务、单个服务、单个接口、单个IP或者单个用户等多个维度进行流量的控制；</li>\n<li>基于时间窗口维度的算法有固定窗口算法和滑动窗口算法，两者虽然能一定程度上实现限流的目的，但是都无法让流量变得更平滑；</li>\n<li>令牌桶算法和漏桶算法则能够塑形流量，让流量更加平滑，但是令牌桶算法能够应对一定的突发流量，所以在实际项目中应用更多。</li>\n</ol><p>限流策略是微服务治理中的标配策略，只是你很难在实际中确认限流的阈值是多少，设置的小了容易误伤正常的请求，设置的大了则达不到限流的目的。所以，一般在实际项目中，我们会把阈值放置在配置中心中方便动态调整；同时，我们可以通过定期的压力测试得到整体系统以及每个微服务的实际承载能力，然后再依据这个压测出来的值设置合适的阈值。</p><h2>一课一思</h2><p>在你的实际项目中，有没有使用过限流的方式，来保护系统不被高并发大流量压垮呢？采用了什么样的算法呢？欢迎在留言区与我分享你的经验。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"34 | 降级熔断：如何屏蔽非核心系统故障的影响？","id":176917},"right":{"article_title":"36 | 面试现场第三期：你要如何准备一场技术面试呢？","id":178324}},"comments":[{"had_liked":false,"id":162884,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1576628576,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"134720614752","product_id":100035801,"comment_content":"感觉都是知道一些概念但是都没有深入展开","like_count":32,"discussions":[{"author":{"id":1203563,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/6b/3d42593f.jpg","nickname":"聪少","note":"","ucode":"AB8301B752AC30","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285822,"discussion_content":"借着这个思想自己去实现！我感觉本身就不是什么复杂的事情，作者只是在讲这些经验。避免面试或者实际的生产环境中遇到这种情况一时之间想不出对应之法～","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1592962729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1166095,"avatar":"https://static001.geekbang.org/account/avatar/00/11/cb/0f/cc403ab4.jpg","nickname":"阿凯","note":"","ucode":"26310370149BFE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545300,"discussion_content":"认同，师傅领进门，修行看个人。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641898152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161510,"user_name":"台风骆骆","can_delete":false,"product_type":"c1","uid":1170748,"ip_address":"","ucode":"891D3599644ABD","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/3c/a595eb2a.jpg","comment_is_top":false,"comment_ctime":1576219981,"is_pvip":true,"replies":[{"id":"62171","content":"赞总结，谢谢~","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576744659,"ip_address":"","comment_id":161510,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57410794829","product_id":100035801,"comment_content":"听老师的课，每次都有收获，给老师点个赞。<br>限流方式有如下：<br>1、固定窗口<br>2、滑动窗口<br>3、漏斗，一般用队列来实现，但是会造成请求有延迟并且也对处理突发流量不友好。<br>4、令牌桶，通过往桶内定时放入一个令牌，请求过来时先要申请到令牌才能继续，否则请求失败，这个对于处理突发流量时比较友好，即平时可以攒，到突发流量时可以直接用起来，guava的ratelimiter就是令牌桶算法实现的，分布式令牌桶可以用redis来实现，可以一次申请多个而不是一个这样可以降低每次请求的开销。","like_count":13,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477741,"discussion_content":"赞总结，谢谢~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576744659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161421,"user_name":"阿土","can_delete":false,"product_type":"c1","uid":1183019,"ip_address":"","ucode":"2DBEAD80B0CA3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/2b/4814d3db.jpg","comment_is_top":false,"comment_ctime":1576203356,"is_pvip":false,"replies":[{"id":"62235","content":"guava 的RateLimit","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576756391,"ip_address":"","comment_id":161421,"utype":1}],"discussion_count":3,"race_medal":0,"score":"40230909020","product_id":100035801,"comment_content":"令牌桶以及漏桶算法的分布式实现有可以参考的么？","like_count":10,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477716,"discussion_content":"guava 的RateLimit","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576756391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1605322,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7e/ca/0689da8f.jpg","nickname":"牛味浓龙魏流","note":"","ucode":"FB58F144635B2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376223,"discussion_content":"问的不是分布式实现吗。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622024828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1157016,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a7/98/d3ddcb4a.jpg","nickname":"征里","note":"","ucode":"A840E4E38FC16C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278434,"discussion_content":"golang 官方库中自带令牌桶的限流器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591186252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177811,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1581505446,"is_pvip":false,"replies":[{"id":"69655","content":"是的，理解深刻~<br>","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1582001233,"ip_address":"","comment_id":177811,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27351309222","product_id":100035801,"comment_content":"自我感觉，流浪控制跟消息队列的原理类似。<br>都是把突发请求，采用类似于分片的方式，分批处理。降低响应速度，但是却都能响应，不会导致宕机。<br>令牌桶的思路，也偏向于地铁限流的策略：每隔一定的时间，放进来一定数量的乘客，虽然每个乘客的平均等待时间更长了，但是却防治了地铁被挤爆，发生危险。<br><br>另外老师，我想说另一个问题是，地铁的限流，我觉得不单单是防止地铁站被挤爆。我觉得主要是考虑后面站点的乘客问题。<br>假设：地铁有站点 1 2 3<br>一辆地铁能容纳1000人，地铁五分钟一趟，站点1每5分钟有客流量1000人。考虑地铁的承载能力，就算第一站全部放进来也可以，但是由于地铁乘客大概率都会乘坐2站以上，就会导致第2，3站点有大量乘客长时间等待。所以，地铁站限流也是为了给后面的站点留出一定的运载额。","like_count":6,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483553,"discussion_content":"是的，理解深刻~\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582001233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365001,"discussion_content":"令牌桶没令牌时直接拒绝，更像是上地铁时挤不上去了，等下一列地铁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617680532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365000,"discussion_content":"等级：限流接口\n地铁限流更类似于漏桶，可以排队，令牌桶没令牌时直接拒绝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617680472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174197,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1580057261,"is_pvip":false,"replies":[{"id":"68367","content":"放在本地内存里面","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1580873377,"ip_address":"","comment_id":174197,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27349861037","product_id":100035801,"comment_content":"批量获取令牌后怎么处理呢？放到服务的本地缓存中吗？还是另起一个新的redis 缓存？如果新开一个redis 缓存，和直接取区别不大吧？如果本地的内存缓存，也不见得比直接从redis 取快多少吧，可能会快一丢丢，毕竟所有的请求都直接从redis 取，压力会比较大，相当于把redis中的数据打散到各个服务再处理","like_count":6,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482330,"discussion_content":"放在本地内存里面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580873377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161876,"user_name":"大鸡腿🍗","can_delete":false,"product_type":"c1","uid":1413499,"ip_address":"","ucode":"38AF8AE00F6166","user_header":"https://static001.geekbang.org/account/avatar/00/15/91/7b/2dd4d0c1.jpg","comment_is_top":false,"comment_ctime":1576387994,"is_pvip":false,"replies":[{"id":"62159","content":"文章中也提到有guava的RateLimit","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576737583,"ip_address":"","comment_id":161876,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23051224474","product_id":100035801,"comment_content":"看到评论说业界，没有成熟的方案，这里就要捶你了。开发:rateLimit,semaphore，框架：阿里的sentiel以及它的各种限流产品","like_count":5,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477889,"discussion_content":"文章中也提到有guava的RateLimit","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576737583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161303,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1576170665,"is_pvip":false,"replies":[{"id":"62241","content":"加油~","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576756489,"ip_address":"","comment_id":161303,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18756039849","product_id":100035801,"comment_content":"   这周刚开始学习老师的课程，算法训练营刚基本结束，就继续开始知识的强化，下周老师基本上能赶上进度，学习中可能会在后续的提出一些前面课程的困惑希望老师不吝赐教。<br>   限流的用户体验太差了：令牌桶算法和漏桶算法确实不错，有生产环境用限流不过体验非常差，每年次数不多且.net系的似乎没用好的策略，故而都是暴力的增加带宽去解决。<br>    老师在课程小结前面的&quot;我们可以在每次取令牌的时候，不再只获取一个令牌，而是获取一批令牌，这样可以尽量减少请求 Redis 的次数。&quot;这个其实稍有问题，个人觉得改成&quot;我们可以在每次取令牌的时候，不再只获取一个令牌，而是通过MQ获取一批令牌，这样可以尽量减少请求 Redis 的次数。&quot;更为符合生成环境的操作。<br>    数据系统&#47;中间件存储已经不再是当初的CS或BS开发架构：高并发分布式架构其实就是要充分利用这些组件，带来的问题就是运维复杂。不过我记得陈皓老师说过&quot;运维优先，做平台的思路就是一定要能维护好&quot;，这其实是许多中小企业不重视的方面且觉得无所谓的方面，从而导致了大量设计思路的错误，造成了大量的不必要的高并发。有时加个组件就能完成-前提是你对它足够了解。<br>     今年在中小电商平台经历过其多套系统，典型的问题还是系统的合理性已经维护的问题带来了大量的高并发，数据系统中的某些组件性能优化做到后相比过去有了极其显著的提升，让慢查询比例缩短至过去10-15%，可是依然在某些峰之上还是有问题。流量控制其实涉及到的不是数据库而是数据系统和整体系统的性能维护，这是我觉得很多技术负责人没有看到的问题。<br>     期待老师后续的分享：后续的课程中会有一些前面的问题，还望老师不吝赐教-谢谢。","like_count":4,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477683,"discussion_content":"加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576756489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219438,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","nickname":"蓝魔丶","note":"","ucode":"2AE4359E263558","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":82018,"discussion_content":"推崇先进行性能优化，找到系统的极限在哪里，然后再考虑限流，不要因为代码稀烂，维护不动导致的不得不妥协选择限流来规避问题，完全就是错误的做法","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576310638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1097801,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c0/49/e2a18264.jpg","nickname":"PatHoo","note":"","ucode":"7519F3ABCB7AC6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81135,"discussion_content":"牛B啊，覃超的那个算法训练营么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576225848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250917,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1601280575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14486182463","product_id":100035801,"comment_content":"终于明白了：<br>1. 令牌桶可以应对一定的突发流量<br>2. 漏斗桶因会缓存请求数据，导致延迟增加","like_count":3},{"had_liked":false,"id":182344,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1272716,"ip_address":"","ucode":"BF4E54DD903A18","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/8c/bf9e6f2c.jpg","comment_is_top":false,"comment_ctime":1582771043,"is_pvip":false,"replies":[{"id":"71095","content":"一般不需要过期。你这种场景下，只在短时间之内会有大量请求","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1583114974,"ip_address":"","comment_id":182344,"utype":1}],"discussion_count":12,"race_medal":0,"score":"14467672931","product_id":100035801,"comment_content":"令牌桶算法中令牌是否有过期的概率？例如每秒钟限制是100,则每10ms放入一个令牌，如果令牌桶中令牌的最大值是1000。在某一端时间内一直没有流量,令牌桶中令牌到达了最大值，之后的1s内来了1000次请求，那都能获取到令牌。这样岂不是不能起到限流的作用?","like_count":3,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485312,"discussion_content":"一般不需要过期。你这种场景下，只在短时间之内会有大量请求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583114974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104191,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/3f/33c758df.jpg","nickname":"毛","note":"","ucode":"84C4B39145D9F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350852,"discussion_content":"这是令牌桶的特点，允许某种程度的突发传输，因为实际上的流量不是均匀的，而是一股一股的，可能之前请求量一直很小，这秒突然来了1000个请求，超过了我们的设置500，其实没有超过我们的处理能力，因为慢慢来还是处理的完的，这时候把之前存的令牌都拿出来，就会同时处理这1000个了；如果出现了长时间的高并发，因为令牌已经耗尽，就不会出现这种情况了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1614051420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1010922,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","nickname":"坤","note":"","ucode":"74E6838226A405","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1104191,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/3f/33c758df.jpg","nickname":"毛","note":"","ucode":"84C4B39145D9F9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579965,"discussion_content":"如果设置的 500 就是处理能力的上限呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657785403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":350852,"ip_address":""},"score":579965,"extra":""}]},{"author":{"id":1123163,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","nickname":"悟空聊架构","note":"","ucode":"C2F482A0CF8AF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383074,"discussion_content":"总数 1000，系统的承受范围内。这个总数就是来限制最高并发量的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625881117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374297,"discussion_content":"设置的最大令牌数应该是能被系统处理的，否则这个最大令牌数就设置得不合理～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621127408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022267,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/3b/791d0f5e.jpg","nickname":"王先森","note":"","ucode":"1AF1A395107479","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372298,"discussion_content":"这种短时大流量，感觉确实不能限流了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620278746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1755152,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VTPuhJb5xxuRwH1iblqrAe3De4PoETgNWibZRkLlhvszysdtpAvSPZFuYtsJfWJmoXOFFWnpR02W9NGIiammU8UPg/132","nickname":"Info_E","note":"","ucode":"97207B2CC4C776","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365119,"discussion_content":"为什么没有起到限流作用呢？不是最高就是1000了么，不会到达一万啊，1000就慢慢处理呗 反正这一秒就这么多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617712681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364997,"discussion_content":"首先明确限流算法是在系统资源有限时进行限制\n\n令牌满了说明各种资源很充裕，当然优先快速处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617679982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063957,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3c/15/71a2aca9.jpg","nickname":"李沛霖-程序猿","note":"","ucode":"10CF0DBED2D220","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280811,"discussion_content":"同疑问。积累令牌，突然来了大流量，跟没有限流一样啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591614308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074640,"avatar":"https://static001.geekbang.org/account/avatar/00/10/65/d0/c11d4a31.jpg","nickname":"滴水藏海","note":"","ucode":"9C1F9C91189F69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":238978,"discussion_content":"超过令牌桶最大数，新增令牌会丢弃的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587264187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1272716,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6b/8c/bf9e6f2c.jpg","nickname":"Lee","note":"","ucode":"BF4E54DD903A18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193321,"discussion_content":"那这短时间内不还是没起到限流作用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583146156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1679880,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a2/08/9db00d06.jpg","nickname":"Y","note":"","ucode":"0CED0858B534E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":192752,"discussion_content":"同疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583078998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215664,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1589071735,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10179006327","product_id":100035801,"comment_content":"这些原理都知道呀😄感觉有些浅尝辄止啦<br>他强由他强，清风拂山岗，他横由他横，明月照大江 。——应该出自《九阳神功》吧!<br>张无忌可没练《九阴真经》","like_count":2,"discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374298,"discussion_content":"说的是九阳真经","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621127926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294466,"discussion_content":"浅尝辄止","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595899118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265522,"discussion_content":"哈哈哈😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589415402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196254,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1585267526,"is_pvip":false,"replies":[{"id":"74990","content":"在调用端做的多，服务端也会做","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1585610832,"ip_address":"","comment_id":196254,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10175202118","product_id":100035801,"comment_content":"限流一般在rpc调用端做吗？还是被调用端？","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489251,"discussion_content":"在调用端做的多，服务端也会做","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585610832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161514,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1576220656,"is_pvip":false,"replies":[{"id":"62170","content":"是通用的做法","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576744648,"ip_address":"","comment_id":161514,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10166155248","product_id":100035801,"comment_content":"这两个方法也是阿里在用的方法 阿里有一本书叫决战双11中提到的限流 就是这两个方法","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477744,"discussion_content":"是通用的做法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576744648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161310,"user_name":"阿土","can_delete":false,"product_type":"c1","uid":1183019,"ip_address":"","ucode":"2DBEAD80B0CA3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/2b/4814d3db.jpg","comment_is_top":false,"comment_ctime":1576175178,"is_pvip":false,"replies":[{"id":"62240","content":"可以的，固定窗口应该会有所说的边界问题","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576756467,"ip_address":"","comment_id":161310,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10166109770","product_id":100035801,"comment_content":"前不久做了一个一句话需求：同一个用户每5秒只能提交一次订单，每天只能提交最多200次订单。采用的方式就是固定窗口请求计数的粗爆算法，简单快捷。最终每天的请求量汇总用来做数据分析。我在考虑是不是可以用令牌桶算法来实现地更优雅一些呢？","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477687,"discussion_content":"可以的，固定窗口应该会有所说的边界问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576756467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1092169,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","nickname":"落尘kira","note":"","ucode":"D203B519E43F85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373217,"discussion_content":"比较两次提交间隔时间即可,甚至都用不到上述提到的限流算法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620653072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365005,"discussion_content":"这个需求没有边界问题，不需要用窗口解决，只需要有限几个变量\n5s只能提交一次订单，记录每次成功提交订单时间，提交时判断，提交成功则更新时间\ntotal记录每天（0:00~24:00）提交订单的总数，凌晨置0","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617680775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225008,"user_name":"李沛霖-程序猿","can_delete":false,"product_type":"c1","uid":1063957,"ip_address":"","ucode":"10CF0DBED2D220","user_header":"https://static001.geekbang.org/account/avatar/00/10/3c/15/71a2aca9.jpg","comment_is_top":false,"comment_ctime":1591614218,"is_pvip":false,"replies":[{"id":"83118","content":"令牌的数量有最大值的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1591803483,"ip_address":"","comment_id":225008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886581514","product_id":100035801,"comment_content":"您好，这里有疑问，限流方法中，漏桶的方法可以设置成服务的qps能接受的速度，超过服务的接受能力，就在漏桶积压了。<br>但是令牌的方式，如果提前在令牌池积累令牌，流量来了，拿到令牌的数量突然增加，超过服务的接受能力怎么办呢？","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497692,"discussion_content":"令牌的数量有最大值的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591803483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161556,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1576230045,"is_pvip":false,"replies":[{"id":"62168","content":"有一些令牌桶算法的实现","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576744620,"ip_address":"","comment_id":161556,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5871197341","product_id":100035801,"comment_content":"关于动态限流，目前业界应该没有比较成熟的方案，可以借鉴TCP 协议的拥塞控制的算法。TCP 使用 RTT - Round Trip Time 来探测网络的延时和性能，从而设定相应的“滑动窗口”的大小，以让发送的速率和网络的性能相匹配，可以借鉴在我们的流控技术中。","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477761,"discussion_content":"有一些令牌桶算法的实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576744620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211909,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7e/05/431d380f.jpg","nickname":"鸠摩·智","note":"","ucode":"6CD93CD1DB6955","race_medal":5,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390326,"discussion_content":"tcp中有拥塞窗口和滑动窗口，你确定采样rtt是为了调整滑动窗口吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629780692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161555,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1576229140,"is_pvip":false,"replies":[{"id":"62169","content":"额 中国式英语","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576744639,"ip_address":"","comment_id":161555,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5871196436","product_id":100035801,"comment_content":"很详细，就是对鲁棒性这个翻译比较不满，不知道是不是业界对robust的统一叫法了。第一眼看真是不明觉厉:(","like_count":1,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477760,"discussion_content":"额 中国式英语","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576744639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341728,"user_name":"nakata","can_delete":false,"product_type":"c1","uid":2050146,"ip_address":"","ucode":"D4A564F2E399BF","user_header":"https://static001.geekbang.org/account/avatar/00/1f/48/62/07ec0009.jpg","comment_is_top":false,"comment_ctime":1649810546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649810546","product_id":100035801,"comment_content":"你好，请教下，对于令牌桶算法，如果使用场景为每秒限制的请求数n比较大，如2W, 相当于每1&#47;20000s要填一次令牌，该处理本身是否也比较消耗性能？","like_count":0},{"had_liked":false,"id":318631,"user_name":"青年祭司","can_delete":false,"product_type":"c1","uid":1259156,"ip_address":"","ucode":"C88EDAE3FF09AE","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/94/0b969588.jpg","comment_is_top":false,"comment_ctime":1635379513,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1635379513","product_id":100035801,"comment_content":"令牌算法不能缓存请求，而漏桶算法可以，那么是不是漏桶算法在遇到突发流量的时候可以有更少的拒绝请求","like_count":0},{"had_liked":false,"id":310318,"user_name":"小胡","can_delete":false,"product_type":"c1","uid":2397964,"ip_address":"","ucode":"1E0DD4138E9D0E","user_header":"","comment_is_top":false,"comment_ctime":1630593156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630593156","product_id":100035801,"comment_content":"概念性东西太多，最好能像以前一样用几个示例具体讲讲一下到底应该怎么用","like_count":0},{"had_liked":false,"id":301787,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1625881973,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625881973","product_id":100035801,"comment_content":"之前的系统中，用的 PHP 框架，自己做了一套固定时间窗口限流，另外用 php-resque 队列实现了漏桶限流。<br>之前写过一篇文章，欢迎各位指点：https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;jl4RNTevOPf_shwlJ2pUhg。<br>《东汉末年，他们把「服务雪崩」玩到了极致（干货）》","like_count":0},{"had_liked":false,"id":238206,"user_name":"沧海一声笑哈哈","can_delete":false,"product_type":"c1","uid":1345064,"ip_address":"","ucode":"4086BD04D68673","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ericCme76GR5tsxktQjbJgIurEvjqpsia58HqagibrhaGshiaMvvTMKqBh6XWQdwBoJTV2oB4enYjBsCw/132","comment_is_top":false,"comment_ctime":1596095213,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1596095213","product_id":100035801,"comment_content":"我利用redis的list数据结构，一开始在列表里push 10个数字，在秒杀的时候，每次pop一个数字，代表秒杀成功，这个算令牌桶算法吗","like_count":0,"discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365006,"discussion_content":"也是限流，永远的秒杀的商品数量，但很明显不是漏桶或者令牌桶算法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617680966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181196,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1582515759,"is_pvip":false,"replies":[{"id":"71116","content":"就像你说的，令牌桶在短时间之内会有大量的流量","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1583115818,"ip_address":"","comment_id":181196,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582515759","product_id":100035801,"comment_content":"有几个问题<br>首先，文中说滑动窗口无法限制集中流量，把滑动步长设置小一点，比如1ms一次，限制1ms的访问限制次数，应该可以有效的限制集中流量吧?<br>令牌桶为什么能够限制集中流量呢，比如某一时刻，令牌桶令牌是满的，突然来了大流量，比如说令牌桶中的令牌是10W,一样无法限制这个瞬时的突发流量。<br>请问老师，令牌桶算法有什么不足吗<br>","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484952,"discussion_content":"就像你说的，令牌桶在短时间之内会有大量的流量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583115818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173777,"user_name":"梁中华","can_delete":false,"product_type":"c1","uid":1006789,"ip_address":"","ucode":"52FE40242CBAD0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","comment_is_top":false,"comment_ctime":1579683645,"is_pvip":true,"replies":[{"id":"67351","content":"应该不会的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1579693258,"ip_address":"","comment_id":173777,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1579683645","product_id":100035801,"comment_content":"令牌算法中，一次性从redis获取一批令牌，会不会造成流量不均呢？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482203,"discussion_content":"应该不会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579693258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166027,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1577366104,"is_pvip":false,"replies":[{"id":"63335","content":"马桶是…… 什么鬼","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577417893,"ip_address":"","comment_id":166027,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577366104","product_id":100035801,"comment_content":"马桶方式比较好。","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479358,"discussion_content":"马桶是…… 什么鬼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577417893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164549,"user_name":"longslee","can_delete":false,"product_type":"c1","uid":1465986,"ip_address":"","ucode":"C24E32E5B1B6F5","user_header":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","comment_is_top":false,"comment_ctime":1577025828,"is_pvip":false,"replies":[{"id":"63060","content":"这个比较难吧。。","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577240779,"ip_address":"","comment_id":164549,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577025828","product_id":100035801,"comment_content":"打卡。 使用令牌桶，如何确保一个消费端一次不正确的消耗了很多个令牌呢？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478811,"discussion_content":"这个比较难吧。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577240779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163982,"user_name":"Keith","can_delete":false,"product_type":"c1","uid":1193337,"ip_address":"","ucode":"B40774090714D1","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/79/21647da2.jpg","comment_is_top":false,"comment_ctime":1576838911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576838911","product_id":100035801,"comment_content":"接着上个问题(好像二次回复通知不到作者), 所以相对于漏桶算法, 为什么推荐使用令牌桶算法呢?","like_count":0},{"had_liked":false,"id":163434,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1335155,"ip_address":"","ucode":"CB0264C4D3FE17","user_header":"https://static001.geekbang.org/account/avatar/00/14/5f/73/bb3dc468.jpg","comment_is_top":false,"comment_ctime":1576720964,"is_pvip":false,"replies":[{"id":"62126","content":"你在请求的时候就要消耗令牌，如果请求的时候发现令牌没有了，就是消耗完了","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576734363,"ip_address":"","comment_id":163434,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1576720964","product_id":100035801,"comment_content":"原话：我们可以在每次取令牌的时候，不再只获取一个令牌，而是获取一批令牌，这样可以尽量减少请求 Redis 的次数。<br>那么获取的一批令牌没使用完，怎么处理呢？或者是基于什么去判断这一批令牌的数量？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478390,"discussion_content":"你在请求的时候就要消耗令牌，如果请求的时候发现令牌没有了，就是消耗完了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576734363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1398577,"avatar":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","nickname":"ちよくん","note":"","ucode":"B71E9B16E4408F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":153798,"discussion_content":"批量获取增加了处理的复杂度，而且获取的令牌只有保存在了服务本地缓存中才算减轻了redis 压力吧，如果还是放到redis 中和直接单个取没太大区别？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580056940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161785,"user_name":"Keith","can_delete":false,"product_type":"c1","uid":1193337,"ip_address":"","ucode":"B40774090714D1","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/79/21647da2.jpg","comment_is_top":false,"comment_ctime":1576326969,"is_pvip":false,"replies":[{"id":"62227","content":"是说会允许有突发的流量","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576756031,"ip_address":"","comment_id":161785,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1576326969","product_id":100035801,"comment_content":"&quot;而令牌桶算法可以在令牌中暂存一定量的令牌，能够应对一定的突发流量，所以一般我会使用令牌桶算法来实现限流方案&quot;, 相对于漏桶算法, 令牌桶算法的优势是保证请求的实时处理吗? 怎么是能够应对一定的突发流量? 漏桶算法也可以应对一定的突发流量, 而且更多(至少多一桶), &quot;能够应对一定的突发流量&quot;这个理由有问题吧?","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477858,"discussion_content":"是说会允许有突发的流量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576756031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193337,"avatar":"https://static001.geekbang.org/account/avatar/00/12/35/79/21647da2.jpg","nickname":"Keith","note":"","ucode":"B40774090714D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91538,"discussion_content":"所以相对于漏桶算法, 为什么推荐使用令牌桶算法呢?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576838867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161453,"user_name":"Loony","can_delete":false,"product_type":"c1","uid":1643469,"ip_address":"","ucode":"7A964196C03D77","user_header":"","comment_is_top":false,"comment_ctime":1576208670,"is_pvip":false,"replies":[{"id":"62167","content":"这个只是获取多个令牌，不会影响请求的下发的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1576744593,"ip_address":"","comment_id":161453,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576208670","product_id":100035801,"comment_content":"每次获取一批令牌数，如何确保请求的准确下发呢？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477723,"discussion_content":"这个只是获取多个令牌，不会影响请求的下发的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576744593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}