{"id":2751,"title":"38 | 编程范式游记（9）- 编程的本质","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>前面我们讲了各式各样的不同语言的编程范式，从C语言的泛型，讲到C++的泛型，再讲到函数式的 Map/Reduce/Filter，以及 Pipeline 和 Decorator，还有面向对象的多态通过依赖接口而不是实现的桥接模式、策略模式和代理模式，以及面向对象的IoC，还有JavaScript的原型编程在运行时对对象原型进行修改，以及Go语言的委托模式……</p><p>所有的这一切，不知道你是否看出一些端倪，或是其中的一些共性来了？</p><h1>两篇论文</h1><p>1976年，瑞士计算机科学家，Algol W，Modula，Oberon和Pascal语言的设计师 <a href=\"https://en.wikipedia.org/wiki/Niklaus_Wirth\">Niklaus Emil Wirth</a>写了一本非常经典的书《<a href=\"http://www.ethoberon.ethz.ch/WirthPubl/AD.pdf\">Algorithms + Data Structures = Programs</a>》（链接为1985年版） ，即算法 + 数据结构 = 程序。</p><p>这本书主要写了算法和数据结构的关系，这本书对计算机科学的影响深远，尤其在计算机科学的教育中。</p><p>1979年，英国逻辑学家和计算机科学家 <a href=\"https://en.wikipedia.org/wiki/Robert_Kowalski\">Robert Kowalski</a> 发表论文 <a href=\"https://www.doc.ic.ac.uk/~rak/papers/algorithm%20=%20logic%20+%20control.pdf\">Algorithm = Logic + Control</a>，并且主要开发“逻辑编程”相关的工作。</p><p>Robert Kowalski是一位逻辑学家和计算机科学家，从20世纪70年代末到整个80年代致力于数据库的研究，并在用计算机证明数学定理等当年的重要应用上颇有建树，尤其是在逻辑、控制和算法等方面提出了革命性的理论，极大地影响了数据库、编程语言，直至今日的人工智能。</p><!-- [[[read_end]]] --><p>Robert Kowalski在这篇论文里提到：</p><blockquote>\n<p>An algorithm can be regarded as consisting of a logic component, which specifies the knowledge to be used in solving problems, and a control component, which determines the problem-solving strategies by means of which that knowledge is used. The logic component determines the meaning of the algorithm whereas the control component only affects its efficiency. The efficiency of an algorithm can often be improved by improving the control component without changing the logic of the algorithm. We argue that computer programs would be more often correct and more easily improved and modified if their logic and control aspects were identified and separated in the program text.</p>\n</blockquote><p>翻译过来的意思大概就是：</p><blockquote>\n<p>任何算法都会有两个部分， 一个是 Logic 部分，这是用来解决实际问题的。另一个是Control部分，这是用来决定用什么策略来解决问题。Logic部分是真正意义上的解决问题的算法，而Control部分只是影响解决这个问题的效率。程序运行的效率问题和程序的逻辑其实是没有关系的。我们认为，如果将 Logic 和 Control 部分有效地分开，那么代码就会变得更容易改进和维护。</p>\n</blockquote><p>注意，最后一句话是重点——<strong>如果将 Logic 和 Control 部分有效地分开，那么代码就会变得更容易改进和维护。</strong></p><h1>编程的本质</h1><p>两位老先生的两个表达式：</p><ul>\n<li>Programs = Algorithms + Data Structures</li>\n<li>Algorithm = Logic + Control</li>\n</ul><p>第一个表达式倾向于数据结构和算法，它是想把这两个拆分，早期都在走这条路。他们认为，如果数据结构设计得好，算法也会变得简单，而且一个好的通用的算法应该可以用在不同的数据结构上。</p><p>第二个表达式则想表达的是数据结构不复杂，复杂的是算法，也就是我们的业务逻辑是复杂的。我们的算法由两个逻辑组成，一个是真正的业务逻辑，另外一种是控制逻辑。程序中有两种代码，一种是真正的业务逻辑代码，另一种代码是控制我们程序的代码，叫控制代码，这根本不是业务逻辑，业务逻辑不关心这个事情。</p><p>算法的效率往往可以通过提高控制部分的效率来实现，而无须改变逻辑部分，也就无须改变算法的意义。举个阶乘的例子， X(n)！= X(n) * X(n-1) * X(n-2) * X(n-3)* … * 3 * 2 * 1。逻辑部分用来定义阶乘：1） 1是0的阶乘； 2）如果v是x的阶乘，且u=v*(x+1)，那么u是x+1的阶乘。</p><p>用这个定义，既可以从上往下地将x+1的阶乘缩小为先计算x的阶乘，再将结果乘以1（recursive，递归），也可以由下而上逐个计算一系列阶乘的结果（iteration，遍历）。</p><p>控制部分用来描述如何使用逻辑。最粗略的看法可以认为“控制”是解决问题的策略，而不会改变算法的意义，因为算法的意义是由逻辑决定的。对同一个逻辑，使用不同控制，所得到的算法，本质是等价的，因为它们解决同样的问题，并得到同样的结果。</p><p>因此，我们可以通过逻辑分析，来提高算法的效率，保持它的逻辑，而更好地使用这一逻辑。比如，有时用自上而下的控制替代自下而上，能提高效率。而将自上而下的顺序执行改为并行执行，也会提高效率。</p><p>总之，通过这两个表达式，我们可以得出：</p><p><strong>Program = Logic + Control + Data Structure</strong></p><p>前面讲了这么多的编程范式，或是程序设计的方法。其实，我们都是在围绕着这三件事来做的。比如：</p><ul>\n<li>\n<p>就像函数式编程中的Map/Reduce/Filter，它们都是一种控制。而传给这些控制模块的那个Lambda表达式才是我们要解决的问题的逻辑，它们共同组成了一个算法。最后，我再把数据放在数据结构里进行处理，最终就成为了我们的程序。</p>\n</li>\n<li>\n<p>就像我们Go语言的委托模式的那个Undo示例一样。Undo这个事是我们想要解决的问题，是Logic，但是Undo的流程是控制。</p>\n</li>\n<li>\n<p>就像我们面向对象中依赖于接口而不是实现一样，接口是对逻辑的抽象，真正的逻辑放在不同的具现类中，通过多态或是依赖注入这样的控制来完成对数据在不同情况下的不同处理。</p>\n</li>\n</ul><p>如果你再仔细地结合我们之前讲的各式各样的编程范式来思考上述这些概念的话，你是否会觉得，所有的语言或编程范式都在解决上面的这些问题。也就是下面的这几个事。</p><ul>\n<li>\n<p>Control是可以标准化的。比如：遍历数据、查找数据、多线程、并发、异步等，都是可以标准化的。</p>\n</li>\n<li>\n<p>因为Control需要处理数据，所以标准化Control，需要标准化Data Structure，我们可以通过泛型编程来解决这个事。</p>\n</li>\n<li>\n<p>而Control还要处理用户的业务逻辑，即Logic。所以，我们可以通过标准化接口/协议来实现，我们的Control模式可以适配于任何的Logic。</p>\n</li>\n</ul><p>上述三点，就是编程范式的本质。</p><ul>\n<li>\n<p><strong>有效地分离Logic、Control和Data是写出好程序的关键所在！</strong></p>\n</li>\n<li>\n<p><strong>有效地分离Logic、Control和Data是写出好程序的关键所在！</strong></p>\n</li>\n<li>\n<p><strong>有效地分离Logic、Control和Data是写出好程序的关键所在！</strong></p>\n</li>\n</ul><p>我们在写代码当中，就会看到好多这种代码，会把控制逻辑和业务逻辑放在一块。里面有些变量和流程是跟业务相关的，有些是不相关的。业务逻辑决定了程序的复杂度，业务逻辑本身就复杂，你的代码就不可能写得简单。</p><p>Logic，它是程序复杂度的下限，然后，我们为了控制程序，需要再搞出很多控制代码，于是Logic+Control的相互交织成为了最终的程序复杂度。</p><h1>把逻辑和控制混淆的示例</h1><p>我们来看一个示例，这是我在leetcode上做的一道题，这是通配符匹配，给两个字符串匹配。需求如下：</p><pre><code>通配符匹配\nisMatch(&quot;aa&quot;,&quot;a&quot;) → false\nisMatch(&quot;aa&quot;,&quot;aa&quot;) → true\nisMatch(&quot;aaa&quot;,&quot;aa&quot;) → false\nisMatch(&quot;aa&quot;, &quot;*&quot;) → true\nisMatch(&quot;aa&quot;, &quot;a*&quot;) → true\nisMatch(&quot;ab&quot;, &quot;?*&quot;) → true\nisMatch(&quot;aab&quot;, &quot;c*a*b&quot;) → false\n</code></pre><p>现在你再看看我写出来的代码：</p><pre><code>bool isMatch(const char *s, const char *p) {\n\tconst char *last_s = NULL;\n\tconst char *last_p = NULL;\n\t\n\twhile ( *s != '\\0' ) {\n\t\tif ( *p == '*' ) {\n\t\t\tp++;\n\t\t\tif ( *p == '\\0' ) return true;\n\t\t\tlast_s = s;\n\t\t\tlast_p = p;\n\t\t} else if ( *p == '?' || *s == *p ) {\n\t\t\ts++;\n\t\t\tp++;\n\t\t} else if ( last_s != NULL ） {\n\t\t\tp = last_p;\n\t\t\ts = ++last_s;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\twhile ( *p == '*' ) p++;\n\treturn *p == '\\0';\n}\n</code></pre><p>我也不知道我怎么写出来的，好像是为了要通过，我需要关注于性能，你看，上面这段代码有多乱。如果我不写注释你可能都看不懂了。就算我写了注释以后，你敢改吗？你可能连动都不敢动（哈哈）。上面这些代码里面很多都不是业务逻辑，是用来控制程序的逻辑。</p><p>业务逻辑是相对复杂的，但是控制逻辑跟业务逻辑交叉在一块，虽然代码写得不多，但是这个代码已经够复杂了。两三天以后，我回头看，我到底写的什么，我也不懂，为什么会写成这样？我当时脑子是怎么想的？我完全不知道。我现在就是这种感觉。</p><p>那么，怎么把上面那段代码写得更好一些呢？</p><ul>\n<li>\n<p>首先，我们需要一个比较通用的状态机（NFA，非确定有限自动机，或者DFA，确定性有限自动机），来维护匹配的开始和结束的状态。这属于Control。</p>\n</li>\n<li>\n<p>如果我们做得好的话，还可以抽象出一个像程序的文法分析一样的东西。这也是Control。</p>\n</li>\n<li>\n<p>然后，我们把匹配 <code>*</code> 和 <code>?</code> 的算法形成不同的匹配策略。</p>\n</li>\n</ul><p>这样，我们的代码就会变得漂亮一些了，而且也会快速一些。</p><p>这里有篇正则表达式的高效算法的论文<a href=\"https://swtch.com/~rsc/regexp/regexp1.html\">Regular Expression Matching Can Be Simple And Fast</a>，推荐你读一读，里面有相关的实现，我在这里就不多说了。</p><p>这里，想说的程序的本质是Logic+Control+Data，而其中，Logic和Control是关键。注意，这个和系统架构也有相通的地方，逻辑是你的业务逻辑，逻辑过程的抽象，加上一个由术语表示的数据结构的定义，控制逻辑跟你的业务逻辑是没关系的，你控制，它执行。</p><p>控制一个程序流转的方式，即程序执行的方式，并行还是串行，同步还是异步，以及调度不同执行路径或模块，数据之间的存储关系，这些和业务逻辑没有关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/92/4a8c7c77df1f1a6b3ff701577986ee92.png?wh=1768*555\" alt=\"\"></p><p>如果你看过那些混乱不堪的代码，你会发现其中最大的问题是我们把这Logic和Control纠缠在一起了，所以会导致代码很混乱，难以维护，Bug很多。绝大多数程序复杂的原因就是这个问题，就如同下面这幅图中表现的情况一样。</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/e2/5f45a22a027375c5960f5a6b31159ce2.png?wh=755*567\" alt=\"\"></p><h1>再来一个简单的示例</h1><p>这里给一个简单的示例。</p><p>下面是一段检查用户表单信息的常见代码，我相信这样的代码你见得多了。</p><pre><code>function check_form_x() {\n    var name = $('#name').val();\n    if (null == name || name.length &lt;= 3) {\n        return { status : 1, message: 'Invalid name' };\n    }\n \n    var password = $('#password').val();\n    if (null == password || password.length &lt;= 8) {\n        return { status : 2, message: 'Invalid password' };\n    }\n \n    var repeat_password = $('#repeat_password').val();\n    if (repeat_password != password.length) {\n        return { status : 3, message: 'Password and repeat password mismatch' };\n    }\n \n    var email = $('#email').val();\n    if (check_email_format(email)) {\n        return { status : 4, message: 'Invalid email' };\n    }\n \n    ...\n \n    return { status : 0, message: 'OK' };\n \n}\n</code></pre><p>但其实，我们可以做一个DSL+一个DSL的解析器，比如：</p><pre><code>var meta_create_user = {\n    form_id : 'create_user',\n    fields : [\n        { id : 'name', type : 'text', min_length : 3 },\n        { id : 'password', type : 'password', min_length : 8 },\n        { id : 'repeat-password', type : 'password', min_length : 8 },\n        { id : 'email', type : 'email' }\n    ]\n};\n \nvar r = check_form(meta_create_user);\n</code></pre><p>这样，DSL的描述是“Logic”，而我们的 <code>check_form</code> 则成了“Control”，代码就非常好看了。</p><h1>小结</h1><p>代码复杂度的原因：</p><ul>\n<li>业务逻辑的复杂度决定了代码的复杂度；</li>\n<li>控制逻辑的复杂度 + 业务逻辑的复杂度  ==&gt; 程序代码的混乱不堪；</li>\n<li>绝大多数程序复杂混乱的根本原因：<strong>业务逻辑与控制逻辑的耦合</strong>。</li>\n</ul><p>如何分离control和logic呢？我们可以使用下面的这些技术来解耦。</p><ul>\n<li>\n<p><strong>State Machine</strong></p>\n<ul>\n<li>状态定义</li>\n<li>状态变迁条件</li>\n<li>状态的action</li>\n</ul>\n</li>\n<li>\n<p><strong>DSL – Domain Specific Language</strong></p>\n<ul>\n<li>HTML，SQL，Unix Shell Script，AWK，正则表达式……</li>\n</ul>\n</li>\n<li>\n<p><strong>编程范式</strong></p>\n<ul>\n<li>面向对象：委托、策略、桥接、修饰、IoC/DIP、MVC……</li>\n<li>函数式编程：修饰、管道、拼装</li>\n<li>逻辑推导式编程：Prolog</li>\n</ul>\n</li>\n</ul><p><strong>这就是编程的本质：</strong></p><ul>\n<li><strong>Logic部分才是真正有意义的（What）</strong></li>\n<li><strong>Control部分只是影响Logic部分的效率（How）</strong></li>\n</ul><p>以下是《编程范式游记》系列文章的目录，方便你了解这一系列内容的全貌。</p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/301\">01 | 编程范式游记：起源</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/303\">02 | 编程范式游记：泛型编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2017\">03 | 编程范式游记：类型系统和泛型的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2711\">04 | 编程范式游记：函数式编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2723\">05 | 编程范式游记：修饰器模式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2729\">06 | 编程范式游记：面向对象编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2741\">07 | 编程范式游记：基于原型的编程范式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2748\">08 | 编程范式游记：Go 语言的委托模式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2751\">09 | 编程范式游记：编程的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2752\">10 | 编程范式游记：逻辑编程范式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2754\">11 | 编程范式游记：程序世界里的编程范式</a></li>\n</ul>","comments":[{"had_liked":false,"id":9178,"user_name":"mingshun","can_delete":false,"product_type":"c1","uid":1096508,"ip_address":"","ucode":"731C2DCEEBB655","user_header":"","comment_is_top":false,"comment_ctime":1526653172,"is_pvip":false,"replies":[{"id":"2939","content":"赞👍","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1526978115,"ip_address":"","comment_id":9178,"utype":1}],"discussion_count":2,"race_medal":0,"score":"289289462004","product_id":100002201,"comment_content":"自从写业务的这几年来，做得最多的就是分离 Logic 和 Control。无论是编写新代码还是重构旧代码，都是从这个方向努力，目标是写出让团队里每个人都能轻松看得懂的代码。也用过许多语言，像 C、C++、Java、Golang、Lua、JS、Ruby、Elixir、Red……虽然思维模式和习惯玩法各异，但编程的本质是一样的。毕竟代码写出来是给人看的。如果人都很难看懂，又谈何优化和改进代码？！","like_count":68,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417989,"discussion_content":"赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526978115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413395,"discussion_content":"分离关注点，业务与技术分离，各种中间件，框架，都是在剥离与业务无关的逻辑，具体面向对象编程的设计模型也类似，剥离控制和逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636463520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":2856,"user_name":"楊_宵夜","can_delete":false,"product_type":"c1","uid":1019302,"ip_address":"","ucode":"7BA0CADC5F23BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","comment_is_top":false,"comment_ctime":1518492212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"186202085940","product_id":100002201,"comment_content":"Roger的留言, 本人不才, 想试着从&quot;Control标准化&quot;和&quot;代码可重用&quot;的角度来回答下:<br>仔细看那个检查表单信息的例子, 叫做check_form_XXX(), 是针对特定的一个form的, 那么自然而然会有check_form_YYY()和check_form_ZZZ()等等...<br><br>所以说, 这个form校验例子中, <br>1. 最简单的Control部分就是遍历表单fields. <br>2. 然后, 虽然是不同的field, 但相同的type是做相同逻辑的校验;<br>3. 如果还想提供&quot;将整个form拆成不同的part, 用并发来遍历&quot;这种Control的话, 抽象出来的check_form()函数还可以提供并发的版本; <br><br>那么单单是以上3点, 全部都是&quot;可标准化&quot;的, 并且&quot;可重用&quot;的, 并不影响&lt;业务的logic&gt;;  <br><br>那么, 当有了check_from()这个Control之后, 真正决定业务的&lt;业务的logic&gt;, 有:<br>1. 每个field分别是什么type? 是text? 是password? 还是email?<br>2. 每个field的最低长度是多少? 类似的还有每个field的最大长度?<br>3. 等等...<br><br>以上的问题, 决定了这个field通过校验的条件是什么?<br>而这个条件是无法&quot;标准化&quot;的, 因为一个复杂系统的每个form的field不可能是一模一样的; <br>所以这些&quot;条件&quot;, 就由陈老师写出的DSL来提供; <br><br>因此最后就变成了, check_form()提供一套&quot;标准&quot;来校验每个表单, 而每个表单只需要告诉check_form()说: &quot;我有这些东西, 你帮我校验一下&quot;; 而这样的说法, 又有了些委托模式的味道了;<br><br>总而言之, 个人愚见: Control和Logic部分的一个肉眼可见的界线就是: 是否可以标准化?? <br>因本人较熟悉Java, 再扩展来说, 全局的工具类就是一种全局Control, 而一个类中的private方法大致可以认为是这个类中的Control. (仅为一种思路, 未经推敲);","like_count":44},{"had_liked":false,"id":2672,"user_name":"SamZhou","can_delete":false,"product_type":"c1","uid":1048723,"ip_address":"","ucode":"15485DD4401870","user_header":"https://static001.geekbang.org/account/avatar/00/10/00/93/a2cc5be6.jpg","comment_is_top":false,"comment_ctime":1518269629,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"113187419325","product_id":100002201,"comment_content":"是处理什么（logic），怎么做（control），沟通方式（数据结构）？","like_count":26,"discussions":[{"author":{"id":1273920,"avatar":"https://static001.geekbang.org/account/avatar/00/13/70/40/ce062d99.jpg","nickname":"丝竹乱耳","note":"","ucode":"933A41A394B0E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412805,"discussion_content":"这么说的话 这么做不可以去掉logic 算法就是让你怎么做的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636294173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105526,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1561021800,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"48805662056","product_id":100002201,"comment_content":"个人觉得 Data Structure 才是 What, Logic 是 do What , Control 是 how to do","like_count":12,"discussions":[{"author":{"id":1598564,"avatar":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","nickname":"劳码识途","note":"","ucode":"7AEF4D9407F097","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302714,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599013873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183250,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1582982277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40237687941","product_id":100002201,"comment_content":"本文核心：<br>1：Program = Logic + Control + Data Structure<br>2：有效地分离 Logic、Control 和 Data 是写出好程序的关键所在！<br>Logic 部分才是真正有意义的（What）<br>Control 部分只是影响 Logic 部分的效率（How）<br>3：理解Logic和Control的本质是关键，这样才能进行她们的解藕，才能使程序更易读更易维护和扩展。<br>那什么是Logic？什么是Control？他们之间又有什么界限呢？<br>Control是可以被标准化的，是可以复用的，是实现业务逻辑具体怎么走的代码。<br>Logic是具有个性化的，不能被标准化，或者说不知道怎么标准化，因为规律性有序，不具有复用性。<br><br>这节需要多看几次，价值连城。","like_count":10},{"had_liked":false,"id":3855,"user_name":"vvsuperman","can_delete":false,"product_type":"c1","uid":1021518,"ip_address":"","ucode":"F393A3FB894124","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/4e/2acbc3a8.jpg","comment_is_top":false,"comment_ctime":1520845688,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"40175551352","product_id":100002201,"comment_content":"有没推荐阅读，逻辑和控制的意思实在不太懂","like_count":9,"discussions":[{"author":{"id":1273920,"avatar":"https://static001.geekbang.org/account/avatar/00/13/70/40/ce062d99.jpg","nickname":"丝竹乱耳","note":"","ucode":"933A41A394B0E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412807,"discussion_content":"恕我直言 别看这帮你人 都在留言 他们也不懂。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636294217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1402127,"avatar":"https://static001.geekbang.org/account/avatar/00/15/65/0f/770eba2d.jpg","nickname":"Kay","note":"","ucode":"A5A6E3655FEC2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337181,"discussion_content":"可能是代码敲的不多。。。还是不太理解实际中怎么操作","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608817704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2048471,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ibFW2NOMIgKfZ6bZ4qdhbvAMNicccxtsjeoZQZGRdehSL3yicPzUQca97IeBwriaAs8CziaFl2iaqT6QhlACFsvHz4kw/132","nickname":"勾机","note":"","ucode":"5356720C4135C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287166,"discussion_content":"逻辑即你要干什么事情，控制即你要怎么干这件事情","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593393451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2941058,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/e0/82/17d214df.jpg","nickname":"李海洋","note":"","ucode":"5D642B3F9BF09B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558571,"discussion_content":"最后一个例子，check_form与Logic无关，你无需看它就能明白整个代码在做什么，所以是Control","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648385386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":25076,"user_name":"pigparadise","can_delete":false,"product_type":"c1","uid":1155535,"ip_address":"","ucode":"EF4A319475A3AA","user_header":"","comment_is_top":false,"comment_ctime":1537242453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35896980821","product_id":100002201,"comment_content":"以前做codereview时老和同事说有些逻辑和另一些逻辑分离，复杂度能更低，数据更安全，但文中logic和control的定义更加清晰，对我也是一级记当头棒喝，该系列最佳！","like_count":8},{"had_liked":false,"id":107287,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1561511576,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31626282648","product_id":100002201,"comment_content":"程序=算法＋数据结构<br>算法=逻辑＋控制<br>如果将 Logic 和 Control 部分有效地分开，那么代码就会变得更容易改进和维护<br>大部分混乱的代码就是把逻辑和控制混在一起了，导致难以阅读和维护。而逻辑才是我们真正要关心的问题，他解决了做什么。控制只是操作计算机的具体实现，解决了怎么做。二者关系就好像做正确的事和把事情做正确。其实我们真正关注的只是正确的事，这是战略层面，而把事情做正确是执行层面，有效解除二者的耦合是改善的重要一步","like_count":7,"discussions":[{"author":{"id":2617777,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/bkUdrjoqBHstzqFFyDdEcYLX81v1G9c68ZCeqXCI4SnRZ7nlaiawQWAZaNgGR3gN77vAc054IibL2A2I2Iqic4ibAw/132","nickname":"李勇杰","note":"","ucode":"9032E4A9C19A51","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378543,"discussion_content":"事是逻辑，做事是控制\n事是战略，做事是执行\n正确与否 是对逻辑或战略 和执行过程或执行结果的评价\n正确的事 +把事做正确=正确的结果\n把事做正确 不一定是正确的做事\n正确的做事 就是把事和做事解耦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623283918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8413,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1526189676,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"31590960748","product_id":100002201,"comment_content":"曾都梦想仗剑走天涯，哦不，是精通一门语言，然后一通百通吃遍所有语言。可以结合王垠的&lt;如何掌握所有的程序语言&gt;一起看看。<br><br>http:&#47;&#47;www.yinwang.org&#47;blog-cn&#47;2017&#47;07&#47;06&#47;master-pl","like_count":8},{"had_liked":false,"id":2615,"user_name":"帅广应s","can_delete":false,"product_type":"c1","uid":1012108,"ip_address":"","ucode":"033E96722A10B3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/71/8c/63437f62.jpg","comment_is_top":false,"comment_ctime":1518053072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31582824144","product_id":100002201,"comment_content":"这段时间，正好在用python写一个从hive查数据，自动发邮件给运营产品的系统。借鉴了hadoop yarn的状态机后,整个逻辑结构清晰多了。但是也只是知道这样做可以解决问题，看了这篇文章后知道了为什么得这么做。感觉自己又上升了一个level …… ","like_count":7},{"had_liked":false,"id":91312,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1556976700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23031813180","product_id":100002201,"comment_content":"逻辑和控制的区别让我想起了数据结构的逻辑结构和存储结构。业务逻辑不关心控制的实现，数据结构的逻辑结构同样不关心数据结构的存储结构(是为抽象数据类型)。前者是对后者的抽象，只关心问题是什么，而不太关心如何解决问题，前者是宏观，后者是微观，前者是业务，后者是实现。","like_count":5},{"had_liked":false,"id":37438,"user_name":"caohuan","can_delete":false,"product_type":"c1","uid":1256428,"ip_address":"","ucode":"4B092E33F3DF1E","user_header":"https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg","comment_is_top":false,"comment_ctime":1541585572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23016422052","product_id":100002201,"comment_content":"看完 耗子哥的文章，我知道 为什么我还是一枚 码农了，代码 没有解耦，业务和控制代码 糅合在一起，虽然 我会一点 面向对象的 5大原则，也看过 重构的书籍，一直在模仿表层，没琢磨本质，所以 代码 既丑陋，可读性很差，知道有问题，得去提高了","like_count":6},{"had_liked":false,"id":79091,"user_name":"songgoogle","can_delete":false,"product_type":"c1","uid":1225810,"ip_address":"","ucode":"B45BC4007C08E7","user_header":"https://static001.geekbang.org/account/avatar/00/12/b4/52/75c44c71.jpg","comment_is_top":false,"comment_ctime":1553350012,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18733219196","product_id":100002201,"comment_content":"如果做过保险业务的同学应该就会懂一点什么是控制逻辑什么是业务本身了，控制逻辑就如何从你下单到购买的流程，保险业务逻辑就是如何计算保费等等，个人的一点点理解","like_count":5,"discussions":[{"author":{"id":1603271,"avatar":"","nickname":"Geek_f3a3d1","note":"","ucode":"E15FA1C3AB3174","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120766,"discussion_content":"感觉后两个说反了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578294608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":5270,"user_name":"fsj","can_delete":false,"product_type":"c1","uid":1017571,"ip_address":"","ucode":"5DA2B549C9B5FE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/86/e3/28d1330a.jpg","comment_is_top":false,"comment_ctime":1522983749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18702852933","product_id":100002201,"comment_content":"逻辑和控制不太好理解，粗浅的觉得，控制是逻辑的实现，逻辑是唯一的，控制是多样的，以后再慢慢体会。<br>通过检查表单的例子，学会一个技能，以后写业务逻辑，先思考能不能通过某种方式（比如DSL，状态机等）完整的表达逻辑，然后在写控制，尽量避免逻辑被分散在多个控制之中","like_count":5},{"had_liked":false,"id":2622,"user_name":"nanquanmama","can_delete":false,"product_type":"c1","uid":1023100,"ip_address":"","ucode":"799C2E0F841FB0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/7c/408c2a0b.jpg","comment_is_top":false,"comment_ctime":1518081083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18697950267","product_id":100002201,"comment_content":"焕然大悟","like_count":4},{"had_liked":false,"id":270849,"user_name":"吕超","can_delete":false,"product_type":"c1","uid":1740409,"ip_address":"","ucode":"B36883984BE16B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8e/79/f9d5dd3a.jpg","comment_is_top":false,"comment_ctime":1609301491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14494203379","product_id":100002201,"comment_content":"我上学的时候老师跟我们讲过<br>程序 = 数据结构 + 算法<br>如果老师一开始就跟我们讲<br>Program = Logic + Control + Data Structure<br>那我想我会省掉职业生涯中不少的抽象和解耦合的时间。","like_count":3},{"had_liked":false,"id":211733,"user_name":"高科","can_delete":false,"product_type":"c1","uid":1107568,"ip_address":"","ucode":"81A4DDF41D3C1C","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/70/b9907b0e.jpg","comment_is_top":false,"comment_ctime":1587999714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14472901602","product_id":100002201,"comment_content":"Program = Logic + Control + Data Structure这个总结真是以不变应万变的本质","like_count":3},{"had_liked":false,"id":2644,"user_name":"Roger","can_delete":false,"product_type":"c1","uid":1010784,"ip_address":"","ucode":"1437006ECF106E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/60/470da80b.jpg","comment_is_top":false,"comment_ctime":1518137887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14403039775","product_id":100002201,"comment_content":"还是不太明白 控制和逻辑的关系，检查表单的那个例子从我的理解来看已经是逻辑了。","like_count":3},{"had_liked":false,"id":2613,"user_name":"恩言","can_delete":false,"product_type":"c1","uid":1026855,"ip_address":"","ucode":"79771A313B9CCC","user_header":"","comment_is_top":false,"comment_ctime":1518052375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14402954263","product_id":100002201,"comment_content":"言不由衷的喜欢啊，真的好。","like_count":3},{"had_liked":false,"id":7534,"user_name":"favorlm","can_delete":false,"product_type":"c1","uid":1120997,"ip_address":"","ucode":"CFD52127AA6E1D","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/e5/6899701e.jpg","comment_is_top":false,"comment_ctime":1525513059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10115447651","product_id":100002201,"comment_content":"老师，您好，实际的编程工作中，我很想融合，但是发现处处都是方法，无法选择","like_count":2},{"had_liked":false,"id":2632,"user_name":"Chris","can_delete":false,"product_type":"c1","uid":1011343,"ip_address":"","ucode":"6DE8E7DCCCEF0F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/8f/9536ccff.jpg","comment_is_top":false,"comment_ctime":1518106929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10108041521","product_id":100002201,"comment_content":"理解并认识到编程的本质，才真正可能跳出代码搬运工的圈子，感谢老师！","like_count":2},{"had_liked":false,"id":271841,"user_name":"diwayou","can_delete":false,"product_type":"c1","uid":1701266,"ip_address":"","ucode":"DADFA13C84FB11","user_header":"https://static001.geekbang.org/account/avatar/00/19/f5/92/21cd6c36.jpg","comment_is_top":false,"comment_ctime":1609836726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5904804022","product_id":100002201,"comment_content":"这篇文章应该是编程范式系列最好的一篇了，需要有一定经验才能理解这里边要表达的观念，要真正理解这些东西就是要看优秀开源代码，多写代码，实践才是真道理！要理解的一点是所有代码核心都是“业务”，只是你满足的是商业的业务逻辑（电商、金融等）还是计算机某个领域的“业务”（数据库&#47;网络等），编程范式是工具，是control，但是真正核心的是logic，只不过要更好的解决复杂logic，就需要在control上下点功夫了，要不然代码就是一团麻了，没法维护。","like_count":2},{"had_liked":false,"id":271752,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1609779648,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5904746944","product_id":100002201,"comment_content":"Logic ：业务层面：做什么（我要回家）；<br>Control:代码层面：什么做（打车，步行，公交）。<br>根据项目进度和资源协调实际情况又引出完美（智行·）和可用（能回到）等权衡的问题。<br>因为 Control 需要处理数据，所以标准化 Control，需要标准化 Data Structure，我们可以通过泛型编程来解决这个事。","like_count":1,"discussions":[{"author":{"id":1273920,"avatar":"https://static001.geekbang.org/account/avatar/00/13/70/40/ce062d99.jpg","nickname":"丝竹乱耳","note":"","ucode":"933A41A394B0E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412810,"discussion_content":"打车和回家怎么分呢。不要可以的说这名词。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636294326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248722,"user_name":"你为啥那么牛","can_delete":false,"product_type":"c1","uid":1503506,"ip_address":"","ucode":"1ABC604A54A8F6","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","comment_is_top":false,"comment_ctime":1600271212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5895238508","product_id":100002201,"comment_content":"我倒觉得，这种划分，每个人的理解可能不一样。你说业务逻辑，有其特殊性，我们就专著于业务实现。那权限、校验之类的操作，我们可以归类为业务无关，进行标准化处理。那业务产生的数据，我们就定义数据结构来承接。<br><br>那对于一些管理类的业务，有很多代码生成器，基于各种模版。那我所谓的控制，是不是就更加宽泛一些。业务代码得生成，也算控制的一部分，当然最后还属于业务。<br><br>之前做过基于excel的财报分析，所有数据指标都是通过表格设定的，层级关系、计算关系都是按行业规则制定的。那这类软件，基本上把业务分析方式都控制了。连指标的计算规则都控制了。唯一的就是数据源接入。它的业务逻辑、控制、数据结构都是标准化的。如果说，哪家的分析报告，能更好的指导企业发展。唯一的业务逻辑，就是统计算法的优劣。","like_count":1},{"had_liked":false,"id":3242,"user_name":"JK.Ryan","can_delete":false,"product_type":"c1","uid":1014467,"ip_address":"","ucode":"D1E533F3DEC481","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/c3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1518769870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5813737166","product_id":100002201,"comment_content":"确保是，放在大的架构里面其实也是这样的模式，开放闭合，单一权限原则等都可以作为control，而其他偏业务的逻辑都可以当作logic，其实都是相通的","like_count":1},{"had_liked":false,"id":340211,"user_name":"WHO","can_delete":false,"product_type":"c1","uid":1068481,"ip_address":"","ucode":"59293F607BD3D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/c1/6baa801f.jpg","comment_is_top":false,"comment_ctime":1648659125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648659125","product_id":100002201,"comment_content":"阶乘这段：<br>“用这个定义，既可以从上往下地将 x+1 的阶乘缩小为先计算 x 的阶乘，再将结果乘以 1（recursive，递归）……”，这里应该是“乘以 x+1” 吧。 ","like_count":0},{"had_liked":false,"id":320801,"user_name":"Numbpad1","can_delete":false,"product_type":"c1","uid":1114772,"ip_address":"","ucode":"2F075AC7E3847D","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/94/2bf394f3.jpg","comment_is_top":false,"comment_ctime":1636515101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636515101","product_id":100002201,"comment_content":"如果你用过vee-validate这个框架，相信看了最后一个例子check_form后，对这个框架背后的思想也能理解的更深了！即control和logic相分离","like_count":0},{"had_liked":false,"id":320399,"user_name":"丝竹乱耳","can_delete":false,"product_type":"c1","uid":1273920,"ip_address":"","ucode":"933A41A394B0E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/70/40/ce062d99.jpg","comment_is_top":false,"comment_ctime":1636293841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636293841","product_id":100002201,"comment_content":"个人觉得你说的阶乘的例子没解释清楚。 如果 说 迭代和 递归一个逻辑和两种控制的话。 如何把代码写好 努力就行 一样的道理","like_count":0},{"had_liked":false,"id":317157,"user_name":"seedjyh","can_delete":false,"product_type":"c1","uid":2309641,"ip_address":"","ucode":"D590E526A9A1D7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4IPqj4H3jQHq4C1lgKh6ZroK3CVmGLiadic7S1rxbuy09JM9x8Aib6VkozPkO4lrUTHAhicX1z9Cg2w/132","comment_is_top":false,"comment_ctime":1634697378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634697378","product_id":100002201,"comment_content":"Logic可以视为「规则」，业务逻辑也属于其中之一。具体说就是「如果……那么……否则……那么」还有「必须先……再……」<br><br>Logic和Control分离的巅峰操作就是简单的脚本语言，比如sql、awk、sed、regex乃至vim里的各种命令。control全都预先写好了，而各种脚本就是在「描述规则」，让control能读取这些规则来执行数据操作。","like_count":0},{"had_liked":false,"id":298648,"user_name":"fangyu","can_delete":false,"product_type":"c1","uid":1024997,"ip_address":"","ucode":"F966F0607E4C0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/e5/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1624247955,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624247955","product_id":100002201,"comment_content":"我觉得是分离算法逻辑与业务逻辑，更进一步说，是分离彼此的逻辑，做到松耦合","like_count":0},{"had_liked":false,"id":279825,"user_name":"太子长琴","can_delete":false,"product_type":"c1","uid":1090266,"ip_address":"","ucode":"0627D0FA370AD4","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/da/a8a32113.jpg","comment_is_top":false,"comment_ctime":1613976577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613976577","product_id":100002201,"comment_content":"代码应该自然而然就写成这样了<br>本来就很自然……","like_count":0},{"had_liked":false,"id":271753,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1609780746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609780746","product_id":100002201,"comment_content":"需求分析：<br>1.业务层面（做什么）；<br>2.代码层面（什么做）：<br>Logic：确定业务是什么；<br>确定业务的变化点和稳定点的边界；<br>Control：根据变化和稳定在满足业务功能的情况下什么做更好；","like_count":0},{"had_liked":false,"id":264678,"user_name":"爱学习的大叔","can_delete":false,"product_type":"c1","uid":1085152,"ip_address":"","ucode":"91F9ABF1EC98D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/e0/847348b1.jpg","comment_is_top":false,"comment_ctime":1606573448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606573448","product_id":100002201,"comment_content":"最后那个检查数据大小的例子记忆犹新，以前使用的jquery grid那个插件的时候，记得有类似的格式定义，当时只是使用。现在有种恍然大悟的感觉。所以要多读读好的开源代码，写代码会受到启发。","like_count":0},{"had_liked":false,"id":258894,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1604577283,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604577283","product_id":100002201,"comment_content":"这篇文章很赞","like_count":0},{"had_liked":false,"id":248734,"user_name":"你为啥那么牛","can_delete":false,"product_type":"c1","uid":1503506,"ip_address":"","ucode":"1ABC604A54A8F6","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","comment_is_top":false,"comment_ctime":1600272991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600272991","product_id":100002201,"comment_content":"各种编程范式、泛型编程、设计模式、中间件，最后的目标，都集中在“业务变化”的管理上。编程要关注变化点，炫技的都是耍流氓。","like_count":0},{"had_liked":false,"id":235241,"user_name":"余巍","can_delete":false,"product_type":"c1","uid":1995082,"ip_address":"","ucode":"B0819C42A82371","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI0eGJygV4lh6PJuotKrz1jsZcOdNiaHnUC3y5A2O3yudUQLkzOE8758icDoXlvgpytQ50ibSIc9nJmg/132","comment_is_top":false,"comment_ctime":1594950458,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594950458","product_id":100002201,"comment_content":"logic是有真正意义的，这句话太精髓，它正式我们追求的东西。control具象看是不是就是算法，不同算法（流程、步骤）的实现方式。data structure我理解是载体，链接logic和control。","like_count":0},{"had_liked":false,"id":221715,"user_name":"mrlay","can_delete":false,"product_type":"c1","uid":1041640,"ip_address":"","ucode":"385A1954ED3317","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e4/e8/a1703783.jpg","comment_is_top":false,"comment_ctime":1590572918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590572918","product_id":100002201,"comment_content":"这又让我对算法这一词有了新的理解；突然间联想到了数学中抽象出来的各种符号是和实际的生活场景存有映射关系的，理论 + 控制 = 功能实现","like_count":0},{"had_liked":false,"id":211223,"user_name":"Geek_CK2020","can_delete":false,"product_type":"c1","uid":1961826,"ip_address":"","ucode":"5DF4BE058F5A58","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ef/62/87d9ef62.jpg","comment_is_top":false,"comment_ctime":1587916944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587916944","product_id":100002201,"comment_content":"有效地分离 Logic、Control 和 Data 是写出好程序的关键所在","like_count":0},{"had_liked":false,"id":205077,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1586522324,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586522324","product_id":100002201,"comment_content":"一句话：逻辑就是做什么，控制就是怎么做","like_count":0},{"had_liked":false,"id":204820,"user_name":"拍子","can_delete":false,"product_type":"c1","uid":1115477,"ip_address":"","ucode":"C9E6A19335AD5B","user_header":"https://static001.geekbang.org/account/avatar/00/11/05/55/b300d108.jpg","comment_is_top":false,"comment_ctime":1586479513,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586479513","product_id":100002201,"comment_content":"很通俗精辟的优质文章，收获满满，读完之后想通了很多自己写的很多程序复杂的原因。点个赞","like_count":0},{"had_liked":false,"id":199992,"user_name":"Geek_19c362","can_delete":false,"product_type":"c1","uid":1292514,"ip_address":"","ucode":"207B8E5A898BD4","user_header":"","comment_is_top":false,"comment_ctime":1585530381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585530381","product_id":100002201,"comment_content":"讲的好","like_count":0},{"had_liked":false,"id":193255,"user_name":"迪","can_delete":false,"product_type":"c1","uid":1760077,"ip_address":"","ucode":"57EF0AF897A8B3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/db/4d/8dec7917.jpg","comment_is_top":false,"comment_ctime":1584887248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584887248","product_id":100002201,"comment_content":"看完内心只有一个想法：老铁666啊","like_count":0},{"had_liked":false,"id":172203,"user_name":"slark","can_delete":false,"product_type":"c1","uid":1143574,"ip_address":"","ucode":"7E8DE962AA23A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/16/595b0342.jpg","comment_is_top":false,"comment_ctime":1579132223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579132223","product_id":100002201,"comment_content":"通过采取一些措施将业务逻辑和控制分离，而控制是指业务逻辑运行的方式，是并行还是串行等。如果能将逻辑和控制分离代码将更清晰，比如say hello，业务是say，逻辑是循环say还是条件say。但在编码时候正确区分这两点也是需要仔细推敲的","like_count":0},{"had_liked":false,"id":167841,"user_name":"咕咕咕","can_delete":false,"product_type":"c1","uid":1388479,"ip_address":"","ucode":"5D35932F7118EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/2f/bf/85b957fc.jpg","comment_is_top":false,"comment_ctime":1577948454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577948454","product_id":100002201,"comment_content":"还是没太理解 根据最后一个例子 我觉得大部分是把 输入和 实际操作分开?","like_count":0},{"had_liked":false,"id":135977,"user_name":"磉盘","can_delete":false,"product_type":"c1","uid":1055624,"ip_address":"","ucode":"1C245991F30A73","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/88/ac69f57a.jpg","comment_is_top":false,"comment_ctime":1569319378,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1569319378","product_id":100002201,"comment_content":"帮助我理解了mvc模式","like_count":0},{"had_liked":false,"id":130249,"user_name":"wynying","can_delete":false,"product_type":"c1","uid":1618161,"ip_address":"","ucode":"29F8207967C671","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqGGYe1DYI0YZhtoZkFLsicL0cZbFiakTTpbTBy5ib0BXHXy2r4Uemw6AsibrKJwMZ5FEF5GQynx6cJlw/132","comment_is_top":false,"comment_ctime":1567412823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567412823","product_id":100002201,"comment_content":"这一讲很受启发","like_count":0},{"had_liked":false,"id":85738,"user_name":"2k","can_delete":false,"product_type":"c1","uid":1138414,"ip_address":"","ucode":"1B1C597F7535B3","user_header":"https://static001.geekbang.org/account/avatar/00/11/5e/ee/1e9e879e.jpg","comment_is_top":false,"comment_ctime":1555217157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555217157","product_id":100002201,"comment_content":"真棒","like_count":0},{"had_liked":false,"id":82384,"user_name":"夏嘉莫","can_delete":false,"product_type":"c1","uid":1395975,"ip_address":"","ucode":"F42AD3513126C0","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/07/c92eae59.jpg","comment_is_top":false,"comment_ctime":1554198445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554198445","product_id":100002201,"comment_content":"这两篇论文都说了数据和处理逻辑分离，分离就是一种分层，就像冯诺伊曼计算机体系，就像我们现在广泛使用的MVC框架，本质上都是分离，将相近的东西放到一起。","like_count":0},{"had_liked":false,"id":62611,"user_name":"Nicholas","can_delete":false,"product_type":"c1","uid":1205374,"ip_address":"","ucode":"2FC42B9C579452","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/7e/ea984339.jpg","comment_is_top":false,"comment_ctime":1548119937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548119937","product_id":100002201,"comment_content":"分离逻辑实现，控制只管在合适的地方调用逻辑","like_count":0},{"had_liked":false,"id":20532,"user_name":"宋桓公","can_delete":false,"product_type":"c1","uid":1151948,"ip_address":"","ucode":"04235C2B87AB0E","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/cc/dfe92ee1.jpg","comment_is_top":false,"comment_ctime":1534513839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1534513839","product_id":100002201,"comment_content":"抽象出大的步骤就是控制，每个步骤的细节就是逻辑。控制就是控制流程步骤调用，具体步骤如何做就是逻辑。不知理解对不对","like_count":0},{"had_liked":false,"id":15422,"user_name":"joe2","can_delete":false,"product_type":"c1","uid":1156737,"ip_address":"","ucode":"5F328E774D5DFE","user_header":"","comment_is_top":false,"comment_ctime":1531185115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531185115","product_id":100002201,"comment_content":"还是不明白，不知道如何区分好控制和逻辑。 如何区分逻辑和控制？有理解的朋友可以解说一下吗？","like_count":0},{"had_liked":false,"id":11454,"user_name":"网虫子","can_delete":false,"product_type":"c1","uid":1039735,"ip_address":"","ucode":"641B3FB7372E90","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/77/1a26fa4d.jpg","comment_is_top":false,"comment_ctime":1528158564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1528158564","product_id":100002201,"comment_content":"受益匪浅","like_count":0},{"had_liked":false,"id":11240,"user_name":"saiyn","can_delete":false,"product_type":"c1","uid":1135770,"ip_address":"","ucode":"99D61992C3FF7D","user_header":"https://static001.geekbang.org/account/avatar/00/11/54/9a/5d8c349e.jpg","comment_is_top":false,"comment_ctime":1527986972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1527986972","product_id":100002201,"comment_content":"我还以为会给出一开始代码的优化后的代码呢","like_count":0},{"had_liked":false,"id":8401,"user_name":"Sammi","can_delete":false,"product_type":"c1","uid":1129573,"ip_address":"","ucode":"86E687B3501D0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/65/2f667f92.jpg","comment_is_top":false,"comment_ctime":1526181303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526181303","product_id":100002201,"comment_content":"很有用，以后工作中会提醒自己去思考哪些是logic，哪些是control，然后把更多精力放在control上，毕竟自己对代码的性能更感兴趣","like_count":0},{"had_liked":false,"id":8231,"user_name":"Harry","can_delete":false,"product_type":"c1","uid":1123508,"ip_address":"","ucode":"4CC4C7320C4F50","user_header":"https://static001.geekbang.org/account/avatar/00/11/24/b4/eadf8657.jpg","comment_is_top":false,"comment_ctime":1525999134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525999134","product_id":100002201,"comment_content":"醍醐灌顶的一篇文章","like_count":0},{"had_liked":false,"id":5764,"user_name":"候鸟归来的季节","can_delete":false,"product_type":"c1","uid":1087591,"ip_address":"","ucode":"671FCF79037AD7","user_header":"https://static001.geekbang.org/account/avatar/00/10/98/67/818c980d.jpg","comment_is_top":false,"comment_ctime":1523929873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1523929873","product_id":100002201,"comment_content":"高手写的代码更加接近逻辑","like_count":0},{"had_liked":false,"id":5638,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1523673611,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1523673611","product_id":100002201,"comment_content":"皓叔。。。怎么理解接口呢。。。。以前对接口自己感觉还挺了解的，现在感觉越来越不理解了","like_count":0,"discussions":[{"author":{"id":1914504,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","nickname":"Simon","note":"","ucode":"A8A2E3E57BD029","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251157,"discussion_content":"接口就是规范、标准","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588070203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":5234,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1522912645,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1522912645","product_id":100002201,"comment_content":"通过接口将控制逻辑与业务逻辑分离，是这样吗","like_count":0}]}