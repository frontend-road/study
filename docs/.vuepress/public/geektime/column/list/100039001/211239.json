{"id":211239,"title":"57 | 观察者模式（下）：如何实现一个异步非阻塞的EventBus框架？","content":"<p>上一节课中，我们学习了观察者模式的原理、实现、应用场景，重点介绍了不同应用场景下，几种不同的实现方式，包括：同步阻塞、异步非阻塞、进程内、进程间的实现方式。</p><p>同步阻塞是最经典的实现方式，主要是为了代码解耦；异步非阻塞除了能实现代码解耦之外，还能提高代码的执行效率；进程间的观察者模式解耦更加彻底，一般是基于消息队列来实现，用来实现不同进程间的被观察者和观察者之间的交互。</p><p>今天，我们聚焦于异步非阻塞的观察者模式，带你实现一个类似Google Guava EventBus的通用框架。等你学完本节课之后，你会发现，实现一个框架也并非一件难事。</p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>异步非阻塞观察者模式的简易实现</h2><p>上一节课中，我们讲到，对于异步非阻塞观察者模式，如果只是实现一个简易版本，不考虑任何通用性、复用性，实际上是非常容易的。</p><p>我们有两种实现方式。其中一种是：在每个handleRegSuccess()函数中创建一个新的线程执行代码逻辑；另一种是：在UserController的register()函数中使用线程池来执行每个观察者的handleRegSuccess()函数。两种实现方式的具体代码如下所示：</p><!-- [[[read_end]]] --><pre><code>// 第一种实现方式，其他类代码不变，就没有再重复罗列\npublic class RegPromotionObserver implements RegObserver {\n  private PromotionService promotionService; // 依赖注入\n\n  @Override\n  public void handleRegSuccess(Long userId) {\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        promotionService.issueNewUserExperienceCash(userId);\n      }\n    });\n    thread.start();\n  }\n}\n\n// 第二种实现方式，其他类代码不变，就没有再重复罗列\npublic class UserController {\n  private UserService userService; // 依赖注入\n  private List&lt;RegObserver&gt; regObservers = new ArrayList&lt;&gt;();\n  private Executor executor;\n\n  public UserController(Executor executor) {\n    this.executor = executor;\n  }\n\n  public void setRegObservers(List&lt;RegObserver&gt; observers) {\n    regObservers.addAll(observers);\n  }\n\n  public Long register(String telephone, String password) {\n    //省略输入参数的校验代码\n    //省略userService.register()异常的try-catch代码\n    long userId = userService.register(telephone, password);\n\n    for (RegObserver observer : regObservers) {\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          observer.handleRegSuccess(userId);\n        }\n      });\n    }\n\n    return userId;\n  }\n}\n</code></pre><p>对于第一种实现方式，频繁地创建和销毁线程比较耗时，并且并发线程数无法控制，创建过多的线程会导致堆栈溢出。第二种实现方式，尽管利用了线程池解决了第一种实现方式的问题，但线程池、异步执行逻辑都耦合在了register()函数中，增加了这部分业务代码的维护成本。</p><p>如果我们的需求更加极端一点，需要在同步阻塞和异步非阻塞之间灵活切换，那就要不停地修改UserController的代码。除此之外，如果在项目中，不止一个业务模块需要用到异步非阻塞观察者模式，那这样的代码实现也无法做到复用。</p><p>我们知道，框架的作用有：隐藏实现细节，降低开发难度，做到代码复用，解耦业务与非业务代码，让程序员聚焦业务开发。针对异步非阻塞观察者模式，我们也可以将它抽象成框架来达到这样的效果，而这个框架就是我们这节课要讲的EventBus。</p><h2>EventBus框架功能需求介绍</h2><p>EventBus翻译为“事件总线”，它提供了实现观察者模式的骨架代码。我们可以基于此框架，非常容易地在自己的业务场景中实现观察者模式，不需要从零开始开发。其中，Google Guava EventBus就是一个比较著名的EventBus框架，它不仅仅支持异步非阻塞模式，同时也支持同步阻塞模式</p><p>现在，我们就通过例子来看一下，Guava EventBus具有哪些功能。还是上节课那个用户注册的例子，我们用Guava EventBus重新实现一下，代码如下所示：</p><pre><code>public class UserController {\n  private UserService userService; // 依赖注入\n\n  private EventBus eventBus;\n  private static final int DEFAULT_EVENTBUS_THREAD_POOL_SIZE = 20;\n\n  public UserController() {\n    //eventBus = new EventBus(); // 同步阻塞模式\n    eventBus = new AsyncEventBus(Executors.newFixedThreadPool(DEFAULT_EVENTBUS_THREAD_POOL_SIZE)); // 异步非阻塞模式\n  }\n\n  public void setRegObservers(List&lt;Object&gt; observers) {\n    for (Object observer : observers) {\n      eventBus.register(observer);\n    }\n  }\n\n  public Long register(String telephone, String password) {\n    //省略输入参数的校验代码\n    //省略userService.register()异常的try-catch代码\n    long userId = userService.register(telephone, password);\n\n    eventBus.post(userId);\n\n    return userId;\n  }\n}\n\npublic class RegPromotionObserver {\n  private PromotionService promotionService; // 依赖注入\n\n  @Subscribe\n  public void handleRegSuccess(Long userId) {\n    promotionService.issueNewUserExperienceCash(userId);\n  }\n}\n\npublic class RegNotificationObserver {\n  private NotificationService notificationService;\n\n  @Subscribe\n  public void handleRegSuccess(Long userId) {\n    notificationService.sendInboxMessage(userId, &quot;...&quot;);\n  }\n}\n</code></pre><p>利用EventBus框架实现的观察者模式，跟从零开始编写的观察者模式相比，从大的流程上来说，实现思路大致一样，都需要定义Observer，并且通过register()函数注册Observer，也都需要通过调用某个函数（比如，EventBus中的post()函数）来给Observer发送消息（在EventBus中消息被称作事件event）。</p><p>但在实现细节方面，它们又有些区别。基于EventBus，我们不需要定义Observer接口，任意类型的对象都可以注册到EventBus中，通过@Subscribe注解来标明类中哪个函数可以接收被观察者发送的消息。</p><p>接下来，我们详细地讲一下，Guava EventBus的几个主要的类和函数。</p><ul>\n<li>EventBus、AsyncEventBus</li>\n</ul><p>Guava EventBus对外暴露的所有可调用接口，都封装在EventBus类中。其中，EventBus实现了同步阻塞的观察者模式，AsyncEventBus继承自EventBus，提供了异步非阻塞的观察者模式。具体使用方式如下所示：</p><pre><code>EventBus eventBus = new EventBus(); // 同步阻塞模式\nEventBus eventBus = new AsyncEventBus(Executors.newFixedThreadPool(8))；// 异步阻塞模式\n</code></pre><ul>\n<li>register()函数</li>\n</ul><p>EventBus类提供了register()函数用来注册观察者。具体的函数定义如下所示。它可以接受任何类型（Object）的观察者。而在经典的观察者模式的实现中，register()函数必须接受实现了同一Observer接口的类对象。</p><pre><code>public void register(Object object);\n</code></pre><ul>\n<li>unregister()函数</li>\n</ul><p>相对于register()函数，unregister()函数用来从EventBus中删除某个观察者。我就不多解释了，具体的函数定义如下所示：</p><pre><code>public void unregister(Object object);\n</code></pre><ul>\n<li>post()函数</li>\n</ul><p>EventBus类提供了post()函数，用来给观察者发送消息。具体的函数定义如下所示：</p><pre><code>public void post(Object event);\n</code></pre><p>跟经典的观察者模式的不同之处在于，当我们调用post()函数发送消息的时候，并非把消息发送给所有的观察者，而是发送给可匹配的观察者。所谓可匹配指的是，能接收的消息类型是发送消息（post函数定义中的event）类型的父类。我举个例子来解释一下。</p><p>比如，AObserver能接收的消息类型是XMsg，BObserver能接收的消息类型是YMsg，CObserver能接收的消息类型是ZMsg。其中，XMsg是YMsg的父类。当我们如下发送消息的时候，相应能接收到消息的可匹配观察者如下所示：</p><pre><code>XMsg xMsg = new XMsg();\nYMsg yMsg = new YMsg();\nZMsg zMsg = new ZMsg();\npost(xMsg); =&gt; AObserver接收到消息\npost(yMsg); =&gt; AObserver、BObserver接收到消息\npost(zMsg); =&gt; CObserver接收到消息\n</code></pre><p>你可能会问，每个Observer能接收的消息类型是在哪里定义的呢？我们来看下Guava EventBus最特别的一个地方，那就是@Subscribe注解。</p><ul>\n<li>@Subscribe注解</li>\n</ul><p>EventBus通过@Subscribe注解来标明，某个函数能接收哪种类型的消息。具体的使用代码如下所示。在DObserver类中，我们通过@Subscribe注解了两个函数f1()、f2()。</p><pre><code>public DObserver {\n  //...省略其他属性和方法...\n  \n  @Subscribe\n  public void f1(PMsg event) { //... }\n  \n  @Subscribe\n  public void f2(QMsg event) { //... }\n}\n</code></pre><p>当通过register()函数将DObserver 类对象注册到EventBus的时候，EventBus会根据@Subscribe注解找到f1()和f2()，并且将两个函数能接收的消息类型记录下来（PMsg-&gt;f1，QMsg-&gt;f2）。当我们通过post()函数发送消息（比如QMsg消息）的时候，EventBus会通过之前的记录（QMsg-&gt;f2），调用相应的函数（f2）。</p><h2>手把手实现一个EventBus框架</h2><p>Guava EventBus的功能我们已经讲清楚了，总体上来说，还是比较简单的。接下来，我们就重复造轮子，“山寨”一个EventBus出来。</p><p>我们重点来看，EventBus中两个核心函数register()和post()的实现原理。弄懂了它们，基本上就弄懂了整个EventBus框架。下面两张图是这两个函数的实现原理图。</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/c6/ce842666fa3dc92bb8f4f2d8e75d12c6.jpg?wh=2563*1333\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/bf/45/bf7ef52a40b1e35b18f369265caca645.jpg?wh=2528*953\" alt=\"\"></p><p>从图中我们可以看出，最关键的一个数据结构是Observer注册表，记录了消息类型和可接收消息函数的对应关系。当调用register()函数注册观察者的时候，EventBus通过解析@Subscribe注解，生成Observer注册表。当调用post()函数发送消息的时候，EventBus通过注册表找到相应的可接收消息的函数，然后通过Java的反射语法来动态地创建对象、执行函数。对于同步阻塞模式，EventBus在一个线程内依次执行相应的函数。对于异步非阻塞模式，EventBus通过一个线程池来执行相应的函数。</p><p>弄懂了原理，实现起来就简单多了。整个小框架的代码实现包括5个类：EventBus、AsyncEventBus、Subscribe、ObserverAction、ObserverRegistry。接下来，我们依次来看下这5个类。</p><h3>1.Subscribe</h3><p>Subscribe是一个注解，用于标明观察者中的哪个函数可以接收消息。</p><pre><code>@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\n@Beta\npublic @interface Subscribe {}\n</code></pre><h3>2.ObserverAction</h3><p>ObserverAction类用来表示@Subscribe注解的方法，其中，target表示观察者类，method表示方法。它主要用在ObserverRegistry观察者注册表中。</p><pre><code>public class ObserverAction {\n  private Object target;\n  private Method method;\n\n  public ObserverAction(Object target, Method method) {\n    this.target = Preconditions.checkNotNull(target);\n    this.method = method;\n    this.method.setAccessible(true);\n  }\n\n  public void execute(Object event) { // event是method方法的参数\n    try {\n      method.invoke(target, event);\n    } catch (InvocationTargetException | IllegalAccessException e) {\n      e.printStackTrace();\n    }\n  }\n}\n</code></pre><h3>3.ObserverRegistry</h3><p>ObserverRegistry类就是前面讲到的Observer注册表，是最复杂的一个类，框架中几乎所有的核心逻辑都在这个类中。这个类大量使用了Java的反射语法，不过代码整体来说都不难理解，其中，一个比较有技巧的地方是CopyOnWriteArraySet的使用。</p><p>CopyOnWriteArraySet，顾名思义，在写入数据的时候，会创建一个新的set，并且将原始数据clone到新的set中，在新的set中写入数据完成之后，再用新的set替换老的set。这样就能保证在写入数据的时候，不影响数据的读取操作，以此来解决读写并发问题。除此之外，CopyOnWriteSet还通过加锁的方式，避免了并发写冲突。具体的作用你可以去查看一下CopyOnWriteSet类的源码，一目了然。</p><pre><code>public class ObserverRegistry {\n  private ConcurrentMap&lt;Class&lt;?&gt;, CopyOnWriteArraySet&lt;ObserverAction&gt;&gt; registry = new ConcurrentHashMap&lt;&gt;();\n\n  public void register(Object observer) {\n    Map&lt;Class&lt;?&gt;, Collection&lt;ObserverAction&gt;&gt; observerActions = findAllObserverActions(observer);\n    for (Map.Entry&lt;Class&lt;?&gt;, Collection&lt;ObserverAction&gt;&gt; entry : observerActions.entrySet()) {\n      Class&lt;?&gt; eventType = entry.getKey();\n      Collection&lt;ObserverAction&gt; eventActions = entry.getValue();\n      CopyOnWriteArraySet&lt;ObserverAction&gt; registeredEventActions = registry.get(eventType);\n      if (registeredEventActions == null) {\n        registry.putIfAbsent(eventType, new CopyOnWriteArraySet&lt;&gt;());\n        registeredEventActions = registry.get(eventType);\n      }\n      registeredEventActions.addAll(eventActions);\n    }\n  }\n\n  public List&lt;ObserverAction&gt; getMatchedObserverActions(Object event) {\n    List&lt;ObserverAction&gt; matchedObservers = new ArrayList&lt;&gt;();\n    Class&lt;?&gt; postedEventType = event.getClass();\n    for (Map.Entry&lt;Class&lt;?&gt;, CopyOnWriteArraySet&lt;ObserverAction&gt;&gt; entry : registry.entrySet()) {\n      Class&lt;?&gt; eventType = entry.getKey();\n      Collection&lt;ObserverAction&gt; eventActions = entry.getValue();\n      if (postedEventType.isAssignableFrom(eventType)) {\n        matchedObservers.addAll(eventActions);\n      }\n    }\n    return matchedObservers;\n  }\n\n  private Map&lt;Class&lt;?&gt;, Collection&lt;ObserverAction&gt;&gt; findAllObserverActions(Object observer) {\n    Map&lt;Class&lt;?&gt;, Collection&lt;ObserverAction&gt;&gt; observerActions = new HashMap&lt;&gt;();\n    Class&lt;?&gt; clazz = observer.getClass();\n    for (Method method : getAnnotatedMethods(clazz)) {\n      Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();\n      Class&lt;?&gt; eventType = parameterTypes[0];\n      if (!observerActions.containsKey(eventType)) {\n        observerActions.put(eventType, new ArrayList&lt;&gt;());\n      }\n      observerActions.get(eventType).add(new ObserverAction(observer, method));\n    }\n    return observerActions;\n  }\n\n  private List&lt;Method&gt; getAnnotatedMethods(Class&lt;?&gt; clazz) {\n    List&lt;Method&gt; annotatedMethods = new ArrayList&lt;&gt;();\n    for (Method method : clazz.getDeclaredMethods()) {\n      if (method.isAnnotationPresent(Subscribe.class)) {\n        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();\n        Preconditions.checkArgument(parameterTypes.length == 1,\n                &quot;Method %s has @Subscribe annotation but has %s parameters.&quot;\n                        + &quot;Subscriber methods must have exactly 1 parameter.&quot;,\n                method, parameterTypes.length);\n        annotatedMethods.add(method);\n      }\n    }\n    return annotatedMethods;\n  }\n}\n</code></pre><h3>4.EventBus</h3><p>EventBus实现的是阻塞同步的观察者模式。看代码你可能会有些疑问，这明明就用到了线程池Executor啊。实际上，MoreExecutors.directExecutor()是Google Guava提供的工具类，看似是多线程，实际上是单线程。之所以要这么实现，主要还是为了跟AsyncEventBus统一代码逻辑，做到代码复用。</p><pre><code>public class EventBus {\n  private Executor executor;\n  private ObserverRegistry registry = new ObserverRegistry();\n\n  public EventBus() {\n    this(MoreExecutors.directExecutor());\n  }\n\n  protected EventBus(Executor executor) {\n    this.executor = executor;\n  }\n\n  public void register(Object object) {\n    registry.register(object);\n  }\n\n  public void post(Object event) {\n    List&lt;ObserverAction&gt; observerActions = registry.getMatchedObserverActions(event);\n    for (ObserverAction observerAction : observerActions) {\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          observerAction.execute(event);\n        }\n      });\n    }\n  }\n}\n</code></pre><h3>5.AsyncEventBus</h3><p>有了EventBus，AsyncEventBus的实现就非常简单了。为了实现异步非阻塞的观察者模式，它就不能再继续使用MoreExecutors.directExecutor()了，而是需要在构造函数中，由调用者注入线程池。</p><pre><code>public class AsyncEventBus extends EventBus {\n  public AsyncEventBus(Executor executor) {\n    super(executor);\n  }\n}\n</code></pre><p>至此，我们用了不到200行代码，就实现了一个还算凑活能用的EventBus，从功能上来讲，它跟Google Guava EventBus几乎一样。不过，如果去查看<a href=\"https://github.com/google/guava\">Google Guava EventBus的源码</a>，你会发现，在实现细节方面，相比我们现在的实现，它其实做了很多优化，比如优化了在注册表中查找消息可匹配函数的算法。如果有时间的话，建议你去读一下它的源码。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们来一块总结回顾一下，你需要重点掌握的内容。</p><p>框架的作用有：隐藏实现细节，降低开发难度，做到代码复用，解耦业务与非业务代码，让程序员聚焦业务开发。针对异步非阻塞观察者模式，我们也可以将它抽象成框架来达到这样的效果，而这个框架就是我们这节课讲的EventBus。EventBus翻译为“事件总线”，它提供了实现观察者模式的骨架代码。我们可以基于此框架，非常容易地在自己的业务场景中实现观察者模式，不需要从零开始开发。</p><p>很多人觉得做业务开发没有技术挑战，实际上，做业务开发也会涉及很多非业务功能的开发，比如今天讲到的EventBus。在平时的业务开发中，我们要善于抽象这些非业务的、可复用的功能，并积极地把它们实现成通用的框架。</p><h2>课堂讨论</h2><p>在今天内容的第二个模块“EventBus框架功能需求介绍”中，我们用Guava EventBus重新实现了UserController，实际上，代码还是不够解耦。UserController还是耦合了很多跟观察者模式相关的非业务代码，比如创建线程池、注册Observer。为了让UserController更加聚焦在业务功能上，你有什么重构的建议吗？</p><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":187305,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1584080363,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"834807735787","product_id":100039001,"comment_content":"Guava EventBus 对我来说简直是一份大礼。里面解耦功能使本来的旧项目又不可维护逐渐转化为可维护。<br><br>EventBus作为一个总线，还考虑了递归传送事件的问题，可以选择广度优先传播和深度优先传播，遇到事件死循环的时候还会报错。Guava的项目对这个模块的封装非常值得我们去阅读，复杂的都在里头，外面极为易用，我拷贝了一份EventBus的代码进行修改以适配自己的项目，发觉里面的构造都极为精密巧妙，像一个机械钟表一样，自己都下不了手，觉得不小心就是弄坏了。<br><br>跟随真正优秀的工程师，并阅读其写出来的代码让人受益匪浅。","like_count":195,"discussions":[{"author":{"id":1018685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/3d/0c3a2fd4.jpg","nickname":"偶尔复活下","note":"","ucode":"18B1D525CD50D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67644,"discussion_content":"这里的转账，虚拟资金还是在支付系统内部的虚拟账户体系里流转（信息流），涉及到账户系统账户余额的增减，会计系统的记账（会计科目的借贷记），暂时不涉及实体银行账户（可能是记录在内部账户的在途资金，可用不可取）（t+n后银行按合同约定将这部分资金清算给平台在银行开设的实体账户；）。t+n后（平台与商家的合同约定），实体资金清算给商家（平台与商家实体账户余额变动），这部分资金可取，然后在商家发起提现，此时，不仅涉及平台内部账户余额变动，会计记账，日终清算后，还涉及商家银行实体账户的余额变动（资金流）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575163465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1346215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","nickname":"William","note":"","ucode":"55F5D9DEE485B1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66497,"discussion_content":"商家的应用账号转给商家的银行卡，\n商家自己的流转. ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575077835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187225,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1584064278,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"345181447958","product_id":100039001,"comment_content":"课后题：<br>代理模式，使用一个代理类专门来处理EventBus相关逻辑。作用：<br>1.将业务与非业务逻辑分离<br>2.后续替换EventBus实现方式直接改写代理类，满足拓展需求","like_count":81,"discussions":[{"author":{"id":1018685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/3d/0c3a2fd4.jpg","nickname":"偶尔复活下","note":"","ucode":"18B1D525CD50D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67633,"discussion_content":"这里的转账，虚拟资金还是在支付系统内部的虚拟账户体系里流转（信息流），涉及到账户系统账户的增减，会计系统的记账；暂时不涉及实体银行账户。在商家发起提现时，日终清算后才涉及银行实体账户的余额变动（资金流）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575162705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1637228,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","nickname":"迈向架构师","note":"","ucode":"2476594CF76001","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66495,"discussion_content":"然后触发真正的银行转账操作，应该是指商家后续提现的流程才触发银行转账吧- -","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575077657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141173,"avatar":"https://static001.geekbang.org/account/avatar/00/11/69/b5/1e1731cc.jpg","nickname":"zs阿帅","note":"","ucode":"07A54AE7F1CAFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65293,"discussion_content":"是的，我也不理解，为啥还有一个商家钱包，不应该是极客的虚拟钱包后者应用的虚拟钱包。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574993853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206456,"user_name":"zhengyu.nie","can_delete":false,"product_type":"c1","uid":1541669,"ip_address":"","ucode":"FFE0377D323E46","user_header":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","comment_is_top":false,"comment_ctime":1586864002,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"272169803650","product_id":100039001,"comment_content":"一开始在携程工作的时候因为早期Spring Event驱动强制要求事件继承抽象事件，而转到Guava EventBus，在Event实体上更加灵活。后面来阿里后发现一些项目里，Spring新版本也可以支持非继承的事件类型了，也有很多MetaQ消息直接分发到内存Event的写法。<br><br>关于EventBus源码也看了几遍了，总体来说提供了几种dispatcher，有广度和深度优先原则，像PerThread中两层while也有对嵌套事件的处理，像Google工程师致敬。<br><br>EventBus现在来对我个人说主要有以下几点可能存在的问题：<br>1.在比较高需求的场景上，Event持久化机制也是需要的，不管是为了高可用（内存队列宕机就丢），做成最终一致性软事务，或者是CQRS中事件溯源等需求。<br><br>2.现在的异步处理，是直接丢在同一个线程池处理，那么存在忙死的event导致event饿死的情况，所以这一块会有很大局限性，对比akka之类的话。<br><br>3.现在的Event在没打的@AllowConcurrentEvents时候，也就是需要线程安全的时候，是invoke method过程是加了synchronized关键字控制的，那么最好方法粒度不要太大，性能上考虑的话。<br><br>其实现在也蛮纠结的，到底用EventBus还是Spring Event，按道理讲，现在项目基本都是SpringBoot体系，那么其实Spring事件隔绝依赖更多，也更容易和Spring Async等集成，所以我现在基本是用Spring事件驱动替代EventBus。","like_count":64,"discussions":[{"author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65295,"discussion_content":"还有一些 domain 无法完成的逻辑，移动到service中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574993893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189446,"user_name":"鱼Shiyao","can_delete":false,"product_type":"c1","uid":1379122,"ip_address":"","ucode":"302AD42FFEFFCE","user_header":"https://static001.geekbang.org/account/avatar/00/15/0b/32/c2eff01b.jpg","comment_is_top":false,"comment_ctime":1584516959,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"181973143391","product_id":100039001,"comment_content":"把老师的EventBus的代码实现了一下，发现有两个地方有问题。<br>1：<br>XMsg xMsg = new XMsg();<br>YMsg yMsg = new YMsg();<br>如果XMsg是YMsg的父类的话，应该是<br>post(xMsg); =&gt; AObserver接收到消息<br>post(yMsg); =&gt; AObserver,BObserver接收到消息<br>2. 和刚才的问题一样，对应着ObserverRegistry的代码。<br>在getMatchedObserverAction函数中<br>if (postedEventType.isAssignableFrom(eventType)) <br>应该改成<br>if (eventType.isAssignableFrom(postedEventType)) ","like_count":43,"discussions":[{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381391,"discussion_content":"看了这么多期，我发现争哥是故意的，基本没怎么测试，类似于伪代码，把bug留给了大家","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625038602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1446984,"avatar":"https://static001.geekbang.org/account/avatar/00/16/14/48/3d1e0488.jpg","nickname":"笔筒虫","note":"","ucode":"A1E6DE2A17C8E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381916,"discussion_content":"看了那行代码，就等在评论区找到这个评论","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625288640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368752,"discussion_content":"评论区这位老哥是对的, 争哥的代码确实错了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618823261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1326223,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3c/8f/be719404.jpg","nickname":"Del皮耶罗","note":"","ucode":"E90D6311ED875F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288838,"discussion_content":"此处看了很久，以为是自己理解错了，应该确实有这个问题，帮顶","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593889673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d8/1e/985d5363.jpg","nickname":"geek","note":"","ucode":"BF9406F6ABDB7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380133,"discussion_content":"第一个问题可以这么改，在 getAnnotatedMethods() 里：\nfor (Method method : clazz.getMethods()) {\n    if (!Objects.equals(method.getDeclaringClass(), Object.class) &amp;&amp; method.isAnnotationPresent(Subscribe.class)) {","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624352843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1587803,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3a/5b/ce1724ca.jpg","nickname":"undefined","note":"","ucode":"867405CA5A9FB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210888,"discussion_content":"评论的改法是对的，文章的代码是会运行抛错的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584788204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1800886,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7a/b6/f54bbfaa.jpg","nickname":"花郎世纪","note":"","ucode":"301DF9B6375E08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208556,"discussion_content":"老哥，我再读了几遍，我觉得争哥是对的。\npostedEventType是传递过来的消息，如果传递过来的消息类型是表中Key的子类的话，则可以传递。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584547635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1325267,"avatar":"https://static001.geekbang.org/account/avatar/00/14/38/d3/07585dc8.jpg","nickname":"BADTZ-MARU 🍪","note":"","ucode":"358FAA1C9F5721","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1800886,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7a/b6/f54bbfaa.jpg","nickname":"花郎世纪","note":"","ucode":"301DF9B6375E08","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209282,"discussion_content":"如果postedEventType是只有订阅其本身和子类的observer可以消费的话，那争哥前面的描述就有问题了，XMsg应该是A、BObserver都可以消费，YMsg只有B可以消费","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584625514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":208556,"ip_address":""},"score":209282,"extra":""},{"author":{"id":1800886,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7a/b6/f54bbfaa.jpg","nickname":"花郎世纪","note":"","ucode":"301DF9B6375E08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1325267,"avatar":"https://static001.geekbang.org/account/avatar/00/14/38/d3/07585dc8.jpg","nickname":"BADTZ-MARU 🍪","note":"","ucode":"358FAA1C9F5721","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209557,"discussion_content":"感谢老哥指正，是写反了···\n父类.class.isAssignableFrom(子类.class)，原来是这么用的","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1584635567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":209282,"ip_address":""},"score":209557,"extra":""}]}]},{"had_liked":false,"id":187429,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1584108680,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"48828748936","product_id":100039001,"comment_content":"重构使用代理模式，将非业务代码放到代理类中。<br>另外试了争哥讲的EventBut类，在定义观察者的入参要修改成*Long*类型，如果使用long，这个方法是无法注册的，代码执行收不到通知。应该是ObserverRegistry类需要完善一下。<br>  @Subscribe<br>  public void handleRegSuccess(Long userId) {<br>    System.out.println(&quot;handleRegSuccess...&quot;);<br>    promotionService.issueNewUserExperienceCash(userId);<br>  }<br>代码见：https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;tree&#47;master&#47;designpattern&#47;u57","like_count":11,"discussions":[{"author":{"id":1587803,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3a/5b/ce1724ca.jpg","nickname":"undefined","note":"","ucode":"867405CA5A9FB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210799,"discussion_content":"+1，改成封装类型才能进行类型匹配","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584776215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1096575,"avatar":"https://static001.geekbang.org/account/avatar/00/10/bb/7f/f7ff488e.jpg","nickname":"just_one","note":"","ucode":"0F230DDCA57BAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309841,"discussion_content":"现在才看评论发现遇到了同样的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601459699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1540988,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","nickname":"FIGNT","note":"","ucode":"D9DB185AE9E67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215908,"discussion_content":"看你的代码只是将这个位置改了下（其他的类没看，我想就看这类就可以了。），这个其实是一样的结果都是false。\n if (eventType.isAssignableFrom(postedEventType)) {\n        matchedObservers.addAll(eventActions);\n}\n没找到好方法，我用了最笨的方法，注册的时候将基本类型的Class转为包装类型的Class。一个个判断一个个转换。感觉好傻，但是没找别的方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585396880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1540988,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","nickname":"FIGNT","note":"","ucode":"D9DB185AE9E67C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327441,"discussion_content":"isAssignableFrom方法有关于基本类型的描述：If this {@code Class}\nobject represents a primitive type, this method returns\n{@code true} if the specified {@code Class} parameter is\nexactly this {@code Class} object; otherwise it returns\n{@code false}.\n问题的本质是应该是 基本类型的Class对象.isAssignableFrom(基本类型的包装类的Class对象)返回false。但是Object a=2;Object b=new Integer(2);a.getClass().isAssignableFrom(b.getClass())返回true，应该是会自动装箱吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605838693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215908,"ip_address":""},"score":327441,"extra":""}]}]},{"had_liked":false,"id":187460,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1584114563,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"40238820227","product_id":100039001,"comment_content":"我的想法比较直接，将UserController中的业务代码提出来放在接口的实现类中，这个UserController可以改名为EventController，然后这个接口实现类注入到这个EventController中，这样业务逻辑和控制逻辑就分离了，示例如下：<br>interface iController {<br>    object register()<br>}<br><br>public class UserControllerService implement iController {<br>    private string telphone;<br>    private string password;<br><br>    public Long register() {<br>        long userId = userService.register(telephone, password);<br>        return userId;<br>  }<br>}<br><br>public class EventController {<br>    private iController iService;<br><br>    private EventBus eventBus;<br>    private static final int DEFAULT_EVENTBUS_THREAD_POOL_SIZE = 20; <br><br>    public EventController() {<br>        eventBus = new AsyncEventBus(Executors.newFixedThreadPool(DEFAULT_EVENTBUS_THREAD_POOL_SIZE)); &#47;&#47; 异步非阻塞模式 <br>    }<br><br>    public void setRegObservers(List&lt;Object&gt; observers) {<br>        for (Object observer : observers) {<br>            eventBus.register(observer);<br>        }<br>    }<br><br>    public void SendMessage() {<br>        object msg = iService.register()<br>        eventBus.post(msg)<br>    }<br><br>}","like_count":9,"discussions":[{"author":{"id":1116567,"avatar":"https://static001.geekbang.org/account/avatar/00/11/09/97/4314e2d8.jpg","nickname":"双木公子","note":"","ucode":"751885864D3AB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579444,"discussion_content":"简洁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657458200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187749,"user_name":"blacknhole","can_delete":false,"product_type":"c1","uid":1098286,"ip_address":"","ucode":"271682FFE28F25","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","comment_is_top":false,"comment_ctime":1584209680,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"31648980752","product_id":100039001,"comment_content":"提个问题：<br><br>文中“所谓可匹配指的是，能接收的消息类型是发送消息（post 函数定义中的 event）类型的子类”这话似乎有问题，应该是父类吧？","like_count":7,"discussions":[{"author":{"id":1488356,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b5/e4/e6faf686.jpg","nickname":"握了个大蚂蚱","note":"","ucode":"AD34AD4FA37371","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339832,"discussion_content":"是错了，总结+代码&amp;例子相反，试了一下，是说反了。正确的也符合多态的思想，父类可以接收子类，也就是我接收object，我就能收全部","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609817356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1483671,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a3/97/ca8057a4.jpg","nickname":"Mona432","note":"","ucode":"3F02C646C8DC83","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326526,"discussion_content":"争哥说的没错，就是子类，这就是多态，你传个形参的父类编译都不通过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605612926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187258,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1584070069,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31648841141","product_id":100039001,"comment_content":"对于这个问题,在UserCntroller中,我们应该只保留post函数() 发送的相关逻辑,而将注册Observer,初始化EventBus相关逻辑剔除,如果非要使用EventBus来实现的话,我们需要有人帮我们去进行注册和初始化,这时候就可以立马想到之前讲的工厂模式的DI框架,我们可以让所有观察者都被DI框架所管理,并且对EventBus创建一个装饰器类,在这个装饰器类中,由开发者选择注入线程池实现异步发送还是直接使用同步发送的,并且在init函数中 从DI框架管理的对象池中拿出所有标有@Subscribe注解的类,保存到ObserverRegistry中,对于所有需要使用EventBus的类,注入这个装饰器类即可,设计的好,甚至可以做到其他依赖代码都不用改一点","like_count":7,"discussions":[{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282365,"discussion_content":"讲的不错. 提个小小建议, \n我们可以让所有观察者都被DI框架所管理,并且对EventBus创建一个装饰器类\n\n可以使用代理模式代替装饰器模式. \n\n之前讲过, 代理模式更适用于业务无关的功能增强, 装饰器模式适用于业务相关的功能增强. \n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591953724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212557,"user_name":"依然亦晨","can_delete":false,"product_type":"c1","uid":1244726,"ip_address":"","ucode":"41F288A69AA4B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/36/df26de4a.jpg","comment_is_top":false,"comment_ctime":1588148632,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"23062985112","product_id":100039001,"comment_content":"debug的时候发现一个小问题，ObserverRegistry类的getMatchedObserverActions()方法中调用了isAssignableFrom()方法，由于postedEventType是java.lang.Long，而eventType是long，导致postedEventType.isAssignableFrom(eventType)始终为false，因而无法获取到匹配的观察者。从网上查阅相关资料的得知，Java反射获取方法不支持自动装箱或拆箱；","like_count":5},{"had_liked":false,"id":189571,"user_name":"Mogeko","can_delete":false,"product_type":"c1","uid":1888781,"ip_address":"","ucode":"81B5AD129ECA9A","user_header":"https://static001.geekbang.org/account/avatar/00/1c/d2/0d/f10048ce.jpg","comment_is_top":false,"comment_ctime":1584529810,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18764398994","product_id":100039001,"comment_content":"ObserverRegistry类的getMatchedObserverActions方法，postedEventType.isAssignableFrom(eventType)是不是反了？<br>不是应该eventType.isAssignableFrom(postedEventType)吗？","like_count":4,"discussions":[{"author":{"id":1813289,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJBxpZYyIV7ggBjNvqtC36gYhrIVEkvDP1bFfDGqEsqLiaicRz9wGrMuFYHqeMYKTN59BHLJuaibfNFQ/132","nickname":"muf","note":"","ucode":"970CA6DA8961FE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291416,"discussion_content":"我敲了一遍，也觉得应该反过来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594812279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188638,"user_name":"右耳听海","can_delete":false,"product_type":"c1","uid":1022011,"ip_address":"","ucode":"E0B9F1083F4F98","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/3b/5af90c80.jpg","comment_is_top":false,"comment_ctime":1584381308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18764250492","product_id":100039001,"comment_content":"给老师点赞，虽然很早就接触了eventbus，但一直没明白这个的设计思想，现在有种醍醐灌顶的感觉","like_count":4},{"had_liked":false,"id":187222,"user_name":"gogo","can_delete":false,"product_type":"c1","uid":1003104,"ip_address":"","ucode":"E8F0F3B000020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/60/0d5aa340.jpg","comment_is_top":false,"comment_ctime":1584063909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18763933093","product_id":100039001,"comment_content":"看了下google EventBus源码，是标注了@Beta的，能用于生产环境吗？","like_count":4},{"had_liked":false,"id":206577,"user_name":"ttxser","can_delete":false,"product_type":"c1","uid":1022694,"ip_address":"","ucode":"47C3FCB59F8027","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/e6/e8439f9a.jpg","comment_is_top":false,"comment_ctime":1586888832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14471790720","product_id":100039001,"comment_content":"异步+注解的，后期比较难维护吧，运行时生效，没有办法看到全局的注册信息","like_count":3},{"had_liked":false,"id":187717,"user_name":"佐西玛","can_delete":false,"product_type":"c1","uid":1090743,"ip_address":"","ucode":"73AAED82340E2B","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/b7/e0d88365.jpg","comment_is_top":false,"comment_ctime":1584198543,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14469100431","product_id":100039001,"comment_content":"争哥，在EventBus 框架功能需求介绍里面，如果XMsg 是 YMsg 的父类，则post(xMsg); =&gt; AObserver、BObserver接收到消息，这个地方应该是如果XMsg 是 YMsg 的子类。","like_count":3,"discussions":[{"author":{"id":2601446,"avatar":"https://static001.geekbang.org/account/avatar/00/27/b1/e6/6560d20a.jpg","nickname":"Geek_20210430","note":"","ucode":"32728E28984463","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371647,"discussion_content":"应该是你弄反了这里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619882735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327448,"discussion_content":"我看到的是：\nXMsg 是 YMsg 的父类\npost(xMsg); => AObserver接收到消息\npost(yMsg); => AObserver、BObserver接收到消息\n是已经改了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605839634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187518,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1584151465,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14469053353","product_id":100039001,"comment_content":"public void handleRegSuccess(long userId) 方法签名中的long类型应该改成Long类型，不然SubscriberRegistry.getSubscribers(Object event)会匹配不上类型","like_count":3},{"had_liked":false,"id":187295,"user_name":"饭","can_delete":false,"product_type":"c1","uid":1610573,"ip_address":"","ucode":"B3F1702D4DE604","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","comment_is_top":false,"comment_ctime":1584077051,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"14468978939","product_id":100039001,"comment_content":"老师，我们主要做物流方面的业务系统，类似仓储，港口这样的，流程繁杂。平时主要就是写增删改查，然后通过一个状态字段变化控制流程，所有业务代码流程中每一步操作都写满了各种状态验证，判断。后期稍微需求变动一点点，涉及到状态改动，要调整流程的话，都是一场灾难。针对我们这种系统，有办法将流程状态解耦出来吗？今天看到这篇事件总线的文章，好像看到希望，但是没想清具体怎么操作。不知道老师怎么看","like_count":3,"discussions":[{"author":{"id":1074818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/66/82/c2acd57e.jpg","nickname":"蔡呆呆","note":"","ucode":"51EDDEFB274CB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204509,"discussion_content":"这种更适合用状态机吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584185002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1610573,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","nickname":"饭","note":"","ucode":"B3F1702D4DE604","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1074818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/66/82/c2acd57e.jpg","nickname":"蔡呆呆","note":"","ucode":"51EDDEFB274CB3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205113,"discussion_content":"有推荐的开源组件吗？没用过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584267932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204509,"ip_address":""},"score":205113,"extra":""},{"author":{"id":1242602,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/ea/5f046856.jpg","nickname":"Dale","note":"","ucode":"AD19A33FE5EEDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1074818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/66/82/c2acd57e.jpg","nickname":"蔡呆呆","note":"","ucode":"51EDDEFB274CB3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411667,"discussion_content":"也想到了用状态机来处理，但不知道怎么落地实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635959320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204509,"ip_address":""},"score":411667,"extra":""}]},{"author":{"id":2297351,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Urru5Bvib5z8SjmiacqY8SyjUXpIVNu27fH7H8vvxibbiaHOtUulNW8kQNuTibOFGG8jiay99EcD339jBqf1Mm2fqNwQ/132","nickname":"Geek_97d956","note":"","ucode":"D4FAC98907E1D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380320,"discussion_content":"怀疑是不是海鼎公司\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624436859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1088710,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","nickname":"苗","note":"","ucode":"5ECCC6C855E541","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216313,"discussion_content":"这种适合建立领域模型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585416233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187241,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1584068079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14468969967","product_id":100039001,"comment_content":"课堂讨论: <br><br>在今天内容的第二个模块“EventBus 框架功能需求介绍”中，我们用 Guava EventBus 重新实现了 UserController，实际上，代码还是不够解耦。UserController 还是耦合了很多跟观察者模式相关的非业务代码，比如创建线程池、注册 Observer。为了让 UserController 更加聚焦在业务功能上，你有什么重构的建议吗？<br><br><br><br>使用EventBus后, setRegObservers()方法无需在UserController中调用了, 每个Observer的构造器中EventBus.register(this)就可以了. EventBus的意义就在于将Observable与Observer彻底解耦.<br><br><br><br>EventBus作为系统中唯一的组件, 可以设计成单例模式. Observable可以直接通过EventBus.getDefault().post(XXEvent())的方式使用, Observable无需依赖注入.<br><br><br><br>线程池的创建可以使用Builder模式为EventBus配置. 在Application进程初始化时, 即配置EventBus的线程池. 如此Observable就可以无需考虑线程池的配置.<br><br><br>EventBus可以提供unregister()以便observer生命周期管理.","like_count":3},{"had_liked":false,"id":256546,"user_name":"seker","can_delete":false,"product_type":"c1","uid":1122034,"ip_address":"","ucode":"9B705F91355873","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/f2/453d5f88.jpg","comment_is_top":false,"comment_ctime":1603675762,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10193610354","product_id":100039001,"comment_content":"class1.isAssignableFrom(class2)<br>从class1的角度看，是判断class1是否为class2的父类。从class2的角度看，是判断class2是否为class1的子类。<br>  <br>所谓可匹配指的是，能接收的消息类型是发送消息（post 函数定义中的 event）类型的父类。<br>  <br>public List&lt;ObserverAction&gt; getMatchedObserverActions(Object event)<br>入参event是method方法的参数，通过Class&lt;?&gt; postedEventType = event.getClass()可以拿到入参的类型，而这个类型就是发送消息的类型。<br>能接收的消息类型通过Class&lt;?&gt; eventType = entry.getKey()拿到。<br>  <br>综上所述，是要判断postedEventType是否为eventType的子类，或者说是要判断eventType是否为postedEventType的父类。<br>故代码应该写成eventType.isAssignableFrom(postedEventType)","like_count":2},{"had_liked":false,"id":226411,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1510495,"ip_address":"","ucode":"C6FC61A90F202B","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/5f/4cbcbfb9.jpg","comment_is_top":false,"comment_ctime":1592073044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182007636","product_id":100039001,"comment_content":"看不懂java的我，用c++模仿文中的内容实现了一个c++版本的EventBus：<br>https:&#47;&#47;github.com&#47;chenhongjun&#47;event?files=1&amp;from=timeline<br>支持多类型msg，支持同步和异步，使用线程池","like_count":2},{"had_liked":false,"id":205626,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1586690171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10176624763","product_id":100039001,"comment_content":"感谢大家点赞，收到了37个赞，今天重新读了一下 EventBus 的源码，发现这个留言存在问题。&quot;遇到事件死循环的时候还会报错。&quot; Event Bus 是允许循环提交事件的，假如采用深度优先，则会导致线程栈溢出报错，假如使用广度优先，则会导致死循环。<br><br>前面误解了，递归报错是源自于 LoadingCache 在执行加载缓存A的时候，方法栈一直又重复递归加载A，则会导致报错：<br>java.lang.IllegalStateException: Recursive load of: 1000020000000066<br> at com.google.common.base.Preconditions.checkState(Preconditions.java:197)<br>at com.google.common.cache.LocalCache$Segment.waitForLoadingValue(LocalCache.java:2299)<br><br>因为我使用的EventBus 去驱动 LoadingCache 加载缓存的，所以误以为是 EventBus 报的错。<br><br>另外我自己针对 EventBus 做了一次比较具体的源码分析，并且使用了王争老师设计模式专栏中P15-22讲的设计模式思想对 EventBus 代码进行了分析，这里分享给大家，同时为我没经考据的留言表示歉意：<br>https:&#47;&#47;juejin.im&#47;post&#47;5e925c75f265da47b844fd83","like_count":2},{"had_liked":false,"id":188269,"user_name":"Geek_76616d","can_delete":false,"product_type":"c1","uid":1744992,"ip_address":"","ucode":"809765A24C4E70","user_header":"","comment_is_top":false,"comment_ctime":1584333471,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10174268063","product_id":100039001,"comment_content":"对Guava EventBus相见恨晚啊","like_count":2,"discussions":[{"author":{"id":1297112,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ca/d8/b109ed85.jpg","nickname":"Jack","note":"","ucode":"F3863DAEF449D5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388750,"discussion_content":"然而google已经不建议用eventbus了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628934879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292545,"discussion_content":"Actor 编程模型也很炫酷","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595253475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187389,"user_name":"hanazawakana","can_delete":false,"product_type":"c1","uid":1251721,"ip_address":"","ucode":"E0F6FACBFE7D15","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/89/20488013.jpg","comment_is_top":false,"comment_ctime":1584097614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174032206","product_id":100039001,"comment_content":"单独用一个工具类来处理eventbus相关的注册和post操作。然后通过依赖注入传给usercontroller","like_count":2},{"had_liked":false,"id":187185,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1584054593,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"10173989185","product_id":100039001,"comment_content":"在例子中当eventbus调用post传递的参数中是long userId,而两个observer被subcriber注解的方法参数都一样，此时这两个方法都会被调用到吗？","like_count":2,"discussions":[{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343440,"discussion_content":"使得","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611045995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1880582,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/b2/06/2086d76d.jpg","nickname":"buggetout","note":"","ucode":"63A948EF415FDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273763,"discussion_content":"@Subscribe注解和@KafkaListener注解类似的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590499152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1880582,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/b2/06/2086d76d.jpg","nickname":"buggetout","note":"","ucode":"63A948EF415FDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273762,"discussion_content":"实践了一下是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590499100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330509,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4d/4d/58c2ffa1.jpg","nickname":"smartjia","note":"","ucode":"704BCDE56251D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215629,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585363305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345064,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1651997520,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5946964816","product_id":100039001,"comment_content":"这是一节 java 课。","like_count":1},{"had_liked":false,"id":277382,"user_name":"zh","can_delete":false,"product_type":"c1","uid":1982711,"ip_address":"","ucode":"98772B1B6C6E06","user_header":"https://static001.geekbang.org/account/avatar/00/1e/40/f7/e62bbc62.jpg","comment_is_top":false,"comment_ctime":1612402466,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5907369762","product_id":100039001,"comment_content":"作为cpp选手，这节有点不太友好了，反射语法、注解都不太懂...前面的讲得很好，特别是设计原则与思想部分，但后面涉及的一些技术点用C++翻译还是比较吃力啊，比如IOC、反射、动态代理...","like_count":1,"discussions":[{"author":{"id":1132569,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/19/14dd81d9.jpg","nickname":"铲铲队","note":"","ucode":"D16372C34B7AE3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549792,"discussion_content":"同感受，C++选手看起来迷糊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644242513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221412,"user_name":"worthto","can_delete":false,"product_type":"c1","uid":1387712,"ip_address":"","ucode":"41D7ABBBD2E7FF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N6yjnrLnMW4XVSkBr3f0N3F962l35b5j0kib9VSlAqqbf6iaoCPicL1WnJ9KjgT4egQ7A2G0Zx3OayaK4yuoZrUVA/132","comment_is_top":false,"comment_ctime":1590495556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5885462852","product_id":100039001,"comment_content":"为何要使用@Subscribe所注解的方法的参数作为事件类型，Guava也是这样做的吗？<br>个人觉得这样做有几个问题，1、这种约定有点不平易近人；2、这样做限定了@Subscribe方法的参数的个数；3、如果同一个Observer里面有多个@Subscribe方法的参数相同，但是他们所需要关注的事件不同，这样做就必须在@Subscribe方法内部去做逻辑判断了。4、是否可以设计成这样，在@Subscribe注解内部设定事件类型，而不直接通过@Subscribe方法的参数判定事件类型。","like_count":1},{"had_liked":false,"id":187700,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1584195404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879162700","product_id":100039001,"comment_content":"为了让 UserController 更加聚焦在业务功能上，我的想法是将耦合的EventBus代码抽取出来形成一个单独的服务类，通过注入的方式注入到UserController类中使用。这样使其两者的职责单一，而新抽取出来的服务类可被其他业务场景复用。<br>今天也加深了对Guava Eventbus的认识，虽然之前专栏也介绍过这个类库的使用。结合Jdk提供的java.util.Observable&amp;Observer观察者模式API，与EventBus进行比对，如果要实现进程内的观察者使用EventBus最为方便。从JDK9之后，java.util.Observable&amp;Observer已被标记为废弃，建议使用Java Beans规范中的事件模式和java.util.concurrent.Flow API。","like_count":1},{"had_liked":false,"id":187473,"user_name":"Jian","can_delete":false,"product_type":"c1","uid":1107305,"ip_address":"","ucode":"17ED4919F22DEC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/69/719ec5d0.jpg","comment_is_top":false,"comment_ctime":1584120726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879088022","product_id":100039001,"comment_content":" 最近公司做了个业务系统架构重构，套用了其它公司的业务架构，架构与业务耦合的太紧，做起来非常痛苦，越来越觉得跟争哥写的专栏相违背。","like_count":1},{"had_liked":false,"id":187314,"user_name":"1012still","can_delete":false,"product_type":"c1","uid":1196268,"ip_address":"","ucode":"739D376A519405","user_header":"https://static001.geekbang.org/account/avatar/00/12/40/ec/a00109c8.jpg","comment_is_top":false,"comment_ctime":1584082259,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5879049555","product_id":100039001,"comment_content":"UserController 耦合的跟观察者模式相关的非业务代码可以使用代理模式进行重构","like_count":1},{"had_liked":false,"id":187264,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1584070355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879037651","product_id":100039001,"comment_content":"UserController 还是耦合了很多跟观察者模式相关的非业务代码，比如创建线程池、注册 Observer。为了让 UserController 更加聚焦在业务功能上，你有什么重构的建议吗？<br>创建一个UserSubject类,将线程创建和注册Observer逻辑封装在进该类型,再通过依赖注入方式注入到UserController,最后UserController只需UserSubject的post函数就可以发送消息了.","like_count":1},{"had_liked":false,"id":187224,"user_name":"，","can_delete":false,"product_type":"c1","uid":1701867,"ip_address":"","ucode":"A5543C8DFEB198","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","comment_is_top":false,"comment_ctime":1584064252,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5879031548","product_id":100039001,"comment_content":"课后题:可以将EventBus和AsyncEventBus存入spring容器中,使用前先将ObServer注册进去,之后使用的时候只要依赖注入就可以了","like_count":1},{"had_liked":false,"id":187200,"user_name":"孙志强","can_delete":false,"product_type":"c1","uid":1325997,"ip_address":"","ucode":"9C070F1E4EC6FF","user_header":"https://static001.geekbang.org/account/avatar/00/14/3b/ad/31193b83.jpg","comment_is_top":false,"comment_ctime":1584058771,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5879026067","product_id":100039001,"comment_content":"EventBus和Spring里的事件机制好像","like_count":1},{"had_liked":false,"id":187196,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1584058373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879025669","product_id":100039001,"comment_content":"生产消费者模式可实现，eventbus管理一个消息队列，观察者自己注册到evenbus，业务发消息到队列后，取出来给匹配的观察者执行","like_count":1},{"had_liked":false,"id":187193,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1584057575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879024871","product_id":100039001,"comment_content":"打卡<br><br>","like_count":1},{"had_liked":false,"id":187187,"user_name":"Rayjun","can_delete":false,"product_type":"c1","uid":1002514,"ip_address":"","ucode":"61A3D1A3D03569","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/12/f0c145d4.jpg","comment_is_top":false,"comment_ctime":1584056125,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5879023421","product_id":100039001,"comment_content":"EventBus可以使用依赖注入的方式注入进来","like_count":1},{"had_liked":false,"id":347531,"user_name":"Geek_7e0e83","can_delete":false,"product_type":"c1","uid":2142423,"ip_address":"","ucode":"554DEE2AAAE33C","user_header":"","comment_is_top":false,"comment_ctime":1654131539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654131539","product_id":100039001,"comment_content":"UserController可以继承一个父类，父类来具体完成这些非业务的功能和实现。然后子类聚焦在业务功能上。使用代理模式<br>","like_count":0},{"had_liked":false,"id":339113,"user_name":"Senble","can_delete":false,"product_type":"c1","uid":1330328,"ip_address":"","ucode":"98A8DC9FF625FD","user_header":"https://static001.geekbang.org/account/avatar/00/14/4c/98/2e916c7e.jpg","comment_is_top":false,"comment_ctime":1647922463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647922463","product_id":100039001,"comment_content":"通过注解自动将Observer注册进去，然后EventBus做成单例。这样业务方只需要调用EventBus发送消息就行了，而无需关系EventBus初始化&amp;注册逻辑。","like_count":0},{"had_liked":false,"id":335557,"user_name":"Geek_e61474","can_delete":false,"product_type":"c1","uid":1433693,"ip_address":"","ucode":"9EE2A63C0CFC7C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2Cudic6gESQc9ibYcBOiazT13hDUaVs4fWlpwsAfvbjazXHMiaibR90TbWtF4Wcujj31Jqiah9TzX8FUlia6A1LibicVhibg/132","comment_is_top":false,"comment_ctime":1645585732,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645585732","product_id":100039001,"comment_content":"&#47;&#47; Interface:User模块只有需要EventBus的API<br>public interface IUserEventBus{<br>    public Long register(String telephone, String password);<br>}<br>&#47;&#47; 静态代理<br>public class UserEventBusProxy implements IUserEventBus {<br>  private UserController userController;<br>  private EventBus eventBus;  <br>  private static final int DEFAULT_EVENTBUS_THREAD_POOL_SIZE = 20;<br>  <br>  public UserEventBusProxy(UserController userController){<br>      this.userController=userController;<br>     eventBus = new AsyncEventBus(Executors.newFixedThreadPool(DEFAULT_EVENTBUS_THREAD_POOL_SIZE)); <br>    }<br>  <br>   public void setRegObservers(List&lt;Object&gt; observers) {<br>    for (Object observer : observers) {<br>      eventBus.register(observer);<br>    }<br>  }<br>  <br>    public Long register(String telephone, String password){<br>      <br>     Long userId=userController.register(telephone,password);<br>     eventBus.post(userId);<br>     <br>     return userId;<br>    }<br>}","like_count":0},{"had_liked":false,"id":330613,"user_name":"LIFE l=new LIFE()","can_delete":false,"product_type":"c1","uid":2446981,"ip_address":"","ucode":"729BACA3B7FD42","user_header":"https://static001.geekbang.org/account/avatar/00/25/56/85/6da913fa.jpg","comment_is_top":false,"comment_ctime":1642069944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642069944","product_id":100039001,"comment_content":"如果是多个不同的订阅者的参数类型一致。这样就需要每一种业务有自己的EventBus；<br>calss A{<br>  fa(String str);<br>}<br><br>calss B{<br>  fb(String str);<br>}<br>如果A B两个类的业务不一样，那么就需要两个EventBus分别来分发A B的业务","like_count":0},{"had_liked":false,"id":325486,"user_name":"妄想","can_delete":false,"product_type":"c1","uid":2086179,"ip_address":"","ucode":"4502250D81B242","user_header":"https://static001.geekbang.org/account/avatar/00/1f/d5/23/045ca1e6.jpg","comment_is_top":false,"comment_ctime":1638975077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638975077","product_id":100039001,"comment_content":"请问下 setRegObservers 这个方法在什么时候调用呢，该怎么构造呢？","like_count":0},{"had_liked":false,"id":316379,"user_name":"Kee","can_delete":false,"product_type":"c1","uid":1450423,"ip_address":"","ucode":"DB88BE15E3697B","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/b7/e06238cb.jpg","comment_is_top":false,"comment_ctime":1634291788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634291788","product_id":100039001,"comment_content":"针对UserService 建一个代理类， UserController的代码恢复到没有通知的状态 .","like_count":0},{"had_liked":false,"id":313687,"user_name":"扈丽霞","can_delete":false,"product_type":"c1","uid":2439823,"ip_address":"","ucode":"0AD3FB261A9A9E","user_header":"","comment_is_top":false,"comment_ctime":1632621559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632621559","product_id":100039001,"comment_content":"给大佬点赞，清晰明了呀","like_count":0},{"had_liked":false,"id":311138,"user_name":"Geek_8593e5","can_delete":false,"product_type":"c1","uid":1736807,"ip_address":"","ucode":"B316E40C400CC8","user_header":"","comment_is_top":false,"comment_ctime":1631085465,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631085465","product_id":100039001,"comment_content":"同步和异步,阻塞和非阻塞,这两组词语在文章内使用的比较混乱,没有表达出相应的意思","like_count":0},{"had_liked":false,"id":292765,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1065986,"ip_address":"","ucode":"3D3D10273BED18","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/02/5c8e4b81.jpg","comment_is_top":false,"comment_ctime":1620970520,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1620970520","product_id":100039001,"comment_content":"继续封装一层 ，比如叫 EventCenter  ， 提供 注册 和 触发 二个对外接口 ，  <br>在 UserController 里面只需要 调用 事件触发就好了，  事件的注册 可以变为配置文件，初始化 注册 或者动态注册。<br><br>","like_count":0},{"had_liked":false,"id":270491,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1609145379,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609145379","product_id":100039001,"comment_content":"把发送event bus的代码使用spring aop+注解实现。看起来就干净了","like_count":0},{"had_liked":false,"id":257987,"user_name":"Awake  Dreaming","can_delete":false,"product_type":"c1","uid":1658734,"ip_address":"","ucode":"D1A19933863FD6","user_header":"https://static001.geekbang.org/account/avatar/00/19/4f/6e/bff1e33e.jpg","comment_is_top":false,"comment_ctime":1604235841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604235841","product_id":100039001,"comment_content":"关于课后题，我的想法是将创建总线的逻辑抽取出来，通过依赖注入Controller","like_count":0},{"had_liked":false,"id":254793,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1603187625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603187625","product_id":100039001,"comment_content":"增加消息队列可以减少耦合代码。没有什么耦合是不能加一层解决的，如果不行，那就加两层。<br>但势必会让中间层也耦合其他模块。<br>耦合是相对的，如果一个篮子装50个蛋，有点多，就多装几个篮子。无论怎么分，也是完整的一个蛋，如果需求真的有必要把蛋壳、蛋黄和蛋白分开（如做鸡蛋糕），那只能加几个碗装了（模块拆分）。","like_count":0},{"had_liked":false,"id":248533,"user_name":"路人","can_delete":false,"product_type":"c1","uid":1084291,"ip_address":"","ucode":"55FF703DE772D7","user_header":"https://static001.geekbang.org/account/avatar/00/10/8b/83/d2afc837.jpg","comment_is_top":false,"comment_ctime":1600215620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600215620","product_id":100039001,"comment_content":"spring中事件也包含了这些功能，更强大更好用","like_count":0},{"had_liked":false,"id":242972,"user_name":"Drjuror","can_delete":false,"product_type":"c1","uid":1683180,"ip_address":"","ucode":"21D87CFF49C68B","user_header":"","comment_is_top":false,"comment_ctime":1597908680,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597908680","product_id":100039001,"comment_content":"确实让我感受到做业务开发的，也是有水平高低之分的<br>","like_count":0},{"had_liked":false,"id":239779,"user_name":"worthy","can_delete":false,"product_type":"c1","uid":1142202,"ip_address":"","ucode":"88E3D623C7EE7F","user_header":"https://static001.geekbang.org/account/avatar/00/11/6d/ba/0821c8a7.jpg","comment_is_top":false,"comment_ctime":1596639291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596639291","product_id":100039001,"comment_content":"mark 有时间再看一遍","like_count":0},{"had_liked":false,"id":232864,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1594132530,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1594132530","product_id":100039001,"comment_content":"非业务性需求可抽象成为框架进行隐藏细节，把非业务放到框架中，解耦业务代码。比如消息总线的注册、线程创建放入框架中，框架扫描特定注解之类的方式进行观察着注册","like_count":0},{"had_liked":false,"id":229921,"user_name":"sunsweet","can_delete":false,"product_type":"c1","uid":1027879,"ip_address":"","ucode":"787F9E1EC6A67E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/27/76489618.jpg","comment_is_top":false,"comment_ctime":1593190633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593190633","product_id":100039001,"comment_content":"这一节真过瘾","like_count":0},{"had_liked":false,"id":224754,"user_name":"肖臧","can_delete":false,"product_type":"c1","uid":1047733,"ip_address":"","ucode":"4FAC9FF54DD6A0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","comment_is_top":false,"comment_ctime":1591529893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591529893","product_id":100039001,"comment_content":"大家有没有想过既然ObserverRegistry里Event和ObserverActinon分别是Map的Key和Value，为什么不直接以PostedEvent作为Key，去Map里get对应的Value，反而要遍历整个Map用Class.isAssignableFrom去比较。因为入参有可能是Event对象的超类，Event超类实例的hash值肯定和Event对象不一致，为了保险只能遍历整个Map，不过我觉得既然用了Map，还是应该先get一下，get不到再遍历整个map。不然把Event和ObserverAction组成Pair再放入一个List更合理","like_count":0},{"had_liked":false,"id":215646,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1589041804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589041804","product_id":100039001,"comment_content":"对于老师留的思考题，我觉得可以自定义注解，标注那些类是观察者，通过包扫描来注册这些类，然后设计一个controller 的父类，实现一个post方法，需要发布事件的controller继承这个父类，调用父类的post方法就可以","like_count":0},{"had_liked":false,"id":213470,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1588425839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588425839","product_id":100039001,"comment_content":"其实post方法的具体实现细节可以放到eventbus里面，过度耦合，而且不符合单一职责，不符合最少知道原则。而eventbus只暴露一个接口给上层接口就行了，上层不需要知道具体怎么做","like_count":0},{"had_liked":false,"id":211508,"user_name":"Lambor","can_delete":false,"product_type":"c1","uid":1275494,"ip_address":"","ucode":"0E3C3C39A22495","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/66/cbd6013c.jpg","comment_is_top":false,"comment_ctime":1587975121,"is_pvip":false,"replies":[{"id":"78752","content":"很难保证 需要更复杂的措施","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1588042073,"ip_address":"","comment_id":211508,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587975121","product_id":100039001,"comment_content":"使用异步非阻塞观察者模式，事务怎么控制呢？毕竟最后都是扔到线程池里执行。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493281,"discussion_content":"很难保证 需要更复杂的措施","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588042073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206784,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1586934507,"is_pvip":false,"replies":[{"id":"86794","content":"多谢指出，我改下！","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594904308,"ip_address":"","comment_id":206784,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586934507","product_id":100039001,"comment_content":"老师，例子跑不通，应该把long 类型参数改为封装类型Long ,不然找不到对应的订阅者","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491902,"discussion_content":"多谢指出，我改下！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594904308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204117,"user_name":"岁月","can_delete":false,"product_type":"c1","uid":1337598,"ip_address":"","ucode":"29A2A2BC3C4FE4","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","comment_is_top":false,"comment_ctime":1586335095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586335095","product_id":100039001,"comment_content":"解决订阅某个对象的某个属性这种功能, 有一个固定好用的套路去解决<br>1. 先用一个散列表, key表示属性, value表示对应的订阅者池<br>2. 订阅者池可以用散列表+双向链表实现. 双向链表用来支持遍历订阅者, 散列表用来快速删除某个订阅者....然后每个订阅者都被封装到双向链表节点上, 散列表就保存这个这个链表节点即可.","like_count":0},{"had_liked":false,"id":203641,"user_name":"Shonn","can_delete":false,"product_type":"c1","uid":1590542,"ip_address":"","ucode":"393C2004D5A881","user_header":"https://static001.geekbang.org/account/avatar/00/18/45/0e/0901b3c3.jpg","comment_is_top":false,"comment_ctime":1586245475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586245475","product_id":100039001,"comment_content":"为了让UserController聚焦在注册等业务功能上，可以将线程池，注册观察者等代码放到EventBus中，将观察者和UserController彻底解耦，UserController只负责注册之后的事件分发。","like_count":0},{"had_liked":false,"id":203275,"user_name":"与路同飞","can_delete":false,"product_type":"c1","uid":1138821,"ip_address":"","ucode":"2985F1440A1962","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/85/f72f1d94.jpg","comment_is_top":false,"comment_ctime":1586164373,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586164373","product_id":100039001,"comment_content":"1.请对比一下“生产者 - 消费者”模型和观察者模式的区别和联系。<br>答：观察者模式，是一个或者多个观察者对应一个被观察者，观察者需要注册到被观察者中，没有做到<br>代码的真正解藕。生产者-消费者，是多对多的关系，例如消息中间件系统，通过一个第三方系统，将生产者与消费者真正的解藕开来。<br>","like_count":0,"discussions":[{"author":{"id":1259293,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/1d/b8014237.jpg","nickname":"千里之行 始于足下","note":"","ucode":"8F1CD8CECA588F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98327,"discussion_content":"遇到非CRUD的业务确实是会更用心一些，但是我们项目组给的时间太紧了，所以就算有这样的机会，做出来的东西事后看起来自己都看不下去，但是已经上了生成的又不敢乱改了","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1577154955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2516041,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/1UV7tTtMTM8hyvGl2YaSVczZve3e2aOcrRafvg64WQo7hYRRzGnondFElhGv0RnQZQgn6PycYzal2b5oAwYXtg/132","nickname":"太行山人","note":"","ucode":"66EB8BFD311A45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1259293,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/1d/b8014237.jpg","nickname":"千里之行 始于足下","note":"","ucode":"8F1CD8CECA588F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538566,"discussion_content":"理想与现实的差距，慢慢的，我们的理想就没了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639447382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":98327,"ip_address":""},"score":538566,"extra":""},{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1259293,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/1d/b8014237.jpg","nickname":"千里之行 始于足下","note":"","ucode":"8F1CD8CECA588F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559927,"discussion_content":"加班！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649061899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":98327,"ip_address":""},"score":559927,"extra":""}]},{"author":{"id":1999235,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/81/83/f93b1e62.jpg","nickname":"peaceForce","note":"","ucode":"98A318930DDC9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374837,"discussion_content":"结果一个验证码pm问你需要多少天, 你说三天, 对方立马就压了一半。除了有优化的意识, 如何说服工期安排也是个问题。","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1621386343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1369757,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","nickname":"早起不吃虫","note":"","ucode":"13CD3B5E1F9435","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1999235,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/81/83/f93b1e62.jpg","nickname":"peaceForce","note":"","ucode":"98A318930DDC9A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538640,"discussion_content":"怕是最多分配半天","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639465069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374837,"ip_address":""},"score":538640,"extra":""},{"author":{"id":1386966,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/d6/6dafc576.jpg","nickname":"糖小宝","note":"","ucode":"15A8B649F668B1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1999235,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/81/83/f93b1e62.jpg","nickname":"peaceForce","note":"","ucode":"98A318930DDC9A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544277,"discussion_content":"你可以试试不要立即回复他，列一个列表，开发这个需求每个功能点所需要的时间，以小时为单位，加上优化调试时间，这样你要求的工时可以不必被他压缩，虽然他不会认真看，但有个列表，他会觉得你要求的工时是有凭据的","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1641456214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374837,"ip_address":""},"score":544277,"extra":""}]},{"author":{"id":1158946,"avatar":"https://static001.geekbang.org/account/avatar/00/11/af/22/559c2fdb.jpg","nickname":"Mr.S","note":"","ucode":"96DC8BE01D54C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266382,"discussion_content":"赞同  珍惜非CURD需求","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1589507347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1489957,"avatar":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","nickname":"tt","note":"","ucode":"7753B79AD5A9AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69170,"discussion_content":"这样的工作才会给我们意义感","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1575267387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1593289,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","nickname":"编程界的小学生","note":"","ucode":"4A5BE9A5E877FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1489957,"avatar":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","nickname":"tt","note":"","ucode":"7753B79AD5A9AC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69193,"discussion_content":"同感。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1575269662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":69170,"ip_address":""},"score":69193,"extra":""}]},{"author":{"id":1144171,"avatar":"https://static001.geekbang.org/account/avatar/00/11/75/6b/fd685164.jpg","nickname":"lcf枫","note":"","ucode":"D51E8F68BD41CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196704,"discussion_content":"同意 最好是自己做一个模块，负责他。这样就会不停的优化，亲儿子一样对待。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1583369698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70189,"discussion_content":"天天CRUD，自己也觉得烦，没啥提升","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1575335676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311947,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/xysT7OH4SrD4sv944ndDv5tnJOk5na37Gxd5owGWsE7ON7AVW0ibnYGNRoZd0ibLWhFVXLLjOB5QFxwjo0EGIkoQ/132","nickname":"雨下不停","note":"","ucode":"0893B9C249E48A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234604,"discussion_content":"说得好","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586968105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073087,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/bf/4bd3eb4b.jpg","nickname":"米 虫","note":"","ucode":"6F35AA8BB8195B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68987,"discussion_content":"惭愧，上次提供支付回调接口给第三方的时候。写的流水帐，没有封装一点通用性能。虽然思路跟今天的课程一样。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575249644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1593289,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","nickname":"编程界的小学生","note":"","ucode":"4A5BE9A5E877FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1073087,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/bf/4bd3eb4b.jpg","nickname":"米 虫","note":"","ucode":"6F35AA8BB8195B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69068,"discussion_content":"可以考虑重构下来提升自己","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575256680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":68987,"ip_address":""},"score":69068,"extra":""}]},{"author":{"id":2068684,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotIianb3beTzsGIte6BZxlIhEwc2ryrNBGxZy8ibKbfibVJyUS8d3ZxybAdfJwHPm13ydPC4VJP7Lbw/132","nickname":"taku","note":"","ucode":"B22DA9A4A9DC91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379231,"discussion_content":"确实是个好方法，遇到非curd就好好把握，赞","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623763511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1321016,"avatar":"https://static001.geekbang.org/account/avatar/00/14/28/38/d93928e0.jpg","nickname":"yh","note":"","ucode":"64FFFB8A5DB979","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215840,"discussion_content":"赞同，就是产品需求变化太快，跟不上他们的节奏。😂😂😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585389652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1178156,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fa/2c/9a0c45e6.jpg","nickname":"微凉","note":"","ucode":"F6BD0AE11AE224","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69104,"discussion_content":"哈哈，完全同意。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575261398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2096683,"avatar":"","nickname":"Geek_151295","note":"","ucode":"970A611ECFB457","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575809,"discussion_content":"这个验证码服务。有开源的地址吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655117790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377409,"discussion_content":"😳","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622632082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512537,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/aFAYPyw7ywC1xE9h1qibnTBwtWn2ClJqlicy5cMomhZVaruMyqSq76wMkS279mUaGhrLGwWo9ZnW0WCWfmMovlXw/132","nickname":"木瓜777","note":"","ucode":"FC52A499AF6374","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73696,"discussion_content":"遇到问题，我首先会实现一版，然后去优化重构！有时对需求不太理解，但产品又急需看到效果，所以并没有过多思考设计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575589997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1540988,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","nickname":"FIGNT","note":"","ucode":"D9DB185AE9E67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68957,"discussion_content":"crud能不能也做成比较通用的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575248012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1593289,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","nickname":"编程界的小学生","note":"","ucode":"4A5BE9A5E877FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1540988,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","nickname":"FIGNT","note":"","ucode":"D9DB185AE9E67C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69069,"discussion_content":"也需要区分场景，部分也可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575256709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":68957,"ip_address":""},"score":69069,"extra":""}]}]},{"had_liked":false,"id":203236,"user_name":"番茄炒西红柿","can_delete":false,"product_type":"c1","uid":1690242,"ip_address":"","ucode":"13F47BABAB2110","user_header":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","comment_is_top":false,"comment_ctime":1586159330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586159330","product_id":100039001,"comment_content":"最后的问题我的思路是有even事件单独抽离出来，不要雨user耦合，作为even单独接口。","like_count":0},{"had_liked":false,"id":201278,"user_name":"背道而驰","can_delete":false,"product_type":"c1","uid":1629094,"ip_address":"","ucode":"953CFFE377E176","user_header":"https://static001.geekbang.org/account/avatar/00/18/db/a6/60bf0220.jpg","comment_is_top":false,"comment_ctime":1585744447,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585744447","product_id":100039001,"comment_content":"自实现的eventbus 和文件目录监听实例  https:&#47;&#47;github.com&#47;datayangl&#47;EventBus","like_count":0},{"had_liked":false,"id":200185,"user_name":"taotaowang","can_delete":false,"product_type":"c1","uid":1365177,"ip_address":"","ucode":"108489DD55723A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIvMlvSXsYgJibgutQdyFT6LsrXuvbjWVh0UpcF4esLzlWzBRlsFHA9MyBY38ibngKAN8mDn6DdHnMQ/132","comment_is_top":false,"comment_ctime":1585554010,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585554010","product_id":100039001,"comment_content":"EventBus还是有一个不方便之处，post只支持有且只有一个参数","like_count":0,"discussions":[{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579363,"discussion_content":"dto","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657373527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198136,"user_name":"daniel李","can_delete":false,"product_type":"c1","uid":1248280,"ip_address":"","ucode":"573840F0C6573E","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/18/bacf4b7a.jpg","comment_is_top":false,"comment_ctime":1585411560,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585411560","product_id":100039001,"comment_content":"想请教老师2个问题。<br><br>问题1: 就以用户注册后要发优惠卷的例子。业务要求如果注册用户是30岁以上就不发优惠卷。这个逻辑应该在什么地方呢？一般能想到就两个方案<br>1. 在event bus post 之前做个逻辑判断<br>2. 在subscriber里做判断<br><br>方案一的好处是提前知道不需要发卷，避免创建不需要的线程<br><br>方案二的好处是publisher不需要知道岁数判断的细节<br><br>问题2: 就文中的例子，我司会把事件发布放在user registration service里而不是在controller里。这样做有什么不妥吗？<br><br>我经常会和师兄争论上述两个问题，老师是否能指点一下呢？","like_count":0,"discussions":[{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354965,"discussion_content":"我觉得提前判断好一点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615369313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197762,"user_name":"FIGNT","can_delete":false,"product_type":"c1","uid":1540988,"ip_address":"","ucode":"D9DB185AE9E67C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","comment_is_top":false,"comment_ctime":1585397251,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585397251","product_id":100039001,"comment_content":"注册观察者，可以在观察者类上加个z自定义注解@Observer或者@Listener。想Spring一样去扫描注册。<br>线程池也是一样的。底层是动态代理模式。不知道老师的方案是什么？课后思考思考过了，但是有些问题不知道是否正确或者更好答案。能否在结束的时候给出每节课的问题？","like_count":0},{"had_liked":false,"id":197340,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1585369231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585369231","product_id":100039001,"comment_content":"感觉突然得到一个宝","like_count":0},{"had_liked":false,"id":195634,"user_name":"土豆有点","can_delete":false,"product_type":"c1","uid":1118335,"ip_address":"","ucode":"75AFA9F013D4C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/7f/6f5cb6ce.jpg","comment_is_top":false,"comment_ctime":1585207725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585207725","product_id":100039001,"comment_content":"不知道有没有极友再复现王老师的简版evenBus的异步非阻塞有多线程问题","like_count":0},{"had_liked":false,"id":195219,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1585147533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585147533","product_id":100039001,"comment_content":"设计模式_57:<br># 作业<br>- 第一眼感觉是EventBus的依赖注入<br>- 然后发现还是耦合，应该使用代理，将非UserController的业务逻辑交给代理。<br><br># 感想<br>跟着写了一遍EventBus，读到`isAssignableFrom`方法的时候，不熟悉这个方法，准备读一下源码的注释，转念一想，时间有限，这个方法不是重点，知道想做什么就行了。。。<br>然后，程序运行起来总是报错，后来才发现是`isAssignableFrom`方法两侧的参数写反了。<br>```<br>postedEventType.isAssignableFrom(eventType)&#47;&#47;错误代码<br>```<br>头疼~~~","like_count":0},{"had_liked":false,"id":194191,"user_name":"eason2017","can_delete":false,"product_type":"c1","uid":1009422,"ip_address":"","ucode":"E070BA624FA490","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","comment_is_top":false,"comment_ctime":1585035735,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585035735","product_id":100039001,"comment_content":"可以单独提出一个类来管理EventBus对象的创建（可用spring来管理bean），同时提供注册observer的方法函数。统一由这个类来管理。<br>将这个类注入到UserController里，并暴露出一个获取eventbus的方法来使用。","like_count":0},{"had_liked":false,"id":193955,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1585006581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585006581","product_id":100039001,"comment_content":"可以使用代理模式去优化，不过最终还是看业务情况。<br>不能为了优化而优化，要考虑业务的影响。","like_count":0},{"had_liked":false,"id":193725,"user_name":"佐西玛","can_delete":false,"product_type":"c1","uid":1090743,"ip_address":"","ucode":"73AAED82340E2B","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/b7/e0d88365.jpg","comment_is_top":false,"comment_ctime":1584955006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584955006","product_id":100039001,"comment_content":"争哥，AsyncEventBus是多线程执行observerAction.execute(event)这个方法，为什么ObserverRegistry的registry要用concurrentMap，而且还要用 CopyOnWriteArraySet来存储ObserverAction。","like_count":0},{"had_liked":false,"id":191938,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1584804819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584804819","product_id":100039001,"comment_content":"思考题，可以用代理模式","like_count":0},{"had_liked":false,"id":191087,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1584733573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584733573","product_id":100039001,"comment_content":"非常实用","like_count":0},{"had_liked":false,"id":187293,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1584076217,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584076217","product_id":100039001,"comment_content":"课堂讨论：装饰器模式修饰UserController，在装饰器类里面创建线程池，注册Observer。","like_count":0,"discussions":[{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343453,"discussion_content":"重点跟业务无关， 代理模式了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611048065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187274,"user_name":"让爱随风","can_delete":false,"product_type":"c1","uid":1106055,"ip_address":"","ucode":"AD8FD6EC95B5B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/87/75990554.jpg","comment_is_top":false,"comment_ctime":1584072181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584072181","product_id":100039001,"comment_content":"<br>XMsg xMsg = new XMsg();<br>YMsg yMsg = new YMsg();<br>ZMsg zMsg = new ZMsg();<br>post(xMsg); =&gt; AObserver、BObserver接收到消息<br>post(yMsg); =&gt; BObserver接收到消息<br>post(zMsg); =&gt; CObserver接收到消息<br><br>感觉这个是不是不对啊，感觉应该是：<br>XMsg xMsg = new XMsg();<br>YMsg yMsg = new YMsg();<br>ZMsg zMsg = new ZMsg();<br>post(xMsg); =&gt; AObserver 接收到消息<br>post(yMsg); =&gt; AObserver，BObserver接收到消息<br>post(zMsg); =&gt; AObserver，BObserver，CObserver接收到消息<br>","like_count":0},{"had_liked":false,"id":187272,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1584071740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584071740","product_id":100039001,"comment_content":"使用单例作为通知中心将创建线程和注册observer的代码放在里面,将被观察者状态注入到单例类,进而通知观察者.","like_count":0}]}