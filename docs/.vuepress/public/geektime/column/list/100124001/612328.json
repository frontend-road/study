{"id":612328,"title":"27｜掘地三尺：实战深度与广度优先搜索算法","content":"<p>你好，我是郑建勋。</p><p>上节课，我们看到了如何在Go中创建高并发模型，这节课让我们回到项目中来，为爬虫项目构建高并发的模型。</p><p>要想构建高并发模型，我们首先要做的就是将一个大任务拆解为许多可以并行的小任务。比方说在爬取一个网站时，这个网站中通常会有一连串的URL需要我们继续爬取。显然，如果我们把所有任务都放入到同一个协程中去处理，效率将非常低下。那么我们应该选择什么方式来拆分出可以并行的任务，又怎么保证我们不会遗漏任何信息呢？</p><p>要解决这些问题，我们需要进行爬虫任务的拆分、并设计任务调度的算法。首先让我们来看一看两种经典的爬虫算法：深度优先搜索算法（Depth-First-Search，DFS）和广度优先搜索算法（Breadth-First Search，BFS）, 他们也是图论中的经典算法。</p><h2>深度优先搜索算法</h2><p>深度优先搜索算法是约翰·霍普克洛夫特和罗伯特·塔扬共同发明的，他们也因此在1986年共同获得计算机领域的最高奖：图灵奖。</p><p>以下图中的拓扑结构为例，节点A标识的是爬取的初始网站，在网站A中，有B、C两个链接需要爬取，以此类推。深度优先搜索的查找顺序是： 从 A 查找到 B，紧接着查找B下方的D，然后是E。查找完之后，再是C、F，最后是G。可以看出，深度优先搜索的特点就是“顺藤摸瓜”，一路向下，先找最“深”的节点。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/eb/6f/eb9f44ea6ed6c29858d67e5f93c2e96f.jpg?wh=1920x898\" alt=\"图片\"></p><p>深度优先搜索在实践中有许多应用，例如查找图的最长路径、解决八皇后之类的迷宫问题等。<strong>而在实现形式上，深度优先搜索可以采取递归与非递归两种形式。</strong>其中，递归是一种非常经典的分层思想，但是如果函数调用时不断压栈，可能导致栈内存超出限制，这对于Go语言来说会有栈扩容的成本，并且在实践中也不太好调试。而深度优先搜索的非递归形式要更简单一些，我们可以借助堆栈先入后出的特性来实现它，不过需要开辟额外的空间来模拟堆栈。</p><p>《The Go Programming Language》这本书里有一个很恰当的案例，我们以它为基础进一步说明一下。</p><p>假设我们都是计算机系的大学生，需要选修一些课程。但是要选修有的课程必须要先学习它的前序课程。例如，学习网络首先要学习操作系统的知识，而要学习操作系统的知识必须首先学习数据结构的知识。如果我们现在只知道每门课程的前序课程，不清楚完整的学习路径，我们要怎么设计这一系列课程学习的顺序，确保我们在学习任意一门课程的时候，都已经学完了它的前序课程呢？</p><p>这个案例非常适合使用深度优先搜索算法来处理。下面是这个案例的实现代码：</p><pre><code class=\"language-plain\">\n\n// 计算机课程和其前序课程的映射关系\nvar prereqs = map[string][]string{\n\t\"algorithms\": {\"data structures\"},\n\t\"calculus\":   {\"linear algebra\"},\n\n\t\"compilers\": {\n\t\t\"data structures\",\n\t\t\"formal languages\",\n\t\t\"computer organization\",\n\t},\n\n\t\"data structures\":       {\"discrete math\"},\n\t\"databases\":             {\"data structures\"},\n\t\"discrete math\":         {\"intro to programming\"},\n\t\"formal languages\":      {\"discrete math\"},\n\t\"networks\":              {\"operating systems\"},\n\t\"operating systems\":     {\"data structures\", \"computer organization\"},\n\t\"programming languages\": {\"data structures\", \"computer organization\"},\n}\n\nfunc main() {\n\tfor i, course := range topoSort(prereqs) {\n\t\tfmt.Printf(\"%d:\\t%s\\n\", i+1, course)\n\t}\n}\n\nfunc topoSort(m map[string][]string) []string {\n\tvar order []string\n\tseen := make(map[string]bool)\n\tvar visitAll func(items []string)\n\n\tvisitAll = func(items []string) {\n\t\tfor _, item := range items {\n\t\t\tif !seen[item] {\n\t\t\t\tseen[item] = true\n\t\t\t\tvisitAll(m[item])\n\t\t\t\torder = append(order, item)\n\t\t\t}\n\t\t}\n\t}\n\n\tvar keys []string\n\tfor key := range m {\n\t\tkeys = append(keys, key)\n\t}\n\n\tsort.Strings(keys)\n\tvisitAll(keys)\n\treturn order\n}\n</code></pre><p>这里， prereqs 代表计算机课程和它的前序课程的映射关系，核心的处理逻辑则在 visitAll 这个匿名函数中。visitAll 会使用递归计算最前序的课程，并添加到列表的 order 中，这就保证了课程的先后顺序。</p><h2>广度优先搜索算法</h2><p>广度优先搜索指的是从根节点开始，逐层遍历树的节点，直到所有节点均被访问为止。我们还是以之前的拓扑结构为例，广度优先搜索会首先查找A、接着查找B、C，最后查找D、E、F、G。Dijkstra最短路径算法和Prim最小生成树算法都采用了和广度优先搜索类似的思想。</p><p>实现广度优先搜索最简单的方式是使用队列。这是由于队列具有先入先出的属性。以上面的拓扑结构为例，我们可以构造一个队列，然后先将节点A放入到队列中。接着取出A来处理，并将与A相关联的B、C放入队列末尾。接着取出B，将D、E放入队列末尾，接着取出C，将F、G放入队列末尾。以此类推。</p><p>广度优先搜索在实践中的应用也很广泛。例如。要计算两个节点之间的最短路径，即时策略游戏中的找寻路径问题都可以使用它。Go语言垃圾回收在并发标记阶段也是用广度优先搜索查找当前存活的内存的。</p><p>下面是一段利用广度优先搜索爬取网站的例子。其中，urls是一串URL列表，exactUrl抓取每一个网站中要继续爬取的URL，并放入到队列urls的末尾，用于后续的爬取。</p><pre><code class=\"language-plain\">func breadthFirst(urls []string) {\n\tfor len(urls) &gt; 0 {\n\t\titems := urls\n\t\turls = nil\n\t\tfor _, item := range items {\n\t\t\turls = append(urls, exactUrl(item)...)\n\t\t}\n\t}\n}\n</code></pre><h2>用广度优先搜索实战爬虫</h2><p>根据爬取目标的不同，可以灵活地选择广度优先和深度优先算法。但一般广度优先搜索算法会更加简单直观一些。下面我用广度优先搜索来实战爬虫，这一次我们爬取的是豆瓣小组中的数据。</p><p>首先，让我们在collect中新建一个request.go文件，对request做一个简单的封装。Request中包含了一个URL，表示要访问的网站。这里的 ParseFunc函数会解析从网站获取到的网站信息，并返回 Requesrts 数组用于进一步获取数据。而Items表示获取到的数据。</p><pre><code class=\"language-plain\">type Request struct {\n\tUrl       string\n\tParseFunc func([]byte) ParseResult\n}\n\ntype ParseResult struct {\n\tRequesrts []*Request\n\tItems     []interface{}\n}\n</code></pre><p>豆瓣小组是一个个的兴趣小组，小组内的组员可以发帖和评论。我们以<a href=\"https://www.douban.com/group/szsh/discussion\">“深圳租房”</a>这个兴趣小组为例，这个网站里有许多的租房帖子。</p><p>假设我们希望找到带阳台的租房信息的帖子，第一步我们首先要将这个页面中所有帖子所在的网址爬取出来。</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/69/e9c692ce6391e9e045af49e7b8aa4e69.png?wh=1468x1490\" alt=\"图片\"></p><p>不过我们没法一次性将所有的帖子查找出来，因为每一页只会为我们展示25个帖子，要看后面的内容需要点击下方具体的页数，进入到第2页、第3页。</p><p>不过这难不倒我们，稍作分析就能发现，“第1页”的网站是：<a href=\"https://www.douban.com/group/szsh/discussion?start=0\">https://www.douban.com/group/szsh/discussion?start=0</a>，“第2页”的网址是：<a href=\"https://www.douban.com/group/szsh/discussion?start=25\">https://www.douban.com/group/szsh/discussion?start=25</a>，豆瓣是通过HTTP GET参数中start的变化来标识不同的页面的。所以我们可以用循环的方式把初始网站添加到队列中。如下所示，我们准备抓取前100个帖子：</p><pre><code class=\"language-plain\">func main(){\n\tvar worklist []*collect.Request\n\t\tfor i := 25; i &lt;= 100; i += 25 {\n\t\t\tstr := fmt.Sprintf(\"&lt;https://www.douban.com/group/szsh/discussion?start=%d&gt;\", i)\n\t\t\tworklist = append(worklist, &amp;collect.Request{\n\t\t\t\tUrl:       str,\n\t\t\t\tParseFunc: ParseCityList,\n\t\t\t})\n\t\t}\n}\n</code></pre><p>下一步，我们要解析一下抓取到的网页文本。这里我新建一个文件夹“parse”来专门存储对应网站的规则。对于首页样式的页面，我们需要获取所有帖子的URL，这里我选择使用正则表达式的方式来实现。匹配到符合帖子格式的URL后，我们把它组装到一个新的Request中，用作下一步的爬取。</p><pre><code class=\"language-plain\">const cityListRe = `(&lt;https://www.douban.com/group/topic/[0-9a-z]+/&gt;)\"[^&gt;]*&gt;([^&lt;]+)&lt;/a&gt;`\n\nfunc ParseURL(contents []byte) collect.ParseResult {\n\tre := regexp.MustCompile(cityListRe)\n\n\tmatches := re.FindAllSubmatch(contents, -1)\n\tresult := collect.ParseResult{}\n\n\tfor _, m := range matches {\n\t\tu := string(m[1])\n\t\tresult.Requesrts = append(\n\t\t\tresult.Requesrts, &amp;collect.Request{\n\t\t\t\tUrl: u,\n\t\t\t\tParseFunc: func(c []byte) collect.ParseResult {\n\t\t\t\t\treturn GetContent(c, u)\n\t\t\t\t},\n\t\t\t})\n\t}\n\treturn result\n}\n</code></pre><p>新的Request需要有不同的解析规则，这里我们想要获取的是正文中带有“阳台”字样的帖子（注意不要匹配到侧边栏的文字）。</p><p>查看HTML文本的规则会发现，正本包含在 <code>&lt;div class=\"topic-content\"&gt;xxxx &lt;div&gt;</code> 当中，所以我们可以用正则表达式这样书写规则函数，意思是当发现正文中有对应的文字，就将当前帖子的URL写入到Items当中。</p><pre><code class=\"language-plain\">const ContentRe = `&lt;div class=\"topic-content\"&gt;[\\s\\S]*?阳台[\\s\\S]*?&lt;div`\n\nfunc GetContent(contents []byte, url string) collect.ParseResult {\n\tre := regexp.MustCompile(ContentRe)\n\n\tok := re.Match(contents)\n\tif !ok {\n\t\treturn collect.ParseResult{\n\t\t\tItems: []interface{}{},\n\t\t}\n\t}\n\n\tresult := collect.ParseResult{\n\t\tItems: []interface{}{url},\n\t}\n\n\treturn result\n}\n</code></pre><p>最后在main函数中，为了找到所有符合条件的帖子，我们使用了广度优先搜索算法。循环往复遍历worklist列表，完成爬取与解析的动作，找到所有符合条件的帖子。</p><pre><code class=\"language-plain\">var worklist []*collect.Request\n\tfor i := 0; i &lt;= 100; i += 25 {\n\t\tstr := fmt.Sprintf(\"&lt;https://www.douban.com/group/szsh/discussion?start=%d&gt;\", i)\n\t\tworklist = append(worklist, &amp;collect.Request{\n\t\t\tUrl:       str,\n\t\t\tParseFunc: doubangroup.ParseURL,\n\t\t})\n\t}\n\n\tvar f collect.Fetcher = collect.BrowserFetch{\n\t\tTimeout: 3000 * time.Millisecond,\n\t\tProxy:   p,\n\t}\n\n\tfor len(worklist) &gt; 0 {\n\t\titems := worklist\n\t\tworklist = nil\n\t\tfor _, item := range items {\n\t\t\tbody, err := f.Get(item.Url)\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error(\"read content failed\",\n\t\t\t\t\tzap.Error(err),\n\t\t\t\t)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tres := item.ParseFunc(body)\n\t\t\tfor _, item := range res.Items {\n\t\t\t\tlogger.Info(\"result\",\n\t\t\t\t\tzap.String(\"get url:\", item.(string)))\n\t\t\t}\n\t\t\tworklist = append(worklist, res.Requesrts...)\n\t\t}\n\t}\n</code></pre><h2>用Cookie突破反爬封锁</h2><p>在爬取豆瓣网站时，我们会利用 time.Sleep 休眠1秒钟尽量减缓服务器的压力。但是，如果爬取速度太快，我们还是有可能触发服务器的反爬机制，导致我们的IP被封。如果出现了这种情况应该怎么办呢？</p><p>这个问题完全可以用我们之前介绍的代理来解决，通过代理我们可以假装来自不同的地方。除此之外，我还想再介绍一种突破反爬封锁的机制：Cookie。 我们实操的时候会发现，豆瓣IP被封锁后，会提示我们IP异常，需要我们重新登录。所以我们可以在浏览器中登录一下，并获得网站的Cookie。</p><p>Cookie是由服务器建立的文本信息。用户在浏览网站时，网页浏览器会将Cookie存放在电脑中。Cookie可以让服务器在用户的浏览器上储存状态信息（如添加到购物车中的商品）或跟踪用户的浏览活动（如点击特定按钮、登录时间或浏览历史等）。</p><p>以谷歌浏览器为例，要获取当前页面的Cookie，我们可以在当前页面中打开浏览器的开发者工具，依次选择网络-&gt;文档。查找到当前页面对应的请求，就会发现一长串的Cookie。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/88/0a1ac1d22489bf8a82224689e9850488.png?wh=1920x639\" alt=\"图片\"></p><p>如果我们在HTTP请求头中设置了Cookie，服务器就会认为我们是已经登录过的用户，会解除对我们的封锁。</p><p>因为参数URL已经无法解决像Cookie这样特殊的请求了，所以我们要修改一下之前的 Fetcher接口。</p><pre><code class=\"language-plain\">type Fetcher interface {\n\tGet(url string) ([]byte, error)\n}\n</code></pre><p>修改参数为Request，同时在Request中添加Cookie。</p><pre><code class=\"language-plain\">type Fetcher interface {\n\tGet(url *Request) ([]byte, error)\n}\n\nfunc (b BrowserFetch) Get(request *Request) ([]byte, error) {\n\tif len(request.Cookie) &gt; 0 {\n\t\t\treq.Header.Set(\"Cookie\", request.Cookie)\n\t}\n}\n\n</code></pre><p>这样我们就能顺利爬取多个网站了，完整的代码可以查看<a href=\"https://github.com/dreamerjackson/crawler\">v0.1.3分支</a>。这里要注意一下，在学习的时候，如果我们要用相同的IP大量获取网站数据，最好加上长一些的休眠时间，防止把目标网站搞崩溃，也尽量避免被目标网站封禁。</p><h2>总结</h2><p>为了保证能够按照规则爬取完整的网站，我们需要用到一些爬取的策略。其中，深度与广度优先搜索算法就是两种经典的算法策略。</p><p>深度优先搜索就像是在“顺藤摸瓜”，它会首先查找“深”的节点。广度优先搜索则是逐层遍历树的节点，直到访问完所有节点为止。深度优先搜索需要采用递归或者模拟堆栈的形式，而广度优先搜索更简单，通过一个队列即可实现。这节课，我们就利用广度优先搜索爬取了一个豆瓣小组。由于爬取数据的过程中容易触发网站的反爬机制，我们还使用了休眠与Cookie来突破服务器的封锁。</p><p>使用算法爬取数据保证了爬取的完整性，它也将一个爬虫任务拆分为了多个可以并发执行的不同的爬取任务。不过，在我们这节课的案例中，爬取工作仍然是在单个协程中完成的。下节课，我们会更进一步，看看如何使用调度器并发调度这些任务。</p><h2>课后题</h2><p>学完这节课，请你思考下面两个问题。</p><ol>\n<li>递归是一种非常经典的思想，但是为什么在实践中我们还是会尽量避免使用递归呢？</li>\n<li>爬虫机器人有许多特征，并不是切换IP就一定能骗过目标服务器，举一个例子，相同的User-Agent 有时会被认为是同一个用户发出来的请求。如何解决这一问题?</li>\n</ol><p>欢迎你在留言区与我交流讨论，我们下节课见！</p>","neighbors":{"left":{"article_title":"26｜高并发爬虫：模型、控制与冲突检测","id":611509},"right":{"article_title":"28｜调度引擎：负载均衡与调度器实战","id":612877}},"comments":[{"had_liked":false,"id":364490,"user_name":"徐海浪","can_delete":false,"product_type":"c1","uid":1078528,"ip_address":"广东","ucode":"21801C420D0610","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/00/618b20da.jpg","comment_is_top":false,"comment_ctime":1671015576,"is_pvip":false,"replies":[{"id":134130,"content":"后面会看到用限流器来实现","user_name":"作者回复","user_name_real":"编辑","uid":1903914,"ctime":1676214106,"ip_address":"北京","comment_id":364490,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"有个疑问，多个协程之间怎么协调等待时间？","like_count":0,"discussions":[{"author":{"id":1903914,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0d/2a/dcb935cf.jpg","nickname":"时间为我们证明","note":"","ucode":"299438152D9F3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603450,"discussion_content":"后面会看到用限流器来实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676214106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368049,"user_name":"田小麦","can_delete":false,"product_type":"c1","uid":1648999,"ip_address":"北京","ucode":"4C10997F6173ED","user_header":"https://static001.geekbang.org/account/avatar/00/19/29/67/fc61a741.jpg","comment_is_top":false,"comment_ctime":1675847041,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"能把复杂问题简单化，也是学问。有种标题造火箭，内容提取干货很吃力","like_count":6},{"had_liked":false,"id":372983,"user_name":"Geek_8ed998","can_delete":false,"product_type":"c1","uid":1793879,"ip_address":"上海","ucode":"1C164836354665","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5f/57/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1681891833,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"又不标tag了，想到那写到那一段一段的","like_count":2,"discussions":[{"author":{"id":1172050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/52/56dbb738.jpg","nickname":"牙小木","note":"","ucode":"E5C12D37A62949","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625955,"discussion_content":"确实，吐槽的人都少了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692351314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389566,"user_name":"小白","can_delete":false,"product_type":"c1","uid":1215232,"ip_address":"北京","ucode":"22D45D7FDE6E8F","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/00/822434ab.jpg","comment_is_top":false,"comment_ctime":1712893269,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"tag v0.1.3","like_count":0},{"had_liked":false,"id":384044,"user_name":"佩奇","can_delete":false,"product_type":"c1","uid":1177085,"ip_address":"中国香港","ucode":"6EB769610381DB","user_header":"https://static001.geekbang.org/account/avatar/00/11/f5/fd/6487f026.jpg","comment_is_top":false,"comment_ctime":1700149905,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"解析正文内容中包含阳台的正则表达式，会把右侧边栏的内容也解析进去，可以调整为下面的方式\n```\n\nconst ContentRe = `&lt;div\\s+class=&quot;topic-content&quot;&gt;(?s:.)*?&lt;&#47;div&gt;`\n\nfunc GetContent(contents []byte, url string) collect.ParseResult {\n\tre := regexp.MustCompile(ContentRe)\n\tresultStr := re.FindString(string(contents))\n\n\tr2 := regexp.MustCompile(&quot;阳台&quot;)\n\n\tok := r2.MatchString(resultStr)\n\tif !ok {\n\t\treturn collect.ParseResult{\n\t\t\tItems: []interface{}{},\n\t\t}\n\t}\n\n\tresult := collect.ParseResult{\n\t\tItems: []interface{}{url},\n\t}\n\n\treturn result\n}\n\n```","like_count":0},{"had_liked":false,"id":364489,"user_name":"徐海浪","can_delete":false,"product_type":"c1","uid":1078528,"ip_address":"广东","ucode":"21801C420D0610","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/00/618b20da.jpg","comment_is_top":false,"comment_ctime":1671015427,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"即使切换了User-Agent更换了IP，反爬虫还是可以根据其他(比如令牌)知道是同一个用户访问，这时就得用账号池了吧","like_count":0},{"had_liked":false,"id":364295,"user_name":"抱紧我的小鲤鱼","can_delete":false,"product_type":"c1","uid":1014603,"ip_address":"江苏","ucode":"139780FB860FA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/4b/95812b15.jpg","comment_is_top":false,"comment_ctime":1670769753,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"1. 递归主要会带来的效率问题，函数调用带来的额外开销（函数的入栈出栈），栈容量的限制（次数太多可能会stack overflow）\n2. 使用UA池，随机选取一个？\n","like_count":0},{"had_liked":false,"id":364215,"user_name":"拾掇拾掇","can_delete":false,"product_type":"c1","uid":1051873,"ip_address":"浙江","ucode":"D775F374C2A1D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/e1/f663213e.jpg","comment_is_top":false,"comment_ctime":1670665092,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":2,"product_id":100124001,"comment_content":"1.递归会导致栈溢出，而且递归一旦没写好就是死循环了\n2.那就user_agent搞多一点，然后随机取","like_count":0}]}