{"id":255584,"title":"05 | 如何用向量和坐标系描述点和线段？","content":"<p>你好，我是月影。</p><p>为什么你做了很多可视化项目，解决了一个、两个、三个甚至多个不同类型的图表展现之后，还是不能系统地提升自己的能力，在下次面对新的项目时依然会有各种难以克服的困难？这是因为你陷入了细节里。</p><p>什么是细节？简单来说，细节就是各种纯粹的图形学问题。在可视化项目里，我们需要描述很多的图形，而描述图形的顶点、边、线、面、体和其他各种信息有很多不同的方法。并且，如果我们使用不同的绘图系统，每个绘图系统又可能有独特的方式或者特定的API，去解决某个或某类具体的问题。</p><p>正因为有了太多可以选择的工具，我们也就很难找到最恰当的那一个。而且<strong>如果我们手中只有解决具体问题的工具，没有统一的方法论，那我们也无法一劳永逸地解决问题的根本</strong>。</p><p>因此，我们要建立一套与各个图形系统无关联的、简单的基于向量和矩阵运算的数学体系，用它来描述所有的几何图形信息。这就是我在数学篇想要和你讨论的主要问题，也就是<strong>如何建立一套描述几何图形信息的数学体系，以及如何用这个体系来解决我们的可视化图形呈现的问题</strong>。</p><p>那这一节课，我们先学习用坐标系与向量来描述基本图形的方法，从如何定义和变换图形的直角坐标系，以及如何运用向量表示点和线段这两方面讲起。</p><!-- [[[read_end]]] --><h2>坐标系与坐标映射</h2><p>首先，我们来看看浏览器的四个图形系统通用的坐标系分别是什么样的。</p><p>HTML采用的是窗口坐标系，以参考对象（参考对象通常是最接近图形元素的position非static的元素）的元素盒子左上角为坐标原点，x轴向右，y轴向下，坐标值对应像素值。</p><p>SVG采用的是视区盒子（viewBox）坐标系。这个坐标系在默认情况下，是以svg根元素左上角为坐标原点，x轴向右，y轴向下，svg根元素右下角坐标为它的像素宽高值。如果我们设置了viewBox属性，那么svg根元素左上角为viewBox的前两个值，右下角为viewBox的后两个值。</p><p>Canvas采用的坐标系我们比较熟悉了，它默认以画布左上角为坐标原点，右下角坐标值为Canvas的画布宽高值。</p><p>WebGL的坐标系比较特殊，是一个三维坐标系。它默认以画布正中间为坐标原点，x轴朝右，y轴朝上，z轴朝外，x轴、y轴在画布中范围是-1到1。</p><p>尽管这四个坐标系在原点位置、坐标轴方向、坐标范围上有所区别，但都是<strong>直角坐标系</strong>，所以它们都满足直角坐标系的特性：不管原点和轴的方向怎么变，用同样的方法绘制几何图形，它们的形状和相对位置都不变。</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/89/5e3bc7cd089e2e28c527b57a1df5cb89.jpeg?wh=1920*1080\" alt=\"\"></p><p>为了方便处理图形，我们经常需要对坐标系进行转换。转换坐标系可以说是一个非常基础且重要的操作了。正因为这四个坐标系都是直角坐标系，所以它们可以很方便地相互转化。其中，HTML、SVG和Canvas都提供了transform的API能够帮助我们很方便地转换坐标系。而WebGL本身不提供tranform的API，但我们可以在shader里做矩阵运算来实现坐标转换，WebGL的问题我们在后续课程会有专门讨论，今天我们先来说说其他三种。那接下来我们就以Canvas为例，来看看用transform API怎样进行坐标转换。</p><h2>如何用Canvas实现坐标系转换？</h2><p>假设，我们要在宽512 * 高256的一个Canvas画布上实现如下的视觉效果。其中，山的高度是100，底边200，两座山的中心位置到中线的距离都是80，太阳的圆心高度是150。</p><p>当然，在不转换坐标系的情况下，我们也可以把图形绘制出来，但是要经过顶点换算，下面我们就来说一说这个过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/a8/09/a8ec91897b2ede72d5c48d4d6b2d5409.jpeg?wh=1920*870\" alt=\"\"></p><p>首先，因为Canvas坐标系默认的原点是左上角，底边的y坐标是256，而山的高度是100，所以山顶点的y坐标是256 - 100 = 156。而因为太阳的高度是150，所以太阳圆心的y坐标是256 - 150 = 106。</p><p>然后，因为x轴中点的坐标是512 / 2 = 256，所以两座山顶点的x坐标分别是256 - 80和256 + 80，也就是176和336。又因为山是等腰三角形，它的底边是200，所以两座山底边的x坐标计算出来，分别是 76、276、236、436（176 - 100 =76、176 + 100=276、336 - 100=236、 336 + 100=436）。</p><p><img src=\"https://static001.geekbang.org/resource/image/55/29/552676f6f0268d2091b838e268651929.jpeg?wh=1920*832\" alt=\"\"></p><p>计算出这些坐标之后，我们很容易就可以将这个图画出来了。不过，为了增加一些趣味性，我们用一个<a href=\"https://github.com/pshihn/rough\">Rough.js</a>的库，绘制一个手绘风格的图像（Rough.js库的API和Canvas差不多，绘制出来的图形比较有趣）。绘制的代码如下所示：</p><pre><code>const rc = rough.canvas(document.querySelector('canvas'));\nconst hillOpts = {roughness: 2.8, strokeWidth: 2, fill: 'blue'};\nrc.path('M76 256L176 156L276 256', hillOpts);\nrc.path('M236 256L336 156L436 256', hillOpts);\nrc.circle(256, 106, 105, {\n  stroke: 'red',\n  strokeWidth: 4,\n  fill: 'rgba(255, 255, 0, 0.4)',\n  fillStyle: 'solid',\n});\n</code></pre><p>最终，我们绘制出的图形效果如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/cb/cddabd7aeca8e5yy0c22c85879f5dccb.jpeg?wh=1920*1080\" alt=\"\"></p><p>到这里，我们通过简单的计算就绘制出了这一组图形。但你也能够想到，如果每次绘制都要花费时间在坐标换算上，这会非常不方便。所以，为了解决这个问题，我们可以采用坐标系变换来代替坐标换算。</p><p>这里，我们给Canvas的2D上下文设置一下transform变换。我们经常会用到两个变换：translate和scale。</p><p>首先，我们通过translate变换将Canvas画布的坐标原点，从左上角(0, 0)点移动至(256, 256)位置，即画布的底边上的中点位置。接着，以移动了原点后新的坐标为参照，通过scale(1, -1)将y轴向下的部分，即y&gt;0的部分沿x轴翻转180度，这样坐标系就变成以画布底边中点为原点，x轴向右，y轴向上的坐标系了。</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/de/8a1f3ed166942736206124aba16965de.jpeg?wh=1920*1080\" alt=\"\" title=\"坐标系\"></p><p>执行了这个坐标变换，也就是让坐标系原点在中间之后，我们就可以更方便、直观地计算出几个图形元素的坐标了。</p><p>两个山顶的坐标就是 (-80, 100) 和 (80, 100)，山脚的坐标就是 (-180, 0)、(20, 0)、(-20, 0)、(180, 0)，太阳的中心点的坐标就是(0, 150)。那么更改后的代码如下所示。</p><pre><code>const rc = rough.canvas(document.querySelector('canvas'));\nconst ctx = rc.ctx;\nctx.translate(256, 256);\nctx.scale(1, -1);\n\nconst hillOpts = {roughness: 2.8, strokeWidth: 2, fill: 'blue'};\n\nrc.path('M-180 0L-80 100L20 0', hillOpts);\nrc.path('M-20 0L80 100L180 0', hillOpts);\n\nrc.circle(0, 150, 105, {\n  stroke: 'red',\n  strokeWidth: 4,\n  fill: 'rgba(255,255, 0, 0.4)',\n  fillStyle: 'solid',\n});\n</code></pre><p>好了，现在我们就完成了坐标变换。但是因为这个例子要绘制的图形很少，所以还不太能体现使用坐标系变换的好处。不过，你可以想一下，在可视化的许多应用场景中，我们都要处理成百上千的图形。如果这个时候，我们在原始坐标下通过计算顶点来绘制图形，计算量会非常大，很麻烦。那采用坐标变换的方式就是一个很好的优化思路，<strong>它能够简化计算量，这不仅让代码更容易理解，也可以节省CPU运算的时间</strong>。</p><p>理解直角坐标系的坐标变换之后，我们再来说说直角坐标系里绘制图形的方法。<strong>那不管我们用什么绘图系统绘制图形，一般的几何图形都是由点、线段和面构成。其中，点和线段是基础的图元信息，因此，如何描述它们是绘图的关键</strong>。</p><h2>如何用向量来描述点和线段？</h2><p>那在直角坐标系下，我们是怎么表示<strong>点和线段的呢</strong>？我们一般是用向量来表示一个点或者一个线段。</p><p>前面的例子因为包含x、y两个坐标轴，所以它们构成了一个绘图的平面。因此，我们可以用二维向量来表示这个平面上的点和线段。二维向量其实就是一个包含了两个数值的数组，一个是x坐标值，一个是y坐标值。</p><p><img src=\"https://static001.geekbang.org/resource/image/0d/58/0de1596f2df5002c3a8b26723f0f0558.jpeg?wh=1920*1080\" alt=\"\"></p><p>假设，现在这个平面直角坐标系上有一个向量v。向量v有两个含义：一是可以表示该坐标系下位于(x, y)处的一个点；二是可以表示从原点(0,0)到坐标(x,y)的一根线段。</p><p>接下来，为了方便你理解，我们先来回顾一下关于向量的数学知识。</p><p><strong>首先，向量和标量一样可以进行数学运算。</strong>举个例子，现在有两个向量，v<sub>1</sub>和v<sub>2</sub>，如果让它们相加，其结果相当于将v<sub>1</sub>向量的终点（x<sub>1</sub>, y<sub>1</sub>），沿着v<sub>2</sub>向量的方向移动一段距离，这段距离等于v<sub>2</sub>向量的长度。这样，我们就可以在平面上得到一个新的点（x<sub>1</sub> + x<sub>2</sub>, y<sub>1</sub> + y<sub>2</sub>），一条新的线段[(0, 0), (x<sub>1</sub> + x<sub>2</sub>, y<sub>1</sub> + y<sub>2</sub>)]，以及一段折线：[(0, 0), (x<sub>1</sub>, y<sub>1</sub>) , (x<sub>1</sub> + x<sub>2</sub>, y<sub>1</sub> + y<sub>2</sub>)]。</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/29/8ebb3963e385ba9fda2dab46d7277e29.jpeg?wh=1920*1080\" alt=\"\"></p><p><strong>其次，一个向量包含有长度和方向信息</strong>。它的长度可以用向量的x、y的平方和的平方根来表示，如果用JavaScript来计算，就是：</p><pre><code>v.length = function(){return Math.hypot(this.x, this.y)};\n</code></pre><p>它的方向可以用与x轴的夹角来表示，即：</p><pre><code>v.dir = function() { return Math.atan2(this.y, this.x);}\n</code></pre><p>在上面的代码里，Math.atan2的取值范围是-π到π，负数表示在x轴下方，正数表示在x轴上方。</p><p>最后，根据长度和方向的定义，我们还能推导出一组关系式：</p><pre><code>v.x = v.length * Math.cos(v.dir);\nv.y = v.length * Math.sin(v.dir);\n\n</code></pre><p>这个推论意味着一个重要的事实：我们可以很简单地构造出一个绘图向量。也就是说，如果我们希望以点(x<sub>0</sub>, y<sub>0</sub>)为起点，沿着某个方向画一段长度为length的线段，我们只需要构造出如下的一个向量就可以了。</p><p><img src=\"https://static001.geekbang.org/resource/image/7c/a3/7cf68477844ee77a31163008d2bb39a3.jpeg?wh=1920*560\" alt=\"\"></p><p>这里的α是与x轴的夹角，v是一个单位向量，它的长度为1。然后我们把向量(x<sub>0</sub>, y<sub>0</sub>)与这个向量v<sub>1</sub>相加，得到的就是这条线段的终点。这么讲还是比较抽象，我们看一个例子。</p><h2>实战演练：用向量绘制一棵树</h2><p>我们用前面学到的向量知识来绘制一棵随机生成的树，想要生成的效果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/6y/f4/6yydf8017e95529yybb987d97e9yy9f4.jpeg?wh=1920*1080\" alt=\"\"></p><p>我们还是用Canvas2D来绘制。首先是坐标变换，原理前面讲过，我就不细说了。这里，我们要做的变换是将坐标原点从左上角移动到左下角，并且让y轴翻转为向上。</p><pre><code>ctx.translate(0, canvas.height);\nctx.scale(1, -1);\nctx.lineCap = 'round';\n</code></pre><p>然后，我们定义一个画树枝的函数 drawBranch。</p><pre><code>function drawBranch(context, v0, length, thickness, dir, bias) {\n  ...\n}\n</code></pre><p>这个函数有六个参数：</p><ul>\n<li>context是我们的Canvas2D上下文</li>\n<li>v<sub>0</sub>是起始向量</li>\n<li>length是当前树枝的长度</li>\n<li>thickness是当前树枝的粗细</li>\n<li>dir是当前树枝的方向，用与x轴的夹角表示，单位是弧度。</li>\n<li>bias是一个随机偏向因子，用来让树枝的朝向有一定的随机性</li>\n</ul><p>因为v<sub>0</sub>是树枝的起点坐标，那根据前面向量计算的原理，我们创建一个单位向量(1, 0)，它是一个朝向x轴，长度为1的向量。然后我们旋转dir弧度，再乘以树枝长度length。这样，我们就能计算出树枝的终点坐标了。代码如下：</p><pre><code> const v = new Vector2D(1, 0).rotate(dir).scale(length);\n const v1 = v0.copy().add(v);\n</code></pre><p>向量的旋转是向量的一种常见操作，对于二维空间来说，向量的旋转可以定义成如下方法（这里我们省略了数学推导过程，有兴趣的同学可以去看一下<a href=\"https://zhuanlan.zhihu.com/p/98007510\">数学原理</a>）。这个方法我们后面还会经常用到，你先记一下，后续我们讲到仿射变换的时候，会有更详细的解释。</p><pre><code>class Vector2D {\n  ...  \n  rotate(rad) {\n    const c = Math.cos(rad),\n      s = Math.sin(rad);\n    const [x, y] = this;\n\n    this.x = x * c + y * -s;\n    this.y = x * s + y * c;\n\n    return this;\n  }\n}\n</code></pre><p>我们可以从一个起始角度开始递归地旋转树枝，每次将树枝分叉成左右两个分枝：</p><pre><code>  if(thickness &gt; 2) {\n    const left = dir + 0.2;\n    drawBranch(context, v1, length * 0.9, thickness * 0.8, left, bias * 0.9);\n    const right = dir - 0.2;\n    drawBranch(context, v1, length * 0.9, thickness * 0.8, right, bias * 0.9);\n  }\n\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/1f/y1/1f95a7d1e6ecf30c7db0ef0afc0f7yy1.jpeg?wh=1920*1080\" alt=\"\"></p><p>这样，我们得到的就是一棵形状规律的树。</p><p>接着我们修改代码，加入随机因子，让迭代生成的新树枝有一个随机的偏转角度。</p><pre><code>  if(thickness &gt; 2) {\n    const left = Math.PI / 4 + 0.5 * (dir + 0.2) + bias * (Math.random() - 0.5);\n    drawBranch(context, v1, length * 0.9, thickness * 0.8, left, bias * 0.9);\n    const right = Math.PI / 4 + 0.5 * (dir - 0.2) + bias * (Math.random() - 0.5);\n    drawBranch(context, v1, length * 0.9, thickness * 0.8, right, bias * 0.9);\n  }\n</code></pre><p>这样，我们就可以得到一棵随机的树。</p><p><img src=\"https://static001.geekbang.org/resource/image/53/7f/5350becdbb756ce4dae1289b7beba37f.jpeg?wh=1920*1080\" alt=\"\"></p><p>最后，为了美观，我们再随机绘制一些花瓣上去，你也可以尝试绘制其他的图案到这棵树上。</p><pre><code>  if(thickness &lt; 5 &amp;&amp; Math.random() &lt; 0.3) {\n    context.save();\n    context.strokeStyle = '#c72c35';\n    const th = Math.random() * 6 + 3;\n    context.lineWidth = th;\n    context.beginPath();\n    context.moveTo(...v1);\n    context.lineTo(v1.x, v1.y - 2);\n    context.stroke();\n    context.restore();\n  }\n</code></pre><p>这样，我们就实现了绘制一棵随机树的方法。</p><p>它的完整代码在<a href=\"https://github.com/akira-cn/graphics/tree/master/vector_tree\">GitHub仓库</a>，你可以研究一下。这里面最关键的一步就是前面的向量操作，为了实现向量的rotate、scale、add等方法，我封装了一个简单的库Vector2d.js，你也可以在<a href=\"https://github.com/akira-cn/graphics/blob/master/common/lib/vector2d.js\">代码仓库</a>中找到它。</p><h2>向量运算的意义</h2><p>实际上，在我们的可视化项目里，直接使用向量的加法、旋转和乘法来构造线段绘制图形的情形并不多。这是因为，在一般情况下，数据在传给前端的时候就已经计算好了，我们只需要拿到数据点的信息，根据坐标变换进行映射，然后直接用映射后的点来绘制图形即可。</p><p>既然这样，为什么我们在这里又要强调向量操作的重要性呢？虽然我们很少直接使用向量构造线段来完成绘图，但是向量运算的意义并不仅仅只是用来算点的位置和构造线段，这只是最初级的用法。我们要记住，<strong>可视化呈现依赖于计算机图形学，而向量运算是整个计算机图形学的数学基础。</strong></p><p>而且，在向量运算中，除了加法表示移动点和绘制线段外，向量的点乘、叉乘运算也有特殊的意义。课后我会给你出一道有挑战性的思考题 ，让你能更深入地理解向量运算的现实意义，在下一节课里我会给你答案。</p><h2>要点总结</h2><p>这一节课， 我们以Canvas为例学习了坐标变换，以及用向量描述点和线段的原理和方法。</p><p>一般来说，采用平面直角坐标系绘图的时候，对坐标进行平移等线性变换，并不会改变坐标系中图形的基本形状和相对位置，因此我们可以利用坐标变换让我们的绘图变得更加容易。Canvas坐标变换经常会用到translate和scale这两个变换，它们的操作和原理都很简单，我们根据实际需求来设置就好了。</p><p>在平面直角坐标系中，我们可以定义向量来绘图。向量可以表示绘图空间中的一个点，或者连接原点的一条线段。两个向量相加，结果相当于将被加向量的终点沿着加数向量的方向移动一段距离，移动的距离等于加数向量的长度。利用向量的这个特性，我们就能以某个点为起点，朝任意方向绘制线段，从而绘制各种较复杂的几何图形了。</p><h2>小试牛刀</h2><ol>\n<li>我们已经知道如何用向量来定义一个线段，你知道如何判断两个线段的位置关系吗？假设有两个线段l<sub>1</sub>和l<sub>2</sub>，已知它们的起点和终点分别是[(x<sub>10</sub>, y<sub>10</sub>),(x<sub>11</sub>, y<sub>11</sub>)]、[(x<sub>20</sub>, y<sub>20</sub>),(x<sub>21</sub>, y<sub>21</sub>)]，你能判断它们的关系吗（小提示：两个线段之间的关系有<strong>平行、垂直</strong>或既不平行又不垂直）？</li>\n<li>已知线段[(x<sub>0</sub>, y<sub>0</sub>)、(x<sub>1</sub>, y<sub>1</sub>)]，以及一个点(x<sub>2</sub>, y<sub>2</sub>)，怎么求点到线段的距离？</li>\n<li>一个平面上放置了一个扫描器，方向延y轴方向（该坐标系y轴向上），扫描器的视角是60度。假设它可以扫描到无限远的地方，那对于平面上给定的任意一个点(x,y)，我们该如何判断这个点是否处于扫描范围内呢？</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/89/64/8961491152b0fe953826d59d687a0b64.jpeg?wh=1920*1080\" alt=\"\"></p><p>欢迎在留言区和我讨论，分享你的答案和思考，也欢迎你把这节课分享给你的朋友，我们下节课见！</p><hr><h2><span class=\"reference\">源码</span></h2><p><span class=\"reference\"> [1]<a href=\"https://github.com/akira-cn/graphics/tree/master/vector_tree\">绘制随机树的源代码</a></span><br>\n<span class=\"reference\">[2]<a href=\"https://github.com/akira-cn/graphics/tree/master/coordinates\">坐标变换的源代码</a></span></p><h2><span class=\"reference\">推荐阅读</span></h2><p><span class=\"reference\">[1] <a href=\"https://zhuanlan.zhihu.com/p/98007510\">二维旋转矩阵与向量旋转推荐文档</a></span><br>\n<span class=\"reference\">[2] 一个有趣的绘图库：<a href=\"https://github.com/pshihn/rough\">Rough.js</a></span><br>\n<span class=\"reference\">[3] <a href=\"https://github.com/akira-cn/graphics/blob/master/common/lib/vector2d.js\">Vector2d.js模块文档</a></span></p>","neighbors":{"left":{"article_title":"04 | GPU与渲染管线：如何用WebGL绘制最简单的几何图形？","id":254631},"right":{"article_title":"06 |  可视化中你必须要掌握的向量乘法知识","id":256827}},"comments":[{"had_liked":false,"id":231401,"user_name":"gltjk","can_delete":false,"product_type":"c1","uid":1341515,"ip_address":"","ucode":"A2ACFE7D8A32C5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7hqBj1WIXVJgRwxVEg7fREAwI04BKRM8ibzVA8DIOaLSLqIrjw8UYr9GDUFFZW7mhBLC4hSp5r9g/132","comment_is_top":false,"comment_ctime":1593668034,"is_pvip":false,"replies":[{"id":"85497","content":"赞","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1593739345,"ip_address":"","comment_id":231401,"utype":1}],"discussion_count":2,"race_medal":0,"score":"126147719618","product_id":100053801,"comment_content":"用向量的点乘、叉乘概念重新梳理小试牛刀的三题：<br><br>线段 A1B1 与线段 A2B2 的关系 {<br>  如果 |A1B1| 或 |A2B2| 为 0 ，说明线段退化成点，无法判断关系<br>  如果 A1B1·A2B2 为 0，说明夹角的余弦值为 0，二者垂直<br>  如果 |A1B1×A2B2| 为 0，说明夹角的正弦值为 0，二者方向一致，可能平行也可能重合 {<br>    如果 |A1B1×A1A2| 不为0，说明四点不共线，排除掉重合的情况，二者平行<br>  }<br>  其他情况即为既不平行也不垂直<br>}<br><br>点 P 到线段 AB 的距离 {<br>  如果 |AB| 为 0，说明线段退化成点，|AP| 就是距离<br>  如果 AP·AB：<br>    &lt;0，说明 P 到 AB 的投影在线段 BA 的延长线上，∠PAB 为钝角，|AP| 就是距离<br>    &gt;|AB|，说明 P 到 AB 的投影在线段 AB 的延长线上，∠PBA 为钝角，|BP| 就是距离<br>    其他情况，说明 P 到 AB 的投影在线段 AB 上，用 |AP×AB| 除以 |AB| 即可算出距离（外积模的几何意义 |absinθ| 就是平行四边形的面积，除以底得到高）<br>}<br><br>点 P 与扫描角度 α 的关系 {<br>  如果 α&gt;2π，360°全覆盖，肯定能扫描到<br>  如果 α&lt;0，当前仅当点 P 与原点重合（即 P 的模为 0）时才能扫描到<br>  把一四象限里的边上从原点出发的向量定为 A，二三象限里的定为 B（如果 α=0，虽然二者不在象限里，不过此时方向一致，无所谓了）<br>  如果 |AxP|=0 或 |PxB|=0，说明 P 与 A 或 B 方向一致，刚好在边缘上，能扫描到<br>  如果 α&gt;π，可以假设坐标系上下翻转，有一个视角为 2π-α 的扫描器在扫描 P 关于 x 轴的映射 P&#39;，如果 P&#39; 能被扫描到，说明 P 扫描不到，反之亦然<br>  其余情况，如果要扫描到，必须要让从 A 到 B 逆时针扫描时经过 P，即 AxP 和 PxB 的方向都要与 z 轴正方向一致（用右手螺旋定则可以判断）<br>}<br><br>代码如下（在之前的代码上修改的）：<br>https:&#47;&#47;codepen.io&#47;gltjk&#47;pen&#47;eYJyOeR","like_count":30,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500286,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593739345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1230313,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c5/e9/4013a191.jpg","nickname":"阿鑫","note":"","ucode":"97A0BE95FB7383","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290380,"discussion_content":"第二问应该是判断|AP|cosθ 的距离吧？\n|AP|cosθ < 0 表示 ∠PAB 为钝角，|AP| 就是距离\n|AP|cosθ > |AB| 表示 ∠PBA 为钝角，|BP| 就是距离","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594454170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231164,"user_name":"gltjk","can_delete":false,"product_type":"c1","uid":1341515,"ip_address":"","ucode":"A2ACFE7D8A32C5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7hqBj1WIXVJgRwxVEg7fREAwI04BKRM8ibzVA8DIOaLSLqIrjw8UYr9GDUFFZW7mhBLC4hSp5r9g/132","comment_is_top":false,"comment_ctime":1593597839,"is_pvip":false,"replies":[{"id":"85407","content":"用代数方法当然也能做，不过这样又要判断开方符号又要判断无穷大，可能还有其他特殊情况非常繁琐。既然我们这一节讲了向量，你试着用向量思路去解决，会发现十分简单。","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1593653443,"ip_address":"","comment_id":231164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23068434319","product_id":100053801,"comment_content":"今天的小试牛刀完全是中学数学啊……<br><br>1. 用Δy&#47;Δx计算斜率，平行是斜率相等，垂直是斜率乘积为-1。所以：<br>平行：Δy1&#47;Δx1=Δy2&#47;Δx2<br>垂直：(Δy1&#47;Δx1)(Δy2&#47;Δx2)=-1<br>为了避免出现分母为零（即平行于y轴，斜率无穷大）的情况，可以把除法换成乘法：<br>平行：Δx1Δy2-Δx2Δy1=0<br>垂直：Δx1Δx2+Δy1Δy2=0<br>不过要考虑一个边缘情况，如果两个线段有一个长度为零了（退化成点），就没法判断了。<br><br>2. 设线段为AB，其中A(x0,y0),B(x1,y1)，点P(x2,y2)<br>正常思路是直接套用点到直线距离公式 d=|Ax0+By0+C|&#47;Math.hypot(A,B)，其中A、B、C为直线方程Ax+By+C=0里的系数，(x0,y0)为点的坐标。<br>用两点式写出直线方程，(y-y0)&#47;(x-x0)=(y1-y0)&#47;(x1-x0)<br>换成Ax+By+C=0的形式并排除分母为0的情况：(y1-y0)x+(x0-x1)y-(y1-y0)x0-(x0-x1)y0=0<br>观察系数得A=y1-y0，B=x0-x1，c=-(y1-y0)x0-(x0-x1)y0=-Ax0-By0<br>把A、B、C及(x2,y2)代入即可。<br>不过这里有个坑，给的不是直线，而是线段，线段是不能无限延长的，所以过点到直线作垂线与直线的交点不一定在线段上。<br>如果遇到这种情况，即角A或角B是钝角，就只能取PA和PB的较小值。<br>判断是否为钝角，可以用邻边平方和减去对边平方，结果为负数说明是钝角（正数是锐角，零是直角——刚好就是勾股定理了）。<br>另外，还有一个边缘情况，就是线段的两个点重合，与第一题不同，这时候的距离还是可以算的（此时PA=PB）。<br><br>3. 模仿文中思路用反正切函数Math.atan2()取到范围是[-PI, PI]的角度值，然后与扫描范围比较即可。<br>这里我把扫描范围扩展为任意实数的角度，并允许扫描到原点（如果角度为负则只能扫描到原点）。<br>然后对扫描范围的一半θ进行分类讨论：<br>超过π，说明360°全方位覆盖，肯定扫描得到；<br>没到π&#47;2，扫描范围在[-π,0]之中，直接和反正切值比较即可；<br>其余情况，扫描范围起点在第四象限，终点在第三象限，被扫描的点如果在三四象限要大于起点或小于终点，如果在一二象限肯定能扫描到（也肯定大于起点）。<br><br>综上，因为数字比较多，这次代码用TS完成，同时顺便体验了一下Vue 3的Composition API：<br>https:&#47;&#47;codepen.io&#47;gltjk&#47;pen&#47;OJMOOJR","like_count":5,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500183,"discussion_content":"用代数方法当然也能做，不过这样又要判断开方符号又要判断无穷大，可能还有其他特殊情况非常繁琐。既然我们这一节讲了向量，你试着用向量思路去解决，会发现十分简单。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593653443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231086,"user_name":"Cailven","can_delete":false,"product_type":"c1","uid":1381478,"ip_address":"","ucode":"4F80DC0E86066A","user_header":"https://static001.geekbang.org/account/avatar/00/15/14/66/57b04294.jpg","comment_is_top":false,"comment_ctime":1593578391,"is_pvip":false,"replies":[{"id":"85412","content":"嗯嗯，后续课程中还会看到用分形思想绘制有趣图案","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1593654731,"ip_address":"","comment_id":231086,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18773447575","product_id":100053801,"comment_content":"那棵树让我想到了曾经用分形几何在webgl里玩生成艺术的经历。正所谓数学不好没法搞艺术，刚巧这句话就表现在图形学和视觉可视化所谓的创意编程这个范畴里。","like_count":4,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500148,"discussion_content":"嗯嗯，后续课程中还会看到用分形思想绘制有趣图案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593654731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261103,"user_name":"weineel","can_delete":false,"product_type":"c1","uid":1049741,"ip_address":"","ucode":"6DC6EF4F256A53","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","comment_is_top":false,"comment_ctime":1605196755,"is_pvip":true,"replies":[{"id":"94949","content":"乘上逆矩阵就可以转换回来","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1605492360,"ip_address":"","comment_id":261103,"utype":1}],"discussion_count":1,"race_medal":1,"score":"10195131347","product_id":100053801,"comment_content":"老师好，坐标系转换后怎么转换回来？","like_count":2,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509378,"discussion_content":"乘上逆矩阵就可以转换回来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605492360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231127,"user_name":"渡","can_delete":false,"product_type":"c1","uid":1397140,"ip_address":"","ucode":"55C09E9A495BAC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/94/d667294c.jpg","comment_is_top":false,"comment_ctime":1593589931,"is_pvip":false,"replies":[{"id":"85409","content":"很棒～第二题不必求交点或者说垂足。可以直接用向量叉积的模等于平行四边形面积这一性质，再除以底边长度，得到的就是平行四边形的高，即点到直线的距离。","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1593653754,"ip_address":"","comment_id":231127,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10183524523","product_id":100053801,"comment_content":"仿佛回到了中学的解析几何题，感谢老师讲解向量的两个含义，但我对向量有些自己的理解，正好有肋于解决老师今天的思考题，下面说说我的思路：<br><br>1.1：若对此题做一个等效替代的话，其实不必拘泥于线段，可以延伸到线段所在的直线，这两条直线是否平行或垂直与原来的两条线段的关系是一致的<br>1.2：直线的关系可以理解为方向上的关系，既然向量可以表示方向，那么此题就可以进一步用向量来替代原来的线段，例如用v1替代线段l1,值为（x11-x10,y11-y10)。<br>*1.2.1：若不理解的话，就当是把原来的两条直线平移至经过坐标原点吧，因为平移不影响直线平等或垂直的关系<br>1.2.2：为方便书写与查看，设一些别名吧：v1=(X1,Y1),其中X1=x11-x10,Y1=y11-y10；v2=(X2,Y2),其中X2=x21-x20,Y2=y21-y20<br>1.3：向量垂直的条件是点积为0，所以这里判断垂直的条件是X1*X2 + Y1*Y2 == 0<br>1.4：平行的条件我想说得简单点，退回到直线就是它们与x轴的夹角相等，也就是斜率相等，所以条件是X1*Y2 == X2*Y1<br><br>2.1：与第1题一样的替代，距离等于该点到线段所在直线的距离，那关键就是在直线上找一个点，这个点与指定点的连成的直线与原来的直线垂直，最后要求的距离就是这两个点的距离了<br>2.2：同样，用向量替代题中的线段就是:v1=(X1，Y1)，其中X1=x1-x0,Y1=y1-y0,然后凑一个与此向量垂直的向量v2出来，简单做法就是v2=(-Y1,X1), 代入点积公式必得0<br>2.2.1：当然v2也可以是（Y1,-X1),这里不妨用前一个，效果是一样的<br>*2.3：本题我对向量的理解是：从某点到另一点的增量，即二维的delta。借此就可以算出与题中线段垂直的直线上的另一个点,就是把前面算出的垂直向量加给点(x2,y2)，就得到了(x2-Y1,y2+X1)，即(x2-y1+y0,y2+x1-x0)<br>2.4：两点决定一直线，基于这两个点，我们就可以算出那条垂直直线的方程了，再加上题中线段的直线方程，那么这个关键点就是这两条直线的交点，问题转化为解二元一次方程组了。<br>2.5：最后距离就等于这个交点到（x2,y2)的距离<br><br>3.1：此题我的说法不太严谨，先这么简化：把扫描器的两条边看成两个向量v1=(X1,Y1)，假定是左边那条；v2=(X2,Y2)，假定是右边那条。从坐标原点到目标点看作向量v0(X0,Y0)。<br>3.2：那么目标点落在扫描器范围内的条件就是：v0在v1右边，同时也在v2的左边。（对于左边右边的说法我就先不给出严谨的说明了，不知道有没有专业术语）<br>*3.3：重合的向量可以弱化理解为平行的向量，基于第一题的结论，假如v0与v1重合，就会有X0*Y1 == X1*Y0，即X0*Y1-X1*Y0 == 0，<br>*3.3.1：那要是X0*Y1-X1*Y0的值不等于0呢？，那情况就是v0在v1的左边或右边了。<br>3.3.2：X0*Y1-X1*Y0这个式子是带方向性的，姑且定义为从v0旋转到v1,值有正负（反之X1*Y0-X0*Y1就是从v1旋转到v0）<br>3.4：那么把3.2的说法进一步数字化就是从v0旋转到v1与从v0旋转到v2互为相反数。（其实其中一个为0也行，表于目标点落在了边界上）<br>3.5：最后得出的公式化条件就是：(X0*Y1-X1*Y0) * (X0*Y2-X2*Y0) &lt;= 0","like_count":3,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500167,"discussion_content":"很棒～第二题不必求交点或者说垂足。可以直接用向量叉积的模等于平行四边形面积这一性质，再除以底边长度，得到的就是平行四边形的高，即点到直线的距离。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593653754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296638,"user_name":"阿东","can_delete":false,"product_type":"c1","uid":1500320,"ip_address":"","ucode":"E9393F62B4091D","user_header":"https://static001.geekbang.org/account/avatar/00/16/e4/a0/62a8b07e.jpg","comment_is_top":false,"comment_ctime":1623076862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5918044158","product_id":100053801,"comment_content":"作业<br>1.  用向量积计算夹角<br>2. 用向量积解方程<br>3. 用向量积计算夹角","like_count":2},{"had_liked":false,"id":251021,"user_name":"从此刻起开始","can_delete":false,"product_type":"c1","uid":1519667,"ip_address":"","ucode":"F7E9C1311025D2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/qIr1icpa5ibRk1E3qXn0EXCfeTR0OCbz0XFtfEpdvkPWDfAK88nbwRaJibZz8ibhJ93ShtpjmC1Qsia3iagghpiaFDzWQ/132","comment_is_top":false,"comment_ctime":1601332801,"is_pvip":false,"replies":[{"id":"94959","content":"运行不了具体是指什么？这是ES Modules模块，较新的chrome浏览器中可以通过type=module的script标签加载，或者用babel编译。","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1605492959,"ip_address":"","comment_id":251021,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5896300097","product_id":100053801,"comment_content":"这vector2d.js如何用？我在pycharm copy了老师上传的源码，但运行不了","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506366,"discussion_content":"运行不了具体是指什么？这是ES Modules模块，较新的chrome浏览器中可以通过type=module的script标签加载，或者用babel编译。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605492959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142009,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6c/f9/af80b4da.jpg","nickname":"谭鹏","note":"","ucode":"4A8120C4AA6F2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374160,"discussion_content":"Mac chrome 上打开画树的html 展示大白屏  啥原因啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621045970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240059,"user_name":"嘻嘻","can_delete":false,"product_type":"c1","uid":1373304,"ip_address":"","ucode":"BE59D46445F568","user_header":"https://static001.geekbang.org/account/avatar/00/14/f4/78/9953da19.jpg","comment_is_top":false,"comment_ctime":1596729559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891696855","product_id":100053801,"comment_content":"第二题让线段旋转到x轴或者y轴，同时另一个点同步旋转。最后点的x坐标或者y坐标就是距离������","like_count":1},{"had_liked":false,"id":234461,"user_name":"SMW🙏🏻","can_delete":false,"product_type":"c1","uid":1032071,"ip_address":"","ucode":"95245A9350A4B9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/87/591180d9.jpg","comment_is_top":false,"comment_ctime":1594695712,"is_pvip":false,"replies":[{"id":"87190","content":"rotate应该是旋转了rad角，不是旋转到。你实现的少了原来的角度。把正余弦用和角公式展开，就得到我的结果。","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1595293391,"ip_address":"","comment_id":234461,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5889663008","product_id":100053801,"comment_content":"这个方法的逻辑没有看懂，大佬能否解释一下<br> rotate(rad) {<br>    const c = Math.cos(rad),<br>      s = Math.sin(rad);<br>    const [x, y] = this;<br><br>    this.x = x * c + y * -s;<br>    this.y = x * s + y * c;<br><br>    return this;<br>  }<br>我是这么实现的<br>  rotate(rad) {<br>    const [x, y] = this<br>    const length = Math.hypot(x, y)<br>    const c = Math.cos(rad)<br>    const s = Math.sin(rad)<br>    this.x = length * c<br>    this.y = length * s<br>   <br>    return this<br>  }","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501398,"discussion_content":"rotate应该是旋转了rad角，不是旋转到。你实现的少了原来的角度。把正余弦用和角公式展开，就得到我的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595293391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2108781,"avatar":"https://static001.geekbang.org/account/avatar/00/20/2d/6d/08103212.jpg","nickname":"王成","note":"","ucode":"FDC39D4316988A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567539,"discussion_content":"这个rotate函数意思是：在原来角度的基础上，再旋转rad角度。\n\n比如：\n原来是 sin(oldRad) ，现在是sin(oldRad + rad);\n原来是 cos(oldRad)，现在是cos(oldRad + rad);\n\n根据三角函数和差运算公式：\n\n因为是单位向量，所以 cos(oldRad) = x; sin(oldRad) = y;\n那么 this.x = x * c - y * s; 就可以理解为 newX = cos(oldRad+rad) = cos(oldRad)*cos(rad) - sin(oldRad)*sin(rad) = x*cos(rad) - y*sin(rad)\n而 this.y = x * s + y * c; 就可以理解为 newY = sin(oldRad+rad) = sin(oldRad)*cos(rad) + cos(oldRad)*sin(rad) = y*cos(rad) + x*sin(rad)\n    ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650939794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234254,"user_name":"Geek_b6af14","can_delete":false,"product_type":"c1","uid":1230879,"ip_address":"","ucode":"6A0F25B688DD98","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/cOPCqJLyN1z8jOJxo3VkuxHnV6KyaarEdVbkPaAvibj5fImJm8o45iblztVicXJXlSlOHFUFoJOswaP0TETf17sqA/132","comment_is_top":false,"comment_ctime":1594630959,"is_pvip":false,"replies":[{"id":"86497","content":"可以等后续通过例子慢慢理解","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1594690208,"ip_address":"","comment_id":234254,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5889598255","product_id":100053801,"comment_content":"对坐标变换和图形平移的好处还是没太大感觉~~~","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501331,"discussion_content":"可以等后续通过例子慢慢理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594690208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1513300,"avatar":"https://static001.geekbang.org/account/avatar/00/17/17/54/d1e9265f.jpg","nickname":"LiSkysunCHN","note":"","ucode":"AB0DD880E99B65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291538,"discussion_content":"坐标系平移（感觉像个大工程其实只有两行行代码），一劳永逸~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594865150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358137,"user_name":"量子蔷薇","can_delete":false,"product_type":"c1","uid":1999274,"ip_address":"上海","ucode":"EFD71A65DF2262","user_header":"https://static001.geekbang.org/account/avatar/00/1e/81/aa/1f7a8e88.jpg","comment_is_top":false,"comment_ctime":1663930293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663930293","product_id":100053801,"comment_content":"课后题全部用向量做，重点是理解向量点乘和叉乘的几何意义<br>叉乘的结果取绝对值是两向量所夹平行四边形的面积，正负与叉乘的顺序有关，如果A×B为正，则B在A的左边，或者说A可以逆时针旋转到B（旋转角度小于180°），如果刚好为0则AB同向或反向，因为同向或反向时夹出的四边形面积为0<br>点积的结果取绝对值是一个向量在另一个向量上的投影的长度与另一个向量的长度的积，与点乘顺序无关，正负取决于两向量是否”同向“，我们认为两向量夹角小于90°时是同向，同向为正，如果刚好为0则AB垂直，因为投影的长度为0，所以最后的乘积也是0<br>第一题，将两个线段都移到原点，相当于转换为向量，通过点乘、叉乘的结果即可判断关系<br>第二题，将线段移到原点，点也做同样的平移（减去线段的起点），那么点到线段的距离就是两向量所夹平行四边形的其中一条高，用叉乘得到面积，除以线段的长度就得到了高<br>第三题，目标点分别与两条光线叉乘，根据叉乘结果判断","like_count":0},{"had_liked":false,"id":355250,"user_name":"婷","can_delete":false,"product_type":"c1","uid":1385068,"ip_address":"上海","ucode":"8AEB0531206061","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Lnt6rcGHmnic4lumjb19icwLJjic3jOHCVrUxRqOAoXcBYjotlVRQXoYek1KGyTzbY9AcnK59POAlt3YpGGrOST6Q/132","comment_is_top":false,"comment_ctime":1661224653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661224653","product_id":100053801,"comment_content":"老师好，随机因子的加入是有特定方式吗？为什么是这样写？const left = Math.PI &#47; 4 + 0.5 * (dir + 0.2) + bias * (Math.random() - 0.5);","like_count":0},{"had_liked":false,"id":334832,"user_name":"ff","can_delete":false,"product_type":"c1","uid":2685946,"ip_address":"","ucode":"981AF5E9439EDC","user_header":"","comment_is_top":false,"comment_ctime":1645149903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645149903","product_id":100053801,"comment_content":"这三道题倒是都可以通过线性变换完成，感觉比较少人说，我就讲讲我的想法：<br>1. 构造旋转矩阵将其中任何一个向量方向变换直一个基向量方向，将另一个向量做同等变换后检查与两个基向量的关系即可（归一化后判断点乘为1或为0）<br>2. 将向量应用旋转矩阵至基向量方向（设为x正方向），点使用同一个变换后其y坐标即为距离<br>3. 求变换矩阵将两个60度夹脚的向量变换至正交基向量，之后对待变换的点检查是否在第一象限（x，y均大于0）即可","like_count":0},{"had_liked":false,"id":323968,"user_name":"Geek_14f218","can_delete":false,"product_type":"c1","uid":2820969,"ip_address":"","ucode":"97999FA957C4F5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/6h0quvqS7e3WOJgNiczAtEJOicia4aRaTHtzCECdzvMlDWJiaqEqnQIS0ibria7cqWhTYvaapWdThnGPvAJrEibicicSqJg/132","comment_is_top":false,"comment_ctime":1638242502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638242502","product_id":100053801,"comment_content":"打开白屏，发现是跨域问题。在 vs code 下载Live Server插件即可完美解决：<br>1.在vscode的拓展搜索Live Server，安装<br>2.找到对应的html文件，右键点击选择“open with live server”<br>简单两步就可以点开了","like_count":0},{"had_liked":false,"id":292865,"user_name":"谭鹏","can_delete":false,"product_type":"c1","uid":1142009,"ip_address":"","ucode":"4A8120C4AA6F2F","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/f9/af80b4da.jpg","comment_is_top":false,"comment_ctime":1621043668,"is_pvip":false,"replies":[{"id":"106053","content":"收到，我们检查一下","user_name":"编辑回复","user_name_real":"王莹","uid":"1743279","ctime":1621075540,"ip_address":"","comment_id":292865,"utype":2}],"discussion_count":2,"race_medal":0,"score":"1621043668","product_id":100053801,"comment_content":"画树的html文件 于兴起来没有内容 一个大白屏","like_count":0,"discussions":[{"author":{"id":1743279,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/99/af/e4cc7374.jpg","nickname":"啊呜","note":"","ucode":"76E24AB808868D","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519991,"discussion_content":"收到，我们检查一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621075540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142009,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6c/f9/af80b4da.jpg","nickname":"谭鹏","note":"","ucode":"4A8120C4AA6F2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374239,"discussion_content":"用到vector2d的 都是白屏 siri 火狐 chrome都是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621075632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281224,"user_name":"高佬","can_delete":false,"product_type":"c1","uid":2436680,"ip_address":"","ucode":"36A7C12A0DCE12","user_header":"https://static001.geekbang.org/account/avatar/00/25/2e/48/2f5ffbec.jpg","comment_is_top":false,"comment_ctime":1614650156,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1614650156","product_id":100053801,"comment_content":"老师，我想请教一个问题，在转换了canvas的坐标系之后，如果要在canvas上绘制图片的话，图片是会倒过来的，请问这个问题有没有很好的解决方法，我目前是把图片先提前倒过来处理之后在绘制上去，但是自感觉这个不是很好的解决方案，求赐教更好的方法？","like_count":0,"discussions":[{"author":{"id":1907075,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3raFU5AA5eEtZSRTiacg0eceh05FFAwSSDwLy48A5TvPVzp3p1oaRnibjP5kIucLHeRb8ocSCcQq3vpe9Ahq0zJw/132","nickname":"Geek_jiang_gdufs","note":"","ucode":"4DF0082F284C64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357382,"discussion_content":"绘制图片前可以翻转坐标系, 绘制完后再还原","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615797434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278862,"user_name":"Geek_00734e","can_delete":false,"product_type":"c1","uid":1559528,"ip_address":"","ucode":"5F641387DA2291","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Fnol5T7X9z9icw8yP1Zx5enHdYqbmP4EbNymaP87USujdeDp22QYMEwfYqkT7mOkXYegBZmhRx9bDbUbKGTPYlg/132","comment_is_top":false,"comment_ctime":1613396854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613396854","product_id":100053801,"comment_content":"vectory2d.js  中 获取向量长度这么写是有问题的，得写在constructor  里面，同时normalize方法也得考虑0向量的情况<br>get length() {<br>    return Math.hypot(this.x, this.y);<br>  }","like_count":0},{"had_liked":false,"id":278746,"user_name":"Herve","can_delete":false,"product_type":"c1","uid":2064214,"ip_address":"","ucode":"25941E69C75D16","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7f/56/1ab5931f.jpg","comment_is_top":false,"comment_ctime":1613287134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613287134","product_id":100053801,"comment_content":"第三个问题：将（x, y）坐标归一化后、与（0， 1 ）做点乘，因为是两个单位向量的点乘，结果就是两个向量的余弦值，然后判断大小","like_count":0},{"had_liked":false,"id":277783,"user_name":"番薯","can_delete":false,"product_type":"c1","uid":2435667,"ip_address":"","ucode":"F0A83719D29595","user_header":"https://static001.geekbang.org/account/avatar/00/25/2a/53/5b9afe0a.jpg","comment_is_top":false,"comment_ctime":1612582863,"is_pvip":false,"replies":[{"id":"101083","content":"可，不过有更简单的办法","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1612875067,"ip_address":"","comment_id":277783,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1612582863","product_id":100053801,"comment_content":"1.构建向量：<br>a=(x11-x10,y11-y10)<br>b=(x21-x20,y21-y20)<br>点积a•b=0余弦值为0则垂直<br>点积(a•b)²=(|a||b|)² 余弦值为±1则平行<br><br>2. 三点确定两条向量<br>a=(x1-x0,y1-y0)<br>c=(x2-x0,y2-y0)，勾股定理|a|²+|b|²=|c|² 可求得垂直边的长度<br><br>3.通过点(x,y)的正切值 可推出与y轴之间的角度","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515170,"discussion_content":"可，不过有更简单的办法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612875067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277767,"user_name":"番薯","can_delete":false,"product_type":"c1","uid":2435667,"ip_address":"","ucode":"F0A83719D29595","user_header":"https://static001.geekbang.org/account/avatar/00/25/2a/53/5b9afe0a.jpg","comment_is_top":false,"comment_ctime":1612578300,"is_pvip":false,"replies":[{"id":"101084","content":"可以复习一下数学知识","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1612875084,"ip_address":"","comment_id":277767,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1612578300","product_id":100053801,"comment_content":"向量旋转那个数学原理真的看晕了 后悔三角函数没学扎实...","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515161,"discussion_content":"可以复习一下数学知识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612875084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249543,"user_name":"从此刻起开始","can_delete":false,"product_type":"c1","uid":1519667,"ip_address":"","ucode":"F7E9C1311025D2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/qIr1icpa5ibRk1E3qXn0EXCfeTR0OCbz0XFtfEpdvkPWDfAK88nbwRaJibZz8ibhJ93ShtpjmC1Qsia3iagghpiaFDzWQ/132","comment_is_top":false,"comment_ctime":1600688284,"is_pvip":false,"replies":[{"id":"94963","content":"pycharm不是python编辑器吗？这个是JS代码哦。。。","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1605493141,"ip_address":"","comment_id":249543,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600688284","product_id":100053801,"comment_content":"老师，没看明白绘制随机树的源代码中的import {Vector2D} from &#39;..&#47;common&#47;lib&#47;vector2d.js&#39;;是如何用的，尽管也下载了vector2d.js 文件放入pycharm中，但无法运行,这句import {Vector2D} from &#39;..&#47;common&#47;lib&#47;vector2d.js&#39;; 如何改?","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505950,"discussion_content":"pycharm不是python编辑器吗？这个是JS代码哦。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605493141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244152,"user_name":"景儿","can_delete":false,"product_type":"c1","uid":2045710,"ip_address":"","ucode":"34A05CFDFCDE97","user_header":"https://static001.geekbang.org/account/avatar/00/1f/37/0e/d0172a0e.jpg","comment_is_top":false,"comment_ctime":1598412601,"is_pvip":false,"replies":[{"id":"95001","content":"坐标转换的开销不大，一般情况下不是性能瓶颈","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1605515651,"ip_address":"","comment_id":244152,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598412601","product_id":100053801,"comment_content":"在计算量相同的情况下，坐标系转换（transform、scale）的开销 对性能影响是否可以忽略不计呢？","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504503,"discussion_content":"坐标转换的开销不大，一般情况下不是性能瓶颈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605515651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242845,"user_name":"Geek_cd63d9","can_delete":false,"product_type":"c1","uid":2015085,"ip_address":"","ucode":"1EF4B98DF1E171","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL1H2TOJnNTblhmzJ2p88sTjvb86PuXP7A8HpCNKrfobuOc6Cxgy1UogZMIPTmD3VDGXZfTXIaWNw/132","comment_is_top":false,"comment_ctime":1597852600,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597852600","product_id":100053801,"comment_content":"尴尬，基本的计算都记不清了。<br>1.[(x10, y10),(x11, y11)]、[(x20, y20),(x21, y21)]<br>计算出方向向量，（x1，y1），（x2，y2）<br>平行：则x1 * x2 = y1 * x2<br>垂直：x1 * x2 + y1 * y2 = 0<br>2.线段两个点的叉乘即为所组成平行四边形的面积，同时也等于底边乘距离。<br>叉乘：（a1，a2）×（b1，b2）= a1 *b2 - a2* b1<br>3.判断角度或斜率是否在范围内<br>","like_count":0},{"had_liked":false,"id":235183,"user_name":"sheeeeep","can_delete":false,"product_type":"c1","uid":1340246,"ip_address":"","ucode":"218AA77BAA73C8","user_header":"https://static001.geekbang.org/account/avatar/00/14/73/56/9cfb1e43.jpg","comment_is_top":false,"comment_ctime":1594916103,"is_pvip":false,"replies":[{"id":"87177","content":"第三题你的思路也挺好的，这题本来就不只一种方法","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1595292918,"ip_address":"","comment_id":235183,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594916103","product_id":100053801,"comment_content":"前两问和大家思路基本一致，利用叉积<br>Q1:用起点和终点构造出两个向量，求向量的叉积来判断是否垂直，平行，交叉乃至方向是否一致<br>Q2: 用起点和终点构造向量，起点和给定的点构造向量，求两个向量的叉积、线段的长度来获取投影的长度，勾股定理求垂直线段长度<br>第三问大家似乎都是用的角度计算和比对，不确定是否可以用线性变换的思路来处理，把扫描的两条线作为基向量构造一个新的坐标系，只有一个朦胧的思路请老师指点","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501628,"discussion_content":"第三题你的思路也挺好的，这题本来就不只一种方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595292918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234517,"user_name":"SMW🙏🏻","can_delete":false,"product_type":"c1","uid":1032071,"ip_address":"","ucode":"95245A9350A4B9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/87/591180d9.jpg","comment_is_top":false,"comment_ctime":1594712402,"is_pvip":false,"replies":[{"id":"87186","content":"如果ab都是单位向量就用不到ab的模了。","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1595293188,"ip_address":"","comment_id":234517,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594712402","product_id":100053801,"comment_content":"向量a，向量b，θ是夹角<br>计算公式：a*b = |a||b|cosθ<br>疑问：向量的夹角和向量的模没有任何关系，为什么计算夹角余弦时，要用到向量的模","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501413,"discussion_content":"如果ab都是单位向量就用不到ab的模了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595293188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233600,"user_name":"Presbyter🎱","can_delete":false,"product_type":"c1","uid":1244819,"ip_address":"","ucode":"E52F076FE898DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/93/31869247.jpg","comment_is_top":false,"comment_ctime":1594364496,"is_pvip":false,"replies":[{"id":"86301","content":"执行drawImage的话是会颠倒的，因为坐标系变了，这种有图片或者有文字的2D绘图场景的确是不能翻转坐标的。如果是webgl的话，是可以在texture创建或者在应用纹理坐标的时候处理","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1594452829,"ip_address":"","comment_id":233600,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594364496","product_id":100053801,"comment_content":"老师，问个问题，我使用scale(1，-1)转换坐标的时候，放了一张图片在上面结果，上下颠倒了，请问有什么办法让他转换回来?","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501104,"discussion_content":"执行drawImage的话是会颠倒的，因为坐标系变了，这种有图片或者有文字的2D绘图场景的确是不能翻转坐标的。如果是webgl的话，是可以在texture创建或者在应用纹理坐标的时候处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594452829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231460,"user_name":"量子蔷薇","can_delete":false,"product_type":"c1","uid":1999274,"ip_address":"","ucode":"EFD71A65DF2262","user_header":"https://static001.geekbang.org/account/avatar/00/1e/81/aa/1f7a8e88.jpg","comment_is_top":false,"comment_ctime":1593680498,"is_pvip":false,"replies":[{"id":"85495","content":"嗯，要用len不能用length，因为不能覆盖数组的length","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1593739107,"ip_address":"","comment_id":231460,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1593680498","product_id":100053801,"comment_content":"反馈bug，Vector2D实例的length始终返回的是2，貌似因为它继承自Array，返回了数组长度。但是我不明白自己定义的length为什么不会覆盖数组的length","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500308,"discussion_content":"嗯，要用len不能用length，因为不能覆盖数组的length","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593739107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1999274,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/81/aa/1f7a8e88.jpg","nickname":"量子蔷薇","note":"","ucode":"EFD71A65DF2262","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289593,"discussion_content":"在codepen画了那棵树，添加了生长动画 https://codepen.io/quantum-rose/pen/rNxpxaE","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594140191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231275,"user_name":"浩明啦","can_delete":false,"product_type":"c1","uid":1377422,"ip_address":"","ucode":"120ED8FC45B992","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/8e/e75ecc5e.jpg","comment_is_top":false,"comment_ctime":1593620556,"is_pvip":true,"replies":[{"id":"85403","content":"我后面用加餐来讲吧","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1593653168,"ip_address":"","comment_id":231275,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1593620556","product_id":100053801,"comment_content":"老师, 要不要弄节课来专门讲讲这几节的作业，想看看老师的实现方式","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500231,"discussion_content":"我后面用加餐来讲吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593653168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2667591,"avatar":"https://static001.geekbang.org/account/avatar/00/28/b4/47/8cdd9ee6.jpg","nickname":"城南花已开","note":"","ucode":"07BD0F0D51A512","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":541072,"discussion_content":"老师什么时候加餐啊，观望","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640249239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":500231,"ip_address":""},"score":541072,"extra":""}]}]},{"had_liked":false,"id":231253,"user_name":"筑梦师刘渊","can_delete":false,"product_type":"c1","uid":1026867,"ip_address":"","ucode":"35C309A266AC02","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/33/75b1f724.jpg","comment_is_top":false,"comment_ctime":1593615009,"is_pvip":false,"replies":[{"id":"85404","content":"棒～","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1593653207,"ip_address":"","comment_id":231253,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593615009","product_id":100053801,"comment_content":"作业1<br>用向量点乘(内积)。内积结果等于0则说明垂直，为正负1则说明平行，否则既不平行也不垂直<br>function(x10, y10,x11, y11,x20, y20,x21,y21){<br>  const l1_x = x11 - x10;<br>  const l1_y = y11 - y10;<br>  const l2_x = x21 - x20;<br>  const l2_y = y21 - y20;<br><br>  const l1Dotl2 = l1_x * l2_x + l1_y * l2_y;<br><br>  if(l1Dotl2 === 0){<br>     return &quot;垂直&quot;<br>  }<br>  <br>  if(l1Dotl2*l1Dotl2 === 1){<br>    return &quot;平行&quot; <br>  }<br>  <br>  return &quot;既不平行又不垂直&quot;<br><br>}<br><br>作业2<br><br>根据点P的投影在不在线段AB内，分别由是那种情况，分别计算<br>&#47;**<br> * @des 计算给定一点到指定线段的最短距离<br> * @param {number} x  给定点P的x坐标<br> * @param {number} y  给定点P的y坐标<br> * @param {number} x1 给定线段的的起点的x坐标<br> * @param {number} y1 给定线段的的起点的y坐标<br> * @param {number} x2 给定线段的的终点的x坐标<br> * @param {number} y2 给定线段的的终点的y坐标<br> * @return {number} 点p到线段的最短距离<br> *&#47;<br>function distancePtoS(x, y, x1, y1, x2, y2) {<br>    const AP_x = x - x1;<br>    const AP_y = y - y1;<br>    const AB_x = x2 - x1;<br>    const AB_y = y2 - y1;<br>    const PB_x = x - x2;<br>    const PB_y = y - y2;<br><br>    const r =<br>        (AP_x * AB_x + AP_y * AB_y) &#47; (AB_x * AB_x + AB_y * AB_y);<br>    if (r &lt;= 0) {<br>        const PA = Math.sqrt(AP_x * AP_x + AP_y * AP_y);<br>        return PA;<br>    }<br><br>    if (r &gt;= 1) {<br>        const PB = Math.sqrt(PB_x * PB_x + PB_y * PB_y);<br>        return PB;<br>    }<br><br>    const cx = x1 + r * AB_x;<br>    const cy = y1 + r * AB_y;<br>    const PC_x = x - cx;<br>    const PC_y = y - cy;<br><br>    const PC = Math.sqrt(PC_x * PC_x + PC_y * PC_y);<br>    return PC;<br>}","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500218,"discussion_content":"棒～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593653207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231151,"user_name":"刘彪","can_delete":false,"product_type":"c1","uid":1381320,"ip_address":"","ucode":"F99AB6EB881FB2","user_header":"https://static001.geekbang.org/account/avatar/00/15/13/c8/c8493a33.jpg","comment_is_top":false,"comment_ctime":1593594102,"is_pvip":false,"replies":[{"id":"85408","content":"嗯嗯，矩阵很重要，不过我们这门课作为图形学基础也不会深入讲太复杂的内容","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1593653541,"ip_address":"","comment_id":231151,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593594102","product_id":100053801,"comment_content":"向量的基本运算还是知道的，但是后面的矩阵怕有问题，大学的高数没学好，需要不补课了。webgl矩阵是基础","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500178,"discussion_content":"嗯嗯，矩阵很重要，不过我们这门课作为图形学基础也不会深入讲太复杂的内容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593653541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}