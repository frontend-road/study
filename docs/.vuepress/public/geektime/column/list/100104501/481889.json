{"id":481889,"title":"04 | 运行原理：eBPF 是一个新的虚拟机吗？","content":"<p>你好，我是倪朋飞。</p><p>上一讲，我带你一起搭建了 eBPF 的开发环境，并从最简单的 Hello World 开始，带你借助 BCC 库从零开发了一个跟踪 <a href=\"https://man7.org/linux/man-pages/man2/open.2.html\">openat()</a>&nbsp;系统调用的 eBPF 程序。</p><p>不过，虽然第一个 eBPF 程序已经成功运行起来了，你很可能还在想：这个 eBPF 程序到底是如何编译成内核可识别的格式的？又是如何在内核中运行起来的？还有，既然允许普通用户去修改内核的行为，它又是如何确保内核安全的呢？</p><p>今天，我就带你一起深入看看 eBPF 虚拟机的原理，以及&nbsp;eBPF 程序是如何执行的。</p><h2>eBPF 虚拟机是如何工作的？</h2><p>eBPF 是一个运行在内核中的虚拟机，很多人在初次接触它时，会把它跟系统虚拟化（比如kvm）中的虚拟机弄混。其实，虽然都被称为“虚拟机”，系统虚拟化和 eBPF 虚拟机还是有着本质不同的。</p><p>系统虚拟化基于 x86 或 arm64 等通用指令集，这些指令集足以完成完整计算机的所有功能。而为了确保在内核中安全地执行，eBPF 只提供了非常有限的指令集。这些指令集可用于完成一部分内核的功能，但却远不足以模拟完整的计算机。为了更高效地与内核进行交互，eBPF 指令还有意采用了 C 调用约定，其提供的辅助函数可以在 C 语言中直接调用，极大地方便了 eBPF 程序的开发。</p><!-- [[[read_end]]] --><p>如下图（图片来自 <a href=\"https://www.usenix.org/conference/lisa21/presentation/gregg-bpf\">BPF Internals</a>）所示，eBPF 在内核中的运行时主要由&nbsp;5&nbsp;个模块组成：</p><p><img src=\"https://static001.geekbang.org/resource/image/45/d2/453f8d99cea1b35da8f6c57e552yy3d2.png?wh=915x503\" alt=\"图片\" title=\"eBPF 运行时\"></p><ul>\n<li>第一个模块是&nbsp;<strong>eBPF 辅助函数</strong>。它提供了一系列用于 eBPF 程序与内核其他模块进行交互的函数。这些函数并不是任意一个 eBPF 程序都可以调用的，具体可用的函数集由 BPF 程序类型决定。关于 BPF 程序类型，我会在 06 讲 中进行讲解。</li>\n<li>第二个模块是&nbsp;<strong>eBPF 验证器</strong>。它用于确保 eBPF 程序的安全。验证器会将待执行的指令创建为一个有向无环图（DAG），确保程序中不包含不可达指令；接着再模拟指令的执行过程，确保不会执行无效指令。</li>\n<li>第三个模块是由&nbsp;<strong>11 个 64 位寄存器、一个程序计数器和一个 512 字节的栈组成的存储模块</strong>。这个模块用于控制 eBPF 程序的执行。其中，R0 寄存器用于存储函数调用和 eBPF 程序的返回值，这意味着函数调用最多只能有一个返回值；R1-R5 寄存器用于函数调用的参数，因此函数调用的参数最多不能超过 5 个；而 R10 则是一个只读寄存器，用于从栈中读取数据。</li>\n<li>第四个模块是<strong>即时编译器</strong>，它将 eBPF 字节码编译成本地机器指令，以便更高效地在内核中执行。</li>\n<li>第五个模块是&nbsp;<strong>BPF 映射（map）</strong>，它用于提供大块的存储。这些存储可被用户空间程序用来进行访问，进而控制 eBPF 程序的运行状态。</li>\n</ul><p>关于 BPF 辅助函数和 BPF 映射的具体内容，我在后面的课程中还会为你详细介绍。接下来，我们先来看看 BPF 指令的具体格式，以及它是如何加载到内核中，又是何时运行的。</p><h2>BPF 指令是什么样的？</h2><p>只看图中的这些模块，你可能觉得它们并不是太直观。所以接下来，我们还是用上一讲的 Hello World 作为例子，一起看下 BPF 指令到底是什么样子的。</p><p>首先，回顾一下上一讲的  eBPF 程序&nbsp;Hello World&nbsp;的源代码。它的逻辑其实很简单，先调用&nbsp;  <code>bpf_trace_printk</code>  输出一个 “Hello, World!” 字符串，然后就返回成功了：</p><pre><code class=\"language-c++\">int hello_world(void *ctx)\n{\n&nbsp; bpf_trace_printk(\"Hello, World!\");\n&nbsp; return 0;\n}\n</code></pre><p>然后，我们通过 BCC 的 Python 库，加载并运行了这个 eBPF 程序：</p><pre><code class=\"language-python\">#!/usr/bin/env python3\n# This is a Hello World example of BPF.\nfrom bcc import BPF\n\n# load BPF program\nb = BPF(src_file=\"hello.c\")\nb.attach_kprobe(event=\"do_sys_openat2\", fn_name=\"hello_world\")\nb.trace_print()\n</code></pre><p>在终端中运行下面的命令，就可以启动这个 eBPF 程序（注意， BCC 帮你完成了编译和加载的过程）：</p><pre><code class=\"language-python\">sudo python3 hello.py\n</code></pre><p><strong>接下来，我为你介绍一个新的工具 bpftool，<strong><strong>用它可以</strong></strong>查看 eBPF 程序的运行状态。</strong></p><p>首先，打开一个新的终端，执行下面的命令，查询系统中正在运行的 eBPF 程序：</p><pre><code class=\"language-bash\"># sudo bpftool prog list\n89: kprobe  name hello_world  tag 38dd440716c4900f  gpl\n      loaded_at 2021-11-27T13:20:45+0000  uid 0\n      xlated 104B  jited 70B  memlock 4096B\n      btf_id 131\n      pids python3(152027)\n</code></pre><p>输出中，89 是这个 eBPF 程序的编号，kprobe 是程序的类型，而 hello_world 是程序的名字。</p><p>有了 eBPF 程序编号之后，执行下面的命令就可以导出这个 eBPF 程序的指令（注意把 89 替换成你查询到的编号）：</p><pre><code class=\"language-bash\">sudo bpftool prog dump xlated id 89\n</code></pre><p>你会看到如下所示的输出：</p><pre><code class=\"language-bash\">int hello_world(void * ctx):\n; int hello_world(void *ctx)\n&nbsp; &nbsp;0: (b7) r1 = 33&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* ! */\n; ({ char _fmt[] = \"Hello, World!\"; bpf_trace_printk_(_fmt, sizeof(_fmt)); });\n&nbsp; &nbsp;1: (6b) *(u16 *)(r10 -4) = r1\n&nbsp; &nbsp;2: (b7) r1 = 1684828783&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /*&nbsp;dlro */\n&nbsp; &nbsp;3: (63) *(u32 *)(r10 -8) = r1\n&nbsp; &nbsp;4: (18) r1 = 0x57202c6f6c6c6548&nbsp; /*&nbsp;W ,olleH */\n&nbsp; &nbsp;6: (7b) *(u64 *)(r10 -16) = r1\n&nbsp; &nbsp;7: (bf) r1 = r10\n;\n&nbsp; &nbsp;8: (07) r1 += -16\n; ({ char _fmt[] = \"Hello, World!\"; bpf_trace_printk_(_fmt, sizeof(_fmt)); });\n&nbsp; &nbsp;9: (b7) r2 = 14\n&nbsp; 10: (85) call bpf_trace_printk#-61616\n; return 0;\n&nbsp; 11: (b7) r0 = 0\n&nbsp; 12: (95) exit\n</code></pre><p>其中，分号开头的部分，正是我们前面写的 C 代码，而其他行则是具体的 BPF 指令。具体每一行的 BPF 指令又分为三部分：</p><ul>\n<li>第一部分，冒号前面的数字 0-12 ，代表 BPF 指令行数；</li>\n<li>第二部分，括号中的16进制数值，表示 BPF 指令码。它的具体含义你可以参考 <a href=\"https://github.com/iovisor/bpf-docs/blob/master/eBPF.md\">IOVisor BPF 文档</a>，比如第 0 行的 0xb7 表示为 64 位寄存器赋值。</li>\n<li>第三部分，括号后面的部分，就是 BPF 指令的伪代码。</li>\n</ul><p>结合前面讲述的各个寄存器的作用，不难理解这些 BPF 指令的含义：</p><ul>\n<li>第0-8行，借助 R10 寄存器从栈中把字符串 “Hello, World!” 读出来，并放入 R1 寄存器中；</li>\n<li>第9行，向 R2 寄存器写入字符串的长度 14（即代码注释里面的  <code>sizeof(_fmt)</code> ）；</li>\n<li>第10行，调用 BPF 辅助函数  <code>bpf_trace_printk</code>  输出字符串；</li>\n<li>第11行，向 R0 寄存器写入0，表示程序的返回值是0；</li>\n<li>最后一行，程序执行成功退出。</li>\n</ul><p>总结起来，<strong>这些指令先通过 R1 和 R2 寄存器设置了</strong> <code>bpf_trace_printk</code> <strong>的参数，然后调用</strong> <code>bpf_trace_printk</code> <strong>函数输出字符串，最后再通过 R0 寄存器返回成功。</strong></p><p>实际上，你也可以通过类似的 <a href=\"https://man7.org/linux/man-pages/man2/bpf.2.html#EXAMPLES\">BPF 指令</a>来开发 eBPF 程序（具体指令的定义，请参考 <a href=\"https://elixir.bootlin.com/linux/v5.4/source/include/uapi/linux/bpf_common.h\">include/uapi/linux/bpf_common.h</a> 以及 <a href=\"https://elixir.bootlin.com/linux/v5.4/source/include/uapi/linux/bpf.h\">include/uapi/linux/bpf.h</a>），不过通常并不推荐你这么做。跟一开始的 C 程序相比，你会发现 BPF 指令的可读性和可维护性明显要差得多。所以，我建议你还是使用 C 语言来开发 eBPF 程序，而只把&nbsp;BPF 指令作为排查 eBPF 程序疑难杂症时的参考。</p><p>这里，我来简单讲讲&nbsp;BPF 指令加载后是如何运行的。当这些 BPF 指令加载到内核后， BPF 即时编译器会将其编译成本地机器指令，最后才会执行编译后的机器指令：</p><pre><code class=\"language-bash\"># bpftool prog dump jited id 89\nint hello_world(void * ctx):\nbpf_prog_38dd440716c4900f_hello_world:\n; int hello_world(void *ctx)\n&nbsp; &nbsp;0:\tnopl&nbsp; &nbsp;0x0(%rax,%rax,1)\n&nbsp; &nbsp;5:\txchg&nbsp; &nbsp;%ax,%ax\n&nbsp; &nbsp;7:\tpush&nbsp; &nbsp;%rbp\n&nbsp; &nbsp;8:\tmov&nbsp; &nbsp; %rsp,%rbp\n&nbsp; &nbsp;b:\tsub&nbsp; &nbsp; $0x10,%rsp\n&nbsp; 12:\tmov&nbsp; &nbsp; $0x21,%edi\n; ({ char _fmt[] = \"Hello, World!\"; bpf_trace_printk_(_fmt, sizeof(_fmt)); });\n&nbsp; 17:\tmov&nbsp; &nbsp; %di,-0x4(%rbp)\n&nbsp; 1b:\tmov&nbsp; &nbsp; $0x646c726f,%edi\n&nbsp; 20:\tmov&nbsp; &nbsp; %edi,-0x8(%rbp)\n&nbsp; 23:\tmovabs $0x57202c6f6c6c6548,%rdi\n&nbsp; 2d:\tmov&nbsp; &nbsp; %rdi,-0x10(%rbp)\n&nbsp; 31:\tmov&nbsp; &nbsp; %rbp,%rdi\n;\n&nbsp; 34:\tadd&nbsp; &nbsp; $0xfffffffffffffff0,%rdi\n; ({ char _fmt[] = \"Hello, World!\"; bpf_trace_printk_(_fmt, sizeof(_fmt)); });\n&nbsp; 38:\tmov&nbsp; &nbsp; $0xe,%esi\n&nbsp; 3d:\tcall&nbsp; &nbsp;0xffffffffd8c7e834\n; return 0;\n&nbsp; 42:\txor&nbsp; &nbsp; %eax,%eax\n&nbsp; 44:\tleave\n&nbsp; 45:\tret\n</code></pre><p>这些机器指令的含义跟前面的 BPF 指令是类似的，但具体的指令和寄存器都换成了 x86 的格式。你不需要掌握这些机器指令的具体含义，只要知道查询的具体方法就足够了。这是因为，就像你曾接触过的其他高级语言一样，在实际的 eBPF 使用过程中，并不需要直接使用机器指令，而是 eBPF 虚拟机帮你自动完成了转换。</p><h2>eBPF 程序是什么时候执行的？</h2><p>到这里，我想你已经理解了 BPF 指令的具体格式，以及它与  C 源代码之间的对应关系。不过，这个 eBPF 程序到底是什么时候执行的呢？接下来，我们再一起看看 BPF 指令的加载和执行过程。</p><p>在上一讲中我提到，BCC 负责了 eBPF 程序的编译和加载过程。因而，要了解 BPF 指令的加载过程，就可以从 BCC 执行 eBPF 程序的过程入手。</p><p>那么，怎么才能查看到 BCC 的执行过程呢？我想，你一定想到了，那就是跟踪它的系统调用过程。</p><p>首先，我们打开一个终端，执行下面的命令：</p><pre><code class=\"language-bash\"># -ebpf表示只跟踪bpf系统调用\nsudo strace -v -f -ebpf ./hello.py\n</code></pre><p>稍等一会，你会看到如下的输出：</p><pre><code class=\"language-bash\">bpf(BPF_PROG_LOAD,\n    {\n        prog_type=BPF_PROG_TYPE_KPROBE,\n        insn_cnt=13,\n        insns=[\n            {code=BPF_ALU64|BPF_K|BPF_MOV, dst_reg=BPF_REG_1, src_reg=BPF_REG_0, off=0, imm=0x21},\n            {code=BPF_STX|BPF_H|BPF_MEM, dst_reg=BPF_REG_10, src_reg=BPF_REG_1, off=-4, imm=0},\n            {code=BPF_ALU64|BPF_K|BPF_MOV, dst_reg=BPF_REG_1, src_reg=BPF_REG_0, off=0, imm=0x646c726f},\n            {code=BPF_STX|BPF_W|BPF_MEM, dst_reg=BPF_REG_10, src_reg=BPF_REG_1, off=-8, imm=0},\n            {code=BPF_LD|BPF_DW|BPF_IMM, dst_reg=BPF_REG_1, src_reg=BPF_REG_0, off=0, imm=0x6c6c6548},\n            {code=BPF_LD|BPF_W|BPF_IMM, dst_reg=BPF_REG_0, src_reg=BPF_REG_0, off=0, imm=0x57202c6f},\n            {code=BPF_STX|BPF_DW|BPF_MEM, dst_reg=BPF_REG_10, src_reg=BPF_REG_1, off=-16, imm=0},\n            {code=BPF_ALU64|BPF_X|BPF_MOV, dst_reg=BPF_REG_1, src_reg=BPF_REG_10, off=0, imm=0},\n            {code=BPF_ALU64|BPF_K|BPF_ADD, dst_reg=BPF_REG_1, src_reg=BPF_REG_0, off=0, imm=0xfffffff0},\n            {code=BPF_ALU64|BPF_K|BPF_MOV, dst_reg=BPF_REG_2, src_reg=BPF_REG_0, off=0, imm=0xe},\n            {code=BPF_JMP|BPF_K|BPF_CALL, dst_reg=BPF_REG_0, src_reg=BPF_REG_0, off=0, imm=0x6},\n            {code=BPF_ALU64|BPF_K|BPF_MOV, dst_reg=BPF_REG_0, src_reg=BPF_REG_0, off=0, imm=0},\n            {code=BPF_JMP|BPF_K|BPF_EXIT, dst_reg=BPF_REG_0, src_reg=BPF_REG_0, off=0, imm=0}\n        ],\n        prog_name=\"hello_world\",\n        ...\n    },\n    128) = 4\n</code></pre><p>这些参数看起来很复杂，但实际上，如果你查询  <code>bpf</code> 系统调用的格式（执行  <code>man bpf</code> 命令），就可以发现，它实际上只需要三个参数：</p><pre><code class=\"language-bash\">int bpf(int cmd, union bpf_attr *attr, unsigned int size);\n</code></pre><p>对应前面的 strace 输出结果，这三个参数的具体含义如下。</p><ul>\n<li>第一个参数是  <code>BPF_PROG_LOAD</code> ， 表示加载 BPF 程序。</li>\n<li>第二个参数是  <code>bpf_attr</code>  类型的结构体，表示 BPF 程序的属性。其中，有几个需要你留意的参数，比如：\n<ul>\n<li><code>prog_type</code>  表示 BPF 程序的类型，这儿是  <code>BPF_PROG_TYPE_KPROBE</code> ，跟我们Python 代码中的  <code>attach_kprobe</code>  一致；</li>\n<li><code>insn_cnt</code>  (instructions count) 表示指令条数；</li>\n<li><code>insns</code>  (instructions) 包含了具体的每一条指令，这儿的 13 条指令跟我们前面  <code>bpftool prog dump</code>  的结果是一致的（具体的指令格式，你可以参考内核中 <a href=\"https://elixir.bootlin.com/linux/v5.4/source/include/uapi/linux/bpf.h#L65\">bpf_insn</a> 的定义）；</li>\n<li><code>prog_name</code>  则表示 BPF 程序的名字，即  <code>hello_world</code> 。</li>\n</ul>\n</li>\n<li>第三个参数 128 表示属性的大小。</li>\n</ul><p>到这里，我们已经了解了 bpf 系统调用的基本格式。对于  <code>bpf</code>  系统调用在内核中的实现原理，你并不需要详细了解。我们只要知道它的具体功能，就可以掌握 eBPF 的核心原理了。当然，如果你对它的实现方法有兴趣的话，可以参考内核源码 kernel/bpf/syscall.c 中 <a href=\"https://elixir.bootlin.com/linux/v5.4/source/kernel/bpf/syscall.c#L2837\">SYSCALL_DEFINE3</a> 的实现。</p><p>BPF 程序加载到内核后，并不会立刻执行，那么它什么时候才会执行呢？这里，回想一下我在 <a href=\"https://time.geekbang.org/column/article/479384\">01 讲</a> 中提到的 eBPF 的基本原理：</p><blockquote>\n<p>eBPF 程序并不像常规的线程那样，启动后就一直运行在那里，它需要事件触发后才会执行。这些事件包括系统调用、内核跟踪点、内核函数和用户态函数的调用退出、网络事件，等等。</p>\n</blockquote><p>对于我们的 Hello World 来说，由于调用了  <code>attach_kprobe</code>  函数，很明显，这是一个内核跟踪事件：</p><pre><code class=\"language-bash\">b.attach_kprobe(event=\"do_sys_openat2\", fn_name=\"hello_world\")\n</code></pre><p>所以，除了把 eBPF 程序加载到内核之外，还需要把加载后的程序跟具体的内核函数调用事件进行绑定。在 eBPF 的实现中，诸如内核跟踪（kprobe）、用户跟踪（uprobe）等的事件绑定，都是通过  <code>perf_event_open()</code>  来完成的。</p><p>为什么这么说呢？我们再用  <code>strace</code>  来确认一下。把前面  <code>strace</code>  命令中的  <code>-ebpf</code>  参数去掉，重新执行：</p><pre><code class=\"language-bash\">sudo strace -v -f ./hello.py\n</code></pre><p>忽略无关的输出后，你会发现如下的系统调用：</p><pre><code class=\"language-c++\">...\n/* 1) 加载BPF程序 */\nbpf(BPF_PROG_LOAD,...) = 4\n...\n\n/* 2）查询事件类型 */\nopenat(AT_FDCWD, \"/sys/bus/event_source/devices/kprobe/type\", O_RDONLY) = 5\nread(5, \"6\\n\", 4096)                    = 2\nclose(5)                                = 0\n...\n\n/* 3）创建性能监控事件 */\nperf_event_open(\n    {\n        type=0x6 /* PERF_TYPE_??? */,\n        size=PERF_ATTR_SIZE_VER7,\n        ...\n        wakeup_events=1,\n        config1=0x7f275d195c50,\n        ...\n    },\n    -1,\n    0,\n    -1,\n    PERF_FLAG_FD_CLOEXEC) = 5\n\n/* 4）绑定BPF到kprobe事件 */\nioctl(5, PERF_EVENT_IOC_SET_BPF, 4)     = 0\n...\n</code></pre><p>从输出中，你可以看出 BPF 与性能事件的绑定过程分为以下几步：</p><ul>\n<li>首先，借助 bpf 系统调用，加载 BPF 程序，并记住返回的文件描述符；</li>\n<li>然后，查询 kprobe 类型的事件编号。BCC 实际上是通过  <code>/sys/bus/event_source/devices/kprobe/type</code> 来查询的；</li>\n<li>接着，调用  <code>perf_event_open</code>  创建性能监控事件。比如，事件类型（type 是上一步查询到的 6）、事件的参数（ <code>config1 包含了内核函数 do_sys_openat2</code> ）等；</li>\n<li>最后，再通过  <code>ioctl</code>  的  <code>PERF_EVENT_IOC_SET_BPF</code>  命令，将 BPF 程序绑定到性能监控事件。</li>\n</ul><p>对于绑定性能监控（perf event）的内核实现原理，你也不需要详细了解，只需要知道它的具体功能，就足够我们掌握 eBPF 了。如果你对它的实现方法有兴趣的话，可以参考内核源码 <a href=\"https://elixir.bootlin.com/linux/v5.4/source/kernel/events/core.c#L9039\">perf_event_set_bpf_prog</a> 的实现；而最终性能监控调用 BPF 程序的实现，则可以参考内核源码 <a href=\"https://elixir.bootlin.com/linux/v5.4/source/kernel/trace/trace_kprobe.c#L1351\">kprobe_perf_func</a> 的实现。</p><h2>小结</h2><p>今天，我带你一起梳理了 eBPF 在内核中的实现原理，并以上一讲的 Hello World 程序为例，借助 bpftool、strace 等工具，带你观察了 BPF 指令的具体格式。</p><p>然后，我们从 BCC 执行 eBPF 程序的过程入手，一起看了BPF 指令的加载和执行过程。用高级语言开发的 eBPF 程序，需要首先编译为 BPF 字节码（即 BPF 指令），然后借助  <code>bpf</code>  系统调用加载到内核中，最后再通过性能监控等接口，与具体的内核事件进行绑定。这样，内核的性能监控模块才会在内核事件发生时，自动执行我们开发的 eBPF 程序。</p><h2>思考题</h2><p>最后，我想邀请你来聊一聊这两个问题。</p><ol>\n<li>你通常是如何快速理解一门新技术的运行原理的？</li>\n<li>在今天的内容中，我使用 strace 跟踪 BCC 程序，进而找到了相关的系统调用。那么，有没有可能直接使用 BCC 来跟踪  <code>bpf</code> 系统调用呢？如果你的答案是肯定的，可以试着把它开发出来，并在评论区分享你的实践经验。</li>\n</ol><p>欢迎在留言区和我讨论，也欢迎把这节课分享给你的同事、朋友。我们一起在实战中演练，在交流中进步。</p>","neighbors":{"left":{"article_title":"03 | 初窥门径：开发并运行你的第一个 eBPF 程序","id":481090},"right":{"article_title":"05 | 编程接口：eBPF 程序是怎么跟内核进行交互的？","id":482459}},"comments":[{"had_liked":false,"id":332031,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1007254,"ip_address":"","ucode":"E28F2602BA25DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","comment_is_top":false,"comment_ctime":1642990792,"is_pvip":false,"replies":[{"id":"121329","content":"谢谢分享实践经验👍，BCC内置的很多宏的确非常方便。","user_name":"作者回复","user_name_real":"编辑","uid":"1001282","ctime":1643031358,"ip_address":"","comment_id":332031,"utype":1}],"discussion_count":2,"race_medal":0,"score":"74657434824","product_id":100104501,"comment_content":"追踪 bpf 系统调用，借助 BCC 宏定义 TRACEPOINT_PROBE(category, event) 比较方便，例如：<br><br>-------------- example.c ----------------<br><br>TRACEPOINT_PROBE(syscalls, sys_enter_bpf)<br>{<br>    bpf_trace_printk(&quot;%d\\\\n&quot;, args-&gt;cmd);<br>    return 0;<br>}<br><br>-------------- example.py -----------------<br><br>#!&#47;usr&#47;bin&#47;env python3<br><br>from bcc import BPF<br><br># load BPF program<br>b = BPF(src_file=&quot;example.c&quot;)<br>b.trace_print()<br><br>","like_count":17,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548108,"discussion_content":"谢谢分享实践经验👍，BCC内置的很多宏的确非常方便。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643031358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2613059,"avatar":"https://static001.geekbang.org/account/avatar/00/27/df/43/0773c064.jpg","nickname":"不会MATLAB","note":"","ucode":"725795EDB38F5A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548250,"discussion_content":"这就是大佬吗，我看的有点晕，得反复多看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643100353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333525,"user_name":"18646333118","can_delete":false,"product_type":"c1","uid":1202411,"ip_address":"","ucode":"35576AC4E5ADDD","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/eb/cf3608bd.jpg","comment_is_top":false,"comment_ctime":1644393670,"is_pvip":false,"replies":[{"id":"122030","content":"👍 谢谢分享源码编译bpftool的详细步骤！","user_name":"作者回复","user_name_real":"编辑","uid":"1001282","ctime":1644730950,"ip_address":"","comment_id":333525,"utype":1}],"discussion_count":4,"race_medal":0,"score":"31709164742","product_id":100104501,"comment_content":"解决方法:<br>{<br>    &quot;features&quot;: {<br>        &quot;libbfd&quot;: false<br>    }<br>}<br><br>uname -r<br>5.13.0-19-generic<br><br>apt-cache search linux-source<br>apt install linux-source-5.13.0<br><br>cd  &#47;usr&#47;src&#47;<br>tar -jxvf linux-source-5.13.0.tar.bz2<br><br>apt install libelf-dev<br>cd linux-source-5.13.0&#47;tools<br>make -C  bpf&#47;bpftool<br>.&#47;bpf&#47;bpftool&#47;bpftool version -p<br>{<br>    &quot;version&quot;: &quot;5.13.19&quot;,<br>    &quot;features&quot;: {<br>        &quot;libbfd&quot;: true,<br>        &quot;skeletons&quot;: true<br>    }<br>}<br>","like_count":7,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550780,"discussion_content":"👍 谢谢分享源码编译bpftool的详细步骤！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644730950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2930048,"avatar":"","nickname":"woJA1wCgAAbjKldokPvO1h9ZEJTUP8ug","note":"","ucode":"F329F4882868C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556449,"discussion_content":"遇到了一样的问题，uname -a为5.13.0-35-generic，层主方法走不通\n原因是apt没能查询并下载到linux-source-5.13.0源码\n最终通过下面的方式解决：\n第一步：git clone -b v5.13 --depth 1 https://github.com/torvalds/linux\n第二步：cd linux/tools/bpf/bpftool\n第三步：make &amp;&amp; make install\n期间报错一些需要的库，最方便的是直接从apt install 名字-dev，其中libbfd已经整合到binutils-dev\n最后你可能会发现bpftool仍然使用jited时报错，因为默认使用的/usr/sbin下可执行程序，自行替换当前目录下新编译好的bpftool就行\n其余版本同理，可以直接访问上面的github仓库，查看tags找到你对应的版本替换第一步-b后参数\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1647362351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1628811,"avatar":"https://static001.geekbang.org/account/avatar/00/18/da/8b/34f44e9f.jpg","nickname":"Rodger","note":"","ucode":"F9F5A7B34E2756","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551411,"discussion_content":"make时提示libbfd未启用：\nAuto-detecting system features:\n...                        libbfd: [ OFF ]\n方法：安装binutils-dev后重新make\nsudo apt-get install binutils-dev","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645011360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2898964,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/3c/14/86507b52.jpg","nickname":"茹茹","note":"","ucode":"08C233CE22C63D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554310,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646311054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332546,"user_name":"不了峰","can_delete":false,"product_type":"c1","uid":1013424,"ip_address":"","ucode":"E23B96D6A3D4EC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/b0/14fec62f.jpg","comment_is_top":false,"comment_ctime":1643334949,"is_pvip":false,"replies":[{"id":"121565","content":"谢谢分享。我的理解是，要深入一门技术的每个细节需要看很多书籍，但一开始要有个侧重点，不要发散的太广了。","user_name":"作者回复","user_name_real":"编辑","uid":"1001282","ctime":1643461116,"ip_address":"","comment_id":332546,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18823204133","product_id":100104501,"comment_content":"你通常是如何快速理解一门新技术的运行原理的？<br>--- 看一下官方文档，了解体系架构，多看几遍。买书看感觉也是一个快速入门的方法。<br>但是对于没有编程经验，对于 字节码、cpu寄存器、jit ，编译器的理解还是很抽象，学到这里还是有点晕。感觉还是要把这课程从头再看一遍。","like_count":4,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548962,"discussion_content":"谢谢分享。我的理解是，要深入一门技术的每个细节需要看很多书籍，但一开始要有个侧重点，不要发散的太广了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643461116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343430,"user_name":"Geek_b84e15","can_delete":false,"product_type":"c1","uid":2983630,"ip_address":"","ucode":"F8AC53A9D8F0D5","user_header":"","comment_is_top":false,"comment_ctime":1650850812,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10240785404","product_id":100104501,"comment_content":"倪老师您好，我看hello_world的参数列表是(void * ctx)，而有的例子里参数是这样的：int hello_world(struct pt_regs *ctx, int dfd, const char __user * filename, struct open_how *how)，请问怎么确定参数的个数和参数的类型呢？","like_count":2,"discussions":[{"author":{"id":2233803,"avatar":"https://static001.geekbang.org/account/avatar/00/22/15/cb/257f73c5.jpg","nickname":"yamowner","note":"","ucode":"D3BBBDD53F5F70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571235,"discussion_content":"struct pt_regs* ctx是bcc程序用的上下文参数，对该参数的理解我也不深入；后面的参数是通过挂载点函数来确定的，可以通过命令: sudo bpftrace -lv &#39;*do_sys_openat2*&#39;来查看；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652151097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336086,"user_name":"火火寻","can_delete":false,"product_type":"c1","uid":1120541,"ip_address":"","ucode":"B6DC003A5D89AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/1d/d2b6e006.jpg","comment_is_top":false,"comment_ctime":1645888343,"is_pvip":false,"replies":[{"id":"122898","content":"👍 ","user_name":"作者回复","user_name_real":"编辑","uid":"1001282","ctime":1646046366,"ip_address":"","comment_id":336086,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10235822935","product_id":100104501,"comment_content":"1、你通常是如何快速理解一门新技术的运行原理的？<br>Get Essentials， ADEPT五步法：类比，画图，例子，文字说明，定义。<br><br>剩下的就是根据需要侧重地深入到细节。","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553740,"discussion_content":"👍 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646046367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332897,"user_name":"七里","can_delete":false,"product_type":"c1","uid":1042604,"ip_address":"","ucode":"614A35DE72C739","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/ac/7324d5ca.jpg","comment_is_top":false,"comment_ctime":1643793746,"is_pvip":false,"replies":[{"id":"121735","content":"可以运行下面的命令来查询bpftool支持的特性：<br><br>sudo bpftool version -p<br><br>如果出现下面的输出说明发行版自带的bpftool默认不支持libbfd，需要下载内核源码并安装binutils-dev之后重新编译bpftool：<br>{<br>    &quot;features&quot;: {<br>        &quot;libbfd&quot;: false<br>    }<br>}","user_name":"作者回复","user_name_real":"编辑","uid":"1001282","ctime":1644117788,"ip_address":"","comment_id":332897,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5938761042","product_id":100104501,"comment_content":"请问，不能执行&#39;bpftool prog dump jited id 78&#39;是怎么回事？bpf相关的包都按照上一讲的提示按照上了<br><br>root@maqi-ubt:~# bpftool prog dump xlated id 78<br>int hello_world(void * ctx):<br>; int hello_world(void *ctx)<br>   0: (b7) r1 = 33<br>; ({ char _fmt[] = &quot;Hello, World!&quot;; bpf_trace_printk_(_fmt, sizeof(_fmt)); });<br>   1: (6b) *(u16 *)(r10 -4) = r1<br>   2: (b7) r1 = 1684828783<br>   3: (63) *(u32 *)(r10 -8) = r1<br>   4: (18) r1 = 0x57202c6f6c6c6548<br>   6: (7b) *(u64 *)(r10 -16) = r1<br>   7: (bf) r1 = r10<br>;<br>   8: (07) r1 += -16<br>; ({ char _fmt[] = &quot;Hello, World!&quot;; bpf_trace_printk_(_fmt, sizeof(_fmt)); });<br>   9: (b7) r2 = 14<br>  10: (85) call bpf_trace_printk#-63952<br>; return 0;<br>  11: (b7) r0 = 0<br>  12: (95) exit<br>root@maqi-ubt:~#<br>root@maqi-ubt:~# bpftool prog dump jited id 78<br>Error: No libbfd support","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549597,"discussion_content":"可以运行下面的命令来查询bpftool支持的特性：\n\nsudo bpftool version -p\n\n如果出现下面的输出说明发行版自带的bpftool默认不支持libbfd，需要下载内核源码并安装binutils-dev之后重新编译bpftool：\n{\n    &#34;features&#34;: {\n        &#34;libbfd&#34;: false\n    }\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644117788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361392,"user_name":"Geek_5ada4a","can_delete":false,"product_type":"c1","uid":2228781,"ip_address":"广东","ucode":"C1532F4A4AAC9A","user_header":"","comment_is_top":false,"comment_ctime":1667461796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667461796","product_id":100104501,"comment_content":"strace .&#47;hello.py<br>execve(&quot;.&#47;hello.py&quot;, [&quot;.&#47;hello.py&quot;], 0x7ffed513d760 &#47;* 30 vars *&#47;) = -1 EACCES (Permission denied)<br>strace: exec: Permission denied<br>+++ exited with 1 +++<br><br>哪位大佬帮忙看看，是 root 用户，ls -l hello.py 的结果是<br>-rw-r--r-- 1 root root 147 Nov  3 14:44 .&#47;hello.py","like_count":0},{"had_liked":false,"id":361143,"user_name":"Geek_5ada4a","can_delete":false,"product_type":"c1","uid":2228781,"ip_address":"广东","ucode":"C1532F4A4AAC9A","user_header":"","comment_is_top":false,"comment_ctime":1667272014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667272014","product_id":100104501,"comment_content":"openat(AT_FDCWD, &quot;&#47;sys&#47;bus&#47;event_source&#47;devices&#47;kprobe&#47;type&quot;, O_RDONLY) = 5<br>read(5, &quot;6\\n&quot;, 4096) = 2<br>close(5) = 0<br><br>为什么下面的 type = 0x6 ，对不上诶<br>另外这个 read 作用是？<br><br>","like_count":0},{"had_liked":false,"id":358903,"user_name":"穿靴子的outman","can_delete":false,"product_type":"c1","uid":1492385,"ip_address":"重庆","ucode":"51DAC34D6C2642","user_header":"https://static001.geekbang.org/account/avatar/00/16/c5/a1/f6a2d80d.jpg","comment_is_top":false,"comment_ctime":1664992686,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1664992686","product_id":100104501,"comment_content":"1.你通常是如何快速理解一门新技术的运行原理的？<br><br>a.我通常首先搞清楚这门新技术想解决什么问题等背景知识.谁在什么场景下,会遇到什么问题.人永远是第一位的.<br>c.按照helloworld等例程实操一遍.<br>b.根据实际体验,重新思考这门技术,有哪些概念,组件,组件之间的关系是怎样.各个组件的输入输出怎么样的,怎么组合起来解决了这个问题.此时可以借助时序图,流程图等工具.加深理解.","like_count":0},{"had_liked":false,"id":358227,"user_name":"崔伟协","can_delete":false,"product_type":"c1","uid":1022452,"ip_address":"广东","ucode":"ACDEEDF2A10999","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/f4/e0484cac.jpg","comment_is_top":false,"comment_ctime":1664092264,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1664092264","product_id":100104501,"comment_content":"ebpf是图灵完备的吗","like_count":0},{"had_liked":false,"id":357847,"user_name":"Geek_ee7838","can_delete":false,"product_type":"c1","uid":3182525,"ip_address":"浙江","ucode":"49EED93124B501","user_header":"","comment_is_top":false,"comment_ctime":1663679322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663679322","product_id":100104501,"comment_content":"root@iZbp18xpd2ia89yqcrhi48Z:~&#47;eBPF# ll<br>total 24<br>drwxr-xr-x 2 root root 4096 Sep 20 20:03 .&#47;<br>drwx------ 8 root root 4096 Sep 20 20:49 ..&#47;<br>-rw-r--r-- 1 root root   85 Sep 20 19:14 hello.c<br>-rwxr-xr-x 1 root root  274 Sep 20 19:18 hello.py*<br>-rw-r--r-- 1 root root  753 Sep 20 20:03 trace-open.c<br>-rw-r--r-- 1 root root  725 Sep 20 20:02 trace-open.py<br>root@iZbp18xpd2ia89yqcrhi48Z:~&#47;eBPF# sudo strace -v -f -ebpf .&#47;hello.py<br>strace: exec: Exec format error<br>+++ exited with 1 +++<br>为什么我的strace跟踪不了ebpf数据包，strace版本是5.16的，我查看命令帮助似乎并没有-ebpf的命令参数","like_count":0},{"had_liked":false,"id":354527,"user_name":"MoGeJiEr🐔","can_delete":false,"product_type":"c1","uid":1882960,"ip_address":"江苏","ucode":"B7F0477730F294","user_header":"https://static001.geekbang.org/account/avatar/00/1c/bb/50/c8ebd5e1.jpg","comment_is_top":false,"comment_ctime":1660487519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660487519","product_id":100104501,"comment_content":"“R1-R5寄存器用于函数调用的参数，因此这里的函数调用参数不能超过5个”是指bpf-helper函数的参数不能超过5个嘛？","like_count":0},{"had_liked":false,"id":352476,"user_name":"magina","can_delete":false,"product_type":"c1","uid":1138499,"ip_address":"","ucode":"9546701896A09F","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/43/3799a0f3.jpg","comment_is_top":false,"comment_ctime":1658720049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658720049","product_id":100104501,"comment_content":"eBPF 运行时图中，不支持JIT是什么过程呢？文中也没有提什么情况下走JIT，什么情况不走JIT？","like_count":0},{"had_liked":false,"id":352283,"user_name":"有识之士","can_delete":false,"product_type":"c1","uid":1120024,"ip_address":"","ucode":"23F5594193D200","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/18/e4382a8e.jpg","comment_is_top":false,"comment_ctime":1658499324,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658499324","product_id":100104501,"comment_content":"我的报错<br><br>root@3358d0bf1a7b:~# bpftool prog list<br>WARNING: bpftool not found for kernel 5.10.25<br><br>  You may need to install the following packages for this specific kernel:<br>    linux-tools-5.10.25-linuxkit<br>    linux-cloud-tools-5.10.25-linuxkit<br><br>  You may also want to install one of the following packages to keep up to date:<br>    linux-tools-linuxkit<br>    linux-cloud-tools-linuxkit<br><br>root@3358d0bf1a7b:~# bpftool<br>WARNING: bpftool not found for kernel 5.10.25<br><br>  You may need to install the following packages for this specific kernel:<br>    linux-tools-5.10.25-linuxkit<br>    linux-cloud-tools-5.10.25-linuxkit<br><br>  You may also want to install one of the following packages to keep up to date:<br>    linux-tools-linuxkit<br>    linux-cloud-tools-linuxkit","like_count":0},{"had_liked":false,"id":352281,"user_name":"有识之士","can_delete":false,"product_type":"c1","uid":1120024,"ip_address":"","ucode":"23F5594193D200","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/18/e4382a8e.jpg","comment_is_top":false,"comment_ctime":1658495876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658495876","product_id":100104501,"comment_content":"请教选，这个ebpf 虚拟机功能类似  java jvm 编译成class 字节码？还是有很大的不同点？","like_count":0},{"had_liked":false,"id":344981,"user_name":"cmz","can_delete":false,"product_type":"c1","uid":2622586,"ip_address":"","ucode":"33658440075507","user_header":"https://static001.geekbang.org/account/avatar/00/28/04/7a/1306bf9c.jpg","comment_is_top":false,"comment_ctime":1651911599,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651911599","product_id":100104501,"comment_content":"ebpf为什么要设计成虚拟机的形式","like_count":0},{"had_liked":false,"id":344980,"user_name":"cmz","can_delete":false,"product_type":"c1","uid":2622586,"ip_address":"","ucode":"33658440075507","user_header":"https://static001.geekbang.org/account/avatar/00/28/04/7a/1306bf9c.jpg","comment_is_top":false,"comment_ctime":1651911280,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651911280","product_id":100104501,"comment_content":"内核事件触发后，即时编译器才会把bpf指令编译成机器指令吗，还是说加载到内核时候就编译了？","like_count":0},{"had_liked":false,"id":341890,"user_name":"程序员班吉","can_delete":false,"product_type":"c1","uid":1478098,"ip_address":"","ucode":"BD48CF7649609A","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/d2/8a6be8d8.jpg","comment_is_top":false,"comment_ctime":1649903945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649903945","product_id":100104501,"comment_content":"猜测，bpf字节码应该是动态链接。<br>","like_count":0},{"had_liked":false,"id":337848,"user_name":"woo","can_delete":false,"product_type":"c1","uid":1133195,"ip_address":"","ucode":"3076FEA9A60DBC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibpASCYk5eF1lAEbJ3TSI0fuMtiaVDb7dNuBZDRPL6QjEict8Wrb8iax2OibbEBxSs4bicCYf3yMEkGmXB2b2UVypaIg/132","comment_is_top":false,"comment_ctime":1647092483,"is_pvip":false,"replies":[{"id":"123548","content":"它默认是没有换行的。为了方便查看输出中的参数格式，课程中我手动做了对齐","user_name":"作者回复","user_name_real":"编辑","uid":"1001282","ctime":1647165746,"ip_address":"","comment_id":337848,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647092483","product_id":100104501,"comment_content":"为啥我的strace输出的不像老师那种json格式很漂亮，是以行为单位的显示，是装了什么工具吗？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556020,"discussion_content":"它默认是没有换行的。为了方便查看输出中的参数格式，课程中我手动做了对齐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647165746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332678,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1643461635,"is_pvip":false,"replies":[{"id":"121660","content":"系统调用最多只有6个参数，不会更多的，具体可以参考内核源码 https:&#47;&#47;elixir.bootlin.com&#47;linux&#47;v5.13&#47;source&#47;include&#47;linux&#47;syscalls.h#L216。","user_name":"作者回复","user_name_real":"编辑","uid":"1001282","ctime":1643812117,"ip_address":"","comment_id":332678,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1643461635","product_id":100104501,"comment_content":"请问老师，像上节课例子中 trace openat系统调用的这个函数int hello_world(struct pt_regs *ctx, int dfd, const char __user * filename, struct open_how *how)，bpf会自动把系统调用参数注入bpf函数执行中。本节课提到bpf虚拟机中对bpf函数的参数个数有限制，那如果碰到系统调用参数个数大于bpf限制了，该如何处理呢？<br><br>谢谢老师","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549291,"discussion_content":"系统调用最多只有6个参数，不会更多的，具体可以参考内核源码 https://elixir.bootlin.com/linux/v5.13/source/include/linux/syscalls.h#L216。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643812117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1065272,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","nickname":"写点啥呢","note":"","ucode":"C19032CF1C41BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":549294,"discussion_content":"多谢老师解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643812358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":549291,"ip_address":""},"score":549294,"extra":""}]}]},{"had_liked":false,"id":332482,"user_name":"不了峰","can_delete":false,"product_type":"c1","uid":1013424,"ip_address":"","ucode":"E23B96D6A3D4EC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/b0/14fec62f.jpg","comment_is_top":false,"comment_ctime":1643272004,"is_pvip":false,"replies":[{"id":"121469","content":"可以运行下面的命令来查询bpftool支持的特性：<br><br>sudo bpftool version -p<br><br>如果出现下面的输出说明默认不支持libbfd，需要下载内核源码并安装binutils-dev之后重新编译bpftool：<br>{<br>    &quot;features&quot;: {<br>        &quot;libbfd&quot;: false<br>    }<br>}","user_name":"作者回复","user_name_real":"编辑","uid":"1001282","ctime":1643291039,"ip_address":"","comment_id":332482,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643272004","product_id":100104501,"comment_content":"root@ubuntu-impish:~# bpftool prog dump jited id 331<br>Error: No libbfd support   <br>root@ubuntu-impish:~# <br>----<br>root@ubuntu-impish:~# bpftool -V<br>&#47;usr&#47;lib&#47;linux-tools&#47;5.13.0-27-generic&#47;bpftool v5.13.19<br>features:<br>root@ubuntu-impish:~# <br>-----<br>是不是因为新版的bpftool  Remove bpf_jit_enable=2 debugging mode。<br><br>-----<br>root@ubuntu-impish:~#  bpftool prog profile<br>Error: bpftool prog profile command is not supported. Please build bpftool with clang &gt;= 10.0.0<br>root@ubuntu-impish:~# clang -v<br>Ubuntu clang version 13.0.0-2<br>Target: x86_64-pc-linux-gnu","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548645,"discussion_content":"可以运行下面的命令来查询bpftool支持的特性：\n\nsudo bpftool version -p\n\n如果出现下面的输出说明默认不支持libbfd，需要下载内核源码并安装binutils-dev之后重新编译bpftool：\n{\n    &#34;features&#34;: {\n        &#34;libbfd&#34;: false\n    }\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643291039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332452,"user_name":"ZR2021","can_delete":false,"product_type":"c1","uid":1707352,"ip_address":"","ucode":"4F685C7516F057","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","comment_is_top":false,"comment_ctime":1643259608,"is_pvip":false,"replies":[{"id":"121470","content":"可以运行下面的命令来查询bpftool支持的特性：<br><br>sudo bpftool version -p<br><br>如果出现下面的输出说明默认不支持libbfd，需要下载内核源码并安装binutils-dev之后重新编译bpftool：<br>{<br>    &quot;features&quot;: {<br>        &quot;libbfd&quot;: false<br>    }<br>}","user_name":"作者回复","user_name_real":"编辑","uid":"1001282","ctime":1643291054,"ip_address":"","comment_id":332452,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1643259608","product_id":100104501,"comment_content":"老师，我这边执行 bpftool prog dump jited id xxx，报&quot;Error: No libbfd support&quot; 错误，网上也没找到原因，系统是最新的ubuntu 21.10，vmvare的虚拟机，执行xlated是可以打印出指令的，不知道啥个情况","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548646,"discussion_content":"可以运行下面的命令来查询bpftool支持的特性：\n\nsudo bpftool version -p\n\n如果出现下面的输出说明默认不支持libbfd，需要下载内核源码并安装binutils-dev之后重新编译bpftool：\n{\n    &#34;features&#34;: {\n        &#34;libbfd&#34;: false\n    }\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643291054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1707352,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","nickname":"ZR2021","note":"","ucode":"4F685C7516F057","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":548715,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643339692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":548646,"ip_address":""},"score":548715,"extra":""}]},{"author":{"id":1013424,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/b0/14fec62f.jpg","nickname":"不了峰","note":"","ucode":"E23B96D6A3D4EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548698,"discussion_content":"$ sudo bpftool version -p\n{\n    &#34;version&#34;: &#34;5.13.19&#34;,\n    &#34;features&#34;: {\n        &#34;libbfd&#34;: false,\n        &#34;skeletons&#34;: false\n    }\n」\n\n---就先到这儿吧， 先学下面的课程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643334807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332268,"user_name":"ZR2021","can_delete":false,"product_type":"c1","uid":1707352,"ip_address":"","ucode":"4F685C7516F057","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","comment_is_top":false,"comment_ctime":1643130473,"is_pvip":false,"replies":[{"id":"121418","content":"验证器是发生在加载过程中，而这儿看到的是已经加载到内核内存中了（验证失败就不会加载了）","user_name":"作者回复","user_name_real":"编辑","uid":"1001282","ctime":1643203450,"ip_address":"","comment_id":332268,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1643130473","product_id":100104501,"comment_content":"老师，sudo bpftool prog dump xlated id 89，这条命令输出的指令是存储模块存储的指令吗，这个指令是在验证器里进行转换的吗，验证器用转换后的指令去模拟执行是否安全，对bpf 接触的比较少，可能问的有点低级……","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548461,"discussion_content":"验证器是发生在加载过程中，而这儿看到的是已经加载到内核内存中了（验证失败就不会加载了）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643203450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1707352,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","nickname":"ZR2021","note":"","ucode":"4F685C7516F057","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":548526,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643248375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":548461,"ip_address":""},"score":548526,"extra":""}]}]}]}