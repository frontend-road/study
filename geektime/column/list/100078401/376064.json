{"id":376064,"title":"06 | 虚幻与真实：程序中的地址如何转换？","content":"<p>你好，我是LMOS。</p><p>从前面的课程我们得知，CPU执行程序、处理数据都要和内存打交道，这个打交道的方式就是内存地址。</p><p>读取指令、读写数据都需要首先告诉内存芯片：hi，内存老哥请你把0x10000地址处的数据交给我……hi，内存老哥，我已经计算完成，请让我把结果写回0x200000地址的空间。这些地址存在于代码指令字段后的常数，或者存在于某个寄存器中。</p><p><img src=\"https://static001.geekbang.org/resource/image/b0/fc/b0e93b744dfdc62c4a3ce8816b25b1fc.jpg?wh=1736*1350\" alt=\"\"></p><p>今天，我们就来专门研究一下程序中的地址。说起程序中的地址，不知道你是否好奇过，为啥系统设计者要引入虚拟地址呢？</p><p>我会先带你从一个多程序并发的场景热身，一起思考这会导致哪些问题，为什么能用虚拟地址解决这些问题。</p><p>搞懂原理之后，我还会带你一起探索<strong>虚拟地址和物理地址的关系和转换机制</strong>。在后面的课里，你会发现，我们最宝贵的内存资源正是通过这些机制来管理的。</p><h2>从一个多程序并发的场景说起</h2><p>设想一下，如果一台计算机的内存中只运行一个程序A，这种方式正好用前面CPU的<a href=\"https://time.geekbang.org/column/article/375278\">实模式</a>来运行，因为程序A的地址在链接时就可以确定，例如从内存地址0x8000开始，每次运行程序A都装入内存0x8000地址处开始运行，没有其它程序干扰。</p><p>现在改变一下，内存中又放一道程序B，程序A和程序B各自运行一秒钟，如此循环，直到其中之一结束。这个新场景下就会产生一些问题，当然这里我们只关心内存相关的这几个核心问题。</p><!-- [[[read_end]]] --><p>1.谁来保证程序A跟程序B <strong>没有内存地址的冲突</strong>？换句话说，就是程序A、B各自放在什么内存地址，这个问题是由A、B程序协商，还是由操作系统决定。</p><p>2.怎样保证程序A跟程序B <strong>不会互相读写各自的内存空间</strong>？这个问题相对简单，用保护模式就能解决。</p><p>3.如何解决<strong>内存容量</strong>问题？程序A和程序B，在不断开发迭代中程序代码占用的空间会越来越大，导致内存装不下。</p><p>4.还要考虑一个<strong>扩展后的复杂情况</strong>，如果不只程序A、B，还可能有程序C、D、E、F、G……它们分别由不同的公司开发，而每台计算机的内存容量不同。这时候，又对我们的内存方案有怎样的影响呢？</p><p>要想完美地解决以上最核心的4个问题，一个较好的方案是：让所有的程序都各自享有一个从0开始到最大地址的空间，这个地址空间是独立的，是该程序私有的，其它程序既看不到，也不能访问该地址空间，这个地址空间和其它程序无关，和具体的计算机也无关。</p><p>事实上，计算机科学家们早就这么做了，这个方案就是<strong>虚拟地址</strong>，下面我们就来看看它。</p><h2>虚拟地址</h2><p>正如其名，这个地址是虚拟的，自然而然地和具体环境进行了解耦，这个环境包括系统软件环境和硬件环境。</p><p>虚拟地址是逻辑上存在的一个数据值，比如0~100就有101个整数值，这个0~100的区间就可以说是一个虚拟地址空间，该虚拟地址空间有101个地址。</p><p>我们再来看看最开始Hello World的例子，我们用objdump工具反汇编一下Hello World二进制文件，就会得到如下的代码片段：</p><pre><code>00000000000004e8 &lt;_init&gt;:\n 4e8:\t48 83 ec 08          \tsub    $0x8,%rsp\n 4ec:\t48 8b 05 f5 0a 20 00 \tmov    0x200af5(%rip),%rax        # 200fe8 &lt;__gmon_start__&gt;\n 4f3:\t48 85 c0             \ttest   %rax,%rax\n 4f6:\t74 02                \tje     4fa &lt;_init+0x12&gt;\n 4f8:\tff d0                \tcallq  *%rax\n 4fa:\t48 83 c4 08          \tadd    $0x8,%rsp\n 4fe:\tc3                   \tretq \n</code></pre><p>上述代码中，左边第一列数据就是虚拟地址，第三列中是程序指令，如：“mov 0x200af5(%rip),%rax，je 4fa，callq *%rax”指令中的数据都是虚拟地址。</p><p>事实上，所有的应用程序开始的部分都是这样的。这正是因为每个应用程序的虚拟地址空间都是相同且独立的。</p><p>那么这个地址是由谁产生的呢？</p><p>答案是链接器，其实我们开发软件经过编译步骤后，就需要链接成可执行文件才可以运行，而链接器的主要工作就是把多个代码模块组装在一起，并解决模块之间的引用，即处理程序代码间的地址引用，形成程序运行的静态内存空间视图。</p><p>只不过这个地址是虚拟而统一的，而根据操作系统的不同，这个虚拟地址空间的定义也许不同，应用软件开发人员无需关心，由开发工具链给自动处理了。由于这虚拟地址是独立且统一的，所以各个公司开发的各个应用完全不用担心自己的内存空间被占用和改写。</p><h2>物理地址</h2><p>虽然虚拟地址解决了很多问题，但是虚拟地址只是逻辑上存在的地址，无法作用于硬件电路的，程序装进内存中想要执行，就需要和内存打交道，从内存中取得指令和数据。而内存只认一种地址，那就是<strong>物理地址</strong>。</p><p>什么是物理地址呢？物理地址在逻辑上也是一个数据，只不过这个数据会被地址译码器等电子器件变成电子信号，放在地址总线上，地址总线电子信号的各种组合就可以选择到内存的储存单元了。</p><p>但是地址总线上的信号（即物理地址），也可以选择到别的设备中的储存单元，如显卡中的显存、I/O设备中的寄存器、网卡上的网络帧缓存器。不过如果不做特别说明，我们说的物理地址就是指<strong>选择内存单元的地址</strong>。</p><h2>虚拟地址到物理地址的转换</h2><p>明白了虚拟地址和物理地址之后，我们发现虚拟地址必须转换成物理地址，这样程序才能正常执行。要转换就必须要转换机构，它相当于一个函数：p=f(v)，输入虚拟地址v，输出物理地址p。</p><p>那么要怎么实现这个函数呢？</p><p>用软件方式实现太低效，用硬件实现没有灵活性，最终就用了软硬件结合的方式实现，它就是MMU（内存管理单元）。MMU可以接受软件给出的地址对应关系数据，进行地址转换。</p><p>我们先来看看逻辑上的MMU工作原理框架图。如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/d5/99/d582ff647549b8yy986d90e697d33499.jpg?wh=3525*1955\" alt=\"\" title=\"MMU工作原理图\"></p><p>上图中展示了MMU通过地址关系转换表，将0x80000~0x84000的虚拟地址空间转换成 0x10000~0x14000的物理地址空间，而地址关系转换表本身则是放物理内存中的。</p><p>下面我们不妨想一想地址关系转换表的实现.如果在地址关系转换表中，这样来存放：一个虚拟地址对应一个物理地址。</p><p>那么问题来了，32位地址空间下，4GB虚拟地址的地址关系转换表就会把整个32位物理地址空间用完，这显然不行。</p><p>要是结合前面的保护模式下分段方式呢，地址关系转换表中存放：一个虚拟段基址对应一个物理段基址，这样看似可以，但是因为段长度各不相同，所以依然不可取。</p><p>综合刚才的分析，系统设计者最后采用一个折中的方案，即<strong>把虚拟地址空间和物理地址空间都分成同等大小的块，也称为页，按照虚拟页和物理页进行转换。</strong>根据软件配置不同，这个页的大小可以设置为4KB、2MB、4MB、1GB，这样就进入了现代内存管理模式——<strong>分页模型</strong>。</p><p>下面来看看分页模型框架，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/d0/9b19677448ee973c4f3yya6b3af7b4d0.jpg?wh=2801*1955\" alt=\"\" title=\"分页模型框架图\"></p><p>结合图片可以看出，一个虚拟页可以对应到一个物理页，由于页大小一经配置就是固定的，所以在地址关系转换表中，只要存放<strong>虚拟页地址对应的物理页地址</strong>就行了。</p><p>我知道，说到这里，也许你仍然没搞清楚MMU和地址关系转换表的细节，别急，我们现在已经具备了研究它们的基础，下面我们就去探索它们。</p><h2>MMU</h2><p>MMU即内存管理单元，是用硬件电路逻辑实现的一个地址转换器件，它负责接受虚拟地址和地址关系转换表，以及输出物理地址。</p><p>根据实现方式的不同，MMU可以是独立的芯片，也可以是集成在其它芯片内部的，比如集成在CPU内部，x86、ARM系列的CPU就是将MMU集成在CPU核心中的。</p><p>SUN公司的CPU是将独立的MMU芯片卡在总线上的，有一夫当关的架势。下面我们只研究x86  CPU中的MMU。x86 CPU要想开启MMU，就必须先开启保护模式或者长模式，实模式下是不能开启MMU的。</p><p>由于保护模式的内存模型是分段模型，它并不适合于MMU的分页模型，所以我们要使用保护模式的平坦模式，这样就绕过了分段模型。这个平坦模型和长模式下忽略段基址和段长度是异曲同工的。地址产生的过程如下所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/b4/88/b41a2bb00e19e662b34a1b7b7c0ae288.jpg?wh=3861*1276\" alt=\"\" title=\"CPU地址转换图\"></p><p>上图中，程序代码中的虚拟地址，经过CPU的分段机制产生了线性地址，平坦模式和长模式下线性地址和虚拟地址是相等的。</p><p>如果不开启MMU，在保护模式下可以关闭MMU，这个线性地址就是物理地址。因为长模式下的分段<strong>弱化了地址空间的隔离</strong>，所以开启MMU是必须要做的，开启MMU才能访问内存地址空间。</p><h3>MMU页表</h3><p>现在我们开始研究地址关系转换表，其实它有个更加专业的名字——<strong>页表</strong>。它描述了虚拟地址到物理地址的转换关系，也可以说是虚拟页到物理页的映射关系，所以称为页表。</p><p>为了增加灵活性和节约物理内存空间（因为页表是放在物理内存中的），所以页表中并不存放虚拟地址和物理地址的对应关系，只存放物理页面的地址，MMU以虚拟地址为索引去查表返回物理页面地址，而且页表是分级的，总体分为三个部分：一个顶级页目录，多个中级页目录，最后才是页表，逻辑结构图如下.</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/yf/2df904c8ba75065e1491138d63820yyf.jpg?wh=5045*3212\" alt=\"\" title=\"MMU页表原理图\"></p><p>从上面可以看出，一个虚拟地址被分成从左至右四个位段。</p><p>第一个位段索引顶级页目录中一个项，该项指向一个中级页目录，然后用第二个位段去索引中级页目录中的一个项，该项指向一个页目录，再用第三个位段去索引页目录中的项，该项指向一个物理页地址，最后用第四个位段作该物理页内的偏移去访问物理内存。<strong>这就是MMU的工作流程。</strong></p><h2>保护模式下的分页</h2><p>前面的内容都是理论上帮助我们了解分页模式原理的，分页模式的<strong>灵活性、通用性、安全性</strong>，是现代操作系统内存管理的基石，更是事实上的标准内存管理模型，现代商用操作系统都必须以此为基础实现虚拟内存功能模块。</p><p>因为我们的主要任务是开发操作系统，而开发操作系统就落实到真实的硬件平台上去的，下面我们就来研究x86 CPU上的分页模式。</p><p>首先来看看保护模式下的分页，保护模式下只有32位地址空间，最多4GB-1大小的空间。</p><p>根据前面得知32位虚拟地址经过分段机制之后得到线性地址，又因为通常使用平坦模式，所以线性地址和虚拟地址是相同的。</p><p>保护模式下的分页大小通常有两种，一种是4KB大小的页，一种是4MB大小的页。分页大小的不同，会导致虚拟地址位段的分隔和页目录的层级不同，但虚拟页和物理页的大小始终是等同的。</p><h3>保护模式下的分页——4KB页</h3><p>该分页方式下，32位虚拟地址被分为三个位段：<strong>页目录索引、页表索引、页内偏移</strong>，只有一级页目录，其中包含1024个条目 ，每个条目指向一个页表，每个页表中有1024个条目。其中一个条目就指向一个物理页，每个物理页4KB。这正好是4GB地址空间。如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/00/f8/00b7f1ef4a1c4f6fc9e6b69109ae0bf8.jpg?wh=4005*1450\" alt=\"\" title=\"保护模式下的4KB分页\"></p><p>上图中CR3就是CPU的一个32位的寄存器，MMU就是根据这个寄存器找到页目录的。下面，我们看看当前分页模式下的CR3、页目录项、页表项的格式。</p><p><img src=\"https://static001.geekbang.org/resource/image/36/c9/361c48e1876a412f9ff9f29bf2dbecc9.jpg?wh=4230*6255\" alt=\"\"></p><p>可以看到，页目录项、页表项都是4字节32位，1024个项正好是4KB（一个页），因此它们的地址始终是4KB对齐的，所以低12位才可以另作它用，形成了页面的相关属性，如是否存在、是否可读可写、是用户页还是内核页、是否已写入、是否已访问等。</p><h3>保护模式下的分页——4MB页</h3><p>该分页方式下，32位虚拟地址被分为两个位段：<strong>页表索引、页内偏移</strong>，只有一级页目录，其中包含1024个条目。其中一个条目指向一个物理页，每个物理页4MB，正好为4GB地址空间，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/52/76932c52a7b6109854f2de72d71bba52.jpg?wh=4005*1405\" alt=\"\" title=\"保护模式下的4MB分页\"></p><p>CR3还是32位的寄存器，只不过不再指向顶级页目录了，而是指向一个4KB大小的页表，这个页表依然要4KB地址对齐，其中包含1024个页表项，格式如下图。<br>\n<img src=\"https://static001.geekbang.org/resource/image/9a/08/9a4afdc60b790c3e2b7e94b0c7fd4208.jpg?wh=4174*4044\" alt=\"\"></p><p>可以发现，4MB大小的页面下，页表项还是4字节32位，但只需要用高10位来保存物理页面的基地址就可以。因为每个物理页面都是4MB，所以低22位始终为0，为了兼容4MB页表项低8位和4KB页表项一样，只不过第7位变成了PS位，且必须为1，而PAT位移到了12位。</p><h2>长模式下的分页</h2><p>如果开启了长模式，则必须同时开启分页模式，因为长模式弱化了分段模型，而分段模型也确实有很多不足，不适应现在操作系统和应用软件的发展。</p><p>同时，长模式也扩展了CPU的位宽，使得CPU能使用64位的超大内存地址空间。所以，长模式下的虚拟地址必须等于线性地址且为64位。</p><p>长模式下的分页大小通常也有两种，4KB大小的页和2MB大小的页。</p><h3>长模式下的分页——4KB页</h3><p>该分页方式下，64位虚拟地址被分为6个位段，分别是：保留位段，顶级页目录索引、页目录指针索引、页目录索引、页表索引、页内偏移，顶级页目录、页目录指针、页目录、页表各占有4KB大小，其中各有512个条目，每个条目8字节64位大小，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/ec/c9/ecdea93c2544cf9c1d84461b602b03c9.jpg?wh=4605*1845\" alt=\"\" title=\"长模式下的4KB分页\"></p><p>上面图中CR3已经变成64位的CPU的寄存器，它指向一个顶级页目录，里面的顶级页目项指向页目录指针，依次类推。</p><p>需要注意的是，虚拟地址48到63这16位是根据<strong>第47位</strong>来决定的，47位为1，它们就为1，反之为0，这是因为x86 CPU并没有实现全64位的地址总线，而是只实现了48位，但是CPU的寄存器却是64位的。</p><p>这种最高有效位填充的方式，即使后面扩展CPU的地址总线也不会有任何影响，下面我们去看看当前分页模式下的CR3、顶级页目录项、页目录指针项、页目录项、页表项的格式，我画了一张图帮你理解。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/55/e342246f5cfa21c5b5173b9e494bdc55.jpg?wh=3750*12855\" alt=\"\"></p><p>由上图可知，长模式下的4KB分页下，由一个顶层目录、二级中间层目录和一层页表组成了64位地址翻译过程。</p><p>顶级页目录项指向页目录指针页，页目录指针项指向页目录页，页目录项指向页表页，页表项指向一个4KB大小的物理页，各级页目录项中和页表项中依然存在各种属性位，这在图中已经说明。其中的XD位，可以控制代码页面是否能够运行。</p><h3>长模式下的分页——2MB页</h3><p>在这种分页方式下，64位虚拟地址被分为5个位段 ：保留位段、顶级页目录索引、页目录指针索引、页目录索引，页内偏移，顶级页目录、页目录指针、页目录各占有4KB大小，其中各有512个条目，每个条目8字节64位大小。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/ea/68bf70d8bcae7802e5291140ac1ec6ea.jpg?wh=4405*1545\" alt=\"\" title=\"长模式下的2MB分页\"></p><p>可以发现，长模式下2MB和4KB分页的区别是，2MB分页下是页目录项直接指向了2MB大小的物理页面，放弃了<strong>页表项</strong>，然后把虚拟地址的低21位作为页内偏移，21位正好索引2MB大小的地址空间。</p><p>下面我们还是要去看看2MB分页模式下的CR3、顶级页目录项、页目录指针项、页目录项的格式，格式如下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/45/0b/457f6965d0f25bf64bfb9ec698ab7e0b.jpg?wh=4640*12490\" alt=\"\"></p><p>上图中没有了页表项，取而代之的是，页目录项中直接存放了2MB物理页基地址。由于物理页始终2MB对齐，所以其地址的低21位为0，用于存放页面属性位。</p><h2>开启MMU</h2><p>要使用分页模式就必先开启MMU，但是开启MMU的前提是CPU进入保护模式或者长模式，开启CPU这两种模式的方法，我们在前面<a href=\"https://time.geekbang.org/column/article/375278\">第五节课</a>已经讲过了，下面我们就来开启MMU，步骤如下：</p><p>1.使CPU进入保护模式或者长模式。</p><p>2.准备好页表数据，这包含顶级页目录，中间层页目录，页表，假定我们已经编写了代码，在物理内存中生成了这些数据。</p><p>3.把顶级页目录的物理内存地址赋值给CR3寄存器。</p><pre><code>mov eax, PAGE_TLB_BADR ;页表物理地址\nmov cr3, eax\n</code></pre><ol start=\"4\">\n<li>设置CPU的CR0的PE位为1，这样就开启了MMU。</li>\n</ol><pre><code>;开启 保护模式和分页模式\nmov eax, cr0\nbts eax, 0    ;CR0.PE =1\nbts eax, 31   ;CR0.P = 1\nmov cr0, eax \n</code></pre><h2>MMU地址转换失败</h2><p>MMU的主要功能是根据页表数据把虚拟地址转换成物理地址，但有没有可能转换失败？</p><p>绝对有可能，例如，页表项中的数据为空，用户程序访问了超级管理者的页面，向只读页面中写入数据。这些都会导致MMU地址转换失败。</p><p>MMU地址转换失败了怎么办呢？失败了既不能放行，也不是reset，MMU执行的操作如下。</p><p>1.MMU停止转换地址。<br>\n2.MMU把转换失败的虚拟地址写入CPU的CR2寄存器。<br>\n3.MMU触发CPU的14号中断，使CPU停止执行当前指令。<br>\n4.CPU开始执行14号中断的处理代码，代码会检查原因，处理好页表数据返回。<br>\n5.CPU中断返回继续执行MMU地址转换失败时的指令。</p><p>这里你只要先明白这个流程就好了，后面课程讲到内存管理的时候我们继续探讨。</p><h2>重点回顾</h2><p>又到了课程的尾声，把心情放松下来，我们一起来回顾这节课的重点。</p><p>首先，我们从一个场景开始热身，发现多道程序同时运行有很多问题，都是内存相关的问题，内存需要<strong>隔离和保护</strong>。从而提出了虚拟地址与物理地址分离，让应用程序从实际的物理内存中解耦出来。</p><p>虽然虚拟地址是个非常不错的方案，但是虚拟地址必须转换成物理地址，才能在硬件上执行。为了执行这个转换过程，才开发出了MMU（内存管理单元），MMU<strong>增加了转换的灵活性</strong>，它的实现方式是<strong>硬件执行转换过程，但又依赖于软件提供的地址转换表。</strong></p><p>最后，我们下落到具体的硬件平台，研究了x86 CPU上的MMU。</p><p>x86 CPU上的MMU在其保护模式和长模式下提供4KB、2MB、4MB等页面转换方案，我们详细分析了它们的<strong>页表格式</strong>。同时，也搞清楚了<strong>如何开启MMU，以及MMU地址转换失败后执行的操作。</strong></p><h2>思考题</h2><p>在分页模式下，操作系统是如何对应用程序的地址空间进行隔离的？</p><p>欢迎你在留言区和我交流互动。如果这节课对你有启发的话，也欢迎你转发给朋友、同事，说不定就能帮他解决疑问。</p><p>我是LMOS，我们下节课见！</p>","comments":[{"had_liked":false,"id":293780,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":true,"comment_ctime":1621554511,"is_pvip":false,"replies":[{"id":"106440","content":"你学到位了 66666","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621560216,"ip_address":"","comment_id":293780,"utype":1}],"discussion_count":21,"race_medal":0,"score":"9.2233725452825006e+18","product_id":100078401,"comment_content":"😃又是信息量爆炸的一节，不过读下来也是挺爽的。这里我替很多同学说明一下，虚拟地址中的页内偏移才是决定页大小和多级目录的核心点，页内偏移必须与页大小保持一致，这样才能保证寻址可以找到页内的每一个地址。<br>对于思考题，其实也比较简单，文中也谈到了，实模式下多个任务共享所有地址空间太危险，因此才有了保护模式，保护模式下的分页模式是一个巨大的创新。<br>对于每个进程而言，它会误认为(被操作系统欺骗)自己独有所有地址空间，因此它访问地址是不会考虑任何问题的，可是这个地址是虚拟地址，待被MMU翻译后会得到对应的页表，而这个页表由操作系统管理，不同的进程拥有不同的页表，也因此产生了进程地址空间隔离，但是多个进程也是可以共享某个页表，这也是进程通信(IPC)的根本手段。","like_count":119,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520356,"discussion_content":"你学到位了 66666","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621560216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1129610,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","nickname":"test","note":"","ucode":"C57A175CBC6547","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404446,"discussion_content":"怎么确定不冲突，比如a程序用了一段内存，b程序也用了同样一段，怎么办？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634307854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2376310,"avatar":"https://static001.geekbang.org/account/avatar/00/24/42/76/ba16e3f8.jpg","nickname":"野望","note":"","ucode":"F4B60D26BBD700","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1129610,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","nickname":"test","note":"","ucode":"C57A175CBC6547","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410289,"discussion_content":"不同的进程用不同的页表，这才是重点。我的理解是操作系统通过维护不同进程的页表，完成对进程访问的物理空间的限制，保证它们用的物理地址不会冲突。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1635651566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":404446,"ip_address":""},"score":410289,"extra":""}]},{"author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375268,"discussion_content":"这个地方说的有点问题，希望大家不要误会，页表已经保存在了内存的某个位置，不是由MMU翻译而来，而是MMU翻译后找到对应的页表","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621559154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1721895,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/46/27/eb318d12.jpg","nickname":"Geek_4b6813","note":"","ucode":"ED10C17BE368B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380806,"discussion_content":"我认为你的说法有些混淆了页表和页框的关系，我认为准确的说法应该是mmu根据页表起始地址以及页表项偏移地址，经过翻译之后找到对应的页框（物理内存），在根据页内偏移地址计算出物理地址。\n页表是操作系统内核维护的，每个进程有自己的页表，以32位，4KB页面为例，则每个进程的页表项共有2^20项，size=2^20*4（字节）。\nmmu是根据cr3找到页表的起始地址，根据虚拟内存的前20位作为偏移地址找到对应的页表项，比如00000000000000000001(页表偏移)，0000000001（页内偏移）。00000000000000000001意味着需要取得页表中下标为1的页表项，而这个页表项中的前20位代表的是页框号（即是物理内存按同样4KB大小分页后的标号，物理页框是无序的，从磁盘加载磁盘块的时候，内存哪里有空间就可能写到哪里），假设1号页表项中前20位记录的是00000000000000000002（页框号）。那么意味着在本进程中，1号页表项对应2号页框。因此mmu加上页内偏移，计算出的物理地址为000000000000000000020000000001，这个就是cpu在内存总线上所寻的地址。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1624707139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375268,"ip_address":""},"score":380806,"extra":""}]},{"author":{"id":2875395,"avatar":"","nickname":"Geek_a401ff","note":"","ucode":"D83CE29B80B618","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560313,"discussion_content":"Int类型虚拟内存中占用4字节，那物理内存占用多少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649256573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2812934,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/ec/06/4494ecde.jpg","nickname":"jk001","note":"","ucode":"FF1E3A2883E8D9","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":2875395,"avatar":"","nickname":"Geek_a401ff","note":"","ucode":"D83CE29B80B618","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581645,"discussion_content":"一样的，仍然是4字节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658907815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":560313,"ip_address":""},"score":581645,"extra":""}]},{"author":{"id":1095740,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b8/3c/1a294619.jpg","nickname":"Panda","note":"","ucode":"911A200C7B18BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377163,"discussion_content":"MMU 相当于虚拟内存管理器  跟每个进程分配一个虚拟的内存空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622533233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2640382,"avatar":"https://static001.geekbang.org/account/avatar/00/28/49/fe/61e98b15.jpg","nickname":"天涯海角","note":"","ucode":"9367E36129824C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376715,"discussion_content":"请教一下不同的进程拥有不同的页表怎么理解？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622289849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2640382,"avatar":"https://static001.geekbang.org/account/avatar/00/28/49/fe/61e98b15.jpg","nickname":"天涯海角","note":"","ucode":"9367E36129824C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376719,"discussion_content":"说法有点问题，应该是每个进程都有不同的页，这些页由操作系统管理，一个进程可以有多个页，统称为页表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622291387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376715,"ip_address":""},"score":376719,"extra":""},{"author":{"id":1129610,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","nickname":"test","note":"","ucode":"C57A175CBC6547","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404448,"discussion_content":"一个进程的大小超过内存怎么办？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634308090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376719,"ip_address":""},"score":404448,"extra":""},{"author":{"id":1513948,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/dc/9d3ed421.jpg","nickname":"monchickey","note":"","ucode":"D7B670444F62B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1129610,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","nickname":"test","note":"","ucode":"C57A175CBC6547","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552015,"discussion_content":"超过物理内存操作系统会通过换页机制将不用内存页换出到硬盘，然后加载数据到当前的内存页，如果交换分区也不够了就会出现内存溢出进程会被系统终止。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645235916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":404448,"ip_address":""},"score":552015,"extra":""}]},{"author":{"id":1940100,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9a/84/bf43d333.jpg","nickname":"d16ug-a1l","note":"","ucode":"6077E36D382214","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376387,"discussion_content":"是小马佩德罗吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622105968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1940100,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9a/84/bf43d333.jpg","nickname":"d16ug-a1l","note":"","ucode":"6077E36D382214","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376396,"discussion_content":"不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622108019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376387,"ip_address":""},"score":376396,"extra":""}]},{"author":{"id":1039597,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dc/ed/3fe13e55.jpg","nickname":"al_培龙","note":"","ucode":"C8E9D775D28D91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375422,"discussion_content":"页表数限制了进程数大小，是这样么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621646894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1039597,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dc/ed/3fe13e55.jpg","nickname":"al_培龙","note":"","ucode":"C8E9D775D28D91","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375423,"discussion_content":"多对多关系，没有具体的限制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621647145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375422,"ip_address":""},"score":375423,"extra":""},{"author":{"id":2066081,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/86/a1/1e474eb9.jpg","nickname":"Manfestain","note":"","ucode":"66DC6802F502E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382777,"discussion_content":"那多对多的情况下，多个进程对一个页，岂不是会发生互相访问内存的问题？，这种情况下是如何实现隔离的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625718613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375423,"ip_address":""},"score":382777,"extra":""},{"author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2066081,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/86/a1/1e474eb9.jpg","nickname":"Manfestain","note":"","ucode":"66DC6802F502E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382779,"discussion_content":"锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625719915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":382777,"ip_address":""},"score":382779,"extra":""}]}]},{"had_liked":false,"id":299554,"user_name":"Geek_4b6813","can_delete":false,"product_type":"c1","uid":1721895,"ip_address":"","ucode":"ED10C17BE368B4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/46/27/eb318d12.jpg","comment_is_top":true,"comment_ctime":1624703273,"is_pvip":false,"replies":[{"id":"108708","content":"是的，大写6666，太厉害了","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1624846401,"ip_address":"","comment_id":299554,"utype":1}],"discussion_count":7,"race_medal":0,"score":"9.2233723391271997e+18","product_id":100078401,"comment_content":"配合之前的现代操作系统的学习有一些收获不知道对或不对<br>虚拟内存实际上是存储器地址空间抽象的一种实现。从进程的角度看起来就好像自己独占了整个内存，链接器链接编译产物的时候只需要从0地址开始做变量和函数地址的替换，不需要关心自己是否会把其他进程的内存单元给污染。地址空间是进程可以访问的所有内存单元的集合<br>而虚拟内存的实现带来的好处只要有<br>1.利用程序的局部性原理，使用时间换空间，通过不断地淘汰&#47;加载页表项就可以模拟出巨大的内存。<br>2.使用mmu并行计算的能力，减少了基址寄存器和界限寄存器的add和compare操作。<br>但是软件开发是没有银弹的，虚拟内存同时也带来了一些实现上的挑战<br>1.从虚拟内存到物理内存的映射必须要尽可能快，不然访存的时候反而会成为指令执行速度的瓶颈，这点现代操作系统大多通过在内核中维护一个tlb做页表-页框的映射缓存表来实现，这里是空间换时间。<br>2.随着虚拟内存的增加，比如要表示4GB的虚拟内存，以4KB的页面大小为例，共需要4GB&#47;4KB= 2^20,而每个页表项需要32位即是4个字节大小，一个进程的页表总共为2^20*4 = 4194304（字节） = 4MB。<br>假设4核cpu同时运行不同的进程，操作系统在内核中至少需要维护16MB的页表。看起好像很小对不对，大家可以尝试按64位内存总线去换算。所以为了避免一次性加载大量页表到内存中，会采用多级页表策略。如老师文中描述的，一次只加载一级页表到内存中，并且可以选择淘汰上一级页表，通过多次映射的方法来避免大页表，到这里又是时间换空间了。<br><br>而对于老师说的，mmu无法映射物理地址时，有几种原因<br>1.访问了受内核保护的页面，或者访问了只读的页面（比如c语言中存储字符串字面量和const变量的段），此时内核会抛出段错误<br>2.页面和页框没有产生映射关系，但是数据页已经被其他进程加载到内存中了，此时只需要建立页面和页框的映射关系，称为次级缺页中断<br>3.页面和页框没有产生映射关系，数据页也没有被加载到内存中（在磁盘上），此时需要发生磁盘io从磁盘中加载页到内存中，还需要建立页面和页框的映射关系，称为严重缺页中断。<br>除了第一点，第二第三都会以内核降低自身运行速度来修复，也就是老师说的，通过中断形成页表映射，然后再重新执行引起中断的命令（此时数据页已经在内存中并且建立映射关系了）。<br>","like_count":71,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522471,"discussion_content":"是的，大写6666，太厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624846401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2224641,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f2/01/80521228.jpg","nickname":"郑斌","note":"","ucode":"E253447BAB1E23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414178,"discussion_content":"说的太棒了，讲清楚了我连想都没想过的问题👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636682533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1129610,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","nickname":"test","note":"","ucode":"C57A175CBC6547","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404517,"discussion_content":"看晕了，必须看到实物，说不清楚的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634313004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2780763,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/6e/5b/12a10165.jpg","nickname":"蚂蚁网络科技","note":"","ucode":"79FBD8AB9D738C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399032,"discussion_content":"一个核对应一个tlb吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632891028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2103974,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Sgg5SyF5hDLjS5Xl5vgibNOLMmH7Ybvyf2zhNibwekavWZX6hlxWP53M0zrOCZPDMTznf5rUVqxTO67BicibVPsPibA/132","nickname":"Geek_d43ae9","note":"","ucode":"7491D3B92D0887","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390198,"discussion_content":"请教一些问题哈，1、编译链接以后生成的可执行文件是可以分成.bss段、.data段和text段对吗？2、这些段会分别被分段机制映射到不同的线性地址中去对吗？3、如果是这样的话，不同段之间怎么找到相互间的数据呀？就相当于拆迁以后原来的邻居分了拆迁房，但是不知道分到哪去了，我想根据原来找到邻居该怎么办？非常感谢！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629710895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1606669,"avatar":"https://static001.geekbang.org/account/avatar/00/18/84/0d/4e289b94.jpg","nickname":"三生","note":"","ucode":"1DE1A2693A5E33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2103974,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Sgg5SyF5hDLjS5Xl5vgibNOLMmH7Ybvyf2zhNibwekavWZX6hlxWP53M0zrOCZPDMTznf5rUVqxTO67BicibVPsPibA/132","nickname":"Geek_d43ae9","note":"","ucode":"7491D3B92D0887","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392134,"discussion_content":"程序看到的是连续的虚拟地址（连续地址直接连续访问即可），操作系统屏蔽底层不连续，使用mmu根据页表计算得到真实地址，抽象的妙用！（个人认为分段和分页的本质差不多，只不过粒度和面向的管理不同）","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1630850741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":390198,"ip_address":""},"score":392134,"extra":""}]},{"author":{"id":1473251,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7a/e3/145adba9.jpg","nickname":"不一样的烟火","note":"","ucode":"6E305F0EE90E8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383243,"discussion_content":"凡事皆有代价 方案都有自己的适用场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626009682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294016,"user_name":"宇宙的琴弦","can_delete":false,"product_type":"c1","uid":1657861,"ip_address":"","ucode":"674FC0CB242EDB","user_header":"https://static001.geekbang.org/account/avatar/00/19/4c/05/5cc06ae8.jpg","comment_is_top":true,"comment_ctime":1621679025,"is_pvip":false,"replies":[{"id":"106601","content":"谢谢，希望以我的微薄技术能帮到大家 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621689508,"ip_address":"","comment_id":294016,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720857211003e+18","product_id":100078401,"comment_content":"看同学们的评论，也让人收获不少，喜欢这样的氛围！感谢！","like_count":11,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520466,"discussion_content":"谢谢，希望以我的微薄技术能帮到大家 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621689508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344840,"user_name":"一省吾身","can_delete":false,"product_type":"c1","uid":1676631,"ip_address":"","ucode":"D902357160BBD9","user_header":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","comment_is_top":true,"comment_ctime":1651820215,"is_pvip":true,"replies":[{"id":"125960","content":"嗯嗯 理解的不错<br>","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1652065426,"ip_address":"","comment_id":344840,"utype":1}],"discussion_count":1,"race_medal":2,"score":"9.2233720385066004e+18","product_id":100078401,"comment_content":"信息量爆炸，细节深挖不动,大方向上的个人理解和收获:<br>为什么需要虚拟地址:<br>  实模式中如果运行多道程序有一些问题需要解决:<br>    地址冲突<br>    控制互相访问<br>    代码占用的空间大到物理内存放不下怎么办<br>    不同计算机的容量各不相同,方案如何全部支持<br>  给每个程序一个私有的连续的独立的虚拟的地址空间,和计算机无关,和其它程序无关.<br>  解决思路:<br>    将虚拟地址与物理地址分离,让应用程序从实际的物理内存中解耦出来,增加中间层MMU去做地址转换,对程序透明.<br>MMU:<br>  设计思路:<br>    虚拟地址到物理地址直接做映射,则映射关系大到无法接收,维护成本太高.<br>    虚拟段基址映射到物理段基址,看似可以,但是段长度各不相同,并且粒度可能会很大.<br>    因此把虚拟地址和物理地址空间都分成同等大小的块,按照虚拟页和物理页进行映射和转换,地址转换表中存放虚拟页地址对应的物理页地址即可.<br>  实现思路:<br>    纯硬件实现没有灵活性,用软件实现太低效,因此使用软硬件结合的方式.<br>    用硬件电路逻辑实现地址转换器件,接受虚拟地址和地址关系转换表,输出物理地址.<br>为什么需要多级页表:<br>  每个进程都有自己的页表,多级页表可以省掉大量未映射页表占用的空间,为null则说明后面的页都没有使用.<br>  虚拟地址由虚拟页号和虚拟页号偏移组成,多级页表查找时可以使用索引.<br>  ","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571066,"discussion_content":"嗯嗯 理解的不错\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652065427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293804,"user_name":"blentle","can_delete":false,"product_type":"c1","uid":1064679,"ip_address":"","ucode":"AC092609A4942A","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e7/261711a5.jpg","comment_is_top":false,"comment_ctime":1621562192,"is_pvip":false,"replies":[{"id":"106497","content":"是的 是的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621563538,"ip_address":"","comment_id":293804,"utype":1}],"discussion_count":3,"race_medal":0,"score":"121880646480","product_id":100078401,"comment_content":"多个进程隔离应该是操作系统进行任务切换时会改写CPU的页表基地址寄存器为当前被运行进程的页表基地址吧！","like_count":28,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520372,"discussion_content":"是的 是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621563538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2636690,"avatar":"https://static001.geekbang.org/account/avatar/00/28/3b/92/d018ecbb.jpg","nickname":"yf","note":"","ucode":"4D81F5FD54C7FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383810,"discussion_content":"应该就是CR3吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626243824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2453379,"avatar":"","nickname":"Geek_791a0d","note":"","ucode":"698FABA5B2FF0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382497,"discussion_content":"精辟啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625618283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293922,"user_name":"黎","can_delete":false,"product_type":"c1","uid":1008946,"ip_address":"","ucode":"B2AB6BB4D7FE9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/32/74e47b74.jpg","comment_is_top":false,"comment_ctime":1621609553,"is_pvip":false,"replies":[{"id":"106611","content":"不要着急 等后面的课程出来了 就明白了","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621690733,"ip_address":"","comment_id":293922,"utype":1}],"discussion_count":4,"race_medal":2,"score":"100405857361","product_id":100078401,"comment_content":"一脸懵逼的进来，一头雾水的出去","like_count":23,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520430,"discussion_content":"不要着急 等后面的课程出来了 就明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621690733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1787620,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/46/e4/fe8adf9c.jpg","nickname":"糖果墙","note":"","ucode":"E5CBC2E19A0D58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566451,"discussion_content":"一脸懵逼的进来，一头雾水的出去。第二天又一脸懵逼的进来，一头雾水的出去。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650689604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623117,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c4/4d/85014aab.jpg","nickname":"一叉树","note":"","ucode":"BFC984403ACD1F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547049,"discussion_content":"+=1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642506033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087877,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/85/12a7cc69.jpg","nickname":"Linsto","note":"","ucode":"AE3797AB0521DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538582,"discussion_content":"+=1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639449966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293768,"user_name":"springXu","can_delete":false,"product_type":"c1","uid":2064750,"ip_address":"","ucode":"F5DB0B963C894F","user_header":"","comment_is_top":false,"comment_ctime":1621532692,"is_pvip":true,"replies":[{"id":"106442","content":"你说的对 6666","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621560362,"ip_address":"","comment_id":293768,"utype":1}],"discussion_count":4,"race_medal":0,"score":"40276238356","product_id":100078401,"comment_content":"每一个进程会有不同的页表内容。<br>在32位的windows系统中虚拟地址2g到4g空间都是系统函数调用空间，这部分的对应的物理空间是同一块区域。但低端虚拟内存空间各个进程空间对应的物理地址不相同，所以进程间的页表有部分相同，有部分是不同的。<br>另外32位的xp系统是可以设置成1g的系统内存空间的，也就是进程的私有空间由0到2g的范围变成了0到3g的虚拟空间。与上面的描述又有些变化了。<br>到了64位好像是128T的虚拟内存空间的是进程私有虚拟内存空间。","like_count":9,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520350,"discussion_content":"你说的对 6666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621560362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1302048,"avatar":"https://static001.geekbang.org/account/avatar/00/13/de/20/3a2af905.jpg","nickname":"Servepeople","note":"","ucode":"08DEB51723AF6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385867,"discussion_content":"64位是128T的内核空间和128T用户空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627305342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1302048,"avatar":"https://static001.geekbang.org/account/avatar/00/13/de/20/3a2af905.jpg","nickname":"Servepeople","note":"","ucode":"08DEB51723AF6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385866,"discussion_content":"3g到4g是内核空间吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627305264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064750,"avatar":"","nickname":"springXu","note":"","ucode":"F5DB0B963C894F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375464,"discussion_content":"谢谢东哥的回复和鼓励","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621671337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309478,"user_name":"Geek_9627ff","can_delete":false,"product_type":"c1","uid":2734601,"ip_address":"","ucode":"7AD135BAF4B567","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJBb58PJoR1SEBQEaBTUGLbwyPgBZz4hPQGh0nVWO0BA2Y4bznuuiaYvRpZqoLiaDkmicFjmluhvJXAQ/132","comment_is_top":false,"comment_ctime":1630156149,"is_pvip":false,"replies":[{"id":"112084","content":"写操作系统，有一些硬核的硬件知识必须补补课，加油加油～","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1630160103,"ip_address":"","comment_id":309478,"utype":2}],"discussion_count":1,"race_medal":0,"score":"27399959925","product_id":100078401,"comment_content":"这课也太顶了吧，撒哈拉沙漠都没这课干","like_count":6,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525890,"discussion_content":"写操作系统，有一些硬核的硬件知识必须补补课，加油加油～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630160103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306102,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1628350276,"is_pvip":false,"replies":[{"id":"110843","content":"都 有自己的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1628478278,"ip_address":"","comment_id":306102,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27398154052","product_id":100078401,"comment_content":"有个疑问，现代CPU都是多核的，那么一个4核的CPU是共享一个MMU，还是每个核心都有自己的MMU，有4个MMU呢？","like_count":7,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524628,"discussion_content":"都 有自己的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628478278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2461370,"avatar":"https://static001.geekbang.org/account/avatar/00/25/8e/ba/5f4d8980.jpg","nickname":"随你","note":"","ucode":"9CAE4EF4BF3609","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":538797,"discussion_content":"那  四个MMU管理同一个内存？他们之间有通讯的？否则他们之间怎么做到互不干扰（万一都映射到同一个物理地址去了）？（小白一个 见笑了 嘿嘿）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639525409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":524628,"ip_address":""},"score":538797,"extra":""},{"author":{"id":1228313,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/vQiadbkZYR239J80hjekw7jzY9vy6otLKPNDSuz2lruDiaXlKGkcsX5wwiaFevicgqV8odlRG4UITiadDF3fgicrHPcw/132","nickname":"疯码","note":"","ucode":"7FF11EC80439EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2461370,"avatar":"https://static001.geekbang.org/account/avatar/00/25/8e/ba/5f4d8980.jpg","nickname":"随你","note":"","ucode":"9CAE4EF4BF3609","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545311,"discussion_content":"不需要互不干扰啊，相当于都是纯函数。四个核的mmu，如果都跑这个进程，就都加载这个进程的页表，算出同一个虚拟空间下的地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641901348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":538797,"ip_address":""},"score":545311,"extra":""}]}]},{"had_liked":false,"id":295189,"user_name":"天涯海角","can_delete":false,"product_type":"c1","uid":2640382,"ip_address":"","ucode":"9367E36129824C","user_header":"https://static001.geekbang.org/account/avatar/00/28/49/fe/61e98b15.jpg","comment_is_top":false,"comment_ctime":1622292020,"is_pvip":false,"replies":[{"id":"107283","content":"在后面的课程中都有答案","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622472275,"ip_address":"","comment_id":295189,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18802161204","product_id":100078401,"comment_content":"请教几个问题:<br>1.不同的进程拥有不同的页表，这句怎么理解？如何实现的？页表不是cpu的工作模式确定了，地址转换关系表也就确定了，页表也就确定了的吗？<br><br>2.操作系统控制进程页表是怎么实现的？<br><br>3.链接器生成的虚拟地址与在应用程序运行时使用%p打印的虚拟地址是同一个吗？或者说应用程序发生段错误 知道了地址，可以通过反汇编来定位吗？<br>谢谢","like_count":4,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520979,"discussion_content":"在后面的课程中都有答案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622472275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2312639,"avatar":"https://static001.geekbang.org/account/avatar/00/23/49/bf/4936c58b.jpg","nickname":"吴晨辉","note":"","ucode":"757E98E93AF6A3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548269,"discussion_content":"++\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643106671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2620499,"avatar":"https://static001.geekbang.org/account/avatar/00/27/fc/53/836c87d1.jpg","nickname":"李yong","note":"","ucode":"ECA57ACFE44024","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382889,"discussion_content":"同样的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625756576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294046,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1621718329,"is_pvip":false,"replies":[{"id":"107013","content":"你好。正确 正确","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622094640,"ip_address":"","comment_id":294046,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18801587513","product_id":100078401,"comment_content":"思考题<br>每个程序对应的CR3内容不同，进而映射也不相同，同样的虚拟地址被映射到不同的物理地址。","like_count":4,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520485,"discussion_content":"你好。正确 正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622094640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2300810,"avatar":"https://static001.geekbang.org/account/avatar/00/23/1b/8a/9d276b39.jpg","nickname":"linuxery","note":"","ucode":"728F3CB43825A7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404751,"discussion_content":"那每个进程的cr3又存储在哪里呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634396023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293793,"user_name":"罗 乾 林","can_delete":false,"product_type":"c1","uid":1188222,"ip_address":"","ucode":"D0406F95176ABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/7e/fb725950.jpg","comment_is_top":false,"comment_ctime":1621559245,"is_pvip":false,"replies":[{"id":"106436","content":"你好 ，不同的进程 有不同的页表","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621559994,"ip_address":"","comment_id":293793,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18801428429","product_id":100078401,"comment_content":"不同进程分配不同的pid，相同的虚拟地址将被映射到不同的物理地址上","like_count":4,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520364,"discussion_content":"你好 ，不同的进程 有不同的页表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621559994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293775,"user_name":"尼欧","can_delete":false,"product_type":"c1","uid":1260883,"ip_address":"","ucode":"39D4D1F5F51764","user_header":"https://static001.geekbang.org/account/avatar/00/13/3d/53/9d8a1207.jpg","comment_is_top":false,"comment_ctime":1621552041,"is_pvip":false,"replies":[{"id":"106429","content":"加油。锲而不舍，金石可镂。","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1621558696,"ip_address":"","comment_id":293775,"utype":2}],"discussion_count":1,"race_medal":0,"score":"18801421225","product_id":100078401,"comment_content":"打卡","like_count":4,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520354,"discussion_content":"加油。锲而不舍，金石可镂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621558696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310790,"user_name":"三生","can_delete":false,"product_type":"c1","uid":1606669,"ip_address":"","ucode":"1DE1A2693A5E33","user_header":"https://static001.geekbang.org/account/avatar/00/18/84/0d/4e289b94.jpg","comment_is_top":false,"comment_ctime":1630912119,"is_pvip":false,"replies":[{"id":"112672","content":"是的，你理解的很正确","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1630974852,"ip_address":"","comment_id":310790,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14515814007","product_id":100078401,"comment_content":"分段的平坦模式，就是将段基地址设置为0然后直接加上偏移地址，0 + 段内偏移=线性地址=逻辑地址，分段机制等于没有使用（检查等还是使用的），而是直接使用了分页","like_count":3,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526353,"discussion_content":"是的，你理解的很正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630974852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330307,"user_name":"疯码","can_delete":false,"product_type":"c1","uid":1228313,"ip_address":"","ucode":"7FF11EC80439EA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/vQiadbkZYR239J80hjekw7jzY9vy6otLKPNDSuz2lruDiaXlKGkcsX5wwiaFevicgqV8odlRG4UITiadDF3fgicrHPcw/132","comment_is_top":false,"comment_ctime":1641901639,"is_pvip":false,"replies":[{"id":"120366","content":"地址是从0开始计算的","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1641951540,"ip_address":"","comment_id":330307,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10231836231","product_id":100078401,"comment_content":"“首先来看看保护模式下的分页，保护模式下只有 32 位地址空间，最多 4GB-1 大小的空间。”<br>为什么是4GB减去1呢，减去1的意思是0地址有硬性规定不能用么","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545404,"discussion_content":"地址是从0开始计算的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641951540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316573,"user_name":"linuxery","can_delete":false,"product_type":"c1","uid":2300810,"ip_address":"","ucode":"728F3CB43825A7","user_header":"https://static001.geekbang.org/account/avatar/00/23/1b/8a/9d276b39.jpg","comment_is_top":false,"comment_ctime":1634397470,"is_pvip":true,"replies":[{"id":"114654","content":"CPU模式转换我在硬件部分说了  机器引导我用GRUB 所以没有细节","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1634520123,"ip_address":"","comment_id":316573,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10224332062","product_id":100078401,"comment_content":"任务切换的时候，也就是调度的时候是不会切换cr3控制器里面的gdt的，切换的应该是ldt里面的。<br>再者，系统上电后先bios自检，自检完成后bios将跳到os引导区，一般是：0x7c00，当然，bios需要根据设置去逐个寻找引导驱动器，说白了就是cdrom，硬盘啊这些，一般磁盘的引导都在7c00，然后开始执行os引导程序，引导程序一般在磁盘上0磁道，0磁头，1扇区，一般大小为512字节，并以0x55AA结束。这里还需要考虑实模式向保护模式的转换，也就是注备必要的gdt，并让gdtr指向gdt。<br>这些老师好像没涉及，而用后面的grub来代替完成了。这是我在大学(2002年）写第一版os时候需要考虑的，时间久了，有些不准确，见谅。有些不对，请不吝指教。谢谢！！","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528417,"discussion_content":"CPU模式转换我在硬件部分说了  机器引导我用GRUB 所以没有细节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634520123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317282,"user_name":"安安","can_delete":false,"product_type":"c1","uid":2814664,"ip_address":"","ucode":"C5FEF6720A3C6C","user_header":"https://static001.geekbang.org/account/avatar/00/2a/f2/c8/e236fe0f.jpg","comment_is_top":false,"comment_ctime":1634731897,"is_pvip":false,"replies":[{"id":"115369","content":"那就补充一下再来学习","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1635211957,"ip_address":"","comment_id":317282,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5929699193","product_id":100078401,"comment_content":"这节干货满满的，简直太干了，有些消化不了，得补充一下水分，再继续学😜😜","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528748,"discussion_content":"那就补充一下再来学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635211957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301499,"user_name":"Manfestain","can_delete":false,"product_type":"c1","uid":2066081,"ip_address":"","ucode":"66DC6802F502E6","user_header":"https://static001.geekbang.org/account/avatar/00/1f/86/a1/1e474eb9.jpg","comment_is_top":false,"comment_ctime":1625719613,"is_pvip":false,"replies":[{"id":"109186","content":"MMU啊","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1625802308,"ip_address":"","comment_id":301499,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5920686909","product_id":100078401,"comment_content":"连接器每次分配虚拟地址时都是从1开始，那每个进程的虚拟地址应该是相同的吧，按照虚拟地址被分为四个短，逐段索引找到最终的物理地址，那所有程序找到的物理地址应该也一样了，是不是还有什么东西控制每个虚拟地址中的页，这样不同的进程才会拥有自己的内存空间","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523014,"discussion_content":"MMU啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625802308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300186,"user_name":"Geek_2378fa","can_delete":false,"product_type":"c1","uid":2658502,"ip_address":"","ucode":"C1C57543898D40","user_header":"","comment_is_top":false,"comment_ctime":1625039440,"is_pvip":false,"replies":[{"id":"108852","content":"应该还好吧","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1625103953,"ip_address":"","comment_id":300186,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5920006736","product_id":100078401,"comment_content":"虽然有点开始吃力了，但读下来挺让人兴奋的","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522671,"discussion_content":"应该还好吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625103953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297598,"user_name":"Geek_e2256b","can_delete":false,"product_type":"c1","uid":2629442,"ip_address":"","ucode":"5E4236A625E3AE","user_header":"","comment_is_top":false,"comment_ctime":1623660498,"is_pvip":false,"replies":[{"id":"108055","content":"嗯嗯  理解不错","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623722490,"ip_address":"","comment_id":297598,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5918627794","product_id":100078401,"comment_content":"我的理解就是多级页表，从第一个跳到最后一个<br>最后的页内偏移对应了我们所说的4KB&#47;2MB&#47;4MB页表<br>可以配合《深入理解计算机系统》第9章以及youtube上老师的讲解进行观看","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521873,"discussion_content":"嗯嗯  理解不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623722490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297082,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1623303293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5918270589","product_id":100078401,"comment_content":"MMU 页表的数据结构好像跳表","like_count":1},{"had_liked":false,"id":296801,"user_name":"tang_ming_wu","can_delete":false,"product_type":"c1","uid":2566054,"ip_address":"","ucode":"98E5847CEF8B84","user_header":"https://static001.geekbang.org/account/avatar/00/27/27/a6/32e9479b.jpg","comment_is_top":false,"comment_ctime":1623164715,"is_pvip":false,"replies":[{"id":"107826","content":"加油，循序渐进，你可以跟上的～","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1623211931,"ip_address":"","comment_id":296801,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5918132011","product_id":100078401,"comment_content":"虽迟但到，学习让每天看到不一样的自己","like_count":1,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521587,"discussion_content":"加油，循序渐进，你可以跟上的～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623211931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294841,"user_name":"威","can_delete":false,"product_type":"c1","uid":1015519,"ip_address":"","ucode":"3736C74C69C17F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/df/145a51e5.jpg","comment_is_top":false,"comment_ctime":1622108270,"is_pvip":true,"replies":[{"id":"107312","content":"是的 是的 谢谢","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622473685,"ip_address":"","comment_id":294841,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5917075566","product_id":100078401,"comment_content":"”需要注意的是，虚拟地址 48 到 63 这 6 位是根据第 47 位来决定的“。<br>应该是 16 位吧。","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520836,"discussion_content":"是的 是的 谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622473685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294623,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1622021704,"is_pvip":false,"replies":[{"id":"106919","content":"因为cpu总是以多个字节的块为单位访问内存的，不与它的访问块地址边界对齐cpu就要多次访问","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622035342,"ip_address":"","comment_id":294623,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5916989000","product_id":100078401,"comment_content":"请问老师， 文中所讲的“对齐”这个概念该怎么理解呢， 没有想象出来 = =","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520740,"discussion_content":"因为cpu总是以多个字节的块为单位访问内存的，不与它的访问块地址边界对齐cpu就要多次访问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622035342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294279,"user_name":"东风第一枝","can_delete":false,"product_type":"c1","uid":1402697,"ip_address":"","ucode":"0CD0F62E90DAD8","user_header":"https://static001.geekbang.org/account/avatar/00/15/67/49/864dba17.jpg","comment_is_top":false,"comment_ctime":1621861125,"is_pvip":false,"replies":[{"id":"106811","content":"加油，后面更精彩～","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1621908088,"ip_address":"","comment_id":294279,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5916828421","product_id":100078401,"comment_content":"打卡，看了几遍，收货颇丰。👍","like_count":1,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520585,"discussion_content":"加油，后面更精彩～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621908088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294047,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1621718491,"is_pvip":false,"replies":[{"id":"107012","content":"我不看好RUST写内核，写OS的语言必须要是静态的，可预知的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622094614,"ip_address":"","comment_id":294047,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5916685787","product_id":100078401,"comment_content":"请问LMOS老师，现在网上有不少关于用Rust代替C&#47;C++去重写操作系统的说法，认为Rust语言更现代，有更好的安全性，并能同时取得较高的效率，你是如何看待这个观点？","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520486,"discussion_content":"我不看好RUST写内核，写OS的语言必须要是静态的，可预知的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622094614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294039,"user_name":"Json","can_delete":false,"product_type":"c1","uid":2035271,"ip_address":"","ucode":"2C28E0CBEB2FBC","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0e/47/cb39bcb1.jpg","comment_is_top":false,"comment_ctime":1621699198,"is_pvip":false,"replies":[{"id":"107015","content":"我们可以 私下 讨论   不要想着干坏事哦  哈哈","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622094731,"ip_address":"","comment_id":294039,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5916666494","product_id":100078401,"comment_content":"老师，外挂程序进程是怎么读取游戏进程的数据的？","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520480,"discussion_content":"我们可以 私下 讨论   不要想着干坏事哦  哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622094731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1647266,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe00c7whq5qBFso0JUzHuscxjFhnqpZuXDA1BA97DXl4wDgV2VnXSEI2fcB9NLc7jdibA1AGBRffQ/132","nickname":"Geek_0e0578","note":"","ucode":"D5CB330047CA2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375998,"discussion_content":"Linux里面提供1个ptrace可以做类似的事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621921649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043475,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","nickname":"neohope","note":"","ucode":"C0268F6E7E2B6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375658,"discussion_content":"用不到这么麻烦，Windows下用钩子就行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621787361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293957,"user_name":"昆仔不孤独","can_delete":false,"product_type":"c1","uid":1000859,"ip_address":"","ucode":"AF888A184C4A8E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/9b/c59decbb.jpg","comment_is_top":false,"comment_ctime":1621649829,"is_pvip":false,"replies":[{"id":"106606","content":"编译器 只产生符号 不生成地址 ，只有一个.o文件 也需要链接器 才可以 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621690280,"ip_address":"","comment_id":293957,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5916617125","product_id":100078401,"comment_content":"LMOS 老师，文章里面说虚拟地址是连接器产生的，这里我有点疑惑，同一个.o 文件里面的虚拟地址难道不是编译器处理的吗？连接器只是解决不同.o文件里面互相引用的符合和它的地址的绑定，请指点一下","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520446,"discussion_content":"编译器 只产生符号 不生成地址 ，只有一个.o文件 也需要链接器 才可以 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621690280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1647266,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe00c7whq5qBFso0JUzHuscxjFhnqpZuXDA1BA97DXl4wDgV2VnXSEI2fcB9NLc7jdibA1AGBRffQ/132","nickname":"Geek_0e0578","note":"","ucode":"D5CB330047CA2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375993,"discussion_content":".o文件的代码和数据都是从0地址开始排布的，但.o里面的地址并不是最终地址。ELF程序的内存排布是定义在链接脚本里的，各个符号的最终地址是在链接阶段确定的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621919850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1000859,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/45/9b/c59decbb.jpg","nickname":"昆仔不孤独","note":"","ucode":"AF888A184C4A8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1647266,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe00c7whq5qBFso0JUzHuscxjFhnqpZuXDA1BA97DXl4wDgV2VnXSEI2fcB9NLc7jdibA1AGBRffQ/132","nickname":"Geek_0e0578","note":"","ucode":"D5CB330047CA2F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376314,"discussion_content":"多谢老哥指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622078733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375993,"ip_address":""},"score":376314,"extra":""}]}]},{"had_liked":false,"id":353935,"user_name":"Nemesis","can_delete":false,"product_type":"c1","uid":2701892,"ip_address":"湖北","ucode":"6E8A14B22BC5C8","user_header":"https://static001.geekbang.org/account/avatar/00/29/3a/44/50acd44d.jpg","comment_is_top":false,"comment_ctime":1659937816,"is_pvip":false,"replies":[{"id":"128902","content":"长模式 分段 每段都是0到MAX_ADDR 这是没办法对地址空间进行隔离保护的","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1660319144,"ip_address":"湖北","comment_id":353935,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1659937816","product_id":100078401,"comment_content":"请问LMOS老师，因为长模式下的分段弱化了地址空间的隔离，所以开启 MMU 是必须要做的，开启 MMU 才能访问内存地址空间。这个长模式下的分段弱化了地址空间的隔离如何理解？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583739,"discussion_content":"长模式 分段 每段都是0到MAX_ADDR 这是没办法对地址空间进行隔离保护的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1660319144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350636,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1657070688,"is_pvip":false,"replies":[{"id":"128051","content":"是的 ","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1658390093,"ip_address":"","comment_id":350636,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1657070688","product_id":100078401,"comment_content":"看似多级页表比单级页表占用空间更大，但是多级页表结合局部性原理，外加缺页提醒，这样就没必要把多级页表的所有页表都加载进内存，从而节省空间","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580844,"discussion_content":"是的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658390093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347203,"user_name":"梦江","can_delete":false,"product_type":"c1","uid":2059155,"ip_address":"","ucode":"B5FD2835863460","user_header":"https://static001.geekbang.org/account/avatar/00/1f/6b/93/bfda2d1c.jpg","comment_is_top":false,"comment_ctime":1653814962,"is_pvip":false,"replies":[{"id":"126880","content":"因为每个进程都需要独立的地址空间  有时也需要映射到同一个物理页面 实现内存共享","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1654912067,"ip_address":"","comment_id":347203,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653814962","product_id":100078401,"comment_content":"老师 可以解答下吗 <br><br>为什么每个进程都需要自己的页表<br>，如果多个进程映射到同一个物理页 ，不会有冲突吗","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575519,"discussion_content":"因为每个进程都需要独立的地址空间  有时也需要映射到同一个物理页面 实现内存共享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654912068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345114,"user_name":"吃饭睡觉打酱油","can_delete":false,"product_type":"c1","uid":1071668,"ip_address":"","ucode":"95EC98C2B5045B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5a/34/4cbadca6.jpg","comment_is_top":false,"comment_ctime":1652057701,"is_pvip":false,"replies":[{"id":"125954","content":"当然 是操作系统内核","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1652064590,"ip_address":"","comment_id":345114,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652057701","product_id":100078401,"comment_content":"每个程序都有一个地址转换表，那谁生成的这个地址转换表呢，怎么保障各个地址转换表里面的物理地址不会发生冲突呢？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571058,"discussion_content":"当然 是操作系统内核","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652064591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344822,"user_name":"一省吾身","can_delete":false,"product_type":"c1","uid":1676631,"ip_address":"","ucode":"D902357160BBD9","user_header":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","comment_is_top":false,"comment_ctime":1651807514,"is_pvip":true,"replies":[{"id":"125962","content":"是的 有这些收获就不错了","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1652065488,"ip_address":"","comment_id":344822,"utype":1}],"discussion_count":2,"race_medal":2,"score":"1651807514","product_id":100078401,"comment_content":"细节太多,之前没有接触过比较难以理解,先抓大的,三种模式出现的原因和解决的问题,后续用到再回来深挖细节.<br>本节收获:<br>实模式(16位处理能力+20位地址线---&gt;1MB)<br>  早期cpu是为了支持单道程序而实现的,单道程序可以掌控所有的计算资源.<br>  并且早期软件规模不大,内存资源很少,仅支持16位地址空间,分段的内存模型.<br>  对指令不加限制地允许,对内存没有保护隔离作用<br>保护模式(32位处理能力)<br>  多道程序的出现,内存需求量不断增加,需要操作系统来协调.<br>  保护模式包含特权级,对指令以及访问的资源进行控制---&gt;段与段之间的访问和中断的响应  <br>长模式(64位处理能力)<br>  弱化段化模式管理,忽略段基址和段长度.<br>  保留权限级别的检查,地址检查交给MMU.<br>为什么长模式弱化分段:<br>  分段是将用户程序地址空间分成若干个大小不等的段,能反映程序的逻辑结构，便于段的共享与保护.<br>  分页是将用户程序的地址空间被划分成若干固定大小的区域,能有效地提高内存的利用率.<br>  分段和分页的区别在于粒度更细了,让程序的换入换出可以以页为单位了.","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571068,"discussion_content":"是的 有这些收获就不错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652065489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676631,"avatar":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","nickname":"一省吾身","note":"","ucode":"D902357160BBD9","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570564,"discussion_content":"把05的总结写到06了 尴尬😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651820451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341330,"user_name":"自主","can_delete":false,"product_type":"c1","uid":1074940,"ip_address":"","ucode":"E66649583EE7C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/fc/11c7eb80.jpg","comment_is_top":false,"comment_ctime":1649524358,"is_pvip":false,"replies":[{"id":"125079","content":"是地址信号 不需要储存","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1650249521,"ip_address":"","comment_id":341330,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649524358","product_id":100078401,"comment_content":"我想问一句，地址就像电话号码一样，但是物理地址和虚拟地址总需要一个像电话本一样的存储介质吧，物理地址和虚拟地址实际存储在内存中吗？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564454,"discussion_content":"是地址信号 不需要储存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650249521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339873,"user_name":"艾恩凝","can_delete":false,"product_type":"c1","uid":2950704,"ip_address":"","ucode":"F2B81BF4F0106A","user_header":"https://static001.geekbang.org/account/avatar/00/2d/06/30/c26ea06a.jpg","comment_is_top":false,"comment_ctime":1648445653,"is_pvip":false,"replies":[{"id":"124367","content":"空闲","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1648606013,"ip_address":"","comment_id":339873,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648445653","product_id":100078401,"comment_content":"还有一个问题，长模式下2mb分页，分三级，最后是物理分页，前面三级每个512 这样最后是2的15次方，2mb是2的21次方，最后映射的物理内存实际大于4GB，保护模式下的两种还有长模式的4kb都能对应，长模式2mb下 ，有些目录项是有空闲？还是都会用到但是会映射到相同的物理地址","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559085,"discussion_content":"空闲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648606013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339867,"user_name":"艾恩凝","can_delete":false,"product_type":"c1","uid":2950704,"ip_address":"","ucode":"F2B81BF4F0106A","user_header":"https://static001.geekbang.org/account/avatar/00/2d/06/30/c26ea06a.jpg","comment_is_top":false,"comment_ctime":1648443037,"is_pvip":false,"replies":[{"id":"124369","content":"是的 你的理解是对的","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1648606046,"ip_address":"","comment_id":339867,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648443037","product_id":100078401,"comment_content":"明白了原理，啃透了，都是纸老虎<br>目前不理解为什么内存分页不是连续的，不连续的话，是如何分配这个页，我理解的是页与页之间是不一定连续的，比如页内4MB大小来说物理地址是连续的，页应该是内存分配的最小单位，一个物理页内的地址是连续的<br>老师能帮忙解答一下吗<br>","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559087,"discussion_content":"是的 你的理解是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648606046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339066,"user_name":"Qfeng","can_delete":false,"product_type":"c1","uid":1466121,"ip_address":"","ucode":"1248E70012BBA2","user_header":"https://static001.geekbang.org/account/avatar/00/16/5f/09/2ec44412.jpg","comment_is_top":false,"comment_ctime":1647877809,"is_pvip":false,"replies":[{"id":"124073","content":"很好","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1648089730,"ip_address":"","comment_id":339066,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647877809","product_id":100078401,"comment_content":"6点收获：<br>1. 多道程序间的地址空间隔离采用虚拟地址实现，对每个进程而言，看到的都是完整大小的地址空间；<br>2. 程序的运行最终是要在真实的硬件内存上运行，所以需要将虚拟地址转换到物理地址；<br>3. 虚拟地址转换物理地址要两个条件：一是硬件MMU功能开启；二是软件事先准备好并且高速缓存的TLB表。MMU接受虚拟地址和TLB表，通过页表结构查表找到最终的物理地址。<br>4. 物理页最小颗粒度：32位CPU有4KB和4MB两种；64位CPU有4KB和2MB两种。<br>5. 每个进程有其对应的TLB表，进程间切换时，CR0寄存器加载目标进程的TLB表，完成地址的切换；从而达到地址空间隔离的目的。<br>6. 当异常访问发生时（比如不同进程间地址非法访问等），MMU会进行拦截。<br><br>以上，谢谢。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558089,"discussion_content":"很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648089730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339002,"user_name":"BruceLi","can_delete":false,"product_type":"c1","uid":2441083,"ip_address":"","ucode":"ABBE2033DF9790","user_header":"https://static001.geekbang.org/account/avatar/00/25/3f/7b/ba507e92.jpg","comment_is_top":false,"comment_ctime":1647854636,"is_pvip":false,"replies":[{"id":"124074","content":"服务器cpu不是了","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1648089772,"ip_address":"","comment_id":339002,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647854636","product_id":100078401,"comment_content":"“这种最高有效位填充的方式，即使后面扩展 CPU 的地址总线也不会有任何影响”<br>是不是理解为即使将来CPU的地址总线扩展为64位，虚拟地址 48 到 63位还依然是填充状态？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558090,"discussion_content":"服务器cpu不是了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648089772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338788,"user_name":"MiXiGe","can_delete":false,"product_type":"c1","uid":2864429,"ip_address":"","ucode":"A06DACB650EE6B","user_header":"https://static001.geekbang.org/account/avatar/00/2b/b5/2d/9d78f1b0.jpg","comment_is_top":false,"comment_ctime":1647741808,"is_pvip":false,"replies":[{"id":"123874","content":"SDM","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1647829850,"ip_address":"","comment_id":338788,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647741808","product_id":100078401,"comment_content":"有没有相关的书籍啊推荐啊","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557467,"discussion_content":"SDM","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647829851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338590,"user_name":"哦","can_delete":false,"product_type":"c1","uid":2944638,"ip_address":"","ucode":"8DC2C012FEFA68","user_header":"https://static001.geekbang.org/account/avatar/00/2c/ee/7e/519b6808.jpg","comment_is_top":false,"comment_ctime":1647584765,"is_pvip":false,"replies":[{"id":"123875","content":"4KB","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1647829897,"ip_address":"","comment_id":338590,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647584765","product_id":100078401,"comment_content":"一个虚拟地址对应一个物理地址 32位 4G个地址 1个地址占4个字节  这个关系表需要16GB空间把 为什么是4GB呢","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557468,"discussion_content":"4KB","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647829898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337067,"user_name":"一个要强的男人","can_delete":false,"product_type":"c1","uid":2930994,"ip_address":"","ucode":"CA2F51B5D37B24","user_header":"https://static001.geekbang.org/account/avatar/00/2c/b9/32/c6177eb3.jpg","comment_is_top":false,"comment_ctime":1646582082,"is_pvip":true,"replies":[{"id":"123377","content":"对 的正确 ","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1646973388,"ip_address":"","comment_id":337067,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646582082","product_id":100078401,"comment_content":"提问：<br>每个进程有自己的不同的页表，当前进程想申请一块内存进行存储数据时，查询页表发现没有对应关系，那么MMU就会发起中断，此时操作系统会从记录可用的内存表中拿到相应的一块物理地址存储到页表中，随后程序继续执行将自己的数据放到相应的内存中去。<br>所以，在不同的进程中即使相同的虚拟地址也会对应为不同的物理内存。页表是一个不断加载的过程，用到才会对应关系（当然可能会有预加载部分机制）。这样理解虚拟地址对进程进行隔离对吗？<br>求解，自己的思考加查询资料得出这样一个结果。不知道对不对。<br>","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555552,"discussion_content":"对 的正确 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646973389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336018,"user_name":"13001236383","can_delete":false,"product_type":"c1","uid":1247035,"ip_address":"","ucode":"5A1213A1B2466D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLx1Jz78aibuoJEWdLTsDhucnVDTvkkeRX2w6ZJWXp0h7Zfe7GM6vKAx3jNhFhJJaElDCicyHpf1e9Q/132","comment_is_top":false,"comment_ctime":1645848957,"is_pvip":false,"replies":[{"id":"123046","content":"有，功能不一样","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1646360497,"ip_address":"","comment_id":336018,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1645848957","product_id":100078401,"comment_content":"老师想请问下在分页模式下还有GDT吗？GDT和页表功能一样么？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554381,"discussion_content":"有，功能不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646360497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1247035,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLx1Jz78aibuoJEWdLTsDhucnVDTvkkeRX2w6ZJWXp0h7Zfe7GM6vKAx3jNhFhJJaElDCicyHpf1e9Q/132","nickname":"13001236383","note":"","ucode":"5A1213A1B2466D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":554388,"discussion_content":"多谢回复，那这时候GDT和MMU哪个是负责虚拟地址到物理地址转换的了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646362039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":554381,"ip_address":""},"score":554388,"extra":""}]}]},{"had_liked":false,"id":334986,"user_name":"Geek_946b78","can_delete":false,"product_type":"c1","uid":2917506,"ip_address":"","ucode":"834EC0DC719A76","user_header":"","comment_is_top":false,"comment_ctime":1645240164,"is_pvip":false,"replies":[{"id":"122383","content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1645350758,"ip_address":"","comment_id":334986,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645240164","product_id":100078401,"comment_content":"老师好 我自己的理解是 进程切换就是切换虚拟制空间的过程 在进程切换时 我们要把相应进程task_struct-&gt;mm-&gt;pgd装载到相应cpu核的cr3控制寄存器中来达到切换虚拟地址空间的目的 但是这样会导致该核心tlb缓存的页表项目失效以及该cpu核的l1 l2cache失效 这样理解对吗","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552218,"discussion_content":"是的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645350758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333388,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1644322810,"is_pvip":false,"replies":[{"id":"121857","content":"你也是","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1644378722,"ip_address":"","comment_id":333388,"utype":1}],"discussion_count":1,"race_medal":4,"score":"1644322810","product_id":100078401,"comment_content":"评论区都是牛人","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550084,"discussion_content":"你也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644378722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332310,"user_name":"evan","can_delete":false,"product_type":"c1","uid":2052287,"ip_address":"","ucode":"BCF77FD6AC8651","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/FflZ2nuJwJxMvHGMZVChjejqNjxC75jXIjy7OKNnksRGo7ebT269ZHHTGwaHIEHPHUXVSCWyMWqE2caicvAxgag/132","comment_is_top":false,"comment_ctime":1643168546,"is_pvip":false,"replies":[{"id":"121792","content":"假如不使用这种方式 后面地址扩充就会导致兼容性问题","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1644287166,"ip_address":"","comment_id":332310,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643168546","product_id":100078401,"comment_content":"请教一下老师，最高有效位填充的方式，即使后面扩展CPU的地址总线也不会有任何影响？<br>假如不使用这种填充方式，会有哪些影响？为什么使用了就不会有影响？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549880,"discussion_content":"假如不使用这种方式 后面地址扩充就会导致兼容性问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644287166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331206,"user_name":"榕","can_delete":false,"product_type":"c1","uid":1053178,"ip_address":"","ucode":"4611A40E21ECEB","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/fa/e0dcc1bf.jpg","comment_is_top":false,"comment_ctime":1642484725,"is_pvip":false,"replies":[{"id":"121013","content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1642495689,"ip_address":"","comment_id":331206,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1642484725","product_id":100078401,"comment_content":"如果不开启 MMU，在保护模式下可以关闭 MMU，这个线性地址就是物理地址。<br><br>这里说的保护模式只针对非平坦模式，平坦模式还是必须开启MMU的是吧","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547013,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642495689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1053178,"avatar":"https://static001.geekbang.org/account/avatar/00/10/11/fa/e0dcc1bf.jpg","nickname":"榕","note":"","ucode":"4611A40E21ECEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":547050,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642507470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547013,"ip_address":""},"score":547050,"extra":""}]}]},{"had_liked":false,"id":331194,"user_name":"榕","can_delete":false,"product_type":"c1","uid":1053178,"ip_address":"","ucode":"4611A40E21ECEB","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/fa/e0dcc1bf.jpg","comment_is_top":false,"comment_ctime":1642480744,"is_pvip":false,"replies":[{"id":"121014","content":"那就不能使用平坦模式","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1642495734,"ip_address":"","comment_id":331194,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642480744","product_id":100078401,"comment_content":"如果不开启 MMU，在保护模式下可以关闭 MMU，这个线性地址就是物理地址。<br><br>老师，对这里有个疑惑:保护模式下关闭MMU，虚拟地址=线性地址=物理地址，那不同进程内存空间怎么隔离？谢谢","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547014,"discussion_content":"那就不能使用平坦模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642495734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329961,"user_name":"蚂蚁网络科技","can_delete":false,"product_type":"c1","uid":2780763,"ip_address":"","ucode":"79FBD8AB9D738C","user_header":"https://static001.geekbang.org/account/avatar/00/2a/6e/5b/12a10165.jpg","comment_is_top":false,"comment_ctime":1641701379,"is_pvip":false,"replies":[{"id":"120229","content":"页表 ","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1641779232,"ip_address":"","comment_id":329961,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641701379","product_id":100078401,"comment_content":"相同的虚拟地址是如何控制访问到不同的物理地 址的，这块还是不明白,<br>假如p=f(v)，这是虚拟地址转换换物理地址转换函数，这还与哪些因子有关系？是不是与过程ID 还有关系？<br>那这个函数就么表示就错了，是不是有p= f(v,a1,a2...)之类的呢？<br>","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544908,"discussion_content":"页表 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641779232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328916,"user_name":"englefly","can_delete":false,"product_type":"c1","uid":1145907,"ip_address":"","ucode":"E3FCF19E618718","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep2gRIticwS6CiatsCiaU4QRjAODKibQevrhSciatrmd90lNIZFxywE9yyZgAxKTmWiaBSH4zZUcRIV46qQ/132","comment_is_top":false,"comment_ctime":1640935254,"is_pvip":false,"replies":[{"id":"120033","content":"mmu虽然在cpu内核中 但是独立cpu工作的 查表过程是mmu自动完成的不需要软件参与的","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1641434886,"ip_address":"","comment_id":328916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640935254","product_id":100078401,"comment_content":"老师，请问MMU在查表的过程中怎么体现了硬件能力呢？比如没有MMU，那么查表的过程就是把内存中某个条目的数据读入到寄存器中，使用MMU为什么比读入寄存器快呢？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544172,"discussion_content":"mmu虽然在cpu内核中 但是独立cpu工作的 查表过程是mmu自动完成的不需要软件参与的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641434886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324436,"user_name":"enson","can_delete":false,"product_type":"c1","uid":1465629,"ip_address":"","ucode":"646EEC7F63B5B1","user_header":"","comment_is_top":false,"comment_ctime":1638434258,"is_pvip":false,"replies":[{"id":"117765","content":"所有进程的内核地址空间是相同的","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1638501001,"ip_address":"","comment_id":324436,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638434258","product_id":100078401,"comment_content":"每个用户态进程都有一个自己的页表，页表地址保存在进程描述符的一个字段中，在进程切换时，会用这个字段更像CR3寄存器。<br>想问下，内核态的进程是不是都共用一个内核页表？这个属于内核的页表独立于所有用户态进程页表吧？当系统调用从用户态进入内核态的时候会用内核页表更新CR3？如果在用户态发生中断会更新CR3吗","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535637,"discussion_content":"所有进程的内核地址空间是相同的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638501001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323936,"user_name":"Eason","can_delete":false,"product_type":"c1","uid":2857051,"ip_address":"","ucode":"9C5746F64FB1A2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/HO3KVBk8wePF8BYoTibKSlnxRzWD0PaF0s0eG0ns9QegiaEfibp6YUuEopSIwpg4RJFGBBgXeJeC9QQS54giakiaNxA/132","comment_is_top":false,"comment_ctime":1638234720,"is_pvip":false,"replies":[{"id":"117542","content":"滴，打卡成功，下节更精彩","user_name":"编辑回复","user_name_real":"编辑","uid":"1501385","ctime":1638237112,"ip_address":"","comment_id":323936,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1638234720","product_id":100078401,"comment_content":"打卡爆炸","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534588,"discussion_content":"滴，打卡成功，下节更精彩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638237112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323266,"user_name":"树心","can_delete":false,"product_type":"c1","uid":1589523,"ip_address":"","ucode":"6C329F0FF798B9","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","comment_is_top":false,"comment_ctime":1637806899,"is_pvip":true,"replies":[{"id":"117353","content":"66666","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1637917020,"ip_address":"","comment_id":323266,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1637806899","product_id":100078401,"comment_content":"小结<br>06 | 虚幻与真实：程序中的地址如何转换？<br>从一个多程序并发的场景说起<br>虚拟地址<br>物理地址<br>虚拟地址到物理地址的转换<br>MMU<br>MMU 页表<br>保护模式下的分页<br>1. 保护模式下的分页——4KB 页<br>2. 保护模式下的分页——4MB 页<br>长模式下的分页<br>1. 长模式下的分页——4KB 页<br>2. 长模式下的分页——2MB 页<br>开启 MMU<br>MMU 地址转换失败<br><br>很多之前耳熟能详的概念：MMU、分页都从原理上理解了含义，为什么会产生这些概念，老师讲得很好，能把脉络梳理清晰。<br><br>信息留存：<br>1. 评论区很多高质量评论可以参考<br>2. 不同的进程 有不同的页表<br>3. 参考资料：配合《深入理解计算机系统》第9章以及youtube上老师的讲解进行观看<br>4. 关于对齐：因为cpu总是以多个字节的块为单位访问内存的，不与它的访问块地址边界对齐cpu就要多次访问","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533619,"discussion_content":"66666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637917020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321418,"user_name":"旅者","can_delete":false,"product_type":"c1","uid":1120855,"ip_address":"","ucode":"9CE8BB0FB8F7B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/57/8bfe7f5a.jpg","comment_is_top":false,"comment_ctime":1636861664,"is_pvip":false,"replies":[{"id":"116761","content":"哈哈","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1636940607,"ip_address":"","comment_id":321418,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636861664","product_id":100078401,"comment_content":"信息量很大，只是记不住罢了","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530289,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636940607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320823,"user_name":"学习者","can_delete":false,"product_type":"c1","uid":1017684,"ip_address":"","ucode":"3BF2B29656C1CF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/54/727379d8.jpg","comment_is_top":false,"comment_ctime":1636522698,"is_pvip":false,"replies":[{"id":"116444","content":"总结 的 很好","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1636597710,"ip_address":"","comment_id":320823,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636522698","product_id":100078401,"comment_content":"一、虚拟地址与物理地址：<br>为什么需要虚拟地址？在实模式下是没有虚拟地址的，操作的是真实的物理地址，但是在多用户并发的场景下，直接用真实地址存在一些问题：<br>1.如何保证程序间没有内存地址的冲突？<br>2.程序越来越大，内存可能装不下，怎么解决内存容量问题？<br>为了解决以上问题，引入了虚拟地址，让所有的程序都各自享有一个从 0 开始到最大地址的空间，地址空间是独立的，是程序私有的，由MMU在运行时将虚拟地址转换成真实的物理地址。<br>二、虚拟地址到物理地址的转换<br>地址转换的关键部件是MMU，它可以接收地址转换关系表作为输入，地址转换关系表是存放在物理内存当中的。<br>地址转换关系表是这样的：把虚拟地址空间和物理地址空间都分成同等大小的块，也称为页，按照虚拟页和物理页进行转换。根据软件配置不同，这个页的大小可以设置为 4KB、2MB、4MB、1GB，这就是分页模型。<br>地址关系转换表，也叫做页表。页表中并不存放虚拟地址和物理地址的对应关系，只存放物理页面的地址，MMU 以虚拟地址为索引去查表返回物理页面地址，而且页表是分级的，总体分为三个部分：一个顶级页目录，多个中级页目录，最后才是页表。页表由操作系统管理，不同的进程拥有不同的页表，也因此产生了进程地址空间隔离，多个进程也可以共享某个页表。<br>MMU 怎么以虚拟地址为索引去查表返回物理页面地址呢？是对虚拟地址进行分位段，怎么分位段呢？页的大小可以为 4KB、2MB、4MB、1GB，所以关键点在于对虚拟地址分成的几个位段，最后一个位段的偏移可以寻址到整个页大小。比如最后一个位段，12位则可以寻址4KB，21位可以寻址到2MB，22位可以寻址到4MB。然后再分其他位段。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530130,"discussion_content":"总结 的 很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636597710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319720,"user_name":"echo","can_delete":false,"product_type":"c1","uid":2792613,"ip_address":"","ucode":"A101FA194C7008","user_header":"https://static001.geekbang.org/account/avatar/00/2a/9c/a5/1d6ffcf6.jpg","comment_is_top":false,"comment_ctime":1635921986,"is_pvip":false,"replies":[{"id":"115872","content":"有不同的转换表 你可以映射同一块物理地址  也可以不","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1635930024,"ip_address":"","comment_id":319720,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635921986","product_id":100078401,"comment_content":"有个疑问，如果有2个程序A和B，他们运行时，虚拟地址都是0x0000~0xaaaa(打个比方)，那通过地址转换表（转换表内存里只有唯一的一个）的时候，会不会映射到同一块物理地址。这样不就冲突了吗<br>","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529737,"discussion_content":"有不同的转换表 你可以映射同一块物理地址  也可以不","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635930024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319598,"user_name":"T------T","can_delete":false,"product_type":"c1","uid":2270365,"ip_address":"","ucode":"AC68D88893FAD7","user_header":"https://static001.geekbang.org/account/avatar/00/22/a4/9d/95900f70.jpg","comment_is_top":false,"comment_ctime":1635862373,"is_pvip":true,"replies":[{"id":"115834","content":"你说的对","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1635906790,"ip_address":"","comment_id":319598,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635862373","product_id":100078401,"comment_content":"我的迷惑：只有一个CR3,但却有很多个进程，CR3指向谁的页表？<br><br>CPU使用分时来达到多任务执行的目的。也就是在任一时间点都是只有一个进程在执行的。<br>所以CR3也就特指当前执行进程的页表。当进程切换的时候CR3也会更新。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529683,"discussion_content":"你说的对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635906790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316713,"user_name":"UJoy","can_delete":false,"product_type":"c1","uid":1454709,"ip_address":"","ucode":"4275E5D927B439","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/75/37f1a9b8.jpg","comment_is_top":false,"comment_ctime":1634523491,"is_pvip":false,"replies":[{"id":"114796","content":"通过MMU页表映射到同一个物理内存空间","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1634689366,"ip_address":"","comment_id":316713,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634523491","product_id":100078401,"comment_content":"请教：多个进程使用相同的共享库 比如代码段 如何共享物理内存？ 目前理解到进程维度拥有页表 共享库是被多个进程依赖。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528467,"discussion_content":"通过MMU页表映射到同一个物理内存空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634689366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314714,"user_name":"wait.","can_delete":false,"product_type":"c1","uid":1685234,"ip_address":"","ucode":"640B2E3D09B939","user_header":"https://static001.geekbang.org/account/avatar/00/19/b6/f2/b798d2ea.jpg","comment_is_top":false,"comment_ctime":1633343298,"is_pvip":false,"replies":[{"id":"114270","content":"是的 是的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1633938031,"ip_address":"","comment_id":314714,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633343298","product_id":100078401,"comment_content":"答案是使用虚拟地址。在保护模式下，每个进程独占4GB的内存空间，可以在权限允许的情况下进行任意内存地址的访问，但是这4GB内存空间只是逻辑上的，最终虚拟地址通过MMU和页表转换为物理地址，完成了地址空间上的隔离，保证最后不会存在地址上的冲突。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527770,"discussion_content":"是的 是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633938031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313612,"user_name":"BestWill","can_delete":false,"product_type":"c1","uid":1761533,"ip_address":"","ucode":"BFAAD00FFEA16F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoZ2ib2qeG69ibf1mb9eicfH0sF3MpHbaGtsyp6SVEiaA1F2Ked2RZw0jENTZlicibFr4FJCHvIU5VmWR3g/132","comment_is_top":false,"comment_ctime":1632557382,"is_pvip":false,"replies":[{"id":"113629","content":"有提到吧 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1632706156,"ip_address":"","comment_id":313612,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632557382","product_id":100078401,"comment_content":"页偏移量的作用老师这里没讲呢，这个感觉也很重要，在这里讲解会更好一些","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527410,"discussion_content":"有提到吧 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632706156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312526,"user_name":"霏哥","can_delete":false,"product_type":"c1","uid":1131849,"ip_address":"","ucode":"5CD3156A94246F","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/49/ec15c943.jpg","comment_is_top":false,"comment_ctime":1631849149,"is_pvip":false,"replies":[{"id":"113261","content":"都是 物理地址","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1631926516,"ip_address":"","comment_id":312526,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631849149","product_id":100078401,"comment_content":"一直有一个疑问，就是CR3中存储的页目录地址是物理地址还是虚拟地址？同理页目录中存储的页表地址是物理还是虚拟地址","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526999,"discussion_content":"都是 物理地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631926516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311633,"user_name":"墨中白","can_delete":false,"product_type":"c1","uid":2144757,"ip_address":"","ucode":"356791A632F311","user_header":"https://static001.geekbang.org/account/avatar/00/20/b9/f5/cfeb1094.jpg","comment_is_top":false,"comment_ctime":1631354409,"is_pvip":false,"replies":[{"id":"112959","content":"不是与某一个特性相关，而是与一大堆特性相关。如CPU工作模式 MMU页表 地址总线等","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1631492365,"ip_address":"","comment_id":311633,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631354409","product_id":100078401,"comment_content":"有一个疑问，所有的物理基地址的位数和什么相关","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526688,"discussion_content":"不是与某一个特性相关，而是与一大堆特性相关。如CPU工作模式 MMU页表 地址总线等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631492365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308842,"user_name":"Slience-0°C","can_delete":false,"product_type":"c1","uid":1151612,"ip_address":"","ucode":"B50665EC6A80F5","user_header":"https://static001.geekbang.org/account/avatar/00/11/92/7c/12c571b6.jpg","comment_is_top":false,"comment_ctime":1629820006,"is_pvip":false,"replies":[{"id":"111887","content":"页的大小固定","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1629940412,"ip_address":"","comment_id":308842,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629820006","product_id":100078401,"comment_content":"都是高手，从上学到现在，我一直对页式内存管理，段式内存管理理解不够，不明白啥意思","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525641,"discussion_content":"页的大小固定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629940412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306689,"user_name":"日就月将","can_delete":false,"product_type":"c1","uid":2651148,"ip_address":"","ucode":"0F9BA55A2898FF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/cabLXAUXiavXnEckAgo971o4l1CxP4L9wOV2eUGTyKBUicTib6gJyKV9iatM4GG1scz5Ym17GOzXWQEGzhE31tXUtQ/132","comment_is_top":false,"comment_ctime":1628670878,"is_pvip":false,"replies":[{"id":"111162","content":"不是啊 内核态  也用","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1628824467,"ip_address":"","comment_id":306689,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628670878","product_id":100078401,"comment_content":"虚拟地址只能用于用户态吗，我记得用户态是内存隔离，内核态是内存共享的","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524874,"discussion_content":"不是啊 内核态  也用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628824467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306539,"user_name":"ChenJz","can_delete":false,"product_type":"c1","uid":1003992,"ip_address":"","ucode":"AF2F8D9015BE5D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/d8/71ef5aa1.jpg","comment_is_top":false,"comment_ctime":1628601757,"is_pvip":false,"replies":[{"id":"111026","content":"不知道 你要表达的意思 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1628649433,"ip_address":"","comment_id":306539,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1628601757","product_id":100078401,"comment_content":"有个问题不太理解，比如某条指令在二进制的文件中位置是0x002D6FC8，虚拟地址存放着页表的位置信息和页的偏移信息，那物理内存页怎么知道加载二进制文件 0x002D6FC8的这个位置的数据呢？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524807,"discussion_content":"不知道 你要表达的意思 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628649433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2834114,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3e/c2/bcc7bc81.jpg","nickname":"Geek_2d8206","note":"","ucode":"47FD9D32646951","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411894,"discussion_content":"地址空间不是有代码段嘛？在地址空间的低地址位置，二进制指令执行前这些指令数据会被加载到对应进程的地址空间。感觉你的问题涉及到链接的一些知识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636027601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1993083,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/69/7b/27e63c55.jpg","nickname":"神的孩子在跳舞","note":"","ucode":"B99AC3DFFBEC72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389131,"discussion_content":"内存分段的，有专门的的代码段，运行的时候按顺序取代码指令就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629127457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304537,"user_name":"wenkin","can_delete":false,"product_type":"c1","uid":2226384,"ip_address":"","ucode":"0F9E623B1C4A75","user_header":"https://static001.geekbang.org/account/avatar/00/21/f8/d0/092f04df.jpg","comment_is_top":false,"comment_ctime":1627469659,"is_pvip":false,"replies":[{"id":"110189","content":"是的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1627521083,"ip_address":"","comment_id":304537,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627469659","product_id":100078401,"comment_content":"分页模式下，操作系统对应用程序（这里可以理解为进程）的地址空间进行隔离需要切换到保护模式下的分页模式（防止命令和地址访问冲突，参考保护模式下的特权级CPL，RPL和DPL），每个程序都有自己的由操作系统分配虚拟地址空间，然后根据mmu映射到对应的物理地址或者说根据mmu得到一个自己的页表，从而使得应用程序的地址空间相互隔离。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524077,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627521083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302674,"user_name":"朱永超","can_delete":false,"product_type":"c1","uid":2698174,"ip_address":"","ucode":"8E74394E634EBD","user_header":"https://static001.geekbang.org/account/avatar/00/29/2b/be/9d2e84ec.jpg","comment_is_top":false,"comment_ctime":1626330230,"is_pvip":false,"replies":[{"id":"109541","content":"循序渐进，这里是给大伙补一些必要的硬件知识。有些原理后面实践里还会用上。加油加油，一定可以拿下的。","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1626352213,"ip_address":"","comment_id":302674,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1626330230","product_id":100078401,"comment_content":"想看懂还是需要很强的基础，特别有一些实现细节还是一知半解。希望学完后能柳暗花明","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523382,"discussion_content":"循序渐进，这里是给大伙补一些必要的硬件知识。有些原理后面实践里还会用上。加油加油，一定可以拿下的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626352213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302513,"user_name":"yf","can_delete":false,"product_type":"c1","uid":2636690,"ip_address":"","ucode":"4D81F5FD54C7FC","user_header":"https://static001.geekbang.org/account/avatar/00/28/3b/92/d018ecbb.jpg","comment_is_top":false,"comment_ctime":1626245569,"is_pvip":false,"replies":[{"id":"109518","content":"第一个问题：是一样的，<br>第二个问题：想重叠就重叠，不想重叠就不重叠 ，你修改MMU页表就行了 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1626312900,"ip_address":"","comment_id":302513,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1626245569","product_id":100078401,"comment_content":"像请教老师一个问题，分页时，将虚拟空间核物理空间划分为同等大小的块，这里的虚拟页大小和物理页大小也是一样的吗？那么如果进程太多，会不会出现物理地址空间重叠的情况？   ","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523334,"discussion_content":"第一个问题：是一样的，\n第二个问题：想重叠就重叠，不想重叠就不重叠 ，你修改MMU页表就行了 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626312900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2636690,"avatar":"https://static001.geekbang.org/account/avatar/00/28/3b/92/d018ecbb.jpg","nickname":"yf","note":"","ucode":"4D81F5FD54C7FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384789,"discussion_content":"那请问老师，重叠的话，会不会出现物理地址中的冲突问题？内存会不会出现问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626751457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301985,"user_name":"不一样的烟火","can_delete":false,"product_type":"c1","uid":1473251,"ip_address":"","ucode":"6E305F0EE90E8B","user_header":"https://static001.geekbang.org/account/avatar/00/16/7a/e3/145adba9.jpg","comment_is_top":false,"comment_ctime":1626009520,"is_pvip":false,"replies":[{"id":"109267","content":"是的 是的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1626015671,"ip_address":"","comment_id":301985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626009520","product_id":100078401,"comment_content":"单片机里面的rtos里面地址空间就相当于是一个进程空间，然后里面跑很多线程，线程之间通过全局变量进行同步和通信，就像内核一样，需要将所有的任务一次性编译，好处是硬件简单，坏处是更新不灵活","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523141,"discussion_content":"是的 是的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626015671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301275,"user_name":"Geek_791a0d","can_delete":false,"product_type":"c1","uid":2453379,"ip_address":"","ucode":"698FABA5B2FF0F","user_header":"","comment_is_top":false,"comment_ctime":1625618951,"is_pvip":false,"replies":[{"id":"109098","content":"加油～","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1625622538,"ip_address":"","comment_id":301275,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1625618951","product_id":100078401,"comment_content":"打卡","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522951,"discussion_content":"加油～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625622538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301256,"user_name":"Geek_791a0d","can_delete":false,"product_type":"c1","uid":2453379,"ip_address":"","ucode":"698FABA5B2FF0F","user_header":"","comment_is_top":false,"comment_ctime":1625593189,"is_pvip":false,"replies":[{"id":"109104","content":"哈哈 ，接着往后看就没事子","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1625625564,"ip_address":"","comment_id":301256,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1625593189","product_id":100078401,"comment_content":"唉 每次都是晚上迷茫 一看你的专栏就精神了 但是更迷茫了 哈哈","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522945,"discussion_content":"哈哈 ，接着往后看就没事子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625625564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300538,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1625210430,"is_pvip":false,"replies":[{"id":"108908","content":"是的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1625222327,"ip_address":"","comment_id":300538,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1625210430","product_id":100078401,"comment_content":"地址关系转换表(页表) 存放的是 各级页目录表和页表。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522759,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625222327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297654,"user_name":"Geek_liuxx","can_delete":false,"product_type":"c1","uid":1619442,"ip_address":"","ucode":"30D02000B5EF60","user_header":"https://wx.qlogo.cn/mmopen/vi_32/NiadFVtMlR4R8t1gZSydPgmdHh3YPDWzNoZ30zcZaOAS0vBjiao7SxROSHQtYvnjmacdkWnJJvLibSiamwibH4q44Rw/132","comment_is_top":false,"comment_ctime":1623697301,"is_pvip":false,"replies":[{"id":"108053","content":"申请堆 空间 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623722417,"ip_address":"","comment_id":297654,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1623697301","product_id":100078401,"comment_content":"进程里malloc语句对应的申请空间操作，是向操作系统的内核空间中的堆空间申请吗，会被其他进程共享吗？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521894,"discussion_content":"申请堆 空间 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623722417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1619442,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/NiadFVtMlR4R8t1gZSydPgmdHh3YPDWzNoZ30zcZaOAS0vBjiao7SxROSHQtYvnjmacdkWnJJvLibSiamwibH4q44Rw/132","nickname":"Geek_liuxx","note":"","ucode":"30D02000B5EF60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379247,"discussion_content":"我问得问题不清晰，我想问的是这个new操作所申请的空间是向内核区去申请还是用户区？不太确定堆区栈区是不是在用户区的虚存里～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623769099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1035390,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cc/7e/0d050964.jpg","nickname":"Rootrl","note":"","ucode":"50FE3BBA92D417","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1619442,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/NiadFVtMlR4R8t1gZSydPgmdHh3YPDWzNoZ30zcZaOAS0vBjiao7SxROSHQtYvnjmacdkWnJJvLibSiamwibH4q44Rw/132","nickname":"Geek_liuxx","note":"","ucode":"30D02000B5EF60","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387102,"discussion_content":"这个内核区、用户区、还有堆区、栈区其他代码区啥的，是对每个进程来说的，所以不存在向内核区申请","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627985383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":379247,"ip_address":""},"score":387102,"extra":""}]}]},{"had_liked":false,"id":297565,"user_name":"Feen","can_delete":false,"product_type":"c1","uid":2646145,"ip_address":"","ucode":"E6CDC442B7213F","user_header":"https://static001.geekbang.org/account/avatar/00/28/60/81/38b00111.jpg","comment_is_top":false,"comment_ctime":1623637906,"is_pvip":false,"replies":[{"id":"108059","content":"你好，推荐你了解下傲腾","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623722983,"ip_address":"","comment_id":297565,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623637906","product_id":100078401,"comment_content":"看了3、4遍这一章节的内容，才理解到现代操作系统对应用程序的内存访问方式核心就是各种欺骗（通过虚拟地址+MMU转换），不是实模式那种实打实的有多少物理地址就是多少进程可用地址，所以也因为有了这种可用的欺骗模型，windows的虚拟内存文件和Linux的swap才有了真正实现的根基。所以SSD在出世的时候因为速度比传统机械硬盘更快，所以虚拟内存才有了真正的使用价值，所有固态类型的硬盘速度越快，对程序的内存需求就可以更被无限放大。甚至未来固态的速度接近内存的时候，可能真正的操作系统直接完全加载进内存（内存专归操作系统使用），而由速度飞快的固态类硬盘提供程序需要的空间，提供无限量的容量供应，主板上现在的硬盘接口直接接入CPU内存总线也未尝不可一试。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521856,"discussion_content":"你好，推荐你了解下傲腾","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623722983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297479,"user_name":"对好的就这样","can_delete":false,"product_type":"c1","uid":2556191,"ip_address":"","ucode":"ED2E81C394A669","user_header":"https://static001.geekbang.org/account/avatar/00/27/01/1f/3cb494f8.jpg","comment_is_top":false,"comment_ctime":1623572625,"is_pvip":false,"replies":[{"id":"108066","content":"也可以在OS的控制下  共享内存","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1623723490,"ip_address":"","comment_id":297479,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623572625","product_id":100078401,"comment_content":"不同进程之间不能使用同一个页，进程在自己的虚拟地址上跑，不同进程的虚拟地址被分页由OS统一管理。一个进程在自己的空间里是访问不到别人的，再加上由OS统一管理，页与页之间也相互被隔离。所以不同进程的地址空间是相互独立的。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521835,"discussion_content":"也可以在OS的控制下  共享内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623723490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295686,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1622543269,"is_pvip":false,"replies":[{"id":"107613","content":"确实会的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622989990,"ip_address":"","comment_id":295686,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622543269","product_id":100078401,"comment_content":"MMU增加了转换的灵活性，它的实现方式是硬件执行转换过程，但又依赖于软件提供的地址转换表<br>那两个软件提供的地址转换表有重复不就会导致内存冲突吗","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521181,"discussion_content":"确实会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622989990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295587,"user_name":"磊","can_delete":false,"product_type":"c1","uid":2624931,"ip_address":"","ucode":"5C047DFEAF7F2E","user_header":"https://static001.geekbang.org/account/avatar/00/28/0d/a3/9757c66c.jpg","comment_is_top":false,"comment_ctime":1622503754,"is_pvip":false,"replies":[{"id":"107620","content":"是的 ，你的理解 是对的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622990339,"ip_address":"","comment_id":295587,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1622503754","product_id":100078401,"comment_content":"我理解的是操作系统会给每个进程分配好页表，页表里面的相关物理地址也都会准备好，这样当进程进行虚拟地址转换时，mmu通过这个转换关系表(页表)找到对应的物理地址，那缺页是找不到对应的转换关系吗？不知道理解的对不对","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521140,"discussion_content":"是的 ，你的理解 是对的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622990339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2624931,"avatar":"https://static001.geekbang.org/account/avatar/00/28/0d/a3/9757c66c.jpg","nickname":"磊","note":"","ucode":"5C047DFEAF7F2E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377156,"discussion_content":"系统启动过程中页表的创建过程 https://www.zhihu.com/question/24916947","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622532032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2624931,"avatar":"https://static001.geekbang.org/account/avatar/00/28/0d/a3/9757c66c.jpg","nickname":"磊","note":"","ucode":"5C047DFEAF7F2E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377152,"discussion_content":"看到了linux页表创建与更新 https://blog.csdn.net/zmx1026/article/details/46957611","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622529103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295575,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1622479170,"is_pvip":true,"replies":[{"id":"107621","content":"长模式4KB的分页模式用的最多","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622990389,"ip_address":"","comment_id":295575,"utype":1}],"discussion_count":1,"race_medal":5,"score":"1622479170","product_id":100078401,"comment_content":"讲了这么多种分页模式，请问老师现在各主流的几种操作系统的分页模式都属于哪一种？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521137,"discussion_content":"长模式4KB的分页模式用的最多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622990389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295543,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1622470613,"is_pvip":false,"replies":[{"id":"107316","content":"4kb对齐了  地址 的 低12 位 才会 始终为0 才能另作他用 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622474222,"ip_address":"","comment_id":295543,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622470613","product_id":100078401,"comment_content":"可以看到，页目录项、页表项都是 4 字节 32 位，1024 个项正好是 4KB（一个页），因此它们的地址始终是 4KB 对齐的，所以低 12 位才可以另作它用，<br>问下这里地址对齐和低12位可以另做它用为什么有因果关系？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521122,"discussion_content":"4kb对齐了  地址 的 低12 位 才会 始终为0 才能另作他用 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622474222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295131,"user_name":"瑞兴","can_delete":false,"product_type":"c1","uid":2616100,"ip_address":"","ucode":"080221FC1B9597","user_header":"https://static001.geekbang.org/account/avatar/00/27/eb/24/0e54b5dc.jpg","comment_is_top":false,"comment_ctime":1622258841,"is_pvip":false,"replies":[{"id":"107148","content":"加油～","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1622259400,"ip_address":"","comment_id":295131,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1622258841","product_id":100078401,"comment_content":"迟到补卡","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520959,"discussion_content":"加油～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622259400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294422,"user_name":"宏典","can_delete":false,"product_type":"c1","uid":2616028,"ip_address":"","ucode":"63953F36596C28","user_header":"https://static001.geekbang.org/account/avatar/00/27/ea/dc/aa699264.jpg","comment_is_top":false,"comment_ctime":1621936648,"is_pvip":true,"replies":[{"id":"106861","content":"赞！","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1621995356,"ip_address":"","comment_id":294422,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1621936648","product_id":100078401,"comment_content":"在分页模式下，操作系统是如何对应用程序的地址空间进行隔离的？<br><br>1. 每个应用程序都有自己的地址空间，但是这个地址是虚拟的地址。<br>2. 当应用程序访问某个虚拟地址时：<br>假如我能探测地址总线，我并不会在地址总线上测到对应的的物理信号。<br>地址总线上的物理信号是物理地址一一对应的。<br>而虚拟地址需要通过MMU转换为物理地址。<br><br>3. MMU保证相同的虚拟地址不会访问到相同的物理内存。<br>MMU也保证不同的虚拟地址不会访问到相同的物理内存。<br><br>4. 从而保证了在物理地址空间上，应用程序是隔离的。","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520645,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621995356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294258,"user_name":"BrightLoong","can_delete":false,"product_type":"c1","uid":1165304,"ip_address":"","ucode":"361FB1840C2977","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/f8/6b311ad9.jpg","comment_is_top":false,"comment_ctime":1621852151,"is_pvip":false,"replies":[{"id":"106946","content":"对对对","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622041131,"ip_address":"","comment_id":294258,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1621852151","product_id":100078401,"comment_content":"看完了和上一讲一样懵逼，看完后了解到的是使用虚拟地址来隔离进程间共享内存的问题，统一又操作系统来管理，还不知道理解对不对","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520575,"discussion_content":"对对对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622041131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1721895,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/46/27/eb318d12.jpg","nickname":"Geek_4b6813","note":"","ucode":"ED10C17BE368B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376005,"discussion_content":"物理内存都是操作系统在管的，进程看到的是虚拟内存，以32位内存字为例，每个进程都感觉自己好像独占了4GB的内存。其实不尽然，进程每次只利用了一部分物理内存，操作系统会为每个进程分配一个页表，进程通过页表从虚拟地址映射到真实物理地址。\n比如虚拟地址00001000,在mmu进行映射时，以前3位作为页表下标，寻找下标为000的页表项，该页表项映射到真实的物理页002，最终访问的物理地址就是00201000,而这个转化对进程来说是透明的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621925065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1721895,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/46/27/eb318d12.jpg","nickname":"Geek_4b6813","note":"","ucode":"ED10C17BE368B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376007,"discussion_content":"虚拟内存技术一方面是为了实现进程的地址空间（不互相污染进程之间的指令和数据），一方面是利用程序的局部性原理，增大内存的利用率（进程不需要把所有页面调入内存中，在某一个时间段只需要调入部分页面到内存中，随着时间的推移逐渐将用不上的页面替换成新页面就好）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621925228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294255,"user_name":"Varphp","can_delete":false,"product_type":"c1","uid":1590892,"ip_address":"","ucode":"889550391E3F75","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTImmLJCKerl9CI4sTpPDNCUgswp04ybsJ4J6mpJmMlHh43Iibp1RPOLam5PpOv2ZDGcjvGrY94lNRw/132","comment_is_top":false,"comment_ctime":1621851440,"is_pvip":false,"replies":[{"id":"106763","content":"小编指路，当然有实际代码，不然怎么写操作系统。你可以根据课程第二节课的课程讲解跟配套代码，先亲身体验一下。代码C语言为主，少量汇编。","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1621854157,"ip_address":"","comment_id":294255,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1621851440","product_id":100078401,"comment_content":"什么用c语言写吗？课程会有实际代码吗？求解答 小白不敢轻易入手课程怕看不懂","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520574,"discussion_content":"小编指路，当然有实际代码，不然怎么写操作系统。你可以根据课程第二节课的课程讲解跟配套代码，先亲身体验一下。代码C语言为主，少量汇编。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621854157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294242,"user_name":"老男孩","can_delete":false,"product_type":"c1","uid":1134514,"ip_address":"","ucode":"CEC6D47412F620","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/b2/1e8b5616.jpg","comment_is_top":false,"comment_ctime":1621847799,"is_pvip":false,"replies":[{"id":"106947","content":"可惜 并不一定是连续的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622041192,"ip_address":"","comment_id":294242,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621847799","product_id":100078401,"comment_content":"老师，每个物理内存页应该都是连续的吧？或者是出于硬件方面的限制？从一个门外汉的角度看，拿32位4M来说直接用1~2^32之间的数对1024取模，余数相等分到一页内。找起来是不是更快。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520569,"discussion_content":"可惜 并不一定是连续的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622041192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294154,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1621788822,"is_pvip":false,"replies":[{"id":"107006","content":"你好，思考很深刻，了解的也很多 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622094109,"ip_address":"","comment_id":294154,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621788822","product_id":100078401,"comment_content":"操作系统，会给每个进程分配单独的页表，从而会让每一个进程，都认为自己有独一无二的4G内存空间，但在这4G空间中，无论是Windows还是Linux都会给操作系统预留1-2G的空间，其余才是进程的真实可用空间。<br>在保护模式下，跨进程共享内存成了比较困难的事情。以Windows为例，要么ring3的应用通过CreateFileMapping等函数，通过内核对象来进行跨进程共享内存。要么写一个驱动，让程序直接运行到ring0上。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520533,"discussion_content":"你好，思考很深刻，了解的也很多 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622094109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294126,"user_name":"printk","can_delete":false,"product_type":"c1","uid":2514008,"ip_address":"","ucode":"D110BA5416F38C","user_header":"https://static001.geekbang.org/account/avatar/00/26/5c/58/6864f6ac.jpg","comment_is_top":false,"comment_ctime":1621776849,"is_pvip":false,"replies":[{"id":"107007","content":"虚拟地址 都是 相同的 物理地址 不同  由mmu页表进行转换","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622094276,"ip_address":"","comment_id":294126,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1621776849","product_id":100078401,"comment_content":"保护模式下 4KB的页目录项+1024*4KB的页表项 需要使用4MB+4KB的内存空间来存储，占用的内存还挺多的？虚拟地址是链接器产生的，那是它保证两个独立的进程不会有重叠的虚拟地址吗，因为如果虚拟地址一样的话，访问到的物理地址也就一样了？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520519,"discussion_content":"虚拟地址 都是 相同的 物理地址 不同  由mmu页表进行转换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622094276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1527366,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4e/46/e037c0df.jpg","nickname":"Let go","note":"","ucode":"30EC4EC53E2A81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375708,"discussion_content":"前面那两个问题没看懂。 后面的问题话，每一个虚拟地址的内存都是一样的。虚拟地址是连接器产生的是指 编译后的文件，如果有引用其他文中的文件，这时候不会计算具体的虚拟地址。 编译后会以偏移地址的方式，放在那。链接后才会算出实际的虚拟地址。虚拟地址一样的话，页表不一样，物理地址也不会不一样。 具体的mmu过程我还需要理解，就不细说了。问别人吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621827167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294124,"user_name":"大鱼Coo","can_delete":false,"product_type":"c1","uid":1184726,"ip_address":"","ucode":"94A695648681A3","user_header":"https://static001.geekbang.org/account/avatar/00/12/13/d6/278ad881.jpg","comment_is_top":false,"comment_ctime":1621775851,"is_pvip":false,"replies":[{"id":"106748","content":"加油，冲鸭！","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1621847406,"ip_address":"","comment_id":294124,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1621775851","product_id":100078401,"comment_content":"迟到打卡，继续爬坡~","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520517,"discussion_content":"加油，冲鸭！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621847406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294055,"user_name":"Geek_c1e5fb","can_delete":false,"product_type":"c1","uid":2253136,"ip_address":"","ucode":"F86D0DFAF67D64","user_header":"","comment_is_top":false,"comment_ctime":1621735790,"is_pvip":false,"replies":[{"id":"107011","content":"是的 你思考很深入 每调度一次就要切换一次","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622094501,"ip_address":"","comment_id":294055,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621735790","product_id":100078401,"comment_content":"CPU的页表基地址寄存器会因为多个进程执行的过程中因为操作系统进行任务切换时会被改写为当前被运行进程的页表基地址，我奇怪的这么频繁的切换的速度有多块？是不是所谓的cpu上面的Hz限制了他？还是说这个跟轮训算法有关？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520490,"discussion_content":"是的 你思考很深入 每调度一次就要切换一次","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622094501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294019,"user_name":"不刷完算法数据结构不改名","can_delete":false,"product_type":"c1","uid":2306127,"ip_address":"","ucode":"524D109BF830C7","user_header":"https://static001.geekbang.org/account/avatar/00/23/30/4f/fe069294.jpg","comment_is_top":false,"comment_ctime":1621679570,"is_pvip":true,"replies":[{"id":"106600","content":"哈哈 当MMU顶级页目录地址","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621689466,"ip_address":"","comment_id":294019,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1621679570","product_id":100078401,"comment_content":"CR3控制寄存器，存放着当前任务目录的物理地址。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520469,"discussion_content":"哈哈 当MMU顶级页目录地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621689466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1647266,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe00c7whq5qBFso0JUzHuscxjFhnqpZuXDA1BA97DXl4wDgV2VnXSEI2fcB9NLc7jdibA1AGBRffQ/132","nickname":"Geek_0e0578","note":"","ucode":"D5CB330047CA2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375995,"discussion_content":"哈，看到了这个讨论，我突然想问1个问题：当发生进程切换的时候，os肯定要把目标进程的页表基址放在CR3寄存器里，这个值肯定保存在了目标进程的某个数据结构的某个变量里面，请问这个变量是谁呢？2问这个变量的数值是物理地址还是虚拟地址呢？3问假设这个变量的数值是虚拟地址，那么把它填入CR3之前需要转换成物理地址，则这个转换是怎么做的呢，查页表吗？[狗头狗头]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621920652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293988,"user_name":"LT","can_delete":false,"product_type":"c1","uid":1147795,"ip_address":"","ucode":"4E902E1EFBB9C1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIBV8Deuz0Ys4omVlErUvTeRLt7xYRPd8nxhSZ1C2Q9Nice7icHnndsHmyT3KBenxLGw7xghlDzfIuA/132","comment_is_top":false,"comment_ctime":1621670706,"is_pvip":false,"replies":[{"id":"106603","content":"对对，linux你可以自己写内核模块读取页表，或者后面课程中我们也会建立 页表的 不要着急","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621689716,"ip_address":"","comment_id":293988,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1621670706","product_id":100078401,"comment_content":"1.虚拟空间是linker安排好了，那页目录和页表只能加载时处理，这是大程序启动慢的一个原因吗？<br>2.所有进程会共享一部分页表，比如内核的代码，IPC所用的；会专享部分自己的页表，对吗？<br>3.在linux下用什么工具去查一个进程的页表？看看它们的数据结构和相应的位，以加深理解。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520457,"discussion_content":"对对，linux你可以自己写内核模块读取页表，或者后面课程中我们也会建立 页表的 不要着急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621689716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1647266,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe00c7whq5qBFso0JUzHuscxjFhnqpZuXDA1BA97DXl4wDgV2VnXSEI2fcB9NLc7jdibA1AGBRffQ/132","nickname":"Geek_0e0578","note":"","ucode":"D5CB330047CA2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375992,"discussion_content":"1我有疑问：我印象里，以linux为例，os的加载器并不处理页表，仅创建顶级页目录，页表的操作都是透过MMU触发缺页异常来推动的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621919094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293965,"user_name":"MatyTan","can_delete":false,"product_type":"c1","uid":2616869,"ip_address":"","ucode":"9753A8C5CD9A35","user_header":"https://static001.geekbang.org/account/avatar/00/27/ee/25/5c94a3ce.jpg","comment_is_top":false,"comment_ctime":1621654108,"is_pvip":false,"replies":[{"id":"106605","content":"对 正确","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621690188,"ip_address":"","comment_id":293965,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621654108","product_id":100078401,"comment_content":"分页模式下，系统会给应用程序的进程分配一定的虚拟内存的页，不同进程有不同的页。在页面不足的情况下会涉及到页面的调度，分配。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520451,"discussion_content":"对 正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621690188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293883,"user_name":"送过快递的码农","can_delete":false,"product_type":"c1","uid":1587666,"ip_address":"","ucode":"66EA81B3BADC73","user_header":"https://static001.geekbang.org/account/avatar/00/18/39/d2/845c0e39.jpg","comment_is_top":false,"comment_ctime":1621586415,"is_pvip":false,"replies":[{"id":"106617","content":"真的是点难 是不是 哈哈 别怕 跟着我走 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621691490,"ip_address":"","comment_id":293883,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621586415","product_id":100078401,"comment_content":"硬件部分好难啊，但是不懂硬件，又学不好操作系统，真的。。。。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520413,"discussion_content":"真的是点难 是不是 哈哈 别怕 跟着我走 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621691490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293877,"user_name":"弯弓射大猪","can_delete":false,"product_type":"c1","uid":2143259,"ip_address":"","ucode":"4EDEA2E7FA8D4B","user_header":"https://static001.geekbang.org/account/avatar/00/20/b4/1b/6f96516c.jpg","comment_is_top":false,"comment_ctime":1621585151,"is_pvip":false,"replies":[{"id":"106618","content":"对的 高位是 扩展的 所以有了两个区间 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621691555,"ip_address":"","comment_id":293877,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1621585151","product_id":100078401,"comment_content":"长模式下要计算页为4KB大小时，最终的物理地址是页表项里的物理地址基址（51-12+1 =40 ）拼接上页内偏移量（12位） 合起来不是 52位吗？ 和内存64位的寻址好像还是相差甚远？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520410,"discussion_content":"对的 高位是 扩展的 所以有了两个区间 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621691555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1647266,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe00c7whq5qBFso0JUzHuscxjFhnqpZuXDA1BA97DXl4wDgV2VnXSEI2fcB9NLc7jdibA1AGBRffQ/132","nickname":"Geek_0e0578","note":"","ucode":"D5CB330047CA2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375994,"discussion_content":"64位系统虚拟地址空间 2^64 = 2^4 * 2^60 = 16EB这么大。但64位linux系统仅仅使用了最低128T(进程空间)和最高128T(内核空间)这2部分空间，共256T。2个空间中间夹着1个巨大的空洞，这部分是无效虚拟地址。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621920134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293854,"user_name":"时雨月一","can_delete":false,"product_type":"c1","uid":2615928,"ip_address":"","ucode":"DE616156B84B12","user_header":"https://static001.geekbang.org/account/avatar/00/27/ea/78/5ad7aca5.jpg","comment_is_top":false,"comment_ctime":1621578136,"is_pvip":false,"replies":[{"id":"106568","content":"加油，先打好基础，才能写起来！","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1621586552,"ip_address":"","comment_id":293854,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1621578136","product_id":100078401,"comment_content":"更加期待后面的更新和实操啦","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520397,"discussion_content":"加油，先打好基础，才能写起来！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621586552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293838,"user_name":"静由心然","can_delete":false,"product_type":"c1","uid":2631261,"ip_address":"","ucode":"E48AD41CD96F09","user_header":"https://static001.geekbang.org/account/avatar/00/28/26/5d/eeaa7df0.jpg","comment_is_top":false,"comment_ctime":1621573177,"is_pvip":false,"replies":[{"id":"106559","content":"谢谢，一起学习进步，后续更精彩！","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1621573402,"ip_address":"","comment_id":293838,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1621573177","product_id":100078401,"comment_content":"已经看到答案，不好意思！课程666","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520389,"discussion_content":"谢谢，一起学习进步，后续更精彩！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621573402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293819,"user_name":"GAC·DU","can_delete":false,"product_type":"c1","uid":1385403,"ip_address":"","ucode":"7847FBE1C13740","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/bb/a1a61f7c.jpg","comment_is_top":false,"comment_ctime":1621564889,"is_pvip":true,"replies":[{"id":"106527","content":"是的 因为开发操作系统就是直面内核 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621565753,"ip_address":"","comment_id":293819,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621564889","product_id":100078401,"comment_content":"以假换真，软硬结合，6666","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520379,"discussion_content":"是的 因为开发操作系统就是直面内核 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621565753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293816,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1621564670,"is_pvip":false,"replies":[{"id":"106529","content":"握手","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1621565819,"ip_address":"","comment_id":293816,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621564670","product_id":100078401,"comment_content":"打个卡","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520376,"discussion_content":"握手","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621565819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}