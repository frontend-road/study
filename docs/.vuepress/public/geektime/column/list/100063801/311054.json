{"id":311054,"title":"05｜容器CPU（1）：怎么限制容器的CPU使用？","content":"<p>你好，我是程远。从这一讲开始，我们进入容器CPU这个模块。</p><p>我在第一讲中给你讲过，容器在Linux系统中最核心的两个概念是Namespace和Cgroups。我们可以通过Cgroups技术限制资源。这个资源可以分为很多类型，比如CPU，Memory，Storage，Network等等。而计算资源是最基本的一种资源，所有的容器都需要这种资源。</p><p>那么，今天我们就先聊一聊，怎么限制容器的CPU使用？</p><p>我们拿Kubernetes平台做例子，具体来看下面这个pod/container里的spec定义，在CPU资源相关的定义中有两项内容，分别是 <strong>Request CPU</strong> 和 <strong>Limit CPU</strong>。</p><pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: frontend\nspec:\n  containers:\n  - name: app\n    image: images.my-company.example/app:v4\n    env:\n    resources:\n      requests:\n        memory: &quot;64Mi&quot;\n        cpu: &quot;1&quot;\n      limits:\n        memory: &quot;128Mi&quot;\n        cpu: &quot;2&quot;\n…\n</code></pre><p>很多刚刚使用Kubernetes的同学，可能一开始并不理解这两个参数有什么作用。</p><p>这里我先给你说结论，在Pod Spec里的\"Request CPU\"和\"Limit CPU\"的值，最后会通过CPU Cgroup的配置，来实现控制容器CPU资源的作用。</p><p>那接下来我会先从进程的CPU使用讲起，然后带你在CPU Cgroup子系统中建立几个控制组，用这个例子为你讲解CPU Cgroup中的三个最重要的参数\"cpu.cfs_quota_us\"\"cpu.cfs_period_us\"\"cpu.shares\"。</p><!-- [[[read_end]]] --><p>相信理解了这三个参数后，你就会明白我们要怎样限制容器CPU的使用了。</p><h2>如何理解CPU使用和CPU Cgroup？</h2><p>既然我们需要理解CPU  Cgroup，那么就有必要先来看一下Linux里的CPU使用的概念，这是因为CPU Cgroup最大的作用就是限制CPU使用。</p><h3>CPU使用的分类</h3><p>如果你想查看Linux系统的CPU使用的话，会用什么方法呢？最常用的肯定是运行Top了。</p><p>我们对照下图的Top运行界面，在截图第三行，\"%Cpu(s)\"开头的这一行，你会看到一串数值，也就是\"0.0 us, 0.0 sy, 0.0 ni, 99.9 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st\"，那么这里的每一项值都是什么含义呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/c2/a67fae56ce2f4e7078d552c58c9f9dc2.png?wh=1696*412\" alt=\"\"></p><p>下面这张图里最长的带箭头横轴，我们可以把它看成一个时间轴。同时，它的上半部分代表Linux用户态（User space），下半部分代表内核态（Kernel space）。这里为了方便你理解，我们先假设只有一个CPU吧。</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/99/7dbd023628f5f4165abc23c1d67aca99.jpeg?wh=3200*1800\" alt=\"\"></p><p>我们可以用上面这张图，把这些值挨个解释一下。</p><p>假设一个用户程序开始运行了，那么就对应着第一个\"us\"框，\"us\"是\"user\"的缩写，代表Linux的用户态CPU Usage。普通用户程序代码中，只要不是调用系统调用（System Call），这些代码的指令消耗的CPU就都属于\"us\"。</p><p>当这个用户程序代码中调用了系统调用，比如说read()去读取一个文件，这时候这个用户进程就会从用户态切换到内核态。</p><p>内核态read()系统调用在读到真正disk上的文件前，就会进行一些文件系统层的操作。那么这些代码指令的消耗就属于\"sy\"，这里就对应上面图里的第二个框。\"sy\"是 \"system\"的缩写，代表内核态CPU使用。</p><p>接下来，这个read()系统调用会向Linux的Block Layer发出一个I/O Request，触发一个真正的磁盘读取操作。</p><p>这时候，这个进程一般会被置为TASK_UNINTERRUPTIBLE。而Linux会把这段时间标示成\"wa\"，对应图中的第三个框。\"wa\"是\"iowait\"的缩写，代表等待I/O的时间，这里的I/O是指Disk I/O。</p><p>紧接着，当磁盘返回数据时，进程在内核态拿到数据，这里仍旧是内核态的CPU使用中的\"sy\"，也就是图中的第四个框。</p><p>然后，进程再从内核态切换回用户态，在用户态得到文件数据，这里进程又回到用户态的CPU使用，\"us\"，对应图中第五个框。</p><p>好，这里我们假设一下，这个用户进程在读取数据之后，没事可做就休眠了。并且我们可以进一步假设，这时在这个CPU上也没有其他需要运行的进程了，那么系统就会进入\"id\"这个步骤，也就是第六个框。\"id\"是\"idle\"的缩写，代表系统处于空闲状态。</p><p>如果这时这台机器在网络收到一个网络数据包，网卡就会发出一个中断（interrupt）。相应地，CPU会响应中断，然后进入中断服务程序。</p><p>这时，CPU就会进入\"hi\"，也就是第七个框。\"hi\"是\"hardware irq\"的缩写，代表CPU处理硬中断的开销。由于我们的中断服务处理需要关闭中断，所以这个硬中断的时间不能太长。</p><p>但是，发生中断后的工作是必须要完成的，如果这些工作比较耗时那怎么办呢？Linux中有一个软中断的概念（softirq），它可以完成这些耗时比较长的工作。</p><p>你可以这样理解这个软中断，从网卡收到数据包的大部分工作，都是通过软中断来处理的。那么，CPU就会进入到第八个框，\"si\"。这里\"si\"是\"softirq\"的缩写，代表CPU处理软中断的开销。</p><p>这里你要注意，无论是\"hi\"还是\"si\"，它们的CPU时间都不会计入进程的CPU时间。<strong>这是因为本身它们在处理的时候就不属于任何一个进程。</strong></p><p>好了，通过这个场景假设，我们介绍了大部分的Linux CPU使用。</p><p>不过，我们还剩两个类型的CPU使用没讲到，我想给你做个补充，一次性带你做个全面了解。这样以后你解决相关问题时，就不会再犹豫，这些值到底影不影响CPU Cgroup中的限制了。下面我给你具体讲一下。</p><p>一个是\"ni\"，是\"nice\"的缩写，这里表示如果进程的nice值是正值（1-19），代表优先级比较低的进程运行时所占用的CPU。</p><p>另外一个是\"st\"，\"st\"是\"steal\"的缩写，是在虚拟机里用的一个CPU使用类型，表示有多少时间是被同一个宿主机上的其他虚拟机抢走的。</p><p>综合前面的内容，我再用表格为你总结一下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/a4/a3/a4f537187a16e872ebcc605d972672a3.jpeg?wh=3200*1800\" alt=\"\"></p><h3>CPU Cgroup</h3><p>在第一讲中，我们提到过Cgroups是对指定进程做计算机资源限制的，CPU  Cgroup是Cgroups其中的一个Cgroups子系统，它是用来限制进程的CPU使用的。</p><p>对于进程的CPU使用, 通过前面的Linux CPU使用分类的介绍，我们知道它只包含两部分: 一个是用户态，这里的用户态包含了us和ni；还有一部分是内核态，也就是sy。</p><p>至于wa、hi、si，这些I/O或者中断相关的CPU使用，CPU Cgroup不会去做限制，那么接下来我们就来看看CPU  Cgoup是怎么工作的？</p><p>每个Cgroups子系统都是通过一个虚拟文件系统挂载点的方式，挂到一个缺省的目录下，CPU  Cgroup 一般在Linux 发行版里会放在 <code>/sys/fs/cgroup/cpu</code> 这个目录下。</p><p>在这个子系统的目录下，每个控制组（Control Group） 都是一个子目录，各个控制组之间的关系就是一个树状的层级关系（hierarchy）。</p><p>比如说，我们在子系统的最顶层开始建立两个控制组（也就是建立两个目录）group1 和 group2，然后再在group2的下面再建立两个控制组group3和group4。</p><p>这样操作以后，我们就建立了一个树状的控制组层级，你可以参考下面的示意图。<br>\n<img src=\"https://static001.geekbang.org/resource/image/8b/54/8b86bc86706b0bbfe8fe157ee21b6454.jpeg?wh=3200*1800\" alt=\"\"></p><p>那么我们的每个控制组里，都有哪些CPU  Cgroup相关的控制信息呢？这里我们需要看一下每个控制组目录中的内容：</p><pre><code class=\"language-shell\"> # pwd\n/sys/fs/cgroup/cpu\n# mkdir group1 group2\n# cd group2\n# mkdir group3 group4\n# cd group3\n# ls cpu.*\ncpu.cfs_period_us  cpu.cfs_quota_us  cpu.rt_period_us  cpu.rt_runtime_us  cpu.shares  cpu.stat \n</code></pre><p>考虑到在云平台里呢，大部分程序都不是实时调度的进程，而是普通调度（SCHED_NORMAL）类型进程，那什么是普通调度类型呢？</p><p>因为普通调度的算法在Linux中目前是CFS （Completely Fair Scheduler，即完全公平调度器）。为了方便你理解，我们就直接来看CPU Cgroup和CFS相关的参数，一共有三个。</p><p>第一个参数是 <strong>cpu.cfs_period_us</strong>，它是CFS算法的一个调度周期，一般它的值是100000，以microseconds为单位，也就100ms。</p><p>第二个参数是 <strong>cpu.cfs_quota_us</strong>，它“表示CFS算法中，在一个调度周期里这个控制组被允许的运行时间，比如这个值为50000时，就是50ms。</p><p>如果用这个值去除以调度周期（也就是cpu.cfs_period_us），50ms/100ms = 0.5，这样这个控制组被允许使用的CPU最大配额就是0.5个CPU。</p><p>从这里能够看出，cpu.cfs_quota_us是一个绝对值。如果这个值是200000，也就是200ms，那么它除以period，也就是200ms/100ms=2。</p><p>你看，结果超过了1个CPU，这就意味着这时控制组需要2个CPU的资源配额。</p><p>我们再来看看第三个参数， <strong>cpu.shares</strong>。这个值是CPU  Cgroup对于控制组之间的CPU分配比例，它的缺省值是1024。</p><p>假设我们前面创建的group3中的cpu.shares是1024，而group4中的cpu.shares是3072，那么group3:group4=1:3。</p><p>这个比例是什么意思呢？我还是举个具体的例子来说明吧。</p><p>在一台4个CPU的机器上，当group3和group4都需要4个CPU的时候，它们实际分配到的CPU分别是这样的：group3是1个，group4是3个。</p><p>我们刚才讲了CPU Cgroup里的三个关键参数，接下来我们就通过几个例子来进一步理解一下，代码你可以在<a href=\"https://github.com/chengyli/training/tree/master/cpu/cgroup_cpu\">这里</a>找到。</p><p>第一个例子，我们启动一个消耗2个CPU（200%）的程序threads-cpu，然后把这个程序的pid加入到group3的控制组里：</p><pre><code>./threads-cpu/threads-cpu 2 &amp;\necho $! &gt; /sys/fs/cgroup/cpu/group2/group3/cgroup.procs \n</code></pre><p>在我们没有修改cpu.cfs_quota_us前，用top命令可以看到threads-cpu这个进程的CPU  使用是199%，近似2个CPU。</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/b8/1e95db3f15fc4cf1573f8ebe22db38b8.png?wh=1640*142\" alt=\"\"></p><p>然后，我们更新这个控制组里的cpu.cfs_quota_us，把它设置为150000（150ms）。把这个值除以cpu.cfs_period_us，计算过程是150ms/100ms=1.5, 也就是1.5个CPU，同时我们也把cpu.shares设置为1024。</p><pre><code>echo 150000 &gt; /sys/fs/cgroup/cpu/group2/group3/cpu.cfs_quota_us\necho 1024 &gt; /sys/fs/cgroup/cpu/group2/group3/cpu.shares\n</code></pre><p>这时候我们再运行top，就会发现threads-cpu进程的CPU使用减小到了150%。这是因为我们设置的cpu.cfs_quota_us起了作用，限制了进程CPU的绝对值。</p><p>但这时候cpu.shares的作用还没有发挥出来，因为cpu.shares是几个控制组之间的CPU分配比例，而且一定要到整个节点中所有的CPU都跑满的时候，它才能发挥作用。</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/7e/3c153bba9d7668c22048602d730d627e.png?wh=1670*142\" alt=\"\"></p><p>好，下面我们再来运行第二个例子来理解cpu.shares。我们先把第一个例子里的程序启动，同时按前面的内容，一步步设置好group3里cpu.cfs_quota_us 和cpu.shares。</p><p>设置完成后，我们再启动第二个程序，并且设置好group4里的cpu.cfs_quota_us 和 cpu.shares。</p><p>group3：</p><pre><code>./threads-cpu/threads-cpu 2 &amp;  # 启动一个消耗2个CPU的程序\necho $! &gt; /sys/fs/cgroup/cpu/group2/group3/cgroup.procs #把程序的pid加入到控制组\necho 150000 &gt; /sys/fs/cgroup/cpu/group2/group3/cpu.cfs_quota_us #限制CPU为1.5CPU\necho 1024 &gt; /sys/fs/cgroup/cpu/group2/group3/cpu.shares \n\n</code></pre><p>group4：</p><pre><code>./threads-cpu/threads-cpu 4 &amp;  # 启动一个消耗4个CPU的程序\necho $! &gt; /sys/fs/cgroup/cpu/group2/group4/cgroup.procs #把程序的pid加入到控制组\necho 350000 &gt; /sys/fs/cgroup/cpu/group2/group4/cpu.cfs_quota_us  #限制CPU为3.5CPU\necho 3072 &gt; /sys/fs/cgroup/cpu/group2/group3/cpu.shares # shares 比例 group4: group3 = 3:1\n</code></pre><p>好了，现在我们的节点上总共有4个CPU，而group3的程序需要消耗2个CPU，group4里的程序要消耗4个CPU。</p><p>即使cpu.cfs_quota_us已经限制了进程CPU使用的绝对值，group3的限制是1.5CPU，group4是3.5CPU，1.5+3.5=5，这个结果还是超过了节点上的4个CPU。</p><p>好了，说到这里，我们发现在这种情况下，cpu.shares终于开始起作用了。</p><p>在这里shares比例是group4:group3=3:1，在总共4个CPU的节点上，按照比例，group4里的进程应该分配到3个CPU，而group3里的进程会分配到1个CPU。</p><p>我们用top可以看一下，结果和我们预期的一样。</p><p><img src=\"https://static001.geekbang.org/resource/image/84/a3/8424b7fb4c84679412f75774060fcca3.png?wh=1630*152\" alt=\"\"></p><p>好了，我们对CPU Cgroup的参数做一个梳理。</p><p>第一点，cpu.cfs_quota_us和cpu.cfs_period_us这两个值决定了<strong>每个控制组中所有进程的可使用CPU资源的最大值。</strong></p><p>第二点，cpu.shares这个值决定了<strong>CPU Cgroup子系统下控制组可用CPU的相对比例</strong>，不过只有当系统上CPU完全被占满的时候，这个比例才会在各个控制组间起作用。</p><h2>现象解释</h2><p>在解释了Linux CPU Usage和CPU Cgroup这两个基本概念之后，我们再回到我们最初的问题 “怎么限制容器的CPU使用”。有了基础知识的铺垫，这个问题就比较好解释了。</p><p>首先，Kubernetes会为每个容器都在CPUCgroup的子系统中建立一个控制组，然后把容器中进程写入到这个控制组里。</p><p>这时候\"Limit CPU\"就需要为容器设置可用CPU的上限。结合前面我们讲的几个参数么，我们就能知道容器的CPU上限具体如何计算了。</p><p>容器CPU的上限由cpu.cfs_quota_us除以cpu.cfs_period_us得出的值来决定的。而且，在操作系统里，cpu.cfs_period_us的值一般是个固定值，Kubernetes不会去修改它，所以我们就是只修改cpu.cfs_quota_us。</p><p>而\"Request CPU\"就是无论其他容器申请多少CPU资源，即使运行时整个节点的CPU都被占满的情况下，我的这个容器还是可以保证获得需要的CPU数目，那么这个设置具体要怎么实现呢？</p><p>显然我们需要设置cpu.shares这个参数：<strong>在CPU Cgroup中cpu.shares == 1024表示1个CPU的比例，那么Request CPU的值就是n，给cpu.shares的赋值对应就是n*1024。</strong></p><h2>重点总结</h2><p>首先，我带你了解了Linux下CPU Usage的种类.</p><p>这里你要注意的是<strong>每个进程的CPU Usage只包含用户态（us或ni）和内核态（sy）两部分，其他的系统CPU开销并不包含在进程的CPU使用中，而CPU Cgroup只是对进程的CPU使用做了限制。</strong></p><p>其实这一讲我们开篇的问题“怎么限制容器的CPU使用”，这个问题背后隐藏了另一个问题，也就是容器是如何设置它的CPU Cgroup中参数值的？想解决这个问题，就要先知道CPU Cgroup都有哪些参数。</p><p>所以，我详细给你介绍了CPU Cgroup中的主要参数，包括这三个：<strong>cpu.cfs_quota_us，cpu.cfs_period_us 还有cpu.shares。</strong></p><p>其中，cpu.cfs_quota_us（一个调度周期里这个控制组被允许的运行时间）除以cpu.cfs_period_us（用于设置调度周期）得到的这个值决定了CPU  Cgroup每个控制组中CPU使用的上限值。</p><p>你还需要掌握一个cpu.shares参数，正是这个值决定了CPU  Cgroup子系统下控制组可用CPU的相对比例，当系统上CPU完全被占满的时候，这个比例才会在各个控制组间起效。</p><p>最后，我们明白了CPU Cgroup关键参数是什么含义后，Kubernetes中\"Limit CPU\"和 \"Request CPU\"也就很好解释了:</p><p><strong> Limit CPU就是容器所在Cgroup控制组中的CPU上限值，Request CPU的值就是控制组中的cpu.shares的值。</strong></p><h2>思考题</h2><p>我们还是按照文档中定义的控制组目录层次结构图，然后按序执行这几个脚本：</p><ul>\n<li><a href=\"https://github.com/chengyli/training/blob/main/cpu/cgroup_cpu/create_groups.sh\">create_groups.sh</a></li>\n<li><a href=\"https://github.com/chengyli/training/blob/main/cpu/cgroup_cpu/update_group1.sh\">update_group1.sh</a></li>\n<li><a href=\"https://github.com/chengyli/training/blob/main/cpu/cgroup_cpu/update_group4.sh\">update_group4.sh</a></li>\n<li><a href=\"https://github.com/chengyli/training/blob/main/cpu/cgroup_cpu/update_group3.sh\">update_group3.sh</a></li>\n</ul><p>那么，在一个4个CPU的节点上，group1/group3/group4里的进程，分别会被分配到多少CPU呢?</p><p>欢迎留言和我分享你的思考和疑问。如果你有所收获，也欢迎分享给朋友，一起学习和交流。</p>","neighbors":{"left":{"article_title":"04 | 理解进程（3）：为什么我在容器中的进程被强制杀死了？","id":310804},"right":{"article_title":"06 | 容器CPU（2）：如何正确地拿到容器CPU的开销？","id":313255}},"comments":[{"had_liked":false,"id":263759,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1007254,"ip_address":"","ucode":"E28F2602BA25DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","comment_is_top":false,"comment_ctime":1606263668,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"139045217140","product_id":100063801,"comment_content":"CPU 使用率分解图画的挺有创意👍","like_count":33,"discussions":[{"author":{"id":1248326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","nickname":"多选参数","note":"","ucode":"B2294D80AB075F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387745,"discussion_content":"+1\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628395962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2057406,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/64/be/546665e3.jpg","nickname":"心随缘","note":"","ucode":"F7F5C49EA80E03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354824,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615346309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270023,"user_name":"Action","can_delete":false,"product_type":"c1","uid":1239234,"ip_address":"","ucode":"FFFD1537C6BB3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/c2/77a413a7.jpg","comment_is_top":false,"comment_ctime":1608880868,"is_pvip":false,"replies":[{"id":"98021","content":"进程如果设置为SCHED_FIFO 或者SCHED_RR实时调度类型，那么只要进程任务不结束，就不会把cpu资源让给SCHED_NORMAL进程。这种实时的进程，在实时性要比较高的嵌入式系统中会用到，但是云平台中提供互联网服务的应用中不太会去用实时调度。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1609082454,"ip_address":"","comment_id":270023,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53148488420","product_id":100063801,"comment_content":"为什么说“云平台里呢，大部分程序都不是实时调度的进程，而是普通调度（SCHED_NORMAL）类型进程”？这块不是很明白","like_count":12,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512495,"discussion_content":"进程如果设置为SCHED_FIFO 或者SCHED_RR实时调度类型，那么只要进程任务不结束，就不会把cpu资源让给SCHED_NORMAL进程。这种实时的进程，在实时性要比较高的嵌入式系统中会用到，但是云平台中提供互联网服务的应用中不太会去用实时调度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609082454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282642,"user_name":"心随缘","can_delete":false,"product_type":"c1","uid":2057406,"ip_address":"","ucode":"F7F5C49EA80E03","user_header":"https://static001.geekbang.org/account/avatar/00/1f/64/be/546665e3.jpg","comment_is_top":false,"comment_ctime":1615346290,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27385150066","product_id":100063801,"comment_content":"老师的时间轴讲解TOP非常棒！CPU 使用分解的很到位~赞!","like_count":6},{"had_liked":false,"id":263799,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1606269923,"is_pvip":false,"replies":[{"id":"95878","content":"首先这个容器已经在节点上运行了，并且其他的容器也都配置了cpu.shares。<br>比如shares比例， group4: group3=3:1， 在一个4个CPU的节点上，我们先不用考虑limit, 对于group4,如果没有group3的程序运行，那么group4里的4个线程运行的时候可以占用4个CPU。当group3里的2个线程也运行起来了，即使2个线程最大可以消耗2个CPU,但是由于有了shares比例分配，那么group4里的线程仍然可以保证有3个CPU, 而分配给group3的只有1个CPU。<br><br>cpu.shares是个相对值，但是在Linux节点上一般的约定是以值1024为1个CPU的比例，当所有的配置都遵守这个约定的时候，那么给值N*1024, 就表示N个CPU的数量了。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606477711,"ip_address":"","comment_id":263799,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23081106403","product_id":100063801,"comment_content":"老师，不太明白  “Request CPU就是无论其他容器申请多少 CPU 资源，即使运行时整个节点的 CPU 都被占满的情况下，我的这个容器还是可以保证获得需要的 CPU 数目”，这句话改怎么理解呢？当节点cpu都被占满的情况下，我的这个容器会去抢占吗？ 另外cpu.shares是个权重，如何去保证Request CPU的数量？","like_count":5,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510310,"discussion_content":"首先这个容器已经在节点上运行了，并且其他的容器也都配置了cpu.shares。\n比如shares比例， group4: group3=3:1， 在一个4个CPU的节点上，我们先不用考虑limit, 对于group4,如果没有group3的程序运行，那么group4里的4个线程运行的时候可以占用4个CPU。当group3里的2个线程也运行起来了，即使2个线程最大可以消耗2个CPU,但是由于有了shares比例分配，那么group4里的线程仍然可以保证有3个CPU, 而分配给group3的只有1个CPU。\n\ncpu.shares是个相对值，但是在Linux节点上一般的约定是以值1024为1个CPU的比例，当所有的配置都遵守这个约定的时候，那么给值N*1024, 就表示N个CPU的数量了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606477711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028957,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/9d/104bb8ea.jpg","nickname":"Geek2014","note":"","ucode":"9EB356D8DF287E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329255,"discussion_content":"尝试回答下：\nRequest和limit是站在K8S角度上才有的概念，在K8S中，如果节点A的CPU被占满，新pod（本质上是容器）是不能调度到节点A的。\n\n如果抛开K8S概念，那么也就没有Request和limit的概念了。也就是说，单纯的容器概念中，通过手工控制quota和shares，所有的group都不会超过它自己设置的quota值，同时在不能保证所有的group都能获取他想要的资源（比如课程中指定消耗4CPU）时，是优先按照shares来瓜分CPU资源的。\n\n回到问题，“当节点cpu都被占满的情况下”，如果创建新的容器，那么必定会有新的cgroup，有cpu.shares，会和之前占满cpu的cgroup一起按比例使用CPU资源","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1606354185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264263,"user_name":"谢哈哈","can_delete":false,"product_type":"c1","uid":2326880,"ip_address":"","ucode":"5AADE70B5AFE27","user_header":"https://static001.geekbang.org/account/avatar/00/23/81/60/71ed6ac7.jpg","comment_is_top":false,"comment_ctime":1606395523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18786264707","product_id":100063801,"comment_content":"group1:group2是1比1，由于group1 limit是3.5，那group1分到的只能是两个核，剩余的2个核给group3和group4，group4:group3是3比1，那么得出group4与group3各分配的核就是1.5核与0.5核","like_count":4},{"had_liked":false,"id":270017,"user_name":"Action","can_delete":false,"product_type":"c1","uid":1239234,"ip_address":"","ucode":"FFFD1537C6BB3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/c2/77a413a7.jpg","comment_is_top":false,"comment_ctime":1608879707,"is_pvip":false,"replies":[{"id":"98016","content":"一个pod只能在一个节点上运行，如果一个节点上的cpu是40， 那么limit.cpu最大只能是40","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1609081274,"ip_address":"","comment_id":270017,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14493781595","product_id":100063801,"comment_content":"老师，假如我有10个节点，每个节点的cpu核心数是40，只是调度pod，那么limit.cpu 可以设置为400吧？","like_count":3,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512492,"discussion_content":"一个pod只能在一个节点上运行，如果一个节点上的cpu是40， 那么limit.cpu最大只能是40","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609081274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290622,"user_name":"言希","can_delete":false,"product_type":"c1","uid":1154218,"ip_address":"","ucode":"D7F80B86BCAF2E","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/aa/6f780187.jpg","comment_is_top":false,"comment_ctime":1619662106,"is_pvip":false,"replies":[{"id":"105510","content":"对的，不限制。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1620199428,"ip_address":"","comment_id":290622,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10209596698","product_id":100063801,"comment_content":"请问老师，我在环境上遇到 cpu.cfs_quota_us 取值为 -1 的，这种是不是代表的不限制CPU的使用 ？","like_count":2,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519247,"discussion_content":"对的，不限制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620199428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266352,"user_name":"谦寻","can_delete":false,"product_type":"c1","uid":1033639,"ip_address":"","ucode":"07160FAFAD08F7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/a7/e32dcfe7.jpg","comment_is_top":false,"comment_ctime":1607310313,"is_pvip":false,"replies":[{"id":"96764","content":"一般对于容器，是一个cgroup控制组里限制容器中的所有进程。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1607356369,"ip_address":"","comment_id":266352,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10197244905","product_id":100063801,"comment_content":"老师，您好，如果一个容器里面有多个进程，这个限制是针对所有进程，还是只是pid是1的进程？","like_count":2,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511227,"discussion_content":"一般对于容器，是一个cgroup控制组里限制容器中的所有进程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607356369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264814,"user_name":"瓜蛋","can_delete":false,"product_type":"c1","uid":1297941,"ip_address":"","ucode":"9033348BEF5F5A","user_header":"https://static001.geekbang.org/account/avatar/00/13/ce/15/51187703.jpg","comment_is_top":false,"comment_ctime":1606659831,"is_pvip":true,"replies":[{"id":"96282","content":"网络I&#47;O 没有wa状态部分。<br>hi&#47;si 对于磁盘都是有的。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606800842,"ip_address":"","comment_id":264814,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10196594423","product_id":100063801,"comment_content":"请问下关于wa和hi&#47;si的问题：<br>1. 例子中，wa是等待磁盘IO的状态，那等待网络IO时，是不是wa呢？<br>2. 例子中，hi&#47;si是收到网卡中断，那收到磁盘中断时，是不是也是hi&#47;si？","like_count":3,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510691,"discussion_content":"网络I/O 没有wa状态部分。\nhi/si 对于磁盘都是有的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606800842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264014,"user_name":"上邪忘川","can_delete":false,"product_type":"c1","uid":1276588,"ip_address":"","ucode":"1C4459917B038D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIz9dKN1C8rKQoaVtmEGdzObhlia6zAfTsPYOm4ibz39VjTbu7Aia1LyeedHR26b6nxUtcCufpichcYgw/132","comment_is_top":false,"comment_ctime":1606312102,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10196246694","product_id":100063801,"comment_content":"分别为2,1.5,0.5<br>group1和group2分配的cpu配额已经超过4个总cpu，那么就会按照cpu.shares的比例去分配cpu。其中，group1:group2=1:1，group3:group4=1:3，group2=group3+group4，得出group1:group3:group4=4:1:3","like_count":3,"discussions":[{"author":{"id":1036911,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d2/6f/b7db9b07.jpg","nickname":"我不叫小子弹🤔","note":"","ucode":"4B0588AE6C849B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358875,"discussion_content":"请教大佬：group2的shares是怎么求得的呀？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616069772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2063014,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7a/a6/e37fbbd8.jpg","nickname":"小能","note":"","ucode":"39EAAC8443B83C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1036911,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d2/6f/b7db9b07.jpg","nickname":"我不叫小子弹🤔","note":"","ucode":"4B0588AE6C849B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373796,"discussion_content":"group2的shares默认为1024，quota设置为-1，不受限制，","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620876656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":358875,"ip_address":""},"score":373796,"extra":""}]}]},{"had_liked":false,"id":326666,"user_name":"zero","can_delete":false,"product_type":"c1","uid":1684113,"ip_address":"","ucode":"27019747CA63FF","user_header":"https://static001.geekbang.org/account/avatar/00/19/b2/91/fbc34225.jpg","comment_is_top":false,"comment_ctime":1639624362,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5934591658","product_id":100063801,"comment_content":"这节真心不错","like_count":1},{"had_liked":false,"id":309442,"user_name":"垂死挣扎的咸鱼","can_delete":false,"product_type":"c1","uid":1194388,"ip_address":"","ucode":"79143A61A5599E","user_header":"","comment_is_top":false,"comment_ctime":1630136751,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5925104047","product_id":100063801,"comment_content":"老师，这边想请教一个问题，两个容器a,b进程分别设置了cpuset以及cpu.share，其中两个进程绑定了相同的16核，a设置较大的cpu.share值而b设置较小的cpu.share值，比例为4比1，同时将这两个进程压测到80%左右的cpu使用率，发现他俩各占用了8核左右的cpu就好像cpu.share值没有生效，可以请教一下老师可能是什么原因造成cpu.share没有生效","like_count":1,"discussions":[{"author":{"id":1257843,"avatar":"https://static001.geekbang.org/account/avatar/00/13/31/73/4366f97d.jpg","nickname":"白小黑","note":"","ucode":"B83D69F765D60A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562849,"discussion_content":"80%还没满","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649899306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277855,"user_name":"cyz","can_delete":false,"product_type":"c1","uid":1498145,"ip_address":"","ucode":"233B1FC28A45F1","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/21/34c72e67.jpg","comment_is_top":false,"comment_ctime":1612622685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5907589981","product_id":100063801,"comment_content":"评论解答依然精彩","like_count":1},{"had_liked":false,"id":273464,"user_name":"不二","can_delete":false,"product_type":"c1","uid":1027123,"ip_address":"","ucode":"D0700609740FB5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/33/110437cc.jpg","comment_is_top":false,"comment_ctime":1610606163,"is_pvip":false,"replies":[{"id":"99536","content":"一些嵌入式实时的程序需要实时调度的","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1610930010,"ip_address":"","comment_id":273464,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5905573459","product_id":100063801,"comment_content":"请问老师，cpu.rt_runtime_us一般是不是用不上，Linux系统中哪些程序会被配置为实时调度程序呢？如果没有实时调度程序这个参数也就没有了存在的必要吧","like_count":1,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513611,"discussion_content":"一些嵌入式实时的程序需要实时调度的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610930010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264129,"user_name":"Geek2014","can_delete":false,"product_type":"c1","uid":2028957,"ip_address":"","ucode":"9EB356D8DF287E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/9d/104bb8ea.jpg","comment_is_top":false,"comment_ctime":1606359073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5901326369","product_id":100063801,"comment_content":"尝试胡乱分析下：<br>group1 的shares为1024，quota 3.5，尝试使用4，<br>group2的shares默认为1024，quota设置为-1，不受限制，也即是，如果CPU上只有group2的话，那么group2可以使用完所有的CPU（实际上根据group3和group4，group2最多也就能用到1.5+3.5 core）<br><br>故而，group1和group2各分配到2<br><br>把group2分到的2CPU，看作总量，再次分析group3和group4<br>group3和group3尝试使用的总量超过2，所以按照shares比例分配，group3使用1&#47;(1+3) * 2 = 0.5，group4使用3&#47;(1+3) * 2 = 1.5","like_count":1},{"had_liked":false,"id":354931,"user_name":"事已至此开始撤退","can_delete":false,"product_type":"c1","uid":2901316,"ip_address":"广东","ucode":"1076FDF53DA81D","user_header":"https://static001.geekbang.org/account/avatar/00/2c/45/44/8df79d3c.jpg","comment_is_top":false,"comment_ctime":1660890777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660890777","product_id":100063801,"comment_content":"感觉上面讲的和下面的没有啥联系呀，直接看下面的也可以设置好CPU的cgroup，即使完整看完了上面，也和它实现的底层逻辑没有什么关联，老师可能确实自己懂很多，但是没有很好的展现出来","like_count":0},{"had_liked":false,"id":340707,"user_name":"册书一幕","can_delete":false,"product_type":"c1","uid":1281389,"ip_address":"","ucode":"75FA281B772DF6","user_header":"https://static001.geekbang.org/account/avatar/00/13/8d/6d/8c0a487b.jpg","comment_is_top":false,"comment_ctime":1649064368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649064368","product_id":100063801,"comment_content":"request只有满的时候才有用，是否意味着CPU不满的时候，request可以任意定义，容器都能使用到超出request定义的部分","like_count":0},{"had_liked":false,"id":340706,"user_name":"册书一幕","can_delete":false,"product_type":"c1","uid":1281389,"ip_address":"","ucode":"75FA281B772DF6","user_header":"https://static001.geekbang.org/account/avatar/00/13/8d/6d/8c0a487b.jpg","comment_is_top":false,"comment_ctime":1649064241,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649064241","product_id":100063801,"comment_content":"这一节有些没法理解：request是share控制的，limit是quota和period比率来控制。哪request是不是得要CPU满的时候才能生效，保证容器CPU始终占用shares比率的量。那这个limit存在的必要性是什么？可以理解成控制容器不能占用完cpu所有时间片和period周期内可用的时间片长度吗？    CPU的控制似乎跟内存有着很大区别","like_count":0},{"had_liked":false,"id":339512,"user_name":"*","can_delete":false,"product_type":"c1","uid":2901446,"ip_address":"","ucode":"575AECA891950A","user_header":"https://static001.geekbang.org/account/avatar/00/2c/45/c6/28dfdbc9.jpg","comment_is_top":false,"comment_ctime":1648164769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648164769","product_id":100063801,"comment_content":"老师，cgroup挂载掉了可以重新挂载吗","like_count":0},{"had_liked":false,"id":336094,"user_name":"*","can_delete":false,"product_type":"c1","uid":2901446,"ip_address":"","ucode":"575AECA891950A","user_header":"https://static001.geekbang.org/account/avatar/00/2c/45/c6/28dfdbc9.jpg","comment_is_top":false,"comment_ctime":1645920559,"is_pvip":false,"replies":[{"id":"123842","content":"文稿里有链接的。<br>https:&#47;&#47;github.com&#47;chengyli&#47;training&#47;tree&#47;main&#47;cpu&#47;cgroup_cpu","user_name":"作者回复","user_name_real":"编辑","uid":"2070138","ctime":1647785513,"ip_address":"","comment_id":336094,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1645920559","product_id":100063801,"comment_content":"老师， threads-cpu这个脚本能提供吗","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557393,"discussion_content":"文稿里有链接的。\nhttps://github.com/chengyli/training/tree/main/cpu/cgroup_cpu","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647785513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1290469,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Um0fKCDsGBRStZBF1M4HLPSq8jiancnNoYKiaYyYldFX0NObkyUFmnVKTgjm6Y7wUiaCQ3Vm9Ic213l65kJfUzq4w/132","nickname":"Geek_c92584","note":"","ucode":"D9DA02DA718977","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556232,"discussion_content":"用stress应该可以代替的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647256959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332347,"user_name":"jiangb","can_delete":false,"product_type":"c1","uid":1030861,"ip_address":"","ucode":"A09415749CA88D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrqLEic7DVicYY1s9ldH0vGBialDoplVGpicZUJ0Fdaklw27Frv8Ac67eicb5LibhL74SUxAzlick2nfltA/132","comment_is_top":false,"comment_ctime":1643184374,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643184374","product_id":100063801,"comment_content":"老师讲的非常清楚，明白了Top中CPU值的含义了。","like_count":0},{"had_liked":false,"id":330114,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1641801967,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641801967","product_id":100063801,"comment_content":"老师，有个问题想请教，cpu.shares不是一个比例？，我设置了1就是一个cpu，但是在这里 shares 比例是 group4:group3=3:1，在总共 2 个 CPU 的节点上，按照比例，group4 里的进程应该分配到 0.5 个 CPU，而 group3 里的进程会分配到 1.5 个 CPU。那样group4也不是1个CPU。与你说的，在 CPU Cgroup 中 cpu.shares == 1024 表示 1 个 CPU 的比例，那么 Request CPU 的值就是 n，给 cpu.shares 的赋值对应就是 n*1024不符合。能解答一下这个问题？","like_count":0},{"had_liked":false,"id":320684,"user_name":"学生监狱","can_delete":false,"product_type":"c1","uid":1007240,"ip_address":"","ucode":"CA9510F6211FCF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/AkcVibvqux0qrKFbV7skQvQfHsl96tu9HTSaromQyzf7OOSacoorSDreBNbwOdlBeOrKr3Alc1zle66wKkibrL5g/132","comment_is_top":false,"comment_ctime":1636449611,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1636449611","product_id":100063801,"comment_content":" Limit CPU 就是容器所在 Cgroup 控制组中的 CPU 上限值，Request CPU 的值就是控制组中的 cpu.shares 的值.<br>在实际的生产环境中，我们公司的电商业务，技术栈是Java+Dubbo这套，应用更多的是吃内存。目前设置分配比值多少是最佳实践？<br>Allocated resources:<br>  (Total limits may be over 100 percent, i.e., overcommitted.)<br>  Resource           Requests       Limits<br>  --------           --------       ------<br>  cpu                9750m (83%)    18700m (159%)<br>  memory             30352Mi (34%)  39344Mi (45%)<br>  ephemeral-storage  0 (0%)         0 (0%)<br><br>我们的limits目前达到了159%这个是一个合理的值吗？还是说太大了","like_count":0},{"had_liked":false,"id":309662,"user_name":"Geek_ce0af4","can_delete":false,"product_type":"c1","uid":1744601,"ip_address":"","ucode":"DE36ED16AD8101","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLvkQrAkQv9ibJ4XarXAkia2SLvavwxWYZH1GnrcibSY0AtBDeBVxh2Cw51WlyCwwr7icOCyPsj5u0pdg/132","comment_is_top":false,"comment_ctime":1630294096,"is_pvip":false,"replies":[{"id":"124479","content":"后面高能更多～加油","user_name":"编辑回复","user_name_real":"编辑","uid":"1501385","ctime":1648814194,"ip_address":"","comment_id":309662,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1630294096","product_id":100063801,"comment_content":"评论区太精彩","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559552,"discussion_content":"后面高能更多～加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648814195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303633,"user_name":"马成","can_delete":false,"product_type":"c1","uid":1486895,"ip_address":"","ucode":"664F2BAA2E0F0B","user_header":"https://static001.geekbang.org/account/avatar/00/16/b0/2f/e2096905.jpg","comment_is_top":false,"comment_ctime":1626895186,"is_pvip":true,"replies":[{"id":"111068","content":"softirq 指 bottom half of interrupt, 是中断处理的一部分， 和系统调用是两个概念。<br>可以找一本Linux kernel的书籍看一下，比如Linux kernel development.<br>","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1628689002,"ip_address":"","comment_id":303633,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1626895186","product_id":100063801,"comment_content":"软中断我理解就是内部中断，系统调用是其中的一种。那么sy内核时间指的是系统调用时间么？si软中断时间包含系统调用时间么？我被搞糊涂了……","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523768,"discussion_content":"softirq 指 bottom half of interrupt, 是中断处理的一部分， 和系统调用是两个概念。\n可以找一本Linux kernel的书籍看一下，比如Linux kernel development.\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628689002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1129668,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/c4/7c2bf312.jpg","nickname":"草根","note":"","ucode":"7C97CB09A4D8F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545802,"discussion_content":"系统调用通过中断的方式切换到内核执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642054089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303069,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1626577977,"is_pvip":true,"replies":[{"id":"111124","content":"wa (iowait)的cpu, 表示当前cpu 处于空闲状态（并没有占用cpu）同时这时候有io request还没有结束。<br><br>","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1628757943,"ip_address":"","comment_id":303069,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1626577977","product_id":100063801,"comment_content":"老师，我有个困惑，在read的时候，当进程在wa状态，是不是占用着CPU？","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523543,"discussion_content":"wa (iowait)的cpu, 表示当前cpu 处于空闲状态（并没有占用cpu）同时这时候有io request还没有结束。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628757943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1129668,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/c4/7c2bf312.jpg","nickname":"草根","note":"","ucode":"7C97CB09A4D8F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545803,"discussion_content":"这个时候这个进程是不能被中断的，进程的运行状态包括正在运行和不可中断状态","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642054186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300246,"user_name":"Geek_苏晗2","can_delete":false,"product_type":"c1","uid":2289589,"ip_address":"","ucode":"13B4983CF442AF","user_header":"","comment_is_top":false,"comment_ctime":1625062365,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1625062365","product_id":100063801,"comment_content":"echo 3072 &gt; &#47;sys&#47;fs&#47;cgroup&#47;cpu&#47;group2&#47;group3&#47;cpu.shares<br><br>这个地方应该是group4吧。","like_count":0,"discussions":[{"author":{"id":1059593,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2b/09/2171f9a3.jpg","nickname":"小白哥哥","note":"","ucode":"A02A297C7688A4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384980,"discussion_content":"是的，笔误了这里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626838099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297567,"user_name":"强子","can_delete":false,"product_type":"c1","uid":1752558,"ip_address":"","ucode":"AEC3CF413AADA6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/bd/ee/89f20aaa.jpg","comment_is_top":false,"comment_ctime":1623639283,"is_pvip":false,"replies":[{"id":"111201","content":"对的，在kube-scheduler里来保证request cpu, 而cpu.share是在cgroup这一层面的了，只有通过了kube-scheduler才会配置到 cgroup cpu.share.","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1628857787,"ip_address":"","comment_id":297567,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623639283","product_id":100063801,"comment_content":"老师 关于request cpu还是不太理解 request是必须满足的 但是通过cpu.share无法保证 那k8s是如何保证的？是scheduler在调度的时候自己计算的吗 包括允许超售的情况，能否解释一下 感谢🙏","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521858,"discussion_content":"对的，在kube-scheduler里来保证request cpu, 而cpu.share是在cgroup这一层面的了，只有通过了kube-scheduler才会配置到 cgroup cpu.share.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628857787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272820,"user_name":"Joe Black","can_delete":false,"product_type":"c1","uid":1052528,"ip_address":"","ucode":"21FE222A286445","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/70/c8680841.jpg","comment_is_top":false,"comment_ctime":1610317484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610317484","product_id":100063801,"comment_content":"老师，对于nfs这样的网络文件系统，它在io的时候cpu的使用算什么呢？这个和磁盘读写还不一样啊，数据都在远程，实际花的是网络时间吧？","like_count":0},{"had_liked":false,"id":269852,"user_name":"继业(Adrian)","can_delete":false,"product_type":"c1","uid":1021147,"ip_address":"","ucode":"D9BAF5F939A2B6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/db/4e658ce8.jpg","comment_is_top":false,"comment_ctime":1608810806,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1608810806","product_id":100063801,"comment_content":"CPU的使用率在linux里面是树状结构，CPU的share是针对同等深度来做区分。由于三个shell命令都会把CPU占满。所以最后CPU的分配比例是：group1：4， group3：1， group4：3","like_count":0},{"had_liked":false,"id":266400,"user_name":"feihui","can_delete":false,"product_type":"c1","uid":1007294,"ip_address":"","ucode":"13F1D4A82BC650","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/be/9ea55f46.jpg","comment_is_top":false,"comment_ctime":1607324624,"is_pvip":true,"replies":[{"id":"96761","content":"是的，这是一个调度时间的分配，而不是把物理cpu 分配给容器的进程。<br>对于你说的这种情况，就是不限制cpu的使用时间了。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1607355498,"ip_address":"","comment_id":266400,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607324624","product_id":100063801,"comment_content":"有个疑问：假设给容器配置了 1.5 的 CPU，而宿主机上只有 1 个 CPU，其实现在来说配置多少个 CPU 应该指的使用多少的 CPU 的时间对吗？（ 而非简单地分配物理 CPU ）","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511248,"discussion_content":"是的，这是一个调度时间的分配，而不是把物理cpu 分配给容器的进程。\n对于你说的这种情况，就是不限制cpu的使用时间了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607355498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264720,"user_name":"争光 Alan","can_delete":false,"product_type":"c1","uid":1336328,"ip_address":"","ucode":"338534F909AF03","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/08/0287f41f.jpg","comment_is_top":false,"comment_ctime":1606614929,"is_pvip":false,"replies":[{"id":"96013","content":"哦， 在这里的“程序”， 我指的是 .&#47;threads-cpu&#47;threads-cpu","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606642466,"ip_address":"","comment_id":264720,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606614929","product_id":100063801,"comment_content":"好，下面我们再来运行第二个例子来理解 cpu.shares。我们先把第一个例子里的程序启动，同时按前面的内容，一步步设置好 group3 里 cpu.cfs_quota_us 和 cpu.shares。<br><br>是不是写错了，<br>第一个例子的程序停止？","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510660,"discussion_content":"哦， 在这里的“程序”， 我指的是 ./threads-cpu/threads-cpu","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606642466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263953,"user_name":"max","can_delete":false,"product_type":"c1","uid":1003294,"ip_address":"","ucode":"9347A158EC04FA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/1e/9e69527e.jpg","comment_is_top":false,"comment_ctime":1606303212,"is_pvip":false,"replies":[{"id":"95820","content":"@max, 你问的是如何分配到网络带宽？","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606400416,"ip_address":"","comment_id":263953,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606303212","product_id":100063801,"comment_content":"老师，容器中的应用如何获取有效网卡","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510362,"discussion_content":"@max, 你问的是如何分配到网络带宽？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606400416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263918,"user_name":"Geek2014","can_delete":false,"product_type":"c1","uid":2028957,"ip_address":"","ucode":"9EB356D8DF287E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/9d/104bb8ea.jpg","comment_is_top":false,"comment_ctime":1606294216,"is_pvip":false,"replies":[{"id":"95714","content":"是的，上面的情况不存在。<br>假如第一个pod (group1)已经被调度上了，那么第二个pod(group2)是调度不到同一个node上的。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606307197,"ip_address":"","comment_id":263918,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1606294216","product_id":100063801,"comment_content":"有一点不理解，想请教下老师：<br>而&quot;Request CPU&quot;就是无论其他容器申请多少 CPU 资源，即使运行时整个节点的 CPU 都被占满的情况下，我的这个容器还是可以保证获得需要的 CPU 数目，<br><br><br>假设系统只有2个group并列，group1和group2，系统总共2CPU<br>group1 ：request 2 cpu，limit 3 cpu<br>group2 ：request 2 cpu，limit 3 cpu<br><br>由于申请总量大于总量，那么按照K8S的调度原则，是没法启动全部容器的。上面的假设情况，按道理是不存在的，对吧。","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510349,"discussion_content":"是的，上面的情况不存在。\n假如第一个pod (group1)已经被调度上了，那么第二个pod(group2)是调度不到同一个node上的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606307197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028957,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/9d/104bb8ea.jpg","nickname":"Geek2014","note":"","ucode":"9EB356D8DF287E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329280,"discussion_content":"老师的假设前提是：系统只有多个node\n\n假设每个node上2CPU，比如A和B，如果pod(group1)已经调度到A上，那么第二个pod(group2)只能调度到B上（如果B是空闲的话）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606359342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1986969,"avatar":"","nickname":"孟令泽","note":"","ucode":"F324FB4538A6E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329247,"discussion_content":"还是有点没明白，系统有2个，g1已经被调度占用了，那g2不应该被调度啊，不是很明白老师说的不在同一个node是什么意思？是说依然会被调度，只是不在同一个node？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606353006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2028957,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/9d/104bb8ea.jpg","nickname":"Geek2014","note":"","ucode":"9EB356D8DF287E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1986969,"avatar":"","nickname":"孟令泽","note":"","ucode":"F324FB4538A6E1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329518,"discussion_content":"node，是k8s中的抽象概念，即物理机器\n\n你说的g1和g2，在k8s兄抽象为pod（容器）\n\ng1是被调度到节点1，另外一个节点还是空闲的，当然可以调度g2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606396936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329247,"ip_address":""},"score":329518,"extra":""}]}]},{"had_liked":false,"id":263896,"user_name":"王小飞","can_delete":false,"product_type":"c1","uid":1275284,"ip_address":"","ucode":"D93B4C654526F2","user_header":"https://static001.geekbang.org/account/avatar/00/13/75/94/e785c2c8.jpg","comment_is_top":false,"comment_ctime":1606289735,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606289735","product_id":100063801,"comment_content":"学到了。","like_count":0}]}