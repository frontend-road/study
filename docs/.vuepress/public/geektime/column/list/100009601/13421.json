{"id":13421,"title":"22 | 从0到1：API测试怎么做？常用API测试工具简介","content":"<p>你好，我是茹炳晟，我今天分享的主题是“从0到1：API测试怎么做？常用API测试工具简介”。</p>\n<p>在第11篇文章<a href=\"https://time.geekbang.org/column/article/11462\">《互联网产品的测试策略应该如何设计？》</a>中，我介绍过当今互联网产品的测试策略往往会采用菱形结构，即重量级 API 测试，轻量级 GUI 测试，轻量级单元测试，由此可见API测试在现今测试中的重要性不言而喻。</p>\n<p>这篇文章是API自动化测试系列的第一篇文章，我会先为你打好API测试的基础。所以，我会先从0到1设计一个API测试用例，通过这个测试用例，你可以体会到最基本的API测试是如何进行的，并介绍几款常用的API测试工具。</p>\n<h2>API测试的基本步骤</h2>\n<p>通常来讲，无论采用什么API测试工具，API测试的基本步骤主要包括以下三大步骤：</p>\n<ol>\n<li>\n<p>准备测试数据（这是可选步骤，不一定所有API测试都需要这一步）；</p>\n</li>\n<li>\n<p>通过API测试工具，发起对被测API的request；</p>\n</li>\n<li>\n<p>验证返回结果的response。</p>\n</li>\n</ol>\n<p>对API的测试往往是使用API测试工具，比如常见的命令行工具cURL、图形界面工具Postman或者SoapUI、API性能测试的JMeter等。</p>\n<p>为了让你更好地理解API测试具体是怎么做的，并掌握常见API测试工具的使用，我会以基于主流Spring Boot框架开发的简单Restful API为例，分别介绍如何使用cURL和Postman对其进行最基本的功能测试，目的是让你对API测试有一个基本的感性认识。</p><!-- [[[read_end]]] -->\n<h2>基于Spring Boot构建的API</h2>\n<p>因为基于Spring Boot从0到1构建一个API，并不是本文的重点，为了不影响你对文章主要内容的把握，我直接采用了一个预先开发好的Account API为例展开讲解。你可以从<a href=\"https://github.com/SpectoLabs/spring-cloud-contract-blog\">https://github.com/SpectoLabs/spring-cloud-contract-blog</a>下载完整的代码。</p>\n<p>这个Account API的功能非常简单，就是基于你提供的ID值创建一个Account对象，并返回这个新创建Account对象。</p>\n<p>比如，如果你的请求是“account/ID008”，那么返回的response就应该是“{“id”:“ID008”,“type”:“friends”,“email”:“robin@api.io”}”。</p>\n<p>这个Account API的功能逻辑实现非常简单，图1和图2列出了主要的代码逻辑。</p>\n<p>图1中，代码的第21行说明了API的endpoint以及对应的操作是GET方法，第22行明确说明了GET方法具体的业务逻辑是由accountService.getById()方法实现的。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/22/6e/220ed0f17737529eee9c1284fba6d06e.png?wh=1548*686\" alt=\"\" /></p>\n<center>图1  RestController的实现</center>\n<p>图2中，代码的第8行实现了accountService.getById()方法，具体逻辑就是返回一个以传入ID为ID的Account对象。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/10/fb/10a26edf4c7681a3cfbb68654a1d3bfb.png?wh=1594*324\" alt=\"\" /></p>\n<center>图2  具体业务逻辑的实现</center>\n<p>我推荐使用IntelliJ打开这个下载的项目，然后直接启动其中的account-service。启动成功后，account-service会运行在本地机器的8080端口。启动成功后的界面如图3所示。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/c4/8e/c45ca4ea536e130374e3da4f8426718e.png?wh=1920*765\" alt=\"\" /></p>\n<center>图3 成功启动基于Spring Boot的Account API</center>\n<h2>使用cURL命令行工具进行测试</h2>\n<p>首先，你需要下载安装cURL，然后就可以通过以下命令发起Account API的调用。调用结束后的界面如图4所示。</p>\n<pre><code>curl -i -H &quot;Accept: application/json&quot; -X GET &quot;http://127.0.0.1:8080/account/ID008&quot;\n</code></pre>\n<p><img src=\"https://static001.geekbang.org/resource/image/82/52/82571f2ccf198739ed4162574a851f52.png?wh=1578*202\" alt=\"\" /></p>\n<center>图4  使用cURL测试Account API</center>\n<p>这行命令中参数的含义如下：</p>\n<ul>\n<li>第一个参数“-i”，说明需要显示response的header信息；</li>\n<li>第二个参数“-H”，用于设定request中的header；</li>\n<li>第三个参数“-X”，用于指定执行的方法，这里使用了GET方法，其他常见的方法还有POST、PUT和DELETE等，如果不指定“-X”，那么默认的方法就是GET。</li>\n<li>最后“ <a href=\"http://127.0.0.1:8080/account/ID008\">http://127.0.0.1:8080/account/ID008</a> ”，指明了被测API的endpoint以及具体的ID值是“ID008”。</li>\n</ul>\n<p>当使用cURL进行API测试时，常用参数还有两个：</p>\n<ul>\n<li>“-d”：用于设定http参数，http参数可以直接加在URL的query string，也可以用“-d”带入参数。参数之间可以用“&amp;”串接，或使用多个“-d”。</li>\n<li>“-b”：当需要传递cookie时，用于指定cookie文件的路径。</li>\n</ul>\n<p>需要注意的是这些参数都是大小写敏感的。</p>\n<p>了解了这几个最常用的参数后，我再来分析一些最常用的cURL命令以及使用的场景，包括Session的场景和Cookie的场景。</p>\n<p><strong>第一，Session的场景</strong></p>\n<p>如果后端工程师使用session记录使用者登入信息，那么后端通常会传一个 session ID给前端。之后，前端在发给后端的requests的header中就需要设置此session ID，后端便会以此session ID识别出前端是属于具体哪个session，此时cURL的命令行如下所示：</p>\n<pre><code>curl -i -H &quot;sessionid:XXXXXXXXXX&quot; -X GET &quot;http://XXX/api/demoAPI&quot;\n</code></pre>\n<p><strong>第二，Cookie的场景</strong></p>\n<p>如果是使用cookie，在认证成功后，后端会返回cookie给前端，前端可以把该cookie保存成为文件，当需要再次使用该cookie时，再用“-b cookie_File” 的方式在request中植入cookie即可正常使用。具体的cURL的命令行如下所示：</p>\n<pre><code>// 将cookie保存为文件\ncurl -i -X POST -d username=robin -d password=password123 -c ~/cookie.txt &quot;http://XXX/auth&quot;\n\n// 载入cookie到request中\ncurl -i -H &quot;Accept:application/json&quot; -X GET -b ~/cookie.txt &quot;http://XXX/api/demoAPI&quot;\n</code></pre>\n<p>最后，需要特别说明的是，cURL只能发起API调用，而其本身并不具备结果验证能力（结果验证由人完成），所以严格意义上说cURL并不属于测试工具的范畴。但是由于cURL足够轻量级，经常被很多开发人员和测试人员使用，所以我在这里做了简单的介绍。</p>\n<p>接下来，我们再来看看如何使用目前主流的Postman完成API测试。</p>\n<h2>使用图形界面工具Postman进行测试</h2>\n<p>Postman是目前使用最广泛的Http请求模拟工具之一，常常被用于Web Service API的测试。</p>\n<p>早期的Postman，是以Chrome浏览器的插件（plugin）形式存在的，最新版本的Postman已经是独立的应用了。我猜想是因为这个工具的应用日益广泛，所以才有了今天的独立版本。</p>\n<p>你可以通过<a href=\"http://www.getpostman.com\">官方网站</a>下载对应于Mac、Windows和Linux操作系统的不同版本，截止文章写作完成时，最新的Mac版本是6.2.2。</p>\n<p>接下来，我就会以Mac 6.2.2版本为例，跟你分享如何用Postman完成你的API测试。如果你使用浏览器的plugin版本，或者是基于其他操作系统的版本，这都没问题，基本的操作和步骤都是一样的。</p>\n<p>具体的操作，主要包括：</p>\n<ol>\n<li>\n<p>发起API调用；</p>\n</li>\n<li>\n<p>添加结果验证；</p>\n</li>\n<li>\n<p>保存测试用例；</p>\n</li>\n<li>\n<p>基于Postman的测试代码自动生成。</p>\n</li>\n</ol>\n<p><strong>第一步，发起API调用</strong></p>\n<p>我们的目标是对Account API做测试，所以这里你需要选择Postmant的“Request”模块。进入相应界面后，你需要按照图5的提示依次执行以下三步操作，发起Account API的调用。</p>\n<ol>\n<li>\n<p>在endpoint输入框中输入“<a href=\"http://127.0.0.1:8080/account/ID_008\">http://127.0.0.1:8080/account/ID_008</a>”；</p>\n</li>\n<li>\n<p>选择“GET”方法；</p>\n</li>\n<li>\n<p>点击“Send”按钮发起API调用。</p>\n</li>\n</ol>\n<p><img src=\"https://static001.geekbang.org/resource/image/d7/b1/d7bc64b03f6296ffabf79ce6c938e1b1.png?wh=1281*797\" alt=\"\" /></p>\n<center>图5 Postman发起Account API的测试</center>\n<p>完成以上步骤后，界面如图6所示。我们看到返回的response默认以JSON文件的形式显示在下面的Body中。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/db/ce/db132983af623cee5835b01ecd37b5ce.png?wh=1277*797\" alt=\"\" /></p>\n<center>图6  Postman执行GET后的界面</center>\n<p>这样就完成了一次Account API的调用，是不是非常简单。但问题是，这只是一个API调用，并没有对调用结果进行自动化验证。接下来，我们就加上结果验证的部分，一起看看会有什么效果。</p>\n<p><strong>第二步，添加结果验证</strong></p>\n<p>在Postman中添加结果验证也非常方便，假定我们在Account API测试过程中有以下四个验证点：</p>\n<ol>\n<li>\n<p>请求的返回状态码（Status Code）应该是200；</p>\n</li>\n<li>\n<p>请求的响应时间应该小于200  ms；</p>\n</li>\n<li>\n<p>请求返回的response header中应该包含“Content-Type”参数；</p>\n</li>\n<li>\n<p>请求返回的response body中，“type”的值应该是“friends”；</p>\n</li>\n</ol>\n<p>那么，接下来我们一起来看看如何使用Postman来添加这四个验证点。</p>\n<p>为此，我们首先打开“Tests”界面，然后在右下角的“SNIPPETS”中依次点击：</p>\n<ol>\n<li>\n<p>“Status code: Code is 200”</p>\n</li>\n<li>\n<p>“Response time is less than 200  ms”</p>\n</li>\n<li>\n<p>“Response headers：Content-Type header check”</p>\n</li>\n<li>\n<p>“Response body: JSON value check”</p>\n</li>\n</ol>\n<p>完成以上操作后，“Tests”中会自动生成验证代码，接着只要按照具体的测试要求，对这些生成的代码进行一些小修改就可以了。</p>\n<p>在这个例子中，你只需修改需要验证的JSON键值对即可，即代码的第15行。修改完成后我们可以再次点击“Send”按钮发起测试。测试通过的界面如图7所示，最下面的“Test Results”显示四个测试全部通过。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/69/67/6988a0f511d9742b49f0514f46e1a967.png?wh=1248*895\" alt=\"\" /></p>\n<center>图7  测试通过的界面</center>\n<p><strong>第三步，保存测试用例</strong></p>\n<p>测试通过后，我们往往希望可以把这个测试request保存下来，以方便后续使用，为此Postman提供了保存测试request的功能，并提供了Collection来分类管理保存多个测试request。</p>\n<p>Collection是用来保存测试request的一个集合，Collection内部还可以建立目录结构以方便进一步的分类和管理。</p>\n<p>这里我们点击“Save As”按钮，在弹出的对话框中可以建立Collection，并且可以命名测试request并将其保存到Collection中。</p>\n<p>我建立了“API Test Demo”的Collection，并且将刚才的测试request命名为“AccountAPI”保存到这个Collection中。</p>\n<p>以后再要使用这个测试request时，直接在Collection中打开它，即可使用。同时你如果申请注册了一个Postman账号，就可以很方便地在多个环境中共享这个Collection了。</p>\n<p><strong>第四步，基于Postman的测试代码自动生成</strong></p>\n<p>至此，你已经掌握了Postman最基本的使用方法，但还有一个问题没有解决。很多时候，你希望将你的测试request作为回归测试用例集成到CI/CD的流程中，这就要求可以通过命令行的方式执行你的测试。为了达到这个目的，目前有两种做法：</p>\n<ol>\n<li><strong>将Postman中的测试request用自动化的方式直接转换成API测试的代码。</strong> 目前Postman已经支持这个功能了，可以将保存的测试request自动化转换成常见测试框架直接支持的代码，而且支持多语言。<br />\n比如，基于Java的“OK HTTP”和“Unirest”，基于Python的“http.client”和“Requests”，基于NodeJS的“Native”“Request”和“Unirest”，基于JavaScript的“JQuery AJAX”和“XHR”等等。你可以点击如图8所示的“Code”按钮进入代码生成界面。</li>\n</ol>\n<p><img src=\"https://static001.geekbang.org/resource/image/52/41/523124687d3551e1da9bbe300b0faf41.png?wh=1920*1155\" alt=\"\" /></p>\n<center>图8  自动生成API测试代码</center>\n<ol start=\"2\">\n<li><strong>利用Newman工具直接执行Postman的Collection。</strong> 你需要先将Postman中的Collection导出为JSON文件，然后执行以下命令行。</li>\n</ol>\n<pre><code>newman run examples/sample-collection.json;\n</code></pre>\n<h2>如何应对复杂场景的API测试？</h2>\n<p>我在前面分享的Restful API测试案例中，只涉及到了最基本的API的测试方法，而且测试场景也很比较简单（只是单个API的调用）。</p>\n<p>但在实际项目中，除了这种单个API的测试场景外，还有很多复杂场景的API测试。所以，为了解决你在实际项目中可能会碰到的一些问题，我再和你聊聊目前一些常见的典型复杂场景，以及相应的测试思路和方法。</p>\n<p><strong>测试场景一：被测业务操作是由多个API调用协作完成</strong></p>\n<p>很多情况下，一个单一的前端操作可能会触发后端一系列的API调用，由于前端测试的相对不稳定性，或者由于性能测试的要求，你必须直接从后端通过模拟API的顺序调用来模拟测试过程。</p>\n<p>这时，API的测试用例就不再是简单的单个API调用了，而是一系列API的调用，并且经常存在后一个API需要使用前一个API返回结果的情况，以及需要根据前一个API的返回结果决定后面应该调用哪个API的情况。</p>\n<p>好在，<strong>我们已经实现了API的调用和结果解析的代码化，这也就意味着我们可以很灵活地直接用代码来处理这些场景了。</strong> 比如，通过代码将上个API调用返回的response中的某个值传递给下一个API，再比如根据上一个API的返回结果决定下一个应该调用哪个API等。</p>\n<p>除此之外，<strong>我们还需要迫切解决的一个问题是：如何才能高效地获取单个前端操作所触发的API调用序列。</strong></p>\n<p>解决这个问题的核心思路是，通过网络监控的手段，捕获单个前端操作所触发的API调用序列。比如，通过类似于Fiddler之类的网络抓包工具，获取这个调用序列；又比如，目前很多互联网公司还在考虑基于用户行为日志，通过大数据手段来获取这个序列。</p>\n<p><strong>测试场景二：API测试过程中的第三方依赖</strong></p>\n<p>API之间是存在依赖关系的，比如你的被测对象是API A，但是API A的内部调用了API B，此时如果由于某种原因，API B在被测环境中处于不可用状态，那么API A的测试就会受到影响。</p>\n<p>在单体架构下，通常只会在涉及到第三方API集成的场景中才会遇到这个问题，所以还不算严重。但是，在微服务架构下，API间相互耦合的依赖问题就会非常严重。</p>\n<p>解决这个问题的核心思路是，启用Mock Server来代替真实的API。那么，Mock Server怎么才能真实有效地模拟被替代的API呢？这个问题，我会在分享《紧跟时代步伐：微服务模式下API测试要怎么做？》这个主题时，和你详细探讨。</p>\n<p><strong>测试场景三：异步API的测试</strong></p>\n<p>异步API是指，调用后会立即返回，但是实际任务并没有真正完成，而是需要稍后去查询或者回调（Callback）的API。</p>\n<p>一直以来，异步API测试都是API测试中比较困难的部分。<strong>在我看来，对异步API的测试主要分为两个部分：一是，测试异步调用是否成功，二是，测试异步调用的业务逻辑处理是否正确。</strong></p>\n<ul>\n<li>异步调用是否成功，这个还比较简单，主要检查返回值和后台工作线程是否被创建两个方面就可以了。</li>\n<li>但是，对异步调用业务逻辑的测试就比较复杂了，因为异步API通常发生在一些比较慢的操作上，比如数据库I/O、消息队列I/O等，此时测试往往需要去验证数据库中的值、消息队列中的值等，这就需要测试代码具有访问和操作数据库或者消息队列的能力。<br />\n在实际工程项目中，这些能力一般会在测试框架级别提供，也就是说要求API测试框架中包含对应的工具类去访问和操作数据库或者消息队列等。</li>\n</ul>\n<h2>总结</h2>\n<p>通常情况下，无论你采用什么API测试工具，基本的测试步骤往往都是三步，即准备测试数据（并不是所有的API测试都需要这一步）、通过API测试工具发起对被测API的request、验证返回结果的response。</p>\n<p>接下来，我通过一个简单的Restful API测试为例，和你分享了cURL和Postman这两个常用API测试工具的使用。</p>\n<p>其中，cURL只具备发起API调用的功能，而不具备结果验证能力，所以严格地说它并不属于测试工具的范畴。Postman常常被用于Web Service API的测试具体的操作，测试流程主要包括：发起API调用、添加结果验证、保存测试用例、基于Postman的测试代码自动生成。</p>\n<p>最后，为了帮你应对实际工程项目中复杂的API测试场景，我分享了被测业务操作是由多个API调用协作完成、API测试过程中的第三方依赖、异步API的测试，这三个复杂场景下的测试思路和方法。</p>\n<h2>思考题</h2>\n<p>单个API测试是比较简单的，但在实际项目中，往往存在按时序的API调用以及异步API调用，这类API你是如何测试的？遇到过什么难题，又是如何解决的？</p>\n<p>感谢你的收听，欢迎给我留言讨论。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":20434,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1534437523,"is_pvip":false,"replies":[{"id":"7208","content":"非常高质量的留言，👍，对于第四点，现在其实有个叫httprunner的api框架，底层就是封装了python的requests，然后通过写配置而不是写代码来完成api测试，其中就可以处理时序，传参数等问题，但是异步api还是没有太好的方法","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1534553027,"ip_address":"","comment_id":20434,"utype":1}],"discussion_count":2,"race_medal":0,"score":"113203587219","product_id":100009601,"comment_content":"1. 这么一对比的话，Postman 完胜 cURL，实际情况也是 Postman 的使用更加的广泛，特别是开发相互之间做接口对接时，Postman 可以很方便的甩锅。<br><br>2. Postman 的 Pre-request Script 功能，可以支持变量的传入，应该也可以解决 API 调用的时序问题，比如前一个接口的返回值作为当前接口的入参。<br><br>3. Postman 如果设置了多个 Workspace，并且有 Collections 在不同 Workspace 之间分享的话，貌似还是同一份，从一个 Workspace 删除后，另一个 Workspace 也会被同步删除，有点坑，千万注意，还好的就是 Postman 的 web 版提供了 Trash 可以恢复不小心错删的内容，前段时间刚刚踩过这个坑，请关注。<br><br>4. 如果是简单的 URL 测试，我觉得使用 Python 的 requests 库做下分层设计，应该也是比较简单的，而且会更加灵活，也更适合做为日常的回归执行，这样也可以解决茹老师提到的时序问题和异步调用问题了。<br><br>以上，欢迎沟通交流，公众号「sylan215」","like_count":27,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422246,"discussion_content":"非常高质量的留言，👍，对于第四点，现在其实有个叫httprunner的api框架，底层就是封装了python的requests，然后通过写配置而不是写代码来完成api测试，其中就可以处理时序，传参数等问题，但是异步api还是没有太好的方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534553027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2716977,"avatar":"","nickname":"张江涛","note":"","ucode":"7CB4F17A595CA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408531,"discussion_content":"总有一些场景是这个工具无法覆盖到的，比如:内部接口，只能通过服务器访问，那么curl也是个不错的选择","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635261299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38182,"user_name":"豆豆","can_delete":false,"product_type":"c1","uid":1248911,"ip_address":"","ucode":"84E948305D6023","user_header":"","comment_is_top":false,"comment_ctime":1541984068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"87441329988","product_id":100009601,"comment_content":"这课的展现效果不好，有种茶壶煮饺子的感觉","like_count":21},{"had_liked":false,"id":21246,"user_name":"文大头","can_delete":false,"product_type":"c1","uid":1167453,"ip_address":"","ucode":"465AD1CA5B6A1A","user_header":"https://static001.geekbang.org/account/avatar/00/11/d0/5d/9f9d73fe.jpg","comment_is_top":false,"comment_ctime":1534985602,"is_pvip":false,"replies":[{"id":"7746","content":"如果异步api没有callback接口，那么就只能用你所说的我方式，很棒的分享","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1535329617,"ip_address":"","comment_id":21246,"utype":1}],"discussion_count":2,"race_medal":0,"score":"70254462338","product_id":100009601,"comment_content":"说到异步，我现在的项目刚好有个场景，我使用jmeter压API，需要调用异步API创建一个东西，然后后台线程进行一系列操作后，更新这个东西的状态，我前端要等到他的状态变化后，再做下一步操作。具体做法是jmeter发起了创建操作后，循环执行一个查询状态操作，等到发现状态正常后再进行后续操作，或者状态异常&#47;超时后报错。有意思的是，如果后端数据库是个集群，这样测试，还能经常发现数据库集群的node间数据不同步的问题。","like_count":16,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422596,"discussion_content":"如果异步api没有callback接口，那么就只能用你所说的我方式，很棒的分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535329617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010779,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6c/5b/5bf2c4cc.jpg","nickname":"森馫鑫","note":"","ucode":"9509D3F430985A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42669,"discussion_content":"你好，我想了解一下这样不会导致测试时间很长么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572750879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21692,"user_name":"arthur","can_delete":false,"product_type":"c1","uid":1116981,"ip_address":"","ucode":"EAD9D9D2837C5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/35/2c56c29c.jpg","comment_is_top":false,"comment_ctime":1535252742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40189958406","product_id":100009601,"comment_content":"我们的项目中也有异步API调用的情况，作为开发，他们也需要知道操作什么时候完成，然后做出后续操作。这边的异步，开发都会在数据库的一张表插入运行信息，完成后做出相应修改。所以测试的时候，也是通过查数据库来判断异步是否完成。","like_count":9},{"had_liked":false,"id":21483,"user_name":"测试大王","can_delete":false,"product_type":"c1","uid":1210503,"ip_address":"","ucode":"3A5579E0B649BD","user_header":"https://static001.geekbang.org/account/avatar/00/12/78/87/66f6f2da.jpg","comment_is_top":false,"comment_ctime":1535110517,"is_pvip":false,"replies":[{"id":"7743","content":"postman可以批量执行，Newman的目的是为了可以从命令行发起测试，的确是为了持续集成","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1535329183,"ip_address":"","comment_id":21483,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40189816181","product_id":100009601,"comment_content":"小白请教个问题，Postman 可以批量执行(run)，为什么还需要newman ？是为了持续集成吗？","like_count":10,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422697,"discussion_content":"postman可以批量执行，Newman的目的是为了可以从命令行发起测试，的确是为了持续集成","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535329183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20469,"user_name":"楚耳","can_delete":false,"product_type":"c1","uid":1068208,"ip_address":"","ucode":"7661633F3297C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/b0/f22017b0.jpg","comment_is_top":false,"comment_ctime":1534466598,"is_pvip":false,"replies":[{"id":"7205","content":"Mock其实你可以简单想象成为了辅助你做测试而使用的真实api的替代品。如果用python一般都是用requests框架，这个框架的使用非常简单明了。api测试框架的设计就是下一篇文章的主题，我会从最简单的api框架讲起，逐渐过渡到先进的做法，期待一下吧","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1534552748,"ip_address":"","comment_id":20469,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40189172262","product_id":100009601,"comment_content":"老师能深入讲解下Mock这个东西嘛，我看你好几篇文章都提到这个东西。还有这篇API 测试感觉完全没尽兴，现在公司都是自己用python 写代码测试API ，能讲讲自己开发一套api 测试框架的相关设计吗","like_count":10,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422258,"discussion_content":"Mock其实你可以简单想象成为了辅助你做测试而使用的真实api的替代品。如果用python一般都是用requests框架，这个框架的使用非常简单明了。api测试框架的设计就是下一篇文章的主题，我会从最简单的api框架讲起，逐渐过渡到先进的做法，期待一下吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534552748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20499,"user_name":"DON    G","can_delete":false,"product_type":"c1","uid":1130527,"ip_address":"","ucode":"AF4587DC381F04","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/1f/7fac8712.jpg","comment_is_top":false,"comment_ctime":1534486669,"is_pvip":false,"replies":[{"id":"7213","content":"你说的这个异步和我说的异步应该不是一个概念，我这里指的异步api指调用后会立即返回，但是此时真正的任务还没有完成。","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1534553624,"ip_address":"","comment_id":20499,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23009323149","product_id":100009601,"comment_content":"异步api测试这块不太理解，我们现在基本都是用ajax实现异步请求，接口测试的时候就按照普通的接口进行测试，验证返回值，并没有对异步调用业务逻辑测试～ 🤔","like_count":5,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422276,"discussion_content":"你说的这个异步和我说的异步应该不是一个概念，我这里指的异步api指调用后会立即返回，但是此时真正的任务还没有完成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534553624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20671,"user_name":"静静张","can_delete":false,"product_type":"c1","uid":1163452,"ip_address":"","ucode":"B6C754D0F4A142","user_header":"https://static001.geekbang.org/account/avatar/00/11/c0/bc/c49e1eaa.jpg","comment_is_top":false,"comment_ctime":1534658011,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18714527195","product_id":100009601,"comment_content":"老师，这里的异步是多线程的意思吗？","like_count":3,"discussions":[{"author":{"id":1112210,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/92/eaafff96.jpg","nickname":"Amos","note":"","ucode":"61DB72D99AF9EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251649,"discussion_content":"异步区分于同步，同步是请求后服务端立刻做处理，再返回。而异步则不是，通常是为了防止高并发的请求对数据库或者服务器造成影响，所以加入了中间件比如MQ，或者调用方的请求，服务端收到后不立刻处理，而是先存着，等过15分钟或者30分钟一个批次再应答你的请求，同时通过http或者中间件把处理结果返回给调用方。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1588090058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1312893,"avatar":"https://static001.geekbang.org/account/avatar/00/14/08/7d/d95ce139.jpg","nickname":"隐石","note":"","ucode":"8C53A22BDE806E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1112210,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/92/eaafff96.jpg","nickname":"Amos","note":"","ucode":"61DB72D99AF9EA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537648,"discussion_content":"谢谢，三人行必有我师，哈哈，除了老师的授课，在评论区还可以学到不少知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639128820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":251649,"ip_address":""},"score":537648,"extra":""}]}]},{"had_liked":false,"id":267976,"user_name":"zyl","can_delete":false,"product_type":"c1","uid":2268472,"ip_address":"","ucode":"224D0F43EC5D27","user_header":"https://static001.geekbang.org/account/avatar/00/22/9d/38/a67f8d3c.jpg","comment_is_top":false,"comment_ctime":1608014864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14492916752","product_id":100009601,"comment_content":"摘要：<br>API测试的基本步骤：<br>1.\t准备测试数据（可选）<br>2.\t通过API测试工具发起对被测API的request<br>3.\t验证返回的response<br><br>Postman是目前使用最广泛的http请求模拟工具之一，常被用于Web Service API的测试，具体操作如下：<br>1.\t发起API调用<br>2.\t添加结果验证<br>3.\t保存测试用例<br>4.\t基于Postman的测试代码生成<br><br>如何应对复杂场景的API测试？<br>场景1：被测业务是由多个API调用协作完成<br>通过API调用和结果解析的代码化就可以灵活处理上述场景。通过抓包的方式获取单个操作触发的API调用序列。<br>场景2：API测试过程中的第三方依赖<br>启用mock server来代替真实API就能实现<br>场景3：异步API的测试<br>异步API指的是调用后立即返回，但是任务没有完成，需要后续去查询或者回调的API.<br>异步API的测试主要分为两部分：<br>1.\t测试异步调用是否成功<br>2.\t测试异步调用的业务逻辑处理是否正确。<br>","like_count":3},{"had_liked":false,"id":234868,"user_name":"捷后愚生","can_delete":false,"product_type":"c1","uid":1170483,"ip_address":"","ucode":"A1F935D39C8488","user_header":"https://static001.geekbang.org/account/avatar/00/11/dc/33/a68c6b26.jpg","comment_is_top":false,"comment_ctime":1594815541,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14479717429","product_id":100009601,"comment_content":"学习到了，api测试，其实就是我们平时所说的接口测试。<br>如何应对复杂场景的 API 测试？这部分总结得非常好，可以直接拿来应对面试啊 ！<br><br>接触了python+ requests、python+httprunner，这两个都是比较容易上手的。<br>其实接口测试时也会用到PO思想，这篇文章没有介绍，不知道后面老师会不会提到。","like_count":3},{"had_liked":false,"id":208485,"user_name":"Gavin","can_delete":false,"product_type":"c1","uid":1843155,"ip_address":"","ucode":"297C139733674D","user_header":"https://static001.geekbang.org/account/avatar/00/1c/1f/d3/6a108d88.jpg","comment_is_top":false,"comment_ctime":1587368283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10177302875","product_id":100009601,"comment_content":"最近也学习接口测试，不过是基于Jmeter这款工具。<br>之前我理解的接口测试就是对照接口文档，填写对应的请求，参数，通过断言验证返回结果。<br>不过对于不规范的接口文档，自己通过Fiddler抓包查看时不确定哪些请求有用，哪些请求没什么用。<br>而且对于那种订单提交需要传很多参数时，看着有点懵。<br>简单接口参数，一些常用的可能通过变量获取使用，但那种提交需要很多参数的，不知道如何下手了。","like_count":2},{"had_liked":false,"id":194918,"user_name":"帝痕","can_delete":false,"product_type":"c1","uid":1003245,"ip_address":"","ucode":"EAE31C2BB4DFAB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/ed/2a841d7d.jpg","comment_is_top":false,"comment_ctime":1585120751,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10175055343","product_id":100009601,"comment_content":"长期来看还是使用测试框架进行API测试会更加合适，特别是很多公司还有非HTTP协议的情况下（如thirft、dubbo、hsf等）","like_count":2},{"had_liked":false,"id":189229,"user_name":"不将就","can_delete":false,"product_type":"c1","uid":1168579,"ip_address":"","ucode":"9BEC01AEE1D885","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/c3/d41e8c79.jpg","comment_is_top":false,"comment_ctime":1584491237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174425829","product_id":100009601,"comment_content":"星主，您好，请问接口测试都要做数据库检查吗？","like_count":2},{"had_liked":false,"id":78648,"user_name":"小寞子。(≥3≤)","can_delete":false,"product_type":"c1","uid":1206545,"ip_address":"","ucode":"6D978BDCBB2862","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/11/831cec7d.jpg","comment_is_top":false,"comment_ctime":1553210532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10143145124","product_id":100009601,"comment_content":"不知道有没有听过lisa，CA。 我们在用这个做中间件测试。 测试各种API。 包含了消息队列。 SOAP。 各种不同的call。。 要自己建立stub来连接中间件之后做自动化测试。。。。 也是遇到了很多挑战。","like_count":2},{"had_liked":false,"id":37979,"user_name":"芭蕉桑","can_delete":false,"product_type":"c1","uid":1170729,"ip_address":"","ucode":"0E3A7CC962B24B","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/29/b3133c45.jpg","comment_is_top":false,"comment_ctime":1541838420,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"10131773012","product_id":100009601,"comment_content":"老师，我负责测试的一款APP最近完成了API测试的基本框架和测试代码，已经在迭代中试用了。但手工测试的用例编写数量和人力投入并没有减少。想请教一下老师，API测试如何运用才能有效地减少手工测试的人力投入呢？辛苦老师解答一下。","like_count":2,"discussions":[{"author":{"id":1672674,"avatar":"https://static001.geekbang.org/account/avatar/00/19/85/e2/540b91fa.jpg","nickname":"凯耐","note":"","ucode":"DF9C2170509BD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318806,"discussion_content":"有要什么场景下的api适合做自动化测试，如果自动化后需要大量消耗人力手工验证不如不做测试框架","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603853760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259549,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLnYfSUc8hJ3oLfa39qkNiaXNibs3VyAbgT7ZXasZXp89fRL7YBakIZdNNEE7kClOjN2KpBUuGpacfQ/132","nickname":"wanj","note":"","ucode":"BE9ECC67ABC004","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36843,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571450556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20968,"user_name":"family","can_delete":false,"product_type":"c1","uid":1172949,"ip_address":"","ucode":"EF2CA32A808E9E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e5/d5/5bca3e9d.jpg","comment_is_top":false,"comment_ctime":1534843355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10124777947","product_id":100009601,"comment_content":"能讲一下sdk的自动化测试么？","like_count":2},{"had_liked":false,"id":248465,"user_name":"学无止境，唯乐学习","can_delete":false,"product_type":"c1","uid":2088498,"ip_address":"","ucode":"A07775779E6440","user_header":"https://static001.geekbang.org/account/avatar/00/1f/de/32/8561a320.jpg","comment_is_top":false,"comment_ctime":1600173982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5895141278","product_id":100009601,"comment_content":"时序API调用，最常见在场景自动化，或则登录接口，场景自动化我之前应用了方法调用方法的方法，可以按照一个场景对应一个测试用例。登录的话，testNG框架有对应的注解BeforeSuite（在test suite中的所有test运行之前运行，只运行一次）然后缓存获取的token，可以再BeforeSuite注解的方法里，查询缓存在Redis里的token，有的话执行登录方法，无执行登录方法","like_count":1},{"had_liked":false,"id":57192,"user_name":"桃夭夭","can_delete":false,"product_type":"c1","uid":1228949,"ip_address":"","ucode":"6AB2E4BE500A6D","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/95/694658fd.jpg","comment_is_top":false,"comment_ctime":1546679064,"is_pvip":false,"replies":[{"id":"20851","content":"可以用testng，testng就像是个测试执行的框架。api是接口的一种类型，接口的定义会更加宽泛","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1546923508,"ip_address":"","comment_id":57192,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841646360","product_id":100009601,"comment_content":"老师，这个API测试也可以用testng来实现吧，是不是接口测试和API测试基本上算是同一个东西？","like_count":1,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435454,"discussion_content":"可以用testng，testng就像是个测试执行的框架。api是接口的一种类型，接口的定义会更加宽泛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546923508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38180,"user_name":"豆豆","can_delete":false,"product_type":"c1","uid":1248911,"ip_address":"","ucode":"84E948305D6023","user_header":"","comment_is_top":false,"comment_ctime":1541984006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5836951302","product_id":100009601,"comment_content":"这种课应该录制成视频，只是看图说话，没有演绎的过程理解起来很费劲。","like_count":1},{"had_liked":false,"id":35493,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1540626477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835593773","product_id":100009601,"comment_content":"1、老师为什么不用interface test，而用API test<br>2、Python 中的requests 您感觉如何？","like_count":1},{"had_liked":false,"id":20691,"user_name":"Xiye","can_delete":false,"product_type":"c1","uid":1062516,"ip_address":"","ucode":"9F8E73180435AF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIGzSM6be2xCNS00kQYHDgXO3icOoOSsvnz3FiaCov5Kgs6oaXkBicLbicuEerJjiaNPWxB0FTVmdur3kg/132","comment_is_top":false,"comment_ctime":1534672210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5829639506","product_id":100009601,"comment_content":"我目前的项目就有涉及到异步API测试，我们的Agent端产品是提供lib库，客户需要集成我们的li库到他们的产品。我们需要测试这些库公开的API函数。我们的某些API的参数就是callback回调函数，这些回调函数主要是处理网络传输，当时也是花了好长时间理解原理。我目前的做法就是自己写相应代码实现网络传输，构造正确的Response数据，错误Response数据，非正常的网络状态等看我们API处理结果。","like_count":1},{"had_liked":false,"id":20478,"user_name":"赵明月","can_delete":false,"product_type":"c1","uid":1168980,"ip_address":"","ucode":"01740873C03CD2","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/54/3127cab2.jpg","comment_is_top":false,"comment_ctime":1534470084,"is_pvip":false,"replies":[{"id":"7210","content":"所以这就是典型的postman的弱项，这也就是为什么很多比较大的工程实践并不会基于postman来做，下一篇文章会给出解决方案，就是用代码级的api测试框架","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1534553143,"ip_address":"","comment_id":20478,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5829437380","product_id":100009601,"comment_content":"postman预处理部分，是使用JS来产生请求报文中的字段取值，比如md5计算sign之类，在计算签名时候，把一大段JS实现的md5方法贴进预处理部分，进而调用，感觉很low啊，求教老师一般怎么写。","like_count":1,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422264,"discussion_content":"所以这就是典型的postman的弱项，这也就是为什么很多比较大的工程实践并不会基于postman来做，下一篇文章会给出解决方案，就是用代码级的api测试框架","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534553143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324459,"user_name":"小呀么小二郎","can_delete":false,"product_type":"c1","uid":1326905,"ip_address":"","ucode":"149540DCFDF43E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/39/b1558fc9.jpg","comment_is_top":false,"comment_ctime":1638442351,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638442351","product_id":100009601,"comment_content":"之前做过接口测试，也用过postman，对这节课内容理解相对容易。<br>cURL之前没用过，现在下载了，研究一下。<br>接口测试还是要重点关注三个复杂场景的API测试。","like_count":0},{"had_liked":false,"id":201365,"user_name":"Stefan","can_delete":false,"product_type":"c1","uid":1819057,"ip_address":"","ucode":"119B0A16EDD909","user_header":"https://static001.geekbang.org/account/avatar/00/1b/c1/b1/0013c670.jpg","comment_is_top":false,"comment_ctime":1585756386,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585756386","product_id":100009601,"comment_content":"小白请教：异步调用是否成功，如何验证后台工作线程是否被创建呢？","like_count":0,"discussions":[{"author":{"id":1672674,"avatar":"https://static001.geekbang.org/account/avatar/00/19/85/e2/540b91fa.jpg","nickname":"凯耐","note":"","ucode":"DF9C2170509BD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318810,"discussion_content":"看日志异步线程是否执行正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603854086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194915,"user_name":"帝痕","can_delete":false,"product_type":"c1","uid":1003245,"ip_address":"","ucode":"EAE31C2BB4DFAB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/ed/2a841d7d.jpg","comment_is_top":false,"comment_ctime":1585120518,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585120518","product_id":100009601,"comment_content":"推荐pinpoint来进行服务链路调用追踪","like_count":0},{"had_liked":false,"id":182404,"user_name":"良人","can_delete":false,"product_type":"c1","uid":1876652,"ip_address":"","ucode":"2908A5CD5AF997","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a2/ac/0c49f628.jpg","comment_is_top":false,"comment_ctime":1582781781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582781781","product_id":100009601,"comment_content":"这真的是测试工程师","like_count":0},{"had_liked":false,"id":171693,"user_name":"iG_ALLEN","can_delete":false,"product_type":"c1","uid":1754465,"ip_address":"","ucode":"C68BCE511D29D5","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c5/61/fcddaa59.jpg","comment_is_top":false,"comment_ctime":1578992482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578992482","product_id":100009601,"comment_content":"《紧跟时代步伐：微服务模式下 API 测试要怎么做？》 期待这个","like_count":0},{"had_liked":false,"id":151772,"user_name":"泡芙","can_delete":false,"product_type":"c1","uid":1591817,"ip_address":"","ucode":"4102FCB907D2DA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoREZlw6JWh1Bw1Qwq2IvG2xser2ibJlEwibB3YXTKXwiaibqF3Ty7Ya2R3TpUH45FicicmEqDK32R68ZQA/132","comment_is_top":false,"comment_ctime":1573788528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573788528","product_id":100009601,"comment_content":"这里说的API测试都是依靠工具的吗？可以谈一下不依靠工具的接口测试自动化的框架吗","like_count":0},{"had_liked":false,"id":139949,"user_name":"Geek_guzhenhua","can_delete":false,"product_type":"c1","uid":1696143,"ip_address":"","ucode":"F55AC940223702","user_header":"https://static001.geekbang.org/account/avatar/00/19/e1/8f/46c8b66f.jpg","comment_is_top":false,"comment_ctime":1570771898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570771898","product_id":100009601,"comment_content":"接口测试的用例应该如何设计，如果参数很多，是否需要按照功能测试的用例设计方法，组合起来的参数的接口测试用例会很多。希望老师解答一下","like_count":1},{"had_liked":false,"id":139594,"user_name":"Snowy.","can_delete":false,"product_type":"c1","uid":1689484,"ip_address":"","ucode":"160E473B82229A","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/8c/d3195d4b.jpg","comment_is_top":false,"comment_ctime":1570687213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570687213","product_id":100009601,"comment_content":"老师请问一下测试驱动开发TDD对平常测试帮助大嘛","like_count":0},{"had_liked":false,"id":135889,"user_name":"candy","can_delete":false,"product_type":"c1","uid":1390883,"ip_address":"","ucode":"C9D797C7ABCE53","user_header":"","comment_is_top":false,"comment_ctime":1569292782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569292782","product_id":100009601,"comment_content":"老师，想知道SDK的测试如何进行，是否会介绍？","like_count":0},{"had_liked":false,"id":85077,"user_name":"口水窝","can_delete":false,"product_type":"c1","uid":1004838,"ip_address":"","ucode":"6028B5AA10D8A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/26/154f9578.jpg","comment_is_top":false,"comment_ctime":1554973218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554973218","product_id":100009601,"comment_content":"很难的场景没有做过，以前做过创建订单，发货，收货的接口测试，但是也是分开去跑的，没有直接串联起来。今天学习了两个工具：cURL和postman，实践利用，感觉不错。","like_count":0},{"had_liked":false,"id":35495,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1540626666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540626666","product_id":100009601,"comment_content":"老师这里的API测试与Interface测试有什么区别<br>Python 的requests 可以完成您所说的API测试吗？","like_count":0},{"had_liked":false,"id":20623,"user_name":"星","can_delete":false,"product_type":"c1","uid":1120535,"ip_address":"","ucode":"9CC01CCE72C893","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/17/a2d9d515.jpg","comment_is_top":false,"comment_ctime":1534601201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1534601201","product_id":100009601,"comment_content":"你好，想请教一下api测试是否应该和业务关键？还是只保证api单个功能正常就好？","like_count":0},{"had_liked":false,"id":20522,"user_name":"five years","can_delete":false,"product_type":"c1","uid":1166159,"ip_address":"","ucode":"47E31089DB644F","user_header":"https://static001.geekbang.org/account/avatar/00/11/cb/4f/5bcf31f7.jpg","comment_is_top":false,"comment_ctime":1534509034,"is_pvip":false,"replies":[{"id":"7214","content":"一共有三篇api的文章，后年会讲api测试框架和消费者契约测试，希望对你有帮助","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1534553672,"ip_address":"","comment_id":20522,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534509034","product_id":100009601,"comment_content":"哈哈，终于等到api啦","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422286,"discussion_content":"一共有三篇api的文章，后年会讲api测试框架和消费者契约测试，希望对你有帮助","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534553672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20500,"user_name":"DON    G","can_delete":false,"product_type":"c1","uid":1130527,"ip_address":"","ucode":"AF4587DC381F04","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/1f/7fac8712.jpg","comment_is_top":false,"comment_ctime":1534487120,"is_pvip":false,"replies":[{"id":"7212","content":"你指的返回成功是指异步api调用的返回还是callback的返回，如果是异步api调用的返回，那么此时后台的真实业务操作并没有完成，如果是callback的返回，就需要验证业务逻辑是否被正确完成了。","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1534553532,"ip_address":"","comment_id":20500,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534487120","product_id":100009601,"comment_content":"异步调用返回成功的时候，前提都是基于数据库操作成功的吧，为什么还要再去验证数据库中的值呢？","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422277,"discussion_content":"你指的返回成功是指异步api调用的返回还是callback的返回，如果是异步api调用的返回，那么此时后台的真实业务操作并没有完成，如果是callback的返回，就需要验证业务逻辑是否被正确完成了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534553532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20481,"user_name":"Geek_558041","can_delete":false,"product_type":"c1","uid":1175623,"ip_address":"","ucode":"E630A0B7BDEE4B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/47/cc3c862d.jpg","comment_is_top":false,"comment_ctime":1534471876,"is_pvip":false,"replies":[{"id":"7204","content":"第一问题是很典型的，就是需要拿到前一个api的返回token然后传给后年的api作为参数，基于代码的api框架完全支持这种操作。测试环境是否一定要依赖mock取决于你的应用架构，如果有可用的service尽量用真的，只有真的service难以返回你要的结果去覆盖更多的情况时，才考虑采用mock。mock的协议一般是由开发人员提供，但是在微服务架构下，又是另一种情况，后面的文章会专门讲。","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1534552532,"ip_address":"","comment_id":20481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534471876","product_id":100009601,"comment_content":"这个是基本的接口测试，但是实际工作中，为了防止接口被刷通常都有验签功能，这一步怎么根据不同签名自动化.此外，测试环境基本依赖mock,包括各种正常场景和异常数据，mock是自己开发的吗？因为要支持不同的协议调用。如果使用mock，测试环境自动化似乎没有入参参数化的必要？请教老师","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422267,"discussion_content":"第一问题是很典型的，就是需要拿到前一个api的返回token然后传给后年的api作为参数，基于代码的api框架完全支持这种操作。测试环境是否一定要依赖mock取决于你的应用架构，如果有可用的service尽量用真的，只有真的service难以返回你要的结果去覆盖更多的情况时，才考虑采用mock。mock的协议一般是由开发人员提供，但是在微服务架构下，又是另一种情况，后面的文章会专门讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534552532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20460,"user_name":"楚耳","can_delete":false,"product_type":"c1","uid":1068208,"ip_address":"","ucode":"7661633F3297C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/b0/f22017b0.jpg","comment_is_top":false,"comment_ctime":1534465224,"is_pvip":false,"replies":[{"id":"7206","content":"哈哈，一定程度上是的","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1534552785,"ip_address":"","comment_id":20460,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534465224","product_id":100009601,"comment_content":"这么说wget 命令也算一个工具了","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422255,"discussion_content":"哈哈，一定程度上是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534552785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20451,"user_name":"产品助理","can_delete":false,"product_type":"c1","uid":1019821,"ip_address":"","ucode":"39A76D346A96E9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/ad/6e3e9e15.jpg","comment_is_top":false,"comment_ctime":1534463619,"is_pvip":false,"replies":[{"id":"7207","content":"对的，这个是很典型的场景，后面一篇文章马上会来讲","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1534552835,"ip_address":"","comment_id":20451,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1534463619","product_id":100009601,"comment_content":"一直以来，仅对postman最基本的发送请求功能有所了解。通过今天的分享才知道，原来postman有如此多的功能，工具还是要多研究。<br><br>api依赖测试的场景例如接口1需要下单，接口2基于目标订单查询信息。相互依赖后场景变得复杂，测试成本变高，期待后续分享了解业界问题成熟解决方案。","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422252,"discussion_content":"对的，这个是很典型的场景，后面一篇文章马上会来讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534552835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}