{"id":156181,"title":"36 | HTTPS：让数据传输更安全","content":"<p>浏览器安全主要划分为三大块内容：页面安全、系统安全和网络安全。前面我们用四篇文章介绍了页面安全和系统安全，也聊了浏览器和Web开发者是如何应对各种类型的攻击，本文是我们专栏的最后一篇，我们就接着来聊聊网络安全协议HTTPS。</p><p>我们先从HTTP的明文传输的特性讲起，在上一个模块的三篇文章中我们分析过，起初设计HTTP协议的目的很单纯，就是为了传输超文本文件，那时候也没有太强的加密传输的数据需求，所以HTTP一直保持着明文传输数据的特征。但这样的话，在传输过程中的每一个环节，数据都有可能被窃取或者篡改，这也意味着你和服务器之间还可能有个中间人，你们在通信过程中的一切内容都在中间人的掌握中，如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/11/e2/118ced11537bd1e257f8df09380f33e2.png?wh=1142*508\" alt=\"\"></p><center><span class=\"reference\">中间人攻击</span></center><p>从上图可以看出，我们使用HTTP传输的内容很容易被中间人窃取、伪造和篡改，通常我们把这种攻击方式称为<strong>中间人攻击</strong>。</p><p>具体来讲，在将HTTP数据提交给TCP层之后，数据会经过用户电脑、WiFi路由器、运营商和目标服务器，在这中间的每个环节中，数据都有可能被窃取或篡改。比如用户电脑被黑客安装了恶意软件，那么恶意软件就能抓取和篡改所发出的HTTP请求的内容。或者用户一不小心连接上了WiFi钓鱼路由器，那么数据也都能被黑客抓取或篡改。</p><!-- [[[read_end]]] --><h2>在HTTP协议栈中引入安全层</h2><p>鉴于HTTP的明文传输使得传输过程毫无安全性可言，且制约了网上购物、在线转账等一系列场景应用，于是倒逼着我们要引入<strong>加密方案</strong>。</p><p>从HTTP协议栈层面来看，我们可以在TCP和HTTP之间插入一个安全层，所有经过安全层的数据都会被加密或者解密，你可以参考下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/cf/9e99f797de30a15a11b0e4b4c8f810cf.png?wh=1142*502\" alt=\"\"></p><center><span class=\"reference\">HTTP VS HTTPS</span></center><p>从图中我们可以看出HTTPS并非是一个新的协议，通常HTTP直接和TCP通信，HTTPS则先和安全层通信，然后安全层再和TCP层通信。也就是说HTTPS所有的安全核心都在安全层，它不会影响到上面的HTTP协议，也不会影响到下面的TCP/IP，因此要搞清楚HTTPS是如何工作的，就要弄清楚安全层是怎么工作的。</p><p>总的来说，安全层有两个主要的职责：<strong>对发起HTTP请求的数据进行加密操作</strong>和<strong>对接收到HTTP的内容进行解密操作</strong>。</p><p>我们知道了安全层最重要的就是加解密，那么接下来我们就利用这个安全层，一步一步实现一个从简单到复杂的HTTPS协议。</p><h2>第一版：使用对称加密</h2><p>提到加密，最简单的方式是使用对称加密。所谓<strong>对称加密是指加密和解密都使用的是相同的密钥</strong>。</p><p>了解了对称加密，下面我们就使用对称加密来实现第一版的HTTPS。</p><p>要在两台电脑上加解密同一个文件，我们至少需要知道加解密方式和密钥，因此，在HTTPS发送数据之前，浏览器和服务器之间需要协商加密方式和密钥，过程如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/3b/d86648267d5504c7813b2d692620503b.png?wh=1142*551\" alt=\"\"></p><center><span class=\"reference\">使用对称加密实现HTTPS</span></center><p>通过上图我们可以看出，HTTPS首先要协商加解密方式，这个过程就是HTTPS建立安全连接的过程。为了让加密的密钥更加难以破解，我们让服务器和客户端同时决定密钥，具体过程如下：</p><ul>\n<li>浏览器发送它所支持的加密套件列表和一个随机数client-random，这里的<strong>加密套件是指加密的方法</strong>，加密套件列表就是指浏览器能支持多少种加密方法列表。</li>\n<li>服务器会从加密套件列表中选取一个加密套件，然后还会生成一个随机数service-random，并将service-random和加密套件列表返回给浏览器。</li>\n<li>最后浏览器和服务器分别返回确认消息。</li>\n</ul><p>这样浏览器端和服务器端都有相同的client-random和service-random了，然后它们再使用相同的方法将client-random和service-random混合起来生成一个密钥master secret，有了密钥master secret和加密套件之后，双方就可以进行数据的加密传输了。</p><p>通过将对称加密应用在安全层上，我们实现了第一个版本的HTTPS，虽然这个版本能够很好地工作，但是其中传输client-random和service-random的过程却是明文的，这意味着黑客也可以拿到协商的加密套件和双方的随机数，由于利用随机数合成密钥的算法是公开的，所以黑客拿到随机数之后，也可以合成密钥，这样数据依然可以被破解，那么黑客也就可以使用密钥来伪造或篡改数据了。</p><h2>第二版：使用非对称加密</h2><p>不过非对称加密能够解决这个问题，因此接下来我们就利用非对称加密来实现我们第二版的HTTPS，不过在讨论具体的实现之前，我们先看看什么是非对称加密。</p><p>和对称加密只有一个密钥不同，<strong>非对称加密算法有A、B两把密钥，如果你用A密钥来加密，那么只能使用B密钥来解密；反过来，如果你要B密钥来加密，那么只能用A密钥来解密</strong>。</p><p>在HTTPS中，服务器会将其中的一个密钥通过明文的形式发送给浏览器，我们把这个密钥称为<strong>公钥</strong>，服务器自己留下的那个密钥称为<strong>私钥</strong>。顾名思义，<strong>公钥是每个人都能获取到的，而私钥只有服务器才能知道，不对任何人公开</strong>。下图是使用非对称加密改造的HTTPS协议：</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/50/b2b893921491c62b29aaddc1d4fa9550.png?wh=1142*592\" alt=\"\"></p><center><span class=\"reference\">非对称加密实现HTTPS</span></center><p>根据该图，我们来分析下使用非对称加密的请求流程。</p><ul>\n<li>首先浏览器还是发送加密套件列表给服务器。</li>\n<li>然后服务器会选择一个加密套件，不过和对称加密不同的是，使用非对称加密时服务器上需要有用于浏览器加密的公钥和服务器解密HTTP数据的私钥，由于公钥是给浏览器加密使用的，因此服务器会将加密套件和公钥一道发送给浏览器。</li>\n<li>最后就是浏览器和服务器返回确认消息。</li>\n</ul><p>这样浏览器端就有了服务器的公钥，在浏览器端向服务器端发送数据时，就可以使用该公钥来加密数据。由于公钥加密的数据只有私钥才能解密，所以即便黑客截获了数据和公钥，他也是无法使用公钥来解密数据的。</p><p>因此采用非对称加密，就能保证浏览器发送给服务器的数据是安全的了，这看上去似乎很完美，不过这种方式依然存在两个严重的问题。</p><ul>\n<li><strong>第一个是非对称加密的效率太低</strong>。这会严重影响到加解密数据的速度，进而影响到用户打开页面的速度。</li>\n<li><strong>第二个是无法保证服务器发送给浏览器的数据安全</strong>。虽然浏览器端可以使用公钥来加密，但是服务器端只能采用私钥来加密，私钥加密只有公钥能解密，但黑客也是可以获取得到公钥的，这样就不能保证服务器端数据的安全了。</li>\n</ul><h2>第三版：对称加密和非对称加密搭配使用</h2><p>基于以上两点原因，我们最终选择了一个更加完美的方案，那就是<strong>在传输数据阶段依然使用对称加密，但是对称加密的密钥我们采用非对称加密来传输</strong>。下图就是改造后的版本：</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/45/d5cd34dbf3636ebc0e809aa424c53845.png?wh=1670*1022\" alt=\"\"></p><center><span class=\"reference\">混合加密实现HTTPS</span></center><p>从图中可以看出，改造后的流程是这样的：</p><ul>\n<li>首先浏览器向服务器发送对称加密套件列表、非对称加密套件列表和随机数client-random；</li>\n<li>服务器保存随机数client-random，选择对称加密和非对称加密的套件，然后生成随机数service-random，向浏览器发送选择的加密套件、service-random和公钥；</li>\n<li>浏览器保存公钥，并生成随机数pre-master，然后利用公钥对pre-master加密，并向服务器发送加密后的数据；</li>\n<li>最后服务器拿出自己的私钥，解密出pre-master数据，并返回确认消息。</li>\n</ul><p>到此为止，服务器和浏览器就有了共同的client-random、service-random和pre-master，然后服务器和浏览器会使用这三组随机数生成<strong>对称密钥</strong>，因为服务器和浏览器使用同一套方法来生成密钥，所以最终生成的密钥也是相同的。</p><p>有了对称加密的密钥之后，双方就可以使用对称加密的方式来传输数据了。</p><p>需要特别注意的一点，<strong>pre-master是经过公钥加密之后传输的，所以黑客无法获取到pre-master，这样黑客就无法生成密钥，也就保证了黑客无法破解传输过程中的数据了</strong>。</p><h2>第四版：添加数字证书</h2><p>通过对称和非对称混合方式，我们完美地实现了数据的加密传输。不过这种方式依然存在着问题，比如我要打开极客时间的官网，但是黑客通过DNS劫持将极客时间官网的IP地址替换成了黑客的IP地址，这样我访问的其实是黑客的服务器了，黑客就可以在自己的服务器上实现公钥和私钥，而对浏览器来说，它完全不知道现在访问的是个黑客的站点。</p><p>所以我们还需要服务器向浏览器提供证明“我就是我”，那怎么证明呢？</p><p>这里我们结合实际生活中的一个例子，比如你要买房子，首先你需要给房管局提交你买房的材料，包括银行流水、银行证明、身份证等，然后房管局工作人员在验证无误后，会发给你一本盖了章的房产证，房产证上包含了你的名字、身份证号、房产地址、实际面积、公摊面积等信息。</p><p>在这个例子中，你之所以能证明房子是你自己的，是因为引进了房管局这个<strong>权威机构</strong>，并通过这个权威机构给你颁发一个<strong>证书</strong>：房产证。</p><p>同理，极客时间要证明这个服务器就是极客时间的，也需要使用权威机构颁发的证书，这个权威机构称为<strong>CA（Certificate Authority）</strong>，颁发的证书就称为<strong>数字证书（Digital Certificate)</strong>。</p><p>对于浏览器来说，数字证书有两个作用：一个是通过数字证书向浏览器证明服务器的身份，另一个是数字证书里面包含了服务器公钥。</p><p>接下来我们看看含有数字证书的HTTPS的请求流程，你可以参考下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/77/af/77c852ff2202b2b7bb3299a96a0f4aaf.png?wh=1668*1160\" alt=\"\"></p><center><span class=\"reference\">完整的HTTPS请求流程</span></center><p>相较于第三版的HTTPS协议，这里主要有两点改变：</p><ol>\n<li>服务器没有直接返回公钥给浏览器，而是返回了数字证书，而公钥正是包含在数字证书中的；</li>\n<li>在浏览器端多了一个证书验证的操作，验证了证书之后，才继续后续流程。</li>\n</ol><p>通过引入数字证书，我们就实现了服务器的身份认证功能，这样即便黑客伪造了服务器，但是由于证书是没有办法伪造的，所以依然无法欺骗用户。</p><h2>数字证书的申请和验证</h2><p>通过上面四个版本的迭代，我们实现了目前的HTTPS架构。</p><p>在第四版的HTTPS中，我们提到过，有了数字证书，黑客就无法欺骗用户了，不过我们并没有解释清楚如何通过数字证书来证明用户身份，所以接下来我们再来把这个问题解释清楚。</p><h3>如何申请数字证书</h3><p>我们先来看看如何向CA申请证书。比如极客时间需要向某个CA去申请数字证书，通常的申请流程分以下几步：</p><ul>\n<li>首先极客时间需要准备一套私钥和公钥，私钥留着自己使用；</li>\n<li>然后极客时间向CA机构提交公钥、公司、站点等信息并等待认证，这个认证过程可能是收费的；</li>\n<li>CA通过线上、线下等多种渠道来验证极客时间所提供信息的真实性，如公司是否存在、企业是否合法、域名是否归属该企业等；</li>\n<li>如信息审核通过，CA 会向极客时间签发认证的数字证书，包含了极客时间的公钥、组织信息、CA 的信息、有效时间、证书序列号等，这些信息都是明文的，同时包含一个CA生成的签名。</li>\n</ul><p>这样我们就完成了极客时间数字证书的申请过程。前面几步都很好理解，不过最后一步数字签名的过程还需要解释下：首先CA使用<strong>Hash函数</strong>来计算极客时间提交的明文信息，并得出<strong>信息摘要</strong>；然后CA再使用它的私钥对信息摘要进行加密，<strong>加密后的密文就是CA颁给极客时间的数字签名</strong>。这就相当于房管局在房产证上盖的章，这个章是可以去验证的，同样我们也可以通过数字签名来验证是否是该CA颁发的。</p><h3>浏览器如何验证数字证书</h3><p>有了CA签名过的数字证书，当浏览器向极客时间服务器发出请求时，服务器会返回数字证书给浏览器。</p><p>浏览器接收到数字证书之后，会对数字证书进行验证。首先浏览器读取证书中相关的明文信息，采用CA签名时相同的Hash函数来计算并得到<strong>信息摘要A</strong>；然后再利用对应 CA 的公钥解密签名数据，得到<strong>信息摘要B</strong>；对比信息摘要A和信息摘要B，如果一致，则可以确认证书是合法的，即证明了这个服务器是极客时间的；同时浏览器还会验证证书相关的域名信息、有效时间等信息。</p><p>这时候相当于验证了CA是谁，但是这个CA可能比较小众，浏览器不知道该不该信任它，然后浏览器会继续查找给这个CA颁发证书的CA，再以同样的方式验证它上级CA的可靠性。通常情况下，操作系统中会内置信任的顶级 CA 的证书信息（包含公钥），如果这个CA链中没有找到浏览器内置的顶级的CA，证书也会被判定非法。</p><p>另外，在申请和使用证书的过程中，还需要注意以下三点：</p><ol>\n<li>申请数字证书是不需要提供私钥的，要确保私钥永远只能由服务器掌握；</li>\n<li>数字证书最核心的是CA使用它的私钥生成的数字签名；</li>\n<li>内置 CA 对应的证书称为根证书，根证书是最权威的机构，它们自己为自己签名，我们把这称为自签名证书。</li>\n</ol><h2>总结</h2><p>好了，今天就介绍到这里，下面我来总结下本文的主要内容。</p><p>由于HTTP的明文传输特性，在传输过程中的每一个环节，数据都有可能被窃取或者篡改，这倒逼着我们需要引入加密机制。于是我们在HTTP协议栈的TCP和HTTP层之间插入了一个安全层，负责数据的加密和解密操作。</p><p>我们使用对称加密实现了安全层，但是由于对称加密的密钥需要明文传输，所以我们又将对称加密改造成了非对称加密。但是非对称加密效率低且不能加密服务器到浏览器端的数据，于是我们又继续改在安全层，采用对称加密的方式加密传输数据和非对称加密的方式来传输密钥，这样我们就解决传输效率和两端数据安全传输的问题。</p><p>采用这种方式虽然能保证数据的安全传输，但是依然没办法证明服务器是可靠的，于是又引入了数字证书，数字证书是由CA签名过的，所以浏览器能够验证该证书的可靠性。</p><p>另外百看不如一试，我建议你自己亲手搭建一个HTTPS的站点，可以去freeSSL申请免费证书。链接我已经放在文中了：</p><ul>\n<li>中文：<a href=\"https://freessl.cn/\">https://freessl.cn/</a></li>\n<li>英文：<a href=\"https://www.freessl.com/\">https://www.freessl.com/</a></li>\n</ul><h2>思考时间</h2><p>今天留给你的作业：结合前面的文章以及本文，你来总结一下HTTPS的握手过程。</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":144934,"user_name":"成楠Peter","can_delete":false,"product_type":"c1","uid":1252977,"ip_address":"","ucode":"4D13E7368D8CF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","comment_is_top":false,"comment_ctime":1572103499,"is_pvip":false,"replies":[{"id":"56409","content":"<br><br><br>我们先从证书类型开始：<br><br>我们知道CA是一个机构，它的职责是给一些公司或者个人颁发数字证书，在颁发证书之前，有一个重要的环节，就是审核申请者所提交资料的合法性和合规性。<br>不过申请者的类型有很多：<br><br>如果申请者是个人，CA只需要审核所域名的所有权就行了，审核域名所有权有很多中方法，在常用的方法是让申请者在域名上放一个文件，然后CA验证该文件是否存在，即可证明该域名是否是申请者的。我们把这类数字证书称为DV，审核这种个人域名信息是最简单的，因此CA收取的费用也是最低的，有些CA甚至免费为个人颁发数字证书。<br><br>如果申请者是普通公司，那么CA除了验证域名的所有权之外，还需要验证公司公司的合法性，这类证书通常称为OV。由于需要验证公司的信息，所有需要额外的资料，而且审核过程也更加复杂，申请OV证书的价格也更高，主要是由于验证公司的合法性是需要人工成本的。<br><br>如果申请者是一些金融机构、银行、电商平台等，所以还需额外的要验证一些经营资质是否合法合规，这类证书称为EV。申请EV的价格非常高，甚至达到好几万一年，因为需要人工验证更多的内容。<br><br>好了，我们了解了证书有很多种不同的类型，DV这种就可以自动审核，不过OV、EV这种类型的证书就需要人工验证了，而每个地方的验证方式又可能不同，比如你是一家美国本地的CA公司，要给中国的一些金融公司发放数字证书，这过程种验证证书就会遇到问题，因此就需要本地的CA机构，他们验证会更加容易。<br><br>因此，就全球就有很多家CA机构，然后就出现了一个问题，这些CA是怎么证明它自己是安全的？如果一个恶意的公司也成立了一个CA机构，然后给自己颁发证书，那么这就非常危险了，因此我们必须还要实现一个机制，让CA证明它自己是安全无公害的。<br><br>这就涉及到数字证书链了。<br><br>要讲数字证书链，就要了解我们的CA机构也是分两种类型的，中间CA(Intermediates CAs)和根CA(Root CAs)，通常申请者都是向中间CA去申请证书的，而根CA作用就是给中间CA做认证，通常，一个根CA会认证很多中间的CA，而这些中间CA又可以去认证其它的中间CA。<br><br> 比如你可以在Chrome上打开极客时间的官网，然后点击地址栏前面的那把小锁，你就可以看到*.geekbang,org的证书是由中间CA  GeoTrust RSA CA2018颁发的，而中间CA GeoTrust RSA CA2018又是由根CA DigiCert Global Root CA颁发的，所以这个证书链就是：*.geekbang,org---&gt;GeoTrust RSA CA2018--&gt;DigiCert Global Root CA。<br><br>因此浏览器验证极客时间的证书时，会先验证*.geekbang,org的证书，如果合法在验证中间CA的证书，如果中间CA也是合法的，那么浏览器会继续验证这个中间CA的根证书。<br><br>这时候问题又来了，怎么证明根证书是合法的？<br><br>浏览器的做法很简单，它会查找系统的根证书，如果这个根证书在操作系统里面，那么浏览器就认为这个根证书是合法的，如果验证的根证书不在操作系统里面，那么就是不合法的。<br><br>而操作系统里面这些内置的根证书也不是随便内置的，这些根CA都是通过WebTrust国际安全审计认证。<br><br>那么什么又是WebTrust认证？<br><br>WebTrust（网络信任）认证是电子认证服务行业中唯一的国际性认证标准，主要对互联网服务商的系统及业务运作的商业惯例和信息隐私，交易完整性和安全性。WebTrust认证是各大主流的浏览器、微软等大厂商支持的标准，是规范CA机构运营服务的国际标准。在浏览器厂商根证书植入项目中，必要的条件就是要通过WebTrust认证，才能实现浏览器与数字证书的无缝嵌入。<br><br>目前通过WebTrust认证的根CA有 Comodo，geotrust，rapidssl，symantec，thawte，digicert等。也就是说，这些根CA机构的根证书都内置在个大操作系统中，只要能从数字证书链往上追溯到这几个根证书，浏览器会认为使用者的证书是合法的。<br><br>这也同时回答了你上面的问题。","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572446140,"ip_address":"","comment_id":144934,"utype":1}],"discussion_count":12,"race_medal":0,"score":"594277590347","product_id":100033601,"comment_content":"我有一个地方不是很理解。CA的公钥，浏览器是怎么拿到的。是浏览器第一次请求服务器的时候，CA机构给浏览器的吗？求大神或者老师解答","like_count":139,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472173,"discussion_content":"\n\n\n我们先从证书类型开始：\n\n我们知道CA是一个机构，它的职责是给一些公司或者个人颁发数字证书，在颁发证书之前，有一个重要的环节，就是审核申请者所提交资料的合法性和合规性。\n不过申请者的类型有很多：\n\n如果申请者是个人，CA只需要审核所域名的所有权就行了，审核域名所有权有很多中方法，在常用的方法是让申请者在域名上放一个文件，然后CA验证该文件是否存在，即可证明该域名是否是申请者的。我们把这类数字证书称为DV，审核这种个人域名信息是最简单的，因此CA收取的费用也是最低的，有些CA甚至免费为个人颁发数字证书。\n\n如果申请者是普通公司，那么CA除了验证域名的所有权之外，还需要验证公司公司的合法性，这类证书通常称为OV。由于需要验证公司的信息，所有需要额外的资料，而且审核过程也更加复杂，申请OV证书的价格也更高，主要是由于验证公司的合法性是需要人工成本的。\n\n如果申请者是一些金融机构、银行、电商平台等，所以还需额外的要验证一些经营资质是否合法合规，这类证书称为EV。申请EV的价格非常高，甚至达到好几万一年，因为需要人工验证更多的内容。\n\n好了，我们了解了证书有很多种不同的类型，DV这种就可以自动审核，不过OV、EV这种类型的证书就需要人工验证了，而每个地方的验证方式又可能不同，比如你是一家美国本地的CA公司，要给中国的一些金融公司发放数字证书，这过程种验证证书就会遇到问题，因此就需要本地的CA机构，他们验证会更加容易。\n\n因此，就全球就有很多家CA机构，然后就出现了一个问题，这些CA是怎么证明它自己是安全的？如果一个恶意的公司也成立了一个CA机构，然后给自己颁发证书，那么这就非常危险了，因此我们必须还要实现一个机制，让CA证明它自己是安全无公害的。\n\n这就涉及到数字证书链了。\n\n要讲数字证书链，就要了解我们的CA机构也是分两种类型的，中间CA(Intermediates CAs)和根CA(Root CAs)，通常申请者都是向中间CA去申请证书的，而根CA作用就是给中间CA做认证，通常，一个根CA会认证很多中间的CA，而这些中间CA又可以去认证其它的中间CA。\n\n 比如你可以在Chrome上打开极客时间的官网，然后点击地址栏前面的那把小锁，你就可以看到*.geekbang,org的证书是由中间CA  GeoTrust RSA CA2018颁发的，而中间CA GeoTrust RSA CA2018又是由根CA DigiCert Global Root CA颁发的，所以这个证书链就是：*.geekbang,org---&amp;gt;GeoTrust RSA CA2018--&amp;gt;DigiCert Global Root CA。\n\n因此浏览器验证极客时间的证书时，会先验证*.geekbang,org的证书，如果合法在验证中间CA的证书，如果中间CA也是合法的，那么浏览器会继续验证这个中间CA的根证书。\n\n这时候问题又来了，怎么证明根证书是合法的？\n\n浏览器的做法很简单，它会查找系统的根证书，如果这个根证书在操作系统里面，那么浏览器就认为这个根证书是合法的，如果验证的根证书不在操作系统里面，那么就是不合法的。\n\n而操作系统里面这些内置的根证书也不是随便内置的，这些根CA都是通过WebTrust国际安全审计认证。\n\n那么什么又是WebTrust认证？\n\nWebTrust（网络信任）认证是电子认证服务行业中唯一的国际性认证标准，主要对互联网服务商的系统及业务运作的商业惯例和信息隐私，交易完整性和安全性。WebTrust认证是各大主流的浏览器、微软等大厂商支持的标准，是规范CA机构运营服务的国际标准。在浏览器厂商根证书植入项目中，必要的条件就是要通过WebTrust认证，才能实现浏览器与数字证书的无缝嵌入。\n\n目前通过WebTrust认证的根CA有 Comodo，geotrust，rapidssl，symantec，thawte，digicert等。也就是说，这些根CA机构的根证书都内置在个大操作系统中，只要能从数字证书链往上追溯到这几个根证书，浏览器会认为使用者的证书是合法的。\n\n这也同时回答了你上面的问题。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1572446140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2143354,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqKk79X0JKQ5kyPQCnGN5BibI0wsOSAIp7gAhY0FlIukt7K1BJ2nibEpiciba1Rb6bk5Tl7AlhRjdBrsw/132","nickname":"Geek_88dd24","note":"","ucode":"FEDB18454C9E05","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544505,"discussion_content":"首先，服务端下发的数字证书有服务端的公钥（这个公钥也是申请数字证书时给ca的）和签名和服务端的信息，除了签名都是明文的，此时浏览器需要验证数字证书下发的服务器公钥是否可用，验证过程就是查看系统和浏览器是否有下发数字证书的ca根证书（可能存在ca链），找到系统的ca根证书后，里面会有公钥（这个公钥对应申请数字证书时生成签名的私钥），浏览器拿到ca公钥解开签名和hash明文后的信息比对，如果一致就认为可信，然后利用数字证书下发的服务端公钥去加密生成密钥，发给服务端，服务端用私钥解开后和浏览器生成一样的密钥进行对称加密传输，老铁迷惑的地方可能混淆了公钥私钥密钥，整个过程中两个公钥，一个是ca的公钥在系统或浏览器中用于验证数字证书上的签名，另一个是服务端的公钥会在下发数字证书时携带","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1641540971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1671128,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZe7OA4d49jibag1nTkDbLOedIotOtAsd5Vh80EmibMy1YXOmSAXZ7AO7X6LCJZ6GuxqyamzfHtYvA/132","nickname":"马到成功","note":"","ucode":"A544E07459AFEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2143354,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqKk79X0JKQ5kyPQCnGN5BibI0wsOSAIp7gAhY0FlIukt7K1BJ2nibEpiciba1Rb6bk5Tl7AlhRjdBrsw/132","nickname":"Geek_88dd24","note":"","ucode":"FEDB18454C9E05","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568049,"discussion_content":"不是呀，系统中只有根证书CA，也就是只有根CA的公钥，而浏览器验证是先认证中间CA，最后才验证根CA，那么中间CA的公钥浏览器是如何得知的？服务器发给浏览器的证书里只有服务器的公钥，没有颁发这个证书的CA公钥呀？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1651054439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":544505,"ip_address":""},"score":568049,"extra":""},{"author":{"id":1671128,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZe7OA4d49jibag1nTkDbLOedIotOtAsd5Vh80EmibMy1YXOmSAXZ7AO7X6LCJZ6GuxqyamzfHtYvA/132","nickname":"马到成功","note":"","ucode":"A544E07459AFEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2143354,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqKk79X0JKQ5kyPQCnGN5BibI0wsOSAIp7gAhY0FlIukt7K1BJ2nibEpiciba1Rb6bk5Tl7AlhRjdBrsw/132","nickname":"Geek_88dd24","note":"","ucode":"FEDB18454C9E05","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568051,"discussion_content":"还是说服务器发来证书的时候，会把对应CA的证书链一起发过来用于浏览器验证CA链？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1651055009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":544505,"ip_address":""},"score":568051,"extra":""}]},{"author":{"id":2930028,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/b5/6c/18c5b2ed.jpg","nickname":"一七","note":"","ucode":"681C7720FAB84B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557041,"discussion_content":"结合老师和此问题下其他同学的回答，我来总结一下，浏览器内置的只有根ca的证书，但是服务器发过来的可能是中间ca颁发的证书，此时浏览器要怎么继续验证呢？这也是我一直疑惑的问题，原来浏览器还会拿到证书链这个东西，这样浏览器才能拿到服务器证书的对应ca的东西（hash函数和公钥），验证完服务器的证书，还能接着验证ca，沿着证书链能一直找到内置的根证书后才算完。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647617349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1380571,"avatar":"https://static001.geekbang.org/account/avatar/00/15/10/db/f1f50eef.jpg","nickname":"熊猫只是猫","note":"","ucode":"2624C58AF65F63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408776,"discussion_content":"操作系统会内置一些权威CA机构的证书","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635322474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2599446,"avatar":"","nickname":"时秋菲","note":"","ucode":"85CF942C3DCD07","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391447,"discussion_content":"感觉老师的这个答案没有回答问题呀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630466868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1644994,"avatar":"","nickname":"布布","note":"","ucode":"58B30B53498B89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43535,"discussion_content":"其实不管是根证书授权机构还是WebTrust认证，最后都要人参与审核认证吧，所以现在才要大力推崇区块链去中心化么？！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572880169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1620237,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b9/0d/ae745ec0.jpg","nickname":"刹那","note":"","ucode":"E0B1C29EB07754","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277474,"discussion_content":"我记得，这里还有一步，如果给服务器签署的CA浏览器中不存在，浏览器会请求服务器把给他签名的CA证书也发送过来，这样浏览器才知道给这个CA颁发证书的上一级CA是谁，这样证书链才进行的下去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591060272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1620237,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b9/0d/ae745ec0.jpg","nickname":"刹那","note":"","ucode":"E0B1C29EB07754","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280927,"discussion_content":"会把证书链发过来，除了根证书","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591629435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":277474,"ip_address":""},"score":280927,"extra":""}]},{"author":{"id":1252977,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","nickname":"成楠Peter","note":"","ucode":"4D13E7368D8CF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41565,"discussion_content":"即CA公钥是验证完CA的时候，就会存在浏览器了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572451477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1140303,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/4f/39386c3f.jpg","nickname":"zzj8704","note":"","ucode":"ED58C490232B96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1252977,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","nickname":"成楠Peter","note":"","ucode":"4D13E7368D8CF2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311617,"discussion_content":"好问题，感觉没有必要，而且有悖设计，浏览一个页面还要保存其证书，也是系统权限控制和漏洞风险.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602421526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41565,"ip_address":""},"score":311617,"extra":""}]}]},{"had_liked":false,"id":144801,"user_name":"mfist","can_delete":false,"product_type":"c1","uid":1373624,"ip_address":"","ucode":"4F99F422C23FB4","user_header":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","comment_is_top":false,"comment_ctime":1572060438,"is_pvip":false,"replies":[{"id":"56422","content":"这可以做标准参考答案了","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572476728,"ip_address":"","comment_id":144801,"utype":1}],"discussion_count":9,"race_medal":0,"score":"293629836566","product_id":100033601,"comment_content":"1. 首先是tcp的三次握手建立连接<br>2. client发送random1+支持的加密算法集合（clientHello）<br>3. server收到信息，返回选择一个加密算法+random2（serverHello）+ 证书+ 确认<br>4. clent验证证书有效性，并用random1+random2生成pre-master通过服务器公钥加密 发送给server<br>5. server收到premaster，根据约定的加密算法对random1+random2+premaster（解密）生成master-secret，然后发送预定成功<br>6. client收到生成同样的master-secert，对称加密秘钥传输完毕<br><br>今日总结<br>浏览器安全主要包括页面安全、系统安全、传输安全三个部分。https主要保证传输过程的安全，从防止中间人窃取修改伪造的角度循序渐进的介绍了https的实现过程。 <br>1. 对称加密传输（协商秘钥的过程容易被窃取）<br>2. 非对称加密传输（服务端用私钥加密的内容，可以通过它的公钥进行解密）<br>3. 非对称加密交换秘钥、对称加密传输内容（DNS劫持 如何保证服务器是可信的）<br>4. 引入CA权威机构保证服务器可信性。<br>数字证书的申请过程：服务器生成一对公钥和私钥，私钥自己保存，通过公钥+企业+网站信息去CA机构申请证书。CA机构通过全方位的验证给这个网站颁发证书，证书内容包括企业信息、证书有效期、证书编号，以及自己私钥加密上述信息的摘要、网站的公钥。服务器就获得了CA的认证。<br>浏览器认证证书过程：浏览器从服务器拿到网站的证书，通过CA的公钥解密证书信息的摘要跟使用摘要算法计算企业信息等的摘要对比，如果一致则证明证书有效。如果证书CA是可靠的呢，通过给CA颁发证书的根CA验证，通常操作系统中包括顶级CA证书（它们自己给自己签名称为自签名证书，我们自己生成证书也是自签名证书 只是它不是操作系统内置的）","like_count":69,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472118,"discussion_content":"这可以做标准参考答案了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572476728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1563403,"avatar":"https://static001.geekbang.org/account/avatar/00/17/db/0b/f0ded153.jpg","nickname":"江谢木","note":"","ucode":"E1B1B0F0F03D41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66536,"discussion_content":"4 5点错了吧  pre-master是随机生成的，否则黑客也可以根据random1+random2生成，就没有后面的意义了。这个答案不标准啊。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1575082865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1373624,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","nickname":"mfist","note":"","ucode":"4F99F422C23FB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1563403,"avatar":"https://static001.geekbang.org/account/avatar/00/17/db/0b/f0ded153.jpg","nickname":"江谢木","note":"","ucode":"E1B1B0F0F03D41","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70092,"discussion_content":"就算黑客有r1 r2,它怎么知道我生成pre的加密算法呢，这样增加了破解难度，pre是非对称加密传输的，拦截到也没有用的。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575325311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66536,"ip_address":""},"score":70092,"extra":""},{"author":{"id":1563403,"avatar":"https://static001.geekbang.org/account/avatar/00/17/db/0b/f0ded153.jpg","nickname":"江谢木","note":"","ucode":"E1B1B0F0F03D41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1373624,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","nickname":"mfist","note":"","ucode":"4F99F422C23FB4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70121,"discussion_content":"你第二步server端就返回选择的加密算法了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575329908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":70092,"ip_address":""},"score":70121,"extra":""},{"author":{"id":1563403,"avatar":"https://static001.geekbang.org/account/avatar/00/17/db/0b/f0ded153.jpg","nickname":"江谢木","note":"","ucode":"E1B1B0F0F03D41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1373624,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","nickname":"mfist","note":"","ucode":"4F99F422C23FB4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70124,"discussion_content":"你看下底下 早起不吃虫 的评论，老师有详细解答。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575330196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":70092,"ip_address":""},"score":70124,"extra":""}]},{"author":{"id":1252977,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","nickname":"成楠Peter","note":"","ucode":"4D13E7368D8CF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40197,"discussion_content":"hello，CA的公钥，是浏览器第一次服务器的时候，CA证书发给浏览器的吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572103613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1373624,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","nickname":"mfist","note":"","ucode":"4F99F422C23FB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1252977,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","nickname":"成楠Peter","note":"","ucode":"4D13E7368D8CF2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40224,"discussion_content":"ca的公钥肯定是向ca机构请求的。就相当于权威机构的公钥不会放到证书里的，如果放里面怎么证明可信性呢。\n最终ca的认证会追溯到操作系统内置的根证书","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572128827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":40197,"ip_address":""},"score":40224,"extra":""}]}]},{"had_liked":false,"id":145391,"user_name":"GY","can_delete":false,"product_type":"c1","uid":1379119,"ip_address":"","ucode":"764214512E67C1","user_header":"https://static001.geekbang.org/account/avatar/00/15/0b/2f/6efc3051.jpg","comment_is_top":false,"comment_ctime":1572264986,"is_pvip":false,"replies":[{"id":"56238","content":"首先，渲染进程有个主线程，DOM解析，样式计算，执行JavaScript，执行垃圾回收等等操作都是在这个主线程上执行的，<br><br>没有所谓的渲染引擎线程和js引擎线程的概念，你可以把渲染和执行JavaScript是一种功能，如果要执行这些功能的话，需要在一个线程上执行，在chrome中，他们都是执行在渲染进程的主线程上。<br><br>正是因为他们都是执行在同一个线程之上的，所以同一时刻只能运行一个功能，也就是你说的互斥。<br><br>不知道这样解释你明白没有，如果还有疑惑欢迎继续提问。","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572341600,"ip_address":"","comment_id":145391,"utype":1}],"discussion_count":2,"race_medal":0,"score":"121831349274","product_id":100033601,"comment_content":"问了很多次，一直没有回复，想请问下老师，专栏中一直说的主线程和渲染引擎线程、js引擎线程之间有什么关系，渲染引擎和js引擎互斥，两个引擎是都运行在主线程中吗，这个主线程到底是什么啊？","like_count":28,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472369,"discussion_content":"首先，渲染进程有个主线程，DOM解析，样式计算，执行JavaScript，执行垃圾回收等等操作都是在这个主线程上执行的，\n\n没有所谓的渲染引擎线程和js引擎线程的概念，你可以把渲染和执行JavaScript是一种功能，如果要执行这些功能的话，需要在一个线程上执行，在chrome中，他们都是执行在渲染进程的主线程上。\n\n正是因为他们都是执行在同一个线程之上的，所以同一时刻只能运行一个功能，也就是你说的互斥。\n\n不知道这样解释你明白没有，如果还有疑惑欢迎继续提问。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572341600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1379119,"avatar":"https://static001.geekbang.org/account/avatar/00/15/0b/2f/6efc3051.jpg","nickname":"GY","note":"","ucode":"764214512E67C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46732,"discussion_content":"感谢，理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573199198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144751,"user_name":"蓝配鸡","can_delete":false,"product_type":"c1","uid":1348738,"ip_address":"","ucode":"C79A7CA8885B7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","comment_is_top":false,"comment_ctime":1572046004,"is_pvip":false,"replies":[{"id":"56508","content":"只要拿到系统权限，就能随意安装根证书，这种我见过很多！<br><br>之前百度升级到https最后，很多劫持就是采用这种方式来干的，在操作系统安装假的根证书，然后劫持整个站点！<br><br>所以让黑客在你电脑上安装了根证书，https也会变得不安全了！<br><br><br>最后感谢你一路陪伴和提的问题，也让我能更好的改进专栏<br>","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572513666,"ip_address":"","comment_id":144751,"utype":1}],"discussion_count":1,"race_medal":0,"score":"78881457332","product_id":100033601,"comment_content":"HTTPS握手过程：<br>1. 建立TCP链接<br>2. 获取服务器证书并检查证实真实性<br>3. 通过证书里服务器的公钥发送自己的公钥以及协商对称加密需要的信息给服务器. <br>4. 服务器返回协商结果<br>5. 双方生成对称密钥<br>6. 开始通信<br><br>第二步证明了服务器就是服务器， 其实已经可以愉快的沟通了（通过非对称加密）， 后面交换对称加密信息的步骤其实可以算是优化吧？ 我记得是TLS1.2才引入的？ <br><br>有个问题：<br>根证书是信任的根源， 老师说它是被系统内核管理的并且自签名，那如果系统内核被黑了岂不是黑客就可以作假了？ 根证书是不是就是一个躺在内核中（用户无法访问到）的文件？ 有没有什么机制或者技术去发现根证书是假的？ 还是说等到用户出现损失之后系统级别的更新来去除对这个根CA的信任？<br><br><br>给李兵老师：<br>不知不觉最后一节了， 本人由于工作原因对前端以及chrome需要加深理解。 老师的专栏每天上下班的时候都会听，反复的听。<br>不管是内容，还是文字结构梳理，都不难发现老师花了大量的精力和时间去思考如何讲透某一个知识点。 <br>老师对知识的颗粒度把握的很好， 既不是泛泛而谈， 又不会太细以至于难以理解。 使得我对前端，以及chrome产生了浓厚的兴趣！ 虽然现在整个前端， 或者chrome浏览器对我来说可能还是打着码的， 但相比之前， 我相信我已经看到一个大致的轮廓了， 今后一定会更花时间在前端领域中， 把这些码去掉，成为前端大神！ <br>表达能力可能有限...总而言之， 谢谢老师🙏！虽然这是最后一篇了， 但是如果老师想做几篇加餐，我想同学们也是很欢迎的 😂<br>","like_count":18,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472099,"discussion_content":"只要拿到系统权限，就能随意安装根证书，这种我见过很多！\n\n之前百度升级到https最后，很多劫持就是采用这种方式来干的，在操作系统安装假的根证书，然后劫持整个站点！\n\n所以让黑客在你电脑上安装了根证书，https也会变得不安全了！\n\n\n最后感谢你一路陪伴和提的问题，也让我能更好的改进专栏\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572513666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147996,"user_name":"gigot","can_delete":false,"product_type":"c1","uid":1355699,"ip_address":"","ucode":"FCAA7BCEC157CC","user_header":"https://static001.geekbang.org/account/avatar/00/14/af/b3/3486dea2.jpg","comment_is_top":false,"comment_ctime":1572925781,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"40227631445","product_id":100033601,"comment_content":"感谢老师的干货输出，终于看完了，收获非常大。<br>看到很多同学对 client-random 和 service-random 生成 pre-master 比较迷惑，这里交换信息采用的是 ECDHE 算法，其实是浏览器生成了一对非对称秘钥，其中私钥c，公钥即 client-random 发给服务器；而服务器也同理生成非对称秘钥，其中私钥s，公钥即 service-random 发给浏览器。然后根据离散对数和椭圆曲线的数学基础，可以得出 pre-Master = f(c, service-random, client-random) = f(s, service-random, client-random)。即根据不同私钥得出相同的秘钥。而离散对数是非常难逆推破解的（计算量非常大），而形成保密","like_count":9,"discussions":[{"author":{"id":1374337,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f8/81/bff52f91.jpg","nickname":"1830","note":"","ucode":"246FEF7C97F39C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382833,"discussion_content":"牛批，看懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625735436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333497,"discussion_content":"老师不是说(这个pre-master是随机生成的，没有用到client-random和service-random)吗，同学你这里写的pre-master应该是指master key吧？那问题来了，client-random和service-random和 pre-master 三个都是随机数，为啥可以生成同一份master key啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607529212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1076069,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6b/65/88a22c23.jpg","nickname":"飞跃疯人院","note":"","ucode":"7A9BDE2CED0939","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339500,"discussion_content":"这三个数字前后端都是一致的了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609689711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333497,"ip_address":""},"score":339500,"extra":""},{"author":{"id":1355699,"avatar":"https://static001.geekbang.org/account/avatar/00/14/af/b3/3486dea2.jpg","nickname":"gigot","note":"","ucode":"FCAA7BCEC157CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389470,"discussion_content":"老师讲的是旧的 RSA 加密方式，我介绍的是新的 TLS1.3 使用的 ECDHE加密方式，略有不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629286234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333497,"ip_address":""},"score":389470,"extra":""}]}]},{"had_liked":false,"id":144775,"user_name":"成楠Peter","can_delete":false,"product_type":"c1","uid":1252977,"ip_address":"","ucode":"4D13E7368D8CF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","comment_is_top":false,"comment_ctime":1572055218,"is_pvip":false,"replies":[{"id":"56506","content":"🤝","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572512867,"ip_address":"","comment_id":144775,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40226760882","product_id":100033601,"comment_content":"这篇文章是我看过最好的https总结的文章，拆解很到位。","like_count":9,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472107,"discussion_content":"🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572512867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234924,"user_name":"Chris","can_delete":false,"product_type":"c1","uid":1689346,"ip_address":"","ucode":"50A51AE2110A7A","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/02/8346ebf6.jpg","comment_is_top":false,"comment_ctime":1594826791,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27364630567","product_id":100033601,"comment_content":"老师，<br>为什么要在ssl四次建立连接步骤中，生成三次随机数，我觉得最后一次的用服务器公钥加密的随机数pre-master就可以保证安全了啊。","like_count":6,"discussions":[{"author":{"id":1022691,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9a/e3/0a094b50.jpg","nickname":"Wales","note":"","ucode":"901ED75ADBF04C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379072,"discussion_content":"生成三次随机数，是为了抵御重放攻击。\n\n试想，如果只让客户端生成一次随机数发给服务端，那么攻击者截获了报文后，也可以再次给服务端发送同样的报文来建立连接，从而，攻击者将获得从服务端返回来的对称加密密钥，那么客户端之后与服务端的通信就没有隐私可言了。 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623661124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144797,"user_name":"早起不吃虫","can_delete":false,"product_type":"c1","uid":1369757,"ip_address":"","ucode":"13CD3B5E1F9435","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","comment_is_top":false,"comment_ctime":1572059927,"is_pvip":false,"replies":[{"id":"56491","content":"不好意思，这个我写错了，这个pre-master是随机生成的，没有用到client-random和service-random。<br><br>内容已经改正了","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572502768,"ip_address":"","comment_id":144797,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23046896407","product_id":100033601,"comment_content":"老师好，您前面说随机数加密算法是公开透明的，后面又说利用 client-random 和 service-random 计算出来 pre-master，然后利用公钥对 pre-master 加密，并向服务器发送加密后的数据，。   。这样的话，premaster不是也是可以计算出来了吗，有必要用公钥加密吗？","like_count":5,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472116,"discussion_content":"不好意思，这个我写错了，这个pre-master是随机生成的，没有用到client-random和service-random。\n\n内容已经改正了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572502768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1585967,"avatar":"https://static001.geekbang.org/account/avatar/00/18/33/2f/84f7d587.jpg","nickname":"YBB","note":"","ucode":"1507DBFE008715","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41017,"discussion_content":"pre-master肯定是不是用通用算法算出来的，因为服务端根本不会去计算pre-master。我觉得老师讲的太细致了点，本质上就是客户端生成对称加密的秘钥，通过公钥加密发送给服务端，仅此而已、","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572328379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1456392,"avatar":"https://static001.geekbang.org/account/avatar/00/16/39/08/09055b47.jpg","nickname":"淡","note":"","ucode":"6856CA319DE2F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40554,"discussion_content":"我也觉得有问题，对于client-random这一步如果不在拿到服务端发过来的证书之后发给服务端，网络监听者是可以截获到这些信息的，后面的都可以算出来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572234029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144789,"user_name":"大前端洞见","can_delete":false,"product_type":"c1","uid":1010463,"ip_address":"","ucode":"1FA227A25F6056","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/1f/f7be5246.jpg","comment_is_top":false,"comment_ctime":1572058143,"is_pvip":false,"replies":[{"id":"56505","content":"这个要分开两部分来看：<br><br>1:浏览器发送数据给服务器<br>2:服务器发送数据给浏览器<br><br>浏览器发送数据给服务器时，是采用服务器发送给浏览器的公钥加密的，然后服务器可以拿它的私钥来解密。这个我们理解没问题的！<br><br><br>如果是服务器发送数据给浏览器，由于浏览器只有服务器的公钥，所以服务器只能用它的私钥来加密数据，然后将加密的数据发送给浏览器，浏览器使用公钥匙解密！  但是这个公钥是公开的，所以服务器发送给浏览器的数据也就没有安全性可言了！<br><br>不知道这样解释你能明白吗？<br><br><br>","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572512850,"ip_address":"","comment_id":144789,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23046894623","product_id":100033601,"comment_content":"&gt;虽然浏览器端可以使用公钥来加密，但是服务器端只能采用私钥来加密，私钥加密只有公钥能解密，但黑客也是可以获取得到公钥的，这样就不能保证服务器端数据的安全了。<br><br>老师，这里不是很明白。浏览器使用公钥加密，服务器端不是用私钥解密吗？怎么你这里说“服务器端只能采用私钥来加密”呢？","like_count":5,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472111,"discussion_content":"这个要分开两部分来看：\n\n1:浏览器发送数据给服务器\n2:服务器发送数据给浏览器\n\n浏览器发送数据给服务器时，是采用服务器发送给浏览器的公钥加密的，然后服务器可以拿它的私钥来解密。这个我们理解没问题的！\n\n\n如果是服务器发送数据给浏览器，由于浏览器只有服务器的公钥，所以服务器只能用它的私钥来加密数据，然后将加密的数据发送给浏览器，浏览器使用公钥匙解密！  但是这个公钥是公开的，所以服务器发送给浏览器的数据也就没有安全性可言了！\n\n不知道这样解释你能明白吗？\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572512850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018200,"avatar":"","nickname":"一眼万年","note":"","ucode":"7B0823E39AE809","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106094,"discussion_content":"他第一个是问题，在非对称加密时候，服务器向浏览器发数据不安全，这个是必然的，所以采用混合模式，浏览器用公钥加密对称密钥，服务器用私钥解释对称密钥","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577513324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268253,"user_name":"长草嘟嘟","can_delete":false,"product_type":"c1","uid":1748441,"ip_address":"","ucode":"D22349E0B88EEC","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ad/d9/6b4c397b.jpg","comment_is_top":false,"comment_ctime":1608114927,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14493016815","product_id":100033601,"comment_content":"老师你好，原文中“首先浏览器读取证书中相关的明文信息，采用 CA 签名时相同的 Hash 函数来计算并得到信息摘要 A”，请问浏览器如何知道 CA 所用的是何种 HASH 函数。","like_count":4,"discussions":[{"author":{"id":2033513,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/07/69/43cf2251.jpg","nickname":"Alan He","note":"","ucode":"A0780F4619D388","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556025,"discussion_content":"证书中会说明采用的HASH算法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647166407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173120,"user_name":"爱看书的蜗牛","can_delete":false,"product_type":"c1","uid":1115276,"ip_address":"","ucode":"02A280A16F162D","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/8c/ce36a2d0.jpg","comment_is_top":false,"comment_ctime":1579427883,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14464329771","product_id":100033601,"comment_content":"数字证书解决了DNS劫持的问题吗？并没有啊","like_count":3,"discussions":[{"author":{"id":1512860,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Rr8ABLicfgJHZ3xs3bXNjHdicwVN0zBiaFtIEXw4D1licedSuia3zicxJC4lqtrNwPmCeAW5UR2Ugia0dNfcvtXYnpOwQ/132","nickname":"LearnAndTry","note":"","ucode":"0ECF4398C870DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308508,"discussion_content":"DNS劫持能拿到证书，但是拿不到私钥。还是没法正常加密解密。 没证书的话，可以在恶意服务器上生成一对儿秘钥，可以正常通信","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600964374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018203,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","nickname":"孜孜","note":"","ucode":"7EF4FB644357CE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272143,"discussion_content":"dns劫持又怎样？如果恶意站点提供了你想访问站点的证书，那么传输的信息就是加密的，恶意IP也做不了什么？如果恶意ip没有提供你访问域名的证书，浏览器会提示证书不对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590247559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1383173,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1b/05/95fe1773.jpg","nickname":"Ramda","note":"","ucode":"0405CF089D4F94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195581,"discussion_content":"没有，但是通过数字证书能够知道当前网站到底是不是你想访问的网站","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583288990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144886,"user_name":"Ming","can_delete":false,"product_type":"c1","uid":1358174,"ip_address":"","ucode":"A94E8D8433E54F","user_header":"https://static001.geekbang.org/account/avatar/00/14/b9/5e/a8f6f7db.jpg","comment_is_top":false,"comment_ctime":1572081195,"is_pvip":true,"replies":[{"id":"56411","content":"第一个问题：<br>通常浏览器是没有自己的证书的，也没有自己的公钥和私钥。<br>不过有一种情况，那就是服务器需要验证浏览器的身份，比如银行转账啥的，这种情况下，银行会给浏览器一个证书，通常是U盘的形式提供的，这种叫双向认证，不过不常见。<br><br>2:浏览器端计算pre-master是相对安全的，想攻破难度是非常高的，因为要攻击浏览器系统，做各种逆向，不是简单地截获下网络数据就行了。<br><br>3:公钥是和数字证书一起发动的，如果公钥改了，那么数字证书就会验证失败的，验证失败了浏览器也就不会继续下一步的请求了。","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572448423,"ip_address":"","comment_id":144886,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14456983083","product_id":100033601,"comment_content":"请问老师：<br><br>（1）非对称加密部分，当浏览器的公钥给了服务器，服务器不就可以给浏览器安全传输数据了吗？<br>（2）混合加密部分，“浏览器保存公钥，并利用 client-random 和 service-random 计算出来 pre-master”，经揣摩，pre-master是生成对称加密密钥的重要且唯一安全的参数，但是在浏览器端，计算出来的pre-master是安全的吗？因为考虑到client-random 和 service-random是可以被拦截的，是否pre-master可以在传输前就被知晓了？<br>（3）混合加密方式有个漏洞，这种情况是服务器向浏览器发送公钥过程中被伪装篡改，导致浏览器不是与真正的“对话人”即服务器进行对话，因而出现了数字证书对公钥的身份进行公证。","like_count":3,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472154,"discussion_content":"第一个问题：\n通常浏览器是没有自己的证书的，也没有自己的公钥和私钥。\n不过有一种情况，那就是服务器需要验证浏览器的身份，比如银行转账啥的，这种情况下，银行会给浏览器一个证书，通常是U盘的形式提供的，这种叫双向认证，不过不常见。\n\n2:浏览器端计算pre-master是相对安全的，想攻破难度是非常高的，因为要攻击浏览器系统，做各种逆向，不是简单地截获下网络数据就行了。\n\n3:公钥是和数字证书一起发动的，如果公钥改了，那么数字证书就会验证失败的，验证失败了浏览器也就不会继续下一步的请求了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572448423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290693,"user_name":"影相随","can_delete":false,"product_type":"c1","uid":1296332,"ip_address":"","ucode":"A821EC04816992","user_header":"https://static001.geekbang.org/account/avatar/00/13/c7/cc/fc9232f6.jpg","comment_is_top":false,"comment_ctime":1619689750,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10209624342","product_id":100033601,"comment_content":"我有一个疑问，就是数字证书虽然不可以伪造，但是可不可以被劫持，比如中间人劫持了服务器返回的数字证书，然后把劫持到数字证书返回给浏览器，那浏览器拿到的数字证书依然可以验证通过呢？","like_count":2,"discussions":[{"author":{"id":1954783,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/d3/df/34fd4ebf.jpg","nickname":"维他命","note":"","ucode":"FA62363F61B87E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556253,"discussion_content":"中间人劫持了以后没有什么用处呀，又不能篡改","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647264775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2930028,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/b5/6c/18c5b2ed.jpg","nickname":"一七","note":"","ucode":"681C7720FAB84B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557030,"discussion_content":"我理解他的意思是，中间人劫持了服务器返回的证书，然后把中间人自己的证书返回给浏览器，这个中间人自己的证书也是合法申请的，所以浏览器拿到之后去验证的时候也是可以通过的，然后中间人把之后的浏览器的请求都劫持到自己这，这好像也说的通？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647614830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3026145,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/2c/e1/74c5e110.jpg","nickname":"lzh","note":"","ucode":"CBEF51FF0D35EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2930028,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/b5/6c/18c5b2ed.jpg","nickname":"一七","note":"","ucode":"681C7720FAB84B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576414,"discussion_content":"问题出现在这句话上：“这个中间人自己的证书也是合法申请的”，中间人要合法申请是不可能的，设想你能申请到www.google.com域名的合法证书吗，中间CA在审查你资质的时候就拒绝了。所以这里不是问题的关键，你后面设想的这个情形是存在的，比如用charles抓https数据包时就是通过charles作为中间人劫持服务端的证书，将charels的自签证书返回给客户端以伪装服务端，将客户端的请求用自己的私钥解密，用真实服务端的公钥加密来伪装客户端，从而拿到对称密钥来解密明文进行抓包的。但是这一切有一个前提：客户端要信任charels的自签证书，因为这个证书不可能被任何一个root CA机构承认的，所以这种情况是在用户知晓的情况下发生的，风险相对可控：及时卸载掉自签证书即可","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1655532638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":557030,"ip_address":""},"score":576414,"extra":""}]}]},{"had_liked":false,"id":160177,"user_name":"淡","can_delete":false,"product_type":"c1","uid":1456392,"ip_address":"","ucode":"6856CA319DE2F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/39/08/09055b47.jpg","comment_is_top":false,"comment_ctime":1575885840,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"10165820432","product_id":100033601,"comment_content":"今天又读了两遍，收获很多，同时又产生了3个疑问：<br>1.“浏览器如何验证证书”这一节中提到“然后再利用对应 CA 的公钥解密签名数据，得到信息摘要 B”，这一步中CA的公钥怎么拿到的？我理解的浏览器收到的数字证书包含的公钥是服务器的公钥，这里公钥是不是要在验证过证书合法后才能得到CA的公钥？<br>2.文章说验证数字证书的CA是否合法的时候，当前的数字证书包含了完整的CA链？如果没有，当CA是个层级比较低的CA的时候（假设中间有3层），怎么判断中间CA是否是合法的？<br>3.“通常情况下，操作系统中会内置信任的顶级 CA 的证书信息（包含公钥），如果这个 CA 链中没有找到浏览器内置的顶级的 CA，证书也会被判定非法”，请问这里是操作系统内置证书还是浏览器内置证书？","like_count":2,"discussions":[{"author":{"id":1480732,"avatar":"https://static001.geekbang.org/account/avatar/00/16/98/1c/d7a1439e.jpg","nickname":"KaKaKa","note":"","ucode":"07D1980A71F321","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243503,"discussion_content":"第三个问题：操作系统上内置，也可以手动安装证书","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587546256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281645,"discussion_content":"最后一讲加餐专门讲了证书相关问题。当你部署 HTTP 服务器的时候，除了部署当前的数字证书之外，还需要部署 CA 机构的数字证书，CA 机构的数字证书包括了 CA 的公钥，以及 CA 机构的一些基础信息\n在建立 HTTPS 链接时，服务器会将这两个证书一同发送给浏览器，于是浏览器就可以获取到 CA 的公钥了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591782718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281188,"discussion_content":"https://www.cnblogs.com/handsomeBoys/p/6556336.html\n客户端会内置信任 CA 的证书信息(包含公钥)，如果CA不被信任，则找不到对应 CA 的证书，证书也会被判定非法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591689470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281092,"discussion_content":"CA用自己的私钥对第三方的公钥签名","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591670359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281079,"discussion_content":"证书用ca的私钥签名，但ca私钥对应的公钥是它自己的，而不是证书里的公钥。证书里的公钥对应的是你自己服务器上的私钥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591668579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281069,"discussion_content":"来自透视http协议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591667750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281068,"discussion_content":"服务器会在握手的时候返回整个证书链，但通常为了节约数据量，不会包含最终的根证书，因为根证书通常已经在浏览器或者操作系统里内置了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591667739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281060,"discussion_content":"有了这个证书体系，操作系统和浏览器都内置了各大 CA 的根证书，上网的时候只要服务器发过来它的证书，就可以验证证书里的签名，顺着证书链（Certificate Chain）一层层地验证，直到找到根证书，就能够确定证书是可信的，从而里面的公钥也是可信的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591666970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144758,"user_name":"填","can_delete":false,"product_type":"c1","uid":1336653,"ip_address":"","ucode":"35043BC5B0B70B","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/4d/92b6a180.jpg","comment_is_top":false,"comment_ctime":1572051387,"is_pvip":false,"replies":[{"id":"56507","content":"🤝","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572513059,"ip_address":"","comment_id":144758,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10161985979","product_id":100033601,"comment_content":"期待大佬以后有机会继续发布这么高质量的系列，很感谢这段时间的输出","like_count":2,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472102,"discussion_content":"🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572513059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332968,"user_name":"电单车","can_delete":false,"product_type":"c1","uid":2859389,"ip_address":"","ucode":"21FE87326A8B9C","user_header":"https://static001.geekbang.org/account/avatar/00/2b/a1/7d/64ed0fdd.jpg","comment_is_top":false,"comment_ctime":1643897424,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5938864720","product_id":100033601,"comment_content":"过年花了好几天时间一口气看完了，简直停不下来，写的真好，感谢","like_count":1},{"had_liked":false,"id":145291,"user_name":"Angus","can_delete":false,"product_type":"c1","uid":1377467,"ip_address":"","ucode":"7CC3BA1550FB5B","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/bb/5e5c37c1.jpg","comment_is_top":false,"comment_ctime":1572246238,"is_pvip":false,"replies":[{"id":"56413","content":"🤝","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572449366,"ip_address":"","comment_id":145291,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867213534","product_id":100033601,"comment_content":"这是我在极客时间认真看完并总结的第一篇专栏，并且在最后将自己的网站升级了HTTPS。整体来说受益匪浅，后续还会反复查阅的，感谢！","like_count":2,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472322,"discussion_content":"🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572449366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352347,"user_name":"hpw123","can_delete":false,"product_type":"c1","uid":2018990,"ip_address":"","ucode":"97A364D9942237","user_header":"https://static001.geekbang.org/account/avatar/00/1e/ce/ae/97261da0.jpg","comment_is_top":false,"comment_ctime":1658567212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658567212","product_id":100033601,"comment_content":"不懂就问，非对称加密既然是用公钥加密的，那服务端传给浏览器的加密套件有什么用呢","like_count":0},{"had_liked":false,"id":344910,"user_name":"Geek_115bc8","can_delete":false,"product_type":"c1","uid":1673843,"ip_address":"","ucode":"71FBC9F02AFE1B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erXRaa98A3zjLDkOibUJV1254aQ4EYFTbSLJuEvD0nXicMNA8pLoxOfHf5kPTbGLXNicg8CPFH3Tn0mA/132","comment_is_top":false,"comment_ctime":1651849643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651849643","product_id":100033601,"comment_content":"首先 CA 使用 Hash 函数来计算极客时间提交的明文信息，并得出信息摘要；然后 CA 再使用它的私钥对信息摘要进行加密，加密后的密文就是 CA 颁给极客时间的数字签名。<br><br>这个数字签名。这个CA使用《谁的》私钥啊？？？？","like_count":0},{"had_liked":false,"id":338647,"user_name":"一七","can_delete":false,"product_type":"c1","uid":2930028,"ip_address":"","ucode":"681C7720FAB84B","user_header":"https://static001.geekbang.org/account/avatar/00/2c/b5/6c/18c5b2ed.jpg","comment_is_top":false,"comment_ctime":1647617801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647617801","product_id":100033601,"comment_content":"浏览器也需要向服务器证明自己的身份吧","like_count":0},{"had_liked":false,"id":338063,"user_name":"维他命","can_delete":false,"product_type":"c1","uid":1954783,"ip_address":"","ucode":"FA62363F61B87E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/d3/df/34fd4ebf.jpg","comment_is_top":false,"comment_ctime":1647262341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647262341","product_id":100033601,"comment_content":"有一个地方有点疑惑，就是第二版只使用非对称加密的方式进行通信，文中提到这种方式的弊端的第二点是无法保证服务器发送给浏览器的数据安全，黑客虽然可以获取公钥，从而对服务器发送给浏览器的数据进行截取并解密，但是没办法进行篡改，因为黑客并没有服务器的私钥，那么为什么说无法保证服务器发送给浏览器的数据安全呢，仅仅是因为可能被窃听？","like_count":0},{"had_liked":false,"id":337239,"user_name":"alone","can_delete":false,"product_type":"c1","uid":2932337,"ip_address":"","ucode":"68EABDCEBBAD64","user_header":"https://static001.geekbang.org/account/avatar/00/2c/be/71/b9da2c1a.jpg","comment_is_top":false,"comment_ctime":1646711426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646711426","product_id":100033601,"comment_content":"Https = http + 加密 + 证书 + 完整性保护。完整性保护是不是没有讲(数据摘要)","like_count":0},{"had_liked":false,"id":333265,"user_name":"一觉天明","can_delete":false,"product_type":"c1","uid":1271357,"ip_address":"","ucode":"D3E25113692946","user_header":"","comment_is_top":false,"comment_ctime":1644239091,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644239091","product_id":100033601,"comment_content":"老师你好，第一步浏览器向服务器发送对称加密套件和非对称加密套件的时候是不是可以省掉那个随机数啊，感觉好像没啥用","like_count":0},{"had_liked":false,"id":328680,"user_name":"Yvan","can_delete":false,"product_type":"c1","uid":2159152,"ip_address":"","ucode":"DA5BB215E65ED3","user_header":"https://static001.geekbang.org/account/avatar/00/20/f2/30/5b677e8d.jpg","comment_is_top":false,"comment_ctime":1640838533,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1640838533","product_id":100033601,"comment_content":"有一个问题，虽然黑客拿不到 pre-master ，但他可以利用公钥伪造 pre-master 吧。浏览器和服务器是如何解决这种伪造的。","like_count":0,"discussions":[{"author":{"id":2159152,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f2/30/5b677e8d.jpg","nickname":"Yvan","note":"","ucode":"DA5BB215E65ED3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542968,"discussion_content":"伪造 pre-master 没有用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640918402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325900,"user_name":"张宗智ZZZ","can_delete":false,"product_type":"c1","uid":1295863,"ip_address":"","ucode":"DEC9309E266F7B","user_header":"https://static001.geekbang.org/account/avatar/00/13/c5/f7/4a0d08e9.jpg","comment_is_top":false,"comment_ctime":1639220407,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1639220407","product_id":100033601,"comment_content":"我不太理解，CA证书是明文的，黑客也能获取到？那么黑客改了请求的IP地址，他只需要将获取到的这个证书保存起来发给浏览器，这时浏览器岂不是仍然不知道访问的正确与否？","like_count":0,"discussions":[{"author":{"id":2051946,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4f/6a/0a6b437e.jpg","nickname":"当你的世界里有风吹过","note":"","ucode":"42712891366309","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577647,"discussion_content":"我是这么理解的，即使黑客服务器使用正确的证书返回给客户端，但客户端拿公钥发送数据，黑客服务器没有私钥解密，所以也啥都干不了。 所以说黑客不会这么干。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656258963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2143862,"avatar":"https://static001.geekbang.org/account/avatar/00/20/b6/76/3d68a0ae.jpg","nickname":"skyline","note":"","ucode":"7A54BA59F30CB2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544545,"discussion_content":"这个，我也没想明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641558066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324192,"user_name":"刘亚辉","can_delete":false,"product_type":"c1","uid":1520163,"ip_address":"","ucode":"60CD2FF352BED9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/icHicAP9M4M4ALsKr6vgLW7FNTmmBJGcvicg9QiamucYpNfupwZYrPicgeK73KNw0rgNuwnJdgLfSzkQ34ibfltZYUbQ/132","comment_is_top":false,"comment_ctime":1638331254,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1638331254","product_id":100033601,"comment_content":"但是黑客通过 DNS 劫持将极客时间官网的 IP 地址替换成了黑客的 IP 地址，这样我访问的其实是黑客的服务器了，黑客就可以在自己的服务器上实现公钥和私钥，而对浏览器来说，它完全不知道现在访问的是个黑客的站点。这里不是很明白，为什么官网的 IP 地址替换成了黑客的 IP 地址就变成访问了黑客服务器了？那这个时候页面显示的是极客时间的页面还是说是一个黑客的页面","like_count":0,"discussions":[{"author":{"id":1295863,"avatar":"https://static001.geekbang.org/account/avatar/00/13/c5/f7/4a0d08e9.jpg","nickname":"张宗智ZZZ","note":"","ucode":"DEC9309E266F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537851,"discussion_content":"访问就是根据IP地址拿数据，IP替换了就是访问黑客的服务器了，黑客伪造个极客时间的页面就行了。就是常说的钓鱼网站。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639220046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311213,"user_name":"jiker","can_delete":false,"product_type":"c1","uid":1063971,"ip_address":"","ucode":"D2A2828435F547","user_header":"https://static001.geekbang.org/account/avatar/00/10/3c/23/0d1f7cb1.jpg","comment_is_top":false,"comment_ctime":1631107447,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631107447","product_id":100033601,"comment_content":"之前看过一篇博客，写得也挺详细：http:&#47;&#47;rapheal.sinaapp.com&#47;2015&#47;09&#47;16&#47;https&#47;<br>发出来一起看看。","like_count":0},{"had_liked":false,"id":310372,"user_name":"Rainy","can_delete":false,"product_type":"c1","uid":2577362,"ip_address":"","ucode":"EEF9BC83FC0A37","user_header":"https://static001.geekbang.org/account/avatar/00/27/53/d2/15519fcd.jpg","comment_is_top":false,"comment_ctime":1630634041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630634041","product_id":100033601,"comment_content":"老师，我想请教一下，握手阶段使用client-random、service-random这两个随机数的意义是什么？网上的普遍说法是，因为计算机生成随机数通常都是伪随机，使用3个随机数，可以大大增加随机性。但是在我理解中，这两个随机数是明文发送，中间人每次都可以拿到这个数字，那发不发送又有什么区别呢？","like_count":0},{"had_liked":false,"id":306220,"user_name":"Tr","can_delete":false,"product_type":"c1","uid":2011065,"ip_address":"","ucode":"CB52D918C0586E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/af/b9/cf22a1fd.jpg","comment_is_top":false,"comment_ctime":1628437121,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1628437121","product_id":100033601,"comment_content":"好专栏，刷了好几遍了","like_count":0},{"had_liked":false,"id":286999,"user_name":"Geek_2014ce","can_delete":false,"product_type":"c1","uid":2136469,"ip_address":"","ucode":"167B4CCDA4D5BD","user_header":"https://static001.geekbang.org/account/avatar/00/20/99/95/1e332315.jpg","comment_is_top":false,"comment_ctime":1617720577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617720577","product_id":100033601,"comment_content":"HTTPS握手过程：<br>1.  客户端 发送 对称加密套件列表+非对称加密套件+client-random 给服务端。<br>2. 服务端 发送 对称加密套件+非对称加密套件+service-random+公钥。         <br>3. 客户端 生成随机数，用拿到的公钥加密生成pre-master(只能用私钥解密) 发送给服务端。<br>4. 服务端用私钥解密拿到 pre-master 明文。<br>5. 此时，客户端和服务端都有 client-random，service-random，pre-master而且pre-master未被劫持。客户端，服务端便可以使用这三个随机数生成对称加密秘钥愉快的进行数据传输了。<br><br>其中的重点就是pre-master是客户端用公钥生成的，所以能解开这个数据的只有手握私钥的服务端。他们便可使用这个只有双方握有的未被劫持的秘钥进行对称加密数据传输。","like_count":0},{"had_liked":false,"id":277731,"user_name":"ZH 小小浩","can_delete":false,"product_type":"c1","uid":1792820,"ip_address":"","ucode":"E2A86D054361BD","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5b/34/113c117e.jpg","comment_is_top":false,"comment_ctime":1612530549,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1612530549","product_id":100033601,"comment_content":"虽然浏览器端可以使用公钥来加密，但是服务器端只能采用私钥来加密，私钥加密只有公钥能解密，但黑客也是可以获取得到公钥的，这样就不能保证服务器端数据的安全了。<br><br>老师，“服务器端只能采用私钥来加密”， 这里不是很明白。为什么服务器端只能采用私钥来加密？","like_count":0,"discussions":[{"author":{"id":2033513,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/07/69/43cf2251.jpg","nickname":"Alan He","note":"","ucode":"A0780F4619D388","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555931,"discussion_content":"这个说法的上下文提到的是非对称加密，自然就是私钥加密，公钥解密。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647133379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250188,"user_name":"LearnAndTry","can_delete":false,"product_type":"c1","uid":1512860,"ip_address":"","ucode":"0ECF4398C870DC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Rr8ABLicfgJHZ3xs3bXNjHdicwVN0zBiaFtIEXw4D1licedSuia3zicxJC4lqtrNwPmCeAW5UR2Ugia0dNfcvtXYnpOwQ/132","comment_is_top":false,"comment_ctime":1600964416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600964416","product_id":100033601,"comment_content":"交换秘钥的及证书的过程是每次https请求都要进行的吗？","like_count":0},{"had_liked":false,"id":243836,"user_name":"蹦哒","can_delete":false,"product_type":"c1","uid":1458931,"ip_address":"","ucode":"56591A657DE7C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epcs6PibsP9vEXv4EibUw3bhQPUK04zRTOvfrvF08TwM67xPb1LBh2uRENHQwo2VqYfC5GhJmM7icxHA/132","comment_is_top":false,"comment_ctime":1598285327,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598285327","product_id":100033601,"comment_content":"老师同学们，请问大家一个问题：如果私钥被泄露了，该怎么应对呢？","like_count":0,"discussions":[{"author":{"id":1963947,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/0iaIWczXBpgnVVQwKmKNg62rMUDhMyuZOD9BMzbcfg37zu5NFMAAm79FTwsiblmMHfSu0ew6BHWRTyaCR7s8vbtw/132","nickname":"Geek_392d92","note":"","ucode":"73F65CC90BE036","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356842,"discussion_content":"泄漏造成重大损失的人坐牢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615688829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235118,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1594896915,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1594896915","product_id":100033601,"comment_content":"哈哈，最好能在文中讲解：<br>1、证书链<br>2、黑名单<br>3、顶级CA的证书，默认就在操作系统列表里了<br>4、自签名证书和CA证书的利弊<br>5、证书用法有很多种，U盾、个人、公司、网站、控件签名等<br>感觉是个大工程","like_count":0},{"had_liked":false,"id":229353,"user_name":"LIKE","can_delete":false,"product_type":"c1","uid":1254252,"ip_address":"","ucode":"9DAB7F9051648A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/6c/82ba5e1f.jpg","comment_is_top":false,"comment_ctime":1592970687,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592970687","product_id":100033601,"comment_content":"老师好，关于https抓包（Charles）：<br>1.为什么有的https可以抓到明文的数据包，有的https抓包显示乱码？是通过服务端设置的吗？<br>2.采用哪些措施可以避免数据抓包，可以使得https传输更安全？<br>3.如果采取安全措施后，https接口层数据敏感参数是否就可以明文传输了？<br>希望老师帮忙解答。","like_count":0},{"had_liked":false,"id":225231,"user_name":"alvin","can_delete":false,"product_type":"c1","uid":2013447,"ip_address":"","ucode":"E79D9C6EE8D016","user_header":"https://static001.geekbang.org/account/avatar/00/1e/b9/07/aab6784b.jpg","comment_is_top":false,"comment_ctime":1591688728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591688728","product_id":100033601,"comment_content":"更正一下，老师帮我看一下下面的流程是否有误。<br>（1）Client Hello 客户端返回 protocol (譬如 tsl1.2)+ client-random + 支持的密码套件列表<br>（2）Server Hello 服务端收到后，确认信息。服务端收到后从支持的密码套件列表选择一个对称加密算法 比如 AES 和非对称加密 ECDHE<br>\t最终给客户端返回 证书 （包含了公钥） + server-random + 使用的密码套件 AES + ECDHE <br>（3）Client Key Exchange 客户端收到证书后，校验证书是否有效，用本地内置的公钥+对应的摘要算法解密，查看是否证书被窜改、证书是否被吊销，域名是否一致等。最终可以拿到公钥。<br>\t有效后生成随机数pre-master<br>\t最终给服务端返回 使用  ECDHE + 公钥 加密的 pre-master<br><br>\t因为使用了 ECDHE，客户端可以不用等到服务器发回“Finished”确认握手完毕，立即就发出 HTTP 报文，\t<br>\t最终两端可以通过 client-random + server-random + pre-master 生成会话密钥 session key，之后通过 AES 对称加密加密报文。<br>","like_count":0},{"had_liked":false,"id":216541,"user_name":"NikkiZeng","can_delete":false,"product_type":"c1","uid":1765894,"ip_address":"","ucode":"F669C811773394","user_header":"https://static001.geekbang.org/account/avatar/00/1a/f2/06/ebb5b764.jpg","comment_is_top":false,"comment_ctime":1589279171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589279171","product_id":100033601,"comment_content":"老师,那ssl协议和https的关联是怎么样的呢?","like_count":0},{"had_liked":false,"id":207444,"user_name":"Geek_67bed1","can_delete":false,"product_type":"c1","uid":1843567,"ip_address":"","ucode":"0186E90BA0437D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/u9X0qf7OlqoCiaUjoaO7Z2b8a1dSp83QCIVZYn9KfneadyOY50LUtF4ZGt1e3Su8Ug81yFQibDxn7kd7rkBRicJMw/132","comment_is_top":false,"comment_ctime":1587087059,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1587087059","product_id":100033601,"comment_content":"请教个问题老师，因为premaster是在客户端加密的，为什么黑客会拿不到呢？","like_count":0,"discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289642,"discussion_content":"上面老师有回答：浏览器端计算pre-master是相对安全的，想攻破难度是非常高的，因为要攻击浏览器系统，做各种逆向，不是简单地截获下网络数据就行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594171266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1148422,"avatar":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","nickname":"美美","note":"","ucode":"44CC95C45AF345","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277144,"discussion_content":"我理解黑客可以拿到，但是不能解密，因为私钥只有服务器知道。而公钥加密后的 pre-master 只有私钥能解密。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591006733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1148422,"avatar":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","nickname":"美美","note":"","ucode":"44CC95C45AF345","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289645,"discussion_content":"用公钥〈非对称〉加密只是为了将remaster安全传输到服务器，保证即使在传输过程中被黑客拿到，也破解不了。但是如果在传输之前就被拿到premaster［这一步骤是最难，也是最关键的一步］黑客就可以知道对称加密的密钥，从而就可以截取和破解浏览器与服务器之间的通信数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594171649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":277144,"ip_address":""},"score":289645,"extra":""}]}]},{"had_liked":false,"id":197657,"user_name":"Learning","can_delete":false,"product_type":"c1","uid":1480278,"ip_address":"","ucode":"CDF8C6383BA9EF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eokuZYcbHTG2HAICdczY7LX1dmFdIOPdJSJVWrzDQEP19QeUssibEvUoWaB7ode6zTYj2Wen0jFhZQ/132","comment_is_top":false,"comment_ctime":1585390008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585390008","product_id":100033601,"comment_content":"赞一个","like_count":0},{"had_liked":false,"id":197311,"user_name":"Learning","can_delete":false,"product_type":"c1","uid":1480278,"ip_address":"","ucode":"CDF8C6383BA9EF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eokuZYcbHTG2HAICdczY7LX1dmFdIOPdJSJVWrzDQEP19QeUssibEvUoWaB7ode6zTYj2Wen0jFhZQ/132","comment_is_top":false,"comment_ctime":1585367393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585367393","product_id":100033601,"comment_content":"有个疑问，https要经过很多层的验证，是不是会影响请求的速度呢？","like_count":0},{"had_liked":false,"id":183562,"user_name":"Sevens 些粉","can_delete":false,"product_type":"c1","uid":1154386,"ip_address":"","ucode":"77B1A4319C6A71","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/52/9793e3ba.jpg","comment_is_top":false,"comment_ctime":1583067224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583067224","product_id":100033601,"comment_content":"老师我有个疑问，如果浏览器提供支持的加密套件服务端都不支持，这个时候会怎么处理？","like_count":0},{"had_liked":false,"id":173381,"user_name":"Alice","can_delete":false,"product_type":"c1","uid":1130422,"ip_address":"","ucode":"405F30D959AAFA","user_header":"https://static001.geekbang.org/account/avatar/00/11/3f/b6/4d15f194.jpg","comment_is_top":false,"comment_ctime":1579517030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579517030","product_id":100033601,"comment_content":"非常清楚了！","like_count":0},{"had_liked":false,"id":165572,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1577261946,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1577261946","product_id":100033601,"comment_content":"&lt;&lt;图解HTTP&gt;&gt;中有这么一句话“\u0000\u0000步骤5: SSL 第一次握手结束之后，客户端以Client Key Exchange报文作为回应。报文中包含通信加密中使用的-种被称为Pre-mastersecret的随机密码串。该报文已用步骤3中的公开密钥进行加密”，里面没有提到client-random和service-random随机字符串，是因为过时了吗？","like_count":0},{"had_liked":false,"id":147938,"user_name":"郝仁杰","can_delete":false,"product_type":"c1","uid":1596933,"ip_address":"","ucode":"C6A78E9D5DB359","user_header":"https://static001.geekbang.org/account/avatar/00/18/5e/05/0d8a5b8e.jpg","comment_is_top":false,"comment_ctime":1572920330,"is_pvip":false,"replies":[{"id":"56993","content":"证书里面就有url信息，如果证书没有问题，说明这个url没有问题！<br><br>如果URL被劫持到黑客的服务器上，那么黑客的服务器是不能拿出真的证书的！","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572927088,"ip_address":"","comment_id":147938,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1572920330","product_id":100033601,"comment_content":"老师您好：<br><br>浏览器单向认证可以验证服务证书是否为CA所颁发，但如何验证是访问的URL是对应的服务下发的？如果有中间代理劫持，如何判别和预防？","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473345,"discussion_content":"证书里面就有url信息，如果证书没有问题，说明这个url没有问题！\n\n如果URL被劫持到黑客的服务器上，那么黑客的服务器是不能拿出真的证书的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572927088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1788356,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIMf8QPPOZePEzicZKNHWyfgTaRdnWbQwg8aO2TIwzQXBCnGjXOQY4VzLk7PV1jGAQnGSdH81qVicNg/132","nickname":"李广","note":"","ucode":"EBDF6631F03BE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393658,"discussion_content":"如果黑客先找服务器拿到证书，再返回给用户呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631537477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1596933,"avatar":"https://static001.geekbang.org/account/avatar/00/18/5e/05/0d8a5b8e.jpg","nickname":"郝仁杰","note":"","ucode":"C6A78E9D5DB359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45145,"discussion_content":"理解了，浏览器做了证书的域名验证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573006648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146427,"user_name":"渴望做梦","can_delete":false,"product_type":"c1","uid":1398219,"ip_address":"","ucode":"9EB47530A69C91","user_header":"https://static001.geekbang.org/account/avatar/00/15/55/cb/1efe460a.jpg","comment_is_top":false,"comment_ctime":1572520155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572520155","product_id":100033601,"comment_content":"老师，这个pre-master随机数和client-random随机数有什么区别吗，为什么还要再生成一个随机数呢？","like_count":0},{"had_liked":false,"id":145598,"user_name":"Sunsmile","can_delete":false,"product_type":"c1","uid":1325937,"ip_address":"","ucode":"44398E6D58FCDC","user_header":"https://static001.geekbang.org/account/avatar/00/14/3b/71/b7094a80.jpg","comment_is_top":false,"comment_ctime":1572323719,"is_pvip":false,"replies":[{"id":"56414","content":"🤝","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572449388,"ip_address":"","comment_id":145598,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572323719","product_id":100033601,"comment_content":"感谢，全都是精华","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472485,"discussion_content":"🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572449388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144986,"user_name":"Tourbillon","can_delete":false,"product_type":"c1","uid":1633745,"ip_address":"","ucode":"C8F50A1A20F1DF","user_header":"https://static001.geekbang.org/account/avatar/00/18/ed/d1/7f9e8ec7.jpg","comment_is_top":false,"comment_ctime":1572150097,"is_pvip":false,"replies":[{"id":"56416","content":"你开心就好 🤝","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572449809,"ip_address":"","comment_id":144986,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572150097","product_id":100033601,"comment_content":"非常感谢李斌老师的答疑解惑，收获很多，给力！！！","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472199,"discussion_content":"你开心就好 🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572449809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144868,"user_name":"刹那","can_delete":false,"product_type":"c1","uid":1620237,"ip_address":"","ucode":"E0B1C29EB07754","user_header":"https://static001.geekbang.org/account/avatar/00/18/b9/0d/ae745ec0.jpg","comment_is_top":false,"comment_ctime":1572078647,"is_pvip":false,"replies":[{"id":"56412","content":"你的意思服务器和客户端分别使用不同的对称密钥？<br><br>正常的https只使用一个，即便使用双向认证，也依然是使用一个密钥！","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572449318,"ip_address":"","comment_id":144868,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572078647","product_id":100033601,"comment_content":"谢谢老师这么精彩的系列，超棒。<br>我这里还有一个疑问，之前自己琢磨的时候，记得是对称加密这一步中。是这么理解的。<br>1、客户端用自己的对称密钥A，并告诉服务端，服务端接收到客户端的数据时用这个A解密。<br>2、服务端用另一个对称密钥B，并告诉客户端，客户端接收到的数据用这对称密钥B解密。<br>仔细想想又觉得这样子没必要，不存在更安全的说法，是不是我理解错了","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472148,"discussion_content":"你的意思服务器和客户端分别使用不同的对称密钥？\n\n正常的https只使用一个，即便使用双向认证，也依然是使用一个密钥！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572449318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144857,"user_name":"(-o-)／","can_delete":false,"product_type":"c1","uid":1081480,"ip_address":"","ucode":"E94B755174D4B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/80/88/6601b81a.jpg","comment_is_top":false,"comment_ctime":1572077137,"is_pvip":false,"replies":[{"id":"56418","content":"🤝","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572449926,"ip_address":"","comment_id":144857,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572077137","product_id":100033601,"comment_content":"感谢","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472141,"discussion_content":"🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572449926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144844,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1572072339,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572072339","product_id":100033601,"comment_content":"老师，有种说法是TLS1.3之后的加密方式和之前的都不一样了，就是以为这个不一样，TLS1.3可以在一次RTT中完成握手，可是我始终没看明白他们是如何在一次RTT中就让双方都约定好秘钥的，这个问题后面能讲一下吗","like_count":0},{"had_liked":false,"id":144795,"user_name":"tokey","can_delete":false,"product_type":"c1","uid":1337746,"ip_address":"","ucode":"5278487F37D4EC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJS0jwYKhjm1hq96go05J4R7XDd5FFXXaoyIfX9TgoI3mLURAu2ET72SvYGM2iaET7IV3WDvMibAVfw/132","comment_is_top":false,"comment_ctime":1572059378,"is_pvip":false,"replies":[{"id":"56417","content":"加餐在这个专栏，先完成这个专栏，加餐，答疑，修订都还没做完！","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572449909,"ip_address":"","comment_id":144795,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572059378","product_id":100033601,"comment_content":"老师加餐环节还是在这个专栏下么？后续还会有其他课程安排么","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472115,"discussion_content":"加餐在这个专栏，先完成这个专栏，加餐，答疑，修订都还没做完！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572449909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144766,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1572052620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572052620","product_id":100033601,"comment_content":"老师讲得太好了，期待加餐内容，跟着老师一起精进！","like_count":0},{"had_liked":false,"id":144759,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1572051529,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1572051529","product_id":100033601,"comment_content":"浏览器获取 CA证书的公钥不是从该证书的上级 CA 证书中获取的吗？这样一级一级往上验证CA，验证到跟证书<br><br>这样的话不是先验证CA证书链，然后在证书信息摘要的比较吗？","like_count":0},{"had_liked":false,"id":144744,"user_name":"葛维维","can_delete":false,"product_type":"c1","uid":1160543,"ip_address":"","ucode":"A2CCAB6301168E","user_header":"https://static001.geekbang.org/account/avatar/00/11/b5/5f/a56fa0b2.jpg","comment_is_top":false,"comment_ctime":1572021343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572021343","product_id":100033601,"comment_content":"辛苦 终于更完","like_count":0}]}