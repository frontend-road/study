{"id":376711,"title":"07 | Cache与内存：程序放在哪儿？","content":"<p>你好，我是LMOS。</p><p>在前面的课程里，我们已经知道了CPU是如何执行程序的，也研究了程序的地址空间，这里我们终于到了程序的存放地点——内存。</p><p>你知道什么是Cache吗？在你心中，真实的内存又是什么样子呢？今天我们就来重新认识一下Cache和内存，这对我们利用Cache写出高性能的程序代码和实现操作系统管理内存，有着巨大的帮助。</p><p>通过这节课的内容，我们一起来看看内存到底是啥，它有什么特性。有了这个认识，你就能更加深入地理解我们看似熟悉的局部性原理，从而搞清楚，为啥Cache是解决内存瓶颈的神来之笔。最后，我还会带你分析x86平台上的Cache，规避Cache引发的一致性问题，并让你掌握获取内存视图的方法。</p><p>那话不多说，带着刚才的问题，我们正式进入今天的学习吧！</p><h2>从一段“经典”代码看局部性原理</h2><p>不知道，你还记不记得C语言打印九九乘法表的代码，想不起来也没关系，下面我把它贴出来，代码很短，也很简单，就算你自己写一个也用不了一分钟，如下所示。</p><pre><code>#include &lt;stdio.h&gt;\nint main(){\n    int i,j;\n    for(i=1;i&lt;=9;i++){        \n        for(j=1;j&lt;=i;j++){\n            printf(&quot;%d*%d=%2d  &quot;,i,j,i*j);\n        }\n        printf(&quot;\\n&quot;);\n    }\n    return 0;\n}\n</code></pre><p>我们当然不是为了研究代码本身，这个代码非常简单，这里我们主要是观察这个结构，代码的结构主要是<strong>顺序、分支、循环</strong>，这三种结构可以写出现存所有算法的程序。</p><!-- [[[read_end]]] --><p>我们常规情况下写的代码是顺序和循环结构居多。上面的代码中有两重循环，内层循环的次数受到外层循环变量的影响。就是这么简单，但是越简单的东西越容易看到本质。</p><p>可以看到，这个代码大数时间在执行一个乘法计算和调用一个printf函数，而程序一旦编译装载进内存中，它的地址就确定了。也就是说，CPU大多数时间在访问相同或者与此相邻的地址，换句话说就是：CPU大多数时间在执行相同的指令或者与此相邻的指令。这就是大名鼎鼎的<strong>程序局部性原理</strong>。</p><h2>内存</h2><p>明白了程序的局部性原理之后，我们再来看看内存。你或许感觉这跨越有点大，但是只有明白了内存的结构和特性，你才能明白程序局部性原理的应用场景和它的重要性。</p><p>内存也可称为主存，不管硬盘多大、里面存放了多少程序和数据，只要程序运行或者数据要进行计算处理，就必须先将它们装入内存。我们先来看看内存长什么样（你也可以上网自行搜索），如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/0d/8e/0d0d85383416f2f8841aeebe7021a88e.jpg?wh=3541*1553\" alt=\"\"></p><p>从上图可以看到在PCB板上有内存颗粒芯片，主要是用来存放数据的。SPD芯片用于存放内存自身的容量、频率、厂商等信息。还有最显眼的金手指，用于连接数据总线和地址总线，电源等。</p><p>其实从专业角度讲，内存应该叫<strong>DRAM</strong>，即动态随机存储器。内存储存颗粒芯片中的存储单元是由电容和相关元件做成的，电容存储电荷的多、少代表数字信号0和1。</p><p>而随着时间的流逝，电容存在漏电现象，这导致电荷不足，就会让存储单元的数据出错，所以DRAM需要周期性刷新，以保持电荷状态。DRAM结构较简单且集成度很高，通常用于制造内存条中的储存颗粒芯片。</p><p>虽然内存技术标准不断更新，但是储存颗粒的内部结构没有本质改变，还是电容存放电荷，标准看似更多，实际上只是提升了位宽、工作频率，以及传输时预取的数据位数。</p><p>比如DDR SDRAM，即双倍速率同步动态随机存储器，它使用2.5V的工作电压，数据位宽为64位，核心频率最高为166MHz。下面简称DDR内存，它表示每一个时钟脉冲传输两次数据，分别在时钟脉冲的上升沿和下降沿各传输一次数据，因此称为双倍速率的SDRAM。</p><p>后来的DDR2、DDR3、DDR4也都在核心频率和预取位数上做了提升。最新的DDR4采用1.2V工作电压，数据位宽为64位，预取16位数据。DDR4取消了双通道机制，一条内存即为一条通道，工作频率最高可达4266MHz，单根DDR4内存的数据传输带宽最高为34GB/s。</p><p>其实我们无需过多关注内存硬件层面的技术规格标准，重点需要关注的是，<strong>内存的速度还有逻辑上内存和系统的连接方式和结构</strong>，这样你就能意识到内存有多慢，还有是什么原因导致内存慢的。</p><p>我们还是画幅图说明吧，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/1b/ed/1b41056cce55b17a2366d7b9dd922aed.jpg?wh=3155*2445\" alt=\"\" title=\"DDR内存逻辑结构连接图\"></p><p>结合图片我们看到，控制内存刷新和内存读写的是内存控制器，而内存控制器集成在北桥芯片中。传统方式下，北桥芯片存在于系统主板上，而现在由于芯片制造工艺的升级，芯片集成度越来越高，所以北桥芯片被就集成到CPU芯片中了，同时这也大大提升了CPU访问内存的性能。</p><p>而作为软件开发人员，从逻辑上我们只需要把内存看成一个巨大的字节数组就可以，而内存地址就是这个数组的下标。</p><h2>CPU到内存的性能瓶颈</h2><p>尽管CPU和内存是同时代发展的，但CPU所使用技术工艺的材料和内存是不同的，侧重点也不同，价格也不同。如果内存使用CPU的工艺和材料制造，那内存条的昂贵程度会超乎想象，没有多少人能买得起。</p><p>由于这些不同，导致了CPU和内存条的数据吞吐量天差地别。尽管最新的DDR4内存条带宽高达34GB/s，然而这相比CPU的数据吞吐量要慢上几个数量级。再加上多核心CPU同时访问内存，会导致总线争用问题，数据吞吐量会进一步下降。</p><p>CPU要数据，内存一时给不了怎么办？CPU就得等，通常CPU会让总线插入等待时钟周期，直到内存准备好，到这里你就会发现，无论CPU的性能多高都没用，而<strong>内存才是决定系统整体性能的关键</strong>。显然依靠目前的理论直接提升内存性能，达到CPU的同等水平，这是不可行的，得想其它的办法。</p><h2>Cache</h2><p>让我们重新回到前面的场景中，回到程序的局部性原理，它告诉我们：CPU大多数时间在访问相同或者与此相邻的地址。那么，我们立马就可以想到用一块<strong>小而快</strong>的储存器，放在CPU和内存之间，就可以利用程序的局部性原理来缓解CPU和内存之间的性能瓶颈。这块<strong>小而快</strong>的储存器就是Cache，即高速缓存。</p><p>Cache中存放了内存中的一部分数据，CPU在访问内存时要先访问Cache，若Cache中有需要的数据就直接从Cache中取出，若没有则需要从内存中读取数据，并同时把这块数据放入Cache中。但是由于程序的局部性原理，在一段时间内，CPU总是能从Cache中读取到自己想要的数据。</p><p>Cache可以集成在CPU内部，也可以做成独立的芯片放在总线上，现在x86 CPU和ARM CPU都是集成在CPU内部的。其逻辑结构如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/47/56/474189597993406a01a2ae171b754756.jpg?wh=2805*2005\" alt=\"\" title=\"Cache结构框架图\"></p><p>Cache主要由高速的静态储存器、地址转换模块和Cache行替换模块组成。</p><p>Cache会把自己的高速静态储存器和内存分成大小相同的行，一行大小通常为32字节或者64字节。Cache和内存交换数据的最小单位是一行，为方便管理，在Cache内部的高速储存器中，多个行又会形成一组。</p><p>除了正常的数据空间外，Cache行中还有一些标志位，如脏位、回写位，访问位等，这些位会被Cache的替换模块所使用。</p><p>Cache大致的逻辑工作流程如下。</p><p>1.CPU发出的地址由Cache的地址转换模块分成3段：组号，行号，行内偏移。</p><p>2.Cache会根据组号、行号查找高速静态储存器中对应的行。如果找到即命中，用行内偏移读取并返回数据给CPU，否则就分配一个新行并访问内存，把内存中对应的数据加载到Cache行并返回给CPU。写入操作则比较直接，分为回写和直通写，回写是写入对应的Cache行就结束了，直通写则是在写入Cache行的同时写入内存。</p><p>3.如果没有新行了，就要进入行替换逻辑，即找出一个Cache行写回内存，腾出空间，替换行有相关的算法，<strong>替换算法是为了让替换的代价最小化</strong>。例如，找出一个没有修改的Cache行，这样就不用把它其中的数据回写到内存中了，还有找出存在时间最久远的那个Cache行，因为它大概率不会再访问了。</p><p>以上这些逻辑都由Cache硬件独立实现，软件不用做任何工作，对软件是透明的。</p><h2>Cache带来的问题</h2><p>Cache虽然带来性能方面的提升，但同时也给和硬件和软件开发带来了问题，那就是数据一致性问题。</p><p>为了搞清楚这个问题，我们必须先搞清楚Cache在硬件层面的结构，下面我画了x86 CPU的Cache结构图：</p><p><img src=\"https://static001.geekbang.org/resource/image/97/bd/976f5cf91bc656e2a876235a5d2efabd.jpg?wh=2805*2805\" alt=\"\" title=\"x86 CPU的Cache结构图\"></p><p>这是一颗最简单的双核心CPU，它有三级Cache，第一级Cache是指令和数据分开的，第二级Cache是独立于CPU核心的，第三级Cache是所有CPU核心共享的。</p><p>下面来看看Cache的一致性问题，主要包括这三个方面.</p><p>1.一个CPU核心中的指令Cache和数据Cache的一致性问题。<br>\n2.多个CPU核心各自的2级Cache的一致性问题。<br>\n3.CPU的3级Cache与设备内存，如DMA、网卡帧储存，显存之间的一致性问题。这里我们不需要关注这个问题。</p><p>我们先来看看CPU核心中的指令Cache和数据Cache的一致性问题，对于程序代码运行而言，指令都是经过指令Cache，而指令中涉及到的数据则会经过数据Cache。</p><p>所以，对自修改的代码（即修改运行中代码指令数据，变成新的程序）而言，比如我们修改了内存地址A这个位置的代码（典型的情况是Java运行时编译器），这个时候我们是通过储存的方式去写的地址A，所以新的指令会进入数据Cache。</p><p>但是我们接下来去执行地址A处的指令的时候，指令Cache里面可能命中的是修改之前的指令。所以，这个时候软件需要把数据Cache中的数据写入到内存中，然后让指令Cache无效，重新加载内存中的数据。</p><p>再来看看多个CPU核心各自的2级Cache的一致性问题。从上图中可以发现，两个CPU核心共享了一个3级Cache。比如第一个CPU核心读取了一个A地址处的变量，第二个CPU也读取A地址处的变量，那么第二个CPU核心是不是需要从内存里面经过第3、2、1级Cache再读一遍，这个显然是没有必要的。</p><p>在硬件上Cache相关的控制单元，可以把第一个CPU核心的A地址处Cache内容直接复制到第二个CPU的第2、1级Cache，这样两个CPU核心都得到了A地址的数据。不过如果这时第一个CPU核心改写了A地址处的数据，而第二个CPU核心的2级Cache里面还是原来的值，数据显然就不一致了。</p><p>为了解决这些问题，硬件工程师们开发了多种协议，典型的多核心Cache数据同步协议有MESI和MOESI。MOESI和MESI大同小异，下面我们就去研究一下MESI协议。</p><h2>Cache的MESI协议</h2><p>MESI协议定义了4种基本状态：M、E、S、I，即修改（Modified）、独占（Exclusive）、共享（Shared）和无效（Invalid）。下面我结合示意图，给你解释一下这四种状态。</p><p>1.M修改（Modified）：当前Cache的内容有效，数据已经被修改而且与内存中的数据不一致，数据只在当前Cache里存在。比如说，内存里面X=5，而CPU核心1的Cache中X=2，Cache与内存不一致，CPU核心2中没有X。</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/61/b19d638e9a37290c1ea1feebce2d7e61.jpg?wh=2405*1805\" alt=\"\" title=\"MESI协议-M\"></p><ol start=\"2\">\n<li>E独占（Exclusive）：当前Cache中的内容有效，数据与内存中的数据一致，数据只在当前Cache里存在；类似RAM里面X=5，同样CPU核心1的Cache中X=5（Cache和内存中的数据一致），CPU核心2中没有X。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/bb/e2/bb1fc473f93089a1414a4e01f888dae2.jpg?wh=2405*1805\" alt=\"\" title=\"MESI协议-E\"></p><ol start=\"3\">\n<li>S共享（Shared）：当前Cache中的内容有效，Cache中的数据与内存中的数据一致，数据在多个CPU核心中的Cache里面存在。例如在CPU核心1、CPU核心2里面Cache中的X=5，而内存中也是X=5保持一致。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/03/b0/030bd3e97c93bdef900abc0c6a72b9b0.jpg?wh=2505*1905\" alt=\"\" title=\"MESI协议-S\"></p><ol start=\"4\">\n<li>无效（Invalid）：当前Cache无效。前面三幅图Cache中没有数据的那些，都属于这个情况。</li>\n</ol><p>最后还要说一下Cache硬件，它会监控所有CPU上Cache的操作，根据相应的操作使得Cache里的数据行在上面这些状态之间切换。Cache硬件通过这些状态的变化，就能安全地控制各Cache间、各Cache与内存之间的数据一致性了。</p><p>这里不再深入探讨MESI协议了，感兴趣的话你可以自行拓展学习。这里只是为了让你明白，有了Cache虽然提升了系统性能，却也带来了很多问题，好在这些问题都由硬件自动完成，对软件而言是透明的。</p><p>不过看似对软件透明，这却是有代价的，因为硬件需要耗费时间来处理这些问题。如果我们编程的时候不注意，不能很好地规避这些问题，就会引起硬件去维护大量的Cache数据同步，这就会使程序运行的效能大大下降。</p><h2>开启Cache</h2><p>前面我们研究了大量的Cache底层细节和问题，就是为了使用Cache，目前Cache已经成为了现代计算机的标配，但是x86 CPU上默认是关闭Cache的，需要在CPU初始化时将其开启。</p><p>在x86 CPU上开启Cache非常简单，只需要将CR0寄存器中CD、NW位同时清0即可。CD=1时表示Cache关闭，NW=1时CPU不维护内存数据一致性。所以<strong>CD=0、NW=0的组合</strong>才是开启Cache的正确方法。</p><p>开启Cache只需要用四行汇编代码，代码如下：</p><pre><code>mov eax, cr0\n;开启 CACHE    \nbtr eax,29 ;CR0.NW=0\nbtr eax,30\t;CR0.CD=0\nmov cr0, eax\n</code></pre><h2>获取内存视图</h2><p>作为系统软件开发人员，与其了解内存内部构造原理，不如了解系统内存有多大。这个作用更大。</p><p>根据前面课程所讲，给出一个物理地址并不能准确地定位到内存空间，内存空间只是映射物理地址空间中的一个子集，物理地址空间中可能有空洞，有ROM，有内存，有显存，有I/O寄存器，所以获取内存有多大没用，关键是<strong>要获取哪些物理地址空间是可以读写的内存</strong>。</p><p>物理地址空间是由北桥芯片控制管理的，那我们是不是要找北桥要内存的地址空间呢？当然不是，在x86平台上还有更方便简单的办法，那就是BIOS提供的实模式下中断服务，就是int指令后面跟着一个常数的形式。</p><p>由于PC机上电后由BIOS执行硬件初始化，中断向量表是BIOS设置的，所以执行中断自然执行BIOS服务。这个中断服务是int 15h，但是它需要一些参数，就是在执行int 15h之前，对特定寄存器设置一些值，代码如下。</p><pre><code>_getmemmap:\n\txor ebx,ebx ;ebx设为0\n\tmov edi,E80MAP_ADR ;edi设为存放输出结果的1MB内的物理内存地址\nloop:\n\tmov eax,0e820h ;eax必须为0e820h\n\tmov ecx,20 ;输出结果数据项的大小为20字节：8字节内存基地址，8字节内存长度，4字节内存类型\n\tmov edx,0534d4150h ;edx必须为0534d4150h\n\tint 15h ;执行中断\n\tjc error ;如果flags寄存器的C位置1，则表示出错\n\tadd edi,20;更新下一次输出结果的地址\n\tcmp ebx,0 ;如ebx为0，则表示循环迭代结束\n\tjne loop  ;还有结果项，继续迭代\n    ret\nerror:;出错处理\n</code></pre><p>上面的代码是在迭代中执行中断，每次中断都输出一个20字节大小数据项，最后会形成一个该数据项（结构体）的数组，可以用C语言结构表示，如下。</p><pre><code>#define RAM_USABLE 1 //可用内存\n#define RAM_RESERV 2 //保留内存不可使用\n#define RAM_ACPIREC 3 //ACPI表相关的\n#define RAM_ACPINVS 4 //ACPI NVS空间\n#define RAM_AREACON 5 //包含坏内存\ntypedef struct s_e820{\n    u64_t saddr;    /* 内存开始地址 */\n    u64_t lsize;    /* 内存大小 */\n    u32_t type;    /* 内存类型 */\n}e820map_t;\n</code></pre><h2>重点回顾</h2><p>又到了课程尾声，内存和Cache的学习就告一段落了。今天我们主要讲了四部分内容，局部性原理、内存结构特性、Cache工作原理和x86上的应用。我们一起来回顾一下这节课的重点。</p><p>首先从一个场景开始，我们了解了程序通常的结构。通过观察这种结构，我们发现CPU大多数时间在访问相同或者与此相邻的地址，执行相同的指令或者与此相邻的指令。这种现象就是程序<strong>局部性原理</strong>。</p><p>然后，我们研究了内存的结构和特性。了解它的工艺标准和内部原理，知道内存容量相对可以做得较大，程序和数据都要放在其中才能被CPU执行和处理。但是内存的速度却远远赶不上CPU的速度。</p><p>因为内存和CPU之间性能瓶颈和程序局部性原理，所以才开发出了Cache（即高速缓存），它由高速静态储存器和相应的控制逻辑组成。</p><p>Cache容量比内存小，速度却比内存高，它在CPU和内存之间，CPU访问内存首先会访问Cache，如果访问命中则会大大提升性能，然而它却带来了问题，那就是<strong>数据的一致性问题</strong>，为了解决这个问题，工程师又开发了Cache<strong>一致性协议MESI</strong>。这个协议由Cache硬件执行，对软件透明。</p><p>最后，我们掌握了x86平台上开启Cache和获取物理内存视图的方法。</p><p>因为这节课也是我们硬件模块的最后一节，可以说<strong>没有硬件平台知识，写操作系统就如同空中建楼</strong>，通过这个部分的学习，就算是为写操作系统打好了地基。为了让你更系统地认识这个模块，我给你整理了这三节课的知识导图。</p><p><img src=\"https://static001.geekbang.org/resource/image/d4/y0/d43c10bbb1a1159d9da7d3b14a3cfyy0.jpg?wh=3145*3450\" alt=\"\"></p><h2>思考题</h2><p>请你思考一下，如何写出让CPU跑得更快的代码？由于Cache比内存快几个数量级，所以这个问题也可以转换成：如何写出提高Cache命中率的代码？</p>","comments":[{"had_liked":false,"id":294306,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":true,"comment_ctime":1621870380,"is_pvip":false,"replies":[{"id":"106941","content":"大神你好，你以前是做性能优化的吧 ，这些问题说的很对","user_name":"作者回复","comment_id":294306,"uid":"1345199","ip_address":"","utype":1,"ctime":1622041039,"user_name_real":"LMOS"}],"discussion_count":5,"race_medal":0,"score":"9.223372931829801e+18","product_id":100078401,"comment_content":"如何写出让 CPU 跑得更快的代码？可以从以下几方面入手：<br>1、遵从80-20法则，程序80%的时间在运行20%或更少的代码，针对热代码进行优化，才容易产出效果；<br>2、遵从数据访问的局部性法则，按数据存放顺序访问内存效率远高于乱序访问内存效率，也就是尽量帮助CPU做好数据Cache的预测工作。同样根据Cache大小，做好数据结构的优化工作，进行数据压缩或数据填充，也是提升Cache效率的好方式；<br>3、遵从指令访问的局部性法则，减少跳转指令，同样是尽量帮助CPU做好数据Cache的预测工作；现代CPU都有一些预测功能【如分支预测】，利用好CPU的这些功能，也会提升Cache命中率；<br>4、避免计算线程在多个核心之间漂移，避免缓存重复加载，可以绑定核心【物理核即可，不用到逻辑核】，提高效率；<br>5、去除伪共享缓存：在多核环境下，减少多个核心对同一区域内存的读写并发操作，减少内存失效的情况的发生；<br>===开始跑题===<br>6、合理提高进程优先级，减少进程间切换，可以变相提供Cache提速的效果<br>7、关闭Swap，可以变相提供内存提速、Cache提速的效果；<br>8、使用Intel自家的编译器，开启性能优化，很多时候可以提速运算效率；<br>9、使用C语言，而不是更高级的语言，很多时候可以提速运算效率；<br>10、直接使用昂贵的寄存器作为变量，可以变相提供加速效果；","like_count":209,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520598,"discussion_content":"大神你好，你以前是做性能优化的吧 ，这些问题说的很对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622041039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2175009,"avatar":"https://static001.geekbang.org/account/avatar/00/21/30/21/5389b6dd.jpg","nickname":"尹武辉","note":"","ucode":"EF56E505F09AFE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400589,"discussion_content":"我感觉DPDK代码就是性能优化教科书🤣","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1633340645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1057056,"avatar":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","nickname":"秋天","note":"","ucode":"A7E1D953EF7E17","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588266,"discussion_content":"大神的回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663640523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"日本"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2224641,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f2/01/80521228.jpg","nickname":"郑斌","note":"","ucode":"E253447BAB1E23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414243,"discussion_content":"请教下第五条如何实现呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636700674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1322294,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKV7whdOgaEs29qvv2muoo7RBGjtpGa57yl6KT7Q2ux551ykGElQhiaUOFwwOX1PndLeqcWNNX0Pgg/132","nickname":"大春","note":"","ucode":"0C2DB9601699AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377235,"discussion_content":"请教下，关闭swap是指关闭匿名页的swap交换区吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622555844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294162,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":true,"comment_ctime":1621811649,"is_pvip":false,"replies":[{"id":"106967","content":"优秀，给你置顶，供大伙讨论。","user_name":"编辑回复","comment_id":294162,"uid":"1501385","ip_address":"","utype":2,"ctime":1622043380,"user_name_real":"赵宇新"}],"discussion_count":13,"race_medal":0,"score":"9.2233722746998006e+18","product_id":100078401,"comment_content":"在CSAPP第六章对存储器层次架构有详细的探讨，感兴趣的同学可以查阅一下，这里我简单总结一下当做思考题答案。<br>一个编写良好的计算机程序尝尝具有良好的局部性，这被称为局部性原理，对硬件和软件都有极大的影响。<br>局部性可分为两种，1.程序数据引用局部性;2.指令局部性。<br>CPU对数据和指令都存在高速缓存，当缓存中的数据大面积命中时，则该代码拥有良好的空间局部性;当缓存中的指令大面积命中时，也该代码拥有良好的时间局部性。<br>别忘了，CPU对于指令和数据的操作都需要花时间，那如果二者如果都大面积的缓存命中，可以减少非常多的内存访问操作，对于CPU来说，内存访问就是性能瓶颈所在。<br>因此编写高速缓存友好的代码是必要的，高手与小白往往只有一步之遥！<br>基本方法大致如下:<br>1.让最常见的情况运行得快，核心函数中的核心部分，是影响性能的关键点，它们占据了程序的大部分运行时间，所以要把注意力放在它们身上。<br>2.尽量减少每个循环内部的缓存不命中数量，循环是缓存工作的重点，一个循环容易带来性能问题，而它恰好也容易被优化成空间、时间局部性良好的代码。<br>欢迎大家一起交流指正~","like_count":56,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520539,"discussion_content":"优秀，给你置顶，供大伙讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622043380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2052007,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLajLoBBBPgMCl5eibqWpzUSKtJRtNGaYzkKeNTCFY1IeicjpXSxDmEjf0z1JzjtzUR3maJXQzebSWA/132","nickname":"Geek_jackli","note":"","ucode":"DD6B91E486DE40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376289,"discussion_content":"如果能举个例子，就再好不过了，怎样让最常见的情况运行的快？怎样尽量减少每个循环内部的缓存不命中数量？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1622072685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2052007,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLajLoBBBPgMCl5eibqWpzUSKtJRtNGaYzkKeNTCFY1IeicjpXSxDmEjf0z1JzjtzUR3maJXQzebSWA/132","nickname":"Geek_jackli","note":"","ucode":"DD6B91E486DE40","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376292,"discussion_content":"CSAPP里面有一个cache lab，通过分块来解决矩阵转置的缓存miss，是一个非常好的实战机会，推荐你去完成一下。\ncache是一个大话题，即使举例，起码也得一节来大致讲讲，所以按照这个思路自己去拓展吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622072954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376289,"ip_address":""},"score":376292,"extra":""},{"author":{"id":2052007,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLajLoBBBPgMCl5eibqWpzUSKtJRtNGaYzkKeNTCFY1IeicjpXSxDmEjf0z1JzjtzUR3maJXQzebSWA/132","nickname":"Geek_jackli","note":"","ucode":"DD6B91E486DE40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376477,"discussion_content":"好的，谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622158072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376292,"ip_address":""},"score":376477,"extra":""}]},{"author":{"id":1057056,"avatar":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","nickname":"秋天","note":"","ucode":"A7E1D953EF7E17","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588267,"discussion_content":"都是对系统底层理解很深的人啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663640543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"日本"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1616036,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a8/a4/ab978df8.jpg","nickname":"SilenceKi🏀🏀","note":"","ucode":"80645C256DF101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378879,"discussion_content":"请问有组织吗，想拉群一起学习学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623482762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":1616036,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a8/a4/ab978df8.jpg","nickname":"SilenceKi🏀🏀","note":"","ucode":"80645C256DF101","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379306,"discussion_content":"有啊，课程简介那有进群方式～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623822229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":378879,"ip_address":""},"score":379306,"extra":""},{"author":{"id":1616036,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a8/a4/ab978df8.jpg","nickname":"SilenceKi🏀🏀","note":"","ucode":"80645C256DF101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":379676,"discussion_content":"谢谢🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624069504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":379306,"ip_address":""},"score":379676,"extra":""}]},{"author":{"id":1587666,"avatar":"https://static001.geekbang.org/account/avatar/00/18/39/d2/845c0e39.jpg","nickname":"送过快递的码农","note":"","ucode":"66EA81B3BADC73","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375767,"discussion_content":"果然是大佬！！哎，对于大能来说，内存是性能瓶颈。我们写业务代码的人来说，IO才是瓶颈。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621845330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1140762,"avatar":"https://static001.geekbang.org/account/avatar/00/11/68/1a/d9a35bc7.jpg","nickname":"Ziggy_aa","note":"","ucode":"B8921BF0C11DDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1587666,"avatar":"https://static001.geekbang.org/account/avatar/00/18/39/d2/845c0e39.jpg","nickname":"送过快递的码农","note":"","ucode":"66EA81B3BADC73","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377569,"discussion_content":"个人的一点儿想法，内存是 I/O 的一部分，内存的提升也涉及到 I/O 的提升。当然，提升 I/O 不一定要触及到内存，了解如何充分利用存储设备的特性是提升 I/O 性能的关键。现在常用的 NAND SSD 就需要用高频度，大请求去激活其内部的并行能力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622711804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375767,"ip_address":""},"score":377569,"extra":""}]},{"author":{"id":1170811,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/7b/c1efb1d9.jpg","nickname":"胡永","note":"","ucode":"931DA91D191FEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375749,"discussion_content":"Java里面有个著名的优化就是缓存行填充，让一个缓存行(64字节)只保存一个变量，大大减少cache line失效，影响相邻变量的问题。不知道其他语言有没有类似的优化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621840337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1170811,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/7b/c1efb1d9.jpg","nickname":"胡永","note":"","ucode":"931DA91D191FEE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375752,"discussion_content":"nginx里面也用到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621840650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375749,"ip_address":""},"score":375752,"extra":""}]},{"author":{"id":1738119,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/85/87/727142bc.jpg","nickname":"MacBao","note":"","ucode":"8CF51C3688C8F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375680,"discussion_content":"二八原则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621816086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294212,"user_name":"zhanyd","can_delete":false,"product_type":"c1","uid":1073845,"ip_address":"","ucode":"4C994EE512A3C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","comment_is_top":true,"comment_ctime":1621833332,"is_pvip":false,"replies":[{"id":"106833","content":"感谢分享，6666。","user_name":"作者回复","comment_id":294212,"uid":"1501385","ip_address":"","utype":1,"ctime":1621942420,"user_name_real":"听水的湖"}],"discussion_count":1,"race_medal":0,"score":"9.2233721415558001e+18","product_id":100078401,"comment_content":"我以前写过一篇关于缓存局部性原理的文章，有兴趣的同学可以看看：<br>https:&#47;&#47;blog.csdn.net&#47;zhanyd&#47;article&#47;details&#47;102631248","like_count":25,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520559,"discussion_content":"感谢分享，6666。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621942420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299892,"user_name":"数学汤家凤","can_delete":false,"product_type":"c1","uid":2029485,"ip_address":"","ucode":"DE84E777C384AD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f7/ad/4fd4d867.jpg","comment_is_top":true,"comment_ctime":1624894916,"is_pvip":true,"replies":[{"id":"108758","content":"你好，非常正确","user_name":"作者回复","comment_id":299892,"uid":"1345199","ip_address":"","utype":1,"ctime":1624930174,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"9.2233720857242993e+18","product_id":100078401,"comment_content":"程序代码优化 基于csapp做的整理 https:&#47;&#47;blog.csdn.net&#47;u013570834&#47;article&#47;details&#47;117635229?utm_source=app&amp;app_version=4.9.2<br>1. gcc 编译器优化很蠢并不会猜测程序员编码的意图，只会做非常保守的优化<br>2.循环对于具有很好的时间局部性，所以我们尽量避免 goto 与非本地跳转<br>3. 数组在内存中行优先排列，所以数组的遍历方式对cache的命中率影响极大<br>4. 分支预测失败虽然会带来极大的惩罚，但这不是我们关注的重点，我们应该关注的如何能用条件传送的方式避免分支判断<br>5. 根据阿姆达尔定律，加速大的部分永远比加速小的要有效，所以我们可以根据对程序的分析来做具体的优化","like_count":12,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522576,"discussion_content":"你好，非常正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624930174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295148,"user_name":"Spring","can_delete":false,"product_type":"c1","uid":1222211,"ip_address":"","ucode":"8175463FB4705B","user_header":"https://static001.geekbang.org/account/avatar/00/12/a6/43/cb6ab349.jpg","comment_is_top":false,"comment_ctime":1622272980,"is_pvip":false,"replies":[{"id":"107287","content":"66666","user_name":"作者回复","comment_id":295148,"uid":"1345199","ip_address":"","utype":1,"ctime":1622472442,"user_name_real":"LMOS"}],"discussion_count":9,"race_medal":0,"score":"362399525844","product_id":100078401,"comment_content":"补充一下MESI协议，MESI分别代表了高速缓存行的四种状态：<br>最开始只有一个核读取了A数据，此时状态为E独占，数据是干净的，<br>后来另一个核又读取了A数据，此时状态为S共享，数据还是干净的，<br>接着其中一个核修改了数据A，此时会向其他核广播数据已被修改，让其他核的数据状态变为I失效，而本核的数据还没回写内存，状态则变为M已修改，等待后续刷新缓存后，数据变回E独占，其他核由于数据已失效，读数据A时需要重新从内存读到高速缓存，此时数据又共享了","like_count":85,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520965,"discussion_content":"66666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622472442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2224641,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f2/01/80521228.jpg","nickname":"郑斌","note":"","ucode":"E253447BAB1E23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414247,"discussion_content":"赞，本来脑子里只是几个独立的状态的概念，现在脑子里有状态机了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636700906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134694,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","nickname":"Return12321","note":"","ucode":"F7A3C5ED02E1D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408836,"discussion_content":"厉害，这样一下就明白4种状态的关系了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635330246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2703713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/41/61/cf691ecc.jpg","nickname":"now","note":"","ucode":"096ECA01487E76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406881,"discussion_content":"一下清晰了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634864470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1870501,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/8a/a5/6367def9.jpg","nickname":"Yoge","note":"","ucode":"44100445F2A775","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387856,"discussion_content":"如果M状态下，另一个核发又读了A数据呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628474435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1145907,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep2gRIticwS6CiatsCiaU4QRjAODKibQevrhSciatrmd90lNIZFxywE9yyZgAxKTmWiaBSH4zZUcRIV46qQ/132","nickname":"englefly","note":"","ucode":"E3FCF19E618718","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1870501,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/8a/a5/6367def9.jpg","nickname":"Yoge","note":"","ucode":"44100445F2A775","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":543058,"discussion_content":"肯定会触发修改数据A的核将A刷回内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640941469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387856,"ip_address":""},"score":543058,"extra":""}]},{"author":{"id":2621050,"avatar":"https://static001.geekbang.org/account/avatar/00/27/fe/7a/a3c4718c.jpg","nickname":"信微","note":"","ucode":"B77E37910780C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384319,"discussion_content":"补充的好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626493902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2693109,"avatar":"https://static001.geekbang.org/account/avatar/00/29/17/f5/93682e42.jpg","nickname":"Pure","note":"","ucode":"AADAA289B0C742","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384150,"discussion_content":"这样说感觉很清楚了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626404346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1044517,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f0/25/d3da7ca9.jpg","nickname":"wuyang","note":"","ucode":"81000322FF96A7","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382411,"discussion_content":"这个补充挺好，一下子就明白这四个状态的关系了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625560545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311900,"user_name":"aa","can_delete":false,"product_type":"c1","uid":2760479,"ip_address":"","ucode":"9E5E61B28D4A85","user_header":"https://static001.geekbang.org/account/avatar/00/2a/1f/1f/968bc567.jpg","comment_is_top":false,"comment_ctime":1631526308,"is_pvip":false,"replies":[{"id":"113152","content":"是的","user_name":"作者回复","comment_id":311900,"uid":"1345199","ip_address":"","utype":1,"ctime":1631753144,"user_name_real":"LMOS"}],"discussion_count":4,"race_medal":0,"score":"70351003044","product_id":100078401,"comment_content":"恍然大悟，原来这就是要求我们写高复用性代码的原因，针对经常会用到的功能封装成通用函数或库，供整个程序调用，这些通用函数装载入cache后，因为其高复用性长久的存在于cache中，cpu自然就跑得更快。","like_count":17,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526786,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631753144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2812934,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/ec/06/4494ecde.jpg","nickname":"jk001","note":"","ucode":"FF1E3A2883E8D9","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581705,"discussion_content":"我到是觉得你说的代码复用和cache高概率命中是两码事，可能代码复用对高命中有点作用，但它俩是两个维度的事。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1658930189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2270365,"avatar":"https://static001.geekbang.org/account/avatar/00/22/a4/9d/95900f70.jpg","nickname":"T------T","note":"","ucode":"AC68D88893FAD7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407109,"discussion_content":"以前只以为封装函数是为了减少代码冗余，没想到还能从cache这个思路看","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634911057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1513948,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/dc/9d3ed421.jpg","nickname":"monchickey","note":"","ucode":"D7B670444F62B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552027,"discussion_content":"从指令缓存上来说会更快，但是函数调用会频繁压栈出栈这块性能上相比直接展开指令也会有降低吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645238405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297494,"user_name":"K菌无惨","can_delete":false,"product_type":"c1","uid":2194764,"ip_address":"","ucode":"97A532D588FD49","user_header":"","comment_is_top":false,"comment_ctime":1623578691,"is_pvip":false,"replies":[{"id":"108065","content":"送你一套 66666","user_name":"作者回复","comment_id":297494,"uid":"1345199","ip_address":"","utype":1,"ctime":1623723374,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"40278284355","product_id":100078401,"comment_content":"1.  减少使用带有jmp指令的代码，提高指令cache的局部性（不过cpu貌似有分支预测器来优化jmp指令带来的性能损耗）<br>2. 对于需要连续访问的数据，可以将其放在一块以提高数据cache的局部性<br>3. 对于需要被多个CPU执行写操作的多个数据，可以根据cache line的大小对这些数据进行padding操作，来降低缓存一致性协议带来的读写内存频率","like_count":9,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521838,"discussion_content":"送你一套 66666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623723374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294179,"user_name":"园园","can_delete":false,"product_type":"c1","uid":1257028,"ip_address":"","ucode":"2A34FD1FC31042","user_header":"https://static001.geekbang.org/account/avatar/00/13/2e/44/b6f5b1fd.jpg","comment_is_top":false,"comment_ctime":1621819495,"is_pvip":false,"replies":[{"id":"106955","content":"你好，对，你学的很透","user_name":"作者回复","comment_id":294179,"uid":"1345199","ip_address":"","utype":1,"ctime":1622041770,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"35981557863","product_id":100078401,"comment_content":"提高Cache的命中率可以从优化指令布局和优化数据布局两个方面开展。比如减少频繁的跳转，数据集中连续存放等。","like_count":9,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520547,"discussion_content":"你好，对，你学的很透","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622041770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294174,"user_name":"blentle","can_delete":false,"product_type":"c1","uid":1064679,"ip_address":"","ucode":"AC092609A4942A","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e7/261711a5.jpg","comment_is_top":false,"comment_ctime":1621817969,"is_pvip":false,"replies":[{"id":"106956","content":"是，你考虑的很深刻，说够笑话加内存 加服务器  有时候时间和空间是不可以兼得的","user_name":"作者回复","comment_id":294174,"uid":"1345199","ip_address":"","utype":1,"ctime":1622041965,"user_name_real":"LMOS"}],"discussion_count":5,"race_medal":0,"score":"27391621745","product_id":100078401,"comment_content":"回答一下思考题. 因为缓存行是固定的，32或64个字节，只能在写入内存的数据上尽量补齐，比如一个int 占4个字节(java),32位系统的对象头占8个字节，这样再多写5个int就对齐一个缓冲行了，jdk也提供了一个 annotation 即@Commented来解决，另外内存队列disruptor也用同样的方式优化了同样的问题，但是如此这数据，势必会造成资源浪费，如何权衡这2者还请老师分享一下经验","like_count":7,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520545,"discussion_content":"是，你考虑的很深刻，说够笑话加内存 加服务器  有时候时间和空间是不可以兼得的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622041965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1555050,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/6a/5a0bb648.jpg","nickname":"黄光华","note":"","ucode":"66865B43F2D132","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389637,"discussion_content":"朋友你好，是@Contended 不是 @Commented","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629364137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1064679,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3e/e7/261711a5.jpg","nickname":"blentle","note":"","ucode":"AC092609A4942A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376294,"discussion_content":"如果缓存区一时半会儿写不满，是不是也有个超时时间，超过这个时间也会刷到内存？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622073022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170811,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/7b/c1efb1d9.jpg","nickname":"胡永","note":"","ucode":"931DA91D191FEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375750,"discussion_content":"硬件发展迅速，而且便宜，需要高性能的情况下，大多数都是空间换时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621840503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1693402,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d6/da/bd7e7780.jpg","nickname":"小灰灰。","note":"","ucode":"74E458059DE209","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375701,"discussion_content":"要么空间换时间，要么时间换空间，要根据实际场景和实际需求做抉择，抛开业务场景都是伪概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621822113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305362,"user_name":"88","can_delete":false,"product_type":"c1","uid":1443263,"ip_address":"","ucode":"63E77860C7775C","user_header":"https://static001.geekbang.org/account/avatar/00/16/05/bf/94675989.jpg","comment_is_top":false,"comment_ctime":1627919990,"is_pvip":false,"replies":[{"id":"110444","content":"对 对 对","user_name":"作者回复","comment_id":305362,"uid":"1345199","ip_address":"","utype":1,"ctime":1627954497,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"23102756470","product_id":100078401,"comment_content":"《深入理解计算机系统》<br>6.2 局部性<br>局部性分为：1. 时间局部性 2. 空间局部性<br>int sumvec(int v[N])<br>{<br>    int i, sum = 0;<br>    &#47;&#47; sum在每次循环迭代中被引用一次，因此对于sum来说，有好的时间局部性；另一方面因为sum是标量，对于sum来说，没有空间局部性<br>    for (i = 0; i &lt; N; i++)<br>    {<br>        sum += v[i];<br>        &#47;&#47; 向量v的元素是被顺序读取的，因此对于变量v，函数有很好的空间局部性；但是时间局部性很差，因为每个向量元素只被访问一次<br>    }<br>    return sum;<br>}<br>&#47;&#47; 所以可以说：以被重复访问的次数衡量时间局部性，以访问是否有序、步长大小衡量空间局部性","like_count":6,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524364,"discussion_content":"对 对 对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627954497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294151,"user_name":"undefined","can_delete":false,"product_type":"c1","uid":1100750,"ip_address":"","ucode":"768098DBDBE333","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/ce/d9e00eb5.jpg","comment_is_top":false,"comment_ctime":1621786966,"is_pvip":false,"replies":[{"id":"106730","content":"加油～","user_name":"作者回复","comment_id":294151,"uid":"1501385","ip_address":"","utype":1,"ctime":1621810192,"user_name_real":"听水的湖"}],"discussion_count":1,"race_medal":0,"score":"18801656150","product_id":100078401,"comment_content":"摩拳擦掌，跃跃欲试。","like_count":4,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520531,"discussion_content":"加油～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621810192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317956,"user_name":"山不厌高，海不厌深","can_delete":false,"product_type":"c1","uid":2812712,"ip_address":"","ucode":"2C489CD37CFCA2","user_header":"https://static001.geekbang.org/account/avatar/00/2a/eb/28/6786205e.jpg","comment_is_top":false,"comment_ctime":1635071910,"is_pvip":false,"replies":[{"id":"115358","content":"对的","user_name":"作者回复","comment_id":317956,"uid":"1345199","ip_address":"","utype":1,"ctime":1635211027,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"14519973798","product_id":100078401,"comment_content":"二级、三级缓存是冯诺依曼结构，一级缓存是哈佛结构。这样的理解对吗？","like_count":4,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529042,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635211027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294157,"user_name":"springXu","can_delete":false,"product_type":"c1","uid":2064750,"ip_address":"","ucode":"F5DB0B963C894F","user_header":"","comment_is_top":false,"comment_ctime":1621797292,"is_pvip":true,"replies":[{"id":"107005","content":"你思考的很深刻 ","user_name":"作者回复","comment_id":294157,"uid":"1345199","ip_address":"","utype":1,"ctime":1622094032,"user_name_real":"LMOS"}],"discussion_count":2,"race_medal":0,"score":"14506699180","product_id":100078401,"comment_content":"我认为是不是可以尽量加载cache line为单位的数据从内存中，然后进行操作和运算，再放回内存中？ 本质就是减少内存的读与写。像blowfish对一组数据操作时，就可以采取这样的方式。但有像sse,avx512这种指令也是这种理念吧。SIMD单指令多数据流。","like_count":4,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520535,"discussion_content":"你思考的很深刻 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622094032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2624649,"avatar":"https://static001.geekbang.org/account/avatar/00/28/0c/89/fde96d28.jpg","nickname":"杨","note":"","ucode":"969A0AA5A59522","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542467,"discussion_content":"减少伪共享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640760131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318186,"user_name":"test","can_delete":false,"product_type":"c1","uid":1129610,"ip_address":"","ucode":"C57A175CBC6547","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","comment_is_top":false,"comment_ctime":1635176781,"is_pvip":false,"replies":[{"id":"115354","content":"Bochs 不过不建议使用  vbox也可以的 ","user_name":"作者回复","comment_id":318186,"uid":"1345199","ip_address":"","utype":1,"ctime":1635210870,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"10225111373","product_id":100078401,"comment_content":"有没有什么模拟器之类都，可以看到cpu 内存 缓存的情况","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529132,"discussion_content":"Bochs 不过不建议使用  vbox也可以的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635210870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302421,"user_name":"学呀学呀学","can_delete":false,"product_type":"c1","uid":1391254,"ip_address":"","ucode":"CB863B81F23B9C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLnOMtoDG4yLzicECekHvP0wRmcrfVHOGUHJx4mo89xfRibOvrbOG9Ub2yDrxwHYbZGXbC9fib8R4Elw/132","comment_is_top":false,"comment_ctime":1626222123,"is_pvip":false,"replies":[{"id":"109423","content":"硬件 BIOS 操作系统 共同决定","user_name":"作者回复","comment_id":302421,"uid":"1345199","ip_address":"","utype":1,"ctime":1626228170,"user_name_real":"LMOS"}],"discussion_count":2,"race_medal":0,"score":"10216156715","product_id":100078401,"comment_content":"请问，地址空间中，决定哪些地址给内存，哪些地址给显存，哪些地址给设备IO，这个是由操作系统决定，还是由bios决定呢？","like_count":3,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523300,"discussion_content":"硬件 BIOS 操作系统 共同决定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626228170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2773896,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Mfib5cpJF18gjUuABugKuQHb1zr4605gib4GmDTFB9SMJOWGC5OxNS1AEwok5zUToO88aoVWSvB8J3rytx4LaLEw/132","nickname":"吉他的猴","note":"","ucode":"F968B226EEF1DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542805,"discussion_content":"不同处理器芯片有各自的特点，总体来说是基于一定的规则（硬件设计限定）进行配置（系统设计限定）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640849255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297738,"user_name":"Feen","can_delete":false,"product_type":"c1","uid":2646145,"ip_address":"","ucode":"E6CDC442B7213F","user_header":"https://static001.geekbang.org/account/avatar/00/28/60/81/38b00111.jpg","comment_is_top":false,"comment_ctime":1623752787,"is_pvip":false,"replies":[{"id":"108134","content":"你好，对的","user_name":"作者回复","comment_id":297738,"uid":"1345199","ip_address":"","utype":1,"ctime":1623806921,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"10213687379","product_id":100078401,"comment_content":"开始有一点点感觉了，个人理解本章的内容背后的本质就是尽量能让CPU执行的操作次数接近o(1)，不管是通过内存管理的优化，还是CPU执行优化，或者cache的策略，都是为了一次执行即可得到有效操作。不要搞多次来回存取数据的事儿。局部性原理用的百分比越高越好。","like_count":3,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521923,"discussion_content":"你好，对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623806921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294326,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1621900523,"is_pvip":false,"replies":[{"id":"106831","content":"666～","user_name":"作者回复","comment_id":294326,"uid":"1501385","ip_address":"","utype":1,"ctime":1621942379,"user_name_real":"听水的湖"}],"discussion_count":1,"race_medal":0,"score":"10211835115","product_id":100078401,"comment_content":"如果写出代码对内存的使用单位是和Cache行相一致，这样可以优化Cache调度，是一种用空间换时间的思路。","like_count":2,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520607,"discussion_content":"666～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621942379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294213,"user_name":"宇宙的琴弦","can_delete":false,"product_type":"c1","uid":1657861,"ip_address":"","ucode":"674FC0CB242EDB","user_header":"https://static001.geekbang.org/account/avatar/00/19/4c/05/5cc06ae8.jpg","comment_is_top":false,"comment_ctime":1621834765,"is_pvip":false,"replies":[{"id":"106951","content":"对对对 你的学习非常认真 善于思考","user_name":"作者回复","comment_id":294213,"uid":"1345199","ip_address":"","utype":1,"ctime":1622041616,"user_name_real":"LMOS"}],"discussion_count":1,"race_medal":0,"score":"10211769357","product_id":100078401,"comment_content":"尽量让程序少跳转，比如在if else分支结构中，提高if的条件成立的可能性。在循环需要对变量操作时，应尽量考虑到这些变量的空间存储位置，还有尽量使用局部变量？","like_count":3,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520560,"discussion_content":"对对对 你的学习非常认真 善于思考","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622041616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294159,"user_name":"郑童文","can_delete":false,"product_type":"c1","uid":1030733,"ip_address":"","ucode":"3D193715CB8549","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/4d/7ba09ff0.jpg","comment_is_top":false,"comment_ctime":1621803403,"is_pvip":false,"replies":[{"id":"107004","content":"你好，在实模式下 BIOS 有 提供默认的中断处理程序","user_name":"作者回复","comment_id":294159,"uid":"1345199","ip_address":"","utype":1,"ctime":1622093987,"user_name_real":"LMOS"}],"discussion_count":5,"race_medal":0,"score":"10211737995","product_id":100078401,"comment_content":"请教老师一个问题：文中说：“中断向量表是由BIOS设置的”。 我理解的中断向量表类似一个包含中断处理程序入口地址的数组，但中断处理程序应该是由操作系统提供的。而BIOS在初始化硬件的时候还没有加载操作系统，那BIOS怎么知道这些中断服务程序的入口地址呢？","like_count":3,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520537,"discussion_content":"你好，在实模式下 BIOS 有 提供默认的中断处理程序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622093987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1260883,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3d/53/9d8a1207.jpg","nickname":"尼欧","note":"","ucode":"39D4D1F5F51764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375697,"discussion_content":"你把bios的中斷處理跟操作系統的中斷處理混淆了，剛啓動時用的是bios裏的中斷處理程序。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1621820527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2626392,"avatar":"https://static001.geekbang.org/account/avatar/00/28/13/58/c00500f3.jpg","nickname":"刘洪亮","note":"","ucode":"C37D17F4DA39EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375672,"discussion_content":"Bios:基本输入输出系统。BIOS初始化的时候是会初始化中断向量，好捕获和处理外部的输入输出中断，操作系统运行的时候重新初始化中断向量表并向上提供服务也是没有问题的。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1621812649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064750,"avatar":"","nickname":"springXu","note":"","ucode":"F5DB0B963C894F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375724,"discussion_content":"这个问题，应该是和嵌入式系统的区别吧。  \nBIOS是PC特有的一个初始化引导程序。 它会做硬件检测，由于pc的开放性，内存大小内存的SPD的参数，硬盘的大小，以前还有软驱和光驱。这都由BIOS负责检测的。检测完成后通过中断向量程序为操作系统服务的。  老式的pc在没有安装系统的情况下，也是可以显示出当前的所有硬件信息的。\n而嵌入式系统所有的硬件是定好了的，只需要初始化硬件和一个引导程序，把控制权交给操作系统就可以了。\n对于新的bios程序uefi来说，微软是需要保护pc不让安装别的操作系统，让用户购买它的。所以设置了些私有的东西。linux社区对uefi其实是持否定态度的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1621832227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738119,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/85/87/727142bc.jpg","nickname":"MacBao","note":"","ucode":"8CF51C3688C8F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375679,"discussion_content":"BIOS运行的时候就能使用鼠标和键盘了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621815634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324072,"user_name":"残天噬魂","can_delete":false,"product_type":"c1","uid":1506609,"ip_address":"","ucode":"A2AD8303A4518D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/q2HwchogzNiavKhIB4GfAxH6B88NhSoC7B7keVEUqiaP6JPokDUNJLYehocOyqYqrhA3iaxywyRXLYkYJjDUQESZw/132","comment_is_top":false,"comment_ctime":1638278642,"is_pvip":false,"replies":[{"id":"117618","content":"不会吧 ","user_name":"作者回复","comment_id":324072,"uid":"1345199","ip_address":"","utype":1,"ctime":1638322845,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5933245938","product_id":100078401,"comment_content":"有种讲到点到为止的感觉，以MESI协议为例，首先老师讲了这是四种状态，是为了维护cache中的数据一致性，但看了四个状态的说明我反而有些迷糊了，这个状态是什么的状态？[数据只在当前cache中存在]这个说法感觉没有让我加深理解…","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534941,"discussion_content":"不会吧 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638322845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295807,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1622604575,"is_pvip":false,"replies":[{"id":"107606","content":"不是，行大小和字长无关","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622989650,"ip_address":"","comment_id":295807,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5917571871","product_id":100078401,"comment_content":"Cache 和内存交换数据的最小单位是一行<br>这一行有多少字节就说明计算机的字长是多少吗 比如一行有32字节那么计算机字长就是32？","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521226,"discussion_content":"不是，行大小和字长无关","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622989650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295697,"user_name":"Panda","can_delete":false,"product_type":"c1","uid":1095740,"ip_address":"","ucode":"911A200C7B18BE","user_header":"https://static001.geekbang.org/account/avatar/00/10/b8/3c/1a294619.jpg","comment_is_top":false,"comment_ctime":1622547755,"is_pvip":false,"replies":[{"id":"107612","content":"嗯嗯是的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622989958,"ip_address":"","comment_id":295697,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5917515051","product_id":100078401,"comment_content":"提高程序的 CPU 亲和性","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521186,"discussion_content":"嗯嗯是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622989958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295607,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1622511815,"is_pvip":true,"replies":[{"id":"107617","content":"这要看应用场景做具体分析的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622990182,"ip_address":"","comment_id":295607,"utype":1}],"discussion_count":1,"race_medal":5,"score":"5917479111","product_id":100078401,"comment_content":"老师能详细解释一下局部性原理和代码怎么结合应用的吗？","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521145,"discussion_content":"这要看应用场景做具体分析的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622990182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295256,"user_name":"何同一","can_delete":false,"product_type":"c1","uid":2637195,"ip_address":"","ucode":"3270B66A34F29A","user_header":"https://static001.geekbang.org/account/avatar/00/28/3d/8b/47bcc851.jpg","comment_is_top":false,"comment_ctime":1622335528,"is_pvip":false,"replies":[{"id":"107272","content":"是的，非常正确","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622470112,"ip_address":"","comment_id":295256,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5917302824","product_id":100078401,"comment_content":"在数据布局方面，提高 Cache 命中率除了数据集中连续存放，应该还包括同一块数据集中计算，跨页存放的数据尽量不要放在同一时间块计算。","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521012,"discussion_content":"是的，非常正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622470112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295136,"user_name":"瑞兴","can_delete":false,"product_type":"c1","uid":2616100,"ip_address":"","ucode":"080221FC1B9597","user_header":"https://static001.geekbang.org/account/avatar/00/27/eb/24/0e54b5dc.jpg","comment_is_top":false,"comment_ctime":1622260390,"is_pvip":false,"replies":[{"id":"107149","content":"加油，也欢迎分享你的学习心得。","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1622263656,"ip_address":"","comment_id":295136,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5917227686","product_id":100078401,"comment_content":"迟到补卡","like_count":1,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520962,"discussion_content":"加油，也欢迎分享你的学习心得。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622263656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294218,"user_name":"送过快递的码农","can_delete":false,"product_type":"c1","uid":1587666,"ip_address":"","ucode":"66EA81B3BADC73","user_header":"https://static001.geekbang.org/account/avatar/00/18/39/d2/845c0e39.jpg","comment_is_top":false,"comment_ctime":1621837649,"is_pvip":false,"replies":[{"id":"106950","content":"问题1，是对的<br>问题2，msei是硬件层的东西，我们软件 不知道","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622041565,"ip_address":"","comment_id":294218,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5916804945","product_id":100078401,"comment_content":"1.回答思考题<br>可以参考Java 实现的高性能队列 Disruptor  框架 ，充分利用缓存行的特性，将每个对象包装成64byte的倍数，避免伪共享。尽可能按照连续内存的方式来存储，确保能被缓存加载。<br>2.我的疑问<br>1.关于超线程技术  是不是 超线程在同一个物理的核心下的两个逻辑核心，应该是用同个缓存吧？他们是不同的寄存器，对应同一个原子钟？<br>2.msei协议是不是硬件为了确保数据一致性，对我们不可知的一种行为？Java的volatile关键字是不是也依赖于此？","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520562,"discussion_content":"问题1，是对的\n问题2，msei是硬件层的东西，我们软件 不知道","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622041565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1260883,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3d/53/9d8a1207.jpg","nickname":"尼欧","note":"","ucode":"39D4D1F5F51764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375783,"discussion_content":"超線程技術是指一個物理核芯中集成了兩套寄存器，除此之外的其他部件，比如译码器、alu等都還是一套。Cache的使用對軟件是透明的，不需要軟件開發人員干預，Java不是太熟悉，不了解你說的volatile。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621848325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1587666,"avatar":"https://static001.geekbang.org/account/avatar/00/18/39/d2/845c0e39.jpg","nickname":"送过快递的码农","note":"","ucode":"66EA81B3BADC73","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1260883,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3d/53/9d8a1207.jpg","nickname":"尼欧","note":"","ucode":"39D4D1F5F51764","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375887,"discussion_content":"这个关键字就是保证A线程对共享变量的修改对其他线程可见，就是多线程数据一致性问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621856075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375783,"ip_address":""},"score":375887,"extra":""}]}]},{"had_liked":false,"id":294194,"user_name":"黎","can_delete":false,"product_type":"c1","uid":1008946,"ip_address":"","ucode":"B2AB6BB4D7FE9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/32/74e47b74.jpg","comment_is_top":false,"comment_ctime":1621826437,"is_pvip":false,"replies":[{"id":"106953","content":"会越来越有感觉的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622041711,"ip_address":"","comment_id":294194,"utype":1}],"discussion_count":1,"race_medal":2,"score":"5916793733","product_id":100078401,"comment_content":"慢慢有点感觉了","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520551,"discussion_content":"会越来越有感觉的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622041711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294172,"user_name":"罗 乾 林","can_delete":false,"product_type":"c1","uid":1188222,"ip_address":"","ucode":"D0406F95176ABA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/7e/fb725950.jpg","comment_is_top":false,"comment_ctime":1621817291,"is_pvip":false,"replies":[{"id":"106957","content":"对，它可以优化分支代码","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622042016,"ip_address":"","comment_id":294172,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5916784587","product_id":100078401,"comment_content":"想到了linux内核代码的likely&#47;unlikely","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520544,"discussion_content":"对，它可以优化分支代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622042016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350663,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1657079222,"is_pvip":false,"replies":[{"id":"128049","content":"666666","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1658390015,"ip_address":"","comment_id":350663,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1657079222","product_id":100078401,"comment_content":"1. 避免伪共享：比如Java 中对象分配内存时对齐填充，高性能队列 Disruptor<br>2. 充分利用局部性原理：比如，Mysql 的 bufferpool，读取一页数据会把相邻的也加载进内存，文件系统的 pageCache <br>3. 二八法则：对热点代码进行优化，典型的 Java 中 JIT，针对 JIT 的 profile 优化，其实就是分支预测，类型预测，方法内联(热点方法内联进来)<br>4. 减少上下文切换：绑核，但是要注意父子进程的亲属特性带来的竞争<br>5. 零拷贝：减少复制花费的时间<br>等等","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580842,"discussion_content":"666666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658390015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346016,"user_name":"程杰","can_delete":false,"product_type":"c1","uid":3003067,"ip_address":"","ucode":"6580E4B8091E76","user_header":"https://static001.geekbang.org/account/avatar/00/2d/d2/bb/8f647aef.jpg","comment_is_top":false,"comment_ctime":1652769196,"is_pvip":false,"replies":[{"id":"126253","content":"嗯嗯","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1652785886,"ip_address":"","comment_id":346016,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652769196","product_id":100078401,"comment_content":"https:&#47;&#47;blog.csdn.net&#47;qq_34827674&#47;article&#47;details&#47;109317760 这篇文章讲的很不错的，缓存一致性以及基于总线嗅探机制的 MESI 协议","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572441,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652785886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342781,"user_name":"doos","can_delete":false,"product_type":"c1","uid":1069269,"ip_address":"","ucode":"7C9AF67F90E65C","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/d5/73334a95.jpg","comment_is_top":false,"comment_ctime":1650461720,"is_pvip":false,"replies":[{"id":"125984","content":"正确","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1652067130,"ip_address":"","comment_id":342781,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650461720","product_id":100078401,"comment_content":"cpu的缓存感觉和文件系统的缓存很想都是为了弥补性能上的差距，比如cpu比内存快那么，cpu和内存弄一个缓存来弥补速度之差，内存又比磁盘快所以也是弄的buff和cache来弥补这个差距，老师不知道我这样理解对吗","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571092,"discussion_content":"正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652067131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339555,"user_name":"Qfeng","can_delete":false,"product_type":"c1","uid":1466121,"ip_address":"","ucode":"1248E70012BBA2","user_header":"https://static001.geekbang.org/account/avatar/00/16/5f/09/2ec44412.jpg","comment_is_top":false,"comment_ctime":1648184555,"is_pvip":false,"replies":[{"id":"124372","content":"6666","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1648606175,"ip_address":"","comment_id":339555,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648184555","product_id":100078401,"comment_content":"总结收获：<br>1. 程序局部性原理。一段时间内CPU执行的指令是同一地址或者相邻地址，对应相同指令或邻近指令。<br>2. CPU, Cache和内存。CPU的速度高出内存几个数量级，为了提升CPU性能，根据程序局部性原理，设计出了在二者之间插入Cache的解决方案。<br>3. Cache虽然解决了效率问题，但是带来了数据一致性问题；硬件MESI协议就是用来解决这个问题的，纯硬件操作，对软件透明。<br>4. 物理地址由很多模块组成：内存，显存，网卡等IO设备都是；对软件来说的重点是如何获取内存的地址和大小。x86 CPU通过BIOS的中断程序迭代获取全部内存类型、地址和大小。<br><br>思考题：写出让 CPU 跑得更快的代码（提高 Cache 命中率）的方法，从局部性原理入手，代码设计上遵循高内聚低耦合的原则，减少函数间调用，这样可以让业务功能强相关的代码指令被加载到cache，只在调用外部接口时cache miss。<br><br>以上，谢谢。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559090,"discussion_content":"6666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648606175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333709,"user_name":"深深深","can_delete":false,"product_type":"c1","uid":1151510,"ip_address":"","ucode":"CA50F7030E538A","user_header":"https://static001.geekbang.org/account/avatar/00/11/92/16/425cf451.jpg","comment_is_top":false,"comment_ctime":1644481059,"is_pvip":false,"replies":[{"id":"121979","content":"66666","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1644638721,"ip_address":"","comment_id":333709,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644481059","product_id":100078401,"comment_content":"结合这个动画可以比较好理解MESI:<br>https:&#47;&#47;www.scss.tcd.ie&#47;Jeremy.Jones&#47;VivioJS&#47;caches&#47;MESIHelp.htm","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550612,"discussion_content":"66666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644638721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323951,"user_name":"树心","can_delete":false,"product_type":"c1","uid":1589523,"ip_address":"","ucode":"6C329F0FF798B9","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","comment_is_top":false,"comment_ctime":1638238374,"is_pvip":true,"replies":[{"id":"117620","content":"有收获就好","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1638322901,"ip_address":"","comment_id":323951,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1638238374","product_id":100078401,"comment_content":"小结<br>07 | Cache与内存：程序放在哪儿？<br>从一段“经典”代码看局部性原理<br>内存<br>CPU 到内存的性能瓶颈<br>Cache<br>Cache 带来的问题<br>Cache 的 MESI 协议<br>开启 Cache<br>获取内存视图<br><br>这节了解了程序局部性原理和cache的MESI协议，都是听过但不知道什么含义的。学到现在能把CPU、操作系统、硬件很多概念串起来，很有收获。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534943,"discussion_content":"有收获就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638322901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320798,"user_name":"Geek_25bbcf","can_delete":false,"product_type":"c1","uid":2839412,"ip_address":"","ucode":"369DF9F31D121B","user_header":"","comment_is_top":false,"comment_ctime":1636514222,"is_pvip":false,"replies":[{"id":"116338","content":"嗯？没看懂你的意思哟～","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1636524509,"ip_address":"","comment_id":320798,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1636514222","product_id":100078401,"comment_content":"en...传说中的卡车","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530119,"discussion_content":"嗯？没看懂你的意思哟～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636524509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307365,"user_name":"昼","can_delete":false,"product_type":"c1","uid":2726957,"ip_address":"","ucode":"695E3B31CCEFF5","user_header":"https://static001.geekbang.org/account/avatar/00/29/9c/2d/e11b9042.jpg","comment_is_top":false,"comment_ctime":1629043551,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1629043551","product_id":100078401,"comment_content":"请问文中所说DDR4取消了双通道是什么意思，因为平时装机也会用到双通道机制，比如两根4性能明显好于单8，就是DDR4的呀","like_count":0,"discussions":[{"author":{"id":2726957,"avatar":"https://static001.geekbang.org/account/avatar/00/29/9c/2d/e11b9042.jpg","nickname":"昼","note":"","ucode":"695E3B31CCEFF5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389048,"discussion_content":"我又去查了查，觉得这里应该是老师误机了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629103401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304641,"user_name":"wenkin","can_delete":false,"product_type":"c1","uid":2226384,"ip_address":"","ucode":"0F9E623B1C4A75","user_header":"https://static001.geekbang.org/account/avatar/00/21/f8/d0/092f04df.jpg","comment_is_top":false,"comment_ctime":1627529684,"is_pvip":false,"replies":[{"id":"110204","content":"哈哈 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1627553510,"ip_address":"","comment_id":304641,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627529684","product_id":100078401,"comment_content":"一开始关于提高cache命中率想到了cache——主存地址的映射，这应该是关于空间上的改进，然后看评论才发现自己的不足，吸收他人知识补充自己。<br>~~~滴","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524111,"discussion_content":"哈哈 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627553510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303705,"user_name":"Geek_183706","can_delete":false,"product_type":"c1","uid":2477127,"ip_address":"","ucode":"34CBA9C2FD130F","user_header":"","comment_is_top":false,"comment_ctime":1626937759,"is_pvip":false,"replies":[{"id":"109952","content":"储存方式的写 只影响数据cache，不会影响指令cache","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1627006161,"ip_address":"","comment_id":303705,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626937759","product_id":100078401,"comment_content":"不是很明白这里:这个时候我们是通过储存的方式去写的地址 A，所以新的指令会进入数据 Cache<br><br>","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523789,"discussion_content":"储存方式的写 只影响数据cache，不会影响指令cache","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627006161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302840,"user_name":"Pure","can_delete":false,"product_type":"c1","uid":2693109,"ip_address":"","ucode":"AADAA289B0C742","user_header":"https://static001.geekbang.org/account/avatar/00/29/17/f5/93682e42.jpg","comment_is_top":false,"comment_ctime":1626404411,"is_pvip":false,"replies":[{"id":"109583","content":"哈哈，也欢迎分享你的收获，给评论区添砖加瓦！","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1626406146,"ip_address":"","comment_id":302840,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1626404411","product_id":100078401,"comment_content":"感觉看评论区收货也很大啊","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523452,"discussion_content":"哈哈，也欢迎分享你的收获，给评论区添砖加瓦！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626406146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298560,"user_name":"xfan","can_delete":false,"product_type":"c1","uid":1315147,"ip_address":"","ucode":"48ED8D498D7F56","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","comment_is_top":false,"comment_ctime":1624194409,"is_pvip":false,"replies":[{"id":"108327","content":"可以说说为什么吗 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1624239896,"ip_address":"","comment_id":298560,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624194409","product_id":100078401,"comment_content":"额，这东西（命中）也不一定就是越多越好，只能说站在cache的角度，可以这么认为","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522173,"discussion_content":"可以说说为什么吗 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624239896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296360,"user_name":"杰良","can_delete":false,"product_type":"c1","uid":2567349,"ip_address":"","ucode":"5DC1D1C58A4731","user_header":"https://static001.geekbang.org/account/avatar/00/27/2c/b5/10141329.jpg","comment_is_top":false,"comment_ctime":1622939574,"is_pvip":false,"replies":[{"id":"107575","content":"是的，就是这样的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622987543,"ip_address":"","comment_id":296360,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622939574","product_id":100078401,"comment_content":"由于处理器与内存工艺的差别导致速率差别巨大，而又注意到程序运行存在局部性原理，于是就开发出在处理器内部的 cache 部件来优化内存读写性能问题。但这也引入了新的问题，硬件上，cache 模块需要解决数据的一致性问题；软件上，需要注意尽量利用局部性原理，提高 cache 命中率从而达到最好的程序运行效率。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521412,"discussion_content":"是的，就是这样的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622987543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295503,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1622453375,"is_pvip":true,"replies":[{"id":"107258","content":"你说的对，还有数据 的复用性 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622469226,"ip_address":"","comment_id":295503,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622453375","product_id":100078401,"comment_content":"写出让CPU跑的更快的代码，应该从两个方面。一个是数据缓存，比如用连续内存的数据结构，数组比链表快；二是指令缓存，只知道CPU的分支预测。不知道还有其他的吗？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521105,"discussion_content":"你说的对，还有数据 的复用性 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622469226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295383,"user_name":"1043","can_delete":false,"product_type":"c1","uid":1485365,"ip_address":"","ucode":"AAA69CC175AEE3","user_header":"https://static001.geekbang.org/account/avatar/00/16/aa/35/1a4884f9.jpg","comment_is_top":false,"comment_ctime":1622389377,"is_pvip":false,"replies":[{"id":"107266","content":"可能是兼容ddr3的内存","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622469741,"ip_address":"","comment_id":295383,"utype":1}],"discussion_count":2,"race_medal":5,"score":"1622389377","product_id":100078401,"comment_content":"诶？那为什么现在华硕官方说明说还说明他的z390主板支持双通道内存架构呢？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521056,"discussion_content":"可能是兼容ddr3的内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622469741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1485365,"avatar":"https://static001.geekbang.org/account/avatar/00/16/aa/35/1a4884f9.jpg","nickname":"1043","note":"","ucode":"AAA69CC175AEE3","race_medal":5,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377141,"discussion_content":"请问老师能不能台式机和笔记本的架构有差异呢？才造成的台式机支持ddr4双通道，笔记本不用双通道了？我的华硕z390主板只有一种内存插槽，只支持ddr4内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622520805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295250,"user_name":"陈超","can_delete":false,"product_type":"c1","uid":2610622,"ip_address":"","ucode":"A28CA3E9B5A5C7","user_header":"https://static001.geekbang.org/account/avatar/00/27/d5/be/183c222b.jpg","comment_is_top":false,"comment_ctime":1622333759,"is_pvip":false,"replies":[{"id":"107276","content":"不同的东西","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622470520,"ip_address":"","comment_id":295250,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622333759","product_id":100078401,"comment_content":"老师，请问一下，MMU 里面的TLB也称为cache，跟本文里面讲到的cache是什么关系呢？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521009,"discussion_content":"不同的东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622470520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295024,"user_name":"LT","can_delete":false,"product_type":"c1","uid":1147795,"ip_address":"","ucode":"4E902E1EFBB9C1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIBV8Deuz0Ys4omVlErUvTeRLt7xYRPd8nxhSZ1C2Q9Nice7icHnndsHmyT3KBenxLGw7xghlDzfIuA/132","comment_is_top":false,"comment_ctime":1622188321,"is_pvip":false,"replies":[{"id":"107298","content":"BIOS中断在系统启动后，能用的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622473103,"ip_address":"","comment_id":295024,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622188321","product_id":100078401,"comment_content":"1.如果查找一个cpu的cache line 大小？<br>2.BIOS已经设置了中断，在OS启动时，需要重置中断，对吗？在OS启动后，BIOS的中断还能用吗？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520918,"discussion_content":"BIOS中断在系统启动后，能用的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622473103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294392,"user_name":"老男孩","can_delete":false,"product_type":"c1","uid":1134514,"ip_address":"","ucode":"CEC6D47412F620","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/b2/1e8b5616.jpg","comment_is_top":false,"comment_ctime":1621925931,"is_pvip":false,"replies":[{"id":"106939","content":"哈哈，别急，后面就会有所体会的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622040795,"ip_address":"","comment_id":294392,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621925931","product_id":100078401,"comment_content":"对与老师课后提出的问题，我想了半天，脑海中只有3个字：不知道。但同时浮现出4个字：好想知道。java中好像常量或者静态方法，感觉可以提高cache的命中率？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520637,"discussion_content":"哈哈，别急，后面就会有所体会的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622040795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294334,"user_name":"blentle","can_delete":false,"product_type":"c1","uid":1064679,"ip_address":"","ucode":"AC092609A4942A","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e7/261711a5.jpg","comment_is_top":false,"comment_ctime":1621903474,"is_pvip":false,"replies":[{"id":"106940","content":"一，有刷新指令，二，满就会写入内存替换的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622040887,"ip_address":"","comment_id":294334,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1621903474","product_id":100078401,"comment_content":"一直有个疑问，三级缓存里的数据是何时刷到内存的，是不是有类似超时时间或者最大量限制或者二者都有.","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520610,"discussion_content":"一，有刷新指令，二，满就会写入内存替换的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622040887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1260883,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3d/53/9d8a1207.jpg","nickname":"尼欧","note":"","ucode":"39D4D1F5F51764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375965,"discussion_content":"這一講里有這樣一句“写入操作则比较直接，分为回写和直通写，回写是写入对应的 Cache 行就结束了，直通写则是在写入 Cache 行的同时写入内存”，你問的應該是回寫的情況，按文中的說法，回寫應該是在空閒cache行不足，需要置換的時候寫入內存的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621907387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294196,"user_name":"大鱼Coo","can_delete":false,"product_type":"c1","uid":1184726,"ip_address":"","ucode":"94A695648681A3","user_header":"https://static001.geekbang.org/account/avatar/00/12/13/d6/278ad881.jpg","comment_is_top":false,"comment_ctime":1621826698,"is_pvip":false,"replies":[{"id":"106952","content":"你好，硬盘确实有cache","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1622041675,"ip_address":"","comment_id":294196,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621826698","product_id":100078401,"comment_content":"缓存就是加速器，内存因速度小于cpu几个数量级，所以有cache；那硬盘比内存更低，硬盘也应该有cache吧~","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520552,"discussion_content":"你好，硬盘确实有cache","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622041675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294171,"user_name":"MacBao","can_delete":false,"product_type":"c1","uid":1738119,"ip_address":"","ucode":"8CF51C3688C8F6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/87/727142bc.jpg","comment_is_top":false,"comment_ctime":1621815907,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1621815907","product_id":100078401,"comment_content":"伪共享是不是也应该考虑一下","like_count":0,"discussions":[{"author":{"id":1301502,"avatar":"https://static001.geekbang.org/account/avatar/00/13/db/fe/90446b61.jpg","nickname":"lhgdy","note":"","ucode":"92140E9AB7659A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575704,"discussion_content":"我怎么看完硬件三节感觉云山雾罩得，是我太菜？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655040734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294170,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1621815601,"is_pvip":false,"replies":[{"id":"106735","content":"好用功啊，加油～","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1621822380,"ip_address":"","comment_id":294170,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1621815601","product_id":100078401,"comment_content":"必须学三遍才可以","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520543,"discussion_content":"好用功啊，加油～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621822380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294168,"user_name":"尼欧","can_delete":false,"product_type":"c1","uid":1260883,"ip_address":"","ucode":"39D4D1F5F51764","user_header":"https://static001.geekbang.org/account/avatar/00/13/3d/53/9d8a1207.jpg","comment_is_top":false,"comment_ctime":1621815330,"is_pvip":false,"replies":[{"id":"106736","content":"生命不息，学习不止，加油！","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1621822610,"ip_address":"","comment_id":294168,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1621815330","product_id":100078401,"comment_content":"打卡","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520541,"discussion_content":"生命不息，学习不止，加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621822610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]}]}