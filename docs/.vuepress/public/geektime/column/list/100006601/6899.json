{"id":6899,"title":"06 | 复杂度来源：可扩展性","content":"<p>你好，我是华仔。复杂度来源前面已经讲了高性能和高可用，今天我们来聊聊可扩展性。</p><p>可扩展性是指，系统为了应对将来需求变化而提供的一种扩展能力，当有新的需求出现时，系统不需要或者仅需要少量修改就可以支持，无须整个系统重构或者重建。</p><p>由于软件系统固有的多变性，新的需求总会不断提出来，因此可扩展性显得尤其重要。在软件开发领域，面向对象思想的提出，就是为了解决可扩展性带来的问题；后来的设计模式，更是将可扩展性做到了极致。得益于设计模式的巨大影响力，几乎所有的技术人员对于可扩展性都特别重视。</p><p>设计具备良好可扩展性的系统，有两个基本条件：</p><ol>\n<li><strong>正确预测变化</strong></li>\n<li><strong>完美应对变化</strong></li>\n</ol><p>但要达成这两个条件，本身也是一件复杂的事情，我来具体分析一下。</p><h2>预测变化</h2><p>软件系统与硬件或者建筑相比，有一个很大的差异：软件系统在发布后，还可以不断地修改和演进。</p><p>这就意味着<strong>不断有新的需求需要实现</strong>。</p><p>如果新需求能够少改代码甚至不改代码就可以实现，那当然是皆大欢喜的，否则来一个需求就要求系统大改一次，成本会非常高，程序员心里也不爽（改来改去），产品经理也不爽（做得那么慢），老板也不爽（那么多人就只能干这么点事）。</p><p>因此作为架构师，我们总是试图去预测所有的变化，然后设计完美的方案来应对。当下一次需求真正来临时，架构师可以自豪地说：“这个我当时已经预测到了，架构已经完美地支持，只需要一两天工作量就可以了！”</p><!-- [[[read_end]]] --><p>然而理想是美好的，现实却是复杂的。有一句谚语：“唯一不变的是变化。”如果按照这个标准去衡量，架构师每个设计方案都要考虑可扩展性，例如：</p><ul>\n<li>架构师准备设计一个简单的后台管理系统，当架构师考虑用MySQL存储数据时，是否要考虑后续需要用Oracle来存储？</li>\n<li>当架构师设计用HTTP做接口协议时，是否要考虑要不要支持ProtocolBuffer？</li>\n<li>甚至更离谱一点，架构师是否要考虑VR技术对架构的影响从而提前做好可扩展性？</li>\n</ul><p>如果每个点都考虑可扩展性，架构师会不堪重负，架构设计也会异常庞大且最终无法落地。但架构师也不能完全不做预测，否则可能系统刚上线，马上来新的需求就需要重构，这同样意味着前期很多投入的工作量也白费了。</p><p>同时，“预测”这个词，本身就暗示了不可能每次预测都是准确的。如果预测的事情出错，我们期望中的需求迟迟不来，甚至被明确否定，那么基于预测做的架构设计就没什么作用，投入的工作量也就白费了。</p><p>综合分析，预测变化的复杂性在于：</p><ol>\n<li>不能每个设计点都考虑可扩展性。</li>\n<li>不能完全不考虑可扩展性。</li>\n<li>所有的预测都存在出错的可能性。</li>\n</ol><p>对于架构师来说，如何把握预测的程度和提升预测结果的准确性，是一件很复杂的事情，而且没有通用的标准可以简单套上去，更多是靠自己的经验、直觉。所以架构设计评审的时候，经常会出现两个设计师对某个判断争得面红耳赤的情况，原因就在于没有明确标准，不同的人理解和判断有偏差，而最终又只能选择其中一个判断。</p><h3>2年法则</h3><p>那么我们设计架构的时候要怎么办呢？根据以往的职业经历和思考，我提炼出一个“2年法则”供你参考：<strong>只预测2年内的可能变化，不要试图预测5年甚至10年后的变化。</strong></p><p>当然，你可能会有疑问：为什么一定是2年呢？有的行业变化快，有的行业变化慢，不应该是按照行业特点来选择具体的预测周期吗？</p><p>理论上来说确实如此，但实际操作的时候你会发现，如果你要给出一个让大家都信服的行业预测周期，其实是很难的。</p><p>我之所以说要预测2年，是因为变化快的行业，你能够预测2年已经足够了；而变化慢的行业，本身就变化慢，预测本身的意义不大，预测5年和预测2年的结果是差不多的。所以“2年法则”在大部分场景下都是适用的。</p><h2>应对变化</h2><p>假设架构师经验非常丰富，目光非常敏锐，看问题非常准，所有的变化都能准确预测，是否意味着可扩展性就很容易实现了呢？也没那么理想！因为预测变化是一回事，采取什么方案来应对变化，又是另外一个复杂的事情。即使预测很准确，如果方案不合适，则系统扩展一样很麻烦。</p><h3>方案一：提炼出“变化层”和“稳定层”</h3><p>第一种应对变化的常见方案是：<strong>将不变的部分封装在一个独立的“稳定层”，将“变化”封装在一个“变化层”</strong>（也叫“适配层”）。这种方案的核心思想是通过变化层来<strong>隔离变化</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/91/b1/9117222928cc441774df9be05dd815b1.jpg?wh=1920x613\" alt=\"图片\"></p><p>无论是变化层依赖稳定层，还是稳定层依赖变化层都是可以的，需要根据具体业务情况来设计。</p><p>如果系统需要支持XML、JSON、ProtocolBuffer三种接入方式，那么最终的架构就是“形式1”架构；如果系统需要支持MySQL、Oracle、DB2数据库存储，那么最终的架构就变成了“形式2”的架构了。</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/86/c80058572221851716f25f1db7dcf186.jpg?wh=1920x790\" alt=\"图片\"></p><p>无论采取哪种形式，通过剥离变化层和稳定层的方式应对变化，都会带来两个主要的复杂性相关的问题。</p><ol>\n<li>变化层和稳定层如何拆分？</li>\n</ol><p>对于哪些属于变化层，哪些属于稳定层，很多时候并不是像前面的示例（不同接口协议或者不同数据库）那样明确，不同的人有不同的理解，导致架构设计评审的时候可能吵翻天。</p><ol start=\"2\">\n<li>变化层和稳定层之间的接口如何设计？</li>\n</ol><p>对于稳定层来说，接口肯定是越稳定越好；但对于变化层来说，在有差异的多个实现方式中找出共同点，并且还要保证当加入新的功能时，原有的接口不需要太大修改，这是一件很复杂的事情，所以接口设计同样至关重要。</p><p>例如，MySQL的REPLACE INTO和Oracle的MERGE INTO语法和功能有一些差异，那么存储层如何向稳定层提供数据访问接口呢？是采取MySQL的方式，还是采取Oracle的方式，还是自适应判断？如果再考虑DB2的情况呢？</p><p>看到这里，相信你已经能够大致体会到接口设计的复杂性了。</p><h3>方案二：提炼出“抽象层”和“实现层”</h3><p>第二种常见的应对变化的方案是：<strong>提炼出一个“抽象层”和一个“实现层”</strong>。如果说方案一的核心思想是通过变化层来隔离变化，那么方案二的核心思想就是通过实现层来<strong>封装变化</strong>。</p><p>因为抽象层的接口是稳定的不变的，我们可以基于抽象层的接口来实现统一的处理规则，而实现层可以根据具体业务需求定制开发不同的实现细节，所以当加入新的功能时，只要遵循处理规则然后修改实现层，增加新的实现细节就可以了，无须修改抽象层。</p><p>方案二典型的实践就是设计模式和规则引擎。考虑到绝大部分技术人员对设计模式都非常熟悉，我以设计模式为例来说明这种方案的复杂性。</p><p>下面是设计模式的“装饰者”模式的类关系图。</p><p><img src=\"https://static001.geekbang.org/resource/image/93/51/933b2b11afa24b8ac6524e0a3dae9551.jpg?wh=1920x1080\" alt=\"图片\"></p><p>图中的Component和Decorator就是抽象出来的规则，这个规则包括几部分：</p><ol>\n<li>Component和Decorator类。</li>\n<li>Decorator类继承Component类。</li>\n<li>Decorator类聚合了Component类。</li>\n</ol><p>这个规则一旦抽象出来后就固定了，不能轻易修改。例如，把规则3去掉，就无法实现装饰者模式的目的了。</p><p>装饰者模式相比传统的继承来实现功能，确实灵活很多。例如，《设计模式》中装饰者模式的样例“TextView”类的实现，用了装饰者之后，能够灵活地给TextView增加额外更多功能，包括可以增加边框、滚动条和背景图片等。这些功能上的组合不影响规则，只需要按照规则实现即可。</p><p>但装饰者模式相对普通的类实现模式，明显要复杂多了。本来一个函数或者一个类就能搞定的事情，现在要拆分成多个类，而且多个类之间必须按照装饰者模式来设计和调用。</p><p>规则引擎和设计模式类似，都是通过灵活的设计来达到可扩展的目的，但“灵活的设计”本身就是一件复杂的事情，不说别的，光是把23种设计模式全部理解和备注，都是一件很困难的事情。</p><h3>1写2抄3重构原则</h3><p>那么，我们在实际工作中具体如何来应对变化呢？Martin Fowler在他的经典书籍《重构》中给出一个“Rule of three”的原则，原文是“Three Strikes And You Refactor”，中文一般翻译为“事不过三，三则重构”。</p><p>而我将其翻译为“1写2抄3重构”，也就是说你不要一开始就考虑复杂的可扩展性应对方法，而是等到第三次遇到类似的实现的时候再来重构，重构的时候采取隔离或者封装的方案。</p><p>举个最简单的例子，假设你们的创新业务要对接第三方钱包，按照这个原则，就可以这样做：</p><ul>\n<li><strong>1写</strong>：最开始你们选择了微信钱包对接，此时不需要考虑太多可扩展性，直接快速对照微信支付的API对接即可，因为业务是否能做起来还不确定。</li>\n<li><strong>2抄</strong>：后来你们发现业务发展不错，决定要接入支付宝，此时还是可以不考虑可扩展，直接把原来微信支付接入的代码拷贝过来，然后对照支付宝的API，快速修改上线。</li>\n<li><strong>3重构</strong>：因为业务发展不错，为了方便更多用户，你们决定接入银联云闪付，此时就需要考虑重构，参考设计模式的模板方法和策略模式将支付对接的功能进行封装。</li>\n</ul><h2>小结</h2><p>今天我从预测变化和应对变化这两个设计可扩展性系统的条件，以及它们实现起来本身的复杂性，为你讲了复杂度来源之一的可扩展性，希望对你有所帮助。</p><p>这就是今天的全部内容，留一道思考题给你吧。你在具体代码中使用过哪些可扩展的技术？最终的效果如何？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。（编辑乱入：精彩的留言有机会获得丰厚福利哦！）</p>","neighbors":{"left":{"article_title":"05 | 复杂度来源：高可用","id":6895},"right":{"article_title":"07 | 复杂度来源：低成本、安全、规模","id":6990}},"comments":[{"had_liked":false,"id":8267,"user_name":"憶海拾貝","can_delete":false,"product_type":"c1","uid":1054727,"ip_address":"","ucode":"99E883A8601DED","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/07/9f5f5dd3.jpg","comment_is_top":false,"comment_ctime":1526015570,"is_pvip":false,"replies":[{"id":2435,"content":"这是设计模式的核心思想，能理解到这点比背住23个模式更重要","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526053088,"ip_address":"","comment_id":8267,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"设计模式的核心就是，封装变化，隔离可变性","like_count":224},{"had_liked":false,"id":8123,"user_name":"Geek_zbvt62","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/d28174a9.jpg","comment_is_top":false,"comment_ctime":1525914898,"is_pvip":false,"replies":[{"id":2367,"content":"挺实用的方法，架构设计原则部分会讲到","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1525919864,"ip_address":"","comment_id":8123,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"我平时工作中更多提醒自己压抑一下想预测各种需求变化的欲望。因为之前总是过度设计。压抑并不是说不去考虑各种变化，而恰恰需要把可能性大的变化点一一罗列出来，分维度打分，维度包括 可能性大小？长期还是短期会变化？如果发生变化，目前的组织和系统要花多大成本适应变化。这些变化正是李老师之前说过的各种复杂度上的变化，比如用户量激增带来的性能要求。此外还包括一个业务功能逻辑上的变化。\n在经过上面分析后往往会给出“上中下”策的设计方案，下策一般考虑的变化少，短视，但迅速，修改小，立竿见影。上策一般看重远期，但成本高很高，也很可能预测不中。\n最后还要分析，如果决定采用下中策，如果预测的变化发生了，系统修改为中上策的代价有多大，有些代价几乎是无穷大的，比如必须中断服务进行升级。如果代价小，那可以放心采用下策或中策。如果答案是否，可上策当前的代价又真的不可接受，那又要返回头重新分析了\n实践发现这个方法挺好用，尤其当有人来咨询架构方案时，往往对给出的结果比较满意","like_count":140,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417589,"discussion_content":"挺实用的方法，架构设计原则部分会讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525919864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2681807,"avatar":"https://static001.geekbang.org/account/avatar/00/28/eb/cf/29d4a8b9.jpg","nickname":"九三二十七","note":"","ucode":"FDB28EE80551A5","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654190,"discussion_content":"防止过度设计业务，但是可以过度思考，不一定要开发，考虑到中长期的各种可能性。一一列举，包括成本，用户请求数，数据量变大，这些思考点。\n\n采用上中下策略是一个好方式😉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1732112163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2706319,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/sJ0hEXK27SKzf5H85p8QpfpDC2TpPSV2XwrpjgSDx0hla1XQU2JHmoGgPEfMh4WpjkQj5JeCicpFvQNFEibiaOwYQ/132","nickname":"Geek_d94622","note":"","ucode":"861DB860664265","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392206,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630902739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132316,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/1c/1219b946.jpg","nickname":"Star. D","note":"","ucode":"058DCFD6F813E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385174,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626932532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1348830,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/SM4fwn9uFicXU8cQ1rNF2LQdKNbZI1FX1jmdwaE2MTrBawbugj4TQKjMKWG0sGbmqQickyARXZFS8NZtobvoWTHA/132","nickname":"td901105","note":"","ucode":"32D42A4F36FA02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376061,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621946676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1034220,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c7/ec/ef46614e.jpg","nickname":"知益有行","note":"","ucode":"71D0A8D88F9FC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340619,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610078904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1160192,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b4/00/661fb98d.jpg","nickname":"追忆似水年华","note":"","ucode":"C1D7C0DD7E7411","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310013,"discussion_content":"这套方法真好，学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601559555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8179,"user_name":"Jaime","can_delete":false,"product_type":"c1","uid":1078333,"ip_address":"","ucode":"904192CC4E916F","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/3d/54bbc1df.jpg","comment_is_top":false,"comment_ctime":1525952274,"is_pvip":true,"replies":[{"id":2411,"content":"符合实际情况，分层最有用，代码中用设计模式，如果后面接手的人不懂或者理解不到位，最后改的代码简直没法理解，还不如面向过程😂","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526005525,"ip_address":"","comment_id":8179,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"曾经在游戏中使用过工厂模式和状态模式，但交个另外一个人维护了一个月，我回头去看，代码已经没办法入眼😅😅😅。虽然说设计模式确实是程序员的基本功，但其实很多程序员也不是很明白设计模式的。对于现在来说，我比较喜欢的做法就是先分层，层与层之间用消息解耦，在层内部的实现我会分模块出来，遵守单一职责原则。同时会积极跟业务部门沟通，预测一下下一步的方向。虽然不是每次都准确，但也大概做到心中有数，对于现在的系统也有个预估。这几年的编程经验给了我一些启发，一定不要过分设计，首先要能正确工作的软件是最重要的。","like_count":70,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417614,"discussion_content":"符合实际情况，分层最有用，代码中用设计模式，如果后面接手的人不懂或者理解不到位，最后改的代码简直没法理解，还不如面向过程😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1526005525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1985560,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/kGKbbFqdlocPYY7RXDsPBFp4w8IibQicr8DSNJziaqSJyIRdYDica7RK0s8v52icyjZdRfOZMh8sSGXGAG0ia90NSwxA/132","nickname":"Geek_31b5f6","note":"","ucode":"9A2A233AF952D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389522,"discussion_content":"其实在使用设计模式的时候，最好写注解帮助后面的人理解你的想法，毕竟每个人对设计模式的理解都不一样，但是，程序员不懂设计模式是走不远的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629300966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193755,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/1b/82310e20.jpg","nickname":"拿笔小星","note":"","ucode":"D3D8F6A959710D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601532,"discussion_content":"对于大佬提的代码后期维护变形的问题，可以增加方案设计评审和代码评审环节，竟可能保障代码质量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675262972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362075,"discussion_content":"所以更多的是用面向对象语言写面向过程代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616843320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194360,"avatar":"https://static001.geekbang.org/account/avatar/00/12/39/78/67a00b8e.jpg","nickname":"桃暇","note":"","ucode":"7F9BA255B35977","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42511,"discussion_content":"所以是不是写点注释解释下更好。😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572686104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8122,"user_name":"Mark Yao","can_delete":false,"product_type":"c1","uid":1091768,"ip_address":"","ucode":"0535CEB691F618","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/b8/73ef30ed.jpg","comment_is_top":false,"comment_ctime":1525914831,"is_pvip":false,"replies":[{"id":2368,"content":"我的经验供参考：设计的时候考虑可扩展性，但如果评估后发现可扩展性设计的代价太大，那就暂时不做，等到真的有需求时再重构。\n\n过早考虑可扩展性，很多通用性和抽象都是推测的，等到真的要落地了，很可能发现事实并非如此，这就是预测是错误的。\n\n回到你的案例，一般来说，短信本身会考虑可扩展性，例如联通的短信接口和电信的不同，这种可扩展性是要一开始就设计的，但短信和微信，看起来都是消息，实际上差异非常大，可扩展性设计想兼容这两种方式，方案比较复杂，可能看起来有点不伦不类","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1525920173,"ip_address":"","comment_id":8122,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"说说我们的消息系统，原始需求是用户操作业务后给用户手机短信提醒，设计初衷考虑到可能涉及到多家第三方短信服务商。我们统一定义发送短信接口，定义实时和定时发送方式，在内容形式定义模版接口接受不通形式自定义模版的内容，后来把短信定义为消息中的一种，如微信、短信、站内消息、app push 都为消息，又抽象出来消息接口，消息开发中使用多种设计模式。最后发现就就一直使用短信服务。我困惑地方，扩展性需要在什么时候做，做到什么程度呢？","like_count":43,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417588,"discussion_content":"我的经验供参考：设计的时候考虑可扩展性，但如果评估后发现可扩展性设计的代价太大，那就暂时不做，等到真的有需求时再重构。\n\n过早考虑可扩展性，很多通用性和抽象都是推测的，等到真的要落地了，很可能发现事实并非如此，这就是预测是错误的。\n\n回到你的案例，一般来说，短信本身会考虑可扩展性，例如联通的短信接口和电信的不同，这种可扩展性是要一开始就设计的，但短信和微信，看起来都是消息，实际上差异非常大，可扩展性设计想兼容这两种方式，方案比较复杂，可能看起来有点不伦不类","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1525920173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1957994,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Entysx8cIlZicB9YpWOOZiaIYmHqBsZzXib3nun7mrXzdBfOPFaziawyk6m9WypYtS6FbTUzU9k3omwfibyFHPKIn7Q/132","nickname":"张沛","note":"","ucode":"F27C4543AAA827","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543666,"discussion_content":"我都是在经历了三次想重构的想法后在考虑着手重构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641264221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1985560,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/kGKbbFqdlocPYY7RXDsPBFp4w8IibQicr8DSNJziaqSJyIRdYDica7RK0s8v52icyjZdRfOZMh8sSGXGAG0ia90NSwxA/132","nickname":"Geek_31b5f6","note":"","ucode":"9A2A233AF952D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389523,"discussion_content":"这个其实是已经过度设计了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629301047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1918112,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/44/a0/16d0d300.jpg","nickname":"ZHANGPING","note":"","ucode":"7108812981C996","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380067,"discussion_content":"当前这个点：考虑可扩展性代价大，后期如果改动也大，那这个点就不考虑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624326463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102743,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d3/97/953a9f5a.jpg","nickname":"清泉","note":"","ucode":"28EAE68B33A140","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221727,"discussion_content":"我的经验供参考：设计的时候考虑可扩展性，若果当前不做，未来发生了改造成本也不会很大，那就暂时不做，等发生了再重构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586051790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8214,"user_name":"带刺的温柔","can_delete":false,"product_type":"c1","uid":1107210,"ip_address":"","ucode":"509C4CF0176EDB","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/0a/13c0f653.jpg","comment_is_top":false,"comment_ctime":1525969288,"is_pvip":false,"replies":[{"id":2403,"content":"非常正确，一定的冗余和浪费，能够大大减少方案的复杂度","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526004955,"ip_address":"","comment_id":8214,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"厉害了程序员都想要开发一个完美的灵活可扩展的系统永无止境，而往往陷入过度设计的泥潭，最后累的要死得到的可能是貌似完美符合了扩展性但是非常不好用甚至有点画蛇添足的感觉。觉得扩展性不是一触而就的也不是一成不变的它是一它是不断改进的过程，不变的是满足需求是底线在追求扩展性的路上把风险控制在最低。我在兼容简单与扩展性上我觉得一定的冗余是个不错的选择，老师你觉得呢","like_count":18,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417634,"discussion_content":"非常正确，一定的冗余和浪费，能够大大减少方案的复杂度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526004955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13860,"user_name":"武洪凯","can_delete":false,"product_type":"c1","uid":1099250,"ip_address":"","ucode":"ACCCE8372AEE6D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c5/f2/57f33e71.jpg","comment_is_top":false,"comment_ctime":1530027115,"is_pvip":false,"replies":[{"id":4699,"content":"深扣细节的话，就直接奔着具体某个系统或者专题，例如kafka或者缓存，这样找书就很容易了","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1530179048,"ip_address":"","comment_id":13860,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"老师能不能推荐一些构架的书，中文的英文的都可以。课程讲的很好，不过很多细节深扣的话感觉还要继续看书。","like_count":13,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417634,"discussion_content":"非常正确，一定的冗余和浪费，能够大大减少方案的复杂度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526004955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8130,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1525915913,"is_pvip":false,"replies":[{"id":2366,"content":"纠正一下：SOLID原则不是设计模式里面的，而是对象和接口的设计原则。\n\n依赖倒置的难点就在于稳定层的设计，实践中稳定层也难以保证稳定","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1525919812,"ip_address":"","comment_id":8130,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"设计模式里面的依赖倒置原则，上层不依赖下层，下层也不依赖上层，两者都依赖于抽象，抽象是稳定的，上层和下层都是可扩展的，相当于文章说的一个稳定层抽象，两个变化层…","like_count":10,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419788,"discussion_content":"深扣细节的话，就直接奔着具体某个系统或者专题，例如kafka或者缓存，这样找书就很容易了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530179048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12597,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1087243,"ip_address":"","ucode":"E1CE8575B3F106","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","comment_is_top":false,"comment_ctime":1528935482,"is_pvip":false,"replies":[{"id":4147,"content":"专栏已经是我综合自己的经验，结合看了很多架构设计的书籍整出来的，如果专栏看的有点吃力，那看其它书会更吃力。\n\n可以说说你吃力的点，看看能不能帮到你","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1528940679,"ip_address":"","comment_id":12597,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"老师你讲的看起来有点吃力，能否推荐几本书让我先入个门","like_count":9,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417592,"discussion_content":"纠正一下：SOLID原则不是设计模式里面的，而是对象和接口的设计原则。\n\n依赖倒置的难点就在于稳定层的设计，实践中稳定层也难以保证稳定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525919812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10163,"user_name":"孙振超","can_delete":false,"product_type":"c1","uid":1101755,"ip_address":"","ucode":"0F9EABC6125350","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/bb/22af0e52.jpg","comment_is_top":false,"comment_ctime":1527318605,"is_pvip":false,"replies":[{"id":3164,"content":"将业务逻辑抽象为固定的步骤，适合业务已经比较成熟了，例如nginx将http的处理步骤抽象为大概10个阶段，如果是创新业务，这样做比较难","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1527374576,"ip_address":"","comment_id":10163,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"之前看过一篇介绍架构的博文，里面提到一个观点：衡量架构的好坏是变更的成本。扩展性的好坏很依赖于设计人员对问题的抽象能力，如同文中所描述的把系统分为稳定层和抽象层两部分，就是对问题进行了抽象。具体而言，在设计上经常采用的方法是模板+接口，将具体的业务逻辑抽象为固定的几个步骤，每一个步骤是一个接口，而后根据不同的对应的参数动态选择不同的实现，这样当已有的业务发生变更时，只需要调整相应的逻辑即可，做好关注点分离，面对新增的业务逻辑和形态，添加对应的实现即可，无需修改已有的内容。\n另外就是利用动态修改能力（比如java中无需重启服务修改某一个属性的值）来应对业务变动，提升扩展性","like_count":9,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419314,"discussion_content":"专栏已经是我综合自己的经验，结合看了很多架构设计的书籍整出来的，如果专栏看的有点吃力，那看其它书会更吃力。\n\n可以说说你吃力的点，看看能不能帮到你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528940679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245890,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1599102804,"is_pvip":true,"replies":[{"id":90646,"content":"是的，普通应用开发者更多是代码层面的可扩展性，而不是架构层面的可扩展性","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1599459680,"ip_address":"","comment_id":245890,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"老师在留言里面提到，“设计的时候考虑可扩展性，但是如果代价比较大，就展示不做，有需要时再重构”，这个比较实用。\n\n之前做过的系统对于可扩展没有什么要求，实在不行的时候，就会考虑推到重来。\n\n可扩展性并不想前面提到的高性能和高可用那么容易衡量，因为扩展的可能性还是要小一些，或者说可扩展性并不是特别的明显。\n\n按照专栏里面的说法，设计模式好像更多的是考虑可扩展性，感觉上似乎对于高性能和高可用意义不大。但是反过来，对于普通的应用开发者来说，是不是遇到扩展性问题（或者需求变化）的可能性要远大于高性能或者高可用？","like_count":6,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418368,"discussion_content":"将业务逻辑抽象为固定的步骤，适合业务已经比较成熟了，例如nginx将http的处理步骤抽象为大概10个阶段，如果是创新业务，这样做比较难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527374576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8267,"user_name":"憶海拾貝","can_delete":false,"product_type":"c1","uid":1054727,"ip_address":"","ucode":"99E883A8601DED","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/07/9f5f5dd3.jpg","comment_is_top":false,"comment_ctime":1526015570,"is_pvip":false,"replies":[{"id":2435,"content":"这是设计模式的核心思想，能理解到这点比背住23个模式更重要","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526053088,"ip_address":"","comment_id":8267,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"设计模式的核心就是，封装变化，隔离可变性","like_count":224,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417649,"discussion_content":"这是设计模式的核心思想，能理解到这点比背住23个模式更重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526053088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102743,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d3/97/953a9f5a.jpg","nickname":"清泉","note":"","ucode":"28EAE68B33A140","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221690,"discussion_content":"只能说主要是这样。像单利模式，工厂模式等就不是。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1586047994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","nickname":"KW💤","note":"","ucode":"290DD7016F4EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403243,"discussion_content":"单例以及建造者模式这些建造型模式不是。但工厂模式我觉得是，通过工厂来获取对象是隔离了对象的变化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634037788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362074,"discussion_content":"对于结构型设计模式是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616843257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8123,"user_name":"Geek_zbvt62","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/d28174a9.jpg","comment_is_top":false,"comment_ctime":1525914898,"is_pvip":false,"replies":[{"id":2367,"content":"挺实用的方法，架构设计原则部分会讲到","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1525919864,"ip_address":"","comment_id":8123,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"我平时工作中更多提醒自己压抑一下想预测各种需求变化的欲望。因为之前总是过度设计。压抑并不是说不去考虑各种变化，而恰恰需要把可能性大的变化点一一罗列出来，分维度打分，维度包括 可能性大小？长期还是短期会变化？如果发生变化，目前的组织和系统要花多大成本适应变化。这些变化正是李老师之前说过的各种复杂度上的变化，比如用户量激增带来的性能要求。此外还包括一个业务功能逻辑上的变化。\n在经过上面分析后往往会给出“上中下”策的设计方案，下策一般考虑的变化少，短视，但迅速，修改小，立竿见影。上策一般看重远期，但成本高很高，也很可能预测不中。\n最后还要分析，如果决定采用下中策，如果预测的变化发生了，系统修改为中上策的代价有多大，有些代价几乎是无穷大的，比如必须中断服务进行升级。如果代价小，那可以放心采用下策或中策。如果答案是否，可上策当前的代价又真的不可接受，那又要返回头重新分析了\n实践发现这个方法挺好用，尤其当有人来咨询架构方案时，往往对给出的结果比较满意","like_count":140,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417649,"discussion_content":"这是设计模式的核心思想，能理解到这点比背住23个模式更重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526053088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102743,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d3/97/953a9f5a.jpg","nickname":"清泉","note":"","ucode":"28EAE68B33A140","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221690,"discussion_content":"只能说主要是这样。像单利模式，工厂模式等就不是。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1586047994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","nickname":"KW💤","note":"","ucode":"290DD7016F4EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403243,"discussion_content":"单例以及建造者模式这些建造型模式不是。但工厂模式我觉得是，通过工厂来获取对象是隔离了对象的变化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634037788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362074,"discussion_content":"对于结构型设计模式是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616843257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8179,"user_name":"Jaime","can_delete":false,"product_type":"c1","uid":1078333,"ip_address":"","ucode":"904192CC4E916F","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/3d/54bbc1df.jpg","comment_is_top":false,"comment_ctime":1525952274,"is_pvip":true,"replies":[{"id":2411,"content":"符合实际情况，分层最有用，代码中用设计模式，如果后面接手的人不懂或者理解不到位，最后改的代码简直没法理解，还不如面向过程😂","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526005525,"ip_address":"","comment_id":8179,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"曾经在游戏中使用过工厂模式和状态模式，但交个另外一个人维护了一个月，我回头去看，代码已经没办法入眼😅😅😅。虽然说设计模式确实是程序员的基本功，但其实很多程序员也不是很明白设计模式的。对于现在来说，我比较喜欢的做法就是先分层，层与层之间用消息解耦，在层内部的实现我会分模块出来，遵守单一职责原则。同时会积极跟业务部门沟通，预测一下下一步的方向。虽然不是每次都准确，但也大概做到心中有数，对于现在的系统也有个预估。这几年的编程经验给了我一些启发，一定不要过分设计，首先要能正确工作的软件是最重要的。","like_count":70,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417589,"discussion_content":"挺实用的方法，架构设计原则部分会讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525919864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2681807,"avatar":"https://static001.geekbang.org/account/avatar/00/28/eb/cf/29d4a8b9.jpg","nickname":"九三二十七","note":"","ucode":"FDB28EE80551A5","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654190,"discussion_content":"防止过度设计业务，但是可以过度思考，不一定要开发，考虑到中长期的各种可能性。一一列举，包括成本，用户请求数，数据量变大，这些思考点。\n\n采用上中下策略是一个好方式😉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1732112163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2706319,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/sJ0hEXK27SKzf5H85p8QpfpDC2TpPSV2XwrpjgSDx0hla1XQU2JHmoGgPEfMh4WpjkQj5JeCicpFvQNFEibiaOwYQ/132","nickname":"Geek_d94622","note":"","ucode":"861DB860664265","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392206,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630902739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132316,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/1c/1219b946.jpg","nickname":"Star. D","note":"","ucode":"058DCFD6F813E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385174,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626932532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1348830,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/SM4fwn9uFicXU8cQ1rNF2LQdKNbZI1FX1jmdwaE2MTrBawbugj4TQKjMKWG0sGbmqQickyARXZFS8NZtobvoWTHA/132","nickname":"td901105","note":"","ucode":"32D42A4F36FA02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376061,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621946676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1034220,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c7/ec/ef46614e.jpg","nickname":"知益有行","note":"","ucode":"71D0A8D88F9FC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340619,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610078904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1160192,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b4/00/661fb98d.jpg","nickname":"追忆似水年华","note":"","ucode":"C1D7C0DD7E7411","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310013,"discussion_content":"这套方法真好，学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601559555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8122,"user_name":"Mark Yao","can_delete":false,"product_type":"c1","uid":1091768,"ip_address":"","ucode":"0535CEB691F618","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/b8/73ef30ed.jpg","comment_is_top":false,"comment_ctime":1525914831,"is_pvip":false,"replies":[{"id":2368,"content":"我的经验供参考：设计的时候考虑可扩展性，但如果评估后发现可扩展性设计的代价太大，那就暂时不做，等到真的有需求时再重构。\n\n过早考虑可扩展性，很多通用性和抽象都是推测的，等到真的要落地了，很可能发现事实并非如此，这就是预测是错误的。\n\n回到你的案例，一般来说，短信本身会考虑可扩展性，例如联通的短信接口和电信的不同，这种可扩展性是要一开始就设计的，但短信和微信，看起来都是消息，实际上差异非常大，可扩展性设计想兼容这两种方式，方案比较复杂，可能看起来有点不伦不类","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1525920173,"ip_address":"","comment_id":8122,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"说说我们的消息系统，原始需求是用户操作业务后给用户手机短信提醒，设计初衷考虑到可能涉及到多家第三方短信服务商。我们统一定义发送短信接口，定义实时和定时发送方式，在内容形式定义模版接口接受不通形式自定义模版的内容，后来把短信定义为消息中的一种，如微信、短信、站内消息、app push 都为消息，又抽象出来消息接口，消息开发中使用多种设计模式。最后发现就就一直使用短信服务。我困惑地方，扩展性需要在什么时候做，做到什么程度呢？","like_count":43,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417614,"discussion_content":"符合实际情况，分层最有用，代码中用设计模式，如果后面接手的人不懂或者理解不到位，最后改的代码简直没法理解，还不如面向过程😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1526005525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1985560,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/kGKbbFqdlocPYY7RXDsPBFp4w8IibQicr8DSNJziaqSJyIRdYDica7RK0s8v52icyjZdRfOZMh8sSGXGAG0ia90NSwxA/132","nickname":"Geek_31b5f6","note":"","ucode":"9A2A233AF952D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389522,"discussion_content":"其实在使用设计模式的时候，最好写注解帮助后面的人理解你的想法，毕竟每个人对设计模式的理解都不一样，但是，程序员不懂设计模式是走不远的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629300966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193755,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/1b/82310e20.jpg","nickname":"拿笔小星","note":"","ucode":"D3D8F6A959710D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601532,"discussion_content":"对于大佬提的代码后期维护变形的问题，可以增加方案设计评审和代码评审环节，竟可能保障代码质量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675262972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362075,"discussion_content":"所以更多的是用面向对象语言写面向过程代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616843320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194360,"avatar":"https://static001.geekbang.org/account/avatar/00/12/39/78/67a00b8e.jpg","nickname":"桃暇","note":"","ucode":"7F9BA255B35977","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42511,"discussion_content":"所以是不是写点注释解释下更好。😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572686104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8214,"user_name":"带刺的温柔","can_delete":false,"product_type":"c1","uid":1107210,"ip_address":"","ucode":"509C4CF0176EDB","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/0a/13c0f653.jpg","comment_is_top":false,"comment_ctime":1525969288,"is_pvip":false,"replies":[{"id":2403,"content":"非常正确，一定的冗余和浪费，能够大大减少方案的复杂度","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526004955,"ip_address":"","comment_id":8214,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"厉害了程序员都想要开发一个完美的灵活可扩展的系统永无止境，而往往陷入过度设计的泥潭，最后累的要死得到的可能是貌似完美符合了扩展性但是非常不好用甚至有点画蛇添足的感觉。觉得扩展性不是一触而就的也不是一成不变的它是一它是不断改进的过程，不变的是满足需求是底线在追求扩展性的路上把风险控制在最低。我在兼容简单与扩展性上我觉得一定的冗余是个不错的选择，老师你觉得呢","like_count":18,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417588,"discussion_content":"我的经验供参考：设计的时候考虑可扩展性，但如果评估后发现可扩展性设计的代价太大，那就暂时不做，等到真的有需求时再重构。\n\n过早考虑可扩展性，很多通用性和抽象都是推测的，等到真的要落地了，很可能发现事实并非如此，这就是预测是错误的。\n\n回到你的案例，一般来说，短信本身会考虑可扩展性，例如联通的短信接口和电信的不同，这种可扩展性是要一开始就设计的，但短信和微信，看起来都是消息，实际上差异非常大，可扩展性设计想兼容这两种方式，方案比较复杂，可能看起来有点不伦不类","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1525920173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1957994,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Entysx8cIlZicB9YpWOOZiaIYmHqBsZzXib3nun7mrXzdBfOPFaziawyk6m9WypYtS6FbTUzU9k3omwfibyFHPKIn7Q/132","nickname":"张沛","note":"","ucode":"F27C4543AAA827","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543666,"discussion_content":"我都是在经历了三次想重构的想法后在考虑着手重构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641264221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1985560,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/kGKbbFqdlocPYY7RXDsPBFp4w8IibQicr8DSNJziaqSJyIRdYDica7RK0s8v52icyjZdRfOZMh8sSGXGAG0ia90NSwxA/132","nickname":"Geek_31b5f6","note":"","ucode":"9A2A233AF952D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389523,"discussion_content":"这个其实是已经过度设计了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629301047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1918112,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/44/a0/16d0d300.jpg","nickname":"ZHANGPING","note":"","ucode":"7108812981C996","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380067,"discussion_content":"当前这个点：考虑可扩展性代价大，后期如果改动也大，那这个点就不考虑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624326463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102743,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d3/97/953a9f5a.jpg","nickname":"清泉","note":"","ucode":"28EAE68B33A140","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221727,"discussion_content":"我的经验供参考：设计的时候考虑可扩展性，若果当前不做，未来发生了改造成本也不会很大，那就暂时不做，等发生了再重构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586051790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13860,"user_name":"武洪凯","can_delete":false,"product_type":"c1","uid":1099250,"ip_address":"","ucode":"ACCCE8372AEE6D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c5/f2/57f33e71.jpg","comment_is_top":false,"comment_ctime":1530027115,"is_pvip":false,"replies":[{"id":4699,"content":"深扣细节的话，就直接奔着具体某个系统或者专题，例如kafka或者缓存，这样找书就很容易了","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1530179048,"ip_address":"","comment_id":13860,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"老师能不能推荐一些构架的书，中文的英文的都可以。课程讲的很好，不过很多细节深扣的话感觉还要继续看书。","like_count":13,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419788,"discussion_content":"深扣细节的话，就直接奔着具体某个系统或者专题，例如kafka或者缓存，这样找书就很容易了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530179048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8130,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1525915913,"is_pvip":false,"replies":[{"id":2366,"content":"纠正一下：SOLID原则不是设计模式里面的，而是对象和接口的设计原则。\n\n依赖倒置的难点就在于稳定层的设计，实践中稳定层也难以保证稳定","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1525919812,"ip_address":"","comment_id":8130,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"设计模式里面的依赖倒置原则，上层不依赖下层，下层也不依赖上层，两者都依赖于抽象，抽象是稳定的，上层和下层都是可扩展的，相当于文章说的一个稳定层抽象，两个变化层…","like_count":10,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417592,"discussion_content":"纠正一下：SOLID原则不是设计模式里面的，而是对象和接口的设计原则。\n\n依赖倒置的难点就在于稳定层的设计，实践中稳定层也难以保证稳定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525919812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12597,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1087243,"ip_address":"","ucode":"E1CE8575B3F106","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","comment_is_top":false,"comment_ctime":1528935482,"is_pvip":false,"replies":[{"id":4147,"content":"专栏已经是我综合自己的经验，结合看了很多架构设计的书籍整出来的，如果专栏看的有点吃力，那看其它书会更吃力。\n\n可以说说你吃力的点，看看能不能帮到你","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1528940679,"ip_address":"","comment_id":12597,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"老师你讲的看起来有点吃力，能否推荐几本书让我先入个门","like_count":9,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419314,"discussion_content":"专栏已经是我综合自己的经验，结合看了很多架构设计的书籍整出来的，如果专栏看的有点吃力，那看其它书会更吃力。\n\n可以说说你吃力的点，看看能不能帮到你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528940679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10163,"user_name":"孙振超","can_delete":false,"product_type":"c1","uid":1101755,"ip_address":"","ucode":"0F9EABC6125350","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/bb/22af0e52.jpg","comment_is_top":false,"comment_ctime":1527318605,"is_pvip":false,"replies":[{"id":3164,"content":"将业务逻辑抽象为固定的步骤，适合业务已经比较成熟了，例如nginx将http的处理步骤抽象为大概10个阶段，如果是创新业务，这样做比较难","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1527374576,"ip_address":"","comment_id":10163,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"之前看过一篇介绍架构的博文，里面提到一个观点：衡量架构的好坏是变更的成本。扩展性的好坏很依赖于设计人员对问题的抽象能力，如同文中所描述的把系统分为稳定层和抽象层两部分，就是对问题进行了抽象。具体而言，在设计上经常采用的方法是模板+接口，将具体的业务逻辑抽象为固定的几个步骤，每一个步骤是一个接口，而后根据不同的对应的参数动态选择不同的实现，这样当已有的业务发生变更时，只需要调整相应的逻辑即可，做好关注点分离，面对新增的业务逻辑和形态，添加对应的实现即可，无需修改已有的内容。\n另外就是利用动态修改能力（比如java中无需重启服务修改某一个属性的值）来应对业务变动，提升扩展性","like_count":9,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418368,"discussion_content":"将业务逻辑抽象为固定的步骤，适合业务已经比较成熟了，例如nginx将http的处理步骤抽象为大概10个阶段，如果是创新业务，这样做比较难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527374576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245890,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1599102804,"is_pvip":true,"replies":[{"id":90646,"content":"是的，普通应用开发者更多是代码层面的可扩展性，而不是架构层面的可扩展性","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1599459680,"ip_address":"","comment_id":245890,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"老师在留言里面提到，“设计的时候考虑可扩展性，但是如果代价比较大，就展示不做，有需要时再重构”，这个比较实用。\n\n之前做过的系统对于可扩展没有什么要求，实在不行的时候，就会考虑推到重来。\n\n可扩展性并不想前面提到的高性能和高可用那么容易衡量，因为扩展的可能性还是要小一些，或者说可扩展性并不是特别的明显。\n\n按照专栏里面的说法，设计模式好像更多的是考虑可扩展性，感觉上似乎对于高性能和高可用意义不大。但是反过来，对于普通的应用开发者来说，是不是遇到扩展性问题（或者需求变化）的可能性要远大于高性能或者高可用？","like_count":6,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505002,"discussion_content":"是的，普通应用开发者更多是代码层面的可扩展性，而不是架构层面的可扩展性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599459680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8451,"user_name":"王念","can_delete":false,"product_type":"c1","uid":1105612,"ip_address":"","ucode":"22D0D32F400CF3","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/cc/9c6f6615.jpg","comment_is_top":false,"comment_ctime":1526223581,"is_pvip":false,"replies":[{"id":2481,"content":"这也不行，可能功能还没做完就要重构了","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526253444,"ip_address":"","comment_id":8451,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":" 先满足功能 再重构框架","like_count":6},{"had_liked":false,"id":113538,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1563072030,"is_pvip":false,"replies":[{"id":41834,"content":"不错👍👍","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1563356474,"ip_address":"","comment_id":113538,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"我曾经用过的可扩展编程技术：\n1.把一个通用的处理过程用一个函数来实现，把一些会变化参数放到一个配置文件活数据库表中。\n2.编程面向接口，不是面向具体的实现细节。\n3.采用封装、继承、多太等面向对象的技术\n4.采用拼接动态SQL语句构建条件组合查询语句。","like_count":5,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417726,"discussion_content":"这也不行，可能功能还没做完就要重构了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526253444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130702,"user_name":"Hwan","can_delete":false,"product_type":"c1","uid":1205627,"ip_address":"","ucode":"A728C6790511BD","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","comment_is_top":false,"comment_ctime":1567513468,"is_pvip":false,"replies":[{"id":49152,"content":"牛逼👍","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1567596986,"ip_address":"","comment_id":130702,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"前几个月设计和开发一个审核的系统，通过将职责划分清楚之后，再使用微服务将各个模块划分出来，审核的算法和调用第三方的这些和主系统分开，现在不管怎么加其他第三方的审核服务都没事，还是很开心的","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458266,"discussion_content":"不错👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563356474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20004,"user_name":"I","can_delete":false,"product_type":"c1","uid":1207154,"ip_address":"","ucode":"3D4EF00284C3AA","user_header":"https://static001.geekbang.org/account/avatar/00/12/6b/72/30c631fe.jpg","comment_is_top":false,"comment_ctime":1534208848,"is_pvip":false,"replies":[{"id":6961,"content":"代码中的扩展性，一般都是用面向对象，设计模式，面向过程的语言就封装为模块，用插件模式","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1534227052,"ip_address":"","comment_id":20004,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"代码中实现的扩展，只采用过插件模式。但插件模式似乎应对场景比较单一，大神可以谈谈代码中的其他实现方式吗？","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466077,"discussion_content":"牛逼👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567596986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111091,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/33/f273f367.jpg","nickname":"王平镇【沙丁云】","note":"","ucode":"D79BC37DE774E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232121,"discussion_content":"可以加微信吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586853783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9702,"user_name":"不再犹豫","can_delete":false,"product_type":"c1","uid":1119398,"ip_address":"","ucode":"B4304D5A6F2A74","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/a6/d00153f1.jpg","comment_is_top":false,"comment_ctime":1527038904,"is_pvip":false,"replies":[{"id":2991,"content":"是的，应用设计模式，设计原则就可以了","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1527055743,"ip_address":"","comment_id":9702,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"代码层面来说我觉得是快速实现，持续重构。建立在对业务充分理解的基础上，按照依赖抽象的原则，提取出因业务变化而导致代码逻辑变化部分。","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418172,"discussion_content":"是的，应用设计模式，设计原则就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527055743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298781,"user_name":"ZHANGPING","can_delete":false,"product_type":"c1","uid":1918112,"ip_address":"","ucode":"7108812981C996","user_header":"https://static001.geekbang.org/account/avatar/00/1d/44/a0/16d0d300.jpg","comment_is_top":false,"comment_ctime":1624325502,"is_pvip":false,"replies":[{"id":108397,"content":"理解到位","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1624356318,"ip_address":"","comment_id":298781,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"个人对可扩展的理解：因为业务需求的变更（新增或修改），使得系统需要支持新的功能。其本质是业务驱动，所以作为开发者在设计之初就需要对行业有深刻的认知，知道行业演进规则，熟悉业务层的玩法，套路，和自己当前公司的定位。然后再从技术层面考虑怎样去尽可能的提供灵活的解决方案。\n当然如果作为行业的领导者，可能没有参照物，这个时候也可以通过和产品的探索+论证，预测出可能的改动点，当然可能不对。 ","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418172,"discussion_content":"是的，应用设计模式，设计原则就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527055743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251139,"user_name":"Xiao","can_delete":false,"product_type":"c1","uid":1179212,"ip_address":"","ucode":"71FFCCEEDE09E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/4c/46eb517a.jpg","comment_is_top":false,"comment_ctime":1601375855,"is_pvip":false,"replies":[{"id":91861,"content":"看什么级别的架构师，P9&#47;P10的架构师基本上都是行业业务专家，P7&#47;P8更多还是负责技术","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1601430946,"ip_address":"","comment_id":251139,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"在实际编码阶段，会采用相应设计模式来coding，比如策略、工厂、代理模式、模版方法模式等等，也会将DDD的思想运用到coding中来，尽量做到高内聚。项目架构设计上，也会运用DDD的六边形架构设计。个人觉得DDD的思想在复杂的业务背景下，能够带来意想不到的效果。\n还有，个人觉得架构师首先应该也是行业业务专家，在做架构设计的时候，能够对未来业务发展有一定的把控力。","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506396,"discussion_content":"看什么级别的架构师，P9/P10的架构师基本上都是行业业务专家，P7/P8更多还是负责技术","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601430946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215054,"user_name":"GEEKBANG_4123791","can_delete":false,"product_type":"c1","uid":1267924,"ip_address":"","ucode":"BCAE0B44F2999D","user_header":"https://static001.geekbang.org/account/avatar/00/13/58/d4/c1e67d7a.jpg","comment_is_top":false,"comment_ctime":1588898190,"is_pvip":false,"replies":[{"id":79723,"content":"设计模式是代码的可扩展性，架构的可扩展性和设计模式关系不大","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1588990168,"ip_address":"","comment_id":215054,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"设计模式要好好看看了","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494295,"discussion_content":"设计模式是代码的可扩展性，架构的可扩展性和设计模式关系不大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588990168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379351,"user_name":"鲁米","can_delete":false,"product_type":"c1","uid":1574008,"ip_address":"北京","ucode":"F8F23431723F25","user_header":"https://static001.geekbang.org/account/avatar/00/18/04/78/37b46ba6.jpg","comment_is_top":false,"comment_ctime":1691802003,"is_pvip":false,"replies":[{"id":138220,"content":"建议去看看《重构》原文，里面有更详细的说明，不会第3次就成屎山了，恰恰相反，很多屎山就是因为每次都想着设计模式、可扩展之类的，搞的代码很复杂，时间久了就成屎山了。","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1691889163,"ip_address":"广东","comment_id":379351,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"1 写 2 抄 3 重构原则。等待到 3 代码都 “shi山了”。","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625556,"discussion_content":"建议去看看《重构》原文，里面有更详细的说明，不会第3次就成屎山了，恰恰相反，很多屎山就是因为每次都想着设计模式、可扩展之类的，搞的代码很复杂，时间久了就成屎山了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691889163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276594,"user_name":"RMB","can_delete":false,"product_type":"c1","uid":2272121,"ip_address":"","ucode":"5D1F54B93EB5D3","user_header":"https://static001.geekbang.org/account/avatar/00/22/ab/79/e293456e.jpg","comment_is_top":false,"comment_ctime":1612020815,"is_pvip":false,"replies":[{"id":100430,"content":"业务拆分粒度是关键，但大部分人业务设计的时候都倾向于预测更多业务发展和变化，因此导致更加复杂。","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1612103405,"ip_address":"","comment_id":276594,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"业务的复杂度决定架构设计的复杂度，有时把业务想的太复杂，反而让架构设计更臃肿，所以，其他暂且不说，对复杂业务的拆分能力以及把控业务的拆分粒度，非常重要！","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514765,"discussion_content":"业务拆分粒度是关键，但大部分人业务设计的时候都倾向于预测更多业务发展和变化，因此导致更加复杂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612103405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8451,"user_name":"王念","can_delete":false,"product_type":"c1","uid":1105612,"ip_address":"","ucode":"22D0D32F400CF3","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/cc/9c6f6615.jpg","comment_is_top":false,"comment_ctime":1526223581,"is_pvip":false,"replies":[{"id":2481,"content":"这也不行，可能功能还没做完就要重构了","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526253444,"ip_address":"","comment_id":8451,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":" 先满足功能 再重构框架","like_count":6,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417726,"discussion_content":"这也不行，可能功能还没做完就要重构了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526253444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113538,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1563072030,"is_pvip":false,"replies":[{"id":41834,"content":"不错👍👍","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1563356474,"ip_address":"","comment_id":113538,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"我曾经用过的可扩展编程技术：\n1.把一个通用的处理过程用一个函数来实现，把一些会变化参数放到一个配置文件活数据库表中。\n2.编程面向接口，不是面向具体的实现细节。\n3.采用封装、继承、多太等面向对象的技术\n4.采用拼接动态SQL语句构建条件组合查询语句。","like_count":5,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458266,"discussion_content":"不错👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563356474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130702,"user_name":"Hwan","can_delete":false,"product_type":"c1","uid":1205627,"ip_address":"","ucode":"A728C6790511BD","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","comment_is_top":false,"comment_ctime":1567513468,"is_pvip":false,"replies":[{"id":49152,"content":"牛逼👍","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1567596986,"ip_address":"","comment_id":130702,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"前几个月设计和开发一个审核的系统，通过将职责划分清楚之后，再使用微服务将各个模块划分出来，审核的算法和调用第三方的这些和主系统分开，现在不管怎么加其他第三方的审核服务都没事，还是很开心的","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466077,"discussion_content":"牛逼👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567596986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111091,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f4/33/f273f367.jpg","nickname":"王平镇【沙丁云】","note":"","ucode":"D79BC37DE774E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232121,"discussion_content":"可以加微信吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586853783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20004,"user_name":"I","can_delete":false,"product_type":"c1","uid":1207154,"ip_address":"","ucode":"3D4EF00284C3AA","user_header":"https://static001.geekbang.org/account/avatar/00/12/6b/72/30c631fe.jpg","comment_is_top":false,"comment_ctime":1534208848,"is_pvip":false,"replies":[{"id":6961,"content":"代码中的扩展性，一般都是用面向对象，设计模式，面向过程的语言就封装为模块，用插件模式","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1534227052,"ip_address":"","comment_id":20004,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"代码中实现的扩展，只采用过插件模式。但插件模式似乎应对场景比较单一，大神可以谈谈代码中的其他实现方式吗？","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422058,"discussion_content":"代码中的扩展性，一般都是用面向对象，设计模式，面向过程的语言就封装为模块，用插件模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534227052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9702,"user_name":"不再犹豫","can_delete":false,"product_type":"c1","uid":1119398,"ip_address":"","ucode":"B4304D5A6F2A74","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/a6/d00153f1.jpg","comment_is_top":false,"comment_ctime":1527038904,"is_pvip":false,"replies":[{"id":2991,"content":"是的，应用设计模式，设计原则就可以了","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1527055743,"ip_address":"","comment_id":9702,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"代码层面来说我觉得是快速实现，持续重构。建立在对业务充分理解的基础上，按照依赖抽象的原则，提取出因业务变化而导致代码逻辑变化部分。","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422058,"discussion_content":"代码中的扩展性，一般都是用面向对象，设计模式，面向过程的语言就封装为模块，用插件模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534227052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298781,"user_name":"ZHANGPING","can_delete":false,"product_type":"c1","uid":1918112,"ip_address":"","ucode":"7108812981C996","user_header":"https://static001.geekbang.org/account/avatar/00/1d/44/a0/16d0d300.jpg","comment_is_top":false,"comment_ctime":1624325502,"is_pvip":false,"replies":[{"id":108397,"content":"理解到位","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1624356318,"ip_address":"","comment_id":298781,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"个人对可扩展的理解：因为业务需求的变更（新增或修改），使得系统需要支持新的功能。其本质是业务驱动，所以作为开发者在设计之初就需要对行业有深刻的认知，知道行业演进规则，熟悉业务层的玩法，套路，和自己当前公司的定位。然后再从技术层面考虑怎样去尽可能的提供灵活的解决方案。\n当然如果作为行业的领导者，可能没有参照物，这个时候也可以通过和产品的探索+论证，预测出可能的改动点，当然可能不对。 ","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522239,"discussion_content":"理解到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624356318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251139,"user_name":"Xiao","can_delete":false,"product_type":"c1","uid":1179212,"ip_address":"","ucode":"71FFCCEEDE09E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/4c/46eb517a.jpg","comment_is_top":false,"comment_ctime":1601375855,"is_pvip":false,"replies":[{"id":91861,"content":"看什么级别的架构师，P9&#47;P10的架构师基本上都是行业业务专家，P7&#47;P8更多还是负责技术","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1601430946,"ip_address":"","comment_id":251139,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"在实际编码阶段，会采用相应设计模式来coding，比如策略、工厂、代理模式、模版方法模式等等，也会将DDD的思想运用到coding中来，尽量做到高内聚。项目架构设计上，也会运用DDD的六边形架构设计。个人觉得DDD的思想在复杂的业务背景下，能够带来意想不到的效果。\n还有，个人觉得架构师首先应该也是行业业务专家，在做架构设计的时候，能够对未来业务发展有一定的把控力。","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522239,"discussion_content":"理解到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624356318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215054,"user_name":"GEEKBANG_4123791","can_delete":false,"product_type":"c1","uid":1267924,"ip_address":"","ucode":"BCAE0B44F2999D","user_header":"https://static001.geekbang.org/account/avatar/00/13/58/d4/c1e67d7a.jpg","comment_is_top":false,"comment_ctime":1588898190,"is_pvip":false,"replies":[{"id":79723,"content":"设计模式是代码的可扩展性，架构的可扩展性和设计模式关系不大","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1588990168,"ip_address":"","comment_id":215054,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"设计模式要好好看看了","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506396,"discussion_content":"看什么级别的架构师，P9/P10的架构师基本上都是行业业务专家，P7/P8更多还是负责技术","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601430946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379351,"user_name":"鲁米","can_delete":false,"product_type":"c1","uid":1574008,"ip_address":"北京","ucode":"F8F23431723F25","user_header":"https://static001.geekbang.org/account/avatar/00/18/04/78/37b46ba6.jpg","comment_is_top":false,"comment_ctime":1691802003,"is_pvip":false,"replies":[{"id":138220,"content":"建议去看看《重构》原文，里面有更详细的说明，不会第3次就成屎山了，恰恰相反，很多屎山就是因为每次都想着设计模式、可扩展之类的，搞的代码很复杂，时间久了就成屎山了。","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1691889163,"ip_address":"广东","comment_id":379351,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"1 写 2 抄 3 重构原则。等待到 3 代码都 “shi山了”。","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494295,"discussion_content":"设计模式是代码的可扩展性，架构的可扩展性和设计模式关系不大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588990168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276594,"user_name":"RMB","can_delete":false,"product_type":"c1","uid":2272121,"ip_address":"","ucode":"5D1F54B93EB5D3","user_header":"https://static001.geekbang.org/account/avatar/00/22/ab/79/e293456e.jpg","comment_is_top":false,"comment_ctime":1612020815,"is_pvip":false,"replies":[{"id":100430,"content":"业务拆分粒度是关键，但大部分人业务设计的时候都倾向于预测更多业务发展和变化，因此导致更加复杂。","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1612103405,"ip_address":"","comment_id":276594,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"业务的复杂度决定架构设计的复杂度，有时把业务想的太复杂，反而让架构设计更臃肿，所以，其他暂且不说，对复杂业务的拆分能力以及把控业务的拆分粒度，非常重要！","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625556,"discussion_content":"建议去看看《重构》原文，里面有更详细的说明，不会第3次就成屎山了，恰恰相反，很多屎山就是因为每次都想着设计模式、可扩展之类的，搞的代码很复杂，时间久了就成屎山了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691889163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177868,"user_name":"两只狮子","can_delete":false,"product_type":"c1","uid":1845418,"ip_address":"","ucode":"7EE55A0413D8BF","user_header":"https://static001.geekbang.org/account/avatar/00/1c/28/aa/06c12256.jpg","comment_is_top":false,"comment_ctime":1581518368,"is_pvip":false,"replies":[{"id":69943,"content":"嗯，理论再牛，也要实践才能理解更深刻","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1582191795,"ip_address":"","comment_id":177868,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"【从0开始学架构】学习本节课程有共鸣。可扩展性总会提到，但是可扩展性应该怎么做，做到什么程度，有没有跑偏，在工作中往往就不是那么有明显的界限。按照老师的思路将可扩展性提炼为文中提到的预测变化和应对变化，我的感觉无比到位。文中提到的现象我在工作中总会遇到，也会想到很多办法去解决实际的问题，但是并没有真正的将这个经历理论化，我想着也许就是普通人跟大神的区别。今天学习后的收获，1、利用老师的理论指导工作；2、往后的工作中要多思考多提炼。","like_count":2},{"had_liked":false,"id":14815,"user_name":"艳姐","can_delete":false,"product_type":"c1","uid":1159298,"ip_address":"","ucode":"8A7DC647461CCC","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/82/013f0f1e.jpg","comment_is_top":false,"comment_ctime":1530673693,"is_pvip":false,"replies":[{"id":5029,"content":"例子是为了说明本质的，本篇在于讲解可扩展性为什么复杂这个问题，提炼了“预测变化”和“应对变化”两个复杂点，你可以结合自己的业务按照这种套路分析一下","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1530783813,"ip_address":"","comment_id":14815,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"设计模式是代码级别的，跟架构层面的不同。架构层面的扩展性例子只谈了数据库的扩展，能否再举个复杂点的例子便于理解。","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483574,"discussion_content":"嗯，理论再牛，也要实践才能理解更深刻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582191795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9006,"user_name":"日光倾城","can_delete":false,"product_type":"c1","uid":1120345,"ip_address":"","ucode":"E4329963F660DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/59/daeb0b6c.jpg","comment_is_top":false,"comment_ctime":1526568288,"is_pvip":false,"replies":[{"id":2725,"content":"企业级应用，互联网应用，可扩展性都很常见呢，你可以看看《淘宝产品十年事》，里面讲需求的各种变化","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526609480,"ip_address":"","comment_id":9006,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"前面讲高性能和高可用还觉得很贴近，这个可拓展性就觉得很不好把握了，可能我平常接触的需求比较简单，就只考虑怎么实现，没有考虑扩展性，有时候觉得需求太个性化没啥拓展可言，或者说抽不出来变化与不变，所以这方面的经验很欠缺。后面工作中还是要加强这方面的意识","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420143,"discussion_content":"例子是为了说明本质的，本篇在于讲解可扩展性为什么复杂这个问题，提炼了“预测变化”和“应对变化”两个复杂点，你可以结合自己的业务按照这种套路分析一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530783813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213502,"user_name":"liupan","can_delete":false,"product_type":"c1","uid":1612910,"ip_address":"","ucode":"C6C7C48BCCAE12","user_header":"https://static001.geekbang.org/account/avatar/00/18/9c/6e/01b4d5d2.jpg","comment_is_top":false,"comment_ctime":1588434981,"is_pvip":false,"replies":[{"id":79159,"content":"这个问题这里回复不了详细的哦，简单来说就是不同的设计模式是为了解决不同的变化","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1588463781,"ip_address":"","comment_id":213502,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"策略模式、代理模式、模板模式与装饰者模式的差异在哪？目前设计感觉这几种都沾边了，比如一个任务进来，先执行1，再执行2最后执行3;不同的场景1-2-3的实现可能相同可能不同，那么用多态来封装这些差异，相同的应用通用点，不同的个性化就增加类来实现，业务场景进来会进不同的策略，来区分是否执行下一步，都会先执行到代理类，再转到真正的实现类，所以感觉用了多个设计模式","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417939,"discussion_content":"企业级应用，互联网应用，可扩展性都很常见呢，你可以看看《淘宝产品十年事》，里面讲需求的各种变化","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1526609480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112896,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1562838700,"is_pvip":false,"replies":[{"id":41162,"content":"开发人员要有自己对业务的理解力","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1562901267,"ip_address":"","comment_id":112896,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"学习了老师的文章，又看了大家的评论，从技术上讲的都很多了，工作中我还发现一个可扩展性的难题，就是需求的沟通上，有的时候因为沟通导致的过度设计也很频繁，很多时候产品总是讲什么都想要，可是也不见得这些都需要做可扩展性的设计，也要对产品人员晓以利害，因此预估扩展性导致的开发复杂度也很重要了。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457947,"discussion_content":"开发人员要有自己对业务的理解力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562901267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91515,"user_name":"whhbbq","can_delete":false,"product_type":"c1","uid":1018494,"ip_address":"","ucode":"4A93F3E375CB44","user_header":"","comment_is_top":false,"comment_ctime":1557047227,"is_pvip":false,"replies":[{"id":33300,"content":"现在看到也不晚😂","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1557458230,"ip_address":"","comment_id":91515,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"【不能每个设计点都考虑可扩展性】\n关于这点，有点感触。一开始搭建系统的时候，使用的是mysql数据库，leader审核代码时，因为在代码中使用了一些mysql特有的语法而被要求修改（比如自增主键）。原因是系统后续可能会使用oracle来存储。当时就感觉这种可能性太小了。囧。。\n\n实践证明，这只是在给自己找麻烦。要是早看到华仔的文章就好了哈哈","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448929,"discussion_content":"现在看到也不晚😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557458230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14372,"user_name":"Carlos","can_delete":false,"product_type":"c1","uid":1143912,"ip_address":"","ucode":"687CD9CA3E7C9B","user_header":"https://static001.geekbang.org/account/avatar/00/11/74/68/3725546b.jpg","comment_is_top":false,"comment_ctime":1530338480,"is_pvip":false,"replies":[{"id":4892,"content":"有的业务逻辑，用规则引擎之类的实现，优化也可以做到很容易扩展","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1530520430,"ip_address":"","comment_id":14372,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"李老师专栏真是干货满满呀。我一般是上下班路上听，每篇文章听的不止一两遍。就可扩展性这片，结合老师讲解，我说说自己想法。我认为可扩展性架构里的变化应该分为两种，一种是新增，一种是优化。第一种是架构设计需要考虑的问题，比如系统增加新接入方式，不用改现有代码，只要新增一种实现就能满足，这是好的架构。不好的架构是无法通过新增新实现来完成，而是要修改现有代码逻辑，这样会带来两个问题，一是可能会破坏原有的功能，二是增加原有方式的代码复杂度，为维护增加难度。第二种优化可能主要是功能设计时需要考虑的，现实情况是，产品本身的某个使用习惯，在对客户进行演示交流时，不满足客户要求，他们更习惯另外一种方式，这种情况先是进行引导，引导不成，就要结合客户意愿，进行优化了，这种优化通常是基于原有逻辑的修改。新增实现就没有意义了。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448929,"discussion_content":"现在看到也不晚😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557458230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12447,"user_name":"Chang","can_delete":false,"product_type":"c1","uid":1125147,"ip_address":"","ucode":"CE2050F1BE00DB","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/1b/e88e33ba.jpg","comment_is_top":false,"comment_ctime":1528846223,"is_pvip":false,"replies":[{"id":4097,"content":"关键是平衡是一门艺术😂","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1528868546,"ip_address":"","comment_id":12447,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"设计不同算法，没办法做到极致！其实设计项目多了发现都是trade off","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419990,"discussion_content":"有的业务逻辑，用规则引擎之类的实现，优化也可以做到很容易扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530520430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8241,"user_name":"李志博","can_delete":false,"product_type":"c1","uid":1009109,"ip_address":"","ucode":"F3C72573B3C112","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/d5/88beb15a.jpg","comment_is_top":false,"comment_ctime":1526000296,"is_pvip":false,"replies":[{"id":2412,"content":"做好踩坑的心理准备😏","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526005573,"ip_address":"","comment_id":8241,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"正打算规则引擎剥离变化的部分","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419260,"discussion_content":"关键是平衡是一门艺术😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528868546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8209,"user_name":"aiwen","can_delete":false,"product_type":"c1","uid":1104346,"ip_address":"","ucode":"504F06CCC7B4FB","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/da/23a4a0c4.jpg","comment_is_top":false,"comment_ctime":1525967849,"is_pvip":false,"replies":[{"id":2404,"content":"有的，你可以详细看看目录","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526004987,"ip_address":"","comment_id":8209,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"讨论问题比较多，解决问题的方案却没提，后续会有相关的问题成熟的常用的解决方案么","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417644,"discussion_content":"做好踩坑的心理准备😏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526005573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177868,"user_name":"两只狮子","can_delete":false,"product_type":"c1","uid":1845418,"ip_address":"","ucode":"7EE55A0413D8BF","user_header":"https://static001.geekbang.org/account/avatar/00/1c/28/aa/06c12256.jpg","comment_is_top":false,"comment_ctime":1581518368,"is_pvip":false,"replies":[{"id":69943,"content":"嗯，理论再牛，也要实践才能理解更深刻","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1582191795,"ip_address":"","comment_id":177868,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"【从0开始学架构】学习本节课程有共鸣。可扩展性总会提到，但是可扩展性应该怎么做，做到什么程度，有没有跑偏，在工作中往往就不是那么有明显的界限。按照老师的思路将可扩展性提炼为文中提到的预测变化和应对变化，我的感觉无比到位。文中提到的现象我在工作中总会遇到，也会想到很多办法去解决实际的问题，但是并没有真正的将这个经历理论化，我想着也许就是普通人跟大神的区别。今天学习后的收获，1、利用老师的理论指导工作；2、往后的工作中要多思考多提炼。","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483574,"discussion_content":"嗯，理论再牛，也要实践才能理解更深刻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582191795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14815,"user_name":"艳姐","can_delete":false,"product_type":"c1","uid":1159298,"ip_address":"","ucode":"8A7DC647461CCC","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/82/013f0f1e.jpg","comment_is_top":false,"comment_ctime":1530673693,"is_pvip":false,"replies":[{"id":5029,"content":"例子是为了说明本质的，本篇在于讲解可扩展性为什么复杂这个问题，提炼了“预测变化”和“应对变化”两个复杂点，你可以结合自己的业务按照这种套路分析一下","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1530783813,"ip_address":"","comment_id":14815,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"设计模式是代码级别的，跟架构层面的不同。架构层面的扩展性例子只谈了数据库的扩展，能否再举个复杂点的例子便于理解。","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420143,"discussion_content":"例子是为了说明本质的，本篇在于讲解可扩展性为什么复杂这个问题，提炼了“预测变化”和“应对变化”两个复杂点，你可以结合自己的业务按照这种套路分析一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530783813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9006,"user_name":"日光倾城","can_delete":false,"product_type":"c1","uid":1120345,"ip_address":"","ucode":"E4329963F660DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/59/daeb0b6c.jpg","comment_is_top":false,"comment_ctime":1526568288,"is_pvip":false,"replies":[{"id":2725,"content":"企业级应用，互联网应用，可扩展性都很常见呢，你可以看看《淘宝产品十年事》，里面讲需求的各种变化","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526609480,"ip_address":"","comment_id":9006,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"前面讲高性能和高可用还觉得很贴近，这个可拓展性就觉得很不好把握了，可能我平常接触的需求比较简单，就只考虑怎么实现，没有考虑扩展性，有时候觉得需求太个性化没啥拓展可言，或者说抽不出来变化与不变，所以这方面的经验很欠缺。后面工作中还是要加强这方面的意识","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417939,"discussion_content":"企业级应用，互联网应用，可扩展性都很常见呢，你可以看看《淘宝产品十年事》，里面讲需求的各种变化","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1526609480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213502,"user_name":"liupan","can_delete":false,"product_type":"c1","uid":1612910,"ip_address":"","ucode":"C6C7C48BCCAE12","user_header":"https://static001.geekbang.org/account/avatar/00/18/9c/6e/01b4d5d2.jpg","comment_is_top":false,"comment_ctime":1588434981,"is_pvip":false,"replies":[{"id":79159,"content":"这个问题这里回复不了详细的哦，简单来说就是不同的设计模式是为了解决不同的变化","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1588463781,"ip_address":"","comment_id":213502,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"策略模式、代理模式、模板模式与装饰者模式的差异在哪？目前设计感觉这几种都沾边了，比如一个任务进来，先执行1，再执行2最后执行3;不同的场景1-2-3的实现可能相同可能不同，那么用多态来封装这些差异，相同的应用通用点，不同的个性化就增加类来实现，业务场景进来会进不同的策略，来区分是否执行下一步，都会先执行到代理类，再转到真正的实现类，所以感觉用了多个设计模式","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493799,"discussion_content":"这个问题这里回复不了详细的哦，简单来说就是不同的设计模式是为了解决不同的变化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588463781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112896,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1562838700,"is_pvip":false,"replies":[{"id":41162,"content":"开发人员要有自己对业务的理解力","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1562901267,"ip_address":"","comment_id":112896,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"学习了老师的文章，又看了大家的评论，从技术上讲的都很多了，工作中我还发现一个可扩展性的难题，就是需求的沟通上，有的时候因为沟通导致的过度设计也很频繁，很多时候产品总是讲什么都想要，可是也不见得这些都需要做可扩展性的设计，也要对产品人员晓以利害，因此预估扩展性导致的开发复杂度也很重要了。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493799,"discussion_content":"这个问题这里回复不了详细的哦，简单来说就是不同的设计模式是为了解决不同的变化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588463781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91515,"user_name":"whhbbq","can_delete":false,"product_type":"c1","uid":1018494,"ip_address":"","ucode":"4A93F3E375CB44","user_header":"","comment_is_top":false,"comment_ctime":1557047227,"is_pvip":false,"replies":[{"id":33300,"content":"现在看到也不晚😂","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1557458230,"ip_address":"","comment_id":91515,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"【不能每个设计点都考虑可扩展性】\n关于这点，有点感触。一开始搭建系统的时候，使用的是mysql数据库，leader审核代码时，因为在代码中使用了一些mysql特有的语法而被要求修改（比如自增主键）。原因是系统后续可能会使用oracle来存储。当时就感觉这种可能性太小了。囧。。\n\n实践证明，这只是在给自己找麻烦。要是早看到华仔的文章就好了哈哈","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457947,"discussion_content":"开发人员要有自己对业务的理解力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562901267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14372,"user_name":"Carlos","can_delete":false,"product_type":"c1","uid":1143912,"ip_address":"","ucode":"687CD9CA3E7C9B","user_header":"https://static001.geekbang.org/account/avatar/00/11/74/68/3725546b.jpg","comment_is_top":false,"comment_ctime":1530338480,"is_pvip":false,"replies":[{"id":4892,"content":"有的业务逻辑，用规则引擎之类的实现，优化也可以做到很容易扩展","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1530520430,"ip_address":"","comment_id":14372,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"李老师专栏真是干货满满呀。我一般是上下班路上听，每篇文章听的不止一两遍。就可扩展性这片，结合老师讲解，我说说自己想法。我认为可扩展性架构里的变化应该分为两种，一种是新增，一种是优化。第一种是架构设计需要考虑的问题，比如系统增加新接入方式，不用改现有代码，只要新增一种实现就能满足，这是好的架构。不好的架构是无法通过新增新实现来完成，而是要修改现有代码逻辑，这样会带来两个问题，一是可能会破坏原有的功能，二是增加原有方式的代码复杂度，为维护增加难度。第二种优化可能主要是功能设计时需要考虑的，现实情况是，产品本身的某个使用习惯，在对客户进行演示交流时，不满足客户要求，他们更习惯另外一种方式，这种情况先是进行引导，引导不成，就要结合客户意愿，进行优化了，这种优化通常是基于原有逻辑的修改。新增实现就没有意义了。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419990,"discussion_content":"有的业务逻辑，用规则引擎之类的实现，优化也可以做到很容易扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530520430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12447,"user_name":"Chang","can_delete":false,"product_type":"c1","uid":1125147,"ip_address":"","ucode":"CE2050F1BE00DB","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/1b/e88e33ba.jpg","comment_is_top":false,"comment_ctime":1528846223,"is_pvip":false,"replies":[{"id":4097,"content":"关键是平衡是一门艺术😂","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1528868546,"ip_address":"","comment_id":12447,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"设计不同算法，没办法做到极致！其实设计项目多了发现都是trade off","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419260,"discussion_content":"关键是平衡是一门艺术😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528868546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8241,"user_name":"李志博","can_delete":false,"product_type":"c1","uid":1009109,"ip_address":"","ucode":"F3C72573B3C112","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/d5/88beb15a.jpg","comment_is_top":false,"comment_ctime":1526000296,"is_pvip":false,"replies":[{"id":2412,"content":"做好踩坑的心理准备😏","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526005573,"ip_address":"","comment_id":8241,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"正打算规则引擎剥离变化的部分","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417644,"discussion_content":"做好踩坑的心理准备😏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526005573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8209,"user_name":"aiwen","can_delete":false,"product_type":"c1","uid":1104346,"ip_address":"","ucode":"504F06CCC7B4FB","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/da/23a4a0c4.jpg","comment_is_top":false,"comment_ctime":1525967849,"is_pvip":false,"replies":[{"id":2404,"content":"有的，你可以详细看看目录","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526004987,"ip_address":"","comment_id":8209,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"讨论问题比较多，解决问题的方案却没提，后续会有相关的问题成熟的常用的解决方案么","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417631,"discussion_content":"有的，你可以详细看看目录","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526004987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386947,"user_name":"Geek_1ab261","can_delete":false,"product_type":"c1","uid":2382460,"ip_address":"上海","ucode":"C205DC06BC8E22","user_header":"","comment_is_top":false,"comment_ctime":1705975697,"is_pvip":false,"replies":[{"id":141101,"content":"elastic是弹性的意思，指的是根据流量或者某些指标自动扩容和缩容，它的关键是要能够“缩”，而且是自动的；scalibility的意思是处理性能不够了可以通过增加处理资源来提升处理能力，而且一般都是手动的。\n\nelastic也是在容器和云原生出来后伴生的概念，目前基本只有用k8s这套才可以，而且也主要是在计算方面弹性，存储方面弹性很麻烦，涉及到数据迁移，一般像对象存储这种对实时性要求不高的可以做，如果是数据库的话，自动缩容据我了解没有人做。","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1706450591,"ip_address":"广东","comment_id":386947,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"都2024年了，我今天来补充一点，\n中文翻译成可扩展性，这个其实是有的歧义的，英文里，一般表示可扩展性有两个词Extensibility 和 Scalability。\nExtensibility ： 一般强调的是功能方面的扩展，比如如文中所说的新增加一个功能所能带来的影响。\n而Scalability ：一般强调的是非功能方面的容量上的扩展，比如随着系统的运行，用户的数量从100增长到10w，系统的扩展能力如何，当然也有人把Scalability 翻译成可伸缩性。而这个词又和Elastic有歧义了.......\n\n\n\n","like_count":0},{"had_liked":false,"id":382456,"user_name":"陈峰","can_delete":false,"product_type":"c1","uid":3721548,"ip_address":"江苏","ucode":"11F92938308C6C","user_header":"","comment_is_top":false,"comment_ctime":1697381837,"is_pvip":false,"replies":[{"id":139290,"content":"1. 独裁就是1个人决定，协商就是2个节点讨论，民主就是3个以上节点投票决定\n2. eureka不是做集群决策用的，是服务注册和发现","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1697443877,"ip_address":"广东","comment_id":382456,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"老师您好，我两个问题：\n1、协商式 是仅限于 两台机器吗，还是说 也可以是多台机器的 协商式。如果 多台机器 也可以 协商式，那 它和民主式 有本质的区别吗？（还是说，也是 各自投票多数取胜，仅仅算法不同呢）\n2、以前用过eureka（现在好像已经淘汰了），当然不是特别了解，那么 对于业务服务器来说，eureka server是不是就是 决策者，而 eureka client（业务服务器）就是 上报者，整体是一个 独裁式的架构呢？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636561,"discussion_content":"elastic是弹性的意思，指的是根据流量或者某些指标自动扩容和缩容，它的关键是要能够“缩”，而且是自动的；scalibility的意思是处理性能不够了可以通过增加处理资源来提升处理能力，而且一般都是手动的。\n\nelastic也是在容器和云原生出来后伴生的概念，目前基本只有用k8s这套才可以，而且也主要是在计算方面弹性，存储方面弹性很麻烦，涉及到数据迁移，一般像对象存储这种对实时性要求不高的可以做，如果是数据库的话，自动缩容据我了解没有人做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1706450591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377054,"user_name":"我不是码农","can_delete":false,"product_type":"c1","uid":1874999,"ip_address":"北京","ucode":"EB4BB711CC54B6","user_header":"https://static001.geekbang.org/account/avatar/00/1c/9c/37/253ea895.jpg","comment_is_top":false,"comment_ctime":1687872347,"is_pvip":false,"replies":[{"id":137432,"content":"有机会尝试用用 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1687937962,"ip_address":"广东","comment_id":377054,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"本节内容很实用","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629619,"discussion_content":"1. 独裁就是1个人决定，协商就是2个节点讨论，民主就是3个以上节点投票决定\n2. eureka不是做集群决策用的，是服务注册和发现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697443877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3721548,"avatar":"","nickname":"陈峰","note":"","ucode":"11F92938308C6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":629630,"discussion_content":"所以说，协商式 仅仅是两台机器的概念，而 多台机器 就是民主式 也算法更复杂了。协商式 有点类似于 民主式 只有两台机器的简化情况？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697449932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":629619,"ip_address":"江苏","group_id":0},"score":629630,"extra":""}]}]},{"had_liked":false,"id":375774,"user_name":"子夜","can_delete":false,"product_type":"c1","uid":2739408,"ip_address":"浙江","ucode":"D05AE3CD0631B7","user_header":"https://static001.geekbang.org/account/avatar/00/29/cc/d0/28aa9dbe.jpg","comment_is_top":false,"comment_ctime":1685956430,"is_pvip":false,"replies":[{"id":137176,"content":"1. 不用IDE吗？\n2. 枚举值要啥扩展性？字符串的定好规范，整型的划好范围就可以了","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1686211242,"ip_address":"广东","comment_id":375774,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"我想问个代码层面相关的，1.代码中会定义一些枚举，枚举值被各个地方引用，然后根据业务需要新加枚举值，改起来真的是麻烦，想过用策略模式重构，但是枚举值变更也不频繁，重构会比兼容更麻烦。2.另外系统中会有大量的枚举，也不能设计的时候都考虑扩展性吧","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622126,"discussion_content":"有机会尝试用用 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687937962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371968,"user_name":"Geek_1ae99c","can_delete":false,"product_type":"c1","uid":3051748,"ip_address":"浙江","ucode":"07457D1C3664DD","user_header":"","comment_is_top":false,"comment_ctime":1680572740,"is_pvip":false,"replies":[{"id":135802,"content":"道法术器就是方法论了","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1680772837,"ip_address":"广东","comment_id":371968,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"从 道  法 术的方向来说，要通过自己的技术经验 也就是术的阶段，整理归纳 到法的阶段，有具体的方法处理系统遇到的问题，然后再提升升华，完整的看事原则以及能力手段 则是道的阶段。到&quot;道&quot;的阶段基本就是架构师的能力标准，可以应对绝大多数的技术问题，以及提出较好的解决方案","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620485,"discussion_content":"1. 不用IDE吗？\n2. 枚举值要啥扩展性？字符串的定好规范，整型的划好范围就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686211242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361030,"user_name":"数据小白","can_delete":false,"product_type":"c1","uid":1445466,"ip_address":"广东","ucode":"85653228A7AF5E","user_header":"https://static001.geekbang.org/account/avatar/00/16/0e/5a/617f28bf.jpg","comment_is_top":false,"comment_ctime":1667125240,"is_pvip":false,"replies":[{"id":131391,"content":"看起来几十个类，其实比一个类实现要简单 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1667390415,"ip_address":"广东","comment_id":361030,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"曾经有一个系统权限复杂，每个角色，对应每种资源都有自己的鉴权规则，当初就是使用策略默模式进行了重构，之前一个类解决所有权限校验，重构之后，变成了几十个类，但是，后续新增角色，不论是开发还是测试，工作量都会减少。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612534,"discussion_content":"道法术器就是方法论了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680772837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357994,"user_name":"咖啡不加糖","can_delete":false,"product_type":"c1","uid":2400955,"ip_address":"广东","ucode":"4D6F1F80382C63","user_header":"https://static001.geekbang.org/account/avatar/00/24/a2/bb/cf822570.jpg","comment_is_top":false,"comment_ctime":1663822796,"is_pvip":false,"replies":[{"id":130875,"content":"这也是一种扩展策略","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1665886532,"ip_address":"广东","comment_id":357994,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"使用策略模式来实现同一个功能，不同业务下的处理方案，避免了繁杂的ifelse逻辑","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590558,"discussion_content":"这也是一种扩展策略","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665886532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356588,"user_name":"不利于团结的话不要说","can_delete":false,"product_type":"c1","uid":1009329,"ip_address":"日本","ucode":"F807829A146624","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/b1/40a25f84.jpg","comment_is_top":false,"comment_ctime":1662443830,"is_pvip":false,"replies":[{"id":129852,"content":"Drools","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1662609827,"ip_address":"日本","comment_id":356588,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"规则引擎 见过很多次，还有状态机。 这两个名字，有没有对应的示例，看看能不能很好理解这两个模式","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586922,"discussion_content":"Drools","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662609827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"日本","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352171,"user_name":"梵","can_delete":false,"product_type":"c1","uid":1938143,"ip_address":"","ucode":"D59C9077F29BB0","user_header":"","comment_is_top":false,"comment_ctime":1658420485,"is_pvip":false,"replies":[{"id":128205,"content":"正解","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1658719603,"ip_address":"","comment_id":352171,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"架构设计出发点也是从实际出发，没必要为了重构而重构","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581309,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658719603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347312,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1653916544,"is_pvip":false,"replies":[{"id":126655,"content":"可以看看《重构》书中更详细的描述和解读","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1653980414,"ip_address":"","comment_id":347312,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"预测的成本是预测得准不准，预测什么时候到来。1写2抄3重写，成本较小。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574334,"discussion_content":"可以看看《重构》书中更详细的描述和解读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653980414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386947,"user_name":"Geek_1ab261","can_delete":false,"product_type":"c1","uid":2382460,"ip_address":"上海","ucode":"C205DC06BC8E22","user_header":"","comment_is_top":false,"comment_ctime":1705975697,"is_pvip":false,"replies":[{"id":141101,"content":"elastic是弹性的意思，指的是根据流量或者某些指标自动扩容和缩容，它的关键是要能够“缩”，而且是自动的；scalibility的意思是处理性能不够了可以通过增加处理资源来提升处理能力，而且一般都是手动的。\n\nelastic也是在容器和云原生出来后伴生的概念，目前基本只有用k8s这套才可以，而且也主要是在计算方面弹性，存储方面弹性很麻烦，涉及到数据迁移，一般像对象存储这种对实时性要求不高的可以做，如果是数据库的话，自动缩容据我了解没有人做。","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1706450591,"ip_address":"广东","comment_id":386947,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"都2024年了，我今天来补充一点，\n中文翻译成可扩展性，这个其实是有的歧义的，英文里，一般表示可扩展性有两个词Extensibility 和 Scalability。\nExtensibility ： 一般强调的是功能方面的扩展，比如如文中所说的新增加一个功能所能带来的影响。\n而Scalability ：一般强调的是非功能方面的容量上的扩展，比如随着系统的运行，用户的数量从100增长到10w，系统的扩展能力如何，当然也有人把Scalability 翻译成可伸缩性。而这个词又和Elastic有歧义了.......\n\n\n\n","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636561,"discussion_content":"elastic是弹性的意思，指的是根据流量或者某些指标自动扩容和缩容，它的关键是要能够“缩”，而且是自动的；scalibility的意思是处理性能不够了可以通过增加处理资源来提升处理能力，而且一般都是手动的。\n\nelastic也是在容器和云原生出来后伴生的概念，目前基本只有用k8s这套才可以，而且也主要是在计算方面弹性，存储方面弹性很麻烦，涉及到数据迁移，一般像对象存储这种对实时性要求不高的可以做，如果是数据库的话，自动缩容据我了解没有人做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1706450591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382456,"user_name":"陈峰","can_delete":false,"product_type":"c1","uid":3721548,"ip_address":"江苏","ucode":"11F92938308C6C","user_header":"","comment_is_top":false,"comment_ctime":1697381837,"is_pvip":false,"replies":[{"id":139290,"content":"1. 独裁就是1个人决定，协商就是2个节点讨论，民主就是3个以上节点投票决定\n2. eureka不是做集群决策用的，是服务注册和发现","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1697443877,"ip_address":"广东","comment_id":382456,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"老师您好，我两个问题：\n1、协商式 是仅限于 两台机器吗，还是说 也可以是多台机器的 协商式。如果 多台机器 也可以 协商式，那 它和民主式 有本质的区别吗？（还是说，也是 各自投票多数取胜，仅仅算法不同呢）\n2、以前用过eureka（现在好像已经淘汰了），当然不是特别了解，那么 对于业务服务器来说，eureka server是不是就是 决策者，而 eureka client（业务服务器）就是 上报者，整体是一个 独裁式的架构呢？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629619,"discussion_content":"1. 独裁就是1个人决定，协商就是2个节点讨论，民主就是3个以上节点投票决定\n2. eureka不是做集群决策用的，是服务注册和发现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697443877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3721548,"avatar":"","nickname":"陈峰","note":"","ucode":"11F92938308C6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":629630,"discussion_content":"所以说，协商式 仅仅是两台机器的概念，而 多台机器 就是民主式 也算法更复杂了。协商式 有点类似于 民主式 只有两台机器的简化情况？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697449932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":629619,"ip_address":"江苏","group_id":0},"score":629630,"extra":""}]}]},{"had_liked":false,"id":377054,"user_name":"我不是码农","can_delete":false,"product_type":"c1","uid":1874999,"ip_address":"北京","ucode":"EB4BB711CC54B6","user_header":"https://static001.geekbang.org/account/avatar/00/1c/9c/37/253ea895.jpg","comment_is_top":false,"comment_ctime":1687872347,"is_pvip":false,"replies":[{"id":137432,"content":"有机会尝试用用 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1687937962,"ip_address":"广东","comment_id":377054,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"本节内容很实用","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622126,"discussion_content":"有机会尝试用用 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687937962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375774,"user_name":"子夜","can_delete":false,"product_type":"c1","uid":2739408,"ip_address":"浙江","ucode":"D05AE3CD0631B7","user_header":"https://static001.geekbang.org/account/avatar/00/29/cc/d0/28aa9dbe.jpg","comment_is_top":false,"comment_ctime":1685956430,"is_pvip":false,"replies":[{"id":137176,"content":"1. 不用IDE吗？\n2. 枚举值要啥扩展性？字符串的定好规范，整型的划好范围就可以了","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1686211242,"ip_address":"广东","comment_id":375774,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"我想问个代码层面相关的，1.代码中会定义一些枚举，枚举值被各个地方引用，然后根据业务需要新加枚举值，改起来真的是麻烦，想过用策略模式重构，但是枚举值变更也不频繁，重构会比兼容更麻烦。2.另外系统中会有大量的枚举，也不能设计的时候都考虑扩展性吧","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620485,"discussion_content":"1. 不用IDE吗？\n2. 枚举值要啥扩展性？字符串的定好规范，整型的划好范围就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686211242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371968,"user_name":"Geek_1ae99c","can_delete":false,"product_type":"c1","uid":3051748,"ip_address":"浙江","ucode":"07457D1C3664DD","user_header":"","comment_is_top":false,"comment_ctime":1680572740,"is_pvip":false,"replies":[{"id":135802,"content":"道法术器就是方法论了","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1680772837,"ip_address":"广东","comment_id":371968,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"从 道  法 术的方向来说，要通过自己的技术经验 也就是术的阶段，整理归纳 到法的阶段，有具体的方法处理系统遇到的问题，然后再提升升华，完整的看事原则以及能力手段 则是道的阶段。到&quot;道&quot;的阶段基本就是架构师的能力标准，可以应对绝大多数的技术问题，以及提出较好的解决方案","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612534,"discussion_content":"道法术器就是方法论了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680772837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361030,"user_name":"数据小白","can_delete":false,"product_type":"c1","uid":1445466,"ip_address":"广东","ucode":"85653228A7AF5E","user_header":"https://static001.geekbang.org/account/avatar/00/16/0e/5a/617f28bf.jpg","comment_is_top":false,"comment_ctime":1667125240,"is_pvip":false,"replies":[{"id":131391,"content":"看起来几十个类，其实比一个类实现要简单 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1667390415,"ip_address":"广东","comment_id":361030,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"曾经有一个系统权限复杂，每个角色，对应每种资源都有自己的鉴权规则，当初就是使用策略默模式进行了重构，之前一个类解决所有权限校验，重构之后，变成了几十个类，但是，后续新增角色，不论是开发还是测试，工作量都会减少。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592408,"discussion_content":"看起来几十个类，其实比一个类实现要简单 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667390416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357994,"user_name":"咖啡不加糖","can_delete":false,"product_type":"c1","uid":2400955,"ip_address":"广东","ucode":"4D6F1F80382C63","user_header":"https://static001.geekbang.org/account/avatar/00/24/a2/bb/cf822570.jpg","comment_is_top":false,"comment_ctime":1663822796,"is_pvip":false,"replies":[{"id":130875,"content":"这也是一种扩展策略","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1665886532,"ip_address":"广东","comment_id":357994,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"使用策略模式来实现同一个功能，不同业务下的处理方案，避免了繁杂的ifelse逻辑","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592408,"discussion_content":"看起来几十个类，其实比一个类实现要简单 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667390416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356588,"user_name":"不利于团结的话不要说","can_delete":false,"product_type":"c1","uid":1009329,"ip_address":"日本","ucode":"F807829A146624","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/b1/40a25f84.jpg","comment_is_top":false,"comment_ctime":1662443830,"is_pvip":false,"replies":[{"id":129852,"content":"Drools","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1662609827,"ip_address":"日本","comment_id":356588,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"规则引擎 见过很多次，还有状态机。 这两个名字，有没有对应的示例，看看能不能很好理解这两个模式","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590558,"discussion_content":"这也是一种扩展策略","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665886532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352171,"user_name":"梵","can_delete":false,"product_type":"c1","uid":1938143,"ip_address":"","ucode":"D59C9077F29BB0","user_header":"","comment_is_top":false,"comment_ctime":1658420485,"is_pvip":false,"replies":[{"id":128205,"content":"正解","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1658719603,"ip_address":"","comment_id":352171,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"架构设计出发点也是从实际出发，没必要为了重构而重构","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586922,"discussion_content":"Drools","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662609827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"日本","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347312,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1653916544,"is_pvip":false,"replies":[{"id":126655,"content":"可以看看《重构》书中更详细的描述和解读","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1653980414,"ip_address":"","comment_id":347312,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"预测的成本是预测得准不准，预测什么时候到来。1写2抄3重写，成本较小。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581309,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658719603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335862,"user_name":"地平线","can_delete":false,"product_type":"c1","uid":1952394,"ip_address":"","ucode":"52213F99782147","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ca/8a/8f64cf86.jpg","comment_is_top":false,"comment_ctime":1645727819,"is_pvip":false,"replies":[{"id":122735,"content":"可扩展性方面很容易过度设计，尤其是大家都接受了“设计模式”的熏陶 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1645754855,"ip_address":"","comment_id":335862,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"之前老是过度设计，思考非常多架构设计，顾虑太多，预测太多，导致很多时候根本出不来一个方案。说明之前取舍做的不到位，样样都要是不可能的。","like_count":0},{"had_liked":false,"id":333977,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1644650071,"is_pvip":false,"replies":[{"id":122116,"content":"很多人都想展现自己的牛逼 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1644893611,"ip_address":"","comment_id":333977,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"事不过三 原则挺好\n很多人怕就怕一架构就想的很宏伟\n没有考虑这个业务要的是速度 因为市场上可能早几天这个业务就被存活下来了 抢到了市场 才会有更多的需求\n才有重构的意义\n而不是自嗨","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553153,"discussion_content":"可扩展性方面很容易过度设计，尤其是大家都接受了“设计模式”的熏陶 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645754855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328039,"user_name":"lliill","can_delete":false,"product_type":"c1","uid":1179412,"ip_address":"","ucode":"E01B1377D3EE57","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/14/4d5dfbfb.jpg","comment_is_top":false,"comment_ctime":1640498094,"is_pvip":false,"replies":[{"id":119586,"content":"学习了 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1640686465,"ip_address":"","comment_id":328039,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"VUE中使用模版以及组件模式进行开发开发，JAVA中分层开发、封装常用工具类，都可以做到可扩展性。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542231,"discussion_content":"学习了 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640686465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309906,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1630390678,"is_pvip":false,"replies":[{"id":112305,"content":"这个算是最简单的设计模式了 ：）","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1630455519,"ip_address":"","comment_id":309906,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"最多的使用可能对于自己来说就是工厂模式了，然后后续有新需要来了，只需要增加一个类对应的方法就可以了，之前的代码不需要变动。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526060,"discussion_content":"这个算是最简单的设计模式了 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630455519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307799,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1629259781,"is_pvip":true,"replies":[{"id":111534,"content":"一看就是老码农了 ：）","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1629346132,"ip_address":"","comment_id":307799,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"说到这个我可就不困了， 建造者 单例 责任链 适配器 ","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525291,"discussion_content":"一看就是老码农了 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629346132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305232,"user_name":"呆呆狗的兽","can_delete":false,"product_type":"c1","uid":2404924,"ip_address":"","ucode":"B7D445F3BE2E4C","user_header":"https://static001.geekbang.org/account/avatar/00/24/b2/3c/22028324.jpg","comment_is_top":false,"comment_ctime":1627888225,"is_pvip":false,"replies":[{"id":110474,"content":"重视不代表能做好，设计模式几乎每个技术人员都学过，讨论的时候经常也会说可扩展设计怎么做，但是不一定做得好","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1627983249,"ip_address":"","comment_id":305232,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"&quot;几乎所有的技术人员对于可扩展性都特别重视&quot;\n这个在很多人身上根本看不到......","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524327,"discussion_content":"重视不代表能做好，设计模式几乎每个技术人员都学过，讨论的时候经常也会说可扩展设计怎么做，但是不一定做得好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627983249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296500,"user_name":"小鬼爱风雪","can_delete":false,"product_type":"c1","uid":2646199,"ip_address":"","ucode":"FF72E39E557C6F","user_header":"https://static001.geekbang.org/account/avatar/00/28/60/b7/4a665c73.jpg","comment_is_top":false,"comment_ctime":1623022229,"is_pvip":false,"replies":[{"id":107645,"content":"对，这两种模式是应用比较多的封装方法","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1623028606,"ip_address":"","comment_id":296500,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"对于多数据源，做过一定的扩展性采用适配器模式来做的，新的数据来后，只去实现新的接口类。还做过类似于策略模式的设计来实现不同用户信息查询的功能。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521464,"discussion_content":"对，这两种模式是应用比较多的封装方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623028606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288875,"user_name":"包子","can_delete":false,"product_type":"c1","uid":1503408,"ip_address":"","ucode":"3050ADC0DC827A","user_header":"https://static001.geekbang.org/account/avatar/00/16/f0/b0/f6a218c6.jpg","comment_is_top":false,"comment_ctime":1618744003,"is_pvip":false,"replies":[{"id":104866,"content":"是的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1618794882,"ip_address":"","comment_id":288875,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"不光是扩展功能，好的分工也需要基于好的封装","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518758,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618794882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287111,"user_name":"WESTWALL","can_delete":false,"product_type":"c1","uid":1434423,"ip_address":"","ucode":"295A030F9D3BF4","user_header":"https://static001.geekbang.org/account/avatar/00/15/e3/37/c132802f.jpg","comment_is_top":false,"comment_ctime":1617780251,"is_pvip":false,"replies":[{"id":104249,"content":"这个上网搜索就可以了","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1617793889,"ip_address":"","comment_id":287111,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"老师，我对规则引擎比较感兴趣。能够推荐一些相关的框架或者参考资料？谢谢您~","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518197,"discussion_content":"这个上网搜索就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617793889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281909,"user_name":"MasterSkills","can_delete":false,"product_type":"c1","uid":1691106,"ip_address":"","ucode":"61CD6A433417F0","user_header":"https://static001.geekbang.org/account/avatar/00/19/cd/e2/1e36d797.jpg","comment_is_top":false,"comment_ctime":1614943343,"is_pvip":false,"replies":[{"id":102332,"content":"关键是“职责”这个粒度又怎么界定呢？\n“交易”是职责么？那么交易里面的“订单”是不是职责呢？订单里面的“退货”是不是也是职责呢？\n\n你会发现，最后还是要人来根据一些规则来判断和取舍。","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1614950751,"ip_address":"","comment_id":281909,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"奉行“单一职责”原则，小到几行代码大到各个子系统，分好块，管理维护好各个块之间的关系，实现不同粒度的可插拔。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518197,"discussion_content":"这个上网搜索就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617793889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335862,"user_name":"地平线","can_delete":false,"product_type":"c1","uid":1952394,"ip_address":"","ucode":"52213F99782147","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ca/8a/8f64cf86.jpg","comment_is_top":false,"comment_ctime":1645727819,"is_pvip":false,"replies":[{"id":122735,"content":"可扩展性方面很容易过度设计，尤其是大家都接受了“设计模式”的熏陶 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1645754855,"ip_address":"","comment_id":335862,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"之前老是过度设计，思考非常多架构设计，顾虑太多，预测太多，导致很多时候根本出不来一个方案。说明之前取舍做的不到位，样样都要是不可能的。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553153,"discussion_content":"可扩展性方面很容易过度设计，尤其是大家都接受了“设计模式”的熏陶 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645754855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333977,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1644650071,"is_pvip":false,"replies":[{"id":122116,"content":"很多人都想展现自己的牛逼 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1644893611,"ip_address":"","comment_id":333977,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"事不过三 原则挺好\n很多人怕就怕一架构就想的很宏伟\n没有考虑这个业务要的是速度 因为市场上可能早几天这个业务就被存活下来了 抢到了市场 才会有更多的需求\n才有重构的意义\n而不是自嗨","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551072,"discussion_content":"很多人都想展现自己的牛逼 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644893612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328039,"user_name":"lliill","can_delete":false,"product_type":"c1","uid":1179412,"ip_address":"","ucode":"E01B1377D3EE57","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/14/4d5dfbfb.jpg","comment_is_top":false,"comment_ctime":1640498094,"is_pvip":false,"replies":[{"id":119586,"content":"学习了 ：）","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1640686465,"ip_address":"","comment_id":328039,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"VUE中使用模版以及组件模式进行开发开发，JAVA中分层开发、封装常用工具类，都可以做到可扩展性。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551072,"discussion_content":"很多人都想展现自己的牛逼 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644893612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309906,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1630390678,"is_pvip":false,"replies":[{"id":112305,"content":"这个算是最简单的设计模式了 ：）","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1630455519,"ip_address":"","comment_id":309906,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"最多的使用可能对于自己来说就是工厂模式了，然后后续有新需要来了，只需要增加一个类对应的方法就可以了，之前的代码不需要变动。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542231,"discussion_content":"学习了 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640686465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307799,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1629259781,"is_pvip":true,"replies":[{"id":111534,"content":"一看就是老码农了 ：）","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1629346132,"ip_address":"","comment_id":307799,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"说到这个我可就不困了， 建造者 单例 责任链 适配器 ","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526060,"discussion_content":"这个算是最简单的设计模式了 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630455519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305232,"user_name":"呆呆狗的兽","can_delete":false,"product_type":"c1","uid":2404924,"ip_address":"","ucode":"B7D445F3BE2E4C","user_header":"https://static001.geekbang.org/account/avatar/00/24/b2/3c/22028324.jpg","comment_is_top":false,"comment_ctime":1627888225,"is_pvip":false,"replies":[{"id":110474,"content":"重视不代表能做好，设计模式几乎每个技术人员都学过，讨论的时候经常也会说可扩展设计怎么做，但是不一定做得好","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1627983249,"ip_address":"","comment_id":305232,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"&quot;几乎所有的技术人员对于可扩展性都特别重视&quot;\n这个在很多人身上根本看不到......","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525291,"discussion_content":"一看就是老码农了 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629346132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296500,"user_name":"小鬼爱风雪","can_delete":false,"product_type":"c1","uid":2646199,"ip_address":"","ucode":"FF72E39E557C6F","user_header":"https://static001.geekbang.org/account/avatar/00/28/60/b7/4a665c73.jpg","comment_is_top":false,"comment_ctime":1623022229,"is_pvip":false,"replies":[{"id":107645,"content":"对，这两种模式是应用比较多的封装方法","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1623028606,"ip_address":"","comment_id":296500,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"对于多数据源，做过一定的扩展性采用适配器模式来做的，新的数据来后，只去实现新的接口类。还做过类似于策略模式的设计来实现不同用户信息查询的功能。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524327,"discussion_content":"重视不代表能做好，设计模式几乎每个技术人员都学过，讨论的时候经常也会说可扩展设计怎么做，但是不一定做得好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627983249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288875,"user_name":"包子","can_delete":false,"product_type":"c1","uid":1503408,"ip_address":"","ucode":"3050ADC0DC827A","user_header":"https://static001.geekbang.org/account/avatar/00/16/f0/b0/f6a218c6.jpg","comment_is_top":false,"comment_ctime":1618744003,"is_pvip":false,"replies":[{"id":104866,"content":"是的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1618794882,"ip_address":"","comment_id":288875,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"不光是扩展功能，好的分工也需要基于好的封装","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521464,"discussion_content":"对，这两种模式是应用比较多的封装方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623028606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287111,"user_name":"WESTWALL","can_delete":false,"product_type":"c1","uid":1434423,"ip_address":"","ucode":"295A030F9D3BF4","user_header":"https://static001.geekbang.org/account/avatar/00/15/e3/37/c132802f.jpg","comment_is_top":false,"comment_ctime":1617780251,"is_pvip":false,"replies":[{"id":104249,"content":"这个上网搜索就可以了","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1617793889,"ip_address":"","comment_id":287111,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"老师，我对规则引擎比较感兴趣。能够推荐一些相关的框架或者参考资料？谢谢您~","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518758,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618794882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281909,"user_name":"MasterSkills","can_delete":false,"product_type":"c1","uid":1691106,"ip_address":"","ucode":"61CD6A433417F0","user_header":"https://static001.geekbang.org/account/avatar/00/19/cd/e2/1e36d797.jpg","comment_is_top":false,"comment_ctime":1614943343,"is_pvip":false,"replies":[{"id":102332,"content":"关键是“职责”这个粒度又怎么界定呢？\n“交易”是职责么？那么交易里面的“订单”是不是职责呢？订单里面的“退货”是不是也是职责呢？\n\n你会发现，最后还是要人来根据一些规则来判断和取舍。","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1614950751,"ip_address":"","comment_id":281909,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"奉行“单一职责”原则，小到几行代码大到各个子系统，分好块，管理维护好各个块之间的关系，实现不同粒度的可插拔。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516548,"discussion_content":"关键是“职责”这个粒度又怎么界定呢？\n“交易”是职责么？那么交易里面的“订单”是不是职责呢？订单里面的“退货”是不是也是职责呢？\n\n你会发现，最后还是要人来根据一些规则来判断和取舍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614950751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279138,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1613634496,"is_pvip":false,"replies":[{"id":101436,"content":"是的，可扩展性很容易因为滥用设计模式导致过度设计，关于什么时候该用设计模式来优化代码，你可以参考“三次原则”，英文是Rule of three，由Matin大叔在《重构》一书中提到。\n\nIt states that you are allowed to copy and paste the code once, but that when the same code is replicated three times, it should be extracted into a new procedure. The rule was introduced by Martin Fowler in his text &quot;Refactoring&quot; and attributed to Don Roberts.","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1613645422,"ip_address":"","comment_id":279138,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"可扩展性分为：预测可扩展性和应对可扩展性，前者主要是未来的业务方向和应用环境的变化；后者也可以粗略分为2个维度吧，粗粒度一点的架构设计，主要是分层，隔离不确定的业务，具体到开发，我觉得更多是遵循开闭原则、面向接口编程，23种设计模式不建议一上来就用，除非某种模式真的很适配这个业务场景，不然真的会是的其反。可扩展性这个事情，只能走一步看一步，很难走一步看全局，过度设计真的很可怕。\n我在日常开发过程中基本就是按照大的方向分层，随着产品迭代慢慢把稳定下来的功能集中到一起；具体到编码的话，主要是设计模式和设计原则，虽然23种设计模式用的不多，但是我觉得关键是设计原则这些。理解了设计原则才能慢慢理解设计模式想解决什么问题，才能用好设计模式，甚至在23种基础设计模式的基础之上结合出最适合业务场景的业务设计模式","like_count":0},{"had_liked":false,"id":255522,"user_name":"flyCoder","can_delete":false,"product_type":"c1","uid":1074897,"ip_address":"","ucode":"82FB7B60775978","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/d1/8664c464.jpg","comment_is_top":false,"comment_ctime":1603364452,"is_pvip":false,"replies":[{"id":93164,"content":"是的，不可能设计一个方案无论需求和业务如何变化都能自如扩展","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1603422258,"ip_address":"","comment_id":255522,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"看了栏主的面向对象葵花宝典，从开发的视角来说,抽象接口、使用组合会一定程度提高接口的扩展性，但是没有彻底的完全可扩展，毕竟需求的变化是无限的，开发成本是有限的，我理解扩展性应该是在逐步的重构过程中慢慢完善和丰富的。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507742,"discussion_content":"是的，不可能设计一个方案无论需求和业务如何变化都能自如扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603422258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251869,"user_name":"KAITO","can_delete":false,"product_type":"c1","uid":1248288,"ip_address":"","ucode":"2B3C599FDFC373","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/20/34bf33ff.jpg","comment_is_top":false,"comment_ctime":1601925867,"is_pvip":false,"replies":[{"id":92104,"content":"算代码层面的扩展","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1602082736,"ip_address":"","comment_id":251869,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"ORM算不算可扩展性呢","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507742,"discussion_content":"是的，不可能设计一个方案无论需求和业务如何变化都能自如扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603422258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249034,"user_name":"杨琳","can_delete":false,"product_type":"c1","uid":2060855,"ip_address":"","ucode":"CB9F4550582CB9","user_header":"","comment_is_top":false,"comment_ctime":1600410216,"is_pvip":false,"replies":[{"id":91875,"content":"是的，过度会设计坑所有人","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1601431913,"ip_address":"","comment_id":249034,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"可扩展性的解决就是对变化进行封装，分离稳定层和变化层。不论是接口还是抽象，都只是为了将变化与不变分离，将业务关注在变化层。但由于每一个点都有可能变化，所以系统不断分离抽象，设计不断膨胀，最终导致系统难以维护。\n所以，软件设计之初，明确软件的生命周期和软件的适用范围极为重要，这是对客户负责，也是对自己负责。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506641,"discussion_content":"算代码层面的扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602082736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193601,"user_name":"Geek_42a7e5","can_delete":false,"product_type":"c1","uid":1613336,"ip_address":"","ucode":"8082C0A6563717","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/x9U78tCoyfhZDavF2sS7Gia34FYoXQ1NjeENZZLZEKNq3oBmCAILUCezVibiajHOIJM8Y2DdKysp41icquopleMDYw/132","comment_is_top":false,"comment_ctime":1584932327,"is_pvip":false,"replies":[{"id":74885,"content":"肯定的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1585540362,"ip_address":"","comment_id":193601,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"我觉得能够把可扩展性考虑得很周全的话，需要在某个业务领域有比较深的了解和经验。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505804,"discussion_content":"是的，过度会设计坑所有人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601431913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178016,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/d1ab239e.jpg","comment_is_top":false,"comment_ctime":1581570714,"is_pvip":false,"replies":[{"id":69942,"content":"所有设计模式都可以这么说的😄","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1582191755,"ip_address":"","comment_id":178016,"utype":1}],"discussion_count":2,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"装饰器模式，我的理解是继承加组合。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488598,"discussion_content":"肯定的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585540362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142900,"user_name":"chayufan","can_delete":false,"product_type":"c1","uid":1100535,"ip_address":"","ucode":"05C2A488825CA1","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/f7/cfe57114.jpg","comment_is_top":false,"comment_ctime":1571578089,"is_pvip":false,"replies":[{"id":55449,"content":"那是代码层面的，架构层面依赖翻转会更复杂","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1571747261,"ip_address":"","comment_id":142900,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"应对变化中的形式2可以通过依赖翻转，来调整依赖关系哦","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483638,"discussion_content":"所有设计模式都可以这么说的😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582191755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/d1ab239e.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331458,"discussion_content":"哈哈，回复扎心。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606878205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61472,"user_name":"郭和平","can_delete":false,"product_type":"c1","uid":1361451,"ip_address":"","ucode":"B871199C35EA04","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ5sZvgWg1pBVt5doiaWbjBg4NicJkfpfv8p3PlBwHPuWQVo4qU4t4Kibr8Jhmpvckon4QfOH8SeDGaw/132","comment_is_top":false,"comment_ctime":1547705080,"is_pvip":false,"replies":[{"id":21890,"content":"没有完美的设计方式，你提到的根据配置热加载，整体war包都可以，如果为了运维方便，不同的协议隔离到不同的系统会比较方便","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1547774368,"ip_address":"","comment_id":61472,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"小白新手问题见谅，也不知道提的对不对 ：想请问下老师可拓展性多带来的运维问题有什么好的思路吗？比如接入XML、JSON、ProtocolBuffer 三种接入方式为例，原本可以用一个整体war包运行，随着接入方式变多，应该不能这样了吧？想把每种接入方式单独抽离出来，或者说用一个配置文件加载指定版本的可变部分，解决办法目前看到的有热加载的方式，但是因为可变部分对稳定部分存在依赖，要是有多重依赖怕有问题？还有可以利用rpc通信可变和不可变部分的方式这种方式呢？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471315,"discussion_content":"那是代码层面的，架构层面依赖翻转会更复杂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571747261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35991,"user_name":"Mr.Lee","can_delete":false,"product_type":"c1","uid":1240758,"ip_address":"","ucode":"F732D98D262703","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/b6/f99db3e7.jpg","comment_is_top":false,"comment_ctime":1540885131,"is_pvip":false,"replies":[{"id":12823,"content":"基本正确，关于设计模式的解读，可以参考我的第一本书《面向对象葵花宝典》","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1540909893,"ip_address":"","comment_id":35991,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"大佬，楼上所说的设计模式的核心就是，封装变化，隔离可变性\n是说将不变的封装起来，做成“抽象层”，将变化的单独隔离出来，做成“实现层”。我理解的对吗？还请大佬赐教。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436881,"discussion_content":"没有完美的设计方式，你提到的根据配置热加载，整体war包都可以，如果为了运维方便，不同的协议隔离到不同的系统会比较方便","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547774368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23384,"user_name":"阿毛","can_delete":false,"product_type":"c1","uid":1221386,"ip_address":"","ucode":"356F1FF2B56372","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/0a/0f681189.jpg","comment_is_top":false,"comment_ctime":1536320204,"is_pvip":false,"replies":[{"id":8493,"content":"极客时间会建群沟通","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1536388958,"ip_address":"","comment_id":23384,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"每次看完都会逐条查看大家的留言，每个人都结合自己的实践给出了思考和总结，但是交流还是受限。大神是不是拉个微信群方便交流？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423540,"discussion_content":"极客时间会建群沟通","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536388958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279138,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1613634496,"is_pvip":false,"replies":[{"id":101436,"content":"是的，可扩展性很容易因为滥用设计模式导致过度设计，关于什么时候该用设计模式来优化代码，你可以参考“三次原则”，英文是Rule of three，由Matin大叔在《重构》一书中提到。\n\nIt states that you are allowed to copy and paste the code once, but that when the same code is replicated three times, it should be extracted into a new procedure. The rule was introduced by Martin Fowler in his text &quot;Refactoring&quot; and attributed to Don Roberts.","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1613645422,"ip_address":"","comment_id":279138,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"可扩展性分为：预测可扩展性和应对可扩展性，前者主要是未来的业务方向和应用环境的变化；后者也可以粗略分为2个维度吧，粗粒度一点的架构设计，主要是分层，隔离不确定的业务，具体到开发，我觉得更多是遵循开闭原则、面向接口编程，23种设计模式不建议一上来就用，除非某种模式真的很适配这个业务场景，不然真的会是的其反。可扩展性这个事情，只能走一步看一步，很难走一步看全局，过度设计真的很可怕。\n我在日常开发过程中基本就是按照大的方向分层，随着产品迭代慢慢把稳定下来的功能集中到一起；具体到编码的话，主要是设计模式和设计原则，虽然23种设计模式用的不多，但是我觉得关键是设计原则这些。理解了设计原则才能慢慢理解设计模式想解决什么问题，才能用好设计模式，甚至在23种基础设计模式的基础之上结合出最适合业务场景的业务设计模式","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515634,"discussion_content":"是的，可扩展性很容易因为滥用设计模式导致过度设计，关于什么时候该用设计模式来优化代码，你可以参考“三次原则”，英文是Rule of three，由Matin大叔在《重构》一书中提到。\n\nIt states that you are allowed to copy and paste the code once, but that when the same code is replicated three times, it should be extracted into a new procedure. The rule was introduced by Martin Fowler in his text &amp;quot;Refactoring&amp;quot; and attributed to Don Roberts.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613645422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255522,"user_name":"flyCoder","can_delete":false,"product_type":"c1","uid":1074897,"ip_address":"","ucode":"82FB7B60775978","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/d1/8664c464.jpg","comment_is_top":false,"comment_ctime":1603364452,"is_pvip":false,"replies":[{"id":93164,"content":"是的，不可能设计一个方案无论需求和业务如何变化都能自如扩展","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1603422258,"ip_address":"","comment_id":255522,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"看了栏主的面向对象葵花宝典，从开发的视角来说,抽象接口、使用组合会一定程度提高接口的扩展性，但是没有彻底的完全可扩展，毕竟需求的变化是无限的，开发成本是有限的，我理解扩展性应该是在逐步的重构过程中慢慢完善和丰富的。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515634,"discussion_content":"是的，可扩展性很容易因为滥用设计模式导致过度设计，关于什么时候该用设计模式来优化代码，你可以参考“三次原则”，英文是Rule of three，由Matin大叔在《重构》一书中提到。\n\nIt states that you are allowed to copy and paste the code once, but that when the same code is replicated three times, it should be extracted into a new procedure. The rule was introduced by Martin Fowler in his text &amp;quot;Refactoring&amp;quot; and attributed to Don Roberts.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613645422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251869,"user_name":"KAITO","can_delete":false,"product_type":"c1","uid":1248288,"ip_address":"","ucode":"2B3C599FDFC373","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/20/34bf33ff.jpg","comment_is_top":false,"comment_ctime":1601925867,"is_pvip":false,"replies":[{"id":92104,"content":"算代码层面的扩展","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1602082736,"ip_address":"","comment_id":251869,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"ORM算不算可扩展性呢","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506641,"discussion_content":"算代码层面的扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602082736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249034,"user_name":"杨琳","can_delete":false,"product_type":"c1","uid":2060855,"ip_address":"","ucode":"CB9F4550582CB9","user_header":"","comment_is_top":false,"comment_ctime":1600410216,"is_pvip":false,"replies":[{"id":91875,"content":"是的，过度会设计坑所有人","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1601431913,"ip_address":"","comment_id":249034,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"可扩展性的解决就是对变化进行封装，分离稳定层和变化层。不论是接口还是抽象，都只是为了将变化与不变分离，将业务关注在变化层。但由于每一个点都有可能变化，所以系统不断分离抽象，设计不断膨胀，最终导致系统难以维护。\n所以，软件设计之初，明确软件的生命周期和软件的适用范围极为重要，这是对客户负责，也是对自己负责。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505804,"discussion_content":"是的，过度会设计坑所有人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601431913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193601,"user_name":"Geek_42a7e5","can_delete":false,"product_type":"c1","uid":1613336,"ip_address":"","ucode":"8082C0A6563717","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/x9U78tCoyfhZDavF2sS7Gia34FYoXQ1NjeENZZLZEKNq3oBmCAILUCezVibiajHOIJM8Y2DdKysp41icquopleMDYw/132","comment_is_top":false,"comment_ctime":1584932327,"is_pvip":false,"replies":[{"id":74885,"content":"肯定的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1585540362,"ip_address":"","comment_id":193601,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"我觉得能够把可扩展性考虑得很周全的话，需要在某个业务领域有比较深的了解和经验。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488598,"discussion_content":"肯定的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585540362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178016,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/d1ab239e.jpg","comment_is_top":false,"comment_ctime":1581570714,"is_pvip":false,"replies":[{"id":69942,"content":"所有设计模式都可以这么说的😄","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1582191755,"ip_address":"","comment_id":178016,"utype":1}],"discussion_count":2,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"装饰器模式，我的理解是继承加组合。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483638,"discussion_content":"所有设计模式都可以这么说的😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582191755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/d1ab239e.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331458,"discussion_content":"哈哈，回复扎心。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606878205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142900,"user_name":"chayufan","can_delete":false,"product_type":"c1","uid":1100535,"ip_address":"","ucode":"05C2A488825CA1","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/f7/cfe57114.jpg","comment_is_top":false,"comment_ctime":1571578089,"is_pvip":false,"replies":[{"id":55449,"content":"那是代码层面的，架构层面依赖翻转会更复杂","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1571747261,"ip_address":"","comment_id":142900,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"应对变化中的形式2可以通过依赖翻转，来调整依赖关系哦","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471315,"discussion_content":"那是代码层面的，架构层面依赖翻转会更复杂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571747261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61472,"user_name":"郭和平","can_delete":false,"product_type":"c1","uid":1361451,"ip_address":"","ucode":"B871199C35EA04","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ5sZvgWg1pBVt5doiaWbjBg4NicJkfpfv8p3PlBwHPuWQVo4qU4t4Kibr8Jhmpvckon4QfOH8SeDGaw/132","comment_is_top":false,"comment_ctime":1547705080,"is_pvip":false,"replies":[{"id":21890,"content":"没有完美的设计方式，你提到的根据配置热加载，整体war包都可以，如果为了运维方便，不同的协议隔离到不同的系统会比较方便","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1547774368,"ip_address":"","comment_id":61472,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"小白新手问题见谅，也不知道提的对不对 ：想请问下老师可拓展性多带来的运维问题有什么好的思路吗？比如接入XML、JSON、ProtocolBuffer 三种接入方式为例，原本可以用一个整体war包运行，随着接入方式变多，应该不能这样了吧？想把每种接入方式单独抽离出来，或者说用一个配置文件加载指定版本的可变部分，解决办法目前看到的有热加载的方式，但是因为可变部分对稳定部分存在依赖，要是有多重依赖怕有问题？还有可以利用rpc通信可变和不可变部分的方式这种方式呢？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436881,"discussion_content":"没有完美的设计方式，你提到的根据配置热加载，整体war包都可以，如果为了运维方便，不同的协议隔离到不同的系统会比较方便","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547774368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35991,"user_name":"Mr.Lee","can_delete":false,"product_type":"c1","uid":1240758,"ip_address":"","ucode":"F732D98D262703","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/b6/f99db3e7.jpg","comment_is_top":false,"comment_ctime":1540885131,"is_pvip":false,"replies":[{"id":12823,"content":"基本正确，关于设计模式的解读，可以参考我的第一本书《面向对象葵花宝典》","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1540909893,"ip_address":"","comment_id":35991,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"大佬，楼上所说的设计模式的核心就是，封装变化，隔离可变性\n是说将不变的封装起来，做成“抽象层”，将变化的单独隔离出来，做成“实现层”。我理解的对吗？还请大佬赐教。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427726,"discussion_content":"基本正确，关于设计模式的解读，可以参考我的第一本书《面向对象葵花宝典》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540909893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23384,"user_name":"阿毛","can_delete":false,"product_type":"c1","uid":1221386,"ip_address":"","ucode":"356F1FF2B56372","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/0a/0f681189.jpg","comment_is_top":false,"comment_ctime":1536320204,"is_pvip":false,"replies":[{"id":8493,"content":"极客时间会建群沟通","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1536388958,"ip_address":"","comment_id":23384,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"每次看完都会逐条查看大家的留言，每个人都结合自己的实践给出了思考和总结，但是交流还是受限。大神是不是拉个微信群方便交流？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427726,"discussion_content":"基本正确，关于设计模式的解读，可以参考我的第一本书《面向对象葵花宝典》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540909893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23241,"user_name":"王维","can_delete":false,"product_type":"c1","uid":1091684,"ip_address":"","ucode":"836E6CDB1A56BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/64/965e0d9b.jpg","comment_is_top":false,"comment_ctime":1536229768,"is_pvip":false,"replies":[{"id":8412,"content":"领域驱动设计更多属于方案设计层面的，架构级别的可扩展方式后面有专门内容讲","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1536247074,"ip_address":"","comment_id":23241,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"请问华仔，如果说设计模式是代码级别的扩展方法，那么架构级别的扩展是有哪些方法呢？领域驱动设计算不算呢？","like_count":0},{"had_liked":false,"id":12264,"user_name":"我走我流","can_delete":false,"product_type":"c1","uid":1134100,"ip_address":"","ucode":"1CD12CDA12FE60","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/14/13863643.jpg","comment_is_top":false,"comment_ctime":1528728251,"is_pvip":false,"replies":[{"id":4113,"content":"架构层面的可扩展和设计模式差别还是比较大的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1528869978,"ip_address":"","comment_id":12264,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"看来设计模式这本书还要翻出来好好学学","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423475,"discussion_content":"领域驱动设计更多属于方案设计层面的，架构级别的可扩展方式后面有专门内容讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536247074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":11327,"user_name":"陈友洲","can_delete":false,"product_type":"c1","uid":1100073,"ip_address":"","ucode":"3C72B4B4A5D8E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/29/a1049ab3.jpg","comment_is_top":false,"comment_ctime":1528073969,"is_pvip":false,"replies":[{"id":3614,"content":"请自行搜索","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1528081111,"ip_address":"","comment_id":11327,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"话说大神提到的规则引擎是个啥？有哪些使用场景？谢谢","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419185,"discussion_content":"架构层面的可扩展和设计模式差别还是比较大的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528869978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9487,"user_name":"JOEL","can_delete":false,"product_type":"c1","uid":1102472,"ip_address":"","ucode":"E093C45E45080B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/88/3a90c25b.jpg","comment_is_top":false,"comment_ctime":1526906758,"is_pvip":false,"replies":[{"id":2886,"content":"实践很多，我主张侧重提炼，不然很多人会陷入细节出不来","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526953652,"ip_address":"","comment_id":9487,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"留个言，本文讲了封装变化以保持扩展的两种方式：分层和抽象。但具体做法却有很多，比如servlet的过滤器，比如从架构上就采用了SOA应该也算，比如有些构建工具maven，采用了预订定义生命周期的方式，有些系统干脆采用了标准化的方式把复杂性隔离到系统外部，做法多种多样，要是能多列举这些最佳实践，也挺有收获。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418793,"discussion_content":"请自行搜索","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528081111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9473,"user_name":"gevin","can_delete":false,"product_type":"c1","uid":1005862,"ip_address":"","ucode":"B5AD68F1884A1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/26/1015d573.jpg","comment_is_top":false,"comment_ctime":1526895735,"is_pvip":false,"replies":[{"id":2846,"content":"度的把握是一门艺术","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526907093,"ip_address":"","comment_id":9473,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"关于可扩展性，我的经验做法是，通常在最初写代码时，按当时对业务需求的认识，对变化做一定的预测（其实就是在动手开发每个业务模块甚至每个功能前，先仔细想一下业务需求，如果发现某个地方可能会变化，就把该变化封装到代码里），并对此在代码里把相应的可扩展性做进去，这样通常能顶住一定的需求变化；然后是针对已做完的功能模块，如果因需求变化需要改动时，一定要再仔细分析需求，在对业务认识所及的范围内，尽量做好预测，并封装变化，做这部分功能的原因是，一个业务功能如果会变化一次，通常也会变化第二次甚至更多次，所以要被改动的功能，就是封装变化的目标。当然，预测变化要有个度，毕竟预测是不准确的","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418084,"discussion_content":"实践很多，我主张侧重提炼，不然很多人会陷入细节出不来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526953652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8695,"user_name":"J","can_delete":false,"product_type":"c1","uid":1107681,"ip_address":"","ucode":"5196AC0BAEE457","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/e1/f44cdfaf.jpg","comment_is_top":false,"comment_ctime":1526375517,"is_pvip":false,"replies":[{"id":2611,"content":"这是代码层扩展，架构层扩展不能这样做","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526437792,"ip_address":"","comment_id":8695,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"可扩展的技术就是使用了设计模式 ，比如文中提到的装饰者，还有策略模式和模板方法","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418081,"discussion_content":"度的把握是一门艺术","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526907093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8435,"user_name":"东方之猪","can_delete":false,"product_type":"c1","uid":1084850,"ip_address":"","ucode":"B6EA89F7FDBA3F","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/b2/1040992f.jpg","comment_is_top":false,"comment_ctime":1526215956,"is_pvip":false,"replies":[{"id":2487,"content":"那不是过度设计了？","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526254163,"ip_address":"","comment_id":8435,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"项目里灵活运用模板方法，在抽相中定义不变的方法簇，将实现延迟到自类，让各自表现体独自变化，当时就预测这个算法簇不会频繁变化，事实也是预测如此，封装变化，面相抽象而不是实现，瞬间觉得代码水平是面相对象而不是面相过程","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417823,"discussion_content":"这是代码层扩展，架构层扩展不能这样做","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526437792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8348,"user_name":"天天向上卡索","can_delete":false,"product_type":"c1","uid":1009850,"ip_address":"","ucode":"E3724C3B39BD3F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/ba/c0cf8bf3.jpg","comment_is_top":false,"comment_ctime":1526106741,"is_pvip":false,"replies":[{"id":2452,"content":"设计模式不是空谈，但实践中空谈设计模式和过度使用的不少，关键还理解不到位😃","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526116235,"ip_address":"","comment_id":8348,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"面向接口编程，提取公共部分代码为核心代码，其他的再实现相应接口，设计模式并非空谈，设计模式用的好可以减少后期修改维护的工作量，而设计模式的使用也是要从实际业务场景出发，避免过度设计","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417717,"discussion_content":"那不是过度设计了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526254163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8203,"user_name":"呵呵","can_delete":false,"product_type":"c1","uid":1052862,"ip_address":"","ucode":"986CC73CFBBC67","user_header":"","comment_is_top":false,"comment_ctime":1525965834,"is_pvip":false,"replies":[{"id":2405,"content":"扩容性一般称为“可伸缩性”，属于高性能的一部分，就是任务分配的模式带来的效果","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526005063,"ip_address":"","comment_id":8203,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"所谓架构层面的扩展，感觉一般情况下指的是扩容性","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417680,"discussion_content":"设计模式不是空谈，但实践中空谈设计模式和过度使用的不少，关键还理解不到位😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526116235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8198,"user_name":"彡工鸟","can_delete":false,"product_type":"c1","uid":1108881,"ip_address":"","ucode":"37867BF7151F33","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/91/12612612.jpg","comment_is_top":false,"comment_ctime":1525964655,"is_pvip":false,"replies":[{"id":2410,"content":"然而我敢打赌即使背住23个设计模式后还是不会做架构设计，我曾经就是这样的","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526005427,"ip_address":"","comment_id":8198,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"无论是架构还是代码层面，其实把软件设计那几大原则好好理解，基本上都不是事。剩下的就是实践实践实践。所谓的23个设计模式基本上都能对上","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417626,"discussion_content":"扩容性一般称为“可伸缩性”，属于高性能的一部分，就是任务分配的模式带来的效果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526005063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23241,"user_name":"王维","can_delete":false,"product_type":"c1","uid":1091684,"ip_address":"","ucode":"836E6CDB1A56BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/64/965e0d9b.jpg","comment_is_top":false,"comment_ctime":1536229768,"is_pvip":false,"replies":[{"id":8412,"content":"领域驱动设计更多属于方案设计层面的，架构级别的可扩展方式后面有专门内容讲","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1536247074,"ip_address":"","comment_id":23241,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"请问华仔，如果说设计模式是代码级别的扩展方法，那么架构级别的扩展是有哪些方法呢？领域驱动设计算不算呢？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423475,"discussion_content":"领域驱动设计更多属于方案设计层面的，架构级别的可扩展方式后面有专门内容讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536247074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12264,"user_name":"我走我流","can_delete":false,"product_type":"c1","uid":1134100,"ip_address":"","ucode":"1CD12CDA12FE60","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/14/13863643.jpg","comment_is_top":false,"comment_ctime":1528728251,"is_pvip":false,"replies":[{"id":4113,"content":"架构层面的可扩展和设计模式差别还是比较大的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1528869978,"ip_address":"","comment_id":12264,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"看来设计模式这本书还要翻出来好好学学","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419185,"discussion_content":"架构层面的可扩展和设计模式差别还是比较大的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528869978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":11327,"user_name":"陈友洲","can_delete":false,"product_type":"c1","uid":1100073,"ip_address":"","ucode":"3C72B4B4A5D8E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/29/a1049ab3.jpg","comment_is_top":false,"comment_ctime":1528073969,"is_pvip":false,"replies":[{"id":3614,"content":"请自行搜索","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1528081111,"ip_address":"","comment_id":11327,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"话说大神提到的规则引擎是个啥？有哪些使用场景？谢谢","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418793,"discussion_content":"请自行搜索","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528081111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9487,"user_name":"JOEL","can_delete":false,"product_type":"c1","uid":1102472,"ip_address":"","ucode":"E093C45E45080B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/88/3a90c25b.jpg","comment_is_top":false,"comment_ctime":1526906758,"is_pvip":false,"replies":[{"id":2886,"content":"实践很多，我主张侧重提炼，不然很多人会陷入细节出不来","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526953652,"ip_address":"","comment_id":9487,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"留个言，本文讲了封装变化以保持扩展的两种方式：分层和抽象。但具体做法却有很多，比如servlet的过滤器，比如从架构上就采用了SOA应该也算，比如有些构建工具maven，采用了预订定义生命周期的方式，有些系统干脆采用了标准化的方式把复杂性隔离到系统外部，做法多种多样，要是能多列举这些最佳实践，也挺有收获。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418084,"discussion_content":"实践很多，我主张侧重提炼，不然很多人会陷入细节出不来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526953652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9473,"user_name":"gevin","can_delete":false,"product_type":"c1","uid":1005862,"ip_address":"","ucode":"B5AD68F1884A1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/26/1015d573.jpg","comment_is_top":false,"comment_ctime":1526895735,"is_pvip":false,"replies":[{"id":2846,"content":"度的把握是一门艺术","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526907093,"ip_address":"","comment_id":9473,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"关于可扩展性，我的经验做法是，通常在最初写代码时，按当时对业务需求的认识，对变化做一定的预测（其实就是在动手开发每个业务模块甚至每个功能前，先仔细想一下业务需求，如果发现某个地方可能会变化，就把该变化封装到代码里），并对此在代码里把相应的可扩展性做进去，这样通常能顶住一定的需求变化；然后是针对已做完的功能模块，如果因需求变化需要改动时，一定要再仔细分析需求，在对业务认识所及的范围内，尽量做好预测，并封装变化，做这部分功能的原因是，一个业务功能如果会变化一次，通常也会变化第二次甚至更多次，所以要被改动的功能，就是封装变化的目标。当然，预测变化要有个度，毕竟预测是不准确的","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418081,"discussion_content":"度的把握是一门艺术","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526907093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8695,"user_name":"J","can_delete":false,"product_type":"c1","uid":1107681,"ip_address":"","ucode":"5196AC0BAEE457","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/e1/f44cdfaf.jpg","comment_is_top":false,"comment_ctime":1526375517,"is_pvip":false,"replies":[{"id":2611,"content":"这是代码层扩展，架构层扩展不能这样做","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526437792,"ip_address":"","comment_id":8695,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"可扩展的技术就是使用了设计模式 ，比如文中提到的装饰者，还有策略模式和模板方法","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417823,"discussion_content":"这是代码层扩展，架构层扩展不能这样做","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526437792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8435,"user_name":"东方之猪","can_delete":false,"product_type":"c1","uid":1084850,"ip_address":"","ucode":"B6EA89F7FDBA3F","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/b2/1040992f.jpg","comment_is_top":false,"comment_ctime":1526215956,"is_pvip":false,"replies":[{"id":2487,"content":"那不是过度设计了？","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526254163,"ip_address":"","comment_id":8435,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"项目里灵活运用模板方法，在抽相中定义不变的方法簇，将实现延迟到自类，让各自表现体独自变化，当时就预测这个算法簇不会频繁变化，事实也是预测如此，封装变化，面相抽象而不是实现，瞬间觉得代码水平是面相对象而不是面相过程","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417717,"discussion_content":"那不是过度设计了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526254163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8348,"user_name":"天天向上卡索","can_delete":false,"product_type":"c1","uid":1009850,"ip_address":"","ucode":"E3724C3B39BD3F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/ba/c0cf8bf3.jpg","comment_is_top":false,"comment_ctime":1526106741,"is_pvip":false,"replies":[{"id":2452,"content":"设计模式不是空谈，但实践中空谈设计模式和过度使用的不少，关键还理解不到位😃","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526116235,"ip_address":"","comment_id":8348,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"面向接口编程，提取公共部分代码为核心代码，其他的再实现相应接口，设计模式并非空谈，设计模式用的好可以减少后期修改维护的工作量，而设计模式的使用也是要从实际业务场景出发，避免过度设计","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417680,"discussion_content":"设计模式不是空谈，但实践中空谈设计模式和过度使用的不少，关键还理解不到位😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526116235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8203,"user_name":"呵呵","can_delete":false,"product_type":"c1","uid":1052862,"ip_address":"","ucode":"986CC73CFBBC67","user_header":"","comment_is_top":false,"comment_ctime":1525965834,"is_pvip":false,"replies":[{"id":2405,"content":"扩容性一般称为“可伸缩性”，属于高性能的一部分，就是任务分配的模式带来的效果","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526005063,"ip_address":"","comment_id":8203,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"所谓架构层面的扩展，感觉一般情况下指的是扩容性","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417626,"discussion_content":"扩容性一般称为“可伸缩性”，属于高性能的一部分，就是任务分配的模式带来的效果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526005063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8198,"user_name":"彡工鸟","can_delete":false,"product_type":"c1","uid":1108881,"ip_address":"","ucode":"37867BF7151F33","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/91/12612612.jpg","comment_is_top":false,"comment_ctime":1525964655,"is_pvip":false,"replies":[{"id":2410,"content":"然而我敢打赌即使背住23个设计模式后还是不会做架构设计，我曾经就是这样的","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526005427,"ip_address":"","comment_id":8198,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100006601,"comment_content":"无论是架构还是代码层面，其实把软件设计那几大原则好好理解，基本上都不是事。剩下的就是实践实践实践。所谓的23个设计模式基本上都能对上","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417624,"discussion_content":"然而我敢打赌即使背住23个设计模式后还是不会做架构设计，我曾经就是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526005427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8185,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1525957229,"is_pvip":false,"replies":[{"id":2413,"content":"稳定层可以是库，可以是包，可以是接口，可以是中间件，可以是子系统，例如Linux的VFS","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526005718,"ip_address":"","comment_id":8185,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"不太明白老师的说法，稳定层就是几个接口，变化很小吧\n","like_count":0},{"had_liked":false,"id":8160,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1525930693,"is_pvip":false,"replies":[{"id":2378,"content":"可扩展性可以是架构层面的，可以是代码层面的，本质都是一样的，提问用了“代码”中的可扩展性，是考虑到可能比较多的朋友没有做过可扩展性架构设计。","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1525943644,"ip_address":"","comment_id":8160,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"我们讲的是代码层面的可扩展性，还是架构本身的可扩展性？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417616,"discussion_content":"稳定层可以是库，可以是包，可以是接口，可以是中间件，可以是子系统，例如Linux的VFS","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526005718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8152,"user_name":"王策","can_delete":false,"product_type":"c1","uid":1101632,"ip_address":"","ucode":"F4BD51DBD92353","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/40/8d02f5ef.jpg","comment_is_top":false,"comment_ctime":1525927475,"is_pvip":false,"replies":[{"id":2380,"content":"单一职责一般用在编码层面，用来指导类设计，用于架构层面的话，很难明确“单一”的粒度。例如，到底“用户管理”（包括登录注册信息管理）是单一职责，还是“用户登录”是单一职责，看起来都可以。","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1525943845,"ip_address":"","comment_id":8152,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"短信 微信和站内信那个项目可能想做的事情太多，是不是存在违反单一职责原则的问题","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417606,"discussion_content":"可扩展性可以是架构层面的，可以是代码层面的，本质都是一样的，提问用了“代码”中的可扩展性，是考虑到可能比较多的朋友没有做过可扩展性架构设计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525943644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8104,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1525912925,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":1,"score":9,"product_id":100006601,"comment_content":"今日心得\n\n1 What：什么是架构的可扩展性？\n\n业务需求、运行环境方面的变化都会导致软件系统发生变化，而这种软件系统对上述变化的适应能力就是可扩展性。\n\n可扩展性可以理解为是一种从功能需求方面考虑的软件属性，属性就会存在好坏之分。\n\n按照可扩展性的定义，一个具备良好可扩展性的架构设计应当符合开闭原则：对扩展开放，对修改关闭。衡量一个软件系统具备良好可扩展性主要表现但不限于：（1）软件自身内部方面。在软件系统实现新增的业务功能时，对现有系统功能影响较少，即不需要对现有功能作任何改动或者很少改动。（2）软件外部方面。软件系统本身与其他存在协同关系的外部系统之间存在松耦合关系，软件系统的变化对其他软件系统无影响，其他软件系统和功能不需要进行改动。反之，则是一个可扩展性不好的软件系统。\n\n2 Why：为什么要求架构具备良好的可扩展性？\n\n伴随业务的发展、创新，运行环境的变化，对技术也就提出了更多、更高的要求。能够快速响应上述变化，并最大程度降低对现有系统的影响，是设计可扩展性好的架构的主要目的。\n\n3 How：如何设计可扩展性好的架构？\n\n面向对象思想、设计模式都是为了解决可扩展性的而出现的方法与技术。\n\n设计具备良好可扩展性的系统，有两个思考角度：（1）从业务维度。对业务深入理解，对可预计的业务变化进行预测。（2）从技术维度。利用扩展性好的技术，实现对变化的封装。\n\n(1)在业务维度。对业务深入理解，对业务的发展方向进行预判，也就是不能完全不考虑可扩展性；但是，变化无处不在，在业务看得远一点的同时，需要注意:警惕过度设计；不能每个设计点都考虑可扩展性；所有的预测都存在不正确的可能性。\n\n(2)在技术维度。预测变化是一回事，采取什么方案来应对变化，又是另外一个复杂的事情。即使预测很准确，如果方案不合适，则系统扩展一样很麻烦。第一种应对变化的常见方案是将“变化”封装在一个“变化层”，将不变的部分封装在一个独立的“稳定层”。第二种常见的应对变化的方案是提炼出一个“抽象层”和一个“实现层”。\n\n4.在实际工作场景中的解决方案\n在实际软件系统架构设计中，常通过以下技术手段实现良好的可扩展性:（1）使用分布式服务(框架)构建可复用的业务平台。（2）使用分布式消息队列降低业务模块间的耦合性。\n\n(1)分布式服务框架\n利用分布式服务框架(如Dubbo)可以将业务逻辑实现和可复用组件服务分离开，通过接口降低子系统或模块间的耦合性。新增功能时，可以通过调用可复用的组件实现自身的业务逻辑，而对现有系统没有任何影响。可复用组件升级变更的时候，可以提供多版本服务对应用实现透明升级，对现有应用不会造成影响。\n\n(2) 分布式消息队列\n基于生产者-消费者编程模式，利用分布式消息队列(如RabbitMQ)将用户请求、业务请求作为消息发布者将事件构造成消息发布到消息队列，消息的订阅者作为消费者从消息队列中获取消息进行处理。通过这种方式将消息生产和消息处理分离开来，可以透明地增加新的消息生产者任务或者新的消息消费者任务。","like_count":317},{"had_liked":false,"id":13826,"user_name":"轩辕十四","can_delete":false,"product_type":"c1","uid":1120272,"ip_address":"","ucode":"693B77D884950F","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/10/731b4319.jpg","comment_is_top":false,"comment_ctime":1530008241,"is_pvip":false,"replies":null,"discussion_count":4,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"我感觉中文&quot;可扩展性&quot;其实对应两个概念，extensible(对变化的扩展），以及scalable（对规模的扩展）。分开来讲可能更清楚些","like_count":23,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417601,"discussion_content":"单一职责一般用在编码层面，用来指导类设计，用于架构层面的话，很难明确“单一”的粒度。例如，到底“用户管理”（包括登录注册信息管理）是单一职责，还是“用户登录”是单一职责，看起来都可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525943845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8085,"user_name":"narry","can_delete":false,"product_type":"c1","uid":1033576,"ip_address":"","ucode":"B8010C1DE39D08","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/68/7afb7304.jpg","comment_is_top":false,"comment_ctime":1525910814,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"对于可扩展性，我最常使用的微内核和“”流水线+filter”两个模式，微内核将稳定的核心部分逐渐的固定下来，保证系统的稳定，流水线的模式满足了开闭的原则，利于系统的扩展","like_count":14},{"had_liked":false,"id":8256,"user_name":"张玮(大圣)","can_delete":false,"product_type":"c1","uid":1111343,"ip_address":"","ucode":"D567C4BE87D116","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/2f/56117bab.jpg","comment_is_top":false,"comment_ctime":1526006603,"is_pvip":false,"replies":null,"discussion_count":3,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"看了全部的评论，都在谈构架，架构，其实想说的是在扩展性设计是首先要考虑的是当前的组织和业务体量能承载和所要求的架构，\n\n创业期间，单一，中期分层慢慢过渡，具体到每个子域也是分层慢慢过渡，笼统的说那就是分层，分层，分层，最终还是考量技术人如何界定分层的事","like_count":13,"discussions":[{"author":{"id":1634632,"avatar":"","nickname":"坐看云起","note":"","ucode":"1BD2777FDB2E2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303547,"discussion_content":"extensible可翻译为扩展性，scalable可翻译为伸缩性","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1599294615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105816,"avatar":"https://static001.geekbang.org/account/avatar/00/10/df/98/670d96c0.jpg","nickname":"流年似水","note":"","ucode":"048D320AFB576A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558634,"discussion_content":"单个系统到级联应用，这也算是可扩展性吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648427023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1146001,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7c/91/0d8e2472.jpg","nickname":"子非鱼","note":"","ucode":"7577222878C1E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543495,"discussion_content":"有点同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641179005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413315,"discussion_content":"对规模的扩展属于高性能需求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636444033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8116,"user_name":"jw","can_delete":false,"product_type":"c1","uid":1064821,"ip_address":"","ucode":"6C9D1F94078FA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/75/0e006934.jpg","comment_is_top":false,"comment_ctime":1525913971,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"应对变化的两个方案:\n1，封装变化层和稳定层\n2，提炼抽象层和实现层\n本质上都是在在将变化和稳定分离","like_count":13},{"had_liked":false,"id":11277,"user_name":"朋朋","can_delete":false,"product_type":"c1","uid":1133890,"ip_address":"","ucode":"3070498E7282C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/42/8fd7c2e2.jpg","comment_is_top":false,"comment_ctime":1528019289,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"做游戏 经常变需求玩法 特别是策划做新系统时 但他不能大改旧系统 还得相互适配 因为毕竟是一款游戏 这样 可以把整个系统拆分成多个服务 服务和服务之间用消息队列 一个服务内部用分层的方法 那个层变啦 就修改那个层 那个服务业务变啦就修改那个服务 不用大改整个系统","like_count":7},{"had_liked":false,"id":8076,"user_name":"Jesse.zhang","can_delete":false,"product_type":"c1","uid":1099953,"ip_address":"","ucode":"E493F8B4AFBB24","user_header":"https://static001.geekbang.org/account/avatar/00/10/c8/b1/20b8ddcf.jpg","comment_is_top":false,"comment_ctime":1525909255,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"学习了，扩展性是为了应对未来新的需求变化能快速响应的一种能力，前期架构时需要考虑一定的扩展性，但无需事事考虑，考虑的部分是基于需求分析，以系统重点的业务方向上，其他的业务先开干，之后以代码重构方式考虑扩展，这样一方面可以加快系统落地，其次减少扩展性错误或不完美而带来的工作量。","like_count":6},{"had_liked":false,"id":8185,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1525957229,"is_pvip":false,"replies":[{"id":2413,"content":"稳定层可以是库，可以是包，可以是接口，可以是中间件，可以是子系统，例如Linux的VFS","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1526005718,"ip_address":"","comment_id":8185,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"不太明白老师的说法，稳定层就是几个接口，变化很小吧\n","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417616,"discussion_content":"稳定层可以是库，可以是包，可以是接口，可以是中间件，可以是子系统，例如Linux的VFS","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526005718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8160,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1525930693,"is_pvip":false,"replies":[{"id":2378,"content":"可扩展性可以是架构层面的，可以是代码层面的，本质都是一样的，提问用了“代码”中的可扩展性，是考虑到可能比较多的朋友没有做过可扩展性架构设计。","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1525943644,"ip_address":"","comment_id":8160,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"我们讲的是代码层面的可扩展性，还是架构本身的可扩展性？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417606,"discussion_content":"可扩展性可以是架构层面的，可以是代码层面的，本质都是一样的，提问用了“代码”中的可扩展性，是考虑到可能比较多的朋友没有做过可扩展性架构设计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525943644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8152,"user_name":"王策","can_delete":false,"product_type":"c1","uid":1101632,"ip_address":"","ucode":"F4BD51DBD92353","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/40/8d02f5ef.jpg","comment_is_top":false,"comment_ctime":1525927475,"is_pvip":false,"replies":[{"id":2380,"content":"单一职责一般用在编码层面，用来指导类设计，用于架构层面的话，很难明确“单一”的粒度。例如，到底“用户管理”（包括登录注册信息管理）是单一职责，还是“用户登录”是单一职责，看起来都可以。","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":1098920,"ctime":1525943845,"ip_address":"","comment_id":8152,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"短信 微信和站内信那个项目可能想做的事情太多，是不是存在违反单一职责原则的问题","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417601,"discussion_content":"单一职责一般用在编码层面，用来指导类设计，用于架构层面的话，很难明确“单一”的粒度。例如，到底“用户管理”（包括登录注册信息管理）是单一职责，还是“用户登录”是单一职责，看起来都可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525943845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8104,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1525912925,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":1,"score":9,"product_id":100006601,"comment_content":"今日心得\n\n1 What：什么是架构的可扩展性？\n\n业务需求、运行环境方面的变化都会导致软件系统发生变化，而这种软件系统对上述变化的适应能力就是可扩展性。\n\n可扩展性可以理解为是一种从功能需求方面考虑的软件属性，属性就会存在好坏之分。\n\n按照可扩展性的定义，一个具备良好可扩展性的架构设计应当符合开闭原则：对扩展开放，对修改关闭。衡量一个软件系统具备良好可扩展性主要表现但不限于：（1）软件自身内部方面。在软件系统实现新增的业务功能时，对现有系统功能影响较少，即不需要对现有功能作任何改动或者很少改动。（2）软件外部方面。软件系统本身与其他存在协同关系的外部系统之间存在松耦合关系，软件系统的变化对其他软件系统无影响，其他软件系统和功能不需要进行改动。反之，则是一个可扩展性不好的软件系统。\n\n2 Why：为什么要求架构具备良好的可扩展性？\n\n伴随业务的发展、创新，运行环境的变化，对技术也就提出了更多、更高的要求。能够快速响应上述变化，并最大程度降低对现有系统的影响，是设计可扩展性好的架构的主要目的。\n\n3 How：如何设计可扩展性好的架构？\n\n面向对象思想、设计模式都是为了解决可扩展性的而出现的方法与技术。\n\n设计具备良好可扩展性的系统，有两个思考角度：（1）从业务维度。对业务深入理解，对可预计的业务变化进行预测。（2）从技术维度。利用扩展性好的技术，实现对变化的封装。\n\n(1)在业务维度。对业务深入理解，对业务的发展方向进行预判，也就是不能完全不考虑可扩展性；但是，变化无处不在，在业务看得远一点的同时，需要注意:警惕过度设计；不能每个设计点都考虑可扩展性；所有的预测都存在不正确的可能性。\n\n(2)在技术维度。预测变化是一回事，采取什么方案来应对变化，又是另外一个复杂的事情。即使预测很准确，如果方案不合适，则系统扩展一样很麻烦。第一种应对变化的常见方案是将“变化”封装在一个“变化层”，将不变的部分封装在一个独立的“稳定层”。第二种常见的应对变化的方案是提炼出一个“抽象层”和一个“实现层”。\n\n4.在实际工作场景中的解决方案\n在实际软件系统架构设计中，常通过以下技术手段实现良好的可扩展性:（1）使用分布式服务(框架)构建可复用的业务平台。（2）使用分布式消息队列降低业务模块间的耦合性。\n\n(1)分布式服务框架\n利用分布式服务框架(如Dubbo)可以将业务逻辑实现和可复用组件服务分离开，通过接口降低子系统或模块间的耦合性。新增功能时，可以通过调用可复用的组件实现自身的业务逻辑，而对现有系统没有任何影响。可复用组件升级变更的时候，可以提供多版本服务对应用实现透明升级，对现有应用不会造成影响。\n\n(2) 分布式消息队列\n基于生产者-消费者编程模式，利用分布式消息队列(如RabbitMQ)将用户请求、业务请求作为消息发布者将事件构造成消息发布到消息队列，消息的订阅者作为消费者从消息队列中获取消息进行处理。通过这种方式将消息生产和消息处理分离开来，可以透明地增加新的消息生产者任务或者新的消息消费者任务。","like_count":317},{"had_liked":false,"id":13826,"user_name":"轩辕十四","can_delete":false,"product_type":"c1","uid":1120272,"ip_address":"","ucode":"693B77D884950F","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/10/731b4319.jpg","comment_is_top":false,"comment_ctime":1530008241,"is_pvip":false,"replies":null,"discussion_count":4,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"我感觉中文&quot;可扩展性&quot;其实对应两个概念，extensible(对变化的扩展），以及scalable（对规模的扩展）。分开来讲可能更清楚些","like_count":23,"discussions":[{"author":{"id":1634632,"avatar":"","nickname":"坐看云起","note":"","ucode":"1BD2777FDB2E2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303547,"discussion_content":"extensible可翻译为扩展性，scalable可翻译为伸缩性","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1599294615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105816,"avatar":"https://static001.geekbang.org/account/avatar/00/10/df/98/670d96c0.jpg","nickname":"流年似水","note":"","ucode":"048D320AFB576A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558634,"discussion_content":"单个系统到级联应用，这也算是可扩展性吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648427023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1146001,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7c/91/0d8e2472.jpg","nickname":"子非鱼","note":"","ucode":"7577222878C1E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543495,"discussion_content":"有点同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641179005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413315,"discussion_content":"对规模的扩展属于高性能需求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636444033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8085,"user_name":"narry","can_delete":false,"product_type":"c1","uid":1033576,"ip_address":"","ucode":"B8010C1DE39D08","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/68/7afb7304.jpg","comment_is_top":false,"comment_ctime":1525910814,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"对于可扩展性，我最常使用的微内核和“”流水线+filter”两个模式，微内核将稳定的核心部分逐渐的固定下来，保证系统的稳定，流水线的模式满足了开闭的原则，利于系统的扩展","like_count":14},{"had_liked":false,"id":8256,"user_name":"张玮(大圣)","can_delete":false,"product_type":"c1","uid":1111343,"ip_address":"","ucode":"D567C4BE87D116","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/2f/56117bab.jpg","comment_is_top":false,"comment_ctime":1526006603,"is_pvip":false,"replies":null,"discussion_count":3,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"看了全部的评论，都在谈构架，架构，其实想说的是在扩展性设计是首先要考虑的是当前的组织和业务体量能承载和所要求的架构，\n\n创业期间，单一，中期分层慢慢过渡，具体到每个子域也是分层慢慢过渡，笼统的说那就是分层，分层，分层，最终还是考量技术人如何界定分层的事","like_count":13,"discussions":[{"author":{"id":1108469,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e9/f5/21e72902.jpg","nickname":"Andy","note":"","ucode":"2088B05F33EE9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594670,"discussion_content":"说的也是实际情况，文章可能更想传达的是一种认知，作为程序员需要具备的思维以及在业务落地的时候，能够守住哪些底线？即使某个阶段做不到，也知道自己做不到，哈哈哈，个人浅见","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669274430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1802550,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoPY23R9RRSfAbQwrxyRXLFz9wibPB97KnMB4hVgNFIibibaqpBUcUjBX9GricvR5iaawuwaEnxMVCYujQ/132","nickname":"ariesson","note":"","ucode":"04C7025F972EC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287808,"discussion_content":"同意！架构设计不仅仅要考虑业务的发展水平、同时还要考虑组织所处的位置，人员的数量和水平以及公司战略层给予的支持。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593562799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1371891,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ee/f3/a94cee23.jpg","nickname":"KK","note":"","ucode":"8BEFC518F06AC7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1802550,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoPY23R9RRSfAbQwrxyRXLFz9wibPB97KnMB4hVgNFIibibaqpBUcUjBX9GricvR5iaawuwaEnxMVCYujQ/132","nickname":"ariesson","note":"","ucode":"04C7025F972EC8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540961,"discussion_content":"这点我深有体会，首先得公司放权，给时间，人手去做，如果领导给与的支持不够，那还是先满足业务的需求吧，不要大折腾，开发累，占用公司资源多，吃力不讨好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640222931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":287808,"ip_address":"","group_id":0},"score":540961,"extra":""}]}]},{"had_liked":false,"id":8116,"user_name":"jw","can_delete":false,"product_type":"c1","uid":1064821,"ip_address":"","ucode":"6C9D1F94078FA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/75/0e006934.jpg","comment_is_top":false,"comment_ctime":1525913971,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"应对变化的两个方案:\n1，封装变化层和稳定层\n2，提炼抽象层和实现层\n本质上都是在在将变化和稳定分离","like_count":13},{"had_liked":false,"id":11277,"user_name":"朋朋","can_delete":false,"product_type":"c1","uid":1133890,"ip_address":"","ucode":"3070498E7282C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/42/8fd7c2e2.jpg","comment_is_top":false,"comment_ctime":1528019289,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"做游戏 经常变需求玩法 特别是策划做新系统时 但他不能大改旧系统 还得相互适配 因为毕竟是一款游戏 这样 可以把整个系统拆分成多个服务 服务和服务之间用消息队列 一个服务内部用分层的方法 那个层变啦 就修改那个层 那个服务业务变啦就修改那个服务 不用大改整个系统","like_count":7},{"had_liked":false,"id":8076,"user_name":"Jesse.zhang","can_delete":false,"product_type":"c1","uid":1099953,"ip_address":"","ucode":"E493F8B4AFBB24","user_header":"https://static001.geekbang.org/account/avatar/00/10/c8/b1/20b8ddcf.jpg","comment_is_top":false,"comment_ctime":1525909255,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":9,"product_id":100006601,"comment_content":"学习了，扩展性是为了应对未来新的需求变化能快速响应的一种能力，前期架构时需要考虑一定的扩展性，但无需事事考虑，考虑的部分是基于需求分析，以系统重点的业务方向上，其他的业务先开干，之后以代码重构方式考虑扩展，这样一方面可以加快系统落地，其次减少扩展性错误或不完美而带来的工作量。","like_count":6,"discussions":[{"author":{"id":1108469,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e9/f5/21e72902.jpg","nickname":"Andy","note":"","ucode":"2088B05F33EE9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594670,"discussion_content":"说的也是实际情况，文章可能更想传达的是一种认知，作为程序员需要具备的思维以及在业务落地的时候，能够守住哪些底线？即使某个阶段做不到，也知道自己做不到，哈哈哈，个人浅见","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669274430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1802550,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoPY23R9RRSfAbQwrxyRXLFz9wibPB97KnMB4hVgNFIibibaqpBUcUjBX9GricvR5iaawuwaEnxMVCYujQ/132","nickname":"ariesson","note":"","ucode":"04C7025F972EC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287808,"discussion_content":"同意！架构设计不仅仅要考虑业务的发展水平、同时还要考虑组织所处的位置，人员的数量和水平以及公司战略层给予的支持。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593562799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1371891,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ee/f3/a94cee23.jpg","nickname":"KK","note":"","ucode":"8BEFC518F06AC7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1802550,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoPY23R9RRSfAbQwrxyRXLFz9wibPB97KnMB4hVgNFIibibaqpBUcUjBX9GricvR5iaawuwaEnxMVCYujQ/132","nickname":"ariesson","note":"","ucode":"04C7025F972EC8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540961,"discussion_content":"这点我深有体会，首先得公司放权，给时间，人手去做，如果领导给与的支持不够，那还是先满足业务的需求吧，不要大折腾，开发累，占用公司资源多，吃力不讨好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640222931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":287808,"ip_address":"","group_id":0},"score":540961,"extra":""}]}]},{"had_liked":false,"id":372192,"user_name":"听秋","can_delete":false,"product_type":"c1","uid":2564684,"ip_address":"江苏","ucode":"03CCD3B14980FA","user_header":"https://static001.geekbang.org/account/avatar/00/27/22/4c/d413494f.jpg","comment_is_top":false,"comment_ctime":1680833252,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"预测变化 → 两年法则；应对变化 → 隔离变化，封装变化，1 写 2 抄 3 重构。","like_count":1},{"had_liked":false,"id":346711,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1159120,"ip_address":"","ucode":"BF1E619F24248F","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/d0/17342a29.jpg","comment_is_top":false,"comment_ctime":1653375172,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"事不过三原则","like_count":1},{"had_liked":false,"id":320671,"user_name":"大力水手Jerry","can_delete":false,"product_type":"c1","uid":1227840,"ip_address":"","ucode":"E4A6C71E275DB5","user_header":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","comment_is_top":false,"comment_ctime":1636446073,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"先预测，再应对。预测基于对业务的深入理解，应对基于对技术的深入理解。业务暂且不论，基本的技术包括：自顶向下的结构化程序设计技术，面向对象程序设计技术、设计模式、框架或中间件（框架封装了标准和协议，隔离底层公共逻辑和上层的业务逻辑）、特定功能的系统软件（缓存、消息中间件）……","like_count":1},{"had_liked":false,"id":281057,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1614566590,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"(1)依赖抽象而不是依赖实现\n(2)在做棋牌游戏抽奖活动时，每种奖品发放的逻辑不一样【比如：银豆、话费】 抽象出来都是奖品，但是每种奖品发放的逻辑又不一样 抽象出共同的 使用设计模式  应对各种奖品方法逻辑\n(3)在对接个加快递接口时，因为个加快递接口都不一样，并且后期都有可能变化，使用了 适配器模式等  后期再加入快递100接口时  就很方便了","like_count":1},{"had_liked":false,"id":234674,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1594772243,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"用的spring   @qualifier 的分组功能和spring的ObjectFactory懒加载。进行扩展。感觉还可以","like_count":1},{"had_liked":false,"id":205242,"user_name":"荣码人生","can_delete":false,"product_type":"c1","uid":1397399,"ip_address":"","ucode":"6BD1A1991B484D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEL9JoquW6ia5A9AUkt8Ah51WQsqlpWnzwLcZwXKycAricKGOeqHf2JrVHxkHIjx5LuHnm8fJ1bJVLlA/132","comment_is_top":false,"comment_ctime":1586575457,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"结合自己的工作，再加上看了网友留言，只想到下面三种设计模式，深深觉得程序员的本职工作是实现需求，因为我们的上游是产品经理某一具体的需求，思维与工作都被限制在实现上，某一个点。而架构师的上游是整个系统设计（空间），包括系统的过去、现在和未来（时间），某一个面甚至一个立体。努力学习，利用各种案例，在用的与思考过程中来记忆，而不是死记硬背，这样尽早还是得还回去。\n以后学习设计模式，应该这样学习，从web-app-db，从上到下，去将这些设计模式分类方便记忆。\n工厂模式，数据库pool或者缓存pool，通过工厂模式创建客户端对象。\n装饰者模式，service业务层使用接口类与实现类。\n订阅与广播模式，消息队列中一种例用。","like_count":1},{"had_liked":false,"id":182671,"user_name":"谭方敏","can_delete":false,"product_type":"c1","uid":1710960,"ip_address":"","ucode":"728DC7ECB7C902","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1b/70/547042ee.jpg","comment_is_top":false,"comment_ctime":1582847544,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"日常工作中除了刚来说的装饰者模式，还有消息协议设计（抽象），消息注册和handle技术（封装）。\n在消息协议设计中，我们一般讲协议抽象为包头和包体，其中包头指定消息体长度，而包体中就按照长度来设计内容，这样就规范了整个通讯系统的格式。\n消息处理过程也是如此，网络层做到只处理三种事件（读，写，错误），应用层以后处理注册（message:handle）以及分发逻辑。\n在扩展性的思考上，尽量考虑稳定点和变化点，稳定点要基于本身内在逻辑，比如一个人，就包括衣食住行，吃喝玩乐，这就是人的大体行为，或许还有阅读思考，但是这个频率相当低，定义人的行为就可以基于这样最本质的原子操作，这是一个透过现象深究本质的过程，而变化点，其实也是一个分解的过程，需要将他分解成几个稳定点的操作集合，比如今天去优衣库，这就可以拆解为衣和行，可能还有吃喝玩乐，这些原子操作。","like_count":1},{"had_liked":false,"id":91521,"user_name":"whhbbq","can_delete":false,"product_type":"c1","uid":1018494,"ip_address":"","ucode":"4A93F3E375CB44","user_header":"","comment_is_top":false,"comment_ctime":1557047988,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"用过的可扩展的技术\n1、数据库扩展字段。效果不错，后续的开发成本很低。\n2、设计模式。比如策略模式，好处是关注点隔离、代码可读性增强、减少了代码维护成本。\n3、规则引擎。可动态配置，立即生效，无需重启服务。","like_count":1},{"had_liked":false,"id":49321,"user_name":"gkb111","can_delete":false,"product_type":"c1","uid":1224217,"ip_address":"","ucode":"9B3154BCC9046B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLUic3XzxET3L3QXxcTbeg96GMx1HkiaiaZdudchmOmtPnuEPHK5vYEeMkvJR098XljMbXDialYib3z6w/132","comment_is_top":false,"comment_ctime":1544664884,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"封装变化，隔离稳定，先分层在设计模式","like_count":1},{"had_liked":false,"id":20964,"user_name":"三毛","can_delete":false,"product_type":"c1","uid":1027722,"ip_address":"","ucode":"F9792EA10F5044","user_header":"","comment_is_top":false,"comment_ctime":1534837484,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"设计要拥抱变化，但是变化又往往是难以预测的，如何在支持变化和避免过度设计中取得平衡也是一项需要修炼的能力。","like_count":1},{"had_liked":false,"id":372192,"user_name":"听秋","can_delete":false,"product_type":"c1","uid":2564684,"ip_address":"江苏","ucode":"03CCD3B14980FA","user_header":"https://static001.geekbang.org/account/avatar/00/27/22/4c/d413494f.jpg","comment_is_top":false,"comment_ctime":1680833252,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"预测变化 → 两年法则；应对变化 → 隔离变化，封装变化，1 写 2 抄 3 重构。","like_count":1},{"had_liked":false,"id":346711,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1159120,"ip_address":"","ucode":"BF1E619F24248F","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/d0/17342a29.jpg","comment_is_top":false,"comment_ctime":1653375172,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"事不过三原则","like_count":1},{"had_liked":false,"id":320671,"user_name":"大力水手Jerry","can_delete":false,"product_type":"c1","uid":1227840,"ip_address":"","ucode":"E4A6C71E275DB5","user_header":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","comment_is_top":false,"comment_ctime":1636446073,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"先预测，再应对。预测基于对业务的深入理解，应对基于对技术的深入理解。业务暂且不论，基本的技术包括：自顶向下的结构化程序设计技术，面向对象程序设计技术、设计模式、框架或中间件（框架封装了标准和协议，隔离底层公共逻辑和上层的业务逻辑）、特定功能的系统软件（缓存、消息中间件）……","like_count":1},{"had_liked":false,"id":281057,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1614566590,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"(1)依赖抽象而不是依赖实现\n(2)在做棋牌游戏抽奖活动时，每种奖品发放的逻辑不一样【比如：银豆、话费】 抽象出来都是奖品，但是每种奖品发放的逻辑又不一样 抽象出共同的 使用设计模式  应对各种奖品方法逻辑\n(3)在对接个加快递接口时，因为个加快递接口都不一样，并且后期都有可能变化，使用了 适配器模式等  后期再加入快递100接口时  就很方便了","like_count":1},{"had_liked":false,"id":234674,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1594772243,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"用的spring   @qualifier 的分组功能和spring的ObjectFactory懒加载。进行扩展。感觉还可以","like_count":1},{"had_liked":false,"id":205242,"user_name":"荣码人生","can_delete":false,"product_type":"c1","uid":1397399,"ip_address":"","ucode":"6BD1A1991B484D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEL9JoquW6ia5A9AUkt8Ah51WQsqlpWnzwLcZwXKycAricKGOeqHf2JrVHxkHIjx5LuHnm8fJ1bJVLlA/132","comment_is_top":false,"comment_ctime":1586575457,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"结合自己的工作，再加上看了网友留言，只想到下面三种设计模式，深深觉得程序员的本职工作是实现需求，因为我们的上游是产品经理某一具体的需求，思维与工作都被限制在实现上，某一个点。而架构师的上游是整个系统设计（空间），包括系统的过去、现在和未来（时间），某一个面甚至一个立体。努力学习，利用各种案例，在用的与思考过程中来记忆，而不是死记硬背，这样尽早还是得还回去。\n以后学习设计模式，应该这样学习，从web-app-db，从上到下，去将这些设计模式分类方便记忆。\n工厂模式，数据库pool或者缓存pool，通过工厂模式创建客户端对象。\n装饰者模式，service业务层使用接口类与实现类。\n订阅与广播模式，消息队列中一种例用。","like_count":1},{"had_liked":false,"id":182671,"user_name":"谭方敏","can_delete":false,"product_type":"c1","uid":1710960,"ip_address":"","ucode":"728DC7ECB7C902","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1b/70/547042ee.jpg","comment_is_top":false,"comment_ctime":1582847544,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"日常工作中除了刚来说的装饰者模式，还有消息协议设计（抽象），消息注册和handle技术（封装）。\n在消息协议设计中，我们一般讲协议抽象为包头和包体，其中包头指定消息体长度，而包体中就按照长度来设计内容，这样就规范了整个通讯系统的格式。\n消息处理过程也是如此，网络层做到只处理三种事件（读，写，错误），应用层以后处理注册（message:handle）以及分发逻辑。\n在扩展性的思考上，尽量考虑稳定点和变化点，稳定点要基于本身内在逻辑，比如一个人，就包括衣食住行，吃喝玩乐，这就是人的大体行为，或许还有阅读思考，但是这个频率相当低，定义人的行为就可以基于这样最本质的原子操作，这是一个透过现象深究本质的过程，而变化点，其实也是一个分解的过程，需要将他分解成几个稳定点的操作集合，比如今天去优衣库，这就可以拆解为衣和行，可能还有吃喝玩乐，这些原子操作。","like_count":1},{"had_liked":false,"id":91521,"user_name":"whhbbq","can_delete":false,"product_type":"c1","uid":1018494,"ip_address":"","ucode":"4A93F3E375CB44","user_header":"","comment_is_top":false,"comment_ctime":1557047988,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"用过的可扩展的技术\n1、数据库扩展字段。效果不错，后续的开发成本很低。\n2、设计模式。比如策略模式，好处是关注点隔离、代码可读性增强、减少了代码维护成本。\n3、规则引擎。可动态配置，立即生效，无需重启服务。","like_count":1},{"had_liked":false,"id":49321,"user_name":"gkb111","can_delete":false,"product_type":"c1","uid":1224217,"ip_address":"","ucode":"9B3154BCC9046B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLUic3XzxET3L3QXxcTbeg96GMx1HkiaiaZdudchmOmtPnuEPHK5vYEeMkvJR098XljMbXDialYib3z6w/132","comment_is_top":false,"comment_ctime":1544664884,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"封装变化，隔离稳定，先分层在设计模式","like_count":1},{"had_liked":false,"id":20964,"user_name":"三毛","can_delete":false,"product_type":"c1","uid":1027722,"ip_address":"","ucode":"F9792EA10F5044","user_header":"","comment_is_top":false,"comment_ctime":1534837484,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100006601,"comment_content":"设计要拥抱变化，但是变化又往往是难以预测的，如何在支持变化和避免过度设计中取得平衡也是一项需要修炼的能力。","like_count":1},{"had_liked":false,"id":14326,"user_name":"chris","can_delete":false,"product_type":"c1","uid":1109640,"ip_address":"","ucode":"6663E3E09457E3","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/88/a890b41e.jpg","comment_is_top":false,"comment_ctime":1530291191,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"23种设计模式不是死记硬背，生搬乱套的，而是你写的业务代码确实满足了业务不断出现的变化和扩展，即使没用到这23种设计模式，也是可扩展的！","like_count":1},{"had_liked":false,"id":8463,"user_name":"铭毅天下（公众号）","can_delete":false,"product_type":"c1","uid":1103503,"ip_address":"","ucode":"D2E52833CB4A3E","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/8f/08e84557.jpg","comment_is_top":false,"comment_ctime":1526255202,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"在Elasticsearch开发API选型的时候，使用JEST，最主要的原因：jest对不同es版本都适用。\n主要考虑：ES版本更新迭代快，一个稳健的API选型，从可扩展性角度适配了ES版本的变化和更迭。","like_count":1},{"had_liked":false,"id":8084,"user_name":"李艳超_Harry","can_delete":false,"product_type":"c1","uid":1111324,"ip_address":"","ucode":"8E6EB2CD849AED","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/1c/c169406c.jpg","comment_is_top":false,"comment_ctime":1525910679,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"把一些逻辑脚本化。python grovvy","like_count":1},{"had_liked":false,"id":8078,"user_name":"成功","can_delete":false,"product_type":"c1","uid":1112099,"ip_address":"","ucode":"954B90AC92E8C3","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/23/165d2f0e.jpg","comment_is_top":false,"comment_ctime":1525909544,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"适配层用过，也就是今天讲的变化层。","like_count":1},{"had_liked":false,"id":384244,"user_name":"Venson","can_delete":false,"product_type":"c1","uid":3017350,"ip_address":"广东","ucode":"0BF0F8B53038D4","user_header":"https://static001.geekbang.org/account/avatar/00/2e/0a/86/201d2236.jpg","comment_is_top":false,"comment_ctime":1700576503,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"工程架构上的可扩展设计经验：将工程结构设计成3层架构模式，框架层，服务层，插件层，通过框架层封装抽象类，约束实现，沉淀核心技术，迭代频率极低，通过服务层开放领域能力，偶尔新增领域能力，迭代频率中，通过插件层扩展新增业务场景，迭代频率高，框架层属于稳定层，插件层属于变化层，服务层随着领域能力变化而变化\n代码设计上的可扩展设计经验：通过事件驱动设计解决系统与多个平台对接的松耦合问题，可以通过订阅的方式获取数据，通过规则引擎设计解决系统与多个平台对接的数据隔离问题，可以通过配置规则判断是否推送数据，通过模型转换设计解决系统与多个平台对接数据模型不一致的问题，可以通过配置的形式实现模型映射","like_count":0},{"had_liked":false,"id":382333,"user_name":"柯里","can_delete":false,"product_type":"c1","uid":2556517,"ip_address":"上海","ucode":"B66035EE1E389B","user_header":"https://static001.geekbang.org/account/avatar/00/27/02/65/ddb6460e.jpg","comment_is_top":false,"comment_ctime":1697085666,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"在接口的分发处，使用模板模式和策论模式：接口调用处，使用门面模式","like_count":0},{"had_liked":false,"id":378000,"user_name":"Geek_998af5","can_delete":false,"product_type":"c1","uid":2093518,"ip_address":"广东","ucode":"CAA6FA1F0D582C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqHIDzA7Au30Pm1bLCeA8RPYr35FGlNMODkZp30nTiaDo8xFibP9FWgOlialxjOGKiaOFWnVHnnXGODIA/132","comment_is_top":false,"comment_ctime":1689652552,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"可以用预测变化逻辑和预测不可变化逻辑入口写在一个地方，不可变化逻辑拆分成不同方法用以应对变化","like_count":0},{"had_liked":false,"id":359665,"user_name":"Nights","can_delete":false,"product_type":"c1","uid":1194853,"ip_address":"北京","ucode":"00E54A5C7CDCBE","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/65/7a01c8c8.jpg","comment_is_top":false,"comment_ctime":1665737101,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"1、设计模式\n2、复杂代码分解，变化部分单独抽出方法\n3、分布式配置中心，把需要变化的配置资源，如图片url、文案等放在配置中，热发布\n4、消息队列解耦","like_count":0},{"had_liked":false,"id":354485,"user_name":"李晨","can_delete":false,"product_type":"c1","uid":2716735,"ip_address":"北京","ucode":"D734DE3B9A5A2D","user_header":"https://static001.geekbang.org/account/avatar/00/29/74/3f/5c9fd08f.jpg","comment_is_top":false,"comment_ctime":1660460123,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"我做的是跨境电商营销工具中的CDP和独立站数据对接的部分：\n1、使用策略模式，对接独立站中不同主题（下单成功、取消订单、新增商品等）的数据。对接新主题的时候，只需要实现接口，重写方法即可。\n2、使用模板方法模式，以及遵循接口隔离原则，解析不同独立站的优惠规则的各项规则。继承抽象类之后，只需要重写解析对应规则的方法即可。","like_count":0},{"had_liked":false,"id":343683,"user_name":"林肯","can_delete":false,"product_type":"c1","uid":1008582,"ip_address":"","ucode":"D2C97220230DE5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/c6/0167415c.jpg","comment_is_top":false,"comment_ctime":1650980826,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"1、预测2年内的变化；\n2、应对变化：\n（1）提炼出稳定层和变化层；\n（2）提炼出抽象层和实现层；\n3、重构原则：1写2抄3重构","like_count":0},{"had_liked":false,"id":14326,"user_name":"chris","can_delete":false,"product_type":"c1","uid":1109640,"ip_address":"","ucode":"6663E3E09457E3","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/88/a890b41e.jpg","comment_is_top":false,"comment_ctime":1530291191,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"23种设计模式不是死记硬背，生搬乱套的，而是你写的业务代码确实满足了业务不断出现的变化和扩展，即使没用到这23种设计模式，也是可扩展的！","like_count":1},{"had_liked":false,"id":8463,"user_name":"铭毅天下（公众号）","can_delete":false,"product_type":"c1","uid":1103503,"ip_address":"","ucode":"D2E52833CB4A3E","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/8f/08e84557.jpg","comment_is_top":false,"comment_ctime":1526255202,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"在Elasticsearch开发API选型的时候，使用JEST，最主要的原因：jest对不同es版本都适用。\n主要考虑：ES版本更新迭代快，一个稳健的API选型，从可扩展性角度适配了ES版本的变化和更迭。","like_count":1},{"had_liked":false,"id":8084,"user_name":"李艳超_Harry","can_delete":false,"product_type":"c1","uid":1111324,"ip_address":"","ucode":"8E6EB2CD849AED","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/1c/c169406c.jpg","comment_is_top":false,"comment_ctime":1525910679,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"把一些逻辑脚本化。python grovvy","like_count":1},{"had_liked":false,"id":8078,"user_name":"成功","can_delete":false,"product_type":"c1","uid":1112099,"ip_address":"","ucode":"954B90AC92E8C3","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/23/165d2f0e.jpg","comment_is_top":false,"comment_ctime":1525909544,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"适配层用过，也就是今天讲的变化层。","like_count":1},{"had_liked":false,"id":384244,"user_name":"Venson","can_delete":false,"product_type":"c1","uid":3017350,"ip_address":"广东","ucode":"0BF0F8B53038D4","user_header":"https://static001.geekbang.org/account/avatar/00/2e/0a/86/201d2236.jpg","comment_is_top":false,"comment_ctime":1700576503,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"工程架构上的可扩展设计经验：将工程结构设计成3层架构模式，框架层，服务层，插件层，通过框架层封装抽象类，约束实现，沉淀核心技术，迭代频率极低，通过服务层开放领域能力，偶尔新增领域能力，迭代频率中，通过插件层扩展新增业务场景，迭代频率高，框架层属于稳定层，插件层属于变化层，服务层随着领域能力变化而变化\n代码设计上的可扩展设计经验：通过事件驱动设计解决系统与多个平台对接的松耦合问题，可以通过订阅的方式获取数据，通过规则引擎设计解决系统与多个平台对接的数据隔离问题，可以通过配置规则判断是否推送数据，通过模型转换设计解决系统与多个平台对接数据模型不一致的问题，可以通过配置的形式实现模型映射","like_count":0},{"had_liked":false,"id":382333,"user_name":"柯里","can_delete":false,"product_type":"c1","uid":2556517,"ip_address":"上海","ucode":"B66035EE1E389B","user_header":"https://static001.geekbang.org/account/avatar/00/27/02/65/ddb6460e.jpg","comment_is_top":false,"comment_ctime":1697085666,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"在接口的分发处，使用模板模式和策论模式：接口调用处，使用门面模式","like_count":0},{"had_liked":false,"id":378000,"user_name":"Geek_998af5","can_delete":false,"product_type":"c1","uid":2093518,"ip_address":"广东","ucode":"CAA6FA1F0D582C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqHIDzA7Au30Pm1bLCeA8RPYr35FGlNMODkZp30nTiaDo8xFibP9FWgOlialxjOGKiaOFWnVHnnXGODIA/132","comment_is_top":false,"comment_ctime":1689652552,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"可以用预测变化逻辑和预测不可变化逻辑入口写在一个地方，不可变化逻辑拆分成不同方法用以应对变化","like_count":0},{"had_liked":false,"id":359665,"user_name":"Nights","can_delete":false,"product_type":"c1","uid":1194853,"ip_address":"北京","ucode":"00E54A5C7CDCBE","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/65/7a01c8c8.jpg","comment_is_top":false,"comment_ctime":1665737101,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"1、设计模式\n2、复杂代码分解，变化部分单独抽出方法\n3、分布式配置中心，把需要变化的配置资源，如图片url、文案等放在配置中，热发布\n4、消息队列解耦","like_count":0},{"had_liked":false,"id":354485,"user_name":"李晨","can_delete":false,"product_type":"c1","uid":2716735,"ip_address":"北京","ucode":"D734DE3B9A5A2D","user_header":"https://static001.geekbang.org/account/avatar/00/29/74/3f/5c9fd08f.jpg","comment_is_top":false,"comment_ctime":1660460123,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"我做的是跨境电商营销工具中的CDP和独立站数据对接的部分：\n1、使用策略模式，对接独立站中不同主题（下单成功、取消订单、新增商品等）的数据。对接新主题的时候，只需要实现接口，重写方法即可。\n2、使用模板方法模式，以及遵循接口隔离原则，解析不同独立站的优惠规则的各项规则。继承抽象类之后，只需要重写解析对应规则的方法即可。","like_count":0},{"had_liked":false,"id":343683,"user_name":"林肯","can_delete":false,"product_type":"c1","uid":1008582,"ip_address":"","ucode":"D2C97220230DE5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/c6/0167415c.jpg","comment_is_top":false,"comment_ctime":1650980826,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100006601,"comment_content":"1、预测2年内的变化；\n2、应对变化：\n（1）提炼出稳定层和变化层；\n（2）提炼出抽象层和实现层；\n3、重构原则：1写2抄3重构","like_count":0},{"had_liked":false,"id":334238,"user_name":"hzy","can_delete":false,"product_type":"c1","uid":1285568,"ip_address":"","ucode":"6DE192B7E8F1CC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/XSibEZ9YDvTslicIFMichialduuwibwm1dDNl0BsL565B9u2Zc65rMcwibluem3HazRYF9EkDu8n9w83Kd4iaJepQXOUg/132","comment_is_top":false,"comment_ctime":1644824694,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"面向接口编程","like_count":0},{"had_liked":false,"id":332901,"user_name":"易飞","can_delete":false,"product_type":"c1","uid":2630424,"ip_address":"","ucode":"32AC28754237F7","user_header":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","comment_is_top":false,"comment_ctime":1643796438,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"分层","like_count":0},{"had_liked":false,"id":329145,"user_name":"子非鱼","can_delete":false,"product_type":"c1","uid":1146001,"ip_address":"","ucode":"7577222878C1E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/91/0d8e2472.jpg","comment_is_top":false,"comment_ctime":1641179209,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"可扩展性本质上是应对需求变化，需求又分为功能需求和性能需求","like_count":0},{"had_liked":false,"id":318433,"user_name":"刘磊","can_delete":false,"product_type":"c1","uid":2231430,"ip_address":"","ucode":"B2222602633B76","user_header":"https://static001.geekbang.org/account/avatar/00/22/0c/86/2c64563f.jpg","comment_is_top":false,"comment_ctime":1635299032,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"抽象层也是稳定层，实现层也是变化层。","like_count":0},{"had_liked":false,"id":315106,"user_name":"tungSing","can_delete":false,"product_type":"c1","uid":1402570,"ip_address":"","ucode":"F7147EA351BE44","user_header":"https://static001.geekbang.org/account/avatar/00/15/66/ca/fb5c3a30.jpg","comment_is_top":false,"comment_ctime":1633689240,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"之前用了适配器模式来实现同一套页面或者叫表结构来适配不同的品牌方的传感器传输给应用程序的数据，效果还不错，来个一个品牌的传感器数据就按照它的数据格式转换为自己应用的数据即可，扩展性相对还可以","like_count":0},{"had_liked":false,"id":252810,"user_name":"leesper","can_delete":false,"product_type":"c1","uid":1351104,"ip_address":"","ucode":"CC76320571BECA","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/c0/cb5341ec.jpg","comment_is_top":false,"comment_ctime":1602492242,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"用设计模式中的工厂模式来设计手游中的扭蛋系统","like_count":0},{"had_liked":false,"id":244069,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1598371618,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"根据业务在一定程度上进行功能的粒度拆分，保证单一职责，这样整个业务就是可组装的形式。具体落实到代码上，通过面向接口编写代码，大体上能做到相对比较的可扩展性。","like_count":0},{"had_liked":false,"id":217510,"user_name":"程序员小岑","can_delete":false,"product_type":"c1","uid":1004089,"ip_address":"","ucode":"ECDE8A03AB3A31","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/39/3cc59148.jpg","comment_is_top":false,"comment_ctime":1589521853,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"抽象出公共部分，各个子流程实现当中的接口，类似于模板模式","like_count":0},{"had_liked":false,"id":171467,"user_name":"小刀","can_delete":false,"product_type":"c1","uid":1351063,"ip_address":"","ucode":"94DF8C45E09E42","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaByN5IfYbE9jMtWrtTDXtPEIHeV77KW1p7ZkiasiaGgA50VXaibo4fbp5ib2JkFP3iaIe4AUudLibufkEIofu5euCNHg/132","comment_is_top":false,"comment_ctime":1578927150,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"封装变化，隔离可变性","like_count":0},{"had_liked":false,"id":169381,"user_name":"且听风行","can_delete":false,"product_type":"c1","uid":1285153,"ip_address":"","ucode":"BA55B13EB64F34","user_header":"https://static001.geekbang.org/account/avatar/00/13/9c/21/5e087146.jpg","comment_is_top":false,"comment_ctime":1578324189,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"笔记：\n1. 什么buff","like_count":0},{"had_liked":false,"id":334238,"user_name":"hzy","can_delete":false,"product_type":"c1","uid":1285568,"ip_address":"","ucode":"6DE192B7E8F1CC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/XSibEZ9YDvTslicIFMichialduuwibwm1dDNl0BsL565B9u2Zc65rMcwibluem3HazRYF9EkDu8n9w83Kd4iaJepQXOUg/132","comment_is_top":false,"comment_ctime":1644824694,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"面向接口编程","like_count":0},{"had_liked":false,"id":332901,"user_name":"易飞","can_delete":false,"product_type":"c1","uid":2630424,"ip_address":"","ucode":"32AC28754237F7","user_header":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","comment_is_top":false,"comment_ctime":1643796438,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"分层","like_count":0},{"had_liked":false,"id":329145,"user_name":"子非鱼","can_delete":false,"product_type":"c1","uid":1146001,"ip_address":"","ucode":"7577222878C1E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/91/0d8e2472.jpg","comment_is_top":false,"comment_ctime":1641179209,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"可扩展性本质上是应对需求变化，需求又分为功能需求和性能需求","like_count":0},{"had_liked":false,"id":318433,"user_name":"刘磊","can_delete":false,"product_type":"c1","uid":2231430,"ip_address":"","ucode":"B2222602633B76","user_header":"https://static001.geekbang.org/account/avatar/00/22/0c/86/2c64563f.jpg","comment_is_top":false,"comment_ctime":1635299032,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"抽象层也是稳定层，实现层也是变化层。","like_count":0},{"had_liked":false,"id":315106,"user_name":"tungSing","can_delete":false,"product_type":"c1","uid":1402570,"ip_address":"","ucode":"F7147EA351BE44","user_header":"https://static001.geekbang.org/account/avatar/00/15/66/ca/fb5c3a30.jpg","comment_is_top":false,"comment_ctime":1633689240,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"之前用了适配器模式来实现同一套页面或者叫表结构来适配不同的品牌方的传感器传输给应用程序的数据，效果还不错，来个一个品牌的传感器数据就按照它的数据格式转换为自己应用的数据即可，扩展性相对还可以","like_count":0},{"had_liked":false,"id":252810,"user_name":"leesper","can_delete":false,"product_type":"c1","uid":1351104,"ip_address":"","ucode":"CC76320571BECA","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/c0/cb5341ec.jpg","comment_is_top":false,"comment_ctime":1602492242,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"用设计模式中的工厂模式来设计手游中的扭蛋系统","like_count":0},{"had_liked":false,"id":244069,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1598371618,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"根据业务在一定程度上进行功能的粒度拆分，保证单一职责，这样整个业务就是可组装的形式。具体落实到代码上，通过面向接口编写代码，大体上能做到相对比较的可扩展性。","like_count":0},{"had_liked":false,"id":217510,"user_name":"程序员小岑","can_delete":false,"product_type":"c1","uid":1004089,"ip_address":"","ucode":"ECDE8A03AB3A31","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/39/3cc59148.jpg","comment_is_top":false,"comment_ctime":1589521853,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"抽象出公共部分，各个子流程实现当中的接口，类似于模板模式","like_count":0},{"had_liked":false,"id":171467,"user_name":"小刀","can_delete":false,"product_type":"c1","uid":1351063,"ip_address":"","ucode":"94DF8C45E09E42","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaByN5IfYbE9jMtWrtTDXtPEIHeV77KW1p7ZkiasiaGgA50VXaibo4fbp5ib2JkFP3iaIe4AUudLibufkEIofu5euCNHg/132","comment_is_top":false,"comment_ctime":1578927150,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"封装变化，隔离可变性","like_count":0},{"had_liked":false,"id":169381,"user_name":"且听风行","can_delete":false,"product_type":"c1","uid":1285153,"ip_address":"","ucode":"BA55B13EB64F34","user_header":"https://static001.geekbang.org/account/avatar/00/13/9c/21/5e087146.jpg","comment_is_top":false,"comment_ctime":1578324189,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100006601,"comment_content":"笔记：\n1. 什么buff","like_count":0},{"had_liked":false,"id":165552,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1577259081,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":13,"product_id":100006601,"comment_content":"可扩展性属于非功能性需求，需要在架构设计的时候进行考虑。\n一般会有三种方式：\n1. 使用分层设计，例如网络分层、MVC分层等，这样尽量做到职责清晰，避免所有代码混在一起。\n2. 引入设计模式，封装变化，针对可能变化的部分，做一个抽象层，维持接口定义稳定。\n3. 系统之间调用尽量解耦，可以考虑引入消息队列。","like_count":0},{"had_liked":false,"id":127329,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1566655607,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"课后思考及问题\n1：关键思想\n1-1：设计具备良好可扩展性的系统，有两个基本条件：正确预测变化、完美封装变化。但要达成这两个条件，本身也是一件复杂的事情。\n1-2：设计模式的核心思想——封装变化，隔离可变性，这个思想对于需要考虑动态平衡的场景估计都需要，比如：战争，棋类游戏\n2：代码层面我们是怎么实现可扩展性的？\n2-1：计算逻辑，依赖业务配置，配置数据非常灵活\n2-2：切换业务逻辑的时候，通过动态的业务开关\n2-3：验证逻辑时，通常通过黑白名单的方式\n2-4：系统间交互通常使用RPC或MQ，组件可复用\n看了几篇，听懂没问题，也不烧脑，不过让我提出什么一针见血的问题，也提不出来😜，估计功力有限。\n","like_count":0},{"had_liked":false,"id":86269,"user_name":"凌","can_delete":false,"product_type":"c1","uid":1120319,"ip_address":"","ucode":"D0AA0C787EE004","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/3f/7b33cd3c.jpg","comment_is_top":false,"comment_ctime":1555335781,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"互联网时代下，某个系统的需求不可能是一成不变的，面对这种不断的变化，我们常采用设计模式、面向对象等方式来构建系统，目的是为了在系统有了新需求之后代码的改动尽量小\n可扩展的系统有两个基本的条件：\n1.正确预测变化\n2.妥善应对变化\n3.完美封装变化\n正确预测变化\n预测变化代表着该需求可能不一定会产生变化，所以有时候容易造成过度设计\n无法把每个设计点都考虑拓展性，这样一来架构很重很大\n妥善应对变化\n正确预测可能变化的需求，在应对变化的时候，我们要把业务系统分成两层：业务稳定层、业务变化层。\t\n\n\n\n\n\n对于系统，我们要拆分出稳定层和变化层。对于系统内部，在增加新功能的同时，应该不影响旧的功能，不需要对旧功能模块做修改。对于整个微服务来说，服务之间是松耦合的状态，服务A的修改应该尽量不影响服务B。\n结构化编程的拓展是面向对象编程，而后又诞生了设计模式用来维持拓展性，例如装饰者模式：\n\n\n--------------------------------------------------------------------------------\n","like_count":0},{"had_liked":false,"id":86224,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1149402,"ip_address":"","ucode":"AD6933D125C930","user_header":"https://static001.geekbang.org/account/avatar/00/11/89/da/136cdca6.jpg","comment_is_top":false,"comment_ctime":1555327746,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"可扩展性的思路：抽象、分层。\n一方面是业务逻辑接口上的抽象，一方面是业务层次（生命周期）上的抽象。\n服务的职责尽量清晰、简单、独立。","like_count":0},{"had_liked":false,"id":85149,"user_name":"到道可道","can_delete":false,"product_type":"c1","uid":1031181,"ip_address":"","ucode":"12B94B6C26BE0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/0d/00424e81.jpg","comment_is_top":false,"comment_ctime":1554989991,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":13,"product_id":100006601,"comment_content":"1.拆分出变化层和稳定层；\n2.设计变化层和稳定层间的接口。","like_count":0},{"had_liked":false,"id":29692,"user_name":"张汉桂-东莞","can_delete":false,"product_type":"c1","uid":1116277,"ip_address":"","ucode":"38657ABA59382A","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/75/512b9f26.jpg","comment_is_top":false,"comment_ctime":1538488898,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"还没用过可扩展技术。惭愧啊","like_count":0},{"had_liked":false,"id":20464,"user_name":"文竹","can_delete":false,"product_type":"c1","uid":1103167,"ip_address":"","ucode":"74413B1975976B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/3f/80bf4841.jpg","comment_is_top":false,"comment_ctime":1534465789,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"目前为止，接触过两类系统，小系统和ERP系统。对于小系统来说，还没发现可扩展性的重要程度，一个点在于是否需要支持单元测试。对于ERP来说由于功能（会新增界面，业务逻辑，数据库或表）需要自定义，这类系统就凸现出了扩展性的重要程度。","like_count":0},{"had_liked":false,"id":16665,"user_name":"走神儿","can_delete":false,"product_type":"c1","uid":1182797,"ip_address":"","ucode":"3C9B29B646FEC8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/4d/d185f942.jpg","comment_is_top":false,"comment_ctime":1532084777,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"说说我做的一个系统，主要功能就是根据用户提供的信息获取用户征信数据。于是我看了大概10个左右的第三方获取数据的过程，从中抽象出了获取数据的几个方法并封装为接口，然后再为这个接口提供一个运行容器，在容器中会写一些获取征信数据的公共代码，例如数据有效期验证，征信数据入库，用户数据收集等，不同的第三方只需要实现接口，创建实例后往运行容器一传即可。因为第三方太多抽象的方法可能不够通用，打算将运行容器做不同实现，将第三方的接口高度一致的方法上提，将具体方法下沉到子接口中","like_count":0},{"had_liked":false,"id":10836,"user_name":"zhoubo","can_delete":false,"product_type":"c1","uid":1116259,"ip_address":"","ucode":"DA7AC4DC578942","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/63/29e445bb.jpg","comment_is_top":false,"comment_ctime":1527727144,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"华哥，你好，想实现docker部署基础上的项目的自动扩缩容，k8s 又觉得太重，请问有轻量级的技术可选吗？","like_count":0},{"had_liked":false,"id":9239,"user_name":"古座","can_delete":false,"product_type":"c1","uid":1100044,"ip_address":"","ucode":"0980C741272E03","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/0c/117dd3e0.jpg","comment_is_top":false,"comment_ctime":1526699942,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"Spi、动态编译。\nDDD，对复杂逻辑和扩展性非常友好，但是不好理解程序员学习成本高，按需简化了。\n洋葱架构，按职责抽象好几层，比DDD学习成本低。\nESB，异构系统，踩了很多坑……\nAkka，raft，gossip自己玩儿的，一直没机会用在项目里……\n\n\n","like_count":0},{"had_liked":false,"id":165552,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1577259081,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":13,"product_id":100006601,"comment_content":"可扩展性属于非功能性需求，需要在架构设计的时候进行考虑。\n一般会有三种方式：\n1. 使用分层设计，例如网络分层、MVC分层等，这样尽量做到职责清晰，避免所有代码混在一起。\n2. 引入设计模式，封装变化，针对可能变化的部分，做一个抽象层，维持接口定义稳定。\n3. 系统之间调用尽量解耦，可以考虑引入消息队列。","like_count":0},{"had_liked":false,"id":127329,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1566655607,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"课后思考及问题\n1：关键思想\n1-1：设计具备良好可扩展性的系统，有两个基本条件：正确预测变化、完美封装变化。但要达成这两个条件，本身也是一件复杂的事情。\n1-2：设计模式的核心思想——封装变化，隔离可变性，这个思想对于需要考虑动态平衡的场景估计都需要，比如：战争，棋类游戏\n2：代码层面我们是怎么实现可扩展性的？\n2-1：计算逻辑，依赖业务配置，配置数据非常灵活\n2-2：切换业务逻辑的时候，通过动态的业务开关\n2-3：验证逻辑时，通常通过黑白名单的方式\n2-4：系统间交互通常使用RPC或MQ，组件可复用\n看了几篇，听懂没问题，也不烧脑，不过让我提出什么一针见血的问题，也提不出来😜，估计功力有限。\n","like_count":0},{"had_liked":false,"id":86269,"user_name":"凌","can_delete":false,"product_type":"c1","uid":1120319,"ip_address":"","ucode":"D0AA0C787EE004","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/3f/7b33cd3c.jpg","comment_is_top":false,"comment_ctime":1555335781,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"互联网时代下，某个系统的需求不可能是一成不变的，面对这种不断的变化，我们常采用设计模式、面向对象等方式来构建系统，目的是为了在系统有了新需求之后代码的改动尽量小\n可扩展的系统有两个基本的条件：\n1.正确预测变化\n2.妥善应对变化\n3.完美封装变化\n正确预测变化\n预测变化代表着该需求可能不一定会产生变化，所以有时候容易造成过度设计\n无法把每个设计点都考虑拓展性，这样一来架构很重很大\n妥善应对变化\n正确预测可能变化的需求，在应对变化的时候，我们要把业务系统分成两层：业务稳定层、业务变化层。\t\n\n\n\n\n\n对于系统，我们要拆分出稳定层和变化层。对于系统内部，在增加新功能的同时，应该不影响旧的功能，不需要对旧功能模块做修改。对于整个微服务来说，服务之间是松耦合的状态，服务A的修改应该尽量不影响服务B。\n结构化编程的拓展是面向对象编程，而后又诞生了设计模式用来维持拓展性，例如装饰者模式：\n\n\n--------------------------------------------------------------------------------\n","like_count":0},{"had_liked":false,"id":86224,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1149402,"ip_address":"","ucode":"AD6933D125C930","user_header":"https://static001.geekbang.org/account/avatar/00/11/89/da/136cdca6.jpg","comment_is_top":false,"comment_ctime":1555327746,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"可扩展性的思路：抽象、分层。\n一方面是业务逻辑接口上的抽象，一方面是业务层次（生命周期）上的抽象。\n服务的职责尽量清晰、简单、独立。","like_count":0},{"had_liked":false,"id":85149,"user_name":"到道可道","can_delete":false,"product_type":"c1","uid":1031181,"ip_address":"","ucode":"12B94B6C26BE0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/0d/00424e81.jpg","comment_is_top":false,"comment_ctime":1554989991,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":13,"product_id":100006601,"comment_content":"1.拆分出变化层和稳定层；\n2.设计变化层和稳定层间的接口。","like_count":0},{"had_liked":false,"id":29692,"user_name":"张汉桂-东莞","can_delete":false,"product_type":"c1","uid":1116277,"ip_address":"","ucode":"38657ABA59382A","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/75/512b9f26.jpg","comment_is_top":false,"comment_ctime":1538488898,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"还没用过可扩展技术。惭愧啊","like_count":0},{"had_liked":false,"id":20464,"user_name":"文竹","can_delete":false,"product_type":"c1","uid":1103167,"ip_address":"","ucode":"74413B1975976B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/3f/80bf4841.jpg","comment_is_top":false,"comment_ctime":1534465789,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"目前为止，接触过两类系统，小系统和ERP系统。对于小系统来说，还没发现可扩展性的重要程度，一个点在于是否需要支持单元测试。对于ERP来说由于功能（会新增界面，业务逻辑，数据库或表）需要自定义，这类系统就凸现出了扩展性的重要程度。","like_count":0},{"had_liked":false,"id":16665,"user_name":"走神儿","can_delete":false,"product_type":"c1","uid":1182797,"ip_address":"","ucode":"3C9B29B646FEC8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/4d/d185f942.jpg","comment_is_top":false,"comment_ctime":1532084777,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"说说我做的一个系统，主要功能就是根据用户提供的信息获取用户征信数据。于是我看了大概10个左右的第三方获取数据的过程，从中抽象出了获取数据的几个方法并封装为接口，然后再为这个接口提供一个运行容器，在容器中会写一些获取征信数据的公共代码，例如数据有效期验证，征信数据入库，用户数据收集等，不同的第三方只需要实现接口，创建实例后往运行容器一传即可。因为第三方太多抽象的方法可能不够通用，打算将运行容器做不同实现，将第三方的接口高度一致的方法上提，将具体方法下沉到子接口中","like_count":0},{"had_liked":false,"id":10836,"user_name":"zhoubo","can_delete":false,"product_type":"c1","uid":1116259,"ip_address":"","ucode":"DA7AC4DC578942","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/63/29e445bb.jpg","comment_is_top":false,"comment_ctime":1527727144,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"华哥，你好，想实现docker部署基础上的项目的自动扩缩容，k8s 又觉得太重，请问有轻量级的技术可选吗？","like_count":0},{"had_liked":false,"id":9239,"user_name":"古座","can_delete":false,"product_type":"c1","uid":1100044,"ip_address":"","ucode":"0980C741272E03","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/0c/117dd3e0.jpg","comment_is_top":false,"comment_ctime":1526699942,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100006601,"comment_content":"Spi、动态编译。\nDDD，对复杂逻辑和扩展性非常友好，但是不好理解程序员学习成本高，按需简化了。\n洋葱架构，按职责抽象好几层，比DDD学习成本低。\nESB，异构系统，踩了很多坑……\nAkka，raft，gossip自己玩儿的，一直没机会用在项目里……\n\n\n","like_count":0},{"had_liked":false,"id":8728,"user_name":"路易斯陈凯瑞","can_delete":false,"product_type":"c1","uid":1109703,"ip_address":"","ucode":"4FF5E5F970E9AC","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/c7/f8480f6b.jpg","comment_is_top":false,"comment_ctime":1526388459,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"从个人经历来说扩展性更多体现在功能设计阶段，结合业务理解应用设计模式或者一些最佳实践，用的比较多的就是模版方法。","like_count":0},{"had_liked":false,"id":8581,"user_name":"Sruby","can_delete":false,"product_type":"c1","uid":1016232,"ip_address":"","ucode":"A7D1B93F41DA0F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/a8/559afe8b.jpg","comment_is_top":false,"comment_ctime":1526344251,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"对于业务流程相同的子类业务，使用抽象类来定义流程，各个业务子类只要实现各自的业务就可以。","like_count":0},{"had_liked":false,"id":8545,"user_name":"张驰","can_delete":false,"product_type":"c1","uid":1080050,"ip_address":"","ucode":"0ED97C2FCE6599","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/f2/6770d0a9.jpg","comment_is_top":false,"comment_ctime":1526308052,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"SPI 动态实现","like_count":0},{"had_liked":false,"id":8377,"user_name":"云辉","can_delete":false,"product_type":"c1","uid":1103058,"ip_address":"","ucode":"0E67E8E8421294","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/d2/96dbfa5a.jpg","comment_is_top":false,"comment_ctime":1526135865,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"扩展性可以理解为最小成本实现变化吧，分层，接口，配置都是思路吧，看谁抽象的功夫深了，不一定要面向对象。","like_count":0},{"had_liked":false,"id":8338,"user_name":"Mario","can_delete":false,"product_type":"c1","uid":1111208,"ip_address":"","ucode":"34B9D39C949446","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/a8/15501a28.jpg","comment_is_top":false,"comment_ctime":1526099104,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"可扩展性，我觉着是个相当复杂的复杂性。\n首先，什么是扩展，在哪里扩展，这就不是容易达成一致的；\n其次，为什么是扩展而不是各司其职，也是个好问题；\n最近几天在思考是重构还是重写的问题，资源不足又要做就重构，资源充足就重写，看着简单的答案，还是无从下手；\n今天为大师兄们留下的小300万行代码打补丁，吐槽，怎么做才能不让小师弟继续吐槽？重构或者重写能解决？\n会不会没等小师弟吐槽，回过头来自己就吐槽自己，总结，如果做不到一边生产，一边重构，除了过度设计没有啥重用和复用的捷径","like_count":0},{"had_liked":false,"id":8266,"user_name":"彡工鸟","can_delete":false,"product_type":"c1","uid":1108881,"ip_address":"","ucode":"37867BF7151F33","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/91/12612612.jpg","comment_is_top":false,"comment_ctime":1526014930,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"这里无法跟作者好好交流:(只能另外留言。其实我想说的是在扩展方面，无论是架构还是代码层面，其实都离不开软件那几大设计原则，而且不用太死记硬背。就像设计模式只是总结出来，而不是某个时间点蹦哒出来。会使用这些只是代表很好的封装了变化。会设计架构肯定能很好用这些原则，反过来是不成立的","like_count":0},{"had_liked":false,"id":8254,"user_name":"老王","can_delete":false,"product_type":"c1","uid":1054710,"ip_address":"","ucode":"02AA850A7A9767","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/f6/87aac8c1.jpg","comment_is_top":false,"comment_ctime":1526005660,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"今天学习了，系统要区分“稳定层”和“变化层”。而且变化层也不只是为了扩展吧，变化层可能为需要经常改动的逻辑代码，如果稳定层的代码需要经常改动，那么程序就会bug不断。","like_count":0},{"had_liked":false,"id":8230,"user_name":"anchor","can_delete":false,"product_type":"c1","uid":1083124,"ip_address":"","ucode":"24EECD40CC54C2","user_header":"https://static001.geekbang.org/account/avatar/00/10/86/f4/331f33a7.jpg","comment_is_top":false,"comment_ctime":1525998797,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"根据不同配送商查询不同数据和打印不同格式面单，通过将将获取数据和打印请求的代码做到可配置到数据库，执行时候动态生成，执行的方式解决","like_count":0},{"had_liked":false,"id":8228,"user_name":"亚伦碎语","can_delete":false,"product_type":"c1","uid":1014505,"ip_address":"","ucode":"F32E5E1B63CC90","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/e9/da5c0203.jpg","comment_is_top":false,"comment_ctime":1525998760,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"个人觉得可扩展性，是一个高级开发人员的衡量标准，也是迈向架构的第一步，如果说高性能和高可用还可以用机器来扛的话，那么可扩展就真是代码功力了。最近在做组件库，深感设计一个好的组件库的不容易。尤其是考虑到要让使用者用的简单，但是又易于扩展，有的时候就是个悖论。另外老师能不能讲讲在FP下的扩展性怎么做呢？","like_count":0},{"had_liked":false,"id":8200,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1525965409,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"抽象出业务流，使用责任链来进行实现，可直街实现接口完成扩张，不修改原有代码","like_count":0},{"had_liked":false,"id":8728,"user_name":"路易斯陈凯瑞","can_delete":false,"product_type":"c1","uid":1109703,"ip_address":"","ucode":"4FF5E5F970E9AC","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/c7/f8480f6b.jpg","comment_is_top":false,"comment_ctime":1526388459,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"从个人经历来说扩展性更多体现在功能设计阶段，结合业务理解应用设计模式或者一些最佳实践，用的比较多的就是模版方法。","like_count":0},{"had_liked":false,"id":8581,"user_name":"Sruby","can_delete":false,"product_type":"c1","uid":1016232,"ip_address":"","ucode":"A7D1B93F41DA0F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/a8/559afe8b.jpg","comment_is_top":false,"comment_ctime":1526344251,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"对于业务流程相同的子类业务，使用抽象类来定义流程，各个业务子类只要实现各自的业务就可以。","like_count":0},{"had_liked":false,"id":8545,"user_name":"张驰","can_delete":false,"product_type":"c1","uid":1080050,"ip_address":"","ucode":"0ED97C2FCE6599","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/f2/6770d0a9.jpg","comment_is_top":false,"comment_ctime":1526308052,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"SPI 动态实现","like_count":0},{"had_liked":false,"id":8377,"user_name":"云辉","can_delete":false,"product_type":"c1","uid":1103058,"ip_address":"","ucode":"0E67E8E8421294","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/d2/96dbfa5a.jpg","comment_is_top":false,"comment_ctime":1526135865,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"扩展性可以理解为最小成本实现变化吧，分层，接口，配置都是思路吧，看谁抽象的功夫深了，不一定要面向对象。","like_count":0},{"had_liked":false,"id":8338,"user_name":"Mario","can_delete":false,"product_type":"c1","uid":1111208,"ip_address":"","ucode":"34B9D39C949446","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/a8/15501a28.jpg","comment_is_top":false,"comment_ctime":1526099104,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"可扩展性，我觉着是个相当复杂的复杂性。\n首先，什么是扩展，在哪里扩展，这就不是容易达成一致的；\n其次，为什么是扩展而不是各司其职，也是个好问题；\n最近几天在思考是重构还是重写的问题，资源不足又要做就重构，资源充足就重写，看着简单的答案，还是无从下手；\n今天为大师兄们留下的小300万行代码打补丁，吐槽，怎么做才能不让小师弟继续吐槽？重构或者重写能解决？\n会不会没等小师弟吐槽，回过头来自己就吐槽自己，总结，如果做不到一边生产，一边重构，除了过度设计没有啥重用和复用的捷径","like_count":0},{"had_liked":false,"id":8266,"user_name":"彡工鸟","can_delete":false,"product_type":"c1","uid":1108881,"ip_address":"","ucode":"37867BF7151F33","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/91/12612612.jpg","comment_is_top":false,"comment_ctime":1526014930,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"这里无法跟作者好好交流:(只能另外留言。其实我想说的是在扩展方面，无论是架构还是代码层面，其实都离不开软件那几大设计原则，而且不用太死记硬背。就像设计模式只是总结出来，而不是某个时间点蹦哒出来。会使用这些只是代表很好的封装了变化。会设计架构肯定能很好用这些原则，反过来是不成立的","like_count":0},{"had_liked":false,"id":8254,"user_name":"老王","can_delete":false,"product_type":"c1","uid":1054710,"ip_address":"","ucode":"02AA850A7A9767","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/f6/87aac8c1.jpg","comment_is_top":false,"comment_ctime":1526005660,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"今天学习了，系统要区分“稳定层”和“变化层”。而且变化层也不只是为了扩展吧，变化层可能为需要经常改动的逻辑代码，如果稳定层的代码需要经常改动，那么程序就会bug不断。","like_count":0},{"had_liked":false,"id":8230,"user_name":"anchor","can_delete":false,"product_type":"c1","uid":1083124,"ip_address":"","ucode":"24EECD40CC54C2","user_header":"https://static001.geekbang.org/account/avatar/00/10/86/f4/331f33a7.jpg","comment_is_top":false,"comment_ctime":1525998797,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"根据不同配送商查询不同数据和打印不同格式面单，通过将将获取数据和打印请求的代码做到可配置到数据库，执行时候动态生成，执行的方式解决","like_count":0},{"had_liked":false,"id":8228,"user_name":"亚伦碎语","can_delete":false,"product_type":"c1","uid":1014505,"ip_address":"","ucode":"F32E5E1B63CC90","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/e9/da5c0203.jpg","comment_is_top":false,"comment_ctime":1525998760,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"个人觉得可扩展性，是一个高级开发人员的衡量标准，也是迈向架构的第一步，如果说高性能和高可用还可以用机器来扛的话，那么可扩展就真是代码功力了。最近在做组件库，深感设计一个好的组件库的不容易。尤其是考虑到要让使用者用的简单，但是又易于扩展，有的时候就是个悖论。另外老师能不能讲讲在FP下的扩展性怎么做呢？","like_count":0},{"had_liked":false,"id":8200,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1525965409,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100006601,"comment_content":"抽象出业务流，使用责任链来进行实现，可直街实现接口完成扩张，不修改原有代码","like_count":0}]}