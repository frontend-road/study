{"id":486305,"title":"14 | 如何启动协程？","content":"<p>你好，我是朱涛。</p><p>从今天开始，咱们正式进入协程API的学习，一起来攻克Kotlin当中最关键的部分。这节课呢，我会给你介绍下如何启动协程，主要包括协程的调试技巧、启动协程的三种方式。这些都是学习协程最基本的概念，也是后续学习更多高阶概念的基础。</p><p>注意，在这节课当中，我会使用协程API编写大量的案例。我也希望你能够打开IDE，跟着我一起来运行对应的代码。通过这样的方式，你一定会有更多的收获。</p><p>好，接下来，让我们直接开始学习吧！</p><h2>协程调试</h2><p>想要学好Kotlin协程，掌握它的调试技巧很重要。一般来说，我们可以通过两种手段来进行调试：设置VM参数、断点调试。</p><h3>协程VM参数</h3><p>我们先来看第一种。具体的做法呢，其实很简单，我们只需要将VM参数设置成“-Dkotlinx.coroutines.debug”。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/51/2722a0409f4709c6e8f63a77e4de3751.gif?wh=1254x832\" alt=\"图片\"></p><p>完成这个设置后，当我们在log当中打印“Thread.currentThread().name”的时候，如果当前代码是运行在协程当中的，那么它就会带上协程的相关信息。具体我们可以看个代码的例子：</p><pre><code class=\"language-plain\">// 不必关心代码逻辑，关心输出结果即可\nfun main() {\n    GlobalScope.launch(Dispatchers.IO) {\n        println(\"Coroutine started:${Thread.currentThread().name}\")\n        delay(1000L)\n        println(\"Hello World!\")\n    }\n\n    println(\"After launch:${Thread.currentThread().name}\")\n    Thread.sleep(2000L)\n}\n\n/*\n输出结果：\nAfter launch:main\nCoroutine started:DefaultDispatcher-worker-1 @coroutine#1\n*/\n</code></pre><!-- [[[read_end]]] --><p>可以看到，当代码处于协程当中的时候，“Thread.currentThread().name”是会带上协程相关的信息的，这里的“@coroutine#1”就代表了launch创建的协程。</p><h3>断点调试协程</h3><p>除了设置VM参数之外，我们还可以直接使用IDE的调试功能，直接以<strong>打断点</strong>的形式来调试协程。具体来说，主要有这样几个注意事项。</p><p>第一步，将IntelliJ升级到最新版本，目前我使用的版本是2021.3.2版本。</p><p>第二步，确保IDE自带的Kotlin编译器插件版本号大于1.4，目前我使用的是1.6.10。具体做法你可以参考下面的动图：</p><p><img src=\"https://static001.geekbang.org/resource/image/fb/59/fba508f160e7cce0e5fd16afaea72159.gif?wh=1156x900\" alt=\"图片\"></p><p>第三步，为协程代码打断点，并且右击断点处，勾选suspend、All，这代表了我们的断点将会对协程生效。具体可以参考我下面的截图：</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/8a/9ce7c7f7f4a5cc6cda7439cc9201ab8a.png?wh=526x299\" alt=\"图片\"></p><p>第四步，直接进行调试，当程序停留到断点处以后，我们就需要确保协程调试窗口已经被开启了。具体可以参考这个动图：</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/y5/bf997189170645abc1586af534782yy5.gif?wh=1392x878\" alt=\"图片\"></p><p>让我们来单独看看最后出现的那个协程调试窗口：</p><p><img src=\"https://static001.geekbang.org/resource/image/c0/8c/c0a913989f27986f1044865d7f5db88c.png?wh=1095x830\" alt=\"图片\"></p><p>在这个专属的协程调试窗口当中，我们可以看到很多有用的协程信息，包括：</p><ul>\n<li>当前协程的名字，这里是“coroutine#1”；</li>\n<li>当前协程运行在哪个线程之上，这里是“DefaultDispatcher-worker-1”；</li>\n<li>当前协程的运行状态，这里是“RUNNING”；</li>\n<li>当前协程的“创建调用栈”。</li>\n</ul><p>通过调试，我们可以真真切切地看到，我们用launch创建了一个协程，“coroutine#1”，这个协程是运行在“DefaultDispatcher-worker-1”这个线程之上的。而通过这样调试的手段，我们也进一步验证了上节课提到的协程思维模型。</p><p>接下来，我们就一起来学习启动协程的三种方式。</p><h2>launch启动协程</h2><p>上节课我们讲到协程思维模型的时候，其实是把协程想象成了<strong>更加轻量的线程</strong>。线程的启动方式我们都知道，也就是new Thread()、或者是thread{}。那么，如何才能启动一个真正的协程呢？如果你之前看过一些协程的教程，一定见过类似这样的代码：</p><pre><code class=\"language-plain\">/* delay 函数的定义\n     注意这个关键字\n          ↓                                            */\npublic suspend fun delay(timeMillis: Long) { ... }\n\n// 仅用于研究，生产环境不建议使用GlobalScope\nfun main() {\n    // ①\n    GlobalScope.launch {\n        // ②\n        delay(1000L)\n        println(\"Hello World!\")\n    }\n\n    // ③\n    Thread.sleep(2000L)\n}\n\n/*\n输出结果；\nHello World!\n*/\n</code></pre><p>这段代码的逻辑很简单，核心代码只有三行，我已经用注释标记了，我们一个个看。</p><p>注释①，GlobalScope.launch{}，它是一个高阶函数，它的作用就是启动一个协程。GlobalScope是Kotlin官方为我们提供的“协程作用域”，这涉及到协程的“结构化并发”理念，我们会在后面的第16、17讲里解释。</p><p>注释②，delay()，它的作用就是字面上的意思，“延迟”。以上代码中，我们是延迟了1秒。从delay()的函数签名这里可以发现，它的定义跟普通的函数不太一样，它多了一个“suspend”关键字，这代表了它是一个<strong>挂起函数</strong>。而这也就意味着，delay将会拥有“<strong>挂起和恢复</strong>”的能力。</p><p>在上节课我们提到过，delay()是<strong>非阻塞</strong>，那现在我们应该就终于明白了，既然它拥有“挂起和恢复”的能力，那么它肯定能实现非阻塞（如果你无法理解这句话，一定要回过头去看上节课的思维模型）。关于挂起函数的更多知识点，我们会在下节课介绍。</p><p>注释③，它的作用是让当前线程休眠2秒钟。</p><p>我们暂时先将注意力放在注释③这行代码上，很多协程的初学者都会很好奇，为什么上面的代码当中需要一个Thread.sleep(2000L)呢？它的作用是什么？</p><p>现在我们把它删掉，看看到底会发生什么。</p><pre><code class=\"language-plain\">fun main() {\n    GlobalScope.launch {\n        delay(1000L)\n        println(\"Hello World!\")\n    }\n}\n\n/*\n输出结果；\n无\n*/\n</code></pre><p>很奇怪，当我们删掉线程休眠的代码以后，协程代码就无法正常工作了。这是为什么？为了弄清楚这个问题，其实，我们可以做一个类比，暂时先将协程代码改成线程代码。</p><pre><code class=\"language-plain\">fun main() {\n    //              守护线程\n    //                 ↓\n    thread(isDaemon = true) {\n        Thread.sleep(1000L)\n        println(\"Hello World!\")\n    }\n}\n\n/*\n输出结果；\n无\n*/\n</code></pre><p>可以看到，当我们将代码改为线程以后，程序仍然没有输出任何结果。而这里，我们创建的Thread其实是一个“守护线程”。守护线程，就意味着当主线程结束的时候，它也会跟着被销毁。所以这样，相信你应该就能明白了，我们前面用GlobalScope创建的协程之所以不会正常运行，也是因为类似的原因。</p><p>那么，为了让问题能够更明确地暴露出来，我们可以为之前的代码增加一些日志。</p><pre><code class=\"language-plain\">fun main() {\n    GlobalScope.launch {\n        println(\"Coroutine started!\")\n\n        delay(1000L)\n        println(\"Hello World!\")\n    }\n\n    println(\"Process end!\")\n}\n/*\n输出结果；\nProcess end!\n*/\n</code></pre><p>根据输出结果，我们可以推测出：<strong>通过launch创建的协程还没来得及开始执行，整个程序就已经结束了</strong>。相应的，我们也就能推测出，之前案例中Thread.sleep(2000)的作用了，其实，它就是为了不让我们的主线程退出。</p><p>这里，你还会发现一个协程代码特殊的行为模式，那就是：<strong>它的代码不是按照顺序执行的</strong>。为了让这一点更加明显，我们再增加一些日志：</p><pre><code class=\"language-plain\">fun main() {\n    GlobalScope.launch {                // 1\n        println(\"Coroutine started!\")   // 2\n        delay(1000L)                    // 3\n        println(\"Hello World!\")         // 4\n    }\n\n    println(\"After launch!\")            // 5\n    Thread.sleep(2000L)                 // 6\n    println(\"Process end!\")             // 7\n}\n\n/*\n输出结果：\nAfter launch!\nCoroutine started!\nHello World!\nProcess end!\n*/\n</code></pre><p>根据这个程序运行结果，我们发现，以上的协程代码运行顺序是1、5、6、2、3、4、7。也就是说，launch并不会阻塞线程的执行，甚至，我们可以认为launch()当中Lambda一定就是在函数调用之后才执行的。当然，在特殊情况下，这种行为模式也是可以打破的，这一点我们会在第17讲中详细探讨。</p><p>那么，如果你足够细心，你会发现，我们通过launch启动一个协程以后，并没有让协程为我们返回一个执行结果，这其实就是典型的 <a href=\"https://en.wikipedia.org/wiki/Fire-and-forget\">Fire-and-forget</a> 的应用场景。打个比方，launch一个协程任务，就像猎人射箭一样。</p><p><img src=\"https://static001.geekbang.org/resource/image/7y/27/7yy0yy571c7ebfc3ba9e173024a44f27.png?wh=1920x1099\" alt=\"图片\"></p><p>launch和射箭，有几个共同点：</p><ul>\n<li>箭一旦射出去了，目标就无法再被改变；协程一旦被launch，那么它当中执行的任务也不会被中途改变。</li>\n<li>箭如果命中了猎物，猎物也不会自动送到我们手上来；launch的协程任务一旦完成了，即使有了结果，也没办法直接返回给调用方。</li>\n</ul><p>那么，<strong>launch为什么无法将结果返回给调用方呢？</strong>如果你去看launch函数的源代码，你就会发现，这个函数的返回值是一个Job，它其实代表的是协程的<a href=\"https://en.wikipedia.org/wiki/Handle_(computing)\">句柄</a>（Handle），它并不能为我们返回协程的执行结果。</p><pre><code class=\"language-plain\">public fun CoroutineScope.launch(\n    context: CoroutineContext = EmptyCoroutineContext,\n    start: CoroutineStart = CoroutineStart.DEFAULT,\n    block: suspend CoroutineScope.() -&gt; Unit\n): Job { ... }\n</code></pre><p>不过，从launch的函数签名这里，我们还是可以得到很多有用的信息的，我们一个个看。</p><p>首先是 <strong>CoroutineScope.launch()</strong>，代表了launch其实是一个扩展函数，而它的“扩展接收者类型”是CoroutineScope。这就意味着，我们的launch()会等价于CoroutineScope的成员方法。而如果我们要调用launch()来启动协程，就必须要先拿到CoroutineScope的对象。前面的案例，我们使用的GlobalScope，其实就是Kotlin官方为我们提供的一个CoroutineScope对象，方便我们开发者直接启动协程。</p><p>接着是第一个参数：<strong>CoroutineContext</strong>，它代表了我们协程的上下文，它的默认值是EmptyCoroutineContext，如果我们不传这个参数，默认就会使用EmptyCoroutineContext。一般来说，我们也可以传入Kotlin官方为我们提供的Dispatchers，来指定协程运行的线程池。协程上下文，是协程当中非常关键的元素，具体细节我会在17节课的时候再探讨。</p><p>然后是第二个参数：<strong>CoroutineStart</strong>，它代表了协程的启动模式。如果我们不传这个参数，它会默认使用CoroutineStart.DEFAULT。CoroutineStart其实是一个枚举类，一共有：DEFAULT、LAZY、ATOMIC、UNDISPATCHED。我们最常使用的就是DEFAULT、LAZY，它们分别代表：立即执行、懒加载执行。</p><p>最后一个参数，是一个函数类型的block，它的类型是“<strong>suspend CoroutineScope.() -&gt; Unit</strong>”。这个类型看起来有点复杂，不过不要担心，我们可以一步步来推理，让我们先以“(Int) -&gt; Double”这个函数类型开始：</p><pre><code class=\"language-plain\">fun func1(num: Int): Double {\n    return num.toDouble()\n}\n\nval f1: (Int) -&gt; Double = ::func1\n</code></pre><p>上面的代码很好理解，“(Int) -&gt; Double”代表了参数类型是Int，返回值类型是Double的函数，::func1这里，我们使用了<strong>函数引用</strong>的语法。接下来，我们再来看看“CoroutineScope.(Int) -&gt; Double”意味着什么：</p><pre><code class=\"language-plain\">fun CoroutineScope.func2(num: Int): Double {\n    return num.toDouble()\n}\n\nval f2: CoroutineScope.(Int) -&gt; Double = CoroutineScope::func2\n</code></pre><p>很明显，当我们在函数类型前面增加了一个接收者类型后，它的含义就变成了：这个函数应该是CoroutineScope类的<strong>成员方法</strong>或是<strong>扩展方法</strong>，并且，它的参数类型必须是Int，返回值类型必须是Double。</p><p>那么，“suspend (Int) -&gt; Double”这个类型代表了什么呢？我们来看个例子：</p><pre><code class=\"language-plain\">suspend fun func3(num: Int): Double {\n    delay(100L)\n    return num.toDouble()\n}\n\nval f3: suspend (Int) -&gt; Double = ::func3\n</code></pre><p>有了前面的基础，相信你很容易就能理解了，“suspend (Int) -&gt; Double”，其实就代表了一个“挂起函数”，同时它的参数类型是Int，返回值类型是Double。</p><p>到这里，我们还可以再做一次推理，请看下面的代码：</p><pre><code class=\"language-plain\">suspend fun CoroutineScope.func4(num: Int): Double {\n    delay(100L)\n    return num.toDouble()\n}\n\nval f4: suspend CoroutineScope.(Int) -&gt; Double = CoroutineScope::func4\n</code></pre><p>这时候，对于“suspend CoroutineScope.(Int) -&gt; Double”这个函数类型，你应该也能轻松解释了。首先，它应该是一个“挂起函数”，同时，它还应该是CoroutineScope类的成员方法或是扩展方法，并且，它的参数类型必须是Int，返回值类型必须是Double。</p><p>那么现在，我们回过头再来看看launch()函数的第三个参数“suspend CoroutineScope.() -&gt; Unit”，其实就能轻松分析出它的类型了。所以，当我们遇到复杂的函数类型的时候，一定不能害怕，只要我们一步步来拆解、推理，就一定能分析清楚了。</p><p>到这里，我们就弄清楚launch的作用了。我们通过调用launch()可以创建一个新的协程。那么，除了launch以外，还有其他办法启动协程吗？有的，那就是runBlocking。</p><h2>runBlocking启动协程</h2><p>runBlocking跟我们前面学的launch的行为模式不太一样，通过它的名字，我们就可以看出来，它是存在某种阻塞行为的。让我们将前面launch的代码直接改为runBlocking，看看运行结果是否有差异。</p><pre><code class=\"language-plain\">fun main() {\n    runBlocking {                       // 1\n        println(\"Coroutine started!\")   // 2\n        delay(1000L)                    // 3\n        println(\"Hello World!\")         // 4\n    }\n\n    println(\"After launch!\")            // 5\n    Thread.sleep(2000L)                 // 6\n    println(\"Process end!\")             // 7\n}\n\n/*\n输出结果：\nCoroutine started!\nHello World!\nAfter launch!\nProcess end!\n*/\n</code></pre><p>通过分析上面的运行结果，我们可以发现，使用runBlocking启动的协程会阻塞当前线程的执行，这样一来，所有的代码就<strong>变成了顺序执行</strong>：1、2、3、4、5、6、7。这其实就是runBlocking与launch的最大差异。</p><p>为了验证这一点，我们可以将上面的例子再改造一下：</p><pre><code class=\"language-plain\">fun main() {\n    runBlocking {\n        println(\"First:${Thread.currentThread().name}\")\n        delay(1000L)\n        println(\"Hello First!\")\n    }\n\n    runBlocking {\n        println(\"Second:${Thread.currentThread().name}\")\n        delay(1000L)\n        println(\"Hello Second!\")\n    }\n\n    runBlocking {\n        println(\"Third:${Thread.currentThread().name}\")\n        delay(1000L)\n        println(\"Hello Third!\")\n    }\n\n    // 删掉了 Thread.sleep\n    println(\"Process end!\")\n}\n\n/*\n输出结果：\nFirst:main @coroutine#1\nHello First!\nSecond:main @coroutine#2\nHello Second!\nThird:main @coroutine#3\nHello Third!\nProcess end!\n*/\n</code></pre><p>请注意这里的输出结果，我们调用三次runBlocking，对应地，程序就启动了三个协程。另外还有一点：以上代码中，我们删掉了末尾的“Thread.sleep(2000L)”，而程序仍然按照顺序执行了。这就进一步说明，runBlocking确实会阻塞当前线程的执行。对于这一点，Kotlin官方也强调了：runBlocking只推荐用于<strong>连接线程与协程</strong>，并且，大部分情况下，都只应该用于编写Demo或是测试代码。</p><p>所以，<strong>请不要在生产环境当中使用runBlocking</strong>。</p><p>另外，相信你也注意到了，当我们调用runBlocking的时候，并不需要GlobalScope，这也是它跟launch之间的一大差异，具体，让我们来看看runBlocking的函数签名：</p><pre><code class=\"language-plain\">public actual fun &lt;T&gt; runBlocking(\n    context: CoroutineContext,\n    block: suspend CoroutineScope.() -&gt; T): T {\n...\n}\n</code></pre><p>可以看到，runBlocking就是一个普通的<strong>顶层函数</strong>，它并不是CoroutineScope的扩展函数，因此，我们调用它的时候，不需要CoroutineScope的对象。前面我们提到过，GlobalScope是不建议使用的，因此，<strong>后面的案例我们将不再使用GlobalScope</strong>。</p><p>另外，你可以注意到它的第二个参数“suspend CoroutineScope.() -&gt; T”，这个函数类型是有返回值类型T的，而它刚好跟runBlocking的返回值类型是一样的。因此，我们可以推测，runBlocking其实是可以从协程当中返回执行结果的。让我们来试试：</p><pre><code class=\"language-plain\">fun main() {\n    val result = runBlocking {\n        delay(1000L)\n        // return@runBlocking 可写可不写\n        return@runBlocking \"Coroutine done!\" \n    }\n\n    println(\"Result is: $result\")\n}\n/*\n输出结果：\nResult is: Coroutine done!\n*/\n</code></pre><p>所以，从表面上看，runBlocking是对launch的一种补充，但由于它是阻塞式的，因此，runBlocking并不适用于实际的工作当中。那么，还有什么办法可以让我们拿到协程当中的执行结果吗？</p><p>答案就是：async。</p><h2>async启动协程</h2><p>async，是在很多其他编程语言都存在的一种协程模式，比如C#。在Kotlin当中，我们可以使用async{} 创建协程，并且还能通过它返回的<strong>句柄</strong>拿到协程的执行结果。让我们看个简单的例子：</p><pre><code class=\"language-plain\">fun main() = runBlocking {\n    println(\"In runBlocking:${Thread.currentThread().name}\")\n\n    val deferred: Deferred&lt;String&gt; = async {\n        println(\"In async:${Thread.currentThread().name}\")\n        delay(1000L) // 模拟耗时操作\n        return@async \"Task completed!\"\n    }\n\n    println(\"After async:${Thread.currentThread().name}\")\n\n    val result = deferred.await()\n    println(\"Result is: $result\")\n}\n/*\n输出结果：\nIn runBlocking:main @coroutine#1\nAfter async:main @coroutine#1 // 注意，它比“In async”先输出\nIn async:main @coroutine#2\nResult is: Task completed!\n*/\n</code></pre><p>上面的代码中，我们直接使用runBlocking来实现了main函数。注意，由于runBlocking的最后一个参数的类型是“suspend CoroutineScope.() -&gt; T”，因此在Lambda当中已经有了CoroutineScope，所以我们可以直接在runBlocking当中，用async启动一个协程。从程序的输出结果，我们也可以看到，确实存在两个协程，runBlocking启动的叫做“coroutine#1”；async启动的叫做“coroutine#2”。</p><p>另外，你应该还注意到了一个细节，那就是async启动协程以后，它也不会阻塞当前程序的执行流程，因为：“After async”在“In async”的前面就已经输出了。</p><blockquote>\n<p>这种行为模式在特殊情况下也是可以打破的，我们在第17讲的时候会介绍。</p>\n</blockquote><p>还有，请注意async{}的返回值，它是一个Deferred对象，我们通过调用它的await()方法，就可以拿到协程的执行结果。对比前面launch我们举的“射箭”的例子，这里的async，就更加像是“钓鱼”：</p><p><img src=\"https://static001.geekbang.org/resource/image/0e/a0/0ece33218501d08238cbab30a3ccaaa0.png?wh=1920x1159\" alt=\"图片\"></p><p>在我们钓鱼的时候，我们手里的鱼竿，就有点像是async当中的 <strong>Deferred对象</strong>。只要我们手里有这根鱼竿，<strong>一旦有鱼儿上钩了，我们就可以直接拿到结果</strong>。</p><p>这里，我们再来看看async的函数签名，顺便对比一下它跟launch之间的差异：</p><pre><code class=\"language-plain\">public fun CoroutineScope.launch(\n    context: CoroutineContext = EmptyCoroutineContext,\n    start: CoroutineStart = CoroutineStart.DEFAULT,\n    block: suspend CoroutineScope.() -&gt; Unit // 不同点1\n): Job {} // 不同点2\n\npublic fun &lt;T&gt; CoroutineScope.async(\n    context: CoroutineContext = EmptyCoroutineContext,\n    start: CoroutineStart = CoroutineStart.DEFAULT,\n    block: suspend CoroutineScope.() -&gt; T // 不同点1\n): Deferred&lt;T&gt; {} // 不同点2\n</code></pre><p>从上面的代码中，我们可以发现launch和async的两个不同点，一个是 <strong>block的函数类型</strong>，前者的返回值类型是Unit，后者则是泛型T；另外一个不同点在<strong>返回值</strong>上，前者返回值类型是Job，后者返回值类型是Deferred。而async可以返回协程执行结果的原因也在于此。关于Job与Deferred的更多细节，我们会在第16讲讨论。</p><p>这里，我制作了一张动图，来演示程序整体的执行流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/ec/ee/ec5b7e1f88ac38391f9503102yyee6ee.gif?wh=720x405\" alt=\"图片\"></p><h2>小结</h2><p>由于协程是一个非常抽象的概念，因此，它的<strong>调试手段就显得尤为重要</strong>，我们研究协程的时候，通常有两种手段，一种是设置VM参数：-Dkotlinx.coroutines.debug。另一种是直接在IDE当中打断点，不过协程调试是在Kotlin 1.4之后才支持的新特性，因此我们要确保IDE和Kotlin的版本都更新到最新。</p><p>另外，我们还学到了三种启动协程的方式，分别是launch、runBlocking、async。</p><ul>\n<li><strong>launch</strong>，是典型的“Fire-and-forget”场景，它不会阻塞当前程序的执行流程，使用这种方式的时候，我们无法直接获取协程的执行结果。它有点像是生活中的<strong>射箭</strong>。</li>\n<li><strong>runBlocking</strong>，我们可以获取协程的执行结果，但这种方式会阻塞代码的执行流程，因为它一般用于测试用途，生产环境当中是不推荐使用的。</li>\n<li><strong>async</strong>，则是很多编程语言当中普遍存在的协程模式。它像是结合了launch和runBlocking两者的优点。它既不会阻塞当前的执行流程，还可以直接获取协程的执行结果。它有点像是生活中的<strong>钓鱼</strong>。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/9b/4a/9b116c03897214c6d899177d459e354a.jpg?wh=2000x904\" alt=\"\"></p><h2>思考题</h2><p>下面这段代码是我在当面试官时，问过其他候选人的，你能推测出这段代码的执行结果吗？</p><pre><code class=\"language-plain\">fun main() = runBlocking {\n    val deferred: Deferred&lt;String&gt; = async {\n        println(\"In async:${Thread.currentThread().name}\")\n        delay(1000L) // 模拟耗时操作\n        println(\"In async after delay!\")\n        return@async \"Task completed!\"\n    }\n\n    // 不再调用 deferred.await()\n    delay(2000L)\n}\n</code></pre>","comments":[{"had_liked":false,"id":334172,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1127306,"ip_address":"","ucode":"3F69DAC14260DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/8a/f7a3d5e6.jpg","comment_is_top":false,"comment_ctime":1644800252,"is_pvip":false,"replies":[{"id":"122096","content":"这个比喻很棒！","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1644852021,"ip_address":"","comment_id":334172,"utype":1}],"discussion_count":4,"race_medal":0,"score":"70364276988","product_id":100103401,"comment_content":"后面思考题的执行结果为： <br>In async ....<br>In async after delay....<br><br>我的思考是  async 类比钓鱼，鱼钩已经扔出去了，钓鱼的这个动作已经开始了，只是我并没有拉杆。","like_count":17,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551022,"discussion_content":"这个比喻很棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644852021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1138766,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/4e/1c654d86.jpg","nickname":"Omooo","note":"","ucode":"FFADFDC72EC847","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588033,"discussion_content":"你是懂钓鱼的哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663480900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1261082,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3e/1a/522622d8.jpg","nickname":"W","note":"","ucode":"F175CA137BC2A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581392,"discussion_content":"牛啊牛啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658751388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2148188,"avatar":"https://static001.geekbang.org/account/avatar/00/20/c7/5c/94cb3a1a.jpg","nickname":"$Kotlin","note":"","ucode":"098E9C8F60D865","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550937,"discussion_content":"比喻很传神！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644819156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335847,"user_name":"Gavin","can_delete":false,"product_type":"c1","uid":2879648,"ip_address":"","ucode":"881EA1DE7A33B8","user_header":"https://static001.geekbang.org/account/avatar/00/2b/f0/a0/43168e73.jpg","comment_is_top":false,"comment_ctime":1645717445,"is_pvip":false,"replies":[{"id":"122721","content":"GlobalScope最大的劣势，就是不具备“结构化并发”的能力。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645747083,"ip_address":"","comment_id":335847,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23120553925","product_id":100103401,"comment_content":"对于GlobalScope有疑问，阅读了源码注释，也不是很清楚为什么GlobalScope不建议用，能帮忙解释下吗","like_count":6,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553128,"discussion_content":"GlobalScope最大的劣势，就是不具备“结构化并发”的能力。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645747084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335143,"user_name":"Geek_Adr","can_delete":false,"product_type":"c1","uid":2876897,"ip_address":"","ucode":"129E17B7D3EB88","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e5/e1/a5064f88.jpg","comment_is_top":false,"comment_ctime":1645358073,"is_pvip":false,"replies":[{"id":"122452","content":"总结很到位！","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645459111,"ip_address":"","comment_id":335143,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23120194553","product_id":100103401,"comment_content":"async != lazy <br>await只是等待执行完，并不是触发执行 ","like_count":6,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552441,"discussion_content":"总结很到位！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645459111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020838,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/93/a6/679b3c6b.jpg","nickname":"Renext","note":"","ucode":"3C4418F7E86CD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575729,"discussion_content":"不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655080398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334313,"user_name":"面无表情的生鱼片","can_delete":false,"product_type":"c1","uid":1110076,"ip_address":"","ucode":"C71B9DD25C9018","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/3c/d72b0d26.jpg","comment_is_top":false,"comment_ctime":1644885879,"is_pvip":false,"replies":[{"id":"122168","content":"你的理解很到位。async{}对比launch{}的不同还是在于返回值，至于`async{}` 是不阻塞其实是对比runBlocking的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1644938896,"ip_address":"","comment_id":334313,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23119722359","product_id":100103401,"comment_content":"老师用“射箭”和“钓鱼”来做比喻真是让人想忘都忘不掉！<br>不过我有一点关于思考题的反思：<br>虽然说 `async{}` 是不阻塞的，但是后续 `deferred.await()` 会阻塞。<br>严格意义上是否可以认为 `async{}` + `deferred.await()` 是阻塞的。<br>单用 `async()` 而不调用 `deferred.await()` 的情况应该使用 `launch{}`，在这种情况下老师列的表格中标注 `async{}` 是不阻塞是否意义不大？<br>","like_count":6,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551245,"discussion_content":"你的理解很到位。async{}对比launch{}的不同还是在于返回值，至于`async{}` 是不阻塞其实是对比runBlocking的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644938896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1110076,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/3c/d72b0d26.jpg","nickname":"面无表情的生鱼片","note":"","ucode":"C71B9DD25C9018","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":551266,"discussion_content":"谢谢老师解答～（突然发现极客时间的评论收到回复是没有任何提示的，回去翻了一下，发现之前的好几个评论老师都解答了我的疑惑，再次感谢老师~）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644967011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":551245,"ip_address":""},"score":551266,"extra":""}]},{"author":{"id":1339841,"avatar":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","nickname":"白乾涛","note":"","ucode":"0C704B0B90C8D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552226,"discussion_content":"await 虽然是阻塞的，但是如果你在主线程中执行了一个耗时操作之后，再 await，其效果也是不阻塞的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645356725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2621394,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ff/d2/204edd23.jpg","nickname":"WWWarmFly","note":"","ucode":"DBACC196FADE65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557084,"discussion_content":"await怎么会是阻塞呢，不是挂起吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647656907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334182,"user_name":"魏全运","can_delete":false,"product_type":"c1","uid":1090798,"ip_address":"","ucode":"3FED702C724E2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","comment_is_top":false,"comment_ctime":1644802254,"is_pvip":false,"replies":[{"id":"122097","content":"有些同学会认为deferred.await()如果不调用的话，async当中的代码就不会执行。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1644852071,"ip_address":"","comment_id":334182,"utype":1}],"discussion_count":5,"race_medal":0,"score":"14529704142","product_id":100103401,"comment_content":"思考题：<br>In async:main<br>In.async after delay！<br>请问这里是有什么让人容易忽略的细节吗？","like_count":4,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551023,"discussion_content":"有些同学会认为deferred.await()如果不调用的话，async当中的代码就不会执行。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644852071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2847807,"avatar":"","nickname":"徐若愚","note":"","ucode":"205631D30BD2E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":558405,"discussion_content":"不是使用的runBlocking吗？会打的啊；试了下GlobalScope.launch替换runBlocking，aysc{}中代码就不会执行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648286245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":551023,"ip_address":""},"score":558405,"extra":""},{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2847807,"avatar":"","nickname":"徐若愚","note":"","ucode":"205631D30BD2E4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576597,"discussion_content":"那是因为你换成launch之后aysc还没来及执行主线程就结束了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655693981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":558405,"ip_address":""},"score":576597,"extra":""}]},{"author":{"id":2697815,"avatar":"https://static001.geekbang.org/account/avatar/00/29/2a/57/6629c858.jpg","nickname":"阿康","note":"","ucode":"DF20E1E33A8A34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552364,"discussion_content":"又不是lazy模式，肯定会执行啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645431466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1339841,"avatar":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","nickname":"白乾涛","note":"","ucode":"0C704B0B90C8D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552227,"discussion_content":"我在前面第一眼看到这行代码，就开始思考这个问题了，没想到最后真把这个问题列出来了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645356857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343020,"user_name":"张春亮","can_delete":false,"product_type":"c1","uid":1045303,"ip_address":"","ucode":"3921D2A256B2C9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/37/15baf151.jpg","comment_is_top":false,"comment_ctime":1650596787,"is_pvip":false,"replies":[{"id":"125376","content":"只是runBlocking不建议在生产环境使用。如果你是Android开发，官方为你提供了LifecycleScope、ViewModelScope。如果是其他端，则可以自己创建CoroutineScope。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1650812429,"ip_address":"","comment_id":343020,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10240531379","product_id":100103401,"comment_content":"你好，既然launch和runBlocking都不建议在生产环境中使用，只能使用async。<br>但是async也是需要CoroutineScope对象，但是GlobalScope也不建议使用，那我们在生产环境中应该使用怎样的方式来开启协程呢","like_count":3,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567020,"discussion_content":"只是runBlocking不建议在生产环境使用。如果你是Android开发，官方为你提供了LifecycleScope、ViewModelScope。如果是其他端，则可以自己创建CoroutineScope。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650812429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1684437,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b3/d5/93b704b6.jpg","nickname":"sunlight","note":"","ucode":"9E8251F9281183","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573461,"discussion_content":"如果在Android service中启动协程，是不是要使用GlobalScope了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653447900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2453974,"avatar":"","nickname":"Geek_cc4272","note":"","ucode":"ABEC514A25C853","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572263,"discussion_content":"您好,问一下,如果Android端自己创建CoroutineScope,而不使用LifecycleScope或者ViewModelScope,去使用协程会有什么问题呢?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652683353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347779,"user_name":"BUG君","can_delete":false,"product_type":"c1","uid":1143211,"ip_address":"","ucode":"B7513F37026E5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/71/ab/b19a1ba2.jpg","comment_is_top":false,"comment_ctime":1654422641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5949389937","product_id":100103401,"comment_content":"deferred#await()方法也算是阻塞吧？如果async中有耗时操作，那就会阻塞调用defferred#await()的线程，所以应该避免在主线程中调用defferred#await()方法，类似java中FutureTask#get()方法","like_count":1},{"had_liked":false,"id":347024,"user_name":"遥远的救世主","can_delete":false,"product_type":"c1","uid":1181334,"ip_address":"","ucode":"4CC436479CAA21","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/96/4273bb09.jpg","comment_is_top":false,"comment_ctime":1653623786,"is_pvip":true,"replies":[{"id":"126594","content":"你得试试 JetBrains 的 IDE，Android Studio 的版本是落后与 JetBrains 的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1653818268,"ip_address":"","comment_id":347024,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5948591082","product_id":100103401,"comment_content":"我用 Android Studio Chipmunk | 2021.2.1 Patch 1，设置VM 参数后调试协程名还是不打印，debug也没有协程那一项，Google 开发的工具不给力啊","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574059,"discussion_content":"你得试试 JetBrains 的 IDE，Android Studio 的版本是落后与 JetBrains 的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653818268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335224,"user_name":"ACE_Killer09","can_delete":false,"product_type":"c1","uid":1618019,"ip_address":"","ucode":"4ED9D2A521A237","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqQVYE1EfqibdyNsnjFibHW4jee0Q3qMMeRhqqVQUn5Ix9fFl3Zfzf0xpdrGypxHUmBCyiczfyEaPoWA/132","comment_is_top":false,"comment_ctime":1645414810,"is_pvip":false,"replies":[{"id":"122450","content":"应该是： 1、5、6、2、3、4、7，你没错。<br><br>5 比 2 先执行是不是说明启动协程需要时间？这其实是由一些其他协程参数决定的，你可以参考17讲的内容。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645459049,"ip_address":"","comment_id":335224,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5940382106","product_id":100103401,"comment_content":"<br>fun main() {<br>    GlobalScope.launch {                &#47;&#47; 1<br>        println(&quot;Coroutine started!&quot;)   &#47;&#47; 2<br>        delay(1000L)                    &#47;&#47; 3<br>        println(&quot;Hello World!&quot;)         &#47;&#47; 4<br>    }<br><br>    println(&quot;After launch!&quot;)            &#47;&#47; 5<br>    Thread.sleep(2000L)                 &#47;&#47; 6<br>    println(&quot;Process end!&quot;)             &#47;&#47; 7<br>}<br><br>&#47;*<br>输出结果：<br>After launch!<br>Coroutine started!<br>Hello World!<br>Process end!<br>*&#47;<br>执行顺序为啥不是 1、5、6、2、3、4、7？<br><br>5 比 2 先执行是不是说明启动协程需要时间？<br>","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552439,"discussion_content":"应该是： 1、5、6、2、3、4、7，你没错。\n\n5 比 2 先执行是不是说明启动协程需要时间？这其实是由一些其他协程参数决定的，你可以参考17讲的内容。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645459049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356136,"user_name":"999","can_delete":false,"product_type":"c1","uid":1987266,"ip_address":"北京","ucode":"ECB0599A3E03A6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/v8XSxxYpSxxFiaPa1LzCrNeib7D9A9IrgBG2zAUFGS9Q2xBIxHqIKxVSTkKkgJuicn37ESWdFAAdPYpnqrFmf47qA/132","comment_is_top":false,"comment_ctime":1662002933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662002933","product_id":100103401,"comment_content":"下面这种形式应该就更容易判断是否会执行了。<br>fun main() = runBlocking { <br>    val deferred: Deferred = asyncFunc()<br>    &#47;&#47; 不再调用 deferred.await() <br>    delay(2000L)<br>}<br><br>fun asyncFunc() = async { <br>    println(&quot;In async:${Thread.currentThread().name}&quot;) <br>    delay(1000L) &#47;&#47; 模拟耗时操作<br>    println(&quot;In async after delay!&quot;) <br>    return@async &quot;Task completed!&quot; <br>} ","like_count":0},{"had_liked":false,"id":355378,"user_name":"三余","can_delete":false,"product_type":"c1","uid":1740005,"ip_address":"浙江","ucode":"9BADF58CC9296A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8c/e5/1a7658ab.jpg","comment_is_top":false,"comment_ctime":1661326024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661326024","product_id":100103401,"comment_content":"async里面的还是会依次自行，<br>In async  <br>In async after  delay<br>async:叫外卖  await:拿外卖，不管拿不拿  只要叫了外卖肯定会配送<br>","like_count":0},{"had_liked":false,"id":351549,"user_name":"春夏秋冬","can_delete":false,"product_type":"c1","uid":2065146,"ip_address":"","ucode":"69E9BDA2D46EF6","user_header":"https://static001.geekbang.org/account/avatar/00/1f/82/fa/7e5f7a0a.jpg","comment_is_top":false,"comment_ctime":1657883627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657883627","product_id":100103401,"comment_content":"写的很棒，是我见过写的最好一篇简介了","like_count":0},{"had_liked":false,"id":349703,"user_name":"Geek_61de09","can_delete":false,"product_type":"c1","uid":2763653,"ip_address":"","ucode":"56A95CB08C0B04","user_header":"","comment_is_top":false,"comment_ctime":1656236435,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1656236435","product_id":100103401,"comment_content":"老师我有一点不太理解，就是既然不推荐使用runBlocking这个方法来启动协程，那该怎么用async来启动协程呢？我看您写的代码里边，都是在runBlocking这个方法体里来使用的async呀..","like_count":0,"discussions":[{"author":{"id":3068390,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/d1/e6/61b385fa.jpg","nickname":"Test","note":"","ucode":"6710852FCBC748","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582090,"discussion_content":"自己创建一个scope去启动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659198416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346534,"user_name":"Geek_Albert.wu","can_delete":false,"product_type":"c1","uid":1746863,"ip_address":"","ucode":"F2152345E6F6B1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/FT9FibAbXRk26OoInsYTZQAbLvIyJ2ZzbLIY3qznNe7XxuGmqOjYSK2SW4cRyib55Ihn9UD9SzPoq67wuLHJ8mVQ/132","comment_is_top":false,"comment_ctime":1653217722,"is_pvip":false,"replies":[{"id":"126599","content":"后面《源码篇》里有对应的分析哈~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1653818669,"ip_address":"","comment_id":346534,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653217722","product_id":100103401,"comment_content":"请教下教师，AbstractCoroutine.start()怎么调用的是自身啊？子类里也没看到有对应的实现啊","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574066,"discussion_content":"后面《源码篇》里有对应的分析哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653818669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346533,"user_name":"Geek_Albert.wu","can_delete":false,"product_type":"c1","uid":1746863,"ip_address":"","ucode":"F2152345E6F6B1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/FT9FibAbXRk26OoInsYTZQAbLvIyJ2ZzbLIY3qznNe7XxuGmqOjYSK2SW4cRyib55Ihn9UD9SzPoq67wuLHJ8mVQ/132","comment_is_top":false,"comment_ctime":1653217561,"is_pvip":false,"replies":[{"id":"126598","content":"主线程没结束的原因，在于你用了runBlocking，它会等待内部的所有子协程结束。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1653818478,"ip_address":"","comment_id":346533,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653217561","product_id":100103401,"comment_content":"    runBlocking {<br>        val deferred: Deferred&lt;String&gt; = async {<br>            println(&quot;In Async ${Thread.currentThread().name}&quot;)<br>            delay(1000L)<br>            println(&quot;Hello World&quot;)<br>            return@async &quot;Albert.wu&quot;<br>        }<br><br>&#47;&#47;        delay(2000L)<br>        println(&quot;In Blocking End&quot;)<br>    }<br><br><br>输出的结果：<br>In Blocking End<br>In Async main @coroutine#2<br>Hello World<br><br>是async与launch的区别是在于launch是类似于守护线程, 而async是类似非守护线程, 在主线程结束后，还在运行吗？但是从日志看，async还是在main线程里运行啊","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574065,"discussion_content":"主线程没结束的原因，在于你用了runBlocking，它会等待内部的所有子协程结束。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653818478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344815,"user_name":"Geek_3a0800","can_delete":false,"product_type":"c1","uid":1451728,"ip_address":"","ucode":"F4F5C8E1FD917F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKDfy7icjzBBUwQDA3ovYUqSX4gT27UryDic79Dj9lrbRibt8DCbz8xb4EvSMmACiaI2xkIdvgwByW1GQ/132","comment_is_top":false,"comment_ctime":1651804264,"is_pvip":false,"replies":[{"id":"125929","content":"大部分动画都是PPT做的哈~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1652024540,"ip_address":"","comment_id":344815,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651804264","product_id":100103401,"comment_content":"您好老师 这个动图是拿啥工具做的","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571001,"discussion_content":"大部分动画都是PPT做的哈~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652024540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343762,"user_name":"张春亮","can_delete":false,"product_type":"c1","uid":1045303,"ip_address":"","ucode":"3921D2A256B2C9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/37/15baf151.jpg","comment_is_top":false,"comment_ctime":1651042470,"is_pvip":false,"replies":[{"id":"125637","content":"这其实就是单纯的默认行为，刚开始可能会不太适应，记住即可，学完源码篇以后，你就可以去源码里找答案了。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1651245983,"ip_address":"","comment_id":343762,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651042470","product_id":100103401,"comment_content":"我看评论说，async 函数就像 launch 函数会异步执行，但是这里的异步怎么理解呢，官方文档的注释里面也没有对应的解释","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568885,"discussion_content":"这其实就是单纯的默认行为，刚开始可能会不太适应，记住即可，学完源码篇以后，你就可以去源码里找答案了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651245983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343756,"user_name":"CT","can_delete":false,"product_type":"c1","uid":1329656,"ip_address":"","ucode":"FF8725B6FABF54","user_header":"https://static001.geekbang.org/account/avatar/00/14/49/f8/457342fa.jpg","comment_is_top":false,"comment_ctime":1651040381,"is_pvip":false,"replies":[{"id":"125636","content":"主要还是因为它的上层定义提供了参数默认值：<br><br>```<br>public expect fun &lt;T&gt; runBlocking(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -&gt; T): T<br>```","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1651245888,"ip_address":"","comment_id":343756,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651040381","product_id":100103401,"comment_content":"public actual fun runBlocking(context: CoroutineContext, block: suspend CoroutineScope.() -&gt; T): T {...}<br>runBlocking方法里需要一个context参数，并且没有设置默认值，为啥在使用时不需要传入？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568883,"discussion_content":"主要还是因为它的上层定义提供了参数默认值：\n\n```\npublic expect fun &lt;T&gt; runBlocking(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -&gt; T): T\n```","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651245888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343747,"user_name":"张春亮","can_delete":false,"product_type":"c1","uid":1045303,"ip_address":"","ucode":"3921D2A256B2C9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/37/15baf151.jpg","comment_is_top":false,"comment_ctime":1651036358,"is_pvip":false,"replies":[{"id":"125635","content":"本质还是因为async默认情况下会立即执行。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1651245582,"ip_address":"","comment_id":343747,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651036358","product_id":100103401,"comment_content":"这里的协程能执行的原因是外层的runBlocking，如果去掉runBlocking 改成用GlobalScope.async，async里面的代码还是不会被执行","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568879,"discussion_content":"本质还是因为async默认情况下会立即执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651245582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342073,"user_name":"syz","can_delete":false,"product_type":"c1","uid":1174704,"ip_address":"","ucode":"54AF17ACD72645","user_header":"https://static001.geekbang.org/account/avatar/00/11/ec/b0/4e22819f.jpg","comment_is_top":false,"comment_ctime":1650001001,"is_pvip":true,"replies":[{"id":"125119","content":"是的，这位同学很细心。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1650298784,"ip_address":"","comment_id":342073,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650001001","product_id":100103401,"comment_content":"    @Test<br>    fun main2() = runBlocking {<br>        val deferred: Deferred&lt;String&gt; = async {<br>            println(&quot;In async:${Thread.currentThread().name}&quot;)<br>            delay(1000L) &#47;&#47; 模拟耗时操作<br>            println(&quot;In async after delay!&quot;)<br>            println(this@runBlocking.isActive)<br>            return@async &quot;Task completed!&quot;<br>        }<br>    }<br><br>In async:Test worker @coroutine#2<br>In async after delay!<br>true<br><br>没有delay也会显示，runBlocking执行完还是active，也不会影响内部async的执行","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564710,"discussion_content":"是的，这位同学很细心。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650298784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340714,"user_name":"刘洋","can_delete":false,"product_type":"c1","uid":1222263,"ip_address":"","ucode":"A22013AE60077F","user_header":"https://static001.geekbang.org/account/avatar/00/12/a6/77/740dde74.jpg","comment_is_top":false,"comment_ctime":1649071105,"is_pvip":true,"replies":[{"id":"124600","content":"疑问1：源码篇里有答案哈。<br>疑问2：await()，如果当前已经有结果了，就会直接返回；如果暂时没结果，就会挂起，等待有结果再恢复执行。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1649134749,"ip_address":"","comment_id":340714,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649071105","product_id":100103401,"comment_content":"第二章：<br>收获：launch启动非阻塞的，但是无法获取返回结果，作者那个比喻很好，像射箭，射出去了回不来了，async像是钓鱼，扔出来也可以收回来，还不阻塞线程，最后一个思考题，可以想象成async因为是异步的，所以会执行也就是会扔出鱼干，但是因为没有地方去调用获取他，所以return不会执行也就是没有收杆子<br>疑问：1.那suspend是怎么达成非阻塞然后可以挂起和恢复的呢？是这两种模式结合进行的么？我想后边应该会揭晓答案，2.还有返回结果这个效果我想是await等待执行完做到的吧？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560035,"discussion_content":"疑问1：源码篇里有答案哈。\n疑问2：await()，如果当前已经有结果了，就会直接返回；如果暂时没结果，就会挂起，等待有结果再恢复执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649134750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335385,"user_name":"PoPlus","can_delete":false,"product_type":"c1","uid":1574765,"ip_address":"","ucode":"5F0927921317F2","user_header":"https://static001.geekbang.org/account/avatar/00/18/07/6d/4c1909be.jpg","comment_is_top":false,"comment_ctime":1645499724,"is_pvip":false,"replies":[{"id":"122570","content":"没错~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645591252,"ip_address":"","comment_id":335385,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645499724","product_id":100103401,"comment_content":"思考题：async 函数就像 launch 函数会异步执行，所以会输出结果。<br>只是 async 函数有个对应的 await 函数可以接收值，这个接收过程是阻塞式的。","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552761,"discussion_content":"没错~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645591252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335241,"user_name":"阿康","can_delete":false,"product_type":"c1","uid":2697815,"ip_address":"","ucode":"DF20E1E33A8A34","user_header":"https://static001.geekbang.org/account/avatar/00/29/2a/57/6629c858.jpg","comment_is_top":false,"comment_ctime":1645425263,"is_pvip":false,"replies":[{"id":"122449","content":"你说的对，疏忽大意了，感谢提醒哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645458906,"ip_address":"","comment_id":335241,"utype":1}],"discussion_count":5,"race_medal":0,"score":"1645425263","product_id":100103401,"comment_content":"&#39;&#39;&#39;<br><br>fun main() {<br>    runBlocking {                       &#47;&#47; 1<br>        println(&quot;Coroutine started!&quot;)   &#47;&#47; 2<br>        delay(1000L)                    &#47;&#47; 3<br>        println(&quot;Hello World!&quot;)         &#47;&#47; 4<br>    }<br><br>    println(&quot;After launch!&quot;)            &#47;&#47; 5<br>    Thread.sleep(2000L)                 &#47;&#47; 6<br>    println(&quot;Process end!&quot;)             &#47;&#47; 7<br>}<br><br>&#47;*<br>输出结果：<br>Coroutine started!<br>Hello World!<br>After launch!<br>Process end!<br>*&#47;<br>&#39;&#39;&#39;<br>执行顺序是1 5 6 2 3 4 7吧？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552438,"discussion_content":"你说的对，疏忽大意了，感谢提醒哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645458906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1589291,"avatar":"https://static001.geekbang.org/account/avatar/00/18/40/2b/fcf4c7a8.jpg","nickname":"Universe","note":"","ucode":"724AB258476E79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":554927,"discussion_content":"如果是 1562347，那和输出结果是不是就对不上了？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646664068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552438,"ip_address":""},"score":554927,"extra":""}]},{"author":{"id":1723397,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/4c/05/4fe55808.jpg","nickname":"没名儿","note":"","ucode":"65B48705171730","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556773,"discussion_content":"你这是runBlocking 不是launch吧？runBlocking的执行顺序不就是1234567吗，launch的执行顺序才是1562347吧","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1647506823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1090110,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a2/3e/7d9812f2.jpg","nickname":"LRG-","note":"","ucode":"497C983B36A4A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573612,"discussion_content":"老师的顺序没错啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653548156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042983,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","nickname":"Shanks-王冲","note":"","ucode":"C4B90A17850E20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556561,"discussion_content":"你好，康哥，你和作者涛哥的评论与回复，让我有困惑了；我跑上面代码，因为runBlocking是阻塞的，如预期执行顺序是 1 - 7；debug一步一步也是这个1-7的步骤；我的Kotlin ver 1.53，coroutine-core ver 1.5.2，我弱弱的问一下，你表达的事GlobalScope运行的情况嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647417843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334377,"user_name":"Marten","can_delete":false,"product_type":"c1","uid":2879124,"ip_address":"","ucode":"726A68B7D6470E","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ee/94/5f3460cd.jpg","comment_is_top":false,"comment_ctime":1644908166,"is_pvip":false,"replies":[{"id":"122165","content":"你运行试试看？","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1644938686,"ip_address":"","comment_id":334377,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644908166","product_id":100103401,"comment_content":"直接结果是：什么也不打印，没有调用 await 不会执行 async里的代码块","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551242,"discussion_content":"你运行试试看？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644938686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334191,"user_name":"Android攻城狮","can_delete":false,"product_type":"c1","uid":2879107,"ip_address":"","ucode":"9F5031EAAFB94D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ee/83/a843a848.jpg","comment_is_top":false,"comment_ctime":1644805799,"is_pvip":false,"replies":[{"id":"122093","content":"你从这个网站看看？https:&#47;&#47;www.jetbrains.com&#47;idea&#47;download&#47;#section=mac","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1644851856,"ip_address":"","comment_id":334191,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1644805799","product_id":100103401,"comment_content":"官方最新是2021.1.1，怎么升级2021.3.2啊","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551019,"discussion_content":"你从这个网站看看？https://www.jetbrains.com/idea/download/#section=mac","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644851856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024743,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a2/e7/3d96ea93.jpg","nickname":"晓刚学代码","note":"","ucode":"1E77DB86DB82BF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550952,"discussion_content":"用这个 IntelliJ IDEA 2021.3.2 (Community Edition)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644823318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}