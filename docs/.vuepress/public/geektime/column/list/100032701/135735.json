{"id":135735,"title":"19丨提高篇答疑：如何理解TCP四次挥手？","content":"<p>你好，我是盛延敏，这里是网络编程实战第19讲，欢迎回来。</p><p>这一篇文章是提高篇的答疑部分，也是提高篇的最后一篇文章。非常感谢大家的积极评论与留言，让每一篇文章的留言区都成为学习互动的好地方。在今天的内容里，我将针对大家的问题做一次集中回答，希望能帮助你解决前面碰到的一些问题。</p><p>这部分，我将采用Q&amp;A的形式来展开。</p><h2>如何理解TCP四次挥手？</h2><p>TCP建立一个连接需3次握手，而终止一个连接则需要四次挥手。四次挥手的整个过程是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/ea/b8911347d23251b6b0ca07c6ec03a1ea.png?wh=828*592\" alt=\"\"><br>\n首先，一方应用程序调用close，我们称该方为主动关闭方，该端的TCP发送一个FIN包，表示需要关闭连接。之后主动关闭方进入FIN_WAIT_1状态。</p><p>接着，接收到这个FIN包的对端执行被动关闭。这个FIN由TCP协议栈处理，我们知道，TCP协议栈为FIN包插入一个文件结束符EOF到接收缓冲区中，应用程序可以通过read调用来感知这个FIN包。一定要注意，这个EOF会被放在<strong>已排队等候的其他已接收的数据之后</strong>，这就意味着接收端应用程序需要处理这种异常情况，因为EOF表示在该连接上再无额外数据到达。此时，被动关闭方进入CLOSE_WAIT状态。</p><p>接下来，被动关闭方将读到这个EOF，于是，应用程序也调用close关闭它的套接字，这导致它的TCP也发送一个FIN包。这样，被动关闭方将进入LAST_ACK状态。</p><!-- [[[read_end]]] --><p>最终，主动关闭方接收到对方的FIN包，并确认这个FIN包。主动关闭方进入TIME_WAIT状态，而接收到ACK的被动关闭方则进入CLOSED状态。经过2MSL时间之后，主动关闭方也进入CLOSED状态。</p><p>你可以看到，每个方向都需要一个FIN和一个ACK，因此通常被称为四次挥手。</p><p>当然，这中间使用shutdown，执行一端到另一端的半关闭也是可以的。</p><p>当套接字被关闭时，TCP为其所在端发送一个FIN包。在大多数情况下，这是由应用进程调用close而发生的，值得注意的是，一个进程无论是正常退出（exit或者main函数返回），还是非正常退出（比如，收到SIGKILL信号关闭，就是我们常常干的kill -9），所有该进程打开的描述符都会被系统关闭，这也导致TCP描述符对应的连接上发出一个FIN包。</p><p>无论是客户端还是服务器，任何一端都可以发起主动关闭。大多数真实情况是客户端执行主动关闭，你可能不会想到的是，HTTP/1.0却是由服务器发起主动关闭的。</p><h2>最大分组 MSL是TCP 分组在网络中存活的最长时间吗？</h2><p>MSL是任何IP数据报能够在因特网中存活的最长时间。其实它的实现不是靠计时器来完成的，在每个数据报里都包含有一个被称为TTL（time to live）的8位字段，它的最大值为255。TTL可译为“生存时间”，这个生存时间由源主机设置初始值，它表示的是一个IP数据报可以经过的最大跳跃数，每经过一个路由器，就相当于经过了一跳，它的值就减1，当此值减为0时，则所在的路由器会将其丢弃，同时发送ICMP报文通知源主机。RFC793中规定MSL的时间为2分钟，Linux实际设置为30秒。</p><h2>关于listen函数中参数backlog的释义问题</h2><p>我们该如何理解listen函数中的参数backlog？如果backlog表示的是未完成连接队列的大小，那么已完成连接的队列的大小有限制吗？如果都是已经建立连接的状态，那么并发取决于已完成连接的队列的大小吗？</p><p>backlog的值含义从来就没有被严格定义过。原先Linux实现中，backlog参数定义了该套接字对应的未完成连接队列的最大长度 （pending connections)。如果一个连接到达时，该队列已满，客户端将会接收一个ECONNREFUSED的错误信息，如果支持重传，该请求可能会被忽略，之后会进行一次重传。</p><p>从Linux 2.2开始，backlog的参数内核有了新的语义，它现在定义的是已完成连接队列的最大长度，表示的是已建立的连接（established connection），正在等待被接收（accept调用返回），而不是原先的未完成队列的最大长度。现在，未完成队列的最大长度值可以通过 /proc/sys/net/ipv4/tcp_max_syn_backlog完成修改，默认值为128。</p><p>至于已完成连接队列，如果声明的backlog参数比 /proc/sys/net/core/somaxconn的参数要大，那么就会使用我们声明的那个值。实际上，这个默认的值为128。注意在Linux 2.4.25之前，这个值是不可以修改的一个固定值，大小也是128。</p><p>设计良好的程序，在128固定值的情况下也是可以支持成千上万的并发连接的，这取决于I/O分发的效率，以及多线程程序的设计。在后面的性能篇里，我们的目标就是设计这样的程序。</p><h2>UDP连接和断开套接字的过程是怎样的？</h2><p>UDP连接套接字不是发起连接请求的过程，而是记录目的地址和端口到套接字的映射关系。</p><p>断开套接字则相反，将删除原来记录的映射关系。</p><h2>在UDP中不进行connect，为什么客户端会收到信息？</h2><p>有人说，如果按照我在文章中的说法，UDP只有connect才建立socket和IP地址的映射，那么如果不进行connect，收到信息后内核又如何把数据交给对应的socket？</p><p>这个问题非常有意思。我刚刚看到这个问题的时候，心里也在想，是啊，我是不是说错了？</p><p>其实呢，这对应了两个不同的API场景。</p><p>第一个场景就是我这里讨论的connect场景，在这个场景里，我们讨论的是ICMP报文和socket之间的定位。我们知道，ICMP报文发送的是一个不可达的信息，不可达的信息是通过<strong>目的地址和端口</strong>来区分的，如果没有connect操作，<strong>目的地址和端口</strong>就没有办法和socket套接字进行对应，所以，即使收到了ICMP报文，内核也没有办法通知到对应的应用程序，告诉它连接地址不可达。</p><p>那么为什么在不connect的情况下，我们的客户端又可以收到服务器回显的信息了？</p><p>这就涉及到了第二个场景，也就是报文发送的场景。注意服务器端程序，先通过recvfrom函数调用获取了客户端的地址和端口信息，这当然是可以的，因为UDP报文里面包含了这部分信息。然后我们看到服务器端又通过调用sendto函数，把客户端的地址和端口信息告诉了内核协议栈，可以肯定的是，之后发送的UDP报文就带上了<strong>客户端的地址和端口信息</strong>，通过客户端的地址和端口信息，可以找到对应的套接字和应用程序，完成数据的收发。</p><pre><code>//服务器端程序，先通过recvfrom函数调用获取了客户端的地址和端口信息\nint n = recvfrom(socket_fd, message, MAXLINE, 0, (struct sockaddr *) &amp;client_addr, &amp;client_len);\nmessage[n] = 0;\nprintf(&quot;received %d bytes: %s\\n&quot;, n, message);\n\nchar send_line[MAXLINE];\nsprintf(send_line, &quot;Hi, %s&quot;, message);\n\n//服务器端程序调用send函数，把客户端的地址和端口信息告诉了内核\nsendto(socket_fd, send_line, strlen(send_line), 0, (struct sockaddr *) &amp;client_addr, client_len);\n</code></pre><p>从代码中可以看到，这里的connect的作用是记录<strong>客户端目的地址和端口–套接字</strong>的关系，而之所以能正确收到从服务器端发送的报文，那是因为系统已经记录了<strong>客户端源地址和端口–套接字</strong>的映射关系。</p><h2>我们是否可以对一个 UDP套接字进行多次connect的操作?</h2><p>我们知道，对于TCP套接字，connect只能调用一次。但是，对一个UDP套接字来说，进行多次connect操作是被允许的，这样主要有两个作用。</p><p>第一个作用是可以重新指定新的IP地址和端口号；第二个作用是可以断开一个已连接的套接字。为了断开一个已连接的UDP套接字，第二次调用connect时，调用方需要把套接字地址结构的地址族成员设置为AF_UNSPEC。</p><h2>第11讲中程序和时序图的解惑</h2><p>在11讲中，我们讲了关闭连接的几种方式，有同学对这一篇文章中的程序和时序图存在疑惑，并提出了下面几个问题：</p><ol>\n<li>代码运行结果是先显示hi data1，之后才接收到标准输入的close，为什么时序图中画的是先close才接收到hi data1？</li>\n<li>当一方主动close之后，另一方发送数据的时候收到RST。主动方缓冲区会把这个数据丢弃吗？这样的话，应用层应该读不到了吧？</li>\n<li>代码中SIGPIPE的作用不是忽略吗？为什么服务器端会退出？</li>\n<li>主动调用socket的那方关闭了写端，但是还没关闭读端，这时候socket再读到数据是不是就是RST？然后再SIGPIPE？如果是这样的话，为什么不一次性把读写全部关闭呢？</li>\n</ol><p>我还是再仔细讲一下这个程序和时序图。</p><p>首先回答问题1。针对close这个例子，时序图里画的close表示的是客户端发起的close调用。</p><p>关于问题2，“Hi, data1”确实是不应该被接收到的，这个数据报即使发送出去也会收到RST回执，应用层是读不到的。</p><p>关于问题3中SIGPIPE的作用，事实上，默认的SIGPIPE忽略行为就是退出程序，什么也不做，当然，实际程序还是要做一些清理工作的。</p><p>问题4的理解是错误的。第二个例子也显示了，如果主动关闭的一方调用shutdown关闭，没有关闭读这一端，主动关闭的一方可以读到对端的数据，注意这个时候主动关闭连接的一方是在使用read方法进行读操作，而不是write写操作，不会有RST的发生，更不会有SIGPIPE的发生。</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/9a/f283b804c7e33e25a900fedc8c36f09a.png?wh=4152*3256\" alt=\"\"></p><h2>总结</h2><p>以上就是提高篇中一些同学的疑问。我们常说，学问学问，有学才有问。我希望通过今天的答疑可以让你加深对文章的理解，为后面的模块做准备。</p><p>这篇文章之后，我们就将进入到专栏中最重要的部分，也就是性能篇和实战篇了，在性能篇和实战篇里，我们将会使用到之前学到的知识，逐渐打造一个高性能的网络程序框架，你，准备好了吗？</p><p>如果你觉得今天的答疑内容对你有所帮助，欢迎把它转发给你的朋友或者同事，一起交流一下。</p>","neighbors":{"left":{"article_title":"18 | 防人之心不可无：检查数据的有效性","id":134606},"right":{"article_title":"期中大作业丨动手编写一个自己的程序吧！","id":136549}},"comments":[{"had_liked":false,"id":133061,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1568342524,"is_pvip":false,"replies":[{"id":"51624","content":" TTL与MSL是有关系的但不是简单的相等的关系，MSL要大于等于TTL。<br><br>设备在处理TTL的时候，是需要处理时间的，每次处理TTL时这个字段就都应该被减少，来反应花在处理报文上的时间。比如说处理了1秒减1，处理了2秒减2。这样就可以保证TTL为30的肯定活不过30秒。<br><br>","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568887460,"ip_address":"","comment_id":133061,"utype":1}],"discussion_count":9,"race_medal":0,"score":"78877753852","product_id":100032701,"comment_content":"MSL的值怎么和TTL对应的啊？比如MSL设置为30秒，那怎么计算出TTL的值呢？怎么保证一个报文在网络中真的存活不超过30秒？","like_count":18,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467245,"discussion_content":" TTL与MSL是有关系的但不是简单的相等的关系，MSL要大于等于TTL。\n\n设备在处理TTL的时候，是需要处理时间的，每次处理TTL时这个字段就都应该被减少，来反应花在处理报文上的时间。比如说处理了1秒减1，处理了2秒减2。这样就可以保证TTL为30的肯定活不过30秒。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568887460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073027,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/83/bb728e53.jpg","nickname":"Douglas","note":"","ucode":"CFDE3D76B9DAE6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":116577,"discussion_content":"这块确实没有讲明白","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578063729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2948566,"avatar":"","nickname":"Geek_1696dd","note":"","ucode":"DEC1F02116F5F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591395,"discussion_content":"IP数据报的TTL字段值能够保证经过那么多跳IP数据报丢弃，所以根据TTL值能估算出IP数据报的最长生存时间，近似就是报文段的最长生存时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666579999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1685884,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b9/7c/afe6f1eb.jpg","nickname":"vv_test","note":"","ucode":"1D164B2F034E2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378999,"discussion_content":"文章中说：“每经过一个路由器，就相当于经过了一跳，它的值就减 1”\n我的理解这里的路由器就是处理报文的一种，那它其实并不是一定是减1吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623583882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1445744,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","nickname":"槑·先生","note":"","ucode":"897F0475592E3A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360727,"discussion_content":"也没有看明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616509339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333676,"discussion_content":"应该是根据一个统计信息来确定 TTL MSL之间的关系，这里 不用 也不需要非常严格。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607591032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130666,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","nickname":"нáпの゛","note":"","ucode":"834FA877EFBAF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299994,"discussion_content":"相当于是通过控制TTL来近似限制在MSL的时间范围内吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597903181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/af/32/74465c5e.jpg","nickname":"Karl","note":"","ucode":"7938C53C6D9387","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":11107,"discussion_content":"这点我也没看明白。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568359988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1027890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/af/32/74465c5e.jpg","nickname":"Karl","note":"","ucode":"7938C53C6D9387","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":11208,"discussion_content":"应该是没有对应关系吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568369030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":11107,"ip_address":""},"score":11208,"extra":""}]}]},{"had_liked":false,"id":154602,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1574490450,"is_pvip":false,"replies":[{"id":"60390","content":"IP数据报经过多少路由器这个是无法确定的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575189499,"ip_address":"","comment_id":154602,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18754359634","product_id":100032701,"comment_content":"MSL 是任何 IP 数据报能够在因特网中存活的最长时间。其实它的实现不是靠计时器来完成的，在每个数据报里都包含有一个被称为 TTL（time to live）的 8 位字段，它的最大值为 255。TTL 可译为“生存时间”，这个生存时间由源主机设置初始值，它表示的是一个 IP 数据报可以经过的最大跳跃数，每经过一个路由器，就相当于经过了一跳，它的值就减 1，当此值减为 0 时，则所在的路由器会将其丢弃，同时发送 ICMP 报文通知源主机<br><br>这是否意味着一个IP数据报不可能经过255个路由器？<br>请问一个IP数据报经过多少路由器，这个由谁决定？怎么决定？和网络距离距离有什么关系？<br><br>😅感觉老师的回答和问题，没有完全的对上？","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475519,"discussion_content":"IP数据报经过多少路由器这个是无法确定的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575189499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239397,"user_name":"Geek_f8c379","can_delete":false,"product_type":"c1","uid":2018685,"ip_address":"","ucode":"6CE8014B024FEB","user_header":"","comment_is_top":false,"comment_ctime":1596523246,"is_pvip":false,"replies":[{"id":"89391","content":"因为你给SIGPIPE信号设置了SIG_IGN，所以是忽略信号。我说的是如果没有设置，默认的SIGPIPE处理的方式即为退出。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1597639796,"ip_address":"","comment_id":239397,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14481425134","product_id":100032701,"comment_content":"signal(SIGPIPE, SIG_IGN); 实际上是忽略信号 而不是 按照默认的信号处理程序即退出","like_count":3,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503094,"discussion_content":"因为你给SIGPIPE信号设置了SIG_IGN，所以是忽略信号。我说的是如果没有设置，默认的SIGPIPE处理的方式即为退出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597639796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209500,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1587560013,"is_pvip":false,"replies":[{"id":"78417","content":"这是两个层面的东西，因为有了TIME_WAIT所以才导致不设置SO_REUSEADDR的服务端程序会出现&quot;Address already in use&quot;的错误，所以我们在服务端程序bind之前一定记得要设置SO_REUSEADDR。<br><br>但是TIME_WAIT本身还是很有价值的，TIME_WAIT 的引入是为了让 TCP 报文得以自然消失，同时为了让被动关闭方能够正常关闭。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587804687,"ip_address":"","comment_id":209500,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10177494605","product_id":100032701,"comment_content":"请问老师，SO_REUSEADDR虽说是重用TIME_WAIT的socket，为什么不能作为TIME_WAIT的解决方案呢？本质上是解决了端口占用问题，而TIME_WAIT的主要弊端不就在与端口占用吗？","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492814,"discussion_content":"这是两个层面的东西，因为有了TIME_WAIT所以才导致不设置SO_REUSEADDR的服务端程序会出现&amp;quot;Address already in use&amp;quot;的错误，所以我们在服务端程序bind之前一定记得要设置SO_REUSEADDR。\n\n但是TIME_WAIT本身还是很有价值的，TIME_WAIT 的引入是为了让 TCP 报文得以自然消失，同时为了让被动关闭方能够正常关闭。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587804687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133852,"user_name":"风羽星泉","can_delete":false,"product_type":"c1","uid":1198377,"ip_address":"","ucode":"CBC63AA00C5D70","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/29/bbeccb9f.jpg","comment_is_top":false,"comment_ctime":1568684281,"is_pvip":false,"replies":[{"id":"51609","content":"是的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568885608,"ip_address":"","comment_id":133852,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10158618873","product_id":100032701,"comment_content":"老师，我找到我提交的问题答案了。 使用 man listen 命令，可以找到下面这一句话：<br>If the backlog argument is greater than the value in &#47;proc&#47;sys&#47;net&#47;core&#47;somaxconn, then it is silently truncated to that value;   也就是说backlog 设置的值大于somaxconn，会被截断为somaxconn 的值。","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467533,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568885608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133038,"user_name":"小蛋壳","can_delete":false,"product_type":"c1","uid":1101602,"ip_address":"","ucode":"8344163BF7722E","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/22/5a483755.jpg","comment_is_top":false,"comment_ctime":1568333072,"is_pvip":false,"replies":[{"id":"51626","content":"netty是Java的网络通信框架，其底层实现还是依赖类似epoll的事件分发机制的。<br><br>spring mvc这类的使用的Java网络编程框架来做的，tomcat也是类似的。<br><br>Nginx是使用类似epoll的机制来自己实现的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568887596,"ip_address":"","comment_id":133038,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10158267664","product_id":100032701,"comment_content":"高性能的网络通信框架，是不是类似netty做的事？。那比如spring mvc或者其他任何应用程序框架其实底层都需要处理网络通讯这块。可以说知名的框架这块其实处理的都很好？ java应用，是tomcat处理网络请求还是spring来处理的？还有nginx","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467231,"discussion_content":"netty是Java的网络通信框架，其底层实现还是依赖类似epoll的事件分发机制的。\n\nspring mvc这类的使用的Java网络编程框架来做的，tomcat也是类似的。\n\nNginx是使用类似epoll的机制来自己实现的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568887596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343166,"user_name":"铲铲队","can_delete":false,"product_type":"c1","uid":1132569,"ip_address":"","ucode":"D16372C34B7AE3","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/19/14dd81d9.jpg","comment_is_top":false,"comment_ctime":1650685045,"is_pvip":false,"replies":[{"id":"125677","content":"字面意思应该是你说的那种。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1651405823,"ip_address":"","comment_id":343166,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5945652341","product_id":100032701,"comment_content":"至于已完成连接队列，如果声明的 backlog 参数比 &#47;proc&#47;sys&#47;net&#47;core&#47;somaxconn 的参数要大，那么就会使用我们声明的那个值<br>-----》老师，这里是不是有问题呢，原文是这样的： If  the  backlog  argument  is greater than the value in &#47;proc&#47;sys&#47;net&#47;core&#47;somaxconn, then it issilently truncated to that value<br>意思应该是设置的backlog值超过了最大值，则被截断为最大值把。<br>","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569319,"discussion_content":"字面意思应该是你说的那种。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651405823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133849,"user_name":"风羽星泉","can_delete":false,"product_type":"c1","uid":1198377,"ip_address":"","ucode":"CBC63AA00C5D70","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/29/bbeccb9f.jpg","comment_is_top":false,"comment_ctime":1568683821,"is_pvip":false,"replies":[{"id":"51610","content":"因为你设置太大也没有，系统有个默认值。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568885651,"ip_address":"","comment_id":133849,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5863651117","product_id":100032701,"comment_content":"老师，我修改了程序中的backlog为10，&#47;proc&#47;sys&#47;net&#47;core&#47;somaxconn没有变还是默认值128。测试程序同时发起800个连接请求，用netstat观察每次大概能建立10个连接，最后有大量连接报错“A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.”；<br>当我修改程序中的backlog为1000时，最大可连接数并没有突破128，最后也是报上面那个错误。<br>是不是backlog设置的值只能小于内核somaxconn的值，如果比它大，则取内核设置的值。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467531,"discussion_content":"因为你设置太大也没有，系统有个默认值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568885651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027840,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/af/00/9b49f42b.jpg","nickname":"skye","note":"","ucode":"C55C9F52C78A00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":121413,"discussion_content":"是设置不生效吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578318830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335899,"user_name":"三年二班邱小东","can_delete":false,"product_type":"c1","uid":2922136,"ip_address":"","ucode":"909B49C63C8EC6","user_header":"https://static001.geekbang.org/account/avatar/00/2c/96/98/89b96cda.jpg","comment_is_top":false,"comment_ctime":1645760152,"is_pvip":true,"replies":[{"id":"122799","content":"主动方。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1645882032,"ip_address":"","comment_id":335899,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1645760152","product_id":100032701,"comment_content":"老师，为FIN包插入EOF的TCP协议栈是主动关闭方插入的，还是被动关闭方插入的？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553412,"discussion_content":"主动方。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645882032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2944638,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/ee/7e/519b6808.jpg","nickname":"哦","note":"","ucode":"8DC2C012FEFA68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564400,"discussion_content":"老师，上面写的是“TCP 协议栈为 FIN 包插入一个文件结束符 EOF 到接收缓冲区中”，如果是主动方插入EOF，不是应该在发送缓冲区吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650243839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318478,"user_name":"GeekYanger","can_delete":false,"product_type":"c1","uid":2046036,"ip_address":"","ucode":"E674B7D25261CC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/sOuSC65kXWdWBAIIs6uXAD41Ed8Wo8tib81LLVOQJ2oK23TgPDy6x0PGmp7rXwLR3BHOicaKx1zib1DyfpCITK3dw/132","comment_is_top":false,"comment_ctime":1635307137,"is_pvip":false,"replies":[{"id":"115709","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1635669601,"ip_address":"","comment_id":318478,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635307137","product_id":100032701,"comment_content":"记录一下，TIME_WAIT本身还是很有价值的，TIME_WAIT 的引入是为了让 TCP 报文得以自然消失，同时为了让被动关闭方能够正常关闭。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529262,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635669601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316620,"user_name":"landing","can_delete":false,"product_type":"c1","uid":2663758,"ip_address":"","ucode":"3911432A34C31F","user_header":"https://static001.geekbang.org/account/avatar/00/28/a5/4e/1c89bca4.jpg","comment_is_top":false,"comment_ctime":1634455670,"is_pvip":false,"replies":[{"id":"115261","content":"内核收到数据是通过服务端套接字来完成的，而要把服务端的数据发送给客户端，需要绑定服务端套接字和客户端地址-端口，这就是通过代码中recvform和sendto来完成的。<br><br>","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1635127847,"ip_address":"","comment_id":316620,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634455670","product_id":100032701,"comment_content":"&quot;注意服务器端程序，先通过 recvfrom 函数调用获取了客户端的地址和端口信息，这当然是可以的，因为 UDP 报文里面包含了这部分信息。&quot;这里不理解。如果解释了客户端收到服务端的数据是因为服务端第一次接受客户端数据时获得了客户端的地址，然后通过sendto告诉了内核，那么第一步内核为什么把数据给服务端套接字，这一步没有建立映射关系，内核应该也不知道啊","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528439,"discussion_content":"内核收到数据是通过服务端套接字来完成的，而要把服务端的数据发送给客户端，需要绑定服务端套接字和客户端地址-端口，这就是通过代码中recvform和sendto来完成的。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635127847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267079,"user_name":"duckman","can_delete":false,"product_type":"c1","uid":2184325,"ip_address":"","ucode":"0184C26C4B6C1B","user_header":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","comment_is_top":false,"comment_ctime":1607590944,"is_pvip":false,"replies":[{"id":"98876","content":"你的发现是我的程序例子的模板吧，实际上不一定是这样的。不过你对I&#47;O多路复用的理解倒是有另外一个角度，也算是一个层面的理解吧。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1610286087,"ip_address":"","comment_id":267079,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607590944","product_id":100032701,"comment_content":"突然发现了<br><br>无论是TCP&#47;UDP, 建立连接之后, 服务端总是先read, 客户端总是先write。<br><br>所以，有了IO多路复用之后, 是不是 服务端&#47;客户端可以抛弃这个经典的对话模式，完全根据业务层面的需求, 决定是先write还是先read, 而且两个动作是独立的，互不影响。<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511500,"discussion_content":"你的发现是我的程序例子的模板吧，实际上不一定是这样的。不过你对I/O多路复用的理解倒是有另外一个角度，也算是一个层面的理解吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610286087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251577,"user_name":"YUAN","can_delete":false,"product_type":"c1","uid":2153838,"ip_address":"","ucode":"98EF68EEE21893","user_header":"https://static001.geekbang.org/account/avatar/00/20/dd/6e/8f6f79d2.jpg","comment_is_top":false,"comment_ctime":1601698130,"is_pvip":false,"replies":[{"id":"92057","content":"UDP就是不知道的, 使用的时候我们需要容忍这样的丢失。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1601871366,"ip_address":"","comment_id":251577,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1601698130","product_id":100032701,"comment_content":"使用udp时，客户端如何知道服务器端收到了它发送的请求？例如dns查询，客户端发送的请求如果丢失，那么客户端如何知道发生了报文丢失？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506552,"discussion_content":"UDP就是不知道的, 使用的时候我们需要容忍这样的丢失。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601871366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231577,"user_name":"宋菁","can_delete":false,"product_type":"c1","uid":1880075,"ip_address":"","ucode":"7105B7D5B1E338","user_header":"","comment_is_top":false,"comment_ctime":1593731474,"is_pvip":false,"replies":[{"id":"85732","content":"为啥会发生呢？系统自动选择端口，它应该会默默记下来使用过的端口的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1593954827,"ip_address":"","comment_id":231577,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593731474","product_id":100032701,"comment_content":"老师好，udp没绑定端口的话，操作系统动态分配端口，有可能会出现两个socket自动绑定到同一个端口的情况吗","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500354,"discussion_content":"为啥会发生呢？系统自动选择端口，它应该会默默记下来使用过的端口的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593954827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224746,"user_name":"pc","can_delete":false,"product_type":"c1","uid":1652836,"ip_address":"","ucode":"1AD538B9A900B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epKJlW7sqts2ZbPuhMbseTAdvHWnrc4ficAeSZyKibkvn6qyxflPrkKKU3mH6XCNmYvDg11tB6y0pxg/132","comment_is_top":false,"comment_ctime":1591526715,"is_pvip":false,"replies":[{"id":"84270","content":"1. 能不能合并我没有确切的答案，不过我觉得是可以优化的；<br>2.close和shutdown都是标准的四次挥手<br>3.我同意，不过这种是系统内核回收资源额外带来的结果。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1592742139,"ip_address":"","comment_id":224746,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1591526715","product_id":100032701,"comment_content":"看了前面的连接关闭、TCP对链路异常的感知，以及四次挥手，串起来后总感觉有点糊涂。看完这篇的几个问题，又稍微明白了一点。想着还是总结着提问一下：<br>1、首先ACK M+1 和 FIN N两次挥手不能合并吧？上学课本还有一些博客不是都有提到，两者之前被动关闭的一方还可以继续发送数据的。<br><br>2、所以TCP四次挥手简单总结为：A端发送FIN包、B端返回ACK；B端继续send data；B端发送FIN包、A端进入TIME_WAIT并发送ACK。<br>针对“被动关闭方继续send data”这点，回应到本文最后一个问题、以及TCP感知链路异常的几种情况———如果A端是close关闭，B端继续send data的时候就会收到RST、再write则触发SIGPIPE信号；如果A端是shutdown(1)关闭，才可以继续接收到B端的数据，B端也正常的继续send data。（就是文中最后的时序图）<br>这样的话，对于是不是可以理解成shutdown关闭的时候才是四次挥手的场景呢？反过来说，关闭的时候并不都是“标准的四次挥手”？<br><br>3、像kill -9这种暴力关闭程序，都应该类似close关闭吧？<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497594,"discussion_content":"1. 能不能合并我没有确切的答案，不过我觉得是可以优化的；\n2.close和shutdown都是标准的四次挥手\n3.我同意，不过这种是系统内核回收资源额外带来的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592742139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333678,"discussion_content":"客户端调用close, read, write 都关闭, socket被回收, 此时服务端向客户端发送数据的时候，触发 SIGPIPE .\n\n客户端调用shutdown, 只关闭了write, 还可以read, 服务端向客户端发送数据，客户端还是可以正常处理。\n\n有点类似于17讲用read, write来探测TCP连接的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607591635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204248,"user_name":"林子","can_delete":false,"product_type":"c1","uid":1132071,"ip_address":"","ucode":"A27F70B7B5FCBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/27/e0b34360.jpg","comment_is_top":false,"comment_ctime":1586355701,"is_pvip":false,"replies":[{"id":"76798","content":"好问题，我猜是不是会报错？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1586680810,"ip_address":"","comment_id":204248,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586355701","product_id":100032701,"comment_content":"针对UDP connect的问题有个疑问，按照上文说的是为了让内核记录目标ip端口到socket的映射关系，那如果源主机上有两个udp socket都connect同一个目标ip端口，这时如果出现icmp报文时内核是不是会通知这两个socket呢","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491117,"discussion_content":"好问题，我猜是不是会报错？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586680810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185716,"user_name":"awmthink","can_delete":false,"product_type":"c1","uid":1331202,"ip_address":"","ucode":"742915BBCE7111","user_header":"https://static001.geekbang.org/account/avatar/00/14/50/02/cce1cf67.jpg","comment_is_top":false,"comment_ctime":1583669851,"is_pvip":false,"replies":[{"id":"72379","content":"这样的场景极其罕见，也很难模拟，而且TCP的状态其实是一个状态机驱动模式，肯定有一个先来后来的情况，进入先来的那个状态机驱动模式，就会按照那个模式走下去，而不是突然跳出来。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1584174375,"ip_address":"","comment_id":185716,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1583669851","product_id":100032701,"comment_content":"老师，如果连接双方正好同时close conn fd，会怎么样呢，相当于FIN_WAIT_1时，收到了FIN，会不会直接跳过了FIN_WAIT_2，发送ACK后进入TIME_WAIT了呢。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486474,"discussion_content":"这样的场景极其罕见，也很难模拟，而且TCP的状态其实是一个状态机驱动模式，肯定有一个先来后来的情况，进入先来的那个状态机驱动模式，就会按照那个模式走下去，而不是突然跳出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584174375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1331202,"avatar":"https://static001.geekbang.org/account/avatar/00/14/50/02/cce1cf67.jpg","nickname":"awmthink","note":"","ucode":"742915BBCE7111","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200232,"discussion_content":"看了一下TCP的状态转移图，FIN_WAIT_1如果同时收到ACK和FIN，则会发送ACK，然后进行TIME_WAIT。如果只收到FIN，则会发送ACK，则进行CLOSING状态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583670936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180632,"user_name":"鸠摩·智","can_delete":false,"product_type":"c1","uid":1211909,"ip_address":"","ucode":"6CD93CD1DB6955","user_header":"https://static001.geekbang.org/account/avatar/00/12/7e/05/431d380f.jpg","comment_is_top":false,"comment_ctime":1582356259,"is_pvip":false,"replies":[{"id":"71039","content":"确实是没有写，我加上，让编辑改下。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583053205,"ip_address":"","comment_id":180632,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1582356259","product_id":100032701,"comment_content":"老师，文章开头描述4次挥手，被动方读取数据到eof后，向主动方发fin的ack，主动方进入fin_wait_2，这里是不是缺失了？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484737,"discussion_content":"确实是没有写，我加上，让编辑改下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583053205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2916751,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/U5vvFI4v3jibf6uHbOFtkm1sBaXeLZnJicCOia0KW5KNb2KK06we5gkzJE7RiawfDzMAicHIpINUrTYfjrdZweQsuUA/132","nickname":"Geek_1cd0c8","note":"","ucode":"1F0C3F5E03C420","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579826,"discussion_content":"2022/07/13 fin_wait_2 还是没有加上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657703715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177777,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1581498046,"is_pvip":false,"replies":[{"id":"71017","content":"好问题，事实上为了节省带宽，确实有这样做的，这里为了讲述方便，将其分开。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583050948,"ip_address":"","comment_id":177777,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1581498046","product_id":100032701,"comment_content":"四次挥手的ACKM+1 和 FIN N为啥不能合并到一起？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483537,"discussion_content":"好问题，事实上为了节省带宽，确实有这样做的，这里为了讲述方便，将其分开。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583050948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333679,"discussion_content":"相当于3次握手中的搭便车。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607591820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228275,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bd/f3/a59e8c99.jpg","nickname":"湛","note":"","ucode":"08D2E233A952C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":172813,"discussion_content":"可以合并 之所以分开是为了 服务端处理完客户端发来最后的内容后 并可以向客户端发送一些消息 如果你没有消息需要发送 就可以合并","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581797745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170345,"user_name":"Douglas","can_delete":false,"product_type":"c1","uid":1073027,"ip_address":"","ucode":"CFDE3D76B9DAE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/83/bb728e53.jpg","comment_is_top":false,"comment_ctime":1578575199,"is_pvip":false,"replies":[{"id":"68060","content":"理解挥手的目的就自然理解为啥是4此了，因为每个方向都需要一个 FIN 和一个 ACK，通常被称为四次挥手。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1580630091,"ip_address":"","comment_id":170345,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578575199","product_id":100032701,"comment_content":"老师好像并没有讲为啥是4次挥手","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480947,"discussion_content":"理解挥手的目的就自然理解为啥是4此了，因为每个方向都需要一个 FIN 和一个 ACK，通常被称为四次挥手。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580630091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169339,"user_name":"skye","can_delete":false,"product_type":"c1","uid":1027840,"ip_address":"","ucode":"C55C9F52C78A00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/00/9b49f42b.jpg","comment_is_top":false,"comment_ctime":1578318324,"is_pvip":false,"replies":[{"id":"68079","content":"释放掉其他和套接字相关的系统资源？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1580631368,"ip_address":"","comment_id":169339,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1578318324","product_id":100032701,"comment_content":"请问老师，我看一些开源代码中shutdown之后再调用close，这是为什么？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480515,"discussion_content":"释放掉其他和套接字相关的系统资源？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580631368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027840,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/af/00/9b49f42b.jpg","nickname":"skye","note":"","ucode":"C55C9F52C78A00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158831,"discussion_content":"同一个套接字","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580632269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140416,"user_name":"fl260919784","can_delete":false,"product_type":"c1","uid":1045678,"ip_address":"","ucode":"D6E10B8BDD0BB8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/ae/3b101c00.jpg","comment_is_top":false,"comment_ctime":1570934976,"is_pvip":false,"replies":[{"id":"54286","content":"还真不好模拟，这个直接通过程序来实现比较方便，比如shutdown、close。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570968222,"ip_address":"","comment_id":140416,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570934976","product_id":100032701,"comment_content":"应用程序如何模拟三次挥手关闭一条tcp连接（一般情况下是fin,ack,fin,ack，但也存在fin,ack+fin,ack）","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470381,"discussion_content":"还真不好模拟，这个直接通过程序来实现比较方便，比如shutdown、close。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570968222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135491,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1569197747,"is_pvip":false,"replies":[{"id":"52202","content":"好问题，我好想看过有类似的优化手段，实际上是不是这样做的，我不敢保证，可能要去读源码了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1569407268,"ip_address":"","comment_id":135491,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1569197747","product_id":100032701,"comment_content":"请问老师，为什么四次挥手中，被动关闭方不能把ack与fin合并呢","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468214,"discussion_content":"好问题，我好想看过有类似的优化手段，实际上是不是这样做的，我不敢保证，可能要去读源码了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569407268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1357623,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJmBKrLvqOIXDDbj3ocEIJzqsQx2e5VLDBSX6LmofYtprWwKaVAmHUqU2z3mjREHX8n9eLLiavlPg/132","nickname":"wg1993","note":"","ucode":"D5112FEFDB1DF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52239,"discussion_content":"客户端发一个FIN包过来表示自己要关闭，服务器端返回一个ACK，但是此时服务器端可能还有数据待发送，要等数据都发完了才能发送一个FIN包过去，所以不能合并，个人理解","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574006993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1167662,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d1/2e/d531b29b.jpg","nickname":"图吐兔","note":"","ucode":"2395E9506CBE0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1357623,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJmBKrLvqOIXDDbj3ocEIJzqsQx2e5VLDBSX6LmofYtprWwKaVAmHUqU2z3mjREHX8n9eLLiavlPg/132","nickname":"wg1993","note":"","ucode":"D5112FEFDB1DF7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70811,"discussion_content":"赞同你的想法，同样可说明建立连接为什么是三次挥手。建立连接时肯定还没发送数据，所以SYN+ACK是成立的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575381160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":52239,"ip_address":""},"score":70811,"extra":""}]},{"author":{"id":1027028,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erHaczgBsEF7zqCj8Hlq2vtYh0M6Jj3pia66ZW0O4fFvNldbkHYX6d8B0fBHwicxAcMMRmcNzPrJLMA/132","nickname":"Jianwen Ji","note":"","ucode":"20A8AC1AA8A8E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21854,"discussion_content":"老师讲的都是经典的。可以合并。也可以想象一下双方同时发Fin的情景。多研究一下TCP状态机那幅图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569547784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134644,"user_name":"kabuka","can_delete":false,"product_type":"c1","uid":1246009,"ip_address":"","ucode":"932DD1E875D850","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/39/18956b2e.jpg","comment_is_top":false,"comment_ctime":1568885099,"is_pvip":false,"replies":[{"id":"51751","content":"哦，我的意思是EOF作为一个异常情况，需要加以处理，也就是读到返回值为0的情况。确实如你所言，程序的逻辑是正常处理的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568960380,"ip_address":"","comment_id":134644,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568885099","product_id":100032701,"comment_content":"“这个 EOF 会被放在已排队等候的其他已接收的数据之后，这就意味着接收端应用程序需要处理这种异常情况“   這種情況不屬於正常嗎？ EOF按照順序排在隊列最後面，在處理完隊列前面的消息后，在處理EOF，正常結束。老師說的需要處理異常情況是指什麼？<br> ","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467842,"discussion_content":"哦，我的意思是EOF作为一个异常情况，需要加以处理，也就是读到返回值为0的情况。确实如你所言，程序的逻辑是正常处理的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568960380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133393,"user_name":"灰色","can_delete":false,"product_type":"c1","uid":1178135,"ip_address":"","ucode":"869B400BBD520D","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/17/d0b8135f.jpg","comment_is_top":false,"comment_ctime":1568547465,"is_pvip":false,"replies":[{"id":"51618","content":"要保证的，一般来说MSL不等于TTL，MSL要比TTL大，保证2MSL的时间时候对应的分组一定变得无效。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568886895,"ip_address":"","comment_id":133393,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568547465","product_id":100032701,"comment_content":"即使经过了2MSL也不一定保证一个tcp分组的TTL为0吧，也就是这个分组变得无效，那么TIME_WAIT如何避免连接“化身”的问题呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467377,"discussion_content":"要保证的，一般来说MSL不等于TTL，MSL要比TTL大，保证2MSL的时间时候对应的分组一定变得无效。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568886895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133331,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1568518758,"is_pvip":false,"replies":[{"id":"51620","content":"不是啊，如果对着一个广播地址发送，才是一个广播操作。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568887013,"ip_address":"","comment_id":133331,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568518758","product_id":100032701,"comment_content":"今天又回头讲udp的connect突然想起来 那udp的send是个广播操作？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467353,"discussion_content":"不是啊，如果对着一个广播地址发送，才是一个广播操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568887013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133268,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1568472176,"is_pvip":false,"replies":[{"id":"51636","content":"程序贴上来，大家一起研究下。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568888575,"ip_address":"","comment_id":133268,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568472176","product_id":100032701,"comment_content":"实验了一下往半关闭（本端shutdown）状态的连接里写东西，发现不会返回任何错误信息,，感觉就像正常的连接write一样(然它写多少字节，它就返回多少)，这个是为什么呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467327,"discussion_content":"程序贴上来，大家一起研究下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568888575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133059,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1568341434,"is_pvip":false,"replies":[{"id":"51625","content":"是的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568887484,"ip_address":"","comment_id":133059,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568341434","product_id":100032701,"comment_content":"对于udp那里，connect的作用应该是记录服务端ip,端口号和socket的对应关系吧","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467244,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568887484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}