{"id":282478,"title":"14 | 如何在Redis中保存时间序列数据？","content":"<p>你好，我是蒋德钧。</p><p>我们现在做互联网产品的时候，都有这么一个需求：记录用户在网站或者App上的点击行为数据，来分析用户行为。这里的数据一般包括用户ID、行为类型（例如浏览、登录、下单等）、行为发生的时间戳：</p><pre><code>UserID, Type, TimeStamp\n</code></pre><p>我之前做过的一个物联网项目的数据存取需求，和这个很相似。我们需要周期性地统计近万台设备的实时状态，包括设备ID、压力、温度、湿度，以及对应的时间戳：</p><pre><code>DeviceID, Pressure, Temperature, Humidity, TimeStamp\n</code></pre><p>这些与发生时间相关的一组数据，就是时间序列数据。<strong>这些数据的特点是没有严格的关系模型，记录的信息可以表示成键和值的关系</strong>（例如，一个设备ID对应一条记录），所以，并不需要专门用关系型数据库（例如MySQL）来保存。而Redis的键值数据模型，正好可以满足这里的数据存取需求。Redis基于自身数据结构以及扩展模块，提供了两种解决方案。</p><p>这节课，我就以物联网场景中统计设备状态指标值为例，和你聊聊不同解决方案的做法和优缺点。</p><p>俗话说，“知己知彼，百战百胜”，我们就先从时间序列数据的读写特点开始，看看到底应该采用什么样的数据类型来保存吧。</p><h2>时间序列数据的读写特点</h2><p>在实际应用中，时间序列数据通常是持续高并发写入的，例如，需要连续记录数万个设备的实时状态值。同时，时间序列数据的写入主要就是插入新数据，而不是更新一个已存在的数据，也就是说，一个时间序列数据被记录后通常就不会变了，因为它就代表了一个设备在某个时刻的状态值（例如，一个设备在某个时刻的温度测量值，一旦记录下来，这个值本身就不会再变了）。</p><!-- [[[read_end]]] --><p>所以，<strong>这种数据的写入特点很简单，就是插入数据快，这就要求我们选择的数据类型，在进行数据插入时，复杂度要低，尽量不要阻塞</strong>。看到这儿，你可能第一时间会想到用Redis的String、Hash类型来保存，因为它们的插入复杂度都是O(1)，是个不错的选择。但是，我在<a href=\"https://time.geekbang.org/column/article/279649\">第11讲</a>中说过，String类型在记录小数据时（例如刚才例子中的设备温度值），元数据的内存开销比较大，不太适合保存大量数据。</p><p>那我们再看看，时间序列数据的“读”操作有什么特点。</p><p>我们在查询时间序列数据时，既有对单条记录的查询（例如查询某个设备在某一个时刻的运行状态信息，对应的就是这个设备的一条记录），也有对某个时间范围内的数据的查询（例如每天早上8点到10点的所有设备的状态信息）。</p><p>除此之外，还有一些更复杂的查询，比如对某个时间范围内的数据做聚合计算。这里的聚合计算，就是对符合查询条件的所有数据做计算，包括计算均值、最大/最小值、求和等。例如，我们要计算某个时间段内的设备压力的最大值，来判断是否有故障发生。</p><p>那用一个词概括时间序列数据的“读”，就是查询模式多。</p><p>弄清楚了时间序列数据的读写特点，接下来我们就看看如何在Redis中保存这些数据。我们来分析下：针对时间序列数据的“写要快”，Redis的高性能写特性直接就可以满足了；而针对“查询模式多”，也就是要支持单点查询、范围查询和聚合计算，Redis提供了保存时间序列数据的两种方案，分别可以基于Hash和Sorted Set实现，以及基于RedisTimeSeries模块实现。</p><p>接下来，我们先学习下第一种方案。</p><h2>基于Hash和Sorted Set保存时间序列数据</h2><p>Hash和Sorted Set组合的方式有一个明显的好处：它们是Redis内在的数据类型，代码成熟和性能稳定。所以，基于这两个数据类型保存时间序列数据，系统稳定性是可以预期的。</p><p>不过，在前面学习的场景中，我们都是使用一个数据类型来存取数据，那么，<strong>为什么保存时间序列数据，要同时使用这两种类型？这是我们要回答的第一个问题。</strong></p><p>关于Hash类型，我们都知道，它有一个特点是，可以实现对单键的快速查询。这就满足了时间序列数据的单键查询需求。我们可以把时间戳作为Hash集合的key，把记录的设备状态值作为Hash集合的value。</p><p>可以看下用Hash集合记录设备的温度值的示意图：</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/be/f2e7bc4586be59aa5e7e78a5599830be.jpg?wh=2556*1530\" alt=\"\"></p><p>当我们想要查询某个时间点或者是多个时间点上的温度数据时，直接使用HGET命令或者HMGET命令，就可以分别获得Hash集合中的一个key和多个key的value值了。</p><p>举个例子。我们用HGET命令查询202008030905这个时刻的温度值，使用HMGET查询202008030905、202008030907、202008030908这三个时刻的温度值，如下所示：</p><pre><code>HGET device:temperature 202008030905\n&quot;25.1&quot;\n\nHMGET device:temperature 202008030905 202008030907 202008030908\n1) &quot;25.1&quot;\n2) &quot;25.9&quot;\n3) &quot;24.9&quot;\n</code></pre><p>你看，用Hash类型来实现单键的查询很简单。但是，<strong>Hash类型有个短板：它并不支持对数据进行范围查询。</strong></p><p>虽然时间序列数据是按时间递增顺序插入Hash集合中的，但Hash类型的底层结构是哈希表，并没有对数据进行有序索引。所以，如果要对Hash类型进行范围查询的话，就需要扫描Hash集合中的所有数据，再把这些数据取回到客户端进行排序，然后，才能在客户端得到所查询范围内的数据。显然，查询效率很低。</p><p>为了能同时支持按时间戳范围的查询，可以用Sorted Set来保存时间序列数据，因为它能够根据元素的权重分数来排序。我们可以把时间戳作为Sorted Set集合的元素分数，把时间点上记录的数据作为元素本身。</p><p>我还是以保存设备温度的时间序列数据为例，进行解释。下图显示了用Sorted Set集合保存的结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/7a/9e1214dbd5b42c5b3452ea73efc8c67a.jpg?wh=2564*1530\" alt=\"\"></p><p>使用Sorted Set保存数据后，我们就可以使用ZRANGEBYSCORE命令，按照输入的最大时间戳和最小时间戳来查询这个时间范围内的温度值了。如下所示，我们来查询一下在2020年8月3日9点7分到9点10分间的所有温度值：</p><pre><code>ZRANGEBYSCORE device:temperature 202008030907 202008030910\n1) &quot;25.9&quot;\n2) &quot;24.9&quot;\n3) &quot;25.3&quot;\n4) &quot;25.2&quot;\n</code></pre><p>现在我们知道了，同时使用Hash和Sorted Set，可以满足单个时间点和一个时间范围内的数据查询需求了，但是我们又会面临一个新的问题，<strong>也就是我们要解答的第二个问题：如何保证写入Hash和Sorted Set是一个原子性的操作呢？</strong></p><p>所谓“原子性的操作”，就是指我们执行多个写命令操作时（例如用HSET命令和ZADD命令分别把数据写入Hash和Sorted Set），这些命令操作要么全部完成，要么都不完成。</p><p>只有保证了写操作的原子性，才能保证同一个时间序列数据，在Hash和Sorted Set中，要么都保存了，要么都没保存。否则，就可能出现Hash集合中有时间序列数据，而Sorted Set中没有，那么，在进行范围查询时，就没有办法满足查询需求了。</p><p>那Redis是怎么保证原子性操作的呢？这里就涉及到了Redis用来实现简单的事务的MULTI和EXEC命令。当多个命令及其参数本身无误时，MULTI和EXEC命令可以保证执行这些命令时的原子性。关于Redis的事务支持和原子性保证的异常情况，我会在第30讲中向你介绍，这节课，我们只要了解一下MULTI和EXEC这两个命令的使用方法就行了。</p><ul>\n<li>MULTI命令：表示一系列原子性操作的开始。收到这个命令后，Redis就知道，接下来再收到的命令需要放到一个内部队列中，后续一起执行，保证原子性。</li>\n<li>EXEC命令：表示一系列原子性操作的结束。一旦Redis收到了这个命令，就表示所有要保证原子性的命令操作都已经发送完成了。此时，Redis开始执行刚才放到内部队列中的所有命令操作。</li>\n</ul><p>你可以看下下面这张示意图，命令1到命令N是在MULTI命令后、EXEC命令前发送的，它们会被一起执行，保证原子性。</p><p><img src=\"https://static001.geekbang.org/resource/image/c0/62/c0e2fd5834113cef92f2f68e7462a262.jpg?wh=2326*1338\" alt=\"\"></p><p>以保存设备状态信息的需求为例，我们执行下面的代码，把设备在2020年8月3日9时5分的温度，分别用HSET命令和ZADD命令写入Hash集合和Sorted Set集合。</p><pre><code>127.0.0.1:6379&gt; MULTI\nOK\n\n127.0.0.1:6379&gt; HSET device:temperature 202008030911 26.8\nQUEUED\n\n127.0.0.1:6379&gt; ZADD device:temperature 202008030911 26.8\nQUEUED\n\n127.0.0.1:6379&gt; EXEC\n1) (integer) 1\n2) (integer) 1\n</code></pre><p>可以看到，首先，Redis收到了客户端执行的MULTI命令。然后，客户端再执行HSET和ZADD命令后，Redis返回的结果为“QUEUED”，表示这两个命令暂时入队，先不执行；执行了EXEC命令后，HSET命令和ZADD命令才真正执行，并返回成功结果（结果值为1）。</p><p>到这里，我们就解决了时间序列数据的单点查询、范围查询问题，并使用MUTLI和EXEC命令保证了Redis能原子性地把数据保存到Hash和Sorted Set中。<strong>接下来，我们需要继续解决第三个问题：如何对时间序列数据进行聚合计算？</strong></p><p>聚合计算一般被用来周期性地统计时间窗口内的数据汇总状态，在实时监控与预警等场景下会频繁执行。</p><p>因为Sorted Set只支持范围查询，无法直接进行聚合计算，所以，我们只能先把时间范围内的数据取回到客户端，然后在客户端自行完成聚合计算。这个方法虽然能完成聚合计算，但是会带来一定的潜在风险，也就是<strong>大量数据在Redis实例和客户端间频繁传输，这会和其他操作命令竞争网络资源，导致其他操作变慢。</strong></p><p>在我们这个物联网项目中，就需要每3分钟统计一下各个设备的温度状态，一旦设备温度超出了设定的阈值，就要进行报警。这是一个典型的聚合计算场景，我们可以来看看这个过程中的数据体量。</p><p>假设我们需要每3分钟计算一次的所有设备各指标的最大值，每个设备每15秒记录一个指标值，1分钟就会记录4个值，3分钟就会有12个值。我们要统计的设备指标数量有33个，所以，单个设备每3分钟记录的指标数据有将近400个（33 * 12 = 396），而设备总数量有1万台，这样一来，每3分钟就有将近400万条（396 * 1万 = 396万）数据需要在客户端和Redis实例间进行传输。</p><p>为了避免客户端和Redis实例间频繁的大量数据传输，我们可以使用RedisTimeSeries来保存时间序列数据。</p><p>RedisTimeSeries支持直接在Redis实例上进行聚合计算。还是以刚才每3分钟算一次最大值为例。在Redis实例上直接聚合计算，那么，对于单个设备的一个指标值来说，每3分钟记录的12条数据可以聚合计算成一个值，单个设备每3分钟也就只有33个聚合值需要传输，1万台设备也只有33万条数据。数据量大约是在客户端做聚合计算的十分之一，很显然，可以减少大量数据传输对Redis实例网络的性能影响。</p><p>所以，如果我们只需要进行单个时间点查询或是对某个时间范围查询的话，适合使用Hash和Sorted Set的组合，它们都是Redis的内在数据结构，性能好，稳定性高。但是，如果我们需要进行大量的聚合计算，同时网络带宽条件不是太好时，Hash和Sorted Set的组合就不太适合了。此时，使用RedisTimeSeries就更加合适一些。</p><p>好了，接下来，我们就来具体学习下RedisTimeSeries。</p><h2>基于RedisTimeSeries模块保存时间序列数据</h2><p>RedisTimeSeries是Redis的一个扩展模块。它专门面向时间序列数据提供了数据类型和访问接口，并且支持在Redis实例上直接对数据进行按时间范围的聚合计算。</p><p>因为RedisTimeSeries不属于Redis的内建功能模块，在使用时，我们需要先把它的源码单独编译成动态链接库redistimeseries.so，再使用loadmodule命令进行加载，如下所示：</p><pre><code>loadmodule redistimeseries.so\n</code></pre><p>当用于时间序列数据存取时，RedisTimeSeries的操作主要有5个：</p><ul>\n<li>用TS.CREATE命令创建时间序列数据集合；</li>\n<li>用TS.ADD命令插入数据；</li>\n<li>用TS.GET命令读取最新数据；</li>\n<li>用TS.MGET命令按标签过滤查询数据集合；</li>\n<li>用TS.RANGE支持聚合计算的范围查询。</li>\n</ul><p>下面，我来介绍一下如何使用这5个操作。</p><p><strong>1.用TS.CREATE命令创建一个时间序列数据集合</strong></p><p>在TS.CREATE命令中，我们需要设置时间序列数据集合的key和数据的过期时间（以毫秒为单位）。此外，我们还可以为数据集合设置标签，来表示数据集合的属性。</p><p>例如，我们执行下面的命令，创建一个key为device:temperature、数据有效期为600s的时间序列数据集合。也就是说，这个集合中的数据创建了600s后，就会被自动删除。最后，我们给这个集合设置了一个标签属性{device_id:1}，表明这个数据集合中记录的是属于设备ID号为1的数据。</p><pre><code>TS.CREATE device:temperature RETENTION 600000 LABELS device_id 1\nOK\n</code></pre><p><strong>2.用TS.ADD命令插入数据，用TS.GET命令读取最新数据</strong></p><p>我们可以用TS.ADD命令往时间序列集合中插入数据，包括时间戳和具体的数值，并使用TS.GET命令读取数据集合中的最新一条数据。</p><p>例如，我们执行下列TS.ADD命令时，就往device:temperature集合中插入了一条数据，记录的是设备在2020年8月3日9时5分的设备温度；再执行TS.GET命令时，就会把刚刚插入的最新数据读取出来。</p><pre><code>TS.ADD device:temperature 1596416700 25.1\n1596416700\n\nTS.GET device:temperature \n25.1\n</code></pre><p><strong>3.用TS.MGET命令按标签过滤查询数据集合</strong></p><p>在保存多个设备的时间序列数据时，我们通常会把不同设备的数据保存到不同集合中。此时，我们就可以使用TS.MGET命令，按照标签查询部分集合中的最新数据。在使用TS.CREATE创建数据集合时，我们可以给集合设置标签属性。当我们进行查询时，就可以在查询条件中对集合标签属性进行匹配，最后的查询结果里只返回匹配上的集合中的最新数据。</p><p>举个例子。假设我们一共用4个集合为4个设备保存时间序列数据，设备的ID号是1、2、3、4，我们在创建数据集合时，把device_id设置为每个集合的标签。此时，我们就可以使用下列TS.MGET命令，以及FILTER设置（这个配置项用来设置集合标签的过滤条件），查询device_id不等于2的所有其他设备的数据集合，并返回各自集合中的最新的一条数据。</p><pre><code>TS.MGET FILTER device_id!=2 \n1) 1) &quot;device:temperature:1&quot;\n   2) (empty list or set)\n   3) 1) (integer) 1596417000\n      2) &quot;25.3&quot;\n2) 1) &quot;device:temperature:3&quot;\n   2) (empty list or set)\n   3) 1) (integer) 1596417000\n      2) &quot;29.5&quot;\n3) 1) &quot;device:temperature:4&quot;\n   2) (empty list or set)\n   3) 1) (integer) 1596417000\n      2) &quot;30.1&quot;\n</code></pre><p><strong>4.用TS.RANGE支持需要聚合计算的范围查询</strong></p><p>最后，在对时间序列数据进行聚合计算时，我们可以使用TS.RANGE命令指定要查询的数据的时间范围，同时用AGGREGATION参数指定要执行的聚合计算类型。RedisTimeSeries支持的聚合计算类型很丰富，包括求均值（avg）、求最大/最小值（max/min），求和（sum）等。</p><p>例如，在执行下列命令时，我们就可以按照每180s的时间窗口，对2020年8月3日9时5分和2020年8月3日9时12分这段时间内的数据进行均值计算了。</p><pre><code>TS.RANGE device:temperature 1596416700 1596417120 AGGREGATION avg 180000\n1) 1) (integer) 1596416700\n   2) &quot;25.6&quot;\n2) 1) (integer) 1596416880\n   2) &quot;25.8&quot;\n3) 1) (integer) 1596417060\n   2) &quot;26.1&quot;\n</code></pre><p>与使用Hash和Sorted Set来保存时间序列数据相比，RedisTimeSeries是专门为时间序列数据访问设计的扩展模块，能支持在Redis实例上直接进行聚合计算，以及按标签属性过滤查询数据集合，当我们需要频繁进行聚合计算，以及从大量集合中筛选出特定设备或用户的数据集合时，RedisTimeSeries就可以发挥优势了。</p><h2>小结</h2><p>在这节课，我们一起学习了如何用Redis保存时间序列数据。时间序列数据的写入特点是要能快速写入，而查询的特点有三个：</p><ul>\n<li>点查询，根据一个时间戳，查询相应时间的数据；</li>\n<li>范围查询，查询起始和截止时间戳范围内的数据；</li>\n<li>聚合计算，针对起始和截止时间戳范围内的所有数据进行计算，例如求最大/最小值，求均值等。</li>\n</ul><p>关于快速写入的要求，Redis的高性能写特性足以应对了；而针对多样化的查询需求，Redis提供了两种方案。</p><p>第一种方案是，组合使用Redis内置的Hash和Sorted Set类型，把数据同时保存在Hash集合和Sorted Set集合中。这种方案既可以利用Hash类型实现对单键的快速查询，还能利用Sorted Set实现对范围查询的高效支持，一下子满足了时间序列数据的两大查询需求。</p><p>不过，第一种方案也有两个不足：一个是，在执行聚合计算时，我们需要把数据读取到客户端再进行聚合，当有大量数据要聚合时，数据传输开销大；另一个是，所有的数据会在两个数据类型中各保存一份，内存开销不小。不过，我们可以通过设置适当的数据过期时间，释放内存，减小内存压力。</p><p>我们学习的第二种实现方案是使用RedisTimeSeries模块。这是专门为存取时间序列数据而设计的扩展模块。和第一种方案相比，RedisTimeSeries能支持直接在Redis实例上进行多种数据聚合计算，避免了大量数据在实例和客户端间传输。不过，RedisTimeSeries的底层数据结构使用了链表，它的范围查询的复杂度是O(N)级别的，同时，它的TS.GET查询只能返回最新的数据，没有办法像第一种方案的Hash类型一样，可以返回任一时间点的数据。</p><p>所以，组合使用Hash和Sorted Set，或者使用RedisTimeSeries，在支持时间序列数据存取上各有优劣势。我给你的建议是：</p><ul>\n<li>如果你的部署环境中网络带宽高、Redis实例内存大，可以优先考虑第一种方案；</li>\n<li>如果你的部署环境中网络、内存资源有限，而且数据量大，聚合计算频繁，需要按数据集合属性查询，可以优先考虑第二种方案。</li>\n</ul><h2>每课一问</h2><p>按照惯例，我给你提个小问题。</p><p>在这节课上，我提到，我们可以使用Sorted Set保存时间序列数据，把时间戳作为score，把实际的数据作为member，你觉得这样保存数据有没有潜在的风险？另外，如果你是Redis的开发维护者，你会把聚合计算也设计为Sorted Set的一个内在功能吗？</p><p>好了，这节课就到这里，如果你觉得有所收获，欢迎你把今天的内容分享给你的朋友或同事，我们下节课见。</p>","neighbors":{"left":{"article_title":"13 | GEO是什么？还可以定义新的数据类型吗？","id":281745},"right":{"article_title":"15 | 消息队列的考验：Redis有哪些解决方案？","id":284291}},"comments":[{"had_liked":false,"id":246577,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1599409913,"is_pvip":true,"discussion_count":40,"race_medal":0,"score":"1616507113209","product_id":100056701,"comment_content":"使用Sorted Set保存时序数据，把时间戳作为score，把实际的数据作为member，有什么潜在的风险？<br><br>我目前能想到的风险是，如果对某一个对象的时序数据记录很频繁的话，那么这个key很容易变成一个bigkey，在key过期释放内存时可能引发阻塞风险。所以不能把这个对象的所有时序数据存储在一个key上，而是需要拆分存储，例如可以按天&#47;周&#47;月拆分（根据具体查询需求来定）。当然，拆分key的缺点是，在查询时，可能需要客户端查询多个key后再做聚合才能得到结果。<br><br>如果你是Redis的开发维护者，你会把聚合计算也设计为Sorted Set的内在功能吗？<br><br>不会。因为聚合计算是CPU密集型任务，Redis在处理请求时是单线程的，也就是它在做聚合计算时无法利用到多核CPU来提升计算速度，如果计算量太大，这也会导致Redis的响应延迟变长，影响Redis的性能。Redis的定位就是高性能的内存数据库，要求访问速度极快。所以对于时序数据的存储和聚合计算，我觉得更好的方式是交给时序数据库去做，时序数据库会针对这些存储和计算的场景做针对性优化。<br><br>另外，在使用MULTI和EXEC命令时，建议客户端使用pipeline，当使用pipeline时，客户端会把命令一次性批量发送给服务端，然后让服务端执行，这样可以减少客户端和服务端的来回网络IO次数，提升访问性能。","like_count":376,"discussions":[{"author":{"id":1602239,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyobcyicicCQoldZofsS36xrjA2R2hk2F89pu1hCqwjlRaRG4xKkgCicZibEVdOwpfN5rWjEchrsxicSQ/132","nickname":"Geek_e8d55e","note":"","ucode":"5F13626B0E1E45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335360,"discussion_content":"事务中前一命令执行失败，后一命令也会正常执行吧？redis事务只能保证不被事务外命令打断，而不能保证要么都成功，要么都失败吧？","likes_number":17,"is_delete":false,"is_hidden":false,"ctime":1608172844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1602239,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyobcyicicCQoldZofsS36xrjA2R2hk2F89pu1hCqwjlRaRG4xKkgCicZibEVdOwpfN5rWjEchrsxicSQ/132","nickname":"Geek_e8d55e","note":"","ucode":"5F13626B0E1E45","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335375,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608175778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335360,"ip_address":""},"score":335375,"extra":""},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":346483,"discussion_content":"我感觉这里老师要解决的问题是网络抖动场景和客户端程序自身fail的场景，只要能保证两条指令一起提交到server就ok了，不考虑server执行指令到一半宕机，或者指令有误等情况，所以pipeline足够解决问题了，事务并不能提供更多保护。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1611972142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335375,"ip_address":""},"score":346483,"extra":""}]},{"author":{"id":2289364,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ee/d4/040686cd.jpg","nickname":"阳光下的小丑","note":"","ucode":"57995B5CC72715","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327848,"discussion_content":"有一个问题温度作为member 那同一个温度的数据不是后面就会覆盖前面的吗？那不是数据就缺失了聚合出来的结果也是不对的宝宝","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1605968470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2289364,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ee/d4/040686cd.jpg","nickname":"阳光下的小丑","note":"","ucode":"57995B5CC72715","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":327850,"discussion_content":"是的，有这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605968758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327848,"ip_address":""},"score":327850,"extra":""},{"author":{"id":1260141,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/910b2445.jpg","nickname":"Wheat","note":"","ucode":"7D99EA149B6DE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2289364,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ee/d4/040686cd.jpg","nickname":"阳光下的小丑","note":"","ucode":"57995B5CC72715","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":381122,"discussion_content":"没太懂，就算温度相同，他们的时间戳也不同啊，怎么会覆盖","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624900887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327848,"ip_address":""},"score":381122,"extra":""},{"author":{"id":2824200,"avatar":"","nickname":"Geek_5eb220","note":"","ucode":"7FBDEC083AE93D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1260141,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/910b2445.jpg","nickname":"Wheat","note":"","ucode":"7D99EA149B6DE8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408361,"discussion_content":"members 不能重复，时间戳只是分数","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1635234990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":381122,"ip_address":""},"score":408361,"extra":""}]},{"author":{"id":1781893,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/30/85/14c2f16c.jpg","nickname":"石小","note":"","ucode":"4258C686F289A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320677,"discussion_content":"如果redis使用集群部署，还能保证原子性吗","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1604451278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1781893,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/30/85/14c2f16c.jpg","nickname":"石小","note":"","ucode":"4258C686F289A6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320678,"discussion_content":"不能了，不支持分布式事务。","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1604451334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320677,"ip_address":""},"score":320678,"extra":""},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":558591,"discussion_content":"你好，集群部署，pipeline不能再使用了对吗，因为不能保证命令被发送到同一台实例。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648391289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320678,"ip_address":""},"score":558591,"extra":""}]},{"author":{"id":1316682,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/4a/d8fd5563.jpg","nickname":"记忆","note":"","ucode":"503DBE662BF544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311418,"discussion_content":"为啥不用简单的lua脚本 eval 保证原子性呢？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1602333853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053509,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/45/16c60da2.jpg","nickname":"@%初%@","note":"","ucode":"2B8A6134675ED7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304005,"discussion_content":"是的，可以使用pipeline去处理多个命令，当时，也可以选择使用Lua脚本","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1599447284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098987,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","nickname":"花晨少年","note":"","ucode":"6AA3537A6BA10E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380808,"discussion_content":"除了看老师的文章，必须要看k神的分析。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1624708211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1926642,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/f2/24e48aae.jpg","nickname":"飞白","note":"","ucode":"2586407256F3B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341527,"discussion_content":"关于key过大的问题，是不是可以使用unlink命令异步删除？还是说这样也有什么风险呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610446877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1926642,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/f2/24e48aae.jpg","nickname":"飞白","note":"","ucode":"2586407256F3B3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341530,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610447565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341527,"ip_address":""},"score":341530,"extra":""}]},{"author":{"id":1977474,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","nickname":"Reborn 2.0","note":"","ucode":"BA506E7455D91C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318909,"discussion_content":"我想问, 使用sorted set存储, zset不是本身就维护了一个dict么? 为什么还要用hash再存一遍呢?","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603878789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1977474,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","nickname":"Reborn 2.0","note":"","ucode":"BA506E7455D91C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318927,"discussion_content":"重点是zset可以根据score排序。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603885191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318909,"ip_address":""},"score":318927,"extra":""},{"author":{"id":1997465,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/7a/99/4ac1d891.jpg","nickname":"猴子胖胖","note":"","ucode":"EFFE195C126E00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1977474,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","nickname":"Reborn 2.0","note":"","ucode":"BA506E7455D91C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319042,"discussion_content":"我也有这个疑问","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603931555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318909,"ip_address":""},"score":319042,"extra":""},{"author":{"id":1107550,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/5e/62158841.jpg","nickname":"取经人","note":"","ucode":"C3668CA65200DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1977474,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","nickname":"Reborn 2.0","note":"","ucode":"BA506E7455D91C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325952,"discussion_content":"作者说的意思是单个用hash","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605489056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318909,"ip_address":""},"score":325952,"extra":""}]},{"author":{"id":2948634,"avatar":"","nickname":"Geek_275fa9","note":"","ucode":"E08AB55F59EF59","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558046,"discussion_content":"ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]  这个算 Sorted Set 的聚合计算不？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648051963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2948634,"avatar":"","nickname":"Geek_275fa9","note":"","ucode":"E08AB55F59EF59","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558045,"discussion_content":"但是 redis 依然实现了 聚合计算 了啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648051848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2649276,"avatar":"https://static001.geekbang.org/account/avatar/00/28/6c/bc/f751786b.jpg","nickname":"Leo","note":"","ucode":"CEBAD9CDCFC2A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556729,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647488341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1108924,"avatar":"https://static001.geekbang.org/account/avatar/00/10/eb/bc/6ccac4bb.jpg","nickname":"武文文武","note":"","ucode":"5288366646A15B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352806,"discussion_content":"6. 0之后redis支持多线程了，所以聚合运算不会阻塞，可以支持此功能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614856296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1108924,"avatar":"https://static001.geekbang.org/account/avatar/00/10/eb/bc/6ccac4bb.jpg","nickname":"武文文武","note":"","ucode":"5288366646A15B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352862,"discussion_content":"不是的。6.0多线程只是协议解析多线程处理，处理命令还是单线程，依旧有阻塞风险。","likes_number":35,"is_delete":false,"is_hidden":false,"ctime":1614872218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":352806,"ip_address":""},"score":352862,"extra":""}]},{"author":{"id":1107550,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/5e/62158841.jpg","nickname":"取经人","note":"","ucode":"C3668CA65200DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325951,"discussion_content":"厉害了老兄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605489023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1619871,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b7/9f/35038a96.jpg","nickname":"我是真的腰疼","note":"","ucode":"2A0F7B330A07B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310116,"discussion_content":"跨实例的更新没办法用pipline吧？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601625450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1619871,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b7/9f/35038a96.jpg","nickname":"我是真的腰疼","note":"","ucode":"2A0F7B330A07B1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577085,"discussion_content":"为啥?  hash和zset是两个key?  没法保证落到同一个实例上么?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655909977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310116,"ip_address":""},"score":577085,"extra":""}]},{"author":{"id":1191376,"avatar":"https://static001.geekbang.org/account/avatar/00/12/2d/d0/c832d9de.jpg","nickname":"┞┱低頭、偲惗ㄡㄜ","note":"","ucode":"2A84C48F43BD21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304011,"discussion_content":"看到大佬的回答都考虑的点都面面俱到, 想问下大佬对于学习一门新的技术/框架有什么独到见解或有什么学习步骤可以分享一下吗? :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599448467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1191376,"avatar":"https://static001.geekbang.org/account/avatar/00/12/2d/d0/c832d9de.jpg","nickname":"┞┱低頭、偲惗ㄡㄜ","note":"","ucode":"2A84C48F43BD21","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304015,"discussion_content":"见未来的加餐。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599451069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304011,"ip_address":""},"score":304015,"extra":""},{"author":{"id":2278138,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c2/fa/115440fa.jpg","nickname":"有趣","note":"","ucode":"F67A10EE122CB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":334888,"discussion_content":"你说的是一本书还是什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608018752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304015,"ip_address":""},"score":334888,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2278138,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c2/fa/115440fa.jpg","nickname":"有趣","note":"","ucode":"F67A10EE122CB3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334895,"discussion_content":"看本专栏的加餐文章哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608021956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334888,"ip_address":""},"score":334895,"extra":""}]},{"author":{"id":1103091,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","nickname":"李二木","note":"","ucode":"30E03BB84ADB27","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303987,"discussion_content":"请教一个问题，有一个队列需求用的是List,但是想让key的value带有过期时间，大佬有什么解决方案吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599443887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1103091,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","nickname":"李二木","note":"","ucode":"30E03BB84ADB27","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":303989,"discussion_content":"只能整个key设置过期。想要每个元素过期只能在每个元素上记录时间，然后自己写逻辑扫描删除，但每次都需要遍历。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1599444816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303987,"ip_address":""},"score":303989,"extra":""},{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":369780,"discussion_content":"这种做法危险性很高，太依赖脚本了。如果脚本挂了，不释放 key。很有可能 OOM","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619154922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303989,"ip_address":""},"score":369780,"extra":""}]}]},{"had_liked":false,"id":246630,"user_name":"阳明","can_delete":false,"product_type":"c1","uid":1052818,"ip_address":"","ucode":"BA0F5AF0E5A27A","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/92/760f0964.jpg","comment_is_top":false,"comment_ctime":1599442876,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"289362251708","product_id":100056701,"comment_content":"存在member重复的问题，会对member覆盖","like_count":67,"discussions":[{"author":{"id":2115802,"avatar":"https://static001.geekbang.org/account/avatar/00/20/48/da/194b76f8.jpg","nickname":"NY152","note":"","ucode":"B8B86DCF8E73FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347295,"discussion_content":"我去，发现一只大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612189362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346474,"discussion_content":"惊现大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611971076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1112676,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","nickname":"Sam Fu","note":"","ucode":"EA285A4943271F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348595,"discussion_content":"咋看出来的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612661574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":346474,"ip_address":""},"score":348595,"extra":""},{"author":{"id":1365738,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d6/ea/56d4712f.jpg","nickname":"William张先森","note":"","ucode":"F31EEA625E2E14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112676,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","nickname":"Sam Fu","note":"","ucode":"EA285A4943271F","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":386075,"discussion_content":"看过阳明的k8s教程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627393512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348595,"ip_address":""},"score":386075,"extra":""}]}]},{"had_liked":false,"id":246621,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1599440258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"134743426434","product_id":100056701,"comment_content":"Hash 和 Sorted Set 的结合让我想到了 LRU 中的 HashMap 和 LinkedList 的结合，二者均取长处碰撞出了不一样的火花，看看毫不沾边的事物，往往具有相同的内涵。","like_count":31},{"had_liked":false,"id":276749,"user_name":"Geek_1e8830","can_delete":false,"product_type":"c1","uid":1506574,"ip_address":"","ucode":"CD84A5AAAE6872","user_header":"","comment_is_top":false,"comment_ctime":1612099861,"is_pvip":false,"replies":[{"id":"100441","content":"Redis会用单线程方式执行Lua脚本，保证脚本执行过程中不被其他命令打断，一般我们称之为以原子性的方式执行。但是有个地方要注意，如果脚本中用redis.call函数时出错了，会导致执行中断，此时，Lua脚本是不会回滚的。","user_name":"作者回复","comment_id":276749,"uid":"1609687","ip_address":"","utype":1,"ctime":1612141287,"user_name_real":"蒋德钧"}],"discussion_count":4,"race_medal":0,"score":"100396347669","product_id":100056701,"comment_content":"老师，你好，问个问题，基于redis的单线程原理lua脚本到底可不可以保证原子性？","like_count":23,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514810,"discussion_content":"Redis会用单线程方式执行Lua脚本，保证脚本执行过程中不被其他命令打断，一般我们称之为以原子性的方式执行。但是有个地方要注意，如果脚本中用redis.call函数时出错了，会导致执行中断，此时，Lua脚本是不会回滚的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612141287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1346215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","nickname":"William","note":"","ucode":"55F5D9DEE485B1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347889,"discussion_content":"也就是无法保证原子性，只能保证一起不被打断。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612354431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1506574,"avatar":"","nickname":"Geek_1e8830","note":"","ucode":"CD84A5AAAE6872","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347048,"discussion_content":"好的，明白了，谢谢！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612143992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1281857,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8f/41/307555ff.jpg","nickname":"伊诺","note":"","ucode":"709E038DD01C17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573581,"discussion_content":"出错，执行中断，就不会回滚。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653527240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253335,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1602687049,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"91797000265","product_id":100056701,"comment_content":"1，作者讲了什么？<br>根据时间序列数据的特点，选择合适的存储方案<br><br>2，作者是怎么把这事给讲明白的？<br>结合具体场景，探讨解决方案<br>    1，介绍需求背景，用户行为，设备监控数据分析<br>    2，介绍数据特点，时间线连续，没有逻辑关系，数据量大<br>    3，介绍操作场景，插入多且快，常单点查询，分组统计聚合<br> <br>3，作者为了把这事给讲清楚，讲了那些要点？有哪些亮点？<br>1，亮点1：先讲清楚需求背景，从实际问题出发，推演出存储时间序列数据适合使用sort set 和hash解决点查询和范围查询的需求<br>2，要点1：同时写入sort set和hash 两种数据类型的存储，需要使用原子操作，可以借助MULTI和 EXEC命令<br>3，要点2：大数据量的聚合统计，会非常消耗网络带宽，所以可以使用RedisTimeSeries模块处理<br><br>4，对于作者所讲，我有哪些发散性思考？<br><br>5，在未来的那些场景中，我能够使用它？<br><br>6，留言区的收获","like_count":21},{"had_liked":false,"id":246618,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1599440041,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"87498785961","product_id":100056701,"comment_content":"redis的事务不是完整的事务，当有一个命令失败时还是会继续往下执行，这是个问题。时序数据还是交给时序数据库来保存比较专业","like_count":20,"discussions":[{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577087,"discussion_content":"你为啥还叫事务?    感觉跟mysql的事务不太一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655910086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1465412,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5c/44/d07c0865.jpg","nickname":"Geek_d960af","note":"","ucode":"C59AEF44BD8691","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305357,"discussion_content":"是的  可能第一个操作写入hash失败  第二个操作写入zset成功  也会不一致","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599889178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304206,"discussion_content":"时序数据库是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599497736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1065849,"avatar":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","nickname":"test","note":"","ucode":"9A4973E591DD12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":304230,"discussion_content":"主要用于处理时间序列相关的数据库，比如influxDB","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599526022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304206,"ip_address":""},"score":304230,"extra":""}]}]},{"had_liked":false,"id":249134,"user_name":"Mr.蜜","can_delete":false,"product_type":"c1","uid":1035257,"ip_address":"","ucode":"C911B81198B3F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","comment_is_top":false,"comment_ctime":1600445594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57435020442","product_id":100056701,"comment_content":"Sorted Set还是基于Set集合的，所以如果member值相同，那么ZADD只会更新score，存在数据丢失的风险。我有个问题：既然每三分钟聚合一次计算，为何不直接按时间统计值呢？比方说hincrby，把指定一段时间的温度聚合在一起，可以用lua脚本，实现此类计算，这样既实现了原子性，又不会特别消耗内存，还能实现数据统计。","like_count":13},{"had_liked":false,"id":256885,"user_name":"Eric.Lee","can_delete":false,"product_type":"c1","uid":1185576,"ip_address":"","ucode":"F929DF544ECC85","user_header":"https://static001.geekbang.org/account/avatar/00/12/17/28/6002bfd7.jpg","comment_is_top":false,"comment_ctime":1603775755,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"44553448715","product_id":100056701,"comment_content":"有个问题：市面上有成熟的时间序列数据库如：influxdb、Prometheus等。这一讲，我理解是介绍了Redis支持通过加载模块的形式也能支持这种数据类型的存储。单从时间序列管理、功能方面上个人感觉不如专业数据库成熟？还是作者做过这些数据库的比较专门选用的Redis做数据存储？","like_count":10,"discussions":[{"author":{"id":1946227,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJF1c2h1dCWAkdvs049lb3y7vzIicvv2kZOZwEFpUyhxmmehdpVicWGBaSsGv2TPkuastTW0MgxoLxg/132","nickname":"吕宁博","note":"","ucode":"A37F7351629EC4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383963,"discussion_content":"我们在做项目的时候，是否选择引入一个新组件的前提，不仅是要它“专不专业”，还要考虑它“好不好维护、是否增加学习成本”等。举个例子：\n如果一个项目只用MySQL就能满足当前所有的需求、且产研团队对MySQL都比较熟悉，这个时候团队会考虑引入Redis来解决类似热点数据的读写问题吗？虽然在这方面Redis是“专业”的，但性能足够、读写方便、团队熟悉、维护简单，更关键的是：一旦MySQL出了问题，团队是有能力快速恢复上线的。\n同样的，老师在这篇文章讲解的RedisTimeSeries数据类型，也是建立在“性能足够、读写方便、团队熟悉、维护简单”之上的。试想一下，如果引入InfluxDB，虽然上线使用一时爽，宕机夯住。。。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1626319557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1617615,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ae/cf/6186d936.jpg","nickname":"Geek_f71330","note":"","ucode":"40F8CD661E8F59","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1946227,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJF1c2h1dCWAkdvs049lb3y7vzIicvv2kZOZwEFpUyhxmmehdpVicWGBaSsGv2TPkuastTW0MgxoLxg/132","nickname":"吕宁博","note":"","ucode":"A37F7351629EC4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388903,"discussion_content":"大哥你有点答非所问了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629034326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":383963,"ip_address":""},"score":388903,"extra":""},{"author":{"id":2774803,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/57/13/adbbdc46.jpg","nickname":"昼赏乌云夜观星","note":"","ucode":"5B1F910F30E776","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1617615,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ae/cf/6186d936.jpg","nickname":"Geek_f71330","note":"","ucode":"40F8CD661E8F59","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569596,"discussion_content":"😓","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651493260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388903,"ip_address":""},"score":569596,"extra":""}]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376226,"discussion_content":"老师是想通过场景讲解数据类型使用 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622028389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249742,"user_name":"dfuru","can_delete":false,"product_type":"c1","uid":2110772,"ip_address":"","ucode":"0222FADA093D95","user_header":"","comment_is_top":false,"comment_ctime":1600776499,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"44550449459","product_id":100056701,"comment_content":"hash和sorted set类型的key不能相同，文件是相同的。<br>127.0.0.1:6379&gt; MULTI<br>OK<br>127.0.0.1:6379&gt; ZADD dev:temp4 2020092201 26.8<br>QUEUED<br>127.0.0.1:6379&gt; HSET dev:temp4 2020092201 26.8<br>QUEUED<br>127.0.0.1:6379&gt; EXEC<br>1) (integer) 1<br>2) (error) WRONGTYPE Operation against a key holding the wrong kind of value<br>127.0.0.1:6379&gt; MULTI<br>OK<br>127.0.0.1:6379&gt; HSET dev:temp5 2020092201 26.8<br>QUEUED<br>127.0.0.1:6379&gt; ZADD dev:temp6 2020092201 26.8<br>QUEUED<br>127.0.0.1:6379&gt; EXEC<br>1) (integer) 1<br>2) (integer) 1<br>","like_count":10,"discussions":[{"author":{"id":1884510,"avatar":"","nickname":"代安娜","note":"","ucode":"C219A1A3BC7AD8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341025,"discussion_content":"赞同，并且在exec执行过程中，事务某个操作失败不会影响后续该事务中的后续操作，不支持回滚","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610265799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2784588,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqyYGic0yGDmqY1wo6a60rfCW4Qs77nicPd6Tbn4L9E01BuJ8So7icbYrg1nc482jxO0UT3iaUKicqWhfA/132","nickname":"Geek_20f52d","note":"","ucode":"55A7102B9B7AC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406991,"discussion_content":"那怎么解决呢  用LUA脚本？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634884990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2459923,"avatar":"https://static001.geekbang.org/account/avatar/00/25/89/13/0d3c5008.jpg","nickname":"最好不过","note":"","ucode":"C7DBCD08402DF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381061,"discussion_content":"我说呢，一直报这个错误，害的我还把Redis重装了下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624883693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2294200,"avatar":"https://static001.geekbang.org/account/avatar/00/23/01/b8/9d843686.jpg","nickname":"无绪","note":"","ucode":"53C8FDFE275AA1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356019,"discussion_content":"MULTI EXEC在这种情况下，就没有保证操作原子性的作用了嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615518480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609289,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8e/49/10ef002d.jpg","nickname":"周翔在山麓（Xiang Zhou）","note":"","ucode":"E126273356E5B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340193,"discussion_content":"作者文稿里确实有这个错误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609925040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294635,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1622028352,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31686799424","product_id":100056701,"comment_content":"虽然有点泼冷水 但实际上点击流数据 通常是用kafka 作为日志来中转的。这里面涉及几个问题：<br>1。数据的维度并不总是固定的。比方说今天要聚合统计 明天可能要最值或基数统计。那这时候用redis存储显然不是第一选择。<br>2. 数据清洗问题。不是所有的数据都是我们期望的 但我们不能要求埋点方来做数据清洗 我们只能要求埋点方尽可能多的上报 才能保证数据是正确的 偏差值 最小。<br>3. 数据量存储问题。比方说亿级流量 每秒点击流是1W qps ，以一个上送数据1KB估算：那么一天数据量有1KB * 10000 * 3600 * 24 = 864GB 实际上无论是用切片 还是集群都存不下","like_count":7,"discussions":[{"author":{"id":1194858,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3b/6a/80d9c545.jpg","nickname":"RD","note":"","ucode":"E3947B6E1681AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589383,"discussion_content":"确实是这样，正常大型项目每个细分项都有专门中间件去做，比如kafka + ES。但我觉得 Redis 提供这些功能有一个好处，那就是小项目或项目刚启动需要快速交付的时候，没必要一上来就整一堆中间件，上一堆服务器。等流量起来了，可以不断地去优化，替换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664787967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257198,"user_name":"Reborn 2.0","can_delete":false,"product_type":"c1","uid":1977474,"ip_address":"","ucode":"BA506E7455D91C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","comment_is_top":false,"comment_ctime":1603878695,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"27373682471","product_id":100056701,"comment_content":"我想问, 使用sorted set存储, zset不是本身就维护了一个dict么? 为什么还要用hash再存一遍呢?","like_count":6,"discussions":[{"author":{"id":2170148,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKn2fx2UTaWgMl3fSOSicJEDOibbtYicHUVSG8JsA8j6Njibc9j3YVSvHtMZb2Z20l4NmjibiaSv8m7hz9w/132","nickname":"Geek_de83f6","note":"","ucode":"3EFB4DC01C222D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368222,"discussion_content":"我大概明白了，这是因为在有序集合中，跳表中是以日期为分值，以temperature为存储对象的。而字典会默认以temperature为键，以日期为值。这样子看，正好颠倒了，没有办法实现dict的o(1)的查找时间复杂度。只能说redis的数据类型不是万能的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618624898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2414713,"avatar":"","nickname":"Geek_096af2","note":"","ucode":"3000AAA5873DAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342531,"discussion_content":"我也想问这个问题 😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610705079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2414713,"avatar":"","nickname":"Geek_096af2","note":"","ucode":"3000AAA5873DAF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347831,"discussion_content":"因为两个底层的数据结构不一样，sorted set 底层是使用的跳表，查找单个元素的时间复杂度为 O(longN)，而 hash 使用的是 哈希表 查找单个元素的时间复杂度为 O(1)，所以 使用 hash 在存一遍，主要是为了单个查询快","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1612335726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":342531,"ip_address":""},"score":347831,"extra":""},{"author":{"id":2485961,"avatar":"https://static001.geekbang.org/account/avatar/00/25/ee/c9/8601412f.jpg","nickname":"Aric","note":"","ucode":"E55B55125C1EDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394933,"discussion_content":"前几节课，老师不是说hash在数据量低的时候是压缩列表吗？那这个时候查找就不是O(1)了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632133132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":347831,"ip_address":""},"score":394933,"extra":""}]}]},{"had_liked":false,"id":274971,"user_name":"少年","can_delete":false,"product_type":"c1","uid":1009178,"ip_address":"","ucode":"2B6BCC526A5F2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/1a/9e9f7d58.jpg","comment_is_top":false,"comment_ctime":1611238722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23086075202","product_id":100056701,"comment_content":"TS.ADD device:temperature:1 1596416700 25.1<br>key指定device id做demo感觉会更清晰些","like_count":5},{"had_liked":false,"id":251071,"user_name":"","can_delete":false,"product_type":"c1","uid":2180805,"ip_address":"","ucode":"","user_header":"","comment_is_top":false,"comment_ctime":1601355825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23076192305","product_id":100056701,"comment_content":"老师，看redis设计与实现这本书中讲的，有序集合编码类型为zset时，同时使用了跳跃表和字典来实现。执行zadd命令，会先调用zsinsert函数将新元素添加到跳跃表，然后调用dictAdd函数，将新元素关联到字典。这样让有序集合的查找和范围操作都尽可能地快。不需要使用方同时去调用hset+zadd","like_count":5},{"had_liked":false,"id":296193,"user_name":"木几丶","can_delete":false,"product_type":"c1","uid":2420294,"ip_address":"","ucode":"FFDB958DA64F8C","user_header":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","comment_is_top":false,"comment_ctime":1622798505,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"18802667689","product_id":100056701,"comment_content":"实际上multi只是redis提供的一个简易的事务操作，如果入队列时就能检测出命令错误的情况，事务会被回滚，而对于在执行时才能检测出错误的情况（如评论中提到的类型错误），前后命令正常执行，事务将不会被回滚，这点跟数据库很不一样 需要特别注意","like_count":4},{"had_liked":false,"id":276490,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1611972224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18791841408","product_id":100056701,"comment_content":"以前是做物联网的，看完之后有几点思考：<br>1. 为什么查询指定时间的数据不直接用sorted set的查询操作，虽然是log(N）的时间，比o(1)要慢很多，但这种场景毕竟占比很小。而一般专业时序数据库也确实是这么做的。<br>2. 时序数据库一个常见场景跨时间线的聚合运算，第一个方案的例子都是在解决单条时间线的问题，场景非常单一。在这点上RedisTimeSeries是否可以实现？是否能更好的利用多核并行？<br>3. 比起原子性问题，我觉得redis丢数据的问题更严重。","like_count":4},{"had_liked":false,"id":339694,"user_name":"张潇赟","can_delete":false,"product_type":"c1","uid":1132192,"ip_address":"","ucode":"1A45B57F9E0723","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/a0/aa6d4ecd.jpg","comment_is_top":false,"comment_ctime":1648295899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14533197787","product_id":100056701,"comment_content":"这一节中老师的例子有点没说明白：<br>1.hash 和sorted set 不能用同样的key<br>2.mutli exec 并不能保证全部成功，redis对事物的支持只是保证两条命令全部被执行，不保证执行成功。如果有保存hash成功了，保存sorted set失败。redis会维持现状，不会对hash回滚","like_count":3},{"had_liked":false,"id":281619,"user_name":"蓝萧","can_delete":false,"product_type":"c1","uid":1227606,"ip_address":"","ucode":"DE125B56BF7818","user_header":"https://static001.geekbang.org/account/avatar/00/12/bb/56/a506a165.jpg","comment_is_top":false,"comment_ctime":1614829924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14499731812","product_id":100056701,"comment_content":"个人认为 redis中的stream类型也可以用于保存时间类型数据，stream XADD会自动保存时间戳参数，使用XRANGE也可以添加时间戳用于范围查询，只是无法像timeseries一样做聚合计算，个人认为做聚合计算这种大量消耗CPU的操作，不适合直接放在redis中进行，更适合放在单独的客户端，加上云服务本身默认不支持time series而默认支持stream.综上所述，如果使用redis存储时间类型数据，建议使用stream","like_count":3},{"had_liked":false,"id":255278,"user_name":"iamjohnnyzhuang","can_delete":false,"product_type":"c1","uid":1015327,"ip_address":"","ucode":"E694C1828907F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/1f/b1d458a9.jpg","comment_is_top":false,"comment_ctime":1603293198,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14488195086","product_id":100056701,"comment_content":"课后题：使用 sorted set 时间戳作为score，温度作为 member 的问题应该主要还是 温度大概率会出现相同的，这个时候 zadd 后会覆盖掉原有的数据，个人觉得的一个解决方法就是value使用时间戳_温度 这样存储。<br><br>关于 sorted set + hash 存储时许的方案有个点想的不是很懂，希望有同学或者老师帮忙下：之前看过 zset 的实现，实际上也是 hash + skiplist 实现，skiplist 负责遍历，hash 负责和本文说的一样 依据 score 找到对应的 member（zscore 命令）。 所以感觉多弄了一个hash来存储是不是多此一举呢？<br><br>","like_count":3,"discussions":[{"author":{"id":1015327,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/1f/b1d458a9.jpg","nickname":"iamjohnnyzhuang","note":"","ucode":"E694C1828907F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315813,"discussion_content":"哦 好像记错了， redis zset 中的hash 是存储 member 找到 score 的； 所以为了方便还是引入 hash 存储 score 到member","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1603329129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1526471,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/c7/0cff4a59.jpg","nickname":"木木夕","note":"","ucode":"EA5D709D0DE50E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358620,"discussion_content":"跳表是log(n)  hash 是0（1）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616004041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247244,"user_name":"夏虫井蛙","can_delete":false,"product_type":"c1","uid":1370226,"ip_address":"","ucode":"66609D88E395A0","user_header":"https://static001.geekbang.org/account/avatar/00/14/e8/72/e44c69ef.jpg","comment_is_top":false,"comment_ctime":1599639953,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10189574545","product_id":100056701,"comment_content":"现在很多服务都上云了，用的redis也是供应商提供的服务，一般不自己搭建。RedisTimeSeries以及上一讲的自定义数据类型需要编译加载，一般云供应商不提供这些吧？这时候是不是只能用基础数据类型，没办法用RedisTimeSeries以及自定义数据类型了？","like_count":2,"discussions":[{"author":{"id":1157674,"avatar":"https://static001.geekbang.org/account/avatar/00/11/aa/2a/ce7c487d.jpg","nickname":"Terence孫","note":"","ucode":"8C3A89C18A2182","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311676,"discussion_content":"一般这种利用redis做时序的，基本上是做监控，公司内部可以搭vm来自己部署；如果是做类似金融，分布式那种的时序，还是用专用的时序数据库吧，redis不是特别好的选择","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1602461191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247014,"user_name":"Geek_LV","can_delete":false,"product_type":"c1","uid":1370132,"ip_address":"","ucode":"612BF99F9843F2","user_header":"","comment_is_top":false,"comment_ctime":1599557412,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"10189492004","product_id":100056701,"comment_content":"127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; HSET device:temperature 202008030911 26.8<br>QUEUED<br>127.0.0.1:6379&gt; ZADD device:temperature 202008030911 26.8<br>QUEUED<br>127.0.0.1:6379&gt; exec<br>1) (integer) 1<br>2) (error) WRONGTYPE Operation against a key holding the wrong kind of value","like_count":2,"discussions":[{"author":{"id":1747184,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","nickname":"第四单元","note":"","ucode":"3ED9D553E1DE17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370163,"discussion_content":"hash和sorted要用两个不同名字哦。第一条命令执行完device:temperature就是一个hash了，再使用zadd对它添加元素自然就不对了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619315837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2253496,"avatar":"","nickname":"Geek_3d87cb","note":"","ucode":"F09334D60C3BC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337550,"discussion_content":"key不能重复吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608971521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246946,"user_name":"Sue","can_delete":false,"product_type":"c1","uid":1270084,"ip_address":"","ucode":"C29A998C3126BA","user_header":"https://static001.geekbang.org/account/avatar/00/13/61/44/10d7ce5a.jpg","comment_is_top":false,"comment_ctime":1599536918,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10189471510","product_id":100056701,"comment_content":"老师，为什么那个存温度的value🀄️也有key？难道这个value类型是hash类型吗","like_count":2,"discussions":[{"author":{"id":1436839,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ec/a7/7d44c655.jpg","nickname":"snailshen","note":"","ucode":"C4875C476649B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307987,"discussion_content":"并发zadd时，值会覆盖，另外针对这种情况可以考虑一个设备一个key，在采集时保证一个设备一个采集线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600822699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246693,"user_name":"咸鱼","can_delete":false,"product_type":"c1","uid":1179028,"ip_address":"","ucode":"5E79636DE48155","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","comment_is_top":false,"comment_ctime":1599455024,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"10189389616","product_id":100056701,"comment_content":"使用sorted set时间戳作为score，可能会出现时间戳相同导致被覆盖的可能吧","like_count":2,"discussions":[{"author":{"id":1258845,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erAwcfNMMg2rW4ROTF5icIic4h1OibuicZdxdibQLyXcrwALzmdKNaAGiapQWibXND8x5EIYngtRqHbfE5xQ/132","nickname":"chimission","note":"","ucode":"B29276DDA9CEF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304799,"discussion_content":"是member相同导致覆盖吧，member相当于key，score相当于value","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1599664204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2351949,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e3/4d/8a26dbb2.jpg","nickname":"枫中浪子","note":"","ucode":"860BEA32059B37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353315,"discussion_content":"sorted set 是score可以相同，但成员是唯一的，如果不同的时间点两个温度一样，后面的时间就会覆盖前面的时间","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615125242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1747184,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","nickname":"第四单元","note":"","ucode":"3ED9D553E1DE17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370164,"discussion_content":"时间戳重复了说明是同一个时间呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619315943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1619871,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b7/9f/35038a96.jpg","nickname":"我是真的腰疼","note":"","ucode":"2A0F7B330A07B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310117,"discussion_content":"Score相同不会覆盖，会以key的字典序排列","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601625571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304205,"discussion_content":"既然都用了时间戳了，自然最小时间粒度就是秒了，我觉得应该不需要考虑到毫秒级别的变化，当然你的说法是正确得，一楼大佬我觉得就说的挺好的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599497698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339692,"user_name":"张潇赟","can_delete":false,"product_type":"c1","uid":1132192,"ip_address":"","ucode":"1A45B57F9E0723","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/a0/aa6d4ecd.jpg","comment_is_top":false,"comment_ctime":1648295211,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5943262507","product_id":100056701,"comment_content":"老师这一节举的例子，hash 和 sorted set用的是同一个key啊。感觉有明显的漏洞！！！","like_count":1},{"had_liked":false,"id":307049,"user_name":"宙斯","can_delete":false,"product_type":"c1","uid":2041396,"ip_address":"","ucode":"80DF36BAD298AD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","comment_is_top":false,"comment_ctime":1628840090,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5923807386","product_id":100056701,"comment_content":"问题： 使用Sorted Set保存时序数据，把时间戳作为score，把实际的数据作为member，有什么潜在的风险？<br>回答：存在相同的member值时会覆盖以前的member值（尽管score不同）<br>问题：如果你是Redis的开发维护者，你会把聚合计算也设计为Sorted Set的内在功能吗？<br>回答：不会。聚合计算比较消耗CPU，对于单线程redis来说这不是它的强项。<br>","like_count":1},{"had_liked":false,"id":285107,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1616628409,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"5911595705","product_id":100056701,"comment_content":"记录用户的行为以及物联网设备实时状态，这两种用法都把 Redis 当做“数据库”来用，似乎有悖于 Redis 的初衷。<br><br>时间序列数据要求“写”的时候插入快，“读”的时候查询模式多，似乎对于读的快并没有太高的要求，我怎么觉得 Elastic 似乎也挺合适。<br><br>读完专栏，感觉上似乎针对查询需求，点查询使用 Hash，范围查询使用 Sorted Set，聚合计算使用 RedisTimeSeries。<br><br>如果想要保证插入事务的原子性，那么使用 MUTLI 和 EXEC 关键字。<br><br>专栏里面没说，如何编译 RedisTimeSeries，在哪里加载 loadmodule，暂时只能是不明觉厉了。<br><br>```<br>git clone --recursive https:&#47;&#47;github.com&#47;RedisTimeSeries&#47;RedisTimeSeries.git<br>cd RedisTimeSeries<br>make setup<br>...<br>$ redis-server --loadmodule &#47;path&#47;to&#47;module&#47;redistimeseries.so<br>loadmodule bin&#47;redistimeseries.so<br>```<br><br>课后题，使用 Sorted Set 保存时间序列数据，时间戳作为 score，实际数据作为 member，潜在的风险可能是时间戳作为 score 有点太长了，或者说太大了，并不方便比较，而且在存储上有些浪费。<br><br>看了课代表 @Kaito 的回答，发现我忽略了潜在的 bigkey 风险。另外，可能更大的风险来自于留言中多位同学指出的，当温度作为 member 相同的时候，zadd 会覆盖掉原有的 score，也就是 时间戳，然后就没法查询了。<br><br>如果我是 Redis 的开发维护者，不会把 聚合计算 作为 Sorted Set 的内在功能，因为 Redis 本来就不是用作聚合计算或者说是统计的，Redis 的初心应该是“缓存”，或者说是提供高性能的数据读取。<br><br>同样来自课代表，聚合计算是 CPU 密集型任务，而 Redis 是单线程的……<br><br>在 @Eric.Lee 的留言里面看到时间序列数据库：influxdb 和 Prometheus，后者不是一个监控框架么？<br><br>还有同学问到了如何在云 Redis 上加载 RedisTimeSeries 的问题，同问。","like_count":1},{"had_liked":false,"id":360627,"user_name":"Geek_da6c20","can_delete":false,"product_type":"c1","uid":3073610,"ip_address":"北京","ucode":"4A2D006DCA946D","user_header":"","comment_is_top":false,"comment_ctime":1666697781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666697781","product_id":100056701,"comment_content":"那为什么RedisTimeSeries没有bigKey问题？","like_count":0},{"had_liked":false,"id":360206,"user_name":"Geek_77e08c","can_delete":false,"product_type":"c1","uid":1305867,"ip_address":"四川","ucode":"7BDE3CDA89D1A1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pQdajPbRenO4DiaFvXST2NUKfhtKiaNobk6eVEwvcbs1ZuyJZolZn3mST15JpsKl1Zt3wR78AVJdLMp8mGQulN4g/132","comment_is_top":false,"comment_ctime":1666275328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666275328","product_id":100056701,"comment_content":"说实话，这个例子有点鸡肋了。用redis来保存时间序列数据，估计就是玩玩用。为什么了？第一时间序列数据一般都比较大，第二 时间序列数据，一般都有数据聚合和统计的需求，而利用redis来进行数据的聚合和统计，在数据量较大时必定会占用redis较多的cpu资源，从而导致了其它业务命令的执行和阻塞","like_count":0},{"had_liked":false,"id":359555,"user_name":"Geek_590385","can_delete":false,"product_type":"c1","uid":3190922,"ip_address":"江西","ucode":"BE5BDD9180FA0E","user_header":"","comment_is_top":false,"comment_ctime":1665643507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665643507","product_id":100056701,"comment_content":"讲师牛逼，写的太好了","like_count":0},{"had_liked":false,"id":346651,"user_name":"浪沙淘淘","can_delete":false,"product_type":"c1","uid":1370631,"ip_address":"","ucode":"877D5FD30E89A3","user_header":"https://static001.geekbang.org/account/avatar/00/14/ea/07/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1653315577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653315577","product_id":100056701,"comment_content":"mark","like_count":0},{"had_liked":false,"id":342006,"user_name":"Geek_0bba55","can_delete":false,"product_type":"c1","uid":2088137,"ip_address":"","ucode":"3B647E1EB3C707","user_header":"","comment_is_top":false,"comment_ctime":1649948473,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649948473","product_id":100056701,"comment_content":"数据量大的情况下，2种方案都有问题，用来玩玩就行。<br>第一个方案：会造成大key，热key，影响系统性能。<br>第二个方案：在redis完成聚合操作，会导致redis阻塞。<br>","like_count":0},{"had_liked":false,"id":330074,"user_name":"Yusan、","can_delete":false,"product_type":"c1","uid":1100167,"ip_address":"","ucode":"108AEA72EA4093","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/87/17053a50.jpg","comment_is_top":false,"comment_ctime":1641787106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641787106","product_id":100056701,"comment_content":"实际值作为member最大的风险就是 member 重复被覆盖，导致会丢失数据，在本案例不适合这么用","like_count":0},{"had_liked":false,"id":315793,"user_name":"levi","can_delete":false,"product_type":"c1","uid":1501281,"ip_address":"","ucode":"41AFA57F56C15E","user_header":"https://static001.geekbang.org/account/avatar/00/16/e8/61/47293afd.jpg","comment_is_top":false,"comment_ctime":1634002853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634002853","product_id":100056701,"comment_content":"我觉得时间序列的计算存储这块，有更多更好的方式去做。<br>比如专门的时间序列数据库influxDB，做存储，回放，各种粒度的聚合都非常合适。<br>再比如用flink做基于3分钟窗口的计算，简直是flink天然的场景。<br>但是老师在这边讲的内容，对我来说最大的好处在于，提供了多种不同方式去解决同一个问题，同时能够让你从底层去思考解决问题的方式。比如说flink基于状态存储去做聚合，如果状态过大不适合，是否可以改为redis去存储，如果基于redis存储又该如何去做。<br>另外，聚合的本质是什么？为什么说用hash和sortedSet会占用空间存不下，如果题目是不考虑窗口是不是可以将简单聚合存储为sum和count值到redis中从而降低空间占用；而如果是按照题目考虑窗口，又是否可以将窗口聚合切分为一个一个粒度合适的unit，本质上是先做一次小聚合，再根据需要用到的数据做一次大聚合。<br>总之，老师讲得蛮好，从某个场景带我见识了redis的能力和用法。","like_count":0},{"had_liked":false,"id":314404,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1632998183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632998183","product_id":100056701,"comment_content":"对于时间序列数据的处理，要先分析时间序列数据特性和处理方式的特点：<br>  1、时间序列数据数据量大，涉及到大量的写入操作。要求写入要快速，最好是写入操作时间复杂度为O(1)。<br>  2、时间序列数据查询模式多。要支持单点查询，范围查询，聚合计算。<br><br>使用Hash和Sorted Set 可以支持快速写入、单点查询、范围查询，但是不支持聚合计算。所以redis使用了扩展数据类型 RedisTimeSeries 专门处理时间序列数据。","like_count":0},{"had_liked":false,"id":314103,"user_name":"我是一只小小鸟","can_delete":false,"product_type":"c1","uid":1339366,"ip_address":"","ucode":"13348E2AC10F06","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/e6/357e80e9.jpg","comment_is_top":false,"comment_ctime":1632837981,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1632837981","product_id":100056701,"comment_content":"老师，您好！请问如果要存记录行，30字段，每字段10字节，每秒写入20万+，行情时序数据，可以选择redis的sorted set吗？分片集群","like_count":0},{"had_liked":false,"id":305889,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1628219110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628219110","product_id":100056701,"comment_content":"首先说,对于时序性数据,一定要选择专业的时序性数据库,包含InfluxDB Opentsdb,哪怕使用ES也行,<br>然后上面的问题,如果使用Sorted Set作为数据结构保存时序性数据,会出现大量写入从而引起的big key问题,<br>而且聚合运算的受众面太小,并不适合直接作为一个内在功能","like_count":0},{"had_liked":false,"id":298667,"user_name":"Geek_cc0645","can_delete":false,"product_type":"c1","uid":1971407,"ip_address":"","ucode":"13B59F82095602","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/UWDBUEsDLIKpeIujPLsrRG9l0cFhWlXB9CcaOpNKrOdhDAia6PialmJZ4MQgYtBpDdu58leIDDlsOxaZsRvknZZA/132","comment_is_top":false,"comment_ctime":1624255094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624255094","product_id":100056701,"comment_content":"第一种方案中，自己有两个问题：1.如果是多台设备应该怎么存储这些数据，是一个集合，一个时间戳，里面存储的所有设备的温度还是多个集合，每个集合表示一个设备 2.如何查询某时间区间内所有设备的数据。希望有想法的同学可以给答疑一下。","like_count":0},{"had_liked":false,"id":295962,"user_name":"Geek_6b3a92","can_delete":false,"product_type":"c1","uid":2647451,"ip_address":"","ucode":"B5A0A44746F514","user_header":"","comment_is_top":false,"comment_ctime":1622683965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622683965","product_id":100056701,"comment_content":"hash 和 sorted set 独自拥有一份数据，这在处理大量数据时，我觉得也不可取哦。","like_count":0},{"had_liked":false,"id":292588,"user_name":"灵石（请勿乱吃）","can_delete":false,"product_type":"c1","uid":2345422,"ip_address":"","ucode":"81467807211055","user_header":"https://static001.geekbang.org/account/avatar/00/23/c9/ce/6d059da3.jpg","comment_is_top":false,"comment_ctime":1620886708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620886708","product_id":100056701,"comment_content":"MULTI<br><br>HSET device:temperature 202008030911 26.8<br><br>ZADD device:temperature 202008030911 26.8<br><br>EXEC<br><br>后面的set插入失败并不会影响到hash插入成功。<br>这个不能实现原子性。","like_count":0},{"had_liked":false,"id":289999,"user_name":"第四单元","can_delete":false,"product_type":"c1","uid":1747184,"ip_address":"","ucode":"3ED9D553E1DE17","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","comment_is_top":false,"comment_ctime":1619315307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619315307","product_id":100056701,"comment_content":"我看大家提到Hash+Sorted Set方案中如果在Sorted Set中先后添加了相同的数据信息会存在数据覆盖的问题。这个问题是不是可以通过差异化每次的数据内容解决。比如数据中包含“时间戳+温度”信息。大家觉得怎么样？","like_count":0},{"had_liked":false,"id":286839,"user_name":"xiaobinggg","can_delete":false,"product_type":"c1","uid":1025022,"ip_address":"","ucode":"89BCF0513B0200","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/fe/3eef3648.jpg","comment_is_top":false,"comment_ctime":1617628633,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1617628633","product_id":100056701,"comment_content":"第一种方案中的key和value都没有设备ID，该如何区分不同的设备呢，例如查询某个设备在指定时间点的温度？或者统计一定时间段内温度曾经超过给定值的所有设备？","like_count":0,"discussions":[{"author":{"id":2924187,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/SluScDGqnhBNwmOQ774QEzuXiazk8Ab7ng8xCT81gunl9Hls9oibwB4AibCDxDtZwTe4mEib5QiaLXUqMv8iceXicXSYg/132","nickname":"Geek_080ce7","note":"","ucode":"C74D97C84983B9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556477,"discussion_content":"这样就太扯了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647397764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1747184,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","nickname":"第四单元","note":"","ucode":"3ED9D553E1DE17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370165,"discussion_content":"应该是每个设备对应一个hash和一个sorted set吧，名称不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619316027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285764,"user_name":"Geek_926921","can_delete":false,"product_type":"c1","uid":2532285,"ip_address":"","ucode":"51C3B0178D77E1","user_header":"","comment_is_top":false,"comment_ctime":1617005947,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1617005947","product_id":100056701,"comment_content":"老师你好，当我执行文档中的指令时候会出现&quot;WRONGTYPE Operation against a key holding the wrong kind of value&quot;,请问我需要对redis额外进行设置吗，<br>操作文档中对应的指令:<br><br>127.0.0.1:6379&gt; MULTI<br>OK<br><br>127.0.0.1:6379&gt; HSET device:temperature 202008030911 26.8<br>QUEUED<br><br>127.0.0.1:6379&gt; ZADD device:temperature 202008030911 26.8<br>QUEUED<br><br>127.0.0.1:6379&gt; EXEC<br>1) (integer) 1<br>2) (integer) 1","like_count":0,"discussions":[{"author":{"id":1747184,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a8/f0/529f15e9.jpg","nickname":"第四单元","note":"","ucode":"3ED9D553E1DE17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370168,"discussion_content":"老师文稿里应该写错了，HSET和ZADD操作的应该是两个不同的key才对。你可以把zadd那条命令里的device:temperature改个名字，比如device:temperature2就可以了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619316355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283074,"user_name":"无绪","can_delete":false,"product_type":"c1","uid":2294200,"ip_address":"","ucode":"53C8FDFE275AA1","user_header":"https://static001.geekbang.org/account/avatar/00/23/01/b8/9d843686.jpg","comment_is_top":false,"comment_ctime":1615539277,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1615539277","product_id":100056701,"comment_content":"RedisTimeSeries不知道怎么装啊","like_count":0,"discussions":[{"author":{"id":1102245,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/a5/2bbedc3b.jpg","nickname":"over","note":"","ucode":"FE272AC19842D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378754,"discussion_content":"\ngit clone --recursive https://github.com/RedisTimeSeries/RedisTimeSeries.git\nredis-server --loadmodule /path/to/module/redistimeseries.so\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623389908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277271,"user_name":"小可","can_delete":false,"product_type":"c1","uid":1006735,"ip_address":"","ucode":"8834AF621FA67D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/8f/551b5624.jpg","comment_is_top":false,"comment_ctime":1612340131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612340131","product_id":100056701,"comment_content":"物联网时序数据是什么场景选用RedisTimeSeries，什么场景选用influxdb之类专业时序库？RedisTimeSeries现在有性能指标吗？","like_count":0},{"had_liked":false,"id":275885,"user_name":"单朋荣","can_delete":false,"product_type":"c1","uid":1272662,"ip_address":"","ucode":"8AD121BEDD9675","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/56/37a4cea7.jpg","comment_is_top":false,"comment_ctime":1611712346,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611712346","product_id":100056701,"comment_content":"我很好奇RedisTimeSeries是如何在计算层面做优化的，是单独的线程来做的吗？","like_count":0},{"had_liked":false,"id":275696,"user_name":"huiye","can_delete":false,"product_type":"c1","uid":2225782,"ip_address":"","ucode":"8B57DE0F3C92E6","user_header":"https://static001.geekbang.org/account/avatar/00/21/f6/76/f7666f76.jpg","comment_is_top":false,"comment_ctime":1611648419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611648419","product_id":100056701,"comment_content":"当有4个设备的集合的时候，TS.GET device:temperature  命令获取的是哪台设备最新的记录？","like_count":0},{"had_liked":false,"id":264694,"user_name":"Geek_f5a46e","can_delete":false,"product_type":"c1","uid":2034717,"ip_address":"","ucode":"C6618A64653E5A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ZOjPic948JaOXhbUwZcBqGibPYtu6QA5BuA9qdQHE6xBaGuER5BAfdVGDyeenvhuXAb8069w1fA8p5iblALtmk6hA/132","comment_is_top":false,"comment_ctime":1606579348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606579348","product_id":100056701,"comment_content":"不建议支持聚合，因为聚合操作的引入必然导致两种结果:<br>1.为了提供类似写入和读取一样高性能的获取聚合操作的结果，比如快速的得到sum的结果，就必须将sum值保存在内存。而这必然影响写入的速率。<br>1.为了保证写入速率，聚合操作实时计算，那么聚合需要扫描的数据可能非常大，导致聚合性能很差。<br>而redis是以高性能数据库为目标的。<br>","like_count":0},{"had_liked":false,"id":262604,"user_name":"Anony","can_delete":false,"product_type":"c1","uid":1174733,"ip_address":"","ucode":"4B7D06B8C7BFD3","user_header":"https://static001.geekbang.org/account/avatar/00/11/ec/cd/52753b9e.jpg","comment_is_top":false,"comment_ctime":1605777828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605777828","product_id":100056701,"comment_content":"timeseries 标签过滤时候，device_id!=2，返回ERR TSDB: please provide at least one matcher，<br>但是device_id=2能正常返回结果，怎么回事呢？","like_count":0},{"had_liked":false,"id":261682,"user_name":"取经人","can_delete":false,"product_type":"c1","uid":1107550,"ip_address":"","ucode":"C3668CA65200DF","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/5e/62158841.jpg","comment_is_top":false,"comment_ctime":1605488931,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605488931","product_id":100056701,"comment_content":"这节课真是学到知识了，主要在于ts的应用","like_count":0},{"had_liked":false,"id":261135,"user_name":"Aecho1610213142","can_delete":false,"product_type":"c1","uid":2303205,"ip_address":"","ucode":"84AA9E4C110ABF","user_header":"https://static001.geekbang.org/account/avatar/00/23/24/e5/a83c0ff5.jpg","comment_is_top":false,"comment_ctime":1605226996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605226996","product_id":100056701,"comment_content":"老师你好！<br>1,EXEC未收到命令，会造成redis阻塞吗？<br>2,redis事务之间是如何隔离的？<br>麻烦讲一下原理？","like_count":0},{"had_liked":false,"id":261018,"user_name":"六。","can_delete":false,"product_type":"c1","uid":1780881,"ip_address":"","ucode":"79D5CBCF0EA573","user_header":"https://static001.geekbang.org/account/avatar/00/1b/2c/91/99a6f5ab.jpg","comment_is_top":false,"comment_ctime":1605174133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605174133","product_id":100056701,"comment_content":"做过类似的项目，只是没有按照时间戳单点查询的需求（实际应用中，为什么会有这种需求？？？求老师解答）","like_count":0},{"had_liked":false,"id":258682,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1604538970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604538970","product_id":100056701,"comment_content":"1.不会用实际数据作为member，实际数据可能重复，会产生覆盖。当然这部分可以选择拆分score。类似于数据库按天分表。<br>2.不会设计聚合运算。redis再命令执行上是单线程的，聚合任务属于cpu密集型，会阻塞redis，而且没法利用多核心的计算能力。","like_count":0},{"had_liked":false,"id":258450,"user_name":"石小","can_delete":false,"product_type":"c1","uid":1781893,"ip_address":"","ucode":"4258C686F289A6","user_header":"https://static001.geekbang.org/account/avatar/00/1b/30/85/14c2f16c.jpg","comment_is_top":false,"comment_ctime":1604451223,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1604451223","product_id":100056701,"comment_content":"使用multi和exec时，如果使用redis集群，还能保证原子性吗？","like_count":0,"discussions":[{"author":{"id":1010680,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/f8/b4da7936.jpg","nickname":"大魔王汪汪","note":"","ucode":"4B205CB52FC95F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335065,"discussion_content":"不能","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608084385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255988,"user_name":"next station","can_delete":false,"product_type":"c1","uid":1357937,"ip_address":"","ucode":"ABF39067778FD6","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/71/552e4afb.jpg","comment_is_top":false,"comment_ctime":1603498136,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1603498136","product_id":100056701,"comment_content":"老师，我自己尝试了一下文中的代码，会发生执行报错，<br><br>“(error) WRONGTYPE Operation against a key holding the wrong kind of value”<br><br>请问老师是怎么做到正确执行的？<br><br><br>127.0.0.1:6379&gt; MULTI<br>OK<br><br>127.0.0.1:6379&gt; HSET device:temperature 202008030911 26.8<br>QUEUED<br><br>127.0.0.1:6379&gt; ZADD device:temperature 202008030911 26.8<br>QUEUED<br><br>127.0.0.1:6379&gt; EXEC<br>1) (integer) 1<br>2) (integer) 1","like_count":0,"discussions":[{"author":{"id":2640551,"avatar":"https://static001.geekbang.org/account/avatar/00/28/4a/a7/ab7998b1.jpg","nickname":"zachary","note":"","ucode":"B22B95FCECD6E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378770,"discussion_content":"key值是不能一样的，加前缀区分吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623396909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098480,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c2/f0/6b070aa2.jpg","nickname":"自由使者","note":"","ucode":"46837EC57E68EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334505,"discussion_content":"HSET hash:device:temperature 202008030911 26.8\nZADD sorted_set:device:temperature 202008030911 26.8\n像我上面这样去做，要使用两个不同的key\n文中老师的示例： HSET device:temperature 202008030911 26.8这个命令执行后\n使用 TYPE device:temperature命令返回key(device:temperature)的类型为hash，后面就不能再用这个key做ZADD device:temperature 202008030911 26.8这个操作了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607868984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255119,"user_name":"秦鹏","can_delete":false,"product_type":"c1","uid":1826525,"ip_address":"","ucode":"B2BD9053EB3C4E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKPQTq629hImajV3829KN90FHbECGprYZUEeLeJwysa61MPQTcDSxkibglPo9eG3SUuSBj1UWUqGJQ/132","comment_is_top":false,"comment_ctime":1603268949,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1603268949","product_id":100056701,"comment_content":"作者描述的方案线上真是这么用的吗","like_count":0,"discussions":[{"author":{"id":1010680,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6b/f8/b4da7936.jpg","nickname":"大魔王汪汪","note":"","ucode":"4B205CB52FC95F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335067,"discussion_content":"作者应该是基于场景引出一个知识点，真实场景解决方案肯定会脱离于redis选择更合适的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608084471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254694,"user_name":"倔强小德普","can_delete":false,"product_type":"c1","uid":1180884,"ip_address":"","ucode":"4795B744BDDBDD","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/d4/7173785e.jpg","comment_is_top":false,"comment_ctime":1603170228,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603170228","product_id":100056701,"comment_content":"redis做的tsdb新能咋样..有什么报告吗<br><br>上亿时间线聚合之类查询快吗","like_count":0},{"had_liked":false,"id":248023,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1599984074,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1599984074","product_id":100056701,"comment_content":"如下的操作肯定失败吧，两个不同类型的键，键名相同<br>127.0.0.1:6379&gt; HSET device:temperature 202008030911 26.8<br>127.0.0.1:6379&gt; ZADD device:temperature 202008030911 26.8","like_count":0,"discussions":[{"author":{"id":2266671,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erND96otTr4MA09mOXdFwHaXcicjnAPfmRfbUr2gZ5qFV1KfYBoSQmwibIWG1GgYsYiaWhCL9qe1GCuQ/132","nickname":"jisilu","note":"","ucode":"DF4907D2FF23FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383480,"discussion_content":"是的。他们都在同一个最大的hash 桶内","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626108354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247179,"user_name":"王嘉伟","can_delete":false,"product_type":"c1","uid":1592782,"ip_address":"","ucode":"FA1D9AE9B91F84","user_header":"","comment_is_top":false,"comment_ctime":1599626130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599626130","product_id":100056701,"comment_content":"相同時間戳的數據，本應該是覆蓋更新，但是會存下兩條數據","like_count":0}]}