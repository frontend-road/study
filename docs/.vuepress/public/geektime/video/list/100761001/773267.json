{"id":773267,"title":"10｜索引签名与列表（数组和元组）","content":"","comments":[{"had_liked":false,"id":390587,"user_name":"westfall","can_delete":false,"product_type":"c3","uid":1632773,"ip_address":"中国香港","ucode":"F3F5CB7DF695FC","user_header":"https://static001.geekbang.org/account/avatar/00/18/ea/05/9976b871.jpg","comment_is_top":false,"comment_ctime":1715701621,"is_pvip":false,"replies":[{"id":142074,"content":"呵呵呵，我想了想，也没其它主意。^^.","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1715744292,"ip_address":"江苏","comment_id":390587,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"class MyClass {} 相当于 class MyClass implements MyClass，因为 interface MyClass 的索引签名限制了类 MyClass 的成员只能是 string，所以会失败。好奇问一下，如果想让 foo 可以加上去，只想到这种方法，不知道是否有其他的方法？\n```\ntype Foo = () =&gt; number;\n\ninterface MyClass {\n    [key: string | &#39;1&#39; | &#39;2&#39; | &#39;3&#39;]: string | Foo;\n}\n\nclass MyClass implements MyClass {\n    a: string = &#39;h&#39;;\n    foo() {\n        return 1;\n    }\n}\n```","like_count":2,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645063,"discussion_content":"呵呵呵，我想了想，也没其它主意。^^.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715744292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645534,"discussion_content":"对了，也不算没有办法。可以将签名写到class MyClass {}的声明体内，但实际写法和意义与在外面的接口是一模一样的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1716304028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390784,"user_name":"Jack Q","can_delete":false,"product_type":"c3","uid":1160078,"ip_address":"广东","ucode":"A7DBC311884FFA","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","comment_is_top":false,"comment_ctime":1716278045,"is_pvip":false,"replies":[{"id":142120,"content":"点赞的作业。👍\n\n但是你在前面的答案中用到了“返回值”一词，这个并不正确。在对象类型中存在的，要么是“索引（的）类型”，要么是“值（的）类型”。而不是“返回值类型”，并且也与foo() { return ... }中的返回值没有关系，纯粹是foo作为“索引&#47;键”（字符串类型），它的值类型只能是字符串类型，而不能是函数类型。——你试试修改interface MyClass中的索引签名，想办法让foo()声明能通过（只要能通过声明，你就明白了）。","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1716290687,"ip_address":"江苏","comment_id":390784,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"interface MyClass {\n  [key: string | &#39;1&#39; | &#39;2&#39; | &#39;3&#39; | &#39;4&#39;]:  string;\n}\n&#47;&#47; string | &#39;1&#39; | &#39;2&#39; | &#39;3&#39; | &#39;4&#39; 中的 &#39;1&#39; | &#39;2&#39; | &#39;3&#39; | &#39;4&#39; 并不会改变索引签名的本质, 最终都会 抽象为 string\n&#47;&#47; 所以 interface MyClass 最终其实 等效于 { [key: string]: string }\nclass MyClass {\n  a: string = &#39;1&#39;;\n  &#47;&#47; foo 在 ts 的类型系统 中 会被视作 方法签名\n  &#47;&#47; foo 声明失败是因为\n  &#47;&#47; 方法签名 是不满足 interface MyClass 中的声明的索引签名的要求(该索引签名要求 索引为 string的 属性 返回值一定是 number)\n  foo() {\n    return 1;\n  }\n}\n\nlet obj = new MyClass;\ntype A = Omit&lt;MyClass, never&gt;;\n&#47;&#47;   ^?\n&#47;&#47; interface MyClass 等效于 { [key: string]: string } \n&#47;&#47; 实际上也隐式地允许了使用数字作为索引\n&#47;&#47; 因为 JavaScript 在对象上访问属性时，会将数字索引转换为字符串索引\n&#47;&#47; obj[1] 赋值提示失败 是因为 等号右侧的 Assignment 部分 不满足 索引签名的对返回值的要求\n&#47;&#47; 而不是因为 索引是 1 这个 number 的问题\nobj[1] = 100;\n\n&#47;&#47; ReadonlyArray(只读数组)\n&#47;&#47; ReadonlyArray 用于创建一个其元素不可被修改的数组,所以不存在 Array 中 修改相关的 方法签名\n&#47;&#47; 方式1\nlet a: ReadonlyArray&lt;number&gt; = [1, 2, 3];\na[0] = 5; &#47;&#47; Index signature in type &#39;readonly number[]&#39; only permits reading\na.push(5); &#47;&#47; Property &#39;push&#39; does not exist on type &#39;readonly number[]&#39;\n&#47;&#47; 方式2\nlet b: readonly number[] = [4, 5, 6];\nb[0] = 1; &#47;&#47; Index signature in type &#39;readonly number[]&#39; only permits reading\nb.push(1) &#47;&#47; Property &#39;push&#39; does not exist on type &#39;readonly number[]&#39;.\n&#47;&#47; 方式3 (元组是数组的特例)\nlet c: readonly [7,8,9] = [7, 8, 9];\nc[0] = 1; &#47;&#47; Cannot assign to &#39;0&#39; because it is a read-only property\nc.push(1); &#47;&#47; Property &#39;push&#39; does not exist on type &#39;readonly [7, 8, 9]&#39;.\n\n&#47;&#47; ArrayLike\n&#47;&#47; ArrayLike 表示具有 .length 属性和支持索引元素访问的对象，但它不一定具有数组的所有方法\n&#47;&#47; interface ArrayLike&lt;T&gt; {\n&#47;&#47;   readonly length: number;\n&#47;&#47;   [index: number]: T;\n&#47;&#47; }\ntype TextNodeListType = ArrayLike&lt;{ dom: string }&gt;\ntype FinalTextNodeListType = Omit&lt;TextNodeListType, never&gt;;\n&#47;&#47;   ^?","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645518,"discussion_content":"点赞的作业。👍\n\n但是你在前面的答案中用到了“返回值”一词，这个并不正确。在对象类型中存在的，要么是“索引（的）类型”，要么是“值（的）类型”。而不是“返回值类型”，并且也与foo() { return ... }中的返回值没有关系，纯粹是foo作为“索引/键”（字符串类型），它的值类型只能是字符串类型，而不能是函数类型。——你试试修改interface MyClass中的索引签名，想办法让foo()声明能通过（只要能通过声明，你就明白了）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716290687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":1,"child_discussions":[{"author":{"id":1160078,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","nickname":"Jack Q","note":"","ucode":"A7DBC311884FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":645559,"discussion_content":"interface MyClass {\n  [key: string | &#39;1&#39; | &#39;2&#39; | &#39;3&#39; | &#39;4&#39;]:  string | ((...args: any[]) =&gt; any);\n}\nclass MyClass {\n  a: string = &#39;1&#39;;\n  foo() {\n  }\n  foo0() {\n    return 1;\n  }\n  foo1() {\n  }\n  foo2(): Promise&lt;void&gt; {\n    return Promise.resolve();\n  }\n} 将索引签名中的值的类型 定义为了 string 与((...args: any[]) =&gt; any)的联合类型 就可以让 foo声明通过\n问题: 除了调用签名 和 构造签名，属性签名 、方法签名 都会受到 索引签名的限制。这是因为 索引签名 相对 属性签名和方法签名 来说更抽象的原因吗？ 属性签名 和 方法签名都是 索引签名的具象实现,我能这样理解吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716364232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":645518,"ip_address":"广东","group_id":0},"score":645559,"extra":""}]},{"author":{"id":1034451,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c8/d3/3020ae46.jpg","nickname":"fatme","note":"","ucode":"75A805D2BB2AD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645762,"discussion_content":"在老师的 &#34;TypeScript 类型系统全景&#34; 里面，并没有 &#34;属性签名&#34; 和 &#34;方法签名&#34; 这两种签名。属性 和 方法 应该都属于 &#34;成员声明&#34;。我觉得，把 &#34;成员声明&#34; 理解为 &#34;索引签名&#34; 的特殊形式应该是可以的。二者的区别在于：成员声明是静态的，它定义了对象必须有的 property（除非定义为 optional)；而索引签名是动态的，它定义的是对象 property 的访问方式和存储的值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716709296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645519,"discussion_content":"参考一下 @westfall 的答案。:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716290757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390639,"user_name":"halo","can_delete":false,"product_type":"c3","uid":2866983,"ip_address":"广东","ucode":"574BDA398A81C6","user_header":"https://static001.geekbang.org/account/avatar/00/2b/bf/27/7f7acf6c.jpg","comment_is_top":false,"comment_ctime":1715844092,"is_pvip":false,"replies":[{"id":142087,"content":"函数是可调用的对象+1 :)","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1715848521,"ip_address":"江苏","comment_id":390639,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"函数式可调用的对象","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645176,"discussion_content":"函数是可调用的对象+1 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715848521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}