{"id":146664,"title":"27 | I/O多路复用遇上线程：使用poll单线程处理所有I/O事件","content":"<p>你好，我是盛延敏，这里是网络编程实战第27讲，欢迎回来。</p><p>我在前面两讲里，分别使用了fork进程和pthread线程来处理多并发，这两种技术使用简单，但是性能却会随着并发数的上涨而快速下降，并不能满足极端高并发的需求。就像第24讲中讲到的一样，这个时候我们需要寻找更好的解决之道，这个解决之道基本的思想就是I/O事件分发。</p><p><span class=\"orange\">关于代码，你可以去<a href=\"https://github.com/froghui/yolanda\">GitHub</a>上查看或下载完整代码。</span></p><h2>重温事件驱动</h2><h3>基于事件的程序设计: GUI、Web</h3><p>事件驱动的好处是占用资源少，效率高，可扩展性强，是支持高性能高并发的不二之选。</p><p>如果你熟悉GUI编程的话，你就会知道，GUI设定了一系列的控件，如Button、Label、文本框等，当我们设计基于控件的程序时，一般都会给Button的点击安排一个函数，类似这样：</p><pre><code>//按钮点击的事件处理\nvoid onButtonClick(){\n  \n}\n</code></pre><p>这个设计的思想是，一个无限循环的事件分发线程在后台运行，一旦用户在界面上产生了某种操作，例如点击了某个Button，或者点击了某个文本框，一个事件会被产生并放置到事件队列中，这个事件会有一个类似前面的onButtonClick回调函数。事件分发线程的任务，就是为每个发生的事件找到对应的事件回调函数并执行它。这样，一个基于事件驱动的GUI程序就可以完美地工作了。</p><!-- [[[read_end]]] --><p>还有一个类似的例子是Web编程领域。同样的，Web程序会在Web界面上放置各种界面元素，例如Label、文本框、按钮等，和GUI程序类似，给感兴趣的界面元素设计JavaScript回调函数，当用户操作时，对应的JavaScript回调函数会被执行，完成某个计算或操作。这样，一个基于事件驱动的Web程序就可以在浏览器中完美地工作了。</p><p>在第24讲中，我们已经提到，通过使用poll、epoll等I/O分发技术，可以设计出基于套接字的事件驱动程序，从而满足高性能、高并发的需求。</p><p>事件驱动模型，也被叫做反应堆模型（reactor），或者是Event loop模型。这个模型的核心有两点。</p><p>第一，它存在一个无限循环的事件分发线程，或者叫做reactor线程、Event loop线程。这个事件分发线程的背后，就是poll、epoll等I/O分发技术的使用。</p><p>第二，所有的I/O操作都可以抽象成事件，每个事件必须有回调函数来处理。acceptor上有连接建立成功、已连接套接字上发送缓冲区空出可以写、通信管道pipe上有数据可以读，这些都是一个个事件，通过事件分发，这些事件都可以一一被检测，并调用对应的回调函数加以处理。</p><h2>几种I/O模型和线程模型设计</h2><p>任何一个网络程序，所做的事情可以总结成下面几种：</p><ul>\n<li>read：从套接字收取数据；</li>\n<li>decode：对收到的数据进行解析；</li>\n<li>compute：根据解析之后的内容，进行计算和处理；</li>\n<li>encode：将处理之后的结果，按照约定的格式进行编码；</li>\n<li>send：最后，通过套接字把结果发送出去。</li>\n</ul><p>这几个过程和套接字最相关的是read和send这两种。接下来，我们总结一下已经学过的几种支持多并发的网络编程技术，引出我们今天的话题，使用poll单线程处理所有I/O。</p><h3>fork</h3><p>第25讲中，我们使用fork来创建子进程，为每个到达的客户连接服务。这张图很好地解释了这个设计模式，可想而知的是，随着客户数的变多，fork的子进程也越来越多，即使客户和服务器之间的交互比较少，这样的子进程也不能被销毁，一直需要存在。使用fork的方式处理非常简单，它的缺点是处理效率不高，fork子进程的开销太大。</p><p><img src=\"https://static001.geekbang.org/resource/image/f1/1c/f1045858bc79c5064903c25c6388051c.png?wh=1052*748\" alt=\"\"></p><h3>pthread</h3><p>第26讲中，我们使用了pthread_create创建子线程，因为线程是比进程更轻量级的执行单位，所以它的效率相比fork的方式，有一定的提高。但是，每次创建一个线程的开销仍然是不小的，因此，引入了线程池的概念，预先创建出一个线程池，在每次新连接达到时，从线程池挑选出一个线程为之服务，很好地解决了线程创建的开销。但是，这个模式还是没有解决空闲连接占用资源的问题，如果一个连接在一定时间内没有数据交互，这个连接还是要占用一定的线程资源，直到这个连接消亡为止。</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/2c/1c07131ab6ca03d3a5a9092ef20e0b2c.png?wh=1006*708\" alt=\"\"></p><h3>single reactor thread</h3><p>前面讲到，事件驱动模式是解决高性能、高并发比较好的一种模式。为什么呢？</p><p>因为这种模式是符合大规模生产的需求的。我们的生活中遍地都是类似的模式。比如你去咖啡店喝咖啡，你点了一杯咖啡在一旁喝着，服务员也不会管你，等你有续杯需求的时候，再去和服务员提（触发事件），服务员满足了你的需求，你就继续可以喝着咖啡玩手机。整个柜台的服务方式就是一个事件驱动的方式。</p><p>这里有一张图，解释了这一讲的设计模式。一个reactor线程上同时负责分发acceptor的事件、已连接套接字的I/O事件。</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/33/b8627a1a1d32da4b55ac74d4f0230f33.png?wh=1006*616\" alt=\"\"></p><h3>single reactor thread + worker threads</h3><p>但是上述的设计模式有一个问题，和I/O事件处理相比，应用程序的业务逻辑处理是比较耗时的，比如XML文件的解析、数据库记录的查找、文件资料的读取和传输、计算型工作的处理等，这些工作相对而言比较独立，它们会拖慢整个反应堆模式的执行效率。</p><p>所以，将这些decode、compute、enode型工作放置到另外的线程池中，和反应堆线程解耦，是一个比较明智的选择。反应堆线程只负责处理I/O相关的工作，业务逻辑相关的工作都被裁剪成一个一个的小任务，放到线程池里由空闲的线程来执行。当结果完成后，再交给反应堆线程，由反应堆线程通过套接字将结果发送出去。</p><p><img src=\"https://static001.geekbang.org/resource/image/7e/23/7e4505bb75fef4a4bb945e6dc3040823.png?wh=988*842\" alt=\"\"></p><h2>样例程序</h2><p>从今天开始，我们会接触到为本课程量身定制的网络编程框架。使用这个网络编程框架的样例程序如下：</p><pre><code>#include &lt;lib/acceptor.h&gt;\n#include &quot;lib/common.h&quot;\n#include &quot;lib/event_loop.h&quot;\n#include &quot;lib/tcp_server.h&quot;\n\nchar rot13_char(char c) {\n    if ((c &gt;= 'a' &amp;&amp; c &lt;= 'm') || (c &gt;= 'A' &amp;&amp; c &lt;= 'M'))\n        return c + 13;\n    else if ((c &gt;= 'n' &amp;&amp; c &lt;= 'z') || (c &gt;= 'N' &amp;&amp; c &lt;= 'Z'))\n        return c - 13;\n    else\n        return c;\n}\n\n//连接建立之后的callback\nint onConnectionCompleted(struct tcp_connection *tcpConnection) {\n    printf(&quot;connection completed\\n&quot;);\n    return 0;\n}\n\n//数据读到buffer之后的callback\nint onMessage(struct buffer *input, struct tcp_connection *tcpConnection) {\n    printf(&quot;get message from tcp connection %s\\n&quot;, tcpConnection-&gt;name);\n    printf(&quot;%s&quot;, input-&gt;data);\n\n    struct buffer *output = buffer_new();\n    int size = buffer_readable_size(input);\n    for (int i = 0; i &lt; size; i++) {\n        buffer_append_char(output, rot13_char(buffer_read_char(input)));\n    }\n    tcp_connection_send_buffer(tcpConnection, output);\n    return 0;\n}\n\n//数据通过buffer写完之后的callback\nint onWriteCompleted(struct tcp_connection *tcpConnection) {\n    printf(&quot;write completed\\n&quot;);\n    return 0;\n}\n\n//连接关闭之后的callback\nint onConnectionClosed(struct tcp_connection *tcpConnection) {\n    printf(&quot;connection closed\\n&quot;);\n    return 0;\n}\n\nint main(int c, char **v) {\n    //主线程event_loop\n    struct event_loop *eventLoop = event_loop_init();\n\n    //初始化acceptor\n    struct acceptor *acceptor = acceptor_init(SERV_PORT);\n\n    //初始tcp_server，可以指定线程数目，如果线程是0，就只有一个线程，既负责acceptor，也负责I/O\n    struct TCPserver *tcpServer = tcp_server_init(eventLoop, acceptor, onConnectionCompleted, onMessage,\n                                                  onWriteCompleted, onConnectionClosed, 0);\n    tcp_server_start(tcpServer);\n\n    // main thread for acceptor\n    event_loop_run(eventLoop);\n}\n</code></pre><p>这个程序的main函数部分只有几行, 因为是第一次接触到，稍微展开介绍一下。</p><p>第49行创建了一个event_loop，即reactor对象，这个event_loop和线程相关联，每个event_loop在线程里执行的是一个无限循环，以便完成事件的分发。</p><p>第52行初始化了acceptor，用来监听在某个端口上。</p><p>第55行创建了一个TCPServer，创建的时候可以指定线程数目，这里线程是0，就只有一个线程，既负责acceptor的连接处理，也负责已连接套接字的I/O处理。这里比较重要的是传入了几个回调函数，分别对应了连接建立完成、数据读取完成、数据发送完成、连接关闭完成几种操作，通过回调函数，让业务程序可以聚焦在业务层开发。</p><p>第57行开启监听。</p><p>第60行运行event_loop无限循环，等待acceptor上有连接建立、新连接上有数据可读等。</p><h2>样例程序结果</h2><p>运行这个服务器程序，开启两个telnet客户端，我们看到服务器端的输出如下：</p><pre><code> $./poll-server-onethread\n[msg] set poll as dispatcher\n[msg] add channel fd == 4, main thread\n[msg] poll added channel fd==4\n[msg] add channel fd == 5, main thread\n[msg] poll added channel fd==5\n[msg] event loop run, main thread\n[msg] get message channel i==1, fd==5\n[msg] activate channel fd == 5, revents=2, main thread\n[msg] new connection established, socket == 6\nconnection completed\n[msg] add channel fd == 6, main thread\n[msg] poll added channel fd==6\n[msg] get message channel i==2, fd==6\n[msg] activate channel fd == 6, revents=2, main thread\nget message from tcp connection connection-6\nafadsfaf\n[msg] get message channel i==2, fd==6\n[msg] activate channel fd == 6, revents=2, main thread\nget message from tcp connection connection-6\nafadsfaf\nfdafasf\n[msg] get message channel i==1, fd==5\n[msg] activate channel fd == 5, revents=2, main thread\n[msg] new connection established, socket == 7\nconnection completed\n[msg] add channel fd == 7, main thread\n[msg] poll added channel fd==7\n[msg] get message channel i==3, fd==7\n[msg] activate channel fd == 7, revents=2, main thread\nget message from tcp connection connection-7\nsfasggwqe\n[msg] get message channel i==3, fd==7\n[msg] activate channel fd == 7, revents=2, main thread\n[msg] poll delete channel fd==7\nconnection closed\n[msg] get message channel i==2, fd==6\n[msg] activate channel fd == 6, revents=2, main thread\n[msg] poll delete channel fd==6\nconnection closed\n</code></pre><p>这里自始至终都只有一个main thread在工作，可见，单线程的reactor处理多个连接时也可以表现良好。</p><h2>总结</h2><p>这一讲我们总结了几种不同的I/O模型和线程模型设计，并比较了各自不同的优缺点。从这一讲开始，我们将使用自己编写的编程框架来完成业务开发，这一讲使用了poll来处理所有的I/O事件，在下一讲里，我们将会看到如何把acceptor的连接事件和已连接套接字的I/O事件交由不同的线程处理，而这个分离，不过是在应用程序层简单的参数配置而已。</p><h2>思考题</h2><p>和往常一样，给你留两道思考题：</p><ol>\n<li>你可以试着修改一下onMessage方法，把它变为期中作业中提到的cd、ls等command实现。</li>\n<li>文章里服务器端的decode-compute-encode是在哪里实现的？你有什么办法来解决业务逻辑和I/O逻辑混在一起么？</li>\n</ol><p>欢迎你在评论区写下你的思考，或者在GitHub上上传你的代码，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","comments":[{"had_liked":false,"id":155627,"user_name":"林林","can_delete":false,"product_type":"c1","uid":1613227,"ip_address":"","ucode":"7B6318B971E430","user_header":"https://static001.geekbang.org/account/avatar/00/18/9d/ab/6589d91a.jpg","comment_is_top":false,"comment_ctime":1574730215,"is_pvip":false,"replies":[{"id":"60371","content":"这就是两个普通的producer-consumer线程关系，使用队列+锁的方式是一个比较常见的实现方式。","user_name":"作者回复","comment_id":155627,"uid":"1618647","ip_address":"","utype":1,"ctime":1575185631,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"57409305063","product_id":100032701,"comment_content":"worker thread 和 reactor thread之间怎么进行数据传递？是要利用队列+锁吗？","like_count":13,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475812,"discussion_content":"这就是两个普通的producer-consumer线程关系，使用队列+锁的方式是一个比较常见的实现方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575185631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139416,"user_name":"fxzhang","can_delete":false,"product_type":"c1","uid":1650951,"ip_address":"","ucode":"BDCD131BE2DBC1","user_header":"","comment_is_top":false,"comment_ctime":1570629308,"is_pvip":false,"replies":[{"id":"54326","content":"先学习一下Linux下的安装、配置、管理，把工作环境放到Linux下面，让Linux成为你的工作效率机器；<br><br>其次，慢慢学习Bash，感受一下Linux的能力；<br><br>接下来就是学习一些 Linux下的程序设计，如I&#47;O、网络等。<br><br>如果你能把这篇系列的所有代码都改一遍，运行一遍，就是一个良好的开头。<br><br>加油~","user_name":"作者回复","comment_id":139416,"uid":"1618647","ip_address":"","utype":1,"ctime":1570973653,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"44520302268","product_id":100032701,"comment_content":"老师可否讲解linux下如何开发的，最近想换工作，但是之前都在windows下面开发，想自学一下linux下是如何开发的，但是有一种找不到开头不知道该怎么学习的感觉，很无力","like_count":10,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469933,"discussion_content":"先学习一下Linux下的安装、配置、管理，把工作环境放到Linux下面，让Linux成为你的工作效率机器；\n\n其次，慢慢学习Bash，感受一下Linux的能力；\n\n接下来就是学习一些 Linux下的程序设计，如I/O、网络等。\n\n如果你能把这篇系列的所有代码都改一遍，运行一遍，就是一个良好的开头。\n\n加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570973653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154924,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1574598250,"is_pvip":false,"replies":[{"id":"60379","content":"第一个问题，回调函数和套接字对应的，通过套接字找到对应的回调函数；<br><br>第二个问题，因为是事件驱动，不需要分配固定的资源，仅仅使用几个线程就可以支持上万的连接，每个线程的利用率得到了最大提升。<br>","user_name":"作者回复","comment_id":154924,"uid":"1618647","ip_address":"","utype":1,"ctime":1575186607,"user_name_real":"froghui"}],"discussion_count":4,"race_medal":0,"score":"40229303914","product_id":100032701,"comment_content":"1：事件驱动模型的设计思想是啥？<br>事件驱动模型的设计的思想是，一个无限循环的事件分发线程在后台运行，一旦做了某种操作触发了一个事件，这个事件就会被放置到事件队列中，事件分发线程的任务，就为这个发生的事件找到对应的事件回调函数并执行它。<br>这里有个疑问，事件分发线程怎么找到事件的回调函数，并调用它的？<br><br>2：事件驱动模型的优势是啥？<br>事件驱动的好处是占用资源少，效率高，可扩展性强，是支持高性能高并发的不二之选。<br>老师好，请问占用资源少这个结论是怎么得出来的？<br><br>3：IO网络通信是怎么实现事件驱动模型的？<br>通过使用 poll、epoll 等 I&#47;O 分发技术，可以设计出基于套接字的事件驱动程序，从而满足高性能、高并发的需求。<br><br>4：Reactor模型是啥玩意？<br>Reactor模型（中文叫做反应堆模型）也就是事件驱动模型或者是 Event loop 模型。<br>这个模型的核心有两点。<br>第一，它存在一个无限循环的事件分发线程，或者叫做 reactor 线程、Event loop 线程。这个事件分发线程的背后，就是 poll、epoll 等 I&#47;O 分发技术的使用。<br>第二，所有的 I&#47;O 操作都可以抽象成事件，每个事件必须有回调函数来处理。acceptor 上有连接建立成功、已连接套接字上发送缓冲区空出可以写、通信管道 pipe 上有数据可以读，这些都是一个个事件，通过事件分发，这些事件都可以一一被检测，并调用对应的回调函数加以处理。<br>5：Reactor模型——解决了空闲连接占用资源的问题，Reactor线程只负责处理 I&#47;O 相关的工作，业务逻辑相关的工作都被裁剪成一个一个的小任务，放到线程池里由空闲的线程来执行。当结果完成后，再交给反应堆线程，由Reactor线程通过套接字将结果发送出去。<br>所以，这个模式性能更优。<br><br>6：阻塞IO+多进程——实现简单，性能一般<br>7：阻塞IO+多线程——相比于阻塞IO+多进程，减少了上下文切换所带来的开销，性能有所提高。<br>8：阻塞IO+线程池——相比于阻塞IO+多线程，减少了线程频繁创建和销毁的开销，性能有了进一步的提高。<br>9：Reactor+线程池——相比于阻塞IO+线程池，采用了更加先进的事件驱动设计思想，资源占用少、效率高、扩展性强，是支持高性能高并发场景的利器。","like_count":10,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475615,"discussion_content":"第一个问题，回调函数和套接字对应的，通过套接字找到对应的回调函数；\n\n第二个问题，因为是事件驱动，不需要分配固定的资源，仅仅使用几个线程就可以支持上万的连接，每个线程的利用率得到了最大提升。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575186607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027840,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/af/00/9b49f42b.jpg","nickname":"skye","note":"","ucode":"C55C9F52C78A00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":142155,"discussion_content":"不是很理解资源占用少这一点","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579448001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1571460,"avatar":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","nickname":"Simple life","note":"","ucode":"1902D7F72FB43F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1027840,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/af/00/9b49f42b.jpg","nickname":"skye","note":"","ucode":"C55C9F52C78A00","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296097,"discussion_content":"我的理解是，Reactor当事件触发才在线程池触发，而epoll+线程池是整个过程都需要占据一个线程来执行，这个模型线程使用一直占据着，即使没有数据交互","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596451281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":142155,"ip_address":""},"score":296097,"extra":""}]},{"author":{"id":1682027,"avatar":"https://static001.geekbang.org/account/avatar/00/19/aa/6b/ab9a072a.jpg","nickname":"对与错","note":"","ucode":"EF55733E3BD78B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336286,"discussion_content":"但是处理延迟也会相应增大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608544668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230977,"user_name":"刘忽悠","can_delete":false,"product_type":"c1","uid":1252173,"ip_address":"","ucode":"095DE3A8D3F450","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/4d/2cc44d9a.jpg","comment_is_top":false,"comment_ctime":1593552493,"is_pvip":true,"replies":[{"id":"85727","content":"基本是正确的。有一个小小的地方和我的理解不一致，就是对socket的读写，也是可以放到线程池里独立的线程去做，而主reactor线程就是一个事件分发器，不负责I&#47;O操作，因为主reactor线程是一个非常重要的&quot;大脑&quot;，尽量不要让它成为瓶颈。","user_name":"作者回复","comment_id":230977,"uid":"1618647","ip_address":"","utype":1,"ctime":1593954245,"user_name_real":"froghui"}],"discussion_count":3,"race_medal":0,"score":"23068388973","product_id":100032701,"comment_content":"没太理解epoll反应堆模型，和直接eopll的区别是什么？<br>不知道我这么理解对不对，一般使用epoll，假如新连接建立，注册cfd读事件，当事件触发，接着在主线程里面读出来，然后处理，接着发送；epoll反应堆模式是不是仅仅只是在注册事件的时候加了一个对应的回调函数，当事件触发，然后调用回调去处理？相当于统一了一下接口？<br>对于老师说的reactor+threadpool不知道理解的对不对，我个人理解是，当有新连接建立，因为监听描述符注册的是acceptor事件，这时候这个事件触发，触发之后注册新的描述符cfd的read事件，当cfd的读事件触发，这时候在reactor线程（主线程）里面调当初注册的回调函数来处理读事件，读出来之后，然后注销cfd的读事件，这时候把读出来的内容封装成Task，放到线程池的Task队列，通知线程池的工作线程——有任务了，唤醒一个线程对任务进行处理，处理完成之后，这时候注册cfd的写事件，然后work线程处理完成，一般情况下写缓冲区都是可以写，所以这时候在reactor线程里面，cfd的写事件被触发，这时候在reactor线程里面调用对应的回调函数把数据发送过去，接着然后注销写事件，注册读事件，继续监听客户端请求。这样一来，业务逻辑都在线程池里面去做，然后读，写都是通过在主线程，也就是reactor线程里面调用对应的回调函数来完成。<br>不知道这么理解reactor模式+线程池对不对？","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500100,"discussion_content":"基本是正确的。有一个小小的地方和我的理解不一致，就是对socket的读写，也是可以放到线程池里独立的线程去做，而主reactor线程就是一个事件分发器，不负责I/O操作，因为主reactor线程是一个非常重要的&amp;quot;大脑&amp;quot;，尽量不要让它成为瓶颈。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593954245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1812201,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLm8skz4F7FGGBTXWUMia6qVEc00BddeXapicv5FkAx62GmOnUNEcE4scSR60AmappQoNdIQhccKsBA/132","nickname":"末日，成欢","note":"","ucode":"BBAEBB9C93558A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392736,"discussion_content":"大佬好，我想问下acceptor和handler的区别在哪里呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631106838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1252173,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1b/4d/2cc44d9a.jpg","nickname":"刘忽悠","note":"","ucode":"095DE3A8D3F450","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289720,"discussion_content":"嗯，这个看了您后面介绍的主从模式基本理解，之前在网上看reactor模式，一直都没明白和一般直接使用epoll的区别是什么，看您回复，心理终于踏实了，多谢盛哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594190352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141139,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571122222,"is_pvip":false,"replies":[{"id":"55099","content":"你是问题最多的，我想也是收获最大的。<br><br>调试、调试、调试，重要的问题讲三遍 :)","user_name":"作者回复","comment_id":141139,"uid":"1618647","ip_address":"","utype":1,"ctime":1571454046,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"18750991406","product_id":100032701,"comment_content":"第一遍看完这篇文章 我就感受颇深 尤其是事件触发 这个模式 然后就想到工作当中的用到的skynet框架底层就是采用事件驱动,某个服务有数据达到 就去触发对应的服务,然后再回想工作当中很多逻辑都抽象成事件,通过一个主循环检测时间然后来触发对应的事件！<br>更重要的一点,专栏下的代码我全部是自己手动实现了一遍 还用上了gdb很开心 很满足<br>第27讲和第24讲 应该重点学习,这两讲都是很重要的理论基础","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470681,"discussion_content":"你是问题最多的，我想也是收获最大的。\n\n调试、调试、调试，重要的问题讲三遍 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571454046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240786,"user_name":"CPP","can_delete":false,"product_type":"c1","uid":1684438,"ip_address":"","ucode":"8E04F0C954B797","user_header":"https://static001.geekbang.org/account/avatar/00/19/b3/d6/6101dbd7.jpg","comment_is_top":false,"comment_ctime":1597064190,"is_pvip":false,"replies":[{"id":"89334","content":"C语言应该是大学期间必修课程吧.......","user_name":"作者回复","comment_id":240786,"uid":"1618647","ip_address":"","utype":1,"ctime":1597583874,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"14481966078","product_id":100032701,"comment_content":"C语言要是没两把刷子，买了也是浪费钱。再调试也得建立再看懂的基础上......","like_count":3,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503560,"discussion_content":"C语言应该是大学期间必修课程吧.......","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597583874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144419,"user_name":"herongwei","can_delete":false,"product_type":"c1","uid":1153928,"ip_address":"","ucode":"E4158BF7AD2E70","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/88/34c171f1.jpg","comment_is_top":false,"comment_ctime":1571918780,"is_pvip":false,"replies":[{"id":"55812","content":"我想应该是可以满足你的要求的:)","user_name":"作者回复","comment_id":144419,"uid":"1618647","ip_address":"","utype":1,"ctime":1572057598,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"10161853372","product_id":100032701,"comment_content":"这篇文章，多了很多生动的图片，感觉干货满满啊，哈哈，希望后面的课程，也能多加点对应的图片就更好了。","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471929,"discussion_content":"我想应该是可以满足你的要求的:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572057598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207788,"user_name":"heyman","can_delete":false,"product_type":"c1","uid":1173894,"ip_address":"","ucode":"92EF9EF1B1B1B3","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","comment_is_top":false,"comment_ctime":1587179922,"is_pvip":false,"replies":[{"id":"77720","content":"不会。这里不是轮询哦，轮询是消耗cpu时间的，这里是系统提供的事件驱动，看似在无限循环，其实这个时候cpu被调度干其他事了，当真正有事件发生，cpu又会被切换回来，所以效率很高。","user_name":"作者回复","comment_id":207788,"uid":"1618647","ip_address":"","utype":1,"ctime":1587304462,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"5882147218","product_id":100032701,"comment_content":" reactor 线程无限循环，有点像轮询，效率不会很低吗？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492240,"discussion_content":"不会。这里不是轮询哦，轮询是消耗cpu时间的，这里是系统提供的事件驱动，看似在无限循环，其实这个时候cpu被调度干其他事了，当真正有事件发生，cpu又会被切换回来，所以效率很高。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587304462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181752,"user_name":"supermouse","can_delete":false,"product_type":"c1","uid":1321860,"ip_address":"","ucode":"88072D5F881827","user_header":"https://static001.geekbang.org/account/avatar/00/14/2b/84/07f0c0d6.jpg","comment_is_top":false,"comment_ctime":1582628338,"is_pvip":false,"replies":[{"id":"71035","content":"是的。","user_name":"作者回复","comment_id":181752,"uid":"1618647","ip_address":"","utype":1,"ctime":1583052673,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"5877595634","product_id":100032701,"comment_content":"思考题第一道：https:&#47;&#47;github.com&#47;YoungYo&#47;yolanda&#47;blob&#47;master&#47;chap-27&#47;poll-server-onethread-homework.c 这是修改后的代码<br>思考题第二道： onMessage 方法就是处理 decode-compute-encode 逻辑的吧？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485106,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583052673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153052,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1574149020,"is_pvip":false,"replies":[{"id":"59331","content":"没有。","user_name":"作者回复","comment_id":153052,"uid":"1618647","ip_address":"","utype":1,"ctime":1574498419,"user_name_real":"froghui"}],"discussion_count":2,"race_medal":0,"score":"5869116316","product_id":100032701,"comment_content":"使用多线程有线程池，使用多进程有进程池吗？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475028,"discussion_content":"没有。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574498419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1397631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","nickname":"衬衫的价格是19美元","note":"","ucode":"655F925451F772","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292753,"discussion_content":"php-fpm这种貌似是进程池，通过一个主进程管理多个子进程的方式维持一定数量的进程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595321839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143539,"user_name":"徐凯","can_delete":false,"product_type":"c1","uid":1244991,"ip_address":"","ucode":"12F82BA3649CD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/3f/bbb8a88c.jpg","comment_is_top":false,"comment_ctime":1571728217,"is_pvip":false,"replies":[{"id":"55826","content":"这是框架设计的基本思想，我在后面的框架设计中也是这样的，欢迎继续阅读，你会有更多收获。","user_name":"作者回复","comment_id":143539,"uid":"1618647","ip_address":"","utype":1,"ctime":1572058454,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"5866695513","product_id":100032701,"comment_content":"我看到别人的代码用到了老师说的这个思想，在接收消息它采用的是分发订阅模式   通过订阅者的回调来接收消息  没有特定的recv接口露给外界  这种设计思想老师怎么看","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471584,"discussion_content":"这是框架设计的基本思想，我在后面的框架设计中也是这样的，欢迎继续阅读，你会有更多收获。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572058454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141155,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571125109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5866092405","product_id":100032701,"comment_content":"第二问根据工作中遇到的情况来看decode-compute-encode应该是业务逻辑,应该是工作线程上处理,觉得处理方式是每个描述符和每个线程做一个映射,并且注册一个回调函数,用这个函数来处理套接字收到消息事件,然后再执行decode-compute-encode逻辑","like_count":1},{"had_liked":false,"id":141141,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571122311,"is_pvip":false,"replies":[{"id":"55101","content":"加油~","user_name":"作者回复","comment_id":141141,"uid":"1618647","ip_address":"","utype":1,"ctime":1571454060,"user_name_real":"froghui"}],"discussion_count":4,"race_medal":0,"score":"5866089607","product_id":100032701,"comment_content":"之前由于忙着买房子 落下了很多课程 现在都在追,不过不管是追还是慢慢跟 我都会再好好复习的","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470682,"discussion_content":"加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571454060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335153,"discussion_content":"learning in the big house","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608106954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1252980,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1e/74/636ea0f3.jpg","nickname":"你好","note":"","ucode":"0B5E024BA58560","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258074,"discussion_content":"加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588644261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022247,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","nickname":"阿卡牛","note":"","ucode":"0BC43A904C3199","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53237,"discussion_content":"房都有了，还学啥 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574149054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355591,"user_name":"Running man","can_delete":false,"product_type":"c1","uid":2075086,"ip_address":"浙江","ucode":"F3357D6696A5C1","user_header":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","comment_is_top":false,"comment_ctime":1661516045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661516045","product_id":100032701,"comment_content":"这个线程数为零的时候，threadPool动态申请了一个线程，但实际并没有使用，也没有释放是不是会造成资源泄露？","like_count":0},{"had_liked":false,"id":332789,"user_name":"Mandone","can_delete":false,"product_type":"c1","uid":1116017,"ip_address":"","ucode":"FE236389CEF200","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/71/d3049207.jpg","comment_is_top":false,"comment_ctime":1643608408,"is_pvip":true,"replies":[{"id":"122011","content":"这个名词，看起来很熟系......","user_name":"作者回复","comment_id":332789,"uid":"1618647","ip_address":"","utype":1,"ctime":1644729171,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1643608408","product_id":100032701,"comment_content":"Synchronous Event Demultiplexer（同步事件分离器）  是这个吗","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550761,"discussion_content":"这个名词，看起来很熟系......","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644729171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332788,"user_name":"Mandone","can_delete":false,"product_type":"c1","uid":1116017,"ip_address":"","ucode":"FE236389CEF200","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/71/d3049207.jpg","comment_is_top":false,"comment_ctime":1643608347,"is_pvip":true,"replies":[{"id":"122013","content":"说的通俗一点，就是操作系统帮我们把这个事情给干了，操作系统是个多面手，可以干干这个，也干干那个，等到有事件发生的时候，就会腾出手来帮我们处理网络I&#47;O事件了。","user_name":"作者回复","comment_id":332788,"uid":"1618647","ip_address":"","utype":1,"ctime":1644729287,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1643608347","product_id":100032701,"comment_content":"不会。这里不是轮询哦，轮询是消耗cpu时间的，这里是系统提供的事件驱动，看似在无限循环，其实这个时候cpu被调度干其他事了。<br>老师，这里系统提供的事件驱动是指什么？既然不是无限轮训，那是怎么样执行呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550763,"discussion_content":"说的通俗一点，就是操作系统帮我们把这个事情给干了，操作系统是个多面手，可以干干这个，也干干那个，等到有事件发生的时候，就会腾出手来帮我们处理网络I/O事件了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644729287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332742,"user_name":"Mandone","can_delete":false,"product_type":"c1","uid":1116017,"ip_address":"","ucode":"FE236389CEF200","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/71/d3049207.jpg","comment_is_top":false,"comment_ctime":1643535886,"is_pvip":true,"replies":[{"id":"122020","content":"当然，你可以试试哦。","user_name":"作者回复","comment_id":332742,"uid":"1618647","ip_address":"","utype":1,"ctime":1644729597,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1643535886","product_id":100032701,"comment_content":"有一个问题，有一个无线轮询的线程会对CPU的消耗有影响吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550770,"discussion_content":"当然，你可以试试哦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644729597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327548,"user_name":"菜鸡互啄","can_delete":false,"product_type":"c1","uid":2765079,"ip_address":"","ucode":"59162B81398399","user_header":"https://static001.geekbang.org/account/avatar/00/2a/31/17/ab2c27a6.jpg","comment_is_top":false,"comment_ctime":1640166412,"is_pvip":false,"replies":[{"id":"119414","content":"基于I&#47;O多路复用+非阻塞。一般的，都把select&#47;poll&#47;epoll叫做I&#47;O多路复用。","user_name":"作者回复","comment_id":327548,"uid":"1618647","ip_address":"","utype":1,"ctime":1640402382,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1640166412","product_id":100032701,"comment_content":"老师你好 这边开始有点晕了。代码里贴的event_loop反应堆就是基于系统轮询（如slect&#47;poll&#47;epoll）+非阻塞封装的吗","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541483,"discussion_content":"基于I/O多路复用+非阻塞。一般的，都把select/poll/epoll叫做I/O多路复用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640402382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307842,"user_name":"S","can_delete":false,"product_type":"c1","uid":2436407,"ip_address":"","ucode":"E88F6A338F34A6","user_header":"https://static001.geekbang.org/account/avatar/00/25/2d/37/f8733b67.jpg","comment_is_top":false,"comment_ctime":1629277588,"is_pvip":false,"replies":[{"id":"111676","content":"好问题。<br><br>是这样的，fd:3其实是被socketpair占了，也就是说fd:4是主reactor占用的描述字，fd:3是这个主reactor对应的socketpair，这是为了让反应堆线程能够随时感知新的事件。<br>","user_name":"作者回复","comment_id":307842,"uid":"1618647","ip_address":"","utype":1,"ctime":1629636487,"user_name_real":"froghui"}],"discussion_count":2,"race_medal":0,"score":"1629277588","product_id":100032701,"comment_content":"请问老师，你程序第一句打印add channel fd == 4, main thread，为什么第一个fd是4而不是3？ 0，1，2分别代表输入，输出，错误。那么fd:3被谁占用了？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525311,"discussion_content":"好问题。\n\n是这样的，fd:3其实是被socketpair占了，也就是说fd:4是主reactor占用的描述字，fd:3是这个主reactor对应的socketpair，这是为了让反应堆线程能够随时感知新的事件。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629636487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2233731,"avatar":"https://static001.geekbang.org/account/avatar/00/22/15/83/8238c6cd.jpg","nickname":"CofCai","note":"","ucode":"D822F3309AE690","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":547647,"discussion_content":"老师，没太懂socketPair[2]的作用，能否解释一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642779485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":525311,"ip_address":""},"score":547647,"extra":""}]}]},{"had_liked":false,"id":259662,"user_name":"coder","can_delete":false,"product_type":"c1","uid":1656956,"ip_address":"","ucode":"3A0940EBF94577","user_header":"https://static001.geekbang.org/account/avatar/00/19/48/7c/2aaf50e5.jpg","comment_is_top":false,"comment_ctime":1604804791,"is_pvip":false,"replies":[{"id":"95507","content":"是的。","user_name":"作者回复","comment_id":259662,"uid":"1618647","ip_address":"","utype":1,"ctime":1606041700,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1604804791","product_id":100032701,"comment_content":"netty也是用的reactor模型","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508993,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606041700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257736,"user_name":"insist","can_delete":false,"product_type":"c1","uid":1054536,"ip_address":"","ucode":"1EE2800A900BA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/48/3ab39c86.jpg","comment_is_top":false,"comment_ctime":1604110446,"is_pvip":false,"replies":[{"id":"95518","content":"两个是一个意思，都是在客户端连接到达后分发到合适的线程处理。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1606046725,"ip_address":"","comment_id":257736,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604110446","product_id":100032701,"comment_content":"老师，请问在reactor+work thread模式下，reactor线程负责分发客户端连接的acceptor事件，这样的话reactor看起来的作用是监听客户端连接。但是前面说到acceptor是用来监听客户端连接的，怎么理解呢","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508434,"discussion_content":"两个是一个意思，都是在客户端连接到达后分发到合适的线程处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606046725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253801,"user_name":"木子皿","can_delete":false,"product_type":"c1","uid":1242778,"ip_address":"","ucode":"3FDEAFABB4C427","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUzv6S9wroyXaoFIwvC1mdDiav4BVS4BbPTuwtvWibthL5PyMuxFNicY06QJMZicVpib7E88S19nH4I9Q/132","comment_is_top":false,"comment_ctime":1602901938,"is_pvip":false,"replies":[{"id":"95519","content":"稍安勿躁，你也可以从后面读的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1606046768,"ip_address":"","comment_id":253801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602901938","product_id":100032701,"comment_content":"老师，这一讲直接抛出来来了一个框架，感觉好难啊，无法理解了","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507189,"discussion_content":"稍安勿躁，你也可以从后面读的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606046768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233708,"user_name":"凉人。","can_delete":false,"product_type":"c1","uid":1659177,"ip_address":"","ucode":"4DB16004A62015","user_header":"https://static001.geekbang.org/account/avatar/00/19/51/29/24739c58.jpg","comment_is_top":false,"comment_ctime":1594398073,"is_pvip":false,"replies":[{"id":"86808","content":"这个是刚开始哦，后面会有优化的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1594907400,"ip_address":"","comment_id":233708,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594398073","product_id":100032701,"comment_content":"看了第三遍，想知道为什么把IO压力给监听现成，其他线程做cpu计算会好一点?这不是代表主线程变为瓶颈了么","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501140,"discussion_content":"这个是刚开始哦，后面会有优化的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594907400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225704,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1591837908,"is_pvip":false,"replies":[{"id":"84272","content":"当然不是，事件驱动的非阻塞I&#47;O为主。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1592742460,"ip_address":"","comment_id":225704,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591837908","product_id":100032701,"comment_content":"一个分发线程负责几万个套接字连接，那真正的从套接字读和往套接字写都是阻塞的是么？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497954,"discussion_content":"当然不是，事件驱动的非阻塞I/O为主。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592742460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221045,"user_name":"赵玉炜","can_delete":false,"product_type":"c1","uid":2006925,"ip_address":"","ucode":"3DB34F33283501","user_header":"https://static001.geekbang.org/account/avatar/00/1e/9f/8d/56f338b8.jpg","comment_is_top":false,"comment_ctime":1590390972,"is_pvip":false,"replies":[{"id":"82171","content":"感觉http的状态机的问题，导致http报文解析出问题了，我试过chrome是好的，需要抓下包看看http报文发送的情况，特别是http header部分，","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1590930588,"ip_address":"","comment_id":221045,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590390972","product_id":100032701,"comment_content":"老师您好，请问一下不同浏览器会有不同的限制吗？<br>我仿照您的代码实现了一个基于epoll的http服务器。<br>它在360极速浏览器，旧版的ie浏览器上可以正确显示。<br>但是在chrome浏览器就会出现这样的错误。<br>client ip: 10.10.10.1, port : 5118<br>fd_read_to_buf(socket_fd, input);<br>GET &#47; HTTP&#47;1.1<br>Host: 10.10.10.135:8080<br>Connection: keep-alive<br>Cache-Control: max-age=0<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla&#47;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#47;537.36 (KHTML, like Gecko) Chrome&#47;83.0.4103.61 Safari&#47;537.36<br>Accept: text&#47;html,application&#47;xhtml+xml,application&#47;xml;q=0.9,image&#47;webp,image&#47;apng,*&#47;*;q=0.8,application&#47;signed-exchange;v=b3;q=0.9<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9,en;q=0.8<br><br>httpRequest-&gt;current_state == REQUEST_STATUS<br>buf-&gt;read_index= 0, buf-&gt;write-&gt;index=454<br>REQUEST_STATUS done!<br>httpRequest-&gt;current_state == REQUEST_HEADERS<br>httpRequest-&gt;current_state == REQUEST_HEADERS<br>httpRequest-&gt;current_state == REQUEST_HEADERS<br>httpRequest-&gt;current_state == REQUEST_HEADERS<br>httpRequest-&gt;current_state == REQUEST_HEADERS<br>httpRequest-&gt;current_state == REQUEST_HEADERS<br>httpRequest-&gt;current_state == REQUEST_HEADERS<br>httpRequest-&gt;current_state == REQUEST_HEADERS<br>httpRequest-&gt;current_state == REQUEST_HEADERS<br>parse_http_request.<br>epoll_http: malloc.c:2394: sysmalloc: Assertion `(old_top == initial_top (av) &amp;&amp; old_size == 0) || ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp; prev_inuse (old_top) &amp;&amp; ((unsigned long) old_end &amp; (pagesize - 1)) == 0)&#39; failed.<br>Aborted (core dumped)<br><br>请问老师我应该如何修改呢","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496309,"discussion_content":"感觉http的状态机的问题，导致http报文解析出问题了，我试过chrome是好的，需要抓下包看看http报文发送的情况，特别是http header部分，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590930588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219942,"user_name":"rongyefeng","can_delete":false,"product_type":"c1","uid":1959482,"ip_address":"","ucode":"9A15D947E9D645","user_header":"https://static001.geekbang.org/account/avatar/00/1d/e6/3a/382cf024.jpg","comment_is_top":false,"comment_ctime":1590122358,"is_pvip":false,"replies":[{"id":"82167","content":"开启了socket，等待连接，并且开启了多个反应推线程。你可以看下这个函数的具体实现。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1590930052,"ip_address":"","comment_id":219942,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590122358","product_id":100032701,"comment_content":"请问老师，这里的     <br>&#47;&#47; 开启监听    <br>tcp_server_start(tcpServer);     <br>应该怎么理解？<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496004,"discussion_content":"开启了socket，等待连接，并且开启了多个反应推线程。你可以看下这个函数的具体实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590930052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206744,"user_name":"Geek_Jolin","can_delete":false,"product_type":"c1","uid":1533299,"ip_address":"","ucode":"A32887F1DE4370","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jry2KckuIjxsMjErZNELxVibVYtKW4H9MDjnZeyJHsaU1IdCrU3ssFOTb0eXjnQ6ymvV76JmW6aozfaM3NIYDPA/132","comment_is_top":false,"comment_ctime":1586926310,"is_pvip":false,"replies":[{"id":"77707","content":"加强~","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587302777,"ip_address":"","comment_id":206744,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586926310","product_id":100032701,"comment_content":"Flag，一定要把这块硬骨头啃下来。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491888,"discussion_content":"加强~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587302777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203357,"user_name":"禾桃","can_delete":false,"product_type":"c1","uid":1477855,"ip_address":"","ucode":"9FE85C34A9E9E0","user_header":"https://static001.geekbang.org/account/avatar/00/16/8c/df/77acb793.jpg","comment_is_top":false,"comment_ctime":1586179104,"is_pvip":false,"replies":[{"id":"76789","content":"这在最后一个部分会讲到，主要是为了线程间同步用的，当event主线程处于轮询时，如果有新的连接建立，需要往主线程里丢一个消息，以便让其将新的连接加入处理。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1586679900,"ip_address":"","comment_id":203357,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586179104","product_id":100032701,"comment_content":"struct event_loop {<br>    int socketPair[2];<br>}<br><br>请问为什么要创建这两个AF_UNIX套接字？<br>使用的场景是什么？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490842,"discussion_content":"这在最后一个部分会讲到，主要是为了线程间同步用的，当event主线程处于轮询时，如果有新的连接建立，需要往主线程里丢一个消息，以便让其将新的连接加入处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586679900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201393,"user_name":"JDY","can_delete":false,"product_type":"c1","uid":1848474,"ip_address":"","ucode":"4B6F55332BE6DC","user_header":"https://static001.geekbang.org/account/avatar/00/1c/34/9a/1587bc6f.jpg","comment_is_top":false,"comment_ctime":1585760382,"is_pvip":false,"replies":[{"id":"75771","content":"头文件都在lib&#47;下面啊，你说的头文件是啥？？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1586075870,"ip_address":"","comment_id":201393,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585760382","product_id":100032701,"comment_content":"老师，你这个代码能不能把头文件也放上啊，要不然怎么跑？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490321,"discussion_content":"头文件都在lib/下面啊，你说的头文件是啥？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586075870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167400,"user_name":"满怀","can_delete":false,"product_type":"c1","uid":1483113,"ip_address":"","ucode":"EFAC662A37D684","user_header":"https://static001.geekbang.org/account/avatar/00/16/a1/69/0ddda908.jpg","comment_is_top":false,"comment_ctime":1577783992,"is_pvip":false,"replies":[{"id":"65479","content":"不要着急，仔细揣摩一下。event_loop就是一个无限事件循环处理线程，说穿了没啥神秘的....","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1578213666,"ip_address":"","comment_id":167400,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577783992","product_id":100032701,"comment_content":"老师，学到这里开始有些看不懂了，因为虽然之前的代码会引一些其他的lib，但是还算可以接收，这一次的代码，一下子有很多东西，event_loop等等。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479850,"discussion_content":"不要着急，仔细揣摩一下。event_loop就是一个无限事件循环处理线程，说穿了没啥神秘的....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578213666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147203,"user_name":"LIFE__MM","can_delete":false,"product_type":"c1","uid":1528910,"ip_address":"","ucode":"A9ED4D3CBCE797","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/4e/3d5de8e3.jpg","comment_is_top":false,"comment_ctime":1572837563,"is_pvip":false,"replies":[{"id":"57479","content":"github上回复了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1573281938,"ip_address":"","comment_id":147203,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572837563","product_id":100032701,"comment_content":"https:&#47;&#47;github.com&#47;froghui&#47;yolanda&#47;issues&#47;8<br>这个问题是运行服务器程序成功后，开启第一个客户端时报错Segmentation fault (core dumped)，我通过GDB找出来dump原因，但是第一次遇到这样的问题不知道如何解决，希望老师帮助一下，谢谢！","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473195,"discussion_content":"github上回复了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573281938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146328,"user_name":"LIFE__MM","can_delete":false,"product_type":"c1","uid":1528910,"ip_address":"","ucode":"A9ED4D3CBCE797","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/4e/3d5de8e3.jpg","comment_is_top":false,"comment_ctime":1572499250,"is_pvip":false,"replies":[{"id":"56594","content":"需要加入pthread这个lib。<br><br>参考 lib&#47;CMakeLists.txt下面的这段:<br>target_link_libraries(yolanda pthread)","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572572496,"ip_address":"","comment_id":146328,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572499250","product_id":100032701,"comment_content":"https:&#47;&#47;github.com&#47;froghui&#47;yolanda&#47;issues&#47;8<br>这是我在写完所有源文件后cmake make 收到的警告，一直无法解决，希望老师可以帮助一下，谢谢","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472802,"discussion_content":"需要加入pthread这个lib。\n\n参考 lib/CMakeLists.txt下面的这段:\ntarget_link_libraries(yolanda pthread)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572572496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145339,"user_name":"yusuf","can_delete":false,"product_type":"c1","uid":1170784,"ip_address":"","ucode":"9F32149B2ADDA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/60/eae432c6.jpg","comment_is_top":false,"comment_ctime":1572253912,"is_pvip":false,"replies":[{"id":"56609","content":"赞赞赞。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572573566,"ip_address":"","comment_id":145339,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572253912","product_id":100032701,"comment_content":"https:&#47;&#47;github.com&#47;linuxxiaoyu&#47;chap-27-homework","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472345,"discussion_content":"赞赞赞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572573566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144942,"user_name":"LIFE__MM","can_delete":false,"product_type":"c1","uid":1528910,"ip_address":"","ucode":"A9ED4D3CBCE797","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/4e/3d5de8e3.jpg","comment_is_top":false,"comment_ctime":1572108014,"is_pvip":false,"replies":[{"id":"56018","content":"我这里的版本比libevent要简单许多，在这个基础上你可以再拿一些libevent的功能来，读懂libevent是需要花一点时间的","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572238502,"ip_address":"","comment_id":144942,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572108014","product_id":100032701,"comment_content":"老师你好，最近学习libevent1.4版本的源码，想要依照源码写出一个简单的模型，但是遇到了很多问题，正好看到了您的课程就订阅了。请老师指导一下如何学习libevent源码并且造轮子写出一个简单的模型，我已经根据老师的课程已经开始仿照源码写出反应堆模型，但是对比libevent源码，感觉还是不太搞得定... 谢谢老师","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472178,"discussion_content":"我这里的版本比libevent要简单许多，在这个基础上你可以再拿一些libevent的功能来，读懂libevent是需要花一点时间的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572238502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141701,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571212580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571212580","product_id":100032701,"comment_content":"可能是我的环境设置问题","like_count":0},{"had_liked":false,"id":141699,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571212511,"is_pvip":false,"replies":[{"id":"55106","content":"整一个MR来。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571454413,"ip_address":"","comment_id":141699,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571212511","product_id":100032701,"comment_content":"我把代码从git上拉下来过后 第一行的#include &lt;lib&#47;acceptor.h&gt;应该改为#include&quot;lib&#47;acceptor.h&quot;","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470852,"discussion_content":"整一个MR来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571454413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140225,"user_name":"_你说了不算","can_delete":false,"product_type":"c1","uid":1185159,"ip_address":"","ucode":"212F890565FE5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/87/d22d8c3e.jpg","comment_is_top":false,"comment_ctime":1570854303,"is_pvip":false,"replies":[{"id":"55074","content":"因为如果客户不把TCP连接tear down掉，我们也不知道什么时候会继续进行数据的发送，有可能每隔2分钟发送一个heartbeat包，也是可能的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571451420,"ip_address":"","comment_id":140225,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1570854303","product_id":100032701,"comment_content":"“文稿中的这张图很好地解释了这个设计模式，可想而知的是，随着客户数的变多，fork 的子进程也越来越多，即使客户和服务器之间的交互比较少，这样的子进程也不能被销毁，一直需要存在。” 老师这里的子进程需要一直存在是为什么呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470306,"discussion_content":"因为如果客户不把TCP连接tear down掉，我们也不知道什么时候会继续进行数据的发送，有可能每隔2分钟发送一个heartbeat包，也是可能的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571451420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087945,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","nickname":"冰激凌的眼泪","note":"","ucode":"5DCB974667E93A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31741,"discussion_content":"客户端不断开就一直存在，除非客户端断开。这样的话，这个客户端交互少的话，这个进程就有点浪费","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570951926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139559,"user_name":"向东","can_delete":false,"product_type":"c1","uid":1200181,"ip_address":"","ucode":"9F621FBF115620","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/35/079d04c8.jpg","comment_is_top":false,"comment_ctime":1570678490,"is_pvip":false,"replies":[{"id":"54327","content":"第四篇会详细进行分解讲述。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570973680,"ip_address":"","comment_id":139559,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570678490","product_id":100032701,"comment_content":"老师能否对事件分发调用event_loop的event_activate方法执行callback的部分涉及回调部分讲详细点呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470001,"discussion_content":"第四篇会详细进行分解讲述。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570973680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139404,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1570627651,"is_pvip":false,"replies":[{"id":"54325","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570973461,"ip_address":"","comment_id":139404,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1570627651","product_id":100032701,"comment_content":"老师的代码 github上有 地址有同学已经发出来啦","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469930,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570973461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1081922,"avatar":"https://static001.geekbang.org/account/avatar/00/10/82/42/8b04d489.jpg","nickname":"刘丹","note":"","ucode":"66594D1C957E15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":29165,"discussion_content":"在哪里呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570751701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139384,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1570625374,"is_pvip":false,"replies":[{"id":"54324","content":"写完成之后，你可以打印一段话看看是否被回调到。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570973445,"ip_address":"","comment_id":139384,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570625374","product_id":100032701,"comment_content":"onWriteCompleted是在什么情况被回调的呢？在整个测试中似乎都没有被回调","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469920,"discussion_content":"写完成之后，你可以打印一段话看看是否被回调到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570973445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139174,"user_name":"刘丹","can_delete":false,"product_type":"c1","uid":1081922,"ip_address":"","ucode":"66594D1C957E15","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/42/8b04d489.jpg","comment_is_top":false,"comment_ctime":1570580858,"is_pvip":false,"replies":[{"id":"54321","content":"https:&#47;&#47;github.com&#47;froghui&#47;yolanda","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570973181,"ip_address":"","comment_id":139174,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570580858","product_id":100032701,"comment_content":"请问 lib 目录下的代码能贴出来给大家学习吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469830,"discussion_content":"https://github.com/froghui/yolanda","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570973181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139163,"user_name":"泰伦卢","can_delete":false,"product_type":"c1","uid":1141994,"ip_address":"","ucode":"FEA6B43C8D4FF9","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/ea/e03fec22.jpg","comment_is_top":false,"comment_ctime":1570579257,"is_pvip":true,"replies":[{"id":"54320","content":"https:&#47;&#47;github.com&#47;froghui&#47;yolanda","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570973176,"ip_address":"","comment_id":139163,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1570579257","product_id":100032701,"comment_content":"老师完整的代码可以贴出来吗","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469820,"discussion_content":"https://github.com/froghui/yolanda","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570973176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170784,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/60/eae432c6.jpg","nickname":"yusuf","note":"","ucode":"9F32149B2ADDA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":26490,"discussion_content":"https://github.com/froghui/yolanda","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570604211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003738,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/da/ed4803cb.jpg","nickname":"CCC","note":"","ucode":"2E254444098267","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25998,"discussion_content":"GitHub上有代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570583943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1622329,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c1/39/11904266.jpg","nickname":"Steiner","note":"","ucode":"232C1C75207A1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1003738,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/50/da/ed4803cb.jpg","nickname":"CCC","note":"","ucode":"2E254444098267","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":26219,"discussion_content":"请问地址??\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570588354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":25998,"ip_address":""},"score":26219,"extra":""}]}]}]}