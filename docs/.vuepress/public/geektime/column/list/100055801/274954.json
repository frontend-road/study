{"id":274954,"title":"拓展1｜纯文本编辑：使用 Vim 书写中英文文档","content":"<p>你好，我是吴咏炜。</p><p>今天是拓展篇的第 1 讲，我想带你对 Vim 的纯文本编辑技巧做一个专项突破。由于 Vim 是在欧美世界诞生的工具，贡献者中也是说英语的人居多，因而它对英文的支持要远远超出其他语言。所以今天，我们就深入讨论一下，如何使用 Vim 来进行纯文本编辑，特别是英文的文本编辑。</p><p>熟练掌握这一讲的内容，可以让你使用 Vim 书写中英文文档时都感到游刃有余。如果你有这个需求，一定要亲自动手尝试我提到的这些功能，加深自己的记忆。如果你觉得还需要多花一点时间，消化吸收前几讲的基础知识，也可以先阅读全文，把握要点，之后再回过头来深入学习。</p><h2>为什么不使用字处理器？</h2><p>你可能已经开始怀疑了，我为什么要使用 Vim 来进行文字编辑？用 Word 不香么？如果嫌 Word 贵，还有免费的 WPS 啊……</p><p>嗯，首先，Word 和 WPS 这些字处理器不是用来生成纯文本文件的。在处理纯文本文件上，它们反而会有诸多劣势，如：</p><ul>\n<li>只能本地使用，既不能在远程 Linux 服务器上运行，也不能用 SSH/SCP 的方式打开远程的文件（除非在服务器上启用 Samba 服务，但体验真的不好）</li>\n<li>分段和分行一般没有很好的区分</li>\n<li>如果存成纯文本的话，格式会全部丢失</li>\n</ul><p>最后一句话似乎是废话？还真不是，纯文本文件里面是可以存储格式的，但 Word 和其他字处理软件对于文本类型一般只能支持纯文本或富文本（Rich Text），而富文本虽然包含了格式信息，但却对直接阅读不友好。我想，没有人会去手写富文本文件吧。仍有一些带格式的文本文件比较适合手写，下面这些是其中较为流行的格式：</p><!-- [[[read_end]]] --><ul>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/TeX\">Tex</a> 和 <a href=\"https://zh.wikipedia.org/zh-cn/LaTeX\">LaTeX</a>，著名的特别适合写公式的文档系统，在数学和物理学界尤其流行。</li>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/DocBook\">DocBook</a>，基于 SGML/XML 的文档系统，可以生成多种不同的输出格式；大量开源软件的文档是用 DocBook 写的。</li>\n<li><a href=\"https://en.wikipedia.org/wiki/AsciiDoc\">AsciiDoc</a>，功能和 DocBook 等价、但使用非 XML 的简化语法的文档系统；有的国外技术书出版社接受作者用这种格式提交的稿件。</li>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/HTML\">HTML</a>，HTML 的阅读友好性一般，但胜在熟悉的人多。</li>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/Markdown\">Markdown</a>，Markdown 的阅读体验非常友好，因而它虽然最“年轻”却最流行。接下来，我们就介绍一下这种文件类型。</li>\n</ul><h3>Markdown 简介</h3><p>Markdown 是由 John Gruber（约翰 · 格鲁伯）在 2004 年发明的，它不是一种标准化的格式，存在着多个实现，功能也并不完备。尽管如此，由于它轻量、易写、易读，很快就在互联网上流行开了。在 GitHub 上，现在 README 文件一般都使用 Markdown。</p><p><img src=\"https://static001.geekbang.org/resource/image/0d/da/0dcb5396yy16e6bc19598c4984bb98da.png?wh=1458*832\" alt=\"FigX1.1\" title=\"GitHub 上的显示效果和 Markdown 源码\"></p><p>通过工具（很多是开源的，如 <a href=\"https://pandoc.org/\">pandoc</a>），Markdown 可以很容易地转成网页、PDF 等其他格式，同时也很适合以纯文本的形式阅读。而 HTML、DocBook 等格式实际上是不太适合人直接看源代码来阅读的。此外，极客时间，以及很多写作平台，用的也是 Markdown。</p><p>事实上，在处理代码相关的文档时，Word 还真没有 Markdown 方便。Word 的某些“自动”功能，如把直引号替换为弯引号，会对键入代码造成干扰。而对嵌入的代码进行语法加亮，则是 Word 里没有、而 Markdown 里非常成熟的功能了……</p><p>不过，我们今天的重点不是 Markdown，而是怎么使用 Vim 来编辑上面提到的所有文件格式。没有了图形界面的简单化处理，你可以把控文本的一切细节，但同时，Vim 的语法加亮和文字编辑功能本身，也会让你编辑起来非常得心应手。鉴于 Markdown 的优势，我们今天的例子还是会用 Markdown。这样，你学了这一讲之后，至少会知道怎么高效地给开源项目写个 README 文件。</p><h2>英文文本编辑</h2><p>考虑到 Markdown 等标准在中文处理的标准化上面有先天不足，我们先学习文档的主语言为英文的情况。我们可以先看一眼下面的截图：</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/4a/f5423a51e057de61b6fbe967954fcd4a.png?wh=1142*849\" alt=\"FigX1.2\" title=\"一个 README 文档的开头部分\"></p><p>然后对比一下它的 Markdown 源代码在 Vim 中的展示效果：</p><p><img src=\"https://static001.geekbang.org/resource/image/d6/df/d6d6f6fd30505cbe3241f82fc1a4c6df.png?wh=1142*938\" alt=\"FigX1.3\" title=\"该 README 文档开头部分的 Markdown 源码\"></p><p>我们明显可以看到，用 Vim 编辑 Markdown 文件时，虽然没有浏览器里显示得那么美观，但在使用等宽字体的前提下仍有着合适的语法加亮。</p><p>有两个细节值得关注一下：</p><ul>\n<li>跨行的那个链接加亮正常（我在至少两种其他环境下看到在方括号跨行时链接就无法得到正确的处理）。</li>\n<li>单词“LICENCE”在 Vim 展示时也使用了斜体（一对星号中间的内容在 Markdown 里就是使用斜体强调），并且如果光标移出该行，星号会被自动隐藏，更方便阅读。</li>\n</ul><p>需要注意，在网页中的换行位置和源代码中的换行位置是不一样的。源代码中存在真正的换行（上一讲提到的 LF 或 CR LF 构成的行尾结束符）；而转换到网页显示之后，单个换行只相当于空格字符，浏览器里一行应当显示多少字符仍然由浏览器的宽度和样式表来决定。这就是标准的 Markdown 的行为了。</p><h3>行宽设置</h3><p>英文文本文件的惯例仍然是一行放不超过 80 个字符，所以在源代码中仍然是有手工断行的。这个习惯是为阅读“源代码”优化的：可以看到，上面这个 Markdown 文件虽然在浏览器里查看效果更好，以纯文本的形式查看也是非常干干净净、毫无问题——只要你的编辑器列宽大于等于 80 就行了。</p><p>我们上一讲已经提到了文本宽度选项 <code>textwidth</code>。在对英文文本编辑时，这个选项的推荐数值通常是 72，比标准列宽 80 稍窄。这个设置有历史原因，但更重要的是，这也是经过历史验证对人阅读比较舒适的设定：既不会产生频繁的换行而打乱阅读节奏，也不会因为行太长而发生寻找下一行起始位置的困难。</p><p>被誉为“排版圣经”的 <em>The Elements of Typographic Style</em> 对行宽有这样的描述：</p><blockquote>\n<p>Anything between 45 to 75 characters is widely regarded as a satisfactory length of line for a single-column page.&nbsp;.&nbsp;.&nbsp;. The 66-character line .&nbsp;.&nbsp;. is widely regarded as ideal.</p>\n</blockquote><p>我们说列宽 72，是指最大值，而使用 72 产生的实际文本宽度，差不多就是落在 66 这个理想值附近了。一些编码规范，如 Python 的 <a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP 8</a>，也约定对文档内容的列宽数值应当是 72。<a href=\"https://en.wikipedia.org/wiki/Characters_per_line#In_programming\">大部分编码规范对代码宽度的约定稍宽松些，一般是 79 或 80。</a></p><h3>格式化选项</h3><p>我们上一讲已经提到格式化选项 <code>formatoptions</code>（缩写 <code>fo</code>），今天我们来稍微展开一下，看看这些格式化选项对我们写文档有什么样的影响。</p><p>在 Vim 里，<code>fo</code> 选项的默认值是 <code>tcq</code>。根据 Vim 的帮助文档，它们的含义是：</p><ul>\n<li><code>t</code>：使用 <code>textwidth</code> 自动回绕文本。</li>\n<li><code>c</code>：使用 <code>textwidth</code> 自动回绕注释，自动插入当前注释前导符。</li>\n<li><code>q</code>：允许 <code>gq</code> 排版时排版注释。</li>\n</ul><p>不过，根据你编辑的内容的语法，这个选项内容可能会发生变化。如运行支持文件里的 ftplugin/c.vim 里有下面的语句：</p><pre><code class=\"language-vim\">\" Set 'formatoptions' to break comment lines but not other lines,\n\" and insert the comment leader when hitting &lt;CR&gt; or using \"o\".\nsetlocal fo-=t fo+=croql\n</code></pre><p>即，正常输入非注释内容时，不进行回绕。但对注释还是要使用回绕的。另外几个我们还没检查过的选项是：</p><ul>\n<li><code>r</code>：在插入模式按回车时，自动插入当前注释前导符。</li>\n<li><code>o</code>：在普通模式按 <code>o</code> 或者 <code>O</code> 时，自动插入当前注释前导符。</li>\n<li><code>l</code>：插入模式不分行: 当一行已经超过 <code>textwidth</code> 时，插入命令不会自动排版。</li>\n</ul><p>上一讲我们用到的 <code>n</code> 则是：</p><ul>\n<li><code>n</code>：在对文本排版时，识别编号的列表。实际上，这里使用了 <code>formatlistpat</code> 选项，所以可以使用任何类型的列表。出现在数字之后的文本缩进距离被应用到后面的行。数字之后可以有可选的 <code>.</code>、<code>:</code>、<code>)</code>、<code>]</code> 或者 <code>}</code>。注意 <code>autoindent</code> 也必须同时置位。</li>\n</ul><p><code>formatlistpat</code> 的缺省值是 <code>^\\s*\\d\\+[\\]:.)}\\t ]\\s*</code>。也就是说，起始处有可选的空格，然后是至少一个数字，之后必须跟 <code>.</code>、<code>:</code>、<code>)</code>、<code>]</code>、<code>}</code>、制表符或空格中的一个，随后是可选的若干空格。</p><p>运行支持文件里的 ftplugin/markdown.vim 会对 <code>formatlistpat</code> 做额外的设定，使得 Vim 不仅可以识别数字列表，也能识别用 <code>-</code> 等字符开始的无序列表。有兴趣的同学可以自己分析一下。</p><p>如果你希望有比较接近字处理器的体验，不用自己手工断行，下面两个选项对英文文本编辑比较重要：</p><ul>\n<li><code>w</code>：拖尾的空格指示下一行继续同一个段落。而以非空白字符结束的行结束一个段落。</li>\n<li><code>a</code>：自动排版段落。每当文本被插入或者删除时，段落都会自动进行排版。</li>\n</ul><p>这两个选项结合的效果，会让在 Vim 里编辑的效果在某种程度上接近字处理器：你会看到在某行增删内容会自动导致下面的行跟着卷动，你可以通过下面的动图看下效果（我使用了 Vim 的 <code>listchars</code> 选项来加亮行尾空格和行尾结束符）：</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/3e/1d015285b9968f41881ace309d944a3e.gif?wh=1360*854\" alt=\"FigX1.4\" title=\"对使用了 a 和 w 两个 formatoptions 的文本进行编辑\"></p><h3>段中不换行的文本</h3><p>到现在为止，我们讨论的英文文本编辑，基本都是行尾结束符不代表真正分行的情况。这种方式最常见，但也存在例外，如有些网站不使用标准的 Markdown 规则，把行尾结束符直接就当成换行了。在这样的情况下，我们就不应该在一段中间手工插入换行符。不过，由于这种方式不是 Vim 的“自然”处理方式，我们需要修改一些选项和处理习惯来应对这种情况。</p><p>首先，Vim 在默认配置下会在窗口宽度不足时自动折行显示，但不会对折行的位置进行特殊挑选，很可能会在单词的中间折行。我们可以设置选项 <code>linebreak</code>，告诉 Vim 要在 <code>breakat</code> 的字符上才可以折行。默认的 <code>breakat</code> 设置包含了空白字符和英文标点符号，因此直接可以在英文环境中进行使用。下图展示了 <code>linebreak</code> 的效果：</p><p><img src=\"https://static001.geekbang.org/resource/image/32/3f/323652ccf7757cdbae4dc6b9b6ff913f.gif?wh=1366*718\" alt=\"FigX1.5\" title=\"设置 linebreak 的效果\"></p><p>在这种模式下进行编辑时，另外一个要注意的问题是 <code>j</code> 和 <code>k</code> 移动的是一个物理行，而非屏幕行。这和很多编辑器的行为是不同的。要让光标一次移动一个屏幕行，需要的按键是 <code>gj</code> 和 <code>gk</code>。如果你希望 <code>&lt;Up&gt;</code> 和 <code>&lt;Down&gt;</code> 的行为跟主流的编辑器一致，可以考虑以下的设定：</p><pre><code class=\"language-vim\">\" 修改光标上下键一次移动一个屏幕行\nnnoremap &lt;Up&gt;        gk\ninoremap &lt;Up&gt;   &lt;C-O&gt;gk\nnnoremap &lt;Down&gt;      gj\ninoremap &lt;Down&gt; &lt;C-O&gt;gj\n</code></pre><p>最后，如果之前换行符不代表分段，现在你希望换行即分段，你可以用 <code>J</code>（代表 join，连接）命令把多行重新连接成一行。这个命令在某种程度上可以看作是 <code>gq</code> 的逆命令。由于这个命令根据字符的类型来决定是否插入空格和插入几个空格（参考 <a href=\"https://yianwillis.github.io/vimcdoc/doc/options.html#'joinspaces'\"><code>:help 'joinspaces'</code></a>），它并不能简单地用替换命令来代替。如果考虑最简单的情况（<code>:set nojoinspaces</code>），那至少在 <code>formatoptions</code> 中含有 <code>w</code> 时，我们可以用下面的替换命令来连接同一段的所有行:</p><pre><code class=\"language-vim\">:%s/\\([^\\n]\\)\\s\\+\\n\\s*\\([^\\n]\\)/\\1 \\2/\n</code></pre><p>事实上，使用 <code>joinspaces</code> 和 Markdown 的双行尾空格代表换行是潜在会冲突的。在 Markdown 中使用 <code>w</code> 时，应当使用 <code>nojoinspaces</code>。</p><h3>模式行</h3><p>到现在为止，我们讨论的好些选项，不仅不适合作为全局选项，也不适合作为某一文件类型的选项，而更适合用作单个文件的选项。Vim 也确实提供了这样的功能，叫做模式行（<a href=\"https://yianwillis.github.io/vimcdoc/doc/options.html#modeline\"><code>:help modeline</code></a>），能自己使用 <code>:setlocal</code> 仅对当前缓冲区设置本地选项。这个功能本身在帮助文件里说得挺清楚，我就不重复了。</p><p>在上面图里的那个文本文件中，我使用了下面的模式行：</p><pre><code class=\"language-vim\">vim:set et sts=2 tw=68 com-=mb\\:* com+=fb\\:* fo=tcqaw:\n</code></pre><p>上面这个模式行，除了设定了我们讨论过的 <code>et</code> 扩展 tab 为空格选项、<code>sts</code> 软 tabstop 选项、<code>tw</code> 行宽选项和 <code>fo</code> 格式化选项外，对 <code>comments</code>（缩写 <code>com</code>）选项进行了调整，不用星号作为注释中间部分的开始（<code>mb</code>），而用星号作为一个列表的开始（<code>fb</code>）。关于 <code>comments</code> 选项的详细解释可以参看帮助文档 <a href=\"https://yianwillis.github.io/vimcdoc/doc/change.html#format-comments\"><code>:help format-comments</code></a>，我这儿就不展开了。</p><h3>拼写检查</h3><p>写英文时启用自动拼写检查，这是一个写作的好习惯。哪怕你英语很好，也可能因为疏忽而拼错。Vim 从版本 7 开始，就内置了拼写检查的功能，可以通过选项 <code>spell</code> 来打开。</p><p><img src=\"https://static001.geekbang.org/resource/image/a8/48/a86c3c425993333ecb38dd5c7205f148.png?wh=1142*304\" alt=\"FigX1.6\" title=\"开启了拼写检查的 Vim\"></p><p>上面我存心写错了一个地方（“userz”），被 Vim 用红波浪线标了出来。标蓝波浪线的是 Vim 提醒我，句首一般需要首字母大写（此处没有错误）。另外，可以注意到单个换行是不会被 Vim 当作一段结束的，因此行首的“right”和“promise”等单词不会被 Vim 当成有拼写问题。</p><p>在 macOS 和 Windows 的图形界面 Vim 里，右键默认就可以弹出拼写纠正菜单，跟大部分其他有拼写检查功能的软件差不多。在 Linux 上，右键默认是 xterm 标准的扩展选择区域的行为。要让右键在 Linux 下也能弹出菜单，你需要手工在 vimrc 配置文件里加入：</p><pre><code class=\"language-vim\">set mousemodel=popup_setpos\n</code></pre><p>这可以算是图形界面的 Vim 跟终端 Vim 比起来的明显优势了：终端 Vim 显示不了波浪线，对右键的响应也通常有问题。在终端 Vim 里，你可能就需要去记拼写检查的命令了（见帮助 <a href=\"https://yianwillis.github.io/vimcdoc/doc/spell.html#spell\"><code>:help spell</code></a>）。</p><p>Vim 拼写检查的默认语言是英语。对不同语言的支持，我们可以使用 Vim 选项 <code>spelllang</code> 来设定。比如，如果你希望按照英式英语的拼写，那你可以设置：</p><pre><code class=\"language-vim\">set spelllang=en_gb\n</code></pre><p>这样一来，Vim 就会把非英式英语的拼写方式用绿色波浪线（当然，这和色彩方案有关）标出来。在图形界面 Vim 里，你同样可以很方便地用右键点击来更改：</p><p><img src=\"https://static001.geekbang.org/resource/image/58/8a/58fcc5168d7dae4d2b59d05327a0068a.png?wh=1142*556\" alt=\"FigX1.7\" title=\"标出不在 spelllang 里面的拼写方式和右键菜单\"></p><p>你如果希望使用美式英语，当然使用 <code>:set spelllang=en_us</code> 就可以了。同时使用英式和美式，可以用 <code>:set spelllang=en_gb,en_us</code>。如果任何英语拼写都能接受，那使用默认值或 <code>en</code> 就行。</p><p>作为东亚文字的特殊情况，如果你希望所有的东亚字符不被标成拼写错误的话，可以在 <code>spelllang</code> 选项里使用特殊值 <code>cjk</code>。作为中国人，我们可能会需要这么用：</p><pre><code class=\"language-vim\">set spelllang+=cjk\n</code></pre><h3>拼写完成</h3><p>我们之前提到了 Vim 支持用一个字典文件来进行拼写完成，你可以在帮助 <a href=\"https://yianwillis.github.io/vimcdoc/doc/options.html#'dictionary'\"><code>:help 'dictionary'</code></a> 里找到相关的信息。不过，这种方式需要你手工去寻找一个字典文件，并在 vimrc 里进行配置，不那么方便。更简单的方式，是<strong>先启用拼写检查</strong>，然后正常使用拼写完成的快捷键 <code>&lt;C-X&gt;&lt;C-K&gt;</code> 即可。如果你完整拼出了单词，但 Vim 提示拼错了，你也可以使用快捷键 <code>&lt;C-X&gt;s</code> 来使用和查看拼写建议。</p><p><strong>注意：</strong>虽然 <code>&lt;C-S&gt;</code> 在图形界面 Vim 里可以使用，但终端（不是 Vim）可能会解释 <code>&lt;C-S&gt;</code> 为特殊控制字符，因而我们一般不使用 <code>&lt;C-X&gt;&lt;C-S&gt;</code>。如果你发现一不小心键入 <code>&lt;C-S&gt;</code> 导致终端表现得像失去响应一样，一般可以用 <code>&lt;C-Q&gt;</code> 来恢复。</p><h2>中文文本编辑</h2><p>跟英文文本编辑类似，中文处理同样有段中有断行和段中无断行两种方式。如果段中有断行，中文的主要处理麻烦是在转换成 HTML 或其他格式时通常不应该把行尾结束符转换成空格。我目前测下来，GitHub 的 Markdown 能有这样的合理行为，但很多其他工具，如 pandoc，则没有对中文作这样的特殊处理。因此，中文文档还是不在段中进行断行更保险一些。</p><p>这两种文本组织方式 Vim 都是能处理的，其方式和英文文本编辑差不多，差别主要表现在下面两点。</p><p>首先，英文段中不分行时我们推荐使用 <code>linebreak</code> 选项，但中文段中不分行时我们则不推荐启用这个选项。因为让 Vim 挑空格位置来折行，反而会让中文文本显得乱、不好看。下面的图展示了区别：</p><p><img src=\"https://static001.geekbang.org/resource/image/86/24/868bce15c9b6e7d518d0407bc9acb724.png?wh=1142*392\" alt=\"FigX1.8\" title=\"使用选项 nolinebreak 的效果\"></p><p><img src=\"https://static001.geekbang.org/resource/image/d2/2b/d2f33880359fb244ab51d6bd1e49d62b.png?wh=1142*392\" alt=\"FigX1.9\" title=\"使用选项 linebreak 的效果\"></p><p>其次，Vim 在处理中日韩（CJK）文字时在格式化选项 <code>formatoptions</code> 里是有些特殊设置的。我们重点关注下面 4 个：</p><ul>\n<li><code>m</code>：可以在任何值高于 255 的多字节字符上分行。这对 CJK 文本尤其有用，因为每个字符都是单独的单位。</li>\n<li><code>M</code>：在连接行时，不要在多字节字符之前或之后插入空格。优先于 <code>B</code> 标志位。</li>\n<li><code>B</code>：在连接行时，不要在两个多字节字符之间插入空格。有 <code>M</code> 标志位时无效。</li>\n<li><code>]</code>：严格遵循 <code>textwidth</code> 选项。当设定这个标志时，除非断行禁则使得行长不可能保留在限定的文本宽度以内，行长不允许超出限定的文本宽度。这个选项主要用于 CJK 文字，并且仅在 <code>encoding</code> 是 <code>utf-8</code> 时才生效。</li>\n</ul><p>如果文档的主语言是中文（或日文、韩文），那 <code>m</code> 肯定是需要设置的，这样才能在中文之中断行。<code>M</code> 和 <code>B</code> 一般我们也会设置其中一个，取决于行文规则，在中文和西文字符之间是否手工插一个空格。如果不插空格，那就用 <code>M</code>；如果用空格（就像本文一样），那就用 <code>B</code>。由于 Vim 不区别汉字和汉字标点，使用 <code>B</code> 时会导致全角标点前后出现空格，我一般仍然使用 <code>M</code> 而不是 <code>B</code>。</p><p>标志 <code>]</code> 是和 CJK 断行规则一起在 Vim 8.2.0901 这个版本引入的。你可以通过下面的截图看下这个标志的效果：</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/3c/ce422850005012506678c34ea9a9c93c.png?wh=1236*1236\" alt=\"FigX1.10\" title=\"不同 Vim 版本和选项对中文排版的影响\"></p><p>换句话说，默认未使用 <code>]</code> 标志时，Vim 的行为是允许 CJK 标点符号突出到 <code>textwidth</code> 限定的宽度以外；使用 <code>]</code> 标志则不允许这样的特殊处理。你可以按照个人喜好和文本类型来酌情使用这个选项。</p><h2>内容小结</h2><p>在这一讲，我们讨论了使用 Vim 进行文本编辑的一些要点，重点是对 Markdown 文件进行编辑。学过这讲之后，我们应当记住：</p><ul>\n<li>中英文文本编辑通常有段中换行和段中不换行两种惯例，英文文本使用段中换行居多，而中文文本使用不换行的比例要高得多。</li>\n<li>Vim 的 <code>textwidth</code> 选项用来设置一行文本的最大（半角）字符数，对于英文，72 是一个常见的数值。</li>\n<li>Vim 的 <code>formatoptions</code> 选项可以设置很多如何对文本进行格式化的标志，很多文件格式插件（ftplugin）会对其进行设置。</li>\n<li>模式行可以用来记录只对单个文件生效的 Vim 选项；如果文件有特殊的格式化要求，可以写在模式行里。</li>\n<li>Vim 提供了拼写检查和拼写完成功能，可以用于英文等字母文字。</li>\n<li>如果使用段中不换行的惯例，则英文文本应当使用 <code>linebreak</code> 选项，但中文文本不应当使用该选项。</li>\n<li>在处理中文文本时，<code>m</code>、<code>M</code>、<code>B</code> 和 <code>]</code> 是可能有用的特殊 <code>formatoptions</code>，应当根据实际需要使用。</li>\n</ul><p>本讲我们的配置文件有几处改动，对应的标签是 <code>x1-unix</code> 和 <code>x1-windows</code>。</p><h2>课后练习</h2><p>请尝试写一个小小的英文 README.md，内容不限，可以从其他地方复制。要求是：</p><ol>\n<li>内容除标题外至少三段，每段至少两行</li>\n<li>使用模式行控制选项</li>\n<li>段中分行，启用自动格式化但不使用行尾空格的方式</li>\n<li>尝试在该文件中嵌入代码</li>\n<li>想一想，为什么 <code>a</code> 选项一般和 <code>w</code> 选项一起使用</li>\n</ol><p>你在写 README 文件，或者其他文本文档时，还遇到过其他问题吗？请及时和我交流。你也可以把今天这一讲的内容，分享给身边其他需要编辑纯文本文件的朋友。</p><p>我是吴咏炜，我们下一讲再见！</p>","neighbors":{"left":{"article_title":"16｜终端和 GDB 支持：不离开 Vim 完成开发任务","id":283355},"right":{"article_title":"拓展2｜C 程序员的 Vim 工作环境：C 代码的搜索、提示和自动完成","id":277058}},"comments":[{"had_liked":false,"id":300903,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1625448470,"is_pvip":false,"replies":[{"id":"109138","content":"不会啊，新点的 Vim 版本只对注释和字符串字面量中的拼写错误进行加亮的。语法加亮文件中为此特别标注哪些部分需要拼写检查（用“@Spell”）。<br><br>另外，我是映射了快捷键来打开和关闭拼写检查的，类似于：<br><br>  nmap &lt;silent&gt; &lt;F7&gt;      :setlocal spell!&lt;CR&gt;<br>  imap &lt;silent&gt; &lt;F7&gt; &lt;C-O&gt;:setlocal spell!&lt;CR&gt;","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1625668914,"ip_address":"","comment_id":300903,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1625448470","product_id":100055801,"comment_content":"拼写检查这个，老师是开启的吗，开启后，代码中很多原生关键字都会显式下划线提示错误，造成干扰，这个问题是怎么解决的呢，因为这个原因所以一直没开启这个。","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522847,"discussion_content":"不会啊，新点的 Vim 版本只对注释和字符串字面量中的拼写错误进行加亮的。语法加亮文件中为此特别标注哪些部分需要拼写检查（用“@Spell”）。\n\n另外，我是映射了快捷键来打开和关闭拼写检查的，类似于：\n\n  nmap &amp;lt;silent&amp;gt; &amp;lt;F7&amp;gt;      :setlocal spell!&amp;lt;CR&amp;gt;\n  imap &amp;lt;silent&amp;gt; &amp;lt;F7&amp;gt; &amp;lt;C-O&amp;gt;:setlocal spell!&amp;lt;CR&amp;gt;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625668914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253103,"user_name":"leaf","can_delete":false,"product_type":"c1","uid":1060139,"ip_address":"","ucode":"B2CFF00AFA7494","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdzXiawss5gGiax48CJGAJpha4pJksPia7J7HsiatYwjBA9w1bkrDicXfQz1SthaG3w1KJ2ibOxpia5wfbQ/132","comment_is_top":false,"comment_ctime":1602599453,"is_pvip":false,"replies":[{"id":"92481","content":"如果终端里，好像没什么好办法的。图形界面的Vim经常带输入法支持，在一定程度上可以帮你切输入法，但也不完美。按我的经验，Windows下的图形Vim，及MacVim配特定输入法（如鼠须管），可以改善这一问题。但确实，对中文输入总体不够友好。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1602634392,"ip_address":"","comment_id":253103,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1602599453","product_id":100055801,"comment_content":"请问老师, 插入模式下输中文, 退出后又要切回因为模式, 很麻烦, 有什么自动且输入法的标准方法吗?","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506974,"discussion_content":"如果终端里，好像没什么好办法的。图形界面的Vim经常带输入法支持，在一定程度上可以帮你切输入法，但也不完美。按我的经验，Windows下的图形Vim，及MacVim配特定输入法（如鼠须管），可以改善这一问题。但确实，对中文输入总体不够友好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602634392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1060139,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdzXiawss5gGiax48CJGAJpha4pJksPia7J7HsiatYwjBA9w1bkrDicXfQz1SthaG3w1KJ2ibOxpia5wfbQ/132","nickname":"leaf","note":"","ucode":"B2CFF00AFA7494","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313789,"discussion_content":"老师用过vim-xkbswitch这个插件吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603092280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2771454,"avatar":"","nickname":"Geek_810c35","note":"","ucode":"3C2F5E70B70086","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1060139,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdzXiawss5gGiax48CJGAJpha4pJksPia7J7HsiatYwjBA9w1bkrDicXfQz1SthaG3w1KJ2ibOxpia5wfbQ/132","nickname":"leaf","note":"","ucode":"B2CFF00AFA7494","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562677,"discussion_content":"我用Ubuntu系统，用vim-xkbswitch很好用，要额外安装libglib2.0-dev\n参考：https://github.com/lyokha/g3kb-switch\nhttps://github.com/lyokha/vim-xkbswitch#basic-configuration","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649861714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":313789,"ip_address":""},"score":562677,"extra":""}]}]},{"had_liked":false,"id":249778,"user_name":"瀚海星尘","can_delete":false,"product_type":"c1","uid":1024461,"ip_address":"","ucode":"90F418299EA3BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","comment_is_top":false,"comment_ctime":1600788188,"is_pvip":false,"replies":[{"id":"91584","content":"魔鬼在细节……<br><br>fo 里有 l，只是对于 C 语言是默认的，对于其他的，不一定。可以在打开文档后用 :verbose set fo? 检查确认一下。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1600871028,"ip_address":"","comment_id":249778,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1600788188","product_id":100055801,"comment_content":"原以为就写写文档，应该会很简单，没想到有这么多配置。之前也好奇72是怎么来的，今天算是知道了。另外，那个分行的问题我之前也有困惑，原来是 l 选项默认设置的。","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506011,"discussion_content":"魔鬼在细节……\n\nfo 里有 l，只是对于 C 语言是默认的，对于其他的，不一定。可以在打开文档后用 :verbose set fo? 检查确认一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600871028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024461,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","nickname":"瀚海星尘","note":"","ucode":"90F418299EA3BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308825,"discussion_content":"老师，都搞定了。。检查后发现少了 a，然后我一直用 p 添加文本。。。魔鬼在细节。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601090764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243704,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1598253214,"is_pvip":false,"replies":[{"id":"89800","content":"“在 .vimrc 中设置了 textwidth，当一行的文字超过了 textwidth 的设定值就会自动回转到新的一行”——是这样，但需要 formatoptions 选项里设了合适的数值，确保 formatoptions 里包含了 tm，确保你编辑的缓冲区的 textwidth 确实是你要的数值。<br><br>“formatoptions 那里，上节课，我记得老师用的是 m 选项而不是 n”——m 和 n 是两个完全不同意义的东西：m 用来支持中文中间折行，n 用来支持列表。<br><br>“看网上一些帖子， markdown 还可以和 tagbar 配合着来使用”——这个用法我之前倒不知道，配了下 .ctags ，确实可以出来效果，虽然略有点勉强。<br><br>写 Markdown，还是把 Markdown Preview 配出来吧。那个效果还是很漂亮的。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1598282614,"ip_address":"","comment_id":243704,"utype":1}],"discussion_count":9,"race_medal":0,"score":"1598253214","product_id":100055801,"comment_content":"感觉 markdown 还是很实用的。看了两遍，跟着老师的描述操作了一遍，有些地方还是不是特别清楚<br><br>按我的理解，在 .vimrc 中设置了 textwidth，当一行的文字超过了 textwidth 的设定值就会自动回转到新的一行？但是调了好久，一行的长度都是vim窗口的长度。<br><br>formatoptions 那里，上节课，我记得老师用的是 m 选项而不是 n ？想要有 markdown 下的列表的换行自动缩进功能，需要在老师的配置基础上更改吗？我试了一下，好像这个功能也出不来<br><br>看网上一些帖子， markdown 还可以和 tagbar 配合着来使用，不知道效果有没有提升。<br><br>平时 markdown 用的比较多，但都是用像 macdown 那种图形编辑器。很想尝试下用 vim，但鉴于自己对 vim 的熟悉程度，还需要多多尝试😂","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504367,"discussion_content":"“在 .vimrc 中设置了 textwidth，当一行的文字超过了 textwidth 的设定值就会自动回转到新的一行”——是这样，但需要 formatoptions 选项里设了合适的数值，确保 formatoptions 里包含了 tm，确保你编辑的缓冲区的 textwidth 确实是你要的数值。\n\n“formatoptions 那里，上节课，我记得老师用的是 m 选项而不是 n”——m 和 n 是两个完全不同意义的东西：m 用来支持中文中间折行，n 用来支持列表。\n\n“看网上一些帖子， markdown 还可以和 tagbar 配合着来使用”——这个用法我之前倒不知道，配了下 .ctags ，确实可以出来效果，虽然略有点勉强。\n\n写 Markdown，还是把 Markdown Preview 配出来吧。那个效果还是很漂亮的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598282614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1256496,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","nickname":"pyhhou","note":"","ucode":"31EF8D50CF91A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300946,"discussion_content":"老师说的 Markdown Preview 是不是这个插件\n\nhttps://github.com/iamcco/markdown-preview.nvim\n\n装上后是多了一个预览的功能，现在纠结的是两个编辑上的问题，一个是上面说的自动回转。另外一个是回车后的列表自动缩进，就是你列出 - 起始的一行后，回车后自动出现 - 前缀。我用 vim 打开 .md 后缀名的文件，然后在命令行模式下运行 :set formatlistpat?\n\n得到：\n\nformatlistpat=^\\s*\\d\\+\\.\\s\\+\\|^[-*+]\\s\\+\\|^\\[^\\ze[^\\]]\\+\\]:\n\n看这个结果，应该是支持 - 的自动缩进？不知道我是否有其他的配置项没有考虑到？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598334622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1256496,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","nickname":"pyhhou","note":"","ucode":"31EF8D50CF91A5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301058,"discussion_content":"formatlistpat 是用来识别列表，来进行合理缩进，而 **不是** 插入列表前导符的。你要的功能可以用这个插件：\n\nhttps://github.com/dkarter/bullets.vim","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598375001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300946,"ip_address":""},"score":301058,"extra":""},{"author":{"id":1256496,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","nickname":"pyhhou","note":"","ucode":"31EF8D50CF91A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":301520,"discussion_content":"了解了，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598543422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301058,"ip_address":""},"score":301520,"extra":""}]},{"author":{"id":1256496,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","nickname":"pyhhou","note":"","ucode":"31EF8D50CF91A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300944,"discussion_content":"试了一下，在命令行模式下输入 set textwidth? 和 set formatoptions?\n\n返回分别是 textwidth=72，以及 formatoptions=mMtcqln\n\n看了一下帮助文档，不知道是不是因为我写的是中文，而且里面没有空格以及英文标点，所以 vim 不知道在哪断的原因？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598332259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1256496,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","nickname":"pyhhou","note":"","ucode":"31EF8D50CF91A5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301054,"discussion_content":"fo 里有 m 就可以在中文中间断行的。我刚测了一下，在 tw=72 fo=mMtcqln ft=markdown 下断行没有问题。我的当前环境和一个 vim --clean 的干净环境下都可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598374100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300944,"ip_address":""},"score":301054,"extra":""},{"author":{"id":1256496,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","nickname":"pyhhou","note":"","ucode":"31EF8D50CF91A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":301531,"discussion_content":"谢谢老师，已经找到问题了。\n\n如果用 vim 打开一个 markdown 文件，vim 是不会对文件中已经存在的文字进行断行（之前误认为 vim 也会自动对这些信息进行断行）。如果要对已经存在的文字断行，需要 visual 模式下选择要断行的部分。然后用 gq 或者 gw 命令，后者表示是只使用 vim 自带的算法进行格式化而不依赖于任何外部配置。对于新编写的文字，vim 是可以对其断行。以上这些，主要是参考了下面这篇文章：\n\nhttps://agilesysadmin.net/how-to-manage-long-lines-in-vim/\n\n有一个地方很有意思，当编入的是中文，vim 右下角行号显示的是一个类似于范围的样式（eg. 103-71）。看了一下这里的 103 和 71 都不是我们通常所认为的 “字” 的数量。感觉应该是和 UTF-8 或其它编码方式下对应的字节数量有关？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598547434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301054,"ip_address":""},"score":301531,"extra":""},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1256496,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","nickname":"pyhhou","note":"","ucode":"31EF8D50CF91A5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301550,"discussion_content":"\n看来你忽视了这个选项的说明：\n\nl：插入模式不分行: 当一行已经超过 textwidth 时，插入命令不会自动排版。\n\n右下角显示的应该是字节数和列号。一个中文字一般占三字节、两列。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598574614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301531,"ip_address":""},"score":301550,"extra":""}]}]},{"had_liked":false,"id":242733,"user_name":"YouCompleteMe","can_delete":false,"product_type":"c1","uid":1232859,"ip_address":"","ucode":"89B5A75DA85E0A","user_header":"https://static001.geekbang.org/account/avatar/00/12/cf/db/9693d08f.jpg","comment_is_top":false,"comment_ctime":1597826181,"is_pvip":false,"replies":[{"id":"89524","content":"一般就是填你这个文档跟通用设置不同的地方。一样的就不用填。常见的就是上面这些，尤其 et、ts、tw 这种设置。偶尔如果 Vim 认不出你的文件类型，ft 也可以填。","user_name":"作者回复","user_name_real":"吴咏炜","uid":"1645639","ctime":1597833399,"ip_address":"","comment_id":242733,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597826181","product_id":100055801,"comment_content":"模式行有什么常用的组合吗，比如示例README里的 ”：<br>&lt;!--<br>vim:autoindent:expandtab:formatoptions=tcqlmn:textwidth=72:<br>--&gt;","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504084,"discussion_content":"一般就是填你这个文档跟通用设置不同的地方。一样的就不用填。常见的就是上面这些，尤其 et、ts、tw 这种设置。偶尔如果 Vim 认不出你的文件类型，ft 也可以填。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597833399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242636,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1597801316,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597801316","product_id":100055801,"comment_content":"学习了.<br><br>虽然平常也在用vim写markdown,但是没这么讲究过,都是自己手动处理一些边界情况.<br>之前也从没有想过在这个方向上折腾.<br>等有时间了,我再参考本文把我的配置调整一下.<br><br>说起vim写markdown,我用的是插件[markdown-preview.nvim](https:&#47;&#47;github.com&#47;iamcco&#47;markdown-preview.nvim)来实时预览.<br>不知道其他小伙伴有没有更好的推荐.<br>","like_count":0,"discussions":[{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315383,"discussion_content":"我的markdown相关配置:\n\n&#34;&#34;&#34;&#34;&#34;&#34; Markdown相关插件安装\n&#34; [[ 跳转上一个标题\n&#34; ]] 跳转下一个标题\n&#34; zr 打开下一级折叠\n&#34; zR 打开所有折叠\n&#34; zm 折叠当前段落\n&#34; zM 折叠所有段落\n&#34; :Toc 显示目录\nPlug &#39;godlygeek/tabular&#39;\nPlug &#39;plasticboy/vim-markdown&#39;\nPlug &#39;iamcco/mathjax-support-for-mkdp&#39;\nPlug &#39;iamcco/markdown-preview.vim&#39;\n&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;\n\n&#34;&#34;&#34;&#34;&#34;&#34; Markdown相关插件配置\n&#34; :help vim-markdown\nlet g:vim_markdown_math = 1\nlet g:vim_markdown_folding_disabled = 1\nlet g:vim_markdown_toc_autofit = 1\nlet g:vim_markdown_toml_frontmatter = 1\nlet g:vim_markdown_frontmatter = 1\nlet g:vim_markdown_json_frontmatter = 1\nlet g:vim_markdown_new_list_item_indent = 2\nlet g:vim_markdown_autowrite = 1\n&#34; 在超链接处, 按ge将以新标签页的形式打开链接\nlet g:vim_markdown_edit_url_in = &#39;tab&#39;\nlet g:vim_markdown_emphasis_multiline = 0\n&#34;let g:vim_markdown_no_extensions_in_markdown = 1\n&#34;let g:vim_markdown_auto_extension_ext = &#39;txt&#39;\n\n&#34; :help markdown-preview\nlet g:mkdp_path_to_chrome = &#34;open -a Google\\\\ Chrome&#34;\nnmap ,p :MarkdownPreview<CR>\nnmap ,pp <Plug>StopMarkdownPreview\n\n&#34; :help syntastic-markdown\n&#34; 1. 通过命令行检查和自动修正markdown文件\n&#34; npm install -g markdownlint-cli\n&#34; 检查: markdownlint foo.md\n&#34; 修复: markdownlint -f foo.md\n&#34; 2. 通过syntastic和mdl在编辑时进行检查, 无自动修复功能\n&#34; sudo gem install mdl\n&#34; mdl foo.md\n&#34; mdl -l\n&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603268028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}