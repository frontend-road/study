{"id":720426,"title":"04｜字符串：对号入座，字符串其实没那么可怕！","content":"<p>你好，我是Mike，今天我们来认识一下Rust中和我们打交道最频繁的朋友——字符串。</p><p>这节课我们把字符串单独拿出来讲，是因为字符串太常见了，甚至有些应用的主要工作就是处理字符串。比如 Web开发、解析器等。而Rust里的字符串内容相比于其他语言来说还要多一些。是否熟练掌握Rust的字符串的使用，对Rust代码开发效率有很大影响，所以这节课我们就来重点攻克它。</p><h2>可怕的字符串？</h2><p>我们在Rust里常常会见到一些字符串相关的内容，比如下面这些。</p><pre><code class=\"language-plain\">String, &amp;String, \nstr, &amp;str, &amp;'static str\n[u8], &amp;[u8], &amp;[u8; N], Vec&lt;u8&gt;\nas_str(), as_bytes()\nOsStr, OsString\nPath, PathBuf\nCStr, CString\n</code></pre><p>我们用一张图形象地表达Rust语言里字符串的复杂性。</p><p><img src=\"https://static001.geekbang.org/resource/image/32/b0/3218b787e94ecac394ab6b8476f8cdb0.png?wh=2158x1444\" alt=\"\"></p><p>有没有被吓到？顿时不想学了，Rust从入门到放弃，第一次Rust旅程到此结束。</p><p>且慢且慢，先不要盖棺定论。仔细想一想Rust中的字符串真的有这么复杂吗？这些眼花缭乱的符号到底是什么？我来给你好好分析一下。</p><p>首先，我们来看C语言里的字符串。图里显示，C中的字符串统一叫做 <code>char *</code>，这确实很简洁，相当于是统一的抽象。但是这个统一的抽象也付出了代价，就是<strong>丢失了很多额外的信息</strong>。</p><!-- [[[read_end]]] --><p>为什么会这样呢？我们从计算机结构说起。我们都知道，计算机CPU执行的指令都是二进制序列，所有语言写的程序最后执行时都会归结为二进制序列来执行。但是为什么不直接写二进制打孔开发，而是出现了几百上千种计算机语言呢？没错，就是因为<strong>抽象</strong>。</p><p>抽象是用来解决现实问题建模的工具。在Rust里也一样，之所以Rust有那么多看上去都是字符串的类型，就是因为<strong>Rust把字符串在各种场景下的使用给模型化、抽象化了</strong>。相比C语言的 <code>char *</code>，多了建模的过程，在这个模型里面多了很多额外的信息。</p><p>下面我们就来看看前面提到的那些字符串类型各自有什么具体含义。</p><h2>不同类型的字符串</h2><p>示例：</p><pre><code class=\"language-plain\">fn main() {\n  let s1: &amp;'static str = \"I am a superman.\"; \n  let s2: String = s1.to_string(); \n  let s3: &amp;String = &amp;s2;\n  let s4: &amp;str = &amp;s2[..];\n  let s5: &amp;str = &amp;s2[..6];\n}\n</code></pre><p>上述示例中，s1、s2、s3、s4、s5 看起来好像是4种不同类型的字符串表示。为了让你更容易理解，我画出它们在内存中的结构图。</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/a1/1c3d990e99f5c5cfa47ee2b885a561a1.jpg?wh=1627x1209\" alt=\"\" title=\"String、&amp;String、str、&amp;str、&amp;'static str 之间的关系图\"></p><p>我来详细解释一下这张图片的意思。</p><p><code>\"I am a superman.\"</code> 这个用双引号括起来的部分是字符串的字面量，存放在静态数据区。而 s1 是指向静态数据区中的这个字符串的切片引用，形式是 <code>&amp;'static str</code>，这是静态数据区中的字符串的表示方法。</p><p>通过执行 <code>s1.to_string()</code>，Rust将静态数据区中的字符串字面量拷贝了一份到堆内存中，通过s2指向，s2具有这个堆内存字符串的所有权，<code>String</code> 在Rust中就代表具有所有权的字符串。</p><p>s3就是对s2的不可变引用，因此类型为 <code>&amp;String</code>。</p><p>s4是对s2的切片引用，类型是 <code>&amp;str</code>。切片就是一块连续内存的某种视图，它可以提取目标对象的全部或一部分。这里s4就是取的目标对象字符串的全部。</p><p>s5是对s2的另一个切片引用，类型也是 <code>&amp;str</code>。与s4不同的是，s5是s2的部分视图。具体来说，就是 <code>\"I am a\"</code> 这一部分。</p><p>相信你通过上面的例子对这几种不同类型的字符串已经有了一个简单直观的认识了，下面我来给你详细解释下。</p><p><code>String</code> 是字符串的所有权形式，常常在堆中分配。<code>String</code> 字符串的内容大小是可以动态变化的。而 <code>str</code> 是字符串的切片类型，通常以切片引用 <code>&amp;str</code> 形式出现，是字符串的视图的借用形式。</p><p>字符串字面量默认会存放在静态数据区里，而静态数据区中的字符串总是贯穿程序运行的整个生命期，直到程序结束的时候才会被释放。因此不需要某一个变量对其拥有所有权，也没有哪个变量能够拥有这个字符串的所有权（也就是这个资源的分配责任）。因此对于字符串字面量这种数据类型，我们只能拿到它的借用形式 <code>&amp;'static str</code>。这里 <code>'static</code> 表示这个引用可以贯穿整个程序的生命期，直到这个程序运行结束。</p><p><code>&amp;String</code> 仅仅是对 <code>String</code> 类型的字符串的普通引用。</p><p>对 <code>String</code> 做字符串切片操作后，可以得到 <code>&amp;str</code>。这里这个 <code>&amp;str</code> 就是指向由 <code>String</code> 管理的内存资源的切片引用，是目标字符串资源的借用形式，不会再把字符串内容复制一份。</p><p>从上面的图示里可以看到，<code>&amp;str</code> 既可以引用堆中的字符串，也可以引用静态数据区中的字符串（<code>&amp;'static str</code> 是 <code>&amp;str</code> 的一种特殊形式）。其实内存本来就是一个线性空间，一个指针（引用是指针的一种）理论上来说可以指向这个线性空间中的任何地址。</p><p><code>&amp;str</code> 也可转换为 <code>String</code>。你可以通过示例，看一下它们之间是如何转换的。</p><pre><code class=\"language-plain\">let s: String = \"I am a superman.\".to_string(); \nlet a_slice: &amp;str = &amp;s[..];\nlet another_String: String = a_slice.to_string();\n</code></pre><h3>切片</h3><p>上面提到了切片，这里我再补充一点关于切片（slice）的背景知识。切片是一段连续内存的一个视图（view），在Rust中由 <code>[T]</code> 表示，T为元素类型。这个视图可以是这块连续内存的全部或一部分。切片一般通过切片的引用来访问，你可以看一下我给出的这个字符串示例。</p><pre><code class=\"language-plain\">let s = String::from(\"abcdefg\");\nlet s1 = &amp;s[..];    // s1 内容是 \"abcdefg\"\nlet s2 = &amp;s[0..4];  // s2 内容是 \"abcd\"\nlet s3 = &amp;s[2..5];    // s3 内容是 \"cde\"\n</code></pre><p>上面示例中，s是堆内存中所有权型字符串类型。s1作为s的一个切片引用，它也指向堆内存中那个字符串的头部，表示s的完整内容。s2与s1指向的堆内存地址是相同的，但是内容不同，s2是 <code>\"abcd\"</code>，而s1是 <code>\"abcdefg\"</code>。s3则是s的中间位置的一段切片引用，内容是 <code>\"cde\"</code>。s3指向的地址与s、s1、s2 不同。我画了一张图来表示它们之间的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/0f/71/0f16a48dd7a9e54d75bc650300577d71.jpg?wh=3000x2249\" alt=\"\"></p><p>如果你拿到的是一个字符串切片引用，那么如何转换成所有权型字符串呢？有几种方法。</p><pre><code class=\"language-plain\">let s: &amp;str = \"I am a superman.\";\nlet s1: String = String::from(s);  // 使用 String 的from构造器\nlet s2: String = s.to_string();    // 使用 to_string() 方法\nlet s3: String = s.to_owned();     // 使用 to_owned() 方法\n</code></pre><h3><code>[u8]</code>、<code>&amp;[u8]</code>、<code>&amp;[u8; N]</code>、<code>Vec&lt;u8&gt;</code></h3><p>这一块儿内容虽然不是直接与字符串相关，但具有类比性。有了前面的背景知识，我们可以轻松辨析这几种类型。</p><ul>\n<li><code>[u8]</code> 是字节串切片，大小是可以动态变化的。</li>\n<li><code>&amp;[u8]</code> 是对字节串切片的引用，即切片引用，与 <code>&amp;str</code> 是类似的。</li>\n<li><code>&amp;[u8; N]</code> 是对u8数组（其长度为N）的引用。</li>\n<li><code>Vec&lt;u8&gt;</code> 是u8类型的动态数组。与 <code>String</code> 类似，这是一种具有所有权的类型。</li>\n</ul><p><code>Vec&lt;u8&gt;</code> 与 <code>&amp;[u8]</code> 的关系如下：</p><pre><code>let a_vec: Vec&lt;u8&gt; = vec![1,2,3,4,5,6,7,8];\n// a_slice 是 [1,2,3,4,5]\nlet a_slice: &amp;[u8] = &amp;a_vec[0..5];   \n// 用 .to_vec() 方法将切片转换成Vec\nlet another_vec = a_slice.to_vec();\n// 或者用 .to_owned() 方法\nlet another_vec = a_slice.to_owned();\n</code></pre><p>我们可以整理出一个对比表格。</p><p><img src=\"https://static001.geekbang.org/resource/image/32/eb/32b39e51f2d48787b97426cf1a1830eb.png?wh=2358x678\" alt=\"\"></p><h3><code>as_str()</code>、<code>as_bytes()</code>、<code>as_slice()</code></h3><p><code>String</code> 类型上有个方法是 <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.as_str\">as_str()</a>。它返回 <code>&str</code> 类型。这个方法效果其实等价于 <code>&a_string[..]</code>，也就是包含完整的字符串内容的切片。</p><pre><code class=\"language-plain\">let s = String::from(\"foo\");\nassert_eq!(\"foo\", s.as_str());\n</code></pre><p><code>String</code> 类型上还有个方法是 <code>as_bytes()</code>，它返回 <code>&amp;[u8]</code> 类型。</p><pre><code class=\"language-plain\">let s = String::from(\"hello\");\nassert_eq!(&amp;[104, 101, 108, 108, 111], s.as_bytes());\n</code></pre><p>通过上面两个示例可以对比这两个方法的不同之处。 可以猜想 <code>&amp;str</code> 其实也是可以转成 <code>&amp;[u8]</code> 的，我们查询<a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes\">标准库文档</a>发现，用的正是同名方法。</p><pre><code class=\"language-plain\">let bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n</code></pre><p>Vec上有个 <code>as_slice()</code> 函数，与 <code>String</code> 上的 <code>as_str()</code> 对应，把完整内容转换成切片引用 <code>&amp;[T]</code>，等价于 <code>&amp;a_vec[..]</code>。</p><pre><code class=\"language-plain\">let a_vec = vec![1, 2, 3, 5, 8];\nassert_eq!(&amp;[1, 2, 3, 5, 8], a_vec.as_slice());\n</code></pre><h3>隐式引用类型转换</h3><p>前面我们看到，Rust中 <code>&amp;String</code> 与 <code>&amp;str</code> 其实是不同的。这种细节的区分，在某些情况下，会造成一些不方便，而且这些情况还比较常见。比如：</p><pre><code class=\"language-plain\">fn foo(s: &amp;String) {  \n}\n\nfn main() {\n  let s = String::from(\"I am a superman.\");\n  foo(&amp;s);\n  let s1 = \"I am a superman.\";    \n  foo(s1);                        \n}\n</code></pre><p>上面示例中，函数的参数类型我们定义成 <code>&amp;String</code>。那么在函数调用时，这个函数只接受 <code>&amp;String</code> 类型的参数传入。如果我们定义一个字符串字面量变量，想传进 <code>foo</code> 函数中，就发现不行。</p><pre><code class=\"language-plain\">error[E0308]: mismatched types\n --&gt; src/main.rs:8:7\n  |\n8 |   foo(s1);                        // error on this line\n  |   --- ^^ expected `&amp;String`, found `&amp;str`\n  |   |\n  |   arguments to this function are incorrect\n  |\n  = note: expected reference `&amp;String`\n             found reference `&amp;str`\n</code></pre><p>这里体现了Rust严格的一面。</p><p>但是很明显，这种严格也导致了平时使用不方便，它强迫我们必须注意字符串处理时的各种细节问题，有时显得过于迂腐了。但是Rust也并不是那么死板，它在保持严格性的同时，通过一些精妙的机制，也可以实现一定程度上的灵活性。我们可以更改上述示例来体会一下。</p><pre><code class=\"language-plain\">fn foo(s: &amp;str) {      // 只需要把这里的参数改为 &amp;str 类型\n}\n\nfn main() {\n  let s = String::from(\"I am a superman.\");\n  foo(&amp;s);\n  let s1 = \"I am a superman.\";    \n  foo(s1);                        \n}\n</code></pre><p>把 <code>foo</code> 参数的类型由 <code>&amp;String</code> 改为 <code>&amp;str</code>，上述示例就编译通过了。为什么呢？</p><p>实际上，在Rust中对 <code>String</code> 做引用操作时，可以告诉Rust编译器，我想把 <code>&amp;String</code> 直接转换到 <code>&amp;str</code> 类型。只需要在代码中明确指定目标类型就可以了。</p><pre><code class=\"language-plain\">let s = String::from(\"I am a superman.\");\nlet s1 = &amp;s;\nlet s2: &amp;str = &amp;s;\n</code></pre><p>上述代码，s1不指定具体类型，对所有权字符串s的引用操作，只转换成 <code>&amp;String</code> 类型。而如果指定了目标类型为&amp;str，那么对所有权字符串s的引用操作，就进一步转换成了 <code>&amp;str</code> 类型。</p><p>于是在上面的 <code>foo()</code> 函数中，我们只定义一种参数，就可以接收两种入参类型：<code>&amp;String</code> 和 <code>&amp;str</code>。这让函数的调用更符合直觉，使用更方便了。</p><p>具体是怎么做到的呢？需要用到后面的知识点：Deref。你可以查阅<a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\">链接</a>，学习 Deref 相关知识，在这里我们暂时先跳过，不做过多展开。</p><p>同样的原理，不仅可以作用在 <code>String</code> 上，也可以作用在 <code>Vec&lt;u8&gt;</code> 上 ，更进一步的话，还可以作用在 <code>Vec&lt;T&gt;</code> 上。我们可以总结出一张表格。</p><p><img src=\"https://static001.geekbang.org/resource/image/f9/35/f98b426412bf6b1aeea57e0f833edf35.png?wh=1704x516\" alt=\"\"></p><p>下面的示例表示同一个函数可以接受 <code>&Vec&lt;u32&gt;</code> 和 <code>&[u32]</code> 两种类型的传入。</p><pre><code class=\"language-plain\">fn foo(s: &amp;[u32]) {\n}\n\nfn main() {\n  let v: Vec&lt;u32&gt; = vec![1,2,3,4,5];\n  foo(&amp;v);\n  let a_slice = v.as_slice();\n  foo(a_slice);\n}\n</code></pre><h3>字节串转换成字符串</h3><p>前面我们看到可以通过 <code>as_bytes()</code> 方法将字符串转换成 <code>&amp;[u8]</code>。相反的操作也是有的，就是把 <code>&amp;[u8]</code> 转换成字符串。</p><p>前面我们讲过，Rust中的字符串实际是一个UTF-8序列，因此转换的过程也是与UTF-8编码相关的。哪些函数可用于转换呢？</p><ul>\n<li><a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.from_utf8\">String::from_utf8()</a> 可以把 <code>Vec&lt;u8&gt;</code> 转换成 <code>String</code>，转换不一定成功，因为一个字节序列不一定是有效的UTF-8编码序列。它返回的是Result（关于Result，我们后面会专题讲解，这里仅做了解），需要自行做错误处理。</li>\n<li>String::from_utf8_unchecked() 可以把 <code>Vec&lt;u8&gt;</code> 转换成 <code>String</code>。不检查字节序列是不是无效的UTF-8编码，直接返回 <code>String</code> 类型。但是这个函数是unsafe的，一般不推荐使用。</li>\n<li><a href=\"https://doc.rust-lang.org/std/str/fn.from_utf8.html\">str::from_utf8()</a> 可以将 <code>&amp;[u8]</code> 转换成 <code>&amp;str</code>。它返回的是Result，需要自行做错误处理。</li>\n<li>str::from_utf8_unchecked()可以把 <code>&amp;[u8]</code> 转换成 <code>&amp;str</code>。它直接返回 <code>&amp;str</code> 类型。但是这个函数是unsafe的，一般不推荐使用。</li>\n</ul><p>注意 <code>from_utf8</code> 系列函数，返回的是Result。有时候会让人觉得很繁琐，但是<strong>这种繁琐实际是客观复杂性的体现，Rust的严谨性要求对这种转换不成功的情况做严肃的自定义处理。</strong>反观其他语言，对于这种转换不成功的情况往往用一种内置的策略做处理，而无法自定义。</p><h3>字符串切割成字符数组</h3><p><code>&amp;str</code> 类型有个 <code>chars()</code> 函数，可以用来把字符串转换为一个迭代器，迭代器是一种通用的抽象，就是用来按顺序安全迭代的，我们后面也会讲到这个概念。通过这个迭代器，就可以取出 <code>char</code>。你可以先了解它的用法。</p><pre><code class=\"language-plain\">fn main() {\n&nbsp; &nbsp; let s = String::from(\"中国你好\");&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; let char_vec: Vec&lt;char&gt; = s.chars().collect();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; println!(\"{:?}\", char_vec);&nbsp;\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; for ch in s.chars() {\n&nbsp; &nbsp; &nbsp; &nbsp; println!(\"{:?}\", ch);&nbsp;\n&nbsp; &nbsp; }\n}\n</code></pre><p>输出：</p><pre><code class=\"language-plain\">['中', '国', '你', '好']\n'中'\n'国'\n'你'\n'好'\n</code></pre><h3>其他字符串相关类型</h3><p>有了前面的知识背景。我们现在来看这些与字符串相关的类型：<code>Path</code>、<code>PathBuf</code>、<code>OsStr</code>、<code>OsString</code>、<code>CStr</code>、<code>CString</code>。</p><p>前面我们讲过其实它们只是具体场景下的字符串而已。相对于普通的 <code>String</code> 或 <code>&amp;str</code>，它们只是<strong>包含了更多的特定场景的信息</strong>。比如 <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html\">Path</a> 类型，它就要处理跨平台的目录分隔符（Unix下是/，Windows下是\\），以及一些其他信息。而 <code>PathBuf</code> 与 <code>Path</code> 的区别就对应于 <code>String</code> 与 <code>str</code> 的区别。</p><p><code>OsStr</code> 的存在是因为各个操作系统平台上的原生字符串定义其实是不同的。比如Unix系统，原生字符串是任意非0字节序列，不过常常解释为UTF-8编码；而在Windows上，原生字符串定义为任意非0字节16位序列，正常情况下解释为UTF-16编码序列。而Rust自带的标准 <code>str</code> 定义和它们都不同，它是一个可以包含0这个字节的严格UTF-8编码序列。在开发平台相关的应用时，往往需要处理这种类型转换的细节，于是就有了 <code>OsStr</code> 类型。而 <code>OsString</code> 与 <code>OsStr</code> 的关系对应于 <code>String</code> 与 <code>str</code> 的关系。</p><p><code>CStr</code> 是C语言风格的字符串，字符串以0这个字节作结束符，在字符串中不能包含0。因为Rust要无缝集成C的能力。所以这些类型出现在Rust中就很合理了。而 <code>CString</code> 与 <code>CStr</code> 的关系就对应于 <code>String</code> 与 <code>str</code> 的关系。</p><p>这些平台细节的处理相当繁琐和专业，Rust把已处理好这些细节的类型提供给我们，我们直接使用就好了。理解了这一点，你是否还觉得C语言中唯一的 <code>char *</code> 是更好的设计吗？</p><p>这些字符串类型你不一定要在现阶段全部掌握，这里你只需要理解Rust中为什么存在这些类型，还有这些类型之间的关系就可以了。后面我们在用到具体某个类型的时候再深入研究，那个时候相信你会掌握得更快、更透彻。</p><h2>Parse方法</h2><p><code>str</code> 有一个 <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.parse\">parse() 方法</a>非常强大，可以从字符串转换到任意Rust类型，只要这个类型实现了 <code>FromStr</code> 这个Trait（Trait是Rust中一个极其重要的概念，后面我们会讲述）即可。把字符串解析成Rust类型，肯定有不成功的可能，所以这个方法返回的是一个Result，需要自行处理解析错误的情况。下面的代码示例展示了字符串如何转换到各种类型，我们先了解，知道形式是怎样的就可以了。</p><pre><code class=\"language-plain\">fn main() {\n&nbsp; &nbsp; let a = \"10\".parse::&lt;u32&gt;();\n    let aa: u32 = \"10\".parse().unwrap(); // 这种写法也很常见\n&nbsp; &nbsp; println!(\"{:?}\", a);\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; let a = \"10\".parse::&lt;f32&gt;();\n&nbsp; &nbsp; println!(\"{:?}\", a);\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; let a = \"4.2\".parse::&lt;f32&gt;();\n&nbsp; &nbsp; println!(\"{:?}\", a);\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; let a = \"true\".parse::&lt;bool&gt;();\n&nbsp; &nbsp; println!(\"{:?}\", a);\n\n&nbsp; &nbsp; let a = \"a\".parse::&lt;char&gt;();\n&nbsp; &nbsp; println!(\"{:?}\", a);\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; let a = \"192.168.1.100\".parse::&lt;std::net::IpAddr&gt;();\n&nbsp; &nbsp; println!(\"{:?}\", a);\n}\n</code></pre><p>你可以看看哪些标准库类型已实现了 <a href=\"https://doc.rust-lang.org/std/str/trait.FromStr.html#implementors\">FromStr trait</a>。</p><p><code>parse()</code> 函数就相当于Rust语言内置的统一的解析器接口，如果你自己实现的类型需要与字符串互相转换，就可以考虑实现这个接口，这样的话就比较能被整个Rust社区接受，这就是所谓的Rust地道风格的体现。</p><p>而对于更复杂和更通用的与字符串转换的场景，我们可能会更倾向于序列化和反序列化的方案。这块在Rust生态中也有标准的方案——<a href=\"https://docs.rs/serde/1.0.174/serde/\">serde</a>，它作为序列化框架，可以支持各种数据格式协议，功能非常强大、统一。我们目前仅做了解。</p><h2>小结</h2><p>学习完这节课的内容，你有没有觉得Rust语言中的字符串内容确实很丰富？相比于C语言中的字符串，Rust把字符串按场景划分成了不同的类型，每种类型都包含有不同的额外信息。通过将研究目标（字符串）按场景类型化，在代码中加入了更多的信息，给Rust编译器这个AI助手喂了更多的料，从而可以让编译器为我们做更多的校验和推导的事情，来确保我们程序的正确性，并尽可能做性能优化。</p><p>这节课我们提到了一些新的概念，比如迭代器、Trait等，你不需要现在就掌握，先知道有这么个东西就可以了，这节课你的主要任务有三个。</p><ol>\n<li>熟悉Rust语言中的字符串的各种类型形式，以及它们之间的区别。</li>\n<li>知道Rust语言中字符串相关类型的基本转换方式有哪些。</li>\n<li>体会地道的Rust代码风格以及对称性。</li>\n</ol><p>字符串在Rust代码中使用广泛，几乎会贯穿整个课程。请你一定多加练习，牢牢掌握字符串相关类型在不同场景下的转换以及一些常用的方法。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/12/7638c19bc5c216c5yybd12bc49ac5912.jpg?wh=1890x1316\" alt=\"\"></p><h2>思考题</h2><p><code>chars</code> 函数是定义在 <code>str</code> 上的，为什么 <code>String</code> 类型能直接调用 <code>str</code> 上定义的方法？实际上 <code>str</code> 上的所有方法，<code>String</code> 都能调用，请问这是为什么呢？</p><p>欢迎你把思考后的结果分享到评论区，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p>","comments":[{"had_liked":false,"id":383098,"user_name":"一个人旅行","can_delete":false,"product_type":"c1","uid":2555864,"ip_address":"北京","ucode":"A708238B10B44B","user_header":"https://static001.geekbang.org/account/avatar/00/26/ff/d8/d48d6088.jpg","comment_is_top":false,"comment_ctime":1698403422,"is_pvip":false,"replies":[{"id":139546,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698417903,"ip_address":"重庆","comment_id":383098,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"1.String类型为struct类型，实现了Deref特征。\n2.当String类型调用chars方法是，编译器会检查String类型是否实现了chars方法，检查项包括self，&amp;self，&amp;mut self\n3.如果都没有实现chars方法，编译器则调用deref方法解引用(智能指针)，得到str，此时编译器才会调用chars方法，也就是可以调用str实现的所有方法","like_count":37,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630437,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698417903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383227,"user_name":"eriklee","can_delete":false,"product_type":"c1","uid":2826132,"ip_address":"北京","ucode":"6F755DB7C29DD6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIyhbzdkFM64Npva5ZKf4IPwhy6rDAX0L77QNESbalnXhnGKibcTbwtSaNC0hO6z0icO8DYI9Nf4xwg/132","comment_is_top":false,"comment_ctime":1698722665,"is_pvip":false,"replies":[{"id":139613,"content":"to_owned() 是更通用的，目的就是在只能拿到引用的情况下获得所有权（通过克隆一份资源）。to_string() 就只是转成字符串而已，这两个用法重叠，但是不完全相同。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698806128,"ip_address":"重庆","comment_id":383227,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"什么时候用to_owned(),什么时候用to_string()呢？","like_count":7,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630701,"discussion_content":"to_owned() 是更通用的，目的就是在只能拿到引用的情况下获得所有权（通过克隆一份资源）。to_string() 就只是转成字符串而已，这两个用法重叠，但是不完全相同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698806129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1052528,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0f/70/cdef7a3d.jpg","nickname":"Joe Black","note":"","ucode":"21FE222A286445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":633395,"discussion_content":"to_owned()是不是各种数据类型都有？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702093452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630701,"ip_address":"北京","group_id":0},"score":633395,"extra":""}]}]},{"had_liked":false,"id":383286,"user_name":"plh","can_delete":false,"product_type":"c1","uid":1031828,"ip_address":"四川","ucode":"D79F2B87AC3AD2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erEHTaQDkWqEYib9iabib8rACYpSFBHTPFmgicUKaib79MB6VIxNwiajHUS8kYFEKCGOjpibf0dibhIjqhfzg/132","comment_is_top":false,"comment_ctime":1698815942,"is_pvip":false,"replies":[{"id":139634,"content":"很棒的思考。第3点，从初学者理解的角度来看，这个类型的转换确实是 “自动” “隐式”完成的，只不过这个隐式不是语言内置的，而是在标准库中通过Deref trait完成的。这样处理的原因在于，引入自动引用和解引用，会给初学者带来新的理解负担。官方book在这个问题上处理得并不好。另外，rust中并没有禁用 隐式 这个词。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698846992,"ip_address":"重庆","comment_id":383286,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"[思考题]: 实际上 str 上的所有方法，String 都能调用.  这个地方 对初学者需要 循序渐进地理解:\n1. 最开始接触 引用的概念是 rust book 中文版 中有句话, “而更有经验的 Rustacean 会编写出示例 4-9 中的签名”, 使用的函数 签名 从 &amp;String 转换成 &amp;str, 见链接 https:&#47;&#47;kaisery.github.io&#47;trpl-zh-cn&#47;ch04-03-slices.html#%E5%AD%97%E7%AC%A6%E4%B8%B2-slice-%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0, 当时觉得很神奇, 更有经验的 Rustacean, 不就是 自己的当前目标吗.\n2. 随着 继续深入下去, 自然接触到了 Deref 运算符, 也就是这个地方 这个地方实现上会调用 s.defer() , 这个地方 就是一个本质.\n3. Rust 既然很受广大程序员的欢迎还是有原因的, 有很多符合 &quot;人体工程学&quot;的特性, 其中就有 automatic referencing and dereferencing,  [运算符到哪去了], 见链接 https:&#47;&#47;kaisery.github.io&#47;trpl-zh-cn&#47;ch05-03-method-syntax.html#--%E8%BF%90%E7%AE%97%E7%AC%A6%E5%88%B0%E5%93%AA%E5%8E%BB%E4%BA%86  \n4. 本课的 [隐式引用类型转换], 个人觉得 有点 歧义,可能会引起后续的麻烦. 首先 Rust 不允许自动类型隐式转换,从这个角度来说, Rust 就属于强类型语言(什么是 强类型语言这个是争议的,可以暂时不管).其次, 如果换成 automatic referencing and dereferencing(自动 引用 和解引用) ,这个说法 就更严谨一点.\n\n个人愚见,欢迎老师同学指正.\n","like_count":4,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630756,"discussion_content":"很棒的思考。第3点，从初学者理解的角度来看，这个类型的转换确实是 “自动” “隐式”完成的，只不过这个隐式不是语言内置的，而是在标准库中通过Deref trait完成的。这样处理的原因在于，引入自动引用和解引用，会给初学者带来新的理解负担。官方book在这个问题上处理得并不好。另外，rust中并没有禁用 隐式 这个词。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698846992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383261,"user_name":"二夕","can_delete":false,"product_type":"c1","uid":2907644,"ip_address":"浙江","ucode":"2587A8DE51F629","user_header":"https://static001.geekbang.org/account/avatar/00/2c/5d/fc/2e5e2a90.jpg","comment_is_top":false,"comment_ctime":1698770200,"is_pvip":false,"replies":[{"id":139623,"content":"非常清晰！👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698806553,"ip_address":"重庆","comment_id":383261,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"在 Rust 中，String 是一个可变的字符串类型，是用结构体定义的，而且实现了 Deref trait。str 是一个不可变的字符串切片类型。当调用一个 str 上的方法时，实际上就是通过 Deref 的自动转换机制（解引用），将 String 转换为对应的 str 切片，从而可以调用 str 上的方法。","like_count":4,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630711,"discussion_content":"非常清晰！👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698806553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385342,"user_name":"superggn","can_delete":false,"product_type":"c1","uid":3623568,"ip_address":"北京","ucode":"831CCD98B393FE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/7Q403U68Oy4lXG5sFBPVKLrfwaRzBqpBZibpEBXcPf9UOO3qrnh7RELoByTLzBZLkN9Nukfsj7DibynbZjKAKgag/132","comment_is_top":false,"comment_ctime":1702460179,"is_pvip":false,"replies":[{"id":140453,"content":"👍真棒","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1702609626,"ip_address":"重庆","comment_id":385342,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"简单理解： 有个东西叫 deref coercion\n在类型A上调函数的时候如果 typeA 有对应方法， 直接调；\n如果没有对应方法， 就往下着 typeA 有没有实现 deref\n如果没实现， GG\n如果 typeA 能 deref 到 typeRoot, 那么在 typeRoot 里寻找有没有对应方法\n如果 typeRoot 里没有方法， 继续看 typeRoot 里有没有对应方法， 递归往下走","like_count":2,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633770,"discussion_content":"👍真棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702609626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383973,"user_name":"Citroen","can_delete":false,"product_type":"c1","uid":2188563,"ip_address":"辽宁","ucode":"03017DB11EC537","user_header":"https://static001.geekbang.org/account/avatar/00/21/65/13/8654e7c9.jpg","comment_is_top":false,"comment_ctime":1700035596,"is_pvip":false,"replies":[{"id":140108,"content":"非常棒的思考！\n\n0. “Rust中char是用于存放unicode单个字符的类型（最多四个字节）。”。Rust语言里面的char就是占用4个字节，固定的。\n\n1. “程序里的String[a..b],这里的a和b已经是经过特殊处理的保证截取的有效性”。对的。\nfn main() {\n    let s = &quot;abcdefghijk&quot;.to_string();\n    let a = &amp;s[..5];\n\n    let s = &quot;我爱中国&quot;.to_string();\n    let a = &amp;s[..5];\n}\n     Running `target&#47;debug&#47;playground`\nthread &#39;main&#39; panicked at src&#47;main.rs:7:15:\nbyte index 5 is not a char boundary; it is inside &#39;爱&#39; (bytes 3..6) of `我爱中国`\n\n2. “所以str和&amp;str是完全两个不同的概念”。对的。\n\n3. &quot;所以[u8; N]可以看做是程序的任何类型数据的二进制表示形式。&quot; 。对的。\n\n4. “不管是[T]， Vec&lt;T&gt;，甚至Vec&lt;Vec&lt;Vec&lt;String&gt;&gt;&gt;只要Vec实现了Deref特性都并且Vec上没有的，都会层层解到最后需要的类型的方法上。”。对的，适用于任何类型。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700192586,"ip_address":"重庆","comment_id":383973,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"同过学习我理解的是下面这样，有不对请老师指正，谢谢。\nRust中char是用于存放unicode单个字符的类型（最多四个字节）。\nString类型只能放在堆上，通过引用所有权的形式和变量绑定，它的存储方式不是简单的char数组，而是utf8编码的字节序列，所以单独取这个序列的某一段切片，不一定能解析出具体的字符（程序里的String[a..b],这里的a和b已经是经过特殊处理的保证截取的有效性），如果能取得有效的序列片段那就是str类型，但是程序里凡是用到绑定str类型变量的地方，则必须都是引用形式存在的（&amp;str），因为str是引用的原始片段的那段真是数据，而&amp;str类型是一个FatPointer，它包括引用目标的起始地址和长度，所以str和&amp;str是完全两个不同的概念。\nu8就是一个存储0到255大小的类型，因为一个字节就是8位，所以[u8, N]可以看做是程序的任何类型数据的二进制表示形式。\n不管是[T]， Vec&lt;T&gt;，甚至Vec&lt;Vec&lt;Vec&lt;String&gt;&gt;&gt;只要Vec实现了Deref特性都并且Vec上没有的，都会层层解到最后需要的类型的方法上。","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631954,"discussion_content":"非常棒的思考！\n\n0. “Rust中char是用于存放unicode单个字符的类型（最多四个字节）。”。Rust语言里面的char就是占用4个字节，固定的。\n\n1. “程序里的String[a..b],这里的a和b已经是经过特殊处理的保证截取的有效性”。对的。\nfn main() {\n    let s = &#34;abcdefghijk&#34;.to_string();\n    let a = &amp;s[..5];\n\n    let s = &#34;我爱中国&#34;.to_string();\n    let a = &amp;s[..5];\n}\n     Running `target/debug/playground`\nthread &#39;main&#39; panicked at src/main.rs:7:15:\nbyte index 5 is not a char boundary; it is inside &#39;爱&#39; (bytes 3..6) of `我爱中国`\n\n2. “所以str和&amp;str是完全两个不同的概念”。对的。\n\n3. &#34;所以[u8; N]可以看做是程序的任何类型数据的二进制表示形式。&#34; 。对的。\n\n4. “不管是[T]， Vec&lt;T&gt;，甚至Vec&lt;Vec&lt;Vec&lt;String&gt;&gt;&gt;只要Vec实现了Deref特性都并且Vec上没有的，都会层层解到最后需要的类型的方法上。”。对的，适用于任何类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700192586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1560032,"avatar":"https://static001.geekbang.org/account/avatar/00/17/cd/e0/7ba3c15d.jpg","nickname":"Mango","note":"","ucode":"CCD3A91D69555D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633338,"discussion_content":"Deref 和 java的继承类似？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702019939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383204,"user_name":"-Hedon🍭","can_delete":false,"product_type":"c1","uid":3176234,"ip_address":"湖北","ucode":"FAE541E7A2B88F","user_header":"https://static001.geekbang.org/account/avatar/00/30/77/2a/0cd4c373.jpg","comment_is_top":false,"comment_ctime":1698667826,"is_pvip":false,"replies":[{"id":139619,"content":"这句话不对：“String 类型实现了 str 类型的 trait”。String 通过实现Deref trait，目标为 str，因此可以调用 str 类型上定义的方法。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698806483,"ip_address":"重庆","comment_id":383204,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"思考题：在 Rust 中，trait 是一种定义共享行为的机制。当一个类型实现了某个 trait，它就可以使用该 trait 中定义的方法。String 类型实现了 str 类型的 trait，因此可以调用 str 类型上定义的方法。","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630707,"discussion_content":"这句话不对：“String 类型实现了 str 类型的 trait”。String 通过实现Deref trait，目标为 str，因此可以调用 str 类型上定义的方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698806483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383157,"user_name":"Lucas Lin","can_delete":false,"product_type":"c1","uid":1501889,"ip_address":"中国台湾","ucode":"F8D9AFD70F9682","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/c1/d9cb2299.jpg","comment_is_top":false,"comment_ctime":1698579742,"is_pvip":false,"replies":[{"id":139585,"content":"这个建议非常棒，我画下面部分的时候，没有想到这一点。这样更严谨，感谢指正。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698676822,"ip_address":"重庆","comment_id":383157,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"对「String、&amp;String、str、&amp;str、&amp;&#39;static str 之间的关系图」有个疑问。&amp;&#39;static str 和 &amp;str 都是切片引用，那 &amp;&#39;static str 是不是也应该和 &amp;str 一样有个引用范围的图示？范围是整个字符串(&quot;I am a superman.&quot;)。","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630580,"discussion_content":"这个建议非常棒，我画下面部分的时候，没有想到这一点。这样更严谨，感谢指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698676822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386765,"user_name":"舒灿","can_delete":false,"product_type":"c1","uid":3813096,"ip_address":"四川","ucode":"98266B5188DD9E","user_header":"https://static001.geekbang.org/account/avatar/00/3a/2e/e8/9dc046af.jpg","comment_is_top":false,"comment_ctime":1705500291,"is_pvip":false,"replies":[{"id":141006,"content":"哪点要放弃？你如果放弃了说明我的讲法还需要改进！","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1705546671,"ip_address":"重庆","comment_id":386765,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"感谢评论区各位大哥的回复，不然看了这篇真要从入门到放弃了","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636059,"discussion_content":"哪点要放弃？你如果放弃了说明我的讲法还需要改进！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705546671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":2,"child_discussions":[{"author":{"id":1390592,"avatar":"","nickname":"xiuuuuuu","note":"","ucode":"5F0787C682F9DE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":637628,"discussion_content":"这部分知识本来就繁琐，感觉图可能会比文字好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708691038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":636059,"ip_address":"浙江","group_id":0},"score":637628,"extra":""},{"author":{"id":2337884,"avatar":"https://static001.geekbang.org/account/avatar/00/23/ac/5c/bb67abe6.jpg","nickname":"林子茗","note":"","ucode":"59EDCECD54731F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":638564,"discussion_content":"主要是思考题不懂，看了别人的评论才知道。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709698122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":636059,"ip_address":"广东","group_id":0},"score":638564,"extra":""}]}]},{"had_liked":false,"id":386725,"user_name":"飞了的鸭子被煮了","can_delete":false,"product_type":"c1","uid":3813080,"ip_address":"美国","ucode":"5781D69934D956","user_header":"https://static001.geekbang.org/account/avatar/00/3a/2e/d8/7beb49a4.jpg","comment_is_top":false,"comment_ctime":1705415850,"is_pvip":false,"replies":[{"id":141002,"content":"定义变量是在栈上的handle，必须是固定尺寸的，因此要加个&amp;符号取引用","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1705478923,"ip_address":"重庆","comment_id":386725,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"    let s = String::from(&quot;value&quot;);\n    let s2 = s[..];\n这里如果这样声明，会报错，说str没有实现size，如果加了&amp;就没问题，是不是说明 &amp; 把 String的所有权借用过来后，对于 str 来说就能获取到 size，从而不报错了呢","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636021,"discussion_content":"定义变量是在栈上的handle，必须是固定尺寸的，因此要加个&amp;符号取引用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705478923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386686,"user_name":"飞了的鸭子被煮了","can_delete":false,"product_type":"c1","uid":3813080,"ip_address":"美国","ucode":"5781D69934D956","user_header":"https://static001.geekbang.org/account/avatar/00/3a/2e/d8/7beb49a4.jpg","comment_is_top":false,"comment_ctime":1705333079,"is_pvip":false,"replies":[{"id":140978,"content":"有那么点意思在里面。 往后继续看看，谜底会揭晓。 👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1705411034,"ip_address":"重庆","comment_id":386686,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"目前只学过js，是不是类似js的原型链，总会找到一个与之关联的实现了的方法去执行","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635969,"discussion_content":"有那么点意思在里面。 往后继续看看，谜底会揭晓。 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705411034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384329,"user_name":"小可爱(`へ´*)ノ","can_delete":false,"product_type":"c1","uid":1016404,"ip_address":"四川","ucode":"E75189846F6616","user_header":"https://static001.geekbang.org/account/avatar/00/0f/82/54/b9cd3674.jpg","comment_is_top":false,"comment_ctime":1700703780,"is_pvip":false,"replies":[{"id":140233,"content":"不是，第二种写法就是第一种的简写。字面量要to_string()一下才会分配到堆上。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700708823,"ip_address":"重庆","comment_id":384329,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"请教老师下，let a: &amp;’static str=“hello”数据是分配在静态内存区域，let b: &amp;str=“world”是分配在堆上，可以这样理解吗","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632363,"discussion_content":"不是，第二种写法就是第一种的简写。字面量要to_string()一下才会分配到堆上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700708823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2176743,"avatar":"https://static001.geekbang.org/account/avatar/00/21/36/e7/87812eb1.jpg","nickname":"sun","note":"","ucode":"D9E38DCE79F791","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":653388,"discussion_content":"是类似java子类那种包含关系吗，表面看起来是&amp;str，实际运行时是&amp;’static？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1730802707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":632363,"ip_address":"广东","group_id":0},"score":653388,"extra":""}]}]},{"had_liked":false,"id":383968,"user_name":"javpower","can_delete":false,"product_type":"c1","uid":1362777,"ip_address":"江西","ucode":"92867F35D11590","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJ4reATXtqhQ26vWXhiaZUEF9W1E0ZEqibrxxzR7NrlGwjrCZeLvF2HnL8jFjGXaFtN1vBTSia6492g/132","comment_is_top":false,"comment_ctime":1700031753,"is_pvip":false,"replies":[{"id":140104,"content":"慢慢看，不急。可以类比，但是不要过于类比哈，不然有可能给自己画地为牢。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700192045,"ip_address":"重庆","comment_id":383968,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"我还没看Trait部分，按照 Java 是不是可以理解成\n\npublic class RustStr {\n    private  char[] value;\n\n    public RustStr(char[] value) {\n        this.value = value;\n    }\n    public int len() {\n        &#47;&#47; 返回字符串的字节长度\n        return value.length;\n    }\n    &#47;&#47;other......\n}\npublic  class RustString extends RustStr {\n    private  Vec&lt;u8&gt; value;\n\n    public RustString(){\n        &#47;&#47;todo: 强制处理\n        char[] temp=convert(value);\n        super(temp);\n    }\n    &#47;&#47;other方法\n}\n所以str 上的所有方法，String 都能调用","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631950,"discussion_content":"慢慢看，不急。可以类比，但是不要过于类比哈，不然有可能给自己画地为牢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700192045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383764,"user_name":"Ransang","can_delete":false,"product_type":"c1","uid":1133041,"ip_address":"上海","ucode":"DB67566A627DF2","user_header":"https://static001.geekbang.org/account/avatar/00/11/49/f1/bd61dbb1.jpg","comment_is_top":false,"comment_ctime":1699588746,"is_pvip":false,"replies":[{"id":139959,"content":"好问题，08会讲。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699619584,"ip_address":"重庆","comment_id":383764,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"老师 您好，示例代码中parse方法执行结果是Ok(10)，vsCode提示的类型是Result&lt;u32, std::num::ParseIntError&gt;，怎么把这个u32的值给取出来呢","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631500,"discussion_content":"好问题，08会讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699619584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383085,"user_name":"Geek_6fjt20","can_delete":false,"product_type":"c1","uid":1672482,"ip_address":"北京","ucode":"B7EB9B061E2C06","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqrbHib1v0wPRVHxrFK2CPQQX8Wg3rRMPiaZ5teMKu5klT48yns6yo4krZsIqHskwdEsibVvQ3QB7CUQ/132","comment_is_top":false,"comment_ctime":1698396423,"is_pvip":false,"replies":[{"id":139548,"content":"String 实现了Deref，目标是 str","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698418202,"ip_address":"重庆","comment_id":383085,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"String和str应该也实现了同一个Trait了吧，调用方法时可以直接转换","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630439,"discussion_content":"String 实现了Deref，目标是 str","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698418203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383047,"user_name":"fu-stack","can_delete":false,"product_type":"c1","uid":1219080,"ip_address":"广东","ucode":"0021374626241B","user_header":"https://static001.geekbang.org/account/avatar/00/12/9a/08/e0c9b414.jpg","comment_is_top":false,"comment_ctime":1698369307,"is_pvip":false,"replies":[{"id":139515,"content":"是主播代录的音哦，主播前段时间有些感冒，后面会好很多😊","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1698372929,"ip_address":"北京","comment_id":383047,"utype":2}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"老师感冒了吗或者有鼻炎？感觉卡着嗓子说话","like_count":0,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630371,"discussion_content":"是主播代录的音哦，主播前段时间有些感冒，后面会好很多😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698372929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383046,"user_name":"c","can_delete":false,"product_type":"c1","uid":1199438,"ip_address":"北京","ucode":"E1E383485EBF77","user_header":"https://static001.geekbang.org/account/avatar/00/12/4d/4e/5a20fe28.jpg","comment_is_top":false,"comment_ctime":1698368981,"is_pvip":false,"replies":[{"id":139513,"content":"坚持住，哪里有疑问随时提哦","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1698372468,"ip_address":"北京","comment_id":383046,"utype":2}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"果然 已经步入放弃的门槛了","like_count":0,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630369,"discussion_content":"坚持住，哪里有疑问随时提哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698372469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383044,"user_name":"学水","can_delete":false,"product_type":"c1","uid":2557688,"ip_address":"加拿大","ucode":"F8B27FD11187EC","user_header":"https://static001.geekbang.org/account/avatar/00/27/06/f8/09ad484b.jpg","comment_is_top":false,"comment_ctime":1698365089,"is_pvip":false,"replies":[{"id":139533,"content":"&amp;str一般都是不可变引用的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698388918,"ip_address":"重庆","comment_id":383044,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"&amp;str是String切片类型引用，那本身他和切片引用一般都做不可变引用吗","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630398,"discussion_content":"&amp;str一般都是不可变引用的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698388918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383039,"user_name":"啊啊啊啊","can_delete":false,"product_type":"c1","uid":1786915,"ip_address":"北京","ucode":"090E3983DD41A6","user_header":"https://static001.geekbang.org/account/avatar/00/1b/44/23/ebe7bd0f.jpg","comment_is_top":false,"comment_ctime":1698341101,"is_pvip":false,"replies":[{"id":139534,"content":"对的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698388929,"ip_address":"重庆","comment_id":383039,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"应该是和&amp;String能被当做&amp;str使用的原因类似，编译器会按一些规则寻找String到&amp;str的路径，自动加上deref方法调用","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630399,"discussion_content":"对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698388929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2557688,"avatar":"https://static001.geekbang.org/account/avatar/00/27/06/f8/09ad484b.jpg","nickname":"学水","note":"","ucode":"F8B27FD11187EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630475,"discussion_content":"感觉是不是和java里面Integer到int这种自动拆包有点像","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698527687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383446,"user_name":"Noya","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"浙江","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/a15b477c.jpg","comment_is_top":false,"comment_ctime":1699055926,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"    &#47;&#47; 思考题: chars 函数是定义在 str 上的，为什么 String 类型能直接调用 str 上定义的方法？\n    &#47;&#47; 实际上 str 上的所有方法，String 都能调用，请问这是为什么呢？\n    println!(&quot;\\n***** 思考题: chars 函数是定义在 str 上的，为什么 String 类型能直接调用 str 上定义的方法？ *****&quot;);\n    let s = String::from(&quot;你好Noah&quot;);\n    let _char_vec = s.chars().collect::&lt;Vec&lt;char&gt;&gt;();\n    &#47;&#47; s.chars() 可以看成 (&amp;s).chars() -&gt; (&amp;String).chars()\n    &#47;&#47; 因为 String 实现了 Deref&lt;Target=str&gt; Trait, 所以 String 可以调用 str 上的方法\n    &#47;&#47; 具体操作: 如果String自身没有方法, rust会通过Deref&lt;Target=str&gt; Trait, 在str上查找方法\n    &#47;&#47; 自己的理解: &amp;str 只是对 String 数据的引用, String是一个所有权型类型, 所以可以直接调用 str 上的方法","like_count":1},{"had_liked":false,"id":383445,"user_name":"Noya","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"浙江","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/a15b477c.jpg","comment_is_top":false,"comment_ctime":1699054791,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"&#47;&#47; Note (by noah)\n&#47;&#47; str 不能直接使用,一般是通过 &amp;str 或者 String 来使用\n&#47;&#47; String &lt;-&gt; &amp;str || &amp;[u8]\n&#47;&#47;      String -&gt; &amp;str: &amp;s[..]\n&#47;&#47;      String -&gt; &amp;str: s.as_str()\n&#47;&#47;      String -&gt; &amp;[u8]: s.as_bytes()\n&#47;&#47;      &amp;str   -&gt; String: String::from(&amp;str)\n&#47;&#47;      &amp;str   -&gt; String: &amp;str.to_string()\n&#47;&#47;      &amp;str   -&gt; String: &amp;str.to_owned()\n&#47;&#47;      &amp;str   -&gt; &amp;[u8]: &amp;str.as_bytes()\n&#47;&#47;      &amp;[u8]  -&gt; String: String::from_utf8(&amp;[u8])\n&#47;&#47;      &amp;[u8]  -&gt; String: String::from_utf8_unchecked(&amp;[u8])\n&#47;&#47;      &amp;[u8]  -&gt; &amp;str: str::from_utf8(&amp;[u8])\n&#47;&#47;      &amp;[u8]  -&gt; &amp;str: str::from_utf8_unchecked(&amp;[u8])\n\n&#47;&#47; Vec&lt;T&gt; &lt;-&gt; &amp;[T]\n&#47;&#47;      Vec&lt;T&gt; -&gt; &amp;[T]: &amp;vec[..]\n&#47;&#47;      Vec&lt;T&gt; -&gt; &amp;[T]: vec.as_slice()\n&#47;&#47;      &amp;[T]   -&gt; Vec&lt;T&gt;: Vec::from(&amp;[T])\n&#47;&#47;      &amp;[T]   -&gt; Vec&lt;T&gt;: &amp;[T].to_vec()\n&#47;&#47;      &amp;[T]   -&gt; Vec&lt;T&gt;: &amp;[T].to_owned()\n\n&#47;&#47; Deref Trait (隐式引用类型转换)\n&#47;&#47;      &amp;String -&gt; &amp;str\n&#47;&#47;      &amp;Vec&lt;T&gt; -&gt; &amp;[T]\n\n&#47;&#47; 其他字符串类型: Path、PathBuf、OsStr、OsString、CStr、CString\n\n&#47;&#47; Parse: str -&gt; T\n&#47;&#47; 只要T实现了FromStr这个Trait，就可以从字符串转换到任意Rust类型\n&#47;&#47;  let name = str.parse::&lt;T&gt;() -&gt; Result&lt;T, E&gt;\n&#47;&#47;  let name: Result&lt;T, E&gt; = str.parse()\n&#47;&#47; 一般使用unwarp()来获取T类型的值\n\n&#47;&#47; 序列化和反序列化的方案 -&gt; serde","like_count":1},{"had_liked":false,"id":393093,"user_name":"Seven","can_delete":false,"product_type":"c1","uid":2403766,"ip_address":"四川","ucode":"37D99CF8535CDE","user_header":"https://static001.geekbang.org/account/avatar/00/24/ad/b6/a8caa2c7.jpg","comment_is_top":false,"comment_ctime":1722827260,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"chars 函数是定义在 str 上的，为什么 String 类型能直接调用 str 上定义的方法？实际上 str 上的所有方法，String 都能调用，请问这是为什么呢？\n\n1. String 感觉本质上和 str 是一个资源\n2. 结合上一节课说的， str 是 String 的一个引用，那么 str 就是借了这个资源的人，他能对资源做的事，资源本身的主人当然能做同样的操作","like_count":0},{"had_liked":false,"id":392680,"user_name":"我","can_delete":false,"product_type":"c1","uid":3541586,"ip_address":"广东","ucode":"0893870E42AA8F","user_header":"https://static001.geekbang.org/account/avatar/00/36/0a/52/13b19797.jpg","comment_is_top":false,"comment_ctime":1721533960,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"“字符串字面量默认会存放在静态数据区里，而静态数据区中的字符串总是贯穿程序运行的整个生命期，直到程序结束的时候才会被释放。因此不需要某一个变量对其拥有所有权，也没有哪个变量能够拥有这个字符串的所有权（也就是这个资源的分配责任）。因此对于字符串字面量这种数据类型，我们只能拿到它的借用形式 &amp;&#39;static str。这里 &#39;static 表示这个引用可以贯穿整个程序的生命期，直到这个程序运行结束。”----请问老师，这个需要考虑作用域吗？","like_count":0},{"had_liked":false,"id":390146,"user_name":"Geek_db027f","can_delete":false,"product_type":"c1","uid":3875308,"ip_address":"北京","ucode":"A5B267DE972735","user_header":"https://static001.geekbang.org/account/avatar/00/3b/21/ec/829edcfd.jpg","comment_is_top":false,"comment_ctime":1714466310,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"问题1： String里面实现了方法才能用吧。要是没实现肯定不能用。","like_count":0},{"had_liked":false,"id":383433,"user_name":"uyplayer","can_delete":false,"product_type":"c1","uid":2975298,"ip_address":"上海","ucode":"03ACCB446FBD3B","user_header":"https://static001.geekbang.org/account/avatar/00/2d/66/42/8a645285.jpg","comment_is_top":false,"comment_ctime":1699016105,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"fn main() {\n    let s: String = String::from(&quot;Hello, world! this is Rust&quot;);\n    let len = s.len(); \n    eprintln!(&quot;{len}&quot;);\n   \n    let s:&amp;str = &quot;Hello, world! this is Rust , call String method&quot;;\n    let len = s.len(); \n    eprintln!(&quot;{len}&quot;);    \n}\n\n结果：\n26\n47","like_count":0,"discussions":[{"author":{"id":1016404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/82/54/b9cd3674.jpg","nickname":"小可爱(`へ´*)ノ","note":"","ucode":"E75189846F6616","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632339,"discussion_content":"请教老师下，let a: &amp;’static str=“hello”数据是分配在静态内存区域，let b: &amp;str=“world”是分配在堆上，可以这样理解吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700703749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}