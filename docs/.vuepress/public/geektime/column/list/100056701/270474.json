{"id":270474,"title":"03 | 高性能IO模型：为什么单线程Redis能那么快？","content":"<p>你好，我是蒋德钧。</p><p>今天，我们来探讨一个很多人都很关心的问题：“为什么单线程的Redis能那么快？”</p><p>首先，我要和你厘清一个事实，我们通常说，Redis是单线程，主要是指<strong>Redis的网络IO和键值对读写是由一个线程来完成的，这也是Redis对外提供键值存储服务的主要流程</strong>。但Redis的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。</p><p>所以，严格来说，Redis并不是单线程，但是我们一般把Redis称为单线程高性能，这样显得“酷”些。接下来，我也会把Redis称为单线程模式。而且，这也会促使你紧接着提问：“为什么用单线程？为什么单线程能这么快？”</p><p>要弄明白这个问题，我们就要深入地学习下Redis的单线程设计机制以及多路复用机制。之后你在调优Redis性能时，也能更有针对性地避免会导致Redis单线程阻塞的操作，例如执行复杂度高的命令。</p><p>好了，话不多说，接下来，我们就先来学习下Redis采用单线程的原因。</p><h2>Redis为什么用单线程？</h2><p>要更好地理解Redis为什么用单线程，我们就要先了解多线程的开销。</p><h3>多线程的开销</h3><p>日常写程序时，我们经常会听到一种说法：“使用多线程，可以增加系统吞吐率，或是可以增加系统扩展性。”的确，对于一个多线程的系统来说，在有合理的资源分配的情况下，可以增加系统中处理请求操作的资源实体，进而提升系统能够同时处理的请求数，即吞吐率。下面的左图是我们采用多线程时所期待的结果。</p><!-- [[[read_end]]] --><p>但是，请你注意，通常情况下，在我们采用多线程后，如果没有良好的系统设计，实际得到的结果，其实是右图所展示的那样。我们刚开始增加线程数时，系统吞吐率会增加，但是，再进一步增加线程时，系统吞吐率就增长迟缓了，有时甚至还会出现下降的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/33/cbd394e62219cc5a6d9ae64035e51733.jpg?wh=2284*858\" alt=\"\" title=\"线程数与系统吞吐率\"></p><p>为什么会出现这种情况呢？一个关键的瓶颈在于，系统中通常会存在被多线程同时访问的共享资源，比如一个共享的数据结构。当有多个线程要修改这个共享资源时，为了保证共享资源的正确性，就需要有额外的机制进行保证，而这个额外的机制，就会带来额外的开销。</p><p>拿Redis来说，在上节课中，我提到过，Redis有List的数据类型，并提供出队（LPOP）和入队（LPUSH）操作。假设Redis采用多线程设计，如下图所示，现在有两个线程A和B，线程A对一个List做LPUSH操作，并对队列长度加1。同时，线程B对该List执行LPOP操作，并对队列长度减1。为了保证队列长度的正确性，Redis需要让线程A和B的LPUSH和LPOP串行执行，这样一来，Redis可以无误地记录它们对List长度的修改。否则，我们可能就会得到错误的长度结果。这就是<strong>多线程编程模式面临的共享资源的并发访问控制问题</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/30/08/303255dcce6d0837bf7e2440df0f8e08.jpg?wh=3537*2250\" alt=\"\" title=\"多线程并发访问Redis\"></p><p>并发访问控制一直是多线程开发中的一个难点问题，如果没有精细的设计，比如说，只是简单地采用一个粗粒度互斥锁，就会出现不理想的结果：即使增加了线程，大部分线程也在等待获取访问共享资源的互斥锁，并行变串行，系统吞吐率并没有随着线程的增加而增加。</p><p>而且，采用多线程开发一般会引入同步原语来保护共享资源的并发访问，这也会降低系统代码的易调试性和可维护性。为了避免这些问题，Redis直接采用了单线程模式。</p><p>讲到这里，你应该已经明白了“Redis为什么用单线程”，那么，接下来，我们就来看看，为什么单线程Redis能获得高性能。</p><h2>单线程Redis为什么那么快？</h2><p>通常来说，单线程的处理能力要比多线程差很多，但是Redis却能使用单线程模型达到每秒数十万级别的处理能力，这是为什么呢？其实，这是Redis多方面设计选择的一个综合结果。</p><p>一方面，Redis的大部分操作在内存上完成，再加上它采用了高效的数据结构，例如哈希表和跳表，这是它实现高性能的一个重要原因。另一方面，就是Redis采用了<strong>多路复用机制</strong>，使其在网络IO操作中能并发处理大量的客户端请求，实现高吞吐率。接下来，我们就重点学习下多路复用机制。</p><p>首先，我们要弄明白网络操作的基本IO模型和潜在的阻塞点。毕竟，Redis采用单线程进行IO，如果线程被阻塞了，就无法进行多路复用了。</p><h3>基本IO模型与阻塞点</h3><p>你还记得我在<a href=\"https://time.geekbang.org/column/article/268262\">第一节课</a>介绍的具有网络框架的SimpleKV吗？</p><p>以Get请求为例，SimpleKV为了处理一个Get请求，需要监听客户端请求（bind/listen），和客户端建立连接（accept），从socket中读取请求（recv），解析客户端发送请求（parse），根据请求类型读取键值数据（get），最后给客户端返回结果，即向socket中写回数据（send）。</p><p>下图显示了这一过程，其中，bind/listen、accept、recv、parse和send属于网络IO处理，而get属于键值数据操作。既然Redis是单线程，那么，最基本的一种实现是在一个线程中依次执行上面说的这些操作。</p><p><img src=\"https://static001.geekbang.org/resource/image/e1/c9/e18499ab244e4428a0e60b4da6575bc9.jpg?wh=2700*1493\" alt=\"\" title=\"Redis基本IO模型\"></p><p>但是，在这里的网络IO操作中，有潜在的阻塞点，分别是accept()和recv()。当Redis监听到一个客户端有连接请求，但一直未能成功建立起连接时，会阻塞在accept()函数这里，导致其他客户端无法和Redis建立连接。类似的，当Redis通过recv()从一个客户端读取数据时，如果数据一直没有到达，Redis也会一直阻塞在recv()。</p><p>这就导致Redis整个线程阻塞，无法处理其他客户端请求，效率很低。不过，幸运的是，socket网络模型本身支持非阻塞模式。</p><h3>非阻塞模式</h3><p>Socket网络模型的非阻塞模式设置，主要体现在三个关键的函数调用上，如果想要使用socket非阻塞模式，就必须要了解这三个函数的调用返回类型和设置模式。接下来，我们就重点学习下它们。</p><p>在socket模型中，不同操作调用后会返回不同的套接字类型。socket()方法会返回主动套接字，然后调用listen()方法，将主动套接字转化为监听套接字，此时，可以监听来自客户端的连接请求。最后，调用accept()方法接收到达的客户端连接，并返回已连接套接字。</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/4a/1ccc62ab3eb2a63c4965027b4248f34a.jpg?wh=3744*1077\" alt=\"\" title=\"Redis套接字类型与非阻塞设置\"></p><p>针对监听套接字，我们可以设置非阻塞模式：当Redis调用accept()但一直未有连接请求到达时，Redis线程可以返回处理其他操作，而不用一直等待。但是，你要注意的是，调用accept()时，已经存在监听套接字了。</p><p>虽然Redis线程可以不用继续等待，但是总得有机制继续在监听套接字上等待后续连接请求，并在有请求时通知Redis。</p><p>类似的，我们也可以针对已连接套接字设置非阻塞模式：Redis调用recv()后，如果已连接套接字上一直没有数据到达，Redis线程同样可以返回处理其他操作。我们也需要有机制继续监听该已连接套接字，并在有数据达到时通知Redis。</p><p>这样才能保证Redis线程，既不会像基本IO模型中一直在阻塞点等待，也不会导致Redis无法处理实际到达的连接请求或数据。</p><p>到此，Linux中的IO多路复用机制就要登场了。</p><h3>基于多路复用的高性能I/O模型</h3><p>Linux中的IO多路复用机制是指一个线程处理多个IO流，就是我们经常听到的select/epoll机制。简单来说，在Redis只运行单线程的情况下，<strong>该机制允许内核中，同时存在多个监听套接字和已连接套接字</strong>。内核会一直监听这些套接字上的连接请求或数据请求。一旦有请求到达，就会交给Redis线程处理，这就实现了一个Redis线程处理多个IO流的效果。</p><p>下图就是基于多路复用的Redis IO模型。图中的多个FD就是刚才所说的多个套接字。Redis网络框架调用epoll机制，让内核监听这些套接字。此时，Redis线程不会阻塞在某一个特定的监听或已连接套接字上，也就是说，不会阻塞在某一个特定的客户端请求处理上。正因为此，Redis可以同时和多个客户端连接并处理请求，从而提升并发性。</p><p><img src=\"https://static001.geekbang.org/resource/image/00/ea/00ff790d4f6225aaeeebba34a71d8bea.jpg?wh=3472*2250\" alt=\"\" title=\"基于多路复用的Redis高性能IO模型\"></p><p>为了在请求到达时能通知到Redis线程，select/epoll提供了<strong>基于事件的回调机制</strong>，即<strong>针对不同事件的发生，调用相应的处理函数</strong>。</p><p>那么，回调机制是怎么工作的呢？其实，select/epoll一旦监测到FD上有请求到达时，就会触发相应的事件。</p><p>这些事件会被放进一个事件队列，Redis单线程对该事件队列不断进行处理。这样一来，Redis无需一直轮询是否有请求实际发生，这就可以避免造成CPU资源浪费。同时，Redis在对事件队列中的事件进行处理时，会调用相应的处理函数，这就实现了基于事件的回调。因为Redis一直在对事件队列进行处理，所以能及时响应客户端请求，提升Redis的响应性能。</p><p>为了方便你理解，我再以连接请求和读数据请求为例，具体解释一下。</p><p>这两个请求分别对应Accept事件和Read事件，Redis分别对这两个事件注册accept和get回调函数。当Linux内核监听到有连接请求或读数据请求时，就会触发Accept事件和Read事件，此时，内核就会回调Redis相应的accept和get函数进行处理。</p><p>这就像病人去医院瞧病。在医生实际诊断前，每个病人（等同于请求）都需要先分诊、测体温、登记等。如果这些工作都由医生来完成，医生的工作效率就会很低。所以，医院都设置了分诊台，分诊台会一直处理这些诊断前的工作（类似于Linux内核监听请求），然后再转交给医生做实际诊断。这样即使一个医生（相当于Redis单线程），效率也能提升。</p><p>不过，需要注意的是，即使你的应用场景中部署了不同的操作系统，多路复用机制也是适用的。因为这个机制的实现有很多种，既有基于Linux系统下的select和epoll实现，也有基于FreeBSD的kqueue实现，以及基于Solaris的evport实现，这样，你可以根据Redis实际运行的操作系统，选择相应的多路复用实现。</p><h2>小结</h2><p>今天，我们重点学习了Redis线程的三个问题：“Redis真的只有单线程吗？”“为什么用单线程？”“单线程为什么这么快？”</p><p>现在，我们知道了，Redis单线程是指它对网络IO和数据读写的操作采用了一个线程，而采用单线程的一个核心原因是避免多线程开发的并发控制问题。单线程的Redis也能获得高性能，跟多路复用的IO模型密切相关，因为这避免了accept()和send()/recv()潜在的网络IO操作阻塞点。</p><p>搞懂了这些，你就走在了很多人的前面。如果你身边还有不清楚这几个问题的朋友，欢迎你分享给他/她，解决他们的困惑。</p><p>另外，我也剧透下，可能你也注意到了，2020年5月，Redis 6.0的稳定版发布了，Redis  6.0中提出了多线程模型。那么，这个多线程模型和这节课所说的IO模型有什么关联？会引入复杂的并发控制问题吗？会给Redis 6.0带来多大提升？关于这些问题，我会在后面的课程中和你具体介绍。</p><h2>每课一问</h2><p>这节课，我给你提个小问题，在“Redis基本IO模型”图中，你觉得还有哪些潜在的性能瓶颈吗？欢迎在留言区写下你的思考和答案，我们一起交流讨论。</p>","neighbors":{"left":{"article_title":"02 | 数据结构：快速的Redis有哪些慢操作？","id":268253},"right":{"article_title":"04 | AOF日志：宕机了，Redis如何避免数据丢失？","id":271754}},"comments":[{"had_liked":false,"id":240669,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1597030652,"is_pvip":true,"discussion_count":76,"race_medal":0,"score":"5164147720444","product_id":100056701,"comment_content":"Redis单线程处理IO请求性能瓶颈主要包括2个方面：<br><br>1、任意一个请求在server中一旦发生耗时，都会影响整个server的性能，也就是说后面的请求都要等前面这个耗时请求处理完成，自己才能被处理到。耗时的操作包括以下几种：<br>\ta、操作bigkey：写入一个bigkey在分配内存时需要消耗更多的时间，同样，删除bigkey释放内存同样会产生耗时；<br>\tb、使用复杂度过高的命令：例如SORT&#47;SUNION&#47;ZUNIONSTORE，或者O(N)命令，但是N很大，例如lrange key 0 -1一次查询全量数据；<br>\tc、大量key集中过期：Redis的过期机制也是在主线程中执行的，大量key集中过期会导致处理一个请求时，耗时都在删除过期key，耗时变长；<br>\td、淘汰策略：淘汰策略也是在主线程执行的，当内存超过Redis内存上限后，每次写入都需要淘汰一些key，也会造成耗时变长；<br>\te、AOF刷盘开启always机制：每次写入都需要把这个操作刷到磁盘，写磁盘的速度远比写内存慢，会拖慢Redis的性能；<br>\tf、主从全量同步生成RDB：虽然采用fork子进程生成数据快照，但fork这一瞬间也是会阻塞整个线程的，实例越大，阻塞时间越久；<br>2、并发量非常大时，单线程读写客户端IO数据存在性能瓶颈，虽然采用IO多路复用机制，但是读写客户端数据依旧是同步IO，只能单线程依次读取客户端的数据，无法利用到CPU多核。<br><br>针对问题1，一方面需要业务人员去规避，一方面Redis在4.0推出了lazy-free机制，把bigkey释放内存的耗时操作放在了异步线程中执行，降低对主线程的影响。<br><br>针对问题2，Redis在6.0推出了多线程，可以在高并发场景下利用CPU多核多线程读写客户端数据，进一步提升server性能，当然，只是针对客户端的读写是并行的，每个命令的真正操作依旧是单线程的。","like_count":1203,"discussions":[{"author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366273,"discussion_content":"“并发量非常大时，单线程读写客户端IO数据存在性能瓶颈，虽然采用IO多路复用机制，但是读写客户端数据依旧是同步IO”： 这里同步 IO 并不是指直接整个网络IO是同步的，而是指从内核缓冲区中拷贝数据的操作是同步操作。","likes_number":39,"is_delete":false,"is_hidden":false,"ctime":1618018890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366397,"discussion_content":"是的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1618050481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":366273,"ip_address":""},"score":366397,"extra":""},{"author":{"id":1891396,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/dc/44/3aedb9de.jpg","nickname":"TOUYI","note":"","ucode":"C26DB9930EA97A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382287,"discussion_content":"强如领哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625496480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":366273,"ip_address":""},"score":382287,"extra":""},{"author":{"id":1467274,"avatar":"","nickname":"Jacob","note":"","ucode":"0ED8082C08A9F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1145650,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/32/60089a62.jpg","nickname":"杨领well","note":"","ucode":"3974A03855168C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395781,"discussion_content":"为什么不用nio呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632353302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":366273,"ip_address":""},"score":395781,"extra":""}]},{"author":{"id":1253597,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/dd/82d8eff2.jpg","nickname":"Mine","note":"","ucode":"85C3A3117FD9CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327671,"discussion_content":"老哥开课吧，我贷款买😭","likes_number":19,"is_delete":false,"is_hidden":false,"ctime":1605886670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236971,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/eb/0e741729.jpg","nickname":"holyman","note":"","ucode":"65C02E95ED211C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375286,"discussion_content":"如果少了大佬的评论，我相信这个redis专栏的销售数量，会少很多","likes_number":17,"is_delete":false,"is_hidden":false,"ctime":1621563010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300549,"discussion_content":"我都把你的评论当正文看了","likes_number":17,"is_delete":false,"is_hidden":false,"ctime":1598167877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1355831,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b0/37/d654fbac.jpg","nickname":"几近虚年","note":"","ucode":"28CD6486EED8E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359208,"discussion_content":"mark，看完回来复习。就喜欢大神们的评论，这才是不看盗版的真正原因，哈哈。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1616139768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1355831,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b0/37/d654fbac.jpg","nickname":"几近虚年","note":"","ucode":"28CD6486EED8E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373168,"discussion_content":"兄弟跟我一样，买了盗版，看了评论区之后果断买了正版","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1620638509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":359208,"ip_address":""},"score":373168,"extra":""},{"author":{"id":1355831,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b0/37/d654fbac.jpg","nickname":"几近虚年","note":"","ucode":"28CD6486EED8E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381243,"discussion_content":"学完了一遍，重新开始复习，打卡","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624966409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":373168,"ip_address":""},"score":381243,"extra":""}]},{"author":{"id":1351860,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a0/b4/5173f1af.jpg","nickname":"小不点","note":"","ucode":"C307D44A185C34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299298,"discussion_content":"大哥，一天不看到你我就难受","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1597648642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568097,"discussion_content":"本质上redis用epoll解耦网络io后 主流程操作就没必要再用线程池来顶，因为此时操作相当于弱化为：IO模型+CPU 内存操作。\n简单来说 read+write +linux网络栈分拆都可以交由内核函数来做 。而redis主线程就变成了内存级别的读写 此时就变成了CPU time。\n\n因此针对cpu time确实没必要太多线程（通常来说可以接受 但不绝对）。举个简单的例子：nginx\n所以redis进一步的优化其实也可以在启动时 做settask绑核。\n\n再来回答下老师的问题就简单了，所有造成CPU time拉升的操作都会出问题：\n1.redis现有api中 凡是O(N) O(N^2)的都是潜在因素\n2.fork时 构造子进程 绘制pcb时 本身也是个O(N) ，所以大数据量的单实例redis 会卡顿\n3.内存淘汰时 redis4.0之前都是在主线程里做的 \n","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1651065961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373170,"discussion_content":"大佬，什么时候出书？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1620638554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1229070,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c1/0e/2b987d54.jpg","nickname":"蜉蝣","note":"","ucode":"77CF92496855D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301809,"discussion_content":"每次看到大佬的留言很安心，记笔记时也总会写进去。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1598667520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1581390,"avatar":"https://static001.geekbang.org/account/avatar/00/18/21/4e/363b1e65.jpg","nickname":"Andrew胖虎","note":"","ucode":"ED70A22E7DF733","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342662,"discussion_content":"rehash也算一个","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1610769375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1811277,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a3/4d/59390ba9.jpg","nickname":"排骨","note":"","ucode":"A413CF46211E1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1581390,"avatar":"https://static001.geekbang.org/account/avatar/00/18/21/4e/363b1e65.jpg","nickname":"Andrew胖虎","note":"","ucode":"ED70A22E7DF733","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575010,"discussion_content":"rehash不是渐进式的吗？应该不算吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654520676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":342662,"ip_address":""},"score":575010,"extra":""}]},{"author":{"id":2018869,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/FQQA0icGXUvJZicd7jX1r85MmH2XgpQUlkXNpB2u9OibCc1k3ITJwaqbZm7WQiaT93hWYDRBCJMsThuL62PLTaP5hQ/132","nickname":"ytyee","note":"","ucode":"05079CE049A8FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343030,"discussion_content":"马克，等我学完再回来了解下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610931186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104100,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d8/e4/7cc47d20.jpg","nickname":"Alexander","note":"","ucode":"5EF394E93A1715","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340271,"discussion_content":"e，aof刷盘也是在主线程中执行的吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609940207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1470434,"avatar":"https://static001.geekbang.org/account/avatar/00/16/6f/e2/f3b05833.jpg","nickname":"A 拽丫头","note":"","ucode":"F875D99D18DF6E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1104100,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d8/e4/7cc47d20.jpg","nickname":"Alexander","note":"","ucode":"5EF394E93A1715","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580551,"discussion_content":"不一定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658243973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":340271,"ip_address":""},"score":580551,"extra":""}]},{"author":{"id":1029952,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b7/40/979af7cc.jpg","nickname":"敬彦辉","note":"","ucode":"99C18D514673FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330348,"discussion_content":"优秀哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606575525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2287252,"avatar":"https://static001.geekbang.org/account/avatar/00/22/e6/94/b8443fe7.jpg","nickname":"路飞大大","note":"","ucode":"B9C96899F3A957","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320772,"discussion_content":"老哥为啥这么优秀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604474757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2903068,"avatar":"","nickname":"Geek_05d654","note":"","ucode":"D10FB87A0A62A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577386,"discussion_content":"这个太牛了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656061246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1332200,"avatar":"https://static001.geekbang.org/account/avatar/00/14/53/e8/137a75f5.jpg","nickname":"linco_66","note":"","ucode":"8C79B1605F7720","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574291,"discussion_content":"针对第二点，线上就有过写入一个bigkey时超时了(1min)的体验。由于使用的是Lettuce客户端，默认连接是共享复用的，所以影响了其他使用redis的服务。。。解决方案是先设置ShareNativeConnection配置为false，每次客户端请求都使用新的连接。。。如果使用Redis6.0的话，应该写入bigkey的时候可以快点？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653959196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2925869,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/a5/2d/dce6f248.jpg","nickname":"风中告退","note":"","ucode":"6D157E902BECEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555815,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647075945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553310,"discussion_content":"偷偷标记一下，后面知识点忘记了就可以用这个回顾下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645845582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1114878,"avatar":"https://static001.geekbang.org/account/avatar/00/11/02/fe/d539b96b.jpg","nickname":"曹翔","note":"","ucode":"B4D8B42DFB535C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548342,"discussion_content":"关注一波","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643156874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2880327,"avatar":"","nickname":"Geek_a1ecbb","note":"","ucode":"BF9D0FE71B7077","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546058,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642144336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048367,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/2f/172b942b.jpg","nickname":"扬帆起航","note":"","ucode":"708B686F19B8DE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532981,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637746039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e7/a7/9825371e.jpg","nickname":"Penn","note":"","ucode":"2D73D9C2AED26F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532695,"discussion_content":"大佬，啥时出书？每章在评论区看到你我才安心","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637668238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1208727,"avatar":"https://static001.geekbang.org/account/avatar/00/12/71/97/f1a3d398.jpg","nickname":"张永志","note":"","ucode":"E54B75EF3F63B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532667,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637663210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000565,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/75/5e6d6975.jpg","nickname":"冯威","note":"","ucode":"52A4F1989DD286","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392866,"discussion_content":"bigkey 指的key 还是value","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631157958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1093258,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ae/8a/e67def95.jpg","nickname":"赤云","note":"","ucode":"67476D582D8B6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1000565,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/75/5e6d6975.jpg","nickname":"冯威","note":"","ucode":"52A4F1989DD286","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":403180,"discussion_content":"key是全局hash表存储的，key基本都是字符串 或者 二进制，能设置多大。。。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1634026715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":392866,"ip_address":""},"score":403180,"extra":""}]},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392363,"discussion_content":"清除过期数据每次执行是有个上限时间的，通常是cpu执行时间的1/4.所以即使量大也不应该很大影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630982102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2739957,"avatar":"","nickname":"Geek_39299b","note":"","ucode":"908C2FC4DECD33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389770,"discussion_content":"“当然，只是针对客户端的读写是并行的，每个命令的真正操作依旧是单线程的。” 这句话怎能理解呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629427805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1692946,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d5/12/55817604.jpg","nickname":"皓","note":"","ucode":"5B0A61D6C482D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2739957,"avatar":"","nickname":"Geek_39299b","note":"","ucode":"908C2FC4DECD33","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562752,"discussion_content":"内核空间跟外部介质（比如网卡或磁盘）之间的数据拷贝用了多路复用，但是内核空间与用户空间之间的数据拷贝以及在用户空间内部的的数据处理是单线程的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649875084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389770,"ip_address":""},"score":562752,"extra":""},{"author":{"id":1692946,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d5/12/55817604.jpg","nickname":"皓","note":"","ucode":"5B0A61D6C482D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2739957,"avatar":"","nickname":"Geek_39299b","note":"","ucode":"908C2FC4DECD33","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562753,"discussion_content":"6.0版本的多线程指的是数据在网卡（即客户端）与内核缓冲区之间的拷贝支持多个线程操作","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649875875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389770,"ip_address":""},"score":562753,"extra":""}]},{"author":{"id":1433570,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/e2/c6d9cb4c.jpg","nickname":"钟小强","note":"","ucode":"012B705562FDE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386638,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627703934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1460069,"avatar":"https://static001.geekbang.org/account/avatar/00/16/47/65/5534850b.jpg","nickname":"请叫我猿叔叔","note":"","ucode":"44BD74AF78E1DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382895,"discussion_content":"牛逼牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625757589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1389314,"avatar":"https://static001.geekbang.org/account/avatar/00/15/33/02/83f47bf9.jpg","nickname":"流沙","note":"","ucode":"6153686D1C34B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379102,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623684045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1304804,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e8/e4/c9dd6058.jpg","nickname":"阿基米德","note":"","ucode":"065D6529C12B81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378325,"discussion_content":"总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623163332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2536791,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/57/49dfb810.jpg","nickname":"202126","note":"","ucode":"ECB1589A9B64C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376043,"discussion_content":"mark 从别的地方搬过来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621937746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1890006,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/d6/d6/5fbb6e00.jpg","nickname":"再忙也要充充电","note":"","ucode":"098F2D9D280D60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373682,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620825366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101408,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/60/7d17522d.jpg","nickname":"君莫惜","note":"","ucode":"FD570371148000","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370278,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619355461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1875343,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqHMAwG4atmGDJ2MtH9A3ua8N7rtxu7gAiaomCVJ53U2OBxLWibQa9gicmgfoTy4mCgFRoknes6iaJyEQ/132","nickname":"黄楷文","note":"","ucode":"130546198B6F55","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361323,"discussion_content":" Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616641997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253310,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/be/551454e0.jpg","nickname":"zxy","note":"","ucode":"FFAA3F6667305D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359055,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616111479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2053611,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/55/eb/a441eda8.jpg","nickname":"梁聪明","note":"","ucode":"712FAD6E071585","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356718,"discussion_content":"mark🐎","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615648645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109640,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/88/a890b41e.jpg","nickname":"chris","note":"","ucode":"6663E3E09457E3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354657,"discussion_content":"总结得很nice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615308825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2415329,"avatar":"https://static001.geekbang.org/account/avatar/00/24/da/e1/40f3331f.jpg","nickname":"童年梦","note":"","ucode":"4FBDB3E628BAC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351099,"discussion_content":"马克一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614153512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1340702,"avatar":"https://static001.geekbang.org/account/avatar/00/14/75/1e/356dbf4a.jpg","nickname":"Spike","note":"","ucode":"9CE0EE743A89C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341168,"discussion_content":"大量的 key 过期并不会导致 redis 主线程阻塞。redis 是使用 lazy 以及后台周期采样删除的机制淘汰过期 key.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610335350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1340702,"avatar":"https://static001.geekbang.org/account/avatar/00/14/75/1e/356dbf4a.jpg","nickname":"Spike","note":"","ucode":"9CE0EE743A89C2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341178,"discussion_content":"看后面的文章你就知道了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610337990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341168,"ip_address":""},"score":341178,"extra":""},{"author":{"id":1211617,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL7nbF0llCZTAFnTzpfclRjDLCvCAAK2huDoHa3NWWbrAicxpzlLPiaLT5mg6hXXaKI5jc7pPFmI4Bg/132","nickname":"天帝十万年","note":"","ucode":"90C6245F1D7D8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":352021,"discussion_content":"就喜欢你这种傲娇劲!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614572431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341178,"ip_address":""},"score":352021,"extra":""},{"author":{"id":1277081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","nickname":"lakeslove","note":"","ucode":"65E14D29D3C981","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1340702,"avatar":"https://static001.geekbang.org/account/avatar/00/14/75/1e/356dbf4a.jpg","nickname":"Spike","note":"","ucode":"9CE0EE743A89C2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361589,"discussion_content":"你把过期策略和内存淘汰搞混了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616699689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341168,"ip_address":""},"score":361589,"extra":""}]},{"author":{"id":1254772,"avatar":"http://thirdwx.qlogo.cn/mmopen/Q3auHgzwzM65SVeCJLGTkwpjypqPTI5mcAtMoe6dbH2JbCPDliaBob0IkGLSezzdKhDrWu2PFnGdX6LPPUiaU8Xw/132","nickname":"jkbxiao","note":"","ucode":"819EE5F289A09D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338489,"discussion_content":"问题2的解决方案多问一句： 如何不同线程读写的顺序性如何保证？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609299797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1104100,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d8/e4/7cc47d20.jpg","nickname":"Alexander","note":"","ucode":"5EF394E93A1715","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254772,"avatar":"http://thirdwx.qlogo.cn/mmopen/Q3auHgzwzM65SVeCJLGTkwpjypqPTI5mcAtMoe6dbH2JbCPDliaBob0IkGLSezzdKhDrWu2PFnGdX6LPPUiaU8Xw/132","nickname":"jkbxiao","note":"","ucode":"819EE5F289A09D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340269,"discussion_content":"不是读写同一个key的话，无需考虑顺序，是同一个key的话，估计也是用了互斥机制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609940079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":338489,"ip_address":""},"score":340269,"extra":""},{"author":{"id":1474954,"avatar":"https://static001.geekbang.org/account/avatar/00/16/81/8a/15a96a64.jpg","nickname":"Gatsby","note":"","ucode":"5DBFDA12556BDB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1254772,"avatar":"http://thirdwx.qlogo.cn/mmopen/Q3auHgzwzM65SVeCJLGTkwpjypqPTI5mcAtMoe6dbH2JbCPDliaBob0IkGLSezzdKhDrWu2PFnGdX6LPPUiaU8Xw/132","nickname":"jkbxiao","note":"","ucode":"819EE5F289A09D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340516,"discussion_content":"是读写socket并行化，操作数据的还是单线程吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610021183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":338489,"ip_address":""},"score":340516,"extra":""},{"author":{"id":1803932,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/86/9c/f1c43834.jpg","nickname":"Walk beside you","note":"","ucode":"C3FDED0004C763","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1474954,"avatar":"https://static001.geekbang.org/account/avatar/00/16/81/8a/15a96a64.jpg","nickname":"Gatsby","note":"","ucode":"5DBFDA12556BDB","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":353715,"discussion_content":"对的，对数据的操作一直都是主线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615194710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":340516,"ip_address":""},"score":353715,"extra":""}]},{"author":{"id":1618704,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b3/10/123b345f.jpg","nickname":"俊杰锅","note":"","ucode":"94B1AB400433FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335294,"discussion_content":"优秀！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608150214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2361560,"avatar":"","nickname":"Geek_1bc715","note":"","ucode":"075433EA1AFE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333914,"discussion_content":"秀啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607672962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1207622,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6d/46/e16291f8.jpg","nickname":"丁小明","note":"","ucode":"CC23857B8D75D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323071,"discussion_content":"之前在那边看到过，删除key是只做标记，由fork子线程来删除","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604882964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1807836,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/95/dc/07195a63.jpg","nickname":"锋","note":"","ucode":"F26BC1F14AB0D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322220,"discussion_content":"大佬你好，问题2中的【读写客户端数据】指的是，server处理完请求，进行response阶段给client的过程吗？谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604707300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1807836,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/95/dc/07195a63.jpg","nickname":"锋","note":"","ucode":"F26BC1F14AB0D7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322231,"discussion_content":"读取请求数据、处理数据、写回响应。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604709745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":322220,"ip_address":""},"score":322231,"extra":""},{"author":{"id":1807836,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/95/dc/07195a63.jpg","nickname":"锋","note":"","ucode":"F26BC1F14AB0D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":322460,"discussion_content":"谢谢大佬","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604746534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":322231,"ip_address":""},"score":322460,"extra":""}]},{"author":{"id":1670246,"avatar":"https://static001.geekbang.org/account/avatar/00/19/7c/66/73eabdd2.jpg","nickname":"无名十三","note":"","ucode":"4E8F487838BA64","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304544,"discussion_content":"第一种情况还有一个rehash也会造成一定的迟延，虽然redis是渐进式扩容机制，也会造成同时存在两个list，需要判断的机制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599612359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028940,"avatar":"","nickname":"Geek6561","note":"","ucode":"D44141D4AD2587","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299033,"discussion_content":"定期删除应该是另外一个线程吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597540906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2028940,"avatar":"","nickname":"Geek6561","note":"","ucode":"D44141D4AD2587","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299072,"discussion_content":"不是，是主线程。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597554876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299033,"ip_address":""},"score":299072,"extra":""},{"author":{"id":2088504,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/de/38/428f8024.jpg","nickname":"小小","note":"","ucode":"D75C6593555D61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":301412,"discussion_content":"K神好,10s一次执行的定期删除,确定是主线程执行的吗?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598519455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299072,"ip_address":""},"score":301412,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2088504,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/de/38/428f8024.jpg","nickname":"小小","note":"","ucode":"D75C6593555D61","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301415,"discussion_content":"是主线程。但不是10s，而是100ms就执行一次。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598519832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301412,"ip_address":""},"score":301415,"extra":""}]},{"author":{"id":1124982,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/76/36fdddb3.jpg","nickname":"低调","note":"","ucode":"7D29B371BE9A46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298527,"discussion_content":"c点，为什么会这么处理，龟腚么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597317787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1336009,"avatar":"https://static001.geekbang.org/account/avatar/00/14/62/c9/7da27891.jpg","nickname":"DKSky","note":"","ucode":"69371A81033949","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1124982,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/76/36fdddb3.jpg","nickname":"低调","note":"","ucode":"7D29B371BE9A46","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":299094,"discussion_content":"线程安全吧，如果是单独的线程处理过期key和主线程存在同时访问同一个key的情况","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597561851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298527,"ip_address":""},"score":299094,"extra":""}]},{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298301,"discussion_content":"老哥稳啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597240794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1031037,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bb/7d/1f4b4697.jpg","nickname":"BR","note":"","ucode":"2CF588390A5D34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297728,"discussion_content":"第二点应该就是老师所说的瓶颈。因此才会有6.0版本的 IO Threads 的设计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597035113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240631,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1597022117,"is_pvip":true,"discussion_count":19,"race_medal":0,"score":"542762901413","product_id":100056701,"comment_content":"1.big key的操作。<br>2.潜在的大量数据操作，比如 key *或者get all之类的操作，所以才引入了scan的相关操作。<br>3.特殊的场景，大量的客户端接入。<br><br><br>简单介绍下select poll epoll的区别，select和poll本质上没啥区别，就是文件描述符数量的限制，select根据不同的系统，文件描述符限制为1024或者2048，poll没有数量限制。他两都是把文件描述符集合保存在用户态，每次把集合传入内核态，内核态返回ready的文件描述符。<br>epoll是通过epoll_create和epoll_ctl和epoll_await三个系统调用完成的，每当接入一个文件描述符，通过ctl添加到内核维护的红黑树中，通过事件机制，当数据ready后，从红黑树移动到链表，通过await获取链表中准备好数据的fd，程序去处理。","like_count":127,"discussions":[{"author":{"id":1113737,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","nickname":"xuanyuan","note":"","ucode":"1EC79B9372868F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334276,"discussion_content":"理解基本到位，感觉老师没有讲清楚，哈哈","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1607782270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120332,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/4c/e12f3b41.jpg","nickname":"姜姜","note":"","ucode":"1DAD620C8E9F31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316424,"discussion_content":"再补充一点，select每次监听事件返回，是从内核态拷贝到用户态，而且是返回所有fd的集合，依旧需要扫描才知道哪个fd是活跃的;\n而epoll直接返回的是活跃的fd，并且epoll采用mmap的机智，不需要将数据从内核态到用户态的拷贝，所以十分高效。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1603412421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1120332,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/4c/e12f3b41.jpg","nickname":"姜姜","note":"","ucode":"1DAD620C8E9F31","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316550,"discussion_content":"select和poll是用传入的fds是全部返回，程序需要遍历dfs哪些有event了，所以性能有影响，epoll返回的都是有event的fd，可以直接使用，判断是那种事件即可。\n\nepoll没有采用mmap，你可以在看看，可能早起的版本有，现在是没有的","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1603424811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":316424,"ip_address":""},"score":316550,"extra":""},{"author":{"id":1670165,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/SvSVONfKXq3QnvSKhoRib9UeCKSJaxKVCSIC5urjniawOCEeriasSs7I9q2utq6yjptic6F8ky3rOVV0clXnyU4Oqg/132","nickname":"Geek_710b8d","note":"","ucode":"F18CB19246901B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":399582,"discussion_content":"我刚想说这个区别，评论区还是大佬多\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632995489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":316550,"ip_address":""},"score":399582,"extra":""}]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568100,"discussion_content":"首先要说清epoll解决什么问题：\n1. 解决了select系列拷贝fd给内核查询的效率问题 注意这里有两次拷贝\n2. 解决了同步非阻塞O(N)级别轮询问题。有几个socket 就要轮询几个它的fd\n\n以上交由epoll后 这些都不存在","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651066272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2660316,"avatar":"https://static001.geekbang.org/account/avatar/00/28/97/dc/8eacc8f1.jpg","nickname":"漠博嵩","note":"","ucode":"33704880E9790F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552011,"discussion_content":"大佬,  操作系统是怎么回调 用户代码的?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645234580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2660316,"avatar":"https://static001.geekbang.org/account/avatar/00/28/97/dc/8eacc8f1.jpg","nickname":"漠博嵩","note":"","ucode":"33704880E9790F","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":552066,"discussion_content":"没有回调用户代码呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645267652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552011,"ip_address":""},"score":552066,"extra":""}]},{"author":{"id":1808678,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/99/26/c83909a4.jpg","nickname":"Cyen","note":"","ucode":"AE84A2892A701C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384712,"discussion_content":"总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626707206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2455765,"avatar":"https://static001.geekbang.org/account/avatar/00/25/78/d5/256d9a90.jpg","nickname":"丶","note":"","ucode":"E58127DDC683B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375382,"discussion_content":"大佬些，你们这些东西是在哪里看的？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621599295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2455765,"avatar":"https://static001.geekbang.org/account/avatar/00/25/78/d5/256d9a90.jpg","nickname":"丶","note":"","ucode":"E58127DDC683B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375487,"discussion_content":"从网络基础到网络模型，网络模型有一种多路复用，这几种都属于多路复用","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1621683849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375382,"ip_address":""},"score":375487,"extra":""}]},{"author":{"id":1031038,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bb/7e/32734996.jpg","nickname":"得志","note":"","ucode":"673B8BA8958E1C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321251,"discussion_content":"加油吧！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604553757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1436839,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ec/a7/7d44c655.jpg","nickname":"snailshen","note":"","ucode":"C4875C476649B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312508,"discussion_content":"还有一点select要用户程序区主洞轮训fd，而epool不用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602724820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","nickname":"君哥聊技术","note":"","ucode":"2C9A22BCE4C79E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297896,"discussion_content":"select和poll的数据结构不一样吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597105537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1325816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","nickname":"君哥聊技术","note":"","ucode":"2C9A22BCE4C79E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298053,"discussion_content":"这两个数据结构没有仔细研究🤣🤣🤣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597158032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297896,"ip_address":""},"score":298053,"extra":""},{"author":{"id":1686552,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bc/18/8746bc20.jpg","nickname":"To be pro","note":"","ucode":"30833B1AE222B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":312613,"discussion_content":"select是使用位图实现，epoll是基于红黑树实现的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602747902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298053,"ip_address":""},"score":312613,"extra":""},{"author":{"id":2384157,"avatar":"https://static001.geekbang.org/account/avatar/00/24/61/1d/07e4d68e.jpg","nickname":"挖土豆","note":"","ucode":"BB1939900AC8A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1325816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","nickname":"君哥聊技术","note":"","ucode":"2C9A22BCE4C79E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386531,"discussion_content":"select是list，epoll是链表","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627629020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297896,"ip_address":""},"score":386531,"extra":""}]},{"author":{"id":1462396,"avatar":"https://static001.geekbang.org/account/avatar/00/16/50/7c/f1203495.jpg","nickname":"之一","note":"","ucode":"45307FBDBEA953","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297737,"discussion_content":"到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597040106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1462396,"avatar":"https://static001.geekbang.org/account/avatar/00/16/50/7c/f1203495.jpg","nickname":"之一","note":"","ucode":"45307FBDBEA953","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298052,"discussion_content":"一起加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597157997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297737,"ip_address":""},"score":298052,"extra":""}]}]},{"had_liked":false,"id":241393,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1597283867,"is_pvip":false,"discussion_count":6,"race_medal":1,"score":"418209111579","product_id":100056701,"comment_content":"Redis 的单线程指 Redis 的网络 IO 和键值对读写由一个线程来完成的（这是 Redis 对外提供键值对存储服务的主要流程）<br>Redis 的持久化、异步删除、集群数据同步等功能是由其他线程而不是主线程来执行的，所以严格来说，Redis 并不是单线程<br><br>为什么用单线程？<br>多线程会有共享资源的并发访问控制问题，为了避免这些问题，Redis 采用了单线程的模式，而且采用单线程对于 Redis 的内部实现的复杂度大大降低<br><br>为什么单线程就挺快？<br>1.Redis 大部分操作是在内存上完成，并且采用了高效的数据结构如哈希表和跳表<br>2.Redis 采用多路复用，能保证在网络 IO 中可以并发处理大量的客户端请求，实现高吞吐率<br><br>Redis 6.0 版本为什么又引入了多线程？<br>Redis 的瓶颈不在 CPU ，而在内存和网络，内存不够可以增加内存或通过数据结构等进行优化<br>但 Redis 的网络 IO 的读写占用了发部分 CPU 的时间，如果可以把网络处理改成多线程的方式，性能会有很大提升<br>所以总结下 Redis 6.0 版本引入多线程有两个原因<br>1.充分利用服务器的多核资源<br>2.多线程分摊 Redis 同步 IO 读写负荷<br><br>执行命令还是由单线程顺序执行，只是处理网络数据读写采用了多线程，而且 IO 线程要么同时读 Socket ，要么同时写 Socket ，不会同时读写","like_count":98,"discussions":[{"author":{"id":1260141,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/910b2445.jpg","nickname":"Wheat","note":"","ucode":"7D99EA149B6DE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380073,"discussion_content":"大佬，已经从好几个专栏都看到你的评论了，紧随你的步伐","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1624328670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1502122,"avatar":"https://static001.geekbang.org/account/avatar/00/16/eb/aa/357d0442.jpg","nickname":"小苏","note":"","ucode":"F28C22A1AFCE6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387719,"discussion_content":"同时写的话,不会引入锁机制吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628385513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1502122,"avatar":"https://static001.geekbang.org/account/avatar/00/16/eb/aa/357d0442.jpg","nickname":"小苏","note":"","ucode":"F28C22A1AFCE6A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392399,"discussion_content":"上面说的写是指网络的IO，向消费端返回的写，不会涉及操作同一个文件，不用锁","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1630995421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387719,"ip_address":""},"score":392399,"extra":""}]},{"author":{"id":2344071,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c4/87/174fa848.jpg","nickname":"Lzh","note":"","ucode":"49E1E7028972DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371421,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619765359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323045,"avatar":"https://static001.geekbang.org/account/avatar/00/14/30/25/fd2fdeb8.jpg","nickname":"Jetman","note":"","ucode":"C134806482DA3E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324623,"discussion_content":"请问为什么不会同时读写Io","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605144923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1309908,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fc/d4/743d3f02.jpg","nickname":"Anthony","note":"","ucode":"9E0C98A9123365","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1323045,"avatar":"https://static001.geekbang.org/account/avatar/00/14/30/25/fd2fdeb8.jpg","nickname":"Jetman","note":"","ucode":"C134806482DA3E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330737,"discussion_content":"如果有同时读写的话，就需要引入锁来保证数据的正确性，即需要维护锁增加了系统的复杂度，又降低了性能","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1606699986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":324623,"ip_address":""},"score":330737,"extra":""}]}]},{"had_liked":false,"id":253414,"user_name":"林肯","can_delete":false,"product_type":"c1","uid":1008582,"ip_address":"","ucode":"D2C97220230DE5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/c6/d6ea3df3.jpg","comment_is_top":false,"comment_ctime":1602731740,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"263595736796","product_id":100056701,"comment_content":"反复看了很多遍终于明白了：关键点在于accpet和recv时可能会阻塞线程，使用IO多路复用技术可以让线程先处理其他事情，等需要的资源到位后epoll会调用回调函数通知线程，然后线程再去处理存&#47;取数据；这样一个redis服务端线程就可以同时处理多个客户端请求了。<br>redis之所以适合用多路复用技术有一个很重要的原因时它是在内存中处理数据速度极快，这时io成了瓶颈。为什么Mysql不用多路复用技术呢？因为Mysql的主要性能瓶颈在于数据的存&#47;取，优化方向不一样。","like_count":62,"discussions":[{"author":{"id":1178502,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fb/86/a380cbad.jpg","nickname":"柳磊","note":"","ucode":"FC1513ECDA3604","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334822,"discussion_content":"我理解“多路复用技术”主要是解决c10k问题，不管是redis还是mysql，多路复用都会带来好处，只是为什么mysql server不用呢？我和你理解差不多，mysql server是cpu密集型（聚合函数，排序这类的），就算使用了多路复用技术，可以减少了io线程，但处理并发的业务线程不能减少，而且sql是有session事务的概念，同一个事务中的sql必须按顺序执行，那这个事务就必须一个单独的线程去处理，最后使用的线程真的较少了？","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1607998931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":2739957,"avatar":"","nickname":"Geek_39299b","note":"","ucode":"908C2FC4DECD33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1178502,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fb/86/a380cbad.jpg","nickname":"柳磊","note":"","ucode":"FC1513ECDA3604","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389776,"discussion_content":"是怕 多路复用招的太多线程了 mysql 后台线程根本不能招架的主，mysql还有acid 属性呢。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1629428525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334822,"ip_address":""},"score":389776,"extra":""},{"author":{"id":1110706,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f2/b2/de353ede.jpg","nickname":"yYe","note":"","ucode":"62D27117CE842E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1178502,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fb/86/a380cbad.jpg","nickname":"柳磊","note":"","ucode":"FC1513ECDA3604","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572158,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652623807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334822,"ip_address":""},"score":572158,"extra":""},{"author":{"id":1110706,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f2/b2/de353ede.jpg","nickname":"yYe","note":"","ucode":"62D27117CE842E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2739957,"avatar":"","nickname":"Geek_39299b","note":"","ucode":"908C2FC4DECD33","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572159,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652623833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":389776,"ip_address":""},"score":572159,"extra":""}]},{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358784,"discussion_content":"理清楚bio nio nio+selector就明白了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1616049926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1110706,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f2/b2/de353ede.jpg","nickname":"yYe","note":"","ucode":"62D27117CE842E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572163,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652624147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":358784,"ip_address":""},"score":572163,"extra":""}]},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391324,"discussion_content":"mysql的数据还是以存硬盘为主，即使是ssd存储查询效率是无法和内存相比的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630399168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113737,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","nickname":"xuanyuan","note":"","ucode":"1EC79B9372868F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334280,"discussion_content":"mysql 不用是历史问题吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607782830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1008582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/c6/d6ea3df3.jpg","nickname":"林肯","note":"","ucode":"D2C97220230DE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1113737,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","nickname":"xuanyuan","note":"","ucode":"1EC79B9372868F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334437,"discussion_content":"具体是什么历史问题呢，如果是历史问题最新的mysql8版本为什么不使用呢，愿闻其详","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1607848156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334280,"ip_address":""},"score":334437,"extra":""}]}]},{"had_liked":false,"id":240998,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1597146047,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"263590151103","product_id":100056701,"comment_content":"1，作者讲了什么？<br>\tredis实现单线程实现高性能IO的设计机制<br>2，作者是怎么把这事给讲明白的？<br>\t作者首先从简单的网络通信socket讲起，引出了非阻塞socket，由此谈到了著名的I&#47;O多路复用，Linux内核的select&#47;epoll机制<br>3，为了讲明白，作者讲了哪些要点?有哪些亮点？<br>\t（1）首先声明“redis单线程”这个概念的具体含义<br>\t（2）引入具体业务场景：redis的数据读取，事件处理机制模型<br>\t（3）解析单线程相对多线程带来的优势，已及多线程所特有的问题<br>\t（4）基于redis单线程的，设计机制，引出了网络socket的问题","like_count":62,"discussions":[{"author":{"id":2739957,"avatar":"","nickname":"Geek_39299b","note":"","ucode":"908C2FC4DECD33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389773,"discussion_content":"非凡哥 永不迟到","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629428344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240701,"user_name":"曾轼麟","can_delete":false,"product_type":"c1","uid":1451391,"ip_address":"","ucode":"D418371AC11270","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","comment_is_top":false,"comment_ctime":1597039972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"164805797220","product_id":100056701,"comment_content":"虽然单线程很快，没有锁的单线程更快借助CPU的多级缓存可以把性能发挥到最大。但是随着访问量的增加，以及数据量的增加，IO的写入写出会成为性能瓶颈。10个socket的IO吞吐处理肯定比1000个socket吞吐处理的快，为了解决这个问题，Redis6引入了IO多线程的方式以及client缓冲区，在实际指令处理还是单线程模式。在IO上变成的了【主线程】带着众多【IO线程】进行IO，IO线程听从主线程的指挥是写入还是写出。Read的时候IO线程会和主线程一起读取并且解析命令（RESP协议）存入缓冲区，写的时候会从缓冲区写出到Socket。IO线程听从主线程的指挥，在同一个时间点上主线程和IO线程会一起写出或者读取，并且主线程会等待IO线程的结束。但是这种模式的多线程会面临一给NUMA陷阱的问题，在最近的Redis版本中加强了IO线程和CPU的亲和性解决了这个问题。（不过目前官方在默认情况下并不推荐使用多线程IO模式，需要手动开启）","like_count":39},{"had_liked":false,"id":267924,"user_name":"柳磊","can_delete":false,"product_type":"c1","uid":1178502,"ip_address":"","ucode":"FC1513ECDA3604","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/86/a380cbad.jpg","comment_is_top":false,"comment_ctime":1607997800,"is_pvip":false,"replies":[{"id":"97902","content":"在Redis 6.0版本前，Redis用一个线程实现网络请求的解析和读写处理，我个人觉得主要还是这种线程模型实现简单。<br><br>不过随着网络硬件越来越快后，网络请求收发更快了，所以从Redis 6.0开始，网络请求解析也是由专门的线程处理，从而支持快速网络读写。而读写处理仍然由单个主线程执行，这是为了避免多线程协调的开销。","user_name":"作者回复","comment_id":267924,"uid":"1609687","ip_address":"","utype":1,"ctime":1608974164,"user_name_real":"蒋德钧"}],"discussion_count":3,"race_medal":0,"score":"147636885864","product_id":100056701,"comment_content":"作者您好，引用文中一段话“我们知道了，Redis 单线程是指它对网络 IO 和数据读写的操作采用了一个线程”，我有个疑问，redis为什么要网络IO与业务处理（读写）用一个线程？而不用Netty中常见的Reactor线程模型，把io线程（netty中的boss线程）与业务处理线程（netty中的work线程）分开，业务处理线程只开启一个线程，也不会有共享资源竞争的问题。","like_count":35,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511792,"discussion_content":"在Redis 6.0版本前，Redis用一个线程实现网络请求的解析和读写处理，我个人觉得主要还是这种线程模型实现简单。\n\n不过随着网络硬件越来越快后，网络请求收发更快了，所以从Redis 6.0开始，网络请求解析也是由专门的线程处理，从而支持快速网络读写。而读写处理仍然由单个主线程执行，这是为了避免多线程协调的开销。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608974164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568101,"discussion_content":"网络io 与 内存读写分拆开来 。本身就是reactor实现的一种方式 个人觉得是redislab拖到6.0才开始改动","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651066351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2536791,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/57/49dfb810.jpg","nickname":"202126","note":"","ucode":"ECB1589A9B64C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376044,"discussion_content":"是的，在很大程度上线程间的切换很消耗性能","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621938089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242295,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1597663852,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"78907075180","product_id":100056701,"comment_content":"Redis的网络模式是单reactor模式。non-blocking io + epoll","like_count":19,"discussions":[{"author":{"id":2739957,"avatar":"","nickname":"Geek_39299b","note":"","ucode":"908C2FC4DECD33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389778,"discussion_content":"燕来如此","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629428595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244968,"user_name":"Geek_84971a","can_delete":false,"product_type":"c1","uid":1744776,"ip_address":"","ucode":"5F79D841FE6F61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIiao0orF0gDeDCwnAEicrCgY6NickyOJ8ialw0GiavInZL0DMctRYlZicj4bLMNTtBmFtH4eIiaVfr8DPVw/132","comment_is_top":false,"comment_ctime":1598767228,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"74613211260","product_id":100056701,"comment_content":"老师在讲解redis网络IO模型的时候，如果可以结合epoll的多路复用机制，顺便提一下redis源码里面的实现，相信可以让人理解的更加深入一些；","like_count":18,"discussions":[{"author":{"id":1071668,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5a/34/4cbadca6.jpg","nickname":"吃饭睡觉打酱油","note":"","ucode":"95EC98C2B5045B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376211,"discussion_content":"能请教下是哪个课程么，求告知\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622018059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372948,"discussion_content":"其他课程有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620536724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2653118,"avatar":"https://static001.geekbang.org/account/avatar/00/28/7b/be/ff1714a0.jpg","nickname":"哈哈嘿嘿","note":"","ucode":"6BAE7FA56E4BE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544518,"discussion_content":"哪个课程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641544422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":372948,"ip_address":""},"score":544518,"extra":""},{"author":{"id":1140762,"avatar":"https://static001.geekbang.org/account/avatar/00/11/68/1a/d9a35bc7.jpg","nickname":"Ziggy_aa","note":"","ucode":"B8921BF0C11DDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2653118,"avatar":"https://static001.geekbang.org/account/avatar/00/28/7b/be/ff1714a0.jpg","nickname":"哈哈嘿嘿","note":"","ucode":"6BAE7FA56E4BE0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554817,"discussion_content":"老师 Redis 源码阅读的课程。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646629864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":544518,"ip_address":""},"score":554817,"extra":""}]}]},{"had_liked":false,"id":269739,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1608774638,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"57443349486","product_id":100056701,"comment_content":"re: <br>原文一：Redis 在对事件队列中的事件进行处理时，会调用相应的处理函数，这就实现了基于事件的回调。<br><br>原文二：此时，内核就会回调 Redis 相应的 accept 和 get 函数进行处理。<br><br><br>是redis 调用accept 和 get函数，还是内核吖？谢谢老师。","like_count":13,"discussions":[{"author":{"id":1788265,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/49/69/6d579bd1.jpg","nickname":"Myron","note":"","ucode":"AA49DE6CE9B50E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573819,"discussion_content":"同问：一会内核调，一会redis调，晕晕的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653662935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2027258,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/ee/fa/31361552.jpg","nickname":"X","note":"","ucode":"688D816A4931CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566891,"discussion_content":"顶上去，我也是有这个疑问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650791071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383872,"discussion_content":"这些事件会被放进一个事件队列，Redis 单线程对该事件队列不断进行处理。这样一来，Redis 无需一直轮询是否有请求实际发生，这就可以避免造成 CPU 资源浪费。同时，Redis 在对事件队列中的事件进行处理时，会调用相应的处理函数，这就实现了基于事件的回调。因为 Redis 一直在对事件队列进行处理，所以能及时响应客户端请求，提升 Redis 的响应性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626262980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102245,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/a5/2bbedc3b.jpg","nickname":"over","note":"","ucode":"FE272AC19842D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375344,"discussion_content":"redis里调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621585662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1804087,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/87/37/b071398c.jpg","nickname":"等风来🎧","note":"","ucode":"B6BB8714A0B019","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345948,"discussion_content":"顶上去哎，我也有这样的疑问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611821731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250623,"user_name":"wwj","can_delete":false,"product_type":"c1","uid":1053787,"ip_address":"","ucode":"B98AE5F5D85A87","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLzvaL724GwtzZ5mcldUnlicicSlI8BXL9icRZbUOB10qjRMlmog7UTvwxSBHXagnPGGR1BYdjWcGGSg/132","comment_is_top":false,"comment_ctime":1601175559,"is_pvip":false,"discussion_count":17,"race_medal":0,"score":"57435750407","product_id":100056701,"comment_content":"这篇的io模型和我了解到的不一样，既然是select&#47;epoll的模式，那应该就是Reactor设计模式，哪来的回调，回调肯定设计到多个线程，单线程模式在用户层不可能有回调的，如果是在内核层的话，是有aio模式，但select&#47;epoll明显不是aio的实现","like_count":13,"discussions":[{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386490,"discussion_content":"我也感觉讲的好模糊。。。刚看两节感觉总有一些感觉不对，每讲感都有点到为止的感觉。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1627613307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1436839,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ec/a7/7d44c655.jpg","nickname":"snailshen","note":"","ucode":"C4875C476649B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312509,"discussion_content":"图中说的回调，我理解时事件触发后的执行方法","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1602725188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1113883,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/1b/09b4d12f.jpg","nickname":"花开季末","note":"","ucode":"5D44075AEB737D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1436839,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ec/a7/7d44c655.jpg","nickname":"snailshen","note":"","ucode":"C4875C476649B1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320429,"discussion_content":"我也这么理解的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604366993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312509,"ip_address":""},"score":320429,"extra":""}]},{"author":{"id":2364366,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ0L9a0y8JQYK6ugqyD0ZkibU69C3McSZ2TCgjyDf3gpL9Esic91TicpLIH9iaTBZibMiaJG5bWOvibU0fNg/132","nickname":"GreyFoss","note":"","ucode":"83E523BB4602CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343009,"discussion_content":"赞同，epoll线程也会阻塞，阻塞在epoll_wait上，等待事件的到来，epoll提升性能在于能同时监听多个套接字。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1610900092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2640551,"avatar":"https://static001.geekbang.org/account/avatar/00/28/4a/a7/ab7998b1.jpg","nickname":"zachary","note":"","ucode":"B22B95FCECD6E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2364366,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ0L9a0y8JQYK6ugqyD0ZkibU69C3McSZ2TCgjyDf3gpL9Esic91TicpLIH9iaTBZibMiaJG5bWOvibU0fNg/132","nickname":"GreyFoss","note":"","ucode":"83E523BB4602CC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381214,"discussion_content":"可以阻塞，也可以不阻塞。看你传入的时间参数","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624955778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":343009,"ip_address":""},"score":381214,"extra":""},{"author":{"id":2549905,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e8/91/7e69edfe.jpg","nickname":"。。。","note":"","ucode":"37B0B5166EB853","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2640551,"avatar":"https://static001.geekbang.org/account/avatar/00/28/4a/a7/ab7998b1.jpg","nickname":"zachary","note":"","ucode":"B22B95FCECD6E7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406196,"discussion_content":"在select事件列表的时候可以不带参数，那就不阻塞，直接返回。当时阻塞在select上的是客户端链接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634719278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":381214,"ip_address":""},"score":406196,"extra":""}]},{"author":{"id":2640551,"avatar":"https://static001.geekbang.org/account/avatar/00/28/4a/a7/ab7998b1.jpg","nickname":"zachary","note":"","ucode":"B22B95FCECD6E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381213,"discussion_content":"话说这一讲关于redis网络io的讲解是比较模糊的，通过看源码，回调就是指文件描述的事件触发后，执行处理方法。例如读事件处理方法rFileProc, 写事件处理方法wFileProc。跟select/epoll没有太多关系。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1624955704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1263466,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2UW4tvsLn61NwNc2vlvxLJggTthc1vKTn4ibzeBic2ibiczCj9pDNMKmMFtZ1t7yAiaGFuthZNRkJiao9JC8fGxcuq1w/132","nickname":"xxmodd","note":"","ucode":"98ED0846635E87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333600,"discussion_content":"这里的回调我理解为不同的事件处理器，不同的事件由不同事件处理器处理（连接应答处理器、命令请求处理器、命令回复处理器）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607571681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1258803,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/33/7797074f.jpg","nickname":"动稽不纯","note":"","ucode":"9E74A28AA603B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311822,"discussion_content":"赞同 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602494527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2781060,"avatar":"","nickname":"Geek_39bdd5","note":"","ucode":"CEC28F9978165F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588074,"discussion_content":"redis单线程处理，操作系统实现epoll肯定要多个线程啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663517990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1445744,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","nickname":"槑·先生","note":"","ucode":"897F0475592E3A","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390265,"discussion_content":"同感，感觉跟以前理解的io多路复用不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629731490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386491,"discussion_content":"没有评论感觉不咋滴","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627613385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002452,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","nickname":"波波安","note":"","ucode":"2A677908E5A75D","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385287,"discussion_content":"赞同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626965110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2640551,"avatar":"https://static001.geekbang.org/account/avatar/00/28/4a/a7/ab7998b1.jpg","nickname":"zachary","note":"","ucode":"B22B95FCECD6E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381215,"discussion_content":"严格来说，linux系统是不支持异步io","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624955865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005528,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/d8/425e1b0a.jpg","nickname":"小虾米","note":"","ucode":"F543987A7FAB20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356412,"discussion_content":"是的，提供的接口只能指定关心的事件类型，并没有回调机制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615597016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2261175,"avatar":"","nickname":"Geek_b8d5c9","note":"","ucode":"505F33B4C0EA31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320706,"discussion_content":"中断啊  中断","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604458581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2147220,"avatar":"https://static001.geekbang.org/account/avatar/00/20/c3/94/e89ebc50.jpg","nickname":"神毓逍遥","note":"","ucode":"83351CB18B190E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2261175,"avatar":"","nickname":"Geek_b8d5c9","note":"","ucode":"505F33B4C0EA31","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338425,"discussion_content":"DMA中断？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609288653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320706,"ip_address":""},"score":338425,"extra":""}]}]},{"had_liked":false,"id":269539,"user_name":"万历十五年","can_delete":false,"product_type":"c1","uid":1122150,"ip_address":"","ucode":"3D8CF5DF847AE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/66/59e0647a.jpg","comment_is_top":false,"comment_ctime":1608695289,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"53148302841","product_id":100056701,"comment_content":"个人理解，IO多路复用简单说是IO阻塞或非阻塞的都不准确。严格来说应用程序从网络读取数据到数据可用，分两个阶段：第一阶段读网络数据到内核，第二阶段读内核数据到用户态。IO多路复用解决了第一阶段阻塞问题，而第二阶段的读取阻塞的串行读。为了进一步提高REDIS的吞吐量，REDIS6.0使用多线程利用多CPU的优势解决第二阶段的阻塞。说的不对的地方，请斧正。","like_count":12,"discussions":[{"author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374712,"discussion_content":"这个描述非常清晰，赞！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621324196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1183318,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0e/56/2c5691b2.jpg","nickname":"布兜兜","note":"","ucode":"E8B0F47D52E826","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555869,"discussion_content":"是不是应该第一阶段啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647088514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392428,"discussion_content":"redis使用mmap，内核态和用户态应该不存在数据拷贝问题了。个人觉得应该是用户态读取数据的那边","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631002707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2435071,"avatar":"https://static001.geekbang.org/account/avatar/00/25/27/ff/996d942f.jpg","nickname":"愚者","note":"","ucode":"6B1B759E40D948","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372604,"discussion_content":"赞同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620390751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181456,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/10/ee592ef1.jpg","nickname":"郭明伟","note":"","ucode":"57AD189A6473E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352551,"discussion_content":"个人理解：多路是只多个文件描述符，复用是只由一个线程来监听多个文件描述符上发生的 IO 事件（可读、可写等）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614767981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241019,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1597152115,"is_pvip":true,"discussion_count":2,"race_medal":1,"score":"48841792371","product_id":100056701,"comment_content":"Redis的事件处理队列只有一个吗？不同的事件的优先级都是一样的吗？只是简单的按照对接的先进先出的特性依次进行处理的吗？","like_count":11,"discussions":[{"author":{"id":1183318,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0e/56/2c5691b2.jpg","nickname":"布兜兜","note":"","ucode":"E8B0F47D52E826","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555868,"discussion_content":"事件队列只有一个instance，队列都是按照先进先出的原则进栈出栈。所以如果某个事件处理很耗时，后面的事件没有办法处理导致性能瓶颈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647088424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244283,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fc/7b/adfef198.jpg","nickname":"一位不愿透漏姓名的足球名宿","note":"","ucode":"2A67AD14C1F436","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342736,"discussion_content":"只有一个，我猜应该是按照触发的先后顺序。就是一个数组，然后单线程遍历执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610801763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259085,"user_name":"竹真","can_delete":false,"product_type":"c1","uid":1333642,"ip_address":"","ucode":"451C7393CBCA80","user_header":"https://static001.geekbang.org/account/avatar/00/14/59/8a/82587883.jpg","comment_is_top":false,"comment_ctime":1604628088,"is_pvip":false,"replies":[{"id":"98018","content":"Redis 6.0前的版本是用一个线程来读取网络请求并进行解析，并根据请求的具体命令操作进行数据读写的。Redis 6.0开始，网络请求的解析可以用多线程来执行，但是读写内存还是一个线程。","user_name":"作者回复","comment_id":259085,"uid":"1609687","ip_address":"","utype":1,"ctime":1609081825,"user_name_real":"蒋德钧"}],"discussion_count":3,"race_medal":0,"score":"40259333752","product_id":100056701,"comment_content":"作者您好，读完您的文章还有点疑惑，Redis读取客户端数据和读内存是一个线程？","like_count":9,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508843,"discussion_content":"Redis 6.0前的版本是用一个线程来读取网络请求并进行解析，并根据请求的具体命令操作进行数据读写的。Redis 6.0开始，网络请求的解析可以用多线程来执行，但是读写内存还是一个线程。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609081825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2108971,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ddHq6BGjrZhgYx6KZsRMKPQjpCZnVPD7L3PVWNH7nnOPPwC8cfvRSbuseTeHSEpuAiagtAfOibfMRuRRYktFwqnA/132","nickname":"Geek_d7d7d1","note":"","ucode":"C9C9BB75105A62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368721,"discussion_content":"要是能在文中“基于多路复用的Redis高性能IO模型”图中标注出来哪一步代表网络IO，哪一步代表数据存取就好了，中间隔了一个事件队列，实在想象不出来它一个线程是怎么工作的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618817208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1119911,"avatar":"https://static001.geekbang.org/account/avatar/00/11/16/a7/b3491533.jpg","nickname":"酸菜泡面","note":"","ucode":"74592566C52E74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333500,"discussion_content":"不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607529589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241583,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1065310,"ip_address":"","ucode":"E5D21F2A3359CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/5e/9d2953a3.jpg","comment_is_top":false,"comment_ctime":1597365131,"is_pvip":false,"replies":[{"id":"89304","content":"是的，所以如果有慢操作的话，就会影响其他操作了。","user_name":"作者回复","comment_id":241583,"uid":"1609687","ip_address":"","utype":1,"ctime":1597557015,"user_name_real":"蒋德钧"}],"discussion_count":1,"race_medal":0,"score":"35957103499","product_id":100056701,"comment_content":"老师分析的 redis io 模型中，redis 线程是循环处理每个事件的。如果其中一个事件比较耗时，会影响后面事件的及时处理。","like_count":8,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503782,"discussion_content":"是的，所以如果有慢操作的话，就会影响其他操作了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597557015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240599,"user_name":"咸鱼","can_delete":false,"product_type":"c1","uid":1179028,"ip_address":"","ucode":"5E79636DE48155","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","comment_is_top":false,"comment_ctime":1596990693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31661761765","product_id":100056701,"comment_content":"这章让我对IO多路复用的理解又深了些","like_count":7},{"had_liked":false,"id":285561,"user_name":"文进","can_delete":false,"product_type":"c1","uid":2257439,"ip_address":"","ucode":"CD1B6196EBC448","user_header":"https://static001.geekbang.org/account/avatar/00/22/72/1f/9ddfeff7.jpg","comment_is_top":false,"comment_ctime":1616898695,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27386702471","product_id":100056701,"comment_content":"IO多路的单线程模型：<br>1，redis启动时，向epoll注册还未使用的FD的可连接事件。<br>2，连接事件产生时，epoll机制自动将其放入自己的可连接事件队列中。<br>3，redis线程调用epoll的wait，获取所有事件，拷贝存入自己用户线程的内存队列中。<br>4，遍历这些内存队列，通过事件分派器，交由对应事件处理器处理。如是可连接事件则交由对应的连接应答事件处理器处理。可读事件交给命令请求处理器，可写事件交给命令回复处理器处理。<br>5，对应处理器执行相应逻辑。执行完成时，再次向epoll注册对应事件，比如连接事件的那个FD，接下来要注册可读事件，并重新注册可连接事件。命令请求处理器执行完后，要将FD注册可写事件。命令回复处理器执行完后，需要将FD取消注册可写事件。<br>6，产生了新的注册（如可读事件）之后，又回到了2，等待新的事件产生。","like_count":6,"discussions":[{"author":{"id":2856313,"avatar":"","nickname":"Yipsen","note":"","ucode":"F0ECE8C12AF105","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535119,"discussion_content":"有个疑问，讲到交给对应的事件处理器，那事件处理器是另外一个线程？如果不是，那是不是先到先得，一样占用本主线程处理的？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638357337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1840097,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJq1QledRhFicNMRYDJ1ibCveUqlrtIYhDCvAicOmmnia3GPrjjepDZhibXMJ0iabTsibVC2KMZtoIG4A9icg/132","nickname":"xuwen_chen","note":"","ucode":"03C766DEA69DF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376141,"discussion_content":"第三步epollwait应该不涉及到用户态和内核态的拷贝吧，记得epoll利用到了mmap创建了共享内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621991830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1840097,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJq1QledRhFicNMRYDJ1ibCveUqlrtIYhDCvAicOmmnia3GPrjjepDZhibXMJ0iabTsibVC2KMZtoIG4A9icg/132","nickname":"xuwen_chen","note":"","ucode":"03C766DEA69DF1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392432,"discussion_content":"我觉得第三步就不应该存在的吧，epol-wait操作好像已经调用相关处理方法了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631003728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376141,"ip_address":""},"score":392432,"extra":""}]}]},{"had_liked":false,"id":261033,"user_name":"BrightLoong","can_delete":false,"product_type":"c1","uid":1165304,"ip_address":"","ucode":"361FB1840C2977","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/f8/6b311ad9.jpg","comment_is_top":false,"comment_ctime":1605175884,"is_pvip":false,"replies":[{"id":"98052","content":"在Redis 6.0前，网络请求的解析和数据读写都是由主线程来完成的，这也是我们称之为单线程的原因。<br><br>从Redis 6.0开始，网络请求的解析是由其他线程完成，然后把解析后的请求交由主线程进行实际的内存读写。","user_name":"作者回复","comment_id":261033,"uid":"1609687","ip_address":"","utype":1,"ctime":1609113747,"user_name_real":"蒋德钧"}],"discussion_count":6,"race_medal":0,"score":"23080012364","product_id":100056701,"comment_content":"Redis 单线程是指它对网络 IO 和数据读写的操作采用了一个线程<br>对这句话不是很理解，总觉得是处理网络IO是一个线程，然后把事件放入队列；读写操作又是一个线程，从队列中处理请求。求解答","like_count":5,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509354,"discussion_content":"在Redis 6.0前，网络请求的解析和数据读写都是由主线程来完成的，这也是我们称之为单线程的原因。\n\n从Redis 6.0开始，网络请求的解析是由其他线程完成，然后把解析后的请求交由主线程进行实际的内存读写。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609113747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2108971,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ddHq6BGjrZhgYx6KZsRMKPQjpCZnVPD7L3PVWNH7nnOPPwC8cfvRSbuseTeHSEpuAiagtAfOibfMRuRRYktFwqnA/132","nickname":"Geek_d7d7d1","note":"","ucode":"C9C9BB75105A62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367524,"discussion_content":"我也是同样疑问，既然是单线程处理到底，还加入事件队列做什么，直接一条线处理完就可以了。这一块能把源码调出来讲解一下就好了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1618387099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1317999,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","nickname":"嘉木","note":"","ucode":"AF4877693782C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2108971,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ddHq6BGjrZhgYx6KZsRMKPQjpCZnVPD7L3PVWNH7nnOPPwC8cfvRSbuseTeHSEpuAiagtAfOibfMRuRRYktFwqnA/132","nickname":"Geek_d7d7d1","note":"","ucode":"C9C9BB75105A62","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390834,"discussion_content":"有多个连接时候，如果有连接只是连上来不请求数据，或者请求频率很低，redis一直阻塞地等待这个连接的请求，会导致其他连接的请求无法处理的吧；如果用非阻塞接口，那么需要遍历连接队列，查询是否有数据到达，耗系统资源；用事件的话，只要有连接上来、有数据请求就处理，不耽误其他连接的请求也不浪费资源","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630069852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":367524,"ip_address":""},"score":390834,"extra":""}]},{"author":{"id":1349358,"avatar":"https://static001.geekbang.org/account/avatar/00/14/96/ee/9b21c199.jpg","nickname":"咸","note":"","ucode":"1F189A2B1A6A71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398912,"discussion_content":"老师，可以理解为6.0之前redis是的网络模型是阻塞式的嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632875994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2108971,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ddHq6BGjrZhgYx6KZsRMKPQjpCZnVPD7L3PVWNH7nnOPPwC8cfvRSbuseTeHSEpuAiagtAfOibfMRuRRYktFwqnA/132","nickname":"Geek_d7d7d1","note":"","ucode":"C9C9BB75105A62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367527,"discussion_content":"包括举的医生诊断的例子，挂号量体温之类的操作是门诊处理的（IO），医生处理核心的诊断部分（单线程读写）；但是下文又说redis6.0之前的IO和读写都是主线程处理的，挺疑惑的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618387373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2257169,"avatar":"https://static001.geekbang.org/account/avatar/00/22/71/11/2d5cdb14.jpg","nickname":"pretty.zh","note":"","ucode":"E22A1817B39F22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331601,"discussion_content":"和你想的一样，求解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606911458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243768,"user_name":"Y、先生","can_delete":false,"product_type":"c1","uid":1604447,"ip_address":"","ucode":"9D3BC6AF916BCA","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/5f/3400d01b.jpg","comment_is_top":false,"comment_ctime":1598270588,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23073107068","product_id":100056701,"comment_content":"现在，我们知道了，Redis 单线程是指它对网络 IO 和数据读写的操作采用了一个线程。 <br>这里的网络IO是指redis处理事件队列的阶段么，数据读写对应的是回调函数，是这样理解吗。 这部分很困惑，希望老师帮忙确认下","like_count":5,"discussions":[{"author":{"id":1244283,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fc/7b/adfef198.jpg","nickname":"一位不愿透漏姓名的足球名宿","note":"","ucode":"2A67AD14C1F436","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342738,"discussion_content":"网络IO是对socket的读和写，数据读写我理解应该使用command操作内存中的数据","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610801965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241203,"user_name":"Mr.蜜","can_delete":false,"product_type":"c1","uid":1035257,"ip_address":"","ucode":"C911B81198B3F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","comment_is_top":false,"comment_ctime":1597214971,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"23072051451","product_id":100056701,"comment_content":"忘记提另一个问题，既然老师说道select和epoll，为什么不提一下poll呢？","like_count":5,"discussions":[{"author":{"id":1896868,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f1/a4/79c36b87.jpg","nickname":"流云","note":"","ucode":"26C5A9166EC6D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301547,"discussion_content":"select基本上是所有OS平台都实现了的API，epoll是linux下性能最高的IO模型，基本上讲这两个足矣","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598574036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1865908,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/78/b4/af163d12.jpg","nickname":"雨天的七毫米","note":"","ucode":"963BBAFE8EF97B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299062,"discussion_content":"这方便的知识，自己网上找一篇 select  poll epoll 的对比就知道了，一个小知识点。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597550940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1035257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","nickname":"Mr.蜜","note":"","ucode":"C911B81198B3F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1865908,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/78/b4/af163d12.jpg","nickname":"雨天的七毫米","note":"","ucode":"963BBAFE8EF97B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301310,"discussion_content":"如果都去百度，还需要老师干嘛？每个老师对每个知识点的理解，总有些区别，听取百家之常很有益！","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598488219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299062,"ip_address":""},"score":301310,"extra":""}]},{"author":{"id":2261175,"avatar":"","nickname":"Geek_b8d5c9","note":"","ucode":"505F33B4C0EA31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320707,"discussion_content":"一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604459560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107772,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e7/3c/366c15ca.jpg","nickname":"浪里个狼","note":"","ucode":"2085BB3632DCAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300770,"discussion_content":"Poll和Select区别没很大，最大区别就是监听的文件描述符数量区别。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598260107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1641662,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0c/be/ee3e52cf.jpg","nickname":"魏龙云","note":"","ucode":"7D6B5D9DA359A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1107772,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e7/3c/366c15ca.jpg","nickname":"浪里个狼","note":"","ucode":"2085BB3632DCAF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372044,"discussion_content":"还有一个是select存储的fd用的是数组😁 ，poll用的是链表","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1620138225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300770,"ip_address":""},"score":372044,"extra":""},{"author":{"id":1107772,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e7/3c/366c15ca.jpg","nickname":"浪里个狼","note":"","ucode":"2085BB3632DCAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1641662,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0c/be/ee3e52cf.jpg","nickname":"魏龙云","note":"","ucode":"7D6B5D9DA359A8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372987,"discussion_content":"对的老哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620556719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":372044,"ip_address":""},"score":372987,"extra":""}]},{"author":{"id":2104255,"avatar":"https://static001.geekbang.org/account/avatar/00/20/1b/bf/48de2ca3.jpg","nickname":"脚踏实地，砥砺前行","note":"","ucode":"273EAD9741748D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298266,"discussion_content":"希望老师能解答下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597230127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240622,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1597020449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23071856929","product_id":100056701,"comment_content":"单线程同步非阻塞读取网络IO的时候会有性能瓶颈，如果读取的内容过多的时候","like_count":5},{"had_liked":false,"id":276175,"user_name":"等风来🎧","can_delete":false,"product_type":"c1","uid":1804087,"ip_address":"","ucode":"B6BB8714A0B019","user_header":"https://static001.geekbang.org/account/avatar/00/1b/87/37/b071398c.jpg","comment_is_top":false,"comment_ctime":1611821906,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18791691090","product_id":100056701,"comment_content":"老师，有很多同学提出来相同的疑问，就是您在文中提到的，<br>原文一：Redis 在对事件队列中的事件进行处理时，会调用相应的处理函数，这就实现了基于事件的回调。<br><br>原文二：当 Linux 内核监听到有连接请求或读数据请求时，就会触发 Accept 事件和 Read 事件，此时，内核就会回调 Redis 相应的 accept 和 get 函数进行处理。<br><br><br>是redis 回调accept 和 get函数还是内核回调accept 和 get函数啊？希望老师看到后，有时间解答一下哈","like_count":4,"discussions":[{"author":{"id":1030816,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ba/a0/f03d20cd.jpg","nickname":"likun","note":"","ucode":"9145ED059CCC6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393270,"discussion_content":"是redis在用户态调用的处理函数 内核不会直接触发用户态函数的调用 只会把时间相关的信息拷贝到用户态\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631333952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258754,"user_name":"spoofer","can_delete":false,"product_type":"c1","uid":1768852,"ip_address":"","ucode":"6723F64ACC3F27","user_header":"https://static001.geekbang.org/account/avatar/00/1a/fd/94/8704d2b0.jpg","comment_is_top":false,"comment_ctime":1604549068,"is_pvip":false,"replies":[{"id":"98020","content":"耗时的系统调用，这个对高性能系统来说是个潜在瓶颈。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1609082206,"ip_address":"","comment_id":258754,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18784418252","product_id":100056701,"comment_content":"还有的性能瓶颈：即使io复用已经很牛叉了，但是redis线程始终是用户线程，要读取或者写入网络数据，还是要进行read和write的系统调用的，而系统调用是一个耗时的操作。so~~ 为什么6.0要引入多线程？一个原因就是要找些小弟来处理这个耗时的数据读写啊~~~","like_count":4,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508749,"discussion_content":"耗时的系统调用，这个对高性能系统来说是个潜在瓶颈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609082206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284110,"user_name":"张新亮","can_delete":false,"product_type":"c1","uid":2406845,"ip_address":"","ucode":"B68A71CDEA551A","user_header":"https://static001.geekbang.org/account/avatar/00/24/b9/bd/7fef12c8.jpg","comment_is_top":false,"comment_ctime":1616068024,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"14500969912","product_id":100056701,"comment_content":"为什么不把io线程和工作线程分开实现？<br>1，Io线程负责连接和数据读取，读到数据后加入事件队列<br>2，然后工作线程处理事件，处理后再把结果写到队列中<br>3，由io线程负责写出<br>这样不是充分利用多核优势吗？既没有锁，也没有频繁的上下文切换，除非服务器都用单核的CPU。","like_count":3},{"had_liked":false,"id":291829,"user_name":"Just Do IT","can_delete":false,"product_type":"c1","uid":1192724,"ip_address":"","ucode":"1EAD92510FA7BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","comment_is_top":false,"comment_ctime":1620540030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10210474622","product_id":100056701,"comment_content":"客户端发起请求，服务端监听到请求后创建相应的事件，并将事件放进事件队列中，每一次的请求一定会产生两种事件(1. accept  2.read或write)，否则没有意义，因为read或write才是“业务”，而accept是一定要在它们之前创建的，因为只有连接成功了才能去读或写，所以，监听套接字针对每个请求会创建一个或多个事件，而accept事件主要用来创建write或read事件的操作“通道”，通道创建成功后，write或read事件才能顺理成章的进行操作。","like_count":2},{"had_liked":false,"id":270670,"user_name":"Geek_21dc67","can_delete":false,"product_type":"c1","uid":2349829,"ip_address":"","ucode":"346C0FD69D02F6","user_header":"","comment_is_top":false,"comment_ctime":1609211862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10199146454","product_id":100056701,"comment_content":"蒋老师，现在工作中要用到redis，搜到了你的课程，学习后收益匪浅<br>但是由于刚开始学习，在使用中性能方面遇到了问题：<br>由于所做的项目对性能要求很高，程序每一次流程下来，仅需要几十微妙之内完成<br>一个流程中，需要将提取到的相关信息缓存到redis<br>但是自己使用hiredis写了同步客户端测试程序和异步客户端程序<br>发现同步的时候，一个读或者写都至少需要七八十微妙<br>异步的则一般是几微妙<br>因此想使用异步来做，网上查资料的时候，发现hiredis的异步有不少问题<br>现在想请教下老师<br>在C++模式下开发，对性能有要求的话，应该选择redis的哪一个客户端更好？<br><br><br>","like_count":2},{"had_liked":false,"id":269380,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1608628462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10198563054","product_id":100056701,"comment_content":"IO 多路复用伪代码：<br>``` python<br><br># \b返回主动套接字<br>sock = socket.socket()<br><br># 转换为监听套接字<br>sock.bind(ip, port)<br>sock.listen()<br>sock.setblocking(False)<br><br># selector 对象<br>selector = selectors.DefaultSelector()<br>selector.register(sock, selectors.EVENT_READ, accept)<br><br><br># accept 事件回调函数<br>def accept(sock:socket.socket):<br>  # 已连接套接字<br>  conn, _ = sock.accept()<br>  conn.setblocking(False)<br>  selector.register(conn, selectors.EVENT_READ, read)<br><br># read 事件回调函数<br>def read(conn:socket.socket): <br>  data = conn.recv(1024)<br><br><br>while True:<br>  # 监听注册的对象的事件，发生被关注事件则返回 events<br>  events = selector.select()<br>  # process events<br><br>```<br><br>问题：<br>1. 系统只有一个主动套接字<br>2. 系统只有一个监听套接字<br>3. 系统存在多个已连接套接字<br><br>请问老师，是这样么？","like_count":3},{"had_liked":false,"id":264729,"user_name":"华仔","can_delete":false,"product_type":"c1","uid":1102612,"ip_address":"","ucode":"E18F564F9F81BF","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/14/653b2a89.jpg","comment_is_top":false,"comment_ctime":1606619987,"is_pvip":false,"replies":[{"id":"97926","content":"称为单线程的进程可能更合适些，进程中处理读写操作的就是一个线程。也可以看下第10讲常见问题答疑中的第二个问题。<br><br>快照时是用的fork，创建新的子进程。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1608995390,"ip_address":"","comment_id":264729,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10196554579","product_id":100056701,"comment_content":"Redis在Linux上应该是单进程，不能说是单线程，main函数完成初始化后就进入事件循环处理，快照的时候也是直接fork一个新进程，而不是pthread_create一个新线程，请老师确认一下","like_count":2,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510668,"discussion_content":"称为单线程的进程可能更合适些，进程中处理读写操作的就是一个线程。也可以看下第10讲常见问题答疑中的第二个问题。\n\n快照时是用的fork，创建新的子进程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608995390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585862,"discussion_content":"但是我看了其他的专栏里面讲遇到一个进程下只有一个线程，那么线程等于进程，进程是拥有资源的基本单位，线程是调度的基本单位，可以这样理解码？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661850752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253227,"user_name":"STAND ALONE COMPLEX","can_delete":false,"product_type":"c1","uid":1595002,"ip_address":"","ucode":"2AC2F9B0A6D823","user_header":"https://static001.geekbang.org/account/avatar/00/18/56/7a/60c3d6a5.jpg","comment_is_top":false,"comment_ctime":1602657052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10192591644","product_id":100056701,"comment_content":"redis通过io多路复用，实现了事件处理的线程新建新连接和读写事件回调，读写事件的回调只是把读写请求放入队列，然后返回，这样事件的处理就能够不阻塞。然后由单个线程从队列中拿到读写请求进行处理。可以这样理解吗？","like_count":2},{"had_liked":false,"id":241094,"user_name":"gerry pang","can_delete":false,"product_type":"c1","uid":1068169,"ip_address":"","ucode":"54BD1D8DE1DBBF","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/89/e698c0a9.jpg","comment_is_top":false,"comment_ctime":1597190719,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10187125311","product_id":100056701,"comment_content":"老师，我有一点没太明白，<br>‘’Redis 的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。‘’<br>我看例如镜像文件的创建，redis不是后台fork出子进程吗？","like_count":2,"discussions":[{"author":{"id":1104032,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d8/a0/b811f01e.jpg","nickname":"明天再说","note":"","ucode":"027C8669A81BFD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301607,"discussion_content":"linux 中的线程就是轻量级进程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598586188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240611,"user_name":"滴流乱转小胖儿","can_delete":false,"product_type":"c1","uid":1231250,"ip_address":"","ucode":"4689236E65FE4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/c9/92/6361802a.jpg","comment_is_top":false,"comment_ctime":1597015276,"is_pvip":false,"replies":[{"id":"89323","content":"如果这个事件处理本身很耗时，例如对一个大集合的key进行全量操作（比如SMEMBERS, HGETALL），这也是会引起性能瓶颈的。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597572228,"ip_address":"","comment_id":240611,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10186949868","product_id":100056701,"comment_content":"老师你好，单线程的处理事件队列中的事件，这样还是会遇到性能瓶颈吧？  ","like_count":2,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503503,"discussion_content":"如果这个事件处理本身很耗时，例如对一个大集合的key进行全量操作（比如SMEMBERS, HGETALL），这也是会引起性能瓶颈的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597572228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342538,"user_name":"无尽蔚蓝","can_delete":false,"product_type":"c1","uid":2721761,"ip_address":"","ucode":"A665DF46833A81","user_header":"https://static001.geekbang.org/account/avatar/00/29/87/e1/b85dce85.jpg","comment_is_top":false,"comment_ctime":1650330883,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"5945298179","product_id":100056701,"comment_content":"弄了个随堂测试，希望能帮到大家<br>【随堂测试：Redis 核心技术与实战 】\r<br>\r<br># 03 | 高性能IO模型：为什么单线程Redis能那么快？\r<br>\r<br>## 【灵魂问题】该讲对应知识全景图的哪一块？\r<br>\r<br>## 3.1 Redis 是单线程，主要是指？\r<br>\r<br>## 3.2 Redis 为什么用单线程？\r<br>\r<br>## 3.3 单线程 Redis 为什么那么快（两方面）？\r<br>\r<br>### 3.3.1 基本 IO 模型与阻塞点 是什么？\r<br>\r<br>### 3.3.2 非阻塞模式的关键？\r<br>\r<br>### 3.3.3 基于多路复用的高性能 I&#47;O 模型是什么？\r<br>\r<br>## 3.4 每课一问: 在“Redis 基本 IO 模型”图中，你觉得还有哪些潜在的性能瓶颈吗？","like_count":2},{"had_liked":false,"id":310454,"user_name":"过","can_delete":false,"product_type":"c1","uid":1971776,"ip_address":"","ucode":"E772E179EE0179","user_header":"https://static001.geekbang.org/account/avatar/00/1e/16/40/c1d71b93.jpg","comment_is_top":false,"comment_ctime":1630659249,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5925626545","product_id":100056701,"comment_content":"老师，我想问一下，Redis既然使用Linux内核来代替自己做监听，那Linux内核做监听的时候会占用CPU吗<br>Linux内核在微观角度是一直在监听还是间断性的切换过来监听呢","like_count":1,"discussions":[{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588547,"discussion_content":"你自己想想数据通过啥途径到到内存当中的1：是通过网线到达网卡，那么linux的内核会调用硬中断快速处理把网卡的数据复制进来，然后通过软中断开始继续处理，去掉帧头帧尾到达网络层去掉ip包头到传输层，去掉tcp包头交给socket进入应用层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663830026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1136959,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epNoWjGv759Dn3v4kkRhUGr2wN48VwMdIDrH6q1XYHqmia21iaRqekQNslUefPyfsylnSeLnEuhBwdw/132","nickname":"shupian416","note":"","ucode":"4DC22BCF5C5414","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532553,"discussion_content":"linux内核监听，可以认为监听的是网卡,网卡有数据的时候会通过硬中断进行处理。所以这里不会占用CPU。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637644002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289641,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1619105819,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"5914073115","product_id":100056701,"comment_content":"医生和分诊台的例子非常形象，学习下！","like_count":1,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373174,"discussion_content":"参见大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620639871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1123163,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","nickname":"悟空聊架构","note":"","ucode":"C2F482A0CF8AF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373180,"discussion_content":"哇，有缘啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620641169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":373174,"ip_address":""},"score":373180,"extra":""}]}]},{"had_liked":false,"id":288462,"user_name":"keep_it_real","can_delete":false,"product_type":"c1","uid":2055554,"ip_address":"","ucode":"F5057CAF752FF3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","comment_is_top":false,"comment_ctime":1618478643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5913445939","product_id":100056701,"comment_content":"Redis单线程，如果读写请求量很大，就会有IO的瓶颈吧，毕竟是排在队列里，是一个个事件去执行的。","like_count":1},{"had_liked":false,"id":276908,"user_name":"Geek_3d51a3","can_delete":false,"product_type":"c1","uid":2306090,"ip_address":"","ucode":"4BEFF3CA6CCE50","user_header":"","comment_is_top":false,"comment_ctime":1612172631,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5907139927","product_id":100056701,"comment_content":"【redis为什么会用单线程？】作者阐述的原因有：1. 多线程的性能并不是呈线性增长的 2. 引入多线程需要处理“多线程下共享资源的并发访问空置” 3. 引入多线程会增加代码的调试难度和维护难度。<br>对于【1】是认可的，但是多线程会提升性能；对于【2】【3】的意思是为了降低redis的实现难度，就选用了单线程，对于这样的看法我是存在很大质疑的，实现mysql的难度比redis难很多，照这样的理解，mysql也应该是采用单线程。","like_count":1,"discussions":[{"author":{"id":1073236,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/54/b3eb605b.jpg","nickname":"阿牛","note":"","ucode":"DC8C189FCF3289","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358037,"discussion_content":"个人理解是这样的redis在CPU指令在内存中处理数据速度极快，网络 IO 的读写其实是瓶颈，所以使用其他线程处理。但是Mysql主要性能瓶颈在于数据的存/取，如果使用单线程那就太慢了。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1615905805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588548,"discussion_content":"mysql的瓶颈不在网络而是磁盘，磁盘的读写太慢，redis是内存进行读写操作，所以不能使用单线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663830318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273102,"user_name":"CityAnimal","can_delete":false,"product_type":"c1","uid":1139902,"ip_address":"","ucode":"206491F70572AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/64/be/12c37d15.jpg","comment_is_top":false,"comment_ctime":1610440801,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5905408097","product_id":100056701,"comment_content":"笔记打卡<br>    * [ ] 网络 IO 和键值对读写是由一个线程来完成的<br>    * [ ] 单线程设计机制<br>        * [ ] 多线程的开销<br>            * [ ] 共享资源的并发访问控制问题<br>            * [ ] 引入同步原语 -&amp;gt; 降低系统代码的易调试性和可维护性<br>        * [ ] 大部分操作在内存上完成+高效的数据结构<br>    * [ ] 多路复用机制<br>        * [ ] 基本IO模型&amp;amp;阻塞点<br>            * [ ] 流程：bind&#47;listen, accept, recv, parse | get | send<br>            * [ ] 阻塞模式<br>                * [ ] accept, recv, send 阻塞 =&amp;gt; 线程阻塞，无法处理其他客户端请求，效率很低<br>            * [ ] socket非阻塞模式<br>                * [ ] socket() | 返回主动套接字 | - | -<br>                * [ ] listen() | 返回监听套接字 | 可设置非阻塞模式 | accept()非阻塞<br>                * [ ] accept() | 返回已监听套接字 | 可设置非阻塞模式 | send()&#47;recv()非阻塞<br>        * [ ] 一个线程处理多个 IO 流 (select | epoll)<br>            * [ ] 允许内核中，同时存在多个监听套接字和已连接套接字<br>            * [ ] 内核会一直监听这些套接字上的连接请求或数据请求<br>            * [ ] 一旦有请求到达，就会交给 Redis 线程处理<br>        * [ ] Redis 网络框架调用 epoll 机制，让内核监听这些套接字<br>        * [ ] 内核提供了基于事件的回调机制<br>            * [ ] 即针对不同事件的发生，调用相应的处理函数<br>            * [ ] 这些事件会被放进一个事件队列<br>                * [ ] Redis 单线程对该事件队列不断进行处理<br>    * [ ] **IO请求性能瓶颈**<br>        * [ ] 单个请求一旦发生耗时<br>            * [ ] 操作bigkey<br>            * [ ] 使用复杂度过高的命令<br>            * [ ] 大量key集中过期<br>            * [ ] 淘汰策略<br>            * [ ] AOF刷盘开启always机制<br>            * [ ] 主从全量同步生成RDB<br>        * [ ] 并发量非常大时<br>            * [ ] 读写客户端数据依旧是同步IO，只能单线程依次读取客户端的数据，无法利用到CPU多核","like_count":1},{"had_liked":false,"id":264531,"user_name":"日月星辰","can_delete":false,"product_type":"c1","uid":1796332,"ip_address":"","ucode":"4E9F48153B2D8B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/68/ec/eb0ebbb6.jpg","comment_is_top":false,"comment_ctime":1606491329,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5901458625","product_id":100056701,"comment_content":"请问老师，Redis在Windows 系统下，IO多路复用是怎么实现的呢？","like_count":1,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392442,"discussion_content":"应该用的select","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631004962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2856313,"avatar":"","nickname":"Yipsen","note":"","ucode":"F0ECE8C12AF105","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535121,"discussion_content":"select就是自己主动去一个个遍历到底哪个可以吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638358145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":392442,"ip_address":""},"score":535121,"extra":""}]}]},{"had_liked":false,"id":258014,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1604243362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5899210658","product_id":100056701,"comment_content":"redis 事件驱动实现机制 https:&#47;&#47;github.com&#47;wenxueliu&#47;tech_map&#47;blob&#47;master&#47;arch&#47;cache&#47;redis&#47;eventloop.md","like_count":1},{"had_liked":false,"id":256325,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1603599473,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5898566769","product_id":100056701,"comment_content":"Redis 单线程是指它对网络 IO 和数据读写的操作采用了一个线程，而采用单线程的一个核心原因是避免多线程开发的并发控制问题。单线程的 Redis 也能获得高性能，跟多路复用的 IO 模型密切相关，因为这避免了 accept() 和 send()&#47;recv() 潜在的网络 IO 操作阻塞点。","like_count":1},{"had_liked":false,"id":253656,"user_name":"LovePeace","can_delete":false,"product_type":"c1","uid":1010319,"ip_address":"","ucode":"5BA5B11FAF953E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6a/8f/5b224f54.jpg","comment_is_top":false,"comment_ctime":1602819954,"is_pvip":false,"replies":[{"id":"93763","content":"是的，就是指socket。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1604027342,"ip_address":"","comment_id":253656,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5897787250","product_id":100056701,"comment_content":"请问文章提到的套接字是指socket吗？","like_count":1,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507137,"discussion_content":"是的，就是指socket。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604027342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245038,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1598792768,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5893760064","product_id":100056701,"comment_content":"最后的例子，像极了等待&#47;通知机制","like_count":1,"discussions":[{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338200,"discussion_content":"是一个意思 ,事件驱动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609211929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241201,"user_name":"Mr.蜜","can_delete":false,"product_type":"c1","uid":1035257,"ip_address":"","ucode":"C911B81198B3F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","comment_is_top":false,"comment_ctime":1597214805,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5892182101","product_id":100056701,"comment_content":"首先看完课题，发现几个问题，Redis的持久化到底是多线程，还是子进程？copy on write又是怎么用在持久化中的？第二个，BIO和NIO看了半天才反应过来，难道他不叫Block IO和non Block IO吗？第三个算是回答，Redis6.0中的多线程是IO多线程，就是说Redis把网络消息的收发让其他线程去处理，这样无疑可以让Redis的工作线程只处理与数据有关的事务，而把数据的收发全让其他线程去处理，这样做就意味着Redis6.0的性能更好。","like_count":1,"discussions":[{"author":{"id":2105473,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI9D0cO7m8UIB3CsLUzoAGCiaHqziaCED9BmicDHOVicSyrpNIsaxTicboiaicHI8nC4dTib8l1LO7Qaty7cQ/132","nickname":"Geek_fe60a8","note":"","ucode":"6D03D11EEF0C96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331126,"discussion_content":"rdb:fork一个子进程写入临时rdb文件 期间父进程处理请求 子进程完事之后直接替换idao旧的rdb文件 当父进程对内存数据结构进行修改的时候 会产生一个新的数据段页面 请求越来越多 页面也越来越多 但是也有限制 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606792788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240931,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1597123891,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5892091187","product_id":100056701,"comment_content":"当 Linux 内核监听到有连接请求或读数据请求时，就会触发 Accept 事件和 Read 事件，此时，内核就会回调 Redis 相应的 accept 和 get 函数进行处理。<br>这里的accept和get函数的调用是redis在应用侧调用的，而不是linux内核调用的吧，因为linux内核只是通知redjs有事件到达了，需要处理","like_count":1,"discussions":[{"author":{"id":1804087,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/87/37/b071398c.jpg","nickname":"等风来🎧","note":"","ucode":"B6BB8714A0B019","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345947,"discussion_content":"我也是这样理解的，不知道理解的对不对。内核只负责响应时间，放入到事件队列中吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611821619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244283,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fc/7b/adfef198.jpg","nickname":"一位不愿透漏姓名的足球名宿","note":"","ucode":"2A67AD14C1F436","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342742,"discussion_content":"我理解也是这样，就是那个主线程调用的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610802673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240618,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1597019259,"is_pvip":false,"discussion_count":2,"race_medal":1,"score":"5891986555","product_id":100056701,"comment_content":"理解的深入了","like_count":1,"discussions":[{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297768,"discussion_content":"白牙兄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597051587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004698,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","nickname":"每天晒白牙","note":"","ucode":"A1B102CD933DEA","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297772,"discussion_content":"你好你好，是微信好友吗？抱歉，你的id我没想起是哪位朋友","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597052370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297768,"ip_address":""},"score":297772,"extra":""}]}]},{"had_liked":false,"id":357648,"user_name":"Geek_39bdd5","can_delete":false,"product_type":"c1","uid":2781060,"ip_address":"湖南","ucode":"CEC28F9978165F","user_header":"","comment_is_top":false,"comment_ctime":1663518128,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663518128","product_id":100056701,"comment_content":"sokect链接不是redis做的吧？","like_count":0},{"had_liked":false,"id":355578,"user_name":"Geek_6d23e0","can_delete":false,"product_type":"c1","uid":3162611,"ip_address":"广东","ucode":"470BC2D398754B","user_header":"","comment_is_top":false,"comment_ctime":1661505366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661505366","product_id":100056701,"comment_content":"redis 高性能的还有一个点就是,单线程避免了上下文的线程切换,和锁的竞争","like_count":0},{"had_liked":false,"id":354512,"user_name":"绝郎平","can_delete":false,"product_type":"c1","uid":2163850,"ip_address":"北京","ucode":"F68234295A8450","user_header":"https://static001.geekbang.org/account/avatar/00/21/04/8a/7306391a.jpg","comment_is_top":false,"comment_ctime":1660479997,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1660479997","product_id":100056701,"comment_content":"大佬们求解。面对数百个连接套接字，epoll怎么知道每次的请求对应到相应的套接字上的呢？","like_count":0},{"had_liked":false,"id":352381,"user_name":"Geek_a8be59","can_delete":false,"product_type":"c1","uid":1563985,"ip_address":"","ucode":"BEC0F57B51DC44","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdiaUiaCYQe9tibemaNU5ya7RrU3MYcSGEIG7zF27u0ZDnZs5lYxPb7KPrAsj3bibM79QIOnPXAatfIw/132","comment_is_top":false,"comment_ctime":1658624154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658624154","product_id":100056701,"comment_content":"请问一下网络io用到的线程和读取键值get是同一个线程么？读取键值操作是不断轮训事件队列来处理对应的操作么？","like_count":0},{"had_liked":false,"id":347591,"user_name":"樱桃汁。","can_delete":false,"product_type":"c1","uid":2907715,"ip_address":"","ucode":"36EE9D8B9C5122","user_header":"https://static001.geekbang.org/account/avatar/00/2c/5e/43/004a52fa.jpg","comment_is_top":false,"comment_ctime":1654178312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654178312","product_id":100056701,"comment_content":"个人思考潜在的性能瓶颈：事件队列过长的时候，比如排了千万+的数据等待处理，同时一直在新增数据，单线程就算一直在处理，也会显得慢","like_count":0},{"had_liked":false,"id":347328,"user_name":"Haij!","can_delete":false,"product_type":"c1","uid":1223089,"ip_address":"","ucode":"934287EFD9A593","user_header":"https://static001.geekbang.org/account/avatar/00/12/a9/b1/0d550474.jpg","comment_is_top":false,"comment_ctime":1653926289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653926289","product_id":100056701,"comment_content":"逻辑性发问？<br>1.REDIS是单线程的么？<br>网络IO和键值数据处理是单线程的，但集群数据同步、持久化等操作是由其他线程完成的。所以严格意义上不是单线程。<br>2.REDIS为何要选用单线程？<br>多线程在对共享资源进行访问时存在并发访问控制问题，引入的机制，如互斥锁，会拖慢其他线程的性能。采用单线程就不会存在这样的问题。<br>3.为何选用了单线程后，速度还那么快？<br>这是REDIS多方面因素综合影响的结果；基于内存操作、选用高效的数据结构、采用多路复用的IO模型等。<br>4.redis是如何利用 select&#47;epoll 机制的？<br>select&#47;epoll 提供基于事件回调的机制，在FD接受请求时将触发的对应事件放入事件队列，REDIS的线程从事件队列中获取并调用相关接口。<br>5.对作者问题的思考<br>当内核通过FD触发的事件被redis线程从队列中获取并执行时，该事件本身的消耗越大，则对REDIS整体的性能影响就越大。比如：分配与释放bigkey的内存、使用O(n)命令、大量key集中过期、淘汰策略等","like_count":0},{"had_liked":false,"id":347067,"user_name":"Myron","can_delete":false,"product_type":"c1","uid":1788265,"ip_address":"","ucode":"AA49DE6CE9B50E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/49/69/6d579bd1.jpg","comment_is_top":false,"comment_ctime":1653662605,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653662605","product_id":100056701,"comment_content":"内核回调redis某一个函数，如果这个过程处理比较慢，那么其他的回调操作，是在队列等待吗？还是怎么处理的","like_count":0},{"had_liked":false,"id":345531,"user_name":"Geek5662","can_delete":false,"product_type":"c1","uid":2961312,"ip_address":"","ucode":"E3273A5F39A064","user_header":"","comment_is_top":false,"comment_ctime":1652359503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652359503","product_id":100056701,"comment_content":"网络事件监听是一个线程，事件队列的处理是另外的线程处理。单线程只是说网络事件监听单线程多路复用。","like_count":0},{"had_liked":false,"id":343811,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1651065952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651065952","product_id":100056701,"comment_content":"本质上redis用epoll解耦网络io后 主流程操作就没必要再用线程池来顶，因为此时操作相当于弱化为：IO模型+CPU 内存操作。<br>简单来说 read+write +linux网络栈分拆都可以交由内核函数来做 。而redis主线程就变成了内存级别的读写 此时就变成了CPU time。<br><br>因此针对cpu time确实没必要太多线程（通常来说可以接受 但不绝对）。举个简单的例子：nginx<br>所以redis进一步的优化其实也可以在启动时 做settask绑核。<br><br>再来回答下老师的问题就简单了，所有造成CPU time拉升的操作都会出问题：<br>1.redis现有api中 凡是O(N) O(N^2)的都是潜在因素<br>2.fork时 构造子进程 绘制pcb时 本身也是个O(N) ，所以大数据量的单实例redis 会卡顿<br>3.内存淘汰时 redis4.0之前都是在主线程里做的 <br>","like_count":0},{"had_liked":false,"id":339661,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1648281277,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648281277","product_id":100056701,"comment_content":"redis6.0的思路是合理的<br>整体并发主要还是在业务命令的处理上，所以保证这块的单线程就可以<br>而对于网络连接，网络read,write可以多线程。<br>6.0多线程更多的是将客户端读写的网络部分外包给IO线程。<br>整体能利用多cpu的也是请求命令的网络读写部分。","like_count":0},{"had_liked":false,"id":337840,"user_name":"布兜兜","can_delete":false,"product_type":"c1","uid":1183318,"ip_address":"","ucode":"E8B0F47D52E826","user_header":"https://static001.geekbang.org/account/avatar/00/12/0e/56/2c5691b2.jpg","comment_is_top":false,"comment_ctime":1647088222,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647088222","product_id":100056701,"comment_content":"个人理解多路复用机制主要不管多少个客户端，服务端application只有一个事件队列实例，内核将IO 封装成事件丢到事件队列，没个事件对应的一个相应处理器。","like_count":0},{"had_liked":false,"id":336959,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1646492215,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646492215","product_id":100056701,"comment_content":"大佬很多，学习了～ 总之，还是需要补很多的知识点～","like_count":0},{"had_liked":false,"id":335011,"user_name":"马仔__","can_delete":false,"product_type":"c1","uid":2693088,"ip_address":"","ucode":"F54E8B028651F4","user_header":"https://static001.geekbang.org/account/avatar/00/29/17/e0/37ca9591.jpg","comment_is_top":false,"comment_ctime":1645255468,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645255468","product_id":100056701,"comment_content":"潜在性能瓶颈：<br>1. redis如果使用同一个线程处理accpet和recv，是否在大量recv的情况下影响accpet的成功率，使用主从reactor是否更优。<br>2. io本身占用主线程cpu时间。","like_count":0},{"had_liked":false,"id":334976,"user_name":"漠博嵩","can_delete":false,"product_type":"c1","uid":2660316,"ip_address":"","ucode":"33704880E9790F","user_header":"https://static001.geekbang.org/account/avatar/00/28/97/dc/8eacc8f1.jpg","comment_is_top":false,"comment_ctime":1645234913,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645234913","product_id":100056701,"comment_content":"事件处理队列中的数据是哪个线程写入的呢?  内核线程  还是 用户线程.  redis 会不断轮询 队列的内容吗?","like_count":0},{"had_liked":false,"id":334972,"user_name":"漠博嵩","can_delete":false,"product_type":"c1","uid":2660316,"ip_address":"","ucode":"33704880E9790F","user_header":"https://static001.geekbang.org/account/avatar/00/28/97/dc/8eacc8f1.jpg","comment_is_top":false,"comment_ctime":1645234321,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645234321","product_id":100056701,"comment_content":"不明白,  操作系统是怎么回调 用户程序代码的?  用哪个函数实现的呢? ","like_count":0},{"had_liked":false,"id":333613,"user_name":"Geek_5b1ef0","can_delete":false,"product_type":"c1","uid":1667730,"ip_address":"","ucode":"7A37C43F410B06","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqLYChgx3cNPAmL2P5vSXjar4RgdpRyF1TG3ceTGjXHcGSnRckIVgLpB8jRpN6DTxzibMGwxPFnxSw/132","comment_is_top":false,"comment_ctime":1644425353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644425353","product_id":100056701,"comment_content":"主要就是讲了io多路复用","like_count":0},{"had_liked":false,"id":331252,"user_name":"Geek_86e781","can_delete":false,"product_type":"c1","uid":2892933,"ip_address":"","ucode":"B883DABC3B150B","user_header":"","comment_is_top":false,"comment_ctime":1642503541,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642503541","product_id":100056701,"comment_content":"潜在性能瓶颈：<br>1.一个耗时的操作可能导致所有请求队列中的请求超时<br>问题：<br>网络IO为什么不单独用一个或多个网络线程，接收后放入多个队列，redis多线程处理多个队列数据。毕竟涉及到资源竞争的只是某一数据集合范围内的请求，如果因为这个影响到了其他数据集合范围内的请求理论上是不合理的。","like_count":0},{"had_liked":false,"id":327936,"user_name":"独自等待","can_delete":false,"product_type":"c1","uid":1150293,"ip_address":"","ucode":"51469EF7620D89","user_header":"https://static001.geekbang.org/account/avatar/00/11/8d/55/1345dff3.jpg","comment_is_top":false,"comment_ctime":1640403136,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640403136","product_id":100056701,"comment_content":"请问redis不同database操作是使用相同的线程还是不同的线程","like_count":0},{"had_liked":false,"id":324285,"user_name":"Yipsen","can_delete":false,"product_type":"c1","uid":2856313,"ip_address":"","ucode":"F0ECE8C12AF105","user_header":"","comment_is_top":false,"comment_ctime":1638356743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638356743","product_id":100056701,"comment_content":"医院的例子，如果是普通阻塞型的话。是咋样的？类似于按顺序叫号吗？叫到的人如果没填好单，那医生一直在等这个病人填好单？其他填好单或者已经做好检查的人也只能等？事件机制能不能理解为医生门口设置了个按钮，只要处理好的按顺序按按钮继续下一步处理，没填好的，填好再过来，这样设计就可以把医生干到死，上厕所的机会都没有。","like_count":0},{"had_liked":false,"id":318191,"user_name":"宇飞","can_delete":false,"product_type":"c1","uid":1105513,"ip_address":"","ucode":"D64C53CD189164","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/69/113da382.jpg","comment_is_top":false,"comment_ctime":1635178566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635178566","product_id":100056701,"comment_content":"作者您好，我有个疑问，socket连接时，只有socket和accept两种fd，当accept建立时，tcp会保持一段时间的长连接，这段时间内，是不是accept只有一个fd，那这段时间内，redis的操作比如get   put这些请求是不是不会生成多个fd，只会共享accept这个fd呢","like_count":0},{"had_liked":false,"id":318026,"user_name":"受超凡","can_delete":false,"product_type":"c1","uid":2678558,"ip_address":"","ucode":"A2A160D483BBB0","user_header":"","comment_is_top":false,"comment_ctime":1635126320,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635126320","product_id":100056701,"comment_content":"客户端的请求转换为相应的事件放在了队列中，redis从队列中获取事件进行处理，那处理完以后，redis怎么知道这是哪个客户端的操作呢？事件中有客户端的信息吗？","like_count":0},{"had_liked":false,"id":313928,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1632744809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632744809","product_id":100056701,"comment_content":"单线程的Redis为什么快？<br>第一，单线程可以避免多线程访问共享资源时进行并发控制的额外开销<br>第二，redis的socket网络访问框架在潜在阻塞点可以调整为非阻塞模式，然后结合 Linux 操作系统select&#47;epoll 的基于事件的回调机制，先分别对这不同网络IO事件注册相应的回调函数，在请求未建立和数据未到达时可以先进行其他处理而不用一直等待，当 Linux 内核监听到有连接请求或读数据请求时，内核再回调 Redis 相应的函数进行处理。<br><br>这样既避免了多线程的劣势，又提高了系统的吞吐量，所以性能很高。","like_count":0},{"had_liked":false,"id":307891,"user_name":"xxs","can_delete":false,"product_type":"c1","uid":1817409,"ip_address":"","ucode":"C306FFA609C1F1","user_header":"https://static001.geekbang.org/account/avatar/00/1b/bb/41/2bcfff91.jpg","comment_is_top":false,"comment_ctime":1629293883,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1629293883","product_id":100056701,"comment_content":"1. 单线程的优点讲到了，但显然并不是绝对的，否则就不会有多线程模型了，所以为什么redis的什么特性需要它选择单线程呢？<br>2. IO复用是个相对独立的知识点，从文章的说明感觉只是redis用了IO复用，是否有在普通的IO复用的基础上做一些针对性的优化呢？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392587,"discussion_content":"还有个重要原因我觉得是源于对自身的一个自信，自信来源于对redis的数据类型的极致优化，sds，压缩列表，rehash，跳表。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631065796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392585,"discussion_content":"肯定是没有绝对的事情的，我理解的是根据应用场景来的，多线程方式实现起来必然复杂，复杂逻辑一方面升级优化麻烦，另一方面运行时对性能多少有影响。加上redis的大多数使用场景都是非cpu消耗型的，key-value也都是简单数据结构，单线程应该是最好的选择，避免了频繁切换。至于6.0版本的多线程 也可能是业务上的使用场景有所变化，数据读写比较多了，io成瓶颈了。貌似官方也不建议开多线程模式，毕竟一台有瓶颈可以通过cluster部署多台","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631065649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307093,"user_name":"andy","can_delete":false,"product_type":"c1","uid":1154153,"ip_address":"","ucode":"66FA6DABD5BD3B","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/69/d16ea710.jpg","comment_is_top":false,"comment_ctime":1628857456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628857456","product_id":100056701,"comment_content":"redis  并非完全单线程。通常我们说redis是单线程的高性能数据库。  这里单线程指的是redis  的网络io以及数据读取操作是单线程的。  比如redis的持久化就是其他线程操作的。  <br>redis单线程为什么快？  <br>因为单线程避免了多线程的并发控制成本。并且redis是内存数据库再配合合理的数据结构所以会很快。<br>单线程的redis可能的阻塞点是  网络框架中的  网络链接和数据解析。  所以这里使用了io多路复用机质，在内核中监听了appect  和  recv事件 并列注册了两个处理该事件的函数，当有事件调用时处理函数会降事件入队列，开始处理，处理完出队。    这样就保证了redis不会阻塞。","like_count":0},{"had_liked":false,"id":305283,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1627902254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627902254","product_id":100056701,"comment_content":"select ， epoll， poll 的区别是什么呢？","like_count":0},{"had_liked":false,"id":303573,"user_name":"我可能是个程序员","can_delete":false,"product_type":"c1","uid":1051795,"ip_address":"","ucode":"8CA580EA34EEF3","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/93/e3014470.jpg","comment_is_top":false,"comment_ctime":1626861658,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1626861658","product_id":100056701,"comment_content":"有个问题有点好奇：<br>epoll基于事件的，假设先写后读，写事件处理完处理读事件，这时候会不会出现读事件先完成，然后写事件才完成，导致读了写之前的数据啊？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400358,"discussion_content":"不会，redis是单线程的reactor模型（6.0以前），底层实现是一个eventloop，上一个事件没完成之前是不会执行下一个事件的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633245441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392589,"discussion_content":"个人觉得有可能，读和写都是独立的访问连接，先后顺序没有什么保证","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631066026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303522,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1626844542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626844542","product_id":100056701,"comment_content":"考虑到网络交互,可以采用UDP代替TCP,避免TCP自带的拥塞控制,可以模仿HTTP3.0<br>对于数据操作方面,单个执行线程必然会出现由于单个操作的内存过大,从而阻塞的问题<br>对此也没法去消除,只能尽可能的降低其影响,故可以按照数据结构来拆分为多个线程执行,每个数据结构对应着一个执行线程,从而加快执行效率","like_count":0},{"had_liked":false,"id":302563,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1626263247,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1626263247","product_id":100056701,"comment_content":"这些事件会被放进一个事件队列，Redis 单线程对该事件队列不断进行处理。这样一来，Redis 无需一直轮询是否有请求实际发生，这就可以避免造成 CPU 资源浪费。同时，Redis 在对事件队列中的事件进行处理时，会调用相应的处理函数，这就实现了基于事件的回调。因为 Redis 一直在对事件队列进行处理，所以能及时响应客户端请求，提升 Redis 的响应性能。如上是一段引用，不明白的点是把这些事件都放到一个队列么？如果队列中间的一个事件监听发现有了socket链接，那会把下面的事件都出队么？显然不是这样的吧？还有一个问题是事件之间如果操作相同的key会不会因为先后顺序和自己预计的值不同？打字不易，希望回复","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392590,"discussion_content":"所谓的队列里面都是已经事件触发准备就绪的socket所以就不存在那种踢出队的情况。第二个情况可能的，毕竟是两次请求，如果其中一次遇到网络抖动什么的，最后处理顺序完全乱掉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631066352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301465,"user_name":"宙斯","can_delete":false,"product_type":"c1","uid":2041396,"ip_address":"","ucode":"80DF36BAD298AD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","comment_is_top":false,"comment_ctime":1625708301,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625708301","product_id":100056701,"comment_content":"老师 你好，redis是单线程，使用brpop时，为何不会阻塞其他操作","like_count":0},{"had_liked":false,"id":300548,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1625214163,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1625214163","product_id":100056701,"comment_content":"redis的i&#47;o模型","like_count":0},{"had_liked":false,"id":293908,"user_name":"丶","can_delete":false,"product_type":"c1","uid":2455765,"ip_address":"","ucode":"E58127DDC683B5","user_header":"https://static001.geekbang.org/account/avatar/00/25/78/d5/256d9a90.jpg","comment_is_top":false,"comment_ctime":1621599102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621599102","product_id":100056701,"comment_content":"** 抄的课代表的 加上部分自己的理解<br><br>* 在“Redis 基本 IO 模型”图中，你觉得还有哪些潜在的性能瓶颈吗？<br><br>  * 因为redis是单线程处理事件，虽然实现了多路复用的机制，可以同时监听多个连接请求和数据请求，但是本质上在redis处理这些事件的时候，还是单线程处理，无法利cpu多线程，所以，一旦其中某个事件花费的事件比较长时，就可能会导致redis阻塞，进而导致整个系统的性能下降。<br><br>  * 例如：<br><br>    * bigKey的内存分配与释放；<br><br>    * 高耗时复杂命令的使用，比如SORT&#47;SUNION&#47;ZUNIONSTORE；<br>    * RDB时，fock子进程时，如数据量较大，创建子进程也非常的耗时<br>    * 大量过期建的删除<br>    * rehash 时，如果数据量比较大时也会导致redis阻塞<br><br>* 问题的处理方式：<br><br>  * 在redis4.0中退出了，lazy-free机制，把bigkey释放内存的操作放在异步线程中执行，降低对主线程的影响。<br>  * 渐进式rehash <br><br>* Redis 6.0 中提出了多线程模型。那么，这个多线程模型和这节课所说的 IO 模型有什么关联？会引入复杂的并发控制问题吗？<br><br>  * redis6.0中的多线模型，多线程只是用来处理网络数据的读写和协议的解析，而执行命令依然是单线来执行，所以，我认为redis6.0 多线程模型在本质上起始并没有解决redis性能瓶颈问题，只是起了一定的优化效果。","like_count":0},{"had_liked":false,"id":293330,"user_name":"魔锋剑上缺","can_delete":false,"product_type":"c1","uid":1980566,"ip_address":"","ucode":"118927CA41A6D4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/aS7TVkJuJznZ1ErgYkoOGImHO4uQowrdibbzeFh1ia3WIv5yicVWicdNl6KicfVA8jSibAmfvqY6X4OyyFECFgbIjNtA/132","comment_is_top":false,"comment_ctime":1621337934,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1621337934","product_id":100056701,"comment_content":"这些事件会被放进一个事件队列，Redis 单线程对该事件队列不断进行处理。这个事件队列是redis的还是系统的？？？","like_count":0,"discussions":[{"author":{"id":1373602,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f5/a2/8a470344.jpg","nickname":"Run_dream","note":"","ucode":"1BD4AAFCE72B99","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380255,"discussion_content":"操作系统的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624414820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292959,"user_name":"Be_Young","can_delete":false,"product_type":"c1","uid":2044188,"ip_address":"","ucode":"ACDBB2DD99738A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bNQ1xdysiatMnMYpibXw70cpWPkuA2JXiaR0eDq7dia9oBic2z3SqFY84aRnEPH3QMgSklE6JSMZAPfKYukX6kPLoZQ/132","comment_is_top":false,"comment_ctime":1621098421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621098421","product_id":100056701,"comment_content":"干货满满，这课买得值！！！","like_count":0},{"had_liked":false,"id":290816,"user_name":"李郝","can_delete":false,"product_type":"c1","uid":1590465,"ip_address":"","ucode":"4818313D933CE6","user_header":"https://static001.geekbang.org/account/avatar/00/18/44/c1/ebe870bb.jpg","comment_is_top":false,"comment_ctime":1619768065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619768065","product_id":100056701,"comment_content":"怎么感觉redis采用单线程模型的理由有些不讲道理，却又无力反驳～","like_count":0},{"had_liked":false,"id":288442,"user_name":"小睡睡","can_delete":false,"product_type":"c1","uid":1102838,"ip_address":"","ucode":"049091D752DE29","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/f6/d9ecf4ea.jpg","comment_is_top":false,"comment_ctime":1618470189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618470189","product_id":100056701,"comment_content":"redis处理队列就是进行读写等操作吗","like_count":0},{"had_liked":false,"id":287883,"user_name":"Geek_04707e","can_delete":false,"product_type":"c1","uid":2458509,"ip_address":"","ucode":"540FEE1B3C7E08","user_header":"","comment_is_top":false,"comment_ctime":1618206685,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1618206685","product_id":100056701,"comment_content":"如果是起 socket，然后bind IP和端口，然后提取文件描述符，再将描述符加队列，让对应的事件函数去处理，那这样说，不管是读还是写，都是单线程队列来操作的，那为啥在秒杀场景下，还会有超卖的情况发生呢，还会有两个进程拿到同样的库存呢，是A进程拿到库存后，还没来得级回写，然后B进程再去拿库存，值就是一样的么","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392595,"discussion_content":"这个跟redis没啥关系吧，使用方式问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631066708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285598,"user_name":"WZ","can_delete":false,"product_type":"c1","uid":1310099,"ip_address":"","ucode":"43B5BB6924A33F","user_header":"https://static001.geekbang.org/account/avatar/00/13/fd/93/9a3a3e83.jpg","comment_is_top":false,"comment_ctime":1616913641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616913641","product_id":100056701,"comment_content":"老师你好，我有一个问题：I&#47;O多路复用中，如果有多个请求同时到达，或者有多个请求的数据同时发送过来时，这些请求会被放进队列中，那么redis线程处理队列中事件的时候是串行的，如果队列中事件很多，这样串行处理会不会很慢呢？","like_count":0},{"had_liked":false,"id":285232,"user_name":"装睡的小5郎","can_delete":false,"product_type":"c1","uid":1727799,"ip_address":"","ucode":"F4CD1B8E65B6E5","user_header":"https://static001.geekbang.org/account/avatar/00/1a/5d/37/b3c7d6a0.jpg","comment_is_top":false,"comment_ctime":1616679022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616679022","product_id":100056701,"comment_content":"这章写的真棒","like_count":0},{"had_liked":false,"id":284973,"user_name":"李炫君","can_delete":false,"product_type":"c1","uid":2110344,"ip_address":"","ucode":"2ABC38870315E1","user_header":"https://static001.geekbang.org/account/avatar/00/20/33/88/8f045c72.jpg","comment_is_top":false,"comment_ctime":1616566850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616566850","product_id":100056701,"comment_content":"使用 epoll 机制机制监听多个套接字，哪个套接字先触发了事件就执行哪个事件对应的回调函数。那岂不是会出现先来的套接字后执行的情况。","like_count":0},{"had_liked":false,"id":284099,"user_name":"wchu","can_delete":false,"product_type":"c1","uid":1381405,"ip_address":"","ucode":"B9D2B104185B40","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI36kS2EOIDbAvamNPTKUy1U1JpCf1VA0UXRIq8goakJEHOf179FNewwMlaDWykcia5V7giaLXpSNoA/132","comment_is_top":false,"comment_ctime":1616063339,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616063339","product_id":100056701,"comment_content":"epoll那希望结合 select 去对比着讲，select 需要循环遍历几次，而epoll是怎么避免循环便利的。以及 select poll epoll 的进化过程。","like_count":0},{"had_liked":false,"id":283760,"user_name":"阿牛","can_delete":false,"product_type":"c1","uid":1073236,"ip_address":"","ucode":"DC8C189FCF3289","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/54/b3eb605b.jpg","comment_is_top":false,"comment_ctime":1615907345,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615907345","product_id":100056701,"comment_content":"【每日打卡】Redis 是单线程，主要是指 Redis 的网络 IO 和键值对读写是由一个线程来完成的，这也是 Redis 对外提供键值存储服务的主要流程。<br>不实用多线程的IO的原因是：多线程开发会引入同步原语来来保护共享资源的并发访问，不会线性增加并行的吞吐率，会降低系统代码的易调试性和可维护性。<br>Redis快的原因：<br>1、内存操作；<br>2、高效的数据结构；如哈希表、跳表；<br>3、采用多路复用机制；","like_count":0},{"had_liked":false,"id":283647,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1615865371,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1615865371","product_id":100056701,"comment_content":"Redis 的网络 IO 和键值对读写是单线程的，而持久化、异步删除、集群数据同步等是由额外的线程执行的（似乎 Redis 6.0 以后，网络 IO 也是多线程了）。那么，是不是把 Redis 理解为单线程、多线程“混动”更好一些。（老师在留言回复里面提到是“单线程的进程”）<br><br>Redis 使用单线程，主要是为了避免多线程并发访问控制带来的问题，那么应该也是和使用场景有关的。<br><br>Redis 之所以快，首先是因为内存（硬件基础），高效的数据结构，再加上 epoll 多路复用（软件），从某种角度上说应该是“软硬搭配，干活不累”。<br><br>bind&#47;listen → accept → recv → parse → get → send<br><br>其中 accept 和 recv 是潜在的阻塞点（其他的网络IO应该也是一样的）<br><br>病人等同于请求，医院的分诊台类似于 Linux 内核监听请求，实际诊断的医生相当于是 Redis 单线程。<br><br>对于课后题，在 Redis 基本 IO 模型中，除了 accept 和 recv，send 有可能成为瓶颈么？假设请求的数据又多又大？<br><br>看到留言里面有提到 bigkey，但是没有说 bigvalue，看样子我又想歪了，标准答案似乎是事件处理可能会成为瓶颈。","like_count":0},{"had_liked":false,"id":280243,"user_name":"Just Do IT","can_delete":false,"product_type":"c1","uid":1192724,"ip_address":"","ucode":"1EAD92510FA7BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","comment_is_top":false,"comment_ctime":1614141373,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1614141373","product_id":100056701,"comment_content":"这句话不理解，如果不轮询，队列执行完了，线程就会被回收？<br><br><br><br>这些事件会被放进一个事件队列，Redis 单线程对该事件队列不断进行处理。这样一来，Redis 无需一直轮询是否有请求实际发生，这就可以避免造成 CPU 资源浪费。","like_count":0,"discussions":[{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386493,"discussion_content":"请问你理解了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627614265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277148,"user_name":"-只是小小配角_","can_delete":false,"product_type":"c1","uid":1022411,"ip_address":"","ucode":"EFC1CD54A23F39","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/cb/8964faab.jpg","comment_is_top":false,"comment_ctime":1612275478,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1612275478","product_id":100056701,"comment_content":"认为 send 步骤也是一个阻塞点，即在返回的数据特别大的情况下，网络数据传输时间增长就会阻塞其他操作","like_count":0,"discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365413,"discussion_content":"send发送到缓存区就不用管了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617797136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269734,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1608774191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608774191","product_id":100056701,"comment_content":"re：这些事件会被放进一个事件队列，Redis 单线程对该事件队列不断进行处理。这样一来，Redis 无需一直轮询是否有请求实际发生，这就可以避免造成 CPU 资源浪费。<br><br>请问老师，redis 主线程是不断轮循队列，还是阻塞在队列等待唤醒吖？应该是后者吧(^_^)v<br><br>谢谢！","like_count":0},{"had_liked":false,"id":268728,"user_name":"Geek_603d4c","can_delete":false,"product_type":"c1","uid":2142390,"ip_address":"","ucode":"237250CFF08070","user_header":"","comment_is_top":false,"comment_ctime":1608308421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608308421","product_id":100056701,"comment_content":"如果有IO多路复用的基础看起来才会清晰","like_count":0},{"had_liked":false,"id":268002,"user_name":"哎呀妈呀~","can_delete":false,"product_type":"c1","uid":1998191,"ip_address":"","ucode":"FC4C1F41CB2F76","user_header":"","comment_is_top":false,"comment_ctime":1608025061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608025061","product_id":100056701,"comment_content":"你说的内核指什么？监听不会占用线程吗？","like_count":0},{"had_liked":false,"id":263629,"user_name":"BertGeek","can_delete":false,"product_type":"c1","uid":1452799,"ip_address":"","ucode":"8E1D72C9F9778C","user_header":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","comment_is_top":false,"comment_ctime":1606201844,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1606201844","product_id":100056701,"comment_content":"Redis 默认16个库，在实际生产环境，不同业务类型使用不同库，是否会影响redis整体性能","like_count":0,"discussions":[{"author":{"id":1080998,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7e/a6/188817b6.jpg","nickname":"郭嵩阳","note":"","ucode":"9DC42C7B73F580","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329648,"discussion_content":"用一个库就可以了,使用不同的key标识,分库不利于日后扩展,redis 集群不支持分库 只能只用一个库","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1606442377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073236,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/54/b3eb605b.jpg","nickname":"阿牛","note":"","ucode":"DC8C189FCF3289","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358038,"discussion_content":"不同业务应该使用不同实例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615905961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261032,"user_name":"BrightLoong","can_delete":false,"product_type":"c1","uid":1165304,"ip_address":"","ucode":"361FB1840C2977","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/f8/6b311ad9.jpg","comment_is_top":false,"comment_ctime":1605175376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605175376","product_id":100056701,"comment_content":"“Redis 单线程是指它对网络 IO 和数据读写的操作采用了一个线程”。","like_count":0},{"had_liked":false,"id":260587,"user_name":"胖萝卜","can_delete":false,"product_type":"c1","uid":1902004,"ip_address":"","ucode":"BA3FDBB70C6CC3","user_header":"https://static001.geekbang.org/account/avatar/00/1d/05/b4/4f60c674.jpg","comment_is_top":false,"comment_ctime":1605066060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605066060","product_id":100056701,"comment_content":"Redis厉害","like_count":0},{"had_liked":false,"id":260256,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1604970773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604970773","product_id":100056701,"comment_content":"学到后面 发现跟不上了 回头来复习 发现会有新的理解","like_count":0},{"had_liked":false,"id":260247,"user_name":"Bug? Feature!","can_delete":false,"product_type":"c1","uid":1164531,"ip_address":"","ucode":"F8FA8A0094FBA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","comment_is_top":false,"comment_ctime":1604970017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604970017","product_id":100056701,"comment_content":"1，单线程，避免了多线程的开销。<br>2，多路复用机制。<br>3，基于事件的回调机制。","like_count":0},{"had_liked":false,"id":257782,"user_name":"里咯破","can_delete":false,"product_type":"c1","uid":1224546,"ip_address":"","ucode":"2DA41A6D44B3C4","user_header":"https://static001.geekbang.org/account/avatar/00/12/af/62/5eeb9041.jpg","comment_is_top":false,"comment_ctime":1604129532,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1604129532","product_id":100056701,"comment_content":"redis6的多线程是IO多线程,实际处理命令还是单线程,会有一个全局变量标识此时是多线程读还是多线程写,不会同时多线程读和多线程写","like_count":0,"discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365415,"discussion_content":"只能多线程读或者多线程写,不会同时多线程读和多线程写？\n为什么？感觉很奇怪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617797444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255610,"user_name":"Gojustforfun","can_delete":false,"product_type":"c1","uid":1187021,"ip_address":"","ucode":"7513A40F27344F","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/cd/8d552516.jpg","comment_is_top":false,"comment_ctime":1603378685,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1603378685","product_id":100056701,"comment_content":"我的理解parse（解析私有数据&#47;命令传输协议）应该和get一样是键值数据库操作，不是网络IO","like_count":0,"discussions":[{"author":{"id":1460568,"avatar":"","nickname":"whuzxj","note":"","ucode":"0EC6153B0A0E8A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577453,"discussion_content":"同感，感觉parse应该是Redis服务器读取网络数据后通过RESP解析请求，已经不属于网络IO了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656124373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254069,"user_name":"hoppo","can_delete":false,"product_type":"c1","uid":1588794,"ip_address":"","ucode":"B0C7C124A99B2D","user_header":"https://static001.geekbang.org/account/avatar/00/18/3e/3a/2267d2a3.jpg","comment_is_top":false,"comment_ctime":1603035075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603035075","product_id":100056701,"comment_content":"因为是单线程挨个处理事件队列，所以任何单个耗时长的操作都会影响后续的事件执行。和js的event loop缺点应该是相同的，不知道理解对了没-  -","like_count":0},{"had_liked":false,"id":253389,"user_name":"snailshen","can_delete":false,"product_type":"c1","uid":1436839,"ip_address":"","ucode":"C4875C476649B1","user_header":"https://static001.geekbang.org/account/avatar/00/15/ec/a7/7d44c655.jpg","comment_is_top":false,"comment_ctime":1602725466,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1602725466","product_id":100056701,"comment_content":"时间处理队列会不会满了？如何调优？","like_count":0,"discussions":[{"author":{"id":1080998,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7e/a6/188817b6.jpg","nickname":"郭嵩阳","note":"","ucode":"9DC42C7B73F580","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329647,"discussion_content":"队列满了会异常, 1.redis确实处理不过来了（看场景如果确实并发比较大可以集群处理)  2.有慢操作的几率比较大（只能自己又会key value）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606442244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252308,"user_name":"刘大人","can_delete":false,"product_type":"c1","uid":1577210,"ip_address":"","ucode":"F66AE613E80398","user_header":"https://static001.geekbang.org/account/avatar/00/18/10/fa/d977627e.jpg","comment_is_top":false,"comment_ctime":1602230975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602230975","product_id":100056701,"comment_content":"老师讲的 太好了 学习到了","like_count":0},{"had_liked":false,"id":251955,"user_name":"crtmsvc","can_delete":false,"product_type":"c1","uid":2201323,"ip_address":"","ucode":"A00D3FB17CB614","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/CV9kk5M26pdxvFhbrkicjZa4avHTfWWPJCKCIrkhgws8WN9RJAJ5D4oGAPgAOVXmDk9gKEQ9nbrhia9Qjsqk4DyA/132","comment_is_top":false,"comment_ctime":1601999957,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601999957","product_id":100056701,"comment_content":"請問如果在同一個 redis 上分多個db，每個db 會是自己的 thread 嗎？謝謝","like_count":0},{"had_liked":false,"id":251332,"user_name":"Hinimix","can_delete":false,"product_type":"c1","uid":1316937,"ip_address":"","ucode":"7994136C93BD89","user_header":"https://static001.geekbang.org/account/avatar/00/14/18/49/b1d864e5.jpg","comment_is_top":false,"comment_ctime":1601469116,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1601469116","product_id":100056701,"comment_content":"该机制允许内核中，同时存在多个监听套接字和已连接套接字。<br><br>这句话不是很懂，套接字不是四元组吗，一个服务端的监听套接字是6379的，多个套接字是怎么来的啊，我看我的redia也只有6379，没别的端口啊","like_count":0,"discussions":[{"author":{"id":1073443,"avatar":"https://static001.geekbang.org/account/avatar/00/10/61/23/30d134cf.jpg","nickname":"Young","note":"","ucode":"075C0BBE20FD8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370824,"discussion_content":"四元组=（srcip，srcport，dstip，dstport）\n客户端不同，srcip/port 都不同，所以会有多个socket啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619538278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006735,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/8f/551b5624.jpg","nickname":"小可","note":"","ucode":"8834AF621FA67D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347508,"discussion_content":"多个客户端连接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612245378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623626,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c6/4a/3bd896fc.jpg","nickname":"Heiky","note":"","ucode":"03AA79E1BC4AE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316654,"discussion_content":"ip报文和tcp报文都是操作系统解析的，也就是内核进行操作，所以内核可以监听或者已连接多个socket","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603434730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250560,"user_name":"妥协","can_delete":false,"product_type":"c1","uid":1249656,"ip_address":"","ucode":"7201DFE9C12669","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/78/4f0cd172.jpg","comment_is_top":false,"comment_ctime":1601131439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601131439","product_id":100056701,"comment_content":"请教老师，既然redis的网络io和键值对读写是一个线程，那就是监听io事件是另一个单独线程，为何需要一个消息队列存放io事件，这种方式，因为切换线程，不是利用不了CPU缓存了嘛？通过消息队列异步处理io事件的好处是啥？","like_count":0},{"had_liked":false,"id":249638,"user_name":"萧","can_delete":false,"product_type":"c1","uid":1229143,"ip_address":"","ucode":"0C2239867AFF5F","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/57/27de274f.jpg","comment_is_top":false,"comment_ctime":1600737514,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1600737514","product_id":100056701,"comment_content":"### Redis的I&#47;O模型<br>多线程有系统上下文切换消耗，资源竞争消耗<br>redis的网络I&#47;O和键值对读写是由一个线程来完成的，但持久化、异步删除、集群数据同步是由其他线程完成的<br><br>阻塞型网络I&#47;O处理流程<br>- bind&#47;listen<br>- accept：阻塞点<br>- recv：阻塞点<br>- parse<br>- get<br>- send<br><br>基于多路复用的高性能I&#47;O模型<br>基于select&#47;epoll机制，允许内核中同时存在多个监听套接字和已连接套接字，内核进行监听，有数据就交给redis进行处理<br>select&#47;epoll基于事件的回调机制，当有事件到达时，将事件放入队列中，redis取出事件调用对应函数进行处理","like_count":0},{"had_liked":false,"id":248832,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1067570,"ip_address":"","ucode":"FE57B69A9CF91D","user_header":"https://static001.geekbang.org/account/avatar/00/10/4a/32/23db38ab.jpg","comment_is_top":false,"comment_ctime":1600328545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600328545","product_id":100056701,"comment_content":"Redis 基本 IO 模型 - 可以利用CPU多核多线程和客户端进行IO交互，命令执行的模块还是单线程执行。","like_count":0},{"had_liked":false,"id":244636,"user_name":"无名之辈","can_delete":false,"product_type":"c1","uid":1108247,"ip_address":"","ucode":"23AB28F44A769C","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/17/c78d3963.jpg","comment_is_top":false,"comment_ctime":1598601005,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598601005","product_id":100056701,"comment_content":"简述下IO多路复用为啥是redis快的原因之一的理解，相当于让Redis单线程一直处于工作状态，说的粗浅一点，就是redis本身处理事情的速度就快，在加上手头上一直有活，产出就比较高，也就是我们所说的“快”, 不知道我这么理解对不对，望老师点拨","like_count":0},{"had_liked":false,"id":242900,"user_name":"路客","can_delete":false,"product_type":"c1","uid":1721812,"ip_address":"","ucode":"DE3765016947DA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/45/d4/39a662ef.jpg","comment_is_top":false,"comment_ctime":1597887552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597887552","product_id":100056701,"comment_content":"老师，我也想问redis处理事件队列是不是也是需要耗时，也就是说还是有很多事件处于排队的一个状态？还有就是前面有朋友提到的，事件是否存在优先级？","like_count":0},{"had_liked":false,"id":242292,"user_name":"smily","can_delete":false,"product_type":"c1","uid":1099875,"ip_address":"","ucode":"E2FDA059724A02","user_header":"https://static001.geekbang.org/account/avatar/00/10/c8/63/f94f9fda.jpg","comment_is_top":false,"comment_ctime":1597662791,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597662791","product_id":100056701,"comment_content":"如果把采用进程模型和I&#47;O模型、epoll依次讲解，附带 操作系统刷盘机制就完美了","like_count":0},{"had_liked":false,"id":241676,"user_name":"学个球","can_delete":false,"product_type":"c1","uid":1019725,"ip_address":"","ucode":"7343F3C0CA981D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/4d/65fb45e6.jpg","comment_is_top":false,"comment_ctime":1597388892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597388892","product_id":100056701,"comment_content":"每日一答：<br>Redis 虽然利用了 I&#47;O 多路复用技术，采用单线程来处理这些事件，避免了多线程的缺点。但是<br>1. 在客户端的并发量很大的情况下，单线程始终有它的瓶颈在。<br>2.还有一点就是事件入队的时候可能存在竞争关系导致性能问题吗？","like_count":0},{"had_liked":false,"id":241036,"user_name":"黄马","can_delete":false,"product_type":"c1","uid":1019506,"ip_address":"","ucode":"93E391B4678EC2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/72/63c94eee.jpg","comment_is_top":false,"comment_ctime":1597156926,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1597156926","product_id":100056701,"comment_content":"1. 单线程是指多个连接或者请求使用同一个线程处理，类似浏览器多个用户的点击使用同一个线程处理<br>2. 单线程减少多线程引入的访问控制带来的开销，例如同步访问共享数据<br>3. IO 模型是OS的IO模型，Redis只是使用了这种比较友好的Epoll模型，由系统负责监听客户端的连接等，通知Redis工作线程，属于流程优化。","like_count":0},{"had_liked":false,"id":240910,"user_name":"LindaWang","can_delete":false,"product_type":"c1","uid":1800128,"ip_address":"","ucode":"45368868C3980B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/77/c0/22872965.jpg","comment_is_top":false,"comment_ctime":1597115030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597115030","product_id":100056701,"comment_content":"网络I&#47;O瓶颈：随着业务场景越来越复杂，需要更大的QPS，如果部署过多的Redis服务器就会导致管理的Redis服务器过多，维护代价大。采用多线程，可以充分利用多核分摊Redis同步I&#47;O读写负荷","like_count":0},{"had_liked":false,"id":240909,"user_name":"第四范式","can_delete":false,"product_type":"c1","uid":1663762,"ip_address":"","ucode":"61ECDC7C834CAF","user_header":"https://static001.geekbang.org/account/avatar/00/19/63/12/5a22fcc7.jpg","comment_is_top":false,"comment_ctime":1597114635,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597114635","product_id":100056701,"comment_content":"请教一个问题。“Redis 单线程对该事件队列不断进行处理。”这句话的意思是。对于某个事件的回调函数如果处理的时间较多。就会造成线程阻塞吧。疑问如下：(1)事件必须处理完某一个，下一个才 继续进行吧?(2) 线程来处理IO。不算阻塞。只有在处理IO之前，等待数据来的时间，才算阻塞？希望老师帮忙解答答一下。谢谢您。","like_count":0,"discussions":[{"author":{"id":1073236,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/54/b3eb605b.jpg","nickname":"阿牛","note":"","ucode":"DC8C189FCF3289","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358041,"discussion_content":"如果bigkey读取的时候，后续任务是阻塞的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615906149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240854,"user_name":"哦吼掉了","can_delete":false,"product_type":"c1","uid":1232599,"ip_address":"","ucode":"1F89B1BA1EEF52","user_header":"https://static001.geekbang.org/account/avatar/00/12/ce/d7/8168e1bf.jpg","comment_is_top":false,"comment_ctime":1597105124,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597105124","product_id":100056701,"comment_content":"为啥redis单线程这么高效？1.采用select&#47;poll的网络模型NIO多路复用机制 2.底层采用哈希表和跳表等数据结构 3.单线程避免共享资源竞争  欢迎补充","like_count":0},{"had_liked":false,"id":240853,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1597105077,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"1597105077","product_id":100056701,"comment_content":"我总感觉，还是多线程快一点。比如，数据的读取，数据的写入，命令的解析。都可以使用多线程。然后写入一个队列，然后单线程进行，查找，写入，修改。把结果写入队列。然后让多线程发送给客户端。我觉得这样会快一点。一个线程干完所有的活，总觉得没那么快。是不是我理解的方式不对？","like_count":0,"discussions":[{"author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298908,"discussion_content":"多线程读写不能保证顺序耶","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597472791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1676486,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIvCL6xhkRrpvYcAsm5v7HgqItcvet9b3ldkkSLQ2ScOU7SfA3vUtjYwpSoQNMlHjezAtvcJI9WcQ/132","nickname":"Tobey","note":"","ucode":"C20141487FC216","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":333117,"discussion_content":"队列不能保证顺序性吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607435535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298908,"ip_address":""},"score":333117,"extra":""},{"author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1676486,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIvCL6xhkRrpvYcAsm5v7HgqItcvet9b3ldkkSLQ2ScOU7SfA3vUtjYwpSoQNMlHjezAtvcJI9WcQ/132","nickname":"Tobey","note":"","ucode":"C20141487FC216","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333533,"discussion_content":"队列是有序，但是你不能保证数据放队列之前是有序的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607559700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333117,"ip_address":""},"score":333533,"extra":""},{"author":{"id":2433053,"avatar":"https://static001.geekbang.org/account/avatar/00/25/20/1d/162c8ad4.jpg","nickname":"黄宝玲","note":"","ucode":"F873496A0AD131","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":347239,"discussion_content":"我个人的理解是，redis每秒8000到10000个QPS，可以看成是1ms内发起的查询和修改请求，谁先到谁后到没有太大关系，只要保证操作是原子的就可以了，不对请指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612182598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333533,"ip_address":""},"score":347239,"extra":""}]}]},{"had_liked":false,"id":240852,"user_name":"哦吼掉了","can_delete":false,"product_type":"c1","uid":1232599,"ip_address":"","ucode":"1F89B1BA1EEF52","user_header":"https://static001.geekbang.org/account/avatar/00/12/ce/d7/8168e1bf.jpg","comment_is_top":false,"comment_ctime":1597104916,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597104916","product_id":100056701,"comment_content":"那redis6.0为啥使用多线程？网络请求这块是多线程吧，多路复用机制selector是单线程(可以调优成多线程么，和netty一样)，处理每一个请求是多个的去处理。","like_count":0},{"had_liked":false,"id":240847,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1597104371,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597104371","product_id":100056701,"comment_content":"存在的瓶颈就是 ，请求或者数据到达后的阻塞，就会造成整个系统的请求阻塞吧。","like_count":0},{"had_liked":false,"id":240837,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1597099542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597099542","product_id":100056701,"comment_content":"事件队列堆积了大量的请求，有些请求非常耗时，单线程处理就会发生性能问题","like_count":0},{"had_liked":false,"id":240763,"user_name":"阳阳","can_delete":false,"product_type":"c1","uid":1605341,"ip_address":"","ucode":"078DD80E0ADD38","user_header":"https://static001.geekbang.org/account/avatar/00/18/7e/dd/8098a7e0.jpg","comment_is_top":false,"comment_ctime":1597056413,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1597056413","product_id":100056701,"comment_content":"服务端是非阻塞的，那客户端是否是阻塞的一直等待结果的呢？直到服务端返回结果？","like_count":0,"discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298037,"discussion_content":"客户端是否阻塞主要看你的业务代码，你可以阻塞等待，也可以非阻塞回调","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597151766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1167233,"avatar":"https://static001.geekbang.org/account/avatar/00/11/cf/81/96f656ef.jpg","nickname":"杨逸林","note":"","ucode":"4BF3CF3E2F1AC7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297849,"discussion_content":"我觉得可以用Jedis试试，写在 Controller 里面注入调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597071729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240762,"user_name":"末日，成欢","can_delete":false,"product_type":"c1","uid":1812201,"ip_address":"","ucode":"BBAEBB9C93558A","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLm8skz4F7FGGBTXWUMia6qVEc00BddeXapicv5FkAx62GmOnUNEcE4scSR60AmappQoNdIQhccKsBA/132","comment_is_top":false,"comment_ctime":1597056308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597056308","product_id":100056701,"comment_content":"调用 accept() 时，已经存在监听套接字了。 如果客户端还没有请求过来， 也会有FD的存在吗？","like_count":0},{"had_liked":false,"id":240687,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1597034264,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597034264","product_id":100056701,"comment_content":"1. 对于不同的事件，都是进入 相同的事件处理队列吗？<br>2. 事件处理队列是先入先出的，如果队列中请求一旦发生累积，请求的处理延时也会也会随之增大吧？","like_count":0},{"had_liked":false,"id":240679,"user_name":"脱缰的野马__","can_delete":false,"product_type":"c1","uid":1447569,"ip_address":"","ucode":"D5F993E7232C61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/WtHCCMoLJ2DvzqQwPYZyj2RlN7eibTLMHDMTSO4xIKjfKR1Eh9L98AMkkZY7FmegWyGLahRQJ5ibPzeeFtfpeSow/132","comment_is_top":false,"comment_ctime":1597032986,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597032986","product_id":100056701,"comment_content":"多线程之间的上下文切换也是影响性能的点","like_count":0,"discussions":[{"author":{"id":1031037,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bb/7d/1f4b4697.jpg","nickname":"BR","note":"","ucode":"2CF588390A5D34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297727,"discussion_content":"这是单线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597035000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240673,"user_name":"MClink","can_delete":false,"product_type":"c1","uid":1435733,"ip_address":"","ucode":"F479190923355C","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","comment_is_top":false,"comment_ctime":1597031049,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597031049","product_id":100056701,"comment_content":"想问个问题，如果我在代码层连接 Redis 时没有设置 timeout 参数，那么如果对应的某个业务进程执行 get&#47;rPop 命令卡在了 revefrom 的系统调用（也就是等待Redis 返回数据），而该Redis还在正常的处理其他的客户端请求（看起来正常，没有挂掉），那么这种原因有可能是因为 Redis 已经正确处理并且返回了数据，但是客户端没有正常接收到导致的嘛（丢包？），基于 tcp  的 Redis 应该是有重传机制的才对吧，看了很久，如果是 Redis 的内部发生了阻塞，照理说整个事件队列应该也是会被阻塞的才对。希望老师能给点处理该问题的方向。","like_count":0},{"had_liked":false,"id":240639,"user_name":"努力努力再努力","can_delete":false,"product_type":"c1","uid":1450822,"ip_address":"","ucode":"1F14391D73E972","user_header":"https://static001.geekbang.org/account/avatar/00/16/23/46/db5212bc.jpg","comment_is_top":false,"comment_ctime":1597025051,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597025051","product_id":100056701,"comment_content":"老师，redis是通过一个线程来负责建立连接，这个线程也负责处理读时间和写事件吗？这种类似单reactor线程模型吗？一直以为redis是和netty类型的，一个线程专门处理连接，然后另外单个线程负责读写事件，然后再调用handler去处理的","like_count":0,"discussions":[{"author":{"id":1623626,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c6/4a/3bd896fc.jpg","nickname":"Heiky","note":"","ucode":"03AA79E1BC4AE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534516,"discussion_content":"我也是这么理解的，一个线程，可以同时处理建立连接和操作读写事件吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638200912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240634,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1597024207,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597024207","product_id":100056701,"comment_content":"我认为可能的瓶颈一个是在处理big key时网络传输的速率，再一个是每次都要重新建立连接感觉对性能是有些浪费的，不知道可不可以和一些常用客户端建立长连接","like_count":0,"discussions":[{"author":{"id":2433053,"avatar":"https://static001.geekbang.org/account/avatar/00/25/20/1d/162c8ad4.jpg","nickname":"黄宝玲","note":"","ucode":"F873496A0AD131","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347436,"discussion_content":"所以redis连接池配置可以避免频繁建连","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612231957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240628,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1597021536,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597021536","product_id":100056701,"comment_content":"“Redis 单线程是指它对网络 IO 和数据读写的操作采用了一个线程”<br>老师，这句话如下理解是正确否？<br>1. 响应redis客户端网络请求的线程、处理事件回调函数的线程、读写全局Hash表的线程 都是 同一个线程<br>2. 若Redis采用多线程实现，全局Hash表成为多线程的竞争资源<br>","like_count":0},{"had_liked":false,"id":240625,"user_name":"徐鹏","can_delete":false,"product_type":"c1","uid":1221936,"ip_address":"","ucode":"B19B6EB7002231","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/30/4be78ce7.jpg","comment_is_top":false,"comment_ctime":1597021199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597021199","product_id":100056701,"comment_content":"在事件回掉函数中处理的数据量太大应该会非常影响性能","like_count":0},{"had_liked":false,"id":240615,"user_name":"0bug","can_delete":false,"product_type":"c1","uid":1050335,"ip_address":"","ucode":"CADCC882F31784","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/df/60126ff3.jpg","comment_is_top":false,"comment_ctime":1597018251,"is_pvip":false,"replies":[{"id":"89324","content":"没错，bigkey是一直要关注的问题，再和单线程模型一叠加，容易出事。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597572291,"ip_address":"","comment_id":240615,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1597018251","product_id":100056701,"comment_content":"操作大key的时候，IO是性能瓶颈","like_count":0,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503504,"discussion_content":"没错，bigkey是一直要关注的问题，再和单线程模型一叠加，容易出事。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597572291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1468298,"avatar":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","nickname":"锦","note":"","ucode":"CB0EB4B68C468B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297668,"discussion_content":"是的，因为redis键值对读写是单线程的，范围查询lrange也会是阻塞线程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597021612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240600,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1596990704,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1596990704","product_id":100056701,"comment_content":"如果把接收连接请求和接收数据分到两个线程里面是不是更好,毕竟他们两个是干两件事的","like_count":0,"discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365417,"discussion_content":"这个本来就是分开的，redis6.0只是区分接收数据和发送数据是否由主线程执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617797549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181502,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/3e/3128da2f.jpg","nickname":"一言尔莫笑","note":"","ucode":"5BDC164EC980CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297687,"discussion_content":"分开之后会变得复杂，需要将收到的请求和数据进行正确组合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597024337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050335,"avatar":"https://static001.geekbang.org/account/avatar/00/10/06/df/60126ff3.jpg","nickname":"0bug","note":"","ucode":"CADCC882F31784","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297646,"discussion_content":"redis就是这样做的，采用的是单reactor单线程模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597016252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240596,"user_name":"张晗_Jeremy","can_delete":false,"product_type":"c1","uid":1956890,"ip_address":"","ucode":"47C427BB55210B","user_header":"https://static001.geekbang.org/account/avatar/00/1d/dc/1a/04f212f6.jpg","comment_is_top":false,"comment_ctime":1596990403,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1596990403","product_id":100056701,"comment_content":"第一时间打卡！","like_count":0,"discussions":[{"author":{"id":1062444,"avatar":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","nickname":"小喵喵","note":"","ucode":"FDBBB2A59DB8B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309339,"discussion_content":"第一时间打卡,为什么排在最后呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601261080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1956890,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/dc/1a/04f212f6.jpg","nickname":"张晗_Jeremy","note":"","ucode":"47C427BB55210B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1062444,"avatar":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","nickname":"小喵喵","note":"","ucode":"FDBBB2A59DB8B6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309573,"discussion_content":"不清楚啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601350712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309339,"ip_address":""},"score":309573,"extra":""}]}]}]}