{"id":560411,"title":"16｜RISC-V指令精讲（一）：算术指令实现与调试","content":"<p>你好，我是LMOS。</p><p>通过前面的学习，我们已经了解了在C语言编译器的“视角”下，C语言的各种表达式是如何转换成各种机器汇编指令的。从这节课开始，我会带你进一步深入学习各种汇编指令的细节。</p><p>只要你耐心跟我学完这节课，对RISC-V的各种指令，你就能了如指掌了。这里我们将从RV32I的算术指令开始，先学习加减指令（add、sub），接着了解一下数值比较指令（slt）。这些指令都有两个版本，一个是立即数版本，一个是寄存器的版本。话不多说，我们开始吧。</p><p>课程配套代码从<a href=\"https://gitee.com/lmos/Geek-time-computer-foundation/tree/master/lesson16~17\">这里</a>下载。</p><h2>加减指令</h2><p>上小学时我们都学过四则运算，最基础的是加减法，即一个数加上或者减去一个数，对应到CPU中就是一条加法指令和一条减法指令。</p><p>一个CPU要执行基本的数据处理计算，加减指令是少不了的，否则基础的数学计算和内存寻址操作都完成不了，用这样的CPU做出来的计算机将毫无用处。</p><p>不过想让CPU实现加减法，我们需要用到它能“理解”的语言格式，这样才能顺畅交流。所以，在研究指令之前，我们先来看看RISC-V指令的格式。</p><h3>RISC-V指令的格式</h3><p>RISC-V机器指令是一种三操作数指令，其对应的汇编语句格式如下：</p><pre><code class=\"language-plain\">指令助记符 目标寄存器，源操作数1，源操作数2\n</code></pre><!-- [[[read_end]]] --><p>例如“add a0，a1，a2”，其中add就是指令助记符，表示各种指令，add是加法指令；a0是目标寄存器，目标寄存器可以是任何通用寄存器；a1，a2是源操作数1与源操作数2，源操作数1可以是任何通用寄存器，源操作数2可以是任何通用寄存器和立即数。立即数就是写指令中的常数，比如0、1、100、1024等。</p><h3>立即数加减法如何实现</h3><p>我们先来看看加法指令，加法指令有两种形式。一种形式是一个寄存器和一个立即数相加，结果写入目标寄存器，我们称之为立即数加法指令。另一种形式是一个寄存器和另一个寄存器相加，结果写入目标寄存器，我们称之为寄存器加法指令。</p><p>我们先来看看立即数加法指令，形式如下：</p><pre><code class=\"language-plain\">addi rd，rs1，imm\n#addi 立即数加法指令\n#rd 目标寄存器\n#rs1 源寄存器1\n#imm 立即数\n</code></pre><p>上述代码rd、rs1可以是任何通用寄存器。 imm立即数可以是-2048~2047，其完成的操作是将rs1寄存器里的值加上立即数，计算得到的数值会写到rd寄存器当中，也就是rd = rs1 + imm。</p><p>写代码验证之前，我们需要先明确代码应该写在哪里。而一个程序编译成二进制之后，运行的时候都是从 main 函数开始执行的。</p><p>所以，我们先构建一个main.c文件，在里面用C语言写上main函数，想让链接器工作这一步必不可少。接着，我们写一个汇编文件addi.S，并在里面用汇编写上<strong>addi_ins函数。</strong></p><p>addi_ins函数的代码如下所示：</p><pre><code class=\"language-plain\">addi_ins:\n    addi a0，a0，5          #a0 = a0+5，a0是参数，又是返回值，这样计算结果就返回了\n    jr ra\t\t\t\t\t#函数返回\n</code></pre><p>上节课我们提到过，C函数的函数名对应到汇编语言中就是标号，这里加上一条“jr ra”返回指令，就构成了一个C语言中的函数。</p><p>这里a0寄存器里的数值即是C语言函数里的第一个参数，也是返回值。所以这个汇编函数完成的功能，就是把传递进来的参数加上5，再把这个结果作为返回值返回。</p><p>下面我们在C语言的main函数中调用addi_ins，然后打印一下结果，如下所示：</p><pre><code class=\"language-plain\">#include \"stdio.h\"\nint addi_ins(int x); //声明一下汇编语言中的函数：addi_ins\nint main()\n{\n    int result = 0;\n    result = addi_ins(4);    //result = 9 = 4 + 5\n    printf(\"This result is:%d\\n\", result);\n    return 0;\n}\n</code></pre><p>你可以用VSCode打开工程目录，按下“F5”键调试一下，输出的结果为9，因为4+5肯定等于9。效果如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/dd/b95d16b356f5102dd607ffe7aa9468dd.jpg?wh=1920x1019\" alt=\"图片\"></p><p>上图中是程序刚刚执行完addi a0，a0，5指令之后，执行jr ra指令之前的状态。可以看到a0寄存器中的值已经变成了9，这说明运算的结果是正确的。</p><p>addi_ins函数返回后，输出的结果如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/54/b7d00c8a8cfb5c9b58096b4ac34ef754.jpg?wh=1920x1019\" alt=\"图片\"></p><p>上图的结果已经证明了，addi指令完成的功能和执行的结果符合我们的预期。</p><p>我们趁热打铁，在addi.S文件中再写一个函数，也就是<strong>addi_ins2函数</strong>，代码如下所示：</p><pre><code class=\"language-plain\">.globl addi_ins2\naddi_ins2:\n    addi a0，a0，-2048       #a0 = a0-2048，a0是参数，又是返回值，这样计算结果就返回了\n    jr ra                   #函数返回\n</code></pre><p>addi_ins2函数的指令和addi_ins函数一样，只不过立即数变成了负数。我们很清楚所谓减法就是加上一个负数，所以通过addi_ins2函数就实现了立即数减法指令。</p><p>同样地，我们在main函数中调用它，代码如下所示：</p><pre><code class=\"language-plain\">#include \"stdio.h\"\nint addi_ins(int x); //声明一下汇编语言中的函数：addi_ins\nint addi_ins2(int x); //声明一下汇编语言中的函数：addi_ins2\nint main()\n{\n    int result = 0;\n    result = addi_ins(4);    //result = 9 = 4 + 5\n    printf(\"This result is:%d\\n\", result);\n    result = addi_ins2(2048);    //result = 0 = 2048 - 2048\n    printf(\"This result is:%d\\n\", result);\n    return 0;\n}\n</code></pre><p>接着我们再按下“F5”键调试一下，第二个printf输出的结果为0，因为2048-2048 肯定等于0。如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/dc/3f43d6e963728b21bfd08c9bc163e2dc.jpg?wh=1920x1019\" alt=\"图片\"></p><p>和之前一样，上图中是刚刚执行完addi a0，a0，-2048指令之后，执行jr ra指令之前的状态。这时a0寄存器中的值已经变成了0，这说明运算的结果正确。</p><p>addi_ins2函数返回后，输出的结果如下图所示：<img src=\"https://static001.geekbang.org/resource/image/06/27/06546d200160722f354545c836869927.jpg?wh=1920x1019\" alt=\"图片\"></p><p>上图中已经证明了结果符合我们的预期，用addi指令完成了立即数的减法计算。这也是RISC-V指令集中没有立即数据减法指令的原因。为了保证这一特性，所有的立即数必须总是进行<strong>符号扩展</strong>，这样就可以用立即数表示负数，所以我们并不需要一个立即数版本的减法指令。</p><p>最后，为了进一步搞清楚这条指令的机器码数据，我们一起看看addi_ins函数和addi_ins2函数的二进制数据什么样。</p><p>让我们打开工程目录下的addi.bin文件，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/aa/07/aa949aecb51f43887efe64c028d9ef07.jpg?wh=1920x1019\" alt=\"图片\"></p><p>以上是四条指令数据，其中两个0x00008067数据为两个函数的返回指令，即：jr ra，0x00550513，它对应的汇编语句addi a0，a0，5，0x80050513，对应汇编语句addi a0，a0，-2048。</p><p>第五节课我们总体了解过RISC-V的指令格式，这里我们一起来详细拆分一下addi指令的各位段的数据，看看它是如何编码的。</p><p><img src=\"https://static001.geekbang.org/resource/image/35/38/35eyy14335aaf3ca16928246byy69b38.jpg?wh=1920x1100\" alt=\"图片\"></p><p>对照上图，我们可以看到一条指令数据为32位，其中操作码占7位，目标寄存器和或者源寄存器各占5位。通过5位二进制数，正好可以编码32个通用寄存器。上图中寄存器编码对应10，正好是x10，也即a0寄存器，立即数占12位。由于RISC-V指令总是按有符号数编码，所以立即数只能表示-2048~2047的范围。</p><h3>寄存器版本的加减法如何实现</h3><p>立即数的加减法已经搞定了，下面我们来看看寄存器版本的加减法如何实现。</p><p>寄存器版本的加法指令的形式如下：</p><pre><code class=\"language-plain\">add rd，rs1，rs2\n#add 加法指令\n#rd 目标寄存器\n#rs1 源寄存器1\n#rs2 源寄存器2\n</code></pre><p>类似立即数加法指令，寄存器版本的加法指令也是两个源寄存器相加，结果放在目标寄存器中，代码中rd、rs1、rs2可以是任何通用寄存器，计算操作也和前面addi指令一样。</p><p>还是通过写代码来做个验证，我们写一个addsub.S文件，并在其中用汇编写上add_ins函数 ，如下所示：</p><pre><code class=\"language-plain\">add_ins:\n    add a0，a0，a1          #a0 = a0+a1，a0、a1是C语言调用者传递的参数，a0是返回值，这样计算结果就返回了\n    jr ra                   #函数返回\n</code></pre><p>a0，a1是C语言函数调用的第一、二个参数，如果你想不明白，可以回顾一下之前我们讲的函数调用规范。</p><p>这里我们用VSCode打开工程目录，按下“F5”键调试一下，输出的结果为2，因为1+1的结果肯定等于2。</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/a8/ea91fdc0yy26203432e234f4fc1c3ca8.jpg?wh=1920x1018\" alt=\"图片\"></p><p>上图展示的是执行完add a0，a0，a1指令之后，执行jr ra指令之前的状态。这时a0寄存器中的值确实已经变成了2，这说明运算的结果正确。</p><p>当add_ins函数返回后，输出的结果如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/15/9e/150bc142f1fb7d3cb254a43e1ac5239e.jpg?wh=1920x1018\" alt=\"图片\"></p><p>这个结果证明了add指令执行的结果符合我们的预期。</p><p>好，我们加点速，一鼓作气把减法指令也拿下。在addsub.S文件中再写一个函数，也就是sub_ins函数，代码如下：</p><pre><code class=\"language-plain\">sub_ins:\n    sub a0，a0，a1          #a0 = a0-a1，a0、a1是C语言调用者传递的参数，a0是返回值，这样计算结果就返回了\n    jr ra                   #函数返回\n</code></pre><p>这段代码就是减法指令，和加法指令的模式一样，除了助记符是sub，实现的操作是a0 = a0 - a1。sub指令后的目标寄存器、源寄存器可以是任何通用寄存器。<br>\n我们按下“F5”键调试一下，其结果应为1，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/58/45/58b27beec7cd101e4851c55cb1454145.jpg?wh=1920x1018\" alt=\"图片\"></p><p>上图中依然是执行完sub a0，a0，a1指令之后，执行jr ra指令之前的状态。这时a0寄存器中的值确实已经变成1了，证明运算结果没问题。</p><p>当sub_ins函数返回后，就会输出下图所示的结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/75/3c/7591555613161c29edc73975f2e2503c.jpg?wh=1920x1018\" alt=\"图片\"></p><p>经过调试，sub指令执行的结果也符合我们的预期了。</p><p>下面我们继续研究机器编码，来看看add_ins函数和sub_ins函数的二进制数据。打开工程目录下的addsub.bin文件，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/e6/e1/e65638f1465db415bd8fb2d4045655e1.jpg?wh=1920x1018\" alt=\"图片\"></p><p>以上4个32位数据是四条指令，其中两个0x00008067数据是两个函数的返回指令即：jr ra，0x00b50533为add a0，a0，a1，0x40b50533为sub a0，a0，a1。</p><p>我们还是来拆分一下add、sub指令的各位段的数据，看看它们是如何编码的。如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/2c/29/2c8d62f82e806fde78497833fa446a29.jpg?wh=1920x1235\" alt=\"图片\"></p><p>从图里可以看到，操作码占了7位，目标寄存器和两个源寄存器它们各占5位。目标寄存器和源寄存器编码对应10，正好是x10，即a0寄存器。而源寄存器2编码对应11，正好是x11也即是a1。其它位段为功能编码，add、sub指令就是用高段的功能码区分的。</p><h2>比较指令</h2><p>加减指令我们就讲到这里，不过光能计算加减还不够，接下来我们看看比较指令。现在大多数处理器都会包含数据比较指令，用于判断数值大小，以便做进一步的处理。</p><h3>有无符号立即数版本：slti、sltiu指令</h3><p>RISC-V指令集中有四条比较指令，这四条又分为有无符号立即数版本和有无符号寄存器版本，分别是slti、sltiu、slt、sltu。</p><p>slti、sltiu指令的形式如下所示：</p><pre><code class=\"language-plain\">slti rd，rs1，imm\n#slti 有符号立即数比较指令\n#rd 目标寄存器\n#rs1 源寄存器1（有符号数据）\n#imm 有符号立即数(-2048~2047)\nsltiu rd，rs1，imm\n#sltiu 无符号立即数比较指令\n#rd 目标寄存器\n#rs1 源寄存器1（无符号数据）\n#imm 有符号立即数(-2048~2047)\n</code></pre><p>上述代码中rd、rs1可以是任何通用寄存器。有、无符号是指rs1寄存器中的数据，有符号立即数imm的数值范围是-2048~2047。</p><p>slti、sltiu完成的操作用伪代码描述如下：</p><pre><code class=\"language-plain\">if(rs1 &lt; imm)\n    rd = 1;\nelse\n    rd = 0;\n</code></pre><p>下一步又到了写代码验证的环节。我们建立一个slti.S文件，在其中用汇编写上slti_ins、sltiu_ins函数，然后写下这两个函数：</p><pre><code class=\"language-plain\">.global slti_ins\nslti_ins:\n    slti a0, a0, -2048      #if(a0&lt;-2048) a0=1 else a0=0，a0是参数，又是返回值，这样计算结果就返回了\n    jr ra                   #函数返回\n\n.global sltiu_ins\nsltiu_ins:\n    sltiu a0，a0，2047      #if(a0&lt;2047) a0=1 else a0=0，a0是参数，又是返回值，这样计算结果就返回了\n    jr ra                   #函数返回\n</code></pre><p>slti_ins与sltiu_ins函数我已经帮你写好了，分别执行了slti和sltiu指令，都是拿a0寄存器和一个立即数比较，如果a0小于立即数就把1写入a0寄存器。</p><p>下面我们在C语言的main函数中调用它，然后打印一下结果，用VSCode打开工程，按“F5”调试后的效果如图：</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/f9/c86feb04855a1a23e0aeae5146c505f9.jpg?wh=1920x1018\" alt=\"图片\"></p><p>上图中是执行完slti a0，a0，-2048指令之后，执行jr ra指令之前的状态。如果看到a0寄存器中的值确实已经变成1了，就说明运算的结果是正确的。</p><p>当slti_ins函数返回后，输出的结果如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/87/4c8fa672020d3698f7678880a816ab87.jpg?wh=1920x1018\" alt=\"图片\"></p><p>因为-2049比-2048确实要小，所以返回1，这证明结果是正确的。</p><p>sltiu_ins函数的调试方法也差不多。你不妨对照后面的图看一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/86/93/866c202bbc80506f2fd20da047yy7493.jpg?wh=1920x1018\" alt=\"图片\"></p><p>上图中依然是执行完sltiu a0，a0，2047指令之后，执行jr ra指令之前的状态，我们已经看到a0寄存器中的值变成0了，这说明a0的数据不小于2047。</p><p>当sltiu_ins函数返回后，输出的结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/7c/01/7cf1e67300e0eaf23c4c2eb39yy9f501.jpg?wh=1920x1018\" alt=\"图片\"></p><p>图里输出的结果0，这和执行完sltiu指令后a0的值是一致的。看到这可能你就有疑问了，传递的参数是-2048，它应该远小于2047，为什么输出结果不是1呢？</p><p>别忘了sltiu指令的属性，它是无符号的比较指令，也就是说sltiu指令看到的数据是无符号的，</p><p>而-2048数据编码为0xfffff800，如果把这个数据当成无符号数，则远大于2047，所以返回0。</p><h3>有无符号寄存器版本：slt、sltu指令</h3><p>接着我们再来看看slt、sltu指令，这是寄存器与寄存器的有无符号比较指令，它们的形式如下所示。</p><pre><code class=\"language-plain\">slt rd，rs1，rs2\n#slt 有符号比较指令\n#rd 目标寄存器\n#rs1 源寄存器1（有符号数据）\n#rs2 源寄存器2（有符号数据）\nsltu rd，rs1，rs2\n#sltu 无符号比较指令\n#rd 目标寄存器\n#rs1 源寄存器1（无符号数据）\n#rs2 源寄存器2（无符号数据）\n</code></pre><p>上述代码中rd、rs1、rs2可以是任何通用寄存器。有、无符号同样代表rs1、rs2寄存器中的数据。</p><p>我们先看看slt、sltu这两个指令完成的操作，用伪代码怎么描述：</p><pre><code class=\"language-plain\">if(rs1 &lt; rs2)\n    rd = 1;\nelse\n    rd = 0;\n</code></pre><p>我们依然在slti.S文件中用汇编写上slt_ins、sltu_ins函数 ，如下所示：</p><pre><code class=\"language-plain\">.globl slt_ins\nslt_ins:\n    slt a0, a0, a1          #if(a0&lt;a1) a0=1 else a0=0，a0，a1是参数，a0是返回值，这样计算结果就返回了\n    jr ra                   #函数返回\n\n.globl sltu_ins\nsltu_ins:\n    sltu a0, a0, a1         #if(a0&lt;a1) a0=1 else a0=0，a0，a1是参数，a0是返回值，这样计算结果就返回了\n    jr ra                   #函数返回    \n</code></pre><p>这里已经写好了slt_ins与sltu_ins函数，分别是执行slt和sltu指令，都是拿a0寄存器和a1寄存器比较，如果a0小于a1寄存器，就把1写入到a0寄存器，否则写入0到a0寄存器。</p><p>接下来的调试环节你应该很熟悉了。VSCode当中按F5调试的效果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/28/67/28665141e5d0f3dae4b491f9f44e0c67.jpg?wh=1920x1018\" alt=\"图片\"></p><p>上图中是执行完slt a0，a0，a1指令之后，执行jr ra指令之前的状态。对照截图可以看到，执行指令之后，a0寄存器中的值确实已经变成1了，这说明比较运算的结果是正确的。</p><p>当slt_ins函数返回后，输出的结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/67/0a/677af4b5ffe3b9d533495f455f5yyf0a.jpg?wh=1920x1018\" alt=\"图片\"></p><p>因为1确实小于2，所以结果返回1，通过调试表明运算结果是正确的。</p><p>sltu_ins函数的调试我们也如法炮制。</p><p><img src=\"https://static001.geekbang.org/resource/image/a9/17/a9afc7d19330f7197970a5397de06517.jpg?wh=1920x1018\" alt=\"图片\"></p><p>上图是执行完sltu a0，a0，a1指令之后，执行jr ra指令之前的状态。如果我们看到a0寄存器中的值变成0，就说明a0的数据不小于a1。</p><p>当sltu_ins函数返回后，输出的结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/e2/4a49ea167e93bb6a0dd67914a0ef06e2.jpg?wh=1920x1018\" alt=\"图片\"></p><p>是不是有点困惑？结果是0，可是传递的参数是-2和1，-2应该小于1啊？出现这个结果，是因为sltu指令所看到a0中的数据（-2），是<strong>无符号</strong>的。而-2的数据编码为0xfffffffe，由于它是无符号数，所以远大于1，返回0才是正确的。</p><p>调试工作告一段落，接下来我们再研究一下slti_ins、sltiu_ins、slt_ins、sltu_ins函数的二进制数据。打开工程目录下slti.bin文件，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/37/d39d56635dfd0f62961cc1fc48167c37.jpg?wh=1920x1018\" alt=\"图片\"></p><p>以上8个32位数据是八条指令，其中四个0x00008067数据是四个函数的返回指令即：jr ra，0x80052513为slti a0，a0，-2048，0x7ff53513为sltiu a0，a0，2047，0x00b52533为slt a0，a0，a1，0x00b53533为sltu a0，a0，a1。</p><p>同样地，我们也来拆分一下slti、sltiu、slt、sltu指令的各位段的数据，看看它们是如何编码的。</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/d5/d7fc42d9c557363aa4429da465410ed5.jpg?wh=1920x1837\" alt=\"图片\"></p><p>从上图可以发现，立即数版本和寄存器版本的指令格式不一样，操作码也不一样，而它们之间的有无符号是靠<strong>功能位段</strong>来区分的，而立即数位段和源寄存器与目标寄存器位段，和之前的指令是相同的。</p><p>到这里，四条比较指令我们就全部讲完了。建议你自己课后跟着课程练练手，加深印象。</p><h2>重点回顾</h2><p>这节课我们一起学习了加减指令和比较指令，让我们一起来回顾一下。</p><p>加减指令是CPU里最基本的指令。addi、add、sub这三条指令能对数据和寄存器进行加减运算，可以先把数据装入寄存器中，然后对寄存器与寄存器执行加减操作，也可以寄存器和立即数进行加减操作。</p><p>接着我们还学习了比较指令，比较指令能对数据进行比较操作，一共包括四条指令。按照有无符号立即数版本和有无符号寄存器版本划分，分别是slti、sltiu、slt、sltu。这个有无符号是对应操作数中的寄存器的数据，立即数永远是有符号数据。</p><p>加减指令主要用于加减法运算，比较指令用于对数据比较，判断数值大小，再结合后面要学的跳转指令就可以实现if-else语句了。</p><p><img src=\"https://static001.geekbang.org/resource/image/7b/91/7b55ea9d5d36a4ae1917f771b3ce0e91.jpg?wh=2280x1783\" alt=\"\"></p><p>下节课我们继续学习逻辑指令和移位指令，敬请期待。</p><h2>思考题</h2><p>请写出机器码0x00000033对应的指令。</p><p>欢迎把你的思考和想法分享在留言区。如果这节课对你有帮助，别忘了分享给身边的朋友，邀他一起学习。</p>","neighbors":{"left":{"article_title":"15｜C与汇编：揭秘C语言编译器的“搬砖”日常","id":558338},"right":{"article_title":"17｜RISC-V指令精讲（二）：算术指令实现与调试","id":561904}},"comments":[{"had_liked":false,"id":380149,"user_name":"范廷东","can_delete":false,"product_type":"c1","uid":2872395,"ip_address":"陕西","ucode":"30E3454EB3424E","user_header":"https://static001.geekbang.org/account/avatar/00/2b/d4/4b/ec621442.jpg","comment_is_top":false,"comment_ctime":1693105475,"is_pvip":false,"replies":[{"id":138473,"content":"截图细节比较多，建议pc端学习和跟练～","user_name":"编辑回复","user_name_real":"编辑","uid":1501385,"ctime":1693277851,"ip_address":"北京","comment_id":380149,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"用手机看不清文章中的图片","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626684,"discussion_content":"截图细节比较多，建议pc端学习和跟练～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693277851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357370,"user_name":"James Deng","can_delete":false,"product_type":"c1","uid":1109553,"ip_address":"湖北","ucode":"7B63984F2C2C52","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/31/8a5cd41d.jpg","comment_is_top":false,"comment_ctime":1663205950,"is_pvip":false,"replies":[{"id":130131,"content":"嗯嗯","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1663395703,"ip_address":"湖北","comment_id":357370,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"想问一下，浮点及不同数据类型转换，也是有对应的指令吧","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587930,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663395703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356830,"user_name":"LockedX","can_delete":false,"product_type":"c1","uid":1683139,"ip_address":"湖北","ucode":"19B82B910FC67F","user_header":"https://static001.geekbang.org/account/avatar/00/19/ae/c3/d930693b.jpg","comment_is_top":false,"comment_ctime":1662623389,"is_pvip":false,"replies":[{"id":129927,"content":"是的 你很厉害 ","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1662884681,"ip_address":"湖北","comment_id":356830,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"0x00000033解析为0000 0000 0011 0011\n由操作码011 0011和功能码都是0推出指令add(寄存器加法)\n再由第5课查表得知0表示寄存是zero，所以指令是add zero,zero,zero\n这个就是所谓的占位指令啦","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587209,"discussion_content":"是的 你很厉害 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662884681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356115,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"湖北","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1661994264,"is_pvip":false,"replies":[{"id":129737,"content":"Q1用寄存器","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1662256028,"ip_address":"湖北","comment_id":356115,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"请教老师几个问题：\nQ1：立即数最小只能是-2048，如果要减去更大的数，怎么办？\n同理，如果要加上比2048大的数，怎么办？\nQ2：功能位有什么用？addi指令的功能位是3位，都是0，好像没有区别。\nQ3：jr ra，这里的 ra 表示什么？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586482,"discussion_content":"Q1用寄存器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662256028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355996,"user_name":"苏流郁宓","can_delete":false,"product_type":"c1","uid":2729645,"ip_address":"湖北","ucode":"AD07BD9CE03047","user_header":"https://static001.geekbang.org/account/avatar/00/29/a6/ad/e65aec4c.jpg","comment_is_top":false,"comment_ctime":1661911179,"is_pvip":false,"replies":[{"id":129741,"content":"00？？？","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1662256211,"ip_address":"湖北","comment_id":355996,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"操作符add，……，a1？中间的00不懂指向那个寄存器的啊","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586486,"discussion_content":"00？？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662256211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355979,"user_name":"肖水平","can_delete":false,"product_type":"c1","uid":2312202,"ip_address":"湖北","ucode":"BA5B49AEDF84C7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7mF1Zdh16zKFDsIjV6movCe1vArG6icbr9Bd537NDg7dA6y24LhdC3ypvzqJBW18oGcDeC2yTwDsw/132","comment_is_top":false,"comment_ctime":1661905925,"is_pvip":false,"replies":[{"id":129740,"content":"导出符号 ","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1662256172,"ip_address":"湖北","comment_id":355979,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"汇编语言中.globl是什么意思？为什么addi_ins没有加它？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586485,"discussion_content":"导出符号 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662256172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}