{"id":101172,"title":"23 | 冒险和预测（二）：流水线里的接力赛","content":"<p>上一讲，我为你讲解了结构冒险和数据冒险，以及应对这两种冒险的两个解决方案。一种方案是增加资源，通过添加指令缓存和数据缓存，让我们对于指令和数据的访问可以同时进行。这个办法帮助CPU解决了取指令和访问数据之间的资源冲突。另一种方案是直接进行等待。通过插入NOP这样的无效指令，等待之前的指令完成。这样我们就能解决不同指令之间的数据依赖问题。</p><p>着急的人，看完上一讲的这两种方案，可能已经要跳起来问了：“这也能算解决方案么？”的确，这两种方案都有点儿笨。</p><p>第一种解决方案，好比是在软件开发的过程中，发现效率不够，于是研发负责人说：“我们需要双倍的人手和研发资源。”而第二种解决方案，好比你在提需求的时候，研发负责人告诉你说：“来不及做，你只能等我们需求排期。” 你应该很清楚地知道，“堆资源”和“等排期”这样的解决方案，并不会真的提高我们的效率，只是避免冲突的无奈之举。</p><p>那针对流水线冒险的问题，我们有没有更高级或者更高效的解决方案呢？既不用简单花钱加硬件电路这样“堆资源”，也不是纯粹等待之前的任务完成这样“等排期”。</p><p>答案当然是有的。这一讲，我们就来看看计算机组成原理中，一个更加精巧的解决方案，<strong>操作数前推</strong>。</p><h2>NOP操作和指令对齐</h2><!-- [[[read_end]]] --><p>要想理解操作数前推技术，我们先来回顾一下，<a href=\"https://time.geekbang.org/column/article/93359\">第5讲</a>讲过的，MIPS体系结构下的R、I、J三类指令，以及<a href=\"https://time.geekbang.org/column/article/99523\">第20讲</a>里的五级流水线“取指令（IF）-指令译码（ID）-指令执行（EX）-内存访问（MEM）-数据写回（WB） ”。</p><p>我把对应的图片放进来了，你可以看一下。如果印象不深，建议你先回到这两节去复习一下，再来看今天的内容。</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/bf/b1ade5f8de67b172bf7b4ec9f63589bf.jpeg?wh=2212*595\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/1e/ad/1e880fa8b1eab511583267e68f0541ad.jpeg?wh=2203*1180\" alt=\"\"></p><p>在MIPS的体系结构下，不同类型的指令，会在流水线的不同阶段进行不同的操作。</p><p>我们以MIPS的LOAD，这样从内存里读取数据到寄存器的指令为例，来仔细看看，它需要经历的5个完整的流水线。STORE这样从寄存器往内存里写数据的指令，不需要有写回寄存器的操作，也就是没有数据写回的流水线阶段。至于像ADD和SUB这样的加减法指令，所有操作都在寄存器完成，所以没有实际的内存访问（MEM）操作。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/d4/b66ea9ca3300c7f71e91aaa6b6428fd4.jpg?wh=2181*592\" alt=\"\"></p><p>有些指令没有对应的流水线阶段，但是我们并不能跳过对应的阶段直接执行下一阶段。不然，如果我们先后执行一条LOAD指令和一条ADD指令，就会发生LOAD指令的WB阶段和ADD指令的WB阶段，在同一个时钟周期发生。这样，相当于触发了一个结构冒险事件，产生了资源竞争。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/5f/9e62ab3b42e445d65accf0549badf45f.jpeg?wh=2015*1082\" alt=\"\"></p><p>所以，在实践当中，各个指令不需要的阶段，并不会直接跳过，而是会运行一次NOP操作。通过插入一个NOP操作，我们可以使后一条指令的每一个Stage，一定不和前一条指令的同Stage在一个时钟周期执行。这样，就不会发生先后两个指令，在同一时钟周期竞争相同的资源，产生结构冒险了。</p><p><img src=\"https://static001.geekbang.org/resource/image/c1/42/c16643d83dd534d3d97d0d7ad8e30d42.jpg?wh=2181*573\" alt=\"\"></p><h2>流水线里的接力赛：操作数前推</h2><p>通过NOP操作进行对齐，我们在流水线里，就不会遇到资源竞争产生的结构冒险问题了。除了可以解决结构冒险之外，这个NOP操作，也是我们之前讲的流水线停顿插入的对应操作。</p><p>但是，插入过多的NOP操作，意味着我们的CPU总是在空转，干吃饭不干活。那么，我们有没有什么办法，尽量少插入一些NOP操作呢？不要着急，下面我们就以两条先后发生的ADD指令作为例子，看看能不能找到一些好的解决方案。</p><pre><code>add $t0, $s2,$s1\nadd $s2, $s1,$t0\n</code></pre><p>这两条指令很简单。</p><ol>\n<li>第一条指令，把 s1 和 s2 寄存器里面的数据相加，存入到 t0 这个寄存器里面。</li>\n<li>第二条指令，把 s1 和 t0 寄存器里面的数据相加，存入到 s2 这个寄存器里面。</li>\n</ol><p>因为后一条的 add 指令，依赖寄存器 t0 里的值。而 t0 里面的值，又来自于前一条指令的计算结果。所以后一条指令，需要等待前一条指令的数据写回阶段完成之后，才能执行。就像上一讲里讲的那样，我们遇到了一个数据依赖类型的冒险。于是，我们就不得不通过流水线停顿来解决这个冒险问题。我们要在第二条指令的译码阶段之后，插入对应的NOP指令，直到前一天指令的数据写回完成之后，才能继续执行。</p><p>这样的方案，虽然解决了数据冒险的问题，但是也浪费了两个时钟周期。我们的第2条指令，其实就是多花了2个时钟周期，运行了两次空转的NOP操作。</p><p><img src=\"https://static001.geekbang.org/resource/image/94/69/94dda2330b07c08530540ae11838c569.jpeg?wh=2389*1069\" alt=\"\"></p><p>不过，其实我们第二条指令的执行，未必要等待第一条指令写回完成，才能进行。如果我们第一条指令的执行结果，能够直接传输给第二条指令的执行阶段，作为输入，那我们的第二条指令，就不用再从寄存器里面，把数据再单独读出来一次，才来执行代码。</p><p>我们完全可以在第一条指令的执行阶段完成之后，直接将结果数据传输给到下一条指令的ALU。然后，下一条指令不需要再插入两个NOP阶段，就可以继续正常走到执行阶段。</p><p><img src=\"https://static001.geekbang.org/resource/image/dc/27/dceadd35c334974d8270052b37d48c27.jpeg?wh=2249*638\" alt=\"\"></p><p>这样的解决方案，我们就叫作<strong>操作数前推</strong>（Operand Forwarding），或者操作数旁路（Operand Bypassing）。其实我觉得，更合适的名字应该叫<strong>操作数转发</strong>。这里的Forward，其实就是我们写Email时的“转发”（Forward）的意思。不过现有的经典教材的中文翻译一般都叫“前推”，我们也就不去纠正这个说法了，你明白这个意思就好。</p><p>转发，其实是这个技术的<strong>逻辑含义</strong>，也就是在第1条指令的执行结果，直接“转发”给了第2条指令的ALU作为输入。另外一个名字，旁路（Bypassing），则是这个技术的<strong>硬件含义</strong>。为了能够实现这里的“转发”，我们在CPU的硬件里面，需要再单独拉一根信号传输的线路出来，使得ALU的计算结果，能够重新回到ALU的输入里来。这样的一条线路，就是我们的“旁路”。它越过（Bypass）了写入寄存器，再从寄存器读出的过程，也为我们节省了2个时钟周期。</p><p>操作数前推的解决方案不但可以单独使用，还可以和流水线冒泡一起使用。有的时候，虽然我们可以把操作数转发到下一条指令，但是下一条指令仍然需要停顿一个时钟周期。</p><p>比如说，我们先去执行一条LOAD指令，再去执行ADD指令。LOAD指令在访存阶段才能把数据读取出来，所以下一条指令的执行阶段，需要在访存阶段完成之后，才能进行。</p><p><img src=\"https://static001.geekbang.org/resource/image/49/2d/49f3a9b1ae2972ac5c6cfca7731bf12d.jpeg?wh=2497*640\" alt=\"\"></p><p>总的来说，操作数前推的解决方案，比流水线停顿更进了一步。流水线停顿的方案，有点儿像游泳比赛的接力方式。下一名运动员，需要在前一个运动员游玩了全程之后，触碰到了游泳池壁才能出发。而操作数前推，就好像短跑接力赛。后一个运动员可以提前抢跑，而前一个运动员会多跑一段主动把交接棒传递给他。</p><h2>总结延伸</h2><p>这一讲，我给你介绍了一个更加高级，也更加复杂的解决数据冒险问题方案，就是操作数前推，或者叫操作数旁路。</p><p>操作数前推，就是通过在硬件层面制造一条旁路，让一条指令的计算结果，可以直接传输给下一条指令，而不再需要“指令1写回寄存器，指令2再读取寄存器“这样多此一举的操作。这样直接传输带来的好处就是，后面的指令可以减少，甚至消除原本需要通过流水线停顿，才能解决的数据冒险问题。</p><p>这个前推的解决方案，不仅可以单独使用，还可以和前面讲解过的流水线冒泡结合在一起使用。因为有些时候，我们的操作数前推并不能减少所有“冒泡”，只能去掉其中的一部分。我们仍然需要通过插入一些“气泡”来解决冒险问题。</p><p>通过操作数前推，我们进一步提升了CPU的运行效率。那么，我们是不是还能找到别的办法，进一步地减少浪费呢？毕竟，看到现在，我们仍然少不了要插入很多NOP的“气泡”。那就请你继续坚持学习下去。下一讲，我们来看看，CPU是怎么通过乱序执行，进一步减少“气泡”的。</p><h2>推荐阅读</h2><p>想要深入了解操作数前推相关的内容，推荐你读一下《计算机组成与设计：硬件/软件接口》的4.5～4.7章节。</p><h2>课后思考</h2><p>前面讲5级流水线指令的时候，我们说，STORE指令是没有数据写回阶段的，而ADD指令是没有访存阶段的。那像CMP或者JMP这样的比较和跳转指令，5个阶段都是全的么？还是说不需要哪些阶段呢？</p><p>欢迎留言和我分享你的疑惑和见解。你也可以把今天的内容，分享给你的朋友，和他一起学习和进步。</p><p></p>","comments":[{"had_liked":false,"id":136914,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1569552726,"is_pvip":false,"replies":[{"id":"52601","content":"谢谢，这个也是我期望这个专栏达到的效果。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1569651366,"ip_address":"","comment_id":136914,"utype":1}],"discussion_count":4,"race_medal":0,"score":"199138048342","product_id":100026001,"comment_content":"感觉老师的讲课顺序特别好 方案都是一点点演变来的  那些看起来高大上的解决方案 都是从最笨的方法开始慢慢优化演变而来的  不是直接一步到位的讲解 能够更好的理解","like_count":47,"discussions":[{"author":{"id":2631067,"avatar":"https://static001.geekbang.org/account/avatar/00/28/25/9b/162b2450.jpg","nickname":"王洪15890135220","note":"","ucode":"12E60C20C35A20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537789,"discussion_content":"一个人有技术是一件事情，如何讲出来是又是另一件事情，如何通俗易懂的讲出来是比技术本身更高的一种境界","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639195466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468860,"discussion_content":"谢谢，这个也是我期望这个专栏达到的效果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569651366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1209653,"avatar":"https://static001.geekbang.org/account/avatar/00/12/75/35/a0c15ca8.jpg","nickname":"一頭蠻牛","note":"","ucode":"887E596A1DBF2D","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":577854,"discussion_content":"你怎么这么牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656391071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":468860,"ip_address":""},"score":577854,"extra":""}]},{"author":{"id":1658413,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4e/2d/06d3f9f5.jpg","nickname":"静✨","note":"","ucode":"1B33229C206339","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348967,"discussion_content":"感同身受！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612800211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104627,"user_name":"刘桢","can_delete":false,"product_type":"c1","uid":1482815,"ip_address":"","ucode":"3BFAB1C9772EB4","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/3f/06b690ba.jpg","comment_is_top":false,"comment_ctime":1560789016,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"164769546264","product_id":100026001,"comment_content":"今天考研冲北邮！","like_count":38,"discussions":[{"author":{"id":1328142,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","nickname":"-_-|||","note":"","ucode":"94B21594658BF9","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135207,"discussion_content":"冲哈佛","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579077587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1380366,"avatar":"https://static001.geekbang.org/account/avatar/00/15/10/0e/5a0f2339.jpg","nickname":"哪里有会生气的龙","note":"","ucode":"7F12FB7D01EB7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304276,"discussion_content":"冲MIT","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599535441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200231,"avatar":"https://static001.geekbang.org/account/avatar/00/12/50/67/29ad08bc.jpg","nickname":"梦里是谁🌚","note":"","ucode":"0050BC150EDBF4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381832,"discussion_content":"考上了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625228815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2656204,"avatar":"","nickname":"Geek_b809fe","note":"","ucode":"14BB37416285AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379254,"discussion_content":"6月份考研?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623772481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1762191,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/8f/77b5a753.jpg","nickname":"好好学习","note":"","ucode":"9D44D9530D9A1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347506,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612244598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104401,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":1358337,"ip_address":"","ucode":"276E2950D31AFB","user_header":"https://static001.geekbang.org/account/avatar/00/14/ba/01/c5161563.jpg","comment_is_top":false,"comment_ctime":1560745005,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"61690287149","product_id":100026001,"comment_content":"后面这些就有点难了，对于非计算机专业的我来说，不过就当看小说了，会一直看下去。。。","like_count":14,"discussions":[{"author":{"id":2192255,"avatar":"","nickname":"嘻嘻嘻","note":"","ucode":"84ED79E03135E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532080,"discussion_content":"计算机科学和习武一样，世界万事万物大道理都相同。就像扫地僧说慕容博从藏经阁偷的武功秘籍是给鸠摩智练的一样，因为莫容复功力还不够。计算机的理论知识就像一张大网，是你中有我，我中有你的，先建立整体框架，然后再逐个击破，遇到难咬的可能需要反复。还可能会走弯路。任督二脉不好打通，但打通了，以后学各种招式就很轻松了。没办法，只能靠自己的耐心和灵性","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1637508838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145012,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1572160034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48816800290","product_id":100026001,"comment_content":"---总结---<br>为了避免流水线停顿中插入过多的NOP指令，我们引入了操作数前推技术。<br>具有依赖关系的两条指令，后一条指令的输入往往来自于前一条指令执行之后写入的寄存器，而操作数前推则通过在硬件上制造一条旁路让前一条指令的执行结果直接作为后一条指令的输入，而无需等待前一条指令写回寄存器。<br>这就像工厂流水线中，上一道工序做好的半成品一般会先递送到某个储物柜上以供下个工序的工人使用，增加旁路后好比前一位工人直接将半成品递交给下一位工人，而减少了“放物品-取物品”这样的动作。","like_count":12},{"had_liked":false,"id":170633,"user_name":"许先森","can_delete":false,"product_type":"c1","uid":1795371,"ip_address":"","ucode":"1F42D4A6B5C6AF","user_header":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","comment_is_top":false,"comment_ctime":1578647823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31643418895","product_id":100026001,"comment_content":"cmp：取指令、译码、执行、访存、写回；<br>jmp：取指令、译码","like_count":8},{"had_liked":false,"id":136913,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1569552644,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31634323716","product_id":100026001,"comment_content":"cmp 指令是比较大小的指令  执行步骤感觉是 取指令 译码 取数据（访问内存 或者寄存器） 比较大小(执行) 出结果(写回)  应该是全的   jump指令是跳转的指令 执行步骤应该是  取指令  译码    跳转(执行)  没有访问内存和写回 的过程   ","like_count":7,"discussions":[{"author":{"id":1051665,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKgcGSrYIoAeWWj2YB1ATG5SVhY0REqj8HaegvWuCUXyNXHfODuNDVzniapGh1nNAicpSRibfrNNNBXA/132","nickname":"Luff","note":"","ucode":"834A6AFDF8C307","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382621,"discussion_content":"jmp 因该是 取指 译码 写回，没有 执行 和 访存吧，因为只需要，更改 pc 的值就行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625647711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104569,"user_name":"haer","can_delete":false,"product_type":"c1","uid":1146728,"ip_address":"","ucode":"0216267E645431","user_header":"","comment_is_top":false,"comment_ctime":1560777556,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"31625548628","product_id":100026001,"comment_content":"我觉得：cmp没有“访存”，jmp没有“执行”和“访存”","like_count":7,"discussions":[{"author":{"id":1517611,"avatar":"https://static001.geekbang.org/account/avatar/00/17/28/2b/2d0a8c0e.jpg","nickname":"宁博闻","note":"","ucode":"7A6ED41776E9C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157732,"discussion_content":"cmp五级流水线都有，因为ALU拿到比较指令时，是个内存里需要操作的数据地址，并不是CPU内部直接就有了需要操作的数据，所以也要访存拿数据再写回CPU内寄存器，通过ALU算出TrueFalse写入条件码寄存器供后续指令使用。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1580502669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2817866,"avatar":"","nickname":"竹林木","note":"","ucode":"60031BA3A2D907","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1517611,"avatar":"https://static001.geekbang.org/account/avatar/00/17/28/2b/2d0a8c0e.jpg","nickname":"宁博闻","note":"","ucode":"7A6ED41776E9C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540080,"discussion_content":"我觉得cmp没有访存，被比较的数据应该在load指令阶段存到寄存器了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639935666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":157732,"ip_address":""},"score":540080,"extra":""}]},{"author":{"id":1517611,"avatar":"https://static001.geekbang.org/account/avatar/00/17/28/2b/2d0a8c0e.jpg","nickname":"宁博闻","note":"","ucode":"7A6ED41776E9C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157733,"discussion_content":"而jmp只有取指令和译指令两级，因为译码器翻译出的jmp指令包含一个需要跳转的程序行数，不包含内存地址、数据、寄存器；所以不访存不给ALU传控制信号，只在译指令之后把要跳转的程序行数更新给PC寄存器就好。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1580502946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":774,"discussion_content":"嗯，我觉得也是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562052264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250959,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1601291893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18781161077","product_id":100026001,"comment_content":"CMP需要使用ALU进行比较，比较结果需要写入状态寄存器，因此没有访存阶段。<br>JMP在控制器中直接修改PC寄存器，因此没有ALU执行和访存阶段","like_count":5},{"had_liked":false,"id":104410,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1560747230,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10150681822","product_id":100026001,"comment_content":"从指令作用理解，cmp是全的，jmp不需要回写~","like_count":2},{"had_liked":false,"id":230911,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1593521077,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5888488373","product_id":100026001,"comment_content":"cmp指令需要把比较结果写入条件寄存器，所有有写回指令，如果是无条件jmp就只需要取指和译码即可，反之还需要执行。","like_count":1},{"had_liked":false,"id":137210,"user_name":"J.D.Chi","can_delete":false,"product_type":"c1","uid":1035855,"ip_address":"","ucode":"34812AEF95C7AB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/4f/3a89d29a.jpg","comment_is_top":false,"comment_ctime":1569650838,"is_pvip":false,"replies":[{"id":"52697","content":"J.D.同学<br><br>你好，第一个不能这么理解，只有没有前后依赖的指令才会在流水线里可以同时执行。实际上，你给的代码其实编译器通常会自动优化到后面那个状态。<br><br>早年的程序员的确会考虑得很底层，因为内存空间很小。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1569666139,"ip_address":"","comment_id":137210,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5864618134","product_id":100026001,"comment_content":"1. 我可以这么理解吗？就是把一个方法：<br>int main(int a , int b){<br>int c = a + b;<br>return c;<br>}<br>变成 <br>int main(int a , int b){<br>return a + b;<br>}<br>2. 看了之后有一个想法会不会那个时候的程序员的编程代码里是会考虑到汇编指令这一块，后来随着机器性能的发展，现在的程序员在日常写代码对这块就不太重视了，于是一些《代码简洁之道》一类的书就应运而生了。一方面包括了从视觉上对代码的规范，另一方面也回归到对指令考虑这一块。","like_count":1,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468985,"discussion_content":"J.D.同学\n\n你好，第一个不能这么理解，只有没有前后依赖的指令才会在流水线里可以同时执行。实际上，你给的代码其实编译器通常会自动优化到后面那个状态。\n\n早年的程序员的确会考虑得很底层，因为内存空间很小。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569666139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2809887,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/e0/1f/de322ce3.jpg","nickname":"Harley","note":"","ucode":"F92472893F2156","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573919,"discussion_content":"之前做lc上一道题目，性能测试的时候，上面这种情况直接超时了，当时打开字节码指令比对了下。发现比下面这种方式，多了一步将运算结果从操作数栈store到局部变量表的指令动作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653729830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135279,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1569116848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5864084144","product_id":100026001,"comment_content":"1  为了解决，计算机指令中，有太多气泡的，可以采用操作数前推的办法。(上一条指令，的结果不再写入到寄存器中去，而是直接传递给一下需要使用数据的指令。)","like_count":1},{"had_liked":false,"id":109532,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1562052241,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857019537","product_id":100026001,"comment_content":"CMP没有访问内存的操作，JMP没有执行、访问内存的操作","like_count":1},{"had_liked":false,"id":352885,"user_name":"浮石沉木","can_delete":false,"product_type":"c1","uid":2223167,"ip_address":"陕西","ucode":"D585768321B84A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/mQddXC7nRiaKHTwdficicTB3bH0q5ic5UoSab51Omic7eyLBz0SNcvbLpQnNib7zP1yJFm7xxx4ia81iahfibRVnbTwHmhw/132","comment_is_top":false,"comment_ctime":1658994308,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658994308","product_id":100026001,"comment_content":"老师，这里的指令对齐，我理解的是假设有14级的流水线，哪怕一个指令实际只有5个stage，但是为了对齐，剩余的9个stage都得用nohup补齐吗？","like_count":0},{"had_liked":false,"id":343872,"user_name":"Geek_080ce7","can_delete":false,"product_type":"c1","uid":2924187,"ip_address":"","ucode":"C74D97C84983B9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/SluScDGqnhBNwmOQ774QEzuXiazk8Ab7ng8xCT81gunl9Hls9oibwB4AibCDxDtZwTe4mEib5QiaLXUqMv8iceXicXSYg/132","comment_is_top":false,"comment_ctime":1651107366,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651107366","product_id":100026001,"comment_content":"旁路建立好之后，那不是无论前后两个指令有没有数据依赖关系，都会收到前一个指令的计算机结果？那不是导致计算紊乱吗？这是怎么解决的？感觉很有难度呀","like_count":0},{"had_liked":false,"id":327136,"user_name":"竹林木","can_delete":false,"product_type":"c1","uid":2817866,"ip_address":"","ucode":"60031BA3A2D907","user_header":"","comment_is_top":false,"comment_ctime":1639935455,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639935455","product_id":100026001,"comment_content":"cmp: 取指令，译码，执行，写回(访问内存应该是load指令阶段，这里只需要访问已经load到寄存器的值就行了)<br>jump: 取指令，译码，写回(改写的是指令计数器的值)","like_count":0},{"had_liked":false,"id":321053,"user_name":"活着即是修行","can_delete":false,"product_type":"c1","uid":2258416,"ip_address":"","ucode":"C420AA71FB7F9F","user_header":"https://static001.geekbang.org/account/avatar/00/22/75/f0/2c65887d.jpg","comment_is_top":false,"comment_ctime":1636635573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636635573","product_id":100026001,"comment_content":"cmp我感觉需要访存，因为要比较数值的大小，需要从内存中读取数值。写回不用吧。<br>jmp我感觉不用访存，也不用写回吧","like_count":0},{"had_liked":false,"id":308509,"user_name":"林有有头号粉丝","can_delete":false,"product_type":"c1","uid":2181461,"ip_address":"","ucode":"8DBEEC0B7E7CE1","user_header":"https://static001.geekbang.org/account/avatar/00/21/49/55/062c8d54.jpg","comment_is_top":false,"comment_ctime":1629659493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629659493","product_id":100026001,"comment_content":"老师您好，我想请问一下PC值更新的时机是什么时候？是每一个时钟信号给出的时候就完成自身状态的更新，并且向外界传输的吗？<br>","like_count":0},{"had_liked":false,"id":285819,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1617019927,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1617019927","product_id":100026001,"comment_content":"操作数前推，就是通过在硬件层面制造一条旁路，让一条指令的计算结果，可以直接传输给下一条指令，而不再需要“指令 1 写回寄存器，指令 2 再读取寄存器“这样多此一举的操作","like_count":0},{"had_liked":false,"id":282175,"user_name":"陌兮","can_delete":false,"product_type":"c1","uid":1415619,"ip_address":"","ucode":"00CE47CAECD5CD","user_header":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","comment_is_top":false,"comment_ctime":1615120550,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615120550","product_id":100026001,"comment_content":"老师讲的真是太有趣了，非常好看","like_count":0},{"had_liked":false,"id":270704,"user_name":"H","can_delete":false,"product_type":"c1","uid":1793962,"ip_address":"","ucode":"04D7D030245E27","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5f/aa/63e641c1.jpg","comment_is_top":false,"comment_ctime":1609224673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609224673","product_id":100026001,"comment_content":"看完之后🈶1个问题哈，希望老师能解答<br>1、本文说通过指令对齐，就是插入NOP操作来避免结构冒险的出现，但是缓存中已经划分为指令缓存和数据缓存。这两个缓存分区，还有用吗？","like_count":0},{"had_liked":false,"id":246937,"user_name":"哪里有会生气的龙","can_delete":false,"product_type":"c1","uid":1380366,"ip_address":"","ucode":"7F12FB7D01EB7E","user_header":"https://static001.geekbang.org/account/avatar/00/15/10/0e/5a0f2339.jpg","comment_is_top":false,"comment_ctime":1599534915,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1599534915","product_id":100026001,"comment_content":"ps:各个指令不需要的阶段，并不会直接跳过，而是会运行一次 NOP 操作。<br>请问，是所有的指令吗？","like_count":0,"discussions":[{"author":{"id":2223167,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/mQddXC7nRiaKHTwdficicTB3bH0q5ic5UoSab51Omic7eyLBz0SNcvbLpQnNib7zP1yJFm7xxx4ia81iahfibRVnbTwHmhw/132","nickname":"浮石沉木","note":"","ucode":"D585768321B84A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581789,"discussion_content":"同问此问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658994345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224196,"user_name":"Kim","can_delete":false,"product_type":"c1","uid":1236573,"ip_address":"","ucode":"39CC8E1E8EFB8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/5d/a7e748db.jpg","comment_is_top":false,"comment_ctime":1591316692,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1591316692","product_id":100026001,"comment_content":"老师，有点不太理解，SUB和ADD指令为什么没有访存操作呢？它们需要的数据不也是从内存中加载到缓存，寄存器然后才能执行么？对于哪些指令需要访存搞不清楚……，麻烦老师解答一下","like_count":0,"discussions":[{"author":{"id":1400806,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5f/e6/19778e70.jpg","nickname":"Mr.埃克斯","note":"","ucode":"855BE5DFD2BB0B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303063,"discussion_content":"个人认为，准确的说应该是mips体系的sub，add指令没有访存操作，x86指令存在。\nmips体系只有lw和sw指令访存，这也是精简指令体系的特点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599127302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1236573,"avatar":"https://static001.geekbang.org/account/avatar/00/12/de/5d/a7e748db.jpg","nickname":"Kim","note":"","ucode":"39CC8E1E8EFB8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1400806,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5f/e6/19778e70.jpg","nickname":"Mr.埃克斯","note":"","ucode":"855BE5DFD2BB0B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":309743,"discussion_content":"原来是这样，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601430850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303063,"ip_address":""},"score":309743,"extra":""}]}]},{"had_liked":false,"id":207231,"user_name":"WENMURAN","can_delete":false,"product_type":"c1","uid":1915404,"ip_address":"","ucode":"5D1CE8B41937C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXNhbTULKiakib8lYXrvGF2zPwfedooBzC2EtSv1nt1MwV1KUvTkcJrvCBFvcdwJicnr3OEXnk9GUCg/132","comment_is_top":false,"comment_ctime":1587030408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587030408","product_id":100026001,"comment_content":"冒险和预测二:<br>结构冒险和数据冒险的解决方法，增加硬件资源和等待。<br>更好的解决方案:操作数前堆<br>就是在硬件层面，构建一条同路，使得上一条指令的结果可以直接传入下一条使用，避免中间经过一层寄存器，减少一次NOF操作<br>操作数前堆也可以和流水线冒泡结合起来使用<br>","like_count":0},{"had_liked":false,"id":104309,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1560731491,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1560731491","product_id":100026001,"comment_content":"请问老师操作数前推中，前一条指令的输出存哪呢？如果还是寄存器那不还是没解决问题，如果不是那指令add不有两种形式，那又如何区分呢?","like_count":0,"discussions":[{"author":{"id":1400806,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5f/e6/19778e70.jpg","nickname":"Mr.埃克斯","note":"","ucode":"855BE5DFD2BB0B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303066,"discussion_content":"你想要的是存在流水线寄存器中？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599127523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1350677,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9c/15/719f1f44.jpg","nickname":"等风来","note":"","ucode":"5B7FF74A51F534","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3096,"discussion_content":"文章理由有说明，硬件层面在alu中加一个线路使其输出结果传道输入","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564161643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}