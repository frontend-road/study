{"id":209450,"title":"13 | PBFT算法：有人作恶，如何达成共识？","content":"<p>你好，我是韩健。</p><p>学完了<a href=\"https://time.geekbang.org/column/article/195662\">01讲</a>的拜占庭将军问题之后，有同学在留言中表达了自己的思考和困惑：口信消息型拜占庭问题之解在实际项目中是如何落地的呢？先给这位同学点个赞，很棒！你能在学习的同时思考落地实战。</p><p>不过事实上，它很难在实际项目落地，因为口信消息型拜占庭问题之解是一个非常理论化的算法，没有和实际场景结合，也没有考虑如何在实际场景中落地和实现。</p><p>比如，它实现的是在拜占庭错误场景下，忠将们如何在叛徒干扰时，就一致行动达成共识。但是它并不关心结果是什么，这会出现一种情况：现在适合进攻，但将军们达成的最终共识却是撤退。</p><p>很显然，这不是我们想要的结果。因为在实际场景中，我们需要就提议的一系列值（而不是单值），即使在拜占庭错误发生的时候也能被达成共识。那你要怎么做呢？答案就是掌握PBFT算法。</p><p>PBFT算法非常实用，是一种能在实际场景中落地的拜占庭容错算法，它在区块链中应用广泛（比如Hyperledger Sawtooth、Zilliqa）。为了帮助你更好地理解PBFT算法，在今天的内容中，我除了带你了解PBFT达成共识的原理之外，还会介绍口信消息型拜占庭问题之解的局限。相信学习完本讲内容后，你不仅能理解PBFT达成共识的基本原理，还能理解算法背后的演化和改进。</p><!-- [[[read_end]]] --><p>老规矩，在开始今天的学习之前，咱们先看一道思考题：</p><p>假设苏秦再一次带队抗秦，这一天，苏秦和4个国家的4位将军赵、魏、韩、楚商量军机要事，结果刚商量完没多久苏秦就接到了情报，情报上写道：联军中可能存在一个叛徒。这时，苏秦要如何下发作战指令，保证忠将们正确、一致地执行下发的作战指令，而不是被叛徒干扰呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/24/d3/2493047e33459cfa85843dd194ddced3.jpg?wh=1142*595\" alt=\"\"></p><p>带着这个问题，我们正式进入今天的学习。</p><p>首先，咱们先来研究一下，为什么口信消息型拜占庭问题之解很难在实际场景中落地，除了我在开篇提到的非常理论化，没有和实际的需求结合之外，还有其他的原因么？</p><p>其实，这些问题是后续众多拜占庭容错算法在努力改进和解决的，理解了这些问题，能帮助你更好地理解后来的拜占庭容错算法（包括PBFT算法）。</p><h2>口信消息型拜占庭问题之解的局限</h2><p>我想说的是，这个算法有个非常致命的缺陷。如果将军数为n、叛将数为 f，那么算法需要递归协商 f+1轮，消息复杂度为O(n ^ (f + 1))，消息数量指数级暴增。你可以想象一下，如果叛将数为64，消息数已经远远超过<strong>int64</strong>所能表示的了，这是无法想象的，肯定不行啊。</p><p>另外，尽管对于签名消息，不管叛将数（比如f）是多少，经过f + 1轮的协商，忠将们都能达成一致的作战指令，但是这个算法同样存在“理论化”和“消息数指数级暴增”的痛点。</p><p>讲到这儿，你肯定明白为什么这个算法很难在实际场景中落地了。可技术是不断发展的，算法也是在解决实际场景问题中不断改进的。那么PBFT算法的原理是什么呢？为什么它能在实际场景中落地呢？</p><h2>PBFT是如何达成共识的？</h2><p>我们先来看看如何通过PBFT算法，解决苏秦面临的共识问题。先假设苏秦制定的作战指令是进攻，而楚是叛徒（为了演示方便）：</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/37/8a6fe551e5b99a28e0fed8105ed5cc37.jpg?wh=1142*599\" alt=\"\" title=\"图1\"></p><p>需要你注意的是，所有的消息都是签名消息，也就是说，消息发送者的身份和消息内容都是无法伪造和篡改的（比如，楚无法伪造一个假装来自赵的消息）。</p><p>首先，苏秦联系赵，向赵发送包含作战指令“进攻”的请求（就像下图的样子）。</p><p><img src=\"https://static001.geekbang.org/resource/image/5d/76/5da99fcab9c99b92351e05aca9a9a976.jpg?wh=1142*450\" alt=\"\" title=\"图2\"></p><p>当赵接收到苏秦的请求之后，会执行三阶段协议（Three-phase protocol）。</p><ul>\n<li>赵将进入预准备（Pre-prepare）阶段，构造包含作战指令的预准备消息，并广播给其他将军（魏、韩、楚）。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/40/2f/40669f5c4bcaffbac446475251f1fa2f.jpg?wh=1142*455\" alt=\"\" title=\"图3\"></p><p>那么在这里，我想问你一个问题：魏、韩、楚，收到消息后，能直接执行指令吗？</p><p>答案是不能，因为他们不能确认自己接收到指令和其他人接收到的指令是相同的。比如，赵可能是叛徒，赵收到了2个指令，分别是“进攻”和“准备30天的粮草”，然后他给魏发送的是“进攻”，给韩、楚发送的是“准备30天粮草”，这样就会出现无法一致行动的情况。那么他们具体怎么办呢？我接着说一下。</p><ul>\n<li>接收到预准备消息之后，魏、韩、楚将进入准备（Prepare）阶段，并分别广播包含作战指令的准备消息给其他将军。比如，魏广播准备消息给赵、韩、楚（如图所示）。为了方便演示，我们假设叛徒楚想通过不发送消息，来干扰共识协商（你能看到，图中的楚是没有发送消息的）。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/12/43/12063907d531486261c42691ebc52c43.jpg?wh=1142*465\" alt=\"\" title=\"图4\"></p><p>然后，当某个将军收到2f个一致的包含作战指令的准备消息后，会进入提交（Commit）阶段（这里的2f包括自己，其中f为叛徒数，在我的演示中是1）。在这里，我也给你提一个问题：这个时候该将军（比如魏）可以直接执行指令吗？</p><p>答案还是不能，因为魏不能确认赵、韩、楚是否收到了2f 个一致的包含作战指令的准备消息。也就是说，魏这时无法确认赵、韩、楚是否准备好了执行作战指令。那么怎么办呢？别着急，咱们继续往下看。</p><ul>\n<li>进入提交阶段后，各将军分别广播提交消息给其他将军，也就是告诉其他将军，我已经准备好了，可以执行指令了。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/8a/b4/8a0f34d9098d361f114f91db8c4b1cb4.jpg?wh=1142*458\" alt=\"\" title=\"图5\"></p><ul>\n<li>最后，当某个将军收到2f + 1个验证通过的提交消息后（包括自己，其中f为叛徒数，在我的演示中为1），也就是说，大部分的将军们已经达成共识，这时可以执行作战指令了，那么该将军将执行苏秦的作战指令，执行完毕后发送执行成功的消息给苏秦。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/c7/4a/c7e8f7152487f65ba14569c50f08254a.jpg?wh=1142*376\" alt=\"\" title=\"图6\"></p><p>最后，当苏秦收到f+1个相同的响应（Reply）消息时，说明各位将军们已经就作战指令达成了共识，并执行了作战指令（其中f为叛徒数，在我的演示中为1）。</p><p>你看，经过了三轮协商，是不是就指定的作战指令达成了共识，并执行了作战指令了呢？</p><p>在这里，苏秦采用的就是<strong>简化版的PBFT算法</strong>。在这个算法中：</p><ul>\n<li>你可以将赵、魏、韩、楚理解为分布式系统的四个节点，其中赵是主节点（Primary），魏、韩、楚是备份节点（Backup）；</li>\n<li>将苏秦理解为业务，也就是客户端；</li>\n<li>将消息理解为网络消息；</li>\n<li>将作战指令“进攻”，理解成客户端提议的值，也就是希望被各节点达成共识，并提交给状态机的值。</li>\n</ul><p><strong>在这里我想说的是，</strong> PBFT算法是通过签名（或消息认证码MAC）约束恶意节点的行为，也就是说，每个节点都可以通过验证消息签名确认消息的发送来源，一个节点无法伪造另外一个节点的消息。最终，基于大多数原则（2f + 1）实现共识的。</p><p>需要你注意的是，最终的共识是否达成，客户端是会做判断的，如果客户端在指定时间内未收到请求对应的f + 1相同响应，就认为集群出故障了，共识未达成，客户端会重新发送请求。</p><p>另外需要你注意的是，PBFT算法通过视图变更（View Change）的方式，来处理主节点作恶，当发现主节点在作恶时，会以“轮流上岗”方式，推举新的主节点。</p><p>最后我想说的是，尽管PBFT算法相比口信消息型拜占庭之解已经有了很大的优化，将消息复杂度从O(n ^ (f + 1))降低为O(n ^ 2)，能在实际场景中落地，并解决实际的共识问题。但PBFT还是需要比较多的消息。比如在13节点集群中（f为4）。</p><ul>\n<li>请求消息：1</li>\n<li>预准备消息：3f = 12</li>\n<li>准备消息：3f * (3f - f) = 96</li>\n<li>提交消息：(3f - f + 1) * (3f + 1)= 117</li>\n<li>回复消息：3f - 1 = 11</li>\n</ul><p>也就是说，一次共识协商需要237个消息，你看，消息数还是蛮多的，所以我推荐你，在中小型分布式系统中使用PBFT算法。</p><h2>内容小结</h2><p>以上就是本节课的全部内容了，本节课我主要带你了解了口信消息型拜占庭问题之解的局限和PBFT的原理，我希望你明确这样几个重点。</p><ol>\n<li>\n<p>不管口信消息型拜占庭问题之解，还是签名消息型拜占庭问题之解，都是非常理论化的，未考虑实际场景的需求，而且协商成本非常高，指数级的消息复杂度是很难在实际场景中落地，和解决实际场景问题的。</p>\n</li>\n<li>\n<p>PBFT算法是通过签名（或消息认证码MAC）约束恶意节点的行为，采用三阶段协议，基于大多数原则达成共识的。另外，与口信消息型拜占庭问题之解（以及签名消息型拜占庭问题之解）不同的是，PBFT算法实现的是一系列值的共识，而不是单值的共识。</p>\n</li>\n</ol><p>最后，我想说的是，相比Raft算法完全不适应有人作恶的场景，PBFT算法能容忍(n - 1)/3个恶意节点(也可以是故障节点)。另外，相比PoW算法，PBFT的优点是不消耗算力，所以在日常实践中，PBFT比较适用于相对“可信”的场景中，比如联盟链。</p><p>需要你注意的是，PBFT算法与Raft算法类似，也存在一个“领导者”（就是主节点），同样，集群的性能也受限于“领导者”。另外，O(n ^ 2)的消息复杂度，以及随着消息数的增加，网络时延对系统运行的影响也会越大，这些都限制了运行PBFT算法的分布式系统的规模，也决定了PBFT算法适用于中小型分布式系统。</p><h2>课堂思考</h2><p>当客户端在收到了f + 1个结果，就认为共识达成了，那么为什么这个值不能小于f + 1呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"12 | Quorum NWR算法：想要灵活地自定义一致性，没问题！","id":209130},"right":{"article_title":"加餐 | PBFT算法：如何替换作恶的领导者？","id":242500}},"comments":[{"had_liked":false,"id":186649,"user_name":"笑若海","can_delete":false,"product_type":"c1","uid":1283537,"ip_address":"","ucode":"A10EF247EE4B5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/95/d1/7d3834ef.jpg","comment_is_top":false,"comment_ctime":1583895150,"is_pvip":false,"replies":[{"id":"77971","content":"加一颗星:)，f = (n - 1)&#47;3","user_name":"作者回复","comment_id":186649,"uid":"1642497","ip_address":"","utype":1,"ctime":1587414203,"user_name_real":"hanj4096"}],"discussion_count":3,"race_medal":0,"score":"74598339182","product_id":100046101,"comment_content":"如果接收到小于f+1个消息就认可服务返回结果，可能都是来自f个恶意节点的消息，导致客户端接受恶意结果。f+1保证至少一个正确结果，如果其中存在恶意消息，客户端会发现不一致性，认为请求处理失败。<br>这又引发一个新问题，客户端怎么确定f值？","like_count":17,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486824,"discussion_content":"加一颗星:)，f = (n - 1)/3","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587414203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1119933,"avatar":"https://static001.geekbang.org/account/avatar/00/11/16/bd/e14ba493.jpg","nickname":"翠羽香凝","note":"","ucode":"54F3762F0E545F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202989,"discussion_content":"算法模型规定了3f + 1 不能大于n，系统中通常n是已知的，所以实际中可以反推f的大小；如果f过大，模型实际已经失效了，所以无需考虑。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1583980158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2188142,"avatar":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","nickname":"Z宇锤锤","note":"","ucode":"7DB36E986A7A51","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545473,"discussion_content":"默认三分之一是叛徒？😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641971254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215538,"user_name":"DFW","can_delete":false,"product_type":"c1","uid":1315999,"ip_address":"","ucode":"186CA66AFB516A","user_header":"https://static001.geekbang.org/account/avatar/00/14/14/9f/1146fb91.jpg","comment_is_top":false,"comment_ctime":1589013307,"is_pvip":false,"replies":[{"id":"80781","content":"加一颗星:)","user_name":"作者回复","comment_id":215538,"uid":"1642497","ip_address":"","utype":1,"ctime":1589833877,"user_name_real":"hanj4096"}],"discussion_count":3,"race_medal":0,"score":"61718555451","product_id":100046101,"comment_content":"对于 pbft 算法，核心过程有三个阶段，分别是 pre-prepare （预准备）阶段，prepare （准备）阶段和 commit （提交）阶段。对于 pre-prepare 阶段，主节点广播 pre-prepare 消息给其它节点即可，因此通信次数为 n-1 ；对于 prepare 阶段，每个节点如果同意请求后，都需要向其它节点再 广播 parepare 消息，所以总的通信次数为 n*（n-1），即 n^2-n ；对于 commit 阶段，每个节点如果达到 prepared 状态后，都需要向其它节点广播 commit 消息，所以总的通信次数也为 n*（n-1） ，即 n^2-n 。所以总通信次数为 （n-1）+（n^2-n）+（n^2-n） ，即 2n^2-n-1 ，因此pbft算法复杂度为 O（n^2） 。","like_count":14,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494469,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589833877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2189067,"avatar":"https://static001.geekbang.org/account/avatar/00/21/67/0b/145e3804.jpg","nickname":"星宿海","note":"","ucode":"F49E70D579D59E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588667,"discussion_content":"prepare阶段主节点没广播，所以应该是（n-1）*（n-1）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663951548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"安徽"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082046,"avatar":"https://static001.geekbang.org/account/avatar/00/10/82/be/28e41bcf.jpg","nickname":"寻梦人","note":"","ucode":"C5F14222755ED8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290494,"discussion_content":"我了解的基于pbft算法实现的tendermint共识算法不需要每个客户端这么多的消息传递，他只会广播给他连接的几个节点，每个节点都有自己的节点列表，使用gossip协议到达消息的传递，100个左右的节点达成一次共识，差不多5秒钟可以完成。现在很多公链都是基于该共识算法实现的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594513620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186646,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1583894667,"is_pvip":false,"replies":[{"id":"77970","content":"加一颗星:)，问题1：2f个准备消息和预准备消息是相同的，所以，加上主节点，就是2f + 1了，也就是说准备阶段的2f个，等同于提交阶段的2f + 1。问题2：如果设置为f + 1，那么就会被恶意节点干扰，比如，在准备和提交阶段，f个恶意节点，都很配合，但在最后，它们却不返回响应消息给客户端，这时客户端可能始终无法收到f + 1个一致的响应消息，也就是达成共识失败，然后客户端不断重试，肯定不行了。","user_name":"作者回复","comment_id":186646,"uid":"1642497","ip_address":"","utype":1,"ctime":1587412002,"user_name_real":"hanj4096"}],"discussion_count":2,"race_medal":0,"score":"53123502219","product_id":100046101,"comment_content":"客户端要收到 f+1 个结果，我理解这个是为了防止 f 个叛徒直接给客户端返回 ok。不太理解的是为什么准备阶段要收到 2f 个一致的包含作战指令的准备消息，提交阶段需要 2f+1 个验证通过呢？这两个也设置成 f+1，不可以吗？","like_count":12,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486823,"discussion_content":"加一颗星:)，问题1：2f个准备消息和预准备消息是相同的，所以，加上主节点，就是2f + 1了，也就是说准备阶段的2f个，等同于提交阶段的2f + 1。问题2：如果设置为f + 1，那么就会被恶意节点干扰，比如，在准备和提交阶段，f个恶意节点，都很配合，但在最后，它们却不返回响应消息给客户端，这时客户端可能始终无法收到f + 1个一致的响应消息，也就是达成共识失败，然后客户端不断重试，肯定不行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587412002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1389256,"avatar":"https://static001.geekbang.org/account/avatar/00/15/32/c8/7770b717.jpg","nickname":"学习人","note":"","ucode":"0F4945624DF656","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388895,"discussion_content":"知乎上搜到的\nhttps://zhuanlan.zhihu.com/p/53897982\n\nLiveness要求，Q <= n-f; (Q是要进行选举的法定⼈数，系统要能保证正常跑着，不中断，法定 人数不能多于可以进行选举的人数n-f)。\n\nSafety要求，根据quorum intersection property: 2Q-n > f，(2个不同的提议情况如何达成一致，只 要有分别支持两个提议的人有交叉，而且交叉的是⼀个non-faulty节点，就能达成一致，这是2Q-n > 0的情况，PBFT容忍f个faulty节点，所以需要有f个non-faulty的交叉) n+f < 2Q <= 2(n - f) => f < n/3 => n > 3f。最⼩n为3f+1。\n\nSafety我觉得应该写成2Q＞（n+f）更容易理解。如果有两个提议，起码有一个正确节点在交集里","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1629030209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214242,"user_name":"竹马彦四郎的好朋友影法師","can_delete":false,"product_type":"c1","uid":1475385,"ip_address":"","ucode":"A9555AEFF90CDF","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","comment_is_top":false,"comment_ctime":1588682866,"is_pvip":false,"replies":[{"id":"79466","content":"加一颗星:)，你的演示程序和内存问题的分析，我看了，很棒，我后面补充个演示程序吧。","user_name":"作者回复","comment_id":214242,"uid":"1642497","ip_address":"","utype":1,"ctime":1588783785,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"40243388530","product_id":100046101,"comment_content":"我按照老师第一讲的OM算法写了个简单的递归（https:&#47;&#47;yfscfs.gitee.io&#47;post&#47;极客时间之分布式协议与算法实战-01-拜占庭将军问题有叛徒的情况下如何才能达成共识&#47;） 几乎不可用，22个节点的拜占庭将军问题，至少要吃掉2个G的内存才能跑出结果~","like_count":9,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493993,"discussion_content":"加一颗星:)，你的演示程序和内存问题的分析，我看了，很棒，我后面补充个演示程序吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588783785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186937,"user_name":"Fs","can_delete":false,"product_type":"c1","uid":1083184,"ip_address":"","ucode":"0AD0EFB5544B9A","user_header":"https://static001.geekbang.org/account/avatar/00/10/87/30/4626c8c0.jpg","comment_is_top":false,"comment_ctime":1583976685,"is_pvip":false,"replies":[{"id":"75873","content":"加一颗星:)，是的，这也是为什么Hyperleger Fabric最终没有采用PBFT，而是通过法律来约束“节点作恶”的行为。","user_name":"作者回复","comment_id":186937,"uid":"1642497","ip_address":"","utype":1,"ctime":1586104339,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"18763845869","product_id":100046101,"comment_content":"这就是为什么区块链的效率提升不上去？达成共识的时间效率太低","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486926,"discussion_content":"加一颗星:)，是的，这也是为什么Hyperleger Fabric最终没有采用PBFT，而是通过法律来约束“节点作恶”的行为。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586104339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186831,"user_name":"6 7 8 9 10","can_delete":false,"product_type":"c1","uid":1619792,"ip_address":"","ucode":"D1A4C164D496BE","user_header":"https://static001.geekbang.org/account/avatar/00/18/b7/50/233b2d12.jpg","comment_is_top":false,"comment_ctime":1583935569,"is_pvip":false,"replies":[{"id":"76030","content":"对哪一步的计算，不理解呢?","user_name":"作者回复","comment_id":186831,"uid":"1642497","ip_address":"","utype":1,"ctime":1586204862,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"18763804753","product_id":100046101,"comment_content":"最后消息数的算法，看不懂呢","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486889,"discussion_content":"对哪一步的计算，不理解呢?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586204862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227332,"user_name":"superfq","can_delete":false,"product_type":"c1","uid":1033472,"ip_address":"","ucode":"37B45E9018F14F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/00/37ef050e.jpg","comment_is_top":false,"comment_ctime":1592358921,"is_pvip":true,"replies":[{"id":"88044","content":"加一颗星:)，f = (n - 1)&#47;3。","user_name":"作者回复","comment_id":227332,"uid":"1642497","ip_address":"","utype":1,"ctime":1596133411,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"14477260809","product_id":100046101,"comment_content":"请问老师，f值是怎么确定的？在一个动态集群中怎么确定f值","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498595,"discussion_content":"加一颗星:)，f = (n - 1)/3。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596133411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186577,"user_name":"myrfy","can_delete":false,"product_type":"c1","uid":1169401,"ip_address":"","ucode":"2814BAE5D70098","user_header":"","comment_is_top":false,"comment_ctime":1583887346,"is_pvip":false,"replies":[{"id":"72081","content":"好，我后面补充下，具体说说和演示下。","user_name":"作者回复","comment_id":186577,"uid":"1642497","ip_address":"","utype":1,"ctime":1583934312,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"14468789234","product_id":100046101,"comment_content":"老师，可以详细解释一下视图变更是什么意思吗","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486803,"discussion_content":"好，我后面补充下，具体说说和演示下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583934312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187738,"user_name":"右耳听海","can_delete":false,"product_type":"c1","uid":1022011,"ip_address":"","ucode":"E0B9F1083F4F98","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/3b/5af90c80.jpg","comment_is_top":false,"comment_ctime":1584203044,"is_pvip":false,"replies":[{"id":"72445","content":"加一颗星:)，是倍数增加的，相当于一轮新的共识协商。更多细节，我后面补充说说吧。","user_name":"作者回复","comment_id":187738,"uid":"1642497","ip_address":"","utype":1,"ctime":1584236686,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"10174137636","product_id":100046101,"comment_content":"麻烦老师补充下pbft实现一系列共识值pbft做了些什么优化，消息数是随一系列值倍数增加吗","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487221,"discussion_content":"加一颗星:)，是倍数增加的，相当于一轮新的共识协商。更多细节，我后面补充说说吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584236686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187244,"user_name":"Purson","can_delete":false,"product_type":"c1","uid":1446120,"ip_address":"","ucode":"5F0C1BB3C0C0A2","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","comment_is_top":false,"comment_ctime":1584068823,"is_pvip":false,"replies":[{"id":"77969","content":"加一颗星:)，问题1：和另外一个问题重复了，详细推导过程和原理，我后面做个补充。问题2：BFT一般是拜占庭容错，在这里，你指的是指口信消息型拜占庭问题之解（om）吧？om与PBFT主要区别，除了消息复杂度外，还有就是om不关心达成共识的值是什么，pbft是就指定值达成共识；om非常理论，很难在实际场景中落地，pbft实用，在实际场景中，能落地。","user_name":"作者回复","comment_id":187244,"uid":"1642497","ip_address":"","utype":1,"ctime":1587409691,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"10174003415","product_id":100046101,"comment_content":"如果将军数为 n、叛将数为 f，那么算法需要递归协商 f+1 轮，消息复杂度为 O(n ^ (f + 1))，是怎样算出来的，第一讲说了两轮的能看明白，但是没有说3轮的，找不到递推关系，希望老师详细说一下BFT和PBFT两者区别","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487040,"discussion_content":"加一颗星:)，问题1：和另外一个问题重复了，详细推导过程和原理，我后面做个补充。问题2：BFT一般是拜占庭容错，在这里，你指的是指口信消息型拜占庭问题之解（om）吧？om与PBFT主要区别，除了消息复杂度外，还有就是om不关心达成共识的值是什么，pbft是就指定值达成共识；om非常理论，很难在实际场景中落地，pbft实用，在实际场景中，能落地。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587409691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333599,"user_name":"单林敏","can_delete":false,"product_type":"c1","uid":1507715,"ip_address":"","ucode":"8B0165C294BF78","user_header":"https://static001.geekbang.org/account/avatar/00/17/01/83/47ba2f2d.jpg","comment_is_top":false,"comment_ctime":1644416401,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5939383697","product_id":100046101,"comment_content":"老师您好，消息数最后的 3f - 1 我实在不理解，麻烦您解答：<br>总共加主节点是 3f + 1 个回复<br>假设叛徒不回复，也是 2f + 1 个回复<br><br>但是这里怎么是 3f - 1 个回复呢？","like_count":1,"discussions":[{"author":{"id":2542883,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cd/23/e665e8c8.jpg","nickname":"谷人","note":"","ucode":"375E333CF9EB3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564273,"discussion_content":"我也觉得是 2f + 1 个回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650204220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213935,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1588592936,"is_pvip":false,"replies":[{"id":"80897","content":"加一颗星:)，问题1：在应用中，不是确定最大叛军的精准数量，而是提升场景的可信，比如有许可控制、相对可信的联盟链。问题2：这个涉及到了攻防对抗（比如有硬件机制能防止签名被破解和篡改），在这里，咱们只考虑正常情况，也就是叛将不知道忠将的签名，叛将之间可以串通。","user_name":"作者回复","comment_id":213935,"uid":"1642497","ip_address":"","utype":1,"ctime":1589925074,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"5883560232","product_id":100046101,"comment_content":"韩老师你好，有个细节文中好像没有提及，就是如何在真实的环境中，确定叛军的数量呢？如果一个节点被hack了，签名也能被破解吧？通过回复的消息内容感觉也不太靠谱，例如当叛军比较多时。求解答~","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493905,"discussion_content":"加一颗星:)，问题1：在应用中，不是确定最大叛军的精准数量，而是提升场景的可信，比如有许可控制、相对可信的联盟链。问题2：这个涉及到了攻防对抗（比如有硬件机制能防止签名被破解和篡改），在这里，咱们只考虑正常情况，也就是叛将不知道忠将的签名，叛将之间可以串通。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589925074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187737,"user_name":"右耳听海","can_delete":false,"product_type":"c1","uid":1022011,"ip_address":"","ucode":"E0B9F1083F4F98","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/3b/5af90c80.jpg","comment_is_top":false,"comment_ctime":1584202857,"is_pvip":false,"replies":[{"id":"72444","content":"加一颗星:)，两个值，就是两个消息，放到一个消息中，就是一个值了。单值的共识，比如Basic Paxos，它只能就提议的一个值达成共识，你再提议新值，它是无法达成共识的。一系列值的共识，比如Multi-Paxos能就多值（也就是指令）达成共识，也就是你提议了一个值，可以再提议一个值，分别会达成共识，比如PBFT，客户端可以发送一个请求，再发送一个请求，请求的内容会分别达成共识，被忠诚的节点们执行。","user_name":"作者回复","comment_id":187737,"uid":"1642497","ip_address":"","utype":1,"ctime":1584236586,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"5879170153","product_id":100046101,"comment_content":"老师能具体说下pbft实现的是一系列值的共识而不是单值的共识具体指什么吗，一系列值的共识不也可以包装成一个值吗，不如:进攻，准备粮草，这是两个值，但是也可以是在一个消息中","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487220,"discussion_content":"加一颗星:)，两个值，就是两个消息，放到一个消息中，就是一个值了。单值的共识，比如Basic Paxos，它只能就提议的一个值达成共识，你再提议新值，它是无法达成共识的。一系列值的共识，比如Multi-Paxos能就多值（也就是指令）达成共识，也就是你提议了一个值，可以再提议一个值，分别会达成共识，比如PBFT，客户端可以发送一个请求，再发送一个请求，请求的内容会分别达成共识，被忠诚的节点们执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584236586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187257,"user_name":"Purson","can_delete":false,"product_type":"c1","uid":1446120,"ip_address":"","ucode":"5F0C1BB3C0C0A2","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","comment_is_top":false,"comment_ctime":1584070047,"is_pvip":false,"replies":[{"id":"77968","content":"加一颗星:)，详细的推导过程和推导原理，我后面做个补充吧。","user_name":"作者回复","comment_id":187257,"uid":"1642497","ip_address":"","utype":1,"ctime":1587409329,"user_name_real":"hanj4096"}],"discussion_count":2,"race_medal":0,"score":"5879037343","product_id":100046101,"comment_content":"口信型的O(n ^ (f + 1))是怎样推导出来的，我看第一章说2轮，第一轮A向 B C D 分别发一个消息，记3，第二轮剩下的3个分别向对方发2消息，记6，加起来总共9，用 4^2好像不太对。除非第一轮的苏秦不是将军，或者n就是忠诚将军数，n=3，就对。但是如果是f=2，一共有7名将军，第二轮协商到底是怎样的顺序？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487046,"discussion_content":"加一颗星:)，详细的推导过程和推导原理，我后面做个补充吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587409329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1040236,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/df/6c/5af32271.jpg","nickname":"Dylan","note":"","ucode":"58064D0C9F9F5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":225100,"discussion_content":"大O算法复杂度表示的是上界，是趋势，不是精确的表示","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586348519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186942,"user_name":"翠羽香凝","can_delete":false,"product_type":"c1","uid":1119933,"ip_address":"","ucode":"54F3762F0E545F","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/bd/e14ba493.jpg","comment_is_top":false,"comment_ctime":1583977468,"is_pvip":false,"replies":[{"id":"75874","content":"3忠1叛，需要进行2（也就1 + 1，其中f为1）轮协商，是具体的实例。","user_name":"作者回复","comment_id":186942,"uid":"1642497","ip_address":"","utype":1,"ctime":1586104531,"user_name_real":"hanj4096"}],"discussion_count":2,"race_medal":0,"score":"5878944764","product_id":100046101,"comment_content":"“口信消息型拜占庭问题之解的局限我想说的是，这个算法有个非常致命的缺陷。如果将军数为 n、叛将数为 f，那么算法需要递归协商 f+1 轮，” 这里看不懂，01讲不是说算法一共是两轮吗？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486929,"discussion_content":"3忠1叛，需要进行2（也就1 + 1，其中f为1）轮协商，是具体的实例。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586104531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1126593,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","nickname":"密码123456","note":"","ucode":"9889463CC0EA71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217478,"discussion_content":"是的，我也理解是2轮。3阶段，也是2轮。没感觉有减少。如果说有，那就是节点收到了2f+1。后对后面不处理。可是消息依然存在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585563756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186607,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1583891122,"is_pvip":false,"replies":[{"id":"75876","content":"加一颗星:)","user_name":"作者回复","comment_id":186607,"uid":"1642497","ip_address":"","utype":1,"ctime":1586104676,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":1,"score":"5878858418","product_id":100046101,"comment_content":"课后思考：因为有f个坏的节点，如果客户端收到的结果小于f，最坏的情况是这f个结果都是坏节点发回来的，所以这就导致了客户端判断错误。所以客户端收到的结果必须大于f个，最少就是f+1个，也就是说最少要有一个好的节点发出来的结果来做判断。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486816,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586104676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186598,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1583890196,"is_pvip":false,"replies":[{"id":"72080","content":"好，我后面做个加餐吧，具体说说和演示下。","user_name":"作者回复","comment_id":186598,"uid":"1642497","ip_address":"","utype":1,"ctime":1583934215,"user_name_real":"hanj4096"}],"discussion_count":1,"race_medal":0,"score":"5878857492","product_id":100046101,"comment_content":"PBFT 算法通过视图变更（View Change）的方式，来处理主节点作恶，当发现主节点在作恶时，会以“轮流上岗”方式，推举新的主节点。<br>老师能详细补充一下吗？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486810,"discussion_content":"好，我后面做个加餐吧，具体说说和演示下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583934215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360104,"user_name":"阿白","can_delete":false,"product_type":"c1","uid":3076445,"ip_address":"上海","ucode":"AD97B188375EAE","user_header":"https://static001.geekbang.org/account/avatar/00/2e/f1/5d/9b0d1efa.jpg","comment_is_top":false,"comment_ctime":1666176126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666176126","product_id":100046101,"comment_content":"确认放弃笔记？放弃后所记笔记将不保留。新功能上线，你的历史笔记已初始化为私密笔记，是否一键批量公开？批量公开的笔记不会为你同步至部落在每一轮协调中收到 Q 个相同的响应就达成共识在任意一轮中，如果 f 个作恶节点都不响应，剩下的 (n-f) 个正常节点要保证能够提供 Q 个响应，即 Q &lt;= n - f在任意一轮中，如果 f 个作恶节点都响应，剩下的 (Q-f) 个正常节点的响应需要保证是 (n-f) 个正常节点中的大多数，即 Q - f ＞ (n - f) &#47; 2，等价于 2Q ＞ n + f这样的话，如果收到 Q 个相同的响应，那一定是 f 个作恶节点的响应和大多数正常节点的响应相同，作恶节点改变不了正常节点的意志如果 Q - f &lt;= (n - f) &#47; 2， f 个作恶节点会配合 (n-f) 个正常节点中的少数，率先形成异于大多数正常节点的，并且相同的 Q 个响应，率先达成错误共识(n + f) &#47; 2 &lt; Q &lt;= n - f，等价于 n ＞ 3f","like_count":0},{"had_liked":false,"id":359614,"user_name":"星宿海","can_delete":false,"product_type":"c1","uid":2189067,"ip_address":"安徽","ucode":"F49E70D579D59E","user_header":"https://static001.geekbang.org/account/avatar/00/21/67/0b/145e3804.jpg","comment_is_top":false,"comment_ctime":1665678700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665678700","product_id":100046101,"comment_content":"有三个困惑，麻烦知道的大佬解答下，感激不尽：<br>①“提交消息：(3f - f + 1) * (3f + 1) = 117” 这里不应该是 “(3f - f + 1) * 3f   ”吗? 因为自己不会给自己发，那就是3f。<br>② “恢复消息： 3f - 1 = 11” 这里为什么是 3f - 1<br>③ “客户端在指定时间内未收到请求对应的f + 1相同响应” 和 课堂思考的 “当客户端在收到了f+1个结果,就认为共识达成了”，这两句话造成歧义，前者“相同响应”，后者单单一个“结果”，若要满足前者则要收到 2f + 1个才完全保证，","like_count":0},{"had_liked":false,"id":313821,"user_name":"Geek_2a0deb","can_delete":false,"product_type":"c1","uid":1315176,"ip_address":"","ucode":"DBF960FDFB77C0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKIkpsQkTyLtfxgib35o0ho9nWmCHwJL8BYibJPPT22fkT1aTwHhwQc0krINWjTVRjibF1bMTgia5mflg/132","comment_is_top":false,"comment_ctime":1632700218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632700218","product_id":100046101,"comment_content":"我想说的是，这个算法有个非常致命的缺陷。如果将军数为 n、叛将数为 f，那么算法需要递归协商 f+1 轮，消息复杂度为 O(n ^ (f + 1))，消息数量指数级暴增。你可以想象一下，如果叛将数为 64，消息数已经远远超过 <br><br>这里不太理解为什么是f+1 和消息复杂度","like_count":0},{"had_liked":false,"id":310198,"user_name":"xingshouzhyan","can_delete":false,"product_type":"c1","uid":2051062,"ip_address":"","ucode":"BFDD6987C12F68","user_header":"","comment_is_top":false,"comment_ctime":1630546370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630546370","product_id":100046101,"comment_content":"100个节点，其中作恶节点1个。使用pbft算法的时候，那不是客户段只需要接收f+1=2个消息接表示成功了？实际运行的过程中，那到只需要2f+1=3个节点存在正常响应就行了？考虑一种情况，其他97个节点都坏了，那根据PBFT算法中2f , 2f+1 , f+1数据 ，那PBFT算法不就只有几个节点的数据就能达成了共识了？","like_count":0},{"had_liked":false,"id":292278,"user_name":"Geek_71de2e","can_delete":false,"product_type":"c1","uid":2616530,"ip_address":"","ucode":"B5669D1B5723C8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/mCQDSyH3uKVqrvHYIUf4b9gOlrrLEvcU96z2OqcphWComZibEpxmuEZb1ruibI2LRTrQH98LYEvIN4VLHVhEVOaA/132","comment_is_top":false,"comment_ctime":1620749395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620749395","product_id":100046101,"comment_content":"老师您好，有个问题想问一下，如果这个赵（主节点是作恶节点），在他收到苏秦（客户端）发送的“进攻”指令后，赵可以根据苏秦的共钥匙验证签名是否正确。但是赵可以更改苏秦的指令，改为“撤退”。然后用自己的私钥对指令进行签名。接着发送“撤退”指令给其余的三个国家。那在这四个国家中不是达成了“撤退“的共识。与客户端发送的”进攻“指令不是相违背了吗？","like_count":0},{"had_liked":false,"id":292277,"user_name":"Geek_71de2e","can_delete":false,"product_type":"c1","uid":2616530,"ip_address":"","ucode":"B5669D1B5723C8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/mCQDSyH3uKVqrvHYIUf4b9gOlrrLEvcU96z2OqcphWComZibEpxmuEZb1ruibI2LRTrQH98LYEvIN4VLHVhEVOaA/132","comment_is_top":false,"comment_ctime":1620749370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620749370","product_id":100046101,"comment_content":"老师您好，有个问题想问一下，如果这个赵（主节点是作恶节点），在他收到苏秦（客户端）发送的“进攻”指令后，赵可以根据苏秦的共钥匙验证签名是否正确。但是赵可以更改苏秦的指令，改为“撤退”。然后用自己的私钥对指令进行签名。接着发送“撤退”指令给其余的三个国家。那在这四个国家中不是达成了“撤退“的共识。与客户端发送的”进攻“指令不是相违背了吗？","like_count":0},{"had_liked":false,"id":283812,"user_name":"mxmkeep","can_delete":false,"product_type":"c1","uid":1309377,"ip_address":"","ucode":"7068125FE98AB1","user_header":"","comment_is_top":false,"comment_ctime":1615945341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615945341","product_id":100046101,"comment_content":"看着这个三阶段提交，跟TCP三次握手一样，保证建立可靠链接","like_count":0},{"had_liked":false,"id":242264,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597652276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597652276","product_id":100046101,"comment_content":"因为叛徒数是f个,如果只返回f个消息,那么可能存在返回的都是叛徒发送的错误消息,导致主节点认知错误,所以需要返回f+1,至于这个f,整篇文章说下来,感觉是一个不固定的值,实际上,应该是(n-1)&#47;3,这一篇,实际上是第一篇拜占庭问题中签名解决方案的延伸,是吗","like_count":0},{"had_liked":false,"id":237269,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1595760550,"is_pvip":false,"replies":[{"id":"88087","content":"加一颗星:)，不需要全部的忠将们的响应，f + 1就可以了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596176283,"ip_address":"","comment_id":237269,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595760550","product_id":100046101,"comment_content":"“当苏秦收到 f+1 个相同的响应（Reply）消息时，说明各位将军们已经就作战指令达成了共识”。韩老师好，对这句话有点困惑，因为f是叛徒数，例子中的叛徒数为1，所以f+1=1+1=2，但忠诚的跟随者就有3个，故此，不应该是接收到3个响应消息才说明将军们达成共识吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502358,"discussion_content":"加一颗星:)，不需要全部的忠将们的响应，f + 1就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596176283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225677,"user_name":"杨冬","can_delete":false,"product_type":"c1","uid":1956611,"ip_address":"","ucode":"317607AAA75F85","user_header":"https://static001.geekbang.org/account/avatar/00/1d/db/03/67fbb09d.jpg","comment_is_top":false,"comment_ctime":1591832294,"is_pvip":false,"replies":[{"id":"88042","content":"加一颗星:)，可以的，签名消息，篡改消息内容是会被发现的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596132953,"ip_address":"","comment_id":225677,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591832294","product_id":100046101,"comment_content":"老师，如果苏秦给赵发送撤退消息，但是叛徒赵会给其他三个将军发送进攻指令，这类问题pbft可以解决吗","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497942,"discussion_content":"加一颗星:)，可以的，签名消息，篡改消息内容是会被发现的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596132953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222446,"user_name":"nico","can_delete":false,"product_type":"c1","uid":1209075,"ip_address":"","ucode":"DDB5EFE9F3A70E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Pr8laRQY3skrzzgen37ZIt4HQvtaThAcqvyK8eAzc9DRiak803q5HS7gCnXFxpx6CWibqT1Sic0h1TLMmVNUpJRibA/132","comment_is_top":false,"comment_ctime":1590807836,"is_pvip":true,"replies":[{"id":"88040","content":"加一颗星:)，f = (n - 1)&#47;3；在指定时间内等待请求对应的 f + 1 相同响应；是的，这时消息数更多。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596132086,"ip_address":"","comment_id":222446,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590807836","product_id":100046101,"comment_content":"老师我有几个问题，客户端如何判断出f?超时时间内没收到指定数量的消息计算吗？这样是不是会产生误判？另外，交互的消息量，如果叛将不是不发消息而是发了消息，交互的消息量也会暴增吧？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496798,"discussion_content":"加一颗星:)，f = (n - 1)/3；在指定时间内等待请求对应的 f + 1 相同响应；是的，这时消息数更多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596132086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222445,"user_name":"nico","can_delete":false,"product_type":"c1","uid":1209075,"ip_address":"","ucode":"DDB5EFE9F3A70E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Pr8laRQY3skrzzgen37ZIt4HQvtaThAcqvyK8eAzc9DRiak803q5HS7gCnXFxpx6CWibqT1Sic0h1TLMmVNUpJRibA/132","comment_is_top":false,"comment_ctime":1590807575,"is_pvip":true,"replies":[{"id":"88039","content":"加一颗星:），超时与具体实现有关；网络延迟对分布式系统影响很大，接近于“消息丢失”；是的，客户端需要是BFT-ware。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596131686,"ip_address":"","comment_id":222445,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590807575","product_id":100046101,"comment_content":"1、消息交互过程中的超时怎么配置？网络状态不还好的时候是不是会但是很多失败？另外追后全部都需要发消息给客户端，由客户端计算然后在判断结果，这种是不是增加了客户端的难度？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496797,"discussion_content":"加一颗星:），超时与具体实现有关；网络延迟对分布式系统影响很大，接近于“消息丢失”；是的，客户端需要是BFT-ware。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596131686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221447,"user_name":"～～","can_delete":false,"product_type":"c1","uid":1463768,"ip_address":"","ucode":"52797D415A538D","user_header":"https://static001.geekbang.org/account/avatar/00/16/55/d8/610fae56.jpg","comment_is_top":false,"comment_ctime":1590500659,"is_pvip":false,"replies":[{"id":"88038","content":"加一颗星:)，不会，消息是签名消息，无法伪造的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596129431,"ip_address":"","comment_id":221447,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590500659","product_id":100046101,"comment_content":"假如文中赵作为叛徒发送三个假消息给韩另外三个将军那么最终会不会最终执行的是这个假消息","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496455,"discussion_content":"加一颗星:)，不会，消息是签名消息，无法伪造的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596129431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214348,"user_name":"竹马彦四郎的好朋友影法師","can_delete":false,"product_type":"c1","uid":1475385,"ip_address":"","ucode":"A9555AEFF90CDF","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","comment_is_top":false,"comment_ctime":1588727851,"is_pvip":false,"replies":[{"id":"80028","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589232900,"ip_address":"","comment_id":214348,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588727851","product_id":100046101,"comment_content":"韩老师，我是这样理解的——最后客户端怎么认定执行成功了客户端想要的指令呢?  这是因为master节点最多不发送消息，但是不能篡改客户端的消息，所以最后如果&gt;=f+1条响应的话，则一定是达成了客户端想要的一致的.","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494031,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589232900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214244,"user_name":"竹马彦四郎的好朋友影法師","can_delete":false,"product_type":"c1","uid":1475385,"ip_address":"","ucode":"A9555AEFF90CDF","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","comment_is_top":false,"comment_ctime":1588683204,"is_pvip":false,"replies":[{"id":"80141","content":"加一颗星:)，O(n!) 是指什么呢？","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589310743,"ip_address":"","comment_id":214244,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588683204","product_id":100046101,"comment_content":"OM(m) 的伪代码如下<br>int *dfs(int x, int m, int *v) &#47;&#47; x是当前指挥官, 运行OM(m)算法, x要向其他人发出的指令集为v, v[i]就是要给i发出的指令(0表示撤退, 1表示进攻), 返回这次OM(m)算法执行完毕后每个人收到的指令<br>{<br>\tvis[x] = 1; &#47;&#47; 指挥官是不会在他的OM算法中收到消息的, 它只是发送消息<br>\tif (!m) &#47;&#47; x处跑OM(0)<br>\t{<br>\t\tvis[x] = 0;<br>\t\treturn v;<br>\t}<br>\tint *ans = new int[maxn]; &#47;&#47; ans[i] 是x处OM(m)之后i最终执行的指令<br>\tint **Ans = new int*[maxn]; &#47;&#47; Ans[i] 是 i 处跑完OM(m-1)之后, 每个人最终执行的指令, 即 Ans[i][j] 是i处跑完OM(m-1)之后j执行的指令<br>\tfor (re i = 0; i &lt; maxn; i++)<br>\t{<br>\t\tAns[i] = new int[maxn];<br>\t}<br>\tfor (re i = 0; i &lt; n; i++)<br>\t{<br>\t\tif (vis[i])<br>\t\t{<br>\t\t\tcontinue;<br>\t\t}<br>\t\tint *cmd = new int[maxn];<br>\t\tgeneratecmd(i, cmd, v[i]);<br>\t\tAns[i] = dfs(i, m - 1, cmd);<br>\t\tAns[i][i] = v[i]; &#47;&#47; i处跑OM(m-1)算法, i并不从i处的OM(m-1)算法处接收指令, 它从x获取的指令是 v[i], 这也是要参与汇总的!<br>\t}<br>\t&#47;&#47; 通过Ans汇总得到ans<br>\tkk(ans, Ans);<br>\tvis[x] = 0;<br>\tfor (re i = 0; i &lt; n; i++)<br>\t{<br>\t\tdelete []Ans[i];<br>\t}<br>\tdelete Ans; &#47;&#47; 注意回收内存<br>\treturn ans;<br>}<br>所以 T(m) = nT(m-1), 复杂度应该是O(n!) 而不是 O(n^{f+1})的","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493995,"discussion_content":"加一颗星:)，O(n!) 是指什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589310743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208476,"user_name":"钟友兵","can_delete":false,"product_type":"c1","uid":1866454,"ip_address":"","ucode":"BFD61236BF448E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4uiaFspOvPSF8tzalkP0DvCDme7v53eDGkDMsZsibcm31W99Sib2thFe9m3714d4t7qtIcSeyuR1HiaTXZs4TG8enQ/132","comment_is_top":false,"comment_ctime":1587367432,"is_pvip":false,"replies":[{"id":"78056","content":"加一颗星:)，这是消息复杂度，不是时间复杂度，与时间复杂度类似，代表的是趋势，比如在文中计算消息数的那个公式里，我们用f = (n - 1)&#47;3来替换掉f，最高次冥为n^2，也就是复杂度为O(n^2)。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587454726,"ip_address":"","comment_id":208476,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587367432","product_id":100046101,"comment_content":"这个时间复杂度是n^3吧，不是平方，请老师讲解下","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492474,"discussion_content":"加一颗星:)，这是消息复杂度，不是时间复杂度，与时间复杂度类似，代表的是趋势，比如在文中计算消息数的那个公式里，我们用f = (n - 1)/3来替换掉f，最高次冥为n^2，也就是复杂度为O(n^2)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587454726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187955,"user_name":"EidLeung","can_delete":false,"product_type":"c1","uid":1120259,"ip_address":"","ucode":"0F16DDB4779D1F","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/03/ef0efcc4.jpg","comment_is_top":false,"comment_ctime":1584282867,"is_pvip":false,"replies":[{"id":"77972","content":"加一颗星:)，f = (n - 1)&#47;3，反推。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587414481,"ip_address":"","comment_id":187955,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1584282867","product_id":100046101,"comment_content":"PBFT需要提前知道叛将的数量么？实际落地过程中不可能提前知道啊，这又该怎么落地？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487301,"discussion_content":"加一颗星:)，f = (n - 1)/3，反推。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587414481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1040236,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/df/6c/5af32271.jpg","nickname":"Dylan","note":"","ucode":"58064D0C9F9F5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":225105,"discussion_content":"3f+1 < n，通过这个去计算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586348699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186717,"user_name":"congyh","can_delete":false,"product_type":"c1","uid":1351284,"ip_address":"","ucode":"7E084C6563168C","user_header":"https://static001.geekbang.org/account/avatar/00/14/9e/74/6f64f4df.jpg","comment_is_top":false,"comment_ctime":1583910157,"is_pvip":false,"replies":[{"id":"75875","content":"通过视图变更来实现的，后面我补充说下吧:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586104628,"ip_address":"","comment_id":186717,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583910157","product_id":100046101,"comment_content":"有一个问题想请教韩老师: PBFT算法如何处理集群节点数的变更?","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486853,"discussion_content":"通过视图变更来实现的，后面我补充说下吧:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586104628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186713,"user_name":"梁伦","can_delete":false,"product_type":"c1","uid":1264233,"ip_address":"","ucode":"51A13A5E147D24","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/69/0c726378.jpg","comment_is_top":false,"comment_ctime":1583909581,"is_pvip":false,"replies":[{"id":"72079","content":"加一颗星:)，这是很容易误解的一个点，是2f个，这2f个准备消息和预准备消息是相同的，所以，加上主节点，就是2f + 1了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583933252,"ip_address":"","comment_id":186713,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583909581","product_id":100046101,"comment_content":"图4下面的2f应该为2f+1","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486852,"discussion_content":"加一颗星:)，这是很容易误解的一个点，是2f个，这2f个准备消息和预准备消息是相同的，所以，加上主节点，就是2f + 1了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583933252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}