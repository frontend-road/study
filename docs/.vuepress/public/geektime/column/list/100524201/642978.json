{"id":642978,"title":"18｜红黑（R-B）树：节点插入后的平衡性调整","content":"<p>你好，我是王健伟。</p><p>前面我们提到过，向红黑树中插入新的节点会导致红黑树失去平衡，所以，插入新节点后，必须对该红黑树进行平衡性调整。红黑树的平衡性调整，是通过节点<strong>变色</strong>或者<strong>旋转</strong>来实现的。</p><p>我们先来想想，红黑树插入节点操作一般分为几种情况呢？</p><p>首先，对于没有任何节点的空树，直接创建一个<strong>黑色</strong>节点作为根节点即可。</p><p>其次，对于非空的树，查找要插入的位置并插入一个<strong>红色</strong>节点，然后要判断该节点的父节点。</p><p>这里注意，之所以插入的是红色而不是黑色节点，是因为红色节点不会增加黑高度，从而尽量减少插入节点后导致的平衡性调整。如果父节点为黑色，此时不需要做什么；如果父节点为红色，会违背红黑树性质3，此时必须进行平衡性调整。</p><p>这里我将通过观察到的一些现象来总结一下红黑树插入节点后的平衡性调整操作，从而总结出一些规律，而后根据这些规律来编写代码。为了能够观看到红黑树插入一个节点后的平衡性调整，你可以通过搜索引擎搜索“可视化数据结构算法演示”字样，会发现一个“<a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">可视化数据结构算法演示 - Data Structure Visualization</a>”的链接，点击后会出现一个页面，点击页面中的“<a href=\"https://www.cs.usfca.edu/~galles/visualization/RedBlack.html\">Red-Black Trees</a>”链接，会跳转到图1所示的页面。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/30/51/303fd89416d4ec414825327b255e4e51.png?wh=506x159\" alt=\"图片\" title=\"图1 一个用于测试红黑树插入、删除节点操作的页面\"></p><p>图1的页面操作非常简单，可以通过Insert和Delete按钮向红黑树中增加以及从红黑树中删除节点，也可以利用页面下面的一系列按钮控制插入和删除节点的动画，包括动画的前进、后退，动画步骤控制等等。</p><p>接下来，我们创建一棵红黑树。</p><p>如果现在向红黑树中分别插入100、90、120三个值来作为三个节点创建红黑树，那么不需要进行任何平衡性调整，得到的红黑树如图2的步骤所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/e0/1a67b75010febf60598a1095955c14e0.jpg?wh=2284x500\" alt=\"\" title=\"图2 按顺序插入100、90、120得到的红黑树，不需要任何平衡性调整\"></p><p>继续增加85或者95节点，参考图3。</p><p><img src=\"https://static001.geekbang.org/resource/image/03/67/035b1ee5a55cdb8a1d7d58dd3daaea67.jpg?wh=2712x728\" alt=\"\" title=\"图3 继续增加85或者95节点后的平衡性调整\"></p><p><strong>开始观察</strong>，有两种情况需要进行平衡性调整。</p><ul>\n<li>如果此时插入新节点85，因为刚插入的节点85是红色节点，导致85、90两个红色节点相邻，违背红黑树性质3，必须进行平衡性调整。</li>\n<li>如果此时插入的新节点不是85，而是95，就会导致90、95两个红色节点相邻，也必须进行平衡性调整。</li>\n</ul><p>调整的方法是把90和120两个节点变成黑色，把100变为红色。如果100节点是根节点，那么要把100节点变回黑色。如果100节点不是根，那么如果100节点的父节点为黑色，则调整完毕，否则，继续向下看。</p><ul>\n<li>因为100节点从黑色变成了红色，其父节点也是红色，而又一次面临违反红黑树性质3的问题，所以这个平衡性调整会沿着100节点继续往上调整，一直调整到遇到一个黑色节点或者遇到了根节点。</li>\n<li>如果遇到了根节点，一定要保证根节点最终是黑色。如图3所示。</li>\n</ul><p><strong>下面开始总结：</strong></p><p>现在的情形是爷爷节点100是黑色，父亲节点90是红色，叔叔节点120是红色，插入新节点之前是个红黑树。在插入红色新节点85或者95之后，造成了父亲节点和新节点<span class=\"reference\">（孩子节点）</span>这两个红色节点相邻，从而需要进行平衡性调整的情况。从而得出了一条平衡性调整规则。</p><h2><strong>插入新节点后平衡调整情况1</strong></h2><p>观察图4，父亲节点是爷爷节点的左孩子，叔叔节点存在且为红色。</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/36/cb09b61421d3d2824d9dc11800e52836.jpg?wh=2240x678\" alt=\"\" title=\"图4 爷爷节点为黑色，父亲节点为红色，有叔叔节点且为红色，父亲节点是爷爷节点的左孩子\"></p><p><strong>调整方法</strong>：</p><p>将父亲节点和叔叔节点变成黑色，将爷爷节点变成红色，如果爷爷节点是整个红黑树的根，则要将爷爷节点恢复为黑色。如图5所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/03/bfde3e84c8fd65401de12b117c109103.jpg?wh=2605x797\" alt=\"\" title=\"图5 爷爷节点为黑色，父亲节点为红色，有叔叔节点且为红色，父亲节点是爷爷节点的左孩子，插入新红色节点导致失衡的调整\"></p><p>从图5不难看到，调整完成后，产生的结果二叉树高度满足二叉树的要求，红色节点也不再相邻，但事情到这里没完。</p><ol>\n<li>如果爷爷节点是整个二叉树的根节点，那么为了满足红黑树性质1，要把爷爷节点设置回黑色，此时整个调整才完毕。</li>\n<li>如果爷爷节点不是整个二叉树的根节点，则还需要继续沿着爷爷节点向上调整，调整中如果遇到一个黑色的前辈节点，则整个平衡性调整完毕。</li>\n</ol><p>什么叫“继续沿着爷爷节点向上调整”？看图6。</p><p><img src=\"https://static001.geekbang.org/resource/image/ae/84/aefa65142847c69f8a7ff1b96775b284.jpg?wh=2605x1127\" alt=\"\" title=\"图6&nbsp; 阐述沿着爷爷节点向上调整的理论\"></p><p>图6左侧图是一个以80为根的红黑树，当插入一个新的节点10<span class=\"reference\">（图6中间图）</span>后，因为违反红黑树性质3导致失衡，要进行平衡性调整。正好，这里父节点20是爷爷节点30的左孩子，并且叔叔节点40是红色的，满足上述“平衡调整情况1”，于是将爷爷节点30变成红色，将父亲节点20和叔叔节点40变成黑色<span class=\"reference\">（图6右侧图）</span>。那么现在，“以节点30为根”的这棵子树就调整完毕了。</p><p>但是，因为节点30从原来的黑色变成了现在的红色，导致节点30和其父节点50不满足红黑树性质3，所以要沿着节点30继续调整其父节点，也就是节点50，这就叫“继续沿着爷爷节点向上调整”。继续调整时，将以30为根的<strong>子树</strong>看成一个整体<span class=\"reference\">（因为这个整体已经平衡）</span>或者看成单独<strong>一个节点</strong>也可以，但不要忘记，节点30已经是红色了。那么怎么继续调整呢？这就要继续观察并尝试得出一条新的平衡性调整规则。</p><p>现在重新以80、50、120、30为节点创建一棵红黑树，并向这棵红黑树插入节点10。<strong>继续开始观察</strong>，看图7。</p><p><img src=\"https://static001.geekbang.org/resource/image/e8/15/e89yy5528eecbf9388b2c761a0yy5615.jpg?wh=2605x1007\" alt=\"\" title=\"图7&nbsp; 80、50、120、30构成的红黑树继续增加节点10后的平衡性调整\"></p><ul>\n<li>刚插入的节点10是红色节点，导致节点10、30两个红色节点相邻，违背红黑树性质3，必须进行平衡性调整。</li>\n<li>以节点50为根，向右旋转，将30作为50的父节点。向右旋转你应该不陌生，前面讲平衡二叉树时已经详细讲解过；</li>\n<li>将原来的30节点设置为黑色，将原来的50节点设置为红色。</li>\n</ul><p>继续观察前面的图6，看看图6接下来会如何变换。参考图8。</p><p><img src=\"https://static001.geekbang.org/resource/image/82/ee/8222e423b396a2c9d4c94c38467df7ee.jpg?wh=2605x876\" alt=\"\" title=\"图8&nbsp; 爷爷节点向上调整的理论完整平衡性调整情形\"></p><ul>\n<li>以节点80为根，向右旋转，将80作为50的右子节点，50原来的右子节点60作为80的左子节点。</li>\n<li>将原来的50节点变黑，将原来的80节点设为红色。</li>\n</ul><p><strong>开始总结：</strong></p><p>图7的情形是爷爷节点50是黑色，父亲节点30是红色，<strong>没有叔叔节点</strong>，插入新节点之前是个红黑树，此时插入红色新节点10。而图6右侧图的情形是爷爷节点80是黑色，父亲节点50是红色，<strong>叔叔节点120是黑色</strong>，把以30为根的子树看成是一个新节点，并且该新节点为红色<span class=\"reference\">（节点30的颜色）</span>。这就造成了父亲节点和新节点这两个红色节点相邻，从而需要进行平衡性调整，从而得出了一条平衡性调整规则。</p><h2><strong>插入新节点后平衡调整情况2</strong></h2><p>看图9，父亲节点是爷爷节点的左孩子，新节点是父亲节点的左孩子，叔叔节点不存在或者存在但为黑色。注意，图9中右侧并不是一个红黑树，只是一个红黑树调平衡时的某个中间状态，是从图6中的右侧图演变过来的。</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/82/edc8d5d4227a8b49ec964282ffca6a82.jpg?wh=2605x646\" alt=\"\" title=\"图9&nbsp; 爷爷节点为黑色，父亲节点为红色，没叔叔节点或有叔叔节点且为黑色，父亲节点是爷爷节点的左孩子，插入的新红色节点是父亲节点的左孩子\"></p><p><strong>调整方法</strong>：</p><p>在这里，爷爷、父亲、新节点构成了左斜的关系，所以，图9就需要首先以爷爷节点为根向右旋转。接着将原父亲节点变为黑色，原爷爷节点变为红色。如图10所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/9a/a326e84f1b8166cc4984292f5878f59a.jpg?wh=2605x826\" alt=\"\" title=\"图10&nbsp; 爷爷节点为黑色，父亲节点为红色，没叔叔节点或有叔叔节点且为黑色，父亲节点是爷爷节点的左孩子，插入的新红色节点是父亲节点的左孩子，插入新红色节点导致失衡的调整\"></p><p>借着平衡调整情况2，再引入平衡调整情况3。</p><h2><strong>插入新节点后平衡调整情况3</strong></h2><p>看图11，父亲节点是爷爷节点的左孩子，新节点是父亲节点的右孩子，叔叔节点不存在或者存在但为黑色。</p><p><img src=\"https://static001.geekbang.org/resource/image/5d/e7/5d733c965a347361a820d53205b7cbe7.jpg?wh=2605x694\" alt=\"\" title=\"图11 爷爷节点为黑色，父亲节点为红色，没叔叔节点或有叔叔节点且为黑色，父亲节点是爷爷节点的左孩子，插入的新红色节点是父亲节点的右孩子，插入新红色节点导致失衡的调整\"></p><p><strong>调整方法</strong>：</p><p>在这里，爷爷、父亲、新节点构成了先左斜后右斜的关系，所以，图11就需要首先以父亲节点为根向左旋转，然后再以爷爷节点为根向右旋转。接着将原来的新节点变为黑色，原来的爷爷节点变为红色。</p><p>当然，图11可能只是某棵红黑树的一部分，所以可能对于“以父亲节点为根向左旋转，然后再以爷爷节点为根向右旋转”的理解会造成一定的困扰，你可以继续参考图12，会对旋转理解得更全面。</p><p><img src=\"https://static001.geekbang.org/resource/image/03/05/032b460492ba8a44939507624c94fc05.jpg?wh=2605x722\" alt=\"\" title=\"图12 对图11先左旋后右旋理解的补充图（变色问题没处理请忽略变色问题）\"></p><p>前面总结了平衡性调整的三种情况，其实还有另外三种情况与前面三种情况正好相反。另外三种情况是父节点是爷爷节点的右孩子，没有叔叔节点或者叔叔节点是爷爷节点的左孩子。这里就不赘述另外三种情况，只是通过图形来表示。</p><h2><strong>插入新节点后平衡调整情况4</strong></h2><p>参考图13。</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/35/9b2641ddb86385b20eb0db051fc7d635.jpg?wh=2531x722\" alt=\"\" title=\"图13 爷爷节点为黑色，父亲节点为红色，有叔叔节点且为红色，父亲节点是爷爷节点的右孩子，插入新红色节点导致失衡的调整（对比图5）\"></p><h2><strong>插入新节点后</strong>平衡调整情况5</h2><p>参考图14。</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/8d/cb669b37f1f172a580c0226923665b8d.jpg?wh=2531x775\" alt=\"\" title=\"图14&nbsp; 爷爷节点为黑色，父亲节点为红色，没叔叔节点或有叔叔节点且为黑色，父亲节点是爷爷节点的右孩子，插入的新红色节点是父亲节点的右孩子，插入新红色节点导致失衡的调整（对比图10）\"></p><h2><strong>插入新节点后</strong>平衡调整情况6</h2><p>参考图15。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/95/7f4daf28bb9eedcabc2472a36a732395.jpg?wh=2531x727\" alt=\"\" title=\"图15 爷爷节点为黑色，父亲节点为红色，没叔叔节点或有叔叔节点且为黑色，父亲节点是爷爷节点的右孩子，插入的新红色节点是父亲节点的左孩子，插入新红色节点导致失衡的调整（对比图11）\"></p><p>目前看来，大概所有的情况都已经包括在内，可以开始书写代码了。如果日后发现遗漏可以随时补充。当然，后面课节还会提供针对红黑树的合法性测试代码。</p><p>请注意，平衡性调整方法有很多种，并非一成不变，不同的人写出的平衡性调整代码可能都不相同，并没有固定的、可以遵循的套路，只要调整后仍旧是一棵合法的红黑树即可。</p><p>为了能够将一个红黑树比较直观地显示出来，方便进行红黑树平衡调整测试，在这里我也增加了前面讲解过的层序遍历接口levelOrder并稍加改造。</p><pre><code class=\"language-plain\">//层序遍历二叉树，方便显示\nvoid levelOrder()\n{\n\tlevelOrder(root);\n}\n//获取某个节点的高度（根高度为1，往下高度依次+1），用于显示节点时换行的目的\nint getNodeLevel(RBNode&lt;T&gt;* tNode)\n{\n\tint icurlvl = 0;\n\twhile (tNode != nullptr)\n\t{\n\t\ttNode = tNode-&gt;parentNd;\n\t\ticurlvl++;\n\t} //end while\n\treturn icurlvl;\n}\nvoid levelOrder(RBNode&lt;T&gt;* tNode)\n{\n\tif (tNode != nullptr) //若二叉树非空\n\t{\n\t\tRBNode&lt;T&gt;* tmpnode;\n\t\tLinkQueue&lt;RBNode&lt;T&gt;*&gt; lnobj;//注意，队列的元素类型是“节点指针”类型\n\t\tlnobj.EnQueue(tNode); //先把根节点指针入队\n\t\tint currdislvl = 1;&nbsp; &nbsp;//当前显示第几层，根算第一层\n\t\tconst char* pr = \"[红]\";\n\t\tconst char* pb = \"[黑]\";\n\t\tchar* ptmp;\n\t\twhile (!lnobj.IsEmpty()) //循环判断队列是否为空\n\t\t{\n\t\t\tlnobj.DeQueue(tmpnode); //出队列\n\t\t\tint lvl = getNodeLevel(tmpnode);\n\t\t\tif (lvl != currdislvl) //用于换行\n\t\t\t{\n\t\t\t\tcurrdislvl = lvl;\n\t\t\t\tcout &lt;&lt;&nbsp; endl;\n\t\t\t}\n\t\t\tif (tmpnode-&gt;isRed == false)\n\t\t\t\tptmp = (char *)pb;\n\t\t\telse\n\t\t\t\tptmp = (char*)pr;\n\t\t\tcout &lt;&lt; tmpnode-&gt;data &lt;&lt;ptmp &lt;&lt; \"&nbsp; &nbsp; &nbsp; &nbsp;\";\n\t\t\tif (tmpnode-&gt;leftChild != nullptr)\n\t\t\t\tlnobj.EnQueue(tmpnode-&gt;leftChild);&nbsp; //左孩子入队\n\t\t\tif (tmpnode-&gt;rightChild != nullptr)&nbsp; &nbsp; &nbsp;//右孩子入队\n\t\t\t\tlnobj.EnQueue(tmpnode-&gt;rightChild);\n\t\t} //end while\n\t}\n}\n</code></pre><p>如果调用levelOrder接口，就会显示图8右侧所示的红黑树，后面测试时我也会详细讲解使用这个接口的方法。这里先看调用结果。<br>\n<img src=\"https://static001.geekbang.org/resource/image/74/df/74958d95ed292fbec60e0be16bdc34df.jpg?wh=2742x496\" alt=\"\"></p><p>在类模板RBTree的定义中，我又继续加入了不少代码，包括InsertElem()、BalanceTune()、getBrotherNode()、RotateLeft()、RotateRight()、RotateLeftRight()、RotateRightLeft()成员函数（<a href=\"https://gitee.com/jianw_wang/geektime_cpp_dsa/blob/master/20%EF%BD%9C%E7%BA%A2%E9%BB%91%EF%BC%88R-B%EF%BC%89%E6%A0%91%EF%BC%9A%E8%8A%82%E7%82%B9%E6%8F%92%E5%85%A5%E5%90%8E%E7%9A%84%E5%B9%B3%E8%A1%A1%E6%80%A7%E8%B0%83%E6%95%B4/MyProject.cpp\">参见课件</a>）。</p><p>在main主函数中加入代码，通过更改array数组，在其中放入不同的数据来测试红黑树节点的创建和平衡性的调整是否正确。</p><pre><code class=\"language-plain\">RBTree&lt;int&gt; myrbtr;\nint array[] = { 60,25,90,23,49,86,100,34,58,59,80 };\nint acount = sizeof(array) / sizeof(int);\nfor (int i = 0; i &lt; acount; ++i)\n{\t\t\n\tmyrbtr.InsertElem(array[i]);\n}\nmyrbtr.levelOrder();\n</code></pre><p>执行结果如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/c9/95/c901be66453ffdff571593b4bd848d95.jpg?wh=2738x604\" alt=\"\"></p><p>通过前面介绍的“可视化数据结构算法演示”网站，你可以看到创建的红黑树，也就是图16。</p><p><img src=\"https://static001.geekbang.org/resource/image/99/57/9939983edf5b6e3fc484c4e7430ea457.jpg?wh=2531x884\" alt=\"\" title=\"图16 通过插入60,25,90,23,49,86,100,34,58,59,80共11个节点创建出的红黑树\"></p><h2>小结</h2><p>本节课我带你学习了红黑树插入节点操作的各种情况以及插入操作后平衡性调整的方法。</p><p>如果要进行“向红黑树插入节点”的操作，我们总结了该操作所分的两种情况：没有任何节点的空树，以及非空的树。</p><p>这里尤其需要注意的是第二种情况，因为向红黑树中插入新的节点会导致红黑树失去平衡，所以插入新节点后必须对红黑树进行平衡性调整。</p><p>需要进行平衡性调整的情况分为6种，这节课已经总结了详细的图示和代码，我建议你理解这些图示和代码，没必要死记硬背。可以重点关注一下其中的旋转相关的代码包括RotateLeft()、RotateRight()、RotateLeftRight()、RotateRightLeft()。最后，我也总结了一张关于插入节点平衡性调整的各种情况图片，供你参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/30/ac/307ef794757e63897a82c26d1026ddac.jpg?wh=8833x5264\" alt=\"\" title=\"红黑树插入节点导致失衡的各种情形汇总&nbsp;\"></p><h2>课后回顾</h2><p>自查一下，你是否能够理解本节所讲解的各种插入新节点后的红黑树平衡性调整情况，是否能看懂本节所提供的<a href=\"https://gitee.com/jianw_wang/geektime_cpp_dsa/blob/master/20%EF%BD%9C%E7%BA%A2%E9%BB%91%EF%BC%88R-B%EF%BC%89%E6%A0%91%EF%BC%9A%E8%8A%82%E7%82%B9%E6%8F%92%E5%85%A5%E5%90%8E%E7%9A%84%E5%B9%B3%E8%A1%A1%E6%80%A7%E8%B0%83%E6%95%B4/MyProject.cpp\">课件代码</a>？</p><p>欢迎你在留言区分享自己的思考。如果觉得有所收获，也可以把课程分享给更多的朋友一起学习、进步。咱们下节课见！</p>","neighbors":{"left":{"article_title":"17｜红黑（R-B）树：和平衡二叉树有什么不同？","id":642285},"right":{"article_title":"19｜红黑（R-B）树：节点删除后的平衡性调整（一）","id":643695}},"comments":[{"had_liked":false,"id":378458,"user_name":"Yj.yolo","can_delete":false,"product_type":"c1","uid":2814082,"ip_address":"广东","ucode":"0ED1B41F124061","user_header":"https://static001.geekbang.org/account/avatar/00/2a/f0/82/f235d91d.jpg","comment_is_top":false,"comment_ctime":1690275756,"is_pvip":false,"replies":[{"id":137956,"content":"大概知道怎么回事就行，没必要手撸这些","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1690465201,"ip_address":"广东","comment_id":378458,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"作者你好，我发现，对于您提供的平衡树和红黑树的代码，我可以明白，也看得懂，但是我自己写就很很艰难，我的问题是：我学会套用相关模板即可？还是说我必须会手撸相关红黑树代码","like_count":0,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624352,"discussion_content":"大概知道怎么回事就行，没必要手撸这些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690465201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378459,"user_name":"Yj.yolo","can_delete":false,"product_type":"c1","uid":2814082,"ip_address":"广东","ucode":"0ED1B41F124061","user_header":"https://static001.geekbang.org/account/avatar/00/2a/f0/82/f235d91d.jpg","comment_is_top":false,"comment_ctime":1690276105,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"图6最右侧的图，按照相关原理和图6下面的文字，20和40节点应该是黑色吧？","like_count":0}]}