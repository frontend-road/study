{"id":609407,"title":"06｜跨组件数据通信：常见的组件间数据通信方式有哪些？","content":"<p>你好，我是杨文坚。</p><p>经过之前几节课，我们了解到，Vue.js开发页面的最小单元就是组件，多个组件拼装组合成我们日常看到的Vue.js开发的Web页面。每个组件基于视图和逻辑代码，都可以独立实现功能的渲染和交互。</p><p>但是日常开发中，你会发现，页面上的所有组件的独立渲染功能，其实并不满足我们的需求，很多时候我们需要组件之间互相通信交换数据，甚至是互相通信进行相互的数据操作。</p><p>举个最常见的例子，在电商场景中，我们需要在订单界面重新编辑购物车商品数量，并实时计算订单总金额，具体效果案例是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/78/2d/78d41eed8f6431544355c9569dbec12d.gif?wh=599x427\" alt=\"图片\"></p><p>你看，这个商品规格组件和订单信息一般都是不同组件，规格组件修改的数据要实时影响到订单数据显示。同时地址信息组件和订单信息组件也是不同组件，修改了地址信息，订单显示的信息也要实时修改。</p><p>类似的场景还有很多，核心就是要<strong>进行不同组件的数据联动，也就是数据通信</strong>。所以，这节课我们就由浅入深，看看如何用多种方法实现Vue.js3的数据跨组件通信。</p><h2>Vue.js3项目开发过程有哪些组件通信场景？</h2><p>在讲解多种组件的数据通信方式之前，我们先整体了解一下Vue.js3项目开发过程中会有哪些组件通信场景。</p><p>一般，组件的组合有基于组件嵌套的“父子组件”和基于组件并行组合的“兄弟组件”这两种情况，所以组件的数据通信一般都是<strong>处理“父子组件数据相互通信”和“兄弟组件数据相互通信”这两种场景</strong>。</p><!-- [[[read_end]]] --><p>在 Vue.js 中实现“父子组件”和“兄弟组件”数据单向数据通信，一般都是通过<strong>Props</strong>来进行的。“父组件”通过Props传入数据给“子组件”，而“兄弟组件”是基于“公共父组件”通过Props将数据传入子“兄弟组件”中，例如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/43/8f/43487942ff178bfbf4feda5f4ce3b18f.jpg?wh=3000x1478\" alt=\"\"></p><p>在实际过程中，<strong>这类通过纯Props的传输方式只能单向传递数据，不是双向传递</strong>，也就是数据只能从父组件流向子组件，或者从一个兄弟组件流向子兄弟组件。</p><p>看到这儿你可能会疑惑，根据上节课我们提到的响应式开发的知识点，难道Props不能将响应式数据传递到子组件里，然后在子组件里操作这个Props响应式数据来影响父组件吗？</p><p>如果你能提到这个问题，说明你上节课掌握得很不错，但是注意了，我们这节课讲的是数据跨组件通信，跟响应式不是一个维度上的技术点。</p><p>那么，为什么不能在子组件，或者子兄弟组件里修改Props的响应式数据来影响父组件做反向数据通信呢？我举一个实际的例子给你演示一下，你就知道是什么情况了。</p><p>以下代码是一个简单的文本编辑实时显示的组件，由两个组件嵌套组成，其中父组件包括了文本信息实时显示，子组件是文本输入框。父组件的通过 ref生成的响应式数据通过props传入子组件进行显示和修改。当子组件修改父组件props传入的响应式数据，控制台将会报错。</p><pre><code class=\"language-xml\">&lt;!-- 子组件 --&gt;\n&lt;template&gt;\n  &lt;div class=\"v-text\"&gt;\n    &lt;span&gt;地址：&lt;/span&gt;\n    &lt;input :value=\"props.text\" @input=\"onInput\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nconst props = defineProps({\n text: String,\n});\nconst onInput = (e) =&gt; {\n  props.text = e.target.value;\n}\n&lt;/script&gt;\n</code></pre><pre><code class=\"language-xml\">&lt;!-- 父组件 --&gt;\n&lt;template&gt;\n  &lt;div&gt;订单信息：{{text}}&lt;/div&gt;\n  &lt;div class=\"app\"&gt;\n    &lt;v-text v-bind:text=\"text\" /&gt; \n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup &gt;\nimport { ref } from 'vue';\nimport VText from './text.vue'\nconst text = ref('环城东路888号');\n&lt;/script&gt;\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/e5/93/e5e8a73e66be599f21c1f64a2e576293.gif?wh=599x294\" alt=\"图片\"></p><p>当我们输入上图内容并运行时，控制台会显示这个警告：</p><p><img src=\"https://static001.geekbang.org/resource/image/53/ce/53d5f730cd4556e809aeee6f5c4189ce.png?wh=1600x966\" alt=\"图片\"></p><p>你看，当我们要在子组件里修改父组件通过Props传递过来的ref数据时，Vue.js3就会报出警告，表示这个数据是只读的。这个其实也是由Props技术定位决定的，类似React，传入Props数据必须是只读的，不能随意变化。</p><p>那么你可能又问了，如果Props传入的不是基础数据，而是reactive数据呢？</p><p>传入reactive的响应式对象数据，是可以在子组件里修改这个对象数据里的其它属性数据，来影响父组件的，但是<strong>直接修改这个reactive数据会报出同样的警告错误</strong>。这是因为对象的属性只是一层“引用”，不是指向原始响应式数据的“顶级引用”，这也不算是Bug，只能算是JavaScript的特性。</p><p>所以，在实际项目中，我们尽量以Props传入数据为只读数据，不要随便修改Props数据，避免后续Props数据的随意更改引起数据流操作的紊乱。</p><p>那么现在问题就来了，既然通过Props传递的数据只是单向传递，那么实际组件间通信如何实现双向通信呢？也就是说，子组件可以向父组件通信，兄弟组件可以通过向父组件通信影响其它兄弟组件。这就要结合Props和Emits来实现了。</p><h2>如何基于Props和Emits实现跨组件通信？</h2><p>前面我们说到，Props是父组件通过设置属性来传递数据给子组件，也就是父组件可以通过Props单向给子组件传递数据。</p><p>而Emits呢，是给子组件传入自定义事件，父组件可以把操作“父级数据”方法放在这个事件中传入子组件，子组件里执行这个传入的事件间接操作“父级数据”，达到在子组件里向父组件进行数据通信的效果。</p><p>我们把刚刚报错的代码修改一下，通过事件Emits的形式来进行在子组件里修改数据，最后影响父组件的数据，达到实现组件间的数据通信的效果：</p><pre><code class=\"language-xml\">&lt;!-- 子组件 --&gt;\n&lt;template&gt;\n  &lt;div class=\"v-text\"&gt;\n    &lt;span&gt;地址：&lt;/span&gt;\n    &lt;input :value=\"props.text\" @input=\"onInput\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nconst props = defineProps({\n text: String,\n});\nconst emits = defineEmits(['onChangeText'])\nconst onInput = (e) =&gt; {\n  emits('onChangeText', e.target.value)\n}\n&lt;/script&gt;\n</code></pre><pre><code class=\"language-xml\">&lt;!-- 父组件 --&gt;\n&lt;template&gt;\n  &lt;div&gt;订单信息：{{text}}&lt;/div&gt;\n  &lt;div class=\"app\"&gt;\n    &lt;v-text \n      v-bind:text=\"text\"\n      v-on:onChangeText=\"onChangeText\"\n    /&gt; \n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup &gt;\nimport { ref } from 'vue';\nimport VText from './text.vue'\nconst text = ref('环城东路888号');\n\nconst onChangeText = (newText) =&gt; {\n  text.value = newText;\n}\n&lt;/script&gt;\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/a4/db/a4eaf5564ceab538be0ef44325466cdb.gif?wh=599x294\" alt=\"图片\"></p><p>你可以看到，这一次，子组件可以注册自定义事件给父组件，然后父组件就在这个事件中传入操作“父级数据”的回调方法，接着子组件就可以通过执行这个方法，并且可以通过这个方法传入其它数据经过事件来影响到父组件。</p><p>简单来说就是父组件把操作某些“父级数据”方法给子组件来执行，通过这个操作指定数据的方法，通过自定义事件让子组件来操作父组件数据达到向父组件的通信，具体流程如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/47/36/47920e4e33f6e936c533d12059a49d36.jpg?wh=4000x1585\" alt=\"\"><br>\n这样就形成了一个比较清晰的数据流向。父组件通过Props向子组件传递数据，子组件通过指定的自定义事件来操作指定的数据，不会带来数据污染。如果是兄弟组件的话，可以借助公共父组件做个自定义事件的中转，来进行相关指定的数据的通信。</p><p>如果用这个方式来实现我们一开始提出的电商订单的完整功能代码，可以参考下面的代码来实现。</p><p>父组件（最外层的组件）部分的代码如下：</p><pre><code class=\"language-xml\">\n&lt;template&gt;\n  &lt;div class=\"app\"&gt;\n    &lt;v-info v-bind:text=\"state.text\"  v-bind:list=\"state.list\" /&gt;\n    &lt;v-text v-bind:text=\"state.text\" v-on:updateText=\"updateText\" /&gt; \n    &lt;v-list\n      v-bind:list=\"state.list\" \n      v-on:increase=\"increase\"\n      v-on:decrease=\"decrease\"\n    /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup &gt;\nimport { reactive } from 'vue';\nimport VInfo from './components/info.vue'\nimport VText from './components/text.vue'\nimport VList from './components/list.vue';\n\nconst state = reactive({\n  text: '环城东路888号',\n  list: [\n    { name: '苹果', price: 20, count: 0 },\n    { name: '香蕉', price: 12, count: 0 },\n    { name: '梨子', price: 15, count: 0 },\n  ]\n});\n\nconst updateText = (text) =&gt; {\n  state.text = text;\n}\n\nconst increase = (index) =&gt; {\n  state.list[index].count += 1;\n}\n\nconst decrease = (index) =&gt; {\n  if (state.list[index].count &gt; 0) {\n    state.list[index].count -= 1;\n  }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n.app {\n  width: 600px;\n  padding: 10px;\n  margin: 10px auto;\n  box-shadow: 0px 0px 9px #00000066;\n  text-align: center;\n}\n&lt;/style&gt;\n\n</code></pre><p>子组件（订单显示信息）部分的代码如下：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class=\"v-info\"&gt;\n    &lt;div&gt;订单信息：&lt;/div&gt;\n    &lt;div&gt;收货地址：{{props.text}}&lt;/div&gt;\n    &lt;div&gt;总金额：{{totalPrice}}&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\n  import { ref, watch } from 'vue';\n\n  const props = defineProps({\n    text: String,\n    list: Array,\n  });\n  const totalPrice = ref(0);\n\n  watch(props, () =&gt; {\n    const list = props.list;\n    let total = 0;\n    list.forEach((item) =&gt; {\n      total += item.price * item.count;\n    });\n    totalPrice.value = total;\n  })\n&lt;/script&gt;\n\n&lt;style&gt;\n.v-info {\n  width: 400px;\n  margin: 20px auto;\n  padding: 10px;\n  box-shadow: 0px 0px 16px 0px #00000038;\n  border: 1px solid #d6d5d5;\n  font-size: 20px;\n  color: #222222;\n  background: #ffffff;\n  font-size: 18px;    \n  text-align: left;\n  line-height: 22px;\n}\n&lt;/style&gt;\n</code></pre><p>子组件（地址文本编辑器）部分的代码如下：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class=\"v-text\"&gt;\n    &lt;span&gt;地址：&lt;/span&gt;\n    &lt;input :value=\"props.text\"  v-on:input=\"onInput\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup &gt;\nconst props = defineProps({\n  text: String,\n});\nconst emits = defineEmits(['updateText']);\n\nconst onInput = (e) =&gt;  {\n  emits('updateText', e.target.value);\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n\n.v-text {\n  width: 400px;\n  margin: 20px auto;\n  padding: 10px;\n  box-shadow: 0px 0px 16px 0px #00000038;\n  border: 1px solid #d6d5d5;\n  font-size: 20px;\n  color: #222222;\n  background: #2196f34d;\n  font-size: 16px;\n}\n.v-text input {\n  width: 200px;\n  height: 32px;\n  line-height: 32px;\n  margin-right: 10px;\n  box-sizing: border-box;\n  font-size: 16px;\n}\n&lt;/style&gt;\n</code></pre><p>子组件（商品规格选择器）部分的代码如下：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class=\"v-list\"&gt;\n    &lt;div class=\"v-list-item\" v-for=\"(item, index) in list\"&gt;\n      &lt;span class=\"text\"&gt;{{item.name}}&lt;/span&gt;\n      &lt;span class=\"text\"&gt;单价: {{item.price}}&lt;/span&gt;\n      &lt;button class=\"btn\" v-on:click=\"onClickDecrease(index)\"&gt;-&lt;/button&gt;\n      &lt;span class=\"count\"&gt; {{item.count}}&lt;/span&gt;\n      &lt;button class=\"btn\" v-on:click=\"onClickIncrease(index)\"&gt;+&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nconst props = defineProps({\n  list: Array,\n})\nconst emits = defineEmits(['increase', 'decrease'])\nconst  onClickIncrease = (index) =&gt; {\n  emits('increase', index)\n}\nconst  onClickDecrease = (index) =&gt; {\n  emits('decrease', index)\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n.v-list {\n  width: 400px;\n  margin: 20px auto;\n  padding: 10px;\n  box-shadow: 0px 0px 16px 0px #00000038;\n  border: 1px solid #d6d5d5;\n  font-size: 20px;\n  color: #222222;\n  background: #2196f34d;\n  font-size: 16px;\n}\n\n.v-list .v-list-item {\n  border-bottom: 1px solid #7aafe29c;\n  line-height: 32px;\n  padding: 4px 0;\n  text-align: left;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.v-list .v-list-item .text {\n  width: 120px;\n  display: inline-block;\n  text-align: center;\n}\n.v-list .v-list-item .count {\n  min-width: 50px;\n  display: inline-block;\n  text-align: center;\n  font-size: 24px;\n  font-weight: 800;\n  color: #026181;\n}\n.v-list .v-list-item .btn {\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  font-size: 30px;\n  cursor: pointer;\n  box-sizing: border-box;\n}\n&lt;/style&gt;\n</code></pre><p>不过，虽然借助Props和Emits是能清晰地看到和管理数据通信流向，但是要写一堆自定义事件和方法代码，比较麻烦。而且，Props传入响应式数据是只读的，完全发挥不了响应式数据的优势，那么，有其它的方法来充分发挥响应式的优势并实现双向数据通信吗？</p><p>答案是有的，就是直接使用公共响应式数据文件实现跨组件通信。</p><h2>使用公共响应式数据文件实现跨组件通信</h2><p>这种方法也就是响应式数据不通过Props传递，而是通过“组合方式”使用，这也是发挥了“响应式数据”+“组合式API” 的双重优势。我先给你画个图讲解一下：</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/ec/f8026764ac2yya1407d2677e7ae6b4ec.jpg?wh=3000x1501\" alt=\"\"></p><p>我们<strong>把公共数据都放在一个响应式数据的文件里，无论是父组件还是子组件，都直接引用这个文件里的数据</strong>，然后直接在各自组件间进行读数据或写数据。如果有组件里的模板视图使用到这个公共响应式数据，数据被其它组件修改，也会同时触发模板视图的更新。</p><p>那么，我们再将前面写的电商订单模块代码修改成这种方式的，修改后如下。</p><p>公共响应式数据的独立文件：</p><pre><code class=\"language-typescript\">import { reactive } from 'vue';\n\nexport const store = reactive({\n  text: '环城东路888号',\n  list: [\n    { name: '苹果', price: 20, count: 0 },\n    { name: '香蕉', price: 12, count: 0 },\n    { name: '梨子', price: 15, count: 0 },\n  ]\n});\n</code></pre><p>父组件（最外层的组件）：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class=\"app\"&gt;\n    &lt;v-info /&gt;\n    &lt;v-text /&gt;\n    &lt;v-list/&gt; \n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup &gt;\nimport { reactive } from 'vue';\nimport VInfo from './components/info.vue'\nimport VText from './components/text.vue'\nimport VList from './components/list.vue';\n&lt;/script&gt;\n\n&lt;style&gt;\n.app {\n  width: 600px;\n  padding: 10px;\n  margin: 10px auto;\n  box-shadow: 0px 0px 9px #00000066;\n  text-align: center;\n}\n&lt;/style&gt;\n</code></pre><p>子组件（订单显示信息）：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class=\"v-info\"&gt;\n    &lt;div&gt;订单信息：&lt;/div&gt;\n    &lt;div&gt;收货地址：{{store.text}}&lt;/div&gt;\n    &lt;div&gt;总金额：{{totalPrice}}&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref, watch } from 'vue';\nimport { store } from '../store';\n\nconst totalPrice = ref(0);\n\nwatch(store, () =&gt; {\n  let total = 0;\n  store.list.forEach((item) =&gt; {\n    total += item.price * item.count;\n  });\n  totalPrice.value = total;\n})\n&lt;/script&gt;\n\n&lt;style&gt;\n.v-info {\n  width: 400px;\n  margin: 20px auto;\n  padding: 10px;\n  box-shadow: 0px 0px 16px 0px #00000038;\n  border: 1px solid #d6d5d5;\n  font-size: 20px;\n  color: #222222;\n  background: #ffffff;\n  font-size: 18px;    \n  text-align: left;\n  line-height: 22px;\n}\n&lt;/style&gt;\n</code></pre><p>子组件（地址文本编辑器）：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class=\"v-text\"&gt;\n    &lt;span&gt;地址：&lt;/span&gt;\n    &lt;input :value=\"store.text\"  v-on:input=\"onInput\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup &gt;\nimport { store } from '../store';\n\nconst onInput = (e) =&gt;  {\n  store.text = e.target.value;\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n\n.v-text {\n  width: 400px;\n  margin: 20px auto;\n  padding: 10px;\n  box-shadow: 0px 0px 16px 0px #00000038;\n  border: 1px solid #d6d5d5;\n  font-size: 20px;\n  color: #222222;\n  background: #2196f34d;\n  font-size: 16px;\n}\n\n.v-text input {\n  width: 200px;\n  height: 32px;\n  line-height: 32px;\n  margin-right: 10px;\n  box-sizing: border-box;\n  font-size: 16px;\n}\n\n&lt;/style&gt;\n</code></pre><p>子组件（商品规格选择器）：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class=\"v-list\"&gt;\n    &lt;div class=\"v-list-item\" v-for=\"(item, index) in store.list\"&gt;\n      &lt;span class=\"text\"&gt;{{item.name}}&lt;/span&gt;\n      &lt;span class=\"text\"&gt;单价: {{item.price}}&lt;/span&gt;\n      &lt;button class=\"btn\" v-on:click=\"onClickDecrease(index)\"&gt;-&lt;/button&gt;\n      &lt;span class=\"count\"&gt; {{item.count}}&lt;/span&gt;\n      &lt;button class=\"btn\" v-on:click=\"onClickIncrease(index)\"&gt;+&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { store } from '../store';\n\nconst  onClickIncrease = (index) =&gt; {\n  store.list[index].count += 1\n}\nconst  onClickDecrease = (index) =&gt; {\n  if (store.list[index].count &gt; 0) {\n    store.list[index].count -= 1\n  }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n.v-list {\n  width: 400px;\n  margin: 20px auto;\n  padding: 10px;\n  box-shadow: 0px 0px 16px 0px #00000038;\n  border: 1px solid #d6d5d5;\n  font-size: 20px;\n  color: #222222;\n  background: #2196f34d;\n  font-size: 16px;\n}\n\n.v-list .v-list-item {\n  border-bottom: 1px solid #7aafe29c;\n  line-height: 32px;\n  padding: 4px 0;\n  text-align: left;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.v-list .v-list-item .text {\n  width: 120px;\n  display: inline-block;\n  text-align: center;\n}\n.v-list .v-list-item .count {\n  min-width: 50px;\n  display: inline-block;\n  text-align: center;\n  font-size: 24px;\n  font-weight: 800;\n  color: #026181;\n}\n.v-list .v-list-item .btn {\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  font-size: 30px;\n  cursor: pointer;\n  box-sizing: border-box;\n}\n&lt;/style&gt;\n</code></pre><p>你看，直接用一个公共的文件管理响应式数据进行组件间数据通信，是不是很自由方便？但是自由方便都是有代价的，这个代价就是<strong>不好管理和维护</strong>。</p><p>你可以想像一下，一堆公共响应式数据，都可以在任何组件里被修改，数据流向管理很混乱，不清楚什么时候哪个组件对某个公共数据做了修改，影响了其它组件的视图内容显示。</p><p>那么，既要自由方便，又要管理方便，有更好的办法可以兼顾这两者吗？其实也有，Vue.js3官方早就想到了。<strong>Vue.js3官方提供了一个数据管理的JavaScript库，也就是Pinia，就可以做到这一点。</strong>所以，接下来我们再来看看如何基于Pinia实现跨组件数据通信。</p><h2>基于Pinia实现的跨组件数据通信</h2><p>首先，我来给你介绍一下什么是Pinia。简单来讲，Pinia就是一个基于Proxy实现的Vue.js公共状态数据管理的JavaScript库，可以提供组件间的数据通信，也可以跟踪定位数据的变化。</p><p>我画个图给你演示说明一下：</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/44/6c4ecc66cb791af67759897594879644.jpg?wh=4000x2036\" alt=\"\"></p><p>你可以看到，Pinia可以定义一个公共的数据store，在这个公共数据里管理多个数据的操作和计算。各个组件，无论是父子组件关系还是兄弟组件管理，都基于这个store来进行读数据展示和写数据更新状态，读写过程都是分开管理。读数据基于内置的Getter和State属性，写数据基于内部的Action方法。</p><p>数据流向都经过store统一进行管理，一旦整个应用出现什么数据读写异常或者数据被污染，都可以通过Pinia这个公共store来进行定位排查。</p><p>我们还是再写点代码来验证一下效果，把上述的代码通过Pinia来改造一下，同样也能实现多个组件的数据通信，达到实现商品订单数据的实时更新的效果。看代码。</p><p>Pinia定义的独立store文件：</p><pre><code class=\"language-typescript\">import { defineStore } from 'pinia';\n\nexport const useMyStore = defineStore('my-store', {\n  state: () =&gt; ({\n    text: '环城东路888号',\n    list: [\n      { name: '苹果', price: 20, count: 0 },\n      { name: '香蕉', price: 12, count: 0 },\n      { name: '梨子', price: 15, count: 0 },\n    ]\n  }),\n\n  getters: {\n    totalPrice(state) {\n      let total = 0;\n      state.list.forEach((item) =&gt; {\n        total += item.price * item.count;\n      });\n      return total;\n    },\n  },\n\n  actions: {\n\n    updateText(text) {\n      this.text = text;\n    },\n\n    increase(index) {\n      this.list[index].count += 1;\n    },\n\n    decrease(index) {\n      if (this.list[index].count &gt; 0) {\n        this.list[index].count -= 1;\n      }\n    }\n  }\n})\n \n</code></pre><p>父组件（最外层的组件）：</p><pre><code class=\"language-xml\"> &lt;template&gt;\n  &lt;div class=\"app\"&gt;\n    &lt;v-info /&gt;\n    &lt;v-text /&gt;\n    &lt;v-list/&gt; \n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup &gt;\nimport { reactive } from 'vue';\nimport VInfo from './components/info.vue'\nimport VText from './components/text.vue'\nimport VList from './components/list.vue';\n&lt;/script&gt;\n\n&lt;style&gt;\n.app {\n  width: 600px;\n  padding: 10px;\n  margin: 10px auto;\n  box-shadow: 0px 0px 9px #00000066;\n  text-align: center;\n}\n\n&lt;/style&gt;\n</code></pre><p>子组件（订单显示信息）：</p><pre><code class=\"language-xml\"> &lt;template&gt;\n  &lt;div class=\"v-info\"&gt;\n    &lt;div&gt;订单信息：&lt;/div&gt;\n    &lt;div&gt;收货地址：{{myStore.text}}&lt;/div&gt;\n    &lt;div&gt;总金额：&lt;span class=\"v-info-value\"&gt;{{myStore.totalPrice}}&lt;/span&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useMyStore } from '../store';\nconst myStore = useMyStore();\n&lt;/script&gt;\n\n&lt;style&gt;\n.v-info {\n  width: 400px;\n  margin: 20px auto;\n  padding: 10px;\n  box-shadow: 0px 0px 16px 0px #00000038;\n  border: 1px solid #d6d5d5;\n  font-size: 20px;\n  color: #222222;\n  background: #ffffff;\n  font-size: 18px;    \n  text-align: left;\n  line-height: 1.5;\n}\n\n.v-info-value {\n  font-size: 24px;\n  font-weight: 800;\n  color: #fe3030;\n}\n&lt;/style&gt;\n</code></pre><p>子组件（地址文本编辑器）：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class=\"v-text\"&gt;\n    &lt;span&gt;地址：&lt;/span&gt;\n    &lt;input :value=\"myStore.text\"  v-on:input=\"onInput\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup &gt;\nimport { useMyStore } from '../store';\nconst myStore = useMyStore();\n\nconst onInput = (e) =&gt;  {\n  myStore.updateText(e.target.value);\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n\n.v-text {\n  width: 400px;\n  margin: 20px auto;\n  padding: 10px;\n  box-shadow: 0px 0px 16px 0px #00000038;\n  border: 1px solid #d6d5d5;\n  font-size: 20px;\n  color: #222222;\n  background: #2196f34d;\n  font-size: 16px;\n}\n\n.v-text input {\n  width: 200px;\n  height: 32px;\n  line-height: 32px;\n  margin-right: 10px;\n  box-sizing: border-box;\n  font-size: 16px;\n}\n\n&lt;/style&gt;\n</code></pre><p>子组件（商品规格选择器）：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div class=\"v-list\"&gt;\n    &lt;div class=\"v-list-item\" v-for=\"(item, index) in myStore.list\"&gt;\n      &lt;span class=\"text\"&gt;{{item.name}}&lt;/span&gt;\n      &lt;span class=\"text\"&gt;单价: {{item.price}}&lt;/span&gt;\n      &lt;button class=\"btn\" v-on:click=\"myStore.decrease(index)\"&gt;-&lt;/button&gt;\n      &lt;span class=\"count\"&gt; {{item.count}}&lt;/span&gt;\n      &lt;button class=\"btn\" v-on:click=\"myStore.increase(index)\"&gt;+&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { useMyStore } from '../store';\nconst myStore = useMyStore();\n&lt;/script&gt;\n\n&lt;style&gt;\n.v-list {\n  width: 400px;\n  margin: 20px auto;\n  padding: 10px;\n  box-shadow: 0px 0px 16px 0px #00000038;\n  border: 1px solid #d6d5d5;\n  font-size: 20px;\n  color: #222222;\n  background: #2196f34d;\n  font-size: 16px;\n}\n\n.v-list .v-list-item {\n  border-bottom: 1px solid #7aafe29c;\n  line-height: 32px;\n  padding: 4px 0;\n  text-align: left;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.v-list .v-list-item .text {\n  width: 120px;\n  display: inline-block;\n  text-align: center;\n}\n.v-list .v-list-item .count {\n  min-width: 50px;\n  display: inline-block;\n  text-align: center;\n  font-size: 24px;\n  font-weight: 800;\n  color: #026181;\n}\n.v-list .v-list-item .btn {\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  font-size: 30px;\n  cursor: pointer;\n  box-sizing: border-box;\n}\n&lt;/style&gt;\n\n</code></pre><p>这里要特别注意，在使用Pinia时候，在Vue.js3应用挂载DOM节点前，要在Vue.js3应用里加上Pinia插件的使用，也就是注册Pinia插件到项目里：</p><pre><code class=\"language-javascript\">import { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport App from './app.vue';\n\nconst app = createApp(App);\nconst pinia = createPinia();\n// 加载pinia插件\napp.use(pinia);\napp.mount('#app');\n</code></pre><p>更多Pinia的使用方式，你可以查看<a href=\"https://pinia.vuejs.org/\">Pinia的官网</a>。</p><h2>总结</h2><p>这节课到这里就结束了，这节课我们讲了多个案例，带你体验了Vue.js3的组件间数据通信的多个方式，主要有三种，也各有优缺点：</p><ul>\n<li>基于Props+Emits的组件数据通信，让数据流向更加清晰，但是需要写很多组件间事件回调的传递代码；</li>\n<li>基于公共响应式数据文件进行通信，最简单，也是最能发挥响应式特性，但是代码管理不善容易带来数据通信混乱；</li>\n<li>基于Pinia的公共数据状态管理，虽然增加了学习成本，但是能管理好项目数据流向，也充分利用响应式的特性，来实现复杂大型项目的组件间通信。</li>\n</ul><p>在实际项目开发过程中，我们可以根据不同方式的特点灵活选择：</p><ul>\n<li>如果开发一些Vue.js组件库，可以基于Props+Emits来做组件库内部数据通信，这样可以方便管理组件库里组件的数据状态变化，减少数据污染；</li>\n<li>如果要快速开发一些小型Vue.js3应用，可以直接“基于公共的响应式数据文件进行通信”，因为这种方式比较自由方便，不用写太多的数据定义和自定义事件的代码；</li>\n<li>如果要开发大型Vue.js3项目，例如一些管理后台等复杂应用，建议你用Pinia来进行组件间的数据通信，方便数据的灵活使用和状态数据的流向管理。</li>\n</ul><p>希望你在后续进行Vue.js3跨组件的数据通信开发过程中，能够灵活且优雅地运用上述的多种方式。</p><h2>思考题</h2><p>我们这节课主要讲解多种跨组件的数据通信方式，每种方式虽然有其适用的场景，但是若使用不规范，都会存在响应式数据被污染的隐患，那么如何更好地保护响应式数据，在跨组件通信过程中得到规范使用呢？</p><p>欢迎和我一起讨论，期待在留言区看到你的身影。</p><h3><a href=\"https://github.com/FE-star/vue3-course/tree/main/chapter/06\">完整的代码在这里</a></h3>","neighbors":{"left":{"article_title":"05｜响应式开发操作：如何理解和使用Vue 3的响应式数据？","id":608231},"right":{"article_title":"07｜项目代码规范：如何成为一名合格的团队协作工程师？","id":609408}},"comments":[{"had_liked":false,"id":363829,"user_name":"杜子","can_delete":false,"product_type":"c1","uid":1045942,"ip_address":"中国香港","ucode":"DC9FA67EF7B490","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b6/294dafbb.jpg","comment_is_top":false,"comment_ctime":1670230087,"is_pvip":false,"replies":[{"id":132480,"content":"可以的。","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1671035964,"ip_address":"中国香港","comment_id":363829,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"那不是也可以使用vuex来管理数据","like_count":1,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596502,"discussion_content":"可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671035964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030148,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/04/6b55351e.jpg","nickname":"林家振","note":"","ucode":"33DEC8476ED5E6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595855,"discussion_content":"当然可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670409899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363683,"user_name":"ZR-rd","can_delete":false,"product_type":"c1","uid":2076199,"ip_address":"北京","ucode":"427E69255F30D8","user_header":"https://static001.geekbang.org/account/avatar/00/1f/ae/27/74828c37.jpg","comment_is_top":false,"comment_ctime":1669978406,"is_pvip":false,"replies":[{"id":135011,"content":"您好，请问能否提供最小问题的Demo，放到GitHub的issue上，方便我重现你遇到的问题。","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678626671,"ip_address":"浙江","comment_id":363683,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"老师，使用 pinia 时为什么每次都要在组件里通过调用 useMyStore 创建 myStore ，我在 store.js 里创建再在组件里引入就会报错，这是为啥呢？\nexport const orderStore = useMyStore();","like_count":1,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608744,"discussion_content":"您好，请问能否提供最小问题的Demo，放到GitHub的issue上，方便我重现你遇到的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678626671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2279433,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c8/09/b34b1473.jpg","nickname":"鱼腩","note":"","ucode":"54C97E73A75854","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595450,"discussion_content":"官方文档有例子：在组件外使用 store—— https://pinia.vuejs.org/zh/core-concepts/outside-component-usage.html","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1670078354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2076199,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/ae/27/74828c37.jpg","nickname":"ZR-rd","note":"","ucode":"427E69255F30D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2279433,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c8/09/b34b1473.jpg","nickname":"鱼腩","note":"","ucode":"54C97E73A75854","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595591,"discussion_content":"原来如此，谢谢分享~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670230552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":595450,"ip_address":"北京","group_id":0},"score":595591,"extra":""}]},{"author":{"id":2279433,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c8/09/b34b1473.jpg","nickname":"鱼腩","note":"","ucode":"54C97E73A75854","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":595449,"discussion_content":"个人愚见，如果按F12看控制台输出信息，在调用了useMyStore的组件内，全局pinia=CreatePinia()会自动注入并返回响应式的状态管理。而通过store.js导出的export const orderStore = useMyStore();  orderStore返回在全局pinia=CreatePinia()之前，全局pinia无法关联。  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670078219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393884,"user_name":"ifelse","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1725252529,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":3,"score":2,"product_id":100311101,"comment_content":"学习打卡","like_count":0},{"had_liked":false,"id":386957,"user_name":"xhsndl","can_delete":false,"product_type":"c1","uid":3803175,"ip_address":"贵州","ucode":"22C4A146B1B63A","user_header":"https://static001.geekbang.org/account/avatar/00/3a/08/27/0bd80208.jpg","comment_is_top":false,"comment_ctime":1705998547,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"把需要通信的数据封装成一个对象，再进行传递","like_count":0},{"had_liked":false,"id":379689,"user_name":"Bruce","can_delete":false,"product_type":"c1","uid":1016284,"ip_address":"上海","ucode":"61E439EEF865A6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/dc/a1662051.jpg","comment_is_top":false,"comment_ctime":1692313617,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"provide&#47;inject也可以，老师为什么没有加进来呢？","like_count":0}]}