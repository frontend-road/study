{"id":809371,"title":"09｜概念详解：如何根据元数据高效检索知识？","content":"<p>你好，我是叶伟民。</p><p>上一节课我们提到，如果我们想查看前天的CNET新闻，我们会问RAG应用：前天的CNET新闻有哪些？</p><p>这时候RAG应用就需要根据<strong>创建日期</strong>这个元数据去知识库里面搜索相关知识了。那究竟什么是元数据呢？这节课我就带你深入了解元数据这个基础概念。</p><h2>什么是元数据？</h2><p>元数据，英文叫Metadata，是一个广泛的概念，它指的是<strong>“数据的数据”，即描述其他数据的属性、特征或上下文信息的数据</strong>。元数据通常用于帮助我们组织、搜索、访问和管理数据。元数据是关于数据的信息，它描述了数据的属性、结构、内容、来源、格式、质量、关联性等。</p><p>元数据分为以下四个类型。</p><ol>\n<li>\n<p>描述性元数据：提供数据内容的描述，例如实战案例2中的文章标题、作者、发布日期等等。</p>\n</li>\n<li>\n<p>结构性元数据：描述数据的组织结构，如文章的章节、表格的列和行等等。</p>\n</li>\n<li>\n<p>管理性元数据：涉及数据的管理和维护，如文章的版权信息、存储位置、访问权限等等。</p>\n</li>\n<li>\n<p>参考性元数据：提供数据之间关系的描述，如文章的链接、引用、分类等等。</p>\n</li>\n</ol><p>这里我想重点讲一下<strong>访问权限</strong>这个元数据。</p><p>就像我们用到的MIS系统一样，在日常工作的RAG应用中，特别是企业里面的RAG应用，绝大部分都会用到访问权限。其机制与MIS系统是一样的。相对于其他类型的元数据，访问权限这个元数据使用频率是相当高的。</p><!-- [[[read_end]]] --><p>具体来说，以实战案例1为例，在首页的提问输入框输入问题之后，系统应该只检索当前用户具有访问权限的数据，而不是从所有数据中检索。</p><p>那么，我们如何获取元数据呢？</p><h2>如何获取元数据？</h2><p>获取元数据的方式有很多种，包括：</p><ul>\n<li>\n<p><strong>原始数据</strong>：直接从数据源中提取，如数据库、文件系统、网络资源等。</p>\n</li>\n<li>\n<p><strong>用户输入</strong>：用户在创建或编辑数据时提供的描述性信息。</p>\n</li>\n<li>\n<p><strong>自动化工具</strong>：通过软件工具自动生成，如文件的创建时间、修改时间等。</p>\n</li>\n<li>\n<p><strong>第三方服务</strong>：从外部API或数据提供商获取，如社交媒体元数据、地理信息系统元数据等。</p>\n</li>\n</ul><p>在实战案例2里，我们的元数据来自于RSS API。</p><p>比较特殊的是访问权限这个元数据。访问权限元数据与MIS系统里面的访问权限类似，甚至可以直接沿用MIS系统里面的权限管理模块。因此访问权限元数据是需要自定义的，而不是像实战案例2那样直接取自RSS API。</p><p>那么，获取了元数据之后，如何保存呢？</p><h2>如何保存元数据？</h2><p>一般来说，我们可以使用数据库来保存元数据。因此，我们需要针对元数据的结构来建立对应的元数据表。以下是实战案例2中的元数据表结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/b3/54/b355b523db6855369e3cb70432027c54.jpg?wh=4792x2521\" alt=\"\"></p><p>那么加了访问权限元数据之后应该如何设计表结构呢？这个要简单可以很简单，要复杂可以很复杂。</p><h3>表结构设计</h3><p>我们先看看简单的方式。首先需要在前面的表加一个权限字段。于是表结构就变成了：</p><p><img src=\"https://static001.geekbang.org/resource/image/2e/1e/2e5230140e183cf56e521513d4058b1e.jpg?wh=4823x2546\" alt=\"\"></p><p>之后我们要在权限这一列设置值为readnews，也就是可以阅读新闻的意思。</p><p>然后新建一个用户权限表。这个表只包含两个字段，用户名和权限。</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/3f/b9dba76c50d1c0da4c12980d1d72db3f.jpg?wh=4849x1962\" alt=\"\"></p><p>然后在这个表新增一行，用于存储用户名和对应的权限readnews。</p><p>如果同学们觉得以上这么简单的表结构满足不了你的需求，还有一种复杂些的方法，我们可以参考RBAC来设计表结构。</p><h3>RBAC</h3><p>RBAC是角色基于访问控制的英文缩写。RBAC是一种常见的安全策略，它通过定义角色和权限来管理对资源的访问。</p><p>RBAC 的核心概念包括角色、权限、用户和会话。</p><ol>\n<li>\n<p><strong>角色（Role）</strong>：角色是一组权限的集合，它代表了在组织中执行特定任务所需的访问级别。例如，一个组织可能会有“管理员”“编辑”和“访客”等角色。</p>\n</li>\n<li>\n<p><strong>权限（Permission）</strong>：权限是允许或拒绝执行特定操作的能力。权限可以是查看、编辑、删除或访问特定资源的能力。</p>\n</li>\n<li>\n<p><strong>用户（User）</strong>：用户是系统中的一个实体，可以是个人或系统账户。用户被分配一个或多个角色，通过这些角色获得相应的权限。</p>\n</li>\n<li>\n<p><strong>会话（Session）</strong>：会话是用户登录系统后与系统交互的时间段。在会话期间，用户的权限由其角色决定。</p>\n</li>\n</ol><p>RBAC 的设计通常遵循以下几个步骤：</p><ul>\n<li>\n<p><strong>角色定义</strong>：根据组织的需求和职责，定义不同的角色。每个角色应该清晰地定义其职责范围和所需的权限。</p>\n</li>\n<li>\n<p><strong>权限分配</strong>：为每个角色分配所需的权限。这通常涉及到对资源的访问控制，例如文件、数据库记录或系统功能。</p>\n</li>\n<li>\n<p><strong>用户角色分配</strong>：将用户分配到一个或多个角色。用户通过其角色获得相应的权限。</p>\n</li>\n<li>\n<p><strong>最小权限原则</strong>：确保用户只拥有完成其工作所必需的最小权限集，这有助于减少安全风险。</p>\n</li>\n<li>\n<p><strong>权限审查和更新</strong>：定期审查角色和权限的分配，确保它们仍然符合组织的安全策略和业务需求。根据需要更新角色和权限。</p>\n</li>\n<li>\n<p><strong>会话管理</strong>：管理用户的登录和登出过程，确保在会话期间用户只能访问其角色允许的资源。</p>\n</li>\n</ul><p>RBAC 模型的优势是灵活、可扩展。它允许组织根据变化的业务需求快速调整角色和权限，同时通过集中管理角色和权限简化了安全策略的实施。然而，RBAC 也需要仔细地设计和管理，以避免权限过度集中或不当分配，这可能会导致安全漏洞。</p><p>那么，保存了元数据之后，如何根据元数据检索知识呢？</p><h2>如何根据元数据检索知识？</h2><p>根据元数据检索知识，主要包括两部分主要工作。</p><ol>\n<li>\n<p>根据用户提问判断是否需要检索元数据。</p>\n</li>\n<li>\n<p>根据用户权限在有权限的知识里面检索</p>\n</li>\n</ol><p>例如，用户提问：前天的CNET新闻有哪些？那么系统就应该识别出从CNET新闻表里面按照创建时间和当前用户权限来检索知识。</p><p>那么系统如何识别出应该从CNET新闻表里面按照创建时间和当前用户权限来检索知识呢？</p><p>是直接让系统返回查询的SQL语句吗？这样做不是很稳定，特别是使用免费的、性能较差的大模型。</p><p>这时候，我们就可以使用实战案例1里面的知识点了。我们基于第5节课的代码改造一下。</p><p>我们首先多添加一个序号，从CNET新闻表里面检索知识。</p><p>然后再添加一个示例，当用户提问：</p><pre><code class=\"language-python\">前天的CNET新闻有哪些？\n</code></pre><p>这时应该返回序号、日期。</p><p>修改之后，我们就得到了后面的代码。</p><pre><code class=\"language-python\">def 构造解析用户输入并返回结构化数据用的messages(用户输入):\n&nbsp; messages=[\n&nbsp; {\"role\": \"user\", \"content\": f\"\"\"\n&nbsp; 请根据用户的输入返回json格式结果，除此之外不要返回其他内容。注意，模块部分请按以下选项返回对应序号：\n&nbsp; &nbsp;1. 销售对账\n&nbsp; &nbsp;2. 报价单\n&nbsp; &nbsp;3. 销售订单\n&nbsp; &nbsp;4. 送货单\n&nbsp; &nbsp;5. 退货单\n   6. 从CNET新闻表里面检索知识\n&nbsp; &nbsp;7. 其他\n\n&nbsp; 示例1：\n&nbsp; 用户：客户北京极客邦有限公司的款项到账了多少？\n&nbsp; 系统：\n&nbsp; {{'模块':1,'客户名称':'北京极客邦有限公司'}}\n\n&nbsp; 示例2：\n&nbsp; 用户：你好\n&nbsp; 系统：\n&nbsp; {{'模块':7,'其他数据',None}}\n\n&nbsp; 示例3：\n&nbsp; 用户：最近一年你过得如何？\n&nbsp; 系统：\n&nbsp; {{'模块':7,'其他数据',None}}\n\n&nbsp; 示例4：\n&nbsp; 用户：前天的CNET新闻有哪些？\n&nbsp; 系统：\n&nbsp; {{'模块':6,'日期',-3}}\n\n&nbsp; 用户：{用户输入}\n&nbsp; 系统：\n&nbsp; \"\"\"},\n&nbsp; ]\n&nbsp; return messages\n</code></pre><p>然后，我们再根据系统的回答调用对应的知识检索函数，例如<strong>根据用户和查询条件来检索CNET新闻</strong>函数。</p><p>进行到这里，我们就可以根据元数据来检索知识了。</p><h2>小结</h2><p>好了，今天这一讲到这里就结束了，最后我们来回顾一下。这一讲我们学会了三件事情。</p><p>第一件事情是什么是元数据。元数据是指“数据的数据”，具体包括文章标题、作者、发布日期、访问权限等等。</p><p>第二件事情是如何获取和保存元数据。我们可以通过API等方式获取元数据，然后将元数据保存到数据库里面。一般来说，元数据的表结构都很简单，只是访问权限元数据表结构会复杂一点。</p><p>第三件事情是如何根据元数据检索知识。主要工作有两部分：第一，根据用户提问判断是否需要检索元数据。第二，根据用户权限在有权限的知识里面检索。</p><h2>思考题</h2><p>前面我们添加了一个示例，当用户提问：前天的CNET新闻有哪些？应该返回序号、日期。那么如果用户提问：最近一周的CNET新闻有哪些？这时应该如何处理呢？</p><p>欢迎你在留言区和我交流互动，如果这节课对你有启发，也推荐分享给身边更多朋友。</p>","neighbors":{"left":{"article_title":"08｜ RAG简报助手：打造读报小助手，每天为你节约半小时","id":809066},"right":{"article_title":"10｜概念详解：摘要与翻译，RAG应用的两大利器","id":810048}},"comments":[{"had_liked":false,"id":394602,"user_name":"石云升","can_delete":false,"product_type":"c1","uid":1024195,"ip_address":"广东","ucode":"78F1DD33EFD000","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/c3/c5db35df.jpg","comment_is_top":false,"comment_ctime":1727275635,"is_pvip":false,"replies":[{"id":143531,"content":"没有群哈","user_name":"编辑回复","user_name_real":"编辑","uid":1501385,"ctime":1730455770,"ip_address":"北京","comment_id":394602,"utype":2}],"discussion_count":1,"race_medal":1,"score":2,"product_id":100817901,"comment_content":"课程有群么？","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653232,"discussion_content":"没有群哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1730455770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396529,"user_name":"2918diy","can_delete":false,"product_type":"c1","uid":1318452,"ip_address":"北京","ucode":"8BA845D96167A3","user_header":"","comment_is_top":false,"comment_ctime":1734837276,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"老师您好，想咨询一下，如果是用增加例子的方式，来增强适配性，是不是要穷举所有的情况？这样做，是不是不太可能？有没有更通用的方法？","like_count":0}]}