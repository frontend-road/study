{"id":119988,"title":"13 | 传输协议：应用程序之间对话的语言","content":"<p>你好，我是李玥。</p><p>经过前面几课的学习，我们已经可以实现高性能的结构化数据传输了。不过，应用程序之间要想互相通信，一起配合来实现业务功能，还需要有一套传输协议来支持。</p><p><strong>传输协议就是应用程序之间对话的语言。</strong>设计传输协议，并没有太多规范和要求，只要是通信双方的应用程序都能正确处理这个协议，并且没有歧义就好了。</p><p>这节课，我们就来说一下设计高性能传输协议的一些方法和技巧。</p><h2>如何“断句”？</h2><p>既然传输协议也是一种语言，那么在应用程序之间“通话”的过程中，与我们人类用自然语言沟通有很多相似之处，但是需要处理的问题却又不同。</p><p>现代语言，无论是汉语还是英语，都是通过标点符号来分隔句子的，这个叫“断句”。古代汉语是没有标点符号的，断句全靠上下文，但这种断句方式有的时候会出现歧义，比如很著名的那个段子“下雨天留客天天留我不留”，不同的断句方式，意思完全不一样。</p><p>我们在传输数据的的时候，首先要解决的就是断句问题。对于传输层来说，收到的数据是什么样的？就是一段一段的字节，但是，因为网络的不确定性，你收到的分段并不一定是我们发出去的分段。比如我们发送的数据是这样的：</p><blockquote>\n<p>下雨天  留客天  天留  我不留</p>\n</blockquote><p>这样断句，意思就是，作为主人我不想让你在我这儿住。</p><!-- [[[read_end]]] --><p>经过网络传输，可能就变成这样了:</p><blockquote>\n<p>下雨天  留客天  天留我不  留</p>\n</blockquote><p>意思完全变了，客人想赖在这儿不走了。</p><p>所以，靠时间停顿来断句是不靠谱的。</p><p>你可能会想到，那我们在协议中也加上“标点符号”不就行了？而且，我们并不需要像自然语言中那么多种标点符号，只需要定义一个分隔符就可以了。</p><p>这个办法是可行的，也有很多传输协议采用这种方法，比如HTTP1协议，它的分隔符是换行（\\r\\n）。但是，这个办法有一个问题比较难处理，在自然语言中，标点符号是专用的，它没有别的含义，和文字是有天然区分的。</p><p>在数据传输的过程中，无论你定义什么字符作为分隔符，理论上，它都有可能会在传输的数据中出现。为了区分“数据内的分隔符”和真正的分隔符，你必须得在发送数据阶段，加上分隔符之前，把数据内的分隔符做转义，收到数据之后再转义回来。这是个比较麻烦的过程，还要损失一些性能。</p><p>更加实用的方法是，我们给每句话前面加一个表示这句话长度的数字，收到数据的时候，我们按照长度来读取就可以了。比如：</p><blockquote>\n<p>03下雨天03留客天02天留03我不留</p>\n</blockquote><p>这里面我们固定使用2位数字来存放长度，每句话最长可以支持到99个字。接收后的处理就比较简单了，我们先读取2位数字03，知道接下来的3个字是第一句话，那我们接下来就等着这3个字都收到了，就可以作为第一句话来处理了，接下来再按照这个方法来读第二句话、第三句话。</p><p>这种预置长度的方法就很好解决了断句的问题，并且它实现起来要比分隔符的方法简单很多，性能也更好，是目前普遍采用的一种分隔数据的方法。</p><p>掌握了断句的方法之后，我们再来看一下实现高性能协议还需要解决什么问题。</p><h2>用双工收发协议提升吞吐量</h2><p>人类之间通过语言来交流时，基本上是处于一种单工通信的状态，也就是我说你听，然后再你说我听这样。如果俩人同时说，那就不是交流了，那是两个外国人在吵架。所谓的单工通信就是，任何一个时刻，数据只能单向传输，一个人说的时候，另外一个人只能听。</p><p>HTTP1协议，就是这样一种单工协议，客户端与服务端建立一个连接后，客户端发送一个请求，直到服务端返回响应或者请求超时，这段时间内，这个连接通道上是不能再发送其他请求的。这种单工通信的效率是比较低的，很多浏览器和App为了解决这个问题，只能同时在服务端和客户端之间创建多个连接，这也是没有办法的办法。</p><p>单工通信时，一句对一句，请求和响应是按照顺序依次收发，有一个天然的对应关系。比如说，胡同口张大爷和李大爷俩大爷碰上了：</p><p><img src=\"https://static001.geekbang.org/resource/image/bc/cd/bcbcec4ce8e9120b28b5627e56cb0ccd.jpg?wh=2951*2273\" alt=\"\"></p><p>这个图里面，实线是请求，虚线是响应，一问一答，这是单工协议。</p><p>我们知道，TCP连接它是一个全双工的通道，你可以同时进行数据的双向收发，互相是不会受到任何影响的。要提高吞吐量，应用层的协议也必须支持双工通信。</p><p>如果说俩大爷有边听边说的本事，换成双工协议后，是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/e5/8a6587851a0fbc9fd0e4c9d09357aee5.jpg?wh=3971*1024\" alt=\"\"></p><p>这时候就出现一个问题，即使俩大爷有这个边听边说的本事，问题和答案可能已经对不上了。在多线程并发的环境下，顺序也没有办法保证，这个对话就有可能变成这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/29/46/29d696771575b46258e4d6bd809c8c46.jpg?wh=3971*1035\" alt=\"\"></p><p>在实际上设计协议的时候，我们一般不关心顺序，只要需要确保请求和响应能够正确对应上就可以了。</p><p>这个问题我们可以这样解决：发送请求的时候，给每个请求加一个序号，这个序号在本次会话内保证唯一，然后在响应中带上请求的序号，这样就可以把请求和响应对应上了。</p><p>加上序号后，俩大爷的就可以实现双工通信了：</p><p><img src=\"https://static001.geekbang.org/resource/image/7c/18/7c944db7d136f3b9c027be3e99685f18.jpg?wh=4266*1038\" alt=\"\"></p><p>张大爷和李大爷可以对自己发出去的请求来编号，回复对方响应的时候，带上对方请求的编号就可以了。这样就解决了双工通信的问题。</p><h2>小结</h2><p>这节课我们主要讲了传输协议，在设计传输协议的时候，只要双方应用程序能够识别传输协议，互相交流就可以了，并没有什么一定要遵循的规范。</p><p>在设计传输协议的时候，需要解决如何断句的问题，我们给大家提供了“分隔符”和“前置长度”两种断句的方法，你可以选择使用。</p><p>另外，我给大家介绍的这种“使用ID来标识请求与响应对应关系”的方法，是一种比较通用的实现双工通信的方法，可以有效提升数据传输的吞吐量。</p><p>解决了断句问题，实现了双工通信，配合专用的序列化方法，你就可以实现一套高性能的网络通信协议，实现高性能的进程间通信。很多的消息队列、RPC框架都是用这种方式来实现它们自己的私有应用层传输协议。</p><h2>思考题</h2><p>课后，我希望你能真正动手去写代码，用我们这四节课讲到的方法，来实现一个简单的高性能通信程序。功能就是上面两个大爷那三组对话，服务端是张大爷，客户端是李大爷，我们让俩人在胡同口碰见一百万次，记录下总共的耗时。欢迎你在评论区秀出你的总耗时。</p><p>在实现过程中，有任何问题，也欢迎你在评论区留言来提问。</p><p>感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给你的朋友。</p><p></p>","neighbors":{"left":{"article_title":"12 | 序列化与反序列化：如何通过网络传输结构化的数据？","id":118848},"right":{"article_title":"14 | 内存管理：如何避免内存溢出和频繁的垃圾回收？","id":120949}},"comments":[{"had_liked":false,"id":140456,"user_name":"Switch","can_delete":false,"product_type":"c1","uid":1049360,"ip_address":"","ucode":"D8A7F7F6A0BEA9","user_header":"https://static001.geekbang.org/account/avatar/00/10/03/10/26f9f762.jpg","comment_is_top":false,"comment_ctime":1570949009,"is_pvip":false,"replies":[{"id":"54350","content":"代码结构很清晰，值得大家学习。<br><br>优化的建议：可以采用专用序列化方式，另外，你在做测试的时候有没有关闭控制台的打印输出？这个对性能的影响是很大的。<br>","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1571019197,"ip_address":"","comment_id":140456,"utype":1}],"discussion_count":2,"race_medal":0,"score":"345168332689","product_id":100032301,"comment_content":"用 netty 实现了，使用了多种 序列化方式实现，差异还是很大的。写出来和知道怎么做，差距还是非常大的，当完整的写完练习，确实把老师讲到的这些知识点都串起来了。序列化框架的选型及接口设计、通讯协议设计、编解码设计、 netty 服务端客户端的处理。<br><br>代码在该目录下：https:&#47;&#47;github.com&#47;Switch-vov&#47;mq-learing&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;switchvov&#47;network&#47;chat<br><br>整个实现下来，不同的序列化框架，性能差异还是很大的。用 protostuff 性能是最好的。<br><br>麻烦老师看看，哪些地方还能再优化。<br><br>- fastjson<br>  - 遍历10000次，花费:1400ms<br>  - 遍历100000次，花费:7272ms<br>  - 遍历1000000次，花费:86840ms<br>- protostuff<br>  - 遍历10000次，花费:1224ms<br>  - 遍历100000次，花费:5381ms<br>  - 遍历1000000次，花费:51677ms<br>- kryo<br>  - 遍历10000次，花费:1307ms<br>  - 遍历100000次，花费:6774ms<br>  - 遍历1000000次，花费:102819ms<br>","like_count":80,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470398,"discussion_content":"代码结构很清晰，值得大家学习。\n\n优化的建议：可以采用专用序列化方式，另外，你在做测试的时候有没有关闭控制台的打印输出？这个对性能的影响是很大的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571019197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476323,"avatar":"https://static001.geekbang.org/account/avatar/00/16/86/e3/a31f6869.jpg","nickname":" 尿布","note":"","ucode":"D1C8BDA7540962","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285031,"discussion_content":"学习学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592717781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125745,"user_name":"滴流乱转小胖儿","can_delete":false,"product_type":"c1","uid":1231250,"ip_address":"","ucode":"4689236E65FE4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/c9/92/6361802a.jpg","comment_is_top":false,"comment_ctime":1566257554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"242084426130","product_id":100032301,"comment_content":"没想到老师居然是个相声演员，通俗易懂，点赞","like_count":56},{"had_liked":false,"id":125816,"user_name":"chon","can_delete":false,"product_type":"c1","uid":1068925,"ip_address":"","ucode":"1C32170972F726","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/7d/dd852b04.jpg","comment_is_top":false,"comment_ctime":1566262197,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"91760575413","product_id":100032301,"comment_content":"第一篇的内容质量很高，第二篇的目前这几篇文章的内容实在是太基础了。不用动脑，跳着看","like_count":21,"discussions":[{"author":{"id":1053211,"avatar":"https://static001.geekbang.org/account/avatar/00/10/12/1b/f62722ca.jpg","nickname":"A9","note":"","ucode":"76D07F8EBE8DD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5569,"discussion_content":"要么是基础精通的大神，要么是还没意识到这些理论在中间件中的作用。。","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1566356261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118352,"avatar":"https://static001.geekbang.org/account/avatar/00/11/10/90/5cb92311.jpg","nickname":"麦兜布熊","note":"","ucode":"F46E3571FAE9FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214298,"discussion_content":"非也！对于小白如我非常有用！","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1585176804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130943,"user_name":"晴空","can_delete":false,"product_type":"c1","uid":1621520,"ip_address":"","ucode":"AC9FBDAB66B081","user_header":"","comment_is_top":false,"comment_ctime":1567581562,"is_pvip":false,"replies":[{"id":"49325","content":"需要注意的是，在OSI七层网络协议栈中，tcp协议是四层（传输层）协议，而我们设计的传输协议都是七层（应用层）协议，下层协议对上层来说是透明的。<br><br>通俗的说，tcp包的长度和我们协议中一条消息的长度是完全没有关系的，一个tcp包可能包含n条完整的消息，也可能包含半条消息，或者前后2个半条消息加上中间n条完整的消息，这都是不一定的。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1567648476,"ip_address":"","comment_id":130943,"utype":1}],"discussion_count":3,"race_medal":0,"score":"65992091002","product_id":100032301,"comment_content":"老师请教个问题，tcp协议中已经协商好了最大报文长度，应用协议为什么又要设置一下报文长度呢，期待老师帮忙解惑","like_count":15,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466207,"discussion_content":"需要注意的是，在OSI七层网络协议栈中，tcp协议是四层（传输层）协议，而我们设计的传输协议都是七层（应用层）协议，下层协议对上层来说是透明的。\n\n通俗的说，tcp包的长度和我们协议中一条消息的长度是完全没有关系的，一个tcp包可能包含n条完整的消息，也可能包含半条消息，或者前后2个半条消息加上中间n条完整的消息，这都是不一定的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567648476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285543,"discussion_content":"我理解这样更底层了，对于很多人可能不太有，其实使用类似于netty这种封装成熟的产品，已经解决了 tcp的半包与粘包问题，到程序实际使用已经是一个我们预期的传输格式了。即比如我使用前置长度，我写了10，但是后边并没有10，可能在tcp的下个包里边的这种情况就不用考虑了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592876134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276701,"discussion_content":"读完有类似的疑问，建议题目改成：如何设计一个应用层传输协议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590931172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127087,"user_name":"oldman","can_delete":false,"product_type":"c1","uid":1133711,"ip_address":"","ucode":"6BACE2832B4429","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/8f/a90b3969.jpg","comment_is_top":false,"comment_ctime":1566551816,"is_pvip":false,"replies":[{"id":"47065","content":"是这样的。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566609878,"ip_address":"","comment_id":127087,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53106159368","product_id":100032301,"comment_content":"老师，我理解的双工通信，是不是说不管是客户端还是服务端建立好链接之后，双方都可以基于该socket进行收发消息就好了，而不是说服务器只能accept到message之后再做一些处理。","like_count":12,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464317,"discussion_content":"是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566609878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125855,"user_name":"知己逢知遇","can_delete":false,"product_type":"c1","uid":1110099,"ip_address":"","ucode":"DF6CB900727019","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/53/2a3a7897.jpg","comment_is_top":false,"comment_ctime":1566265255,"is_pvip":false,"replies":[{"id":"46240","content":"你需要了解，协议是分层的，就像我们发快递，我发给你的可能是个手机，对于快递小哥来说，这就是个小包裹，他不关心里面是什么，总之我保证给你把包裹安全的送到站点儿就行了。包裹到了站点儿会分拣装箱，然后用小货车运到机场，对于小货车司机来说，它也不关心车里装的是什么，只要把车安全开到机场就行了。<br><br>对于协议来说已是这样在发送的时候一层一层的封装，然后接收的时候再一层一层解封，对于每一层协议来说，他是不知道底层是什么协议的，也不知道上层协议是如何封装的（送件的快递小哥不知道也不关心这个件是怎么到配送站的，也不知道包裹里到底装的啥），只在自己的协议层完成处理即可。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566267389,"ip_address":"","comment_id":125855,"utype":1}],"discussion_count":2,"race_medal":0,"score":"53105872807","product_id":100032301,"comment_content":"多线程下异步处理一次会话的结果消息体，除了对这次会话的结果消息进行编号，是否也要对分割的消息体进行顺序编号？<br>电驴，迅雷，p2p这种软件的消息协议大概是什么样的呢？是不是部分协议跟今天老师讲的情况类似？<br>我是不是可以理解为，在双全功下，我和一个网站就可以建立一条长链接，然后所有的资源请求都通过这条链接进行交换，只要协议正确，就可以保证数据的完整性，正常访问并解析打开的该网站的所有页面。<br>多线程，异步的io操作，是不是也有自己的协议？","like_count":12,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463721,"discussion_content":"你需要了解，协议是分层的，就像我们发快递，我发给你的可能是个手机，对于快递小哥来说，这就是个小包裹，他不关心里面是什么，总之我保证给你把包裹安全的送到站点儿就行了。包裹到了站点儿会分拣装箱，然后用小货车运到机场，对于小货车司机来说，它也不关心车里装的是什么，只要把车安全开到机场就行了。\n\n对于协议来说已是这样在发送的时候一层一层的封装，然后接收的时候再一层一层解封，对于每一层协议来说，他是不知道底层是什么协议的，也不知道上层协议是如何封装的（送件的快递小哥不知道也不关心这个件是怎么到配送站的，也不知道包裹里到底装的啥），只在自己的协议层完成处理即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566267389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553640,"discussion_content":"关于HTTP长连接可以学习下 李兵老师的《浏览器工作原理与实践》三个章节详细说明：https://time.geekbang.org/column/article/147501","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646012468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126031,"user_name":"刘天鹏","can_delete":false,"product_type":"c1","uid":1632015,"ip_address":"","ucode":"FB146250578911","user_header":"https://static001.geekbang.org/account/avatar/00/18/e7/0f/fa840c1b.jpg","comment_is_top":false,"comment_ctime":1566297033,"is_pvip":false,"replies":[{"id":"46508","content":"赞分享代码的同学👍👍👍","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566351014,"ip_address":"","comment_id":126031,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48810937289","product_id":100032301,"comment_content":"https:&#47;&#47;gist.github.com&#47;liutianpeng&#47;85ce524452c8206396c94ab93506deda<br>一个&quot;胡同&quot;做中转   两个&quot;大爷&quot;TCP连接到胡同<br>我这个版本的胡同效率有点低 大爷相遇1万次就用了 3.8s","like_count":11,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463794,"discussion_content":"赞分享代码的同学👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566351014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125921,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566272131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35926010499","product_id":100032301,"comment_content":"跟着老师把这些基础知识打牢，很喜欢老师这种讲课节奏。","like_count":8},{"had_liked":false,"id":140648,"user_name":"Switch","can_delete":false,"product_type":"c1","uid":1049360,"ip_address":"","ucode":"D8A7F7F6A0BEA9","user_header":"https://static001.geekbang.org/account/avatar/00/10/03/10/26f9f762.jpg","comment_is_top":false,"comment_ctime":1571021214,"is_pvip":false,"replies":[{"id":"54390","content":"可以参考一下加餐这节课中的序列化代码。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1571034290,"ip_address":"","comment_id":140648,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27340824990","product_id":100032301,"comment_content":"看了加餐之后，重构了下执行逻辑。更改一问一答交互为 主客户端同时发送消息。主客户端根据消息类型答复相应内容。<br><br>另外，老师，专用化序列方式在哪能找到借鉴的地方呢？<br><br>是的，没关闭输出。关闭输出后，重新测试后的结果如下：<br><br>- 关闭打印<br>  - fastjson<br>    - 遍历10000次，花费:555ms<br>    - 遍历100000次，花费:2740ms<br>    - 遍历1000000次，花费:28418ms<br>  - protostuff<br>    - 遍历10000次，花费:440ms<br>    - 遍历100000次，花费:2599ms<br>    - 遍历1000000次，花费:23991ms<br>  - kryo<br>    - 遍历10000次，花费:522ms<br>    - 遍历100000次，花费:2805ms<br>    - 遍历1000000次，花费:28130ms<br>- 没关闭打印<br>  - fastjson<br>    - 遍历10000次，花费:1400ms<br>    - 遍历100000次，花费:7272ms<br>    - 遍历1000000次，花费:86840ms<br>  - protostuff<br>    - 遍历10000次，花费:1224ms<br>    - 遍历100000次，花费:5381ms<br>    - 遍历1000000次，花费:51677ms<br>  - kryo<br>    - 遍历10000次，花费:1307ms<br>    - 遍历100000次，花费:6774ms<br>    - 遍历1000000次，花费:102819ms<br><br>老师加餐中给的示例代码，在我电脑上 10W 次，在 [8,12]s 这个区间<br><br>代码在该目录下：https:&#47;&#47;github.com&#47;Switch-vov&#47;mq-learing&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;switchvov&#47;network&#47;chat","like_count":6,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470491,"discussion_content":"可以参考一下加餐这节课中的序列化代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571034290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1495405,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJiaqmSyTArAd2iaf5xF5PZBxDoFGknLqQ8SyJAIdBEaYRDLg3ExdPLvjqjTbduefRW7vklA9t4JySQ/132","nickname":"lv_xinrong","note":"","ucode":"6D2E9177D2C7CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264375,"discussion_content":"哇，你的电脑什么配置呀，相同代码在我本地，protocol buffer 10000次居然需要2777ms，完全不是一个数量级","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589299362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1125013,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/95/00a48d61.jpg","nickname":"好好学习","note":"","ucode":"E9AFEB1C451BE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42980,"discussion_content":"Hadoop 的 Avro，Google的Protocol Buffers， Facebook的Thrift 这些都比较成熟了，可以参考一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572837347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126071,"user_name":"A9","can_delete":false,"product_type":"c1","uid":1053211,"ip_address":"","ucode":"76D07F8EBE8DD0","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/1b/f62722ca.jpg","comment_is_top":false,"comment_ctime":1566305908,"is_pvip":false,"replies":[{"id":"46512","content":"同学当然是你最快呀！😏","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566351398,"ip_address":"","comment_id":126071,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23041142388","product_id":100032301,"comment_content":"看了直播，没想到老师你是这样的人 所以，到底谁快？","like_count":5,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463813,"discussion_content":"同学当然是你最快呀！😏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566351398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125932,"user_name":"learn more","can_delete":false,"product_type":"c1","uid":1128702,"ip_address":"","ucode":"0EF628B2E0F95E","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/fe/00ddeb81.jpg","comment_is_top":false,"comment_ctime":1566276369,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23041112849","product_id":100032301,"comment_content":"redis 的 aof 文件好像就是老师说的 前置长度，瞬间觉得经典无处不在","like_count":5,"discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372571,"discussion_content":"JVM的常量池也用了这样的设计","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1620380066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575715,"discussion_content":"什么意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655047817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":372571,"ip_address":""},"score":575715,"extra":""}]}]},{"had_liked":false,"id":126527,"user_name":"大白先生","can_delete":false,"product_type":"c1","uid":1615335,"ip_address":"","ucode":"7EF709EF8FFE6B","user_header":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","comment_is_top":false,"comment_ctime":1566401204,"is_pvip":false,"replies":[{"id":"46823","content":"开头是数据长度，序号也是数据的一部分，所以应该在长度之后。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566436160,"ip_address":"","comment_id":126527,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18746270388","product_id":100032301,"comment_content":"老师，那在一次会话过程中，开头的先是唯一序列号么。然后后面跟的是数据长度，再然后是内容么。那接到消息的一方，该如何分辨序列号的长度大小，做到区分序列号和内容前的数据长度信息？","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464037,"discussion_content":"开头是数据长度，序号也是数据的一部分，所以应该在长度之后。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566436160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372570,"discussion_content":"实操中协议长度还可以做向下兼容 期待老师后续点出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620380048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212959,"user_name":"花子翁","can_delete":false,"product_type":"c1","uid":1073674,"ip_address":"","ucode":"A687441DC6894F","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/0a/26d00cb9.jpg","comment_is_top":false,"comment_ctime":1588248247,"is_pvip":false,"replies":[{"id":"79193","content":"只要数据没有在传输途中被篡改，预设长度断句就总是有效的。<br><br>比如，我们约定长度为int类型，占4个字节。从连接建立开始，收到的一个4个字节，一定是第一句的长度。每读取一句之后，接下来的4个字节，一定是下一句的长度，以此类推。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1588513984,"ip_address":"","comment_id":212959,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14473150135","product_id":100032301,"comment_content":"通过预设长度的方式来断句，不会出现分隔符同样的问题吗？<br>因为预设长度的信息，理论上也会同样出现在数据内容本身，那如何进行区分呢？","like_count":3,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493657,"discussion_content":"只要数据没有在传输途中被篡改，预设长度断句就总是有效的。\n\n比如，我们约定长度为int类型，占4个字节。从连接建立开始，收到的一个4个字节，一定是第一句的长度。每读取一句之后，接下来的4个字节，一定是下一句的长度，以此类推。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588513984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073674,"avatar":"https://static001.geekbang.org/account/avatar/00/10/62/0a/26d00cb9.jpg","nickname":"花子翁","note":"","ucode":"A687441DC6894F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257501,"discussion_content":"对的，谢谢🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588578881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128024,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1566822274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14451724162","product_id":100032301,"comment_content":"京味十足，😄","like_count":3},{"had_liked":false,"id":125781,"user_name":"冰激凌的眼泪","can_delete":false,"product_type":"c1","uid":1087945,"ip_address":"","ucode":"5DCB974667E93A","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","comment_is_top":false,"comment_ctime":1566260583,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14451162471","product_id":100032301,"comment_content":"看到过tlv的说法: tag length value","like_count":3,"discussions":[{"author":{"id":1204168,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5f/c8/13aa8aa9.jpg","nickname":"night","note":"","ucode":"03B3C955092C03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531522,"discussion_content":"更正下是 TLV 不是 TIV","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637328659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204168,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5f/c8/13aa8aa9.jpg","nickname":"night","note":"","ucode":"03B3C955092C03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531521,"discussion_content":"长知识了；顺手搜了一下，还有这些：\n1. T.l.V（t tag/type 都可以, via wikipedia）, 比较紧凑且灵活，比较典型的如 JVM 的 class 文件\n2. Predefined Static Fields，典型的如 TCP 协议\n3. Text-based Field-Value Pairs，典型的如 HTTP协议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637328629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061786,"avatar":"https://static001.geekbang.org/account/avatar/00/10/33/9a/a323b2f1.jpg","nickname":"悠悠小竹子","note":"","ucode":"A5E6731D28EBF9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248374,"discussion_content":"tlv是Type  length value","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587866333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126374,"user_name":"宋晓明","can_delete":false,"product_type":"c1","uid":1146507,"ip_address":"","ucode":"DC866DCE2FBA9E","user_header":"https://static001.geekbang.org/account/avatar/00/11/7e/8b/3cc461b3.jpg","comment_is_top":false,"comment_ctime":1566374608,"is_pvip":false,"replies":[{"id":"46818","content":"跟语言关系不大，其实各种编程语言背后的实现原理都是差不多的。一般的大厂的架构师职位对语言也没有强要求，而且很多架构师都是掌握多门编程语言的。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566435223,"ip_address":"","comment_id":126374,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10156309200","product_id":100032301,"comment_content":"老师，昨天您的直播我看了 但心中一直有个疑问：一般架构师coding能力非常强，尤其是java，现在很多招聘要求都是java架构师，目前本人擅长的语言是python和go，说实话 java虽好，但本人很不喜欢，是不是我与架构师就无缘了？？","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463959,"discussion_content":"跟语言关系不大，其实各种编程语言背后的实现原理都是差不多的。一般的大厂的架构师职位对语言也没有强要求，而且很多架构师都是掌握多门编程语言的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566435223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313480,"user_name":"宓雪","can_delete":false,"product_type":"c1","uid":1359193,"ip_address":"","ucode":"C4698B46C636C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/bd/59/d95ef2c0.jpg","comment_is_top":false,"comment_ctime":1632457058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5927424354","product_id":100032301,"comment_content":"https:&#47;&#47;github.com&#47;welmei&#47;nio-demo. 基于Java NIO 实现的","like_count":1},{"had_liked":false,"id":136602,"user_name":"花里胡哨","can_delete":false,"product_type":"c1","uid":1199058,"ip_address":"","ucode":"F4CDCFF71DDDB6","user_header":"https://static001.geekbang.org/account/avatar/00/12/4b/d2/be5887d0.jpg","comment_is_top":false,"comment_ctime":1569479635,"is_pvip":false,"replies":[{"id":"52398","content":"👍👍👍","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1569495634,"ip_address":"","comment_id":136602,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5864446931","product_id":100032301,"comment_content":"https:&#47;&#47;gist.github.com&#47;mrpanc&#47;de206c835abb6a5e9b78c6555b46976d 交一波作业。同步模式，10万次7.463167328s","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468719,"discussion_content":"👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569495634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126748,"user_name":"coffee","can_delete":false,"product_type":"c1","uid":1391640,"ip_address":"","ucode":"DF831C481B7949","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/vK7WwQG23CI29w0iamcgetTicMdQ8NsJsQWSXIia3aSUbVE6dqfTiaVtqTdibJu31f7k2BkOSkQianxOUaqojEYP6ic3w/132","comment_is_top":false,"comment_ctime":1566463625,"is_pvip":false,"replies":[{"id":"46932","content":"协议部分设计的非常好。<br>Netty的使用也非常熟练。<br>使用了8组连接并发，实际的性能要除以8哦。<br>这是单工通信还是双工通信呢？<br><br>最后，使用减号开头的项目名称对*nix用户严重不友好啊。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566522777,"ip_address":"","comment_id":126748,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5861430921","product_id":100032301,"comment_content":"代码见 git@github.com:swgithub1006&#47;-geektime-mqstudy.git ,采用netty实现。<br>机器是4核，server 端 bossGroup = new NioEventLoopGroup(8); workerGroup = new NioEventLoopGroup(1);  client端有8个channel.机器上同时跑server和client。以下是相遇次数和执行耗时。<br>相遇次数        执行耗时（秒）<br>10000               2<br>100000             5<br>1000000           不稳定（min 65 , max 100)","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464147,"discussion_content":"协议部分设计的非常好。\nNetty的使用也非常熟练。\n使用了8组连接并发，实际的性能要除以8哦。\n这是单工通信还是双工通信呢？\n\n最后，使用减号开头的项目名称对*nix用户严重不友好啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566522777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391640,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/vK7WwQG23CI29w0iamcgetTicMdQ8NsJsQWSXIia3aSUbVE6dqfTiaVtqTdibJu31f7k2BkOSkQianxOUaqojEYP6ic3w/132","nickname":"coffee","note":"","ucode":"DF831C481B7949","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5883,"discussion_content":"谢谢老师的谬赞和宝贵的意见。项目名称已修改。老师这里指的双工通信意思是用哪个channel发的就用哪个channel回消息嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566525057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126713,"user_name":"奇奇","can_delete":false,"product_type":"c1","uid":1399097,"ip_address":"","ucode":"BC86B0CB55E35A","user_header":"","comment_is_top":false,"comment_ctime":1566456729,"is_pvip":true,"replies":[{"id":"46926","content":"一般来说，只要请求和响应能对上就可以了，在网络上传输的这些请求和响应，并不需要严格有序。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566522100,"ip_address":"","comment_id":126713,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5861424025","product_id":100032301,"comment_content":"如果发送网络时序出现问题，怎么办？","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464132,"discussion_content":"一般来说，只要请求和响应能对上就可以了，在网络上传输的这些请求和响应，并不需要严格有序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566522100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372572,"discussion_content":"如果不要求因果一致性 那么人为故意乱序实际上可以提升吞吐量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620380133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126432,"user_name":"A9","can_delete":false,"product_type":"c1","uid":1053211,"ip_address":"","ucode":"76D07F8EBE8DD0","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/1b/f62722ca.jpg","comment_is_top":false,"comment_ctime":1566386498,"is_pvip":false,"replies":[{"id":"46821","content":"可以考虑用Barrier或者更简单的CountDownLatch来解决你的问题。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566435918,"ip_address":"","comment_id":126432,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861353794","product_id":100032301,"comment_content":"https:&#47;&#47;github.com&#47;WangYangA9&#47;netty-FullDuplex-example 作业写完啦，大概时长5秒左右，有待优化，使用netty框架，协议使用Kryo序列化协议（类似上面的例子，4字节表示数据长度，后续记录对应长度数据）。<br>为了模拟真实的顺序相应，做了很多同步等待，包括每次tcp连接的断开也进行了同步。<br>客户端什么时候断开连接稍微想了一下。开始的时候，由于消息没收完就断开了连接导致报错。最后实现方案是，收到三条该收的信息后，断开连接。但是这样的代价是，没找到ChannelFuture有类似then的毁掉方法，addListener反而导致性能下降，因此选择同步等待后，再将任务状态置为true，这些等待应该是可以后续优化的点。<br>请问老师，用什么方式判断一次碰面的3次收发都结束了比较好呢？","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463983,"discussion_content":"可以考虑用Barrier或者更简单的CountDownLatch来解决你的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566435918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125918,"user_name":"linqw","can_delete":false,"product_type":"c1","uid":1134138,"ip_address":"","ucode":"09DCFE98C54DD8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/3a/86196508.jpg","comment_is_top":false,"comment_ctime":1566271679,"is_pvip":false,"replies":[{"id":"46502","content":"是需要等待的，如果你使用Netty，这个问题Netty会帮你处理好。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566349973,"ip_address":"","comment_id":125918,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861238975","product_id":100032301,"comment_content":"课后习题用netty做，耗时大致3秒左右，使用LengthFieldBasedFrameDecoder。<br>学习完这篇也写下自己的理解，字节流就像流水，为此我们在接收和发送字节流的时候，需要对此进行编码和解码，常见的几种形式1、定长，比如指定固定的长度，解析的时候获取固定的长度为一个完整的语句2、分隔符，比如在发送时，对字节流中使用分隔符分隔完整的语句。3、最常用的一种就是在发送的字节流中，有固定的字节表示长度<br>有个疑问，在接收的过程中接收到半包，如何处理了，等待剩余的接收完成么？老师帮忙解答下哦","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463750,"discussion_content":"是需要等待的，如果你使用Netty，这个问题Netty会帮你处理好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566349973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125768,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1566259771,"is_pvip":false,"replies":[{"id":"46229","content":"网络协议是分层的，这里我们讨论的是最上层的应用层。<br><br>半双工应该是更底层协议涉及到的。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566265612,"ip_address":"","comment_id":125768,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5861227067","product_id":100032301,"comment_content":"     网络传输模式好像不止老师说的：单工和全双工吧😄<br>     记得当时联通的供应商时就要测半双工模式：半双工模式下又会是如何？是否半双工模式不能使用或者有问题？消息队列是否网络这块只适应全双工模式？单工模式我印象里现在是很少了-至少金融业不多。<br>     发现消息队列要掌握的知识还是蛮全面：编程、系统、网络。","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463689,"discussion_content":"网络协议是分层的，这里我们讨论的是最上层的应用层。\n\n半双工应该是更底层协议涉及到的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566265612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053498,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/3a/b0454322.jpg","nickname":"Eric","note":"","ucode":"59752A51A382A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208451,"discussion_content":"这些通用呀，只是应用层协议不一样，剩下的底层原理都一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584544700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125746,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1566257647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5861224943","product_id":100032301,"comment_content":"继续 打卡","like_count":1},{"had_liked":false,"id":357647,"user_name":"Geek_e214d6","can_delete":false,"product_type":"c1","uid":3009529,"ip_address":"广东","ucode":"7D0E5E40A04385","user_header":"","comment_is_top":false,"comment_ctime":1663515400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663515400","product_id":100032301,"comment_content":"前置长度方法，如果数据包含数字呢","like_count":0},{"had_liked":false,"id":293705,"user_name":"郑泽洲","can_delete":false,"product_type":"c1","uid":1447496,"ip_address":"","ucode":"EA1B540A040875","user_header":"https://static001.geekbang.org/account/avatar/00/16/16/48/01567df1.jpg","comment_is_top":false,"comment_ctime":1621500070,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1621500070","product_id":100032301,"comment_content":"咬文嚼字一下：老师说的单工应该是半双工，单工是单向的传输，比如监视器，电视信号传输。单工，半双工，全双工，就像是单行道，只有一车道的桥（会车时要错开时间），双车道的桥（上下行可以同时过桥）","like_count":0},{"had_liked":false,"id":291463,"user_name":"study的程序员","can_delete":false,"product_type":"c1","uid":1023101,"ip_address":"","ucode":"E5AE9037D24429","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","comment_is_top":false,"comment_ctime":1620296160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620296160","product_id":100032301,"comment_content":"文章中的单工例子不应该是半双工吗？","like_count":0},{"had_liked":false,"id":289010,"user_name":"良记","can_delete":false,"product_type":"c1","uid":1033503,"ip_address":"","ucode":"F78CC56BB32D8F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/1f/485fcff9.jpg","comment_is_top":false,"comment_ctime":1618818896,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618818896","product_id":100032301,"comment_content":"老师这两个大爷的例子非常具体！","like_count":0},{"had_liked":false,"id":275859,"user_name":"木心","can_delete":false,"product_type":"c1","uid":1043293,"ip_address":"","ucode":"538A3B9B214BF7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/5d/2467ad6c.jpg","comment_is_top":false,"comment_ctime":1611709297,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611709297","product_id":100032301,"comment_content":"不错","like_count":0},{"had_liked":false,"id":249485,"user_name":"robin","can_delete":false,"product_type":"c1","uid":2070605,"ip_address":"","ucode":"F6781BD9AE50D7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsOFgxUeol70AodxHp7XuWobWKibpRXf8I3B9GkvfoTmUcdxpH0tpA8hoMCGnb9HxEy11QalviafDg/132","comment_is_top":false,"comment_ctime":1600671915,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600671915","product_id":100032301,"comment_content":"传输协议需要解决的问题：<br>1. 如何断句（添加分隔符；设置字段的长度）<br>2. 如何将请求和响应对应（通过id）","like_count":0},{"had_liked":false,"id":245024,"user_name":"Vicent🍀","can_delete":false,"product_type":"c1","uid":1589894,"ip_address":"","ucode":"70AEA72A0B6F0E","user_header":"https://static001.geekbang.org/account/avatar/00/18/42/86/6b2e81ba.jpg","comment_is_top":false,"comment_ctime":1598785912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598785912","product_id":100032301,"comment_content":"能明白，这节课的作业是想让大家学会进行信息的收发、信息编码、和双工通讯，但对于课后作业的场景和处理方式有些疑惑；主要是在业务时序性和对应实现。假设每次碰面的需要重新建立一个连接，在同一个连接里，只能实现三次消息的收发，对应三组”一问一答“；如果这里使用双工通讯，会不会存在第一组问答还没结束，就开始了未来的对话（三组对话间是否有时序要求）。第二个”问答“的操作应该是要在第一组”问答完成后“发起。 <br>我的理解是，如果按照现实中场景，是用不到双工操作的，因为大爷只有一对儿。这里的双工可以模拟假设，在多个空间中同时存在”多对“张大爷和李大爷；他们在同一时刻开始”沟通“；这个时候就可以使用双工，边发边收；或者是大爷的间的三组”问答“之间不存在逻辑性。","like_count":0},{"had_liked":false,"id":234889,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1594820107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594820107","product_id":100032301,"comment_content":"应用协议设计<br>1. 格式：分隔符，tlv<br>2. 方式：单工，双工<br>3. 协议：tcp，udp","like_count":0},{"had_liked":false,"id":230949,"user_name":"朱月俊","can_delete":false,"product_type":"c1","uid":1017707,"ip_address":"","ucode":"4DA0728B862FBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","comment_is_top":false,"comment_ctime":1593529135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593529135","product_id":100032301,"comment_content":"思路先行。<br>1.通过异步框架确保一个端发数据，序列化不受io影响；<br>2.对比不同的序列化和反序列化；<br>3.给每个请求和答复打上编号，确保对应上。<br><br>性能预估，假设本机通信，20个核，内存无限。<br>一个端发100万条信息，包括主动问候以及被动答复；<br>一个端收100万条信息，包括答复以及问答。<br>因为是本机跑，网络开销忽略不计。<br>同时有20个核并行跑，因此实际实际消耗需要除以20，即发5万条，收5万条。<br><br>只要计算发一条数据的开销以及收一条数据的开销即可预估整体结果。也是一个阈值，或者最优结果。","like_count":0},{"had_liked":false,"id":148951,"user_name":"亚洲舞王.尼古拉斯赵四","can_delete":false,"product_type":"c1","uid":1443078,"ip_address":"","ucode":"7159F5D7232696","user_header":"https://static001.geekbang.org/account/avatar/00/16/05/06/f5979d65.jpg","comment_is_top":false,"comment_ctime":1573116927,"is_pvip":false,"replies":[{"id":"57589","content":"不一定非得用netty，使用的语言也不是只能用Java，我在后面《加餐 | JMQ的Broker是如何异步处理消息的？》这节课中，对这个作业，给出了一个用Golang的参考实现，你可以看一下。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1573347149,"ip_address":"","comment_id":148951,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573116927","product_id":100032301,"comment_content":"老师，因为不是很懂java socket编程，所以想问一下，如果是java实现的话，这个作业是一定用socket或者netty才能写吗？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473684,"discussion_content":"不一定非得用netty，使用的语言也不是只能用Java，我在后面《加餐 | JMQ的Broker是如何异步处理消息的？》这节课中，对这个作业，给出了一个用Golang的参考实现，你可以看一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573347149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134854,"user_name":"花里胡哨","can_delete":false,"product_type":"c1","uid":1199058,"ip_address":"","ucode":"F4CDCFF71DDDB6","user_header":"https://static001.geekbang.org/account/avatar/00/12/4b/d2/be5887d0.jpg","comment_is_top":false,"comment_ctime":1568942925,"is_pvip":false,"replies":[{"id":"51844","content":"就我们这个题来说，不可以的。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1569024765,"ip_address":"","comment_id":134854,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568942925","product_id":100032301,"comment_content":"老师，请问三个消息是否可以合并到一个请求里面呢？在通信的时候增加一个消息数量，服务端就可以正确解包，然后批量回复了。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467928,"discussion_content":"就我们这个题来说，不可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569024765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130105,"user_name":"颖儿","can_delete":false,"product_type":"c1","uid":1518884,"ip_address":"","ucode":"585FEBCBE0B5A6","user_header":"https://static001.geekbang.org/account/avatar/00/17/2d/24/797bec43.jpg","comment_is_top":false,"comment_ctime":1567386859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567386859","product_id":100032301,"comment_content":"老师的课程很生动 为老师打call","like_count":0},{"had_liked":false,"id":127116,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1566557920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566557920","product_id":100032301,"comment_content":"打卡，已经习惯打卡<br>这节明白没问题，不过给我的感受是还是基础最重要。<br>如果计算机组成原理、操作系统原理、计算机网络原理、数据结构与算法、编译原理这几门课我的基础打的更牢靠一些，极客时间的一些课程就不用买了，至少有些课程听起来就简单多啦!<br>这些基础知识才是构建计算机知识大厦的根基。<br>总是，感谢玥哥的分享，突然想到为啥公司内部JMQ分享没听过你的呢？","like_count":0},{"had_liked":false,"id":126714,"user_name":"奇奇","can_delete":false,"product_type":"c1","uid":1399097,"ip_address":"","ucode":"BC86B0CB55E35A","user_header":"","comment_is_top":false,"comment_ctime":1566456750,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1566456750","product_id":100032301,"comment_content":"03  然后天留我先到达 这不就完了？","like_count":0},{"had_liked":false,"id":126192,"user_name":"nimil","can_delete":false,"product_type":"c1","uid":1197925,"ip_address":"","ucode":"19933068972746","user_header":"https://static001.geekbang.org/account/avatar/00/12/47/65/cce8eb34.jpg","comment_is_top":false,"comment_ctime":1566348121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566348121","product_id":100032301,"comment_content":"赞👍，通俗易懂","like_count":0},{"had_liked":false,"id":125995,"user_name":"朱振光","can_delete":false,"product_type":"c1","uid":1622591,"ip_address":"","ucode":"132631BA843436","user_header":"https://static001.geekbang.org/account/avatar/00/18/c2/3f/42fc8939.jpg","comment_is_top":false,"comment_ctime":1566290631,"is_pvip":false,"replies":[{"id":"46504","content":"你可以想一下最好自己实现一下接收数据进行解析的代码，你就会明白，前置长度是不需要转义的。<br><br>因为在解析的时候，可以明确的知道当前读到的这个位置应该是长度还是真正的数据，它是不需要根据数据流中的内容来确定的。","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566350757,"ip_address":"","comment_id":125995,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566290631","product_id":100032301,"comment_content":"前置长度是不是也有类似的问题，03也可能是正常文字里的内容，也是需要转义吧","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463780,"discussion_content":"你可以想一下最好自己实现一下接收数据进行解析的代码，你就会明白，前置长度是不需要转义的。\n\n因为在解析的时候，可以明确的知道当前读到的这个位置应该是长度还是真正的数据，它是不需要根据数据流中的内容来确定的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566350757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125858,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1566265677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566265677","product_id":100032301,"comment_content":"这节的重点是实现","like_count":0},{"had_liked":false,"id":125783,"user_name":"oscarwin","can_delete":false,"product_type":"c1","uid":1131956,"ip_address":"","ucode":"492430BA342593","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/b4/ec66d499.jpg","comment_is_top":false,"comment_ctime":1566260669,"is_pvip":false,"replies":[{"id":"46232","content":"可以认为，序列化和断句都是协议的一部分。<br><br>","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566265748,"ip_address":"","comment_id":125783,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566260669","product_id":100032301,"comment_content":"老师，我有点混了，在序列化和反序列化一课中用了前缀标示长度的方法来进行序列化，和这里传输协议用前缀断句两个是一个东西吗？如果不是那么序列化和传输协议又是怎么配合来使用的呢？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463692,"discussion_content":"可以认为，序列化和断句都是协议的一部分。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566265748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125780,"user_name":"oscarwin","can_delete":false,"product_type":"c1","uid":1131956,"ip_address":"","ucode":"492430BA342593","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/b4/ec66d499.jpg","comment_is_top":false,"comment_ctime":1566260388,"is_pvip":false,"replies":[{"id":"46230","content":"说出你的疑惑在哪儿？","user_name":"作者回复","user_name_real":"李玥","uid":"1501046","ctime":1566265629,"ip_address":"","comment_id":125780,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566260388","product_id":100032301,"comment_content":"老师，我有点迷糊了，在序列化化和反序列化","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463691,"discussion_content":"说出你的疑惑在哪儿？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566265629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}