{"id":563756,"title":"07｜组件样式：聊聊CSS-in-JS的特点和典型使用场景","content":"<p>你好，我是宋一玮，欢迎回到React组件的学习。</p><p>上节课我们稍微深入了解了React组件的渲染机制，讲到虚拟DOM是真实DOM的抽象，React开发者通过JSX等API声明组件树，React内部则会生成对应的虚拟DOM；组件props、state、context有变化时会触发协调过程，通过Diffing算法比对新旧虚拟DOM，最终只针对差异部分调用DOM API改变页面。</p><p>这节课我们来学习一项比较轻松的内容：<strong>组件样式</strong>。Web前端需要CSS来定义样式，应用拆分成组件后，CSS也需要组件化。</p><p>在 <code>oh-my-kanban</code> 项目中，你已经见识到了在JS（JSX）文件中导入CSS文件，你可能会好奇，一个JSX文件对应一个CSS文件，这不就是CSS的组件化了吗？其实这还远不够。CSS与JS天生就是异构的，对于React的组件层次结构，CSS很难做到一一对应。此外，不同组件中样式的隔离也是必须的。</p><p>那么我们就有下面这些问题需要解决：</p><ul>\n<li>如何为React组件定义样式，才能做到样式与组件的共生？</li>\n<li>如何防止不同组件的CSS互相影响？</li>\n<li>如何在CSS里使用props或state值？</li>\n</ul><p>前端尤其是React社区，先后推出了许多CSS-in-JS框架来解决这些问题。在这节课我会以流行度较高的 <code>emotion</code> 为例，介绍CSS-in-JS的特点和使用中的注意事项。</p><!-- [[[read_end]]] --><h2>什么是CSS-in-JS？</h2><p>CSS从一开始就是Web技术的三驾马车之一，与HTML和JS平起平坐，也和后者一样因为浏览器兼容性问题薅掉了老中青三代程序员的头发。近年来CSS越来越标准化，功能也越来越强，实乃前端开发者之幸。</p><p>你可能要问了，既然CSS这么好，那为什么还要JS帮它？还要有CSS-in-JS这类技术？</p><p>这是个好问题，说白了，<strong>领域不同</strong>，<strong>CSS</strong>（截止到目前标准化的）<strong>尚不具备现代前端组件化开发所需要的部分领域知识和能力，所以需要其他技术来补足</strong>。这些知识和能力主要包括四个方面：</p><ul>\n<li>组件样式的作用域需要控制在组件级别；</li>\n<li>组件样式与组件需要在源码和构建层面建立更强的关联；</li>\n<li>组件样式需要响应组件数据变化；</li>\n<li>组件样式需要有以组件为单位的复用和扩展能力。</li>\n</ul><p>这四点能力待会儿会详细介绍。而这里提到的“其他技术”基本就在指JS了，<code>CSS-in-JS</code> 就是这样一种JS技术，它扛起了补足CSS组件化能力的重任。</p><p>从字面上看，CSS-in-JS就是在JS里写CSS，反过来说CSS需要JS才能起作用。原生的JS操作CSS无外乎下面五种方式：</p><ol>\n<li>通过DOM API设置元素的 <code>style</code> 属性，为元素加入内联（Inline）样式；</li>\n<li>通过DOM API设置元素的 <code>className</code> 属性，为元素关联现有的类（Class）样式；</li>\n<li>通过DOM API在页面文档中动态插入包含CSS规则文本的 <code>&lt;style&gt;</code> 标签；</li>\n<li>第3条的变体：通过CSSOM的 <code>CSSStyleSheet</code> 对象动态修改页面中的CSS规则；</li>\n<li>非运行时方案：在编译阶段把JS中的CSS通过AST（Abstract Syntax Tree，抽象语法树）剥离出来，生成静态CSS文件并在页面中引用。</li>\n</ol><p>开源社区里常见的CSS-in-JS框架，它们的内部实现最终都会落地于以上五种方式之一或组合。</p><h2><code>emotion</code>框架</h2><p>如果把活跃的CSS-in-JS框架都列出来的话，估计可以单开一个专栏了。这节课里，我们选择了<code>emotion</code> 框架（<a href=\"https://emotion.sh/\">官网</a>），根据我的经验，这个框架比起其他框架更注重<strong>开发者体验</strong>（Developer Experience），功能相对完整，也比其他一些专注于用JS、TS语法写样式的框架更“CSS”一些。</p><p>下面我就带着你用emotion框架，改写<code>oh-my-kanban</code>项目的组件样式。在改写过程中，你会学到emotion的基本用法、嵌套选择器、样式组合与复用、伪类选择器，以及在样式中使用组件数据，基本上涵盖了CSS-in-JS的典型使用场景。</p><h3>安装和基本用法</h3><p>回到我们的<code>oh-my-kanban</code>项目，在命令行运行如下命令安装 <code>emotion</code> ：</p><pre><code class=\"language-bash\">npm install @emotion/react\n</code></pre><p>注意这个是直接依赖项，在应用运行时（Runtime）中会被调用，而不是开发依赖项，所以不能加<code>-D</code>或<code>--save-dev</code>参数。</p><p>回到VSCode中，在<code>src/App.js</code>文件开头加入一行<code>JSX Pragma</code>（编译指示），告诉JS编译器使用<code>@emotion/react</code>包来替代React原生的<code>jsx</code> 运行时 ：</p><p><img src=\"https://static001.geekbang.org/resource/image/6b/0e/6be2c2372f76c8913fa9008a5715570e.png?wh=1296x176\" alt=\"图片\"></p><p>接下来就要对我们第一眼看到的组件 <code>KanbanBoard</code> 开刀。首先从 <code>@emotion/react</code> 包导入<code>css</code>函数，然后将 <code>&lt;main&gt;</code> 标签的 <code>className</code> 属性替换成 <code>css</code> 属性，属性值为调用 <code>css</code> 函数的返回值，把 <code>src/App.css</code> 里 <code>.kanban-board</code> 的内容完整搬过来作为 <code>css</code> 函数的参数：</p><p><img src=\"https://static001.geekbang.org/resource/image/de/01/de4cc983c56c250a0b773c9401dc4301.png?wh=1328x844\" alt=\"图片\"></p><p>你可能对 css `args` 这样的函数写法感到陌生，将`  `定义的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals\">模板字面量（Template Literals</a>）直接拼在函数名后面是ES6里新加入的语法，称作<strong>带标签的模版字符串</strong>（Tagged Templates）。</p><p>你可以打开浏览器的控制台，输入如下 <code>IIFE</code>（立即调用函数表达式）代码，就可以清楚地看出模版字面量和函数参数的对应关系。</p><pre><code class=\"language-javascript\">((...args) =&gt; console.log(JSON.stringify(args)))`我说${false}你说${true}`;\n// 回车后控制台会打印\n[[\"我说\",\"你说\",\"\"],false,true]\n</code></pre><p>接下来运行 <code>npm start</code> 启动项目，可以看到应用的样式与之前并无差异。打开React Developer Tools会看到组件树中，原有<code>KanbanBoard</code>和<code>KanbanColumn</code>之间插入了一层名为 <code>EmotionCssPropInternal</code> 的组件，与 <code>KanbanColumn</code> 平级还插入了一个 <code>Insertion</code> 组件，如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/1b/58/1bdfc7bfa4c319910a9f3f7c3013dd58.png?wh=1312x712\" alt=\"图片\"></p><p>我们暂时不去深究这两个新组件是什么，但需要关注一下emotion框架为我们做了什么。把开发者工具切换到检查器页签，可以看到 <code>&lt;main&gt;</code> 标签的 <code>class</code> 属性值变成了一个貌似没有意义的类名 <code>css-130tiw0-KanbanBoard</code>，而这个<strong>CSS类是在HTML文档的</strong> <code>&lt;head&gt;</code> <strong>里动态插入的</strong> <code>&lt;style&gt;</code> <strong>标签中定义</strong>的。</p><p>如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/de/a25df4b04e7e2f173d81c7d8e36b88de.png?wh=617x391\" alt=\"图片\"></p><p>类名中的 <code>130tiw0</code> 是个哈希值，用来<strong>保证类名在不同组件间的唯一性</strong>，这自然就避免了一个组件的样式污染另一个组件。</p><p>你不妨将类样式代码格式化，会得到如下片段：</p><pre><code class=\"language-css\">.css-130tiw0-KanbanBoard {\n&nbsp; -webkit-flex: 10;\n&nbsp; -ms-flex: 10;\n&nbsp; flex: 10;\n&nbsp; display: -webkit-box;\n&nbsp; display: -webkit-flex;\n&nbsp; display: -ms-flexbox;\n&nbsp; display: flex;\n&nbsp; -webkit-flex-direction: row;\n&nbsp; -ms-flex-direction: row;\n&nbsp; flex-direction: row;\n&nbsp; gap: 1rem;\n&nbsp; margin: 0 1rem 1rem;\n}\n</code></pre><p>貌似比一开始手写的代码增加了几行？是的，增加的这几行中，<code>-webkit-</code>、 <code>-ms-</code> 这样的前缀称作<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix\">Vendor Prefix浏览器引擎前缀</a>，浏览器厂商用这种方式来<strong>引入尚未标准化的、实验性的CSS属性或属性值</strong>。</p><p>为了提高浏览器兼容性，emotion框架会自动为较新的CSS标准加入带有前缀的副本，不认识这些前缀的浏览器会忽略这些副本，而老版本浏览器会各取所需，这样只需按最新标准编写一次CSS，就可以自动支持新老浏览器。</p><p>由于写在组件内部的CSS已经脱离了CSS文件的上下文，VSCode并不能为它提供语法高亮和自动代码补全。这可难不倒新时代的开发者们，VSCode有丰富的扩展插件。</p><p>你兴致勃勃地打开VSCode的扩展（Extensions）视图，在搜索框中输入了“emotion syntax”。等等，这都列出来些什么啊？C++语法扩展、Haskell语法高亮扩展……来吧，换个关键字“styled”，从搜索结果中找到 <a href=\"https://marketplace.visualstudio.com/items?itemName=styled-components.vscode-styled-components\">vscode-styled-components</a> 语法高亮扩展，安装它。</p><p>这不是对家 <code>styled-components</code>（另一款流行的CSS-in-JS框架）的扩展吗？别问，问就是世界大同。这下css属性里写CSS的<strong>语法高亮、自动代码补全</strong>都有了。</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/5b/c863c392a85e4a63d738bf5877e5d25b.png?wh=694x454\" alt=\"图片\"></p><p>对了，记得把 <code>src/App.css</code> 中的 <code>.kanban-board</code> 代码删掉，原生CSS可没有死代码消除（Dead Code Elimination）的能力。</p><h3>嵌套选择器</h3><p>前面我们利用 <code>emotion</code> 提供的 <code>css</code> API，顺利地将 <code>KanbanBoard</code> 的样式从独立的CSS文件中移到了组件代码中。</p><p>接下来轮到 <code>KanbanColumn</code> 了。请你仿照前面的例子，把它的类样式 <code>.kanban-column</code> 从CSS文件移到组件中，对于组件中原有 <code>className</code> 的处理暂时忽略。代码如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/5b/18/5b549fa376fafdf050997e1b90bc4418.png?wh=1320x854\" alt=\"图片\"></p><p>保存代码后，你会发现页面上少了些样式，原本以 <code>.kanban-column</code> 开头的几个子选择器定义的样式失效了，比如 <code>.kanban-column &gt; h2</code>。</p><p>从组件JSX来看，<code>&lt;h2&gt;</code>、<code>&lt;ul&gt;</code> 是当前组件的组成部分，理应把子选择器的样式也移过来。最直接的写法当然是为 <code>&lt;h2&gt;</code> 、<code>&lt;ul&gt;</code> 也分别加一个<code>css</code>属性，但这不是唯一写法，我们来尝试一下<strong>嵌套样式</strong>。</p><p>在section的css属性的模版字面量里加入 <code>.kanban-column &gt; h2</code> 和 <code>.kanban-column &gt; ul</code> 的样式，并把样式选择器里的 <code>.kanban-column</code> 替换成嵌套选择器 <code>&</code> ，代码如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/01/1d77728338b8cb60e54580b2a808e201.jpg?wh=676x737\" alt=\"图片\"></p><p>至于 <code>.kanban-column &gt; h2 &gt; button</code>，则可以直接插入到 <code>& &gt; h2</code> 里，选择器改写成 <code>& &gt; button</code>，形成多层嵌套：</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/17/4a206b2093a84d33c78fb345d3742417.png?wh=1372x1128\" alt=\"图片\"></p><p>保存文件，在浏览器中可以看到样式得到完整复现，emotion生成的 <code>&lt;style&gt;</code> 标签如图：</p><p><img src=\"https://static001.geekbang.org/resource/image/38/51/38dbf7c7fcd0e479690960162c0acd51.png?wh=694x454\" alt=\"图片\"></p><p>嵌套选择器&其实并不是emotion独创的语法，早期在<a href=\"https://lesscss.org/\">LESS</a>、<a href=\"https://sass-lang.com/\">SASS</a>等CSS预处理器中就已经广受好评。以至于Web标准化组织W3c将其吸纳，形成了<a href=\"https://www.w3.org/TR/css-nesting-1/\">CSS Nesting</a><strong>标准草案</strong>，虽然截止到2022年中还没有受到浏览器的正式支持，但<strong>CSS-in-JS框架中普遍加入了这一语法</strong>。</p><p>另外强调一点，<strong>子选择器</strong><code>&gt;</code> 对于 <code>KanbanColumn</code> 组件是必要的。如果去掉 <code>&gt;</code> ，仅保留空格，上面三个子选择器就变成了<strong>后代选择器</strong>，无论在DOM树中的深度如何，只要是 <code>KanbanColumn</code> 的子孙 <code>&lt;h2&gt;</code>、<code>&lt;button&gt;</code>、<code>&lt;ul&gt;</code>就会被应用上面的样式，这就会污染传入的 <code>children</code> 子组件的样式，偏离了我们样式隔离的目标。</p><h3>样式组合与复用</h3><p>刚才我们把 <code>KanbanColumn</code> 的样式从CSS文件移到了组件中，并利用嵌套选择器把CSS代码都集中在了组件代码的同一位置。再接下来，我们会把 <code>KanbanCard</code> 的样式也移过来。</p><p>细心的你应该发现了，<code>.kanban-card</code> 、<code>.card-title</code> 不止被 <code>KanbanCard</code> 使用，还被 <code>KanbanNewCard</code> 使用。如果直接用 <code>css</code> 属性的方式写，那是不是会产生重复代码呢？这时我们可以看一下在emotion里该如何复用样式。</p><p>最直接的复用方式，就是在两个组件外部<strong>声明一个值为</strong> <code>css</code> <strong>函数执行结果的常量，然后赋给HTML元素的</strong> <code>css</code> <strong>属性</strong>，如下面代码所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/79/fa/79ba4ce3d4c89a29a136e3e00c9beffa.jpg?wh=689x1078\" alt=\"图片\"></p><p>不过《添加新卡片》组件还缺一个子选择器 <code>.card-title &gt; input[type=\"text\"]</code> 的样式，没关系，你可以把这部分样式直接嵌套在 <code>kanbanCardTitleStyles</code>里，当然也可以选择更加灵活的<strong>样式组合</strong>：</p><p><img src=\"https://static001.geekbang.org/resource/image/38/a4/382e334069da9e50f8860547a28a60a4.png?wh=1316x664\" alt=\"图片\"></p><p>如果要组合两个或更多 <code>css</code> 函数返回值的变量，还可以用数组的写法，如果其中有重复的CSS属性（如<code>color: red</code>和<code>color: blue</code>），那么后面的会覆盖前面的：</p><pre><code class=\"language-xml\">&lt;div css={[style1, style2, style3]}&gt;...&lt;/div&gt;\n</code></pre><p>到目前为止，<code>KanbanBoard</code> 、<code>KanbanColumn</code> 、<code>KanbanCard</code> 的样式都被完整地转移到了组件代码中。提醒一下，<code>src/App.css</code> 中的<code>.kanban-column</code> 、<code>.kanban-card</code> 开头的样式都可以删掉了。</p><h3>伪类选择器</h3><p>对CSS选择器选定的元素，开发者经常要<strong>用到伪类</strong><strong>（Pseudo-classes）</strong><strong>来进一步选定它的特殊状态</strong>，比如 <code>:hover</code> 代表鼠标悬停的状态。emotion也支持了这一语法。这部分我们不展开讲，只做个小改动作为例子。</p><p>目前的页面是不是有点单调？让我们来为 <code>KanbanCard</code> 加上鼠标悬停效果：</p><p><img src=\"https://static001.geekbang.org/resource/image/72/94/720e79f20d52c7f76264c47346fcf794.png?wh=1320x480\" alt=\"图片\"></p><p>保存文件，在浏览器看看效果：</p><p><img src=\"https://static001.geekbang.org/resource/image/81/a9/81738029167cf4100ec155181b23efa9.gif?wh=470x350\" alt=\"图片\"></p><h3>在样式中使用组件数据</h3><p>你可能已经注意到了，既然处理CSS样式的 <code>css</code> 函数是个JS函数，那么参数里加入些JS变量也是可能的吧？是的，当你用 <code>@emotion/react</code> 的 <code>css</code> 属性写组件样式时，从框架设计上你可以把React内外的变量都插进样式代码里，包括React组件的props、state和context。</p><p>如果你还记得，前面转移 <code>KanbanColumn</code> 样式时，我忽略了用于区别三个不同看板列的 <code>className</code> 属性的处理逻辑。但有趣的是，即使这样它还能照常工作，三个看板列的背景色确实是不同的。你感兴趣的话，可以研究一下原因。不过现在我打算改掉这个属性，作为样式中使用组件props的例子。</p><p>先把 <code>KanbanColumn</code> 组件的 <code>className</code> 属性改成 <code>bgColor</code> 属性，然后在 <code>css</code> 的模版字面量中使用它：</p><p><img src=\"https://static001.geekbang.org/resource/image/65/41/65295fed4d54194cb5ebf96cf293c541.png?wh=1310x616\" alt=\"图片\"></p><p>接下来由 <code>App</code> 组件来传入 <code>bgColor</code> 的值：</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/df/8bf723b0200b99a76928c3bb6d89f1df.jpg?wh=702x647\" alt=\"图片\"></p><p>保存文件，浏览器查看，三个看板列背景色正常。收工！</p><p>最后多补充一句。往CSS里传JS数据，很多时候确实很方便，但会导致emotion在运行时<strong>创建大量的</strong><code>&lt;style&gt;</code><strong>标签</strong>，有可能影响页面性能，所以<strong>不宜多用</strong>。</p><h2>CSS-in-JS的其他选择</h2><p>在用emotion写CSS的时候，除了可以用模版字面量，还可以选择<strong>Object Styles</strong>的方式，即用JS对象的属性名和属性值来写CSS。属性名要从CSS标准的 <code>kebab-case</code>（烤串式）命名改为 <code>camelCase</code>（驼峰）命名。例如：</p><pre><code class=\"language-xml\">&lt;div css={{\n  color: 'blue',\n  backgroundColor: 'green'\n}}&gt;\n  ...\n&lt;/div&gt;\n</code></pre><p>这个写法看似与React早期常见的Inline styles（如 <code>&lt;div style={{color: 'blue', backgroundColor: 'green'}}&gt;...&lt;/div&gt;</code> ）很相似，但在运行时，emotion依旧会创建独立的<code>&lt;style&gt;</code> 标签，说明这个机制的性能要优于Inline styles。</p><p>在emotion以外， <code>Styled-components</code> （<a href=\"https://styled-components.com/\">官网</a>）是前端开源社区另一个热门的CSS-in-JS框架，它不依赖于编译，本身就提供了组件化的API。以下代码修改来自官方的例子：</p><pre><code class=\"language-javascript\">import styled from 'styled-components'；\nconst Button = styled.button`\n&nbsp; background: transparent;\n&nbsp; border-radius: 3px;\n&nbsp; border: 2px solid blue;\n&nbsp; color: blue;\n`;\nconst Component = () =&gt; (\n  &lt;Button&gt;Normal Button&lt;/Button&gt;\n);\n</code></pre><p>CSS-in-JS还有一个老前辈 <code>CSS Modules</code> ，它不算是个框架，但它在各种前端编译工具中都有支持，它做的事情很专一，就是做<strong>CSS样式的隔离</strong>。在下面这个例子中，CSS文件与一般无异：</p><pre><code class=\"language-css\">/* Component.module.css */\n.container {\n  width: 100px;\n  background-color: blue;\n}\n</code></pre><p>JSX文件将CSS文件作为一个对象导入进来，然后在JSX代码中把对象的属性赋值给 <code>className</code> ：</p><pre><code class=\"language-javascript\">// Component.jsx\nimport Styles from './Component.module.css';\n\nconst Component = () =&gt; (\n  &lt;div className={Styles.container}&gt;Test&lt;/div&gt;\n);\n</code></pre><p>经过编译后，最终的代码中会保证类名的唯一性：</p><pre><code class=\"language-xml\">&lt;div class=\"component-module__Component--zTpG1\"&gt;Test&lt;/div&gt;\n</code></pre><p>到这里，我们可以发现各个CSS-in-JS方案都有一定的共同点。</p><h2>小结</h2><p>在这节课，我们了解到在组件化开发中，CSS-in-JS技术能帮我们做到样式隔离、提升组件样式的可维护性、可复用性。</p><p>然后通过在 <code>oh-my-kanban</code> 项目中的实践，学习了具代表性的CSS-in-JS ——  <code>emotion</code> 框架的安装和基本使用，也用实际的例子讲解了emotion支持的嵌套选择器、伪类选择器，还有如何复用组件样式，以及如何在组件样式中使用组件的props数据。</p><p>这节课中完成的emotion代码比较基础，与原来的写法相比优势并不明显，但随着项目规模的增长，样式代码越来越多、越来越复杂，emotion或者说CSS-in-JS对于样式组件化的重要作用就会体现出来。</p><p>最后也附上本节课所涉及的源代码：<a href=\"https://gitee.com/evisong/geektime-column-oh-my-kanban/releases/tag/v0.7.1\">https://gitee.com/evisong/geektime-column-oh-my-kanban/releases/tag/v0.7.1</a></p><p>下节课，我们会回到React组件本身，探索一下React组件的生命周期。</p><h2>思考题</h2><ol>\n<li>本节课提到CSS-in-JS的主要功能之一是组件间样式的隔离，你还能想到哪些其他CSS样式隔离的办法？</li>\n<li>本节课末尾提到生成独立 <code>&lt;style&gt;</code> 标签的性能要优于Inline styles，有什么<a href=\"https://esbench.com/bench/5908f78199634800a0347e94\">办法</a>可以证明吗？</li>\n</ol><p>欢迎把你的思考和想法分享在留言区，我们一起交流讨论，下节课再见！</p>","neighbors":{"left":{"article_title":"06｜虚拟DOM：为什么要关心React组件的渲染机制？","id":562726},"right":{"article_title":"08｜组件生命周期：React新老版本中生命周期的演化","id":565434}},"comments":[{"had_liked":false,"id":357294,"user_name":"🐑","can_delete":false,"product_type":"c1","uid":2189689,"ip_address":"北京","ucode":"DE34B3B14287D1","user_header":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","comment_is_top":true,"comment_ctime":1663140684,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"你好，我是《现代React Web开发实战》的编辑辰洋，这是👇项目的源代码链接，供你学习与参考：https:&#47;&#47;gitee.com&#47;evisong&#47;geektime-column-oh-my-kanban&#47;releases&#47;tag&#47;v0.7.1","like_count":0},{"had_liked":false,"id":357023,"user_name":"大海","can_delete":false,"product_type":"c1","uid":1001446,"ip_address":"内蒙古","ucode":"20913D0265971B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/e6/67b0b711.jpg","comment_is_top":false,"comment_ctime":1662866025,"is_pvip":false,"replies":[{"id":129966,"content":"你好，大海，你提的这个问题切中要害。我和我的同事们在使用emotion的初期也对这个问题很苦恼。但后来发现React Developer Tools从哪个版本开始就可以过滤组件树的组件了，这个问题就没再困扰过我们。\n\n请在React Developer Tools的设置（小齿轮）中，切换到“组件”页签，在底部的“隐藏组件…”中新加两条规则：name: Emotion, name: Insertion，然后刷新页面，你的组件树就清净了。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662965915,"ip_address":"内蒙古","comment_id":357023,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"【原有KanbanBoard和KanbanColumn之间插入了一层名为 EmotionCssPropInternal 的组件，与 KanbanColumn 平级还插入了一个 Insertion 组件】这样会导致Developer Tools 几乎无法使用吧。因为页面有大量多余的组件，影响调试，特别是大型页面","like_count":15,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587299,"discussion_content":"你好，大海，你提的这个问题切中要害。我和我的同事们在使用emotion的初期也对这个问题很苦恼。但后来发现React Developer Tools从哪个版本开始就可以过滤组件树的组件了，这个问题就没再困扰过我们。\n\n请在React Developer Tools的设置（小齿轮）中，切换到“组件”页签，在底部的“隐藏组件…”中新加两条规则：name: Emotion, name: Insertion，然后刷新页面，你的组件树就清净了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1662965915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"内蒙古","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360904,"user_name":"Custom_DOM","can_delete":false,"product_type":"c1","uid":1478038,"ip_address":"北京","ucode":"953132D7227BBD","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/96/c09eedfc.jpg","comment_is_top":false,"comment_ctime":1666960295,"is_pvip":false,"replies":[{"id":131347,"content":"你好，Custom_DOM，我非常能理解你对CSS-in-JS的看法。我自己也是从table到div+css、从BEM到SCSS一路写过来的，一直以来也认为HTML写结构、CSS写样式、JS写逻辑。\n\n但当我熟悉React、习惯JSX语法后，我不再纠结是否一定要把HTML和JS隔离开——在前端组件开发这个领域里，HTML和JS只是具体的内部实现技术，在组件与组件之间、组件与整体应用之间起更关键作用的，还是“接口”。这层抽象隐藏了细节，更有利于复杂应用的开发。这个思路我在第13节课也有介绍。\n\n那么，在前端组件这个体系下，我们该如何看待样式？它是组件接口的一部分，还是内部实现的一部分？\n\n然后就来到我在这节课开篇里提到的，CSS技术在前端组件开发中的不足：……领域不同，CSS（截止到目前标准化的）尚不具备现代前端组件化开发所需要的部分领域知识和能力，所以需要其他技术来补足。这些知识和能力主要包括四个方面：\n\n* 组件样式的作用域需要控制在组件级别；\n* 组件样式与组件需要在源码和构建层面建立更强的关联；\n* 组件样式需要响应组件数据变化；\n* 组件样式需要有以组件为单位的复用和扩展能力。\n\n举个稍微具体的例子，当我们在组件树中使用了&lt;KanbanCard &#47;&gt;，如何能保证KanbanCard对应的CSS一定会被加载？（哪怕开发者忘记了）\n\n另外，这节课主要还是介绍CSS-in-JS的概念和Emotion的基本使用，至于如何让组件和样式代码更整洁的最佳实践，在第12节课的重构中会涉及到，第24节课的项目中也会有例子。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1667214566,"ip_address":"北京","comment_id":360904,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"为什么要做css in js啊，我觉得我可能有点难以接受，我觉得预编译scss 和less分离开单独做一个文件，更好维护样式呀，而且一个页面存js突然混入写css，让我看本js文件代码特别难受，会多出一些代码，比如可能是强迫症，我甚至通常情况下不愿意写style，我通常终是优先选择使用className，结合各种类选择器的合理规划，一个组件，我通常也写不了几个css类的感觉，更好维护与修改，可以说一下css In js可以具体解决开发中哪些痛点吗？","like_count":8,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592229,"discussion_content":"你好，Custom_DOM，我非常能理解你对CSS-in-JS的看法。我自己也是从table到div+css、从BEM到SCSS一路写过来的，一直以来也认为HTML写结构、CSS写样式、JS写逻辑。\n\n但当我熟悉React、习惯JSX语法后，我不再纠结是否一定要把HTML和JS隔离开——在前端组件开发这个领域里，HTML和JS只是具体的内部实现技术，在组件与组件之间、组件与整体应用之间起更关键作用的，还是“接口”。这层抽象隐藏了细节，更有利于复杂应用的开发。这个思路我在第13节课也有介绍。\n\n那么，在前端组件这个体系下，我们该如何看待样式？它是组件接口的一部分，还是内部实现的一部分？\n\n然后就来到我在这节课开篇里提到的，CSS技术在前端组件开发中的不足：……领域不同，CSS（截止到目前标准化的）尚不具备现代前端组件化开发所需要的部分领域知识和能力，所以需要其他技术来补足。这些知识和能力主要包括四个方面：\n\n* 组件样式的作用域需要控制在组件级别；\n* 组件样式与组件需要在源码和构建层面建立更强的关联；\n* 组件样式需要响应组件数据变化；\n* 组件样式需要有以组件为单位的复用和扩展能力。\n\n举个稍微具体的例子，当我们在组件树中使用了&lt;KanbanCard /&gt;，如何能保证KanbanCard对应的CSS一定会被加载？（哪怕开发者忘记了）\n\n另外，这节课主要还是介绍CSS-in-JS的概念和Emotion的基本使用，至于如何让组件和样式代码更整洁的最佳实践，在第12节课的重构中会涉及到，第24节课的项目中也会有例子。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667214566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356908,"user_name":"右耳漏风","can_delete":false,"product_type":"c1","uid":1004723,"ip_address":"内蒙古","ucode":"3B3C72FDBF33EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/b3/1a317ab0.jpg","comment_is_top":false,"comment_ctime":1662693126,"is_pvip":false,"replies":[{"id":129971,"content":"你好，右耳漏风，emotion和styled-components都是很成熟的CSS-in-JS框架，在各类React应用项目中都有广泛使用。\n\n说来我当时的选型，还是偏向我个人的taste。两者实现机制类似，都是动态生成class样式，然后在DOM中插入&lt;style&gt;，性能不会有太大差异。在我看来，styled-components中 styled.div 这样的API对React组件代码整体侵入性比较高，相较而言，emotion的css prop直接依附在了React内建的HTML元素tag上，侵入性低些，万一以后有整体剥离或替换CSS技术栈的需要，成本风险更加可控。\n\n当然后来我被打脸了，styled-components从V4开始也利用babel plugin实现了 css prop，emotion也提供了styled API。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662978245,"ip_address":"内蒙古","comment_id":356908,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"宋老师，您可以展开说一下选择 emotion 而不是 styled-components 的原因吗？谢谢","like_count":5,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587328,"discussion_content":"你好，右耳漏风，emotion和styled-components都是很成熟的CSS-in-JS框架，在各类React应用项目中都有广泛使用。\n\n说来我当时的选型，还是偏向我个人的taste。两者实现机制类似，都是动态生成class样式，然后在DOM中插入&lt;style&gt;，性能不会有太大差异。在我看来，styled-components中 styled.div 这样的API对React组件代码整体侵入性比较高，相较而言，emotion的css prop直接依附在了React内建的HTML元素tag上，侵入性低些，万一以后有整体剥离或替换CSS技术栈的需要，成本风险更加可控。\n\n当然后来我被打脸了，styled-components从V4开始也利用babel plugin实现了 css prop，emotion也提供了styled API。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662978246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"内蒙古","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356771,"user_name":".","can_delete":false,"product_type":"c1","uid":2816656,"ip_address":"内蒙古","ucode":"FCF9DB5D289A93","user_header":"https://static001.geekbang.org/account/avatar/00/2a/fa/90/cfba2d42.jpg","comment_is_top":false,"comment_ctime":1662565985,"is_pvip":false,"replies":[{"id":129958,"content":"你好，（点），这是个好建议，谢谢。专栏编辑也和我做过相关的设计，会不定期安排课程加餐，里面会讨论留言区的热点问题和思考题。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662962863,"ip_address":"内蒙古","comment_id":356771,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"老师可以在下一节课的开头，讲讲上一节课留下的思考题吗？","like_count":5,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587288,"discussion_content":"你好，（点），这是个好建议，谢谢。专栏编辑也和我做过相关的设计，会不定期安排课程加餐，里面会讨论留言区的热点问题和思考题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1662962863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"内蒙古","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2816656,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/fa/90/cfba2d42.jpg","nickname":".","note":"","ucode":"FCF9DB5D289A93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":587344,"discussion_content":"ok,谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662987634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":587288,"ip_address":"广东","group_id":0},"score":587344,"extra":""}]}]},{"had_liked":false,"id":356644,"user_name":"东方奇骥","can_delete":false,"product_type":"c1","uid":1354850,"ip_address":"北京","ucode":"DEE7085F7E55A4","user_header":"https://static001.geekbang.org/account/avatar/00/14/ac/62/37912d51.jpg","comment_is_top":false,"comment_ctime":1662467210,"is_pvip":false,"replies":[{"id":129838,"content":"你好，东方奇骥，虽然没机会在工作中使用，但我个人也很喜欢Svelte框架，它的API和用法都给我带来亲切感。其实这两年的主流框架之间都有互相借鉴一些别家的优点，比如JSX、虚拟DOM、组件组合和嵌套、利用编译工具等。\n\nHTML、JS、CSS是写在一起或是分开来写，都有各自的利弊。但正因为这三个框架的用户基数大、社区活跃，每种写法均有一定的用户基础，所以无论哪种都算是开发者（或团队）的“taste”，无所谓优劣。\n\n不过毕竟这个专栏是在讲React，我多少也为React澄清一下 :) 在React中，HTML、JS、CSS也可以分开来写：\n\n1. 这节课里的emotion这项CSS-in-JS技术是独立于React以外的，也可以用于Vue框架；而React里也可以利用最基础的CSS Modules技术分开写独立的CSS文件；\n2. 在React组件中，可以把多个Hooks抽取成自定义Hook写在独立的JS文件中，也可以把一些公共逻辑抽象成高阶组件，这样就可以得到尽可能“纯净”的JSX文件，这部分内容后面的课程会讲到；\n3. 虽然很少见，但开发者也可以选择把React技术仅作为View来使用，将React的JSX和事件处理整合进其他JS框架，比如Backbone.js中：https:&#47;&#47;zh-hans.reactjs.org&#47;docs&#47;integrating-with-other-libraries.html#embedding-react-in-a-backbone-view 。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662546295,"ip_address":"北京","comment_id":356644,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"感觉还是更喜欢Svelte、Vue这类前端框架。 React把html, js, css都合在一起了，感觉更像在写后端代码，不知道React作者是不是后端出身转前端的。","like_count":3,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586863,"discussion_content":"你好，东方奇骥，虽然没机会在工作中使用，但我个人也很喜欢Svelte框架，它的API和用法都给我带来亲切感。其实这两年的主流框架之间都有互相借鉴一些别家的优点，比如JSX、虚拟DOM、组件组合和嵌套、利用编译工具等。\n\nHTML、JS、CSS是写在一起或是分开来写，都有各自的利弊。但正因为这三个框架的用户基数大、社区活跃，每种写法均有一定的用户基础，所以无论哪种都算是开发者（或团队）的“taste”，无所谓优劣。\n\n不过毕竟这个专栏是在讲React，我多少也为React澄清一下 :) 在React中，HTML、JS、CSS也可以分开来写：\n\n1. 这节课里的emotion这项CSS-in-JS技术是独立于React以外的，也可以用于Vue框架；而React里也可以利用最基础的CSS Modules技术分开写独立的CSS文件；\n2. 在React组件中，可以把多个Hooks抽取成自定义Hook写在独立的JS文件中，也可以把一些公共逻辑抽象成高阶组件，这样就可以得到尽可能“纯净”的JSX文件，这部分内容后面的课程会讲到；\n3. 虽然很少见，但开发者也可以选择把React技术仅作为View来使用，将React的JSX和事件处理整合进其他JS框架，比如Backbone.js中：https://zh-hans.reactjs.org/docs/integrating-with-other-libraries.html#embedding-react-in-a-backbone-view 。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662546296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356672,"user_name":"杨永安","can_delete":false,"product_type":"c1","uid":1218183,"ip_address":"北京","ucode":"D23013C30D435B","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/87/bbdeb4ee.jpg","comment_is_top":false,"comment_ctime":1662486433,"is_pvip":false,"replies":[{"id":129841,"content":"你好，杨永安，styled.button 是一个函数，后面跟着 ` ` 是前面讲到的“带标签的模版字符串”语法，可以认为是在调用 styled.button 函数，` ` 内是传给它的参数，而 styled.button 函数的返回值是一个类似这样的自定义组件：\n\nconst Button = ({ cssStyles, children, ...restProps }) =&gt; {\n  &#47;&#47; 处理 cssStyles\n  return (\n    &lt;button className=&quot;动态生成的类名&quot; {...restProps}&gt;\n      {children}\n    &lt;&#47;button&gt;\n  );\n};\n\n请注意这段代码是根据我自己的理解拼出来的，肯定少了不少细节，但原理是类似的。\n\n然后你就可以在其他JSX中使用这个Button组件了。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662547936,"ip_address":"北京","comment_id":356672,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"Styled-components的例子中，没太明白srtled.button是如何应用到Button组件的","like_count":2,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586871,"discussion_content":"你好，杨永安，styled.button 是一个函数，后面跟着 ` ` 是前面讲到的“带标签的模版字符串”语法，可以认为是在调用 styled.button 函数，` ` 内是传给它的参数，而 styled.button 函数的返回值是一个类似这样的自定义组件：\n\nconst Button = ({ cssStyles, children, ...restProps }) =&gt; {\n  // 处理 cssStyles\n  return (\n    &lt;button className=&#34;动态生成的类名&#34; {...restProps}&gt;\n      {children}\n    &lt;/button&gt;\n  );\n};\n\n请注意这段代码是根据我自己的理解拼出来的，肯定少了不少细节，但原理是类似的。\n\n然后你就可以在其他JSX中使用这个Button组件了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662547936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1218183,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/87/bbdeb4ee.jpg","nickname":"杨永安","note":"","ucode":"D23013C30D435B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586890,"discussion_content":"明白了，原来const Button是在定义一个组件，下面的调用是刚刚定义好的Button，而不是浏览器的button😂","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1662577562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357024,"user_name":"大海","can_delete":false,"product_type":"c1","uid":1001446,"ip_address":"内蒙古","ucode":"20913D0265971B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/e6/67b0b711.jpg","comment_is_top":false,"comment_ctime":1662866454,"is_pvip":false,"replies":[{"id":129965,"content":"你好，大海，我很赞同你说的，本身css与js就是异构代码，尤其是在样式复杂的时候，css行数比较多，会影响代码可读性。\n\n这节课的目标主要还是让大家了解CSS-in-JS的原理和用途。在后面的第12～13节课，我们会对oh-my-kanban项目做一次重构，那时会把css属性都抽取成独立的变量，提高可读性。敬请期待。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662965524,"ip_address":"内蒙古","comment_id":357024,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"在 jsx 里边写 css 样式，可读性变差了","like_count":1,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587298,"discussion_content":"你好，大海，我很赞同你说的，本身css与js就是异构代码，尤其是在样式复杂的时候，css行数比较多，会影响代码可读性。\n\n这节课的目标主要还是让大家了解CSS-in-JS的原理和用途。在后面的第12～13节课，我们会对oh-my-kanban项目做一次重构，那时会把css属性都抽取成独立的变量，提高可读性。敬请期待。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1662965524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"内蒙古","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361899,"user_name":"超级读书郎","can_delete":false,"product_type":"c1","uid":1381602,"ip_address":"北京","ucode":"746DA51EF5FF21","user_header":"https://static001.geekbang.org/account/avatar/00/15/14/e2/e7e13e39.jpg","comment_is_top":false,"comment_ctime":1667963392,"is_pvip":false,"replies":[{"id":131784,"content":"你好，超级读书郎，感谢你对这节课内容的认可。后面的课程也尽可能地为各类技术点加入了典型用例，希望能帮到大家。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1668399007,"ip_address":"北京","comment_id":361899,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"这一节整理的真好，包含了几种方案，并且深入讲解了emotion方案的几种开发中常见的case。另外稳文中的各种外链也很有用处。受益匪浅。","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593628,"discussion_content":"你好，超级读书郎，感谢你对这节课内容的认可。后面的课程也尽可能地为各类技术点加入了典型用例，希望能帮到大家。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668399007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357022,"user_name":"大海","can_delete":false,"product_type":"c1","uid":1001446,"ip_address":"内蒙古","ucode":"20913D0265971B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/e6/67b0b711.jpg","comment_is_top":false,"comment_ctime":1662865717,"is_pvip":false,"replies":[{"id":129969,"content":"你好，大海，感谢你的抓虫。抱歉这里由于录入问题丢失了字符，正确内容应为：\n\n    css`args`\n\n其中css是函数名，args可以是任意字符串或模版字面量。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662975015,"ip_address":"内蒙古","comment_id":357022,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"【你可能对 cssargs 这样的函数写法感到陌生】文中代码并没有这个函数啊","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587319,"discussion_content":"你好，大海，感谢你的抓虫。抱歉这里由于录入问题丢失了字符，正确内容应为：\n\n    css`args`\n\n其中css是函数名，args可以是任意字符串或模版字面量。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1662975015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"内蒙古","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1423832,"avatar":"https://static001.geekbang.org/account/avatar/00/15/b9/d8/92c2b3ab.jpg","nickname":"海华呀","note":"","ucode":"BD078EDFB181EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590680,"discussion_content":"以前用模版字符串 还真的没见到这个写法。学习到了。 模板字符串标签函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665998804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368100,"user_name":"程序员一土","can_delete":false,"product_type":"c1","uid":3202470,"ip_address":"上海","ucode":"A7EDE9DAB229B7","user_header":"https://static001.geekbang.org/account/avatar/00/30/dd/a6/4d0c9ee6.jpg","comment_is_top":false,"comment_ctime":1675906636,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"对比于最近的原子 CSS，Tailwind 等，老师是什么看法，目前公司项目有应用吗","like_count":1},{"had_liked":false,"id":359868,"user_name":"海华呀","can_delete":false,"product_type":"c1","uid":1423832,"ip_address":"浙江","ucode":"BD078EDFB181EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/b9/d8/92c2b3ab.jpg","comment_is_top":false,"comment_ctime":1665999400,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"1、Vue中的scoped ，","like_count":1},{"had_liked":false,"id":385495,"user_name":"零度冷咖啡","can_delete":false,"product_type":"c1","uid":1765093,"ip_address":"北京","ucode":"890F07AACB828C","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ee/e5/c38dddf1.jpg","comment_is_top":false,"comment_ctime":1702795389,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"不考虑学习原子化样式命名的成本的话，我觉得 tailwind+style 内联样式还是很香的","like_count":0},{"had_liked":false,"id":383821,"user_name":"星空","can_delete":false,"product_type":"c1","uid":1782286,"ip_address":"北京","ucode":"E4E2090ECBB70F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/32/0e/5024c2dd.jpg","comment_is_top":false,"comment_ctime":1699749768,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"老师，我平时都是用less的className定义，当然有时候定义的层级有些多，class名称会很长。如果只是对单个元素定义样式，我会用style。请问在什么情况下使用css-in-js?","like_count":0}]}