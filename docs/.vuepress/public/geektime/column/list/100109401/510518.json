{"id":510518,"title":"23｜DI Container（11）：如何对ContainerTest进行文档化改造？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现注入依赖容器。</p><h2>回顾测试代码与任务列表</h2><p>上节课我们专注于测试代码的重构，目前我们的测试是这样的：</p><pre><code>InjectTest：\n\npackage geektime.tdd.di;\n\nimport jakarta.inject.Inject;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport java.util.Optional;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class InjectionTest {\n    private Dependency dependency = mock(Dependency.class);\n    private Context context = mock(Context.class);\n    \n    @BeforeEach\n    public void setup() {\n        when(context.get(eq(Dependency.class))).thenReturn(Optional.of(dependency));\n    }\n    \n    @Nested\n    public class ConstructorInjection {\n    \n        @Nested\n        class Injection {\n        \n            static class DefaultConstructor {\n            }\n            \n            @Test\n            public void should_call_default_constructor_if_no_inject_constructor() {\n                DefaultConstructor instance = new ConstructorInjectionProvider&lt;&gt;(DefaultConstructor.class).get(context);\n                assertNotNull(instance);\n            }\n            \n            static class InjectConstructor {\n                Dependency dependency;\n                @Inject\n                public InjectConstructor(Dependency dependency) {\n                    this.dependency = dependency;\n                }\n            }\n            \n            @Test\n            public void should_inject_dependency_via_inject_constructor() {\n                InjectConstructor instance = new ConstructorInjectionProvider&lt;&gt;(InjectConstructor.class).get(context);\n                assertSame(dependency, instance.dependency);\n            }\n            \n            @Test\n            public void should_include_dependency_from_inject_constructor() {\n                ConstructorInjectionProvider&lt;InjectConstructor&gt; provider = new ConstructorInjectionProvider&lt;&gt;(InjectConstructor.class);\n                assertArrayEquals(new Class&lt;?&gt;[]{Dependency.class}, provider.getDependencies().toArray(Class&lt;?&gt;[]::new));\n            }\n        }\n        \n        @Nested\n        class IllegalInjectConstructors {\n            abstract class AbstractComponent implements Component {\n                @Inject\n                public AbstractComponent() {\n                }\n            }\n            @Test\n            public void should_throw_exception_if_component_is_abstract() {\n                assertThrows(IllegalComponentException.class, () -&gt; new ConstructorInjectionProvider&lt;&gt;(AbstractComponent.class));\n            }\n            @Test\n            public void should_throw_exception_if_component_is_interface() {\n                assertThrows(IllegalComponentException.class, () -&gt; new ConstructorInjectionProvider&lt;&gt;(Component.class));\n            }\n            static class MultiInjectConstructors {\n                @Inject\n                public MultiInjectConstructors(AnotherDependency dependency) {\n                }\n                @Inject\n                public MultiInjectConstructors(Dependency dependency) {\n                }\n            }\n            @Test\n            public void should_throw_exception_if_multi_inject_constructors_provided() {\n                assertThrows(IllegalComponentException.class, () -&gt; new ConstructorInjectionProvider&lt;&gt;(MultiInjectConstructors.class));\n            }\n            static class NoInjectNorDefaultConstructor {\n                public NoInjectNorDefaultConstructor(Dependency dependency) {\n                }\n            }\n            @Test\n            public void should_throw_exception_if_no_inject_nor_default_constructor_provided() {\n                assertThrows(IllegalComponentException.class, () -&gt; new ConstructorInjectionProvider&lt;&gt;(NoInjectNorDefaultConstructor.class));\n            }\n        }\n    }\n    @Nested\n    public class FieldInjection {\n        @Nested\n        class Injection {\n            static class ComponentWithFieldInjection {\n                @Inject\n                Dependency dependency;\n            }\n            static class SubclassWithFieldInjection extends ComponentWithFieldInjection {\n            }\n            @Test\n            public void should_inject_dependency_via_field() {\n                ComponentWithFieldInjection component = new ConstructorInjectionProvider&lt;&gt;(ComponentWithFieldInjection.class).get(context);\n                assertSame(dependency, component.dependency);\n            }\n            @Test\n            public void should_inject_dependency_via_superclass_inject_field() {\n                SubclassWithFieldInjection component = new ConstructorInjectionProvider&lt;&gt;(SubclassWithFieldInjection.class).get(context);\n                assertSame(dependency, component.dependency);\n            }\n            @Test\n            public void should_include_dependency_from_field_dependency() {\n                ConstructorInjectionProvider&lt;ComponentWithFieldInjection&gt; provider = new ConstructorInjectionProvider&lt;&gt;(ComponentWithFieldInjection.class);\n                assertArrayEquals(new Class&lt;?&gt;[]{Dependency.class}, provider.getDependencies().toArray(Class&lt;?&gt;[]::new));\n            }\n        }\n\n        @Nested\n        class IllegalInjectFields {\n            static class FinalInjectField {\n                @Inject\n                final Dependency dependency = null;\n            }\n            @Test\n            public void should_throw_exception_if_inject_field_is_final() {\n                assertThrows(IllegalComponentException.class, () -&gt; new ConstructorInjectionProvider&lt;&gt;(FinalInjectField.class));\n            }\n        }\n    }\n    @Nested\n    public class MethodInjection {\n        @Nested\n        class Injection {\n            static class InjectMethodWithNoDependency {\n                boolean called = false;\n                @Inject\n                void install() {\n                    this.called = true;\n                }\n            }\n            @Test\n            public void should_call_inject_method_even_if_no_dependency_declared() {\n                InjectMethodWithNoDependency component = new ConstructorInjectionProvider&lt;&gt;(InjectMethodWithNoDependency.class).get(context);\n                assertTrue(component.called);\n            }\n            static class InjectMethodWithDependency {\n                Dependency dependency;\n                @Inject\n                void install(Dependency dependency) {\n                    this.dependency = dependency;\n                }\n            }\n            @Test\n            public void should_inject_dependency_via_inject_method() {\n                InjectMethodWithDependency component = new ConstructorInjectionProvider&lt;&gt;(InjectMethodWithDependency.class).get(context);\n                assertSame(dependency, component.dependency);\n            }\n            static class SuperClassWithInjectMethod {\n                int superCalled = 0;\n                @Inject\n                void install() {\n                    superCalled++;\n                }\n            }\n            static class SubclassWithInjectMethod extends SuperClassWithInjectMethod {\n                int subCalled = 0;\n                @Inject\n                void installAnother() {\n                    subCalled = superCalled + 1;\n                }\n            }\n            @Test\n            public void should_inject_dependencies_via_inject_method_from_superclass() {\n                SubclassWithInjectMethod component = new ConstructorInjectionProvider&lt;&gt;(SubclassWithInjectMethod.class).get(context);\n                assertEquals(1, component.superCalled);\n                assertEquals(2, component.subCalled);\n            }\n            static class SubclassOverrideSuperClassWithInject extends SuperClassWithInjectMethod {\n                @Inject\n                void install() {\n                    super.install();\n                }\n            }\n            @Test\n            public void should_only_call_once_if_subclass_override_inject_method_with_inject() {\n                SubclassOverrideSuperClassWithInject component = new ConstructorInjectionProvider&lt;&gt;(SubclassOverrideSuperClassWithInject.class).get(context);\n                assertEquals(1, component.superCalled);\n            }\n            static class SubclassOverrideSuperClassWithNoInject extends SuperClassWithInjectMethod {\n                void install() {\n                    super.install();\n                }\n            }\n            @Test\n            public void should_not_call_inject_method_if_override_with_no_inject() {\n                SubclassOverrideSuperClassWithNoInject component = new ConstructorInjectionProvider&lt;&gt;(SubclassOverrideSuperClassWithNoInject.class).get(context);\n                assertEquals(0, component.superCalled);\n            }\n            @Test\n            public void should_include_dependencies_from_inject_method() {\n                ConstructorInjectionProvider&lt;InjectMethodWithDependency&gt; provider = new ConstructorInjectionProvider&lt;&gt;(InjectMethodWithDependency.class);\n                assertArrayEquals(new Class&lt;?&gt;[]{Dependency.class}, provider.getDependencies().toArray(Class&lt;?&gt;[]::new));\n            }\n        }\n        @Nested\n        class IllegalInjectMethods {\n            static class InjectMethodWithTypeParameter {\n                @Inject\n                &lt;T&gt; void install() {\n                }\n            }\n            @Test\n            public void should_throw_exception_if_inject_method_has_type_parameter() {\n                assertThrows(IllegalComponentException.class, () -&gt; new ConstructorInjectionProvider&lt;&gt;(InjectMethodWithTypeParameter.class));\n            }\n        }\n    }\n}\n</code></pre><p>待重构的ContainerTest是这样的：</p><pre><code>package geektime.tdd.di;\nimport jakarta.inject.Inject;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.internal.util.collections.Sets;\nimport java.util.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.eq;\npublic class ContainerTest {\n    ContextConfig config;\n    @BeforeEach\n    public void setup() {\n        config = new ContextConfig();\n    }\n    @Nested\n    public class ComponentConstruction {\n        @Test\n        public void should_bind_type_to_a_specific_instance() {\n            Component instance = new Component() {\n            };\n            config.bind(Component.class, instance);\n            Context context = config.getContext();\n            assertSame(instance, context.get(Component.class).get());\n        }\n\n        @Test\n        public void should_return_empty_if_component_not_defined() {\n            Optional&lt;Component&gt; component = config.getContext().get(Component.class);\n            assertTrue(component.isEmpty());\n        }\n        @Nested\n        public class DependencyCheck {\n            @Test\n            public void should_throw_exception_if_dependency_not_found() {\n                config.bind(Component.class, ComponentWithInjectConstructor.class);\n                DependencyNotFoundException exception = assertThrows(DependencyNotFoundException.class, () -&gt; config.getContext());\n                assertEquals(Dependency.class, exception.getDependency());\n                assertEquals(Component.class, exception.getComponent());\n            }\n            @Test\n            public void should_throw_exception_if_cyclic_dependencies_found() {\n                config.bind(Component.class, ComponentWithInjectConstructor.class);\n                config.bind(Dependency.class, DependencyDependedOnComponent.class);\n                CyclicDependenciesFoundException exception = assertThrows(CyclicDependenciesFoundException.class, () -&gt; config.getContext());\n                Set&lt;Class&lt;?&gt;&gt; classes = Sets.newSet(exception.getComponents());\n                assertEquals(2, classes.size());\n                assertTrue(classes.contains(Component.class));\n                assertTrue(classes.contains(Dependency.class));\n            }\n            @Test\n            public void should_throw_exception_if_transitive_cyclic_dependencies_found() {\n                config.bind(Component.class, ComponentWithInjectConstructor.class);\n                config.bind(Dependency.class, DependencyDependedOnAnotherDependency.class);\n                config.bind(AnotherDependency.class, AnotherDependencyDependedOnComponent.class);\n                CyclicDependenciesFoundException exception = assertThrows(CyclicDependenciesFoundException.class, () -&gt; config.getContext());\n                List&lt;Class&lt;?&gt;&gt; components = Arrays.asList(exception.getComponents());\n                assertEquals(3, components.size());\n                assertTrue(components.contains(Component.class));\n                assertTrue(components.contains(Dependency.class));\n                assertTrue(components.contains(AnotherDependency.class));\n            }\n        }\n    }\n    @Nested\n    public class DependenciesSelection {\n    }\n    @Nested\n    public class LifecycleManagement {\n    }\n}\ninterface Component {\n}\ninterface Dependency {\n}\ninterface AnotherDependency {\n}\nclass ComponentWithInjectConstructor implements Component {\n    private Dependency dependency;\n    @Inject\n    public ComponentWithInjectConstructor(Dependency dependency) {\n        this.dependency = dependency;\n    }\n    public Dependency getDependency() {\n        return dependency;\n    }\n}\nclass DependencyDependedOnComponent implements Dependency {\n    private Component component;\n    @Inject\n    public DependencyDependedOnComponent(Component component) {\n        this.component = component;\n    }\n}\nclass AnotherDependencyDependedOnComponent implements AnotherDependency {\n    private Component component;\n    @Inject\n    public AnotherDependencyDependedOnComponent(Component component) {\n        this.component = component;\n    }\n}\nclass DependencyDependedOnAnotherDependency implements Dependency {\n    private AnotherDependency anotherDependency;\n    @Inject\n    public DependencyDependedOnAnotherDependency(AnotherDependency anotherDependency) {\n        this.anotherDependency = anotherDependency;\n    }\n}\n</code></pre><p>任务列表没有改变，目前的状态为：</p><ul>\n<li>\n<p><s>无需构造的组件——组件实例</s></p>\n</li>\n<li>\n<p><s>如果注册的组件不可实例化，则抛出异常</s></p>\n<ul>\n<li><s>抽象类</s></li>\n<li><s>接口</s></li>\n</ul>\n</li>\n<li>\n<p><s>构造函数注入</s></p>\n<ul>\n<li><s>无依赖的组件应该通过默认构造函数生成组件实例</s></li>\n<li><s>有依赖的组件，通过Inject标注的构造函数生成组件实例</s></li>\n<li><s>如果所依赖的组件也存在依赖，那么需要对所依赖的组件也完成依赖注入</s></li>\n<li><s>如果组件有多于一个Inject标注的构造函数，则抛出异常</s></li>\n<li><s>如果组件没有Inject标注的构造函数，也没有默认构造函数（新增任务）</s></li>\n<li><s>如果组件需要的依赖不存在，则抛出异常</s></li>\n<li><s>如果组件间存在循环依赖，则抛出异常</s></li>\n</ul>\n</li>\n<li>\n<p><s>字段注入</s></p>\n<ul>\n<li><s>通过Inject标注将字段声明为依赖组件</s></li>\n<li><s>如果字段为final则抛出异常</s></li>\n<li><s>依赖中应包含Inject Field声明的依赖</s></li>\n</ul>\n</li>\n<li>\n<p><s>方法注入</s></p>\n<ul>\n<li><s>通过Inject标注的方法，其参数为依赖组件</s></li>\n<li><s>通过Inject标注的无参数方法，会被调用</s></li>\n<li><s>按照子类中的规则，覆盖父类中的Inject方法</s></li>\n<li><s>如果方法定义类型参数，则抛出异常</s></li>\n<li><s>依赖中应包含Inject Method声明的依赖</s></li>\n</ul>\n</li>\n<li>\n<p>对Provider类型的依赖</p>\n<ul>\n<li>注入构造函数中可以声明对于Provider的依赖</li>\n<li>注入字段中可以声明对于Provider的依赖</li>\n<li>注入方法中可声明对于Provider的依赖</li>\n</ul>\n</li>\n<li>\n<p>自定义Qualifier的依赖</p>\n<ul>\n<li>注册组件时，可额外指定Qualifier</li>\n<li>注册组件时，可从类对象上提取Qualifier</li>\n<li>寻找依赖时，需同时满足类型与自定义Qualifier标注</li>\n<li>支持默认Qualifier——Named</li>\n</ul>\n</li>\n<li>\n<p>Singleton生命周期</p>\n<ul>\n<li>注册组件时，可额外指定是否为Singleton</li>\n<li>注册组件时，可从类对象上提取Singleton标注</li>\n<li>对于包含Singleton标注的组件，在容器范围内提供唯一实例</li>\n<li>容器组件默认不是Single生命周期</li>\n</ul>\n</li>\n</ul><!-- [[[read_end]]] --><p>自定义Scope标注</p><ul>\n<li>可向容器注册自定义Scope标注的回调</li>\n</ul><h2>视频演示</h2><p>让我们进入今天的部分：</p><p><video poster=\"https://media001.geekbang.org/5c01325e8a964ca3bb44b896d147dee9/snapshots/8a7a5092faae4c7c8791da3ff9c4908c-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/8d825ef-18083a30e2c-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/c1ec0fd2ef6b41f99f36446c3edcdb08/04c221d777a24fffbb1b2de74526e10d-b340b9ad07e23f8ee86935e8b0e0fff2-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>剩余任务在现有代码结构下，要如何实现？</p><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码的链接分享出来。相信经过你的思考与实操，学习效果会更好！</p>","comments":[{"had_liked":false,"id":344429,"user_name":"人间四月天","can_delete":false,"product_type":"c1","uid":1048314,"ip_address":"","ucode":"11BE219C23EEBC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","comment_is_top":false,"comment_ctime":1651548290,"is_pvip":false,"replies":[{"id":125720,"content":"重构能力越强 设计越可以后置","user_name":"作者回复","user_name_real":"编辑","uid":2537798,"ctime":1651553163,"ip_address":"","comment_id":344429,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"非常感谢，讲解让工程师可以写出高质量的代码，测试驱动，测试驱动设计，让中国工程师摆脱curd，容器的例子很好，需求明确，需求有复杂性，测试如何驱动功能实现，保证代码的正确性，设计的合理性。有个问题，先实现原型功能，我认为没问题，可是对于复杂需求，是不是要模块化设计一下，把职责非常明确的类和方法先设计好，然后再结合经典和伦敦两种学派，更高效？如何用老师的方法，都是发现类的职责不单一了，然后再重构，为什么不能开始就想到，设计好？例如spring容器，注册和构建组件，本身就是很复杂的，为什么最早就把构建和使用分离？\n\n","like_count":7,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569779,"discussion_content":"重构能力越强 设计越可以后置","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651553163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":569791,"discussion_content":"嗯，高效重构，确实也不浪费时间，还能避免过度设计。\n需要多实践多练，养成习惯就好了，也符合设计是演化而来的实践经验。\n\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651556250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":569779,"ip_address":"","group_id":0},"score":569791,"extra":""}]}]},{"had_liked":false,"id":344513,"user_name":"张铁林","can_delete":false,"product_type":"c1","uid":1108258,"ip_address":"","ucode":"4AB8BC6CDAC0A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/22/7606c6ba.jpg","comment_is_top":false,"comment_ctime":1651600503,"is_pvip":false,"replies":[{"id":126715,"content":"nice！","user_name":"编辑回复","user_name_real":"编辑","uid":2189689,"ctime":1654182450,"ip_address":"","comment_id":344513,"utype":2}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"23敲好的代码\nhttps:&#47;&#47;github.com&#47;vfbiby&#47;tdd-di-container\n","like_count":1,"discussions":[{"author":{"id":2189689,"avatar":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","nickname":"🐑","note":"","ucode":"DE34B3B14287D1","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574626,"discussion_content":"nice！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654182450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025718,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a6/b6/27412d76.jpg","nickname":"sc","note":"","ucode":"46D659C89BA8C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647777,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1720599793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1108258,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e9/22/7606c6ba.jpg","nickname":"张铁林","note":"","ucode":"4AB8BC6CDAC0A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570460,"discussion_content":"https://github.com/vfbiby/tdd-di-container/tree/master 重新把这些测试组织了一下，放在这个分支下面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651767754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344531,"user_name":"keep_curiosity","can_delete":false,"product_type":"c1","uid":1246273,"ip_address":"","ucode":"794DC1D3FB9214","user_header":"https://static001.geekbang.org/account/avatar/00/13/04/41/082e2706.jpg","comment_is_top":false,"comment_ctime":1651634773,"is_pvip":false,"replies":[{"id":125764,"content":"只对public","user_name":"作者回复","user_name_real":"编辑","uid":2537798,"ctime":1651643756,"ip_address":"","comment_id":344531,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"Class.getMethods() 方法好像默认就包含了子类覆盖父类方法的逻辑，可以省掉自己过滤的逻辑。测试也都没问题。","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570038,"discussion_content":"只对public","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651643756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344583,"user_name":"tdd学徒","can_delete":false,"product_type":"c1","uid":1724083,"ip_address":"","ucode":"CC9C3EAD1B29B4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUCiacuh59wMbq1icuB8U1T7Vpic8FjKFdanvdt9bzClBmYqFUXmtKmh2Zibn9Dic6A8pjdoBiaia1LCrnA/132","comment_is_top":false,"comment_ctime":1651655938,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"ContainerTest 文档化之后62个测试能对得上\nComponent应该要加下面一点修改\ninterface Component {\n    default Dependency dependency() {\n        return null;\n    }\n}","like_count":1,"discussions":[{"author":{"id":1108258,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e9/22/7606c6ba.jpg","nickname":"张铁林","note":"","ucode":"4AB8BC6CDAC0A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570459,"discussion_content":"这个好，就是卡在这里过不去。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651767473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347182,"user_name":"人间四月天","can_delete":false,"product_type":"c1","uid":1048314,"ip_address":"","ucode":"11BE219C23EEBC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","comment_is_top":false,"comment_ctime":1653797915,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"内部类不能有静态的声明，老师为什么不报错，typebinding本身是内部类，他的成员有静态的内部类","like_count":0,"discussions":[{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574149,"discussion_content":"成员也有静态方法，为什么不报错，希望解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653873166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344652,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1651711762,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"收获：\n经过梳理之后得到可执行的测试文档\n通过抽取方法起到注释的作用","like_count":0}]}