{"id":74988,"title":"09 | I/O优化（上）：开发工程师必备的I/O优化知识","content":"<blockquote>\n<p>250GB容量，512MB DDR4缓存，连续读取不超过550MB/s，连续写入不超过520MB/s。</p>\n</blockquote><p>“双十一”在天猫看到一款固态硬盘有上面的这些介绍，这些数字分别代表了什么意思？</p><p>在专栏前面卡顿和启动优化里，我也经常提到I/O优化。可能很多同学觉得I/O优化不就是不在主线程读写大文件吗，真的只有这么简单吗？那你是否考虑过，从应用程序调用read()方法，内核和硬件会做什么样的处理，整个流程可能会出现什么问题？今天请你带着这些疑问，我们一起来看看I/O优化需要的知识。</p><h2>I/O的基本知识</h2><p>在工作中，我发现很多工程师对I/O的认识其实比较模糊，认为I/O就是应用程序执行read()、write()这样的一些操作，并不清楚这些操作背后的整个流程是怎样的。</p><p><img src=\"https://static001.geekbang.org/resource/image/60/d4/60928bc51c0d04b1c39b24282e8126d4.jpg?wh=2223*1053\" alt=\"\"></p><p>我画了一张简图，你可以看到整个文件I/O操作由应用程序、文件系统和磁盘共同完成。首先应用程序将I/O命令发送给文件系统，然后文件系统会在合适的时机把I/O操作发给磁盘。</p><p>这就好比CPU、内存、磁盘三个小伙伴一起完成接力跑，最终跑完的时间很大程度上取决于最慢的小伙伴。我们知道，CPU和内存相比磁盘是高速设备，整个流程的瓶颈在于磁盘I/O的性能。所以很多时候，文件系统性能比磁盘性能更加重要，为了降低磁盘对应用程序的影响，文件系统需要通过各种各样的手段进行优化。那么接下来，我们首先来看文件系统。</p><!-- [[[read_end]]] --><p><strong>1. 文件系统</strong></p><p>文件系统，简单来说就是存储和组织数据的方式。比如在iOS 10.3系统以后，苹果使用APFS（Apple File System）替代之前旧的文件系统HFS+。对于Android来说，现在普遍使用的是Linux常用的ext4文件系统。</p><p>关于文件系统还需要多说两句，华为在EMUI 5.0以后就使用F2FS取代ext4，Google也在最新的旗舰手机Pixel 3使用了F2FS文件系统。Flash-Friendly File System是三星是专门为NAND闪存芯片开发的文件系统，也做了大量针对闪存的优化。根据华为的测试数据，F2FS文件系统在小文件的随机读写方面比ext4更快，例如随机写可以优化60%，不足之处在于可靠性方面出现过一些问题。我想说的是，随着Google、华为的投入和规模化使用，F2FS系统应该是未来Android的主流文件系统。</p><p>还是回到文件系统的I/O。应用程序调用read()方法，系统会通过中断从用户空间进入内核处理流程，然后经过VFS（Virtual File System，虚拟文件系统）、具体文件系统、页缓存Page Cache。下面是Linux一个通用的I/O架构模型。</p><p><img src=\"https://static001.geekbang.org/resource/image/fb/4b/fb11cbe604eb6c0fc2ba5825275f104b.png?wh=1218*626\" alt=\"\"></p><ul>\n<li>\n<p>虚拟文件系统（VFS）。它主要用于实现屏蔽具体的文件系统，为应用程序的操作提供一个统一的接口。这样保证就算厂商把文件系统从ext4切换到F2FS，应用程序也不用做任何修改。</p>\n</li>\n<li>\n<p>文件系统（File System）。ext4、F2FS都是具体文件系统实现，文件元数据如何组织、目录和索引结构如何设计、怎么分配和清理数据，这些都是设计一个文件系统必须要考虑的。<strong>每个文件系统都有适合自己的应用场景，我们不能说F2FS就一定比ext4要好。</strong>F2FS在连续读取大文件上并没有优势，而且会占用更大的空间。只是对一般应用程序来说，随机I/O会更加频繁，特别是在启动的场景。你可以在/proc/filesystems看到系统可以识别的所有文件系统的列表。</p>\n</li>\n<li>\n<p>页缓存（Page Cache）。在启动优化中我已经讲过Page Cache这个概念了，在读文件的时候会，先看它是不是已经在Page Cache中，如果命中就不会去读取磁盘。在Linux 2.4.10之前还有一个单独的Buffer Cache，后来它也合并到Page Cache中的Buffer Page了。</p>\n</li>\n</ul><p>具体来说，Page Cache就像是我们经常使用的数据缓存，是文件系统对数据的缓存，目的是提升内存命中率。Buffer Cache就像我们经常使用的BufferInputStream，是磁盘对数据的缓存，目的是合并部分文件系统的I/O请求、降低磁盘I/O的次数。<strong>需要注意的是，它们既会用在读请求中，也会用到写请求中。</strong></p><p>通过/proc/meminfo文件可以查看缓存的内存占用情况，当手机内存不足的时候，系统会回收它们的内存，这样整体I/O的性能就会有所降低。</p><pre><code>MemTotal:    2866492 kB\nMemFree:      72192 kB\nBuffers:      62708 kB      // Buffer Cache\nCached:      652904 kB      // Page Cache\n</code></pre><p><strong>2. 磁盘</strong></p><p>磁盘指的是系统的存储设备，就像小时候我们常听的CD或者电脑使用的机械硬盘，当然还有现在比较流行的SSD固态硬盘。</p><p>正如我上面所说，如果发现应用程序要read()的数据没有在页缓存中，这时候就需要真正向磁盘发起I/O请求。这个过程要先经过内核的通用块层、I/O调度层、设备驱动层，最后才会交给具体的硬件设备处理。</p><p><img src=\"https://static001.geekbang.org/resource/image/13/18/13c06810c88632db1050ab3e56139a18.png?wh=1256*660\" alt=\"\"></p><ul>\n<li>\n<p>通用块层。系统中能够随机访问固定大小数据块（block）的设备称为块设备，CD、硬盘和SSD这些都属于块设备。通用块层主要作用是接收上层发出的磁盘请求，并最终发出I/O请求。它跟VFS的作用类似，让上层不需要关心底层硬件设备的具体实现。</p>\n</li>\n<li>\n<p>I/O调度层。磁盘I/O那么慢，为了降低真正的磁盘I/O，我们不能接收到磁盘请求就立刻交给驱动层处理。所以我们增加了I/O调度层，它会根据设置的调度算法对请求合并和排序。这里比较关键的参数有两个，一个是队列长度，一个是具体的调度算法。我们可以通过下面的文件可以查看对应块设备的队列长度和使用的调度算法。</p>\n</li>\n</ul><pre><code>/sys/block/[disk]/queue/nr_requests      // 队列长度，一般是 128。\n/sys/block/[disk]/queue/scheduler        // 调度算法\n</code></pre><ul>\n<li>块设备驱动层。块设备驱动层根据具体的物理设备，选择对应的驱动程序通过操控硬件设备完成最终的I/O请求。例如光盘是靠激光在表面烧录存储、闪存是靠电子擦写存储数据。</li>\n</ul><h2>Android I/O</h2><p>前面讲了Linux I/O相关的一些知识，现在我们再来讲讲Android I/O相关的一些知识。</p><p><strong>1. Android闪存</strong></p><p>我们先来简单讲讲手机使用的存储设备，手机使用闪存作为存储设备，也就是我们常说的ROM。</p><p>考虑到体积和功耗，我们肯定不能直接把PC的SSD方案用在手机上面。Android手机前几年通常使用eMMC标准，近年来通常会采用性能更好的UFS 2.0/2.1标准，之前沸沸扬扬的某厂商“闪存门”事件就是因为使用eMMC闪存替换了宣传中的UFS闪存。而苹果依然坚持独立自主的道路，在2015年就在iPhone 6s上就引入了MacBook上备受好评的NVMe协议。</p><p>最近几年移动硬件的发展非常妖孽，手机存储也朝着体积更小、功耗更低、速度更快、容量更大的方向狂奔。iPhone XS的容量已经达到512GB，连续读取速度可以超过1GB/s，已经比很多的SSD固态硬盘还要快，同时也大大缩小了和内存的速度差距。不过这些都是厂商提供的一些测试数据，特别是对于随机读写的性能相比内存还是差了很多。</p><p><img src=\"https://static001.geekbang.org/resource/image/f3/b1/f3bcc6974bf879f35a842ecd8ee086b1.png?wh=1290*216\" alt=\"\"></p><p>上面的数字好像有点抽象，直白地说闪存的性能会影响我们打开微信、游戏加载以及连续自拍的速度。当然闪存性能不仅仅由硬件决定，它跟采用的标准、文件系统的实现也有很大的关系。</p><p><strong>2. 两个疑问</strong></p><p>看到这里可能有些同学会问，知道文件读写的流程、文件系统和磁盘这些基础知识，对我们实际开发有什么作用呢？下面我举两个简单的例子，可能你平时也思考过，不过如果不熟悉I/O的内部机制，你肯定是一知半解。</p><p><strong>疑问一：文件为什么会损坏？</strong></p><p>先说两个客观数据，微信聊天记录使用的SQLite数据库大概有几万分之一的损坏率，系统SharedPreference如果频繁跨进程读写也会有万分之一的损坏率。</p><p>在回答文件为什么会损坏前，首先需要先明确一下什么是文件损坏。一个文件的格式或者内容，如果没有按照应用程序写入时的结果都属于文件损坏。它不只是文件格式错误，文件内容丢失可能才是最常出现的，SharedPreference跨进程读写就非常容易出现数据丢失的情况。</p><p>再来探讨文件为什么会损坏，我们可以从应用程序、文件系统和磁盘三个角度来审视这个问题。</p><ul>\n<li>\n<p>应用程序。大部分的I/O方法都不是原子操作，文件的跨进程或者多线程写入、使用一个已经关闭的文件描述符fd来操作文件，它们都有可能导致数据被覆盖或者删除。事实上，大部分的文件损坏都是因为应用程序代码设计考虑不当导致的，并不是文件系统或者磁盘的问题。</p>\n</li>\n<li>\n<p>文件系统。虽说内核崩溃或者系统突然断电都有可能导致文件系统损坏，不过文件系统也做了很多的保护措施。例如system分区保证只读不可写，增加异常检查和恢复机制，ext4的fsck、f2fs的fsck.f2fs和checkpoint机制等。</p>\n</li>\n</ul><p>在文件系统这一层，更多是因为断电而导致的写入丢失。为了提升I/O性能，文件系统把数据写入到Page Cache中，然后等待合适的时机才会真正的写入磁盘。当然我们也可以通过fsync、msync这些接口强制写入磁盘，在下一其我会详细介绍直接I/O和缓存I/O。</p><ul>\n<li>磁盘。手机上使用的闪存是电子式的存储设备，所以在资料传输过程可能会发生电子遗失等现象导致数据错误。不过闪存也会使用ECC、多级编码等多种方式增加数据的可靠性，一般来说出现这种情况的可能性也比较小。</li>\n</ul><p>闪存寿命也可能会导致数据错误，由于闪存的内部结构和特征，导致它写过的地址必须擦除才能再次写入，而每个块擦除又有次数限制，次数限制是根据采用的存储颗粒，从十万次到几千都有（SLC&gt;MLC&gt;TLC）。</p><p>下图是闪存（Flash Memory）的结构图，其中比较重要的是FTL（Flash Translation Layer），它负责物理地址的分配和管理。它需要考虑到每个块的擦除寿命，将擦除次数均衡到所有块上去。当某个块空间不够的时候，它还要通过垃圾回收算法将数据迁移。FTL决定了闪存的使用寿命、性能和可靠性，是闪存技术中最为重要的核心技术之一。</p><p><img src=\"https://static001.geekbang.org/resource/image/97/96/97c18602e462d5724d26660fc5115e96.png?wh=1248*652\" alt=\"\"></p><p>对于手机来说，假设我们的存储大小是128GB，即使闪存的最大擦除次数只有1000次，那也可以写入128TB，但一般来说比较难达到。</p><p><strong>疑问二：I/O有时候为什么会突然很慢？</strong></p><p>手机厂商的数据通常都是出厂数据，我们在使用Android手机的时候也会发现，刚买的时候“如丝般顺滑”的手机，在使用一年之后就会变得卡顿无比。</p><p>这是为什么呢？在一些低端机上面，我发现大量跟I/O相关的卡顿。I/O有时候为什么会突然变慢，可能有下面几个原因。</p><ul>\n<li>\n<p>内存不足。当手机内存不足的时候，系统会回收Page Cache和Buffer Cache的内存，大部分的写操作会直接落盘，导致性能低下。</p>\n</li>\n<li>\n<p>写入放大。上面我说到闪存重复写入需要先进行擦除操作，但这个擦除操作的基本单元是block块，一个page页的写入操作将会引起整个块数据的迁移，这就是典型的写入放大现象。低端机或者使用比较久的设备，由于磁盘碎片多、剩余空间少，非常容易出现写入放大的现象。具体来说，闪存读操作最快，在20us左右。写操作慢于读操作，在200us左右。而擦除操作非常耗时，在1ms左右的数量级。当出现写入放大时，因为涉及移动数据，这个时间会更长。</p>\n</li>\n<li>\n<p>由于低端机的CPU和闪存的性能相对也较差，在高负载的情况下容易出现瓶颈。例如eMMC闪存不支持读写并发，当出现写入放大现象时，读操作也会受影响。</p>\n</li>\n</ul><p>系统为了缓解磁盘碎片问题，可以引入fstrim/TRIM机制，在锁屏、充电等一些时机会触发磁盘碎片整理。</p><h2>I/O的性能评估</h2><p>正如下图你所看到的，整个I/O的流程涉及的链路非常长。我们在应用程序中通过打点，发现一个文件读取需要300ms。但是下面每一层可能都有自己的策略和调度算法，因此很难真正的得到每一层的耗时。</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/60/2d2dffd5b2a95363c100875be6cae360.png?wh=954*690\" alt=\"\"></p><p>在前面的启动优化内容中，我讲过Facebook和支付宝采用编译单独ROM的方法来评估I/O性能。这是一个比较复杂但是有效的做法，我们可以通过定制源码，选择打开感兴趣的日志来追踪I/O的性能。</p><p><strong>1. I/O性能指标</strong></p><p>I/O性能评估中最为核心的指标是吞吐量和IOPS。今天文章开头所说的，“连续读取不超过550MB/s，连续写入不超过520MB/s”，就指的是I/O吞吐量。</p><p>还有一个比较重要的指标是IOPS，它指的是每秒可以读写的次数。对于随机读写频繁的应用，例如大量的小文件存储，IOPS是关键的衡量指标。</p><p><strong>2. I/O测量</strong></p><p>如果不采用定制源码的方式，还有哪些方法可以用来测量I/O的性能呢？</p><p><strong>第一种方法：使用proc。</strong></p><p>总的来说，I/O性能会跟很多因素有关，是读还是写、是否是连续、I/O大小等。另外一个对I/O性能影响比较大的因素是负载，I/O性能会随着负载的增加而降低，我们可以通过I/O的等待时间和次数来衡量。</p><pre><code>proc/self/schedstat:\n  se.statistics.iowait_count：IO 等待的次数\n  se.statistics.iowait_sum：  IO 等待的时间\n</code></pre><p>如果是root的机器，我们可以开启内核的I/O监控，将所有block读写dump到日志文件中，这样可以通过dmesg命令来查看。</p><pre><code>echo 1 &gt; /proc/sys/vm/block_dump\ndmesg -c grep pid\n\n.sample.io.test(7540): READ block 29262592 on dm-1 (256 sectors)\n.sample.io.test(7540): READ block 29262848 on dm-1 (256 sectors)\n</code></pre><p><strong>第二种方法：使用strace。</strong></p><p>Linux提供了iostat、iotop等一些相关的命令，不过大部分Anroid设备都不支持。我们可以通过 strace来跟踪I/O相关的系统调用次数和耗时。</p><pre><code>strace -ttT -f -p [pid]\n\nread(53, &quot;*****************&quot;\\.\\.\\., 1024) = 1024       &lt;0.000447&gt;\nread(53, &quot;*****************&quot;\\.\\.\\., 1024) = 1024       &lt;0.000084&gt;\nread(53, &quot;*****************&quot;\\.\\.\\., 1024) = 1024       &lt;0.000059&gt;\n</code></pre><p>通过上面的日志，你可以看到应用程序在读取文件操作符为53的文件，每次读取1024个字节。第一次读取花了447us，后面两次都使用了100us不到。这跟启动优化提到的“数据重排”是一个原因，文件系统每次读取以block为单位，而block的大小一般是4KB，后面两次的读取是从页缓存得到。</p><p>我们也可以通过strace统计一段时间内所有系统调用的耗时概况。不过strace本身也会消耗不少资源，对执行时间也会产生影响。</p><pre><code>strace -c -f -p [pid]\n\n% time     seconds  usecs/call     calls    errors  syscall\n------ ----------- ----------- --------- --------- ----------------\n 97.56    0.041002          21      1987             read\n  1.44    0.000605          55        11             write\n</code></pre><p>从上面的信息你可以看到，读占了97.56%的时间，一共调用了1987次，耗时0.04s，平均每次系统调用21us。同样的道理，<strong>我们也可以计算应用程序某个任务I/O耗时的百分比</strong>。假设一个任务执行了10s，I/O花了9s，那么I/O耗时百分比就是90%。这种情况下，I/O就是我们任务很大的瓶颈，需要去做进一步的优化。</p><p><strong>第三种方法：使用vmstat。</strong></p><p>vmstat的各个字段说明可以参考<a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/vmstat.html\">《vmstat监视内存使用情况》</a>，其中Memory中的buff和cache，I/O中的bi和bo，System中的cs，以及CPU中的sy和wa，这些字段的数值都与I/O行为有关。</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/a2/5fcc14c666f9c5c6d0cfb803634b2ba2.png?wh=1134*122\" alt=\"\"></p><p>我们可以配合<a href=\"https://www.cnblogs.com/kongzhongqijing/articles/9049336.html\">dd命令</a>来配合测试，观察vmstat的输出数据变化。<strong>不过需要注意的是Android里面的dd命令似乎并不支持conv和flag参数。</strong></p><pre><code>//清除Buffer和Cache内存缓存\necho 3 &gt; /proc/sys/vm/drop_caches\n//每隔1秒输出1组vmstat数据\nvmstat 1\n\n\n//测试写入速度，写入文件/data/data/test，buffer大小为4K，次数为1000次\ndd if=/dev/zero of=/data/data/test bs=4k count=1000\n</code></pre><h2>总结</h2><p>在性能优化的过程中，我们关注最多的是CPU和内存，I/O也是性能优化中比较重要的一部分。</p><p>今天我们学习I/O处理的整个流程，它包括应用程序、文件系统和磁盘三个部分。不过I/O这个话题真的很大，在课后需要花更多时间学习课后练习中的一些参考资料。</p><p>LPDDR5、UFS 3.0很快就要在2019年面世，有些同学会想，随着硬件越来越牛，我们根本就不需要去做优化了。但是一方面考虑到成本的问题，在嵌入式、IoT等一些场景的设备硬件不会太好；另一方面，我们对应用体验的要求也越来越高，沉浸体验（VR）、人工智能（AI）等新功能对硬件的要求也越来越高。所以，应用优化是永恒的，只是在不同的场景下有不同的要求。</p><h2>课后练习</h2><p>学习完今天的内容，可能大部分同学会感觉有点陌生、有点茫然。但是没有关系，我们可以在课后补充更多的基础知识，下面的链接是我推荐给你的参考资料。<span class=\"orange\">今天的课后作业是，通过今天的学习，在留言区写写你对I/O的理解，以及你都遇到过哪些I/O方面的问题。</span></p><p>1.<a href=\"https://tech.meituan.com/about_desk_io.html\">磁盘I/O那些事</a></p><p>2.<a href=\"https://www.ibm.com/developerworks/cn/linux/l-cache/index.html\">Linux 内核的文件 Cache 管理机制介绍</a></p><p>3.<a href=\"https://en.wikibooks.org/wiki/The_Linux_Kernel/Storage\">The Linux Kernel/Storage</a></p><p>4.<a href=\"https://www.sohu.com/a/196510603_616364\">选eMMC、UFS还是NVMe？ 手机ROM存储传输协议解析</a></p><p>5.<a href=\"http://0xffffff.org/2017/05/01/41-linux-io/\">聊聊Linux IO</a></p><p>6.<a href=\"http://blog.51cto.com/alanwu/1425566\">采用NAND Flash设计存储设备的挑战在哪里?</a></p><p>“实践出真知”，你也可以尝试使用strace和block_dump来观察自己应用的I/O情况，不过有些实验会要求有root的机器。</p><p>欢迎你点击“请朋友读”，把今天的内容分享给好友，邀请他一起学习。最后别忘了在评论区提交今天的作业，我也为认真完成作业的同学准备了丰厚的“学习加油礼包”，期待与你一起切磋进步哦。</p><p></p>","neighbors":{"left":{"article_title":"08 | 启动优化（下）：优化启动速度的进阶方法","id":74044},"right":{"article_title":"10 | I/O优化（中）：不同I/O方式的使用场景是什么？","id":75760}},"comments":[{"had_liked":false,"id":55056,"user_name":"东方","can_delete":false,"product_type":"c1","uid":1329945,"ip_address":"","ucode":"50FDAA2D95170C","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/19/6f037647.jpg","comment_is_top":false,"comment_ctime":1546011728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83150390352","product_id":100021101,"comment_content":"看到很多朋友提到SP的问题，SP造成ANR的原因大家也知道，我来说说我的经验。<br><br>1.把sdk中SP的实现剥离出来，重写Application的getSharedPreferencen方法。这里需要注意几点，a.低版本multidex，b.Activity Service中getSP的context必须是ApplicationContext。<br><br>2.上述的方案依然是普通File操作，解析xml，线上依然有fsync导致ANR。<br><br>3.自己使用mmap实现sp的映射，或者使用微信的MMKV，但是getAll方法需要自己兼容。<br><br>4.增加大kv的监控。<br><br>大家伙还有更好的方案可以继续交流","like_count":19},{"had_liked":false,"id":82039,"user_name":"menty","can_delete":false,"product_type":"c1","uid":1379491,"ip_address":"","ucode":"6B03C6D686907F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKw77qmuyx5tPjGznNo7DmKvpU688GpazMQtfdafxj6Z0MSviaIlBtuEs2ibtYxCmibfWpOkKIoXibiavA/132","comment_is_top":false,"comment_ctime":1554108315,"is_pvip":false,"replies":[{"id":"31118","content":"是的，主要是因为<br>1.debug包代码没有经过proguard这些优化<br>2.debug模式下虚拟机一些运行策略<br>3.debug包大量的logcat","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555398012,"ip_address":"","comment_id":82039,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31618879387","product_id":100021101,"comment_content":"请问，微信debug模式下，运行会很卡吗。目前我司的app在debug模式下就超卡，非得在debug=false下才运行顺畅，不知是何原因导致","like_count":7,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445438,"discussion_content":"是的，主要是因为\n1.debug包代码没有经过proguard这些优化\n2.debug模式下虚拟机一些运行策略\n3.debug包大量的logcat","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555398012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1851046,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/3e/a6/d9387ce3.jpg","nickname":"翰","note":"","ucode":"C7B760F66D975E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291410,"discussion_content":"可以试试把debugable关掉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594810075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114556,"user_name":"itmagic_jack","can_delete":false,"product_type":"c1","uid":1024185,"ip_address":"","ucode":"9627899E78FCA9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/b9/4ef297e5.jpg","comment_is_top":false,"comment_ctime":1563334874,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23038171354","product_id":100021101,"comment_content":"Java应用层的I&#47;O优化，可以考虑使用square公司出品的Okio框架（Okhttp底层IO实现），在Java平台上使用，简化了api调用，支持IO超时检测，优化了资源缓存等","like_count":6},{"had_liked":false,"id":54507,"user_name":"Kenny","can_delete":false,"product_type":"c1","uid":1234061,"ip_address":"","ucode":"E57D67DCE27967","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/8d/a3fd8957.jpg","comment_is_top":false,"comment_ctime":1545885785,"is_pvip":false,"replies":[{"id":"19788","content":"对，少一次数据拷贝跟系统调用的时间","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1545900296,"ip_address":"","comment_id":54507,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18725754969","product_id":100021101,"comment_content":"张老师，你好，mmap技术是首先通过业缓存去拿数据，如果没有就发生缺页中断，然后发生物理io从磁盘拿数据到业缓存，然后再从业缓存拿数据，这样相对普通文件io就少了一次逻辑io(即与文件系统的io)，是可以这样理解么？","like_count":4,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434480,"discussion_content":"对，少一次数据拷贝跟系统调用的时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545900296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54418,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1545868014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14430769902","product_id":100021101,"comment_content":"大佬，好！SharedPreference 跨进程读写就非常容易出现数据丢失的情况。从io性能方面来看，应用层有什么更好的方案和设计来提SharedPreference跨进程访问数据的可靠性么？","like_count":3},{"had_liked":false,"id":75791,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1552469553,"is_pvip":true,"replies":[{"id":"30708","content":"需要结合参考资料进一步学习<br>","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555138295,"ip_address":"","comment_id":75791,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5847436849","product_id":100021101,"comment_content":"真的是高手课，如果之前没看过内存分析的教程，有些东西我都不大懂","like_count":1,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443035,"discussion_content":"需要结合参考资料进一步学习\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555138295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68035,"user_name":"Lll","can_delete":false,"product_type":"c1","uid":1064745,"ip_address":"","ucode":"C7CFCD5B3E537C","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/29/e09e9ab8.jpg","comment_is_top":false,"comment_ctime":1550393663,"is_pvip":false,"replies":[{"id":"24115","content":"这个意思就是cpu和内存都是高速设备，磁盘是低速设备","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1550403545,"ip_address":"","comment_id":68035,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5845360959","product_id":100021101,"comment_content":"&quot;我们知道，CPU 和内存相比磁盘是高速设备，整个流程的瓶颈在于磁盘 I&#47;O 的性能。&quot;这句话好像有歧义，请问是笔误了吧？","like_count":1,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439483,"discussion_content":"这个意思就是cpu和内存都是高速设备，磁盘是低速设备","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550403545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55059,"user_name":"东方","can_delete":false,"product_type":"c1","uid":1329945,"ip_address":"","ucode":"50FDAA2D95170C","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/19/6f037647.jpg","comment_is_top":false,"comment_ctime":1546012133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840979429","product_id":100021101,"comment_content":"对于io，如果使用glide作为默认的图片加载库，启动glide后，会把上一次符合条件的图片都一次给加载到内存中，这个是disklrucache做的，想问一下张老师，有什么经验或者办法，只load感兴趣的图片。再者微信的图片加载框架底层是mmap实现吗？","like_count":1},{"had_liked":false,"id":54821,"user_name":"欢乐de羊","can_delete":false,"product_type":"c1","uid":1238685,"ip_address":"","ucode":"E9E288BB1EBDD8","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/9d/53b6a48e.jpg","comment_is_top":false,"comment_ctime":1545965941,"is_pvip":false,"replies":[{"id":"19996","content":"小文件系统，后面会讲到","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1546047113,"ip_address":"","comment_id":54821,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840933237","product_id":100021101,"comment_content":"请问下在文件遍历方面，(尤其是层级比较多的文件，例如微信的image2)，有什么好的方案提高遍历速度吗？","like_count":1,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434574,"discussion_content":"小文件系统，后面会讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546047113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329727,"user_name":"扈丽霞","can_delete":false,"product_type":"c1","uid":2439823,"ip_address":"","ucode":"0AD3FB261A9A9E","user_header":"","comment_is_top":false,"comment_ctime":1641515963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641515963","product_id":100021101,"comment_content":"文件读取不是以page为单位，擦除以block为单位吗？","like_count":0},{"had_liked":false,"id":131594,"user_name":"Geek_a24664","can_delete":false,"product_type":"c1","uid":1647900,"ip_address":"","ucode":"E8626CEF2CADFF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOiaS2BtAEuc7ndTkWb74nKXcZfgmCrbke0ia4b7zTyiatXm5WMyrKWB2qoibN0TibHufz94FLGfJAPWA/132","comment_is_top":false,"comment_ctime":1567821291,"is_pvip":false,"replies":[{"id":"62079","content":"这个一般不太可能，可以hook写入的内容看看，可能是多线程的问题？<br>","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1576682661,"ip_address":"","comment_id":131594,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567821291","product_id":100021101,"comment_content":"你好老师，我遇到过在向文件中写入字符串时，最终发现文件中内容和写入顺序不太一致，能不能指点一下思路，现在毫无头绪","like_count":0,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466527,"discussion_content":"这个一般不太可能，可以hook写入的内容看看，可能是多线程的问题？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576682661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105517,"user_name":"Joyce","can_delete":false,"product_type":"c1","uid":1129789,"ip_address":"","ucode":"93096F29FF6CFB","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/3d/a9c8d564.jpg","comment_is_top":false,"comment_ctime":1561020032,"is_pvip":false,"replies":[{"id":"62021","content":"合理使用和监控IO操作，选择合适的存储方案","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1576676903,"ip_address":"","comment_id":105517,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561020032","product_id":100021101,"comment_content":"IO优化，应用层可以做什么","like_count":0,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454710,"discussion_content":"合理使用和监控IO操作，选择合适的存储方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576676903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57448,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1546792958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546792958","product_id":100021101,"comment_content":"连续写入限制指的是一秒最多写入多大小吗？","like_count":0},{"had_liked":false,"id":54903,"user_name":"0928","can_delete":false,"product_type":"c1","uid":1240990,"ip_address":"","ucode":"03221745CF8141","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/9e/78420b67.jpg","comment_is_top":false,"comment_ctime":1545979880,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545979880","product_id":100021101,"comment_content":"说到io，我有个问题想咨询一下：<br>场景大概是，有26亿的数据需要读取从HBase中读取出来分别写到12个文件中取，有什么方式能高效且数据不错乱的写到文件中去呢？<br>想法：<br>1.读取出来的数据需要并发写到文件中<br>2.每次读取一定的缓存大小批量写入，不能一条一条写入<br>3.文件并发写入会出现错位等问题，所以需要一个写队列来处理<br>问题：<br>目前1和2两种方式没什么问题，但是在写队列的设计上有一定问题，希望给点意见。<br>如果最终写文件还是单线程的话性能瓶颈都在这里，这里应该怎么设计呢？","like_count":0},{"had_liked":false,"id":54624,"user_name":"有生丶之莲","can_delete":false,"product_type":"c1","uid":1334188,"ip_address":"","ucode":"624B2DDC956C17","user_header":"https://static001.geekbang.org/account/avatar/00/14/5b/ac/78491d1d.jpg","comment_is_top":false,"comment_ctime":1545917323,"is_pvip":false,"replies":[{"id":"19995","content":"即使是异步，在一些时机也会强制等待","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1546047084,"ip_address":"","comment_id":54624,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545917323","product_id":100021101,"comment_content":"张老师好，之前遇到过一些anr，定位到firebase中的tokenRefresh这块方法，但是自己重写这个方法也就只是用SP把token保存下来，请问SP读写会导致这个吗？SP的apply和commit都试过，apply说是异步的，但主线程会等着保存完成的回调，是这样吗？","like_count":0,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434518,"discussion_content":"即使是异步，在一些时机也会强制等待","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546047084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54508,"user_name":"Kenny","can_delete":false,"product_type":"c1","uid":1234061,"ip_address":"","ucode":"E57D67DCE27967","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/8d/a3fd8957.jpg","comment_is_top":false,"comment_ctime":1545886125,"is_pvip":false,"replies":[{"id":"19787","content":"下一篇文章会讲到","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1545900264,"ip_address":"","comment_id":54508,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545886125","product_id":100021101,"comment_content":"hi，张老师，刚你说业缓存在内存紧张的时候会被回收，那么发生GC一定会回收吗？还是说跟GC无关联？是有另外一套内存检测回收业缓存的机制？那么启动优化，除了资源重排，降低总内存也能提升io次数？","like_count":0,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434481,"discussion_content":"下一篇文章会讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545900264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}