{"id":624377,"title":"21｜用“限定”建模：怎样简化一对多关联？","content":"<p>你好，我是钟敬。</p><p>在前几节课我们讲完了值对象。今天咱们学习另外一种建模技术——限定。</p><p>在《DDD》原书里讲关联的时候，专门强调了这个方法，因为<strong>限定</strong>可以起到丰富模型语义和简化关联的作用。</p><p>然而我发现，即便是一些UML老手，会用这个技术的也不多。这个技术掌握起来没有想象中那么难，而用起来的效果很好。如果你能掌握，那么就向建模专家的目标又迈进一步了。</p><h2>什么是“限定”</h2><p>我们可以先回忆一下<a href=\"https://time.geekbang.org/column/article/623969\">上节课</a>完成的模型图。</p><p><img src=\"https://static001.geekbang.org/resource/image/11/a4/1190e02281e9dcb1daef2ca60eef31a4.jpg?wh=3733x2260\" alt=\"\"></p><p>为了说明“限定”的概念我们可以从<strong>员工</strong>和<strong>工作经验</strong>的关系开始。<br>\n<img src=\"https://static001.geekbang.org/resource/image/0e/f4/0e3411339e8a65f0e92e3681acaa82f4.jpg?wh=2705x2556\" alt=\"\"></p><p>一个<strong>员工</strong>可以拥有多份<strong>工作经验</strong>，而各个<strong>工作经验</strong>的<strong>时间段</strong>不能相互重叠。那么，我们可以得出一个推论：对于一个<strong>员工</strong>而言，每个<strong>时间段</strong>只能有一条<strong>工作经验</strong>。</p><p>虽然这种关系在“时间段不能重叠”这个约束里已经隐含了，但是UML里还有一种专门的方式，可以表达这个规则中的部分含义。我先画出来给你看看。<br>\n<img src=\"https://static001.geekbang.org/resource/image/76/78/76b9d54368bc10535567e5c565983678.jpg?wh=2705x2556\" alt=\"\"></p><p>之前，<strong>员工</strong>和<strong>工作经验</strong>之间有一个一对多关联。现在，在员工那一端加了一个小方框，里面写了“: 时间段”，而另一端的多重性，由原来的“0..*”神奇地变成了“0..1”。</p><p>这种方式所表达的意思是说，对于一个<strong>员工</strong>而言，任何一个<strong>时间段</strong>，要么没有<strong>工作经验</strong>，要么有一条<strong>工作经验</strong>，但不能有多条<strong>工作经验</strong>。换句话说，总体上看，一个<strong>员工</strong>可以有多条<strong>工作经验</strong>，但限定在一个<strong>时间段</strong>的话，那么最多就只能有一条<strong>工作经验</strong>了。</p><!-- [[[read_end]]] --><p>所以，这种机制就叫作“限定”(qualification)。而上面那个标有“: 时间段”的小方框，叫做“限定符”（qualifier）。</p><p>由于工作经验里的时间段属性省略了属性名，只写出了类型，所以限定符里也相应地写了类型。假如工作经验里写的是属性名，那么限定符里也应该写属性名，这样才对得上。</p><p>分析完这个例子，我们不难发现，限定机制起到了两个作用：第一，表达了更丰富的语义，把原来用注解说明的约束变成了更严格的符号；第二，简化了关联关系的多重性，把原来的一对多，在形式上，变成了一对一。</p><p>那么，原来的“时间段不能重叠”这个约束，还有必要专门写出来吗？</p><p>就这个例子而言，还是要写的，这是因为时间段是可以交叉的。即使限定了一个时间段只有一条经验，仍然无法避免重叠。例如，张三已经有一条发生在2000年1月1日至2002年12月1日的工作经验，这时候又想增加一条2001年1月1日至2023年12月1日的经验。这是两个不同的时间段，虽然没有违反图里的“限定”关系，但还是违反了时间段不能重叠的规则。</p><p>在后面你会看到，多数情况下，类似的约束本来是可以被限定所取代的，而这里是由于时间段的特殊性，所以不行。</p><p>这里顺便说一下，上面我用自然语言解释了模型图里“限定”的含义。事实上，学习领域建模要掌握的一个重要技能，就是在模型和自然语言之间的双向转换。也就是说，别人指着模型中的任何一个符号，你都能马上翻译成自然语言。另一方面，你也能把业务人员的自然语言，快速翻译成模型图中的符号。对于建模的高手，会熟练得像条件反射一样。只有多加练习才能达到这个程度。</p><h2>识别更多“限定”</h2><p>理解了“限定”的概念，你能在模型图里找出更多可以使用限定的地方吗？先想一想，然后和下面我画的图对比一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/90/0f/907e1662ec7efe71b704e62d015df40f.jpg?wh=3425x2592\" alt=\"\"></p><p>项目管理中有关<strong>时间段</strong>的限定，估计你都找出来了。那么员工模块里有关<strong>技能类别</strong>的限定，不知你找出来没有？</p><p>注意，在<strong>技能</strong>实体上，原来有一个“同一技能不能录入两次”的约束。现在由于增加了对<strong>技能类别</strong>的限定，已经表达了相同的意思，所以原来的约束就可以不写了。这个约束就可以用限定取代，而前面关于时间段的约束却不能用限定取代，你可以再想想两者的区别。</p><p>另外，我们再看看项目管理模块中<strong>项目成员</strong>这个实体。对照后面的模型图，你可以思考一下，<strong>项目</strong>和<strong>项目成员</strong>之间的关联，是否应该使用限定呢？<br>\n<img src=\"https://static001.geekbang.org/resource/image/57/d7/57623e560ef7c711081bf125c20f88d7.jpg?wh=3228x2499\" alt=\"\"></p><p>虽然<strong>项目成员</strong>里面也有<strong>时间段</strong>属性，但是<strong>项目</strong>和<strong>项目成员</strong>之间的关联并没有被<strong>时间段</strong>所限定。这是因为，即使在同一个<strong>时间段</strong>，一个<strong>项目</strong>还是可以有多个<strong>成员</strong>。所以就不必用<strong>时间段</strong>来限定了。</p><p>我们看到，尽管<strong>项目经理</strong>和<strong>项目成员</strong>中都有时间段，但<strong>项目经理</strong>的关联被<strong>时间段</strong>所限定了，而<strong>项目成员</strong>则没有。现在的表示方法清楚地体现出了两者之间的这种区别，而之前只能通过注释中的文字来表达，就没有这么一目了然了。</p><p>这里再补充一下，上面说项目成员“不必”用时间段来限定，而不是“不能”限定。这是因为，理论上其实也可以在项目一端加一个<strong>时间段</strong>限定，像下面这样。<br>\n<img src=\"https://static001.geekbang.org/resource/image/9f/51/9f118cd64d25e41395c3108fc70a4351.jpg?wh=3228x2499\" alt=\"\"></p><p>不过这时候，<strong>项目成员</strong>一端的多重性仍然是“0..*”而不是“0..1”。理由前面已经说过了。如果这么画的话，就是说明，业务上特别强调要按照<strong>时间段</strong>来给<strong>项目成员</strong>分组。如果没有这样的需求，我们就不必使用限定了。</p><p>你看，哪怕我们这个不太复杂的例子里，已经有不少地方用到<strong>限定</strong>了。所以<strong>限定</strong>是领域建模中一种比较常用的机制，学会它还是很有必要的。</p><h2>“限定”的实现</h2><p>现在，相信你已经能充分理解“限定”在领域模型里的用法了。这里解决的还是模型和需求的一致性问题。我们之前说过，模型驱动设计还非常强调实现和模型要保持一致，也就是模型中的改变总能体现在代码和数据库设计里。</p><p>我们这就结合例子，分别看看“限定”的数据库实现和代码实现。</p><h3>限定的数据库实现</h3><p>先看看“限定”在数据库里的实现。就拿工作经验（work_experience）表和技能（skill）表来做例子。目前数据库设计是这样的。</p><p><img src=\"https://static001.geekbang.org/resource/image/20/3e/20d2429f4aebd51861e44e8528d83c3e.jpg?wh=3733x2260\" alt=\"\"></p><p>现在你可以想一想，怎么在工作经验表上体现出时间段的限定，并且在技能表上体现出技能类别的限定呢？</p><p>其实，只要增加两个唯一索引就可以了。可以用下面的图示表达。<br>\n<img src=\"https://static001.geekbang.org/resource/image/a6/6d/a6fa85b130cf6b9d18b5d1119633126d.jpg?wh=3733x2260\" alt=\"\"></p><p>比如说，工作经验表上的租户ID、员工ID、开始日期和结束日期组成的唯一索引，就表达了一个员工在一个时间段只能有一条工作经验这个限定。</p><h3>限定的代码实现</h3><p>解决了数据库设计问题，下面我们再来看看代码的实现。在代码中，限定一般用 Map 来实现。让我们看看下面修改过的代码。</p><pre><code class=\"language-java\">package chapter21.unjuanable.domain.orgmng.emp;\n//imports ...\n\npublic class Emp extends AggregateRoot {\n    // other fields ...\n    \n    // protected List&lt;Skill&gt; skills = new ArrayList&lt;&gt;();\n    protected Map&lt;Long, Skill&gt; skills = new HashMap&lt;&gt;();\n    \n    // protected List&lt;WorkExperience&gt; experiences;\n    protected Map&lt;Period, WorkExperience&gt; experiences = new HashMap&lt;&gt;();\n    \n    // other methods...  \n\n    public Collection&lt;Skill&gt; getSkills() {\n        // return Collections.unmodifiableList(skills);\n        return Collections.unmodifiableCollection(skills.values());\n\n    }\n\n    public Optional&lt;Skill&gt; getSkill(Long skillTypeId) {\n        // return skills.stream()\n        //         .filter(s -&gt; s.getSkillTypeId().equals(skillTypeId))\n        //         .findAny();\n        return Optional.ofNullable(skills.get(skillTypeId));\n    }\n\n    public void addSkill(Long skillTypeId, SkillLevel level\n                                  , int duration, Long userId) {\n        skillTypeShouldNotDuplicated(skillTypeId);\n\n        Skill newSkill = new Skill(tenantId, skillTypeId, userId).setLevel(level).setDuration(duration);\n\n        //skills.add(newSkill);\n        skills.put(skillTypeId, newSkill);\n    }\n\n  \n    private void skillTypeShouldNotDuplicated(Long newSkillTypeId) {\n        // if (skills.stream().anyMatch(\n        //            s -&gt; s.getSkillTypeId().equals(newSkillTypeId))) {\n        if (skills.get(newSkillTypeId) != null) {\n            throw new BusinessException(\"同一技能不能录入两次！\");\n        }\n    }\n\n    //    public List&lt;WorkExperience&gt; getExperiences() {\n    //        return Collections.unmodifiableList(experiences);\n    //    }\n    public Collection&lt;WorkExperience&gt; getExperiences() {\n        return Collections.unmodifiableCollection(experiences.values());\n    }\n\n    public void addExperience(Period period, String company, Long userId) {\n        durationShouldNotOverlap(period);\n\n        WorkExperience newExperience = new WorkExperience(\n                tenantId\n                , period\n                , LocalDateTime.now()\n                , userId)\n                .setCompany(company);\n        //experiences.add(newExperience);\n        experiences.put(period, newExperience);\n    }\n\n    private void durationShouldNotOverlap(Period newPeriod) {\n        // if (experiences.stream().anyMatch(\n        //                 e -&gt; e.getPeriod().overlap(newPeriod))) {\n        if (experiences.values().stream()\n                    .anyMatch(e -&gt; e.getPeriod().overlap(newPeriod))) {\n            throw new BusinessException(\"工作经验的时间段不能重叠!\");\n        }\n    }\n    \n    // other methods...\n}\n</code></pre><p>上面的代码里，注释掉的部分是原来的代码，可以对比着看。我们先来看和<strong>技能</strong>（skills）相关的代码，<strong>工作经验</strong>也是类似的。</p><p>首先，我们把Emp类的skills属性的类型由原来的 List 改成了 Map。Map 的 Key 实际就是<strong>技能类别ID</strong>，这样，就保证了对<strong>技能类别</strong>所限定的唯一性。后面的代码都根据这一变化做了修改。</p><p>对于第15行的 getSkills() 方法，我们取了Map的 values()，并把方法的返回值类型改成了Collection。</p><p>对于第21行的 getSkill(Long skillTypeId) 方法，我们直接从 Map 里取值，而不是像以前那样通过遍历 List 来搜索。</p><p>让我们假想一下，当初写程序的时候，如果你发现从 List 里搜索比较麻烦，可能就已经想到可以改成 Map 了。这样，我们就可以“反推”出，模型中很可能应该使用限定。这其实是在编写代码的过程中，以优化代码结构为启发，反过来促使模型演进的一个例子。</p><p>在第28行的 addSkill() 方法里把对 List 的 add()  改成了对 Map 的 put()，这个比较简单。</p><p>在第39行的 skillTypeShouldNotDuplicated()，也就是技能类别不能重复的校验中，同样是把对 List 的搜索改成了从 Map 里直接取值来判断。</p><p>关于<strong>工作经验</strong>的代码修改也是类似的，就不重复了。</p><p>讲到这里，你应该对怎么保持代码和模型一致，更有感觉了吧？想要在代码实现环节里实践DDD，我的建议是写代码的同时一定要打开模型图，培养边看图边写代码的习惯。尤其是初学者更应该这么做，这样才能时刻提醒自己做到代码和模型的一致。</p><h2>总结</h2><p>好，这节课的主要内容就讲到这，我们来总结一下。</p><p>今天我们讲了UML中一个实用的技能——限定。假设有一个一对多的关联，如果表示“多”的一端的某一个属性被限定以后，可以变成一对一关联的话，那么就可以使用限定了。</p><p>“限定”在模型里的表示方法是用一个小方框，里面写上被限定的属性，然后放到关联里表示“1”的那一端。之后，原来的一对多，在形式上一般就可以变成一对一了。这里增加的小方框叫做“限定符”。</p><p>“限定”可以使模型的语义更加丰富，把原来只能用注释表达的约束，变成更严格的符号，并且一目了然地表达出这种约束。</p><p>在模型的实现层面，对于数据库设计来说，限定往往可以表现为数据表上的唯一索引。对于代码来说，限定一般是用 Map 来实现的。</p><h2>思考题</h2><p>下面我给你留了两道思考题：</p><p>1.在你知道的项目中，可以举出更多限定的例子吗？</p><p>2.课程中讲了一对多的限定，你觉得多对多是否也可以用限定呢？</p><p>好，今天的课程结束了，有什么问题欢迎在评论区留言，下节课，我们开始讲领域建模中的一个比较高级的技能——泛化。</p><p>【PS：这个分支“iteration-2-till-lesson21”已经完成了迭代2中直到21课的代码，链接：<a href=\"https://github.com/zhongjinggz/geekdemo/tree/iteration-2-till-lesson21%E3%80%82\">https://github.com/zhongjinggz/geekdemo/tree/iteration-2-till-lesson21。</a> 】</p>","neighbors":{"left":{"article_title":"20｜值对象（下）：值对象和实体的本质区别是什么？","id":623969},"right":{"article_title":"22｜泛化建模（上）：领域知识更抽象怎么办？","id":625602}},"comments":[{"had_liked":false,"id":368501,"user_name":"6点无痛早起学习的和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"北京","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1676419066,"is_pvip":false,"replies":[{"id":135171,"content":"正如您分析的那样，这种情况不能用限定。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678974588,"ip_address":"广东","comment_id":368501,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"在工作有这样一个业务场景，拿捏不定是否可以使用这节课的限定：\n1. 业务需求，1 个用户可以有多个户类型（一类户、二类户、三类户）的户，约束：但是同户类型只能有一个是正常的户（户可以注销变为不正常）。\n解读：1 个用户只能有一个正常的一类户（户类型还有二类户、三类户等等），一类户可以注销（就变为了不正常）\n\n如果我用状态做限定，设置数据库唯一索引（用户 id、户类型、状态），这样就不能存在多个注销状态的一类户，因为会唯一冲突\n所以不知道我这个到底能不能做限定了？望老师解答","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609427,"discussion_content":"正如您分析的那样，这种情况不能用限定。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678974588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3906776,"avatar":"","nickname":"Geek_0052b7","note":"","ucode":"47D3222FD6F6B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647991,"discussion_content":"用户 id、户类型、正常状态，deleted(0)\n用户 id、户类型、不正常状态 、deleted(主键ID)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1720879422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2840072,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/56/08/62b08e44.jpg","nickname":"🅥","note":"","ucode":"B67B6EB67DCC14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3906776,"avatar":"","nickname":"Geek_0052b7","note":"","ucode":"47D3222FD6F6B4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649077,"discussion_content":"妙啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1722699121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":647991,"ip_address":"福建","group_id":0},"score":649077,"extra":""}]}]},{"had_liked":false,"id":366984,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"北京","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1674746660,"is_pvip":false,"replies":[{"id":133763,"content":"总结不错，不过最后半句，我觉得更恰当的说是Map里的键和值一对一。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1674956766,"ip_address":"广东","comment_id":366984,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"小结，限定使用的属性：\n\n\t- 在数据库实现中，对应组成（复合）唯一索引的某一个列；\n\t- 在代码实现中，对应Map的键\n\t- 那么由上面两条结论可以有如下推论：数据库的唯一索引对应代码中的Map\n\t- 这个属性是非聚合根的局部标识\n限定将一对多形式上转换成一对一，在代码里实际上就是把“多”放入Map中，让聚合根和代表这个Map属性“一对一”","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600905,"discussion_content":"总结不错，不过最后半句，我觉得更恰当的说是Map里的键和值一对一。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674956766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1489957,"avatar":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","nickname":"tt","note":"","ucode":"7753B79AD5A9AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":600942,"discussion_content":"嗯，是的，想想也确实是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674964565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":600905,"ip_address":"北京","group_id":0},"score":600942,"extra":""}]}]},{"had_liked":false,"id":387907,"user_name":"Spoon","can_delete":false,"product_type":"c1","uid":1959822,"ip_address":"浙江","ucode":"2FF9193AD482C2","user_header":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","comment_is_top":false,"comment_ctime":1708910443,"is_pvip":false,"replies":[{"id":141399,"content":"使用限定可以更准确地表达语义。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1709973182,"ip_address":"广东","comment_id":387907,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"为什么要在DDD中使用限定？使用限定的优劣是什么？希望在后面的课程可以找到答案","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638825,"discussion_content":"使用限定可以更准确地表达语义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709973182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386242,"user_name":"public","can_delete":false,"product_type":"c1","uid":2768731,"ip_address":"广东","ucode":"EF597BADCC526B","user_header":"","comment_is_top":false,"comment_ctime":1704368290,"is_pvip":true,"replies":[{"id":141218,"content":"你问的是哪个实体？","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1708158014,"ip_address":"广东","comment_id":386242,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"老师， 租户 ID、员工 ID、开始日期和结束日期 作为唯一约束，那删除只能做物理删除吧，","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637235,"discussion_content":"你问的是哪个实体？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708158014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1959822,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","nickname":"Spoon","note":"","ucode":"2FF9193AD482C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637758,"discussion_content":"其实也可以做软删除的，再增加一个delete_id字段，delete_id:0表示未删除，delete_id:id(自增主键)表示删除","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708910363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1588683,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3d/cb/791d0f5e.jpg","nickname":"猴哥","note":"","ucode":"63A1BFDF13D85D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1959822,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","nickname":"Spoon","note":"","ucode":"2FF9193AD482C2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649950,"discussion_content":"同一个唯一项，删一次可以，删两次就不行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724166371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":637758,"ip_address":"浙江","group_id":0},"score":649950,"extra":""},{"author":{"id":1959822,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","nickname":"Spoon","note":"","ucode":"2FF9193AD482C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1588683,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3d/cb/791d0f5e.jpg","nickname":"猴哥","note":"","ucode":"63A1BFDF13D85D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650051,"discussion_content":"为什么要删除两次？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724300874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":649950,"ip_address":"浙江","group_id":0},"score":650051,"extra":""}]}]},{"had_liked":false,"id":368401,"user_name":"邓西","can_delete":false,"product_type":"c1","uid":2977417,"ip_address":"四川","ucode":"DC84CD4CDF4021","user_header":"","comment_is_top":false,"comment_ctime":1676289981,"is_pvip":false,"replies":[{"id":134203,"content":"您说的也是一种思路。就整体而言，多对多可能被限定为一对多","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1676419694,"ip_address":"广东","comment_id":368401,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1. 同一个员工不同工时记录中的时间段不能重叠；\n2. 结合之前的课程，将一个n:n的关联关系，通过引入一个表示关联的实体，拆解成两个1：n的关联，然后就可以通过两个Map结构实现限定了。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604648,"discussion_content":"您说的也是一种思路。就整体而言，多对多可能被限定为一对多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676419694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367291,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"北京","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1675121599,"is_pvip":true,"replies":[{"id":135196,"content":"1 编辑历史的例子挺好\n2 多对多，不管有没有限定，多数都要一个中间表。在概念层面，多对多被限定以后，有可能在形式上变成一对多。\n\n理论上限定也可以用于实体，不过我确实也没遇到过这样的例子。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678979027,"ip_address":"广东","comment_id":367291,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"之前确实没有注意到限定 qualification 的建模技术，因为不太熟悉，感觉在 UML 图中增加限定的标记（小方框）并不太明显。\n\n使用唯一索引可以在数据库中表达”限定“。\n使用 Map 取代 List 可以在代码中实现”限定“。\n\n写代码的时候打开模型图，然后看到模型图（领域设计）可以与自然语言双向转换。\n\n思考题：\n\n1. 项目中一般会有限定，但是可能并没有重视，能想到的就是文档的编辑历史，在一个时间段只能有一个人编辑并提交。\n2. 多对多如果采用限定来表达，中间需要有一个表或者对象来转换，似乎更复杂了。\n\n限定是否仅用于值对象？","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609464,"discussion_content":"1 编辑历史的例子挺好\n2 多对多，不管有没有限定，多数都要一个中间表。在概念层面，多对多被限定以后，有可能在形式上变成一对多。\n\n理论上限定也可以用于实体，不过我确实也没遇到过这样的例子。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678979028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366945,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"浙江","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1674648472,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"“总体上看，一个员工可以有多条工作经验”，这个不看上文，直接看“时间段限定”的图还真难一眼看出。","like_count":2,"discussions":[{"author":{"id":1460961,"avatar":"https://static001.geekbang.org/account/avatar/00/16/4a/e1/2a498473.jpg","nickname":"李威","note":"","ucode":"3409A9390BD1FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600781,"discussion_content":"我想大概存在如下的推断：\n1、通过直接看“时间段限定”的图可以一眼看出的是：“在一个限定的时间段里面，员工可以有至多一条工作经验”\n2、根据“限定”的定义，可以推断出：“在另一个限定的时间段里面，员工可以另外有至多一条其他的工作经验”\n3、综上可以推断出：“总体上看，一个员工可以有多条工作经验”\n所以，作为新手我也认同你的“真难一眼看出”的说法，但是通过推断也是可以得出结论的。正如老师所说“对于建模的高手，会熟练得像条件反射一样。只有多加练习才能达到这个程度。”，刻意练习之后，无需中间的推断过程，应该也能达到“一眼看出”的境界。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1674875947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1460961,"avatar":"https://static001.geekbang.org/account/avatar/00/16/4a/e1/2a498473.jpg","nickname":"李威","note":"","ucode":"3409A9390BD1FD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600888,"discussion_content":"神探狄仁杰","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1674926116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":600781,"ip_address":"浙江","group_id":0},"score":600888,"extra":""}]}]}]}