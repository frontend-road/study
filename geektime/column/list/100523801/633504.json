{"id":633504,"title":"17｜Bit library（二）：如何利用新bit操作库释放编程生产力？","content":"<p>你好，我是卢誉声。</p><p>在上一讲中，我们已经通过一些简单的编程示例，展示了C++20及其后续演进提供的位操作库的基本使用方法。</p><p>但是，简单的示例还无法体现位操作库的真正威力。所以，这一讲我会通过一个较为完整的工程代码，带你体会如何充分利用全新的位操作库，实现强大的序列化和反序列化功能以及位运算。</p><p>好，话不多说，就让我们开始吧（课程配套代码可以从<a href=\"https://github.com/samblg/cpp20-plus-indepth\">这里</a>获取）。</p><h2>扩展数据流处理实战案例</h2><p>在实际生产环境中，我们经常需要通过网络传输特定的数据，但是不同语言和不同平台的内存模型可能完全不同。这时，发送方需要将数据转换为符合特定标准的数据流，接收方将数据解析后转换为内部变量。</p><p>我们将变量转换为数据流的操作称为“序列化（Serialization）”，将数据流转换成变量的过程称为“反序列化（Deserialization）”。</p><p><img src=\"https://static001.geekbang.org/resource/image/20/cb/20bafd91c9182fe98299a4a5300d61cb.jpg?wh=2559x695\" alt=\"\"></p><p>我们曾在<a href=\"https://time.geekbang.org/column/article/627936\">第13讲</a>——Ranges实战：数据序列函数式编程中，实现了一个获取三维模型数据并进行统计的程序。</p><p>今天，我们将继续对其进一步扩展，使用位操作库实现序列化和反序列化。</p><p>不知道你是否还记得，我在第13讲偷了一个懒，直接使用了硬编码的代码作为数据输入。我们会在这一讲改进一下，将本地的二进制文件读取到内存里，将其转换成内部变量。</p><!-- [[[read_end]]] --><p>与此同时，我们还新增了一项计算需求：在三维模型对象中，新增了renderChannels字段——用来表示某个对象支持哪些渲染通道。在统计过程中，需要确定某个三维模型对象是否只有一个渲染通道。增加这项计算需求的目的在于，演示如何使用位运算替代朴素实现，实现更高效的算数运算。</p><h2>基于C++20位操作库实现</h2><p>针对这些变化，我们来看一看如何基于C++20位操作库，来进行编程实现。</p><h3>数据结构</h3><p>根据需求，我们首先要更新基础类型定义，修改内容在Types.h中。更新后的ModelView类型的定义，代码是后面这样。</p><pre><code class=\"language-c++\">struct ModelView {\n&nbsp;&nbsp;&nbsp; // API接口中的视图对象数据\n&nbsp;&nbsp;&nbsp; struct Object {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 对象精度类型\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enum class ResolutionType {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; High,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Low\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 渲染通道集合，每个渲染通道占用一个bit，通过位运算设置获取特定的渲染通道\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;using RenderChannelBits = uint8_t;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 渲染通道枚举类，每个枚举都通过移位生成，使得枚举量独自占用一个bit\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct RenderChannel {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enum {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Buffer = 0b1u,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Window = 0b1u &lt;&lt; 1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Image = 0b1u &lt;&lt; 2,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Printer = 0b1u &lt;&lt; 3\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 对象类型ID\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Id objectTypeID;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 对象名称\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string name;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 对象中各部件的面片数量（数组）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::vector&lt;int32_t&gt; meshCounts;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 对象支持的渲染通道\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RenderChannelBits renderChannels;\n&nbsp;&nbsp;&nbsp; };\n\n&nbsp;&nbsp;&nbsp; // 视图ID\n&nbsp;&nbsp;&nbsp; Id viewId = 0;\n&nbsp;&nbsp;&nbsp; // 视图类型名称\n&nbsp;&nbsp;&nbsp; std::string viewTypeName;\n&nbsp;&nbsp;&nbsp; // 视图名称\n&nbsp;&nbsp;&nbsp; std::string viewName;\n&nbsp;&nbsp;&nbsp; // 创建时间\n&nbsp;&nbsp;&nbsp; std::string createdAt;\n&nbsp;&nbsp;&nbsp; // 视图对象列表\n&nbsp;&nbsp;&nbsp; std::vector&lt;Object&gt; viewObjectList;\n};\n</code></pre><p>没有变化的成员函数这里就不写出来了。我们把关注点放在更新的部分。</p><p>首先，我们新增了RenderChannelBits类型与RenderChannel枚举。</p><p>RenderChannel枚举的每个枚举量都对应一个数字，每个数字只有1位是1，其他都是0，并且不同枚举量占用的位置必须不同。这样一来，就可以通过位运算设置一个对象有哪些渲染通道，也可以通过位运算获取一个对象是否具有某个渲染通道，本质就是一个通过位运算实现的“集合类型”。</p><p>代码中将该类型定义为RenderChannelBits，其优点是存储空间小、计算快，早些年计算机存储容量与计算性能有限的时候，这种技术运用非常广泛。</p><p>代码中定义了renderChannels成员变量，其类型就是RenderChannelBits，是对象所有渲染通道的集合。</p><p>接下来还要修改ModelObject的定义，让我们对照代码往下看。</p><pre><code class=\"language-c++\">// 统计后存储的模型对象数据\nstruct ModelObject {\n&nbsp;&nbsp;&nbsp; // 视图序号\n&nbsp;&nbsp;&nbsp; int32_t viewOrder = 0;\n&nbsp;&nbsp;&nbsp; // 视图ID\n&nbsp;&nbsp;&nbsp; Id viewId = 0;\n&nbsp;&nbsp;&nbsp; // 视图类型名称\n&nbsp;&nbsp;&nbsp; std::string viewTypeName;\n&nbsp;&nbsp;&nbsp; // 视图名称\n&nbsp;&nbsp;&nbsp; std::string viewName;\n&nbsp;&nbsp;&nbsp; // 视图创建时间\n&nbsp;&nbsp;&nbsp; ZonedTime createdAt;\n\n&nbsp;&nbsp;&nbsp; // 对象类型ID\n&nbsp;&nbsp;&nbsp; Id objectTypeID = 0;\n&nbsp;&nbsp;&nbsp; // 对象名称\n&nbsp;&nbsp;&nbsp; std::string objectName;\n&nbsp;&nbsp;&nbsp; // 对象包含的三角面片数量\n&nbsp;&nbsp;&nbsp; int32_t meshCount = 0;\n&nbsp;&nbsp;&nbsp; // 对象在视图中的序号\n&nbsp;&nbsp;&nbsp; int32_t viewObjectIndex = 0;\n&nbsp;&nbsp;&nbsp; // 视图中剩余已用三角面片数量\n&nbsp;&nbsp;&nbsp; int32_t viewUsedMeshCount = 0;\n&nbsp;&nbsp;&nbsp; // 视图中可用三角面片数量上限\n&nbsp;&nbsp;&nbsp; int32_t viewTotalMeshCount = 0;\n&nbsp;&nbsp;&nbsp; // 视图中剩余可用三角面片数量\n&nbsp;&nbsp;&nbsp; int32_t viewFreeMeshCount = 0;\n&nbsp;&nbsp;&nbsp; // 视图中对象数量\n&nbsp;&nbsp;&nbsp; size_t viewObjectCount = 0;\n&nbsp;&nbsp;&nbsp; // 对象支持的渲染通道\n&nbsp;&nbsp;&nbsp; ModelView::Object::RenderChannelBits renderChannels;\n&nbsp;&nbsp;&nbsp; // 是否只有一个渲染通道\n&nbsp;&nbsp;&nbsp; bool onlyOneRenderChannel = 0;\n\n&nbsp;&nbsp;&nbsp; // 获取完整视图名称\n&nbsp;&nbsp;&nbsp; std::string getCompleteViewName() const {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return viewTypeName + \"/\" + viewName;\n&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp; // 获取对象Key\n&nbsp;&nbsp;&nbsp; std::string getObjectKey() const {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return getObjectKey(objectTypeID, viewId);\n&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp; // 根据objectTypeID和viewId获取对象Key\n&nbsp;&nbsp;&nbsp; static std::string getObjectKey(Id objectTypeID, Id viewId) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return std::to_string(objectTypeID) + \"-\" + std::to_string(viewId);\n&nbsp;&nbsp;&nbsp; }\n};\n</code></pre><p>可以看到，代码中新增了renderChannels和onlyOneRenderChannel。其中onlyOneRenderChannel需要通过对renderChannels统计计算得出。</p><p>修改类型定义后，我们修改一下获取数据的函数，代码在src/data.cpp中，这部分代码为每个ModelView::Object对象都添加了renderChannel。这个新的成员变量是为了给后续位运算的代码使用的。</p><p>因为代码中数据定义很多，这里只截取了部分代码。你可以重点看看，这段代码里是怎样通过位或（|）生成渲染通道集合的。</p><pre><code class=\"language-c++\">#include \"data.h\"\n&nbsp;\nModelObjectsInfo getModelObjectsInfo() {\n&nbsp;&nbsp;&nbsp; using RenderChannel = ca::types::ModelView::Object::RenderChannel;\n&nbsp;\n&nbsp;&nbsp;&nbsp; return {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .modelViews = {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewId = 1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewTypeName = \"Building\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewName = \"Terminal\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .createdAt = \"2020-09-01T08:00:00+0800\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewObjectList = {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objectTypeID = 1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .name = \"stair\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .meshCounts = { 2000, 3000, 3000 },\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .renderChannels = RenderChannel::Buffer | RenderChannel::Image\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objectTypeID = 2,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .name = \"window\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .meshCounts = { 3000, 4000, 4000 },\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .renderChannels = RenderChannel::Buffer\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objectTypeID = 3,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .name = \"pool\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .meshCounts = { 100, 101 },\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .renderChannels = RenderChannel::Buffer | RenderChannel::Window | RenderChannel::Image\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objectTypeID = 4,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .name = \"pinball arcade\",\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .meshCounts = { 1000, 999 },\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .renderChannels = RenderChannel::Buffer | RenderChannel::Image | RenderChannel::Printer\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ……\n}\n</code></pre><h3>序列化与反序列化</h3><p>接下来，我们需要考虑如何实现数据的序列化和反序列化。为了演示二进制操作，我这里并没有使用成熟的序列化框架，而是自己实现了一个简单的二进制序列化与反序列化框架。</p><p>二进制序列化框架首先需要确定数据字节序，在我们的框架中，以大端作为标准字节序，因此就需要实现字节序的检测与转换，具体实现在BitUtils.h中。这段代码是基于第16讲“字节序处理”这个部分中的代码修改而来的。</p><pre><code class=\"language-c++\">#pragma once\n&nbsp;\n#include \"ca/BitCompact.h\"\n&nbsp;\nnamespace ca::utils {\n&nbsp;&nbsp;&nbsp; // 如果字节序为小端，并且类型size不为1，需要转换字节序\n&nbsp;&nbsp;&nbsp; template &lt;typename T, std::endian ByteOrder = std::endian::native&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requires (ByteOrder == std::endian::little &amp;&amp; sizeof(T) != 1)\n&nbsp;&nbsp;&nbsp; T consumeBigEndian(T src) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return std::byteswap(src);\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 如果字节序为小端，但size为1，不需要转换字节序\n&nbsp;&nbsp;&nbsp; template &lt;typename T, std::endian ByteOrder = std::endian::native&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requires (ByteOrder == std::endian::little &amp;&amp; sizeof(T) == 1)\n&nbsp;&nbsp;&nbsp; T consumeBigEndian(T src) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return src;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 如果字节序为大端，但size为1，不需要转换字节序\n&nbsp;&nbsp;&nbsp; template &lt;typename T, std::endian ByteOrder = std::endian::native&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requires (ByteOrder == std::endian::big)\n&nbsp;&nbsp;&nbsp; T consumeBigEndian(T src) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return src;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 如果字节序为小端，并且类型size不为1，需要转换字节序\n&nbsp;&nbsp;&nbsp; template &lt;typename T, std::endian ByteOrder = std::endian::native&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requires (ByteOrder == std::endian::little &amp;&amp; sizeof(T) != 1)\n&nbsp;&nbsp;&nbsp; T produceBigEndian(T src) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return std::byteswap(src);\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 如果字节序为小端，但size为1，不需要转换字节序\n&nbsp;&nbsp;&nbsp; template &lt;typename T, std::endian ByteOrder = std::endian::native&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requires (ByteOrder == std::endian::little &amp;&amp; sizeof(T) == 1)\n&nbsp;&nbsp;&nbsp; T produceBigEndian(T src) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return src;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 如果字节序为大端，但size为1，不需要转换字节序\n&nbsp;&nbsp;&nbsp; template &lt;typename T, std::endian ByteOrder = std::endian::native&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requires (ByteOrder == std::endian::big)\n&nbsp;&nbsp;&nbsp; T produceBigEndian(T src) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return src;\n&nbsp;&nbsp;&nbsp; }\n}\n</code></pre><p>在这段代码中，有两个地方值得注意。</p><p>首先，顶部头文件include/BitCompact.h的设计，是为了让不支持C++20位操作的编译器，能够支持C++20位操作。我们将在下个部分具体讨论一下该头文件的实现，这里先不过多扩展了。</p><p>其次，代码第7-25行，对consumeBigEndian的实现做了扩展，针对输入参数只有1个字节的情况做了优化，直接返回原始数据。这样做，可以提升运行时的实际性能——这是通过requires实现的。</p><p>接下来，我们基于BitUtils实现序列化和反序列化框架，具体实现在SerializerUtils.h和SerializerUtils.cpp中。首先我们看一下SerializerUtils.h。</p><pre><code class=\"language-c++\">#pragma once\n&nbsp;\n#include \"ca/Types.h\"\n#include \"ca/BitUtils.h\"\n#include &lt;ostream&gt;\n#include &lt;concepts&gt;\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;set&gt;\n&nbsp;\nnamespace ca::utils {\n&nbsp;&nbsp;&nbsp; // 序列化类，序列化输出到特定输出流中\n&nbsp;&nbsp;&nbsp; class Serializer {\n&nbsp;&nbsp;&nbsp; public:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 构造函数，绑定特定的输出流\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Serializer(std::ostream&amp; os) : _os(os) {}\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 禁止拷贝\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Serializer(const Serializer&amp; rhs) = delete;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 禁止赋值\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Serializer&amp; operator=(const Serializer&amp; rhs) = delete;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 允许移动\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Serializer(Serializer&amp;&amp; rhs) noexcept : _os(rhs._os) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 将特定的类型的数据转换为大端并输出\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 一般用于标准数据类型（整数、浮点数）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; template &lt;typename T&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Serializer&amp; dumpBE(T value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T bigEndianValue = produceBigEndian(value);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _os.write(reinterpret_cast&lt;char*&gt;(&amp;bigEndianValue), sizeof(bigEndianValue));\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return *this;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 输入特定长度的字节数组，不进行字节序转换\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 一般用于字符串或二进制串等自定义类型\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Serializer&amp; dump(const char* data, std::size_t size) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _os.write(data, size);\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return *this;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; private:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 输出流引用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::ostream&amp; _os;\n&nbsp;&nbsp;&nbsp; };\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 反序列化类，从特定输入流中反序列化\n&nbsp;&nbsp;&nbsp; class Deserializer {\n&nbsp;&nbsp;&nbsp; public:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 构造函数，绑定特定的输入流\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Deserializer(std::istream&amp; is) : _is(is) {}\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 禁止拷贝\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Deserializer(const Deserializer&amp; rhs) = delete;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 禁止赋值\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Deserializer&amp; operator=(const Deserializer&amp; rhs) = delete;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 允许移动\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Deserializer(Deserializer&amp;&amp; rhs) noexcept : _is(rhs._is) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 输入大端数据，并将数据转换为本地字节序\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 一般用于标准数据类型（整数、浮点数）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; template &lt;typename T&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Deserializer&amp; loadBE(T&amp; value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T originalValue = T();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _is.read(reinterpret_cast&lt;char*&gt;(&amp;originalValue), sizeof(originalValue));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = consumeBigEndian(originalValue);\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return *this;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 输入特定长度的字节数组，不进行字节序转换\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 一般用于字符串或二进制串等自定义类型\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Deserializer&amp; load(char* data, std::size_t size) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _is.read(data, size);\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return *this;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; private:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 输入流引用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::istream&amp; _is;\n&nbsp;&nbsp;&nbsp; };\n}\n&nbsp;\n// Concept，用于确定类型是否为数值（整数或浮点数）\ntemplate &lt;typename T&gt;\nconcept Number = std::integral&lt;T&gt; || std::floating_point&lt;T&gt;;\n&nbsp;\n// 针对数值类型序列化的&lt;&lt;操作符重载，这样可以像C++流类型那样按照流的风格使用Serializer类型\ntemplate &lt;Number T&gt;\nca::utils::Serializer&amp; operator&lt;&lt;(ca::utils::Serializer&amp; ss, T value) {\n&nbsp;&nbsp;&nbsp; return ss.dumpBE(value);\n}\n&nbsp;\n// 针对字符串类型序列化的&lt;&lt;操作重载\nca::utils::Serializer&amp; operator&lt;&lt;(ca::utils::Serializer&amp; ss, const std::string&amp; value);\n&nbsp;\n// 针对数值类型反序列化的&gt;&gt;操作重载，这样可以像C++流类型那样按照流的风格使用Deserializer类型\ntemplate &lt;Number T&gt;\nca::utils::Deserializer&amp; operator&gt;&gt;(ca::utils::Deserializer&amp; ss, T&amp; value) {\n&nbsp;&nbsp;&nbsp; return ss.loadBE(value);\n}\n&nbsp;\n// 针对字符串类型反序列化的&gt;&gt;操作重载\nca::utils::Deserializer&amp; operator&gt;&gt;(ca::utils::Deserializer&amp; ss, std::string&amp; value);\n&nbsp;\n// 针对std::vector序列化的&lt;&lt;操作重载，会递归调用每个元素的序列化实现\ntemplate &lt;typename T&gt;\nca::utils::Serializer&amp; operator&lt;&lt;(ca::utils::Serializer&amp; ss, const std::vector&lt;T&gt;&amp; value) {\n&nbsp;&nbsp;&nbsp; // 序列化vector的长度\n&nbsp;&nbsp;&nbsp; ss.dumpBE(value.size());\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 将元素逐个序列化\n&nbsp;&nbsp;&nbsp; for (const auto&amp; element : value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ss &lt;&lt; element;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; return ss;\n}\n&nbsp;\n// 针对std::vector反序列化的&gt;&gt;操作重载，会递归调用每个元素的反序列化实现\ntemplate &lt;typename T&gt;\nca::utils::Deserializer&amp; operator&gt;&gt;(ca::utils::Deserializer&amp; ds, std::vector&lt;T&gt;&amp; value) {\n&nbsp;&nbsp;&nbsp; // 反序列化vector的长度\n&nbsp;&nbsp;&nbsp; std::size_t vectorSize = 0;\n&nbsp;&nbsp;&nbsp; ds.loadBE(vectorSize);\n&nbsp;&nbsp;&nbsp; // 调整vector长度\n&nbsp;&nbsp;&nbsp; value.resize(vectorSize);\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 逐个反序列数组中的元素\n&nbsp;&nbsp;&nbsp; for (auto&amp; element : value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ds &gt;&gt; element;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; return ds;\n}\n&nbsp;\n// 针对std::set序列化的&lt;&lt;操作重载，会递归调用每个元素的序列化实现\ntemplate &lt;typename T&gt;\nca::utils::Serializer&amp; operator&lt;&lt;(ca::utils::Serializer&amp; ss, const std::set&lt;T&gt;&amp; value) {\n&nbsp;&nbsp;&nbsp; ss.dumpBE(value.size());\n&nbsp;\n&nbsp;&nbsp;&nbsp; for (const auto&amp; element : value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ss &lt;&lt; element;\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; return ss;\n}\n&nbsp;\n// 针对std::set反序列化的&gt;&gt;操作重载，会递归调用每个元素的反序列化实现\ntemplate &lt;typename T&gt;\nca::utils::Deserializer&amp; operator&gt;&gt;(ca::utils::Deserializer&amp; ds, std::set&lt;T&gt;&amp; value) {\n&nbsp;&nbsp;&nbsp; std::size_t setSize = 0;\n&nbsp;&nbsp;&nbsp; ds.loadBE(setSize);\n&nbsp;\n&nbsp;&nbsp;&nbsp; for (std::size_t elementIndex = 0; elementIndex != setSize; ++elementIndex) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T element = T();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ds &gt;&gt; element;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value.insert(element);\n&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp; return ds;\n}\n</code></pre><p>又是一段有点长的代码，不过只要你简单浏览一下，应该还是挺好理解的。这段代码分为三个部分，你可以参考一下表格来具体了解。</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/40/ddd3bbbf368a86212f4f62bf9e454040.jpg?wh=2889x2074\" alt=\"\"></p><p>针对std::string类型的序列化、反序列实现在src/ca/SerializerUtils.cpp中。如果感兴趣的话，你可以参考完整代码。</p><h3>自定义类型序列化、反序列化</h3><p>我们设计的框架，是支持针对自定义类型的序列化和反序列化扩展的。</p><p>比如说，如果要序列化或反序列化ca::types::ModelView、ca::types::ModelView::Object，可以在include/ca/IoUtils.h中添加后面这些声明。</p><pre><code class=\"language-c++\">// 序列化ca::types::ModelView\nca::utils::Serializer&amp; operator&lt;&lt;(\n&nbsp;&nbsp;&nbsp; ca::utils::Serializer&amp; serializer,\n&nbsp;&nbsp;&nbsp; const ca::types::ModelView&amp; modelView\n);\n&nbsp;\n// 序列化ca::types::ModelView::Object\nca::utils::Serializer&amp; operator&lt;&lt;(\n&nbsp;&nbsp;&nbsp; ca::utils::Serializer&amp; serializer,\n&nbsp;&nbsp;&nbsp; const ca::types::ModelView::Object&amp; object\n);\n&nbsp;\n// 反序列化ca::types::ModelView\nca::utils::Deserializer&amp; operator&gt;&gt;(\n&nbsp;&nbsp;&nbsp; ca::utils::Deserializer&amp; deserializer,\n&nbsp;&nbsp;&nbsp; ca::types::ModelView&amp; modelView\n);\n&nbsp;\n// 反序列化ca::types::ModelView::Object\nca::utils::Deserializer&amp; operator&gt;&gt;(\n&nbsp;&nbsp;&nbsp; ca::utils::Deserializer&amp; deserializer,\n&nbsp;&nbsp;&nbsp; ca::types::ModelView::Object&amp; object\n);\n\n// 然后在src/ca/src/IoUtils.cpp中添加相应实现：\n// 序列化ca::types::ModelView\nca::utils::Serializer&amp; operator&lt;&lt;(\n&nbsp;&nbsp;&nbsp; ca::utils::Serializer&amp; serializer,\n&nbsp;&nbsp;&nbsp; const ca::types::ModelView&amp; modelView\n) {\n&nbsp;&nbsp;&nbsp; return serializer\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; modelView.viewId\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; modelView.viewTypeName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; modelView.viewName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; modelView.createdAt\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; modelView.viewObjectList;\n}\n&nbsp;\n// 序列化ca::types::ModelView::Object\nca::utils::Serializer&amp; operator&lt;&lt;(\n&nbsp;&nbsp;&nbsp; ca::utils::Serializer&amp; serializer,\n&nbsp;&nbsp;&nbsp; const ca::types::ModelView::Object&amp; object\n) {\n&nbsp;&nbsp;&nbsp; return serializer\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; object.objectTypeID\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; object.name\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; object.meshCounts\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; object.renderChannels;\n}\n&nbsp;\n// 反序列化ca::types::ModelView\nca::utils::Deserializer&amp; operator&gt;&gt;(\n&nbsp;&nbsp;&nbsp; ca::utils::Deserializer&amp; deserializer,\n&nbsp;&nbsp;&nbsp; ca::types::ModelView&amp; modelView\n) {\n&nbsp;&nbsp;&nbsp; return deserializer\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; modelView.viewId\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; modelView.viewTypeName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; modelView.viewName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; modelView.createdAt\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; modelView.viewObjectList;\n}\n&nbsp;\n// 反序列化ca::types::ModelView::Object\nca::utils::Deserializer&amp; operator&gt;&gt;(\n&nbsp;&nbsp;&nbsp; ca::utils::Deserializer&amp; deserializer,\n&nbsp;&nbsp;&nbsp; ca::types::ModelView::Object&amp; object\n) {\n&nbsp;&nbsp;&nbsp; return deserializer\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; object.objectTypeID\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; object.name\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; object.meshCounts\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; object.renderChannels;\n}\n</code></pre><p>这段代码实现非常简单直接，序列化过程就是将对象的成员变量逐个通过serializer，序列化输出。反序列化过程，则是逐个通过deserializer反序列化输入到成员变量中。</p><p>我们无法从数据流中知道输入的数据与成员变量的对应关系。因此，这就要求输入输出的顺序必须完全一致。</p><p>最后，我们修改一下src/main.cpp，首先将对象序列化到文件中。然后模拟从外部获取数据流的过程，读取文件反序列化，并基于反序列化的新对象进行统计分析，修改的代码是后面这样。</p><pre><code class=\"language-c++\">// 序列化ModelObjectsInfo\nvoid serializeModelObjectsInfo() {\n&nbsp;&nbsp;&nbsp; using ca::utils::Serializer;\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 获取模型对象信息\n&nbsp;&nbsp;&nbsp; auto modelObjectsInfo = getModelObjectsInfo();\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 序列化\n&nbsp;&nbsp;&nbsp; std::ofstream outFile(\"ca.dat\", std::ios::binary);\n&nbsp;&nbsp;&nbsp; Serializer ss(outFile);\n&nbsp;&nbsp;&nbsp; ss\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; modelObjectsInfo.modelViews\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; modelObjectsInfo.highResolutionObjectSet\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; modelObjectsInfo.meshCount;\n}\n&nbsp;\n// 反序列化ModelObjectsInfo\nModelObjectsInfo deserializeModelObjectInfo() {\n&nbsp;&nbsp;&nbsp; using ca::utils::Deserializer;\n&nbsp;\n&nbsp;&nbsp;&nbsp; ModelObjectsInfo modelObjectsInfo;\n&nbsp;\n&nbsp;&nbsp;&nbsp; std::ifstream inputFile(\"ca.dat\", std::ios::binary);\n&nbsp;&nbsp;&nbsp; // 反序列化\n&nbsp;&nbsp;&nbsp; Deserializer ds(inputFile);\n&nbsp;&nbsp;&nbsp; ds\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; modelObjectsInfo.modelViews\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; modelObjectsInfo.highResolutionObjectSet\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; modelObjectsInfo.meshCount;\n&nbsp;\n&nbsp;&nbsp;&nbsp; return modelObjectsInfo;\n}\n&nbsp;\nint main() {\n&nbsp;&nbsp;&nbsp; using ca::types::ModelObjectTableData;\n&nbsp;&nbsp;&nbsp; using ResolutionType = ca::types::ModelView::Object::ResolutionType;\n&nbsp;\n&nbsp;&nbsp;&nbsp; // 生成二进制数据流\n&nbsp;&nbsp;&nbsp; serializeModelObjectsInfo();\n&nbsp;&nbsp;&nbsp; // 获取模型对象信息（从二进制数据流解析）\n&nbsp;&nbsp;&nbsp; auto modelObjectsInfo = deserializeModelObjectInfo();\n&nbsp;&nbsp;&nbsp; ……\n&nbsp;&nbsp;&nbsp; return 0;\n}\n</code></pre><p>这样一来，我们就实现了最简单的二进制序列化和反序列化。</p><p>比较复杂的二进制序列化/反序列化框架一般还会包括数据压缩、模式描述（一些标准支持将数据类的结构定义描述在数据流中），感兴趣的话你可以课后自行探索。</p><h3>使用位运算进行计算</h3><p>还记得么？我们还有一个需求，就是基于renderChannels，计算出对象“是否只有一个渲染通道”。</p><p>跟上步伐，不要溜号。我们以Ranges的统计算法实现为例，看看这个需求该如何实现。我将代码放在了src/ca/algorithms/RangesAlgorithm.cpp中。</p><pre><code class=\"language-c++\">static std::vector&lt;ModelObject&gt; extractHighOrLowResolutionObjects(\n&nbsp;&nbsp;&nbsp; const std::vector&lt;ca::types::ModelView&gt;&amp; modelViews,\n&nbsp;&nbsp;&nbsp; const std::set&lt;std::string&gt;&amp; highResolutionObjectSet,\n&nbsp;&nbsp;&nbsp; int32_t meshCount,\n&nbsp;&nbsp;&nbsp; bool isHigh\n) {\n&nbsp;&nbsp;&nbsp; auto modelViewsData = modelViews.data();\n\n&nbsp;&nbsp;&nbsp; // 生成模型对象数据（高精度或双精度）\n&nbsp;&nbsp;&nbsp; // 将模型视图对象数组转换成一个新数组，数组元素是每个模型视图的模型对象数组（返回的是二维数组）\n&nbsp;&nbsp;&nbsp; return modelViews |\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; views::transform([modelViewsData, &amp;highResolutionObjectSet, meshCount, isHigh](const auto&amp; modelView) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 通过模型视图指针地址计算模型视图序号\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int32_t viewOrder = static_cast&lt;int32_t&gt;(&amp;modelView - modelViewsData + 1);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const std::vector&lt;ModelView::Object&gt;&amp; viewObjectList = modelView.viewObjectList;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto filteredModelObjects = viewObjectList |\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 筛选满足要求的对象（高精度或低精度）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; views::filter([&amp;modelView, &amp;highResolutionObjectSet, isHigh](const ModelView::Object&amp; viewObject) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto viewId = modelView.viewId;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto objectTypeID = viewObject.objectTypeID;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto objectKey = ModelObject::getObjectKey(objectTypeID, viewId);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return highResolutionObjectSet.contains(objectKey) == isHigh;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }) |\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 计算各模型对象总面片数，生成模型对象数组\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;views::transform([&amp;modelView, &amp;highResolutionObjectSet, viewOrder](const auto&amp; viewObject) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto viewId = modelView.viewId;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto&amp; viewTypeName = modelView.viewTypeName;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto&amp; viewName = modelView.viewName;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto&amp; viewObjectList = modelView.viewObjectList;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto&amp; createdAt = modelView.createdAt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto objectTypeID = viewObject.objectTypeID;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const auto&amp; meshCounts = viewObject.meshCounts;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto objectMeshCount = std::accumulate(meshCounts.begin(), meshCounts.end(), 0);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ModelObject{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.viewOrder = viewOrder,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewId = viewId,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewTypeName = viewTypeName,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewName = viewName,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.createdAt = timePointFromString(createdAt),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objectTypeID = viewObject.objectTypeID,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objectName = viewObject.name,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .meshCount = objectMeshCount,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.renderChannels = viewObject.renderChannels,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .onlyOneRenderChannel = std::has_single_bit(viewObject.renderChannels),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 计算模型视图已占用面片数\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;auto viewUsedMeshCount = std::accumulate(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; filteredModelObjects.begin(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; filteredModelObjects.end(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [](int32_t prev, const auto&amp; modelObject) { return prev + modelObject.meshCount; }\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 计算模型视图中的对象数量\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size_t viewObjectCount = sizeOfRange(filteredModelObjects);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 生成包含统计信息的模型对象数据\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return filteredModelObjects |\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; views::transform(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [viewUsedMeshCount, meshCount, viewObjectCount](const auto&amp; incomingModelObject) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ModelObject{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.viewOrder = incomingModelObject.viewOrder,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewId = incomingModelObject.viewId,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewTypeName = incomingModelObject.viewTypeName,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewName = incomingModelObject.viewName,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .createdAt = incomingModelObject.createdAt,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objectTypeID = incomingModelObject.objectTypeID,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .objectName = incomingModelObject.objectName,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .meshCount = incomingModelObject.meshCount,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewUsedMeshCount = viewUsedMeshCount,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.viewTotalMeshCount = meshCount,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewFreeMeshCount = meshCount - viewUsedMeshCount,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .viewObjectCount = viewObjectCount,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.onlyOneRenderChannel = incomingModelObject.onlyOneRenderChannel\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) |\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to&lt;std::vector&lt;ModelObject&gt;&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }) |\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to&lt;std::vector&lt;std::vector&lt;ModelObject&gt;&gt;&gt;() |\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; views::join |\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to&lt;std::vector&lt;ModelObject&gt;&gt;();\n}\n</code></pre><p>代码第48行，我们调用了std::has_single_bit，判断renderChannels是否只有一位为1。</p><p>如果只有1位就说明只有一个通道，所以如果想知道一个对象包含几个通道，只需要计算有多少位1即可。</p><p>相比于通过集合数据结构实现集合，针对这种集合长度与元素已知而且集合元素较少的场景，使用位操作不仅节省空间，而且速度也更快。</p><h2>基于传统位处理操作符实现</h2><p>你有没有注意到，我在前面使用了C++20的endian，has_single_bit以及C++23才支持的byteswap。</p><p>因此，我们在工程实战时，必须考虑一个问题，<strong>那就是如果编译器不支持相关特性要怎么办？</strong></p><p>很简单，只要自己实现这些特性就行了。为此，我们实现了BitCompact.h，讨论一下C++20中如何检测编译器特性，同时也看一下如果没有这些现成的函数，我们要如何实现。</p><p>头文件include/ca/BitCompact.h的实现是这样的。</p><pre><code class=\"language-c++\">#pragma once\n&nbsp;\n#if __has_include(&lt;bit&gt;)\n#include &lt;bit&gt;\n#endif // __has_include(&lt;bit&gt;)\n&nbsp;\n#include &lt;concepts&gt;\n#include &lt;cstdint&gt;\n&nbsp;\nnamespace std {\n#if !(__cpp_lib_byteswap == 202110L)\n&nbsp;&nbsp;&nbsp; // 如果没有std::byteswap，使用自己实现的版本\n&nbsp;&nbsp;&nbsp; template &lt;typename T&gt;\n&nbsp;&nbsp;&nbsp; T byteswap(T src) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T dest = 0;\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (uint8_t* pSrcByte = reinterpret_cast&lt;uint8_t*&gt;(&amp;src),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pDestByte = reinterpret_cast&lt;uint8_t*&gt;(&amp;dest) + sizeof(T) - 1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pSrcByte != reinterpret_cast&lt;uint8_t*&gt;(&amp;src) + sizeof(T);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++pSrcByte, --pDestByte) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pDestByte = *pSrcByte;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return dest;\n&nbsp;&nbsp; &nbsp;}\n#endif // __cpp_lib_byteswap\n&nbsp;\n#if !(__cpp_lib_endian == 201907L)\n&nbsp;&nbsp;&nbsp; // 如果没有std::endian，使用自己实现的版本\n&nbsp;&nbsp;&nbsp; enum class endian {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; little,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; big,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 需要根据目标体系结构判断，这里简单设置为little\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; native = little\n&nbsp;&nbsp;&nbsp; };\n#endif // __cpp_lib_endian\n&nbsp;\n#if !(__cpp_lib_int_pow2 == 202002L)\n&nbsp;&nbsp;&nbsp; // 如果没有std::has_single_bit，使用自己实现的版本\n&nbsp;&nbsp;&nbsp; template &lt;std::unsigned_integral T&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; requires (!std::same_as&lt;T, bool&gt; &amp;&amp; !std::same_as&lt;T, char&gt; &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !std::same_as&lt;T, char8_t&gt; &amp;&amp; !std::same_as&lt;T, char16_t&gt; &amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !std::same_as&lt;T, char32_t&gt; &amp;&amp; !std::same_as&lt;T, wchar_t&gt;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; constexpr bool has_single_bit(T x) noexcept\n&nbsp;&nbsp;&nbsp; {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x != 0 &amp;&amp; (x &amp; (x - 1)) == 0;\n&nbsp;&nbsp;&nbsp; }\n#endif // __cpp_lib_int_pow2\n}\n</code></pre><p>其实，这段代码对标准库特性兼容性非常重要。</p><p>由于C++23是“更好的C++20”，但是考虑到编译器对新标准的支持进度，我们往往需要一些编程技巧来提高代码的兼容性。</p><p>为了在现代C++编程环境下兼容不同版本的C++，就要用到前面的这些预处理指令。建议你反复品味一下，说不定以后就能在自己的工作里用上。</p><p><strong>__has_include</strong> 是C++17中引入的预处理指令，可以在预处理指令中判断头文件的检索路径是否存在特定的头文件。</p><p>C++20还引入了针对语言特性和库特性的检测宏，代码中的 <strong>__cpp_lib_byteswap</strong>、<strong>__cpp_lib_endian</strong> 和 <strong>__cpp_lib_int_pow2</strong> 分别用于检测编译器是否支持特定的标准库函数。我们可以利用这些特性确定是否使用自定义版本的函数。</p><p><strong>枚举类型endian</strong> 的定义比较简单，我们将native强制设置为little，实际情况下需要根据不同编译器和目标体系结构的定义来设置这个值。</p><p><strong>函数has_single_bit</strong> 的实现比较巧妙。这个函数用于判断二进制位串是否只有一个1，也就是判断数字是否为2的幂。当x为0时返回false容易理解，实现的关键在于x &amp; (x - 1)。</p><p>这里的原理是：如果x只有一个1，那么x-1相当于按位取反，x &amp; (x - 1)必定为0。你自己尝试计算看一下，就非常容易理解了。</p><h2>总结</h2><p>C++20及其后续演进标准提供的位操作库，显著改善了我们的编程效率，特别是针对序列化、反序列化以及位计算这些领域。但是，我们也看到位操作库仍然处在一个持续演进的过程（当然了），我们在实战中就使用到了C++23才提供的工具。</p><p>因此，如何实现兼容的C++位操作库封装，其实是非常重要的。今天，在实现头文件include/ca/BitCompact.h的时候，我用到了一些新的预处理指令和编程技巧，实现了这种兼容性。你可以再好好回味一下最后的代码，相信这能对你的日常编程工作，添上一份力。</p><h2>课后思考</h2><p>我们在include/ca/BitCompact.h的实现里定义了枚举类型endian，用来兼容不同版本的C++和编译器。但是native这一枚举值需要在编译时计算得出。</p><p>那么，你能否给出这段发生在“编译时”的代码，自动计算出不同编译器和目标体系结构的值？</p><p>欢迎把你的方案贴出来，与大家一起分享。我们一同交流。下一讲见！</p>","comments":[{"had_liked":false,"id":386896,"user_name":"李云龙","can_delete":false,"product_type":"c1","uid":3201926,"ip_address":"北京","ucode":"785924B16BE788","user_header":"https://static001.geekbang.org/account/avatar/00/30/db/86/51ec4c41.jpg","comment_is_top":false,"comment_ctime":1705835548,"is_pvip":false,"replies":[{"id":141118,"content":"赞","user_name":"作者回复","user_name_real":"编辑","uid":1006976,"ctime":1706699683,"ip_address":"上海","comment_id":386896,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100523801,"comment_content":"分享一下我的思考题答案：\ninline constexpr uint8_t ComputeByteOrder2() {\n    constexpr int16_t num = 0x0102;\n    constexpr std::bitset&lt;16&gt; bs(num);\n\n    if constexpr(bs[7] == 0b1) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\n\nenum class endian\n{\n    little,\n    big,\n    native = ComputeByteOrder2()\n};","like_count":1,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636673,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1706699683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369657,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1677765762,"is_pvip":false,"replies":[{"id":134890,"content":"位操作性能上没有提升，只是不需要自己实现了。","user_name":"作者回复","user_name_real":"编辑","uid":1006976,"ctime":1678249473,"ip_address":"上海","comment_id":369657,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100523801,"comment_content":"请问：C++20的位操作比以前版本的性能有多少提升？","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608072,"discussion_content":"位操作性能上没有提升，只是不需要自己实现了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678249473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}