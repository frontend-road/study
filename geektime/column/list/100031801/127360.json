{"id":127360,"title":"19 | WebRTC能不能进行文本聊天呢？","content":"<p>WebRTC不但可以让你进行音视频通话，而且还可以用它传输普通的二进制数据，比如说可以利用它实现文本聊天、文件的传输等等。</p><p>WebRTC的<strong>数据通道（RTCDataChannel）</strong>是专门用来传输除了音视频数据之外的任何数据，所以它的应用非常广泛，如实时文字聊天、文件传输、远程桌面、游戏控制、P2P加速等都是它的应用场景。</p><p>像文本聊天、文件传输这类应用，大多数人能想到的通常是通过服务器中转数据的方案，但 WebRTC 则优先使用的是<strong>P2P方案，即两端之间直接传输数据</strong>，这样就大大减轻了服务器的压力。当然WebRTC也可以采用中继的方案，这就需要你根据自己的业务需要进行选择，非常灵活。</p><h2>RTCDataChannel 介绍</h2><p>RTCDataChannel 就是 WebRTC 中专门用来传输非音视频数据的类，它的设计模仿了WebSocket 的实现，使用起来非常方便，关于这一点我将在下面的“RTCDataChannel 的事件” 部分向你做更详细的介绍。</p><p>另外，RTCDataChannel 支持的数据类型也非常多，包括：字符串、Blob、ArrayBuffer 以及 ArrayBufferView。</p><p>实际上，关于这几种类型的联系与区别我在前面<a href=\"https://time.geekbang.org/column/article/109105\">《04 | 可以把采集到的音视频数据录制下来吗？》</a>一文中已经向你做过详细的介绍，如果你现在记不清了，可以再去回顾一下。</p><!-- [[[read_end]]] --><p>WebRTC 的 RTCDataChannel 使用的传输协议为 SCTP，即 Stream Control Transport Protocol。下面图表表示的就是在 TCP、UDP 及 SCTP等不同传输模式下，数据传输的可靠性、传递方式、流控等信息的对比：</p><p><img src=\"https://static001.geekbang.org/resource/image/33/83/33b5d2000a04b0a49b85f8b676727b83.png?wh=1142*534\" alt=\"\"></p><p>RTCDataChannel 既可以在可靠的、有序的模式下工作，也可在不可靠的、无序的模式下工作，具体使用哪种模式可以根据用户的配置来决定。下面我们来看看它们之间的区别。</p><ul>\n<li><strong>可靠有序模式（TCP 模式）</strong>：在这种模式下，消息可以有序到达，但同时也带来了额外的开销，所以在这种模式下<strong>消息传输会比较慢</strong>。</li>\n<li><strong>不可靠无序模式（UDP 模式）</strong>：在此种模式下，不保证消息可达，也不保证消息有序，但在这种模式下没有什么额外开销，所以它<strong>非常快</strong>。</li>\n<li><strong>部分可靠模式（SCTP 模式）</strong>：在这种模式下，消息的可达性和有序性可以根据业务需求进行配置。</li>\n</ul><p>那接下来我们就来看一下到底该如何配置 RTCDataChannle 对象吧。</p><h2>配置 RTCDataChannel</h2><p>在创建 RTCDataChannel 对象之前，首先要创建 RTCPeerConnection 对象，因为 <strong>RTCDataChannel 对象是由 RTCPeerConnection 对象生成的</strong>。有了 RTCPeerConnection 对象后，调用它的 createDataChannel 方法，就可以将 RTCDataChannel 创建出来了。具体操作如下：</p><pre><code>...\nvar pc = new RTCPeerConnection(); //创建 RTCPeerConnection 对象\nvar dc = pc.createDataChannel(&quot;dc&quot;, options); //创建 RTCDataChannel对象\n...\n</code></pre><p>从上面的代码中可以看到 RTCDataChannel 对象是由 RTCPeerConnection 对象创建的，在创建 RTCDataChannel 对象时有两个参数。</p><ul>\n<li>第一个参数是一个标签（字符串），相当于给 RTCDataChannel 起了一个名字；</li>\n<li>第二个参数是 options，其形式如下：</li>\n</ul><pre><code>var options = {\n\tordered: false,\n\tmaxPacketLifeTime: 3000\n};\n</code></pre><p>其实<strong>options</strong>可以指定很多选项，比如像上面所设置的，指定了创建的 RTCDataChannel 是否是有序的，以及最大的存活时间。</p><p>下面我就向你详细介绍一下 options  所支持的选项。</p><ul>\n<li><strong>ordered</strong>：消息的传递是否有序。</li>\n<li><strong>maxPacketLifeTime</strong>：重传消息失败的最长时间。也就是说超过这个时间后，即使消息重传失败了也不再进行重传了。</li>\n<li><strong>maxRetransmits</strong>：重传消息失败的最大次数。</li>\n<li><strong>protocol</strong>：用户自定义的子协议，也就是说可以根据用户自己的业务需求而定义的私有协议，默认为空。</li>\n<li><strong>negotiated</strong>：如果为true，则会删除另一方数据通道的自动设置。这也意味着你可以通过自己的方式在另一侧创建具有相同ID的数据通道。</li>\n<li><strong>id</strong>：当negotiated为true时，允许你提供自己的ID与channel进行绑定。</li>\n</ul><p>在上面的选项中，前三项是经常使用的，也是你要重点搞清楚的。不过需要特别说明的是， <strong>maxRetransmits 与 maxPacketLifeTime 是互斥的</strong>，也就是说这两者不能同时存在，只能二选一。</p><h2>RTCDataChannel 的事件</h2><p>RTCDataChannel 的事件处理与 WebSocket 的事件处理非常相似，RTCDataChannel 在打开、关闭、接收到消息以及出错时都会有接收到事件。</p><p>而当你在使用  RTCDataChannel 时，对上面所描述的这些事件都要进行处理，所以就形成了下面这样的代码模板：</p><pre><code>...\ndc.onerror = (error)=&gt; { //出错\n\t...\n};\n\ndc.onopen = ()=&gt; {//打开\n\t...\n};\n\ndc.onclose = () =&gt; {//关闭\n\t...\n};\n\ndc.onmessage = (event)=&gt;{//收到消息\n\t...\n};\n...\n</code></pre><p>所以在使用 RTCDataChannel 对象时，你只要按上面的模板逐一实现其逻辑就好了，是不是很简单？</p><h2>实时文字聊天</h2><p>有了上面的知识，下面我们就来<strong>看一个具体的例子，看看如何通过 RTCDataChannel 对象实现一个实时文字聊天应用</strong>。</p><p>你可以想像这样一个场景，在两台不同的 PC 上（一个称为 A，另一个称为B），用户打开浏览器，在页面上显示两个textarea，一个作为文本输入框，另一个作为聊天记录的显示框。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/de/f6/de14364397f293a96695e5f2677650f6.png?wh=1142*1056\" alt=\"\"></p><center><span class=\"reference\">文本聊天图</span></center><p>当A向B发消息时，JavaScript会从输入框中提取文本，然后通过RTCDataChannel发送出去。实际上，文本通过 RTCDataChannel 发送出去后，最终是经过 RTCPeerConnection 传送出去的。同理，B向A发送文本数据时也是同样的流程。另一方面，当B收到A发送过来的文本数据后，也要通过RTCDataChannel对象来接收文本数据。</p><p>对于 RTCDataChannel 对象的创建主要有<strong>In-band协商和Out-of-band协商</strong>两种方式。</p><h3>1. In-band 协商方式</h3><p>此方式是默认方式。那什么是  In-band 协商方式呢？假设通信双方中的一方调用 <strong>createDataChannel</strong> 创建 RTCDataChannel 对象时，将 options 参数中的 <strong>negotiated </strong>字段设置为false，则通信的另一方就可以通过它的 RTCPeerConnection 对象的 <strong>ondatachannel</strong> 事件来得到与对方通信的 RTCDataChannel 对象了，这种方式就是 In-band 协商方式。</p><p>那In-band 协商方式到底是如何工作的呢？下面我们就来详细描述一下。</p><ul>\n<li>A端调用 createDataChannel 创建 RTCDataChannel 对象。</li>\n<li>A端与B端交换 SDP，即进行媒体协商（offer/answer）。</li>\n<li>媒体协商完成之后，双方连接就建立成功了。此时，A端就可以向B端发送消息了。</li>\n<li>当B端收到A端发的消息后，B端的 ondatachannel 事件被触发，B端的处理程序就可以从该事件的参数中获得与A端通信的 RTCDataChannel 对象。需要注意的是，该对象与A端创建的 RTCDataChannel 具有相同的属性。</li>\n<li>此时双方的 RTCDataChannel 对象就可以进行双向通信了。</li>\n</ul><p>该方法的<strong>优势是 RTCDataChannel 对象可以在需要时自动创建，不需要应用程序做额外的逻辑处理</strong>。</p><h3>2. Out-of-band 协商方式</h3><p>RTCDataChannel 对象还能使用 Out-of-band 协商方式创建，这种方式不再是一端调用 createDataChannel，另一端监听 ondatachannel 事件，从而实现双方的数据通信；而是两端都调用 createDataChannel 方法创建  RTCDataChannel 对象，再通过 ID 绑定来实现双方的数据通信。具体步骤如下：</p><ul>\n<li>A端调用 createDataChannel({negotiated: true, id: 0}) 方法；</li>\n<li>B也调用 createDataChannel({negotiated: true, id: 0}) 方法；</li>\n<li>双方交换 SDP， 即进行媒体协商（ offer/answer）；</li>\n<li>一旦双方连接建立起来，数据通道可以被立即使用，它们是通过 ID 进行匹配的（这里的ID就是上面 options 中指定的ID，ID 号必须一致）。</li>\n</ul><p>这种方法的优势是，B端不需等待有消息发送来再创建RTCDataChannel对象，所以双方发送数据时不用考虑顺序问题，即谁都可以先发数据，这是与In-band方式的最大不同，这也<strong>使得应用代码变得简单</strong>，因为你不需要处理 ondatachannel 事件了。</p><p>另外，需要注意的是，你选的 ID 不能是任意值。ID值是从0开始计数的，也就是说你第一次创建的 RTCDataChannel 对象的 ID 是0，第二个是 1，依次类推。所以这些ID只能与WebRTC实现协商的SCTP流数量一样，如果你使用的 ID 太大了，而又没有那么多的 SCTP 流的话，那么你的数据通道就不能正常工作了。</p><h2>具体例子</h2><p>了解完相关理论后，接下来我们就实践起来，结合具体例子将这些理论应用起来。</p><p>在本文的例子中，我们使用的是 In-band 协商方式来创建 RTCDataChannel 对象。下面我们就来一步一步操作，看看一个文本聊天应用是如何实现的。</p><h3>1. 添加事件</h3><p>为页面上的每个按钮添加 <strong>onclick 事件</strong>，具体如下面的示例代码所示：</p><pre><code>  var startButton = document.querySelector('button#startButton');\n  var callButton = document.querySelector('button#callButton');\n  var sendButton = document.querySelector('button#sendButton');\n  var closeButton = document.querySelector('button#closeButton');\n\n  startButton.onclick = connectServer; //createConnection;\n  callButton.onclick = call;\n  sendButton.onclick = sendData;\n  closeButton.onclick = closeDataChannels;\n</code></pre><p>在这个段代码中定义了 4 个 button，其中 Start 按钮用于与信令服务器建立连接；Call 用于创建 RTCDataChannel 对象；Send 用于发送文本数据；Close用于关闭连接释放资源。</p><h3>2. 创建连接</h3><p>用户在页面上点击 <strong>Start</strong> 按钮时，会调用 <strong>connectServer</strong> 方法。具体代码如下：</p><pre><code>  function connectServer(){\n  \n    socket = io.connect();  //与服务器建立连接\n\t \n\t ...\n\n\t socket.on('created', function(room) { //第一个用户加入后收到的消息\n\t   createConnection();\n\t });\n    \n\t socket.on('joined', function(room) { //第二个用户加入后收到的消息\n\t   createConnection();\n\t });\n\n\t ...\n  }\n</code></pre><p>从代码中可以看到，connectServer 函数首先调用 <code>io.connect()</code> 连接信令服务器，然后再根据信令服务器下发的消息做不同的处理。</p><blockquote>\n<p>需要注意的是，在本例中我们使用了 socket.io  库与信令服务器建立连接。</p>\n</blockquote><p>如果消息是 <strong>created</strong> 或 <strong>joined</strong>，则调用 createConnection 创建 RTCPeerConnection。其代码如下：</p><pre><code>  var servers = {'iceServers': [{\n\t      'urls': 'turn:youdomain:3478',\n\t      'credential': &quot;passwd&quot;,\n\t      'username': &quot;username&quot;\n\t    }]\n  };\n \n  pc = new RTCPeerConnection(servers, pcConstraint);\n  pc.onicecandidate = handleIceCandidate; //收集候选者\n  pc.ondatachannel = onDataChannelAdded;  //当对接创建数据通道时会回调该方法。\n</code></pre><p>通过上面的代码就将 RTCPeerConnection对象创建好了。</p><h3>3. 创建 RTCDataChannel</h3><p>当用户点击 Call 按钮时，会创建RTCDataChannel，并发送 offer。具体代码如下：</p><pre><code>  dc = pc.createDataChannel('sendDataChannel',\n\t    dataConstraint); //一端主动创建 RTCDataChannel\n  \n  ...\n  dc.onmessage = receivedMessage; //当有文本数据来时，回调该函数。\n\t \n  pc.createOffer(setLocalAndSendMessage,\n        onCreateSessionDescriptionError); //创建offer，如果成功，则在 setLocalAndSendMessage 函数中将 SDP 发送给远端\n</code></pre><p>当其中一方创建了 RTCDataChannel 且通信双方完成了媒体协商、交换了 SDP 之后，另一端收到发送端的消息，ondatachannel 事件就会被触发。此时就会调用它的回调函数onDataChannelAdded ，通过 onDataChannelAdded 函数的参数 event 你就可以获取到另一端的 RTCDataChannel 对象了。具体如下所示：</p><pre><code>  function onDataChannelAdded(event) {\n      dc = event.channel;\n      dc.onmessage = receivedMessage;\n      ...\n  }\n</code></pre><p>至此，双方就可以通过 RTCDataChannel 对象进行双向通信了。</p><h3>4. 数据的发送与接收</h3><p>数据的发送非常简单，当用户点击 Send 按钮后，文本数据就会通过 RTCDataChannel 传输到远端。其代码如下：</p><pre><code>  function sendData() {\n      var data = dataChannelSend.value;\n      dc.send(data);\n  }\n</code></pre><p>而对于接收数据，则是通过 RTCDataChannel 的 onmessage 事件实现的。当该事件触发后，会调用 receivedMessage 方法。通过其参数就可以获取到对端发送的文本数据了。具体代码如下：</p><pre><code>  function receivedMessage(e) {\n      var msg = e.data;\n      if (msg) {\n          dataChannelReceive.value += &quot;&lt;- &quot; + msg + &quot;\\n&quot;;\n      } \n  };\n</code></pre><p>以上就是文本聊天的大体逻辑。具体的代码你可以到（文末的）<a href=\"https://github.com/avdance/webrtc_web/tree/master/19_chat/\">GitHub链接</a>上获取。</p><h2>小结</h2><p>本文我们结合具体的例子——实时文字聊天，向你详细介绍了如何使用 RTCDataChannel 进行非音视频数据的传输。</p><p>RTCDataChannel的创建有两种方式，一种是默认的In-band协商方式，另一种是Out-of-band协商方式。在本文例子的实践部分，我们主要应用的是第一种方式。但一般情况下我更推荐使用第二种方式，因为它更高效、更简洁。</p><p>另外，在使用 RTCDataChannel 时，还有两点你需要注意：</p><ol>\n<li>RTCDataChannel对象的创建要在媒体协商（offer/answer） 之前创建，否则 WebRTC 就会一直处于 connecting 状态，从而导致数据无法进行传输。</li>\n<li>RTCDataChannel对象是可以双向传输数据的，所以接收与发送使用一个 RTCDataChannel对象即可，而不需要为发送和接收单独创建 RTCDataChannel 对象。</li>\n</ol><p>当然本文只是介绍了RTCDataChannel的“一种”具体应用，若你有兴趣还可以自行实践其他更有趣的实现。</p><h2>思考时间</h2><p>今天留给你的思考题是：SCTP 协议是运行在 TCP 协议之上还是 UDP 协议之上呢？</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><h2>参考</h2><p>具体代码地址：<a href=\"https://github.com/avdance/webrtc_web/tree/master/19_chat/\">https://github.com/avdance/webrtc_web/tree/master/19_chat/</a></p><p></p>","comments":[{"had_liked":false,"id":152030,"user_name":"John","can_delete":false,"product_type":"c1","uid":1020861,"ip_address":"","ucode":"E4ADF8488953FB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/bd/f3977ebb.jpg","comment_is_top":false,"comment_ctime":1573848099,"is_pvip":false,"replies":[{"id":"59351","content":"一路 640*420 的视频咱们估算是 500kbps， 那么  100 人同时与一个人通信就需要 100*500kbps， 也就是说需要 50M的带宽。而这 100 人的 NAT 类型千奇百怪。你想想这样做靠谱吗？","user_name":"作者回复","comment_id":152030,"uid":"1507837","ip_address":"","utype":1,"ctime":1574501722,"user_name_real":"garrylee"}],"discussion_count":2,"race_medal":0,"score":"23048684579","product_id":100031801,"comment_content":"这个问题好像应该问在这个章节: 如果做百人群聊的功能 不用中间服务器 只用webrtc技术和peerconnection 大家觉得普通带宽和手机能够承载么","like_count":4,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474692,"discussion_content":"一路 640*420 的视频咱们估算是 500kbps， 那么  100 人同时与一个人通信就需要 100*500kbps， 也就是说需要 50M的带宽。而这 100 人的 NAT 类型千奇百怪。你想想这样做靠谱吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574501722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066752,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","nickname":"piboye","note":"","ucode":"7CFD8712857A85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338771,"discussion_content":"老师， 他说的群聊， 不一定要视频。 还有 视频可以通过 100个人组成网格， 通过100个人选出一部分人来做中继实现吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609378332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128583,"user_name":"Geek_c1c44a","can_delete":false,"product_type":"c1","uid":1642447,"ip_address":"","ucode":"F1C1DB564C335D","user_header":"","comment_is_top":false,"comment_ctime":1566908568,"is_pvip":false,"replies":[{"id":"47709","content":"zoom 是 Zoom 公司开发的一款直播软件，它底层也用的 地UDP 协议，他的老板袁征以前是 Webex 的高管。 Webex 是第一家在美国上市的，专门做音视频会议的公司。创建于 1996年，2000年左右在美国上市，后 2007年被cisco 公司收购。Webex出走的人很多都创业做音视频相关的事情，像国内的 声网都是 Webex的人创建的。","user_name":"作者回复","comment_id":128583,"uid":"1507837","ip_address":"","utype":1,"ctime":1566917512,"user_name_real":"garrylee"}],"discussion_count":1,"race_medal":0,"score":"23041745048","product_id":100031801,"comment_content":"老师您好，请问zoom和直播技术相关吗？zoom可能使用什么协议呢？","like_count":6,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465004,"discussion_content":"zoom 是 Zoom 公司开发的一款直播软件，它底层也用的 地UDP 协议，他的老板袁征以前是 Webex 的高管。 Webex 是第一家在美国上市的，专门做音视频会议的公司。创建于 1996年，2000年左右在美国上市，后 2007年被cisco 公司收购。Webex出走的人很多都创业做音视频相关的事情，像国内的 声网都是 Webex的人创建的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566917512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128506,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566891375,"is_pvip":false,"replies":[{"id":"47711","content":"赞！","user_name":"作者回复","comment_id":128506,"uid":"1507837","ip_address":"","utype":1,"ctime":1566917525,"user_name_real":"garrylee"}],"discussion_count":1,"race_medal":0,"score":"23041727855","product_id":100031801,"comment_content":"SCTP 协议基于UDP，自行实现TCP相关的功能。","like_count":6,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464977,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566917525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263188,"user_name":"三角形小于零","can_delete":false,"product_type":"c1","uid":1026174,"ip_address":"","ucode":"C2F89597662D4B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/7e/c9201b20.jpg","comment_is_top":false,"comment_ctime":1606037212,"is_pvip":false,"replies":[{"id":"95534","content":"没错，都是由RTCPeerConnection发出去的。对于底层传输来说，它不关心你上层是什么，都走同样的物理链接。","user_name":"作者回复","comment_id":263188,"uid":"1507837","ip_address":"","utype":1,"ctime":1606090109,"user_name_real":"音视频专家-李超"}],"discussion_count":1,"race_medal":0,"score":"10195971804","product_id":100031801,"comment_content":"&quot;文本通过 RTCDataChannel 发送出去后，最终是经过 RTCPeerConnection 传送出去的&quot; <br>之前提到过 RTCPeerConnection 可以理解为是一个功能超强的 socket，那么 DataChannel 的 SCTP 也是使用这个超强的 socket 来实现的吗？ <br><br>如果需要 relay，那么 turn server 也会负责帮忙 relay 通信双方往 DataChannel 里发的数据吗？ ","like_count":3,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510118,"discussion_content":"没错，都是由RTCPeerConnection发出去的。对于底层传输来说，它不关心你上层是什么，都走同样的物理链接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606090109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249261,"user_name":"宇宙之王","can_delete":false,"product_type":"c1","uid":1981915,"ip_address":"","ucode":"5E6C28F8CCFF6D","user_header":"","comment_is_top":false,"comment_ctime":1600528625,"is_pvip":false,"replies":[{"id":"94557","content":"应该是有BUG ","user_name":"作者回复","comment_id":249261,"uid":"1507837","ip_address":"","utype":1,"ctime":1605004654,"user_name_real":"音视频专家-李超"}],"discussion_count":1,"race_medal":0,"score":"5895495921","product_id":100031801,"comment_content":"看到您GitHub例子里面19_chat用了var pcConfig = {<br>  &#39;iceServers&#39;: [{<br>    &#39;urls&#39;: &#39;turn:stun.al.learningrtc.cn:3478&#39;,<br>    &#39;credential&#39;: &quot;mypasswd&quot;,<br>    &#39;username&#39;: &quot;garrylea&quot;<br>  }]<br>};<br>这段是不是没用，好像是您自己的服务器，我把它赋值空var pcConfig=null;也能正常运行。另外当开两个窗口的时候，有时会掉线一个，再连接服务器能连上，但是发送框就老是灰的了，就要两个都断掉重新再联了，这一般是什么原因，谢谢老师！<br>","like_count":1,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505880,"discussion_content":"应该是有BUG ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605004654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128898,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1233546,"ip_address":"","ucode":"84925F8DEE79CA","user_header":"https://static001.geekbang.org/account/avatar/00/12/d2/8a/57dcd0c7.jpg","comment_is_top":false,"comment_ctime":1566981331,"is_pvip":false,"replies":[{"id":"48409","content":"信令服务器或者说业务服务器对性能要高不要的话使用 go&#47;java 比较好。流媒体服务器由于对性能要求特别高，所以要使用 C&#47;C++ 开发","user_name":"作者回复","comment_id":128898,"uid":"1507837","ip_address":"","utype":1,"ctime":1567264775,"user_name_real":"garrylee"}],"discussion_count":1,"race_medal":0,"score":"5861948627","product_id":100031801,"comment_content":"老师，一个题外话，这么多可作后端的语言，c++、python、go、java、c#该如何选择了？","like_count":1,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465162,"discussion_content":"信令服务器或者说业务服务器对性能要高不要的话使用 go/java 比较好。流媒体服务器由于对性能要求特别高，所以要使用 C/C++ 开发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567264775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255719,"user_name":"Bubbly","can_delete":false,"product_type":"c1","uid":1932887,"ip_address":"","ucode":"5AAAFDBCBC4CEB","user_header":"https://static001.geekbang.org/account/avatar/00/1d/7e/57/588337e9.jpg","comment_is_top":false,"comment_ctime":1603417986,"is_pvip":false,"replies":[{"id":"94541","content":"这个需要你自己购买域名和证书，这个证书是我的，现在已经过期了。","user_name":"作者回复","comment_id":255719,"uid":"1507837","ip_address":"","utype":1,"ctime":1605003762,"user_name_real":"音视频专家-李超"}],"discussion_count":1,"race_medal":0,"score":"1603417986","product_id":100031801,"comment_content":"var options = {<br>\tkey : fs.readFileSync(&#39;.&#47;cert&#47;1557605_www.learningrtc.cn.key&#39;),<br>\tcert: fs.readFileSync(&#39;.&#47;cert&#47;1557605_www.learningrtc.cn.pem&#39;)<br>}<br>老师，这里的key和pem都没有呀","like_count":0,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507811,"discussion_content":"这个需要你自己购买域名和证书，这个证书是我的，现在已经过期了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605003762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204429,"user_name":"cheese","can_delete":false,"product_type":"c1","uid":1953110,"ip_address":"","ucode":"A410A80F7AB6B6","user_header":"https://static001.geekbang.org/account/avatar/00/1d/cd/56/988460da.jpg","comment_is_top":false,"comment_ctime":1586398672,"is_pvip":false,"replies":[{"id":"76551","content":"可以，但有很大的局限性，你可以自己想想","user_name":"作者回复","comment_id":204429,"uid":"1507837","ip_address":"","utype":1,"ctime":1586485549,"user_name_real":"garrylee"}],"discussion_count":1,"race_medal":0,"score":"1586398672","product_id":100031801,"comment_content":"在create和join后，双方成功连接后，能否用Datachannel来传输信令呢？比如：关闭麦克风之类的","like_count":0,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491177,"discussion_content":"可以，但有很大的局限性，你可以自己想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586485549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189777,"user_name":"Geek_5a0689","can_delete":false,"product_type":"c1","uid":1911478,"ip_address":"","ucode":"E424A43AA72AE9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIQYc8seCHrRfJicqCWDfUap4jdHWnJ39ezlpvIY5sbwZP8ze9lFE572hzeNEY07nHWVjaR0QLjgyw/132","comment_is_top":false,"comment_ctime":1584548102,"is_pvip":false,"replies":[{"id":"73328","content":"你购买了http 域名，申请了 https 证书吗？","user_name":"作者回复","comment_id":189777,"uid":"1507837","ip_address":"","utype":1,"ctime":1584705502,"user_name_real":"garrylee"}],"discussion_count":1,"race_medal":0,"score":"1584548102","product_id":100031801,"comment_content":"老师，我的server.js在我部署的腾讯云服务器上跑起来了，但是在我本机的html页面请求的时候，没有任何反应，看服务器上的日志也是没有任何的打印，是什么原因呢？我直接跑的git上面的代码都不可以","like_count":0,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487790,"discussion_content":"你购买了http 域名，申请了 https 证书吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584705502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129158,"user_name":"希望改名字不被发现的俊wen","can_delete":false,"product_type":"c1","uid":1374829,"ip_address":"","ucode":"F559E55C0E678A","user_header":"https://static001.geekbang.org/account/avatar/00/14/fa/6d/d8ba854c.jpg","comment_is_top":false,"comment_ctime":1567051762,"is_pvip":true,"replies":[{"id":"48413","content":"这是两个不同的通道无法同步","user_name":"作者回复","comment_id":129158,"uid":"1507837","ip_address":"","utype":1,"ctime":1567266269,"user_name_real":"garrylee"}],"discussion_count":2,"race_medal":0,"score":"1567051762","product_id":100031801,"comment_content":"同一个peerconnection，datachannel发送的文字能和视频stream保持同步吗","like_count":0,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465311,"discussion_content":"这是两个不同的通道无法同步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567266269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073947,"avatar":"https://static001.geekbang.org/account/avatar/00/10/63/1b/83ac7733.jpg","nickname":"忧天小鸡","note":"","ucode":"A1412BDC108FD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558971,"discussion_content":"声网提供的技术，已经可以同步了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648535932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128191,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1241196,"ip_address":"","ucode":"87BDADEED2AB23","user_header":"","comment_is_top":false,"comment_ctime":1566861025,"is_pvip":false,"replies":[{"id":"47569","content":"赞","user_name":"作者回复","comment_id":128191,"uid":"1507837","ip_address":"","utype":1,"ctime":1566878436,"user_name_real":"garrylee"}],"discussion_count":1,"race_medal":0,"score":"1566861025","product_id":100031801,"comment_content":"SCTP是运行在UDP上的，本质上是对UDP的封装，在应用层实现了有序性与可靠性的配置。","like_count":1,"discussions":[{"author":{"id":1507837,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/fd/69869646.jpg","nickname":"音视频专家-李超","note":"","ucode":"5557943CF28441","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464835,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566878436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}