{"id":89745,"title":"50 | 推荐系统（下）：如何通过SVD分析用户和物品的矩阵？","content":"<p>你好，我是黄申。</p><p>上一节，我们讲了如何使用矩阵操作，实现基于用户或者物品的协同过滤。实际上，推荐系统是个很大的课题，你可以尝试不同的想法。比如，对于用户给电影评分的案例，是不是可以使用SVD奇异值的分解，来分解用户评分的矩阵，并找到“潜在”的电影主题呢？如果在一定程度上实现这个目标，那么我们可以通过用户和主题，以及电影和主题之间的关系来进行推荐。今天，我们继续使用MovieLens中的一个数据集，尝试Python代码中的SVD分解，并分析一些结果所代表的含义。</p><h2>SVD回顾以及在推荐中的应用</h2><p>在实现SVD分解之前，我们先来回顾一下SVD的主要概念和步骤。如果矩阵$X$是对称的方阵，那么我们可以求得这个矩阵的特征值和特征向量，并把矩阵$X$分解为特征值和特征向量的乘积。</p><p>假设我们求出了矩阵$X$的$n$个特征值$λ_1，λ_2，…，λ_n$，以及这$n$个特征值所对应的特征向量$v_1，v_2，…，v_n$，那么矩阵$X$可以表示为：</p><!-- [[[read_end]]] --><center>$X=VΣV^{-1}$</center><p>其中，$V$是这$n$个特征向量所组成的$n×n$维矩阵，而$Σ$是这$n$个特征值为主对角线的$n×n$维矩阵。这个过程就是特征分解（Eigendecomposition）。</p><p>如果我们会把$V$的这$n$个特征向量进行标准化处理，那么对于每个特征向量$V_i$，就有$||V_{i}||_{2}=1$，而这表示$V’_iV_i=1$，此时$V$的$n$个特征向量为标准正交基，满足$V’V=I$， 也就是说，$V$为酉矩阵，有$V’=V^{-1}$ 。这样一来，我们就可以把特征分解表达式写作：</p><center>$X=VΣV'$</center><p>可是，如果矩阵$X$不是对称的方阵，那么我们不一定能得到有实数解的特征分解。但是，SVD分解可以避免这个问题。</p><p>我们可以把$X$的转置$X’$和$X$做矩阵乘法，得到一个$n×n$维的对称方阵$X’X$，并对这个对称方阵进行特征分解。分解的时候，我们得到了矩阵$X’X$的$n$个特征值和对应的$n$个特征向量$v$，其中所有的特征向量叫作$X$的右奇异向量。通过所有右奇异向量我们可以构造一个$n×n$维的矩阵$V$。</p><p>类似地，如果我们把$X$和$X’$做矩阵乘法，那么会得到一个$m×m$维的对称方阵$XX’$。由于$XX’$也是方阵，因此我们同样可以对它进行特征分解，并得到矩阵$XX’$的$m$个特征值和对应的$m$个特征向量$u$，其中所有的特征向量向叫作$X$的左奇异向量。通过所有左奇异向量我们可以构造一个$m×m$的矩阵$U$。</p><p>现在，包含左右奇异向量的$U$和$V$都求解出来了，只剩下奇异值矩阵$Σ$了。$Σ$除了对角线上是奇异值之外，其他位置的元素都是0，所以我们只需要求出每个奇异值$σ$就可以了。之前我们已经推导过，$σ$可以通过两种方式获得。第一种方式是计算下面这个式子：</p><center>$σ_i=\\frac{X_{v_{i}}}{u_{i}}$</center><p>其中$v_i$和$u_i$都是列向量。一旦我们求出了每个奇异值$σ$，那么就能得到奇异值矩阵$Σ$。</p><p>第二种方式是通过$X’X$矩阵或者$XX’$矩阵的特征值之平方根，来求奇异值。计算出每个奇异值$σ$，那么就能得到奇异值矩阵$Σ$了。</p><p>通过上述几个步骤，我们就能把一个$mxn$维的实数矩阵，分解成$X=UΣV’$的形式。那么这种分解对于推荐系统来说，又有怎样的意义呢？</p><p>之前我讲过，在潜在语义分析LSA的应用场景下，分解之后所得到的奇异值$σ$，对应一个语义上的“概念”，而$σ$值的大小表示这个概念在整个文档集合中的重要程度。$U$中的左奇异向量表示了每个文档和这些语义“概念”的关系强弱，$V$中的右奇异向量表示每个词条和这些语义“概念”的关系强弱。</p><p>最终，SVD分解把原来的“词条-文档”关系，转换成了“词条-语义概念-文档”的关系。而在推荐系统的应用场景下，对用户评分矩阵的SVD分解，能够帮助我们找到电影中潜在的“主题”，比如科幻类、动作类、浪漫类、传记类等等。</p><p>分解之后所得到的奇异值$σ$对应了一个“主题”，$σ$值的大小表示这个主题在整个电影集合中的重要程度。$U$中的左奇异向量表示了每位用户对这些“主题”的喜好程度，$V$中的右奇异向量表示每部电影和这些“主题”的关系强弱。</p><p>最终，SVD分解把原来的“用户-电影”关系，转换成了“用户-主题-电影”的关系。有了这种新的关系，即使我们没有人工标注的电影类型，同样可以使用更多基于电影主题的推荐方法，比如通过用户对电影主题的评分矩阵，进行基于用户或者电影的协同过滤。</p><p>接下来，我会使用同样一个MovieLens的数据集，一步步展示如何通过Python语言，对用户评分的矩阵进行SVD分解，并分析一些结果的示例。</p><h2>Python中的SVD实现和结果分析</h2><p>和上节的代码类似，首先我们需要加载用户对电影的评分。不过，由于非并行SVD分解的时间复杂度是3次方数量级，而空间复杂度是2次方数量级，所以对硬件资源要求很高。这里为了节省测试的时间，我增加了一些语句，只取大约十分之一的数据。</p><pre><code>import pandas as pd\nfrom numpy import *\n\n\n# 加载用户对电影的评分数据\ndf_ratings = pd.read_csv(&quot;/Users/shenhuang/Data/ml-latest-small/ratings.csv&quot;)\n\n\n# 获取用户的数量和电影的数量，这里我们只取前1/10来减小数据规模\nuser_num = int(df_ratings[&quot;userId&quot;].max() / 10)\nmovie_num = int(df_ratings[&quot;movieId&quot;].max() / 10)\n\n\n# 构造用户对电影的二元关系矩阵\nuser_rating = [[0.0] * movie_num for i in range(user_num)]\n\n\ni = 0\nfor index, row in df_ratings.iterrows():   # 获取每行的index、row\n\n\n  # 由于用户和电影的ID都是从1开始，为了和Python的索引一致，减去1\n  userId = int(row[&quot;userId&quot;]) - 1\n  movieId = int(row[&quot;movieId&quot;]) - 1\n\n\n  # 我们只取前1/10来减小数据规模\n  if (userId &gt;= user_num) or (movieId &gt;= movie_num):\n    continue\n\n\n  # 设置用户对电影的评分\n  user_rating[userId][movieId] = row[&quot;rati\n</code></pre><p>之后，二维数组转为矩阵，以及标准化矩阵的代码和之前是一致的。</p><pre><code># 把二维数组转化为矩阵\nx = mat(user_rating)\n\n\n# 标准化每位用户的评分数据\nfrom sklearn.preprocessing import scale\n\n\n# 对每一行的数据，进行标准化\nx_s = scale(x, with_mean=True, with_std=True, axis=1)\nprint(&quot;标准化后的矩阵：&quot;, x_s\n</code></pre><p>Python的numpy库，已经实现了一种SVD分解，我们只调用一个函数就行了。</p><pre><code># 进行SVD分解\nfrom numpy import linalg as LA\n\n\nu,sigma,vt = LA.svd(x_s, full_matrices=False, compute_uv=True)\nprint(&quot;U矩阵：&quot;, u)\nprint(&quot;Sigma奇异值：&quot;, sigma)\nprint(&quot;V矩阵：&quot;, vt)\n</code></pre><p>最后输出的Sigma奇异值大概是这样的：</p><pre><code>Sigma奇异值： [416.56942602 285.42546812 202.25724866 ... 79.26188177  76.35167406 74.96719708]\n</code></pre><p>最后几个奇异值不是0，说明我们没有办法完全忽略它们，不过它们相比最大的几个奇异值还是很小的，我们可以去掉这些值来求得近似的解。</p><p>为了验证一下SVD的效果，我们还可以加载电影的元信息，包括电影的标题和类型等等。我在这里使用了一个基于哈希的Python字典结构来存储电影ID到标题和类型的映射。</p><pre><code># 加载电影元信息\ndf_movies = pd.read_csv(&quot;/Users/shenhuang/Data/ml-latest-small/movies.csv&quot;)\ndict_movies = {}\n\n\nfor index, row in df_movies.iterrows():   # 获取每行的index、row\n  dict_movies[row[&quot;movieId&quot;]] = &quot;{0},{1}&quot;.format(row[&quot;title&quot;], row[&quot;genres&quot;])\nprint(dict_movies)\n</code></pre><p>我刚刚提到，分解之后所得到的奇异值$σ$对应了一个“主题”，$σ$值的大小表示这个主题在整个电影集合中的重要程度，而V中的右奇异向量表示每部电影和这些“主题”的关系强弱。所以，我们可以对分解后的每个奇异值，通过$V$中的向量，找找看哪些电影和这个奇异值所对应的主题更相关，然后看看SVD分解所求得的电影主题是不是合理。比如，我们可以使用下面的代码，来查看和向量$Vt1$,相关的电影主要有哪些。</p><pre><code># 输出和某个奇异值高度相关的电影，这些电影代表了一个主题\nprint(max(vt[1,:]))\nfor i in range(movie_num):\n    if (vt[1][i] &gt; 0.1):\n        print(i + 1, vt[1][i], dict_movies[i + 1])\n</code></pre><p>需要注意的是，向量中的电影ID和原始的电影ID差1，所以在读取dict_movies时需要使用(i + 1)。这个向量中最大的分值大约是0.173，所以我把阈值设置为0.1，并输出了所有分值大于0.1的电影，电影列表如下：</p><pre><code>0.17316444479201024\n260 0.14287410901699643 Star Wars: Episode IV - A New Hope (1977),Action|Adventure|Sci-Fi\n1196 0.1147295905497075 Star Wars: Episode V - The Empire Strikes Back (1980),Action|Adventure|Sci-Fi\n1198 0.15453176747222075 Raiders of the Lost Ark (Indiana Jones and the Raiders of the Lost Ark) (1981),Action|Adventure\n1210 0.10411193224648774 Star Wars: Episode VI - Return of the Jedi (1983),Action|Adventure|Sci-Fi\n2571 0.17316444479201024 Matrix, The (1999),Action|Sci-Fi|Thriller\n3578 0.1268370902126096 Gladiator (2000),Action|Adventure|Drama\n4993 0.12445203514448012 Lord of the Rings: The Fellowship of the Ring, The (2001),Adventure|Fantasy\n5952 0.12535012292041953 Lord of the Rings: The Two Towers, The (2002),Adventure|Fantasy\n7153 0.10972312192709989 Lord of the Rings: The Return of the King, The (2003),Action|Adventure|Drama|Fantasy\n</code></pre><p>从这个列表可以看出，这个主题是关于科幻或者奇幻类的动作冒险题材。</p><p>使用类似的代码和同样的阈值0.1，我们来看看和向量$Vt5$,相关的电影主要有哪些。</p><pre><code># 输出和某个奇异值高度相关的电影，这些电影代表了一个主题\nprint(max(vt[5,:]))\nfor i in range(movie_num):\n    if (vt[5][i] &gt; 0.1):\n        print(i + 1, vt[5][i], dict_movies[i + 1])\n</code></pre><p>电影列表如下：</p><pre><code>0.13594520920117012\n21 0.13557812349701226 Get Shorty (1995),Comedy|Crime|Thriller\n50 0.11870851441884082 Usual Suspects, The (1995),Crime|Mystery|Thriller\n62 0.11407971751480048 Mr. Holland's Opus (1995),Drama\n168 0.10295400456394468 First Knight (1995),Action|Drama|Romance\n222 0.12587492482374366 Circle of Friends (1995),Drama|Romance\n261 0.13594520920117012 Little Women (1994),Drama\n339 0.10815473505804706 While You Were Sleeping (1995),Comedy|Romance\n357 0.11108191756350501 Four Weddings and a Funeral (1994),Comedy|Romance\n527 0.1305895737838763 Schindler's List (1993),Drama|War\n595 0.11155774544755555 Beauty and the Beast (1991),Animation|Children|Fantasy|Musical|Romance|IMAX\n</code></pre><p>从这个列表可以看出，这个主题更多的是关于剧情类题材。就目前所看的两个向量来说，SVD在一定程度上区分了不同的电影主题，你也可以使用类似的方式查看更多的向量，以及对应的电影名称和类型。</p><h2>总结</h2><p>在今天的内容中，我们回顾了SVD奇异值分解的核心思想，解释了如何通过$XX’$和$X’X$这两个对称矩阵的特征分解，求得分解后的$U$矩阵、$V$矩阵和$Σ$矩阵。另外，我们也解释了在用户对电影评分的应用场景下，SVD分解后的$U$矩阵、$V$矩阵和$Σ$矩阵各自代表的意义，其中$Σ$矩阵中的奇异值表示了SVD挖掘出来的电影主题，$U$矩阵中的奇异向量表示用户对这些电影主题的评分，而$V$矩阵中的奇异向量表示了电影和这些主题的相关程度。</p><p>我们还通过Python代码，实践了这种思想在推荐算法中的运用。从结果的奇异值和奇异向量可以看出，SVD分解找到了一些MovieLens数据集上的电影主题。这样我们就可以把用户针对电影的评分转化为用户针对主题的评分。由于主题通常远远小于电影，所以SVD的分解也帮助我们实现了降低特征维度的目的。</p><p>SVD分解能够找到一些“潜在的”因素，例如语义上的概念、电影的主题等等。虽然这样操作可以降低特征维度，去掉一些噪音信息，但是由于SVD分解本身的计算量也很大，所以从单次的执行效率来看，SVD往往无法起到优化的作用。在这种情况下，我们可以考虑把它和一些监督式的学习相结合，使用一次分解的结果构建分类器，提升日后的执行效率。</p><h2>思考题</h2><p>刚才SVD分解实验中得到的$U$矩阵，是用户对不同电影主题的评分矩阵。请你使用这个$U$矩阵，进行基于用户或者基于主题（物品）的协同过滤。</p><p>欢迎留言和我分享，也欢迎你在留言区写下今天的学习笔记。你可以点击“请朋友读”，把今天的内容分享给你的好友，和他一起精进。</p>","comments":[{"had_liked":false,"id":101462,"user_name":"愤怒的虾干","can_delete":false,"product_type":"c1","uid":1266043,"ip_address":"","ucode":"CEBD1B2BE7BCEE","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/7b/191a2112.jpg","comment_is_top":false,"comment_ctime":1559813199,"is_pvip":false,"replies":[{"id":"36586","content":"很细致的分析，确实这里的奇异向量是一个很抽象的概念，在实际中由很多因素决定，不仅仅包括电影的类型、也包括用户的口味、电影的导演、演员、制作的精良程度等等。<br>这里我们假设电影类型对用户的评分影响是最大的，所以最极致的情况是，用户评分时只看电影类型，不考虑其他任何因素。如果是这样，噪音是最小的，分解出来的向量也能很好的区分不同类型的电影。当然，实际情况并非如此，所你会看到结果并不是完全理想的。所以，在实际项目中，对SVD分解结果的解释，要结合具体的应用场景，你这样的分析就很好👍。<br>对于多个决定因素，另一种可行的处理方法是，结合行业经验，发现可能影响结果的主要因素，然后按照不同的维度分割数据，再来进行SVD分解。比如，我们发现除了电影类型之外，电影导演也很大程度上影响了评分，那么我们就可以抽取同一种电影类型，假设电影类型对评分没有影响，然后进行SVD分解，那么分解的结果可解释为不同水平导演的分组。不过，这样处理可能会导致数据量比较稀疏。 ","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1559839228,"ip_address":"","comment_id":101462,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44509486159","product_id":100021201,"comment_content":"黄老师，你好，假设X&#39;乘X结果是矩阵A，则V是A的特征向量矩阵，根据几何意义A（i,j）表示的是列向量X,i乘X,j，即电影i和电影j的用户评分乘积；由特征向量的几何意义可知，特征值最大对应的特征向量v表示受众广且评分高（即点评的人多且分数高）的电影，次之是受众广且评分一般或受众窄且评分高的电影，最后特征值最小的表示受众窄且评分低的电影。<br>同理XX&#39;的特征矩阵U，当特征值最大时表示的是用户有相同审美理念（都对同一类型感兴趣且评分相近），特征值低表示用户间观影理念有较大差异。<br>综合上述结论，我觉得V并不能区分电影类型。比如特征值最大取出的一组电影大多是评分5且评分人数多，即受众广，第五组大多是评分是4且评分人数不如上面的，即较为受人欢迎。之所以这些数据里电影类型较为雷同，我觉得应该是受众广的电影恰好是这一类的题材导致。请老师看下我说的对吗？","like_count":10,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452974,"discussion_content":"很细致的分析，确实这里的奇异向量是一个很抽象的概念，在实际中由很多因素决定，不仅仅包括电影的类型、也包括用户的口味、电影的导演、演员、制作的精良程度等等。\n这里我们假设电影类型对用户的评分影响是最大的，所以最极致的情况是，用户评分时只看电影类型，不考虑其他任何因素。如果是这样，噪音是最小的，分解出来的向量也能很好的区分不同类型的电影。当然，实际情况并非如此，所你会看到结果并不是完全理想的。所以，在实际项目中，对SVD分解结果的解释，要结合具体的应用场景，你这样的分析就很好👍。\n对于多个决定因素，另一种可行的处理方法是，结合行业经验，发现可能影响结果的主要因素，然后按照不同的维度分割数据，再来进行SVD分解。比如，我们发现除了电影类型之外，电影导演也很大程度上影响了评分，那么我们就可以抽取同一种电影类型，假设电影类型对评分没有影响，然后进行SVD分解，那么分解的结果可解释为不同水平导演的分组。不过，这样处理可能会导致数据量比较稀疏。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559839228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88062,"user_name":"zzz","can_delete":false,"product_type":"c1","uid":1392427,"ip_address":"","ucode":"C57B9D2FDB19B8","user_header":"https://static001.geekbang.org/account/avatar/00/15/3f/2b/966c348b.jpg","comment_is_top":false,"comment_ctime":1555832064,"is_pvip":false,"replies":[{"id":"31695","content":"这是个很好的问题，实际上影响用户评分确实有很多，除了电影类型，还有导演、演员什么的，不过通常电影类型还是占了主要地位，这里假设主要是电影类型决定了喜好程度。如果还有很多其他主要因素，就不能简单认为SVD找出的潜在因素是电影主题","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1555885333,"ip_address":"","comment_id":88062,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27325635840","product_id":100021201,"comment_content":"为什么SVD对电影分解出来的奇异值是“主题“（科幻类，剧情类……），而不是电影其他的概念，毕竟SVD的输入只是用户与电影的评分数据，没有别的信息。<br>不过想想电影除了主题好像也没什么别的。","like_count":6,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447706,"discussion_content":"这是个很好的问题，实际上影响用户评分确实有很多，除了电影类型，还有导演、演员什么的，不过通常电影类型还是占了主要地位，这里假设主要是电影类型决定了喜好程度。如果还有很多其他主要因素，就不能简单认为SVD找出的潜在因素是电影主题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555885333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88176,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1555875256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18735744440","product_id":100021201,"comment_content":"# 优化下 减少运行时间<br>#https:&#47;&#47;github.com&#47;qinggeouye&#47;GeekTime&#47;blob&#47;master&#47;MathematicProgrammer&#47;50_recomendSystem_SVD&#47;lesson50_2.py<br>import pandas as pd<br>import numpy as np<br>from sklearn.preprocessing import scale<br><br><br># 加载用户对电影对评分数据<br>df_ratings = pd.read_csv(&quot;ml-latest-small&#47;ratings.csv&quot;)<br><br># 获取用户对数量和电影对数量 这里只取前 1&#47;10 , 减少数据规模<br>user_num = int(df_ratings[&quot;userId&quot;].max() &#47; 10)<br>movie_num = int(df_ratings[&quot;movieId&quot;].max() &#47; 10)<br>print(user_num, movie_num)<br>df_ratings = df_ratings[df_ratings[&quot;userId&quot;] &lt;= user_num]<br>df_ratings = df_ratings[df_ratings[&quot;movieId&quot;] &lt;= movie_num]<br><br># 构造用户对电影对二元关系矩阵<br>user_rating = np.zeros((user_num, movie_num))<br><br># 由于用户和电影对 ID 都是从 1 开始，为了和 Python 的索引一致，减去 1<br>df_ratings[&quot;userId&quot;] = df_ratings[&quot;userId&quot;] - 1<br>df_ratings[&quot;movieId&quot;] = df_ratings[&quot;movieId&quot;] - 1<br># 设置用户对电影对评分<br>for userId in range(user_num):<br>    user_rating[userId][df_ratings[df_ratings[&quot;userId&quot;] == userId][&quot;movieId&quot;]] = \\<br>        df_ratings[df_ratings[&quot;userId&quot;] == userId][&quot;rating&quot;]<br><br># 二维数组转化为矩阵<br>x = np.mat(user_rating)<br><br># 标准化每位用户的评分数据 每一行<br>x_s = scale(x, with_mean=True, with_std=True, axis=1)<br><br># 进行 SVD 奇异值分解<br>u, sigma, vt = np.linalg.svd(x_s, full_matrices=False, compute_uv=True)<br>print(&quot;U 矩阵：&quot;, u)<br>print(&quot;Sigma 奇异值：&quot;, sigma)<br>print(&quot;V 矩阵：&quot;, vt)<br><br># 加载电影元信息<br>df_movies = pd.read_csv(&quot;ml-latest-small&#47;movies.csv&quot;)<br>dict_movies = dict(zip(df_movies[&quot;movieId&quot;], df_movies[&quot;title&quot;] + &quot;, &quot; + df_movies[&quot;genres&quot;]))<br>print(dict_movies)<br><br># 输出和某个奇异值高度相关的电影 这些电影代表了一个主题<br># (注意：向量中电影的 ID 和原始的电影的 ID 相差 1，所以在读取 dict_movies 需要使用 i+1)<br>print(np.max(vt[1, :]))<br>print(list(zip(np.where(vt[1] &gt; 0.1)[0] + 1, vt[1][np.where(vt[1] &gt; 0.1)],<br>               [dict_movies[i] for i in (np.where(vt[1] &gt; 0.1)[0] + 1)])))<br>","like_count":4},{"had_liked":false,"id":143364,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1571692035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14456593923","product_id":100021201,"comment_content":"方阵进行特征值分析以后，特征值表示坐标变换的伸缩部分，特征向量表示对应每个伸缩量对应的方向。非方阵右奇异分量对应的特征值的平方根反映的是该矩阵右乘一个列向量对应变换的伸缩量信息。非方阵左奇异分量对应的特征值的平方根反映的是该矩阵左乘一个行向量对应变换的伸缩信息。<br><br>用户-电影矩阵反映的是用户和电影的关系，经过特征向量分解以后，变成用户-主题-电影。因为左右奇异矩阵都是行列式值为1的方阵，主题对角阵也就完全反应了原来矩阵的分量大小，对角阵每个元素大小反映了主题的相对重要程度。主题分量对应的矢量又是原来用户和电影维度线性组合而成。线性组合的系数分别是左奇异阵和右奇异阵，这些系数也反应了用户和主题，以及电影和主题的权重系数（类似线性回归中的权重）。","like_count":3},{"had_liked":false,"id":358090,"user_name":"013923","can_delete":false,"product_type":"c1","uid":3035193,"ip_address":"上海","ucode":"1214DAADBCA848","user_header":"","comment_is_top":false,"comment_ctime":1663904605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663904605","product_id":100021201,"comment_content":"推荐系统（2）学习！","like_count":0}]}