{"id":624101,"title":"03｜Modules（下）：实战写个多模块图像处理服务","content":"<p>你好，我是卢誉声。</p><p>通过前面的学习，我们掌握了模块的基本概念。这节课，我们会一起学习，怎样使用C++ Modules来组织实际的项目代码。相信你在动手实战后，就能进一步理解应该如何使用C++ Modules和namespace来解决现实问题。</p><p>掌握了基本概念和使用要点之后，我们也会站在语言设计者的角度，整体讨论一下C++ Modules能解决什么问题，不能解决什么问题。</p><p>好，话不多说，我们马上进入今天的学习。课程配套代码，点击<a href=\"https://github.com/samblg/cpp20-plus-indepth\">这里</a>获取。</p><h2>面向图像的对象存储系统</h2><p>要写的实例是一个常见的面向图像的对象存储系统，核心功能是将图片存储在本地空间，用户通过HTTP请求获取相应的图片，而这个系统的特点是用户除了可以获取原始图片，还可以通过参数获取经过处理的图片，比如图像缩放、图像压缩等。</p><p>想实现这样的功能，需要哪些模块呢？</p><p>我们画一张系统的模块架构图，可以清晰地看到系统模块以及模块内部分区的依赖关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/15/3e344cfb7e5cef10a7defef271b44415.jpg?wh=2900x2311\" alt=\"\"></p><p>首先我们需要创建项目，项目包括5个子模块，分别是app、cache、command、image、network，其中app是业务应用模块，cache是本地缓存模块，command是命令行解析模块，image是图像处理模块，network是网络服务模块，每个模块分别创建对应的目录存储模块内的源代码。</p><!-- [[[read_end]]] --><p>对于这样一个多模块的项目，我们的目的是学习如何灵活使用C++ Modules来组织程序中的几个模块，所以接下来我们不对这个项目做具体实现，主要看看如何编写接口。</p><h4>命令行解析模块</h4><p><strong>command/argument.cpp</strong>模块定义了Argument类，用于描述命令行参数。</p><ul>\n<li>第1行通过export module声明了这个文件属于ips.command模块的argument分区，并用export表明这是一个模块接口编译单元。</li>\n<li>第4行定义了Arugment类，并通过export将其标志为外部链接性，对其他模块可见。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/e9/9d/e92c1871b4d5af36483cfd383c184a9d.jpg?wh=2900x1578\" alt=\"\"></p><pre><code class=\"language-c++\">export module ips.command:argument;\nimport &lt;string&gt;;\nnamespace ips::command {\n    export class Argument {\n    public:\n        Argument(\n            const std::string&amp; flag,\n            const std::string&amp; name,\n            const std::string&amp; helpMessage = \"\",\n            bool required = false\n        ) :\n            _flag(flag),\n            _name(name),\n            _helpMessage(helpMessage),\n            _required(required) {}\n        const std::string&amp; getFlag() const {\n            return _flag;\n        }\n        void setFlag(const std::string&amp; flag) {\n            _flag = flag;\n        }\n        const std::string&amp; getHelpMessage() const {\n            return _helpMessage;\n        }\n        void setHelpMessage(const std::string&amp; helpMessage) {\n            _helpMessage = helpMessage;\n        }\n        bool isRequired() const {\n            return _required;\n        }\n        void setRequired(bool required) {\n            _required = required;\n        }\n\n    private:\n        std::string _flag;\n        std::string _name;\n        std::string _helpMessage;\n        bool _required;\n    };\n}\n</code></pre><p><strong>command/parser.cpp</strong></p><p>本模块定义了Parser类，用于解析命令行参数。</p><ul>\n<li>第1行通过export module声明了这个文件属于ips.command模块的parser分区，并用export表明这是一个模块接口编译单元。</li>\n<li>第11行定义了Parser类，并通过export将其标志为外部链接性，对其他模块可见。</li>\n</ul><pre><code class=\"language-c++\">export module ips.command:parser;\n\nimport &lt;string&gt;;\nimport &lt;map&gt;;\nimport &lt;vector&gt;;\nimport &lt;functional&gt;;\n\nimport :argument;\n\nnamespace ips::command {\n&nbsp;&nbsp;&nbsp; export class Parser {\n&nbsp;&nbsp;&nbsp; public:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Parser&amp; addArgument(const Argument&amp; argument) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _arguments.push_back(argument);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return *this;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::map&lt;std::string, std::string&gt; parseArgs() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _parsedArgs;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string getNamedArgument(const std::string&amp; name) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string value = _parsedArgs[name];\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; template &lt;class T&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T getNamedArgument(const std::string&amp; name, std::function&lt;T(const std::string&amp;)&gt; converter) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string value = _parsedArgs[name];\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return converter(value);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp; private:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::vector&lt;Argument&gt; _arguments;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::map&lt;std::string, std::string&gt; _parsedArgs;\n&nbsp;&nbsp;&nbsp; };\n}\n</code></pre><p><strong>command/command.cpp</strong>模块是整个ips.command模块的外部接口。在第3行和第4行通过export import导入并重新导出了:parser和:argument分区，这样我们可以将一个模块下的不同类分别在不同分区中实现，并在主模块接口单元中导入再导出，便于我们维护代码。</p><pre><code class=\"language-c++\">export module ips.command;\n\nexport import :parser;\nexport import :argument;\n</code></pre><h4>网络服务接口模块</h4><p><strong>network/request.cpp</strong>模块定义了Request类，用于描述HTTP网络请求。</p><ul>\n<li>第1行通过export module声明了这个文件属于ips.network模块的request分区，并用export表明这是一个模块接口编译单元。</li>\n<li>第7行定义了Request类，并通过export将其标志为外部链接性，对其他模块可见。</li>\n</ul><pre><code class=\"language-c++\">export module ips.network:request;\n\nimport &lt;string&gt;;\nimport &lt;map&gt;;\n\nnamespace ips::network {\n&nbsp;&nbsp;&nbsp; export class Request {\n&nbsp;&nbsp;&nbsp; public:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Request() {}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void setPath(const std::string&amp; path) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _path = path;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const std::string&amp; getPath() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _path;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void setQuery(const std::map&lt;std::string, std::string&gt;&amp; query) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _query = query;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const std::map&lt;std::string, std::string&gt;&amp; getQuery() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _query;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string&amp;&amp; getBody() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return \"\";\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp; private:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string _path;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::map&lt;std::string, std::string&gt; _query;\n&nbsp;&nbsp;&nbsp; };\n}\n</code></pre><p><strong>network/response.cpp</strong>模块定义了Response类，用于描述HTTP网络响应。</p><ul>\n<li>第1行通过export module声明了这个文件属于ips.network模块的response分区，并用export表明这是一个模块接口编译单元。</li>\n<li>第7行定义了Response类，并通过export将其标志为外部链接性，对其他模块可见。</li>\n</ul><pre><code class=\"language-c++\">export module ips.network:response;\n\nimport &lt;string&gt;;\nimport &lt;iostream&gt;;\n\nnamespace ips::network {\n&nbsp;&nbsp;&nbsp; export class Response {\n&nbsp;&nbsp;&nbsp; public:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Response() {}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void send(const std::string&amp; data) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; \"Sent data\" &lt;&lt; data.size() &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&nbsp;&nbsp;&nbsp; };\n}\n}\n</code></pre><p><strong>network/connection.cpp</strong>模块定义了Connection类，用于描述HTTP网络连接。</p><ul>\n<li>第1行通过export module声明了这个文件属于ips.network模块的connection分区，并用export表明这是一个模块接口编译单元。</li>\n<li>第11行使用using定义了类型别名RequestPtr，表示请求对象指针，并通过export将该符号导出。</li>\n<li>第12行使用using定义了类型别名ResponsePtr，表示响应对象指针，并通过export将该符号导出。</li>\n<li>第14行使用using定义了类型别名OnRequestHandler，表示请求处理函数，并通过export将该符号导出。</li>\n<li>第16行定义了Connection类，并通过export将其标志为外部链接性，对其他模块可见。</li>\n</ul><pre><code class=\"language-c++\">export module ips.network:connection;\n\nimport &lt;functional&gt;;\nimport &lt;memory&gt;;\nimport &lt;vector&gt;;\n\nimport :request;\nimport :response;\n\nnamespace ips::network {\n&nbsp;&nbsp;&nbsp; export using RequestPtr = std::shared_ptr&lt;Request&gt;;\n&nbsp;&nbsp;&nbsp; export using ResponsePtr = std::shared_ptr&lt;Response&gt;;\n\n&nbsp;&nbsp;&nbsp; export using OnRequestHandler = std::function&lt;void(RequestPtr, ResponsePtr)&gt;;\n\n&nbsp;&nbsp;&nbsp; export class Connection {\n&nbsp;&nbsp;&nbsp; public:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Connection() {}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void onRequest(OnRequestHandler requestHandler) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _requestHandlers.push_back(requestHandler);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp; private:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::vector&lt;OnRequestHandler&gt; _requestHandlers;\n&nbsp;&nbsp;&nbsp; };\n}\n</code></pre><p><strong>network/server.cpp</strong>模块定义了Server类，用于实现HTTP服务器。</p><ul>\n<li>第1行通过export module声明了这个文件属于ips.network模块的sever分区，并用export表明这是一个模块接口编译单元。</li>\n<li>第13行使用using定义了类型别名ConnectionPtr，表示连接对象指针，并通过export将该符号导出。</li>\n<li>第14行使用using定义了类型别名OnConnectionHandler，表示连接处理函数，并通过export将该符号导出。</li>\n<li>第16行定义了Server类，并通过export将其标志为外部链接性，对其他模块可见。</li>\n</ul><pre><code class=\"language-c++\">export module ips.network:server;\n\nimport &lt;string&gt;;\nimport &lt;cstdint&gt;;\nimport &lt;functional&gt;;\nimport &lt;vector&gt;;\nimport &lt;memory&gt;;\nimport &lt;iostream&gt;;\n\nimport :connection;\n\nnamespace ips::network {\n&nbsp;&nbsp;&nbsp; export using ConnectionPtr = std::shared_ptr&lt;Connection&gt;;\n&nbsp;&nbsp;&nbsp; export using OnConnectionHandler = std::function&lt;void(ConnectionPtr)&gt;;\n\n&nbsp;&nbsp;&nbsp; export class Server {\n&nbsp;&nbsp;&nbsp; public:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Server(const std::string&amp; host, int32_t port) :\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _host(host), _port(port) {}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void setHost(const std::string&amp; host) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _host = host;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const std::string&amp; getHost() const {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _host;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void setPort(int32_t port) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _port = port;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int32_t getPort() const {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _port;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void startListen() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; \"Start listened at \" &lt;&lt; _host &lt;&lt; \":\" &lt;&lt; _port &lt;&lt; std::endl;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void onConnection(OnConnectionHandler handler) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _handlers.push_back(handler);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp; private:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string _host;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int32_t _port;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::vector&lt;OnConnectionHandler&gt; _handlers;\n&nbsp;&nbsp;&nbsp; };\n}\n</code></pre><p><strong>network/network.cpp</strong></p><p>本模块是整个ips.network模块的外部接口。导入并导出了ips.network下的所有分区。</p><pre><code class=\"language-c++\">export module ips.network;\n\nexport import :server;\nexport import :request;\nexport import :response;\nexport import :connection;\n</code></pre><h4>图像处理模块</h4><p><strong>images/processor.cpp</strong>模块定义了Processor类，用户实现图像处理。</p><ul>\n<li>第1行通过export module声明了这个文件属于ips.image模块的processor分区，并用export表明这是一个模块接口编译单元。</li>\n<li>第7行定义了Processor类，并通过export将其标志为外部链接性，对其他模块可见。</li>\n</ul><pre><code class=\"language-c++\">export module ips.image:processor;\n\nimport &lt;string&gt;;\nimport &lt;cstdint&gt;;\n\nnamespace ips::image {\n&nbsp;&nbsp;&nbsp; export class Processor {\n&nbsp;&nbsp;&nbsp; public:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void setWidth(int32_t width) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _width = width;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int32_t getWidth() const {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _width;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void setHeight(int32_t height) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _height = height;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int32_t getHeight() const {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _height;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void setQuality(int32_t quality) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _quality = quality;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int32_t getQuality() const {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _quality;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void setMode(const std::string&amp; mode) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _mode = mode;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const std::string&amp; getMode() const {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _mode;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string&amp;&amp; processImage(const std::string&amp; data) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return \"\";\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp; private:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int32_t _width;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int32_t _height;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int32_t _quality;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string _mode;\n&nbsp;&nbsp;&nbsp; };\n}\n</code></pre><p><strong>images/image.cpp</strong></p><p>本模块是整个ips.image模块的外部接口。导入并导出了ips.image下的所有分区。</p><pre><code class=\"language-c++\">export module ips.image;\n\nexport import :processor;\n</code></pre><h4>本地缓存模块</h4><p><strong>cache/loader.cpp</strong>模块定义了Loader类，用户实现缓存加载。</p><ul>\n<li>第1行通过export module声明了这个文件属于ips.cache模块的loader分区，并用export表明这是一个模块接口编译单元。</li>\n<li>第6行定义了CacheLoader类，并通过export将其标志为外部链接性，对其他模块可见。</li>\n</ul><pre><code class=\"language-c++\">export module ips.cache:loader;\n\nimport &lt;string&gt;;\n\nnamespace ips::cache {\n&nbsp;&nbsp;&nbsp; export class CacheLoader {\n&nbsp;&nbsp;&nbsp; public:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CacheLoader(const std::string&amp; basePath) :\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _basePath(basePath) {}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool loadCacheFile(const std::string&amp; key, std::string* cacheFileData) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp; private:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string _basePath;\n&nbsp;&nbsp;&nbsp; };\n}\n</code></pre><p><strong>cache/cache.cpp</strong>模块是整个ips.cache模块的外部接口。导入并导出了ips.cache下的所有分区。</p><pre><code class=\"language-c++\">export module ips.cache;\n\nexport import :loader;\n</code></pre><h4>业务应用模块</h4><p><strong>app/app.cpp</strong>这个模块是整个ips.app模块的外部接口。由于比较简单，只定义了一个processRequest函数，因此没有定义其他的分区。</p><ul>\n<li>第1行通过export module声明了这个文件为ips.app模块，并用export表明这是一个模块接口编译单元。</li>\n<li>第23行定义了processRequest类，并通过export将其标志为外部链接性，对其他模块可见。</li>\n</ul><pre><code class=\"language-c++\">export module ips.app;\n\nimport &lt;string&gt;;\nimport &lt;map&gt;;\n\nimport ips.network;\nimport ips.image;\nimport ips.cache;\n\nnamespace ips::app {\n&nbsp;&nbsp;&nbsp; export void processRequest(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ips::cache::CacheLoader* cacheLoader,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ips::network::RequestPtr request,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ips::network::ResponsePtr response\n&nbsp;&nbsp;&nbsp; ) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const std::string&amp; path = request-&gt;getPath();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const std::map&lt;std::string, std::string&gt;&amp; query = request-&gt;getQuery();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string data = request-&gt;getBody();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ips::image::Processor imageProcessor;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string cacheKey = path;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto widthIterator = query.find(\"width\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (widthIterator != query.cend()) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; imageProcessor.setWidth(std::stoi(widthIterator-&gt;second));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cacheKey += \"&amp;width=\" + widthIterator-&gt;second;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto heighIterator = query.find(\"height\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (heighIterator != query.cend()) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; imageProcessor.setHeight(std::stoi(heighIterator-&gt;second));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cacheKey += \"&amp;height=\" + heighIterator-&gt;second;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto qualityIterator = query.find(\"quality\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (qualityIterator != query.cend()) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; imageProcessor.setQuality(std::stoi(qualityIterator-&gt;second));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cacheKey += \"&amp;quality=\" + qualityIterator-&gt;second;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; auto modeIterator = query.find(\"mode\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (modeIterator != query.cend()) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; imageProcessor.setMode(modeIterator-&gt;second);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cacheKey += \"&amp;mode=\" + modeIterator-&gt;second;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::string processedImageData;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool hasCache = cacheLoader-&gt;loadCacheFile(cacheKey, &amp;processedImageData);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (hasCache) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response-&gt;send(processedImageData);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; processedImageData = imageProcessor.processImage(data);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; response-&gt;send(processedImageData);\n&nbsp;&nbsp;&nbsp; }\n}\n</code></pre><h4>主程序调用</h4><p><strong>main.cpp</strong>是整个程序的调用的模块，首先创建命令行解析器，对命令行进行解析，接着创建HTTP服务器和缓存加载器，最后注册连接处理函数和请求处理函数，并启动监听，进入事件循环。</p><ul>\n<li>第1到3行，通过import导入C++标准库的头文件。</li>\n<li>第5-9行，通过import导入项目内部的各个模块，后面就能使用这些模块内的符号了。</li>\n</ul><pre><code class=\"language-c++\">import &lt;iostream&gt;;\nimport &lt;string&gt;;\nimport &lt;functional&gt;;\n\nimport ips.command;\nimport ips.network;\nimport ips.image;\nimport ips.app;\nimport ips.cache;\n\nint main() {\n&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; \"Image Processor\" &lt;&lt; std::endl;\n\n&nbsp;&nbsp;&nbsp; ips::command::Parser parser;\n&nbsp;&nbsp;&nbsp; parser.addArgument(ips::command::Argument(\"--host\", \"host\"));\n&nbsp;&nbsp;&nbsp; parser.addArgument(ips::command::Argument(\"--port\", \"port\"));\n&nbsp;&nbsp;&nbsp; parser.addArgument(ips::command::Argument(\"--cache\", \"cachePath\"));\n&nbsp;&nbsp;&nbsp; parser.parseArgs();\n\n&nbsp;&nbsp;&nbsp; std::string cachePath = parser.getNamedArgument(\"cachePath\");\n&nbsp;&nbsp;&nbsp; ips::cache::CacheLoader cacheLoader(cachePath);\n\n&nbsp;&nbsp;&nbsp; std::string host = parser.getNamedArgument(\"host\");\n&nbsp;&nbsp;&nbsp; int port = parser.getNamedArgument&lt;int32_t&gt;(\"port\", [](const std::string&amp; value)-&gt; int32_t {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return std::stoi(value);\n&nbsp;&nbsp;&nbsp; });\n&nbsp;&nbsp;&nbsp; ips::network::Server server(host, port);\n\n&nbsp;&nbsp;&nbsp; server.onConnection([&amp;cacheLoader](ips::network::ConnectionPtr connection) -&gt; void {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connection-&gt;onRequest(std::bind(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ips::app::processRequest,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;cacheLoader,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::placeholders::_1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::placeholders::_2\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ));\n&nbsp;&nbsp;&nbsp; });\n\n&nbsp;&nbsp;&nbsp; server.startListen();\n\n&nbsp;&nbsp;&nbsp; return 0;\n}\n</code></pre><p>相对于传统的方法，我们不需要关心头文件和符号实现的各种细节，C++ Modules规定我们将接口和实现都组织在通过模块关联的代码文件中，虽然灵活性相对较低，但在一般的工程实践中，这样的代码组织更加合理，也能降低模块开发者和使用者的心智负担。</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/15/3e344cfb7e5cef10a7defef271b44415.jpg?wh=2900x2311\" alt=\"\"></p><h2>深入理解C++ Modules</h2><p>掌握了C++ Modules的基础概念，也通过实例体会了C++ Modules的用法和好处，我们再回过头来，站在语言设计者的角度，讨论一下C++ Modules中一些深层次问题，C++ Modules核心语言特性变更到底能为我们带来什么？它能解决什么，同时又不能解决什么问题？</p><h3>Modules能解决什么</h3><p>首先需要理解Modules到底帮助我们解决了什么问题？在C++ Modules的基本概念介绍中，我们说过了Modules解决的是符号可见性问题。</p><p>在传统的C++解决方案中，处理符号可见性，需要我们充分理解C++的“编译-链接”原理，甚至很多的实现技术细节。</p><p>由于C++中的各个编译单元需要独立编译，同时在链接中通过检索符号填补缺失的符号，我们不仅要在实现符号的编译单元中编写实现，还要在引用的编译单元中，通过书写符号声明，来告知编译器这些符号会在链接过程中存在。所以，我们需要通过头文件来为模块调用的编译单元提供这些必要的前置符号声明。</p><p>这就出现了一个问题：<strong>模块之间的符号引用，因为这种“编译-链接”机制被硬生生拆分成两个阶段</strong>。哪怕能通过编译，也可能在链接时产生错误，而这种错误也很难被编译器和IDE在编译阶段提前侦测到，更多的问题将链接时才暴露出来。</p><p>只有经验丰富的C++工程师，在了解基本的“编译-链接”原理后，才能熟练排查这些因为两阶段的不一致性导致的链接问题，并找到方法尝试解决。因此传统的符号可见性解决方案，对C++初学者不友好。</p><p>新的C++ Modules方法，本质上抛弃了“头文件”这种C/C++中的重要组成部分，将头文件转换成了模块接口文件，也为C++提供了一种在编译期检测声明实现不一致的方法，也为IDE的智能提示提供了新的可靠方法。</p><p>另外，C++ Modules也部分抛弃了C/C++原本通过简单的文本处理为编译单元引入声明的方式，使得编译器可以为模块编译单元生成二进制的编译缓存，为加快编译过程提供了一个新的契机。</p><p>所以简单来说，C++ Modules给我们带来了一种更为现代化的，更简单的符号可见性控制方案，同时又能加快编译速度。</p><h3>Modules不能解决什么</h3><p>那么，Modules不能解决什么呢？</p><p>第一，Modules不能解决<strong>符号命名冲突</strong>的问题。</p><p>在实例中，你会发现我们在代码中同时使用了命名空间和Modules，通过Modules来控制符号可见性，然后使用命名空间来避免符号命名冲突。</p><p>符号命名冲突，可能因为两个不同的模块使用了相同名称的函数、类、全局变量等，并将其export出来，如果这两个模块同时import到同一个编译单元中，就会出现问题，因为编译器并不知道我们使用的是哪个模块中的符号。因此在不同的模块中，我们仍习惯使用不同的命名空间，确保一个编译单元导入两个模块的时候不会出现模块冲突。</p><p>这就是我们一直所说的，模块只解决符号可见性问题，而命名冲突问题依然需要通过namespace解决，这就是Modules和namespace是保持正交设计的。</p><p>第二，目前Modules不能用来解决<strong>二进制库分发</strong>的问题。</p><p>现阶段，编译器在编译模块编译单元的过程中，会为每个模块编译单元生成对应的二进制缓存，无论是模块接口单元还是模块实现单元都会生成，甚至通过import导入iostream这种标准库，也会为iostream生成二进制缓存。</p><p>这些二进制缓存，不仅包括编译后生成的中间码、机器码，还包括源代码之类的meta数据，这样，其他编译模块在通过import导入模块的时候，编译器将会直接读取二进制缓存，不需要在预处理阶段做文本替换，再在各个编译单元的编译过程中进行编译，可以加快编译速度。</p><p>但我们要注意的是，在生成的静态链接库或者动态链接库中，标准并没有定义需将这些缓存中的meta数据加入到库中。</p><p>因此，目前通过Modules编写的代码，在进行二进制分发时，会面临很多问题，只有Visual C++（自Visual Studio 2022起）通过标头单元来实现通过import导入（可以读取编译器自动生成的二进制缓存ifc文件，ifc文件是VC编译单元生成的标头单元二进制缓存文件格式），其他的编译器只支持通过源代码分发的方式来使用import。</p><p>第三，<strong>STL内存布局</strong>问题。</p><p>在使用STL的过程中，我们会遇到ABI与内存布局的很多问题。比如一些SIMD的计算场景，需要调用CPU的加速指令，而这些加速指令对数据的内存地址对齐都有严格要求，因此我们可能需要可以预期的内存对齐结果。但是，实际上内存对齐会受到编译器和体系结构影响，如下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/b4/0d/b4284721390d5fe710cc978a0563700d.jpg?wh=2900x1578\" alt=\"\"></p><p>自己管理内存，可以产生我们预期的内存对齐效果，但如果使用STL，则需要依赖编译器和体系结构，可能无法产生我们所预期的内存对齐。这只是STL内存布局问题的冰山一角。</p><p>现阶段的Modules暂时无法解决<strong>各编译器之间ABI</strong>，尤其是使用模板后的问题。</p><p>目前，编译和链接还是会依赖编译器和体系结构定义的ABI，所以，如果A编译器生成的二进制符号格式，不同于B编译器的二进制符号格式，那么B编译器也就无法使用A编译器生成的库（无论是动态链接库还是静态链接库），更不用说不同编译器生成的二进制缓存文件了。</p><p>我们了解C++ Modules能做什么，不能做什么，就知道该在什么场景如何使用C++ Modules了。总的来说，目前C++ Modules的支持还不够完善，不同的C++编译器，对现代C++新标准的支持情况各不相同，这里也给出当下主流编译器对新特性的支持情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/2b/2d8e45yyd1bff6747295a25f4c22822b.jpg?wh=3500x1969\" alt=\"\"></p><p>随着编译器支持越来越成熟，相信会带来更多的编译性能提升，就像编译器对头文件支持的性能提升一样。</p><h2>总结</h2><p>自C++20标准开始，C++ Modules给我们带来了一种更为现代化的、更简单的符号可见性控制方案，同时又能加快编译速度。</p><p>总体上看，C++ Modules很好地提供了解决符号可见性问题的方案。在传统的C++解决方案中，处理符号可见性，需要在充分理解C++的“编译-链接”原理甚至很多实现技术细节，而现在，我们可以更简单地掌控符号的可见性，并在不牺牲编译性能的情况下使用C++进行编码。</p><p>但是目前C++ Modules并不是完美的。</p><p>1.不能解决符号命名冲突的问题。<br>\n2.不能用来解决二进制库分发的问题。<br>\n3.现阶段的Modules暂时无法解决各编译器之间ABI，尤其是使用模板之后带来的问题。</p><p>随着现代C++标准化进程的稳步推进，我们期待着这些问题能够在未来得到标准和编译器的统一支持。C++ Modules已经逐渐成为解决编译性能和符号隔离的银弹，但我们让这枚子弹“再飞一会儿”。</p><h2>课后思考</h2><p>这节课，我们了解到，C++ Modules带来了极大的便利性，不过当前也仍然存在一些功能限制，你能否举出在日常使用C++过程中碰到的有关于符号的编译、链接问题，并给出你的解决方法。</p><p>欢迎留言和我分享你的想法，我们一同交流！</p>","comments":[{"had_liked":false,"id":366793,"user_name":"wilby","can_delete":false,"product_type":"c1","uid":1345031,"ip_address":"瑞典","ucode":"4296C04148B479","user_header":"https://static001.geekbang.org/account/avatar/00/14/86/07/aefa4e8b.jpg","comment_is_top":false,"comment_ctime":1674224030,"is_pvip":false,"replies":[{"id":133694,"content":"目前来说，对C++20后后续演进标准的支持，Visual C++ 支持最好。macOS默认使用 Xcode 提供的 clang （llvm），此外，gcc、clang对新标准的支持存在一定差异。你可以稍后参考我分享的代码仓库来使用CMake尝试编译（即将提供）。\n\n也欢迎提供反馈，甚至是PR","user_name":"作者回复","user_name_real":"编辑","uid":1006976,"ctime":1674488583,"ip_address":"江苏","comment_id":366793,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100523801,"comment_content":"怎么编译这个项目呢？在macOS下没试出来怎么编译","like_count":2,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600547,"discussion_content":"目前来说，对C++20后后续演进标准的支持，Visual C++ 支持最好。macOS默认使用 Xcode 提供的 clang （llvm），此外，gcc、clang对新标准的支持存在一定差异。你可以稍后参考我分享的代码仓库来使用CMake尝试编译（即将提供）。\n\n也欢迎提供反馈，甚至是PR","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674488583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2277181,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8aLz0tWdsZuMiaNUAd0dicSD9M6A77seMGFdHgvsQwOzN8ztYPiaJSo53DcbjQWUQpw4pf4rI2f7vg/132","nickname":"Geek_7c0961","note":"","ucode":"B1482E64FF9E4E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601172,"discussion_content":"确实啊. mac os 确实对c++20不够友好,折腾了半天也没有搞定.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675106444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":387985,"user_name":"bruceyk","can_delete":false,"product_type":"c1","uid":1033556,"ip_address":"北京","ucode":"DD1E8AFEDFD69B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/54/a9b1d9f1.jpg","comment_is_top":false,"comment_ctime":1709100525,"is_pvip":false,"replies":[{"id":141322,"content":"截止到目前并未完美支持，一般来说编译器也很难实现真正意义上的“完美”支持所有特性（向来如此）。\n\n可以参考 https:&#47;&#47;clang.llvm.org&#47;cxx_status.html 页面来关注最新的支持状态。","user_name":"作者回复","user_name_real":"编辑","uid":1006976,"ctime":1709572025,"ip_address":"上海","comment_id":387985,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100523801,"comment_content":"老师，请问clang哪个版本能完美支持20所有特性呢？","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638430,"discussion_content":"截止到目前并未完美支持，一般来说编译器也很难实现真正意义上的“完美”支持所有特性（向来如此）。\n\n可以参考 https://clang.llvm.org/cxx_status.html 页面来关注最新的支持状态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709572025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368672,"user_name":"Cedric","can_delete":false,"product_type":"c1","uid":2679976,"ip_address":"北京","ucode":"5A58FAD94EC356","user_header":"https://static001.geekbang.org/account/avatar/00/28/e4/a8/bb6e00ba.jpg","comment_is_top":false,"comment_ctime":1676547911,"is_pvip":false,"replies":[{"id":134267,"content":"到目前为止，gcc对module的支持仍然存在bug，编译错误或编译时core。推荐使用 Visual C++。","user_name":"作者回复","user_name_real":"编辑","uid":1006976,"ctime":1676552227,"ip_address":"上海","comment_id":368672,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100523801,"comment_content":"代码中是否存在bug，使用function和vector，map容器的代码编译会报重定义错误注释掉相关代码就可以编译通过了，我的环境是ubuntu22.04，g++13.0.1，不确定是否是对于module的支持的问题还是使用上的问题","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605019,"discussion_content":"到目前为止，gcc对module的支持仍然存在bug，编译错误或编译时core。推荐使用 Visual C++。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676552228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367333,"user_name":"浩浩","can_delete":false,"product_type":"c1","uid":1580841,"ip_address":"广东","ucode":"47558B9C9B7368","user_header":"https://static001.geekbang.org/account/avatar/00/18/1f/29/c7a69190.jpg","comment_is_top":false,"comment_ctime":1675147582,"is_pvip":false,"replies":[{"id":133870,"content":"1)\tC&#47;C++现在还是没有解决这个问题。\n2)\t指的是二进制库甚至在相同体系结构但采用ABI不同的编译器之间都无法通用。\n","user_name":"作者回复","user_name_real":"编辑","uid":1006976,"ctime":1675349929,"ip_address":"江苏","comment_id":367333,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100523801,"comment_content":"请教老师：\n1）文中：“现阶段的 Modules 暂时无法解决各编译器之间 ABI” ，C&#47;C++现今有解决这个问题的方案吗？\n2）文中：“二进制库分发的问题”，具体是指二进制库在不同体系结构设备上无法通用吗？\n","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601697,"discussion_content":"1)\tC/C++现在还是没有解决这个问题。\n2)\t指的是二进制库甚至在相同体系结构但采用ABI不同的编译器之间都无法通用。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675349929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366911,"user_name":"Coding Fatty","can_delete":false,"product_type":"c1","uid":1301587,"ip_address":"辽宁","ucode":"DB79169DEA0FEC","user_header":"https://static001.geekbang.org/account/avatar/00/13/dc/53/938b775e.jpg","comment_is_top":false,"comment_ctime":1674579115,"is_pvip":false,"replies":[{"id":133723,"content":"image processor solution","user_name":"作者回复","user_name_real":"编辑","uid":1006976,"ctime":1674834722,"ip_address":"江苏","comment_id":366911,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100523801,"comment_content":"ips 表示什么含义?","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600752,"discussion_content":"image processor solution","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674834723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366759,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1674179078,"is_pvip":false,"replies":[{"id":133692,"content":"Q1：我们现在用的是C++ Modules，所以所有文件都是cpp（也就是模块接口或实现），不再有.h的概念了\nQ2：这点就是对应Q1，除非引用标准库和特殊用途（比如配置），一般情况下完全不需要有头文件这个概念了，只需要用.cpp即可\nQ3：C80和CA0指的是内存地址","user_name":"作者回复","user_name_real":"编辑","uid":1006976,"ctime":1674488371,"ip_address":"江苏","comment_id":366759,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100523801,"comment_content":"请教老师几个问题：\nQ1：cpp文件中怎么会有变量声明？\n命令行模块的代码中，argument.cpp中怎么声明了一些字段？：private: std::string _flag; std::string _name;  这些不是应该在.h文件中声明吗？ Cpp文件是类的实现文件啊。\nQ2：用了module以后就不再有头文件了吗？\n文中有一句“新的 C++ Modules 方法，本质上抛弃了“头文件”这种 C&#47;C++ 中的重要组成部分”。采用module以后，不再是“.h + .cpp”这种方式，而时只有.cpp一个文件，对吗？\nQ3：C80、CA0表示什么？\n文中“STL 内存布局问题”部分，图中有“C80、CA0”等内容，是表示CPU类型吗？","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600545,"discussion_content":"Q1：我们现在用的是C++ Modules，所以所有文件都是cpp（也就是模块接口或实现），不再有.h的概念了\nQ2：这点就是对应Q1，除非引用标准库和特殊用途（比如配置），一般情况下完全不需要有头文件这个概念了，只需要用.cpp即可\nQ3：C80和CA0指的是内存地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674488371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}