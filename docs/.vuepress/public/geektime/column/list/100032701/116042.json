{"id":116042,"title":"04 | TCP三次握手：怎么使用套接字格式建立连接？","content":"<p>你好，我是盛延敏，这里是网络编程实战第4讲，欢迎回来。</p><p>在上一讲里我们介绍了IPv4、IPv6以及本地套接字格式，这一讲我们来讲一讲怎么使用这些套接字格式完成连接的建立，当然，经典的TCP三次握手理论也会贯穿其中。我希望经过这一讲的讲解，你会牢牢记住TCP三次握手和客户端、服务器模型。</p><p>让我们先从服务器端开始。</p><h2>服务端准备连接的过程</h2><h3>创建套接字</h3><p>要创建一个可用的套接字，需要使用下面的函数：</p><pre><code>int socket(int domain, int type, int protocol)\n</code></pre><p>domain就是指PF_INET、PF_INET6以及PF_LOCAL等，表示什么样的套接字。</p><p>type可用的值是：</p><ul>\n<li><strong>SOCK_STREAM: 表示的是字节流，对应TCP；</strong></li>\n<li><strong>SOCK_DGRAM： 表示的是数据报，对应UDP；</strong></li>\n<li><strong>SOCK_RAW: 表示的是原始套接字。</strong></li>\n</ul><p>参数protocol原本是用来指定通信协议的，但现在基本废弃。因为协议已经通过前面两个参数指定完成。protocol目前一般写成0即可。</p><h3>bind: 设定电话号码</h3><p>创建出来的套接字如果需要被别人使用，就需要调用bind函数把套接字和套接字地址绑定，就像去电信局登记我们的电话号码一样。</p><p>调用bind函数的方式如下：</p><pre><code>bind(int fd, sockaddr * addr, socklen_t len)\n</code></pre><p>我们需要注意到bind函数后面的第二个参数是通用地址格式<code>sockaddr * addr</code>。这里有一个地方值得注意，那就是虽然接收的是通用地址格式，实际上传入的参数可能是IPv4、IPv6或者本地套接字格式。bind函数会根据len字段判断传入的参数addr该怎么解析，len字段表示的就是传入的地址长度，它是一个可变值。</p><!-- [[[read_end]]] --><p>这里其实可以把bind函数理解成这样：</p><pre><code>bind(int fd, void * addr, socklen_t len)\n</code></pre><p>不过BSD设计套接字的时候大约是1982年，那个时候的C语言还没有<code>void *</code>的支持，为了解决这个问题，BSD的设计者们创造性地设计了通用地址格式来作为支持bind和accept等这些函数的参数。</p><p>对于使用者来说，每次需要将IPv4、IPv6或者本地套接字格式转化为通用套接字格式，就像下面的IPv4套接字地址格式的例子一样：</p><pre><code>struct sockaddr_in name;\nbind (sock, (struct sockaddr *) &amp;name, sizeof (name)\n</code></pre><p>对于实现者来说，可根据该地址结构的前两个字节判断出是哪种地址。为了处理长度可变的结构，需要读取函数里的第三个参数，也就是len字段，这样就可以对地址进行解析和判断了。</p><p>设置bind的时候，对地址和端口可以有多种处理方式。</p><p>我们可以把地址设置成本机的IP地址，这相当告诉操作系统内核，仅仅对目标IP是本机IP地址的IP包进行处理。但是这样写的程序在部署时有一个问题，我们编写应用程序时并不清楚自己的应用程序将会被部署到哪台机器上。这个时候，可以利用<strong>通配地址</strong>的能力帮助我们解决这个问题。通配地址相当于告诉操作系统内核：“Hi，我可不挑活，只要目标地址是咱们的都可以。”比如一台机器有两块网卡，IP地址分别是202.61.22.55和192.168.1.11，那么向这两个IP请求的请求包都会被我们编写的应用程序处理。</p><p>那么该如何设置通配地址呢？</p><p>对于IPv4的地址来说，使用INADDR_ANY来完成通配地址的设置；对于IPv6的地址来说，使用IN6ADDR_ANY来完成通配地址的设置。</p><pre><code>struct sockaddr_in name;\nname.sin_addr.s_addr = htonl (INADDR_ANY); /* IPV4通配地址 */\n</code></pre><p>除了地址，还有端口。如果把端口设置成0，就相当于把端口的选择权交给操作系统内核来处理，操作系统内核会根据一定的算法选择一个空闲的端口，完成套接字的绑定。这在服务器端不常使用。</p><p>一般来说，服务器端的程序一定要绑定到一个众所周知的端口上。服务器端的IP地址和端口数据，相当于打电话拨号时需要知道的对方号码，如果没有电话号码，就没有办法和对方建立连接。</p><p>我们来看一个初始化IPv4 TCP 套接字的例子:</p><pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;netinet/in.h&gt;\n\n\nint make_socket (uint16_t port)\n{\n  int sock;\n  struct sockaddr_in name;\n\n\n  /* 创建字节流类型的IPV4 socket. */\n  sock = socket (PF_INET, SOCK_STREAM, 0);\n  if (sock &lt; 0)\n    {\n      perror (&quot;socket&quot;);\n      exit (EXIT_FAILURE);\n    }\n\n\n  /* 绑定到port和ip. */\n  name.sin_family = AF_INET; /* IPV4 */\n  name.sin_port = htons (port);  /* 指定端口 */\n  name.sin_addr.s_addr = htonl (INADDR_ANY); /* 通配地址 */\n  /* 把IPV4地址转换成通用地址格式，同时传递长度 */\n  if (bind (sock, (struct sockaddr *) &amp;name, sizeof (name)) &lt; 0)\n    {\n      perror (&quot;bind&quot;);\n      exit (EXIT_FAILURE);\n    }\n\n\n  return sock;\n}\n</code></pre><h3>listen：接上电话线，一切准备就绪</h3><p>bind函数只是让我们的套接字和地址关联，如同登记了电话号码。如果要让别人打通电话，还需要我们把电话设备接入电话线，让服务器真正处于可接听的状态，这个过程需要依赖listen函数。</p><p>初始化创建的套接字，可以认为是一个\"主动\"套接字，其目的是之后主动发起请求（通过调用connect函数，后面会讲到）。通过listen函数，可以将原来的\"主动\"套接字转换为\"被动\"套接字，告诉操作系统内核：“我这个套接字是用来等待用户请求的。”当然，操作系统内核会为此做好接收用户请求的一切准备，比如完成连接队列。</p><p>listen函数的原型是这样的：</p><pre><code>int listen (int socketfd, int backlog)\n</code></pre><p>我来稍微解释一下。第一个参数socketdf为套接字描述符，第二个参数backlog，在Linux中表示已完成(ESTABLISHED)且未accept的队列大小，这个参数的大小决定了可以接收的并发数目。这个参数越大，并发数目理论上也会越大。但是参数过大也会占用过多的系统资源，一些系统，比如Linux并不允许对这个参数进行改变。对于backlog整个参数的设置有一些最佳实践，这里就不展开，后面结合具体的实例进行解读。</p><h3>accept: 电话铃响起了……</h3><p>当客户端的连接请求到达时，服务器端应答成功，连接建立，这个时候操作系统内核需要把这个事件通知到应用程序，并让应用程序感知到这个连接。这个过程，就好比电信运营商完成了一次电话连接的建立, 应答方的电话铃声响起，通知有人拨打了号码，这个时候就需要拿起电话筒开始应答。</p><p>连接建立之后，你可以把accept这个函数看成是操作系统内核和应用程序之间的桥梁。它的原型是：</p><pre><code>int accept(int listensockfd, struct sockaddr *cliaddr, socklen_t *addrlen)\n</code></pre><p>函数的第一个参数listensockfd是套接字，可以叫它为listen套接字，因为这就是前面通过bind，listen一系列操作而得到的套接字。函数的返回值有两个部分，第一个部分cliadd是通过指针方式获取的客户端的地址，addrlen告诉我们地址的大小，这可以理解成当我们拿起电话机时，看到了来电显示，知道了对方的号码；另一个部分是函数的返回值，这个返回值是一个全新的描述字，代表了与客户端的连接。</p><p>这里一定要注意有两个套接字描述字，第一个是监听套接字描述字listensockfd，它是作为输入参数存在的；第二个是返回的已连接套接字描述字。</p><p>你可能会问，为什么要把两个套接字分开呢？用一个不是挺好的么？</p><p>这里和打电话的情形非常不一样的地方就在于，打电话一旦有一个连接建立，别人是不能再打进来的，只会得到语音播报：“您拨的电话正在通话中。”而网络程序的一个重要特征就是并发处理，不可能一个应用程序运行之后只能服务一个客户，如果是这样， 双11抢购得需要多少服务器才能满足全国 “剁手党 ” 的需求？</p><p>所以监听套接字一直都存在，它是要为成千上万的客户来服务的，直到这个监听套接字关闭；而一旦一个客户和服务器连接成功，完成了TCP三次握手，操作系统内核就为这个客户生成一个已连接套接字，让应用服务器使用这个<strong>已连接套接字</strong>和客户进行通信处理。如果应用服务器完成了对这个客户的服务，比如一次网购下单，一次付款成功，那么关闭的就是<strong>已连接套接字</strong>，这样就完成了TCP连接的释放。请注意，这个时候释放的只是这一个客户连接，其它被服务的客户连接可能还存在。最重要的是，监听套接字一直都处于“监听”状态，等待新的客户请求到达并服务。</p><h2>客户端发起连接的过程</h2><p>前面讲述的bind、listen以及accept的过程，是典型的服务器端的过程。下面我来讲下客户端发起连接请求的过程。</p><p>第一步还是和服务端一样，要建立一个套接字，方法和前面是一样的。</p><p>不一样的是客户端需要调用connect向服务端发起请求。</p><h3>connect: 拨打电话</h3><p>客户端和服务器端的连接建立，是通过connect函数完成的。这是connect的构建函数：</p><pre><code>int connect(int sockfd, const struct sockaddr *servaddr, socklen_t addrlen)\n</code></pre><p>函数的第一个参数sockfd是连接套接字，通过前面讲述的socket函数创建。第二个、第三个参数servaddr和addrlen分别代表指向套接字地址结构的指针和该结构的大小。套接字地址结构必须含有服务器的IP地址和端口号。</p><p>客户在调用函数connect前不必非得调用bind函数，因为如果需要的话，内核会确定源IP地址，并按照一定的算法选择一个临时端口作为源端口。</p><p>如果是TCP套接字，那么调用connect函数将激发TCP的三次握手过程，而且仅在连接建立成功或出错时才返回。其中出错返回可能有以下几种情况：</p><ol>\n<li>三次握手无法建立，客户端发出的SYN包没有任何响应，于是返回TIMEOUT错误。这种情况比较常见的原因是对应的服务端IP写错。</li>\n<li>客户端收到了RST（复位）回答，这时候客户端会立即返回CONNECTION REFUSED错误。这种情况比较常见于客户端发送连接请求时的请求端口写错，因为RST是TCP在发生错误时发送的一种TCP分节。产生RST的三个条件是：目的地为某端口的SYN到达，然而该端口上没有正在监听的服务器（如前所述）；TCP想取消一个已有连接；TCP接收到一个根本不存在的连接上的分节。</li>\n<li>客户发出的SYN包在网络上引起了\"destination unreachable\"，即目的不可达的错误。这种情况比较常见的原因是客户端和服务器端路由不通。</li>\n</ol><p>根据不同的返回值，我们可以做进一步的排查。</p><h2>著名的TCP三次握手: 这一次不用背记</h2><p><img src=\"https://static001.geekbang.org/resource/image/65/29/65cef2c44480910871a0b66cac1d5529.png?wh=952*540\" alt=\"\"><br>\n你在各个场合都会了解到著名的TCP三次握手，可能还会被要求背下三次握手整个过程，但背后的原理和过程可能未必真正理解。我们刚刚学习了服务端和客户端连接的主要函数，下面结合这些函数讲解一下TCP三次握手的过程。这样我相信你不用背，也能根据理解轻松掌握这部分的知识。</p><p>这里我们使用的网络编程模型都是阻塞式的。所谓阻塞式，就是调用发起后不会直接返回，由操作系统内核处理之后才会返回。 相对的，还有一种叫做非阻塞式的，我们在后面的章节里会讲到。</p><h2>TCP三次握手的解读</h2><p>我们先看一下最初的过程，服务器端通过socket，bind和listen完成了被动套接字的准备工作，被动的意思就是等着别人来连接，然后调用accept，就会阻塞在这里，等待客户端的连接来临；客户端通过调用socket和connect函数之后，也会阻塞。接下来的事情是由操作系统内核完成的，更具体一点的说，是操作系统内核网络协议栈在工作。</p><p>下面是具体的过程：</p><ol>\n<li>客户端的协议栈向服务器端发送了SYN包，并告诉服务器端当前发送序列号j，客户端进入SYNC_SENT状态；</li>\n<li>服务器端的协议栈收到这个包之后，和客户端进行ACK应答，应答的值为j+1，表示对SYN包j的确认，同时服务器也发送一个SYN包，告诉客户端当前我的发送序列号为k，服务器端进入SYNC_RCVD状态；</li>\n<li>客户端协议栈收到ACK之后，使得应用程序从connect调用返回，表示客户端到服务器端的单向连接建立成功，客户端的状态为ESTABLISHED，同时客户端协议栈也会对服务器端的SYN包进行应答，应答数据为k+1；</li>\n<li>应答包到达服务器端后，服务器端协议栈使得accept阻塞调用返回，这个时候服务器端到客户端的单向连接也建立成功，服务器端也进入ESTABLISHED状态。</li>\n</ol><p>形象一点的比喻是这样的，有A和B想进行通话：</p><ul>\n<li>A先对B说：“喂，你在么？我在的，我的口令是j。”</li>\n<li>B收到之后大声回答：“我收到你的口令j并准备好了，你准备好了吗？我的口令是k。”</li>\n<li>A收到之后也大声回答：“我收到你的口令k并准备好了，我们开始吧。”</li>\n</ul><p>可以看到，这样的应答过程总共进行了三次，这就是TCP连接建立之所以被叫为“三次握手”的原因了。</p><h2>总结</h2><p>这一讲我们分别从服务端和客户端的角度，讲述了如何创建套接字，并利用套接字完成TCP连接的建立。</p><ul>\n<li>服务器端通过创建socket，bind，listen完成初始化，通过accept完成连接的建立。</li>\n<li>客户端通过创建socket，connect发起连接建立请求。</li>\n</ul><p>在下一讲里，我们将真正地开始客户端-服务端数据交互的过程。</p><h2>思考题</h2><p>最后给你布置两道思考题。</p><p>第一道是关于阻塞调用的，既然有阻塞调用，就应该有非阻塞调用，那么如何使用非阻塞调用套接字呢？使用的场景又是哪里呢？</p><p>第二道是关于客户端的，客户端发起connect调用之前，可以调用bind函数么？</p><p>欢迎你在评论区与我分享你的答案，如果这篇文章帮助你理解TCP三次握手，也欢迎你点击“请朋友读”，把这篇文章分享给你的朋友或者同事。</p>","comments":[{"had_liked":false,"id":122209,"user_name":"疾风知劲草","can_delete":false,"product_type":"c1","uid":1184919,"ip_address":"","ucode":"B6E73CA240AA29","user_header":"https://static001.geekbang.org/account/avatar/00/12/14/97/8a3aa317.jpg","comment_is_top":false,"comment_ctime":1565316314,"is_pvip":false,"replies":[{"id":"45141","content":"赞","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576410,"ip_address":"","comment_id":122209,"utype":1}],"discussion_count":15,"race_medal":0,"score":"800429233370","product_id":100032701,"comment_content":"之前看过一些文章解释，为什么tcp建立连接需要三次握手，解释如下<br><br>tcp连接的双方要确保各自的收发消息的能力都是正常的。<br>客户端第一次发送握手消息到服务端，<br>服务端接收到握手消息后把ack和自己的syn一同发送给客户端，这是第二次握手，<br>当客户端接收到服务端发送来的第二次握手消息后，客户端可以确认“服务端的收发能力OK，客户端的收发能力OK”，但是服务端只能确认“客户端的发送OK，服务端的接收OK”，<br>所以还需要第三次握手，客户端收到服务端的第二次握手消息后，发起第三次握手消息，服务端收到客户端发送的第三次握手消息后，就能够确定“服务端的发送OK，客户端的接收OK”，<br>至此，客户端和服务端都能够确认自己和对方的收发能力OK，，tcp连接建立完成。","like_count":187,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462150,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1116630,"avatar":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","nickname":"码农Kevin亮","note":"","ucode":"D34562461CA0A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7084,"discussion_content":"&#34;确认双方的收发能力都OK&#34;，这是我见过对三次握手必要性的最好解释！赞！！！","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1567345802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019254,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/76/994a9929.jpg","nickname":"OlafOO","note":"","ucode":"105F8B194ED37B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321994,"discussion_content":"\n这么理解有点问题的，三次握手主要是为了避免建立重复连接\n\n> The principle reason for the three-way handshake is to prevent old duplicate connection initiations from causing confusion.","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1604659454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1299095,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d2/97/5f4cd8da.jpg","nickname":"虎虎生威的程坚强","note":"","ucode":"321C89298D3682","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019254,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/76/994a9929.jpg","nickname":"OlafOO","note":"","ucode":"105F8B194ED37B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":578708,"discussion_content":"是的，这个才是最主要的，源码面前，了无秘密","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656986795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":321994,"ip_address":""},"score":578708,"extra":""}]},{"author":{"id":1995515,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/72/fb/e918f97f.jpg","nickname":"coder67","note":"","ucode":"21EB2FAD7952D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379019,"discussion_content":"为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。\nhttps://www.zhihu.com/question/24853633/answer/63668444","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1623597126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2128686,"avatar":"https://static001.geekbang.org/account/avatar/00/20/7b/2e/e3facf52.jpg","nickname":"CCC","note":"","ucode":"B7064B564F8ECB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304669,"discussion_content":"确保各自的收发消息的能力！赞","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599638241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1834181,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/fc/c5/ff8b770e.jpg","nickname":"BugBean","note":"","ucode":"B51232281AD9BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300032,"discussion_content":"这个解释是我看过最容易理解的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597915001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2275516,"avatar":"https://static001.geekbang.org/account/avatar/00/22/b8/bc/d2d547c9.jpg","nickname":"成为优秀的程序员","note":"","ucode":"6D9080A2B225AE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563063,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649933115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2119325,"avatar":"https://static001.geekbang.org/account/avatar/00/20/56/9d/4b2a7d29.jpg","nickname":"ryanxw","note":"","ucode":"0B91EAC8D06EED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545895,"discussion_content":"进一步解释了tcp是双向的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642074587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302027,"discussion_content":"https://mp.weixin.qq.com/s/wf1zYOrsbI0T-9cUWMOhKg 这个里面也写到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598763919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1362659,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ca/e3/447aff89.jpg","nickname":"记事本","note":"","ucode":"76F2CAFA309437","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91514,"discussion_content":"其实就是双方确认下，我发的你能收到  你发的我也能收到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576837877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81814,"discussion_content":"这个说法应该是刘欣文章提的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576284001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1350902,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9c/f6/30dfdc9f.jpg","nickname":"Mark","note":"","ucode":"D60E5269080BA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9473,"discussion_content":"请教，什么情况下出现有发送能力没有接收能力，或者有接收能力没有发送能力？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568171830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003150,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4e/8e/f4297447.jpg","nickname":"吴文敏","note":"","ucode":"A4303003E547D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6527,"discussion_content":"赞！刚想问老师两次握手不就行了，为啥需要第三次。就看到答案了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566956626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1621237,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/KlRHXbAWiaqTUgibUF25O0iacTpaQvDfOuLq4I5XTK42ZyrEKojlJyBXXQ7z9G3Fznq7hlNibK7jrjr5xia6BuCYIfg/132","nickname":"Geek_Claire","note":"","ucode":"796686B4E33EA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4480,"discussion_content":"确实如此，客户端和服务端需要确定各自的发送、接收能力，这应该才是三次握手的关键，三次之后，就确认ok了，多了浪费，少了不够","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565453541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122203,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1565315759,"is_pvip":false,"replies":[{"id":"45140","content":"赞。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576228,"ip_address":"","comment_id":122203,"utype":1}],"discussion_count":4,"race_medal":0,"score":"358047601327","product_id":100032701,"comment_content":"这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足&quot;在不可靠信道上可靠地传输信息&quot;这一需求所导致的","like_count":84,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462146,"discussion_content":"赞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1940453,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9b/e5/bd0be5c3.jpg","nickname":"⁶₆⁶₆⁶₆","note":"","ucode":"25AE3F77318541","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216656,"discussion_content":"在不可靠的信道上可靠的传输信息，确实是对TCP三次握手最经典的总结","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585473503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1940453,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9b/e5/bd0be5c3.jpg","nickname":"⁶₆⁶₆⁶₆","note":"","ucode":"25AE3F77318541","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":331299,"discussion_content":"在不可靠的信道上实现可靠的消息传输","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606825241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":216656,"ip_address":""},"score":331299,"extra":""}]},{"author":{"id":1235967,"avatar":"https://static001.geekbang.org/account/avatar/00/12/db/ff/7043a067.jpg","nickname":"编程指北","note":"","ucode":"FDBAEE3500D689","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5042,"discussion_content":"背得不错👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565913365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122735,"user_name":"彭俊","can_delete":false,"product_type":"c1","uid":1054541,"ip_address":"","ucode":"FBEDBCCF22F1D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/4d/7e13ec93.jpg","comment_is_top":false,"comment_ctime":1565509408,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"250673612576","product_id":100032701,"comment_content":"如何使用非阻塞调用套接字:使用fcntl函数设置套接字的属性fcntl(fd, F_SETFL, flags)；<br>非阻塞调用的 使用的场景：程序在调用返回之前，需要做其他事情，可以选择用定时轮询或事件通知的方式获取调用结果。<br>是否可以调用bind 函数：可以，但是调用bind函数，也就是客户端指定了端口号，这样容易造成端口冲突，所以客户端不调用bind函数，让系统自动选择空闲端口比较好","like_count":59,"discussions":[{"author":{"id":2315935,"avatar":"https://static001.geekbang.org/account/avatar/00/23/56/9f/1e724dd0.jpg","nickname":"。","note":"","ucode":"122B29FADAE570","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325758,"discussion_content":"非阻塞也可以通过给socket系统调用的第二个参数传递SOCK_NONBLOCK标志实现","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605426329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393303,"discussion_content":"对的 对于通信五元组来说 客户端信息中的端口号是随机生成的。当然硬要手动绑定一个也没什么问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631347837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125589,"user_name":"leesper","can_delete":false,"product_type":"c1","uid":1351104,"ip_address":"","ucode":"CC76320571BECA","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/c0/cb5341ec.jpg","comment_is_top":false,"comment_ctime":1566207789,"is_pvip":false,"replies":[{"id":"47897","content":"赞，下面的内容会讲到这部分了","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567003223,"ip_address":"","comment_id":125589,"utype":1}],"discussion_count":1,"race_medal":0,"score":"207724637997","product_id":100032701,"comment_content":"思考题1：非阻塞调用的场景就是高性能服务器编程！我所有的调用都不需要等待对方准备好了再返回，而是立即返回，那么我怎么知道是否准备好了？就是把这些fd注册到类似select或者epoll这样的调用中，变多个fd阻塞为一个fd阻塞，只要有任何一个fd准备好了，select或者epoll都会返回，然后我们在从中取出准备好了的fd进行各种IO操作，从容自然 ^o^","like_count":49,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463620,"discussion_content":"赞，下面的内容会讲到这部分了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567003223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130152,"user_name":"鱼向北游","can_delete":false,"product_type":"c1","uid":1439908,"ip_address":"","ucode":"580EC7DCE57E9A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IPdZZXuHVMibwfZWmm7NiawzeEFGsaRoWjhuN99iaoj5amcRkiaOePo6rH1KJ3jictmNlic4OibkF4I20vOGfwDqcBxfA/132","comment_is_top":false,"comment_ctime":1567391832,"is_pvip":false,"replies":[{"id":"50838","content":"很清楚，很简洁。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568196133,"ip_address":"","comment_id":130152,"utype":1}],"discussion_count":1,"race_medal":0,"score":"181956018264","product_id":100032701,"comment_content":"关于三次握手<br>几句话解释清楚<br>1.信道不安全 保证通信需要一来一回<br>2.客户端的来回和服务端的来回 共四次 这是最多四次<br>3.客户端的回和服务端的来合并成一个，就是那个sync k ack j+1<br>4.这样就是三次握手<br>","like_count":42,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465836,"discussion_content":"很清楚，很简洁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568196133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170232,"user_name":"eddy","can_delete":false,"product_type":"c1","uid":1364645,"ip_address":"","ucode":"E71EE2FAD96000","user_header":"https://static001.geekbang.org/account/avatar/00/14/d2/a5/7acbd63a.jpg","comment_is_top":false,"comment_ctime":1578554673,"is_pvip":true,"replies":[{"id":"68061","content":"客户端发的消息是什么?如果三次应答服务器没有收到，服务器端连接没有建立，客户端误认为建立了，发送的报文应该会被设置为连接RST。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1580630360,"ip_address":"","comment_id":170232,"utype":1}],"discussion_count":5,"race_medal":0,"score":"113247704369","product_id":100032701,"comment_content":"有个问题, 一次面试中遇到的, 客户端的第三次应答, 服务器没有收到, 然后客户端开始发消息给服务器, 这时候服务器和客户端的表现是什么? 客户端会收到什么返回?","like_count":27,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480895,"discussion_content":"客户端发的消息是什么?如果三次应答服务器没有收到，服务器端连接没有建立，客户端误认为建立了，发送的报文应该会被设置为连接RST。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580630360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625233,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","nickname":"CoderArthur","note":"","ucode":"5B591914F0F67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279777,"discussion_content":"https://blog.csdn.net/yrx420909/article/details/104483455：\n如果 第三次握手中的ACK包丢失的情况下，Client 向 server端发送数据，Server端将以 RST包响应，方能感知到Server的错误","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1591414752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1038449,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d8/71/d6f79534.jpg","nickname":"一个工匠","note":"","ucode":"2168BA6F926074","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252167,"discussion_content":"这个相当于抢跑，第三次应答服务器没有收到，但是却收到了客户端发送过来的数据，这个时候服务器认为客户端已经发送了三次应答，只是应答包比较慢或者丢了。但是已经收到了真实数据，所以认为连接已经建立。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588143948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2110700,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/48eaCVUquJocEgGic0fa2jBJF4iaFujtKz7YevNfelPeq3DvLXhHJDrGohFcATTw3Bt5YctNTZwVqeT4lqIofXJA/132","nickname":"如何","note":"","ucode":"BBEC043F5A1998","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586257,"discussion_content":"客户端在第二次握手，收到了syn+ack后，connect就会返回，它的TCP连接状态就是ESTABLISHED，这时它向服务端发送数据，会收到RET包，感知到服务器的错误；而服务端发发出第二次握手的syn+ack包，没有收到响应，会启用TCP超时重传机制，继续发送syn+ack包。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662082738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002005,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","nickname":"stackWarn","note":"","ucode":"89672E452DEBA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292953,"discussion_content":"应该是服务端重传syn ack.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595395638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122248,"user_name":"fjpcode","can_delete":false,"product_type":"c1","uid":1306092,"ip_address":"","ucode":"C32C5E3ECB9A90","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ61zTDmLk7IhLJn6seBPOwsVaKIWUWaxk5YmsdYBZUOYMQCsyl9iaQVSg9U5qJVLLOCFUoLUuYnRA/132","comment_is_top":false,"comment_ctime":1565322439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78874733767","product_id":100032701,"comment_content":"1. 非阻塞套接字往往配合多路复用机制，达到提高CPU利用率，实现高并发的目的。<br>2. 客户端做bind当然是可以的，但是因为连接请求往往是由客户端主动发起的，所以在客户端做bind显得不那么必要，还要承担端口冲突的风险。","like_count":19},{"had_liked":false,"id":153290,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1574211256,"is_pvip":false,"replies":[{"id":"59334","content":"🐂。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1574498637,"ip_address":"","comment_id":153290,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48818851512","product_id":100032701,"comment_content":"学完这节，感觉TCP的三次握手机制，更明白了一些，相信此生都会记得，养成了翻评论的习惯，感觉有些同学的解释比老师的还要通俗易懂。<br>我的小结如下，假设只有客户端C和服务端S，两台机器：<br>1：啥是TCP的三次握手机制？<br>TCP的三次握手机制，是C和S使用TCP协议进行通信，他们在正式建立链接前，先进行了三次简单的通信，只有这三次简单的同学成功了，才建立正式的连接，之所以说是简单的通信，因为这三次通信发送的消息比较简单，就是固定格式的同步报文和确认报文<br><br>2：TCP的三次握手机制的目的是啥？<br>TCP协议的设计目标之一，就是保证通信信道的安全，而TCP的三次握手机制就是用于确认信道是否安全的手段之一，确认信道安全，最基本的首先要确认C和S都具备信息首发的能力吧！也就是C要确定S能收发信息，S要确定C能收发信息，咋确认呢？那就发送一条消息实验一下呗！所以，就有了TCP的三次握手机制，TCP的三次握手机制的核心目标就是要确认C和S之间的通信信道是安全的。<br><br>3：为啥是三次？<br>按道理来讲，C要确认S是否能够正确的收发消息，需要发生一条消息给S，然后接收到S的一条确认收到的消息才行，这一来一回就是两条消息。同理，S要确认C是否能够正确的收发消息，也需要这么玩。这样就需要两趟一来一回，总共需要四次通信，其实这么玩思维上一点负载都是没有的自然而然。<br>不过只是为了确认C和S能否正常通信的话，就如此设计，被聪明一看到就会骂傻X，人类孜孜不倦所追求是更快、更高、更强，计算机世界中这种追求更加的强烈，将S的确认收到C发送的消息和S能正常发生的消息一次性的都发给C岂不是更好，虽然增加了点消息的内容，但是相对于消息的传输消耗而言还是非常少的，而且从整体消耗上看，是减少了一次通信的过程，性能想必会更好。<br>很明显一次握手、两次握手都确认不了C和S的收发消息的能力是否OK。三次握手是比较简洁有效的方式，大于三次之上的握手机制也可以确认C和S是否能够正常通信，不过有些浪费资源了，毕竟三次就能搞定的事情，没必要搞三次至少，毕竟对于性能的追求我们是纳秒必争的。","like_count":12,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475109,"discussion_content":"🐂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574498637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217239,"user_name":"rongyefeng","can_delete":false,"product_type":"c1","uid":1959482,"ip_address":"","ucode":"9A15D947E9D645","user_header":"https://static001.geekbang.org/account/avatar/00/1d/e6/3a/382cf024.jpg","comment_is_top":false,"comment_ctime":1589446043,"is_pvip":false,"replies":[{"id":"80641","content":"我查看了一下资料，在Linux中backlog确实表示的是已完成(ESTABLISHED)且未accept的队列大小。而FreeBSD的实现是不同的，已经勘误修改。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1589707452,"ip_address":"","comment_id":217239,"utype":1}],"discussion_count":4,"race_medal":0,"score":"40244151707","product_id":100032701,"comment_content":"Linux内核2.2之后，socket backlog参数的形为改变了，现在它指等待accept的完全建立的套接字的队列长度，而不是不完全连接请求的数量。 不完全连接的长度可以使用&#47;proc&#47;sys&#47;net&#47;ipv4&#47;tcp_max_syn_backlog设置。<br>老师，这里你讲的backlog是未完成连接的队列，是不是有误？","like_count":9,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495087,"discussion_content":"我查看了一下资料，在Linux中backlog确实表示的是已完成(ESTABLISHED)且未accept的队列大小。而FreeBSD的实现是不同的，已经勘误修改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589707452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388014,"discussion_content":"已完成(ESTABLISHED)且未accept，是指客户端状态是ESTABLISHED么？即“三次握手”的流程，完成了“第二次握手”。此时客户端回复 ACK，服务端收到后，就认为是accept成功了，是这样么？\n谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628556918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331303,"discussion_content":"backlog参数是否可以理解为 给指定进程设置的 与TCP连接相关的 缓存队列的大小?\n\n操作系统负责将指定的TCP连接分配给指定的进程。但是进程的处理能力是有限的，会根据自己的能力从&#34;TCP连接池&#34;中拿TCP连接(通过accept系统调用)。\n\n因为 生产者 和 消费者  的处理速度不匹配 所以需要 连接池 或者消息队列 的概念， 而backlog 就是 这个 连接池 或者 消息队列的大小？\n\n如果 超出了backlog的大小，那么这个客户端发来的TCP连接会如何处理呢？被丢弃吗?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606826005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1959482,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e6/3a/382cf024.jpg","nickname":"rongyefeng","note":"","ucode":"9A15D947E9D645","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267902,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589707495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184592,"user_name":"dan","can_delete":false,"product_type":"c1","uid":1195044,"ip_address":"","ucode":"515A904FB55FFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/24/ceac00af.jpg","comment_is_top":false,"comment_ctime":1583368001,"is_pvip":false,"replies":[{"id":"71704","content":"解说的非常形象，点赞。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583657670,"ip_address":"","comment_id":184592,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27353171777","product_id":100032701,"comment_content":"&quot;请问能听见吗&quot;&quot;我能听见你的声音，你能听见我的声音吗&quot;<br>A先对B：你在么？我在的，我发一个消息看你能不能收到，我发J；<br>B收到后，回答：我收到了你发的J，你的发送和我的接收功能正常,回你J+1;并且，我给你发个消息K，看我的发送和你的接收是否正常？<br>A收到后，回答：我收到了你发的J+1和K，我回你K+1，告诉你的发送和我的接收正常；<br>通过前2次，表明：起点的发送和终点的接收，功能正常；<br>通过后2次，表明：终点的发送和起点的接收，功能正常；<br>由此保证：双方可以发送和接收对方的信息。","like_count":6,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486061,"discussion_content":"解说的非常形象，点赞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583657670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123387,"user_name":"weeeee","can_delete":false,"product_type":"c1","uid":1276011,"ip_address":"","ucode":"33FB3E22D78B4C","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/6b/9451a800.jpg","comment_is_top":false,"comment_ctime":1565665540,"is_pvip":false,"replies":[{"id":"45934","content":"我的理解是accept之后会返回三次握手成功进入ESTABLISHED状态的连接，确实是先进入ESTABLISHED状态，然后从accept返回","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1566129744,"ip_address":"","comment_id":123387,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23040502020","product_id":100032701,"comment_content":"老师好，有一个问题想请教您一下<br>服务器端的连接进入ESTABLISHED 状态，课程上说的是accept返回后才进入，但是我自己实验发现只要客户端发送ack后，也就是第三次握手完成就进入了ESTABLISHED 状态，和accept没有关系，请问一下老师是我哪里理解错了吗？","like_count":6,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462647,"discussion_content":"我的理解是accept之后会返回三次握手成功进入ESTABLISHED状态的连接，确实是先进入ESTABLISHED状态，然后从accept返回","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566129744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1562826,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq3opKxGyQia0CQibZU8If7Qv6ia3j4XiaWIdCHxrK0T3uZ5RVUSgwf0IJVRVt0wVLibryycTqv4VnEzbw/132","nickname":"Geek_8c4282","note":"","ucode":"09E13C2DDBA48D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539371,"discussion_content":"我也试了下，accept前就可以三次握手成功，这块讲的有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639700885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122757,"user_name":"Knight²º¹⁸","can_delete":false,"product_type":"c1","uid":1089754,"ip_address":"","ucode":"BDCB830B6A730F","user_header":"https://static001.geekbang.org/account/avatar/00/10/a0/da/4f50f1b2.jpg","comment_is_top":false,"comment_ctime":1565513072,"is_pvip":false,"replies":[{"id":"45174","content":"就是要和操作系统I&#47;O打交道，编程语言的I&#47;O模型是通过抽象和设计，总结出的一套规范。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565579096,"ip_address":"","comment_id":122757,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23040349552","product_id":100032701,"comment_content":"老师我有一个问题，编程语言中的IO模型和操作系统中的IO关系是什么？","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462392,"discussion_content":"就是要和操作系统I/O打交道，编程语言的I/O模型是通过抽象和设计，总结出的一套规范。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565579096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1089754,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a0/da/4f50f1b2.jpg","nickname":"Knight²º¹⁸","note":"","ucode":"BDCB830B6A730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4589,"discussion_content":"操作系统支持BIO, NIO, AIO等，为什么还需要再编程语言中实现一次。就拿java来说，他的IO模型中实现了Reactor, Selector等处理模型，为什么这些模型不直接由操作系统实现，编程语言在使用的过程中直接调用就好了，一直不明白？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565579626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1357623,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJmBKrLvqOIXDDbj3ocEIJzqsQx2e5VLDBSX6LmofYtprWwKaVAmHUqU2z3mjREHX8n9eLLiavlPg/132","nickname":"wg1993","note":"","ucode":"D5112FEFDB1DF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1089754,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a0/da/4f50f1b2.jpg","nickname":"Knight²º¹⁸","note":"","ucode":"BDCB830B6A730F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51937,"discussion_content":"java最大的特点就是一次编译到处运行，他是运行在自己的JVM上面的，java大部分方法都非本地方法，当然他也有本地方法，如果java直接调用操作系统，他最大的特点就没有了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573970645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4589,"ip_address":""},"score":51937,"extra":""}]}]},{"had_liked":false,"id":122108,"user_name":"_stuView","can_delete":false,"product_type":"c1","uid":1244561,"ip_address":"","ucode":"C2D4AAB08515F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/91/65ff3154.jpg","comment_is_top":false,"comment_ctime":1565305502,"is_pvip":false,"replies":[{"id":"45131","content":"file description，文件描述符。UNIX世界里万物皆文件。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575620,"ip_address":"","comment_id":122108,"utype":1}],"discussion_count":7,"race_medal":0,"score":"23040141982","product_id":100032701,"comment_content":"sockfd里的这个fd代表什么","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462102,"discussion_content":"file description，文件描述符。UNIX世界里万物皆文件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073963,"avatar":"https://static001.geekbang.org/account/avatar/00/10/63/2b/da9c6d66.jpg","nickname":"Joy Young","note":"","ucode":"226F8183D83FE3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4347,"discussion_content":"系统给每个进程维护一张打开文件表(数组)，Sockfd是套接字文件在这张表的数组索引或下标","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1565327790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1597911,"avatar":"https://static001.geekbang.org/account/avatar/00/18/61/d7/36c13ba0.jpg","nickname":"AAA","note":"","ucode":"DD36EF3A4CBD00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4311,"discussion_content":"file descriptor 文件描述符","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1565312857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1244561,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fd/91/65ff3154.jpg","nickname":"_stuView","note":"","ucode":"C2D4AAB08515F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1597911,"avatar":"https://static001.geekbang.org/account/avatar/00/18/61/d7/36c13ba0.jpg","nickname":"AAA","note":"","ucode":"DD36EF3A4CBD00","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4342,"discussion_content":"醍醐灌顶😂谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565322918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4311,"ip_address":""},"score":4342,"extra":""}]},{"author":{"id":1619882,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b7/aa/6427f4d8.jpg","nickname":"wlarein","note":"","ucode":"81A6B217700403","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4306,"discussion_content":"yyl😂哈哈哈哈哈哈哈哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565312000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1244561,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fd/91/65ff3154.jpg","nickname":"_stuView","note":"","ucode":"C2D4AAB08515F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1619882,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b7/aa/6427f4d8.jpg","nickname":"wlarein","note":"","ucode":"81A6B217700403","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4343,"discussion_content":"哈哈哈哈哪位呀😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565322940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4306,"ip_address":""},"score":4343,"extra":""}]},{"author":{"id":1284592,"avatar":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","nickname":"星亦辰","note":"","ucode":"B0388FBFFDEE7E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4301,"discussion_content":"文件句柄，网络资源操作的一个标记。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565308362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122353,"user_name":"一周思进","can_delete":false,"product_type":"c1","uid":1032125,"ip_address":"","ucode":"00BE5402479B16","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/bd/0c40979f.jpg","comment_is_top":false,"comment_ctime":1565346233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18745215417","product_id":100032701,"comment_content":"刚好最近写了个通过man帮助手册编写基础tcp服务器<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;bNdfXNQcZ3z_WzDWL5yQfA","like_count":4},{"had_liked":false,"id":122349,"user_name":"浦上清风","can_delete":false,"product_type":"c1","uid":1619564,"ip_address":"","ucode":"8CD36438A21AE1","user_header":"https://static001.geekbang.org/account/avatar/00/18/b6/6c/bae0461c.jpg","comment_is_top":false,"comment_ctime":1565344152,"is_pvip":false,"replies":[{"id":"45183","content":"1 不是等价的<br>2 没有必要，还徒增了端口冲突的危险。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565579724,"ip_address":"","comment_id":122349,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18745213336","product_id":100032701,"comment_content":"1. 非阻塞 == 异步通信 ？？？<br>2. 可以是可以，但是不安全？？？","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462216,"discussion_content":"1 不是等价的\n2 没有必要，还徒增了端口冲突的危险。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565579724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201724,"user_name":"Arthur.Li","can_delete":false,"product_type":"c1","uid":1005824,"ip_address":"","ucode":"EC2436A5136C13","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/00/6d14972a.jpg","comment_is_top":false,"comment_ctime":1585825833,"is_pvip":false,"replies":[{"id":"75768","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1586075739,"ip_address":"","comment_id":201724,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14470727721","product_id":100032701,"comment_content":"SYN：建立连接<br>FIN：关闭连接<br>ACK：响应<br>PSH：有DATA数据传输<br>RST：连接重置","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490402,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586075739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122124,"user_name":"星亦辰","can_delete":false,"product_type":"c1","uid":1284592,"ip_address":"","ucode":"B0388FBFFDEE7E","user_header":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","comment_is_top":false,"comment_ctime":1565308085,"is_pvip":true,"replies":[{"id":"45136","content":"想多了，可以区分出来是不是本地监听端口(被动套接字)的，而且这个在大多数情况下不被允许的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575927,"ip_address":"","comment_id":122124,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14450209973","product_id":100032701,"comment_content":"思考题2 <br><br>客户端可以bind 指定使用固定端口来连接。 <br>没有bind 则会产生一个随机的端口来完成连接请求。<br><br>想到一个比较有意思的事情：<br><br>客户端bind 以后，对内网进行端口扫描，表象则是，远程随机端口，到本地固定端口完成通信。看似，是本地开启了服务。如果bind 80 443 22这些常规端口，则可以迷惑安全人员 😄 ","like_count":3,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462112,"discussion_content":"想多了，可以区分出来是不是本地监听端口(被动套接字)的，而且这个在大多数情况下不被允许的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1304534,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e7/d6/e023cb98.jpg","nickname":"stupidchen","note":"","ucode":"4D9C5D8F61A5A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4437,"discussion_content":"有点骚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565418658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000091,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/9b/8830fba9.jpg","nickname":"上@善","note":"","ucode":"4826A47904C134","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4390,"discussion_content":"到目前为止，没有体现很有营养的知识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565346850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110218,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/ca/4560f06b.jpg","nickname":"zhchnchn","note":"","ucode":"2219E40ED134D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4336,"discussion_content":"远程服务器的固定端口显示不出来吗？那它是怎么给远程服务器端口随机取值的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565320907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181781,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1582633556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10172568148","product_id":100032701,"comment_content":"1、非阻塞调用为了提高网络处理性能，在select，poll和epoll等IO中使用。<br>2、客户端其实可以bind，但是没必要bind。客户端调用connect成功后系统会随机分配一个可用端口。这里涉及到端口选择算法和列维模型。<br>","like_count":2},{"had_liked":false,"id":166588,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1577510363,"is_pvip":false,"replies":[{"id":"63876","content":"1.客户端一定需要预先知道待连接的服务器端的地址和端口，至于怎么让客户端知道，通过配置，启动参数，都是可以的；<br>2.加1的目的是为了对这个报文进行唯一性确认，防止报文串掉了，这样我们就无法知道谁跟谁了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1577602078,"ip_address":"","comment_id":166588,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10167444955","product_id":100032701,"comment_content":"老师 两个问题麻烦解答下<br>1.如果服务端 使用随机端口 那么客户端时怎么知道的 不使用随机的话 是客户端要先知道服务端的端口然后配置进去吗<br>2.三次握手时 每次通信的消息都加一  这个目的是什么 每次返回一个&quot;1&quot; 或者&quot;success&quot; 是不是也行?","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479551,"discussion_content":"1.客户端一定需要预先知道待连接的服务器端的地址和端口，至于怎么让客户端知道，通过配置，启动参数，都是可以的；\n2.加1的目的是为了对这个报文进行唯一性确认，防止报文串掉了，这样我们就无法知道谁跟谁了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577602078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393305,"discussion_content":"最主要的是协商出一个序列号 而这个序列号就是连接有序的保证。这部分会有网络协议栈来做包的粘合。也就是粘包","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631348012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2748225,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ef/41/c5b0194b.jpg","nickname":"小白云游记","note":"","ucode":"B9C433081FB40D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390804,"discussion_content":"加一是为了确保这个序号之前的所有数据都接收到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630050622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123216,"user_name":"啦啦的小猪","can_delete":false,"product_type":"c1","uid":1134766,"ip_address":"","ucode":"13352B41450925","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/ae/11dad6f3.jpg","comment_is_top":false,"comment_ctime":1565628573,"is_pvip":false,"replies":[{"id":"45930","content":"每个系统的实现和解释不尽相同，你说的是一个很典型的实现。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1566129453,"ip_address":"","comment_id":123216,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10155563165","product_id":100032701,"comment_content":"listen的第二个参数backlog的值是规定ACCEPT队列大小的;当ACCEPT队列满了时后来的客户端，就会被放到syn队列中","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462585,"discussion_content":"每个系统的实现和解释不尽相同，你说的是一个很典型的实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566129453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122257,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1565325458,"is_pvip":false,"replies":[{"id":"45150","content":"牵扯到具体的实现细节，我建议去看下源码实现。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576713,"ip_address":"","comment_id":122257,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10155260050","product_id":100032701,"comment_content":"1. 非阻塞调用是不是通过回调函数完成的呢？ <br><br>就是我调用完connect之后不等你，你处理完了通知我，我先去和其他服务端connect去了。是这样子嘛？<br><br>题外话:<br>搜索老师布置的题目的过程中，无意中看到了这么一个话题。客户端端发起connect,服务端不调用accept能不能成功？<br><br>顺着那篇文章看下去:<br>客户端的syn请求被响应的同时，被linux内核放到了syn队列中，而客户端向服务端发完ack之后，这个socket才会被移入accept队列中。(accept队列长度的大小就是listen方法的第二个参数backlog)<br><br>进入accpet队列的socket会被通知其相应监听的服务端进程，由服务端进程执行accept操作将这个socket取出来进行处理。<br><br>由此可见，服务端将这个socket移入accept队列后，就算连接创建成功了。而accept操作，是由服务进程发起的。所以，不执行accept操作，连接也可以创建成功，只是这个socket还没有被服务进程处理而积压在了accept队列中了。<br><br>不知道我看的文章写的对不对，可以再看看。其实我很期待老师分析这些问题，然后我们就可以有意想不到的收获!<br><br>(ps:目前看来，还没遇到太trouble的问题，理解起来太困难的篇幅。)","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462177,"discussion_content":"牵扯到具体的实现细节，我建议去看下源码实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1270262,"avatar":"https://static001.geekbang.org/account/avatar/00/13/61/f6/1d6b548a.jpg","nickname":"wang","note":"","ucode":"C1A3BCACCB188E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4500,"discussion_content":"或者说这个连接的含义可以是多样的，如果说是到达服务进程accept 感知客户进程才算连接还是，仅仅服务进程能够accept 还未accept 就算连接ok","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565494429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1074310,"avatar":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","nickname":"多襄丸","note":"","ucode":"1AA1497C5A293C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1270262,"avatar":"https://static001.geekbang.org/account/avatar/00/13/61/f6/1d6b548a.jpg","nickname":"wang","note":"","ucode":"C1A3BCACCB188E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4530,"discussion_content":"还未accept","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565522664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4500,"ip_address":""},"score":4530,"extra":""}]}]},{"had_liked":false,"id":226114,"user_name":"郑祖煌","can_delete":false,"product_type":"c1","uid":1469608,"ip_address":"","ucode":"49A0D2E3279826","user_header":"https://static001.geekbang.org/account/avatar/00/16/6c/a8/1922a0f5.jpg","comment_is_top":false,"comment_ctime":1591953394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886920690","product_id":100032701,"comment_content":"1.如何使用非阻塞调用套接字:使用fcntl函数设置套接字的属性fcntl(fd, F_SETFL, flags)；<br>非阻塞调用的 使用的场景：程序在调用返回之前，需要做其他事情，可以选择用定时轮询或事件通知的方式获取调用结果。<br>2.是否可以调用bind 函数：可以，但是调用bind函数，也就是客户端指定了端口号，这样容易造成端口冲突，所以客户端不调用bind函数，让系统自动选择空闲端口比较好","like_count":1},{"had_liked":false,"id":171828,"user_name":"莫珣","can_delete":false,"product_type":"c1","uid":1117933,"ip_address":"","ucode":"CAFE6F2AC5C177","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/ed/1c662e93.jpg","comment_is_top":false,"comment_ctime":1579022692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873989988","product_id":100032701,"comment_content":"思考题1：可以通过设置socket的属性来设置socket为非阻塞，这样在该socket上的所有操作都是非阻塞的。Linux下是fcntl(fd, F_SETFL, flags)。使用场景的话，个人理解是为了解耦和性能。<br>思考题2：可以调用bind函数，但是这样一来客户端会使用固定端口，容易产生冲突，另外，一般而言我们希望客户端具备快速启动的能力，但是因为TIMEWAIT状态的存在，使用随机端口会更容易处理一些。<br><br>然后看到评论区里很多人说三次握手的事情，个人认为理解三次握手为什么是三次，具体三次握手是为什么，需要从“TCP是全双工的”这句话来理解。","like_count":1},{"had_liked":false,"id":163928,"user_name":"Ghost","can_delete":false,"product_type":"c1","uid":1048661,"ip_address":"","ucode":"CC6FD1D460ED10","user_header":"https://static001.geekbang.org/account/avatar/00/10/00/55/3f0bc345.jpg","comment_is_top":false,"comment_ctime":1576829800,"is_pvip":false,"replies":[{"id":"63901","content":"嗯。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1577604085,"ip_address":"","comment_id":163928,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5871797096","product_id":100032701,"comment_content":"简单的就是<br>A：你能听到我说话吗？<br>B：听得到，你能听得到我说话吗？<br>A：听得到<br><br>保证通信的双方都是有接收跟发送消息的能力","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478585,"discussion_content":"嗯。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577604085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132278,"user_name":"云端","can_delete":false,"product_type":"c1","uid":1625449,"ip_address":"","ucode":"B4E1F270C349B3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epUgnMApgafcbOicQJYOlApkHf6AzxF5edzeXAtVNhwOZTh3WB5wtIrbf1Algg6Axy5rEfZjj0B6Ng/132","comment_is_top":false,"comment_ctime":1568077941,"is_pvip":false,"replies":[{"id":"50793","content":"我的程序和结果 ：<br><br>#include &quot;lib&#47;common.h&quot;<br><br>int socket_init()<br>{<br>    struct protoent* protocol = NULL;<br>    protocol=getprotobyname(&quot;icmp&quot;);<br>    int sock=socket(AF_INET,SOCK_RAW,protocol-&gt;p_proto);<br>    if(sock == -1){<br>        error(1,errno,&quot;create socket failed&quot;);<br>    }<br>    return sock;<br>}<br><br>int main(int c, char **v) {<br>    printf(&quot;socket %d \\n&quot;, socket_init());<br>    printf(&quot;socket %d \\n&quot;, socket_init());<br>}<br><br>socket 3<br>socket 4","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568190490,"ip_address":"","comment_id":132278,"utype":1}],"discussion_count":6,"race_medal":0,"score":"5863045237","product_id":100032701,"comment_content":"<br>您好:老师<br><br>int socket_init()<br>{<br>       struct protoent* protocol = NULL;<br>        protocol=getprotobyname(&quot;icmp&quot;);<br>        int sock=socket(AF_INET,SOCK_RAW,protocol-&gt;p_proto);<br><br>}<br><br>在外部两次调用该函数，icmp协议原始套接字返回文件描述符相同，每次都是sock=5,为什么？怎么才能在外部多次调用该函数时返回的上下文描述符不一样？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466853,"discussion_content":"我的程序和结果 ：\n\n#include &amp;quot;lib/common.h&amp;quot;\n\nint socket_init()\n{\n    struct protoent* protocol = NULL;\n    protocol=getprotobyname(&amp;quot;icmp&amp;quot;);\n    int sock=socket(AF_INET,SOCK_RAW,protocol-&amp;gt;p_proto);\n    if(sock == -1){\n        error(1,errno,&amp;quot;create socket failed&amp;quot;);\n    }\n    return sock;\n}\n\nint main(int c, char **v) {\n    printf(&amp;quot;socket %d \\n&amp;quot;, socket_init());\n    printf(&amp;quot;socket %d \\n&amp;quot;, socket_init());\n}\n\nsocket 3\nsocket 4","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568190490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625449,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epUgnMApgafcbOicQJYOlApkHf6AzxF5edzeXAtVNhwOZTh3WB5wtIrbf1Algg6Axy5rEfZjj0B6Ng/132","nickname":"云端","note":"","ucode":"B4E1F270C349B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244755,"discussion_content":"\n\nint socket_init()\n{\n    struct protoent* protocol = NULL;\n    protocol=getprotobyname(&#34;icmp&#34;);\n    int sock=socket(AF_INET,SOCK_RAW,protocol->p_proto);\n    if(sock == -1){\n        error(1,errno,&#34;create socket failed&#34;);\n    }\n    return sock;\n}\n\nint main(int c, char **v) {\n    printf(&#34;socket %d \\n&#34;, socket_init());\n\nwhile（1）｛\n\n｝\n\n\n}\n\n在两个命令行同时执行可执行程序./main\n结果：socket fd都是3\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587627480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625449,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epUgnMApgafcbOicQJYOlApkHf6AzxF5edzeXAtVNhwOZTh3WB5wtIrbf1Algg6Axy5rEfZjj0B6Ng/132","nickname":"云端","note":"","ucode":"B4E1F270C349B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244751,"discussion_content":"int socket_init()\n{\n    struct protoent* protocol = NULL;\n    protocol=getprotobyname(&#34;icmp&#34;);\n    int sock=socket(AF_INET,SOCK_RAW,protocol->p_proto);\n    if(sock == -1){\n        error(1,errno,&#34;create socket failed&#34;);\n    }\n    return sock;\n}\n\nint main(int c, char **v) {\n    printf(&#34;socket %d \\n&#34;, socket_init());\n}\n\n在两个命令行同时执行可执行程序./main\n结果：socket fd都是3\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587627331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625449,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epUgnMApgafcbOicQJYOlApkHf6AzxF5edzeXAtVNhwOZTh3WB5wtIrbf1Algg6Axy5rEfZjj0B6Ng/132","nickname":"云端","note":"","ucode":"B4E1F270C349B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244709,"discussion_content":"程序改为：main函数调用一次初始化；\n在两个命令行同时执行./main","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587623387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625449,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epUgnMApgafcbOicQJYOlApkHf6AzxF5edzeXAtVNhwOZTh3WB5wtIrbf1Algg6Axy5rEfZjj0B6Ng/132","nickname":"云端","note":"","ucode":"B4E1F270C349B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244706,"discussion_content":"老师您好：生成可行行程序，在命令行里执行./main2，结果与您执行结果不一样，sockeid相同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587622990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625449,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epUgnMApgafcbOicQJYOlApkHf6AzxF5edzeXAtVNhwOZTh3WB5wtIrbf1Algg6Axy5rEfZjj0B6Ng/132","nickname":"云端","note":"","ucode":"B4E1F270C349B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15855,"discussion_content":"不好意思老师，上面我的问题没有描述清楚，我是icmp socket生成了一个.so动态库，该动态库用jna本地调用，调用两次动态库，两次sock上下文相同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568856581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130993,"user_name":"无名","can_delete":false,"product_type":"c1","uid":1110113,"ip_address":"","ucode":"2D2E877CF97138","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/61/68462a07.jpg","comment_is_top":false,"comment_ctime":1567591706,"is_pvip":false,"replies":[{"id":"51755","content":"我在答疑篇里统一回复了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568960583,"ip_address":"","comment_id":130993,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5862559002","product_id":100032701,"comment_content":"老师，关于listen函数的参数backlog的解释，说是未完成连接队列的大小，然后影响并发数。有点疑问。<br>listen函数为每个监听socket维护两个队列：未完成连接队列（SYN_RCVD状态）和已完成连接的队列（ESTABLISHED状态）。<br>backlog表示的是未完成连接队列的大小，那已完成连接的队列的大小的有限制吗？<br>关于并发的影响，如果都是已经建立连接的状态，那么并发还是取决于已完成连接的队列的大小的吧。<br>","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466231,"discussion_content":"我在答疑篇里统一回复了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568960583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1959482,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e6/3a/382cf024.jpg","nickname":"rongyefeng","note":"","ucode":"9A15D947E9D645","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265862,"discussion_content":"在内核版本2.2之前的Linux中，backlog参数是指所有处于半连接状态（SYN_RCVD）和完全连接状态（ESTABLISHED）的socket的上限。但自内核版本2.2之后，它只表示处于完全连接状态的socket的上限，处于半连接状态的socket的上限则由/proc/sys/net/ipv4/tcp_max_syn_backlog内核参数定义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589448070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125278,"user_name":"另一半棉花糖","can_delete":false,"product_type":"c1","uid":1593363,"ip_address":"","ucode":"C11266794FBA5B","user_header":"https://static001.geekbang.org/account/avatar/00/18/50/13/104d9501.jpg","comment_is_top":false,"comment_ctime":1566137534,"is_pvip":false,"replies":[{"id":"46106","content":"第一个问题，我觉得是有作用的，否则传入的地址值无法确定边界，比如你提到的变长AF_UNIX。长度可以帮助我们避免&quot;缓冲区溢出&quot;的问题，做一层保护。<br><br>第二个问题，新的socket还是那个监听端口。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1566214375,"ip_address":"","comment_id":125278,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861104830","product_id":100032701,"comment_content":"我认为bind函数的第三个参数实际上没啥用，有前两个参数就可以确定是哪种结构了，结构的最大长度也就确定了，根本不需要第三个参数，即便是地址长度可变的AF_UNIX类型，只要对路径按照字符串来解析就行了。<br><br>我理解bind函数的作用就是把socket的文件描述符与（ip地址,端口号）这个对儿绑定在一起，但如果这么理解的话，accept的时候会返回一个新的socket，这个新的socket是否对应一个新的端口号呢？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463507,"discussion_content":"第一个问题，我觉得是有作用的，否则传入的地址值无法确定边界，比如你提到的变长AF_UNIX。长度可以帮助我们避免&amp;quot;缓冲区溢出&amp;quot;的问题，做一层保护。\n\n第二个问题，新的socket还是那个监听端口。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566214375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123693,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1565744052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5860711348","product_id":100032701,"comment_content":"顶上的留言非常完美的解释了为什么是三次握手","like_count":1},{"had_liked":false,"id":123684,"user_name":"Cbywy","can_delete":false,"product_type":"c1","uid":1475714,"ip_address":"","ucode":"187B7048902DFD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epr1aKPQKuSF1icgV3SIDU0rrTnwYgSboiaffldRXbSwh4N9HftVicvKgPJ1PqUpZ6mS1dT2PfXCIsYw/132","comment_is_top":false,"comment_ctime":1565743701,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5860710997","product_id":100032701,"comment_content":"1 非阻塞accept立即返回，作用就是可以不阻塞线程<br>2 connect之前bind可以用于多网卡的时候，使用不同网卡","like_count":1},{"had_liked":false,"id":122280,"user_name":"zhchnchn","can_delete":false,"product_type":"c1","uid":1110218,"ip_address":"","ucode":"2219E40ED134D4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/ca/4560f06b.jpg","comment_is_top":false,"comment_ctime":1565329058,"is_pvip":false,"replies":[{"id":"45151","content":"1.两个不是一个东西，一个是套接字地址，一个是套接字，都需要设置。<br><br>2.unreachable是被动收到了其他网络涉笔发来的ICMP报文信息，而timeout是在尝试一段时间后主动放弃的。<br>","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576846,"ip_address":"","comment_id":122280,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5860296354","product_id":100032701,"comment_content":"这篇很是解惑，感谢。有2个问题想请教老师：<br>1. `socket`函数的参数`domain`的值，在`bind`函数的参数`addr`的`sin_family`中也需要设置，这样不是重复了吗？<br>2. `connect`函数出错返回可能的3种情况中，其中第1种“TIMEOUT 错误”和第3种“destination unreachable”，感觉都是连接不到服务端的IP，这两种情况有什么区别吗？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462185,"discussion_content":"1.两个不是一个东西，一个是套接字地址，一个是套接字，都需要设置。\n\n2.unreachable是被动收到了其他网络涉笔发来的ICMP报文信息，而timeout是在尝试一段时间后主动放弃的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4905,"discussion_content":"套接字和套接字地址对应java来说，就是对象本身和对象内存地址，对象本身是有成员变量和方法的，可以直接用来调用方法，而对象地址的唯一作用是标示出对象在内存中的位置，其本身不能直接使用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565826341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109382,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/86/5855aaa4.jpg","nickname":"刘明","note":"","ucode":"5871C54AAE1A81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4540,"discussion_content":"TIMEOUT表示发出SYN之后没收到任何回复，Destination Unrechable则通常是由路由器回复了ICMP。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565529900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284592,"avatar":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","nickname":"星亦辰","note":"","ucode":"B0388FBFFDEE7E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4450,"discussion_content":"Timeout 可以理解为，端口通，但是没有服务。\nUnreachable 直接网络不可达，或者没开启对应端口。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565428580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122236,"user_name":"Keep-Moving","can_delete":false,"product_type":"c1","uid":1182631,"ip_address":"","ucode":"76F33C06E07A27","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/a7/6ef32187.jpg","comment_is_top":false,"comment_ctime":1565320872,"is_pvip":false,"replies":[{"id":"45144","content":"因为三次握手是最简洁的方式，已经足够完成信息的确认。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576534,"ip_address":"","comment_id":122236,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5860288168","product_id":100032701,"comment_content":"老师，想问一下，为什么是三次握手，而不是四次、五次握手？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462165,"discussion_content":"因为三次握手是最简洁的方式，已经足够完成信息的确认。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101405,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/5d/5297717a.jpg","nickname":"初见","note":"","ucode":"06D7952CED37D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4522,"discussion_content":"曾经我也纠结过这个问题~\n\n首先你要理解 tcp 是可靠的链接，一个链接的可靠性，指的是客户端（简称 C）与服务端（简称 S）的接收能力与发送能力。以上四种能力都没有问题，那么这个链接是可靠的。\n\n所以再回到你的问题，为什么需要三次握手？\n\n第一次握手， S 收到了 C 的请求， S 知道了 C 的发送没问题\n \n第二次握手， C 收到了 S 的请求，C 知道了 S 的发送、接收没问题\n\n第三次握手，S 收到了 C 的请求，S 知道了 C 的接收没问题\n\n\n至此，S 与 C 相互都知道了对方没问题，链接建立成功。三次足够。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1565516813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1146178,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7d/42/c324a7de.jpg","nickname":"山鷹·China","note":"","ucode":"1A13AAC813C1C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4375,"discussion_content":"防止无效tcp链接，三次就够了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565340813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122193,"user_name":"木小柒","can_delete":false,"product_type":"c1","uid":1000802,"ip_address":"","ucode":"947439CDD0B5B1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/62/3c6041e7.jpg","comment_is_top":false,"comment_ctime":1565314723,"is_pvip":false,"replies":[{"id":"45139","content":"这是有原因的，不需要每次都换端口，下面会降到具体解法。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576208,"ip_address":"","comment_id":122193,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5860282019","product_id":100032701,"comment_content":"记得很久前学套接字，提供的例子就是客户端bind端口，基本第二次和以后在运行，就告诉端口被占用，那时候不懂，就换个端口再来一次","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462140,"discussion_content":"这是有原因的，不需要每次都换端口，下面会降到具体解法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284592,"avatar":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","nickname":"星亦辰","note":"","ucode":"B0388FBFFDEE7E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4451,"discussion_content":"Socket 有个reuse 属性了解一下 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565428737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122122,"user_name":"星亦辰","can_delete":false,"product_type":"c1","uid":1284592,"ip_address":"","ucode":"B0388FBFFDEE7E","user_header":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","comment_is_top":false,"comment_ctime":1565307705,"is_pvip":true,"replies":[{"id":"45135","content":"非阻塞，是指I&#47;O模型，不是等待数据或连接，还是通过I&#47;O通知的方式来感知数据或连接。<br><br>后面的章节会详细讲述非阻塞模型","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575815,"ip_address":"","comment_id":122122,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860275001","product_id":100032701,"comment_content":"非阻塞，一般是把请求接收到的套接字传递给子进程或子线程，然后，主进程，主线程继续等待下一个请求。多数网络服务器都是这个路子吧","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462110,"discussion_content":"非阻塞，是指I/O模型，不是等待数据或连接，还是通过I/O通知的方式来感知数据或连接。\n\n后面的章节会详细讲述非阻塞模型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346013,"user_name":"gecko","can_delete":false,"product_type":"c1","uid":1198048,"ip_address":"","ucode":"2B7122536F1A0E","user_header":"https://static001.geekbang.org/account/avatar/00/12/47/e0/1ff26e99.jpg","comment_is_top":false,"comment_ctime":1652768169,"is_pvip":false,"replies":[{"id":"126590","content":"我也试了一下，确实如此，查了些资料，第三个packet的ack设置为1，一般表示&quot;我在等待第一个包，其他的都已经收到了&quot;。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1653809575,"ip_address":"","comment_id":346013,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652768169","product_id":100032701,"comment_content":"请教老师 我这里的情况 第三次握手的时候 不是k+1 <br>13:27:29.551943 IP 172.16.100.4.33550 &gt; 172.16.100.3.80: Flags [S], seq 2329538722, win 29200, options [mss 1460,sackOK,TS val 27284972 ecr 0,nop,wscale 7], length 0<br><br>13:27:29.551992 IP 172.16.100.3.80 &gt; 172.16.100.4.33550: Flags [S.], seq 2423752282, ack 2329538723, win 28960, options [mss 1460,sackOK,TS val 5204893 ecr 27284972,nop,wscale 7], length 0<br><br>13:27:29.552315 IP 172.16.100.4.33550 &gt; 172.16.100.3.80: Flags [.], ack 1, win 229, options [nop,nop,TS val 27284973 ecr 5204893], length 0<br><br><br>13:27:51.996548 IP 172.16.100.4.33550 &gt; 172.16.100.3.80: Flags [P.], seq 1:7, ack 1, win 229, options [nop,nop,TS val 27307417 ecr 5204893], length 6: HTTP<br>13:27:51.996667 IP 172.16.100.3.80","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574040,"discussion_content":"我也试了一下，确实如此，查了些资料，第三个packet的ack设置为1，一般表示&#34;我在等待第一个包，其他的都已经收到了&#34;。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653809575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336227,"user_name":"Garfield","can_delete":false,"product_type":"c1","uid":2069047,"ip_address":"","ucode":"6F946BB7CA7973","user_header":"https://static001.geekbang.org/account/avatar/00/1f/92/37/49f3982a.jpg","comment_is_top":false,"comment_ctime":1646017211,"is_pvip":false,"replies":[{"id":"123123","content":"根据错误返回码来区分啊，我不是很清楚你的问题。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1646487734,"ip_address":"","comment_id":336227,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646017211","product_id":100032701,"comment_content":"老师，请问客户端调用connect后返回如下的两种错误时如何区分？<br>1. 三次握手无法建立，客户端发出的 SYN 包没有任何响应，于是返回 TIMEOUT 错误。这种情况比较常见的原因是对应的服务端 IP 写错。<br>3. 客户发出的 SYN 包在网络上引起了&quot;destination unreachable&quot;，即目的不可达的错误。这种情况比较常见的原因是客户端和服务器端路由不通。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554609,"discussion_content":"根据错误返回码来区分啊，我不是很清楚你的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646487735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331999,"user_name":"淡C","can_delete":false,"product_type":"c1","uid":2696647,"ip_address":"","ucode":"046DE6F5301044","user_header":"https://static001.geekbang.org/account/avatar/00/29/25/c7/edd74dfb.jpg","comment_is_top":false,"comment_ctime":1642953491,"is_pvip":false,"replies":[{"id":"122025","content":"我愿意~~~","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1644729810,"ip_address":"","comment_id":331999,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642953491","product_id":100032701,"comment_content":"三次握手可以简单理解为<br>女：你愿意做我男朋友嘛<br>男：我愿意，你愿意做我女朋友嘛<br>女：我愿意","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550775,"discussion_content":"我愿意~~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644729811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331824,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1642786964,"is_pvip":false,"replies":[{"id":"121288","content":"三次握手的本质，是确立一条稳定的通信连接，序号只是这个连接的实现。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1642924366,"ip_address":"","comment_id":331824,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642786964","product_id":100032701,"comment_content":"三次握手的本质，就是需要确定一个准确的起始序号，tcp 的可靠传输，都是基于序号的","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547894,"discussion_content":"三次握手的本质，是确立一条稳定的通信连接，序号只是这个连接的实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642924366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327632,"user_name":"残天噬魂","can_delete":false,"product_type":"c1","uid":1506609,"ip_address":"","ucode":"A2AD8303A4518D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/q2HwchogzNiavKhIB4GfAxH6B88NhSoC7B7keVEUqiaP6JPokDUNJLYehocOyqYqrhA3iaxywyRXLYkYJjDUQESZw/132","comment_is_top":false,"comment_ctime":1640217736,"is_pvip":false,"replies":[{"id":"119413","content":"表示是下一个序列号。","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1640402318,"ip_address":"","comment_id":327632,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640217736","product_id":100032701,"comment_content":"序列号在ack中为什么要加一呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541482,"discussion_content":"表示是下一个序列号。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640402318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289317,"user_name":"Mark","can_delete":false,"product_type":"c1","uid":1350902,"ip_address":"","ucode":"D60E5269080BA9","user_header":"https://static001.geekbang.org/account/avatar/00/14/9c/f6/30dfdc9f.jpg","comment_is_top":false,"comment_ctime":1618975825,"is_pvip":false,"replies":[{"id":"105520","content":"一个是socket，一个是socket地址，应该不重复啊。各有各的作用。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1620223693,"ip_address":"","comment_id":289317,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618975825","product_id":100032701,"comment_content":"老师，创建socket时，已经指定domain了，bind的时候又关联套接字地址了，而套接字地址也指定domain了，这样不重复了吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518882,"discussion_content":"一个是socket，一个是socket地址，应该不重复啊。各有各的作用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620223693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279461,"user_name":"江山如画","can_delete":false,"product_type":"c1","uid":1188280,"ip_address":"","ucode":"BEB6228E6135B5","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/b8/aca814dd.jpg","comment_is_top":false,"comment_ctime":1613791861,"is_pvip":false,"replies":[{"id":"101997","content":"谢谢~","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1614516056,"ip_address":"","comment_id":279461,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613791861","product_id":100032701,"comment_content":"学习了！写的好棒 ！！","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515746,"discussion_content":"谢谢~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614516056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267916,"user_name":"金鑫","can_delete":false,"product_type":"c1","uid":1116257,"ip_address":"","ucode":"8AA30E8DD736FB","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/61/9e0f8b8d.jpg","comment_is_top":false,"comment_ctime":1607995826,"is_pvip":false,"replies":[{"id":"98873","content":"嗯，哭吧哭吧不是罪:)","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1610285895,"ip_address":"","comment_id":267916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607995826","product_id":100032701,"comment_content":"哭泣，这篇讲的超级清楚，之前模糊的点都踩到了。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511788,"discussion_content":"嗯，哭吧哭吧不是罪:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610285895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247718,"user_name":"我是管小亮","can_delete":false,"product_type":"c1","uid":2123892,"ip_address":"","ucode":"A1C624CF9E1CA3","user_header":"https://static001.geekbang.org/account/avatar/00/20/68/74/aea478ba.jpg","comment_is_top":false,"comment_ctime":1599806616,"is_pvip":false,"replies":[{"id":"92047","content":"赞你的回复。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1601869717,"ip_address":"","comment_id":247718,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599806616","product_id":100032701,"comment_content":"三次握手是为了防止<br>- 客户端的请求报文在网络中滞留，当客户端超时重传了请求报文，服务端建立连接，传输数据并释放连接之后，服务端又收到了客户端滞留的请求报文，建立连接一直等待客户端发送数据；<br>- 服务端对客户端的请求进行回应后（第二次握手后），就会理所应当的认为连接已经建立，而如果客户端没有收到服务端的回应呢？此时，客户端认为连接未建立，但是服务端会对建立的连保存资源，如果大量这种情况，服务端就会崩溃；<br>- 服务端给客户端发送同步以及确认的报文是可以合并的，四次会浪费时间；","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505478,"discussion_content":"赞你的回复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601869717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246970,"user_name":"hammond","can_delete":false,"product_type":"c1","uid":1196480,"ip_address":"","ucode":"AEEE63C5BB00C2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ereNicKErbtBVroMdvzl1EyXSuAGiaicM6iaumHdKmRQANH3J9UVzV12at2pJ5rraiaObNKpibSDqDfD3lg/132","comment_is_top":false,"comment_ctime":1599546017,"is_pvip":false,"replies":[{"id":"92040","content":"int sock = socket (PF_INET, SOCK_STREAM, 0)，是调用系统函数创建一个IPV4地址的socket，int类型是Linux定义文件描述字的类型。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1601867223,"ip_address":"","comment_id":246970,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599546017","product_id":100032701,"comment_content":"您好，文中代码的 int sock 是用来检测 socket 函数是否创建成功， 还是表示 字节流类型的 IPV4 socket<br>它为什么是一个 int 类型 ？ 期待您的回复<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505276,"discussion_content":"int sock = socket (PF_INET, SOCK_STREAM, 0)，是调用系统函数创建一个IPV4地址的socket，int类型是Linux定义文件描述字的类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601867223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235456,"user_name":"小仙女","can_delete":false,"product_type":"c1","uid":2069778,"ip_address":"","ucode":"543DD387C634D0","user_header":"https://static001.geekbang.org/account/avatar/00/1f/95/12/33028a3f.jpg","comment_is_top":false,"comment_ctime":1595043737,"is_pvip":false,"replies":[{"id":"87048","content":"我想你指的是listen函数里面backlog表示的队列，表示已完成的连接和未完成的连接，而accept函数则是返回已完成的连接队列里的队列头，即最早的连接。<br>所以，我们可以认为队列里存放的是连接数据，这个连接包括了客户端的地址、端口，服务端的地址和端口等数据，还包括了内核和这个连接相关联的数据结构。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1595165127,"ip_address":"","comment_id":235456,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595043737","product_id":100032701,"comment_content":"accept队列中里面存放的是什么? 四元组，还是客户端传来的数据","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501729,"discussion_content":"我想你指的是listen函数里面backlog表示的队列，表示已完成的连接和未完成的连接，而accept函数则是返回已完成的连接队列里的队列头，即最早的连接。\n所以，我们可以认为队列里存放的是连接数据，这个连接包括了客户端的地址、端口，服务端的地址和端口等数据，还包括了内核和这个连接相关联的数据结构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595165127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232709,"user_name":"Geek_63bb29","can_delete":false,"product_type":"c1","uid":2017041,"ip_address":"","ucode":"65C27FA7531722","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/5kv7IqibneNnMLqtWZQR5f1et8lJmoxiaU43Ttzz3zqW7QzBqMkib8GCtImKsms7PPbWmTB51xRnZQAnRPfA1wVaw/132","comment_is_top":false,"comment_ctime":1594093957,"is_pvip":false,"replies":[{"id":"86793","content":"你说的单进程服务器，应该是每次只能处理一个I&#47;O请求的服务器，这种情况下，服务器端必须建立一种机制来处理已经连接的请求，例如fork一个子进程，而新的连接则在accept函数中返回，客户端从connect函数中返回。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1594904269,"ip_address":"","comment_id":232709,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594093957","product_id":100032701,"comment_content":"老师，有一个疑惑是，对于单进程服务器，一个客户端与其已经建立连接了，另一个客户端在发起连接，此时，客户端执行到哪一步？服务端执行到哪一步？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500748,"discussion_content":"你说的单进程服务器，应该是每次只能处理一个I/O请求的服务器，这种情况下，服务器端必须建立一种机制来处理已经连接的请求，例如fork一个子进程，而新的连接则在accept函数中返回，客户端从connect函数中返回。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594904269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232703,"user_name":"Geek_63bb29","can_delete":false,"product_type":"c1","uid":2017041,"ip_address":"","ucode":"65C27FA7531722","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/5kv7IqibneNnMLqtWZQR5f1et8lJmoxiaU43Ttzz3zqW7QzBqMkib8GCtImKsms7PPbWmTB51xRnZQAnRPfA1wVaw/132","comment_is_top":false,"comment_ctime":1594092808,"is_pvip":false,"replies":[{"id":"86791","content":"你的打印函数和位置具体贴上来看看","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1594904041,"ip_address":"","comment_id":232703,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1594092808","product_id":100032701,"comment_content":"老师，你好，从文章中了解到服务端阻塞在accept，然后是三次握手，我在accept前加入打印语句，发现，没有打印任何信息，但是客户端的connect已经返回了，这是什么原因呀？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500746,"discussion_content":"你的打印函数和位置具体贴上来看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594904041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2017041,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/5kv7IqibneNnMLqtWZQR5f1et8lJmoxiaU43Ttzz3zqW7QzBqMkib8GCtImKsms7PPbWmTB51xRnZQAnRPfA1wVaw/132","nickname":"Geek_63bb29","note":"","ucode":"65C27FA7531722","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293804,"discussion_content":"谢谢老师回帖😜原因找到了，是printf是行缓冲，需要加\\n才会立即打😰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595671860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228929,"user_name":"Apprentice*卓","can_delete":false,"product_type":"c1","uid":2006896,"ip_address":"","ucode":"B78B68F963CE01","user_header":"https://static001.geekbang.org/account/avatar/00/1e/9f/70/0ef8a4d9.jpg","comment_is_top":false,"comment_ctime":1592840244,"is_pvip":false,"replies":[{"id":"84803","content":"编译的时候加-lrt, 看看是否可以解决你的问题","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1593173556,"ip_address":"","comment_id":228929,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592840244","product_id":100032701,"comment_content":"老师，您好<br>我将你的GitHub上的代码按要求编译后出现以下报错是怎么回事啊<br>[ 97%] Linking C executable ..&#47;bin&#47;aio01<br>CMakeFiles&#47;aio01.dir&#47;aio01.c.o: In function `main&#39;:<br>aio01.c:(.text+0x197): undefined reference to `aio_write&#39;<br>aio01.c:(.text+0x1ec): undefined reference to `aio_error&#39;<br>aio01.c:(.text+0x200): undefined reference to `aio_error&#39;<br>aio01.c:(.text+0x215): undefined reference to `aio_return&#39;<br>aio01.c:(.text+0x31f): undefined reference to `aio_read&#39;<br>aio01.c:(.text+0x36b): undefined reference to `aio_error&#39;<br>aio01.c:(.text+0x37f): undefined reference to `aio_return&#39;<br>collect2: error: ld returned 1 exit status<br>chap-30&#47;CMakeFiles&#47;aio01.dir&#47;build.make:95: recipe for target &#39;bin&#47;aio01&#39; failed<br>make[2]: *** [bin&#47;aio01] Error 1<br>CMakeFiles&#47;Makefile2:2286: recipe for target &#39;chap-30&#47;CMakeFiles&#47;aio01.dir&#47;all&#39; failed<br>make[1]: *** [chap-30&#47;CMakeFiles&#47;aio01.dir&#47;all] Error 2<br>Makefile:127: recipe for target &#39;all&#39; failed<br>make: *** [all] Error 2","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499262,"discussion_content":"编译的时候加-lrt, 看看是否可以解决你的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593173556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223499,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1591103255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591103255","product_id":100032701,"comment_content":"1. 两点之间能够双向通信的必要条件是双方都是可收可发的<br>2. 确保双方都是可收可发至少需要三次通信","like_count":0},{"had_liked":false,"id":218513,"user_name":"Geek_stonehan","can_delete":false,"product_type":"c1","uid":2007926,"ip_address":"","ucode":"1745458808B5CB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKfMp8gO837ge2ibJJzxwgTPxNC02tazEeKCGzgGmicZ6ZAuia9ydC0hFNl5HwjWGjMlOFbuczQOCHPQ/132","comment_is_top":false,"comment_ctime":1589812216,"is_pvip":false,"replies":[{"id":"80984","content":"注释告诉了一切 :)<br>&#47;*<br> * Internet address (a structure for historical reasons)<br> *&#47;<br>struct in_addr {<br>\tin_addr_t s_addr;<br>};","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1589977758,"ip_address":"","comment_id":218513,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589812216","product_id":100032701,"comment_content":"老师你好，有个问题想请教一下，为什么sockaddr_in里面的sin_addr要写成一个结构体而不直接写成 一个变量unit32_t s_addr呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495493,"discussion_content":"注释告诉了一切 :)\n/*\n * Internet address (a structure for historical reasons)\n */\nstruct in_addr {\n\tin_addr_t s_addr;\n};","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589977758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214828,"user_name":"lisiur","can_delete":false,"product_type":"c1","uid":1201350,"ip_address":"","ucode":"CEB2DBCE29CAA7","user_header":"https://static001.geekbang.org/account/avatar/00/12/54/c6/c2481790.jpg","comment_is_top":false,"comment_ctime":1588826606,"is_pvip":false,"replies":[{"id":"79835","content":"tcp协议呗 ","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1589099767,"ip_address":"","comment_id":214828,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1588826606","product_id":100032701,"comment_content":"有个疑惑：tcp在三次握手的时候发送的报文是通过什么协议发送的？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494215,"discussion_content":"tcp协议呗 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589099767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331313,"discussion_content":"tcp 协议中规定了很多不同的标识字段，根据标识字段设置的不同，语义也不同。\ntcp的3次握手 四次挥手 以及其他操作都是对应标志位设置的结果","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606826845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1529249,"avatar":"https://static001.geekbang.org/account/avatar/00/17/55/a1/e77b9612.jpg","nickname":"峪五","note":"","ucode":"DCF2DC959D0CD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286317,"discussion_content":"tcp + ip ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593133463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209320,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1203803,"ip_address":"","ucode":"B8FCB5FD947E88","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/5b/c7e9fa5f.jpg","comment_is_top":false,"comment_ctime":1587534916,"is_pvip":false,"replies":[{"id":"78411","content":"这段话的意思是一段报文发送出去后，原先的连接已经不存在。比如把server端的进程kill掉，这样后面的报文到达之后，发现原来的连接不在了，就会有RST报错。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587803903,"ip_address":"","comment_id":209320,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587534916","product_id":100032701,"comment_content":"”TCP 接收到一个根本不存在的连接上的分节“。什么意思？收到一个不属于该连接的报文？序列号有误？<br>如果这种情况会发送rst的话，会被恶意ddos吧。比如伪造源ip发请求，会导致导致服务端大量连接被恶意断开。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492771,"discussion_content":"这段话的意思是一段报文发送出去后，原先的连接已经不存在。比如把server端的进程kill掉，这样后面的报文到达之后，发现原来的连接不在了，就会有RST报错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587803903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208154,"user_name":"刺客","can_delete":false,"product_type":"c1","uid":1098916,"ip_address":"","ucode":"607ABD2F2B5898","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/a4/b9b12d71.jpg","comment_is_top":false,"comment_ctime":1587285262,"is_pvip":true,"replies":[{"id":"77722","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587304550,"ip_address":"","comment_id":208154,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587285262","product_id":100032701,"comment_content":"结合02中的网络模型，根据本节的知识点，终于理解了TCP三次握手<br><br>具体过程<br>1、客户端的协议栈向服务器端发送SYN包，并告诉服务器端当前发送序列号j，客户端进入SYNC_SENT状态<br>2、服务端的协议收到这个包后，和客户端进行ACK应答，应答值为j+1，表示对SYN包j的确认，同时服务器也会发送一个SYN包，告诉客户端当前发送序列号为K，服务端进入SYNC_RECVD状态<br>3、客户端协议收到ACK之后，使得应用从connect调用返回，表示客户端到服务器端的单向连接建立成功，客户端状态为ESTABLISHED,同时客户端协议栈也会对服务端SYN包进行应答，应答数据为k+1<br>4、应答包到达服务器端后，服务器端协议栈使得accept阻塞调用返回，这个时候服务器端到客户端单向连接也建立成功，服务器端也进入ESTABLISHED状态<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492359,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587304550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198922,"user_name":"⁶₆⁶₆⁶₆","can_delete":false,"product_type":"c1","uid":1940453,"ip_address":"","ucode":"25AE3F77318541","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9b/e5/bd0be5c3.jpg","comment_is_top":false,"comment_ctime":1585473553,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585473553","product_id":100032701,"comment_content":"TCP三次握手的目的就是在不可靠的信道上实现数据的可靠传输","like_count":0},{"had_liked":false,"id":198887,"user_name":"徐衡","can_delete":false,"product_type":"c1","uid":1881664,"ip_address":"","ucode":"06EBCB2F507603","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b6/40/6060d233.jpg","comment_is_top":false,"comment_ctime":1585471832,"is_pvip":false,"replies":[{"id":"74761","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1585484942,"ip_address":"","comment_id":198887,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1585471832","product_id":100032701,"comment_content":"为什么是四次挥手？<br>因为在关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了（还能接收数据），而自己也未必全部数据都发送给对方了，所以可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489761,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585484942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2184325,"avatar":"https://static001.geekbang.org/account/avatar/00/21/54/85/ab5148ce.jpg","nickname":"duckman","note":"","ucode":"0184C26C4B6C1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331314,"discussion_content":"一个TCP连接表示的是端对端的通信 (两端 2)\n一个TCP连接的两端都有收发消息的功能(收发 1+1=2) \n\nTCP需要四次挥手表示依次回收或者关闭两端的收发能力 2 * 2 = 4.\n\n如果两端同时要关闭 就可以减少到3次。\n\n1. 我要关闭自己的发送能力，但还可以接受 (同时收到对方关闭发送能力的消息)\n2.确认该消息 同时关闭自己的接受功能。\n3.等待2 * MSL 关闭","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606827383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189844,"user_name":"Geek_wannaBgeek","can_delete":false,"product_type":"c1","uid":1643435,"ip_address":"","ucode":"6F42F4181981C3","user_header":"https://static001.geekbang.org/account/avatar/00/19/13/ab/d73e25de.jpg","comment_is_top":false,"comment_ctime":1584576635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584576635","product_id":100032701,"comment_content":"打卡打卡","like_count":0},{"had_liked":false,"id":187408,"user_name":"zxj_gk","can_delete":false,"product_type":"c1","uid":1067763,"ip_address":"","ucode":"C5755160B26C18","user_header":"https://static001.geekbang.org/account/avatar/00/10/4a/f3/3ca6ed87.jpg","comment_is_top":false,"comment_ctime":1584103587,"is_pvip":false,"replies":[{"id":"72370","content":"https:&#47;&#47;github.com&#47;froghui&#47;yolanda","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1584172778,"ip_address":"","comment_id":187408,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584103587","product_id":100032701,"comment_content":"有没有 可以完整可运行的代码 git地址？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487100,"discussion_content":"https://github.com/froghui/yolanda","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584172778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187404,"user_name":"zxj_gk","can_delete":false,"product_type":"c1","uid":1067763,"ip_address":"","ucode":"C5755160B26C18","user_header":"https://static001.geekbang.org/account/avatar/00/10/4a/f3/3ca6ed87.jpg","comment_is_top":false,"comment_ctime":1584102979,"is_pvip":false,"replies":[{"id":"72371","content":"那是两个不同的连接，每个连接都是可以双向通信的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1584172819,"ip_address":"","comment_id":187404,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584102979","product_id":100032701,"comment_content":"三次握手 是客户端主动请求链接服务器端，如果双方同时请求链接对方呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487097,"discussion_content":"那是两个不同的连接，每个连接都是可以双向通信的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584172819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182781,"user_name":"JDY","can_delete":false,"product_type":"c1","uid":1848474,"ip_address":"","ucode":"4B6F55332BE6DC","user_header":"https://static001.geekbang.org/account/avatar/00/1c/34/9a/1587bc6f.jpg","comment_is_top":false,"comment_ctime":1582865107,"is_pvip":false,"replies":[{"id":"71028","content":"accept函数调用之后，客户端和服务端三次握手成功，返回一个代表客户端和服务端连接的套接字，这个套接字即使已连接套接字。之后服务端和客户端的数据传输都是通过这个已连接套接字来完成。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583052083,"ip_address":"","comment_id":182781,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582865107","product_id":100032701,"comment_content":"这里一定要注意有两个套接字描述字，第一个是监听套接字描述字 listensockfd，它是作为输入参数存在的；第二个是返回的已连接套接字描述字 ，accept函数返回的第二个套接字我不是很清楚，麻烦老师帮忙在指点一下，它在哪体现的？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485448,"discussion_content":"accept函数调用之后，客户端和服务端三次握手成功，返回一个代表客户端和服务端连接的套接字，这个套接字即使已连接套接字。之后服务端和客户端的数据传输都是通过这个已连接套接字来完成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583052083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169792,"user_name":"愚人","can_delete":false,"product_type":"c1","uid":1355952,"ip_address":"","ucode":"40DE41849EF9EA","user_header":"https://static001.geekbang.org/account/avatar/00/14/b0/b0/30b29949.jpg","comment_is_top":false,"comment_ctime":1578447369,"is_pvip":false,"replies":[{"id":"68068","content":"1. 我认为是listen会初始化一个连接资源池；<br>2.是的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1580630756,"ip_address":"","comment_id":169792,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578447369","product_id":100032701,"comment_content":"TCP状态机中，第一阶段的三次握手涉及到了server socket的listen和accept调用；第二&#47;三阶段涉及到session socket的read&#47;write&#47;close等调用。<br>问题1: TCP连接的server端实例是不是在server socket的accept才会被创建？还是在server socket的listen调用中就根据backlog参数初始化一个TCP连接资源池（池中连接初始状态为LISTEN）？<br>问题2: TCP连接的server端是不是在accept系统调用中完成从LISTEN到SYN-RCVD（收到SYN），再到ESTABLISHED（收到ACK）的变迁过程？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480721,"discussion_content":"1. 我认为是listen会初始化一个连接资源池；\n2.是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580630756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160704,"user_name":"云师兄","can_delete":false,"product_type":"c1","uid":1010459,"ip_address":"","ucode":"4475AF1598FBFD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/1b/4b397b80.jpg","comment_is_top":false,"comment_ctime":1576024218,"is_pvip":false,"replies":[{"id":"63942","content":"端口如何开发，而不开启监听，这是怎么做到的呢？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1577605577,"ip_address":"","comment_id":160704,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576024218","product_id":100032701,"comment_content":"请问老师，如果服务端的端口开放但是没有监听的应用，客户端sync包到达后都是返回rst吗","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477457,"discussion_content":"端口如何开发，而不开启监听，这是怎么做到的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577605577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158676,"user_name":"Geek_68d3d2","can_delete":false,"product_type":"c1","uid":1674369,"ip_address":"","ucode":"EBD6D881AA7A74","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","comment_is_top":false,"comment_ctime":1575431025,"is_pvip":false,"replies":[{"id":"61030","content":"创建一个原始套接字SOCK_RAW。第三个参数（协议）通常不为0，一般为形如IPPROTO_xxx的某个常值。<br><br>下面是一个例子：<br><br>int sockfd;<br>sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_IGMP);","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575799525,"ip_address":"","comment_id":158676,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575431025","product_id":100032701,"comment_content":"当套接字为SOCK_RAW的时候是不是必须要指定protocol的值？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476803,"discussion_content":"创建一个原始套接字SOCK_RAW。第三个参数（协议）通常不为0，一般为形如IPPROTO_xxx的某个常值。\n\n下面是一个例子：\n\nint sockfd;\nsockfd = socket(AF_INET, SOCK_RAW, IPPROTO_IGMP);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575799525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152807,"user_name":"Eleven","can_delete":false,"product_type":"c1","uid":1168452,"ip_address":"","ucode":"FB4A0C8CA732BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","comment_is_top":false,"comment_ctime":1574082857,"is_pvip":false,"replies":[{"id":"59327","content":"哈哈，可以的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1574498005,"ip_address":"","comment_id":152807,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574082857","product_id":100032701,"comment_content":"A 先对 B 说：“喂，你在么？我在的，我的口令是 j。”B 收到之后大声回答：“我收到你的口令 j 并准备好了，你准备好了吗？我的口令是 k。”A 收到之后也大声回答：“我收到你的口令 k 并准备好了，我们开始吧。” 老师我觉得这里应该再补充一句，B最后收到后说：“好的，我们开始吧！”","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474947,"discussion_content":"哈哈，可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574498005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141117,"user_name":"TM","can_delete":false,"product_type":"c1","uid":1691214,"ip_address":"","ucode":"9E03B9D177356A","user_header":"https://static001.geekbang.org/account/avatar/00/19/ce/4e/17fd7195.jpg","comment_is_top":false,"comment_ctime":1571117074,"is_pvip":false,"replies":[{"id":"55092","content":"没有上下文，很难给出详细的判断。operation timeout我理解应该是应用程序自己给出的错误信息，不是内核的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571453812,"ip_address":"","comment_id":141117,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571117074","product_id":100032701,"comment_content":"有个问题想咨询下老师。把 redis 的 backlog 设置为 1，然后在 redis 里 debug sleep 70，然后发起两个请求，一个成功连接，另一个会出 opration timeout ，而不是 connect timeout，然后大概是 26 s ，反复试了几次、都是26s左右的时间。很奇怪这个报错是内核爆出来的吗？为什么是26s这个时间呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470673,"discussion_content":"没有上下文，很难给出详细的判断。operation timeout我理解应该是应用程序自己给出的错误信息，不是内核的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571453812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1691214,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ce/4e/17fd7195.jpg","nickname":"TM","note":"","ucode":"9E03B9D177356A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34562,"discussion_content":"老师要是看到了 还麻烦回复下 多谢哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571206187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131124,"user_name":"JasonZhi","can_delete":false,"product_type":"c1","uid":1282818,"ip_address":"","ucode":"6C23DCD592636D","user_header":"https://static001.geekbang.org/account/avatar/00/13/93/02/fcab58d1.jpg","comment_is_top":false,"comment_ctime":1567647526,"is_pvip":true,"replies":[{"id":"50825","content":"路由不同是通过ICMP包来通知的，并不是SYN包，一个是TCP握手协议，一个是故障排查协议。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568195327,"ip_address":"","comment_id":131124,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567647526","product_id":100032701,"comment_content":"老师你好，没有响应SYN包和路由不通的错误怎么区分？在我看来两种情况都会没有响应SYN包？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466297,"discussion_content":"路由不同是通过ICMP包来通知的，并不是SYN包，一个是TCP握手协议，一个是故障排查协议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568195327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127419,"user_name":"张立华","can_delete":false,"product_type":"c1","uid":1231713,"ip_address":"","ucode":"173B938DD9478A","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/61/b62d8a3b.jpg","comment_is_top":false,"comment_ctime":1566704673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566704673","product_id":100032701,"comment_content":"设置为非阻塞   <br>int flags = fcntl(socket, F_GETFL, 0);<br>fcntl(socket, F_SETFL, O_NONBLOCK | flags);","like_count":0},{"had_liked":false,"id":126709,"user_name":"Edison","can_delete":false,"product_type":"c1","uid":1135701,"ip_address":"","ucode":"734A561F363720","user_header":"https://static001.geekbang.org/account/avatar/00/11/54/55/613ddc42.jpg","comment_is_top":false,"comment_ctime":1566455365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566455365","product_id":100032701,"comment_content":"非阻塞地调用套接字，Linux平台下，可以通过fcntl()或者ioctl()给socket添加非阻塞标志；具体方法如下：<br>  int OldSocketFlag = fcntl(socket, F_GETFL, 0);<br>  int NewSocketFlag = OldSocketFlag | O_NONBLOCK;<br>  fcntl(socket, F_SETFL, NewSoketFlag);<br>  非阻塞的socket调用的适用场景，比如：将Reactor模式应用于Epoll模型中，将客户端套接字设置为非阻塞模式，如果对端的TCP窗口太小导致数据发送失败，那么当前线程会去注册一个Epoll例程，监听写就绪事件；当有TCP窗口资源可用时，再次向对端写数据。","like_count":0},{"had_liked":false,"id":126413,"user_name":"灬路上","can_delete":false,"product_type":"c1","uid":1335108,"ip_address":"","ucode":"98C603307CA374","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaYibsvL94uobwgXsHVUnFh0AzibQAmWQicibytkmIEvmFhAPBpj8lXnjmYcJySqgDPoIeLAAicQFrIJVS9uNZbD7gmw/132","comment_is_top":false,"comment_ctime":1566384514,"is_pvip":false,"replies":[{"id":"47902","content":"后面章节讲到了","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567003674,"ip_address":"","comment_id":126413,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566384514","product_id":100032701,"comment_content":"老师四次分手怎么说？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463978,"discussion_content":"后面章节讲到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567003674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124448,"user_name":"小宽宽与他的白日梦","can_delete":false,"product_type":"c1","uid":1618781,"ip_address":"","ucode":"C16F595EE4E11A","user_header":"https://static001.geekbang.org/account/avatar/00/18/b3/5d/a97e5045.jpg","comment_is_top":false,"comment_ctime":1565885922,"is_pvip":false,"replies":[{"id":"45943","content":"不需要了","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1566130097,"ip_address":"","comment_id":124448,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1565885922","product_id":100032701,"comment_content":"老师我请教一个问题，tcp连接的时候有三次握手，那发送喝接收socket消息呢？每条消息都有三次握手吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463180,"discussion_content":"不需要了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566130097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1618781,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b3/5d/a97e5045.jpg","nickname":"小宽宽与他的白日梦","note":"","ucode":"C16F595EE4E11A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":11580,"discussion_content":"可是老师，如果收发消息没有三次握手，tcp怎么能保证消息正常到达呢？不就是说会在协议层出现丢消息的问题吗？不就是和udp一样了么？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568392668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124097,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1565825970,"is_pvip":false,"replies":[{"id":"45947","content":"是这个道理","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1566130223,"ip_address":"","comment_id":124097,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565825970","product_id":100032701,"comment_content":"终于明白为什么tcp要三次握手了，而不是2次或4次。因为tcp要保证双向通道建立，三次是保证双方都收到对方应答的最少次数。第一次由一方发起请求，第二次应答方收到请求后应答，第三次应答方收到请求方发送的收到应答回执。少一次不行，多一次多余。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463010,"discussion_content":"是这个道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566130223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123984,"user_name":"白闹","can_delete":false,"product_type":"c1","uid":1374384,"ip_address":"","ucode":"AF321E099DB942","user_header":"https://wx.qlogo.cn/mmopen/vi_32/939UMupJ7ZK5KicphfW7HnPfmOsMxdll2LibR0aSIhldKdjaJsiba4akvLibwFtVxWSpb4fUTAK2Nkib8UQgKE5E8GA/132","comment_is_top":false,"comment_ctime":1565788121,"is_pvip":false,"replies":[{"id":"45950","content":"同步报文，确认报文，两种特殊格式的TCP报文","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1566130311,"ip_address":"","comment_id":123984,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565788121","product_id":100032701,"comment_content":"什么是syn和ack？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462940,"discussion_content":"同步报文，确认报文，两种特殊格式的TCP报文","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566130311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123654,"user_name":"井底之蛙","can_delete":false,"product_type":"c1","uid":1624505,"ip_address":"","ucode":"DAEE283B210B23","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/b9/aff32d3c.jpg","comment_is_top":false,"comment_ctime":1565741150,"is_pvip":false,"replies":[{"id":"45941","content":"答疑篇统一回复","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1566130008,"ip_address":"","comment_id":123654,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565741150","product_id":100032701,"comment_content":"老师，想在ubantu下练习套接字编程，需要装哪些软件？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462759,"discussion_content":"答疑篇统一回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566130008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123219,"user_name":"啦啦的小猪","can_delete":false,"product_type":"c1","uid":1134766,"ip_address":"","ucode":"13352B41450925","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/ae/11dad6f3.jpg","comment_is_top":false,"comment_ctime":1565628986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565628986","product_id":100032701,"comment_content":"关于第一道题我的想法是   感觉epoll是非阻塞的","like_count":0},{"had_liked":false,"id":123169,"user_name":"wusiration","can_delete":false,"product_type":"c1","uid":1104438,"ip_address":"","ucode":"A9403377054F1E","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/36/ac0ff6a7.jpg","comment_is_top":false,"comment_ctime":1565619429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565619429","product_id":100032701,"comment_content":"问题1：使用fcntl函数设置套接字的属性fcntl(fd, F_SETFL, flags)；普通的套接字一次只能服务一个客户端，若任务耗时过长，会阻塞网络流量，非阻塞套接字主要用于高并发场景。<br>问题2：可以调用bind函数，会绑定固定端口，有时候会引起端口冲突","like_count":0},{"had_liked":false,"id":122995,"user_name":"nil","can_delete":false,"product_type":"c1","uid":1507193,"ip_address":"","ucode":"0F5D298C1CBB74","user_header":"https://static001.geekbang.org/account/avatar/00/16/ff/79/3b38c9e1.jpg","comment_is_top":false,"comment_ctime":1565584747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565584747","product_id":100032701,"comment_content":"谈下自己关于三次握手的理解，三次握手主要解决的是如何在信道不可靠的情况下建立双向连接。那为何偏偏是三次握手，两次不行吗？四次不行吗？其实三次以上都是可以的，但是多于三次的握手属于非必要操作。两次是无法保证双向通信的建立，三个握手中的第二次通信既是对第一次通信的回应，又是为了第三次握手发起请求，起到承上启下的作用。三次握手成功之后，通信双方的信道基本可靠，之后就要靠tcp协议保证整个传输的可靠性。","like_count":0},{"had_liked":false,"id":122896,"user_name":"平少","can_delete":false,"product_type":"c1","uid":1218742,"ip_address":"","ucode":"EC76D35D0C2CBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/b6/0c0ed771.jpg","comment_is_top":false,"comment_ctime":1565571516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565571516","product_id":100032701,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":122867,"user_name":"有点意思","can_delete":false,"product_type":"c1","uid":1399454,"ip_address":"","ucode":"67F55604E8A548","user_header":"https://static001.geekbang.org/account/avatar/00/15/5a/9e/8f2ccc1d.jpg","comment_is_top":false,"comment_ctime":1565564356,"is_pvip":true,"replies":[{"id":"45178","content":"不需要，读和写是两个不同的缓冲区。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565579396,"ip_address":"","comment_id":122867,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565564356","product_id":100032701,"comment_content":"老师你好<br>我看有的书上 做客户端编程的时候  建立socket连接后会启用两个线程 一个线程用来读 一个线程用来写 现在有点疑问 一个socket这样给两个线程用 不需要加锁么？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462434,"discussion_content":"不需要，读和写是两个不同的缓冲区。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565579396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122771,"user_name":"初见","can_delete":false,"product_type":"c1","uid":1101405,"ip_address":"","ucode":"06D7952CED37D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/5d/5297717a.jpg","comment_is_top":false,"comment_ctime":1565517273,"is_pvip":false,"replies":[{"id":"45175","content":"不能完全计算出来，比如变长地址，不知道len，是没有办法知道addr确切值的边界的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565579256,"ip_address":"","comment_id":122771,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1565517273","product_id":100032701,"comment_content":"老师您好，一个小问题~ <br><br>bind 的第三个参数 len，函数本身是可以根据第二个字段 addr 计算出来，为什么每次非要让调用者多此一举算完传进来呢？<br><br>这个 len 字段，设计上是不是有点冗余了？？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462397,"discussion_content":"不能完全计算出来，比如变长地址，不知道len，是没有办法知道addr确切值的边界的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565579256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233780,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d3/74/578b169d.jpg","nickname":"Yuuuuu","note":"","ucode":"64FD04761D2111","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4555,"discussion_content":"传的是指针，无法获取到原始数据大小。就像我们以数组作为参数时，我们总要传递数组的长度一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565540275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122752,"user_name":"有点意思","can_delete":false,"product_type":"c1","uid":1399454,"ip_address":"","ucode":"67F55604E8A548","user_header":"https://static001.geekbang.org/account/avatar/00/15/5a/9e/8f2ccc1d.jpg","comment_is_top":false,"comment_ctime":1565512017,"is_pvip":true,"replies":[{"id":"45160","content":"往下看，很快讲到这部分内容。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565577291,"ip_address":"","comment_id":122752,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565512017","product_id":100032701,"comment_content":"老师好<br>现在在做c++网络编程这块 linux和windows下都要用<br>现在遇到一个问题 客户端和服务端的心跳检测怎么做？<br>用keeplive好么？还有其他更好的方案么？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462388,"discussion_content":"往下看，很快讲到这部分内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565577291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122719,"user_name":"星亦辰","can_delete":false,"product_type":"c1","uid":1284592,"ip_address":"","ucode":"B0388FBFFDEE7E","user_header":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","comment_is_top":false,"comment_ctime":1565503529,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1565503529","product_id":100032701,"comment_content":"https:&#47;&#47;github.com&#47;v1xingyue&#47;geeknetwork&#47;tree&#47;master&#47;simpletcp ","like_count":0},{"had_liked":false,"id":122690,"user_name":"wang","can_delete":false,"product_type":"c1","uid":1270262,"ip_address":"","ucode":"C1A3BCACCB188E","user_header":"https://static001.geekbang.org/account/avatar/00/13/61/f6/1d6b548a.jpg","comment_is_top":false,"comment_ctime":1565492067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565492067","product_id":100032701,"comment_content":"1. 非阻塞调用，意思也就是在服务器进程在accept 或者 connect 函数中直接return，而没有一定要这次连接应答成功然后才能return<br>2. 客户端当然可以使用bind 函数，显示让内核不随机分配端口号","like_count":0},{"had_liked":false,"id":122649,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1565451339,"is_pvip":true,"replies":[{"id":"45155","content":"你可以理解通配地址为*，意思就是这台机器上的所有IP地址都可以归我管。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576999,"ip_address":"","comment_id":122649,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565451339","product_id":100032701,"comment_content":"老师通配地址那块有点不理解，单独设置ip地址的话，是需要提前知道该应用程序将部署到那台服务器上，而通配地址不需要那样是因为可以自动识别到服务器上每个网卡的ip地址吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462343,"discussion_content":"你可以理解通配地址为*，意思就是这台机器上的所有IP地址都可以归我管。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122633,"user_name":"星亦辰","can_delete":false,"product_type":"c1","uid":1284592,"ip_address":"","ucode":"B0388FBFFDEE7E","user_header":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","comment_is_top":false,"comment_ctime":1565447441,"is_pvip":true,"replies":[{"id":"45156","content":"localhost配置了别名没？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565577079,"ip_address":"","comment_id":122633,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565447441","product_id":100032701,"comment_content":"发现一个问题。<br><br>我的server 端bind 的是0.0.0.0 的地址 。<br>但是，我的client 连接 localhost 不能连接到，但是 连接 127.0.0.1 可以，这是为什么呢？ ","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462336,"discussion_content":"localhost配置了别名没？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565577079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122524,"user_name":"insist","can_delete":false,"product_type":"c1","uid":1054536,"ip_address":"","ucode":"1EE2800A900BA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/48/3ab39c86.jpg","comment_is_top":false,"comment_ctime":1565415631,"is_pvip":false,"replies":[{"id":"45169","content":"是响应服务器端的SYN包，ACK包不需要ACK的，否则下去没完没了","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565578695,"ip_address":"","comment_id":122524,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565415631","product_id":100032701,"comment_content":"1、阻塞调用，线程需要在一直等待对方数据的到来，没法去干别的事。非阻塞，线程在调用后，可以去干别的事，等到数据到来了，通知线程回来工作。<br>2、客户端connect之后可以调用bind，但并不是一定需要，如果没有主动调用bind，操作系统内核会为分配一个端口。<br>另外，tcp三次握手的第3步是不是有误，客户端应该是响应ACK包，而不是SYN包。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462289,"discussion_content":"是响应服务器端的SYN包，ACK包不需要ACK的，否则下去没完没了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565578695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122506,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1565409371,"is_pvip":false,"replies":[{"id":"45165","content":"Java对socket进行了一层封装，这里 Socket类和ServerSocket类分别用来创建客户端和服务端socket，借助的实现都是SocketImpl。你可以这样理解，Java在基本的socket基础上，实现了make_server_socket和make_client_socket两个不同的抽象，把本来每次需要重复做的事情都收到不同的类中了。<br><br>这里的Socket和ServerSocket可以理解成阻塞式的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565577989,"ip_address":"","comment_id":122506,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565409371","product_id":100032701,"comment_content":"老师，我先把我看到的贴出来：<br><br>public abstract class SocketImpl implements SocketOptions {<br>    &#47;**<br>     * The actual Socket object.<br>     *&#47;<br>    Socket socket = null;<br>    ServerSocket serverSocket = null;<br><br>    &#47;**<br>     * The file descriptor object for this socket.<br>     *&#47;<br>    protected FileDescriptor fd;<br><br>    &#47;**<br>     * The IP address of the remote end of this socket.<br>     *&#47;<br>    protected InetAddress address;<br><br>    &#47;**<br>     * The port number on the remote host to which this socket is connected.<br>     *&#47;<br>    protected int port;<br><br>    &#47;**<br>     * The local port number to which this socket is connected.<br>     *&#47;<br>    protected int localport;<br>}<br><br>老师，原谅我是个差生。 <br><br>看完了您写的第一讲,阻塞式的网络连接。 <br><br>我晓得这是基础，但是很重要。<br><br>我想去看看 java.net.Socket  与 java.net.ServerSocket的区别，<br><br>发现 socket 和 serverSocket 在设计上 好像一点关系都有啊？<br><br>都是通过 java.net.SocketImpl 来实现<br><br>java.net.SocketImpl#bind<br><br>java.net.SocketImpl#connect(java.net.InetAddress, int)<br><br>java.net.SocketImpl#listen<br><br>java.net.SocketImpl#accept<br><br>java.net.SocketImpl#close<br><br>这一系列的系统调用，是这样子嘛？<br><br>另外，这两个  java.net.Socket  与 java.net.ServerSocket 都是在java.net包下，却是阻塞式的。是这样子嘛？<br><br>恳请老师回答。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462281,"discussion_content":"Java对socket进行了一层封装，这里 Socket类和ServerSocket类分别用来创建客户端和服务端socket，借助的实现都是SocketImpl。你可以这样理解，Java在基本的socket基础上，实现了make_server_socket和make_client_socket两个不同的抽象，把本来每次需要重复做的事情都收到不同的类中了。\n\n这里的Socket和ServerSocket可以理解成阻塞式的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565577989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122497,"user_name":"Alery","can_delete":false,"product_type":"c1","uid":1156557,"ip_address":"","ucode":"08F3F49181E67B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/cd/3aff5d57.jpg","comment_is_top":false,"comment_ctime":1565408268,"is_pvip":false,"replies":[{"id":"45164","content":"服务端记下四元组 &lt;客户端ip,客户端port, 服务端ip，服务端port&gt;，把这个四元组和服务器端建立的connection套接字关联，这样就可以直接查询得到了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565577584,"ip_address":"","comment_id":122497,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1565408268","product_id":100032701,"comment_content":"一直有一个疑惑，客户端通过指定服务端的ip+port(10.10.88.99:80)并创建一个socket去connect服务端，服务端接受到客户端的请求并创建一个新的连接socket去和客户端进行通信，那客户端通过之前创建的客户端socket给服务端发送信息时还是会往ip+port(10.10.88.99:80)上发送，我的问题是服务端如何得知当前发送消息过来的客户端是与之前创建的连接socket通信？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462277,"discussion_content":"服务端记下四元组 &amp;lt;客户端ip,客户端port, 服务端ip，服务端port&amp;gt;，把这个四元组和服务器端建立的connection套接字关联，这样就可以直接查询得到了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565577584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1156557,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a5/cd/3aff5d57.jpg","nickname":"Alery","note":"","ucode":"08F3F49181E67B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4422,"discussion_content":"还是说服务端监听socket收到一个客户端连接请求，创建一个新的连接socket与客户端通信，这个新的连接socket会监听一个与监听socket不同的端口号？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565408479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122495,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1221628,"ip_address":"","ucode":"5E2B85252DABF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/fc/379387a4.jpg","comment_is_top":false,"comment_ctime":1565408237,"is_pvip":false,"replies":[{"id":"45162","content":"SOCK_RAW使用在是需要对网络报文进行直接解析的场景，针对每次ACK浪费带宽的现象TCP实现是优化实现的，比如延迟ACK，不管怎么样都需要ACK的，否则就没办法达到可靠的投递了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565577450,"ip_address":"","comment_id":122495,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565408237","product_id":100032701,"comment_content":"读了这篇文章加上自己用以上函数写的代码实践，有几个疑问：<br>1. 创建socket的时候，那个原始套接字选项SOCK_RAW是个什么东东？哪个地方使用呢？<br>2. 我在网上找了几个简单的demo，也是以上几个函数来实现简单的服务端程序，然后用wireshark来抓包，发现每一次客户端发送的消息（PSH+ACK指令），服务端都会回送一个ACK指令，也就是一次发一次确认的模式，我想问是不是TCP&#47;IP协议针对每一个消息，接收端都会进行一次ACK确认（代表我收到了）？如果是，个人感觉好浪费流量。<br>另外对于老师的提问：<br>客户端发起 connect 调用之前，应该是可以调用 bind 函数的；服务端用bind函数确认ip地址和端口，一般说来ip地址就是默认，端口是一个固定端口，如80；如果客户端去bind的话，应该用处也是差不多的，ip地址是通常是本机ip，指定某个客户端端口（但通常不需要，操作系统会自己分配）。<br>关于非阻塞套接字，我感觉和之前听过的多路复用这个概念应该差不多，非阻塞，所有的方法调用都是调用即返回，不会阻塞线程；底层操作系统会维护socket的连接，当某些socket有读、写等操作的时候，操作系统就将socket发给上层程序；如果是阻塞，一旦有socket连接，操作系统就把socket扔给上层程序，上层程序如果想得到socket的内容，就去read，结果可能socket的消息还没有到，然后就阻塞了，线程也停滞。总之，非阻塞会使用更少的线程来服务，效率高；场景的话应该就是所谓的客户端较多，但是同一时间的消息量不大的那种。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462276,"discussion_content":"SOCK_RAW使用在是需要对网络报文进行直接解析的场景，针对每次ACK浪费带宽的现象TCP实现是优化实现的，比如延迟ACK，不管怎么样都需要ACK的，否则就没办法达到可靠的投递了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565577450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122427,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1565364107,"is_pvip":false,"replies":[{"id":"45188","content":"未完成连接是指某个客户已经发出部分TCP连接请求的报文，而服务器还在等待完成TCP三次握手的这部分连接","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565581725,"ip_address":"","comment_id":122427,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565364107","product_id":100032701,"comment_content":"listen函数的第二个参数backlog表示未完成连接队列的大小。所谓&quot;未完成连接&quot;是什么含义？是尚未完全建立的连接？还是尚未关闭的连接？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462246,"discussion_content":"未完成连接是指某个客户已经发出部分TCP连接请求的报文，而服务器还在等待完成TCP三次握手的这部分连接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565581725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122362,"user_name":"星亦辰","can_delete":false,"product_type":"c1","uid":1284592,"ip_address":"","ucode":"B0388FBFFDEE7E","user_header":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","comment_is_top":false,"comment_ctime":1565348897,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1565348897","product_id":100032701,"comment_content":"监听地址，绑定的时候，可以通过 arpa&#47;inet.h 中的 inet_addr 初始化地址：<br><br>注： 绑定 127.0.0.1 的 1~1023 端口，可能 需要 root 权限","like_count":0},{"had_liked":false,"id":122337,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1565342526,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565342526","product_id":100032701,"comment_content":"第一问. 通过fcntl设置为O_NONBLOCK非阻塞套接字<br>第二问. 自己猜想客户端可以调用bind因为只是对套接字和ip地址和端口进行bind而已,但是实际上没必要服务器需要通过bind一个ip地址和端口供客户端连接，客户端不需要这个过程，所以没必要bind,它的端口是由内核分配的","like_count":0,"discussions":[{"author":{"id":1074310,"avatar":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","nickname":"多襄丸","note":"","ucode":"1AA1497C5A293C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4391,"discussion_content":"弱弱的问一下，fcntl是啥啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565347292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122310,"user_name":"Sweety","can_delete":false,"product_type":"c1","uid":1228667,"ip_address":"","ucode":"DC90C959AE147F","user_header":"https://static001.geekbang.org/account/avatar/00/12/bf/7b/e9592637.jpg","comment_is_top":false,"comment_ctime":1565336529,"is_pvip":false,"replies":[{"id":"45154","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576945,"ip_address":"","comment_id":122310,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565336529","product_id":100032701,"comment_content":"打卡.<br>终于理解了三次握手.发出并收到回应表示一次成功的连接,服务端与客户端都需要验证,服务端将回应与发出作为一次请求,所以从四次变成了三次,确保了连接的准确性.<br>客户端可以调用bind函数,但是感觉如果是一两次的请求,没必要绑定特定的端口.","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462201,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122252,"user_name":"fjpcode","can_delete":false,"product_type":"c1","uid":1306092,"ip_address":"","ucode":"C32C5E3ECB9A90","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ61zTDmLk7IhLJn6seBPOwsVaKIWUWaxk5YmsdYBZUOYMQCsyl9iaQVSg9U5qJVLLOCFUoLUuYnRA/132","comment_is_top":false,"comment_ctime":1565323111,"is_pvip":false,"replies":[{"id":"45147","content":"理解到位","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576601,"ip_address":"","comment_id":122252,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565323111","product_id":100032701,"comment_content":"三次握手我的理解是除了告知对方自己的初始序号外，最主要的目的是确保通信双方都有正常的收发能力。从发送sync到收到服务端的ack + sync，客户端就可以确认服务端的收发能力是没问题的。至于为什么不是两次握手，是因为此时服务端只能确保客户端的发送能力没有问题，没法确认接收能力是否有问题, 当收到客户端返回ack时这说明客户端已经收到了服务器的sync+ack包,从而证明客户端的接收能力也是正常的。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462175,"discussion_content":"理解到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122244,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1565321654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565321654","product_id":100032701,"comment_content":"TCP三次握手的意义在于，建立可靠的连接，双方建立好数据结构，为接下来数据传输做好准备。<br>至于为什么是三次不是四次五次，是因为三次握手可以恰到好处的确定双方通信能力都没有问题，第三次握手是阻止已失效的第一次握手又传输回来了，从而造成错误的连接。","like_count":0},{"had_liked":false,"id":122240,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1252639,"ip_address":"","ucode":"2F3959A717BE10","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/1f/6bc10297.jpg","comment_is_top":false,"comment_ctime":1565321116,"is_pvip":false,"replies":[{"id":"45146","content":"赞","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576570,"ip_address":"","comment_id":122240,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565321116","product_id":100032701,"comment_content":"客户端在connect之前可以调用bind函数绑定一个固定端口。但是通常，不建议这样做，因为操作系统自己随机分配端口，避免了自己分配端口带来端口冲突的问题；<br><br>====================================<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462168,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122230,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1565319902,"is_pvip":false,"replies":[{"id":"45143","content":"这只是一个例子，现实网络协议可能会选用随机序列号来完成连接建立。所以，冲突的几率是很小的。而且，正如你所说，可以根据连接信息轻松区别。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576512,"ip_address":"","comment_id":122230,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565319902","product_id":100032701,"comment_content":"老师，我问几个基础问题哈:<br><br>1.客户端发送的系列号为j的syn包会不会被发送到两个不同的服务器上，是不是目标地址不一样，所以尽管系列号相同，也不会有什么影响哇？<br><br>2. 同样的 服务器端 有没有可能同时收到两个序列号相同的syn包？ 还是说尽管syn包的序列号都是j，但是客户端的socket地址不同，所以也是没什么影响。是这样子嘛？<br><br>3. 老师，客户端收到服务端对客户端syn包(j)的ack(j+1)响应，标志着客户端对服务端单向连接的established，客户端的cennoct阻塞结束。<br><br>4. 同样的， 服务端要收到客户端对服务端syn(k)包的ack(k+1)响应，标志着服务端对客户端单向连接的established,服务端的accept阻塞结束。 <br><br>不论是客户端，还是服务端对于阻塞式的网络连接，只有收到对方的ack包，发送syn的阻塞方法才结束并且connection才处于established。<br><br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462162,"discussion_content":"这只是一个例子，现实网络协议可能会选用随机序列号来完成连接建立。所以，冲突的几率是很小的。而且，正如你所说，可以根据连接信息轻松区别。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122181,"user_name":"取一个长长长长的名字","can_delete":false,"product_type":"c1","uid":1387521,"ip_address":"","ucode":"8C39641B6EBCA1","user_header":"https://static001.geekbang.org/account/avatar/00/15/2c/01/636452b4.jpg","comment_is_top":false,"comment_ctime":1565313456,"is_pvip":false,"replies":[{"id":"45138","content":"不是，非阻塞是感知I&#47;O事件的方式不同，很快就会展开讲。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576164,"ip_address":"","comment_id":122181,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565313456","product_id":100032701,"comment_content":"非阻塞应该是把数据放在tcp缓冲区后立即返回吧。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462135,"discussion_content":"不是，非阻塞是感知I/O事件的方式不同，很快就会展开讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122174,"user_name":"刘明","can_delete":false,"product_type":"c1","uid":1109382,"ip_address":"","ucode":"5871C54AAE1A81","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/86/5855aaa4.jpg","comment_is_top":false,"comment_ctime":1565313079,"is_pvip":false,"replies":[{"id":"45137","content":"赋值的话还是IPv4或IPV6地址，只不过需要强制转化为通用地址格式。<br><br>SCTP用得比较少，所以没展开说。感谢指出错误，已经修正。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576110,"ip_address":"","comment_id":122174,"utype":1}],"discussion_count":6,"race_medal":0,"score":"1565313079","product_id":100032701,"comment_content":"2个疑问：<br>1)accept时第三个参数地址长度，应该是一个传入-传出参数(值-结果参数)，考虑到IPv4与IPv6地址长度不同，且通用地址长度也存不下IPv6地址。传入时应该为它赋什么值呢？<br>2)书上说建立TCP连接有一种特殊情况，双方同时主动向对方发送SYN建立连接，请问这种场景可以用本文这种方式来模拟实现吗？<br><br>2道思考题：<br>1)非阻塞的一种场景举例：客户端向服务器建立连接过程中，客户端想要立即关闭，就要使用非阻塞的connect。如果使用阻塞方式，只能等待connect返回之后(成功或失败)才能关闭，等待返回在一些场景下会需要较长的时间。<br>2)客户端也可以bind，说明只能使用特定的IP(若指定了非通配IP)、特定的端口(若指定了非0端口)与服务器通信。<br><br>3个小错误：<br>1)socket的第三个参数protocol还是有用的，比如创建SCTP协议套接字时，前两个参数与TCP都一样，使用第三个参数来区分。<br>2)第二段结尾“客户端、服务器模型模型”，“模型”重复了。<br>3)make_socket那段代码，少了一个函数结尾的大括号}。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462132,"discussion_content":"赋值的话还是IPv4或IPV6地址，只不过需要强制转化为通用地址格式。\n\nSCTP用得比较少，所以没展开说。感谢指出错误，已经修正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043484,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/1c/d323b066.jpg","nickname":"knull","note":"","ucode":"3BFECF3D29F40C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4322,"discussion_content":"ipv4地址应该不能接受ipv6的客户端\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565314633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043484,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/1c/d323b066.jpg","nickname":"knull","note":"","ucode":"3BFECF3D29F40C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4321,"discussion_content":"所以，ipv6服务器，accept的都是ipv6地址（即使客户端是ipv4，也会转为ipv6）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565314605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1109382,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/86/5855aaa4.jpg","nickname":"刘明","note":"","ucode":"5871C54AAE1A81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1043484,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/1c/d323b066.jpg","nickname":"knull","note":"","ucode":"3BFECF3D29F40C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4325,"discussion_content":"所以，传入的长度是sizeof(struct sockaddr_in6)，是这样吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565315678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4321,"ip_address":""},"score":4325,"extra":""},{"author":{"id":1043484,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/1c/d323b066.jpg","nickname":"knull","note":"","ucode":"3BFECF3D29F40C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1109382,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/86/5855aaa4.jpg","nickname":"刘明","note":"","ucode":"5871C54AAE1A81","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4365,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565338471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4325,"ip_address":""},"score":4365,"extra":""}]},{"author":{"id":1043484,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/1c/d323b066.jpg","nickname":"knull","note":"","ucode":"3BFECF3D29F40C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4320,"discussion_content":"疑问1：一般有专门的ipv4，ipv6服务器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565314545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122116,"user_name":"HDZ","can_delete":false,"product_type":"c1","uid":1239063,"ip_address":"","ucode":"5E0E5ECDF86F61","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/17/6c9a12c6.jpg","comment_is_top":false,"comment_ctime":1565307083,"is_pvip":false,"replies":[{"id":"45133","content":"socketfd == socket file description","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575688,"ip_address":"","comment_id":122116,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1565307083","product_id":100032701,"comment_content":"int listen (int socketfd, int backlog)<br>这里是socketfd还是socketdf","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462106,"discussion_content":"socketfd == socket file description","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1146178,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7d/42/c324a7de.jpg","nickname":"山鷹·China","note":"","ucode":"1A13AAC813C1C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4376,"discussion_content":"scoket创建的fd","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565340938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122114,"user_name":"Coding小先","can_delete":false,"product_type":"c1","uid":1051563,"ip_address":"","ucode":"965B1CC757E026","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/ab/0e2857e5.jpg","comment_is_top":false,"comment_ctime":1565306873,"is_pvip":false,"replies":[{"id":"45132","content":"非阻塞是一种I&#47;O模型，和协议(TCP或UDP)关系不大。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575663,"ip_address":"","comment_id":122114,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565306873","product_id":100032701,"comment_content":"非阻塞是在UDP使用吗？<br><br>客户端在connect要bind listen，绑定自己的地址与端口，在connect的时候告诉服务端。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462105,"discussion_content":"非阻塞是一种I/O模型，和协议(TCP或UDP)关系不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}