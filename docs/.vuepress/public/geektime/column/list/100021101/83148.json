{"id":83148,"title":"练习Sample跑起来 | ASM插桩强化练习","content":"<p>你好，我是孙鹏飞。</p><p>专栏上一期，绍文讲了编译插桩的三种方法：AspectJ、ASM、ReDex，以及它们的应用场景。学完以后你是不是有些动心，想赶快把它们应用到实际工作中去。但我也还了解到，不少同学其实接触插桩并不多，在工作中更是很少使用。由于这项技术太重要了，可以实现很多功能，所以我还是希望你通过理论 + 实践的方式尽可能掌握它。因此今天我给你安排了一期“强化训练”，希望你可以趁热打铁，保持学习的连贯性，把上一期的理论知识，应用到今天插桩的练习上。</p><p>为了尽量降低上手的难度，我尽量给出详细的操作步骤，相信你只要照着做，并结合专栏上期内容的学习，你一定可以掌握插桩的精髓。</p><h2>ASM插桩强化练习</h2><p><img src=\"https://static001.geekbang.org/resource/image/e2/07/e2f777c2fb2ed535be7367643e43c307.png?wh=1204*1026\" alt=\"\"></p><p>在上一期里，Eateeer同学留言说得非常好，提到了一个工具，我也在使用这个工具帮助自己理解ASM。安装“ASM Bytecode Outline”也非常简单，只需要在Android Studio中的Plugin搜索即可。</p><p><img src=\"https://static001.geekbang.org/resource/image/7a/47/7ad456d5f6d5054d6259f66a41cb6047.png?wh=1610*412\" alt=\"\"></p><p>ASM Bytecode Outline插件可以快速展示当前编辑类的字节码表示，也可以展示出生成这个类的ASM代码，你可以在Android  Studio源码编译框内右键选择“Show Bytecode Outline“来查看，反编译后的字节码在右侧展示。</p><!-- [[[read_end]]] --><p>我以今天强化练习中的<a href=\"https://github.com/AndroidAdvanceWithGeektime/Chapter-ASM/blob/master/ASMSample/src/main/java/com/sample/asm/SampleApplication.java\">SampleApplication</a>类为例，具体字节码如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/fd/bc/fd7c472e83d37fa3a55124309bcb10bc.png?wh=1920*688\" alt=\"\"></p><p>除了字节码模式，ASM Bytecode Outline还有一种“ASMified”模式，你可以看到SampleApplication类应该如何用ASM代码构建。</p><p><img src=\"https://static001.geekbang.org/resource/image/f7/66/f7f75f73002335d89289bf03636a6f66.png?wh=1920*606\" alt=\"\"></p><p>下面我们通过两个例子的练习，加深对ASM使用的理解。</p><p><strong>1. 通过ASM插桩统计方法耗时</strong></p><p>今天我们的第一个练习是：通过ASM实现统计每个方法的耗时。怎么做呢？请你先不要着急，同样以SampleApplication类为例，如下图所示，你可以先手动写一下希望实现插桩前后的对比代码。</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/dd/f2bf3b43308b42b78a865f7b36209ddd.png?wh=1920*284\" alt=\"\"></p><p>那这样“差异”代码怎么样转化了ASM代码呢？ASM Bytecode Outline还有一个非常强大的功能，它可以展示相邻两次修改的代码差异，这样我们可以很清晰地看出修改的代码在字节码上的呈现。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/e5/b6502906622a46a638dd9f3af10619e5.png?wh=1920*926\" alt=\"\"></p><p>“onCreate”方法在“ASMified”模式的前后差异代码，也就是我们需要添加的ASM代码。在真正动手去实现插桩之前，我们还是需要理解一下ASM源码中关于Core API里面ClassReader、ClassWriter、ClassVisitor等几个类的用法。</p><p>我们使用ASM需要先通过ClassReader读入Class文件的原始字节码，然后使用ClassWriter类基于不同的Visitor类进行修改，其中COMPUTE_MAXS和EXPAND_FRAMES都是需要特别注意的参数。</p><pre><code>ClassReader classReader = new ClassReader(is);\n//COMPUTE_MAXS 说明使用ASM自动计算本地变量表最大值和操作数栈的最大值\nClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);\nClassVisitor classVisitor = new TraceClassAdapter(Opcodes.ASM5, classWriter);\n//EXPAND_FRAMES 说明在读取 class 的时候同时展开栈映射帧(StackMap Frame)，在使用 AdviceAdapter里这项是必须打开的\nclassReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);\n</code></pre><p>如果要统计每个方法的耗时，我们可以使用AdviceAdapter来实现。它提供了onMethodEnter()和onMethodExit()函数，非常适合实现方法的前后插桩。具体的实现，你可以参考今天强化练习中的<a href=\"https://github.com/AndroidAdvanceWithGeektime/Chapter-ASM/blob/master/asm-gradle-plugin/src/main/java/com/geektime/asm/ASMCode.java#L60\">TraceClassAdapter</a>的实现：</p><pre><code>private int timeLocalIndex = 0;\n@Override\nprotected void onMethodEnter() {\n    mv.visitMethodInsn(INVOKESTATIC, &quot;java/lang/System&quot;, &quot;currentTimeMillis&quot;, &quot;()J&quot;, false);\n    timeLocalIndex = newLocal(Type.LONG_TYPE); //这个是LocalVariablesSorter 提供的功能，可以尽量复用以前的局部变量\n    mv.visitVarInsn(LSTORE, timeLocalIndex);\n}\n\n@Override\nprotected void onMethodExit(int opcode) {\n    mv.visitMethodInsn(INVOKESTATIC, &quot;java/lang/System&quot;, &quot;currentTimeMillis&quot;, &quot;()J&quot;, false);\n    mv.visitVarInsn(LLOAD, timeLocalIndex);\n    mv.visitInsn(LSUB);//此处的值在栈顶\n    mv.visitVarInsn(LSTORE, timeLocalIndex);//因为后面要用到这个值所以先将其保存到本地变量表中\n    int stringBuilderIndex = newLocal(Type.getType(&quot;java/lang/StringBuilder&quot;));\n    mv.visitTypeInsn(Opcodes.NEW, &quot;java/lang/StringBuilder&quot;);\n    mv.visitInsn(Opcodes.DUP);\n    mv.visitMethodInsn(Opcodes.INVOKESPECIAL, &quot;java/lang/StringBuilder&quot;, &quot;&lt;init&gt;&quot;, &quot;()V&quot;, false);\n    mv.visitVarInsn(Opcodes.ASTORE, stringBuilderIndex);//需要将栈顶的 stringbuilder 保存起来否则后面找不到了\n    mv.visitVarInsn(Opcodes.ALOAD, stringBuilderIndex);\n    mv.visitLdcInsn(className + &quot;.&quot; + methodName + &quot; time:&quot;);\n    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, &quot;java/lang/StringBuilder&quot;, &quot;append&quot;, &quot;(Ljava/lang/String;)Ljava/lang/StringBuilder;&quot;, false);\n    mv.visitInsn(Opcodes.POP);//将 append 方法的返回值从栈里 pop 出去\n    mv.visitVarInsn(Opcodes.ALOAD, stringBuilderIndex);\n    mv.visitVarInsn(Opcodes.LLOAD, timeLocalIndex);\n    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, &quot;java/lang/StringBuilder&quot;, &quot;append&quot;, &quot;(J)Ljava/lang/StringBuilder;&quot;, false);\n    mv.visitInsn(Opcodes.POP);//将 append 方法的返回值从栈里 pop 出去\n    mv.visitLdcInsn(&quot;Geek&quot;);\n    mv.visitVarInsn(Opcodes.ALOAD, stringBuilderIndex);\n    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, &quot;java/lang/StringBuilder&quot;, &quot;toString&quot;, &quot;()Ljava/lang/String;&quot;, false);\n    mv.visitMethodInsn(Opcodes.INVOKESTATIC, &quot;android/util/Log&quot;, &quot;d&quot;, &quot;(Ljava/lang/String;Ljava/lang/String;)I&quot;, false);//注意： Log.d 方法是有返回值的，需要 pop 出去\n    mv.visitInsn(Opcodes.POP);//插入字节码后要保证栈的清洁，不影响原来的逻辑，否则就会产生异常，也会对其他框架处理字节码造成影响\n}\n</code></pre><p>具体实现和我们在ASM Bytecode Outline看到的大同小异，但是这里需要注意局部变量的使用。在练习的例子中用到了AdviceAdapter的一个很重要的父类LocalVariablesSorter，这个类提供了一个很好用的方法newLocal，它可以分配一个本地变量的index，而不用用户考虑本地变量的分配和覆盖问题。</p><p>另一个需要注意的情况是，我们在最后的时候需要判断一下插入的代码是否会在栈顶上遗留不使用的数据，如果有的话需要消耗掉或者POP出去，否则就会导致后续代码的异常。</p><p>这样我们就可以快速地将这一大段字节码完成了。</p><p><strong>2. 替换项目中的所有的new Thread</strong></p><p>今天另一个练习是：替换项目中所有的new Thread，换为自己项目的CustomThread类。在实践中，你可以通过这个方法，在CustomThread增加统计代码，从而实现统计每个线程运行的耗时。</p><p>不过这也是一个相对来说坑比较多的情况，你可以提前考虑一下可能会遇到什么状况。同样我们通过修改<a href=\"https://github.com/AndroidAdvanceWithGeektime/Chapter-ASM/blob/master/ASMSample/src/main/java/com/sample/asm/MainActivity.java#L20\">MainActivity</a>的startThread方法里面的Thread对象改变成CustomThread，通过ASM Bytecode Outline看看在字节码上面的差异：</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/0a/a7579f0e2e6fc1df1fa7b880946c740a.png?wh=1920*452\" alt=\"\"></p><p>InvokeVirtual是根据new出来的对象来调用，所以我们只需要替换new对象的过程就可以了。这里需要处理两个指令：一个new、一个InvokeSpecial。在大多数情况下这两条指令是成对出现的，但是在一些特殊情况下，会遇到直接从其他位置传递过来一个已经存在的对象，并强制调用构造方法的情况。</p><p>而我们需要处理这种特殊情况，所以在例子里我们需要判断new和InvokeSpecial是否是成对出现的。</p><pre><code> private boolean findNew = false;//标识是否遇到了new指令\n        @Override\n        public void visitTypeInsn(int opcode, String s) {\n            if (opcode == Opcodes.NEW &amp;&amp; &quot;java/lang/Thread&quot;.equals(s)) {\n                findNew = true;//遇到new指令\n                mv.visitTypeInsn(Opcodes.NEW, &quot;com/sample/asm/CustomThread&quot;);//替换new指令的类名\n                return;\n            }\n            super.visitTypeInsn(opcode, s);\n        }\n\n        @Override\n        public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {\n            //需要排查CustomThread自己\n            if (&quot;java/lang/Thread&quot;.equals(owner) &amp;&amp; !className.equals(&quot;com/sample/asm/CustomThread&quot;) &amp;&amp; opcode == Opcodes.INVOKESPECIAL &amp;&amp; findNew) {\n                findNew= false;\n                mv.visitMethodInsn(opcode, &quot;com/sample/asm/CustomThread&quot;, name, desc, itf);//替换INVOKESPECIAL 的类名，其他参数和原来保持一致\n                return;\n            }\n            super.visitMethodInsn(opcode, owner, name, desc, itf);\n        }\n</code></pre><p>new指令的形态相对特殊，比如我们可能会遇到下面的情况：</p><pre><code>new A(new B(2));\n</code></pre><p>字节码如下，你会发现两个new指令连在一起。</p><pre><code>NEW A\n    DUP\n    NEW B\n    DUP\n    ICONST_2\n    INVOKESPECIAL B.&lt;init&gt; (I)V\n    INVOKESPECIAL A.&lt;init&gt; (LB;)V\n</code></pre><p>虽然ASM Bytecode Outline工具可以帮助我们完成很多场景下的ASM需求，但是在处理字节码的时候还是需要考虑很多种可能出现的情况，这点需要你注意一下每个指令的特征。所以说在稍微复杂一些的情况下，我们依然需要对ASM字节码以及ASM源码中的一些工具类有所了解，并且需要很多次的实践，毕竟实践是最重要的。</p><p><span class=\"orange\">最后再留给你一个思考题，如何给某个方法增加一个try catch呢？你可以尝试一下在今天强化练习的代码里根据我提供的插件示例实现一下。</span></p><p>强化练习的代码：<a href=\"https://github.com/AndroidAdvanceWithGeektime/Chapter-ASM\">https://github.com/AndroidAdvanceWithGeektime/Chapter-ASM</a></p><h2>福利彩蛋</h2><p>学到这里相信你肯定会认同成为一个Android开发高手的确不容易，能够坚持学习和练习，并整理输出分享更是不易。但是也确实有同学坚持下来了。</p><p>还记得在专栏导读里我们的承诺吗？我们会选出坚持参与学习并分享心得的同学，送出2019年GMTC大会的门票。今天我们就来兑现承诺，送出价值4800元的GMTC门票一张。获得这个“大礼包”的同学是<span class=\"orange\">@唯鹿</span>，他不仅提交了作业，更是在博客里分享了每个练习Sample实现的过程和心得，并且一直在坚持。我在文稿里贴了他的练习心得文章链接，如果你对于之前的练习Sample还有不明白的地方，可以参考唯鹿同学的实现过程。</p><ul>\n<li>\n<p><a href=\"https://blog.csdn.net/qq_17766199/article/details/85716750\">Android 开发高手课 课后练习（1 ~ 5）</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/qq_17766199/article/details/86770948\">Android 开发高手课 课后练习（6 ~ 8，12，17，19）</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/simplezhli/Chapter04\">专栏第4期完成作业</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/simplezhli/Chapter19\">专栏第19期完成作业</a></p>\n</li>\n</ul><p><span class=\"orange\">GMTC门票还有剩余，给自己一个进阶的机会，从现在开始一切都还来得及。</span></p><blockquote>\n<p>小程序、Flutter、移动AI、工程化、性能优化…大前端的下一站在哪里？GMTC 2019全球大前端技术大会将于6月北京盛大开幕，来自Google、BAT、美团、京东、滴滴等一线前端大牛将与你面对面共话前端那些事，聊聊大前端的最新技术趋势和最佳实践案例。<br>\n目前大会最低价7折购票火热进行中，讲师和议题也持续招募中，点击下方图片了解更多大会详情！</p>\n</blockquote><p><a href=\"http://gmtc2019.geekbang.org/?utm_source=wechat&amp;utm_medium=geektime&amp;utm_campaign=yuedu&amp;utm_term=0223\"><img src=\"https://static001.geekbang.org/resource/image/e6/68/e65943bb1d18357a19b7121678b78b68.png?wh=1110*549\" alt=\"\"></a></p><hr></hr><p></p>","neighbors":{"left":{"article_title":"练习Sample跑起来 | 热点问题答疑第4期","id":79331},"right":{"article_title":"练习Sample跑起来 | 唯鹿同学的练习手记 第1辑","id":83742}},"comments":[{"had_liked":false,"id":69819,"user_name":"唯鹿","can_delete":false,"product_type":"c1","uid":1125779,"ip_address":"","ucode":"455CED99CE4473","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/93/1a4c40fe.jpg","comment_is_top":false,"comment_ctime":1550852685,"is_pvip":false,"replies":[{"id":"30775","content":"你是最棒的！","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555167759,"ip_address":"","comment_id":69819,"utype":1}],"discussion_count":1,"race_medal":0,"score":"121809936973","product_id":100021101,"comment_content":"感谢老师的认可与鼓励，我会继续坚持学习与分享！🙏","like_count":29,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440300,"discussion_content":"你是最棒的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555167759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74653,"user_name":"Neil","can_delete":false,"product_type":"c1","uid":1206345,"ip_address":"","ucode":"909A2103DFEE1B","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/49/418a9486.jpg","comment_is_top":false,"comment_ctime":1552273297,"is_pvip":false,"replies":[{"id":"30707","content":"3.3应该是没问题的","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555138260,"ip_address":"","comment_id":74653,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10142207889","product_id":100021101,"comment_content":"这个插件是不是在AS3.3上失效了啊","like_count":2,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442635,"discussion_content":"3.3应该是没问题的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555138260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2217259,"avatar":"","nickname":"力行","note":"","ucode":"248D16AE47F034","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382280,"discussion_content":"另外，gradle4.0.2 版本中transformClassesWithDexBuilderFordebug 这个Task消失了，因此也不可行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625495458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2217259,"avatar":"","nickname":"力行","note":"","ucode":"248D16AE47F034","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382279,"discussion_content":"貌似没有 gradle4.0.2 ASM 还transformClassesWithDexBuilderFordebug 这个Task了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625495224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2217259,"avatar":"","nickname":"力行","note":"","ucode":"248D16AE47F034","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382278,"discussion_content":"的确失效了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625495154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213355,"user_name":"杨泉","can_delete":false,"product_type":"c1","uid":1803562,"ip_address":"","ucode":"63712A20AAE29C","user_header":"https://static001.geekbang.org/account/avatar/00/1b/85/2a/53461450.jpg","comment_is_top":false,"comment_ctime":1588393282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883360578","product_id":100021101,"comment_content":"如何运行Demo<br>ASMSample项目先注释掉<br>&#47;&#47; apply plugin: &#39;com.geektime.asm-plugin&#39;<br>&#47;&#47; classpath (&quot;com.geektime.asm:asm-gradle-plugin:1.0&quot;) { changing = true }`<br>编译和发布asm-gradle-plugin 到本地maven<br>.&#47;gradlew buildAndPublishToLocalMaven<br>还原第1步注释掉的插件依赖，即可运行Demo<br>.&#47;gradlew installDebug<br>我的，还要修改以下3点，才能编译通过：<br>1 把项目的改为 distributionUrl=https:&#47;&#47;services.gradle.org&#47;distributions&#47;gradle-5.6.4-all.zip<br>2 项目的 buildscript{ dependencies { classpath &#39;com.android.tools.build:gradle:3.6.1&#39; } }<br>3 asm-gradle-plugin module中的<br>dependencies {<br>compile &#39;com.android.tools.build:gradle:3.6.1&#39; &#47;&#47;从2.1.0改为3.6.1，否则com.android.build.gradle.internal.pipeline和com.android.build.api.transform包找不到<br>}","like_count":1},{"had_liked":false,"id":71665,"user_name":"肥牛大猛","can_delete":false,"product_type":"c1","uid":1069691,"ip_address":"","ucode":"36B82B366DE82D","user_header":"https://static001.geekbang.org/account/avatar/00/10/52/7b/6e295097.jpg","comment_is_top":false,"comment_ctime":1551408588,"is_pvip":false,"replies":[{"id":"25789","content":"可以debug的，在前一篇文章里面有一个参考链接","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1551423101,"ip_address":"","comment_id":71665,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5846375884","product_id":100021101,"comment_content":"请问在写Transform的过程中，如何debug代码呢？初期对ASM不熟悉，在写的过程中如果能debug最好了","like_count":1,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441264,"discussion_content":"可以debug的，在前一篇文章里面有一个参考链接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551423101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1331007,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4f/3f/54574af3.jpg","nickname":"爱神的蛋糕","note":"","ucode":"71EE5B87927B56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373587,"discussion_content":"找了半天没找到前一篇文章的关于debug transform的参考链接，这里的前一篇是指sample还是正文？正文里面关于编译插桩的也没有唉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620791729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332343,"user_name":"ysnows","can_delete":false,"product_type":"c1","uid":1260419,"ip_address":"","ucode":"2CA3374E1C3DA8","user_header":"https://static001.geekbang.org/account/avatar/00/13/3b/83/a5327123.jpg","comment_is_top":false,"comment_ctime":1643183651,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643183651","product_id":100021101,"comment_content":"https:&#47;&#47;plugins.jetbrains.com&#47;plugin&#47;14860-asm-bytecode-viewer-support-kotlin 大家也可以用这个插件，ASM Bytecode Outline已经不更新了","like_count":0},{"had_liked":false,"id":161142,"user_name":"blithe","can_delete":false,"product_type":"c1","uid":1605627,"ip_address":"","ucode":"F5DD4B14D04D40","user_header":"https://static001.geekbang.org/account/avatar/00/18/7f/fb/49507baa.jpg","comment_is_top":false,"comment_ctime":1576130478,"is_pvip":false,"replies":[{"id":"62070","content":"因为要拿到原来transform的一些输入和输出，不过gradle 3.6 之后慢慢都换回task了","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1576681425,"ip_address":"","comment_id":161142,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576130478","product_id":100021101,"comment_content":"为什么是使用发射的方式，替换了transformClassesWithDexBuilderForDebug，而不是直接在plugin中直接加入进去一个","like_count":0,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477614,"discussion_content":"因为要拿到原来transform的一些输入和输出，不过gradle 3.6 之后慢慢都换回task了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576681425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157105,"user_name":"haizhiyun","can_delete":false,"product_type":"c1","uid":1441194,"ip_address":"","ucode":"8EC129CA457125","user_header":"https://static001.geekbang.org/account/avatar/00/15/fd/aa/3353a9b0.jpg","comment_is_top":false,"comment_ctime":1575031812,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575031812","product_id":100021101,"comment_content":"你好，asm 如何在一个方法的调用后面插入一个方法 ，并获取这个方法的所有参数，实现类似  aspectJ @After(&quot;call(...)&quot;)  或者 @Around(&quot;call(...)&quot;)的功能 ","like_count":0},{"had_liked":false,"id":80991,"user_name":"王大大","can_delete":false,"product_type":"c1","uid":1476750,"ip_address":"","ucode":"83D942352465C8","user_header":"https://static001.geekbang.org/account/avatar/00/16/88/8e/6f6c7539.jpg","comment_is_top":false,"comment_ctime":1553770630,"is_pvip":false,"replies":[{"id":"31117","content":"可以现在task编译一次localmaven的，我已经写了支持","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555397910,"ip_address":"","comment_id":80991,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553770630","product_id":100021101,"comment_content":"@splm 我的方法是在本地建repo，然后在项目中classpath引进去，然后在apply进去，但是修改了代码调试需要重新uploadArchives，就很麻烦，有什么好的调试办法吗","like_count":0,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445037,"discussion_content":"可以现在task编译一次localmaven的，我已经写了支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555397910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79991,"user_name":"splm","can_delete":false,"product_type":"c1","uid":1338601,"ip_address":"","ucode":"2216332252CEA7","user_header":"https://static001.geekbang.org/account/avatar/00/14/6c/e9/072b33b9.jpg","comment_is_top":false,"comment_ctime":1553589642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553589642","product_id":100021101,"comment_content":"Could not find implementation class for plugin error when using Gradle 4.1+。<br>有遇到这个问题的朋友，可以肯定是找不到类，第一要看插件的properties文件命名和里面的内容指向，命名是用来apply的，内容是用来找到对应插件类，要明确这个关系。第二，要仔细groovy文件是否有后缀。我之前就是粗心连续的回车，导致忘记给文件家后缀，一直报这个恶心的错误。","like_count":0},{"had_liked":false,"id":79980,"user_name":"splm","can_delete":false,"product_type":"c1","uid":1338601,"ip_address":"","ucode":"2216332252CEA7","user_header":"https://static001.geekbang.org/account/avatar/00/14/6c/e9/072b33b9.jpg","comment_is_top":false,"comment_ctime":1553587366,"is_pvip":false,"replies":[{"id":"31112","content":"需要先编译localmaven","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555397627,"ip_address":"","comment_id":79980,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553587366","product_id":100021101,"comment_content":"如果不上传maven的话，本地工程使用，提示找不到插件类，这个是什么问题？","like_count":0,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444710,"discussion_content":"需要先编译localmaven","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555397627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}