{"id":304145,"title":"34 | 第23~33讲课后思考题答案及常见问题答疑","content":"<p>你好，我是蒋德钧。</p><p>今天，又到了我们的答疑时间，我们一起来学习下第23～33讲的课后思考题。同时，我还会给你讲解两道典型问题。</p><h2>课后思考题答案</h2><h3><a href=\"https://time.geekbang.org/column/article/293929\">第23讲</a></h3><p>问题：Redis的只读缓存和使用直写策略的读写缓存，都会把数据同步写到后端数据库中，你觉得它们有什么区别吗？</p><p>答案：主要的区别在于，当有缓存数据被修改时，在只读缓存中，业务应用会直接修改数据库，并把缓存中的数据标记为无效；而在读写缓存中，业务应用需要同时修改缓存和数据库。</p><p>我把这两类缓存的优劣势汇总在一张表中，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/84/51/84ed48ebccd3443f29cba150b5c1a951.jpg?wh=2822*1556\" alt=\"\"></p><h3><a href=\"https://time.geekbang.org/column/article/294640\">第24讲</a></h3><p>问题：Redis缓存在处理脏数据时，不仅会修改数据，还会把它写回数据库。我们在前面学过Redis的只读缓存模式和两种读写缓存模式（带同步直写的读写模式，带异步写回的读写模式）），请你思考下，Redis缓存对应哪一种或哪几种模式？</p><p>答案：如果我们在使用Redis缓存时，需要把脏数据写回数据库，这就意味着，Redis中缓存的数据可以直接被修改，这就对应了读写缓存模式。更进一步分析的话，脏数据是在被替换出缓存时写回后端数据库的，这就对应了带有异步写回策略的读写缓存模式。</p><h3><a href=\"https://time.geekbang.org/column/article/295812\">第25讲</a></h3><p>问题：在只读缓存中对数据进行删改时，需要在缓存中删除相应的缓存值。如果在这个过程中，我们不是删除缓存值，而是直接更新缓存的值，你觉得，和删除缓存值相比，直接更新缓存值有什么好处和不足吗？</p><!-- [[[read_end]]] --><p>答案：如果我们直接在缓存中更新缓存值，等到下次数据再被访问时，业务应用可以直接从缓存中读取数据，这是它的一大好处。</p><p>不足之处在于，当有数据更新操作时，我们要保证缓存和数据库中的数据是一致的，这就可以采用我在第25讲中介绍的重试或延时双删方法。不过，这样就需要在业务应用中增加额外代码，有一定的开销。</p><h3><a href=\"https://time.geekbang.org/column/article/296586\">第26讲</a></h3><p>问题：在讲到缓存雪崩时，我提到，可以采用服务熔断、服务降级、请求限流三种方法来应对。请你思考下，这三个方法可以用来应对缓存穿透问题吗？</p><p>答案：关于这个问题，@徐培同学回答得特别好，他看到了缓存穿透的本质，也理解了穿透和缓存雪崩、击穿场景的区别，我再来回答一下这个问题。</p><p>缓存穿透这个问题的本质是查询了Redis和数据库中没有的数据，而服务熔断、服务降级和请求限流的方法，本质上是为了解决Redis实例没有起到缓存层作用的问题，缓存雪崩和缓存击穿都属于这类问题。</p><p>在缓存穿透的场景下，业务应用是要从Redis和数据库中读取不存在的数据，此时，如果没有人工介入，Redis是无法发挥缓存作用的。</p><p>一个可行的办法就是<strong>事前拦截</strong>，不让这种查询Redis和数据库中都没有的数据的请求发送到数据库层。</p><p>使用布隆过滤器也是一个方法，布隆过滤器在判别数据不存在时，是不会误判的，而且判断速度非常快，一旦判断数据不存在，就立即给客户端返回结果。使用布隆过滤器的好处是既降低了对Redis的查询压力，也避免了对数据库的无效访问。</p><p>另外，这里，有个地方需要注意下，对于缓存雪崩和击穿问题来说，服务熔断、服务降级和请求限流这三种方法属于有损方法，会降低业务吞吐量、拖慢系统响应、降低用户体验。不过，采用这些方法后，随着数据慢慢地重新填充回Redis，Redis还是可以逐步恢复缓存层作用的。</p><h3><a href=\"https://time.geekbang.org/column/article/297270\">第27讲</a></h3><p>问题：使用了LFU策略后，缓存还会被污染吗？</p><p>答案：在Redis中，我们使用了LFU策略后，还是有可能发生缓存污染的。@yeek回答得不错，我给你分享下他的答案。</p><p>在一些极端情况下，LFU策略使用的计数器可能会在短时间内达到一个很大值，而计数器的衰减配置项设置得较大，导致计数器值衰减很慢，在这种情况下，数据就可能在缓存中长期驻留。例如，一个数据在短时间内被高频访问，即使我们使用了LFU策略，这个数据也有可能滞留在缓存中，造成污染。</p><h3><a href=\"https://time.geekbang.org/column/article/298205\">第28讲</a></h3><p>问题：这节课，我向你介绍的是使用SSD作为内存容量的扩展，增加Redis实例的数据保存量，我想请你来聊一聊，我们可以使用机械硬盘来作为实例容量扩展吗？有什么好处或不足吗？</p><p>答案：这道题有不少同学（例如@Lemon、@Kaito）都分析得不错，我再来总结下使用机械硬盘的优劣势。</p><p>从容量维度来看，机械硬盘的性价比更高，机械硬盘每GB的成本大约在0.1元左右，而SSD每GB的成本大约是0.4~0.6元左右。</p><p>从性能角度来看，机械硬盘（例如SAS盘）的延迟大约在3~5ms，而企业级SSD的读延迟大约是60~80us，写延迟在20us。缓存的负载特征一般是小粒度数据、高并发请求，要求访问延迟低。所以，如果使用机械硬盘作为Pika底层存储设备的话，缓存的访问性能就会降低。</p><p>所以，我的建议是，如果业务应用需要缓存大容量数据，但是对缓存的性能要求不高，就可以使用机械硬盘，否则最好是用SSD。</p><h3><a href=\"https://time.geekbang.org/column/article/299806\">第29讲</a></h3><p>问题：Redis在执行Lua脚本时，是可以保证原子性的，那么，在课程里举的Lua脚本例子（lua.script）中，你觉得是否需要把读取客户端ip的访问次数，也就是GET(ip)，以及判断访问次数是否超过20的判断逻辑，也加到Lua脚本中吗？代码如下所示：</p><pre><code>local current\ncurrent = redis.call(&quot;incr&quot;,KEYS[1])\nif tonumber(current) == 1 then\n    redis.call(&quot;expire&quot;,KEYS[1],60)\nend\n</code></pre><p>答案：在这个例子中，要保证原子性的操作有三个，分别是INCR、判断访问次数是否为1和设置过期时间。而对于获取IP以及判断访问次数是否超过20这两个操作来说，它们只是读操作，即使客户端有多个线程并发执行这两个操作，也不会改变任何值，所以并不需要保证原子性，我们也就不用把它们放到Lua脚本中了。</p><h3><a href=\"https://time.geekbang.org/column/article/301092\">第30讲</a></h3><p>问题：在课程里，我提到，我们可以使用SET命令带上NX和EX/PX选项进行加锁操作，那么，我们是否可以用下面的方式来实现加锁操作呢？</p><pre><code>// 加锁\nSETNX lock_key unique_value\nEXPIRE lock_key 10S\n// 业务逻辑\nDO THINGS\n</code></pre><p>答案：如果使用这个方法实现加锁的话，SETNX和EXPIRE两个命令虽然分别完成了对锁变量进行原子判断和值设置，以及设置锁变量的过期时间的操作，但是这两个操作一起执行时，并没有保证原子性。</p><p>如果在执行了SETNX命令后，客户端发生了故障，但锁变量还没有设置过期时间，就无法在实例上释放了，这就会导致别的客户端无法执行加锁操作。所以，我们不能使用这个方法进行加锁。</p><h3><a href=\"https://time.geekbang.org/column/article/301491\">第31讲</a></h3><p>问题：在执行事务时，如果Redis实例发生故障，而Redis使用的是RDB机制，那么，事务的原子性还能得到保证吗？</p><p>答案：当Redis采用RDB机制保证数据可靠性时，Redis会按照一定的周期执行内存快照。</p><p>一个事务在执行过程中，事务操作对数据所做的修改并不会实时地记录到RDB中，而且，Redis也不会创建RDB快照。我们可以根据故障发生的时机以及RDB是否生成，分成三种情况来讨论事务的原子性保证。</p><ol>\n<li>\n<p>假设事务在执行到一半时，实例发生了故障，在这种情况下，上一次RDB快照中不会包含事务所做的修改，而下一次RDB快照还没有执行。所以，实例恢复后，事务修改的数据会丢失，事务的原子性能得到保证。</p>\n</li>\n<li>\n<p>假设事务执行完成后，RDB快照已经生成了，如果实例发生了故障，事务修改的数据可以从RDB中恢复，事务的原子性也就得到了保证。</p>\n</li>\n<li>\n<p>假设事务执行已经完成，但是RDB快照还没有生成，如果实例发生了故障，那么，事务修改的数据就会全部丢失，也就谈不上原子性了。</p>\n</li>\n</ol><h3><a href=\"https://time.geekbang.org/column/article/303247\">第32讲</a></h3><p>问题：在主从集群中，我们把slave-read-only设置为no，让从库也能直接删除数据，以此来避免读到过期数据。你觉得，这是一个好方法吗？</p><p>答案：这道题目的重点是，假设从库也能直接删除过期数据的话（也就是执行写操作），是不是一个好方法？其实，我是想借助这道题目提醒你，主从复制中的增删改操作都需要在主库执行，即使从库能做删除，也不要在从库删除，否则会导致数据不一致。</p><p>例如，主从库上都有a:stock的键，客户端A给主库发送一个SET命令，修改a:stock的值，客户端B给从库发送了一个SET命令，也修改a:stock的值，此时，相同键的值就不一样了。所以，如果从库具备执行写操作的功能，就会导致主从数据不一致。</p><p>@Kaito同学在留言区对这道题做了分析，回答得很好，我稍微整理下，给你分享下他的留言。</p><p>即使从库可以删除过期数据，也还会有不一致的风险，有两种情况。</p><p>第一种情况是，对于已经设置了过期时间的key，主库在key快要过期时，使用expire命令重置了过期时间，例如，一个key原本设置为10s后过期，在还剩1s就要过期时，主库又用expire命令将key的过期时间设置为60s后。但是，expire命令从主库传输到从库时，由于网络延迟导致从库没有及时收到expire命令（比如延后了3s从库才收到expire命令），所以，从库按照原定的过期时间删除了过期key，这就导致主从数据不一致了。</p><p>第二种情况是，主从库的时钟不同步，导致主从库删除时间不一致。</p><p>另外，当slave-read-only设置为no时，如果在从库上写入的数据设置了过期时间，Redis 4.0前的版本不会删除过期数据，而Redis 4.0及以上版本会在数据过期后删除。但是，对于主库同步过来的带有过期时间的数据，从库仍然不会主动进行删除。</p><h3><a href=\"https://time.geekbang.org/column/article/303568\">第33讲</a></h3><p>问题：假设我们将min-slaves-to-write设置为1，min-slaves-max-lag设置为15s，哨兵的down-after-milliseconds设置为10s，哨兵主从切换需要5s，而主库因为某些原因卡住了12s。此时，还会发生脑裂吗？主从切换完成后，数据会丢失吗？</p><p>答案：主库卡住了12s，超过了哨兵的down-after-milliseconds 10s阈值，所以，哨兵会把主库判断为客观下线，开始进行主从切换。因为主从切换需要5s，在主从切换过程中，原主库恢复正常。min-slaves-max-lag设置的是15s，而原主库在卡住12s后就恢复正常了，所以没有被禁止接收请求，客户端在原主库恢复后，又可以发送请求给原主库。一旦在主从切换之后有新主库上线，就会出现脑裂。如果原主库在恢复正常后到降级为从库前的这段时间内，接收了写操作请求，那么，这些数据就会丢失了。</p><h2>典型问题答疑</h2><p>在第23讲中，我们学习了Redis缓存的工作原理，我提到了Redis是旁路缓存，而且可以分成只读模式和读写模式。我看到留言区有一些共性问题：如何理解Redis属于旁路缓存？Redis通常会使用哪种模式？现在，我来解释下这两个问题。</p><h3>如何理解把Redis称为旁路缓存？</h3><p>有同学提到，平时看到的旁路缓存是指，写请求的处理方式是直接更新数据库，并删除缓存数据；而读请求的处理方式是查询缓存，如果缓存缺失，就读取数据库，并把数据写入缓存。那么，课程中说的“Redis属于旁路缓存”是这个意思吗？</p><p>其实，这位同学说的是典型的只读缓存的特点。而我把Redis称为旁路缓存，更多的是从“业务应用程序如何使用Redis缓存”这个角度来说的。<strong>业务应用在使用Redis缓存时，需要在业务代码中显式地增加缓存的操作逻辑</strong>。</p><p>例如，一个基本的缓存操作就是，一旦发生缓存缺失，业务应用需要自行去读取数据库，而不是缓存自身去从数据库中读取数据再返回。</p><p>为了便于你理解，我们再来看下和旁路缓存相对应的、计算机系统中的CPU缓存和page cache。这两种缓存默认就在应用程序访问内存和磁盘的路径上，我们写的应用程序都能直接使用这两种缓存。</p><p>我之所以强调Redis是一个旁路缓存，也是希望你能够记住，在使用Redis缓存时，我们需要修改业务代码。</p><h3>使用Redis缓存时，应该用哪种模式？</h3><p>我提到，通用的缓存模式有三种：<strong>只读缓存模式、采用同步直写策略的读写缓存模式、采用异步写回策略的读写缓存模式</strong>。</p><p>一般情况下，我们会把Redis缓存用作只读缓存。只读缓存涉及的操作，包括查询缓存、缓存缺失时读数据库和回填，数据更新时删除缓存数据，这些操作都可以加到业务应用中。而且，当数据更新时，缓存直接删除数据，缓存和数据库的数据一致性较为容易保证。</p><p>当然，有时我们也会把Redis用作读写缓存，同时采用同步直写策略。在这种情况下，缓存涉及的操作也都可以加到业务应用中。而且，和只读缓存相比有一个好处，就是数据修改后的最新值可以直接从缓存中读取。</p><p>对于采用异步写回策略的读写缓存模式来说，缓存系统需要能在脏数据被淘汰时，自行把数据写回数据库，但是，Redis是无法实现这一点的，所以我们使用Redis缓存时，并不采用这个模式。</p><h2>小结</h2><p>好了，这次的答疑就到这里。如果你在学习的过程中遇到了什么问题，欢迎随时给我留言。</p><p>最后，我想说，“学而不思则罔，思而不学则殆”。你平时在使用Redis的时候，不要局限于你眼下的问题，你要多思考问题背后的原理，积累相应的解决方案。当然，在学习课程里的相关操作和配置时，也要有意识地亲自动手去实践。只有学思结合，才能真正提升你的Redis实战能力。</p>","neighbors":{"left":{"article_title":"33 | 脑裂：一次奇怪的数据丢失","id":303568},"right":{"article_title":"35 | Codis VS Redis Cluster：我该选择哪一个集群方案？","id":306548}},"comments":[{"had_liked":false,"id":265033,"user_name":"Geek_bbd494","can_delete":false,"product_type":"c1","uid":2326907,"ip_address":"","ucode":"148EA9397207A8","user_header":"","comment_is_top":false,"comment_ctime":1606741007,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"96096021519","product_id":100056701,"comment_content":"第29讲的答案不对吧，应该是需要写在lua中保证原子性，因为虽然那两个操作都是读不修改数据，但是是否要执行lua中的incr要依据读到的值是否小于20确定的，如果当前值是19，后面并发来了两个线程一前一后读到值是19，那么这两个线程就一前一后执行lua中的incr操作，值变成21了","like_count":23,"discussions":[{"author":{"id":1765097,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJzCZibunMDooyZ86JRibGasxZFbq8HT4WzHAPQIiaBneWnwkb6CaSkesMwAvZpxFGib2ibVA9DVP9LbhQ/132","nickname":"Geek_b43b32","note":"","ucode":"5DD112591702BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371373,"discussion_content":"我觉得这个外层get没啥意义，可以用incr的返回值来判断是否大于20","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1619749488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1342429,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7b/dd/f33a0855.jpg","nickname":"机智的小俊俊","note":"","ucode":"16DFBC3A9E60AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1765097,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJzCZibunMDooyZ86JRibGasxZFbq8HT4WzHAPQIiaBneWnwkb6CaSkesMwAvZpxFGib2ibVA9DVP9LbhQ/132","nickname":"Geek_b43b32","note":"","ucode":"5DD112591702BF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373341,"discussion_content":"是的，这个get确实有误导","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620701943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":371373,"ip_address":""},"score":373341,"extra":""}]},{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370581,"discussion_content":"不用写到 lua。业务层能保证。\n\n每次 incr 拿到的是不同的结果。业务层判断就好。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619455695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1811277,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a3/4d/59390ba9.jpg","nickname":"排骨","note":"","ucode":"A413CF46211E1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587182,"discussion_content":"有影响，但对于当前业务来说，问题不大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662868752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1370959,"avatar":"https://static001.geekbang.org/account/avatar/00/14/eb/4f/6a97b1cd.jpg","nickname":"猪小擎","note":"","ucode":"D9552746AE3327","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400070,"discussion_content":"支持楼主，返回这个current就最好了。再get是有问题。我本来current19，但是其他几个进城又执行了，我get了个21，其实我是不该不限流的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633154785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2107375,"avatar":"https://static001.geekbang.org/account/avatar/00/20/27/ef/a7f94eda.jpg","nickname":"Jerry You","note":"","ucode":"679A44B505482F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380305,"discussion_content":"变成21，但是不影响原子性。 你说的这个是业务逻辑的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624433189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1091673,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a8/59/e5a7762e.jpg","nickname":"学而不思则罔","note":"","ucode":"3EAF4C37386F0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370673,"discussion_content":"并不是不会有问题，只不过这个问题没什么影响而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619505916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1358797,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bb/cd/6e74b954.jpg","nickname":"转折点","note":"","ucode":"DE1EEEF7A5569A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364317,"discussion_content":"变成21也无所谓，在业务代码中判断>20则抛出对应的异常，保证这个时间间隔内只有20个请求能够处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617441920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1634859,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f2/2b/11333042.jpg","nickname":"A一直在努力","note":"","ucode":"FD4BFEE527E2A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338764,"discussion_content":"这里是加一和设置过期时间，读取值和判断是否大于20，可以业务层处理吧，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609377240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","nickname":"惘 闻","note":"","ucode":"C5909F034BF072","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336167,"discussion_content":"和你有同样的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608519997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259014,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1604601101,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"35964339469","product_id":100056701,"comment_content":"知识点还没掌握，要再重新学习一遍了","like_count":8},{"had_liked":false,"id":287807,"user_name":"dao","can_delete":false,"product_type":"c1","uid":1087879,"ip_address":"","ucode":"4181FB270462CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","comment_is_top":false,"comment_ctime":1618154545,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27387958321","product_id":100056701,"comment_content":"缓存雪崩 cache avalanche<br>缓存击穿 hotspot invalid<br>缓存穿透 cache penetration<br>","like_count":7},{"had_liked":false,"id":263527,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1606171798,"is_pvip":false,"replies":[{"id":"98012","content":"没错，这是为了保护后端数据库做的应对措施，它们对缓存失效本身并不能改变失效的结果。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1609078817,"ip_address":"","comment_id":263527,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10196106390","product_id":100056701,"comment_content":"引文：服务熔断、服务降级和请求限流的方法，本质上是为了解决 Redis 实例没有起到缓存层作用的问题，缓存雪崩和缓存击穿都属于这类问题。<br>哦，明白了，这三种存在的目的虽然不是为了解决缓存失效。但是在该应用场景，其本质就是为了解决缓存失效引发的问题","like_count":2,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510225,"discussion_content":"没错，这是为了保护后端数据库做的应对措施，它们对缓存失效本身并不能改变失效的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609078817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327594,"user_name":"树心","can_delete":false,"product_type":"c1","uid":1589523,"ip_address":"","ucode":"6C329F0FF798B9","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","comment_is_top":false,"comment_ctime":1640184612,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1640184612","product_id":100056701,"comment_content":"第24讲答案写错了吧，是同步直写。","like_count":1},{"had_liked":false,"id":319559,"user_name":"X","can_delete":false,"product_type":"c1","uid":1118695,"ip_address":"","ucode":"1A41A22EA15C9D","user_header":"https://static001.geekbang.org/account/avatar/00/11/11/e7/503efeca.jpg","comment_is_top":false,"comment_ctime":1635849766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635849766","product_id":100056701,"comment_content":"既然redis有sub&#47;pub机制，redis为什么不能有个内置的topic，在缓存淘汰的时候pub个消息通知客户端去执行落库的逻辑？","like_count":0},{"had_liked":false,"id":303224,"user_name":"玄墨","can_delete":false,"product_type":"c1","uid":2681445,"ip_address":"","ucode":"B181ECDF7ECCAC","user_header":"https://static001.geekbang.org/account/avatar/00/28/ea/65/ab8748c5.jpg","comment_is_top":false,"comment_ctime":1626675067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626675067","product_id":100056701,"comment_content":"第29讲lua脚本的例子,incr不是本身就可以保证原子性了吗?如果读操作没有必要放在lua脚本,是不是就意味着,其实这个实例都不需要使用到lua脚本?","like_count":0},{"had_liked":false,"id":295667,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1622539488,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1622539488","product_id":100056701,"comment_content":"按照惯例，我给你提一个小问题。这节课，我提到了 Redis 只读缓存和使用直写策略的读写缓存，这两种缓存都会把数据同步写到后端数据库中，你觉得，它们有什么区别吗？<br><br>答：<br><br>- 区别 1、 一个是删除，一个是更新：<br><br>只读缓存会删除 Redis 中的数据和更新数据库中的数据。<br><br>而直写策略是更新 Redis 和更新数据库中的数据。<br><br>- 区别 2、一致性保证问题<br><br>只读缓存中，可以快速将 Redis key 失效，缓存和数据库一致性很容易被保证。<br><br>而只写策略中，需要保证数据库和缓存的一致性。<br><br>- 区别 3、性能问题<br><br>只读缓存中，数据再次被读取时，因为 Redis 中缺失 key，所以需要先从数据库中读到后，放到缓存中，影响性能。<br><br>而只写策略中，数据直接从 Redis 中读取，性能较好。","like_count":0,"discussions":[{"author":{"id":1811277,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a3/4d/59390ba9.jpg","nickname":"排骨","note":"","ucode":"A413CF46211E1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587183,"discussion_content":"纠正一下，不是只写，是读写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662869947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286516,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1617353763,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1617353763","product_id":100056701,"comment_content":"对答案的时候总是忐忑。<br><br>第24课的课后题我完全想错了，使用 Redis 缓存，将脏数据写回数据库，因为是“脏数据”，所以缓存中的数据被修改了，对应了读写缓存模式。而脏数据是在被替换出缓存的时候写回数据库的，这就对应了异步写回策略的读写缓存模式。<br><br>如果把这道题当做面试题，估计很多候选人爬不出这个坑。<br><br>第25课，直接在缓存中更新，好处是下次访问时可以直接从缓存读；缺点是数据更新时的一致性问题。<br><br>第27课，@yeek：“极端情况下，LFU 策略使用的计数器可能会在短时间内达到一个很大值，而计数器的衰减配置项设置的很大，导致计数器值衰减的很慢，这种情况下，数据就有可能在缓存中长期驻留。”——不明觉厉<br><br>第31课，老师分三种情况分析了采用 RDB 机制时，Redis 实例发生故障的情况下，能否保证事务完整性，而我自己的答案只考虑了其中一种情况。<br><br>第33课，老师和课代表都认为在原主库回复之后 12s-15s 接收到的请求是无法同步到新主库的，我错了。<br><br>关于 Redis 属于旁路缓存，本篇讲的很清楚，就是需要在业务代码中显式的增加缓存操作逻辑。记住这一条，不光是 Redis，所有的旁路缓存问题应该都可以面试了。<br><br>另外提到了，在使用 Redis 是一般不使用 异步写回策略的读写缓存模式，因为 Redis 没法实现在脏数据被淘汰时，自行写回数据库。","like_count":0},{"had_liked":false,"id":270368,"user_name":"第一装甲集群司令克莱斯特","can_delete":false,"product_type":"c1","uid":1265707,"ip_address":"","ucode":"4E8FBB23AD860B","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/2b/2344cdaa.jpg","comment_is_top":false,"comment_ctime":1609084199,"is_pvip":false,"replies":[{"id":"98419","content":"温故而知新 ：）","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1609721060,"ip_address":"","comment_id":270368,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609084199","product_id":100056701,"comment_content":"书读百遍，多学几次，多思考，每次都有新收获！","like_count":0,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512596,"discussion_content":"温故而知新 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609721060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266344,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1607307908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607307908","product_id":100056701,"comment_content":"温故而知新","like_count":0},{"had_liked":false,"id":261257,"user_name":"Geek_f00f74","can_delete":false,"product_type":"c1","uid":2179830,"ip_address":"","ucode":"7A0E89CB0AF499","user_header":"","comment_is_top":false,"comment_ctime":1605252643,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605252643","product_id":100056701,"comment_content":"第31讲问题的回答，第三种情况没理解？因为老师讲的：第一种情况下事务修改的数据会丢失，事务的原子性能得到保证。而到了第三种情况，事务修改的数据就会全部丢失，也就谈不上原子性了。这不一致呀，请老师详细解释下第三种情况为何不保证原子性","like_count":0,"discussions":[{"author":{"id":1667353,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcgKLQZibvbXn3kMdLdRsHcmeqNur4AAMGCmHEb9C4uGNQg7dLon7RVGAibeFKgoVfjrpSCIJRISxg/132","nickname":"lztby","note":"","ucode":"8D223B7BFA772A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371820,"discussion_content":"因为没有rdb文件生成，所以reids数据库相当于被清空了，自然不用谈原子性了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620007094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261252,"user_name":"Geek_f00f74","can_delete":false,"product_type":"c1","uid":2179830,"ip_address":"","ucode":"7A0E89CB0AF499","user_header":"","comment_is_top":false,"comment_ctime":1605252373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605252373","product_id":100056701,"comment_content":"请教老师，采用哨兵机制，redis在出现网络分区时，会出现脑裂吗","like_count":0}]}