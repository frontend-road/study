{"id":99505,"title":"19 | 建立数据通路（下）：指令+运算=CPU","content":"<p>上一讲，我们讲解了时钟信号是怎么实现的，以及怎么利用这个时钟信号，来控制数据的读写，可以使得我们能把需要的数据“存储”下来。那么，这一讲，我们要让计算机“自动”跑起来。</p><p>通过一个时钟信号，我们可以实现计数器，这个会成为我们的PC寄存器。然后，我们还需要一个能够帮我们在内存里面寻找指定数据地址的译码器，以及解析读取到的机器指令的译码器。这样，我们就能把所有学习到的硬件组件串联起来，变成一个CPU，实现我们在计算机指令的执行部分的运行步骤。</p><h2>PC寄存器所需要的计数器</h2><p>我们常说的PC寄存器，还有个名字叫程序计数器。下面我们就来看看，它为什么叫作程序计数器。</p><p>有了时钟信号，我们可以提供定时的输入；有了D型触发器，我们可以在时钟信号控制的时间点写入数据。我们把这两个功能组合起来，就可以实现一个自动的计数器了。</p><p>加法器的两个输入，一个始终设置成1，另外一个来自于一个D型触发器A。我们把加法器的输出结果，写到这个D型触发器A里面。于是，D型触发器里面的数据就会在固定的时钟信号为1的时候更新一次。</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/4c/1ed21092022057ed192a7d9aff76144c.jpg?wh=2242*1560\" alt=\"\"></p><p>这样，我们就有了一个每过一个时钟周期，就能固定自增1的自动计数器了。这个自动计数器，可以拿来当我们的PC寄存器。事实上，PC寄存器的这个PC，英文就是Program Counter，也就是<strong>程序计数器</strong>的意思。</p><!-- [[[read_end]]] --><p>每次自增之后，我们可以去对应的D型触发器里面取值，这也是我们下一条需要运行指令的地址。前面第5讲我们讲过，同一个程序的指令应该要顺序地存放在内存里面。这里就和前面对应上了，顺序地存放指令，就是为了让我们通过程序计数器就能定时地不断执行新指令。</p><p>加法计数、内存取值，乃至后面的命令执行，最终其实都是由我们一开始讲的时钟信号，来控制执行时间点和先后顺序的，这也是我们需要时序电路最核心的原因。</p><p>在最简单的情况下，我们需要让每一条指令，从程序计数，到获取指令、执行指令，都在一个时钟周期内完成。如果PC寄存器自增地太快，程序就会出错。因为前一次的运算结果还没有写回到对应的寄存器里面的时候，后面一条指令已经开始读取里面的数据来做下一次计算了。这个时候，如果我们的指令使用同样的寄存器，前一条指令的计算就会没有效果，计算结果就错了。</p><p>在这种设计下，我们需要在一个时钟周期里，确保执行完一条最复杂的CPU指令，也就是耗时最长的一条CPU指令。这样的CPU设计，我们称之为<strong>单指令周期处理器</strong>（Single Cycle Processor）。</p><p>很显然，这样的设计有点儿浪费。因为即便只调用一条非常简单的指令，我们也需要等待整个时钟周期的时间走完，才能执行下一条指令。在后面章节里我们会讲到，通过流水线技术进行性能优化，可以减少需要等待的时间，这里我们暂且说到这里。</p><h2>读写数据所需要的译码器</h2><p>现在，我们的数据能够存储在D型触发器里了。如果我们把很多个D型触发器放在一起，就可以形成一块很大的存储空间，甚至可以当成一块内存来用。像我现在手头这台电脑，有16G内存。那我们怎么才能知道，写入和读取的数据，是在这么大的内存的哪几个比特呢？</p><p>于是，我们就需要有一个电路，来完成“寻址”的工作。这个“寻址”电路，就是我们接下来要讲的译码器。</p><p>在现在实际使用的计算机里面，内存所使用的DRAM，并不是通过上面的D型触发器来实现的，而是使用了一种CMOS芯片来实现的。不过，这并不影响我们从基础原理方面来理解译码器。在这里，我们还是可以把内存芯片，当成是很多个连在一起的D型触发器来实现的。</p><p>如果把“寻址”这件事情退化到最简单的情况，就是在两个地址中，去选择一个地址。这样的电路，我们叫作<strong>2-1选择器</strong>。我把它的电路实现画在了这里。</p><p>我们通过一个反相器、两个与门和一个或门，就可以实现一个2-1选择器。通过控制反相器的输入是0还是1，能够决定对应的输出信号，是和地址A，还是地址B的输入信号一致。</p><p><img src=\"https://static001.geekbang.org/resource/image/38/a0/383bfbb085c1eeb9b9473ae6f18e97a0.jpeg?wh=2542*1255\" alt=\"\"></p><center><span class=\"reference\">2-1选择器电路示意图</span></center><p>一个反向器只能有0和1这样两个状态，所以我们只能从两个地址中选择一个。如果输入的信号有三个不同的开关，我们就能从$2^3$，也就是8个地址中选择一个了。这样的电路，我们就叫<strong>3-8译码器</strong>。现代的计算机，如果CPU是64位的，就意味着我们的寻址空间也是$2^{64}$，那么我们就需要一个有64个开关的译码器。</p><p><img src=\"https://static001.geekbang.org/resource/image/40/01/4002b5f8f60a913e655d5268348ee201.jpeg?wh=2482*1105\" alt=\"\"></p><center><span class=\"reference\">当我们把译码器和内存连到一起时，通常会组成这样一个电路</span></center><p>所以说，其实译码器的本质，就是从输入的多个位的信号中，根据一定的开关和电路组合，选择出自己想要的信号。除了能够进行“寻址”之外，我们还可以把对应的需要运行的指令码，同样通过译码器，找出我们期望执行的指令，也就是在之前我们讲到过的opcode，以及后面对应的操作数或者寄存器地址。只是，这样的“译码器”，比起2-1选择器和3-8译码器，要复杂的多。</p><h2>建立数据通路，构造一个最简单的CPU</h2><p>D触发器、自动计数以及译码器，再加上一个我们之前说过的ALU，我们就凑齐了一个拼装一个CPU必须要的零件了。下面，我们就来看一看，怎么把这些零件组合起来，才能实现指令执行和算术逻辑计算的CPU。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/71/6863e10fc635791878d1ecd57618b871.jpeg?wh=2626*2200\" alt=\"\"></p><center><span class=\"reference\">CPU实现的抽象逻辑图</span></center><ol>\n<li>首先，我们有一个自动计数器。这个自动计数器会随着时钟主频不断地自增，来作为我们的PC寄存器。</li>\n<li>在这个自动计数器的后面，我们连上一个译码器。译码器还要同时连着我们通过大量的D触发器组成的内存。</li>\n<li>自动计数器会随着时钟主频不断自增，从译码器当中，找到对应的计数器所表示的内存地址，然后读取出里面的CPU指令。</li>\n<li>读取出来的CPU指令会通过我们的CPU时钟的控制，写入到一个由D触发器组成的寄存器，也就是指令寄存器当中。</li>\n<li>在指令寄存器后面，我们可以再跟一个译码器。这个译码器不再是用来寻址的了，而是把我们拿到的指令，解析成opcode和对应的操作数。</li>\n<li>当我们拿到对应的opcode和操作数，对应的输出线路就要连接ALU，开始进行各种算术和逻辑运算。对应的计算结果，则会再写回到D触发器组成的寄存器或者内存当中。</li>\n</ol><p>这样的一个完整的通路，也就完成了我们的CPU的一条指令的执行过程。在这个过程中，你会发现这样几个有意思的问题。</p><p>第一个，是我们之前在<a href=\"https://time.geekbang.org/column/article/94075\">第6讲</a>讲过的程序跳转所使用的条件码寄存器。那时，讲计算机的指令执行的时候，我们说高级语言中的if…else，其实是变成了一条cmp指令和一条jmp指令。cmp指令是在进行对应的比较，比较的结果会更新到条件码寄存器当中。jmp指令则是根据条件码寄存器当中的标志位，来决定是否进行跳转以及跳转到什么地址。</p><p>不知道你当时看到这个知识点的时候，有没有一些疑惑，为什么我们的if…else会变成这样两条指令，而不是设计成一个复杂的电路，变成一条指令？到这里，我们就可以解释了。这样分成两个指令实现，完全匹配好了我们在电路层面，“译码-执行-更新寄存器“这样的步骤。</p><p>cmp指令的执行结果放到了条件码寄存器里面，我们的条件跳转指令也是在ALU层面执行的，而不是在控制器里面执行的。这样的实现方式在电路层面非常直观，我们不需要一个非常复杂的电路，就能实现if…else的功能。</p><p>第二个，是关于我们在<a href=\"https://time.geekbang.org/column/article/98872\">第</a><a href=\"https://time.geekbang.org/column/article/98872\">17讲</a>里讲到的指令周期、CPU周期和时钟周期的差异。在上面的抽象的逻辑模型中，你很容易发现，我们执行一条指令，其实可以不放在一个时钟周期里面，可以直接拆分到多个时钟周期。</p><p>我们可以在一个时钟周期里面，去自增PC寄存器的值，也就是指令对应的内存地址。然后，我们要根据这个地址从D触发器里面读取指令，这个还是可以在刚才那个时钟周期内。但是对应的指令写入到指令寄存器，我们可以放在一个新的时钟周期里面。指令译码给到ALU之后的计算结果，要写回到寄存器，又可以放到另一个新的时钟周期。所以，执行一条计算机指令，其实可以拆分到很多个时钟周期，而不是必须使用单指令周期处理器的设计。</p><p>因为从内存里面读取指令时间很长，所以如果使用单指令周期处理器，就意味着我们的指令都要去等待一些慢速的操作。这些不同指令执行速度的差异，也正是计算机指令有指令周期、CPU周期和时钟周期之分的原因。因此，现代我们优化CPU的性能时，用的CPU都不是单指令周期处理器，而是通过流水线、分支预测等技术，来实现在一个周期里同时执行多个指令。</p><h2>总结延伸</h2><p>好了，今天我们讲完了，怎么通过连接不同功能的电路，实现出一个完整的CPU。</p><p>我们可以通过自动计数器的电路，来实现一个PC寄存器，不断生成下一条要执行的计算机指令的内存地址。然后通过译码器，从内存里面读出对应的指令，写入到D触发器实现的指令寄存器中。再通过另外一个译码器，把它解析成我们需要执行的指令和操作数的地址。这些电路，组成了我们计算机五大组成部分里面的控制器。</p><p>我们把opcode和对应的操作数，发送给ALU进行计算，得到计算结果，再写回到寄存器以及内存里面来，这个就是我们计算机五大组成部分里面的运算器。</p><p>我们的时钟信号，则提供了协调这样一条条指令的执行时间和先后顺序的机制。同样的，这也带来了一个挑战，那就是单指令周期处理器去执行一条指令的时间太长了。而这个挑战，也是我们接下来的几讲里要解答的问题。</p><h2>推荐阅读</h2><p>《编码：隐匿在计算机软硬件背后的语言》的第17章，用更多细节的流程来讲解了CPU的数据通路。《计算机组成与设计 硬件/软件接口》的4.1到4.4小节，从另外一个层面和角度讲解了CPU的数据通路的建立，推荐你阅读一下。</p><h2>课后思考</h2><p>CPU在执行无条件跳转的时候，不需要通过运算器以及ALU，可以直接在控制器里面完成，你能说说这是为什么吗？</p><p>欢迎在留言区写下你的思考和疑惑，你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><p></p>","comments":[{"had_liked":false,"id":210556,"user_name":"姜海天","can_delete":false,"product_type":"c1","uid":1897988,"ip_address":"","ucode":"2EAFDCCE9648AE","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/04/def49489.jpg","comment_is_top":false,"comment_ctime":1587787332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"173386479172","product_id":100026001,"comment_content":"强烈推荐一本书《自己动手写CPU》，使用这本书，再结合老师的课程，可以自己实现一个简单的CPU！这本书比较友好，是入门级书籍，理论+实战，能够更好地掌握计算机组成原理的理论知识~~","like_count":40},{"had_liked":false,"id":101593,"user_name":"小海海","can_delete":false,"product_type":"c1","uid":1158040,"ip_address":"","ucode":"C2FB9B6BCB4631","user_header":"https://static001.geekbang.org/account/avatar/00/11/ab/98/6f29f4f2.jpg","comment_is_top":false,"comment_ctime":1559877400,"is_pvip":false,"replies":[{"id":"37090","content":"小海海同学你好，<br><br>回答正确😀","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1560259614,"ip_address":"","comment_id":101593,"utype":1}],"discussion_count":1,"race_medal":0,"score":"113229027096","product_id":100026001,"comment_content":"(手滑点了保存，接上条)无条件跳转意味着没有计算的逻辑，应该是可以不经过ALU的，但是要控制器把PC设置成跳转后的指令地址，不知我理解的对不对🤣","like_count":26,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453026,"discussion_content":"小海海同学你好，\n\n回答正确😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560259614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101623,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1559892066,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78869303394","product_id":100026001,"comment_content":"《编码：隐匿在计算机软硬件背后的语言》这本书这几天看完了，写得真是很不错。希望老师再多推荐一些好看的书。","like_count":18},{"had_liked":false,"id":101588,"user_name":"小海海","can_delete":false,"product_type":"c1","uid":1158040,"ip_address":"","ucode":"C2FB9B6BCB4631","user_header":"https://static001.geekbang.org/account/avatar/00/11/ab/98/6f29f4f2.jpg","comment_is_top":false,"comment_ctime":1559877007,"is_pvip":false,"replies":[{"id":"37117","content":"👍","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1560262142,"ip_address":"","comment_id":101588,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31624648079","product_id":100026001,"comment_content":"@陈华应 我的理解无条件跳转就是goto，是没有比较结果的","like_count":7,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453024,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560262142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109077,"user_name":"张立昊Leon","can_delete":false,"product_type":"c1","uid":1321002,"ip_address":"","ucode":"2D80F71C0BC83E","user_header":"https://static001.geekbang.org/account/avatar/00/14/28/2a/173ea0e1.jpg","comment_is_top":false,"comment_ctime":1561956937,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"27331760713","product_id":100026001,"comment_content":"还记得当年数电考试分还挺高的，不知道有啥用。后面就直接学c++，嵌入式系统之类的课程，跳过了中间的计算机组成，操作系统之类的东西，万恶的电气系学科体系...嵌入式系统当时学得完全不知所云，也极大的损害了我对这些东西的兴趣，今天在这里总算补学了一些重要的东西啊","like_count":6,"discussions":[{"author":{"id":1319117,"avatar":"https://static001.geekbang.org/account/avatar/00/14/20/cd/c1838842.jpg","nickname":"RebeccaZzz","note":"","ucode":"95E3496A0A0CC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402553,"discussion_content":"测控表示同样的体验","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1633915829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1792930,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5b/a2/78f3bac2.jpg","nickname":"周一见","note":"","ucode":"3EA08791982739","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393437,"discussion_content":"我跟你一样，电气自动化，学了模电数电，然后就直接上C语言，嵌入式，没学过计算机组成和操作系统，连不起来啊，各科学的都行，但不知其所以然。现在工作来恶补，要是当时连起来上的话，应该好理解深刻很多。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631434089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1352674,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a3/e2/439731b2.jpg","nickname":"霍格沃兹小学徒","note":"","ucode":"EB52B060CF9ED9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554745,"discussion_content":"自动化+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646578123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1367877,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/VqgchrJWswwSLmxf1ict6icDDlZG5wChBEiaiblnJAQEdu1nYtB4EZq07mibUurOSDFr16dho6DhGyOpIW4eib57lK8Q/132","nickname":"箭指流云","note":"","ucode":"21571A7D60B10D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351625,"discussion_content":"没毛病","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614348308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146342,"user_name":"Im Robin","can_delete":false,"product_type":"c1","uid":1183477,"ip_address":"","ucode":"924B7DC8CD38EF","user_header":"https://static001.geekbang.org/account/avatar/00/12/0e/f5/c4a26e84.jpg","comment_is_top":false,"comment_ctime":1572502880,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18752372064","product_id":100026001,"comment_content":"老师你好，有一个问题很困惑，PC寄存器自动加1，我怎么感觉应该是自动加指令字节数啊，这样寄存器里才能存下一个指令的起始地址，如果PC寄存器里只是数值，那么程序如何从PC寄存器中取出指令地址呢，麻烦老师给予解答，谢谢","like_count":4,"discussions":[{"author":{"id":1260883,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3d/53/9d8a1207.jpg","nickname":"尼欧","note":"","ucode":"39D4D1F5F51764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340274,"discussion_content":"就是加当前指令的长度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609941383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173598,"user_name":"Leoorz","can_delete":false,"product_type":"c1","uid":1030657,"ip_address":"","ucode":"8912628AD6ADE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","comment_is_top":false,"comment_ctime":1579608993,"is_pvip":false,"replies":[{"id":"68032","content":"HardToGiveaName同学，<br><br>你好，这样理解没有问题","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580616345,"ip_address":"","comment_id":173598,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14464510881","product_id":100026001,"comment_content":"老师，对于图1的PC计数器，有个疑问，如果图中的D触发器，是电平触发的，那CLK置1的时间段内，<br>触发器输出-&gt;加法器+1-&gt;触发器输出......    应该一直进行该循环计算并自增，只有当D触发器是 沿触发的，才会在时钟上升沿只加1次，不知道理解是否有误","like_count":3,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482129,"discussion_content":"HardToGiveaName同学，\n\n你好，这样理解没有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580616345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102418,"user_name":"鱼向北游","can_delete":false,"product_type":"c1","uid":1439908,"ip_address":"","ucode":"580EC7DCE57E9A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IPdZZXuHVMibwfZWmm7NiawzeEFGsaRoWjhuN99iaoj5amcRkiaOePo6rH1KJ3jictmNlic4OibkF4I20vOGfwDqcBxfA/132","comment_is_top":false,"comment_ctime":1560218075,"is_pvip":false,"replies":[{"id":"37108","content":"鱼向北游同学，你好<br><br>cmp是一条单独的指令，和跳转是否是有条件的没有关系。无条件跳转不需要检查条件码寄存器哦。可以想想这样的话，在硬件上有什么区别呢？","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1560261362,"ip_address":"","comment_id":102418,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14445119963","product_id":100026001,"comment_content":"应该是无条件跳转没有cmp吧","like_count":3,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453413,"discussion_content":"鱼向北游同学，你好\n\ncmp是一条单独的指令，和跳转是否是有条件的没有关系。无条件跳转不需要检查条件码寄存器哦。可以想想这样的话，在硬件上有什么区别呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560261362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157208,"user_name":"wei","can_delete":false,"product_type":"c1","uid":1013347,"ip_address":"","ucode":"345682FEFD1A90","user_header":"","comment_is_top":false,"comment_ctime":1575082729,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10165017321","product_id":100026001,"comment_content":"老师好，“加法器的两个输入，一个始终设置成 1，另外一个来自于一个 D 型触发器 A。我们把加法器的输出结果，写到这个 D 型触发器 A 里面。于是，D 型触发器里面的数据就会在固定的时钟信号为 1 的时候更新一次。” 这里我明白，为什么时钟信号为 1 的时候只会更新一次，而不是两次或更多次？","like_count":2},{"had_liked":false,"id":129978,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1567346706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10157281298","product_id":100026001,"comment_content":"“怎样通过连接不同功能的电路，实现出一个完整的CPU” 讲的真好<br>day19 笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;11431367.html","like_count":2},{"had_liked":false,"id":106222,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1561211617,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10151146209","product_id":100026001,"comment_content":"老师好，读取数据的那个寄存器就是。当前指令地址+指令长度。每次就能取到下一条指令了是吧?这里的内存地址都是虚存地址么?物理内存很容易就不连续吧。特别是那种动态申请内存的。还是说Java这样的编程语言，编译后的机器码就是在物理内存里顺序存储的?","like_count":2,"discussions":[{"author":{"id":2599204,"avatar":"https://static001.geekbang.org/account/avatar/00/27/a9/24/ab8e912d.jpg","nickname":"1948","note":"","ucode":"138137ECDEA808","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384573,"discussion_content":"java的对象在内存中存储时，所占用的空间也是连续的，不然就不会有jvm的内存碎片化问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626667502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102278,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1560175213,"is_pvip":false,"replies":[{"id":"37085","content":"humor同学你好，<br><br>一个指令需要的时钟周期是固定的，并不是多少个都可以啊。<br><br>","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1560259186,"ip_address":"","comment_id":102278,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10150109805","product_id":100026001,"comment_content":"一个指令的执行想用多少个时钟周期都可以吗？","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453335,"discussion_content":"humor同学你好，\n\n一个指令需要的时钟周期是固定的，并不是多少个都可以啊。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560259186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1209653,"avatar":"https://static001.geekbang.org/account/avatar/00/12/75/35/a0c15ca8.jpg","nickname":"一頭蠻牛","note":"","ucode":"887E596A1DBF2D","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":577498,"discussion_content":"他的意思应该是 设计指令的时候想设计多少时钟周期给这个指令 没有硬性限制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656148611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":453335,"ip_address":""},"score":577498,"extra":""}]},{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14984,"discussion_content":"不同指令需要的时钟周期可以设置不同个吗，还有就是时钟周期可以并行吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568793116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101554,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1559869814,"is_pvip":true,"replies":[{"id":"37111","content":"既然是“无条件”了，当然不依赖比较结果啦。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1560261658,"ip_address":"","comment_id":101554,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10149804406","product_id":100026001,"comment_content":"无条件跳转不需要依赖于比较结果吗？","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453011,"discussion_content":"既然是“无条件”了，当然不依赖比较结果啦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560261658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287209,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1617841738,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5912809034","product_id":100026001,"comment_content":"总结:我们的程序计数器pc寄存器，随着时钟周期的自增会去内存中通过地址译码器去拿到指令，指令会写入到指令寄存器，指令寄存器会通过译码器去解析opcode和操作数据，连接逻辑运算单元alu进行计算，alu会把计算结果最后写入内存，这样完成了一个指令周期。这一整个时钟周期太长，内存与cpu的速度相差太大，就把整个指令周期进行细分，再通过流水线和分支预测来操作指令的运行顺序性和提高性能。","like_count":1},{"had_liked":false,"id":264824,"user_name":"进击的巨人","can_delete":false,"product_type":"c1","uid":1167120,"ip_address":"","ucode":"DB62D77D460BF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/10/9fa2e5ba.jpg","comment_is_top":false,"comment_ctime":1606662840,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5901630136","product_id":100026001,"comment_content":"表示看的云里雾里，一脸茫然","like_count":1,"discussions":[{"author":{"id":2413481,"avatar":"https://static001.geekbang.org/account/avatar/00/24/d3/a9/2b84cc97.jpg","nickname":"Linux C·Core Api","note":"","ucode":"E370F0627E8B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385619,"discussion_content":"原来不是你一个人。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627182606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228799,"user_name":"梨还羽","can_delete":false,"product_type":"c1","uid":1243267,"ip_address":"","ucode":"F6C89EF10DFC89","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/83/008b7b58.jpg","comment_is_top":false,"comment_ctime":1592811980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887779276","product_id":100026001,"comment_content":"请问有条件跳转是经过ALU读取条件寄存器发现满足条件后，由ALU去修改PC寄存器里的下一条指令地址吗？","like_count":1},{"had_liked":false,"id":128450,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1566882134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5861849430","product_id":100026001,"comment_content":"流水线让我想起了大学时的一门选修课———项目管理","like_count":1},{"had_liked":false,"id":107093,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1561457929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856425225","product_id":100026001,"comment_content":"因为无条件跳转不需要访问条件码寄存器，而且地址跳转就是一个直接寻址的过程，因此不需要通过运算器和ALU","like_count":1},{"had_liked":false,"id":358401,"user_name":"woodie","can_delete":false,"product_type":"c1","uid":2004783,"ip_address":"北京","ucode":"1C2925AD8191DA","user_header":"","comment_is_top":false,"comment_ctime":1664271342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664271342","product_id":100026001,"comment_content":"这3节内容有点难理解，特别是数字电路不熟悉的我，翻阅了一些其他的资料，了解了一些关于RS触发器、D触发器的构成。但对于我来说，学习这门课程的目的是了解计算机的工作原理，只需要知道时钟周期，CPU周期，指令周期，复合逻辑电路，时序逻辑电路，存储数据通过大量的D触发器构成，知道这些概念就可以了。","like_count":0},{"had_liked":false,"id":348149,"user_name":"！null","can_delete":false,"product_type":"c1","uid":1242483,"ip_address":"","ucode":"4E5B7922980397","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/73/f7d3a996.jpg","comment_is_top":false,"comment_ctime":1654780468,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654780468","product_id":100026001,"comment_content":"没看懂2-1选择器的只有我一个吗？","like_count":0},{"had_liked":false,"id":347364,"user_name":"太阳与冰","can_delete":false,"product_type":"c1","uid":2742520,"ip_address":"","ucode":"C2B97279BD66C7","user_header":"https://static001.geekbang.org/account/avatar/00/29/d8/f8/a775cde7.jpg","comment_is_top":false,"comment_ctime":1653969341,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653969341","product_id":100026001,"comment_content":"各个过程中如果不使用单指令时钟周期的话，因为是在同一个流水线，会存在等待的问题么？比如计数器运行很快，但是内存fetch指令相对较慢，那这个时候计数器是不是要等待？","like_count":0},{"had_liked":false,"id":336062,"user_name":"何同一","can_delete":false,"product_type":"c1","uid":2637195,"ip_address":"","ucode":"3270B66A34F29A","user_header":"https://static001.geekbang.org/account/avatar/00/28/3d/8b/47bcc851.jpg","comment_is_top":false,"comment_ctime":1645874876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645874876","product_id":100026001,"comment_content":"无条件跳转不需要进行计算，将数据地址信号输入地址译码器后可直接获得下一条指令。这一讲解决了我多年的疑惑，写的很好。","like_count":0},{"had_liked":false,"id":278884,"user_name":"Black🐯","can_delete":false,"product_type":"c1","uid":1593345,"ip_address":"","ucode":"9AD756BD5D1C4D","user_header":"https://static001.geekbang.org/account/avatar/00/18/50/01/128bdef2.jpg","comment_is_top":false,"comment_ctime":1613438927,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1613438927","product_id":100026001,"comment_content":"老师您好，有一点疑问：自动计数器加一要等当前指令执行完成，所以自动计时器的时钟信号周期要和指令周期保存一致，这样理解对吗？","like_count":0,"discussions":[{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375299,"discussion_content":"PC自增应该是和时钟信号同步，和指令执行无关吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621566606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277596,"user_name":"骨汤鸡蛋面","can_delete":false,"product_type":"c1","uid":1050002,"ip_address":"","ucode":"2AC141A523E710","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/92/b609f7e3.jpg","comment_is_top":false,"comment_ctime":1612488178,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1612488178","product_id":100026001,"comment_content":"老师，问个小白问题哈：ALU中应该有很多组件，比如加法器、乘法器等，ALU是如何根据opcode触发&#47;选择加法器或乘法器来处理数据呢？","like_count":0},{"had_liked":false,"id":272884,"user_name":"Bruce","can_delete":false,"product_type":"c1","uid":2403865,"ip_address":"","ucode":"2EA3B9DBF5821C","user_header":"https://static001.geekbang.org/account/avatar/00/24/ae/19/5f2d96ce.jpg","comment_is_top":false,"comment_ctime":1610347022,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1610347022","product_id":100026001,"comment_content":"感觉这两章的内容看的云里雾里的了。<br>首先，这个由D触发器组成的内存，我可能就没有理解，后面更难理解了，能给个例子或者图示啥的吗？我的理解是，比如内存大小是2^4 = 16个字节。那么就是从0000 - 1111这样。其中每一个地址存储的是一个字节，也就是8个bit，需要8个D触发器，那么，一共需要16*8=128个D触发器，是这样理解的吗？<br>那寻址又是啥意思啊？PC寄存器能自增，我理解了。比如现在PC寄存器里的数字是6，我怎么寻址？PC寄存器里面究竟是存的下一条指令的地址还是存储的一个数值啊？这个6是内存的一个地址6还是什么偏移量数值啊？另外，我不是记得前面说在物理内存里实际上一个程序不是连续的吗？虚拟地址才是连续的吧？那我这个PC寄存器里的是虚拟地址吗？虚拟地址偏移量？相对地址？<br>好吧，如果就当做是地址是6,即0110，那什么是寻址？地址不是都已经有了，是0110了吗？给到地址总线0110，让他去内存读相应地址的数据，不就是一个指令了吗？放到指令寄存器就OK了啊。真的云里雾里了。","like_count":0,"discussions":[{"author":{"id":2325145,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkF14X58pdmTgBWwWzxVicJ0LQjNXiceL3xSj73eC4AZheyIPtf8tyqTicbP4VXia1TmDlm9rlCNCuDQ/132","nickname":"Geek_c2c8d1","note":"","ucode":"60B48691C86D6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385336,"discussion_content":"基础知识还不够，PC寄存器存的是下一条指令在内存中的物理地址，这个物理地址是由虚拟地址经过MMU翻译过来的，寻址就是去内存里面找PC寄存器对应的地址，就好比，你知道你家在哪个地址，但是你要找到它，而不是光知道它是多少就行了；找到之后，去执行地址里对应的指令，可能是计算，可能是判断，可能是赋值等。\n\n另外，现在内存不是由D触发器构成的，你可以用D触发器去理解寄存器的构成，它最多只有64位。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627006591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250920,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1601281666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601281666","product_id":100026001,"comment_content":"无条件跳转不需要进行运算，也不需要寄存器，只要更新pc寄存器即可","like_count":0},{"had_liked":false,"id":205682,"user_name":"WENMURAN","can_delete":false,"product_type":"c1","uid":1915404,"ip_address":"","ucode":"5D1CE8B41937C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXNhbTULKiakib8lYXrvGF2zPwfedooBzC2EtSv1nt1MwV1KUvTkcJrvCBFvcdwJicnr3OEXnk9GUCg/132","comment_is_top":false,"comment_ctime":1586701373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586701373","product_id":100026001,"comment_content":"数据通路下：<br>     我们通过一个自动计数器的电路，来实现一个PC寄存器，不断生成下一条要执行的计算机指令的内存地址，然后通过译码器，从内存里读出对应的指令，写入到D触发器实现的指令寄存器中，再通过另外一个译码器，把它解析成我们需要执行的指令和操作数的地址，这些就是计算器中的控制器。<br>我们把opcode和对应的操作数，发送给ALU进行计算，得到计算结果，再写回到寄存器以及内存里，这就是运算器。<br>时钟信号，则提供了协调这样一条条指令的执行时间和先后顺序的机制。","like_count":0},{"had_liked":false,"id":170259,"user_name":"许先森","can_delete":false,"product_type":"c1","uid":1795371,"ip_address":"","ucode":"1F42D4A6B5C6AF","user_header":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","comment_is_top":false,"comment_ctime":1578557969,"is_pvip":false,"replies":[{"id":"68088","content":"许先森同学，<br><br>你好，抱歉我可能没有太理解清楚你的问题，你说的具体的问题是指哪个？","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1580632547,"ip_address":"","comment_id":170259,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578557969","product_id":100026001,"comment_content":"老是您好有个问题：<br>文章说：cmp 指令的执行结果放到了条件码寄存器里面，我们的条件跳转指令也是在 ALU 层面执行的，而不是在控制器里面执行的。这样的实现方式在电路层面非常直观，我们不需要一个非常复杂的电路，就能实现 if…else 的功能。<br>但是else中是jmp指令，也就是无条件跳转，实际是不经过ALU的，而是控制器直接执行的。上文中所说是否有问题？","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480909,"discussion_content":"许先森同学，\n\n你好，抱歉我可能没有太理解清楚你的问题，你说的具体的问题是指哪个？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580632547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148882,"user_name":"寒玉","can_delete":false,"product_type":"c1","uid":1347930,"ip_address":"","ucode":"79159402D241EA","user_header":"https://static001.geekbang.org/account/avatar/00/14/91/5a/a300427d.jpg","comment_is_top":false,"comment_ctime":1573099921,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573099921","product_id":100026001,"comment_content":"一个周期执行多条指令和java里面的多线程意思上是一样的吗？","like_count":0,"discussions":[{"author":{"id":1957001,"avatar":"","nickname":"Geek_13197e","note":"","ucode":"5D0E701F4A9736","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":225177,"discussion_content":"这不是一个粒度的问题吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586351674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146082,"user_name":"Im Robin","can_delete":false,"product_type":"c1","uid":1183477,"ip_address":"","ucode":"924B7DC8CD38EF","user_header":"https://static001.geekbang.org/account/avatar/00/12/0e/f5/c4a26e84.jpg","comment_is_top":false,"comment_ctime":1572429501,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572429501","product_id":100026001,"comment_content":"老师你好，看了好几遍也没理解下面这句，我理解时钟周期（机器时钟）是固定值，也就是1&#47;主频，在这样的语境下，想实现一个时钟周期内执行一个任意的CPU指令，我感觉是不可能的事情，能否帮忙解惑，谢谢<br>——————————————————————————<br>在这种设计下，我们需要在一个时钟周期里，确保执行完一条最复杂的 CPU 指令，也就是耗时最长的一条 CPU 指令。这样的 CPU 设计，我们称之为单指令周期处理器（Single Cycle Processor）。","like_count":0,"discussions":[{"author":{"id":1183477,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0e/f5/c4a26e84.jpg","nickname":"Im Robin","note":"","ucode":"924B7DC8CD38EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41780,"discussion_content":"又从前面章节重新看回这里，自己解答自己一下，单指令周期处理器为了保证一个时钟周期内执行完一个指令的各个阶段，要保证时钟周期时间大于最慢的指令，这样就把机器时钟强行降低了，没有完全发挥出CPU（晶振最大震动频率）的能力，不知道这样理解是否正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572503097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140993,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1571101646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571101646","product_id":100026001,"comment_content":"真的是深入浅出，赞","like_count":0},{"had_liked":false,"id":123948,"user_name":"小先生","can_delete":false,"product_type":"c1","uid":1055214,"ip_address":"","ucode":"E5F2052E0323C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","comment_is_top":false,"comment_ctime":1565783753,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1565783753","product_id":100026001,"comment_content":"为什么我们的 if…else 会变成这样两条指令，而不是设计成一个复杂的电路，变成一条指令？到这里，我们就可以解释了。这样分成两个指令实现，完全匹配好了我们在电路层面，“译码 - 执行 - 更新寄存器“这样的步骤。<br><br>请问老师这段话，是什么意思，还是没看懂。","like_count":0,"discussions":[{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":126998,"discussion_content":"并且else中所用jmp是无条件跳转指令，直接goto，不用经过ALU，控制器中直接跳转。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578558036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14987,"discussion_content":"译码 - 执行 - 更新寄存器“，我的理解是if指令时，是cmp操作，需要用到ALU进行运算，然后else，是jmp，并不需要通过运算器，直接通过控制器操作即可完成","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568793238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106235,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1561214490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561214490","product_id":100026001,"comment_content":"老师好!无条件调整，直接把跳转过去的指令跟在当前指令后面可以么?变成顺序的。<br>D触发器感觉用处很大啊，存储相关的都可以通过它实现，寄存器的速度比内存快很多，和硬件实现有关系么比如D触发器比CMOS快?<br>高速缓存使用触发器实现的还是CMOS啊?","like_count":0}]}