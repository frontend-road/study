{"id":274106,"title":"02 基础篇 | Page Cache是怎样产生和释放的？","content":"<p>你好，我是邵亚方。</p><p>上一讲，我们主要讲了“什么是Page Cache”（What），“为什么需要Page Cache”（Why），我们这堂课还需要继续了解一下“How”：<strong>也就是Page Cache是如何产生和释放的。</strong></p><p>在我看来，对Page Cache的“What-Why-How”都有所了解之后，你才会对它引发的问题，比如说Page Cache引起的load飙高问题或者应用程序的RT抖动问题更加了然于胸，从而防范于未然。</p><p>其实，Page Cache是如何产生和释放的，通俗一点的说就是它的“生”（分配）与“死”（释放），即Page Cache的生命周期，那么接下来，我们就先来看一下它是如何“诞生”的。</p><h2>Page Cache是如何“诞生”的？</h2><p>Page Cache的产生有两种不同的方式：</p><ul>\n<li>Buffered I/O（标准I/O）；</li>\n<li>Memory-Mapped I/O（存储映射I/O）。</li>\n</ul><p>这两种方式分别都是如何产生Page Cache的呢？来看下面这张图：</p><p><img src=\"https://static001.geekbang.org/resource/image/4e/52/4eb820e15a5560dee4b847227ee75752.jpg?wh=3957*2600\" alt=\"\" title=\"Page Cache产生方式示意图\"></p><p>从图中你可以看到，虽然二者都能产生Page Cache，但是二者的还是有些差异的：</p><p>标准I/O是写的(write(2))用户缓冲区(Userpace Page对应的内存)，然后再将用户缓冲区里的数据拷贝到内核缓冲区(Pagecache Page对应的内存)；如果是读的(read(2))话则是先从内核缓冲区拷贝到用户缓冲区，再从用户缓冲区读数据，也就是buffer和文件内容不存在任何映射关系。</p><!-- [[[read_end]]] --><p>对于存储映射I/O而言，则是直接将Pagecache Page给映射到用户地址空间，用户直接读写Pagecache Page中内容。</p><p>显然，存储映射I/O要比标准I/O效率高一些，毕竟少了“用户空间到内核空间互相拷贝”的过程。这也是很多应用开发者发现，为什么使用内存映射I/O比标准I/O方式性能要好一些的主要原因。</p><p>我们来用具体的例子演示一下Page Cache是如何“诞生”的，就以其中的标准I/O为例，因为这是我们最常使用的一种方式，如下是一个简单的示例脚本：</p><pre><code>#!/bin/sh\n\n#这是我们用来解析的文件\nMEM_FILE=&quot;/proc/meminfo&quot;\n\n#这是在该脚本中将要生成的一个新文件\nNEW_FILE=&quot;/home/yafang/dd.write.out&quot;\n\n#我们用来解析的Page Cache的具体项\nactive=0\ninactive=0\npagecache=0\n\nIFS=' '\n\n#从/proc/meminfo中读取File Page Cache的大小\nfunction get_filecache_size()\n{\n        items=0\n        while read line\n        do\n                if [[ &quot;$line&quot; =~ &quot;Active:&quot; ]]; then\n                        read -ra ADDR &lt;&lt;&lt;&quot;$line&quot;\n                        active=${ADDR[1]}\n                        let &quot;items=$items+1&quot;\n                elif [[  &quot;$line&quot; =~ &quot;Inactive:&quot; ]]; then\n                        read -ra ADDR &lt;&lt;&lt;&quot;$line&quot;\n                        inactive=${ADDR[1]}\n                        let &quot;items=$items+1&quot;\n                fi  \n\n\n                if [ $items -eq 2 ]; then\n                        break;\n                fi  \n        done &lt; $MEM_FILE\n}\n\n#读取File Page Cache的初始大小\nget_filecache_size\nlet filecache=&quot;$active + $inactive&quot;\n\n#写一个新文件，该文件的大小为1048576 KB\ndd if=/dev/zero of=$NEW_FILE bs=1024 count=1048576 &amp;&gt; /dev/null\n\n#文件写完后，再次读取File Page Cache的大小\nget_filecache_size\n\n#两次的差异可以近似为该新文件内容对应的File Page Cache\n#之所以用近似是因为在运行的过程中也可能会有其他Page Cache产生\nlet size_increased=&quot;$active + $inactive - $filecache&quot;\n\n#输出结果\necho &quot;File size 1048576KB, File Cache increased&quot; $size_inc\n</code></pre><p>在这里我提醒你一下，在运行该脚本前你要确保系统中有足够多的free内存（避免内存紧张产生回收行为），最终的测试结果是这样的：</p><blockquote>\n<p>File size 1048576KB, File Cache increased 1048648KB</p>\n</blockquote><p>通过这个脚本你可以看到，在创建一个文件的过程中，代码中/proc/meminfo里的Active(file)和Inactive(file)这两项会随着文件内容的增加而增加，它们增加的大小跟文件大小是一致的（这里之所以略有不同，是因为系统中还有其他程序在运行）。另外，如果你观察得很仔细的话，你会发现增加的Page Cache是Inactive(File)这一项，<strong>你可以去思考一下为什么会这样？</strong>这里就作为咱们这节课的思考题。</p><p>当然，这个过程看似简单，但是它涉及的内核机制还是很多的，换句话说，可能引起问题的地方还是很多的，我们用一张图简单描述下这个过程：</p><p><img src=\"https://static001.geekbang.org/resource/image/c7/5e/c728b8a189fb4e35e536cf131c4d9b5e.jpg?wh=3400*3000\" alt=\"\"></p><p>这个过程大致可以描述为：首先往用户缓冲区buffer(这是Userspace Page)写入数据，然后buffer中的数据拷贝到内核缓冲区（这是Pagecache Page），如果内核缓冲区中还没有这个Page，就会发生Page Fault会去分配一个Page，拷贝结束后该Pagecache Page是一个Dirty Page（脏页），然后该Dirty Page中的内容会同步到磁盘，同步到磁盘后，该Pagecache Page变为Clean Page并且继续存在系统中。</p><p>我建议你可以将Alloc Page理解为Page Cache的“诞生”，将Dirty Page理解为Page Cache的婴幼儿时期（最容易生病的时期），将Clean Page理解为Page Cache的成年时期（在这个时期就很少会生病了）。</p><p><strong>但是请注意，并不是所有人都有童年的</strong>，比如孙悟空，一出生就是成人了，Page Cache也一样，如果是读文件产生的Page Cache，它的内容跟磁盘内容是一致的，所以它一开始是Clean Page，除非改写了里面的内容才会变成Dirty Page（返老还童）。</p><p>就像我们为了让婴幼儿健康成长，要悉心照料他/她一样，为了提前发现或者预防婴幼儿时期的Page Cache发病，我们也需要一些手段来观测它：</p><pre><code>$ cat /proc/vmstat | egrep &quot;dirty|writeback&quot;\nnr_dirty 40\nnr_writeback 2\n</code></pre><p>如上所示，nr_dirty表示当前系统中积压了多少脏页，nr_writeback则表示有多少脏页正在回写到磁盘中，他们两个的单位都是Page(4KB)。</p><p>通常情况下，小朋友们（Dirty Pages）聚集在一起（脏页积压）不会有什么问题，但在非常时期比如流感期间，就很容易导致聚集的小朋友越多病症就会越严重。与此类似，Dirty Pages如果积压得过多，在某些情况下也会容易引发问题，至于是哪些情况，又会出现哪些问题，我们会在案例篇中具体讲解。</p><p>明白了Page Cache的“诞生”后，我们再来看一下Page Cache的“死亡”：它是如何被释放的？</p><h2>Page Cache是如何“死亡”的？</h2><p>你可以把Page Cache的回收行为(Page Reclaim)理解为Page Cache的“自然死亡”。</p><p>言归正传，我们知道，服务器运行久了后，系统中free的内存会越来越少，用free命令来查看，大部分都会是used内存或者buff/cache内存，比如说下面这台生产环境中服务器的内存使用情况：</p><pre><code>$ free -g\n       total  used  free  shared  buff/cache available\nMem:     125    41     6       0          79        82\nSwap:      0     0     0\n</code></pre><p>free命令中的buff/cache中的这些就是“活着”的Page Cache，那它们什么时候会“死亡”（被回收）呢？我们来看一张图：</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/bb/1d430c93e397e23d67d12e28827c4bbb.jpg?wh=3658*2138\" alt=\"\"></p><p>你可以看到，应用在申请内存的时候，即使没有free内存，只要还有足够可回收的Page Cache，就可以通过回收Page Cache的方式来申请到内存，<strong>回收的方式主要是两种：直接回收和后台回收。</strong></p><p>那它是具体怎么回收的呢？你要怎么观察呢？其实在我看来，观察Page Cache直接回收和后台回收最简单方便的方式是使用sar：</p><pre><code>$ sar -B 1\n02:14:01 PM  pgpgin/s pgpgout/s   fault/s  majflt/s  pgfree/s pgscank/s pgscand/s pgsteal/s    %vmeff\n\n\n02:14:01 PM      0.14    841.53 106745.40      0.00  41936.13      0.00      0.00      0.00      0.00\n02:15:01 PM      5.84    840.97  86713.56      0.00  43612.15    717.81      0.00    717.66     99.98\n02:16:01 PM     95.02    816.53 100707.84      0.13  46525.81   3557.90      0.00   3556.14     99.95\n02:17:01 PM     10.56    901.38 122726.31      0.27  54936.13   8791.40      0.00   8790.17     99.99\n02:18:01 PM    108.14    306.69  96519.75      1.15  67410.50  14315.98     31.48  14319.38     99.80\n02:19:01 PM      5.97    489.67  88026.03      0.18  48526.07   1061.53      0.00   1061.42     99.99\n</code></pre><p>借助上面这些指标，你可以更加明确地观察内存回收行为，下面是这些指标的具体含义：</p><ul>\n<li>pgscank/s : kswapd(后台回收线程)每秒扫描的page个数。</li>\n<li>pgscand/s: Application在内存申请过程中每秒直接扫描的page个数。</li>\n<li>pgsteal/s: 扫描的page中每秒被回收的个数。</li>\n<li>%vmeff: pgsteal/(pgscank+pgscand), 回收效率，越接近100说明系统越安全，越接近0说明系统内存压力越大。</li>\n</ul><p>这几个指标也是通过解析/proc/vmstat里面的数据来得出的，对应关系如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/46/aa/4604ec0da3f87ec003317fb3337fa9aa.jpg?wh=2619*1616\" alt=\"\"></p><p>关于这几个指标我说一个小插曲，要知道，如果Linux Kernel本身设计不当会给你带来困扰。所以，如果你观察到应用程序的结果跟你的预期并不一致，也有可能是因为内核设计上存在问题，你可以对内核持适当的怀疑态度哦，下面这个是我最近遇到的一个案例。</p><p>如果你对Linus有所了解的话，应该会知道Linus对Linux Kernel设计的第一原则是“never break the user space”。很多内核开发者在设计内核特性的时候，会忽略掉新特性对应用程序的影响，比如在前段时间就有人(Google的一个内核开发者)提交了一个patch来修改内存回收这些指标的含义，但是最终被我和另外一个人(Facebook的一个内核开发者)把他的这个改动给否决掉了。具体的细节并不是咱们这节课的重点，我就不多说了，我建议你在课下看这个讨论：<a href=\"https://lore.kernel.org/linux-mm/20200507204913.18661-1-shakeelb@google.com/\">[PATCH] mm: vmscan: consistent update to pgsteal and pgscan</a>，可以看一下内核开发者们在设计内核特性时是如何思考的，这会有利于你更加全面的去了解整个系统，从而让你的应用程序更好地融入到系统中。</p><h2>课堂总结</h2><p>以上就是本节课的全部内容了，本节课，我们主要讲了Page Cache是如何“诞生”的，以及如何“死亡”的，我要强调这样几个重点：</p><ul>\n<li>Page Cache是在应用程序读写文件的过程中产生的，所以在读写文件之前你需要留意是否还有足够的内存来分配Page Cache；</li>\n<li>Page Cache中的脏页很容易引起问题，你要重点注意这一块；</li>\n<li>在系统可用内存不足的时候就会回收Page Cache来释放出来内存，我建议你可以通过sar或者/proc/vmstat来观察这个行为从而更好的判断问题是否跟回收有关</li>\n</ul><p>总的来说，Page Cache的生命周期对于应用程序而言是相对比较透明的，即它的分配与回收都是由操作系统来进行管理的。正是因为这种“透明”的特征，所以应用程序才会难以控制Page Cache，Page Cache才会容易引发那么多问题。在接下来的案例篇里，我们就来看看究竟会引发什么样子的问题，以及你正确的分析思路是什么样子的。</p><h2>课后作业</h2><p>因为每个人的关注点都不一样，对问题的理解也不一样。假如你是一个应用开发者，你会更加关注应用的性能和稳定性；假如你是一个运维人员，你会更加关注系统的稳定性；假如你是初学内核的开发者，你会想要关注内核的实现机制。</p><p>所以我留了不同的作业题，主题是围绕“Inactive与Active Page Cache的关系”当然了，对应的难度也不同：</p><ul>\n<li>\n<p>如果你是一名应用开发者，那么我想问问你为什么第一次读写某个文件，Page Cache是Inactive的？如何让它变成Active的呢？在什么情况下Active的又会变成Inactive的呢？明白了这个问题，你会对应用性能调优有更加深入的理解。</p>\n</li>\n<li>\n<p>如果你是一名运维人员，那么建议你思考一下，系统中有哪些控制项可以影响Inactive与Active Page Cache的大小或者二者的比例？</p>\n</li>\n<li>\n<p>如果你是一名初学内核的开发者，那么我想问你，对于匿名页而言，当产生一个匿名页后它会首先放在Active链表上；而对于文件页而言，当产生一个文件页后它会首先放在Inactive链表上。请问为什么会这样子？这是合理的吗？欢迎在留言区分享你的看法。</p>\n</li>\n</ul><p>感谢你的阅读，如果你认为这节课的内容有收获，也欢迎把它分享给你的朋友，我们下一讲见。</p>","comments":[{"had_liked":false,"id":252590,"user_name":"邵亚方","can_delete":false,"product_type":"c1","uid":1981399,"ip_address":"","ucode":"CDFABCB81B9782","user_header":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","comment_is_top":true,"comment_ctime":1602394838,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"9.2233722575005e+18","product_id":100058001,"comment_content":"课后作业答案：<br>- 为什么第一次读写某个文件，Page Cache 是 Inactive 的？<br>第一次读取文件后，文件内容都是inactive的，只有再次读取这些内容后，才会把它放在active链表上，处于inactive链表上的pagecache在内存紧张是会首先被回收掉，有很多情况下文件内容往往只被读一次，比如日志文件，对于这类典型的one-off文件，它们占用的pagecache需要首先被回收掉；对于业务数据，往往都会读取多次，那么他们就会被放在active链表上，以此来达到保护的目的。<br><br>- 如何让它变成 Active 的呢？<br>第二次读取后，这些内容就会从inactive链表里给promote到active链表里，这也是评论区里有人提到的二次机会法。<br><br>- 在什么情况下 Active 的又会变成 Inactive 的呢？<br>在内存紧张时，会进行内存回收，回收会把inactive list的部分page给回收掉，为了维持inactive&#47;active的平衡，就需要把active list的部分page给demote到inactive list上，demote的原则也是lru。<br><br>- 系统中有哪些控制项可以影响 Inactive 与 Active Page Cache 的大小或者二者的比例？<br>min_free_kbytes会影响整体的pagecache大小;vfs_cache_pressure会影响在回收时回收pagecache和slab的比例; 在开启了swap的情况下，swappiness也会影响pagecache的大小；zone_reclaim_mode会影响node的pagecache大小；extfrag_threshold会影响pagecache的碎片情况。<br><br>- 对于匿名页而言，当产生一个匿名页后它会首先放在 Active 链表上，请问为什么会这样子？这是合理的吗？<br>这是不合理的，内核社区目前在做这一块的改进。具体可以参考https:&#47;&#47;lwn.net&#47;Articles&#47;816771&#47;。<br><br><br>","like_count":52,"discussions":[{"author":{"id":1311125,"avatar":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","nickname":"布拉姆","note":"","ucode":"479FF27D73BCAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548887,"discussion_content":"mark 第二次机会法，避免只读一次的文件大量涌入active。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643436145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243219,"user_name":"zwb","can_delete":false,"product_type":"c1","uid":1019977,"ip_address":"","ucode":"11E279673A098D","user_header":"","comment_is_top":false,"comment_ctime":1597995889,"is_pvip":true,"replies":[{"id":"89725","content":"理解的很正确！","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598175429,"ip_address":"","comment_id":243219,"utype":1}],"discussion_count":3,"race_medal":0,"score":"61727538033","product_id":100058001,"comment_content":"第二次机会法，避免大量只读一次的文件涌入 active，在需要回收时又从 active 移动到 inactive lru 链表。场景比如编译内核。","like_count":15,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504227,"discussion_content":"理解的很正确！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598175429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2145723,"avatar":"","nickname":"Geek_162e2a","note":"","ucode":"38945625F42D7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301418,"discussion_content":"和 MySQL 的LRU链表设计是同一个思想，如果不这样设计的话，采用原始的LRU链表来管理缓存的话会出现以下情况：\n客户端突然执行了一次性大规模的数据Select操作，将原本位于缓存中的热点数据都冲刷出去了，就会造成性能的波动","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598520085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1494491,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","nickname":"Bachue Zhou","note":"","ucode":"3175754775CA32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352901,"discussion_content":"感觉这里和 Java 的分代 GC 的概念是一致的，一个对象能逃过首次 GC，就被认为活的很久，以后 GC 不会首先检查到他。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614906980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244453,"user_name":"Geek_162e2a","can_delete":false,"product_type":"c1","uid":2145723,"ip_address":"","ucode":"38945625F42D7E","user_header":"","comment_is_top":false,"comment_ctime":1598521044,"is_pvip":false,"replies":[{"id":"90036","content":"理解的很准确 赞！","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598621872,"ip_address":"","comment_id":244453,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31663292116","product_id":100058001,"comment_content":"应用开发者的视角<br>第一次读写文件，PageCache是inactive的，为什么要这样设计？可能内核底层是采用类似LRU链表的设计来管理PageCache, 如果单纯照搬LRU链表的设计的话，当读大文件的时候会将原本属于热点缓存的PageCache冲刷出去，导致性能波动，因此需要对PageCache进行分类，来避免这个问题，即新读入的文件先进入inactive区域","like_count":7,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504586,"discussion_content":"理解的很准确 赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598621872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1878120,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJpJXWFP3dNle88WnTkRTsEQkPJmOhepibiaTfhEtMRrbdg5EAWm4EzurA61oKxvCK2ZjMmy1QvmChw/132","nickname":"唐江","note":"","ucode":"867C9808CF7760","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375050,"discussion_content":"什么是“PageCache是inactive的”？能详细解释一下吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621468918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243888,"user_name":"Geek_circle","can_delete":false,"product_type":"c1","uid":1711469,"ip_address":"","ucode":"B85D0E9CEE8786","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epUBQibdMCca340MFZOe5I1GwZ0PosPIzA0TPCNzibgH00w45Zmv4jmL0mFRHMUM9FuKiclKOCBjSmsw/132","comment_is_top":false,"comment_ctime":1598320417,"is_pvip":false,"replies":[{"id":"89925","content":"可以这么理解，它是文件内容的零拷贝。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598452310,"ip_address":"","comment_id":243888,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27368124193","product_id":100058001,"comment_content":"Memory-Mapped I&#47;O（存储映射 I&#47;O）<br> 是否就是零拷贝的概念呢？","like_count":6,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504425,"discussion_content":"可以这么理解，它是文件内容的零拷贝。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598452310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248507,"user_name":"x-ray","can_delete":false,"product_type":"c1","uid":1140175,"ip_address":"","ucode":"8363F0C4D0AC0B","user_header":"https://static001.geekbang.org/account/avatar/00/11/65/cf/326c0eea.jpg","comment_is_top":false,"comment_ctime":1600185297,"is_pvip":false,"replies":[{"id":"91455","content":"mmap与标准io的选择要看具体的场景。很多情况下内存拷贝不会是瓶颈，比如说只写几个或者几百字节的情况下，所以使用哪种都可以；只有在内存拷贝成为瓶颈，比如读写大量文件内容的情况下，比如一次要读写几十上百M，mmap的优势才会提现出来。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1600610941,"ip_address":"","comment_id":248507,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23075021777","product_id":100058001,"comment_content":"读这个确实需要对一些linux基础概念有一个了解。前几天刚读的时候，我连VFS都没有一个概念，读起来非常吃力，到第二章就看得云里雾里。这两天找了点视频把一些基础概念熟悉了下，今天再来看的时候，就感觉比较容易理解了。不过我有一个疑问，既然mmap映射的效率更高，为什么不都用这个呢？是因为标准IO无法像文件那样提前加载一块内存到PageCache吗？","like_count":5,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505670,"discussion_content":"mmap与标准io的选择要看具体的场景。很多情况下内存拷贝不会是瓶颈，比如说只写几个或者几百字节的情况下，所以使用哪种都可以；只有在内存拷贝成为瓶颈，比如读写大量文件内容的情况下，比如一次要读写几十上百M，mmap的优势才会提现出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600610941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1494491,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","nickname":"Bachue Zhou","note":"","ucode":"3175754775CA32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352903,"discussion_content":"别说 mmap，我觉得很多 Zero Cost 的优化都不怎么普及","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614907174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1140175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/65/cf/326c0eea.jpg","nickname":"x-ray","note":"","ucode":"8363F0C4D0AC0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308489,"discussion_content":"原来如此，谢谢作者！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600961223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292589,"user_name":"小白哥哥","can_delete":false,"product_type":"c1","uid":1059593,"ip_address":"","ucode":"A02A297C7688A4","user_header":"https://static001.geekbang.org/account/avatar/00/10/2b/09/2171f9a3.jpg","comment_is_top":false,"comment_ctime":1620886982,"is_pvip":true,"replies":[{"id":"112948","content":"“这个过程并不会触发page fault”，除了这句话之外，你的其他理解是对的。<br>inode mapping中如果没有的话，内核会分配一个page，然后将write调用中的buffe拷贝到这个page 中，这个过程叫做pagein，它属于page fault的一种： major fault。你可以通过sar之类的工具来观察这个指标。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1631439988,"ip_address":"","comment_id":292589,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14505788870","product_id":100058001,"comment_content":"不认同邵老师对于pagecache产生原因的描述，应用程序调用了write，内核会根据fd当前的fpos计算出写文件操作的文件偏移，然后根据偏移去inode-&gt;mapping中找出对应的pagecache页，如果没有的话，分配一页，插入inode-&gt;mapping，然后把write调用中的buffer拷贝到pagecache中，这个过程并不会触发page fault。如果是mmap映射文件，然后直接对内存读写，才会触发page fault，进而驱动内核加载文件内容到对应的page cache中。","like_count":3,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519888,"discussion_content":"“这个过程并不会触发page fault”，除了这句话之外，你的其他理解是对的。\ninode mapping中如果没有的话，内核会分配一个page，然后将write调用中的buffe拷贝到这个page 中，这个过程叫做pagein，它属于page fault的一种： major fault。你可以通过sar之类的工具来观察这个指标。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631439988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":1059593,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2b/09/2171f9a3.jpg","nickname":"小白哥哥","note":"","ucode":"A02A297C7688A4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":548287,"discussion_content":"试过了，执行一次echo 123 &gt; test，无论是perf还是sar，都没抓到major fault。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643115054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":519888,"ip_address":""},"score":548287,"extra":""},{"author":{"id":1059593,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2b/09/2171f9a3.jpg","nickname":"小白哥哥","note":"","ucode":"A02A297C7688A4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":548288,"discussion_content":"又找3.10内核代码确认了一下，只有filemap和swapin，才算major fault","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643115212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":519888,"ip_address":""},"score":548288,"extra":""},{"author":{"id":1059593,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2b/09/2171f9a3.jpg","nickname":"小白哥哥","note":"","ucode":"A02A297C7688A4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":548293,"discussion_content":"我在echo之前是有drop caches 3的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643116651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":519888,"ip_address":""},"score":548293,"extra":""}]}]},{"had_liked":false,"id":244454,"user_name":"Geek_162e2a","can_delete":false,"product_type":"c1","uid":2145723,"ip_address":"","ucode":"38945625F42D7E","user_header":"","comment_is_top":false,"comment_ctime":1598521207,"is_pvip":false,"replies":[{"id":"90037","content":"赞！","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598621900,"ip_address":"","comment_id":244454,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10188455799","product_id":100058001,"comment_content":"如何让它变成Active的呢？多读几次文件，达到系统设计的值后，此文件的PageCache会变成热点数据进入Active区域。<br>在什么情况Active会变成inactive的呢？热点文件太多，且此文件最近没有被读取过，自然就被挤出去了，静态资源服务器，可能会比较经常出现这种情况","like_count":2,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504587,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598621900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243870,"user_name":"地下城勇士","can_delete":false,"product_type":"c1","uid":1739992,"ip_address":"","ucode":"91ACD73D56A9F1","user_header":"","comment_is_top":false,"comment_ctime":1598317210,"is_pvip":false,"replies":[{"id":"89924","content":"gliffy。chrome有插件。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598452263,"ip_address":"","comment_id":243870,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10188251802","product_id":100058001,"comment_content":"老师的图是用什么工具画的？感觉以后可以尝试一下","like_count":2,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504421,"discussion_content":"gliffy。chrome有插件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598452263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2735939,"avatar":"https://static001.geekbang.org/account/avatar/00/29/bf/43/745ca900.jpg","nickname":"Day-Dream","note":"","ucode":"F0A869729F74D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392396,"discussion_content":"搜了下插件没了，主页显示插件是收费的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630993707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301463,"user_name":"Wade_阿伟","can_delete":false,"product_type":"c1","uid":1688629,"ip_address":"","ucode":"5AE2E846A13443","user_header":"https://static001.geekbang.org/account/avatar/00/19/c4/35/2cc10d43.jpg","comment_is_top":false,"comment_ctime":1625707950,"is_pvip":false,"replies":[{"id":"113029","content":"标准io相对而言更方便些，在数据量不大的情况下可以使用；如果数据量较大，此时使用存储映射io会更好些。另外一个考虑因为是对内存的精细管理，如果需要管理，比如说把某些数据锁定在内存中，这个时候使用存储映射io更好些。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1631545810,"ip_address":"","comment_id":301463,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5920675246","product_id":100058001,"comment_content":"老师您好，看了上面老师的讲述，对存储映射I&#47;O和标准I&#47;O有了一定的理解。但是系统一般什么时候使用存储映射I&#47;O，什么时候使用标准I&#47;O呢？","like_count":1,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523003,"discussion_content":"标准io相对而言更方便些，在数据量不大的情况下可以使用；如果数据量较大，此时使用存储映射io会更好些。另外一个考虑因为是对内存的精细管理，如果需要管理，比如说把某些数据锁定在内存中，这个时候使用存储映射io更好些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631545810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293619,"user_name":"唐江","can_delete":false,"product_type":"c1","uid":1878120,"ip_address":"","ucode":"867C9808CF7760","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJpJXWFP3dNle88WnTkRTsEQkPJmOhepibiaTfhEtMRrbdg5EAWm4EzurA61oKxvCK2ZjMmy1QvmChw/132","comment_is_top":false,"comment_ctime":1621468692,"is_pvip":false,"replies":[{"id":"113030","content":"proc接口中提供给用户的只是具体的数据项，这些数据项对应到内核代码则是一些数据结构。对于inactive active这两项而言，他们对应内核代码里的lru list。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1631545911,"ip_address":"","comment_id":293619,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5916435988","product_id":100058001,"comment_content":"什么地方讲了inactive 、active 是个数据结构链表啊！不是一个简单的数字吗","like_count":1,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520294,"discussion_content":"proc接口中提供给用户的只是具体的数据项，这些数据项对应到内核代码则是一些数据结构。对于inactive active这两项而言，他们对应内核代码里的lru list。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631545911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267230,"user_name":"--SNIPER","can_delete":false,"product_type":"c1","uid":1389362,"ip_address":"","ucode":"7439EC0458BD7F","user_header":"https://static001.geekbang.org/account/avatar/00/15/33/32/8f304f6c.jpg","comment_is_top":false,"comment_ctime":1607654466,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5902621762","product_id":100058001,"comment_content":"测试了下都是0，能帮忙解释下为什么吗<br>10:39:31 AM  pgpgin&#47;s pgpgout&#47;s   fault&#47;s  majflt&#47;s  pgfree&#47;s pgscank&#47;s pgscand&#47;s pgsteal&#47;s    %vmeff<br>10:39:32 AM      0.00      8.00   1509.00      0.00   3651.00      0.00      0.00      0.00      0.00<br>10:39:33 AM      0.00      0.00   1566.00      0.00   3633.00      0.00      0.00      0.00      0.00<br>10:39:34 AM      0.00     12.00   1920.00      0.00   3815.00      0.00      0.00      0.00      0.00<br>10:39:35 AM      0.00      4.00   7944.00      0.00   6108.00      0.00      0.00      0.00      0.00<br>10:39:36 AM      0.00      0.00    993.00      0.00   3638.00      0.00      0.00      0.00      0.00<br>10:39:37 AM      0.00      0.00   1171.00      0.00   3616.00      0.00      0.00      0.00      0.00<br>10:39:38 AM      0.00      0.00    944.00      0.00   3756.00      0.00      0.00      0.00      0.00<br>10:39:39 AM      0.00     76.00  13438.00      0.00   6632.00      0.00      0.00      0.00      0.00<br>10:39:40 AM      0.00      0.00   7963.00      0.00   5471.00      0.00      0.00      0.00      0.00<br>^C<br><br>10:39:41 AM      0.00      4.76   1592.86      0.00   4565.48      0.00      0.00      0.00      0.00<br>Average:         0.00     10.57   3941.67      0.00   4487.30      0.00      0.00      0.00      0.00","like_count":1,"discussions":[{"author":{"id":2129658,"avatar":"https://static001.geekbang.org/account/avatar/00/20/7e/fa/17e55448.jpg","nickname":"snail","note":"","ucode":"7DDF8181322D27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538654,"discussion_content":"kswapd没被唤醒，说明都没触发后台异步回收，更被说直接回收了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639473682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068361,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","nickname":"明翼","note":"","ucode":"E77F86BEB3D5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384379,"discussion_content":"很简单,因为你的系统不忙,导致后台回收和直接回收都为0,所以后面的也是0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626531417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242954,"user_name":"feihui","can_delete":false,"product_type":"c1","uid":1007294,"ip_address":"","ucode":"13F1D4A82BC650","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/be/9ea55f46.jpg","comment_is_top":false,"comment_ctime":1597903779,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5892871075","product_id":100058001,"comment_content":"思考题我的理解是大概类似于MySQL中的两级缓存链表，作为磁盘数据缓存，肯定是命中率越高越好，有那么一种情况，当某次查询大量数据时（一次性数据），在单级缓存下就会把之前的热点缓存挤走，如此 active 和 inactive 类似，另外猜想anon 直接入 active 可能是当前匿名页场景下不大概率发生上述情况","like_count":1,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300086,"discussion_content":"你的理解是正确的，但是在某些场景下还是可能出现产生大量匿名页把active anon list的pages给demote到inactive anon list中，再进一步发生swap，从而影响业务的workingset。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597931865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242487,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1597739865,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5892707161","product_id":100058001,"comment_content":"不是很理解为什么要有alloc page，不是已经有了userspace page了吗？","like_count":1,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299905,"discussion_content":"这其实是权限管理：用户空间和内核空间。userspace page是用户空间的page，内核直接访问这些page可能会存在一些危险，所以访问这些page得需要get_user_page这个机制才可以。而标准I/O的目的是为了让用户用着简单，所以就采取了用户空间和内核空间完全隔离的做法，这也是为了方便大家更好的使用。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597850967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242306,"user_name":"stackWarn","can_delete":false,"product_type":"c1","uid":1002005,"ip_address":"","ucode":"89672E452DEBA5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","comment_is_top":false,"comment_ctime":1597665765,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5892633061","product_id":100058001,"comment_content":" &#47;proc&#47;sys&#47;vm&#47;pagecache_limit_mb 限制使用大小","like_count":1,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299907,"discussion_content":"upstream是没有这类特性的，而且也不会接收这个做法。这应该是你们自己内核的做法。这种做法，在特定的场景下会很有效，但是，它也有很大的风险：限制pagecache大小也就限制了业务workingset，这就可能会导致很多的refault，refault是很糟糕的一个事件，对业务的性能影响会非常明显。所以你的这个特性，需要一个后台线程来基于workingset来做动态调整才好一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597851297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337901,"user_name":"Geek_356c0d","can_delete":false,"product_type":"c1","uid":1645808,"ip_address":"","ucode":"D69BFD03705837","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bibTL8t812ehcBB0cPYqsDycLq37iaXmbzdGwAibkSe4G9r0lDoYxibvnLEhkWNWicPbe70j926FbyibKGPIEMh7ib78Q/132","comment_is_top":false,"comment_ctime":1647150545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647150545","product_id":100058001,"comment_content":"我对内存申请那张图有疑问，申请内存的时候如果内存不够，这时触发了kswapd内核线程去后台清理内存，这时不需要同步等待它清理完吗？按照图片得意思，是唤醒了kswapd之后就立刻走向下一步了","like_count":0},{"had_liked":false,"id":331092,"user_name":"Aizen","can_delete":false,"product_type":"c1","uid":1686398,"ip_address":"","ucode":"91351716C69ED9","user_header":"https://static001.geekbang.org/account/avatar/00/19/bb/7e/4e86c5a5.jpg","comment_is_top":false,"comment_ctime":1642418322,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642418322","product_id":100058001,"comment_content":"Page Cache 我问个问题？容器内的Page Cache的回收策略是基于 真是物理机的内核分配不足才回收？还是容器本身的内存不足策略？","like_count":0},{"had_liked":false,"id":275306,"user_name":"Geek_b8749d","can_delete":false,"product_type":"c1","uid":2423086,"ip_address":"","ucode":"C93277F1E329A7","user_header":"","comment_is_top":false,"comment_ctime":1611459305,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611459305","product_id":100058001,"comment_content":"老师讲的太好了，以前觉的pagecache很神秘，经过老师讲解，有种豁然开朗的感觉","like_count":0},{"had_liked":false,"id":274683,"user_name":"LemonTree","can_delete":false,"product_type":"c1","uid":2070584,"ip_address":"","ucode":"BD0AE36257EE8C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/foNlomhnJgM1e7DJZzjXhrrndVEubz273WVYfkcfZ3WMyGAA5jkJDmDD6WoWjvZxzic1BggdWXpaTia213q5LdSQ/132","comment_is_top":false,"comment_ctime":1611124704,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1611124704","product_id":100058001,"comment_content":"老师，本课中第一个脚本，我在x86平台和arm平台都运行了一次，如老师所说两个平台的page cache都会增加， 然而，在x86平台上主要增加的是和本文所说的一样是Inactive(anon)， 而在arm平台增加的却是Active(file): ，请问老师问这种差异可能是由什么导致的？ 是否是某些系统参数可以控制？感觉根据上一讲的内容他不应该跟平台相关啊。希望老师抽空解答，谢谢。 ","like_count":0,"discussions":[{"author":{"id":1038122,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d7/2a/78a0c2a4.jpg","nickname":"苍旻","note":"","ucode":"11442E25E90A48","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539204,"discussion_content":"linux 也是 active加的多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639640772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265438,"user_name":"Dovelol","can_delete":false,"product_type":"c1","uid":1253384,"ip_address":"","ucode":"9B5DDF7720F307","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","comment_is_top":false,"comment_ctime":1606897528,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1606897528","product_id":100058001,"comment_content":"老师好，想问下对于标准io，那一份数据是不是在内存里面其实有2份？用户空间内存一份，pagecache一份。用户空间的那一份在开始写入的时候会有缺页中断吗？我看老师讲的是在copy到pagecache的时候会有缺页中断。还有就是用户空间的内存什么时候回收掉呢和pagecache有关系吗？","like_count":0,"discussions":[{"author":{"id":1120332,"avatar":"https://static001.geekbang.org/account/avatar/00/11/18/4c/e12f3b41.jpg","nickname":"姜姜","note":"","ucode":"1DAD620C8E9F31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343005,"discussion_content":"“用户空间的内存什么时候被回收掉呢和pagecache有关系吗？”\n\n借楼同问！！！\n因为个人觉得用户空间内存“被释放”和“被回收”是两码事情，比如一次只释放了10字节，真的就被OS立马回收了吗？但页大小是4K啊，10字节是如何回收的？\n另外，在内存不够的时候，系统会回收一些buffer/cache进行分配，这其中包括用户空间的内存吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610897961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251827,"user_name":"Dylan","can_delete":false,"product_type":"c1","uid":1040236,"ip_address":"","ucode":"58064D0C9F9F5F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/df/6c/5af32271.jpg","comment_is_top":false,"comment_ctime":1601891505,"is_pvip":false,"replies":[{"id":"92462","content":"对的 文件系统有类似的概念","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1602596526,"ip_address":"","comment_id":251827,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1601891505","product_id":100058001,"comment_content":"既然是Cache，那也会存在脏数据丢失的可能，那避免数据丢失的方法是不是和数据库的一些策略类似，比如WAL","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506625,"discussion_content":"对的 文件系统有类似的概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602596526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247293,"user_name":"xiaobang","can_delete":false,"product_type":"c1","uid":1157508,"ip_address":"","ucode":"1735BDCFD61655","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg","comment_is_top":false,"comment_ctime":1599651141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599651141","product_id":100058001,"comment_content":"把脏页比作小朋友，也是够惊天动地了，还得拉孙悟空过来救下场。另外孙悟空那段音频里面漏掉了...","like_count":0},{"had_liked":false,"id":246014,"user_name":"wong ka seng","can_delete":false,"product_type":"c1","uid":1338885,"ip_address":"","ucode":"C1A713082D0D64","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/05/d47cee18.jpg","comment_is_top":false,"comment_ctime":1599132619,"is_pvip":false,"replies":[{"id":"90456","content":"bash是linux开发的基础，如果你对bash不太了解 我建议你可以系统性的先学习一下它，讲bash的书籍挺多的，你可以找本书看一遍。我们这个课程不会讲bash，只是里面会有bash脚本或者命令来辅助内核知识讲解。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1599194513,"ip_address":"","comment_id":246014,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599132619","product_id":100058001,"comment_content":"老师好，本人对bash认识不多，有没有补充的资料呢？","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505035,"discussion_content":"bash是linux开发的基础，如果你对bash不太了解 我建议你可以系统性的先学习一下它，讲bash的书籍挺多的，你可以找本书看一遍。我们这个课程不会讲bash，只是里面会有bash脚本或者命令来辅助内核知识讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599194513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245026,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1598788271,"is_pvip":true,"replies":[{"id":"90244","content":"再次读取该page cache，它就会变为active的。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598934332,"ip_address":"","comment_id":245026,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598788271","product_id":100058001,"comment_content":"当第一次写某个文件时，产生的 Page Cache 是 inactive 的，那么在什么事件触发的时候，才会转为 active 的？ ","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504773,"discussion_content":"再次读取该page cache，它就会变为active的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598934332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244863,"user_name":"狗蛋","can_delete":false,"product_type":"c1","uid":1303295,"ip_address":"","ucode":"812389B6F073AC","user_header":"https://static001.geekbang.org/account/avatar/00/13/e2/ff/ca3dec06.jpg","comment_is_top":false,"comment_ctime":1598706319,"is_pvip":false,"replies":[{"id":"90105","content":"嗯 原理其实都是相通的","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1598717949,"ip_address":"","comment_id":244863,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598706319","product_id":100058001,"comment_content":"这跟mysql策略一样啊，也许是mysql借鉴Linux的","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504721,"discussion_content":"嗯 原理其实都是相通的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598717949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242685,"user_name":"大飞哥","can_delete":false,"product_type":"c1","uid":1046810,"ip_address":"","ucode":"DEBAE3967CA0D3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/1a/d289c2ac.jpg","comment_is_top":false,"comment_ctime":1597810221,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1597810221","product_id":100058001,"comment_content":"Dirty数据在内存中驻留的时间超过一个特定的阈值时会回写，并且page cache中的页面有对应的文件和在文件中的位置信息，需要换入恢复的时候也更加容易，所以内核通常更倾向于换出page cache中的页面，只有当内存压力变得相对严重时，才会选择回收 anonymous pages，处理就是文件页会首先放在 Inactive 链表上，还有这也可以为了避免大量只访问一次的文件页涌入活跃LRU链表带来查找的复杂度。所以我觉得这是合理的。","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299910,"discussion_content":"你对原理的解释是对的，你对lru机制很熟悉。但是结论不对，也就是，这不是合理的。因为lru的file lru和anon lru是独立的，都各自有自己的active list和inacitve list，所以不论是file还是anon，在第一次读取的时候都需要放在对应的inactive list上，但是现在内核没有这么做，这是内核的缺陷，现在社区也在针对这一块在做改进。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1597851782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1046810,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f9/1a/d289c2ac.jpg","nickname":"大飞哥","note":"","ucode":"DEBAE3967CA0D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":299983,"discussion_content":"非常感谢老师指正！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597896304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299910,"ip_address":""},"score":299983,"extra":""}]}]},{"had_liked":false,"id":242410,"user_name":"Geek1560","can_delete":false,"product_type":"c1","uid":2028949,"ip_address":"","ucode":"5F27A28B8002E6","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/95/a362f01b.jpg","comment_is_top":false,"comment_ctime":1597715940,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1597715940","product_id":100058001,"comment_content":"老师好，Linux的Page Cache，在IO负载较高的业务场景下，近似贪婪使用，除非后续内存不足时，才会内存回收来释放。其实有些文件在使用后，不会有后续的IO操作(比如日志文件)，但是Linux还是将其保留在cache中。虽然可以通过posix_fadvise来释放。但是感觉Linux这块管理的不够精细。而且，大量使用page cahe，如果开启swap，非常容易swap，没有就OOM。老师这块有经验或者一些其他思路吗？","like_count":0,"discussions":[{"author":{"id":1010922,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","nickname":"坤","note":"","ucode":"74E6838226A405","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299571,"discussion_content":"没你想到这么Low的，内核线程kswapd会主动回收。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597736909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2028949,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/95/a362f01b.jpg","nickname":"Geek1560","note":"","ucode":"5F27A28B8002E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1010922,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","nickname":"坤","note":"","ucode":"74E6838226A405","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299662,"discussion_content":"Linux kswapd是通过watermark来触发的，在默认场景下，low和min的差值是非常小的，稍大的内存申请就会直接触发direct reclaim。导致数据被置换到磁盘上。阻塞应用等。\n这块老师估计后续会深入。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597760325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299571,"ip_address":""},"score":299662,"extra":""},{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2028949,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/95/a362f01b.jpg","nickname":"Geek1560","note":"","ucode":"5F27A28B8002E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299906,"discussion_content":"你的理解是对的。这一块后续课程里会有讲。当时要主动释放这些pagecache得需要很小心的操作，否则就会影响业务的workingset，而且workingset是实时变化的，所以得需要动态控制pagecache大小。这一块比较好的实践是基于memory cgroup watermark的动态调整机制。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597851160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299662,"ip_address":""},"score":299906,"extra":""}]}]}]}