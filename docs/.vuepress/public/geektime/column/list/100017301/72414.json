{"id":72414,"title":"35 | Trie树：如何实现搜索引擎的搜索关键词提示功能？","content":"<p>搜索引擎的搜索关键词提示功能，我想你应该不陌生吧？为了方便快速输入，当你在搜索引擎的搜索框中，输入要搜索的文字的某一部分的时候，搜索引擎就会自动弹出下拉框，里面是各种关键词提示。你可以直接从下拉框中选择你要搜索的东西，而不用把所有内容都输入进去，一定程度上节省了我们的搜索时间。</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/9e/ceb8738453401d5fc067acd513b57a9e.png?wh=1228*962\" alt=\"\"></p><p>尽管这个功能我们几乎天天在用，作为一名工程师，你是否思考过，它是怎么实现的呢？它底层使用的是哪种数据结构和算法呢？</p><p>像Google、百度这样的搜索引擎，它们的关键词提示功能非常全面和精准，肯定做了很多优化，但万变不离其宗，底层最基本的原理就是今天要讲的这种数据结构：Trie树。</p><h2>什么是“Trie树”？</h2><p>Trie树，也叫“字典树”。顾名思义，它是一个树形结构。它是一种专门处理字符串匹配的数据结构，用来解决在一组字符串集合中快速查找某个字符串的问题。</p><p>当然，这样一个问题可以有多种解决方法，比如散列表、红黑树，或者我们前面几节讲到的一些字符串匹配算法，但是，Trie树在这个问题的解决上，有它特有的优点。不仅如此，Trie树能解决的问题也不限于此，我们一会儿慢慢分析。</p><p>现在，我们先来看下，Trie树到底长什么样子。</p><p>我举个简单的例子来说明一下。我们有6个字符串，它们分别是：how，hi，her，hello，so，see。我们希望在里面多次查找某个字符串是否存在。如果每次查找，都是拿要查找的字符串跟这6个字符串依次进行字符串匹配，那效率就比较低，有没有更高效的方法呢？</p><!-- [[[read_end]]] --><p>这个时候，我们就可以先对这6个字符串做一下预处理，组织成Trie树的结构，之后每次查找，都是在Trie树中进行匹配查找。<strong>Trie树的本质，就是利用字符串之间的公共前缀，将重复的前缀合并在一起</strong>。最后构造出来的就是下面这个图中的样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/32/280fbc0bfdef8380fcb632af39e84b32.jpg?wh=1142*573\" alt=\"\"></p><p>其中，根节点不包含任何信息。每个节点表示一个字符串中的字符，从根节点到红色节点的一条路径表示一个字符串（注意：红色节点并不都是叶子节点）。</p><p>为了让你更容易理解Trie树是怎么构造出来的，我画了一个Trie树构造的分解过程。构造过程的每一步，都相当于往Trie树中插入一个字符串。当所有字符串都插入完成之后，Trie树就构造好了。</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/6c/f848a7d8bda3d4f8bb4a7cbfaabab66c.jpg?wh=1142*456\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/06/b6/06b45fde2ca8077465e0c557bc749ab6.jpg?wh=1142*576\" alt=\"\"></p><p>当我们在Trie树中查找一个字符串的时候，比如查找字符串“her”，那我们将要查找的字符串分割成单个的字符h，e，r，然后从Trie树的根节点开始匹配。如图所示，绿色的路径就是在Trie树中匹配的路径。</p><p><img src=\"https://static001.geekbang.org/resource/image/6d/b9/6dbed0579a60c6d170bd8fde5990bfb9.jpg?wh=1142*553\" alt=\"\"></p><p>如果我们要查找的是字符串“he”呢？我们还用上面同样的方法，从根节点开始，沿着某条路径来匹配，如图所示，绿色的路径，是字符串“he”匹配的路径。但是，路径的最后一个节点“e”并不是红色的。也就是说，“he”是某个字符串的前缀子串，但并不能完全匹配任何字符串。</p><p><img src=\"https://static001.geekbang.org/resource/image/05/f9/05c3c5d534921f00a9ae33e7e65b1bf9.jpg?wh=1142*541\" alt=\"\"></p><h2>如何实现一棵Trie树？</h2><p>知道了Trie树长什么样子，我们现在来看下，如何用代码来实现一个Trie树。</p><p>从刚刚Trie树的介绍来看，Trie树主要有两个操作，<strong>一个是将字符串集合构造成Trie树</strong>。这个过程分解开来的话，就是一个将字符串插入到Trie树的过程。<strong>另一个是在Trie树中查询一个字符串</strong>。</p><p>了解了Trie树的两个主要操作之后，我们再来看下，<strong>如何存储一个Trie树？</strong></p><p>从前面的图中，我们可以看出，Trie树是一个多叉树。我们知道，二叉树中，一个节点的左右子节点是通过两个指针来存储的，如下所示Java代码。那对于多叉树来说，我们怎么存储一个节点的所有子节点的指针呢？</p><pre><code>class BinaryTreeNode {\n  char data;\n  BinaryTreeNode left;\n  BinaryTreeNode right;  \n}\n</code></pre><p>我先介绍其中一种存储方式，也是经典的存储方式，大部分数据结构和算法书籍中都是这么讲的。还记得我们前面讲到的散列表吗？借助散列表的思想，我们通过一个下标与字符一一映射的数组，来存储子节点的指针。这句话稍微有点抽象，不怎么好懂，我画了一张图你可以看看。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/35/f5a4a9cb7f0fe9dcfbf29eb1e5da6d35.jpg?wh=1142*697\" alt=\"\"></p><p>假设我们的字符串中只有从a到z这26个小写字母，我们在数组中下标为0的位置，存储指向子节点a的指针，下标为1的位置存储指向子节点b的指针，以此类推，下标为25的位置，存储的是指向的子节点z的指针。如果某个字符的子节点不存在，我们就在对应的下标的位置存储null。</p><pre><code>class TrieNode {\n  char data;\n  TrieNode children[26];\n}\n</code></pre><p>当我们在Trie树中查找字符串的时候，我们就可以通过字符的ASCII码减去“a”的ASCII码，迅速找到匹配的子节点的指针。比如，d的ASCII码减去a的ASCII码就是3，那子节点d的指针就存储在数组中下标为3的位置中。</p><p>描述了这么多，有可能你还是有点懵，我把上面的描述翻译成了代码，你可以结合着一块看下，应该有助于你理解。</p><pre><code>public class Trie {\n  private TrieNode root = new TrieNode('/'); // 存储无意义字符\n\n  // 往Trie树中插入一个字符串\n  public void insert(char[] text) {\n    TrieNode p = root;\n    for (int i = 0; i &lt; text.length; ++i) {\n      int index = text[i] - 'a';\n      if (p.children[index] == null) {\n        TrieNode newNode = new TrieNode(text[i]);\n        p.children[index] = newNode;\n      }\n      p = p.children[index];\n    }\n    p.isEndingChar = true;\n  }\n\n  // 在Trie树中查找一个字符串\n  public boolean find(char[] pattern) {\n    TrieNode p = root;\n    for (int i = 0; i &lt; pattern.length; ++i) {\n      int index = pattern[i] - 'a';\n      if (p.children[index] == null) {\n        return false; // 不存在pattern\n      }\n      p = p.children[index];\n    }\n    if (p.isEndingChar == false) return false; // 不能完全匹配，只是前缀\n    else return true; // 找到pattern\n  }\n\n  public class TrieNode {\n    public char data;\n    public TrieNode[] children = new TrieNode[26];\n    public boolean isEndingChar = false;\n    public TrieNode(char data) {\n      this.data = data;\n    }\n  }\n}\n</code></pre><p>Trie树的实现，你现在应该搞懂了。现在，我们来看下，<strong>在Trie树中，查找某个字符串的时间复杂度是多少？</strong></p><p>如果要在一组字符串中，频繁地查询某些字符串，用Trie树会非常高效。构建Trie树的过程，需要扫描所有的字符串，时间复杂度是O(n)（n表示所有字符串的长度和）。但是一旦构建成功之后，后续的查询操作会非常高效。</p><p>每次查询时，如果要查询的字符串长度是k，那我们只需要比对大约k个节点，就能完成查询操作。跟原本那组字符串的长度和个数没有任何关系。所以说，构建好Trie树后，在其中查找字符串的时间复杂度是O(k)，k表示要查找的字符串的长度。</p><h2>Trie树真的很耗内存吗？</h2><p>前面我们讲了Trie树的实现，也分析了时间复杂度。现在你应该知道，Trie树是一种非常独特的、高效的字符串匹配方法。但是，关于Trie树，你有没有听过这样一种说法：“Trie树是非常耗内存的，用的是一种空间换时间的思路”。这是什么原因呢？</p><p>刚刚我们在讲Trie树的实现的时候，讲到用数组来存储一个节点的子节点的指针。如果字符串中包含从a到z这26个字符，那每个节点都要存储一个长度为26的数组，并且每个数组元素要存储一个8字节指针（或者是4字节，这个大小跟CPU、操作系统、编译器等有关）。而且，即便一个节点只有很少的子节点，远小于26个，比如3、4个，我们也要维护一个长度为26的数组。</p><p>我们前面讲过，Trie树的本质是避免重复存储一组字符串的相同前缀子串，但是现在每个字符（对应一个节点）的存储远远大于1个字节。按照我们上面举的例子，数组长度为26，每个元素是8字节，那每个节点就会额外需要26*8=208个字节。而且这还是只包含26个字符的情况。</p><p>如果字符串中不仅包含小写字母，还包含大写字母、数字、甚至是中文，那需要的存储空间就更多了。所以，也就是说，在某些情况下，Trie树不一定会节省存储空间。在重复的前缀并不多的情况下，Trie树不但不能节省内存，还有可能会浪费更多的内存。</p><p>当然，我们不可否认，Trie树尽管有可能很浪费内存，但是确实非常高效。那为了解决这个内存问题，我们是否有其他办法呢？</p><p>我们可以稍微牺牲一点查询的效率，将每个节点中的数组换成其他数据结构，来存储一个节点的子节点指针。用哪种数据结构呢？我们的选择其实有很多，比如有序数组、跳表、散列表、红黑树等。</p><p>假设我们用有序数组，数组中的指针按照所指向的子节点中的字符的大小顺序排列。查询的时候，我们可以通过二分查找的方法，快速查找到某个字符应该匹配的子节点的指针。但是，在往Trie树中插入一个字符串的时候，我们为了维护数组中数据的有序性，就会稍微慢了点。</p><p>替换成其他数据结构的思路是类似的，这里我就不一一分析了，你可以结合前面学过的内容，自己分析一下。</p><p>实际上，Trie树的变体有很多，都可以在一定程度上解决内存消耗的问题。比如，<strong>缩点优化</strong>，就是对只有一个子节点的节点，而且此节点不是一个串的结束节点，可以将此节点与子节点合并。这样可以节省空间，但却增加了编码难度。这里我就不展开详细讲解了，你如果感兴趣，可以自行研究下。</p><p><img src=\"https://static001.geekbang.org/resource/image/87/11/874d6870e365ec78f57cd1b9d9fbed11.jpg?wh=1142*581\" alt=\"\"></p><h2>Trie树与散列表、红黑树的比较</h2><p>实际上，字符串的匹配问题，笼统上讲，其实就是数据的查找问题。对于支持动态数据高效操作的数据结构，我们前面已经讲过好多了，比如散列表、红黑树、跳表等等。实际上，这些数据结构也可以实现在一组字符串中查找字符串的功能。我们选了两种数据结构，散列表和红黑树，跟Trie树比较一下，看看它们各自的优缺点和应用场景。</p><p>在刚刚讲的这个场景，在一组字符串中查找字符串，Trie树实际上表现得并不好。它对要处理的字符串有极其严苛的要求。</p><p>第一，字符串中包含的字符集不能太大。我们前面讲到，如果字符集太大，那存储空间可能就会浪费很多。即便可以优化，但也要付出牺牲查询、插入效率的代价。</p><p>第二，要求字符串的前缀重合比较多，不然空间消耗会变大很多。</p><p>第三，如果要用Trie树解决问题，那我们就要自己从零开始实现一个Trie树，还要保证没有bug，这个在工程上是将简单问题复杂化，除非必须，一般不建议这样做。</p><p>第四，我们知道，通过指针串起来的数据块是不连续的，而Trie树中用到了指针，所以，对缓存并不友好，性能上会打个折扣。</p><p>综合这几点，针对在一组字符串中查找字符串的问题，我们在工程中，更倾向于用散列表或者红黑树。因为这两种数据结构，我们都不需要自己去实现，直接利用编程语言中提供的现成类库就行了。</p><p>讲到这里，你可能要疑惑了，讲了半天，我对Trie树一通否定，还让你用红黑树或者散列表，那Trie树是不是就没用了呢？是不是今天的内容就白学了呢？</p><p>实际上，Trie树只是不适合精确匹配查找，这种问题更适合用散列表或者红黑树来解决。Trie树比较适合的是查找前缀匹配的字符串，也就是类似开篇问题的那种场景。</p><h2>解答开篇</h2><p>Trie树就讲完了，我们来看下开篇提到的问题：如何利用Trie树，实现搜索关键词的提示功能？</p><p>我们假设关键词库由用户的热门搜索关键词组成。我们将这个词库构建成一个Trie树。当用户输入其中某个单词的时候，把这个词作为一个前缀子串在Trie树中匹配。为了讲解方便，我们假设词库里只有hello、her、hi、how、so、see这6个关键词。当用户输入了字母h的时候，我们就把以h为前缀的hello、her、hi、how展示在搜索提示框内。当用户继续键入字母e的时候，我们就把以he为前缀的hello、her展示在搜索提示框内。这就是搜索关键词提示的最基本的算法原理。</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/0d/4ca9d9f78f2206cad93836a2b1d6d80d.jpg?wh=1142*632\" alt=\"\"></p><p>不过，我讲的只是最基本的实现原理，实际上，搜索引擎的搜索关键词提示功能远非我讲的这么简单。如果再稍微深入一点，你就会想到，上面的解决办法遇到下面几个问题：</p><ul>\n<li>\n<p>我刚讲的思路是针对英文的搜索关键词提示，对于更加复杂的中文来说，词库中的数据又该如何构建成Trie树呢？</p>\n</li>\n<li>\n<p>如果词库中有很多关键词，在搜索提示的时候，用户输入关键词，作为前缀在Trie树中可以匹配的关键词也有很多，如何选择展示哪些内容呢？</p>\n</li>\n<li>\n<p>像Google这样的搜索引擎，用户单词拼写错误的情况下，Google还是可以使用正确的拼写来做关键词提示，这个又是怎么做到的呢？</p>\n</li>\n</ul><p>你可以先思考一下如何来解决，如果不会也没关系，这些问题，我们会在实战篇里具体来讲解。</p><p>实际上，Trie树的这个应用可以扩展到更加广泛的一个应用上，就是自动输入补全，比如输入法自动补全功能、IDE代码编辑器自动补全功能、浏览器网址输入的自动补全功能等等。</p><h2>内容小结</h2><p>今天我们讲了一种特殊的树，Trie树。Trie树是一种解决字符串快速匹配问题的数据结构。如果用来构建Trie树的这一组字符串中，前缀重复的情况不是很多，那Trie树这种数据结构总体上来讲是比较费内存的，是一种空间换时间的解决问题思路。</p><p>尽管比较耗费内存，但是对内存不敏感或者内存消耗在接受范围内的情况下，在Trie树中做字符串匹配还是非常高效的，时间复杂度是O(k)，k表示要匹配的字符串的长度。</p><p>但是，Trie树的优势并不在于，用它来做动态集合数据的查找，因为，这个工作完全可以用更加合适的散列表或者红黑树来替代。Trie树最有优势的是查找前缀匹配的字符串，比如搜索引擎中的关键词提示功能这个场景，就比较适合用它来解决，也是Trie树比较经典的应用场景。</p><h2>课后思考</h2><p>我们今天有讲到，Trie树应用场合对数据要求比较苛刻，比如字符串的字符集不能太大，前缀重合比较多等。如果现在给你一个很大的字符串集合，比如包含1万条记录，如何通过编程量化分析这组字符串集合是否比较适合用Trie树解决呢？也就是如何统计字符串的字符集大小，以及前缀重合的程度呢？</p><p>欢迎留言和我分享，也欢迎点击“<span class=\"orange\">请朋友读</span>”，把今天的内容分享给你的好友，和他一起讨论、学习。</p>","neighbors":{"left":{"article_title":"34 | 字符串匹配基础（下）：如何借助BM算法轻松理解KMP算法？","id":71845},"right":{"article_title":"36 | AC自动机：如何用多模式串匹配实现敏感词过滤功能？","id":72810}},"comments":[{"had_liked":false,"id":54994,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1545996641,"is_pvip":false,"replies":[{"id":"20252","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546418284,"ip_address":"","comment_id":54994,"utype":1}],"discussion_count":14,"race_medal":0,"score":"980798540129","product_id":100017301,"comment_content":"找到了一个Trie树的开源库：Apache Commons，里面有关于Trie的实现","like_count":228,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434643,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546418284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251835,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oiboHpgukqib2ASXeU0H7W1ibgRMqyrNE5KaWicicPEDy0ia8YdoneZAtvW0EFIiaqZJp2OS4dnweOgXaJ5EjJicicEqic5A/132","nickname":"覃钰栋","note":"","ucode":"19080C463658EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164,"discussion_content":"Apache Commons中trie有实现类\nPatriciaTrie\nAbstractPatriciaTrie","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1561209191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1906682,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJW0JnI0Uz4Zr3VPiaj2FCp5VdIe0y1GPvtiaFcEkyOmE8vm3xI2bevDQSWAeHB8qJATHjUs15zh0jw/132","nickname":"Geek_27fd17","note":"","ucode":"C39F8D8E22AE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333282,"discussion_content":"zookeeper的pathtrie","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1607495460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2718869,"avatar":"https://static001.geekbang.org/account/avatar/00/29/7c/95/db224274.jpg","nickname":"Aurora.","note":"","ucode":"8A908805080E74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548054,"discussion_content":"PatriciaTrie➡ https://commons.apache.org/proper/commons-collections/apidocs/org/apache/commons/collections4/trie/PatriciaTrie.html","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1643013849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1263932,"avatar":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","nickname":"静静聆听","note":"","ucode":"0A8600CB928EFE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14518,"discussion_content":"看到了，但是里面的源码有一点不明白new PrefixRangeMap就直接取到数据了，这是怎么做的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568769068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2444895,"avatar":"https://static001.geekbang.org/account/avatar/00/25/4e/5f/4069c2f7.jpg","nickname":"😘ོ胖⃠嘟嘟😘ོ","note":"","ucode":"AF270C34271A0D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350545,"discussion_content":"牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613912110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327834,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605964765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2154063,"avatar":"https://static001.geekbang.org/account/avatar/00/20/de/4f/64fb1e90.jpg","nickname":"Maybe","note":"","ucode":"622FFE5C1DCC49","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311607,"discussion_content":"M","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602419818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2080208,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/bd/d0/070824d1.jpg","nickname":"空城。","note":"","ucode":"0F6F110D811C2E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306114,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600172534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205485,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUhJakYu4BI7eFnheKDdibDjZqz32ia2rhN0Jz5YoR1ZRlDrLcFNr4MJnPg3WiaxaocWotOANeqsBibw/132","nickname":"小白","note":"","ucode":"862EA133563634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260769,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588900582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1119116,"avatar":"https://static001.geekbang.org/account/avatar/00/11/13/8c/c86340ca.jpg","nickname":"巴西","note":"","ucode":"6E68AA02011541","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73043,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575550917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251835,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oiboHpgukqib2ASXeU0H7W1ibgRMqyrNE5KaWicicPEDy0ia8YdoneZAtvW0EFIiaqZJp2OS4dnweOgXaJ5EjJicicEqic5A/132","nickname":"覃钰栋","note":"","ucode":"19080C463658EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158,"discussion_content":"Apache Commons中trie有实现类是哪个呀，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561201089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068459,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/ab/7fab570b.jpg","nickname":"ShawnHo","note":"","ucode":"F839D5B075179A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":115,"discussion_content":"test","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561109742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":114,"discussion_content":"test","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561109696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49127,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1544607849,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"280717482089","product_id":100017301,"comment_content":"思考题：<br><br>依次读取每个字符串的字符构建 Trie 树，用散列表来存储每一个节点。每一层树的所有散列表的元素用一个链表串联起来，<br>求某一长度的前缀重合，在对应树层级上遍历该层链表，求链表长度，除以字符集大小，值越小前缀重合率越高。<br><br>遍历所有树层级的链表，存入散列表，最后散列表包含元素的个数，就代表字符集的大小。","like_count":65,"discussions":[{"author":{"id":1006261,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5a/b5/f667f610.jpg","nickname":"shaomeng","note":"","ucode":"BB9EA8B684A035","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8864,"discussion_content":"是否适合用 Trie 树解决是问题的关键，您这上来就用了 Trie 树啊","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1568085868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1016940,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/6c/effc3a5a.jpg","nickname":"澎湃哥","note":"","ucode":"A8D9A857AAB879","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1006261,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5a/b5/f667f610.jpg","nickname":"shaomeng","note":"","ucode":"BB9EA8B684A035","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208890,"discussion_content":"数据量很大的话，用样本数据做验证也是可以的吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584587890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8864,"ip_address":""},"score":208890,"extra":""}]},{"author":{"id":1128491,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","nickname":"星夜","note":"","ucode":"3B46C09D994CEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318241,"discussion_content":"按照你的思想的话实在没必要用散列表和前缀树，循环遍历字符串的第n个字符就能知道有多少个不同字符，而且最后除以字符集大小感觉不符合重合率定义。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603686851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1371229,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ec/5d/45227d75.jpg","nickname":"顽石少年","note":"","ucode":"397B01176626C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277263,"discussion_content":"没看懂，为什么要用散列表来存储呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591021403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50223,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1544927843,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"199113423459","product_id":100017301,"comment_content":"如何统计字符串的字符集大小，以及前缀重合的程度呢？<br><br>统计字符集的大小，这个问题，其实就是在求字符的最小值以及最大值的问题。<br>我的解决办法<br>1，遍历字符串集合<br>2，将每个字符转化为int数字<br>3，设置最小以及最大的变量，当字符中比最大字符的变量大的时候，将最大字符变量改为当前字符，或者比最小字符小，就修改最小字符<br>4，遍历完成后，所求得的最大值与最小值的差，就是字符集的大小<br><br>前缀重合的程度，这个问题的求解，其实就是做字符的统计问题<br>我的解决办法：<br>使用哈希表来记录下统计数，key为字符，value为统计计数<br>遍历每条记录，假如每条记录中仅包含一个单词（如果多单词，多一步分隔操作，分隔成一个一个的单词）<br>统计计数算法，就是从前到后遍历，遇到存在的，加1，不存在，则存入hash表<br>比如hello这个单词，在哈希表中存储就为<br>h      1<br>he     1<br>hel    1<br>hell   1<br>hello  1<br>当再将出现，比如he<br>就会变成<br>h      2<br>he     2<br>hel    1<br>hell   1<br>hello  1<br><br>统计数据完成后，对这个结果计算重合的字符数与整个字符的占比，<br>具体计算公式为: count(value &gt; 1) &#47; count(all) <br>但我的算法复杂度有点高，是m*n,m表示整个字符的长度，n表示单个单表的长度。<br><br>","like_count":46,"discussions":[{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327837,"discussion_content":"求字符集大小想法不错。但是第2个，不实用。会让占用内存扩大很多倍。若字符长度为k，你切分后子串为1+2+3...+k=(k(k+1))/2 , 内存扩大到O(k^2)。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1605966292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381717,"discussion_content":"字符集大小也不适用，这里求出的范围可能比实际用到的字符数大很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625192767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327837,"ip_address":""},"score":381717,"extra":""}]},{"author":{"id":1371229,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ec/5d/45227d75.jpg","nickname":"顽石少年","note":"","ucode":"397B01176626C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277265,"discussion_content":"这个好懂，理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591021515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236079,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","nickname":"短迪大魔王","note":"","ucode":"37E8117E0495B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163953,"discussion_content":"感谢大佬，第一问感觉有点问题，比如字符集有a,b,c三个，a有500个最多，b有300个次多，c有10个最小，成了490,应该和第二题思路一样，遍历每一个单词的字符，不计数，重复跳过，不重复加入然后求这个集合的len是不是？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581130935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1516010,"avatar":"https://static001.geekbang.org/account/avatar/00/17/21/ea/2cfb9144.jpg","nickname":"auko","note":"","ucode":"7E3AA25B2D250F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1236079,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","nickname":"短迪大魔王","note":"","ucode":"37E8117E0495B8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164056,"discussion_content":"不是求个数大小 , 是求字符跨度大小","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581143571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":163953,"ip_address":""},"score":164056,"extra":""},{"author":{"id":1718524,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/38/fc/b7b62add.jpg","nickname":"夏世威","note":"","ucode":"A5F79D9807FD18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1236079,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","nickname":"短迪大魔王","note":"","ucode":"37E8117E0495B8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220590,"discussion_content":"应该比的是ASCII码大小，a97，c99           所以字符集的大小是3","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585902601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":163953,"ip_address":""},"score":220590,"extra":""}]},{"author":{"id":1318540,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","nickname":"花儿少年","note":"","ucode":"CFE4F64243673B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":94784,"discussion_content":"俺也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576987813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49550,"user_name":"ban","can_delete":false,"product_type":"c1","uid":1034204,"ip_address":"","ucode":"E523CE97E48266","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/dc/9408c8c2.jpg","comment_is_top":false,"comment_ctime":1544711376,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"156163534032","product_id":100017301,"comment_content":"上面代码里： p.isEndingChar = true; 应该是放在for循环的外面吧？<br>不然如果hello，那不就变成 h e l l o 都是叶子节点？","like_count":36,"discussions":[{"author":{"id":1115302,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/a6/18c4f73c.jpg","nickname":"Airsaid","note":"","ucode":"5B90BC0044F376","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64061,"discussion_content":"虽然作者没有回复，但是现在我看的时候已经改过来了。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574933735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49547,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1544710586,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"151868565946","product_id":100017301,"comment_content":"今天的课程比上两节的课程理解起来容易多了 总体觉得就像是构造出来的多叉树，相同的前缀字符串就是同一棵树下来的不同分之","like_count":35,"discussions":[{"author":{"id":1800886,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7a/b6/f54bbfaa.jpg","nickname":"花郎世纪","note":"","ucode":"301DF9B6375E08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173105,"discussion_content":"太真实了······前两节课看了一天","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581830069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238166,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/96/a5d775e9.jpg","nickname":"牧凉","note":"","ucode":"1F57A16E37C668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383345,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626062759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50749,"user_name":"起点·终站","can_delete":false,"product_type":"c1","uid":1239857,"ip_address":"","ucode":"A5AD31F28C240E","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/31/96b76ca8.jpg","comment_is_top":false,"comment_ctime":1545038422,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"143278959190","product_id":100017301,"comment_content":"看完后发现我们项目的屏蔽字检测就是用trie树写的。。666","like_count":33,"discussions":[{"author":{"id":1268797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","nickname":"对白","note":"","ucode":"3183E5ADBC794B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297239,"discussion_content":"Trie树的第三大应用：过滤敏感词 get到了","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1596831145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1221167,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a2/2f/a23364b3.jpg","nickname":"老虎油","note":"","ucode":"2774C3E7305C49","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266350,"discussion_content":"我们也是…过滤屏蔽字…","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1589504923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2849207,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/p7WrTfywicxkRZTdlSEvzTsrWssRF0YnmGY2ffFYGKjIoNC8fnbMiaI9Kic0gOD3icLiapY5vmYh89yLUH7qgZZicn3g/132","nickname":"Geek_8b8904","note":"","ucode":"3A7967582FFE8D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538819,"discussion_content":"所以会定期消除一部分屏蔽词是么，要不树会越来越大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639532260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1214223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/87/0f/96f6e2e7.jpg","nickname":"冷吟閑酔","note":"","ucode":"00C535388B488F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346567,"discussion_content":"巧了 我们也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611994986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234919,"avatar":"","nickname":"奥佛铎","note":"","ucode":"A1D544E5F22B7F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301107,"discussion_content":"哈哈，特色","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598409198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48831,"user_name":"kepmov","can_delete":false,"product_type":"c1","uid":1242496,"ip_address":"","ucode":"09358782026D6A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/tRDAHK9WKQXOIJUP0WBJeR4mmjkXtMgtsTPcprqGzc1SqNWAnkREicvOWvM24YF9D7Ric7C4BEGoloPdOibaaq0hQ/132","comment_is_top":false,"comment_ctime":1544545633,"is_pvip":false,"replies":[{"id":"17737","content":"这个还是自己研究吧 内容太多了 文章有限。或者后面我收集下 统一写几篇加餐文章吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544666985,"ip_address":"","comment_id":48831,"utype":1}],"discussion_count":1,"race_medal":0,"score":"126098597217","product_id":100017301,"comment_content":"trie树实际项目中由于内存问题用的不是很多，老师可以讲解下DAT（双数组trie树）的具体实现吗","like_count":29,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432377,"discussion_content":"这个还是自己研究吧 内容太多了 文章有限。或者后面我收集下 统一写几篇加餐文章吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544666985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48992,"user_name":"雨天","can_delete":false,"product_type":"c1","uid":1056406,"ip_address":"","ucode":"FD9FB404ECA463","user_header":"https://static001.geekbang.org/account/avatar/00/10/1e/96/3162d51f.jpg","comment_is_top":false,"comment_ctime":1544585567,"is_pvip":false,"replies":[{"id":"17606","content":"嗯嗯 怕看不懂嘛","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544596771,"ip_address":"","comment_id":48992,"utype":1}],"discussion_count":2,"race_medal":0,"score":"78853996895","product_id":100017301,"comment_content":"if (p.isEndingChar == false) return false; &#47;&#47; 不能完全匹配，只是前缀<br>else return true; &#47;&#47; 找到 pattern <br>这小段代码有点不大牛.^_^<br>return p.isEndingChar;就好了","like_count":18,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432452,"discussion_content":"嗯嗯 怕看不懂嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544596771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1504652,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","nickname":"抱小星","note":"","ucode":"BA7B0DAFDA4AF5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158528,"discussion_content":"老师怕大家看不懂，主要讲原理，具体实现还得看库里的源码","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1580596167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67588,"user_name":"k","can_delete":false,"product_type":"c1","uid":1250383,"ip_address":"","ucode":"612C04D327D7BB","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/4f/4d5efcf9.jpg","comment_is_top":false,"comment_ctime":1550202912,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"70269679648","product_id":100017301,"comment_content":"用户单词拼写错误的情况下，可以用贝叶斯去纠错，详见Peter Norvig大牛的几十行py教做人 https:&#47;&#47;norvig.com&#47;spell-correct.html","like_count":16,"discussions":[{"author":{"id":1060056,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Bz3ib78GwqQUAoqz7uU1uSoMb6rS2jgKrhcyiasLelvMicEKzxsAp8Jib1sIFuyT5selXFofu9KkpUOmuxv8IqSmJg/132","nickname":"derek","note":"","ucode":"69933B06D4C136","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580286,"discussion_content":"完整的词条进行qc相比不完整的query还是相对容易一些，google做到的是针对不完整的query,也能给出正确的结果，这个就很强","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658064755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87246,"discussion_content":"大佬中文咋就错？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576655023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325826,"discussion_content":"好难...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605440007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":87246,"ip_address":""},"score":325826,"extra":""}]}]},{"had_liked":false,"id":50829,"user_name":"ZX","can_delete":false,"product_type":"c1","uid":1235583,"ip_address":"","ucode":"0D2622FE6D1774","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/7f/8069035d.jpg","comment_is_top":false,"comment_ctime":1545051347,"is_pvip":false,"replies":[{"id":"18326","content":"那个更高级 不讲了  自学吧亲","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545097444,"ip_address":"","comment_id":50829,"utype":1}],"discussion_count":4,"race_medal":0,"score":"70264528083","product_id":100017301,"comment_content":"老师，字符串匹配这里，还差后缀树没讲，很多场合需要用到这种结构，希望老师可以讲一讲","like_count":16,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433128,"discussion_content":"那个更高级 不讲了  自学吧亲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545097444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2760780,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKghO4kJwQ5ccuBA2Yox1WlZmq0JUICpNAsgYlOHX0wHGv48xVRKSvF9a6Eic5l2UOjFjnvTnsibibiaw/132","nickname":"Geek_94045a","note":"","ucode":"B8F23BA9D1411B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408563,"discussion_content":"弱弱问一下 trie树反着做 查起来反着查 是不是就行了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635263490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238166,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/96/a5d775e9.jpg","nickname":"牧凉","note":"","ucode":"1F57A16E37C668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383346,"discussion_content":"你成功引起了我的注意，马上安排学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626062826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215434,"discussion_content":"相比之下后缀树更能体现空间换时间的思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585322760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143278,"user_name":"qazwsx","can_delete":false,"product_type":"c1","uid":1366505,"ip_address":"","ucode":"E8F6D7FD26C34F","user_header":"https://static001.geekbang.org/account/avatar/00/14/d9/e9/eaa1222d.jpg","comment_is_top":false,"comment_ctime":1571660324,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61701202468","product_id":100017301,"comment_content":"力扣 第820题 ","like_count":14},{"had_liked":false,"id":53560,"user_name":"忽忽","can_delete":false,"product_type":"c1","uid":1345819,"ip_address":"","ucode":"1A6E02CD1631C7","user_header":"https://static001.geekbang.org/account/avatar/00/14/89/1b/7974e215.jpg","comment_is_top":false,"comment_ctime":1545676492,"is_pvip":false,"replies":[{"id":"19665","content":"paper","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545826815,"ip_address":"","comment_id":53560,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61675218636","product_id":100017301,"comment_content":"请问下老师，这些图是什么工具画的呀？","like_count":14,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434181,"discussion_content":"paper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545826815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125032,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1566048808,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"53105656360","product_id":100017301,"comment_content":"这节突然变容易了，前面三节课的内容啃了一周。。。","like_count":12,"discussions":[{"author":{"id":1238166,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/96/a5d775e9.jpg","nickname":"牧凉","note":"","ucode":"1F57A16E37C668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383347,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626063012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55123,"user_name":"王鸿运","can_delete":false,"product_type":"c1","uid":1068577,"ip_address":"","ucode":"14AF7B485D29A1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/21/700586eb.jpg","comment_is_top":false,"comment_ctime":1546047845,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"53085655397","product_id":100017301,"comment_content":"isEndingChar可以修改成uint型字段，这样不仅够可以判断是否包含该字符串，还可以进行字符串出现次数","like_count":12,"discussions":[{"author":{"id":1004953,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","nickname":"Chloe","note":"","ucode":"C4848ED5B35752","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257181,"discussion_content":"可以给个例子吗？我觉得不可以呢，endingchar只能说明是否是一个单词的结束，和这个char出现在别的单词里面的次数没有直接关系啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588523677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48955,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1544581652,"is_pvip":false,"replies":[{"id":"17733","content":"把字符串整体当做一个数据 存储在节点里","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544666634,"ip_address":"","comment_id":48955,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48789221908","product_id":100017301,"comment_content":"老师 红黑树  如何实现字符串查找  方便王老师稍微点拨下吗","like_count":11,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432434,"discussion_content":"把字符串整体当做一个数据 存储在节点里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544666634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55461,"user_name":"想当上帝的司机","can_delete":false,"product_type":"c1","uid":1239378,"ip_address":"","ucode":"D8251388854911","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/52/f07e9001.jpg","comment_is_top":false,"comment_ctime":1546185255,"is_pvip":false,"replies":[{"id":"20245","content":"嗯嗯 是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546417918,"ip_address":"","comment_id":55461,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40200890919","product_id":100017301,"comment_content":"26个字符的话TrieNode不要data也可以吧 数组下标就是data","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434781,"discussion_content":"嗯嗯 是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546417918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54846,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1545969543,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35905707911","product_id":100017301,"comment_content":"老师帮忙推荐一些包含Trie树实现的优秀的开源库呗，好让我们深入研究","like_count":8},{"had_liked":false,"id":170869,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1578744010,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"27348547786","product_id":100017301,"comment_content":"一：什么是“Trie树”？<br>\t1，他是一种树形结构，是一种专门处理字符串匹配的数据结构，解决在一组字符串集合中快速查找某个字符串的问题。<br>\t2，Trie树的本质是利用字符串之间公共前缀，将重复的前缀合并在一起<br> <br>\t其中，根节点不包含任何信息，每个节点表示一个字符串中的字符，从根节点到红色节点的一条路径表示一个字符串（红色节点并不都是叶子节点）。<br>\t3，当在Trie树中查找一个字符串时，如“her”,就将要查找的字符串分割成单个的字符h，e，r，然后从Trie树的根节点开始匹配。<br> <br>\t 但，假若要查找的字符串是“he”，用上面同样的方法，从根节点开始，沿着某条路径来匹配，发现路径的最后一个节点“e”不是红色的，即“he”是某个字符串的前缀，但不能完全匹配任何字符串。<br><br>二：如何实现一课Trie树？<br>\t1，Trie树主要有两个操作，一个是将字符串集合构造成Trie树。这个程可分解为：<br>\t将一个字符串插入到Trie树的过程<br>\t在Trie树中查询一个字符串<br>\t2，如何存储一个Trie树<br>\t\t①：Trie树是一个多叉树，需要存储一个节点的所有子节点的指针。<br>\t\t②：一种经典的存储方式：借助散列表额思想，通过一个下标与字符一一映射的数组，来存储子节点的指针。<br> <br>假设字符串中只有从a到z这26个小写字母，从数组中下标为0的位置，存储指向子节点a的指针，下标为1的位置存储指向子节点b的指针，以此类推，下标为25的位置，储存的是指向的子节点z的指针。如果某个字符的子节点不存在，就在对应的下标的位置存储null。<br>当在Trie树中查找字符串的时候，就可以通过字符的ASCII码减去“a”的ASCII码，迅速找到匹配的子节点的指针。<br>\t3，在Trie树中，查找某个字符串的时间复杂度：<br>\t\t在一组字符串中，频繁的查询某些字符串，用Trie树非常高效。<br>构建Trie树的过程，需要扫描所有的字符串，时间复杂度是O(n) n表示所有字符串的长度和。但一旦构建成功后，后续的查询操作会非常高效。<br><br>每次查询，如果要查询的字符长度是k，那只需要对比大约k个节点。就能完成查询操作。与原本那组字符串的长度和个数没有任何关系。所以，构建好Trie树后，在其中查找字符串的时间复杂度是O(k)。k表示要查找字符串的长度。<br>\t4，Trie树很耗内存吗?<br>\t\tTrie树是使用数组来储存一个节点的子节点的指针的，即便一节点只有很少的子节点，远小于26个，比如2，3个，也要维护一个长度为26的数组。<br>\t\tTrie的本质是避免重复存储一组字符串的相同前缀子串，但现在每个字符（对应一个节点）的存储远远大于1个字节。<br>\t\t如果字符串中不仅包含小写字母，还包含大写字母，数字，甚至是中文，那需要的存储空间就更多了。所以在重复前缀并不多的情况下，Trie树不但不节省内存，还有可能浪费更多的内存。<br>\t<br>\t5，Tri树的优化方案：<br>\t牺牲一点查询的效率，将每个节点中的数组换成其他数据结构，来存储一个节点指针。如：有序数组，跳表，散列表，红黑树等。<br><br>假设用有序数组，数组中的指针按照指向的子节点中的字符大小顺序排序。查询时，可以通过二分查找的方法，快速查找到某个字符应该匹配的子节点的指针。<br>\t缩点优化，就是对只有一个子节点的节点，而且此节点不是一个串的结束节点，可以将此子节点合并。这样可以节省空间，但却增加了编码难度。<br> <br><br>三：Trie数与散列表的，红黑树的比较<br>\t1，字符串的匹配问题，笼统上讲，其实就是数据的查找问题。<br>\t2，在一组字符串中查找字符串，Trie数实际上表现的并不好，他对要处理的字符串有极其严苛的要求：<br>\t\t第一，字符中包含的字符集不能太大，如果字符集太大，那么存储空间就可能浪费很多。即便优化也要付出牺牲查询，插入效率的代价。<br>\t\t第二，要求字符串的前缀重合比较到，不然空间消耗会变大很多。<br>\t\t第三，如果要用Trie树解决问题，就需要自己从零开始实现一个Trie树，还要保证没有bug，这在工程上是把简单问题复杂化。<br>\t\t第四，通过指针串起来的数据是不连续的，而Trie树用到了指针，所以，对缓存并不友好。性能上会打个折扣。<br>\t<br>\t综上：Trie树不适合精确匹配查找，这种问题更适合用散列表或红黑树来解决。Trie树比较适合的是查找前缀匹配的字符串。<br>\t<br>\tTrie的这个特点可以扩展到更加广泛的一个应用上：自动输入补全。<br>","like_count":6,"discussions":[{"author":{"id":1382587,"avatar":"https://static001.geekbang.org/account/avatar/00/15/18/bb/9299fab1.jpg","nickname":"Null","note":"","ucode":"A7D4DF2A43C7D8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557004,"discussion_content":"这个跟抄了一边文章有啥区别，帮助老师整理了下目录吗？😺","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647601249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1547090,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9b/52/cb97162e.jpg","nickname":"Sarai李","note":"","ucode":"F8104FC4639804","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1382587,"avatar":"https://static001.geekbang.org/account/avatar/00/15/18/bb/9299fab1.jpg","nickname":"Null","note":"","ucode":"A7D4DF2A43C7D8","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":574294,"discussion_content":"当然有用，我就是把所有课程文后的总结先整理了一遍，这些都是gist，快速过一遍可以建立系统思维。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653959910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":557004,"ip_address":""},"score":574294,"extra":""}]}]},{"had_liked":false,"id":98649,"user_name":"Shawn","can_delete":false,"product_type":"c1","uid":1014729,"ip_address":"","ucode":"B95D7B54465DE4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/c9/75c9002e.jpg","comment_is_top":false,"comment_ctime":1559049321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27328853097","product_id":100017301,"comment_content":"路由表匹配应该算是超级经典trie应用了，不过代码超级难看懂。","like_count":6},{"had_liked":false,"id":51101,"user_name":"Lisa Li","can_delete":false,"product_type":"c1","uid":1046663,"ip_address":"","ucode":"4F7CF929FF4C6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/87/0491e9e5.jpg","comment_is_top":false,"comment_ctime":1545113968,"is_pvip":false,"replies":[{"id":"18563","content":"用指针串起来的数据在内存中是不连续的 对cpu缓存来说 不友好 你可以看下链表那一节","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545185309,"ip_address":"","comment_id":51101,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27314917744","product_id":100017301,"comment_content":"“而 Trie 树中用到了指针，所以，对缓存并不友好，性能上会打个折扣。” 可以解释一下为什么吗？","like_count":6,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433285,"discussion_content":"用指针串起来的数据在内存中是不连续的 对cpu缓存来说 不友好 你可以看下链表那一节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545185309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015240,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","nickname":"恬毅","note":"","ucode":"914ED16F3BE714","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546526,"discussion_content":"cpu的缓存概念，每次加载的时候，会同时把当前内存区域前后多拿一部分，这样下次命中就不用再去内存拿。比如cpu去内存拿1位置的a，会将2位置的b和3位置的c都一起加载到cpu去，下次要用b的时候，就不用去内存拿了。如果是链表，不连续，cpu去第2位置的时候，不一定是cpu想要的b，所以说相对数组来说，是不友好的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642335024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92989,"user_name":"掸尘","can_delete":false,"product_type":"c1","uid":1110775,"ip_address":"","ucode":"38075365A1512F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/f7/83a8a0d8.jpg","comment_is_top":false,"comment_ctime":1557373669,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23032210149","product_id":100017301,"comment_content":"C 版本代码：<br><br>#define OK 1<br>#define ERROR 0<br>#define TRUE 1<br>#define FALSE 0<br><br>typedef int Status;<br><br>typedef struct Node {<br>    char data;<br>    struct Node *children[26];<br>    Status end;<br>} Trie, *TriePtr;<br><br>void Init(TriePtr *T)<br>{<br>    (*T) = (TriePtr)malloc(sizeof(Trie));<br>    (*T)-&gt;data = &#39;&#47;&#39;;<br>    (*T)-&gt;end = FALSE;<br>}<br><br>void Insert(TriePtr T, char *str) {<br><br>    int index;<br>    char c;<br><br>    while(c = *str++)<br>    {<br>        index = c - &#39;a&#39;;<br>        if (T-&gt;children[index] == NULL)<br>        {<br>            TriePtr Node;<br>            Node = (TriePtr)malloc(sizeof(Trie));<br>            Node-&gt;data = c;<br>            Node-&gt;end = FALSE;<br>            T-&gt;children[index] = Node;<br>        }<br><br>        T = T-&gt;children[index];<br>    }<br><br>    T-&gt;end = TRUE;<br>}<br><br><br>Status Search(TriePtr T, char *str) {<br><br>    int index;<br>    char c;<br><br>    while(c = *str++)<br>    {<br>        index = c - &#39;a&#39;;<br>        if (T-&gt;children[index] == NULL)<br>        {<br>            return FALSE;<br>        }<br><br>        T = T-&gt;children[index];<br>    }<br><br>    if (T-&gt;end) {<br>        return TRUE;<br>    } else {<br>        return FALSE;<br>    }<br>}<br>","like_count":5,"discussions":[{"author":{"id":1635059,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f2/f3/ebbba875.jpg","nickname":"我是超人","note":"","ucode":"D8A3DF8EBDEB56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41408,"discussion_content":"那个初始化的时候children不赋值，里面存放的指针真的是指向空吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572421310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56921,"user_name":"追风者","can_delete":false,"product_type":"c1","uid":1055092,"ip_address":"","ucode":"879BC372A6B605","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjUDIRQ0gRiciax3Wo78c5rVjuWDiaw4ibcCiby8xiaMXJh5ibjU5242vfCGOK4ehibe1IKyxex2A4IX4XSA/132","comment_is_top":false,"comment_ctime":1546580049,"is_pvip":false,"replies":[{"id":"21841","content":"1. he的e节点也会被标记为结尾字符节点<br>2. jieba分词不怎么了解呢。。。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547708187,"ip_address":"","comment_id":56921,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18726449233","product_id":100017301,"comment_content":"王老师，关于Trie树有两点疑问。<br>1.文中用‘he’和‘her’构建Trie树，当我要查询‘he’的时候怎么办？<br>2.像jieba分词这种切词工具，为什么要用Trie树呢？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435312,"discussion_content":"1. he的e节点也会被标记为结尾字符节点\n2. jieba分词不怎么了解呢。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547708187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2364366,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ0L9a0y8JQYK6ugqyD0ZkibU69C3McSZ2TCgjyDf3gpL9Esic91TicpLIH9iaTBZibMiaJG5bWOvibU0fNg/132","nickname":"GreyFoss","note":"","ucode":"83E523BB4602CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349747,"discussion_content":"只要匹配串匹配完了就返回true，否则返回false。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613490867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87243,"discussion_content":"这个主要用于模糊匹配，就算不是最终叶子结点也没有关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576654805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49644,"user_name":"莫弹弹","can_delete":false,"product_type":"c1","uid":1239978,"ip_address":"","ucode":"60A25C709A665F","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/aa/db213a66.jpg","comment_is_top":false,"comment_ctime":1544749503,"is_pvip":false,"replies":[{"id":"17896","content":"这个数据量小的话 确实暴力最快","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544754205,"ip_address":"","comment_id":49644,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18724618687","product_id":100017301,"comment_content":"想起来上一次需求是做敏感词检测，需要匹配到指定动词和指定名词才会触发屏蔽，经过实验，暴力for循环是最快的(&quot;▔㉨▔) trie太复杂了写完怕别人看不懂","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432699,"discussion_content":"这个数据量小的话 确实暴力最快","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544754205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49172,"user_name":"TryTs","can_delete":false,"product_type":"c1","uid":1036276,"ip_address":"","ucode":"1DD1E974D461A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f4/26b95f0b.jpg","comment_is_top":false,"comment_ctime":1544616741,"is_pvip":false,"replies":[{"id":"17729","content":"没有现成的教程 书。只能自己摸索了。多看看别人分享的文章 自己理个知识大纲 然后再查缺补漏吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544666156,"ip_address":"","comment_id":49172,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18724485925","product_id":100017301,"comment_content":"老师，麻烦请问一下您请问一下对于一些新的领域，没有现成的书，教程你会通过什么方法跟途径或者说平台去体系的学习？还有我就是想请教一下老师您对AR的看法？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432514,"discussion_content":"没有现成的教程 书。只能自己摸索了。多看看别人分享的文章 自己理个知识大纲 然后再查缺补漏吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544666156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60340,"user_name":"黄世仁","can_delete":false,"product_type":"c1","uid":1254911,"ip_address":"","ucode":"840C31DA4B5FAA","user_header":"","comment_is_top":false,"comment_ctime":1547459532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14432361420","product_id":100017301,"comment_content":"按照老师的讲解，实现了一个带自动补齐的TrieTree, https:&#47;&#47;github.com&#47;email2liyang&#47;algo&#47;commit&#47;f3d4afe59aac7ee6b2031f392825445f656e50bc","like_count":3},{"had_liked":false,"id":48986,"user_name":"freeland","can_delete":false,"product_type":"c1","uid":1023562,"ip_address":"","ucode":"F0005A096EF819","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9e/4a/2f81b0f5.jpg","comment_is_top":false,"comment_ctime":1544585331,"is_pvip":false,"replies":[{"id":"17732","content":"思路差不多 更高级点","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544666587,"ip_address":"","comment_id":48986,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14429487219","product_id":100017301,"comment_content":"以太坊上header里的transaction .root ,state root,receipt root用的是Merkle-PatriciaTrie(MPT)，和今天的这个是一个么","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432450,"discussion_content":"思路差不多 更高级点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544666587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48879,"user_name":"夏洛克的救赎","can_delete":false,"product_type":"c1","uid":1021334,"ip_address":"","ucode":"44453DD27A3216","user_header":"https://static001.geekbang.org/account/avatar/00/0f/95/96/0020bd67.jpg","comment_is_top":false,"comment_ctime":1544575607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14429477495","product_id":100017301,"comment_content":"问题思考：<br>1 中文转换成ASCII码？<br>2 根据以往用户搜索记录，选择占比最高的<br>3 从词库检索匹配？","like_count":3},{"had_liked":false,"id":106650,"user_name":"莫小鹏","can_delete":false,"product_type":"c1","uid":1158881,"ip_address":"","ucode":"0EE0654FD0FB85","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/e1/78701ecf.jpg","comment_is_top":false,"comment_ctime":1561364810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10151299402","product_id":100017301,"comment_content":"https:&#47;&#47;leetcode-cn.com&#47;problems&#47;implement-trie-prefix-tree&#47;<br>leetcode上面有实现trie树的练习题","like_count":2},{"had_liked":false,"id":58179,"user_name":"lm","can_delete":false,"product_type":"c1","uid":1257358,"ip_address":"","ucode":"128EE354CAC683","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK7lrNkubM9GZyvcaaJ4PxeRw6LGnsHxJ9hvNEK6KToxF5VFOFia1bUZQpia9fMgERUyRc85Jk4vV8A/132","comment_is_top":false,"comment_ctime":1547007413,"is_pvip":false,"replies":[{"id":"21066","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547086333,"ip_address":"","comment_id":58179,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10136942005","product_id":100017301,"comment_content":"这种树结构是不是匹配到前缀后还得继续遍历前缀的子节点？这样提示字符串才能显示全","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435943,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547086333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50531,"user_name":"Li Yao","can_delete":false,"product_type":"c1","uid":1129838,"ip_address":"","ucode":"703E1E5505F70D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/6e/60680aa4.jpg","comment_is_top":false,"comment_ctime":1545007433,"is_pvip":false,"replies":[{"id":"18572","content":"已经改正 多谢🙏","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545186006,"ip_address":"","comment_id":50531,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10134942025","product_id":100017301,"comment_content":"p = p.children[index];<br>p.isEndingChar = true;<br>是不是应该放到for循环外面？ 否则每个节点都会被标记为endingChar?","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433013,"discussion_content":"已经改正 多谢🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545186006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49401,"user_name":"子嘉","can_delete":false,"product_type":"c1","uid":1252422,"ip_address":"","ucode":"CF0DC72E2B6B9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/46/a141c7e6.jpg","comment_is_top":false,"comment_ctime":1544681036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10134615628","product_id":100017301,"comment_content":"咋感觉中文的可以用 有向图？ 文字类似于微博的关系 “我们” 是 我-&gt;们 但是不是 们-&gt;我 就是实现起来感觉非常麻烦","like_count":2},{"had_liked":false,"id":288090,"user_name":"金先生","can_delete":false,"product_type":"c1","uid":2168501,"ip_address":"","ucode":"F8F02BAE1235DE","user_header":"https://static001.geekbang.org/account/avatar/00/21/16/b5/f0ba2764.jpg","comment_is_top":false,"comment_ctime":1618295540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5913262836","product_id":100017301,"comment_content":"存中文咋解决","like_count":1},{"had_liked":false,"id":216593,"user_name":"kaiser","can_delete":false,"product_type":"c1","uid":1390375,"ip_address":"","ucode":"F9438786E9A57B","user_header":"https://static001.geekbang.org/account/avatar/00/15/37/27/b023ada7.jpg","comment_is_top":false,"comment_ctime":1589292341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884259637","product_id":100017301,"comment_content":"自己实现的 java 代码：<br>https:&#47;&#47;github.com&#47;kaisesai&#47;datastructures_algorithm&#47;blob&#47;master&#47;src&#47;main&#47;java&#47;com&#47;liukai&#47;datastructure&#47;ch_35_trie&#47;Trie.java","like_count":1},{"had_liked":false,"id":213645,"user_name":"xk_","can_delete":false,"product_type":"c1","uid":1514305,"ip_address":"","ucode":"DFE1AC38EA78A7","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","comment_is_top":false,"comment_ctime":1588498851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883466147","product_id":100017301,"comment_content":"序数组、跳表、散列表、红黑树等。<br><br>假设我们用有序数组，数组中的指针按照所指向的子节点中的字符的大小顺序排列。查询的时候，我们可以通过二分查找的方法，快速查找到某个字符应该匹配的子节点的指针。但是，在往 Trie 树中插入一个字符串的时候，我们为了维护数组中数据的有序性，就会稍微慢了点。<br><br>开始自己的分析：<br>假设我们用跳表来实现，实现难度比较大。<br><br>假设我们用的是散列表来实现trie树，查询效率很高。但是每一个节点都需要一个散列表，需要插入一个字符串的时候，需要进行多次的hash计算；可能会遇到多次扩容和缩容的情况。<br><br>那使用红黑树，无法避免极端情况下的，时间复杂度退化问题，对于搜索这种频繁查询的场景还是不太行。<br><br>老师举例的数据结构都是用空间换时间的，除了数组，还真想不到更节省内存的数据结构了。","like_count":1},{"had_liked":false,"id":148268,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1572966543,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867933839","product_id":100017301,"comment_content":"1.前缀重合度统计<br>(1)创建一个一维数组，数组的长度取所有字符串中最大长度，一维数组中的每一个元素都是一个集合，一维数组的下标代表了每个字符在字符串中的位置，也即把每个字符串中的每个字符，都存贮<br>到该一维数组对应的集合中，集合在一维数组中的下标即为该字符在其所在字符串中位置。由于集合是不会存贮相同元素，因此，数组中每个集合中的字符都不会相同。<br>在拆分字符存贮的同时，顺带把字符总数也统计出来。<br>(2)扫描一维数组中的每个集合，统计每个集合中不重复的字符数，所有集合中的字符数即为在Trie树中要分配的存贮单元。<br>(3)计算重合度，重合度 = 1 - 不重复的字符数之和&#47;字符总数，重合度越高，Trie树中的节点数就越少。<br><br>2.字符集大小估计<br>这个想不出有什么好的方法来估计，只能在程序中依次进行判断，<br>(1)初始：字符集大小=0<br>(2)如果碰到英文字符，则字符集大小加26，<br>(3)如果遇到数字，则字符集大小加10<br>(4)如果遇到汉字，则不能用Trie树结构。<br>请老师指正。","like_count":1},{"had_liked":false,"id":91900,"user_name":"Robert","can_delete":false,"product_type":"c1","uid":1057914,"ip_address":"","ucode":"594538993C02ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/7a/6ee10cc8.jpg","comment_is_top":false,"comment_ctime":1557130768,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852098064","product_id":100017301,"comment_content":"思考题我想的比较简单：将字符串去重后统计数量，看看与原始字符串数量的比例。","like_count":1},{"had_liked":false,"id":78310,"user_name":"刘涛涛","can_delete":false,"product_type":"c1","uid":1396130,"ip_address":"","ucode":"D2EE76FA0BB1C5","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/a2/9450ef89.jpg","comment_is_top":false,"comment_ctime":1553129431,"is_pvip":false,"replies":[{"id":"28523","content":"y也会标记为ending，e的ending标记保持有效。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553134026,"ip_address":"","comment_id":78310,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5848096727","product_id":100017301,"comment_content":"hey和he都放到trie树里面如何放置呢，如果先放he，那么e被标记为ending，再放入hey的时候，会发生什么呢，e的endiing是否有效？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444043,"discussion_content":"y也会标记为ending，e的ending标记保持有效。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553134026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49548,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1544710969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839678265","product_id":100017301,"comment_content":"不过代码有点不太明白的地方在于 isendingchar是哪里来的？主要是干啥的呢？","like_count":1},{"had_liked":false,"id":49088,"user_name":"🐱您的好友William🐱","can_delete":false,"product_type":"c1","uid":1215456,"ip_address":"","ucode":"427786DB178965","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e0/9a79ddac.jpg","comment_is_top":false,"comment_ctime":1544601562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839568858","product_id":100017301,"comment_content":"我来提供一个异想天开的想法哈哈，我想的是通过leetcode127题的Word Ladder的类似的方法实现，通过逐个改变每个字符串的后缀看看能不能匹配到其他字符串，进行BFS看看得改多少次才能匹配到原来的list里面有的单词，如果平均改的次数很多证明这个前缀不起什么作用，如果改的很少证明前缀的重复利用率很高！","like_count":1},{"had_liked":false,"id":48999,"user_name":"narcos","can_delete":false,"product_type":"c1","uid":1244286,"ip_address":"","ucode":"725A8944BAA993","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/7e/0cc5a187.jpg","comment_is_top":false,"comment_ctime":1544586742,"is_pvip":false,"replies":[{"id":"17605","content":"下一节","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544596752,"ip_address":"","comment_id":48999,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5839554038","product_id":100017301,"comment_content":"老师，下一节是 AC 自动机吗？什么时候发？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432456,"discussion_content":"下一节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544596752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113,"discussion_content":"测试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561109573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48988,"user_name":"blacknhole","can_delete":false,"product_type":"c1","uid":1098286,"ip_address":"","ucode":"271682FFE28F25","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","comment_is_top":false,"comment_ctime":1544585411,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839552707","product_id":100017301,"comment_content":"（一个疑问<br>&quot;每个节点表示一个字符串中的字符，从根节点到红色节点的一条路径表示一个字符串(注意：红色节点并不都是叶子节点)。”中所说的红色节点在文中一直都是叶子节点啊，为什么要提示不都是叶子节点?）<br><br>我想到了，红色是isEndingChar为true，但依然可以有子节点，即作为其他字符串的前缀。","like_count":1},{"had_liked":false,"id":48978,"user_name":"blacknhole","can_delete":false,"product_type":"c1","uid":1098286,"ip_address":"","ucode":"271682FFE28F25","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","comment_is_top":false,"comment_ctime":1544584864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839552160","product_id":100017301,"comment_content":"一个疑问：<br>“每个节点表示一个字符串中的字符，从根节点到红色节点的一条路径表示一个字符串（注意：红色节点并不都是叶子节点）。”中所说的红色节点在文中一直都是叶子节点啊，为什么要提示不都是叶子节点？","like_count":1},{"had_liked":false,"id":48852,"user_name":"hughieyu","can_delete":false,"product_type":"c1","uid":1206690,"ip_address":"","ucode":"FC1A64B2BAB784","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/a2/c30ac459.jpg","comment_is_top":false,"comment_ctime":1544572709,"is_pvip":false,"replies":[{"id":"17607","content":"这里是完全匹配 不考虑前缀的情况","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544596818,"ip_address":"","comment_id":48852,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839540005","product_id":100017301,"comment_content":"if (i == text.length-1) {<br>          newNode.isEndingChar = true;<br>     }<br><br>这一段代码是不是应该拿到上一层判断是否存在的if外面去 比如先走hello 再有he e就不是endchar了","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432388,"discussion_content":"这里是完全匹配 不考虑前缀的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544596818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359239,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1665368844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665368844","product_id":100017301,"comment_content":"总结：<br>tree树是拿来做前缀匹配的<br><br>思考：<br><br>1. 字符集大小可以通过hash来解决，转化成编码单个字符遍历通过hash看有多少不同<br>2. 前缀的多少可以取中间1000条数据，对每条记录都依次存储前缀（使用hash表，k为前缀，v为后缀）最后统计有多少相同前缀，除以1000看能否合格。","like_count":0},{"had_liked":false,"id":356742,"user_name":"蒋慕平","can_delete":false,"product_type":"c1","uid":2302901,"ip_address":"重庆","ucode":"57B8FF7F00C042","user_header":"https://static001.geekbang.org/account/avatar/00/23/23/b5/639a12ec.jpg","comment_is_top":false,"comment_ctime":1662544151,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662544151","product_id":100017301,"comment_content":"tri树<br>1. 时间复杂度O(k)，费内存<br>2. Trie 树的优势并不在于，用它来做动态集合数据的查找.红黑树和散列表<br>3. Trie 树最有优势的是查找前缀匹配的字符串","like_count":0},{"had_liked":false,"id":350322,"user_name":"Geek_ec29e5","can_delete":false,"product_type":"c1","uid":2558300,"ip_address":"","ucode":"25CDB5F10BB49C","user_header":"","comment_is_top":false,"comment_ctime":1656808633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656808633","product_id":100017301,"comment_content":"搜索引擎搜索不是利用倒排索引吗？","like_count":0},{"had_liked":false,"id":344147,"user_name":"Geek_wyh","can_delete":false,"product_type":"c1","uid":1819561,"ip_address":"","ucode":"5E72906A5FACAB","user_header":"https://static001.geekbang.org/account/avatar/00/1b/c3/a9/d00654e8.jpg","comment_is_top":false,"comment_ctime":1651302232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651302232","product_id":100017301,"comment_content":"可以去看看 gin 的 trie 树实现","like_count":0},{"had_liked":false,"id":338612,"user_name":"Null","can_delete":false,"product_type":"c1","uid":1382587,"ip_address":"","ucode":"A7D4DF2A43C7D8","user_header":"https://static001.geekbang.org/account/avatar/00/15/18/bb/9299fab1.jpg","comment_is_top":false,"comment_ctime":1647594896,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647594896","product_id":100017301,"comment_content":"给朗读者一个小建议<br><br>这个Trie为了跟我们数据结构Tree做区分，一般读作（try）.","like_count":0},{"had_liked":false,"id":338174,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1647335009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647335009","product_id":100017301,"comment_content":"思考题：<br>每个字符串按前 m 位递减拆开，存入哈希表，时间复杂度 O(m * n); 最后做排序统计，可以粗略估算","like_count":0},{"had_liked":false,"id":323566,"user_name":"苏杭天下","can_delete":false,"product_type":"c1","uid":2626287,"ip_address":"","ucode":"C6080021BA450F","user_header":"https://static001.geekbang.org/account/avatar/00/28/12/ef/cb0b57ec.jpg","comment_is_top":false,"comment_ctime":1637994628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637994628","product_id":100017301,"comment_content":"Trie如果要实现删除功能，有什么好的方案吗","like_count":0},{"had_liked":false,"id":321379,"user_name":"WSZ","can_delete":false,"product_type":"c1","uid":2103542,"ip_address":"","ucode":"AB092B48C52D47","user_header":"https://static001.geekbang.org/account/avatar/00/20/18/f6/db57fef1.jpg","comment_is_top":false,"comment_ctime":1636817845,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636817845","product_id":100017301,"comment_content":"子树，我用哈希map来搞了","like_count":0},{"had_liked":false,"id":319196,"user_name":"Shinran.","can_delete":false,"product_type":"c1","uid":1240937,"ip_address":"","ucode":"E28AF157D1A93E","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/69/25ea2d67.jpg","comment_is_top":false,"comment_ctime":1635666933,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1635666933","product_id":100017301,"comment_content":"如果一开始字符串有he，怎么构造呢","like_count":0},{"had_liked":false,"id":302542,"user_name":"fei","can_delete":false,"product_type":"c1","uid":2691974,"ip_address":"","ucode":"CEB9A1C195A074","user_header":"https://static001.geekbang.org/account/avatar/00/29/13/86/89e255c3.jpg","comment_is_top":false,"comment_ctime":1626254730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626254730","product_id":100017301,"comment_content":"字符集大小通过hash哈希表来计算。<br>前缀重合程度通过trie树遍历该前缀的数量和查找总数量来计算","like_count":0},{"had_liked":false,"id":298046,"user_name":"海崖","can_delete":false,"product_type":"c1","uid":2552745,"ip_address":"","ucode":"9D42E0B0D30A56","user_header":"https://static001.geekbang.org/account/avatar/00/26/f3/a9/bb9d8450.jpg","comment_is_top":false,"comment_ctime":1623896498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623896498","product_id":100017301,"comment_content":"叮~打卡","like_count":0},{"had_liked":false,"id":288392,"user_name":"帝江","can_delete":false,"product_type":"c1","uid":1590610,"ip_address":"","ucode":"93CBA4E4D05DA5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B9vSOjMc2a86kYA8R5yDkVdFiaj2JeBZ1PuI9oUKhbnvuZwuibdUam6FTcGzDaiaFdk2GWJveUGhfCVpv4KaOdicoQ/132","comment_is_top":false,"comment_ctime":1618453561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618453561","product_id":100017301,"comment_content":"比如找前两个字母的相同的数据.可以找26*26个桶.然后依次遍历计数.最后看桶里的数据的多少.分布越平均说明共同的前缀越少.分布越不平均.说明共同前缀越多.极端情况下.只在一个桶内.说明所有数据共用同一个长度为2的前缀.","like_count":0},{"had_liked":false,"id":285508,"user_name":"彭方亮。","can_delete":false,"product_type":"c1","uid":2306794,"ip_address":"","ucode":"A72E626B1BF514","user_header":"https://static001.geekbang.org/account/avatar/00/23/32/ea/dbfc5794.jpg","comment_is_top":false,"comment_ctime":1616851943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616851943","product_id":100017301,"comment_content":"如果是使用Map里面存放Map的结构存储,是不是很高效啊","like_count":0},{"had_liked":false,"id":272931,"user_name":"石小","can_delete":false,"product_type":"c1","uid":1781893,"ip_address":"","ucode":"4258C686F289A6","user_header":"https://static001.geekbang.org/account/avatar/00/1b/30/85/14c2f16c.jpg","comment_is_top":false,"comment_ctime":1610357745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610357745","product_id":100017301,"comment_content":"go-wordsfilter用go语言实现的一个非常高效的敏感词过滤器。存储也很高效，可以工程应用。","like_count":0},{"had_liked":false,"id":264608,"user_name":"Geek_wade","can_delete":false,"product_type":"c1","uid":2084019,"ip_address":"","ucode":"BD80EAD142420A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIVR2wY9icec2OvDBEBKnzpdqy1g2qEYmJOgv6Im1P3usLwqViaPpyic0hRgmc0KO1LljbibzK7pMQnSw/132","comment_is_top":false,"comment_ctime":1606544392,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1606544392","product_id":100017301,"comment_content":"老师可以讲讲 Lucene的FST吗","like_count":0},{"had_liked":false,"id":249949,"user_name":"极客学子","can_delete":false,"product_type":"c1","uid":1149510,"ip_address":"","ucode":"40051597564EB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/46/71747b18.jpg","comment_is_top":false,"comment_ctime":1600862266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600862266","product_id":100017301,"comment_content":"1.可以遍历整个字符串集合，然后通过哈希表统计不同的字符，比如遍历到一个字符，如果哈希表中不存在则存入哈希表，如果存在则跳过遍历下一个，遍历结束后通过判断哈希表的size大小来确定是否适合Trie树。","like_count":0},{"had_liked":false,"id":243137,"user_name":"放下","can_delete":false,"product_type":"c1","uid":1397434,"ip_address":"","ucode":"1AD911B1E23BDB","user_header":"https://static001.geekbang.org/account/avatar/00/15/52/ba/412b05c1.jpg","comment_is_top":false,"comment_ctime":1597974202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597974202","product_id":100017301,"comment_content":"每个节点都要存储一个长度为 26 的数组，这种数据结构可以改为每个节点存储一个长度为8的数组，数组大小不够了在进行扩容就好了，数据结构换成散列表，散列表底层也是数组长度不够了在进行扩容，本质都一样呀，最多是hash冲突了处理成链表或红黑树，所以对老师说的片面的认为数组很浪费空间的问题，不是很赞同，希望老师给予解惑","like_count":0},{"had_liked":false,"id":241010,"user_name":"10xiaohu","can_delete":false,"product_type":"c1","uid":1589055,"ip_address":"","ucode":"CAB39DBB93E608","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKKKdCyib4iblXC6JIH7HWDfIFVweTb7SgEOuRjquic3GiaiaGInFSiaU8w2y2bjvZjgiaA3IEQuyibXTaeHQ/132","comment_is_top":false,"comment_ctime":1597149320,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597149320","product_id":100017301,"comment_content":"要扫描所有的字符串，时间复杂度是O(n)(n表示所有字符串的长度和)  这个，有点没明白，插入字符串的时候，最多比较插入字符串的长度，不存在的话就新增。不明白为啥是所以字符串的长度和","like_count":0},{"had_liked":false,"id":239509,"user_name":"fxs007","can_delete":false,"product_type":"c1","uid":1346554,"ip_address":"","ucode":"78847ED5C33E9B","user_header":"https://static001.geekbang.org/account/avatar/00/14/8b/fa/90126961.jpg","comment_is_top":false,"comment_ctime":1596551817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596551817","product_id":100017301,"comment_content":"我记得以前linux内核routing lookup table数据结构就是trie，不知道现在改了没有","like_count":0},{"had_liked":false,"id":238188,"user_name":"机智过人诸葛维奇涌","can_delete":false,"product_type":"c1","uid":2009848,"ip_address":"","ucode":"331F17DAAAE087","user_header":"https://static001.geekbang.org/account/avatar/00/1e/aa/f8/d126592e.jpg","comment_is_top":false,"comment_ctime":1596091771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596091771","product_id":100017301,"comment_content":"1.复杂的中文是不是可以用哈希值去做 trie树<br>2.作为前缀在 Trie 树中可以匹配的关键词也有很多，如何选择展示，选择长度较短的路径优先<br>3.用户单词拼写错误，可能情况是个别词用错，可以选取匹配度最高的路径，是不是有深度优先遍历<br><br>思考题<br>可以取1&#47;10看看字符使用频率，前缀重合等同于树的高度极端情况 前缀长度等于树的高度，这里不太清楚如何快速判断","like_count":0},{"had_liked":false,"id":227323,"user_name":"你在不远的未来","can_delete":false,"product_type":"c1","uid":1318404,"ip_address":"","ucode":"5B34C8BD03B71A","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/04/f902047e.jpg","comment_is_top":false,"comment_ctime":1592358061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592358061","product_id":100017301,"comment_content":"思考题，<br>Trie 树多应用静态且高前缀重复度的数据，生成的之后的数据叶子节点数就是去重之后静态数据去重数。可以根据这个来进行判断。<br>","like_count":0},{"had_liked":false,"id":226036,"user_name":"梨还羽","can_delete":false,"product_type":"c1","uid":1243267,"ip_address":"","ucode":"F6C89EF10DFC89","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/83/008b7b58.jpg","comment_is_top":false,"comment_ctime":1591932726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591932726","product_id":100017301,"comment_content":"trie树的数据结构不用包括data，老师在写代码的时候insert和search方法里也都没有用到data；<br>用golang实现trie树可以把字符数组用map[byte]*Trie代替，可以不受字符集的限制。","like_count":0},{"had_liked":false,"id":225456,"user_name":"肖臧","can_delete":false,"product_type":"c1","uid":1047733,"ip_address":"","ucode":"4FAC9FF54DD6A0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","comment_is_top":false,"comment_ctime":1591759297,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591759297","product_id":100017301,"comment_content":"用Java写了一个递归的前缀匹配，供大家参考：<br>public List&lt;String&gt; prefix(final String term) {<br>    TreeNode p = root;<br>    String prefix = &quot;&quot;;<br>    for (int i = 0; i &lt; term.length(); i++) {<br>      char ch = term.charAt(i);<br>      int index = ch - &#39;a&#39;;<br>      if (p.children[index] == null) {<br>        break;<br>      }<br>      p = p.children[index];<br>      prefix = prefix + p.data;<br>    }<br><br>    List&lt;String&gt; suffixList = recursiveSuffix(p);<br>    final String prfx = prefix;<br>    List&lt;String&gt; prefixList = suffixList.stream().map(k -&gt; {return prfx +k;})<br>      .collect(Collectors.toList());<br><br>    return prefixList;<br>  }<br><br>  private List&lt;String&gt; recursiveSuffix(TreeNode treeNode) {<br>    List&lt;String&gt; list = new ArrayList&lt;&gt;();<br>    for (TreeNode child : treeNode.children) {<br>      if (child == null) {<br>        continue;<br>      }<br><br>      String suffix = String.valueOf(child.data);<br>      for (String item : recursiveSuffix(child)) {<br>        suffix = suffix + item;<br>      }<br><br>      list.add(suffix);<br>    }<br><br>    return list;<br>  }","like_count":0},{"had_liked":false,"id":219416,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1590024079,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1590024079","product_id":100017301,"comment_content":"相比较前面 BM 算法和 KMP 算法，Trie 树可以算的上是简明易懂了。<br><br>对于搜索引擎的搜索关键词提醒，我觉得特别是对中文关键词的提醒，应该是不会用简单的 Trie 树了，因为还要考虑搜索频率和个人喜好等一些权重。<br><br>拼写检查似乎比较简单，前面讲的哈希表就可以完成，但是智能纠错和在错误输入情况的智能提醒就相对困难了，期待后面的实战篇讲解。<br><br>对于思考题，如果是 1 万条记录，那么我觉得仍然可以按照 Trie 树的建立思路，来遍历一下，然后看一下前缀的分布情况。<br><br>假设 1 万条记录就有 1 万个子节点，并且还是只考虑小写 26 个字母，那么可以计算一下每一层的节点数目，或者是所有节点的数目，然后看一下子节点和全部节点的比值。<br><br>最后同样放一段 algs4 里面的例子，看上去挺简洁的<br>https:&#47;&#47;algs4.cs.princeton.edu&#47;52trie&#47;TrieST.java.html<br><br>private Node get(Node x, String key, int d) {<br>    if (x == null) {<br>        return null;<br>    }<br>    if (d == key.length()) {<br>        return x;<br>    }<br>    char c = key.charAt(d);<br>    return get(x.next[c], key, d + 1);<br>}<br><br>...<br><br>public Node put(Node x, String key, Value val, int d) {<br>    if (x == null) {<br>        x = new Node();<br>    }<br>    if (d == key.length()) {<br>        if (x.val == null) {<br>            n++;<br>        }<br>        x.val = val;<br>        return x;<br>    }<br>    char c = key.charAt(d);<br>    x.next[c] = put(x.next[c], key, val, d + 1);<br>    return x;<br>}<br>","like_count":0},{"had_liked":false,"id":218899,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1589895392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589895392","product_id":100017301,"comment_content":"用有序数组去存储每个节点的儿子，针对这1万条记录构建trie树，统计其中的字符集大小和节点数。","like_count":0},{"had_liked":false,"id":217226,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1589443592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589443592","product_id":100017301,"comment_content":"学习笔记：<br>解决字符串快速匹配问题的数据结构。<br><br>根为&quot;&#47;&quot;，往下是字符串集第一个字符，依次下行。<br><br>两个操作: 1. 利用字符串集构建trie树 2. 查询字符串<br><br>限制: 前缀重复不多，则非常耗空间，是空间换时间的方法。时间复杂度O(k)，精确月匹配问题不如散列表和平衡查找树<br><br>优势：查找前缀匹配的字符串，搜索引擎中关键词提示功能<br>思考题：<br>1. 字符集大小用遍历所有字符串，将字符建立哈希表来解决。<br>2. 前缀重合程度。如果字符串是单词，我们可以只对比前5个字符的重合度。也是哈希表来解决。假设第一个字符有k种，第一个字符的不重复度是 k1&#47; n，往后依次计算k2&#47;n, k3&#47;n 等等。取加权平均后的倒数就是重复度。自己的方法，可能有点蠢。<br>","like_count":0},{"had_liked":false,"id":215526,"user_name":"CcczzZ","can_delete":false,"product_type":"c1","uid":1019568,"ip_address":"","ucode":"5F46DA5053D2BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","comment_is_top":false,"comment_ctime":1589010767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589010767","product_id":100017301,"comment_content":"之前面试被问到过，让写代码实现，卡在了怎么存储一个节点的所有子节点指针，最终没写出来😂<br>今天完整的学习了一遍，晚点完成Trie树的构建和查找的代码实现。💪","like_count":0},{"had_liked":false,"id":215311,"user_name":"默默","can_delete":false,"product_type":"c1","uid":1006635,"ip_address":"","ucode":"AF798B9D327F24","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/2b/8b771383.jpg","comment_is_top":false,"comment_ctime":1588951553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588951553","product_id":100017301,"comment_content":"构建一个多叉树。相同的前缀公用结点。统计每个结点的分差数，总的分差数&#47;总的节点数，如果比值越大说明前缀的重合度越高。至于字符集的大小，遍历所有字符串，以字符的ascii码为下标构建散列表，统计散列表中非空结点个数即为字符集大小。","like_count":0},{"had_liked":false,"id":215309,"user_name":"isobelar","can_delete":false,"product_type":"c1","uid":1318394,"ip_address":"","ucode":"58CE4061984B43","user_header":"https://static001.geekbang.org/account/avatar/00/14/1d/fa/b81c89c3.jpg","comment_is_top":false,"comment_ctime":1588951292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588951292","product_id":100017301,"comment_content":"思考题：<br><br>依次读取每个字符串的字符构建 Trie 树，分别计算LEVEL 2开始的各子 Trie 树高度 h，将其与各子 Trie 树节点数相除，比值越大说明越适合用 Trie 树的数据结构。","like_count":0},{"had_liked":false,"id":215171,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1588920304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588920304","product_id":100017301,"comment_content":"60天攻克算法打卡行动第26天<br><br>学习内容 ：Trie树：如何实现搜索引擎的搜索关键词提示功能？<br><br>Trie 树是一种解决字符串快速匹配问题的数据结构。掌握它的实现方法和特点，我们就能利用它的优势，来实现搜索关键词提示功能。<br><br>1.什么是“Trie 树”？<br>字典树，他是一个树形结构，专门用来处理字符串匹配的数据结构。Trie树的本质，就是利用字符串之间的公共前缀，将重复的前缀合并在一起。根节点不包含任何信息。每个节点标示字符串的一个字符，最后一个节点标示红色标示，也就是从根节点到这个节点标示一个字符串。<br>2.如何实现一棵 Trie 树？<br>我们对一个字符串进行拆分，对每一个字符进行赋值给一个node节点，这node节点是我们规定的26个字母数组节点，也就是每个字符与 a 做差得出来的坐标位置，赋值在上面，下一个字符同样插入下个节点应该所处的位置，依次这样直到构建完树。构建树需要扫描所有的字符串时间复杂度O(n)，那么一旦构建成功。查询字符串k，那么只需要时间复杂度O(k)就可以。<br>3.Trie 树真的很耗内存吗？<br>确实很费内存，所有可以采用一些优化措施对节点使用优化，相应的需要更高难度的编码技术<br>4.Trie 树和散列表、红黑树相比有哪些优缺点？<br>trie树不适合精准匹配，散列表和红黑树更适合；trie树更适合匹配前缀的字符串。<br><br>课后思考：遍历前k位，查看前k位，前k位置重复的比列来看是否适合trie树。","like_count":0},{"had_liked":false,"id":215109,"user_name":"russellyue","can_delete":false,"product_type":"c1","uid":1541894,"ip_address":"","ucode":"0758ACF772F9C1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epIMwPE6FwsicZ6bjhu7ZpWLnoib8G76sA1XL8y5W8GxqfQEjBub6g57E60mzjWzrA6icMRw1QT5CpyA/132","comment_is_top":false,"comment_ctime":1588906625,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1588906625","product_id":100017301,"comment_content":"总结：Trie树是一个多叉树， 也叫“字典树”。利用字符串之间的公共前缀，将重复前缀合并在一起。Trie的根节点为空，不存储任何数据。构造过程：Trie树的构造过程就是将一个字符串集合插入Trie树的过程。针对每一次插入一个字符串的过程如下：假设插入的字符串为S，长度为m。那么依次检索字符串S，检查S[i]是否存在于树的i+2层，如果存在，那么就将接下来的字符都存储在该子节点下，否则，就在该层创建新节点，并将接下来的字符存储在该子节点下。一直到字符串的最后一个字符。实现一棵 Trie 树：存储一个 Trie 树：经典的存储方式：每个节点存储自己的字符，同时维护一个字符集长度的数组，如果有对应的子节点，那么就在子节点对应的数组下标中存储该节点的指针，否则就存储null。查找一个字符：通过字符对应的下标去数组中快速找到子节点对应的指针。时间复杂度：构造的时间复杂度是O(n)， n代表的是所有的字符串的长度和。比对的时间复杂度是O(k)，k代表的是要查询的字符串的长度。Trie树很浪费内存：Trie的本质是，避免重复存储一组字符串的相同前缀子串。但是每个字符节点的存储远远大于一个字节。当仅仅匹配26个字母的时候，每个节点就已经需要额外存储一个长度为26的数组，并且数组里面存的是4字节或者8字节的指针。如果是匹配中文的话，那需要的数组长度就大得多。<br>Trie 树尽管有可能很浪费内存，但是确实非常高效。我们可以牺牲一点效率，采用其它的数据结构来当节点，比如有序数组，散列表，跳表，红黑树等。Trie 树的变体有很多，都可以在一定程度上解决内存消耗的问题。比如，缩点优化，就是对只有一个子节点的节点，而且此节点不是一个串的结束节点，可以将此节点与子节点合并。这样可以节省空间，但却增加了编码难度。Trie树的适合场景：Trie树不适合字符串精确匹配，但是适合查找前缀匹配字符串的查找。它有以下限制：1. 字符集不能太大，否则就会浪费许多存储空间2. 要求字符串的前缀重合比较多，否则就会导致节点过多，内存消耗严重3. 通过指针连起来的数据块不连续，对缓存不友好。在一组字符串中精确查找一个字符，这种问题更适合用散列表或者红黑树来解决。","like_count":0},{"had_liked":false,"id":215093,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1588903259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588903259","product_id":100017301,"comment_content":"完全可以用上面争哥提供的代码啊，只不过26个位置不存字符，存字符的个数，比如say，这三个字符，s-a来做索引，索引位置个数加一，表示有多少个a开头的字符串，然后依次a，y这样就能统计出每个字符出现的次数。","like_count":0},{"had_liked":false,"id":214264,"user_name":"鱼丸粗面","can_delete":false,"product_type":"c1","uid":1785016,"ip_address":"","ucode":"B2F3F75B0D1422","user_header":"https://static001.geekbang.org/account/avatar/00/1b/3c/b8/9489387c.jpg","comment_is_top":false,"comment_ctime":1588687636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588687636","product_id":100017301,"comment_content":"关键词查找功能代码实现<br>&#47;**<br>     * 前缀匹配<br>     *&#47;<br>    public Set&lt;String&gt; prefix(CharSequence prefix) {<br>        TrieNode p = root;<br>        for (int i = 0; i &lt; prefix.length(); i++) {<br>            char c = prefix.charAt(i);<br>            if (p.child[c - &#39;a&#39;] == null) return Collections.emptySet();<br>            p = p.child[c - &#39;a&#39;];<br>        }<br><br>        HashSet&lt;String&gt; suffixSet = new HashSet&lt;&gt;();<br>        for (TrieNode tn : p.child) {<br>            if (tn == null) continue;<br>            Set&lt;String&gt; sub = recurSuffix(tn);<br>            sub.forEach(s -&gt; suffixSet.add(prefix + s));<br>        }<br><br>        &#47;&#47; 完全匹配时自身也是<br>        if (p.isEndingChar) suffixSet.add(prefix.toString());<br><br>        return suffixSet;<br>    }<br><br>    private Set&lt;String&gt; recurSuffix(TrieNode tn) {<br>        HashSet&lt;String&gt; suffixSet = new HashSet&lt;&gt;();<br>        &#47;&#47; 如果自己是根节点则把自己加进去<br>        if (tn.isEndingChar) suffixSet.add(String.valueOf(tn.data));<br><br>        for (TrieNode sub : tn.child) {<br>            if (sub == null) continue;<br>            &#47;&#47; 获取到所有子节点的后缀<br>            Set&lt;String&gt; subSuffix = recurSuffix(sub);<br>            &#47;&#47; 在后缀前拼上自己的<br>            for (String suffix : subSuffix) {<br>                suffixSet.add(tn.data + suffix);<br>            }<br>        }<br><br>        return suffixSet;<br>    }<br>","like_count":0},{"had_liked":false,"id":203597,"user_name":"吴亮","can_delete":false,"product_type":"c1","uid":1670534,"ip_address":"","ucode":"8CD347A3351AB3","user_header":"https://static001.geekbang.org/account/avatar/00/19/7d/86/be31f744.jpg","comment_is_top":false,"comment_ctime":1586239697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586239697","product_id":100017301,"comment_content":"老师你好，这个代码不太严谨。如果传入的是大写字母就会出现异常 （老师写代码思路清晰，我添加了一行代码   int index = pattern[i] - &#39;a&#39; &lt; 0 ?  index = pattern[i] - &#39;A&#39; : pattern[i] - &#39;a&#39;;）<br>public class Trie {<br> private TrieNode root = new TrieNode(&#39;&#47;&#39;);<br><br> public void insert(char[] text) {<br>   TrieNode p = root;<br>   for(int i = 0; i &lt; text.length; i++) {<br>     int index = text[i] - &#39;a&#39; &lt; 0 ?  index = text[i] - &#39;A&#39; : text[i] - &#39;a&#39;;<br>     if (p.children[index] == null) {<br>       TrieNode newNode = new TrieNode(text[i]);<br>       p.children[index] = newNode;<br>     }<br>     p = p.children[index];<br>   }<br>   p.isEndingChar = true;<br> }<br><br>  public static void main(String[] args) {<br>    Trie trie = new Trie();<br>    String test = &quot;Iloveyou&quot;;<br>    trie.insert(test.toCharArray());<br>    System.out.println(trie.find(test.toCharArray()));<br>  }<br><br><br> public boolean find(char[] pattern) {<br>   TrieNode p = root;<br>   for (int i = 0; i &lt; pattern.length; ++i) {<br>     int index = pattern[i] - &#39;a&#39; &lt; 0 ?  index = pattern[i] - &#39;A&#39; : pattern[i] - &#39;a&#39;;<br>     if (p.children[index] == null) {<br>       return false;<br>     }<br>     p = p.children[index];<br>   }<br>   if (p.isEndingChar == false) return false;<br>   else return true;<br> }<br><br><br> class TrieNode{<br>   public char data;<br>   public TrieNode[] children = new TrieNode[26];<br>   public boolean isEndingChar = false;<br>   public TrieNode(char data){<br>     this.data = data;<br>   }<br> }<br>}","like_count":0},{"had_liked":false,"id":201533,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1585800673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585800673","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":198345,"user_name":"王楷程","can_delete":false,"product_type":"c1","uid":1938215,"ip_address":"","ucode":"C53850ECCFC42E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/93/27/7d2ad04c.jpg","comment_is_top":false,"comment_ctime":1585446225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585446225","product_id":100017301,"comment_content":"trie树真有意思","like_count":0},{"had_liked":false,"id":191490,"user_name":"小谢","can_delete":false,"product_type":"c1","uid":1879476,"ip_address":"","ucode":"82D54A61D2FDB9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/ad/b4/e4dcd4d7.jpg","comment_is_top":false,"comment_ctime":1584777554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584777554","product_id":100017301,"comment_content":"字符集转化成十进制数<br>前缀重合度参考前排dalao,一个单词组合遍历加入hash表","like_count":0},{"had_liked":false,"id":190099,"user_name":"重新来过","can_delete":false,"product_type":"c1","uid":1254138,"ip_address":"","ucode":"27CC35140B63F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/fa/671d2937.jpg","comment_is_top":false,"comment_ctime":1584602770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584602770","product_id":100017301,"comment_content":"老师，实战篇里面那一节用到Trie树了，还没有看到哪里，能关联下吗？","like_count":0},{"had_liked":false,"id":187569,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1584159526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584159526","product_id":100017301,"comment_content":"实际上现在工业常用的是双数组字典树，比较省内存","like_count":0},{"had_liked":false,"id":172243,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1579139207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579139207","product_id":100017301,"comment_content":"文中“假设我们用有序数组，数组中的指针按照所指向的子节点中的字符的大小顺序排列。查询的时候，我们可以通过二分查找的方法，快速查找到某个字符应该匹配的子节点的指针”不理解。<br>文章中public class TrieNode { public char data; public TrieNode[] children = new TrieNode[26]; public boolean isEndingChar = false; public TrieNode(char data) { this.data = data; } }的children 就是一个以字符asci码-‘a’ 为下标的有序数组了。 老师的意思是指，字符串包含“小写字母，还包含大写字母、数字、甚至是中文”字符，所以用有序数组么？","like_count":0},{"had_liked":false,"id":170851,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1578739963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578739963","product_id":100017301,"comment_content":"搜索引擎的搜索关键词提示<br>老师这个说要在实战篇讲，但是好像实战篇并没有提到这个具体的实现，请问可以找机会讲讲吗","like_count":0},{"had_liked":false,"id":168139,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1578017977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578017977","product_id":100017301,"comment_content":"字符集大小，可以通过比较每个字符的ascii码值，找出最小值和最大值。前缀的重合程度，可以用散列表统计每个字符串的前缀子串出现的次数。","like_count":0},{"had_liked":false,"id":165327,"user_name":"book尾汁","can_delete":false,"product_type":"c1","uid":1446375,"ip_address":"","ucode":"AE2B8DFC643ACC","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","comment_is_top":false,"comment_ctime":1577200672,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577200672","product_id":100017301,"comment_content":"Trie树<br>Trie树是一种多叉树，可以使用做关键词提示，其本质是利用字符串之间的公共前缀来构建一颗树。可以使用数组来存储各个叶子节点的指针，指针里面存的是字符集里的字符。这种方式比较耗费内存，特别是当字符集很大的时候，但是构建trie树和查询的时候很快，我们可以直接通过字符在字符集中的次序来判断字符应该存放的位置。因为每个子节点中有很多字符使用的频率很低，比较浪费内存，我们可以使用其他数据结构代替数组，比如红黑树、有序数组、跳表，缺点是插入时效率低一点。<br>思考题：要想判断10000个字符串是否适合使用trie树，关键还是判断 每个节点数组内存的利用效率，如果各个叶子节点中字符都出现了至少一次，那么就比较适合用trie树。可以统计字符串的各个位置字符出现的是否集中，如果比较集中，内存就比较浪费。","like_count":0},{"had_liked":false,"id":164136,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1576893489,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576893489","product_id":100017301,"comment_content":"疑问：文中将数组换成有序数组，似乎只是进一步提升查询速度而并不能节省内存吧？","like_count":0},{"had_liked":false,"id":163469,"user_name":"三三","can_delete":false,"product_type":"c1","uid":1054201,"ip_address":"","ucode":"4A76933C29BDA1","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/f9/0b14785a.jpg","comment_is_top":false,"comment_ctime":1576726786,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576726786","product_id":100017301,"comment_content":"有点不太明白trie树和散列表、红黑树的比较，trie树的节点不是要使用散列表或者数组这些数据结构来实现吗","like_count":0},{"had_liked":false,"id":163386,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1576716087,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1576716087","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":163092,"user_name":"倡印","can_delete":false,"product_type":"c1","uid":1455958,"ip_address":"","ucode":"4F53AA5D017D89","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","comment_is_top":false,"comment_ctime":1576655365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576655365","product_id":100017301,"comment_content":"假设有个输入的子串为abababab,这样构造的trie树是不是既很尴尬？？？","like_count":0},{"had_liked":false,"id":160349,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1575939920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575939920","product_id":100017301,"comment_content":"学完课程之后，感觉处处用到数据结构和算法，以前用了也不知道什么原理，比如自动补全等功能","like_count":0},{"had_liked":false,"id":159605,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1575703027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575703027","product_id":100017301,"comment_content":"对于精确查找，散列表和红黑树更合适。Trie树的主要场景是根据前缀匹配，比如搜索提示。<br>课后思考：<br>字符集大小的统计思路是，每个字符都可以转化为一个整形，如果是ASCII码，则范围是0-127,如何有其他字符，比如汉字，范围会更大。<br>循环每个记录，将每个记录转化为一个charArray，然后统计每个字符的值，如果大于最大值max，就更新最大值，如果小于最小值，就更新最小值min。最终字符集的范围就是max-min<br>时间复杂度是O（n*m）n是记录条数，m是每条记录的平均长度。<br>重复度的计算：这个问题就是统计各条记录前缀匹配的多少，以及前缀匹配的长度。如果<br>前缀匹配的越多，而且越长的匹配，说明重复度越高。<br>这里用散列表。遍历每条记录，把每个前缀子串存入hash表，key是前缀子串，value是出现的次数。比如：记录hello，会记录：map.put(&quot;h&quot;,1) ,map.put(&quot;he&quot;,1),map.put(&quot;hel&quot;,1)... 如果key已经存在，则只需递增value，比如第二个记录是he,  则对应“h”的key的值就增加为2.  <br>最终如何判断重复度？我们可以从两个指标来判断，<br>第一：统计散列表中各个子串的对应value，也就是该子串重复的次数m。<br>第二：次数多，而且对应的子串要更长，说明重复度越高。所以我们可以用长度length作为权重。<br>计算一个重复度：repeat = m1*length1 +m2*length2 +....+mk*lengthk；<br>k表示匹配的子串个数。这个值如何对比。我们可以考虑最好和最坏的情况，如果没有匹配，则length<br>都是1.如果每一条都完全匹配，length就是一条记录的长度。根据最好最坏，我们就可以判断repeat的一个大致范围。<br>综合上面两个指标，我们就很容易判断，是否适合用trie树。<br><br>","like_count":0},{"had_liked":false,"id":153717,"user_name":"乾坤瞬间","can_delete":false,"product_type":"c1","uid":1683130,"ip_address":"","ucode":"15BDCF29CBF8EB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","comment_is_top":false,"comment_ctime":1574299117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574299117","product_id":100017301,"comment_content":"课后思考题：设计hash函数，把1万字符集用hash编码，然后把hash每一位当做节点用来存储。重点是怎么设计hash函数我觉得。。。<br>","like_count":0},{"had_liked":false,"id":153684,"user_name":"乾坤瞬间","can_delete":false,"product_type":"c1","uid":1683130,"ip_address":"","ucode":"15BDCF29CBF8EB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","comment_is_top":false,"comment_ctime":1574297262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574297262","product_id":100017301,"comment_content":"老师，你说的把每个节点的数组替换成其他数据结构，是不是指把静态结构替换成动态数据结构，以达到在初始到稳定期间减少内存损耗的情况？","like_count":0},{"had_liked":false,"id":152429,"user_name":"Jo","can_delete":false,"product_type":"c1","uid":1233748,"ip_address":"","ucode":"0EF4D66963C112","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/peVXJxibHW5xicV0o87BniaV31KSDaT9SibhQd1VH1lpgmwc77nezp81n3amCzjYhT5jOpw6sfOxXGajzyL1cZjeZw/132","comment_is_top":false,"comment_ctime":1573999637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573999637","product_id":100017301,"comment_content":"王老师，我有个疑问。对于谷歌和百度的搜索词推荐的场景，关键词长度是有限的，那么直接用hash map和用tire树有什么区别吗？hashmap的key为前缀，value为红黑树，存储着权重最大的20个有序关键词，插入的时候依次维护好每个前缀对应的关键词即可。感觉比tire的实现要简单稳定，性能差异不大。","like_count":0},{"had_liked":false,"id":138170,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1570074623,"is_pvip":false,"replies":[{"id":"53615","content":"😂","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570581168,"ip_address":"","comment_id":138170,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570074623","product_id":100017301,"comment_content":"这篇的留言只有66个，我就来一条吧！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469421,"discussion_content":"😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570581168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137364,"user_name":"方晓斌","can_delete":false,"product_type":"c1","uid":1042367,"ip_address":"","ucode":"A26FA55F05FE9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/bf/b6dd86f4.jpg","comment_is_top":false,"comment_ctime":1569724203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569724203","product_id":100017301,"comment_content":"思考题，以a的asicc码为参照，遍历所有字符串做减法，桶计数得到字符集规模。","like_count":0},{"had_liked":false,"id":132332,"user_name":"shaomeng","can_delete":false,"product_type":"c1","uid":1006261,"ip_address":"","ucode":"BB9EA8B684A035","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/b5/f667f610.jpg","comment_is_top":false,"comment_ctime":1568086433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568086433","product_id":100017301,"comment_content":"思考题：<br>1.统计字符串的字符集大小可以通过构建散列表，字符做 key，单个字符出现的次数作为 value。然后遍历构建的散列表，获取到前 n 个最大重复出现的字符<br>2.前缀的重合程度可以借助一个数组，字符数为 n 的前缀放到数组下标为 n 的位置，如果字符集的数量不多，并且 n 的值很小的时候，可以使用桶计数，否则就通过遍历数组的方式来构建与 1 中结构相同的散列表来获取 n 个字符前缀的最大重合字符串数","like_count":0},{"had_liked":false,"id":131710,"user_name":"老白","can_delete":false,"product_type":"c1","uid":1397031,"ip_address":"","ucode":"39881175152D49","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/27/f0dd6f19.jpg","comment_is_top":false,"comment_ctime":1567859857,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1567859857","product_id":100017301,"comment_content":"思考题用散列表就可以统计出来吧，感觉没必要先构建Trie树。","like_count":0},{"had_liked":false,"id":121822,"user_name":"淘林","can_delete":false,"product_type":"c1","uid":1339286,"ip_address":"","ucode":"42765649298C6B","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/96/4d340fc4.jpg","comment_is_top":false,"comment_ctime":1565228716,"is_pvip":false,"replies":[{"id":"45691","content":"第二个字符i会标记为终止结点，最后一个l也会比较为终止结点。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1565908963,"ip_address":"","comment_id":121822,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565228716","product_id":100017301,"comment_content":"老师，问一下，如果hi和hill都存在，那么第二个字符应该怎么存储啊","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461962,"discussion_content":"第二个字符i会标记为终止结点，最后一个l也会比较为终止结点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565908963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120552,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1564928053,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1564928053","product_id":100017301,"comment_content":"如果真用Trie数，可以和前面的解决topk问题用到的堆结合在一起实现简单的拼写自动补全和搜索中出现前多少条记录吧。当然只是读到这个问题的一个想法。<br>还有个问题，Trie树的空间消耗为啥直接用26长的字符串数组，完全可以使用26位比特来表示，然后真正将编码和字符串对应起来可以用字典存储和hash的思想来优化吧。因为对有限集数据的编码，在字符不多的情况下，可以考虑穷尽的方式，当然字符过多的时候这种思路也不行。","like_count":0},{"had_liked":false,"id":118063,"user_name":"Geek_18b741","can_delete":false,"product_type":"c1","uid":1368496,"ip_address":"","ucode":"097BA0C2F44150","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLlztvlBgajZMEph8AvkP2pfoqNCGtYSalIKgrCbCg0MWDZJgJwqVRfWA6cgIoZicL6dKibfK0zjsWg/132","comment_is_top":false,"comment_ctime":1564225007,"is_pvip":false,"replies":[{"id":"43279","content":"没关系的，不过，麻烦附上出处《数据结构和算法之美》-作者：王争","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564266052,"ip_address":"","comment_id":118063,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564225007","product_id":100017301,"comment_content":"老师好，关于本课程我写了一些博客笔记在CSDN，https:&#47;&#47;blog.csdn.net&#47;flying_all&#47;article&#47;details&#47;97097870。博客中有这里的图，也有文字。我在文章开始有申明。这侵权吗？如果侵权，我就把文章改为私有的，仅供自己复习使用。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460245,"discussion_content":"没关系的，不过，麻烦附上出处《数据结构和算法之美》-作者：王争","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564266052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116761,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1563918637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563918637","product_id":100017301,"comment_content":"思考题<br>可以通过最长单词，可以得出Trie树的高度，进而得出Trie树的最大耗费内存，在此基础上，扫描最后几层，对这个结果进行修正。","like_count":0},{"had_liked":false,"id":116759,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1563918003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563918003","product_id":100017301,"comment_content":"Trie树比较适合于通过前缀查所有符合前缀单词的动态结构。<br>Trie树的缺点是耗内存，可以通过红黑树等数据结构在内存和速度中取得平衡。","like_count":0},{"had_liked":false,"id":105502,"user_name":"菜小轩","can_delete":false,"product_type":"c1","uid":1246433,"ip_address":"","ucode":"DE30E77DD0D83F","user_header":"https://static001.geekbang.org/account/avatar/00/13/04/e1/2f382024.jpg","comment_is_top":false,"comment_ctime":1561016526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561016526","product_id":100017301,"comment_content":"相比前两节在这一节找到了些许安慰","like_count":0},{"had_liked":false,"id":101580,"user_name":"wordMan","can_delete":false,"product_type":"c1","uid":1335088,"ip_address":"","ucode":"3C8A681EF5E278","user_header":"https://static001.geekbang.org/account/avatar/00/14/5f/30/4ae82e16.jpg","comment_is_top":false,"comment_ctime":1559875131,"is_pvip":false,"replies":[{"id":"36771","content":"也可以，算是一种优化。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560122177,"ip_address":"","comment_id":101580,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559875131","product_id":100017301,"comment_content":"“public class TrieNode { p..public TrieNode[] children = new TrieNode[26]... ”<br>是不是在真的有子节点插入的时候再分配长度26的数组给到children更好呢？<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453022,"discussion_content":"也可以，算是一种优化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560122177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98589,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1559035777,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1559035777","product_id":100017301,"comment_content":"1 构造一个 Set&lt;String&gt;, 迭代所有的字符串, 放置在这个容器中，最终容器大小就是字符集大小.<br>2 迭代每一个字符串， 将其和其他字符串比较，得到该字符串可以和多个字符串前缀重合:n1.<br>  n1+n2+....n10000.  除以10000*10000. 即前缀重合度","like_count":0,"discussions":[{"author":{"id":1596047,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIlZ9AObDSXrfSEibY94uyQvMQ4tOvbb7iaQH9H7QQ6ibNaqFKUGq1TboaFpBSLuP0MCcSXvmqHNg0IA/132","nickname":"Geek_8c5f9c","note":"","ucode":"70CD441EAF490F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8766,"discussion_content":"字符集不是字符串集","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568044009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82191,"user_name":"sprzhing","can_delete":false,"product_type":"c1","uid":1218617,"ip_address":"","ucode":"5C58ADB2A10CF6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELheoqTu05oOnCW3FdxiaIzYvmMMMNmKXDtwtdvtNdeuj8mgAWB9zibubHcPE5K8KPGX53GzxlibBRNg/132","comment_is_top":false,"comment_ctime":1554160187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554160187","product_id":100017301,"comment_content":"想百度这种前缀推荐应该不太可能是trie树实现的吧，因为海量数据内存很大，那具体","like_count":0},{"had_liked":false,"id":78621,"user_name":"刘涛涛","can_delete":false,"product_type":"c1","uid":1396130,"ip_address":"","ucode":"D2EE76FA0BB1C5","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/a2/9450ef89.jpg","comment_is_top":false,"comment_ctime":1553184154,"is_pvip":false,"replies":[{"id":"28611","content":"把要删除的字符串在trie树中的ending标记删除就好了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553212606,"ip_address":"","comment_id":78621,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553184154","product_id":100017301,"comment_content":"请问老师，如何删除trie中的字符串呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444168,"discussion_content":"把要删除的字符串在trie树中的ending标记删除就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553212606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78238,"user_name":"乐凡","can_delete":false,"product_type":"c1","uid":1239260,"ip_address":"","ucode":"918C9997EB6537","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/dc/32e78f02.jpg","comment_is_top":false,"comment_ctime":1553099071,"is_pvip":false,"replies":[{"id":"28524","content":"是的，可能需要动态扩容。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553134151,"ip_address":"","comment_id":78238,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553099071","product_id":100017301,"comment_content":"老师，上面说的用有序数组代替存储子节点我有点不理解，因为就算是有序数组，在初始化的时候也不确定一个节点的子节点到底有多少啊，若初始化小了，后续添加的子节点数超过了有序数组的长度，需要进行扩容，得再生成一个数组，还要数据迁移。希望老师看到帮忙回答下","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444017,"discussion_content":"是的，可能需要动态扩容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553134151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73034,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551781525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551781525","product_id":100017301,"comment_content":"有点像dfa算法啊","like_count":0},{"had_liked":false,"id":71320,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1551319798,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1551319798","product_id":100017301,"comment_content":"trie树构建的比较巧妙，学习思想。","like_count":0},{"had_liked":false,"id":63394,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1118976,"ip_address":"","ucode":"35F4FFAC4A4B15","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/00/a4a2065f.jpg","comment_is_top":false,"comment_ctime":1548340869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548340869","product_id":100017301,"comment_content":"前两节听得头皮发麻，这节至少听明白了，Trie树比较适合前缀字符串匹配，对于精确匹配，字符集比较大的场景，可以改用红黑树，散列表","like_count":0},{"had_liked":false,"id":62044,"user_name":"不成熟的萌","can_delete":false,"product_type":"c1","uid":1244537,"ip_address":"","ucode":"4F5059446D062D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/79/d42c4c68.jpg","comment_is_top":false,"comment_ctime":1547892519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547892519","product_id":100017301,"comment_content":"那么就要给出和前缀匹配的所有单词。<br><br>```cpp<br>&#47;&#47; 现在我们利用startWith(prefix)来到了这个前缀节点，此时，我们要输出所有关键词，<br>&#47;&#47; 即我们的目的是找到以当前前缀最后一个字母为根节点展开的所有单词<br>&#47;&#47; R 为字典库大小<br>void collect(TrieNode *p, string prefix, queue&lt;string&gt; &amp;q)<br>{<br>    if(nullptr = p)<br>    return;<br>    if(p-&gt;isEnding) q.push(prefix);<br>    for(int i = 0; i &lt; R; ++i)<br>    {<br>        string tmp = prefix.append(i + &#39;a&#39;);<br>        collect(p-&gt;children[i], tmp, q);<br>    }<br>}<br>```<br>最后q中存储的就是所有关键词。<br>这个方法在橙书的字符查找树中有实现。","like_count":0},{"had_liked":false,"id":61577,"user_name":"gopherliu","can_delete":false,"product_type":"c1","uid":1202971,"ip_address":"","ucode":"0254E9A95B71C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/1b/78a937d8.jpg","comment_is_top":false,"comment_ctime":1547726727,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1547726727","product_id":100017301,"comment_content":"以太坊好像用到了这种树状结构","like_count":0},{"had_liked":false,"id":59679,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1547399072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547399072","product_id":100017301,"comment_content":"Trie 树观察：<br>多叉树，根结点下的各分支之间，不存在前缀重合；<br>对于根结点下的每个分支，在同级的子节点，它们的父节点是公共前缀的结尾字符；<br>叶子节点的总数小于等于字符串的总数（如 he、her、hey、hello）；<br>求字符集，可以利用 BFS 遍历所有节点，存入哈希表；<br><br>","like_count":0},{"had_liked":false,"id":58143,"user_name":"cw","can_delete":false,"product_type":"c1","uid":1264296,"ip_address":"","ucode":"82A6B50462F9F9","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/a8/b7e36dd2.jpg","comment_is_top":false,"comment_ctime":1547001883,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547001883","product_id":100017301,"comment_content":"假设我们都是小写字母，那么C4,26已经大于10000了，所以我们前缀字符串为4即可。<br>那么现在假设字符串中所有字符串长度都大于4，现在我们根据上述可以得到1万条的长度为4的字符串，称之为U。<br>将这个U做哈希，把这1万个字符串变成数字称之为M，在这个小数据量上我们认为散列冲突不存在。<br>然后对这个M做散列表，记录M的key和value1,value为个数。<br>根据value的大小结合生产环境的资源来量化是否可以用trie树<br>","like_count":0},{"had_liked":false,"id":57148,"user_name":"Geek_74cbfd","can_delete":false,"product_type":"c1","uid":1255609,"ip_address":"","ucode":"1BC8208E975F2A","user_header":"https://static001.geekbang.org/account/avatar/00/13/28/b9/b53181d4.jpg","comment_is_top":false,"comment_ctime":1546661310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546661310","product_id":100017301,"comment_content":"前缀匹配是不是children 是不是改为散列表更好。","like_count":0},{"had_liked":false,"id":54316,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1545827078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545827078","product_id":100017301,"comment_content":"老师，我想知道散列表怎么做字符串匹配，请给个思路啊","like_count":0},{"had_liked":false,"id":52586,"user_name":"The Sword of Damocles","can_delete":false,"product_type":"c1","uid":1188527,"ip_address":"","ucode":"42B462FC572F24","user_header":"https://static001.geekbang.org/account/avatar/00/12/22/af/1a31bc11.jpg","comment_is_top":false,"comment_ctime":1545446137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545446137","product_id":100017301,"comment_content":"搜了一圈DAT，结果发现都在讲实现，没有讲原理讲的比较细致的，看的发晕_(¦3」∠)_","like_count":0},{"had_liked":false,"id":49484,"user_name":"刘远通","can_delete":false,"product_type":"c1","uid":1253307,"ip_address":"","ucode":"4D3EE819E4B235","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/bb/c488d5db.jpg","comment_is_top":false,"comment_ctime":1544696087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544696087","product_id":100017301,"comment_content":"构造一个特殊的hash函数<br>可以反映重复度的<br><br>比如26进制<br>然后变成1万个数 看聚点多不多<br>设置一个ε 两个点之间距离小于ε就合并在一起 并且取平均<br>不断聚合 直到无法再聚合 <br>计算点的个数","like_count":0},{"had_liked":false,"id":49456,"user_name":"良辰美景","can_delete":false,"product_type":"c1","uid":1074803,"ip_address":"","ucode":"B36E6955A2872D","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/73/fd1e37a2.jpg","comment_is_top":false,"comment_ctime":1544691484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544691484","product_id":100017301,"comment_content":"1：上面代码里： p.isEndingChar = true; 应该是放在for循环的外面吧？<br>2：思考题里的何统计字符串的字符集大小，这个可以用散列表（hashmap）key为字符，值为出现的次数。<br>3：前缀统计的话，其实也可以用hashmap，只是一个字符串的前缀会有很多，空间上会浪费些。<br>4：如果对字符串按字典排序的话， 在统计前缀上应该会快点，但我还是没想好用什么数据结构统计。<br>","like_count":0},{"had_liked":false,"id":49319,"user_name":"🌀🐑hfy🐣","can_delete":false,"product_type":"c1","uid":1254367,"ip_address":"","ucode":"8A7E4BDC46CB35","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/df/367f2c75.jpg","comment_is_top":false,"comment_ctime":1544664723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544664723","product_id":100017301,"comment_content":"老师，请问如果想实现一个带LRU功能的tried树，有什么比较高效的算法？","like_count":0},{"had_liked":false,"id":49029,"user_name":"『LHCY』","can_delete":false,"product_type":"c1","uid":1188449,"ip_address":"","ucode":"A8B5E0467B5F25","user_header":"https://static001.geekbang.org/account/avatar/00/12/22/61/bbfb2d4a.jpg","comment_is_top":false,"comment_ctime":1544590997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544590997","product_id":100017301,"comment_content":"字符范围的话用一个HashSet，前缀重合度可以直接构建一个trie树用（10000-总结点个数）&#47;10000。","like_count":0},{"had_liked":false,"id":48973,"user_name":"NeverMore","can_delete":false,"product_type":"c1","uid":1228498,"ip_address":"","ucode":"582698D772810D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/d2/3d88cb8e.jpg","comment_is_top":false,"comment_ctime":1544584057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544584057","product_id":100017301,"comment_content":"思考题我的一点想法：按照Trie 树的添加方式添加完所有字符串，如果树的分支多于某个值（树叉太多了，则表明不匹配的太多），则说明不满足，这个值可以用户自己设置。","like_count":0}]}