{"id":40742,"title":"05 | 影响性能的因素有哪些？又该如何提高系统的性能？","content":"<p>不知不觉，我们已经讲到第五篇了，不知道听到这里，你对于秒杀系统的构建有没有形成一些框架性的认识，这里我再带你简单回忆下前面的主线。</p>\n<p>前面的四篇文章里，我介绍的内容多少都和优化有关：第一篇介绍了一些指导原则；第二篇和第三篇从动静分离和热点数据两个维度，介绍了如何有针对性地对数据进行区分和优化处理；第四篇介绍了在保证实现基本业务功能的前提下，尽量减少和过滤一些无效请求的思路。</p>\n<p>这几篇文章既是在讲根据指导原则实现的具体案例，也是在讲如何实现能够让整个系统更“快”。我想说的是，优化本身有很多手段，也是一个复杂的系统工程。今天，我就来结合秒杀这一场景，重点给你介绍下服务端的一些优化技巧。</p>\n<h2>影响性能的因素</h2>\n<p>你想要提升性能，首先肯定要知道哪些因素对于系统性能的影响最大，然后再针对这些具体的因素想办法做优化，是不是这个逻辑？</p>\n<p>那么，哪些因素对性能有影响呢？在回答这个问题之前，我们先定义一下“性能”，服务设备不同对性能的定义也是不一样的，例如CPU主要看主频、磁盘主要看IOPS（Input/Output Operations Per Second，即每秒进行读写操作的次数）。</p>\n<p>而今天我们讨论的主要是系统服务端性能，一般用QPS（Query Per Second，每秒请求数）来衡量，还有一个影响和QPS也息息相关，那就是响应时间（Response Time，RT），它可以理解为服务器处理响应的耗时。</p><!-- [[[read_end]]] -->\n<p>正常情况下响应时间（RT）越短，一秒钟处理的请求数（QPS）自然也就会越多，这在单线程处理的情况下看起来是线性的关系，即我们只要把每个请求的响应时间降到最低，那么性能就会最高。</p>\n<p>但是你可能想到响应时间总有一个极限，不可能无限下降，所以又出现了另外一个维度，即通过多线程，来处理请求。这样理论上就变成了“总QPS =（1000ms / 响应时间）× 线程数量”，这样性能就和两个因素相关了，一个是一次响应的服务端耗时，一个是处理请求的线程数。</p>\n<p>接下来，我们一起看看这个两个因素到底会造成什么样的影响。</p>\n<p><strong>首先，我们先来看看响应时间和QPS有啥关系</strong>。</p>\n<p>对于大部分的Web系统而言，响应时间一般都是由CPU执行时间和线程等待时间（比如RPC、IO等待、Sleep、Wait等）组成，即服务器在处理一个请求时，一部分是CPU本身在做运算，还有一部分是在各种等待。</p>\n<p>理解了服务器处理请求的逻辑，估计你会说为什么我们不去减少这种等待时间。很遗憾，根据我们实际的测试发现，减少线程等待时间对提升性能的影响没有我们想象得那么大，它并不是线性的提升关系，这点在很多代理服务器（Proxy）上可以做验证。</p>\n<p>如果代理服务器本身没有CPU消耗，我们在每次给代理服务器代理的请求加个延时，即增加响应时间，但是这对代理服务器本身的吞吐量并没有多大的影响，因为代理服务器本身的资源并没有被消耗，可以通过增加代理服务器的处理线程数，来弥补响应时间对代理服务器的QPS的影响。</p>\n<p>其实，真正对性能有影响的是CPU的执行时间。这也很好理解，因为CPU的执行真正消耗了服务器的资源。经过实际的测试，如果减少CPU一半的执行时间，就可以增加一倍的QPS。</p>\n<p>也就是说，我们应该致力于减少CPU的执行时间。</p>\n<p><strong>其次，我们再来看看线程数对QPS的影响</strong>。</p>\n<p>单看“总QPS”的计算公式，你会觉得线程数越多QPS也就会越高，但这会一直正确吗？显然不是，线程数不是越多越好，因为线程本身也消耗资源，也受到其他因素的制约。例如，线程越多系统的线程切换成本就会越高，而且每个线程也都会耗费一定内存。</p>\n<p>那么，设置什么样的线程数最合理呢？其实<strong>很多多线程的场景都有一个默认配置，即“线程数 = 2 * CPU核数 + 1”</strong>。除去这个配置，还有一个根据最佳实践得出来的公式：</p>\n<blockquote>\n<p>线程数 = [(线程等待时间 + 线程CPU时间) / 线程CPU时间] × CPU数量</p>\n</blockquote>\n<p>当然，最好的办法是通过性能测试来发现最佳的线程数。</p>\n<p>换句话说，要提升性能我们就要减少CPU的执行时间，另外就是要设置一个合理的并发线程数，通过这两方面来显著提升服务器的性能。</p>\n<p>现在，你知道了如何来快速提升性能，那接下来你估计会问，我应该怎么发现系统哪里最消耗CPU资源呢？</p>\n<h2>如何发现瓶颈</h2>\n<p>就服务器而言，会出现瓶颈的地方有很多，例如CPU、内存、磁盘以及网络等都可能会导致瓶颈。此外，不同的系统对瓶颈的关注度也不一样，例如对缓存系统而言，制约它的是内存，而对存储型系统来说I/O更容易是瓶颈。</p>\n<p><strong>这个专栏中，我们定位的场景是秒杀，它的瓶颈更多地发生在CPU上</strong>。</p>\n<p>那么，如何发现CPU的瓶颈呢？其实有很多CPU诊断工具可以发现CPU的消耗，最常用的就是JProfiler和Yourkit这两个工具，它们可以列出整个请求中每个函数的CPU执行时间，可以发现哪个函数消耗的CPU时间最多，以便你有针对性地做优化。</p>\n<p>当然还有一些办法也可以近似地统计CPU的耗时，例如通过jstack定时地打印调用栈，如果某些函数调用频繁或者耗时较多，那么那些函数就会多次出现在系统调用栈里，这样相当于采样的方式也能够发现耗时较多的函数。</p>\n<p>虽说秒杀系统的瓶颈大部分在CPU，但这并不表示其他方面就一定不出现瓶颈。例如，如果海量请求涌过来，你的页面又比较大，那么网络就有可能出现瓶颈。</p>\n<p>怎样简单地判断CPU是不是瓶颈呢？一个办法就是看当QPS达到极限时，你的服务器的CPU使用率是不是超过了95%，如果没有超过，那么表示CPU还有提升的空间，要么是有锁限制，要么是有过多的本地I/O等待发生。</p>\n<p>现在你知道了优化哪些因素，又发现了瓶颈，那么接下来就要关注如何优化了。</p>\n<h2>如何优化系统</h2>\n<p>对Java系统来说，可以优化的地方很多，这里我重点说一下比较有效的几种手段，供你参考，它们是：减少编码、减少序列化、Java极致优化、并发读优化。接下来，我们分别来看一下。</p>\n<p><span class=\"orange\">1. 减少编码</span></p>\n<p>Java的编码运行比较慢，这是Java的一大硬伤。在很多场景下，只要涉及字符串的操作（如输入输出操作、I/O操作）都比较耗CPU资源，不管它是磁盘I/O还是网络I/O，因为都需要将字符转换成字节，而这个转换必须编码。</p>\n<p>每个字符的编码都需要查表，而这种查表的操作非常耗资源，所以减少字符到字节或者相反的转换、减少字符编码会非常有成效。减少编码就可以大大提升性能。</p>\n<p>那么如何才能减少编码呢？例如，网页输出是可以直接进行流输出的，即用resp.getOutputStream()函数写数据，把一些静态的数据提前转化成字节，等到真正往外写的时候再直接用OutputStream()函数写，就可以减少静态数据的编码转换。</p>\n<p>我在《深入分析Java Web技术内幕》一书中介绍的“Velocity优化实践”一章的内容，就是基于把静态的字符串提前编码成字节并缓存，然后直接输出字节内容到页面，从而大大减少编码的性能消耗的，网页输出的性能比没有提前进行字符到字节转换时提升了30%左右。</p>\n<p><span class=\"orange\">2. 减少序列化</span></p>\n<p>序列化也是Java性能的一大天敌，减少Java中的序列化操作也能大大提升性能。又因为序列化往往是和编码同时发生的，所以减少序列化也就减少了编码。</p>\n<p>序列化大部分是在RPC中发生的，因此避免或者减少RPC就可以减少序列化，当然当前的序列化协议也已经做了很多优化来提升性能。有一种新的方案，就是可以将多个关联性比较强的应用进行“合并部署”，而减少不同应用之间的RPC也可以减少序列化的消耗。</p>\n<p>所谓“合并部署”，就是把两个原本在不同机器上的不同应用合并部署到一台机器上，当然不仅仅是部署在一台机器上，还要在同一个Tomcat容器中，且不能走本机的Socket，这样才能避免序列化的产生。</p>\n<p>另外针对秒杀场景，我们还可以做得更极致一些，接下来我们来看第3点：Java极致优化。</p>\n<p><span class=\"orange\">3. Java极致优化</span></p>\n<p>Java和通用的Web服务器（如Nginx或Apache服务器）相比，在处理大并发的HTTP请求时要弱一点，所以一般我们都会对大流量的Web系统做静态化改造，让大部分请求和数据直接在Nginx服务器或者Web代理服务器（如Varnish、Squid等）上直接返回（这样可以减少数据的序列化与反序列化），而Java层只需处理少量数据的动态请求。针对这些请求，我们可以使用以下手段进行优化：</p>\n<ul>\n<li>直接使用Servlet处理请求。避免使用传统的MVC框架，这样可以绕过一大堆复杂且用处不大的处理逻辑，节省1ms时间（具体取决于你对MVC框架的依赖程度）。</li>\n<li>直接输出流数据。使用resp.getOutputStream()而不是resp.getWriter()函数，可以省掉一些不变字符数据的编码，从而提升性能；数据输出时推荐使用JSON而不是模板引擎（一般都是解释执行）来输出页面。</li>\n</ul>\n<p><span class=\"orange\">4. 并发读优化</span></p>\n<p>也许有读者会觉得这个问题很容易解决，无非就是放到Tair缓存里面。集中式缓存为了保证命中率一般都会采用一致性Hash，所以同一个key会落到同一台机器上。虽然单台缓存机器也能支撑30w/s的请求，但还是远不足以应对像“大秒”这种级别的热点商品。那么，该如何彻底解决单点的瓶颈呢？</p>\n<p>答案是采用应用层的LocalCache，即在秒杀系统的单机上缓存商品相关的数据。</p>\n<p>那么，又如何缓存（Cache）数据呢？你需要划分成动态数据和静态数据分别进行处理：</p>\n<ul>\n<li>像商品中的“标题”和“描述”这些本身不变的数据，会在秒杀开始之前全量推送到秒杀机器上，并一直缓存到秒杀结束；</li>\n<li>像库存这类动态数据，会采用“被动失效”的方式缓存一定时间（一般是数秒），失效后再去缓存拉取最新的数据。</li>\n</ul>\n<p>你可能还会有疑问：像库存这种频繁更新的数据，一旦数据不一致，会不会导致超卖？</p>\n<p>这就要用到前面介绍的读数据的分层校验原则了，读的场景可以允许一定的脏数据，因为这里的误判只会导致少量原本无库存的下单请求被误认为有库存，可以等到真正写数据时再保证最终的一致性，通过在数据的高可用性和一致性之间的平衡，来解决高并发的数据读取问题。</p>\n<h2>总结一下</h2>\n<p>性能优化的过程首先要从发现短板开始，除了我今天介绍的一些优化措施外，你还可以在减少数据、数据分级（动静分离），以及减少中间环节、增加预处理等这些环节上做优化。</p>\n<p>首先是“发现短板”，比如考虑以下因素的一些限制：光速（光速：C = 30万千米/秒；光纤：V = C/1.5=20 万千米/秒，即数据传输是有物理距离的限制的）、网速（2017年11月知名测速网站Ookla发布报告，全国平均上网带宽达到61.24 Mbps，千兆带宽下10KB数据的极限QPS 为1.25万QPS=1000Mbps/8/10KB）、网络结构（交换机/网卡的限制）、TCP/IP、虚拟机（内存/CPU/IO等资源的限制）和应用本身的一些瓶颈等。</p>\n<p>其次是减少数据。事实上，有两个地方特别影响性能，一是服务端在处理数据时不可避免地存在字符到字节的相互转化，二是HTTP请求时要做Gzip压缩，还有网络传输的耗时，这些都和数据大小密切相关。</p>\n<p>再次，就是数据分级，也就是要保证首屏为先、重要信息为先，次要信息则异步加载，以这种方式提升用户获取数据的体验。</p>\n<p>最后就是要减少中间环节，减少字符到字节的转换，增加预处理（提前做字符到字节的转换）去掉不需要的操作。</p>\n<p>此外，要做好优化，你还需要做好应用基线，比如性能基线（何时性能突然下降）、成本基线（去年双11用了多少台机器）、链路基线（我们的系统发生了哪些变化），你可以通过这些基线持续关注系统的性能，做到在代码上提升编码质量，在业务上改掉不合理的调用，在架构和调用链路上不断的改进。</p>\n<p>最后，欢迎你在留言区和我交流，你也可以说说在实际工作中，\b关于性能提升还有哪些更好的思路或者方案，我们一起沟通探讨。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":30273,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1538752032,"is_pvip":true,"replies":[{"id":"10940","content":"👍","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1538819308,"ip_address":"","comment_id":30273,"utype":1}],"discussion_count":1,"race_medal":0,"score":"96028032544","product_id":100017501,"comment_content":"除了本文提供的方式外，还可从考虑从以下方面进行调整：<br>1 提升硬件条件：CPU核数、主频、内存、磁盘I&#47;O、SSD、网卡等<br>2 JVM性能调优<br>3 缓存","like_count":23,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425921,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538819308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38734,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1542117549,"is_pvip":false,"replies":[{"id":"14448","content":"👍","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1542527896,"ip_address":"","comment_id":38734,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74556561581","product_id":100017501,"comment_content":"很棒，如醍醐灌顶！<br><br>性能优化的核心就一个字-减<br><br>如果还继续减的<br>1:异步化-减少等待响应的时间<br>2:降日志-减本地磁盘的交互<br>3:多级缓存-再减少获取数据路径<br>4:减功能-非核心功能或后补功能去掉","like_count":18,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428788,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542527896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34750,"user_name":"Hana","can_delete":false,"product_type":"c1","uid":1233257,"ip_address":"","ucode":"F434131F5A0EFC","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/69/07239d3c.jpg","comment_is_top":false,"comment_ctime":1540282539,"is_pvip":false,"replies":[{"id":"12628","content":"😉","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1540630038,"ip_address":"","comment_id":34750,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44489955499","product_id":100017501,"comment_content":"拜读过您的 《深入分析 Java Web 技术内幕》 这一本书，讲解非常通俗易懂，也不失深度，今天才反应过来作者跟您是同一个人🤥","like_count":10,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427321,"discussion_content":"😉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540630038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30474,"user_name":"speedfirst","can_delete":false,"product_type":"c1","uid":1083131,"ip_address":"","ucode":"8F08136BAC8B21","user_header":"https://static001.geekbang.org/account/avatar/00/10/86/fb/34a2fb1a.jpg","comment_is_top":false,"comment_ctime":1538880644,"is_pvip":false,"replies":[{"id":"11197","content":"这个里面实现比较复杂，几句话很难讲清楚，《架构演进与性能优化》有专门一章介绍了实现方案","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1539085814,"ip_address":"","comment_id":30474,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31603651716","product_id":100017501,"comment_content":"能否再具体解释下“合并部署”如何避免序列化的？我的理解是不管在不在一个tomcat都要走一次http，所以总要序列化。tomcat提供某种机制可以跨进程非序列化通信？","like_count":8,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426016,"discussion_content":"这个里面实现比较复杂，几句话很难讲清楚，《架构演进与性能优化》有专门一章介绍了实现方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539085814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52715,"user_name":"Sven","can_delete":false,"product_type":"c1","uid":1255400,"ip_address":"","ucode":"FDACE16D962EA0","user_header":"https://static001.geekbang.org/account/avatar/00/13/27/e8/ad47da9d.jpg","comment_is_top":false,"comment_ctime":1545486255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27315290031","product_id":100017501,"comment_content":"我也刚发现原来大神是java技术内幕作者本尊&gt;o&lt;","like_count":6},{"had_liked":false,"id":50629,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1545017954,"is_pvip":false,"replies":[{"id":"19635","content":"还是要自己去实践:)","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1545823685,"ip_address":"","comment_id":50629,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27314821730","product_id":100017501,"comment_content":"自己道行浅，看这有点泛啊..","like_count":6,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433042,"discussion_content":"还是要自己去实践:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545823685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30131,"user_name":"wuhulala","can_delete":false,"product_type":"c1","uid":1191143,"ip_address":"","ucode":"6DBF2C9E19B930","user_header":"https://static001.geekbang.org/account/avatar/00/12/2c/e7/3c0eba8b.jpg","comment_is_top":false,"comment_ctime":1538695121,"is_pvip":false,"replies":[{"id":"10942","content":"Dubbo的线程池的大小还要看看你的远程调用的rt是多少，如果rt比较长，那线程数就要多一点，不然你的系统连接很容易就满了，就拒绝服务了。","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1538819538,"ip_address":"","comment_id":30131,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23013531601","product_id":100017501,"comment_content":"有个疑问：比如dubbo默认线程池大小是200 这个线程配置 其实在我们的机器往往是8c的 并且是计算密集型 那么就过于大了吧 默认配置这么大是因为大部分机器都是64c+么？","like_count":5,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425863,"discussion_content":"Dubbo的线程池的大小还要看看你的远程调用的rt是多少，如果rt比较长，那线程数就要多一点，不然你的系统连接很容易就满了，就拒绝服务了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538819538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32589,"user_name":"看不到de颜色","can_delete":false,"product_type":"c1","uid":1162714,"ip_address":"","ucode":"88348CCAE81931","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","comment_is_top":false,"comment_ctime":1539617143,"is_pvip":false,"replies":[{"id":"12237","content":"关于线程数的设定我给出的是一个经验公式，不是所有的线程池都要根据这个设置，那肯定也不合理，例如，一个Java系统里可能都很多线程池，如果每个线程池都设置这个值，那会有很多的线程。<br><br>我说的这个设置，其实主要是想把最重要处理用户请求的线程池设置这个数，或者是系统中最核心的处理用户请求的线程池建议按照这个来设置，另外像Dubbo中的线程池的数量还要根据每个请求的rt以及并发数来综合考量，例如如果每个请求的rt比较长，那么并发数一多的话，很容易就满了，这时你为了提升并发请求数，肯定要多设置一些线程数，否则很容易请求失败。当然你也可以增加机器来解决，总之你还是要有个平衡。","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1540097735,"ip_address":"","comment_id":32589,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18719486327","product_id":100017501,"comment_content":"看完这章内容有一点跟之前了解到不一致的地方。就是通常设置线程数大小会根据任务类型进行区分。通常会划分为IO密集型和CPU密集型。印象中CPU密集型的任务通常线程数建议就是 CPU核心数+1。那么老师在文中提到的 2*CPU核心数+1指的是IO密集型任务的通常线程数设置嘛？<br>看完这章内容还有一个感受就是设置JSF(类似于Dubbo的一个RPC框架)线程池大小时是否也可以先从接口的QPS入手。之前都是凭感觉设置，线上出问题了再扩大😂","like_count":4,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426827,"discussion_content":"关于线程数的设定我给出的是一个经验公式，不是所有的线程池都要根据这个设置，那肯定也不合理，例如，一个Java系统里可能都很多线程池，如果每个线程池都设置这个值，那会有很多的线程。\n\n我说的这个设置，其实主要是想把最重要处理用户请求的线程池设置这个数，或者是系统中最核心的处理用户请求的线程池建议按照这个来设置，另外像Dubbo中的线程池的数量还要根据每个请求的rt以及并发数来综合考量，例如如果每个请求的rt比较长，那么并发数一多的话，很容易就满了，这时你为了提升并发请求数，肯定要多设置一些线程数，否则很容易请求失败。当然你也可以增加机器来解决，总之你还是要有个平衡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540097735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30652,"user_name":"吴浩","can_delete":false,"product_type":"c1","uid":1142224,"ip_address":"","ucode":"EA91647FF05EA7","user_header":"https://static001.geekbang.org/account/avatar/00/11/6d/d0/6c2b8877.jpg","comment_is_top":false,"comment_ctime":1538966024,"is_pvip":false,"replies":[{"id":"11673","content":"嗯，写的一致性主要是通过数据库来保证","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1539495571,"ip_address":"","comment_id":30652,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18718835208","product_id":100017501,"comment_content":"读的场景可以允许一定的脏数据，导致少量原本无库存的下单请求被误以为有库存，可以在写数据的时候再保证最终一致性<br><br><br><br>想问下，这里在写的时候保证是该如何保证了？库存量大于1么？","like_count":3,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426059,"discussion_content":"嗯，写的一致性主要是通过数据库来保证","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539495571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111862,"user_name":"immortalCockroach","can_delete":false,"product_type":"c1","uid":1157912,"ip_address":"","ucode":"9A4F497BEA7DFB","user_header":"https://static001.geekbang.org/account/avatar/00/11/ab/18/b01e71d1.jpg","comment_is_top":false,"comment_ctime":1562632733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14447534621","product_id":100017501,"comment_content":"一个办法就是看当 QPS 达到极限时，你的服务器的 CPU 使用率是不是超过了 95%，如果没有超过，那么表示 CPU 还有提升的空间，要么是有锁限制，要么是有过多的本地 I&#47;O 等待发生。<br><br>如果cpu使用率不到95%，说明此时cpu不是瓶颈？因为我理解如果cpu是瓶颈，需要优化的话，应该是cpu先到达了阈值而其他的诸如iops ，带宽使用没有到达阈值，希望老师能够指点一下","like_count":3},{"had_liked":false,"id":48097,"user_name":"飞天小侠","can_delete":false,"product_type":"c1","uid":1309949,"ip_address":"","ucode":"F771AAF558DDAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBWb8MQOy1NIBlqRJ3hfGe4XB7sLZpgpGA5KRpZoOQfzXW3rV3RLYGePS1PGUARR5WdH7ODMicjnQ/132","comment_is_top":false,"comment_ctime":1544352173,"is_pvip":false,"replies":[{"id":"19646","content":"锁肯定是会存在的，解决的办法就是尽可能避免产生锁，比如根据商品ID进行分库分表设计；再有就是减少锁的粒度例如阿里对MySQL做了定制优化，可以提升MySQL的并发度","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1545825586,"ip_address":"","comment_id":48097,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14429254061","product_id":100017501,"comment_content":"老师，想问下，就是比如在下单的时候，先是写入一个订单，然后再减商品库存，因为减库存是写操作，所以会锁住，那么后面进来的有效请求就会等到释放锁才能操作，这样会不会影响后面的正常请求，响应太慢，然后有没有好的解决方案呢？","like_count":4,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432023,"discussion_content":"锁肯定是会存在的，解决的办法就是尽可能避免产生锁，比如根据商品ID进行分库分表设计；再有就是减少锁的粒度例如阿里对MySQL做了定制优化，可以提升MySQL的并发度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545825586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306266,"discussion_content":"根据商品ID进行分库分表设计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600236680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30311,"user_name":"SpoutAndBolt","can_delete":false,"product_type":"c1","uid":1255528,"ip_address":"","ucode":"C06428C1A5A9B4","user_header":"https://static001.geekbang.org/account/avatar/00/13/28/68/07b54bb9.jpg","comment_is_top":false,"comment_ctime":1538789330,"is_pvip":false,"replies":[{"id":"10939","content":"可以到是可以，就是比答题的方式更暴力一点，呵呵","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1538819258,"ip_address":"","comment_id":30311,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14423691218","product_id":100017501,"comment_content":"如果让前端无效请求数降低  能否可以使用Nginx的配置  limit_connect来控制","like_count":3,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425937,"discussion_content":"可以到是可以，就是比答题的方式更暴力一点，呵呵","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538819258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136930,"user_name":"跃然","can_delete":false,"product_type":"c1","uid":1634828,"ip_address":"","ucode":"A7102EE599F57E","user_header":"https://static001.geekbang.org/account/avatar/00/18/f2/0c/c6bec9ff.jpg","comment_is_top":false,"comment_ctime":1569555824,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10159490416","product_id":100017501,"comment_content":"通过减少序列化提高性能，合并部署时为什么不能走本机的socket呢","like_count":2},{"had_liked":false,"id":36332,"user_name":"One day","can_delete":false,"product_type":"c1","uid":1126868,"ip_address":"","ucode":"F71F465ABB3A6A","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/d4/3dcddc04.jpg","comment_is_top":false,"comment_ctime":1541041404,"is_pvip":false,"replies":[{"id":"13014","content":"Dubbo专门的书籍我也没看到过，不过可以去看看他的官方文档，再结合他的源码，相信你能够搞明白😉","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1541239547,"ip_address":"","comment_id":36332,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10130975996","product_id":100017501,"comment_content":"想问下有dubbo相关的书籍推荐一下吗？在网上没找到。。。","like_count":2,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427835,"discussion_content":"Dubbo专门的书籍我也没看到过，不过可以去看看他的官方文档，再结合他的源码，相信你能够搞明白😉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541239547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30308,"user_name":"黄金的太阳","can_delete":false,"product_type":"c1","uid":1105079,"ip_address":"","ucode":"9D7F2397124AB9","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/b7/e59c22f0.jpg","comment_is_top":false,"comment_ctime":1538788225,"is_pvip":false,"replies":[{"id":"10948","content":"是1000毫秒<br><br>单线程是1000毫秒&#47;每个请求的rt<br>所以多线程就近似等于单线程的qps乘以线程数了","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1538820908,"ip_address":"","comment_id":30308,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10128722817","product_id":100017501,"comment_content":"老师，总QPS那个公式不是很理解，请问是如何推导出来的？1000ms指的是1000毫秒的意思？<br>正常的公式不应该是QPS=总请求数&#47;(线程数*响应时间)嘛？","like_count":2,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425935,"discussion_content":"是1000毫秒\n\n单线程是1000毫秒/每个请求的rt\n所以多线程就近似等于单线程的qps乘以线程数了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538820908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30219,"user_name":"Schelor","can_delete":false,"product_type":"c1","uid":1123381,"ip_address":"","ucode":"B1A7461106E362","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BR5EhqRicJHM1ARLDuCKsJPwSkGlTibcaicTzhCryAaicPDF4QBqW2ONXOfhndZfIEiaFLjYE7nMIibVt9IzX5bUFO6g/132","comment_is_top":false,"comment_ctime":1538729631,"is_pvip":false,"replies":[{"id":"11674","content":"😉","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1539495596,"ip_address":"","comment_id":30219,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10128664223","product_id":100017501,"comment_content":"许老师行文流畅，文章有层次。<br>部分文字如统一接入层，Tair等还是可以看出，阿里技术还是渗透很深的。","like_count":2,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425901,"discussion_content":"😉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539495596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232485,"user_name":"Jagger Chen","can_delete":false,"product_type":"c1","uid":1993603,"ip_address":"","ucode":"7C6ACBCF32ED12","user_header":"https://static001.geekbang.org/account/avatar/00/1e/6b/83/5fb44cd0.jpg","comment_is_top":false,"comment_ctime":1594017475,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5888984771","product_id":100017501,"comment_content":"老师您好，在响应时间和 QPS 关系的讲解中，线程等待时间对 QPS 的影响不大，为什么呢？如果线程处于阻塞状态，会占用线程资源而导致没有足够的线程去响应新的请求，QPS 不就下降了吗？谢谢回答","like_count":1,"discussions":[{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327403,"discussion_content":"文中举了个代理服务器的例子，我的理解是，因为是流水线作业，所以单个线程的等待时间，和整个流水线的吞吐量无关，瓶颈主要还是在 CPU 那里。\n\n比如一个工人每小时处理 10 个商品，那么一个半成品在他的台位上等多久，和这个台位的吞吐量没什么关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605831616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306269,"discussion_content":"我也没懂。难道老师说的情况是在缓存机器里的线程数始终够用的前提下？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600237125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192083,"user_name":"Mango","can_delete":false,"product_type":"c1","uid":1734886,"ip_address":"","ucode":"EC2D20BD322E22","user_header":"","comment_is_top":false,"comment_ctime":1584836996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879804292","product_id":100017501,"comment_content":"减少中间商赚差价","like_count":1},{"had_liked":false,"id":81664,"user_name":"ailei","can_delete":false,"product_type":"c1","uid":1476550,"ip_address":"","ucode":"98B6811863CCF4","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/c6/180fd1ad.jpg","comment_is_top":false,"comment_ctime":1554000721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848968017","product_id":100017501,"comment_content":"这个老师比讲linux的刘老师响应留言多，超赞👍","like_count":1},{"had_liked":false,"id":68215,"user_name":"linx","can_delete":false,"product_type":"c1","uid":1053816,"ip_address":"","ucode":"391384A42B150C","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/78/6888781e.jpg","comment_is_top":false,"comment_ctime":1550458524,"is_pvip":false,"replies":[{"id":"26120","content":"大B和小b的区别","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1551525264,"ip_address":"","comment_id":68215,"utype":1}],"discussion_count":0,"race_medal":0,"score":"5845425820","product_id":100017501,"comment_content":"千兆带宽下 10KB 数据的极限 QPS 为 1.25 万 QPS=1000Mbps&#47;8&#47;10KB<br>不太明白这个8 是指什么呢？","like_count":1},{"had_liked":false,"id":65318,"user_name":"这菜真香呀","can_delete":false,"product_type":"c1","uid":1046661,"ip_address":"","ucode":"13692E295A6A47","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/85/3c072e6f.jpg","comment_is_top":false,"comment_ctime":1549241740,"is_pvip":false,"replies":[{"id":"26113","content":"性能基线和链路基线还可以扩展很多知识点，但是由于篇幅……<br>简单说来就是性能基线可以以一个系统的关键接口（访问商品）以QPS、RT等指标建立持续的性能测试数据，监控其性能的变化，一旦发现性能下降时可以追溯到什么时间，已经分析出什么原因。<br><br>链路基线是以系统的依赖为指标建立的，系统依赖哪些关键接口，要长期加以记录和跟踪。","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1551524154,"ip_address":"","comment_id":65318,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5844209036","product_id":100017501,"comment_content":"最后有点泛泛，性能基线和链路基线具体指什么呢","like_count":1,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438404,"discussion_content":"性能基线和链路基线还可以扩展很多知识点，但是由于篇幅……\n简单说来就是性能基线可以以一个系统的关键接口（访问商品）以QPS、RT等指标建立持续的性能测试数据，监控其性能的变化，一旦发现性能下降时可以追溯到什么时间，已经分析出什么原因。\n\n链路基线是以系统的依赖为指标建立的，系统依赖哪些关键接口，要长期加以记录和跟踪。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551524154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30229,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1538732536,"is_pvip":false,"replies":[{"id":"10945","content":"同一个商品的库存肯定在同一个表的一个字段中，但是可以对商品进行分库分表。<br><br>对秒杀中的库存读可以不要求强一致性读，写当然要强一致性，保证是通过数据库，因为同一个商品的库存就在同一个表字段中","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1538819976,"ip_address":"","comment_id":30229,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5833699832","product_id":100017501,"comment_content":"1、像库存，余额只能用一个库的一张表某一个字段来计算吗？因为需要强一致性吧。？？？<br>2、像库存，余额用最终一致性的话，体验很不好吧。请问一下分别如何实现最终一致性和强一致性呢？","like_count":2,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425906,"discussion_content":"同一个商品的库存肯定在同一个表的一个字段中，但是可以对商品进行分库分表。\n\n对秒杀中的库存读可以不要求强一致性读，写当然要强一致性，保证是通过数据库，因为同一个商品的库存就在同一个表字段中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538819976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345712,"user_name":"遨游","can_delete":false,"product_type":"c1","uid":1818087,"ip_address":"","ucode":"3D24DA4B30FF41","user_header":"https://static001.geekbang.org/account/avatar/00/1b/bd/e7/3cc191d6.jpg","comment_is_top":false,"comment_ctime":1652521148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652521148","product_id":100017501,"comment_content":"请问如果在项目中遇到需要调用第三方接口时比较耗时，但是第三方接口又不可控这样的情况有什么好的解决方案？谢谢！","like_count":0},{"had_liked":false,"id":262790,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1605842757,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1605842757","product_id":100017501,"comment_content":"真正对性能有影响的是 CPU 执行时间，线程等待时间对性能的影响不大。我对这一点的理解类似于流水线，假设一个工人每小时能够完成 10 个产品，那么半成品在其工位上的等待时间，与该工位的吞吐量其实没什么影响（半成品可能很多）。<br><br>发现短板或者说性能瓶颈，应该是性能优化的第一步。","like_count":0},{"had_liked":false,"id":248596,"user_name":"不要挑战自己的智商","can_delete":false,"product_type":"c1","uid":2063114,"ip_address":"","ucode":"4910FF07C35DC5","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","comment_is_top":false,"comment_ctime":1600235547,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1600235547","product_id":100017501,"comment_content":"老师好牛x啊，好想抱老师大腿","like_count":0},{"had_liked":false,"id":217763,"user_name":"爱学习的大叔","can_delete":false,"product_type":"c1","uid":1085152,"ip_address":"","ucode":"91F9ABF1EC98D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/e0/847348b1.jpg","comment_is_top":false,"comment_ctime":1589606673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589606673","product_id":100017501,"comment_content":"我们的网站好多都是放在缓存里，然后前端对于脚本可以采用preload,async,defer的方式预加载或者异步字体，图片，脚本等。","like_count":0},{"had_liked":false,"id":193893,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1584977794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584977794","product_id":100017501,"comment_content":"在考虑选择优化的位置时，可以遵循阿姆达尔法则进行优化。","like_count":0},{"had_liked":false,"id":158522,"user_name":"李瑞","can_delete":false,"product_type":"c1","uid":1319802,"ip_address":"","ucode":"29AD549B0B990E","user_header":"https://static001.geekbang.org/account/avatar/00/14/23/7a/b41773b6.jpg","comment_is_top":false,"comment_ctime":1575395065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575395065","product_id":100017501,"comment_content":"请问老师，线程CPU时间及线程等待时间如何计算呢？","like_count":0},{"had_liked":false,"id":146609,"user_name":"yang11111","can_delete":false,"product_type":"c1","uid":1255389,"ip_address":"","ucode":"6AAF458051AFB4","user_header":"https://static001.geekbang.org/account/avatar/00/13/27/dd/ec656592.jpg","comment_is_top":false,"comment_ctime":1572581621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572581621","product_id":100017501,"comment_content":"老师 一台机器一般qps能到多少 很想知道","like_count":0},{"had_liked":false,"id":141987,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1571276186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571276186","product_id":100017501,"comment_content":"缓存秒级别的被动更新---是不是会出现秒杀在几秒钟都结束了，缓存还没更新？","like_count":0},{"had_liked":false,"id":92244,"user_name":"Geek_e2b84c","can_delete":false,"product_type":"c1","uid":1522715,"ip_address":"","ucode":"1A11719DC530AF","user_header":"","comment_is_top":false,"comment_ctime":1557211604,"is_pvip":false,"replies":[{"id":"34283","content":"用Redis来缓存库存也是一种方案，我在文章里也介绍过，不过也有风险，数据持久化会是一个麻烦","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1558245682,"ip_address":"","comment_id":92244,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1557211604","product_id":100017501,"comment_content":"利用数据库锁的来保证强一致性性能瓶颈还是比较明显的吧，根据商品来做分表对其它业务还是会产品很多影响的，是否可以使用redis缓存来保证数据的一致性，将商品数量缓存到redis，通过redis的串行事务的特性来保证不超卖，毕竟redis的性能还是很强悍的。。。","like_count":0,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449190,"discussion_content":"用Redis来缓存库存也是一种方案，我在文章里也介绍过，不过也有风险，数据持久化会是一个麻烦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558245682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306268,"discussion_content":"毕竟是秒杀，应该很快就秒完了吧。所以只要有多份数据在不同的机器内存中，应该OK的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600237022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70055,"user_name":"皮卡皮卡丘","can_delete":false,"product_type":"c1","uid":1106062,"ip_address":"","ucode":"6764F465FF975B","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/8e/0e4bc2a9.jpg","comment_is_top":false,"comment_ctime":1550978857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550978857","product_id":100017501,"comment_content":"要先换算成字节","like_count":0},{"had_liked":false,"id":33991,"user_name":"Derek.c","can_delete":false,"product_type":"c1","uid":1100089,"ip_address":"","ucode":"198D05798AF43D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/39/ffc192e2.jpg","comment_is_top":false,"comment_ctime":1539939837,"is_pvip":false,"replies":[{"id":"12226","content":"外网测试和内网测试的主要差别是经过网络的节点的差异，如果你想测试网络带宽对系统的影响可用再外网测试，但是要考虑到对其他业务的影响，例如别把网络带宽打满而影响了其他业务正常服务。<br><br>如果仅仅是测试应用程序本身的性能，那么本机测试就足够了。","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1540094048,"ip_address":"","comment_id":33991,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539939837","product_id":100017501,"comment_content":"许老师你好，最近在学习测试Web系统的性能，一般用到的工具wrk、siege、apache ab这些，当测试某一Web应用接口时，以ab举例，是从外网测试(ab -c 10 -n 100 http:&#47;&#47;a.web.com&#47;)还是从内网测试(ab -c 10 -n 100 http:&#47;&#47;localhost:80&#47;)，我个人是倾向外网测试（负载均衡、DNS响应速度都要测试）","like_count":0,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427094,"discussion_content":"外网测试和内网测试的主要差别是经过网络的节点的差异，如果你想测试网络带宽对系统的影响可用再外网测试，但是要考虑到对其他业务的影响，例如别把网络带宽打满而影响了其他业务正常服务。\n\n如果仅仅是测试应用程序本身的性能，那么本机测试就足够了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540094048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30882,"user_name":"李俊辉","can_delete":false,"product_type":"c1","uid":1254739,"ip_address":"","ucode":"916C50447900F4","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/53/3deb8a44.jpg","comment_is_top":false,"comment_ctime":1539041394,"is_pvip":false,"replies":[{"id":"11190","content":"那可能什么地方有锁，或者其他的瓶颈例如io","user_name":"作者回复","user_name_real":"君山","uid":"1253339","ctime":1539084696,"ip_address":"","comment_id":30882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539041394","product_id":100017501,"comment_content":"如果发现QPS和cpu使用率都没上去怎么办？springboot dubbox zookeeper ","like_count":0,"discussions":[{"author":{"id":1253339,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/db/d7d863ed.jpg","nickname":"君山","note":"","ucode":"F8ACCB6FBFAFCD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426128,"discussion_content":"那可能什么地方有锁，或者其他的瓶颈例如io","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539084696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}