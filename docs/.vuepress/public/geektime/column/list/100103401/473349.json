{"id":473349,"title":"02 | 面向对象：理解Kotlin设计者的良苦用心","content":"<p>你好，我是朱涛。这节课，我们来学习Kotlin的面向对象编程：类、接口、继承、嵌套，以及Kotlin独有的数据类和密封类。</p><p>面向对象（Object Oriented）是软件开发方法，也是计算机界应用最广的一种编程范式。它是把程序的“数据”和“方法”作为一个整体来看待，将其抽象成了一个具体的模型，从而更贴近事物的自然运行模式。它的特点是简单易懂，符合人类的思维模式。</p><p>在“面向对象”的概念上，虽然Kotlin和Java之间有一定的语法差异，但底层的思想是没有变的。比如Java和Kotlin当中，都有类、接口、继承、嵌套、枚举的概念，唯一区别就在于这些概念在两种语言中的具体语法不同。<strong>我们需要做的，仅仅只是为我们脑海里已经熟知的概念，再增加一种语法规则而已。</strong></p><p>而如果你没有Java基础也没关系，今天这节课要学习的内容，几乎是所有编程语言都需要掌握的概念。在掌握了Kotlin面向对象的编程思想后，如果你再去学习其他编程语言，你也照样可以快速迁移这些知识点。</p><p>当然，Kotlin作为一门新的语言，它也创造了一些新的东西，比如数据类、密封类、密封接口等。这些Kotlin的新概念，会是我们需要着重学习的对象。<strong>实际上，也正是因为Kotlin的这些独有概念，使得它形成了一种独特的编程风格和编程思想。</strong></p><!-- [[[read_end]]] --><p>那么，在学习这节课的时候，我想请你注意一点，就是如果你已经有了Java、C的编程经验，一定要有意识地跳出从前的编程习惯，尝试去理解Kotlin的编程思想。只有这样，你才能写出地道的Kotlin代码，而不仅仅只是用Kotlin语法翻译Java/C代码。</p><h2>怎么写出有Kotlin特点的类？</h2><p>Kotlin当中的“类”，我们可以将其理解为对某种事物的“抽象模型”。比如说，我们可以在Kotlin当中定义一个类，它叫做Person。</p><pre><code class=\"language-plain\">class Person(val name: String, var age: Int)\n</code></pre><p>计算机的世界里当然没有“人”的概念，但是这并不妨碍我们在代码当中定义一个人的“抽象模型”。上面的Person类当中，有一个属性，叫做“name”，每个人都会有名字，而名字也是属于人的一部分。这也很好理解，对吧。</p><p>不过，如果你以Java的角度来分析上面的代码的话，会发现它并没有表面上那么简单。如果我们将其翻译成等价的Java代码，它会变成很多行代码：</p><pre><code class=\"language-java\">public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // 属性 name 没有 setter\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n</code></pre><p>那么，把Kotlin和Java的代码对比着来看，我们很快就会发现，Kotlin当中，Person类的<strong>name是用val修饰的</strong>，这意味着，它在初始化以后将无法被修改。这个逻辑对应到Java当中，就是该变量只有getter没有setter。而Kotlin当中，Person类的<strong>age是var修饰的</strong>，意味着它是可以被随意修改的。这个逻辑对应到Java当中，就是该变量既有getter也有setter。</p><p>这下你应该就明白了，<strong>Kotlin定义的类，在默认情况下是public的</strong>，编译器会帮我们生成“构造函数”，对于类当中的属性，Kotlin编译器也会根据实际情况，自动生成getter和setter。</p><p>到这里，我们不得不感叹Kotlin语言的简洁性。Kotlin里简单到不能再简单的一行代码，在Java中却要写这么一大串。要注意，这里的差距并不仅仅是我们程序员敲代码的时间，还包括后续我们迭代维护的时间，或者说是读代码的时间。Kotlin一行代码，我们轻松就能理解了，而对应的Java则完全不一样。并且，这还只是一个最简单的案例，真实的程序比这复杂千万倍。</p><h3>自定义属性getter</h3><p>我们继续来看前面的Person类的例子。如果这时候，我们希望它增加一个功能，就是根据年龄的大小自动判断是不是成年人，也就是age≥18。</p><p>如果按照我们从前的Java思维，一定会习以为常地写出下面这样的代码，也就是为Person类增加一个新的方法：isAdult()。</p><pre><code class=\"language-plain\">class Person(val name: String, var age: Int) {\n    fun isAdult(): Boolean {\n        return age &gt;= 18 \n    }\n}\n</code></pre><p>又或者，我们可以充分发挥Kotlin的简洁语法特性，将isAdult()写得更加清爽一些：</p><pre><code class=\"language-plain\">class Person(val name: String, var age: Int) {\n    fun isAdult() = age &gt;= 18 \n}\n</code></pre><p>代码写成这样，已经算不错了。然而，我们还可以用另一种更符合直觉的写法，那就是将isAdult()定义成Person的属性。具体的做法，就是借助Kotlin属性的<strong>自定义getter</strong>。</p><pre><code class=\"language-plain\">class Person(val name: String, var age: Int) {\n    val isAdult\n        get() = age &gt;= 18\n//        ↑\n//    这就是isAdult属性的getter方法\n}\n</code></pre><p>所谓getter，就是<strong>获取属性值的方法</strong>。我们通过自定义这个get()方法，就可以改变返回值的规则。比如，这里的年龄大于等于18，就是成年人，这个规则就是通过自定义来实现的。</p><p>以上的isAdult属性，我们省略了它的类型，因为编译器会自动推导它的类型是Boolean（布尔）类型。另外，由于get()方法内部只有一行代码，我们使用了函数的“单一表达式”写法，直接用等号连接即可。</p><p>而如果get()方法内部的逻辑比较复杂，我们仍然可以像正常函数那样，带上花括号：</p><pre><code class=\"language-plain\">class Person(val name: String, var age: Int) {\n    val isAdult: Boolean\n        get() {\n            // do something else\n            return age &gt;= 18\n        }\n}\n</code></pre><p>不过需要注意的是，在这种情况下，编译器的自动类型推导就会失效了，所以我们要为isAdult属性增加明确的类型：Boolean。</p><p>看到这里，也许你会觉得奇怪：判断一个人是否为成年人，我们只需要判断age这个属性即可，<strong>为什么还要引入一个新的属性isAdult呢？</strong>这不是凭空多占用了一个变量的内存吗？这么做是否有必要？</p><p>实际上，这里涉及到Java到Kotlin的一种思想转变。让我们来详细分解上面的问题：</p><ul>\n<li>首先，<strong>从语法的角度</strong>上来说，是否为成年人，本来就是属于人身上的一种属性。我们在代码当中将其定义为属性，更符合直觉。而如果我们要给Person增加一个行为，比如walk，那么这种情况下定义一个新的方法就是非常合适的。</li>\n<li>其次，<strong>从实现层面</strong>来看，我们确实定义了一个新的属性isAdult，但是Kotlin编译器能够分析出，我们这个属性实际是根据age来做逻辑判断的。在这种情况下，Kotlin编译器可以在JVM层面，将其优化为一个方法。</li>\n<li>通过以上两点，我们就成功在语法层面有了一个isAdult属性；但是<strong>在实现层面，isAdult仍然还是个方法</strong>。这也就意味着，isAdult本身不会占用内存，它的性能和我们用Java写的方法是一样的。而这在Java当中是无法实现的。</li>\n</ul><p>所以，当你使用Kotlin来编写代码的时候，一定要注意其中引入的Kotlin属性的含义，并且理解它的底层实现逻辑。只有这样，你才能真正发挥Kotlin简洁语法的优势，而不必束缚在Java或者C的代码撰写思维里。</p><p>对了，也许你会突发奇想，想要将上面的代码进一步简化，比如写成这样：</p><pre><code class=\"language-plain\">class Person(val name: String, var age: Int) {\n    val isAdult = age &gt;= 18\n}\n</code></pre><p>但实际上，这种代码是无法正常工作的。由于它牵涉到Kotlin的原理，你可以在学完下一节“Kotlin原理”之后，再回过头来看看这段代码为什么有问题。</p><h3>自定义属性setter</h3><p>我们继续来看前面的Person案例，假设这时候我们又来了一个新的需求，希望在age被修改的时候，能够做一些日志统计工作。如果是Java，那我们直接在setAge()方法当中加入一些逻辑就行了。</p><p>可是在Kotlin当中，我们要怎么办呢？答案也很容易想到，<strong>自定义setter</strong>。</p><pre><code class=\"language-plain\">class Person(val name: String) {\n    var age: Int = 0\n//  这就是age属性的setter\n//       ↓\n        set(value: Int) {\n            log(value)\n            field = value\n        }\n    // 省略\n}\n</code></pre><p>所谓setter，就是<strong>可以对属性赋值的方法</strong>。当我们想要改变属性的赋值逻辑时，我们就可以通过自定义来实现了。需要注意的是，以上代码当中的value，就是set方法传入的参数。而set()方法当中的field则是代表了age，这是Kotlin编译器为我们提供的字段。field = value，这一行代码就表示我们实现了对age的赋值操作。</p><p>有的时候，我们不希望属性的set方法在外部访问，那么我们可以给set方法加上可见性修饰符，比如这里，我们可以给set方法加上private，限制它仅可以在类的内部访问：</p><pre><code class=\"language-plain\">class Person(val name: String) {\n    var age: Int = 0\n        private set(value: Int) {\n            log(value)\n            field = value\n        }\n    // 省略\n}\n</code></pre><p>在了解了Kotlin中类的定义以后，我们再来看一种特殊的类：抽象类。</p><h2>抽象类与继承</h2><p>前面我们所创建的类，比如Person，它是具体的、已经定型的类，我们可以直接用它来创建对象。而抽象类，则不是具体的类，它没有完全定型，我们也不能直接用它来创建对象。</p><p>在Kotlin当中，抽象类的定义和Java几乎一样，也就是在关键字“class”“fun”的前面加上abstract关键字即可。这里我们继续上面的例子，把Person定义成抽象类，然后为它添加一个抽象方法：</p><pre><code class=\"language-plain\">abstract class Person(val name: String) {\n    abstract fun walk()\n    // 省略\n}\n</code></pre><p>这样一来，如果我们要创建Person类，就必须要使用匿名内部类的方式，或者使用Person的子类来创建变量。而这，就需要用到<strong>类的继承</strong>了。</p><p>从概念上讲，Kotlin的继承和Java的并没有区别，它们只是在语法上有一点点不一样。Java当中我们是使用extends表示继承，而Kotlin当中我们则使用冒号来表示继承。</p><pre><code class=\"language-java\">//                      Java 的继承\n//                           ↓\npublic class MainActivity extends Activity {\n    @Override\n    void onCreate(){ ... }\n}\n\n//              Kotlin 的继承\n//                 ↓\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate() { ... }\n}\n</code></pre><p>除了继承的语法不太一样，重写的表达方式也不太一样。Java当中是使用@Override注解，而Kotlin当中直接将其定义为了<strong>override关键字</strong>。而除了抽象类以外，正常的类其实也是可以被继承的。不过，我们必须对这个类<strong>标记为open</strong>。如果一个类不是抽象类，并且没有用open修饰的话，它是无法被继承的。</p><pre><code class=\"language-plain\">class Person() {\n    fun walk()\n}\n\n// 报错\nclass Boy: Person() {\n}\n</code></pre><p>根据以上代码我们可以看到，Person不是抽象类，同时它也没有被open修饰。Boy这个类尝试继承Person，会导致编译器报错。所以，我们必须为Person这个类加上open关键字：</p><pre><code class=\"language-plain\">open class Person() {\n    open fun walk()\n}\n\nclass Boy: Person() {\n    // 省略重写逻辑\n}\n</code></pre><p>所以，Kotlin的类，默认是不允许继承的，除非这个类明确被open关键字修饰了。另外，对于被open修饰的普通类，它内部的方法和属性，默认也是不允许重写的，除非它们也被open修饰了：</p><pre><code class=\"language-plain\">open class Person() {\n    val canWalk: Boolean = false\n    fun walk()\n}\n\nclass Boy: Person() {\n    // 报错\n    override val canWalk: Boolean = true\n    // 报错\n    override fun walk() {\n    }\n}\n</code></pre><p>可以看到，由于Person类当中的canWalk属性以及walk()方法，它们都没有使用open修饰，在这种情况下，即使Person可以被继承，但在继承之后的Boy类当中，我们是无法重写canWalk属性、walk()方法的。</p><p>也就是说，<strong>在继承的行为上面，Kotlin和Java完全相反。</strong>Java当中，一个类如果没有被final明确修饰的话，它默认就是可以被继承的。而这同时也就导致了，在Java当中“继承”被过度使用。对于这一点，经典书籍<a href=\"https://book.douban.com/subject/1103015\">《Effective Java》</a>也有提到过。</p><p>所以，<strong>Java的继承是默认开放的，Kotlin的继承是默认封闭的</strong>。Kotlin的这个设计非常好，这样就不会出现Java中“继承被滥用”的情况。</p><p>好，下面，我们再来看看另一种常见的面向对象的编程方式，那就是“实现”。</p><h2>接口和实现</h2><p>Kotlin当中的接口（interface），和Java也是大同小异的，它们都是通过<strong>interface</strong>这个关键字来定义的。</p><pre><code class=\"language-plain\">interface Behavior {\n    fun walk()\n}\n\nclass Person(val name: String): Behavior {\n    override fun walk() {\n        // walk\n    }\n    // ...\n}\n</code></pre><p>可以看到在以上的代码中，我们定义了一个新的接口Behavior，它里面有一个需要被实现的方法walk，然后我们在Person类当中实现了这个接口。</p><p>而在这里，我们又会发现Kotlin和Java不同的小细节：<strong>Kotlin的继承和接口实现语法是一样的。</strong>多么得贴心！</p><p>Kotlin的接口，跟Java最大的差异就在于，接口的方法可以有默认实现，同时，它也可以有属性。比如，我们来看看下面这段代码：</p><pre><code class=\"language-plain\">interface Behavior {\n    // 接口内的可以有属性\n    val canWalk: Boolean\n\n    // 接口方法的默认实现\n    fun walk() {\n        if (canWalk) {\n            // do something\n        }\n    }\n}\n\nclass Person(val name: String): Behavior {\n    // 重写接口的属性\n    override val canWalk: Boolean\n        get() = true\n}\n</code></pre><p>可以看到，我们在Behavior接口当中增加了一个属性canWalk，代表是否可以行走。与此同时，我们在接口方法当中，为walk()方法提供了默认实现，这个实现的逻辑也很简单，如果canWalk为true，才执行walk内部的具体行为。</p><p>需要特别注意的是，由于walk已经有了默认的实现，所以我们在Person类当中就可以不必实现walk方法了。而Kotlin的这一设计，就让“接口”和“抽象类”之间的界限越来越模糊了。</p><p>换句话说，Kotlin当中的接口，被设计得更加强大了，<strong>它拥有了部分抽象类才有的特性，同时还可以灵活使用接口组合的特性</strong>。</p><p>另外你还需要知道一点，就是虽然在Java 1.8版本当中，接口也引入了类似的特性，但由于Kotlin是完全兼容Java 1.6版本的。因此为了实现这个特性，Kotlin编译器在背后做了一些转换。这也就意味着，它是有一定局限性的。而具体的局限体现在哪里呢？这个我先不多讲，你可以自己回去思考思考。</p><h2>嵌套</h2><p>Java当中，最常见的嵌套类分为两种：非静态内部类、静态内部类。Kotlin当中也有一样的概念。</p><pre><code class=\"language-plain\">class A {\n    class B {\n    }\n}\n</code></pre><p>以上代码中，B类，就是A类里面的嵌套类，这非常容易理解。不过我们需要注意的是，这种写法的嵌套类，我们无法在B类当中访问A类的属性和成员方法。</p><pre><code>class A {\n    val name: String = &quot;&quot;\n    fun foo() = 1\n\n\n    class B {\n        val a = name   // 报错\n        val b = foo()  // 报错\n    }\n}\n</code></pre><p>可以看到，当我们尝试在B类当中访问A类的成员时，编译器会报错。如果你有Java基础，应该马上就能反应过来：这种写法就对应了Java当中的静态内部类！</p><pre><code>// 等价的Java代码如下：\npublic class A() {\n    public String name = &quot;&quot;;\n    public int foo() { return 1; }\n\n\n    public static class B {\n        String a = name)   // 报错\n        int b = foo()      // 报错\n    }\n}\n</code></pre><p>所以，Kotlin当中的普通嵌套类，它的本质是静态的。相应地，如果想在Kotlin当中定义一个普通的内部类，我们需要在嵌套类的前面加上<strong>inner关键字</strong>。</p><pre><code>class A {\n    val name: String = &quot;&quot;\n    fun foo() = 1\n// 增加了一个关键字\n//    ↓\n    inner class B {\n        val a = name   // 通过\n        val b = foo()  // 通过\n    }\n}\n</code></pre><p>inner关键字，代表了B类是A类内部的类，这种情况下，我们在B类的内部是可以访问A类的成员属性和方法的。</p><p>Kotlin的这种设计非常巧妙。如果你熟悉Java开发，你会知道，Java当中的嵌套类，如果没有static关键字的话，它就是一个内部类，这样的内部类是会持有外部类的引用的。可是，这样的设计在Java当中会非常容易出现内存泄漏！而大部分Java开发者之所以会犯这样的错误，往往只是因为忘记加“static”关键字了。这是一个Java开发者默认情况下就容易犯的错。</p><p>Kotlin则反其道而行之，在默认情况下，<strong>嵌套类变成了静态内部类</strong>，而这种情况下的嵌套类是不会持有外部类引用的。只有当我们真正需要访问外部类成员的时候，我们才会加上inner关键字。这样一来，默认情况下，开发者是不会犯错的，只有手动加上inner关键字之后，才可能会出现内存泄漏，而当我们加上inner之后，其实往往也就能够意识到内存泄漏的风险了。</p><p>也就是说，<strong>Kotlin这样的设计，就将默认犯错的风险完全抹掉了！</strong></p><h2>Kotlin中的特殊类</h2><p>好了，到目前为止，我们接触到的都是Kotlin与Java都有的概念。接下来，我们来看两个Java当中没有的概念，数据类和密封类。</p><h3>数据类</h3><p>数据类（Data Class），顾名思义，就是<strong>用于存放数据的类</strong>。要定义一个数据类，我们只需要在普通的类前面加上一个关键字“data”即可。比如前面案例当中的Person类，我们只需要在它的前面加上data，就可以将它变为一个“数据类”。</p><pre><code class=\"language-plain\">    // 数据类当中，最少要有一个属性\n                   ↓\ndata class Person(val name: String, val age: Int)\n</code></pre><p>在Kotlin当中，编译器会为数据类自动生成一些有用的方法。它们分别是：</p><ul>\n<li>equals()；</li>\n<li>hashCode()；</li>\n<li>toString()；</li>\n<li>componentN() 函数；</li>\n<li>copy()。</li>\n</ul><p>所以，即使我们的Person类只有一行Kotlin代码，我们仍然可以在其他地方调用编译器，为我们自动生成这些方法。</p><pre><code class=\"language-plain\">val tom = Person(\"Tom\", 18)\nval jack = Person(\"Jack\", 19)\n\nprintln(tom.equals(jack)) // 输出：false\nprintln(tom.hashCode())   // 输出：对应的hash code\nprintln(tom.toString())   // 输出：Person(name=Tom, age=18)\n\nval (name, age) = tom     // name=Tom, age=18\nprintln(\"name is $name, age is $age .\")\n\nval mike = tom.copy(name = \"Mike\")\nprintln(mike)             // 输出：Person(name=Mike, age=18)\n</code></pre><p>这里你需要注意的是最后的四行代码。</p><p>“val (name, age) = tom”这行代码，其实是使用了数据类的解构声明。这种方式，可以让我们快速通过数据类来创建一连串的变量。另外，就是copy方法。数据类为我们默认实现了copy方法，可以让我们非常方便地在创建一份拷贝的同时，修改某个属性。</p><h3>密封类</h3><p>Kotlin当中的密封类，常常用来表示某种受到限制的继承结构。这样说起来可能有点抽象，让我们换个说法：<strong>密封类，是更强大的枚举类</strong>。</p><p>首先，让我们看看枚举类是什么。</p><pre><code class=\"language-plain\">enum class Human {\n    MAN, WOMAN\n}\n\nfun isMan(data: Human) = when(data) {\n    Human.MAN -&gt; true\n    Human.WOMAN -&gt; false\n    // 这里不需要else分支，编译器自动推导出逻辑已完备\n}\n</code></pre><p>我们通过enum就可以定义枚举类，<strong>所谓枚举，就是一组有限的数量的值</strong>。比如，人分为男人和女人。这样的分类是有限的，所以我们可以枚举出每一种情况。我们在when表达式当中使用枚举时，编译器甚至可以自动帮我们推导出逻辑是否完备。这是枚举的优势。</p><p>但是，枚举也有它的局限性。</p><pre><code class=\"language-plain\">println(Human.MAN == Human.MAN)\nprintln(Human.MAN === Human.MAN)\n\n输出\ntrue\ntrue\n</code></pre><p>比如在这里我们可以看到，当我们尝试去判断枚举的“结构相等”和“引用相等”时，结果始终都是true。而这就代表了，每一个枚举的值，它在内存当中始终都是同一个对象引用。</p><p>那么万一，我们想要枚举的值拥有不一样的对象引用，我们该怎么办呢？这时候就需要“密封类”出场了！</p><p>想要定义密封类，我们需要使用<strong>sealed关键字</strong>，它的中文含义也代表着“密封”。在Android开发当中，我们会经常使用密封类对数据进行封装。比如我们可以来看一个代码例子：</p><pre><code class=\"language-plain\">sealed class Result&lt;out R&gt; {\n    data class Success&lt;out T&gt;(val data: T, val message: String = \"\") : Result&lt;T&gt;()\n\n    data class Error(val exception: Exception) : Result&lt;Nothing&gt;()\n\n    data class Loading(val time: Long = System.currentTimeMillis()) : Result&lt;Nothing&gt;()\n}\n</code></pre><p>这个例子是改造于我实际工作中用过的代码。首先，我们使用sealed关键字定义了一个Result类，并且它需要一个泛型参数R，R前面的out我们可以暂时先忽略。</p><p>这个密封类，我们是专门用于封装网络请求结果的。可以看到，在Result类当中，分别有三个数据类，分别是Success、Error、Loading。我们将一个网络请求结果也分为了三大类，分别代表请求成功、请求失败、请求中。</p><p>这样，当网络请求有结果以后，我们的UI展示逻辑就会变得非常简单，也就是非常直白的三个逻辑分支：成功、失败、进行中。我们将其与Kotlin协程当中的when表达式相结合，就能很好地处理UI展示逻辑：如果是Loading，我们就展示进度条；如果是Success，我们就展示成功的数据；如果是Error，我们就展示错误提示框。</p><pre><code class=\"language-plain\">fun display(data: Result) = when(data) {\n    is Result.Success -&gt; displaySuccessUI(data)\n    is Result.Error -&gt; showErrorMsg(data)\n    is Result.Loading -&gt; showLoading()\n}\n</code></pre><p>由于我们的密封类只有这三种情况，所以我们的when表达式不需要else分支。可以看到，这样的代码风格，既实现了类似枚举类的逻辑完备性，还完美实现了数据结构的封装。<br>\n而且，在最新的Kotlin 1.5 版本当中，sealed不仅仅可以用于修饰类，还可以用于修饰接口。这就为我们的密封类实现多个接口，提供了可能。</p><h2>小结</h2><p>在这节课当中，我们学习了面向对象常见的概念，包括类、继承、接口、实现、枚举，还有Kotlin独有的数据类、密封类。同时也进一步领略到了Kotlin语法在一些细节的良苦用心。比如说：</p><ul>\n<li>Kotlin的类，默认是public的。</li>\n<li>Kotlin的类继承语法、接口实现语法，是完全一样的。</li>\n<li>Kotlin当中的类默认是对继承封闭的，类当中的成员和方法，默认也是无法被重写的。这样的设计就很好地避免了继承被滥用。</li>\n<li>Kotlin接口可以有成员属性，还可以有默认实现。</li>\n<li>Kotlin的嵌套类默认是静态的，这种设计可以防止我们无意中出现内存泄漏问题。</li>\n<li>Kotlin独特的数据类，在语法简洁的同时，还给我们提供了丰富的功能。</li>\n<li>密封类，作为枚举和对象的结合体，帮助我们很好地设计数据模型，支持when表达式完备性。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/21/bf/21080a921b3aa73872bfd55f7c1cddbf.jpg?wh=1920x911\" alt=\"图片\"></p><p>看到这里，你一定会发现，我们上面提到的这些点，正好也是决定着Kotlin编程思想的关键。也正是Kotlin这样独特的设计，才形成了Kotlin迥然不同的编程风格。曾经有不少人问过我这样的问题：“如何才能拥有Kotlin编程思维，而不是用Kotlin写Java风格代码？如何才能写出优雅的Kotlin代码？”</p><p>答案其实很简单，我们先要掌握Kotlin的语法，然后透过这些语法细节去揣摩Kotlin设计者的意图，当我们理解Kotlin设计者为什么要设计某个语法时，我们就不可能用错这个语法了。而当我们能够用好Kotlin的每个语法的时候，我们自然而然地就可以写出优雅的Kotlin代码了。</p><p>比如，当我们知道数据类是为了解决冗余的Java Bean而设计的，那我们无论如何都不会在Kotlin当中再写一遍Kotlin Bean了。又或者，当我们知道when表达式可以自动判断逻辑分支是否完备的时候，我们自然就会想办法让when与枚举类/密封类结合使用了。</p><p>正如课程开头我提到过的：入门Kotlin很容易，精通Kotlin很难。让我们一起努力吧！</p><h2>思考题</h2><p>在课程中，我提到了Kotlin接口的“成员属性”是存在一定的局限性的。那么，请问你能想到，它的局限性在哪里吗？</p><p>欢迎你在评论区分享你的思路，这个问题我会在下节课给出答案。另外在学完这节课之后，如果觉得有收获，也欢迎你把今天的内容分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"01 | Kotlin基础语法：正式开启学习之旅","id":472154},"right":{"article_title":"03 | Kotlin原理：编译器在幕后干了哪些“好事”？","id":473529}},"comments":[{"had_liked":false,"id":331328,"user_name":"夜班同志","can_delete":false,"product_type":"c1","uid":1192938,"ip_address":"","ucode":"19941F1537EB7B","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/ea/373d8e6b.jpg","comment_is_top":false,"comment_ctime":1642554223,"is_pvip":false,"replies":[{"id":"121045","content":"很好的补充，感谢建议，记下了。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642556749,"ip_address":"","comment_id":331328,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61772096367","product_id":100103401,"comment_content":"应该说明下 密封类是子类固定，枚举是对象固定 吧","like_count":15,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547139,"discussion_content":"很好的补充，感谢建议，记下了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642556749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329028,"user_name":"夜月","can_delete":false,"product_type":"c1","uid":1121740,"ip_address":"","ucode":"0C05F42E94F76C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Iofqk26ibmjFxAZKRibgUmwc9p5RDDArr9Jt0NTrwTKOhtPTuuia77OxOwyEUpeqp2fvU5HPpY8sK0vBejJNA3ib3w/132","comment_is_top":false,"comment_ctime":1641036060,"is_pvip":false,"replies":[{"id":"119884","content":"赞！","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641172203,"ip_address":"","comment_id":329028,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31705807132","product_id":100103401,"comment_content":"接口的属性：<br>1.不能设置初始值<br>2.val可以重写get,var的get和set都不能重写<br>","like_count":8,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543467,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641172203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2883877,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/01/25/c3aabbdc.jpg","nickname":"Context","note":"","ucode":"ED8583862D58C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553777,"discussion_content":"override var eat: Int = 1\n        set(value) {\n            field += value\n        }\n我这个算不算重写？？？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646064797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328501,"user_name":"初升的太阳","can_delete":false,"product_type":"c1","uid":1406859,"ip_address":"","ucode":"335D31074921F6","user_header":"https://static001.geekbang.org/account/avatar/00/15/77/8b/343fa432.jpg","comment_is_top":false,"comment_ctime":1640755393,"is_pvip":false,"replies":[{"id":"119731","content":"请注意：枚举类没办法和数据类进行结合，来承载我们的网络请求数据。但是密封类可以。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640828617,"ip_address":"","comment_id":328501,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23115591873","product_id":100103401,"comment_content":"由于我们的密封类只有这三种情况，所以我们的 when 表达式不需要 else 分支。可以看到，这样的代码风格，既实现了类似枚举类的逻辑完备性，还完美实现了数据结构的封装。<br><br>没看出来和枚举的区别","like_count":6,"discussions":[{"author":{"id":1188914,"avatar":"https://static001.geekbang.org/account/avatar/00/12/24/32/ebb3155d.jpg","nickname":"myshikin","note":"","ucode":"054558872E0754","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545375,"discussion_content":"枚举是实例有限，密封类是子类有限。\n实例有限适合定义一些有限的状态，因为枚举中的对象都是单例，那么这些状态在逻辑中都是唯一的。\n子类有限适合定义一些有限的状态，但这些状态在不同的环境写又携带不同的数据。\n  假设 我有一个电视机\n\nsealed class TVCommand { \n    object OpenTv : TVController() // 打开电视机\n    object OffTv : TVController() // 关闭电视机\n    data class VolumeDownOrUp(val voice: Int) : TVController() // 控制音量\n    data class SwitchChannel(val channel: String) : TVController() // 切换频道\n}\n\nfun operateTv(tvCommand:TVController){\n    //操作电视机\n}\n1. 我希望电视机只能接受定义的这些指令，使用的人只能发 TVCommand 命令，来操作。\n2. 有些操作需要携带参数，像 控制音量/切换频道 就需要构造不同的实例来操作电视机，  这个枚举就做不到了。\n3. 如果 sealed class 内全部是 object 修饰的单例对象，那么就和枚举一模一样了。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1641921372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1075334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/68/86/348be7f8.jpg","nickname":"Lingo","note":"","ucode":"82ECA2E0533B78","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546003,"discussion_content":"枚举类，枚举的是该类的对象；\n密封类，枚举的是该类的子类；","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1642125737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542694,"discussion_content":"请注意：枚举类没办法和数据类进行结合，来承载我们的网络请求数据。但是密封类可以。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640828617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1531763,"avatar":"https://static001.geekbang.org/account/avatar/00/17/5f/73/a9346146.jpg","nickname":"陈","note":"","ucode":"8AEF8530530311","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547293,"discussion_content":"可以理解为枚举类只能承载数据，而密封类可以承载数据与方法吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642605558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328782,"user_name":"Geek_70c6da","can_delete":false,"product_type":"c1","uid":2881073,"ip_address":"","ucode":"F5A1AFCE4E71D0","user_header":"","comment_is_top":false,"comment_ctime":1640879320,"is_pvip":false,"replies":[{"id":"119794","content":"有的，我们可以通过元编程来解决。这个问题我会记录下来，后面找机会跟大家分享一下。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640913223,"ip_address":"","comment_id":328782,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18820748504","product_id":100103401,"comment_content":"请教老师，kotlin对象的深拷贝有什么优雅的写法吗","like_count":5,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542951,"discussion_content":"有的，我们可以通过元编程来解决。这个问题我会记录下来，后面找机会跟大家分享一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640913223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328530,"user_name":"JakePrim","can_delete":false,"product_type":"c1","uid":1151981,"ip_address":"","ucode":"ACA227B7610D84","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/ed/9cc44242.jpg","comment_is_top":false,"comment_ctime":1640764446,"is_pvip":false,"replies":[{"id":"119728","content":"并不是说所有的密封类都要用data class，只是在这个案例当中，我们是用来承载网络请求数据的。既然是承载数据，当然就要用数据类啦！至于如何正确定义密封类，其实文章当中的这种模式就是最常见，也是最使用的方式。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640828471,"ip_address":"","comment_id":328530,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18820633630","product_id":100103401,"comment_content":"密封类不是很理解，为什么密封类的内部 要使用data class 呢？如何正确的定义密封类？","like_count":5,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542691,"discussion_content":"并不是说所有的密封类都要用data class，只是在这个案例当中，我们是用来承载网络请求数据的。既然是承载数据，当然就要用数据类啦！至于如何正确定义密封类，其实文章当中的这种模式就是最常见，也是最使用的方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640828471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1075334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/68/86/348be7f8.jpg","nickname":"Lingo","note":"","ucode":"82ECA2E0533B78","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546001,"discussion_content":"如果一个类的子类是固定的那几个，那么就可以设计成密封类，when语句可以支持密封类的完备性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642125648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1356689,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b3/91/b01d99af.jpg","nickname":"哈哈","note":"","ucode":"A48D48DEBE5701","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544998,"discussion_content":"密封类和枚举这一块我也没看明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641798903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330799,"user_name":"白乾涛","can_delete":false,"product_type":"c1","uid":1339841,"ip_address":"","ucode":"0C704B0B90C8D7","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","comment_is_top":false,"comment_ctime":1642166796,"is_pvip":false,"replies":[{"id":"120661","content":"是的，这样一来，对开源库的维护者来说，有了更高的要求，我们需要明确自己的代码中哪些是封闭的，哪些是开放的。<br><br>表面上看，Kotlin变得麻烦了。不过，反过来看，这难道不就是维护者本来就该弄清楚的问题吗？其实，这个问题一直存在，只是因为Java选择忽视这个问题，而Kotlin的选择是面对这个问题。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642225216,"ip_address":"","comment_id":330799,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14527068684","product_id":100103401,"comment_content":"Kotlin 的继承是默认封闭的，这样岂不是要经常修改基础类吗？特别是对于那些开源库来说","like_count":4,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546201,"discussion_content":"是的，这样一来，对开源库的维护者来说，有了更高的要求，我们需要明确自己的代码中哪些是封闭的，哪些是开放的。\n\n表面上看，Kotlin变得麻烦了。不过，反过来看，这难道不就是维护者本来就该弄清楚的问题吗？其实，这个问题一直存在，只是因为Java选择忽视这个问题，而Kotlin的选择是面对这个问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642225217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1329072,"avatar":"https://static001.geekbang.org/account/avatar/00/14/47/b0/8c301d00.jpg","nickname":"H.ZWei","note":"","ucode":"48FFADE574C327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":556088,"discussion_content":"是不是更符合开闭原则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647213001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546201,"ip_address":""},"score":556088,"extra":""}]}]},{"had_liked":false,"id":328450,"user_name":"张国庆","can_delete":false,"product_type":"c1","uid":1121274,"ip_address":"","ucode":"7529A4AAB65D4C","user_header":"https://static001.geekbang.org/account/avatar/00/11/1b/fa/44a3e48a.jpg","comment_is_top":false,"comment_ctime":1640743041,"is_pvip":false,"replies":[{"id":"119742","content":"没太理解你的意思，你指的是回调地狱的问题吗？如果是，那就可以考虑使用协程。如果是其他方面的嵌套，那么大概率可以通过优化软件架构的方式来解决。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640829288,"ip_address":"","comment_id":328450,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10230677633","product_id":100103401,"comment_content":"请教老师，kotlin作用域函数嵌套引起圈复杂度过高有什么好的解决方法么？","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542707,"discussion_content":"没太理解你的意思，你指的是回调地狱的问题吗？如果是，那就可以考虑使用协程。如果是其他方面的嵌套，那么大概率可以通过优化软件架构的方式来解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640829288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335848,"user_name":"百炼钢","can_delete":false,"product_type":"c1","uid":1590695,"ip_address":"","ucode":"71A20C3C0B2978","user_header":"https://static001.geekbang.org/account/avatar/00/18/45/a7/da9b2d2b.jpg","comment_is_top":false,"comment_ctime":1645717585,"is_pvip":false,"replies":[{"id":"122720","content":"枚举类、密封类的特点就是when表达式“自动判断完备”，咱们自己写的继承类，是不具备这一优势的。别小看“自动判断完备”，它的作用很大。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645747047,"ip_address":"","comment_id":335848,"utype":1}],"discussion_count":7,"race_medal":0,"score":"5940684881","product_id":100103401,"comment_content":"密封类的设计目的没太明白，可能我对java的枚举理解不深，导致老师用枚举来解释密封类，让我更糊涂了…    自问：密封类设计目的是为了辅助 when 表达式的使用吗？按文中的例子也可以用继承来实现，那么密封类的作用就是简化代码吗？","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553127,"discussion_content":"枚举类、密封类的特点就是when表达式“自动判断完备”，咱们自己写的继承类，是不具备这一优势的。别小看“自动判断完备”，它的作用很大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645747047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":5,"child_discussions":[{"author":{"id":1590695,"avatar":"https://static001.geekbang.org/account/avatar/00/18/45/a7/da9b2d2b.jpg","nickname":"百炼钢","note":"","ucode":"71A20C3C0B2978","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":553143,"discussion_content":"多谢老师解答，我要好好揣摩下“自动判断完备”（牢记）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645753418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553127,"ip_address":""},"score":553143,"extra":""},{"author":{"id":1329072,"avatar":"https://static001.geekbang.org/account/avatar/00/14/47/b0/8c301d00.jpg","nickname":"H.ZWei","note":"","ucode":"48FFADE574C327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":556089,"discussion_content":"如果某个场景的类型有很多，用密封类来区别，比起Int常量就更占内存了，这个算是缺陷吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647213442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553127,"ip_address":""},"score":556089,"extra":""},{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1590695,"avatar":"https://static001.geekbang.org/account/avatar/00/18/45/a7/da9b2d2b.jpg","nickname":"百炼钢","note":"","ucode":"71A20C3C0B2978","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574852,"discussion_content":"自动判断完备可以防止漏写条件导致业务逻辑出错，尤其是在多处使用时","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1654408265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553143,"ip_address":""},"score":574852,"extra":""}]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575938,"discussion_content":"对于枚举类和密封类，编译器通过分析能够保证如果when语句漏掉了某些条件，会编译失败，这样就能避免不完备的逻辑错误了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655198045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330800,"user_name":"白乾涛","can_delete":false,"product_type":"c1","uid":1339841,"ip_address":"","ucode":"0C704B0B90C8D7","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","comment_is_top":false,"comment_ctime":1642166816,"is_pvip":false,"replies":[{"id":"120662","content":"按照顺序的，这一点我们写一个简单的代码就可以验证。<br><br><br>&#47;&#47; 不推荐，<br>val (age, name) = Person1(&quot;tom&quot;, 1)<br>println(age)<br>println(name)<br><br>但是，正确做法，我们应该是让变量名与顺序都一致。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642225588,"ip_address":"","comment_id":330800,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5937134112","product_id":100103401,"comment_content":"val (name, age) = tom<br><br>这里的顺序是和构造方法里面的一致呢<br>还是不需要一致，只需要变量名一样呢","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546203,"discussion_content":"按照顺序的，这一点我们写一个简单的代码就可以验证。\n\n\n// 不推荐，\nval (age, name) = Person1(&#34;tom&#34;, 1)\nprintln(age)\nprintln(name)\n\n但是，正确做法，我们应该是让变量名与顺序都一致。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642225588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330131,"user_name":"A Lonely Cat","can_delete":false,"product_type":"c1","uid":2885349,"ip_address":"","ucode":"382EBFDD8E5115","user_header":"https://static001.geekbang.org/account/avatar/00/2c/06/e5/51ef9735.jpg","comment_is_top":false,"comment_ctime":1641808105,"is_pvip":false,"replies":[{"id":"120311","content":"写文章的时候为了突出重点忘记兼顾语法了，我重新调整一下。感谢你指出这个问题，你让这个课程变得更好了。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641872157,"ip_address":"","comment_id":330131,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5936775401","product_id":100103401,"comment_content":"相应地，如果想在 Kotlin 当中定义一个普通的内部类，我们需要在嵌套类的前面加上 inner 关键字。<br><br>这下面的代码有误，IDE 会报错，我猜朱老师是想写下面这段代码吧<br> init {<br>        println(name)<br>        foo()<br>  }","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545195,"discussion_content":"写文章的时候为了突出重点忘记兼顾语法了，我重新调整一下。感谢你指出这个问题，你让这个课程变得更好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641872157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330045,"user_name":"郑峰","can_delete":false,"product_type":"c1","uid":1112517,"ip_address":"","ucode":"4D4C0C020E507C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/c5/95b97dfa.jpg","comment_is_top":false,"comment_ctime":1641768065,"is_pvip":false,"replies":[{"id":"120252","content":"嗯，不错。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641791485,"ip_address":"","comment_id":330045,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5936735361","product_id":100103401,"comment_content":"You can declare properties in interfaces. A property declared in an interface can either be abstract or provide implementations for accessors. Properties declared in interfaces can&#39;t have backing fields, and therefore accessors declared in interfaces can&#39;t reference them.","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544966,"discussion_content":"嗯，不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641791485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329313,"user_name":"l-zesong","can_delete":false,"product_type":"c1","uid":2880199,"ip_address":"","ucode":"7BE93E5AAA3616","user_header":"https://static001.geekbang.org/account/avatar/00/2b/f2/c7/c5855ff3.jpg","comment_is_top":false,"comment_ctime":1641281830,"is_pvip":false,"replies":[{"id":"119943","content":"数据类提供的是浅拷贝，深拷贝要用其他办法实现。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641303920,"ip_address":"","comment_id":329313,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5936249126","product_id":100103401,"comment_content":"copy函数是深克隆吗？","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543792,"discussion_content":"数据类提供的是浅拷贝，深拷贝要用其他办法实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641303920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333440,"user_name":"Barry","can_delete":false,"product_type":"c1","uid":1134793,"ip_address":"","ucode":"1715EC3977A1D5","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/c9/1bec2c98.jpg","comment_is_top":false,"comment_ctime":1644369444,"is_pvip":true,"replies":[{"id":"121874","content":"这就是Kotlin语法的灵活之处，具体你看看后面的加餐课程：“不变性思维”。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1644414612,"ip_address":"","comment_id":333440,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1644369444","product_id":100103401,"comment_content":"class Person(val name: String, var age: Int) {<br>     val isAdult <br>        get() = age &gt;= 18<br>}<br>-----------<br>age是可变的，在age从17变到18过程中，isAdult就从false变成true了。而isAdult这里用val修饰，是不是用错了，而应该用var修饰？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550196,"discussion_content":"这就是Kotlin语法的灵活之处，具体你看看后面的加餐课程：“不变性思维”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644414612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3017252,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/0a/24/4e054b84.jpg","nickname":"🎶好名字🍒","note":"","ucode":"57072FBE55485F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576486,"discussion_content":"前面说过，这种写法的isAdult并不会被编译成一个属性占用内存，而是会编译成一个方法函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655590641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329567,"user_name":"魏全运","can_delete":false,"product_type":"c1","uid":1090798,"ip_address":"","ucode":"3FED702C724E2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","comment_is_top":false,"comment_ctime":1641431246,"is_pvip":false,"replies":[{"id":"120163","content":"其实，Kotlin这么绕的原因，还是为了兼容Java1.6。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641607631,"ip_address":"","comment_id":329567,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641431246","product_id":100103401,"comment_content":"接口成员属性实际编译时都会转成方法，所以如果是Java继承该接口必须实现getter(val 属性)和setter(var 属性)，而如果实现类是kotlin 的则必须定义接口属性为成员变量且添加override 关键字，kotlin的语法糖自动实现了接口属性的getter 和setter 方法。总体使用起来还是很麻烦的，没理解什么场景会需要这样用。","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544621,"discussion_content":"其实，Kotlin这么绕的原因，还是为了兼容Java1.6。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641607632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329347,"user_name":"阿白","can_delete":false,"product_type":"c1","uid":1189180,"ip_address":"","ucode":"7782D3879E755B","user_header":"https://static001.geekbang.org/account/avatar/00/12/25/3c/b28426b8.jpg","comment_is_top":false,"comment_ctime":1641295520,"is_pvip":false,"replies":[{"id":"119966","content":"笔误了，真够细心的，厉害。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641351288,"ip_address":"","comment_id":329347,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641295520","product_id":100103401,"comment_content":"open class Person() { <br>    abstract fun walk()<br>}<br>文档中这一处示例错了，抽象方法只能定义在抽象类里","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543913,"discussion_content":"笔误了，真够细心的，厉害。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641351288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329201,"user_name":"Hongyi Yan","can_delete":false,"product_type":"c1","uid":2878100,"ip_address":"","ucode":"133CDBCC3659E7","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ea/94/77a8acdf.jpg","comment_is_top":false,"comment_ctime":1641207111,"is_pvip":false,"replies":[{"id":"119906","content":"没错哈！","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641261081,"ip_address":"","comment_id":329201,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1641207111","product_id":100103401,"comment_content":"kotlin接口的属性也是静态的吧","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543653,"discussion_content":"没错哈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641261081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2621394,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ff/d2/204edd23.jpg","nickname":"WWWarmFly","note":"","ucode":"DBACC196FADE65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552406,"discussion_content":"请教老师，kotlin接口属性不是翻译为接口方法吗？怎么会是静态的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645451618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329030,"user_name":"夜月","can_delete":false,"product_type":"c1","uid":1121740,"ip_address":"","ucode":"0C05F42E94F76C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Iofqk26ibmjFxAZKRibgUmwc9p5RDDArr9Jt0NTrwTKOhtPTuuia77OxOwyEUpeqp2fvU5HPpY8sK0vBejJNA3ib3w/132","comment_is_top":false,"comment_ctime":1641036730,"is_pvip":false,"replies":[{"id":"119883","content":"是的。所以我们才把密封类比作：枚举+类。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641172186,"ip_address":"","comment_id":329030,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641036730","product_id":100103401,"comment_content":"感觉正常的抽象类也能实现那个when的逻辑，就是要多写一个else而已，不知道理解对不对。","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543466,"discussion_content":"是的。所以我们才把密封类比作：枚举+类。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641172186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328515,"user_name":"7Promise","can_delete":false,"product_type":"c1","uid":2879220,"ip_address":"","ucode":"BF7C7F042E51F3","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ee/f4/27a5080a.jpg","comment_is_top":false,"comment_ctime":1640760365,"is_pvip":false,"replies":[{"id":"119730","content":"很好！欢迎其他同学来补充！","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640828548,"ip_address":"","comment_id":328515,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1640760365","product_id":100103401,"comment_content":"接口的属性不可以重写setter方法","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542693,"discussion_content":"很好！欢迎其他同学来补充！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640828548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2881073,"avatar":"","nickname":"Geek_70c6da","note":"","ucode":"F5A1AFCE4E71D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548253,"discussion_content":"var  的必须同时重写getter和setter吧\nval的重写getter","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643100848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328460,"user_name":"$Kotlin","can_delete":false,"product_type":"c1","uid":2148188,"ip_address":"","ucode":"098E9C8F60D865","user_header":"https://static001.geekbang.org/account/avatar/00/20/c7/5c/94cb3a1a.jpg","comment_is_top":false,"comment_ctime":1640743836,"is_pvip":false,"replies":[{"id":"119745","content":"每周的一、三、五更新哈~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1640829371,"ip_address":"","comment_id":328460,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640743836","product_id":100103401,"comment_content":"棒棒棒，昨天刚催更，今天就有了～","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542710,"discussion_content":"每周的一、三、五更新哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640829371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}