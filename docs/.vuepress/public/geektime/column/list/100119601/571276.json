{"id":571276,"title":"12｜组件表与里（上）：数据是如何在 React 组件之间流转的？","content":"<p>你好，我是宋一玮，欢迎回到React应用开发的学习。</p><p>上节课我们学习了React的事件处理，理解了React事件是标准化封装过的合成事件。在这基础之上，还学习了受控组件和事件冒泡/捕获的概念，并为 <code>oh-my-kanban</code> 项目加入了实用的卡片拖拽功能。其间我们也不忘与浏览器原生DOM事件作对比。</p><p>到目前为止，包括生命周期、Hooks、事件处理，你已经基本了解了可以在哪些位置编写组件逻辑代码。那么当你在React应用中写了多段逻辑代码后，代码之间是怎么串联起来的？反过来说，怎样才能把每段代码写在它合适的地方，让它们各司其职，支撑应用跑起来呢？</p><p>接下来我们会用两节课的时间，把视野从单个React组件中拓展开来，看看<strong>组件与组件之间的分工和交互，</strong>从而帮助你解决刚才提出的问题。</p><p>我把这两节课分别称为组件的“面子”和“里子”。这节课的重点，是React的<strong>单向数据流</strong>。当你理解了在React的设计哲学中数据应该如何流转，就会对如何设计props和state了然于心。</p><p>在学习概念的基础上，也请你跟随我，从数据流的视角重新梳理早在第5节课就基本定型的 <code>oh-my-kanban</code> 各组件，进行一次<strong>大重构：对组件文件进行拆分，并根据需要调整各组件的props和state</strong>。同时我们也会学习React另一个与数据流相关的概念——context。</p><!-- [[[read_end]]] --><p>顺带预告一下，在下节课，我们会参照<code>oh-my-kanban</code> 重构前后的组件层次结构，进一步讲解如何用面向接口编程的思路来设计开发React组件和应用。</p><p>下面开始这节课的内容。</p><h2>什么是数据流？</h2><p>提到数据流，要先提一下<strong>函数响应式编程</strong>（Functional Reactive Programming），顾名思义，函数响应式编程是一种利用函数式编程的部件进行响应式编程的编程范式。</p><p><strong>数据流</strong>（Data Flow）则是其中响应式编程的重要概念，响应式编程将程序逻辑建模成为在<strong>运算（Operation）之间流动的数据及其变化</strong>。</p><p>举个最简单的例子，对于 <code>b = a * 2</code> 这个赋值语句，如果把 <code>a * 2</code> 定义为一个运算，那么如果流动进来的 <code>a</code> 发生了改变，则 <code>b</code> 会自动响应前者的变化。</p><p>估计你看到这个例子，马上就会想到React的设计哲学 <code>UI = f(state)</code> ，比如一个函数组件 <code>({ a }) =&gt; (&lt;div&gt;{ a * 2 }&lt;/div&gt;)</code> ，只要prop属性 <code>a</code> 发生变化，组件渲染的 <code>&lt;div&gt;</code> 包含的内容就会自动变化。</p><p>当然，一个程序往往会包含多个运算，当数据流经过多个运算时，每个运算只负责自己的部分，这样的数据处理过程有点像是工厂流水线。那类比到React应用呢？</p><p>我们知道React的开发单元是组件，多个组件在运行时会形成一颗组件树，根组件会沿着子组件树传递数据。对于任意一条从根组件到叶子节点组件的路径，都可以看作是一条工厂流水线。而每个组件都是流水线上的一道工序，对流过的数据各取所需，完成本职工作。</p><h2>React的数据流包含哪些数据？</h2><p>React的数据流主要包含了三种数据：<strong>属性props、状态state和上下文context</strong>。这三个概念在React中算是专有名词，为避免歧义，我在本课程中将沿用它们的英文名称。我们先来系统地看一下props。</p><h3>Props</h3><p>自定义React组件接受一组输入参数，用于改变组件运行时的行为，这组参数就是props。</p><p>在声明函数组件时，函数的第一个参数就是props。以下两种写法都很常见：</p><ul>\n<li>一个是在组件内部读取props对象的属性；</li>\n<li>另一个是通过ES6的解构赋值语法（Destructuring Assignment）展开函数参数，直接在组件内部读取单个prop变量。</li>\n</ul><p>这两种写法本质上都是相同的：</p><pre><code class=\"language-javascript\">// 1\nfunction MyComponent(props) {\n  return (\n    &lt;ul&gt;\n      &lt;li&gt;{props.prop1}&lt;/li&gt;\n      &lt;li&gt;{props.prop2}&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n\n// 2\nfunction MyComponent({ prop1, prop2 }) {\n  return (\n    &lt;ul&gt;\n      &lt;li&gt;{prop1}&lt;/li&gt;\n      &lt;li&gt;{prop2}&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n</code></pre><p>第二种写法有些很方便的功能，比如为prop设置默认值：</p><pre><code class=\"language-javascript\">function MyComponent({ prop1, prop2, optionalProp = 'default' }) {\n</code></pre><p>以及利用ES2018的Rest Properties语法，将解构剩余属性赋值给一个变量，便于透传给子元素：</p><pre><code class=\"language-javascript\">function MyComponent({ prop1, prop2, ...restProps }) {\n  return (\n    &lt;ul {...restProps}&gt;\n      &lt;li&gt;{prop1}&lt;/li&gt;\n      &lt;li&gt;{prop2}&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n</code></pre><p>顺带一提，类组件的props可以通过 <code>this.props</code> 读取：</p><pre><code class=\"language-javascript\">class MyLegacyClassComponent extends React.Component {\n  render() {\n    return (\n      &lt;ul&gt;\n        &lt;li&gt;{this.props.prop1}&lt;/li&gt;\n        &lt;li&gt;{this.props.prop2}&lt;/li&gt;\n      &lt;/ul&gt;\n    );\n  }\n}\n</code></pre><p>需要注意的是，无论是哪种写法，props都是<strong>不可变</strong>的，不能在组件内改写从外面传进来的props。</p><p>上面了解了如何声明props，再看看如何赋值。在其他组件中使用子组件时，可以通过JSX语法为子组件的props赋值：</p><pre><code class=\"language-javascript\">const ParentComponent = () =&gt; (\n  &lt;MyComponent prop1=\"文本\" prop2={123} booleanProp={false}\n    onClick={(evt) =&gt; {console.log('clicked')}} /&gt;\n);\n</code></pre><p>当prop值为布尔值的 <code>true</code> 时，JSX可以简写成  <code>&lt;MyComponent booleanProp /&gt;</code> 。此外还有一个特殊的props：代表子元素的<code>children</code>。</p><p>请回忆一下你在第5节课拆分 <code>oh-my-kanban</code> 项目组件时，在 <code>&lt;KanbanBoard&gt;</code> 组件的JSX闭合标签中加入子元素 <code>&lt;KanbanColumn&gt;</code> ，子元素会被赋值给该组件props里的 <code>children</code> 属性，在<code>&lt;KanbanBoard&gt;</code> 组件的函数内部即可使用这个 <code>props.children</code>。<code>&lt;KanbanColumn&gt;</code> 与 <code>&lt;KanbanCard&gt;</code> 之间也是类似的。</p><p>以及两个形式上像props，但并不是props的属性：</p><ul>\n<li>形成列表的子元素的 <code>key</code> ，我们在第6节课学习过。</li>\n<li>引用DOM元素的 <code>ref</code> ，我们在第9节课学习过。</li>\n</ul><p><code>key</code> 和 <code>ref</code> 的特殊之处还在于，当子元素是自定义组件时，在子组件内部是不能读取传给它的 <code>key</code> 或 <code>ref</code> 值的，如果尝试读取，React则会在控制台提示，也就是 <code>Warning: KanbanCard: </code>key<code>is not a prop. Trying to access it will result in</code>undefined<code> being returned</code>；如果确实需要在子组件中访问 <code>key</code> 或 <code>ref</code> 的值，就得用另一个额外的prop传进来。</p><p>说回数据流，<strong>props的数据流向是单向的，只能从父组件流向子组件</strong>，而不能从子组件流回父组件，也不能从当前组件流向平级组件。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/7b/b0/7babcd38e678fa204a0afb9b423a91b0.jpg?wh=1142x687\" alt=\"\"></p><h3>State</h3><p>在props之外，组件也可以拥有自己的数据。对于一个函数而言，“自己的数据”一般是指函数内声明的变量。</p><p>而对一个函数组件来说，因为每次渲染函数体都会重新执行，函数体内变量也会被重新声明，如果需要组件在它的生命周期期间拥有一个“稳定存在”的数据，那就需要为组件引入一个专有的概念，即state。</p><p>在函数组件中使用state，需要调用 <code>useState</code> / <code>useReducer</code>  Hooks。这两个Hooks在第9节课刚学习过，在此只放一段例子代码，不再赘述。</p><pre><code class=\"language-javascript\">function MyComponent() {\n  const [state1, setState1] = useState('文本');\n  const [state2, setState2] = useState(123);\n  const handleClick = () =&gt; {\n    setState1('更新文本');\n    setState2(456);\n  };\n  return (\n    &lt;ul&gt;\n      &lt;li&gt;{state1}&lt;/li&gt;\n      &lt;li&gt;{state2}&lt;/li&gt;\n      &lt;li&gt;&lt;button onClick={handleClick}&gt;更新state&lt;/button&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n</code></pre><p>姑且提一下类组件的state，在类组件内可以通过 <code>this.state</code> 读取state，通过 <code>this.setState</code> 修改state，唯一例外是在类组件构造函数里，可以通过赋值 <code>this.state</code> 的方式设置初始值，与Hooks的state不同，类组件的state总是以对象形式存在：</p><pre><code class=\"language-javascript\">class MyLegacyClassComponent extends React.Component {\n  constructor() {\n    this.state = { state1: '文本', state2: 123 };\n  }\n  \n  handleClick = () =&gt; {\n    this.setState({ state1: '更新文本', state2: 456 })\n  }\n\n  render() {\n    return (\n      &lt;ul&gt;\n        &lt;li&gt;{this.state.state1}&lt;/li&gt;\n        &lt;li&gt;{this.state.state2}&lt;/li&gt;\n        &lt;li&gt;&lt;button onClick={this.handleClick}&gt;更新state&lt;/button&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    );\n  }\n}\n</code></pre><p>不过需要反复强调的是，state与props一样，也是<strong>不可变</strong>的。需要修改state时，不能直接给state变量赋值，而是必须调用state更新函数，即 <code>setXxx</code> / <code>dispatch</code> 或 <code>this.setState</code> 。</p><p>当组件的state发生改变时，组件将重新渲染。那什么才算是改变呢？从底层实现来看，React框架是用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\">Object.is()</a> 来判断两个值是否不同的。尤其注意，当新旧值都是对象、数组、函数时，判断依据是它们的值引用是否不同。</p><p>对同一个对象属性的修改不会改变对象的值引用，对同一个数组成员的修改也不会改变数组的值引用，在React中都不认为是变化。所以在更新这类state时，需要新建对象、数组：</p><pre><code class=\"language-javascript\">function MyComponent() {\n  const [obj, setObj] = useState({ a: '文本', b: true });\n  const [arr, setArr] = useState([1, 2, 3]);\n  const handleClick = () =&gt; {\n    setObj({...obj, a: '更新文本'}); // ...对象展开语法\n    setArr([...arr, 4, 5, 6]); // ...数组展开语法\n  };\n  return (\n    &lt;ul&gt;\n      &lt;li&gt;{obj.a}&lt;/li&gt;\n      &lt;li&gt;{arr.join(',')}&lt;/li&gt;\n      &lt;li&gt;&lt;button onClick={handleClick}&gt;更新state&lt;/button&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n</code></pre><p>还有要注意的就是state更新的<strong>异步性</strong>和<strong>自动批处理</strong>。如果印象有些模糊了，那请你务必复习一下第9节课的内容。</p><p>再来看看state的数据流向，当读取和更改state都发生在同一组件中时，state的流动仅限于当前组件之内。</p><p>如果希望由子组件或后代组件来更改state，需要将对应的state更新函数包在另一个函数，比如事件处理函数中，然后将函数以props或context的方式传给子组件或后代组件，由它们来决定调用的时机和参数。当这个函数被调用，state被更新，当前组件则会重新传染。</p><p>如下图所示，可以帮助你理解：</p><p><img src=\"https://static001.geekbang.org/resource/image/75/0b/7595dddd7a3164b7b6ce859b8bcc800b.jpg?wh=1142x759\" alt=\"\"></p><h3>Context</h3><p>“终于”，你也许会感叹，“终于讲到context了”。React很早就引入了context这个概念，它的API也经历过新老版本的更迭，用于组件跨越多个组件层次结构，向后代组件传递和共享“全局”数据。</p><p>使用context分三个步骤：</p><ol>\n<li>调用 <code>React.createContext</code> 方法创建 <code>Context</code> 对象，如 <code>MyContext</code> ：</li>\n</ol><pre><code class=\"language-javascript\">const MyContext = React.createContext('没路用的初始值');\n</code></pre><ol start=\"2\">\n<li>在组件JSX中使用 <code>&lt;MyContext.Provider&gt;</code> 组件，定义 <code>value</code> 值，并将子组件声明在前者的闭合标签里：</li>\n</ol><pre><code class=\"language-javascript\">function MyComponent() {\n  const [state1, setState1] = useState('文本');\n  const handleClick = () =&gt; {\n    setState1('更新文本');\n  };\n  return (\n    &lt;MyContext.Provider value={state1}&gt;\n      &lt;ul&gt;\n        &lt;MyChildComponent /&gt;\n        &lt;li&gt;&lt;button onClick={handleClick}&gt;更新state&lt;/button&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/MyContext.Provider&gt;\n  );\n}\n</code></pre><ol start=\"3\">\n<li>在子组件或后代组件中使用 <code>useContext</code> Hook获取 <code>MyContext</code> 的值，这个组件就成为MyContext的消费者（Consumer）：</li>\n</ol><pre><code class=\"language-javascript\">function MyChildComponent() {\n  return (\n    &lt;MyGrandchildComponent /&gt;\n  );\n}\n\nfunction MyGrandchildComponent() {\n  const value = useContext(MyContext);\n  return (\n    &lt;li&gt;{value}&lt;/li&gt;\n  );\n}\n</code></pre><p>其中<code>MyContext.Provider</code> 是可以嵌套使用的。<code>MyGrandchildComponent</code> 组件会去到组件树，从它的祖先节点中找到离它最近的 <code>MyContext.Provider</code> 即 <code>MyComponent</code> ，读取后者的 <code>value</code> 值；当 <code>MyComponent</code> 的 <code>state1</code> ，也就是 <code>MyContext.Provider</code> 的 <code>value</code> 值发生更改时，会通知到它后代组件中所有消费者组件重新渲染。</p><p>Context.Provider的value值也可以传一个对象进去，但要注意写法，避免在组件重新渲染时反复创建新的对象，比如利用state或 <code>useMemo</code> ：</p><pre><code class=\"language-javascript\">// 不要这样写\nfunction MyComponent() {\n  const [state1, setState1] = useState('文本');\n  // ...\n  return (\n    &lt;MyContext.Provider value={{ key1: state1 }}&gt;\n      &lt;MyChildComponent /&gt;\n    &lt;/MyContext.Provider&gt;\n  );\n}\n\n// 可以利用state\nfunction MyComponent() {\n  const [obj, setObj] = useState({ key1: '文本' })\n  // ...\n  return (\n    &lt;MyContext.Provider value={obj}&gt;\n      &lt;MyChildComponent /&gt;\n    &lt;/MyContext.Provider&gt;\n  );\n}\n\n// 也可以利用useMemo\nfunction MyComponent() {\n  const [state1, setState1] = useState('文本');\n  const obj = useMemo(() =&gt; ({ key1: state1 }), [state1]);\n  // ...\n  return (\n    &lt;MyContext.Provider value={obj}&gt;\n      &lt;MyChildComponent /&gt;\n    &lt;/MyContext.Provider&gt;\n  );\n}\n</code></pre><p>从数据流的角度看，<strong>context的数据流向也是单向的，只能从声明了</strong> <code>Context.Provider</code> <strong>的当前组件传递给它的子组件树</strong>，即子组件和后代组件。而不能向父组件或祖先组件传递，也不能向当前子组件树之外的其他分支组件树传递。正如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/1f/cc/1fec023c27077010ef7e61dd1960e6cc.jpg?wh=1000x563\" alt=\"\"></p><p>至此，我们介绍完了props、state和context这三个概念。其中props和state，我们已经在 <code>oh-my-kanban</code> 中做了丰富的实践，至于context，我们下节课会利用它为看板加入管理员功能。接下来，仍然让我们将注意力集中在数据流上。</p><h2>React单向数据流</h2><p>刚才介绍的props、state和context三种数据，共同组成了React组件的数据流。早在第5节课我们就已经学习过，React是一种声明式的前端框架，在React的数据流上也体现了这一点。在典型场景下，你可以通过<strong>声明这三种数据来设计React应用的数据流，进而控制应用的交互和逻辑</strong>。</p><p>只有这三种数据的变更会自动通知到React框架，触发组件必要的重新渲染。当你的数据流中混入了不属于它们其中任意一种的数据，就要小心，这种<strong>跳出“三界之外”的数据很有可能带来Bug</strong>，比如数据改变了但组件并不重新渲染。</p><p>这种Bug其实并不难定位，但当项目代码比较多，逻辑变得复杂时，你还是有可能会搞混数据的来源，花不少时间去Debug。顺便提一下，“三界之外”这个说法来自于我的一位同事，当时她正是遇到了这类Bug，我们一起调试了好久才恍然大悟。</p><p>虽然说props、state和context是不同的概念，但从一棵组件树的多个组件来看，同一条数据在引用不变的前提下，在传递过程中却可以具有多重身份。</p><p>比如，一条数据最初来自于组件A的state，通过props传递给子组件B后就成为了组件B的prop。再比如，另一条数据来自于组件A的state，通过在A中声明context传给了子组件树，子组件B的子组件C消费了这个context值。</p><p>从三者分别的流向可知，React整体的数据流也是单向的，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/02/e1/0221e1ce4ae5e2afc0650eb419ac27e1.jpg?wh=1142x642\" alt=\"\"></p><h2>基于数据流再做一次组件拆分</h2><p>好了，讲完了React数据流的概念，我们来到了约定好的 <code>oh-my-kanban</code> “<strong>大重构</strong>”。</p><p>首先强调一点，大部分时候我们<strong>不应该为了重构而重构，除非我们很清楚重构的目标范围、预期收益、成本和存在的风险</strong>。</p><p>这次的重构当然在一定程度上是为了教学目的，不过我还是会列（xiā）举（biān）一些重构<code>oh-my-kanban</code> 的动机和目标：</p><ol>\n<li>目前300多行源代码集中在 <code>src/App.js</code> 中，希望重构后能<strong>分散</strong>到多个源文件中；</li>\n<li>目前主要业务逻辑都集中在 <code>App</code> 组件上，希望重构后能<strong>分摊</strong>到其他组件；</li>\n<li>将CSS-in-JS样式代码直接写在JSX标签上有点喧宾夺主，希望重构后能<strong>独立</strong>些。</li>\n</ol><p>针对第二个目标，在重构过程中我们会遇到一系列与数据流相关的决策。这些重构步骤和决策思路我们会留到下节课，而这节课我们会先完成第一个和第三个重构目标，为下节课的重构工作做好充分准备。</p><p>好的，我们开始重构。车速会比较快，希望你能跟紧。</p><h2>重构第一步：抽取组件到独立文件</h2><p>我们将利用VSCode的重构功能来减少重构的工作量。在 <code>src/App.js</code> 中，光标选中 <code>KanbanBoard</code> 组件的全部代码：</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/yy/d1b7639a24f6cd8f549d069f614c57yy.png?wh=1300x800\" alt=\"图片\"></p><p>接着，按快捷键 <code>⌃⇧R</code> 或右键打开重构菜单，选择“移动到新文件”：</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/08/8c9c465faa88069eec252e8e80397808.png?wh=1300x960\" alt=\"图片\"></p><p>此时，VSCode会自动创建一个新文件 <code>src/KanbanBoard.js</code> ，将这段代码移过去，并在 <code>src/App.js</code> 中加入一行 <code>import</code> 语句导入 <code>KanbanBoard</code> 组件：</p><p><img src=\"https://static001.geekbang.org/resource/image/09/1e/0992a59f59c75b87c8020cffa73bd81e.png?wh=1920x1004\" alt=\"图片\"></p><p>根据社区常见的代码约定（Convention），我们希望与文件名同名的组件是这个文件的默认导出项。让我们再做两个重构操作。首先选中 <code>KanbanBoard</code> 变量名，打开重构菜单，选择“转换为命名函数”，这样可以保证组件在React开发者工具中有显示名称：</p><p><img src=\"https://static001.geekbang.org/resource/image/48/8e/483deba71864a263b4b8fae16ff2448e.png?wh=1300x900\" alt=\"图片\"></p><p>然后马上对这个命名函数再做一次重构，“将命名导出项转换为默认导出项”：</p><p><img src=\"https://static001.geekbang.org/resource/image/58/eb/586bdd3830780aa713edce1739ea4beb.png?wh=1300x800\" alt=\"图片\"></p><p>可以回头看一下 <code>src/App.js</code> ，导入语句也自动更新了。继续选中css属性内的所有内容，打开重构菜单，选择“抽取为模块范围的常量”，取个好听的变量名（关于如何起好变量名，建议参考Martin Fowler大神的《重构》）：</p><p><img src=\"https://static001.geekbang.org/resource/image/06/af/0606f908e2e4c307af7ce8aec3afe4af.png?wh=1300x800\" alt=\"图片\"></p><p>稍微修正一下代码缩进，<code>src/KanbanBoard.js</code> 目前的代码如下：</p><pre><code class=\"language-javascript\">import React from 'react';\nimport { css } from '@emotion/react';\n\nconst kanbanBoardStyles = css`\n&nbsp; flex: 10;\n&nbsp; display: flex;\n&nbsp; flex-direction: row;\n&nbsp; gap: 1rem;\n&nbsp; margin: 0 1rem 1rem;\n`;\n\nexport default function KanbanBoard({ children }) {\n&nbsp; return (\n&nbsp; &nbsp; &lt;main css={kanbanBoardStyles}&gt;{children}&lt;/main&gt;\n&nbsp; );\n}\n</code></pre><p>恭喜你成功拆分出来第一个独立组件JS，代码看着很清爽！跑 <code>npm start</code> 验证一下：</p><p><img src=\"https://static001.geekbang.org/resource/image/db/83/db1906cc8912681b0e5ef1f06f55c383.png?wh=1920x1030\" alt=\"图片\"></p><p>诶？样式没生效？不要惊慌，还记得我们第7节课引入 <code>emotion</code> 框架时，为组件加入的 <code>JSX Pragma</code> （编译指示）吗？这里也需要：</p><pre><code class=\"language-diff\">+/** @jsxImportSource @emotion/react */\n import React from 'react';\n import { css } from '@emotion/react';\n</code></pre><p>保存文件，样式恢复正常了。</p><p>以此类推，请你继续抽取 <code>KanbanColumn</code> 、<code>KanbanCard</code> 、<code>KanbanNewCard</code> 。下面是一些关键代码的提示：</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/e5/5e8b133f370bd99943dc35625815a4e5.png?wh=1920x1487\" alt=\"图片\"></p><p><code>src/KanbanCard.js</code> 的关键代码的提示如下：</p><pre><code class=\"language-javascript\">/** @jsxImportSource @emotion/react */\nimport React, { useEffect, useState } from 'react';\nimport { css } from '@emotion/react';\n\nexport const kanbanCardStyles = css`\n&nbsp; margin-bottom: 1rem;\n&nbsp; /*...省略*/\n`;\nexport const kanbanCardTitleStyles = css`\n&nbsp; min-height: 3rem;\n`;\n\nconst MINUTE = 60 * 1000;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\nconst UPDATE_INTERVAL = MINUTE;\n\nexport default function KanbanCard({ title, status, onDragStart }) {\n&nbsp; const [displayTime, setDisplayTime] = useState(status);\n&nbsp; useEffect(() =&gt; {\n&nbsp; &nbsp; const updateDisplayTime = () =&gt; {/*...省略*/};\n&nbsp; &nbsp; const intervalId = setInterval(updateDisplayTime, UPDATE_INTERVAL);\n&nbsp; &nbsp; // ...省略\n&nbsp; }, [status]);\n&nbsp; // ...省略\n\n&nbsp; return (\n&nbsp; &nbsp; &lt;li css={kanbanCardStyles} draggable onDragStart={handleDragStart}&gt;\n&nbsp; &nbsp; &nbsp; {/*...省略*/}\n&nbsp; &nbsp; &lt;/li&gt;\n&nbsp; );\n}\n</code></pre><p><code>src/KanbanNewCard.js</code> 的关键代码的提示如下：</p><pre><code class=\"language-javascript\">/** @jsxImportSource @emotion/react */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { css } from '@emotion/react';\nimport { kanbanCardStyles, kanbanCardTitleStyles } from './KanbanCard';\n\nexport default function KanbanNewCard({ onSubmit }) {\n</code></pre><p><code>src/KanbanColumn.js</code> 的关键代码的提示如下：</p><pre><code class=\"language-javascript\">/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { css } from '@emotion/react';\n\nconst kanbanColumnStyles = css`\n&nbsp; flex: 1 1;\n&nbsp; display: flex;\n&nbsp; flex-direction: column;\n&nbsp; border: 1px solid gray;\n&nbsp; border-radius: 1rem;\n\n&nbsp; &amp; &gt; h2 {\n&nbsp;   /*...省略*/\n&nbsp; }\n`;\n\nexport default function KanbanColumn({\n&nbsp; children, bgColor, title /*...省略*/\n}) {\n&nbsp; return (\n&nbsp; &nbsp; &lt;section\n&nbsp; &nbsp; &nbsp; {/*...省略*/}\n&nbsp; &nbsp; &nbsp; css={css`\n&nbsp; &nbsp; &nbsp; &nbsp; ${kanbanColumnStyles}\n&nbsp; &nbsp; &nbsp; &nbsp; background-color: ${bgColor};\n&nbsp; &nbsp; &nbsp; `}\n&nbsp; &nbsp; &gt;\n</code></pre><p>好的，<code>src/App.js</code> 还剩150余行代码，重构的第一个目标达成了。同时我们把 <code>css</code> 属性抽取成了模块内的变量，重构的第三个目标也达成了。请务必记得把你的重构成果提交到代码仓库，也欢迎分享到留言区。</p><h2>小结</h2><p>这节课我们先是借助FRP函数响应式编程理解了什么是数据流，然后较为系统地学习了React数据流的三大组成部分，分别是props、state和context。</p><p>除了它们的定义和用法外，还介绍了它们在组件中分别的流向，进而推断出整个React数据流是单向的。在这节课后半部分，我们为 <code>oh-my-kanban</code> 项目提出了重构目标，并完成了抽取组件到独立文件，作为下节课继续重构的基础。</p><p>下节课我们会聊聊如何用面向接口编程思想帮助React应用的设计开发，并结合单向数据流和面向接口思想，继续重构 <code>oh-my-kanban</code> 项目。在下节课结束时，你会发现 <code>oh-my-kanban</code> 项目已经是一个“可用”的React Web应用了！</p><p>最后，附上本节课所涉及的项目源代码：<a href=\"https://gitee.com/evisong/geektime-column-oh-my-kanban/releases/tag/v0.12.0\">https://gitee.com/evisong/geektime-column-oh-my-kanban/releases/tag/v0.12.0</a></p><h2>思考题</h2><ol>\n<li>React的数据流为什么要设计成单向的？如果设计成双向的甚至多向的，会导致什么后果吗？</li>\n<li>我们（终于）要重构 <code>oh-my-kanban</code> 项目了，你对重构的理解是怎样的？你经历过其他哪些软件项目的重构吗？</li>\n</ol><p>欢迎把你的思考和想法分享在留言区，咱们下节课再见！</p>","comments":[{"had_liked":false,"id":357737,"user_name":"🐑","can_delete":false,"product_type":"c1","uid":2189689,"ip_address":"北京","ucode":"DE34B3B14287D1","user_header":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","comment_is_top":true,"comment_ctime":1663587701,"is_pvip":false,"replies":null,"discussion_count":3,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"你好，我是《现代React Web开发实战》的编辑辰洋，这是👇项目的源代码链接，供你学习与参考：https:&#47;&#47;gitee.com&#47;evisong&#47;geektime-column-oh-my-kanban&#47;releases&#47;tag&#47;v0.12.0","like_count":1,"discussions":[{"author":{"id":1109402,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/9a/bbeec5bb.jpg","nickname":"liu","note":"","ucode":"041F179BB00A59","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590475,"discussion_content":"能否给一个ssh的代码链接？gitee的http方式需要登录。但是gitee的那个认证登录不是一般的烂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665800574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1109402,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/9a/bbeec5bb.jpg","nickname":"liu","note":"","ucode":"041F179BB00A59","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":593633,"discussion_content":"你好，liu，抱歉这么晚才看到你的问题，你是指这个吗？  \n\n    git@gitee.com:evisong/geektime-column-oh-my-kanban.git\n\n对应的帮助文档： https://gitee.com/help/articles/4238#article-header1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668400688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":590475,"ip_address":"北京","group_id":0},"score":593633,"extra":""},{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1109402,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/9a/bbeec5bb.jpg","nickname":"liu","note":"","ucode":"041F179BB00A59","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":593634,"discussion_content":"你也可以fork一份代码仓库，可以参考 https://gitee.com/help/articles/4128#article-header1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668400779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":590475,"ip_address":"北京","group_id":0},"score":593634,"extra":""}]}]},{"had_liked":false,"id":360005,"user_name":"海华呀","can_delete":false,"product_type":"c1","uid":1423832,"ip_address":"北京","ucode":"BD078EDFB181EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/b9/d8/92c2b3ab.jpg","comment_is_top":false,"comment_ctime":1666121458,"is_pvip":false,"replies":[{"id":131089,"content":"你好，海华呀，这个反例举得太好了。单向数据流是React框架的一项重要的设计哲学，乍一看有些教条，但它很有力地保证了数据的秩序，减少了开发者的混乱。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1666540203,"ip_address":"北京","comment_id":360005,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"1、因为一个父组件可能有多个子组件，如果任意子组件都可以修改父组件数据，可能会导致其他子组件受到影响，这样以来会加大开发和debug难度，单向数据流就没这个影响。","like_count":4,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591370,"discussion_content":"你好，海华呀，这个反例举得太好了。单向数据流是React框架的一项重要的设计哲学，乍一看有些教条，但它很有力地保证了数据的秩序，减少了开发者的混乱。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666540203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357890,"user_name":"船长","can_delete":false,"product_type":"c1","uid":3170712,"ip_address":"北京","ucode":"EBC0CCDB341E35","user_header":"https://static001.geekbang.org/account/avatar/00/30/61/98/0d6b499d.jpg","comment_is_top":false,"comment_ctime":1663732965,"is_pvip":false,"replies":[{"id":130408,"content":"你好，船长，因为在emotion方案中，JSX的css属性值是执行\n  @emotion&#47;react的 css()函数（即css`args`）\n函数的结果，所以你提到的两个位置就是 css()函数 执行次数的区别。模块范围的常量，意味着这个模块只要被加载，就会被执行一次，且只有这一次；KanbanBoard函数大括号内，意味着组件每次重新渲染都会执行一次 css()函数。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1664215391,"ip_address":"北京","comment_id":357890,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"有一个细节疑问：在重构 css 时，vscode 中有 4 个选项，宋老师用的是“抽取为模块范围的常量”, 实际效果是将这块代码放到了根目录下。我试了下另一个选项（第一个选项）“抽取为封闭范围的常量”，发现 vsc 将其放到了 KanbanBoard 这个函数的大括号下。\n想问下这 2 块有什么区别吗？","like_count":1,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588925,"discussion_content":"你好，船长，因为在emotion方案中，JSX的css属性值是执行\n  @emotion/react的 css()函数（即css`args`）\n函数的结果，所以你提到的两个位置就是 css()函数 执行次数的区别。模块范围的常量，意味着这个模块只要被加载，就会被执行一次，且只有这一次；KanbanBoard函数大括号内，意味着组件每次重新渲染都会执行一次 css()函数。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1664215391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358607,"user_name":"01","can_delete":false,"product_type":"c1","uid":1120612,"ip_address":"北京","ucode":"3229D8F060AFEC","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/64/6f2b7b86.jpg","comment_is_top":false,"comment_ctime":1664463455,"is_pvip":false,"replies":[{"id":130589,"content":"你好，01，确实state的变化最终会导致UI的变化。这里提到的state不可变，更多是在强调对于开发者的约束，只有调用 setXxxState() 产生的变更，才能被React“观测”到，触发接下来的渲染、提交过程。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1665243882,"ip_address":"北京","comment_id":358607,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"state 其实应该可变可不变的。 变是因为实打实的值变了， 不变是UI在当下不变","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589696,"discussion_content":"你好，01，确实state的变化最终会导致UI的变化。这里提到的state不可变，更多是在强调对于开发者的约束，只有调用 setXxxState() 产生的变更，才能被React“观测”到，触发接下来的渲染、提交过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665243882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357858,"user_name":"DullSword","can_delete":false,"product_type":"c1","uid":1351108,"ip_address":"北京","ucode":"9560FED4161FEB","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/c4/13376c14.jpg","comment_is_top":false,"comment_ctime":1663687649,"is_pvip":false,"replies":[{"id":130405,"content":"你好，DullSword，你对这两个问题的思路是对的，当然如果能再详细些就更好了。比如1里你提的混乱，有没有想到哪些具体的例子？","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1664213987,"ip_address":"北京","comment_id":357858,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"1.使数据流向简单清晰，多向可能会带来复杂和混乱。\n2.我理解的重构是改进代码，可能是改进代码的结构，也可能是改进代码的运行效率。","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588922,"discussion_content":"你好，DullSword，你对这两个问题的思路是对的，当然如果能再详细些就更好了。比如1里你提的混乱，有没有想到哪些具体的例子？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664213988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357772,"user_name":"船长","can_delete":false,"product_type":"c1","uid":3170712,"ip_address":"北京","ucode":"EBC0CCDB341E35","user_header":"https://static001.geekbang.org/account/avatar/00/30/61/98/0d6b499d.jpg","comment_is_top":false,"comment_ctime":1663633995,"is_pvip":false,"replies":[{"id":130396,"content":"你好，船长，很棒的答案！话说Martin Fowler大神的很多观点，我都是工作很久以后才真正理解的，很佩服他的丰富经验和深入思考。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1664194380,"ip_address":"北京","comment_id":357772,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"所谓重构（refactoring）是这样一个过程：在不改变代码外在行为的前提下，对代码做出修改，以改进程序的内部结构。重构是一种经千锤百炼形成的有条不紊的程序整理方法，可以最大限度地减小整理过程中引入错误的概率。本质上说，重构就是在代码写好之后改进它的设计。\nRef: 《重构》 马丁 福勒","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588890,"discussion_content":"你好，船长，很棒的答案！话说Martin Fowler大神的很多观点，我都是工作很久以后才真正理解的，很佩服他的丰富经验和深入思考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664194380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357565,"user_name":"学习前端-react","can_delete":false,"product_type":"c1","uid":1331001,"ip_address":"北京","ucode":"6C873AF98F3498","user_header":"https://static001.geekbang.org/account/avatar/00/14/4f/39/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1663400661,"is_pvip":false,"replies":[{"id":130394,"content":"你好，学习前端-react，也是也不是。\n\n首先redux是一个框架无关的应用状态管理框架，也可以用于vue或svelte等框架。我们在React中使用redux，一般会借助redux官方的React连接器 react-redux。\n\n这个库把redux的store放到了context里，但并没有借助React的context更新机制来响应store内部的更新。在早期版本中，react-redux提供的高阶组件订阅store变化，当有变化时调用组件的forceUpdate()方法，具体可以参考：https:&#47;&#47;gist.github.com&#47;gaearon&#47;1d19088790e70ac32ea636c025ba424e ；而在新版中，高阶组件使用了React的新Hooks API：useSyncExternalStore，用这个Hook返回的props来更新被修饰的组件，具体请参考 https:&#47;&#47;github.com&#47;reduxjs&#47;react-redux&#47;blob&#47;70a167e5fa6b311338d98e26b3a855ba44d7c739&#47;src&#47;components&#47;connect.tsx#L707。\n\n如果你感兴趣，可以读一读react-redux的发展史：  https:&#47;&#47;blog.isquaredsoftware.com&#47;2018&#47;11&#47;react-redux-history-implementation&#47;","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1664193098,"ip_address":"北京","comment_id":357565,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"请问：类似于redux 这样的状态管理器也都是基于 context 去实现的吧。","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588885,"discussion_content":"你好，学习前端-react，也是也不是。\n\n首先redux是一个框架无关的应用状态管理框架，也可以用于vue或svelte等框架。我们在React中使用redux，一般会借助redux官方的React连接器 react-redux。\n\n这个库把redux的store放到了context里，但并没有借助React的context更新机制来响应store内部的更新。在早期版本中，react-redux提供的高阶组件订阅store变化，当有变化时调用组件的forceUpdate()方法，具体可以参考：https://gist.github.com/gaearon/1d19088790e70ac32ea636c025ba424e ；而在新版中，高阶组件使用了React的新Hooks API：useSyncExternalStore，用这个Hook返回的props来更新被修饰的组件，具体请参考 https://github.com/reduxjs/react-redux/blob/70a167e5fa6b311338d98e26b3a855ba44d7c739/src/components/connect.tsx#L707。\n\n如果你感兴趣，可以读一读react-redux的发展史：  https://blog.isquaredsoftware.com/2018/11/react-redux-history-implementation/","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1664193098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1230852,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c8/04/fed4c1ad.jpg","nickname":"若川","note":"","ucode":"B8C3DD4B38CC6F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588350,"discussion_content":"redux 是独立的，不依附任何框架，简单来说是发布订阅模式，加入了中间件。\n我之前写过一篇redux源码文章，可供参考：https://juejin.cn/post/6844904191228411911 \n\nreact-redux 是基于 redux + context 实现的。\n\n可以参考其源码：\n在线编辑器打开【src/components/Provider.tsx】：https://github.dev/reduxjs/react-redux\n\nhttps://github.com/reduxjs/react-redux/blob/master/src/components/Provider.tsx","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663680117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1331001,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4f/39/791d0f5e.jpg","nickname":"学习前端-react","note":"","ucode":"6C873AF98F3498","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1230852,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c8/04/fed4c1ad.jpg","nickname":"若川","note":"","ucode":"B8C3DD4B38CC6F","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":588545,"discussion_content":"收到 感谢大佬分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663824395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":588350,"ip_address":"上海","group_id":0},"score":588545,"extra":""},{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1230852,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c8/04/fed4c1ad.jpg","nickname":"若川","note":"","ucode":"B8C3DD4B38CC6F","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":588927,"discussion_content":"若川你好，你在juejin的文章我拜读了，尤其是那个动图，太赞了，我们的中文技术社区就是需要这样高质量的内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664216855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":588350,"ip_address":"北京","group_id":0},"score":588927,"extra":""},{"author":{"id":1230852,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c8/04/fed4c1ad.jpg","nickname":"若川","note":"","ucode":"B8C3DD4B38CC6F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":588977,"discussion_content":"哇，老师竟然读了我的文章，感谢老师肯定~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1664278064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":588927,"ip_address":"浙江","group_id":0},"score":588977,"extra":""}]}]},{"had_liked":false,"id":366193,"user_name":"潮汐","can_delete":false,"product_type":"c1","uid":1042208,"ip_address":"广东","ucode":"F5E4F6DF9CEA9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/20/70a95f94.jpg","comment_is_top":false,"comment_ctime":1673447869,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"Context.Provider 的 value 值也可以传一个对象进去，但要注意写法，避免在组件重新渲染时反复创建新的对象，比如利用 state 或 useMemo ：\n--------------------------------------------------\n问下老师，这里说的要避免的写法，是为了单纯避免value值的对象的重复创建，还是说避免重复创建对象防止多余重复渲染啊。试验了一下，文中value值的对象形式，不管哪种形式，对象字面了，state对象值，useMemo值，在状态更新时，子孙组件都会重新渲染。所以我觉得老师这里的意思是 避免每次组件更新渲染时重新创建value值的对象。然而这里，不管是否重新创建value值的对象，子孙组件都会更新渲染。","like_count":1,"discussions":[{"author":{"id":1372582,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f1/a6/06f115ec.jpg","nickname":"小米","note":"","ucode":"63D7BDD2BA87D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":639632,"discussion_content":"我也有相同的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1710810060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357770,"user_name":"船长","can_delete":false,"product_type":"c1","uid":3170712,"ip_address":"上海","ucode":"EBC0CCDB341E35","user_header":"https://static001.geekbang.org/account/avatar/00/30/61/98/0d6b499d.jpg","comment_is_top":false,"comment_ctime":1663633705,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"思考题2: 个人理解重构是为了降低代码耦合度，减少系统的熵，方便后续增补或阅读","like_count":1}]}