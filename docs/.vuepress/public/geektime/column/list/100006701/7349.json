{"id":7349,"title":"第5讲 | String、StringBuffer、StringBuilder有什么区别？","content":"<p>今天我会聊聊日常使用的字符串，别看它似乎很简单，但其实字符串几乎在所有编程语言里都是个特殊的存在，因为不管是数量还是体积，字符串都是大多数应用中的重要组成。</p>\n<p>今天我要问你的问题是，<span class=\"orange\">理解Java的字符串，String、StringBuffer、StringBuilder有什么区别？</span></p>\n<h2>典型回答</h2>\n<p>String是Java语言非常基础和重要的类，提供了构造和管理字符串的各种基本逻辑。它是典型的Immutable类，被声明成为final class，所有属性也都是final的。也由于它的不可变性，类似拼接、裁剪字符串等动作，都会产生新的String对象。由于字符串操作的普遍性，所以相关操作的效率往往对应用性能有明显影响。</p>\n<p>StringBuffer是为解决上面提到拼接产生太多中间对象的问题而提供的一个类，我们可以用append或者add方法，把字符串添加到已有序列的末尾或者指定位置。StringBuffer本质是一个线程安全的可修改字符序列，它保证了线程安全，也随之带来了额外的性能开销，所以除非有线程安全的需要，不然还是推荐使用它的后继者，也就是StringBuilder。</p>\n<p>StringBuilder是Java 1.5中新增的，在能力上和StringBuffer没有本质区别，但是它去掉了线程安全的部分，有效减小了开销，是绝大部分情况下进行字符串拼接的首选。</p>\n<h2>考点分析</h2>\n<p>几乎所有的应用开发都离不开操作字符串，理解字符串的设计和实现以及相关工具如拼接类的使用，对写出高质量代码是非常有帮助的。关于这个问题，我前面的回答是一个通常的概要性回答，至少你要知道String是Immutable的，字符串操作不当可能会产生大量临时字符串，以及线程安全方面的区别。</p>\n<p>如果继续深入，面试官可以从各种不同的角度考察，比如可以：</p>\n<!-- [[[read_end]]] -->\n<ul>\n<li>\n<p>通过String和相关类，考察基本的线程安全设计与实现，各种基础编程实践。</p>\n</li>\n<li>\n<p>考察JVM对象缓存机制的理解以及如何良好地使用。</p>\n</li>\n<li>\n<p>考察JVM优化Java代码的一些技巧。</p>\n</li>\n<li>\n<p>String相关类的演进，比如Java 9中实现的巨大变化。</p>\n</li>\n<li>\n<p>…</p>\n</li>\n</ul>\n<p>针对上面这几方面，我会在知识扩展部分与你详细聊聊。</p>\n<h2>知识扩展</h2>\n<p>1.字符串设计和实现考量</p>\n<p>我在前面介绍过，String是Immutable类的典型实现，原生的保证了基础线程安全，因为你无法对它内部数据进行任何修改，这种便利甚至体现在拷贝构造函数中，由于不可变，Immutable对象在拷贝时不需要额外复制数据。</p>\n<p>我们再来看看StringBuffer实现的一些细节，它的线程安全是通过把各种修改数据的方法都加上synchronized关键字实现的，非常直白。其实，这种简单粗暴的实现方式，非常适合我们常见的线程安全类实现，不必纠结于synchronized性能之类的，有人说“过早优化是万恶之源”，考虑可靠性、正确性和代码可读性才是大多数应用开发最重要的因素。</p>\n<p>为了实现修改字符序列的目的，StringBuffer和StringBuilder底层都是利用可修改的（char，JDK 9以后是byte）数组，二者都继承了AbstractStringBuilder，里面包含了基本操作，区别仅在于最终的方法是否加了synchronized。</p>\n<p>另外，这个内部数组应该创建成多大的呢？如果太小，拼接的时候可能要重新创建足够大的数组；如果太大，又会浪费空间。目前的实现是，构建时初始字符串长度加16（这意味着，如果没有构建对象时输入最初的字符串，那么初始值就是16）。我们如果确定拼接会发生非常多次，而且大概是可预计的，那么就可以指定合适的大小，避免很多次扩容的开销。扩容会产生多重开销，因为要抛弃原有数组，创建新的（可以简单认为是倍数）数组，还要进行arraycopy。</p>\n<p>前面我讲的这些内容，在具体的代码书写中，应该如何选择呢？</p>\n<p>在没有线程安全问题的情况下，全部拼接操作是应该都用StringBuilder实现吗？毕竟这样书写的代码，还是要多敲很多字的，可读性也不理想，下面的对比非常明显。</p>\n<pre><code>String strByBuilder  = new\nStringBuilder().append(&quot;aa&quot;).append(&quot;bb&quot;).append(&quot;cc&quot;).append\n            (&quot;dd&quot;).toString();\n             \nString strByConcat = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot; + &quot;dd&quot;;\n</code></pre>\n<p>其实，在通常情况下，没有必要过于担心，要相信Java还是非常智能的。</p>\n<p>我们来做个实验，把下面一段代码，利用不同版本的JDK编译，然后再反编译，例如：</p>\n<pre><code>public class StringConcat {\n     public static String concat(String str) {\n       return str + “aa” + “bb”;\n     }\n}\n</code></pre>\n<p>先编译再反编译，比如使用不同版本的JDK：</p>\n<pre><code>${JAVA_HOME}/bin/javac StringConcat.java\n${JAVA_HOME}/bin/javap -v StringConcat.class\n</code></pre>\n<p>JDK 8的输出片段是：</p>\n<pre><code>         0: new           #2                  // class java/lang/StringBuilder\n         3: dup\n         4: invokespecial #3                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V\n         7: aload_0\n         8: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        11: ldc           #5                  // String aa\n        13: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        16: ldc           #6                  // String bb\n        18: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        21: invokevirtual #7                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n</code></pre>\n<p>而在JDK 9中，反编译的结果就会有点特别了，片段是：</p>\n<pre><code>         // concat method\n         1: invokedynamic #2,  0              // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n         \n         // ...\n         // 实际是利用了MethodHandle,统一了入口\n         0: #15 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n</code></pre>\n<p>你可以看到，非静态的拼接逻辑在JDK 8中会自动被javac转换为StringBuilder操作；而在JDK 9里面，则是体现了思路的变化。Java 9利用InvokeDynamic，将字符串拼接的优化与javac生成的字节码解耦，假设未来JVM增强相关运行时实现，将不需要依赖javac的任何修改。</p>\n<p>在日常编程中，保证程序的可读性、可维护性，往往比所谓的最优性能更重要，你可以根据实际需求酌情选择具体的编码方式。</p>\n<p>2.字符串缓存</p>\n<p>我们粗略统计过，把常见应用进行堆转储（Dump Heap），然后分析对象组成，会发现平均25%的对象是字符串，并且其中约半数是重复的。如果能避免创建重复字符串，可以有效降低内存消耗和对象创建开销。</p>\n<p>String在Java 6以后提供了intern()方法，目的是提示JVM把相应字符串缓存起来，以备重复使用。在我们创建字符串对象并调用intern()方法的时候，如果已经有缓存的字符串，就会返回缓存里的实例，否则将其缓存起来。一般来说，JVM会将所有的类似“abc”这样的文本字符串，或者字符串常量之类缓存起来。</p>\n<p>看起来很不错是吧？但实际情况估计会让你大跌眼镜。一般使用Java 6这种历史版本，并不推荐大量使用intern，为什么呢？魔鬼存在于细节中，被缓存的字符串是存在所谓PermGen里的，也就是臭名昭著的“永久代”，这个空间是很有限的，也基本不会被FullGC之外的垃圾收集照顾到。所以，如果使用不当，OOM就会光顾。</p>\n<p>在后续版本中，这个缓存被放置在堆中，这样就极大避免了永久代占满的问题，甚至永久代在JDK 8中被MetaSpace（元数据区）替代了。而且，默认缓存大小也在不断地扩大中，从最初的1009，到7u40以后被修改为60013。你可以使用下面的参数直接打印具体数字，可以拿自己的JDK立刻试验一下。</p>\n<pre><code>-XX:+PrintStringTableStatistics\n</code></pre>\n<p>你也可以使用下面的JVM参数手动调整大小，但是绝大部分情况下并不需要调整，除非你确定它的大小已经影响了操作效率。</p>\n<pre><code>-XX:StringTableSize=N\n</code></pre>\n<p>Intern是一种<strong>显式地排重机制</strong>，但是它也有一定的副作用，因为需要开发者写代码时明确调用，一是不方便，每一个都显式调用是非常麻烦的；另外就是我们很难保证效率，应用开发阶段很难清楚地预计字符串的重复情况，有人认为这是一种污染代码的实践。</p>\n<p>幸好在Oracle JDK 8u20之后，推出了一个新的特性，也就是G1 GC下的字符串排重。它是通过将相同数据的字符串指向同一份数据来做到的，是JVM底层的改变，并不需要Java类库做什么修改。</p>\n<p>注意这个功能目前是默认关闭的，你需要使用下面参数开启，并且记得指定使用G1 GC：</p>\n<pre><code>-XX:+UseStringDeduplication\n\n</code></pre>\n<p>前面说到的几个方面，只是Java底层对字符串各种优化的一角，在运行时，字符串的一些基础操作会直接利用JVM内部的Intrinsic机制，往往运行的就是特殊优化的本地代码，而根本就不是Java代码生成的字节码。Intrinsic可以简单理解为，是一种利用native方式hard-coded的逻辑，算是一种特别的内联，很多优化还是需要直接使用特定的CPU指令，具体可以看相关<a href=\"http://hg.openjdk.java.net/jdk/jdk/file/44b64fc0baa3/src/hotspot/share/classfile/vmSymbols.hpp\">源码</a>，搜索“string”以查找相关Intrinsic定义。当然，你也可以在启动实验应用时，使用下面参数，了解intrinsic发生的状态。</p>\n<pre><code>-XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining\n    //样例输出片段    \n        180    3       3       java.lang.String::charAt (25 bytes)  \n                                  @ 1   java.lang.String::isLatin1 (19 bytes)   \n                                  ...  \n                                  @ 7 java.lang.StringUTF16::getChar (60 bytes) intrinsic \n</code></pre>\n<p>可以看出，仅仅是字符串一个实现，就需要Java平台工程师和科学家付出如此大且默默无闻的努力，我们得到的很多便利都是来源于此。</p>\n<p>我会在专栏后面的JVM和性能等主题，详细介绍JVM内部优化的一些方法，如果你有兴趣可以再深入学习。即使你不做JVM开发或者暂时还没有使用到特别的性能优化，这些知识也能帮助你增加技术深度。</p>\n<p>3.String自身的演化</p>\n<p>如果你仔细观察过Java的字符串，在历史版本中，它是使用char数组来存数据的，这样非常直接。但是Java中的char是两个bytes大小，拉丁语系语言的字符，根本就不需要太宽的char，这样无区别的实现就造成了一定的浪费。密度是编程语言平台永恒的话题，因为归根结底绝大部分任务是要来操作数据的。</p>\n<p>其实在Java 6的时候，Oracle JDK就提供了压缩字符串的特性，但是这个特性的实现并不是开源的，而且在实践中也暴露出了一些问题，所以在最新的JDK版本中已经将它移除了。</p>\n<p>在Java 9中，我们引入了Compact Strings的设计，对字符串进行了大刀阔斧的改进。将数据存储方式从char数组，改变为一个byte数组加上一个标识编码的所谓coder，并且将相关字符串操作类都进行了修改。另外，所有相关的Intrinsic之类也都进行了重写，以保证没有任何性能损失。</p>\n<p>虽然底层实现发生了这么大的改变，但是Java字符串的行为并没有任何大的变化，所以这个特性对于绝大部分应用来说是透明的，绝大部分情况不需要修改已有代码。</p>\n<p>当然，在极端情况下，字符串也出现了一些能力退化，比如最大字符串的大小。你可以思考下，原来char数组的实现，字符串的最大长度就是数组本身的长度限制，但是替换成byte数组，同样数组长度下，存储能力是退化了一倍的！还好这是存在于理论中的极限，还没有发现现实应用受此影响。</p>\n<p>在通用的性能测试和产品实验中，我们能非常明显地看到紧凑字符串带来的优势，<strong>即更小的内存占用、更快的操作速度</strong>。</p>\n<p>今天我从String、StringBuffer和StringBuilder的主要设计和实现特点开始，分析了字符串缓存的intern机制、非代码侵入性的虚拟机层面排重、Java 9中紧凑字符的改进，并且初步接触了JVM的底层优化机制intrinsic。从实践的角度，不管是Compact Strings还是底层intrinsic优化，都说明了使用Java基础类库的优势，它们往往能够得到最大程度、最高质量的优化，而且只要升级JDK版本，就能零成本地享受这些益处。</p>\n<h2>一课一练</h2>\n<p>关于今天我们讨论的题目你做到心中有数了吗？限于篇幅有限，还有很多字符相关的问题没有来得及讨论，比如编码相关的问题。可以思考一下，很多字符串操作，比如getBytes()/<a href=\"https://docs.oracle.com/javase/9/docs/api/java/lang/String.html#String-byte:A-\">String</a>​(byte[] bytes)等都是隐含着使用平台默认编码，这是一种好的实践吗？是否有利于避免乱码？</p>\n<p>请你在留言区写写你对这个问题的思考，或者分享一下你在操作字符串时掉过的坑，我会选出经过认真思考的留言，送给你一份学习鼓励金，欢迎你与我一起讨论。</p>\n<p>你的朋友是不是也在准备面试呢？你可以“请朋友读”，把今天的题目分享给好友，或许你能帮到他。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"第4讲 | 强引用、软引用、弱引用、幻象引用有什么区别？","id":6970},"right":{"article_title":"第6讲 | 动态代理是基于什么原理？","id":7489}},"comments":[{"had_liked":false,"id":8841,"user_name":"Bin","can_delete":false,"product_type":"c1","uid":1088827,"ip_address":"","ucode":"1A298415CAD963","user_header":"https://static001.geekbang.org/account/avatar/00/10/9d/3b/bc67bfbe.jpg","comment_is_top":true,"comment_ctime":1526477991,"is_pvip":false,"replies":[{"id":"2640","content":"这些“优化”在通用场景可能变成持续的成本，volatile read是有明显开销的；<br>如果冲突并不多见，read才是更普遍的，简单的cache是更高效的","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526517821,"ip_address":"","comment_id":8841,"utype":1}],"discussion_count":10,"race_medal":0,"score":"9.2233723862735995e+18","product_id":100006701,"comment_content":"jdk1.8中，string是标准的不可变类，但其hash值没有用final修饰，其hash值计算是在第一次调用hashcode方法时计算，但方法没有加锁，变量也没用volatile关键字修饰就无法保证其可见性。当有多个线程调用的时候，hash值可能会被计算多次，虽然结果是一样的，但jdk的作者为什么不将其优化一下呢？","like_count":82,"discussions":[{"author":{"id":1217603,"avatar":"https://static001.geekbang.org/account/avatar/00/12/94/43/6e68c860.jpg","nickname":"ThinkingMan.","note":"","ucode":"722674A8BACA85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4416,"discussion_content":"有点看不懂作者的回答","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1565400609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1217603,"avatar":"https://static001.geekbang.org/account/avatar/00/12/94/43/6e68c860.jpg","nickname":"ThinkingMan.","note":"","ucode":"722674A8BACA85","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36225,"discussion_content":"不优化使用默认约定俗成的看着LOW但一般本来就是已经&#34;优化&#34;过的了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571337277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4416,"ip_address":""},"score":36225,"extra":""},{"author":{"id":1683063,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/QYKSUV20DMgBHAPLfgngdw4N8FHRCSBLCJueVRu9Ya1Ba2x4icx70zoVVFOZtG1K6TkHj5CFbuztQhRFyCjWXHQ/132","nickname":"zaab","note":"","ucode":"EE846895FF0C85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1217603,"avatar":"https://static001.geekbang.org/account/avatar/00/12/94/43/6e68c860.jpg","nickname":"ThinkingMan.","note":"","ucode":"722674A8BACA85","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39300,"discussion_content":"他的意思时如果我们hash的字符串不是都是同一个字符，就是说一直hash同一个字符的概率并不高的情况下，现在的已经够用了。你想如果很多商品，但是他们一直访问的概率一样，缓存的命中率不高，缓存就没有意义了。哪个评论的场景我感觉还是比较少见的，甚至通过某种方式就可以避免， 比如你自己缓存hash的值","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571910906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4416,"ip_address":""},"score":39300,"extra":""},{"author":{"id":1251634,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqcnUABw0V5MIDSmqbibmVWoTxflia2uApNBj2u8MTbMnYPjv1c9xFBOl1AWAVF20QL2GDQmvMEt7w/132","nickname":"提辖鲁","note":"","ucode":"15637B4B6B5054","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1217603,"avatar":"https://static001.geekbang.org/account/avatar/00/12/94/43/6e68c860.jpg","nickname":"ThinkingMan.","note":"","ucode":"722674A8BACA85","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41370,"discussion_content":"问题才应该是让人看不懂的 String原生就是线程安全的 在线程安全的对象内加锁和volatile意义在哪里？ 锁和volatile都是有性能开销的 没看到作者“优化”两字都打引号了吗 这些优化加了比不加更耗性能","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1572411392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4416,"ip_address":""},"score":41370,"extra":""}]},{"author":{"id":1523124,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erQ6wts5MoOC23bxHMHgSQekwOTouJT056W3zQcq12EGqnjt4Lua1ctLWTRp47A0tDZib5DhpJ9zTw/132","nickname":"Geek_AllenShen","note":"","ucode":"94B95495698BDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47679,"discussion_content":"个人理解是因为计算结果都是一样的,所以没有去做相关的&#34;优化&#34;吧.","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573390128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1664274,"avatar":"https://static001.geekbang.org/account/avatar/00/19/65/12/98fe9d80.jpg","nickname":"qiezitx","note":"","ucode":"AEA470E33B4C19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33192,"discussion_content":"特地看了jdk8的源码，hash值确实没有final修饰。不过作者提到&#34;冲突并不多见，read才是更普遍的&#34;，个人理解就是指多线程调用hashcode方法的情况并不多。当然万一就是有呢？这里有讨论：\nhttps://stackoverflow.com/questions/41704185/is-javas-string-hashcode-function-thread-safe-if-its-cache-setter-does-not-us\n大致结论有两个：\n1、reads and writes of integer are done atomicly in the Java VM。\n2、that would be &#34;wasteful&#34;, but safe。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1571106882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417864,"discussion_content":"这些“优化”在通用场景可能变成持续的成本，volatile read是有明显开销的；\n如果冲突并不多见，read才是更普遍的，简单的cache是更高效的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1526517821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1683063,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/QYKSUV20DMgBHAPLfgngdw4N8FHRCSBLCJueVRu9Ya1Ba2x4icx70zoVVFOZtG1K6TkHj5CFbuztQhRFyCjWXHQ/132","nickname":"zaab","note":"","ucode":"EE846895FF0C85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39301,"discussion_content":"说得不对请见谅，这是我个人的理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571910923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8572,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1526343066,"is_pvip":true,"replies":[{"id":"2574","content":"很到位","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526368249,"ip_address":"","comment_id":8572,"utype":1}],"discussion_count":18,"race_medal":0,"score":"2664406066586","product_id":100006701,"comment_content":"今日String&#47;StringBuffer&#47;StringBuilder心得:<br><br><br>1 String<br><br>(1) String的创建机理<br>由于String在Java世界中使用过于频繁，Java为了避免在一个系统中产生大量的String对象，引入了字符串常量池。其运行机制是：创建一个字符串时，首先检查池中是否有值相同的字符串对象，如果有则不需要创建直接从池中刚查找到的对象引用；如果没有则新建字符串对象，返回对象引用，并且将新创建的对象放入池中。但是，通过new方法创建的String对象是不检查字符串池的，而是直接在堆区或栈区创建一个新的对象，也不会把对象放入池中。上述原则只适用于通过直接量给String对象引用赋值的情况。<br><br>举例：String str1 = &quot;123&quot;; &#47;&#47;通过直接量赋值方式，放入字符串常量池<br>String str2 = new String(“123”);&#47;&#47;通过new方式赋值方式，不放入字符串常量池<br><br>注意：String提供了inter()方法。调用该方法时，如果常量池中包括了一个等于此String对象的字符串（由equals方法确定），则返回池中的字符串。否则，将此String对象添加到池中，并且返回此池中对象的引用。<br><br><br>(2) String的特性<br>[A] 不可变。是指String对象一旦生成，则不能再对它进行改变。不可变的主要作用在于当一个对象需要被多线程共享，并且访问频繁时，可以省略同步和锁等待的时间，从而大幅度提高系统性能。不可变模式是一个可以提高多线程程序的性能，降低多线程程序复杂度的设计模式。<br><br>[B] 针对常量池的优化。当2个String对象拥有相同的值时，他们只引用常量池中的同一个拷贝。当同一个字符串反复出现时，这个技术可以大幅度节省内存空间。<br><br>2 StringBuffer&#47;StringBuilder<br><br>StringBuffer和StringBuilder都实现了AbstractStringBuilder抽象类，拥有几乎一致对外提供的调用接口；其底层在内存中的存储方式与String相同，都是以一个有序的字符序列（char类型的数组）进行存储，不同点是StringBuffer&#47;StringBuilder对象的值是可以改变的，并且值改变以后，对象引用不会发生改变;两者对象在构造过程中，首先按照默认大小申请一个字符数组，由于会不断加入新数据，当超过默认大小后，会创建一个更大的数组，并将原先的数组内容复制过来，再丢弃旧的数组。因此，对于较大对象的扩容会涉及大量的内存复制操作，如果能够预先评估大小，可提升性能。<br><br>唯一需要注意的是：StringBuffer是线程安全的，但是StringBuilder是线程不安全的。可参看Java标准类库的源代码，StringBuffer类中方法定义前面都会有synchronize关键字。为此，StringBuffer的性能要远低于StringBuilder。<br><br><br>3 应用场景\t<br><br>[A]在字符串内容不经常发生变化的业务场景优先使用String类。例如：常量声明、少量的字符串拼接操作等。如果有大量的字符串内容拼接，避免使用String与String之间的“+”操作，因为这样会产生大量无用的中间对象，耗费空间且执行效率低下（新建对象、回收对象花费大量时间）。<br><br>[B]在频繁进行字符串的运算（如拼接、替换、删除等），并且运行在多线程环境下，建议使用StringBuffer，例如XML解析、HTTP参数解析与封装。<br><br>[C]在频繁进行字符串的运算（如拼接、替换、删除等），并且运行在单线程环境下，建议使用StringBuilder，例如SQL语句拼装、JSON封装等。","like_count":621,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417773,"discussion_content":"很到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526368249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145750,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/96/95a6e13a.jpg","nickname":"poetess","note":"","ucode":"240159FB179205","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3534,"discussion_content":"这个说法有问题吧，new会把字符串放到常量池中，别的地方复制粘贴来的东西就不要来误导别人了。","likes_number":27,"is_delete":false,"is_hidden":false,"ctime":1564556751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023945,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9f/c9/c2dd2521.jpg","nickname":"豪","note":"","ucode":"0B150304D02AC0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":133,"discussion_content":"为何感觉像是从哪搬的知识点，文章中并没有说到字符串的创建和常量池，还有&#39;+&#39;的操作，在JDK8之后，只要不是在循环中，是可以直接使用的，应用场景中不区分JDK版本的说法像是很久前出版的书的观点","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1561131773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1229943,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c4/77/7ffde93b.jpg","nickname":"Honam","note":"","ucode":"49808058228176","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285893,"discussion_content":"String str2 = new String(“123”);//通过new方式赋值方式，不放入字符串常量池\n\n这个有问题吧，会放进常量池的。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1592985006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2282246,"avatar":"","nickname":"Geek_e33428","note":"","ucode":"57F5A010B7EF65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1229943,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c4/77/7ffde93b.jpg","nickname":"Honam","note":"","ucode":"49808058228176","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328541,"discussion_content":"这个会先判断常量池里面有没有123，没有的话创建，然后在堆里面创建对象引用123，最后在把堆的地址赋给str2","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1606178932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":285893,"ip_address":""},"score":328541,"extra":""},{"author":{"id":2826407,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/20/a7/2e30e15a.jpg","nickname":"金英飞","note":"","ucode":"52ABA416B08009","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1229943,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c4/77/7ffde93b.jpg","nickname":"Honam","note":"","ucode":"49808058228176","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555493,"discussion_content":"方式一：String a = “aaa” ;\n方式二：String b = new String(“aaa”);\n两种方式都能创建字符串对象，但方式一要比方式二更优。\n因为字符串是保存在常量池中的，而通过new创建的对象会存放在堆内存中。\n常量池中已经有字符串常量”aaa”\n通过方式一创建对象，程序运行时会在常量池中查找”aaa”字符串，将找到的”aaa”字符串的地址赋给a。\n通过方式二创建对象，无论常量池中有没有”aaa”字符串，程序都会在堆内存中开辟一片新空间存放新对象。\n常量池中没有字符串常量”aaa”\n通过方式一创建对象，程序运行时会将”aaa”字符串放进常量池，再将其地址赋给a。\n通过方式二创建对象，程序会在堆内存中开辟一片新空间存放新对象，同时会将”aaa”字符串放入常量池，相当于创建了两个对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646925618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":285893,"ip_address":""},"score":555493,"extra":""}]},{"author":{"id":1507783,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/c7/549b5616.jpg","nickname":"夜涛","note":"","ucode":"672CC53663710B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":27515,"discussion_content":"说性能远远超过的，最好还是结合实际场景，循环，操作次数多了，stringbuffer和stringbuilder的性能差距才能体现。。。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1570664415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1013683,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","nickname":"公号-技术夜未眠","note":"","ucode":"83825B57CBD952","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1507783,"avatar":"https://static001.geekbang.org/account/avatar/00/17/01/c7/549b5616.jpg","nickname":"夜涛","note":"","ucode":"672CC53663710B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":28520,"discussion_content":"的确，脱离使用场景，单独说优劣，的确没有太大意义。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1570703456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":27515,"ip_address":""},"score":28520,"extra":""},{"author":{"id":1400962,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/82/9a43504b.jpg","nickname":"[耶]友超","note":"","ucode":"890572F77C3670","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1013683,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","nickname":"公号-技术夜未眠","note":"","ucode":"83825B57CBD952","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":36984,"discussion_content":"大佬，我咋没有搜到“代码荣耀”公众号","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571476353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":28520,"ip_address":""},"score":36984,"extra":""}]},{"author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290153,"discussion_content":"intern在常量池中根本就不是equals方法判断好么要判断也算compare的方法，而且也要分版本应该是&#34;调用该方法时如果常量池中包括此字符串对象则返回池中的字符串对象。否则，将此String对象添加到池中1.6，将此String对象的引用添加进池中1.7/8。&#34;","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1594359805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1269385,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIfI4IVbPPia8yLGNm8icd5p3CB5U4GZoW4WBDEQHTU2APUTz7YnoUtFgIfz9w0ezmicuJSTLRffTrPQ/132","nickname":"清酒","note":"","ucode":"E32DCF181A8504","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336581,"discussion_content":"     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n这个是1.8的解释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608628049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":290153,"ip_address":""},"score":336581,"extra":""}]},{"author":{"id":1302740,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e0/d4/7fa07324.jpg","nickname":"王大帅","note":"","ucode":"D2C9ADF2F7EBD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286896,"discussion_content":"同对结论有疑问：String str = new String(“abc”) 这种方式，我看的资料有说：在编译时，&#34;abc&#34;常量字符串将会放入到常量结构中，在类加载时，“abc&#34;将会在常量池中创建；其次，在调用 new 时，JVM 命令将会调用 String 的构造函数，同时引用常量池中的&#34;abc” 字符串，在堆内存中创建一个 String 对象；最后，str 将引用 String 对象。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1593321381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1449550,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1e/4e/56a0b904.jpg","nickname":"sakura","note":"","ucode":"D382C3325F2F59","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1302740,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e0/d4/7fa07324.jpg","nickname":"王大帅","note":"","ucode":"D2C9ADF2F7EBD6","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":291678,"discussion_content":"我看的资料也是说&#34;abc&#34;会放到常量池中","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594906763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":286896,"ip_address":""},"score":291678,"extra":""}]},{"author":{"id":1234280,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/68/af1682f1.jpg","nickname":"jackLee","note":"","ucode":"720304AB76D9FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157857,"discussion_content":"课代表","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1580526851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066928,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/b0/a9b77a1e.jpg","nickname":"冬风向左吹","note":"","ucode":"376C45C5134F93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3848,"discussion_content":"优秀","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1564881443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276563,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7a/93/c9302518.jpg","nickname":"高志强","note":"","ucode":"68737002043752","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331439,"discussion_content":"mark","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606875382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1992461,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/67/0d/ffa5cd9b.jpg","nickname":"oldjii","note":"","ucode":"70EC36B322C522","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387467,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628186851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1258789,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/25/bab760a1.jpg","nickname":"好好学习","note":"","ucode":"63A002997462E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1994,"discussion_content":"点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563172262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8802,"user_name":"Hidden","can_delete":false,"product_type":"c1","uid":1114462,"ip_address":"","ucode":"6323E5D32A3190","user_header":"https://static001.geekbang.org/account/avatar/00/11/01/5e/95f7d928.jpg","comment_is_top":false,"comment_ctime":1526450106,"is_pvip":false,"discussion_count":13,"race_medal":0,"score":"929239386042","product_id":100006701,"comment_content":"公司没有技术氛围，项目也只是 功能实现就好，不涉及优化，技术也只是传统技术，想离职，但又怕裸辞后的各种压力","like_count":217,"discussions":[{"author":{"id":1100980,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cc/b4/c6566bc0.jpg","nickname":"煎饼果子小神","note":"","ucode":"8CA7F8AF6716B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369200,"discussion_content":"裸辞吧，还可以玩一玩放松一下，别把自己看得太重，也别把生活看的太重，好心情才能有好的工作成果。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1618973051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1661554,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5a/72/959eaf36.jpg","nickname":"小荣灬小荣","note":"","ucode":"2CDCC809BC3CFB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24093,"discussion_content":"别裸辞，骑驴找马","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1570002012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2058455,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/68/d7/29025f1f.jpg","nickname":"前方的灯有点弱","note":"","ucode":"5CEDBCF3DDC991","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352035,"discussion_content":"业务决定技术","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1614580696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087547,"avatar":"https://static001.geekbang.org/account/avatar/00/10/98/3b/38142ece.jpg","nickname":"Tom Yang","note":"","ucode":"94B77ED05722D6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12554,"discussion_content":"我们公司也是，已经偏以贸易为主","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568545628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2862309,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/ac/e5/297b86c9.jpg","nickname":"米啊的","note":"","ucode":"08DAAF974E4285","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536358,"discussion_content":"正考虑裸辞，没意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638768055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2088785,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/df/51/e7312fd7.jpg","nickname":"上下求索","note":"","ucode":"02342FB4CC7D03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296813,"discussion_content":"我已经进外包了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596673269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2109076,"avatar":"https://static001.geekbang.org/account/avatar/00/20/2e/94/d679b570.jpg","nickname":"不要放辣","note":"","ucode":"7FF974FEF369B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2088785,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/df/51/e7312fd7.jpg","nickname":"上下求索","note":"","ucode":"02342FB4CC7D03","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375612,"discussion_content":"外包对能力有提升吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621767452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296813,"ip_address":""},"score":375612,"extra":""}]},{"author":{"id":1915046,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/a1nDkic8T3LRWe4hAWqCd32C6x3SM7IsmxKticU0icDt0oO95FYlmWhBnWdjiboaRh6c5fxu8t7E6VSElVfUZGe6Ww/132","nickname":"你当像鸟飞向你的山","note":"","ucode":"D20279F2D2867B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278952,"discussion_content":"说说你是哪个公司哈，我们公司是做估值核算软件的，我们部门就是写业务代码，业务复杂的一b","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591263274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1449550,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1e/4e/56a0b904.jpg","nickname":"sakura","note":"","ucode":"D382C3325F2F59","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1915046,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/a1nDkic8T3LRWe4hAWqCd32C6x3SM7IsmxKticU0icDt0oO95FYlmWhBnWdjiboaRh6c5fxu8t7E6VSElVfUZGe6Ww/132","nickname":"你当像鸟飞向你的山","note":"","ucode":"D20279F2D2867B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291680,"discussion_content":"老兄，你的昵称是我最近想看的一本书 /笑哭","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594906882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":278952,"ip_address":""},"score":291680,"extra":""},{"author":{"id":2074543,"avatar":"","nickname":"Geek_ebb3b6","note":"","ucode":"8166949E7DB45F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1915046,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/a1nDkic8T3LRWe4hAWqCd32C6x3SM7IsmxKticU0icDt0oO95FYlmWhBnWdjiboaRh6c5fxu8t7E6VSElVfUZGe6Ww/132","nickname":"你当像鸟飞向你的山","note":"","ucode":"D20279F2D2867B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306831,"discussion_content":"我是做贷款核算的，现在在银行，还会跟估值啥的联调，准备离职了，学不到技术，还要出差","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600399960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":278952,"ip_address":""},"score":306831,"extra":""},{"author":{"id":3004724,"avatar":"","nickname":"Geek_c92e87","note":"","ucode":"3BF423459478ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2074543,"avatar":"","nickname":"Geek_ebb3b6","note":"","ucode":"8166949E7DB45F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572268,"discussion_content":"银行不好吗，想进银行的信息部","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652686134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306831,"ip_address":""},"score":572268,"extra":""}]},{"author":{"id":1423993,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ba/79/5a6336f5.jpg","nickname":"Ornamentism","note":"","ucode":"1A3BFE53A3BDBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204110,"discussion_content":"me too","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584114048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1136329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/56/c9/7b3cd3e0.jpg","nickname":"马振","note":"","ucode":"94234F533219C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7330,"discussion_content":"你可以实现到最优，自己尽力优化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567495133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8835,"user_name":"sea季陪我去看海","can_delete":false,"product_type":"c1","uid":1100928,"ip_address":"","ucode":"D0CA20E815A157","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/80/898c1ed1.jpg","comment_is_top":false,"comment_ctime":1526475657,"is_pvip":false,"discussion_count":11,"race_medal":0,"score":"349418826633","product_id":100006701,"comment_content":"作者我有个疑问，String myStr = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot; + &quot;dd&quot;;   应该编译的时候就确定了，不会用到StringBuilder。理由是：<br>String myStr = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot; + &quot;dd&quot;;   <br>String h =aabbccdd<br>Mystr ==h  上机实测返回的是true，如果按照你的说法，应该是返回false才对，因为你说拼接用到stringbuilder，那mystr应该是堆地址，h是常亮池地址。","like_count":81,"discussions":[{"author":{"id":1441141,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fd/75/a1638430.jpg","nickname":"带着灵魂去旅游","note":"","ucode":"8E95054E5868CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4960,"discussion_content":"编译器静态编译将&#34;aa&#34;+&#34;bb&#34;+&#34;cc&#34;+&#34;dd&#34;提前计算为&#34;aabbccdd&#34;,在实际运行中并没有拼接","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1565859664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2391701,"avatar":"","nickname":"Geek_a3890b","note":"","ucode":"BF67D080DAF96D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1441141,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fd/75/a1638430.jpg","nickname":"带着灵魂去旅游","note":"","ucode":"8E95054E5868CF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359221,"discussion_content":"懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616144522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4960,"ip_address":""},"score":359221,"extra":""}]},{"author":{"id":1628398,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d8/ee/17f220b6.jpg","nickname":"蛋炒饭加鸡蛋","note":"","ucode":"C75E27B9FB3336","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165863,"discussion_content":"文中的拼接例子有变量str，\nString concat = &#34;1&#34;;\nString a = concat + &#34;aa&#34; + &#34;bb&#34;;\nString b = &#34;1&#34; + &#34;aa&#34; + &#34;bb&#34;;\nSystem.out.println(a == b);//false","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1581337783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1182219,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0a/0b/985d3800.jpg","nickname":"郭星","note":"","ucode":"8A0F5DF80E0C61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1628398,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d8/ee/17f220b6.jpg","nickname":"蛋炒饭加鸡蛋","note":"","ucode":"C75E27B9FB3336","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218221,"discussion_content":"String a = concat + &#34;aa&#34; + &#34;bb&#34;;实际上经过编译为class文件后;\n等价于 \nString a = new StringBuilder().append(concat).append(&#34;aabb&#34;).toString();\n而StringBuilder.toString 内部实现是 实际为java.lang.String#String(byte[], byte);\n所以a实际上是指向了堆内存中的新的String对象地址;且new String生成的字符串实际上是不存在与常量池中的;\nString b 实际指向的是常量池中的字符串地址;所以a==b为false","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1585632354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":165863,"ip_address":""},"score":218221,"extra":""}]},{"author":{"id":1349513,"avatar":"https://static001.geekbang.org/account/avatar/00/14/97/89/51f532f8.jpg","nickname":"陆凌枫","note":"","ucode":"622DEFC9DACDBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72865,"discussion_content":"String类型==比较的是内容不是地址。String类型重写了hashcode和equels方法","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575538196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1295046,"avatar":"https://static001.geekbang.org/account/avatar/00/13/c2/c6/d163e628.jpg","nickname":"52赫兹的鲸","note":"","ucode":"FBADBB6EEA5048","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1349513,"avatar":"https://static001.geekbang.org/account/avatar/00/14/97/89/51f532f8.jpg","nickname":"陆凌枫","note":"","ucode":"622DEFC9DACDBA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163602,"discussion_content":"？？？ String==比较的不就是地址吗？？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581086758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72865,"ip_address":""},"score":163602,"extra":""},{"author":{"id":1628398,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d8/ee/17f220b6.jpg","nickname":"蛋炒饭加鸡蛋","note":"","ucode":"C75E27B9FB3336","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1349513,"avatar":"https://static001.geekbang.org/account/avatar/00/14/97/89/51f532f8.jpg","nickname":"陆凌枫","note":"","ucode":"622DEFC9DACDBA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165859,"discussion_content":"==是比较地址，重写的目的是使用equels方法时能比较字符串的值，不重写时equels和==的作用是一样的","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1581337336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72865,"ip_address":""},"score":165859,"extra":""},{"author":{"id":2391701,"avatar":"","nickname":"Geek_a3890b","note":"","ucode":"BF67D080DAF96D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1349513,"avatar":"https://static001.geekbang.org/account/avatar/00/14/97/89/51f532f8.jpg","nickname":"陆凌枫","note":"","ucode":"622DEFC9DACDBA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359217,"discussion_content":"你在说啥，误导人","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1616143666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72865,"ip_address":""},"score":359217,"extra":""}]},{"author":{"id":1136329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/56/c9/7b3cd3e0.jpg","nickname":"马振","note":"","ucode":"94234F533219C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7331,"discussion_content":"常量折叠，会优化","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567495178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1159997,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/3d/a58f5526.jpg","nickname":"Horace","note":"","ucode":"F170003ACCDB5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6673,"discussion_content":"怎么打不开评论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567046184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8618,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1526347599,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"246339483471","product_id":100006701,"comment_content":"要完全消化一篇文章的所有内容，真得不是一天就能搞定的，可能需要一个月，甚至好几个月。就比如今天的字符串，我觉得这个话题覆盖的面太广：算法角度；易用角度；性能角度；编码传输角度等<br><br>但是好在，我获得见识。接下来，花时间慢慢研究呗，连大师们都花了那么多时间研究，我们多花点时间，很正常嘛😄<br><br>一点学习心得，和大家分享","like_count":57,"discussions":[{"author":{"id":2052476,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Qq6oLfOTgKzjiculoUDicdv7WoY1iabPfOTumibWeInVP2Mnod9XVPrNSClvIiaLbvtDlIjRnWUNaXcYwREGzlcaDog/132","nickname":"Geek_在下蟑螂王","note":"","ucode":"E1F5BBB5BC5962","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289737,"discussion_content":"四维上去了，一篇武功也很好理解到位的，跟打游戏一样。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1594196526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2015587,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIQRk0dsznttDS2ic5atjUkZbNIuzz5regxj6U0E78wXRPlWqWfHaCm6Tv1MQutVRqvoMvBlpW7qTQ/132","nickname":"今夜有雨","note":"","ucode":"848E0AAEEE4CE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2052476,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Qq6oLfOTgKzjiculoUDicdv7WoY1iabPfOTumibWeInVP2Mnod9XVPrNSClvIiaLbvtDlIjRnWUNaXcYwREGzlcaDog/132","nickname":"Geek_在下蟑螂王","note":"","ucode":"E1F5BBB5BC5962","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348254,"discussion_content":"有道理，最近在玩鬼谷八荒，深有感触","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612492926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":289737,"ip_address":""},"score":348254,"extra":""}]},{"author":{"id":1594292,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epCnHKhYLefpkm02lnr4SpV5T4ibDQ2e4SlibkcaGu8ZxVDlEmVib6j0TiaDTicMmjrEdiaia8Aeen3nR7dg/132","nickname":"Geek_4a677e","note":"","ucode":"ACE5BD07A232D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538350,"discussion_content":"为啥我感觉 夸张了呢。。为啥需要几个月呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639400297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1429055,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ce/3f/3bbe6532.jpg","nickname":"Jimmy.Hum","note":"","ucode":"438006AC6F34CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384425,"discussion_content":"哈，好几个课程的留言都看到了银银大佬，希望有机会能请教你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626586489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8587,"user_name":"愉悦在花香的日子里","can_delete":false,"product_type":"c1","uid":1027072,"ip_address":"","ucode":"E7C1C773D436EA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/00/db92d343.jpg","comment_is_top":false,"comment_ctime":1526344756,"is_pvip":false,"replies":[{"id":"2570","content":"不错，莫依赖于不确定因素","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526368011,"ip_address":"","comment_id":8587,"utype":1}],"discussion_count":2,"race_medal":0,"score":"220569676852","product_id":100006701,"comment_content":"getBytes和String相关的转换时根据业务需要建议指定编码方式，如果不指定则看看JVM参数里有没有指定file.encoding参数，如果JVM没有指定，那使用的默认编码就是运行的操作系统环境的编码了，那这个编码就变得不确定了。常见的编码iso8859-1是单字节编码，UTF-8是变长的编码。","like_count":52,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417782,"discussion_content":"不错，莫依赖于不确定因素","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526368011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2423702,"avatar":"https://static001.geekbang.org/account/avatar/00/24/fb/96/8d9c7a7b.jpg","nickname":"helloworld2021","note":"","ucode":"439991CA282C57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345261,"discussion_content":"这里比较坑的是国内win默认是gb18030，linux/mac默认u8","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611707872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8772,"user_name":"Kongk0ng","can_delete":false,"product_type":"c1","uid":1004131,"ip_address":"","ucode":"784B1EABDD7328","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/63/a58ae0ab.jpg","comment_is_top":false,"comment_ctime":1526431369,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"194799959689","product_id":100006701,"comment_content":"编译器为什么不把 <br>String myStr = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot; + &quot;dd&quot;;  <br>默认优化成<br>String myStr = &quot;aabbccdd&quot;;<br>这样不是更聪明嘛","like_count":45,"discussions":[{"author":{"id":1182802,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0c/52/f25c3636.jpg","nickname":"长脖子树","note":"","ucode":"D9090EF67EEB1B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9851,"discussion_content":"         String s1 = &#34;aa&#34; + &#34;bb&#34; + &#34;cc&#34; + &#34;dd&#34;;\n        String s2 = &#34;aabbccdd&#34;;\n        String s3 = &#34;aabbccdd&#34;;\n=> \n        0: ldc           #2                  // String aabbccdd\n         2: astore_1\n         3: ldc           #2                  // String aabbccdd\n         5: astore_2\n         6: ldc           #2                  // String aabbccdd\n         8: astore_3","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1568219525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004569,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/19/95ff4cbd.jpg","nickname":"格非","note":"","ucode":"89FABFFC377131","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3565,"discussion_content":"确实是这样的的哦，字符串常量相加，编译器会直接优化成相加后的字符串，你可以反编译看下，文中的是str + “aa” + “bb”; 这个str是字符串变量，情况不一样的\n","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1564584885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1400579,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5f/03/9b8706fd.jpg","nickname":"继往开来","note":"","ucode":"8F2DEEA86F3B4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004569,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/19/95ff4cbd.jpg","nickname":"格非","note":"","ucode":"89FABFFC377131","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4518,"discussion_content":"哈哈，自己动手丰衣足食","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565511387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3565,"ip_address":""},"score":4518,"extra":""}]}]},{"had_liked":false,"id":25411,"user_name":"Van","can_delete":false,"product_type":"c1","uid":1211294,"ip_address":"","ucode":"69E2158942A86B","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/9e/d2ddf667.jpg","comment_is_top":false,"comment_ctime":1537324568,"is_pvip":false,"replies":[{"id":"9889","content":"嗯，文中的例子有歧义，确实欠考虑","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1537896485,"ip_address":"","comment_id":25411,"utype":1}],"discussion_count":1,"race_medal":0,"score":"169041049112","product_id":100006701,"comment_content":"String myStr = &quot;aa&quot; +&quot;bb&quot; + &quot;cc&quot; +&quot;dd&quot;;反编译后并不会用到StringBuilder，老师反编译结果中出现StringBuilder是因为输出中拼接了字符串System.out.println(&quot;My String:&quot; + myStr);","like_count":39,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424294,"discussion_content":"嗯，文中的例子有歧义，确实欠考虑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537896485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13676,"user_name":"蔡光明","can_delete":false,"product_type":"c1","uid":1158477,"ip_address":"","ucode":"7EACC0555B4F19","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/4d/e24fc9e4.jpg","comment_is_top":false,"comment_ctime":1529923754,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"151853779114","product_id":100006701,"comment_content":"回答一下上面一个人的问题，问题是“”String s3 = new String(&quot;12&quot;) + new String(&quot;34&quot;);<br>s3.intern();<br>String s4 = &quot;1234&quot;;<br>System.out.println(s3 == s4);&#47;&#47;true<br><br>求解,为什么在第二段比较中会返回true,从字节码看s3应该就是生成了一个stringbuilder对象完成连接操作后执行了toString, s3不是应该仍然是堆内的对象地址吗?为什么会和常量池中的地址相等?“”<br><br><br><br>我之前也是不明白s3为什么等于s4，查了下资料，说是在jdk1.7之后，如果字符串在堆中有实例，那intern方法就会把这个字符串的引用放在字符串常量池里，所以，String s3 = new String(&quot;12&quot;) + new String(&quot;34&quot;);这里在字符串常量池里放了一个字符串“12”，一个字符串“34”，在堆里存放他们的运算结果“1234”，然后把“1234”的引用返回给s3，<br>s3.intern()这段代码运行时，jvm在堆里先到了字符串“1234”，所以就会把他的引用放到字符串常量池里，这个引用和s3相等，<br>String s4 = &quot;1234&quot;;这个代码时，会把字符串常量池里“1234”的引用返回给s4，所以s3是等于s4的，<br><br><br>个人理解，如有不对，请指正，谢谢😜","like_count":36,"discussions":[{"author":{"id":1136329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/56/c9/7b3cd3e0.jpg","nickname":"马振","note":"","ucode":"94234F533219C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7335,"discussion_content":"差点被误导，上面返回的是false；s3 = s3.intern();才会返回true；原因是s3.intern()返回了常量池中的引用，jdk1.8\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567496759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1887303,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/cc/47/5d317181.jpg","nickname":"Garmen","note":"","ucode":"C603990887C46D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1136329,"avatar":"https://static001.geekbang.org/account/avatar/00/11/56/c9/7b3cd3e0.jpg","nickname":"马振","note":"","ucode":"94234F533219C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203129,"discussion_content":"我试了一下，返回的是true！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584002963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7335,"ip_address":""},"score":203129,"extra":""}]},{"author":{"id":1320592,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/90/f68608f3.jpg","nickname":"gwl","note":"","ucode":"24F334E9AC0313","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281206,"discussion_content":"                String t = String.valueOf(&#34;bilibili&#34;);\n\t\tString t1 = t.intern();\n\t\tString t2 = &#34;bilibili&#34;;\n\t\tSystem.out.println(t == t1); //true\n\t\tSystem.out.println(t == t2); //true\n\t\tSystem.out.println(t1 == t2); //true\n层主可以试试这样。\nString的构造方法也是一道幌子，千万不要被迷糊到了，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591691607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":26186,"user_name":"DoctorDeng","can_delete":false,"product_type":"c1","uid":1122760,"ip_address":"","ucode":"116378F7377768","user_header":"https://static001.geekbang.org/account/avatar/00/11/21/c8/c2343cb6.jpg","comment_is_top":false,"comment_ctime":1537514620,"is_pvip":false,"replies":[{"id":"9891","content":"思路比结论更有价值","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1537896747,"ip_address":"","comment_id":26186,"utype":1}],"discussion_count":8,"race_medal":0,"score":"130386533500","product_id":100006701,"comment_content":"\t\tString s = new String(&quot;1&quot;);<br>\t\ts.intern();<br>\t\tString s2 = &quot;1&quot;;<br>\t\tSystem.out.println(s == s2);<br><br>\t\tString s3 = new String(&quot;1&quot;) + new String(&quot;1&quot;);<br>\t\ts3.intern();<br>\t\tString s4 = &quot;11&quot;;<br>\t\tSystem.out.println(s3 == s4);<br>  这道面试题不错，即考察了 intern() 的用法，也考察了字符串常量池在不同版本 JDK 的实际存储，具体可以看看美团博客：https:&#47;&#47;tech.meituan.com&#47;in_depth_understanding_string_intern.html，","like_count":30,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424553,"discussion_content":"思路比结论更有价值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537896747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2136944,"avatar":"https://static001.geekbang.org/account/avatar/00/20/9b/70/8acc2c35.jpg","nickname":"lily","note":"","ucode":"F703E88271E9DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302970,"discussion_content":"我将这段代码分别在java和spring boot中进行运行，结果是不一样得，都是用Jdk1.8，java中运行结果是false,true,但是spring boot运行结果是false,false,这是为什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599100935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1088710,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","nickname":"苗","note":"","ucode":"5ECCC6C855E541","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286578,"discussion_content":"看美团的文章，懂了；谢谢分享。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593233710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2011492,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/b1/64/5570b054.jpg","nickname":"逍遥","note":"","ucode":"EDC322BAB83D67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273796,"discussion_content":"jdk7 常量池存储的是对对象的引用\n//在常量池中生成了一个对象“1”，堆中生成了一个对象s =“1”。\nString s = new String(&#34;1&#34;);\n//堆中s 指向常量池中的“1”\ns.intern();\n//生成对象s2指向常量池中的对象“1”\nString s2 = &#34;1&#34;;\n//s 和 s2 地址不同\nSystem.out.println(s == s2);\n\n//常量池中生成一个对象“1”，并在堆中创建一个对象s3=“11”。常量池中不存在“11”\nString s3 = new String(&#34;1&#34;) + new String(&#34;1&#34;);\n//常量池中生成一个引用对象“11”，常量池对s3的引用\ns3.intern();\n//常量池中存在“11”，s4 生成对常量池中“11”的引用，也就是对s3的引用。\nString s4 = &#34;11&#34;;\n//s3与s4地址相同。\nSystem.out.println(s3 == s4);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590501325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1418424,"avatar":"https://static001.geekbang.org/account/avatar/00/15/a4/b8/719fef45.jpg","nickname":"李兴亮","note":"","ucode":"94E348AA3563A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":181129,"discussion_content":"看了博客，还是不太明白，为什么s．intern（）没有改变s的地址，s3．intern（）却改变了s3的地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582340306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1317216,"avatar":"https://static001.geekbang.org/account/avatar/00/14/19/60/888f1371.jpg","nickname":"Kid😋","note":"","ucode":"7150F69AAAB477","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1418424,"avatar":"https://static001.geekbang.org/account/avatar/00/15/a4/b8/719fef45.jpg","nickname":"李兴亮","note":"","ucode":"94E348AA3563A8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205595,"discussion_content":"我的理解是:s.intern()和s3.intern()都没有改变s和s3的地址，intern()方法的调用只是将当前变量的内容与常量池中的常量进行对比，如果没存在就把当前变量的值放到常量池中，这也是s3 == s4  在jdk1.7下 为什么是true的原因。\n\n个人理解，如果存在错误，欢迎指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584325047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":181129,"ip_address":""},"score":205595,"extra":""},{"author":{"id":2224520,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f1/88/cca5335f.jpg","nickname":"神清气爽海波东","note":"","ucode":"E5F45675DC059F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1418424,"avatar":"https://static001.geekbang.org/account/avatar/00/15/a4/b8/719fef45.jpg","nickname":"李兴亮","note":"","ucode":"94E348AA3563A8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534088,"discussion_content":"都没有改变指向，只是把对应的内容对比做放入常量池，要是s=s.intern()就是true了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638091274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":181129,"ip_address":""},"score":534088,"extra":""}]},{"author":{"id":1816140,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/b6/4c/54dc2e60.jpg","nickname":"🐱🐠","note":"","ucode":"13B4433F9D4A6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157324,"discussion_content":"这里虽有的结果都是false.\n你需要用intern()方法的返回值来赋值\ns=s.intern();","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580468881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8610,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1526346991,"is_pvip":false,"replies":[{"id":"2568","content":"非常感谢","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526367852,"ip_address":"","comment_id":8610,"utype":1}],"discussion_count":1,"race_medal":0,"score":"117490463983","product_id":100006701,"comment_content":"特别喜欢这句话：“仅仅是字符串一个实现，就需要 Java 平台工程师和科学家付出如此大且默默无闻的努力，我们得到的很多便利都是来源于此。”<br><br>我想说，同学们，写代码的时候记得感恩哦😄<br><br>对于字符串的研究，我觉得能很好的理解计算机的本质和训练计算机思维，提升自己解决问题的能力。<br><br>小小的字符串有着诸多巨人的影子","like_count":27,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417790,"discussion_content":"非常感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526367852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9350,"user_name":"王万云","can_delete":false,"product_type":"c1","uid":1095013,"ip_address":"","ucode":"2B71BAF8096A1E","user_header":"https://static001.geekbang.org/account/avatar/00/10/b5/65/815380a0.jpg","comment_is_top":false,"comment_ctime":1526810316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"113195960012","product_id":100006701,"comment_content":"看大神的文章真的提高太多了，而且还要看评论，评论区也都是高手云集","like_count":26},{"had_liked":false,"id":88871,"user_name":"X","can_delete":false,"product_type":"c1","uid":1105863,"ip_address":"","ucode":"E7E7F25DA92F3A","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/c7/e978743e.jpg","comment_is_top":false,"comment_ctime":1556017463,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"91750330679","product_id":100006701,"comment_content":"看了评论中的，感觉误区还是不少的，这里经过心爱之人极大的帮助，总结如下，<br>首先要搞清楚一个概念，就是到底创建了几个对象。基于1.8<br>String s1=new String(&quot;11&quot;);&#47;&#47;在堆中创建对象，并且新建一个&quot;11&quot;对象放入常量池<br><br>对比声明式拼接<br>String s1=new String(&quot;11&quot;)+new String(&quot;111&quot;);&#47;&#47;创建5个，分别是堆中的3个：&quot;11&quot;    &quot;111&quot;  &quot;11111&quot;，常量池2个 &quot;11&quot;<br>&quot;111&quot;<br><br>看到不同了么，很多人认为，new出来的只在堆里，这就是最大的错误<br><br>我们再说常量池，早知道，常量池里不止是字面量常量，还有引用型常量，这是重点<br><br><br>intern这个方法是这样说的，如果该对象代表的字符串在常量池可以找到，那么，返回该常量的引用，如果找不到，那么，去堆中查找，堆中存在，则讲堆中对象的引用放入常量池，并返回该引用（看到了么，是将堆中对象的引用放入常量池），如果都没有找到，则讲该字面量放入常量池<br><br>如果大家有兴趣，可以尝试一下，结合不同的创建方式，来调用intern，进行对比","like_count":22,"discussions":[{"author":{"id":1125963,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2e/4b/de04a33b.jpg","nickname":"null","note":"","ucode":"037CE0B26F205E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380071,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624327732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1583833,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/E3XKbwTv6WTssolgqZjZCkiazHgl2IdBYfwVfAcB7Ff3krsIQeBIBFQLQE1Kw91LFbl3lic2EzgdfNiciaYDlJlELA/132","nickname":"rike","note":"","ucode":"920AAD0BD9245C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":149978,"discussion_content":"Returns a canonical representation for the string object.\nA pool of strings, initially empty, is maintained privately by the class {@code String}.\nWhen the intern method is invoked, if the pool already contains a string equal to this {@code String} object as determined by the {@link #equals(Object)} method, then the string from the pool is returned. Otherwise, this {@code String} object is added to the pool and a reference to this {@code String} object is returned.\nIt follows that for any two strings {@code s} and {@code t},\n{@code s.intern() == t.intern()} is {@code true} \nif and only if {@code s.equals(t)} is {@code true}.\nAll literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the The Java&amp;trade; Language Specification.\n\na string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.\n\n这是intern方法对应的javadoc注释，翻译过来，跟你讲的不一致。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579785549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":31395,"user_name":"a man is a man","can_delete":false,"product_type":"c1","uid":1229407,"ip_address":"","ucode":"45D23378DA067E","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/5f/dd745376.jpg","comment_is_top":false,"comment_ctime":1539171566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"70258648302","product_id":100006701,"comment_content":"1.通过字面量赋值创建字符串（如：String str=”twm”）时，会先在常量池中查找是否存在相同的字符串，若存在，则将栈中的引用直接指向该字符串；若不存在，则在常量池中生成一个字符串，再将栈中的引用指向该字符串。<br>2.JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与1.7之前没有区别，区别在于，如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串的引用。简单的说，就是往常量池放的东西变了：原来在常量池中找不到时，复制一个副本放到常量池，1.7后则是将在堆上的地址引用复制到常量池。jdk1.7之后，常量池不仅仅可以存储对象，还可以存储对象的引用<br>3.在jdk1.7之前，字符串常量存储在方法区的PermGen Space（永久代）。在jdk1.7之后，字符串常量重新被移到了堆中。<br>","like_count":16},{"had_liked":false,"id":8577,"user_name":"肖一林","can_delete":false,"product_type":"c1","uid":1113317,"ip_address":"","ucode":"1DE45D906EB836","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/e5/605f423f.jpg","comment_is_top":false,"comment_ctime":1526343830,"is_pvip":false,"replies":[{"id":"2571","content":"谢谢认可","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526368022,"ip_address":"","comment_id":8577,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61655885974","product_id":100006701,"comment_content":"这篇文章写的不错，由浅入深，把来龙去脉写清楚了","like_count":14,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417776,"discussion_content":"谢谢认可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526368022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35185,"user_name":"毛荣荣","can_delete":false,"product_type":"c1","uid":1272604,"ip_address":"","ucode":"3476702D07AA8B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/1c/b0e47b46.jpg","comment_is_top":false,"comment_ctime":1540450181,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"57375025029","product_id":100006701,"comment_content":"首先要明白，Object obj = new Object();<br>obj是对象的引用，它位于栈中， new Object() 才是对象，它位于堆中<br>举例：String str1 = &quot;abc&quot;; &#47;&#47;通过直接量赋值方式，放入字符串常量池<br>String str2 = new String(“abc”);&#47;&#47;通过new方式赋值方式，不放入字符串常量池<br>String str1 = new String(&quot;abc&quot;);<br>Stirng str2 = &quot;abc&quot;;<br>虽然两个语句都是返回一个String对象的引用，但是jvm对两者的处理方式是不一样的。<br>对于第一种，jvm会马上在heap中创建一个String对象，然后将该对象的引用返回给用户。<br>对于第二种，jvm首先会在内部维护的strings pool中通过String的 equels 方法查找是对象池中是否存放有该String对象，如果有，则返回已有的String对象给用户，<br>而不会在heap中重新创建一个新的String对象；如果对象池中没有该String对象，jvm则在heap中创建新的String对象，将其引用返回给用户，同时将该引用添加至strings pool中。<br>注意：使用第一种方法创建对象时，jvm是不会主动把该对象放到strings pool里面的，除非程序调用 String的intern方法。<br><br>看下面的代码:<br>        if(a == b){<br>            System.out.println(&quot;a == b&quot;);<br>        } else {<br>            System.out.println(&quot;a != b&quot;);<br>        }<br>        &#47;&#47;<br>        if(a == c){<br>            System.out.println(&quot;a == c&quot;);<br>        } else {<br>            System.out.println(&quot;a != c&quot;);<br>        }<br><br>        System.out.println(&quot;a.equals(b):&quot; + a.equals(b));<br>        System.out.println(&quot;a.equals(c):&quot; + a.equals(c));<br>        &#47;&#47;<br>        if(a == c){<br>            System.out.println(&quot;a == c&quot;);<br>        } else {<br>            System.out.println(&quot;a != c&quot;);<br>        }<br><br>        System.out.println(&quot;a.equals(b):&quot; + a.equals(b));<br>        System.out.println(&quot;a.equals(c):&quot; + a.equals(c));<br><br>&#47;&#47; 输出结果为:<br>a == b<br>a != c<br>a.equals(b):true<br>a.equals(c):true<br><br>","like_count":13,"discussions":[{"author":{"id":1183019,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0d/2b/4814d3db.jpg","nickname":"阿土","note":"","ucode":"2DBEAD80B0CA3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220989,"discussion_content":"这个要区分jdk版本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585960460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1906594,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/17/a2/6db42e2c.jpg","nickname":"Geek_Gem","note":"","ucode":"6D15029E670767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206530,"discussion_content":"后面这段代码abc指的是什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584412296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21615,"user_name":"фщэьшух","can_delete":false,"product_type":"c1","uid":1116476,"ip_address":"","ucode":"0D6F69790925DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/3c/1bec447d.jpg","comment_is_top":false,"comment_ctime":1535196550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53074804102","product_id":100006701,"comment_content":"回答上面的问题，问题如下：<br>作者我有个疑问，String myStr = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot; + &quot;dd&quot;; 应该编译的时候就确定了，不会用到StringBuilder。理由是：<br>String myStr = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot; + &quot;dd&quot;; <br>String h =aabbccdd<br>Mystr ==h 上机实测返回的是true，如果按照你的说法，应该是返回false才对，因为你说拼接用到stringbuilder，那mystr应该是堆地址，h是常亮池地址。<br>String myStr = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot; + &quot;dd&quot;; 应该编译的时候就确定了，不会用到StringBuilder。这句话是对的，在编译阶段就直接合成aaccccdd，然后看常量池里有没有，有也直接引用，没有就在常量池中生成，返回引用。<br>那么此时String h =aabbccdd，则就引用了常量池中的，必然返回true","like_count":12},{"had_liked":false,"id":12727,"user_name":"jamie","can_delete":false,"product_type":"c1","uid":1153293,"ip_address":"","ucode":"4A5CF2D2E9A728","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erm1iaf2icZlX5eibPSQK87qftmh1hn48gTcWicLQicSqTHbDVzElL7IYx1tzRbaiaCbBBZnBxa1iaSXMm1Q/132","comment_is_top":false,"comment_ctime":1528986186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53068593738","product_id":100006701,"comment_content":"<br>编译器为什么不把 <br>String myStr = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot; + &quot;dd&quot;; <br>默认优化成<br>String myStr = &quot;aabbccdd&quot;;<br>这样不是更聪明嘛<br><br>这个我反编译试过，已经优化成aabbccdd了","like_count":12},{"had_liked":false,"id":8635,"user_name":"好运来","can_delete":false,"product_type":"c1","uid":1113937,"ip_address":"","ucode":"F469ED6CEFEF30","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/51/9d5cfadd.jpg","comment_is_top":false,"comment_ctime":1526350067,"is_pvip":true,"replies":[{"id":"2582","content":"已回复，一个char两个byte，注意下各个类型宽度","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526369249,"ip_address":"","comment_id":8635,"utype":1}],"discussion_count":1,"race_medal":1,"score":"40181055731","product_id":100006701,"comment_content":"老师，可以讲解这一句话的具体含义吗，谢谢！<br>你可以思考下，原来 char 数组的实现，字符串的最大长度就是数组本身的长度限制，但是替换成 byte 数组，同样数组长度下，存储能力是退化了一倍的！还好这是存在于理论中的极限，还没有发现现实应用受此影响。","like_count":9,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417804,"discussion_content":"已回复，一个char两个byte，注意下各个类型宽度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526369249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10952,"user_name":"轩尼诗。","can_delete":false,"product_type":"c1","uid":1115884,"ip_address":"","ucode":"BD396AF9B43E2F","user_header":"https://static001.geekbang.org/account/avatar/00/11/06/ec/434081d2.jpg","comment_is_top":false,"comment_ctime":1527762212,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35887500580","product_id":100006701,"comment_content":"String s = new String(“abc”) 创建了几个对象？\r答案1：在字符串常量池中查找有没有“abc”，有则作为参数，就是创建了一个对象；没有则在常量池中创建，然后返回引用，那就是创建了两个对象。\r答案2：直接在堆中创建一个新的对象。不检查字符串常量池，也不会把对象放入池中。\r网上正确答案貌似是两个，求指教到底是哪个！\r\r\r第一种可以写成String a = &quot;abc&quot;;String s = new String(a) ,那么第一种解释说得通，String a = &quot;abc&quot;会在常量池创建“abc”。但是string类的intern()是在字符串常量池中查找该字符串，有就返回，没有就创建，如果第一种解释说得通，那这个方法就废了。","like_count":8,"discussions":[{"author":{"id":1320592,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/90/f68608f3.jpg","nickname":"gwl","note":"","ucode":"24F334E9AC0313","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281209,"discussion_content":"是第一种说法。可以去看下string的构造方法\n/**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    public String(String original) {\n        this.value = original.value;\n        this.hash = original.hash;\n    }\n版本是 java version &#34;1.8.0_221&#34;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591692334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8750,"user_name":"echo","can_delete":false,"product_type":"c1","uid":1127647,"ip_address":"","ucode":"8A79CC278ADF2F","user_header":"https://static001.geekbang.org/account/avatar/00/11/34/df/551fbbed.jpg","comment_is_top":false,"comment_ctime":1526401523,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35886139891","product_id":100006701,"comment_content":"String是immutable，在security,  Cache，Thread Safe等方面都有很好的体现。<br>Security: 传参的时候我们很多地方使用String参数，可以保证参数不会被改变，比如数据库连接参数url等，从而保证数据库连接安全。<br>Cache: 因为创建String前先去Constant Pool里面查看是否已经存在此字符串，如果已经存在，就把该字符串的地址引用赋给字符变量；如果没有，则在Constant Pool创建字符串，并将字符串引用赋给字符串变量。所以存在多个引用指向同一个字符串对象，利用缓存有助提高内存开销。<br>Thread Safe: 因为String是immutable， 所以它是Automatically thread safe. <br>问题：我一直不能很好的理解最后一个体现，到底String是如何体现在thread safe，老师能不能用简短的线程代码给讲讲？非常感激。","like_count":8,"discussions":[{"author":{"id":2011492,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/b1/64/5570b054.jpg","nickname":"逍遥","note":"","ucode":"EDC322BAB83D67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273808,"discussion_content":"String 是由immutable修饰，每次修改都会创建一个新的String对象。多线程之间的操作不会互相影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590502112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12232,"user_name":"Olm.chenteng","can_delete":false,"product_type":"c1","uid":1103093,"ip_address":"","ucode":"C541B361A6FAA4","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f5/bf9f8711.jpg","comment_is_top":false,"comment_ctime":1528707938,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27298511714","product_id":100006701,"comment_content":"String s1 = new String(&quot;do&quot;);<br>        s1.intern();<br>        String s2 = &quot;do&quot;;<br><br>        System.out.println(s1 == s2);&#47;&#47;false<br><br>        String s3 = new String(&quot;12&quot;) + new String(&quot;34&quot;);<br>        s3.intern();<br>        String s4 = &quot;1234&quot;;<br>        System.out.println(s3 == s4);&#47;&#47;true<br><br>求解,为什么在第二段比较中会返回true,从字节码看s3应该就是生成了一个stringbuilder对象完成连接操作后执行了toString, s3不是应该仍然是堆内的对象地址吗?为什么会和常量池中的地址相等?","like_count":6,"discussions":[{"author":{"id":1116621,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLTOaSibFSEnoOpTdqLlWhU9HjaVTjmnE9lGCMPnVyZGNsJmve0kcFJ3K605atGxEaFpCoxibAarDicA/132","nickname":"chiang922","note":"","ucode":"3BBF7AAA6F0303","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334714,"discussion_content":"s3.intern();这一句代码，是将 s3中的“1234”字符串放入 String 常量池中，因为此时常量池中不存在“1234”字符串；与java6不同的是jdk7 中常量池不在 Perm 区域了，这块做了调整。常量池中不需要再存储一份对象了，可以直接存储堆中的引用。这份引用指向 s3 引用的对象。 也就是说引用地址是相同的。详见：https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607949428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2377406,"avatar":"","nickname":"杨毅","note":"","ucode":"189923D892549F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1116621,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLTOaSibFSEnoOpTdqLlWhU9HjaVTjmnE9lGCMPnVyZGNsJmve0kcFJ3K605atGxEaFpCoxibAarDicA/132","nickname":"chiang922","note":"","ucode":"3BBF7AAA6F0303","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393141,"discussion_content":"文中连接我看了，有个地方不明白\n这是连接原文一段话： s 和 s2 对象。 String s = new String(&#34;1&#34;); 第一句代码，生成了2个对象。常量池中的“1” 和 JAVA Heap 中的字符串对象。\n那么 new String(&#34;1&#34;) + new String(&#34;1&#34;);实际是调用StringBuilder.toString方法，源码是new String(value, 0, count); 那么这个新new String不会也再常量池创建一个对象吗？而是直接指向堆内存地址？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631265175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334714,"ip_address":""},"score":393141,"extra":""}]}]},{"had_liked":false,"id":9782,"user_name":"©®","can_delete":false,"product_type":"c1","uid":1121500,"ip_address":"","ucode":"1C5DECC46E5106","user_header":"https://static001.geekbang.org/account/avatar/00/11/1c/dc/9bd86256.jpg","comment_is_top":false,"comment_ctime":1527084570,"is_pvip":false,"replies":[{"id":"3013","content":"new只是创建新的；另外，有没有想过怎么通过一段程序证明？这样更有助于理解","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527108376,"ip_address":"","comment_id":9782,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27296888346","product_id":100006701,"comment_content":"String s2=new String(&quot;AB&quot;)，，如果，常量池中没有AB,那么会不会去常量池创建，望解答","like_count":7,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418205,"discussion_content":"new只是创建新的；另外，有没有想过怎么通过一段程序证明？这样更有助于理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527108376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84923,"user_name":"Yim","can_delete":false,"product_type":"c1","uid":1241898,"ip_address":"","ucode":"742B8E95489B5B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f3/2a/35427be5.jpg","comment_is_top":false,"comment_ctime":1554945791,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"18734814975","product_id":100006701,"comment_content":"”原来char数组的实现，字符串的最大长度就是数组本身的长度限制，但是替换成 byte 数组,样数组长度下，存储能力是退化了一倍.“<br>这块不太了解啊 求大牛解释","like_count":4,"discussions":[{"author":{"id":1100149,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/75/62ce2d69.jpg","nickname":"猿人谷","note":"","ucode":"85106C7FB14C43","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39042,"discussion_content":"一个char是两个byte","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571883445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12994,"user_name":"Len","can_delete":false,"product_type":"c1","uid":1022767,"ip_address":"","ucode":"53C623CE17973F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/2f/b7a3625e.jpg","comment_is_top":false,"comment_ctime":1529255109,"is_pvip":true,"replies":[{"id":"4427","content":"会，具体时机我也没注意","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1529424152,"ip_address":"","comment_id":12994,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18709124293","product_id":100006701,"comment_content":"老师，这章学习到了 Java 8 以后，字符串常量池被移到了堆中，那么，如果通过 String.intern() 产生了大量的字符串常量，JVM 会对它们进行垃圾回收吗？","like_count":4,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419491,"discussion_content":"会，具体时机我也没注意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529424152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9890,"user_name":"So Leung","can_delete":false,"product_type":"c1","uid":1132303,"ip_address":"","ucode":"0366A1DC7B7766","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/0f/b75e839c.jpg","comment_is_top":false,"comment_ctime":1527147002,"is_pvip":false,"replies":[{"id":"3251","content":"嗯，重要的不是结论，而是如何得到结论","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527484353,"ip_address":"","comment_id":9890,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18707016186","product_id":100006701,"comment_content":"经过验证new String时，不会再常量池中创建对象。","like_count":5,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418242,"discussion_content":"嗯，重要的不是结论，而是如何得到结论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527484353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1067994,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4b/da/c93eaab5.jpg","nickname":"18610296143","note":"","ucode":"1D4C68E468C871","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344698,"discussion_content":"我想问一下是怎么验证的步骤是怎样儿的，怎么知道常量池中没有创建对象的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611561978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2048720,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/joXcgmQODQ7KJ0uObJTIGXuqK5zg6TUkdusaw0MVGaVq6FtePBVscdwvXNBnTJuuoe7W91F591WrR4lFksqiafg/132","nickname":"LAUSen","note":"","ucode":"FE104E287CDF61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289215,"discussion_content":"new 的时候会在常量缓存池创建对象，您是jdk什么版本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594028323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8608,"user_name":"嘎哈","can_delete":false,"product_type":"c1","uid":1110633,"ip_address":"","ucode":"B0E5E7FC63DEE1","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/69/a0707c76.jpg","comment_is_top":false,"comment_ctime":1526346953,"is_pvip":false,"replies":[{"id":"2569","content":"已回复，一个char两个byte，注意下各个类型宽度","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526367933,"ip_address":"","comment_id":8608,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18706216137","product_id":100006701,"comment_content":"char 数组的实现，字符串的最大长度就是数组本身的长度限制，但是替换成 byte 数组，同样数组长度下，存储能力是退化了一倍的！<br>怎么理解呢？ 举个例子呗","like_count":4,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417789,"discussion_content":"已回复，一个char两个byte，注意下各个类型宽度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526367933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117786,"user_name":"敲键盘的人","can_delete":false,"product_type":"c1","uid":1232210,"ip_address":"","ucode":"59AFFFE9DA5B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/cd/52/a2478536.jpg","comment_is_top":false,"comment_ctime":1564130476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14449032364","product_id":100006701,"comment_content":"评论区真是高手云集，花一个专栏的钱感觉像两个专栏一样","like_count":4},{"had_liked":false,"id":37060,"user_name":"淡定","can_delete":false,"product_type":"c1","uid":1245446,"ip_address":"","ucode":"A4A075F2A0CE18","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4lQqXdFkO0ke8vCxL1lAfy5qAOseO1af7rSZyQBcibI8pMfbj1u9pXAdxHZkvomuaqGhPrkJs9FA/132","comment_is_top":false,"comment_ctime":1541435633,"is_pvip":false,"replies":[{"id":"16130","content":"谢谢，是有点考虑不周","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1543625601,"ip_address":"","comment_id":37060,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14426337521","product_id":100006701,"comment_content":"  public class StringConcat {<br>        public static void main(String[] args) {<br>             String myStr = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot; + &quot;dd&quot;;   <br>             System.out.println(&quot;My String:&quot; + myStr);   <br>        } <br>  }<br>作者举得的这个例子,和后面的解释有迷惑性 ,首先 ,第一句  String myStr = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot; + &quot;dd&quot;;    编译器已经帮你合并为 myStr = &quot;aabbccdd&quot; 了,所谓后面的StringBuilder 是因为System.out.println 里面有字符串拼接..... ","like_count":3,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428150,"discussion_content":"谢谢，是有点考虑不周","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543625601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":25014,"user_name":"后端进阶","can_delete":false,"product_type":"c1","uid":1125656,"ip_address":"","ucode":"480F48F5378307","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/18/918eaecf.jpg","comment_is_top":false,"comment_ctime":1537236290,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14422138178","product_id":100006701,"comment_content":"回答一下明翼同学的解答：我的理解是 new String 只会在堆中创建对象，并不会把字面量缓存到常量池中，要执行了intren方法，这时才会把字面量缓存到常量池中。","like_count":3},{"had_liked":false,"id":8733,"user_name":"OnE","can_delete":false,"product_type":"c1","uid":1006058,"ip_address":"","ucode":"5D10DB1CBE6DCF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/ea/38c063d5.jpg","comment_is_top":false,"comment_ctime":1526390823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14411292711","product_id":100006701,"comment_content":"你好，能否讲解一下StringConcatFactory的内在原理，最好能在源码这一层，谢谢。","like_count":3},{"had_liked":false,"id":8681,"user_name":"Chris","can_delete":false,"product_type":"c1","uid":1124246,"ip_address":"","ucode":"1A9C8E2401D395","user_header":"","comment_is_top":false,"comment_ctime":1526369031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14411270919","product_id":100006701,"comment_content":"new string（“ghhh”）.intern（）；会从堆到常量池是这个作用吗","like_count":3},{"had_liked":false,"id":8678,"user_name":"王磊","can_delete":false,"product_type":"c1","uid":1050085,"ip_address":"","ucode":"A4DE9804642A08","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/e5/aa579968.jpg","comment_is_top":false,"comment_ctime":1526366681,"is_pvip":false,"replies":[{"id":"2583","content":"我理解是","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526369416,"ip_address":"","comment_id":8678,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14411268569","product_id":100006701,"comment_content":"假如我执行如下操作, 并且常量池里确实已缓存过&quot;abc&quot;, 那么执行intern()后s会指向常量池的&quot;abc&quot;, 堆中的&quot;abc&quot;会被回收，是这样吗？<br>String s = new String(&quot;abc&quot;);<br>s.intern()<br><br>这样的话就会多产生一个垃圾。不想产生垃圾的话，就创建时直接指向常量池中的&quot;abc&quot;<br>String s = &quot;abc&quot;;<br><br>请老师确实理解是否正确。<br><br>","like_count":3,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417818,"discussion_content":"我理解是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526369416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143976,"user_name":"Chaos浩","can_delete":false,"product_type":"c1","uid":1675943,"ip_address":"","ucode":"4FFAE6EEAA460B","user_header":"https://static001.geekbang.org/account/avatar/00/19/92/a7/00fefed5.jpg","comment_is_top":false,"comment_ctime":1571818957,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10161753549","product_id":100006701,"comment_content":"看完各个评论的猜测:<br>String s3 = new String(&quot;12&quot;) + new String(&quot;34&quot;);&#47;&#47;产生堆2个对象,常量池2个对象 , 相加时堆中产生第三个对象<br>s3.intern();&#47;&#47;将第三个对象的引用保存到常量池<br>String s4 = &quot;1234&quot;;&#47;&#47;常量池存在s3引用且s3指向的值与s4相等,返回s3的引用<br>System.out.println(s3 == s4);&#47;&#47;true<br><br><br><br>String s3 = new String(&quot;1234&quot;);&#47;&#47;产生堆1个对象,常量池1个对象<br>s3.intern();&#47;&#47;堆对象和常量池对象值相同,因此没什么变化<br>String s4 = &quot;1234&quot;;&#47;&#47;常量池存在改对象,返回引用,因此s3还是指向堆,s4指向常量池<br>System.out.println(s3 == s4);&#47;&#47;false","like_count":2},{"had_liked":false,"id":101442,"user_name":"codeing","can_delete":false,"product_type":"c1","uid":1432868,"ip_address":"","ucode":"24F6F87CB99CE8","user_header":"https://static001.geekbang.org/account/avatar/00/15/dd/24/d29f5d03.jpg","comment_is_top":false,"comment_ctime":1559809690,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10149744282","product_id":100006701,"comment_content":"    \tString s3 = new String(&quot;12&quot;) + new String(&quot;34&quot;);<br>    \ts3.intern();<br>    \tString s4 = &quot;1234&quot;;<br>    \tSystem.out.println(s3 == s4);&#47;&#47;true<br>\t\t<br>\t\t<br>\t\t<br>    \tString s3 = new String(&quot;1234&quot;);<br>    \ts3.intern();<br>    \tString s4 = &quot;1234&quot;;<br>    \tSystem.out.println(s3 == s4);&#47;&#47;false<br><br>杨老师为什么这个输出的结果不同","like_count":2,"discussions":[{"author":{"id":1675943,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/a7/00fefed5.jpg","nickname":"Chaos浩","note":"","ucode":"4FFAE6EEAA460B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38686,"discussion_content":"猜测: \nString s3 = new String(&#34;12&#34;) + new String(&#34;34&#34;);//产生堆2个对象,常量池2个对象 , 相加时堆中产生第三个对象\ns3.intern();//将第三个对象的引用保存到常量池\nString s4 = &#34;1234&#34;;//常量池存在s3引用且s3指向的值与s4相等,返回s3的引用\nSystem.out.println(s3 == s4);//true\n\n\n\nString s3 = new String(&#34;1234&#34;);//产生堆1个对象,常量池1个对象\ns3.intern();//堆对象和常量池对象值相同,因此没什么变化\nString s4 = &#34;1234&#34;;//常量池存在改对象,返回引用,因此s3还是指向堆,s4指向常量池\nSystem.out.println(s3 == s4);//false","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571818910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2928763,"avatar":"","nickname":"小羊","note":"","ucode":"B8A684FABC6AD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579667,"discussion_content":"intern用法上应该不是这么用，虽然我不清楚为啥会不同。\nString s3 = new String(&#34;1234&#34;);\n        /*将此String对象添加到池中并返回对该String对象的引用*/\n        String intern = s3.intern();\n        String s4 = &#34;1234&#34;;\n        System.out.println(intern == s4);//true","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657607911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83546,"user_name":"zhihai.tu","can_delete":false,"product_type":"c1","uid":1045888,"ip_address":"","ucode":"61371EA3EF6988","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/80/baddf03b.jpg","comment_is_top":false,"comment_ctime":1554645930,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"10144580522","product_id":100006701,"comment_content":"1、执行速度：StringBuilder&gt;StringBuffer&gt;String<br>2、StringBuilder是线程不安全的，StringBuffer是线程安全的（synchronize）<br>3、String两个特性：1）不可变 2）使用了字符串常量池（不包括new String(xxx)）<br>4、StringBuilder和StringBuffer底层都是char数组，首先按照默认大小申请一个字符数组，不断append后，当超越默认数组大小后，会创建一个更大的数组，然后将旧数组内容复制过来，在丢弃旧数组。<br>5、String适用于少量字符串拼接；StringBuilder适用于单线程情况下大量字符串拼接；StringBuffer适用于多线程情况下大量字符串拼接。","like_count":2,"discussions":[{"author":{"id":1583833,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/E3XKbwTv6WTssolgqZjZCkiazHgl2IdBYfwVfAcB7Ff3krsIQeBIBFQLQE1Kw91LFbl3lic2EzgdfNiciaYDlJlELA/132","nickname":"rike","note":"","ucode":"920AAD0BD9245C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":150101,"discussion_content":"JDK9后StringBuilder和StringBuffer底层都是byte数组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579789053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32055,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1539396194,"is_pvip":true,"replies":[{"id":"12422","content":"不见得是最优的，普通情况是可以","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1540311131,"ip_address":"","comment_id":32055,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10129330786","product_id":100006701,"comment_content":"JDK8反编译看到了字符串相加会优化成stringBuilder那么是否可以认为，在JDK8中字符串拼接可以直接相加了哦？不需要自己写stringbuilder了？","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426620,"discussion_content":"不见得是最优的，普通情况是可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540311131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":26124,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1010887,"ip_address":"","ucode":"1E4AEB9C3AB652","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/c7/e12ed041.jpg","comment_is_top":false,"comment_ctime":1537502544,"is_pvip":false,"replies":[{"id":"9890","content":"试试new出的对象和文本常量==","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1537896581,"ip_address":"","comment_id":26124,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10127437136","product_id":100006701,"comment_content":"请问老师该怎么证明new String(&quot;ABCDE&quot;)不会将&quot;ABCDE&quot;放在常量池中呢？","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424534,"discussion_content":"试试new出的对象和文本常量==","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537896581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19816,"user_name":"晓","can_delete":false,"product_type":"c1","uid":1155149,"ip_address":"","ucode":"C8EF82680F30A6","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/4d/37116342.jpg","comment_is_top":false,"comment_ctime":1534090090,"is_pvip":false,"replies":[{"id":"7054","content":"对","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1534319087,"ip_address":"","comment_id":19816,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10124024682","product_id":100006701,"comment_content":"数组的大小是int型的，所以int最大值就是它的限制吗？","like_count":3,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421993,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534319087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13602,"user_name":"王建坤","can_delete":false,"product_type":"c1","uid":1134287,"ip_address":"","ucode":"84F140AF468D1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/cf/21bea6bb.jpg","comment_is_top":false,"comment_ctime":1529843253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10119777845","product_id":100006701,"comment_content":"讲师你好，有个疑问：“默认缓存大小也在不断地扩大中，从最初的1009，到7u40以后被修改为60013。”<br>这里的1009 60013是指字符串的个数？还是内存占用？如果是内存占用的话，那单位是什么？","like_count":2},{"had_liked":false,"id":9887,"user_name":"So Leung","can_delete":false,"product_type":"c1","uid":1132303,"ip_address":"","ucode":"0366A1DC7B7766","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/0f/b75e839c.jpg","comment_is_top":false,"comment_ctime":1527145614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10117080206","product_id":100006701,"comment_content":"那想问下，当new String(“a”)时，不会在常量池创建对象？","like_count":2},{"had_liked":false,"id":9135,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1526629228,"is_pvip":false,"replies":[{"id":"2767","content":"据我所知，字符串hashCode是取决于内容，而不是地址；<br>对象是否同一个用==判断；<br>一定要区分，==，equals，hashCode，搜下或者看看书吧","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526688056,"ip_address":"","comment_id":9135,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10116563820","product_id":100006701,"comment_content":"杨老师，问个问题：<br>String str1 =&quot;abc&quot;;<br>String str2 = new String(&quot;abc&quot;);<br>理论上,str1是放入字符串长量池，str2是新增一个对象，新开辟一块地址。<br>但是通过代码调试，他们的HashCode一样，就说明他们是引用同一个地址。<br>请帮忙分析一下。","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417981,"discussion_content":"据我所知，字符串hashCode是取决于内容，而不是地址；\n对象是否同一个用==判断；\n一定要区分，==，equals，hashCode，搜下或者看看书吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526688056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8657,"user_name":"雪未央","can_delete":false,"product_type":"c1","uid":1124853,"ip_address":"","ucode":"E6AEFCD77ED6C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/f5/b19dd1d4.jpg","comment_is_top":false,"comment_ctime":1526356533,"is_pvip":false,"replies":[{"id":"2566","content":"正解","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526367326,"ip_address":"","comment_id":8657,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10116291125","product_id":100006701,"comment_content":"char占两个byte,同样长度的char数组和byte数组容量差两倍，不知道这样理解对不对？","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417810,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526367326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8647,"user_name":"冬末未末","can_delete":false,"product_type":"c1","uid":1118801,"ip_address":"","ucode":"09F08206EF202D","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/51/f309515c.jpg","comment_is_top":false,"comment_ctime":1526352279,"is_pvip":true,"replies":[{"id":"2586","content":"谢谢指出","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526370729,"ip_address":"","comment_id":8647,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10116286871","product_id":100006701,"comment_content":"用过String最大的坑就是subString方法，在1.6版本导致的内存泄露，老师都没有讲","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417806,"discussion_content":"谢谢指出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526370729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8612,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1526347154,"is_pvip":false,"replies":[{"id":"2578","content":"环境编码","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526368390,"ip_address":"","comment_id":8612,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10116281746","product_id":100006701,"comment_content":"思考题里的平台默认编码，平台指的是JVM所在的操作系统，还是指语言平台本身呢？<br>","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417792,"discussion_content":"环境编码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526368390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172876,"user_name":"HackMSF","can_delete":false,"product_type":"c1","uid":1697626,"ip_address":"","ucode":"BA021D3CDBCBF8","user_header":"https://static001.geekbang.org/account/avatar/00/19/e7/5a/0010f3f7.jpg","comment_is_top":false,"comment_ctime":1579345678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5874312974","product_id":100006701,"comment_content":"#产出# 梳理JVM内存模型 https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;103041358","like_count":1},{"had_liked":false,"id":94143,"user_name":"思而学","can_delete":false,"product_type":"c1","uid":1128821,"ip_address":"","ucode":"AFCFFDC78A7266","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iavhNQNYg0tY5DFibJNnOmsUicjQalo90rbic5jricgps1EUeibIb9yhiayicS5QiapicldcXmeDHPDfHX48AYicZ8XQiaS3ag/132","comment_is_top":false,"comment_ctime":1557730335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852697631","product_id":100006701,"comment_content":"思路：主要 java 对字符串这个在编码中最常用的数据是怎么考虑的，实现，意义。<br>\t• 设计的角度<br>\tString 类使用数组实现，1.5 之前用的是 char 数组，之后用的是 byte 数组。 天生就被设计成了不可变类，class 、属性、方法都被 final 修饰，在对字符串就行拼接、截取操作都产生新的 String 对象。<br>\tStringBuffer 是为了应对 java String 在进行一些操作时发生的一些额外性能开销而出现的，也是使用数组实现，默认字符数组大小未 16，在进行字符串的拼接操作时会新建一个新的数组，然后将之前的数据拷贝过去。所有的方法都被 synchronized 关键字修饰，所以是天生的线程安全类。<br>\tStringBuilder 与 StringBuffer 相比，都是继承 AbstractStringBuilder 类，实现上唯一的区别就是方法没有被 synchronized 关键字修饰。<br>\t• 优化发展<br>\tStringBuilder 补充了 String 不可变性质造成的新能开销，StringBuffer 为 StringBuilder 实现了线程安全保障。<br>\t• 自身发展<br>\tString 实现从使用 char 数组实现到使用 byte 实现，节省了内存开销。<br>\t• 扩展<br>\t字符串的缓存，当 String 使用直接赋值的时候，jvm 会将字符串放入字符串常量池中，使用 new 关键字的不会。字符串的产量池位于堆中。<br>线程安全的实现。","like_count":1},{"had_liked":false,"id":92313,"user_name":"PoL","can_delete":false,"product_type":"c1","uid":1416147,"ip_address":"","ucode":"72BA3C2D50D463","user_header":"https://static001.geekbang.org/account/avatar/00/15/9b/d3/41d04923.jpg","comment_is_top":false,"comment_ctime":1557229793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852197089","product_id":100006701,"comment_content":"String java9 before  is char[] ——2bytes ，after is bytes <br>大量不变常量使用 String<br>频繁拼接操作StringBuilder StringBuffer<br>final  immutable 不可修改<br>String create is 常量池检查返回引用copy ，有就返回引用拷贝，否则创建对象放入常量池，返回引用地址，<br>避免拼接频换的创建String对象，StringBuild（单线程，性能好点比StringBuffer）  StringBuffer(线程安全 synchinize 性能稍弱)<br><br>","like_count":1},{"had_liked":false,"id":90678,"user_name":"Hero","can_delete":false,"product_type":"c1","uid":1012030,"ip_address":"","ucode":"14DD4A09C4FF8F","user_header":"","comment_is_top":false,"comment_ctime":1556608588,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5851575884","product_id":100006701,"comment_content":"先上代码：<br>String s3 = new String(&quot;helloworld&quot;);<br>s3.intern();<br>String s4 = &quot;helloworld&quot;;<br>System.out.println(s3 == s4);<br>&#47;&#47; JDK是1.8，返回结果是false。<br>分析如下：s3.intern()方法会先检查常量池中有没有&quot;helloworld&quot;，如果&quot;helloworld&quot;没有在创建s3的时候放到常量池中去，s3.intern()方法就会去堆中把new String(&quot;helloworld&quot;)的引用赋值给常量池中。s4实际拿到的就是和s3一样的指向堆中的引用。返回结果就会是true。而结果不是，所以在创建s3对象的时候就把“helloworld”放到常量池了。另一个例子如下：<br>String s = new String(&quot;1&quot;) + new String(&quot;2&quot;);<br>s.intern();<br>String s1 = &quot;12&quot;;<br>System.out.println(s1 == s);<br>返回结果是true。","like_count":1},{"had_liked":false,"id":82186,"user_name":"请叫我华仔","can_delete":false,"product_type":"c1","uid":1465300,"ip_address":"","ucode":"307D39B12CEF61","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/d4/f4a2888a.jpg","comment_is_top":false,"comment_ctime":1554141966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5849109262","product_id":100006701,"comment_content":"# 字符串<br>字符串拼接：在jdk8中编译时对非静态的字符串拼接会编译成stringbuilder。jdk9中将字符串拼接的优化与编译解耦，依靠运行时去优化。老版本的class也能在将来新版本中得到优化。<br><br>字符串缓存：java6开始可以通过intern来显式去重。java6把字符串常量池放在永久代，可能导致永久代溢出问题。jdk7把字符串常量池移动到了堆空间，jdk8用matesapce取代了永久代。<br><br>紧凑字符串：在jdk9中，string的实现从字符数组改成了字节数组，加上一个coder，内存占用小。","like_count":1},{"had_liked":false,"id":75501,"user_name":"java届-Mr.吉","can_delete":false,"product_type":"c1","uid":1252541,"ip_address":"","ucode":"6CF474AB180D9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/bd/23aeb6d0.jpg","comment_is_top":false,"comment_ctime":1552404908,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5847372204","product_id":100006701,"comment_content":"这种便利甚至体现在拷贝构造函数中，由于不可变，Immutab对象在拷贝时不需要额外复制数据。这句话应该如何理解？因为在后面，您又说到多次扩容会增加开销，还要进行arraycopy，这不矛盾吗？<br>字符串缓存中所讲的重复应该是指通过new创建的堆内存的字符串吧？因为字符串常量池不是可以保证只有一个对象实例嘛，我按照文章中说的，设置了G1 GC、并且开启了那个参数，但是好像比较两个字符串内容相同的两个对象，结果返回还是false，是我理解错了嘛？","like_count":1,"discussions":[{"author":{"id":1415666,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/f2/36e102e6.jpg","nickname":"爆米花","note":"","ucode":"4F8BC766DBC4CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302237,"discussion_content":"顶，我也想了解下immutable对象在拷贝时不需要额外复制数据是什么意思。还有拷贝构造函数是什么意思？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598858170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71747,"user_name":"8080！","can_delete":false,"product_type":"c1","uid":1167906,"ip_address":"","ucode":"E6CA44B737F16B","user_header":"https://static001.geekbang.org/account/avatar/00/11/d2/22/70a27a5a.jpg","comment_is_top":false,"comment_ctime":1551425475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5846392771","product_id":100006701,"comment_content":"谈一下我对String ——StringBuffer——StringBuilder<br>String 特性 <br>                不可改变 ，String对象一旦创建 就无法对其改变，当对象频繁使用，需要被多线程共享可以提供性能  因为省略同步和锁等待的时间<br>String 过于频繁的使用所以避免产生大量的String对象 ，引入的字符串常量池，当创建一个对象时会先到常量池中查找是否有相同的字符串对象，如果有返回直接引用字符串对象无需在创建  如果没有创建字符串对象 并存入常量池<br>如果是 new出来的String对象 不检查常量池 也不存入常量池  直接在  堆栈创建新的对象。<br>注意 String提供有inter()方法  调用该方法时 如果常量池有包括一个等于此String对象的字符串 会用（equals方法确定）则返回常量池的字符串，否则将此String对象添加到常量池中，并返回池中对象的引用<br>StringBuffer&#47;StringBuilder都继承AbstractStringBuilder抽象类，拥有几乎一致对外提供的调用接口；其底层在内存中的存储方式与String相同，都是以一个有序的字符序列（char类型的数组）进行存储，<br>不同点在与StringBuffer&#47;StringBuilder的值是可以改变的  对象不改变，<br>注意StringBuffer是线程安全的，但是StringBuilder是线程不安全的。可参看Java标准类库的源代码，StringBuffer类中方法定义前面都会有synchronize关键字。为此，StringBuffer的性能要远低于StringBuilder。<br><br><br>","like_count":1},{"had_liked":false,"id":69309,"user_name":"Donghe","can_delete":false,"product_type":"c1","uid":1094273,"ip_address":"","ucode":"CACB6F24480C70","user_header":"https://static001.geekbang.org/account/avatar/00/10/b2/81/9a175793.jpg","comment_is_top":false,"comment_ctime":1550714882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5845682178","product_id":100006701,"comment_content":"还是想深入下这个问题：<br>原来 char 数组的实现，字符串的最大长度就是数组本身的长度，byte array会使存储能力减少一倍。<br><br>在这里char占两个byte，所以同样最大的array length，byte array会少一半存储能力。<br>有没有可能在新的JDK实现里，某一种编码下，一个char占一个byte，这样保证了最大化的存储能力？<br>ISO编码和UTF-8编码下，一个字符所占的byte数量是不是不一样的？这样byte array的实现方式下，存储能力也是根据编码来决定的？<br>","like_count":1},{"had_liked":false,"id":21671,"user_name":"фщэьшух","can_delete":false,"product_type":"c1","uid":1116476,"ip_address":"","ucode":"0D6F69790925DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/3c/1bec447d.jpg","comment_is_top":false,"comment_ctime":1535241286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5830208582","product_id":100006701,"comment_content":"只有在字符串变量+字符串常量或者变量+变量时，才会调用stringbuilder.append()生成新的对象～<br>而常量+常量在编译阶段完成后，会自动合并～","like_count":1},{"had_liked":false,"id":11747,"user_name":"过冬","can_delete":false,"product_type":"c1","uid":1030237,"ip_address":"","ucode":"6E87C1E5AA7674","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/5d/83b615f3.jpg","comment_is_top":false,"comment_ctime":1528335362,"is_pvip":false,"replies":[{"id":"3862","content":"退化，占用空间小，最大能表达的信息就少了一半","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1528379315,"ip_address":"","comment_id":11747,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5823302658","product_id":100006701,"comment_content":"老师，是退化还是进化？<br>替换成 byte 数组，同样数组长度下，存储能力是退化了一倍的！<br>char变byte，数组长度不变，占用空间更小才对啊？","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418980,"discussion_content":"退化，占用空间小，最大能表达的信息就少了一半","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1528379315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10441,"user_name":"小墨迹","can_delete":false,"product_type":"c1","uid":1142798,"ip_address":"","ucode":"3CA9285F05CDE2","user_header":"https://static001.geekbang.org/account/avatar/00/11/70/0e/2a7a422c.jpg","comment_is_top":false,"comment_ctime":1527554421,"is_pvip":false,"replies":[{"id":"3362","content":"这的看编译器的策略，具体要问编译器专家了；<br>也许相关，9里改为StringConcatFactory，一个原因就是便于一致的优化，不然优化逻辑是碎片、脆弱的","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527608765,"ip_address":"","comment_id":10441,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5822521717","product_id":100006701,"comment_content":"<br>Jdk1.8<br>String str = &quot;aa&quot;;<br>str = str + &quot;bb&quot;;<br>与<br>String str = &quot;aa&quot;+&quot;bb&quot;<br>反编译结果不一样，求解，谢谢哒，<br>什么格式的书写会智能优化","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418480,"discussion_content":"这的看编译器的策略，具体要问编译器专家了；\n也许相关，9里改为StringConcatFactory，一个原因就是便于一致的优化，不然优化逻辑是碎片、脆弱的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527608765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10347,"user_name":"lo_","can_delete":false,"product_type":"c1","uid":1113798,"ip_address":"","ucode":"7F9D423616E647","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/c6/a62649ea.jpg","comment_is_top":false,"comment_ctime":1527493019,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5822460315","product_id":100006701,"comment_content":"代码荣耀说new的时候不检查字符串常量池.那请问老师<br>String str1 = &quot;abc&quot;;  <br>String str2 = new String(&quot;abc&quot;);  <br>第二行代码到底创建了几个对象呢.网上说1个.因为abc已经在常量池.但是如果new不检查常量池那是不是应该是两个对象呢?","like_count":1,"discussions":[{"author":{"id":2415448,"avatar":"https://static001.geekbang.org/account/avatar/00/24/db/58/a7a0a85b.jpg","nickname":"二饼","note":"","ucode":"48120565D135F7","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575322,"discussion_content":"应该是两个吧，【String str1 = &#34;abc&#34;;  】时检查常量池中是否存在&#34;abc&#34;对象，这次是不存在的，所以要创建一个对象；【String str2 = new String(&#34;abc&#34;);  】使用 new 关键字会强制在堆中创建一个对象引用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654747430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8727,"user_name":"魔曦","can_delete":false,"product_type":"c1","uid":1045408,"ip_address":"","ucode":"87BA5EC5B0BC42","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/a0/a693e561.jpg","comment_is_top":false,"comment_ctime":1526387922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5821355218","product_id":100006701,"comment_content":"String的不可变是指引用不可变吗？既然里面是一个char类型数组，我能改变数组中的某一个元素吗？<br>编码中字符集问题必须注意，否则会引起各种坑……<br>","like_count":1},{"had_liked":false,"id":8616,"user_name":"debugable","can_delete":false,"product_type":"c1","uid":1113497,"ip_address":"","ucode":"4CBF0A64E19BE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/99/6e05432a.jpg","comment_is_top":false,"comment_ctime":1526347281,"is_pvip":true,"replies":[{"id":"2567","content":"不用担心，我提到了API行为没变化，包括charAt之类全部都是如此","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526367792,"ip_address":"","comment_id":8616,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5821314577","product_id":100006701,"comment_content":"java9讲字符串内部使用字节数组保存，取一个中文字符串字符个数是不是就不能用length了？","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417795,"discussion_content":"不用担心，我提到了API行为没变化，包括charAt之类全部都是如此","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526367792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8599,"user_name":"DavidWhom佳传","can_delete":false,"product_type":"c1","uid":1130014,"ip_address":"","ucode":"C768B868115710","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/1e/01a794cb.jpg","comment_is_top":false,"comment_ctime":1526346279,"is_pvip":false,"replies":[{"id":"2575","content":"谢谢","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526368273,"ip_address":"","comment_id":8599,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5821313575","product_id":100006701,"comment_content":"老师，就这样面试题多讲讲挺好的","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417787,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526368273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8590,"user_name":"jutsu","can_delete":false,"product_type":"c1","uid":1124574,"ip_address":"","ucode":"95CEDEF5D085CF","user_header":"https://static001.geekbang.org/account/avatar/00/11/28/de/54667f13.jpg","comment_is_top":false,"comment_ctime":1526344969,"is_pvip":true,"replies":[{"id":"2576","content":"谢谢","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526368283,"ip_address":"","comment_id":8590,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5821312265","product_id":100006701,"comment_content":"地铁上看起来啦，从来没有string类型的线程问题，受教了","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417783,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526368283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346270,"user_name":"let_me_go","can_delete":false,"product_type":"c1","uid":1510177,"ip_address":"","ucode":"A5936F5C5E3D65","user_header":"https://static001.geekbang.org/account/avatar/00/17/0b/21/f1aea35b.jpg","comment_is_top":false,"comment_ctime":1652962931,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652962931","product_id":100006701,"comment_content":"String 不可变，可以想到final 的作用，可以想到immutable 设计思想，想到并发编程，如果变量是不可变的，并发编程中的很多问题就都没了，还可以想到函数式编程，lambda ","like_count":0},{"had_liked":false,"id":345899,"user_name":"Geek_c92e87","can_delete":false,"product_type":"c1","uid":3004724,"ip_address":"","ucode":"3BF423459478ED","user_header":"","comment_is_top":false,"comment_ctime":1652687159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652687159","product_id":100006701,"comment_content":"当然，在极端情况下，字符串也出现了一些能力退化，比如最大字符串的大小。你可以思考下，原来 char 数组的实现，字符串的最大长度就是数组本身的长度限制，但是替换成 byte 数组，同样数组长度下，存储能力是退化了一倍的！还好这是存在于理论中的极限，还没有发现现实应用受此影响。<br>老师，这里为啥是退化呢。是假设都存储汉字吗","like_count":0},{"had_liked":false,"id":344760,"user_name":"Geek_cd5c2d","can_delete":false,"product_type":"c1","uid":2994607,"ip_address":"","ucode":"20968ADBD00B90","user_header":"","comment_is_top":false,"comment_ctime":1651754108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651754108","product_id":100006701,"comment_content":"看得一脸懵逼，我就想问下你们都是几年的工作经验","like_count":0},{"had_liked":false,"id":338100,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1647301413,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647301413","product_id":100006701,"comment_content":"获取字节码或者解析字节码的时候，指定特定的字符编码，例如：UTF-8","like_count":0},{"had_liked":false,"id":297735,"user_name":"kajdyhsfidaporae","can_delete":false,"product_type":"c1","uid":2651204,"ip_address":"","ucode":"0B23A5B0C120BB","user_header":"https://static001.geekbang.org/account/avatar/00/28/74/44/0ce06583.jpg","comment_is_top":false,"comment_ctime":1623751675,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623751675","product_id":100006701,"comment_content":"反编译出来的代码看不懂呀，这是该怎么看字节码反编译出来的代码","like_count":0},{"had_liked":false,"id":296183,"user_name":"Geek_4a9319","can_delete":false,"product_type":"c1","uid":2645323,"ip_address":"","ucode":"1739BD8C922024","user_header":"","comment_is_top":false,"comment_ctime":1622796864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622796864","product_id":100006701,"comment_content":"评论区也是大佬云集，感谢你们的总结和扩展🍗🍗","like_count":0},{"had_liked":false,"id":292786,"user_name":"月半纟氏","can_delete":false,"product_type":"c1","uid":1168607,"ip_address":"","ucode":"490F517ECADEDD","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/df/10e2c4d3.jpg","comment_is_top":false,"comment_ctime":1620977696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620977696","product_id":100006701,"comment_content":"字符串相加反编译就是使用的StringBuilder,  那为什么大量拼接还推荐使用StringBuilder?","like_count":0},{"had_liked":false,"id":287233,"user_name":"蓝色天空","can_delete":false,"product_type":"c1","uid":2550337,"ip_address":"","ucode":"26B21D49EAD1E7","user_header":"https://static001.geekbang.org/account/avatar/00/26/ea/41/1f7b900b.jpg","comment_is_top":false,"comment_ctime":1617849657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617849657","product_id":100006701,"comment_content":"😳面试官应该不会问我这么深入，涨知识了","like_count":0},{"had_liked":false,"id":284901,"user_name":"冻柠七","can_delete":false,"product_type":"c1","uid":1053960,"ip_address":"","ucode":"40953CC9DD4C76","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/08/0a077e47.jpg","comment_is_top":false,"comment_ctime":1616516337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616516337","product_id":100006701,"comment_content":"简单总结，方便记忆下：<br>String、StringBuffer、StringBuilder有什么区别<br><br>- String是基础类  不可变 immutable, final<br>    - 底层使用char数组实现，JDK9之后是byte数组+编码code实现的紧凑数组<br>    - 拼接操作时会被JVM优化，例如JDK8会使用StringBuilder进行拼接操作<br>- StringBuffer 解决拼接时产生过多中间对象  线程安全 但是性能较差<br>    - 线程安全基于synchronized实现<br>    - 和StringBuilder的区别就是方法是否加了synchronized<br>- StringBuilder 和StringBuffer类似，但是非线程安全，性能不错，较为常用的选择","like_count":0},{"had_liked":false,"id":280606,"user_name":"陌兮","can_delete":false,"product_type":"c1","uid":1415619,"ip_address":"","ucode":"00CE47CAECD5CD","user_header":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","comment_is_top":false,"comment_ctime":1614262755,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614262755","product_id":100006701,"comment_content":"隔了一年再看专栏，看不懂的还是看不懂(꒦_꒦) ","like_count":1},{"had_liked":false,"id":275852,"user_name":"helloworld2021","can_delete":false,"product_type":"c1","uid":2423702,"ip_address":"","ucode":"439991CA282C57","user_header":"https://static001.geekbang.org/account/avatar/00/24/fb/96/8d9c7a7b.jpg","comment_is_top":false,"comment_ctime":1611707821,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1611707821","product_id":100006701,"comment_content":"数组本身的长度限制，但是替换成 byte 数组，同样数组长度下，存储能力是退化了一倍的。<br>这个一倍是怎么出来的？<br>","like_count":0,"discussions":[{"author":{"id":2415448,"avatar":"https://static001.geekbang.org/account/avatar/00/24/db/58/a7a0a85b.jpg","nickname":"二饼","note":"","ucode":"48120565D135F7","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575324,"discussion_content":"一个 char 数组的长度等于两个 byte 数组。因此由char[] 变成了 byte[]，导致最大能表达的信息就少了一半（这句话是老师上面的回复）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654747653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268793,"user_name":"acqierement","can_delete":false,"product_type":"c1","uid":1234980,"ip_address":"","ucode":"AC8DA74B9CB924","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/24/f48a38f4.jpg","comment_is_top":false,"comment_ctime":1608350828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608350828","product_id":100006701,"comment_content":"String底层使用字符序列，用final修饰，对象创建之后是不可变的。因为在程序编写中，会大量用到String常量，如果每次声明一个String引用都要新建一个String对象，会造成空间的极大浪费。于是在java的堆中开辟了一块存储空间String pool，用来存String常量对象。有多个引用指向同样的字符串时，实际指向的是同一个常量池的对象，不需要额外创建对象。不可变好处：用String作为hashMap的 key,String不可变保证了hash值的不可变；String不可变，是线程安全，被多线程共享时，提高程序性能;String做为网络连接中的参数，它的不变性提供了安全性。<br> 感觉小小的String, 大大大的神奇。<br>","like_count":0},{"had_liked":false,"id":263496,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1606143149,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1606143149","product_id":100006701,"comment_content":"这个面试题应该也很常见吧。<br><br>String，Immutable，final class，拼接、剪裁会产生新的 String 对象<br><br>StringBuffer，线程安全的可修改字符序列，各种修改数据的方法都加上了 synchronized 关键字<br><br>StringBuilder，绝大部分情况下字符拼接首选，去掉了 StringBuffer 中线程安全部分<br><br>StringBuffer 和 StringBuilder 都继承了 AbstractStringBuilder，底层都是利用可修改的（char 或 byte）数组。","like_count":0},{"had_liked":false,"id":262785,"user_name":"Lzyyxtk","can_delete":false,"product_type":"c1","uid":1377168,"ip_address":"","ucode":"D94E125307CE1C","user_header":"https://static001.geekbang.org/account/avatar/00/15/03/90/841d54e0.jpg","comment_is_top":false,"comment_ctime":1605842043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605842043","product_id":100006701,"comment_content":"你好杨老师, 原文中有一句话我没有怎么理解:<br>&quot;原来 char 数组的实现，字符串的最大长度就是数组本身的长度限制，但是替换成 byte 数组，同样数组长度下，存储能力是退化了一倍的！&quot;<br>我原来认为引入byte数组就是在存储拉丁字符的时候比以前可以省掉一倍空间. 为什么在上面那句话里面, byte数组反而会存储能力退化一倍呢? 是不是对于非拉丁语言来说, 原来的char[]数组可以完整储存一个letter, 但是用新的byte[]的话就需要两个空间来存储这个letter, 由此带来的存储能力退化一倍?","like_count":0},{"had_liked":false,"id":255380,"user_name":"圈","can_delete":false,"product_type":"c1","uid":1637083,"ip_address":"","ucode":"7926384D7C0B0C","user_header":"","comment_is_top":false,"comment_ctime":1603332352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603332352","product_id":100006701,"comment_content":"谢谢老师的分享，深深地的感觉到自己重来没有学过一样。<br>","like_count":1},{"had_liked":false,"id":254021,"user_name":"祥","can_delete":false,"product_type":"c1","uid":2232082,"ip_address":"","ucode":"D50195C7122355","user_header":"https://static001.geekbang.org/account/avatar/00/22/0f/12/bf0bddeb.jpg","comment_is_top":false,"comment_ctime":1603018820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603018820","product_id":100006701,"comment_content":"做了下测试<br>    public static void main(String[] args) {<br>        String test1 = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot;;<br>        String test2 = &quot;aabbcc&quot;;<br>        System.out.println(&quot;test1==test2:&quot; + (test1 == test2));<br>        String test3 = &quot;&quot;;<br>        String test4 = test3 + &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot;;<br>        System.out.println(&quot;test4==test2:&quot; + (test4 == test2));<br>    }<br><br><br>输出结果：<br>test1==test2:true<br>test4==test2:false<br><br><br>使用的是jdk8","like_count":0},{"had_liked":false,"id":248495,"user_name":"蓝士钦","can_delete":false,"product_type":"c1","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1600179365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600179365","product_id":100006701,"comment_content":"有个疑问，jdk8编译的String连接操作，编译出来的字节码会转换为StringBuilder，那岂不是把String这种线程安全的机制变成了非线程安全的StringBuilder了吗","like_count":0},{"had_liked":false,"id":246182,"user_name":"Geek_36d","can_delete":false,"product_type":"c1","uid":1994930,"ip_address":"","ucode":"CEC91FE5451247","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/nULtwydx55TA3Kp1ribC1B2Ia4NJBuHrbj8RDFNa9ciab1MepC5iaUBmPUL5B6J71IKy3Of85TFdqEkkukR05sF3Q/132","comment_is_top":false,"comment_ctime":1599201474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599201474","product_id":100006701,"comment_content":"如果通过反射修改了String的值，比如将“abc”修改为“cbc”，这时候他们的hashcode是一样的嘛？对反射还是有一些不那么理解，到底是新开辟空间指向还是直接修改。","like_count":0},{"had_liked":false,"id":234066,"user_name":"asD","can_delete":false,"product_type":"c1","uid":1266063,"ip_address":"","ucode":"10B917B41ABBE5","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/8f/39e107f3.jpg","comment_is_top":false,"comment_ctime":1594569757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594569757","product_id":100006701,"comment_content":"StringBuilder和StringBuffer都是继承了AbstractStringBuilder类，内部维护一个char数组<br><br>不同之处<br>1、StringBuffer的所有方法前边都用synchronized修饰<br>2、StringBuffer内部多了一个变量 char[] toStringCache，用于toString方法的缓存，避免了每次toString都执行Arrays.copyOfRange方法","like_count":0},{"had_liked":false,"id":223943,"user_name":"你当像鸟飞向你的山","can_delete":false,"product_type":"c1","uid":1915046,"ip_address":"","ucode":"D20279F2D2867B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/a1nDkic8T3LRWe4hAWqCd32C6x3SM7IsmxKticU0icDt0oO95FYlmWhBnWdjiboaRh6c5fxu8t7E6VSElVfUZGe6Ww/132","comment_is_top":false,"comment_ctime":1591237256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591237256","product_id":100006701,"comment_content":"String 由final修饰，因此String类型拼接会产生新的对象，内存开销在三者之中最大，<br>StringBuffer是线程安全的字符串类型，使用append方法拼接长字符串不会额外产生新的对象，<br>StringBuilder是去掉了线程安全的字符串类型，用法和StringBuffer一致，但速度比StringBuffer快","like_count":0},{"had_liked":false,"id":201593,"user_name":"kiss","can_delete":false,"product_type":"c1","uid":1666988,"ip_address":"","ucode":"FB82014C34FC61","user_header":"https://static001.geekbang.org/account/avatar/00/19/6f/ac/7d3ca7a4.jpg","comment_is_top":false,"comment_ctime":1585809427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585809427","product_id":100006701,"comment_content":"String s = new String(&quot;xyz&quot;);创建了几个对象？<br>1，首先在string池内找，找到？不创建对象，否则创建，这样就一个对象。<br>2，遇到new运算符，在内存上创建一个对象，并将其返回给s,这样又一个对象。<br>这个对吗？","like_count":0},{"had_liked":false,"id":200979,"user_name":"地表十进制","can_delete":false,"product_type":"c1","uid":1855791,"ip_address":"","ucode":"C3B5B60748CE67","user_header":"","comment_is_top":false,"comment_ctime":1585701749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585701749","product_id":100006701,"comment_content":"越是简单类，里面的技术也值得推敲。","like_count":0},{"had_liked":false,"id":196625,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1923032,"ip_address":"","ucode":"271456A777B5FC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/57/d8/5816eb6b.jpg","comment_is_top":false,"comment_ctime":1585298086,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585298086","product_id":100006701,"comment_content":"太棒了","like_count":0},{"had_liked":false,"id":196221,"user_name":"ilovealt","can_delete":false,"product_type":"c1","uid":1113180,"ip_address":"","ucode":"35CB4FD836135B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/5c/a3d42cdb.jpg","comment_is_top":false,"comment_ctime":1585261867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585261867","product_id":100006701,"comment_content":"熟练使用和真正理解还是有很大的差距，深入学习Java和JVM。","like_count":0},{"had_liked":false,"id":192975,"user_name":"COOK","can_delete":false,"product_type":"c1","uid":1233016,"ip_address":"","ucode":"0F1C0E7CA4F36B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/78/a11a999d.jpg","comment_is_top":false,"comment_ctime":1584881056,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584881056","product_id":100006701,"comment_content":"string也随着jvm不断演化","like_count":0},{"had_liked":false,"id":191974,"user_name":"白不吃","can_delete":false,"product_type":"c1","uid":1033578,"ip_address":"","ucode":"F019914D8819C2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/6a/7f858f1f.jpg","comment_is_top":false,"comment_ctime":1584807282,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1584807282","product_id":100006701,"comment_content":"收益颇丰，感谢🙏","like_count":0},{"had_liked":false,"id":178013,"user_name":"Geek_6d5244","can_delete":false,"product_type":"c1","uid":1795825,"ip_address":"","ucode":"BB7F89A7102800","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2RTJuIicbjE4fIWiay4jd1zNvBjsgd3QyHo5Od2nQ48LfXcUk1gnVtpvSeG130y3TpjYqZttUduvrRNRY1B47QJw/132","comment_is_top":false,"comment_ctime":1581570088,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581570088","product_id":100006701,"comment_content":"作者把JVM，还有一些很底层的知识穿插着提，可能是篇幅所限，既讲不清楚，又让人看的云里雾里。你可能写代码不错，真的适合讲技术吗？倒是评论区有热心小伙伴。","like_count":0},{"had_liked":false,"id":172306,"user_name":"赵","can_delete":false,"product_type":"c1","uid":1730160,"ip_address":"","ucode":"EAC4390FD95EF9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/O3Uf8dibBnKKzibgEhvvKs9vic0dBavSJzn79fZVtH0AxcUT09bvOAYvr2f7vecmwiao7BBGgE5p8lXHSoBMdmQuBw/132","comment_is_top":false,"comment_ctime":1579146430,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1579146430","product_id":100006701,"comment_content":"“非静态的拼接逻辑在 JDK 8 中会自动被 javac 转换为 StringBuilder 操作”，老师我不太理解非静态是什么意思？是否意味着有静态的拼接逻辑？两者有什么区别？还有字符串使用“+”拼接已经在jdk8转换为StringBuilder操作了，还会产生大量无用的中间对象吗？是否意味着使用“+”拼接和StringBuilder操作没什么区别了？","like_count":0,"discussions":[{"author":{"id":1577580,"avatar":"https://static001.geekbang.org/account/avatar/00/18/12/6c/61a598e9.jpg","nickname":"苏暮沉觞","note":"","ucode":"532B816D4EF47B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":137850,"discussion_content":"静态指String s=“aa”+“bb”;拼接结果是不变的。非静态就是老师例子中，拼接存在变量的。区别在于静态的在编译过程中直接生成“aabb”,没有单独的“aa”,“bb”。非静态的会优化成StringBuilder。在jdk1.8中，大部分情况下+跟StringBuilder是差不多的。但是在如果你for循环下拼接字符串，如果你用+，会在每次循环都创建一个StringBuilder，因为回收这些要资源，所以优化的作用不大，建议在for外面new StringBuilder,在循环内用append拼接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579192643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170281,"user_name":"滴滴滴","can_delete":false,"product_type":"c1","uid":1335595,"ip_address":"","ucode":"C39F9452BD48A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/vODjZHz0z2oN86AHFMBSQ7VXgRa6EqM5icZQ7X198UKWrUK2c3tGrnpMmJAkWmh1Ric0nric4USlicAB5HKdiccgYEQ/132","comment_is_top":false,"comment_ctime":1578560376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578560376","product_id":100006701,"comment_content":"        String s3 = new String(&quot;1&quot;) + new String(&quot;1&quot;);<br>        s3.intern();<br>        String s4 = &quot;11&quot;;<br>        System.out.println(s3 == s4);&#47;&#47;false<br>        <br>        String s7 = new String(&quot;0&quot;) + new String(&quot;2&quot;);<br>        s7.intern();<br>        String s8 = &quot;02&quot;;<br>        System.out.println(s7 == s8);&#47;&#47;true<br><br>在JDK8环境输出如上，请问两者有什么区别？","like_count":0},{"had_liked":false,"id":160219,"user_name":"王浩","can_delete":false,"product_type":"c1","uid":1229190,"ip_address":"","ucode":"EF4CFD45533803","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/86/afd6e862.jpg","comment_is_top":false,"comment_ctime":1575893474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575893474","product_id":100006701,"comment_content":"过早的优化是万恶之源，考虑代码的可读性，可用性，和可靠性是代码的最关键的地方！","like_count":0},{"had_liked":false,"id":153057,"user_name":"Roy Liang","can_delete":false,"product_type":"c1","uid":1098898,"ip_address":"","ucode":"1DF5FC831A35DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/92/338b5609.jpg","comment_is_top":false,"comment_ctime":1574149649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574149649","product_id":100006701,"comment_content":"&quot;原来 char 数组的实现，字符串的最大长度就是数组本身的长度限制，但是替换成 byte 数组，同样数组长度下，存储能力是退化了一倍的&quot;，这怎么理解呢？","like_count":0},{"had_liked":false,"id":149244,"user_name":"慌张而黑糖","can_delete":false,"product_type":"c1","uid":1638878,"ip_address":"","ucode":"B4416885A301C8","user_header":"https://static001.geekbang.org/account/avatar/00/19/01/de/bf524817.jpg","comment_is_top":false,"comment_ctime":1573178260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573178260","product_id":100006701,"comment_content":"请问AbstractStringBuilder里的ensureCapacityInternal这个扩容的方法里有一句<br>int oldCapacity = value.length &gt;&gt; coder;<br>不是很理解什么意思，能给解释一下吗？","like_count":0},{"had_liked":false,"id":148763,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1573083359,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573083359","product_id":100006701,"comment_content":"5 5.1 String 是字符串操作的基础类，是immutable类，定义成final不可被继承，不可以被修改，拼接的时候，每次产生一个新对象，StringBuffer和StringBuilder都是在原来的对象去追加，StringBuffer在拼接的方法加上synchronized，只有当前线程才能操作，保证了线程安全，同时增加了性能的开销。！StringBuffer和StringBuilder底层是用CharArray实现的。5.2 String类是Immutable类，由于原生的不可变，保证了线程安全，因为不对内部数据进行修改，Immutable对象在拷贝时不需要复制数据，StringBuffer是在修改的方法上加上synchronized，StringBuffer和StringBuilder底层是用CharArray数组，初始长度是16，如果不够会进行扩容，产生扩容比如创建新数据组，复制数据等开销，5.3 字符串缓存 字段串缓存放在堆中，默认缓存大小60013，JVM会把所有字符串常量缓存起来，默认从缓存去取，否则将字符串缓存起来。JDK8u30之后G1 GC将相同数据指向同一份数据实现，JVM底层的改变，不需要类库做改动。在运行时，会利用Intrinsic机制，运行特殊优化的代码","like_count":0},{"had_liked":false,"id":145800,"user_name":"喵喵喵","can_delete":false,"product_type":"c1","uid":1211713,"ip_address":"","ucode":"E3AD8BF42E19DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/41/3c5b770b.jpg","comment_is_top":false,"comment_ctime":1572368765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572368765","product_id":100006701,"comment_content":"打卡！","like_count":0},{"had_liked":false,"id":144489,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1571951422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571951422","product_id":100006701,"comment_content":"字符串编码用系统默认编码不太好，跨系统通信或者人为修改系统的编码，就会出现编码和解码不匹配而导致乱码，最好字符串提供编码信息。","like_count":0},{"had_liked":false,"id":141048,"user_name":"qiezitx","can_delete":false,"product_type":"c1","uid":1664274,"ip_address":"","ucode":"AEA470E33B4C19","user_header":"https://static001.geekbang.org/account/avatar/00/19/65/12/98fe9d80.jpg","comment_is_top":false,"comment_ctime":1571106652,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571106652","product_id":100006701,"comment_content":"感谢老师，这篇String讨论其实是有高度的，包括评论区<br><br>基础有限，阅读时有几个疑问，或者说，停下来体会一下的时刻：<br>1、“String 是 Immutable 类的典型实现，原生的保证了基础线程安全”。一般就说线程安全或非线程安全，我理解不可变类是线程安全的。但这里提到“基础”线程安全，是否指某些细节或场景是非线程安全的，如置顶评论提到的hash值并不保证线程安全？<br>2、”这种便利甚至体现在拷贝构造函数中，由于不可变，Immutable 对象在拷贝时不需要额外复制数据&quot;，这里的”这种便利“个人理解应该指的是常量池，两个String引用指向同一对象，才不需要拷贝，和Immutable强调对象不可变没什么联系，反而是因为对象不可变，如substring这样操作是会拷贝内部数组的吧。<br><br>","like_count":0},{"had_liked":false,"id":140773,"user_name":"达摩院扫地僧♠","can_delete":false,"product_type":"c1","uid":1665874,"ip_address":"","ucode":"EE07A12C9CDF73","user_header":"https://static001.geekbang.org/account/avatar/00/19/6b/52/3fef0761.jpg","comment_is_top":false,"comment_ctime":1571046554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571046554","product_id":100006701,"comment_content":"看完作者的讲解，有点迷糊，看完评论感觉都是大神啊，稍微有头绪了，但是有个问题请教下：如果不主动调用intern，jvm会缓存字符串吗","like_count":0},{"had_liked":false,"id":117678,"user_name":"Geek_b92851","can_delete":false,"product_type":"c1","uid":1463431,"ip_address":"","ucode":"2E3D6490796C5A","user_header":"","comment_is_top":false,"comment_ctime":1564110277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564110277","product_id":100006701,"comment_content":"String str = new String(&quot;BB&quot;);<br>在JDK 1.8 中反编译结果看到的字节码是这样的：<br>3: new           #4                  &#47;&#47; class java&#47;lang&#47;String 堆中创建对象<br>6: dup                                &#47;&#47; 复制栈顶数值并将复制值压入栈顶<br>7: ldc           #5                  &#47;&#47; String BB 将String型常量值从常量池中推送至栈顶<br>9: invokespecial #6                  &#47;&#47; Method java&#47;lang&#47;String.&quot;&lt;init&gt;&quot;:(Ljava&#47;lang&#47;String;)V<br>我理解编译时已经将“BB”加入到常量池中了，new的时候会在堆中创建一个String对象，String对象的源值是从常量池中取出来的。请问下峰哥，不知道我的理解是否正确？","like_count":0},{"had_liked":false,"id":109365,"user_name":"孙鸿广","can_delete":false,"product_type":"c1","uid":1173698,"ip_address":"","ucode":"A827A868EF70BD","user_header":"https://static001.geekbang.org/account/avatar/00/11/e8/c2/2e3f792a.jpg","comment_is_top":false,"comment_ctime":1562026972,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562026972","product_id":100006701,"comment_content":"OOM是什么意思？","like_count":0,"discussions":[{"author":{"id":1335632,"avatar":"https://static001.geekbang.org/account/avatar/00/14/61/50/40682bc8.jpg","nickname":"Phyday","note":"","ucode":"DF1A394B6FB230","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88930,"discussion_content":"out of memory","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576740912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90638,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1335155,"ip_address":"","ucode":"CB0264C4D3FE17","user_header":"https://static001.geekbang.org/account/avatar/00/14/5f/73/bb3dc468.jpg","comment_is_top":false,"comment_ctime":1556593535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556593535","product_id":100006701,"comment_content":"问：String str = new String(&quot;str&quot;);会创建两个对象，一个在堆中，一个在常量池中。‘’公号-代码荣耀‘’说：new String(&quot;str&quot;) ；不会放入常量池，也就是只创建一个对象，请大佬解答！","like_count":0},{"had_liked":false,"id":90437,"user_name":"Tao","can_delete":false,"product_type":"c1","uid":1516198,"ip_address":"","ucode":"50C8B56E8A798F","user_header":"https://static001.geekbang.org/account/avatar/00/17/22/a6/fe17743b.jpg","comment_is_top":false,"comment_ctime":1556520135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556520135","product_id":100006701,"comment_content":"String是一个final修饰的类:对于无需改变的字符串,可以使用String;<br>StringBuffer是jdk5新增出来的,对于频繁操作字符串,在多线程环境下推荐使用该StringBuffer,该类中的操作方法使用synchronized修饰的,从而实现线程安全;<br>StringBuild也是jdk5新增出来的,与StringBuffer相比,StringBuild是线程不安全的,相对来说速度更快,性能更好;","like_count":0},{"had_liked":false,"id":88118,"user_name":"傲娇的小宝","can_delete":false,"product_type":"c1","uid":1493922,"ip_address":"","ucode":"C079B19BCC1B7C","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/a2/5e7c557e.jpg","comment_is_top":false,"comment_ctime":1555853381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555853381","product_id":100006701,"comment_content":"如果只是单系统的操作，因为都是平台默认编码是不会出现问题的，但是如果当存在多台机器信息交互的时候，如果两个平台使用的编码格式不同会造成乱码。","like_count":0},{"had_liked":false,"id":81150,"user_name":"张天屹","can_delete":false,"product_type":"c1","uid":1477612,"ip_address":"","ucode":"8BD6BD6DCF0F4F","user_header":"https://static001.geekbang.org/account/avatar/00/16/8b/ec/dc03f5ad.jpg","comment_is_top":false,"comment_ctime":1553822518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553822518","product_id":100006701,"comment_content":"我觉得Bin提出的问题是不用volatile甚至加锁的，因为可见性是针对先读后写的时候线程切换带来的数据不一致问题，但是目前hash的计算结果不依赖于先读后写，所以并不用保证它的缓存可见性，既然不存在数据安全性问题，那么久没必要无端的去损失性能了。 ","like_count":0},{"had_liked":false,"id":80142,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1553609637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553609637","product_id":100006701,"comment_content":"牛逼老师，又对字符串加深了印象","like_count":0},{"had_liked":false,"id":50995,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1545097392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545097392","product_id":100006701,"comment_content":"1String实现了Immutable接口，方法和属性都被final继承，表示字符串不可以修改。2StringBuffer和StringBuilder底层是用可变的char数组实现的，拼接过程由于不确定数据长度，默认是16细节，拼接过程长度不够，会构建新数组，进行数据拷贝。3String字符串拼接或裁剪会产生很多临时字符串对象，现在javac做了很多优化，会优化成StringBuilder。4字符串缓存的intern机制，字符串运行中有很多都是重复的， 现在的jvm量相同数据的字符串指向同一份数据做到的。5 jvm的底层优化机制intrinsic使用的特殊的本地代码6紧凑字符串的改进","like_count":0},{"had_liked":false,"id":49520,"user_name":"TopTop","can_delete":false,"product_type":"c1","uid":1201101,"ip_address":"","ucode":"FFC8CAC662A83B","user_header":"https://static001.geekbang.org/account/avatar/00/12/53/cd/e344985b.jpg","comment_is_top":false,"comment_ctime":1544704903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544704903","product_id":100006701,"comment_content":".net转Java的工程师表示：通俗易懂，点赞","like_count":0},{"had_liked":false,"id":49379,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1544674810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544674810","product_id":100006701,"comment_content":"很棒，开眼了<br>细思极恐呀！String这个是最常用的一个类，所以做的优化也最多，不同版本的JDK不同的JVM处理方式上也有所不同，有些面试题目不实际实验下，很容易回答失误。大牛们之所以这么玩，是为了这个类最容易使用、最小化引起各种问题，使用上屏蔽其设计的复杂性。<br>这篇资源反复看，更需要不同版本实操一下，才好！","like_count":0},{"had_liked":false,"id":42390,"user_name":"张滔","can_delete":false,"product_type":"c1","uid":1322636,"ip_address":"","ucode":"87ABAFF0E861E0","user_header":"https://static001.geekbang.org/account/avatar/00/14/2e/8c/b261e15a.jpg","comment_is_top":false,"comment_ctime":1542946367,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1542946367","product_id":100006701,"comment_content":"jdk1.8<br><br>String s3 = new String(&quot;12&quot;) + new String(&quot;34&quot;);<br>s3.intern();<br>String s4 = &quot;1234&quot;;<br>System.out.println(s3 == s4);&#47;&#47;false<br><br><br>String s3 = &quot;12&quot;+ new String(&quot;34&quot;);<br>s3.intern()；<br>String s4 = &quot;1234&quot;;<br>System.out.println(s3 == s4);&#47;&#47;true<br>","like_count":0,"discussions":[{"author":{"id":1505950,"avatar":"https://static001.geekbang.org/account/avatar/00/16/fa/9e/306a5ce7.jpg","nickname":"EdisonLi","note":"","ucode":"A85CBF3E2B5620","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4501,"discussion_content":"注释写准确 第一个是true 容易误导别人","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565495718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121548,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/0c/0054dbd2.jpg","nickname":"I♂佑","note":"","ucode":"D6EA7A7B8E8E6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46028,"discussion_content":"第一个是 true","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573112862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":42345,"user_name":"刘十一","can_delete":false,"product_type":"c1","uid":1035899,"ip_address":"","ucode":"5927D77D248E30","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/7b/fa0f9368.jpg","comment_is_top":false,"comment_ctime":1542941851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542941851","product_id":100006701,"comment_content":"2018-11-23我来的时候，专栏已经结束栏，看到评论区有人说：String s = new String(&quot;abc&quot;)  这个创建了2个对象，应该是看了美团的这个文章https:&#47;&#47;tech.meituan.com&#47;in_depth_understanding_string_intern.html他是jdk1.6&#47;7版本的结论，1.8有metaspace了，好像就不会放到常量池中，所以是1个，不知道是不是这样的？","like_count":0},{"had_liked":false,"id":41314,"user_name":"易水南风","can_delete":false,"product_type":"c1","uid":1123818,"ip_address":"","ucode":"A2A0F18228A5D0","user_header":"https://static001.geekbang.org/account/avatar/00/11/25/ea/ec869117.jpg","comment_is_top":false,"comment_ctime":1542765153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542765153","product_id":100006701,"comment_content":"老师您好。这样看起来好像String的intern方法和直接字符串常量一样都是常量池有则从常量池中获取，没有则创建并放入常量池？我的理解有误么？","like_count":0},{"had_liked":false,"id":39410,"user_name":"刚刚恏","can_delete":false,"product_type":"c1","uid":1036271,"ip_address":"","ucode":"8EB712C249E238","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/ef/723eb955.jpg","comment_is_top":false,"comment_ctime":1542268525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542268525","product_id":100006701,"comment_content":"老师，我个人认为：不光在上面讲义方面可以学习很多知识，在评论方面也能获得许多帮助，所以我想建议一下，对有关知识方面的评论，尽可能多会回复一下哈。","like_count":0},{"had_liked":false,"id":30898,"user_name":"流沙和小胖几","can_delete":false,"product_type":"c1","uid":1170612,"ip_address":"","ucode":"6C74B1F8478465","user_header":"","comment_is_top":false,"comment_ctime":1539045214,"is_pvip":false,"replies":[{"id":"12426","content":"yes","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1540311834,"ip_address":"","comment_id":30898,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539045214","product_id":100006701,"comment_content":"string是immutable的，对它的任何操作都不会改变string内部的成员。如果进行string的拼接会造成生成多个临时string。因此引入了stringbuffer和stringbuilder来实现拼接，他们都是通过内部维持一个数组来实现的。stringbuffer是线程安全的，stringbuilder不是，可以根据具体使用场景来选择合适的类。","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426138,"discussion_content":"yes","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540311834,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23766,"user_name":"右耳朵猫咪","can_delete":false,"product_type":"c1","uid":1014984,"ip_address":"","ucode":"3AB186CC780FBB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/c8/8627f5c1.jpg","comment_is_top":false,"comment_ctime":1536641456,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1536641456","product_id":100006701,"comment_content":"StringBuffer没有add方法 有insert方法","like_count":0},{"had_liked":false,"id":21607,"user_name":"фщэьшух","can_delete":false,"product_type":"c1","uid":1116476,"ip_address":"","ucode":"0D6F69790925DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/3c/1bec447d.jpg","comment_is_top":false,"comment_ctime":1535191264,"is_pvip":false,"replies":[{"id":"8296","content":"类似public String(String original)这种，也算是某种拷贝构造，只是其实不需要显式的复制，这里概念有点令人混淆，重点是说明immutable的特点","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1536075732,"ip_address":"","comment_id":21607,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1535191264","product_id":100006701,"comment_content":"这种便利甚至体现在拷贝构造函数中，由于不可变，Immutable 对象在拷贝时不需要额外复制数据。<br><br>拷贝构造函数，没明白老师～<br>可不可以举例说明","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422763,"discussion_content":"类似public String(String original)这种，也算是某种拷贝构造，只是其实不需要显式的复制，这里概念有点令人混淆，重点是说明immutable的特点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536075732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":18422,"user_name":"孙维川","can_delete":false,"product_type":"c1","uid":1177218,"ip_address":"","ucode":"1A517C7ED3FD57","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/82/ea9bfbc7.jpg","comment_is_top":false,"comment_ctime":1533299035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533299035","product_id":100006701,"comment_content":"老师，String 类的引用，可以通过反射修改其值？","like_count":0},{"had_liked":false,"id":17798,"user_name":"一个坏人","can_delete":false,"product_type":"c1","uid":1032305,"ip_address":"","ucode":"4AF05BF008095A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg","comment_is_top":false,"comment_ctime":1532957578,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1532957578","product_id":100006701,"comment_content":"String为什么要被设计成为 final ?","like_count":0},{"had_liked":false,"id":17017,"user_name":"clz1341521","can_delete":false,"product_type":"c1","uid":1179557,"ip_address":"","ucode":"3BDB4AB454C918","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/a5/eccc7653.jpg","comment_is_top":false,"comment_ctime":1532391233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532391233","product_id":100006701,"comment_content":"request.getparamter的中文问题，ios8859需要getbytes 后重设为utf或gbk","like_count":0},{"had_liked":false,"id":16869,"user_name":"Mr. Lonely","can_delete":false,"product_type":"c1","uid":1168376,"ip_address":"","ucode":"A3FFF9B468D8FF","user_header":"https://static001.geekbang.org/account/avatar/00/11/d3/f8/f3e7e288.jpg","comment_is_top":false,"comment_ctime":1532264316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532264316","product_id":100006701,"comment_content":"老师，关键字final和Immutable类，是什么区别联系，不理解这个！！！谢谢老师解答","like_count":0},{"had_liked":false,"id":16430,"user_name":"o","can_delete":false,"product_type":"c1","uid":1104326,"ip_address":"","ucode":"4028A59700647A","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/c6/a295275b.jpg","comment_is_top":false,"comment_ctime":1531959673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531959673","product_id":100006701,"comment_content":"给看海哪位朋友，字面量字符串拼接和直接复制字面量是一样的。编译之后都成一个样子，但是字符串拼接涉及到有变量的拼接是采用string对象的方式处理的，所以你需要区分开字面量和字符串对象变量","like_count":0},{"had_liked":false,"id":16111,"user_name":"呆","can_delete":false,"product_type":"c1","uid":1090280,"ip_address":"","ucode":"CA635189EA2764","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/e8/dc2b0884.jpg","comment_is_top":false,"comment_ctime":1531789631,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1531789631","product_id":100006701,"comment_content":"String对操作符的覆写是怎样实现的呢，这也算是一类操作符重载吗？<br>","like_count":0},{"had_liked":false,"id":13758,"user_name":"小潘","can_delete":false,"product_type":"c1","uid":1104015,"ip_address":"","ucode":"8F7E4AA39CCFA3","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/8f/faea2f3f.jpg","comment_is_top":false,"comment_ctime":1529975355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529975355","product_id":100006701,"comment_content":"string的intern方法在fastjson中就出现过bug","like_count":0},{"had_liked":false,"id":12513,"user_name":"风起","can_delete":false,"product_type":"c1","uid":1148298,"ip_address":"","ucode":"70A39D0DBB3279","user_header":"https://static001.geekbang.org/account/avatar/00/11/85/8a/031a6fd8.jpg","comment_is_top":false,"comment_ctime":1528883778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1528883778","product_id":100006701,"comment_content":"在http传进来的string统一就是utf-8， 等出去的话会肯能转一下格式。<br>然后对于循环外的就用加号， 循环内就用stringbuilder。","like_count":0},{"had_liked":false,"id":11572,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1528208171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1528208171","product_id":100006701,"comment_content":"学习笔记<br>简单的拼接+就行了，只有相对复杂的，比如需要优化下buffer大小，才有必要考虑。<br>在 JDK 8 中，字符串拼接操作会自动被 javac 转换为 StringBuilder 操作，<br>而在 JDK 9 里面则是因为 Java 9 为了更加统一字符串操作优化，提供了 StringConcatFactory，作为一个统一的入口。<br>javac 自动生成的代码，虽然未必是最优化的，但普通场景也足够了。<br><br>在 Java 9 中，我们引入了 Compact Strings 的设计，对字符串进行了大刀阔斧的改进。将数据存储方式从 char 数组，<br>改变为一个 byte 数组加上一个标识编码的所谓 coder，并且将相关字符串操作类都进行了修改。<br>在极端情况下，字符串也出现了一些能力退化，比如最大字符串的大小。你可以思考下，原来 char 数组的实现，<br>字符串的最大长度就是数组本身的长度限制，但是替换成 byte 数组，同样数组长度下，存储能力是退化了一倍的！<br>还好这是存在于理论中的极限，还没有发现现实应用受此影响。<br><br>在通用的性能测试和产品实验中，我们能非常明显地看到紧凑字符串带来的优势，即更小的内存占用、更快的操作速度。","like_count":0},{"had_liked":false,"id":11374,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1528098684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1528098684","product_id":100006701,"comment_content":"因为还没有开始学习JVM相关的知识，一涉及到其相关的内容后就感觉似懂非懂了！马上学习JVM相关的知识，希望老师尽早推出！","like_count":0},{"had_liked":false,"id":10467,"user_name":"沉梦昂志","can_delete":false,"product_type":"c1","uid":1129275,"ip_address":"","ucode":"39AB732C558FC8","user_header":"https://static001.geekbang.org/account/avatar/00/11/3b/3b/714cc8a5.jpg","comment_is_top":false,"comment_ctime":1527556728,"is_pvip":false,"replies":[{"id":"3359","content":"嗯，会优化，语义上和StringBuilder链一样","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527608210,"ip_address":"","comment_id":10467,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1527556728","product_id":100006701,"comment_content":"上面那个问为什么不把“aa”+“bb”+“cc”优化成aabbcc的 据我所知 JDK8中已经实现了这种默认优化","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418488,"discussion_content":"嗯，会优化，语义上和StringBuilder链一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527608210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9888,"user_name":"©®","can_delete":false,"product_type":"c1","uid":1121500,"ip_address":"","ucode":"1C5DECC46E5106","user_header":"https://static001.geekbang.org/account/avatar/00/11/1c/dc/9bd86256.jpg","comment_is_top":false,"comment_ctime":1527146206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1527146206","product_id":100006701,"comment_content":"String s1=new String(&quot;StringTest&quot;);\r<br>System.out.println(s1.intern()==s1);<br>&#47;&#47;false（JDK 8）\r<br>    \r<br>String s1 = new StringBuilder().append(&quot;String&quot;).append(&quot;Test&quot;).toString();\r<br>System.out.println(s1.intern() == s1);&#47;&#47;true（JDK 8）\r<br>    \r<br>String s1 = new StringBuilder(&quot;StringTest&quot;).toString();\r<br>ystem.out.println(s1.intern() == s1);<br>&#47;&#47;false（JDK 8）<br>。。老师，append为什么会造成这个差异","like_count":1},{"had_liked":false,"id":9625,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1114542,"ip_address":"","ucode":"29FA49EEDBFF92","user_header":"https://static001.geekbang.org/account/avatar/00/11/01/ae/f298ef27.jpg","comment_is_top":false,"comment_ctime":1526992749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526992749","product_id":100006701,"comment_content":"stringbuffer的内容可以变化，但是它是线程安全的，stringbulder是非线程安全的，性能更高","like_count":0},{"had_liked":false,"id":9551,"user_name":"kkllor","can_delete":false,"product_type":"c1","uid":1117877,"ip_address":"","ucode":"B5995F82E93919","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/b5/137f25a9.jpg","comment_is_top":false,"comment_ctime":1526950961,"is_pvip":false,"replies":[{"id":"2957","content":"谢谢","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527008269,"ip_address":"","comment_id":9551,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526950961","product_id":100006701,"comment_content":"很不错，深入浅出，涉及到的技术原理都覆盖了，告诉了读者技术方向，想深入的可以继续翻阅更多资料","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418112,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527008269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9439,"user_name":"df1996","can_delete":false,"product_type":"c1","uid":1124110,"ip_address":"","ucode":"3C94215CAB74F4","user_header":"","comment_is_top":false,"comment_ctime":1526871987,"is_pvip":false,"replies":[{"id":"2869","content":"这个就是示例，具体不同版本、jdk、平台可能有区别；<br>9的字节码也仅仅是展示了indy模式的输出，实际有非常多模式，字节码也是不同的，只是接触一下，不过没必要都列出来","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526942880,"ip_address":"","comment_id":9439,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526871987","product_id":100006701,"comment_content":"老师你好，为什么我用jdk8试出来aa+bb+cc编译反编译是直接变成了aabbcc，但是我拼接的时候才用stringbuilder","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418067,"discussion_content":"这个就是示例，具体不同版本、jdk、平台可能有区别；\n9的字节码也仅仅是展示了indy模式的输出，实际有非常多模式，字节码也是不同的，只是接触一下，不过没必要都列出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526942880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8982,"user_name":"刘为红","can_delete":false,"product_type":"c1","uid":1102333,"ip_address":"","ucode":"A7026457DF958D","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/fd/1cdfef42.jpg","comment_is_top":false,"comment_ctime":1526558617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526558617","product_id":100006701,"comment_content":"你回答的“环境编码”不大明白，具体什么地方配置的","like_count":0},{"had_liked":false,"id":8981,"user_name":"刘为红","can_delete":false,"product_type":"c1","uid":1102333,"ip_address":"","ucode":"A7026457DF958D","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/fd/1cdfef42.jpg","comment_is_top":false,"comment_ctime":1526558391,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1526558391","product_id":100006701,"comment_content":" getBytes()&#47;String​(byte[] bytes)使用过，遇到乱码情况，通过使用编码解决，所以这种机制我认为不好，跟平台的编码相关，但我没搞清楚平台的编码是指操作系统的编码?辽是java虚拟机的编码","like_count":0,"discussions":[{"author":{"id":1583833,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/E3XKbwTv6WTssolgqZjZCkiazHgl2IdBYfwVfAcB7Ff3krsIQeBIBFQLQE1Kw91LFbl3lic2EzgdfNiciaYDlJlELA/132","nickname":"rike","note":"","ucode":"920AAD0BD9245C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":149761,"discussion_content":"如果是Windows，默认gbk，Linux默认utf-8","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579777922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8790,"user_name":"小沙","can_delete":false,"product_type":"c1","uid":1123085,"ip_address":"","ucode":"CDA8D93666E14D","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/0d/e8cc9067.jpg","comment_is_top":false,"comment_ctime":1526440867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526440867","product_id":100006701,"comment_content":"string为啥要设计成final?","like_count":0},{"had_liked":false,"id":8760,"user_name":"sunlight001","can_delete":false,"product_type":"c1","uid":1126975,"ip_address":"","ucode":"A72C4274D5DE8A","user_header":"https://static001.geekbang.org/account/avatar/00/11/32/3f/fa4ac035.jpg","comment_is_top":false,"comment_ctime":1526427304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526427304","product_id":100006701,"comment_content":"string new对象的时候不是在 创建两个对象吗，一个放在栈中，一个放在常量池中吗？另外stringbuilder比stringbuffer的性能只有微弱的提高，在千万次的测试中，没有数量级的差别，所以我这程序拼接的时候一般都用stringbuffer,","like_count":0},{"had_liked":false,"id":8749,"user_name":"兔斯基","can_delete":false,"product_type":"c1","uid":1061320,"ip_address":"","ucode":"146A5FE2D8B301","user_header":"https://static001.geekbang.org/account/avatar/00/10/31/c8/a64e4aef.jpg","comment_is_top":false,"comment_ctime":1526398288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526398288","product_id":100006701,"comment_content":"印象中win平台默认是gbk编码，mac, Linux是utf8，前一段时间程序乱码问题就是因为开发用win,部署用linux，我觉得还是统一好，现在我们这边全部统一utf8,最起码这种乱码问题避免了","like_count":0},{"had_liked":false,"id":8708,"user_name":"xqqsliver","can_delete":false,"product_type":"c1","uid":1128982,"ip_address":"","ucode":"0FB75F75021ADB","user_header":"","comment_is_top":false,"comment_ctime":1526381296,"is_pvip":false,"replies":[{"id":"2599","content":"思考下，怎么判断两个对象是不是相同？","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526401229,"ip_address":"","comment_id":8708,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526381296","product_id":100006701,"comment_content":"String q=“we”;q= “z”+q;是两个不同的对象是吗？","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417828,"discussion_content":"思考下，怎么判断两个对象是不是相同？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526401229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8685,"user_name":"胖","can_delete":false,"product_type":"c1","uid":1044068,"ip_address":"","ucode":"0EA8F5343CB4F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/64/2646f6ef.jpg","comment_is_top":false,"comment_ctime":1526370323,"is_pvip":false,"replies":[{"id":"2600","content":"简单的拼接+就行了，只有相对复杂的，比如需要优化下buffer大小，才有必要考虑","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526401338,"ip_address":"","comment_id":8685,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526370323","product_id":100006701,"comment_content":"javac 自动生成的代码，虽然未必是最优化的，但普通场景也足够了，你可以酌情选择。<br>所以平常编码，直接用+进行字符拼接，并不需要显式调用stringbuilder ？","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417820,"discussion_content":"简单的拼接+就行了，只有相对复杂的，比如需要优化下buffer大小，才有必要考虑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526401338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8671,"user_name":"一笑奈何","can_delete":false,"product_type":"c1","uid":1007709,"ip_address":"","ucode":"33FE23DF749936","user_header":"https://static001.geekbang.org/account/avatar/00/0f/60/5d/f6350fce.jpg","comment_is_top":false,"comment_ctime":1526360676,"is_pvip":false,"replies":[{"id":"2565","content":"Java一个char是两个byte呀","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526367313,"ip_address":"","comment_id":8671,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526360676","product_id":100006701,"comment_content":"char 数组的实现，字符串的最大长度就是数组本身的长度限制，但是替换成 byte 数组，同样数组长度下，存储能力是退化了一倍的！同问。不理解这句话。","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417815,"discussion_content":"Java一个char是两个byte呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526367313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8617,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1038811,"ip_address":"","ucode":"BFAF83E23199DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d9/db/66d5b3f4.jpg","comment_is_top":false,"comment_ctime":1526347370,"is_pvip":false,"replies":[{"id":"2579","content":"文字常量那是默认行为，调用intern的不一定都是如此","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526368837,"ip_address":"","comment_id":8617,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526347370","product_id":100006701,"comment_content":"老师，jdk6如果不使用intern方法，字符串常量不是存在永久代的常量池中吗?我的理解是intern方法是减少了永久代中字符串常量的数量，至于效率问题，是因为使用intern方法本身，多做了一步操作，所以会增加性能开销，主要考虑时间开销。","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417796,"discussion_content":"文字常量那是默认行为，调用intern的不一定都是如此","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526368837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8568,"user_name":"wangbo","can_delete":false,"product_type":"c1","uid":1125722,"ip_address":"","ucode":"3F0C9C320F0A1D","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/5a/d965c147.jpg","comment_is_top":false,"comment_ctime":1526342628,"is_pvip":false,"replies":[{"id":"2573","content":"谢谢","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526368150,"ip_address":"","comment_id":8568,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526342628","product_id":100006701,"comment_content":"讲的很好，intern方法之前都没怎么接触过","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417771,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526368150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}