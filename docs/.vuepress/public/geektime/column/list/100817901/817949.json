{"id":817949,"title":"21｜持续优化：改进应用检索质量有哪些诀窍？","content":"<p>你好，我是叶伟民。</p><p>上一节课，我们通过收集反馈和使用质量评估库Ragas，找到了改进RAG应用的正确方向。找到正确的方向之后，我们还需要真正去改进检索质量。</p><p>改进检索质量的方法相当多，很难面面俱到。因此接下来的几节课里，我精心挑选了初学者也能轻松上手，而且是比较典型和重要的一些方法和原则，希望能够帮助你在这方面实现0到1的突破。</p><p>这节课你需要牢记的改进原则就是，尽量将模糊检索转化为精确检索。</p><p>这个原则由两部分组成：</p><ol>\n<li>将模糊检索转化为精确检索。我们可以看到，第1章的精确检索质量比第3章的模糊检索高很多。</li>\n<li>尽量转化，而非绝对的非此即彼。之所以说尽量，是因为要完全将模糊检索转化为精确检索是很难做到的。所以我们只能从多个层面入手，尽量地提高转化率。</li>\n</ol><p>根据这个原则，我们就能推导出改进RAG应用质量的两种方法：</p><ol>\n<li>在用户交互层面提供精确信息。</li>\n<li>在业务逻辑层面提供精确信息（后面将以关键词为例讲解）。</li>\n</ol><h2>在用户交互层面提供精确信息</h2><p>我们沿用上一节课的思想，先确定我们的目标。我们的目标是，在用户提问时提供具体模块的信息。在达成这个目标的前提下，我们还要注意，这个修改不能对用户体验造成很大影响。</p><p>根据以上目标和注意事项，我们可以在原来的对话界面加上各个模块的标签栏。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/ec/59/ec9c2a29188a18b70a66fdee77c05c59.jpg?wh=2876x801\" alt=\"\"></p><p>这样用户点击具体标签栏后，再进行提问时，我们将把这个信息传给后台，后台将根据这个信息将知识检索范围缩小到对应模块。</p><p>方案定好了，现在我们开始动手实战。我们先在页面添加精确的模块信息。</p><h2>页面添加精确信息</h2><p>我们打开 <code>index.html</code> 文件，在表单顶部添加以下代码。</p><pre><code class=\"language-xml\">&nbsp; &lt;ul class=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\"&gt;\n&nbsp; &nbsp; &lt;li class=\"nav-item\" role=\"presentation\"&gt;\n&nbsp; &nbsp; &nbsp; {% if module == 1 %}\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;a class=\"nav-link active\" id=\"profile-tab\" data-bs-toggle=\"tab\" type=\"button\" role=\"tab\" aria-selected=\"false\" href=\"/?module=1\"&gt;销售管理&lt;/a&gt;\n&nbsp; &nbsp; &nbsp; {% else %}\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;a class=\"nav-link\" id=\"profile-tab\" data-bs-toggle=\"tab\" type=\"button\" role=\"tab\" aria-selected=\"false\" href=\"/?module=1\"&gt;销售管理&lt;/a&gt;\n&nbsp; &nbsp; &nbsp; {% endif %}\n&nbsp; &nbsp; &lt;/li&gt;\n&nbsp; &nbsp; &lt;li class=\"nav-item\" role=\"presentation\"&gt;\n&nbsp; &nbsp; &nbsp; {% if module == 2 %}\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;a class=\"nav-link active\" id=\"contact-tab\" data-bs-toggle=\"tab\" type=\"button\" role=\"tab\" aria-selected=\"false\" href=\"/?module=2\"&gt;生产管理&lt;/a&gt;\n&nbsp; &nbsp; &nbsp; {% else %}\n&nbsp; &nbsp; &nbsp; &lt;a class=\"nav-link\" id=\"contact-tab\" data-bs-toggle=\"tab\" type=\"button\" role=\"tab\" aria-selected=\"false\" href=\"/?module=2\"&gt;生产管理&lt;/a&gt;\n&nbsp; &nbsp; &nbsp; {% endif %}\n&nbsp; &nbsp; &lt;/li&gt;\n&nbsp; &lt;/ul&gt;\n</code></pre><p>然后在表单里面加入上面的活跃tab信息，也就是精确的模块信息</p><pre><code class=\"language-python\">&lt;input type=\"hidden\" name=\"module\" value=\"{{module}}\"&gt;\n</code></pre><p>完整的html代码参见<a href=\"https://github.com/weiminye/time-geekbang-org-rag/blob/main/%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B3/%E7%AC%AC21%E8%8A%82/%E7%A8%8B%E5%BA%8F/main/templates/home/index.html\">这里</a>。</p><p>在提交提问的时候，我们把精确的模块信息传给后端。那么后端拿到这个精确信息之后需要怎么处理呢？</p><p>首先我们需要获取前端传递过来的精确模块信息，我们在views.py文件添加以下代码。</p><pre><code class=\"language-python\">try:\n&nbsp; &nbsp; module = request.GET['module']\n&nbsp; &nbsp; if module is None:\n&nbsp; &nbsp; &nbsp; &nbsp; module = 1\n&nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; module = int(module)\nexcept:\n&nbsp; &nbsp; module = 1\n</code></pre><p>完整的.py代码参见<a href=\"https://github.com/weiminye/time-geekbang-org-rag/blob/main/%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B3/%E7%AC%AC21%E8%8A%82/%E7%A8%8B%E5%BA%8F/main/home/views.py\">这里</a>。</p><p>接下来是重点部分了，如何根据精确信息检索呢？</p><h2>根据精确信息检索</h2><p>同学们现在先停一下，深呼吸一口气，思考一下应该要修改哪个环节，修改哪个文件的哪个函数。</p><p>3，2，1。好，现在揭晓答案。我们打开 <code>rag.py</code> 文件，修改<code>构造解析用户输入并返回结构化数据用的messages</code> 函数的代码。</p><pre><code class=\"language-python\">def 构造解析用户输入并返回结构化数据用的messages(之前的用户输入,用户输入,module):\n&nbsp; if 之前的用户输入 is not None and len(之前的用户输入.strip()) &gt; 0:\n&nbsp; &nbsp; 用户输入 = 之前的用户输入 + 用户输入\n\n&nbsp; if module == 1:\n&nbsp; &nbsp; messages=[\n&nbsp; &nbsp; {\"role\": \"user\", \"content\": f\"\"\"\n&nbsp; &nbsp; 请根据用户的输入返回json格式结果，除此之外不要返回其他内容。\n\n&nbsp; &nbsp; 示例1：\n&nbsp; &nbsp; 用户：客户北京极客邦有限公司的款项到账了多少？\n&nbsp; &nbsp; 系统：\n&nbsp; &nbsp; {{'模块':1,'客户名称':'北京极客邦有限公司'}}\n\n&nbsp; &nbsp; 用户：{用户输入}\n&nbsp; &nbsp; 系统：\n&nbsp; &nbsp; \"\"\"},\n&nbsp; &nbsp; ]\n&nbsp; &nbsp; return messages\n&nbsp; return None\n</code></pre><p>我们可以看到，修改之前，我们是靠大模型猜测用户想在哪个模块查询信息。但让大模型来猜测这种做法不但很耗时，而且还有可能猜错。</p><p>修改之后，因为获得了精确的模块信息，检索更精确了。除此之外，我们的提示语，也就是messages部分也变得简短了很多。</p><h2>重构</h2><p>然而这里有个问题，我们修改了核心的 <code>rag.py</code> 文件代码！正如前面课程所讲的，我们只是增强了检索知识的部分，至于整个RAG流程，其实是没有做任何改变的。所以我们不应该修改核心的 <code>rag.py</code> 文件代码。</p><p>发现了这个矛盾 ，就说明我们的设计很可能有问题！我们需要重构一下。</p><p>我们把刚才的函数从 <code>rag.py</code> 文件抽离到 <code>prompt.py</code> 文件。整个 <code>prompt.py</code> 文件就变成了后面这样。</p><pre><code class=\"language-python\">def 构造解析用户输入并返回结构化数据用的messages(之前的用户输入,用户输入,module):\n&nbsp; if 之前的用户输入 is not None and len(之前的用户输入.strip()) &gt; 0:\n&nbsp; &nbsp; 用户输入 = 之前的用户输入 + 用户输入\n\n&nbsp; if module == 1:\n&nbsp; &nbsp; messages=[\n&nbsp; &nbsp; {\"role\": \"user\", \"content\": f\"\"\"\n&nbsp; &nbsp; 请根据用户的输入返回json格式结果，除此之外不要返回其他内容。\n\n&nbsp; &nbsp; 示例1：\n&nbsp; &nbsp; 用户：客户北京极客邦有限公司的款项到账了多少？\n&nbsp; &nbsp; 系统：\n&nbsp; &nbsp; {{'模块':1,'客户名称':'北京极客邦有限公司'}}\n\n&nbsp; &nbsp; 用户：{用户输入}\n&nbsp; &nbsp; 系统：\n&nbsp; &nbsp; \"\"\"},\n&nbsp; &nbsp; ]\n&nbsp; &nbsp; return messages\n&nbsp; return None\n</code></pre><p>通过这样的修改，以后再做类似操作，我们就不需要修改 <code>rag.py</code> 文件了，只需要修改 <code>prompt.py</code> 文件即可。</p><p>然后我们再在 <code>rag.py</code> 文件传递精确模块信息。</p><p>注意，这里我们还更新了相关的调用，这些小细节这里我们就不铺开了。同学们可以在这里查看<a href=\"https://github.com/weiminye/time-geekbang-org-rag/tree/main/%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B3/%E7%AC%AC21%E8%8A%82\">完整的代码</a>。</p><p>现在我们已经讲了一个在用户交互层面提供精确信息的例子。接下来，我们再来看一个在业务逻辑层面提供精确信息的例子。我就以目前最常见的关键词为例。</p><p>##关键词</p><p>在有些用户场景里面，有些事物是必须要精确检索而不能模糊检索的。</p><p>比如在一个金融类的RAG应用里面，用户提问：300498昨天有什么新闻？这里的300498是一个股票代码。很显然，这时候根据300498去模糊检索肯定效果不理想，那样可能会返回300497或300499的内容，只能精确检索300498相关的内容。</p><p>再比如说，在我们的实战案例1里面，用户提问：配件sh-d32还有多少？这里的sh-d32是一个配件型号，同样不能根据它去模糊检索，那样可能会返回其他型号的数据，只能精确检索sh-d32相关的数据。</p><p>明确了这类用户场景的特点，我们来给RAG应用添加一些代码，实现靠关键词精准检索的功能。</p><p>我们先来设计数据库表结构。</p><h2>数据库表结构设计</h2><p>对于实战案例1，我们不需要专门建表。</p><p>对于实战案例3，我们需要专门新建一个表来存储关键词表，它具有如下字段。<br>\n<img src=\"https://static001.geekbang.org/resource/image/bb/8f/bb51aea8ce0904cab958c4048c0ebb8f.jpg?wh=4508x1803\" alt=\"\"></p><p>我们打开 <code>models.py</code> 文件，在尾部加入以下代码。</p><pre><code class=\"language-python\">class 关键词(models.Model):\n    id = models.IntegerField(\n         primary_key = True,\n         editable = False)\n    created_time = models.DateTimeField(auto_now_add=True)\n&nbsp; &nbsp; lastmodified_time = models.DateTimeField(auto_now=True)\n\n    关键词 = models.TextField()\n    模块 = models.TextField()\n    备注 = models.TextField()\n</code></pre><p>然后我们切换到 <code>Anaconda Powershell Prompt</code>，输入以下命令更新数据库。</p><pre><code class=\"language-powershell\">python manage.py makemigrations\npython manage.py migrate\n</code></pre><p>这时候应该提示数据库更新成功。然后我们需要打开数据库确认操作无误。</p><p>我们使用第16节课讲过的 <code>pgadmin</code>，打开 <code>home_关键词</code>表。这时我们应该看到已经成功添加了相关列。</p><p>这里为了简单起见，我们直接在 <code>pgadmin</code> 的 <code>home_关键词</code>表新增两条记录。</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/6a/bb2086a0a01d61c153011466271ac96a.jpg?wh=4297x1772\" alt=\"\"></p><p>在现实工作中，<code>home_关键词</code>这个表应该用程序导入。</p><p><code>home_关键词</code>这个表只提供关键词检索，不提供更详细业务数据。所以我们还需要在 <code>home_销售入账记录</code> 这个表添加业务数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/e7/5f2fcbe73313863c63287eyybbb7d2e7.jpg?wh=6354x1404\" alt=\"\"></p><h2>根据关键词检索</h2><p>我们打开 <code>views.py</code> 文件，在 <code>index</code> 函数的获取用户输入之后，获取查询参数之前添加代码。</p><pre><code class=\"language-python\">def index(request):\n      ...之前没有变的的代码\n&nbsp; &nbsp; &nbsp; &nbsp; 用户输入 = request.POST['question']\n\n      # 加入关键词检索代码\n&nbsp; &nbsp; &nbsp; &nbsp; 关键词RawQuerySet = 关键词.objects.raw(\"SELECT id, 关键词, 模块, 备注 FROM public.home_关键词 where 模块='\" + str(module) + \"' and position(关键词 in '\" + 用户输入 + \"') &gt; 0;\")\n\n&nbsp; &nbsp; &nbsp; &nbsp; if 关键词RawQuerySet is not None and len(关键词RawQuerySet) &gt; 0:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if module == 1:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 查询参数 = {'模块':1,'客户名称':关键词RawQuerySet[0].关键词}\n&nbsp; &nbsp; &nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 查询参数 = 获取结构化数据查询参数(用户输入,module)\n\n      # 加入关键词检索代码\n&nbsp; &nbsp; &nbsp; &nbsp; 查询结果 = None\n&nbsp; &nbsp; &nbsp; &nbsp; if 查询参数 is not None:\n      ...之前没有变的的代码\n</code></pre><p>我们可以看到，现在如果命中了关键词，我们完全就不需要通过大模型去获取查询参数了，我们的查询参数更准确，速度也更快了。</p><p>注意，这里我们还更新了相关的引用，还fix了一个bug，这些小细节这里我们就不铺开了。同学们可以在这里查看<a href=\"https://github.com/weiminye/time-geekbang-org-rag/tree/main/%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B3/%E7%AC%AC21%E8%8A%82\">完整的代码</a>。</p><p>至此，我们通过在页面添加模块信息实现了模块部分的精确检索，在业务逻辑层面通过关键词实现了业务部分的精确检索。</p><p>现在我们学到了两种改进RAG质量的技术。但是仅仅靠这两种技术是不够的，那么我们如何去学习其他改进RAG质量的技术呢？下一节课我们将介绍一种很实用的方法，就是查看Langchain、Llamdindex源码，学习改进RAG质量的技术。</p><h2>小结</h2><p>好了，今天这一讲到这里就结束了，最后我们来回顾一下。这一讲我们学会了两件事情。</p><p>第一件事情是在用户交互层面提供精确信息。我们可以在<strong>不对用户体验造成很大影响的前提下</strong>，增加更多精确信息，从而缩小知识检索范围，改进知识检索质量，例如在首页添加各个模块的标签栏。</p><p>第二件事情是尽量扩大精确检索的范围。本质上说，这也是通过各种精确信息缩小知识检索范围，目前最流行的方法是通过关键词精确检索。</p><h2>思考题</h2><p>发挥你的想象力，想象一下还有什么方法能够将模糊检索转化为精确检索？</p><p>欢迎你在留言区和我交流互动，如果这节课对你有启发，也推荐分享给身边更多朋友。</p>","neighbors":{"left":{"article_title":"20｜找准方向：如何有效评估与改进RAG应用","id":817424},"right":{"article_title":"22｜取长补短：如何借鉴LangChain、LlamIndex等RAG框架的优点","id":818511}},"comments":[{"had_liked":false,"id":395216,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":3920101,"ip_address":"广东","ucode":"19E83C631DF25E","user_header":"https://static001.geekbang.org/account/avatar/00/3b/d0/e5/0a3ee17c.jpg","comment_is_top":false,"comment_ctime":1729760041,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"期待老师把代码补全了。","like_count":1,"discussions":[{"author":{"id":3920101,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/d0/e5/0a3ee17c.jpg","nickname":"kevin","note":"","ucode":"19E83C631DF25E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653865,"discussion_content":"本节课的代码再哪里下载呀？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731488903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":395957,"user_name":"坤","can_delete":false,"product_type":"c1","uid":1585570,"ip_address":"浙江","ucode":"AD2B2D6A4E5CBF","user_header":"https://static001.geekbang.org/account/avatar/00/18/31/a2/16c3318d.jpg","comment_is_top":false,"comment_ctime":1732521269,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"降低信息熵,消除不确定性","like_count":0}]}