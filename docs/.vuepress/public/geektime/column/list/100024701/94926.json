{"id":94926,"title":"20 | 内存管理（上）：为客户保密，规划进程内存空间布局","content":"<p>平时我们说计算机的“计算”两个字，其实说的就是两方面，第一，进程和线程对于CPU的使用；第二，对于内存的管理。所以从这一节开始，我们来看看内存管理的机制。</p><p>我之前说把内存管理比喻为一个项目组的“封闭开发的会议室”。很显然，如果不隔离，就会不安全、就会泄密，所以我们说每个进程应该有自己的内存空间。内存空间都是独立的、相互隔离的。对于每个进程来讲，看起来应该都是独占的。</p><h2>独享内存空间的原理</h2><p>之前我只是简单地形容了一下。这一节，我们来深入分析一下，为啥一定要封闭开发呢？</p><p>执行一个项目，要依赖于项目执行计划书里的指令。项目只要按这些指令运行就行了。但是，在运行指令的过程中，免不了要产生一些数据。这些数据要保存在一个地方，这个地方就是内存，也就是我们刚才说的“会议室”。</p><p>和会议室一样，<strong>内存都被分成一块一块儿的，都编好了号</strong>。例如3F-10，就是三楼十号会议室。内存也有这样一个地址。这个地址是实实在在的地址，通过这个地址我们就能够定位到物理内存的位置。</p><p>使用这种类型的地址会不会有问题呢？我们的二进制程序，也就是项目执行计划书，都是事先写好的，可以多次运行的。如果里面有个指令是，要把用户输入的数字保存在内存中，那就会有问题。</p><!-- [[[read_end]]] --><p>会产生什么问题呢？我举个例子你就明白了。如果我们使用那个实实在在的地址，3F-10，打开三个相同的程序，都执行到某一步。比方说，打开了三个计算器，用户在这三个程序的界面上分别输入了10、100、1000。如果内存中的这个位置只能保存一个数，那应该保存哪个呢？这不就冲突了吗？</p><p>如果不用这个实实在在的地址，那应该怎么办呢？于是，我们就想出一个办法，那就是<strong>封闭开发</strong>。</p><p>每个项目的物理地址对于进程不可见，谁也不能直接访问这个物理地址。操作系统会给进程分配一个虚拟地址。所有进程看到的这个地址都是一样的，里面的内存都是从0开始编号。</p><p>在程序里面，指令写入的地址是虚拟地址。例如，位置为10M的内存区域，操作系统会提供一种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来。</p><p>当程序要访问虚拟地址的时候，由内核的数据结构进行转换，转换成不同的物理地址，这样不同的进程运行的时候，写入的是不同的物理地址，这样就不会冲突了。</p><h2>规划虚拟地址空间</h2><p>通过以上的原理，我们可以看出，操作系统的内存管理，主要分为三个方面。</p><p>第一，物理内存的管理，相当于会议室管理员管理会议室。</p><p>第二，虚拟地址的管理，也即在项目组的视角，会议室的虚拟地址应该如何组织。</p><p>第三，虚拟地址和物理地址如何映射，也即会议室管理员如何管理映射表。</p><p>接下来，我们都会围绕虚拟地址和物理地址展开。这两个概念有点绕，很多时候你可能会犯糊涂：这个地方，我们用的是虚拟地址呢，还是物理地址呢？所以，请你在学习这一章节的时候，时刻问自己这个问题。</p><p>我们还是切换到外包公司老板的角度。现在，如果让你规划一下，到底应该怎么管理会议室，你会怎么办？是不是可以先听听项目组的意见，收集一下需求。</p><p>于是，你看到了项目组的项目执行计划书是这样一个程序。</p><pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint max_length = 128;\n\nchar * generate(int length){\n  int i;\n  char * buffer = (char*) malloc (length+1);\n  if (buffer == NULL)\n    return NULL;\n  for (i=0; i&lt;length; i++){\n    buffer[i]=rand()%26+'a';\n  }\n  buffer[length]='\\0';\n  return buffer;\n}\n\nint main(int argc, char *argv[])\n{\n  int num;\n  char * buffer;\n\n  printf (&quot;Input the string length : &quot;);\n  scanf (&quot;%d&quot;, &amp;num);\n\n  if(num &gt; max_length){\n    num = max_length;\n  }\n\n  buffer = generate(num);\n\n  printf (&quot;Random string is: %s\\n&quot;,buffer);\n  free (buffer);\n\n  return 0;\n}\n</code></pre><p>这个程序比较简单，就是根据用户输入的整数来生成字符串，最长是128。由于字符串的长度不是固定的，因而不能提前知道，需要动态地分配内存，使用malloc函数。当然用完了需要释放内存，这就要使用free函数。</p><p>我们来总结一下，<span class=\"orange\">这个简单的程序在使用内存时的几种方式：</span></p><ul>\n<li>\n<p>代码需要放在内存里面；</p>\n</li>\n<li>\n<p>全局变量，例如max_length；</p>\n</li>\n<li>\n<p>常量字符串\"Input the string length : \"；</p>\n</li>\n<li>\n<p>函数栈，例如局部变量num是作为参数传给generate函数的，这里面涉及了函数调用，局部变量，函数参数等都是保存在函数栈上面的；</p>\n</li>\n<li>\n<p>堆，malloc分配的内存在堆里面；</p>\n</li>\n<li>\n<p>这里面涉及对glibc的调用，所以glibc的代码是以so文件的形式存在的，也需要放在内存里面。</p>\n</li>\n</ul><p>这就完了吗？还没有呢，别忘了malloc会调用系统调用，进入内核，所以这个程序一旦运行起来，内核部分还需要分配内存：</p><ul>\n<li>\n<p>内核的代码要在内存里面；</p>\n</li>\n<li>\n<p>内核中也有全局变量；</p>\n</li>\n<li>\n<p>每个进程都要有一个task_struct；</p>\n</li>\n<li>\n<p>每个进程还有一个内核栈；</p>\n</li>\n<li>\n<p>在内核里面也有动态分配的内存；</p>\n</li>\n<li>\n<p>虚拟地址到物理地址的映射表放在哪里？</p>\n</li>\n</ul><p>竟然收集了这么多的需求，看来做个内存管理还是挺复杂的啊！</p><p>我们现在来问一下自己，上面的这些内存里面的数据，应该用虚拟地址访问呢？还是应该用物理地址访问呢？</p><p>你可能会说，这很简单嘛。用户态的用虚拟地址访问，内核态的用物理地址访问。其实不是的。你有没有想过，内核里面的代码如果都使用物理地址，就相当于公司里的项目管理部门、文档管理部门都可以直接使用实际的地址访问会议室，这对于会议室管理部门来讲，简直是一个“灾难”。因为一旦到了内核，大家对于会议室的访问都脱离了会议室管理部门的控制。</p><p>所以，我们应该清楚一件事情，真正能够使用会议室的物理地址的，只有会议室管理部门，所有其他部门的行为涉及访问会议室的，都要统统使用虚拟地址，统统到会议室管理部门那里转换一道，才能进行统一的控制。</p><p>我上面列举出来的，对于内存的访问，用户态的进程使用虚拟地址，这点毫无疑问，内核态的也基本都是使用虚拟地址，只有最后一项容易让人产生疑问。虚拟地址到物理地址的映射表，这个感觉起来是内存管理模块的一部分，这个是“实”是“虚”呢？这个问题先保留，我们暂不讨论，放到内存映射那一节见分晓。</p><p>既然都是虚拟地址，我们就先不管映射到物理地址以后是如何布局的，反正现在至少从“虚”的角度来看，这一大片连续的内存空间都是我的了。</p><p>如果是32位，有2^32 = 4G的内存空间都是我的，不管内存是不是真的有4G。如果是64位，在x86_64下面，其实只使用了48位，那也挺恐怖的。48位地址长度也就是对应了256TB的地址空间。我都没怎么见过256T的硬盘，别说是内存了。</p><p>现在，你可比世界首富房子还大。虽然是虚拟的。下面你可以尽情地去排列咱们要放的东西。请记住，现在你是站在一个进程的角度去看这个虚拟的空间，不用管其他进程。</p><p>首先，这么大的虚拟空间一切二，一部分用来放内核的东西，称为<strong>内核空间</strong>，一部分用来放进程的东西，称为<strong>用户空间</strong>。用户空间在下，在低地址，我们假设就是0号到29号会议室；内核空间在上，在高地址，我们假设是30号到39号会议室。这两部分空间的分界线因为32位和64位的不同而不同，我们这里不深究。</p><p>对于普通进程来说，内核空间的那部分虽然虚拟地址在那里，但是不能访问。这就像作为普通员工，你明明知道财务办公室在这个30号会议室门里面，但是门上挂着“闲人免进”，你只能在自己的用户空间里面折腾。</p><p><img src=\"https://static001.geekbang.org/resource/image/af/83/afa4beefd380effefb0e54a8d9345c83.jpeg?wh=3781*1903\" alt=\"\"></p><p>我们从最低位开始排起，先是<strong>Text Segment、Data Segment和BSS Segment</strong>。Text Segment是存放二进制可执行代码的位置，Data Segment存放静态常量，BSS Segment存放未初始化的静态变量。是不是觉得这几个名字很熟悉？没错，咱们前面讲ELF格式的时候提到过，在二进制执行文件里面，就有这三个部分。这里就是把二进制执行文件的三个部分加载到内存里面。</p><p>接下来是<strong>堆</strong>（Heap）<strong>段</strong>。堆是往高地址增长的，是用来动态分配内存的区域，malloc就是在这里面分配的。</p><p>接下来的区域是<strong>Memory Mapping Segment</strong>。这块地址可以用来把文件映射进内存用的，如果二进制的执行文件依赖于某个动态链接库，就是在这个区域里面将so文件映射到了内存中。</p><p>再下面就是<strong>栈</strong>（Stack）<strong>地址段</strong>。主线程的函数调用的函数栈就是用这里的。</p><p>如果普通进程还想进一步访问内核空间，是没办法的，只能眼巴巴地看着。如果需要进行更高权限的工作，就需要调用系统调用，进入内核。</p><p>一旦进入了内核，就换了一种视角。刚才是普通进程的视角，觉着整个空间是它独占的，没有其他进程存在。当然另一个进程也这样认为，因为它们互相看不到对方。这也就是说，不同进程的0号到29号会议室放的东西都不一样。</p><p>但是到了内核里面，无论是从哪个进程进来的，看到的都是同一个内核空间，看到的都是同一个进程列表。虽然内核栈是各用各的，但是如果想知道的话，还是能够知道每个进程的内核栈在哪里的。所以，如果要访问一些公共的数据结构，需要进行锁保护。也就是说，不同的进程进入到内核后，进入的30号到39号会议室是同一批会议室。</p><p><img src=\"https://static001.geekbang.org/resource/image/4e/9d/4ed91c744220d8b4298237d2ab2eda9d.jpeg?wh=3652*1918\" alt=\"\"></p><p>内核的代码访问内核的数据结构，大部分的情况下都是使用虚拟地址的，虽然内核代码权限很大，但是能够使用的虚拟地址范围也只能在内核空间，也即内核代码访问内核数据结构。只能用30号到39号这些编号，不能用0到29号，因为这些是被进程空间占用的。而且，进程有很多个。你现在在内核，但是你不知道当前指的0号是哪个进程的0号。</p><p>在内核里面也会有内核的代码，同样有Text Segment、Data Segment和BSS Segment，别忘了咱们讲内核启动的时候，内核代码也是ELF格式的。</p><p>内核的其他数据结构的分配方式就比较复杂了，这一节我们先不讲。</p><h2>总结时刻</h2><p>好了，这一节就到这里了，我们来总结一下。这一节我们讲了为什么要独享内存空间，并且站在老板的角度，设计了虚拟地址空间应该存放的数据。</p><p>通过这一节，你应该知道，一个内存管理系统至少应该做三件事情：</p><ul>\n<li>\n<p>第一，虚拟内存空间的管理，每个进程看到的是独立的、互不干扰的虚拟地址空间；</p>\n</li>\n<li>\n<p>第二，物理内存的管理，物理内存地址只有内存管理模块能够使用；</p>\n</li>\n<li>\n<p>第三，内存映射，需要将虚拟内存和物理内存映射、关联起来。</p>\n</li>\n</ul><h2>课堂练习</h2><p>这一节我们讲了进程内存空间的布局，请找一下，有没有一个命令可以查看进程内存空间的布局，打印出来看一下，这对我们后面解析非常有帮助。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎你收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习、进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","neighbors":{"left":{"article_title":"19 | 线程的创建：如何执行一个新子项目？","id":94479},"right":{"article_title":"21 | 内存管理（下）：为客户保密，项目组独享会议室封闭开发","id":95209}},"comments":[{"had_liked":false,"id":93973,"user_name":"lfn","can_delete":false,"product_type":"c1","uid":1026593,"ip_address":"","ucode":"2E1558C6A12A89","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/21/6c3ba9af.jpg","comment_is_top":false,"comment_ctime":1557680648,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"332270162440","product_id":100024701,"comment_content":"cat &#47;proc&#47;$pid&#47;map","like_count":78,"discussions":[{"author":{"id":1002005,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","nickname":"stackWarn","note":"","ucode":"89672E452DEBA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335639,"discussion_content":"cat /proc/$pid/maps 纠正","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1608259237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1700570,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f2/da/aa950bf0.jpg","nickname":"eloise","note":"","ucode":"E3C8513E212708","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1002005,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","nickname":"stackWarn","note":"","ucode":"89672E452DEBA5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537133,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638965306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335639,"ip_address":""},"score":537133,"extra":""}]}]},{"had_liked":false,"id":94070,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1557713928,"is_pvip":false,"replies":[{"id":"49373","content":"是完全共享的。内核的代码是有权限修改所有进程的，但是内核代码的书写者写的代码不会这样做，会很小心。也即内核是能为而不为。只占用一份物理内存。只不过这一块是进程A的内核栈，那一块是进程B的内核栈，作为内核代码，我都能动，但是我不随便动。","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567651737,"ip_address":"","comment_id":94070,"utype":1}],"discussion_count":3,"race_medal":0,"score":"216306078728","product_id":100024701,"comment_content":"请问，老师的意思是，内核空间其实是完全共享的吗？大家看到的数据都是相同的，如果修改数据，会影响到所有进程？也就是说，其实内核空间其实只占用一份物理内存？另外，既然都是相同的，所谓“内核栈是各用各的”是啥意思？","like_count":50,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449902,"discussion_content":"是完全共享的。内核的代码是有权限修改所有进程的，但是内核代码的书写者写的代码不会这样做，会很小心。也即内核是能为而不为。只占用一份物理内存。只不过这一块是进程A的内核栈，那一块是进程B的内核栈，作为内核代码，我都能动，但是我不随便动。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567651737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131300,"avatar":"https://static001.geekbang.org/account/avatar/00/11/43/24/3f9f7c70.jpg","nickname":"zixuan","note":"","ucode":"C72920DD05B074","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589310,"discussion_content":"听起来像是，大家都映射到同一块内核空间，只此一份 ，并且映射的源地址和目标地址都一样, 比如不管哪个进程进入内核后，他们看到的某进程A的sche_class地址，虚拟地址（以及物理地址) 都是一个，可能调度时会去读一下?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664685390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2116245,"avatar":"https://static001.geekbang.org/account/avatar/00/20/4a/95/4f6f93c3.jpg","nickname":"知行合一","note":"","ucode":"A53A002DF3A652","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364133,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617370953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94492,"user_name":"why","can_delete":false,"product_type":"c1","uid":1012937,"ip_address":"","ucode":"C9E796E53F6F5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/c9/d3439ca4.jpg","comment_is_top":false,"comment_ctime":1557824254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"113226973950","product_id":100024701,"comment_content":"- 内存管理(上)<br>- 内存管理包含: 物理内存管理; 虚拟内存管理; 两者的映射<br>- 除了内存管理模块, 其他都使用虚拟地址(包括内核)<br>- 虚拟内存空间包含: 内核空间(高地址); 用户空间(低地址)<br>- 用户空间从低到高布局为: 代码段; DATA 段; BSS 段(未初始化静态变量); 堆段; 内存映射段; 栈地址空间段<br>- 多个进程看到的用户空间是独立的<br>- 内核空间: 多个进程看到同一内核空间, 但内核栈每个进程不一样<br>- 内核代码也仅能访问内核空间<br>- 内核也有内核代码段, DATA 段, 和 BSS 段; 位于内核空间低地址<br>- 内核代码也是 ELF 格式<br><br>内核空间和进程的关系有点像进程和多线程的关系啊.","like_count":27},{"had_liked":false,"id":167372,"user_name":"garlic","can_delete":false,"product_type":"c1","uid":1019579,"ip_address":"","ucode":"FEB147EDB5774E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/bb/c039dc11.jpg","comment_is_top":false,"comment_ctime":1577778640,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"96067059152","product_id":100024701,"comment_content":"1. pmap $PID;<br>2.cat &#47;proc&#47;$PID&#47;maps;","like_count":23},{"had_liked":false,"id":94076,"user_name":"雪人","can_delete":false,"product_type":"c1","uid":1257781,"ip_address":"","ucode":"55B39082C5D1F0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ABjAPveWxOuBs3ibbCaBicX7OSibic3prycYG9vOicGHMEv8Vws5o3epykBSFHkbysnaKeMqQaJufINNUncGhmAEomg/132","comment_is_top":false,"comment_ctime":1557714926,"is_pvip":false,"replies":[{"id":"49372","content":"是的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567651590,"ip_address":"","comment_id":94076,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44507387886","product_id":100024701,"comment_content":"老师，我想问一下，所有进程的内核空间是共用一块内存吗？还有就是，是不是可以这样理解，用户空间是负责办事情的，内核空间是负责管理所有进程的资源，以及负责与内核一些不公开的资源进行交互的？","like_count":10,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449904,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567651590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160501,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1575965686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35935704054","product_id":100024701,"comment_content":"编译器在静态编译的时候，是比较容易将代码的内存空间做好规划的，也比较好映射到内存中。<br>但如果用dlopen 或 loadlibrary这样的函数，动态加载so或dll是如何做到的，一直不很清楚。<br>希望后面能老师能讲到。","like_count":8},{"had_liked":false,"id":94023,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1557707811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35917446179","product_id":100024701,"comment_content":"pmap pid","like_count":8},{"had_liked":false,"id":98902,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1559114720,"is_pvip":false,"replies":[{"id":"49242","content":"加油","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567605481,"ip_address":"","comment_id":98902,"utype":1}],"discussion_count":5,"race_medal":0,"score":"27328918496","product_id":100024701,"comment_content":"配合《深入浅出计算机组成原理》和《Linux性能优化实战》一起学<br>感觉《趣谈Linux操作系统》难度最大，希望自己能坚持把笔记做到最后<br>day20笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;10919317.html<br>","like_count":7,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451884,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567605481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1080706,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7d/82/5ed8a955.jpg","nickname":"晒太阳","note":"","ucode":"99CFF3D5A4FE72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342715,"discussion_content":"又看到你这个搬运狗，你这拷贝作者同意了吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610789061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1679661,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a1/2d/599e9051.jpg","nickname":"CycleGAN","note":"","ucode":"9FD04813911A02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402325,"discussion_content":"最后还署名的自己。。好意思？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1633863915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111592,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f6/28/baa9521c.jpg","nickname":"绝影","note":"","ucode":"6FD67BF177C108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364575,"discussion_content":"请将在自己的文章附上 原文Reference，尊重作者，谢谢。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617525549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251309,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/ed/f79dd0f6.jpg","nickname":"redj","note":"","ucode":"9BD7A1E0FEA881","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25793,"discussion_content":"我已经蒙圈了好吗,代码还看不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570549599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94012,"user_name":"aiter","can_delete":false,"product_type":"c1","uid":1261780,"ip_address":"","ucode":"8B1D45C2D72B1D","user_header":"https://static001.geekbang.org/account/avatar/00/13/40/d4/9aabdac0.jpg","comment_is_top":false,"comment_ctime":1557706738,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27327510514","product_id":100024701,"comment_content":"cat &#47;proc&#47;22528&#47;maps<br>00400000-00406000 r-xp 00000000 08:03 2886947                            &#47;usr&#47;bin&#47;sleep<br>00606000-00607000 r--p 00006000 08:03 2886947                            &#47;usr&#47;bin&#47;sleep<br>00607000-00608000 rw-p 00007000 08:03 2886947                            &#47;usr&#47;bin&#47;sleep<br>01ecc000-01eed000 rw-p 00000000 00:00 0                                  [heap]<br>7fef2bb48000-7fef3206f000 r--p 00000000 08:03 2888013                    &#47;usr&#47;lib&#47;locale&#47;locale-archive<br>7fef3206f000-7fef32225000 r-xp 00000000 08:03 269589                     &#47;usr&#47;lib64&#47;libc-2.17.so<br>7fef32225000-7fef32425000 ---p 001b6000 08:03 269589                     &#47;usr&#47;lib64&#47;libc-2.17.so<br>7fef32425000-7fef32429000 r--p 001b6000 08:03 269589                     &#47;usr&#47;lib64&#47;libc-2.17.so<br>7fef32429000-7fef3242b000 rw-p 001ba000 08:03 269589                     &#47;usr&#47;lib64&#47;libc-2.17.so<br>7fef3242b000-7fef32430000 rw-p 00000000 00:00 0 <br>7fef32430000-7fef32451000 r-xp 00000000 08:03 269280                     &#47;usr&#47;lib64&#47;ld-2.17.so<br>7fef32640000-7fef32643000 rw-p 00000000 00:00 0 <br>7fef32650000-7fef32651000 rw-p 00000000 00:00 0 <br>7fef32651000-7fef32652000 r--p 00021000 08:03 269280                     &#47;usr&#47;lib64&#47;ld-2.17.so<br>7fef32652000-7fef32653000 rw-p 00022000 08:03 269280                     &#47;usr&#47;lib64&#47;ld-2.17.so<br>7fef32653000-7fef32654000 rw-p 00000000 00:00 0 <br>7fff81aa3000-7fff81ac4000 rw-p 00000000 00:00 0                          [stack]<br>7fff81b8d000-7fff81b8f000 r-xp 00000000 00:00 0                          [vdso]<br>ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]","like_count":7},{"had_liked":false,"id":97069,"user_name":"铁皮","can_delete":false,"product_type":"c1","uid":1013200,"ip_address":"","ucode":"E20FB02D9ABD20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/d0/0053c9ba.jpg","comment_is_top":false,"comment_ctime":1558580150,"is_pvip":false,"replies":[{"id":"49257","content":"赞","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567607999,"ip_address":"","comment_id":97069,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18738449334","product_id":100024701,"comment_content":"@ CHEN <br>你的程序有问题，如果sleep在malloc之前调用，那么是看不到[heap]的，是因为还没有程序在heap上分配空间。<br>如果你在malloc之后调用sleep，就可以看到。","like_count":4,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451123,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567607999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030657,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","nickname":"Leoorz","note":"","ucode":"8912628AD6ADE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3764,"discussion_content":"亲测确实","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564795653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218223,"user_name":"杉松壁","can_delete":false,"product_type":"c1","uid":1080578,"ip_address":"","ucode":"ED904CE27CD3C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/02/4862f849.jpg","comment_is_top":false,"comment_ctime":1589761306,"is_pvip":false,"replies":[{"id":"83091","content":"是的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1591786022,"ip_address":"","comment_id":218223,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14474663194","product_id":100024701,"comment_content":"没个进程都有内核空间，其实都是映射到同一个物理地址段吗","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495391,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591786022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180457,"user_name":"刘利平","can_delete":false,"product_type":"c1","uid":1220166,"ip_address":"","ucode":"7F306BF202A471","user_header":"https://static001.geekbang.org/account/avatar/00/12/9e/46/b96e82d6.jpg","comment_is_top":false,"comment_ctime":1582284784,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14467186672","product_id":100024701,"comment_content":"超哥，linux kernel 4.13你使用什么编辑器查看阅读呢？<br>我使用source insight 4 查看3.16的代码都容易随机崩溃，实际本地内存还剩余4G。<br>如果使用VIM的话，tag文件有可能太大","like_count":3,"discussions":[{"author":{"id":1066409,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","nickname":"Lorry","note":"","ucode":"BD4754D0F1D786","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388878,"discussion_content":"vs code就很好啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629025508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246099,"user_name":"勾波","can_delete":false,"product_type":"c1","uid":1915691,"ip_address":"","ucode":"899A5380BF9292","user_header":"https://static001.geekbang.org/account/avatar/00/1d/3b/2b/8fcbade4.jpg","comment_is_top":false,"comment_ctime":1599179573,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10189114165","product_id":100024701,"comment_content":"内核好像咱们的政府部门，我们去政府部门办事儿，就相当于陷入了内核。","like_count":2,"discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390983,"discussion_content":"哈哈哈哈暗示能不去则不去","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630211140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155331,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1574679365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164613957","product_id":100024701,"comment_content":"要抓住三点：<br>1.为什么要使用虚拟内存？有什么好处<br>2.既然使用的是虚拟内存，如何找到对应的物理内存？<br>3.程序的运行分为用户态和内核态！","like_count":2},{"had_liked":false,"id":235226,"user_name":"唐朝首都","can_delete":false,"product_type":"c1","uid":1081233,"ip_address":"","ucode":"F72655AE0AE4CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/91/962eba1a.jpg","comment_is_top":false,"comment_ctime":1594947327,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"5889914623","product_id":100024701,"comment_content":"有个疑问，这里的Stack放的是主线程的调用栈，那进程中的其他线程调用栈分配在什么地方呢？","like_count":1,"discussions":[{"author":{"id":2617636,"avatar":"https://static001.geekbang.org/account/avatar/00/27/f1/24/07ce02a0.jpg","nickname":"熊光红","note":"","ucode":"2216C008FAD248","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375694,"discussion_content":"每个线程都有自己的栈，不然要乱套","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621818912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297941,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ce/15/51187703.jpg","nickname":"瓜蛋","note":"","ucode":"9033348BEF5F5A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349894,"discussion_content":"线程的栈空间分配在进程的堆上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613621468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391500,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3b/8c/ab7dd1fc.jpg","nickname":"LMZ-ManUtd","note":"","ucode":"D2C04481D30494","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330756,"discussion_content":"堆？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606704617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193348,"user_name":"Geek_b8928e","can_delete":false,"product_type":"c1","uid":1926597,"ip_address":"","ucode":"96E4ABE3F2F145","user_header":"","comment_is_top":false,"comment_ctime":1584890651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879857947","product_id":100024701,"comment_content":"第一，虚拟内存空间的管理，每个进程看到的是独立的、互不干扰的虚拟地址空间；<br>第二，物理内存的管理，物理内存地址只有内存管理模块能够使用；<br>第三，内存映射，需要将虚拟内存和物理内存映射、关联起来。","like_count":1},{"had_liked":false,"id":104883,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1560863059,"is_pvip":false,"replies":[{"id":"49019","content":"如果实模式下，写汇编，就会冲突的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567579833,"ip_address":"","comment_id":104883,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5855830355","product_id":100024701,"comment_content":"个人觉得三个相同的程序写同一个物理内存地址的例子不是太妥当<br>因为内存管理的提供虚拟地址，每个进程才能有一致的地址空间，没有内存管理的话，多个相同的进程不会在运行到同一个地方写内存的时候写同一个地址吧。。。<br>","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454469,"discussion_content":"如果实模式下，写汇编，就会冲突的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567579833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101485,"user_name":"Yayu","can_delete":false,"product_type":"c1","uid":1058015,"ip_address":"","ucode":"5E7842458D8229","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","comment_is_top":false,"comment_ctime":1559819230,"is_pvip":false,"replies":[{"id":"37028","content":"DPL","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1560255359,"ip_address":"","comment_id":101485,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5854786526","product_id":100024701,"comment_content":"请问，用户态 和 内核态 是用来限定什么的？这两个的区分标准是什么？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452985,"discussion_content":"DPL","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560255359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609871,"avatar":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","nickname":"奔跑的码仔","note":"","ucode":"AB3B02B07B8B8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6371,"discussion_content":"请问，DPL代表什么意思？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566872420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94232,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1205993,"ip_address":"","ucode":"0F25DD945C580B","user_header":"https://static001.geekbang.org/account/avatar/00/12/66/e9/fa78e4f4.jpg","comment_is_top":false,"comment_ctime":1557748731,"is_pvip":false,"replies":[{"id":"49367","content":"4.13","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567651498,"ip_address":"","comment_id":94232,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5852716027","product_id":100024701,"comment_content":"请问一下，分析的是linux kernel那个版本？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449968,"discussion_content":"4.13","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567651498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350772,"user_name":"浅陌","can_delete":false,"product_type":"c1","uid":2031603,"ip_address":"","ucode":"1C80224154E747","user_header":"https://static001.geekbang.org/account/avatar/00/1e/ff/f3/de2233f5.jpg","comment_is_top":false,"comment_ctime":1657184173,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657184173","product_id":100024701,"comment_content":"请问每个进程的内核代码都是一样的吗？还是只是编译的那一部分需要内核权限的代码？内核空间是共享的是什么意思呀？能不能举个例子呀，哪些信息是共享的呀","like_count":0},{"had_liked":false,"id":344148,"user_name":"西格玛","can_delete":false,"product_type":"c1","uid":2616564,"ip_address":"","ucode":"95DE1B8A8ACD8F","user_header":"https://static001.geekbang.org/account/avatar/00/27/ec/f4/3c569056.jpg","comment_is_top":false,"comment_ctime":1651302814,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1651302814","product_id":100024701,"comment_content":"请问在什么情况下，内核可以直接使用物理内存？我见到过可以直接使用物理内存的情况，就是硬件设备","like_count":0},{"had_liked":false,"id":341821,"user_name":"有风吹过","can_delete":false,"product_type":"c1","uid":2974447,"ip_address":"","ucode":"5A404C0E9B1B11","user_header":"https://static001.geekbang.org/account/avatar/00/2d/62/ef/f4f442f9.jpg","comment_is_top":false,"comment_ctime":1649846865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649846865","product_id":100024701,"comment_content":"当进程&#47;线程运行在内核空间时就处于内核态，而进程&#47;线程运行在用户空间时则处于用户态。","like_count":0},{"had_liked":false,"id":307975,"user_name":"乔卓越","can_delete":false,"product_type":"c1","uid":1604326,"ip_address":"","ucode":"D9802250CE7D73","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/d6RalvpqHrDew12wiblvHJhSxWaB2xw9mt1rUCmTiaKibaXSO4zmeC05FSoTKqLdib8frDgvsbXK8SwBBxmgBb7icxQ/132","comment_is_top":false,"comment_ctime":1629346157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629346157","product_id":100024701,"comment_content":"segment是面向执行视图的，是按照可读写的属性划分的。Text segment里面不仅有代码，也有只读属性的变量等内容","like_count":0},{"had_liked":false,"id":292307,"user_name":"喜剧。","can_delete":false,"product_type":"c1","uid":1042681,"ip_address":"","ucode":"5F9CF567792B8A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/f9/4412b473.jpg","comment_is_top":false,"comment_ctime":1620780184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620780184","product_id":100024701,"comment_content":"无论是虚拟内存还是物理内存，一定要弄清楚进程使用内存的结构。自身程序，初始变量，未初始变量，堆，栈，共享库内存映射。<br>另外还要注意一点，进程在用户空间使用虚拟内存是相互隔离的。而到了内存空间，是共享虚拟内存呢。","like_count":0},{"had_liked":false,"id":277412,"user_name":"hasun","can_delete":false,"product_type":"c1","uid":2258522,"ip_address":"","ucode":"4DDB0AB2AD18F7","user_header":"https://static001.geekbang.org/account/avatar/00/22/76/5a/38a1d3ba.jpg","comment_is_top":false,"comment_ctime":1612407329,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1612407329","product_id":100024701,"comment_content":"老师，如果分配的空间不够怎么扩展，例如堆&#47;栈都满了，无法再向高地址&#47;低地址扩展","like_count":0,"discussions":[{"author":{"id":1066409,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","nickname":"Lorry","note":"","ucode":"BD4754D0F1D786","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388835,"discussion_content":"分配后，变量还是NULL；所以每次malloc之后，紧跟着判断if（XX==NULL）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629008527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256412,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1603618907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603618907","product_id":100024701,"comment_content":"cat &#47;proc&#47;$pid&#47;maps","like_count":0},{"had_liked":false,"id":227196,"user_name":"蹦哒","can_delete":false,"product_type":"c1","uid":1458931,"ip_address":"","ucode":"56591A657DE7C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epcs6PibsP9vEXv4EibUw3bhQPUK04zRTOvfrvF08TwM67xPb1LBh2uRENHQwo2VqYfC5GhJmM7icxHA/132","comment_is_top":false,"comment_ctime":1592311642,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1592311642","product_id":100024701,"comment_content":"感觉内核态进程和普通进程的主要区别，就是普通进程都需要通过内核进程才能完成一些功能（比如malloc）。除此之外貌似没有明显的区别了，可以当成普通进程理解。听听后面的课，看看有没有新发现或者新证明","like_count":0,"discussions":[{"author":{"id":1066409,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","nickname":"Lorry","note":"","ucode":"BD4754D0F1D786","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388837,"discussion_content":"区别要从职责和意义来理解吧，至少要理解普通进程是不受限的（可以随便写代码实现功能），内核是受限，只有固定的操作会使用到内核","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629008624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193297,"user_name":"有米","can_delete":false,"product_type":"c1","uid":1005042,"ip_address":"","ucode":"C9A10B7A67BC12","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/f2/ba68d931.jpg","comment_is_top":false,"comment_ctime":1584888745,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584888745","product_id":100024701,"comment_content":"进程间通信是要进到内核里来吧？换句话说，我是不是可以在内核里窃取其它进程的信息？","like_count":0,"discussions":[{"author":{"id":1472051,"avatar":"https://static001.geekbang.org/account/avatar/00/16/76/33/928ffd21.jpg","nickname":"AlexS","note":"","ucode":"3DA81A613CE645","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323899,"discussion_content":"进到内核控制权就不在你应用程序拉","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605014443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189013,"user_name":"ck","can_delete":false,"product_type":"c1","uid":1211895,"ip_address":"","ucode":"2963FE3A1C5C05","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er67Ir89QuLrAkQN42Ty95bicaOoBuYJWRYX8xMjydYa3pcicFMxKiaJd06asNk6FkWQKqK6MzbqVjEw/132","comment_is_top":false,"comment_ctime":1584446269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584446269","product_id":100024701,"comment_content":"1. pmap $PID;<br>2.cat &#47;proc&#47;$PID&#47;maps;","like_count":0},{"had_liked":false,"id":174401,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1580193784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580193784","product_id":100024701,"comment_content":"本篇主要学习到的内容：<br><br>1. 物理内存空间和虚拟内存空间的区别，物理内存空间只有管理模块可以使用；<br>2. 虚拟内存空间分为两大块，内核空间和用户空间，每个进程的用户空间是独立的，内核空间是共享的。","like_count":0},{"had_liked":false,"id":165742,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1577310372,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577310372","product_id":100024701,"comment_content":"虚拟内存解决的主要问题是多进程访问内存空间的私密性，仿佛让每个进程看到了巨量完全相同的内存资源。内核态内存区域是共享的，理论上可以用物理内存，也可以用虚拟内存，但是如果用了物理内存，内核态的编码就会和用户态迥异，所以还是用虚拟内存能够最大限度的统一这两者的编程风格，只不过这两者的映射有区别，用户态映射的时候要考虑进程信息，例如pid，内核态的内存空间是共享的，不需要考虑进程信息。<br>让区别发生在映射模块，使得用户态和内核态代码访问内存的风格一致，本身就是一种值得借鉴的编程思路。","like_count":0},{"had_liked":false,"id":150602,"user_name":"Geek_853778","can_delete":false,"product_type":"c1","uid":1620731,"ip_address":"","ucode":"3BE39B3D74206D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/F7YE2rE28IRib0mWMGqGh9s6nP9eO0EEYtxnbmyw8nwLrtOtCoPAhxTZg5l2NrD2fBR7fNX6YWWiagggMMAseTZQ/132","comment_is_top":false,"comment_ctime":1573566481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573566481","product_id":100024701,"comment_content":"虚拟内存其实是为了避免多个进程运行时直接使用物理内存时可能会造成数据覆盖的问题，为每一个进程分配一块独立的内存，互不干扰","like_count":0},{"had_liked":false,"id":145292,"user_name":"程序员老王","can_delete":false,"product_type":"c1","uid":1025340,"ip_address":"","ucode":"28577A15F064CF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/3c/7c0d2e57.jpg","comment_is_top":false,"comment_ctime":1572246270,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572246270","product_id":100024701,"comment_content":"pmap ","like_count":0},{"had_liked":false,"id":139835,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1570754467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570754467","product_id":100024701,"comment_content":"20 内存管理 1 计算机进行计算，包括2方面，一是进程和线程对cpu的使用，二是内存管理 。2 独享内存空间的原理 ，每个进程都有自己独立的内存空间，如果直接使用物理空间，多个程序同时执行会有占用冲突。所以程序使用虚拟地址，系统负责把虚拟地址和物理地址映射起来。2 操作系统的内存管理，包括3个方面，一是物理内存的管理，二是 虚拟地址的管理三 物理地址和虚拟地址做好映射。3 程序对内存使用，一代码会放到内存 二全局变量放到内存，三字符串放到内存，四是局部变量会放到栈 五malloc会分到堆 六glibc代码会放到内存，进入到内核，一是内核代码放到内存里 二是内核中也有全局变量 三 每个进程都有一个task_struct，四每个进程都有一个内核栈，五 内核栈里有动态分配的内存 ，六 虚拟内存和物理内存的映射 4 内存的排列 4.1 内存先分为用户态空间和内核态空间，用户态占用0到29号，内核态占用30到39号。4.2 用户态从0号到29号，依次是text segement(存放二进制可执行代码的位置段)，data segment(存放初始化的静态常量)，bss segment(存放未初始化的静态变量)，heap(动态分配内存的区域)，接下来是Memory Mapping segment，把文件映射进内存使用。接下来是栈地址段，4.3 内核态是共享的，无论哪个进程进入到内核，看到的空间和进程列表都是一样的，如果要访问公共资源需要加锁。","like_count":0},{"had_liked":false,"id":134194,"user_name":"无名","can_delete":false,"product_type":"c1","uid":1110113,"ip_address":"","ucode":"2D2E877CF97138","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/61/68462a07.jpg","comment_is_top":false,"comment_ctime":1568773127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568773127","product_id":100024701,"comment_content":"老师，字符串常量是存储在Data Segment中吗？","like_count":0},{"had_liked":false,"id":132817,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1568246941,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1568246941","product_id":100024701,"comment_content":"老师，多个用户进程调用内核请求，如果内核处理不过来，是不是排队处理啊？还有内核怎么把执行结果返回给用户进程","like_count":0,"discussions":[{"author":{"id":1066409,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","nickname":"Lorry","note":"","ucode":"BD4754D0F1D786","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388880,"discussion_content":"至于结果返回，可以用户态调用内核函数，是有返回值的哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629025787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066409,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","nickname":"Lorry","note":"","ucode":"BD4754D0F1D786","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388879,"discussion_content":"调度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629025708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109771,"user_name":"超超","can_delete":false,"product_type":"c1","uid":1476077,"ip_address":"","ucode":"D0751F29553481","user_header":"https://static001.geekbang.org/account/avatar/00/16/85/ed/905b052f.jpg","comment_is_top":false,"comment_ctime":1562113089,"is_pvip":false,"replies":[{"id":"48807","content":"也是虚拟地址","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567498107,"ip_address":"","comment_id":109771,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562113089","product_id":100024701,"comment_content":"请问下超哥，在写驱动时，比如DMA操作的内存地址，也是虚拟内存地址吗？还是虚拟内存地址只是在用户态界面而言的？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456560,"discussion_content":"也是虚拟地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567498107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97151,"user_name":"烈日融雪","can_delete":false,"product_type":"c1","uid":1131925,"ip_address":"","ucode":"E462E30FB0AFC0","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/95/968fd89f.jpg","comment_is_top":false,"comment_ctime":1558598178,"is_pvip":false,"replies":[{"id":"49256","content":"vsyscall和vDSO是用于加速某些系统调用的两种机制。","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567607845,"ip_address":"","comment_id":97151,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558598178","product_id":100024701,"comment_content":"```<br>&lt;?php<br>if(time()%10==5) {<br>    echo &quot;I got it&quot;.PHP_EOL;<br>}<br>sleep(mt_rand(1,6));<br>?&gt;<br>```<br>php sleep.php &amp;<br><br>cat &#47;proc&#47;$pid&#47;maps <br><br>可以看到分了很多段，但是<br>7fffc2822000-7fffc2843000 rw-p 00000000 00:00 0                          [stack]<br>7fffc294b000-7fffc294d000 r--p 00000000 00:00 0                          [vvar]<br>7fffc294d000-7fffc294f000 r-xp 00000000 00:00 0                          [vdso]<br>ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]<br>[stack]和[vsyscall]之间的也是属于syscall么？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451157,"discussion_content":"vsyscall和vDSO是用于加速某些系统调用的两种机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567607845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94071,"user_name":"MARK","can_delete":false,"product_type":"c1","uid":1126900,"ip_address":"","ucode":"9F429C9C5FEE6A","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/f4/467cf5d7.jpg","comment_is_top":false,"comment_ctime":1557713930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557713930","product_id":100024701,"comment_content":"为什么我打印出来的进程内存空间没有堆heap？是因为用的是阿里云的服务器，aiter童鞋是本地安装的虚拟机么？<br>查看并打印进程空间布局 cat &#47;proc&#47;$pid&#47;maps<br>1 test.c copy老师的示例代码直接编译,或是自己写设置一个中断,sleep(10000);或是getchar();接收键盘输入一个字符<br>2 .&#47;a.out &amp; 后台运行<br>[root@localhost process]# .&#47;a.out &amp;<br>[1] 25155<br>[root@localhost process]# cat &#47;proc&#47;25155&#47;maps<br>00400000-00401000 r-xp 00000000 fd:01 423732                             &#47;root&#47;process&#47;a.out<br>00600000-00601000 r--p 00000000 fd:01 423732                             &#47;root&#47;process&#47;a.out<br>00601000-00602000 rw-p 00001000 fd:01 423732                             &#47;root&#47;process&#47;a.out<br>7ff172733000-7ff1728eb000 r-xp 00000000 fd:01 1049989                    &#47;usr&#47;lib64&#47;libc-2.17.so<br>7ff1728eb000-7ff172aeb000 ---p 001b8000 fd:01 1049989                    &#47;usr&#47;lib64&#47;libc-2.17.so<br>7ff172aeb000-7ff172aef000 r--p 001b8000 fd:01 1049989                    &#47;usr&#47;lib64&#47;libc-2.17.so<br>7ff172aef000-7ff172af1000 rw-p 001bc000 fd:01 1049989                    &#47;usr&#47;lib64&#47;libc-2.17.so<br>7ff172af1000-7ff172af6000 rw-p 00000000 00:00 0 <br>7ff172af6000-7ff172b17000 r-xp 00000000 fd:01 1049982                    &#47;usr&#47;lib64&#47;ld-2.17.so<br>7ff172d0a000-7ff172d0d000 rw-p 00000000 00:00 0 <br>7ff172d14000-7ff172d17000 rw-p 00000000 00:00 0 <br>7ff172d17000-7ff172d18000 r--p 00021000 fd:01 1049982                    &#47;usr&#47;lib64&#47;ld-2.17.so<br>7ff172d18000-7ff172d19000 rw-p 00022000 fd:01 1049982                    &#47;usr&#47;lib64&#47;ld-2.17.so<br>7ff172d19000-7ff172d1a000 rw-p 00000000 00:00 0 <br>7ffed45db000-7ffed45fc000 rw-p 00000000 00:00 0                          [stack]<br>7ffed45fd000-7ffed45ff000 r-xp 00000000 00:00 0                          [vdso]<br>ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]","like_count":0}]}