{"id":216830,"title":"11 | 空值处理：分不清楚的null和恼人的空指针","content":"<p>你好，我是朱晔。今天，我要和你分享的主题是，空值处理：分不清楚的null和恼人的空指针。</p><p>有一天我收到一条短信，内容是“尊敬的null你好，XXX”。当时我就笑了，这是程序员都能Get的笑点，程序没有获取到我的姓名，然后把空格式化为了null。很明显，这是没处理好null。哪怕把null替换为贵宾、顾客，也不会引发这样的笑话。</p><p>程序中的变量是null，就意味着它没有引用指向或者说没有指针。这时，我们对这个变量进行任何操作，都必然会引发空指针异常，在Java中就是NullPointerException。那么，空指针异常容易在哪些情况下出现，又应该如何修复呢？</p><p>空指针异常虽然恼人但好在容易定位，更麻烦的是要弄清楚null的含义。比如，客户端给服务端的一个数据是null，那么其意图到底是给一个空值，还是没提供值呢？再比如，数据库中字段的NULL值，是否有特殊的含义呢，针对数据库中的NULL值，写SQL需要特别注意什么呢？</p><p>今天，就让我们带着这些问题开始null的踩坑之旅吧。</p><h2>修复和定位恼人的空指针问题</h2><p><strong>NullPointerException是Java代码中最常见的异常，我将其最可能出现的场景归为以下5种</strong>：</p><!-- [[[read_end]]] --><ul>\n<li>参数值是Integer等包装类型，使用时因为自动拆箱出现了空指针异常；</li>\n<li>字符串比较出现空指针异常；</li>\n<li>诸如ConcurrentHashMap这样的容器不支持Key和Value为null，强行put null的Key或Value会出现空指针异常；</li>\n<li>A对象包含了B，在通过A对象的字段获得B之后，没有对字段判空就级联调用B的方法出现空指针异常；</li>\n<li>方法或远程服务返回的List不是空而是null，没有进行判空就直接调用List的方法出现空指针异常。</li>\n</ul><p>为模拟说明这5种场景，我写了一个wrongMethod方法，并用一个wrong方法来调用它。wrong方法的入参test是一个由0和1构成的、长度为4的字符串，第几位设置为1就代表第几个参数为null，用来控制wrongMethod方法的4个入参，以模拟各种空指针情况：</p><pre><code>private List&lt;String&gt; wrongMethod(FooService fooService, Integer i, String s, String t) {\n    log.info(&quot;result {} {} {} {}&quot;, i + 1, s.equals(&quot;OK&quot;), s.equals(t),\n            new ConcurrentHashMap&lt;String, String&gt;().put(null, null));\n    if (fooService.getBarService().bar().equals(&quot;OK&quot;))\n        log.info(&quot;OK&quot;);\n    return null;\n}\n\n@GetMapping(&quot;wrong&quot;)\npublic int wrong(@RequestParam(value = &quot;test&quot;, defaultValue = &quot;1111&quot;) String test) {\n    return wrongMethod(test.charAt(0) == '1' ? null : new FooService(),\n            test.charAt(1) == '1' ? null : 1,\n            test.charAt(2) == '1' ? null : &quot;OK&quot;,\n            test.charAt(3) == '1' ? null : &quot;OK&quot;).size();\n}\n\nclass FooService {\n    @Getter\n    private BarService barService;\n\n}\n\nclass BarService {\n    String bar() {\n        return &quot;OK&quot;;\n    }\n}\n</code></pre><p>很明显，这个案例出现空指针异常是因为变量是一个空指针，尝试获得变量的值或访问变量的成员会获得空指针异常。但，这个异常的定位比较麻烦。</p><p>在测试方法wrongMethod中，我们通过一行日志记录的操作，在一行代码中模拟了4处空指针异常：</p><ul>\n<li>对入参Integer i进行+1操作；</li>\n<li>对入参String s进行比较操作，判断内容是否等于\"OK\"；</li>\n<li>对入参String s和入参String t进行比较操作，判断两者是否相等；</li>\n<li>对new出来的ConcurrentHashMap进行put操作，Key和Value都设置为null。</li>\n</ul><p>输出的异常信息如下：</p><pre><code>java.lang.NullPointerException: null\n\tat org.geekbang.time.commonmistakes.nullvalue.demo2.AvoidNullPointerExceptionController.wrongMethod(AvoidNullPointerExceptionController.java:37)\n\tat org.geekbang.time.commonmistakes.nullvalue.demo2.AvoidNullPointerExceptionController.wrong(AvoidNullPointerExceptionController.java:20)\n</code></pre><p>这段信息确实提示了这行代码出现了空指针异常，但我们很难定位出到底是哪里出现了空指针，可能是把入参Integer拆箱为int的时候出现的，也可能是入参的两个字符串任意一个为null，也可能是因为把null加入了ConcurrentHashMap。</p><p>你可能会想到，要排查这样的问题，只要设置一个断点看一下入参即可。但，在真实的业务场景中，空指针问题往往是在特定的入参和代码分支下才会出现，本地难以重现。如果要排查生产上出现的空指针问题，设置代码断点不现实，通常是要么把代码进行拆分，要么增加更多的日志，但都比较麻烦。</p><p>在这里，我推荐使用阿里开源的Java故障诊断神器<a href=\"https://alibaba.github.io/arthas/\">Arthas</a>。Arthas简单易用功能强大，可以定位出大多数的Java生产问题。</p><p>接下来，我就和你演示下如何在30秒内知道wrongMethod方法的入参，从而定位到空指针到底是哪个入参引起的。如下截图中有三个红框，我先和你分析第二和第三个红框：</p><ul>\n<li>第二个红框表示，Arthas启动后被附加到了JVM进程；</li>\n<li>第三个红框表示，通过watch命令监控wrongMethod方法的入参。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/e2/6b/e2d39e5da91a8258c5aab3691e515c6b.png?wh=2194*1796\" alt=\"\"></p><p>watch命令的参数包括类名表达式、方法表达式和观察表达式。这里，我们设置观察类为AvoidNullPointerExceptionController，观察方法为wrongMethod，观察表达式为params表示观察入参：</p><pre><code>watch org.geekbang.time.commonmistakes.nullvalue.demo2.AvoidNullPointerExceptionController wrongMethod params\n</code></pre><p>开启watch后，执行2次wrong方法分别设置test入参为1111和1101，也就是第一次传入wrongMethod的4个参数都为null，第二次传入的第1、2和4个参数为null。</p><p>配合图中第一和第四个红框可以看到，第二次调用时，第三个参数是字符串OK其他参数是null，Archas正确输出了方法的所有入参，这样我们很容易就能定位到空指针的问题了。</p><p>到这里，如果是简单的业务逻辑的话，你就可以定位到空指针异常了；如果是分支复杂的业务逻辑，你需要再借助stack命令来查看wrongMethod方法的调用栈，并配合watch命令查看各方法的入参，就可以很方便地定位到空指针的根源了。</p><p>下图演示了通过stack命令观察wrongMethod的调用路径：</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/ef/6c9ac7f4345936ece0b0d31c1ad974ef.png?wh=2862*308\" alt=\"\"></p><p>如果你想了解Arthas各种命令的详细使用方法，可以<a href=\"https://alibaba.github.io/arthas/commands.html\">点击</a>这里查看。</p><p>接下来，我们看看如何修复上面出现的5种空指针异常。</p><p>其实，对于任何空指针异常的处理，最直白的方式是先判空后操作。不过，这只能让异常不再出现，我们还是要找到程序逻辑中出现的空指针究竟是来源于入参还是Bug：</p><ul>\n<li>如果是来源于入参，还要进一步分析入参是否合理等；</li>\n<li>如果是来源于Bug，那空指针不一定是纯粹的程序Bug，可能还涉及业务属性和接口调用规范等。</li>\n</ul><p>在这里，因为是Demo，所以我们只考虑纯粹的空指针判空这种修复方式。如果要先判空后处理，大多数人会想到使用if-else代码块。但，这种方式既增加代码量又会降低易读性，我们可以尝试利用Java 8的Optional类来消除这样的if-else逻辑，使用一行代码进行判空和处理。</p><p>修复思路如下：</p><ul>\n<li>对于Integer的判空，可以使用Optional.ofNullable来构造一个Optional<integer>，然后使用orElse(0)把null替换为默认值再进行+1操作。</integer></li>\n<li>对于String和字面量的比较，可以把字面量放在前面，比如\"OK\".equals(s)，这样即使s是null也不会出现空指针异常；而对于两个可能为null的字符串变量的equals比较，可以使用Objects.equals，它会做判空处理。</li>\n<li>对于ConcurrentHashMap，既然其Key和Value都不支持null，修复方式就是不要把null存进去。HashMap的Key和Value可以存入null，而ConcurrentHashMap看似是HashMap的线程安全版本，却不支持null值的Key和Value，这是容易产生误区的一个地方。</li>\n<li>对于类似fooService.getBarService().bar().equals(“OK”)的级联调用，需要判空的地方有很多，包括fooService、getBarService()方法的返回值，以及bar方法返回的字符串。如果使用if-else来判空的话可能需要好几行代码，但使用Optional的话一行代码就够了。</li>\n<li>对于rightMethod返回的List<string>，由于不能确认其是否为null，所以在调用size方法获得列表大小之前，同样可以使用Optional.ofNullable包装一下返回值，然后通过.orElse(Collections.emptyList())实现在List为null的时候获得一个空的List，最后再调用size方法。</string></li>\n</ul><pre><code>private List&lt;String&gt; rightMethod(FooService fooService, Integer i, String s, String t) {\n    log.info(&quot;result {} {} {} {}&quot;, Optional.ofNullable(i).orElse(0) + 1, &quot;OK&quot;.equals(s), Objects.equals(s, t), new HashMap&lt;String, String&gt;().put(null, null));\n    Optional.ofNullable(fooService)\n            .map(FooService::getBarService)\n            .filter(barService -&gt; &quot;OK&quot;.equals(barService.bar()))\n            .ifPresent(result -&gt; log.info(&quot;OK&quot;));\n    return new ArrayList&lt;&gt;();\n}\n\n@GetMapping(&quot;right&quot;)\npublic int right(@RequestParam(value = &quot;test&quot;, defaultValue = &quot;1111&quot;) String test) {\n    return Optional.ofNullable(rightMethod(test.charAt(0) == '1' ? null : new FooService(),\n            test.charAt(1) == '1' ? null : 1,\n            test.charAt(2) == '1' ? null : &quot;OK&quot;,\n            test.charAt(3) == '1' ? null : &quot;OK&quot;))\n            .orElse(Collections.emptyList()).size();\n}\n</code></pre><p>经过修复后，调用right方法传入1111，也就是给rightMethod的4个参数都设置为null，日志中也看不到任何空指针异常了：</p><pre><code>[21:43:40.619] [http-nio-45678-exec-2] [INFO ] [.AvoidNullPointerExceptionController:45  ] - result 1 false true null\n</code></pre><p>但是，如果我们修改right方法入参为0000，即传给rightMethod方法的4个参数都不可能是null，最后日志中也无法出现OK字样。这又是为什么呢，BarService的bar方法不是返回了OK字符串吗？</p><p>我们还是用Arthas来定位问题，使用watch命令来观察方法rightMethod的入参，-x参数设置为2代表参数打印的深度为2层：</p><p><img src=\"https://static001.geekbang.org/resource/image/0c/82/0ce3c96788f243791cbd512aecfa6382.png?wh=2404*460\" alt=\"\"></p><p>可以看到，FooService中的barService字段为null，这样也就可以理解为什么最终出现这个Bug了。</p><p>这又引申出一个问题，<strong>使用判空方式或Optional方式来避免出现空指针异常，不一定是解决问题的最好方式，空指针没出现可能隐藏了更深的Bug</strong>。因此，解决空指针异常，还是要真正case by case地定位分析案例，然后再去做判空处理，而处理时也并不只是判断非空然后进行正常业务流程这么简单，同样需要考虑为空的时候是应该出异常、设默认值还是记录日志等。</p><h2>POJO中属性的null到底代表了什么？</h2><p>在我看来，相比判空避免空指针异常，更容易出错的是null的定位问题。对程序来说，null就是指针没有任何指向，而结合业务逻辑情况就复杂得多，我们需要考虑：</p><ul>\n<li>DTO中字段的null到底意味着什么？是客户端没有传给我们这个信息吗？</li>\n<li>既然空指针问题很讨厌，那么DTO中的字段要设置默认值么？</li>\n<li>如果数据库实体中的字段有null，那么通过数据访问框架保存数据是否会覆盖数据库中的既有数据？</li>\n</ul><p>如果不能明确地回答这些问题，那么写出的程序逻辑很可能会混乱不堪。接下来，我们看一个实际案例吧。</p><p>有一个User的POJO，同时扮演DTO和数据库Entity角色，包含用户ID、姓名、昵称、年龄、注册时间等属性：</p><pre><code>@Data\n@Entity\npublic class User {\n    @Id\n    @GeneratedValue(strategy = IDENTITY)\n    private Long id;\n    private String name;\n    private String nickname;\n    private Integer age;\n    private Date createDate = new Date();\n}\n</code></pre><p>有一个Post接口用于更新用户数据，更新逻辑非常简单，根据用户姓名自动设置一个昵称，昵称的规则是“用户类型+姓名”，然后直接把客户端在RequestBody中使用JSON传过来的User对象通过JPA更新到数据库中，最后返回保存到数据库的数据。</p><pre><code>@Autowired\nprivate UserRepository userRepository;\n\n@PostMapping(&quot;wrong&quot;)\npublic User wrong(@RequestBody User user) {\n    user.setNickname(String.format(&quot;guest%s&quot;, user.getName()));\n    return userRepository.save(user);\n}\n\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n}\n</code></pre><p>首先，在数据库中初始化一个用户，age=36、name=zhuye、create_date=2020年1月4日、nickname是NULL：</p><p><img src=\"https://static001.geekbang.org/resource/image/de/67/de1bcb580ea63505a8e093c51c4cd567.png?wh=1004*128\" alt=\"\"></p><p>然后，使用cURL测试一下用户信息更新接口Post，传入一个id=1、name=null的JSON字符串，期望把ID为1的用户姓名设置为空：</p><pre><code>curl -H &quot;Content-Type:application/json&quot; -X POST -d '{ &quot;id&quot;:1, &quot;name&quot;:null}' http://localhost:45678/pojonull/wrong\n\n{&quot;id&quot;:1,&quot;name&quot;:null,&quot;nickname&quot;:&quot;guestnull&quot;,&quot;age&quot;:null,&quot;createDate&quot;:&quot;2020-01-05T02:01:03.784+0000&quot;}%\n</code></pre><p>接口返回的结果和数据库中记录一致：</p><p><img src=\"https://static001.geekbang.org/resource/image/af/fd/af9c07a63ba837683ad059a6afcceafd.png?wh=1012*124\" alt=\"\"></p><p>可以看到，这里存在如下三个问题：</p><ul>\n<li>调用方只希望重置用户名，但age也被设置为了null；</li>\n<li>nickname是用户类型加姓名，name重置为null的话，访客用户的昵称应该是guest，而不是guestnull，重现了文首提到的那个笑点；</li>\n<li>用户的创建时间原来是1月4日，更新了用户信息后变为了1月5日。</li>\n</ul><p>归根结底，这是如下5个方面的问题：</p><ul>\n<li>明确DTO中null的含义。<strong>对于JSON到DTO的反序列化过程，null的表达是有歧义的，客户端不传某个属性，或者传null，这个属性在DTO中都是null。</strong>但，对于用户信息更新操作，不传意味着客户端不需要更新这个属性，维持数据库原先的值；传了null，意味着客户端希望重置这个属性。因为Java中的null就是没有这个数据，无法区分这两种表达，所以本例中的age属性也被设置为了null，或许我们可以借助Optional来解决这个问题。</li>\n<li><strong>POJO中的字段有默认值。如果客户端不传值，就会赋值为默认值，导致创建时间也被更新到了数据库中。</strong></li>\n<li><strong>注意字符串格式化时可能会把null值格式化为null字符串。</strong>比如昵称的设置，我们只是进行了简单的字符串格式化，存入数据库变为了guestnull。显然，这是不合理的，也是开头我们说的笑话的来源，还需要进行判断。</li>\n<li><strong>DTO和Entity共用了一个POJO</strong>。对于用户昵称的设置是程序控制的，我们不应该把它们暴露在DTO中，否则很容易把客户端随意设置的值更新到数据库中。此外，创建时间最好让数据库设置为当前时间，不用程序控制，可以通过在字段上设置columnDefinition来实现。</li>\n<li><strong>数据库字段允许保存null，会进一步增加出错的可能性和复杂度</strong>。因为如果数据真正落地的时候也支持NULL的话，可能就有NULL、空字符串和字符串null三种状态。这一点我会在下一小节展开。如果所有属性都有默认值，问题会简单一点。</li>\n</ul><p>按照这个思路，我们对DTO和Entity进行拆分，修改后代码如下所示：</p><ul>\n<li>UserDto中只保留id、name和age三个属性，且name和age使用Optional来包装，以区分客户端不传数据还是故意传null。</li>\n<li>在UserEntity的字段上使用@Column注解，把数据库字段name、nickname、age和createDate都设置为NOT NULL，并设置createDate的默认值为CURRENT_TIMESTAMP，由数据库来生成创建时间。</li>\n<li>使用Hibernate的@DynamicUpdate注解实现更新SQL的动态生成，实现只更新修改后的字段，不过需要先查询一次实体，让Hibernate可以“跟踪”实体属性的当前状态，以确保有效。</li>\n</ul><pre><code>@Data\npublic class UserDto {\n    private Long id;\n    private Optional&lt;String&gt; name;\n    private Optional&lt;Integer&gt; age;\n; \n\n@Data\n@Entity\n@DynamicUpdate\npublic class UserEntity {\n    @Id\n    @GeneratedValue(strategy = IDENTITY)\n    private Long id;\n    @Column(nullable = false)\n    private String name;\n    @Column(nullable = false)\n    private String nickname;\n    @Column(nullable = false)\n    private Integer age;\n    @Column(nullable = false, columnDefinition = &quot;TIMESTAMP DEFAULT CURRENT_TIMESTAMP&quot;)\n    private Date createDate;\n}\n</code></pre><p>在重构了DTO和Entity后，我们重新定义一个right接口，以便对更新操作进行更精细化的处理。首先是参数校验：</p><ul>\n<li>对传入的UserDto和ID属性先判空，如果为空直接抛出IllegalArgumentException。</li>\n<li>根据id从数据库中查询出实体后进行判空，如果为空直接抛出IllegalArgumentException。</li>\n</ul><p>然后，由于DTO中已经巧妙使用了Optional来区分客户端不传值和传null值，那么业务逻辑实现上就可以按照客户端的意图来分别实现逻辑。如果不传值，那么Optional本身为null，直接跳过Entity字段的更新即可，这样动态生成的SQL就不会包含这个列；如果传了值，那么进一步判断传的是不是null。</p><p>下面，我们根据业务需要分别对姓名、年龄和昵称进行更新：</p><ul>\n<li>对于姓名，我们认为客户端传null是希望把姓名重置为空，允许这样的操作，使用Optional的orElse方法一键把空转换为空字符串即可。</li>\n<li>对于年龄，我们认为如果客户端希望更新年龄就必须传一个有效的年龄，年龄不存在重置操作，可以使用Optional的orElseThrow方法在值为空的时候抛出IllegalArgumentException。</li>\n<li>对于昵称，因为数据库中姓名不可能为null，所以可以放心地把昵称设置为guest加上数据库取出来的姓名。</li>\n</ul><pre><code>@PostMapping(&quot;right&quot;)\npublic UserEntity right(@RequestBody UserDto user) {\n    if (user == null || user.getId() == null)\n        throw new IllegalArgumentException(&quot;用户Id不能为空&quot;);\n\n    UserEntity userEntity = userEntityRepository.findById(user.getId())\n            .orElseThrow(() -&gt; new IllegalArgumentException(&quot;用户不存在&quot;));\n\n    if (user.getName() != null) {\n        userEntity.setName(user.getName().orElse(&quot;&quot;));\n    }\n    userEntity.setNickname(&quot;guest&quot; + userEntity.getName());\n    if (user.getAge() != null) {\n        userEntity.setAge(user.getAge().orElseThrow(() -&gt; new IllegalArgumentException(&quot;年龄不能为空&quot;)));\n    }\n    return userEntityRepository.save(userEntity);\n}\n</code></pre><p>假设数据库中已经有这么一条记录，id=1、age=36、create_date=2020年1月4日、name=zhuye、nickname=guestzhuye：</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/47/5f1d46ea87f37a570b32f94ac44ca947.png?wh=980*118\" alt=\"\"></p><p>使用相同的参数调用right接口，再来试试是否解决了所有问题。传入一个id=1、name=null的JSON字符串，期望把id为1的用户姓名设置为空：</p><pre><code>curl -H &quot;Content-Type:application/json&quot; -X POST -d '{ &quot;id&quot;:1, &quot;name&quot;:null}' http://localhost:45678/pojonull/right\n\n{&quot;id&quot;:1,&quot;name&quot;:&quot;&quot;,&quot;nickname&quot;:&quot;guest&quot;,&quot;age&quot;:36,&quot;createDate&quot;:&quot;2020-01-04T11:09:20.000+0000&quot;}%\n</code></pre><p>结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/4a/a68db8e14e7dca3ff9b22e2348272a4a.png?wh=860*108\" alt=\"\"></p><p>可以看到，right接口完美实现了仅重置name属性的操作，昵称也不再有null字符串，年龄和创建时间字段也没被修改。</p><p>通过日志可以看到，Hibernate生成的SQL语句只更新了name和nickname两个字段：</p><pre><code>Hibernate: update user_entity set name=?, nickname=? where id=?\n</code></pre><p>接下来，为了测试使用Optional是否可以有效区分JSON中没传属性还是传了null，我们在JSON中设置了一个null的age，结果是正确得到了年龄不能为空的错误提示：</p><pre><code>curl -H &quot;Content-Type:application/json&quot; -X POST -d '{ &quot;id&quot;:1, &quot;age&quot;:null}' http://localhost:45678/pojonull/right\n\n{&quot;timestamp&quot;:&quot;2020-01-05T03:14:40.324+0000&quot;,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;message&quot;:&quot;年龄不能为空&quot;,&quot;path&quot;:&quot;/pojonull/right&quot;}%\n</code></pre><h2>小心MySQL中有关NULL的三个坑</h2><p>前面提到，数据库表字段允许存NULL除了会让我们困惑外，还容易有坑。这里我会结合NULL字段，和你着重说明sum函数、count函数，以及NULL值条件可能踩的坑。</p><p>为方便演示，首先定义一个只有id和score两个字段的实体：</p><pre><code>@Entity\n@Data\npublic class User {\n    @Id\n    @GeneratedValue(strategy = IDENTITY)\n    private Long id;\n    private Long score;\n}\n</code></pre><p>程序启动的时候，往实体初始化一条数据，其id是自增列自动设置的1，score是NULL：</p><pre><code>@Autowired\nprivate UserRepository userRepository;\n\n@PostConstruct\npublic void init() {\n    userRepository.save(new User());\n}\n</code></pre><p>然后，测试下面三个用例，来看看结合数据库中的null值可能会出现的坑：</p><ul>\n<li>通过sum函数统计一个只有NULL值的列的总和，比如SUM(score)；</li>\n<li>select记录数量，count使用一个允许NULL的字段，比如COUNT(score)；</li>\n<li>使用=NULL条件查询字段值为NULL的记录，比如score=null条件。</li>\n</ul><pre><code>@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n    @Query(nativeQuery=true,value = &quot;SELECT SUM(score) FROM `user`&quot;)\n    Long wrong1();\n    @Query(nativeQuery = true, value = &quot;SELECT COUNT(score) FROM `user`&quot;)\n    Long wrong2();\n    @Query(nativeQuery = true, value = &quot;SELECT * FROM `user` WHERE score=null&quot;)\n    List&lt;User&gt; wrong3();\n}\n</code></pre><p>得到的结果，分别是null、0和空List：</p><pre><code>[11:38:50.137] [http-nio-45678-exec-1] [INFO ] [t.c.nullvalue.demo3.DbNullController:26  ] - result: null 0 [] \n</code></pre><p>显然，这三条SQL语句的执行结果和我们的期望不同：</p><ul>\n<li>虽然记录的score都是NULL，但sum的结果应该是0才对；</li>\n<li>虽然这条记录的score是NULL，但记录总数应该是1才对；</li>\n<li>使用=NULL并没有查询到id=1的记录，查询条件失效。</li>\n</ul><p>原因是：</p><ul>\n<li><strong>MySQL中sum函数没统计到任何记录时，会返回null而不是0</strong>，可以使用IFNULL函数把null转换为0；</li>\n<li><strong>MySQL中count字段不统计null值</strong>，COUNT(*)才是统计所有记录数量的正确方式。</li>\n<li><strong>MySQL中使用诸如=、&lt;、&gt;这样的算数比较操作符比较NULL的结果总是NULL</strong>，这种比较就显得没有任何意义，需要使用IS NULL、IS NOT NULL或 ISNULL()函数来比较。</li>\n</ul><p>修改一下SQL：</p><pre><code>@Query(nativeQuery = true, value = &quot;SELECT IFNULL(SUM(score),0) FROM `user`&quot;)\nLong right1();\n@Query(nativeQuery = true, value = &quot;SELECT COUNT(*) FROM `user`&quot;)\nLong right2();\n@Query(nativeQuery = true, value = &quot;SELECT * FROM `user` WHERE score IS NULL&quot;)\nList&lt;User&gt; right3();\n</code></pre><p>可以得到三个正确结果，分别为0、1、[User(id=1, score=null)] ：</p><pre><code>[14:50:35.768] [http-nio-45678-exec-1] [INFO ] [t.c.nullvalue.demo3.DbNullController:31  ] - result: 0 1 [User(id=1, score=null)] \n</code></pre><h2>重点回顾</h2><p>今天，我和你讨论了做好空值处理需要注意的几个问题。</p><p>我首先总结了业务代码中5种最容易出现空指针异常的写法，以及相应的修复方式。针对判空，通过Optional配合Stream可以避免大多数冗长的if-else判空逻辑，实现一行代码优雅判空。另外，要定位和修复空指针异常，除了可以通过增加日志进行排查外，在生产上使用Arthas来查看方法的调用栈和入参会更快捷。</p><p>在我看来，业务系统最基本的标准是不能出现未处理的空指针异常，因为它往往代表了业务逻辑的中断，所以我建议每天查询一次生产日志来排查空指针异常，有条件的话建议订阅空指针异常报警，以便及时发现及时处理。</p><p>POJO中字段的null定位，从服务端的角度往往很难分清楚，到底是客户端希望忽略这个字段还是有意传了null，因此我们尝试用Optional<t>类来区分null的定位。同时，为避免把空值更新到数据库中，可以实现动态SQL，只更新必要的字段。</t></p><p>最后，我分享了数据库字段使用NULL可能会带来的三个坑（包括sum函数、count函数，以及NULL值条件），以及解决方式。</p><p>总结来讲，null的正确处理以及避免空指针异常，绝不是判空这么简单，还要根据业务属性从前到后仔细考虑，客户端传入的null代表了什么，出现了null是否允许使用默认值替代，入库的时候应该传入null还是空值，并确保整个逻辑处理的一致性，才能尽量避免Bug。</p><p>为处理好null，作为客户端的开发者，需要和服务端对齐字段null的含义以及降级逻辑；而作为服务端的开发者，需要对入参进行前置判断，提前挡掉服务端不可接受的空值，同时在整个业务逻辑过程中进行完善的空值处理。</p><p>今天用到的代码，我都放在了GitHub上，你可以点击<a href=\"https://github.com/JosephZhu1983/java-common-mistakes\">这个链接</a>查看。</p><h2>思考与讨论</h2><ol>\n<li>ConcurrentHashMap的Key和Value都不能为null，而HashMap却可以，你知道这么设计的原因是什么吗？TreeMap、Hashtable等Map的Key和Value是否支持null呢？</li>\n<li>对于Hibernate框架可以使用@DynamicUpdate注解实现字段的动态更新，对于MyBatis框架如何实现类似的动态SQL功能，实现插入和修改SQL只包含POJO中的非空字段？</li>\n</ol><p>关于程序和数据库中的null、空指针问题，你还遇到过什么坑吗？我是朱晔，欢迎在评论区与我留言分享，也欢迎你把这篇文章分享给你的朋友或同事，一起交流。</p>","neighbors":{"left":{"article_title":"10 | 集合类：坑满地的List列表操作","id":216778},"right":{"article_title":"12 | 异常处理：别让自己在出问题的时候变为瞎子","id":220230}},"comments":[{"had_liked":false,"id":201496,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1585795776,"is_pvip":true,"replies":[{"id":"75375","content":"👍🏻","user_name":"作者回复","comment_id":201496,"uid":"1001470","ip_address":"","utype":1,"ctime":1585797794,"user_name_real":"朱晔"}],"discussion_count":10,"race_medal":0,"score":"276463702720","product_id":100047701,"comment_content":"补充下：在MySQL的使用中，对于索引列，建议都设置为not null，因为如果有null的话，MySQL需要单独专门处理null值，会额外耗费性能。<br>回答下问题：<br>第一个问题：<br>从ConcurrentHashMap他自己的作者（Doug Lea）：<br><br>http:&#47;&#47;cs.oswego.edu&#47;pipermail&#47;concurrency-interest&#47;2006-May&#47;002485.html<br><br>The main reason that nulls aren&#39;t allowed in ConcurrentMaps<br>(ConcurrentHashMaps, ConcurrentSkipListMaps) is that<br>ambiguities that may be just barely tolerable in non-concurrent<br>maps can&#39;t be accommodated. The main one is that if<br>map.get(key) returns null, you can&#39;t detect whether the<br>key explicitly maps to null vs the key isn&#39;t mapped.<br>In a non-concurrent map, you can check this via map.contains(key),<br>but in a concurrent one, the map might have changed between calls.<br><br>ConcurrentMaps（ConcurrentHashMaps，ConcurrentSkipListMaps）不允许使用null的主要原因是，无法容纳在非并行映射中几乎无法容忍的歧义。最主要的是，如果map.get(key)return null，则无法检测到该键是否显式映射到null该键。在非并行映射中，您可以通过进行检查 map.contains(key)，但在并行映射中，两次调用之间的映射可能已更改。<br><br>hashtable也是线程安全的，所以也是key和value也是不可以null的<br>treeMap 线程不安全，但是因为需要排序，进行key的compareTo方法，所以key是不能null中，value是可以的<br><br>第二个问题：<br>MyBatis @Column注解的updateIfNull属性，可以控制，当对应的列value为null时，updateIfNull的true和false可以控制","like_count":64,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490353,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585797794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1589989,"avatar":"https://static001.geekbang.org/account/avatar/00/18/42/e5/61cfe267.jpg","nickname":"Eclipse","note":"","ucode":"E7EB0BA99FA644","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266033,"discussion_content":"怀疑你是老师的小号，每次都这么优秀","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589466729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228927,"discussion_content":"学习到了，这个留言都能值回票价","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586591135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":229775,"discussion_content":"还需要在极客时间多多学习😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586689562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":228927,"ip_address":""},"score":229775,"extra":""}]},{"author":{"id":1396147,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4d/b3/85828cc4.jpg","nickname":"f","note":"","ucode":"686BD6C21FE02B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220350,"discussion_content":"点睛之笔","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585855020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1396147,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4d/b3/85828cc4.jpg","nickname":"f","note":"","ucode":"686BD6C21FE02B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220743,"discussion_content":"谢谢，大家一起跟着老师进步","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585922555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":220350,"ip_address":""},"score":220743,"extra":""}]},{"author":{"id":1750549,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b6/15/e2cfd10d.jpg","nickname":"ImYours°","note":"","ucode":"51F653129034C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375771,"discussion_content":"多兰哥，🐂🍺","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621845999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1992424,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep3sqfTQey7eKYgGibLnAvaNj9k8gVvIYKVADicOA3DxmXZcDrAkeM8iaJLruiblmEVUr3q2LOVLvYicTw/132","nickname":"郑先生","note":"","ucode":"AA0BA751C4F132","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281521,"discussion_content":"mybatis使用动态sql应该也能实现老师说的那种吧，注解没用过^~^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591758475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1012361,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/72/89/1a83120a.jpg","nickname":"yihang","note":"","ucode":"A5506F085D1793","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236415,"discussion_content":"@Darren mybatis 里没有 @Column 注解啊，你是用了第三方包吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587091982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1012361,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/72/89/1a83120a.jpg","nickname":"yihang","note":"","ucode":"A5506F085D1793","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236536,"discussion_content":"https://wz2cool.gitbooks.io/mybatis-dynamic-query-zh-cn/content/column.html\n\ndynamic query 应该是这个","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587100975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":236415,"ip_address":""},"score":236536,"extra":""}]}]},{"had_liked":false,"id":202186,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1585918469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"100370166277","product_id":100047701,"comment_content":"今天最大的惊喜就是arthas，以前听说过，但是从来没使用过，真心神器，感谢，感谢！！！","like_count":24},{"had_liked":false,"id":207067,"user_name":"Asha","can_delete":false,"product_type":"c1","uid":1796527,"ip_address":"","ucode":"69F227707A9EDD","user_header":"https://static001.geekbang.org/account/avatar/00/1b/69/af/ceb4450c.jpg","comment_is_top":false,"comment_ctime":1587002310,"is_pvip":false,"replies":[{"id":"77376","content":"文中有说『由于 DTO 中已经巧妙使用了 Optional 来区分客户端不传值和传 null 值，那么业务逻辑实现上就可以按照客户端的意图来分别实现逻辑。如果不传值，那么 Optional 本身为 null，直接跳过 Entity 字段的更新即可，这样动态生成的 SQL 就不会包含这个列；如果传了值，那么进一步判断传的是不是 null』<br><br>你可以试一下，JSON不传这个属性，Optional直接是null，如果传了属性值为null，那么Optional其实就是Optional.empty（内部value为null）可以走到orElse逻辑<br><br>ObjectMapper objectMapper = new ObjectMapper();<br>        objectMapper.registerModule(new Jdk8Module());<br>        UserDto result = objectMapper.readValue(&quot;{\\&quot;id\\&quot;:\\&quot;1\\&quot;, \\&quot;age\\&quot;:30, \\&quot;name\\&quot;:null}&quot;,UserDto.class);<br>        log.info(&quot;field name with null value dto:{} name:{}&quot;, result, result.getName().orElse(&quot;N&#47;A&quot;));<br>        &#47;&#47;field name with null value dto:UserDto(id=1, name=Optional.empty, age=Optional[30]) name:N&#47;A<br>        log.info(&quot;missing field name dto:{}&quot;,objectMapper.readValue(&quot;{\\&quot;id\\&quot;:\\&quot;1\\&quot;, \\&quot;age\\&quot;:30}&quot;,UserDto.class));<br>        &#47;&#47; missing field name dto:UserDto(id=1, name=null, age=Optional[30])","user_name":"作者回复","comment_id":207067,"uid":"1001470","ip_address":"","utype":1,"ctime":1587012207,"user_name_real":"朱晔"}],"discussion_count":2,"race_medal":0,"score":"53126609862","product_id":100047701,"comment_content":"老师，麻烦问下<br>UserDto 中只保留 id、name 和 age 三个属性，且 name 和 age 使用 Optional 来包装，以区分客户端不传数据还是故意传 null， 这个我不太明白是怎么区分出来的呢？<br>还有下面的这句话，他能走到orElse上吗？<br>if (user.getName() != null) { userEntity.setName(user.getName().orElse(&quot;&quot;)); }","like_count":12,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491999,"discussion_content":"文中有说『由于 DTO 中已经巧妙使用了 Optional 来区分客户端不传值和传 null 值，那么业务逻辑实现上就可以按照客户端的意图来分别实现逻辑。如果不传值，那么 Optional 本身为 null，直接跳过 Entity 字段的更新即可，这样动态生成的 SQL 就不会包含这个列；如果传了值，那么进一步判断传的是不是 null』\n\n你可以试一下，JSON不传这个属性，Optional直接是null，如果传了属性值为null，那么Optional其实就是Optional.empty（内部value为null）可以走到orElse逻辑\n\nObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.registerModule(new Jdk8Module());\n        UserDto result = objectMapper.readValue(&amp;quot;{\\&amp;quot;id\\&amp;quot;:\\&amp;quot;1\\&amp;quot;, \\&amp;quot;age\\&amp;quot;:30, \\&amp;quot;name\\&amp;quot;:null}&amp;quot;,UserDto.class);\n        log.info(&amp;quot;field name with null value dto:{} name:{}&amp;quot;, result, result.getName().orElse(&amp;quot;N/A&amp;quot;));\n        //field name with null value dto:UserDto(id=1, name=Optional.empty, age=Optional[30]) name:N/A\n        log.info(&amp;quot;missing field name dto:{}&amp;quot;,objectMapper.readValue(&amp;quot;{\\&amp;quot;id\\&amp;quot;:\\&amp;quot;1\\&amp;quot;, \\&amp;quot;age\\&amp;quot;:30}&amp;quot;,UserDto.class));\n        // missing field name dto:UserDto(id=1, name=null, age=Optional[30])","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587012207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291703,"discussion_content":"{ &#34;id&#34;:1, &#34;name&#34;:null}  name 直接传递null,为Optional.empty; 而age没有传递则为null\n可以debug一下!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594911696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201475,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1585793011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48830433267","product_id":100047701,"comment_content":"第二个问题，mybatis 可以使用 if 标签来判断属性是否为 null 从而动态生成不含该属性的 sql。","like_count":11},{"had_liked":false,"id":201452,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1585790088,"is_pvip":false,"replies":[{"id":"75356","content":"Key也是一样的道理，此外，我也更同意他的观点，就是普通的Map允许null是否是一个正确的做法也是值得商榷的，会增加犯错的可能<br><br>一个更好的类库和框架并不是把最佳实践写在文档中，而是直接编码在实现中","user_name":"作者回复","comment_id":201452,"uid":"1001470","ip_address":"","utype":1,"ctime":1585791370,"user_name_real":"朱晔"}],"discussion_count":2,"race_medal":0,"score":"48830430344","product_id":100047701,"comment_content":"ConcurrentHashMap 的 Key 和 Value 都不能为 null，而 HashMap 却可以。<br><br>ConcurrentHashMap这个老爷子只说了value如果是空，会有二义性。就是在线程安全情况下，他到底是设置了一个null还是根本就没这玩意，key他老人家没说。。。老师可以说下理解吗？<br><br>TreeMap的Key不能为空，因为TreeMap是基于compare的，空值不能compare。value可以为空，TreeMap并不线程安全。Hashtable 的 Key 和 Value也不能空，我想原理应该和ConcurrentHashMap一样。","like_count":11,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490339,"discussion_content":"Key也是一样的道理，此外，我也更同意他的观点，就是普通的Map允许null是否是一个正确的做法也是值得商榷的，会增加犯错的可能\n\n一个更好的类库和框架并不是把最佳实践写在文档中，而是直接编码在实现中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585791370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132448,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/a0/f12115b7.jpg","nickname":"Sam.张朝","note":"","ucode":"FB20554D94B250","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283983,"discussion_content":"很多框架，去缺少最佳实践的文档，比如quartz","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592409284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201711,"user_name":"Jerry Wu","can_delete":false,"product_type":"c1","uid":1203567,"ip_address":"","ucode":"AD29B6942AAAA6","user_header":"https://static001.geekbang.org/account/avatar/00/12/5d/6f/42494dcf.jpg","comment_is_top":false,"comment_ctime":1585823081,"is_pvip":false,"replies":[{"id":"75412","content":"也对","user_name":"作者回复","comment_id":201711,"uid":"1001470","ip_address":"","utype":1,"ctime":1585834859,"user_name_real":"朱晔"}],"discussion_count":16,"race_medal":0,"score":"35945561449","product_id":100047701,"comment_content":"这是我个人的一些工作经历。<br><br>以前尝试过Optional，但其他人反馈看不懂，最后还是换回了if-else。<br><br>得出结论，技术要考虑团队的接受程度。<br><br>新技术、新特性虽好，但团队每个人的能力不同，而决定技术走向的，是团队最弱的那个人。","like_count":8,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490401,"discussion_content":"也对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585834859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1965236,"avatar":"","nickname":"Geek_c703f7","note":"","ucode":"0D49860F83534E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249636,"discussion_content":"而决定技术走向的，是团队最弱的那个人。\n——有没有搞错？这明明是你无底线妥协的结果！按你的观点，大家都不应该努力提高技术能力，反正要以最差的为基准，我最差我最笨所以整个团队就应该将就我！这不是劣币驱逐良币是什么？！","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1587949959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1203567,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/6f/42494dcf.jpg","nickname":"Jerry Wu","note":"","ucode":"AD29B6942AAAA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1965236,"avatar":"","nickname":"Geek_c703f7","note":"","ucode":"0D49860F83534E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249863,"discussion_content":"那个是老板，有些公司不适合留太久，离开是个不错的选择","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587968448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249636,"ip_address":""},"score":249863,"extra":""},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1203567,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/6f/42494dcf.jpg","nickname":"Jerry Wu","note":"","ucode":"AD29B6942AAAA6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291704,"discussion_content":"公司很多老员工...java8新特性都看不懂...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594911895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249863,"ip_address":""},"score":291704,"extra":""}]},{"author":{"id":1162714,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","nickname":"看不到de颜色","note":"","ucode":"88348CCAE81931","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228914,"discussion_content":"是时候换波队友了。用了java8的特性后真的回不去了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586589041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1274787,"avatar":"https://static001.geekbang.org/account/avatar/00/13/73/a3/2b077607.jpg","nickname":"Michael","note":"","ucode":"C233DF1D224EC1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":226499,"discussion_content":"太有感触了，我用个Java8的流都因为上述理由被喷了一顿","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586435223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","nickname":"QQ怪","note":"","ucode":"1A39B8433D9208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":225674,"discussion_content":"感同身受啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586391721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206187,"avatar":"https://static001.geekbang.org/account/avatar/00/12/67/ab/fcf0cec4.jpg","nickname":"寒光","note":"","ucode":"061BE413595F21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360439,"discussion_content":"这样的团队，赶紧离开。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616453954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307837,"discussion_content":"不能学吗？有那么难吗？难道不是大家一起进步，变成大家一起退步、、、","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600768956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1203567,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/6f/42494dcf.jpg","nickname":"Jerry Wu","note":"","ucode":"AD29B6942AAAA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307873,"discussion_content":"不能。\n\n环境很重要。刷知乎贴吧的快乐，比学习进步来得快。\n\n我连续两家公司都是这样。你技术好、学习能力强，给的工作最多，其他人反而甩起手来，整天刷贴吧知乎。\n\n最后，要不你也死气沉沉，要不直接离开。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600777268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":307837,"ip_address":""},"score":307873,"extra":""},{"author":{"id":2987951,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/yTn9elsxHxy5jMtOXFMT9gpxcWkS5Ym1DEI7g9XLrHzCt9son9KSnGynFJxUMQ530e3Ibb6baUiadSibF7Uib0ntQ/132","nickname":"Geek_704c8f","note":"","ucode":"91C52A1760C7DF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1203567,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/6f/42494dcf.jpg","nickname":"Jerry Wu","note":"","ucode":"AD29B6942AAAA6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590672,"discussion_content":"去家大公司吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665994302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":307873,"ip_address":"广东"},"score":590672,"extra":""}]},{"author":{"id":1018182,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/46/0b7828a1.jpg","nickname":"小胡子","note":"","ucode":"79FEC6400D25DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302307,"discussion_content":"Java8的特性感觉都喜欢用，但是Optional总感觉用的怪怪的，是我打开方式不正确吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598876284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1877862,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLu3MgZBAyyiavX2CMF2KRib791j3bBGiaQDzuQwBF2k6AKHANV2uTAAss2vVaeC7xcSYYD8vjmibRpTQ/132","nickname":"纵不朽","note":"","ucode":"DB2CA2C46B2EF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1018182,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/46/0b7828a1.jpg","nickname":"小胡子","note":"","ucode":"79FEC6400D25DA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402149,"discussion_content":"还是不熟，以前我也跟你一样的感觉，甚至感觉这玩意就是鸡肋，看了几章下来，觉得get到了用处了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633795460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302307,"ip_address":""},"score":402149,"extra":""}]},{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232089,"discussion_content":"反馈看不懂。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586852154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1227789,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/0d/e65ca230.jpg","nickname":"👻","note":"","ucode":"1648C82AC73C1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228862,"discussion_content":"这队友也太菜了😅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586584691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1203567,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/6f/42494dcf.jpg","nickname":"Jerry Wu","note":"","ucode":"AD29B6942AAAA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1227789,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/0d/e65ca230.jpg","nickname":"👻","note":"","ucode":"1648C82AC73C1D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229078,"discussion_content":"没办法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586607752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":228862,"ip_address":""},"score":229078,"extra":""}]}]},{"had_liked":false,"id":203835,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1586271548,"is_pvip":false,"discussion_count":4,"race_medal":1,"score":"31651042620","product_id":100047701,"comment_content":"谢谢老师。小伙伴们，我们这边UserDto都要求写成UserDTO，你们是哪种呢","like_count":7,"discussions":[{"author":{"id":1965236,"avatar":"","nickname":"Geek_c703f7","note":"","ucode":"0D49860F83534E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249638,"discussion_content":"UserDTO是标准的，国际通用","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587950026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1877862,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLu3MgZBAyyiavX2CMF2KRib791j3bBGiaQDzuQwBF2k6AKHANV2uTAAss2vVaeC7xcSYYD8vjmibRpTQ/132","nickname":"纵不朽","note":"","ucode":"DB2CA2C46B2EF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402150,"discussion_content":"规范好，Dto看的太难受了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633795502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1451715,"avatar":"https://static001.geekbang.org/account/avatar/00/16/26/c3/bf93615e.jpg","nickname":"消逝的小确幸","note":"","ucode":"AB38614BC45799","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331514,"discussion_content":"DTO，VO，DO 等这些实体类名的后缀大写，阿里巴巴Java开发手册也是这么规定的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606892047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1451715,"avatar":"https://static001.geekbang.org/account/avatar/00/16/26/c3/bf93615e.jpg","nickname":"消逝的小确幸","note":"","ucode":"AB38614BC45799","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331535,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606895111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331514,"ip_address":""},"score":331535,"extra":""}]}]},{"had_liked":false,"id":201649,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1585816553,"is_pvip":false,"replies":[{"id":"75394","content":"其实主要是序列化和反序列化的麻烦（兼容问题），现在使用spring boot + jackson已经没问题了，自动引入了Jdk8Module，如果你使用其他序列化框架的话可能要考虑一下这种方式是否适合！其实很多时候最佳实践呢也是需要随着变迁不断调整的。","user_name":"作者回复","comment_id":201649,"uid":"1001470","ip_address":"","utype":1,"ctime":1585819282,"user_name_real":"朱晔"}],"discussion_count":5,"race_medal":0,"score":"27355620329","product_id":100047701,"comment_content":"有个规范我记得是说，不要在字段，方法参数，集合中使用Optional","like_count":6,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490390,"discussion_content":"其实主要是序列化和反序列化的麻烦（兼容问题），现在使用spring boot + jackson已经没问题了，自动引入了Jdk8Module，如果你使用其他序列化框架的话可能要考虑一下这种方式是否适合！其实很多时候最佳实践呢也是需要随着变迁不断调整的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585819282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219889,"discussion_content":"https://stackoverflow.com/questions/31922866/why-should-java-8s-optional-not-be-used-in-arguments/31924845#31924845 这一块各方也在争论，针对方法传参我觉得暂时还是不要使用Optional比较好，返回值可以","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585821506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1148422,"avatar":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","nickname":"美美","note":"","ucode":"44CC95C45AF345","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":219901,"discussion_content":"嗯嗯，这点我们能达成共识，我是觉得dto中的字段不要声明为Optional，这样相当于把一个不明确的字段传来传去，就像我们希望在初始化对象时给list赋值空list，map赋值空map，string空串一样，尽量减少null值的传递，如果把字段用Optional传递了，感觉就背道而驰了。仅仅是个人想法，欢迎交流～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585822428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":219889,"ip_address":""},"score":219901,"extra":""},{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1148422,"avatar":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","nickname":"美美","note":"","ucode":"44CC95C45AF345","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219903,"discussion_content":"本例中的DTO其实只是用来反序列化，我觉得这个点去应用Optional的特性不错，不一定是最佳实践，这个可以讨论。至于和外部交互的接口DTO，不建议使用Optional。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585822704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":219901,"ip_address":""},"score":219903,"extra":""}]},{"author":{"id":1148422,"avatar":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","nickname":"美美","note":"","ucode":"44CC95C45AF345","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219878,"discussion_content":"除了序列化外，还有最重要的一点，不应该 让一个不确定值的字段一直传递，缺少明确的语义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585820249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247665,"user_name":"jacy","can_delete":false,"product_type":"c1","uid":1103456,"ip_address":"","ucode":"0022A8759DDCE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/60/f21b2164.jpg","comment_is_top":false,"comment_ctime":1599789160,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"18779658344","product_id":100047701,"comment_content":"1、以前遇到过好几次null异常，都是通过打日志搞定的，十分低效，arthas是个好工具，收藏了。<br>2、Optional很少用，确实是个好东东。<br>3、map我觉得都不应该支持Null，非线程安全map get返回Null时，到底是没有key，还是value为Null有二义性（但可以通过探测破解二义，这可能是支持了Null的原因），线程安全map 探测结果本身就不可靠（可能被并发修改），所以作者选则不支持，列如：<br>B put key null   B往线程安全map中插入值为null的数据<br>A contain key   A探测key存在<br>B remove key   B移除key<br>A get key         A获取key得到null，A认为key的值为null，实际返回的null并非key的值","like_count":4},{"had_liked":false,"id":211484,"user_name":"书林","can_delete":false,"product_type":"c1","uid":1064791,"ip_address":"","ucode":"28D3224E8CBB6B","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/57/a014199a.jpg","comment_is_top":false,"comment_ctime":1587971785,"is_pvip":false,"replies":[{"id":"78592","content":"你说的没错，我改一下这句话<br><br>The NULL value can be surprising until you get used to it. Conceptually, NULL means “a missing unknown value” and it is treated somewhat differently from other values. You cannot use arithmetic comparison operators such as =, &lt;, or &lt;&gt; to test for NULL. Because the result of any arithmetic comparison with NULL is also NULL, you cannot obtain any meaningful results from such comparisons.","user_name":"作者回复","comment_id":211484,"uid":"1001470","ip_address":"","utype":1,"ctime":1587978428,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"14472873673","product_id":100047701,"comment_content":"关于SQL 判断空有一点想提出来讨论，=NULL 不是赋值确实是判断，只是NULL和任何值的直接比较都为NULL，比如NULL&lt;&gt;NULL, NULL=NULL, NULL=1结果都为NULL。对 NULL 进行判断只能使用 IS NULL 或者 IS NOT NULL，或者ISNULL()。","like_count":3,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493277,"discussion_content":"你说的没错，我改一下这句话\n\nThe NULL value can be surprising until you get used to it. Conceptually, NULL means “a missing unknown value” and it is treated somewhat differently from other values. You cannot use arithmetic comparison operators such as =, &amp;lt;, or &amp;lt;&amp;gt; to test for NULL. Because the result of any arithmetic comparison with NULL is also NULL, you cannot obtain any meaningful results from such comparisons.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587978428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207469,"user_name":"yihang","can_delete":false,"product_type":"c1","uid":1012361,"ip_address":"","ucode":"A5506F085D1793","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/89/1a83120a.jpg","comment_is_top":false,"comment_ctime":1587089954,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14471991842","product_id":100047701,"comment_content":"解决方案里，我觉得既然先查了一次实体，就没必要使用 @DynamicUpdate 部分更新字段了呀？这时全字段更新也没有问题的","like_count":3},{"had_liked":false,"id":204891,"user_name":"大大大熊myeh","can_delete":false,"product_type":"c1","uid":1139413,"ip_address":"","ucode":"4832C2E7CEB151","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/d5/1f5c5ab6.jpg","comment_is_top":false,"comment_ctime":1586487730,"is_pvip":false,"replies":[{"id":"76579","content":"明确 DTO 中 null 的含义，我们改一下","user_name":"作者回复","comment_id":204891,"uid":"1001470","ip_address":"","utype":1,"ctime":1586494308,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"14471389618","product_id":100047701,"comment_content":"原文：“归根结底，这是如下 5 个方面的问题：明确 DTO 种 null 的含义”或许是“明确 DTO各种 null 的含义”吧.<br><br>MySQL中<br>count(1)选取每一行并赋值为1，进行统计<br>count(*)选取每一行进行统计<br>count(字段)选取每一行中的该字段，选择不为null的行进行统计<br><br>我认为Optional可以代替原来的if-else赋值，使代码看上去稍许简洁。但需要注意如Optional.ofNullable(number).orElse(0)，当number为null时，返回的0不会赋值给number，它返回的是一个新地址（对象）。<br><br>思考题1，楼上Darren老兄说的很对。更加白话的说明“非并行映射中几乎无法容忍的歧义”就是——如果map.get(key)返回了null，无法明确是因为map中没有找到该key返回的null，还是因为该key包含的value就是null。<br><br>思考题2，xml配置文件中的if标签&lt;if test=&quot;id!=null and id !=&#39;&#39;&quot;&gt;&lt;&#47;if&gt;需要注意if标签中的字段id如果是Date类型的话，不要写id!=&#39;&#39;，这是由于Data类型与字符串类型进行比较的报错，此时只需写null的判断即可。<br><br>以前不知道@Column注解的updateIfNull属性，学到了。<br>","like_count":3,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491319,"discussion_content":"明确 DTO 中 null 的含义，我们改一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586494308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201462,"user_name":"刘楠","can_delete":false,"product_type":"c1","uid":1120773,"ip_address":"","ucode":"9F19D44CBEE039","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/05/f154d134.jpg","comment_is_top":false,"comment_ctime":1585790930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14470692818","product_id":100047701,"comment_content":"ConcurrentHashMap<br> final V putVal(K key, V value, boolean onlyIfAbsent) {<br>        if (key == null || value == null) throw new NullPointerException();<br>因为直接对key进行了hashCode,要进行比较<br><br>put方法对key和value做了判断的，<br><br>HashMap<br>key，只能有一个key为null,value没限制，<br><br><br>TreeMap <br><br>key也是不能为能为null的,put方法中要调用comparator方法去比较key<br>value可以为null<br><br>Hashtable<br>key,value都不能为null<br>因为直接对key进行了hashCode,同时对value做了判断为null直接抛出异常了","like_count":3},{"had_liked":false,"id":201413,"user_name":"终结者999号","can_delete":false,"product_type":"c1","uid":1055854,"ip_address":"","ucode":"33ADE61580B6DD","user_header":"https://static001.geekbang.org/account/avatar/00/10/1c/6e/6c5f5734.jpg","comment_is_top":false,"comment_ctime":1585785178,"is_pvip":true,"replies":[{"id":"75351","content":"是","user_name":"作者回复","comment_id":201413,"uid":"1001470","ip_address":"","utype":1,"ctime":1585788657,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"14470687066","product_id":100047701,"comment_content":"在平常的开发中，对于DTO的值验证性校验也可以使用Hibernate Validator，也可以杜绝用户不按接口文档中所定义的格式输入，感觉也可以使用","like_count":3,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490326,"discussion_content":"是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585788657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258708,"user_name":"Geek_Gary","can_delete":false,"product_type":"c1","uid":2059767,"ip_address":"","ucode":"3A477DD245D8DE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/VGh9ULc7y9ZzVp5aHQLb4J9qmQOAE4ibYHfeia1F8s08PwvhH9kKZ1wr91gTfTEnj0LtybegsFibPcceyTIkHJTcw/132","comment_is_top":false,"comment_ctime":1604541374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5899508670","product_id":100047701,"comment_content":"Optional还有这种用法，谨受教������","like_count":1},{"had_liked":false,"id":243958,"user_name":"Geek_fe5e8a","can_delete":false,"product_type":"c1","uid":2103563,"ip_address":"","ucode":"B4CC300397BD6A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/dgox0m94vr6w2Vxk0N6651pyL5wKWicqgwIxU9iahlIn5LKeFfQJDjzUoQKM8WNibS7Yuxyulmic1Xxfia5ibFc6ia0Hw/132","comment_is_top":false,"comment_ctime":1598340575,"is_pvip":false,"replies":[{"id":"89851","content":"感谢","user_name":"作者回复","comment_id":243958,"uid":"1001470","ip_address":"","utype":1,"ctime":1598352537,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"5893307871","product_id":100047701,"comment_content":"老师讲的真的好  满分","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504440,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598352537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241157,"user_name":"李和桃","can_delete":false,"product_type":"c1","uid":1015877,"ip_address":"","ucode":"97E66953070EE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/45/d719f7df.jpg","comment_is_top":false,"comment_ctime":1597204535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892171831","product_id":100047701,"comment_content":"1、ConcurrentHashMap不能为null的原因主要是因为考虑到多线程并发的情况。在多线程并发处理下，如果key = null or value = null，很难判断是设置key=null还是key根本不存在。HashMap本身建议是在单线程任务执行时使用，所以可以设置为null。<br>TreeMap的key是不可以为null的，value可以是null。为了保证有序，treemap中的key还需要实现comparator的compare方法。<br>HashTable的key和value都不可以为null，这个原因个人猜测，继承了字典类，字典里面有null不合适。HashMap对null的处理是专门给了一个0的槽，而且这个槽只会有一个entry.<br>2、采用if-test标签的方式，对字段进行是否为null的判断。","like_count":1},{"had_liked":false,"id":241056,"user_name":"2019","can_delete":false,"product_type":"c1","uid":1025580,"ip_address":"","ucode":"6514258263FC00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/2c/b73b9dfe.jpg","comment_is_top":false,"comment_ctime":1597161421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892128717","product_id":100047701,"comment_content":"打个卡卡。那个说写Java8新特效被喷的，你同事那是属于不想进步。让他待在舒适区好了。","like_count":1},{"had_liked":false,"id":208937,"user_name":"Seven.Lin澤耿","can_delete":false,"product_type":"c1","uid":1181192,"ip_address":"","ucode":"4CAB732CD6F149","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/08/855abb02.jpg","comment_is_top":false,"comment_ctime":1587467413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882434709","product_id":100047701,"comment_content":"学习了，optional还可以这么用，SpringMVC数据绑定也会支持吗？","like_count":1},{"had_liked":false,"id":208757,"user_name":"yanghao","can_delete":false,"product_type":"c1","uid":1031387,"ip_address":"","ucode":"624261F3198739","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/db/ddfe411f.jpg","comment_is_top":false,"comment_ctime":1587433007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882400303","product_id":100047701,"comment_content":"原来一直在坑里，最近项目里就是各种判空","like_count":1},{"had_liked":false,"id":207484,"user_name":"彭发红","can_delete":false,"product_type":"c1","uid":1461374,"ip_address":"","ucode":"9BAC208700791E","user_header":"https://static001.geekbang.org/account/avatar/00/16/4c/7e/4771d8a4.jpg","comment_is_top":false,"comment_ctime":1587091651,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5882058947","product_id":100047701,"comment_content":"个人习惯对于数据的验证都会在控制层通过@Validated来实现第一道业务数据验证，然后再通过Optional","like_count":1},{"had_liked":false,"id":205146,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1586543547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881510843","product_id":100047701,"comment_content":"及时发现及时处理日志空指针异常","like_count":1},{"had_liked":false,"id":202098,"user_name":"汝林外史","can_delete":false,"product_type":"c1","uid":1188906,"ip_address":"","ucode":"3C66C0F0537A99","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/2a/33441e2b.jpg","comment_is_top":false,"comment_ctime":1585902916,"is_pvip":false,"replies":[{"id":"75534","content":"Hashtable虽然这种写法不怎么好看，但结果都是一个NullPointerException，作者可能觉得        int hash = key.hashCode();<br>会抛空指针就没必要提前判断了吧","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1585907540,"ip_address":"","comment_id":202098,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880870212","product_id":100047701,"comment_content":"问题大家都答的很好，我就直接问问题吧。<br>老师，Hashtable的put会对value做null判断，key是在调用hashcode方法时报空指针，而ConcurrentHashMap是直接对key和value做null判断，是不是Hashtable的设计有问题？","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490503,"discussion_content":"Hashtable虽然这种写法不怎么好看，但结果都是一个NullPointerException，作者可能觉得        int hash = key.hashCode();\n会抛空指针就没必要提前判断了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585907540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350612,"user_name":"Geek_d3928c","can_delete":false,"product_type":"c1","uid":2450893,"ip_address":"","ucode":"7CB09FD1F7CB23","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/L8EpqHoAnmvkzCIsdOkv5QvhIzu5tMaF2FDusXShqukv5ZBkS8DbicWaErjnYydibiaqBrs70wQ8P6axvC2FbWpbQ/132","comment_is_top":false,"comment_ctime":1657037818,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657037818","product_id":100047701,"comment_content":"线上机器也不允许使用arthas呀","like_count":0},{"had_liked":false,"id":342532,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1650328537,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1650328537","product_id":100047701,"comment_content":"高版本的jdk对于npe的支持与提示已经很友好了，其实主要还是对于代码书写健壮性与合理性的考虑。大部分开发人员其实还是没有意识到对于null的处理，只是遇到了npe然后在进行补充。","like_count":0},{"had_liked":false,"id":301697,"user_name":"木几丶","can_delete":false,"product_type":"c1","uid":2420294,"ip_address":"","ucode":"FFDB958DA64F8C","user_header":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","comment_is_top":false,"comment_ctime":1625816049,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1625816049","product_id":100047701,"comment_content":"ConcurrentHashMap，Hashtable等线程安全的集合key value不能为null，因为会有二义性：get时返回null到底是没有还是就是null？为什么hashmap可以呢，因为对于单线程的集合可以用containsKey辅助判断，而多线程下用containsKey判断会有线程安全问题（get和containsKey之间插入了put）","like_count":0}]}