{"id":646987,"title":"14｜链式调用，用LangChain简化多步提示语","content":"<p>你好，我是徐文浩。</p><p>OpenAI的大语言模型，只是提供了简简单单的Completion和Embedding这样两个核心接口。但是你也看到了，在过去的13讲里，通过合理使用这两个接口，我们完成了各种各样复杂的任务。</p><ul>\n<li>通过提示语（Prompt）里包含历史的聊天记录，我们能够让AI根据上下文正确地回答问题。</li>\n<li>通过将Embedding提前索引好存起来，我们能够让AI根据外部知识回答问题。</li>\n<li>而通过多轮对话，将AI返回的答案放在新的问题里，我们能够让AI帮我们给自己的代码撰写单元测试。</li>\n</ul><p>这些方法，也是一个实用的自然语言类应用里常见的模式。我之前也都通过代码为你演示过具体的做法。但是，如果我们每次写应用的时候，都需要自己再去OpenAI提供的原始API里做一遍，那就太麻烦了。于是，开源社区就有人将这些常见的需求和模式抽象了出来，开发了一个叫做Langchain的开源库。那么接下来，我们就来看看如何使用LangChain来快速实现之前我们利用大语言模型实现过的功能。以及我们如何进一步地，将Langchain和我们的业务系统整合，完成更复杂、更有实用价值的功能。</p><h2>使用Langchain的链式调用</h2><p>如果你观察得比较仔细的话，你会发现在<a href=\"https://time.geekbang.org/column/article/646363\">第 11 讲</a>我们使用llama-index的时候，就已经装好LangChain了。llama-index专注于为大语言模型的应用构建索引，虽然Langchain也有类似的功能，但这一点并不是Langchain的主要卖点。Langchain的第一个卖点其实就在它的名字里，也就是<strong>链式调用</strong>。</p><!-- [[[read_end]]] --><p>我们先来看一个使用ChatGPT的例子，你就能理解为什么会有链式调用的需求了。我们知道，GPT-3的基础模型里面，中文的语料很少。用中文问它问题，很多时候它回答得不好。所以有时候，我会迂回处理一下，先把中文问题给AI，请它翻译成英文，然后再把英文问题贴进去提问，得到一个英文答案。最后，再请AI把英文答案翻译回中文。很多时候，问题的答案会更准确一点。比如，下面的截图里，我就请它简单介绍一下Stable Diffusion的原理是什么。</p><p><span class=\"reference\">注：Stable Diffusion是一个热门的开源AI画图工具，后面我们在介绍用AI生成图片的时候会用到。</span></p><h3>人工链式调用</h3><p><img src=\"https://static001.geekbang.org/resource/image/b9/ba/b904189cc5e23c5015aae7f6736f5dba.png?wh=697x796\" alt=\"图片\" title=\"先让AI把中文问题翻译成英文，再直接把英文问题贴进去得到英文答案\"></p><p><img src=\"https://static001.geekbang.org/resource/image/27/44/272869ac3fb95c57674843264eb62c44.png?wh=714x770\" alt=\"图片\" title=\"我们再请它翻译一下英文答案\"></p><p>如果用API来实现这个过程，其实就是一个链式调用的过程。</p><ol>\n<li>我们先调用OpenAI，把翻译请求和原始问题组合在一起发送给AI，完成问题的中译英。</li>\n<li>然后再把拿到的翻译好的英文问题发送给OpenAI，得到英文答案。</li>\n<li>最后再把英文答案，和对应要求AI翻译答案的请求组合在一起，完成答案的英译中。</li>\n</ol><h3>使用LLMChain进行链式调用</h3><p>如果我们用代码，可以像下面这样，一步步进行。</p><pre><code class=\"language-python\">import openai, os\nfrom langchain.prompts import PromptTemplate\nfrom langchain.llms import OpenAI\nfrom langchain.chains import LLMChain\n\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\n\nllm = OpenAI(model_name=\"text-davinci-003\", max_tokens=2048, temperature=0.5)\n\nen_to_zh_prompt = PromptTemplate(\n    template=\"请把下面这句话翻译成英文： \\n\\n {question}?\", input_variables=[\"question\"]\n)\n\nquestion_prompt = PromptTemplate(\n    template = \"{english_question}\", input_variables=[\"english_question\"]\n)\n\nzh_to_cn_prompt = PromptTemplate(\n    input_variables=[\"english_answer\"],\n    template=\"请把下面这一段翻译成中文： \\n\\n{english_answer}?\",\n)\n\nquestion_translate_chain = LLMChain(llm=llm, prompt=en_to_zh_prompt, output_key=\"english_question\")\nenglish = question_translate_chain.run(question=\"请你作为一个机器学习的专家，介绍一下CNN的原理。\")\nprint(english)\n\nqa_chain = LLMChain(llm=llm, prompt=question_prompt, output_key=\"english_answer\")\nenglish_answer = qa_chain.run(english_question=english)\nprint(english_answer)\n\nanswer_translate_chain = LLMChain(llm=llm, prompt=zh_to_cn_prompt)\nanswer = answer_translate_chain.run(english_answer=english_answer)\nprint(answer)\n</code></pre><p>输出结果：</p><pre><code class=\"language-plain\">Please explain the principles of CNN as an expert in Machine Learning.\n\nA Convolutional Neural Network (CNN) is a type of deep learning algorithm that is used to analyze visual imagery. It is modeled after the structure of the human visual cortex and is composed of multiple layers of neurons that process and extract features from an image. The main principle behind a CNN is that it uses convolutional layers to detect patterns in an image. Each convolutional layer is comprised of a set of filters that detect specific features in an image. These filters are then used to extract features from the image and create a feature map. The feature map is then passed through a pooling layer which reduces the size of the feature map and helps to identify the most important features in the image. Finally, the feature map is passed through a fully-connected layer which classifies the image and outputs the result.\n\n卷积神经网络（CNN）是一种深度学习算法，用于分析视觉图像。它模仿人类视觉皮层的结构，由多层神经元组成，可以处理和提取图像中的特征。CNN的主要原理是使用卷积层来检测图像中的模式。每个卷积层由一组滤波器组成，可以检测图像中的特定特征。然后使用这些滤波器从图像中提取特征，并创建特征图。然后，将特征图通过池化层传递，该层可以减小特征图的大小，并有助于识别图像中最重要的特征。最后，将特征图传递给完全连接的层，该层将对图像进行分类，并输出结果。\n</code></pre><p>这里的代码，我们使用了Langchain这个库，不过还没有动用它的链式调用过程。我们主要用了Langchain的三个包。</p><ol>\n<li>LLM，也就是我们使用哪个大语言模型，来回答我们提出的问题。在这里，我们还是使用OpenAIChat，也就是最新放出来的 gpt-3.5-turbo 模型。</li>\n<li>PromptTemplate，和我们在<a href=\"https://time.geekbang.org/column/article/646363\">第 11 讲</a>里看到的llama-index的PromptTemplate是一个东西。它可以定义一个提示语模版，里面能够定义一些可以动态替换的变量。比如，代码里的question_prompt这个模版里，我们就定义了一个叫做question的变量，因为我们每次问的问题都会不一样。事实上，llamd-index里面的PromptTemplate就是对Langchain的PromptTemplate做了一层简单的封装。</li>\n<li>主角 LLMChain，它的构造函数接收一个LLM和一个PromptTemplate作为参数。构造完成之后，可以直接调用里面的run方法，将PromptTemplate需要的变量，用K=&gt;V对的形式传入进去。返回的结果，就是LLM给我们的答案。</li>\n</ol><p>不过如果看上面这段代码，我们似乎只是对OpenAI的API做了一层封装而已。我们构建了3个LLMChain，然后按照顺序调用，每次拿到答案之后，再作为输入，交给下一个LLM调用。感觉好像更麻烦了，没有减少什么工作量呀？</p><p>别着急，这是因为我们还没有真正用上LLMChain的“链式调用”功能，而用这个功能，只需要加上一行小小的代码。我们用一个叫做SimpleSequentialChain的LLMChain类，把我们要按照顺序依次调用的三个LLMChain放在一个数组里，传给这个类的构造函数。</p><p>然后对于这个对象，我们调用run方法，把我们用中文问的问题交给它。这个时候，这个SimpleSequentialChain，就会按照顺序开始调用chains这个数组参数里面包含的其他LLMChain。并且，每一次调用的结果，会存储在这个Chain构造时定义的output_key参数里。而下一个调用的LLMChain，里面模版内的变量如果有和之前的output_key名字相同的，就会用output_key里存入的内容替换掉模版内变量所在的占位符。</p><p>这次，我们只向这个SimpleSequentialChain调用一次run方法，把一开始的问题交给它就好了。后面根据答案去问新的问题，这个LLMChain会自动地链式搞定。我在这里把日志的Verbose模式打开了，你在输出的过程中，可以看到其实这个LLMChain是调用了三次，并且中间两次的返回结果你也可以一并看到。</p><pre><code class=\"language-python\">from langchain.chains import SimpleSequentialChain\n\nchinese_qa_chain = SimpleSequentialChain(\n    chains=[question_translate_chain, qa_chain, answer_translate_chain], input_key=\"question\",\n    verbose=True)\nanswer = chinese_qa_chain.run(question=\"请你作为一个机器学习的专家，介绍一下CNN的原理。\")\nprint(answer)\n</code></pre><p>Verbose日志信息：</p><pre><code class=\"language-plain\">&gt; Entering new SimpleSequentialChain chain...\n\nPlease introduce the principle of CNN as a machine learning expert.\n\nConvolutional Neural Networks (CNNs) are a type of artificial neural network that are commonly used in image recognition and classification tasks. They are inspired by the structure of the human brain and are composed of multiple layers of neurons connected in a specific pattern. The neurons in the first layer of a CNN are connected to the input image, and the neurons in the last layer are connected to the output. The neurons in between the input and output layers are called feature maps and are responsible for extracting features from the input image. CNNs use convolutional layers to detect patterns in the input image and pooling layers to reduce the size of the feature maps. This allows the CNN to learn the most important features in the image and use them to make predictions.\n\n卷积神经网络（CNN）是一种常用于图像识别和分类任务的人工神经网络。它们受到人脑结构的启发，由多层神经元以特定模式连接而成。CNN的第一层神经元与输入图像连接，最后一层神经元与输出连接。输入和输出层之间的神经元称为特征映射，负责从输入图像中提取特征。CNN使用卷积层检测输入图像中的模式，使用池化层减小特征映射的大小。这使得CNN能够学习图像中最重要的特征，并利用它们进行预测。\n&gt; Finished chain.\n</code></pre><p>输出结果：</p><pre><code class=\"language-plain\">卷积神经网络（CNN）是一种常用于图像识别和分类任务的人工神经网络。它们受到人脑结构的启发，由多层神经元以特定模式连接而成。CNN的第一层神经元与输入图像连接，最后一层神经元与输出连接。输入和输出层之间的神经元称为特征映射，负责从输入图像中提取特征。CNN使用卷积层检测输入图像中的模式，使用池化层减小特征映射的大小。这使得CNN能够学习图像中最重要的特征，并利用它们进行预测。\n</code></pre><p>在使用这样的链式调用的时候，有一点需要注意，就是一个LLMChain里，所使用的PromptTemplate里的输入参数，<strong>之前必须在LLMChain里，通过 output_key 定义过。</strong>不然，这个变量没有值，程序就会报错。</p><h3>支持多个变量输入的链式调用</h3><p>事实上，因为使用变量的输入输出，是用这些参数定义的。所以我们不是只能用前一个LLMChain的输出作为后一个LLMChain的输入。我们完全可以连续问多个问题，然后把这些问题的答案，作为后续问题的输入来继续处理。下面我就给你看一个例子。</p><pre><code class=\"language-python\">from langchain.chains import SequentialChain\n\nq1_prompt = PromptTemplate(\n    input_variables=[\"year1\"],\n    template=\"{year1}年的欧冠联赛的冠军是哪支球队，只说球队名称。\"\n)\nq2_prompt = PromptTemplate(\n    input_variables=[\"year2\"],\n    template=\"{year2}年的欧冠联赛的冠军是哪支球队，只说球队名称。\"\n)\nq3_prompt = PromptTemplate(\n    input_variables=[\"team1\", \"team2\"],\n    template=\"{team1}和{team2}哪只球队获得欧冠的次数多一些？\"\n)\nchain1 = LLMChain(llm=llm, prompt=q1_prompt, output_key=\"team1\")\nchain2 = LLMChain(llm=llm, prompt=q2_prompt, output_key=\"team2\")\nchain3 = LLMChain(llm=llm, prompt=q3_prompt)\n\nsequential_chain = SequentialChain(chains=[chain1, chain2, chain3], input_variables=[\"year1\", \"year2\"], verbose=True)\nanswer = sequential_chain.run(year1=2000, year2=2010)\nprint(answer)\n</code></pre><p>输出结果：</p><pre><code class=\"language-plain\">&gt; Entering new SequentialChain chain...\n&gt; Finished chain.\n\n西班牙皇家马德里队获得欧冠的次数更多，共13次，而拜仁慕尼黑只有5次。\n</code></pre><p>在这个例子里，我们定义了两个PromptTemplate和对应的LLMChain，各自接收一个年份作为输入，回答这两个年份的欧冠冠军。然后将两个队名作为输入，放到第三个问题里，让AI告诉我们这两支球队哪一支获得欧冠的次数多一些。只需要在我们的SequentialChain里输入两个年份，就能通过三次回答得到答案。</p><h2>通过Langchain实现自动化撰写单元测试</h2><p>看到这里，不知道你有没有想起我们上一讲刚刚讲过的通过多步提示语自动给代码写单元测试。没错，Langchain可以顺序地通过多个Prompt调用OpenAI的GPT模型。这个能力拿来实现上一讲的自动化测试的功能是再合适不过的了。下面，我就拿Langchain重新实现了一遍上一讲的这个功能，并且给它补上了AST语法解析失败之后自动重试的能力。</p><pre><code class=\"language-python\">from langchain.chains import SequentialChain\n\ndef write_unit_test(function_to_test, unit_test_package = \"pytest\"):\n    # 解释源代码的步骤\n    explain_code = \"\"\"\"# How to write great unit tests with {unit_test_package}\n\n    In this advanced tutorial for experts, we'll use Python 3.10 and `{unit_test_package}` to write a suite of unit tests to verify the behavior of the following function.\n    ```python\n    {function_to_test}\n    ```\n\n    Before writing any unit tests, let's review what each element of the function is doing exactly and what the author's intentions may have been.\n    - First,\"\"\"\n\n    explain_code_template = PromptTemplate(\n        input_variables=[\"unit_test_package\", \"function_to_test\"],\n        template=explain_code\n    )\n    explain_code_llm = OpenAI(model_name=\"text-davinci-002\", temperature=0.4, max_tokens=1000, \n            top_p=1, stop=[\"\\n\\n\", \"\\n\\t\\n\", \"\\n    \\n\"])\n    explain_code_step = LLMChain(llm=explain_code_llm, prompt=explain_code_template, output_key=\"code_explaination\")\n\n    # 创建测试计划示例的步骤\n    test_plan = \"\"\"\n        \n    A good unit test suite should aim to:\n    - Test the function's behavior for a wide range of possible inputs\n    - Test edge cases that the author may not have foreseen\n    - Take advantage of the features of `{unit_test_package}` to make the tests easy to write and maintain\n    - Be easy to read and understand, with clean code and descriptive names\n    - Be deterministic, so that the tests always pass or fail in the same way\n\n    `{unit_test_package}` has many convenient features that make it easy to write and maintain unit tests. We'll use them to write unit tests for the function above.\n\n    For this particular function, we'll want our unit tests to handle the following diverse scenarios (and under each scenario, we include a few examples as sub-bullets):\n    -\"\"\"\n    test_plan_template = PromptTemplate(\n        input_variables=[\"unit_test_package\", \"function_to_test\", \"code_explaination\"],\n        template= explain_code + \"{code_explaination}\" + test_plan\n    )\n    test_plan_llm = OpenAI(model_name=\"text-davinci-002\", temperature=0.4, max_tokens=1000, \n            top_p=1, stop=[\"\\n\\n\", \"\\n\\t\\n\", \"\\n    \\n\"])\n    test_plan_step = LLMChain(llm=test_plan_llm, prompt=test_plan_template, output_key=\"test_plan\")\n\n    # 撰写测试代码的步骤\n    starter_comment = \"Below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator\"\n    prompt_to_generate_the_unit_test = \"\"\"\n\nBefore going into the individual tests, let's first look at the complete suite of unit tests as a cohesive whole. We've added helpful comments to explain what each line does.\n```python\nimport {unit_test_package}  # used for our unit tests\n\n{function_to_test}\n\n#{starter_comment}\"\"\"\n\n    unit_test_template = PromptTemplate(\n        input_variables=[\"unit_test_package\", \"function_to_test\", \"code_explaination\", \"test_plan\", \"starter_comment\"],\n        template= explain_code + \"{code_explaination}\" + test_plan + \"{test_plan}\" + prompt_to_generate_the_unit_test\n    )\n    unit_test_llm = OpenAI(model_name=\"text-davinci-002\", temperature=0.4, max_tokens=1000, stop=\"```\")\n    unit_test_step = LLMChain(llm=unit_test_llm, prompt=unit_test_template, output_key=\"unit_test\")\n\n    sequential_chain = SequentialChain(chains=[explain_code_step, test_plan_step, unit_test_step], \n                                    input_variables=[\"unit_test_package\", \"function_to_test\", \"starter_comment\"], verbose=True)\n    answer = sequential_chain.run(unit_test_package=unit_test_package, function_to_test=function_to_test, starter_comment=starter_comment)\n    return f\"\"\"#{starter_comment}\"\"\" + answer\n\ncode = \"\"\"\ndef format_time(seconds):\n    minutes, seconds = divmod(seconds, 60)\n    hours, minutes = divmod(minutes, 60)\n    if hours &gt; 0:\n        return f\"{hours}h{minutes}min{seconds}s\"\n    elif minutes &gt; 0:\n        return f\"{minutes}min{seconds}s\"\n    else:\n        return f\"{seconds}s\"\n\"\"\"\n\nimport ast\n\ndef write_unit_test_automatically(code, retry=3):\n    unit_test_code = write_unit_test(code)\n    all_code = code + unit_test_code\n    tried = 0\n    while tried &lt; retry:\n        try:\n            ast.parse(all_code)\n            return all_code\n        except SyntaxError as e:\n            print(f\"Syntax error in generated code: {e}\")\n            all_code = code + write_unit_test(code)\n            tried += 1\n            \nprint(write_unit_test_automatically(code))\n</code></pre><p>输出结果：</p><pre><code class=\"language-python\">\ndef format_time(seconds):\n&nbsp; &nbsp; minutes, seconds = divmod(seconds, 60)\n&nbsp; &nbsp; hours, minutes = divmod(minutes, 60)\n&nbsp; &nbsp; if hours &gt; 0:\n&nbsp; &nbsp; &nbsp; &nbsp; return f\"{hours}h{minutes}min{seconds}s\"\n&nbsp; &nbsp; elif minutes &gt; 0:\n&nbsp; &nbsp; &nbsp; &nbsp; return f\"{minutes}min{seconds}s\"\n&nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; return f\"{seconds}s\"\n#Below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator.\n#The first element of the tuple is the name of the test case, and the second element is a list of tuples,\n#where each tuple contains the input values for the format_time() function and the expected output.\n@pytest.mark.parametrize(\"test_case, input_values, expected_output\", [\n&nbsp; &nbsp; # Test cases for when the seconds parameter is an integer\n&nbsp; &nbsp; (\"seconds is positive\", (42,), \"42s\"),\n&nbsp; &nbsp; (\"seconds is negative\", (-42,), \"-42s\"),\n&nbsp; &nbsp; (\"seconds is 0\", (0,), \"0s\"),\n&nbsp; &nbsp; # Test cases for when the seconds parameter is not an integer\n&nbsp; &nbsp; (\"seconds is a float\", (42.0,), \"42.0s\"),\n&nbsp; &nbsp; (\"seconds is a string\", (\"42\",), \"42s\"),\n&nbsp; &nbsp; (\"seconds is None\", (None,), \"None\"),\n&nbsp; &nbsp; # Test cases for when the seconds parameter is an integer, but it is not in the range 0-3600\n&nbsp; &nbsp; (\"seconds is too small\", (-1,), \"-1s\"),\n&nbsp; &nbsp; (\"seconds is too large\", (3601,), \"1h0min1s\"),\n])\ndef test_format_time(test_case, input_values, expected_output):\n&nbsp; &nbsp; # We use the pytest.raises context manager to assert that the function raises a TypeError\n&nbsp; &nbsp; # if the input is not an integer.\n&nbsp; &nbsp; with pytest.raises(TypeError):\n&nbsp; &nbsp; &nbsp; &nbsp; format_time(input_values)\n&nbsp; &nbsp; # We use the pytest.approx context manager to assert that the output is approximately equal\n&nbsp; &nbsp; # to the expected output, within a certain tolerance.\n&nbsp; &nbsp; assert format_time(input_values) == pytest.approx(expected_output)\n\n</code></pre><p>这个代码的具体功能，其实和上一讲是一模一样的，只是通过Langchain做了封装，使它更加容易维护了。我们把解释代码、生成测试计划，以及最终生成测试代码，变成了三个LLMChain。每一步的输入，都来自上一步的输出。这个输入既包括上一步的Prompt Template和这一步的Prompt Template的组合，也包括过程中的一些变量，这些变量是上一步执行的结果作为输入变量传递进来的。最终，我们可以使用SequentialChain来自动地按照这三个步骤，执行OpenAI的API调用。</p><p>这整个过程通过write_unit_test这个函数给封装起来了。对于重试，我们则是通过一个while循环来调用 write_unit_test。拿到的结果和输入的代码拼装在一起，交给AST库做解析。如果解析通不过，则重试整个单元测试生成的过程，直到达到我们最大的重试次数为止。</p><p>LangChain的这个分多个步骤调用OpenAI模型的能力，能够帮助我们通过AI完成复杂的任务，并且将整个任务的完成过程定义成了一个固定的流程模版。在下一讲里，我们还会进一步看到，通过这样一个链式组合多个LLMChain的方法，如何完成更复杂并且更具有现实意义的工作。</p><h2>小结</h2><p>好了，相信到这里，你脑子里应该有了更多可以利用大语言模型的好点子。这一讲，我带你学会了如何通过Langchain这个开源库，对大语言模型进行链式调用。想要通过大语言模型，完成一个复杂的任务，往往需要我们多次向AI提问，并且前面提问的答案，可能是后面问题输入的一部分。LangChain通过将多个LLMChain组合成一个SequantialChain并顺序执行，大大简化了这类任务的开发工作。</p><p><img src=\"https://static001.geekbang.org/resource/image/36/da/36916e57fc0618e5cb8ce49991e423da.png?wh=1920x1962\" alt=\"图片\" title=\"LLMChain就是一个对大语言模型进行链式调用的模式，前面的变量和输出都可以作为下一轮调用的变量输入\"></p><p>Langchain还有很多更强大的功能，我们不仅能调用语言模型，还能调用外部系统，甚至我们还能直接让AI做决策，决定该让我们的系统做什么。在后面的几讲里，我们会覆盖这些内容，并最终给你一个完整的电商聊天机器人。</p><h2>思考题</h2><p>最后，给你留一道思考题。你能试着通过Langchain组合多个问题，并且利用前面问题的回答结果，触发新的问题找到你想要的答案吗？欢迎你把你的例子拿出来分享在评论区，也欢迎你把这一讲分享给需要的朋友，我们下一讲再见。</p><h2>推荐阅读</h2><p>和之前介绍过的llama-index这个项目一样，Langchain这个项目也在快速地发展和迭代过程中。我推荐你去看一看他们的<a href=\"https://langchain.readthedocs.io/en/latest/\">官方文档</a>，好知道他们提供的最新功能。此外，这个我们之前提到过的向量数据库公司Pinecone，也制作了一份 <a href=\"https://www.pinecone.io/learn/langchain/\">Langchain AI Handbook</a>，你也可以去看一看。</p>","comments":[{"had_liked":false,"id":372447,"user_name":"智能","can_delete":false,"product_type":"c1","uid":1353334,"ip_address":"北京","ucode":"1804A67D67DB51","user_header":"https://static001.geekbang.org/account/avatar/00/14/a6/76/b2a1065a.jpg","comment_is_top":false,"comment_ctime":1681145625,"is_pvip":false,"replies":[{"id":135957,"content":"链式调用，后面的步骤不是一定要包含最开头的Prompt的，根据实际情况你可以调整每个步骤实际的Prompt是什么。\n\n目前其实Azure已经有32K Token的gpt-4-32k了，虽然贵一些。但是如果是拿来干写代码这种高价值任务我觉得还是划得来的。","user_name":"作者回复","user_name_real":"编辑","uid":1053568,"ctime":1681182037,"ip_address":"上海","comment_id":372447,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100541001,"comment_content":"这种链式调用是不是很容易让问题超过token限制，有没有什么办法来自动解决这个问题","like_count":7,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613198,"discussion_content":"链式调用，后面的步骤不是一定要包含最开头的Prompt的，根据实际情况你可以调整每个步骤实际的Prompt是什么。\n\n目前其实Azure已经有32K Token的gpt-4-32k了，虽然贵一些。但是如果是拿来干写代码这种高价值任务我觉得还是划得来的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681182037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1164626,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c5/52/63008fc7.jpg","nickname":"xuwei","note":"","ucode":"07268C1743839F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":625006,"discussion_content":"自己用gpt4token，一天用了20多刀。比课程都贵了。😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1691159130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":613198,"ip_address":"上海","group_id":0},"score":625006,"extra":""}]},{"author":{"id":1005157,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/56/65/22a37a8e.jpg","nickname":"Yezhiwei","note":"","ucode":"31E8E33688CBEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613473,"discussion_content":"是不是可以增加一下判断，当提示模板的信息太多了，利用老师之前讲过的，执行一下摘要逻辑，缩小字数，不知道这样可以不","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681347648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372498,"user_name":"意","can_delete":false,"product_type":"c1","uid":1129311,"ip_address":"广东","ucode":"A4B0C03248EA77","user_header":"https://static001.geekbang.org/account/avatar/00/11/3b/5f/a2c78423.jpg","comment_is_top":false,"comment_ctime":1681205817,"is_pvip":false,"replies":[{"id":135981,"content":"一般都是会提供企业版来获得收入。\n\n1. 企业版本的特有功能，比如更好的管理面板界面等等\n2. 提供开源版本，也提供云端版本。云端版本托管或者按照使用量来收费\n3. 给500强大企业做私有化部署、服务来收费\n\n看中什么具体我也不知道，但是的确Langchain是现在Hacker们用得最多的一个开发框架，有用户有开发者就有可能性和未来。","user_name":"作者回复","user_name_real":"编辑","uid":1053568,"ctime":1681287404,"ip_address":"上海","comment_id":372498,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100541001,"comment_content":"老师好，看到LangChain获得1000万美元种子轮融资的新闻。\n想问下：像LangChain这种开源的产品，商业模式是怎么样的，投资机构是看中了哪点进行投资的。","like_count":4,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613361,"discussion_content":"一般都是会提供企业版来获得收入。\n\n1. 企业版本的特有功能，比如更好的管理面板界面等等\n2. 提供开源版本，也提供云端版本。云端版本托管或者按照使用量来收费\n3. 给500强大企业做私有化部署、服务来收费\n\n看中什么具体我也不知道，但是的确Langchain是现在Hacker们用得最多的一个开发框架，有用户有开发者就有可能性和未来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681287404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372449,"user_name":"一叶","can_delete":false,"product_type":"c1","uid":3577168,"ip_address":"福建","ucode":"21E5455D0814E5","user_header":"https://static001.geekbang.org/account/avatar/00/36/95/50/01199ae9.jpg","comment_is_top":false,"comment_ctime":1681159346,"is_pvip":false,"replies":[{"id":135956,"content":"国内应用的话，自己部署一个postgres + pgvector 插件吧，大部分云平台应该都支持 postgres","user_name":"作者回复","user_name_real":"编辑","uid":1053568,"ctime":1681181942,"ip_address":"上海","comment_id":372449,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100541001,"comment_content":"老师我的想问下,国内使用Pinecone的效率如何? 会不会受到网络的影响?","like_count":4,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613196,"discussion_content":"国内应用的话，自己部署一个postgres + pgvector 插件吧，大部分云平台应该都支持 postgres","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1681181942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374239,"user_name":"厚积薄发","can_delete":false,"product_type":"c1","uid":1206674,"ip_address":"德国","ucode":"8640C07176C249","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/92/69c2c135.jpg","comment_is_top":false,"comment_ctime":1683768876,"is_pvip":false,"replies":[{"id":136844,"content":"这个是大语言模型本身潜在的“幻觉”问题，本质上就是一开始的问题他回答错了。\n\n这个解决的办法就是要用类似 Browsing 插件的方式，通过搜索路径拿到正确答案了","user_name":"作者回复","user_name_real":"编辑","uid":1053568,"ctime":1684748686,"ip_address":"上海","comment_id":374239,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100541001,"comment_content":"支持多个变量输入的链式调用  这个案例 多运行几次，最后的数据结果，每次都不一样\n其中一次是这个‘波尔图更多，他们获得过4次欧冠冠军，而西班牙皇家马德里只获得过3次欧冠冠军。  ’  老师，知道这个是什么原因吗？","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619022,"discussion_content":"这个是大语言模型本身潜在的“幻觉”问题，本质上就是一开始的问题他回答错了。\n\n这个解决的办法就是要用类似 Browsing 插件的方式，通过搜索路径拿到正确答案了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684748686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2582553,"avatar":"https://static001.geekbang.org/account/avatar/00/27/68/19/148457ec.jpg","nickname":"大菠萝","note":"","ucode":"B8B017742055C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":618309,"discussion_content":"我也发现这个问题了，解决办法就是把中文prompt换成英文就好了。\n```\n...\nq1_prompt = PromptTemplate(\n    input_variables=[&#34;year1&#34;],\n    template=&#34;Which team was the winner of the Champions League in {year1}, just output the name of the team.&#34;\n)\nq2_prompt = PromptTemplate(\n    input_variables=[&#34;year2&#34;],\n    template=&#34;Which team was the winner of the Champions League in {year2}, just output the name of the team.&#34;\n)\nq3_prompt = PromptTemplate(\n    input_variables=[&#34;team1&#34;, &#34;team2&#34;],\n    template=&#34;Which team has won the Champions League more times, {team1} or {team2}?&#34;\n)\n...\n```\n\n输出结果\n-&gt; Real Madrid has won the Champions League more times than Inter Milan, with 13 titles compared to Inter Milan&#39;s 3 titles.\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1684168105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373603,"user_name":"极客雷","can_delete":false,"product_type":"c1","uid":1041465,"ip_address":"广东","ucode":"0DBAC4CB9C7BCD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e4/39/a06ade33.jpg","comment_is_top":false,"comment_ctime":1682753298,"is_pvip":false,"replies":[{"id":136448,"content":"这个不是autogpt，只是通过langchain进行链式调用","user_name":"作者回复","user_name_real":"编辑","uid":1053568,"ctime":1683082640,"ip_address":"上海","comment_id":373603,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100541001,"comment_content":"autowgpt？","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":616670,"discussion_content":"这个不是autogpt，只是通过langchain进行链式调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1683082640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":373004,"user_name":"超超超超人","can_delete":false,"product_type":"c1","uid":1166883,"ip_address":"上海","ucode":"7696CACF0DF35F","user_header":"","comment_is_top":false,"comment_ctime":1681908637,"is_pvip":false,"replies":[{"id":136496,"content":"是的，langchain也有如何实现一个autogpt的use case\nhttps:&#47;&#47;python.langchain.com&#47;en&#47;latest&#47;use_cases&#47;autonomous_agents&#47;autogpt.html","user_name":"作者回复","user_name_real":"编辑","uid":1053568,"ctime":1683088155,"ip_address":"上海","comment_id":373004,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100541001,"comment_content":"老师你好，AutoGPT 本质上是不是也使用了链式调用呢？","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":616733,"discussion_content":"是的，langchain也有如何实现一个autogpt的use case\nhttps://python.langchain.com/en/latest/use_cases/autonomous_agents/autogpt.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1683088155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028238,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f2/ce/791d0f5e.jpg","nickname":"张开元","note":"","ucode":"455838B89BF154","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627391,"discussion_content":"https://python.langchain.com/docs/use_cases/more/agents/autonomous_agents/autogpt","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694080858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372694,"user_name":"张弛","can_delete":false,"product_type":"c1","uid":1681607,"ip_address":"中国台湾","ucode":"77E0BC5D0667A8","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/c7/f57dadb9.jpg","comment_is_top":false,"comment_ctime":1681443355,"is_pvip":false,"replies":[{"id":136123,"content":"我在直播的时候给过，中文你可以翻译过来试一下，GPT-4下中英文的推理过程和结果是不一样的。\n\nquestion=&quot;&quot;&quot;You&#39;ve got to defuse a bomb by placing exactly 5 gallons of water on a sensor. \nThe problem is, you only have a 4 gallon jug and a 3 gallons jug on hand! How can you achieve this task?&quot;&quot;&quot;\n","user_name":"作者回复","user_name_real":"编辑","uid":1053568,"ctime":1681615782,"ip_address":"上海","comment_id":372694,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100541001,"comment_content":"用ChatGPT实测本讲中提到的问题，先翻译英文提问，再翻译回来，好像并未产生更好的结果，跟直接中文提问的结果差不多。我还专门开了新的chat窗口来避免上下文影响。老师能否举个具体的通过这种方式得到更好结果的案例呢？","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613972,"discussion_content":"我在直播的时候给过，中文你可以翻译过来试一下，GPT-4下中英文的推理过程和结果是不一样的。\n\nquestion=&#34;&#34;&#34;You&#39;ve got to defuse a bomb by placing exactly 5 gallons of water on a sensor. \nThe problem is, you only have a 4 gallon jug and a 3 gallons jug on hand! How can you achieve this task?&#34;&#34;&#34;\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681615782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372496,"user_name":"Evan","can_delete":false,"product_type":"c1","uid":1344281,"ip_address":"日本","ucode":"B877ABD0CF4661","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/19/0a3fe8c1.jpg","comment_is_top":false,"comment_ctime":1681205533,"is_pvip":false,"replies":[{"id":135970,"content":"这是前面两个LLMChain的ouput_key呀，是通过前面两个LLM的输出结果，再输入到这个里面的","user_name":"作者回复","user_name_real":"编辑","uid":1053568,"ctime":1681263115,"ip_address":"上海","comment_id":372496,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100541001,"comment_content":"input_variables=[&quot;team1&quot;, &quot;team2&quot;],  是怎么传入参数的？","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613311,"discussion_content":"这是前面两个LLMChain的ouput_key呀，是通过前面两个LLM的输出结果，再输入到这个里面的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681263115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372515,"user_name":"Toni","can_delete":false,"product_type":"c1","uid":3206957,"ip_address":"瑞士","ucode":"E6B2FACCC1E000","user_header":"https://static001.geekbang.org/account/avatar/00/30/ef/2d/757bb0d3.jpg","comment_is_top":false,"comment_ctime":1681223114,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":2,"product_id":100541001,"comment_content":"part 1 (受限于2000字符，将相应的运行代码放在了part 2)\n\n题目:\n通过 Langchain 实现自动化撰写 Python 的一个函数(进行时间格式化输出)，并给出对该函数的单元测试，包含对异常输入的测试。\n\n目的: \n1. 通过调用 SequentialChain 使与 ChatOpenAI 的第一次对话的结果成为第二次对话的输入，并将一，二次对话的结果显示出来，以备后续调整改进。(注: 在 ChatOpenAI 的对话窗下，ChatGPT 知道上一次对话的内容，无需重复)。\n2. 使用自然语言提编程要求。\n3. 通过调制 PromptTemplate 中的参数 template 来实现输出结果的最优化。这其实就是设置合适的 Prompt，以期最有效地使用 ChatGPT。\n\n方法:\n尝试着调用了 SequentialChain，使用 ChatOpenAI 的 &quot;gpt-3.5-turbo&quot;，参数设置 temperature=1\n\n结果:\n\n&gt; Entering new SequentialChain chain...\n\n&gt; Finished chain.\ndef time_format(seconds):\n    if seconds &lt; 60:\n        return f&quot;{seconds}s&quot;\n    elif seconds &lt; 3600:\n        minutes = seconds &#47;&#47; 60\n        seconds %= 60\n        return f&quot;{minutes}min{seconds}s&quot;\n    else:\n        hours = seconds &#47;&#47; 3600\n        seconds %= 3600\n        minutes = seconds &#47;&#47; 60\n        seconds %= 60\n        return f&quot;{hours}h{minutes}min{seconds}s&quot;\n\n\n&gt; Entering new SequentialChain chain...\n\n&gt; Finished chain.\nimport pytest\n\ndef test_time_format():\n    assert time_format(1) == &#39;1s&#39;\n    assert time_format(61) == &#39;1min1s&#39;\n    assert time_format(3678) == &#39;1h1min18s&#39;\n    assert time_format(-1) == &#39;Invalid input&#39;\n    assert time_format(&#39;abc&#39;) == &#39;Invalid input&#39;\n    assert time_format(None) == &#39;Invalid input&#39;\n    assert time_format(999999) == &#39;277h46min39s&#39; # Add a test case for a large input\n\nAs an AI language model, I cannot run this code, but I can assure you that the above code functions when used in a Python environment with the necessary dependencies and libraries installed.\n\n结论:\n输出基本满足了设计要求。ChatGPT3.5 在编程方面有所表现，尤其是考虑到本例中使用的模型是 gpt-3.5-turbo。","like_count":2,"discussions":[{"author":{"id":2403622,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ad/26/767527f6.jpg","nickname":"Owen","note":"","ucode":"FDE0D574B8ED5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638575,"discussion_content":"你是嘉伟吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709706525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3206957,"avatar":"https://static001.geekbang.org/account/avatar/00/30/ef/2d/757bb0d3.jpg","nickname":"Toni","note":"","ucode":"E6B2FACCC1E000","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2403622,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ad/26/767527f6.jpg","nickname":"Owen","note":"","ucode":"FDE0D574B8ED5A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638606,"discussion_content":"不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709719868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":638575,"ip_address":"瑞士","group_id":0},"score":638606,"extra":""}]}]},{"had_liked":false,"id":372516,"user_name":"Toni","can_delete":false,"product_type":"c1","uid":3206957,"ip_address":"瑞士","ucode":"E6B2FACCC1E000","user_header":"https://static001.geekbang.org/account/avatar/00/30/ef/2d/757bb0d3.jpg","comment_is_top":false,"comment_ctime":1681224394,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100541001,"comment_content":"part 2\n\n在 part 1 中使用的代码如下:\n\nimport openai, os\nfrom langchain.chat_models import ChatOpenAI  #from langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\nfrom langchain.chains import SequentialChain\n\nopenai.api_key = os.environ.get(&quot;OPENAI_API_KEY&quot;)\nllm = ChatOpenAI(model_name=&quot;gpt-3.5-turbo&quot;, max_tokens=2048, temperature=1)  #text-davinci-003, 2048, max_tokens: 4096 for gpt-3.5-turbo\n\nQ1_prompt = PromptTemplate(\n    template=&quot;用Python写一个函数，进行时间格式化输出，要求仅需要格式化到小时(?h?min?s)。比如：{Q1}&quot;,\n    input_variables=[&quot;Q1&quot;]\n)\nQ2_prompt = PromptTemplate(\n#    template=&quot;请为程序{A1}用&#39;pytest&#39; 写一个单元测试&quot;,\n    template=&quot;&quot;&quot;请为程序{A1}用&#39;pytest&#39; 写一个单元测试, \n    Besides the test that counts negative numbers, include test cases like the input string &quot;abc&quot;, \n    and any other test cases you can think of, \n    将所有的 Test Cases 写入同一个测试中&quot;&quot;&quot;,\n    input_variables=[&quot;A1&quot;]\n)\n\nchain1 = LLMChain(llm=llm, prompt=Q1_prompt, output_key=&quot;A1&quot;)\nchain2 = LLMChain(llm=llm, prompt=Q2_prompt, output_key=&quot;A2&quot;)\n\nq1=&quot;&quot;&quot;\n输入  输出\n1  1s\n61  1min1s\n&quot;&quot;&quot;\n\nsequential_chain_p1 = SequentialChain(chains=[chain1], input_variables=[&quot;Q1&quot;], verbose=True)\nanswer1 = sequential_chain_p1.run(Q1=q1)\nprint(answer1)\n\nsequential_chain_p2 = SequentialChain(chains=[chain1, chain2], input_variables=[&quot;Q1&quot;], verbose=True)\nanswer2 = sequential_chain_p2.run(Q1=q1)\nprint(answer2)\n\n-----------\n-----------\n\n如何将代码封装在一个 App 中呢? \n未来的程序辅助设计是沿这个思路走还是另辟蹊径? \n如果有了用户交互界面，如何控制生成的程序不自己乱跑，亦或 &#39;在正确使用的引导下&#39; 让自动又自动生成的程序跑出了 &#39;天际&#39;，使得让人百思不得其解的事，豁然开朗了起来。\n\n解了一题留下了更多问题。","like_count":1},{"had_liked":false,"id":388678,"user_name":"HXL","can_delete":false,"product_type":"c1","uid":2631455,"ip_address":"北京","ucode":"97298EEC95BFCA","user_header":"https://static001.geekbang.org/account/avatar/00/28/27/1f/42059b0f.jpg","comment_is_top":false,"comment_ctime":1710670591,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100541001,"comment_content":"遇到给代码问题,翻文档也没找到怎么解决,不知道该如何给plan_chain 传递参数. 现在一直报 &quot;Error: Missing value for input unit_test_package&quot;\n\n&quot;&quot;&quot;\nconst modal = new ChatOpenAI({\n    maxTokens: 2048,\n    temperature: 0.5,\n    stop: [&#39;\\n\\n&#39;],\n    topP: 1,\n});\n&#47;&#47;\nconst explain_prompt = new PromptTemplate({\n    &#47;&#47;...\n})\nconst explain_chain = explain_prompt.pipe(modal);\n&#47;&#47;\nconst plan_prompt = new PromptTemplate({\n      template: `\n      &quot;&quot;&quot;\n    A good unit test suite should aim to:\n    - Test the function&#39;s behavior for a wide range of possible inputs\n    - Test edge cases that the author may not have foreseen\n    - Take advantage of the features of &#39;{unit_test_package}&#39; to make the tests easy to write and maintain\n    - Be easy to read and understand, with clean code and descriptive names\n    - Be deterministic, so that the tests always pass or fail in the same way\n\n    &#39;{unit_test_package}&#39; has many convenient features that make it easy to write and maintain unit tests. We&#39;ll use them to write unit tests for the function above.\n\n    For this particular function, we&#39;ll want our unit tests to handle the following diverse scenarios (and under each scenario, we include a few examples as sub-bullets):\n    -&quot;&quot;&quot;\n      `,\n    inputVariables: [&#39;unit_test_package&#39;],\n});\nconst plan_chain = plan_prompt.pipe(modal);\n&#47;&#47;\nconst write_prompt = new PromptTemplate({\n    &#47;&#47;...\n});\nconst write_chain = write_prompt.pipe(modal);\n&#47;&#47;\nasync function main(){\n    &#47;&#47;\n    const test_code = `\n    &#47;&#47;...\n    `;\n    &#47;&#47; FIXME: 如何给 plain_chain 传递参数？\n    const sequence = RunnableSequence.from([explain_chain, plan_chain, write_chain]);\n    const resp = await sequence.invoke({\n        unit_test_package: &#39;jest&#39;,\n        function_to_test: test_code,\n    })\n    console.log(resp);\n};\nmain()\n&quot;&quot;&quot;","like_count":0},{"had_liked":false,"id":387646,"user_name":"Esquel-GET IT - gaofeng","can_delete":false,"product_type":"c1","uid":3780735,"ip_address":"广东","ucode":"AEAD16B2A0967F","user_header":"https://static001.geekbang.org/account/avatar/00/39/b0/7f/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1708322587,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100541001,"comment_content":"上下文记忆答复，上文总结，将总结的信息附加到下一次对话中，如果是将中文翻译成英文，答案由英文转换成中文，对于这个过程中，英文的总结和中文的总结是否一致？应该是有差异的吧？对于回复的内容如何提高精准度？","like_count":0},{"had_liked":false,"id":381237,"user_name":"小理想。","can_delete":false,"product_type":"c1","uid":2238528,"ip_address":"北京","ucode":"EDC35A907570DB","user_header":"https://static001.geekbang.org/account/avatar/00/22/28/40/82d748e6.jpg","comment_is_top":false,"comment_ctime":1694875451,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100541001,"comment_content":"老师想问一下，langchain增加了PromptTemplete有什么性能的优势吗？","like_count":0},{"had_liked":false,"id":376127,"user_name":"花雨田","can_delete":false,"product_type":"c1","uid":1928997,"ip_address":"上海","ucode":"5847A8443779D1","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6f/25/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1686369225,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100541001,"comment_content":"理解下方代码，如果出现异常，再生成一遍write_unit_test（code）。\n\n是否重生成时，把异常信息也给到语言模型会有帮助？\n\nexcept SyntaxError as e:\n            print(f&quot;Syntax error in generated code: {e}&quot;)\n            all_code = code + write_unit_test(code)\n            tried += 1","like_count":0},{"had_liked":false,"id":375272,"user_name":"骨汤鸡蛋面","can_delete":false,"product_type":"c1","uid":1050002,"ip_address":"北京","ucode":"2AC141A523E710","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/92/b609f7e3.jpg","comment_is_top":false,"comment_ctime":1685199904,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100541001,"comment_content":"老师前文说过：大语言模型的一个缺点，就是可控性差。那所谓的基于大模型开发，是不是就是先针对每个&#47;多个问题找到比较好的prompt，以便于基于这个prompt 能够比较好的得到某类问题的回答，然后再用LangChain这类工具将prompt串起来，即可这对某一个场景得到相对确定效果的结果。","like_count":0},{"had_liked":false,"id":375068,"user_name":"金hb.Ryan 冷空氣駕到","can_delete":false,"product_type":"c1","uid":1222233,"ip_address":"上海","ucode":"CAD363576696E4","user_header":"https://static001.geekbang.org/account/avatar/00/12/a6/59/1689ea0c.jpg","comment_is_top":false,"comment_ctime":1684857517,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100541001,"comment_content":"### 写一个首歌 ，模仿&lt;muisc_copy&gt;\n设计一些歌名，模仿&lt;muisc_copy&gt; ，需要给我三个歌名，不用告诉我为什么 -&gt; &lt; music_titles&gt;\n\n如果想模仿&lt;music_copu&gt; 下面哪个标题更好\\n&lt;music_titles&gt;\\n，不用告诉我为什么，直接告诉{歌名},不需要返回歌名两个字: -&gt; &lt;music_title&gt;\n\n用&lt;music_title&gt;为歌名，模仿&lt;music_copy&gt; 填写歌词\n\n &gt; Finished chain.\n九州风云\n\nVerse 1:\n百姓疲惫，战火未息\n江湖险恶，英雄无数\n风云际会，谁又能料\n剑光飞舞，血染长衫\n\nChorus:\n九州风云，谁能掌控\n剑指天下，谁能称雄\n江山永固，谁又能守\n英雄豪杰，谁才是真正的王者\n\nVerse 2:\n忠义仁勇，是我们的信仰\n江山如画，我们守护\n血染长枪，是我们的荣光\n天下归心，我们的愿望\n\nChorus:\n九州风云，谁能掌控\n剑指天下，谁能称雄\n江山永固，谁又能守\n英雄豪杰，谁才是真正的王者\n\nBridge:\n岁月如梭，英雄逝去\n但江山永在，我们的信仰\n九州风云，永远不会消逝\n我们就是那些，历史长河中的传奇\n\nChorus:\n九州风云，谁能掌控\n剑指天下，谁能称雄\n江山永固，谁又能守\n英雄豪杰，谁才是真正的王者\n\nOutro:\n九州风云，我们的传奇\n永远铭刻在历史长河之中\n我们是那些，燃烧生命的英雄\n九州风云，我们的荣光永不磨灭\n","like_count":0},{"had_liked":false,"id":373510,"user_name":"Geek_7ef8fe","can_delete":false,"product_type":"c1","uid":3573382,"ip_address":"北京","ucode":"19278590649E03","user_header":"","comment_is_top":false,"comment_ctime":1682586663,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100541001,"comment_content":"只有 SimpleSequentialChain, verbose=True ，可以打印不出过程日志。\nSequantialChain, verbose=True ，仍然打印不出过程日志。有人知道 怎么解决嘛？","like_count":0},{"had_liked":false,"id":372639,"user_name":"王jojo","can_delete":false,"product_type":"c1","uid":1812840,"ip_address":"北京","ucode":"1ABE7FA2614F86","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/68/ec442a70.jpg","comment_is_top":false,"comment_ctime":1681374215,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100541001,"comment_content":"这个思路确实可以，写简单代码可以这样搞，实际中需要能把代码运行起来，再把结果吐给ai。","like_count":0}]}