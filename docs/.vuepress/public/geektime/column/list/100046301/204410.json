{"id":204410,"title":"03 | 可扩展架构：如何打造一个善变的柔性系统？","content":"<p>你好，我是王庆友，今天我和你聊一聊如何打造可扩展的架构。</p><p>在实际工作中，业务需求总在不断变化，因此，你经常会面临以下这些问题：</p><ul>\n<li>如何快速地上线新业务？老板很可能明天就想看到效果。</li>\n<li>对某个功能进行修改，如何不影响到系统其它的功能？</li>\n</ul><p>对于新的需求变化，我们一方面要快快搞定，另一方面要稳稳接住。但问题是软件虽然姓“软”，但也不是想变就能变，如果事先没有经过良好的设计，调整起来，往往牵一发动全身，导致系统到处出问题。</p><p>那如何设计一个具有良好扩展性的系统，能够快速支持业务变化落地呢？</p><p>接下来，我们围绕系统的可扩展，先来了解下什么是系统，什么样的系统才能具备良好的扩展能力。然后通过一个实际的例子，说明如何通过架构手段打造一个可扩展的系统。</p><h2>系统的构成：模块+关系</h2><p>我们天天和系统打交道，但你有没想过系统到底是什么？在我看来，系统内部是有明确结构的，它可以简化表达为：<strong>系统 = 模块+关系。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/9e/8d/9ebf45d4bbaa1cf35873c2def64b618d.jpg?wh=1141*317\" alt=\"\"></p><p>在这里，模块是系统的基本组成部分，它泛指子系统、应用、服务或功能模块。关系指模块之间的依赖关系，简单地讲，就是模块之间有调用，我们知道，调用区分发起方和服务方，因此，依赖关系是有方向性的。</p><p>这个模型虽然简单，但它给我们提供了一个深入分析系统的工具。接下来，我们就从业务扩展性出发，讨论什么样的模块是容易修改的，什么样的依赖关系是容易调整的。</p><!-- [[[read_end]]] --><h3>模块</h3><p>我们先看模块，模块定义系统都有哪些基本的“玩家”，分别承担什么职责。从业务的角度看，每个模块都代表了某个业务概念，或者说业务领域。</p><p>模块内部由数据和业务逻辑组成，其中数据是核心，业务逻辑围绕着数据，对数据做进一步加工，方便外部使用。</p><p>从扩展性的角度出发，首先，我们对模块的要求是：<strong>定位明确，概念完整。</strong></p><p>每个模块要有明确的定位，模块有了定位，说明我们已经想清楚了它的核心职责是什么，这样，每个人对它的期望和理解就会一致。在实践中，我们经常会争论一个功能应该放到A模块还是B模块，表面上看，各有各的道理，谁也说不服谁，但如果对照模块的定位，回到模块设计的初心，我们往往很快就能有答案。</p><p>定位比较抽象，在具体划分模块职责的时候，要保证模块业务概念的完整性。数据上，模块需要覆盖对应业务领域的全部数据，比如一个订单模块，它要覆盖所有渠道的订单，包括三方平台的订单、自有商城的订单、线下门店的订单等，这些不同类型订单的数据模型和实际数据，都由订单模块负责。</p><p>功能上，模块要包含业务领域的全部功能，比如订单模块包含所有订单相关的功能，包括订单数据的增删改查、订单业务规则校验、订单的状态和生命周期管理等。</p><p>其次，模块还要：<strong>自成体系，粒度适中。</strong></p><p>模块的业务逻辑<strong>尽量围绕自身内部数据进行处理</strong>，对外部依赖越小，模块的封装性越好，稳定性也越强，不会随着外部模块的调整而调整。</p><p>模块的粒度要保持适中，不能为了追求定位清晰，把粒度划分得很小，导致系统的碎片化。比如系统早期的时候，一般我们把积分功能放到用户模块里面，不单独构建积分模块，如果后续积分的概念越来越突出，承载的业务越来越复杂，到时候可以把积分功能分离出来，单独成模块。</p><p>这里，为帮助你更好的理解，我举一个模块划分的反面例子。在实际工作中，很多老系统都有体量很大的模块，我们称之为“肿瘤”，它的特点就是定位模糊，职责泛滥，功能无所不包，这样，模块的可维护性很差，没人敢轻易对它动刀子。</p><p>好了，说完了模块，我们再继续看下模块的依赖关系。</p><h3>依赖关系</h3><p>依赖关系定义了模块如何协作，一起完成业务流程，依赖关系实质上体现的是模块的组织结构。</p><p>如果不对模块的依赖关系做针对性设计的话，依赖关系就是一个多对多的网状结构，一个有N个模块的系统，理论上有N×N个依赖关系，如果考虑依赖具有方向性，这个数字还要加倍。</p><p>所以，要简化模块的依赖关系，我们就要同时简化依赖的方向和减少依赖的数量。</p><p>首先，我们希望模块之间的依赖是单向的，尽量避免相互调用，为什么单向更好呢？我们知道业务流程是有顺序的，如果模块依赖关系越直观地体现业务流程的顺序，越能帮助人理解，否则，我们会被双向的依赖箭头绕的晕头转向，很难通过模块之间的依赖关系还原实际业务的处理过程。</p><p>接下来，我们看下模块的组织结构。我们知道，网状结构是一种松散的结构，节点之间的依赖关系比较复杂，一般用于表示非正式的关系，比如人群的社交关系；而层次结构是一种更有序的结构，一般用于表示正式的关系，比如公司内部的人员关系。</p><p>在模块的组织结构设计上也是如此，我们要尽量把网状结构转化为层次结构，模块结构层次化是简化模块依赖关系的有力手段。</p><p>具体做法就是，我们按照模块定位的不同，把模块划分为不同层次，比如划分为上面的应用层和下面的资源层。这样，一个层通过把多个模块组织在一起，就形成了概念上更大粒度的模块。有了层以后，我们理解业务时，因为模块定位相同，往往关注这个更大粒度的层就可以，依赖关系只要指向这个层，而不是层里面的各个模块。这样，从人理解业务的角度，依赖的数量大幅度地减少了。</p><p>另外，我们知道，层与层之间的依赖关系都是层与层之间自上而下的依赖，相对于多对多的网状依赖，层次依赖的方向更清晰，特别符合人的理解习惯。</p><p>举个具体例子，作为开发，我们都比较了解MVC架构，系统模块按照定位，分为表示层、应用层、聚合服务层、基础服务层。</p><ul>\n<li><strong>表示层</strong>，对应前端的模块，如App、小程序、公众号等，属于View层。</li>\n<li><strong>应用层</strong>，对应和前端表示层直接关联的服务端，属于Control层。</li>\n<li><strong>聚合服务层</strong>，如果系统业务比较复杂，经常需要单独的聚合服务层负责业务流程的编排组合，这个属于Model层的加强。</li>\n<li><strong>基础服务层</strong>，代表最基础的业务模块管理，如订单、商品、用户等，属于实际的Model层。</li>\n</ul><p>我在这里贴了一张MVC分层结构图，你可以看到，模块总体上是非常清晰的层次结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/b0/7d0eb4e3c00a289568a1fca3deaf83b0.jpg?wh=1142*825\" alt=\"\"></p><p>现在，我们清楚了一个可扩展系统对模块和依赖关系的要求，接下来，我们再回到系统扩展性目标，做个深入总结。</p><h2>扩展性的本质</h2><p>在文章开头，我们说因为业务总在变化，所以需要架构设计给系统提供良好的扩展性。</p><p>这只是表象，深层的原因是，一个新的需求进来，系统不只是为它增加一个新功能这么简单，系统的调整会引起一系列的连锁反应，从而大面积地影响系统的现有功能。架构设计时，如果模块划分的不好，一个N个模块的系统，它的复杂度就是N×N（这个在上一讲介绍的支付宝一代架构中，体现得很明显）。如果再加一个新的模块，复杂度就变成(N+1)×(N+1)，系统的复杂度随着功能的数量指数级地上升，这样一来，当系统的规模到一定程度，复杂度就会失控，导致系统彻底无序。</p><p>所以，要支持系统的扩展，架构设计上必须能够控制系统的复杂度，面对新需求，要让系统复杂度做加法而不是乘法，从而保证系统的调整是局部化和最小化的，所以，业务架构扩展性的本质是：<strong>通过构建合理的模块体系，有效地控制系统复杂度，最小化业务变化引起的系统调整。</strong></p><p>那如何打造一个合理的模块体系呢？具体的架构手段就是按照业务对系统进行拆分和整合：<strong>通过拆分，实现模块划分；通过整合，优化模块依赖关系。</strong></p><p>接下来，我们以一个在线出行公司为例，它有出租车、快车和顺风车3条业务线，来具体看下如何为它打造合理的模块体系。</p><h2>打造可扩展的模块体系：模块拆分</h2><p>我们先对系统进行模块化拆分，拆分有两种方式：<strong>水平拆分和垂直拆分。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/c2/82/c2bad813a8dbaca121a701abebf82682.jpg?wh=1142*825\" alt=\"\"></p><h3>水平方向拆分</h3><p>水平拆分是指从上到下把系统分为多层，按照系统处理的先后顺序，把业务拆分为几个步骤。</p><p>比如，整个叫车过程，我们可以分为UI展现、地图搜索、运力调度和订单支付等几个环节，这是根据系统的处理过程进行划分的。</p><p>这样一来，我们就把一个复杂流程，分解为几个相对独立的环节，分别进行处理，这么做带来了很多好处。</p><p>首先，UI展现部分独立成为一个模块，实现了前后端的分离。我们知道，前端的用户体验和界面样式会经常变化，而后端的数据和业务逻辑相对稳定，通过水平拆分，我们实现了稳定部分和不稳定部分的分开，避免相互影响。</p><p>这里的后端包含三个模块，其中地图搜索负责路径规划，运力调度负责人车匹配，订单支付负责交易管理。</p><p>可以看到，通过水平拆分，可以使每一块职责都比较明确，功能内聚，每个模块管理自己内部的复杂性。同时，模块之间相互松耦合，一个模块的修改不影响另一个模块，比如地图搜索模块中改变了优先路径的推荐，不会影响运力调度模块中的人车匹配算法。</p><p>水平分层可以很好地满足现有业务做深度扩展，当业务有变化时，系统在特定层做调整，对其他层影响有限，这样把变化局限在一个小范围。</p><h3>垂直方向拆分</h3><p>垂直拆分指的是按照不同的业务线拆分，比如，将整个出行业务分为出租车业务、快车业务和顺风车业务，按照不同的业务场景，自上而下进行竖切，让每个业务都自成体系，形成自己的业务闭环。</p><p>通过垂直拆分，一个复杂的出行场景就拆分为几个具体的场景，我们可以根据各个业务线的特点去设计系统，从而降低了整个系统的复杂性。</p><p>垂直拆分可以很好地满足业务广度上的扩展，比如说增加一条新的业务线，可以按照这个思路落地系统。</p><p><strong>一般做业务架构时，我们先考虑垂直拆分，从大方向上，把不同业务给区分清楚，然后再针对具体业务，按照业务处理流程进行水平拆分。</strong></p><p>如果同时进行垂直拆分和水平拆分，一个大系统被拆分为了一个二维的模块矩阵，每个模块既属于某个业务线，也属于业务流程的某个环节。这样一来，每个模块的职责都很清晰，当业务变化了，我们可以清楚地知道，这个变化涉及哪些模块，然后，对这些模块进行相应的调整就可以。</p><p>为了帮你更好地理解这两种拆分方式的好处，我这里举个搭积木的例子。经过拆分，每个业务模块都成为一个积木，然后，我们以搭积木的方式来构造系统。当业务发生变化，我们就调整对应的积木，如果系统拆分得合理，拆分后的模块就具有良好的封装性，也就意味着我们主要是调整积木的内部，而它的外观基本不变。这样一来，相邻的积木不会受到影响，系统整体也不需要大的调整。结果是，系统的变化是局部和可控的，保证了灵活的应对变化能力。</p><h2>打造可扩展的模块体系：模块整合</h2><p>系统拆完后，接下来就是模块整合的工作，整合也有两种好的手段：通用化和平台化。</p><h3>通用化整合</h3><p>通用化指的是通过抽象设计，让一个模块具备通用的能力，能够替代多个类似功能的模块。</p><p>回到刚才的出行平台，我们发现3条业务线都有地图搜索、运力调度、订单支付这些模块，不同的业务线之间，这些同名的模块逻辑高度类似，只是细节方面有差别。</p><p>那么，我们能不能对这些类似的模块进行抽象化处理，整合成一个通用的模块呢？答案是可以的，我们可以在模块接口中，通过输入参数标识调用来自哪个业务，是出租车、快车还是顺风车，然后在模块内部，针对不同业务线的差异化部分做针对性处理。结果可能是这个通用模块增加5%的逻辑，但避免了95%的重复逻辑，这样，经过通用化整合，新的模块以很低的代价，就为多个业务线提供了复用。而且，当新的业务线进来，很可能这个通用化的模块，就已经提供了现成的支持。</p><p><strong>通过模块通用化，模块的数量减少了，模块的定位更清晰，概念更完整，职责更聚焦。在实践中，当不同业务线对某个功能需求比较类似时，我们经常会使用这个手段。</strong></p><h3>平台化整合</h3><p>平台化是把定位相同的模块组织在一起，以组团的方式对外提供服务。对于外部系统来说，我们可以把这些模块看成是一个整体，一起对业务场景提供全面的支撑。</p><p>如下图所示，我们可以看到，地图搜索、运力调度、订单支付，都是各个业务线都需要的基础和通用的业务能力，当我们增加新的业务线时，还是离不开这些基础能力。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/3e/76faef600320f2b8974b4860cd57de3e.jpg?wh=1142*698\" alt=\"\"></p><p>所以，我们可以把这些基础模块放在同一层，构成一个基础业务平台。之前，它们是一个个离散的服务，独立地输出能力，现在变成一个大的业务平台，可以提供整体的能力输出。</p><p>通过打造业务平台，一方面，我们对多个业务模块进行包装，形成更大粒度的抽象，相当于减少了模块的数量；另一方面，作为平台，它的定位更明确，系统依赖关系也更清晰；而且，如果新的业务线进来，它可以基于业务平台快速落地。</p><p><strong>业务平台化是模块依赖关系层次化的一个特例，只是它偏向于基础能力，在实践中，当业务线很多，业务规则很复杂时，我们经常把底层业务能力抽取出来，进行平台化处理。</strong></p><h2>总结</h2><p>好了，下面我来总结一下今天所讲的内容。</p><p>首先，我们对系统进行建模，系统=模块+关系，这样会简化你对系统的认识。基于这个模型，我们对模块划分和关系定义提出具体的要求，你可以在实际设计时参考这些要求。</p><p>另外，我们深入地分析了扩展性的本质。系统的扩展能力来自于内部模块体系的有序，这样才能低成本地应对业务变化，认识到了这一点，有助于你从根本上理解和重视架构的扩展性设计。</p><p>然后，我提供了一个出行平台的例子，来帮助你理解，如何通过模块拆分和整合的手段，具体地设计一个可扩展的架构，希望你能在工作中灵活运用。</p><p><strong>最后，给你留一道思考题</strong>：你所在公司里有没有类似的肿瘤系统，它包含了太多职责，导致系统内部结构混乱，大家都不敢对它进行调整？</p><p>欢迎在留言区和我互动，我会第一时间给你反馈。如果这节课对你有帮助，也欢迎你把它分享给你的朋友。感谢阅读，我们下期再见。</p>","neighbors":{"left":{"article_title":"02 | 业务架构：作为开发，你真的了解业务吗？","id":201561},"right":{"article_title":"04 | 可扩展架构案例（一）：电商平台架构是如何演变的？","id":205832}},"comments":[{"had_liked":false,"id":182580,"user_name":"孙同学","can_delete":false,"product_type":"c1","uid":1676238,"ip_address":"","ucode":"C6C82400D15336","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/ce/092acd6a.jpg","comment_is_top":false,"comment_ctime":1582811776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61712353920","product_id":100046301,"comment_content":"https:&#47;&#47;www.processon.com&#47;view&#47;link&#47;5e51378ce4b0c037b5f9d1e3 今天更新了mindmap。可能我参与的系统比较小吧，都是web项目，按照mvc结构基本就能满足，这几天空闲时间就在梳理项目的结构，大概理清了三十多张表之间的逻辑关系，想根据所学试着提出些理解，但在看代码过程中发现另一个问题，不敢细究代码逻辑，真是纷纷扰扰理不清头绪，之后只能通过功能界面理解需求，然后看涉及到的数据表的语句，忽略了各种嵌套的if else，感觉有时即使是清晰的架构，优势也可能被代码质量抹平了。","like_count":14},{"had_liked":false,"id":261791,"user_name":"航哥很帅","can_delete":false,"product_type":"c1","uid":1145270,"ip_address":"","ucode":"23A1CB2A3723AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/b6/faaa95a2.jpg","comment_is_top":false,"comment_ctime":1605525890,"is_pvip":true,"replies":[{"id":"95155","content":"理解得很好","user_name":"作者回复","comment_id":261791,"uid":"1268522","ip_address":"","utype":1,"ctime":1605694772,"user_name_real":"王庆友"}],"discussion_count":2,"race_medal":0,"score":"48850166146","product_id":100046301,"comment_content":"看到目前，说说目前我对业务系统的理解：<br><br>架构的本质其实是如何通过一定的合理编排，让一个软件系统变得的有序，从而满足业务和技术的不断变化。说的高大上一些就是如何让系统变得更有序，而不是系统的熵变得越来越大。那如何让系统变得更有序呢？一般有两种方式：一种是分，一种是合。分就是能够对系统进行拆分，拆分成各个不同的业务模块，同时梳理清楚各个模块之间的关系；合就是能够将模块根据业务的种类，能够把相同的功能模块给合并起来，来统一对外提供服务。<br><br><br>对于业务架构的划分来说，有两个角色好像是在做相同的事情，一个是产品经理，一个是业务架构师。产品经理更多是面向用户侧的，目的是让用户能够对业务认识更清楚，而且产品经理一般不用从业务设计和实现的角度来考虑问题，所以产品经理和开发人员的对接就会比较困难。而业务架构师，则是在产品经理设计完产品功能以后，从面相对象设计的角度来划分模块，让软件的功能设计更加合理，更加适合开发。<br><br><br>一个非常简单的例子就是：产品经理设计的功能，一般都是流程化的，即整个业务流程图。而如果开发人员直接按照这个业务流程来进行开发，很有可能每个业务或功能都要照着流程来做，这样势必会造成大量功能的重复开发。而业务架构师往往就是做这个工作的，既然产品经理已经把哥哥业务流程梳理清楚了，那业务架构师就要把所有的业务流程进行融合和整理，从面相对象的角度来进行设计，画出各个对象之间的关系和依赖图，让开发人员能够更好的进行功能开发。<br><br><br>对于业务架构的可扩展性来说，系统如何能够做到柔性可扩展，是衡量一个系统架构设计好坏的金标准。什么是业务系统，说的简单一些业务系统就等于模块+关系。模块拆分好了，关系梳理好了，往往一个业务系统架构也就定义清楚了。但是一个业务系统好不好还有一个非常关键的指标，那就是：系统的可扩展性和功能的复用性是不是很好，因为这关系到了整个系统的生命周期。<br><br><br>系统的可扩展性好，本质上是系统中各个模块的依赖关系清楚，系统中的各个模块不是复杂和混乱的，而是模块和模块之间关系清楚，很少有相互调用，很少有双向调用。<br><br>系统的复用性好，本质上系统的逻辑划分清楚，功能模块能够做到粒度适中，通用功能能够合理整合，给各个业务功能提供调用。","like_count":12,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509610,"discussion_content":"理解得很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605694772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3065672,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/c7/48/ae5d3956.jpg","nickname":"Young","note":"","ucode":"545AFD93E2A96C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583493,"discussion_content":"优秀的总结","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660143187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182181,"user_name":"偏偏喜欢你","can_delete":false,"product_type":"c1","uid":1764425,"ip_address":"","ucode":"1E2E357F109F9D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ec/49/410176b8.jpg","comment_is_top":false,"comment_ctime":1582726463,"is_pvip":true,"replies":[{"id":"70583","content":"如果有大中台的话，主要的分层和解耦工作已经帮你做了，剩下的是偏应用上层的业务，不用太多考虑再深入拆分。拆分不是越细越好，在人容易理解的前提下，是越粗越好。<br>系统重构时，除了设计到位，保证系统能够平滑过渡也很重要。技术角度多考虑数据如何迁移，如何实现系统的灰度改造，分阶段上线，减少风险。出问题时，要有B计划兜底。","user_name":"作者回复","comment_id":182181,"uid":"1268522","ip_address":"","utype":1,"ctime":1582775481,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"40237432127","product_id":100046301,"comment_content":"老师讲的很好，有几个问题请老师指点一下，1. 如果服务拆分的很细了，而且还有大中台提供服务，一般的做架构的话服务是不是可以不用分层和解耦了，如果按业务来看，影响分层和解藕都有哪些因素需要考量。<br><br>2. 关于系统重构，业务梳理并划分清楚后，在技术角度需要考量的因素还有那些。","like_count":9,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485244,"discussion_content":"如果有大中台的话，主要的分层和解耦工作已经帮你做了，剩下的是偏应用上层的业务，不用太多考虑再深入拆分。拆分不是越细越好，在人容易理解的前提下，是越粗越好。\n系统重构时，除了设计到位，保证系统能够平滑过渡也很重要。技术角度多考虑数据如何迁移，如何实现系统的灰度改造，分阶段上线，减少风险。出问题时，要有B计划兜底。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582775481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187663,"user_name":"深山小书童","can_delete":false,"product_type":"c1","uid":1079593,"ip_address":"","ucode":"6B5DD3B3D84534","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/29/a90cf777.jpg","comment_is_top":false,"comment_ctime":1584187814,"is_pvip":true,"replies":[{"id":"72529","content":"赞一个，这么用心，这个问题，我都要翻一下前面几篇的内容，其实内容安排也没有那么有逻辑。<br>03篇到06篇讲的都是业务可扩展，大致关系如下：<br>1. 03篇是总纲，从系统=模块+关系出发，怎么去定义模块和关系。<br>2. 04篇介绍互联网架构，从单体到微服务，这些都是实际的架构，通过这些架构中，介绍模块和关系是怎么演变支持扩展的。<br>3. 05篇通过具体的网关案例，从单体到服务化，介绍模块和关系在一个实际项目中怎么变化的。<br>4. 06篇介绍中台，是04篇的继续。<br><br>其实都是围绕着模块和关系的定义，去解剖系统以及可扩展。<br><br>","user_name":"作者回复","comment_id":187663,"uid":"1268522","ip_address":"","utype":1,"ctime":1584279263,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"31648958886","product_id":100046301,"comment_content":"老师您好，首先得感谢这个课程，案例丰富，干货满满，很有诚意，这十篇文章已经反复研读很多遍。关于可扩展架构的几篇文章老是串不起来，只记得可复用的几篇文章。能否请老师讲一下可扩展的几篇文章的安排思路，方便理解。","like_count":7,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487191,"discussion_content":"赞一个，这么用心，这个问题，我都要翻一下前面几篇的内容，其实内容安排也没有那么有逻辑。\n03篇到06篇讲的都是业务可扩展，大致关系如下：\n1. 03篇是总纲，从系统=模块+关系出发，怎么去定义模块和关系。\n2. 04篇介绍互联网架构，从单体到微服务，这些都是实际的架构，通过这些架构中，介绍模块和关系是怎么演变支持扩展的。\n3. 05篇通过具体的网关案例，从单体到服务化，介绍模块和关系在一个实际项目中怎么变化的。\n4. 06篇介绍中台，是04篇的继续。\n\n其实都是围绕着模块和关系的定义，去解剖系统以及可扩展。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584279263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290547,"user_name":"林铭铭","can_delete":false,"product_type":"c1","uid":1068499,"ip_address":"","ucode":"AB392BEE7CD6A0","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/d3/67bdcca9.jpg","comment_is_top":false,"comment_ctime":1619613196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18799482380","product_id":100046301,"comment_content":"垂直拆业务线，水平拆流程，抽取通用模块，构建基础平台。","like_count":4},{"had_liked":false,"id":225856,"user_name":"乖，摸摸头","can_delete":false,"product_type":"c1","uid":1611745,"ip_address":"","ucode":"BD92741A11D3CD","user_header":"https://static001.geekbang.org/account/avatar/00/18/97/e1/0f4d90ff.jpg","comment_is_top":false,"comment_ctime":1591875959,"is_pvip":true,"replies":[{"id":"84614","content":"信息量比较多，理解起来比较费时，这里我只提供思路。针对问题2，用户查看信息消耗积分如果不合适放用户模块或积分模块，可以放上这两个基础模块之上的聚合服务处理。就像电商的下单功能，在会员服务，商品服务，订单等基础服务之上。","user_name":"作者回复","comment_id":225856,"uid":"1268522","ip_address":"","utype":1,"ctime":1592966843,"user_name_real":"王庆友"}],"discussion_count":2,"race_medal":0,"score":"14476777847","product_id":100046301,"comment_content":"<br>老师，我们现在的一种业务场景，我们做的是一个信息对接平台，简化后的主要内容就是这样。<br><br>1.信息分为几大类，用户可以发布几种不同的信息，信息发布流程大不分逻辑是一样的，有一小部分差别，和你举例中的打车有点类似。<br>2.用户查看别人发布的信息需要消耗积分，查看几种分类的信息消耗的积分是不一样的。<br>3.用户可以置顶自己发布的信息，需要消耗积分，置顶不同分类信息的积分也是不同的。<br>4.积分是通过用户 拉新、充值等方式获得的。<br>5.用户的积分是储存在用户表的一个字段中。<br>6.用户查看信息、或者发布信息 之前会先判断用户的状态，如果用户被我们做了一些标记，就会先让用户做一些其他操作才能查看信息，比如先填手机号填个验证码.<br>7. 一条信息只扣一次积分，也就是说，在扣分之前会先查询是否已经扣分，扣过分就不再扣分了。<br><br><br>大致的场景就这样，我把系统划分为下面几个模块、和功能。<br><br>用户模块： 登录、注册、鉴权...<br>信息模块： 发布信息、修改信息...<br>积分模块： 设置各种信息的扣分单价（比如 A类信息需要1分查看，B类信息需要2分查看）。设置 充值单价(10元20积分，20元50积分等)。 记录 积分来源记、积分消耗等积分记录<br><br>问题1： 我这样划分模块合不合适？<br><br>问题2： 用户查看信息消耗积分这个动作应该放在哪个模块，是放到用户模块、还是积分模块，还是再新增一个模块。<br>如果放到用户模块： 先去信息模块获取信息，获取用户信息(需要判断用户状态是否健康) 再扣掉用户积分，然后调用积分模块增加一条积分消耗的记录<br>如果放到积分模块： 先去信息模块获取信息，调用用户模块(需要判断用户状态是否健康) 再次调用用户模块扣掉积分，再增加一条积分消耗记录。","like_count":3,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498018,"discussion_content":"信息量比较多，理解起来比较费时，这里我只提供思路。针对问题2，用户查看信息消耗积分如果不合适放用户模块或积分模块，可以放上这两个基础模块之上的聚合服务处理。就像电商的下单功能，在会员服务，商品服务，订单等基础服务之上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592966843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1069305,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/f9/6709b5d2.jpg","nickname":"Horace","note":"","ucode":"6BEE982D144CFD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582925,"discussion_content":"我说一下我的见解：\n1，从模块划分来看，应该是：\n用户模块：负责登录，注册，鉴权等与用户域密切相关的功能\n信息模块：信息的管理，查看信息需要的条件，目前是积分，以后可能是其他条件，那么这个条件是属于信息域的，应该内聚\n积分模块：这是用户的虚拟资产，库存的概念，不应该耦合其他业务，所以这里的信息的扣分单价应该划分到信息模块，也需要考虑到，积分以后也会用到其他模块，所以是需要内聚，其中需要管理积分的库存，流水等记录，方便日后对账\n充值模块：除此之外应该还需要有充值模块，独立负责充值业务，为上游提供资产管理\n\n前期业务量不大的情况下，这些模块可以在一个服务里，但需要按模块划分，为以后业务拓展提供拆分的条件（拆分时机：组织架构，业务流量，业务复杂性等等维度）\n\n2，用户查看信息消耗积分应该放在哪个模块，如果按照信息模块的职责，自然而然就应该放在信息模块了。当然老师说到可以独立一层聚合服务，当然也是可以的，可以结合ROI考虑是否在当前阶段拆分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659782658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182085,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1582705877,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10172640469","product_id":100046301,"comment_content":"总结一下。<br><br>可扩展化的过程就是一个抽象的过程。<br><br>1、首先是从具体的业务场景中抽象出一个个的业务节点（接口），把类似的接口按照业务域放到不同的模块中。因为业务就是逻辑➕数据（对应于程序就是算法➕数据结构），每个业务的数据模型不相同。<br><br>所以，从数据层面来说，这一层抽象的标准也就是模块划分的标准是各模块的不需要依赖其它模块的数据。<br><br>2、下一个层次的抽象是继续把模块“聚类”，做更高水平的抽象，进一步减少逻辑实体的数量，利于人脑的思考。可以从两个视角出发：能力（功能）和定位。<br><br>从能力（功能）视角出发（比如通过参数化）可以进行通用化整合，标准是边际收益高，增加很少的代码，就可以提高很多的通用性，从而减少模块的数量。<br><br>从定位视角出发，进行平台化整合。本质也是从更高的角度看待系统，更有利于人脑进行分析。","like_count":2,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":187877,"discussion_content":"你这个总结很厉害，请收下我的膝盖。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582775690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181929,"user_name":"川杰","can_delete":false,"product_type":"c1","uid":1099750,"ip_address":"","ucode":"815211E1D698E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/e6/11f21cb4.jpg","comment_is_top":false,"comment_ctime":1582681717,"is_pvip":false,"replies":[{"id":"70439","content":"能理解，这个要通过显式立项方式解决。","user_name":"作者回复","comment_id":181929,"uid":"1268522","ip_address":"","utype":1,"ctime":1582682202,"user_name_real":"王庆友"}],"discussion_count":3,"race_medal":0,"score":"10172616309","product_id":100046301,"comment_content":"有。领导觉得没有必要调整，或者，要你利用业余时间提出方案，甚至最好是能改好，还不能有什么BUG，最关键的是领导还是程序员出身；只能等他的短视自食其果了。","like_count":2,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485171,"discussion_content":"能理解，这个要通过显式立项方式解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582682202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1641661,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0c/bd/a8a07887.jpg","nickname":"猿某人KK","note":"","ucode":"6E2E45291E5CB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191739,"discussion_content":"可能是业务压力，无法给攻城狮足够时间让去做系统重构。这种情况，开发过程中通用化整合，以及部分业务模块抽离重构，可能更适合。个人感受，有时候领导也很无奈，公司业务快速发展迭代，人员工作又相对饱和，再牛的架构师这时候也无法迎合业务的快速调整~~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583031308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1099750,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c7/e6/11f21cb4.jpg","nickname":"川杰","note":"","ucode":"815211E1D698E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1641661,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0c/bd/a8a07887.jpg","nickname":"猿某人KK","note":"","ucode":"6E2E45291E5CB1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191921,"discussion_content":"不是领导无奈，他从思想层面就不认为这样做有什么好处","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583046664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":191739,"ip_address":""},"score":191921,"extra":""}]}]},{"had_liked":false,"id":243171,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1597980976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892948272","product_id":100046301,"comment_content":"系统=模块+关系<br>模块则是由数据和业务逻辑组成<br>关系则是模块之间的依赖关系，也就模块之间的调用关系，涉及调用方和被调用方<br>我们希望依赖关系能够直观的提现业务，而不是复杂的相互依赖的关系<br>模块的组织关系很容易出现网状的结构，更好的做法是把层次化，例如上层应用依赖下层模块，而不是反过来<br>模块划分可以从垂直方向和水平方向对系统进行划分，分别代表着系统水平扩展能力和深度扩展能力<br>划分模块之后，随着业务发展，还可能需要将模块通用化，减少模块达到复用的目的，还会进行平台化将几个模块的能力组织起来对外提供服务","like_count":1},{"had_liked":false,"id":192948,"user_name":"梁中华","can_delete":false,"product_type":"c1","uid":1006789,"ip_address":"","ucode":"52FE40242CBAD0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","comment_is_top":false,"comment_ctime":1584879757,"is_pvip":true,"replies":[{"id":"73739","content":"是的，总的都是属于聚合服务，可以按照用途，细分为应用服务，流程服务，一般也不会分这么多层次，层次太多容易产生性能和可用性问题。","user_name":"作者回复","comment_id":192948,"uid":"1268522","ip_address":"","utype":1,"ctime":1584934758,"user_name_real":"王庆友"}],"discussion_count":2,"race_medal":0,"score":"5879847053","product_id":100046301,"comment_content":"看京东的架构除了聚合服务，还有流程服务，感觉这两类服务差不多的定位。","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488485,"discussion_content":"是的，总的都是属于聚合服务，可以按照用途，细分为应用服务，流程服务，一般也不会分这么多层次，层次太多容易产生性能和可用性问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584934758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1080998,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7e/a6/188817b6.jpg","nickname":"郭嵩阳","note":"","ucode":"9DC42C7B73F580","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323096,"discussion_content":"流程服务与聚合服务有什么区别呢,流程服务也是聚合服务吧，能解释一下吗，大概","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604885431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187656,"user_name":"小洛","can_delete":false,"product_type":"c1","uid":1005062,"ip_address":"","ucode":"227EC21891012B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/06/ea49b29d.jpg","comment_is_top":false,"comment_ctime":1584185181,"is_pvip":false,"replies":[{"id":"72527","content":"1. 上层应用调促销服务进行算价，然后把结果传给订单服务进行保存，订单服务不会直接调促销服务进行算价。<br>2. 业务实际上有分层的，比如基础业务和上层业务，订单，会员，商品这些业务都可以做类似的划分，比如下单属于订单的上层业务，订单的增删改查和生命周期管理就是基础业务。这些基础业务定位就一样，可以放到同一层。<br>3. 通用逻辑改了，自然需要回归，业务规则统一在一个地方啊比在多个地方改要好。为避免影响，服务内部要做好单元测试，服务接口要做好自动化测试。","user_name":"作者回复","comment_id":187656,"uid":"1268522","ip_address":"","utype":1,"ctime":1584278735,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"5879152477","product_id":100046301,"comment_content":"有几个问题请教下老师<br>1、模块业务逻辑要尽量围绕自身内部数据进行处理，但是有时候需要调用其他模块的数据才能正确处理自己内部的逻辑，就比如订单模块在算价的时候是需要调用优惠模块计算，然后拿到结果做保存，这时候失败了要怎么处理？<br>2、如何做好模块结构层次化，有什么准则吗？怎么定义相似的模块放到同一层次？开始如果放错，后期调整，如果对业务造成很大影响，是否需要去调整呢？<br>3、通用化整合，如果修改的是通用逻辑，依赖的多个业务线应该需要全部回归，在业务架构上如何去做权衡","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487187,"discussion_content":"1. 上层应用调促销服务进行算价，然后把结果传给订单服务进行保存，订单服务不会直接调促销服务进行算价。\n2. 业务实际上有分层的，比如基础业务和上层业务，订单，会员，商品这些业务都可以做类似的划分，比如下单属于订单的上层业务，订单的增删改查和生命周期管理就是基础业务。这些基础业务定位就一样，可以放到同一层。\n3. 通用逻辑改了，自然需要回归，业务规则统一在一个地方啊比在多个地方改要好。为避免影响，服务内部要做好单元测试，服务接口要做好自动化测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584278735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185712,"user_name":"Geek_kevin","can_delete":false,"product_type":"c1","uid":1301274,"ip_address":"","ucode":"03B0253CA59582","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/1a/30201f1a.jpg","comment_is_top":false,"comment_ctime":1583669011,"is_pvip":false,"replies":[{"id":"71827","content":"可以借鉴支付系统的做法，一般要接入很多三方支付平台。设计上问题不大，关键是要平衡投入产出比。","user_name":"作者回复","comment_id":185712,"uid":"1268522","ip_address":"","utype":1,"ctime":1583723595,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"5878636307","product_id":100046301,"comment_content":"我们公司是传统生产商,公司在处理物流发货这块有4个系统，分别对接4家不同物流公司的系统，各个系统有80%的重复，以后再来1家物流公司，感觉还要再开发一套，很是头疼","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486472,"discussion_content":"可以借鉴支付系统的做法，一般要接入很多三方支付平台。设计上问题不大，关键是要平衡投入产出比。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583723595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185124,"user_name":"黄马","can_delete":false,"product_type":"c1","uid":1019506,"ip_address":"","ucode":"93E391B4678EC2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/72/63c94eee.jpg","comment_is_top":false,"comment_ctime":1583488555,"is_pvip":true,"replies":[{"id":"71530","content":"需要总体上理解业务，才能定义好哪些是基础业务，架构是逐步演进的，一开始自上而下直接搭建，怎么快怎么来，后面业务复杂了，就要考虑如何拆分组合，哪些属于稳定的基础业务，哪些属于快变的上层应用。不能指望一开始就构建基础平台，筑巢引凤，这不大可行。","user_name":"作者回复","comment_id":185124,"uid":"1268522","ip_address":"","utype":1,"ctime":1583505528,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"5878455851","product_id":100046301,"comment_content":"为了业务流程之间的复用，系统分模块，为了关系模块之间的关系，模块分层；<br>这些所有的都是给予对业务的理解，<br>业务的理解公司的业务有关系，如果公司的业务不定，别说构建基础模块，连分模块都不可能。<br>如果有比较清楚领域知识的，能够识别业务领域的基础能力，直接构建基础能力平台，在此基础上构建各种的业务线<br>老师理解对吗？","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486260,"discussion_content":"需要总体上理解业务，才能定义好哪些是基础业务，架构是逐步演进的，一开始自上而下直接搭建，怎么快怎么来，后面业务复杂了，就要考虑如何拆分组合，哪些属于稳定的基础业务，哪些属于快变的上层应用。不能指望一开始就构建基础平台，筑巢引凤，这不大可行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583505528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184837,"user_name":"睡不着的史先生","can_delete":false,"product_type":"c1","uid":1192542,"ip_address":"","ucode":"E00E6C43F340D9","user_header":"https://static001.geekbang.org/account/avatar/00/12/32/5e/4827557b.jpg","comment_is_top":false,"comment_ctime":1583416718,"is_pvip":false,"replies":[{"id":"71484","content":"不需要再额外针对内部的服务封装一层API，业务平台更多是概念上的，把各个基础服务逻辑上组合在一起。掰开看也是一个个独立的服务，但这些服务定位是相同的，相互间没有紧密依赖。","user_name":"作者回复","comment_id":184837,"uid":"1268522","ip_address":"","utype":1,"ctime":1583466821,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"5878384014","product_id":100046301,"comment_content":"所以，我们可以把这些基础模块放在同一层，构成一个基础业务平台。之前，它们是一个个离散的服务，独立地输出能力，现在变成一个大的业务平台，可以提供整体的能力输出。<br>这里平台化说白了就是封装了一层对外的api吗？他跟独立的服务好像也没啥区别呢呀？","like_count":1,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486141,"discussion_content":"不需要再额外针对内部的服务封装一层API，业务平台更多是概念上的，把各个基础服务逻辑上组合在一起。掰开看也是一个个独立的服务，但这些服务定位是相同的，相互间没有紧密依赖。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583466821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352963,"user_name":"刘静文","can_delete":false,"product_type":"c1","uid":2676846,"ip_address":"上海","ucode":"C0FEA78EFB8134","user_header":"https://static001.geekbang.org/account/avatar/00/28/d8/6e/c6c52ea3.jpg","comment_is_top":false,"comment_ctime":1659057001,"is_pvip":false,"replies":[{"id":"130111","content":"业务架构某种意义上来说，比产品视野更大，产品分一个个具体产品，业务架构更加全局。但新落业务时，一般还是产品经理先和业务方了解各种碎片化需求，整理后，业务架构再深入抽象化思考，当然整个思考有可能超越当前产品要落地的功能。","user_name":"作者回复","comment_id":352963,"uid":"1268522","ip_address":"上海","utype":1,"ctime":1663326154,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1659057001","product_id":100046301,"comment_content":"为什么业务架构会在产品设计完成之后呢？<br><br>业务架构应该是更加贴近业务的，像业务未来发展而需要调整业务模型，这类的需求可能业务人员和产品经理都没有办法感知的，如果是从用户需求-产品经理-业务架构-开发，这样是不是没有办法进行未来规划？","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587866,"discussion_content":"业务架构某种意义上来说，比产品视野更大，产品分一个个具体产品，业务架构更加全局。但新落业务时，一般还是产品经理先和业务方了解各种碎片化需求，整理后，业务架构再深入抽象化思考，当然整个思考有可能超越当前产品要落地的功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663326154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347043,"user_name":"罗浩铭","can_delete":false,"product_type":"c1","uid":3001330,"ip_address":"","ucode":"81A0C7DC82B9DD","user_header":"","comment_is_top":false,"comment_ctime":1653639779,"is_pvip":false,"replies":[{"id":"127726","content":"工具很常规，一般用ppt&#47;visio, 一个在线画序列图的工具也挺好用，百度下。","user_name":"作者回复","comment_id":347043,"uid":"1268522","ip_address":"","utype":1,"ctime":1657533297,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1653639779","product_id":100046301,"comment_content":"老师，想请教一下您画这些流程和架构图用的什么工具","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579576,"discussion_content":"工具很常规，一般用ppt/visio, 一个在线画序列图的工具也挺好用，百度下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657533297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314971,"user_name":"ezekiel","can_delete":false,"product_type":"c1","uid":1158795,"ip_address":"","ucode":"AB4AB6FA8612D8","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/8b/43ce01ca.jpg","comment_is_top":false,"comment_ctime":1633617714,"is_pvip":false,"replies":[{"id":"120382","content":"这样理解也没问题","user_name":"作者回复","comment_id":314971,"uid":"1268522","ip_address":"","utype":1,"ctime":1641976003,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1633617714","product_id":100046301,"comment_content":"我的理解是模块的划分是，可扩展性和可复用性的基础？","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545488,"discussion_content":"这样理解也没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641976003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289100,"user_name":"aszt","can_delete":false,"product_type":"c1","uid":1301167,"ip_address":"","ucode":"37051887448492","user_header":"https://static001.geekbang.org/account/avatar/00/13/da/af/a1fa6ebb.jpg","comment_is_top":false,"comment_ctime":1618877482,"is_pvip":false,"replies":[{"id":"105361","content":"几种选择：<br>1.可以在标签平台和商品服务之上提供一个聚合服务，调用标签选商品后，再获取商品更多信息。<br>2.也可以直接在商品服务里提供这个接口，不建议在标签平台提供，标签平台做专业的事情。<br>3. A模块调用完标签平台后，自己去聚合商品信息<br>","user_name":"作者回复","comment_id":289100,"uid":"1268522","ip_address":"","utype":1,"ctime":1619747825,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"1618877482","product_id":100046301,"comment_content":"王老师，早！重新温习此教程，又有新的收获，就模块划分和模块职责，我这有个小场景，希望你给些建议：标签平台管理标签及标签与商品之间的关系，现在A模块需要通过标签选商品，但标签平台中只有商品的id等少量信息，A模块需要更多的商品信息，应该由哪个模块来完善商品信息？","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518819,"discussion_content":"几种选择：\n1.可以在标签平台和商品服务之上提供一个聚合服务，调用标签选商品后，再获取商品更多信息。\n2.也可以直接在商品服务里提供这个接口，不建议在标签平台提供，标签平台做专业的事情。\n3. A模块调用完标签平台后，自己去聚合商品信息\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619747825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257301,"user_name":"Presley","can_delete":false,"product_type":"c1","uid":1215219,"ip_address":"","ucode":"D8F125835F4903","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/f3/7c89d00e.jpg","comment_is_top":false,"comment_ctime":1603933545,"is_pvip":false,"replies":[{"id":"93871","content":"基础模块不调用其他基础模块，比如会员服务不调用商品服务，它们相互之间应该是正交的。上层的聚合服务可以相互调用，组成更大的聚合服务。","user_name":"作者回复","comment_id":257301,"uid":"1268522","ip_address":"","utype":1,"ctime":1604158982,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"1603933545","product_id":100046301,"comment_content":"老师，分布在同一层的基础模块，一个模块可以调用另一模块吗？如果有调用关系，被调用模块，放到更下一层次会不会合理些？","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508288,"discussion_content":"基础模块不调用其他基础模块，比如会员服务不调用商品服务，它们相互之间应该是正交的。上层的聚合服务可以相互调用，组成更大的聚合服务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604158982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253264,"user_name":"E","can_delete":false,"product_type":"c1","uid":1075666,"ip_address":"","ucode":"80B68506B590EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/69/d2/8a53f0a3.jpg","comment_is_top":false,"comment_ctime":1602666034,"is_pvip":true,"replies":[{"id":"92921","content":"你说的对，N*N已经是双向了,考虑多模块链路依赖的话会更多。","user_name":"作者回复","comment_id":253264,"uid":"1268522","ip_address":"","utype":1,"ctime":1603173254,"user_name_real":"王庆友"}],"discussion_count":1,"race_medal":0,"score":"1602666034","product_id":100046301,"comment_content":"“如果不对模块的依赖关系做针对性设计的话，依赖关系就是一个多对多的网状结构，一个有 N 个模块的系统，理论上有 N×N 个依赖关系，如果考虑依赖具有方向性，这个数字还要加倍。” 老师，N*N是已经算了双向的吧？否则应该是N的阶乘？","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507024,"discussion_content":"你说的对，N*N已经是双向了,考虑多模块链路依赖的话会更多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603173254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252777,"user_name":"萧","can_delete":false,"product_type":"c1","uid":1229143,"ip_address":"","ucode":"0C2239867AFF5F","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/57/27de274f.jpg","comment_is_top":false,"comment_ctime":1602484394,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1602484394","product_id":100046301,"comment_content":"可扩展性架构<br>系统：模块+关系<br><br>模块：<br>定位清晰，概念完整<br>自成体系，粒度适中<br>关系：<br>尽量减少依赖，层次化<br>可扩展性的本质：通过拆分，实现模块划分；通过整合，划分模块依赖关系<br><br>拆分：水平拆分和垂直拆分<br>整合：通用化整合和平台化整合","like_count":0},{"had_liked":false,"id":215239,"user_name":"jian","can_delete":false,"product_type":"c1","uid":1185102,"ip_address":"","ucode":"21CDBBB8000F0C","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/4e/4636a81d.jpg","comment_is_top":false,"comment_ctime":1588938129,"is_pvip":false,"replies":[{"id":"79688","content":"Control是单个应用内部接入层的概念，整体系统的接入层要么是独立的网关，没有网关，就是相应的app&#47;小程序等服务端应用。","user_name":"作者回复","user_name_real":"王庆友","uid":"1268522","ctime":1588984083,"ip_address":"","comment_id":215239,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588938129","product_id":100046301,"comment_content":"请问老师，control层是不是后台服务中的接入层？","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494366,"discussion_content":"Control是单个应用内部接入层的概念，整体系统的接入层要么是独立的网关，没有网关，就是相应的app/小程序等服务端应用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588984083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209706,"user_name":"王亮","can_delete":false,"product_type":"c1","uid":1009889,"ip_address":"","ucode":"A22CBAB2EC9349","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/e1/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1587603194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587603194","product_id":100046301,"comment_content":"说的很好 架构师必备技能","like_count":0},{"had_liked":false,"id":206671,"user_name":"Robin康F","can_delete":false,"product_type":"c1","uid":1962437,"ip_address":"","ucode":"618F8686D1231D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJyLCPnVq4gKMN5jPcd9wVVEXtZMibCNAkLrJf4uZKdV40Nelb3uPtCETfuw5hbbC693sUHQpRUMiaA/132","comment_is_top":false,"comment_ctime":1586915614,"is_pvip":false,"replies":[{"id":"77205","content":"ddd的领域建模方法和分层概念很不错，但整体术语和流程有点复杂，可以作为微服务设计时，前期分析使用。服务化落地时，业务逻辑要从实体和领域服务里抽取出来，放到微服务里面，实体对象变成贫血模型。","user_name":"作者回复","user_name_real":"王庆友","uid":"1268522","ctime":1586918566,"ip_address":"","comment_id":206671,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1586915614","product_id":100046301,"comment_content":"扩展性本质：构建模块体系，控制复杂度，最小化系统调整。现在流行的DDD领域驱动设计中提到的领域模型和领域服务感觉可以很好的划分模块职责，王老师对DDD的认识是怎么样的","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491862,"discussion_content":"ddd的领域建模方法和分层概念很不错，但整体术语和流程有点复杂，可以作为微服务设计时，前期分析使用。服务化落地时，业务逻辑要从实体和领域服务里抽取出来，放到微服务里面，实体对象变成贫血模型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586918566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107666,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/d2/638ca831.jpg","nickname":"z","note":"","ucode":"CDB0BE8562ECB6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379517,"discussion_content":"服务落地时，为什么要变成贫血模型呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623934935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206029,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1586775692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586775692","product_id":100046301,"comment_content":"主要就是模块的分分合合，水平方面提供平台化，垂直方面提供通用化。我目前也只是了解。在谈优势的时候，却说不出来。","like_count":0},{"had_liked":false,"id":200625,"user_name":"AlfredLover","can_delete":false,"product_type":"c1","uid":1042354,"ip_address":"","ucode":"A3A998F362CC37","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/b2/334bc992.jpg","comment_is_top":false,"comment_ctime":1585625843,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585625843","product_id":100046301,"comment_content":"看起来，良好的可扩展性，依赖可复用性？","like_count":0},{"had_liked":false,"id":193531,"user_name":"充满希望的一天","can_delete":false,"product_type":"c1","uid":1907531,"ip_address":"","ucode":"AEBE5B5072F964","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1b/4b/33f5a948.jpg","comment_is_top":false,"comment_ctime":1584924197,"is_pvip":false,"replies":[{"id":"73736","content":"中台还是一个个基础服务，把它们更体系地组织在一起，专栏后面有关于中台的具体介绍，不知你看了没有？","user_name":"作者回复","user_name_real":"王庆友","uid":"1268522","ctime":1584934237,"ip_address":"","comment_id":193531,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1584924197","product_id":100046301,"comment_content":"中台是把各个服务共用的东西聚合在一起吗？","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488577,"discussion_content":"中台还是一个个基础服务，把它们更体系地组织在一起，专栏后面有关于中台的具体介绍，不知你看了没有？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584934237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1907531,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/1b/4b/33f5a948.jpg","nickname":"充满希望的一天","note":"","ucode":"AEBE5B5072F964","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212685,"discussion_content":"好的，谢谢，刚看前几章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585008538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190621,"user_name":"250ZH","can_delete":false,"product_type":"c1","uid":1457901,"ip_address":"","ucode":"F9B4FD1E4E7C5C","user_header":"https://static001.geekbang.org/account/avatar/00/16/3e/ed/e154de2e.jpg","comment_is_top":false,"comment_ctime":1584673430,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584673430","product_id":100046301,"comment_content":"模块划分和定义很重要，但也很难做好，每个人对系统整体和具体功能的认识又不一样，团队内部讨论这个事总是无疾而终，最后靠领导拍板","like_count":0},{"had_liked":false,"id":187786,"user_name":"Geek_589486","can_delete":false,"product_type":"c1","uid":1161974,"ip_address":"","ucode":"C7CFFE83687A28","user_header":"https://static001.geekbang.org/account/avatar/00/11/ba/f6/721d0920.jpg","comment_is_top":false,"comment_ctime":1584241400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584241400","product_id":100046301,"comment_content":"柔性的架构在于要全面理解业务，了解业务不变的模块，并根据实际情况进行模块拆分，并随着时间动态调整","like_count":0},{"had_liked":false,"id":185400,"user_name":"doannado","can_delete":false,"product_type":"c1","uid":1169379,"ip_address":"","ucode":"16CF3E7C2E0827","user_header":"https://static001.geekbang.org/account/avatar/00/11/d7/e3/7e07ae99.jpg","comment_is_top":false,"comment_ctime":1583574494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583574494","product_id":100046301,"comment_content":"20200307 系统 模块 关系 拆分 整合 扩展的本质等","like_count":0},{"had_liked":false,"id":184799,"user_name":"张明云","can_delete":false,"product_type":"c1","uid":1009901,"ip_address":"","ucode":"430314AC1039C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/ed/b5a41e95.jpg","comment_is_top":false,"comment_ctime":1583407667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583407667","product_id":100046301,"comment_content":"言简意赅地把知识讲得清清楚楚，一看就是绝对资深。","like_count":0},{"had_liked":false,"id":183184,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1582968435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582968435","product_id":100046301,"comment_content":"业务和基础模块划分是门艺术，在应用体量不同时的划分可能截然不同，只有多做项目设计才能做成较科学的划分。","like_count":0},{"had_liked":false,"id":183181,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1582968153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582968153","product_id":100046301,"comment_content":"我司原来是单体应用，现在在做模块化拆分，从单体应用里把模块功能剥离到各自的项目中。但整体还未完成，遗留的单体应用就是个肿瘤，鱼龙混杂，啥功能都有。最终目标就是消灭这个肿瘤。","like_count":0},{"had_liked":false,"id":182918,"user_name":"Geek_c00e0c","can_delete":false,"product_type":"c1","uid":1890560,"ip_address":"","ucode":"F74C5BB6455FE0","user_header":"","comment_is_top":false,"comment_ctime":1582890265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582890265","product_id":100046301,"comment_content":"肿瘤系统的形成也有一定因素，比如确实是功能内聚的一个模块，拆分为多个系统的话，可能会有功能不清晰，而且可能会增加了分布式事务的处理。","like_count":0},{"had_liked":false,"id":182516,"user_name":"西西弗与卡夫卡","can_delete":false,"product_type":"c1","uid":1001710,"ip_address":"","ucode":"B4C27B8335B76A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/ee/872ad07e.jpg","comment_is_top":false,"comment_ctime":1582799833,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582799833","product_id":100046301,"comment_content":"现在就在动手对一个历经好多年有各种补丁的系统做调整，也许最好的方法就是重新设计，重新构建","like_count":0},{"had_liked":false,"id":182444,"user_name":"zeor","can_delete":false,"product_type":"c1","uid":1888276,"ip_address":"","ucode":"20DA6DB3527D21","user_header":"https://static001.geekbang.org/account/avatar/00/1c/d0/14/50782491.jpg","comment_is_top":false,"comment_ctime":1582788789,"is_pvip":false,"replies":[{"id":"70687","content":"查块?什么意思呢","user_name":"作者回复","user_name_real":"王庆友","uid":"1268522","ctime":1582861340,"ip_address":"","comment_id":182444,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582788789","product_id":100046301,"comment_content":"老师您好，请问一个查块的拆分，组合，要什么时候去做","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485340,"discussion_content":"查块?什么意思呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582861340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182281,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1582761869,"is_pvip":false,"replies":[{"id":"70577","content":"不一样，这里的业务平台是泛称，业务中台是特指，有一定的要求，后面文章有专门部分讲解业务中台","user_name":"作者回复","user_name_real":"王庆友","uid":"1268522","ctime":1582770219,"ip_address":"","comment_id":182281,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582761869","product_id":100046301,"comment_content":"业务中台概念是不是就对应文中的业务平台","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485282,"discussion_content":"不一样，这里的业务平台是泛称，业务中台是特指，有一定的要求，后面文章有专门部分讲解业务中台","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582770219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182192,"user_name":"马哲富","can_delete":false,"product_type":"c1","uid":1107917,"ip_address":"","ucode":"D6BDDFE3CC07ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/cd/08088f14.jpg","comment_is_top":false,"comment_ctime":1582726989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582726989","product_id":100046301,"comment_content":"高屋建瓴，醍醐灌顶；系统=模块+依赖关系","like_count":0},{"had_liked":false,"id":181942,"user_name":"李博","can_delete":false,"product_type":"c1","uid":1119919,"ip_address":"","ucode":"04C2DE916B84AB","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/af/bada0f59.jpg","comment_is_top":false,"comment_ctime":1582683404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582683404","product_id":100046301,"comment_content":"很棒！","like_count":0},{"had_liked":false,"id":181914,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1024763,"ip_address":"","ucode":"F6B5C64BC99FB7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/fb/94af9cf1.jpg","comment_is_top":false,"comment_ctime":1582679354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582679354","product_id":100046301,"comment_content":"系统的扩展能力来自于内部模块体系的有序，这样才能低成本地应对业务变化。这也是架构师的职责所在。","like_count":0}]}