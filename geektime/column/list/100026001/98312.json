{"id":98312,"title":"16 | 浮点数和定点数（下）：深入理解浮点数到底有什么用？","content":"<p>上一讲，我们讲了用“浮点数”这样的数据形式，来表示一个不能确定大小的数据范围。浮点数可以大到$3.40×10^{38}$，也可以小到$1.17×10^{-38}$这样的数值。同时，我们也发现，其实我们平时写的0.1、0.2并不是精确的数值，只是一个近似值。只有0.5这样，可以表示成$2^{-1}$这种形式的，才是一个精确的浮点数。</p><p>你是不是感到很疑惑，浮点数的近似值究竟是怎么算出来的？浮点数的加法计算又是怎么回事儿？在实践应用中，我们怎么才用好浮点数呢？这一节，我们就一起来看这几个问题。</p><h2>浮点数的二进制转化</h2><p>我们首先来看，十进制的浮点数怎么表示成二进制。</p><p>我们输入一个任意的十进制浮点数，背后都会对应一个二进制表示。比方说，我们输入了一个十进制浮点数9.1。那么按照之前的讲解，在二进制里面，我们应该把它变成一个“<strong>符号位s+指数位e+有效位数f</strong>”的组合。第一步，我们要做的，就是把这个数变成二进制。</p><p>首先，我们把这个数的整数部分，变成一个二进制。这个我们前面讲二进制的时候已经讲过了。这里的9，换算之后就是1001。</p><!-- [[[read_end]]] --><p>接着，我们把对应的小数部分也换算成二进制。小数怎么换成二进制呢？我们先来定义一下，小数的二进制表示是怎么回事。我们拿0.1001这样一个二进制小数来举例说明。和上面的整数相反，我们把小数点后的每一位，都表示对应的2的-N次方。那么0.1001，转化成十进制就是：</p><p>$1×2^{-1}+0×2^{-2}+0×2^{-3}+$<br>\n$1×2^{-4}=0.5625$</p><p>和整数的二进制表示采用“除以2，然后看余数”的方式相比，小数部分转换成二进制是用一个相似的反方向操作，就是乘以2，然后看看是否超过1。如果超过1，我们就记下1，并把结果减去1，进一步循环操作。在这里，我们就会看到，0.1其实变成了一个无限循环的二进制小数，0.0<span class=\"orange\">0011</span>0011。这里的“0011”会无限循环下去。</p><p><img src=\"https://static001.geekbang.org/resource/image/f9/ae/f9213c43f5fa658a2192a68cd26435ae.jpg?wh=2283*1083\" alt=\"\"></p><p>然后，我们把整数部分和小数部分拼接在一起，9.1这个十进制数就变成了1001.0<span class=\"orange\">0011</span>0011…这样一个二进制表示。</p><p>上一讲我们讲过，浮点数其实是用二进制的科学计数法来表示的，所以我们可以把小数点左移三位，这个数就变成了：</p><p>$1.0010$<span class=\"orange\">$0011$</span>$0011… × 2^3$</p><p>那这个二进制的科学计数法表示，我们就可以对应到了浮点数的格式里了。这里的符号位s = 0，对应的有效位f=0010<strong>0011</strong>0011…。因为f最长只有23位，那这里“0011”无限循环，最多到23位就截止了。于是，f=0010<strong>0011001100110011</strong> <strong><span class=\"orange\">001</span></strong>。最后的一个“0011”循环中的最后一个“1”会被截断掉。对应的指数为e，代表的应该是3。因为指数位有正又有负，所以指数位在127之前代表负数，之后代表正数，那3其实对应的是加上127的偏移量130，转化成二进制，就是130，对应的就是指数位的二进制，表示出来就是1000<strong>0010</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/9a/27/9ace5a7404d1790b03d07bd1b3cb5a27.jpeg?wh=2743*463\" alt=\"\"></p><p>然后，我们把“s+e+f”拼在一起，就可以得到浮点数9.1的二进制表示了。最终得到的二进制表示就变成了：</p><p>01000<strong>0010</strong> 0010 <strong>0011001100110011</strong> <strong><span class=\"orange\">001</span></strong></p><p>如果我们再把这个浮点数表示换算成十进制， 实际准确的值是9.09999942779541015625。相信你现在应该不会感觉奇怪了。</p><p>我在这里放一个<a href=\"https://www.h-schmidt.net/FloatConverter/IEEE754.html\">链接</a>，这里提供了直接交互式地设置符号位、指数位和有效位数的操作。你可以直观地看到，32位浮点数每一个bit的变化，对应的有效位数、指数会变成什么样子以及最后的十进制的计算结果是怎样的。</p><p>这个也解释了为什么，在上一讲一开始，0.3+0.6=0.899999。因为0.3转化成浮点数之后，和这里的9.1一样，并不是精确的0.3了，0.6和0.9也是一样的，最后的计算会出现精度问题。</p><h2>浮点数的加法和精度损失</h2><p>搞清楚了怎么把一个十进制的数值，转化成IEEE-754标准下的浮点数表示，我们现在来看一看浮点数的加法是怎么进行的。其实原理也很简单，你记住六个字就行了，那就是<strong>先对齐、再计算</strong>。</p><p>两个浮点数的指数位可能是不一样的，所以我们要把两个的指数位，变成一样的，然后只去计算有效位的加法就好了。</p><p>比如0.5，表示成浮点数，对应的指数位是-1，有效位是00…（后面全是0，记住f前默认有一个1）。0.125表示成浮点数，对应的指数位是-3，有效位也还是00…（后面全是0，记住f前默认有一个1）。</p><p>那我们在计算0.5+0.125的浮点数运算的时候，首先要把两个的指数位对齐，也就是把指数位都统一成两个其中较大的-1。对应的有效位1.00…也要对应右移两位，因为f前面有一个默认的1，所以就会变成0.01。然后我们计算两者相加的有效位1.f，就变成了有效位1.01，而指数位是-1，这样就得到了我们想要的加法后的结果。</p><p>实现这样一个加法，也只需要位移。和整数加法类似的半加器和全加器的方法就能够实现，在电路层面，也并没有引入太多新的复杂性。</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/f0/d7a6e87da9c0d0b874980ca4306a55f0.jpg?wh=2083*698\" alt=\"\"></p><p>同样的，你可以用刚才那个链接来试试看，我们这个加法计算的浮点数的结果是不是正确。</p><p>回到浮点数的加法过程，你会发现，其中指数位较小的数，需要在有效位进行右移，在右移的过程中，最右侧的有效位就被丢弃掉了。这会导致对应的指数位较小的数，在加法发生之前，就<strong>丢失精度</strong>。两个相加数的指数位差的越大，位移的位数越大，可能丢失的精度也就越大。当然，也有可能你的运气非常好，右移丢失的有效位都是0。这种情况下，对应的加法虽然丢失了需要加的数字的精度，但是因为对应的值都是0，实际的加法的数值结果不会有精度损失。</p><p>32位浮点数的有效位长度一共只有23位，如果两个数的指数位差出23位，较小的数右移24位之后，所有的有效位就都丢失了。这也就意味着，虽然浮点数可以表示上到$3.40×10^{38}$，下到$1.17×10^{-38}$这样的数值范围。但是在实际计算的时候，只要两个数，差出$2^{24}$，也就是差不多1600万倍，那这两个数相加之后，结果完全不会变化。</p><p>你可以试一下，我下面用一个简单的Java程序，让一个值为2000万的32位浮点数和1相加，你会发现，+1这个过程因为精度损失，被“完全抛弃”了。</p><pre><code>public class FloatPrecision {\n  public static void main(String[] args) {\n    float a = 20000000.0f;\n    float b = 1.0f;\n    float c = a + b;\n    System.out.println(&quot;c is &quot; + c);\n    float d = c - a;\n    System.out.println(&quot;d is &quot; + d);\n  }\n}\n</code></pre><p>对应的输出结果就是：</p><pre><code>c is 2.0E7\nd is 0.0\n</code></pre><h2>Kahan Summation算法</h2><p>那么，我们有没有什么办法来解决这个精度丢失问题呢？虽然我们在计算浮点数的时候，常常可以容忍一定的精度损失，但是像上面那样，如果我们连续加2000万个1，2000万的数值都会被精度损失丢掉了，就会影响我们的计算结果。</p><p>一个常见的应用场景是，在一些“积少成多”的计算过程中，比如在机器学习中，我们经常要计算海量样本计算出来的梯度或者loss，于是会出现几亿个浮点数的相加。每个浮点数可能都差不多大，但是随着累积值的越来越大，就会出现“大数吃小数”的情况。</p><p>我们可以做一个简单的实验，用一个循环相加2000万个1.0f，最终的结果会是1600万左右，而不是2000万。这是因为，加到1600万之后的加法因为精度丢失都没有了。这个代码比起上面的使用2000万来加1.0更具有现实意义。</p><pre><code>public class FloatPrecision {\n  public static void main(String[] args) {\n    float sum = 0.0f;\n    for (int i = 0; i &lt; 20000000; i++) {\n    \tfloat x = 1.0f;\n    \tsum += x;    \t\n    }\n    System.out.println(&quot;sum is &quot; + sum);   \n  }\t\n}\n</code></pre><p>对应的输出结果是：</p><pre><code>sum is 1.6777216E7\n</code></pre><p>面对这个问题，聪明的计算机科学家们也想出了具体的解决办法。他们发明了一种叫作<a href=\"https://en.wikipedia.org/wiki/Kahan_summation_algorithm\">Kahan Summation</a>的算法来解决这个问题。算法的对应代码我也放在文稿中了。从中你可以看到，同样是2000万个1.0f相加，用这种算法我们得到了准确的2000万的结果。</p><pre><code>public class KahanSummation {\n  public static void main(String[] args) {\n    float sum = 0.0f;\n    float c = 0.0f;\n    for (int i = 0; i &lt; 20000000; i++) {\n    \tfloat x = 1.0f;\n    \tfloat y = x - c;\n    \tfloat t = sum + y;\n    \tc = (t-sum)-y;\n    \tsum = t;    \t\n    }\n    System.out.println(&quot;sum is &quot; + sum);   \n  }\t\n}\n</code></pre><p>对应的输出结果就是：</p><pre><code>sum is 2.0E7\n</code></pre><p>其实这个算法的原理其实并不复杂，就是在每次的计算过程中，都用一次减法，把当前加法计算中损失的精度记录下来，然后在后面的循环中，把这个精度损失放在要加的小数上，再做一次运算。</p><p>如果你对这个背后的数学原理特别感兴趣，可以去看一看<a href=\"https://en.wikipedia.org/wiki/Kahan_summation_algorithm\">Wikipedia链接</a>里面对应的数学证明，也可以生成一些数据试一试这个算法。这个方法在实际的数值计算中也是常用的，也是大量数据累加中，解决浮点数精度带来的“大数吃小数”问题的必备方案。</p><h2>总结延伸</h2><p>到这里，我们已经讲完了浮点数的表示、加法计算以及可能会遇到的精度损失问题。可以看到，虽然浮点数能够表示的数据范围变大了很多，但是在实际应用的时候，由于存在精度损失，会导致加法的结果和我们的预期不同，乃至于完全没有加上的情况。</p><p>所以，一般情况下，在实践应用中，对于需要精确数值的，比如银行存款、电商交易，我们都会使用定点数或者整数类型。</p><p>比方说，你一定在MySQL里用过decimal(12,2)，来表示订单金额。如果我们的银行存款用32位浮点数表示，就会出现，马云的账户里有2千万，我的账户里只剩1块钱。结果银行一汇总总金额，那1块钱在账上就“不翼而飞”了。</p><p>而浮点数呢，则更适合我们不需要有一个非常精确的计算结果的情况。因为在真实的物理世界里，很多数值本来就不是精确的，我们只需要有限范围内的精度就好了。比如，从我家到办公室的距离，就不存在一个100%精确的值。我们可以精确到公里、米，甚至厘米，但是既没有必要、也没有可能去精确到微米乃至纳米。</p><p>对于浮点数加法中可能存在的精度损失，特别是大量加法运算中累积产生的巨大精度损失，我们可以用Kahan Summation这样的软件层面的算法来解决。</p><p>好了，到了这里，我已经把浮点数讲透了。希望你能从数据的表示、加法的实现，乃至实践应用、数值算法层面能够体会到，搞清楚一个计算机问题的基本原理，其实能够帮助你理解它的实践应用，乃至找到在特定问题下的可行解决方案。接下来，我们要深入到CPU的构造，去理解计算机组成原理。</p><h2>推荐阅读</h2><p>浮点数的加法我们讲完了。想要更深入地了解乘法乃至除法，可以参看《计算机组成与设计 硬件/软件接口》的3.5.2和3.5.3小节。</p><h2>课后思考</h2><p>这两节我讲的都是32位浮点数，那么对于64位浮点数的加法，两个数相差多少的情况后，较小的哪个数在加法过程中会完全丢失呢？</p><p>欢迎你在留言区写下你的思考和疑问，和大家一起探讨。你也可以把今天的文章分享给你朋友，和他一起学习和进步。</p><p></p>","comments":[{"had_liked":false,"id":99531,"user_name":"有米","can_delete":false,"product_type":"c1","uid":1005042,"ip_address":"","ucode":"C9A10B7A67BC12","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/f2/ba68d931.jpg","comment_is_top":false,"comment_ctime":1559240750,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"138998194222","product_id":100026001,"comment_content":"decimal是如何实现保证不丢精度呢？","like_count":32,"discussions":[{"author":{"id":1009850,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/68/ba/c0cf8bf3.jpg","nickname":"天天向上卡索","note":"","ucode":"E3724C3B39BD3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585612,"discussion_content":"decimal 是分成了两部分，整数位和小数位都是整数，所以没有精度的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661730316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576276,"discussion_content":"也是减法记录丢失的精度吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655389821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2272314,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/GbZRicqbu1QJmlcOlfLyW48OPaMmcKSO6zeZaKkc2uFiaLYOysibTKMtrOvOpHvlSHulHUatKX7lVcrENibqCmGhwQ/132","nickname":"18736297414","note":"","ucode":"F5220462B05D43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387890,"discussion_content":"BigDecimal类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628488785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1841096,"avatar":"","nickname":"flzs","note":"","ucode":"796344BABDA8B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364509,"discussion_content":"是不是可以这样理解：\n（1）累加到后面出现了大数吃小数的场景，就会产生误差，第一次的误差是-1记录了下来\n（2）下一次再加1时，先将1与误差值-1相减得到2，实际上变成了大数加2，如果此时2还是被吃掉了，则当前的误差值-2也会被记录下来，参与下一次的累加计算，\n（3）这个过程中的误差值也被累加记录了，当误差累加到足够大时，就变成了两个都比较大的数值进行想加了，不会出现精度的损失。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617505873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1587666,"avatar":"https://static001.geekbang.org/account/avatar/00/18/39/d2/845c0e39.jpg","nickname":"送过快递的码农","note":"","ucode":"66EA81B3BADC73","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282590,"discussion_content":"我之前看了Java代码，细节没看懂，但是他保存是通过bigInteger  而bigInteger又通过Int  数组  ，所以他保存的全部都是整数，以及对应的小数位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592023479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1229070,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c1/0e/2b987d54.jpg","nickname":"蜉蝣","note":"","ucode":"77CF92496855D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213465,"discussion_content":"不知道是不是借助定点数实现的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585097703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1744677,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9f/25/4e442e41.jpg","nickname":"Kevin","note":"","ucode":"145D3660431DB6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51265,"discussion_content":"decimal不是浮点型，他的实现和浮点数的实现不一样。c#的官方文档有详细说明","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573829506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14592,"discussion_content":"利用kahan算法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568772512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1110384,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f1/70/a64d9498.jpg","nickname":"三个石头","note":"","ucode":"A863A416D65217","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309171,"discussion_content":"真的么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601205074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":14592,"ip_address":""},"score":309171,"extra":""}]},{"author":{"id":1238355,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/53/83146bd7.jpg","nickname":"凯","note":"","ucode":"218482D0347EC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5376,"discussion_content":"十进制浮点数吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566211187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124213,"user_name":"DreamItPossible","can_delete":false,"product_type":"c1","uid":1254103,"ip_address":"","ucode":"232FCE2BB22012","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/d7/fed46140.jpg","comment_is_top":false,"comment_ctime":1565835507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"91760148723","product_id":100026001,"comment_content":"课后思考题解答：<br>首先，64位浮点数的表示方法如下：符号位是1位，指数部分为11位，尾数部分为52位；<br>其次，应用本节的可知，当做加法的两个64位的浮点数的指数位相差52位后，较小的那个数就会因为要右移53位导致有效位数完全丢失；<br>最后，精度缺失问题同样可以使用`Kahan Summation`算法来补偿；","like_count":22},{"had_liked":false,"id":216844,"user_name":"Wayne","can_delete":false,"product_type":"c1","uid":1575587,"ip_address":"","ucode":"537E3FD62EB27D","user_header":"https://static001.geekbang.org/account/avatar/00/18/0a/a3/6e9f00fa.jpg","comment_is_top":false,"comment_ctime":1589354069,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"87488699989","product_id":100026001,"comment_content":"总感觉文中Kahan Summation代码的物理意义有点难以理解，写了个一个相对好一点理解的版本，仅供参考哈~<br>    public static void main(String[] args) {<br>        float res = 0.0f;<br>        float remain = 0.0f;<br>        for (int i = 0; i &lt; 20000000; i++) {<br>            float cur = 1.0f;<br>            float needToAdd = cur + remain;<br>            float nextRes = res + needToAdd;<br>            remain = needToAdd - (nextRes - res);<br>            res = nextRes;<br>        }<br>        System.out.println(res);<br>    }","like_count":21,"discussions":[{"author":{"id":1363822,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/uktgj5R0p78c67oLib8EuRMRCgP8yjxnZ1ibVOuibhRZvjJpKSJNaTl0UlEfGyiaaiaGyPmqpGYpibTt0QopX1qtWfQQ/132","nickname":"杨大小最嗨皮","note":"","ucode":"7DFACF1414AE16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377885,"discussion_content":"感谢 这个清晰多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622946707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101274,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1559776008,"is_pvip":true,"replies":[{"id":"37119","content":"因为js里面你用的是64位的float啦，所以精度不再是1600万分之1了，你可以自己看看64位的精度应该是多少，试试看是不是有一样的问题。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1560262462,"ip_address":"","comment_id":101274,"utype":1}],"discussion_count":5,"race_medal":1,"score":"61689318152","product_id":100026001,"comment_content":"老师 ，这里我用 JS 代码实验了一下，JS 中的数值类型都是 IEEE754实现的浮点数类型：<br>    let a = 20000000;<br>    let b = 1;<br>    let c = a + b;<br>    console.log(&quot;c is &quot; + c);<br>    let d = c - a;<br>    console.log(&quot;d is &quot; + d);<br>输出是： <br>&#47;&#47; &quot;c is 20000001&quot;<br>&#47;&#47; &quot;d is 1&quot;<br><br>然后2千万个数相加：<br>let result = 0;<br>for (let j = 0; j &lt; 20000000; j++) {<br>  result ++;<br>};<br>console.log(&#39;result&#39;, result)<br>&#47;&#47; result 20000000<br><br>这里都是正确的，是 自己实现了 Kahan Summation 算法吗 ？ 还是其他的原因？","like_count":14,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452884,"discussion_content":"因为js里面你用的是64位的float啦，所以精度不再是1600万分之1了，你可以自己看看64位的精度应该是多少，试试看是不是有一样的问题。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1560262462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1750628,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUaOs097vUd4wh5GCqnPkHM6oR2TMIOI0xQEooL2EH6DpzdjsQbyRhsJuD0AyG3QkFcWq5icZlgmA/132","nickname":"rl58xz","note":"","ucode":"3409114D447098","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306585,"discussion_content":"用2**63 + 1会吃掉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600324097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003327,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4f/3f/6f62f982.jpg","nickname":"王坤祥","note":"","ucode":"FB988B9F381A33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224485,"discussion_content":"你好，看你的js代码，使用到的数据类型是整形，并不是float。如果要用float的话，对于1来讲应该是1.或者1.0。当然这只是一方面，另外，要复现精度损失问题，还要考虑js里面float是32位还是64位的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586310846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1003327,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4f/3f/6f62f982.jpg","nickname":"王坤祥","note":"","ucode":"FB988B9F381A33","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224538,"discussion_content":"js和java是不一样的，js中数值都是IEEE754双精度浮点型实现的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586314063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":224485,"ip_address":""},"score":224538,"extra":""},{"author":{"id":1003327,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4f/3f/6f62f982.jpg","nickname":"王坤祥","note":"","ucode":"FB988B9F381A33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":224557,"discussion_content":"一步你好，js本身用的不多，也没有去仔细确认一下js几本数据类型，就草率的下了结论。所以我去网上搜了一下，对于js，number类型包括了整形和浮点数，对于浮点数，必须要有小数点来体现的。也就是说，如果没有小数点，这个number类型就是整形数据了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586315215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":224538,"ip_address":""},"score":224557,"extra":""}]}]},{"had_liked":false,"id":105462,"user_name":"Junho","can_delete":false,"product_type":"c1","uid":1001493,"ip_address":"","ucode":"4A9611DB2D2AF8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/15/d34c134f.jpg","comment_is_top":false,"comment_ctime":1561006012,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"53100613564","product_id":100026001,"comment_content":"老师好。平时会听说一种说法：在现代CPU下，定点数的执行效率比浮点数慢一到两个数量级。不知这个说法是否合理？如果合理的话，原理是什么呢？<br>对于这两种表示法，在工作中的应用：游戏中涉及要求计算一致性的场合，如王者荣耀的网络同步方案。<br>王者的同步方案是帧同步，在这个方案下，需要确保逻辑层的所有计算，在所有硬件下都是完全一致的，否则同步就会出现灾难性的后果。<br>据找得到的资料，王者官方的分享是说，他们是用分数来代替浮点数的（分子和分母分别用整数表示），但没提及不用定点数的缘由。<br>倒是腾讯另外某位技术专家，就提及了浮点数与定点数在执行效率上的差异，但没涉及原理说明，所以想请教一下老师这个问题。谢谢！","like_count":12,"discussions":[{"author":{"id":1693587,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d7/93/456d6f1a.jpg","nickname":"先哥哥","note":"","ucode":"633C118E3D331F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41049,"discussion_content":"我之前有看过腾讯的技术分享，他们有给出过一个高效的定点数解决方案，主要的思路是对定点数的各项运算进行代码层面的优化。看了一下性能对比，除了除法运算不在一个量级，其他都是差不多的，甚至像加法这种由于不需要对齐阶码，运算还会快一些。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1572336361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1001493,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/15/d34c134f.jpg","nickname":"Junho","note":"","ucode":"4A9611DB2D2AF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1693587,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d7/93/456d6f1a.jpg","nickname":"先哥哥","note":"","ucode":"633C118E3D331F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41935,"discussion_content":"谢谢哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572535785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41049,"ip_address":""},"score":41935,"extra":""},{"author":{"id":1693587,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d7/93/456d6f1a.jpg","nickname":"先哥哥","note":"","ucode":"633C118E3D331F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001493,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/15/d34c134f.jpg","nickname":"Junho","note":"","ucode":"4A9611DB2D2AF8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45939,"discussion_content":"如果你对具体的做法感兴趣，可以去看腾讯最近出的书《腾讯游戏开发精粹》，里面有详细提到定点数的方案，以及针对于加减乘除三角函数等基本运算的优化。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1573101276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41935,"ip_address":""},"score":45939,"extra":""},{"author":{"id":2723874,"avatar":"https://static001.geekbang.org/account/avatar/00/29/90/22/2c1cc000.jpg","nickname":"Geek小白","note":"","ucode":"F2BF75F2F19B29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1693587,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d7/93/456d6f1a.jpg","nickname":"先哥哥","note":"","ucode":"633C118E3D331F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545956,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642090463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":45939,"ip_address":""},"score":545956,"extra":""}]}]},{"had_liked":false,"id":99644,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1559272859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40213978523","product_id":100026001,"comment_content":"decimal难道就是所谓定点数？Java里的BigDecimal的原理是什么？","like_count":9},{"had_liked":false,"id":99626,"user_name":"初心丶可曾記","can_delete":false,"product_type":"c1","uid":1140481,"ip_address":"","ucode":"232DBFB8C3AC00","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/01/a5bb9c92.jpg","comment_is_top":false,"comment_ctime":1559268343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23034104823","product_id":100026001,"comment_content":"64位浮点数，有效位是52位,所以相差2^53会丢失较小的数","like_count":6},{"had_liked":false,"id":99743,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1559289733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18739158917","product_id":100026001,"comment_content":"对于64位的符点数，符号位是52位，所以应该是如果两个相差2^53倍及以上的数相加，较小的数会完全丢失吧。","like_count":4},{"had_liked":false,"id":104223,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1560688575,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14445590463","product_id":100026001,"comment_content":"对Kahan Summation算法的理解：<br><br>x，本轮要加的数<br>第一个c，截止上一轮损失的精度<br>第二个c，截止本轮损失的精度<br>y，本轮要加的数与之前累计损失的精度之和<br>前两个sum，上一轮的求和结果<br>t和第三个sum，本轮的求和结果","like_count":3,"discussions":[{"author":{"id":2222614,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/1fXYkS0UlZUQQtzUpG2TZzVhVZHarfpWT5wjO7iajw959zysQks1vLFM2uQsKnYG3uQAhzenH9LP86goiciaCDNibQ/132","nickname":"Xingyi_Xie","note":"","ucode":"D1849DB8BFB1B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531982,"discussion_content":"多谢提示，c 是负数，所以我看了好几遍，都看不懂代码，还以为 y = x - c 是“用一次减法记录损失的精度”，其实后面的 c = (t-sum)-y; 才是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637487889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103560,"user_name":"小木匠","can_delete":false,"product_type":"c1","uid":1055610,"ip_address":"","ucode":"222F861CF9129C","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/7a/390a8530.jpg","comment_is_top":false,"comment_ctime":1560473537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14445375425","product_id":100026001,"comment_content":"老师，在Kahan 算法里，如果累积的损失精度c也不能达到1600万的条件，是不是也就不能被累加呢？比如做1亿6千万零9次加1计算，这9次是不是也就加不上了呢","like_count":3},{"had_liked":false,"id":340274,"user_name":"Null","can_delete":false,"product_type":"c1","uid":1382587,"ip_address":"","ucode":"A7D4DF2A43C7D8","user_header":"https://static001.geekbang.org/account/avatar/00/15/18/bb/9299fab1.jpg","comment_is_top":false,"comment_ctime":1648713536,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10238648128","product_id":100026001,"comment_content":"其实kahan summation其实就是如果本次加会发生大数吃小数，那么留着跟下次的一起加，直到不会被吃掉，就加上了。积少成多，1你把我吃了，等我累加到一定数，两者的“指数差”没有那么大了，看你还敢吃我不。","like_count":2},{"had_liked":false,"id":148222,"user_name":"supermouse","can_delete":false,"product_type":"c1","uid":1321860,"ip_address":"","ucode":"88072D5F881827","user_header":"https://static001.geekbang.org/account/avatar/00/14/2b/84/07f0c0d6.jpg","comment_is_top":false,"comment_ctime":1572960698,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10162895290","product_id":100026001,"comment_content":"老师，我想问一个问题，为什么19000000.0f+1.0f=19000000.0f，而19000002.0f+1.0f=19000004.0f？（数字后面跟个f代表这个数是float类型）<br>19000000.0f+1.0f=19000000.0f 我能理解，因为大数吃小数，在对阶的时候 1.0f 的有效数位右移了 24 位导致精度损失，但是 19000002.0f+1.0f=19000004.0f 的结果为什么不是 19000002.0f 而是 19000004.0f呢？","like_count":2,"discussions":[{"author":{"id":2734785,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ba/c1/96650f0a.jpg","nickname":"csa","note":"","ucode":"7D03D34E269FCF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573048,"discussion_content":"我也想知道","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653181731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476664,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/38/eb59a9ad.jpg","nickname":"ChickenMan","note":"","ucode":"CE33126104F2DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245238,"discussion_content":"亲，你后边有 理解了吗  我也有这样的疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587653744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146257,"user_name":"小广","can_delete":false,"product_type":"c1","uid":1263294,"ip_address":"","ucode":"9738E8DCEF9E3C","user_header":"https://static001.geekbang.org/account/avatar/00/13/46/be/d3040f9e.jpg","comment_is_top":false,"comment_ctime":1572484411,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10162419003","product_id":100026001,"comment_content":"吴老师好，既然9.1按浮点数合适存储起来的时候，精度已经损失了，那为什么在程序里面定义了一个变量的值为9.1后再打印结果，它还是显示9.1，而不是那个在浮点数格式中存储的不精确的的小数位很长的数呢？","like_count":2,"discussions":[{"author":{"id":1810189,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ZHw73tgCqGKhvticUWGRz4icgicu4hFWfKtacoFJeItH7maNuNUmjnEgDTJvOibwUWgGV0p6guNPibMVWDV4BUmEmlA/132","nickname":"Ethan","note":"","ucode":"75F613D58909DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287191,"discussion_content":"吴老师，妙啊","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1593397753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140088,"user_name":"Deecyn","can_delete":false,"product_type":"c1","uid":1187386,"ip_address":"","ucode":"F482C17B631B82","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/3a/eaf76c1c.jpg","comment_is_top":false,"comment_ctime":1570805033,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10160739625","product_id":100026001,"comment_content":"老师你好，<br><br>对于 Kahan Summation 算法的这段 Java 代码：<br><br>public class KahanSummation {<br>  public static void main(String[] args) {<br>    float sum = 0.0f;<br>    float c = 0.0f;<br>    for (int i = 0; i &lt; 20000000; i++) {<br>    \tfloat x = 1.0f;<br>    \tfloat y = x - c;<br>    \tfloat t = sum + y;<br>    \tc = (t-sum)-y;<br>    \tsum = t;    \t<br>    }<br>    System.out.println(&quot;sum is &quot; + sum);   <br>  }\t<br>}<br><br>当我把 i 改成循环到 2 亿左右的数，如 199999998、200000004，结果就会丢失精度，累加和总会是 2 亿，请问这是什么问题呢？","like_count":2,"discussions":[{"author":{"id":1299763,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d5/33/d79fae5c.jpg","nickname":"Hommin","note":"","ucode":"C020CA5DE785DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55730,"discussion_content":"Kahan Summation算法实际上并不会完全精确，他只是每次把丢失的精度累计起来。比如：+1后的结果和原结果相同，说明丢失了，那么+1被累积；下次就会尝试+2，再不行+3，直到能加起来为止（很可能出现加多了的情况，这时候累计的值就为负数）。而这个过程中如果停止累积，就会有精度丢失。但这种丢失对整体而言是可以接受的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574392787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126417,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1566385007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10156319599","product_id":100026001,"comment_content":"过去的两个月工作有点忙，现在有时间回来开始补笔记啦：<br>day16 笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;11321590.html","like_count":2},{"had_liked":false,"id":104361,"user_name":"Knight²º¹⁸","can_delete":false,"product_type":"c1","uid":1089754,"ip_address":"","ucode":"BDCB830B6A730F","user_header":"https://static001.geekbang.org/account/avatar/00/10/a0/da/4f50f1b2.jpg","comment_is_top":false,"comment_ctime":1560737253,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10150671845","product_id":100026001,"comment_content":"国内Wikipedia访问不了啊，不是每个人都有vpn吧","like_count":2,"discussions":[{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276175,"discussion_content":"可以在chrome下载一个local cdn的插件，至于chrome怎么进商店百度很多教程（谷歌访问助手）","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590833982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292551,"user_name":"dog_brother","can_delete":false,"product_type":"c1","uid":1619597,"ip_address":"","ucode":"9F64D3C6D815FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U9LYlZEx2HrpsELeh3KMlqFiaKpSAaaZeBttXRAVvDXUgcufpqJ60bJWGYGNpT7752w/132","comment_is_top":false,"comment_ctime":1620875945,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5915843241","product_id":100026001,"comment_content":"另外还有一个技巧，如果数量较多的浮点数相加，可以先加小数，再加大数，减少误差。","like_count":1},{"had_liked":false,"id":104255,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1560698628,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5855665924","product_id":100026001,"comment_content":"老师好!我能说我没看懂么。。。f怎么算知道了e那个3怎么来的。9.1那个。。","like_count":1,"discussions":[{"author":{"id":1076950,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6e/d6/af4f49db.jpg","nickname":"小马哥Mar","note":"","ucode":"101C2B2DC67940","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2311,"discussion_content":"我理解其实和十进制一样，十进制1001可以表示成 1.01x10e3，二进制也同理可以表示成1.01x2e3","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1563454154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99919,"user_name":"senekis","can_delete":false,"product_type":"c1","uid":1446025,"ip_address":"","ucode":"CD88681F0278FD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erTlRJ6skf7iawAeqNfIT1PPgjD7swUdRIRkX1iczjj97GNrxnsnn3QuOhkVbCLgFYAm7sMZficNTSbA/132","comment_is_top":false,"comment_ctime":1559358446,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"5854325742","product_id":100026001,"comment_content":"老师，我使用了IEEE754的网站，输入浮点数9.1，得到结果:<br>010000010 0010 0011001100110011 010<br>而按照老师的算法, 得到的结果是：<br>010000010 0010 0011001100110011 001<br>差了一位，这是为什么呢？是使用方法不正确吗？<br>推算了N次也没有对上，求老师给答个疑～！谢谢老师！","like_count":1,"discussions":[{"author":{"id":1488280,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b5/98/ffaf2aca.jpg","nickname":"Ronnyz","note":"","ucode":"9F34527B1D343D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58009,"discussion_content":"我想你应该是在Decimal representation框中输入的9.1，这是一个舍入的值，真实值在Value actually stored in float框中为 9.1000003814697265625","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574649027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266043,"avatar":"https://static001.geekbang.org/account/avatar/00/13/51/7b/191a2112.jpg","nickname":"愤怒的虾干","note":"","ucode":"CEBD1B2BE7BCEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56406,"discussion_content":"感觉会跟浮点数的向偶数舍入有关，由于截取23位，最低有效位是1，则进一位，是的最低位是0。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574478323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1329995,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/4b/97926cba.jpg","nickname":"Luciano李鑫","note":"","ucode":"5FBE5F86FD5B2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38198,"discussion_content":"请问同学 这个问题找到答案了嘛 我这里也没搞明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571742606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358049,"user_name":"woodie","can_delete":false,"product_type":"c1","uid":2004783,"ip_address":"北京","ucode":"1C2925AD8191DA","user_header":"","comment_is_top":false,"comment_ctime":1663848032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663848032","product_id":100026001,"comment_content":"总结：浮点数的存储：按EEEF的标准，float32=1位符号+8位指数(127之前表示负指数，大于127表示正指数)+23位有效位<br>指数相加：先对其指数，再相加","like_count":0},{"had_liked":false,"id":335528,"user_name":"机车","can_delete":false,"product_type":"c1","uid":1881786,"ip_address":"","ucode":"CD32A645AE310A","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b6/ba/f76d996b.jpg","comment_is_top":false,"comment_ctime":1645576509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645576509","product_id":100026001,"comment_content":"0.5的指数位怎么算的是-1呢？","like_count":0},{"had_liked":false,"id":317432,"user_name":"Geek_f2f3c7","can_delete":false,"product_type":"c1","uid":1436184,"ip_address":"","ucode":"96C65202E9D12C","user_header":"https://static001.geekbang.org/account/avatar/00/15/ea/18/80c24d33.jpg","comment_is_top":false,"comment_ctime":1634796245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634796245","product_id":100026001,"comment_content":"老师，您给提供的IEEE-754 浮点转换器这个转换有问题我输入0.32的话转换的不对","like_count":0},{"had_liked":false,"id":316317,"user_name":"艾格北峰","can_delete":false,"product_type":"c1","uid":1346021,"ip_address":"","ucode":"81B3C1426C431A","user_header":"https://static001.geekbang.org/account/avatar/00/14/89/e5/2219d26f.jpg","comment_is_top":false,"comment_ctime":1634267728,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1634267728","product_id":100026001,"comment_content":"float浮点数类型真的不准吗？我是做数值计算的，我有点害怕，我之前用计算机算的结果到底对不对？","like_count":0},{"had_liked":false,"id":305940,"user_name":"Dan","can_delete":false,"product_type":"c1","uid":2652241,"ip_address":"","ucode":"ABD9F2F0BC2002","user_header":"https://static001.geekbang.org/account/avatar/00/28/78/51/43c48673.jpg","comment_is_top":false,"comment_ctime":1628239352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628239352","product_id":100026001,"comment_content":"太棒了","like_count":0},{"had_liked":false,"id":299335,"user_name":"千锤百炼的大器","can_delete":false,"product_type":"c1","uid":1528160,"ip_address":"","ucode":"4DE6083592C80D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/vopk2JZ3QqRytUbiaiacj1yIytM4VTvE9xxaLnv5ozYug77KcC2gDzgEcd0Gu9L871ibfErFGC725Ria14xXqUdYibg/132","comment_is_top":false,"comment_ctime":1624584021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624584021","product_id":100026001,"comment_content":"之前一直知道有精度问题，但局限在表示的精度上，对32位来说，2个float加带来的较小值精度丢失问题没有考虑到，收获很大","like_count":0},{"had_liked":false,"id":292550,"user_name":"dog_brother","can_delete":false,"product_type":"c1","uid":1619597,"ip_address":"","ucode":"9F64D3C6D815FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U9LYlZEx2HrpsELeh3KMlqFiaKpSAaaZeBttXRAVvDXUgcufpqJ60bJWGYGNpT7752w/132","comment_is_top":false,"comment_ctime":1620875845,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1620875845","product_id":100026001,"comment_content":"这节收获好大！kahan算法，虽然简单，但是有效！","like_count":0},{"had_liked":false,"id":277118,"user_name":"抱小星","can_delete":false,"product_type":"c1","uid":1504652,"ip_address":"","ucode":"BA7B0DAFDA4AF5","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","comment_is_top":false,"comment_ctime":1612264329,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1612264329","product_id":100026001,"comment_content":"64位的话，由于指数位为11位，数字差小于2的53次方可以不丢失精度","like_count":0},{"had_liked":false,"id":277102,"user_name":"抱小星","can_delete":false,"product_type":"c1","uid":1504652,"ip_address":"","ucode":"BA7B0DAFDA4AF5","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","comment_is_top":false,"comment_ctime":1612259861,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1612259861","product_id":100026001,"comment_content":"23+32+1=56<br>在2^56之外会丢失精度，所以double精度更高","like_count":0},{"had_liked":false,"id":274433,"user_name":"xavier","can_delete":false,"product_type":"c1","uid":1243128,"ip_address":"","ucode":"2F7918EA37ED9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/f8/3c0a6854.jpg","comment_is_top":false,"comment_ctime":1611020998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611020998","product_id":100026001,"comment_content":"感谢老师，终于搞清楚了浮点数的二进制表示方法。","like_count":0},{"had_liked":false,"id":257799,"user_name":"余巍","can_delete":false,"product_type":"c1","uid":1995082,"ip_address":"","ucode":"B0819C42A82371","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI0eGJygV4lh6PJuotKrz1jsZcOdNiaHnUC3y5A2O3yudUQLkzOE8758icDoXlvgpytQ50ibSIc9nJmg/132","comment_is_top":false,"comment_ctime":1604133011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604133011","product_id":100026001,"comment_content":"kahan summartion算法：https:&#47;&#47;blog.csdn.net&#47;demon24&#47;article&#47;details&#47;8835028","like_count":0},{"had_liked":false,"id":255605,"user_name":"风","can_delete":false,"product_type":"c1","uid":1077538,"ip_address":"","ucode":"104638BF19B048","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/22/b8c596b6.jpg","comment_is_top":false,"comment_ctime":1603378043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603378043","product_id":100026001,"comment_content":"<br>public class KahanSummation {<br>  public static void main(String[] args) {<br>    float sum = 0.0f;<br>    float c = 0.0f;<br>    for (int i = 0; i &lt; 20000000; i++) {<br>      float x = 1.0f;<br>      float y = x - c;<br>      float t = sum + y;<br>      c = (t-sum)-y;<br>      sum = t;      <br>    }<br>    System.out.println(&quot;sum is &quot; + sum);   <br>  }  <br>}<br>老师这里最后把t赋值给sum，c = (t-sum)-y;操作后会对t的值发生影响吗？","like_count":0},{"had_liked":false,"id":251038,"user_name":"飞鱼","can_delete":false,"product_type":"c1","uid":1693964,"ip_address":"","ucode":"7770AAB0E46A90","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/0c/f9edbb68.jpg","comment_is_top":false,"comment_ctime":1601341951,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1601341951","product_id":100026001,"comment_content":"“32 位浮点数的有效位长度一共只有 23 位，如果两个数的指数位差出 23 位，较小的数右移 24 位之后，所有的有效位就都丢失了。“<br><br>老师，请问这里 较小的数为什么是右移24位才丢失所有有效位，不是右移23位就全部丢失了吗？<br><br>","like_count":0,"discussions":[{"author":{"id":1702112,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f8/e0/d6e3cc8f.jpg","nickname":"qgaye","note":"","ucode":"E817609D4ED2D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323417,"discussion_content":"因为最前面还有个默认省略的1啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604931876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251009,"user_name":"飞鱼","can_delete":false,"product_type":"c1","uid":1693964,"ip_address":"","ucode":"7770AAB0E46A90","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/0c/f9edbb68.jpg","comment_is_top":false,"comment_ctime":1601305271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601305271","product_id":100026001,"comment_content":"“010000010 0010 0011001100110011 001<br>如果我们再把这个浮点数表示换算成十进制， 实际准确的值是 9.09999942779541015625。”<br><br>老师您好，请问010000010 0010 0011001100110011 001 这样的二进制表示，怎么区分是浮点数还是整数呢？","like_count":0},{"had_liked":false,"id":206296,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1586835934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586835934","product_id":100026001,"comment_content":"再次学习第二遍时会更加明白一些选择的重要性，2000万差1块钱的事情我记得曾经有新闻报道过这个案例，故而明白原理在设计和选择时会更加谨慎和注意。","like_count":0},{"had_liked":false,"id":204721,"user_name":"WENMURAN","can_delete":false,"product_type":"c1","uid":1915404,"ip_address":"","ucode":"5D1CE8B41937C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXNhbTULKiakib8lYXrvGF2zPwfedooBzC2EtSv1nt1MwV1KUvTkcJrvCBFvcdwJicnr3OEXnk9GUCg/132","comment_is_top":false,"comment_ctime":1586445145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586445145","product_id":100026001,"comment_content":"浮点数和定点数<br>      浮点数的近似值是怎么计算出来的，比如9.1，首先变成一个二进制，整数部分的9变成二进制是1001，二进制小数转十进制，是把小数点后的每一位表示成对应的2的-N次方，十进制转二进制，乘以2，结果超过1，记下1，并将结果减去1进一步循环操作。0.1转成二进制就是0.000110011....所以9.1就是1001.000110011...，用科学计数法表示，小数点左移三位变成1.001000110011*2**3，有效位最多是23位，指数位有正有负，所以要加127的偏移量，变成130，对应的二进制位就是10000010，然后合在一起就是最终的二进制数，再把这个二进制数转换成十进制就是9.099999427....","like_count":0},{"had_liked":false,"id":185310,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1583558851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583558851","product_id":100026001,"comment_content":"1.2+0.12 在什么编程语言里都是不准确的","like_count":0},{"had_liked":false,"id":183646,"user_name":"北风一叶","can_delete":false,"product_type":"c1","uid":1087302,"ip_address":"","ucode":"30310E66341D2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/46/fe1f21d8.jpg","comment_is_top":false,"comment_ctime":1583106203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583106203","product_id":100026001,"comment_content":"10进制小数转为二进制后再转为十进制数，会有不一致的现象，问题就在于10进制小数转成二进制与10进制整数转换成二进制并不完全一致，可能会发生无限循环的问题，比如0.1转换为二进制，而这个就是二进制小数还原后为什么与原值不一致的原因。为什么浮点数相加减会有精度上的损失，核心的原因就在于相加减时，需要将指数位对齐，为了对齐就会发生位移现象，而这就会导致一些值被丢弃。","like_count":0},{"had_liked":false,"id":144051,"user_name":"布丁国王","can_delete":false,"product_type":"c1","uid":1174147,"ip_address":"","ucode":"027584D6C66C31","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/83/37a9bfd9.jpg","comment_is_top":false,"comment_ctime":1571833756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571833756","product_id":100026001,"comment_content":"010000010 0010 0011001100110011 001 这个二进制转十进制难道不是1091672473吗？？？请问9.09999942779541015625这个数是怎么来的啊？？？","like_count":0},{"had_liked":false,"id":133748,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1568645378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568645378","product_id":100026001,"comment_content":"1 因为浮点书在计算集中的二进制表示形式，所以在进行浮点数运算的时候，存在精度丢失的问题，为解决这个问题，可以使用软件层面的 kahan summation 算法。就是每次运算的时候，用先取到丢失的精度（通过减法），然把丢失的精度加到总和上去。","like_count":0},{"had_liked":false,"id":121116,"user_name":"小先生","can_delete":false,"product_type":"c1","uid":1055214,"ip_address":"","ucode":"E5F2052E0323C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","comment_is_top":false,"comment_ctime":1565060686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565060686","product_id":100026001,"comment_content":"请教，为什么 1.3 + 1.6 就不会是近似数？","like_count":0},{"had_liked":false,"id":120171,"user_name":"蒋旺Foo","can_delete":false,"product_type":"c1","uid":1265741,"ip_address":"","ucode":"4325AB9674975C","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/4d/392f969b.jpg","comment_is_top":false,"comment_ctime":1564802825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564802825","product_id":100026001,"comment_content":"Kahan summation 最后一次相加的精度一定会有损失。","like_count":0},{"had_liked":false,"id":115494,"user_name":"~~","can_delete":false,"product_type":"c1","uid":1440024,"ip_address":"","ucode":"4E316822CD8382","user_header":"https://static001.geekbang.org/account/avatar/00/15/f9/18/653a2daa.jpg","comment_is_top":false,"comment_ctime":1563605497,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563605497","product_id":100026001,"comment_content":"文浩老师你好,通过你的课程学到了很多东西,首先要说一句感谢你!<br>关于本节课程我有一个问题,我试着整理了一下思路:<br>    for (int i = 0; i &lt; 20000000; i++) {\t<br>    \tfloat x = 1.0f;\t\t\t\t\t\t&#47;&#47; 待加数x为1.0f, 加2000w次<br>    \tfloat y = x - c;\t\t\t\t\t&#47;&#47; 计算损失的精度, 损失精度的下一次计算 y = x + y(上一次损失的精度)<br>    \tfloat t = sum + y;\t\t\t\t\t&#47;&#47; t 就是我们需要的总和, t = sum + y(上一次损失的精度+这一次要加的1)<br>    \tc = (t-sum)-y;\t\t\t\t\t\t&#47;&#47; c = ((sum + y) - sum) - y <br>    \tsum = t;    \t\t\t\t\t\t&#47;&#47;当精度没有损失的时候, c=0;开始损失精度的时候, c=-y<br>    }<br>但是我有一个疑问:<br>虽然我们通过 y 把损失的精度记录下来了, 但是在执行float t = sum + y;\t的时候, 这个精度不还是被抛弃了嘛, 这个和直接 sum + x有什么区别呢?","like_count":0,"discussions":[{"author":{"id":2912103,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6f/67/112afe2b.jpg","nickname":"沐白木兮","note":"","ucode":"B8A651242475D5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552574,"discussion_content":"x每次循环都是1.0f，而y=x-c，正如你注解的c = ((sum+y) - sum) - y，如果当较大的sum加上一个比较小的y，那么y就会被省略，结果为c = (sum - sum) - y = -y，当在下次循环时y = x - c = x + y，y加上之前被省略的值，逐渐增大。继续循环，直到y已经足够大，sum + y不会将y省略，这时就将之前所有被省略的y都加到sum上了。这是我的理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645515915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107963,"user_name":"Geek_7461ea","can_delete":false,"product_type":"c1","uid":1510246,"ip_address":"","ucode":"3E9365CBC17506","user_header":"https://wx.qlogo.cn/mmopen/vi_32/9P8RlHDhxIc1dCRdQfBHxAMic0lnMSvJ5Sia82JaVwuMFz9qZ5jEXkr86m9X9pEku6gF5p1jIQt9PqWdQjJy1r7w/132","comment_is_top":false,"comment_ctime":1561641412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561641412","product_id":100026001,"comment_content":"老师你好，为什么1.0010001100110011…x2的3次方这里，只关心指数位3，而把整数位的1丢弃了呢？","like_count":0},{"had_liked":false,"id":107830,"user_name":"三个石头","can_delete":false,"product_type":"c1","uid":1110384,"ip_address":"","ucode":"A863A416D65217","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/70/a64d9498.jpg","comment_is_top":false,"comment_ctime":1561618764,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1561618764","product_id":100026001,"comment_content":"那为啥0.3+04=0.7是准确的，按照老师的说法，0.3转化为浮点数精度出现丢失","like_count":0,"discussions":[{"author":{"id":1055214,"avatar":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","nickname":"小先生","note":"","ucode":"E5F2052E0323C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4015,"discussion_content":"请问你有答案了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565060750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1238355,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/53/83146bd7.jpg","nickname":"凯","note":"","ucode":"218482D0347EC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1055214,"avatar":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","nickname":"小先生","note":"","ucode":"E5F2052E0323C0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7489,"discussion_content":"很简单，都是近似计算，那么有可能丢失的精度在计算的时候被近似回来了，就好比四舍五入是一样的，丢失是距离准确值很远的时候才会丢失，如果很近的时候，就会被近似回来了呢，仔细想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567517499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4015,"ip_address":""},"score":7489,"extra":""}]}]},{"had_liked":false,"id":105141,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1560928739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560928739","product_id":100026001,"comment_content":"写得挺好的 不是计算机专业的也对计算机了解了很多","like_count":0},{"had_liked":false,"id":104526,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1560772310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560772310","product_id":100026001,"comment_content":"64位浮点数，1位符号位，11位指数位，52位有效数位，当两个数的指数位相差2^53以上，较小的数在加法中就会完全丢失","like_count":0},{"had_liked":false,"id":104126,"user_name":"Geekzed","can_delete":false,"product_type":"c1","uid":1548002,"ip_address":"","ucode":"744F0016AE5543","user_header":"","comment_is_top":false,"comment_ctime":1560660335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560660335","product_id":100026001,"comment_content":"请问有效位1.f 怎么右移表示0.XXXX呢  那个开头的1不是不在23位里 默认总是存在的吗 还是说会在别的位上表示这个1 是否存在","like_count":0},{"had_liked":false,"id":102979,"user_name":"任雪龙","can_delete":false,"product_type":"c1","uid":1126708,"ip_address":"","ucode":"E0D5F4DDB729D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/34/ba1c8fc7.jpg","comment_is_top":false,"comment_ctime":1560341501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560341501","product_id":100026001,"comment_content":"老师，例子中二进制的浮点数 010000010 0010 001100110011001 通过什么方法转化为十进制 ？","like_count":0},{"had_liked":false,"id":102499,"user_name":"haer","can_delete":false,"product_type":"c1","uid":1146728,"ip_address":"","ucode":"0216267E645431","user_header":"","comment_is_top":false,"comment_ctime":1560237975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560237975","product_id":100026001,"comment_content":"“一步”的JS实验和老师不一样，是因为JS的数值是64位浮点数，而老师用的Java的float是32位浮点数","like_count":0},{"had_liked":false,"id":100846,"user_name":"Ant","can_delete":false,"product_type":"c1","uid":1079563,"ip_address":"","ucode":"07E6374F91F61E","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/0b/4346a253.jpg","comment_is_top":false,"comment_ctime":1559652380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559652380","product_id":100026001,"comment_content":"打卡 2019年06月04日","like_count":0},{"had_liked":false,"id":100380,"user_name":"任雪龙","can_delete":false,"product_type":"c1","uid":1126708,"ip_address":"","ucode":"E0D5F4DDB729D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/34/ba1c8fc7.jpg","comment_is_top":false,"comment_ctime":1559542894,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1559542894","product_id":100026001,"comment_content":"9.1 的二进制表示 0 10000010 0010 001100110011001 是如何转化为十进制的 9.09999942779541015625 的 ？f 为 0010 001100110011001 ，e 为 3，计算应该是 1.0010 001100110011001 * 8 = 8.00800088 呀，是我那里计算有问题吗","like_count":0,"discussions":[{"author":{"id":1330509,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4d/4d/58c2ffa1.jpg","nickname":"smartjia","note":"","ucode":"704BCDE56251D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43108,"discussion_content":"你把进制混用了，e 为 3，所以小数点右移三位，也就是 1001.0001100110011001","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572856402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100275,"user_name":"古夜","can_delete":false,"product_type":"c1","uid":1341612,"ip_address":"","ucode":"0A82D3CFCEDF07","user_header":"https://static001.geekbang.org/account/avatar/00/14/78/ac/e5e6e7f3.jpg","comment_is_top":false,"comment_ctime":1559520780,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1559520780","product_id":100026001,"comment_content":"请问，软硬件接口里第3章第一节118页里说的7右下角10是什么意思呢？","like_count":0,"discussions":[{"author":{"id":1215219,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8a/f3/7c89d00e.jpg","nickname":"Presley","note":"","ucode":"D8F125835F4903","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52121,"discussion_content":"表示10进制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573997550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100260,"user_name":"Benjamin","can_delete":false,"product_type":"c1","uid":1082014,"ip_address":"","ucode":"7837F6E47546E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/9e/bb6f7229.jpg","comment_is_top":false,"comment_ctime":1559518647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559518647","product_id":100026001,"comment_content":"老师问个问题，浮点数表示中的有效位数为1.f中的f。在加法的示例中为了让0.125的指数为-1，有效位变成了0.01，并不是1.f的形式，这种情况下二进制是怎么表示的？电路是怎么设计的？","like_count":0},{"had_liked":false,"id":99825,"user_name":"喜欢吃鱼","can_delete":false,"product_type":"c1","uid":1250205,"ip_address":"","ucode":"02F41572F53E3C","user_header":"https://static001.geekbang.org/account/avatar/00/13/13/9d/d91dc762.jpg","comment_is_top":false,"comment_ctime":1559311959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559311959","product_id":100026001,"comment_content":"老师，您能解释下Kahan算法for循环中y,c着两个变量的意思吗？<br>我想的是t用来保存累加和，c用来保存此次累加过程中被损失的精度，但是y=x-c这里不太了解，望老师解答一下。","like_count":0},{"had_liked":false,"id":99633,"user_name":"旺旺","can_delete":false,"product_type":"c1","uid":1213887,"ip_address":"","ucode":"161B267F67EBCA","user_header":"https://static001.geekbang.org/account/avatar/00/12/85/bf/5c5e86bb.jpg","comment_is_top":false,"comment_ctime":1559270865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559270865","product_id":100026001,"comment_content":"Kahan Summation<br><br>sum = 0.0<br>c = 0.0<br>for ------------------<br>    y = x - c<br>    t = s + y<br>    c = (t - s) - y<br>    s = t ","like_count":0},{"had_liked":false,"id":99624,"user_name":"古夜","can_delete":false,"product_type":"c1","uid":1341612,"ip_address":"","ucode":"0A82D3CFCEDF07","user_header":"https://static001.geekbang.org/account/avatar/00/14/78/ac/e5e6e7f3.jpg","comment_is_top":false,"comment_ctime":1559268014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559268014","product_id":100026001,"comment_content":"这两章得反复看","like_count":0},{"had_liked":false,"id":99617,"user_name":"鱼向北游","can_delete":false,"product_type":"c1","uid":1439908,"ip_address":"","ucode":"580EC7DCE57E9A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IPdZZXuHVMibwfZWmm7NiawzeEFGsaRoWjhuN99iaoj5amcRkiaOePo6rH1KJ3jictmNlic4OibkF4I20vOGfwDqcBxfA/132","comment_is_top":false,"comment_ctime":1559266768,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559266768","product_id":100026001,"comment_content":"double按规范是符号位1位 阶码11位 尾码52位 精度差2的53次方就会有问题了<br>long double就和各平台差异相关了","like_count":0},{"had_liked":false,"id":99586,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1559263813,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559263813","product_id":100026001,"comment_content":"请教64位的浮点数还是一位符号为，8位指数吗？另外浮点数减法是转换成加法进行运算吗？那符号位怎么处理?","like_count":0}]}