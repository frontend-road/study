{"id":120388,"title":"04 | 语法分析（二）：解决二元表达式中的难点","content":"<p>在“<a href=\"https://time.geekbang.org/column/article/119891\">03 | 语法分析（一）：纯手工打造公式计算器</a>”中，我们已经初步实现了一个公式计算器。而且你还在这个过程中，直观地获得了写语法分析程序的体验，在一定程度上破除了对语法分析算法的神秘感。</p><p>当然了，你也遇到了一些问题，比如怎么消除左递归，怎么确保正确的优先级和结合性。所以本节课的主要目的就是解决这几个问题，让你掌握像算术运算这样的二元表达式（Binary Expression）。</p><p>不过在课程开始之前，我想先带你简单地温习一下什么是左递归（Left Recursive）、优先级（Priority）和结合性（Associativity）。</p><p>在二元表达式的语法规则中，如果产生式的第一个元素是它自身，那么程序就会无限地递归下去，这种情况就叫做<strong>左递归。</strong>比如加法表达式的产生式“加法表达式 + 乘法表达式”，就是左递归的。而优先级和结合性则是计算机语言中与表达式有关的核心概念。它们都涉及了语法规则的设计问题。</p><p>我们要想深入探讨语法规则设计，需要像在词法分析环节一样，先了解如何用形式化的方法表达语法规则。“工欲善其事必先利其器”。熟练地阅读和书写语法规则，是我们在语法分析环节需要掌握的一项基本功。</p><p>所以本节课我会先带你了解如何写语法规则，然后在此基础上，带你解决上面提到的三个问题。</p><!-- [[[read_end]]] --><h2>书写语法规则，并进行推导</h2><p>我们已经知道，语法规则是由上下文无关文法表示的，而上下文无关文法是由一组替换规则（又叫产生式）组成的，比如算术表达式的文法规则可以表达成下面这种形式：</p><pre><code>add -&gt; mul | add + mul\nmul -&gt; pri | mul * pri\npri -&gt; Id | Num | (add) \n</code></pre><p>按照上面的产生式，add可以替换成mul，或者add + mul。这样的替换过程又叫做“推导”。以“2+3*5” 和 “2+3+4”这两个算术表达式为例，这两个算术表达式的推导过程分别如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/81/e9aa620c009aaae5505cf568a54de381.jpg?wh=1142*511\" alt=\"\"></p><p>通过上图的推导过程，你可以清楚地看到这两个表达式是怎样生成的。而分析过程中形成的这棵树，其实就是AST。只不过我们手写的算法在生成AST的时候，通常会做一些简化，省略掉中间一些不必要的节点。比如，“add-add-mul-pri-Num”这一条分支，实际手写时会被简化成“add-Num”。其实，简化AST也是优化编译过程的一种手段，如果不做简化，呈现的效果就是上图的样子。</p><p>那么，上图中两颗树的叶子节点有哪些呢？Num、+和*都是终结符，终结符都是词法分析中产生的Token。而那些非叶子节点，就是非终结符。文法的推导过程，就是把非终结符不断替换的过程，让最后的结果没有非终结符，只有终结符。</p><p>而在实际应用中，语法规则经常写成下面这种形式：</p><pre><code>add ::= mul | add + mul\nmul ::= pri | mul * pri\npri ::= Id | Num | (add) \n</code></pre><p>这种写法叫做<strong>“巴科斯范式”，</strong>简称BNF。Antlr和Yacc这两个工具都用这种写法。为了简化书写，我有时会在课程中把“::=”简化成一个冒号。你看到的时候，知道是什么意思就可以了。</p><p>你有时还会听到一个术语，叫做<strong>扩展巴科斯范式(EBNF)。</strong>它跟普通的BNF表达式最大的区别，就是里面会用到类似正则表达式的一些写法。比如下面这个规则中运用了*号，来表示这个部分可以重复0到多次：</p><pre><code>add -&gt; mul (+ mul)*\n</code></pre><p>其实这种写法跟标准的BNF写法是等价的，但是更简洁。为什么是等价的呢？因为一个项多次重复，就等价于通过递归来推导。从这里我们还可以得到一个推论：就是上下文无关文法包含了正则文法，比正则文法能做更多的事情。</p><h2>确保正确的优先级</h2><p>掌握了语法规则的写法之后，我们来看看如何用语法规则来保证表达式的优先级。刚刚，我们由加法规则推导到乘法规则，这种方式保证了AST中的乘法节点一定会在加法节点的下层，也就保证了乘法计算优先于加法计算。</p><p>听到这儿，你一定会想到，我们应该把关系运算（&gt;、=、&lt;）放在加法的上层，逻辑运算（and、or）放在关系运算的上层。的确如此，我们试着将它写出来：</p><pre><code>exp -&gt; or | or = exp   \nor -&gt; and | or || and\nand -&gt; equal | and &amp;&amp; equal\nequal -&gt; rel | equal == rel | equal != rel\nrel -&gt; add | rel &gt; add | rel &lt; add | rel &gt;= add | rel &lt;= add\nadd -&gt; mul | add + mul | add - mul \nmul -&gt; pri | mul * pri | mul / pri \n</code></pre><p>这里表达的优先级从低到高是：赋值运算、逻辑运算（or）、逻辑运算（and）、相等比较（equal）、大小比较（rel）、加法运算（add）、乘法运算（mul）和基础表达式（pri）。</p><p>实际语言中还有更多不同的优先级，比如位运算等。而且优先级是能够改变的，比如我们通常会在语法里通过括号来改变计算的优先级。不过这怎么表达成语法规则呢？</p><p>其实，我们在最低层，也就是优先级最高的基础表达式（pri）这里，用括号把表达式包裹起来，递归地引用表达式就可以了。这样的话，只要在解析表达式的时候遇到括号，那么就知道这个是最优先的。这样的话就实现了优先级的改变：</p><pre><code>pri -&gt; Id | Literal | (exp)\n</code></pre><p>了解了这些内容之后，到目前为止，你已经会写整套的表达式规则了，也能让公式计算器支持这些规则了。另外，在使用一门语言的时候，如果你不清楚各种运算确切的优先级，除了查阅常规的资料，你还多了一项新技能，就是阅读这门语言的语法规则文件，这些规则可能就是用BNF或EBNF的写法书写的。</p><p>弄明白优先级的问题以后，我们再来讨论一下结合性这个问题。</p><h2>确保正确的结合性</h2><p>在上一讲中，我针对算术表达式写的第二个文法是错的，因为它的计算顺序是错的。“2+3+4”这个算术表达式，先计算了“3+4”然后才和“2”相加，计算顺序从右到左，正确的应该是从左往右才对。</p><p><strong>这就是运算符的结合性问题。</strong>什么是结合性呢？同样优先级的运算符是从左到右计算还是从右到左计算叫做结合性。我们常见的加减乘除等算术运算是左结合的，“.”符号也是左结合的。</p><p>比如“rectangle.center.x” 是先获得长方形（rectangle）的中心点（center），再获得这个点的x坐标。计算顺序是从左向右的。那有没有右结合的例子呢？肯定是有的。赋值运算就是典型的右结合的例子，比如“x = y = 10”。</p><p>我们再来回顾一下“2+3+4”计算顺序出错的原因。用之前错误的右递归的文法解析这个表达式形成的简化版本的AST如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/db/16/db287af5a94ac03c6528fb6ed3767116.jpg?wh=1142*518\" alt=\"\"></p><p>根据这个AST做计算会出现计算顺序的错误。不过如果我们将递归项写在左边，就不会出现这种结合性的错误。于是我们得出一个规律：<strong>对于左结合的运算符，递归项要放在左边；而右结合的运算符，递归项放在右边。</strong></p><p>所以你能看到，我们在写加法表达式的规则的时候，是这样写的：</p><pre><code>add -&gt; mul | add + mul   \n</code></pre><p>这是我们犯错之后所学到的知识。那么问题来了，大多数二元运算都是左结合的，那岂不是都要面临左递归问题？不用担心，我们可以通过改写左递归的文法，解决这个问题。</p><h2>消除左递归</h2><p>我提到过左递归的情况，也指出递归下降算法不能处理左递归。这里我要补充一点，并不是所有的算法都不能处理左递归，对于另外一些算法，左递归是没有问题的，比如LR算法。</p><p>消除左递归，用一个标准的方法，就能够把左递归文法改写成非左递归的文法。以加法表达式规则为例，原来的文法是“add -&gt; add + mul”，现在我们改写成：</p><pre><code>add -&gt; mul add'\nadd' -&gt; + mul add' | ε\n</code></pre><p>文法中，ε（读作epsilon）是空集的意思。接下来，我们用刚刚改写的规则再次推导一下 “2+3+4”这个表达式，得到了下图中左边的结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/50/22/50a501fc747b23aa0dca319fa87e6622.jpg?wh=2598*1358\" alt=\"\"></p><p>左边的分析树是推导后的结果。问题是，由于add’的规则是右递归的，如果用标准的递归下降算法，我们会跟上一讲一样，又会出现运算符结合性的错误。我们期待的AST是右边的那棵，它的结合性才是正确的。那么有没有解决办法呢？</p><p>答案是有的。我们仔细分析一下上面语法规则的推导过程。只有第一步是按照add规则推导，之后都是按照add’规则推导，一直到结束。</p><p>如果用EBNF方式表达，也就是允许用*号和+号表示重复，上面两条规则可以合并成一条：</p><pre><code>add -&gt; mul (+ mul)* \n</code></pre><p>写成这样有什么好处呢？能够优化我们写算法的思路。对于(+ mul)*这部分，我们其实可以写成一个循环，而不是一次次的递归调用。伪代码如下：</p><pre><code>mul();\nwhile(next token is +){\n  mul()\n  createAddNode\n}\n</code></pre><p>我们扩展一下话题。在研究递归函数的时候，有一个概念叫做<strong>尾递归，</strong>尾递归函数的最后一句是递归地调用自身。</p><p>编译程序通常都会把尾递归转化为一个循环语句，使用的原理跟上面的伪代码是一样的。相对于递归调用来说，循环语句对系统资源的开销更低，因此，把尾递归转化为循环语句也是一种编译优化技术。</p><p>好了，我们继续左递归的话题。现在我们知道怎么写这种左递归的算法了，大概是下面的样子：</p><pre><code>private SimpleASTNode additive(TokenReader tokens) throws Exception {\n    SimpleASTNode child1 = multiplicative(tokens);  //应用add规则\n    SimpleASTNode node = child1;\n    if (child1 != null) {\n        while (true) {                              //循环应用add'\n            Token token = tokens.peek();\n            if (token != null &amp;&amp; (token.getType() == TokenType.Plus || token.getType() == TokenType.Minus)) {\n                token = tokens.read();              //读出加号\n                SimpleASTNode child2 = multiplicative(tokens);  //计算下级节点\n                node = new SimpleASTNode(ASTNodeType.Additive, token.getText());\n                node.addChild(child1);              //注意，新节点在顶层，保证正确的结合性\n                node.addChild(child2);\n                child1 = node;\n            } else {\n                break;\n            }\n        }\n    }\n    return node;\n}\n</code></pre><p>修改完后，再次运行语法分析器分析“2+3+4+5”，会得到正确的AST：</p><pre><code>Programm Calculator\n    AdditiveExp +\n        AdditiveExp +\n            AdditiveExp +\n                IntLiteral 2\n                IntLiteral 3\n            IntLiteral 4\n        IntLiteral 5\n</code></pre><p>这样，我们就把左递归问题解决了。左递归问题是我们用递归下降算法写语法分析器遇到的最大的一只“拦路虎”。解决这只“拦路虎”以后，你的道路将会越来越平坦。</p><h2>课程小结</h2><p>今天我们针对优先级、结合性和左递归这三个问题做了更系统的研究。我来带你梳理一下本节课的重点知识：</p><ul>\n<li>优先级是通过在语法推导中的层次来决定的，优先级越低的，越先尝试推导。</li>\n<li>结合性是跟左递归还是右递归有关的，左递归导致左结合，右递归导致右结合。</li>\n<li>左递归可以通过改写语法规则来避免，而改写后的语法又可以表达成简洁的EBNF格式，从而启发我们用循环代替右递归。</li>\n</ul><p>为了研究和解决这三个问题，我们还特别介绍了语法规则的产生式写法以及BNF、EBNF写法。在后面的课程中我们会不断用到这个技能，还会用工具来生成语法分析器，我们提供给工具的就是书写良好的语法规则。</p><p>到目前为止，你已经闯过了语法分析中比较难的一关。再增加一些其他的语法，你就可以实现出一个简单的脚本语言了！</p><h2>一课一思</h2><p>本节课提到了语法的优先级、结合性。那么，你能否梳理一下你熟悉的语言的运算优先级？你能说出更多的左结合、右结合的例子吗？可以在留言区与大家一起交流。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":179959,"user_name":"blacknhole","can_delete":false,"product_type":"c1","uid":1098286,"ip_address":"","ucode":"271682FFE28F25","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","comment_is_top":false,"comment_ctime":1582127251,"is_pvip":false,"replies":[{"id":"76752","content":"对。总结得很好！描述得很直观。<br>改写左递归的算法，实际上是有公式的。限于篇幅，我没有去陷入这个公式的细节。<br>在编译原理里面还有很多这样的细节。我希望能在后续出的书里都包含到，并且仍然保持容易理解。<br>","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586661320,"ip_address":"","comment_id":179959,"utype":1}],"discussion_count":7,"race_medal":0,"score":"267870099603","product_id":100034101,"comment_content":"产生式add -&gt; add + mul | mul是如何改写成产生式add -&gt; mul add&#39;和add&#39; -&gt; + mul add&#39; | ε的，文中并未交代，评论中有人提出来了这个问题，老师依然没有回答。<br><br>我查阅了“龙书”，找到了答案。我的理解是这样的：<br><br>1，add有两个产生式：①add —&gt; add + mul，②add —&gt; mul。如果只使用①来推导add，那么推导过程无法终结，会一直持续下去，形成add + mul + mul … + mul 这样的序列。因为不会有无限长的表达式，所以，推导过程必然会使用到②，且是在最后一步使用。也即，使用①②推导add后得到的序列最左边为mul。因而，add的产生式可以改写为add —&gt; mul add&#39;。<br><br>2，add&#39;的产生式需要满足+ mul + mul … + mul这样的序列，所以可以写为 add&#39; —&gt; + mul add&#39;。因为序列长度必然有限，所以，需要再加一个产生式以终结add&#39;的推导过程：add&#39; —&gt; ε。","like_count":63,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484462,"discussion_content":"对。总结得很好！描述得很直观。\n改写左递归的算法，实际上是有公式的。限于篇幅，我没有去陷入这个公式的细节。\n在编译原理里面还有很多这样的细节。我希望能在后续出的书里都包含到，并且仍然保持容易理解。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586661320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1059121,"avatar":"https://static001.geekbang.org/account/avatar/00/10/29/31/e85391c0.jpg","nickname":"Charles","note":"","ucode":"230914786D1E62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401215,"discussion_content":"“限于篇幅，我没有去陷入这个公式的细节。\n在编译原理里面还有很多这样的细节。我希望能在后续出的书里都包含到，并且仍然保持容易理解。”很奇怪这个逻辑，明明是有公示的，为什么不列举出来呢？即使不想讲，那么简单交代一下这里的推导是某个公式而不是两句话带出来的，这不难吧，有兴趣的读者可以进一步找资料深入研究深入学习。如果只是为了简化，简化，不仅不容易让人理解，反而容易引起读者学习的误区，让人以为这个推导过程就是这么随意两句话得出来的呢。\n\n我觉得，有些涉及到的概念，公式，定理，技术，该介绍还是要介绍，你不想多讲，但要告诉学生这个东西的存在，学生可以根据自己需要自己下去有选择的学习。\n我觉得，这才是正确地教学方法，而不是给一个阉割版的概念，反而不太容易让人领悟。\n","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1633604630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1924152,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI5jr1KfpLoXcCahBaTWddqWOs5F5Dl7QQf9WbAviagfqouiaPufQ0dTflEYB2Uo7DClR6iauP8fntgA/132","nickname":"Kinsey","note":"","ucode":"F45FF1C21851A3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550117,"discussion_content":"简单易懂！！！明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644390155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1445744,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","nickname":"槑·先生","note":"","ucode":"897F0475592E3A","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539715,"discussion_content":"优秀！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639811160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1501300,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ26xdibLibk37rdrIA3zStsayOo9b0SGiasibNGfic6n2EIJiba1ptZOtWqV797wkszdjDM8aQkz1A2vibw/132","nickname":"jacklovepdf","note":"","ucode":"64CF166C45908B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383462,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626102511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019302,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","nickname":"楊_宵夜","note":"","ucode":"7BA0CADC5F23BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379721,"discussion_content":"很优秀！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624092693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333657,"discussion_content":"这个推导太棒了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607586678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256495,"user_name":"毕达哥瓦斯","can_delete":false,"product_type":"c1","uid":1203010,"ip_address":"","ucode":"604CD365ED4304","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/42/302ebfd9.jpg","comment_is_top":false,"comment_ctime":1603638286,"is_pvip":false,"replies":[{"id":"94524","content":"你往深里又想了一层，探究背后的why，这很好，值得肯定！所以，我也拿出比较多的篇幅来回复你的问题。<br><br>1.为什么可以改写文法。<br>这其实有个前提，就是存在多个文法能生成相同语句。你可能有这样的经验，当需要写一个正则表达式来匹配字符串的时候，你能写出多个等价的正则表达式。对于上下文无关文法也一样，存在多个文法，能生成相同模式的语句。<br><br>既然存在等价的文法，那么自然可以去选择一个文法，能够更好的与某个算法去适配。LL算法是不能处理左递归的，那么就找到一个等价的文法，并且避免左递归就好了。<br><br>需要注意的是，虽然多个文法可以生成相同的语句，但是生成过程是不一样的。这也就导致解析树是不一样的。所以，有时候需要把解析树重新变换，来生成AST。<br><br>2.为什么想到EBNF<br>EBNF实际上等价于产生式，只不过写法不一样而已。实际上有很多跟EBNF等价的文法书写方式。它们都是用来描述一种语言的结构，或者是一种文档（如XML文档）的结构的，所以它们也被叫做元语言（Metalanguage）。我在后面的元编程一章对Meta的级别有阐述，你也可以看一下。<br><br>所以，你的问题实际就变成了，为什么一个语言的文法会想到用产生式或者EBNF来描述。<br><br>实际上，一门语言不是必须用产生式或EBNF来描述的。有些类型的语言用其他方式描述更简单和方便，比如Indexed Language（https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Indexed_language）。不过，对于大多数计算机语言来说，用上下文无关文法描述是比较合适的，而上下文无关文法采用的是一种字符串重写规则（String Rewiting System, SRS）,也就是把一个字符串中的一部分不断地替换成另外的字符串。采用这种工具没有别的原因，就是因为它在描述语言的语法方面是很有效的。如果你追求它的数学根基，你可以去看半图厄理论，在数理逻辑里有。<br><br>SRS这种工具出现的历史比较早，最早是用来研究自然语言的。后来，在逻辑学（作为哲学的一部分）、数学中也得到了广泛的使用。比如现代数学的公理化运动，也就是把数学（比如欧几里得几何）看做一个形式系统；把数学定理的推导，看做是一个纯粹的形式化的变换过程。所以，它首先需要一门形式化的语言来描述数学中的命题，然后再基于一套推导逻辑去变换它们。然后再来看是否在有限的时间内一定能够推导出来，这也就是图灵的停机问题。<br><br>总结起来，我们在编译原理里面用到了一些形式语言方面的工具，它是被数学、语言学、逻辑学等多个学科共享的。它们都认为，该学科被研究的对象某种意义上是一些纯形式的变换。这种严谨的形式变换的过程，构筑了西方现代科学的严密推理体系，是那么多科学发现的底层根基。从这个角度，你其实可以体会到编译原理搞的是很基础的东西，是这个世界的一些底层的思维逻辑。<br><br>再次非常肯定你的思考精神。通过这种思考，你可以越挖越深，这个过程非常有趣。而且，你挖到一定程度，会发现很多知识体系都是通着的。比如，通过今天的探讨，你已经知道现代数学和编译原理是通着的。顺着这条线，你还会发现更多通着的知识。比如，逻辑学和集成电路的底层是通着的；计算机的底层逻辑跟数学的底层逻辑是一回事；计算过程又跟物理学的某些原理是一回事。很有意思。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1604998559,"ip_address":"","comment_id":256495,"utype":1}],"discussion_count":2,"race_medal":0,"score":"117567755278","product_id":100034101,"comment_content":"希望老师多讲讲背后的原理和为什么会想到这么做<br><br>比如为什么想到改文法来消除左递归，为什么会想到ebnf","like_count":28,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508032,"discussion_content":"你往深里又想了一层，探究背后的why，这很好，值得肯定！所以，我也拿出比较多的篇幅来回复你的问题。\n\n1.为什么可以改写文法。\n这其实有个前提，就是存在多个文法能生成相同语句。你可能有这样的经验，当需要写一个正则表达式来匹配字符串的时候，你能写出多个等价的正则表达式。对于上下文无关文法也一样，存在多个文法，能生成相同模式的语句。\n\n既然存在等价的文法，那么自然可以去选择一个文法，能够更好的与某个算法去适配。LL算法是不能处理左递归的，那么就找到一个等价的文法，并且避免左递归就好了。\n\n需要注意的是，虽然多个文法可以生成相同的语句，但是生成过程是不一样的。这也就导致解析树是不一样的。所以，有时候需要把解析树重新变换，来生成AST。\n\n2.为什么想到EBNF\nEBNF实际上等价于产生式，只不过写法不一样而已。实际上有很多跟EBNF等价的文法书写方式。它们都是用来描述一种语言的结构，或者是一种文档（如XML文档）的结构的，所以它们也被叫做元语言（Metalanguage）。我在后面的元编程一章对Meta的级别有阐述，你也可以看一下。\n\n所以，你的问题实际就变成了，为什么一个语言的文法会想到用产生式或者EBNF来描述。\n\n实际上，一门语言不是必须用产生式或EBNF来描述的。有些类型的语言用其他方式描述更简单和方便，比如Indexed Language（https://en.wikipedia.org/wiki/Indexed_language）。不过，对于大多数计算机语言来说，用上下文无关文法描述是比较合适的，而上下文无关文法采用的是一种字符串重写规则（String Rewiting System, SRS）,也就是把一个字符串中的一部分不断地替换成另外的字符串。采用这种工具没有别的原因，就是因为它在描述语言的语法方面是很有效的。如果你追求它的数学根基，你可以去看半图厄理论，在数理逻辑里有。\n\nSRS这种工具出现的历史比较早，最早是用来研究自然语言的。后来，在逻辑学（作为哲学的一部分）、数学中也得到了广泛的使用。比如现代数学的公理化运动，也就是把数学（比如欧几里得几何）看做一个形式系统；把数学定理的推导，看做是一个纯粹的形式化的变换过程。所以，它首先需要一门形式化的语言来描述数学中的命题，然后再基于一套推导逻辑去变换它们。然后再来看是否在有限的时间内一定能够推导出来，这也就是图灵的停机问题。\n\n总结起来，我们在编译原理里面用到了一些形式语言方面的工具，它是被数学、语言学、逻辑学等多个学科共享的。它们都认为，该学科被研究的对象某种意义上是一些纯形式的变换。这种严谨的形式变换的过程，构筑了西方现代科学的严密推理体系，是那么多科学发现的底层根基。从这个角度，你其实可以体会到编译原理搞的是很基础的东西，是这个世界的一些底层的思维逻辑。\n\n再次非常肯定你的思考精神。通过这种思考，你可以越挖越深，这个过程非常有趣。而且，你挖到一定程度，会发现很多知识体系都是通着的。比如，通过今天的探讨，你已经知道现代数学和编译原理是通着的。顺着这条线，你还会发现更多通着的知识。比如，逻辑学和集成电路的底层是通着的；计算机的底层逻辑跟数学的底层逻辑是一回事；计算过程又跟物理学的某些原理是一回事。很有意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604998559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785194,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/FTjK292nXvuKp6hclPur1eficLoP4LzMCvDCIBn7iaicMB8RV80Q4gPykmCB2JS5pNKJbgFdp48pSWFcpwoncCjdg/132","nickname":"Hyden","note":"","ucode":"EDFC1C04B13663","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378350,"discussion_content":"迫于知识面比较窄，不太能完全理解老师的解答，我说下我粗浅的理解，首先第一个问题：为什么想到改文法来消除左递归？首先算法是根据文法去实现的，产生左递归的原因是‘add -> add + mul’ 这个式子add调用add，这是一个死循环，没有边界条件。所以这个文法显然要改，为了解决这个问题，所以我们需要一个有边界条件的的文法，看下这个式子‘add -> mul (+ mul)*’，这里的边界条件就是如实现代码中的判断‘next token is &#39;+&#39;’。至于为什么要用ebnf这个问题，我觉得没有必要去纠结，举个列子，一道数学题有多个解法，你选了A他选了B，没有为什么选A或者B，只是因为A或者B能解决问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623169862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131488,"user_name":"Enzo","can_delete":false,"product_type":"c1","uid":1550349,"ip_address":"","ucode":"D0DF2638794663","user_header":"https://static001.geekbang.org/account/avatar/00/17/a8/0d/d346780f.jpg","comment_is_top":false,"comment_ctime":1567764929,"is_pvip":false,"replies":[{"id":"50766","content":"我给你解释一下吧：<br>以 add -&gt; mul | add + mul 为例，<br>-&gt; 意思是推导出；<br>| 意思是“或者”<br>这个加号，我回头修改一下吧，可以用引号引起来，&#39;+&#39;只是匹配一个+号字符的意思，没有别的意思。<br>所以，这个产生式的意思是：<br>加法表达式，要么是一个乘法表达式，要么是一个加法表达式，后面跟个+号，然后再跟一个乘法表达式。<br><br>参考书的话，看看这个链接：https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;125948","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568184360,"ip_address":"","comment_id":131488,"utype":1}],"discussion_count":3,"race_medal":0,"score":"96057045441","product_id":100034101,"comment_content":"老师 看不懂以下的公式<br>add -&gt; mul | add + mul<br>mul -&gt; pri | mul * pri<br>pri -&gt; Id | Num | (add) <br>是需要找本书看看吗？","like_count":23,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466480,"discussion_content":"我给你解释一下吧：\n以 add -&amp;gt; mul | add + mul 为例，\n-&amp;gt; 意思是推导出；\n| 意思是“或者”\n这个加号，我回头修改一下吧，可以用引号引起来，&amp;#39;+&amp;#39;只是匹配一个+号字符的意思，没有别的意思。\n所以，这个产生式的意思是：\n加法表达式，要么是一个乘法表达式，要么是一个加法表达式，后面跟个+号，然后再跟一个乘法表达式。\n\n参考书的话，看看这个链接：https://time.geekbang.org/column/article/125948","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568184360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2085129,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BF6K1pR632UTLOpVU6ibaTRacFtoiaia4Ojs5BLQtbrullKuQtfDwfOyqBpRDb7W8JzDicAbwOLicCbcHX9DreC9WXw/132","nickname":"不会魔法","note":"","ucode":"6B470D893A64F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294118,"discussion_content":"关于为什么 A->M|A+M，为什么这样推导，为什么推导的规则是这样的说下自己的理解。\n\n首先用中文来翻一下这个表达式，把A理解为一个句子，把A和M理解为句子A中包含的元素。\n\n比如，对 &#39;你好&#39; 这个句子进行推导，可推导为\n你好－＞你|好|你好\n构成这个句子包含这几种元素可能。\n\n进行抽象，句子你好＝主语＋谓语，主语记做S，谓语记做V。\n以bnf表达式形式描述。\nSV(你好)->S(你)|V(好)|SV(你好)\n这个句子可能由这三种元素组合而成。\n\n再简化\nSV->S|V|SV\n简化sv为s，右侧大写转为小写方便区分\nS->s|v\n是不是有点内个味道了。\n\n然后咱们基本就明白了啥是推导了吧，就是说左边的集合（句子是单词的集合，文法是词法的集合）包含右边元素的可能。找出来这个句子中可能包含的单词有哪些，抽象一下就是找出这个句子中可能包含的单词类型有哪些。\n\n你好中包含，主语谓语\n\n再拉回来说本章中的\nA->M|A+M\n等于\nadditiveExpression\n    : multiplicativeExpression\n    | additiveExpression Plus multiplicativeExpression\n    ;\na=additiveExpression，是加法表达式的意思。\nM＝multiplicativeExpression，是乘法表达式的意思。\n那么上面个bnf表达式的意思就是说。\n\n一个加法表达式中可能包含元素有乘法表达式或者加法表达式＋乘法表达式的意思。\n\n这是简化后的答案，如果不简化的话，大家可以穷举一下。\n\n本结中为了简单只使用了加法和乘法，没有减法除法等。\n\n加法表达式包含，加法，乘法，加法＋乘法，加法＋加法，加法＋加法＋乘法 等等。\n\n以上所有可能最终都可以用\n\n乘法和加法＋乘法，两种元素代替。\n\n至于为什么我就不知道了，我也是个萌新哈哈。看到这里大家应该都能差不多明白\nA->M|A+M\n究竟是个什么鬼东西了吧。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1595786073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1630053,"avatar":"https://static001.geekbang.org/account/avatar/00/18/df/65/e93cd7dc.jpg","nickname":"听风的歌","note":"","ucode":"51C2ADF6ECE781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2085129,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BF6K1pR632UTLOpVU6ibaTRacFtoiaia4Ojs5BLQtbrullKuQtfDwfOyqBpRDb7W8JzDicAbwOLicCbcHX9DreC9WXw/132","nickname":"不会魔法","note":"","ucode":"6B470D893A64F1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576129,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655292889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":294118,"ip_address":""},"score":576129,"extra":""}]}]},{"had_liked":false,"id":126466,"user_name":"谱写未来","can_delete":false,"product_type":"c1","uid":1103156,"ip_address":"","ucode":"6574697A0735B3","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/34/3d2ce301.jpg","comment_is_top":false,"comment_ctime":1566389211,"is_pvip":false,"replies":[{"id":"46812","content":"是的。<br><br>我们通过改写规则的方法，能够避免左递归，但无法同时照顾结合性。这是很多教科书都没有提到的一件事情。<br><br>好在，这个事情比较简单，因为改写后的规则，是多了一个标准的“尾巴”。对，很多人都称呼它为尾巴。这个尾巴可以特别处理。<br><br>也就是说，结合性的信息已经不是单纯通过上下文无关文法提供了，要辅助额外的信息。<br><br>无独有偶，还有的作者用别的方法来解决算法优先级问题，比如LLVM的一个初学者教程，用的也是标注算符优先级的方法，也要在文法的基础上提供额外的信息给算法。<br><br>http:&#47;&#47;llvm.org&#47;docs&#47;tutorial&#47;MyFirstLanguageFrontend&#47;index.html<br><br>本课程讲究实践。在实践中才会看到这些教科书上讲不到的点，但在面对实际问题时必须要解决。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566432782,"ip_address":"","comment_id":126466,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70285865947","product_id":100034101,"comment_content":"只有第一步用add，接下来都用add&#39;，后面不是都是add&#39;了，还是左边那张图不是吗？","like_count":15,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464003,"discussion_content":"是的。\n\n我们通过改写规则的方法，能够避免左递归，但无法同时照顾结合性。这是很多教科书都没有提到的一件事情。\n\n好在，这个事情比较简单，因为改写后的规则，是多了一个标准的“尾巴”。对，很多人都称呼它为尾巴。这个尾巴可以特别处理。\n\n也就是说，结合性的信息已经不是单纯通过上下文无关文法提供了，要辅助额外的信息。\n\n无独有偶，还有的作者用别的方法来解决算法优先级问题，比如LLVM的一个初学者教程，用的也是标注算符优先级的方法，也要在文法的基础上提供额外的信息给算法。\n\nhttp://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\n\n本课程讲究实践。在实践中才会看到这些教科书上讲不到的点，但在面对实际问题时必须要解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566432782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130600,"user_name":"Lafite","can_delete":false,"product_type":"c1","uid":1391107,"ip_address":"","ucode":"42B3430F366930","user_header":"https://static001.geekbang.org/account/avatar/00/15/3a/03/bd7d8a6d.jpg","comment_is_top":false,"comment_ctime":1567492428,"is_pvip":false,"replies":[{"id":"49333","content":"转化成EBNF：add ::= mul  ( &#39;+&#39; mul)*<br>一个表达式就解决了，更简洁。不需要add&#39;了。<br><br>推导过程，要看算法。每种算法采用的推导过程是不一样的。如果用递归下降算法，推导：2+3*5<br>我们按照调用过程分成几层：<br>第1层：采用 mul add&#39;，因为mul能完整的匹配2，不能再往后匹配了，所以第一个子节点建立完毕。接着用add&#39;去建立第二个子节点。<br>第2层：运用add&#39;的第一个产生式，先匹配上了+号，之后去匹配mul，也就是3*5，也是成功的。然后再去匹配add&#39;。<br>第3层：这次用add&#39;的时候，还是先尝试第一个产生式，失败。为什么呢？因为没有+号。回溯。尝试第二个产生式，即epsilon。也就是返回空。那么第3层就完成了。<br>第3层成功后第2层，第2层也就成功完成了。<br>同理，返回第1层，第1层也成功。<br>这个过程是否听得清楚？<br>可以换着不同的例子多推导几遍，就会变得很熟练了！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1567649639,"ip_address":"","comment_id":130600,"utype":1}],"discussion_count":3,"race_medal":0,"score":"61697034572","product_id":100034101,"comment_content":"请问宫老师<br>add -&gt; mul add&#39;<br>add&#39; -&gt; + mul add&#39; | ε<br>这两个产生式的推导过程应该是怎么样的，为什么可以转化为EBNF的写法呢。","like_count":15,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466024,"discussion_content":"转化成EBNF：add ::= mul  ( &amp;#39;+&amp;#39; mul)*\n一个表达式就解决了，更简洁。不需要add&amp;#39;了。\n\n推导过程，要看算法。每种算法采用的推导过程是不一样的。如果用递归下降算法，推导：2+3*5\n我们按照调用过程分成几层：\n第1层：采用 mul add&amp;#39;，因为mul能完整的匹配2，不能再往后匹配了，所以第一个子节点建立完毕。接着用add&amp;#39;去建立第二个子节点。\n第2层：运用add&amp;#39;的第一个产生式，先匹配上了+号，之后去匹配mul，也就是3*5，也是成功的。然后再去匹配add&amp;#39;。\n第3层：这次用add&amp;#39;的时候，还是先尝试第一个产生式，失败。为什么呢？因为没有+号。回溯。尝试第二个产生式，即epsilon。也就是返回空。那么第3层就完成了。\n第3层成功后第2层，第2层也就成功完成了。\n同理，返回第1层，第1层也成功。\n这个过程是否听得清楚？\n可以换着不同的例子多推导几遍，就会变得很熟练了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567649639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026608,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/30/acc91f01.jpg","nickname":"honnkyou","note":"","ucode":"FD5EC4120EE803","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15298,"discussion_content":"老师epsilon返回空，第三层完成后，第2层还要按照mul拆是吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568815042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391107,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3a/03/bd7d8a6d.jpg","nickname":"Lafite","note":"","ucode":"42B3430F366930","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7772,"discussion_content":"谢谢老师，我明白这个推导过程了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567668965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128895,"user_name":"knull","can_delete":false,"product_type":"c1","uid":1043484,"ip_address":"","ucode":"3BFECF3D29F40C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/1c/d323b066.jpg","comment_is_top":false,"comment_ctime":1566981010,"is_pvip":false,"replies":[{"id":"48288","content":"有道理！用EBNF的话，+号有特殊含义。<br>我们修改一下文稿。<br>谢谢你的建议，你很细心，并且自己去做研究了！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1567153040,"ip_address":"","comment_id":128895,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48811621266","product_id":100034101,"comment_content":"老师，我简单研究了下bnf，我觉得你写法最好修正下，不然不好看。比如：<br>原来的写法：add -&gt; mul (+ mul)*<br>现在的写法：add -&gt; mul (&#39;+&#39; mul)*<br>&#39;+&#39;表示关键字；<br>+ 直接用，表示1个活多个；<br>加单引号以示区分，看起来方便一点","like_count":11,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465160,"discussion_content":"有道理！用EBNF的话，+号有特殊含义。\n我们修改一下文稿。\n谢谢你的建议，你很细心，并且自己去做研究了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567153040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278811,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1096652,"ip_address":"","ucode":"E79CEA70430449","user_header":"https://static001.geekbang.org/account/avatar/00/10/bb/cc/fac12364.jpg","comment_is_top":false,"comment_ctime":1613359160,"is_pvip":true,"replies":[{"id":"102110","content":"嗯，你总结出了其中的要点！<br>后面的课程里，还有别的方法来破除这些障碍，比如LR算法不怕左递归。<br>在另一门课，《编译原理实战课》中，你会看到常用语言其实用一个很优雅的运算符优先级算法就能解决常见的二元运算的表达式的解析问题。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1614649991,"ip_address":"","comment_id":278811,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31678130232","product_id":100034101,"comment_content":"左递归这块确实蛮烧脑，总结一下吧：<br>1. 左递归会造成无限递归，从而造成递归下降法无法结束。<br>2. 可以将左递归改成右递归，这样便能够结束。但结合性会出现问题。<br>3. 改成右递归之后，就成了尾递归，那么可以用循环代替递归。而这里不是为了优化性能，而是为了修改行为！（本来直接代替后应该是后面的token产生的树会成为前面的子树，但我们就是硬改为后面产生的树变成根）","like_count":8,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515512,"discussion_content":"嗯，你总结出了其中的要点！\n后面的课程里，还有别的方法来破除这些障碍，比如LR算法不怕左递归。\n在另一门课，《编译原理实战课》中，你会看到常用语言其实用一个很优雅的运算符优先级算法就能解决常见的二元运算的表达式的解析问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614649991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042634,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/ca/2a7cc193.jpg","nickname":"阿鼎","note":"","ucode":"EE763513563F50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571928,"discussion_content":"这个评论说清了正文没说清楚的思路。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652495120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126021,"user_name":"贾献华","can_delete":false,"product_type":"c1","uid":1065314,"ip_address":"","ucode":"4D69C026FF8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/62/33520c3e.jpg","comment_is_top":false,"comment_ctime":1566294497,"is_pvip":true,"replies":[{"id":"46663","content":"厉害！点赞！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566377266,"ip_address":"","comment_id":126021,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23041130977","product_id":100034101,"comment_content":"https:&#47;&#47;github.com&#47;iOSDevLog&#47;Logo<br>Swift 版《编译原理之美》代码，可以在 iOS 上运行。","like_count":5,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463790,"discussion_content":"厉害！点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566377266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590892,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTImmLJCKerl9CI4sTpPDNCUgswp04ybsJ4J6mpJmMlHh43Iibp1RPOLam5PpOv2ZDGcjvGrY94lNRw/132","nickname":"Varphp","note":"","ucode":"889550391E3F75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5561,"discussion_content":"大佬 示例代码能翻译node吗   前端  后端  移动端😂语言差距有点大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566354647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126204,"user_name":"阿崔cxr","can_delete":false,"product_type":"c1","uid":1177565,"ip_address":"","ucode":"26E2C7D96306A4","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/dd/c85f2065.jpg","comment_is_top":false,"comment_ctime":1566349749,"is_pvip":false,"replies":[{"id":"46653","content":"好的，我对于公式推导过程再加个图。加完了在回复中告诉你。<br><br>你指的是用：<br>add -&gt; mul add&#39;<br>add&#39; -&gt; + mul add&#39; | ε<br><br>来推导2+3+4的过程不清楚吗？","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566375955,"ip_address":"","comment_id":126204,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18746218933","product_id":100034101,"comment_content":"老师 上一讲看懂了  这一讲在推导公式的时候迷糊了。可以加点推导过程的详细讲解嘛  而不是直接给一个推导的结果图 ","like_count":5,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463882,"discussion_content":"好的，我对于公式推导过程再加个图。加完了在回复中告诉你。\n\n你指的是用：\nadd -&amp;gt; mul add&amp;#39;\nadd&amp;#39; -&amp;gt; + mul add&amp;#39; | ε\n\n来推导2+3+4的过程不清楚吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566375955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207550,"user_name":"侯不住","can_delete":false,"product_type":"c1","uid":1398463,"ip_address":"","ucode":"5C54916EA3ED41","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI45zO9GOMqutcVR3NiaicxrKvur4UxStmBkdMYeTMy6HZqpmYLQd6TwGI0mfdp5Upjibr5LiazMDXdPw/132","comment_is_top":false,"comment_ctime":1587106576,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14472008464","product_id":100034101,"comment_content":"老师，我需要帮助。。。<br>add ::= mul | add + mul<br>mul ::= pri | mul * pri<br>pri ::= Id | Num | (add) <br>前面一讲2+3这个表达式使用add::=mul | add + mul这个产生式会有左递归的问题，为何到了这一讲上面的产生式就能分析2+3*4这样的表达式，这应该跟前面的一样左递归就会有问题啊。不明白不明白，求指导","like_count":4,"discussions":[{"author":{"id":2085129,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BF6K1pR632UTLOpVU6ibaTRacFtoiaia4Ojs5BLQtbrullKuQtfDwfOyqBpRDb7W8JzDicAbwOLicCbcHX9DreC9WXw/132","nickname":"不会魔法","note":"","ucode":"6B470D893A64F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294206,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595828136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1941932,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/a1/ac/24baa02c.jpg","nickname":"小白","note":"","ucode":"4410C046D5CE43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291694,"discussion_content":"继续向后看就明白了，尾递归转化为循环语句","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594909489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126491,"user_name":"pwlazy","can_delete":false,"product_type":"c1","uid":1179363,"ip_address":"","ucode":"9283B1B1565924","user_header":"http://thirdwx.qlogo.cn/mmopen/PiajxSqBRaEKjibnKudFmeuq4N2sGKZp6nj9B6Nqds160j3X3ysqsGOxibjKiamfAiaFYy9xmz5S8jianyAXCyu7rmsA/132","comment_is_top":false,"comment_ctime":1566394539,"is_pvip":false,"replies":[{"id":"46811","content":"是，没错。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566432371,"ip_address":"","comment_id":126491,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14451296427","product_id":100034101,"comment_content":"2+3+4+5生产的AST 是否是这样的？<br><br>Programm Calculator<br>    <br>      AdditiveExp +<br>        AdditiveExp +<br>            AdditiveExp +<br>                IntLiteral 2<br>                IntLiteral 3<br>            IntLiteral 4<br>        IntLiteral 5<br>","like_count":3,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464011,"discussion_content":"是，没错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566432371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1260026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","nickname":"安排","note":"","ucode":"F78CFA9624CAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5645,"discussion_content":"我觉得应该是你这样的缩进","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566400322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126386,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566377745,"is_pvip":false,"replies":[{"id":"46768","content":"AST是对计算机语言的结构化表示，它是一切后续工作的基础，比如做语义分析，翻译成目标代码。<br><br>看了一下你发的那个链接。是从类似lisp语言的函数调用翻译到C语言的格式。这属于语言翻译的范畴。<br><br>我有两点点评：<br>1.lisp语言很容易翻译，一个递归下降算法肯定搞定。因为它的语法结构很简单，所有的语法结构都是一层层括号的嵌套。<br>2.翻译后得到AST，再生成C的格式，这就很简单了。基本上就是把括号位置改一下而已。<br><br>感谢你经常参与讨论！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566390603,"ip_address":"","comment_id":126386,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14451279633","product_id":100034101,"comment_content":"老师可以说一下生成出来的AST怎么使用吗？<br>https:&#47;&#47;github.com&#47;jamiebuilds&#47;the-super-tiny-compiler<br>这个编译器写得怎么样，老师可以说一下吗？","like_count":3,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463967,"discussion_content":"AST是对计算机语言的结构化表示，它是一切后续工作的基础，比如做语义分析，翻译成目标代码。\n\n看了一下你发的那个链接。是从类似lisp语言的函数调用翻译到C语言的格式。这属于语言翻译的范畴。\n\n我有两点点评：\n1.lisp语言很容易翻译，一个递归下降算法肯定搞定。因为它的语法结构很简单，所有的语法结构都是一层层括号的嵌套。\n2.翻译后得到AST，再生成C的格式，这就很简单了。基本上就是把括号位置改一下而已。\n\n感谢你经常参与讨论！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566390603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161720,"user_name":"草戊","can_delete":false,"product_type":"c1","uid":1044202,"ip_address":"","ucode":"F1B0CB0A4FA762","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/ea/c8136dfd.jpg","comment_is_top":false,"comment_ctime":1576308033,"is_pvip":false,"replies":[{"id":"63376","content":"是的。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1577434635,"ip_address":"","comment_id":161720,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10166242625","product_id":100034101,"comment_content":"antlr4能处理直接左递归了，表达式文法写起来直观很多","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477826,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577434635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132732,"user_name":"nil","can_delete":false,"product_type":"c1","uid":1507193,"ip_address":"","ucode":"0F5D298C1CBB74","user_header":"https://static001.geekbang.org/account/avatar/00/16/ff/79/3b38c9e1.jpg","comment_is_top":false,"comment_ctime":1568207606,"is_pvip":false,"replies":[{"id":"51377","content":"理论上是可以的，但需要给算法提供额外的信息。<br>采用递归下降算法的时候，我们在函数中标准的处理放肆，都是创建一个AST节点，并返回给调用者。调用者都是把返回的AST作为自己的子节点。<br>如果要改变结合性，相当于要知道什么时候把返回的节点作为自己的父节点。<br>Antlr里用属性标注的方法，来提供这个额外的信息。这种信息在标准的上下文无关文法中是无法提供的。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568698273,"ip_address":"","comment_id":132732,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10158142198","product_id":100034101,"comment_content":"老师你好，问个问题。最终通过循环来消除递归带来的二元预算符的结合性问题？能否直接在递归中消除结合性问题？","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467094,"discussion_content":"理论上是可以的，但需要给算法提供额外的信息。\n采用递归下降算法的时候，我们在函数中标准的处理放肆，都是创建一个AST节点，并返回给调用者。调用者都是把返回的AST作为自己的子节点。\n如果要改变结合性，相当于要知道什么时候把返回的节点作为自己的父节点。\nAntlr里用属性标注的方法，来提供这个额外的信息。这种信息在标准的上下文无关文法中是无法提供的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568698273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131492,"user_name":"Enzo","can_delete":false,"product_type":"c1","uid":1550349,"ip_address":"","ucode":"D0DF2638794663","user_header":"https://static001.geekbang.org/account/avatar/00/17/a8/0d/d346780f.jpg","comment_is_top":false,"comment_ctime":1567766657,"is_pvip":false,"replies":[{"id":"50765","content":"所有的操作符，你可以加上引号，也就是去匹配这样一个字符而已。没有太复杂的意思。<br>add -&gt; mul | add &#39;+&#39; mul | add &#39;-&#39; mul <br><br>参考书籍的话，参见这篇攻略：https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;125948","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568184085,"ip_address":"","comment_id":131492,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10157701249","product_id":100034101,"comment_content":"<br>exp -&gt; or | or = exp   <br>or -&gt; and | or || and<br>and -&gt; equal | and &amp;&amp; equal<br>equal -&gt; rel | equal == rel | equal != rel<br>rel -&gt; add | rel &gt; add | rel &lt; add | rel &gt;= add | rel &lt;= add<br>add -&gt; mul | add + mul | add - mul <br>mul -&gt; pri | mul * pri | mul &#47; pri <br> 老师不懂这里的 + - &gt;= 等符号的意思 能推荐本书 吗","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466484,"discussion_content":"所有的操作符，你可以加上引号，也就是去匹配这样一个字符而已。没有太复杂的意思。\nadd -&amp;gt; mul | add &amp;#39;+&amp;#39; mul | add &amp;#39;-&amp;#39; mul \n\n参考书籍的话，参见这篇攻略：https://time.geekbang.org/column/article/125948","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568184085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126290,"user_name":"半桶水","can_delete":false,"product_type":"c1","uid":1000475,"ip_address":"","ucode":"AFC053EB627E48","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/1b/fa287ed5.jpg","comment_is_top":false,"comment_ctime":1566357310,"is_pvip":false,"replies":[{"id":"46640","content":"如果想练习语法规则的推导，那么随便买哪本教材都可以。一般也都会带些练习。<br><br>其他的扩展资料，我后面有想到的，会提供链接。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566374186,"ip_address":"","comment_id":126290,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10156291902","product_id":100034101,"comment_content":"是否可以给一些扩展资料的链接，有些概念，推导还是需要更多资料和练习才能掌握","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463928,"discussion_content":"如果想练习语法规则的推导，那么随便买哪本教材都可以。一般也都会带些练习。\n\n其他的扩展资料，我后面有想到的，会提供链接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566374186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237428,"user_name":"不会魔法","can_delete":false,"product_type":"c1","uid":2085129,"ip_address":"","ucode":"6B470D893A64F1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BF6K1pR632UTLOpVU6ibaTRacFtoiaia4Ojs5BLQtbrullKuQtfDwfOyqBpRDb7W8JzDicAbwOLicCbcHX9DreC9WXw/132","comment_is_top":false,"comment_ctime":1595827454,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5890794750","product_id":100034101,"comment_content":"不明白为啥上一节的<br>add -&gt; Int | add + Int 不能匹配 2+3，会出现左递归，到了这一节<br>add -&gt; mul | add + mul 又能匹配 2+ 3 * 5 中的 2 + 3 了","like_count":1,"discussions":[{"author":{"id":1104290,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/a2/afbc447c.jpg","nickname":"海军上校","note":"","ucode":"7B0D9EC01A3F36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411853,"discussion_content":"我觉得也不能也是左递归，感觉是为啦说明例子意象出来的推导结果，而且第一步的推导就已经是回溯后的结果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636018675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222913,"user_name":"杨涛","can_delete":false,"product_type":"c1","uid":1082978,"ip_address":"","ucode":"2B6B6AEFFB54A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/86/62/22e9aeb0.jpg","comment_is_top":false,"comment_ctime":1590963757,"is_pvip":false,"replies":[{"id":"82324","content":"是赋值表达式。<br>你可以注意一个细节：这里递归项（exp）是在右边的，而后面的其他产生式，递归项是在左边的。你知不知道为什么？","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1591083032,"ip_address":"","comment_id":222913,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5885931053","product_id":100034101,"comment_content":"老师，请问exp -&gt; or | or = exp这一句中or = exp对应出来是一个如何的表达式呢？","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496957,"discussion_content":"是赋值表达式。\n你可以注意一个细节：这里递归项（exp）是在右边的，而后面的其他产生式，递归项是在左边的。你知不知道为什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591083032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1696883,"avatar":"https://static001.geekbang.org/account/avatar/00/19/e4/73/74dce191.jpg","nickname":"鼠里鼠气","note":"","ucode":"4793476BBDB202","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307036,"discussion_content":"赋值表达式是右结合","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600479090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164676,"user_name":"简玉","can_delete":false,"product_type":"c1","uid":1013401,"ip_address":"","ucode":"C7F9471C7BFC7F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/99/00597feb.jpg","comment_is_top":false,"comment_ctime":1577070844,"is_pvip":false,"replies":[{"id":"63354","content":"嗯。留言中别人遇到的问题，对自己也会有用。你如果有问题的话，也多提问！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1577430764,"ip_address":"","comment_id":164676,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5872038140","product_id":100034101,"comment_content":"学习这门课的时候 结合前后和留言问答 会好理解一些","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478861,"discussion_content":"嗯。留言中别人遇到的问题，对自己也会有用。你如果有问题的话，也多提问！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577430764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132651,"user_name":"阿尔伯特","can_delete":false,"product_type":"c1","uid":1300012,"ip_address":"","ucode":"70B8EA81FAD7BB","user_header":"https://static001.geekbang.org/account/avatar/00/13/d6/2c/9aa0ae40.jpg","comment_is_top":false,"comment_ctime":1568185326,"is_pvip":false,"replies":[{"id":"51379","content":"嗯。编译且运行了一下。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568698866,"ip_address":"","comment_id":132651,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5863152622","product_id":100034101,"comment_content":"https:&#47;&#47;github.com&#47;albertabc&#47;compiler<br>继续攒代码。<br>有了上节课的基础，这节相对比较容易理解。用文法的形式推导，最终消除了左递归的思路我觉得很有意思，用左右递归代表结合性，用文法上下级实现了优先级，这些可以作为解决问题的一个思路和方法，用比较平常的普通方法解决了这些问题。感觉比中缀后缀表达式容易掌握。","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467053,"discussion_content":"嗯。编译且运行了一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568698866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127424,"user_name":"秋成","can_delete":false,"product_type":"c1","uid":1238915,"ip_address":"","ucode":"FDC0B94398B6DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/83/20456810.jpg","comment_is_top":false,"comment_ctime":1566705212,"is_pvip":false,"replies":[{"id":"47334","content":"这是文法理论的核心逻辑。<br>1.替换规则是为了做什么？<br>替换过程，就是推导过程。这样不断替换，就是不断推导。<br>如果某个句子，能用某个文法推导出来，那就说这个句子符合某个文法。比如2+3*5就符合我们上面的文法。<br>我们说语法解析，实际上是语法推导的反过程，是把它怎么推导的过程给逆向出来。<br><br>2.为什么替换规则是这样的？<br>这就是文法设计的问题。这要根据问题域的特征来设计。比如，假设你为汉语设计一个文法，那么就知道分成“主谓宾”三个部分。而表达式是分为加减乘数运算，又分成优先级，所以就用上面的规则来表达。验证的方法就是看能否推导出所有可能的表达式。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566791581,"ip_address":"","comment_id":127424,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5861672508","product_id":100034101,"comment_content":"没明白替换规则是为了做什么  为什么替换规则是这样的<br>add -&gt; mul | add + mul<br>mul -&gt; pri | mul * pri<br>pri -&gt; Id | Num | (add) <br>","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464485,"discussion_content":"这是文法理论的核心逻辑。\n1.替换规则是为了做什么？\n替换过程，就是推导过程。这样不断替换，就是不断推导。\n如果某个句子，能用某个文法推导出来，那就说这个句子符合某个文法。比如2+3*5就符合我们上面的文法。\n我们说语法解析，实际上是语法推导的反过程，是把它怎么推导的过程给逆向出来。\n\n2.为什么替换规则是这样的？\n这就是文法设计的问题。这要根据问题域的特征来设计。比如，假设你为汉语设计一个文法，那么就知道分成“主谓宾”三个部分。而表达式是分为加减乘数运算，又分成优先级，所以就用上面的规则来表达。验证的方法就是看能否推导出所有可能的表达式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566791581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2085129,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BF6K1pR632UTLOpVU6ibaTRacFtoiaia4Ojs5BLQtbrullKuQtfDwfOyqBpRDb7W8JzDicAbwOLicCbcHX9DreC9WXw/132","nickname":"不会魔法","note":"","ucode":"6B470D893A64F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294119,"discussion_content":"关于为什么 A->M|A+M，为什么这样推导，为什么推导的规则是这样的说下自己的理解。\n\n首先用中文来翻一下这个表达式，把A理解为一个句子，把A和M理解为句子A中包含的元素。\n\n比如，对 &#39;你好&#39; 这个句子进行推导，可推导为\n你好－＞你|好|你好\n构成这个句子包含这几种元素可能。\n\n进行抽象，句子你好＝主语＋谓语，主语记做S，谓语记做V。\n以bnf表达式形式描述。\nSV(你好)->S(你)|V(好)|SV(你好)\n这个句子可能由这三种元素组合而成。\n\n再简化\nSV->S|V|SV\n简化sv为s，右侧大写转为小写方便区分\nS->s|v\n是不是有点内个味道了。\n\n然后咱们基本就明白了啥是推导了吧，就是说左边的集合（句子是单词的集合，文法是词法的集合）包含右边元素的可能。找出来这个句子中可能包含的单词有哪些，抽象一下就是找出这个句子中可能包含的单词类型有哪些。\n\n你好中包含，主语谓语\n\n再拉回来说本章中的\nA->M|A+M\n等于\nadditiveExpression\n    : multiplicativeExpression\n    | additiveExpression Plus multiplicativeExpression\n    ;\na=additiveExpression，是加法表达式的意思。\nM＝multiplicativeExpression，是乘法表达式的意思。\n那么上面个bnf表达式的意思就是说。\n\n一个加法表达式中可能包含元素有乘法表达式或者加法表达式＋乘法表达式的意思。\n\n这是简化后的答案，如果不简化的话，大家可以穷举一下。\n\n本结中为了简单只使用了加法和乘法，没有减法除法等。\n\n加法表达式包含，加法，乘法，加法＋乘法，加法＋加法，加法＋加法＋乘法 等等。\n\n以上所有可能最终都可以用\n\n乘法和加法＋乘法，两种元素代替。\n\n至于为什么我就不知道了，我也是个萌新哈哈。看到这里大家应该都能差不多明白\nA->M|A+M\n究竟是个什么鬼东西了吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595786108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333180,"user_name":"Geek_6304e3","can_delete":false,"product_type":"c1","uid":2905630,"ip_address":"","ucode":"8DD9A6D8E7DC60","user_header":"","comment_is_top":false,"comment_ctime":1644162701,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644162701","product_id":100034101,"comment_content":"add -&gt; mul (+ mul)* 最后这个推导式在代码中循环的时候前面生成的节点会编程后面的子节点，这种结构在这个产生式中好像不能直观地体现出来？就是你看这个bnf 你不知道生成的结构会是左结合的，这个要怎么理解呢？","like_count":0},{"had_liked":false,"id":333178,"user_name":"Geek_6304e3","can_delete":false,"product_type":"c1","uid":2905630,"ip_address":"","ucode":"8DD9A6D8E7DC60","user_header":"","comment_is_top":false,"comment_ctime":1644161796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644161796","product_id":100034101,"comment_content":"add -&gt; mul (+ mul)* 这个为什么可以解决左递归呢？没弄懂","like_count":0},{"had_liked":false,"id":332408,"user_name":"Geek_a0b00e","can_delete":false,"product_type":"c1","uid":2849772,"ip_address":"","ucode":"6509CABE634F40","user_header":"","comment_is_top":false,"comment_ctime":1643209999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643209999","product_id":100034101,"comment_content":"文章开头那儿的2+3+4的推导，结合性是不是有问题，不应该是3+4先结合吗","like_count":0},{"had_liked":false,"id":329775,"user_name":"gogocx123","can_delete":false,"product_type":"c1","uid":2035421,"ip_address":"","ucode":"DA9C6C51597455","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0e/dd/9fa6b37f.jpg","comment_is_top":false,"comment_ctime":1641534946,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641534946","product_id":100034101,"comment_content":"“我们已经知道，语法规则是由上下文无关文法表示的，而上下文无关文法是由一组替换规则（又叫产生式）组成的，比如算术表达式的文法规则可以表达成下面这种形式：”，文中的这句话应该是指  上下文无关文法 其实是有特定的 替换规则（产生式）的吧？","like_count":0},{"had_liked":false,"id":329774,"user_name":"gogocx123","can_delete":false,"product_type":"c1","uid":2035421,"ip_address":"","ucode":"DA9C6C51597455","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0e/dd/9fa6b37f.jpg","comment_is_top":false,"comment_ctime":1641534860,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641534860","product_id":100034101,"comment_content":"老师，我是小白哈，有个简单的问题想问一下，文中有这样一句话：“比如加法表达式的产生式“加法表达式 + 乘法表达式”，就是左递归的”，<br>其中，加法表达式的产生式 为 &quot;加法表达式+乘法表达式&quot;，这个 加法表达式 的产生式 是怎么得到的哈？是有固定的规则吗？","like_count":0},{"had_liked":false,"id":326750,"user_name":"无形","can_delete":false,"product_type":"c1","uid":1016889,"ip_address":"","ucode":"B740E2A68A17A5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/39/c8772466.jpg","comment_is_top":false,"comment_ctime":1639660541,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639660541","product_id":100034101,"comment_content":"golang &lt;-chan是右结合","like_count":0},{"had_liked":false,"id":320729,"user_name":"小康","can_delete":false,"product_type":"c1","uid":1485752,"ip_address":"","ucode":"2445F7BB91387C","user_header":"https://static001.geekbang.org/account/avatar/00/16/ab/b8/0a979678.jpg","comment_is_top":false,"comment_ctime":1636472283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636472283","product_id":100034101,"comment_content":"老师，编译器对于我这个学历专科的话，学到什么程度能找到相关的编译器开发工作，我以前做芯片工艺制造和开发的，会vhdl硬件语言，后来做Java 开发，现在我对底层知识感兴趣！请老师指点迷津！","like_count":0},{"had_liked":false,"id":311895,"user_name":"菜鸟","can_delete":false,"product_type":"c1","uid":2451215,"ip_address":"","ucode":"214A61B6B3410F","user_header":"https://static001.geekbang.org/account/avatar/00/25/67/0f/3cb10900.jpg","comment_is_top":false,"comment_ctime":1631524673,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1631524673","product_id":100034101,"comment_content":"老师请教一个问题：<br>表达式：2+3+5*2 产生的AST是否是这样的？<br>Programm Calculator<br>AdditiveExp +<br>   AdditiveExp +<br>       IntLiteral  2<br>       IntLiteral  3<br>   MultiExp      *<br>       IntLiteral  5<br>       IntLiteral  2<br>AST语法树的左右分支是不是需要对调一下？","like_count":0},{"had_liked":false,"id":299064,"user_name":"胡刚","can_delete":false,"product_type":"c1","uid":2631669,"ip_address":"","ucode":"908C44A5E440B9","user_header":"https://static001.geekbang.org/account/avatar/00/28/27/f5/55fb1ac4.jpg","comment_is_top":false,"comment_ctime":1624445832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624445832","product_id":100034101,"comment_content":"左递归到底有什么问题？能说的清楚一点吗？","like_count":0},{"had_liked":false,"id":296376,"user_name":"yss","can_delete":false,"product_type":"c1","uid":1922488,"ip_address":"","ucode":"793E8448355F3F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkOj8VUxLjDKp6jRWJrABnnsg7U1sMSkM8FO6ULPwrqNpicZvTQ7kwctmu38iaJYHybXrmbusd8trg/132","comment_is_top":false,"comment_ctime":1622947260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622947260","product_id":100034101,"comment_content":"老师讲的比较快，对于推导过程我的理解思路记录如下。<br><br>以add -&gt; mul | add + mul 为例，<br>2+3+4<br><br>先看是不是mul 不是。<br>然后看 2 + x 是不是复合 add + mul 不是<br>然后看 2+3+x 是不是复合add + mul 复合<br>于是就推导为  2+3  和 ➕  和 4","like_count":0},{"had_liked":false,"id":291875,"user_name":",","can_delete":false,"product_type":"c1","uid":1439568,"ip_address":"","ucode":"191431A878D7B6","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/50/cbfe1bc0.jpg","comment_is_top":false,"comment_ctime":1620566845,"is_pvip":false,"replies":[{"id":"105997","content":"pri是primary的缩写，意思是表达式中最基本的元素，包括标识符、字面量和用括号括起来的表达式。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1620983197,"ip_address":"","comment_id":291875,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1620566845","product_id":100034101,"comment_content":"老师这里的pri啥意思，硬是没看懂<br>```<br>pri -&gt; Id | Literal | (exp)<br>``` ","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519591,"discussion_content":"pri是primary的缩写，意思是表达式中最基本的元素，包括标识符、字面量和用括号括起来的表达式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620983197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273142,"user_name":"SC2021","can_delete":false,"product_type":"c1","uid":1470164,"ip_address":"","ucode":"15F8F35DC9DBA1","user_header":"https://static001.geekbang.org/account/avatar/00/16/6e/d4/9538987d.jpg","comment_is_top":false,"comment_ctime":1610454937,"is_pvip":false,"replies":[{"id":"99548","content":"我换个说法解释一下，看看是否能帮助你理解：<br>语法，规定了如何写出正确的程序，相当于比程序抽象了一层，我们可以叫做meta层；<br>而文法，规定了如何写出正确的语法规则，相当于比语法又抽象了一层，我们可以叫做meta-meta层。<br>在《编译原理实战课》中，我专门有一讲，是讲元编程的（meta-programming）。我们设计编译器，实际上是在做元编程，是在更高的抽象层次上编程，工作的对象是程序本身（而程序的工作对象是数据）。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1610935151,"ip_address":"","comment_id":273142,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610454937","product_id":100034101,"comment_content":"看到老师在上一节的留言里面写了语法和文法的区别，但是这节里面：“我们已经知道，语法规则是由上下文无关文法表示的，而上下文无关文法是由一组替换规则（又叫产生式）组成的，比如算术表达式的文法规则可以表达成下面这种形式”，语法规则和文法规则的定义又不一致，不应该是“文法规则是由上下文无关文法表示的”吗，不知道是老师手误还是我理解错了？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513508,"discussion_content":"我换个说法解释一下，看看是否能帮助你理解：\n语法，规定了如何写出正确的程序，相当于比程序抽象了一层，我们可以叫做meta层；\n而文法，规定了如何写出正确的语法规则，相当于比语法又抽象了一层，我们可以叫做meta-meta层。\n在《编译原理实战课》中，我专门有一讲，是讲元编程的（meta-programming）。我们设计编译器，实际上是在做元编程，是在更高的抽象层次上编程，工作的对象是程序本身（而程序的工作对象是数据）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610935151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204981,"user_name":"炎发灼眼","can_delete":false,"product_type":"c1","uid":1425953,"ip_address":"","ucode":"7D195057C8E94C","user_header":"https://static001.geekbang.org/account/avatar/00/15/c2/21/a8ef82ac.jpg","comment_is_top":false,"comment_ctime":1586503882,"is_pvip":false,"replies":[{"id":"76655","content":"你的问题我没太看明白。只能根据我猜的来回答。<br>优先级：通过语法的嵌套来实现，这样乘法的节点一定会出现在加法的下面。不过优先级还有其他实现办法，在第二季中介绍Java编译器时会讲。<br>结合性：结合性确实是个难题。纯粹按照语法，右递归的文法无法产生出左结合性的AST。所以这里是要做特殊处理，把递归的匹配过程转变成一个循环过程，并且手工控制AST节点的父子关系。<br>我这样总结，你是否能明白？","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586528226,"ip_address":"","comment_id":204981,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586503882","product_id":100034101,"comment_content":"老师，看了这个之后，一个地方很疑惑，按照新的推导方式和生成出来的AST来看，如果是左结合的推导，是从右往左推导，先推导最右边的节点，在逐次往前推导前面的节点，最后才能生成正常的树结构；而是用算法来实现文法规则的时候，还是按照正常的从左到右，只是需要按照优先级来判断是否父节点，望老师给予解答，谢谢","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491341,"discussion_content":"你的问题我没太看明白。只能根据我猜的来回答。\n优先级：通过语法的嵌套来实现，这样乘法的节点一定会出现在加法的下面。不过优先级还有其他实现办法，在第二季中介绍Java编译器时会讲。\n结合性：结合性确实是个难题。纯粹按照语法，右递归的文法无法产生出左结合性的AST。所以这里是要做特殊处理，把递归的匹配过程转变成一个循环过程，并且手工控制AST节点的父子关系。\n我这样总结，你是否能明白？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586528226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199935,"user_name":"simatongming","can_delete":false,"product_type":"c1","uid":1801319,"ip_address":"","ucode":"7E680D3E4EB36D","user_header":"","comment_is_top":false,"comment_ctime":1585501881,"is_pvip":false,"replies":[{"id":"76643","content":"Id是Identifier的缩写，就是标识符，比如变量名称什么的。每门语言都会支持标识符。在本课程中，经常把它写做Id。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586524350,"ip_address":"","comment_id":199935,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585501881","product_id":100034101,"comment_content":"pri -&gt; Id | Num | (add) 这里的Id代表什么意思","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489898,"discussion_content":"Id是Identifier的缩写，就是标识符，比如变量名称什么的。每门语言都会支持标识符。在本课程中，经常把它写做Id。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586524350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189073,"user_name":"Geek_9086e6","can_delete":false,"product_type":"c1","uid":1895344,"ip_address":"","ucode":"8063EA4B90E01F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rhB6z7ooXBib03jbBjgb8k6ziaRVPGrVicvYFAWlRPe2Y1XzdJYfhjFkFF7LnhQEEpEUSAWheeDa1p9JxGib9LciaCw/132","comment_is_top":false,"comment_ctime":1584452894,"is_pvip":false,"replies":[{"id":"74135","content":"如果你要设计一门语言，你肯定要提前设计好这门语言的词法规则、语法规则、语义规则、执行模型等等。<br>不过，这些规则不一定是用我们教科书里比较形式化的方法表达的，极客们早年有可能只是动手实现这些语言而已。这些形式化的方法，是后来的研究者们总结出来的。<br>这可能就是理论和实践的关系，两者是交错着互相促进的。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1585128432,"ip_address":"","comment_id":189073,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584452894","product_id":100034101,"comment_content":"老师， 是先有语言还是先有规则？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487602,"discussion_content":"如果你要设计一门语言，你肯定要提前设计好这门语言的词法规则、语法规则、语义规则、执行模型等等。\n不过，这些规则不一定是用我们教科书里比较形式化的方法表达的，极客们早年有可能只是动手实现这些语言而已。这些形式化的方法，是后来的研究者们总结出来的。\n这可能就是理论和实践的关系，两者是交错着互相促进的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585128432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158540,"user_name":"ldd","can_delete":false,"product_type":"c1","uid":1208157,"ip_address":"","ucode":"E8344FAFFE5CF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/5d/f0a19f09.jpg","comment_is_top":false,"comment_ctime":1575416708,"is_pvip":false,"replies":[{"id":"76764","content":"你提的方法，跟自底向上的语法分析算法是不谋而合的。你可以看看第18讲的LR算法，它正是用栈作为工作区的。<br><br>如果仅仅是处理二元运算的表达式，还可以更简单。在第二季中会剖析很多实际的编译器。其中Java编译器在处理二元运算表达式的算法就是采用栈的，值得好好研究。<br><br>你能在不同的知识之间建立联系，令人印象深刻！给你点赞！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586668991,"ip_address":"","comment_id":158540,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575416708","product_id":100034101,"comment_content":"老师，我想问下，我之前的理解是把中缀表达式用栈改写成后缀表达式也可以生成AST树，老师推荐这种做法吗？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476761,"discussion_content":"你提的方法，跟自底向上的语法分析算法是不谋而合的。你可以看看第18讲的LR算法，它正是用栈作为工作区的。\n\n如果仅仅是处理二元运算的表达式，还可以更简单。在第二季中会剖析很多实际的编译器。其中Java编译器在处理二元运算表达式的算法就是采用栈的，值得好好研究。\n\n你能在不同的知识之间建立联系，令人印象深刻！给你点赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586668991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157469,"user_name":"慧强","can_delete":false,"product_type":"c1","uid":1630889,"ip_address":"","ucode":"3864410D115D02","user_header":"https://static001.geekbang.org/account/avatar/00/18/e2/a9/d2720608.jpg","comment_is_top":false,"comment_ctime":1575170624,"is_pvip":false,"replies":[{"id":"77066","content":"左递归的文法改写以后，已经变成右递归的了。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586850437,"ip_address":"","comment_id":157469,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575170624","product_id":100034101,"comment_content":"左递归可以通过改写语法规则来避免，而改写后的语法又可以表达成简洁的 EBNF 格式，从而启发我们用循环代替右递归。 是不是错了，，应该为 从而启发我们用循环代替左递归？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476434,"discussion_content":"左递归的文法改写以后，已经变成右递归的了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586850437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151706,"user_name":"Geek_e986e3","can_delete":false,"product_type":"c1","uid":1642716,"ip_address":"","ucode":"EF53D2DEA59A8F","user_header":"","comment_is_top":false,"comment_ctime":1573780678,"is_pvip":false,"replies":[{"id":"76767","content":"你可以把add&#39;不停地用+ mul add&#39;去替换，直到最后，采用 ε。这实际上就是不停地重复 + mul，所以可以写成正则表达式的样子（+ mul）*。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586670606,"ip_address":"","comment_id":151706,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1573780678","product_id":100034101,"comment_content":"老师想问问<br><br>add -&gt; mul add&#39;<br>add&#39; -&gt; + mul add&#39; | ε<br>这个表达式是啥意思 为何和之前的语法不一样。<br>还有 没看明白咋就变成了这个：add -&gt; mul (+ mul)*<br>能解释下吗？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474582,"discussion_content":"你可以把add&amp;#39;不停地用+ mul add&amp;#39;去替换，直到最后，采用 ε。这实际上就是不停地重复 + mul，所以可以写成正则表达式的样子（+ mul）*。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586670606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1116508,"avatar":"https://static001.geekbang.org/account/avatar/00/11/09/5c/b5d79d20.jpg","nickname":"李亮亮","note":"","ucode":"290907F930B261","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201649,"discussion_content":"add -> mul add` 你把 add` 换进去就变成了 add -> mul ( + mul add` |  e)，如果是替换为 e 那么就变成了 add -> mul + (e)，而 e 表示空， 最后就变成 add -> mul，如果 括号里面的 add ` 继续推导成 + mul add` 那么就变成 add -> mul (+ mul + mul add`)，然后就这样一直推导下去最后终于 会有一个 add` 推导成 e，所以就变成 add -> mul (+ mul)*n，其中 * 表示乘法，跟上面*不是一个意思，最后总结 add -> mul 和 add -> mul ( + mul)*n，用正则表达式就可以表达成 add -> mul (+ mul)*，这里的 * 就是正则表达式里的* 用来表示0个或者多个。这里面的 + 纯粹就是用了匹配一个 加号符号 “+”，根据评论来看我的理解就是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583819112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145366,"user_name":"knull","can_delete":false,"product_type":"c1","uid":1043484,"ip_address":"","ucode":"3BFECF3D29F40C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/1c/d323b066.jpg","comment_is_top":false,"comment_ctime":1572258643,"is_pvip":false,"replies":[{"id":"57597","content":"这两个产生式应该是不等价的。<br>你修改后的产生式，不能解析3*5这样的纯乘法表达式。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573372033,"ip_address":"","comment_id":145366,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572258643","product_id":100034101,"comment_content":"add -&gt; mul | add + mul 改成add-&gt; pri |add + mul，是否可以","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472358,"discussion_content":"这两个产生式应该是不等价的。\n你修改后的产生式，不能解析3*5这样的纯乘法表达式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573372033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142687,"user_name":"eviltion","can_delete":false,"product_type":"c1","uid":1515445,"ip_address":"","ucode":"022DE8510B825E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/mWicFKgbjL299CQPEhoFdSAphVb4UpibkhF8loRxryBRt3H7ZGkibibhaKANTxvSiatic4PLCy2MsbEMH1hc76YefPUw/132","comment_is_top":false,"comment_ctime":1571458237,"is_pvip":true,"replies":[{"id":"57704","content":"对的，递归下降算法都是先匹配完第一个元素，再匹配第二个，从左向右。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573447472,"ip_address":"","comment_id":142687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571458237","product_id":100034101,"comment_content":"add -&gt; mul add&#39;<br>add&#39; -&gt; + mul add&#39; | ε<br>这个是顺序匹配吗？就是先匹配mul然后返回的是2再匹配add&#39;","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471227,"discussion_content":"对的，递归下降算法都是先匹配完第一个元素，再匹配第二个，从左向右。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573447472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138644,"user_name":"郑家庄赶大车的老郑","can_delete":false,"product_type":"c1","uid":1687570,"ip_address":"","ucode":"D432A3961840B8","user_header":"https://static001.geekbang.org/account/avatar/00/19/c0/12/1afb4b75.jpg","comment_is_top":false,"comment_ctime":1570406461,"is_pvip":false,"replies":[{"id":"53813","content":"非常对！<br>1.就是要把这些看上去很难的概念，变成自己的直观理解。<br>2.基础概念，比如啥叫推导，就是要重视。不要觉得不好意思。还是那个话，在别人提不出问题的地方提问，才叫厉害。基础概念，我们容易一模糊就过去了。但推敲一下呢，很有意思。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1570675887,"ip_address":"","comment_id":138644,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1570406461","product_id":100034101,"comment_content":"作为一个外行，最开始影响我理解的竟然是&quot;推导&quot;这样的术语，硬头皮看了，似乎是“可以展开为”的意思，不知道理解对了没有。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469605,"discussion_content":"非常对！\n1.就是要把这些看上去很难的概念，变成自己的直观理解。\n2.基础概念，比如啥叫推导，就是要重视。不要觉得不好意思。还是那个话，在别人提不出问题的地方提问，才叫厉害。基础概念，我们容易一模糊就过去了。但推敲一下呢，很有意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570675887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1687570,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c0/12/1afb4b75.jpg","nickname":"郑家庄赶大车的老郑","note":"","ucode":"D432A3961840B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":25078,"discussion_content":"发现后面的代码似乎把结合性的问题也顺便解决了，厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570415569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136682,"user_name":"缺个豆饼吗","can_delete":false,"product_type":"c1","uid":1390212,"ip_address":"","ucode":"EF050C820E4E17","user_header":"https://static001.geekbang.org/account/avatar/00/15/36/84/e19b05dd.jpg","comment_is_top":false,"comment_ctime":1569490912,"is_pvip":false,"replies":[{"id":"53932","content":"棒！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1570715649,"ip_address":"","comment_id":136682,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1569490912","product_id":100034101,"comment_content":"继续交作业<br>https:&#47;&#47;github.com&#47;yuguomin&#47;my-compiler","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468752,"discussion_content":"棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570715649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1733802,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/74/aa/ee89876e.jpg","nickname":"曹扬","note":"","ucode":"1953DBEF1E17DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66697,"discussion_content":"牛逼....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575098877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133630,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1568624403,"is_pvip":false,"replies":[{"id":"51363","content":"Great!","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1568692357,"ip_address":"","comment_id":133630,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568624403","product_id":100034101,"comment_content":"上一节 看懂了之后再看这一节 感觉简单了好多","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467454,"discussion_content":"Great!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568692357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130620,"user_name":"xiaobang","can_delete":false,"product_type":"c1","uid":1157508,"ip_address":"","ucode":"1735BDCFD61655","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg","comment_is_top":false,"comment_ctime":1567495635,"is_pvip":false,"replies":[{"id":"49330","content":"bnf只是用来书写文法的一种方式，代表的是文法。<br>而能不能消除左递归和保持左结合性，是个算法问题。不同的算法有不同的结果。<br>单纯用递归下降算法是不能同时做好这两件事情的。所以，我们在示例代码中，对于保持左结合性是特殊处理的。好在这种特殊处理是有共性的，可以用同样的方法处理所有这类情况，所以也不算太难看。<br>如果改成别的算法，是有办法同时处理这两个事情的。后面会讲的自底向上的LR算法就能。这也可能是有些人觉得LR算法更好的原因。但我不太同意，因为能解决工程问题的就是好东西。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1567648896,"ip_address":"","comment_id":130620,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567495635","product_id":100034101,"comment_content":"请问下只用bnf是不是不能同时消除左递归和保持左结合性？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466033,"discussion_content":"bnf只是用来书写文法的一种方式，代表的是文法。\n而能不能消除左递归和保持左结合性，是个算法问题。不同的算法有不同的结果。\n单纯用递归下降算法是不能同时做好这两件事情的。所以，我们在示例代码中，对于保持左结合性是特殊处理的。好在这种特殊处理是有共性的，可以用同样的方法处理所有这类情况，所以也不算太难看。\n如果改成别的算法，是有办法同时处理这两个事情的。后面会讲的自底向上的LR算法就能。这也可能是有些人觉得LR算法更好的原因。但我不太同意，因为能解决工程问题的就是好东西。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567648896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130497,"user_name":"杨涛","can_delete":false,"product_type":"c1","uid":1082978,"ip_address":"","ucode":"2B6B6AEFFB54A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/86/62/22e9aeb0.jpg","comment_is_top":false,"comment_ctime":1567473570,"is_pvip":false,"replies":[{"id":"49394","content":"没太看明白你的问题。<br>是你自己写了一个javascript版本的解析器吗？你要把代码的链接发上来，并且把你的问题描述得更完整一点。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1567654411,"ip_address":"","comment_id":130497,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567473570","product_id":100034101,"comment_content":"var a = true; var c=[]&amp;&amp;a = 1+3;我在浏览器中尝试提示invalid left-hand side assignment.不能匹配or-&gt;or|or=exp请老师解惑下吧","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465977,"discussion_content":"没太看明白你的问题。\n是你自己写了一个javascript版本的解析器吗？你要把代码的链接发上来，并且把你的问题描述得更完整一点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567654411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130442,"user_name":"刷刷刷题ing","can_delete":false,"product_type":"c1","uid":1253311,"ip_address":"","ucode":"E4382AE6D4BA03","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/bf/b06d9521.jpg","comment_is_top":false,"comment_ctime":1567467853,"is_pvip":false,"replies":[{"id":"49363","content":"问题1<br>改写成循环，是为了产生左结合性。因为按照标准的递归下降算法，递归项在右边，只能右结合。<br>好在改写成循环的这个方式，也是可以通用地处理所有这类情况。<br><br>问题2.前缀表达式，你指的是这里吗？<br>add -&gt; mul add&#39;<br>add&#39; -&gt; + mul add&#39; | ε<br>add&#39;不会有左递归问题的。<br>这正是递归下降算法解决左递归的标准思路。<br>如果没有解答清楚，你再继续提问！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1567651313,"ip_address":"","comment_id":130442,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567467853","product_id":100034101,"comment_content":"老师您好，有两个问题<br>1.对于中缀表达式来说，消除左递归的方式就是改写成循环吗？<br>2.文稿中有一个地方改写成了前缀表达式，但并没有消除左递归，那么改写成前缀表达式的意义在哪里呢？<br>非常感谢！","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465957,"discussion_content":"问题1\n改写成循环，是为了产生左结合性。因为按照标准的递归下降算法，递归项在右边，只能右结合。\n好在改写成循环的这个方式，也是可以通用地处理所有这类情况。\n\n问题2.前缀表达式，你指的是这里吗？\nadd -&amp;gt; mul add&amp;#39;\nadd&amp;#39; -&amp;gt; + mul add&amp;#39; | ε\nadd&amp;#39;不会有左递归问题的。\n这正是递归下降算法解决左递归的标准思路。\n如果没有解答清楚，你再继续提问！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567651313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130222,"user_name":"狐狸","can_delete":false,"product_type":"c1","uid":1342498,"ip_address":"","ucode":"B8F5A73AD9DA8B","user_header":"https://static001.geekbang.org/account/avatar/00/14/7c/22/d488bf85.jpg","comment_is_top":false,"comment_ctime":1567407361,"is_pvip":false,"replies":[{"id":"48586","content":"首先，生成的AST很漂亮，很直观。我原来的输出只有缩进，没有连线，不如你的直观:-D<br>关于你的疑问：<br>1. -和 --是两个不同的Token，在词法分析阶段就可以区分开。<br>2.同样是-，有时当负号，有时当减号，这是在语法规则中去区分的，是要设计成不同的语法规则。比如07讲里有Antlr的规则，这里拷贝过来你参考一下：<br>expression:<br>    | prefix=(&#39;+&#39;|&#39;-&#39;|&#39;++&#39;|&#39;--&#39;) expression<br>...<br>    | expression bop=(&#39;+&#39;|&#39;-&#39;) expression <br>...<br>   ;<br>当成负号和当成减号，是在两条不同的产生式里。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1567414002,"ip_address":"","comment_id":130222,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567407361","product_id":100034101,"comment_content":"老师看完这篇我有如下几个问题：<br>1、请问exp -&gt; or | or = exp这一句中or = exp对应出来是一个如何的表达式呢？或运算符+赋值运算符+一个表达式？<br>2、在词法分析中，对于负数这个字面量，文法该如何表示才不会和‘-&#39;（减号）、&#39;--&#39;（自减）或‘-=&#39;等符号相冲突呢？<br>以下是我根据此次结果写的测试：<br>测试用例：&quot;int a= 23 * 1 -2;int b = 3 *15 + 17*(2+3&#47;(a + 1))+ 1&#47; 4* 3 - 8;&quot;<br>结果：<br>Root:  Root<br>  |--Declaration_Int:  a<br>  |    |--Assignment:  =<br>  |    |    |--Arithmetic_Subtract:  -<br>  |    |    |    |--Arithmetic_Multiply:  *<br>  |    |    |    |    |--IntLiteral:  23<br>  |    |    |    |    |--IntLiteral:  1<br>  |    |    |    |--IntLiteral:  2<br>  |--Declaration_Int:  b<br>  |    |--Assignment:  =<br>  |    |    |--Arithmetic_Subtract:  -<br>  |    |    |    |--Arithmetic_Add:  +<br>  |    |    |    |    |--Arithmetic_Add:  +<br>  |    |    |    |    |    |--Arithmetic_Multiply:  *<br>  |    |    |    |    |    |    |--IntLiteral:  3<br>  |    |    |    |    |    |    |--IntLiteral:  15<br>  |    |    |    |    |    |--Arithmetic_Multiply:  *<br>  |    |    |    |    |    |    |--IntLiteral:  17<br>  |    |    |    |    |    |    |--Arithmetic_Add:  +<br>  |    |    |    |    |    |    |    |--IntLiteral:  2<br>  |    |    |    |    |    |    |    |--Arithmetic_Divide:  &#47;<br>  |    |    |    |    |    |    |    |    |--IntLiteral:  3<br>  |    |    |    |    |    |    |    |    |--Arithmetic_Add:  +<br>  |    |    |    |    |    |    |    |    |    |--Id:  a<br>  |    |    |    |    |    |    |    |    |    |--IntLiteral:  1<br>  |    |    |    |    |--Arithmetic_Multiply:  *<br>  |    |    |    |    |    |--Arithmetic_Divide:  &#47;<br>  |    |    |    |    |    |    |--IntLiteral:  1<br>  |    |    |    |    |    |    |--IntLiteral:  4<br>  |    |    |    |    |    |--IntLiteral:  3<br>  |    |    |    |--IntLiteral:  8<br>请老师解惑点评。","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465864,"discussion_content":"首先，生成的AST很漂亮，很直观。我原来的输出只有缩进，没有连线，不如你的直观:-D\n关于你的疑问：\n1. -和 --是两个不同的Token，在词法分析阶段就可以区分开。\n2.同样是-，有时当负号，有时当减号，这是在语法规则中去区分的，是要设计成不同的语法规则。比如07讲里有Antlr的规则，这里拷贝过来你参考一下：\nexpression:\n    | prefix=(&amp;#39;+&amp;#39;|&amp;#39;-&amp;#39;|&amp;#39;++&amp;#39;|&amp;#39;--&amp;#39;) expression\n...\n    | expression bop=(&amp;#39;+&amp;#39;|&amp;#39;-&amp;#39;) expression \n...\n   ;\n当成负号和当成减号，是在两条不同的产生式里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567414002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082978,"avatar":"https://static001.geekbang.org/account/avatar/00/10/86/62/22e9aeb0.jpg","nickname":"杨涛","note":"","ucode":"2B6B6AEFFB54A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7276,"discussion_content":"1、请问exp -> or | or = exp这一句中or = exp对应出来是一个如何的表达式呢？或运算符+赋值运算符+一个表达式？还是没有搞懂这个！！！你懂了吗？能举个例子吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567468957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128368,"user_name":"Spring","can_delete":false,"product_type":"c1","uid":1007267,"ip_address":"","ucode":"80594B4B056A53","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/a3/9670d4b4.jpg","comment_is_top":false,"comment_ctime":1566875791,"is_pvip":false,"replies":[{"id":"47807","content":"原文中的是对的，没有问题。<br>你拷贝的时候，缩进出了一些问题，但次序没出错。<br>第一次计算的是：<br>+<br>  2<br>  3<br>2和3是+的子节点，它们在最底下，深度最深。它们得出值来以后，再跟4计算。<br>你再琢磨一下？","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566959550,"ip_address":"","comment_id":128368,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566875791","product_id":100034101,"comment_content":"老师，你好： 2+3+4+5 的AST结构是不是有问题？<br>Programm Calculator<br>    AdditiveExp +<br>        AdditiveExp +<br>        AdditiveExp +<br>            IntLiteral 2<br>            IntLiteral 3<br>                IntLiteral 4<br>        IntLiteral 5<br>是不是应该是这个结构：<br>Programm Calculator<br>    AdditiveExp +<br>        AdditiveExp +<br>             IntLiteral 4<br>        AdditiveExp +<br>            IntLiteral 2<br>            IntLiteral 3<br>        IntLiteral 5<br>","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464923,"discussion_content":"原文中的是对的，没有问题。\n你拷贝的时候，缩进出了一些问题，但次序没出错。\n第一次计算的是：\n+\n  2\n  3\n2和3是+的子节点，它们在最底下，深度最深。它们得出值来以后，再跟4计算。\n你再琢磨一下？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566959550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127418,"user_name":"秋成","can_delete":false,"product_type":"c1","uid":1238915,"ip_address":"","ucode":"FDC0B94398B6DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/83/20456810.jpg","comment_is_top":false,"comment_ctime":1566704633,"is_pvip":false,"replies":[{"id":"47335","content":"动手改一下我们的示例代码，针对左递归的文法运行一下递归下降算法，就会知道会出现什么问题了。<br>基于你提的问题，我强烈建议你动动手。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566791715,"ip_address":"","comment_id":127418,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566704633","product_id":100034101,"comment_content":"没明白 左递归的概念  &quot;加法表达式 + 乘法表达式","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464482,"discussion_content":"动手改一下我们的示例代码，针对左递归的文法运行一下递归下降算法，就会知道会出现什么问题了。\n基于你提的问题，我强烈建议你动动手。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566791715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127050,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1566544939,"is_pvip":true,"replies":[{"id":"47012","content":"看到你的进步很高兴！<br><br>mul是add&#39;的下一级，是乘法。它也可以像加法一样做类似的变换。<br>add&#39;很容易解析这样的Token串：+ 2 + 3 + 4 ...<br>或者： + 2 + 3*5 + 4 ...<br>","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566553441,"ip_address":"","comment_id":127050,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566544939","product_id":100034101,"comment_content":"优先级那里 exp -&gt; or | or = exp 是不是应该是 exp -&gt; or | or= | exp ? <br>上一讲中消除左递归，导致了结合性问题， 这一讲再通过需要解决结合性问题，引出用循环来消除左递归。课程循序渐进， 感觉老师说的直觉在一点点建立起来<br>有一个问题： add -&gt; add + mul  是怎么改成 <br>add -&gt; mul add&#39; <br>add&#39; -&gt; + mul add&#39; | ε 的，<br>其中 mul 和 add&#39; 是什么关系？ ","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464295,"discussion_content":"看到你的进步很高兴！\n\nmul是add&amp;#39;的下一级，是乘法。它也可以像加法一样做类似的变换。\nadd&amp;#39;很容易解析这样的Token串：+ 2 + 3 + 4 ...\n或者： + 2 + 3*5 + 4 ...\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566553441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082978,"avatar":"https://static001.geekbang.org/account/avatar/00/10/86/62/22e9aeb0.jpg","nickname":"杨涛","note":"","ucode":"2B6B6AEFFB54A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6006,"discussion_content":"麻烦问下，能写一个or=的例子吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566602469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126899,"user_name":"杨涛","can_delete":false,"product_type":"c1","uid":1082978,"ip_address":"","ucode":"2B6B6AEFFB54A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/86/62/22e9aeb0.jpg","comment_is_top":false,"comment_ctime":1566519561,"is_pvip":false,"replies":[{"id":"46974","content":"那个等号，我省略了引号，是一个Token。<br><br>也就是一个or表达式，跟等号token，跟另一个表达式。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566530052,"ip_address":"","comment_id":126899,"utype":1}],"discussion_count":5,"race_medal":0,"score":"1566519561","product_id":100034101,"comment_content":"exp -&gt; or | or = exp   老师，一个逻辑运算=一个表达式是什么意思？前端表示看不懂！<br>","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464235,"discussion_content":"那个等号，我省略了引号，是一个Token。\n\n也就是一个or表达式，跟等号token，跟另一个表达式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566530052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070253,"avatar":"https://static001.geekbang.org/account/avatar/00/10/54/ad/6ee2b7cb.jpg","nickname":"Jacob.C","note":"","ucode":"034998E7A7CCD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6131,"discussion_content":"我没没看懂。or “=” exp 匹配的语句是什么样子的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566718416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1082978,"avatar":"https://static001.geekbang.org/account/avatar/00/10/86/62/22e9aeb0.jpg","nickname":"杨涛","note":"","ucode":"2B6B6AEFFB54A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1070253,"avatar":"https://static001.geekbang.org/account/avatar/00/10/54/ad/6ee2b7cb.jpg","nickname":"Jacob.C","note":"","ucode":"034998E7A7CCD1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276879,"discussion_content":"你好现在看懂了没？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590963592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6131,"ip_address":""},"score":276879,"extra":""}]},{"author":{"id":1082978,"avatar":"https://static001.geekbang.org/account/avatar/00/10/86/62/22e9aeb0.jpg","nickname":"杨涛","note":"","ucode":"2B6B6AEFFB54A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6105,"discussion_content":"exp -> or | or =&#39;| exp正确的是这个样子的吗？另外老师能写一个or=&#39;的例子吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566696989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082978,"avatar":"https://static001.geekbang.org/account/avatar/00/10/86/62/22e9aeb0.jpg","nickname":"杨涛","note":"","ucode":"2B6B6AEFFB54A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6104,"discussion_content":"老师能写一个or=的例子吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566696821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126875,"user_name":"Giacomo","can_delete":false,"product_type":"c1","uid":1478055,"ip_address":"","ucode":"BE5B1E68BCDBB3","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/a7/2176bbc5.jpg","comment_is_top":false,"comment_ctime":1566511707,"is_pvip":false,"replies":[{"id":"46976","content":"BNF带上递归就可以表达无限。BNF本身不行。但因为它是放在文法里，而文法是可以递归嵌套的。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566530134,"ip_address":"","comment_id":126875,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566511707","product_id":100034101,"comment_content":"老师老师，BNF能表达无限的情况吗？因为我发现EBNF是可以的，但你又说它们是等价的","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464217,"discussion_content":"BNF带上递归就可以表达无限。BNF本身不行。但因为它是放在文法里，而文法是可以递归嵌套的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566530134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126306,"user_name":"Void_seT","can_delete":false,"product_type":"c1","uid":1070863,"ip_address":"","ucode":"DD55CB0198A5CD","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg","comment_is_top":false,"comment_ctime":1566359602,"is_pvip":false,"replies":[{"id":"46639","content":"唉，从加法规则里整行拷贝，修改时又少修改了一个地方。<br><br>已经在调整了。谢谢你仔细的阅读！<br>","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566373910,"ip_address":"","comment_id":126306,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566359602","product_id":100034101,"comment_content":"介绍优先级的层级表示时，BNF的表达式最后一行<br>mul -&gt; pri | mul * pri | add &#47; mul ，是不是应该是<br>mul -&gt; pri | mul * pri | mul &#47; pri 啊？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463934,"discussion_content":"唉，从加法规则里整行拷贝，修改时又少修改了一个地方。\n\n已经在调整了。谢谢你仔细的阅读！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566373910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126272,"user_name":"Varphp","can_delete":false,"product_type":"c1","uid":1590892,"ip_address":"","ucode":"889550391E3F75","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTImmLJCKerl9CI4sTpPDNCUgswp04ybsJ4J6mpJmMlHh43Iibp1RPOLam5PpOv2ZDGcjvGrY94lNRw/132","comment_is_top":false,"comment_ctime":1566355791,"is_pvip":false,"replies":[{"id":"46642","content":"没有冲突。ebnf是bnf的超级。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566374272,"ip_address":"","comment_id":126272,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566355791","product_id":100034101,"comment_content":"Bnf和ebnf使用会有冲突吗？还是类似于es和js的","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463917,"discussion_content":"没有冲突。ebnf是bnf的超级。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566374272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126220,"user_name":"w1sl1y","can_delete":false,"product_type":"c1","uid":1270958,"ip_address":"","ucode":"915073A14B17AB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erBkHFLUBpftqQlK5brd3EDaQFaEfYLfc9iaQrDNJv4eHeSRnSgE5vKnSibJvjUb5hJx5r5nOwa2bRw/132","comment_is_top":false,"comment_ctime":1566351007,"is_pvip":false,"replies":[{"id":"46651","content":"你说的对。要像前一节的代码一样判断一下child2是否为空。<br><br>代码库已经调整过来了！感谢！<br><br>我又加了两个测试用例，来检查这种处理错误语法的逻辑。你再看看！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1566375741,"ip_address":"","comment_id":126220,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566351007","product_id":100034101,"comment_content":"老师，新代码中child2判空没加，不合法表达式会有空指针异常。<br>SimpleASTNode child2 = multiplicative(tokens);<br>                    if (child2 != null) {<br>                        node = new  SimpleASTNode(ASTNodeType.Additive,token.getText());<br>                        node.addChild(child1);<br>                        node.addChild(child2);<br>                        child1 = node;<br>                    } else {<br>                        throw new Exception(&quot;invalid additive expression ,expecting the right part!&quot;);<br>                    }","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463889,"discussion_content":"你说的对。要像前一节的代码一样判断一下child2是否为空。\n\n代码库已经调整过来了！感谢！\n\n我又加了两个测试用例，来检查这种处理错误语法的逻辑。你再看看！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566375741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}