{"id":231454,"title":"01 | 重新认识C++：生命周期和编程范式","content":"<p>你好，我是Chrono。</p><p>今天是专栏的第一节正式课。我想，既然你选择了这个专栏，你就应该已经对C++有所了解了，而且有过一些开发经验，甚至还掌握了一两种其他的语言。</p><p>苏轼有诗云：“不识庐山真面目，只缘身在此山中。”学习C++很容易被纷繁复杂的语法细节所吸引、迷惑，所以，我决定从“<span class=\"orange\">生命周期</span>”和“<span class=\"orange\">编程范式</span>”这两个不太常见的角度来“剖析”一下C++，站在一个更高的层次上审视这门“历久弥新”的编程语言，帮你认清楚C++最本质的东西。</p><p>这样，今后在写程序的时候，你也会有全局观或者说是大局观，更能从整体上把握程序架构，而不会迷失在那些琐碎的细枝末节里。</p><p>现在，我们先来了解下C++的生命周期。</p><h2>C++程序的生命周期</h2><p>如果你学过一点软件工程的知识，就一定知道“瀑布模型”，它定义了软件或者是项目的生命周期——从需求分析开始，经过设计、开发、测试等阶段，直到最终交付给用户。</p><p>“瀑布模型”把软件的生命周期分成了多个阶段，每个阶段之间分工明确，相互独立，而且有严格的先后次序，是一个经典的开发模型。虽然它已经不再适合瞬息万变的互联网产业了，但仍然有许多值得借鉴和参考的地方。</p><p>那么，说了半天，“瀑布模型”跟C++程序有什么关系呢？</p><!-- [[[read_end]]] --><p>其实，从软件工程的视角来看，一个C++程序的生命周期也是“瀑布”形态的，也可以划分出几个明确的阶段，阶段之间顺序衔接，使用类似的方法，就可以更好地理解C++程序的运行机制，帮助我们写出更好的代码。</p><p>不过，因为C++程序本身就已经处在“开发”阶段了，所以不会有“需求分析”“设计”这样的写文档过程。所以，一个C++程序从“诞生”到“消亡”，要经历这么几个阶段：<strong>编码（Coding）、预处理（Pre-processing）、编译（Compiling）和运行（Running）</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/4c/b6696db53248d122cd57ddd9a8e52a4c.jpg?wh=1985*1463\" alt=\"\" title=\"C++程序的四个阶段\"></p><h2>C++程序的四个阶段</h2><p><strong>编码</strong>应该是你很熟悉的一个阶段了，这也是我们“明面”上的开发任务最集中的地方。</p><p>在这个阶段，我们的主要工作就是在编辑器里“敲代码”：定义变量，写语句，实现各种数据结构、函数和类。</p><p><strong>编码阶段是C++程序生命周期的起点，也是最重要的阶段，是后续阶段的基础，直接决定了C++程序的“生存质量”</strong>。</p><p>显然，在编码阶段，我们必须要依据一些规范，不能“胡写一气”，<strong>最基本的要求是遵循语言规范和设计文档，再高级一点的话，还有代码规范、注释规范、设计模式、编程惯用法，等等</strong>。现在市面上绝大部分的资料都是在教授这个阶段的知识，在专栏后面，我也会重点讲一讲我在这方面的一些经验积累。</p><p>那么，编码阶段之后是什么呢？</p><p>可能对你来说稍微有点陌生，这个阶段叫<strong>预处理</strong>。</p><p>所谓的预处理，其实是相对于下一个阶段“编译”而言的，在编译之前，预先处理一下源代码，既有点像是编码，又有点像是编译，是一个中间阶段。</p><p>预处理是C/C++程序独有的阶段，其他编程语言都没有，这也算是C/C++语言的一个特色了。</p><p>在这个阶段，发挥作用的是预处理器（Pre-processor）。它的输入是编码阶段产生的源码文件，输出是经过“预处理”的源码文件。“预处理”的目的是文字替换，用到的就是我们熟悉的各种预处理指令，比如#include、#define、#if等，实现“<strong>预处理编程</strong>”。这部分内容，我后面还会展开讲。</p><p>不过，你要注意的是，它们都以符号“#”开头，虽然是C++程序的一部分，但严格来说不属于C++语言的范畴，因为它走的是预处理器。</p><p>在预处理之后，C++程序就进入了<strong>编译</strong>阶段，更准确地说，应该是“编译”和“链接（Linking）”。简单起见，我统一称之为“编译”。</p><p>在编译阶段，C++程序——也就是经过预处理的源码——要经过编译器和链接器的“锤炼”，生成可以在计算机上运行的二进制机器码。这里面的讲究是最多的，也是最复杂的，C++编译器要分词、语法解析、生成目标码，并尽可能地去优化。</p><p>在编译的过程中，编译器还会根据C++语言规则检查程序的语法、语义是否正确，发现错误就会产生“编译失败”。这就是最基本的C++“静态检查”。</p><p>在处理源码时，由于编译器是依据C++语法检查各种类型、函数的定义，所以，在这个阶段，我们就能够以编译器为目标进行编程，有意识地控制编译器的行为。这里有个新名词，叫“<strong>模板元编程</strong>”。不过，“模板元编程”比较复杂，不太好理解，属于比较高级的用法，稍后我会再简单讲一下。</p><p>编译阶段之后，有了可执行文件，C++程序就可以跑起来了，进入<strong>运行</strong>阶段。这个时候，“静态的程序”被载入内存，由CPU逐条语句执行，就形成了“动态的进程”。</p><p>运行阶段也是我们最熟悉的了。在这个阶段，我们常做的是GDB调试、日志追踪、性能分析等，然后收集动态的数据、调整设计思路，再返回编码阶段，重走这个“瀑布模型”，实现“螺旋上升式”的开发。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/df/9cb2036ae3dbda30a00d58bdd4834ddf.jpg?wh=2276*1523\" alt=\"\"></p><p>好了，梳理清楚了C++程序生命周期的四个阶段，你可以看到，这和软件工程里的“瀑布模型”很相似，这些阶段也是职责明确的，前一个阶段的输出作为后一个阶段的输入，而且每个阶段都有自己的工作特点，我们可以有针对性地去做编程开发。</p><p>还有，别忘了软件工程里的“蝴蝶效应”“混沌理论”，大概意思是：一个Bug在越早的阶段发现并解决，它的价值就越高；一个Bug在越晚的阶段发现并解决，它的成本就越高。</p><p>所以，依据这个生命周期模型，<strong>我们应该在“编码”“预处理”“编译”这前面三个阶段多下功夫，消灭Bug，优化代码，尽量不要让Bug在“运行”阶段才暴露出来</strong>，也就是所谓的“把问题扼杀在萌芽期”。</p><h2>C++语言的编程范式</h2><p>说完了C++程序的生命周期，再来看看C++的编程范式（Paradigm）。</p><p>什么是编程范式呢？</p><p>关于这个概念，没有特别权威的定义，我给一个比较通俗的解释：<strong>“编程范式”是一种“方法论”，就是指导你编写代码的一些思路、规则、习惯、定式和常用语</strong>。</p><p>编程范式和编程语言不同，有的范式只能用于少数特定的语言，有的范式却适用于大多数语言；有的语言可能只支持一种范式，有的语言却可能支持多种范式。</p><p>那么，你一定知道或者听说过，C++是一种<strong>多范式</strong>的编程语言。具体来说，现代C++（11/14以后）支持“面向过程”“面向对象”“泛型”“模板元”“函数式”这五种主要的编程范式。</p><p>其中，<strong>“面向过程”“面向对象”是基础，支撑着后三种范式</strong>。我画了一个“五环图”，圆环重叠表示有的语言特性会同时应用于多种范式，可以帮你理解它们的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/6e/87/6ef13308109b2d1795e43c5206c32687.jpg?wh=8000*4500\" alt=\"\" title=\"C++编程范式的“五环图”\"></p><p>接下来，我就和你详细说说这五种编程范式。</p><h2>C++语言的五种范式</h2><p><strong>面向过程</strong>是C++里最基本的一种编程范式。它的核心思想是“命令”，通常就是顺序执行的语句、子程序（函数），把任务分解成若干个步骤去执行，最终达成目标。</p><p>面向过程体现在C++中，就是源自它的前身——C语言的那部分，比如变量声明、表达式、分支/循环/跳转语句，等等。</p><p><strong>面向对象</strong>是C++里另一个基本的编程范式。<strong>它的核心思想是“抽象”和“封装”</strong>，倡导的是把任务分解成一些高内聚低耦合的对象，这些对象互相通信协作来完成任务。它强调对象之间的关系和接口，而不是完成任务的具体步骤。</p><p>在C++里，面向对象范式包括class、public、private、virtual、this等类相关的关键字，还有构造函数、析构函数、友元函数等概念。</p><p><strong>泛型编程</strong>是自STL（标准模板库）纳入到C++标准以后才逐渐流行起来的新范式，核心思想是“一切皆为类型”，或者说是“参数化类型”“类型擦除”，使用模板而不是继承的方式来复用代码，所以运行效率更高，代码也更简洁。</p><p>在C++里，泛型的基础就是template关键字，然后是庞大而复杂的标准库，里面有各种泛型容器和算法，比如vector、map、sort，等等。</p><p>与“泛型编程”很类似的是<strong>模板元编程</strong>，这个词听起来好像很新，其实也有十多年的历史了，不过相对于前三个范式来说，确实“资历浅”。它的核心思想是“类型运算”，操作的数据是编译时可见的“类型”，所以也比较特殊，代码只能由编译器执行，而不能被运行时的CPU执行。</p><p>在讲编译阶段的时候我也说了，模板元编程是一种高级、复杂的技术，C++语言对它的支持也比较少，更多的是以库的方式来使用，比如type_traits、enable_if等。</p><p>最后一个<strong>函数式</strong>，它几乎和“面向过程”一样古老，但却直到近些年才走入主流编程界的视野。所谓的“函数式”并不是C++里写成函数的子程序，而是数学意义上、无副作用的函数，<strong>核心思想是“一切皆可调用”，通过一系列连续或者嵌套的函数调用实现对数据的处理</strong>。</p><p>函数式早在C++98时就有少量的尝试（bind1st/bind2nd等函数对象），但直到C++11引入了Lambda表达式，它才真正获得了可与其他范式并驾齐驱的地位。</p><p>好了，介绍完了这五种编程范式，你可以看到，它们基本覆盖了C++语言和标准库的各个成分，彼此之间虽然有重叠，但在理念、关键字、实现机制、运行阶段等方面的差异还是非常大的。</p><p>这就好像是五种秉性不同的“真气”，在C++语言里必须要有相当“浑厚”的内力才能把它们压制、收服、炼化，否则的话，一旦运用不当，就很容易“精神分裂”“走火入魔”。</p><p><strong>说得具体一点，就是要认识、理解这些范式的优势和劣势，在程序里适当混用，取长补短才是“王道”</strong>。</p><p>说到这儿，你肯定很关心，该选择哪种编程范式呢？</p><p>拿我自己来说，我的出发点是“<strong>尽量让周围的人都能看懂代码</strong>”，所以常用的范式是“过程+对象+泛型”，再加上少量的“函数式”，慎用“模板元”。</p><p>对于你来说，我建议根据自己的实际工作需求来决定。</p><p>我个人觉得，<strong>面向过程和面向对象是最基本的范式，是C++的基础，无论如何都是必须要掌握的</strong>，而后三种范式的学习难度就大一些。</p><p>如果是开发直接面对用户的普通应用（Application），那么你可以再研究一下“泛型”和“函数式”，就基本可以解决90%的开发问题了；如果是开发面向程序员的库（Library），那么你就有必要深入了解“泛型”和“模板元”，优化库的接口和运行效率。</p><p>当然，还有一种情况：如果你愿意挑战“最强大脑”，那么，“模板元编程”就绝对是你的不二选择（笑）。</p><h2>小结</h2><p>今天是开篇第一课，我带你从“生命周期”和“编程范式”这两个特别的角度深度“透视”了一下C++，做个简单小结：</p><ol>\n<li>C++程序的生命周期包括编码、预处理、编译、运行四个阶段，它们都有各自的特点；</li>\n<li>虽然我们只写了一个C++程序，但里面的代码可能会运行在不同的阶段，分别由预处理器、编译器和CPU执行；</li>\n<li>C++支持面向过程、面向对象、泛型、模板元、函数式共五种主要的编程范式；</li>\n<li>在C++里可以“无缝”混用多范式编程，但因为范式的差异比较大，必须小心谨慎，避免导致混乱。</li>\n</ol><h2>课下作业</h2><p>最后是课下作业时间，给你留两个思考题：</p><ol>\n<li>你是怎么理解C++程序的生命周期和编程范式的？</li>\n<li>试着从程序的生命周期和编程范式的角度，把C++和其他语言（例如Java、Python）做个比较，说说C++的优点和缺点分别是什么。</li>\n</ol><p>欢迎你在留言区写下你的思考和答案，如果觉得对你有所帮助，也欢迎把今天的内容分享给你的朋友，我们下节课见。</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/a4/4a40e5b8c618ab38945c1346ab3878a4.jpg?wh=2284*1446\" alt=\"\"></p>","neighbors":{"left":{"article_title":"课前准备 | 搭建实验环境","id":231445},"right":{"article_title":"02 | 编码阶段能做什么：秀出好的code style","id":233689}},"comments":[{"had_liked":false,"id":214534,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1588762582,"is_pvip":false,"replies":[{"id":"79411","content":"说的很好。<br><br>对于第二点，C++不是不彻底，而是不存粹，毕竟它是面向对象的探路先锋，走了一些弯路，给后来的java等语言蹚了道。<br><br>其实如果你愿意，完全可以在C++里按照Java的风格来写面向对象，这就是C++给予我们的自由。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1588764509,"ip_address":"","comment_id":214534,"utype":1}],"discussion_count":4,"race_medal":0,"score":"139027716054","product_id":100051801,"comment_content":"1、编程范式其实用的最多的就是面向过程、面向对象、类模板和泛型编程。<br>2、C++的优点是运行效率高，毕竟比较靠近底层硬件了。C++的缺点就是面向对象的不彻底，多重继承确实比较混乱难理解。","like_count":32,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494097,"discussion_content":"说的很好。\n\n对于第二点，C++不是不彻底，而是不存粹，毕竟它是面向对象的探路先锋，走了一些弯路，给后来的java等语言蹚了道。\n\n其实如果你愿意，完全可以在C++里按照Java的风格来写面向对象，这就是C++给予我们的自由。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588764509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1216924,"avatar":"https://static001.geekbang.org/account/avatar/00/12/91/9c/3d630e3a.jpg","nickname":"萌萌岛主","note":"","ucode":"B749FBB922E396","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302266,"discussion_content":"Java目的是万物都是对象，c++目的是万物都是内置类型，哈哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598862922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275475,"discussion_content":"是对比java等语言所说的，java的面向对象用法比较规范，而C++就有多重继承、虚继承、友元等很多花样。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590719444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1154146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9c/62/f625b2bb.jpg","nickname":"酸葡萄","note":"","ucode":"9D059C4FB327C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275118,"discussion_content":"罗老师,您好，为什么说C++的面向对象不纯粹呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590666810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215471,"user_name":"Woturbo","can_delete":false,"product_type":"c1","uid":1746881,"ip_address":"","ucode":"F5B11173D10C55","user_header":"","comment_is_top":false,"comment_ctime":1588996860,"is_pvip":false,"replies":[{"id":"79740","content":"总结的很好。<br><br>在C++里，所谓的鸭子对象，其实就是泛型。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589000361,"ip_address":"","comment_id":215471,"utype":1}],"discussion_count":2,"race_medal":0,"score":"104668211964","product_id":100051801,"comment_content":"1. 生命周期是值得整个C++程序的开发运行过程，除编码外都是由编译器完成。像预编译、编译、链接的过程实际知道原理即可，达到出现问题的时候能够解决。<br>编程范式就是编程思想（方法路），c++复杂的根源，包含了五种。功能是足够强大，但如果不合理使用，一味的去“炫技”，会不利于开发。核心思路是以可读性和可维护性为第一原则。<br>2. C++静态编程语言，存在代码编译过程即把字符代码转化为机器码（二级制文件）。python是动态（脚本）语言，执行代码可以不经过编译，执行过程为解释执行，相比c++程序最终的二进制直接执行来说解释执行效率会低得多。但从编程范式的角度，python支持的主要的编程方式（过程、函数、‘面向对象’（鸭子对象））该有的都有，比c++更简单易用，官方库强大的特点（通用性强）。解析器可以理解一个中间层，它的存在可以提高python等动态语言的可移植性，而c++的可移植性相比之下是要弱一些，需要考虑abi和平台相关。另外c++的代码安全性高，反汇编难度很大。java我的理解是介于动态语言和静态语言之间，就不做过多比较。","like_count":24,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494448,"discussion_content":"总结的很好。\n\n在C++里，所谓的鸭子对象，其实就是泛型。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589000361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2839988,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/55/b4/5fd0fc40.jpg","nickname":"BrandonH","note":"","ucode":"51ABE1EC0A8255","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553820,"discussion_content":"牛逼格拉斯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646107939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214493,"user_name":"八曲长弓","can_delete":false,"product_type":"c1","uid":1243263,"ip_address":"","ucode":"47C909D74629F7","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/7f/a87ad0d5.jpg","comment_is_top":false,"comment_ctime":1588758037,"is_pvip":false,"replies":[{"id":"79389","content":"感谢老读者捧场，有Boost的问题也可以在这里随时问。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1588758618,"ip_address":"","comment_id":214493,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70308234773","product_id":100051801,"comment_content":"以前看过罗老师的《BOOST程序库完全开发指南》有不少收获，极客上看见罗老师Cpp课程毫不犹豫就买了，希望跟罗老师学习更多。","like_count":16,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494078,"discussion_content":"感谢老读者捧场，有Boost的问题也可以在这里随时问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588758618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215435,"user_name":"斐","can_delete":false,"product_type":"c1","uid":1499959,"ip_address":"","ucode":"58B37F2DE488A6","user_header":"https://static001.geekbang.org/account/avatar/00/16/e3/37/407eb257.jpg","comment_is_top":false,"comment_ctime":1588992019,"is_pvip":false,"replies":[{"id":"79732","content":"这两个广义上都属于面向对象，严格来说也算是有区别。<br><br>前者强调统一用对象建模，多应用设计模式，对象关系复杂。<br><br>而后者则相当于C with class，只把class当成struct来封装数据，继承、多态等高级特性用的比较少。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588994727,"ip_address":"","comment_id":215435,"utype":1}],"discussion_count":3,"race_medal":0,"score":"57423566867","product_id":100051801,"comment_content":"罗老师，面向对象和基于对象有什么区别？","like_count":13,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494436,"discussion_content":"这两个广义上都属于面向对象，严格来说也算是有区别。\n\n前者强调统一用对象建模，多应用设计模式，对象关系复杂。\n\n而后者则相当于C with class，只把class当成struct来封装数据，继承、多态等高级特性用的比较少。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588994727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001222,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/06/895a122b.jpg","nickname":"ghost","note":"","ucode":"1D5A11D65B82F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293914,"discussion_content":"具体在代码实现的过程中，以class 和strut 对两者进行区分，是一个好的方式吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595727966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1922661,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/56/65/fa4437d7.jpg","nickname":"Wonderfulpeng","note":"","ucode":"1BA9AB30B52159","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269562,"discussion_content":"这个问题有深度，感觉面向对象是从宏观代码设计出发，而基于对象是从单点看一个基本对象的结构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589909133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215680,"user_name":"土逗","can_delete":false,"product_type":"c1","uid":1606670,"ip_address":"","ucode":"46B8A1CCBB732A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJYH1HGW0NWn01vg7giaQWsmxzicy3iaVb5wZZWhKzlIAc9rPWn5bmTVDficoLPticC23q4dicNJhtTvFQg/132","comment_is_top":false,"comment_ctime":1589076952,"is_pvip":false,"replies":[{"id":"79829","content":"总结的很好，有几个小错误要说一下。<br><br>1.typedef是在编译阶段，而不是预处理阶段，这个后面讲预处理、编译的时候你就清楚了。<br><br>2.直接编译成机器码，但这并不是跨平台的代码，而是源码可以跨平台，由不同的编译器编译成对应平台的二进制代码。<br>Java等语言的字节码由于运行在虚拟机上，它才是跨平台的代码。<br><br>3.C++编译慢还有一个原因，就是语法复杂，还有编译优化等等。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589091754,"ip_address":"","comment_id":215680,"utype":1}],"discussion_count":2,"race_medal":0,"score":"40243782616","product_id":100051801,"comment_content":"1、C++程序的生命周期，分为： 编辑代码 -》预处理器进行相关宏定义，typedef等替换 -》编译器编译成汇编代码，汇编器生成目标obj -》ld连接器进行相应库的链接 -》 生成的可执行文件其实就是这些obj的打包文件，如果是静态链接的话则还包含静态库的内容，如果是动态库则包含执行动态库的路径 -》执行起来成为一个进程 -》进程结束意味着该C++程序的生命周期结束了；<br><br>我理解的C++的范式，就是C++支持编码的多种方式，支持面向过程，支持面向对象，支持泛型编程，支持函数式方式编程，支持模板元编程，经常使用的就是面向对象+面向过程+泛型模板<br><br>2、C++对比Java，从编译的角度看C++需要预处理，并且最终会编译成二进制的机器码，Java编译成字节码，被Java虚拟机进行解释，而不是真正的机器码；<br>我理解的C++的优点缺点如下：<br>C++的优点：<br>1）能够直接编译成机器码，是真正的跨平台代码；<br>2）C++直接编译成机器码，则可以直接被CPU执行，而Java需要中间的java虚拟机解释执行，从开销看，C++的效率会高些；另外Java是动态类型安全语言，意味着需要由虚拟机来确保程序不会违反语言语义或访问非结构化内存，在实现层面上，虚拟机必须要频繁的进行动态检查，如是否为空指针，数组是否越界，类型转换关系等，这些都需要耗费不少运行时间，但是C++不需要，空指针，越界，果断coredump掉；<br><br><br>缺点：<br>1、从编译的角度看，要编译成二进制文件，预处理等其他繁琐的编译步骤，要比java直接编译成字节码要慢；<br>2、C++在C++11之前没有内管里边做的很不好，对于新手不友好，在经验不足的时候容易出现cordump或内存泄漏的情况，C++11使用智能指针让内存管理方便不少；<br>2、罗老师说C++中包含了五种“真气”，我的理解更简单，C++其实就是5种语言组成的集合，相比其他Java学习成本更加陡峭；","like_count":9,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494524,"discussion_content":"总结的很好，有几个小错误要说一下。\n\n1.typedef是在编译阶段，而不是预处理阶段，这个后面讲预处理、编译的时候你就清楚了。\n\n2.直接编译成机器码，但这并不是跨平台的代码，而是源码可以跨平台，由不同的编译器编译成对应平台的二进制代码。\nJava等语言的字节码由于运行在虚拟机上，它才是跨平台的代码。\n\n3.C++编译慢还有一个原因，就是语法复杂，还有编译优化等等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589091754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024819,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/33/b404a199.jpg","nickname":"拭心","note":"","ucode":"66BDB8959A4C59","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399865,"discussion_content":"楼主和老师的评论都不错！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633090013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214546,"user_name":"Carlos","can_delete":false,"product_type":"c1","uid":1898075,"ip_address":"","ucode":"F1B9951E9845D2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/5b/8e321b62.jpg","comment_is_top":false,"comment_ctime":1588764037,"is_pvip":false,"replies":[{"id":"79434","content":"回答的很认真，表扬。<br><br>1.编程范式是一种方法论，指导如何编程，偏重语法规则。Google style guide是编码风格指南，还不算是范式。可以结合课程正文再理解一下。<br><br>2.比较的挺好，一个是解释型语言，一个是编译型语言。<br><br>3.C++的语法要素中英文翻译都比较规范了，如果纯英文有时候会有点别扭，有不清楚的就问吧，我给解答。<br><br>4.这个名字来自于超任的《chrono trigger》，25年前的老游戏。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1588773054,"ip_address":"","comment_id":214546,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31653535109","product_id":100051801,"comment_content":"回答老师的问题并提出我自己的问题: <br><br>1. 生命周期我比较熟悉, 这个过程可以用之前对编程范式了解不多, 今天头一次听说, 我觉得这个好像更是一种 &quot;解决问题的习惯&quot;. 请问老师网上的 google c++ style guide 算不算是一直种范式? <br><br>2.  比较 c++ 与 python:<br><br>   python: 语法简单, 而且 &quot;互动感&quot; 很强, 对 object 进行操作的时候可以一句一句运行.<br><br>   C++: 执行速度快, 优化空间大, 感觉写代码的时候在和内存说话, 自己知道自己在写什么.<br><br>向老师提一个不情之请: 我的 C++ 是直接用英文学的, 希望老师多给出一些对应的英文帮助理解. <br><br>再小小八卦一下, 老师您的英文名和这个有关系吗: auto start = std::chrono::high_resolution_clock::now();?","like_count":7,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494105,"discussion_content":"回答的很认真，表扬。\n\n1.编程范式是一种方法论，指导如何编程，偏重语法规则。Google style guide是编码风格指南，还不算是范式。可以结合课程正文再理解一下。\n\n2.比较的挺好，一个是解释型语言，一个是编译型语言。\n\n3.C++的语法要素中英文翻译都比较规范了，如果纯英文有时候会有点别扭，有不清楚的就问吧，我给解答。\n\n4.这个名字来自于超任的《chrono trigger》，25年前的老游戏。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588773054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1898075,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f6/5b/8e321b62.jpg","nickname":"Carlos","note":"","ucode":"F1B9951E9845D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259349,"discussion_content":"非常感动了😁好几条留言都受到了老师认真的回复，干劲十足！！！非常期待更新😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588774952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217488,"user_name":"谷鱼","can_delete":false,"product_type":"c1","uid":1004052,"ip_address":"","ucode":"F22DB0C0269829","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/14/397145a4.jpg","comment_is_top":false,"comment_ctime":1589513683,"is_pvip":false,"replies":[{"id":"80484","content":"C++的开发周期长成本高，所以现在适合做底层、比较稳定、核心的那些部分。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589539230,"ip_address":"","comment_id":217488,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18769382867","product_id":100051801,"comment_content":"1.看到了生命周期和编程范式，C++的编译和预处理是这一类语言的共性，比较显式。比如常用的脚本语言就没有这么明显，python，php，js，ruby都是这样的，更多只能感受到编码和运行两个阶段，优化的参数也多是很常规的。<br>2.优点和缺点我就不清楚了。公司用到了opencv，我才意识到C++的存在，但是不会去编码，会去理解它的常用语法，理解一些思路，这无疑说明，它的周期太长，适合团队开发，充分测试，无法多快好省，短平快。重武器也许都这样吧。go还友好一点","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495163,"discussion_content":"C++的开发周期长成本高，所以现在适合做底层、比较稳定、核心的那些部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589539230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219261,"user_name":"Geek_a6104e","can_delete":false,"product_type":"c1","uid":1711967,"ip_address":"","ucode":"29A56792216DC8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GJXKh8OG00U5ial64plAIibbIuwkzhPc8uYic9Hibl8SbqvhnS2JImHgCD4JGvTktiaVnCjHQWbA5wicaxRUN5aTEWnQ/132","comment_is_top":false,"comment_ctime":1589978652,"is_pvip":false,"replies":[{"id":"81034","content":"面向过程是命令式的，就像是个流水线，而函数式编程是面向函数的，是函数套函数。<br><br>两种范式虽然都用“函数”，但解决问题的思路是不一样的，等到后面讲lambda，还有容器和算法的时候可能会更好理解一些。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1590022497,"ip_address":"","comment_id":219261,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14474880540","product_id":100051801,"comment_content":"老师你好 请问面向过程和函数式编程有什么区别？ 之前看有些资料上介绍 面向过程其实就是调用函数  所以我觉得面向过程和函数式编程貌似差不多","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495743,"discussion_content":"面向过程是命令式的，就像是个流水线，而函数式编程是面向函数的，是函数套函数。\n\n两种范式虽然都用“函数”，但解决问题的思路是不一样的，等到后面讲lambda，还有容器和算法的时候可能会更好理解一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590022497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222062,"user_name":"酸葡萄","can_delete":false,"product_type":"c1","uid":1154146,"ip_address":"","ucode":"9D059C4FB327C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/62/f625b2bb.jpg","comment_is_top":false,"comment_ctime":1590667170,"is_pvip":false,"replies":[{"id":"81854","content":"往后面看，后面会慢慢讲，会有代码，到后面还有不清楚的再问。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1590670602,"ip_address":"","comment_id":222062,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10180601762","product_id":100051801,"comment_content":"老师，您好，编程范式讲概念还是比较难理解，特别是函数式编程，每种范式要是都能来段代码举例就好了","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496654,"discussion_content":"往后面看，后面会慢慢讲，会有代码，到后面还有不清楚的再问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590670602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214638,"user_name":"少年","can_delete":false,"product_type":"c1","uid":1500385,"ip_address":"","ucode":"A815DB6B0F74A5","user_header":"https://static001.geekbang.org/account/avatar/00/16/e4/e1/71990839.jpg","comment_is_top":false,"comment_ctime":1588776147,"is_pvip":false,"replies":[{"id":"79473","content":"预处理是C语言的传统，就是文本替换，不涉及语法，英文术语就叫pre-process，用原文来理解吧。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1588800313,"ip_address":"","comment_id":214638,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10178710739","product_id":100051801,"comment_content":"老师的思路确实给徘徊在入门与放弃C++的人提供了一条新路，听完很有感触。生命周期的阶段划分，预处理单独成段？为啥不叫编译预处理？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494148,"discussion_content":"预处理是C语言的传统，就是文本替换，不涉及语法，英文术语就叫pre-process，用原文来理解吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588800313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336352,"user_name":"BrandonH","can_delete":false,"product_type":"c1","uid":2839988,"ip_address":"","ucode":"51ABE1EC0A8255","user_header":"https://static001.geekbang.org/account/avatar/00/2b/55/b4/5fd0fc40.jpg","comment_is_top":false,"comment_ctime":1646106992,"is_pvip":true,"replies":[{"id":"122929","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1646117735,"ip_address":"","comment_id":336352,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5941074288","product_id":100051801,"comment_content":"生命周期指的是c++语言从编码、预处理、编译链接到执行的过程。编程范式用的多的主要有：面向对象 面向过程 泛型 函数式","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553853,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646117735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249725,"user_name":"唐聪","can_delete":false,"product_type":"c1","uid":1241297,"ip_address":"","ucode":"5D69F2298DB2A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/d1/798c2197.jpg","comment_is_top":false,"comment_ctime":1600771214,"is_pvip":false,"replies":[{"id":"91549","content":"C&#47;C++的生命周期和其他语言还是不同的，有一个独特的预处理阶段，而很多脚本语言是解释型的，也就不需要编译。<br><br>因为这些区别，所以C&#47;C++与其他语言就有了不同。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1600777025,"ip_address":"","comment_id":249725,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5895738510","product_id":100051801,"comment_content":"1.1 生命周期是编程语言的共同点，从源代码变成机器码的过程；<br>1.2 C++的编程范式，如同打篮球的技能包，三分或中投；目标都是要进球；<br><br>2 用C比较多，过程语言if else；","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505994,"discussion_content":"C/C++的生命周期和其他语言还是不同的，有一个独特的预处理阶段，而很多脚本语言是解释型的，也就不需要编译。\n\n因为这些区别，所以C/C++与其他语言就有了不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600777025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238008,"user_name":"张飞Dear","can_delete":false,"product_type":"c1","uid":2004589,"ip_address":"","ucode":"EECEDF12DC7EB9","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/6d/85723167.jpg","comment_is_top":false,"comment_ctime":1596026506,"is_pvip":false,"replies":[{"id":"87962","content":"总结的很好，态度很认真。<br><br>java虽然运行效率不如C++，但它由于有虚拟机，可以跨平台，而且不会有那么多的底层麻烦，所以更稳定一些，适合更高层次开发业务，所以才会有那么多的框架、系统。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1596070386,"ip_address":"","comment_id":238008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890993802","product_id":100051801,"comment_content":"1，C++生命周期：每个生命周期各有各的特点，①编码阶段是一个程序员构建整个软件的时候，是很重要的。②预处理阶段 工具进行处理 对此不是很了解，主要是通过预处理命令进行相应的替换。③编译过程很重要，这一阶段能够检查出编码产生的语法错误，能够生成不同平台的代码，也是跨平台的实现。④运行阶段也是能够检查编译器所不能报出的逻辑上bug。<br>2，编程范式：之前不了解，只是知道有数据库范式，和这个不太一样，之前只是知道 C++有这么多功能，但是以这种范式解释是第一次见，罗老师讲的更通俗易懂，C++最重要的还是面向过程和面向对象以及泛型。后面那两种 在平时开发 用的不多，而且也可以通过比前三种来进行替换。<br><br>3，了解过一点Java ，Java的优点是一次开发，所有平台都能使用。但是在运行时需要虚拟机来进行，效率上指定是不如C++的。  Java不能直接操作内存，在内存管理上不如C++。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502613,"discussion_content":"总结的很好，态度很认真。\n\njava虽然运行效率不如C++，但它由于有虚拟机，可以跨平台，而且不会有那么多的底层麻烦，所以更稳定一些，适合更高层次开发业务，所以才会有那么多的框架、系统。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596070386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218391,"user_name":"ericluo","can_delete":false,"product_type":"c1","uid":1104341,"ip_address":"","ucode":"1A593C7AEC45FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/d5/b439fe35.jpg","comment_is_top":false,"comment_ctime":1589795493,"is_pvip":false,"replies":[{"id":"80792","content":"是的，一般说的可能是程序的运行生命周期，我在这里把它扩大到了从编写到运行，主要是为了方便讲解C++的各种特性。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589849566,"ip_address":"","comment_id":218391,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5884762789","product_id":100051801,"comment_content":"罗老师，您好<br>我一般看到生命周期，第一时间想到应用的启动到退出之类内容，所以会不会其它的读者也有相同的感觉","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495447,"discussion_content":"是的，一般说的可能是程序的运行生命周期，我在这里把它扩大到了从编写到运行，主要是为了方便讲解C++的各种特性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589849566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214968,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1588859662,"is_pvip":false,"replies":[{"id":"79595","content":"<br>1.编译链接出错确实是很多C++程序员最头痛的问题，报错信息一大堆，很不友好。我的方法是去搜索引擎里搜一下错误文字，通常都能够找到答案或者提示。<br><br>2.理解的很对，C++的应用水平取决于团体的整体水平，但如果总停留在低水平既不利于项目也不利于自己，可以通过培训、讨论来提高，这样C++就会越用越爽。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588889009,"ip_address":"","comment_id":214968,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5883826958","product_id":100051801,"comment_content":"1、C++生命周期中的预处理和编译是其特有的环节，编译执行是其高效的基础，相比而言java、python等解释执行的语言更有优势。但正是出于效率的考虑，C++的编译执行给程序员提供了足够的灵活性，但也提供了无限出错的可能，这也是其难学的原因。另外，关于C++的预处理和编译，希望老师在后续课程中多花些时间讲解一下，之前每次遇到Link Error，都不知道怎么处理。<br>2、编程范式方面，个人觉得开发应用程序，面向过程和面向对象是基础，外加使用泛型即可满足大部分要求。函数式编程目前还没有深入了解过，如果团队中没有80%的人掌握，不建议使用。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494262,"discussion_content":"\n1.编译链接出错确实是很多C++程序员最头痛的问题，报错信息一大堆，很不友好。我的方法是去搜索引擎里搜一下错误文字，通常都能够找到答案或者提示。\n\n2.理解的很对，C++的应用水平取决于团体的整体水平，但如果总停留在低水平既不利于项目也不利于自己，可以通过培训、讨论来提高，这样C++就会越用越爽。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588889009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214922,"user_name":"wuwei","can_delete":false,"product_type":"c1","uid":1689329,"ip_address":"","ucode":"DA60894F10C71F","user_header":"https://static001.geekbang.org/account/avatar/00/19/c6/f1/aac154fe.jpg","comment_is_top":false,"comment_ctime":1588850277,"is_pvip":false,"replies":[{"id":"79585","content":"总结的很好。<br><br>你提的这些特性，多线程复杂但有用，重载、多态学起来容易但有很多陷阱，智能指针是好东西，后面我会专门讲，它和容器都可以用来管理动态内存。<br><br>我的建议是先学简单的特性，复杂易错的特性少用，有经验了再扩大使用范围。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588857784,"ip_address":"","comment_id":214922,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5883817573","product_id":100051801,"comment_content":"学过一点点cpp。<br>生命周期：了解到cpp的从写到运行的机制，不再是黑盒子；<br>编程范式：面向过程，面向对象，泛化编程，函数式编程，模版元这些范式让我明白，范式有自己的特点和优势，清楚的掌握他们，将他们作为工具充分利用，应该可以避免混淆；<br><br>cpp与python比较：<br>python：简单、易用，可以快速实现算法，不过很慢；<br>cpp：难学难用，编程过程中要考虑很多关于内存的问题，不过运行超快；<br>同样的算法，cpp写出来比python快好几个量级<br><br>最后的问题：多线程、重载、多态、智能指针、动态内存，这些平时用的多不多，学习的时候应该注意什么？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494244,"discussion_content":"总结的很好。\n\n你提的这些特性，多线程复杂但有用，重载、多态学起来容易但有很多陷阱，智能指针是好东西，后面我会专门讲，它和容器都可以用来管理动态内存。\n\n我的建议是先学简单的特性，复杂易错的特性少用，有经验了再扩大使用范围。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588857784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359633,"user_name":"夕林语","can_delete":false,"product_type":"c1","uid":1264180,"ip_address":"北京","ucode":"B57681D0C73E1B","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/34/1faac99b.jpg","comment_is_top":false,"comment_ctime":1665718104,"is_pvip":false,"replies":[{"id":"130829","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1665718975,"ip_address":"北京","comment_id":359633,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1665718104","product_id":100051801,"comment_content":"1、编程范式说白了就是编程风格，我平时应用比较多的就是面向对象、泛型编程、面向过程及函数式编程；<br>2、从编程范式的面向对象来讲，C++和Java的区别就在于垃圾回收机制，也就是内存管理的不同，C++自己进行管理灵活高效但是容易出问题，Java就比较傻瓜式，一切交给虚拟机","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590402,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665718975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357038,"user_name":"Luke","can_delete":false,"product_type":"c1","uid":1216016,"ip_address":"北京","ucode":"C34D4C44DBCE03","user_header":"https://static001.geekbang.org/account/avatar/00/12/8e/10/10092bb1.jpg","comment_is_top":false,"comment_ctime":1662881813,"is_pvip":false,"replies":[{"id":"129977","content":"大部分C++用户都是这样的心声，没办法，历史包袱太重了，只能从中挑出一些好的，坏的尽量不用。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1663030966,"ip_address":"北京","comment_id":357038,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1662881813","product_id":100051801,"comment_content":"1.比较讨厌输入c艹，两个加号在手机上输入很烦òᆺó，这也算是一个特点吧😂。<br>2.对比Java这些语言，它还是一种值类型的语言；<br>由于兼容c这个历史包袱，再加上属于oop的实验先锋，因此引入了很多特性，导致了其巨大的复杂性。<br>3.Java，Python这些语言，对于代码单元的管理更完善，一般以包的形式导入导出，也不再区分静态绑定，动态绑定这些形式。<br>4.其他语言都会有一些硬性编码规范，所以代码的质量下限不会太低，而它的自由度是一把双刃剑，有人用Java方式写，有人用c的方式写，还有人是混合方式编写，这其实就是用自己熟悉的编程范式编码的例子，也导致了工程质量难以把控，维护成本高。<br><br>对cpp我一直是敬而远之，虽然学过也维护过，总想着我不需要学它，我要爱惜头发😂😂😂。。。我一直都是用c➕c#，现在发现还是需要用cpp，硬着头皮开始啃吧。<br>另外，预处理机制c#也有，不过不常使用。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587385,"discussion_content":"大部分C++用户都是这样的心声，没办法，历史包袱太重了，只能从中挑出一些好的，坏的尽量不用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663030966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337203,"user_name":"甘之风","can_delete":false,"product_type":"c1","uid":1451769,"ip_address":"","ucode":"A19374428778B8","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/f9/b01cc2a5.jpg","comment_is_top":false,"comment_ctime":1646699631,"is_pvip":true,"replies":[{"id":"123287","content":"单纯的一个下划线也是一种风格，但辨识度不高，很容易和无下划线前缀的混淆。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1646794453,"ip_address":"","comment_id":337203,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646699631","product_id":100051801,"comment_content":"成员变量习惯采用_前缀，没必要多个m","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555172,"discussion_content":"单纯的一个下划线也是一种风格，但辨识度不高，很容易和无下划线前缀的混淆。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646794453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329323,"user_name":"孙新","can_delete":false,"product_type":"c1","uid":2875594,"ip_address":"","ucode":"A80038A479B943","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e0/ca/adfaa551.jpg","comment_is_top":false,"comment_ctime":1641284645,"is_pvip":true,"replies":[{"id":"120101","content":"嗯，英语不过关，sorry 。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1641524602,"ip_address":"","comment_id":329323,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641284645","product_id":100051801,"comment_content":"吹毛求疵一下，老师那个virtual的读音不标准好像","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544444,"discussion_content":"嗯，英语不过关，sorry 。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641524602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327455,"user_name":"EastWind","can_delete":false,"product_type":"c1","uid":1286781,"ip_address":"","ucode":"24AD259AFB6A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/a2/7d/674f97cc.jpg","comment_is_top":false,"comment_ctime":1640139009,"is_pvip":false,"replies":[{"id":"119241","content":"是的，这个也是C++的设计哲学。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1640214333,"ip_address":"","comment_id":327455,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640139009","product_id":100051801,"comment_content":"C++复杂点就是啥都支持，没有取舍，不纯粹，还要背负C历史，容易导致混乱。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540926,"discussion_content":"是的，这个也是C++的设计哲学。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640214334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320256,"user_name":"加油(ง •̀_•́)ง🐻","can_delete":false,"product_type":"c1","uid":2455440,"ip_address":"","ucode":"48C656329DF89C","user_header":"https://static001.geekbang.org/account/avatar/00/25/77/90/ae705448.jpg","comment_is_top":false,"comment_ctime":1636178124,"is_pvip":false,"replies":[{"id":"116143","content":"泛型编程的基础是模板，类型之间没有继承关系，只是接口相同。<br><br>比如vector&lt;int&gt;和vector&lt;string&gt;，虽然都是vector，但两者只是内部操作代码相同，没有其他的关系。<br><br>容器的实例化对象不需要有继承。<br><br>","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1636275798,"ip_address":"","comment_id":320256,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636178124","product_id":100051801,"comment_content":"老师，为什么说泛式编程和继承不一样，容器不也要实例化对象，才能用吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529930,"discussion_content":"泛型编程的基础是模板，类型之间没有继承关系，只是接口相同。\n\n比如vector&amp;lt;int&amp;gt;和vector&amp;lt;string&amp;gt;，虽然都是vector，但两者只是内部操作代码相同，没有其他的关系。\n\n容器的实例化对象不需要有继承。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636275798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294389,"user_name":"奋斗","can_delete":false,"product_type":"c1","uid":2047392,"ip_address":"","ucode":"C84C2D030ACA51","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3d/a0/acf6b165.jpg","comment_is_top":false,"comment_ctime":1621924992,"is_pvip":false,"replies":[{"id":"106826","content":"没有专门给C++的， 但jenkins应该是通用的吧，也能用于C++。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1621935582,"ip_address":"","comment_id":294389,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621924992","product_id":100051801,"comment_content":"说到瀑布流，就想到了持续交付，一谈到ci&#47;cd，c++在这方面有工具化软件吗？比如jenkins","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520635,"discussion_content":"没有专门给C++的， 但jenkins应该是通用的吧，也能用于C++。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621935582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269836,"user_name":"很随意丶丶","can_delete":false,"product_type":"c1","uid":2131236,"ip_address":"","ucode":"FDC9F82903BA17","user_header":"https://static001.geekbang.org/account/avatar/00/20/85/24/d847c3ac.jpg","comment_is_top":false,"comment_ctime":1608804265,"is_pvip":false,"replies":[{"id":"97857","content":"是的，用C++11&#47;14之后的新特性来写程序真的是很舒服，有很多语法糖和好用的库，再加上适当的编码风格规范，和go&#47;java可以说是不相上下了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1608860848,"ip_address":"","comment_id":269836,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1608804265","product_id":100051801,"comment_content":"感觉越来越喜欢c++, 能写出来很漂亮和整洁 优美的源码。看着很享受，喜欢学习和使用c++的新特性。<br>感觉新的c++越来越容易写。<br>1. 智能指针解决了内存问题<br>2. lambda 能让你像写脚本语言一样写代码<br>3. 模板编程能让代码通用性更强。<br>等等新特性， 就是c++还是有历史的包袱还要兼容以前的，不然c++可以效率和编码共存","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512413,"discussion_content":"是的，用C++11/14之后的新特性来写程序真的是很舒服，有很多语法糖和好用的库，再加上适当的编码风格规范，和go/java可以说是不相上下了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608860848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263208,"user_name":"Geek_c2c8d1","can_delete":false,"product_type":"c1","uid":2325145,"ip_address":"","ucode":"60B48691C86D6C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkF14X58pdmTgBWwWzxVicJ0LQjNXiceL3xSj73eC4AZheyIPtf8tyqTicbP4VXia1TmDlm9rlCNCuDQ/132","comment_is_top":false,"comment_ctime":1606047210,"is_pvip":false,"replies":[{"id":"95535","content":"说的很好，理解的很透彻。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1606093012,"ip_address":"","comment_id":263208,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606047210","product_id":100051801,"comment_content":"我个人是做偏向硬件的，或者说嵌入式。<br>1.对于生命周期来说，我的理解就是一段C++代码从开始到结束所要经历的过程，而其中，我们最重要的工作是完成编码，然后由计算机帮我们执行后面的部分，如果出现错误，再人为返回编码阶段，再继续执行；对于编程范式，更像是如果使用C++进行编码的一种规则，就像一个中文的句子一样，至少要含有主谓宾才能构成一个完整的句子，这才是正确的语言。把C++比作语言，那么一个正确的C++程序也需要正确的编码规定。<br>2.比起C语言来说，C++的类封装比C语言的结构体更加的完整和彻底，可以避免当量大了之后，C语言结构体混乱的情况，尤其是在硬件的底层编写中深有体会。与python相比，哪大概就是无可相比的效率以及安全。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510121,"discussion_content":"说的很好，理解的很透彻。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606093012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260309,"user_name":"空海lro","can_delete":false,"product_type":"c1","uid":2233938,"ip_address":"","ucode":"1C4CD33EDC5F3E","user_header":"https://static001.geekbang.org/account/avatar/00/22/16/52/701a33c3.jpg","comment_is_top":false,"comment_ctime":1604981150,"is_pvip":false,"replies":[{"id":"94519","content":"many thanks。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1604993750,"ip_address":"","comment_id":260309,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604981150","product_id":100051801,"comment_content":"罗老师讲得太好了，挖到宝藏😁","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509163,"discussion_content":"many thanks。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604993750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250848,"user_name":"大熊🐻","can_delete":false,"product_type":"c1","uid":1622742,"ip_address":"","ucode":"06E0E4082C5985","user_header":"https://static001.geekbang.org/account/avatar/00/18/c2/d6/d3d7371b.jpg","comment_is_top":false,"comment_ctime":1601260436,"is_pvip":false,"replies":[{"id":"91795","content":"有其他语言的基础，学习C++还是比较容易的，先挑自己熟悉的编程范式来学习，泛型和模板元比较难懂，需要量力而行。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1601279710,"ip_address":"","comment_id":250848,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1601260436","product_id":100051801,"comment_content":"机械出身只用过OC、swift，没有用过C++，因为OC的动态特性是由C实现、只看过一些C的代码。C++完全是小白一枚<br>1、生命周期和C++一样分为编码、预处理、编译、运行；根据编译器的不同OC&#47;Swift的编译阶段又分为编译前端、编译后端；编译前端OC是用Clang编译器(swift 是用swift编译器)实现词法分析、语法分析、语义分析生成中间代码，后端编译是用llvm实现代码优化、生成二进制运行文件<br>2、编程范式：<br>1）、C++ 支持面向过程、面向对象、泛型、模板元、函数式共五种主要的编程范式<br>2）、OC常用面向对象；<br>3）、swift常用面向对象、面向协议、函数式编程、泛型编程；","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506309,"discussion_content":"有其他语言的基础，学习C++还是比较容易的，先挑自己熟悉的编程范式来学习，泛型和模板元比较难懂，需要量力而行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601279710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250057,"user_name":"种花家","can_delete":false,"product_type":"c1","uid":1486568,"ip_address":"","ucode":"1BBBF4E10255E9","user_header":"https://static001.geekbang.org/account/avatar/00/16/ae/e8/d01b90c3.jpg","comment_is_top":false,"comment_ctime":1600916664,"is_pvip":false,"replies":[{"id":"91625","content":"very nice。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1600931935,"ip_address":"","comment_id":250057,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600916664","product_id":100051801,"comment_content":"开始第二遍学习","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506119,"discussion_content":"very nice。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600931935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245276,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1598882403,"is_pvip":true,"replies":[{"id":"90212","content":"总结的很好。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1598921695,"ip_address":"","comment_id":245276,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1598882403","product_id":100051801,"comment_content":"1、生命周期<br>编码、预处理、编译、运行更像是程序从设计到真正运行起来的一个过程<br>预处理完成一些编码的替换，简单来说就是一些预定简化<br>编译是把代码按照C++语法进行检查，翻译成机器可以识别的语句、字词<br>运行是把机器代码在CPU中的运行<br><br>2、编程范式<br>编码习惯、思维方式<br><br>试着从程序的生命周期和编程范式的角度，把 C++ 和其他语言（例如 Java、Python）做个比较，说说 C++ 的优点和缺点分别是什么。<br>1）生命周期角度来说，Java编译成javacode共jvm来处理，而不是直接转化为机器识别<br>编程范式上来说是相似的，可能模板元java不支持<br>2）python没有预处理、编译阶段，直接运行<br>编程范式上来说，python没有明确的类型。<br>面向过程、面向对象也支持","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504828,"discussion_content":"总结的很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598921695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1458016,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3f/60/7fdab410.jpg","nickname":"憨逗豆","note":"","ucode":"643D215E0643B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311112,"discussion_content":"本人是Android程序开发，java中有一个预编译功能(编译时注解)，通过在代码中写注解的方式在编译期间自动生成一些模板代码。这功能感觉有些像文中介绍的C++模板元编程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602225890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225055,"user_name":"群书","can_delete":false,"product_type":"c1","uid":1437036,"ip_address":"","ucode":"BA9EE71D2D818A","user_header":"https://static001.geekbang.org/account/avatar/00/15/ed/6c/6fb35017.jpg","comment_is_top":false,"comment_ctime":1591625589,"is_pvip":true,"replies":[{"id":"82870","content":"用boost.asio开发服务器难度还是比较高的，可以参考一下boost.beast，它是用asio开发的http服务器、客户端。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591664708,"ip_address":"","comment_id":225055,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591625589","product_id":100051801,"comment_content":"老师好 最近要用boost asio开发一个服务器 能推荐开源项目参考一下吗","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497712,"discussion_content":"用boost.asio开发服务器难度还是比较高的，可以参考一下boost.beast，它是用asio开发的http服务器、客户端。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591664708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224360,"user_name":"MaxXu","can_delete":false,"product_type":"c1","uid":2016358,"ip_address":"","ucode":"8E8684E11E2705","user_header":"","comment_is_top":false,"comment_ctime":1591354016,"is_pvip":false,"replies":[{"id":"82589","content":"说的很有见地，很好，amazing。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591358027,"ip_address":"","comment_id":224360,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591354016","product_id":100051801,"comment_content":"第一个问题：<br>说到C++我想到了C，C的生命周期跟C++是一样的，两者都是编译型语言，对比于解释型语言，编译型语言多了预处理和编译阶段，也就是将语言的生命周期分成了更多个阶段，这好像给了程序员更大的自由去处理代码，这好像就是给了程序员更多的空间去优化，而C是为了系统编程而创造的，C++则是为了弥补C的开发效率的不足，主要还是用于跟底层打交道，也就是生命周期跟语言的效率、用途、作用息息相关。所以我认为C++的生命周期可以给了我们更大的自由去控制代码，进而可以实现各种各样的目的，就像多种编程范式的使用，也对使用C++提高了要求。<br>从这两点可以总结出，会用C++可以享受它带来的极大的自由和高效，不会用就觉得它跟复杂了😂","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497452,"discussion_content":"说的很有见地，很好，amazing。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591358027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223855,"user_name":"Sudouble","can_delete":false,"product_type":"c1","uid":1365574,"ip_address":"","ucode":"B369B09DAF8D20","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/46/5eb5261b.jpg","comment_is_top":false,"comment_ctime":1591197255,"is_pvip":true,"replies":[{"id":"82438","content":"说的很好，C++的特点在于可以在预处理阶段和编译阶段编程，作用不亚于运行阶段。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591232272,"ip_address":"","comment_id":223855,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591197255","product_id":100051801,"comment_content":"和一开始想的生命周期不太一样，想到的直接是变量的生命周期，站在更高的角度去评价c++本身。感觉程序的生命周期差异不大，包括Java和Python等，主要差异在动态语言和静态语言在预处理和编译期的不同。<br>编程范式在于完成一件事的方式，各有各的优雅和长处，和设计模式很像，都是历经长时间的积累和沉淀。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497265,"discussion_content":"说的很好，C++的特点在于可以在预处理阶段和编译阶段编程，作用不亚于运行阶段。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591232272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222705,"user_name":"C家族铁粉","can_delete":false,"product_type":"c1","uid":1135908,"ip_address":"","ucode":"296C843B33F5E7","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/24/c6100ac6.jpg","comment_is_top":false,"comment_ctime":1590896190,"is_pvip":false,"replies":[{"id":"82132","content":"现在C++里面向对象不是主流了，泛型、函数式各种范式混合着来才有意思。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1590908932,"ip_address":"","comment_id":222705,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590896190","product_id":100051801,"comment_content":"或许罗老师以后可以出个课，名字叫老罗带你玩转面向对象-(基于C++)","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496890,"discussion_content":"现在C++里面向对象不是主流了，泛型、函数式各种范式混合着来才有意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590908932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218222,"user_name":"汪zZ","can_delete":false,"product_type":"c1","uid":1234757,"ip_address":"","ucode":"8B93062A683902","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/45/d1621188.jpg","comment_is_top":false,"comment_ctime":1589761165,"is_pvip":true,"replies":[{"id":"80690","content":"说的很好，但C++支持多种方式，就给予了程序员更多的自由，但如何利用这种自由就见仁见智了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589763262,"ip_address":"","comment_id":218222,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1589761165","product_id":100051801,"comment_content":"1.任何程序都有生命周期，只是现在很多IDE能让我们不理解也能实现程序，但问题在于bug发现得越早越好，等运行时才发现，改正的时候异常的麻烦。<br>2.C++和python：python用得比较多，基本上靠python入门编程的，至今也有很一段时间了，在jupyter notebook上写python，一边写，一边运行，可以很直观的发现错误。感觉python更利于编写者，而C++（我大学时学的C，后面9年没动过，现在从头学C++，才学到泛型），综合来看，对于我工作上的，感觉就只用到面向过程和面向对象。这就好像python编程时，大部分都是函数+类解决问题。<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495390,"discussion_content":"说的很好，但C++支持多种方式，就给予了程序员更多的自由，但如何利用这种自由就见仁见智了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589763262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217747,"user_name":"熊出没","can_delete":false,"product_type":"c1","uid":1145377,"ip_address":"","ucode":"6E39230CC87808","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/21/a33cc944.jpg","comment_is_top":false,"comment_ctime":1589601522,"is_pvip":true,"replies":[{"id":"80531","content":"说得很好。<br><br>函数编程到后面讲lambda表达式和算法、线程的时候你可以再深入理解一下。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589610522,"ip_address":"","comment_id":217747,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589601522","product_id":100051801,"comment_content":"1、程序的生命周期是类似于一种指导开发者工作步骤的方式，想让一个程序运行起来 这些是必要的步骤 每一步还不能出错；<br>2、编程范式更多的是生命周期中编码这个阶段，是开发者的指导思想；<br>3、学过C语言，在从C到C++转变过程中，面向对象是一个较大的认知转变，学C时更多是想有步骤的把习题、算法以一定过程进行实现得到结果，工作中用的C++，C++虽然是面向对象语言，但它摆脱不了面向过程中，我们在面向中更多要思考总结那些个对象，但最终要把这些对象使用起来达到最后目的，过程性思想就体现了。函数式编程，了解过一点go，但其内涵还是不懂；","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495251,"discussion_content":"说得很好。\n\n函数编程到后面讲lambda表达式和算法、线程的时候你可以再深入理解一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589610522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216989,"user_name":"无为而立","can_delete":false,"product_type":"c1","uid":2003887,"ip_address":"","ucode":"A74526BF43A077","user_header":"https://static001.geekbang.org/account/avatar/00/1e/93/af/54e2a654.jpg","comment_is_top":false,"comment_ctime":1589381519,"is_pvip":false,"replies":[{"id":"80265","content":"面向对象可以说就是对现实世界“建模”，这个后面还会再重点讲一下。<br><br>总的来说，Python还是应该比C++易写易读吧，毕竟是脚本语言，而且特性比C++少多了。<br><br>其实语言无优劣，全在于使用的人，C++和Python都可以写出天书般的代码。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589418062,"ip_address":"","comment_id":216989,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589381519","product_id":100051801,"comment_content":"我不是科班出身哈，学力学的。感觉面向对象是把现实中的问题抽象成物理问题，而面向过程是将物理问题表达成数学问题。所以，在实际编程的时候面向对象和面向过程搭配使用感觉更好。另外cpp和python对比，cpp不易写但易读，而python正好相反，易写不易读。哈哈仅是个人理解","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495000,"discussion_content":"面向对象可以说就是对现实世界“建模”，这个后面还会再重点讲一下。\n\n总的来说，Python还是应该比C++易写易读吧，毕竟是脚本语言，而且特性比C++少多了。\n\n其实语言无优劣，全在于使用的人，C++和Python都可以写出天书般的代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589418062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216968,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1589379146,"is_pvip":true,"replies":[{"id":"80266","content":"这就已经很好了，像C，一直是面向过程，也不妨碍它写Linux。<br><br>但因为C++是多范式的编程语言，如果单纯用面向过程就有点浪费它的能力了，可以再适当加一些面向对象的特性。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589418142,"ip_address":"","comment_id":216968,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589379146","product_id":100051801,"comment_content":"说来惭愧，一直都是用的面向过程和函数的范式。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494997,"discussion_content":"这就已经很好了，像C，一直是面向过程，也不妨碍它写Linux。\n\n但因为C++是多范式的编程语言，如果单纯用面向过程就有点浪费它的能力了，可以再适当加一些面向对象的特性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589418142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216866,"user_name":"詹晓红","can_delete":false,"product_type":"c1","uid":2002720,"ip_address":"","ucode":"762B29C6941D93","user_header":"https://static001.geekbang.org/account/avatar/00/1e/8f/20/9bdc9911.jpg","comment_is_top":false,"comment_ctime":1589357126,"is_pvip":false,"replies":[{"id":"80206","content":"总结的很好，very nice。<br><br>不过我对汇编不是太熟，实在是太底层了，二十多年前学过一点CASL汇编，后来就再也没接触。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589360854,"ip_address":"","comment_id":216866,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589357126","product_id":100051801,"comment_content":"1. 生命周期：<br>编码-预处理-编译-运行。程序员掌控编码阶段，编译器进行预处理和编译，生成机器码，CPU可直接运行。所以C++的代码可以跨平台编译，从某种程度减轻了程序员的负担，可是也遮蔽了某些问题，增加了程序员对程序透彻理解的难度。<br>2. 编程范式：<br>平时面向过程、面向对象、泛型好像是必用的，其他的是可选。要不是老师这样整理，还真没注意是这样分类。<br>3. 与其他语言相比：<br>我觉得C++更接近底层，基本像是直接操作内存，所以编程过程中有许多坑要自己注意避免。这大概是与Java相比最大的区别。所以在实际调试中，与汇编的关系也很密切，希望老师后续课程也能涉及到这部分。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494970,"discussion_content":"总结的很好，very nice。\n\n不过我对汇编不是太熟，实在是太底层了，二十多年前学过一点CASL汇编，后来就再也没接触。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589360854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216282,"user_name":"九三","can_delete":false,"product_type":"c1","uid":1454691,"ip_address":"","ucode":"7D093ED7273CBE","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/63/fa24f92e.jpg","comment_is_top":false,"comment_ctime":1589214133,"is_pvip":false,"replies":[{"id":"80045","content":"<br>1.生命周期书本上都有说，不新鲜，但 很少有把C++语法要素和生命周期联系起来的，用这个角度去理解C++语言会很有帮助。<br><br>2.编程范式也可以说是一种编程风格，就是你习惯怎么去搭建程序结构，用函数多还是用类多。<br>要注意的是函数式编程里的函数和C++的原生函数是两回事，写出的代码完全是两个风格，前者是函数套函数，后者是顺序的命令。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589245694,"ip_address":"","comment_id":216282,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589214133","product_id":100051801,"comment_content":"c++程序的生命周期， 之前一直在书本上看到， 从源代码 到 预处理 到 编译器 去编译与处理文件，生成.o的目标文件， 连接器去把目标文件和系统库 启动代码等连接起来，生成二进制可运行的文件； 这大概就是我从书本上了解到的生命周期过程；<br>变成范式  之前一直说的 面向过程 面向对象，一直觉得很抽象<br>之后做应用开发，又知道了函数式编程，","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494751,"discussion_content":"\n1.生命周期书本上都有说，不新鲜，但 很少有把C++语法要素和生命周期联系起来的，用这个角度去理解C++语言会很有帮助。\n\n2.编程范式也可以说是一种编程风格，就是你习惯怎么去搭建程序结构，用函数多还是用类多。\n要注意的是函数式编程里的函数和C++的原生函数是两回事，写出的代码完全是两个风格，前者是函数套函数，后者是顺序的命令。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589245694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216148,"user_name":"乐生          ༽","can_delete":false,"product_type":"c1","uid":1997125,"ip_address":"","ucode":"9091F0FC9BE23F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/79/45/d6bb221e.jpg","comment_is_top":false,"comment_ctime":1589196815,"is_pvip":false,"replies":[{"id":"80052","content":"有C++98的基础，学习C++11应该是很快的。<br><br>不过C++11的新特性很多，可能刚接触会比较懵，可以先从简单的学起，比如auto、nullptr、range-for，再跟着课程逐渐搭建起自己的知识体系。<br><br>GitHub的readme里有一些参考资料，可以看一下BS的C++11 FAQ，对C++11新特性介绍的比较详细。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589246282,"ip_address":"","comment_id":216148,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1589196815","product_id":100051801,"comment_content":"罗老师，您好，主要目前的工作全都是c++11新特性写的代码，我之前工作两年都是98标准，刚入职两天。对新特性的代码读的不太懂，想通过您的课程，快速去理解代码，但是想知道 如何快速的去理解新特性的代码，现在就是边搜索。边去理解。但是感觉很困难，搜到的例子很简单易懂。但是结合项目。就觉得别人写的很深奥。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494689,"discussion_content":"有C++98的基础，学习C++11应该是很快的。\n\n不过C++11的新特性很多，可能刚接触会比较懵，可以先从简单的学起，比如auto、nullptr、range-for，再跟着课程逐渐搭建起自己的知识体系。\n\nGitHub的readme里有一些参考资料，可以看一下BS的C++11 FAQ，对C++11新特性介绍的比较详细。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589246282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1997125,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/79/45/d6bb221e.jpg","nickname":"乐生          ༽","note":"","ucode":"9091F0FC9BE23F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263771,"discussion_content":"好的。谢谢罗老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589246346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215659,"user_name":"阿鼎","can_delete":false,"product_type":"c1","uid":1042634,"ip_address":"","ucode":"EE763513563F50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/ca/2a7cc193.jpg","comment_is_top":false,"comment_ctime":1589066392,"is_pvip":false,"replies":[{"id":"79827","content":"<br>1.可行，但难度会比较大，C++11里的很多新特性在98&#47;03里只能模拟实现，甚至无法模拟。<br><br>2.这种情况就要重构了，不破不立，不要总是背着历史的包袱。像gcc，以前一直用C，后来终于下狠心，转成了C++，转完以后就爽了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589091510,"ip_address":"","comment_id":215659,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589066392","product_id":100051801,"comment_content":"由于项目代码比较老，现在很多开源库都是11的。请问老师可否将c++11的代码，能否逆向转化成c++03的？对于老工程，语言生态已经停滞更新，如何应对？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494514,"discussion_content":"\n1.可行，但难度会比较大，C++11里的很多新特性在98/03里只能模拟实现，甚至无法模拟。\n\n2.这种情况就要重构了，不破不立，不要总是背着历史的包袱。像gcc，以前一直用C，后来终于下狠心，转成了C++，转完以后就爽了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589091510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215271,"user_name":"cww","can_delete":false,"product_type":"c1","uid":1182228,"ip_address":"","ucode":"CD3B5C70E13135","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/14/988b7900.jpg","comment_is_top":false,"comment_ctime":1588944776,"is_pvip":false,"replies":[{"id":"79704","content":"说的很好，理解了这两个概念，我们才能把握C++的本质，把C++的特性分类分治来学习。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588985875,"ip_address":"","comment_id":215271,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588944776","product_id":100051801,"comment_content":"生命周期就像想法到实现的过程。从编码到运行是单个cpp程序的生命周期，同时也是一个大的cpp工程的生命周期。<br>编程范式是实现想法的设计方法，有道是条条大路通罗马，编程范式更像是通往罗马（实现设计）的一条道路。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494377,"discussion_content":"说的很好，理解了这两个概念，我们才能把握C++的本质，把C++的特性分类分治来学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588985875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215153,"user_name":"大大","can_delete":false,"product_type":"c1","uid":1340730,"ip_address":"","ucode":"3A3DC9AC382651","user_header":"https://static001.geekbang.org/account/avatar/00/14/75/3a/a7596c06.jpg","comment_is_top":false,"comment_ctime":1588916534,"is_pvip":false,"replies":[{"id":"79611","content":"不知道你说的容器是不是docker，它用的是go。<br><br>如果是这样的话，我觉得现在微服务、service mesh、云还是很热门的，可以继续努力。<br><br>但学习C++可以让你打好基础，理解底层计算机的运行机制，反过来让你在上层更好地工作。<br><br>而且C++也很容易编写各种底层模块给上层调用，做混合编程里最核心最要求性能的那部分。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588918733,"ip_address":"","comment_id":215153,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1588916534","product_id":100051801,"comment_content":"老师，请教个问题，我目前坐容器相关得工作，但是开发很少。一直认为程序员开发得基本功必须扎实，所以又过来看看久违的c++。老师觉得我应该换个工作提高开发水平，还是其他","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494334,"discussion_content":"不知道你说的容器是不是docker，它用的是go。\n\n如果是这样的话，我觉得现在微服务、service mesh、云还是很热门的，可以继续努力。\n\n但学习C++可以让你打好基础，理解底层计算机的运行机制，反过来让你在上层更好地工作。\n\n而且C++也很容易编写各种底层模块给上层调用，做混合编程里最核心最要求性能的那部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588918733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261948,"discussion_content":"我现在的工作离docker、k8s比较远，隔行如隔山，感觉还是很有钱途的，可以平时学一下C++，艺多不压身。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589027617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1340730,"avatar":"https://static001.geekbang.org/account/avatar/00/14/75/3a/a7596c06.jpg","nickname":"大大","note":"","ucode":"3A3DC9AC382651","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260960,"discussion_content":"是docker k8s 。平时也可以看他们的来源代码，但总感觉看还是差点意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588919299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214945,"user_name":"哈珀朋友","can_delete":false,"product_type":"c1","uid":1180872,"ip_address":"","ucode":"16BDDE3B75D327","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/c8/68263086.jpg","comment_is_top":false,"comment_ctime":1588854320,"is_pvip":false,"replies":[{"id":"79584","content":"这两个方向都是C++擅长的领域，可惜我没往这方面发展。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588856818,"ip_address":"","comment_id":214945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588854320","product_id":100051801,"comment_content":"感兴趣的两个方向图形学和音视频都是C++逃不掉，C++性能和效率还是高啊","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494251,"discussion_content":"这两个方向都是C++擅长的领域，可惜我没往这方面发展。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588856818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214862,"user_name":"jxon-H","can_delete":false,"product_type":"c1","uid":1897700,"ip_address":"","ucode":"D491FAB6A07A4A","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/e4/e7471344.jpg","comment_is_top":false,"comment_ctime":1588837017,"is_pvip":false,"replies":[{"id":"79545","content":"说得很好。<br><br>生命周期这个其实是为了方便大家理解C++程序，把它分解成几个阶段，有的C++特性只在某个阶段起作用，这样就会认识的比较清楚。<br>","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588838311,"ip_address":"","comment_id":214862,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588837017","product_id":100051801,"comment_content":"我的C++一直没学懂没学好。希望能跟上罗老师的步伐，填补我知识结构的空缺。<br><br>罗老师把C++的生命周期与瀑布模型进行类比，形象地把C++的编程过程进行剖析，通过在生命周期四个过程的来回改进，实现程序的螺旋式上升，巧妙地说清了软件开发是个不断迭代的过程。<br><br>关于C++的优点，都说是因为贴紧硬件底层，与java相比，少了把源码先翻译成字节码，而是直接翻译成机器码。与脚本语言相比，脚本语言读一条指令执行一条，和用户的交互性好，比较容易一步步优化代码；而C++是一次编译，就全翻译成机器码，要求思维比较严谨，牵一发动全身。<br>请老师指正。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494224,"discussion_content":"说得很好。\n\n生命周期这个其实是为了方便大家理解C++程序，把它分解成几个阶段，有的C++特性只在某个阶段起作用，这样就会认识的比较清楚。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588838311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214858,"user_name":"文若","can_delete":false,"product_type":"c1","uid":1017387,"ip_address":"","ucode":"3D3045975ED2DB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/86/2b/f82a7d5a.jpg","comment_is_top":false,"comment_ctime":1588835357,"is_pvip":false,"replies":[{"id":"79540","content":"Boost太大，不太好讲，下次如果有机会再说吧，这次的主题是C++本身。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588836952,"ip_address":"","comment_id":214858,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588835357","product_id":100051801,"comment_content":"能把问题通俗易懂的讲出来,才见功夫,老师厉害!不知道后续课程里面有Boost相关的知识点没有,想多了解Boost相关?","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494221,"discussion_content":"Boost太大，不太好讲，下次如果有机会再说吧，这次的主题是C++本身。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588836952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214827,"user_name":"natural","can_delete":false,"product_type":"c1","uid":1319618,"ip_address":"","ucode":"69E5FADF7A70D4","user_header":"https://static001.geekbang.org/account/avatar/00/14/22/c2/1ebf5788.jpg","comment_is_top":false,"comment_ctime":1588826273,"is_pvip":false,"replies":[{"id":"79524","content":"暂时还没有想法，我个人觉得能用文字和音频解决最好，视频教程花的精力比较多，抱歉啊。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588828787,"ip_address":"","comment_id":214827,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1588826273","product_id":100051801,"comment_content":"罗老师考虑出视频教程么？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494214,"discussion_content":"暂时还没有想法，我个人觉得能用文字和音频解决最好，视频教程花的精力比较多，抱歉啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588828787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1319618,"avatar":"https://static001.geekbang.org/account/avatar/00/14/22/c2/1ebf5788.jpg","nickname":"natural","note":"","ucode":"69E5FADF7A70D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259949,"discussion_content":"原来如此，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588831887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214734,"user_name":"chen_julio","can_delete":false,"product_type":"c1","uid":1131403,"ip_address":"","ucode":"C42E8519053635","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/8b/9e4462c9.jpg","comment_is_top":false,"comment_ctime":1588812042,"is_pvip":false,"replies":[{"id":"79492","content":"在C++98时代模板元编程特别复杂，到了C++11&#47;14就好一些了，因为有了using别名，可以在编译阶段写类型的赋值语句。<br><br>不过模板元编程还是属于高级技巧，应用的场合比较少，所以这次的专栏就暂时不讲。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588812984,"ip_address":"","comment_id":214734,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588812042","product_id":100051801,"comment_content":"模版元简直变态，各种黑魔法","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494188,"discussion_content":"在C++98时代模板元编程特别复杂，到了C++11/14就好一些了，因为有了using别名，可以在编译阶段写类型的赋值语句。\n\n不过模板元编程还是属于高级技巧，应用的场合比较少，所以这次的专栏就暂时不讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588812984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214667,"user_name":"luoyayun361","can_delete":false,"product_type":"c1","uid":1779257,"ip_address":"","ucode":"D3AD83D44EE721","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKfLxAj43sGzJTnmdh8iawoNJ1VsdFvJHTHccxkX7HhtOFtTV9icG3B2Gt5EztPOicsicc3xG0XTlyUVg/132","comment_is_top":false,"comment_ctime":1588778405,"is_pvip":false,"replies":[{"id":"79477","content":"共同努力。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1588800477,"ip_address":"","comment_id":214667,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588778405","product_id":100051801,"comment_content":"准备上车了","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494162,"discussion_content":"共同努力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588800477,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214653,"user_name":"Sun","can_delete":false,"product_type":"c1","uid":1233977,"ip_address":"","ucode":"84C079D1F3B5EE","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/39/a980c04d.jpg","comment_is_top":false,"comment_ctime":1588776923,"is_pvip":false,"replies":[{"id":"79480","content":"精确地说是的，但我这里把由源码转换到二进制的过程统一称为编译阶段，省事了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1588800800,"ip_address":"","comment_id":214653,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588776923","product_id":100051801,"comment_content":"老师好，在编译和链接是不是还有一个汇编阶段，汇编器将汇编代码转换成目标代码","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494154,"discussion_content":"精确地说是的，但我这里把由源码转换到二进制的过程统一称为编译阶段，省事了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588800800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214583,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1510495,"ip_address":"","ucode":"C6FC61A90F202B","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/5f/4cbcbfb9.jpg","comment_is_top":false,"comment_ctime":1588768644,"is_pvip":false,"replies":[{"id":"79437","content":"哈哈，学C++学深了自然而然会学模板元编程，很有意思，但小心太过痴迷，我就差点走火入魔。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1588773186,"ip_address":"","comment_id":214583,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588768644","product_id":100051801,"comment_content":"最后那句 模板元编程 就绝对是你的不二选择后面那个迷之微笑啊，我都能脑部画面了","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494127,"discussion_content":"哈哈，学C++学深了自然而然会学模板元编程，很有意思，但小心太过痴迷，我就差点走火入魔。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588773186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214550,"user_name":"木瓜777","can_delete":false,"product_type":"c1","uid":1512537,"ip_address":"","ucode":"FC52A499AF6374","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aFAYPyw7ywC1xE9h1qibnTBwtWn2ClJqlicy5cMomhZVaruMyqSq76wMkS279mUaGhrLGwWo9ZnW0WCWfmMovlXw/132","comment_is_top":false,"comment_ctime":1588764187,"is_pvip":false,"replies":[{"id":"79412","content":"这个专业性比较强，我在工作中没有用到，只有大概的了解，可能帮不上你。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1588764767,"ip_address":"","comment_id":214550,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1588764187","product_id":100051801,"comment_content":"罗老师，您对boost 中的 geometry这个模块了解吗？最近使用中遇到一些问题","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494108,"discussion_content":"这个专业性比较强，我在工作中没有用到，只有大概的了解，可能帮不上你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588764767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512537,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/aFAYPyw7ywC1xE9h1qibnTBwtWn2ClJqlicy5cMomhZVaruMyqSq76wMkS279mUaGhrLGwWo9ZnW0WCWfmMovlXw/132","nickname":"木瓜777","note":"","ucode":"FC52A499AF6374","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259160,"discussion_content":"没事，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588765008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214528,"user_name":"NEVER SETTLE","can_delete":false,"product_type":"c1","uid":1101894,"ip_address":"","ucode":"9C86BDAFDBF768","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/46/1a9229b3.jpg","comment_is_top":false,"comment_ctime":1588762063,"is_pvip":false,"replies":[{"id":"79410","content":"好的，不过这里打字回复还是不太方便，也可以去GitHub的boost_guide仓库里提issue。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1588762441,"ip_address":"","comment_id":214528,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1588762063","product_id":100051801,"comment_content":"最近在学老师的BOOST书籍，有些问题，后面整理下请教老师下","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494095,"discussion_content":"好的，不过这里打字回复还是不太方便，也可以去GitHub的boost_guide仓库里提issue。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588762441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101894,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/46/1a9229b3.jpg","nickname":"NEVER SETTLE","note":"","ucode":"9C86BDAFDBF768","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259126,"discussion_content":"好的😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588762565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214509,"user_name":"郑泽帆 Zephyr","can_delete":false,"product_type":"c1","uid":1378269,"ip_address":"","ucode":"DF7B1D07AE86C8","user_header":"https://static001.geekbang.org/account/avatar/00/15/07/dd/c3de146e.jpg","comment_is_top":false,"comment_ctime":1588759719,"is_pvip":true,"replies":[{"id":"79396","content":"学会C++的几个关键点，再避开常见的坑，C++也就不难了，以后再慢慢学习那些高级技巧。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1588761014,"ip_address":"","comment_id":214509,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588759719","product_id":100051801,"comment_content":"跟着罗老师入门 C++","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494085,"discussion_content":"学会C++的几个关键点，再避开常见的坑，C++也就不难了，以后再慢慢学习那些高级技巧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588761014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214486,"user_name":"godliness","can_delete":false,"product_type":"c1","uid":1341267,"ip_address":"","ucode":"1C1976C39DCFE6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIuUYcwKWUuib5mpdIbTwQzTGNWBmk0ktZSwm2vteUXf4TxWF2aVCv7Hvshcq0OaG7JRLj6rJyPLicA/132","comment_is_top":false,"comment_ctime":1588756492,"is_pvip":false,"replies":[{"id":"79387","content":"以C++为主，C语言也适用，其他的比如Java、Python可以参考，开拓思路，混合编程。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1588757062,"ip_address":"","comment_id":214486,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588756492","product_id":100051801,"comment_content":"罗老师，该课程只适合有c++经验的吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494074,"discussion_content":"以C++为主，C语言也适用，其他的比如Java、Python可以参考，开拓思路，混合编程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588757062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}