{"id":96324,"title":"11 | 多任务：进程、线程与协程","content":"<p>你好，我是七牛云许式伟。</p><p>到现在为止，我们已经介绍了操作系统的存储管理：内存与外存；也已经介绍了输入与输出设备的管理。</p><p>当然，考虑到输入与输出设备属于人机交互范畴，我们主要会留到下一章 “桌面软件开发” 去详细介绍，这一章，我们仅概要地回顾输入与输出设备的需求演进过程。</p><p><strong>CPU + 存储 + 输入与输出，软件开发最基础的内容基本上就都覆盖到了。</strong> 今天开始，我们就来聊一聊多任务。</p><h2>多任务与执行体</h2><p>多任务的需求是随处可见的。常见的场景，比如我们想边工作边听音乐；又或者我们需要跑一个后台监控程序，以报告随时可能发生的异常。</p><p>那么，怎么才能做到多任务？</p><p>我们先从物理层面看。最早期的 CPU 基本上都是单核的，也就是同一时间只能执行一条指令。尽管如此，大家可能都听过 “摩尔定律”，简单地说就是，每隔一年半到两年，同样的钱能买到的计算力能够翻一倍。</p><p>这当然不是什么严谨的物理学定律，更多的是一定历史时期下的经验之谈。早期 CPU 工艺的发展，基本上是通过提高电子元器件的密集程度实现的；但是电子元器件大小总归有个极限，不可能无限小下去。</p><p>那么怎么办？不能更小的话，那就横向多铺几个，一颗 CPU 多加几颗核心。这样多核技术就出现了。多核的意思是说，单核速度我提不上去了，多给你几个，价格一样。</p><!-- [[[read_end]]] --><p>所以<strong>物理层面的多任务，有两个方法：一个是多颗 CPU，一个是单颗 CPU 多个核心。</strong></p><p>在桌面端，大多数情况用的是后者，因为桌面端的产品（个人计算机、手机、手表等）还是很在意产品的体积如何尽可能做得更小；而服务器领域，通常同时使用两者，它更多关注的是如何尽可能提升单台计算机的计算力密度。</p><p>但如果我们实际就只有一个单核的 CPU，是否就没办法实现多任务呢？</p><p>当然可以。方法是把 CPU 的时间切成一段段时间片，每个时间片只运行某一个软件。这个时间片给软件 A，下一个时间片给软件 B。因为时间片很小，我们会感觉这些软件同时都在运行。这种分时间片实现的多任务系统，我们把它叫分时系统。</p><p>分时系统的原理说起来比较简单，把当前任务状态先保存起来，把另一个任务的状态恢复，并把执行权交给它即可。这里面涉及的问题有：</p><ul>\n<li>任务是什么，怎么抽象任务这样一个概念；</li>\n<li>任务的状态都有什么？怎么保存与恢复；</li>\n<li>什么时机会发生任务切换？</li>\n</ul><p>从今天的现实看，任务的抽象并不是唯一的。大部分操作系统提供了两套：进程和线程。有的操作系统还会提供第三套叫协程（也叫纤程）。</p><p>我个人喜欢统一用来 “<strong>执行体</strong>” 一词来统称它们。所谓<strong>执行体</strong>，是指可被 CPU 赋予执行权的对象，它至少包含下一个执行位置（获得执行权后会从这里开始执行）以及其他的运行状态。</p><p>任务的状态都有什么？</p><p>从 CPU 的角度，执行程序主要依赖的是内置存储：寄存器和内存（RAM），它们构成执行体的上下文。</p><p><strong>先看寄存器</strong>。寄存器的数量很少且可枚举，我们直接通过寄存器名进行数据的存取。</p><p>在我们把 CPU 的执行权从软件 A 切换到软件 B 的时候，要把软件 A 所有用到的寄存器先保存起来（以便后续轮到软件 A 执行的时候恢复），并且把寄存器的值恢复到软件 B 上一次执行时的值，然后才把执行权交给软件 B。</p><p>这样，在软件 A 和 B 的视角看来，它们好像一直都是独自在使用 CPU，从未受到过其他软件的打扰。</p><p><strong>我们再看内存（RAM）</strong>。CPU 在实模式和保护模式下的内存访问机制完全不同，我们分别进行讨论。在实模式下，多个执行体同在一个内存地址空间，相互并无干扰（非恶意情况下）。</p><p>在保护模式下，不同任务可以有不同的地址空间，它主要通过不同的地址映射表来体现。怎么切换地址映射表？也是寄存器。</p><p>所以，总结就一句话：<strong>执行体的上下文，就是一堆寄存器的值。要切换执行体，只需要保存和恢复一堆寄存器的值即可。</strong>无论是进程、线程还是协程，都是如此。</p><h2>进程与线程</h2><p>那么，不同的执行体究竟有何不同？为何会出现不同种类的执行体？</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/8a/bf0720da6789e599daf672e1db04058a.jpg?wh=1183*228\" alt=\"\"></p><p>进程是操作系统从安全角度来说的隔离单位，不同进程之间基于最低授权的原则。</p><p>在创建一个进程这个事情上，UNIX 偷了一次懒，用的是 fork（分叉）语义。所谓 fork，就是先 clone 然后再分支，父子进程各干各的。</p><p>这样创建进程很讨巧，不用传递一堆的参数，使用上非常便利。但我认为从架构设计的角度，这是 UNIX 操作系统设计中最糟糕的 API，没有之一。而更不幸的是 Linux 把这一点继承下来了。</p><p>为什么进程 fork 是糟糕的？<strong>这是因为：进程是操作系统最基本的隔离单元，我们怕的就是摘不清楚，但是 fork 偏偏要藕断丝连。</strong></p><p>这一点 Windows 要清晰很多，哪些文件句柄在子进程中还要用到，一一明确点名，而不是 fork 一下糊里糊涂就继承过去了。</p><p>事实上我个人那么多年工程经验表明，除了会接管子进程的标准输入和标准输出，我们几乎从来不会通过向子进程传递文件句柄来通讯。</p><p>所以 fork 这种传递进程上下文的方式，是彻头彻尾的一次过度设计。甚至严重一点说，是设计事故。</p><p>线程的出现，则是因为操作系统发现同一个软件内还是会有多任务的需求，这些任务处在相同的地址空间，彼此之间相互可以信任。</p><p>从线程角度去理解 UNIX 的 fork，能够稍微理解一些设计者们当年的考量。</p><p>早期操作系统中没有线程的概念，也不会有人想到要搞两套执行体。所以进程实际上承担了一部分来自线程的需求：我需要父进程的环境。</p><h2>协程与goroutine</h2><p>协程并不是操作系统内核提供的，它有时候也被称为用户态线程。这是因为协程是在用户态下实现的。如果你感兴趣，也可以自己实现一个。</p><p>但为什么会出现协程呢？看起来它要应对的需求与线程一样，但是功能比线程弱很多？</p><p>答案是因为实现高性能的网络服务器的需要。对于常规的桌面程序来说，<strong>进程+线程绰绰有余。</strong> 但对于一个网络服务器，我们可以用下面这个简单的模型看它：</p><p><img src=\"https://static001.geekbang.org/resource/image/76/06/767fa0814f026410827a6185218c9c06.png?wh=1879*1011\" alt=\"\"></p><p>对网络服务器来说，大量的来自客户端的请求包和服务器的返回包，都是网络 IO；在响应请求的过程中，往往需要访问存储来保存和读取自身的状态，这也涉及本地或网络 IO。</p><p>如果这个网络服务器有很多客户，那么整个服务器就充斥着大量并行的 IO 请求。</p><p>操作系统提供的标准网络 IO 有以下这些成本：</p><ul>\n<li>系统调用机制产生的开销；</li>\n<li>数据多次拷贝的开销（数据总是先写到操作系统缓存再到用户传入的内存）；</li>\n<li>因为没有数据而阻塞，产生调度重新获得执行权，产生的时间成本；</li>\n<li>线程的空间成本和时间成本（标准 IO 请求都是同步调用，要想 IO 请求并行只能使用更多线程）。</li>\n</ul><p>在一些人心目中会有一个误区：操作系统的系统调用很慢。这句话很容易被错误地理解为系统调用机制产生的开销很大。</p><p>但这是很大的误解。系统调用虽然比函数调用多做了一点点事情，比如查询了中断向量表（这类似编程语言中的虚函数），比如改变 CPU 的执行权限（从用户态跃迁到内核态再回到用户态）。</p><p>但是注意这里并没有发生过调度行为，所以归根结底还是一次函数调用的成本。怎么理解操作系统内核我们示意如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/35/cb/35e748fa03b0f5a0a28ed5dafd9644cb.png?wh=1920*1226\" alt=\"\"></p><p>从操作系统内核的主线程来说，内核是独立进程，但是从系统调用的角度来说，操作系统内核更像是一个多线程的程序，每个系统调用是来自某个线程的函数调用。</p><p>为了改进网络服务器的吞吐能力，现在主流的做法是用 epoll（Linux）或 IOCP（Windows）机制，这两个机制颇为类似，都是在需要 IO 时登记一个 IO 请求，然后统一在某个线程查询谁的 IO 先完成了，谁先完成了就让谁处理。</p><p>从系统调用次数的角度，epoll 或 IOCP 都是产生了更多次数的系统调用。从内存拷贝来说也没有减少。所以真正最有意义的事情是：减少了线程的数量。</p><p>既然不希望用太多的线程，网络服务器就不能用标准的同步 IO（read/write）来写程序。知名的异步 IO 网络库 libevent 就是对 epoll 和 IOCP 这些机制包装了一套跨平台的异步 IO 编程模型。</p><p>Node.js 一炮而红，也是因为把 JavaScript 的低门槛和 libevent 的高性能结合起来，给了前端程序员一个“我也能搞高性能服务器”的梦想。</p><p>但是异步 IO 编程真的很反人类，它让程序逻辑因为 IO 异步回调函数而碎片化。我们开始怀念写同步 IO 的那些日子了。</p><p>让我们再回头来看：我们为什么希望减少线程数量？因为线程的成本高？我们分析一下。</p><p>首先，我们看下时间成本。它可以拆解为：</p><ul>\n<li>执行体切换本身的开销，它主要是寄存器保存和恢复的成本，可腾挪的余地非常有限；</li>\n<li>执行体的调度开销，它主要是如何在大量已准备好的执行体中选出谁获得执行权；</li>\n<li>执行体之间的同步与互斥成本。</li>\n</ul><p>我们再看线程的空间成本。它可以拆解为：</p><ul>\n<li>执行体的执行状态；</li>\n<li>TLS（线程局部存储）；</li>\n<li>执行体的堆栈。</li>\n</ul><p>空间成本是第一根稻草。默认情况下 Linux 线程在数 MB 左右，其中最大的成本是堆栈（虽然，线程的堆栈大小是可以设置的，但是出于线程执行安全性的考虑，线程的堆栈不能太小）。</p><p>我们可以算一下，如果一个线程 1MB，那么有 1000 个线程就已经到 GB 级别了，消耗太快。</p><p>执行体的调度开销，以及执行体之间的同步与互斥成本，也是一个不可忽略的成本。虽然单位成本看起来还好，但是盖不住次数实在太多。</p><p>我们想象一下：系统中有大量的 IO 请求，大部分的 IO 请求并未命中而发生调度。另外，网络服务器的存储是个共享状态，也必然伴随着大量的同步与互斥操作。</p><p>综上，协程就是为了这样两个目的而来：</p><ul>\n<li>回归到同步 IO 的编程模式；</li>\n<li>降低执行体的空间成本和时间成本。</li>\n</ul><p>但是，大部分你看到的协程（纤程）库只是一个半吊子。它们都只实现了协程的创建和执行权的切换，缺了非常多的内容。包括：</p><ul>\n<li>协程的调度；</li>\n<li>协程的同步、互斥与通讯；</li>\n<li>协程的系统调用包装，尤其是网络 IO 请求的包装。</li>\n</ul><p>这包含太多的东西，基本上你看到的服务端操作系统所需的东西都要包装一遍。而且，大部分协程库，连协程的基础功能也是半吊子的。这里面最难搞的是堆栈。</p><p>为什么协程的堆栈是个难题？因为，协程的堆栈如果太小则可能不够用；而如果太大则协程的空间成本过高，影响能够处理的网络请求的并发数。理想情况下，堆栈大小需要能够自动适应需要。</p><p>所以，一个完备的协程库你可以把它理解为用户态的操作系统，而协程就是用户态操作系统里面的 “进程”。</p><p>这世界上有完备的协程库么？有。有两个语言干了这事儿：Erlang 和 Go 语言。Erlang 语言它基于虚拟机，但是道理上是一致的。Go 语言里面的用户态 “进程” 叫 goroutine。它有这样一些重要设计：</p><ul>\n<li>堆栈开始很小（只有 4K），但可按需自动增长；</li>\n<li>坚决干掉了 “线程局部存储（TLS）” 特性的支持，让执行体更加精简；</li>\n<li>提供了同步、互斥和其他常规执行体间的通讯手段，包括大家非常喜欢的 channel；</li>\n<li>提供了几乎所有重要的系统调用（尤其是 IO 请求）的包装。</li>\n</ul><h2>架构师的批判性思维</h2><p>多任务的需求非常复杂。</p><p>为了满足需要，人们不只发明了三套执行体：进程、线程和协程，还发明了各种五花八门的执行体间的通讯机制（可以参考 “<a href=\"https://time.geekbang.org/column/article/94486\">08 | 操作系统内核与编程接口</a>” 中我们给出的表格）。有一些执行体间的通讯机制在逐渐消亡，退出历史舞台。</p><p>操作系统内核之中，不乏无数精妙的设计思想。但是，前辈们也并非圣贤，也可能会出现一些决策上失误，留下了诸多后遗症。</p><p>这非常正常。操作系统内核是非常庞大而复杂的基础软件。它并不像计算机基础体系结构，简洁优雅。</p><p>对 CPU 而言，统一的、接口一致的输入输出设备，到了操作系统这里，它需要依据每一种设备的需求特性，抽象出对应的更加用户友好的使用接口。这个工作既繁重，又需要极强的预见性。</p><p>而作为后辈的我们，在体会这些精妙的设计思想的同时，也要批判性去吸收。日常我们天天依赖于这些基础架构，受到它们的影响与约束，这些实在是最佳的学习材料。</p><h2>结语</h2><p>今天我们重点介绍了多任务，以及多任务带来的复杂需求，由此介绍了进程、线程和协程等三套执行体的设计。后面我们还会分进程内和进程间来介绍进程的通讯机制。</p><p>执行体的设计，有非常多值得反思的地方。UNIX 的 fork API 是否是一个好的设计？线程的设计是否成功？如果线程的设计是优良的，是不是就不再有 Go 语言这种在用户态重造执行体和 IO 子系统的必要性？</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","neighbors":{"left":{"article_title":"10 | 输入和输出设备：交互的演进","id":95660},"right":{"article_title":"12 | 进程内协同：同步、互斥与通讯","id":96994}},"comments":[{"had_liked":false,"id":96573,"user_name":"易林林","can_delete":false,"product_type":"c1","uid":1049836,"ip_address":"","ucode":"27F84A3FCBBCAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/ec/0539c89d.jpg","comment_is_top":false,"comment_ctime":1558451098,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"349450802074","product_id":100025201,"comment_content":"这才是真正的架构师课程，如果不具备这些基础知识，很难想象能够设计出好的软件系统架构。现在看到很多懂点技术和懂点产品的人自封为架构师，并没有去真正抓住软件架构的本质，实在感到有些汗颜。","like_count":81,"discussions":[{"author":{"id":1041465,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e4/39/a06ade33.jpg","nickname":"极客雷","note":"","ucode":"0DBAC4CB9C7BCD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396420,"discussion_content":"这些是科班的基础呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632440447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2721992,"avatar":"","nickname":"Geek_8b35f7","note":"","ucode":"E3955A3FB3A7B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386602,"discussion_content":"good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627660236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96565,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1558449925,"is_pvip":true,"replies":[{"id":"34586","content":"协程不走系统调用。协程切换只是寄存器的保存和恢复，所以可以在用户态下自己来实现。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558453027,"ip_address":"","comment_id":96565,"utype":1}],"discussion_count":2,"race_medal":1,"score":"164767207173","product_id":100025201,"comment_content":"对于协程的概念没有理解，协程不也是走系统调用吗？走系统调用不就是走到了系统内核态呢？后面任务调度，cpu执行指令","like_count":38,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450921,"discussion_content":"协程不走系统调用。协程切换只是寄存器的保存和恢复，所以可以在用户态下自己来实现。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1558453027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572489,"discussion_content":"老师同学好，有个问题：\n文中有说道，Goroutine “提供了几乎所有重要的系统调用（尤其是 IO 请求）的包装”。\n难道不是走系统调用吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652801335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96302,"user_name":"Barry","can_delete":false,"product_type":"c1","uid":1003308,"ip_address":"","ucode":"79117738B2B26E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/2c/a17b23f7.jpg","comment_is_top":false,"comment_ctime":1558397013,"is_pvip":false,"replies":[{"id":"34495","content":"挺好的建议，多谢。下一节我们讲 “进程内协同：同步、互斥与通讯”。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558404358,"ip_address":"","comment_id":96302,"utype":1}],"discussion_count":1,"race_medal":0,"score":"143292317781","product_id":100025201,"comment_content":"有一个小建议，能否再每篇文章的最后面预告一下，下一篇要讲的主题。这样我们跟着主题先思考，等看文章的时候就可以看到作者和自己的想法有什么出入和补充。更有利于吸收","like_count":33,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450821,"discussion_content":"挺好的建议，多谢。下一节我们讲 “进程内协同：同步、互斥与通讯”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558404358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96323,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1558399198,"is_pvip":false,"replies":[{"id":"34499","content":"从单位时间成本来说，有一定优势但也不会特别大。主要少掉的代价是从用户态到内核态再回到用户态的成本。这种差异类似于系统调用和普通函数调用的差异。因为高性能服务器上io次数实在太多了，所以单位成本上能够少一点，积累起来也是很惊人的。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558404750,"ip_address":"","comment_id":96323,"utype":1}],"discussion_count":5,"race_medal":0,"score":"126112450782","product_id":100025201,"comment_content":"有一个疑问:协程属于用户态的线程，它跟线程之间怎么对应呢？协程之间也需要切换，那线程切换的那些成本它一样有啊，没想明白它的优势在哪","like_count":29,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450832,"discussion_content":"从单位时间成本来说，有一定优势但也不会特别大。主要少掉的代价是从用户态到内核态再回到用户态的成本。这种差异类似于系统调用和普通函数调用的差异。因为高性能服务器上io次数实在太多了，所以单位成本上能够少一点，积累起来也是很惊人的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1558404750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248902,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoePGhm726ibuiclgdp4v4OwiaSc0q2pEibBiaG0pw5STuJk3St0icqnEZguyQau8rw3BiaN51pGm0K71f6w/132","nickname":"enjoy","note":"","ucode":"913497BC50ED10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550955,"discussion_content":"这里看懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644824886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053498,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/3a/b0454322.jpg","nickname":"Eric","note":"","ucode":"59752A51A382A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":100235,"discussion_content":"如果只是减少内核态用户态的状态切换，零拷贝也可以做到呀？区别在于 零拷贝不能修改改文件内容么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577244011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1157808,"avatar":"","nickname":"shupian419","note":"","ucode":"A49AB045FE2341","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1053498,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/3a/b0454322.jpg","nickname":"Eric","note":"","ucode":"59752A51A382A6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375339,"discussion_content":"零拷贝是为了避免cpu将数据从一个内存地址拷贝到另一个内存地址；用户态到内核态切换要做的是执行软中断，查询中断向量表，cpu执行权限从用户态到内核态。这应该不一样吧。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1621583388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":100235,"ip_address":""},"score":375339,"extra":""},{"author":{"id":1053498,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/3a/b0454322.jpg","nickname":"Eric","note":"","ucode":"59752A51A382A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1157808,"avatar":"","nickname":"shupian419","note":"","ucode":"A49AB045FE2341","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375561,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621743947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375339,"ip_address":""},"score":375561,"extra":""}]}]},{"had_liked":false,"id":118612,"user_name":"饭","can_delete":false,"product_type":"c1","uid":1610573,"ip_address":"","ucode":"B3F1702D4DE604","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","comment_is_top":false,"comment_ctime":1564397171,"is_pvip":false,"replies":[{"id":"43451","content":"应对方式有两种：一种是经典的线程池+异步io，一种是基于协程的同步io。后者背后的原理也是线程池+异步io，只不过加上了协程的语法糖了。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1564398300,"ip_address":"","comment_id":118612,"utype":1}],"discussion_count":3,"race_medal":0,"score":"83168775795","product_id":100025201,"comment_content":"老师，可以这样理解吗？因为时代背景久远，当初操作系统设计的线程，不太适应现在巨流量的互联网时代，在网络IO请求过高的情况下，性能开销太大，所以才出现了协程的概念，还有一些线程池的手段来弥补这个问题","like_count":19,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460483,"discussion_content":"应对方式有两种：一种是经典的线程池+异步io，一种是基于协程的同步io。后者背后的原理也是线程池+异步io，只不过加上了协程的语法糖了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1564398300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572466,"discussion_content":"FYI\nLinux下并没有实现真正的异步io。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652796686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248902,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoePGhm726ibuiclgdp4v4OwiaSc0q2pEibBiaG0pw5STuJk3St0icqnEZguyQau8rw3BiaN51pGm0K71f6w/132","nickname":"enjoy","note":"","ucode":"913497BC50ED10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550954,"discussion_content":"感觉这个回答好容易懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644824870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98836,"user_name":"youyui","can_delete":false,"product_type":"c1","uid":1501890,"ip_address":"","ucode":"4CBD130E31CAEA","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/c2/445977ea.jpg","comment_is_top":false,"comment_ctime":1559102349,"is_pvip":false,"replies":[{"id":"35497","content":"https:&#47;&#47;github.com&#47;Tencent&#47;libco","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559127400,"ip_address":"","comment_id":98836,"utype":1}],"discussion_count":3,"race_medal":0,"score":"83163480973","product_id":100025201,"comment_content":"想了解下协程如何操作寄存器切换CPU上下文的，有没有什么好的资料可以学习下","like_count":19,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451858,"discussion_content":"https://github.com/Tencent/libco","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1559127400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188023,"avatar":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","nickname":"Eternal","note":"","ucode":"EA6FE7CC98F740","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533030,"discussion_content":"libco是微信后台大规模使用的c/c++协程库，2013年至今稳定运行在微信后台的数万台机器上。\n\nlibco通过仅有的几个函数接口 co_create/co_resume/co_yield 再配合 co_poll，可以支持同步或者异步的写法，如线程库一样轻松。同时库里面提供了socket族函数的hook，使得后台逻辑服务几乎不用修改逻辑代码就可以完成异步化改造。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637759180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1028639,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b2/1f/abb7bfe3.jpg","nickname":"william777","note":"","ucode":"C1C1108DD968F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305025,"discussion_content":"可以看golang的源码，操作寄存器是汇编语言写的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599743732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97478,"user_name":"王聪 Claire","can_delete":false,"product_type":"c1","uid":1090310,"ip_address":"","ucode":"0D9CC82C9F44D4","user_header":"https://static001.geekbang.org/account/avatar/00/10/a3/06/9fa93074.jpg","comment_is_top":false,"comment_ctime":1558679960,"is_pvip":false,"replies":[{"id":"34869","content":"如果用同步 io，那么每个并行 io 必然需要需要一个线程。epoll 在于让 io 等待都发生在相同的地方，相当于线程做了多路 io 复用。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558690305,"ip_address":"","comment_id":97478,"utype":1}],"discussion_count":3,"race_medal":0,"score":"70278156696","product_id":100025201,"comment_content":"您好，问一下epoll的意义在于让线程数量变少，是指等待执行的线程变少了吗？是因为都登记然后才能执行的机制吗？还是其他原因呢？谢谢。","like_count":16,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451291,"discussion_content":"如果用同步 io，那么每个并行 io 必然需要需要一个线程。epoll 在于让 io 等待都发生在相同的地方，相当于线程做了多路 io 复用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558690305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572467,"discussion_content":"供参考\n多路 io 复用，多路指的是多个连接，复用的是线程。\n网络线程与业务线程并不是一个，所以，为了加快业务处理，业务线程还是需要多个～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652796926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1143524,"avatar":"https://static001.geekbang.org/account/avatar/00/11/72/e4/b710245c.jpg","nickname":"lain","note":"","ucode":"3C869A65A3C161","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271224,"discussion_content":"上层业务线程，还是要多个吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590108301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286434,"user_name":"孙梦华🙄🙄","can_delete":false,"product_type":"c1","uid":1037070,"ip_address":"","ucode":"2017F0E865416C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/0e/d2f9dd72.jpg","comment_is_top":false,"comment_ctime":1617298775,"is_pvip":false,"replies":[{"id":"104034","content":"是这样，理解到位","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1617321106,"ip_address":"","comment_id":286434,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61746840919","product_id":100025201,"comment_content":"操作系统所有涉及系统调用的方法都在内核空间，包括磁盘读写，内存分配回收，网络接口读写数据，这些都是web应用巨频繁使用的。<br>如果是多线程，线程在进行io操作时需要从用户态切换到内核态，等待io的过程中要进行内核态线程的切换，然后再从内核态回到用户态，时间和空间的开销都很大。<br>go实现的协程里面，如老师讲的，是用户态执行体和独立的io子系统，相当于用户空间的线程和内核空间的线程分隔开，互不进出，用户态的线程执行到io操作时，通过epoll的形式登记一个io请求，内核线程执行完io请求以后其实逻辑上是调用用户态的回调方法，然后这里go把这种反人类的异步回调模式，给我们程序员封装起来了。<br><br>是不是可以这样理解啊","like_count":14,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517986,"discussion_content":"是这样，理解到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617321106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101325,"user_name":"闫飞","can_delete":false,"product_type":"c1","uid":1013162,"ip_address":"","ucode":"30C782D30108D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/aa/21275b9d.jpg","comment_is_top":false,"comment_ctime":1559782490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53099390042","product_id":100025201,"comment_content":"这里对NodeJS部分的引述有点小错误，它本身厉害的地方应该是争取了很多不想学习底层C&#47;C++语言又喜欢得到高性能的&quot;懒惰&quot;的程序员。它的底层是由v8解释器和基于用户代码单事件循环调用的libev调度框架组成。<br><br>可惜的是遇到复杂的事件循环堵死的情况，不理解这些底层原理的流水线JS程序员依然不能很快找到解决方案。碰到一些封装了第三方C库的运算复杂度高的代码，FFI接口反而隐藏了更大的问题。<br><br>至于异步编程回调麻烦的问题，其实编程语言也在另外一个纬度上封装异步原语，通过promise&#47;await等高级抽象缓解回调地狱困境。","like_count":12},{"had_liked":false,"id":98989,"user_name":"钱晟龙🐲龍🐉","can_delete":false,"product_type":"c1","uid":1125387,"ip_address":"","ucode":"C602E06A3B6BBD","user_header":"https://static001.geekbang.org/account/avatar/00/11/2c/0b/ad939ef7.jpg","comment_is_top":false,"comment_ctime":1559126907,"is_pvip":false,"replies":[{"id":"35617","content":"1、https:&#47;&#47;m.baidu.com&#47;sf_edu_wenku&#47;view&#47;3210fec818e8b8f67c1cfad6195f312b3169ebe8<br>2、是的，执行权会转移","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559171185,"ip_address":"","comment_id":98989,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48803767163","product_id":100025201,"comment_content":"老师，我一直有个问题没理解到，计算机在做IO的时候会不会使用CPU，如果会怎样使用的？ 阻塞IO阻塞的时候，也就是IO进行时，它对应的线程是否已经放弃了CPU的执行权？ 或者老师建议我查阅什么书籍。。","like_count":11,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451922,"discussion_content":"1、https://m.baidu.com/sf_edu_wenku/view/3210fec818e8b8f67c1cfad6195f312b3169ebe8\n2、是的，执行权会转移","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559171185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214581,"user_name":"王棕生","can_delete":false,"product_type":"c1","uid":1337944,"ip_address":"","ucode":"901BD0447A871E","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/58/f2c6d65b.jpg","comment_is_top":false,"comment_ctime":1588768417,"is_pvip":false,"replies":[{"id":"79451","content":"我们想一下进程的本质是什么。我们以内存资源为例，内存在不同进程中的逻辑地址与物理地址的映射表不同，更具体来看其实就只是几个寄存器的值的差异而已。所以实际上，并不存在线程调度和进程调度的区别，线程调度了，寄存器变了，进程也就切换了。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1588777602,"ip_address":"","comment_id":214581,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35948506785","product_id":100025201,"comment_content":"<br>我理解： 线程是CPU调度的基本单位，进程是资源(包括CPU计算资源)分配的基本单位；操作系统在决定谁来使用CPU的时候，操作系统不会去关注进程，而是关注线程，只有要切换到其它进程的线程时，才会关注进程。<br>比如：进程p1有三个线程t1 t2 t3，进程p2有三个线程t4 t5 t6, 操作系统关注的是这6个线程的调度，比如从t1切换到t2，从t2切换到t3，当从t3切换到t4的时候，发现t4是属于另一进程的，这个时候就会不知线程要调度，进程也要调度。<br><br>麻烦许老师点评一下，这样理解是否准确？","like_count":8,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494126,"discussion_content":"我们想一下进程的本质是什么。我们以内存资源为例，内存在不同进程中的逻辑地址与物理地址的映射表不同，更具体来看其实就只是几个寄存器的值的差异而已。所以实际上，并不存在线程调度和进程调度的区别，线程调度了，寄存器变了，进程也就切换了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588777602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1337944,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/58/f2c6d65b.jpg","nickname":"王棕生","note":"","ucode":"901BD0447A871E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259534,"discussion_content":"感谢许老师，我理解了！😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588780126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105121,"user_name":"13601994625","can_delete":false,"product_type":"c1","uid":1333988,"ip_address":"","ucode":"78A800FF33EBA0","user_header":"","comment_is_top":false,"comment_ctime":1560923589,"is_pvip":false,"replies":[{"id":"38088","content":"但是操作系统太多了，语言适配操作系统易，反过来难","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560927184,"ip_address":"","comment_id":105121,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23035760069","product_id":100025201,"comment_content":"理论上协程可以做到的优化，线程都可以做到。为什么不在操作系统层去解决这个问题呢？","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454566,"discussion_content":"但是操作系统太多了，语言适配操作系统易，反过来难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560927184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97179,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1502080,"ip_address":"","ucode":"5C0F6F2B784D60","user_header":"https://static001.geekbang.org/account/avatar/00/16/eb/80/baa681be.jpg","comment_is_top":false,"comment_ctime":1558602879,"is_pvip":false,"replies":[{"id":"34764","content":"python的协程是比较狭义的，它只是一种编程模式，并不算执行体。你可以了解一下Go语言的goroutine。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558624860,"ip_address":"","comment_id":97179,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23033439359","product_id":100025201,"comment_content":"不太理解协程的是怎么做到文中提到的两个优势的。只是看了一下python的协程，能理解它能减少执行体切换的时间成本（因为全在用户态中），但它的执行本质上就是串行执行呀，只是不同的子程序有了更多的入口而已，那怎么做到加速呢？","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451166,"discussion_content":"python的协程是比较狭义的，它只是一种编程模式，并不算执行体。你可以了解一下Go语言的goroutine。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558624860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96590,"user_name":"Geek_03056e","can_delete":false,"product_type":"c1","uid":1509657,"ip_address":"","ucode":"6D4289AD71BC1A","user_header":"","comment_is_top":false,"comment_ctime":1558454303,"is_pvip":false,"replies":[{"id":"34600","content":"1、文章中有表格，里面的调度方就是你说的控制方。不同执行体控制方不一样，调度算法不一样，概率也就不一样。<br>2、线程知道函数地址就行，一样是入口。<br>3、共享存储包括内存、数据库等等。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558487357,"ip_address":"","comment_id":96590,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23033290783","product_id":100025201,"comment_content":"有几个问题请教一下老师:<br>1 cpu时间片运行执行体，选择执行体时，是cpu控制，还是操作系统控制？进程、线程、协程获得的概率是一样的吗？<br>2 通过sh，cpu知道了进程的首地址，执行进程，这个线程是怎么执行的呢？<br>3 文中提到网络服务器的存储是个共享状态，这个存储指哪些存储呢？","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450927,"discussion_content":"1、文章中有表格，里面的调度方就是你说的控制方。不同执行体控制方不一样，调度算法不一样，概率也就不一样。\n2、线程知道函数地址就行，一样是入口。\n3、共享存储包括内存、数据库等等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558487357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96551,"user_name":"大糖果","can_delete":false,"product_type":"c1","uid":1509861,"ip_address":"","ucode":"80B7A530F181DC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK9Ijx19rLDhOrF9TicDeaq1lUr2vyTiajWIQiaNoWs9JLQqtiacyx0ffuib4qvaVdvk7WLvLib1oqRfAlA/132","comment_is_top":false,"comment_ctime":1558447198,"is_pvip":false,"replies":[{"id":"34573","content":"我认为是这样","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558449171,"ip_address":"","comment_id":96551,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23033283678","product_id":100025201,"comment_content":"那可以理解为如果操作系统把线程实现的足够灵活，轻便，就不需要协程这个机制了吗？","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450915,"discussion_content":"我认为是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558449171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311772,"avatar":"https://static001.geekbang.org/account/avatar/00/14/04/1c/b0c6c009.jpg","nickname":"zhj","note":"","ucode":"65B9E222D6E075","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196260,"discussion_content":"按这个理解，就是线程调度的时候能不要发生用户态-内核态-用户态的过程的话，就近乎和协程切换大同小异了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583333997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235971,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1595258366,"is_pvip":false,"replies":[{"id":"87285","content":"io完成只会做个标记，不会发生具体的动作。需要有一个地方去查询哪些io已经完成了，这个查询可以发生在线程1，也可以在任意其他线程。对于那些已经完成的io，往往会触发一个回调函数，这就是常规的异步io模型（基于回调函数）。在Go里面回调函数变成了goroutine切换，其他完全一样。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1595362148,"ip_address":"","comment_id":235971,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18775127550","product_id":100025201,"comment_content":"为了改进网络服务器的吞吐能力，现在主流的做法是用 epoll（Linux）或 IOCP（Windows）机制，这两个机制颇为类似，都是在需要 IO 时登记一个 IO 请求，然后统一在某个线程查询谁的 IO 先完成了，谁先完成了就让谁处理。——这里面有一个疑问，假设线程1已经登记了A和B两个IO请求，线程1正在处理请求C，这个时候A的IO已经准备完了，此时线程1是先登记C还是先处理A？","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501904,"discussion_content":"io完成只会做个标记，不会发生具体的动作。需要有一个地方去查询哪些io已经完成了，这个查询可以发生在线程1，也可以在任意其他线程。对于那些已经完成的io，往往会触发一个回调函数，这就是常规的异步io模型（基于回调函数）。在Go里面回调函数变成了goroutine切换，其他完全一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595362148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572487,"discussion_content":"个人认为，换句话说，线程1正在处理请求C， 就由其他线程来处理A，另外，先登记C还是先处理A是一个不确定的答案～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652800949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166693,"user_name":"Wilson","can_delete":false,"product_type":"c1","uid":1583557,"ip_address":"","ucode":"DDF1BBDBEEFE2D","user_header":"https://static001.geekbang.org/account/avatar/00/18/29/c5/a15cf826.jpg","comment_is_top":false,"comment_ctime":1577545435,"is_pvip":false,"replies":[{"id":"63845","content":"在高并发的网络服务器中，有大量的执行体都处在 io 请求中，并且 io 的数据还没有准备好，所以这些执行体 io 请求不可完成，只能让出 cpu 时间。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1577575751,"ip_address":"","comment_id":166693,"utype":1}],"discussion_count":4,"race_medal":0,"score":"18757414619","product_id":100025201,"comment_content":"“系统中有大量的 IO 请求，大部分的 IO 请求并未命中而发生调度。”老师，这句话我不是很理解，能解释一下吗","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479593,"discussion_content":"在高并发的网络服务器中，有大量的执行体都处在 io 请求中，并且 io 的数据还没有准备好，所以这些执行体 io 请求不可完成，只能让出 cpu 时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577575751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572479,"discussion_content":"个人想法，第一个问题，依然存在大量个网络连接io，第二个问题，都包含～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652799163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1224113,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ad/b1/2e96794c.jpg","nickname":"flyflypeng","note":"","ucode":"7A40FC08D8ACC0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388401,"discussion_content":"有个疑问，假如网络服务器中接收到的请求只是做一些计算密集型的任务，那么会有这个IO阻塞的问题吗？这个里的IO指定的是请求链接建立的IO，还是任务执行过程中在服务器中访问本地资源产生的IO呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628751695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1100617,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/49/0c51d75a.jpg","nickname":"Dean.Zhang","note":"","ucode":"2BDE5FB7945583","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1224113,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ad/b1/2e96794c.jpg","nickname":"flyflypeng","note":"","ucode":"7A40FC08D8ACC0","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":389176,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629166961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388401,"ip_address":""},"score":389176,"extra":""}]}]},{"had_liked":false,"id":98628,"user_name":"Sylh","can_delete":false,"product_type":"c1","uid":1147961,"ip_address":"","ucode":"F6B87D15A9AF95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicbH65wBhSCWa5eBF4gFaia5ngkttTzprdicJaDcOMgwAYrFbpQfJ0z6OichE6qphpicqsq87Lam0X5A/132","comment_is_top":false,"comment_ctime":1559044699,"is_pvip":false,"replies":[{"id":"35286","content":"https:&#47;&#47;linux.cn&#47;article-5681-1.html?pr<br>你可以仔细看一下中文版的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559050593,"ip_address":"","comment_id":98628,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18738913883","product_id":100025201,"comment_content":"https:&#47;&#47;www.nginx.com&#47;blog&#47;inside-nginx-how-we-designed-for-performance-scale&#47;<br><br>官方文档里面的，我看就是说是多进程的","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451760,"discussion_content":"https://linux.cn/article-5681-1.html?pr\n你可以仔细看一下中文版的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559050593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96399,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1558409158,"is_pvip":false,"replies":[{"id":"34540","content":"&gt; 这个切换的过程结束怎么判定？<br>最后一个切换的寄存器是指令执行的当前位置(EIP)，改了 EIP 后，CPU 就跳转到新的地方执行，进程切换了。<br>","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558428498,"ip_address":"","comment_id":96399,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18738278342","product_id":100025201,"comment_content":"从来没有看过将CPU内部的寄存器的角度来看待程序的执行，比如A切换到B，保存A的寄存器值（貌似文中有一次笔误，保存寄存器应该是保存寄存器的值。）然后恢复B上一次寄存器的值。这个切换的过程结束怎么判定？<br>是不是根据虚拟内存页转换的物理内存页的数据，读完写完就完事了。感觉这个寄存器开始来看操作系统的调度，终于从这个死记硬背进程线程概念更明白了些，包括CPU寄存器怎么工作（之前计算机原理学的不扎实，只知道里面都是这个东西而已）。","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450865,"discussion_content":"&amp;gt; 这个切换的过程结束怎么判定？\n最后一个切换的寄存器是指令执行的当前位置(EIP)，改了 EIP 后，CPU 就跳转到新的地方执行，进程切换了。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558428498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1011000,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6d/38/c951cb2e.jpg","nickname":"笨鸟","note":"","ucode":"EE93B7BDD677E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389535,"discussion_content":"对与cpu而言，程序就是树状“过程”组成的，所有编程语言是编译“过程”时，都需要将当前过程的中的中间值（寄存器的值）和当前执行的位置存入栈中，当子过程执行完成后，在取出执行位置与中间值。因此，不管进程，线程，还是协程，对CPU而言没有意义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629328360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311772,"avatar":"https://static001.geekbang.org/account/avatar/00/14/04/1c/b0c6c009.jpg","nickname":"zhj","note":"","ucode":"65B9E222D6E075","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196336,"discussion_content":"指令指针寄存器应该不用切换，linux中执行体统一的schedule对应的指令切走和切回的，只是schedule方法返回的时候对应的栈顶指针寄存器已发生了切换，所以获取到不同的返回地址继续执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583335238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293918,"user_name":"NiceBlueChai","can_delete":false,"product_type":"c1","uid":2038718,"ip_address":"","ucode":"2043333890C448","user_header":"https://static001.geekbang.org/account/avatar/00/1f/1b/be/525e05ae.jpg","comment_is_top":false,"comment_ctime":1621607219,"is_pvip":true,"replies":[{"id":"106588","content":"有很多背景因素，包括这种按需调整大小和gc也有一定的关联，会导致非gc类语言实现不易。不过我觉得简易版本的实现是有可能的，比如保留地址空间但不分配内存，这样至少可以做到按内存页（64K）为单位来增长，而不需要因为地址变化导致程序逻辑不正确。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1621641150,"ip_address":"","comment_id":293918,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14506509107","product_id":100025201,"comment_content":"为啥操作系统不把自己的线程堆栈搞成按需调整大小的","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520427,"discussion_content":"有很多背景因素，包括这种按需调整大小和gc也有一定的关联，会导致非gc类语言实现不易。不过我觉得简易版本的实现是有可能的，比如保留地址空间但不分配内存，这样至少可以做到按内存页（64K）为单位来增长，而不需要因为地址变化导致程序逻辑不正确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621641150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293146,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1621242610,"is_pvip":false,"replies":[{"id":"106122","content":"协程切换也是有成本的，差不多是函数调用的10倍","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1621250052,"ip_address":"","comment_id":293146,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14506144498","product_id":100025201,"comment_content":"说下我对线程和协程的理解：<br>一、线程有以下成本<br>1、时间成本：<br>执行体切换本身的开销，它主要是寄存器保存和恢复的成本，可腾挪的余地非常有限；<br>执行体的调度开销，它主要是如何在大量已准备好的执行体中选出谁获得执行权；<br>执行体之间的同步与互斥成本。<br>2、线程的空间成本：<br>执行体的执行状态；<br>TLS（线程局部存储）；<br>执行体的堆栈。<br><br>3、面对大量网络io时，通过创建大量线程去处理io请求是不现实的，所以先后发明了select、poll、epoll。用少量的线程实现了多路io复用，实现了大量的网络io请求。<br><br>二、但是呢，这种异步的io处理是反人类了，所以有了协程的诞生：<br>1、首先协程是用户态的，没有用户态到内核态反复切换的成本。<br>2、协程的内存占用很小（初始4k），可以创建海量的协程，而且不像大量线程，协程没有上下文切换的开销。<br>3、协程的同步io可以说是伪同步，底层实际上也是调用的内核层的epoll实现的。只不过封装起来，用户不用去管","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520096,"discussion_content":"协程切换也是有成本的，差不多是函数调用的10倍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621250052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222688,"user_name":"Geek_be0aff","can_delete":false,"product_type":"c1","uid":1902223,"ip_address":"","ucode":"C14ABF4146A2CF","user_header":"","comment_is_top":false,"comment_ctime":1590893268,"is_pvip":false,"replies":[{"id":"82192","content":"从使用接口角度没差别（只是去掉了tls的支持，当然这一点特指go语言，有的协程也提供tls），从支持的并发能力角度，一个天上一个地下。线程启动个几百个就已经撑不住了，协程可以随便开，百万级别的协程只需要大概4G内存就够了（1M*4K=4G）。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1590974754,"ip_address":"","comment_id":222688,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14475795156","product_id":100025201,"comment_content":"协程使用的包装系统调用和线程使用的系统，有何差别，或者说协程对系统调用进行包装的目的是什么?请老师指教","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496884,"discussion_content":"从使用接口角度没差别（只是去掉了tls的支持，当然这一点特指go语言，有的协程也提供tls），从支持的并发能力角度，一个天上一个地下。线程启动个几百个就已经撑不住了，协程可以随便开，百万级别的协程只需要大概4G内存就够了（1M*4K=4G）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590974754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166078,"user_name":"郭小菜","can_delete":false,"product_type":"c1","uid":1017297,"ip_address":"","ucode":"C4044C80BB331B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYfcUOVhf3vhEBUNGHgtIcw8ujMZnkabicLzzjn3xwdeeic2PJSe7ibJgMx2UjF0d7L4B4gsRpaqe2A/132","comment_is_top":false,"comment_ctime":1577375495,"is_pvip":true,"replies":[{"id":"63308","content":"线程局部存储-pthread_getspecific，pthread_setspecific，可以看看这个相关的资料","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1577406310,"ip_address":"","comment_id":166078,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10167310087","product_id":100025201,"comment_content":"坚决干掉了 “线程局部存储（TLS）” 特性的支持，让执行体更加精简。 老师，这句话不知道怎么理解？<br>协程是怎么干掉TLS的呢？作用是什么，为什么它可以让执行体变得精简呢？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479387,"discussion_content":"线程局部存储-pthread_getspecific，pthread_setspecific，可以看看这个相关的资料","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577406310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1017297,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYfcUOVhf3vhEBUNGHgtIcw8ujMZnkabicLzzjn3xwdeeic2PJSe7ibJgMx2UjF0d7L4B4gsRpaqe2A/132","nickname":"郭小菜","note":"","ucode":"C4044C80BB331B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112093,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577824921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112701,"user_name":"Stephen","can_delete":false,"product_type":"c1","uid":1318347,"ip_address":"","ucode":"D13D693D66E5FE","user_header":"","comment_is_top":false,"comment_ctime":1562808021,"is_pvip":false,"replies":[{"id":"41101","content":"内核对象说白了就是内核的数据结构，就在内核的3G-4G的空间中，是在内存里面。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1562885218,"ip_address":"","comment_id":112701,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10152742613","product_id":100025201,"comment_content":"继上个问题，线程是操作系统能够进行运算调度的最小单位，软件间的切换本质上是线程间的切换？一个线程运行一个时间片之后就会发生线程间的切换，切换时会把cpu寄存器中的数据保存到当前线程的内核对象内部的一个上下文结构中，这里的线程的内核对象是保存到内存中的吗？老师其实我想问的是这个。还有，在我有留言的专栏中，只有老师回复了我，感谢！","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457864,"discussion_content":"内核对象说白了就是内核的数据结构，就在内核的3G-4G的空间中，是在内存里面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562885218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100125,"user_name":"Messi  Curry","can_delete":false,"product_type":"c1","uid":1210566,"ip_address":"","ucode":"365B842DA94EA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/78/c6/c952aec9.jpg","comment_is_top":false,"comment_ctime":1559452997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10149387589","product_id":100025201,"comment_content":"古代将职业发展分为奴、徒、工、匠、师、家、圣，读老师的文章如同听推理故事，不断刺激大脑，激发思考，理通脉络，这才是真正的师！","like_count":2},{"had_liked":false,"id":97750,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1558762989,"is_pvip":false,"replies":[{"id":"34930","content":"nginx是多线程。多协程是多线程基础上的实现的。多线程和多协程达到的目标是一样的，只是方法不一样，多线程用的是异步io模型（比如libevent），多协程用的是同步io（比如Go语言）。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558769402,"ip_address":"","comment_id":97750,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10148697581","product_id":100025201,"comment_content":"老师，进程、线程、协程分别在什么场景下应用的呀？<br>协程应用于高性能网络服务方面，那么进程和线程呢？<br>比如像linux中nginx、php是多进程的吧？<br>那多线程是什么软件？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451400,"discussion_content":"nginx是多线程。多协程是多线程基础上的实现的。多线程和多协程达到的目标是一样的，只是方法不一样，多线程用的是异步io模型（比如libevent），多协程用的是同步io（比如Go语言）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558769402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97685,"user_name":"fjpcode","can_delete":false,"product_type":"c1","uid":1306092,"ip_address":"","ucode":"C32C5E3ECB9A90","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ61zTDmLk7IhLJn6seBPOwsVaKIWUWaxk5YmsdYBZUOYMQCsyl9iaQVSg9U5qJVLLOCFUoLUuYnRA/132","comment_is_top":false,"comment_ctime":1558749562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148684154","product_id":100025201,"comment_content":"多路IO复用: 让IO的等待都发生在相同的地方。 用了不少，今天才终于弄理解清楚为啥叫 &#39;多路IO复用&#39;。 ","like_count":2},{"had_liked":false,"id":96541,"user_name":"X","can_delete":false,"product_type":"c1","uid":1102065,"ip_address":"","ucode":"B5CA13435613D8","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/f1/432e0476.jpg","comment_is_top":false,"comment_ctime":1558444997,"is_pvip":false,"replies":[{"id":"34575","content":"不会相互影响","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558449209,"ip_address":"","comment_id":96541,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10148379589","product_id":100025201,"comment_content":"感觉进程与子进程的关系还不是很清楚，如果父进程执行结束后，子进程会怎样？子进程结束后，父进程会怎样？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450913,"discussion_content":"不会相互影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558449209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1051622,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0b/e6/99183c8d.jpg","nickname":"Subfire","note":"","ucode":"339A4EA20EBCEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":36397,"discussion_content":"了解下这三者: init进程 僵尸进程 孤儿进程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571372644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1146507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7e/8b/3cc461b3.jpg","nickname":"宋晓明","note":"","ucode":"DC866DCE2FBA9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2845,"discussion_content":"父进程挂了，子进程不会退化成僵尸进程了吗？因为没有资源回收了吧 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563966094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1146507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7e/8b/3cc461b3.jpg","nickname":"宋晓明","note":"","ucode":"DC866DCE2FBA9E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205244,"discussion_content":"em，正好之前看过。\n父进程挂了，子进程成为孤儿进程，会被init进程接管的；\n僵尸进程是 因为子进程死掉时，父进程不正常处理子进程的回收，导致系统中国的子进程记录还在。。。越来越多，后面会导致系统进程创建失败。\n只要沙雕这个搞怪的父进程就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584281942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2845,"ip_address":""},"score":205244,"extra":""}]}]},{"had_liked":false,"id":96429,"user_name":"keshawn","can_delete":false,"product_type":"c1","uid":1319270,"ip_address":"","ucode":"CFCC24F58D1651","user_header":"https://static001.geekbang.org/account/avatar/00/14/21/66/f9125286.jpg","comment_is_top":false,"comment_ctime":1558421188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148355780","product_id":100025201,"comment_content":"1. UNIX的fork API clone父进程，减少参数的传递。看起来和面向对象当初设计的继承一样，当初设计的时候觉得会简化编程，经过大量的实践之后会发现耦合越来越严重。<br>2. 线程的设计是否成功不好评价，协程相比线程的改进主要有以下几点：<br> 1）堆栈按需增长（线程是否也能如此实现？）<br> 2）去除线程局部存储，线程之所以提供线程局部存储是为了减少参数传递吧（比如ThreadLocal）？<br> 3）调度方由操作系统内核变成了用户态，用户态实现上和操作系统内核要做的调度应该没太多本质区别，但是节省了系统调用的成本？","like_count":2},{"had_liked":false,"id":96338,"user_name":"韩春亮","can_delete":false,"product_type":"c1","uid":1496974,"ip_address":"","ucode":"060B70EDE85C74","user_header":"https://static001.geekbang.org/account/avatar/00/16/d7/8e/4623653b.jpg","comment_is_top":false,"comment_ctime":1558400921,"is_pvip":false,"replies":[{"id":"34496","content":"可以查一下fork相关的资料，这个api很经典，有很多介绍材料","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558404410,"ip_address":"","comment_id":96338,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10148335513","product_id":100025201,"comment_content":"“在创建一个进程这个事情上，UNIX 偷了一次懒，用的是 fork（分叉）语义。所谓 fork，就是先 clone 然后再分支，父子进程各干各的。”这句话不太理解，希望老师帮忙指点一下<br>","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450837,"discussion_content":"可以查一下fork相关的资料，这个api很经典，有很多介绍材料","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558404410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96309,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1558397836,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148332428","product_id":100025201,"comment_content":"打卡11 多任务非常深入","like_count":2},{"had_liked":false,"id":319008,"user_name":"Jeyrce.Lu","can_delete":false,"product_type":"c1","uid":1598272,"ip_address":"","ucode":"11D2607A2FDEA8","user_header":"https://static001.geekbang.org/account/avatar/00/18/63/40/b9615c81.jpg","comment_is_top":false,"comment_ctime":1635503827,"is_pvip":false,"replies":[{"id":"115655","content":"协程为什么叫协程 其实就是多数情况下是A发现自己磕磕巴巴主动放弃的，支持主动调度的协程库不多（但go的确是支持主动调度）。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1635596998,"ip_address":"","comment_id":319008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5930471123","product_id":100025201,"comment_content":"看完这一章节后对协程的理解的确有一种醍醐灌顶的感觉, 突发奇想我从执行体的调度上想到了一个现实中的例子来阐述协程的理念, 老师给看看是不是合理的:<br>假设有ABC三个人组成一个队伍(某个软件进程)和一个队长(cpu), 这三人目标是每人读完自己一段话(每个人有自己的任务),  三人需要轮流读自己的内容(分时系统)半分钟,  到了时间后队长打断当前人B的发言指定C继续(任务切换), C找到上一次自己读到的位置接着往下读(任务恢复)...以此类推<br>但是这里存在一个缺陷:  切换过程是由队长(cpu)强制进行的, 而没有考虑当前B是否读的比较顺畅, 硬生生打断他然后让C继续.<br>比较合理的切换应该是: <br>(1) 如果B读的一直很顺畅那就一直读下去, 直到读完自己的内容, 把这个消息告诉队长(主动交出控制权), 队长让C继续自己读.<br>(2)如果B遇到了生癖字读的嗑磕巴巴, 那就告诉队长自己歇一会(主动交出控制权)让C先读, 等到别人也遇到卡住的情况或者别人读完了, 那么B再继续<br>所以这样一来队长协调次数变少(调度次数), 而且读的顺畅的人也不用担心到时间了自己赶紧得记录下读到哪里了下次从什么地方开始(切换成本), 依次来达到整体效率提升的目的? <br>这样类比是正确的吧?","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529456,"discussion_content":"协程为什么叫协程 其实就是多数情况下是A发现自己磕磕巴巴主动放弃的，支持主动调度的协程库不多（但go的确是支持主动调度）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635596998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287723,"user_name":"疯码","can_delete":false,"product_type":"c1","uid":1228313,"ip_address":"","ucode":"7FF11EC80439EA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/vQiadbkZYR239J80hjekw7jzY9vy6otLKPNDSuz2lruDiaXlKGkcsX5wwiaFevicgqV8odlRG4UITiadDF3fgicrHPcw/132","comment_is_top":false,"comment_ctime":1618125636,"is_pvip":false,"replies":[{"id":"104508","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1618148853,"ip_address":"","comment_id":287723,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5913092932","product_id":100025201,"comment_content":"一直认为fork是个因小失大的设计。因为实现上的便利 那 创建进程功能 变成了复制进程，本末倒置。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518396,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618148853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286315,"user_name":"che","can_delete":false,"product_type":"c1","uid":1139557,"ip_address":"","ucode":"826F1DC8C3F653","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/65/f2e8d116.jpg","comment_is_top":false,"comment_ctime":1617251690,"is_pvip":false,"replies":[{"id":"104021","content":"其他方式做的，并不是插入了代码。比如基于时钟中断可以做到按时间片进行调度，这种是抢占式调度。也有一些调度方式是在特定地方插入代码调度，比如发生io的时候。因为网络或文件io服务是操作系统提供的，所以可以主动加入调度代码。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1617294331,"ip_address":"","comment_id":286315,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5912218986","product_id":100025201,"comment_content":"许老师您好，有一个一直疑惑的地方，对于上层开发者来说，上下文切换是无感的，那么具体切换跳转的代码（比如修改EIP寄存器的跳转代码）是操作系统在加载我们的代码进内存页时自动添加进去的吗？还是说有什么其他的机制去实现呢？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517943,"discussion_content":"其他方式做的，并不是插入了代码。比如基于时钟中断可以做到按时间片进行调度，这种是抢占式调度。也有一些调度方式是在特定地方插入代码调度，比如发生io的时候。因为网络或文件io服务是操作系统提供的，所以可以主动加入调度代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617294331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223702,"user_name":"Han","can_delete":false,"product_type":"c1","uid":1122349,"ip_address":"","ucode":"280808D4F641AA","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/2d/dfa5bec8.jpg","comment_is_top":false,"comment_ctime":1591161029,"is_pvip":false,"replies":[{"id":"82397","content":"是这样","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1591175727,"ip_address":"","comment_id":223702,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886128325","product_id":100025201,"comment_content":"线程的调度需要经过内核态，而协程调度不需要。 所以协程切换和调度成本更低，我的理解对吗？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497219,"discussion_content":"是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591175727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214551,"user_name":"王棕生","can_delete":false,"product_type":"c1","uid":1337944,"ip_address":"","ucode":"901BD0447A871E","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/58/f2c6d65b.jpg","comment_is_top":false,"comment_ctime":1588764434,"is_pvip":false,"replies":[{"id":"79456","content":"python协程细节我没有了解，go我认为你的理解没有问题。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1588779446,"ip_address":"","comment_id":214551,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5883731730","product_id":100025201,"comment_content":"关于python中的协程和go中的协程的区别，我的理解是：<br>一、 python的多个协程是基于一个系统级的线程；go语言的多个协程是基于多个系统级的线程；换句话说： python没有充分利用CPU的多核优势，但go语言则充分利用了CPU的多核。<br>二、 python程序中，当一个协程正在I&#47;O时，该进程会暂时中断CPU的执行，只能等待下一个时间片；而go程序中，当一个协程正在I&#47;O时，该进程并不会中断CPU的执行，而会继续占用CPU，只有等时间片用完后，才会暂时失去CPU的执行。<br><br>麻烦许老师点评一下，是否正确？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494109,"discussion_content":"python协程细节我没有了解，go我认为你的理解没有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588779446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1473041,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7a/11/5016207b.jpg","nickname":"Lin","note":"","ucode":"2BBD3E5A36ED95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332738,"discussion_content":"协程应该都是基于事件循环的吧。python中的协程对于单个任务来说就是同步执行的，优点在于多个任务时，一个任务在操作IO时，会继续执行下一个任务，总体性能是提升的。且既然要用协程，肯定是IO密集型的，是不是能用到多CPU效率方面差别应该不大吧。go没了解过，有时间学习下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607327362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214549,"user_name":"王棕生","can_delete":false,"product_type":"c1","uid":1337944,"ip_address":"","ucode":"901BD0447A871E","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/58/f2c6d65b.jpg","comment_is_top":false,"comment_ctime":1588764164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883731460","product_id":100025201,"comment_content":"二、 在python程序中，当一个协程正在I&#47;O时，该进程会暂时中断CPU的执行，只能等待下一个时间片；但在go程序中，当一个协程正在I&#47;O时，该进程并不会被中断CPU的执行，而会继续占用CPU，只有等时间片用完后，才会暂时失去CPU的执行。","like_count":1},{"had_liked":false,"id":178650,"user_name":"幻灰龙","can_delete":false,"product_type":"c1","uid":1046202,"ip_address":"","ucode":"AFEDCC997C2FF6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/ba/09ab72d2.jpg","comment_is_top":false,"comment_ctime":1581772402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5876739698","product_id":100025201,"comment_content":"首先，基于异步写法，在语言提供async和await支持下，其实抽象能力已经有非常大改进，不能故意忽略这层抽象不提，虽然它们没解决所有异步写法问题。其次，进程，线程，协程说到底还是单机执行体的设计，实际上非单机执行体的设计更重要。","like_count":1},{"had_liked":false,"id":117251,"user_name":"徐庆","can_delete":false,"product_type":"c1","uid":1102366,"ip_address":"","ucode":"E7E75E9E1FF8C3","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/1e/07c3ae6a.jpg","comment_is_top":false,"comment_ctime":1564015872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5858983168","product_id":100025201,"comment_content":"最早是在lua里面用过协程","like_count":1},{"had_liked":false,"id":112626,"user_name":"Stephen","can_delete":false,"product_type":"c1","uid":1318347,"ip_address":"","ucode":"D13D693D66E5FE","user_header":"","comment_is_top":false,"comment_ctime":1562774118,"is_pvip":false,"replies":[{"id":"40986","content":"你这里说的线程改为进程，其他没什么问题","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1562805916,"ip_address":"","comment_id":112626,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857741414","product_id":100025201,"comment_content":"软件间的切换就是线程间的切换？线程切换时要把当前线程的执行状态保存到当前线程中？也就是内存中？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457825,"discussion_content":"你这里说的线程改为进程，其他没什么问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562805916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110391,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1063734,"ip_address":"","ucode":"EA31201A7C5AE1","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/36/2d61e080.jpg","comment_is_top":false,"comment_ctime":1562247815,"is_pvip":false,"replies":[{"id":"40127","content":"嗯，因为是骨架脉络，的确会知识密度高，好处是比较容易知道自己有哪些知识盲点","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1562256002,"ip_address":"","comment_id":110391,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857215111","product_id":100025201,"comment_content":"这篇文章看了3遍，才稍微理解了。<br>为了达到减少过多线程的目的，go选择了协程。<br>老师的专栏知识密度太高，每次看完都有一种脑洞大开的感觉。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456854,"discussion_content":"嗯，因为是骨架脉络，的确会知识密度高，好处是比较容易知道自己有哪些知识盲点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562256002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108893,"user_name":"石建","can_delete":false,"product_type":"c1","uid":1041013,"ip_address":"","ucode":"72339F0F3463E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e2/75/94039076.jpg","comment_is_top":false,"comment_ctime":1561910403,"is_pvip":false,"replies":[{"id":"39396","content":"不能用现成的阻塞io，要基于异步io来实现协程阻塞io","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1561939113,"ip_address":"","comment_id":108893,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5856877699","product_id":100025201,"comment_content":"老师，请教一个点：<br>协程库，要做好 “协程的系统调用包装”。目的：是为解决，当前协程发生“阻塞”时，如IO未准备好，做协程间的切换；<br>困惑在：谁来去判断IO未准备好？是当前协程吗？还是会发生系统调用，阻塞在系统调用上，怎么返回做协程间的切换？<br>谢谢。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456157,"discussion_content":"不能用现成的阻塞io，要基于异步io来实现协程阻塞io","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561939113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98546,"user_name":"zzx10","can_delete":false,"product_type":"c1","uid":1317201,"ip_address":"","ucode":"4196E9EADAF60B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIWTnR1vgM3f7matwO0VvXQfA1nkgfS7PWiaYIa9h9NbuUUxQSO4KPDqPopSZiarBxFHIdwFDeG0kQg/132","comment_is_top":false,"comment_ctime":1559024176,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853991472","product_id":100025201,"comment_content":"多任务需求，既可以单核系统上通过分时系统实现。也可以通过<br>多核CPU、多核心运行不同程序实现<br><br>任务可以抽象为执行体。执行体有三类：线程、进程、协程。<br>实现任务切换核心在于：记录任务状态、以及切换任务<br>记录任务状态：<br>通过寄存器实现。同时保护模式下，需要通过寄存器切换内存地址映射表，改变内存地址使用<br>切换任务：<br>进程与线程主要靠操作系统切换，规则基于时钟中断<br>协程需用户自己实现<br><br>进程内创建子进程，通过fork父进程创建子进程实现后。此后父子进程相对独立。<br>但是进程占用资源比较多，后期出现了在同一软件需要多任务，同时共享内存地址空间，于是线程产生了<br><br>协程产生的主要是网络服务器的需要。协程仅作用于用户态，避免原先系统调用产生的开销。<br>同时出现了多路复用技术。<br>使用线程进行网络通信，有时间成本、空间成本<br><br>协程主要需求：<br>协程创建、执行权切换<br>协程调度<br>协程的同步、互斥与通讯<br>协程系统调用封装<br>协程堆栈大小的分配<br>","like_count":1},{"had_liked":false,"id":96385,"user_name":"涵","can_delete":false,"product_type":"c1","uid":1502742,"ip_address":"","ucode":"BB8575DB13F1E0","user_header":"https://static001.geekbang.org/account/avatar/00/16/ee/16/742956ac.jpg","comment_is_top":false,"comment_ctime":1558407167,"is_pvip":false,"replies":[{"id":"34541","content":"基本上 linux 够用了","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558428514,"ip_address":"","comment_id":96385,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853374463","product_id":100025201,"comment_content":"请问老师青牛云在服务器OS方面是什么思路?打算开发专门的OS吗？还是linux就够用了?","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450858,"discussion_content":"基本上 linux 够用了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558428514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96363,"user_name":"涵","can_delete":false,"product_type":"c1","uid":1502742,"ip_address":"","ucode":"BB8575DB13F1E0","user_header":"https://static001.geekbang.org/account/avatar/00/16/ee/16/742956ac.jpg","comment_is_top":false,"comment_ctime":1558404118,"is_pvip":false,"replies":[{"id":"34500","content":"有，CoreOS 想做这事，不过还不太成功，国内用 CoreOS 我观察下来应该是完全忽略不计。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558404883,"ip_address":"","comment_id":96363,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853371414","product_id":100025201,"comment_content":"请问老师目前云平台使用的服务器通常运行的是传统的操作系统，例如linux，还是专门为云服务器开放的操作系统呢?如您所说传统操作系统也有不完善的地方，或者不适用于多台服务器集群式提供计算能力的地方。那么针对云服务的服务器是否有专门的操作系统呢?谢谢。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450847,"discussion_content":"有，CoreOS 想做这事，不过还不太成功，国内用 CoreOS 我观察下来应该是完全忽略不计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558404883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96299,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1558396744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853364040","product_id":100025201,"comment_content":"有个词叫积重难返，这是我在某大企业最深刻的感受，我感觉操作系统的设计与演化也是一样的，非常感谢许老师，让我对软件设计有全新的体会","like_count":1},{"had_liked":false,"id":96273,"user_name":":)","can_delete":false,"product_type":"c1","uid":1239198,"ip_address":"","ucode":"23D505949442B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/9e/6550a051.jpg","comment_is_top":false,"comment_ctime":1558372663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853339959","product_id":100025201,"comment_content":"轻描淡写，娓娓动听，信手拈来！","like_count":1},{"had_liked":false,"id":358891,"user_name":"Danny","can_delete":false,"product_type":"c1","uid":1254750,"ip_address":"上海","ucode":"A6D8B20DB86777","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/5e/098ef3fc.jpg","comment_is_top":false,"comment_ctime":1664972438,"is_pvip":false,"replies":[{"id":"130647","content":"目前看不是这样发展的，下一代服务端操作系统是dcos（数据中心操作系统），以k8s为内核","user_name":"作者回复","user_name_real":"作者","uid":"1228022","ctime":1665356226,"ip_address":"上海","comment_id":358891,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1664972438","product_id":100025201,"comment_content":"以前有个想法，下一代操作系统就应该内置了erlang的所有功能","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589842,"discussion_content":"目前看不是这样发展的，下一代服务端操作系统是dcos（数据中心操作系统），以k8s为内核","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665356226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357430,"user_name":"六维","can_delete":false,"product_type":"c1","uid":1022887,"ip_address":"上海","ucode":"EB1C15AC06A8DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a7/440aff07.jpg","comment_is_top":false,"comment_ctime":1663243086,"is_pvip":false,"replies":[{"id":"130102","content":"这个值不同版本可能会不同，不是重点","user_name":"作者回复","user_name_real":"作者","uid":"1228022","ctime":1663307241,"ip_address":"上海","comment_id":357430,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1663243086","product_id":100025201,"comment_content":"堆栈开始很小（只有 4K），但可按需自动增长；<br><br>很多文章中初始的堆栈大小是2k，为什么这里是4k呢？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587822,"discussion_content":"这个值不同版本可能会不同，不是重点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663307242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330429,"user_name":"FOCUS","can_delete":false,"product_type":"c1","uid":1140080,"ip_address":"","ucode":"DFE3078B632026","user_header":"https://static001.geekbang.org/account/avatar/00/11/65/70/7e137498.jpg","comment_is_top":false,"comment_ctime":1641975343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641975343","product_id":100025201,"comment_content":"涉及到如此多的陌生概念，却是通过「场景+内容案例』，让我这外行认真读完文章，理解了概念。<br>让人真心佩服！","like_count":0},{"had_liked":false,"id":312916,"user_name":"codjust","can_delete":false,"product_type":"c1","uid":1072823,"ip_address":"","ucode":"ED2FE2FCD0F5B3","user_header":"https://static001.geekbang.org/account/avatar/00/10/5e/b7/e762deb7.jpg","comment_is_top":false,"comment_ctime":1632120677,"is_pvip":false,"replies":[{"id":"113419","content":"没细研究","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1632267036,"ip_address":"","comment_id":312916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632120677","product_id":100025201,"comment_content":"许老师有了解过OpenResty的luajit的协程吗，相对比go的协程，完成度怎么样，单从网络io的实现上来说，和go协程的实现差不多，go协程会更完善些","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527160,"discussion_content":"没细研究","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632267036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290207,"user_name":"Lk","can_delete":false,"product_type":"c1","uid":2016075,"ip_address":"","ucode":"FC700E542CF190","user_header":"https://static001.geekbang.org/account/avatar/00/1e/c3/4b/77799d1c.jpg","comment_is_top":false,"comment_ctime":1619429828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619429828","product_id":100025201,"comment_content":"linux 上的管道命令靠的就是 fork 之后继承文件描述符实现的吧，apue 好像也谈到了，正常创建进程应该fork 之后立即调用 exec，但是继承文件描述符通信在早期很多软件也有用到吧，包括apache","like_count":0},{"had_liked":false,"id":285644,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1616936590,"is_pvip":false,"replies":[{"id":"103676","content":"是的，本质上是这样","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1616991921,"ip_address":"","comment_id":285644,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1616936590","product_id":100025201,"comment_content":"多任务架构设计之所以难以设计，是因为一方面设计师要考虑，同时满足更多的使用需求，另一方面还要尽可能的减少资源的消耗。如果在资源充足的情况下，多任务系统只要加更多的机器就能满足更多的需求。<br><br>如果在资源极为有限的情况下，事实上分时机制是一个很不错的选择，因为在人机交互的场景里，人可能会希望自己在进行一些io操作的时候，能够感觉快一点，这个时候操作系统只需要支持他打开电影窗口，他就能感觉不到 CPU读写时的漫长。<br><br>为了能够满足更多的io操作，人们又设计出来了协程这么一个执行体方案，他的设计主要为了节省io执行时产生的时间成本和空间成本。它是如何办到的？<br><br>相对于之前在执行io操作的时候，每多一个需要执行的任务就会多出一个线程，这样如果他执行的任务比较费时的话，就会创建出很多个线程，而每个线程都是需要空间来存储其状态数据，还有他们之间不停的交换执行权。协程则创建出固定数量的线程，来执行io操作，当更多需要io操作的任务进来时，不会再去创建线程去执行，而是等前面的io线程执行完io操作了之后，再去执行新来的io任务。因为在CPU性能不变的情况下，同时执行10个线程和一次执行一个线程执行10次，他们的效率是一样的。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517738,"discussion_content":"是的，本质上是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616991921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264178,"user_name":"Dustin","can_delete":false,"product_type":"c1","uid":2339072,"ip_address":"","ucode":"2D1131C9685A0A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/UicQyArGIv2yQzdllhstRPKaCk2y3NTIIvADs0ibdpKWRLAp8vIFAGhPJj5RgGTx7UwMsogsdlQicCC1vlX59Rjug/132","comment_is_top":false,"comment_ctime":1606373191,"is_pvip":false,"replies":[{"id":"95829","content":"go当然是io复用的啊，by default就是这样。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1606402177,"ip_address":"","comment_id":264178,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606373191","product_id":100025201,"comment_content":"入坑 Go语言2年，大爱，也看过一些资料但一直没有搞懂 goroutine的本质。今天看到许老师讲的 goroutine = 用户态的 thread - TLS + 按需增长 stack，如同拨云见日，感谢受教了<br><br>请教个问题，如果我用 Go的 http库实现个最简单的 web server，http.ListenAndServe(&quot;:8080&quot;)，by default是没有用到 io复用的是吧？也就是每个 connection进来是开一个线程去处理对吧？<br><br>请问 Golang有没有什么高性能，使用 epoll&#47;io复用和 goroutine来处理每个 connection的 http server库呢？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510451,"discussion_content":"go当然是io复用的啊，by default就是这样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606402177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262585,"user_name":"Geek_83125c","can_delete":false,"product_type":"c1","uid":2155945,"ip_address":"","ucode":"733B737688AB84","user_header":"","comment_is_top":false,"comment_ctime":1605774023,"is_pvip":false,"replies":[{"id":"95335","content":"系统调用不会发生上下文切换（如果发生切换成本就比函数调用高很多了），只是会发生提权进入内核态","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1605835402,"ip_address":"","comment_id":262585,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605774023","product_id":100025201,"comment_content":"系统调用虽然比函数调用多做了一点点事情，比如查询了中断向量表（这类似编程语言中的虚函数），比如改变 CPU 的执行权限（从用户态跃迁到内核态再回到用户态）。——系统调用一定会产生执行体上下文切换吗？？还是只有系统调动阻塞的时候，挂起调用线程，才会产生上下文切换","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509889,"discussion_content":"系统调用不会发生上下文切换（如果发生切换成本就比函数调用高很多了），只是会发生提权进入内核态","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605835402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262578,"user_name":"Geek_83125c","can_delete":false,"product_type":"c1","uid":2155945,"ip_address":"","ucode":"733B737688AB84","user_header":"","comment_is_top":false,"comment_ctime":1605772696,"is_pvip":false,"replies":[{"id":"95334","content":"还是要的。只要还是抢占式就要。在你说的前提再加上由程序主动出让cpu时间就可以不用锁。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1605835225,"ip_address":"","comment_id":262578,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605772696","product_id":100025201,"comment_content":"一直好奇一个问题，那如果在单核CPU上运行的程序，分时间片运行，但是物理上每时每刻只有一个线程在执行，不同线程对共享资源访问，是不是就不用互斥加锁了？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509888,"discussion_content":"还是要的。只要还是抢占式就要。在你说的前提再加上由程序主动出让cpu时间就可以不用锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605835225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262523,"user_name":"nativertc","can_delete":false,"product_type":"c1","uid":1453183,"ip_address":"","ucode":"A54B560C8526AA","user_header":"","comment_is_top":false,"comment_ctime":1605756621,"is_pvip":false,"replies":[{"id":"95333","content":"缺页中断是虚拟内存管理引起的，和进程管理没有关系。进程切换成本和线程切换基本上成本一样，两者没有太大差别。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1605835104,"ip_address":"","comment_id":262523,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1605756621","product_id":100025201,"comment_content":"线程和进程的切换，都会保存寄存器。进程切换就没有其它带价吗，比如缺页中断之类，我记得操作系统都是讲进程切换的代价比线程切换大？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509868,"discussion_content":"缺页中断是虚拟内存管理引起的，和进程管理没有关系。进程切换成本和线程切换基本上成本一样，两者没有太大差别。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605835104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102245,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/a5/2bbedc3b.jpg","nickname":"over","note":"","ucode":"FE272AC19842D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361329,"discussion_content":"进程切换与线程切换的一个最主要区别就在于进程切换涉及到虚拟地址空间的切换而线程切换则不会。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616642950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245743,"user_name":"张浩_house","can_delete":false,"product_type":"c1","uid":1021258,"ip_address":"","ucode":"B733234B133607","user_header":"https://static001.geekbang.org/account/avatar/00/0f/95/4a/a145c675.jpg","comment_is_top":false,"comment_ctime":1599038734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599038734","product_id":100025201,"comment_content":"看了好多篇总有种似懂非懂的感觉，看上去文字都懂了 实际上回想整个过程确不是很清晰","like_count":0},{"had_liked":false,"id":232122,"user_name":"何磊","can_delete":false,"product_type":"c1","uid":1047604,"ip_address":"","ucode":"78934C3ED4A342","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/34/c733b116.jpg","comment_is_top":false,"comment_ctime":1593860268,"is_pvip":false,"replies":[{"id":"85715","content":"寄存器比较少，应该不需要交换到外存","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1593950065,"ip_address":"","comment_id":232122,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593860268","product_id":100025201,"comment_content":"『执行体的上下文，就是一堆寄存器的值。要切换执行体，只需要保存和恢复一堆寄存器的值即可』<br>这句话中，切换的寄存器的值，是会保存到内存吗？所以每个进程都有一个区域来保存寄存器中存储的值？再联想到内存可能不足，这部分可能被交换到swap上去？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500520,"discussion_content":"寄存器比较少，应该不需要交换到外存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593950065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218076,"user_name":"wuqing","can_delete":false,"product_type":"c1","uid":1478879,"ip_address":"","ucode":"988A1B2E759266","user_header":"https://static001.geekbang.org/account/avatar/00/16/90/df/066462bd.jpg","comment_is_top":false,"comment_ctime":1589708115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589708115","product_id":100025201,"comment_content":"阅读完，看评论又能巩固不少","like_count":0},{"had_liked":false,"id":214541,"user_name":"王棕生","can_delete":false,"product_type":"c1","uid":1337944,"ip_address":"","ucode":"901BD0447A871E","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/58/f2c6d65b.jpg","comment_is_top":false,"comment_ctime":1588763802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588763802","product_id":100025201,"comment_content":"关于python协程和go语言协程区别，我的理解是这样的：<br>一、 python的多个协程是基于一个系统级的线程；go语言的多个协程是基于多个系统级的线程；换句话说： python没有充分利用CPU的多核优势，但go语言则充分利用了CPU的多核。<br><br><br>不知是否准确，期望许老师点评！","like_count":0},{"had_liked":false,"id":207997,"user_name":"大头爸爸","can_delete":false,"product_type":"c1","uid":1276613,"ip_address":"","ucode":"131E25DB04D222","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gmP4Yh00MZPwNvr4UQdLeXaX3TVyZEEp195S3vD3Sfl1xz5jBr1474Mt6w5OPr0KsrnQObfLRy5PkKNFjSBiasA/132","comment_is_top":false,"comment_ctime":1587233303,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587233303","product_id":100025201,"comment_content":"多颗 CPU 和 单颗 CPU 多核 是什么区别呢？单颗CPU里面的多核共享了什么资源，又各自独有什么资源？是不是单颗CPU的多核里面每个核都有自己的ALU和寄存器，但是共享cache line?","like_count":0,"discussions":[{"author":{"id":1337944,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/58/f2c6d65b.jpg","nickname":"王棕生","note":"","ucode":"901BD0447A871E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259116,"discussion_content":"单颗CPU多核共享cache， 多颗CPU共享内存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588761714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198781,"user_name":"锋","can_delete":false,"product_type":"c1","uid":1807836,"ip_address":"","ucode":"F26BC1F14AB0D7","user_header":"https://static001.geekbang.org/account/avatar/00/1b/95/dc/07195a63.jpg","comment_is_top":false,"comment_ctime":1585468157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585468157","product_id":100025201,"comment_content":"老师好。有个疑问IO的底层是同步的吧？比如说就是多个线程对网卡进行写。在同一时刻应该只有一个在工作吧？那对于IO密集的工作怎么提升效率？应该按照什么标准去扩展？比如加cpu加显卡 还是只能加机器。谢谢老师","like_count":0},{"had_liked":false,"id":194031,"user_name":"活水","can_delete":false,"product_type":"c1","uid":1154935,"ip_address":"","ucode":"8A93734B62AF04","user_header":"https://static001.geekbang.org/account/avatar/00/11/9f/77/3a8fb89f.jpg","comment_is_top":false,"comment_ctime":1585016408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585016408","product_id":100025201,"comment_content":"协程这块具体实现不清楚","like_count":0},{"had_liked":false,"id":188884,"user_name":"，","can_delete":false,"product_type":"c1","uid":1701867,"ip_address":"","ucode":"A5543C8DFEB198","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","comment_is_top":false,"comment_ctime":1584430541,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584430541","product_id":100025201,"comment_content":"内核线程的优点:实现简单,直接调用操作系统的api即可;<br>缺点:可供调用的线程少,同时占用一定的内核资源(栈空间等)<br>用户线程的优点:不需要系统内核的支援<br>缺点:实现复杂,操作系统对线程的管理操作,创建,销毁,阻塞,切换,调度,他都需要重新实现一遍<br><br>当今,微服务架构的流行,使得单个服务的体量更小,同时网络请求更多,java这种直接调用内核线程的方式不太适合这种环境,Go这种自己实现的用户态线程更占优势","like_count":0},{"had_liked":false,"id":176662,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1581133169,"is_pvip":false,"replies":[{"id":"68608","content":"理解一下一个人是怎么做多任务的就清楚了。计算机不同类型的多任务其实大同小异。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1581166025,"ip_address":"","comment_id":176662,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581133169","product_id":100025201,"comment_content":"协程不走系统调用吗？跟线程的实现有什么区别","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483176,"discussion_content":"理解一下一个人是怎么做多任务的就清楚了。计算机不同类型的多任务其实大同小异。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581166025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146661,"user_name":"吴双","can_delete":false,"product_type":"c1","uid":1179655,"ip_address":"","ucode":"87B32F443485D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/00/07/8e3ceda8.jpg","comment_is_top":false,"comment_ctime":1572596565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572596565","product_id":100025201,"comment_content":"读了老师的课，我感觉我都不是学计算机的了","like_count":0},{"had_liked":false,"id":144714,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1572006494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572006494","product_id":100025201,"comment_content":"感觉go 是大趋势。。。","like_count":0},{"had_liked":false,"id":141526,"user_name":"大脸猫","can_delete":false,"product_type":"c1","uid":1199628,"ip_address":"","ucode":"5BFDD8779589AC","user_header":"https://static001.geekbang.org/account/avatar/00/12/4e/0c/5f04e43e.jpg","comment_is_top":false,"comment_ctime":1571187727,"is_pvip":false,"replies":[{"id":"55035","content":"1、是的。内存需求和连接数是线性关系。<br>2、iocp与协程背后道理是一样的，不同的是使用方式。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1571408041,"ip_address":"","comment_id":141526,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571187727","product_id":100025201,"comment_content":"老师 我有个疑问 用go来处理网络请求 给每一个协程都分配了读写缓冲区 这样用户长连接增加 内存不是也一直在飙升？另外iocp 也好 协程也罢 到了上层 很多情况都可能加锁处理数据 这样从总体上来看 最终性能是否都一样？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470785,"discussion_content":"1、是的。内存需求和连接数是线性关系。\n2、iocp与协程背后道理是一样的，不同的是使用方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571408041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122448,"user_name":"LYy","can_delete":false,"product_type":"c1","uid":1102062,"ip_address":"","ucode":"8D5C39B9531E71","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","comment_is_top":false,"comment_ctime":1565393168,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1565393168","product_id":100025201,"comment_content":"架构设计重点--权衡：<br>用户态执行体的设计有线程的线程可以参考，那我们是直接在用户态照搬线程的所有特性吗？答案是根据实际场景做取舍，goroutine的答案是通过舍弃TLS来获取更精简的执行体。","like_count":0},{"had_liked":false,"id":117088,"user_name":"宋晓明","can_delete":false,"product_type":"c1","uid":1146507,"ip_address":"","ucode":"DC866DCE2FBA9E","user_header":"https://static001.geekbang.org/account/avatar/00/11/7e/8b/3cc461b3.jpg","comment_is_top":false,"comment_ctime":1563965342,"is_pvip":false,"replies":[{"id":"42852","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1563978020,"ip_address":"","comment_id":117088,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563965342","product_id":100025201,"comment_content":"老师 ，从程序角度来说，执行体里面是不是就是代码指令？还有python有个叫yield的协程，跟老师讲的真正的协程有什么区别？我的理解是协程就是由用户控制的线程，也就是用户态线程，跟线程的最大区别就是用户自己控制。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459815,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563978020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113248,"user_name":"老男孩","can_delete":false,"product_type":"c1","uid":1134514,"ip_address":"","ucode":"CEC6D47412F620","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/b2/1e8b5616.jpg","comment_is_top":false,"comment_ctime":1562924007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562924007","product_id":100025201,"comment_content":"有种想Go Go的冲动。","like_count":0},{"had_liked":false,"id":103189,"user_name":"wzz","can_delete":false,"product_type":"c1","uid":1002875,"ip_address":"","ucode":"019D5AE0DC0934","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/7b/dc702329.jpg","comment_is_top":false,"comment_ctime":1560394040,"is_pvip":false,"replies":[{"id":"37328","content":"系统调用当然会切换到内核态，但是协程切换并不需要系统调用。协程数量上限只受制于内存。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560395530,"ip_address":"","comment_id":103189,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560394040","product_id":100025201,"comment_content":"老师，您好。想请问一下，协程在系统调用的时候也会出现用户态到内核态切换吧？在这种情况下并没有减少切换的开销吧？内核态数量有限的情况下，是否也说明协程并不是无限增长的？期待您的答复。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453779,"discussion_content":"系统调用当然会切换到内核态，但是协程切换并不需要系统调用。协程数量上限只受制于内存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560395530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101998,"user_name":"风中奇缘","can_delete":false,"product_type":"c1","uid":1019206,"ip_address":"","ucode":"43DE1F63483411","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/46/fd0bd694.jpg","comment_is_top":false,"comment_ctime":1560092169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560092169","product_id":100025201,"comment_content":"面试都会遇到这样的题目：怎么理解进程，线程以及协程，但是每次回答都组织不起来，不知道怎么破","like_count":0},{"had_liked":false,"id":101172,"user_name":"旭东(Frank)","can_delete":false,"product_type":"c1","uid":1024486,"ip_address":"","ucode":"176FA629800062","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","comment_is_top":false,"comment_ctime":1559734063,"is_pvip":false,"replies":[{"id":"36457","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559737988,"ip_address":"","comment_id":101172,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559734063","product_id":100025201,"comment_content":"协程与微软的微软的纤程是类似功能吗？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452835,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559737988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100534,"user_name":"木瓜777","can_delete":false,"product_type":"c1","uid":1512537,"ip_address":"","ucode":"FC52A499AF6374","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aFAYPyw7ywC1xE9h1qibnTBwtWn2ClJqlicy5cMomhZVaruMyqSq76wMkS279mUaGhrLGwWo9ZnW0WCWfmMovlXw/132","comment_is_top":false,"comment_ctime":1559572580,"is_pvip":false,"replies":[{"id":"36232","content":"目前没见到","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559588655,"ip_address":"","comment_id":100534,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559572580","product_id":100025201,"comment_content":"什么时候操作系统会实现协程？而不需要用户实现？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452588,"discussion_content":"目前没见到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559588655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99884,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1559352527,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1559352527","product_id":100025201,"comment_content":"看了文章和评论，才发现，自己有多渺小了。继续跟上课程","like_count":0},{"had_liked":false,"id":98689,"user_name":"Sylh","can_delete":false,"product_type":"c1","uid":1147961,"ip_address":"","ucode":"F6B87D15A9AF95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicbH65wBhSCWa5eBF4gFaia5ngkttTzprdicJaDcOMgwAYrFbpQfJ0z6OichE6qphpicqsq87Lam0X5A/132","comment_is_top":false,"comment_ctime":1559058215,"is_pvip":false,"replies":[{"id":"35330","content":"你说得没错","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559087482,"ip_address":"","comment_id":98689,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559058215","product_id":100025201,"comment_content":"我看了您发的链接，我的理解是nginx架构主要还是基于多进程的，工作进程把响应时间较长的操作分发给了线程池，线程池应用的场景是在读文件等操作，从整体架构上个人觉得应该不能说默认是多线程的。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451790,"discussion_content":"你说得没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559087482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98607,"user_name":"Sylh","can_delete":false,"product_type":"c1","uid":1147961,"ip_address":"","ucode":"F6B87D15A9AF95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicbH65wBhSCWa5eBF4gFaia5ngkttTzprdicJaDcOMgwAYrFbpQfJ0z6OichE6qphpicqsq87Lam0X5A/132","comment_is_top":false,"comment_ctime":1559039488,"is_pvip":false,"replies":[{"id":"35263","content":"多线程","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559042717,"ip_address":"","comment_id":98607,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559039488","product_id":100025201,"comment_content":"有个问题，nginx不是默认多进程的吗？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451752,"discussion_content":"多线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559042717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98532,"user_name":"涉蓝","can_delete":false,"product_type":"c1","uid":1134619,"ip_address":"","ucode":"C1321E29E01625","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLh8ubWQtDRa6exJtloSwibLliaejpF7434ficyggzukmXE63UlSPvbykoiaVDZo4CbDIIOQsCkicibyn9A/132","comment_is_top":false,"comment_ctime":1559019194,"is_pvip":false,"replies":[{"id":"35245","content":"是否有用协程最简单的判断方法是io是怎样的，是异步回调io还是同步io。异步回调io特征非常明显，io完成后会有一个回调函数，这种不是协程。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1559021665,"ip_address":"","comment_id":98532,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559019194","product_id":100025201,"comment_content":"对协程有点不太理解，之前简单的认为是IO的多路复用，原来费时的io阻塞导致的线程的切换变为同一个线程的任务切换，这个线程或者说有个统一的其他线程负责处理这个调度的问题，所以我想当然的认为所有支持异步io的语言都实现了协程，但是文中提到只有个别语言实现了它而且似乎老师并不认为使用了epoll技术的libevent的nodejs 是协程的样子，不太理解","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451724,"discussion_content":"是否有用协程最简单的判断方法是io是怎样的，是异步回调io还是同步io。异步回调io特征非常明显，io完成后会有一个回调函数，这种不是协程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559021665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97403,"user_name":"施朝浩","can_delete":false,"product_type":"c1","uid":1220060,"ip_address":"","ucode":"B2BC5B26A2FFF5","user_header":"https://static001.geekbang.org/account/avatar/00/12/9d/dc/b6a3dfb7.jpg","comment_is_top":false,"comment_ctime":1558665217,"is_pvip":false,"replies":[{"id":"34841","content":"和协程一样，它们三者做类似的事情。不过进程和线程调度方是同一个。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558670496,"ip_address":"","comment_id":97403,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558665217","product_id":100025201,"comment_content":"原文：执行体的上下文，就是一堆寄存器的值。要切换执行体，只需要保存和恢复寄存器的值就好了。<br>评论里：协程不走系统调用。协程切换只是寄存器的保存和恢复，所以可以在用户态下自己来实现。<br>那进程和线程还需做什么？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451269,"discussion_content":"和协程一样，它们三者做类似的事情。不过进程和线程调度方是同一个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558670496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97229,"user_name":"Panda","can_delete":false,"product_type":"c1","uid":1095740,"ip_address":"","ucode":"911A200C7B18BE","user_header":"https://static001.geekbang.org/account/avatar/00/10/b8/3c/1a294619.jpg","comment_is_top":false,"comment_ctime":1558615756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558615756","product_id":100025201,"comment_content":"Go 的 goroutine 是屠龙宝刀","like_count":0},{"had_liked":false,"id":97181,"user_name":"川杰","can_delete":false,"product_type":"c1","uid":1099750,"ip_address":"","ucode":"815211E1D698E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/e6/11f21cb4.jpg","comment_is_top":false,"comment_ctime":1558603046,"is_pvip":false,"replies":[{"id":"34766","content":"微服务建议还是了解一下容器技术，不要局限于某种语言内的微服务。rpc 我们后面会谈到。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558624991,"ip_address":"","comment_id":97181,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558603046","product_id":100025201,"comment_content":"老师您好，我想问一个和本章没有关系的问题。我目前在学习微服务，自己在用.net core实现一个微服务框架，但是我对PRC这块知识属于空白，我目前是用webApi代替了RPC调度，我想知道如何用代码实现PRC调度，请问该补充哪方面知识？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451168,"discussion_content":"微服务建议还是了解一下容器技术，不要局限于某种语言内的微服务。rpc 我们后面会谈到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558624991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97031,"user_name":"Xiao","can_delete":false,"product_type":"c1","uid":1179212,"ip_address":"","ucode":"71FFCCEEDE09E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/4c/46eb517a.jpg","comment_is_top":false,"comment_ctime":1558574577,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1558574577","product_id":100025201,"comment_content":"发现整个专栏都是许老师对go满满的爱！","like_count":0},{"had_liked":false,"id":96926,"user_name":"一笔一画","can_delete":false,"product_type":"c1","uid":1495254,"ip_address":"","ucode":"2B9BC8ADF97106","user_header":"https://static001.geekbang.org/account/avatar/00/16/d0/d6/f335954b.jpg","comment_is_top":false,"comment_ctime":1558536699,"is_pvip":false,"replies":[{"id":"34666","content":"的确有部分代码是汇编实现的，感兴趣可以研究一下Go的实现。汇编源文件以.s结尾。Go语言包本身包含了一个汇编编译器和一个Go编译器。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558568216,"ip_address":"","comment_id":96926,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558536699","product_id":100025201,"comment_content":"goroutine的实现应该也会根据不同CPU体系架构有不同的实现吧？感觉这些得依靠汇编才能实现<br>","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451069,"discussion_content":"的确有部分代码是汇编实现的，感兴趣可以研究一下Go的实现。汇编源文件以.s结尾。Go语言包本身包含了一个汇编编译器和一个Go编译器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558568216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96764,"user_name":"苟范儿","can_delete":false,"product_type":"c1","uid":1364883,"ip_address":"","ucode":"B06B86765512FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/93/bef5a186.jpg","comment_is_top":false,"comment_ctime":1558499970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558499970","product_id":100025201,"comment_content":"老师讲的这些知识点都是计算机发展里的关键问题，现在虽然以我现在的知识水平无法评价那些 fork、线程设计是否优良。但是我想在当时的计算机条件下，如 IO、内存等需求下，应该是能满足条件的优秀设计吧。<br>所以这里我觉得一个优秀的架构设计，应该是需要对未来发展有更准确的预判能力的，是不求某些特定能力上的最好，而是整体的架构设计最能适应需求的发展与变化。","like_count":0},{"had_liked":false,"id":96703,"user_name":"觉","can_delete":false,"product_type":"c1","uid":1503600,"ip_address":"","ucode":"95E85D30E92170","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/70/bca09d2d.jpg","comment_is_top":false,"comment_ctime":1558489555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558489555","product_id":100025201,"comment_content":"感恩大佬分享 随喜大佬","like_count":0},{"had_liked":false,"id":96699,"user_name":"fenghuo","can_delete":false,"product_type":"c1","uid":1107514,"ip_address":"","ucode":"88A9F5BE0BBAA5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/3a/5e8be862.jpg","comment_is_top":false,"comment_ctime":1558489178,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1558489178","product_id":100025201,"comment_content":"今日学习，从来不知道fork有什么问题，一直认为理所当然，谢谢许老师","like_count":0},{"had_liked":false,"id":96697,"user_name":"逆流的鱼","can_delete":false,"product_type":"c1","uid":1258399,"ip_address":"","ucode":"AA3DDE44A83C40","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/9f/8dbd9558.jpg","comment_is_top":false,"comment_ctime":1558489021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558489021","product_id":100025201,"comment_content":"既然提到了，我就多问一句，怎么看用户态转内核态开销大的观点？","like_count":0},{"had_liked":false,"id":96567,"user_name":"亢星东","can_delete":false,"product_type":"c1","uid":1303322,"ip_address":"","ucode":"5E4063E83B2BB9","user_header":"https://static001.geekbang.org/account/avatar/00/13/e3/1a/061e77b6.jpg","comment_is_top":false,"comment_ctime":1558450084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558450084","product_id":100025201,"comment_content":"Linux 系统如果禁止使用了 那怎么办","like_count":0},{"had_liked":false,"id":96524,"user_name":"ljf10000","can_delete":false,"product_type":"c1","uid":1494064,"ip_address":"","ucode":"44957329A61EAE","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eop9WylZJicLQ5wib49kcMPqCTRT1aThh6mMAVl6qseLwbVOLhicVLjZCxCoyQd5CrrHHibs2CVPaoK3g/132","comment_is_top":false,"comment_ctime":1558441024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558441024","product_id":100025201,"comment_content":"协程不仅仅对IO有意义，它更符合现实中多任务（或者说海量任务）模型。如果没有协程，就需要在线程中自己管理任务块，实际上就是自己DIY了一个蹩脚协程。","like_count":0},{"had_liked":false,"id":96523,"user_name":"胡鹏","can_delete":false,"product_type":"c1","uid":1326455,"ip_address":"","ucode":"52644EC57FA4DB","user_header":"https://static001.geekbang.org/account/avatar/00/14/3d/77/45e5e06d.jpg","comment_is_top":false,"comment_ctime":1558440938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558440938","product_id":100025201,"comment_content":"很多没懂，短时间内估计也搞不懂，，但是就像评论一下，，还有就是感觉，老师思维所处的高度真的很高","like_count":0},{"had_liked":false,"id":96340,"user_name":"X","can_delete":false,"product_type":"c1","uid":1102065,"ip_address":"","ucode":"B5CA13435613D8","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/f1/432e0476.jpg","comment_is_top":false,"comment_ctime":1558401307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558401307","product_id":100025201,"comment_content":"终于盼到更新了","like_count":0}]}