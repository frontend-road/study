{"id":804722,"title":"12｜Agent架构：创建一个Agent智能体应用架构需要考虑哪些要素？","content":"<p>你好，我是金伟。</p><p>如果你已经跟着开发了整个Agent底层框架，那对Agent这个领域应该已经有非常深入的了解。不过做为一个知其然，还要知其所以然的工程师，可能还是会产生疑问：为什么说Agent智能体这种开发范式逐渐成为了大模型AI开发的标准呢？</p><p>这节课，我会从最简单的例子开始，回归Agent核心原理，一步步拆解Agent智能体的能力，确保任何业务做智能体的时候都有思路参考。</p><p>我们将始终围绕一组核心概念展开，也就是Agent智能体四要素：<strong>感知</strong>、<strong>决策</strong>、<strong>规划</strong>、<strong>执行</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/63/3afb9e9ecef886b675e57d4ee9890b63.png?wh=1920x409\" alt=\"图片\"></p><h2>重新理解智能体</h2><p>Agent智能体这个概念并没有统一的标准，而Agent这个词在AI领域就是智能体的意思。接下来我说的智能体概念是我在实战中理解到的。</p><h3>提示词也是智能体？</h3><p>从最简单的情况来说，大模型+提示词就是一个智能体，举个例子。</p><pre><code class=\"language-plain\">你是一名C语言老师，你负责学生C语言答疑，当我给你一段有bug的C语言代码的时候，你要帮我解答，告诉我问题在哪里，你清楚了吗。\n</code></pre><p>在大模型基础上，仅仅通过一段提示词，就能让大模型成为你的老师，这在以往是不可想象的。这个基于大模型的助教至少可以完成一部分人类老师的工作，就可以称为智能体。</p><p>智能体最大的特点就是可以像人类一样独立完成<strong>感知</strong>、<strong>决策</strong>、<strong>规划</strong>、<strong>执行</strong>。</p><!-- [[[read_end]]] --><p>在我们这个例子里，当学生发了一段自己写的C语言程序时，大模型必须读懂这段程序，也就是大模型需要具备<strong>感知</strong>能力。学生提交的这段C语言程序可能是从来没有出现过的，因此大模型不能只是搜索信息，而是要根据新的情况自己<strong>决策</strong>当前程序有哪些bug，该往什么方向修改。接下来还需要<strong>规划</strong>具体的解决方法，<strong>执行</strong>这些修改方法，并输出修改后的程序。</p><p><img src=\"https://static001.geekbang.org/resource/image/a4/02/a415106cb14bd6cd899df7269d3d8902.png?wh=1920x409\" alt=\"图片\"></p><p>我们换个角度，其实传统应用程序也可以看做某种程度的智能体。比如C语言编译器，它也能感知、决策、规划和执行，只不过它的这些智能都是人类提前编码的而已。相比于大模型助教，C语言编译器的能力也受限，它只能查找程序编译错误，不能修改程序。</p><p>但是，C语言编译器有一个很大的优点，就是可靠性很强。基于大模型的助教可能把程序给改错了，但C语言编译器却一定不会出错。</p><p><strong>那这里就要谈到传统应用和AI智能体的差别了。</strong></p><p>传统智能体是把人设计的算法用计算机程序表示，而大模型则是一个具备所有算法的“人”。</p><p><img src=\"https://static001.geekbang.org/resource/image/52/ae/52a270507602ccb6a248e07dbd15efae.png?wh=1920x1315\" alt=\"图片\"></p><p>刚才提到，这个助教只能完成一部分老师的工作，真实世界的智能体本就没有这么简单。理想情况下的Agent智能体应该是一个完全独立的、自我决策的系统。</p><p>比如一个经营咖啡店的智能体，它应该自主决定什么时候进货，什么时候出新的产品，在顾客到店的时候自主完成服务，出现投诉的时候能自主处理等等。什么时候这种智能体实现了，人类店员就真的可以下岗了。</p><h3>颠覆应用交互</h3><p>不过，即使真的有了经营咖啡店的智能体，当我们的咖啡店选址不同、客群不同的时候，仍然需要人类介入，来调教这个智能体。最终智能体还需要和人类的交互界面。我们来看看一个例子，大家都很熟悉的应用：美团。</p><p>美团APP的传统交互是什么样的呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/13/1e/13783991a245f3a3de52b2014b85411e.png?wh=1920x1920\" alt=\"图片\"></p><p>大胆假设一下，现在已经基于大模型开发了美团全功能的智能体，那是不是这个智能体的交互就是一个简单的聊天交互界面了呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/27/fb/279ed79093542a8c54b44358f2f35dfb.png?wh=1920x1158\" alt=\"图片\"></p><p>最后我们要说，现阶段基于大模型的Agent智能体仍然是能力受限严重的智能体，但大模型能力会越来越强，应用交互也会往我们设想的这个方向不断发展。</p><h2>为什么离不开大模型？</h2><p>理解了智能体，我们解决下一个问题，为什么我们离不开大模型呢？</p><p>上节课提到的<strong>意图识别</strong>，包括在Agent应用中提到的助理，是一个<strong>对外客服</strong>的概念。在逆向分析当中，工作流输出最终交给了大模型处理。实际上，这些实战例子都说明了大模型的<strong>感知</strong>能力非常强。</p><p>或者，你也可以说它这项能力很可靠，其他的几项就不一定了。</p><h3>拆解大模型的可靠度</h3><p>大模型目前只有内容输出能力，实际上并不具备大多数场景下的<strong>执行</strong>能力。而大模型<strong>推理</strong>能力似乎也是受限的？我们可以看看最经典的鸡兔同笼问题。</p><p><img src=\"https://static001.geekbang.org/resource/image/8d/bd/8d2b7d6ed3dyy67567ff24e57077d6bd.png?wh=1920x1071\" alt=\"图片\"></p><p>类似的数学问题说明，大模型在深度推理方面的能力不足。这实际上影响了智能体的<strong>决策</strong>和<strong>规划</strong>能力，也就是说情况一旦稍微复杂，基于大模型的决策和规划就可能不是最优的。</p><p>显然，全部用传统的函数逻辑实现智能体不可能，因此最终 <strong>Agent智能体开发范式都会走向大模型和传统程序相融合的方案。</strong></p><p><strong>最重要的问题是，我们需要给大模型安排一个合适的位置。</strong></p><p>其中有一类情况的位置非常明显，某个特定的AI能力，大模型非常擅长，比如文章总结、翻译等等，让大模型完成这些单独的任务非常可靠，这很像一个程序接口，原来不好做的NLP任务，基于大模型都不难做。</p><p>除了单独的NLP能力，大模型还非常擅长上下文理解，擅长人类语言聊天，上下文信息抽取等，也就是大模型的<strong>感知</strong>能力是可靠的。剩下的问题，我们再用程序给大模型足够的引导和限定，它在<strong>决策</strong>和<strong>规划</strong>上也能具备可靠的能力。</p><p><img src=\"https://static001.geekbang.org/resource/image/22/9d/2286964cb5251fb4cb1c6e2e7e82ca9d.png?wh=1920x599\" alt=\"图片\"></p><p>正如图中所示，大模型在智能体四要素上的可靠性决定了我们的开发范式。</p><p><strong>简言之，我们通过编程引导大模型做决策和规划，通过传统程序做执行，在特定的前提和领域下就可以开发足够可靠的Agent智能体。</strong></p><h3>案例：一个LangChain智能体</h3><p>根据Agent智能体能力级别的不同，可以分为单个能力的智能体和类人的、可聊天交互的智能体。比较简单的是单个能力的Agent智能体，我们用一个基于LangChain开发的智能体为例。</p><p>下面是一段伪代码，表示根据用户问题查询搜索引擎，最后总结出答案的Agent智能体。</p><pre><code class=\"language-plain\">from langchain.chains import SimpleChain\nfrom langchain.llms import OpenAI\nfrom langchain.tools import GoogleSearchTool\n\n\n# 初始化语言模型和工具\nllm = OpenAI(api_key=\"your-api-key\")\ngoogle_search = GoogleSearchTool(api_key=\"your-google-api-key\")\n\n\n# 定义Chain\nclass QuestionAnswerChain(SimpleChain):\n    def __init__(self, llm, search_tool):\n        self.llm = llm\n        self.search_tool = search_tool\n\n\n    def call(self, input_text):\n        # 使用语言模型分析问题\n        search_query = self.llm(input_text)\n        # 使用搜索工具查找答案\n        search_results = self.search_tool(search_query)\n        # 通过语言模型总结答案\n        answer = self.llm(search_results)\n        return answer\n\n\n# 使用Chain\nqa_chain = QuestionAnswerChain(llm, google_search)\nuser_question = \"法国的首都是哪里？?\"\nanswer = qa_chain.call(user_question)\nprint(answer)\n</code></pre><p>例子中的 <code>QuestionAnswerChain</code> 是一个自定义的 <code>Chain</code>，而 <code>Chain</code> 就是LangChain框架的核心概念，你可以理解为一个 <code>Chain</code> 就是一个自定义的具备单独能力的智能体。</p><p>针对用户搜索的输入，通过 <code>self.llm(input_text)</code> 来<strong>感知</strong>到用户搜索的关键词，这一步是大模型微完成的。第二步用 <code>GoogleSearchTool</code> 查找信息，实际上是我们编程做的<strong>决策</strong>和<strong>规划</strong>。最后我们利用了大模型的语言能力来做输出的<strong>执行</strong>，也就是 <code>self.llm(search_results)</code>。</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/2a/ceba3feb4f1d0766da1e8c38c6429a2a.png?wh=1920x599\" alt=\"图片\"></p><p>总结来说，一个基于 <code>Chain</code> 的简单智能体，其感知、决策、规划、执行，每一步都有我们人类的设定和参与，就能很好的完成这个小任务。</p><p>类似任务其实可以用更加智能的处理方式，让大模型做更多决策。在 <code>LangChain</code> 框架中，意图识别和工具选择可以依赖大模型的理解和预定义的代理逻辑。下面是这种方式对应的伪代码。</p><pre><code class=\"language-plain\">from langchain.agents import load_tools\nfrom langchain.agents import initialize_agent\nfrom langchain.agents import AgentType\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.llms import OpenAI\n\n\n# 首先，我们加载将用于控制代理的语言模型。\nchat = ChatOpenAI(temperature=0)\n\n\n# 接下来，我们加载一些工具来使用。请注意，`llm-math` 工具使用了一个 LLM，因此我们需要传入它。\nllm = OpenAI(temperature=0)\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm)\n\n\n# 最后，我们使用工具、语言模型和我们想要使用的代理类型来初始化代理。\nagent = initialize_agent(tools, chat, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)\n\n\n# 现在我们来测试一下！\nagent.run(\"Tom的女朋友是谁？他的年龄的0.23次方是多少？\")\n</code></pre><p>在这个 <code>LangChain</code> 的示例中，智能体的<strong>感知</strong>部分接收和理解用户的输入，具体就是理解 <code>\"Tom的女朋友是谁？他的年龄的0.23次方是多少？\"</code> 并识别出需要搜索信息，内部是由大模型完成的。</p><p><strong>决策</strong>部分，负责分析和确定如何处理用户的输入，该代理需要决定选用合适工具（如 <code>serpapi</code> 用于信息查询，<code>llm-math</code> 用于数学计算）。当 <code>agent.run()</code> 被调用时，这个决策过程在内部有由大模型完成。</p><p><strong>规划</strong>也会在 <code>agent.run()</code> 内部实现。规划负责调用工具的顺序和方式。本例中，首先使用 <code>serpapi</code> 查找 <code>Tom的女朋友</code> 的年龄信息，然后将结果输入 <code>llm-math</code> 进行数学计算。</p><p><strong>执行</strong>则包括工具的调用和大模型的响应生成。</p><p>总结来说，<code>LangChain</code> 的核心概念就是例子中的 <code>Chain</code> 和 <code>Agent</code>，实际上 <code>Chain</code> 就是一个人类可以自定义决策和规划执行逻辑的智能体，<code>Agent</code> 则在更高层，可以根据上下文自主决策和规划调用这些智能体。</p><p><code>LangChain</code> 框架还有其他概念，都是辅助的智能体工作的。比如 <code>llm</code> 是大模型，<code>PromptTemplate</code> 是处理提示词的，<code>memory</code> 是处理会话消息历史的，<code>Message</code> 表示各种消息，<code>tool</code> 是传统工具。</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/07/a63beb39b99f7c4f56ae318b8fafa307.png?wh=1920x1104\" alt=\"图片\"></p><p>大模型技术发展非常迅速，将来大模型的推理能力、执行能力是会不断增强的，比如例子里的网络搜索和数字计算，实际上大模型慢慢发展都会将常见的这些能力内化为自身的能力。</p><p>那是不是将来只需要大模型就可以做出全功能智能体了呢？我们看一个复杂一点的例子。</p><h3>案例：自动编程智能体</h3><p>我们的案例是：可以基于大模型实现自动编程吗？我们都知道可以让大模型写一个具体的函数，比如下面提示词。</p><pre><code class=\"language-plain\">用Python实现最大公约数的函数\n</code></pre><p>大模型完全可以自主决策和规划，写出对应的代码。那我们看看这个例子里大模型作为智能体的四个要素。</p><ul>\n<li><strong>感知：</strong>系统理解用户的编程需求。</li>\n<li><strong>决策</strong>：选择适当的算法。</li>\n<li><strong>规划</strong>：生成详细的代码结构。</li>\n<li><strong>执行</strong>：输出代码，并进行解释。</li>\n</ul><pre><code class=\"language-plain\">生成的Python代码：\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\n# 使用示例\nprint(gcd(48, 18))  # 输出：6\n</code></pre><p>当然，由于大模型的幻觉问题，有些大模型写的程序有bug，需要人来发现并进一步让大模型修改bug。那么，如果把这个思路扩展一下，把人类在编程中常见的决策和规划写入智能体，是不是就实现全自动了呢？</p><p>具体而言，让大模型在编写代码后自动生成测试用例，然后逐步测试并修复代码中的问题，直到解决所有bug。</p><p><img src=\"https://static001.geekbang.org/resource/image/2f/d5/2f27d5ce8918d17d386397ca1ccdf4d5.png?wh=1920x438\" alt=\"图片\"></p><p>下面是这个设计的伪代码。</p><pre><code class=\"language-plain\">from langchain.chat_models import ChatOpenAI\nfrom langchain.llms import OpenAI\nfrom langchain.agents import initialize_agent, AgentType\n\n\n# 初始化大模型\nchat = ChatOpenAI(temperature=0)\nllm = OpenAI(temperature=0)\n\n\n# 初始化工具和代理\ntools = [\"static-analyzer\", \"auto-tester\"]  # 假设有这些工具\nagent = initialize_agent(tools, chat, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)\n\n\n# 代码生成模块\ndef generate_code(user_input):\n# 测试用例生成模块\ndef generate_test_cases(code):\n# 执行测试模块\ndef run_tests(code, test_cases):\n# 修复代码模块\ndef fix_code(code, test_results):\n\n\n# 主流程\ndef auto_programming_pipeline(user_input):\n    code = generate_code(user_input)\n    print(f\"生成的代码：\\n{code}\")\n    \n    while True:\n        test_cases = generate_test_cases(code)\n        test_results = run_tests(code, test_cases)\n        \n        if \"通过\" in test_results:\n            print(\"所有测试用例都通过了！代码没有问题。\")\n            break\n        else:\n            print(\"存在未通过的测试用例，正在修复代码...\")\n            code = fix_code(code, test_results)\n# 运行示例\nauto_programming_pipeline(\"请编写一个Python函数来计算两个数的最大公约数。\")\n</code></pre><p>实际上，你按照这个逻辑编写智能体真的可以工作，并自主修复所有bug。然而当这个智能体处理复杂任务时，问题就来了。如果问题复杂，那么修复代码时，大模型可能会引入新的错误，系统就进入了一个修复-测试的死循环。反复调用大模型生成代码，资源消耗可能不断累积，导致高昂的成本和长时间的响应。</p><p>这个例子表明，目前大模型离开人不可能实现这个级别智能，更不要说更高级别的智能体了。<strong>所以目前来讲，</strong><strong>最优的范式就是人类辅助决策和规划。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/f6/ed/f6be3872ec9056d5d48895f56f7846ed.png?wh=1920x1104\" alt=\"图片\"></p><p>一方面是人类辅助，另一方面还可以通过大模型微调提高大模型在特定场景的推理能力。</p><h3>案例：微调智能体决策能力</h3><p>很多人认为大模型微调是给大模型增加特定的数据。真实情况是，大模型微调，是让它具备基础的某种特定能力。</p><p>比如在我们的自动编程智能体案例中，如果要让智能体掌握一门新的开发语言，就可以用大量的现成代码微调大模型。目的并不是让大模型记住这些代码，而是让大模型通过这些代码找到这门语言内在的语法和逻辑关系。当新的开发需求出现时，大模型可以根据这些内在逻辑去推理。</p><p>你可以用数据微调大模型，也可以通过智能体的提示词微调大模型。提示词的微调方法往往适用于某个场景下大模型决策不够精准的情况，用提示词可以引导大模型在特定条件下的决策。</p><p>上节课提到的Agent底层demo，我们编写的提示词和各个工作流的输入输出参数，实际上就是在对大模型的<strong>决策</strong>和<strong>规划</strong>做微调，我们写的提示词的好坏会直接影响大模型的<strong>决策规划</strong>表现。</p><p>特别注意，如果提示词的方法无法调整大模型的<strong>决策</strong>表现，还可以用大模型微调的方法继续调整它的能力。</p><p>当然，这两个微调方法并不冲突，都是给大模型插入新的可靠<strong>决策</strong>和<strong>规划</strong>能力。那么现在，大模型沟通是<strong>可靠</strong>的，插件能力是<strong>可靠</strong>的，微调让意图识别变的<strong>可靠</strong>，最终开发的Agent智能体自然是<strong>可靠</strong>的。</p><p>现在，我们可以整理出一个基于场景的Agent智能体应用架构了。</p><p><img src=\"https://static001.geekbang.org/resource/image/d6/3b/d6a2a1d2a44a4b83916da1e6396ddf3b.png?wh=1920x920\" alt=\"图片\"></p><p>从这一节的分析你可以看出，目前阶段的智能体开发，作为开发者最核心的能力实际上是<strong>低成本<strong><strong>地</strong></strong>构建可靠的智能体应用</strong>，接下来我就一个例子进一步说明这个问题。</p><h2>低成本才是核心</h2><p>上节课的Agent底层框架和应用yaml模版设计，再之前的Coze拖拽式工作流开发模式，都体现了大模型智能体开发中对成本问题的重视。</p><p>合理规划大模型在<strong>感知</strong>、<strong>决策</strong>、<strong>规划</strong>、<strong>执行</strong>各部分的工作是一种成本优化的体现，而必须要人工编程实现的工作也要考虑尽量低成本实现。</p><p>真实项目中的营销Agent智能体是一个多轮聊天交互的智能体。它像一个人，有多个能力。具体实现可以通过简单智能体的组合来完成。</p><p>而这里的简单智能体，就是 <code>Chain</code> 或上一节课提到的 <code>工作流</code>。</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/40/dd1fddaf93b5025b8d7efba4dd078540.png?wh=1920x354\" alt=\"图片\"></p><h3>分而治之</h3><p>从一个具体的营销场景下的智能体例子，能看到这类智能体的基本结构。</p><p>先说场景，公司希望使用Agent智能体自动生成广告文案，推广新产品。需要生成符合品牌调性、能吸引目标用户的高质量广告内容。</p><p>真实项目中可以设计一个人机结合的工作流，既可以发挥大模型的创造性，又可以保证智能体的可靠性，该工作流的基本步骤是<strong>初步内容生成</strong>、<strong>内容审查模块</strong>、<strong>个性化内容和人类反馈。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/e8/ea/e885a3c3a1cc6ee4cc7d97b0d48085ea.png?wh=1920x339\" alt=\"图片\"></p><p><strong>初步内容生成，</strong>输入包括品牌信息、产品特点、目标用户描述等。</p><pre><code class=\"language-plain\">示例：\n# 生成广告文案\ngenerated_text = model.generate(input_text, max_length=1000)\nprint(generated_text)\n</code></pre><p><strong>内容审查模块，</strong>使用预定义的品牌规则和词汇库，自动检测不符合标准的部分。</p><pre><code class=\"language-plain\">示例：\ndef review_content(content):\n    # 假设有一组品牌规则和关键词\n    brand_rules = [\"创新的\", \"优质的\", \"实惠的\"]\n    restricted_words = [\"便宜的\", \"不好的\", \"低质量的\"]\n</code></pre><p><strong>个性化内容，</strong>基于用户历史行为和兴趣生成用户画像，根据用户画像调整内容的风格和重点。</p><pre><code class=\"language-plain\">示例：\ndef personalize_content(base_content, user_profile):\n    if user_profile['interest'] == 'photography':\n        ...\n    elif user_profile['interest'] == 'gaming':\n        ...\n    else:\n        return base_content\n\n\ngenerated_text = \"这是基础内容。\"\nuser_profile = {'interest': 'photography'}\npersonalized_content = personalize_content(generated_text, user_profile)\nprint(personalized_content)\n</code></pre><p><strong>人类反馈，</strong>让人类审查员最终审核内容，提供反馈并最终确认内容。</p><p>实际上，上述每一个模块还可以进一步在其他工作流复用，这样成本会更低。</p><p>一个复杂的智能体，分拆为多个可以简单实现的智能体，这个范式本身就是智能体开发中最节省成本的模式，也是一种比较拟人化的开发思路。</p><h3>低成本开发</h3><p>对智能体的规划分治法是设计上的范式，而具体逻辑开发中的复用性是开发上的低成本范式。</p><p>回顾上节课的插件开发，会发现实战中是在原有业务逻辑里抽象成不同插件，给智能体直接复用，更之前的Coze平台开发范式中，插件和工作流的分享可复用性也提现了这一点。</p><p>另外一个例子是Langchain中的 <strong>memory、llm、prompt、tool、Message</strong> 等模块。当然，这些模块也可以在Coze这类智能体平台上找到对应的模块。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/70/e750774733yy1b90168d227371c2f970.png?wh=1920x1216\" alt=\"图片\"></p><p>现实项目中，插件一般由平台开发，如果是公司内部，由研发统一开发的公共插件，工作流就是单个智能体。将一个复杂的智能体分而治之。在这个框架之下，将现有能力迁移到Agent平台上也非常方便。</p><p>合理利用大模型的<strong>感知</strong>、<strong>决策</strong>能力，快速迁移已有模块和复用插件，都可以降低开发成本，而交互流程创新则可以把界面开发成本直接降为零。</p><p><strong>最后我想特别强调一点，你仔细去想，大模型这种聊天式的交互，将交互方式统一，交互开发成本为零，这个特性才是让 Coze这类Agent平台可以实现低代码，低成本开发的根本，也是我坚信基于大模型的智能体开发可以做到百倍效率提升的根本。</strong></p><h2>小结</h2><p>智能体这个概念并不是特指现在AI领域的Agent智能体，一个提示词+大模型是智能体，甚至一个传统程序也可以看做一个智能体。只是我们在实战中会发现，提示词+大模型生产的智能体往往不靠谱，而传统程序更靠谱。</p><p>要提高大模型的“靠谱”程度，需要先理清大模型在智能体的四个基本能力上的“靠谱”程度。</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/ba/c8dd1a598b0f8794816b0258ab562dba.png?wh=1920x608\" alt=\"图片\"></p><p>基于大模型现在的能力，它在感知、决策、规划、执行四个能力上的“靠谱”程度实际上是越来越低的，那怎么才能提升呢？</p><p>可以通过提示词引导大模型，让它对特定的任务做特定的决策和规划。这样就能在用户提出需求时，决策那些业务交由大模型自身处理，哪些业务抛给传统程序处理。如果大模型还是无法准确地识别和分配这些任务，我们可以通过微调大模型提升准确性，也可以提高任务划分的颗粒度，把更多的业务逻辑交给传统程序处理。</p><p>目前的大模型还不具备很多的执行能力，因此智能体最终的执行大部分还是交给了传统程序逻辑处理。<strong>这种融合的架构方案会在未来很长一段时间内存在，其本质在于，完全基于大模型的智能体成本极高，引入人工辅助的智能体才能降低成本。</strong></p><p>最终我们得到一个适应所有业务场景下的Agent智能体架构流程。</p><p><img src=\"https://static001.geekbang.org/resource/image/29/d5/29b3afbe7ddb830ae5252053bcfa36d5.png?wh=1920x866\" alt=\"图片\"></p><h2>思考题</h2><p>我们说到，智能体开发的一个核心问题是提高智能体的可靠性，那在我们这套Agent智能体架构下是如何保证可靠性达到100%的呢？</p><p>欢迎你在留言区和我交流。如果觉得有所收获，也可以把课程分享给更多的朋友一起学习。我们下节课见！</p><p><a href=\"https://jsj.top/f/hm26hN\">&gt;&gt;戳此加入课程交流群</a></p>","comments":[{"had_liked":false,"id":394478,"user_name":"石云升","can_delete":false,"product_type":"c1","uid":1024195,"ip_address":"广东","ucode":"78F1DD33EFD000","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/c3/c5db35df.jpg","comment_is_top":false,"comment_ctime":1726909020,"is_pvip":false,"replies":[{"id":143435,"content":"助手不会思考 让大模型处理","user_name":"作者回复","user_name_real":"编辑","uid":1763517,"ctime":1729077557,"ip_address":"北京","comment_id":394478,"utype":1}],"discussion_count":2,"race_medal":1,"score":2,"product_id":100786301,"comment_content":"大概理一下这个工作流。\n1. 首先,用户提出一个问题或要求。\n2. 这个问题传给了AI助手。\n3. AI助手会思考:&quot;这个问题我能直接回答吗,还是需要更复杂的处理?&quot;\n4. 如果问题简单,AI助手就直接回答用户。\n5. 如果问题复杂,AI助手会启动一个叫&quot;工作流&quot;的特殊程序来处理。\n6. 这个&quot;工作流&quot;程序可以使用很多工具,比如查资料、写代码、上网搜索等,来解决复杂问题。\n7. 最后,&quot;工作流&quot;会给出答案,AI助手再把这个答案传达给用户。","like_count":0,"discussions":[{"author":{"id":1763517,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e8/bd/62169942.jpg","nickname":"金伟","note":"","ucode":"C0393789836F21","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652514,"discussion_content":"助手不会思考 让大模型处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1729077557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066644,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/94/ca15724a.jpg","nickname":"下一道彩虹","note":"","ucode":"6F286504A9BCD8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652055,"discussion_content":"最后这个 Agent 智能体架构流程，看得一头雾水。建议分步骤多图展示。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1728143234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394477,"user_name":"石云升","can_delete":false,"product_type":"c1","uid":1024195,"ip_address":"广东","ucode":"78F1DD33EFD000","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/c3/c5db35df.jpg","comment_is_top":false,"comment_ctime":1726908973,"is_pvip":false,"replies":[{"id":143436,"content":"需要实现","user_name":"作者回复","user_name_real":"编辑","uid":1763517,"ctime":1729077563,"ip_address":"北京","comment_id":394477,"utype":1}],"discussion_count":1,"race_medal":1,"score":2,"product_id":100786301,"comment_content":"100%的可靠性技术上实现不了吧..","like_count":0,"discussions":[{"author":{"id":1763517,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e8/bd/62169942.jpg","nickname":"金伟","note":"","ucode":"C0393789836F21","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652515,"discussion_content":"需要实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1729077564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396516,"user_name":"Geek_3b5445","can_delete":false,"product_type":"c1","uid":4058237,"ip_address":"湖北","ucode":"D1B7D80521D033","user_header":"","comment_is_top":false,"comment_ctime":1734790240,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100786301,"comment_content":"还是看场景, 有些场景传统图形化程序员更直接高效交互,大模型的落地机会是满足传统程序不好用的场景.","like_count":0},{"had_liked":false,"id":395632,"user_name":"xuwei","can_delete":false,"product_type":"c1","uid":1164626,"ip_address":"北京","ucode":"07268C1743839F","user_header":"https://static001.geekbang.org/account/avatar/00/11/c5/52/63008fc7.jpg","comment_is_top":false,"comment_ctime":1731495038,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100786301,"comment_content":"chain不等于智能体吧，老师这里有特别的含义吗","like_count":0}]}