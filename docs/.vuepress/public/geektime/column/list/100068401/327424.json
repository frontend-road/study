{"id":327424,"title":"04 | 长函数：为什么你总是不可避免地写出长函数？","content":"<p>你好，我是郑晔。</p><p>这一讲，我们来讲一个你一定深恶痛绝的坏味道：长函数。</p><p>有一个关于程序员的段子，说程序员一定要用大屏显示器，而且一定要竖起来用，这样才能看到一个函数的全貌。这显然是在调侃函数很长，小屏甚至横屏都不足以看到整个函数，只有竖起来才行。</p><p>只要一提到长函数，无论是去被迫理解一个长函数的含义，还是要在一个长函数中，小心翼翼地找出需要的逻辑，按照需求微调一下，几乎所有程序员都会有不愉悦的回忆。可以这么说，没有人喜欢长函数，但在实际工作中，却不得不去与各种长函数打交道。</p><p>不知道你在实际工作中遇到最长的函数有多长，几百上千行的函数肯定是不足以称霸的。在我的职业生涯中，经常是我以为自己够见多识广了，但只要新接触到一个有悠久历史的代码库，就总会有突破认知的长函数出现。</p><p>长函数是一个“我一说，你就知道怎么回事”的坏味道，我就不准备用一个典型的长函数来开启这一讲了，否则，这一讲的篇幅都不够了。但是，为了统一认识，我准备先讨论一下多长的函数算是长函数，我们来看一个案例。</p><h2>多长的函数才算“长”？</h2><p>有一次，我在一个团队做分享，讲怎么把一个长函数重构成小函数。现场演示之后，我问了大家一个问题：在你心目中，多长的函数才算长呢？</p><!-- [[[read_end]]] --><p>一个现场听众很认真地思考了一下，给出了一个答案：100 行。我很尴尬地看了一下自己刚刚重构掉的两个函数，最长的一个都不到 100 行。换言之，以他的标准来看，这个函数根本就不是长函数，根本就没有必要重构。</p><p><strong>对于函数长度容忍度高，这是导致长函数产生的关键点</strong>。</p><p>如果一个人认为 100 行代码不算长，那在他眼中，很多代码根本就是没有问题的，也就更谈不上看到更多问题了，这其实是一个观察尺度的问题。这就好比，没有电子显微镜之前，人们很难理解疾病的原理，因为看不到病毒，就不可能理解病毒可以致病这个道理。</p><p><strong>一个好的程序员面对代码库时要有不同尺度的观察能力，看设计时，要能够高屋建瓴，看代码时，要能细致入微</strong>。</p><p>这里的要点就是，看具体代码时，一定要能够看到细微之处。我在《<a href=\"https://time.geekbang.org/column/intro/100022301\">10x 程序员工作法</a>》专栏中讲到过“任务分解”，关键点就是将任务拆解得越小越好，这个观点对代码同样适用。随着对代码长度容忍度的降低，对代码细节的感知力就会逐渐提升，你才能看到那些原本所谓细枝末节的地方隐藏的各种问题。</p><p>回到具体的工作中，“越小越好”是一个追求的目标，不过，没有一个具体的数字，就没办法约束所有人的行为。所以，通常情况下，我们还是要定义出一个代码行数的上限，以保证所有人都可以按照这个标准执行。</p><p>我自己写代码的习惯是这样的。像 Python、Ruby 这样表达能力比较强的动态语言，大多数情况下，<a href=\"https://en.wikipedia.org/wiki/One-liner_program\">一行代码（one-liner program）</a>可以解决很多问题，所以，我对自己的要求大约是 5 行左右，并且能够用一行代码解决的问题，就尽量会用一行代码解决；而像 Java 这样表达能力稍弱的静态类型语言，我也争取在 10 行代码之内解决问题。</p><p>当然，这是我对自己的要求，在实际的项目中，可能不是每个人都能做到这一点，所以，我给了一个更为宽松的限制，在自己的标准上翻了番，也就是 20 行。</p><p>这不是一个说说就算的标准，我们应该把它变成一个可执行的标准。比如，在 Java 中，我们就可以把代码行的约束加到 CheckStyle 的配置文件中，就像下面这样：</p><pre><code>&lt;module name=&quot;MethodLength&quot;&gt;\n    &lt;property name=&quot;tokens&quot; value=&quot;METHOD_DEF&quot;/&gt;\n    &lt;property name=&quot;max&quot; value=&quot;20&quot;/&gt;\n    &lt;property name=&quot;countEmpty&quot; value=&quot;false&quot;/&gt;\n&lt;/module&gt;\n</code></pre><p>这样，在我们提交代码之前，执行本地的构建脚本，就可以把长函数检测出来（关于 CheckStyle，我在《<a href=\"https://time.geekbang.org/column/intro/100022301\">10x 程序员工作法</a>》中讲<a href=\"https://time.geekbang.org/column/article/86561\">项目自动化</a>时专门做过介绍，你有兴趣不妨了解一下）。如果你用的是其它的程序设计语言，不妨也找一下相应的静态检查工具，看看是否提供类似的配置。</p><p>我知道，即便是以 20 行为上限，这也已经超过很多人的认知，具体的函数行数可以结合团队的实际情况来制定，但是，我非常不建议把这个数字放得很大，就像我前面说的那样，如果你放到 100 行，这个数字基本上是没有太多意义的，对团队也起不到什么约束作用。</p><p>我之所以要先讨论多长的函数算是长函数，是因为如果你不能认识到代码行的标准应该很低，那么在接下来的讨论中，有些代码示例可能在你看来，就根本不需要调整了。</p><h2>长函数的产生</h2><p>不过，限制函数长度，是一种简单粗暴的解决方案。最重要的是你要知道，长函数本身是一个结果，如果不理解长函数产生的原因，还是很难写出整洁的代码。接下来，我们就来看看长函数是怎么产生的。</p><ul>\n<li><strong>以性能为由</strong></li>\n</ul><p>人们写长函数的历史由来已久。在《软件设计之美》专栏里，我讲过<a href=\"https://time.geekbang.org/column/article/245868\">程序设计语言的发展历史</a>。像 C 语言这种在今天已经是高性能的程序设计语言，在问世之初，也曾被人质疑性能不彰，尤其是函数调用。</p><p>在一些写汇编语言的人看来，调用函数涉及到入栈出栈的过程，显然不如直接执行来得性能高。这种想法经过各种演变流传到今天，任何一门新语言出现，还是会以同样的理由被质疑。</p><p>所以，在很多人看来，把函数写长是为了所谓性能。不过，这个观点在今天是站不住的。<strong>性能优化不应该是写代码的第一考量。</strong></p><p>一方面，一门有活力的程序设计语言本身是不断优化的，无论是编译器，还是运行时，性能都会越来越好；另一方面，可维护性比性能优化要优先考虑，当性能不足以满足需要时，我们再来做相应的测量，找到焦点，进行特定的优化。这比在写代码时就考虑所谓性能要更能锁定焦点，优化才是有意义的。</p><ul>\n<li><strong>平铺直叙</strong></li>\n</ul><p>除了以性能为由把代码写长，还有一种最常见的原因也会把代码写长，那就是写代码平铺直叙，把自己想到的一点点罗列出来。比如下面这段代码（如果你不想仔细阅读，可以直接跳到后面）：</p><pre><code>public void executeTask() {\n    ObjectMapper mapper = new ObjectMapper();\n    CloseableHttpClient client = HttpClients.createDefault();\n    List&lt;Chapter&gt; chapters = this.chapterService.getUntranslatedChapters();\n    for (Chapter chapter : chapters) {\n        // Send Chapter\n        SendChapterRequest sendChapterRequest = new SendChapterRequest();\n        sendChapterRequest.setTitle(chapter.getTitle());\n        sendChapterRequest.setContent(chapter.getContent());\n\n\n        HttpPost sendChapterPost = new HttpPost(sendChapterUrl);\n        CloseableHttpResponse sendChapterHttpResponse = null;\n        String chapterId = null;\n        try {\n            String sendChapterRequestText = mapper.writeValueAsString(sendChapterRequest);\n            sendChapterPost.setEntity(new StringEntity(sendChapterRequestText));\n            sendChapterHttpResponse = client.execute(sendChapterPost);\n            HttpEntity sendChapterEntity = sendChapterPost.getEntity();\n            SendChapterResponse sendChapterResponse = mapper.readValue(sendChapterEntity.getContent(), SendChapterResponse.class);\n            chapterId = sendChapterResponse.getChapterId();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            try {\n                if (sendChapterHttpResponse != null) {\n                    sendChapterHttpResponse.close();\n                }\n            } catch (IOException e) {\n                // ignore\n            }\n        }\n\n\n        // Translate Chapter\n        HttpPost translateChapterPost = new HttpPost(translateChapterUrl);\n        CloseableHttpResponse translateChapterHttpResponse = null;\n        try {\n            TranslateChapterRequest translateChapterRequest = new TranslateChapterRequest();\n            translateChapterRequest.setChapterId(chapterId);\n            String translateChapterRequestText = mapper.writeValueAsString(translateChapterRequest);\n            translateChapterPost.setEntity(new StringEntity(translateChapterRequestText));\n            translateChapterHttpResponse = client.execute(translateChapterPost);\n            HttpEntity translateChapterEntity = translateChapterHttpResponse.getEntity();\n            TranslateChapterResponse translateChapterResponse = mapper.readValue(translateChapterEntity.getContent(), TranslateChapterResponse.class);\n            if (!translateChapterResponse.isSuccess()) {\n                logger.warn(&quot;Fail to start translate: {}&quot;, chapterId);\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (translateChapterHttpResponse != null) {\n                try {\n                    translateChapterHttpResponse.close();\n                } catch (IOException e) {\n                    // ignore\n                }\n            }\n        }\n    }\n</code></pre><p>这段代码的逻辑是，把没有翻译过的章节发到翻译引擎，然后，启动翻译过程。在这里翻译引擎是另外一个服务，需要通过 HTTP 的形式向它发送请求。相对而言，这段代码还算直白，当你知道了我上面所说的逻辑，你是很容易看懂这段代码的。</p><p>这段代码之所以很长，主要原因就是把前面所说的逻辑全部平铺直叙地摆在那里了，这里既有业务处理的逻辑，比如，把章节发送给翻译引擎，然后，启动翻译过程；又有处理的细节，比如，把对象转成 JSON，然后，通过 HTTP 客户端发送出去。</p><p>从这段代码中，我们可以看到平铺直叙的代码存在的两个典型问题：</p><ul>\n<li>把多个业务处理流程放在一个函数里实现；</li>\n<li>把不同层面的细节放到一个函数里实现。</li>\n</ul><p>这里发送章节和启动翻译是两个过程，显然，这是可以放到两个不同的函数中去实现的，所以，我们只要做一下提取函数，就可以把这个看似庞大的函数拆开，而拆出来的几个函数规模都会小很多，像下面这样：</p><pre><code>public void executeTask() {\n    ObjectMapper mapper = new ObjectMapper();\n    CloseableHttpClient client = HttpClients.createDefault();\n    List&lt;Chapter&gt; chapters = this.chapterService.getUntranslatedChapters();\n    for (Chapter chapter : chapters) {\n        String chapterId = sendChapter(mapper, client, chapter);\n        translateChapter(mapper, client, chapterId);\n    }\n}\n</code></pre><p>拆出来的部分，实际上就是把对象打包发送的过程，我们以发送章节为例，先来看拆出来的发送章节部分：</p><pre><code>private String sendChapter(final ObjectMapper mapper,\n                           final CloseableHttpClient client,\n                           final Chapter chapter) {\n    SendChapterRequest request = asSendChapterRequest(chapter);\n\n\n    CloseableHttpResponse response = null;\n    String chapterId = null;\n    try {\n        HttpPost post = sendChapterRequest(mapper, request);\n        response = client.execute(post);\n        chapterId = asChapterId(mapper, post);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    } finally {\n        try {\n            if (response != null) {\n                response.close();\n            }\n        } catch (IOException e) {\n            // ignore\n        }\n    }\n    return chapterId;\n}\n\n\nprivate HttpPost sendChapterRequest(final ObjectMapper mapper, final SendChapterRequest sendChapterRequest) throws JsonProcessingException, UnsupportedEncodingException {\n    HttpPost post = new HttpPost(sendChapterUrl);\n    String requestText = mapper.writeValueAsString(sendChapterRequest);\n    post.setEntity(new StringEntity(requestText));\n    return post;\n}\n\n\nprivate String asChapterId(final ObjectMapper mapper, final HttpPost sendChapterPost) throws IOException {\n    String chapterId;\n    HttpEntity entity = sendChapterPost.getEntity();\n    SendChapterResponse response = mapper.readValue(entity.getContent(), SendChapterResponse.class);\n    chapterId = response.getChapterId();\n    return chapterId;\n}\n\n\nprivate SendChapterRequest asSendChapterRequest(final Chapter chapter) {\n    SendChapterRequest request = new SendChapterRequest();\n    request.setTitle(chapter.getTitle());\n    request.setContent(chapter.getContent());\n    return request\n}\n</code></pre><p>当然，这个代码还算不上已经处理得很整洁了，但至少同之前相比，已经简洁了一些。我们只用了最简单的<strong>提取函数</strong>这个重构手法，就把一个大函数拆分成了若干的小函数。</p><p>顺便说一下，<strong>长函数往往还隐含着一个命名问题</strong>。如果你看修改后的sendChapter，其中的变量命名明显比之前要短，理解的成本也相应地会降低。因为变量都是在这个短小的上下文里，也就不会产生那么多的命名冲突，变量名当然就可以写短一些。</p><p>平铺直叙的代码，一个关键点就是没有把不同的东西分解出来。如果我们用设计的眼光衡量这段代码，这就是“分离关注点”没有做好，把不同层面的东西混在了一起，既有不同业务混在一起，也有不同层次的处理混在了一起。我在《软件设计之美》专栏中，也曾说过，<strong>关注点越多越好，粒度越小越好。</strong></p><ul>\n<li><strong>一次加一点</strong></li>\n</ul><p>有时，一段代码一开始的时候并不长，就像下面这段代码，它根据返回的错误进行相应地错误处理：</p><pre><code>if (code == 400 || code == 401) {\n  // 做一些错误处理\n}\n</code></pre><p>然后，新的需求来了，增加了新的错误码，它就变成了这个样子：</p><pre><code>if (code == 400 || code == 401 || code == 402) {\n  // 做一些错误处理\n}\n</code></pre><p>你知道，一个有生命力的项目经常会延续很长时间，于是，这段代码有很多次被修改的机会，日积月累，它就成了让人不忍直视的代码，比如：</p><pre><code>if (code == 400 || code == 401 || code == 402 || ...\n  || code == 500 || ...\n  || ...\n  || code == 10000 || ...) {\n  // 做一些错误处理\n}\n</code></pre><p>后来人看到这段代码就想骂人了。当他从版本控制的历史中找到这些代码的作者，去询问这些处理的来龙去脉时，每个人其实都很委屈，他们当时也没做太多，只是加了一个判断条件而已。</p><p><strong>任何代码都经不起这种无意识的累积，每个人都没做错，但最终的结果很糟糕。</strong>对抗这种逐渐糟糕腐坏的代码，我们需要知道“童子军军规”：</p><blockquote>\n<p>让营地比你来时更干净。<br>\n—— 童子军军规</p>\n</blockquote><p>Robert Martin 把它借鉴到了编程领域，简言之，我们应该看看自己对于代码的改动是不是让原有的代码变得更糟糕了，如果是，那就改进它。但这一切的前提是，你要能看出自己的代码是不是让原有的代码变得糟糕了，所以，学习代码的坏味道还是很有必要的。</p><p>至此，我们看到了代码变长的几种常见原因：</p><ul>\n<li>以性能为由；</li>\n<li>平铺直叙；</li>\n<li>一次加一点。</li>\n</ul><p>你会发现，代码变长根本是一个无意识的问题，写代码的人没有觉得自己把代码破坏了。但只要你认识到长函数是一个坏味道，后面的许多问题就自然而然地会被发掘出来，至于解决方案，你已经看到了，大部分情况下，就是拆分成各种小函数。</p><h2>总结时刻</h2><p>今天我们讲了程序员最深恶痛绝的坏味道：长函数。没有人愿意去阅读长函数，但许多人又会不经意间写出长函数。</p><p>毫无疑问，长函数是一个坏味道。对于团队而言，一个关键点是要定义出长函数的标准。不过，过于宽泛的标准是没有意义的，想要有效地控制函数规模，几十行的函数已经是标准的上限了，这个标准越低越好。</p><p>我们还分析了长函数产生的原因：</p><ul>\n<li>有人以性能为借口；</li>\n<li>有人把代码平铺直叙地摊在那里；</li>\n<li>有人只是每次增加了一点点。</li>\n</ul><p>其中，平铺直叙是把函数写长最常见的原因。之所以会把代码平摊在那里，一方面是把多个业务写到了一起，另一方面是把不同层次的代码写到了一起。究其根因，那是“分离关注点”没有做好。</p><p>每次增加一点点，是另外一个让代码变长的原因，应对它的主要办法就是要坚守“童子军军规”，但其背后更深层次的支撑就是要对坏味道有着深刻的认识。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>把函数写短，越短越好</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/17/bf/17ef4030fb39dc02400f8e03e2547cbf.jpg?wh=2284*3156\" alt=\"\"></p><h2>思考题</h2><p>你在实际的工作中遇到过长函数吗？讲讲你和长函数斗争的故事，欢迎在留言区写下你的经历。如果你身边有人正在为“长函数”苦恼，也欢迎你把这节课分享给他。</p><p>感谢阅读，我们下一讲再见！</p><p><span class=\"reference\">参考资料：</span><br>\n<a href=\"https://time.geekbang.org/column/article/86561\">一个好的项目自动化应该是什么样子的？</a></p><p><a href=\"https://time.geekbang.org/column/article/245868\">语言的模型：如何打破单一语言局限，让设计更好地落地？</a></p><p><a href=\"https://time.geekbang.org/column/article/240749\">分离关注点：软件设计至关重要的第一步</a></p>","neighbors":{"left":{"article_title":"03 | 重复代码：简单需求到处修改，怎么办？","id":325794},"right":{"article_title":"05 | 大类：如何避免写出难以理解的大类？","id":327483}},"comments":[{"had_liked":false,"id":272811,"user_name":"Geek_45023b","can_delete":false,"product_type":"c1","uid":1945871,"ip_address":"","ucode":"0892B3B9605AFA","user_header":"","comment_is_top":false,"comment_ctime":1610292797,"is_pvip":false,"replies":[{"id":"98929","content":"代码行书没有上限，写的人就没有底线。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610370137,"ip_address":"","comment_id":272811,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44559965757","product_id":100068401,"comment_content":"我见过10万行的类，上万行的长函数。这些都是在工业软件中，由非计算机专业的人开发的代码","like_count":10,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513397,"discussion_content":"代码行书没有上限，写的人就没有底线。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610370137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573305,"discussion_content":"目前见过最长的函数9000多行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653321883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272196,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1609986246,"is_pvip":false,"replies":[{"id":"98805","content":"拆分是没有问题的，但拆分出来的每一个步骤，都应该是一个独立的函数，然后，在大的函数中将它们聚合起来。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610159115,"ip_address":"","comment_id":272196,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44559659206","product_id":100068401,"comment_content":"举个场景:<br>创建商品聚合实体的场景:<br>1.查找商品，校验商品是否存在。<br>2.查找店铺, 校验店铺是否存在，获取店铺code。<br>3.用商品和店铺查找合作关系。<br>4.用合作关协查找合同，验证合同合法。<br><br>以上只是举例，实际场景可能还会有5，6，7，8，9。而这个场景的特点: 每个环节的执行依赖上个环节的回参作为输入，以至于只能平铺(哪怕每个环节都提炼成1行函数调用)而没办法拆分开去封装。而一旦平铺，行数超过10-20就很容易。<br><br>像这种场景，郑老师怎么看。可以进一步拆分的话该如何拆?","like_count":10,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513195,"discussion_content":"拆分是没有问题的，但拆分出来的每一个步骤，都应该是一个独立的函数，然后，在大的函数中将它们聚合起来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610159115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1332256,"avatar":"https://static001.geekbang.org/account/avatar/00/14/54/20/90ad5247.jpg","nickname":"NiceBen","note":"","ucode":"793679E3520E84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344082,"discussion_content":"有段时间写流程引擎的时候，就很类似。但是参照Spring中的AbstractApplicationContext.java 中的 refresh() 方法一样去拆分。每个方法就变得很简单，也很明确，调试也变得很简单了。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1611285499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272813,"user_name":"明","can_delete":false,"product_type":"c1","uid":1607502,"ip_address":"","ucode":"34FF545704EA8A","user_header":"https://static001.geekbang.org/account/avatar/00/18/87/4e/98173974.jpg","comment_is_top":false,"comment_ctime":1610293652,"is_pvip":false,"replies":[{"id":"98903","content":"你这算是勇于自我否定吗？😁","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610335897,"ip_address":"","comment_id":272813,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40264999316","product_id":100068401,"comment_content":"我写过最长的类，写了4000行，还是我抽出去了几百行if代码。没错，就是我亲手写出来的","like_count":9,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513398,"discussion_content":"你这算是勇于自我否定吗？😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610335897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272515,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1610105508,"is_pvip":true,"replies":[{"id":"98787","content":"看要求了，我在代码检查里加限制，新来的同学立刻就能学会。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610116328,"ip_address":"","comment_id":272515,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35969843876","product_id":100068401,"comment_content":"郑老师，把一个开发人员从习惯写长函数培养到会写短函数大概需要多少时间和成本？","like_count":8,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513300,"discussion_content":"看要求了，我在代码检查里加限制，新来的同学立刻就能学会。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610116328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272352,"user_name":"dev.bin","can_delete":false,"product_type":"c1","uid":1053666,"ip_address":"","ucode":"74E7C5E37EB072","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/e2/21ac191d.jpg","comment_is_top":false,"comment_ctime":1610068254,"is_pvip":false,"replies":[{"id":"98747","content":"小步修改，小步提交。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610077287,"ip_address":"","comment_id":272352,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31674839326","product_id":100068401,"comment_content":"前人留下的一个类6000多行代码，函数没有几个，想改却改不动，改完后，别人提交之后就产生冲突，解决冲突后，别人又提交，又冲突。只改一点点，CI过不了，一周下来，没啥产出。","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513251,"discussion_content":"小步修改，小步提交。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610077287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272166,"user_name":"huaweichen","can_delete":false,"product_type":"c1","uid":1249907,"ip_address":"","ucode":"974917DE2AE92E","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/73/2183839d.jpg","comment_is_top":false,"comment_ctime":1609975565,"is_pvip":false,"replies":[{"id":"98692","content":"是的，变量名字长可能就是函数长的结果。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1609988245,"ip_address":"","comment_id":272166,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31674746637","product_id":100068401,"comment_content":"&quot;因为变量都是在这个短小的上下文里，也就不会产生那么多的命名冲突，变量名当然就可以写短一些。&quot;<br><br>这句话真的很有启发。<br><br>之前还和同事在争论，变量名太长的问题。他们说“we love long variable names, because it is very self-explanatory” 。<br>我现在可以跟他们说问题在与函数写得太长。","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513185,"discussion_content":"是的，变量名字长可能就是函数长的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609988245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2216585,"avatar":"","nickname":"杨美君","note":"","ucode":"1C23D313C4E149","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367213,"discussion_content":"不全对，有的时候我们需要使用一个长的，清楚的名字来说明这个函数是做说明事情的，不能一概而论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618295579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274427,"user_name":"斯盖丸","can_delete":false,"product_type":"c1","uid":1168504,"ip_address":"","ucode":"B881D14B028F14","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/78/66b3f2a2.jpg","comment_is_top":false,"comment_ctime":1611019902,"is_pvip":false,"replies":[{"id":"99617","content":"难道不是用框架吗？这年头为啥要用裸的JDBC呢？","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611037033,"ip_address":"","comment_id":274427,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27380823678","product_id":100068401,"comment_content":"请问一下老师，遇到JDBC读取resultset或者set一个prepared statement而列又很多时应该怎么简化？往往轻轻松松就几时行了…有什么精简优雅的缩短方法吗？","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514016,"discussion_content":"难道不是用框架吗？这年头为啥要用裸的JDBC呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611037033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1812970,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","nickname":"mgs2002","note":"","ucode":"F5931108BD509B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588159,"discussion_content":"是做游戏项目吗。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663580918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272749,"user_name":"adang","can_delete":false,"product_type":"c1","uid":1143712,"ip_address":"","ucode":"0F2ECF8B92D46B","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/a0/7dcc9212.jpg","comment_is_top":false,"comment_ctime":1610262862,"is_pvip":false,"replies":[{"id":"100411","content":"你的分析思路是对的，把一步一步拆分开来。<br><br>Java有各种 AOP，有兴趣可以看一下。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612091769,"ip_address":"","comment_id":272749,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27380066638","product_id":100068401,"comment_content":"在代码库里看到很多这样平铺直叙的代码，类似这样。<br>```<br>if 旧账号存在<br> 删除旧账号的所有权限<br> if 删除成功<br> \t将新管理员身份设置为管理员<br>\t将旧管理身份设置为普通员工<br>\tif 设置成功<br>\t\t为新管理员添加管理员权限<br>\t\tif 权限设置成功<br>\t\t\t修改企业账号为新管理员账号<br>\t\t\t\tif 修改成功<br>\t\t\t\t\t修改 redis 缓存<br>```<br>这个方法的逻辑是，转移管理员账号给一个新的管理员，这个方法大约80行的样子。<br>分析了一下，大家这样写的原因，<br>1.成员都是自己野蛮生长起来的，没有见过好的范例；<br>2.团队里没有成型的规范，即使有也没有人坚持，代码随便写，只要功能实现了就行。<br><br>像上面这样只要把各种情况顺序写进去就行了，比较简单，不用考虑太多。可这样带来的问题就是，后面维护起来就要花很大精力把逻辑搞清楚才能下手去修改。另外，像上面那样，如果中间某一步执行失败，整个方法就失败，但是前面几步的操作却不能回滚。<br><br>对这段代码的优化，可以抽取出几个小方法，如：修改新旧管理员身份，删除旧账号权限，为新管理员赋值权限，修改企业账号，修改缓存等，使代码更容易阅读。另外，可以借鉴Rails中ActiveRecord::Callbacks的封装方式使代码看上去更简洁。<br><br>上面方法是Java的一段代码，对Java不是很熟，不知道Java相关的框架中是否有类似于Rails的Callbacks封装。","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513374,"discussion_content":"你的分析思路是对的，把一步一步拆分开来。\n\nJava有各种 AOP，有兴趣可以看一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612091769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676962,"avatar":"https://static001.geekbang.org/account/avatar/00/19/96/a2/c1596dd8.jpg","nickname":"🤔","note":"","ucode":"40ACB53BF3C6B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573329,"discussion_content":"把if 删除成功 do 改成 if删除失败退出 do，应该嵌套就少很多了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653358715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027207,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ac/87/8ed5880a.jpg","nickname":"大碗","note":"","ucode":"F9CDC0C5BE48AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341500,"discussion_content":"这80行写单测就崩溃了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610438690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272729,"user_name":"首长","can_delete":false,"product_type":"c1","uid":1015091,"ip_address":"","ucode":"2AFFC2F0E5050A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/33/e2d5608b.jpg","comment_is_top":false,"comment_ctime":1610255541,"is_pvip":false,"replies":[{"id":"99058","content":"对于大多数人的问题在于，能发现的关注点太少了，能观察到的侧面就太少，拆分的粒度远远不足。所以，尝试多发现一些问题，再来说怎么组合。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610584148,"ip_address":"","comment_id":272729,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27380059317","product_id":100068401,"comment_content":"为啥是“关注点越多越好”？","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513366,"discussion_content":"对于大多数人的问题在于，能发现的关注点太少了，能观察到的侧面就太少，拆分的粒度远远不足。所以，尝试多发现一些问题，再来说怎么组合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610584148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":566739,"discussion_content":"老师，什么是“关注点”？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650757560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":513366,"ip_address":""},"score":566739,"extra":""},{"author":{"id":1018928,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8c/30/d642e01a.jpg","nickname":"zhengnachuan","note":"","ucode":"FC6CD65906BE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":570048,"discussion_content":"个人理解，关注点可以类比成相互正交的功能点，在你实现一个需求的时候思考怎么把逻辑拆到最合适的粒度。在上层函数中把相同层级的功能点写成一个个独立的函数调用，在被调用函数内部继续拆分成更下层粒度的功能点。本质上来说，函数拆分其实就是在干代码分层的事情","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651647448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":566739,"ip_address":""},"score":570048,"extra":""}]}]},{"had_liked":false,"id":273509,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1610617471,"is_pvip":true,"replies":[{"id":"99105","content":"有名的开源程序库是以什么著称的，是代码写得好吗？当然不是了，所以，它们并不是好代码的代表。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610628279,"ip_address":"","comment_id":273509,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23085453951","product_id":100068401,"comment_content":"函数不超过多少行时，别人会用一些有名的开源库来回你，这怎么办？","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513617,"discussion_content":"有名的开源程序库是以什么著称的，是代码写得好吗？当然不是了，所以，它们并不是好代码的代表。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610628279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272179,"user_name":"术子米德","can_delete":false,"product_type":"c1","uid":1898023,"ip_address":"","ucode":"382EA7E2AF0B56","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/27/c27599ae.jpg","comment_is_top":false,"comment_ctime":1609982618,"is_pvip":true,"replies":[{"id":"98800","content":"重点就是不能根据个人品味来，众口难调，一定要有一个统一的团队标准。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610153428,"ip_address":"","comment_id":272179,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23084819098","product_id":100068401,"comment_content":"🤔☕️🤔☕️🤔<br>一个函数长短与否，如果是偏好问题，其实无解<br>每个人的对于长短的偏好并不一样<br>有人喜欢短函数，可能是因为，看到大于一个屏幕的代码，就焦虑得不行，就担心自己看不懂<br>有人喜欢长函数，一个完整的业务在一个过程里，从头到尾读完，要改动就在这里改，有问题也就是这里的问题<br>说起性能，只要拿不出性能测定的手段，拿不出性能测定的数据，都是臆想成分居多，大概率只是为自己的偏好找借口<br>只要有性能测定的方法，只要有配套测试用例和自动化体系，可维护就是一个结果，代码怎么写、怎么改，都是由性能测定和测试系统来保障的<br>我遇到过不少人，喜欢短函数，这些人有个特点，都是急性子的人<br>我遇到过不少人，啥函数都能津津有味读下来，都是慢性子的人","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513191,"discussion_content":"重点就是不能根据个人品味来，众口难调，一定要有一个统一的团队标准。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610153428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305481,"user_name":"Luke","can_delete":false,"product_type":"c1","uid":1004462,"ip_address":"","ucode":"8F7DE6E7B3D74F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/53/ae/a08024b2.jpg","comment_is_top":false,"comment_ctime":1627991005,"is_pvip":false,"replies":[{"id":"110542","content":"高手也是一点点练出来的","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1628069493,"ip_address":"","comment_id":305481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18807860189","product_id":100068401,"comment_content":"很多坏味道只有先识别出来，才能有效设立改进的目标，就像郑大之前说到的，要有对于代码的品味。知道什么样子的代码是好的，否则有可能南辕北辙，适得其反就不好了。<br><br>郑大的文章特别好读，看的时候一颗心突突直跳，感觉自己被点燃了，我想这背后也离不开您对于专栏文章的一次次打磨和重构。<br><br>高手都善于将功夫用在当下，记得梁肇新在「编程高手箴言」封底上写下的一句口号：「我就是程序、程序就是我」。之前只是觉得这句话很酷，被这种「不疯魔、不成活」的态度所感染。直到后来才渐渐觉得，这里面也蕴含着铁杵磨针、水滴石穿的道理。<br>","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524399,"discussion_content":"高手也是一点点练出来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628069493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272601,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1610169634,"is_pvip":false,"replies":[{"id":"98820","content":"改变自己能改变的，让自己成长为配得上更好团队的水准。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610194615,"ip_address":"","comment_id":272601,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18790038818","product_id":100068401,"comment_content":"之前做项目时，确实经历过老师文中讲到的平铺直叙和一次加一点这种情况。回想了一下，出现这种情况的原因有以下几点：<br>1、历史遗留问题，没有可参照的范例<br>2、无高手进行代码review,项目组各种规范及工具使用不到位<br>3、自己的水平不够<br><br>前两点无法改变，第三点我可以改变，就是学了软件设计之美、设计模式之美等专栏后 培养了自己这方面的意识。另外就是关注了您的开源项目，能时不时去看看源码，赏心悦目，严格要求自己，哈哈哈哈<br>","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513319,"discussion_content":"改变自己能改变的，让自己成长为配得上更好团队的水准。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610194615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272333,"user_name":"sfqqyq","can_delete":false,"product_type":"c1","uid":2394942,"ip_address":"","ucode":"F0E237D311F867","user_header":"https://static001.geekbang.org/account/avatar/00/24/8b/3e/9f0a4ccb.jpg","comment_is_top":false,"comment_ctime":1610035558,"is_pvip":false,"replies":[{"id":"98794","content":"抽取的动作只是一个快捷键的事，抽取的意识需要培养。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610149960,"ip_address":"","comment_id":272333,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18789904742","product_id":100068401,"comment_content":"对于长函数抽取出小函数也是一个技术活。","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513243,"discussion_content":"抽取的动作只是一个快捷键的事，抽取的意识需要培养。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610149960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272305,"user_name":"Moonus","can_delete":false,"product_type":"c1","uid":1813327,"ip_address":"","ucode":"F8261DA1E8DF2C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqia9gfbDeu8RqUlSozxmnzr6micGefNs5QGehBBl23xH6V82GxYwjgFgCKIA9n6iafFVKFoxVw5fHWw/132","comment_is_top":false,"comment_ctime":1610026029,"is_pvip":true,"replies":[{"id":"98738","content":"这个角度是没问题的，只是写测试的人太少了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610060989,"ip_address":"","comment_id":272305,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18789895213","product_id":100068401,"comment_content":"从编写单元测试角度来看，1.一个长函数的测试需要Mock一堆依赖；2.长函数一定会有很多的条件分支，会加大我们的认知复杂度，代码会很难读，从而你的单元测试也会很难写，即使覆盖每一个条件分支，当业务逻辑的变更时，你可能代码只改了一行，你的所有的测试都会飘红，这是测试可能会让你难以维护。<br>在10x中郑大说过，把测试写简单，简单到一目了然，不需要证明它的正确性，那其实我们的函数也是一样，我的方法也应该尽可能的小，保证每个方法的单一职责，他只做一件事。","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513230,"discussion_content":"这个角度是没问题的，只是写测试的人太少了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610060989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308030,"user_name":"邵俊达","can_delete":false,"product_type":"c1","uid":1281460,"ip_address":"","ucode":"4B7DACE6DBCF95","user_header":"https://static001.geekbang.org/account/avatar/00/13/8d/b4/ff82483d.jpg","comment_is_top":false,"comment_ctime":1629362973,"is_pvip":false,"replies":[{"id":"111567","content":"你这是做的头脑中的推演，在实际工作中，如果拆分出 10 个动作，通常你会发现可以拆分出另外的类，所以，别怕拆，它是你的程序再进一步的前提。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629377684,"ip_address":"","comment_id":308030,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14514264861","product_id":100068401,"comment_content":"郑老师您好，对于小函数我有个疑问，比如一个动作（函数）本身可以拆分出 10 个动作，把这 10 个动作都封装成方法，那包含这 10 个动作的方法也挺长了，至少 10 行了，请问这种情况改如何处理？<br>","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525374,"discussion_content":"你这是做的头脑中的推演，在实际工作中，如果拆分出 10 个动作，通常你会发现可以拆分出另外的类，所以，别怕拆，它是你的程序再进一步的前提。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629377684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1281460,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8d/b4/ff82483d.jpg","nickname":"邵俊达","note":"","ucode":"4B7DACE6DBCF95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389690,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629381880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299288,"user_name":"dev.bin","can_delete":false,"product_type":"c1","uid":1053666,"ip_address":"","ucode":"74E7C5E37EB072","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/e2/21ac191d.jpg","comment_is_top":false,"comment_ctime":1624544466,"is_pvip":false,"replies":[{"id":"108727","content":"可能你应该想想为什么有20个枚举，也可以考虑一下是否需要一个类结构来做多态。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1624880579,"ip_address":"","comment_id":299288,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10214479058","product_id":100068401,"comment_content":"假设我有一个枚举类，里面有10个变量，我用Switch 来进行判断，一个case 加上break 就已经超过 20 (假设长函数长度设置为20)行，这样的代码应该拆分成小函数吗？如果要拆的话，应该如何拆？","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522388,"discussion_content":"可能你应该想想为什么有20个枚举，也可以考虑一下是否需要一个类结构来做多态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624880579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272385,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1610074826,"is_pvip":false,"replies":[{"id":"98786","content":"坑未来的人，也许就是自己。<br><br>其实重构现在都有工具了，几乎是无风险的，关键是意识。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610116272,"ip_address":"","comment_id":272385,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10200009418","product_id":100068401,"comment_content":"一次加一点这个，我有时候也在想这个。但是就是没人愿意主动去做这个事情.<br>1.重构时间只能自己平时解决<br>2.重构造成的风险自己担责<br>3.往后面累加对自己来说是最安全的。<br>每每想改变的时候，总是会考虑到这些因素。","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513260,"discussion_content":"坑未来的人，也许就是自己。\n\n其实重构现在都有工具了，几乎是无风险的，关键是意识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610116272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272316,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1610029181,"is_pvip":false,"replies":[{"id":"98788","content":"按代码行而非物理行计数你就不纠结了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610116444,"ip_address":"","comment_id":272316,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10199963773","product_id":100068401,"comment_content":"如果函数里面的行写得很长呢？还应不应该插入换行？如果插入换行的话就会增加行数，如果不差入换行，在看代码时就要经常移动水平滚动条","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513235,"discussion_content":"按代码行而非物理行计数你就不纠结了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610116444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343401,"user_name":"ONLY","can_delete":false,"product_type":"c1","uid":1049147,"ip_address":"","ucode":"180990E586D060","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/3b/b4a47f63.jpg","comment_is_top":false,"comment_ctime":1650817512,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5945784808","product_id":100068401,"comment_content":"请教一下：从数据库查出来的数据假如有几十个字段，然后要赋值给另一个结构体返回给前端，类似这种结构体之间赋值的代码怎么优化?","like_count":1,"discussions":[{"author":{"id":2415448,"avatar":"https://static001.geekbang.org/account/avatar/00/24/db/58/a7a0a85b.jpg","nickname":"二饼","note":"","ucode":"48120565D135F7","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574145,"discussion_content":"可以使用modelmapper这种bean映射工具。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653871727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307166,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1628918483,"is_pvip":false,"replies":[{"id":"111322","content":"是否要测试 10 个小函数，取决于这 10 个函数是否都是直接面对用户。如果 10 个都面对用户，那该测就测。麻烦不是理由，写代码都麻烦。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629113580,"ip_address":"","comment_id":307166,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5923885779","product_id":100068401,"comment_content":"另外，如果一个大函数拆成了10个小函数，那么测试时需要对这10个小函数分别测试么。测试写传参还是很麻烦","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525065,"discussion_content":"是否要测试 10 个小函数，取决于这 10 个函数是否都是直接面对用户。如果 10 个都面对用户，那该测就测。麻烦不是理由，写代码都麻烦。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629113580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296562,"user_name":"Simon","can_delete":false,"product_type":"c1","uid":1914504,"ip_address":"","ucode":"A8A2E3E57BD029","user_header":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","comment_is_top":false,"comment_ctime":1623048481,"is_pvip":true,"replies":[{"id":"107753","content":"逻辑是一样的，找出不同的逻辑封装到小函数里。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1623109314,"ip_address":"","comment_id":296562,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5918015777","product_id":100068401,"comment_content":"对于实现某种算法的函数，函数长度怎么能有效控制？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521490,"discussion_content":"逻辑是一样的，找出不同的逻辑封装到小函数里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623109314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291853,"user_name":"Kenbo","can_delete":false,"product_type":"c1","uid":2019481,"ip_address":"","ucode":"2FE19D00BD36F0","user_header":"","comment_is_top":false,"comment_ctime":1620550695,"is_pvip":false,"replies":[{"id":"105807","content":"对很多公司来说，招人的要求和写好代码是两个维度。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1620778650,"ip_address":"","comment_id":291853,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5915517991","product_id":100068401,"comment_content":"遇到过一个if里面有1500多行的函数（对应else里还有800多行）还是头部企业，明明招人比我上家严格，写出来的代码可读性却差很多。只靠开发自律还是控制不了团队的代码质量。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519584,"discussion_content":"对很多公司来说，招人的要求和写好代码是两个维度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620778650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285264,"user_name":"李叶","can_delete":false,"product_type":"c1","uid":1470449,"ip_address":"","ucode":"41B33FA8526E48","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/f1/35f9f16f.jpg","comment_is_top":false,"comment_ctime":1616717027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5911684323","product_id":100068401,"comment_content":"避免平铺直叙，抽象分离关注点，提取函数;修改记住童子军军规，防止无意识累积","like_count":1},{"had_liked":false,"id":277538,"user_name":"tarjan","can_delete":false,"product_type":"c1","uid":2025938,"ip_address":"","ucode":"AEE1B8DF951774","user_header":"","comment_is_top":false,"comment_ctime":1612448671,"is_pvip":false,"replies":[{"id":"100675","content":"提取出一个函数，像这样：<br>if (isError(code)) {<br>  ...<br>}","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612482313,"ip_address":"","comment_id":277538,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5907415967","product_id":100068401,"comment_content":"if (code == 400 || code == 401 || code == 402) { &#47;&#47; 做一些错误处理}<br><br>老师，请问这个怎么优化呢？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515085,"discussion_content":"提取出一个函数，像这样：\nif (isError(code)) {\n  ...\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612482313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272288,"user_name":"Tio Kang","can_delete":false,"product_type":"c1","uid":1509271,"ip_address":"","ucode":"841190098F8F90","user_header":"https://static001.geekbang.org/account/avatar/00/17/07/97/980d36e2.jpg","comment_is_top":false,"comment_ctime":1610016746,"is_pvip":false,"replies":[{"id":"98789","content":"啥叫函数嵌套函数？提取出去就不是这个函数的一部分了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610116505,"ip_address":"","comment_id":272288,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5904984042","product_id":100068401,"comment_content":"我理解函数的代码行数应该是函数的主逻辑，如果函数内嵌套了函数应该是可以不算在内的。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513225,"discussion_content":"啥叫函数嵌套函数？提取出去就不是这个函数的一部分了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610116505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272174,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1609980805,"is_pvip":false,"replies":[{"id":"98798","content":"用工具检查就好了，不用自己数。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1610153229,"ip_address":"","comment_id":272174,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5904948101","product_id":100068401,"comment_content":"我理解老师说的一个函数的5行和10行是指函数体吧，应该不包含函数头（函数名）和函数尾（比如大括号），所以自己数的时候要记得减去。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513189,"discussion_content":"用工具检查就好了，不用自己数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610153229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361340,"user_name":"Geek_611de6","can_delete":false,"product_type":"c1","uid":2794999,"ip_address":"广东","ucode":"6EBBF46E0950D9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/AgxRed0BUUY840uyqd88OCoIdfFLCMb6sib0PibOgj0Zxp3FceiaPNskwm1XAtxlQZqGGYicnUWnall9UG0rI6WMow/132","comment_is_top":false,"comment_ctime":1667440766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667440766","product_id":100068401,"comment_content":"30行以上代码的函数我真的不想看到，救命","like_count":0},{"had_liked":false,"id":357400,"user_name":"stars","can_delete":false,"product_type":"c1","uid":1055100,"ip_address":"陕西","ucode":"8A75D9E1909729","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/7c/25abe455.jpg","comment_is_top":false,"comment_ctime":1663226494,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663226494","product_id":100068401,"comment_content":"好多时候是函数超级长，然后author还离职了，接手后读好几天，一段一段加注释，最后在慢慢切成小函数。","like_count":0},{"had_liked":false,"id":350132,"user_name":"杯莫停","can_delete":false,"product_type":"c1","uid":1759325,"ip_address":"","ucode":"4FA1D5CBBEF702","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","comment_is_top":false,"comment_ctime":1656587357,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656587357","product_id":100068401,"comment_content":"我维护一个前同事的代码，一个类写3m的还有谁？打开编辑器就卡顿。他就是一个函数从头写到尾巴，一个try cach包住所有代码，我不知道他自己舒不舒服，反正吃亏的是我，我要来维护，做新需求。","like_count":0},{"had_liked":false,"id":347056,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1653648725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653648725","product_id":100068401,"comment_content":"把函数写短，越短越好--记下来","like_count":0},{"had_liked":false,"id":346659,"user_name":"Bumblebee","can_delete":false,"product_type":"c1","uid":2051293,"ip_address":"","ucode":"B879C8A511D08D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","comment_is_top":false,"comment_ctime":1653321734,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653321734","product_id":100068401,"comment_content":"今日收获<br><br><br>① 坚守童子军规；<br><br>② 分离关注点；","like_count":0},{"had_liked":false,"id":343270,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1650755529,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650755529","product_id":100068401,"comment_content":"课前疑惑：<br>1. 长函数对于 Code Review 带来了哪些困难？<br>2. 我在写代码时，为什么会不由自主地写出长函数？<br>3. 在项目中，遇到了哪些由长函数有直接关系的问题？<br>4. 重构长函数的方法有哪些？","like_count":0},{"had_liked":false,"id":330030,"user_name":"鐘","can_delete":false,"product_type":"c1","uid":1518535,"ip_address":"","ucode":"0106652D5F7BD9","user_header":"https://static001.geekbang.org/account/avatar/00/17/2b/c7/9c8647c8.jpg","comment_is_top":false,"comment_ctime":1641738685,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641738685","product_id":100068401,"comment_content":"補充上個問題: 切成小函數的問題<br>我感覺是釐清資料流程或者是變數的變化情形就變得很複雜或者不好釐清<br>某個變數產生了意料之外的值, 是哪個函式動到的?","like_count":0},{"had_liked":false,"id":330027,"user_name":"鐘","can_delete":false,"product_type":"c1","uid":1518535,"ip_address":"","ucode":"0106652D5F7BD9","user_header":"https://static001.geekbang.org/account/avatar/00/17/2b/c7/9c8647c8.jpg","comment_is_top":false,"comment_ctime":1641738451,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1641738451","product_id":100068401,"comment_content":"將函數切小的範例, 老師的意思是否和 clean code 第三章的代碼 3.7 一樣?<br>如果函數切小了之後, 看代碼感覺就要一直在函數之間跳來跳去, 這樣是否反而比較不好看? 或者說我對於這麼多的函數的順序要怎麼編排會比較好看感到有點困惑, 可能的話會是希望相關的邏輯都被放在一起<br>","like_count":0,"discussions":[{"author":{"id":1187021,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1c/cd/8d552516.jpg","nickname":"Gojustforfun","note":"","ucode":"7513A40F27344F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559955,"discussion_content":"小函数的名字起的好，在大函数里就能一次性看完整个业务逻辑（这是站在What层次，干了什么），但你想知道每个小函数具体是怎么干的（HOW层次）再进去看就好了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649080170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316466,"user_name":"芒果少侠","can_delete":false,"product_type":"c1","uid":1350159,"ip_address":"","ucode":"98D0BBB52BB80F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9a/0f/da7ed75a.jpg","comment_is_top":false,"comment_ctime":1634319536,"is_pvip":true,"replies":[{"id":"114632","content":"Go 一直是以简洁著称的，而 Java 是以啰嗦闻名的。如果 Go 的标准比 Java 高，似乎完全不符合我们的认知。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1634435837,"ip_address":"","comment_id":316466,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634319536","product_id":100068401,"comment_content":"对于go语言的语法，如果结构体field，定义一个结构体所占的代码行数也会变多。所以，老师我觉得go的长函数阈值应该是稍微宽一点的。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528390,"discussion_content":"Go 一直是以简洁著称的，而 Java 是以啰嗦闻名的。如果 Go 的标准比 Java 高，似乎完全不符合我们的认知。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634435837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307165,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1628918232,"is_pvip":false,"replies":[{"id":"111579","content":"参数多，就封装参数对象，参见 06 讲。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1629417185,"ip_address":"","comment_id":307165,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628918232","product_id":100068401,"comment_content":"拆分类道函数，则会涉及到函数传参有时候很多的问题，如何解决呢","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525064,"discussion_content":"参数多，就封装参数对象，参见 06 讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629417185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306999,"user_name":"阿姆斯壮","can_delete":false,"product_type":"c1","uid":1265599,"ip_address":"","ucode":"87D5923D639CD6","user_header":"https://static001.geekbang.org/account/avatar/00/13/4f/bf/6584bdeb.jpg","comment_is_top":false,"comment_ctime":1628821998,"is_pvip":false,"replies":[{"id":"111200","content":"恭喜你的进步！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1628855438,"ip_address":"","comment_id":306999,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628821998","product_id":100068401,"comment_content":"一开开始看到校长说，一个函数不超过10行代码。内心其实是不服的。怎么可能。然后我运用了校长教的方法，把自己当前代码改了一遍。一看，卧槽。没有一个函数超过5行。还是自己的认知限制了自己。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525011,"discussion_content":"恭喜你的进步！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628855438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}