{"id":420078,"title":"05 | 调度系统：如何把握分布式计算的精髓？","content":"<p>你好，我是吴磊。</p><p>在上一讲，我们通过“包工头与施工工人”的例子，初步认识了Spark进程模型中的Driver和Executors、以及它们之间的交互关系。Driver负责解析用户代码、构建计算流图，然后将计算流图转化为分布式任务，并把任务分发给集群中的Executors交付运行。</p><p>不过，你可能会好奇：“对于给定的用户代码和相应的计算流图，Driver是怎么把计算图拆解为分布式任务，又是按照什么规则分发给Executors的呢？还有，Executors具体又是如何执行分布式任务的呢？”</p><p>我们之前一再强调，<strong>分布式计算的精髓，在于如何把抽象的计算图，转化为实实在在的分布式计算任务，然后以并行计算的方式交付执行</strong>。深入理解分布式计算，是我们做好大数据开发的关键和前提，它能有效避免我们掉入“单机思维”的陷阱，同时也能为性能导向的开发奠定坚实基础。</p><p>而上面的这一系列问题，恰恰是我们吃透分布式计算的关键所在。因此，今天这一讲，我们就顺着这些问题，一起去深入探究Spark调度系统，进而弄清楚分布式计算的来龙去脉。</p><h2>角色划分与斯巴克建筑集团</h2><p>在上一讲，我们通过“包工头与施工工人”的类比、以及Word Count的示例，其实已经大致厘清了Spark分布式任务调度的核心环节与关键步骤。今天这一讲的核心任务，就是带你去深入其中的每一个环节，做到“既见森林、也见树木”。这里咱们不妨先把这些环节和涉及的组件梳理出来，从而让你在整体上有一个清晰的把握。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/e7/1e/e743cf687bb02bfec8c6ffebbe7d4a1e.jpg?wh=1452x806\" alt=\"图片\" title=\"Spark调度系统关键步骤与核心组件\"></p><p>不难发现，表中的步骤与组件众多，要是照本宣科地去讲调度系统，先别说你可能看着看着就开始犯困了，就连我自己，也可能写着写着就睡着了。因此，咱们不妨把这些环节与组件融入到一个故事中去，让你像读小说一样，在捧腹之余弄懂Spark调度系统。</p><p>话说很久以前，美国有一家名扬海内外的建筑集团，名为“斯巴克（Spark）”。这家建筑集团规模庞大，设有一个总公司（Driver），和多个分公司（Executors）。斯巴克公司的主要服务对象是建筑设计师（开发者），建筑设计师负责提供设计图纸（用户代码、计算图），而斯巴克公司的主营业务是将图纸落地、建造起一栋栋高楼大厦。</p><p>要完成主营业务，集团公司需要招聘能够看懂图纸、并将其转化为建筑项目的架构师，因此斯巴克公司挖角了行业知名架构师“戴格”（DAGScheduler）。集团公司给戴格安排的职位是总公司的一把手，同时要求两位创始元老“塔斯克”和“拜肯德”全力配合戴格的工作。</p><p>听到这里，你肯定会问“塔斯克”和“拜肯德”是谁呢？</p><p>塔斯克（TaskScheduler）一毕业就加入了斯巴克公司，现任总公司施工经理，成功指挥完成了多个大大小小的工程项目，业绩非常突出，深得公司赏识。拜肯德（SchedulerBackend）和塔斯克在上大学的时候就是上下铺，关系好得穿一条裤子，现任总公司人力资源总监，负责与分公司协调、安排人力资源。从公司的安排来看，三位主管的分工还是比较明确的。</p><p><img src=\"https://static001.geekbang.org/resource/image/43/7a/43cff78db9dfc211bb7b15b1c0ea6e7a.jpg?wh=1587x572\" alt=\"图片\" title=\"塔斯克公司关键人物与核心职责\"></p><p>之所以说塔斯克（TaskScheduler）和拜肯德（SchedulerBackend）是公司元老，原因在于，在SparkContext / SparkSession的初始化中，TaskScheduler和SchedulerBackend是最早、且同时被创建的调度系统组件。这二者的关系非常微妙：SchedulerBackend在构造方法中引用TaskScheduler，而TaskScheduler在初始化时会引用SchedulerBackend。</p><p>值得一提的是，SchedulerBackend组件的实例化，取决于开发者指定的Spark MasterURL，也就是我们使用spark-shell（或是spark-submit）时指定的–master 参数，如“–master spark://ip:host”就代表Standalone 部署模式，“–master yarn”就代表YARN 模式等等。</p><p>不难发现，SchedulerBackend 与资源管理器（Standalone、YARN、Mesos等）强绑定，是资源管理器在 Spark 中的代理。其实硬件资源与人力资源一样，都是“干活儿的”。所以，如果我们用集团公司的人力资源来类比Spark集群的硬件资源，那么“拜肯德”就是名副其实的人力资源总监。</p><p>从全局视角来看，DAGScheduler是任务调度的发起者，DAGScheduler以TaskSet为粒度，向TaskScheduler提交任务调度请求。TaskScheduler在初始化的过程中，会创建任务调度队列，任务调度队列用于缓存 DAGScheduler提交的TaskSets。TaskScheduler结合SchedulerBackend提供的 WorkerOffer，按照预先设置的调度策略依次对队列中的任务进行调度。</p><p><img src=\"https://static001.geekbang.org/resource/image/49/2f/4978695a7560ab08f3e5fd08b4ee612f.jpg?wh=1920x792\" alt=\"图片\" title=\"Spark调度系统全局视角\"></p><p>简而言之，DAGScheduler手里有“活儿”，SchedulerBackend手里有“人力”，TaskScheduler的核心职能，就是把合适的“活儿”派发到合适的“人”的手里。由此可见，TaskScheduler承担的是承上启下、上通下达的关键角色，这也正是我们将“塔斯克”视为斯巴克建筑公司元老之一的重要原因。</p><p>那么，了解了这三个主管的角色职责，我们接下来就来详细说说，他们是怎么各自完成自己的工作的。</p><h3>总架戴格：DAGScheduler</h3><p>回到我们的故事里，戴格在两位元老的协助下，工作开展得还算顺利，然而，冰层之下，暗流涌动，作为一名空降的领导，戴老板还需亲自“露两手”，才能赢得平级的认可与信任。</p><p>作为集团公司的“总架”（总架构师），戴格的核心职责，是把计算图DAG拆分为执行阶段Stages，Stages指的是不同的运行阶段，同时还要负责把Stages转化为任务集合TaskSets，也就是把“建筑图纸”转化成可执行、可操作的“建筑项目”。</p><p>用一句话来概括从 DAG 到 Stages 的拆分过程，那就是：<strong>以 Actions 算子为起点，从后向前回溯 DAG，以 Shuffle 操作为边界去划分 Stages。</strong></p><p>在<a href=\"https://time.geekbang.org/column/article/417164\">第2讲</a>介绍编程模型的时候，我们以Word Count为例，提到Spark作业的运行分为两个环节，第一个是以惰性的方式构建计算图，第二个则是通过Actions算子触发作业的从头计算：</p><p><img src=\"https://static001.geekbang.org/resource/image/6f/7b/6f82b4a35cdfb526d837d23675yy477b.jpg?wh=1920x472\" alt=\"图片\" title=\"Word Count作业的两个环节\"></p><p>对于图中的第二个环节，Spark在实际运行的过程中，会把它再细化为两个步骤。<strong>第一个步骤，就是以Shuffle为边界，从后向前以递归的方式，把逻辑上的计算图DAG，转化成一个又一个Stages。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/24/1c/249eb09407421838782f2515f09yy01c.jpg?wh=1920x534\" alt=\"图片\" title=\"\n第一步：递归创建Stages\"></p><p>我们还是以Word Count为例，Spark以take算子为起点，依次把DAG中的RDD划入到第一个Stage，直到遇到reduceByKey算子。由于reduceByKey算子会引入Shuffle，因此第一个Stage创建完毕，且只包含wordCounts这一个RDD。接下来，Spark继续向前回溯，由于未曾碰到会引入Shuffle的算子，因此它把“沿途”所有的RDD都划入了第二个Stage。</p><p>在Stages创建完毕之后，就到了触发计算的第二个步骤：Spark<strong>从后向前，以递归的方式，依次提请执行所有的Stages</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/61/d3/61f394b4bc31af6847944911032119d3.jpg?wh=1920x503\" alt=\"图片\" title=\"第二步：递归提请执行创建好的Stages\"></p><p>具体来说，在Word Count的例子中，DAGScheduler最先提请执行的是Stage1。在提交的时候，DAGScheduler发现Stage1依赖的父Stage，也就是Stage0，还没有执行过，那么这个时候它会把Stage1的提交动作压栈，转而去提请执行Stage0。当Stage0执行完毕的时候，DAGScheduler通过出栈的动作，再次提请执行Stage 1。</p><p>对于提请执行的每一个Stage，DAGScheduler根据Stage内RDD的partitions属性创建分布式任务集合TaskSet。TaskSet包含一个又一个分布式任务Task，RDD有多少数据分区，TaskSet就包含多少个Task。换句话说，Task与RDD的分区，是一一对应的。</p><p>你可能会问：“Task代表的是分布式任务，不过它具体是什么呢？”要更好地认识Task，我们不妨来看看它的关键属性。</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/6b/f69d0f189b666c989679ba4d8f7c856b.jpg?wh=1605x277\" alt=\"图片\" title=\"Task对象的重要属性\"></p><p>在上表中，stageId、stageAttemptId标记了Task与执行阶段Stage的所属关系；taskBinary则封装了隶属于这个执行阶段的用户代码；partition就是我们刚刚说的RDD数据分区；locs属性以字符串的形式记录了该任务倾向的计算节点或是Executor ID。</p><p>不难发现，taskBinary、partition和locs这三个属性，一起描述了这样一件事情：Task应该在哪里（locs）为谁（partition）执行什么任务（taskBinary）。</p><p>到这里，我们讲完了戴格的职责，让我们来一起简单汇总一下，戴格指代的是DAGScheduler，DAGScheduler的主要职责有三个：</p><ul>\n<li>根据用户代码构建DAG；</li>\n<li>以Shuffle为边界切割Stages；</li>\n<li>基于Stages创建TaskSets，并将TaskSets提交给TaskScheduler请求调度。</li>\n</ul><p>现在，戴格不辱使命，完成了“建筑图纸”到“建筑项目”的转化，接下来，他需要把这些“活儿”下派给塔斯克，由塔斯克进一步完成任务的委派。</p><p><img src=\"https://static001.geekbang.org/resource/image/25/40/25404e6dfb5b3b5d5e6f319e16232440.jpg?wh=1920x712\" alt=\"图片\" title=\"Spark调度系统全局视角：戴格的职责\"></p><p>不过，对于塔斯克来说，要想把这些“活儿”委派出去，他得先摸清楚集团内有多少“适龄劳动力”才行。要做到这一点，他必须仰仗死党：拜肯德的帮忙。</p><h3>拜肯德：SchedulerBackend</h3><p>作为集团公司的人力资源总监，拜肯德的核心职责，就是实时汇总并掌握全公司的人力资源状况。前面我们讲了，全公司的人力资源对应的就是Spark的计算资源。对于集群中可用的计算资源，SchedulerBackend用一个叫做ExecutorDataMap的数据结构，来记录每一个计算节点中Executors的资源状态。</p><p>这里的ExecutorDataMap是一种HashMap，它的Key是标记 Executor 的字符串，Value是一种叫做ExecutorData的数据结构。ExecutorData用于封装Executor的资源状态，如RPC地址、主机地址、可用CPU核数和满配CPU核数等等，它相当于是对Executor做的“资源画像”。</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/ac/e50055d90d3b1c271e4ab97b1ddee6ac.jpg?wh=1920x729\" alt=\"图片\" title=\"ExecutorDataMap映射表\"></p><p>有了ExecutorDataMap这本“人力资源小册子”，对内，SchedulerBackend可以就Executor做“资源画像”；对外，SchedulerBackend以WorkerOffer为粒度提供计算资源。其中，WorkerOffer封装了Executor ID、主机地址和CPU核数，它用来表示一份可用于调度任务的空闲资源。</p><p>显然，基于Executor资源画像，SchedulerBackend可以同时提供多个WorkerOffer用于分布式任务调度。WorkerOffer这个名字起得很传神，Offer的字面意思是公司给你提供的工作机会，到了Spark调度系统的上下文，它就变成了使用硬件资源的机会。</p><p><img src=\"https://static001.geekbang.org/resource/image/59/e7/59a078cfcd4d98cfaf0cf8e89650f0e7.jpg?wh=1920x724\" alt=\"图片\" title=\"Spark调度系统全局视角：拜肯德的职责\"></p><p>你可能会好奇，坐镇总公司的拜肯德，对于整个集团的人力资源，他是怎么做到足不出户就如数家珍的？一个篱笆三个桩，一个好汉三个帮。仅凭拜肯德一己之力，自然是力不从心，幕后功臣实际上是驻扎在分公司的一众小弟们：ExecutorBackend。</p><p>SchedulerBackend与集群内所有Executors中的ExecutorBackend保持周期性通信，双方通过LaunchedExecutor、RemoveExecutor、StatusUpdate等消息来互通有无、变更可用计算资源。拜肯德正是通过这些小弟发送的“信件”，来不停地更新自己手中的那本小册子，从而对集团人力资源了如指掌。</p><p><img src=\"https://static001.geekbang.org/resource/image/59/e7/59a078cfcd4d98cfaf0cf8e89650f0e7.jpg?wh=1920x724\" alt=\"图片\" title=\"Spark调度系统全局视角：拜肯德的职责\"></p><h3>塔斯克：TaskScheduler</h3><p>一把手戴格有“活儿”，三把手拜肯德出“人力”，接下来，终于轮到牵线搭桥的塔斯克出马了。作为施工经理，塔斯克的核心职责是，给定拜肯德提供的“人力”，遴选出最合适的“活儿”并派发出去。而这个遴选的过程，就是任务调度的核心所在，如下图步骤3所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/fa/ae/fa880f590a48f12b671dbb6be2d4beae.jpg?wh=1920x678\" alt=\"图片\" title=\"Spark调度系统全局视角：塔斯克的职责\"></p><p>那么问题来了，对于SchedulerBackend提供的一个个WorkerOffer，TaskScheduler是依据什么规则来挑选Tasks的呢？</p><p>用一句话来回答，对于给定的WorkerOffer，<strong>TaskScheduler是按照任务的本地倾向性，来遴选出TaskSet中适合调度的Tasks。</strong>这是什么意思呢？听上去比较抽象，我们还是从DAGScheduler在Stage内创建任务集TaskSet说起。</p><p>我们刚刚说过，Task与RDD的partitions是一一对应的，在创建Task的过程中，DAGScheduler会根据数据分区的物理地址，来为Task设置locs属性。locs属性记录了数据分区所在的计算节点、甚至是Executor进程ID。</p><p>举例来说，当我们调用textFile API从HDFS文件系统中读取源文件时，Spark会根据HDFS NameNode当中记录的元数据，获取数据分区的存储地址，例如node0:/rootPath/partition0-replica0，node1:/rootPath/partition0-replica1和node2:/rootPath/partition0-replica2。</p><p>那么，DAGScheduler在为该数据分区创建Task0的时候，会把这些地址中的计算节点记录到Task0的locs属性。</p><p>如此一来，当TaskScheduler需要调度Task0这个分布式任务的时候，根据Task0的locs属性，它就知道：“Task0所需处理的数据分区，在节点node0、node1、node2上存有副本，因此，如果WorkOffer是来自这3个节点的计算资源，那对Task0来说就是投其所好”。</p><p>从这个例子我们就能更好地理解，每个任务都是自带<strong>本地倾向性</strong>的，换句话说，每个任务都有自己的“调度意愿”。</p><p>回到斯巴克建筑集团的类比，就好比是某个“活儿”，并不是所有人都能干，而是只倾向于让某些人来做，因为他们更专业。比如砌墙这件事，更倾向于给工龄3年以上的瓦工来做；而吊顶，则更倾向于给经验超过5年的木工来做，诸如此类。</p><p>像上面这种定向到计算节点粒度的本地性倾向，Spark中的术语叫做NODE_LOCAL。除了定向到节点，Task还可以定向到进程（Executor）、机架、任意地址，它们对应的术语分别是PROCESS_LOCAL、RACK_LOCAL和ANY。</p><p>对于倾向PROCESS_LOCAL的Task来说，它要求对应的数据分区在某个进程（Executor）中存有副本；而对于倾向RACK_LOCAL的Task来说，它仅要求相应的数据分区存在于同一机架即可。ANY则等同于无定向，也就是Task对于分发的目的地没有倾向性，被调度到哪里都可以。</p><p>下图展示的是，TaskScheduler依据本地性倾向，依次进行任务调度的运行逻辑：</p><p><img src=\"https://static001.geekbang.org/resource/image/49/6b/495d8ebf85758b4ba5daa5e562da736b.jpg?wh=1920x695\" alt=\"图片\" title=\"TaskScheduler依据本地性倾向依次进行任务调度\"></p><p>不难发现，从PROCESS_LOCAL、NODE_LOCAL、到RACK_LOCAL、再到ANY，Task的本地性倾向逐渐从严苛变得宽松。TaskScheduler接收到WorkerOffer之后，也正是按照这个顺序来遍历TaskSet中的Tasks，优先调度本地性倾向为PROCESS_LOCAL的Task，而NODE_LOCAL次之，RACK_LOCAL为再次，最后是ANY。</p><p>你可能会问：“Spark区分对待不同的本地倾向性，它的初衷和意图是什么呢？”实际上，不同的本地性倾向，本质上是用来区分计算（代码）与数据之间的关系。</p><p><strong>Spark调度系统的核心思想，是“数据不动、代码动”。</strong>也就是说，在任务调度的过程中，为了完成分布式计算，Spark倾向于让数据待在原地、保持不动，而把计算任务（代码）调度、分发到数据所在的地方，从而消除数据分发引入的性能隐患。毕竟，相比分发数据，分发代码要轻量得多。</p><p>本地性倾向则意味着代码和数据应该在哪里“相会”，PROCESS_LOCAL是在JVM进程中，NODE_LOCAL是在节点内，RACK_LOCAL是不超出物理机架的范围，而ANY则代表“无所谓、不重要”。</p><p><img src=\"https://static001.geekbang.org/resource/image/2b/0a/2b3864c2f01fc9916005a1b5d6e08d0a.jpg?wh=1920x763\" alt=\"图片\" title=\"\nSpark调度系统全局视角：塔斯克的职责\"></p><p>好啦，到此为止，结合WorkerOffer与任务的本地性倾向，塔斯克TaskScheduler挑选出了适合调度的“活儿”：Tasks。接下来，TaskScheduler就把这些Tasks通过LaunchTask消息，发送给好基友SchedulerBackend。人力资源总监SchedulerBackend拿到这些活儿之后，同样使用LaunchTask消息，把活儿进一步下发给分公司的小弟：ExecutorBackend。</p><p>那么小弟ExecutorBackend拿到活之后，是怎么工作的呢？我们接着往下看吧！</p><h3>付诸执行：ExecutorBackend</h3><p>作为分公司的人力资源主管，ExecutorBackend拿到“活儿”之后，随即把活儿派发给分公司的建筑工人。这些工人，就是Executors线程池中一个又一个的CPU线程，每个线程负责处理一个Task。</p><p>每当Task处理完毕，这些线程便会通过ExecutorBackend，向Driver端的SchedulerBackend发送StatusUpdate事件，告知Task执行状态。接下来，TaskScheduler与SchedulerBackend通过接力的方式，最终把状态汇报给DAGScheduler，如图中步骤7、8、9所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/a9/c92eca7d5de4c72d478183b187322da9.jpg?wh=1920x742\" alt=\"图片\" title=\"Spark调度系统全局视角：任务分发与执行\"></p><p>对于同一个TaskSet当中的Tasks来说，当它们分别完成了任务调度与任务执行这两个环节时，也就是上图中步骤1到步骤9的计算过程，Spark调度系统就完成了DAG中某一个Stage的任务调度。</p><p>不过，故事到这里并未结束。我们知道，一个DAG会包含多个Stages，一个Stage的结束即宣告下一个Stage的开始，而这也是戴格起初将DAG划分为Stages的意义所在。只有当所有的Stages全部调度、执行完毕，才表示一个完整的Spark作业宣告结束。</p><p>路遥知马力，在一起合作了一个又一个建筑项目之后，空降老大戴格终于赢得了元老塔斯克和拜肯德的信任与认可，坐稳了斯巴克建筑集团的头把交椅。来日可期，戴格的前景一片光明。</p><h2>重点回顾</h2><p>今天这一讲，我们用斯巴克建筑集团的故事，介绍了Spark调度系统的工作原理。对于调度系统的工作流程，你需要掌握表格中的5个关键环节：</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/1e/e743cf687bb02bfec8c6ffebbe7d4a1e.jpg?wh=1452x806\" alt=\"图片\"></p><p>具体说来，任务调度分为如下5个步骤：</p><p>1.DAGScheduler以Shuffle为边界，将开发者设计的计算图DAG拆分为多个执行阶段Stages，然后为每个Stage创建任务集TaskSet。<br>\n2.SchedulerBackend通过与Executors中的ExecutorBackend的交互来实时地获取集群中可用的计算资源，并将这些信息记录到ExecutorDataMap数据结构。<br>\n3.与此同时，SchedulerBackend根据ExecutorDataMap中可用资源创建WorkerOffer，以WorkerOffer为粒度提供计算资源。<br>\n4.对于给定WorkerOffer，TaskScheduler结合TaskSet中任务的本地性倾向，按照PROCESS_LOCAL、NODE_LOCAL、RACK_LOCAL和ANY的顺序，依次对TaskSet中的任务进行遍历，优先调度本地性倾向要求苛刻的Task。<br>\n5.被选中的Task由TaskScheduler传递给SchedulerBackend，再由SchedulerBackend分发到Executors中的ExecutorBackend。Executors接收到Task之后，即调用本地线程池来执行分布式任务。</p><p>今天的内容就是这些，调度系统是分布式计算系统的核心，掌握了Spark任务调度的来龙去脉，你也就把握住了Spark分布式计算引擎的精髓，这会为你开发出高性能的Spark分布式应用打下坚实基础。</p><h2>每课一练</h2><p>课程的最后，我来给你留一道练习题。请你想一想，DAGScheduler如何得知一个Stage中所有的Tasks都已调度、执行完毕，然后才决定开始调度DAG中的下一个Stage？</p><p>欢迎你在评论区回答这个问题。如果你觉得这一讲对你有所帮助，也欢迎你把它分享给更多的朋友和同事。我在评论区等你，咱们下一讲见！</p>","neighbors":{"left":{"article_title":"04 | 进程模型与分布式部署：分布式计算是怎么回事？","id":419200},"right":{"article_title":"06 | Shuffle管理：为什么Shuffle是性能瓶颈？","id":420399}},"comments":[{"had_liked":false,"id":312940,"user_name":"Geek_2dfa9a","can_delete":false,"product_type":"c1","uid":1435535,"ip_address":"","ucode":"B5FE7971F5E773","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epGTSTvn7r4ibk1PuaUrSvvLdviaLcne50jbvvfiaxKkM5SLibeP6jibA2bCCQBqETibvIvcsOhAZlwS8kQ/132","comment_is_top":true,"comment_ctime":1632132409,"is_pvip":false,"replies":[{"id":"113452","content":"满分💯 + 置顶🔝，👍👍👍<br><br>分析得相当到位&#47;深入！赞赞赞！<br><br>感谢老弟认可~ 没问题，后续把字体调大些~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1632326747,"ip_address":"","comment_id":312940,"utype":1}],"discussion_count":4,"race_medal":0,"score":"9.2233721630409994e+18","product_id":100090001,"comment_content":"回答这个流程比较长哈，没有点开源源码阅读经验还真不好答哈，我这里都是自己的理解，如有异议欢迎讨论。<br>以老师的WordCount为例，首先stage分为两种：ResultStage，ShuffleMapStage。<br>ResultStage是啥呢就是处理Action动作的，一般也就是最后一个Stage（当然一个driver里也可能有多个Action，所以ResultStage也可能有多个，<br>这里简单点，WordCount例子里就是Stage1）。<br>ShuffleMapStage是啥呢，就是产生一个shuffle文件的stage，对应WordCount的Stage0。<br>为啥要分这么两类呢，因为你DAGScheduler就是根据是否shuffle倒推出来的stage嘛。这里多提一句，多个Job会共享Stage，这样就可以避免重复计算提升效率。<br>再根据老师讲的每个Stage里会根据RDD的partitions创建Task这段结合源码发现Task也有两种：ResultTask和ShuffleMapTask，对应的是Stage的两种类型。<br><br>接下来分析下DAGScheduler怎么感知Task的执行状态，DAGScheduler内部有一个线程eventProcessLoop，线程使用了生产者消费者模式，<br>里面有一个LinkedBlockingDeque队列，生产者TaskSetManager（可以忽略，理解为一个线程即可）发送给DAGScheduler的各种Task的event，<br>消费者eventProcessLoop把event取出来然后委托给DAGScheduler处理，其中对应Task完成的逻辑在方法handleTaskCompletion(event: <br>CompletionEvent)中。既然问的是怎么知道当前Stage已经运行完成，可以运行下一个Stage，那当前Stage肯定不是ResultStage，<br>因此在handleTaskCompletion找到处理ShuffleMapTask的event的逻辑，具体逻辑为：先找到executor的ID标志execId，<br>校验execId是否为下发的Executor（以防伪造的event）然后标记ShuffleMapTask的结果可用，然后检查当前ShuffleMapStage是否还有没处理的Task，<br>如果没有的话说明该Stage完成，最后submitWaitingChildStages提交等待中的后续Stage。<br><br>这里使用的eventProcessLoop生产者消费者模式比较巧妙，生产者可能有多个线程（没进一步确认，有可能是1&#47;n个），但是消费者是单线程的，<br>生产者也不直接修改DAGScheduler内部的成员，只通过丢event给线程安全的LinkedBlockingDeque，这样就保证了没有数据竞争。<br><br>最后，老师讲的非常清楚，看了这门课后我买了老师的另一门Spark性能调优，在这里感谢老师。最后提一句，您配图里的字能调大点嘛，字太小了。","like_count":30,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527172,"discussion_content":"满分💯 + 置顶🔝，👍👍👍\n\n分析得相当到位/深入！赞赞赞！\n\n感谢老弟认可~ 没问题，后续把字体调大些~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632326747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2861352,"avatar":"","nickname":"阿狸弟弟的包子店","note":"","ucode":"0CCF598B029075","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548513,"discussion_content":"Job又是啥？吴老师没提到呀？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643245743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1048441,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/79/f400c4d1.jpg","nickname":"douge","note":"","ucode":"A6EB1AA3D53516","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2861352,"avatar":"","nickname":"阿狸弟弟的包子店","note":"","ucode":"0CCF598B029075","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589732,"discussion_content":"就是action，action不同，前面的transform相同，所以可以共享中间结果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665292221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":548513,"ip_address":"山东"},"score":589732,"extra":""}]},{"author":{"id":1096652,"avatar":"https://static001.geekbang.org/account/avatar/00/10/bb/cc/fac12364.jpg","nickname":"xxx","note":"","ucode":"E79CEA70430449","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544543,"discussion_content":"硬核啊，直接上源码!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641556031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318548,"user_name":"welldo","can_delete":false,"product_type":"c1","uid":1598796,"ip_address":"","ucode":"D38E75364CD2E3","user_header":"https://static001.geekbang.org/account/avatar/00/18/65/4c/f7f86496.jpg","comment_is_top":false,"comment_ctime":1635328617,"is_pvip":false,"replies":[{"id":"115570","content":"老弟头像不错~<br><br>回答你的问题：理解得简直太到位了！非常对！就是这个意思~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1635424741,"ip_address":"","comment_id":318548,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23110165097","product_id":100090001,"comment_content":"老师,<br>根据“当 TaskScheduler 需要调度 Task0 这个任务时，根据 Task0 的 locs 属性，它就知道。。。”这段话，<br>和你回复unknown同学的“仅仅知道数据在某个机架内（一个机架包含多台机器）”这段话，<br>结合起来，意思是不是：<br><br>task对于它要处理的数据在哪里，<br>有时候精确知道（在某个进程内或某个节点内）；<br>有时候模糊知道（在某个机架内）；有时候不知道（any），<br>并且标注在它的locs属性里，<br>“精确知道的”task，就只挑选符合要求的offer；<br>“模糊知道的”task，就挑选大致符合要求的offer；<br>“不知道的”task，就随便选一个offer。<br><br>老师，请问我的理解对吗？<br><br><br><br><br><br><br><br><br><br>","like_count":5,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529294,"discussion_content":"老弟头像不错~\n\n回答你的问题：理解得简直太到位了！非常对！就是这个意思~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635424741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2845437,"avatar":"","nickname":"Geek5763","note":"","ucode":"D4C8CAEABAA925","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":542420,"discussion_content":"如果不知道数据具体在哪个节点，怎么把代码发送到这个节点呢 这块是怎么处理的呢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640746432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":529294,"ip_address":""},"score":542420,"extra":""}]}]},{"had_liked":false,"id":312900,"user_name":"Jordan·李威","can_delete":false,"product_type":"c1","uid":1149793,"ip_address":"","ucode":"4ACC42374723EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/8b/61/df00ebc5.jpg","comment_is_top":false,"comment_ctime":1632110544,"is_pvip":false,"replies":[{"id":"113451","content":"喜欢就好~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1632326390,"ip_address":"","comment_id":312900,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18811979728","product_id":100090001,"comment_content":"总公司和分公司的工作任务和人力资源分配调度的例子太匹配了。","like_count":4,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527152,"discussion_content":"喜欢就好~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632326390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331902,"user_name":"赌神很低调","can_delete":false,"product_type":"c1","uid":1168545,"ip_address":"","ucode":"1066778E1EDF26","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/a1/8bc8e7e1.jpg","comment_is_top":false,"comment_ctime":1642859862,"is_pvip":true,"replies":[{"id":"121405","content":"好问题，是这样的，资源调度和任务调度是分开的。<br><br>资源调度主要看哪些节点可以启动executors，是否能满足executors所需的cpu数量要求，这个时候，不会考虑任务、数据本地性这些因素。<br><br>资源调度完成之后，在任务调度阶段，spark负责计算每个任务的本地性，效果就是task明确知道自己应该调度到哪个节点，甚至是哪个executors。最后scheduler Backend会把task代码，分发到目标节点的目标executors，完成任务调度，实现数据不动代码动。<br><br>所以，二者是独立的，不能混为一谈哈～","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1643189502,"ip_address":"","comment_id":331902,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14527761750","product_id":100090001,"comment_content":"老师好，文中说task任务分发通过数据本地性找到合适的executor，想了解executor进程是根据数据所在的节点创建的吗？否则不是很大几率都找不到合适的executor?","like_count":3,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548428,"discussion_content":"好问题，是这样的，资源调度和任务调度是分开的。\n\n资源调度主要看哪些节点可以启动executors，是否能满足executors所需的cpu数量要求，这个时候，不会考虑任务、数据本地性这些因素。\n\n资源调度完成之后，在任务调度阶段，spark负责计算每个任务的本地性，效果就是task明确知道自己应该调度到哪个节点，甚至是哪个executors。最后scheduler Backend会把task代码，分发到目标节点的目标executors，完成任务调度，实现数据不动代码动。\n\n所以，二者是独立的，不能混为一谈哈～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643189502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321330,"user_name":"pythonbug","can_delete":false,"product_type":"c1","uid":1487274,"ip_address":"","ucode":"1A70CA92FFF8EB","user_header":"https://wx.qlogo.cn/mmopen/vi_32/wgMMrp1hvSB3E30KqZvMsj3KQdAI3T1uQM77LT7hZ65nVSjPGRg3AbUOyiahnssA6AIT5PAkyHFmlTBzUH9gdyQ/132","comment_is_top":false,"comment_ctime":1636794681,"is_pvip":true,"replies":[{"id":"116843","content":"精辟！！！赞👍，逻辑上就是这个意思~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1637058507,"ip_address":"","comment_id":321330,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14521696569","product_id":100090001,"comment_content":"老师好，TaskScheduler调度优先级那里是不是可以这样理解：<br>for 优先级 &lt;- PROCESS_LOCAL to ANY {<br>  for task &lt;- task0 to taskn{<br>    if task0.locs == workoffer 分配 else 跳过<br>  }<br>}","like_count":4,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530357,"discussion_content":"精辟！！！赞👍，逻辑上就是这个意思~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637058507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344656,"user_name":"星潼","can_delete":false,"product_type":"c1","uid":1008546,"ip_address":"","ucode":"D7C30CD2BEC78D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/a2/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1651713198,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10241647790","product_id":100090001,"comment_content":"感谢老师的精彩讲解，收获满满。但对于SchedulerBackend管理Executors部分有些不理解，想请教一下老师。<br>凭我对Hadoop YARN的理解(假设spark运行在YARN管理的集群中)，RM是整个集群资源的管理者，spark只是提交给集群的一个JOB，Spark中的Driver应该可以对标到MR中的ApplicationMaster。 <br>那么这样想的话，在向集群提交spark作业之前，集群中是不存在这个Job的Driver和Executor的。在提交spark作业后，应该由Driver先向RM申请资源，RM向Driver返回分配资源的节点，Driver再与对应节点上的DM通信，DM再启动一个Executor进程。<br>但目前看文章的描述，觉得Driver和Executor是一直存在于集群中的，Driver是整个集群资源的管理者。我认为Driver只是一个作业的管理者，Driver和Executor是随着作业的调度被创建，作业执行完它们也就消亡了。<br>所以这里想请教一下老师，当我们提交一个spark作业后，是如何创建对应的Driver和所有的Executor的？创建的流程是什么样的？请您指教，期待回复^_^","like_count":2,"discussions":[{"author":{"id":1351248,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9e/50/21e0beca.jpg","nickname":"kylin","note":"","ucode":"3588B62A4F9534","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586855,"discussion_content":"我也有这种疑惑，尤其是Executors，它应该是具体作业执行的时候创建出来的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662540803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333239,"user_name":"艾利特-G","can_delete":false,"product_type":"c1","uid":1195204,"ip_address":"","ucode":"8C4DA0ABE77CDC","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/c4/4ee2968a.jpg","comment_is_top":false,"comment_ctime":1644225742,"is_pvip":false,"replies":[{"id":"122394","content":"这里的关键，还是要区分“资源调度”和“任务调度”，这两个是相对独立的系统。资源调度与Yarn，只关心CPU、内存资源是否充足，从而决定是否在NodeMgr中启动Executors；而数据分片位置，Task倾向性，这些是任务调度系统关系的内容。两个系统相互独立，保持松耦合的关系，是比较好的设计。如果在资源调度阶段，就引入与任务相关的信息，比如分片位置，这样的系统设计会很复杂、很难维护，MapReduce V1实际上就是这样的设计，后来在V2的时候，就把YARN单独拆出来了。","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1645369479,"ip_address":"","comment_id":333239,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10234160334","product_id":100090001,"comment_content":"&gt; 2.SchedulerBackend 通过与 Executors 中的 ExecutorBackend 的交互来实时地获取集群中可用的计算资源，并将这些信息记录到 ExecutorDataMap 数据结构。<br>这一步中，假如数据是存放在HDFS中，那么SchedulerBackend通过读取HDFS的元数据就知道了某个task所需要的数据分片在哪个DataNode(YARN&#47;Spark worker node)。<br>这个时候为了知道该DataNode的计算资源，不需要实际地启动一个executor，只需要向YARN NodeManager(或者别的资源调度框架中的worker daemon)询问一下就知道了吧？","like_count":2,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552253,"discussion_content":"这里的关键，还是要区分“资源调度”和“任务调度”，这两个是相对独立的系统。资源调度与Yarn，只关心CPU、内存资源是否充足，从而决定是否在NodeMgr中启动Executors；而数据分片位置，Task倾向性，这些是任务调度系统关系的内容。两个系统相互独立，保持松耦合的关系，是比较好的设计。如果在资源调度阶段，就引入与任务相关的信息，比如分片位置，这样的系统设计会很复杂、很难维护，MapReduce V1实际上就是这样的设计，后来在V2的时候，就把YARN单独拆出来了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645369479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320118,"user_name":"D.C","can_delete":false,"product_type":"c1","uid":1115215,"ip_address":"","ucode":"AA79F04070A64D","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/4f/f5ef8a2a.jpg","comment_is_top":false,"comment_ctime":1636086266,"is_pvip":false,"replies":[{"id":"116034","content":"可以的~ 优先根据locality preference来，<br><br>PROCESS_LOCAL -&gt; NODE_LOCAL -&gt; RACK_LOCAL，wait时间超时之后，就随机分发了，变成ANY","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1636092300,"ip_address":"","comment_id":320118,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10226020858","product_id":100090001,"comment_content":"一个taskSet下的不同task，可以分配到同一个executors么？","like_count":2,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529881,"discussion_content":"可以的~ 优先根据locality preference来，\n\nPROCESS_LOCAL -&amp;gt; NODE_LOCAL -&amp;gt; RACK_LOCAL，wait时间超时之后，就随机分发了，变成ANY","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636092300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317681,"user_name":"bian","can_delete":false,"product_type":"c1","uid":1222371,"ip_address":"","ucode":"38D918F2ABF058","user_header":"","comment_is_top":false,"comment_ctime":1634888669,"is_pvip":false,"replies":[{"id":"115141","content":"喜欢就好哈~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1634890994,"ip_address":"","comment_id":317681,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10224823261","product_id":100090001,"comment_content":"这章真的是将执行流程讲的棒极了","like_count":2,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528928,"discussion_content":"喜欢就好哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634890994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340173,"user_name":"十月","can_delete":false,"product_type":"c1","uid":2955154,"ip_address":"","ucode":"95877CD3753595","user_header":"https://static001.geekbang.org/account/avatar/00/2d/17/92/0af520ef.jpg","comment_is_top":false,"comment_ctime":1648641923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5943609219","product_id":100090001,"comment_content":"简直是醍醐罐体！斯巴克公司的例子我愿称之为神比喻","like_count":1},{"had_liked":false,"id":314205,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1632898136,"is_pvip":false,"replies":[{"id":"113797","content":"nodel_local，是说已知数据在某个节点上，Scheduler可以把代码调度到那个目标节点，目标节点上，包含有代码所需的数据，因此，此时是“数据不动，代码动”~<br><br>而rack_local，是说仅仅知道数据在某个机架内（一个机架包含多台机器），但不确定在哪台机器节点上，所以说，Scheduler只能把代码调度到那个机架上随意一个节点，比如说节点node01，但是，调度给node01的代码，所需要的数据，实际上存储在同一个机架的node02上。因此，数据还是要通过网络，从node02传递到node01。这个时候，就是所谓的“数据动了，代码也动了”~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1632909054,"ip_address":"","comment_id":314205,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5927865432","product_id":100090001,"comment_content":"机架就是物理上的“铁架”吗 那 rack_local 和 node_local 有什么区别呢","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527612,"discussion_content":"nodel_local，是说已知数据在某个节点上，Scheduler可以把代码调度到那个目标节点，目标节点上，包含有代码所需的数据，因此，此时是“数据不动，代码动”~\n\n而rack_local，是说仅仅知道数据在某个机架内（一个机架包含多台机器），但不确定在哪台机器节点上，所以说，Scheduler只能把代码调度到那个机架上随意一个节点，比如说节点node01，但是，调度给node01的代码，所需要的数据，实际上存储在同一个机架的node02上。因此，数据还是要通过网络，从node02传递到node01。这个时候，就是所谓的“数据动了，代码也动了”~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632909054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048441,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/79/f400c4d1.jpg","nickname":"douge","note":"","ucode":"A6EB1AA3D53516","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589733,"discussion_content":"一个机架包含多个节点，一般连在同一个交换机，所以互联速度快，跨机架慢一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665292483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314063,"user_name":"加乘","can_delete":false,"product_type":"c1","uid":1766461,"ip_address":"","ucode":"6AE69CE2A3196A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/f4/3d/d4ddbe31.jpg","comment_is_top":false,"comment_ctime":1632822543,"is_pvip":false,"replies":[{"id":"113783","content":"好问题，通常来说，Spark与HDFS都是部署在同一个集群，所以Executors和HDFS是分散在同一个集群。但是，Executors所需的数据分区，不见得是在同一个计算节点。<br><br>而这，就是调度系统的价值之一，把task代码，分发到数据分区所在的节点上的Executor，从而保证node_local的本地性级别。<br><br>而不是把task随意分发到任意资源充足的节点，然后再把对应的所需数据拉过来。<br><br>这个就是所谓的：数据不动代码动～","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1632879829,"ip_address":"","comment_id":314063,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5927789839","product_id":100090001,"comment_content":"老师好，有个基础的问题，没太明白，就是文中说到“当我们调用 textFile API 从 HDFS 文件系统中读取源文件时，Spark 会根据 HDFS NameNode 当中记录的元数据......”时，数据和Executors应该不在一个物理机器上吧，那么Executors执行的时候，是到数据节点的机器上读取数据再进行处理吗？<br>后面又提到“数据不动，代码动”，感觉应该是把代码发到数据节点，然后在数据节点上进行计算处理。然后再返回给Executors执行结果，这样理解对吗？","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527563,"discussion_content":"好问题，通常来说，Spark与HDFS都是部署在同一个集群，所以Executors和HDFS是分散在同一个集群。但是，Executors所需的数据分区，不见得是在同一个计算节点。\n\n而这，就是调度系统的价值之一，把task代码，分发到数据分区所在的节点上的Executor，从而保证node_local的本地性级别。\n\n而不是把task随意分发到任意资源充足的节点，然后再把对应的所需数据拉过来。\n\n这个就是所谓的：数据不动代码动～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632879829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2861352,"avatar":"","nickname":"阿狸弟弟的包子店","note":"","ucode":"0CCF598B029075","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548514,"discussion_content":"driver发送给executor的task中已经包括了hdfs的分区信息，这样executor根据分区信息直接去拉hdfs的数据块即可，并不是driver将数据发给了executor。我理解的没错吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643246136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313076,"user_name":"虹桥念苏","can_delete":false,"product_type":"c1","uid":1109582,"ip_address":"","ucode":"495C023F6CB96C","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/4e/70227e09.jpg","comment_is_top":false,"comment_ctime":1632271092,"is_pvip":false,"replies":[{"id":"113426","content":"谢谢反馈哈～ 确实，为了照顾大多数新同学，我们会用大量的故事和生活化类比，目的是降低大家的学习成本，这样即便在地铁上，学起来也会轻松一些～ <br><br>老弟如果有一定基础的话，推荐不妨了解下《Spark性能调优实战》哈～ 有点夹带私货的嫌疑，哈哈哈","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1632283222,"ip_address":"","comment_id":313076,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5927238388","product_id":100090001,"comment_content":"虽说很形象，但有点啰嗦，学习还是喜欢干货满满，可能比较适合完全零基础的同学吧","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527218,"discussion_content":"谢谢反馈哈～ 确实，为了照顾大多数新同学，我们会用大量的故事和生活化类比，目的是降低大家的学习成本，这样即便在地铁上，学起来也会轻松一些～ \n\n老弟如果有一定基础的话，推荐不妨了解下《Spark性能调优实战》哈～ 有点夹带私货的嫌疑，哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632283222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2688429,"avatar":"https://static001.geekbang.org/account/avatar/00/29/05/ad/e2265f63.jpg","nickname":"promise","note":"","ucode":"906961B12C18C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546237,"discussion_content":"习惯纯计算机思维之后，举生活化例子感觉只是增加信息墒和noise，给学习带来障碍。看了好几个课都是这个画风，干货注水😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642246378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/4e/70227e09.jpg","nickname":"虹桥念苏","note":"","ucode":"495C023F6CB96C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395717,"discussion_content":"之前短暂用过spark，后面一直做flink，发现spark还是蛮重要的，您的两门spark都已订阅，哈哈哈，以后跟着吴老师多多成长","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632324638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1109582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/4e/70227e09.jpg","nickname":"虹桥念苏","note":"","ucode":"495C023F6CB96C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395752,"discussion_content":"老弟客气，一起加油~ 🆙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632326893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":395717,"ip_address":""},"score":395752,"extra":""}]}]},{"had_liked":false,"id":356992,"user_name":"无隅","can_delete":false,"product_type":"c1","uid":1058801,"ip_address":"广东","ucode":"756E8D6E915FF0","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/f1/e4fc57a3.jpg","comment_is_top":false,"comment_ctime":1662802927,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662802927","product_id":100090001,"comment_content":"要是有无比喻的清水版就好了","like_count":0},{"had_liked":false,"id":346594,"user_name":"刘羽儿","can_delete":false,"product_type":"c1","uid":2809636,"ip_address":"","ucode":"8D280A4EBBC4BE","user_header":"https://static001.geekbang.org/account/avatar/00/2a/df/24/04ce86da.jpg","comment_is_top":false,"comment_ctime":1653272764,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1653272764","product_id":100090001,"comment_content":"请问老师，spark底层是怎么判断某个算子是需要进行shuffle的呢？","like_count":0,"discussions":[{"author":{"id":1048441,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/79/f400c4d1.jpg","nickname":"douge","note":"","ucode":"A6EB1AA3D53516","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589734,"discussion_content":"根据算子和分区，不同算子及不同分区都有可能影响是否shuffle ，有本spark书详细分析了每种算子是否需要shuffle，可以参考下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665292815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345961,"user_name":"有点忙","can_delete":false,"product_type":"c1","uid":1748720,"ip_address":"","ucode":"C82D787567E849","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ae/f0/56ddebdd.jpg","comment_is_top":false,"comment_ctime":1652717986,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652717986","product_id":100090001,"comment_content":"我要多看几遍，然后给面试官讲一遍，之前对这块只有大概了解，看完这个，我觉得可以讲十多分钟了，后边应该还有惊喜","like_count":0},{"had_liked":false,"id":338439,"user_name":"骨汤鸡蛋面","can_delete":false,"product_type":"c1","uid":1050002,"ip_address":"","ucode":"2AC141A523E710","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/92/b609f7e3.jpg","comment_is_top":false,"comment_ctime":1647504472,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647504472","product_id":100090001,"comment_content":"请问下老师，taskBinary 具体是什么形式呢？和haddop 的MapReduce 分发一样嘛？","like_count":0},{"had_liked":false,"id":336225,"user_name":"花生耿","can_delete":false,"product_type":"c1","uid":1880923,"ip_address":"","ucode":"509DF5E77CECF2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/qicejJNHoVjX73w3hkw9RDGwgSLchAU8X6ibbdO8PhBJXGPuB2icbm3f4b74v7DWdTQic4gX6WSQS3M5THMhRoGlzA/132","comment_is_top":false,"comment_ctime":1646014867,"is_pvip":true,"replies":[{"id":"123246","content":"抱歉老弟~ 多一些拟人、类比，主要是为了增加学习的趣味性，多一些生活化联想，很多复杂的概念，也会记得更牢靠一些~","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1646724801,"ip_address":"","comment_id":336225,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1646014867","product_id":100090001,"comment_content":"老师，我是spark零基础。这个例子中的一堆中文名字反而增加了理解的难度，我建议直接把里面的角色直接替换成真实的组件更容易理解，要不然还得一边看中文名字，一边跟那个组件对应。","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555030,"discussion_content":"抱歉老弟~ 多一些拟人、类比，主要是为了增加学习的趣味性，多一些生活化联想，很多复杂的概念，也会记得更牢靠一些~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646724801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2955154,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/17/92/0af520ef.jpg","nickname":"十月","note":"","ucode":"95877CD3753595","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559191,"discussion_content":"将组件的英文名对应到一个中文名更方便记忆吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648642169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332259,"user_name":"康","can_delete":false,"product_type":"c1","uid":2621850,"ip_address":"","ucode":"C3E85292E026D5","user_header":"https://static001.geekbang.org/account/avatar/00/28/01/9a/d2831441.jpg","comment_is_top":false,"comment_ctime":1643119045,"is_pvip":false,"replies":[{"id":"121403","content":"感谢老弟认可~","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1643189064,"ip_address":"","comment_id":332259,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643119045","product_id":100090001,"comment_content":"老师讲的太好了","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548423,"discussion_content":"感谢老弟认可~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643189064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325718,"user_name":"liugddx","can_delete":false,"product_type":"c1","uid":1016163,"ip_address":"","ucode":"FDB66E03A74422","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/63/2ceecb43.jpg","comment_is_top":false,"comment_ctime":1639105575,"is_pvip":false,"replies":[{"id":"118185","content":"以Shuffle为边界，划分Stages","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1639149741,"ip_address":"","comment_id":325718,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639105575","product_id":100090001,"comment_content":"我想问下，DAGScheduler划分stage为啥是按照shuffle倒推呢？","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537723,"discussion_content":"以Shuffle为边界，划分Stages","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639149741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048441,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/79/f400c4d1.jpg","nickname":"douge","note":"","ucode":"A6EB1AA3D53516","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589735,"discussion_content":"因为shuffle不能pipeline处理了，必须等到其他分区处理完，以工厂流水线为例，你的工作必须等其他工序完成才能继续工作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665293026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325462,"user_name":"哇塞","can_delete":false,"product_type":"c1","uid":2639609,"ip_address":"","ucode":"C7340DD79BF02E","user_header":"","comment_is_top":false,"comment_ctime":1638964874,"is_pvip":true,"replies":[{"id":"118124","content":"哈哈，老弟喜欢就好~","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1639045594,"ip_address":"","comment_id":325462,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638964874","product_id":100090001,"comment_content":"牛逼 例子很形象啊！！！","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537377,"discussion_content":"哈哈，老弟喜欢就好~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639045594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324012,"user_name":"小新","can_delete":false,"product_type":"c1","uid":1690884,"ip_address":"","ucode":"DCAD04665E2CF8","user_header":"https://static001.geekbang.org/account/avatar/00/19/cd/04/e27b7803.jpg","comment_is_top":false,"comment_ctime":1638256036,"is_pvip":false,"replies":[{"id":"117600","content":"感谢老弟的认可~","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1638283608,"ip_address":"","comment_id":324012,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638256036","product_id":100090001,"comment_content":"精彩绝伦","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534820,"discussion_content":"感谢老弟的认可~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638283608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323816,"user_name":"Yadong","can_delete":false,"product_type":"c1","uid":1019536,"ip_address":"","ucode":"DD7E96E08AA456","user_header":"","comment_is_top":false,"comment_ctime":1638173346,"is_pvip":false,"replies":[{"id":"117602","content":"感谢老弟的认可和鼓励~","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1638283740,"ip_address":"","comment_id":323816,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638173346","product_id":100090001,"comment_content":"课程质量高，评论区也是干货！","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534824,"discussion_content":"感谢老弟的认可和鼓励~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638283740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314496,"user_name":"火炎焱燚","can_delete":false,"product_type":"c1","uid":2767491,"ip_address":"","ucode":"DB11784DD94059","user_header":"https://static001.geekbang.org/account/avatar/00/2a/3a/83/74e3fabd.jpg","comment_is_top":false,"comment_ctime":1633145701,"is_pvip":false,"replies":[{"id":"113937","content":"一起加油~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1633166922,"ip_address":"","comment_id":314496,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633145701","product_id":100090001,"comment_content":"好文章，对于我这个新手非常合适。","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527701,"discussion_content":"一起加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633166922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313713,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1632627430,"is_pvip":false,"replies":[{"id":"113615","content":"节点其实就是服务器，机架是承载节点的大铁壳子","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1632656384,"ip_address":"","comment_id":313713,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632627430","product_id":100090001,"comment_content":"老师我想问下 节点 和 机架 的区别是什么？","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527449,"discussion_content":"节点其实就是服务器，机架是承载节点的大铁壳子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632656384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312911,"user_name":"无名无姓","can_delete":false,"product_type":"c1","uid":2621412,"ip_address":"","ucode":"487BD5AA2CD305","user_header":"https://static001.geekbang.org/account/avatar/00/27/ff/e4/927547a9.jpg","comment_is_top":false,"comment_ctime":1632116209,"is_pvip":true,"replies":[{"id":"113427","content":"哈哈，降低学习成本～","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1632283417,"ip_address":"","comment_id":312911,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632116209","product_id":100090001,"comment_content":"比较形象","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527157,"discussion_content":"哈哈，降低学习成本～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632283417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}