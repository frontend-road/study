{"id":2080,"title":"28 | 推荐阅读：分布式系统架构经典资料","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>前段时间，我写了一系列分布式系统架构方面的文章，有很多读者纷纷留言讨论相关的话题，还有读者留言表示对分布式系统架构这个主题感兴趣，希望我能推荐一些学习资料。</p><p>就像我在前面的课程中多次提到的，分布式系统的技术栈巨大无比，所以我要推荐的学习资料也比较多，后面在课程中我会结合主题逐步推荐给你。在今天这一讲中，我将推荐一些分布式系统的基础理论和一些不错的图书和资料。</p><p>这一讲比较长，所以我特意整理了目录，帮你快速找到自己感兴趣的内容。</p><h1>基础理论</h1><ul>\n<li>CAP 定理</li>\n<li>Fallacies of Distributed Computing</li>\n</ul><h1>经典资料</h1><ul>\n<li>Distributed systems theory for the distributed systems engineer</li>\n<li>FLP Impossibility Result</li>\n<li>An introduction to distributed systems</li>\n<li>Distributed Systems for fun and profit</li>\n<li>Distributed Systems: Principles and Paradigms</li>\n<li>Scalable Web Architecture and Distributed Systems</li>\n<li>Principles of Distributed Systems</li>\n<li>Making reliable distributed systems in the presence of software errors</li>\n<li>Designing Data Intensive Applications</li>\n</ul><!-- [[[read_end]]] --><h1>基础理论</h1><p>下面这些基础知识有可能你已经知道了，不过还是容我把它分享在这里。我希望用比较通俗易懂的文字将这些枯燥的理论知识讲清楚。</p><h2><a href=\"https://en.wikipedia.org/wiki/CAP_theorem\">CAP定理</a></h2><p>CAP定理是分布式系统设计中最基础，也是最为关键的理论。它指出，分布式数据存储不可能同时满足以下三个条件。</p><ul>\n<li>\n<p><strong>一致性（Consistency）</strong>：每次读取要么获得最近写入的数据，要么获得一个错误。</p>\n</li>\n<li>\n<p><strong>可用性（Availability）</strong>：每次请求都能获得一个（非错误）响应，但不保证返回的是最新写入的数据。</p>\n</li>\n<li>\n<p><strong>分区容忍（Partition tolerance）</strong>：尽管任意数量的消息被节点间的网络丢失（或延迟），系统仍继续运行。</p>\n</li>\n</ul><p>也就是说，CAP定理表明，在存在网络分区的情况下，一致性和可用性必须二选一。而在没有发生网络故障时，即分布式系统正常运行时，一致性和可用性是可以同时被满足的。这里需要注意的是，CAP定理中的一致性与ACID数据库事务中的一致性截然不同。</p><p>掌握CAP定理，尤其是能够正确理解C、A、P的含义，对于系统架构来说非常重要。因为对于分布式系统来说，网络故障在所难免，如何在出现网络故障的时候，维持系统按照正常的行为逻辑运行就显得尤为重要。你可以结合实际的业务场景和具体需求，来进行权衡。</p><p>例如，对于大多数互联网应用来说（如门户网站），因为机器数量庞大，部署节点分散，网络故障是常态，可用性是必须要保证的，所以只有舍弃一致性来保证服务的AP。而对于银行等，需要确保一致性的场景，通常会权衡CA和CP模型，CA模型网络故障时完全不可用，CP模型具备部分可用性。</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/a6/d98d65bef3719e175f16bdb5901f37a6.png?wh=634*590\" alt=\"\"></p><ul>\n<li>\n<p>CA (consistency + availability)，这样的系统关注一致性和可用性，它需要非常严格的全体一致的协议，比如“两阶段提交”（2PC）。CA系统不能容忍网络错误或节点错误，一旦出现这样的问题，整个系统就会拒绝写请求，因为它并不知道对面的那个结点是否挂掉了，还是只是网络问题。唯一安全的做法就是把自己变成只读的。</p>\n</li>\n<li>\n<p>CP (consistency + partition tolerance)，这样的系统关注一致性和分区容忍性。它关注的是系统里大多数人的一致性协议，比如：Paxos算法（Quorum类的算法）。这样的系统只需要保证大多数结点数据一致，而少数的结点会在没有同步到最新版本的数据时变成不可用的状态。这样能够提供一部分的可用性。</p>\n</li>\n<li>\n<p>AP (availability + partition tolerance)，这样的系统关心可用性和分区容忍性。因此，这样的系统不能达成一致性，需要给出数据冲突，给出数据冲突就需要维护数据版本。Dynamo就是这样的系统。</p>\n</li>\n</ul><p>然而，还是有一些人会错误地理解CAP定理，甚至误用。Cloudera工程博客中，<a href=\"http://blog.cloudera.com/blog/2010/04/cap-confusion-problems-with-partition-tolerance/\">CAP Confusion: Problems with ‘partition tolerance’</a>一文中对此有详细的阐述。</p><p>在谷歌的<a href=\"http://www.youtube.com/watch?v=srOgpXECblk\">Transaction Across DataCenter视频</a>中，我们可以看到下面这样的图。这个是CAP理论在具体工程中的体现。</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/b8/f62e32b1a3d81db6ae24b174f1b727b8.png?wh=865*458\" alt=\"\"></p><h2><a href=\"http://en.wikipedia.org/wiki/Fallacies_of_distributed_computing\">Fallacies of Distributed Computing</a></h2><p>本文是英文维基百科上的一篇文章。它是Sun公司的<a href=\"https://en.wikipedia.org/wiki/L_Peter_Deutsch\">劳伦斯·彼得·多伊奇（Laurence Peter Deutsch）</a>等人于1994~1997年提出的，讲的是刚刚进入分布式计算领域的程序员常会有的一系列错误假设。</p><p>多伊奇于1946年出生在美国波士顿。他创办了阿拉丁企业（Aladdin Enterprises），并在该公司编写出了著名的Ghostscript开源软件，于1988年首次发布。</p><p>他在学生时代就和艾伦·凯（Alan Kay）等比他年长的人一起开发了Smalltalk，并且他的开发成果激发了后来Java语言JIT编译技术的创造灵感。他后来在Sun公司工作并成为Sun公司的院士。在1994年，他成为了ACM院士。</p><p>基本上，每个人刚开始建立一个分布式系统时，都做了以下8条假定。随着时间的推移，每一条都会被证明是错误的，也都会导致严重的问题，以及痛苦的学习体验。</p><ol>\n<li>网络是稳定的。</li>\n<li>网络传输的延迟是零。</li>\n<li>网络的带宽是无穷大。</li>\n<li>网络是安全的。</li>\n<li>网络的拓扑不会改变。</li>\n<li>只有一个系统管理员。</li>\n<li>传输数据的成本为零。</li>\n<li>整个网络是同构的。</li>\n</ol><p>阿尔农·罗特姆-盖尔-奥兹（Arnon Rotem-Gal-Oz）写了一篇长文<a href=\"http://www.rgoarchitects.com/Files/fallacies.pdf\">Fallacies of Distributed Computing Explained</a>来解释这些点。</p><p>由于他写这篇文章的时候已经是2006年了，所以从中能看到这8条常见错误被提出十多年后还有什么样的影响：一是，为什么当今的分布式软件系统也需要避免这些设计错误；二是，在当今的软硬件环境里，这些错误意味着什么。比如，文中在谈“延迟为零”假设时，还谈到了AJAX，而这是2005年开始流行的技术。</p><p>而<a href=\"http://blog.fogcreek.com/eight-fallacies-of-distributed-computing-tech-talk/\">加勒思·威尔逊（Gareth Wilson）的文章</a>则用日常生活中的例子，对这些点做了更为通俗的解释。</p><p>这8个需要避免的错误不仅对于中间件和底层系统开发者及架构师是重要的知识，而且对于网络应用程序开发者也同样重要。分布式系统的其他部分，如容错、备份、分片、微服务等也许可以对应用程序开发者部分透明，但这8点则是应用程序开发者也必须知道的。</p><p><strong>为什么我们要深刻地认识这8个错误？是因为，这要我们清楚地认识到——在分布式系统中错误是不可能避免的，我们能做的不是避免错误，而是要把错误的处理当成功能写在代码中。</strong></p><p>后面，我会写一个系列的文章来谈一谈，分布式系统容错设计中的一些常见设计模式。敬请关注！</p><h1>经典资料</h1><h2><a href=\"http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/\">Distributed systems theory for the distributed systems engineer</a></h2><p>本文作者认为，推荐大量的理论论文是学习分布式系统理论的错误方法，除非这是你的博士课程。因为论文通常难度大又很复杂，需要认真学习，而且需要理解这些研究成果产生的时代背景，才能真正地领悟到其中的精妙之处。</p><p>在本文中，作者给出了他整理的分布式工程师必须要掌握的知识列表，并直言掌握这些足够设计出新的分布式系统。首先，作者推荐了4份阅读材料，它们共同概括了构建分布式系统的难点，以及所有工程师必须克服的技术难题。</p><ul>\n<li>\n<p><a href=\"http://book.mixu.net/distsys/\">Distributed Systems for Fun and Profit</a>，这是一本小书，涵盖了分布式系统中的关键问题，包括时间的作用和不同的复制策略。后文中对这本书有较详细的介绍。</p>\n</li>\n<li>\n<p><a href=\"https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/\">Notes on distributed systems for young bloods</a>，这篇文章中没有理论，是一份适合新手阅读的分布式系统实践笔记。</p>\n</li>\n<li>\n<p><a href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.7628\">A Note on Distributed Systems</a>，这是一篇经典的论文，讲述了为什么在分布式系统中，远程交互不能像本地对象那样进行。</p>\n</li>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing\">The fallacies of distributed computing</a>，每个分布式系统新手都会做的8个错误假设，并探讨了其会带来的影响。上文中专门对这篇文章做了介绍。</p>\n</li>\n</ul><p>随后，分享了几个关键点。</p><ul>\n<li><strong>失败和时间（Failure and Time）</strong>。分布式系统工程师面临的很多困难都可以归咎于两个根本原因：1. 进程可能会失败；2. 没有好方法表明进程失败。这就涉及到如何设置系统时钟，以及进程间的通讯机制，在没有任何共享时钟的情况下，如何确定一个事件发生在另一个事件之前。</li>\n</ul><p>可以参考Lamport时钟和Vector时钟，还可以看看<a href=\"http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf\">Dynamo论文</a>。</p><ul>\n<li><strong>容错的压力（The basic tension of fault tolerance）</strong>。能在不降级的情况下容错的系统一定要像没有错误发生的那样运行。这就意味着，系统的某些部分必须冗余地工作，从而在性能和资源消耗两方面带来成本。</li>\n</ul><p>最终一致性以及其他技术方案在以系统行为弱保证为代价，来试图避免这种系统压力。阅读<a href=\"http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf\">Dynamo论文</a>和帕特·赫尔兰（Pat Helland）的经典论文<a href=\"http://www.cloudtran.com/pdfs/LifeBeyondDistTRX.pdf\">Life Beyond Transactions</a>能获得很大启发。</p><ul>\n<li>\n<p><strong>基本原语（Basic primitives）</strong>。在分布式系统中几乎没有一致认同的基本构建模块，但目前在越来越多地在出现。比如Leader选举，可以参考<a href=\"https://en.wikipedia.org/wiki/Bully_algorithm\">Bully算法</a>；分布式状态机复制，可以参考<a href=\"https://en.wikipedia.org/wiki/State_machine_replication\">维基百科</a>和<a href=\"https://www.microsoft.com/en-us/research/publication/how-to-build-a-highly-available-system-using-consensus/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fblampson%2F58-consensus%2Facrobat.pdf\">Lampson的论文</a>，后者更权威，只是有些枯燥。</p>\n</li>\n<li>\n<p><strong>基本结论（Fundamental Results）</strong>。某些事实是需要吸收理解的，有几点：如果进程之间可能丢失某些消息，那么不可能在实现一致性存储的同时响应所有的请求，这就是CAP定理；一致性不可能同时满足以下条件：a. 总是正确，b. 在异步系统中只要有一台机器发生故障，系统总是能终止运行——停止失败（FLP不可能性）；一般而言，消息交互少于两轮都不可能达成共识（Consensus）。</p>\n</li>\n<li>\n<p><strong>真实系统（Real systems）</strong>。学习分布式系统架构最重要的是，结合一些真实系统的描述，反复思考和点评其背后的设计决策。如谷歌的GFS、Spanner、Chubby、BigTable、Dapper等，以及Dryad、Cassandra和Ceph等非谷歌系统。</p>\n</li>\n</ul><h2><a href=\"https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf\">FLP Impossibility Result</a></h2><p>FLP不可能性的名称起源于它的三位作者，Fischer、Lynch和Paterson。它是关于理论上能做出的功能最强的共识算法会受到怎样的限制的讨论。</p><p>所谓共识问题，就是让网络上的分布式处理者最后都对同一个结果值达成共识。该解决方案对错误有恢复能力，处理者一旦崩溃以后，就不再参与计算。在同步环境下，每个操作步骤的时间和网络通信的延迟都是有限的，要解决共识问题是可能的，方式是：等待一个完整的步长来检测某个处理者是否已失败。如果没有收到回复，那就假定它已经崩溃。</p><p>共识问题有几个变种，它们在“强度”方面有所不同——通常，一个更“强”问题的解决方案同时也能解决比该问题更“弱”的问题。共识问题的一个较强的形式如下。</p><p>给出一个处理者的集合，其中每一个处理者都有一个初始值：</p><ul>\n<li>所有无错误的进程（处理过程）最终都将决定一个值；</li>\n<li>所有会做决定的无错误进程决定的都将是同一个值；</li>\n<li>最终被决定的值必须被至少一个进程提出过。</li>\n</ul><p>这三个特性分别被称为“终止”、“一致同意”和“有效性”。任何一个具备这三点特性的算法都被认为是解决了共识问题。</p><p>FLP不可能性则讨论了异步模型下的情况，主要结论有两条。</p><ol>\n<li>\n<p>在异步模型下不存在一个完全正确的共识算法。不仅上述较“强”形式的共识算法不可能实现，FLP还证明了比它弱一些的、只需要有一些无错误的进程做决定就足够的共识算法也是不可能实现的。</p>\n</li>\n<li>\n<p>在异步模型下存在一个部分正确的共识算法，前提是所有无错误的进程都总能做出一个决定，此外没有进程会在它的执行过程中死亡，并且初始情况下超过半数进程都是存活状态。</p>\n</li>\n</ol><p>FLP的结论是，在异步模型中，仅一个处理者可能崩溃的情况下，就已经没有分布式算法能解决共识问题。这是该问题的理论上界。其背后的原因在于，异步模型下对于一个处理者完成工作然后再回复消息所需的时间并没有上界。因此，无法判断出一个处理者到底是崩溃了，还是在用较长的时间来回复，或者是网络有很大的延迟。</p><p>FLP不可能性对我们还有别的启发。一是网络延迟很重要，网络不能长时间处于拥塞状态，否则共识算法将可能因为网络延迟过长而导致超时失败。二是计算时间也很重要。对于需要计算共识的处理过程（进程），如分布式数据库提交，需要在短时间里就计算出能否提交的结果，那就要保证计算结点资源充分，特别是内存容量、磁盘空闲时间和CPU时间方面要足够，并在软件层面确保计算不超时。</p><p>另一个问题是，像Paxos这样的共识算法为什么可行？实际上它并不属于FLP不可能性证明中所说的“完全正确”的算法。它的正确性会受超时值的影响。但这并不妨碍它在实践中有效，因为我们可以通过避免网络拥塞等手段来保证超时值是合适的。</p><h2><a href=\"https://github.com/aphyr/distsys-class\">An introduction to distributed systems</a></h2><p>它是<a href=\"https://github.com/aphyr/distsys-class#review-1\">分布式系统基础课</a>的课程提纲，也是一份很棒的分布式系统介绍，几乎涵盖了所有知识点，并辅以简洁并切中要害的说明文字，非常适合初学者提纲挈领地了解知识全貌，快速与现有知识结合，形成知识体系。此外，还可以把它作为分布式系统的知识图谱，根据其中列出的知识点一一搜索，你能学会所有的东西。</p><h2><a href=\"http://book.mixu.net/distsys/single-page.html\">Distributed Systems for fun and profit</a></h2><p>这是一本免费的电子书。作者撰写此书的目的是希望以一种更易于理解的方式，讲述以亚马逊的Dynamo、谷歌的BigTable和MapReduce等为代表的分布式系统背后的核心思想。</p><p>因而，书中着力撰写分布式系统中的关键概念，以便让读者能够快速了解最为核心的知识，并且进行了足够详实的讲述，方便读者体会和理解，又不至于陷入细节。</p><p>全书分为五章，讲述了扩展性、可用性、性能和容错等基础知识，FLP不可能性和CAP定理，探讨了大量的一致性模型；讨论了时间和顺序，及时钟的各种用法。随后，探讨了复制问题，如何防止差异，以及如何接受差异。此外，每章末尾都给出了针对本章内容的扩展阅读资源列表，这些资料是对本书内容的很好补充。</p><h2><a href=\"http://barbie.uta.edu/~jli/Resources/MapReduce&Hadoop/Distributed%20Systems%20Principles%20and%20Paradigms.pdf\">Distributed Systems: Principles and Paradigms</a></h2><p>本书是由计算机科学家安德鲁·斯图尔特·塔能鲍姆（Andrew S. Tanenbaum）和其同事马丁·范·斯蒂恩（Martin van Steen）合力撰写的，是分布式系统方面的经典教材。</p><p>语言简洁，内容通俗易懂，介绍了分布式系统的七大核心原理，并给出了大量的例子；系统讲述了分布式系统的概念和技术，包括通信、进程、命名、同步化、一致性和复制、容错以及安全等；讨论了分布式应用的开发方法（即范型）。</p><p>但本书不是一本指导“如何做”的手册，仅适合系统性地学习基础知识，了解编写分布式系统的基本原则和逻辑。中文翻译版为<a href=\"https://item.jd.com/10079452.html\">《分布式系统原理与范型》（第二版）</a>。</p><h2><a href=\"http://www.aosabook.org/en/distsys.html\">Scalable Web Architecture and Distributed Systems</a></h2><p>这是一本免费的在线小册子，其中文翻译版为<a href=\"http://nettee.github.io/posts/2016/Scalable-Web-Architecture-and-Distributed-Systems/\">可扩展的Web架构和分布式系统</a>。</p><p>本书主要针对面向互联网（公网）的分布式系统，但其中的原理或许也可以应用于其他分布式系统的设计中。作者的观点是，通过了解大型网站的分布式架构原理，小型网站的构建也能从中受益。本书从大型互联网系统的常见特性，如高可用、高性能、高可靠、易管理等出发，引出了一个类似于Flickr的典型的大型图片网站的例子。</p><p>首先，从程序模块化易组合的角度出发，引出了面向服务架构（SOA）的概念。同时，引申出写入和读取两者的性能问题，及对此二者如何调度的考量——在当今的软硬件架构上，写入几乎总是比读取更慢，包括软件层面引起的写入慢（如数据库的一致性要求和B树的修改）和硬件层面引起的写入慢（如SSD）。</p><p>网络提供商提供的下载带宽也通常比上传带宽更大。读取往往可以异步操作，还可以做gzip压缩。写入则往往需要保持连接直到数据上传完成。因此，往往我们会想把服务做成读写分离的形式。然后通过一个Flickr的例子，介绍了他们的服务器分片式集群做法。</p><p>接下来讲了冗余。数据的冗余异地备份（如master-slave）、服务的多版本冗余、避免单点故障等。</p><p>随后，在冗余的基础上，讲了多分区扩容，亦即横向扩容。横向扩容是在单机容量无法满足需求的情况下不得不做的设计。但横向扩容会带来一个问题，即数据的局域性会变差。本来数据可以存在于同一台服务器上，但现在数据不得不存在于不同服务器上，潜在地降低了系统的性能（主要是可能延长响应时间）。另一个问题是多份数据的不一致性。</p><p>之后，本书开始深入讲解数据访问层面的设计。首先抛出一个大型数据（TB级以上）的存储问题。如果内存都无法缓存该数据量，性能将大幅下降，那么就需要缓存数据。数据可以缓存在每个节点上。</p><p>但如果为所有节点使用负载均衡，那么分配到每个节点的请求将十分随机，大大降低缓存命中率，从而导致低效的缓存。接下来考虑全局缓存的设计。再接下来考虑分布式缓存的设计。进一步，介绍了Memcached，以及Facebook的缓存设计方案。</p><p>代理服务器则可以用于把多个重复请求合并成一个，对于公网上的公共服务来说，这样做可以大大减少对数据层访问的次数。Squid和Varnish是两个可用于生产的代理服务软件。</p><p>当知道所需要读取的数据的元信息时，比如知道一张图片的URL，或者知道一个要全文搜索的单词时，索引就可以帮助找到那几台存有该信息的服务器，并从它们那里获取数据。文中扩展性地讨论了本话题。</p><p>接下来谈负载均衡器，以及一些典型的负载均衡拓扑。然后讨论了对于用户会话数据如何处理。比如，对于电子商务网站，用户的购物车在没有下单之前都必须保持有效。</p><p>一种办法是让用户会话与服务器产生关联，但这样做会较难实现自动故障转移，如何做好是个问题。另外，何时该使用负载均衡是个问题。有时节点数量少的情况下，只要使用轮换式DNS即可。负载均衡也会让在线性能问题的检测变得更麻烦。</p><p>对于写入的负载，可以用队列的方式来减少对服务器的压力，保证服务器的效率。消息队列的开源实现有很多，如RabbitMQ、ActiveMQ、BeanstalkD，但有些队列方案也使用了如Zookeeper，甚至是像Redis这样的存储服务。</p><p>本书主要讲述了高性能互联网分布式服务的架构方案，并介绍了许多实用的工具。作者指出这是一个令人兴奋的设计领域，虽然只讲了一些皮毛，但这一领域不仅现在有很多创新，将来也会越来越多。</p><h2><a href=\"http://dcg.ethz.ch/lectures/podc_allstars/lecture/podc.pdf\">Principles of Distributed Systems</a></h2><p>本书是苏黎世联邦理工学院的教材。它讲述了多种分布式系统中会用到的算法。虽然分布式系统的不同场景会用到不同算法，但并不表示这些算法都会被用到。不过，对于学生来说，掌握了算法设计的精髓也就能举一反三地设计出解决其他问题的算法，从而得到分布式系统架构设计中所需的算法。</p><p>本书覆盖的算法有：</p><ul>\n<li>顶点涂色算法（可用于解决互相冲突的任务分配问题）</li>\n<li>分布式的树算法（广播算法、会聚算法、广度优先搜索树算法、最小生成树算法）</li>\n<li>容错以及Paxos（Paxos是最经典的共识算法之一）</li>\n<li>拜占庭协议（节点可能没有完全宕机，而是输出错误的信息）</li>\n<li>全互联网络（服务器两两互联的情况下算法的复杂度）</li>\n<li>多核计算的工程实践（事务性存储、资源争用管理）</li>\n<li>主导集（又一个用随机化算法打破对称性的例子；这些算法可以用于路由器建立路由）</li>\n<li>……</li>\n</ul><p>这些算法对你迈向更高级更广阔的技术领域真的相当有帮助。</p><h2><a href=\"https://github.com/theanalyst/awesome-distributed-systems/blob/master/README.md\">Making reliable distributed systems in the presence of software errors</a></h2><p>这本书的书名直译过来是在有软件错误的情况下，构建可靠的分布式系统，是Erlang之父乔·阿姆斯特朗（Joe Armstrong）的力作。书中撰写的内容是从1981年开始的一个研究项目的成果，这个项目是寻找更好的电信应用编程方式。</p><p>当时的电信应用都是大型程序，虽然经过了仔细的测试，但投入使用时程序中仍会存在大量的错误。作者及其同事假设这些程序中确实有错误，然后想方设法在这些错误存在的情况下构建可靠的系统。他们测试了所有的编程语言，没有一门语言拥有电信行业所需要的所有特性，所以促使一门全新的编程语言Erlang的开发，以及随之出现的构建健壮系统（OTP）的设计方法论和库集。</p><p>书中抽象了电信应用的所有需求，定义了问题域，讲述了系统构建思路——模拟现实，简单通用，并给出了指导规范。阿姆斯特朗认为，在存在软件错误的情况下，构建可靠系统的核心问题可以通过编程语言或者编程语言的标准库来解决。所以本书有很大的篇幅来介绍Erlang，以及如何运用其构建具有容错能力的电信应用。</p><p>虽然书中的内容是以构建20世纪80年代的电信系统为背景，但是这种大规模分布式的系统开发思路，以及对系统容错能力的核心需求，与互联网时代的分布式系统架构思路出奇一致。书中对问题的抽象、总结，以及解决问题的思路和方案，有深刻的洞察和清晰的阐释，所以此书对现在的项目开发和架构有极强的指导和借鉴意义。</p><h2><a href=\"https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321\">Designing Data Intensive Applications</a></h2><p>这是一本非常好的书。我们知道，在分布式的世界里，数据结点的扩展是一件非常麻烦的事。而这本书则深入浅出地用很多工程案例讲解了如何让数据结点做扩展。</p><p>作者马丁·科勒普曼（Martin Kleppmann）在分布式数据系统领域有着很深的功底，并在这本书中完整地梳理各类纷繁复杂设计背后的技术逻辑，不同架构之间的妥协与超越，很值得开发人员与架构设计者阅读。</p><p>这本书深入到B-Tree、SSTables、LSM这类数据存储结构中，并且从外部的视角来审视这些数据结构对NoSQL和关系型数据库所产生的影响。它可以让你很清楚地了解到真正世界的大数据架构中的数据分区、数据复制的一些坑，并提供了很好的解决方案。</p><p><strong>最赞的是，作者将各种各样的技术的本质非常好地关联在一起，帮你触类旁通</strong>。而且抽丝剥茧，循循善诱，从“提出问题”，到“解决问题”，到“解决方案”，再到“优化方案”和“对比不同的方案”，一点一点地把非常晦涩的技术和知识展开。</p><p>本书的引用相当多，每章后面都有几百个Reference。通过这些Reference，你可以看到更为广阔更为精彩的世界。</p><p>这本书是2017年3月份出版的，目前还没有中译版，不过英文也不难读。非常推荐。这里有<a href=\"http://www.antonfagerberg.com/files/intensive.pdf\">这本书的PPT</a>，你可以从这个PPT中管中窥豹一下。</p><h1>小结</h1><p>在今天的课程中，我给出了一些分布式系统的基础理论知识和几本很不错的图书和资料，需要慢慢消化吸收。也许你看到这么庞大的书单和资料列表有点望而却步，但是我真的希望你能够花点时间来看看这些资料。相信你看完这些资料后，一定能上一个新的台阶。再加上一些在工程项目中的实践，我保证你，一定能达到大多数人难以企及的技术境界。</p><p>自从2002年开始接触分布式计算系统至今，我学习分布式系统已经有15年了，发现还有很多东西还要继续学习。是的，学无止境啊。如果你想成为一名很不错的架构师，你一定要好好学习这些知识。</p><p><strong>2018年新年来临，祝你新年快乐！</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/a3/bb/a321a64415498cbbf5222b3971accabb.png?wh=640*623\" alt=\"\"><br>\n<strong>插图来自电影《摔跤吧！爸爸》</strong></p><p>《分布式系统架构的本质》系列文章的目录如下，方便你查找自己关注的内容。</p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/1411\">分布式系统架构的冰与火</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1505\">从亚马逊的实践，谈分布式系统的难点</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1512\">分布式系统的技术栈</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1513\">分布式系统关键技术：全栈监控</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1604\">分布式系统关键技术：服务调度</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1609\">分布式系统关键技术：流量与数据调度</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1610\">洞悉PaaS平台的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2080\">推荐阅读：分布式系统架构经典资料</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2421\">推荐阅读：分布式数据调度相关论文</a></li>\n</ul>","comments":[{"had_liked":false,"id":1850,"user_name":"杜小琨","can_delete":false,"product_type":"c1","uid":1023348,"ip_address":"","ucode":"FD577B19C381B7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/74/353e05c9.jpg","comment_is_top":false,"comment_ctime":1514854778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"173313546618","product_id":100002201,"comment_content":"这篇文章应该先发，这些才是精华","like_count":41},{"had_liked":false,"id":1965,"user_name":"湖心亭看雪","can_delete":false,"product_type":"c1","uid":1023363,"ip_address":"","ucode":"88BAEBA964B6BC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/83/968da410.jpg","comment_is_top":false,"comment_ctime":1515292212,"is_pvip":false,"replies":[{"id":"374","content":"👍","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1515332893,"ip_address":"","comment_id":1965,"utype":1}],"discussion_count":1,"race_medal":0,"score":"143249212980","product_id":100002201,"comment_content":"data intensive是今年读过的最好的技术书籍，比Bob大叔的clean architecture要有收获和启发。","like_count":34,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415601,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1515332893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":2433,"user_name":"东","can_delete":false,"product_type":"c1","uid":1043947,"ip_address":"","ucode":"0FF5018422CEA9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/eb/88cac7a5.jpg","comment_is_top":false,"comment_ctime":1517232200,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"91711545416","product_id":100002201,"comment_content":"做分布式系统快十年，虽然其中的很多书籍文章都读过，但是这么系统的罗列还是第一次看到！做技术真的是感觉知道的越多，不知道的也越多！","like_count":22},{"had_liked":false,"id":11794,"user_name":"yandongxiao","can_delete":false,"product_type":"c1","uid":1017700,"ip_address":"","ucode":"D397F4DB0109C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/64/3882d90d.jpg","comment_is_top":false,"comment_ctime":1528357139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83132735763","product_id":100002201,"comment_content":"这是我购买以后看的第一篇文章，到现在已经两个月过去了，主要是把这个文章<br>Distributed systems theory for the distributed systems engineer 的内容和连接看了一遍，做了七八十页的笔记，感觉算是入门了。<br>额，主要还是想说句感谢😊。","like_count":20},{"had_liked":false,"id":3563,"user_name":"cykking","can_delete":false,"product_type":"c1","uid":1023564,"ip_address":"","ucode":"69C18191510781","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9e/4c/3a9a65ef.jpg","comment_is_top":false,"comment_ctime":1519903724,"is_pvip":false,"replies":[{"id":"760","content":"加油","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1520471662,"ip_address":"","comment_id":3563,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31584674796","product_id":100002201,"comment_content":"这个技术栈确实太巨大了","like_count":8,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415940,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1520471662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102197,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1167045,"ip_address":"","ucode":"5639941D4D33A5","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/c5/38685beb.jpg","comment_is_top":false,"comment_ctime":1560159515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27329963291","product_id":100002201,"comment_content":"数据密集型应用系统设计   Designing Data Intensive Applications<br>的中译本已经出了。<br>","like_count":7},{"had_liked":false,"id":39129,"user_name":"罗洲","can_delete":false,"product_type":"c1","uid":1263417,"ip_address":"","ucode":"68133E38A25C17","user_header":"https://static001.geekbang.org/account/avatar/00/13/47/39/0ce1aa62.jpg","comment_is_top":false,"comment_ctime":1542194773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27311998549","product_id":100002201,"comment_content":"看到浩哥的这些分析，推荐的这些书单，发现做技术做成这样才算专家，不得不感叹，差距不在一个量级，继续加油，争取缩小差距","like_count":7},{"had_liked":false,"id":190231,"user_name":"ipofss","can_delete":false,"product_type":"c1","uid":1018620,"ip_address":"","ucode":"DE3061C9259F9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","comment_is_top":false,"comment_ctime":1584619329,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14469521217","product_id":100002201,"comment_content":"刚看了浩哥的《如何超过大多数人》，再来看这篇文章，觉得很棒","like_count":3},{"had_liked":false,"id":1872,"user_name":"章洁","can_delete":false,"product_type":"c1","uid":1028624,"ip_address":"","ucode":"9009DC36CB4B9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/10/a6debd39.jpg","comment_is_top":false,"comment_ctime":1514976487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14399878375","product_id":100002201,"comment_content":"正在计划构建分布式系统，收益颇多。","like_count":3},{"had_liked":false,"id":301617,"user_name":"幽灵谷","can_delete":false,"product_type":"c1","uid":1453263,"ip_address":"","ucode":"3702CC4B108568","user_header":"https://static001.geekbang.org/account/avatar/00/16/2c/cf/78a47f1c.jpg","comment_is_top":false,"comment_ctime":1625789198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5920756494","product_id":100002201,"comment_content":"以前虽然知道英文对编程很重要，但远没有今天认识的这么深刻！","like_count":1},{"had_liked":false,"id":211422,"user_name":"Geek_130e9e","can_delete":false,"product_type":"c1","uid":1587628,"ip_address":"","ucode":"518AAF2F228C17","user_header":"","comment_is_top":false,"comment_ctime":1587960878,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882928174","product_id":100002201,"comment_content":"我觉得比Bob大师Clean Architecture更淋漓通透的，是Kleppmann的Data Intensive，真正的宗师品质，赞佩！","like_count":1},{"had_liked":false,"id":193152,"user_name":"迪","can_delete":false,"product_type":"c1","uid":1760077,"ip_address":"","ucode":"57EF0AF897A8B3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/db/4d/8dec7917.jpg","comment_is_top":false,"comment_ctime":1584884955,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879852251","product_id":100002201,"comment_content":"听完发现自己知道的东西实在是太少了","like_count":1},{"had_liked":false,"id":95595,"user_name":"稻草人","can_delete":false,"product_type":"c1","uid":1535799,"ip_address":"","ucode":"CC8039AE206778","user_header":"https://static001.geekbang.org/account/avatar/00/17/6f/37/7597630e.jpg","comment_is_top":false,"comment_ctime":1558094686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853061982","product_id":100002201,"comment_content":"陈老师你好，我是大数据平台开发，我看大数据开发归根结底也是分布式的东西，如果我想在大数据开发更深一步的话会是大数据的计算引擎还是分布式的东西？现在完全没有概念","like_count":1},{"had_liked":false,"id":17093,"user_name":"别人家的孩子","can_delete":false,"product_type":"c1","uid":1146749,"ip_address":"","ucode":"8D7C2707D045C9","user_header":"https://static001.geekbang.org/account/avatar/00/11/7f/7d/263f4dfd.jpg","comment_is_top":false,"comment_ctime":1532431492,"is_pvip":false,"replies":[{"id":"6003","content":"不用啊。比如你用java，docker 里只运行tomcat啊，但是如果你要组个集群就需要Nginx&#47;HAProxy这样的中间件了","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1532570960,"ip_address":"","comment_id":17093,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5827398788","product_id":100002201,"comment_content":"请教一下.<br>我有多个web应用,构建成不同的docker运行.<br>我每个docker里面都要运行一个nginx吗?<br>这种情况的最佳实践是什么?😭","like_count":1,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421038,"discussion_content":"不用啊。比如你用java，docker 里只运行tomcat啊，但是如果你要组个集群就需要Nginx/HAProxy这样的中间件了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532570960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349072,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1655713580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655713580","product_id":100002201,"comment_content":"好多的资料啊，一本书籍里面又会嵌套很多资料，就像看《代码大全》里面的资料就很多，真的是不知道要多少年以后才能看完，也许到了老去那一天也不能完成，看完了也不见得就算懂了。最近又在看计算机的基础东西，计算机原理，操作系统，网络知识，数据结构与算法光是这些基础的资料就要看很多年了，然后还不见得能看明白。要学习的东西真的太多了，还不能慢慢学，时间不等人呢！","like_count":0},{"had_liked":false,"id":340826,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1649165786,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649165786","product_id":100002201,"comment_content":"学无止境呀～～","like_count":0},{"had_liked":false,"id":338188,"user_name":"Join","can_delete":false,"product_type":"c1","uid":1014873,"ip_address":"","ucode":"20F51EFFD8FEDE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/59/dc9bbb21.jpg","comment_is_top":false,"comment_ctime":1647343385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647343385","product_id":100002201,"comment_content":"Designing Data Intensive Applications这本书很经典, 作者通过一些小栗子说明问题, 通俗易懂, 把很多模糊的概念搞清楚了,推荐","like_count":0},{"had_liked":false,"id":318921,"user_name":"tensor-zhang","can_delete":false,"product_type":"c1","uid":2807278,"ip_address":"","ucode":"39A0B6EB2B79E9","user_header":"https://static001.geekbang.org/account/avatar/00/2a/d5/ee/d39a0ee0.jpg","comment_is_top":false,"comment_ctime":1635482779,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635482779","product_id":100002201,"comment_content":"加勒思·威尔逊（Gareth Wilson）的文章 链接挂了","like_count":0},{"had_liked":false,"id":316365,"user_name":"seedjyh","can_delete":false,"product_type":"c1","uid":2309641,"ip_address":"","ucode":"D590E526A9A1D7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4IPqj4H3jQHq4C1lgKh6ZroK3CVmGLiadic7S1rxbuy09JM9x8Aib6VkozPkO4lrUTHAhicX1z9Cg2w/132","comment_is_top":false,"comment_ctime":1634287858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634287858","product_id":100002201,"comment_content":"Designing Data-Intensive Applications《数据密集型应用程序设计》","like_count":0},{"had_liked":false,"id":276020,"user_name":"迷宫中的将军","can_delete":false,"product_type":"c1","uid":1027658,"ip_address":"","ucode":"67D3CD6033BFDE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/4a/a71a889b.jpg","comment_is_top":false,"comment_ctime":1611747935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611747935","product_id":100002201,"comment_content":"构建数据密集型应用 确实不错，正在读","like_count":0},{"had_liked":false,"id":271965,"user_name":"刘国伟","can_delete":false,"product_type":"c1","uid":2374616,"ip_address":"","ucode":"7F23E711168DE4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL8D6wvhCszzA0kPibU5HZiaDklr0Myo9AVn5cwsWoRp6zro2RVUnagDPJqRRfAObHAaQqByNXGjI7w/132","comment_is_top":false,"comment_ctime":1609897167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609897167","product_id":100002201,"comment_content":"感觉自己就是一个小白，受教了。","like_count":0},{"had_liked":false,"id":270533,"user_name":"吕超","can_delete":false,"product_type":"c1","uid":1740409,"ip_address":"","ucode":"B36883984BE16B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8e/79/f9d5dd3a.jpg","comment_is_top":false,"comment_ctime":1609152166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609152166","product_id":100002201,"comment_content":"看这些书的大牛们段位都比较高了吧。我等小白入门是不是直接拿本k8s的教程来看比较好？","like_count":1},{"had_liked":false,"id":257980,"user_name":"刘匿名","can_delete":false,"product_type":"c1","uid":1319157,"ip_address":"","ucode":"CB4C1DC8C1BB31","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/f5/6cdbfa90.jpg","comment_is_top":false,"comment_ctime":1604234207,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604234207","product_id":100002201,"comment_content":"非常好的分布式系统学习资料清单，感谢！","like_count":0},{"had_liked":false,"id":210653,"user_name":"Geek_275474","can_delete":false,"product_type":"c1","uid":1813505,"ip_address":"","ucode":"BF8E6528AD55D4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLC72CCjBefgcVPeOmOwxa9qetA8JSLRftOkbTm11FOmNYKasHxqoZGXmT8FsRSSf3zyQT9lyWQKsw/132","comment_is_top":false,"comment_ctime":1587803038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587803038","product_id":100002201,"comment_content":"很多还是从基础延伸过来的，还是要把基础打牢啊","like_count":0},{"had_liked":false,"id":168138,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1578017576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578017576","product_id":100002201,"comment_content":"感谢总结","like_count":0},{"had_liked":false,"id":166244,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1577422420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577422420","product_id":100002201,"comment_content":"没有看完，感觉体系太庞大了，还有待后续慢慢研究了","like_count":0},{"had_liked":false,"id":164859,"user_name":"攻城狮Ra","can_delete":false,"product_type":"c1","uid":1681051,"ip_address":"","ucode":"4D6F97A6481166","user_header":"https://static001.geekbang.org/account/avatar/00/19/a6/9b/20b9fce3.jpg","comment_is_top":false,"comment_ctime":1577101343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577101343","product_id":100002201,"comment_content":"多么巨大的技术栈，生命不止，奋斗不息","like_count":0},{"had_liked":false,"id":163884,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1193306,"ip_address":"","ucode":"DD4144C6509258","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/5a/7431e82e.jpg","comment_is_top":false,"comment_ctime":1576818304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576818304","product_id":100002201,"comment_content":"路漫漫其修远兮，吾将上下而求索。","like_count":0},{"had_liked":false,"id":163178,"user_name":"aiueo","can_delete":false,"product_type":"c1","uid":1230099,"ip_address":"","ucode":"96100CD14AB501","user_header":"https://static001.geekbang.org/account/avatar/00/12/c5/13/99baef26.jpg","comment_is_top":false,"comment_ctime":1576666389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576666389","product_id":100002201,"comment_content":"看了耗哥介绍图书清单，现在慢慢的发现，自己学的知识只是冰山一角，谢谢耗哥的宝贵经验，会让我少走不少弯路。我也喜欢学无止境。","like_count":0},{"had_liked":false,"id":154250,"user_name":"junshuaizhang","can_delete":false,"product_type":"c1","uid":1101502,"ip_address":"","ucode":"5734A9BEA03149","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/be/5cf3f1a0.jpg","comment_is_top":false,"comment_ctime":1574397659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574397659","product_id":100002201,"comment_content":"这篇文章足够我咀嚼千遍","like_count":0},{"had_liked":false,"id":111964,"user_name":"瀚海星尘","can_delete":false,"product_type":"c1","uid":1024461,"ip_address":"","ucode":"90F418299EA3BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","comment_is_top":false,"comment_ctime":1562643697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562643697","product_id":100002201,"comment_content":"路漫漫其修远兮！","like_count":0},{"had_liked":false,"id":108303,"user_name":"Artificialding","can_delete":false,"product_type":"c1","uid":1249014,"ip_address":"","ucode":"CBF7AD5897BDB6","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/f6/7e82f445.jpg","comment_is_top":false,"comment_ctime":1561715434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561715434","product_id":100002201,"comment_content":"从第一篇看下来，真的越来越佩服…<br>知识罗列全面，脉络清晰，各种软件历史更是随手拈来…<br>还是加入的太晚了🥺","like_count":0},{"had_liked":false,"id":102704,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1560298380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560298380","product_id":100002201,"comment_content":"分布式系统的内容涵盖范围非常广，其中分布式系统构建的一个重要问题来源于网络的非同构和不稳定性，因此分布系统要在不可信赖的网络上建立可信赖的系统，就需要我们从设计上来考虑分布式系统的错误处理。<br>最后对分布式系统的学习是一个长期和持续的事情，真正是终身学习。","like_count":0},{"had_liked":false,"id":63661,"user_name":"吕显超","can_delete":false,"product_type":"c1","uid":1078559,"ip_address":"","ucode":"C2DB2E1986841E","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/1f/783801f9.jpg","comment_is_top":false,"comment_ctime":1548441722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548441722","product_id":100002201,"comment_content":"2002年，我小学二年级。","like_count":0},{"had_liked":false,"id":55529,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1546224086,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546224086","product_id":100002201,"comment_content":"感觉一下子变成了一条小船，漂泊在分布式系统的汪洋大海之中。希望自己能慢慢地变长一条鲨鱼，深海是自己的猎场。","like_count":0},{"had_liked":false,"id":55486,"user_name":"Shirley","can_delete":false,"product_type":"c1","uid":1069889,"ip_address":"","ucode":"15A7AEF7DE4E41","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/41/c2c205b4.jpg","comment_is_top":false,"comment_ctime":1546214855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546214855","product_id":100002201,"comment_content":"精彩绝伦，读过最好的一篇分布式概论跟资料推荐。","like_count":0},{"had_liked":false,"id":32204,"user_name":"laputa","can_delete":false,"product_type":"c1","uid":1230942,"ip_address":"","ucode":"862A2B3D493DCF","user_header":"","comment_is_top":false,"comment_ctime":1539483764,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539483764","product_id":100002201,"comment_content":"谢谢整理这么多优秀的资料，一个小勘误：<br>文中提到 making reliable distributed systems in the presence of software errors 时说是一本书，但实际上这个是Joe Armstrong 的博士论文。论文一共有295页，跟一本书页差不多了😄","like_count":0},{"had_liked":false,"id":17050,"user_name":"maple","can_delete":false,"product_type":"c1","uid":1161420,"ip_address":"","ucode":"5BB0F922313B96","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/cc/21e50c77.jpg","comment_is_top":false,"comment_ctime":1532397339,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1532397339","product_id":100002201,"comment_content":"👍","like_count":0},{"had_liked":false,"id":15189,"user_name":"文武木子","can_delete":false,"product_type":"c1","uid":1015986,"ip_address":"","ucode":"348752BDECD65F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/b2/2e9f442d.jpg","comment_is_top":false,"comment_ctime":1530972685,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1530972685","product_id":100002201,"comment_content":"分布式会使系统复杂化","like_count":0},{"had_liked":false,"id":12242,"user_name":"qimiguang","can_delete":false,"product_type":"c1","uid":1001275,"ip_address":"","ucode":"B95CC4A96D932F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/3b/963a3a80.jpg","comment_is_top":false,"comment_ctime":1528713609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1528713609","product_id":100002201,"comment_content":"耗子哥，我看你之前在blog写的《分布式系统的事务处理》时，有点疑惑。我之前的理解是 2PC 协议是为了保证分布式存储的多 replicas 的数据副本一致性问题的，但是看那篇文章，说是保证分布式事务的 ACID 的，求解惑，谢谢。","like_count":0},{"had_liked":false,"id":11419,"user_name":"Junc","can_delete":false,"product_type":"c1","uid":1005218,"ip_address":"","ucode":"3D5E7D6162B5CB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/a2/e1983c34.jpg","comment_is_top":false,"comment_ctime":1528124388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1528124388","product_id":100002201,"comment_content":"非常受鼓舞！  从做技术的第一天起，就决定做一个终身学习者","like_count":0},{"had_liked":false,"id":9195,"user_name":"magict4","can_delete":false,"product_type":"c1","uid":1043789,"ip_address":"","ucode":"CB6F063D881AAC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","comment_is_top":false,"comment_ctime":1526665759,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526665759","product_id":100002201,"comment_content":"关于 Dynamo，希望大家不要把它跟 DynamoDB 等同起来。DynamoDB 提供两种读模式。一种是 Eventually Consistent Reads，另外一种是 Stongly Consistent Reads。我的理解是，前一种是 AP，后一种是 CP。","like_count":0},{"had_liked":false,"id":5545,"user_name":"Peter时光机","can_delete":false,"product_type":"c1","uid":1033515,"ip_address":"","ucode":"9612140CE1F974","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/2b/90d60b99.jpg","comment_is_top":false,"comment_ctime":1523495788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1523495788","product_id":100002201,"comment_content":"感谢 下一步学习计划","like_count":0},{"had_liked":false,"id":3340,"user_name":"Alex X","can_delete":false,"product_type":"c1","uid":1026255,"ip_address":"","ucode":"C1738595CC94E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/cf/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1519116170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1519116170","product_id":100002201,"comment_content":"干货！值得订阅","like_count":0},{"had_liked":false,"id":2257,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1516515193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1516515193","product_id":100002201,"comment_content":"分布式系统经典，感觉像code complete","like_count":0},{"had_liked":false,"id":2116,"user_name":"uptoknow","can_delete":false,"product_type":"c1","uid":1008864,"ip_address":"","ucode":"8A280951C95AEC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELImyOUmrVjSSDWjZvE0E6fE3zibBXJ2HlLeMQd7OUN8rOyvxv9asw9iaE2KxJ9xpqbbqicPsxA2VEtw/132","comment_is_top":false,"comment_ctime":1515947163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1515947163","product_id":100002201,"comment_content":"这些书籍资料够学习几年了","like_count":0},{"had_liked":false,"id":1963,"user_name":"ShawnL","can_delete":false,"product_type":"c1","uid":1017051,"ip_address":"","ucode":"45E24DF69F9E80","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/db/ef93601d.jpg","comment_is_top":false,"comment_ctime":1515286051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1515286051","product_id":100002201,"comment_content":"非常感谢","like_count":0},{"had_liked":false,"id":1849,"user_name":"夜行观星","can_delete":false,"product_type":"c1","uid":1010389,"ip_address":"","ucode":"C880CB39033929","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6a/d5/73c75eb3.jpg","comment_is_top":false,"comment_ctime":1514853120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1514853120","product_id":100002201,"comment_content":"正在看科勒普曼的书，受益颇多。任重道远，刚开始学习分布式系统。","like_count":0}]}