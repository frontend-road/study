{"id":535253,"title":"51｜RESTful Web Services（15）：为什么选择在第一个测试之后就开始重构？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p>目前我们的架构愿景如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/59/24/59ee2d534a4ae87623a736157e848924.jpg?wh=2284x1285\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/2e/a4/2ef7e84ba450b36d1df67cfce9e61da4.jpg?wh=2284x1285\" alt=\"\"></p><p>任务列表如下：</p><ul>\n<li>\n<p>ResourceRouter</p>\n<ul>\n<li>\n<p>将Reosurce Method的返回值包装为Response对象</p>\n<ul>\n<li>根据与Path匹配结果，降序排列RootResource，选择第一个的RootResource</li>\n<li>如果没有匹配的RootResource，则构造404的Response</li>\n<li>如果返回的RootResource中无法匹配剩余Path，则构造404的Response</li>\n<li>如果ResourceMethod返回null，则构造204的Response</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><p>代码目前是：</p><pre><code>class DefaultResourceRouter implements ResourceRouter {\n    private Runtime runtime;\n    private List&lt;RootResource&gt; rootResources;\n    public DefaultResourceRouter(Runtime runtime, List&lt;RootResource&gt; rootResources) {\n        this.runtime = runtime;\n        this.rootResources = rootResources;\n    }\n    @Override\n    public OutboundResponse dispatch(HttpServletRequest request, ResourceContext resourceContext) {\n        String path = request.getServletPath();\n        UriInfoBuilder uri = runtime.createUriInfoBuilder(request);\n        Optional&lt;RootResource&gt; matched = rootResources.stream().map(resource -&gt; new Result(resource.getUriTemplate().match(path), resource))\n                .filter(result -&gt; result.matched.isPresent()).map(Result::resource)\n                .findFirst();\n        Optional&lt;ResourceMethod&gt; method = matched.flatMap(resource -&gt; resource.match(path, request.getMethod(),\n                Collections.list(request.getHeaders(HttpHeaders.ACCEPT)).toArray(String[]::new), uri));\n        GenericEntity&lt;?&gt; entity = method.map(m -&gt; m.call(resourceContext, uri)).get();\n        return (OutboundResponse) Response.ok(entity).build();\n    }\n    record Result(Optional&lt;UriTemplate.MatchResult&gt; matched, RootResource resource) {\n    }\n}\n\n</code></pre><h2>视频演示</h2><p>下面进入今日的开发：</p><p><video poster=\"https://media001.geekbang.org/d585db7eb1014ff0bea4a04665a7e388/snapshots/e799213685144e37b236a9a111fd3a16-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/56ab0f3e-181c817b449-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/b63a88e63e0b43318ba95aca22ebbb6b/447bf72ed2954e679197eb6200ecc176-ea944facbb1eee93b1e22f78ed34970f-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>我们为什么选择在第一个测试之后就开始重构？</p><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码分享出来。相信经过你的思考与实操，学习效果会更好！</p><!-- [[[read_end]]] -->","neighbors":{"left":{"article_title":"50｜RESTful Web Services（14）：分解任务与Setup测试","id":535249},"right":{"article_title":"52｜RESTful Web Services（16）：重构手法之设计方法名的名称","id":535254}},"comments":[{"had_liked":false,"id":353977,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1510910,"ip_address":"四川","ucode":"FC7849B6F0FA9F","user_header":"https://static001.geekbang.org/account/avatar/00/17/0d/fe/4e5ba578.jpg","comment_is_top":false,"comment_ctime":1659967376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659967376","product_id":100109401,"comment_content":"降序排列不应该值大的在前面吗？","like_count":0},{"had_liked":false,"id":353972,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1510910,"ip_address":"四川","ucode":"FC7849B6F0FA9F","user_header":"https://static001.geekbang.org/account/avatar/00/17/0d/fe/4e5ba578.jpg","comment_is_top":false,"comment_ctime":1659964360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659964360","product_id":100109401,"comment_content":"因为测试的setup部分都是相同的，如果不重构测试代码就有很多重复，且难以理解。","like_count":0},{"had_liked":false,"id":351159,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1657581620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657581620","product_id":100109401,"comment_content":"原来 inline 的目的是让代码更紧凑","like_count":0}]}