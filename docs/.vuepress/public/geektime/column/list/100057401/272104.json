{"id":272104,"title":"02｜强一致性：那么多数据一致性模型，究竟有啥不一样？","content":"<p>你好，我是王磊，你也可以叫我Ivan。</p><p>我们经常会听到说，分布式数据库的一个优势在于，它能够支持NoSQL做不到的强一致性。你怎么看待这件事儿呢？</p><p>显然，要来分析这个问题，我们首先得明白“强一致性”意味着什么。</p><p>我也问过很多身边的朋友，他们的答案都不太一样。有人说，只要使用了Paxos或者Raft算法，就可以实现强一致性；也有人说，根据CAP原理只能三选二，分区容忍性和高可用性又是必不可少的，所以分布式数据库是做不到强一致性的。可是，这些观点或多或少都是有问题的。</p><p>那么，今天我们就来讲讲什么是“强一致性”。</p><p>一直以来，在“分布式系统”和“数据库”这两个学科中，一致性（Consistency）都是重要概念，但它表达的内容却并不相同。</p><p>对于分布式系统而言，一致性是在探讨当系统内的一份逻辑数据存在多个物理的数据副本时，对其执行读写操作会产生什么样的结果，这也符合CAP理论对一致性的表述。</p><p>而在数据库领域，“一致性”与事务密切相关，又进一步细化到ACID四个方面。其中，I所代表的隔离性（Isolation），是“一致性”的核心内容，研究的就是如何协调事务之间的冲突。</p><p>因此，当我们谈论分布式数据库的一致性时，实质上是在谈论<strong>数据一致性</strong>和<strong>事务一致性</strong>两个方面。这一点，从Google Spanner对其外部一致性（External Consistency）的<a href=\"https://cloudplatform.googleblog.com/2018/01/why-you-should-pick-strong-consistency-whenever-possible.html\">论述</a>中也可以得到佐证。</p><!-- [[[read_end]]] --><h2>数据一致性</h2><p>今天，我会先介绍数据一致性，下一讲中，我再为你讲解事务一致性以及它们之间的关系。</p><p>包括分布式数据库在内的分布式存储系统，为了避免设备与网络的不可靠带来的影响，通常会存储多个数据副本。逻辑上的一份数据同时存储在多个物理副本上，自然带来了数据一致性问题。</p><p>讨论数据一致性还有一个前提，就是同时存在读操作和写操作，否则也是没有意义的。把两个因素加在一起，就是多副本数据上的一组读写策略，被称为“一致性模型”（Consistency Model）。一致性模型数量很多，让人难以分辨。为了便于你理解，我先建立一个简单的分析框架。</p><p>这里，我要借用论文“The many faces of consistency”中的两个概念，状态一致性（State Consistency）和操作一致性（Operation Consistency）。不要慌，这不是新的一致性模型，它们只是观察数据一致性的两个视角。</p><ul>\n<li>状态一致性是指，数据所处的客观、实际状态所体现的一致性；</li>\n<li>操作一致性是指，外部用户通过协议约定的操作，能够读取到的数据一致性。</li>\n</ul><h2>状态视角</h2><p>从状态的视角来看，任何变更操作后，数据只有两种状态，所有副本一致或者不一致。在某些条件下，不一致的状态是暂时，还会转换到一致的状态，而那些永远不一致的情况几乎不会去讨论，所以习惯上大家会把不一致称为“弱一致”。相对的，一致就叫做“强一致”了。</p><p>下面，我以MySQL为例来说明状态视角的“强一致”。</p><h3>强一致性：MySQL全同步复制</h3><p>现在有一个MySQL集群，由一主两备三个节点构成，那么在全同步复制（Fully Synchronous Replication）模式下，用户与MySQL交互的过程是这样的。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/1d/eb572abd30b3f77cb001c339ba37851d.jpg?wh=2700*1068\" alt=\"\"></p><p>在该模式下，主库与备库同步binlog时，主库只有在收到两个备库的成功响应后，才能够向客户端反馈提交成功。</p><p>显然，用户获得响应时，主库和备库的数据副本已经达成一致，所以后续的读操作肯定是没有问题的，但这种模式的副作用非常大，体现在以下两点。</p><p>第一，<strong>性能差</strong>。主库必须等到两个备库均返回成功后，才能向用户反馈提交成功。图中由于网络阻塞，“备库2”稍晚于“备库1”返回响应，增加了数据库整体的延时。而下一次，拖后腿的可能变成“备库1”。总之，主库的响应时间取决于两个备库中延时最长的那个。</p><p>第二，<strong>可用性问题</strong>。我们在第1讲提到过可用性概念，任何设备都有可能出现故障，尤其是x86这样的通用商业设备，故障率会更高。但在全同步复制模式下，集群中的三个节点被串联起来，如果单机可用性是95%，那么集群整体的可用性就是85.7%（95%*95%*95%=85.7%），跟单机相比反而降低了。</p><p>集群规模越大，这些问题就越严重，所以全同步复制模式在生产系统中也很少使用。更进一步说，在工程实践中，实现状态视角的强一致性需要付出的代价太大，尤其是与可用性有无法回避的冲突，所以很多产品选择了状态视角的弱一致性。</p><h3>弱一致性：NoSQL最终一致性</h3><p>NoSQL产品是应用弱一致性的典型代表，但对弱一致性的接受仍然是有限度的，这就是BASE理论中的E所代表的最终一致性（Eventually Consistency），弱于最终一致性的产品就几乎没有了。</p><p>对于最终一致性，你可以这样理解：在主副本执行写操作并反馈成功时，不要求其他副本与主副本保持一致，但在经过一段时间后这些副本最终会追上主副本的进度，重新达到数据状态的一致。</p><p>你再仔细推敲一下，是不是觉得这个定义还有点含糊？“经过一段时间”到底是多久呢？几秒还是几分钟？如果是一个不确定的数值，怎么在工程中使用呢？</p><p>这就需要我们从操作视角来分析了。</p><h2>操作视角</h2><p>最终一致性，在语义上包含了很大的不确定性，所以很多时候并不是直接使用，而是加入一些限定条件，也就衍生出了若干种一致性模型。因为它们是在副本不一致的情况下，进行操作层面的封装来对外表现数据的状态，所以都可以纳入操作视角。</p><p>接下来，我会挑选5个常见的一致性模型逐一讲解。</p><h3>写后读一致性</h3><p>首先来说<strong>“写后读一致性”</strong>（Read after Write Consistency），它也称为“读写一致性”，或“读自己写一致性”（Read My Writes Consistency）。你可能觉得最后一个名字听上去有些奇怪，但它却最准确地描述了这种一致性模型的使用效果。</p><p>我还是用一个例子来说明。</p><p>小明很喜欢在朋友圈分享自己的生活。这天是小明和女友小红的相识纪念日，小明特意在朋友圈分享了一张两人的情侣照。小明知道小红会很在意，特意又刷新了一下朋友圈，确认照片分享成功。</p><p>你是否意识到这个过程中系统已经实现了“写后读一致性”？我画了张流程图来表示这个过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/dc/7df116a9b10b1d9ce0b5a8400c00eedc.jpg?wh=2700*881\" alt=\"\"></p><p>小明发布照片的延时极短，用户体验很好。这是因为数据仅被保存在主副本R1上，就立即反馈保存成功。而其他副本在后台异步更新，由于网络的关系每个副本更新速度不同，在T2时刻上海的两个副本达成一致。从过程来看，这与前面所说的“最终一致性”完全相符。</p><p>要特别注意的是，小明有一个再次刷新朋友圈的动作，这时如果访问副本R2，由于其尚未完成同步，情侣照将会消失，小明就会觉得自己的照片被弄丢了。此处，我们假定系统可以通过某种策略由写入节点的主副本R1负责后续的读取操作，这样就实现了写后读一致性，可以保证小明再次读取到照片。</p><p>自己写入成功的任何数据，下一刻一定能读取到，其内容保证与自己最后一次写入完全一致，这就是“读自己写一致性”名字的由来。当然，从旁观者角度看，可以称为“读你写一致性”（Read Your Writes Consistency），有些论文确实采用了这个名称。</p><h3>单调读一致性</h3><p>但是，小明发完朋友圈之后，小红一定能看到照片吗？会不会发生异常呢？</p><p>这次确实出问题了。</p><p>此时，小红也在刷朋友圈，看到了小明刚刚分享的照片，非常开心。然后，小红收到一条信息，简单回复了一下，又回到朋友圈再次刷新，发现照片竟然不见了！小红很生气，打电话质问小明，为什么这么快就把照片删掉？小明听了一脸蒙，心想我没有删除呀。</p><p>你猜这中间发生了什么呢？我用另一张流程图来演示这种异常。</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/a8/b138fa2ebe6c6cc60bd7dcbf4fa06da8.jpg?wh=2700*1196\" alt=\"\"></p><p>在小明发布照片后的瞬间，小红也刷新了朋友圈，此时读取到副本R1，所以小红看到了照片；片刻之后，小红再次刷新，此时读取到的副本是R2，于是照片消失了。小红以为小明删除了照片，但实际上这完全是程序错误造成的，数据向后回滚，出现了“时光倒流”。</p><p>想要排除这种异常，系统必须实现<strong>单调读一致性</strong>（Monotonic Read Consistency）。关于单调读一致性的定义，常见的解释是这样的：一个用户一旦读到某个值，不会读到比这个值更旧的值。</p><p>是不是感觉有点蒙？让我来解释一下。</p><p>假如，变量X被赋值三次，依次是10、20、30；之后读取变量X，如果第一次读到了20，那下一次只有读到20或30才是合理的。因为在第一次读到20的一刻，意味着10已经是过期数据，没有意义了。</p><p>实现单调读一致性的方式，可以是将用户与副本建立固定的映射关系，比如使用哈希算法将用户ID映射到固定副本上，这样避免了在多个副本中切换，也就不会出现上面的异常了。</p><h3>前缀一致性</h3><p>但是，在一些更复杂的场景下还是会出现时间的扭曲。我再用一个例子来说明。</p><p>这天小明去看CBA总决赛，刚开球小明就拍了一张现场照片发到朋友圈，想要炫耀一下。小红也很喜欢篮球，但临时有事没有去现场，就在评论区问小明：“现在比分是多少？”小明回复：“4:2。”</p><p>小明的同学，远在加拿大的小刚，却看到了一个奇怪的现象，评论区先出现了小明的回复“4:2。”，而后才刷到小红的评论“现在比分是多少？”。难道小明能够预知未来吗？</p><p>这是什么原因呢？我们还是看图说话。</p><p><img src=\"https://static001.geekbang.org/resource/image/26/23/2635951c5260b0b97de5fed08f368a23.jpg?wh=2700*1725\" alt=\"\"></p><p>小明和小红的评论分别写入了节点N1和N2，但是它们与N3同步数据时，由于网络传输的问题，N3节点接收数据的顺序与数据写入的顺序并不一致，所以小刚是先看到答案后看到问题。</p><p>显然，问题与答案之间是有因果关系的，但这种关系在复制的过程中被忽略了，于是出现了异常。</p><p>保持这种因果关系的一致性，被称为<strong>前缀读</strong>或<strong>前缀一致性</strong>（Consistent Prefix）。要实现这种一致性，可以考虑在原有的评论数据上增加一种显式的因果关系，这样系统可以据此控制在其他进程的读取顺序。</p><h3>线性一致性</h3><p>在“前缀一致性”的案例中，问题与答案之间存在一种显式声明，但在现实中，多数场景的因果关系更加复杂，也不可能要求全部做显式声明。</p><p>比如对于分布式数据库来说，它无法要求应用系统在每次变更操作时附带声明一下，这次变更是因为读取了哪些数据而导致的。</p><p>那么，在显式声明无法奏效的情况下，如何寻找因果关系呢？</p><p>不知道你有没有听过这句话，“你所经历的一切，造就了现在的你。”是不是有一点哲学的味道？一切对原因的推测都是主观的，之前发生的一切都可能是原因。</p><p>所以，更可靠的方式是将自然语意的因果关系转变为事件发生的先后顺序。</p><p>线性一致性（Linearizability）就是建立在事件的先后顺序之上的。在线性一致性下，整个系统表现得好像只有一个副本，所有操作被记录在一条时间线上，并且被原子化，这样任意两个事件都可以比较先后顺序。</p><p>这些事件一起构成的集合，在数学上称为具有“全序关系”的集合，而“全序”也称为“线性序”。我想，线性一致性大概就是因此得名。</p><p>但是，集群中的各个节点不能做到真正的时钟同步，这样节点有各自的时间线。那么，如何将操作记录在一条时间线上呢？这就需要一个绝对时间，也就是<strong>全局时钟</strong>。</p><p>从产品层面看，主流分布式数据库大多以实现线性一致性为目标，在设计之初或演进过程中纷纷引入了全局时钟，比如Spanner、TiDB、OceanBase、GoldenDB和巨杉等等。</p><p>工程实现上，多数产品采用单点授时（TSO），也就是从一台时间服务器获取时间，同时配有高可靠设计； 而Spanner以全球化部署为目标，因为TSO有部署范围上的限制，所以Spanner的实现方式是通过GPS和原子钟实现的全局时钟，也就是TrueTime，它可以保证在全球范围内任意节点能同时获得的一个绝对时间，误差在7毫秒以内。</p><p>但是，对于线性一致性，学术界其实是有争议的。反对者的论据来自爱因斯坦的相对论的一个重要结论，“时间是相对的”。没有绝对时间，也就不存在全序的事件顺序，不同的观察者可能对于哪个事件先发生是无法达成一致的。因此，线性一致性是有局限性的。</p><p>当然，从工程角度看，因为我们的应用场景都在经典物理学适用范围内，所以线性一致性也是适用的。</p><h3>因果一致性</h3><p>既然线性一致性不够完美，那么有没有不依赖绝对时间的方法呢？</p><p>当然是有的，这就是<strong>因果一致性</strong>（Causal Consistency）。</p><p>因果一致性的基础是<strong>偏序关系</strong>，也就是说，部分事件顺序是可以比较的。至少一个节点内部的事件是可以排序的，依靠节点的本地时钟就行了；节点间如果发生通讯，则参与通讯的两个事件也是可以排序的，接收方的事件一定晚于调用方的事件。</p><p>基于这种偏序关系，Leslie Lamport在论文“Time, Clocks, and the Ordering of Events in a Distributed System”中提出了<strong>逻辑时钟</strong>的概念。</p><p>借助逻辑时钟仍然可以建立全序关系，当然这个全序关系是不够精确的。因为如果两个事件并不相关，那么逻辑时钟给出的大小关系是没有意义的。</p><p>多数观点认为，因果一致性弱于线性一致性，但在并发性能上具有优势，也足以处理多数的异常现象，所以因果一致性也在工业界得到了应用。</p><p>具体到分布式数据库领域，CockroachDB和YugabyteDB都在设计中采用了<strong>逻辑混合时钟</strong>（Hybrid Logical Clocks），这个方案源自Lamport的逻辑时钟，也取得了不错的效果。因此，这两个产品都没有实现线性一致性，而是接近于因果一致性，其中CockroachDB将自己的一致性模型称为“No Stale Reads”。</p><p>时间对于任何一种分布式系统来说都是非常重要的，在分布式数据库中还会牵扯到数据一致性以外的很多话题，所以有关时间、全局时钟和逻辑时钟的内容，我还会在后续课程中提到并作详细讨论。</p><h2>小结</h2><p>好了，今天的内容就到这里。我们一起学习了数据一致性，希望你能够记住以下几点：</p><ol>\n<li>一致性模型林林总总，数量繁多，但我们总可以从状态和操作这两个视角来观察，进而梳理出其读写操作的不同策略。</li>\n<li>从状态视角看，数据一致性只有两种状态，强一致或弱一致，而在实际系统中强一致是非常少见的，最终一致性是弱一致性的特殊形式；</li>\n<li>从操作视角看，最终一致性可以被封装成多种一致性模型，甚至是最强的线性一致性。</li>\n<li>分布式数据库主要应用了线性一致性或因果一致性。线性一致性必须要有全局时钟，全局时钟可能来自授时服务器或者特殊物理设备（如原子钟），全局时钟的实现方式会影响到集群的部署范围；因果一致性可以通过逻辑时钟实现，不依赖于硬件，不会限制集群的部署范围。</li>\n</ol><p>今天介绍的几种一致性模型，用一致性强度来衡量的话：线性一致性强于因果一致性；而写后读一致性、单调读一致性、前缀一致性弱于前两者，但这三者之间无法比较强弱。还有一种常被提及的顺序一致性（Sequentially Consistent），其强度介于线性一致性与因果一致性之间，由于较少在分布式数据库中使用，所以并没有介绍。</p><p>综上所述，我们提到的一致性模型强度排序如下：</p><p>线性一致性 &gt; 顺序一致性 &gt; 因果一致性 &gt; { 写后读一致性，单调一致性，前缀一致性 }</p><p>此外，还有一些常见的弱一致性模型今天并没有提到，包括有限旧一致性（Bounded Staleness）、会话一致性（Session Consistency）、单调写一致性（Monotonic Write Consistency）和读后写一致性（Write Follows Read Consistency）等。如果你感兴趣，可以在Azure Cosmos DB的<a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels\">官方文档</a>找到非常详细的说明。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/af/27155b05c028b261yyc2d3c3469a3faf.jpg?wh=2700*2008\" alt=\"\"></p><h2>思考题</h2><p>课程的最后，我要给你留一道思考题。我们今天集中讨论了数据一致性，但是并没有特别强调Paxos的作用。这等于是说，Paxos不是实现强一致性的必要条件。可是，有些时候大家又会将Paxos称为一致性协议。你觉得这个“一致性协议”和数据一致性又是什么关系呢？</p><p>欢迎你在评论区留言和我一起讨论，我会在答疑篇回复这个问题。最后，谢谢你的收听，如果你身边的朋友也对强一致性或者数据一致性这个话题感兴趣，欢迎你把今天这一讲分享给他，我们一起讨论。</p>","neighbors":{"left":{"article_title":"01｜什么是分布式数据库？","id":271373},"right":{"article_title":"03｜强一致性：别再用BASE做借口，来看看什么是真正的事务一致性","id":272999}},"comments":[{"had_liked":false,"id":241356,"user_name":"chenchukun","can_delete":false,"product_type":"c1","uid":1298833,"ip_address":"","ucode":"C9F9D51F2EC7A0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibtic993snK2Drdwypz6SJajPk7g3JuEP1puDhomplXSGl9YobOp5uJZVGLRalHwNwS7cdHr3iasFbmz38GicNibknA/132","comment_is_top":false,"comment_ctime":1597277707,"is_pvip":false,"replies":[{"id":"89211","content":"你好，你的理解非常准确，点赞","user_name":"作者回复","comment_id":241356,"uid":"1602401","ip_address":"","utype":1,"ctime":1597408699,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"276475184651","product_id":100057401,"comment_content":"从状态和操作两个视角看待副本的一致性这点讲的很透彻，之前都没有考虑过这点。<br>从状态视角看，是不是只有全同步这种方式实现了强一致性，即使像paxos、raft这些实现了操作上线性一致性的算法，从状态视角看也不是强一致的。<br>然而全同步降低了系统的可用性，paxos、raft不保证所有节点状态的一致，而是通过额外的算法来保证操作视角的一致性，同时提高了系统的可用性。","like_count":64,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503723,"discussion_content":"你好，你的理解非常准确，点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597408699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241172,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1597207724,"is_pvip":true,"replies":[{"id":"89210","content":"你好，其实CAP的C也是Consistency，是多副本、单操作的数据一致性；而ACID里的C是指单副本、多操作的事务一致性。Paxos这类共识算法，可以看作是复制协议的一种，虽然有时也叫做一致性协议，但这个一致性是指Consensus。Consensus是实现数据一致性目标下的具体技术，但并不是唯一的选择。采用主从复制也可以达到同样效果，比如04讲会提到的PGXC风格的分布式数据库就是采用主从复制的方式。","user_name":"作者回复","comment_id":241172,"uid":"1602401","ip_address":"","utype":1,"ctime":1597408639,"user_name_real":"王磊(Ivan)"}],"discussion_count":5,"race_medal":0,"score":"181985834156","product_id":100057401,"comment_content":"感觉很长一段时间都被翻译给耽误了，ACID的C是一致性，强调的是数据的状态变迁的特性，CAP里的C共识，强调的是多副本条件下，多个节点怎么就数据的变动，达成共识，统一修改。<br>而paxos，raft是在牺牲一定A的条件下（多数节点存活才ok），实现C的一种多节点的通信协议，Paxos貌似不需要主节点这个角色去统一时序，Raft，zab需要主节点，它们都是实现线性一致性的方式。","like_count":42,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503665,"discussion_content":"你好，其实CAP的C也是Consistency，是多副本、单操作的数据一致性；而ACID里的C是指单副本、多操作的事务一致性。Paxos这类共识算法，可以看作是复制协议的一种，虽然有时也叫做一致性协议，但这个一致性是指Consensus。Consensus是实现数据一致性目标下的具体技术，但并不是唯一的选择。采用主从复制也可以达到同样效果，比如04讲会提到的PGXC风格的分布式数据库就是采用主从复制的方式。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597408639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/11/78/4f0cd172.jpg","nickname":"妥协","note":"","ucode":"7201DFE9C12669","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561476,"discussion_content":"其实CAP的C也是Consistency，是多副本、单操作的数据一致性；而ACID里的C是指单副本、多操作的事务一致性。Paxos这类共识算法，可以看作是复制协议的一种\n说得好","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649644908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1897062,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","nickname":"南国","note":"","ucode":"0D8D3C5F4EB8AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298738,"discussion_content":"第一次的留言确实有些问题，没表达清楚观点，不好意思呀。我的想法是这样的，个人认为CAP理论应该表达的是一个分布式系统中不能同时满足三点，可以说使用一个Raft的系统为了C而牺牲A，其次没有分布式算法是为了A而放弃C吧，这也是我说有点怪怪的理由。当然我好像有点钻表达方式的牛角尖了，见谅哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597391300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1897062,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","nickname":"南国","note":"","ucode":"0D8D3C5F4EB8AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298569,"discussion_content":"我觉得CAP理论不该用在共识算法上吧。。毕竟算法就是为了保证一致性的，说牺牲A总觉得怪怪的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597329240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1056019,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","nickname":"峰","note":"","ucode":"C53CB64E8E7D19","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1897062,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","nickname":"南国","note":"","ucode":"0D8D3C5F4EB8AE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298707,"discussion_content":"我没看到你说为什么不能的理由呢？ 说一个算法保证了时间的高效，牺牲了大量的空间这样有错吗？还是说你更习惯听tradeoff这个词������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597383931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298569,"ip_address":""},"score":298707,"extra":""}]}]},{"had_liked":false,"id":246795,"user_name":"微思","can_delete":false,"product_type":"c1","uid":1004349,"ip_address":"","ucode":"853C48AA183A7B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/53/3d/1189e48a.jpg","comment_is_top":false,"comment_ctime":1599478787,"is_pvip":true,"replies":[{"id":"90686","content":"正确������","user_name":"作者回复","comment_id":246795,"uid":"1602401","ip_address":"","utype":1,"ctime":1599485356,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":1,"score":"104678693891","product_id":100057401,"comment_content":"CAP的C是多副本、单操作的数据一致性；而ACID的C是单副本、多操作的事物一致性；","like_count":24,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505230,"discussion_content":"正确������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599485356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242232,"user_name":"孟磊","can_delete":false,"product_type":"c1","uid":1060845,"ip_address":"","ucode":"D8258AB742EC73","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/ed/102647a1.jpg","comment_is_top":false,"comment_ctime":1597644044,"is_pvip":false,"replies":[{"id":"89448","content":"你好，孟磊，谢谢你的鼓励。我在构思这个专栏的时候，就订下一个目标，就是把学术的东西和目前工业界的实践联系起来，再落到具体的工作中，比如技术选型。所以，能得到你的肯定，我很高兴。当然，对产品的关注是必不可少的，从04开始的每一讲我都会对领头羊产品做局部设计上的拆解，并且比对不同方案的优劣，不过这个领头羊并不固定，因为我想向你介绍最有特点的设计。希望你能喜欢这种组织方式，后面的课程中，期待还能收到你的反馈，我们结合问题一起讨论。","user_name":"作者回复","comment_id":242232,"uid":"1602401","ip_address":"","utype":1,"ctime":1597679484,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"78907055372","product_id":100057401,"comment_content":"和那些偏理论的课程不同，能感觉到作者对于分布式数据库的理解非常深刻，且结合了实际的金融业务，有点追剧的感觉了。 能不能拿出OceanBase goldendb这类领头羊产品给大家讲讲选型要注意的？","like_count":18,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503956,"discussion_content":"你好，孟磊，谢谢你的鼓励。我在构思这个专栏的时候，就订下一个目标，就是把学术的东西和目前工业界的实践联系起来，再落到具体的工作中，比如技术选型。所以，能得到你的肯定，我很高兴。当然，对产品的关注是必不可少的，从04开始的每一讲我都会对领头羊产品做局部设计上的拆解，并且比对不同方案的优劣，不过这个领头羊并不固定，因为我想向你介绍最有特点的设计。希望你能喜欢这种组织方式，后面的课程中，期待还能收到你的反馈，我们结合问题一起讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597679484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241804,"user_name":"南国","can_delete":false,"product_type":"c1","uid":1897062,"ip_address":"","ucode":"0D8D3C5F4EB8AE","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","comment_is_top":false,"comment_ctime":1597450779,"is_pvip":false,"replies":[{"id":"89258","content":"你好，简单的说，因果一致性是靠逻辑时钟确定偏序关系，不需要应用介入；而前缀一致性靠事件之间显式声明的依赖关系，可以在应用层处理","user_name":"作者回复","comment_id":241804,"uid":"1602401","ip_address":"","utype":1,"ctime":1597451846,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"70316927515","product_id":100057401,"comment_content":"老师，其实我还是没太懂前缀一致性和因果一致性的区别，前缀一致性是某些关系可比，并发的不可比，不也是一个偏序关系嘛？我还一直觉得这两个是一回事呢。","like_count":16,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503850,"discussion_content":"你好，简单的说，因果一致性是靠逻辑时钟确定偏序关系，不需要应用介入；而前缀一致性靠事件之间显式声明的依赖关系，可以在应用层处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597451846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241343,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1597274451,"is_pvip":false,"replies":[{"id":"89185","content":"说的很好","user_name":"作者回复","comment_id":241343,"uid":"1602401","ip_address":"","utype":1,"ctime":1597329383,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"53136882003","product_id":100057401,"comment_content":"我觉得数据一致性是从数据的用户视角出发对数据属性的描述，而paxos协议是达成共识的过程的一种实现方式，是从数据的生产者或者维护者角度出发的","like_count":12,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503716,"discussion_content":"说的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597329383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241168,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1597207188,"is_pvip":false,"replies":[{"id":"89182","content":"你好，关于第一点，我再补充一下。<br>Raft是多数派协议，从写入成功那一刻的数据状态来说，肯定不是一致的。不过，通过操作方面的封装，约定由主副本对外提供服务，所以不会体现出副本间的差异。一致性模型，除了副本的状态，还要看读写操作。最终一致性的定义，其实只是描述了副本的状态而已。我认为，一致性模型，主要还是从读写操作的效果来分析，也数据副本的一致性有关但不是强依赖。比如，如果不使用Raft，用半同步，也可以做到线性一致性。<br>第二点，我没有完全理解，咱们可以继续探讨","user_name":"作者回复","comment_id":241168,"uid":"1602401","ip_address":"","utype":1,"ctime":1597328895,"user_name_real":"王磊(Ivan)"}],"discussion_count":3,"race_medal":0,"score":"23072043668","product_id":100057401,"comment_content":"强一致性和弱一致性的定义感觉还是不够准确。<br>1. MySQL这个例子是全同步复制，实际上Raft也是强一致性算法，但它在应答客户端的请求成功后并不保证多副本之间暂时的数据一致性，有可能数据存在不同。只不过在收到读请求的时候会转发给Master，保证强一致性。<br><br>2. 弱一致性是说有可能不同用户看到的state不一样，而不仅仅是副本之间数据不一致。可能A先比B发起请求，但是是B的修改却被A覆盖了<br>如果按作者的","like_count":5,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503664,"discussion_content":"你好，关于第一点，我再补充一下。\nRaft是多数派协议，从写入成功那一刻的数据状态来说，肯定不是一致的。不过，通过操作方面的封装，约定由主副本对外提供服务，所以不会体现出副本间的差异。一致性模型，除了副本的状态，还要看读写操作。最终一致性的定义，其实只是描述了副本的状态而已。我认为，一致性模型，主要还是从读写操作的效果来分析，也数据副本的一致性有关但不是强依赖。比如，如果不使用Raft，用半同步，也可以做到线性一致性。\n第二点，我没有完全理解，咱们可以继续探讨","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597328895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1905171,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","nickname":"扩散性百万咸面包","note":"","ucode":"6D703D51553B42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298785,"discussion_content":"老师后面讲的这个是对的。只是文章中在对强一致性进行解释的时候，只讲了Synchronous Replication。所以我补充一下。\n第二点我其实想说的是弱一致性，不仅仅是副本之间数据暂时不一致，而是读写层面的不一致。比如弱一致性系统，有可能A写入了某个值，B去读这个值并不能读到最新的值。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597398824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066752,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","nickname":"piboye","note":"","ucode":"7CFD8712857A85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553776,"discussion_content":"线性一致性，没有cas这种原语，是不是也会存在写覆盖啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646063156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242520,"user_name":"李鑫磊","can_delete":false,"product_type":"c1","uid":1101615,"ip_address":"","ucode":"D06517CFCEEE00","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/2f/4f89f22a.jpg","comment_is_top":false,"comment_ctime":1597749048,"is_pvip":false,"replies":[{"id":"89482","content":"你好，李鑫磊，你把多数据副本的同步过程说的很形象。不过ACID里的C是说事务一致性，和数据一致性还是不同的，03讲有具体的介绍，我推荐你读一下。数据一致性中还有一点很重要，就是操作之间的先后次序判断，这也是为什么我们说，线性一致性必须要有全局时钟支持。也许02中的表述还不够直观，我建议关注一下第12讲，说不定会有收获","user_name":"作者回复","comment_id":242520,"uid":"1602401","ip_address":"","utype":1,"ctime":1597754488,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"18777618232","product_id":100057401,"comment_content":"线性一致性和状态一致性（ACID 中的 C），到底有啥不一样？我理解的线性一致性是最终一致性里面最强的一致性模型。线性一致性和状态一致性的区别在于：读的那一瞬间，数据在多个副本之间是不是一样的；一样的就是状态一致性。线性一致性，我的理解：可以在多个数据副本之上抽象出一条逻辑上的时间轴，数据按提交到系统时的时间，从左到右依次排开；数据刚排在时间轴上时是灰色的，只有数据在多个副本之间同步完成，数据在时间轴上的点才回被“点亮”；读的时候，只能读到这样的数据：其在时间轴上已经被“点亮”了，且其左边的所有数据都已被“点亮”了。Ivan，你说是不是这样滴？","like_count":4,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504028,"discussion_content":"你好，李鑫磊，你把多数据副本的同步过程说的很形象。不过ACID里的C是说事务一致性，和数据一致性还是不同的，03讲有具体的介绍，我推荐你读一下。数据一致性中还有一点很重要，就是操作之间的先后次序判断，这也是为什么我们说，线性一致性必须要有全局时钟支持。也许02中的表述还不够直观，我建议关注一下第12讲，说不定会有收获","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597754488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241165,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1597206264,"is_pvip":false,"replies":[{"id":"89183","content":"高级别的一致性模型，可以基于Raft算法复制，但使用主从复制也是可以的😊","user_name":"作者回复","comment_id":241165,"uid":"1602401","ip_address":"","utype":1,"ctime":1597328994,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"18777075448","product_id":100057401,"comment_content":"Paxos本质上是共识算法，主要是用来维护数据库副本的一致性&#47;权威性。而今天讲的一致性是从用户角度来谈，而不局限于是数据副本。<br>同时，今天讲的一致性也需要共识算法Paxos，Raft来保证。比如选举，如何才能选出正确的Leader等等。","like_count":4,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503662,"discussion_content":"高级别的一致性模型，可以基于Raft算法复制，但使用主从复制也是可以的😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597328994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271726,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1609769889,"is_pvip":false,"replies":[{"id":"98668","content":"嗯，DDIA非常值得大家去读一读","user_name":"作者回复","comment_id":271726,"uid":"1602401","ip_address":"","utype":1,"ctime":1609975948,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"14494671777","product_id":100057401,"comment_content":"paxos 是共识算法，是协调达成一致的过程，对某个状态达成一致的过程<br>数据一致性是指对经过一系列的操作，数据外呈现的状态是一致的<br><br>老师把数据一致性分解的更细了，这块在《设计数据密集型应用》里面也有细致讲到","like_count":3,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513024,"discussion_content":"嗯，DDIA非常值得大家去读一读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609975948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241540,"user_name":"南国","can_delete":false,"product_type":"c1","uid":1897062,"ip_address":"","ucode":"0D8D3C5F4EB8AE","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","comment_is_top":false,"comment_ctime":1597329778,"is_pvip":false,"replies":[{"id":"89218","content":"你好，CAP中的C就是Consistency，是数据一致性，也是我们所说的操作视角的一致性，这里包含的多副本和读写策略两层含义。共识算法是复制协议层面的内容，并不一定对操作做严格定义。比如，就算我们使用Raft算法，但是如果开放了Follower读，也有可能达不到线性一致性或因果一致性的。事实上，CockroachDB的Follower读就是这样的。","user_name":"作者回复","comment_id":241540,"uid":"1602401","ip_address":"","utype":1,"ctime":1597410925,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"14482231666","product_id":100057401,"comment_content":"先回答问题，“一致性协议”和数据一致性的关系是什么？很多留言的朋友都提到了一个重要的问题，即Paxos是一个共识算法，共识算法就是全局节点就某一事实达成一致，而数据一致中的数据我觉得可以理解为共识算法的日志，从此看来数据一致就是一致性协议的一个子集；而共识算法还包括很多其他部分，比如容错，日志压缩，集群变更等。<br>还有就是这些共识算法基本都遵从quorum的，所以都可以看成操作一致性，这也是用户所看到的东西是一致的，这不也是我们希望的吗？毕竟数据到底到没到全部节点不重要，用户看到才是王道，此类例子很多，比如zk，那么是否可以理解为操作一致性（即物理上的强一致性）没什么发挥空间呢？<br>还有CAP中C到底是指操作一致性还是状态一致性呢？<br>麻烦老师啦","like_count":3,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503768,"discussion_content":"你好，CAP中的C就是Consistency，是数据一致性，也是我们所说的操作视角的一致性，这里包含的多副本和读写策略两层含义。共识算法是复制协议层面的内容，并不一定对操作做严格定义。比如，就算我们使用Raft算法，但是如果开放了Follower读，也有可能达不到线性一致性或因果一致性的。事实上，CockroachDB的Follower读就是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597410925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241071,"user_name":"叫我皮卡丘","can_delete":false,"product_type":"c1","uid":1112916,"ip_address":"","ucode":"619C7E19532CFE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/cy7THOLNqgY6bibXapV9sdqOLyU2PWu9mgDFrtenYwjZYIDMzonmyLSu5mehCd3kR8zxU0UCssxnFDcbVZSQkpA/132","comment_is_top":false,"comment_ctime":1597166583,"is_pvip":false,"replies":[{"id":"89186","content":"你好，即使是Raft协议，如果开放follower读，也会出现不一致的情况，所以读写策略还是很重要的。","user_name":"作者回复","comment_id":241071,"uid":"1602401","ip_address":"","utype":1,"ctime":1597329488,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"14482068471","product_id":100057401,"comment_content":"我认为是数据的一致性依靠paxos,raft等一致性算法来保证","like_count":3,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503634,"discussion_content":"你好，即使是Raft协议，如果开放follower读，也会出现不一致的情况，所以读写策略还是很重要的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597329488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332101,"user_name":"岁月如哥","can_delete":false,"product_type":"c1","uid":1102926,"ip_address":"","ucode":"B7B870F6FFD6F0","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/4e/586b7bc6.jpg","comment_is_top":false,"comment_ctime":1643016542,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5937983838","product_id":100057401,"comment_content":"从系统内部看，绝对意义上的多副本数据状态一致，应该是不存在的，<br>所有一致性都是基于外部观察者视角的数据状态一致，比如MySQL强同步也是从客户端操作角度去看的","like_count":1},{"had_liked":false,"id":328072,"user_name":"郑泽洲","can_delete":false,"product_type":"c1","uid":1447496,"ip_address":"","ucode":"EA1B540A040875","user_header":"https://static001.geekbang.org/account/avatar/00/16/16/48/01567df1.jpg","comment_is_top":false,"comment_ctime":1640516964,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5935484260","product_id":100057401,"comment_content":"在极客上几年下来学了20多门了，这课算是复习，一年前学习的任杰老师的《分布式金融架构课》有课也是讲同样的知识点。不得不说，还是王磊老师说的比较清楚：<br>1. 举了小明和小红发朋友圈这样生动的例子，比干啃理论效果要好点。<br>2. 五个一致性讲解排列地好，是层层递进的关系，是路线图。<br>3. 极客时间的典型学习场景是什么？是996的职场人士利用有限业务时间的学习。建立他们头脑中大场景和路线图，比深挖某个知识点要更重要，通俗地说，就是给张地图，扫清迷雾，引起兴趣，至于某个点上有没有深挖三尺，显示老师深厚功力，我觉得只能是第二重要，感兴趣的学生自己会去深挖的。<br>就事论事。任杰老师那课的领域驱动设计和时序数据库等还是非常值得一读的。也希望王磊老师能保持这样的教学风格，让学生能够学习得更轻松有效。","like_count":1},{"had_liked":false,"id":284454,"user_name":"Geek_fd8c4b","can_delete":false,"product_type":"c1","uid":1563494,"ip_address":"","ucode":"8C49058F81A5ED","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3kRFh2oibA8ytkKAPpj7QCtYjQWU9nqaQyLV4mjZg7mJf9xzQjsuodlMIpFkusUUgmJthUj7hDaKicYicia2m8ibyyA/132","comment_is_top":false,"comment_ctime":1616252883,"is_pvip":false,"replies":[{"id":"105500","content":"嗯，这里并不是说一定要应用日志，等待备库日志落盘的开销同样是一致性的成本。","user_name":"作者回复","comment_id":284454,"uid":"1602401","ip_address":"","utype":1,"ctime":1620168809,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"5911220179","product_id":100057401,"comment_content":"老师 你好，我记得MySQL是没有全同步复制 吧，MySQL的半同步复制最多是从库将接受到的binlog写入relay log,并不需要从库应用完成relay log，主库才能提交这个事务，所以严格意义来讲，MySQL 主库和从库很难在一个时间点达到完全的数据一致","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517352,"discussion_content":"嗯，这里并不是说一定要应用日志，等待备库日志落盘的开销同样是一致性的成本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620168809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242943,"user_name":"真名不叫黄金","can_delete":false,"product_type":"c1","uid":1174066,"ip_address":"","ucode":"FB611FC98F5BA7","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/32/1fd102ec.jpg","comment_is_top":false,"comment_ctime":1597899156,"is_pvip":false,"replies":[{"id":"89611","content":"TiDB基于TSO也能做到线性一致性，但是隔离级别只支持到SI，比Spanner的外部一致性还是要低一些","user_name":"作者回复","comment_id":242943,"uid":"1602401","ip_address":"","utype":1,"ctime":1597975148,"user_name_real":"王磊(Ivan)"}],"discussion_count":2,"race_medal":0,"score":"5892866452","product_id":100057401,"comment_content":"老师讲得很好，感谢分享！<br>不过老师说只有Spanner实现了真正的强一致性，而前一篇讲到一致性其实分为状态一致性与操作一致性，我得理解是状态一致性是内部的，而操作一致性是对client的，老师说Spanner实现的强一致性，是指操作一致性吧？因为据我了解Spanner也是采用大多数成功，比如2 of 3成功后即返回写入成功，那么有一个副本其实可能处于不同步状态，那么Spanner其实是不满足状态层面的强一致性的？<br>不过Spanner的每次读取会拿最新的数据，且有True Time保证数据是线性的，所以老师所说的Spanner应该是满足操作的强一致性是吗？<br><br>可是感觉TiDB也满足了操作的强一致性，是因为我对TiDB了解不足，还是我理解错了Spanner的强一致性呢？","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504136,"discussion_content":"TiDB基于TSO也能做到线性一致性，但是隔离级别只支持到SI，比Spanner的外部一致性还是要低一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597975148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1729060,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","nickname":"托尼斯威特","note":"","ucode":"98A1035527292E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563845,"discussion_content":"这篇文章称之为 external consistency https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/45855.pdf","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650093494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241756,"user_name":"南国","can_delete":false,"product_type":"c1","uid":1897062,"ip_address":"","ucode":"0D8D3C5F4EB8AE","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","comment_is_top":false,"comment_ctime":1597412587,"is_pvip":false,"replies":[{"id":"89310","content":"你好，会话一种致性的会话就是通常所指的用户Session，它是多种一致性模型的组合，可以参考课程中Cosmos DB的官方文档学习。","user_name":"作者回复","comment_id":241756,"uid":"1602401","ip_address":"","utype":1,"ctime":1597562096,"user_name_real":"王磊(Ivan)"}],"discussion_count":1,"race_medal":0,"score":"5892379883","product_id":100057401,"comment_content":"老师，想问问会话一致性中会话怎么理解呢？","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503834,"discussion_content":"你好，会话一种致性的会话就是通常所指的用户Session，它是多种一致性模型的组合，可以参考课程中Cosmos DB的官方文档学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597562096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360601,"user_name":"Geek_70d9b8","can_delete":false,"product_type":"c1","uid":1556428,"ip_address":"上海","ucode":"BEC3B03CE34ECB","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoldJpdUkfAhpW8zs1b2wUzkk6icosXNHyXpg7ZgsukLjiaQUSN59JnLjibZ5TeeJkfhtEvZgqJnkicYA/132","comment_is_top":false,"comment_ctime":1666683439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666683439","product_id":100057401,"comment_content":"Raft&#47;Paxos 是consensus, 共识算法。paxos 是一种共识理论，分布式系统是他的场景，一致性是他的目标。<br>一些常见的误解：使用了 Raft或者 paxos 的系统都是线性一致的（Linearizability 即强一致），其实不然，共识算法只能提供基础，要实现线性一致还需要在算法之上做出更多的努力。 ","like_count":0},{"had_liked":false,"id":343445,"user_name":"wangshanhe","can_delete":false,"product_type":"c1","uid":1204846,"ip_address":"","ucode":"1457998F100A89","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKmyjUJe2FxeyL5VMuJlpCFeJKy4SYpicbpCgyPSqbiafPlhibQT2fLWJzqV1ANSDiaSMDVTJVGyAnIow/132","comment_is_top":false,"comment_ctime":1650856080,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650856080","product_id":100057401,"comment_content":"MySQL 除了全同步复制，还有别的复制方式吗<br>","like_count":0},{"had_liked":false,"id":336218,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1646013137,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646013137","product_id":100057401,"comment_content":"之前讨论复制的一致性都是单个对象，到前缀一致性的时候又是两个不同的评论，这个时候是把评论列表当成一个抽象的对象吧，或者把整个评论系统当成个单对象来看要实现偏序吧？所以讲一致性的时候也要区分数据的粒度是吧？ 比如有些就说是只支持单记录的，有些说是单分片的，newsql一般说的是整个库吧？","like_count":0},{"had_liked":false,"id":336216,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1646012818,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646012818","product_id":100057401,"comment_content":"基于时间排序的线性一致性，是因为数据有分片的原因？若果数据没有分片，像etcd那种就不需要再按时间排序去实现线性一致性了，因为有个单一的master？","like_count":0},{"had_liked":false,"id":324225,"user_name":"卖藥郎","can_delete":false,"product_type":"c1","uid":1231829,"ip_address":"","ucode":"0539EF1D335918","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/d5/fab32cf7.jpg","comment_is_top":false,"comment_ctime":1638344078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638344078","product_id":100057401,"comment_content":"CAP研究的是一个操作对分布式系统多分副本的影响。<br>ACID研究的是多个操作对某条（些）数据的影响，既然有个多个操作就需要隔离性来保证并行时候，操作之间是否会相互影响。","like_count":0},{"had_liked":false,"id":322496,"user_name":"小李讲源码","can_delete":false,"product_type":"c1","uid":1107484,"ip_address":"","ucode":"2573037D7C82C8","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/1c/9d3744ee.jpg","comment_is_top":false,"comment_ctime":1637421408,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637421408","product_id":100057401,"comment_content":"数据一致性包含着状态一致性和操作一致性，Paxos是保证操作一致性，而对于状态视角来说Paxos是最终一致性的，也就是弱一致性。其实换一个角度讲，如果是强一致性，也就不需要有操作视角这个概念了，但是强一致性的缺陷导致必须有个可以替代它的产物，所以才会出现Paxos、Raft算法。","like_count":0},{"had_liked":false,"id":319832,"user_name":"Helios","can_delete":false,"product_type":"c1","uid":1380758,"ip_address":"","ucode":"BE6B98EE8F0D09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKJrOl63enWXCRxN0SoucliclBme0qrRb19ATrWIOIvibKIz8UAuVgicBMibIVUznerHnjotI4dm6ibODA/132","comment_is_top":false,"comment_ctime":1635955700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635955700","product_id":100057401,"comment_content":"请教老师，前缀一致性中显示添加因果关系时什么意思，怎么添加，怎么处理呢？为什么不能普世到线性一致性呢","like_count":0},{"had_liked":false,"id":319827,"user_name":"Helios","can_delete":false,"product_type":"c1","uid":1380758,"ip_address":"","ucode":"BE6B98EE8F0D09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKJrOl63enWXCRxN0SoucliclBme0qrRb19ATrWIOIvibKIz8UAuVgicBMibIVUznerHnjotI4dm6ibODA/132","comment_is_top":false,"comment_ctime":1635955396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635955396","product_id":100057401,"comment_content":"前缀一致性和线性一致性感觉叉车不大呢","like_count":0},{"had_liked":false,"id":291152,"user_name":"Jackson","can_delete":false,"product_type":"c1","uid":1061404,"ip_address":"","ucode":"FD22D39510CF8C","user_header":"https://static001.geekbang.org/account/avatar/00/10/32/1c/3e3cdad2.jpg","comment_is_top":false,"comment_ctime":1620054031,"is_pvip":false,"replies":[{"id":"105491","content":"有关但没有直接关系？可能见仁见智吧。实现RPO为零，MySQL&#47;Oracle都是从副本一致性的入手，分布式也一样。或者说，我们无法脱离一致性谈RPO，这样算不算直接呢？供参考。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1620135294,"ip_address":"","comment_id":291152,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1620054031","product_id":100057401,"comment_content":"讲mysql复制部分有失水准了，首先mysql无论官方还是社区，应该没有全同步的说法。而且按文中描述，比较容易误导人，binlog过去只能保证rpo=0，和一致性，无论状态还是行为视角，有关但没有直接关系","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519388,"discussion_content":"有关但没有直接关系？可能见仁见智吧。实现RPO为零，MySQL/Oracle都是从副本一致性的入手，分布式也一样。或者说，我们无法脱离一致性谈RPO，这样算不算直接呢？供参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620135294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1061404,"avatar":"https://static001.geekbang.org/account/avatar/00/10/32/1c/3e3cdad2.jpg","nickname":"Jackson","note":"","ucode":"FD22D39510CF8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":575271,"discussion_content":"多副本，个人理解是解决 log/data 持久性的问题，一致性是从用户消费数据的角度看的，同意持久性是一致性的基础之一，有了持久性，不同一致性更多是在 ordering 和 data freshness 之间取舍。供交流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654696079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":519388,"ip_address":""},"score":575271,"extra":""}]}]},{"had_liked":false,"id":290914,"user_name":"冯磊","can_delete":false,"product_type":"c1","uid":1855112,"ip_address":"","ucode":"4FFB8B984269FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIYj6Zv3ibicLebxo7lsPMEwpBynHkYp8pLc3FcltUfmOBSRxpmicEwIAgP9OvSKnGGdaxwsZ7yiciaSsQ/132","comment_is_top":false,"comment_ctime":1619857292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619857292","product_id":100057401,"comment_content":"十分希望可以有机会进行更广泛的讨论，数据库的形态多样，仅仅NoSQL就可以分出Document、KV、图、时序、对象等一众序列，未来数据库生态的发展会十分丰富。VX：aacc66886521","like_count":0},{"had_liked":false,"id":289433,"user_name":"城","can_delete":false,"product_type":"c1","uid":1035315,"ip_address":"","ucode":"32C4FCE1944000","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/33/19f150d9.jpg","comment_is_top":false,"comment_ctime":1619009712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619009712","product_id":100057401,"comment_content":"对写后读一致性不是很明白，<br>即A写之后。只需要保证A读到的是对的就行吗？<br>不知道这里的A，是指当时写入的程序吗？","like_count":0},{"had_liked":false,"id":287753,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1618133785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618133785","product_id":100057401,"comment_content":"分布式数据库的一致性和单点数据一致性还是不同的喔。<br><br>单点数据一致性强调数据的强一致性和最终一致性。<br><br>分布式数据一致性分状态一致性和操作一致性。<br>状态一致性类似单点的一致性。<br>操作一致性则包括写后读一致性，单调一致性，前缀一致性，因果一致性，线性一致性，顺序一致性等。","like_count":0},{"had_liked":false,"id":281576,"user_name":"daka","can_delete":false,"product_type":"c1","uid":1307998,"ip_address":"","ucode":"A23D82FF956793","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8ibLXicovSNwEJhP4BOIPxEMle1ZUq1He58xztgBXTQFicdp5m5ibRHwUSoUVk5xQMWFwFXhp56ibm1Q/132","comment_is_top":false,"comment_ctime":1614816935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614816935","product_id":100057401,"comment_content":"老师讲的很好","like_count":0},{"had_liked":false,"id":276663,"user_name":"amixyue","can_delete":false,"product_type":"c1","uid":1055034,"ip_address":"","ucode":"97822C9E1F6A72","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/3a/c1dbffb7.jpg","comment_is_top":false,"comment_ctime":1612070814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612070814","product_id":100057401,"comment_content":"数据库的ACID，C较AID与数据库关系不大，是应用结合业务理解使用数据库能力达成。分布式的CAP是共识&#47;可用&#47;网络分区（netsplit），这时要么完全丢掉分区达到CA，要么取其一。Paxos&#47;raft&#47;等是共识协议及实现","like_count":0},{"had_liked":false,"id":261486,"user_name":"hal","can_delete":false,"product_type":"c1","uid":1359844,"ip_address":"","ucode":"98E625F7327FD9","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/e4/45758517.jpg","comment_is_top":false,"comment_ctime":1605356683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605356683","product_id":100057401,"comment_content":"老师，你好，想请问下当前有对这些一致性模型进行比较严谨定义的论文或文章嘛？","like_count":0},{"had_liked":false,"id":259184,"user_name":"咱是吓大的","can_delete":false,"product_type":"c1","uid":1292324,"ip_address":"","ucode":"A47C6DA5C00C6F","user_header":"https://static001.geekbang.org/account/avatar/00/13/b8/24/039f84a2.jpg","comment_is_top":false,"comment_ctime":1604647407,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604647407","product_id":100057401,"comment_content":"线性一致性是定一个全集的标准，因果一致性是定一个场景的标准","like_count":0},{"had_liked":false,"id":255230,"user_name":"test","can_delete":false,"product_type":"c1","uid":1129610,"ip_address":"","ucode":"C57A175CBC6547","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","comment_is_top":false,"comment_ctime":1603286867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603286867","product_id":100057401,"comment_content":"共识是不是意味着丢数据呢，就是大家互相妥协下，因为看到区块链里的共识是这个意思的。","like_count":0},{"had_liked":false,"id":255214,"user_name":"test","can_delete":false,"product_type":"c1","uid":1129610,"ip_address":"","ucode":"C57A175CBC6547","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","comment_is_top":false,"comment_ctime":1603283662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603283662","product_id":100057401,"comment_content":"有代码演示就容易理解，有些晕了","like_count":0},{"had_liked":false,"id":255031,"user_name":"test","can_delete":false,"product_type":"c1","uid":1129610,"ip_address":"","ucode":"C57A175CBC6547","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","comment_is_top":false,"comment_ctime":1603254341,"is_pvip":false,"replies":[{"id":"93677","content":"量子纠缠还远没到技术应用阶段，我们一起等待理论研究成果吧。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1603949313,"ip_address":"","comment_id":255031,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603254341","product_id":100057401,"comment_content":"主要问题就是同步时差，量子纠缠会引入到数据库吗？这样就可以物理同步了。","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507591,"discussion_content":"量子纠缠还远没到技术应用阶段，我们一起等待理论研究成果吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603949313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252975,"user_name":"HackMSF","can_delete":false,"product_type":"c1","uid":1697626,"ip_address":"","ucode":"BA021D3CDBCBF8","user_header":"https://static001.geekbang.org/account/avatar/00/19/e7/5a/0010f3f7.jpg","comment_is_top":false,"comment_ctime":1602552025,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1602552025","product_id":100057401,"comment_content":"看了好几篇关于“一致性概念”描述的文章，总算发现一篇“理解性”强的文章。","like_count":0},{"had_liked":false,"id":249973,"user_name":"wy","can_delete":false,"product_type":"c1","uid":1064681,"ip_address":"","ucode":"41C1B304E7F032","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e9/116f1dee.jpg","comment_is_top":false,"comment_ctime":1600871772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600871772","product_id":100057401,"comment_content":"Paxos 这类共识算法只保证副本之间数据最终达到一致，但是并没有保证事务性，也就是说在复制过程中会出现中间状态，用户角度来看就会看到数据不一致了。所以需要操作层面来保证数据的一致性。","like_count":0},{"had_liked":false,"id":246224,"user_name":"路人","can_delete":false,"product_type":"c1","uid":1084291,"ip_address":"","ucode":"55FF703DE772D7","user_header":"https://static001.geekbang.org/account/avatar/00/10/8b/83/d2afc837.jpg","comment_is_top":false,"comment_ctime":1599213104,"is_pvip":false,"replies":[{"id":"90504","content":"这时候主节点也没有提交成功，而且只是复制了日志，还没有apply到备节点上。最重要的是这个复制机制只承诺了主节点对外提供服务，RPO为0，没有承诺备节点的一致性读。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1599227675,"ip_address":"","comment_id":246224,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599213104","product_id":100057401,"comment_content":"文中有下面这段话：<br>强一致性：MySQL 全同步复制现在有一个 MySQL 集群，由一主两备三个节点构成，那么在全同步复制（Fully Synchronous Replication）模式下，用户与 MySQL 交互的过程是这样的。<br>有个问题：<br>如果同步复制的过程过程中，比如A是主节点，有2个备节点BC，对A执行操作的时候，A先将binlog复制给B，然后再复制给C，假如复制给B成功了，此时复制给C失败了，那么刚好此时如果有用户分别去B、C中查询，此时看到的数据是不一样的，此时就不满足强一致，这种情况是怎么解决的？","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505092,"discussion_content":"这时候主节点也没有提交成功，而且只是复制了日志，还没有apply到备节点上。最重要的是这个复制机制只承诺了主节点对外提供服务，RPO为0，没有承诺备节点的一致性读。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599227675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244517,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1598545967,"is_pvip":true,"replies":[{"id":"90007","content":"其实是很简单的原因，就是要保证写入的数据在下一刻一定能被读取到。在第13讲有更具体的介绍","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598583747,"ip_address":"","comment_id":244517,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1598545967","product_id":100057401,"comment_content":"线性一致性和因果一致性就是时钟上差别，为什么要这么区别，是因为对用户有什么特别的影响吗？","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504614,"discussion_content":"其实是很简单的原因，就是要保证写入的数据在下一刻一定能被读取到。在第13讲有更具体的介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598583747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066752,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","nickname":"piboye","note":"","ucode":"7CFD8712857A85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301635,"discussion_content":"就是我写入，他人可能是通过消息通知后去读能立刻读到是吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598594163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242991,"user_name":"Tim Zhang","can_delete":false,"product_type":"c1","uid":1214499,"ip_address":"","ucode":"4956AC5FE45EE1","user_header":"https://static001.geekbang.org/account/avatar/00/12/88/23/a0966b4d.jpg","comment_is_top":false,"comment_ctime":1597912844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597912844","product_id":100057401,"comment_content":"zk听说又是顺序一致性和什么因果一致性，老师能讲讲么","like_count":0},{"had_liked":false,"id":241713,"user_name":"南国","can_delete":false,"product_type":"c1","uid":1897062,"ip_address":"","ucode":"0D8D3C5F4EB8AE","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","comment_is_top":false,"comment_ctime":1597398426,"is_pvip":false,"replies":[{"id":"89220","content":"你好，要实现前缀一致性，只要显示声明依赖关系就可以，这个有很多灵活的做法。而因果一致性，建立在偏序关系的基础上，很难在应用层面实现，要有底层的支持。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1597411058,"ip_address":"","comment_id":241713,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597398426","product_id":100057401,"comment_content":"前缀一致性和因果一致性有什么区别呢？看起来都是在描述一个因果的关系啊","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503823,"discussion_content":"你好，要实现前缀一致性，只要显示声明依赖关系就可以，这个有很多灵活的做法。而因果一致性，建立在偏序关系的基础上，很难在应用层面实现，要有底层的支持。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597411058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241300,"user_name":"hql","can_delete":false,"product_type":"c1","uid":1041109,"ip_address":"","ucode":"25DA4ABE876406","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e2/d5/a0fe91ef.jpg","comment_is_top":false,"comment_ctime":1597241434,"is_pvip":false,"replies":[{"id":"89187","content":"是的，一致性模型里有两个要点，读写策略和多副本状态。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1597329597,"ip_address":"","comment_id":241300,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597241434","product_id":100057401,"comment_content":"paxos协议定义的是一种决策过程。课程里的一致性是客观定义。","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503706,"discussion_content":"是的，一致性模型里有两个要点，读写策略和多副本状态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597329597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}