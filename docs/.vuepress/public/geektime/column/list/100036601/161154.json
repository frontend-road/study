{"id":161154,"title":"11 | 分支策略：让研发高效协作的关键要素","content":"<p>你好，我是石雪峰。今天我们来聊聊分支策略。</p><p>在上一讲中，我反复强调过一个理念，那就是将一切纳入版本控制。其实，现代版本控制系统不仅可以记录版本和变更记录，还有一个非常重要的功能，那就是<strong>分支管理</strong>。</p><p>现代软件开发讲究效率和质量，大多依赖于多团队间的协作来实现。对于一些大型软件来说，即便是百人团队规模的协作也没什么奇怪的。如果软件架构没有良好的拆分，很有可能出现几百人在一个代码仓库里面工作的情况。这时，分支管理就成了不可或缺的功能。</p><p>一方面，分支可以隔离不同开发人员的改动，给他们提供一个相对独立的空间，让他们能够完成自己的开发任务。另一方面，整个团队也需要根据软件的发布节奏来完成代码提交、审核、集成、测试等工作。</p><p>所以，如果说多人软件协作项目中有一个灵魂的话，我认为，这个灵魂就是分支策略。可以说，<strong>分支策略就是软件协作模式和发布模式的风向标</strong>。选择一种符合DevOps开发模式的分支策略，对于DevOps的实践落地也会大有帮助。</p><p>今天，我会给你拆解一些常见的分支策略，帮你了解这些策略的核心流程、优缺点，以及适用的场景和案例。</p><h2>主干开发，分支发布</h2><p><img src=\"https://static001.geekbang.org/resource/image/71/85/717a85f005b8da0b593d6376db679685.png?wh=611*430\" alt=\"\"></p><blockquote>\n<p><span class=\"orange\">图片来源：</span><br>\n<a href=\"https://paulhammant.com/2013/12/04/what_is_your_branching_model/\">https://paulhammant.com/2013/12/04/what_is_your_branching_model/</a></p>\n</blockquote><!-- [[[read_end]]] --><p>在这种分支策略下，开发团队共享一条主干分支，所有的代码都直接提交到主干分支上，主干分支就相当于是一个代码的全量合集。<strong>在软件版本发布之前，会基于主干拉出一条以发布为目的的短分支</strong>。</p><p>你需要注意一下这句话里的两个关键词：</p><ol>\n<li><strong>以发布为目的</strong>。这条分支存在的意义不是开发新功能，而是对现有功能进行验收，并在达到一定的质量标准后对外发布。一般来说，新功能不会基于这条分支提交，只有一些Bugfix会集成进来。所以，对于这种发布分支会有比较严格的权限管控。毕竟，谁都不想让那些乱七八糟、未经验证的功能跑到发布分支上来。</li>\n<li><strong>短分支</strong>。这条发布分支一般不会存在太长时间，只要经过回归验证，满足发布标准后，就可以直接对外发布，这时，这条分支的历史使命也就结束了。除非上线之后发现一些紧急问题需要修复，才会继续在这条分支上修改验证，并将改动同步回主干分支。所以，只要在主干分支和发布分支并行存在的时间段内，所有发布分支上的改动都需要同步回主分支，这也是我们不希望这条分支存在时间过长的原因，因为这会导致重复工作量的线性累计。</li>\n</ol><p>对于以版本节奏驱动的软件项目来说，这种分支策略非常常见，比如客户端产品，或者是那种需要在客户终端升级的智能硬件产品，像智能手机、智能电视等。</p><p>早在很多年前，乐视刚刚推出超级电视的时候，喊过一个口号叫“周周更新”。要知道，当时智能电视产品的更新频率普遍是几个月一次。</p><p>其实，如果你了解分支策略的话，你就会发现，“周周更新”的背后也没什么特别的。当时，我所在的团队恰好负责智能电视产品线的分支策略，采用的就是主干开发、分支发布的模式。其中基于主干的发布分支提前两周拉出，然后在发布分支上进行回归验证，并在第一周发出体验版本给喜欢尝鲜的用户试用。然后，根据用户反馈和后台收集的问题进行进一步修正，并最终发布一个稳定版本。我把当时的分支策略图分享给你，你可以参考一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/46/e05c3b28341b3c99cceb3b916f5e7046.jpg?wh=3395*1150\" alt=\"\"></p><p>这种模式的优势有三个：</p><ol>\n<li>对于研发团队来说，只有一条主线分支，不需要在多条分支间切换。</li>\n<li>在发布分支拉出之后，主干分支依然处于可集成状态，研发节奏可以保持在一个相对平稳的状态。</li>\n<li>发布分支一般以版本号命名，清晰易懂，线上哪个版本出了问题，就在哪个分支上修复。</li>\n</ol><p>不过，这种模式也存在着缺点和挑战：</p><ol>\n<li><strong>它对主线分支的质量要求很高</strong>。如果主线分支出了问题，就会block所有开发团队的工作。对于一个百人团队、每日千次的提交规模来说，如果不对提交加以约束，这种情况的发生频率就会非常高。</li>\n<li><strong>它对团队协作的节奏要求很高</strong>。如果主线分支上的功能没有及时合入，但是业务方又坚持要在指定版本上线这个功能，这就会导致发布分支“难产”。甚至有些时候，会被迫允许部分未开发完成的功能在发布分支上继续开发，这会给发布分支的质量和稳定性造成很大的挑战。</li>\n<li><strong>在主线和发布分支并存期间，有可能会导致两边提交不同步的情况</strong>。比如，发布分支修复了一个线上问题，但是由于没有同步回主线，导致同样的问题在下一个版本中复现。测试出来的问题越多，这种情况出现的概率就越大，更不要说多版本并存的情况了。</li>\n</ol><p>这些问题的解决方法包括以下几点：</p><ol>\n<li>建立提交的准入门禁，不允许不符合质量标准的代码合入主线。</li>\n<li>采用版本火车的方式，加快版本的迭代速度，功能“持票上车”，如果跟不上这个版本就随下个版本上线。另外，可以采用功能开关、热修复等手段，打破版本发布的固定节奏，以一种更加灵活的方式对外发布。</li>\n<li>通过自动化手段扫描主线和发布分支的差异，建立一种规则。比如Hotfix必须主线和发布分支同时提交，或者发布分支上线后，由专人反向同步等。</li>\n</ol><h2>分支开发，主干发布</h2><p><img src=\"https://static001.geekbang.org/resource/image/b9/69/b956a9dc626cad58976b55c5cb773169.png?wh=611*437\" alt=\"\"></p><blockquote>\n<p><span class=\"orange\">图片来源：</span><a href=\"https://paulhammant.com/2013/12/04/what_is_your_branching_model/\">https://paulhammant.com/2013/12/04/what_is_your_branching_model/</a></p>\n</blockquote><p>当开发接到一个任务后，会基于主干拉出一条特性开发分支，在特性分支上完成功能开发验证之后，通过Merge request或者Pull request的方式发起合并请求，在评审通过后合入主干，并在主干完成功能的回归测试。开源社区流行的GitHub模式其实就是属于这种。</p><p>根据特性和团队的实际情况，还可以进一步细分为两种情况：</p><ul>\n<li>每条特性分支以特性编号或需求编号命名，在这条分支上，只完成一个功能的开发；</li>\n<li>以开发模块为单位，拉出一条长线的特性分支，并在这条分支上进行开发协作。</li>\n</ul><p><strong>两者的区别就在于特性分支存活的周期，拉出时间越长，跟主干分支的差异就越大，分支合并回去的冲突也就越大</strong>。所以，对于长线模式来说，要么是模块拆分得比较清晰，不会有其他人动这块功能，要么就是保持同主干的频繁同步。<strong>随着需求拆分粒度的变小，短分支的方式其实更合适</strong>。</p><p>这种模式下的优势也有两点：</p><ol>\n<li><strong>分支开发相对比较独立，不会因为并行导致互相干扰</strong>。同时，特性只有在开发完成并验收通过后才会合入主干，对主干分支的质量起到了保护作用；</li>\n<li>随着特性分支的流行，在这种模式下，分支成了特性天然的载体。一个特性所关联的所有代码可以保存在一条特性分支上，这为以特性为粒度进行发布的模式来说提供了一种新的可能性。也就是说，如果你想要发布哪个特性，就可以直接将特性分支合并到发布分支上，这就让某一个特性变得“可上可下”，而不是混在一大堆代码当中，想拆也拆不出来。</li>\n</ol><p>关于这种特性分支发布的方法，我给你提供一份<a href=\"https://mp.weixin.qq.com/s/JsBX3UPgZL_HUOTCIopr_A\">参考资料</a>，你可以了解一下。不过，我想提醒你的是，特性发布虽然看起来很好，但是有三个前置条件：第一个是<strong>特性拆分得足够小</strong>，第二是<strong>有强大的测试环境作支撑</strong>，可以满足灵活的特性组合验证需求，第三是<strong>要有一套自动化的特性管理工具</strong>。</p><p>当然，分支开发、主干发布的模式也有缺点和挑战：</p><ol>\n<li>非常考验团队特性拆分的能力。如果一个特性过大，会导致大量并行开发的分支存在，分支的集成周期拉长，潜在的冲突也会增多。另外，分支长期存在也会造成跟主线差异过大的问题。所以，<strong>特性的粒度和分支存活的周期是关键要素。根据经验来看，分支存活的周期一般不要超过一周</strong>。</li>\n<li>对特性分支的命名规范要求很高。由于大量特性分支的拉出，整个代码仓库会显得非常乱。面对一大堆分支，谁也说不清到底哪个还活着，哪个已经没用了。所以，如果能够跟变更管理系统打通，自动化创建分支就最好了。</li>\n<li>特性分支的原子性和完整性，保证一个特性的关联改动需要提交到一条分支上，而不是到处都是。同时，特性分支上的提交也需要尽量清晰，典型的就是原子性提交。</li>\n</ol><p>我之前所在的一个团队就是采用的这种分支策略。有一次，我为了分支策略的执行细节跟研发负责人争得面红耳赤，争论的核心点就是：当特性分支合并回主干的时候，到底要不要对特性分支上的代码进行整理？</p><p>只要做过开发，你就会知道，很少有人能只用一次提交就把代码写对的，因为总是会有这样那样的问题，导致特性分支上的提交乱七八糟。</p><p>在合入主干的时候，为了保证代码的原子性，其实是有机会对代码提交进行重新编排的，Git在这方面可以说非常强大。如果你熟练掌握git rebase命令，就可以快速合并分拆提交，将每一个提交整理为有意义的原子性的提交，再合入主干，或者干脆把特性分支上的改动压合成一个提交。当然，这样做的代价就是不断重写特性分支的历史，给研发团队带来额外的工作量。我跟你分享一些常见的命令。</p><blockquote>\n<p>比如：当前特性分支feature1，主分支master，那么，你可以执行以下命令整理提交历史：</p>\n</blockquote><blockquote>\n<p>git checkout feature1 &amp;&amp; git fetch origin &amp;&amp; git rebase -i origin/master</p>\n</blockquote><blockquote>\n<p><img src=\"https://static001.geekbang.org/resource/image/b7/1b/b709ba3701064f950534eb93d822731b.png?wh=1446*844\" alt=\"\"></p>\n</blockquote><blockquote>\n<p>最常见的操作包括：<br>\np：选择提交；<br>\nr：更新提交的注释信息；<br>\ne：编辑提交，可以将一个提交拆分成多个；<br>\ns：压合提交，将多个提交合并成一个；<br>\nf：类似压合提交，但是放弃这个提交的注释信息，直接使用合并提交的注释信息；<br>\n当然，在git rebase的交互界面中，你也可以调整提交的顺序，比如将特性功能和关联的Bugfix整合在一起。</p>\n</blockquote><p><strong>需要提醒你的是，分支策略代表了研发团队的行为准则，每个团队都需要磨合出一套适合自己的模式来</strong>。</p><h2>主干开发，主干发布</h2><p><img src=\"https://static001.geekbang.org/resource/image/8f/b0/8f1b96d9847430effaba8d5ee45d8bb0.png?wh=611*302\" alt=\"\"></p><blockquote>\n<p><span class=\"orange\">图片来源：</span><a href=\"https://paulhammant.com/2013/12/04/what_is_your_branching_model/\">https://paulhammant.com/2013/12/04/what_is_your_branching_model/</a></p>\n</blockquote><p>今天给你介绍的第三种分支策略是主干开发、主干发布。武学高手修炼到一定境界之后，往往会发现大道至简，分支策略也是如此。所以，第三种分支策略可以简单理解为没有策略。<strong>团队只有一条分支，开发人员的代码改动都直接集成到这条主干分支上，同时，软件的发布也基于这条主干分支进行</strong>。</p><p>对于持续交付而言，最理想的情况就是，每一次提交都能经历一系列的自动化环境并部署到生产环境上面，而这种模式距离这个目标就更近了一点。</p><p>可想而知，如果想要做到主干分支在任何时间都处于可发布状态，那么，这就对每一次提交的代码质量要求非常高。</p><p>在一些追求工程卓越的公司里，你要提交一行代码，就必须经历“九九八十一难”，因为有一系列的自动化验收手段，还有极为严格的代码评审机制来保证你的提交不会把主干分支搞挂掉。当然，即便如此，问题也是难以避免的，那我们该怎么做呢？这里我就要给你介绍下Facebook的分支策略演进案例了。</p><p>Facebook最早采用的也是主干开发、分支发布的策略，每天固定发布两次。但是，随着业务发展的压力增大，团队对于发布频率有了更高的要求，这种分支策略已经无法满足每天多次发布的需求了。于是，他们开始着手改变分支策略，从主干开发、分支发布的模式，演变成了主干开发、主干发布的模式。</p><p>为了保证主干分支的质量，自动化验收手段是必不可少的，因此，每一次代码提交都会触发完整的编译构建、单元测试、代码扫描、自动化测试等过程。在代码合入主干后，会进行按需发布，先是发布到内部环境，也就是只有Facebook的员工才能看到这个版本，如果发现问题就立刻修复，如果没有问题，再进一步开放发布给2%的线上生产用户，同时自动化检测线上的反馈数据。直到确认一切正常，才会对所有用户开放。</p><p>最后，通过分支策略和发布策略的整合，注入自动化质量验收和线上数据反馈能力，最终将发布频率从固定的每天2次，提升到每天多次，甚至实现了按需发布的模式。Facebook最新的分支策略如图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/64/b2a7a2d841e5b95d1fbf83d286d42364.jpg?wh=736*414\" alt=\"\"></p><blockquote>\n<p><span class=\"orange\"> 图片来源：</span><a href=\"https://engineering.fb.com/web/rapid-release-at-massive-scale/\">https://engineering.fb.com/web/rapid-release-at-massive-scale/</a></p>\n</blockquote><p>看到这里，你可能会问：“在这三种典型策略中，哪种策略是最好的？我应该如何选择呢？”其实，这个问题也困扰着很多公司。</p><p>的确，不同类型、规模、行业的软件项目采用的分支策略可能都不尽相同，同时，发布频率、软件架构、基础设施能力、人员能力水平等因素也在制约着分支策略的应用效果。</p><p>所以，很难说有一种通用的分支策略可以满足所有场景的需求。但是，有些分支策略的原则更加适合于快速迭代发布的场景，也就更加适合DevOps的发展趋势。所以，我个人比较推荐的是<strong>主干开发结合特性分支的模式</strong>，也就是团队共享一条开发主干，特性开发基于主干拉出特性分支，快速开发验收并回归主干，同时，在特性分支和主干分别建立不同的质量门禁和自动化验收能力。</p><p>这样做的好处在于，<strong>可以加快代码集成频率，特性相对独立清晰</strong>，并且主干分支又可以保持一定的质量水平。不过，在执行的过程中，你需要遵守以下原则：</p><ol>\n<li>团队共享一条主干分支；</li>\n<li>特性分支的存活周期要尽量短，最好不要超过3天；</li>\n<li>每天向主干合并一次代码，如果特性分支存在超过1天，那么每天都要同步主干代码；</li>\n<li>谨慎使用功能开关等技术手段，保持代码干净和历史清晰；</li>\n<li>并行分支越少越好，如果可能的话，尽量采用主干发布。</li>\n</ol><p>关于最后一条，你需要注意的是，<strong>是否需要发布分支，主要取决于项目的发布模式</strong>。对于按照版本方式发布的项目来说，比如App、智能硬件系统，以及依赖大量外部系统联调的核心系统，可以按照发布固定的节奏拉出发布分支；对于发布节奏较快、系统架构拆分后相对独立的应用来说，可以直接采用主干发布的模式，并结合安全发布策略把控整体的发布质量。</p><p>这种分支发布的策略图如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/16/5e/165381a31f212516ee92fd295040465e.jpg?wh=3195*1215\" alt=\"\"></p><h2>总结</h2><p>今天，我给你介绍了三种分支策略，建议你对照我给你分享的分支策略图，好好理解一下。另外， 我还介绍了适合DevOps模式的分支策略以及一些使用原则。还记得我最开始说的吗？分支策略就是研发协作和发布模式的风向标，分支策略的变化对整个研发团队的习惯和节奏都是一个非常大的调整，找到适合当前团队的分支策略，才是最重要的。</p><h2>思考题</h2><p>你目前所在的团队采用的是哪种分支策略？你觉得当前的分支策略有哪些问题或改进空间吗？你是否经历过分支策略的调整呢？如果有的话，你在这个过程中踩过什么“坑”吗？有没有什么心得呢？</p><p>欢迎在留言区写下你的思考和答案，我们一起讨论，共同学习进步。如果你觉得这篇文章对你有所帮助，欢迎你把文章分享给你的朋友。</p><p></p>","neighbors":{"left":{"article_title":"10 | 配置管理：最容易被忽视的DevOps工程实践基础","id":160477},"right":{"article_title":"12 | 持续集成：你说的CI和我说的CI是一回事吗？","id":161549}},"comments":[{"had_liked":false,"id":147835,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1572912943,"is_pvip":true,"replies":[{"id":"57276","content":"哈哈，看来你也经历过关键时候炸雷，记得在某大公司做做手机项目的时候，就有一次UI层的应用依赖了谷歌的新版本基线，而Framework往下还是老版本的，原本以为不会出什么问题，合并就发现一些基础功能显示异常，结果临时让厂商发了一版新的基础代码，在合并的过程中出现了大量的冲突，在解决冲突的时候由于一小段代码被人为删掉了，结果发布之后在特定版本的手机上发生大量的闪退问题，于是又紧急修复新版本上线，可以说是相当狼狈的一次经历。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573084538,"ip_address":"","comment_id":147835,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40227618607","product_id":100036601,"comment_content":"代码冲突其实是团队协作的投射，经常小冲突是健康的表现[呲牙]怕就怕平时没冲突，关键时候炸个雷。","like_count":10,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473318,"discussion_content":"哈哈，看来你也经历过关键时候炸雷，记得在某大公司做做手机项目的时候，就有一次UI层的应用依赖了谷歌的新版本基线，而Framework往下还是老版本的，原本以为不会出什么问题，合并就发现一些基础功能显示异常，结果临时让厂商发了一版新的基础代码，在合并的过程中出现了大量的冲突，在解决冲突的时候由于一小段代码被人为删掉了，结果发布之后在特定版本的手机上发生大量的闪退问题，于是又紧急修复新版本上线，可以说是相当狼狈的一次经历。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573084538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149430,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1573216679,"is_pvip":false,"replies":[{"id":"57552","content":"你好，我也比较推荐a方法，实际上在特性没有开发完成之前，合并进主干也并没有什么实际意义，反而要引入特性开关等机制来保证这段特性没有启用，实际操作过程中特性分支定期rebase主干分支，这样既避免了双向合并，也让特性分支的历史足够清晰，推荐给你。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573313788,"ip_address":"","comment_id":149430,"utype":1}],"discussion_count":3,"race_medal":0,"score":"31637987751","product_id":100036601,"comment_content":"有个疑问问下：<br>“3. 每天向主干合并一次代码，如果特性分支存在超过 1 天，那么每天都要同步主干代码；”<br><br>这里是每天<br>a.把主干的代码合并到特性分支<br>b.把特性分支合并到主干分支<br>c.双向合并<br>选哪一个呢？<br><br>如果是b和c，那主干分支可能就不是随时可发布的了。<br>如果是a，可能最后合并回主干时，冲突会少些。","like_count":7,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473862,"discussion_content":"你好，我也比较推荐a方法，实际上在特性没有开发完成之前，合并进主干也并没有什么实际意义，反而要引入特性开关等机制来保证这段特性没有启用，实际操作过程中特性分支定期rebase主干分支，这样既避免了双向合并，也让特性分支的历史足够清晰，推荐给你。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573313788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47355,"discussion_content":"感谢老师的答疑。\n\n我平常是比较喜欢用rebase的，可以保持提交历史的线性。\n\n如果是多人协作特性分支，要用rebase后强推代码，可能就需要吼一嗓子。\n等操作完成后，其他人用git pull —rebase的方式，拉取代码，就会少些冲突了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573315093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074465,"avatar":"https://static001.geekbang.org/account/avatar/00/10/65/21/101a7075.jpg","nickname":"davix","note":"","ucode":"CBFB39BAD7938B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385419,"discussion_content":"涉及多人的branch都應用merge","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627032444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147794,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1572896870,"is_pvip":false,"replies":[{"id":"56933","content":"看来你也是金融行业的一员呀，的确我接触过的大多数金融公司都是采用你说的这种方式，基于环境的分支管理策略，我给他们的建议就是两点：<br>1. 不强制要求使用单一主线，但是要控制并行的版本分支，比如按照1个月1批次的发布模式，在这一月里只有一条版本分支，同时除了月末的集中上线之外，可以增加自身模块的上线频率，也就是1大多小的方式<br>2. 环境分支统一为发布分支，在一条分支上通过制品晋级的方式实现多环境的覆盖，也就是在测试环境验证通过后，按需部署到后续sit，uat等环境中，不再使用多环境分支来隔离，而是通过配置文件等方式来做到单一制品包加可变配置的方法","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1572912525,"ip_address":"","comment_id":147794,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23047733350","product_id":100036601,"comment_content":"金融行业很多都是采用多环境分支，例如存在sit,uat,prod分支，环境分支和主干分支长期并存，请问老师在这种情况下该采用怎样的分支策略？","like_count":5,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473308,"discussion_content":"看来你也是金融行业的一员呀，的确我接触过的大多数金融公司都是采用你说的这种方式，基于环境的分支管理策略，我给他们的建议就是两点：\n1. 不强制要求使用单一主线，但是要控制并行的版本分支，比如按照1个月1批次的发布模式，在这一月里只有一条版本分支，同时除了月末的集中上线之外，可以增加自身模块的上线频率，也就是1大多小的方式\n2. 环境分支统一为发布分支，在一条分支上通过制品晋级的方式实现多环境的覆盖，也就是在测试环境验证通过后，按需部署到后续sit，uat等环境中，不再使用多环境分支来隔离，而是通过配置文件等方式来做到单一制品包加可变配置的方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572912525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1275215,"avatar":"https://static001.geekbang.org/account/avatar/00/13/75/4f/2edbb97e.jpg","nickname":"陈文涛","note":"","ucode":"2B52230E2D69EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55965,"discussion_content":"这个问题其实是一个比较系统的问题。\n1、最重要的是要控制版本质量，不能出现多版本套圈的情况。比如：你是两周一个迭代，然后两周uat 准生产 上线，后面的两周你的团队已经在研发下一个迭代的内容了，当然还要肩负第一个迭代在第二个迭代周期的测试验证工作。\n2、一个迭代发布，首先要最快速度的完成冒烟，确定总体的版本质量。如果版本不达标，那可能就退回版本了，此版本就作废了。如果冒烟通过，后面可能也有两条路：有些需求bug验证不通过，时间还来的急则发布补丁进行修复，如果来不及则回退掉这部分内容，你也可以认为这仍然是个补丁。\n3、这种方式，第二个迭代研发过程中，要将第一个迭代修改的内容（即在已经发布的分支上修改的补丁）要同步到主干上（即：正在进行的下一个迭代）\n总之，必须保证质量，否则一个迭代上不去，下个迭代又来了，就会越来越糟。从分支主干上来说，我说的这种应该就是主干研发、分支发布的策略。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574418643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147915,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1572918996,"is_pvip":false,"replies":[{"id":"57268","content":"能有这样的思考说明参加大会还是很走心的，说白了别人家的东西怎么为我所用，也是我一直思考的东西，因为你面临的场景和挑战都不相同，又怎么可能用一套解法呢？这些最基本的原则是项目实施中可参考的事情，就像你说的，选择合适的策略就是能力的考验了。<br>你应该是我第一个见过面的网友哈，可以常沟通哈。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573053222,"ip_address":"","comment_id":147915,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18752788180","product_id":100036601,"comment_content":"       大会时和老师的巧遇算是一种很好的补充：其实关于老师今天的东西，可能目前在不同的企业落实和情况不一样吧？<br>       记得看到一个老师说过DevSecOPS最难的是踏实的落地：其实这体现了一个方面就是&quot;坑&quot;如何去避免吧。有些坑可能不是我们是否想去避免就能避免：记得现在有同行问版本控制经理的事情，其实这块现在已经是一个完整的产品了。其实这种趋势我个人感觉非常明显：过去的一些分支当真实启动了足够的作用之后都变成真实的产品，而真实懂软件的不会是Sell出身的产品经理，深处这行多年的IT人。<br>       走出来参加大会：反思很多很多，其实对于不同企业的策略应当是不同的。不同的版本发布策略都经历过：小企业可能每周一次足够了，可是大了就不够了，其中人与人的沟通或者说协调折中去选择合适当下的策略就变成关键了。<br>       举个很有趣的例子，为何数据工程师很多时候是开发和产品之间沟通的桥梁，大量的时间在做产品经理和项目经理直接的中间沟通桥梁，有时甚至是灭火器？","like_count":4,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473338,"discussion_content":"能有这样的思考说明参加大会还是很走心的，说白了别人家的东西怎么为我所用，也是我一直思考的东西，因为你面临的场景和挑战都不相同，又怎么可能用一套解法呢？这些最基本的原则是项目实施中可参考的事情，就像你说的，选择合适的策略就是能力的考验了。\n你应该是我第一个见过面的网友哈，可以常沟通哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573053222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180762,"user_name":"Ios王子","can_delete":false,"product_type":"c1","uid":1162452,"ip_address":"","ucode":"41501B5798B386","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/d4/c0aa261d.jpg","comment_is_top":false,"comment_ctime":1582382585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14467284473","product_id":100036601,"comment_content":"我们就是主干开发，主干发布","like_count":4},{"had_liked":false,"id":149036,"user_name":"陈斯佳","can_delete":false,"product_type":"c1","uid":1259323,"ip_address":"","ucode":"C236F874FC767A","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","comment_is_top":false,"comment_ctime":1573129716,"is_pvip":false,"replies":[{"id":"57556","content":"你好，我的理解只要存在并行分支，就会有同步冲突的问题，除非这些分支在代码模块划分上就已经界定清楚了，比如购物车分支，订单分支，商品分支，各自有各自的代码路径甚至仓库，不会修改同一份代码，那么自然也就不会有冲突了。<br>单从你的描述中，我还是没有特别清楚你们的分支策略图，比如小发布和大发布都有独立分支吗，是顺序开发吗，比如一个小发布上了之后再拉出下一个小发布分支？<br>如果在开发过程中，并行分支是完全隔离的，只有归并到主分支之后才会同步到其他分支，这和持续集成的理念是有冲突的，之前在一家金融企业见过的就是你说这种方式，后来改成特性分支模式，小版本大版本都从主干拉出来发布，只有共享主干，及时合并，才有可能减少冲突量，有兴趣讨论的话，可以补充一些信息，我们一起看看哈。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573314994,"ip_address":"","comment_id":149036,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10163064308","product_id":100036601,"comment_content":"老师，我有个关于分支的问题，就是我们公司的情况是每周至少一次小发布，一个月一次固定大发布，而且有五个以上的不同应用同时开发。我们的分支命名是以日期为格式。不同日期的分支会同时开发。生产环境自己单独一条分支。<br>我们现在的问题是，一个小发布或大发布上线，代码融入生产分支之后，需要反向同步到其他正在开发的分支，而且经常会有代码冲突。这个给运维和开发都增加了不小工作量。想问下，您遇到过这样的情况吗？有什么好的建议来降低这个工作量吗？","like_count":2,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473716,"discussion_content":"你好，我的理解只要存在并行分支，就会有同步冲突的问题，除非这些分支在代码模块划分上就已经界定清楚了，比如购物车分支，订单分支，商品分支，各自有各自的代码路径甚至仓库，不会修改同一份代码，那么自然也就不会有冲突了。\n单从你的描述中，我还是没有特别清楚你们的分支策略图，比如小发布和大发布都有独立分支吗，是顺序开发吗，比如一个小发布上了之后再拉出下一个小发布分支？\n如果在开发过程中，并行分支是完全隔离的，只有归并到主分支之后才会同步到其他分支，这和持续集成的理念是有冲突的，之前在一家金融企业见过的就是你说这种方式，后来改成特性分支模式，小版本大版本都从主干拉出来发布，只有共享主干，及时合并，才有可能减少冲突量，有兴趣讨论的话，可以补充一些信息，我们一起看看哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573314994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156531,"user_name":"johnny","can_delete":false,"product_type":"c1","uid":1210226,"ip_address":"","ucode":"54E78B7BBC6AF0","user_header":"https://static001.geekbang.org/account/avatar/00/12/77/72/8f77ddb0.jpg","comment_is_top":false,"comment_ctime":1574906603,"is_pvip":false,"replies":[{"id":"60838","content":"你好，这里面有一个非常关键的点，就是特性是否已经发布上线了。如果特性还没有发布上线，那么特性分支自然还存在，就应该先在特性分支上修复，然后合并主线，这是为了保证特性分支上的独立性。如果说，特性已经发布上线了，那么再发现的问题就是一个新的缺陷或者需求了，可以理解为一个新的特性，所以需要重新拉出特性分支来，当然对于紧急情况，也可以Hotfix分支修复，再回归主线，这要看你们的发布模式，是向前升级，还是在线修复哈。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1575527745,"ip_address":"","comment_id":156531,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869873899","product_id":100036601,"comment_content":"老师，我有个问题。<br>在“主干开发结合特性分支的模式”分支策略中，<br>特性分支开发完成，代码已经集成到主干分支，主干分支并将特性分支发布后，发现特性分支上有bug要修复，是直接在特性分支上修复还是在主干分支上修复？<br><br>备注：我从文中提供的参考中学习到，特性分支并入主干，特性分支应该销毁，所以我认为特性分支的bug应该是在主干分支上修复。<br><br>期待老师的回答。","like_count":1,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476143,"discussion_content":"你好，这里面有一个非常关键的点，就是特性是否已经发布上线了。如果特性还没有发布上线，那么特性分支自然还存在，就应该先在特性分支上修复，然后合并主线，这是为了保证特性分支上的独立性。如果说，特性已经发布上线了，那么再发现的问题就是一个新的缺陷或者需求了，可以理解为一个新的特性，所以需要重新拉出特性分支来，当然对于紧急情况，也可以Hotfix分支修复，再回归主线，这要看你们的发布模式，是向前升级，还是在线修复哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575527745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342812,"user_name":"邵俊达","can_delete":false,"product_type":"c1","uid":1281460,"ip_address":"","ucode":"4B7DACE6DBCF95","user_header":"https://static001.geekbang.org/account/avatar/00/13/8d/b4/ff82483d.jpg","comment_is_top":false,"comment_ctime":1650470845,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650470845","product_id":100036601,"comment_content":"请问主干开发如何进行 code review 呢？","like_count":0},{"had_liked":false,"id":335463,"user_name":"ClaireK","can_delete":false,"product_type":"c1","uid":1298165,"ip_address":"","ucode":"656C9821E3A1A2","user_header":"https://static001.geekbang.org/account/avatar/00/13/ce/f5/5cefe11a.jpg","comment_is_top":false,"comment_ctime":1645526466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645526466","product_id":100036601,"comment_content":"我们公司目前使用的就是文中发布策略图","like_count":0},{"had_liked":false,"id":293493,"user_name":"BertGeek","can_delete":false,"product_type":"c1","uid":1452799,"ip_address":"","ucode":"8E1D72C9F9778C","user_header":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","comment_is_top":false,"comment_ctime":1621408283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621408283","product_id":100036601,"comment_content":"之前就职的软件公司分支上开发，主分支发布,<br>如dev、test、uat、master","like_count":0},{"had_liked":false,"id":261438,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1402511,"ip_address":"","ucode":"6E31908EFE1107","user_header":"https://static001.geekbang.org/account/avatar/00/15/66/8f/02be926d.jpg","comment_is_top":false,"comment_ctime":1605337054,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605337054","product_id":100036601,"comment_content":"石老师好，我是从事游戏开发的。在服务端方面，我采用分支开发，主干发布。在策划方面只能一直主干开发，原因是他们在用excel做配置，难以自动合并，这种有什么好的方法解决吗？","like_count":0,"discussions":[{"author":{"id":1302553,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e0/19/5315e698.jpg","nickname":"水如清","note":"","ucode":"D2BA96C8EADA89","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561658,"discussion_content":"那就不要用excel做配置嘛，换个方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649690132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253410,"user_name":"Hanyu","can_delete":false,"product_type":"c1","uid":1832472,"ip_address":"","ucode":"8B1CEF3C5A7503","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo6pMbs1oNrfapsuhXYbteIQ6nWgtkibibzv1R1lcBRH7VWAc66nK0ibnGVUTlwib0p0UjEdxo3bjg42g/132","comment_is_top":false,"comment_ctime":1602730492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602730492","product_id":100036601,"comment_content":"老师您好，不知道现在还能看到吗。<br>我最近在整理公司的分支策略，想通过类似 github flow 这种分支开发，主干发布的方式来做，调研过程中发现这种机制需要对每个特性分支创建独立的测试环境，测试通过后在合并回主干。但是这种方式对测试环境快速初始化及快速回收能力要求很高，在我们当前的基础设施能力下是满足不了的。<br>也想过不测试直接合并到主干，但是没有经过测试的代码直接合并到主干，再我们现在的一个代码质量下可能回导致主干分支经常不可用。<br>目前想到的妥协方案是在主干分支和特性分支之间加一条测试分支，让开发把特性分支代码合并到测试分支去测试，然后再合并到主干分支进行预发和生成环境的部署。这种方式感觉和持续集成的理念还是有些冲突的，请问老师有没有好的建议。","like_count":0},{"had_liked":false,"id":159055,"user_name":"牧野静风","can_delete":false,"product_type":"c1","uid":1311629,"ip_address":"","ucode":"FB5963F97C23AA","user_header":"https://static001.geekbang.org/account/avatar/00/14/03/8d/38a98dc6.jpg","comment_is_top":false,"comment_ctime":1575527932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575527932","product_id":100036601,"comment_content":"我们基本几个人一个项目，貌似多分支开发，主分支开发都有","like_count":0},{"had_liked":false,"id":154382,"user_name":"陈文涛","can_delete":false,"product_type":"c1","uid":1275215,"ip_address":"","ucode":"2B52230E2D69EB","user_header":"https://static001.geekbang.org/account/avatar/00/13/75/4f/2edbb97e.jpg","comment_is_top":false,"comment_ctime":1574419263,"is_pvip":false,"replies":[{"id":"59645","content":"<br>是的，主干质量是永恒的话题，其实分支开发，分支发布也是类似的，只要有一个集成的主分支，那么提交质量不达标，就很容易导致团队阻塞。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1574688948,"ip_address":"","comment_id":154382,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574419263","product_id":100036601,"comment_content":"个人认为分支开发，主干发布，最根本的还是要有成熟全面的自动化测试进行支撑，当然也包含老师提到的准入门禁等等，如果没有这些东西，那还是不要选择分支开发，主干发布了，最终的结果就是主干被玩坏。所以我们现在走的是分支开发、分支测试、分支发布、再并入主干，然后再从主干打出新的开发分支。","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475450,"discussion_content":"\n是的，主干质量是永恒的话题，其实分支开发，分支发布也是类似的，只要有一个集成的主分支，那么提交质量不达标，就很容易导致团队阻塞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574688948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147998,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1572925999,"is_pvip":false,"replies":[{"id":"57256","content":"期待你的实践分享哈！","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573049588,"ip_address":"","comment_id":147998,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572925999","product_id":100036601,"comment_content":"我们这目前采用的是分支开发，主线发布。感觉确实不是很爽，找个机会改了","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473367,"discussion_content":"期待你的实践分享哈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573049588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}