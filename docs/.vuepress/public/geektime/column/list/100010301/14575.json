{"id":14575,"title":"20 | 方法内联（上）","content":"<p>在前面的篇章中，我多次提到了方法内联这项技术。它指的是：在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。</p>\n<p>方法内联不仅可以消除调用本身带来的性能开销，还可以进一步触发更多的优化。因此，它可以算是编译优化里最为重要的一环。</p>\n<p>以getter/setter为例，如果没有方法内联，在调用getter/setter时，程序需要保存当前方法的执行位置，创建并压入用于getter/setter的栈帧、访问字段、弹出栈帧，最后再恢复当前方法的执行。而当内联了对getter/setter的方法调用后，上述操作仅剩字段访问。</p>\n<p>在C2中，方法内联是在解析字节码的过程中完成的。每当碰到方法调用字节码时，C2将决定是否需要内联该方法调用。如果需要内联，则开始解析目标方法的字节码。</p>\n<blockquote>\n<p><span class=\"reference\">复习一下：即时编译器首先解析字节码，并生成IR图，然后在该IR图上进行优化。优化是由一个个独立的优化阶段（optimization phase）串联起来的。每个优化阶段都会对IR图进行转换。最后即时编译器根据IR图的节点以及调度顺序生成机器码。</span></p>\n</blockquote>\n<p>同C2一样，Graal也会在解析字节码的过程中进行方法调用的内联。此外，Graal还拥有一个独立的优化阶段，来寻找指代方法调用的IR节点，并将之替换为目标方法的IR图。这个过程相对来说比较形象一些，因此，今天我就利用它来给你讲解一下方法内联。</p><!-- [[[read_end]]] -->\n<pre><code>方法内联的过程\npublic static boolean flag = true;\npublic static int value0 = 0;\npublic static int value1 = 1;\n\npublic static int foo(int value) {\n    int result = bar(flag);\n    if (result != 0) {\n        return result;\n    } else {\n        return value;\n    }\n}\n\npublic static int bar(boolean flag) {\n    return flag ? value0 : value1;\n}\n</code></pre>\n<p>上面这段代码中的foo方法将接收一个int类型的参数，而bar方法将接收一个boolean类型的参数。其中，foo方法会读取静态字段flag的值，并作为参数调用bar方法。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/c0/59/c024b8b45570f25534f76f0c4d378559.png?wh=490*758\" alt=\"\" /><br />\n<strong>foo方法的IR图（内联前）</strong></p>\n<p>在编译foo方法时，其对应的IR图中将出现对bar方法的调用，即上图中的5号Invoke节点。如果内联算法判定应当内联对bar方法的调用时，那么即时编译器将开始解析bar方法的字节码，并生成对应的IR图，如下图所示。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/96/55/96d8575326f7c1991c6677e6d2d17155.png?wh=794*480\" alt=\"\" /><br />\n<strong>bar方法的IR图</strong></p>\n<p>接下来，即时编译器便可以进行方法内联，把bar方法所对应的IR图纳入到对foo方法的编译中。具体的操作便是将foo方法的IR图中5号Invoke节点替换为bar方法的IR图。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/62/c8/6209f233f5518ee470eb08422c8d0bc8.png?wh=802*1202\" alt=\"\" /><br />\n<strong>foo方法的IR图（内联后）</strong></p>\n<p>除了将被调用方法的IR图节点复制到调用者方法的IR图中，即时编译器还需额外完成下述三项操作。</p>\n<p>第一，被调用方法的传入参数节点，将被替换为调用者方法进行方法调用时所传入参数对应的节点。在我们的例子中，就是将bar方法IR图中的1号P(0)节点替换为foo方法IR图中的3号LoadField节点。</p>\n<p>第二，在调用者方法的IR图中，所有指向原方法调用节点的数据依赖将重新指向被调用方法的返回节点。如果被调用方法存在多个返回节点，则生成一个Phi节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。</p>\n<p>在我们的例子中，就是将8号==节点，以及12号Return节点连接到原5号Invoke节点的边，重新指向新生成的24号Phi节点中。</p>\n<p>第三，如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该异常处理器覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。</p>\n<p>经过方法内联之后，即时编译器将得到一个新的IR图，并且在接下来的编译过程中对这个新的IR图进行进一步的优化。不过在上面这个例子中，方法内联后的IR图并没有能够进一步优化的地方。</p>\n<pre><code>public final static boolean flag = true;\npublic final static int value0 = 0;\npublic final static int value1 = 1;\n\npublic static int foo(int value) {\n    int result = bar(flag);\n    if (result != 0) {\n        return result;\n    } else {\n        return value;\n    }\n}\n\npublic static int bar(boolean flag) {\n    return flag ? value0 : value1;\n}\n</code></pre>\n<p>不过，如果我们将代码中的三个静态字段标记为final，那么Java编译器（注意不是即时编译器）会将它们编译为常量值（ConstantValue），并且在字节码中直接使用这些常量值，而非读取静态字段。举例来说，bar方法对应的字节码如下所示。</p>\n<pre><code>public static int bar(boolean);\n  Code:\n     0: iload_0\n     1: ifeq          8\n     4: iconst_0\n     5: goto          9\n     8: iconst_1\n     9: ireturn\n</code></pre>\n<p>在编译foo方法时，一旦即时编译器决定要内联对bar方法的调用，那么它会将调用bar方法所使用的参数，也就是常数1，替换bar方法IR图中的参数。经过死代码消除之后，bar方法将直接返回常数0，所需复制的IR图也只有常数0这么一个节点。</p>\n<p>经过方法内联之后，foo方法的IR图将变成如下所示：<br />\n<img src=\"https://static001.geekbang.org/resource/image/15/36/1506286ffb9c9d0d8a927e8174594536.png?wh=480*400\" alt=\"\" /></p>\n<p>该IR图可以进一步优化（死代码消除），并最终得到这张极为简单的IR图：<br />\n<img src=\"https://static001.geekbang.org/resource/image/6a/03/6affa54acd4d5f180efacdac93b02a03.png?wh=244*212\" alt=\"\" /></p>\n<h2>方法内联的条件</h2>\n<p>方法内联能够触发更多的优化。通常而言，内联越多，生成代码的执行效率越高。然而，对于即时编译器来说，内联越多，编译时间也就越长，而程序达到峰值性能的时刻也将被推迟。</p>\n<p>此外，内联越多也将导致生成的机器码越长。在Java虚拟机里，编译生成的机器码会被部署到Code Cache之中。这个Code Cache是有大小限制的（由Java虚拟机参数-XX:ReservedCodeCacheSize控制）。</p>\n<p>这就意味着，生成的机器码越长，越容易填满Code Cache，从而出现Code Cache已满，即时编译已被关闭的警告信息（CodeCache is full. Compiler has been disabled）。</p>\n<p>因此，即时编译器不会无限制地进行方法内联。下面我便列举即时编译器的部分内联规则。（其他的特殊规则，如自动拆箱总会被内联、Throwable类的方法不能被其他类中的方法所内联，你可以直接参考<a href=\"http://hg.openjdk.java.net/jdk/jdk/file/da387726a4f5/src/hotspot/share/opto/bytecodeInfo.cpp#l197\">JDK的源代码</a>。）</p>\n<p><strong>首先，由-XX:CompileCommand中的inline指令指定的方法，以及由@ForceInline注解的方法（仅限于JDK内部方法），会被强制内联。</strong> 而由-XX:CompileCommand中的dontinline指令或exclude指令（表示不编译）指定的方法，以及由@DontInline注解的方法（仅限于JDK内部方法），则始终不会被内联。</p>\n<p><strong>其次，如果调用字节码对应的符号引用未被解析、目标方法所在的类未被初始化，或者目标方法是native方法，都将导致方法调用无法内联。</strong></p>\n<p><strong>再次，C2不支持内联超过9层的调用（可以通过虚拟机参数-XX:MaxInlineLevel调整），以及1层的直接递归调用（可以通过虚拟机参数-XX:MaxRecursiveInlineLevel调整）。</strong></p>\n<blockquote>\n<p><span class=\"reference\">如果方法a调用了方法b，而方法b调用了方法c，那么我们称b为a的1层调用，而c为a的2层调用。</span></p>\n</blockquote>\n<p>最后，即时编译器将根据方法调用指令所在的程序路径的热度，目标方法的调用次数及大小，以及当前IR图的大小来决定方法调用能否被内联。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/49/c3/49fb3a3849e82ddcc74bd982a5e4eac3.jpg?wh=697*363\" alt=\"\" /></p>\n<p>我在上面的表格列举了一些C2相关的虚拟机参数。总体来说，即时编译器中的内联算法更青睐于小方法。</p>\n<h2>总结与实践</h2>\n<p>今天我介绍了方法内联的过程以及条件。</p>\n<p>方法内联是指，在编译过程中，当遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。</p>\n<p>即时编译器既可以在解析过程中替换方法调用字节码，也可以在IR图中替换方法调用IR节点。这两者都需要将目标方法的参数以及返回值映射到当前方法来。</p>\n<p>方法内联有许多规则。除了一些强制内联以及强制不内联的规则外，即时编译器会根据方法调用的层数、方法调用指令所在的程序路径的热度、目标方法的调用次数及大小，以及当前IR图的大小来决定方法调用能否被内联。</p>\n<p>今天的实践环节，你可以利用虚拟机参数-XX:+PrintInlining来打印编译过程中的内联情况。具体每项内联信息所代表的意思，你可以参考<a href=\"https://wiki.openjdk.java.net/display/HotSpot/Server+Compiler+Inlining+Messages\">这一网页</a>。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"19 |  Java字节码（基础篇）","id":14794},"right":{"article_title":"21 | 方法内联（下）","id":14652}},"comments":[{"had_liked":false,"id":23727,"user_name":"木心","can_delete":false,"product_type":"c1","uid":1178689,"ip_address":"","ucode":"955588CA0BBD33","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/41/bc18ff9f.jpg","comment_is_top":false,"comment_ctime":1536626337,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"233464860321","product_id":100010301,"comment_content":"IR只有我看不懂吗？各颜色的模块代表什么意思，还有不同钥匙的线代表什么意思？","like_count":54,"discussions":[{"author":{"id":1351148,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","nickname":"ppyh","note":"","ucode":"14022ADEC9B53F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390365,"discussion_content":"看个大概能明白啥意思就行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629800447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521451,"avatar":"https://static001.geekbang.org/account/avatar/00/17/37/2b/b32f1d66.jpg","nickname":"Ball","note":"","ucode":"1EE949E68D84CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329925,"discussion_content":"看不懂 +1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606482458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039544,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/dc/b8/31c7e110.jpg","nickname":"LVM_23","note":"","ucode":"5E54F9DB582E9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328167,"discussion_content":"我也没看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606094707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1655052,"avatar":"https://static001.geekbang.org/account/avatar/00/19/41/0c/129ad221.jpg","nickname":"Neko_Neko","note":"","ucode":"833355BE7179D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326855,"discussion_content":"我也没看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605689392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1793962,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5f/aa/63e641c1.jpg","nickname":"H","note":"","ucode":"04D7D030245E27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314701,"discussion_content":"我也没看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603187199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23665,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1536580557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"65961089997","product_id":100010301,"comment_content":"方法内联，一种优化代码的手段，其目的就是想让代码执行的更快一些，它怎么做到的呢？以前记录过性能优化的思路就那么几种，让赶的快的干，如果实现不了就让干的快的多干，干的慢点少干。方法内联是采用少干活的方式来提高效率的，直接将对应方法的字节码内联过来，省下了记录切换上下文环境的时间和空间。","like_count":15},{"had_liked":false,"id":166744,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1577584081,"is_pvip":false,"replies":[{"id":"65412","content":"javac几乎不做任何优化","user_name":"作者回复","comment_id":166744,"uid":"1176688","ip_address":"","utype":1,"ctime":1578180820,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"48822224337","product_id":100010301,"comment_content":"将Java程序编译字节码的时候，Java编译器会有方法内联的优化吗？","like_count":11,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479611,"discussion_content":"javac几乎不做任何优化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578180820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165074,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1577155965,"is_pvip":false,"replies":[{"id":"66457","content":"对的","user_name":"作者回复","comment_id":165074,"uid":"1176688","ip_address":"","utype":1,"ctime":1578931668,"user_name_real":"郑雨迪"}],"discussion_count":2,"race_medal":0,"score":"27346959741","product_id":100010301,"comment_content":"这个和 C++ 内联函数类似吧，目的是减少函数调用的开销。最终都是编译器来优化，C++ 通过 inline 声明函数，建议编译器内联编译。Java 是 JVM 自动处理，也可通过 VM 参数控制。","like_count":6,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479012,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578931668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360093,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","nickname":"cv0cv0","note":"","ucode":"93FF9277F03FD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555170,"discussion_content":"Kotlin 也可以在函数前加 inline。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646794015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23203,"user_name":"刘冠利","can_delete":false,"product_type":"c1","uid":1013486,"ip_address":"","ucode":"55BB713989DAC2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/ee/357be450.jpg","comment_is_top":false,"comment_ctime":1536207166,"is_pvip":false,"replies":[{"id":"8467","content":"在(下)篇有介绍","user_name":"作者回复","comment_id":23203,"uid":"1176688","ip_address":"","utype":1,"ctime":1536330752,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"27306010942","product_id":100010301,"comment_content":"请问final的使用对内联有多大帮助?","like_count":6,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423461,"discussion_content":"在(下)篇有介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536330752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235871,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1595231217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18775100401","product_id":100010301,"comment_content":"内联是一种编译器的优化手段，目的就是让代码执行更快，把频繁调用的方法，进行内联后，把调用的目标方法直接编译成机器代码，减少目标方法频繁调用的开销，如果不内联，程序需要保存当前调用者方法的执行位置，同时还要创建用于调用目标方法的栈帧，目标方法执行结束，还是再恢复调用者方法的执行，开销很大。内联的实现过程有俩种：<br>第一，在即时编译的过程中，可以根据一定的规则，将目标方法的方法体直接编译为机器码；<br>第二，在IR 图中替换目标方法调动IR 节点，Java字节码本身作为一种 IR，不可直接优化，所以即时编译器会将字节码转换成可优化的IR，IR可以理解为一种字节码指令在虚拟机中运行的分支流程和数据流程图，IR 图中的每个节点可以看出是程序执行的一个或多个指令，把调用目标方法的IR 节点，替换成目标方法的IR 图，其实就是把俩个方法的IR 图合并，这样可以对合并后的 IR 图进行优化；<br>无论是哪种内联过程，本质是将俩个方法合并，也就是把目标方法合并到调用方法里面，合并方法之后，还需要将目标方法的参数和返回值，都映射到调用方的方法里面。","like_count":4},{"had_liked":false,"id":23329,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1536286701,"is_pvip":true,"replies":[{"id":"8471","content":"方法内联只发生在即时编译器中。<br><br>方法调用就是字面意思。在即时编译过程中，即时编译器会将当前方法所包含的方法调用的目标方法纳入编译范围中。","user_name":"作者回复","comment_id":23329,"uid":"1176688","ip_address":"","utype":1,"ctime":1536331474,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"18716155885","product_id":100010301,"comment_content":"请问方法内联是发生在解释执行阶段吗？这里方法调用可以理解为解释执行中的小部分解释吗？有些困惑，麻烦老师解释执行下。","like_count":4,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423517,"discussion_content":"方法内联只发生在即时编译器中。\n\n方法调用就是字面意思。在即时编译过程中，即时编译器会将当前方法所包含的方法调用的目标方法纳入编译范围中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536331474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234878,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1594816983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14479718871","product_id":100010301,"comment_content":"硬着头皮看完了，一起理解方法内联就是，把bar的方法代码在foo中展开，内联后代码如下：<br>public static boolean flag = true;<br>public static int value0 = 0;<br>public static int value1 = 1;<br><br>public static int foo(int value) {<br>    int result = flag ? value0 : value1;;<br>    if (result != 0) {<br>        return result;<br>    } else {<br>        return value;<br>    }<br>}<br>","like_count":3},{"had_liked":false,"id":34332,"user_name":"Geek_987169","can_delete":false,"product_type":"c1","uid":1180853,"ip_address":"","ucode":"4B2955A044805D","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg","comment_is_top":false,"comment_ctime":1540112808,"is_pvip":false,"replies":[{"id":"12762","content":"这方面的知识网上并不多。可以知乎上搜Sea of nodes IR，看R大的回答，有不少链接可以参考。","user_name":"作者回复","comment_id":34332,"uid":"1176688","ip_address":"","utype":1,"ctime":1540822188,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"14425014696","product_id":100010301,"comment_content":"老师，能否提供一个学习IR图的地址？","like_count":3,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427179,"discussion_content":"这方面的知识网上并不多。可以知乎上搜Sea of nodes IR，看R大的回答，有不少链接可以参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540822188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23024,"user_name":"皮卡皮卡丘","can_delete":false,"product_type":"c1","uid":1106062,"ip_address":"","ucode":"6764F465FF975B","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/8e/0e4bc2a9.jpg","comment_is_top":false,"comment_ctime":1536112181,"is_pvip":false,"replies":[{"id":"8371","content":"PrintInlining将打印JVM里所有即时编译的内联优化信息，所以看起来比较杂","user_name":"作者回复","comment_id":23024,"uid":"1176688","ip_address":"","utype":1,"ctime":1536161978,"user_name_real":"郑雨迪"}],"discussion_count":2,"race_medal":0,"score":"10126046773","product_id":100010301,"comment_content":"这个是方法内联信息吗，怎么和代码里的信息有差别？@ 1   java.lang.Object::&lt;init&gt; (1 bytes)<br>                              @ 5   java.lang.AbstractStringBuilder::appendNull (56 bytes)   callee is too large<br>                              @ 10   java.lang.String::length (6 bytes)<br>                              @ 21   java.lang.AbstractStringBuilder::ensureCapacityInternal (27 bytes)<br>                                @ 17   java.lang.AbstractStringBuilder::newCapacity (39 bytes)   callee is too large<br>                                @ 20   java.util.Arrays::copyOf (19 bytes)<br>                                  @ 11   java.lang.Math::min (11 bytes)<br>                                  @ 14   java.lang.System::arraycopy (0 bytes)   intrinsic<br>                              @ 35   java.lang.String::getChars (62 bytes)   callee is too large<br>                              @ 1   java.lang.Object::&lt;init&gt; (1 bytes)<br>                              @ 13  java&#47;lang&#47;StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable<br>                              @ 30  java&#47;lang&#47;StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable<br>                              @ 65  java&#47;lang&#47;StringIndexOutOfBoundsException::&lt;init&gt; (not loaded)   not inlineable<br>                              @ 75   java.util.Arrays::copyOfRange (63 bytes)   callee is too large<br>                              @ 17   java.lang.AbstractStringBuilder::newCapacity (39 bytes)   callee is too large<br>                              @ 20   java.util.Arrays::copyOf (19 bytes)<br>                                @ 11   java.lang.Math::min (11 bytes)<br>                                @ 14   java.lang.System::arraycopy (0 bytes)   intrinsic<br>                              @ 66   java.lang.String::indexOfSupplementary (71 bytes)   callee is too large<br>                              @ 3   java.lang.String::indexOf (70 bytes)   callee is too large<br>                              @ 1   java.lang.Character::toUpperCase (9 bytes)<br>                         <br>                 ","like_count":2,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423374,"discussion_content":"PrintInlining将打印JVM里所有即时编译的内联优化信息，所以看起来比较杂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536161978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361475,"discussion_content":"其实用idea graph visualizer得到的dump也会把JDK库函数打出来 都一样杂的。看自己关系的函数就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616677281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227313,"user_name":"叫啥不行","can_delete":false,"product_type":"c1","uid":1460942,"ip_address":"","ucode":"A84B9B6594BF35","user_header":"https://static001.geekbang.org/account/avatar/00/16/4a/ce/affe4307.jpg","comment_is_top":false,"comment_ctime":1592356492,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5887323788","product_id":100010301,"comment_content":"乱糟糟的，前一秒说方法内联后的 IR 图并没有能够进一步优化的地方。后面就提了final字节码会取常量，这个算优化么？在下一步又说foo可以死代码消除，这是因为final还是跟final没啥关系，只是跳跃式讲解，不是说没有进一步优化的地方了么","like_count":1,"discussions":[{"author":{"id":1183083,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0d/6b/a766a063.jpg","nickname":"杜川川","note":"","ucode":"CE16AFA2B8D75C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393323,"discussion_content":"加了final之后才有可优化的地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631356206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165753,"user_name":"MZC","can_delete":false,"product_type":"c1","uid":1399853,"ip_address":"","ucode":"46278027D522FB","user_header":"https://static001.geekbang.org/account/avatar/00/15/5c/2d/226a3631.jpg","comment_is_top":false,"comment_ctime":1577318538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872285834","product_id":100010301,"comment_content":"IR图  不知道是干什么的  老师  而且  您的专栏里边  好多名词都不太懂   还望老师抽时间回答一下","like_count":1},{"had_liked":false,"id":144700,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1572000523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5866967819","product_id":100010301,"comment_content":"IR的图我也没看懂，不过内联想要做的事情看明白了，感觉和C&#47;C++里面的define有点像","like_count":1},{"had_liked":false,"id":137711,"user_name":"gogo","can_delete":false,"product_type":"c1","uid":1003104,"ip_address":"","ucode":"E8F0F3B000020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/60/0d5aa340.jpg","comment_is_top":false,"comment_ctime":1569827748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5864795044","product_id":100010301,"comment_content":"老师，是只有即时编译才会进行方法内联吗？jdk编译java源码的时候会进行方法内联吗","like_count":1},{"had_liked":false,"id":114783,"user_name":"乘风","can_delete":false,"product_type":"c1","uid":1115724,"ip_address":"","ucode":"0420C5535DACB7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwSoTjHPX5tm4whBSfoZLX6toZxrZGUaLABQywKNf4MDc9toK3QSV7Z99ATcGicFCysoleQ5ISzmw/132","comment_is_top":false,"comment_ctime":1563407456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5858374752","product_id":100010301,"comment_content":"感谢雨迪，之前对方法内联疑惑很多，知道有方法内联这件非常优秀的优化技术，却不知道如何在一定范围内优化代码来提高方法内联的几率。<br><br><br>","like_count":1},{"had_liked":false,"id":355528,"user_name":"Geek_d00eb1","can_delete":false,"product_type":"c1","uid":2691955,"ip_address":"北京","ucode":"6F6B40D9CA5B42","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/W1qXe7yEB8C9fsossNLH5449IoMrqKcrGA96VBWMWy86Nxe75af1INwP49y3u7mnKGrzCLZMnt4bRrA40qgEbQ/132","comment_is_top":false,"comment_ctime":1661474721,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1661474721","product_id":100010301,"comment_content":"“其次，如果调用字节码对应的符号引用未被解析、目标方法所在的类未被初始化” 老师，这段话的意思是不是指的前几章讲的invokeDynamic类型的方法调用呀？","like_count":0},{"had_liked":false,"id":328528,"user_name":"啸疯","can_delete":false,"product_type":"c1","uid":1104225,"ip_address":"","ucode":"24792660595DA1","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/61/4999fbc3.jpg","comment_is_top":false,"comment_ctime":1640764332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640764332","product_id":100010301,"comment_content":"结合操作系统的一些细节，试着理解下：<br>方法调用会伴随着当前线程方法区的入栈和出栈，CPU寄存器中控制寄存器也需要记录指令的前后地址。而栈的出入和寄存器的地址切换都是需要时间的，虽然时间很短，但是对比到CPU的频率来说，这个时间就比较长了，所以通过方法内联，可以省去这部分的时间，提高执行效率。<br>而虚拟机进行内联的方式，要么是直接替换为被调用方法的字节码，要么是在IR中替换节点（因为IR最终也会被编译成机器码）。<br>至于IR图，推荐https:&#47;&#47;darksi.de&#47;d.sea-of-nodes&#47;这篇文章","like_count":0},{"had_liked":false,"id":289646,"user_name":"nuclear","can_delete":false,"product_type":"c1","uid":1469188,"ip_address":"","ucode":"05521623A887A4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epRUsrkh6HY63ia54D56zUWAKzBGibgUZ6ibgettorCuMYTF1VgwYKObvFjCuJia4DqLTxx9aRv5lYZRg/132","comment_is_top":false,"comment_ctime":1619107381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619107381","product_id":100010301,"comment_content":"scala中有@inline注解，是指scalac在编译生成字节码的过程中做内联吗","like_count":0},{"had_liked":false,"id":198730,"user_name":"小陈","can_delete":false,"product_type":"c1","uid":1009385,"ip_address":"","ucode":"A03A299310AD18","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/e9/814d057a.jpg","comment_is_top":false,"comment_ctime":1585465721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585465721","product_id":100010301,"comment_content":"这个图不错哈","like_count":0},{"had_liked":false,"id":189385,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1584508962,"is_pvip":true,"discussion_count":2,"race_medal":5,"score":"1584508962","product_id":100010301,"comment_content":"执行以下命令时错：<br>java -XX:+PrintInlining  Foo<br>Error: VM option &#39;PrintInlining&#39; is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.<br>Error: Could not create the Java Virtual Machine.<br>Error: A fatal exception has occurred. Program will exit.<br><br>","like_count":0,"discussions":[{"author":{"id":1034079,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c7/5f/2028aae5.jpg","nickname":"搏未来","note":"","ucode":"4A339B35E3B419","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296305,"discussion_content":"那就加上-XX:+UnlockDiagnosticVMOptions，然后就可以了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596505864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1335457,"avatar":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","nickname":"静心","note":"","ucode":"EB264FA6519FDA","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":1034079,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c7/5f/2028aae5.jpg","nickname":"搏未来","note":"","ucode":"4A339B35E3B419","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296306,"discussion_content":"多谢啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596506383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296305,"ip_address":""},"score":296306,"extra":""}]}]},{"had_liked":false,"id":64010,"user_name":"金龟","can_delete":false,"product_type":"c1","uid":1228500,"ip_address":"","ucode":"1C7D35C8AE8D9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/d4/ff1c1319.jpg","comment_is_top":false,"comment_ctime":1548641215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548641215","product_id":100010301,"comment_content":"默认的内联时机是什么样的呢？比如默认在什么情况方法会内联","like_count":0},{"had_liked":false,"id":28103,"user_name":"Leon Wong","can_delete":false,"product_type":"c1","uid":1073650,"ip_address":"","ucode":"B49B327367CF9E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/f2/ca989d6f.jpg","comment_is_top":false,"comment_ctime":1538009154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538009154","product_id":100010301,"comment_content":"建议老师单独开个专题讲IGV生成的IR图","like_count":0},{"had_liked":false,"id":23110,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1014800,"ip_address":"","ucode":"7E57FDCB5E5D49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg","comment_is_top":false,"comment_ctime":1536153961,"is_pvip":false,"replies":[{"id":"8370","content":"多谢指出！","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1536161116,"ip_address":"","comment_id":23110,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1536153961","product_id":100010301,"comment_content":"最后引入常量后foo方法两个图是一样的，后面一幅图应该if节点被优化掉了吧，直接返回0了。","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423419,"discussion_content":"多谢指出！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536161116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}