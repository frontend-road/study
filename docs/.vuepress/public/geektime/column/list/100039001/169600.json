{"id":169600,"title":"11 | 实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？","content":"<p>在前面几节课中，我们学习了面向对象的一些理论知识，比如，面向对象四大特性、接口和抽象类、面向对象和面向过程编程风格、基于接口而非实现编程和多用组合少用继承设计思想等等。接下来，我们再用四节课的时间，通过两个更加贴近实战的项目来进一步学习，如何将这些理论应用到实际的软件开发中。</p><p>据我了解，大部分工程师都是做业务开发的，所以，今天我们讲的这个实战项目也是一个典型的业务系统开发案例。我们都知道，很多业务系统都是基于MVC三层架构来开发的。实际上，更确切点讲，这是一种基于贫血模型的MVC三层架构开发模式。</p><p>虽然这种开发模式已经成为标准的Web项目的开发模式，但它却违反了面向对象编程风格，是一种彻彻底底的面向过程的编程风格，因此而被有些人称为<a href=\"https://zh.wikipedia.org/wiki/%E5%8F%8D%E9%9D%A2%E6%A8%A1%E5%BC%8F\">反模式（anti-pattern）</a>。特别是<strong>领域驱动设计</strong>（Domain Driven Design，简称DDD）盛行之后，这种基于贫血模型的传统的开发模式就更加被人诟病。而基于充血模型的DDD开发模式越来越被人提倡。所以，我打算用两节课的时间，结合一个虚拟钱包系统的开发案例，带你彻底弄清楚这两种开发模式。</p><p>考虑到你有可能不太了解我刚刚提到的这几个概念，所以，在正式进入实战项目的讲解之前，我先带你搞清楚下面几个问题：</p><!-- [[[read_end]]] --><ul>\n<li>什么是贫血模型？什么是充血模型？</li>\n<li>为什么说基于贫血模型的传统开发模式违反OOP?</li>\n<li>基于贫血模型的传统开发模式既然违反OOP，那又为什么如此流行？</li>\n<li>什么情况下我们应该考虑使用基于充血模型的DDD开发模式？</li>\n</ul><p>好了，让我们带着这些问题，正式开始今天的学习吧！</p><h2>什么是基于贫血模型的传统开发模式？</h2><p>我相信，对于大部分的后端开发工程师来说，MVC三层架构都不会陌生。不过，为了统一我们之间对MVC的认识，我还是带你一块来回顾一下，什么是MVC三层架构。</p><p>MVC三层架构中的M表示Model，V表示View，C表示Controller。它将整个项目分为三层：展示层、逻辑层、数据层。MVC三层开发架构是一个比较笼统的分层方式，落实到具体的开发层面，很多项目也并不会100%遵从MVC固定的分层方式，而是会根据具体的项目需求，做适当的调整。</p><p>比如，现在很多Web或者App项目都是前后端分离的，后端负责暴露接口给前端调用。这种情况下，我们一般就将后端项目分为Repository层、Service层、Controller层。其中，Repository层负责数据访问，Service层负责业务逻辑，Controller层负责暴露接口。当然，这只是其中一种分层和命名方式。不同的项目、不同的团队，可能会对此有所调整。不过，万变不离其宗，只要是依赖数据库开发的Web项目，基本的分层思路都大差不差。</p><p>刚刚我们回顾了MVC三层开发架构。现在，我们再来看一下，什么是贫血模型？</p><p>实际上，你可能一直都在用贫血模型做开发，只是自己不知道而已。不夸张地讲，据我了解，目前几乎所有的业务后端系统，都是基于贫血模型的。我举一个简单的例子来给你解释一下。</p><pre><code>////////// Controller+VO(View Object) //////////\npublic class UserController {\n  private UserService userService; //通过构造函数或者IOC框架注入\n  \n  public UserVo getUserById(Long userId) {\n    UserBo userBo = userService.getUserById(userId);\n    UserVo userVo = [...convert userBo to userVo...];\n    return userVo;\n  }\n}\n\npublic class UserVo {//省略其他属性、get/set/construct方法\n  private Long id;\n  private String name;\n  private String cellphone;\n}\n\n////////// Service+BO(Business Object) //////////\npublic class UserService {\n  private UserRepository userRepository; //通过构造函数或者IOC框架注入\n  \n  public UserBo getUserById(Long userId) {\n    UserEntity userEntity = userRepository.getUserById(userId);\n    UserBo userBo = [...convert userEntity to userBo...];\n    return userBo;\n  }\n}\n\npublic class UserBo {//省略其他属性、get/set/construct方法\n  private Long id;\n  private String name;\n  private String cellphone;\n}\n\n////////// Repository+Entity //////////\npublic class UserRepository {\n  public UserEntity getUserById(Long userId) { //... }\n}\n\npublic class UserEntity {//省略其他属性、get/set/construct方法\n  private Long id;\n  private String name;\n  private String cellphone;\n}\n</code></pre><p>我们平时开发Web后端项目的时候，基本上都是这么组织代码的。其中，UserEntity和UserRepository组成了数据访问层，UserBo和UserService组成了业务逻辑层，UserVo和UserController在这里属于接口层。</p><p>从代码中，我们可以发现，UserBo是一个纯粹的数据结构，只包含数据，不包含任何业务逻辑。业务逻辑集中在UserService中。我们通过UserService来操作UserBo。换句话说，Service层的数据和业务逻辑，被分割为BO和Service两个类中。像UserBo这样，只包含数据，不包含业务逻辑的类，就叫作<strong>贫血模型</strong>（Anemic Domain Model）。同理，UserEntity、UserVo都是基于贫血模型设计的。这种贫血模型将数据与操作分离，破坏了面向对象的封装特性，是一种典型的面向过程的编程风格。</p><h2>什么是基于充血模型的DDD开发模式？</h2><p>刚刚我们讲了基于贫血模型的传统的开发模式。现在我们再讲一下，另外一种最近更加被推崇的开发模式：基于充血模型的DDD开发模式。</p><p><strong>首先，我们先来看一下，什么是充血模型？</strong></p><p>在贫血模型中，数据和业务逻辑被分割到不同的类中。<strong>充血模型</strong>（Rich Domain Model）正好相反，数据和对应的业务逻辑被封装到同一个类中。因此，这种充血模型满足面向对象的封装特性，是典型的面向对象编程风格。</p><p><strong>接下来，我们再来看一下，什么是领域驱动设计？</strong></p><p>领域驱动设计，即DDD，主要是用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。领域驱动设计这个概念并不新颖，早在2004年就被提出了，到现在已经有十几年的历史了。不过，它被大众熟知，还是基于另一个概念的兴起，那就是微服务。</p><p>我们知道，除了监控、调用链追踪、API网关等服务治理系统的开发之外，微服务还有另外一个更加重要的工作，那就是针对公司的业务，合理地做微服务拆分。而领域驱动设计恰好就是用来指导划分服务的。所以，微服务加速了领域驱动设计的盛行。</p><p>不过，我个人觉得，领域驱动设计有点儿类似敏捷开发、SOA、PAAS等概念，听起来很高大上，但实际上只值“五分钱”。即便你没有听说过领域驱动设计，对这个概念一无所知，只要你是在开发业务系统，也或多或少都在使用它。做好领域驱动设计的关键是，看你对自己所做业务的熟悉程度，而并不是对领域驱动设计这个概念本身的掌握程度。即便你对领域驱动搞得再清楚，但是对业务不熟悉，也并不一定能做出合理的领域设计。所以，不要把领域驱动设计当银弹，不要花太多的时间去过度地研究它。</p><p>实际上，基于充血模型的DDD开发模式实现的代码，也是按照MVC三层架构分层的。Controller层还是负责暴露接口，Repository层还是负责数据存取，Service层负责核心业务逻辑。它跟基于贫血模型的传统开发模式的区别主要在Service层。</p><p>在基于贫血模型的传统开发模式中，Service层包含Service类和BO类两部分，BO是贫血模型，只包含数据，不包含具体的业务逻辑。业务逻辑集中在Service类中。在基于充血模型的DDD开发模式中，Service层包含Service类和Domain类两部分。Domain就相当于贫血模型中的BO。不过，Domain与BO的区别在于它是基于充血模型开发的，既包含数据，也包含业务逻辑。而Service类变得非常单薄。总结一下的话就是，基于贫血模型的传统的开发模式，重Service轻BO；基于充血模型的DDD开发模式，轻Service重Domain。</p><p>基于充血模型的DDD设计模式的概念，今天我们只是简单地介绍了一下。在下一节课中，我会结合具体的项目，通过代码来给你展示，如何基于这种开发模式来开发一个系统。</p><h2>为什么基于贫血模型的传统开发模式如此受欢迎？</h2><p>前面我们讲过，基于贫血模型的传统开发模式，将数据与业务逻辑分离，违反了OOP的封装特性，实际上是一种面向过程的编程风格。但是，现在几乎所有的Web项目，都是基于这种贫血模型的开发模式，甚至连Java Spring框架的官方demo，都是按照这种开发模式来编写的。</p><p>我们前面也讲过，面向过程编程风格有种种弊端，比如，数据和操作分离之后，数据本身的操作就不受限制了。任何代码都可以随意修改数据。既然基于贫血模型的这种传统开发模式是面向过程编程风格的，那它又为什么会被广大程序员所接受呢？关于这个问题，我总结了下面三点原因。</p><p>第一点原因是，大部分情况下，我们开发的系统业务可能都比较简单，简单到就是基于SQL的CRUD操作，所以，我们根本不需要动脑子精心设计充血模型，贫血模型就足以应付这种简单业务的开发工作。除此之外，因为业务比较简单，即便我们使用充血模型，那模型本身包含的业务逻辑也并不会很多，设计出来的领域模型也会比较单薄，跟贫血模型差不多，没有太大意义。</p><p>第二点原因是，充血模型的设计要比贫血模型更加有难度。因为充血模型是一种面向对象的编程风格。我们从一开始就要设计好针对数据要暴露哪些操作，定义哪些业务逻辑。而不是像贫血模型那样，我们只需要定义数据，之后有什么功能开发需求，我们就在Service层定义什么操作，不需要事先做太多设计。</p><p>第三点原因是，思维已固化，转型有成本。基于贫血模型的传统开发模式经历了这么多年，已经深得人心、习以为常。你随便问一个旁边的大龄同事，基本上他过往参与的所有Web项目应该都是基于这个开发模式的，而且也没有出过啥大问题。如果转向用充血模型、领域驱动设计，那势必有一定的学习成本、转型成本。很多人在没有遇到开发痛点的情况下，是不愿意做这件事情的。</p><h2>什么项目应该考虑使用基于充血模型的DDD开发模式？</h2><p>既然基于贫血模型的开发模式已经成为了一种约定俗成的开发习惯，那什么样的项目应该考虑使用基于充血模型的DDD开发模式呢？</p><p>刚刚我们讲到，基于贫血模型的传统的开发模式，比较适合业务比较简单的系统开发。相对应的，基于充血模型的DDD开发模式，更适合业务复杂的系统开发。比如，包含各种利息计算模型、还款模型等复杂业务的金融系统。</p><p>你可能会有一些疑问，这两种开发模式，落实到代码层面，区别不就是一个将业务逻辑放到Service类中，一个将业务逻辑放到Domain领域模型中吗？为什么基于贫血模型的传统开发模式，就不能应对复杂业务系统的开发？而基于充血模型的DDD开发模式就可以呢？</p><p>实际上，除了我们能看到的代码层面的区别之外（一个业务逻辑放到Service层，一个放到领域模型中），还有一个非常重要的区别，那就是两种不同的开发模式会导致不同的开发流程。基于充血模型的DDD开发模式的开发流程，在应对复杂业务系统的开发的时候更加有优势。为什么这么说呢？我们先来回忆一下，我们平时基于贫血模型的传统的开发模式，都是怎么实现一个功能需求的。</p><p>不夸张地讲，我们平时的开发，大部分都是SQL驱动（SQL-Driven）的开发模式。我们接到一个后端接口的开发需求的时候，就去看接口需要的数据对应到数据库中，需要哪张表或者哪几张表，然后思考如何编写SQL语句来获取数据。之后就是定义Entity、BO、VO，然后模板式地往对应的Repository、Service、Controller类中添加代码。</p><p>业务逻辑包裹在一个大的SQL语句中，而Service层可以做的事情很少。SQL都是针对特定的业务功能编写的，复用性差。当我要开发另一个业务功能的时候，只能重新写个满足新需求的SQL语句，这就可能导致各种长得差不多、区别很小的SQL语句满天飞。</p><p>所以，在这个过程中，很少有人会应用领域模型、OOP的概念，也很少有代码复用意识。对于简单业务系统来说，这种开发方式问题不大。但对于复杂业务系统的开发来说，这样的开发方式会让代码越来越混乱，最终导致无法维护。</p><p>如果我们在项目中，应用基于充血模型的DDD的开发模式，那对应的开发流程就完全不一样了。在这种开发模式下，我们需要事先理清楚所有的业务，定义领域模型所包含的属性和方法。领域模型相当于可复用的业务中间层。新功能需求的开发，都基于之前定义好的这些领域模型来完成。</p><p>我们知道，越复杂的系统，对代码的复用性、易维护性要求就越高，我们就越应该花更多的时间和精力在前期设计上。而基于充血模型的DDD开发模式，正好需要我们前期做大量的业务调研、领域模型设计，所以它更加适合这种复杂系统的开发。</p><h2>重点回顾</h2><p>今天的内容到此就讲完了，我们来一起回顾一下，你应该掌握的重点内容。</p><p>我们平时做Web项目的业务开发，大部分都是基于贫血模型的MVC三层架构，在专栏中我把它称为传统的开发模式。之所以称之为“传统”，是相对于新兴的基于充血模型的DDD开发模式来说的。基于贫血模型的传统开发模式，是典型的面向过程的编程风格。相反，基于充血模型的DDD开发模式，是典型的面向对象的编程风格。</p><p>不过，DDD也并非银弹。对于业务不复杂的系统开发来说，基于贫血模型的传统开发模式简单够用，基于充血模型的DDD开发模式有点大材小用，无法发挥作用。相反，对于业务复杂的系统开发来说，基于充血模型的DDD开发模式，因为前期需要在设计上投入更多时间和精力，来提高代码的复用性和可维护性，所以相比基于贫血模型的开发模式，更加有优势。</p><h2>课堂讨论</h2><p>今天课堂讨论的话题有两个。</p><ol>\n<li>你做经历的项目中，有哪些是基于贫血模型的传统的开发模式？有哪些是基于充血模型的DDD开发模式呢？请简单对比一下两者的优劣。</li>\n<li>对于我们举的例子中，UserEntity、UserBo、UserVo包含的字段都差不多，是否可以合并为一个类呢？</li>\n</ol><p>欢迎在留言区写下你的答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":156165,"user_name":"乐","can_delete":false,"product_type":"c1","uid":1049576,"ip_address":"","ucode":"4505CB6BD9C144","user_header":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","comment_is_top":false,"comment_ctime":1574827470,"is_pvip":false,"discussion_count":51,"race_medal":0,"score":"2217777952206","product_id":100039001,"comment_content":"## 为什么贫血模型盛行<br><br>下面几项自己都中过招（环境问题和个人问题）：<br><br>### 环境问题 ##<br><br>* 近朱者赤，近墨者黑<br>    * 大多数人都是模仿别人的代码，而别人的代码基本上都是 demo，没有复杂的业务逻辑，基本是贫血模型<br>    * 找不到好的指导与学习对象<br>* 接触不到复杂业务项目<br>    * 做 web 项目的，很大一部分就是简单的 CURD，贫血模型就能解决<br>* 公司以任务数来衡量个人价值<br><br>### 个人问题 ###<br><br>* 不考虑项目质量属性<br>    * 只关心当前业务，没有意识去思考后期该如何维护和响应业务变更<br>* 求快不求质<br>    * 个人以任务数来自我满足<br>    * 没有 60 分和 100 分的概念<br>    * 需求分析、设计、编码合为一体<br><br>## 如何理解充血模型<br><br>先推荐一本书：整洁架构设计<br><br>先说一下充血模型中各组件的角色：<br><br>* controller 主要服务于非业务功能，比如说数据验证<br>* service 服务于 use case，负责的是业务流程与对应规则<br>* Domain 服务于核心业务逻辑和核心业务数据<br>* rep 用于与外部交互数据<br><br>----<br><br>额外说一点，业务开发个人倾向于六边形架构，而非传统的三层架构。六边形架构更能体现当下 web 应用的场景<br><br>六边形项目结构（根据实际情况自行组织与定义）：<br><br>* InboundHandler 代替 controller<br>    * *WebController：处理 web 接口<br>    * *WeChatController：处理微信公众号接口<br>    * *AppController：处理 app 接口<br>    * *MqListener：处理 消息<br>    * *RpcController：处理子系统间的调用<br>* service 服务于 use case，负责的是业务流程与对应规则<br>    * CQPS + SRP：读写分离和单一原则将 use case 分散到不同的 service 中，避免一个巨大的 service 类（碰到过 8000 行的 service）<br>* Domain 服务于核心业务逻辑和核心业务数据<br>    * 最高层组件，不会依赖底层组件<br>    * 易测试<br>* outBoundhandle 代替 rep<br>    * MqProducer：发布消息<br>    * Cache：从缓存获取数据<br>    * sql：从数据库获取数据<br>    * Rpc：从子系统获取数据<br><br>----<br><br>各层之间的数据模型不要共用，主要是因为稳定性不同，各层数据模型的变更原因和变更速率是不同的，离 IO 设备越近的的稳定性越差，比如说 controller 层的 VO，rep 层的 entity。Domain 层是核心业务逻辑和核心业务数据，稳定性是最高的<br><br>----<br><br>几个不太容易理解的点（我刚开始碰到的时候很费解）：<br><br>* use case 和 核心业务逻辑该如何定义与区分<br>    * 哪些该放到 service 里面，哪些该放到 Domain 中<br>* rep 是依赖于 service 的，而不是 service 依赖 rep 层<br>    * 业务逻辑是最高层组件（最稳定的），rep 层是底层组件<br>* 接口能反转依赖关系<br><br>----<br><br>一剂良药：所有的中间层都是为了解耦","like_count":517,"discussions":[{"author":{"id":1125104,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/f0/41590e10.jpg","nickname":"Citizen Z","note":"","ucode":"9CA547640A8629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130651,"discussion_content":"你字多给你点赞","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1578761338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1072044,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5b/ac/abb7bfe3.jpg","nickname":"薯片","note":"","ucode":"FE757E1248EFF5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104306,"discussion_content":"有没有demo项目可以分享一下呢？show me the code","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1577423292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1230417,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c6/51/e39b5828.jpg","nickname":"刘鹏","note":"","ucode":"44F3D4DB3F5678","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381679,"discussion_content":"所有的中间层都是为了解耦👏🏽","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1625183900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1388931,"avatar":"https://static001.geekbang.org/account/avatar/00/15/31/83/2938c11c.jpg","nickname":"Joe阿牛","note":"","ucode":"3C4FEABBB6ACF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297503,"discussion_content":"这个理解不错。 补充一下， repo 接口是domain的outbound， domain依赖于repo接口，但不依赖于repo实现； repo实现依赖于repo接口；这就是接口实现了依赖倒转。 rpo接口的签名不允许使用任何domain之外的类.","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1596953181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165364,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","nickname":"海罗沃德","note":"","ucode":"8704F1D6980FA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":85610,"discussion_content":"離UI越近越不穩定這句話精髓了👍","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1576559667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1233982,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d4/3e/3ddc67e7.jpg","nickname":"黑暗骑士","note":"","ucode":"9FEF4105449ABC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1165364,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","nickname":"海罗沃德","note":"","ucode":"8704F1D6980FA0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294505,"discussion_content":"是IO，可别理解错了呀。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595908548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":85610,"ip_address":""},"score":294505,"extra":""}]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341074,"discussion_content":"各层之间的数据模型不要共用，主要是因为稳定性不同，各层数据模型的变更原因和变更速率是不同的，离 IO 设备越近的的稳定性越差，比如说 controller 层的 VO，rep 层的 entity。Domain 层是核心业务逻辑和核心业务数据，稳定性是最高的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610285340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1318078,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1c/be/fd1a9a3a.jpg","nickname":"天空、海阔","note":"","ucode":"9BCB64EF9A5894","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296772,"discussion_content":"这个理解很赞同。各层之间的数据模型不要共用，主要是因为稳定性不同，各层数据模型的变更原因和变更速率是不同的，离 IO 设备越近的的稳定性越差，比如说 controller 层的 VO，rep 层的 entity。Domain 层是核心业务逻辑和核心业务数据，稳定性是最高的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596641375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292847,"discussion_content":"demo，没有复杂的业务逻辑，基本是贫血模型  ----- 这个角度很好啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595346099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1932882,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIAEp2HUau1okDfoHgQ2Hlt3NOk16vlsSIZDCHuj9lUk4ekic5yqmJmiap0gsuR3VuM32qLIFiapYz1g/132","nickname":"Geek_leisile","note":"","ucode":"A778E717D51A77","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219416,"discussion_content":"mark","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585754320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202985,"discussion_content":"计算机领域的任何问题都可以通过添加一个间接的中间层来解决","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583979393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73625,"discussion_content":"请问rep怎么依赖service？ 通常都是seevice主动掉rep的方法进行数据交互，rep怎么可能会主动掉service的方法呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575562642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73751,"discussion_content":"依赖反转，通过接口层就可以了。这个不太好理解，a->b变成a->c,b->c","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575594029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73625,"ip_address":""},"score":73751,"extra":""},{"author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73754,"discussion_content":"不是主动调方法，是依赖方向发生了改变","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575594102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73625,"ip_address":""},"score":73754,"extra":""},{"author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76882,"discussion_content":"我理解只能在service里头声明依赖rep，然后通过DI注入 rep，别无它法啊 不太理解a->b, b->c是什么含义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575864089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73754,"ip_address":""},"score":76882,"extra":""}]},{"author":{"id":1075909,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6a/c5/d51c4961.jpg","nickname":"我是你的石头城","note":"","ucode":"7908568FAD09A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552932,"discussion_content":"充血模型实现起来诸多困难，只能大厂或者自己玩玩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645662725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543936,"avatar":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfCibibkl1x62jWnqPRhfwJOdribiaaNNBTAx9ejtjdzd0pX3VLfo5zGxav52zL3urhXOx316rFlazyUl5PknJa92ARg/132","nickname":"Geek_shuiyue","note":"","ucode":"5ED2F7C695DC0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551508,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645026879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330141,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/dd/41614582.jpg","nickname":"HomeyLiu","note":"","ucode":"EF4CCB92C369B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533925,"discussion_content":"[ rep 是依赖于 service 的，而不是 service 依赖 rep 层] 这个错了,你说的rep 就是ddd里面的防腐层,service依赖于rep的接口,不依赖具体实现,[ * Cache：从缓存获取数据\n    * sql：从数据库获取数据\n    * Rpc：从子系统获取数据] 实现接口, service里面组合一个借口,DI注入.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638024695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533060,"discussion_content":"可见功力之深，慢慢吸收学习！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637764428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2276155,"avatar":"https://static001.geekbang.org/account/avatar/00/22/bb/3b/6e020a32.jpg","nickname":"多学多看多记","note":"","ucode":"0670C833007510","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400615,"discussion_content":" 哪些该放到 service 里面，哪些该放到 Domain 中，原则上是domain的方法复用性更强，但是也不能保证设计缺陷，因此才有了重构的必要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633350858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1599327,"avatar":"https://static001.geekbang.org/account/avatar/00/18/67/5f/fc918fbf.jpg","nickname":"WhiteGiving","note":"","ucode":"94F35ABC45F1A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395042,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632198424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2429969,"avatar":"https://static001.geekbang.org/account/avatar/00/25/14/11/f1220081.jpg","nickname":"九尾","note":"","ucode":"3E6BDF7B9C78FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382570,"discussion_content":"又学到了一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625634752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128491,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","nickname":"星夜","note":"","ucode":"3B46C09D994CEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350163,"discussion_content":"深有体会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613729307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083927,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8a/17/2a823333.jpg","nickname":"stone","note":"","ucode":"FA29B152CE7D6F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344030,"discussion_content":"CQPS 是啥？还是CQRS？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611240708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2251640,"avatar":"","nickname":"Geek_06a688","note":"","ucode":"60EE93AAE48672","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322857,"discussion_content":"学习了，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604832073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1305639,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ec/27/827015c0.jpg","nickname":"追风少年","note":"","ucode":"0467648A908B18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321057,"discussion_content":"学习了，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604538312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323102,"avatar":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","nickname":"Younger Ku","note":"","ucode":"D157DC38BDB515","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304118,"discussion_content":"又是个高人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599473357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1346654,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8c/5e/eeaada1d.jpg","nickname":"王鹏飞","note":"","ucode":"1CC6DCCF449AFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298740,"discussion_content":"“rep 是依赖于 service 的，而不是 service 依赖 rep 层”\n请问这句话怎么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597391335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2284340,"avatar":"https://static001.geekbang.org/account/avatar/00/22/db/34/f6b7c5bb.jpg","nickname":"创始人）","note":"","ucode":"03C55CED49FEB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1346654,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8c/5e/eeaada1d.jpg","nickname":"王鹏飞","note":"","ucode":"1CC6DCCF449AFC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332482,"discussion_content":"依赖倒置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607236975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298740,"ip_address":""},"score":332482,"extra":""}]},{"author":{"id":1447569,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/WtHCCMoLJ2DvzqQwPYZyj2RlN7eibTLMHDMTSO4xIKjfKR1Eh9L98AMkkZY7FmegWyGLahRQJ5ibPzeeFtfpeSow/132","nickname":"脱缰的野马__","note":"","ucode":"D5F993E7232C61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281688,"discussion_content":"学习了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591793265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010705,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6c/11/a4b24b4a.jpg","nickname":"王宗阳","note":"","ucode":"9737AD5039154A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279265,"discussion_content":"《整洁架构设计》这本书没搜到，请问是《架构整洁之道》这本吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591318047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1122533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/20/e5/f66d6144.jpg","nickname":"九先生","note":"","ucode":"A63A333299D485","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1010705,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6c/11/a4b24b4a.jpg","nickname":"王宗阳","note":"","ucode":"9737AD5039154A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386252,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627482989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":279265,"ip_address":""},"score":386252,"extra":""}]},{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269956,"discussion_content":"牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589968382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250922,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIzGGthScz54sECZJKX3lgyjCATkgrvSt5N3eOsYB34jibCr3SkAX88QaZ5IVmME9Ec7VdkQGwRSPw/132","nickname":"哈哈哈","note":"","ucode":"8AC20A1C9C7DF8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247081,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587797251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074640,"avatar":"https://static001.geekbang.org/account/avatar/00/10/65/d0/c11d4a31.jpg","nickname":"滴水藏海","note":"","ucode":"9C1F9C91189F69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242077,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587463978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311947,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/xysT7OH4SrD4sv944ndDv5tnJOk5na37Gxd5owGWsE7ON7AVW0ibnYGNRoZd0ibLWhFVXLLjOB5QFxwjo0EGIkoQ/132","nickname":"雨下不停","note":"","ucode":"0893B9C249E48A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":233969,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586953438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110039,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/17/796a3d20.jpg","nickname":"言十年","note":"","ucode":"67B8B49C3A3B17","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215084,"discussion_content":"没有 60 分和 100 分的概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585282144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007670,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/60/36/1848c2b7.jpg","nickname":"dovefi","note":"","ucode":"9F8C59F095B187","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213391,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585066564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622209,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c0/c1/414d5d1b.jpg","nickname":"_yh葱","note":"","ucode":"FA899711E91113","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198833,"discussion_content":"mark。现在还不太懂，慢慢学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583516509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1338088,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/e8/4bb87c34.jpg","nickname":"月马穿关","note":"","ucode":"2CE20CA1EB827D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167143,"discussion_content":"乐 感谢你的分享 请问你有blog之类的吗？想继续看你的分享😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581466779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731602,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6c/12/67bcce50.jpg","nickname":"我太难了","note":"","ucode":"B80133799A4494","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102200,"discussion_content":"不明觉厉，慢慢吸收学习！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577330538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72997,"discussion_content":"神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575548046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001970,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/f2/25cfa472.jpg","nickname":"寒溪","note":"","ucode":"67B9F1A1C15A20","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70206,"discussion_content":"Master","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575336415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1088710,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","nickname":"苗","note":"","ucode":"5ECCC6C855E541","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65417,"discussion_content":"总结的很好，六边形架构我第一次是在《微服务设计模式》中看到的；但没有实际验证使用过；希望能以后有机会交流；能加个微信吗18310745818？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575001656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1088710,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","nickname":"苗","note":"","ucode":"5ECCC6C855E541","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65757,"discussion_content":"加你了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575027012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65417,"ip_address":""},"score":65757,"extra":""}]},{"author":{"id":1255437,"avatar":"https://static001.geekbang.org/account/avatar/00/13/28/0d/558f6141.jpg","nickname":"你净瞎说～","note":"","ucode":"A4EE0154034D22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63460,"discussion_content":"才8000行的service有必要拿出来说嘛😏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574871229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63384,"discussion_content":"先点赞。\n但不太同意：controller 主要服务于非业务功能，比如说数据验证。\n我认为数据验证应该放在service层或domain层，domain层如果能直接原来做单元测试就牛逼了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574870137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":63758,"discussion_content":"个人认为数据验证分两种，与业务无关和业务有关，无关的放到controller，有关的放到对应的domain，主要是将功能点分离，具体实践还是看各公司的规范","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1574907695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":63384,"ip_address":""},"score":63758,"extra":""},{"author":{"id":1268264,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","nickname":"GEEKBANG_6638780","note":"","ucode":"952194E56FD8C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382761,"discussion_content":"这点我保留，说下我的观点。参见周志明老师的架构课程（极客时间的免费公开课）。 有个章节是针对valid的验证。 所有的验证（业务非业务）都集中在某个Model上。一是为了复用，二是为了内聚（符合充血思想）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625714635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":63758,"ip_address":""},"score":382761,"extra":""}]}]},{"had_liked":false,"id":156114,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1574820808,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"1096791481288","product_id":100039001,"comment_content":"我个人认为，充血模型在web开发领域不流行的一个根本原因，在于互联网兴起后各种层出不穷的需求变动，以及短命的项目生存周期，充血模型应对复杂业务确实很有优势，但是这是建立在复杂业务本身其实相对稳定上，比如银行的业务，虽然复杂，但是其实很稳定。但是要是换在互联网，今天改需求明天改需求，甚至很多时候根本就是推倒了重来的需求，充血模型面对这种状态，根本是力不从心的","like_count":256,"discussions":[{"author":{"id":1042354,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e7/b2/334bc992.jpg","nickname":"AlfredLover","note":"","ucode":"A3A998F362CC37","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219826,"discussion_content":"是思维固化了，如果ddd用熟练了，其实都差不多的。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1585814018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1903190,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0a/56/eee89103.jpg","nickname":"罗ྂ杰ྂ","note":"","ucode":"3277C09D7D38C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203151,"discussion_content":"我们公司的系统，我已经认为做的非常庞大了。现在看了文章后，尽然发现是属于贫血模式，数据和操作完全分离，几乎都是crud的前端到后端的流程，也不能完全说贫血模式不好，我们公司研发人员500多，如果都是ddd，这么多开发人员 ，做出来的系统，搞不好，真的会弄成四不像了","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1584005478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2277321,"avatar":"https://static001.geekbang.org/account/avatar/00/22/bf/c9/7f23f3ec.jpg","nickname":"momo","note":"","ucode":"00DB6D76B7B25A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344266,"discussion_content":"这条留言争哥应该回复一下的，我也很想知道答案。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1611375360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298991,"discussion_content":"贫血模型简单，对人员要求低，可控。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1597500756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100751,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/cf/417a5ec2.jpg","nickname":"黑豹","note":"","ucode":"B9F94D0AFA89DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397064,"discussion_content":"我们国家的短板，复杂工业软件设计，就是DDD的常用之地。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1632554609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013283,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","nickname":"空知","note":"","ucode":"C448E98238DD36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78250,"discussion_content":"做政府的项目,需求一天变N回,面向需求开发,DDD用不起来啊!","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1575985643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1013283,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","nickname":"空知","note":"","ucode":"C448E98238DD36","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282359,"discussion_content":"理论上，DDD不是在适应需求变更上表现得更好吗","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1591951320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":78250,"ip_address":""},"score":282359,"extra":""},{"author":{"id":1449071,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqG3dBQs7fghrraQuXztdTJjmVYicGoic85W33U9ekSL6mpKvXOANI4N7duq5rXZXc2u7GVSFXERe6A/132","nickname":"Geek_717f1d","note":"","ucode":"741C242B0BBD6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1013283,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","nickname":"空知","note":"","ucode":"C448E98238DD36","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299257,"discussion_content":"分离关注点没做好吧？ 一般来说模型是相对稳定的， DDD的关键就是提炼模型。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1597631781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":78250,"ip_address":""},"score":299257,"extra":""}]},{"author":{"id":1193468,"avatar":"https://static001.geekbang.org/account/avatar/00/12/35/fc/6d3e0035.jpg","nickname":"saber","note":"","ucode":"D02F8D129DB41C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106478,"discussion_content":"老师在文中说的 DDD 领域驱动设计，我的理解是在 Domain 类中进行需求的封装，也就是可以有多个驱动类，比如 xxDomain 类，然后 Service 根据不同的需求调用不同的驱动类来实现一些需求，所以这对于变动的需求也是可以适用的，不知道我的理解对不对，我不是做 Web 项目，所以不知道每步开发中的具体细节，如果理解不对，请大佬指教","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577537779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63862,"discussion_content":"如果充血模型应对不来需求变更 ddd为何流行呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574917092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1046302,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","nickname":"有铭","note":"","ucode":"2C7CB36CA5C04C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64148,"discussion_content":"ddd流行？我不觉得，你只要下基层看看那些数量更多的中小企业，看看他们的实践，你就不会得出ddd在国内流行的看法，所谓ddd流行也只是在比较规范的大企业，而这些企业的需求变更本身就是比较规范的","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1574939254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":63862,"ip_address":""},"score":64148,"extra":""},{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1046302,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","nickname":"有铭","note":"","ucode":"2C7CB36CA5C04C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66447,"discussion_content":"这个观点我很认可，按你所说，一些大公司已经开始尝试实践ddd，在某些领域反响也不错，已经开始对外输出自己对ddd的设计与思考，那就说明ddd不是毫无用处的吧。至于为什么中小型公司实践ddd的比较少的问题，我觉得正好是我想说的答案:成本！\n实现充血模型需要一定的对象设计能力以及预留一些可以扩展的点。那么这些在大公司不是事，假设大公司的研发经理设计不来，有架构师，架构师再不行，可以请行业高手来传授经验。这些在中小型公司都是不愿意承担的成本，技术人员水平层次不齐，你要求他按充血模型开发，最后交付的代码指不定是什么样的，最后很可能变成四不像，这样四不像的代码一直传承下去，很可能项目还没面世就凉了。而贫血模型，相对于更容易理解，即便是水平一般的程序员多花点时间去阅读代码也能明白代码逻辑和流程，上手门槛相对低一些，那么成本低下来了，按照这样的模式开发，大家都能看得懂，照葫芦画瓢都能实现功能。小公司还有一特点，时间紧需求多流程不完善，可能人员变动还大，如果这样去玩ddd，进来一新人培训半天，听不懂，玩不来，走了，你愿意买单吗？并且就你两段内容的最后一句话，更是觉得离谱，按你所说ddd只在比较规范的大公司流行，并且充血模型面对需求变更，力不从心，而ddd是基于充血模型的设计，那么你认为大公司是钱多了烧的慌，给自己挖坑跳吗？","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1575071180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":64148,"ip_address":""},"score":66447,"extra":""},{"author":{"id":1289396,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBXvJE7mmpvlrz87ZepheLb2T4LZlRDPibw5cAzE6ia3vIfDSfb50PDDXlgPImTic4BJcfibp3QPJVYBQ/132","nickname":"Leo","note":"","ucode":"EDD152327BF6A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76824,"discussion_content":"ddd的确不太流行，几乎找不到好的实践案例","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575857025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":63862,"ip_address":""},"score":76824,"extra":""}]},{"author":{"id":1737886,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/84/9e/d4c0e2c4.jpg","nickname":"Broadm","note":"","ucode":"BEA06300731AE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574937,"discussion_content":"频繁修改需求的本质原因是没有找到业务核心,到底要解决什么问题,把核心问题找出来,业务模型变动的不会大,DDD就是要让我们在业务上花时间,理清楚我们的业务逻辑,什么是核心业务,什么是支持业务,什么是通用业务, 核心业务就需要我们花费更多的时间打磨业务模型,核心业务比较适合使用充血模型,因为它封装了变化点,把业务逻辑集中到一个模型, 其他地方只要调用即可, 避免出现,业务逻辑满天飞的问题,需求变了要改N个地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654481854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2046685,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/3a/dd/e44bacb8.jpg","nickname":"Ray","note":"","ucode":"37E86CE67F004B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393717,"discussion_content":"你觉得力不从心是因为没设计好domain，应对不了变更","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631579123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156014,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1574812793,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"736014220409","product_id":100039001,"comment_content":"一直贫血而不自知","like_count":172,"discussions":[{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141397,"discussion_content":"以前都不知道有贫血，充血这些词","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1579418350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1307080,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","nickname":"potato00fa","note":"","ucode":"D179E68D87CC50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63902,"discussion_content":"太真实了，一直不知道自己不知道","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574920284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1283461,"avatar":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","nickname":"杨锋","note":"","ucode":"85A7828A538FB0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285379,"discussion_content":"一直贫血+1","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592819965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","nickname":"QQ怪","note":"","ucode":"1A39B8433D9208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64579,"discussion_content":"我也是","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574950886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623626,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c6/4a/3bd896fc.jpg","nickname":"Heiky","note":"","ucode":"03AA79E1BC4AE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63957,"discussion_content":"哈哈哈，都是不自知\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574925584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028945,"avatar":"","nickname":"Geek5198","note":"","ucode":"2BEBE6A39D9A0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337172,"discussion_content":"抱头痛哭","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608813846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331232,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606813197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299667,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d4/d3/039a2683.jpg","nickname":"+6","note":"","ucode":"8100FACCC39BAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325886,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605452412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2037677,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/17/ad/96ff4c27.jpg","nickname":"边缘","note":"","ucode":"2437864D6E4333","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319507,"discussion_content":"看到这，蔚然的笑了，戳到痛点了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604041604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112490,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","nickname":"龙猫","note":"","ucode":"FD726CC969EF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296454,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596546769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1792066,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/58/42/640dd096.jpg","nickname":"阳超","note":"","ucode":"239037A8E3F055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279415,"discussion_content":"都很真实","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591342472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1501505,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e9/41/7cb2cf64.jpg","nickname":"Poppy","note":"","ucode":"AF656A00521037","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220556,"discussion_content":"哈哈哈哈哈  我也是  哭了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585895563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1139808,"avatar":"https://static001.geekbang.org/account/avatar/00/11/64/60/40019dc1.jpg","nickname":"Bii","note":"","ucode":"17447F2F8AF240","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195879,"discussion_content":"一直在贫，从未停止过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583319362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099706,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c7/ba/4c449be2.jpg","nickname":"zhaozp","note":"","ucode":"BF390F5ED762CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77955,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575961517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1446471,"avatar":"https://static001.geekbang.org/account/avatar/00/16/12/47/8e0310e8.jpg","nickname":"Wellwell","note":"","ucode":"35D7C063C194B3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77687,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575933714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156058,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1574816213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"362352069077","product_id":100039001,"comment_content":"设计模式_10<br># 问题: <br>- 1. 做的Android项目更多，Android开发也是经历了MVC==&gt;MVP(依然是一种MVC架构)==&gt;MVVM的模式演进。类MVC模式比较多，在UI相关的开发中，只用过贫血模式(之前也尝试过使用充血模式，但考虑到不一致带来的成本就放弃了)；在UI无关的复杂服务类开发中，也用过充血模型(虽然我不知道它叫充血模型)。我认为贫血模型的优点是更容易看懂，充血模型的优点是更能应对复杂业务。<br>- 2. 我认为还是不要放在同一个类中，原因是：成本大于收益。成本：一个复杂的类，在被不同的模块调用时充当着不同的角色，甚至，不同的模块调用不同的字段，需要大篇幅的文档来描述这些差异。稍有修改，复杂度的增加非线性。优点：代码重用。<br><br># 感想:<br>软件开发处理的是工程学问题，解决方案依赖场景，一个新技术的火爆一定是解决了当前主流场景的痛点问题，随着规模和复杂度的变化，场景也随之变化；争论贫血模式更好还是充血模式更好，争论哪个开发语言更好，这样的问题都是伪命题，我们更应该投入精力的是为当前场景选择最合适的解决方案。","like_count":84},{"had_liked":false,"id":236213,"user_name":"倡印","can_delete":false,"product_type":"c1","uid":1455958,"ip_address":"","ucode":"4F53AA5D017D89","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","comment_is_top":false,"comment_ctime":1595346170,"is_pvip":false,"replies":[{"id":"87403","content":"你这是贫嘴，不是贫血","user_name":"作者回复","comment_id":236213,"uid":"1190123","ip_address":"","utype":1,"ctime":1595465278,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"207753776378","product_id":100039001,"comment_content":"小时候妈妈说我贫血 ，长大了才知道我真的贫血","like_count":49,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501987,"discussion_content":"你这是贫嘴，不是贫血","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595465278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2671691,"avatar":"https://static001.geekbang.org/account/avatar/00/28/c4/4b/bf30a25e.jpg","nickname":"Honey,","note":"","ucode":"00AB03C755AD79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390681,"discussion_content":"没忍住~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629969671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336029,"discussion_content":"哈哈哈, 你这个话风.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608458723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156128,"user_name":"lmdcx","can_delete":false,"product_type":"c1","uid":1334409,"ip_address":"","ucode":"F2CDD0091ADFD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","comment_is_top":false,"comment_ctime":1574822478,"is_pvip":false,"replies":[{"id":"59985","content":"哈哈，多谢认可，我写这篇文字的时候，还害怕搞DDD的人会来骂我，看来是我多虑了。隔壁的DDD课程可以去学下，管它是不是我写的，看看他咋“吹”的也好。","user_name":"作者回复","comment_id":156128,"uid":"1190123","ip_address":"","utype":1,"ctime":1574838339,"user_name_real":"王争"}],"discussion_count":8,"race_medal":0,"score":"194848350798","product_id":100039001,"comment_content":"看到「领域驱动设计有点儿类似敏捷开发、SOA、PAAS 等概念，听起来很高大上，但实际上只值“五分钱”。」时，不知道引起了多少人的共鸣，O(∩_∩)O~。  做技术的本身就经常会遇到沟通问题，一些人还总喜欢“造概念”，唯恐别人听懂了，争哥这句话无疑说中了我们的心坎儿。  <br>当然我这里也不是说 DDD 不好（看后面的争哥也没这个意思），但是每个理论都有自己的局限性和适用性，看很多文章在讲一些理论时，总是恨不得把自己的理论（其实也算不得自己的）吹成银弹，态度上就让人很难接受。  <br>我还是喜欢争哥的风格，逻辑很清晰，也很严谨，很务实。  <br><br>关于老师的问题。  <br>说句实话，我们就没有写过充血模型的代码。  <br>我们会把 UserEntity、UserBo 混着用， UserBo 和 UserVo 之间转换时有时还会用 BeanUtils 之类的工具 copy 。  <br>对于复杂的逻辑，我们就用复杂 SQL 或者 Service 中的代码解决。  <br><br>不过我在翻一些框架时，比如 Java 的并发包时不可避免的需要梳理 Lock、Condition、Synchronizer 之间的关系。比如看 Spring IOC 时，也会需要梳理围绕着 Context 、 Factory 展开的很多类之间的关系。  <br>就好像你要“混某个圈子”时，就不可避免的“拜码头”，认识一堆“七大姑八大姨”，然后你才能理解整个“圈子”里的关系和运转逻辑。  <br>我也经常会有疑问， DDD 和面向对象究竟是什么关系，也会猜想：是不是面向对象主要关注“圈子”内的问题，而 DDD 主要关注“圈子”之间的问题？有没有高手可以回答一下。  <br>（其实我最近一直都想订隔壁DDD的课，但是考虑到精力的问题，以及担心学不会，主要不是争哥讲O(∩_∩)O~，所以没下手）","like_count":45,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475997,"discussion_content":"哈哈，多谢认可，我写这篇文字的时候，还害怕搞DDD的人会来骂我，看来是我多虑了。隔壁的DDD课程可以去学下，管它是不是我写的，看看他咋“吹”的也好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1056127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/7f/aabc1b66.jpg","nickname":"hetiu","note":"","ucode":"35D9338C3ABD20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":105414,"discussion_content":"ddd是个新名词，但背后的思想也是对前人的总结，就像设计模式，其实已经经过几十年发展，最后四人帮给系统化的总结出来。ddd更像一个多方面的方法论，涉及团队沟通，需求分析，业务建模，设计，编码，业务根据场景选择性应用，追求极致ddd成本很高，对团队成员的能力要求也很高。而且ddd的价值体现在中后期，比如代码可维护性，bug率，复用程度等。对于大部分互联网短平快的需求，而且生命周期较短的功能，还不如CRUD来得直接。只有业务发展趋向稳定，更关注产品质量时，ddd才能开始体现价值。不过，一切，都可以用重构解决，重构成全了设计模式，也能够成全ddd。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1577460946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1323102,"avatar":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","nickname":"Younger Ku","note":"","ucode":"D157DC38BDB515","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1056127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/7f/aabc1b66.jpg","nickname":"hetiu","note":"","ucode":"35D9338C3ABD20","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304117,"discussion_content":"没有深厚的代码功底和丰富的项目经验是不可能说出这句句箴言，令人思想升华，回味无穷。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599473187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":105414,"ip_address":""},"score":304117,"extra":""},{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1056127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/7f/aabc1b66.jpg","nickname":"hetiu","note":"","ucode":"35D9338C3ABD20","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383839,"discussion_content":"不是04年出的吗 后来跟着微服务起来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626251369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":105414,"ip_address":""},"score":383839,"extra":""}]},{"author":{"id":1100703,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/9f/ee68858c.jpg","nickname":"阿玛铭","note":"","ucode":"DBF948D82ACBE3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70455,"discussion_content":"正好看过隔壁欧老师讲的DDD，极客时间的老师和总编辑的思维都是比较有哲学上的一致性的。自顶向下认知法：演绎（理论、假设），自底向上认知法：归纳（实践，结论）。不打广告，我只能说看过有收益。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1575358724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1100703,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/9f/ee68858c.jpg","nickname":"阿玛铭","note":"","ucode":"DBF948D82ACBE3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70555,"discussion_content":"谢谢！我也快入手了，你可以发个返现链接给我，不枉你白留言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575367852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":70455,"ip_address":""},"score":70555,"extra":""}]},{"author":{"id":1100751,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/cf/417a5ec2.jpg","nickname":"黑豹","note":"","ucode":"B9F94D0AFA89DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397065,"discussion_content":"DDD是好东西，不能因为没有用过，或者遇到一些水货DDD，就形成对DDD的误会。这应该是DDD传道者自身的问题。在我从事的复杂工业软件项目中，项目的生命周期是以至少十年来起步的，它有非常复杂的过程。而且工业软件不仅仅只是业务，还包含很多和物理、机械、等复杂外部组件的交互、控制。贫血模型在这里几无任何用武之地。我相信随着我们国家复杂工业软件的兴起，DDD也会迎来它应有的地位。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1632555134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268264,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","nickname":"GEEKBANG_6638780","note":"","ucode":"952194E56FD8C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382762,"discussion_content":"面向对象的思想很重要，但是有时候对象解决不了一些问题。所以DDD就出来了，DDD其实就是组合一组对象共同服务于一个业务。 说白了DDD就是更广义的面向对象设计。给你个链接：https://mp.weixin.qq.com/s/a5NiKLFZsg54P_fcXPkahg  这篇文章讲述了利用DDD解决一些实际的问题","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625714948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155985,"user_name":"╭(╯ε╰)╮","can_delete":false,"product_type":"c1","uid":1440349,"ip_address":"","ucode":"4CB5FAEEE8CC5D","user_header":"https://static001.geekbang.org/account/avatar/00/15/fa/5d/735fdc76.jpg","comment_is_top":false,"comment_ctime":1574788666,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"156193611322","product_id":100039001,"comment_content":"个人感觉业务被贫血模型绑架的另一个原因是以前缓存nosql这些技术不不成熟 刚毕业那会哪有什么redis，机器的内存也不多。都是公司堆在角落的旧机器。一些业务如果在domain里实现可能会hold住数据库中的大部分数据。所以业务上都需要翻译成sql的where和join来减少网络和内存的开销。功能都被sql抢了去，想充血也充不起来。现在随便开个项目不带个redis老板都会质疑一下。mysql的访问也都是能少就少，不行再多加几台云服务器。老板也显得更有面儿。","like_count":36,"discussions":[{"author":{"id":2234620,"avatar":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","nickname":"江南一笑","note":"","ucode":"E38938A1178827","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318836,"discussion_content":"那可能是那时候的访问量比较少，数据库规模也不大，所以不需要数据库缓存。\n我想问：如果使用mvc框架，就必然不能做到缓存数据库数据吗？有人具体说明一下？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603860706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1037925,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d6/65/e6abeba2.jpg","nickname":"Persistfanāāā","note":"","ucode":"8C4EF892B7ED27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74150,"discussion_content":"老板天天嫌又要买服务器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575634579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541099,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/eb/3d8727b6.jpg","nickname":"苏丹","note":"","ucode":"C83E8646A29A9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70424,"discussion_content":"有道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575355406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133947,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIaOAxRlZjFkGfRBn420LuAcyWkMrpq5iafGdqthX5icJPjql0ibZOAdafaqbfvw4ZpVzDmsaYglVXDw/132","nickname":"唐朝农民","note":"","ucode":"6F8F43C6652225","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64681,"discussion_content":"有点道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574952597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1730626,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJvm1JYIDcS74s4cEYxA1PXMqjortVXEjUKyGQcPvibNJ4EAuksIa6uoHgr6G1yRqAM2KtP3yicKgTA/132","nickname":"小妖","note":"","ucode":"49C01DBFADF101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63822,"discussion_content":"有道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574914219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156052,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1574815692,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"117538932684","product_id":100039001,"comment_content":"基本上经历过的web项目都是基于贫血模型开发模式的，entity，bo，vo不能放在一个类里，每个对象的应用场景不同，entity是映射数据库字段的，bo，vo适合业务和展示相关的，而且entity相对来讲变化不多，bo，vo可能会频繁变化，所以不适合放在同一个类里","like_count":27,"discussions":[{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383841,"discussion_content":"那么 netty spring rocketmq juc redis 等 都是啥模型 写的啊? ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626251510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158452,"user_name":"Ant","can_delete":false,"product_type":"c1","uid":1079563,"ip_address":"","ucode":"07E6374F91F61E","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/0b/4346a253.jpg","comment_is_top":false,"comment_ctime":1575375388,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"83179754012","product_id":100039001,"comment_content":"有哪些同学像我一样，是个移动端开发，也在学设计模式","like_count":19,"discussions":[{"author":{"id":2822403,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/11/03/d89cf9c6.jpg","nickname":"honey bunny","note":"","ucode":"280155CDB5CEF9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407061,"discussion_content":"Android+1","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634903148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1545971,"avatar":"https://static001.geekbang.org/account/avatar/00/17/96/f3/b06a899c.jpg","nickname":"天竺葵柠檬橙花柚","note":"","ucode":"0F3620FABAEECB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219819,"discussion_content":"我嵌入式开发的也来看设计模式，很多名词都没接触过","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585813232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1198158,"avatar":"https://static001.geekbang.org/account/avatar/00/12/48/4e/51896855.jpg","nickname":"落风","note":"","ucode":"D70B221D22A439","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560527,"discussion_content":"前端～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649381304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1185495,"avatar":"https://static001.geekbang.org/account/avatar/00/12/16/d7/09e92ea0.jpg","nickname":"笑醉三千","note":"","ucode":"C820D678E981C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550397,"discussion_content":"Android 使用充血模型的机会更多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644507194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251106,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/22/20615a7e.jpg","nickname":"昂","note":"","ucode":"31F58469188769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375613,"discussion_content":"harmony+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621767987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2030670,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLrbCic7BckSd3xrawFH5KW0yYtI1uSsIEPFh0FIHxvHv9u6XBKgZCqH13qPbZDHTdqgevXLdGQlEw/132","nickname":"Geek_2a4536","note":"","ucode":"640A0D228B275C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372892,"discussion_content":"服务端来学习的，最近在设计框架","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620490183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1879556,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI735OGP6zMxdhVRdiaP5ice2ibdtOk1XkdzIqRiawy5NUCYh4iaWhr9f4CUW7gatnZMicL6vZJjCgY8TDg/132","nickname":"Geek_24a055","note":"","ucode":"1DFFE6E7C0A75D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357835,"discussion_content":"Android +1\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615878774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1503528,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f1/28/279c22ee.jpg","nickname":"jun5753","note":"","ucode":"B9EE5D445236B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350176,"discussion_content":"Android+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613734552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1334015,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5a/ff/e89eb122.jpg","nickname":"LipLipLip","note":"","ucode":"6D5EC6B5BEC600","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311506,"discussion_content":"Android+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602380225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241613,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/0d/d567a50a.jpg","nickname":"Bezier","note":"","ucode":"FDD57CB90E12C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218257,"discussion_content":"Android+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585639147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1457609,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3B5MoC4DfBt00nnVshEBFHHkNVgbcBrXsd3SxFicdN3XX5ILOe7GJxKvtJKCY53xNCuxSV8ABxNulbhkibm1lXIw/132","nickname":"林峰峰","note":"","ucode":"83C2093135BBB8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186829,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582717657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188837,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/e5/6cca9bcf.jpg","nickname":"桂","note":"","ucode":"658E79A26B64A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165686,"discussion_content":"Android+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581314279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156137,"user_name":"Lrwin","can_delete":false,"product_type":"c1","uid":1180503,"ip_address":"","ucode":"5E394E36419C56","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/57/31595f22.jpg","comment_is_top":false,"comment_ctime":1574823368,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"65999332808","product_id":100039001,"comment_content":"我觉得代码架构和业务架构一样，只要将关注点分离就可以。<br>简单的系统，困难的不在于领域的拆分，而在于时间成本的控制。从软件工程角度考虑，时间，成本，范围三角理论可以进行分析、。<br>我们所说的复杂系统，更看重业务的复杂度，将复杂度降低的方法则是分而治之。这样可以降低复杂度。<br>复杂要解决三个问题：规模问题，结构问题和需求变化问题。无论是技术复杂度或业务复杂度，只要能解决这三种复杂度问题就是好的方法。<br>DDD模型其实无异，都是将Model层做重。因为业务核心是技术无关的。传统MVC用于C&#47;S模型，也依然是重Model层的。我觉得软件设计的方法没有变化，只是大家看到的视角不同罢了。<br>软件架构有两个含义：1.参与的元素有哪些 2.元素间的关系是什么。 从抽象角度来看，非常简单。","like_count":15,"discussions":[{"author":{"id":1056127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/7f/aabc1b66.jpg","nickname":"hetiu","note":"","ucode":"35D9338C3ABD20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":105532,"discussion_content":"老哥看过张逸的ddd课程？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577461640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156514,"user_name":"Lonely绿豆蛙","can_delete":false,"product_type":"c1","uid":1044785,"ip_address":"","ucode":"0862179B614974","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f1/31/5001390b.jpg","comment_is_top":false,"comment_ctime":1574904396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61704446540","product_id":100039001,"comment_content":"最近边看边重构自己的项目，感觉真的是从码农视角转到了架构师层次~","like_count":14},{"had_liked":false,"id":156440,"user_name":"深度•仁","can_delete":false,"product_type":"c1","uid":1275854,"ip_address":"","ucode":"2A0759956F0683","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/ce/1f21d480.jpg","comment_is_top":false,"comment_ctime":1574871803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61704413947","product_id":100039001,"comment_content":"一拍大腿，靠，说到心坎里去了，各种细碎的sql，就为了解决某个小功能！ 业务熟悉，领域驱动设计就是屠龙刀，业务不熟悉，DDD也就值个半毛钱！茶不思，饭不想，期待后面的文章更新","like_count":14},{"had_liked":false,"id":156149,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1574824869,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"61704367013","product_id":100039001,"comment_content":"有本书叫ddd 原则，模式与实践可以翻阅一下<br>首先要明白一点ddd适用范围，多数业务就是CRUD就可以搞定，理解起来也没有困难，为啥不继续用贫血模型。<br>充血模型就像老师说的需要精心设计，以应对变化，如果没有一个复杂的业务场景就根本用不到，或者说用起来很难受是一个似是而非的东西。<br>况且充血模型只建议用在核心域，还有通用域和支撑域呢，不要一上来就ddd","like_count":14,"discussions":[{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559919,"discussion_content":"学到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649060588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155982,"user_name":"lizi","can_delete":false,"product_type":"c1","uid":1617799,"ip_address":"","ucode":"18FA399A9C5CB4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIAicKBNWU0IoqHEyWSI8OOtTLJhQ1K0dXbOmYEvmgNGdRplheIqibTDjUy3yNPO5PvELiazMTmmibNSw/132","comment_is_top":false,"comment_ctime":1574787310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61704329454","product_id":100039001,"comment_content":"沙发，不睡觉，听课。哈哈，加班好累，","like_count":14},{"had_liked":false,"id":155994,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1574806886,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44524479846","product_id":100039001,"comment_content":"第一个还没有太多的感受，还需要时间来练习感受<br>第二个是否合成一个各有优劣，可能还是和写代码人的功底有关：<br>拆分开的优势：各层的防腐隔离，当前层的变化不影响其他层。<br>拆分开的劣势：来一个迭代需求，比如需要加一下邮箱等，   rd很有可能在三个类里各加一个字段，从上改到下，完全看不出隔离的优势，就看不到了一层层的类转换<br>反过来就是不拆分的优劣<br>","like_count":10,"discussions":[{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559920,"discussion_content":"那能不能做一个父级实体类，包含通用字段，例如创建时间戳等  0.0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649060648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156452,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1574876871,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40229582535","product_id":100039001,"comment_content":"1.一直贫血模型，却没有发现。<br>2.充血模型我有点没看懂，我粗糙的理解成把贫血模型的service里面的复杂业务逻辑都搬到了domain，然后service简单调用domain即可。那domain里不也是业务逻辑+bo.吗？还有复杂的sql无法复用问题，我一般写业务都是单表。然后放到service层调用多个dao去组装最终的数据出来。这样可以解决乱七八糟的sqlz吗？希望争哥解答下。<br>3.第二道问题，我觉得不能合并，因为首先entity是对应的数据表字段，其次bo可能被多个业务方法所使用，返回的字段可能不同，这就需要vo来限制具体每个接口需要哪些字段来响应给客户端。","like_count":9,"discussions":[{"author":{"id":2789067,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/8e/cb/1efcaf20.jpg","nickname":"Justway","note":"","ucode":"75966B5533C872","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584109,"discussion_content":"domain里面就不会随意暴露给别人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660634140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156263,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1574844935,"is_pvip":false,"replies":[{"id":"60012","content":"下一节课有的","user_name":"作者回复","comment_id":156263,"uid":"1190123","ip_address":"","utype":1,"ctime":1574847872,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"40229550599","product_id":100039001,"comment_content":"能否用代码表达一下充血模型，其实还是不太理解","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476052,"discussion_content":"下一节课有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574847872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156174,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1574828714,"is_pvip":false,"replies":[{"id":"59970","content":"1. 充血模型并不是哪都适用<br>2. 赞成你的看法","user_name":"作者回复","comment_id":156174,"uid":"1190123","ip_address":"","utype":1,"ctime":1574833816,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"40229534378","product_id":100039001,"comment_content":"1.目前基本都在接触贫血开发模型，充血的可能局部模块设计的时候，会把数据和方法组织到一个类里面去。但是DB的操作完全隔离。<br>这里有一个问题:充血模型的话，OOP的想法，应该是每个人(假设人是类，具体的人就是人这个类的实例化)管理自己的属性，比如我的主管。<br>这个时候有一个需求。批量修改人员的主管。那么充血模型是要遍历委托给每个具体的人自己去修改呢？还是提供一个service，直接批量操作DB。<br>2. entity,bo,vo我的做法是不合并，但是真的有贯穿三层的模型。那么就直接用一个。但是要单独分包。并且组内规范好这个包里面的东西都是有修改风险的。我个人倾向用麻烦换容错。毕竟软件的变化性比较大","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476017,"discussion_content":"1. 充血模型并不是哪都适用\n2. 赞成你的看法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574833816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156747,"user_name":"杨树敏","can_delete":false,"product_type":"c1","uid":1254983,"ip_address":"","ucode":"58B0917A14FB87","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/47/d958b25b.jpg","comment_is_top":false,"comment_ctime":1574946953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31639718025","product_id":100039001,"comment_content":"回想起来经历的互联网项目一直都是贫血模型, 究其原因:<br>1.互联网项目多采用敏捷开发, 需求多变, 设计充血模型的性价比低;<br>2.互联网小产品业务场景相对简单, 业务难点更多的出现在并发, 性能上, 在存储,内存成本急剧下降的当下, 粗暴的横向扩展成为见效更快的选择.","like_count":7},{"had_liked":false,"id":156101,"user_name":"追风少年","can_delete":false,"product_type":"c1","uid":1305639,"ip_address":"","ucode":"0467648A908B18","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/27/827015c0.jpg","comment_is_top":false,"comment_ctime":1574819440,"is_pvip":false,"replies":[{"id":"59996","content":"DTO：data transfer object，是一种更抽象的概念，这种数据类型可以是贫血模型的，主要是用在接口之间传递数据。<br><br>其他的两个没听说过：《","user_name":"作者回复","comment_id":156101,"uid":"1190123","ip_address":"","utype":1,"ctime":1574839102,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"31639590512","product_id":100039001,"comment_content":"1. 以前做的项目都是基于贫血模型的，这次的话涉及风控业务，也是基于贫血模型，但是各种问题不断，正在考虑优化，这里刚好看到老师的文章，希望能有所借鉴。<br>2. Entity是ORM中数据库映射的实体类，BO是业务操作相关实体类，VO是视图层对应实体类。在简单情况下，这三个类可能是一样的，比方说你填写一个登陆注册的表单，此时前端传给后端接口的数据，一般就是VO，而通过业务层Service操作，加入创建时间，IP地址等，就转换成了BO，最后对应到数据层就转换为了Entity，也许一次注册可能需要写多个库，就会生成多个Entity。<br>有些复杂业务，还有DO,DTO，PO之类的概念，但是个人感觉很模糊，也不是很了解。这里希望老师能指点一下。","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475987,"discussion_content":"DTO：data transfer object，是一种更抽象的概念，这种数据类型可以是贫血模型的，主要是用在接口之间传递数据。\n\n其他的两个没听说过：《","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574839102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110113,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/61/68462a07.jpg","nickname":"无名","note":"","ucode":"2D2E877CF97138","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284775,"discussion_content":"po为持久化对象，就是entity。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592633439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157192,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1274787,"ip_address":"","ucode":"C233DF1D224EC1","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/a3/2b077607.jpg","comment_is_top":false,"comment_ctime":1575077948,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23049914428","product_id":100039001,"comment_content":"说一说我的经历吧，现在就在银行工作.之前做一个新系统，组长说我们用DDD模式来开发吧，大家都不熟，摸索着搞了一周，最后项目要在在几号几号上线，根本没有多余的时间让你慢慢设计，一句话，几号能不能正常上线，DDD花了一周时间难产了，只能老办法贫血模型快速搞定，先上线。若不能正常上线，业务才不管你贫血还是充血呢。所以，有些时候用什么模型真的是跟指标跟任务挂钩的，精心设计需要更多的时间，没有时间，只能粗暴的尽快搞定，后面就是还各种还技术债。","like_count":6},{"had_liked":false,"id":173081,"user_name":"刘嘉璐","can_delete":false,"product_type":"c1","uid":1810745,"ip_address":"","ucode":"A6C6B1B2B46950","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er9rgZJbZgoNaFJWjibXSfYiaEON6QcKib7FWbcNDceKXpSiceWDXGckdyOThsgs6lYaZ3Pg0FX2w55Tw/132","comment_is_top":false,"comment_ctime":1579421848,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18759291032","product_id":100039001,"comment_content":"在我开发的项目中几乎很少有用到BO，只有VO+Entity(DTO)，他俩是继承关系，VO继承Entity(DTO)。<br>前端有新增字段的需求，那就在VO新增字段，如果要屏蔽某些字段，就用@JsonIgnore。<br>不知道有多少兄台跟我类似，这样的话开发比较快，便捷，但是确实违背了OOP的原则😂","like_count":4,"discussions":[{"author":{"id":1051118,"avatar":"https://static001.geekbang.org/account/avatar/00/10/09/ee/288d878c.jpg","nickname":"Leon","note":"","ucode":"782F7ECE08C0E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306273,"discussion_content":"相似度100%","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600238102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163574,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1576747590,"is_pvip":false,"replies":[{"id":"62262","content":"是的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1576796693,"ip_address":"","comment_id":163574,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18756616774","product_id":100039001,"comment_content":"项目中用到了google的ProtocolBuffer，根据数据结构体生成的类模型只能包含数据，不能包含方法。这种情况也是贫血模型吧。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478458,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576796693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156409,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1574867521,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18754736705","product_id":100039001,"comment_content":"1、收获：简简单单就解释了贫血（数据与业务分开），充血（数据与业务一起）<br>2、真实项目做了十来个，一直是贫血模式，包括曾经做过的复杂的金融系统也都是贫血模式<br>3、思考题2：不能合并，理由：BO很多时间都是多个Entity的复杂组合起来的。","like_count":4,"discussions":[{"author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73369,"discussion_content":"这种bo是没法合并，现在是考虑如果bo的字段都存在一张表里且跟vo的字段一致的情况要不要合并呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575558442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156075,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212758,"ip_address":"","ucode":"ABF1824D24BA2F","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/56/311be282.jpg","comment_is_top":false,"comment_ctime":1574817146,"is_pvip":false,"replies":[{"id":"59992","content":"一看就是没认真看文章，文章说了例子在下一节课中有的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574838845,"ip_address":"","comment_id":156075,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18754686330","product_id":100039001,"comment_content":"要是有代码例子就好了。实操性会强很多。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475978,"discussion_content":"一看就是没认真看文章，文章说了例子在下一节课中有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219429,"user_name":"fish","can_delete":false,"product_type":"c1","uid":1194551,"ip_address":"","ucode":"ABA0945C8B9615","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/37/06440c7f.jpg","comment_is_top":false,"comment_ctime":1590025210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14474927098","product_id":100039001,"comment_content":"我也喜欢DDD，但是他也有缺点，而且还很大，这就是他这么多年还没流行的原因吧，适合才最好，盆血模型也可以分层分方法让业务隔离的清楚，毕竟用了N年的东西，谁敢说基于DDD模型设计的程序在考虑业务时就不曾考虑数据库方面？数据库也是业务方面中的一员，还是大员！DDD先是整体设计再写码，三层可以边想一部分写一部分，适合迭代，适合实现一部分一部分的写，对整体来说影响不大，DDD业务要是分多次来那就比较麻烦了，重构领域就比较费劲了","like_count":3},{"had_liked":false,"id":158579,"user_name":"Geek_53aa5c","can_delete":false,"product_type":"c1","uid":1361000,"ip_address":"","ucode":"F468CFEF187BA9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELDhhlsdUpg4XsIoTlspAKYXYBQwSo0UsAKk1luurxC65tK3QZAuj2ALBmAUv4f7x9pib0TNCPicDTA/132","comment_is_top":false,"comment_ctime":1575420615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14460322503","product_id":100039001,"comment_content":" Ruby on Rails的model层，ActiveRecord是很好的充血模型实现，借助Ruby语言动态的特性，CRUD以及属性映射不需要写一行代码一行配置文件就可以开箱即用，所以没有必要有repository这一层。","like_count":3},{"had_liked":false,"id":156105,"user_name":"十二差一点","can_delete":false,"product_type":"c1","uid":1212732,"ip_address":"","ucode":"76C07F9A641630","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/3c/a01a60f3.jpg","comment_is_top":false,"comment_ctime":1574819796,"is_pvip":false,"replies":[{"id":"59995","content":"恩恩 可以这么理解","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574838957,"ip_address":"","comment_id":156105,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14459721684","product_id":100039001,"comment_content":"MVC是面向过程编程，是因为它违反了封装的特性，数据和逻辑操作分离开了，在controller进行相关数据逻辑操作，而model仅仅只是个数据层，没有任何操作。而MVVM是面向对象编程，因为它把数据和其相关逻辑操作封装在了viewModel，只暴露给外部相关方法，controller想要获取数据直接通过这些方法就行了，不用像MVC在controller层进行一堆逻辑操作，同时减轻了controller的代码，在viewModel也方便维护数据逻辑操作。不知道这样的理解对不对？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475990,"discussion_content":"恩恩 可以这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239823,"avatar":"https://static001.geekbang.org/account/avatar/00/12/eb/0f/67a7142a.jpg","nickname":"carol","note":"","ucode":"B0DD5C80414694","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66621,"discussion_content":"我觉得MVC中Model层不是只有一堆bean类没有操作的。具体操作只是对调用者屏蔽了，model应该是数据源层，调用者想要数据只管向model要，只是model怎么拿这些数据调用者不管，这些数据model可能是从数据库拿的也可能是通过网络从服务器拿的。不知道理解对不对，欢迎同学们讨论指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575091214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1212732,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/3c/a01a60f3.jpg","nickname":"十二差一点","note":"","ucode":"76C07F9A641630","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1239823,"avatar":"https://static001.geekbang.org/account/avatar/00/12/eb/0f/67a7142a.jpg","nickname":"carol","note":"","ucode":"B0DD5C80414694","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72760,"discussion_content":"我说的是移动端，不过和后端应该都一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575524831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66621,"ip_address":""},"score":72760,"extra":""}]}]},{"had_liked":false,"id":156038,"user_name":"水银","can_delete":false,"product_type":"c1","uid":1045948,"ip_address":"","ucode":"0FD9C79590E484","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/bc/63be02b6.jpg","comment_is_top":false,"comment_ctime":1574814985,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14459716873","product_id":100039001,"comment_content":"我经历的所有的项目都是贫血模型，对于充血模型没尝试过，如果说业务数据与业务操作分离，那么在设计接口时如何将繁多的业务属性当成参数传入给接口方法呢？是说将所有属性的getter和setter直接生成在接口中吗？那么对于接口中使用这些零散的属性是怎样使用的呢？觉得二者确实还得从实际情况出发，看业务复杂度及对代码设计是否有要求，但往往都是为了习惯、速度而忽略了设计初心。<br><br>对于三类对象是否合并成一个，我上次的留言就正好说了这个问题，确实很难判别，起初是分开三个对象，但是为了所谓的分层、隔离干净避免耦合，都没有体现，在业务调整方面分开3个对象并没体现优势，可能是我参与的项目都比较简单，基本上不涉及到需要解耦来进行代码的扩展性调整，反而是增减改属性比较频繁，这样就涉及到一位同学说的，一下修改3个对象而且最好属性值的复制，如果是用委托就不说了，如果不是委托，那么属性值复制多数依赖BeanUtils类通过类反射完成，还要保证属性类型的一致性；如果用委托，那么意味着3个对象的组合难免又是对分层上的一个污点。所以我觉得两者适用在不同的设计要求、团队人员的一往习惯以及项目的目标，如果公司涉及的项目没有那么复杂、设计要求不高，我更倾向于合并为一个。<br><br>","like_count":3,"discussions":[{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66475,"discussion_content":"我也倾向合成一个，感觉多个有点累赘了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575074715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155980,"user_name":"(´田ω田`)","can_delete":false,"product_type":"c1","uid":1210588,"ip_address":"","ucode":"CA043D3EC6FE7E","user_header":"https://static001.geekbang.org/account/avatar/00/12/78/dc/0c9c9b0f.jpg","comment_is_top":false,"comment_ctime":1574787078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459688966","product_id":100039001,"comment_content":"第二题，不合并有好处。UserEntity是具体到数据库的，假如有不同版本的UserEntity，相互之间有少部分不同，抽象出一个BO层在Service层做UserEntity到BO的转化，可以方便Bo在Service层传播，方便不同项目之间复用、统一处理；再往上抽象出的VO，一般通过接口返回给前端展示，也可以是多种有差异的BO转化为同一种VO方便前端统一处理","like_count":3},{"had_liked":false,"id":200752,"user_name":"sundy","can_delete":false,"product_type":"c1","uid":1724856,"ip_address":"","ucode":"581D4B976524B6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/51/b8/f76b15a1.jpg","comment_is_top":false,"comment_ctime":1585646344,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10175580936","product_id":100039001,"comment_content":"老师 我有一个困惑很久的问题，<br>1 dao层的设计到底是对应一个业务的所有数据库操作还是对应一个数据库表的curd？<br>2如果按照业务创建dao，除了一定的解藕外，dao层存在的意义更多是抽离service层的代码，如果按照数据库表设计dao，那联表查询的逻辑应该写在哪？","like_count":2,"discussions":[{"author":{"id":1739390,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8a/7e/bfe37c46.jpg","nickname":"飞鱼","note":"","ucode":"95109E8F7DBE39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386227,"discussion_content":"dao层一般对单表操作，一个表对应一个dao；联查通过 往上在抽象一层（可以叫manage或者service,或者其他），通过组合n个dao来实现 连查","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627476799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168233,"user_name":"Pioneer4","can_delete":false,"product_type":"c1","uid":1742839,"ip_address":"","ucode":"EE095D397D9BB4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/97/f7/8afbb146.jpg","comment_is_top":false,"comment_ctime":1578035499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167970091","product_id":100039001,"comment_content":"目前所接触的项目都是以MVC框架为基础开发的，的确都是贫血模型的传统开发模式，没有去意识到还有DDD开发模式，今后留心。","like_count":2},{"had_liked":false,"id":156708,"user_name":"_呱太_","can_delete":false,"product_type":"c1","uid":1739226,"ip_address":"","ucode":"6B96DC7CF66094","user_header":"https://static001.geekbang.org/account/avatar/00/1a/89/da/e86b9932.jpg","comment_is_top":false,"comment_ctime":1574939265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164873857","product_id":100039001,"comment_content":"小争哥，对设计模式这些概念都有了解，一直想找一些源码来看看顺便练下手，请问下有没有推荐的 C++ 比较经典的开源代码呢","like_count":2},{"had_liked":false,"id":156445,"user_name":"条","can_delete":false,"product_type":"c1","uid":1203836,"ip_address":"","ucode":"6F8679175256E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/7c/94af3f5e.jpg","comment_is_top":false,"comment_ctime":1574872081,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10164806673","product_id":100039001,"comment_content":"争哥，对MVC的认识，感觉不是太统一呀，表示层、逻辑层、数据层应该是三层架构的分层概念吧，MVC的M-Model可以近似的看做逻辑层和数据层的加和，V-View近似看做表示层，C-controller是个桥梁。","like_count":2,"discussions":[{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218455,"discussion_content":"我理解MVC是control层的东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585660233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110218,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/ca/4560f06b.jpg","nickname":"zhchnchn","note":"","ucode":"2219E40ED134D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111120,"discussion_content":"确实，概念不能混淆。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577781893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1119490,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/02/66f65388.jpg","nickname":"雷霹雳的爸爸","note":"","ucode":"99BBA6D83DD11F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68862,"discussion_content":"你说的这个更贴近原意，不客气的说他这里属于明目张胆的替换概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575222006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156181,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1574829497,"is_pvip":false,"replies":[{"id":"59969","content":"可以的<br>","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574833294,"ip_address":"","comment_id":156181,"utype":1}],"discussion_count":1,"race_medal":4,"score":"10164764089","product_id":100039001,"comment_content":"是否可以采用组合的方式，来减少重复字段？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476021,"discussion_content":"可以的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574833294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156179,"user_name":"路伴友行","can_delete":false,"product_type":"c1","uid":1506974,"ip_address":"","ucode":"96B54B7EEAEDAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","comment_is_top":false,"comment_ctime":1574829454,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10164764046","product_id":100039001,"comment_content":"MVC其实是表现层的架构模式，是对同一个数据的不同表现，不知道为啥来到了服务器端 又流行了起来","like_count":2,"discussions":[{"author":{"id":1242122,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f4/0a/cf728857.jpg","nickname":"YourSweetHeart","note":"","ucode":"38843F447B03F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62538,"discussion_content":"相当赞成","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574850251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156166,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1574827480,"is_pvip":false,"replies":[{"id":"59971","content":"存储本身有自己的逻辑在那里面，不能单独的看做是数据。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574833941,"ip_address":"","comment_id":156166,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10164762072","product_id":100039001,"comment_content":"最近在看消息队列的专栏，里面有提到Pulsar这个产品采用了存储与计算分离的设计。本质上和文中提到的数据与操作分离应该是一个意思吧？难道也是一种面向过程的设计","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476016,"discussion_content":"存储本身有自己的逻辑在那里面，不能单独的看做是数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574833941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022247,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","nickname":"阿卡牛","note":"","ucode":"0BC43A904C3199","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63611,"discussion_content":"是的，后来我也想明白了，存储和计算分离说的是最终的效果。但做好存储或计算也是要有自己的数据和操作的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574899479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156164,"user_name":"成葛格","can_delete":false,"product_type":"c1","uid":1030745,"ip_address":"","ucode":"A09A57D891FA50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/59/ffa298a2.jpg","comment_is_top":false,"comment_ctime":1574827102,"is_pvip":false,"replies":[{"id":"59972","content":"如果三个object需要的字段不是完全一样的，该咋办呢","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574834274,"ip_address":"","comment_id":156164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10164761694","product_id":100039001,"comment_content":"这么说来我所有的项目都是基于贫血模式的；现实的开发中就是把三个VO都合成一个的。不知道会有什么问题？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476015,"discussion_content":"如果三个object需要的字段不是完全一样的，该咋办呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574834274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317256,"user_name":"阿甘","can_delete":false,"product_type":"c1","uid":1057843,"ip_address":"","ucode":"BC93175B70E05D","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/33/bcf37f50.jpg","comment_is_top":false,"comment_ctime":1634722937,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5929690233","product_id":100039001,"comment_content":"其实之前还真试过用充血模型搞过一个真实的比较复杂的项目，做到一半发现不合适还是切回贫血模型了。贫血模型最大的好处在于service都是无状态的单例，随便autowired，充血模型就要特别小心了，这种service都是一次性对象的其实意义不大。本质上充血跟贫血跟DDD没有太大关系。都是面向接口编程，你画一下service之间的类协作图，两者是一模一样的。","like_count":1},{"had_liked":false,"id":296548,"user_name":"zart","can_delete":false,"product_type":"c1","uid":1148637,"ip_address":"","ucode":"E32677C0FD4421","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eomCrCRrLAWib0gMI2L2NbicMummlxOY6nVmphsDO0J3xx7OygNd8wJicc88RbNoHrcuXBsKLtCMvgFQ/132","comment_is_top":false,"comment_ctime":1623038468,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5918005764","product_id":100039001,"comment_content":"第一层：贫血模型数据与逻辑分开，充血模型数据与逻辑封装在一起。<br>第二层：贫血模型属于面向过程，充血模型属于面向对象。<br>第三层：面试过程就是不管三七二十一，过程中需要啥就实现啥；面向对象是先基于封装，抽象，继承，多态把对象设计好，以后方便扩展和复用。<br>第四层：面向过程适合简单的业务，面向对象适合负责的业务。","like_count":1},{"had_liked":false,"id":257139,"user_name":"江南一笑","can_delete":false,"product_type":"c1","uid":2234620,"ip_address":"","ucode":"E38938A1178827","user_header":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","comment_is_top":false,"comment_ctime":1603860420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898827716","product_id":100039001,"comment_content":"这个一看，mvc非常好啊，适用广，门槛低，好维护，好变更，通俗易懂。<br><br>但有几个问题想请教：<br>1，贫血模型mvc会不会导致更频繁的数据库访问呢？能具体举例说明吗？比如两个service本来可以同享一个数据对象。<br>2，mvc会不会在对象的accessment scope方面比较欠缺，导致开发过程中的潜在风险呢？<br>","like_count":1},{"had_liked":false,"id":241786,"user_name":"好名字都让人取了！","can_delete":false,"product_type":"c1","uid":1122093,"ip_address":"","ucode":"B7FCD018C1AAF9","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/2d/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1597422054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892389350","product_id":100039001,"comment_content":"惭愧 自己所编写的业务逻辑几乎全是基于贫血模型的mvc 　更为直接的描述就是CURD，也正如一楼所说的没有好的指导跟学习对象　踏进这个领域最初学习的就是mvc模式　这也就导致整个思维比较僵硬","like_count":1},{"had_liked":false,"id":230200,"user_name":"BruceMaNo1","can_delete":false,"product_type":"c1","uid":1245387,"ip_address":"","ucode":"D58B7243722094","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/cb/c6523c81.jpg","comment_is_top":false,"comment_ctime":1593309248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5888276544","product_id":100039001,"comment_content":"1.  目前经历的项目中，没有基于充血模型来开发的，都是贫血模型，快速开发迭代上线，设计简单，出现重复代码这种事，倒也不是全部贫血模型的锅，有些业务逻辑开发时就是复制粘贴再修改一点东西，所以，代码复用这种事，与哪个模型无关，与开发人员自身有关<br>2. 几个类不能合并为一，每个类都有对应交互使用的地方，虽然看着一样，但在业务中可能会存在些微的差异，而且概念不同，这样分开写逻辑层次更清晰些","like_count":1},{"had_liked":false,"id":162599,"user_name":"查理","can_delete":false,"product_type":"c1","uid":1111297,"ip_address":"","ucode":"A9FEA901E3A05D","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/01/5389295c.jpg","comment_is_top":false,"comment_ctime":1576562840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871530136","product_id":100039001,"comment_content":"Domain是否只处理与自己有关的业务逻辑？如果是的话，有些业务需要多个Domain才能完成，还是要把大量业务代码放到Service中去；如果不是的话，那Domain处理很多与自己无关的业务逻辑，是否不符合DDD的思想？","like_count":1},{"had_liked":false,"id":159445,"user_name":"爱喝酸奶的程序员","can_delete":false,"product_type":"c1","uid":1274352,"ip_address":"","ucode":"3FDB0AC2854274","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjiaBHJyfAKK02CCcibkqI0jpaHJEcyrTRI4xbrqHCWiaia88WQs4r8zJVmHfibqricUYeUT2ezAZAC7wQ/132","comment_is_top":false,"comment_ctime":1575625147,"is_pvip":false,"replies":[{"id":"61132","content":"下一节课有例子的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575896712,"ip_address":"","comment_id":159445,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5870592443","product_id":100039001,"comment_content":"一直贫血……我们的代码一直都是一点点修改就写SQL,但是感觉只是提了充血模式的长处……没有一个例子有点空洞","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477062,"discussion_content":"下一节课有例子的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575896712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157748,"user_name":"Bolin","can_delete":false,"product_type":"c1","uid":1206489,"ip_address":"","ucode":"6A0AC519030215","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/d9/7e5ca3ca.jpg","comment_is_top":false,"comment_ctime":1575255178,"is_pvip":true,"replies":[{"id":"60720","content":"感觉更像贫血模型😂","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575432364,"ip_address":"","comment_id":157748,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5870222474","product_id":100039001,"comment_content":"我们项目像是充血和贫血的结合体。涉及不是很烦复杂的业务基本上Repository这一层只跟单表操作。也就是只针对一张表的CRUD，业务逻辑在service这一层。这样也可以实现代码的重用。但是entity，domain实体大多时候只是做一个数据的传递功能。老师这种算充血模式的DDD吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476519,"discussion_content":"感觉更像贫血模型😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575432364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157076,"user_name":"🐾mc🐾","can_delete":false,"product_type":"c1","uid":1030759,"ip_address":"","ucode":"CE47F9316D6E14","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/67/c764be06.jpg","comment_is_top":false,"comment_ctime":1575025696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869992992","product_id":100039001,"comment_content":"文档review：基本的分层思路都大差不差。—》基本的分层思路都差不多。","like_count":1},{"had_liked":false,"id":156932,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1574998161,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5869965457","product_id":100039001,"comment_content":"个人觉得想搞DDD也要看项目的发展和团队成员的能力。<br>先贫血，有钱了再充血:)","like_count":1,"discussions":[{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96667,"discussion_content":"等有钱了就改不回来了 技术债务太重","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577085234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1022247,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","nickname":"阿卡牛","note":"","ucode":"0BC43A904C3199","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98244,"discussion_content":"大部份的项目还没等到有钱就挂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577150611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":96667,"ip_address":""},"score":98244,"extra":""}]}]},{"had_liked":false,"id":156450,"user_name":"修缘","can_delete":false,"product_type":"c1","uid":1035476,"ip_address":"","ucode":"72AB60C1DC88C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/d4/f1f84a96.jpg","comment_is_top":false,"comment_ctime":1574873415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869840711","product_id":100039001,"comment_content":"隔离关注点，降低复杂度是系统设计的原则。<br>Entity,Bo,Vo这三者虽然字段差不多，但是从职责上并不是一样。但是从类的设计来看其实可以进行高度抽象，将公共的字段定义在抽象类当中，三者继承抽象类即可，毕竟层次不会太多，所以可以大胆的使用抽象和继承来解决这个问题。包括lombok目前也提供了相关的注解可以解决！","like_count":1},{"had_liked":false,"id":156430,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1574870013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869837309","product_id":100039001,"comment_content":"感觉一点点在为引入设计模式做准备","like_count":1},{"had_liked":false,"id":156269,"user_name":"燕行","can_delete":false,"product_type":"c1","uid":1048380,"ip_address":"","ucode":"AE2BEFD3C5F31F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ff/3c/215aecca.jpg","comment_is_top":false,"comment_ctime":1574846288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869813584","product_id":100039001,"comment_content":"个人感觉，本节课中贫血与充血模型的讲解，如果配图进行比较，可能会更加直观","like_count":1},{"had_liked":false,"id":156146,"user_name":"拂尘","can_delete":false,"product_type":"c1","uid":1609964,"ip_address":"","ucode":"9563C002E4B06A","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/ec/ede93589.jpg","comment_is_top":false,"comment_ctime":1574824582,"is_pvip":false,"replies":[{"id":"59973","content":"因为是用到不同层的。每一层中的object包含的字段可能都不大一样，所以要区分定义。如果一个object贯穿所有层，本身有违反封装。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574834350,"ip_address":"","comment_id":156146,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5869791878","product_id":100039001,"comment_content":"老师，我还是学生，然后学的web架构里面我只知道实体类，那个vo，bo，和entity为什么需要定义三个啊，不是用一个实体类就可以了嘛？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476007,"discussion_content":"因为是用到不同层的。每一层中的object包含的字段可能都不大一样，所以要区分定义。如果一个object贯穿所有层，本身有违反封装。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574834350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259293,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/1d/b8014237.jpg","nickname":"千里之行 始于足下","note":"","ucode":"8F1CD8CECA588F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76994,"discussion_content":"我们项目里面，实体层(mysql)用的PO，redis用的RO，输出到Controller层用的VO，同时可用输入输出的，用的DTO，其他的就没用过了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575876683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609964,"avatar":"https://static001.geekbang.org/account/avatar/00/18/90/ec/ede93589.jpg","nickname":"拂尘","note":"","ucode":"9563C002E4B06A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62400,"discussion_content":"谢谢老师咯，后面看了一下别人的评论就感觉懂了，看这个专栏以来感觉真的是不一样的世界咯。思想上的提升真的不一样咯。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574840454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156136,"user_name":"迁橘","can_delete":false,"product_type":"c1","uid":1492125,"ip_address":"","ucode":"8FE37B7CA6CB74","user_header":"https://static001.geekbang.org/account/avatar/00/16/c4/9d/7c4dbcd9.jpg","comment_is_top":false,"comment_ctime":1574823256,"is_pvip":false,"replies":[{"id":"59975","content":"（づ￣3￣）づ╭❤～","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574834499,"ip_address":"","comment_id":156136,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869790552","product_id":100039001,"comment_content":"看完了, 感觉热血沸腾, 特别期待下一节课.<br>课堂讨论:<br>1, 自己所参与做的项目中都是典型的基于贫血模型开发模式.<br>2, 我是基本都用一个类的, 因为所做的系统业务想比较简单, 也就没必要, 还有些共用的属性字段会拿出来,用继承的方式. 基本项目都是这么过来的. 也没遇到啥问题, (大家勿笑哈)<br><br>从第一节课听到现在, 受益匪浅, 每节课都会听个3-5遍. 到现在, 基本能意识到自己在工作种存在的一些问题,以及需要提升进步的地方, 期待后面的课程....","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476003,"discussion_content":"（づ￣3￣）づ╭❤～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574834499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156135,"user_name":"carol","can_delete":false,"product_type":"c1","uid":1239823,"ip_address":"","ucode":"B0DD5C80414694","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/0f/67a7142a.jpg","comment_is_top":false,"comment_ctime":1574823132,"is_pvip":false,"replies":[{"id":"59981","content":"业务是否复杂不好定义，只能考经验来判断。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574837943,"ip_address":"","comment_id":156135,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869790428","product_id":100039001,"comment_content":"问个小白问题。请问下，什么是业务？怎么来评判业务复杂不复杂呢？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476002,"discussion_content":"业务是否复杂不好定义，只能考经验来判断。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574837943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156131,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1574822541,"is_pvip":false,"replies":[{"id":"59982","content":"看完下一节课你再看看是否有答案了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574837974,"ip_address":"","comment_id":156131,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5869789837","product_id":100039001,"comment_content":"移动端的MVVM和MVP算是充血吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475999,"discussion_content":"看完下一节课你再看看是否有答案了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574837974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1457408,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","nickname":"Eden Ma","note":"","ucode":"755312F0D154F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62376,"discussion_content":"好的 争哥 期待周五的更新～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156117,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1574820887,"is_pvip":true,"replies":[{"id":"59987","content":"多读几遍，收获会不一样的。加油！","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574838445,"ip_address":"","comment_id":156117,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5869788183","product_id":100039001,"comment_content":"1. 针对第一个问题，我就和楼上的很多同学一样，是一直在贫血的世界里不亦乐乎，丝毫没有体会过充血的愉快感。但是，现在自己有一个小打小闹的项目开启，虽然已经做了点，但是现在开始修正还来得及，准备尝试下用充血的模型，跟上老师的实战节奏。<br>2. 针对第二个问题，我还是倾向于不合并。虽然目前看来大部分字段是差不多的，但是万一后面内容扩展了，功能扩展了，有特殊处理相关的呢？<br><br>设计模式的课程真的是值得品味好几次，每次学习的时候，生怕上次的内容没有仔细看完，而跟不上当节课的内容，有点忐忑。老师的内容循序渐进，对于我这个职场比菜鸟稍微好点的鸟来说，都是一句句精辟的话语，打开了我很多平时看到的心结，也指出了我平时开发中的很多不足，原来我一直在落后的时代写代码。<br><br>所以，如何摆脱我的上古时代的开发模式，就是紧跟着老师的步伐走。虽然一开始说8个月的时间，但我觉得，8个月一晃就过去了，保持这个节奏，很赞。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475992,"discussion_content":"多读几遍，收获会不一样的。加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62677,"discussion_content":"恩恩，好的老师。努力学习，努力消化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574857791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156109,"user_name":"迈向架构师","can_delete":false,"product_type":"c1","uid":1637228,"ip_address":"","ucode":"2476594CF76001","user_header":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","comment_is_top":false,"comment_ctime":1574820415,"is_pvip":true,"replies":[{"id":"59989","content":"要区分一下的，可以看下其他小伙伴的留言，有的讲的很好","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574838707,"ip_address":"","comment_id":156109,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869787711","product_id":100039001,"comment_content":"我觉得，简单的贫血模型可以不区分BOVO，直接把DO直接set到ResultData然后就丢给前端，区分各个pojo<br>如果分领域的话，区分各类pojo是有必要的<br>老师您觉得呢","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475991,"discussion_content":"要区分一下的，可以看下其他小伙伴的留言，有的讲的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156017,"user_name":"清风自来","can_delete":false,"product_type":"c1","uid":1026907,"ip_address":"","ucode":"89D07A602D2E00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/5b/fd0b96cb.jpg","comment_is_top":false,"comment_ctime":1574812962,"is_pvip":false,"replies":[{"id":"60016","content":"下一节课中有讲到你提到的问题的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574850560,"ip_address":"","comment_id":156017,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869780258","product_id":100039001,"comment_content":"老师，我有个问题，一直在疑问中，重domain轻service，那哪些业务应该写在service哪些应该写在domain呢？如果是有两个服务，一个订单服务，一个商品服务。我订单服务中需要商品信息支撑。调用商品服务的这个过程应该在domain还是在Service。如果在Service层，我是不是可以这样理解Service层应该处理的业务。1.构建domain(包括调用服务获取构建信息)。2.调用domain.do()，做业务处理。3. BO转化DO。4.调用Repository存DO？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475957,"discussion_content":"下一节课中有讲到你提到的问题的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574850560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156012,"user_name":"Numbpad1","can_delete":false,"product_type":"c1","uid":1114772,"ip_address":"","ucode":"2F075AC7E3847D","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/94/2bf394f3.jpg","comment_is_top":false,"comment_ctime":1574812628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869779924","product_id":100039001,"comment_content":"差别不大sql满天飞在最近的系统开发中就遇到了😂","like_count":1},{"had_liked":false,"id":155978,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":1514882,"ip_address":"","ucode":"2F1FA3519FAB50","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyiafvkibXnTOpIJxlhndHpSDMsqja9AajKYtYgGEGtFWtBb2Mg8DRVjqlWyIxl1piaT4qpMkwerQUg/132","comment_is_top":false,"comment_ctime":1574786693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869753989","product_id":100039001,"comment_content":"打卡✔<br>看完本节，感触颇深，在平常开发中越发的感觉到代码的复用性不够，往往自己意识不到自身的问题，听完本讲，大概知道问题的关键出在哪里，更加期待后续内容。<br>问题1，我经历的项目都是贫血模型，开发起来快速，复用性太差，越来越有这种感触。<br>问题2，理论上基于贫血模型合并用一个问题不大，要是(DDD)要分开。","like_count":1},{"had_liked":false,"id":359574,"user_name":"Will Zhang","can_delete":false,"product_type":"c1","uid":3197012,"ip_address":"上海","ucode":"294B06E7EFEB18","user_header":"https://static001.geekbang.org/account/avatar/00/30/c8/54/8d27cb56.jpg","comment_is_top":false,"comment_ctime":1665651303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665651303","product_id":100039001,"comment_content":"我用python做的所有项目都是类似的，就是页面需要展示一些金融指标时候传过来一些参数，然后我拿着参数取对应的数据，然后再计算一些列指标返回，我把所有的逻辑都揉在一个视图类里面，我这是啥模型啊，我还有救吗？<br>","like_count":0},{"had_liked":false,"id":359294,"user_name":"帝皓27","can_delete":false,"product_type":"c1","uid":2048316,"ip_address":"北京","ucode":"82586223E3C457","user_header":"https://static001.geekbang.org/account/avatar/00/1f/41/3c/eec7fc7c.jpg","comment_is_top":false,"comment_ctime":1665393632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665393632","product_id":100039001,"comment_content":"我的理解使用贫血模型还是充血模型和业务也有密切关系，对于长期复杂的项目确实适合充血模型，但是对于POC或者短期项目，考虑到成本和收益，还是贫血模型更合适","like_count":0},{"had_liked":false,"id":357111,"user_name":"Geek_3e9d7d","can_delete":false,"product_type":"c1","uid":3070253,"ip_address":"北京","ucode":"3BDEFFE68BE32F","user_header":"","comment_is_top":false,"comment_ctime":1662967237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662967237","product_id":100039001,"comment_content":"对于我们举的例子中，UserEntity、UserBo、UserVo 包含的字段都差不多，是否可以合并为一个类呢？<br>我认为不可以合并称为一个类：<br>UserEntity、UserBo和UserVo分别表示数据访问层、业务层和展示层的数据模型，虽然在大多数情况下这三个层的数据模型包含的数据大同小异，但是有些特殊场景使得它们会不一样，比如数据访问层的时间一般用Unix时间戳表示，而展示层的时间一般使用人类可读的时间格式，同时展示层一般又包含了一些国际化的内容；<br>此外，虽然一开始三个层的数据模型包含的数据都相同，但是随着业务需求的不断发展，可能会出现三层需要的数据模型包含大量不同数据的情况，如果合并为一个类，使三个层的数据模型耦合在一起很难维护。","like_count":0},{"had_liked":false,"id":356924,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662707532,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662707532","product_id":100039001,"comment_content":"第二个问题，应该和上节课的问题是一个意思，就是VO,BO,ENTITY 只是有细微的差别，该用一个大一统的bean还是保留这三个的问题？<br><br>其实合在一起也可以，弊端在于VO返回会包含用不上的字段，ENTITY入到数据库也会有用不上的字段。<br>分开的话，就是感觉代码有冗余。<br><br>通过继承的方式可能是个方向，感觉也不是很好用","like_count":0},{"had_liked":false,"id":356544,"user_name":"Sherk","can_delete":false,"product_type":"c1","uid":2156245,"ip_address":"重庆","ucode":"AFE3E7F158258D","user_header":"https://static001.geekbang.org/account/avatar/00/20/e6/d5/4f1fc074.jpg","comment_is_top":false,"comment_ctime":1662389661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662389661","product_id":100039001,"comment_content":"思考1: 支付服务是用充血模型， 会员服务是用贫血模型。感受最深的一点两者主要的区别是，贫血模型主要是实体数据会暴露属性，在什么地方都能改。封装性不好。支付的充血模型通过实体的方法进行修改，方法带有业务含义。<br>思考2:不行，三者的作用不一样。UserEntity 针对实体类，UserBo 增对具体的业务，可能需要取多个实体的数据，或者根据实体的字段加工得到。UserVo针对外部接口返回。<br><br>本节主要讲了贫血模型和充血模型。<br>     what： <br>           贫血模型 业务操作于数据分离， 像 UserBo 这样，只包含数据，不包含业务逻辑的类，。<br>            充血模型： 业务和数据都在实体类上。<br>     why 什么要 充血模型<br>         一般的开发用充血模型， 业务需求来了我们一般先考虑要什么数据，然后编写sql， 来组装数据，返回。之后就是定义 Entity、BO、VO。当新需求来的时候，只能重新写个满足新需求的 SQL 语句，这就可能导致各种长得差不多、区别很小的 SQL 语句满天飞。<br><br>    充血模型： 我们需要事先理清楚所有的业务，定义领域模型所包含的属性和方法。领域模型相当于可复用的业务中间层。新功能需求的开发，都基于之前定义好的这些领域模型来完成。<br><br>how哪些场景：<br>    如果业务比较简单，贫血模型相对更加高效。<br>    业务复杂尽量用充血模型考虑问题。<br>   ","like_count":0},{"had_liked":false,"id":356499,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"湖北","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1662368575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662368575","product_id":100039001,"comment_content":"问题<br>1.你做经历的项目中，有哪些是基于贫血模型的传统的开发模式？有哪些是基于充血模型的 DDD 开发模式呢？请简单对比一下两者的优劣。<br>基本上都是贫血的开发模型，优势就是开发思维比较统一，可以快速开发。缺点就是 可扩展性，可复用性，可维护性都不太好。比如如果业务修改了，大概率会改动业务实现或者重新写一个新方法来代替之前的方法这样的，导致service类中方法越来越多。可能导致前端后端都要一起修改等问题。<br>2.对于我们举的例子中，UserEntity、UserBo、UserVo 包含的字段都差不多，是否可以合并为一个类呢？<br>虽然是差不多但是还是有差异，最好的方法还是定义一个稳定的父类提取公共字段来继承这样比较好。","like_count":0},{"had_liked":false,"id":353654,"user_name":"大白杨","can_delete":false,"product_type":"c1","uid":1238048,"ip_address":"内蒙古","ucode":"6C34FB392A388F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/20/71ea229b.jpg","comment_is_top":false,"comment_ctime":1659664282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659664282","product_id":100039001,"comment_content":"打卡，这章看懂了，优劣：贫血模型，简单易上手，开发门槛低，不用考虑太多，扩展性和可维护性较差。充血模型，在复杂系统中优势就体现出来了。我们之前用的腾讯taf框架，我也没有写过大量的bo,VO。第二个问题我觉得不合并一个类好。","like_count":0},{"had_liked":false,"id":348920,"user_name":"Geek_8b0800","can_delete":false,"product_type":"c1","uid":2933797,"ip_address":"","ucode":"09D9692B62A691","user_header":"","comment_is_top":false,"comment_ctime":1655548255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655548255","product_id":100039001,"comment_content":"万能的评论区，我想问一下【userEntity 转换成 userBo】 和【 UserBo 转换成 UserVo】这两个方法应该分别写到哪个类里呢","like_count":0},{"had_liked":false,"id":345177,"user_name":"杜威","can_delete":false,"product_type":"c1","uid":1294908,"ip_address":"","ucode":"CF49380E27467F","user_header":"https://static001.geekbang.org/account/avatar/00/13/c2/3c/a82d4ed0.jpg","comment_is_top":false,"comment_ctime":1652090409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652090409","product_id":100039001,"comment_content":"贫血模型是通过在业务层做逻辑，面向业务需求，充血模型面向的是对象建模，业务暗含在对象的关系中，对于小项目的频繁变动，建的模型也会随意就被破坏，不如直接在业务层实现方便。","like_count":0},{"had_liked":false,"id":341388,"user_name":"十三月晴。","can_delete":false,"product_type":"c1","uid":1654239,"ip_address":"","ucode":"8FE6F9059EEF42","user_header":"https://static001.geekbang.org/account/avatar/00/19/3d/df/3655bde3.jpg","comment_is_top":false,"comment_ctime":1649575295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649575295","product_id":100039001,"comment_content":"贫血和ddd应用场景不同，简单的小项目上ddd，项目组会给你那么多时间？<br><br>再说人员问题，除了个别大公司，其他公司怎么维护ddd项目？","like_count":0},{"had_liked":false,"id":335752,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1645673157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645673157","product_id":100039001,"comment_content":"以前做的单系统服务都是基于贫血模型来做的。<br>而做微服务系统服务，都是基于充血模型来做的（但是还是多数是面向过程编程，不能完全叫面向对象编程）","like_count":0},{"had_liked":false,"id":335289,"user_name":"落落彩虹","can_delete":false,"product_type":"c1","uid":1264832,"ip_address":"","ucode":"F4CE1908DF149A","user_header":"https://static001.geekbang.org/account/avatar/00/13/4c/c0/73d52c05.jpg","comment_is_top":false,"comment_ctime":1645442891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645442891","product_id":100039001,"comment_content":"努力地回忆了下，似乎没有写过充血模型的代码…<br>对于第二个问题一直很困惑…","like_count":0},{"had_liked":false,"id":321004,"user_name":"一格状语","can_delete":false,"product_type":"c1","uid":1622696,"ip_address":"","ucode":"EBA9ED5F97416D","user_header":"https://static001.geekbang.org/account/avatar/00/18/c2/a8/f3f8f5d2.jpg","comment_is_top":false,"comment_ctime":1636615565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636615565","product_id":100039001,"comment_content":"请问，MVC贫血模型中，Control层校验请求参数，然后调用service层的方法，那么这个方法里需要再校验进来的实参吗？","like_count":0},{"had_liked":false,"id":319857,"user_name":"二小","can_delete":false,"product_type":"c1","uid":1593919,"ip_address":"","ucode":"5377CB552237B2","user_header":"https://static001.geekbang.org/account/avatar/00/18/52/3f/c8b40efe.jpg","comment_is_top":false,"comment_ctime":1635991050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635991050","product_id":100039001,"comment_content":"目前DDD虽然盛行，但其主要作用还是指导微服务的拆分，对于单个服务内部的设计还是基于贫血模型","like_count":0},{"had_liked":false,"id":316353,"user_name":"keep_it_real","can_delete":false,"product_type":"c1","uid":2055554,"ip_address":"","ucode":"F5057CAF752FF3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","comment_is_top":false,"comment_ctime":1634283011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634283011","product_id":100039001,"comment_content":"刚开始学习编程是从模仿入手的，别人怎么写我就怎么写。甚至都不知道什么是“贫血模型”，什么是DDD。也不知道一直都在用面向对象语言进行着面向过程编程，感觉有些小讽刺。但既然现在了解了，也有一定的编程基础梁，肯定要把它弄个明白。","like_count":0},{"had_liked":false,"id":314639,"user_name":"振振","can_delete":false,"product_type":"c1","uid":1313365,"ip_address":"","ucode":"ECE08186230140","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/55/5e440425.jpg","comment_is_top":false,"comment_ctime":1633271519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633271519","product_id":100039001,"comment_content":"虎头蛇尾啊，充血模型具体怎么写能不能给个对比demo？？","like_count":0},{"had_liked":false,"id":314360,"user_name":"Rootrl","can_delete":false,"product_type":"c1","uid":1035390,"ip_address":"","ucode":"50FE3BBA92D417","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/7e/0d050964.jpg","comment_is_top":false,"comment_ctime":1632984985,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1632984985","product_id":100039001,"comment_content":"个人认为简单的问题可以简单解决，复杂的问题要学会解决复杂问题的方法，具体要看问题、场景，不能因为复杂就不学，当然这里维度是个人技术追求以及业界趋势来考虑，不是说你所在的项目组，面临的当前问题哈。 而且随着业务的扩大简单问题会变为复杂问题，架构也是演进的。DDD现在火热跟微服务发展有莫大关系，比如按限界上下文来解决微服务拆分问题，其他还有很多，DDD分为战略和战术，战略方面对业务领域建模等，战术方面大的有DDD分层架构（Interfaces、Application、domain、infrastructure），这也是在更高维度去对系统解耦的，也是借用依赖倒置这些原则来实现高内聚低耦合思想的，小的就有这里充血模型啥的了。总之，还是很值得学的。不过这是架构层面的。","like_count":0},{"had_liked":false,"id":314069,"user_name":"邵光泽","can_delete":false,"product_type":"c1","uid":1985537,"ip_address":"","ucode":"45088A0F5DF384","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4c/01/72203f00.jpg","comment_is_top":false,"comment_ctime":1632823827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632823827","product_id":100039001,"comment_content":"你好，BO是Business Object把？这个应该是要包含业务逻辑的呀？<br>business object：It is an object that contains the business logic code. ","like_count":0},{"had_liked":false,"id":313526,"user_name":"瀚海","can_delete":false,"product_type":"c1","uid":2062203,"ip_address":"","ucode":"E64C22F3F6D285","user_header":"https://static001.geekbang.org/account/avatar/00/1f/77/7b/338c4617.jpg","comment_is_top":false,"comment_ctime":1632474180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632474180","product_id":100039001,"comment_content":"只有有痛点，才有去找优化     基于贫血模式，如果没有太大痛点，是不会有人考虑充血模式的  ","like_count":0},{"had_liked":false,"id":311762,"user_name":"happyfucheng","can_delete":false,"product_type":"c1","uid":1245040,"ip_address":"","ucode":"458E67028A5368","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/70/4a6f9065.jpg","comment_is_top":false,"comment_ctime":1631451897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631451897","product_id":100039001,"comment_content":"贫血模式，我是不是可以增加一层基础service层服务，让别的业务复杂的service都基于这个基础service来扩展实现，是不是就达到了和ddd相同的效果?","like_count":0},{"had_liked":false,"id":308084,"user_name":"Geek_6865f5","can_delete":false,"product_type":"c1","uid":2741599,"ip_address":"","ucode":"0367AC106E742F","user_header":"","comment_is_top":false,"comment_ctime":1629383861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629383861","product_id":100039001,"comment_content":"作为一名Android开发者，这一讲听得我好煎熬，java项目的很多东西都不懂。","like_count":0},{"had_liked":false,"id":307859,"user_name":"小周","can_delete":false,"product_type":"c1","uid":2453498,"ip_address":"","ucode":"7ED7BC27A46C4C","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/fa/615a0df3.jpg","comment_is_top":false,"comment_ctime":1629285048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629285048","product_id":100039001,"comment_content":"很难受，做的项目一直都是基于贫血模型的","like_count":0},{"had_liked":false,"id":306635,"user_name":"Geek_f0f0bc","can_delete":false,"product_type":"c1","uid":2678074,"ip_address":"","ucode":"A754BEC95E2BC6","user_header":"https://static001.geekbang.org/account/avatar/00/28/dd/3a/92726fb6.jpg","comment_is_top":false,"comment_ctime":1628652433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628652433","product_id":100039001,"comment_content":"面对复杂业务场景，DDD更有优势？这个结合实际情况有点儿绝对了，因为使用DDD的前提是精通业务，出来的DDD领域会比较健全，但是最后会根据设计人员对业务的掌握情况，业务爆发式扩张，以及需求快速打版上线要求，感觉最后DDD也有点流于概念，趋向于之前的贫血模式的的开发。","like_count":0},{"had_liked":false,"id":305100,"user_name":"小马哥","can_delete":false,"product_type":"c1","uid":1358045,"ip_address":"","ucode":"B2C0FF38F8C9BC","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/dd/37726c34.jpg","comment_is_top":false,"comment_ctime":1627812699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627812699","product_id":100039001,"comment_content":"读完前面的面向对象设计思想之后看本篇实战, 发现贫血模型就是面向对象分析和设计不彻底的产物; 有人说, 互联网迭代快或者业务简单就适合使用贫血模型, 想问一句, 设计模式中讲的扩展性存在意义是什么呢!个人感觉, 充血模型是彻底的面向对象设计, 在分析和设计阶段就应该尽量完成, 即使快速迭代导致贫血出现, 业务层膨胀, 重构阶段的作用就体现了.","like_count":0},{"had_liked":false,"id":302527,"user_name":"Geek_设计模式之美","can_delete":false,"product_type":"c1","uid":2690172,"ip_address":"","ucode":"59263416E65594","user_header":"","comment_is_top":false,"comment_ctime":1626251231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626251231","product_id":100039001,"comment_content":"这敲代码的 得懂的太多了","like_count":0},{"had_liked":false,"id":301559,"user_name":"Geek__126303fc81f7","can_delete":false,"product_type":"c1","uid":1453774,"ip_address":"","ucode":"D256622360E1B4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibFY0KibR500NUAibZqsZCqg8Z6XicEaqr23oZTUlFcQaMXAlhETpVBXPAiamJ1IYcc7ibn7ZGdmUycxAicibkhtSc3xYA/132","comment_is_top":false,"comment_ctime":1625738675,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625738675","product_id":100039001,"comment_content":"学习了之后才知道基本使用贫血模型来开发","like_count":0},{"had_liked":false,"id":301496,"user_name":"GEEKBANG_6638780","can_delete":false,"product_type":"c1","uid":1268264,"ip_address":"","ucode":"952194E56FD8C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","comment_is_top":false,"comment_ctime":1625715060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625715060","product_id":100039001,"comment_content":"面向对象的思想很重要，但是有时候对象解决不了一些问题。所以DDD就出来了，DDD其实就是组合一组对象共同服务于一个业务。 说白了DDD就是更广义的面向对象设计。给你个链接：https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;a5NiKLFZsg54P_fcXPkahg 这篇文章讲述了利用DDD解决一些实际的问题","like_count":0},{"had_liked":false,"id":299987,"user_name":"易飞","can_delete":false,"product_type":"c1","uid":2630424,"ip_address":"","ucode":"32AC28754237F7","user_header":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","comment_is_top":false,"comment_ctime":1624948171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624948171","product_id":100039001,"comment_content":"一直贫血","like_count":0},{"had_liked":false,"id":295649,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1622530056,"is_pvip":false,"discussion_count":1,"race_medal":4,"score":"1622530056","product_id":100039001,"comment_content":"平时都是curd的贫血模式，微服务的充血模式没接触过😂","like_count":0,"discussions":[{"author":{"id":1098720,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","nickname":"技术骨干","note":"","ucode":"8FCF8DE6D29201","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543755,"discussion_content":"微服务单个服务也是搞贫血模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641294481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295379,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1622387219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622387219","product_id":100039001,"comment_content":"思考题：<br>第2个话题，UserEntity、UserBo、UserVo这三个类字段都差不多，但这三个类分别由三个不同的控制类来操纵，如果三个类合并为一个类，那么操作这三个类的控制类代码的耦合性太强，不利于代码的维护和扩展，因此，个人觉得这三个类不能合并。","like_count":0},{"had_liked":false,"id":293738,"user_name":"coding","can_delete":false,"product_type":"c1","uid":1207009,"ip_address":"","ucode":"A4F2E63C601993","user_header":"https://static001.geekbang.org/account/avatar/00/12/6a/e1/e2cbb49b.jpg","comment_is_top":false,"comment_ctime":1621515075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621515075","product_id":100039001,"comment_content":"知道自己做的是贫血，但是没有人指导ddd开发，也没有看到过好一点的ddd案例","like_count":0},{"had_liked":false,"id":293734,"user_name":"Geek_3c4f6b","can_delete":false,"product_type":"c1","uid":2053237,"ip_address":"","ucode":"2ACDF7AE539516","user_header":"","comment_is_top":false,"comment_ctime":1621511463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621511463","product_id":100039001,"comment_content":"平时写代码，都感觉这些设计模型存在，更不知道怎么去使用模式！","like_count":0},{"had_liked":false,"id":291428,"user_name":"Geek_d60492","can_delete":false,"product_type":"c1","uid":2599089,"ip_address":"","ucode":"9A79B12F0D3D63","user_header":"https://static001.geekbang.org/account/avatar/00/27/a8/b1/092b658f.jpg","comment_is_top":false,"comment_ctime":1620284695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620284695","product_id":100039001,"comment_content":"我认为主要还是学习成本高导致的，面向对象思想本身就比面向过程的线形思维要复杂的多","like_count":0},{"had_liked":false,"id":288888,"user_name":"😳","can_delete":false,"product_type":"c1","uid":1452857,"ip_address":"","ucode":"9AFB87EF308539","user_header":"https://static001.geekbang.org/account/avatar/00/16/2b/39/19041d78.jpg","comment_is_top":false,"comment_ctime":1618752006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618752006","product_id":100039001,"comment_content":"看完这篇之后发现用的都是贫血","like_count":0},{"had_liked":false,"id":287842,"user_name":"Kirk","can_delete":false,"product_type":"c1","uid":1584341,"ip_address":"","ucode":"BF53BD06CF4D60","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PAkHz6567oUZYsbskHL0cc3ibTOXu4mkzprvOx6iaXSa3vMTy5ib8ZmahxYibO2ss3Cia6ia12WVHa2ZNje1Nd4ibktMg/132","comment_is_top":false,"comment_ctime":1618193522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618193522","product_id":100039001,"comment_content":"贫血模式的话， 在repository里有个多表join查询，然后这样的话， 怎么样返回数据（entity）给service呢？或者在repository就把entity转成BO？","like_count":0},{"had_liked":false,"id":286752,"user_name":"Alicia1150","can_delete":false,"product_type":"c1","uid":1435760,"ip_address":"","ucode":"94FF9E2F04AD9E","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/70/34a83798.jpg","comment_is_top":false,"comment_ctime":1617551106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617551106","product_id":100039001,"comment_content":"有个问题想向老师提问，希望得到答复：<br>如果按照分析阶段得到的分析类进行体系结构设计，按照分层的模式，系统分析中的边界类属于Controller层，控制类属于Service层，与数据库打交道的辅助类属于DAO层，实体类属于实体层（po-entity），可以这么理解吗？","like_count":0},{"had_liked":false,"id":285577,"user_name":"不忘初心","can_delete":false,"product_type":"c1","uid":1015494,"ip_address":"","ucode":"5B5F45564DDBE7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/c6/83684988.jpg","comment_is_top":false,"comment_ctime":1616905256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616905256","product_id":100039001,"comment_content":"课堂讨论好像没有集中解答？","like_count":0},{"had_liked":false,"id":284302,"user_name":"夏秋冬","can_delete":false,"product_type":"c1","uid":2526247,"ip_address":"","ucode":"20D62081D9596F","user_header":"https://static001.geekbang.org/account/avatar/00/26/8c/27/5644834e.jpg","comment_is_top":false,"comment_ctime":1616154888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616154888","product_id":100039001,"comment_content":"简单业务用贫血，复杂业务用充血，充血只充service","like_count":0},{"had_liked":false,"id":280010,"user_name":"没有心的人","can_delete":false,"product_type":"c1","uid":2449748,"ip_address":"","ucode":"F27D5894087B11","user_header":"https://static001.geekbang.org/account/avatar/00/25/61/54/5bf767e7.jpg","comment_is_top":false,"comment_ctime":1614052713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614052713","product_id":100039001,"comment_content":"项目刚接触到充血模型，貌似公司以后都要用充血模型了","like_count":0},{"had_liked":false,"id":279464,"user_name":"马晨阳","can_delete":false,"product_type":"c1","uid":1230031,"ip_address":"","ucode":"344ACC3BF7F14A","user_header":"https://static001.geekbang.org/account/avatar/00/12/c4/cf/6e1205cc.jpg","comment_is_top":false,"comment_ctime":1613792542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613792542","product_id":100039001,"comment_content":"DDD对于产品设计的要求太高了我觉得，目前互联网的状况开发期间改个3，5遍需求呢是常事儿","like_count":0},{"had_liked":false,"id":276284,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1611877048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611877048","product_id":100039001,"comment_content":"目前我现在做的数据仓库的开发就是典型的贫血模式，面向过程，各种略有区别的sql代码满天飞","like_count":0},{"had_liked":false,"id":275313,"user_name":"xy","can_delete":false,"product_type":"c1","uid":2031661,"ip_address":"","ucode":"4D7DB0AC984170","user_header":"https://static001.geekbang.org/account/avatar/00/1f/00/2d/abff5821.jpg","comment_is_top":false,"comment_ctime":1611466499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611466499","product_id":100039001,"comment_content":"MVC(贫血模型)的缺点到底有什么呢？说的不过具体啊，过于理论了","like_count":0},{"had_liked":false,"id":273857,"user_name":"大雄","can_delete":false,"product_type":"c1","uid":2396269,"ip_address":"","ucode":"BABD97EBBB1394","user_header":"https://static001.geekbang.org/account/avatar/00/24/90/6d/705f3874.jpg","comment_is_top":false,"comment_ctime":1610697665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610697665","product_id":100039001,"comment_content":"问个问题，就是controller中调用service,里面需要写业务代码么，还是说整个方法都写在service里面，还有建议是如果这个功能没有复用的概率，那就不需要定义接口。所以这个怎么来界定边界呢","like_count":0},{"had_liked":false,"id":273748,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1610670000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610670000","product_id":100039001,"comment_content":"各层之间的数据模型不要共用，主要是因为稳定性不同，各层数据模型的变更原因和变更速率是不同的，离 IO 设备越近的的稳定性越差，比如说 controller 层的 VO，rep 层的 entity。Domain 层是核心业务逻辑和核心业务数据，稳定性是最高的","like_count":0},{"had_liked":false,"id":271035,"user_name":"不二先生","can_delete":false,"product_type":"c1","uid":1359635,"ip_address":"","ucode":"60D9800369CC33","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELEVMHiad4wERgib6x90kI81JZhzIvQeXMju6WohePAlfjWD3gHibapVNX88G4R29Ujcbiap1Bfz0Efmg/132","comment_is_top":false,"comment_ctime":1609378418,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609378418","product_id":100039001,"comment_content":"课堂讨论：<br>问题1. 目前我所经历的项目，大多是传统的开发模式，优势是开发周期短，劣势是可复用性低<br>问题2. 不能合并为一个类，因为 UserEntity 主要是对于表的字段，UserEntity 对应返回给客户端的字段，如果合并为一个类，会导致无法复用性","like_count":0},{"had_liked":false,"id":270801,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1609281713,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609281713","product_id":100039001,"comment_content":"充血模型符合面向对象，业务逻辑内聚，强制模型设计时业务核心逻辑要前置考虑","like_count":0},{"had_liked":false,"id":268140,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1608083371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608083371","product_id":100039001,"comment_content":"有没有必要每一层单独实体?拆分的原因无非是为了单一职责。从mvc的视角来看，模型和视图是应该分开的。所以，至少要有vo和bo. 如果bo和do数据基本一致，业务逻辑简单，那可以考虑这两个实体类合并。毕竟，大部分需求都是针对数据表crud.","like_count":0},{"had_liked":false,"id":266463,"user_name":"REAL_MADIRD","can_delete":false,"product_type":"c1","uid":1012889,"ip_address":"","ucode":"9E327B5456739D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/99/dbdee494.jpg","comment_is_top":false,"comment_ctime":1607347467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607347467","product_id":100039001,"comment_content":"之前看招聘需求上说熟悉ddd，一直不知道是什么东东，今天算是一知半解了，话说互联网这新名词可真多","like_count":0},{"had_liked":false,"id":255859,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1603444877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603444877","product_id":100039001,"comment_content":"如果充血模型中的类 数据+代码结合在一起，而且这个类在很多地方用到，如果每个地方只用此类中的某些逻辑，类会过于庞大吗","like_count":0},{"had_liked":false,"id":255346,"user_name":"紫日","can_delete":false,"product_type":"c1","uid":1207410,"ip_address":"","ucode":"73A8DEE323AC19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","comment_is_top":false,"comment_ctime":1603327293,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1603327293","product_id":100039001,"comment_content":"存在就有道理，复杂度没有上来不必要引入解决复杂问题的方法，简单够用最好。","like_count":0},{"had_liked":false,"id":253780,"user_name":"俄国的一盘桃子","can_delete":false,"product_type":"c1","uid":2220264,"ip_address":"","ucode":"DB9BFB35A54377","user_header":"https://static001.geekbang.org/account/avatar/00/21/e0/e8/a2d033fa.jpg","comment_is_top":false,"comment_ctime":1602871097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602871097","product_id":100039001,"comment_content":"我一直觉得领域设计是要做的，不过领域设计出来后，是用ddd来写还是用贫血模式来写这个不是特别重要，因为你的设计在这里，你要follow这个设计不过你要用什么实现手段，你都要抽象来符合你的设计，除非你设计都没有也不理会任何设计，那写出来的代码就是日后的垃圾。。。。","like_count":0},{"had_liked":false,"id":248446,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1600165087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600165087","product_id":100039001,"comment_content":"【要点】<br>1、什么是基于贫血模型的传统开发模式？<br>MVC 三层架构中的 M 表示 Model，V 表示 View，C 表示 Controller。它将整个项目分为三层：展示层、逻辑层、数据层。其中，我们用到很多数据类，只包含数据，不包含业务逻辑的类，就叫作贫血模型（Anemic Domain Model），模型将数据与操作分离，破坏了面向对象的封装特性，是一种典型的面向过程的编程风格。<br>2、什么是基于充血模型的 DDD 开发模式？<br>充血模型（Rich Domain Model），数据和对应的业务逻辑被封装到同一个类中。因此，这种充血模型满足面向对象的封装特性，是典型的面向对象编程风格。<br>领域驱动设计，即 DDD，主要是用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。<br>做好领域驱动设计的关键是，看你对自己所做业务的熟悉程度，而并不是对领域驱动设计这个概念本身的掌握程度。即便你对领域驱动搞得再清楚，但是对业务不熟悉，也并不一定能做出合理的领域设计。<br>基于充血模型的 DDD 开发模式实现的代码，也是按照 MVC 三层架构分层的。它跟基于贫血模型的传统开发模式的区别主要在 Service 层。在基于充血模型的 DDD 开发模式中，Service 层包含 Service 类和 Domain 类两部分。Domain 就相当于贫血模型中的 BO。不过，Domain 与 BO 的区别在于它是基于充血模型开发的，既包含数据，也包含业务逻辑。而 Service 类变得非常单薄。总结一下的话就是，基于贫血模型的传统的开发模式，重 Service 轻 BO；基于充血模型的 DDD 开发模式，轻 Service 重 Domain。<br>3、为什么基于贫血模型的传统开发模式如此受欢迎？<br>第一点原因是，大部分情况下，我们开发的系统业务可能都比较简单，简单到就是基于 SQL 的 CRUD 操作，所以，我们根本不需要动脑子精心设计充血模型，贫血模型就足以应付这种简单业务的开发工作。<br>第二点原因是，充血模型的设计要比贫血模型更加有难度。因为充血模型是一种面向对象的编程风格。我们从一开始就要设计好针对数据要暴露哪些操作，定义哪些业务逻辑。<br>第三点原因是，思维已固化，转型有成本。基于贫血模型的传统开发模式经历了这么多年，已经深得人心、习以为常。<br>4、什么项目应该考虑使用基于充血模型的 DDD 开发模式？<br>对于业务不复杂的系统开发来说，基于贫血模型的传统开发模式简单够用，基于充血模型的 DDD 开发模式有点大材小用，无法发挥作用。相反，对于业务复杂的系统开发来说，基于充血模型的 DDD 开发模式，因为前期需要在设计上投入更多时间和精力，来提高代码的复用性和可维护性，所以相比基于贫血模型的开发模式，更加有优势。<br>【思考】<br>1、目前为止还没开发过充血模型的代码，感觉充血模型里的Domain类似于业务中台的概念，可以讲核心业务包装，对外提供特定业务范围的服务。<br>2、Entity、Bo、Vo最好做成一个类，BO和VO是业务强相关的，随着需求变化而变化的，Entity是相对稳定的。另外就是，可以理解为BO和VO是对Entity数据的一种重新组合和封装，只对业务层暴露需要的数据，间接保证了数据安全。","like_count":0},{"had_liked":false,"id":245880,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599101112,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599101112","product_id":100039001,"comment_content":"<br>问题一：<br>1、主要时偏向于贫血模型。<br>2、充血模式：数据+业务构成的业务中间层，相对较少。<br><br><br>问题二：<br>1、不可以，entity针对的是数据库的字段，bo是业务使用的字段，vo是跟调用方的协议字段<br>","like_count":0},{"had_liked":false,"id":243323,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1598059440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598059440","product_id":100039001,"comment_content":"iOS是标准的MVC架构，但View和Controller耦合在一起，导致ViewController会变得异常庞大，难以维护。为了解决这个问题，发展出了MVVM架构，通过ViewModel分担VC中的复杂业务逻辑，而MVVM中的胖Model和瘦Model分别和充血、贫血模式类似。瘦Model提倡DataModel只应该包含Json的转换和Model的创建，胖Model提倡DataModel还应该封装与自身数据相关的业务逻辑。当时只记住了胖Model的业务可能会不断膨胀，越来越胖，最后导致难以维护，所以在开发过程中有意忽略了胖Model，后面开发过程会尝试把胖Model用起来，有对比才有进步。","like_count":0},{"had_liked":false,"id":242093,"user_name":"鲲鹏飞九万里","can_delete":false,"product_type":"c1","uid":1093920,"ip_address":"","ucode":"82BD0C789DF612","user_header":"https://static001.geekbang.org/account/avatar/00/10/b1/20/8718252f.jpg","comment_is_top":false,"comment_ctime":1597588519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597588519","product_id":100039001,"comment_content":"1. 开发中，有涉及到计算胜率到，我就在get方法中写了业务逻辑。那这样是不是就是充血模式了；<br>2. 在开发中，我就把VO+BO+Entity 合成一个用的。现在还不理解，作者为什么要将其分开；","like_count":0},{"had_liked":false,"id":240844,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1597102425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597102425","product_id":100039001,"comment_content":"1 基本都是贫血模型。<br>2 UserEntity、UserBo、UserVo大部分情况不能合并为一个类，有访问权限的影响。","like_count":0},{"had_liked":false,"id":239076,"user_name":"owen","can_delete":false,"product_type":"c1","uid":1902116,"ip_address":"","ucode":"0E79DA9080A085","user_header":"https://static001.geekbang.org/account/avatar/00/1d/06/24/c2ee3b16.jpg","comment_is_top":false,"comment_ctime":1596427995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596427995","product_id":100039001,"comment_content":"对于敏捷开发使用DDD是否适用？<br>本身敏捷开发模式更类似于面向过程编程对于未知的业务逻辑，无法预知的业务变更，如果要使用DDD怎样才能更好的结合?","like_count":0},{"had_liked":false,"id":239021,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1596417399,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596417399","product_id":100039001,"comment_content":"贫血模型重Service 轻BO<br>充血模型重Domain 轻 Service","like_count":0},{"had_liked":false,"id":238771,"user_name":"火影.海诺","can_delete":false,"product_type":"c1","uid":2091565,"ip_address":"","ucode":"34729AFEE93B6D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/ea/2d/34cb8e0a.jpg","comment_is_top":false,"comment_ctime":1596289972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596289972","product_id":100039001,"comment_content":"面向CURD开发","like_count":0},{"had_liked":false,"id":238500,"user_name":"小昊子","can_delete":false,"product_type":"c1","uid":1066084,"ip_address":"","ucode":"AD5220A57690B8","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/64/4c4c2c6e.jpg","comment_is_top":false,"comment_ctime":1596185376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596185376","product_id":100039001,"comment_content":"用贫血模式同样开发过复杂的系统","like_count":0},{"had_liked":false,"id":237336,"user_name":"写代码的","can_delete":false,"product_type":"c1","uid":2085090,"ip_address":"","ucode":"F58186409A3D65","user_header":"https://static001.geekbang.org/account/avatar/00/1f/d0/e2/1d00c079.jpg","comment_is_top":false,"comment_ctime":1595783420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595783420","product_id":100039001,"comment_content":"1. 见过的贫血模型有将数据封装在 A 类中，将逻辑放在 AHelper 中。<br>2. 和很多原则和模式一样，是否合并得结合实际情况。不熟悉后端的开发模式，对于客户端开发，我觉得，如果百年不变，即使变化也是一致性的变化的数据类，我觉得可以合并；如果可能会在后面分化，我觉得还是不要合并，各自拷贝一份。如果不确定，先合并，然后出现分化及时将其分离，否则当代码遍布项目时再去分离牵一发而动全身。","like_count":0},{"had_liked":false,"id":237257,"user_name":"天空、海阔","can_delete":false,"product_type":"c1","uid":1318078,"ip_address":"","ucode":"9BCB64EF9A5894","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/be/fd1a9a3a.jpg","comment_is_top":false,"comment_ctime":1595757245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595757245","product_id":100039001,"comment_content":"1. 大部分都是贫血模型，基于sql驱动开发的，难过。没想到ddd用到的  2. 这个感觉不可以，vo bo entity的字段可能是不同的，比如对于sex, entity可能存储是0，1。但vo返回是男女。entity可能字段比较多，vo只需要返回部分数据等。如果要公用一个必须要强制字段相同，这样的类不能满足各个层的需要。","like_count":0},{"had_liked":false,"id":236100,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1595316648,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1595316648","product_id":100039001,"comment_content":"我以前写的业务代码应该也大多是贫血模型，偶尔可能在按照书本练习的时候写过一些充血模型。<br><br>看到留言里面有同学问 Entity、BO、VO 的区别，我从概念上能够理解，但是在现实代码中并没有用到过，感觉上似乎也没有什么差别。可能有字段名称或者显示方式的不同，但是有必要分成三个实体类么？<br><br>有一个问题，就是有没有可能先写贫血模型，保证项目快速上线，然后在以后的需求变化或者重构过程中，转化为充血模型？<br><br>有时间的话，也打算去看一下隔壁的 DDD 专栏。","like_count":0},{"had_liked":false,"id":234706,"user_name":"cw","can_delete":false,"product_type":"c1","uid":1264296,"ip_address":"","ucode":"82A6B50462F9F9","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/a8/b7e36dd2.jpg","comment_is_top":false,"comment_ctime":1594776980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594776980","product_id":100039001,"comment_content":"但是很多系统被设计之初都没有思考太多服务领域问题。。都随着业务走，然后业务耦合 贫血 ","like_count":0},{"had_liked":false,"id":232021,"user_name":"御风","can_delete":false,"product_type":"c1","uid":1812807,"ip_address":"","ucode":"51C8212BE06364","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","comment_is_top":false,"comment_ctime":1593833571,"is_pvip":false,"replies":[{"id":"86253","content":"一般没有facade吧，如果有的话，应该是在controller层之上的吧，而不是在service层之上吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594388155,"ip_address":"","comment_id":232021,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593833571","product_id":100039001,"comment_content":"现在的项目分为controller、facade、service、dao四层，facade和service两层的具体分工是什么？需要共用BO还是有各自的BO？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500474,"discussion_content":"一般没有facade吧，如果有的话，应该是在controller层之上的吧，而不是在service层之上吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594388155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226185,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1591973885,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1591973885","product_id":100039001,"comment_content":"每次开始搭建一个web项目的时候，总是想entity、bo、vo如何处理的问题。比如最近刚开始做的一个电商项目，我就一个vo行天下了（考虑到基本上就是crud，这几个都长得差不多，如果三层直接都转一次，会非常麻烦与浪费资源）。但是总是觉得带来了很大的耦合，就像constants、utils之类的东西到处引用。还有关于service同层之间是否可以相互调用、repository到处引用等等问题，不懂如何做分离封装，深深困扰，有没有朋友给点建议","like_count":0},{"had_liked":false,"id":221561,"user_name":"永远不要低估一颗冠军的心","can_delete":false,"product_type":"c1","uid":1339230,"ip_address":"","ucode":"FF0DD7382CD3CA","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/5e/3f7e9ccd.jpg","comment_is_top":false,"comment_ctime":1590540612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590540612","product_id":100039001,"comment_content":"我经历的项目都是基于贫血模式开发的，都是小系统","like_count":0},{"had_liked":false,"id":221551,"user_name":"永远不要低估一颗冠军的心","can_delete":false,"product_type":"c1","uid":1339230,"ip_address":"","ucode":"FF0DD7382CD3CA","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/5e/3f7e9ccd.jpg","comment_is_top":false,"comment_ctime":1590538743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590538743","product_id":100039001,"comment_content":"不可以合并为一个类，但是可以把公共的部分抽出来","like_count":0},{"had_liked":false,"id":216912,"user_name":"师哥","can_delete":false,"product_type":"c1","uid":1333376,"ip_address":"","ucode":"A86CD1661D370F","user_header":"https://static001.geekbang.org/account/avatar/00/14/58/80/c9e232b6.jpg","comment_is_top":false,"comment_ctime":1589368074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589368074","product_id":100039001,"comment_content":"如果按照领域模型设计这些可以抽象出来一个领域类，作为领域模型设计的中间层复用代码","like_count":0},{"had_liked":false,"id":210422,"user_name":"高鹏0409","can_delete":false,"product_type":"c1","uid":1928337,"ip_address":"","ucode":"1833CA764B6A46","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/91/8268a753.jpg","comment_is_top":false,"comment_ctime":1587742403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587742403","product_id":100039001,"comment_content":"大部分crud都是贫血模型，甚至无entity类。","like_count":0},{"had_liked":false,"id":208899,"user_name":"落尘kira","can_delete":false,"product_type":"c1","uid":1092169,"ip_address":"","ucode":"D203B519E43F85","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","comment_is_top":false,"comment_ctime":1587461095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587461095","product_id":100039001,"comment_content":"惨痛的历史经验告诉我，使用DDD建立领域模型时，必须要求2人以上一起制定模型，绝对不允许仅由一个人来制定！开发的整个过程中，理论上除了联调测试时间（变数大），设计模型的时间应该是要占大头的。","like_count":0},{"had_liked":false,"id":205788,"user_name":"铁血柔情","can_delete":false,"product_type":"c1","uid":1124220,"ip_address":"","ucode":"F09CACF06B8D05","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/7c/463d4342.jpg","comment_is_top":false,"comment_ctime":1586739713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586739713","product_id":100039001,"comment_content":"我们现在开发模式全部是贫血模式，但是要求代码可复用。第二个问题我是将公共字段比如说isdeleted等字段抽成一个公用类，但是其他的业务字段还是在这三个类中，不能做合并，因为有的时候业务的要求导致不能混合在一起。三个类展示很清晰，entity就是参数使用，po数据库映射使用，vo是结果集展示使用。","like_count":0},{"had_liked":false,"id":205117,"user_name":"凯玲","can_delete":false,"product_type":"c1","uid":1246373,"ip_address":"","ucode":"CF152D36B8EC70","user_header":"https://static001.geekbang.org/account/avatar/00/13/04/a5/a12612e4.jpg","comment_is_top":false,"comment_ctime":1586531778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586531778","product_id":100039001,"comment_content":"个人觉得：都是mvc，贫血型  VS  充血型。代码从这里放到了那里，并没有解决什么根本性问题。面向过程说的有些过度了。","like_count":0},{"had_liked":false,"id":204177,"user_name":"makermade","can_delete":false,"product_type":"c1","uid":1133194,"ip_address":"","ucode":"03386B90CB8F20","user_header":"https://static001.geekbang.org/account/avatar/00/11/4a/8a/c1069412.jpg","comment_is_top":false,"comment_ctime":1586346838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586346838","product_id":100039001,"comment_content":"做核心中间件等复杂的项目时，基于DDD开发，会更聚焦，更稳定，便于迭代","like_count":0},{"had_liked":false,"id":203780,"user_name":"reminis","can_delete":false,"product_type":"c1","uid":1020530,"ip_address":"","ucode":"43E5F6A610E846","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/72/c3b36a77.jpg","comment_is_top":false,"comment_ctime":1586266047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586266047","product_id":100039001,"comment_content":"&quot;领域模型相当于可复用的业务中间层&quot;，这句话说到心坎儿里去了。有次在团队中评审有关账务核销和信用那块的业务代码，刚开始是一整大块业务流，总感觉看着不舒服。多个交叉的业务流交叉在了一起，不仅看起来很复杂，也不利于维护。于是就想到了面向对象（当时并不了解ddd这个概念），考虑如何把业务流程整合成类，应该把哪些暴露出来，哪些又是可扩展的等等，最后就封装成了可复用的业务类。今天看到老师提到了“可复用的业务中间层”，一下子就想起来了，多谢老师","like_count":0},{"had_liked":false,"id":203581,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1586236123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586236123","product_id":100039001,"comment_content":"第一次听贫血模型这个概念，按照mvc架构的模型分析，openstack源码，总体来感觉是把数据库操作，对外接口，业务逻辑处理方法，分别进行归类，方便代码组织和维护及开发","like_count":0},{"had_liked":false,"id":203338,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1586177078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586177078","product_id":100039001,"comment_content":"打卡11","like_count":0},{"had_liked":false,"id":203083,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1586137977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586137977","product_id":100039001,"comment_content":"在业务中如果不用贫血模式，工作进度慢，会怎么办，用充血模式，功力发不出来，懂的人不多。","like_count":0},{"had_liked":false,"id":202498,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1585996692,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1585996692","product_id":100039001,"comment_content":"基本业务系统的开发，大多都是贫血模型的开发模式。<br>基础技术框架的开发，大多都是充血模型的DDD开发模式。","like_count":0},{"had_liked":false,"id":202461,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1585992122,"is_pvip":false,"discussion_count":2,"race_medal":1,"score":"1585992122","product_id":100039001,"comment_content":"贫血型是什么意思？这个背景知识不知道哇，望作者解释一下。","like_count":0,"discussions":[{"author":{"id":1488356,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b5/e4/e6faf686.jpg","nickname":"握了个大蚂蚱","note":"","ucode":"AD34AD4FA37371","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284192,"discussion_content":"蛤蛤，你进来直接留言的嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592469342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1488356,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b5/e4/e6faf686.jpg","nickname":"握了个大蚂蚱","note":"","ucode":"AD34AD4FA37371","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286818,"discussion_content":"奥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593304608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":284192,"ip_address":""},"score":286818,"extra":""}]}]},{"had_liked":false,"id":201449,"user_name":"bbbi","can_delete":false,"product_type":"c1","uid":1682175,"ip_address":"","ucode":"9A539AEF791428","user_header":"https://static001.geekbang.org/account/avatar/00/19/aa/ff/e2c331e0.jpg","comment_is_top":false,"comment_ctime":1585789863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585789863","product_id":100039001,"comment_content":"很多的公司都缺乏业务能力和技术能力都高的架构设计，包括表的设计。5岁小孩用50斤大锤干活，不一定有用5斤锤子干活快","like_count":0},{"had_liked":false,"id":200691,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1585638561,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585638561","product_id":100039001,"comment_content":"UserEntity、UserBo、UserVo是为了解耦吧，不该合并为一个类，如果合并为一个类，改了其中一个，各层都得改。","like_count":0},{"had_liked":false,"id":197538,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1585384134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585384134","product_id":100039001,"comment_content":"实际的开发中，Entity和Bo都是复用的，当然主要是内部系统之间，而RPC层有人会用Vo命名。","like_count":0},{"had_liked":false,"id":196040,"user_name":"改名不换人","can_delete":false,"product_type":"c1","uid":1118242,"ip_address":"","ucode":"7E25577829FA0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/22/910f705c.jpg","comment_is_top":false,"comment_ctime":1585232199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585232199","product_id":100039001,"comment_content":"1 没用过充血模型，几乎都是贫血模型的面向过程开发，因为快，而且需求变化快，用领域驱动设计，可能刚设计完还没写呢，就变了。<br>2 三个很相似但是不能合并成一个，我觉得这是遵守面向对象设计原则，每一层对外暴露最基本的也是最少的信息就可以了，如果合并到一起，肯定是大而全。","like_count":0},{"had_liked":false,"id":195909,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1585223454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585223454","product_id":100039001,"comment_content":"1.我是一个前端，以前用angularJS 的时候有 MVC 架构。开发也就是贫血模型开发的。其他的做的项目也大多数是贫血模型开发，我下这个结论的原因是：没有面向对象开发，东西很难复用。<br><br>贫血模式：面向过程开发，将数据和业务分类开，破坏了面向对象的封装特性。<br>充血模式：面向对象开发，数据和对应的逻辑放到一个类里面。","like_count":0},{"had_liked":false,"id":190329,"user_name":"索旭东","can_delete":false,"product_type":"c1","uid":1139039,"ip_address":"","ucode":"BFD07BCD8C8CAE","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/5f/b279daaf.jpg","comment_is_top":false,"comment_ctime":1584629421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584629421","product_id":100039001,"comment_content":"期待DDD的学习","like_count":0},{"had_liked":false,"id":190265,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1584624831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584624831","product_id":100039001,"comment_content":"二刷复习。<br><br>先回答问题：<br>1.一直是sql驱动开发。<br>2.不可以。每一层的实体尽管字段一致，但是承担不同的职责，如vo负责展示，entity负责数据库操作。如果三层使用同一个类，某一层的变动的影响将波及整个应用，违反单一职责，增加了各层之间的耦合。<br><br>立个flag:<br>专栏里的案例代码都要自己手敲一遍。加深对设计模式的理解。","like_count":0},{"had_liked":false,"id":189961,"user_name":"lwb123","can_delete":false,"product_type":"c1","uid":1873948,"ip_address":"","ucode":"B042BB2D66C754","user_header":"https://static001.geekbang.org/account/avatar/00/1c/98/1c/728c01df.jpg","comment_is_top":false,"comment_ctime":1584586043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584586043","product_id":100039001,"comment_content":"能用sql就把需求完成，那确实简单。我做游戏的，虽然大佬说项目用mvc，但确实整出来却像ddd","like_count":0},{"had_liked":false,"id":188075,"user_name":"刘爽","can_delete":false,"product_type":"c1","uid":1030794,"ip_address":"","ucode":"3763C72661AC1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/8a/a9cbb922.jpg","comment_is_top":false,"comment_ctime":1584320358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584320358","product_id":100039001,"comment_content":"一直贫血中，不仅贫血，而且失血，直接在controller中操作Model或写SQL了，返回hashMap。","like_count":0},{"had_liked":false,"id":186378,"user_name":"mo","can_delete":false,"product_type":"c1","uid":1595176,"ip_address":"","ucode":"FB3E8C827BE5CC","user_header":"https://static001.geekbang.org/account/avatar/00/18/57/28/be7550d2.jpg","comment_is_top":false,"comment_ctime":1583832129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583832129","product_id":100039001,"comment_content":"老师，怎么感觉这讲的是失血模型呢，贫血模型BO里应该还需要包含原子服务，而例子中的BO只有get，set方法。是我理解错了吗","like_count":0},{"had_liked":false,"id":185903,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1583722772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583722772","product_id":100039001,"comment_content":"贫血导致的后果就是没有重构，只有重写，改别人的代码还没有自己重写快。你可以费尽心思写漂亮的代码，但是代码质量不是评分标准啊，任务数才是KPI。就提高个人能力上讲，还是需要学习如何把代码写好，但是坚持下来很困难。一切为deadline服务。","like_count":0},{"had_liked":false,"id":185210,"user_name":"_yh葱","can_delete":false,"product_type":"c1","uid":1622209,"ip_address":"","ucode":"FA899711E91113","user_header":"https://static001.geekbang.org/account/avatar/00/18/c0/c1/414d5d1b.jpg","comment_is_top":false,"comment_ctime":1583516831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583516831","product_id":100039001,"comment_content":"想知道service和Domain怎样划分呢？","like_count":0},{"had_liked":false,"id":183628,"user_name":"一区","can_delete":false,"product_type":"c1","uid":1793770,"ip_address":"","ucode":"B5142A6276E490","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/a2mRI7BYncHCL6QWfibe7g7MWc70fSsqQibu7o9PcHjicYwo5dSnAoUN75HDDRz4GXWJdpWw59yJsMwFv3t7zSiaJQ/132","comment_is_top":false,"comment_ctime":1583080406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583080406","product_id":100039001,"comment_content":"我理解的DDD:设计软件时完全从业务角度考虑 舍弃技术。设计类时完全从业务角度考虑 舍弃数据库。而DDD中的事件风暴等战略设计 和中台的一部分思想不谋而合。不过中台的视野是站在更高的公司角度，DDD可大可小","like_count":0},{"had_liked":false,"id":183433,"user_name":"三年级2班 陈同学","can_delete":false,"product_type":"c1","uid":1639318,"ip_address":"","ucode":"5242BA5A1AACE1","user_header":"https://static001.geekbang.org/account/avatar/00/19/03/96/3def6d95.jpg","comment_is_top":false,"comment_ctime":1583038367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583038367","product_id":100039001,"comment_content":"@老师，能不能给非java的同学，在学习过程中感到吃力一些建议？","like_count":0},{"had_liked":false,"id":183273,"user_name":"三年级2班 陈同学","can_delete":false,"product_type":"c1","uid":1639318,"ip_address":"","ucode":"5242BA5A1AACE1","user_header":"https://static001.geekbang.org/account/avatar/00/19/03/96/3def6d95.jpg","comment_is_top":false,"comment_ctime":1582984821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582984821","product_id":100039001,"comment_content":"phper一名，没有学过java, 举的例子看的有点懵，什么OB OV ..这些概念不理解，是不是先学好java呢。。。再看教程呢","like_count":0},{"had_liked":false,"id":182051,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1582700202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582700202","product_id":100039001,"comment_content":"我们web刚开始就一个entity对象，包括表单Form、Bo、Vo 都在一个 POJO 中，后来稍微进步了一点，把表单Form单独定义成一个POJO。不过业务都是 SQL 查数据库后返回，定义多个 POJO 有时感觉还更麻烦了","like_count":0},{"had_liked":false,"id":181518,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1582553884,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582553884","product_id":100039001,"comment_content":"今天主要提到了贫血模型的mvc开发的缺陷以及盛行的原因，其实从前端的开发中可以发现简单逻辑的接口使用贫血模型贼爽，主要是因为我们习惯了基于数据库单位开发模式，而且DDD虽然听起来不错，但是对于简单逻辑没什么区别和优势，所以前端累需求我还是倾向使用贫血模型，但是DDD提供了一种领域开发模式，未来随着业务的复杂一定有其用武之地去所以平时也会花时间了解DDD的相关知识，为将来做储备。不过目前虽然前端类需求都使用贫血模式开发，但是随着各种vo、bo类的增加，很多字段的重复确实是一个问题，目前的想法是将具有业务相关性的（同一类业务）的字段放在一个公共类中。不知道大家有没有更好的实践，不过从解决的问题来说，本质上是为了代码的可维护性喝可扩展性。","like_count":0},{"had_liked":false,"id":180705,"user_name":"疯狂的石头","can_delete":false,"product_type":"c1","uid":1763900,"ip_address":"","ucode":"65CE6EB494FDCA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ea/3c/24cb4bde.jpg","comment_is_top":false,"comment_ctime":1582368245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582368245","product_id":100039001,"comment_content":"争哥，学生党没用过MVC，对于Repository,service,controller理解也不深入。。。总觉得一知半解。","like_count":0},{"had_liked":false,"id":180127,"user_name":"junmawang","can_delete":false,"product_type":"c1","uid":1763466,"ip_address":"","ucode":"977E9E25CE6C94","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/8a/803a42e0.jpg","comment_is_top":false,"comment_ctime":1582194032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582194032","product_id":100039001,"comment_content":"一直以来一直在用贫血模式进行开发，真心觉得随着项目运行到后期越是改不动，一个service方法多大几百行，都是由sql驱动的开发模式，一堆类似的sql，多表联查，甚至会有很多大sql，包含业务逻辑的sql。<br><br>针对问题二：Entity是ORM中数据库映射的实体类，BO是业务操作相关实体类，VO是视图层对应实体类，三者还是不能共用，一旦其中任何一项有变更还是需要进行拆分。","like_count":0},{"had_liked":false,"id":180020,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582166637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582166637","product_id":100039001,"comment_content":"对于问题1,由于一直面对的业务需求并没有非常复杂,而且架构师和产品在设计的时候也没有过深入的考虑,一直采用的都是基于面向过程编程的贫血模型开发,但是自从学习这几天来,我认为可以去在代码重构的时候,去考虑使用基于DDD的充血模型开发模式,将一些诸如监控等服务,改为了DDD驱动的充血模型,像是更为简单的SQL驱动的用户服务模块,做到符合编码规范即可,而且基于贫血模型的开发模式已经够用了<br>对于问题2,我的观点是,虽然大部分相同,但是仍然不能合并为一个类,因为有些东西我们储存在数据库中,我们不希望直接在接口层暴露出来,以免被不怀好意之人获取到","like_count":0},{"had_liked":false,"id":174681,"user_name":"Will","can_delete":false,"product_type":"c1","uid":1440599,"ip_address":"","ucode":"15E7715ADDABE3","user_header":"https://static001.geekbang.org/account/avatar/00/15/fb/57/258a7ff6.jpg","comment_is_top":false,"comment_ctime":1580347930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580347930","product_id":100039001,"comment_content":"充血模型是数据和逻辑封装在一起，可是需求在不断的变动，是不是就导致这个model类在不断修改，反而觉得充血模型更解藕这部分内容，好像在使用上更方便了","like_count":0},{"had_liked":false,"id":173819,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1579707030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579707030","product_id":100039001,"comment_content":"贫血模式：service + vo， 其中vo只有数据没有逻辑，是重service轻vo的模式，本质上是sql驱动开发，适用于简单场景；<br>充血模式：service + domain, 其中domain包含了所有的数据和逻辑，是轻service重domain的模式，本质上是业务抽象驱动开发，适用于复杂场景；<br>","like_count":0},{"had_liked":false,"id":173100,"user_name":"Screenly","can_delete":false,"product_type":"c1","uid":1220387,"ip_address":"","ucode":"AF1FEDD17F5DC9","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/23/1b41af11.jpg","comment_is_top":false,"comment_ctime":1579424403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579424403","product_id":100039001,"comment_content":"贫血模式的开发天天在写，本文可谓一针见血，身边总是有人说赶快吧设计模式学了，但是不会结合，看很期待的课程以及如何运用到生产上，争哥很务实，很接地气，还有就是在开发当中，总是被不懂技术的销售(项目经理)，牵着鼻子走，项目很赶，调研不重视，坑的还是开发，很伤心","like_count":0},{"had_liked":false,"id":169119,"user_name":"厉害了我的国","can_delete":false,"product_type":"c1","uid":1052191,"ip_address":"","ucode":"CD0A54A1B998AA","user_header":"https://static001.geekbang.org/account/avatar/00/10/0e/1f/d0472177.jpg","comment_is_top":false,"comment_ctime":1578277037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578277037","product_id":100039001,"comment_content":"没有贫血，是失血。。spring把程序员变成了煞笔","like_count":0},{"had_liked":false,"id":167282,"user_name":"公号-彤哥读源码","can_delete":false,"product_type":"c1","uid":1239881,"ip_address":"","ucode":"C0D16E1BA12DA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/49/bd914b5f.jpg","comment_is_top":false,"comment_ctime":1577756378,"is_pvip":false,"replies":[{"id":"65136","content":"为啥非得跟web开发联系在一起呢","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1577948594,"ip_address":"","comment_id":167282,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577756378","product_id":100039001,"comment_content":"有个疑问，之前老师说的购物车那个例子，items不暴露get方法，怎么转成VO返回前端？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479809,"discussion_content":"为啥非得跟web开发联系在一起呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577948594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167244,"user_name":"宇","can_delete":false,"product_type":"c1","uid":1609795,"ip_address":"","ucode":"2110A4AA023AA0","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/43/38dda182.jpg","comment_is_top":false,"comment_ctime":1577750444,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1577750444","product_id":100039001,"comment_content":"提问:移动端也是采用～mvc、mvp、mvvm之类的三层架构；如果使用ddd的架构方式","like_count":0},{"had_liked":false,"id":167166,"user_name":"Jessica","can_delete":false,"product_type":"c1","uid":1084877,"ip_address":"","ucode":"9FC7E9BD3FE9F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/cd/b6bdc1b2.jpg","comment_is_top":false,"comment_ctime":1577704622,"is_pvip":false,"replies":[{"id":"65165","content":"好像没有😂","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1577955375,"ip_address":"","comment_id":167166,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577704622","product_id":100039001,"comment_content":"老师，按照我们之前的项目解决方案里，我们是采用了DDD分层架构，但是没有使用充血模型，依然使用了贫血模型，通篇没看到老师提基于贫血模型的DDD架构，我在想是没有这种用法吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479766,"discussion_content":"好像没有😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577955375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166914,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1577630064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577630064","product_id":100039001,"comment_content":"1 充血模型与贫血模型的区别：数据和业务是否分离<br>2 贫血模型的MVC模式更受欢迎的原因：业务和数据分离，更灵活，前期不需要投入过多的设计；充血模型需要投入更多的精力，来提高代码的复用性和维护性，并且需要深度了解业务。<br>虽然MVC是面向过程，DDD是面向对象。但从自己角度考虑，MVC的统一风格和思维方式通用性更强，门槛更低；而DDD对业务和抽象能力要求更高，门槛高。难上手，也许就是DDD流行程度不如MVC的原因吧","like_count":0},{"had_liked":false,"id":166777,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1577592772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577592772","product_id":100039001,"comment_content":"其实我个人偏向DDD的思想在平时的开发中，奈何同事喜欢面向过程，因此经常发生争论！","like_count":0},{"had_liked":false,"id":166760,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1577589464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577589464","product_id":100039001,"comment_content":"一、什么是基于贫血模型的传统开发模式？<br>只包含数据、不包含业务逻辑的类，叫作贫血模型。<br>比如我们平时开发所使用到的VO、BO、PO都只包含数据，都是基于贫血模型设计的，与操作分离，破坏了面向对象的封装特性，是面向过程的编程风格。<br><br>二、什么是基于充血模型的DDD开发模式？<br>1.充血模型与贫血模型想反，数据和对应的业务逻辑被封装到同一个类中，满足面向对象的封装特性，是面向对象编程风格。<br>2.领域驱动设计（DDD）,主要用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。<br>3.跟基于贫血模型的传统开发模式的区别主要在Service层。贫血模型中的Service层包含Service类和BO类，BO只包含数据，具体的业务逻辑都在Service类中。而充血模型的Service层包含Service类和Domain类，Domain既包含数据，也包含业务逻辑，Service类很单薄。<br>基于贫血模型的传统的开发模式，重 Service 轻 BO；基于充血模型的 DDD 开发模式，轻 Service 重 Domain。<br><br>三、为什么基于贫血模型的传统开发模式如此受欢迎？<br>1.大部分情况开发的系统业务都比较简单，不需要动脑子精心设计充血模型，贫血模型足以应对，如果简单的业务设计成充血模型，没有太大意义。<br>2.充血模型设计比贫血模型更加有难度。充血模式是一种面向对象的编程风格，一开始就要设计好针对数据要暴露哪些操作，定义哪些业务逻辑，而贫血模型一开始只需要定义数据，之后有什么功能开发需求直接在Service层定义。<br>3.思维已固化，转型有成本。转向用充血模型和DDD，肯定有一定的学习成本、转型成本，很多人不愿意做。<br><br><br>四、什么项目应该考虑使用基于充血模型的DDD开发模式？<br>对于业务不复杂的系统开发来说，基于贫血模型的传统开发模式简单够用，基于充血模型的 DDD 开发模式有点大材小用，无法发挥作用。相反，对于业务复杂的系统开发来说，基于充血模型的 DDD 开发模式，因为前期需要在设计上投入更多时间和精力，来提高代码的复用性和可维护性，所以相比基于贫血模型的开发模式，更加有优势。","like_count":0},{"had_liked":false,"id":166748,"user_name":"Yangjing","can_delete":false,"product_type":"c1","uid":1018061,"ip_address":"","ucode":"D88DFD4958D07C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/cd/2c3808ce.jpg","comment_is_top":false,"comment_ctime":1577586087,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577586087","product_id":100039001,"comment_content":"1. 基本上都是基于 贫血模型开发。充血模型的偶尔是那种稳定的，后面基本不会变化的，不然数据表字段都有可能改的。<br>2. 不可以合并成一个类。职责不同，它们后面变化的程序后面也不同，比如 VO\\BO 可能更会变化","like_count":0},{"had_liked":false,"id":166166,"user_name":"喵喵喵","can_delete":false,"product_type":"c1","uid":1211713,"ip_address":"","ucode":"E3AD8BF42E19DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/41/3c5b770b.jpg","comment_is_top":false,"comment_ctime":1577410144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577410144","product_id":100039001,"comment_content":"打卡～","like_count":0},{"had_liked":false,"id":165454,"user_name":"可乐","can_delete":false,"product_type":"c1","uid":1731817,"ip_address":"","ucode":"7E7BAB49C085E7","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6c/e9/2bb44600.jpg","comment_is_top":false,"comment_ctime":1577239591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577239591","product_id":100039001,"comment_content":"确实，时间成本是很关键的一点。再有就是做需求分析的人没有意识，总是基于当前的客户模糊的需求总结出想要的，然后阉割生产<br>","like_count":0},{"had_liked":false,"id":165318,"user_name":"东流","can_delete":false,"product_type":"c1","uid":1738147,"ip_address":"","ucode":"2715BC6E87BD83","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","comment_is_top":false,"comment_ctime":1577199713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577199713","product_id":100039001,"comment_content":"1.杀鸡用贫血模型，杀牛用充血模型<br>2.这三个类分别是view，control，model层的数据结构，不可以合并","like_count":0},{"had_liked":false,"id":164971,"user_name":"一壶浊酒","can_delete":false,"product_type":"c1","uid":1145530,"ip_address":"","ucode":"5D90F8F8121BBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/ba/8545f2d7.jpg","comment_is_top":false,"comment_ctime":1577118198,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577118198","product_id":100039001,"comment_content":"看了争哥的文章之后，发现我们公司的系统虽然用了domain类，但是还是将其存放各种实体，并且把bo 、vo都整合在了一起，这样也导致了提供数据接口的controller层将数据的所有字段都展示了出来，虽然对于不必要的字段没有实际的内容，但是全都展示出来感觉还是缺乏了一些安全性","like_count":0},{"had_liked":false,"id":164535,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1577022769,"is_pvip":false,"replies":[{"id":"67751","content":"这个不在专栏内容之内呀","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1580122466,"ip_address":"","comment_id":164535,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577022769","product_id":100039001,"comment_content":"老师, 我觉得设计数据库结构我也会犯一些问题, 但自己可能不知, 能否花一个时间讲讲数据库设计的坑","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478804,"discussion_content":"这个不在专栏内容之内呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580122466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163282,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1576679682,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1576679682","product_id":100039001,"comment_content":"1.目前项目中基本都是贫血模型开发模式，对于老师说的充血模型概念还是有些抽象，我的理解是充血模型中的数据会做一部分的业务逻辑，然后service对业务逻辑进行组装（就相当于把贫血中的两个类BO与Service合并成一个类，并且在BO中做一些业务逻辑），另外对于业务复杂的系统采用充血有优势，系统的业务复杂度有没有一个可以直观一点的评判标准的？<br>2.第二个问题不赞同合并成一个类，毕竟Entity的需求变化基本很少，而涉及到BO以及VO的变化就我接触的业务而言，是很多的，另外分开的话职责明确，维护性，可读性会更好","like_count":0},{"had_liked":false,"id":163105,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1576657490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576657490","product_id":100039001,"comment_content":"贫血模型使用：<br>1.大部分业务简单，没必要设计<br>2.定义简单，只要定义几个简单的属性，充血还要想这个这个业务怎么这么设计，那个那个怎么设计<br>3.用的人多<br>适合业务简单<br><br>充血适合复杂的<br>如果全部在service层用(充血)，那么下次就很难复用(因为涉及到sql之类的东西，系统会越做越大)<br>如果在实体类中(贫血)，下次就能再继续用这个方法了","like_count":0},{"had_liked":false,"id":161847,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1576377919,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576377919","product_id":100039001,"comment_content":"贫血模型的开发模式其实就是一个流水线的操作，有需要了就往里面填充相关的代码，唉，一直贫血而不知道啊！","like_count":0},{"had_liked":false,"id":160575,"user_name":"零度","can_delete":false,"product_type":"c1","uid":1071119,"ip_address":"","ucode":"C121285CD9D999","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/0f/8ed4be99.jpg","comment_is_top":false,"comment_ctime":1575977703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575977703","product_id":100039001,"comment_content":"Python中django框架用的是MVT，想问下贫血模式和充血模式在django或python中是什么体现？","like_count":0},{"had_liked":false,"id":160496,"user_name":"cv0cv0","can_delete":false,"product_type":"c1","uid":1360093,"ip_address":"","ucode":"93FF9277F03FD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","comment_is_top":false,"comment_ctime":1575964678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575964678","product_id":100039001,"comment_content":"UserVo 和 UserBo 有什么区别？","like_count":0},{"had_liked":false,"id":160035,"user_name":"Geek_ecf7bb","can_delete":false,"product_type":"c1","uid":1523207,"ip_address":"","ucode":"5BF4DD62425BE0","user_header":"https://static001.geekbang.org/account/avatar/00/17/3e/07/c27b53b8.jpg","comment_is_top":false,"comment_ctime":1575859562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575859562","product_id":100039001,"comment_content":"工作一年多还没接触过充血模型的实践，对于第一个对比的问题没有太多的想法。而第二个问题，我的想法是之所以分这么多UserEntity、UserBo、UserVo，虽然带来了定义多个相似类的冗余，但是去能保证每层能按需求取得相应的数据，如果三合一的话，会带来很多冗余的数据返回，有时候也有可能带来不安全性。","like_count":0},{"had_liked":false,"id":159913,"user_name":"开心小毛","can_delete":false,"product_type":"c1","uid":1023762,"ip_address":"","ucode":"9D57A2773759F3","user_header":"","comment_is_top":false,"comment_ctime":1575824987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575824987","product_id":100039001,"comment_content":"在高吞吐量且服务器内存成为瓶颈时，贫血模型优于充血模式，原因如下：<br>为了节省内存，我们希望把不含数据的对象定义成Singleton，repository和service正是这样的对象。<br>而BO和VO则需要对每一个请求建立新的对象。<br>那么把业务逻辑放在BO和VO的充血模型会浪费更多的内存。","like_count":0},{"had_liked":false,"id":159725,"user_name":"宋意","can_delete":false,"product_type":"c1","uid":1229043,"ip_address":"","ucode":"2CCFDB02BA8ADF","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/f3/281ccb06.jpg","comment_is_top":false,"comment_ctime":1575763648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575763648","product_id":100039001,"comment_content":"不知道spirng等java框架的源码设计是不是DDD 充血模型，怪不得看不懂，想不明白，太复杂了","like_count":0},{"had_liked":false,"id":159442,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1575624822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575624822","product_id":100039001,"comment_content":"贫血模型的开发模式——<br>是一种在实体类中不包含逻辑的模式，MVC是典型的面向过程的编程风格，违背了OOP原则<br>适用的场景——<br>开发的项目小，业务不复杂<br>缺点——<br>1，是一种面向过程的编程风格，违背了OOP的原则<br>2，代码的可复用性差，后期维护困难<br>3，不适合复杂业务的开发<br><br>充血模型的开发模式<br>DDD开发模式，是一种真正的面向对象的编程的风格<br>需要在前期花大量的时间理清楚所有的业务，定义好领域模型中的属性和方法，把大量的时间和精力用在设计上<br><br>适用的场景——<br>业务复杂，项目庞大<br><br>缺点——<br>对于小项目来说，使用DDD开发模式其实是“大材小用”，所以不适合<br><br>优点——<br>1，提高了代码的可复用性<br>2，提高了后期的可维护性<br>3，适合复杂业务的开发，（前期需要花大量的时间在设计上）<br><br>为什么基于MVC的贫血模式那么受欢迎？<br>1，大多数人都是模仿别人的代码，别人的代码基本都是demo,没有复杂的业务逻辑，基本都是贫血模型<br>2，大多数人接触不到复杂的业务项目<br>3，做web项目的时候，基本上就是简单的CURE，贫血模型就能解决<br>4，公司以任务数量来衡量个人的价值<br>5，个人不考虑项目质量属性， 只关心当前业务，没有意识去思考后期该如何维护和响应业务变更<br>6，求快不求质<br>  7，个人以任务数来自我满足<br>    * 没有 60 分和 100 分的概念<br>  9、 需求分析、设计、编码合为一体<br><br><br>","like_count":0},{"had_liked":false,"id":159400,"user_name":"唐先生","can_delete":false,"product_type":"c1","uid":1592772,"ip_address":"","ucode":"3D68A1B3223B3F","user_header":"https://static001.geekbang.org/account/avatar/00/18/4d/c4/97253590.jpg","comment_is_top":false,"comment_ctime":1575614984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575614984","product_id":100039001,"comment_content":"现在我所在的项目组，我们组的系统就是按照DDD设计的，最开始接触的时候，比较难理解。在我们支付核心负责的系统，需要对接交易层各种支付业务。代扣，充值，提现，退款。都抽象成一个个领域模型。一个模型对应的其实是数据库的多张表，满足整个业务模型的。但是让我写，我还是不行的，确实是对业务不熟悉。","like_count":0},{"had_liked":false,"id":159146,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1575547814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575547814","product_id":100039001,"comment_content":"不仅仅是我自己所做过的项目都是贫血的，而且我所了解到的其他人（包括和我水平一样的，比我水平高的）的项目也都是贫血的；充血模型的项目一个也没有见过；是我落伍了？课后的习题与上一节课后的习题差不多吧，代码上一定程度的冗余是可以接受的，不要牺牲了业务上的灵活性为了设计而设计","like_count":0},{"had_liked":false,"id":158927,"user_name":"居培波","can_delete":false,"product_type":"c1","uid":1437396,"ip_address":"","ucode":"27A5A8D9D4682B","user_header":"https://static001.geekbang.org/account/avatar/00/15/ee/d4/204d0c6d.jpg","comment_is_top":false,"comment_ctime":1575502872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575502872","product_id":100039001,"comment_content":"一直贫血。保持代码整洁就别合并，不同层的实体类还是有差异的。","like_count":0},{"had_liked":false,"id":158879,"user_name":"王喜春","can_delete":false,"product_type":"c1","uid":1022349,"ip_address":"","ucode":"436E91FDED1B30","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/8d/4d5dbfc5.jpg","comment_is_top":false,"comment_ctime":1575469295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575469295","product_id":100039001,"comment_content":"关于DDD等充血模型没有较好落地，想到一个原因： 现在整个行业是投资驱动的，在大量资金涌入情况下，谁能快速占领市场谁就能活下来，这个背景下，贫血模型因可快速开发、让业务快速落地成了首选。在业务稳定后，以前的老兵引写码快，升了起来，转管理、聊需求后， 贫血模型也就被人为地固化下来。<br><br>现在能让DDD再引起重视的场景，可能是中台。","like_count":0},{"had_liked":false,"id":158481,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1575381669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575381669","product_id":100039001,"comment_content":"1.目前的确是处于贫血模型而不自知，主要也是受限于一条龙的数据获取服务，controller也是针对每一个domain数据的操作，围绕其的部分数据的修改，很多时候并不需要特别体现数据与方法封装一起的作用<br>2.除了Entity之外，很多时候也只是在返回页面的数据上会做一定的修改出现VO,而BO的确没有使用过，暂时觉得VO和Entity大部分时候其实是重叠的，而少部分需要处理的数据格式，内容是不一样的，需要视具体的情况而定","like_count":0},{"had_liked":false,"id":157925,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1575283742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575283742","product_id":100039001,"comment_content":"一直贫血  没有冲过血","like_count":0},{"had_liked":false,"id":157921,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1575283494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575283494","product_id":100039001,"comment_content":"觉得BO在系统里很少用","like_count":0},{"had_liked":false,"id":157861,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1575272912,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575272912","product_id":100039001,"comment_content":"现在才发现，披着微服务的皮，写着贫血的MVC而自以为很先进，设计模式和面向对象的基础压根就没落到实处，哎，还是需要大佬来提携才能少走很多的弯路","like_count":0},{"had_liked":false,"id":157632,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1575216370,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575216370","product_id":100039001,"comment_content":"[我们平时开发 Web 后端项目的时候，基本上都是这么组织代码的。其中，UserEntity 和 UserRepository 组成了数据访问层，UserBo 和 UserService 组成了业务逻辑层，UserVo 和 UserController 在这里属于接口层］还是没看明白之间的关系，主要用php开发后端，都是直接controller类与model类交互返回接口数据，是语言导致的区别？不是说跟语言无关吗 望解答 谢谢 &#47;smile ","like_count":0},{"had_liked":false,"id":157395,"user_name":"小刀","can_delete":false,"product_type":"c1","uid":1351063,"ip_address":"","ucode":"94DF8C45E09E42","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaByN5IfYbE9jMtWrtTDXtPEIHeV77KW1p7ZkiasiaGgA50VXaibo4fbp5ib2JkFP3iaIe4AUudLibufkEIofu5euCNHg/132","comment_is_top":false,"comment_ctime":1575130299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575130299","product_id":100039001,"comment_content":"一直都是MVC贫血<br>Model  DAO<br>service 服务层<br>controller 外部接口类+前端接口","like_count":0},{"had_liked":false,"id":157300,"user_name":"奔跑的小孩","can_delete":false,"product_type":"c1","uid":1304259,"ip_address":"","ucode":"0053193F7A9870","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/21uTMWr7bx5qMibp2hwmGvLbYuj5Aic2dqD3futlNo25eDGDt4t7zzN9cdnj7cVGwTot1U4AyADfWUpqjq1SicgWQ/132","comment_is_top":false,"comment_ctime":1575105109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575105109","product_id":100039001,"comment_content":"领域驱动模型适合做复杂的项目，是不是就相当于细化逻辑，代码的抽象呢，提取公用部分","like_count":0},{"had_liked":false,"id":157277,"user_name":"一剑","can_delete":false,"product_type":"c1","uid":1022127,"ip_address":"","ucode":"93ADD5B5215D4C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/af/3945cea4.jpg","comment_is_top":false,"comment_ctime":1575102019,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575102019","product_id":100039001,"comment_content":"个人觉得DDD最有价值的是战略部分，对于领域的拆分，业务的分析方法论，而落到代码这块就要根据自身的情况看采用哪种方式了，DDD也没有要求说有模块都必须采用充血模型啊","like_count":0},{"had_liked":false,"id":157248,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1575096744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575096744","product_id":100039001,"comment_content":"@乐<br>说的很对.大部分人的公司水平,技术水平.....","like_count":0},{"had_liked":false,"id":157206,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1575082529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575082529","product_id":100039001,"comment_content":"打卡<br>1、贫血模型的MVC架构分为三层：数据访问层（Respository、UesrEntity）、业务逻辑层（Service<br>、Bo）和接口层（Controller、Vo）；<br>2、充血模型中。Service层中分为两个类Service 类和 Domain 类两部分，Domain相当于贫血模型中的BO，但是Domain类是按面向对象的编程思想设计的，里面既有数据，也包含逻辑处理，核心的业务逻辑转移到Domain中，Service类变得单薄了。<br>3、两者之间的区别落实到实际开发中不只是类的设计的区别，开发流程也完全不一样。贫血模型开发中根据需求看如何获取数据，之后的事情都在Service类中完成，而充血模型中，需要根据需求整理业务，之后定义领域模型中的属性和方法。领域模型相当于和复用的业务中间层，新的上层业务需求和功能都基于定义好的这些领域模型开发。","like_count":0},{"had_liked":false,"id":157203,"user_name":"大强","can_delete":false,"product_type":"c1","uid":1737397,"ip_address":"","ucode":"D5C64C5A01B25D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/82/b5/a6049a26.jpg","comment_is_top":false,"comment_ctime":1575081610,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575081610","product_id":100039001,"comment_content":"1我们公司快节奏迭代几乎都是基于sql表驱动，大大的sql你写一次，我写一次，加上没有代码规范，很少有方法负用 2 这些差不多属性可以放入到一个专门的类中，以便负用","like_count":0},{"had_liked":false,"id":157201,"user_name":"happychap","can_delete":false,"product_type":"c1","uid":1388033,"ip_address":"","ucode":"C872B959BF2F3D","user_header":"https://static001.geekbang.org/account/avatar/00/15/2e/01/14a478bb.jpg","comment_is_top":false,"comment_ctime":1575080282,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575080282","product_id":100039001,"comment_content":"一直没能找到vo,bo和entity代码的复用方法...(*￣０￣)ノ，它们既存在诸多相同字段，同事它们又都需要承载各自所在层的职责，如：为简化前端工作，减少额外的http请求，vo就经常需要各类id字段对应的人类可理解的值，bo则可能根据业务需要由多个原生属性计算出新的属性，而entity又会存在诸好删除标记之类的对bo和vo透明的字段。把共用字段放基类里，若继承使用吧，vo所需的json字段验证注解对bo和entity又是多余的，若组合使用吧，vo层又得把相关字段包裹一遍，收益不大。期待老师指点迷津","like_count":0},{"had_liked":false,"id":157144,"user_name":"李公子胜治","can_delete":false,"product_type":"c1","uid":1455420,"ip_address":"","ucode":"7D48D78D289935","user_header":"https://static001.geekbang.org/account/avatar/00/16/35/3c/9800b0ba.jpg","comment_is_top":false,"comment_ctime":1575041802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575041802","product_id":100039001,"comment_content":"老师，您好，现在看来，好像您讲的都是基于web编程的内容，而我是C++程序员，没怎么接触过web编程，倒是这种网络通信代码写的很多，您能否讲一下基于C++如何做出类似于java的反射机制，从而实现IOC功能呢？","like_count":0},{"had_liked":false,"id":157040,"user_name":"咸鱼","can_delete":false,"product_type":"c1","uid":1179028,"ip_address":"","ucode":"5E79636DE48155","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","comment_is_top":false,"comment_ctime":1575016840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575016840","product_id":100039001,"comment_content":"早就有这种感觉了，一个sql几乎解决了大部分需要，service层都没有什么可以写的了，空荡荡的，每次都觉得很别扭，都说service层主要负责处理业务逻辑的，现在一看，啥玩意没有，别扭","like_count":0},{"had_liked":false,"id":156804,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1574960884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574960884","product_id":100039001,"comment_content":"目前做过的应该都是贫血DDD，甚至有些旧代码没有分业务实体，直接一个 Entity 贯穿 Repository 层、Service 层、Controller 层。自己目前会用到Entity，VO，DTO（看完本文感觉BO更好），然后有时会用Param<br>或Query用来接收参数。<br>然后，一直对 DDD 开发模式不明白，在其他地方也零散看到过相关的内容。在下载的一个 PDF 《阿里巴巴Java开发手册》上有如下描述：<br>分层领域模型规约：<br>*   DO（ Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。<br>*   DTO（ Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。<br>*   BO（ Business Object）：业务对象。 由Service层输出的封装业务逻辑的对象。<br>*   AO（ Application Object）：应用对象。 在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。<br>*   VO（ View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。<br>*   POJO（ Plain Ordinary Java Object）：在本手册中， POJO专指只有setter&#47;getter&#47;toString的简单类，包括DO&#47;DTO&#47;BO&#47;VO等。<br>*   Query：数据查询对象，各层接收上层的查询请求。 注意超过2个参数的查询封装，禁止使用Map类来传输。<br>想请教下老师，<br>1.实际会用到或区分这些多类型的实体吗，还是就用文中三种覆盖所有的场景？<br>2.如果两个查询同一实体的信息，需要的字段信息不一样，是定义两个VO不同字段还是用一个大而全的VO，哪种较好？<br>3.还是阿里这个手册里，领域的实体命名推荐不用驼峰，规约写成 UserDO 形式，这也让我别扭过。后来看到 《Effective Java》说即使是首字母缩写的词还是用驼峰命名更易读，如 HttpUrl 比 HTTPURL 更好。这才让我不纠结阿里这个规约，还是使用 UserDo 形式命名。","like_count":0},{"had_liked":false,"id":156766,"user_name":"念去去·云","can_delete":false,"product_type":"c1","uid":1419980,"ip_address":"","ucode":"F185F5A4D963C6","user_header":"https://static001.geekbang.org/account/avatar/00/15/aa/cc/7285dd0a.jpg","comment_is_top":false,"comment_ctime":1574951367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574951367","product_id":100039001,"comment_content":"感谢现在的老大传授的思想理念。虽然我有没有使用过ddd，但是在业务逻辑时，会抽象代码，在业务层会和现实逻辑对应起来，主方法也就几行，命名体现真实意图。复杂逻辑通过合适的设计模式优化。并没有感觉到评论里说代码不好维护，逻辑分散怎么的。","like_count":0},{"had_liked":false,"id":156754,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1574947990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574947990","product_id":100039001,"comment_content":"我自己写过的后端，似乎三层架构都没有，就是定义了model，然后直接在API函数中处理并返回。所以，让我去想象三层架构是如何协调工作的都还有一些困难。<br>我写的后端就只有一个类，也就是所谓的“合并”了，到目前为止没出啥问题，可能还是因为业务太简单了。<br>突然有点感悟：架构和设计模式这些东西都是为了应对复杂度的","like_count":0},{"had_liked":false,"id":156700,"user_name":"arvin","can_delete":false,"product_type":"c1","uid":1101774,"ip_address":"","ucode":"1A008122D9E34C","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/ce/9261eae7.jpg","comment_is_top":false,"comment_ctime":1574937463,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574937463","product_id":100039001,"comment_content":"DDD 模式，和 “接口&#47;抽象” 感觉有点点类似","like_count":0},{"had_liked":false,"id":156676,"user_name":"丿淡忘","can_delete":false,"product_type":"c1","uid":1139645,"ip_address":"","ucode":"604AE01961A026","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","comment_is_top":false,"comment_ctime":1574934285,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574934285","product_id":100039001,"comment_content":"老师我想问一下，单纯针对ddd而言，ddd设计中的po，dto是不是属于贫血模型，而do是充血模型","like_count":0},{"had_liked":false,"id":156664,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1574932862,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574932862","product_id":100039001,"comment_content":"惯性的作用比较大 公司里不少资深的同事都是写贫血模型出身的 另外技术知识的分层也容易让大家觉得贫血模型容易理解系统的工作过程 能够简单的把代码实现归纳成CRUD + cache + mq","like_count":0},{"had_liked":false,"id":156655,"user_name":"陆老师","can_delete":false,"product_type":"c1","uid":1203293,"ip_address":"","ucode":"0EA27C4755FF4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5c/5d/974b033f.jpg","comment_is_top":false,"comment_ctime":1574931236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574931236","product_id":100039001,"comment_content":"那么问题来了，我们现实的功能需求，前期根本不明确，中途变化太大，先弄好领域模型，定义好有什么业务逻辑不大现实呀，有些东西都需要根据公司业务需求走向来的。","like_count":0},{"had_liked":false,"id":156626,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1574926197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574926197","product_id":100039001,"comment_content":"一直觉得 老师能把新概念讲解的很清楚的能力很厉害啊。今天好多新词，经过老师讲解之后，一下就能明白啥意思了，厉害，厉害~<br>还有，老师指出的问题都是痛点啊：高大上的概念可能只值“五毛钱”，SQL语句满天飞。哈哈哈哈","like_count":0},{"had_liked":false,"id":156622,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1574926011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574926011","product_id":100039001,"comment_content":"<br>贫血模型：重service，轻domain；大部分的业务逻辑都在service中处理完了，而domain中只是定义数据，不设计业务所需的方法。<br><br>充血模型：重domain，轻service；数据和方法都由domain来完成，service只处理部分业务。<br><br>领域驱动设计，即 DDD (Domain Driven Design)，主要是用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。这并没有多么的高大上，重在业务的理解，才能划分出好的模块。<br><br>基于贫血模型的MVC架构流行的原因：<br><br>大部分情况下，我们涉及到的业务太过简单，更多的是CRUD操作；<br>充血模型比贫血模型设计难度更大，需要提前设计好数据和业务处理方法；<br>思维已固化，转型有成本。基于贫血模型的传统开发模式经历了这么多年，已经深得人心、习以为常。<br>什么项目应该考虑使用基于充血模型的 DDD 开发模式？<br><br>于充血模型的 DDD 开发模式，更适合业务复杂的系统开发。比如，包含各种利息计算模型、还款模型等复杂业务的金融系统。<br>充血模型于贫血模型一个直观的区别就是：<br><br>一个将业务逻辑放到 Service 类中，一个将业务逻辑放到 Domain 领域模型中；<br>还有一个非常重要的区别，那就是两种不同的开发模式会导致不同的开发流程。<br>业务逻辑简单的系统更多是SQL语句满天飞~<br><br>而越复杂的系统，对代码的复用性、易维护性要求就越高，我们就越应该花更多的时间和精力在前期设计上。而基于充血模型的 DDD 开发模式，正好需要我们前期做大量的业务调研、领域模型设计，所以它更加适合这种复杂系统的开发。<br><br>如果我们在项目中，应用基于充血模型的DDD 的开发模式，我们需要事先理清楚所有的业务，定义领域模型所包含的属性和方法。领域模型相当于可复用的业务中间层。新功能需求的开发，都基于之前定义好的这些领域模型来完成。","like_count":0},{"had_liked":false,"id":156611,"user_name":"杨杰","can_delete":false,"product_type":"c1","uid":1131823,"ip_address":"","ucode":"74817EA9499843","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/2f/b0b0dd74.jpg","comment_is_top":false,"comment_ctime":1574922884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574922884","product_id":100039001,"comment_content":"UserEntity、UserBo、UserVo 合并肯定是不合适的，但是在业务场景经常发生变化的情况下，这样也确实很麻烦。我指的是UserEntity层面上经常涉及到增加字段这种。","like_count":0},{"had_liked":false,"id":156603,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1574921107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574921107","product_id":100039001,"comment_content":"1.基本没有做过DDD模型的项目，一直都是属于CRUD boy<br>2.针对对象字段有重合的问题，我觉得不能把对象进行合并，而应该允许冗余，因为一旦某一层的字段发生变化，会影响到其他层，导致代码可理解性大幅下降，然后必须对其他层的代码进行大改，简直费时费力。我自己就重构过这种代码，一开始，入参，业务参数，数据库实体字段，全都塞在一个实体里，后面越改越发现代码严重耦合+难以维护，拆分以后就舒服多了","like_count":0},{"had_liked":false,"id":156553,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574910726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574910726","product_id":100039001,"comment_content":"思考题2<br>如果不同层中需要的数据类都一样，就合在一起，不然增加一堆一样的类+拷贝意义不大，但是很多情况下，这些数据类会有不同，例如界面显示的数据和从服务端读到的数据会有不同，这个时候就有必要分离并创建数据类间的映射。还有些情况是，有些类一样有些类不一样，这个时候就处于一个两难选择，如果完全分层，必然引入一些重复代码，违反DRY原则。如果只映射那些需要的类，就会对数据类的处理不一致。这个时候可能增加一层适配器层，只处理那些不同的数据类是一个不错的选择。","like_count":0},{"had_liked":false,"id":156550,"user_name":"微凉","can_delete":false,"product_type":"c1","uid":1178156,"ip_address":"","ucode":"F6BD0AE11AE224","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/2c/9a0c45e6.jpg","comment_is_top":false,"comment_ctime":1574910457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574910457","product_id":100039001,"comment_content":"感觉充血模型适应于需求稳定清晰的，像我们有一些项目经常变更需求我倒认为贫血模型更适合。","like_count":0},{"had_liked":false,"id":156527,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574906387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574906387","product_id":100039001,"comment_content":"整个文章看完，其实对于DDD的理解还是不到位，如果在这边加上实际代码，相比较，更胜千言万语。","like_count":0},{"had_liked":false,"id":156515,"user_name":"Geek_8c1834","can_delete":false,"product_type":"c1","uid":1152381,"ip_address":"","ucode":"DC8650E15E9D58","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLDFpXOBPS26TqSmNjnxByBjDWJ5ZNKl47UgL61LfSNJZJB7VjxwOCXTmRS6nQibiaTWW7KG5yV17dQ/132","comment_is_top":false,"comment_ctime":1574904444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574904444","product_id":100039001,"comment_content":"第二个问题：DO必须与数据库表字段一一对应，VO适应于页面展示需求，BO也许有可能需要封装成有层次的对象结构，除非系统足够简单，否则不能合并VO,BO,DO","like_count":0},{"had_liked":false,"id":156459,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574888129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574888129","product_id":100039001,"comment_content":"我做的项目多是基于贫血模型的，主要的原因有下面几点：<br>1.数据相对稳定，业务逻辑时刻变化。两者的分离有助于隔离修改。<br>2.数据对应的代码少，但是对应的操作却很多。例如String对象，数据对应的代码大致就是存储一个字符数组，对应的操作有拼接，查找，替换等等。如果用面向对象的方法把数据和方法放到一个类里，这个类就会太大（老师能否提供一种解决这类问题的思路，多谢）。<br><br>读了今天的文章，我觉得两者整合起来会有一定的价值。一个类提供数据和核心方法，其他功能类提供扩展的方法。<br>","like_count":0},{"had_liked":false,"id":156444,"user_name":"sulatwx","can_delete":false,"product_type":"c1","uid":1348141,"ip_address":"","ucode":"366237F13DE8A7","user_header":"","comment_is_top":false,"comment_ctime":1574871965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574871965","product_id":100039001,"comment_content":"现在在做一个内部商城系统，学了这一讲，感觉尤其是结算部分可以采用充血模型的 DDD 开发模式开发。","like_count":0},{"had_liked":false,"id":156429,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1574869973,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574869973","product_id":100039001,"comment_content":"1.最近一直沉迷于DDD无法自拔，更多的还是关注DDD的设计思想，也就是战略设计。读完这篇也印证了自己的想法，不要为了DDD而DDD，原则是不变的，简单合适。<br>也刚刚经历了贫血以及使用DDD的两个个微服务设计以及落地，开始充血模型那个微服务的时候，真的很痛苦，完全不知道一个类，一个方法要放到哪里，纠结的时间远远大于写代码的时间。<br>现在回头总结来看，其实最根本的原因只是以前很少使用面向对象的思想来考虑如何设计、实现一个服务。<br>2.即使几个对象属性类似，也不能共用，分层最大的目的是隔离，降低耦合度，每个对象的职能也是不一样的，如果是为了代码复用，完全可以有其他的方式来实现。自己也经常纠结对象之间的转换，但是理解他背后的设计思想之后就会觉得是很自然合理的做法。难的是怎么跟团队的人说清楚，从思想上统一。","like_count":0},{"had_liked":false,"id":156421,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1574869361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574869361","product_id":100039001,"comment_content":"结合自己接触过的项目，和老师讲的，总结起来一句话：项目不够复杂，都是CRUD，充不了多少血。稍微复杂一些的设计，开发实施起来反而不适应了。","like_count":0},{"had_liked":false,"id":156420,"user_name":"　扬帆丶启航　","can_delete":false,"product_type":"c1","uid":1235282,"ip_address":"","ucode":"4079D0889CD86C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/52/73351eab.jpg","comment_is_top":false,"comment_ctime":1574869331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574869331","product_id":100039001,"comment_content":"只用过贫血模型。。vo,bo会随着业务或的变化发生改变，所以跟entity这三个不应该归并为一个类","like_count":0},{"had_liked":false,"id":156418,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1574869110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574869110","product_id":100039001,"comment_content":"以项目管理金三角来看，选择贫血模型可能是由于预算有限，雇不起高手，时间紧逼等因素导致的。<br>","like_count":0},{"had_liked":false,"id":156406,"user_name":"EOF","can_delete":false,"product_type":"c1","uid":1603575,"ip_address":"","ucode":"9DD2B2ABACBD2F","user_header":"https://static001.geekbang.org/account/avatar/00/18/77/f7/ebe38b96.jpg","comment_is_top":false,"comment_ctime":1574867302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574867302","product_id":100039001,"comment_content":"项目都是贫血模型，大多数业务比较简单","like_count":0},{"had_liked":false,"id":156391,"user_name":"新世界","can_delete":false,"product_type":"c1","uid":1079495,"ip_address":"","ucode":"4473DC1505F158","user_header":"https://static001.geekbang.org/account/avatar/00/10/78/c7/083a3a0b.jpg","comment_is_top":false,"comment_ctime":1574865964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574865964","product_id":100039001,"comment_content":"原来一直贫血","like_count":0},{"had_liked":false,"id":156381,"user_name":"技术小生","can_delete":false,"product_type":"c1","uid":1692743,"ip_address":"","ucode":"18B7751498029F","user_header":"https://static001.geekbang.org/account/avatar/00/19/d4/47/0deb44d6.jpg","comment_is_top":false,"comment_ctime":1574864049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574864049","product_id":100039001,"comment_content":"现在业务开发都是需求驱动，一两天完成功能，哪有时间仔细思考","like_count":0},{"had_liked":false,"id":156365,"user_name":"黎","can_delete":false,"product_type":"c1","uid":1127534,"ip_address":"","ucode":"B09EBFC0CEDC68","user_header":"https://static001.geekbang.org/account/avatar/00/11/34/6e/60a3a0e1.jpg","comment_is_top":false,"comment_ctime":1574862398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574862398","product_id":100039001,"comment_content":"这么一说ecs框架也是贫血模式，把逻辑和数据分开了。","like_count":0},{"had_liked":false,"id":156349,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1574860373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574860373","product_id":100039001,"comment_content":"一直基于贫血模型开发, 没用过 bo","like_count":0},{"had_liked":false,"id":156341,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1574859142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574859142","product_id":100039001,"comment_content":"哈哈。项目中根本没有用过充血模型。一直贫血而不自知","like_count":0},{"had_liked":false,"id":156333,"user_name":"白凤","can_delete":false,"product_type":"c1","uid":1644178,"ip_address":"","ucode":"9E39F18C808960","user_header":"https://static001.geekbang.org/account/avatar/00/19/16/92/6a7efb86.jpg","comment_is_top":false,"comment_ctime":1574857708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574857708","product_id":100039001,"comment_content":"C转Java开发，原来一直使用的是贫血模型开发，上手确实特别快，框架也很好理解，码起代码来飞快，开发流程跟老师讲的基本差不多，首先定义好各entity，然后划分业务的各个类就可以开工了，期待下一讲。<br>对于VO、BO、Entity来讲，我认为VO、BO更面向与业务，包含的数据结构要更宽泛一些，即一个VO或者BO可以包含多个Entity。平时开发的项目中会有南北向的概念，北向暴露接口给前端，有对应的数据模型，后台得到北向数据模型后处理数据（根据Entity存北向库，对应的业务流程处理），南向处理流程也差不台多，分开VO、BO、Entity可以更加清晰。<br>","like_count":0},{"had_liked":false,"id":156329,"user_name":"王杰","can_delete":false,"product_type":"c1","uid":1106506,"ip_address":"","ucode":"4E3B2A0F1C75F6","user_header":"https://static001.geekbang.org/account/avatar/00/10/e2/4a/3f07e217.jpg","comment_is_top":false,"comment_ctime":1574857371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574857371","product_id":100039001,"comment_content":"1. 目前做的项目都是贫血模型<br>2.目前的做法：Entity 是跟数据库字段一 一对应的， Bo主要做类的转换， Vo主要是作为一个对象返回给controller层对外的数据体。<br>","like_count":0},{"had_liked":false,"id":156316,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1574856152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574856152","product_id":100039001,"comment_content":"没做过web相关的 感觉好像没有遇到过贫血模型 根据自己的实际工作经验来看面向对象更好 更省事<br>我觉得可以合并到一个类 毕竟他们的继承关系比较单一就只是复用父类的数据 和对数据进行操作的方法<br>","like_count":0},{"had_liked":false,"id":156307,"user_name":"傲慢与偏执，","can_delete":false,"product_type":"c1","uid":1236496,"ip_address":"","ucode":"E9F81223DFAD24","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/10/9f15527d.jpg","comment_is_top":false,"comment_ctime":1574853533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574853533","product_id":100039001,"comment_content":"期待下一届ddd实战 了解domian","like_count":0},{"had_liked":false,"id":156296,"user_name":"乐观的鹏程","can_delete":false,"product_type":"c1","uid":1746026,"ip_address":"","ucode":"FA527FA2C4204B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJgXIicettSIeIDpL2zt39Zb0fdBwOlibdia5AjWITYQZCWPGDPdFKKe9UiahgROkAyoES7niaobZatvQA/132","comment_is_top":false,"comment_ctime":1574851981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574851981","product_id":100039001,"comment_content":"一直都是贫血","like_count":0},{"had_liked":false,"id":156288,"user_name":"deepz","can_delete":false,"product_type":"c1","uid":1570088,"ip_address":"","ucode":"4BD23A44CDB384","user_header":"https://static001.geekbang.org/account/avatar/00/17/f5/28/898a6947.jpg","comment_is_top":false,"comment_ctime":1574850084,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574850084","product_id":100039001,"comment_content":"我这项目没bo是啥情况？😅 我也不知道各种O的实际意义，只是知道他们对应不同层，用于“单一职责”吗？<br>期待周五的文章，公司代码确实被老师说中了，我也感觉相似的sql满天飞，稍微有点改动特别难受（前两天重构了） 感觉大佬要飙车了吗😬","like_count":0},{"had_liked":false,"id":156261,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1079657,"ip_address":"","ucode":"0335277F255F7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/69/5960a2af.jpg","comment_is_top":false,"comment_ctime":1574844714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574844714","product_id":100039001,"comment_content":"在我们公司Entity和Bo是一个,是合并起来的.","like_count":0},{"had_liked":false,"id":156243,"user_name":"木子00","can_delete":false,"product_type":"c1","uid":1314724,"ip_address":"","ucode":"8F78CA722EB29B","user_header":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","comment_is_top":false,"comment_ctime":1574841875,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574841875","product_id":100039001,"comment_content":"1. 我开发我的项目中都是贫血模型。没有用过充血模型。<br>2. 开发都是一个Entiry，很少用到BO，VO。<br><br>我们大多数都是CURD的。<br>想摆脱这样的开发。<br>期待下一节课。","like_count":0},{"had_liked":false,"id":156205,"user_name":"Jesse","can_delete":false,"product_type":"c1","uid":1368038,"ip_address":"","ucode":"727CA882B84DA0","user_header":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","comment_is_top":false,"comment_ctime":1574836258,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574836258","product_id":100039001,"comment_content":"问题一：<br>     我所参与的web项目都是基于贫血模型的，没有基于充血模型的经验，其实也是第一次听说这种思路。我觉得为什么项目大多是采用贫血模型呢，我想是因为web需求变化块，项目之处可能都无法预见后期需求的变化，在项目之初就不会投入很多成本在考虑了，而是以功能实现为驱动的。随着时间的推移，项目功能越来越多，五花八门的需求。导致项目越来越大，代码越来越冗余，维护起来成功越来越大，甚至相似的功能都可能无法复用原来的代码，功能相似的长sql满天飞。要应用充血模型，在开始应该对业务整个架构有一个很清晰的认识，并能把握业务未来的走向，我觉得应该是比较难做到的，我想这也是充血模型少见的原因吧。<br>问题二：我觉得不要合并为一个类，虽然我们的项目是基于贫血模型的，但是还是要做的数据要分层，我觉得可以抽取公共字段为基类。","like_count":0},{"had_liked":false,"id":156193,"user_name":"Lifelong Learning","can_delete":false,"product_type":"c1","uid":1173517,"ip_address":"","ucode":"3E39BED3E13FB4","user_header":"https://static001.geekbang.org/account/avatar/00/11/e8/0d/fcd95db8.jpg","comment_is_top":false,"comment_ctime":1574831075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574831075","product_id":100039001,"comment_content":"一直贫血中","like_count":0},{"had_liked":false,"id":156189,"user_name":"miracle","can_delete":false,"product_type":"c1","uid":1276137,"ip_address":"","ucode":"FD7074F1062AE9","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/e9/9d807269.jpg","comment_is_top":false,"comment_ctime":1574830590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574830590","product_id":100039001,"comment_content":"SOP 现在应该不太按 MVC 来分层了吧","like_count":0},{"had_liked":false,"id":156169,"user_name":"晨间新闻","can_delete":false,"product_type":"c1","uid":1161406,"ip_address":"","ucode":"6F7A55AAD52F16","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/be/2d77d643.jpg","comment_is_top":false,"comment_ctime":1574828051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574828051","product_id":100039001,"comment_content":"一个实体类，不区分vo，bo，entity，就导致只负责业务处理的字段，需要加Transient注解，经常定义一些getter方法，只是为了给前端展示翻译用","like_count":0},{"had_liked":false,"id":156168,"user_name":"陀螺","can_delete":false,"product_type":"c1","uid":1058808,"ip_address":"","ucode":"5016747DD39102","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/f8/1388139d.jpg","comment_is_top":false,"comment_ctime":1574827796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574827796","product_id":100039001,"comment_content":"贫血模式就像模板一样，在不需要了解业务场景前可以预先把主干开发出来。DDD则重业务，业务驱动代码OOP风格。<br>关于二问合并，简单写个例子，请指教。<br>@Getter<br>public class User {<br>    private Long id;<br>    private String name;<br>    private String cellphone;<br><br>    public User(Long id, String name, String cellphone){<br>        this.id = id;<br>        this.name = name;<br>        this.cellphone = cellphone;<br>    }<br><br>    public User toView(User user){<br>        this.id = user.id;<br>        this.name = user.name;<br>        this.cellphone = user.cellphone;<br>        return this;<br>    }<br>}","like_count":0},{"had_liked":false,"id":156159,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1574826352,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574826352","product_id":100039001,"comment_content":"C++码农，没做过web ，对MVC及变种不太熟悉，贫血模式在从数据库读数据时常用到。现状也满足需求，<br>没想好如何转成充血模式， 不是很理解 Domain模型","like_count":0},{"had_liked":false,"id":156142,"user_name":"塔兹米","can_delete":false,"product_type":"c1","uid":1425252,"ip_address":"","ucode":"1A58C81EF9B0A4","user_header":"https://static001.geekbang.org/account/avatar/00/15/bf/64/c9a0e913.jpg","comment_is_top":false,"comment_ctime":1574823822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574823822","product_id":100039001,"comment_content":"一直是贫血模式开发，entity、vo、bo 不能放在一个类中，用途不同。","like_count":0},{"had_liked":false,"id":156138,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1574823555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574823555","product_id":100039001,"comment_content":"参与过的项目都是都是基于贫血的mvc，还没接触过DDD，<br>第二个问题，理论上可以。不过有一些数据库操作的字段在controller层中并不需要体现（或者说不需要发回给前端,也不能返回给前端）。做好public与private的访问权限包含就可以了吧","like_count":0},{"had_liked":false,"id":156129,"user_name":"鱼向北游","can_delete":false,"product_type":"c1","uid":1439908,"ip_address":"","ucode":"580EC7DCE57E9A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IPdZZXuHVMibwfZWmm7NiawzeEFGsaRoWjhuN99iaoj5amcRkiaOePo6rH1KJ3jictmNlic4OibkF4I20vOGfwDqcBxfA/132","comment_is_top":false,"comment_ctime":1574822481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574822481","product_id":100039001,"comment_content":"1.作为一个传统的游戏程序员来说，恰好用的是充血模型，和传统mvc不一样，恰好没用spring这种web的开发模式，做法就是基于db层映射的一层entity，entity里也封装了一些数据操作的基本方法，剩下的业务都是基于这些基本方法的组合，不是面向sql编程。然后为什么说恰好，因为游戏发展大爆炸后，一些web程序员转行，一些游戏开发也用spring了。。。幸亏也不是做什么低延迟游戏，导致后来的开发框架五花八门<br>2.可以根据业务微调整，不建议一刀切的合并，毕竟vo和bo变动大，entity变动较小","like_count":0},{"had_liked":false,"id":156122,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1574821653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574821653","product_id":100039001,"comment_content":"1.所有项目都是贫血模型。除了我重构的模块，会参杂充血模型。因为是重构的,所以好处是省去多个服务方法中的重复代码（提炼公共函数也能做到,但充血模型语意更强一些）。而且充血模型内的方法逻辑可以通过mock简单测试,无任何依赖。<br><br>2.我的原则是不要。虽然重复定义相似数据类型是有开销的。但是各层操作各自的数据结构易于逻辑解耦。当出现变更时，易于拆解重组。测试时也易于分层定位问题。vo不能暴露数据库字段是一定要单独写一个的，但另外两个在简单场景很可能就是一摸一样，这种其实有些观点是直接操作do对象不创建bo对象的。但我还是坚持创建，哪怕我认为这个功能基本不会扩展或重组啥的。用严格的规范减少阅读时的负担。性能这东西，出问题再调优。","like_count":0},{"had_liked":false,"id":156113,"user_name":"FIGNT","can_delete":false,"product_type":"c1","uid":1540988,"ip_address":"","ucode":"D9DB185AE9E67C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","comment_is_top":false,"comment_ctime":1574820730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574820730","product_id":100039001,"comment_content":"1. 老项目都是基于MVC的贫血模式开发的单体架构，大部分的业务操作都是CRUD，所以开始没问题，但是经过几年后，系统越发难以维护。才想到用DDD来指导微服务，做重构。DDD不是适用所有的项目，简单的还是用MVC传统的模式，更快；DDD需要的前期成本更大，有很大的门槛。对于复杂系统，可以很好的才分业务<br>2. 各层的模型还是不能合为一个，但是其中相同的字段可以抽出来复用<br>这里不得不夸下老师，给我很大的惊喜，有意外收获。因为现在也再搞DDD、微服务。老师几句话把关键问题说明白了。学设计模式能扩展到DDD的充血模式是我万万没想到的，给老师点赞","like_count":0},{"had_liked":false,"id":156111,"user_name":"Geek_7f18eb","can_delete":false,"product_type":"c1","uid":1248270,"ip_address":"","ucode":"4A78D4583C73CA","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/0e/91af1b43.jpg","comment_is_top":false,"comment_ctime":1574820712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574820712","product_id":100039001,"comment_content":"2.不合并（BO和VO感觉有些地方可以只定义一个），运用继承和组合来增加代码的复用性，减少相同代码的冗余","like_count":0},{"had_liked":false,"id":156104,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1574819796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574819796","product_id":100039001,"comment_content":"课堂讨论 <br><br>question1: 你做经历的项目中，有哪些是基于贫血模型的传统的开发模式？有哪些是基于充血模型的 DDD 开发模式呢？请简单对比一下两者的优劣。<br><br>answer1:<br>我工作中还没有基于充血开发模式的项目,简单谈谈DDD解决了传统开发模式的&quot;痛点&quot;:<br><br>DDD通过定义业务领域模型的方式摊薄逻辑层,对于业务庞大的项目可以避免逻辑层臃肿的问题,提高项目维护性.<br><br>question2: 对于我们举的例子中，UserEntity、UserBo、UserVo 包含的字段都差不多，是否可以合并为一个类呢？<br><br>answer2:<br>我断然反对将Entity, BO, VO三者合并为一个类.<br>从AOP分层思想角度看,三者分别隶属于三个不同的Layer,而不同Layer之间是泾渭分明的,显然三个数据类不能混为一谈.<br><br>从开发效率的角度看,如果业务极简单,将三个数据类合并为一个类是有些许好处的,很明显好处就是节省开发时间.但这么做会导致维护成本高昂,业务依赖混乱,显然这是一个得不偿失的错误决定.","like_count":0},{"had_liked":false,"id":156099,"user_name":"青青子衿","can_delete":false,"product_type":"c1","uid":1438102,"ip_address":"","ucode":"4A388A3BA70C29","user_header":"https://static001.geekbang.org/account/avatar/00/15/f1/96/9571fa3d.jpg","comment_is_top":false,"comment_ctime":1574819258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574819258","product_id":100039001,"comment_content":"第二个问题，我觉得能不能合并要看业务的变化大小而定，如果后面BO、VO、entity都不发生变化，或者变化是一致的同步的，那就可以合并；反过来就不可以。","like_count":0},{"had_liked":false,"id":156093,"user_name":"eazonshaw","can_delete":false,"product_type":"c1","uid":1493784,"ip_address":"","ucode":"423952F7CEF475","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/18/4877c08b.jpg","comment_is_top":false,"comment_ctime":1574819007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574819007","product_id":100039001,"comment_content":"做java的话，其实是不是spring jpa更符合DDD的要求","like_count":0},{"had_liked":false,"id":156091,"user_name":"强哥","can_delete":false,"product_type":"c1","uid":1206726,"ip_address":"","ucode":"3B8DC780FE4EF9","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/c6/513df085.jpg","comment_is_top":false,"comment_ctime":1574818896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574818896","product_id":100039001,"comment_content":"无论是传统设计还是DDD，都应该分开，好处逻辑清晰，职责边界划分明确，提高后续的维护及扩展，当然所谓的成本无非是多了几个类而已……","like_count":0},{"had_liked":false,"id":156090,"user_name":"汤小高","can_delete":false,"product_type":"c1","uid":1555565,"ip_address":"","ucode":"D4AB7766273D52","user_header":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","comment_is_top":false,"comment_ctime":1574818864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574818864","product_id":100039001,"comment_content":"在目前我做过的项目中，entity，bo，vo都是合并在一个对象里，目前没发现有啥拓展性问题，可能是项目业务不够复杂吧","like_count":0},{"had_liked":false,"id":156089,"user_name":"稳","can_delete":false,"product_type":"c1","uid":1284626,"ip_address":"","ucode":"BF5723E63E4115","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/12/06863960.jpg","comment_is_top":false,"comment_ctime":1574818854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574818854","product_id":100039001,"comment_content":"1、没用过充血，get不到痛点<br>2、如果字段不变动的话，倒可以考虑；但是针对经常要加减字段的情况，就不太合适了","like_count":0},{"had_liked":false,"id":156083,"user_name":"逆流的鱼","can_delete":false,"product_type":"c1","uid":1258399,"ip_address":"","ucode":"AA3DDE44A83C40","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/9f/8dbd9558.jpg","comment_is_top":false,"comment_ctime":1574818164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574818164","product_id":100039001,"comment_content":"是不是有点mybatis贫血（国内？）、jpa（hibernate，国外？）充血模式的意思？","like_count":0},{"had_liked":false,"id":156081,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1574817883,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574817883","product_id":100039001,"comment_content":"我们一般都是一个实体类","like_count":0},{"had_liked":false,"id":156076,"user_name":"WIZ","can_delete":false,"product_type":"c1","uid":1260348,"ip_address":"","ucode":"313AF84674475C","user_header":"https://static001.geekbang.org/account/avatar/00/13/3b/3c/2947127c.jpg","comment_is_top":false,"comment_ctime":1574817322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574817322","product_id":100039001,"comment_content":"打卡<br>第一题，其实我感觉不止网页开发存在这种问题，只要是类似于三层这种多层结构甚至是普通的业务开发也存在这种情况，在.net做客户端的过程中，有时候我们会单独写一个只包含数据而不包含业务的类，只用于数据存取，操作全都放入业务里去处理，对于可以进行任何操作的数据来说，何种方式简单易用就用哪种方式，但是对于特殊的数据，比如银行系统的金额，各业务系统的创建时间等这种一旦创建即不能再修改的数据，这种封装特性，我觉得对于这个类来说，也是领域驱动的体现。","like_count":0},{"had_liked":false,"id":156061,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1574816335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574816335","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":156057,"user_name":"2018","can_delete":false,"product_type":"c1","uid":1107371,"ip_address":"","ucode":"4C2CD47AD70177","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/ab/6fab2492.jpg","comment_is_top":false,"comment_ctime":1574816132,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574816132","product_id":100039001,"comment_content":"完全使用的贫血模式，VO，BO，entity互转，也考虑过这样的代码太冗余，但是没有找到合适的解决办法，还有就是所做项目业务较简单，不需要那么复杂的业务设计，希望下一章节可以明确展示出DDD的好处","like_count":0},{"had_liked":false,"id":156056,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1574815972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574815972","product_id":100039001,"comment_content":"1. 目前所经历的项目中都是基于贫血模式的传统开发模式。时间一久了，写Controller，Service和Repository 这一套总是在重复，有时候感觉会有点烦人。但是目前来说没办法，该写还得写。<br>2. UserEntity、UserBo、UserVo 这些类存在重复字段，个人认为可以将公用的基础字段（稳定的，几乎不会变的）抽象到父类中。抽象层次也就两层，不存在继承层次太深的问题影响可读性问题。在各自层次上添加需要的特殊字段。","like_count":0},{"had_liked":false,"id":156046,"user_name":"大帅哥","can_delete":false,"product_type":"c1","uid":1333009,"ip_address":"","ucode":"4B5F9550663778","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIUXWqIBiadT4BYND0k3XwORqkW8j4q0GLyaXylG5ibfNnQaAQ26PQIvd4bp9uFrlp9QhV4YXpVfdzg/132","comment_is_top":false,"comment_ctime":1574815481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574815481","product_id":100039001,"comment_content":"第一题<br>php开发的web项目，数据都是存放在array中，业务逻辑在service中完成，这种也是也是贫血模型。把业务逻辑写在model类中，在service中只是调用model类和流程控制，这种算是充血模型。<br>区别:贫血模型写起来简单，不能复用。充血模型相对麻烦些，可以服复用部分逻辑。<br>第二题<br>业务简单直接合并会简单不少，复杂点的话还是拆开好些，问题是如何判定简单和复杂，只操作一张数据表就是简单……","like_count":0},{"had_liked":false,"id":156041,"user_name":"夏目","can_delete":false,"product_type":"c1","uid":1212750,"ip_address":"","ucode":"67C075A01CF4D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/4e/d71092f4.jpg","comment_is_top":false,"comment_ctime":1574815075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574815075","product_id":100039001,"comment_content":"我感觉我做的项目都是贫血模型🐶直到某一天我才突然发现为啥我的domain中为啥除了属性定义啥也没有，后来才慢慢把相关的操作放到domain中","like_count":0},{"had_liked":false,"id":156039,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1574815038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574815038","product_id":100039001,"comment_content":"候感觉复杂的查询还是喜欢SQL直接写，直接调用封装好的方法，可能再简单的时候操作很快很方便，还好很多框架都带这种方法","like_count":0},{"had_liked":false,"id":156036,"user_name":"风行者","can_delete":false,"product_type":"c1","uid":1541934,"ip_address":"","ucode":"F058640CF77A35","user_header":"https://static001.geekbang.org/account/avatar/00/17/87/2e/ea54c240.jpg","comment_is_top":false,"comment_ctime":1574814908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574814908","product_id":100039001,"comment_content":"全是贫血模型开发，三个类可以合并 一般可以用实体类中加临时变量代替其他的bo和vo","like_count":0},{"had_liked":false,"id":156035,"user_name":"罗洲","can_delete":false,"product_type":"c1","uid":1263417,"ip_address":"","ucode":"68133E38A25C17","user_header":"https://static001.geekbang.org/account/avatar/00/13/47/39/0ce1aa62.jpg","comment_is_top":false,"comment_ctime":1574814779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574814779","product_id":100039001,"comment_content":"思考题2：不能合并，因为他们的作用不一样，vo用于给展示层的数据，而bo是业务逻辑数据，可能包含多个实体数据（po）, 而entity是数据库表对应的实体，一一对应，他们的作用不同，也就意味着后续的修改情况不同，数据库表不改，entity就不会改，但是vo和po却有可能改。","like_count":0},{"had_liked":false,"id":156020,"user_name":"爱学习的杨酷暑","can_delete":false,"product_type":"c1","uid":1676216,"ip_address":"","ucode":"565865AAADCE7E","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/b8/3992768a.jpg","comment_is_top":false,"comment_ctime":1574813574,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574813574","product_id":100039001,"comment_content":"1.好像做过的项目都是贫血模型..，优点就是简单的业务开发比较快。<br>2.UserEntity、UserBo、UserVo如果比较简单，可能是从SQL查询后直接通过Controller返回了，那就使用同一个类（可能不太规范，但是比较省事）。如果比较复杂还是区分开来吧。","like_count":0},{"had_liked":false,"id":156002,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1574811698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574811698","product_id":100039001,"comment_content":"感觉可以跟下节课合在一起，这节课得到的结论就是贫血模型是面向过程，但大家已经习惯了，而充血模型在什么样的情况发挥优势，就得等下节课揭晓了","like_count":0},{"had_liked":false,"id":155997,"user_name":"Summer  空城","can_delete":false,"product_type":"c1","uid":1337146,"ip_address":"","ucode":"6BDBB70FB6F709","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","comment_is_top":false,"comment_ctime":1574809807,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574809807","product_id":100039001,"comment_content":"同一个项目，需求有简单，有复杂，简单的需求一般采用传统开发模式，复杂的需求需要使用DDD，但对于DDD如何建模，却总把握不到方向，期待老师讲解。","like_count":0},{"had_liked":false,"id":155977,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1574786666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574786666","product_id":100039001,"comment_content":"微服务拆分后，DB也拆分了，这样从复杂的DB操作，转换成编排其它服务的接口了，这是否DDD最近开始流行的原因？<br>我们现在还是用贫血模式。","like_count":0},{"had_liked":false,"id":155971,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1574785912,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1574785912","product_id":100039001,"comment_content":"我目前接触过的项目都是基于贫血模型。UserEntity, UseBo, UserVo ，在业务需求变化不大的项目可以适当调整，最好分开，避免耦合","like_count":0},{"had_liked":false,"id":156165,"user_name":"乐","can_delete":false,"product_type":"c1","uid":1049576,"ip_address":"","ucode":"4505CB6BD9C144","user_header":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","comment_is_top":false,"comment_ctime":1574827470,"is_pvip":false,"discussion_count":51,"race_medal":0,"score":"2217777952206","product_id":100039001,"comment_content":"## 为什么贫血模型盛行<br><br>下面几项自己都中过招（环境问题和个人问题）：<br><br>### 环境问题 ##<br><br>* 近朱者赤，近墨者黑<br>    * 大多数人都是模仿别人的代码，而别人的代码基本上都是 demo，没有复杂的业务逻辑，基本是贫血模型<br>    * 找不到好的指导与学习对象<br>* 接触不到复杂业务项目<br>    * 做 web 项目的，很大一部分就是简单的 CURD，贫血模型就能解决<br>* 公司以任务数来衡量个人价值<br><br>### 个人问题 ###<br><br>* 不考虑项目质量属性<br>    * 只关心当前业务，没有意识去思考后期该如何维护和响应业务变更<br>* 求快不求质<br>    * 个人以任务数来自我满足<br>    * 没有 60 分和 100 分的概念<br>    * 需求分析、设计、编码合为一体<br><br>## 如何理解充血模型<br><br>先推荐一本书：整洁架构设计<br><br>先说一下充血模型中各组件的角色：<br><br>* controller 主要服务于非业务功能，比如说数据验证<br>* service 服务于 use case，负责的是业务流程与对应规则<br>* Domain 服务于核心业务逻辑和核心业务数据<br>* rep 用于与外部交互数据<br><br>----<br><br>额外说一点，业务开发个人倾向于六边形架构，而非传统的三层架构。六边形架构更能体现当下 web 应用的场景<br><br>六边形项目结构（根据实际情况自行组织与定义）：<br><br>* InboundHandler 代替 controller<br>    * *WebController：处理 web 接口<br>    * *WeChatController：处理微信公众号接口<br>    * *AppController：处理 app 接口<br>    * *MqListener：处理 消息<br>    * *RpcController：处理子系统间的调用<br>* service 服务于 use case，负责的是业务流程与对应规则<br>    * CQPS + SRP：读写分离和单一原则将 use case 分散到不同的 service 中，避免一个巨大的 service 类（碰到过 8000 行的 service）<br>* Domain 服务于核心业务逻辑和核心业务数据<br>    * 最高层组件，不会依赖底层组件<br>    * 易测试<br>* outBoundhandle 代替 rep<br>    * MqProducer：发布消息<br>    * Cache：从缓存获取数据<br>    * sql：从数据库获取数据<br>    * Rpc：从子系统获取数据<br><br>----<br><br>各层之间的数据模型不要共用，主要是因为稳定性不同，各层数据模型的变更原因和变更速率是不同的，离 IO 设备越近的的稳定性越差，比如说 controller 层的 VO，rep 层的 entity。Domain 层是核心业务逻辑和核心业务数据，稳定性是最高的<br><br>----<br><br>几个不太容易理解的点（我刚开始碰到的时候很费解）：<br><br>* use case 和 核心业务逻辑该如何定义与区分<br>    * 哪些该放到 service 里面，哪些该放到 Domain 中<br>* rep 是依赖于 service 的，而不是 service 依赖 rep 层<br>    * 业务逻辑是最高层组件（最稳定的），rep 层是底层组件<br>* 接口能反转依赖关系<br><br>----<br><br>一剂良药：所有的中间层都是为了解耦","like_count":517,"discussions":[{"author":{"id":1125104,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/f0/41590e10.jpg","nickname":"Citizen Z","note":"","ucode":"9CA547640A8629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130651,"discussion_content":"你字多给你点赞","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1578761338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1072044,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5b/ac/abb7bfe3.jpg","nickname":"薯片","note":"","ucode":"FE757E1248EFF5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104306,"discussion_content":"有没有demo项目可以分享一下呢？show me the code","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1577423292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1230417,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c6/51/e39b5828.jpg","nickname":"刘鹏","note":"","ucode":"44F3D4DB3F5678","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381679,"discussion_content":"所有的中间层都是为了解耦👏🏽","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1625183900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1388931,"avatar":"https://static001.geekbang.org/account/avatar/00/15/31/83/2938c11c.jpg","nickname":"Joe阿牛","note":"","ucode":"3C4FEABBB6ACF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297503,"discussion_content":"这个理解不错。 补充一下， repo 接口是domain的outbound， domain依赖于repo接口，但不依赖于repo实现； repo实现依赖于repo接口；这就是接口实现了依赖倒转。 rpo接口的签名不允许使用任何domain之外的类.","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1596953181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165364,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","nickname":"海罗沃德","note":"","ucode":"8704F1D6980FA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":85610,"discussion_content":"離UI越近越不穩定這句話精髓了👍","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1576559667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1233982,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d4/3e/3ddc67e7.jpg","nickname":"黑暗骑士","note":"","ucode":"9FEF4105449ABC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1165364,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","nickname":"海罗沃德","note":"","ucode":"8704F1D6980FA0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294505,"discussion_content":"是IO，可别理解错了呀。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595908548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":85610,"ip_address":""},"score":294505,"extra":""}]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341074,"discussion_content":"各层之间的数据模型不要共用，主要是因为稳定性不同，各层数据模型的变更原因和变更速率是不同的，离 IO 设备越近的的稳定性越差，比如说 controller 层的 VO，rep 层的 entity。Domain 层是核心业务逻辑和核心业务数据，稳定性是最高的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610285340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1318078,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1c/be/fd1a9a3a.jpg","nickname":"天空、海阔","note":"","ucode":"9BCB64EF9A5894","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296772,"discussion_content":"这个理解很赞同。各层之间的数据模型不要共用，主要是因为稳定性不同，各层数据模型的变更原因和变更速率是不同的，离 IO 设备越近的的稳定性越差，比如说 controller 层的 VO，rep 层的 entity。Domain 层是核心业务逻辑和核心业务数据，稳定性是最高的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596641375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292847,"discussion_content":"demo，没有复杂的业务逻辑，基本是贫血模型  ----- 这个角度很好啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595346099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1932882,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIAEp2HUau1okDfoHgQ2Hlt3NOk16vlsSIZDCHuj9lUk4ekic5yqmJmiap0gsuR3VuM32qLIFiapYz1g/132","nickname":"Geek_leisile","note":"","ucode":"A778E717D51A77","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219416,"discussion_content":"mark","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585754320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254656,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","nickname":"88591","note":"","ucode":"04CE3E46455185","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202985,"discussion_content":"计算机领域的任何问题都可以通过添加一个间接的中间层来解决","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583979393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73625,"discussion_content":"请问rep怎么依赖service？ 通常都是seevice主动掉rep的方法进行数据交互，rep怎么可能会主动掉service的方法呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575562642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73751,"discussion_content":"依赖反转，通过接口层就可以了。这个不太好理解，a->b变成a->c,b->c","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575594029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73625,"ip_address":""},"score":73751,"extra":""},{"author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73754,"discussion_content":"不是主动调方法，是依赖方向发生了改变","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575594102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73625,"ip_address":""},"score":73754,"extra":""},{"author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76882,"discussion_content":"我理解只能在service里头声明依赖rep，然后通过DI注入 rep，别无它法啊 不太理解a->b, b->c是什么含义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575864089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73754,"ip_address":""},"score":76882,"extra":""}]},{"author":{"id":1075909,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6a/c5/d51c4961.jpg","nickname":"我是你的石头城","note":"","ucode":"7908568FAD09A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552932,"discussion_content":"充血模型实现起来诸多困难，只能大厂或者自己玩玩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645662725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543936,"avatar":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfCibibkl1x62jWnqPRhfwJOdribiaaNNBTAx9ejtjdzd0pX3VLfo5zGxav52zL3urhXOx316rFlazyUl5PknJa92ARg/132","nickname":"Geek_shuiyue","note":"","ucode":"5ED2F7C695DC0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551508,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645026879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330141,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/dd/41614582.jpg","nickname":"HomeyLiu","note":"","ucode":"EF4CCB92C369B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533925,"discussion_content":"[ rep 是依赖于 service 的，而不是 service 依赖 rep 层] 这个错了,你说的rep 就是ddd里面的防腐层,service依赖于rep的接口,不依赖具体实现,[ * Cache：从缓存获取数据\n    * sql：从数据库获取数据\n    * Rpc：从子系统获取数据] 实现接口, service里面组合一个借口,DI注入.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638024695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533060,"discussion_content":"可见功力之深，慢慢吸收学习！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637764428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2276155,"avatar":"https://static001.geekbang.org/account/avatar/00/22/bb/3b/6e020a32.jpg","nickname":"多学多看多记","note":"","ucode":"0670C833007510","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400615,"discussion_content":" 哪些该放到 service 里面，哪些该放到 Domain 中，原则上是domain的方法复用性更强，但是也不能保证设计缺陷，因此才有了重构的必要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633350858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1599327,"avatar":"https://static001.geekbang.org/account/avatar/00/18/67/5f/fc918fbf.jpg","nickname":"WhiteGiving","note":"","ucode":"94F35ABC45F1A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395042,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632198424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2429969,"avatar":"https://static001.geekbang.org/account/avatar/00/25/14/11/f1220081.jpg","nickname":"九尾","note":"","ucode":"3E6BDF7B9C78FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382570,"discussion_content":"又学到了一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625634752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128491,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","nickname":"星夜","note":"","ucode":"3B46C09D994CEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350163,"discussion_content":"深有体会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613729307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083927,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8a/17/2a823333.jpg","nickname":"stone","note":"","ucode":"FA29B152CE7D6F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344030,"discussion_content":"CQPS 是啥？还是CQRS？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611240708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2251640,"avatar":"","nickname":"Geek_06a688","note":"","ucode":"60EE93AAE48672","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322857,"discussion_content":"学习了，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604832073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1305639,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ec/27/827015c0.jpg","nickname":"追风少年","note":"","ucode":"0467648A908B18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321057,"discussion_content":"学习了，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604538312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323102,"avatar":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","nickname":"Younger Ku","note":"","ucode":"D157DC38BDB515","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304118,"discussion_content":"又是个高人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599473357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1346654,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8c/5e/eeaada1d.jpg","nickname":"王鹏飞","note":"","ucode":"1CC6DCCF449AFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298740,"discussion_content":"“rep 是依赖于 service 的，而不是 service 依赖 rep 层”\n请问这句话怎么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597391335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2284340,"avatar":"https://static001.geekbang.org/account/avatar/00/22/db/34/f6b7c5bb.jpg","nickname":"创始人）","note":"","ucode":"03C55CED49FEB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1346654,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8c/5e/eeaada1d.jpg","nickname":"王鹏飞","note":"","ucode":"1CC6DCCF449AFC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332482,"discussion_content":"依赖倒置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607236975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298740,"ip_address":""},"score":332482,"extra":""}]},{"author":{"id":1447569,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/WtHCCMoLJ2DvzqQwPYZyj2RlN7eibTLMHDMTSO4xIKjfKR1Eh9L98AMkkZY7FmegWyGLahRQJ5ibPzeeFtfpeSow/132","nickname":"脱缰的野马__","note":"","ucode":"D5F993E7232C61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281688,"discussion_content":"学习了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591793265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010705,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6c/11/a4b24b4a.jpg","nickname":"王宗阳","note":"","ucode":"9737AD5039154A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279265,"discussion_content":"《整洁架构设计》这本书没搜到，请问是《架构整洁之道》这本吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591318047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1122533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/20/e5/f66d6144.jpg","nickname":"九先生","note":"","ucode":"A63A333299D485","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1010705,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6c/11/a4b24b4a.jpg","nickname":"王宗阳","note":"","ucode":"9737AD5039154A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386252,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627482989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":279265,"ip_address":""},"score":386252,"extra":""}]},{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269956,"discussion_content":"牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589968382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250922,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIzGGthScz54sECZJKX3lgyjCATkgrvSt5N3eOsYB34jibCr3SkAX88QaZ5IVmME9Ec7VdkQGwRSPw/132","nickname":"哈哈哈","note":"","ucode":"8AC20A1C9C7DF8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247081,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587797251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074640,"avatar":"https://static001.geekbang.org/account/avatar/00/10/65/d0/c11d4a31.jpg","nickname":"滴水藏海","note":"","ucode":"9C1F9C91189F69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242077,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587463978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311947,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/xysT7OH4SrD4sv944ndDv5tnJOk5na37Gxd5owGWsE7ON7AVW0ibnYGNRoZd0ibLWhFVXLLjOB5QFxwjo0EGIkoQ/132","nickname":"雨下不停","note":"","ucode":"0893B9C249E48A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":233969,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586953438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110039,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/17/796a3d20.jpg","nickname":"言十年","note":"","ucode":"67B8B49C3A3B17","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215084,"discussion_content":"没有 60 分和 100 分的概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585282144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007670,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/60/36/1848c2b7.jpg","nickname":"dovefi","note":"","ucode":"9F8C59F095B187","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213391,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585066564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622209,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c0/c1/414d5d1b.jpg","nickname":"_yh葱","note":"","ucode":"FA899711E91113","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198833,"discussion_content":"mark。现在还不太懂，慢慢学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583516509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1338088,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/e8/4bb87c34.jpg","nickname":"月马穿关","note":"","ucode":"2CE20CA1EB827D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167143,"discussion_content":"乐 感谢你的分享 请问你有blog之类的吗？想继续看你的分享😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581466779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731602,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6c/12/67bcce50.jpg","nickname":"我太难了","note":"","ucode":"B80133799A4494","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102200,"discussion_content":"不明觉厉，慢慢吸收学习！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577330538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72997,"discussion_content":"神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575548046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001970,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/f2/25cfa472.jpg","nickname":"寒溪","note":"","ucode":"67B9F1A1C15A20","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70206,"discussion_content":"Master","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575336415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1088710,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","nickname":"苗","note":"","ucode":"5ECCC6C855E541","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65417,"discussion_content":"总结的很好，六边形架构我第一次是在《微服务设计模式》中看到的；但没有实际验证使用过；希望能以后有机会交流；能加个微信吗18310745818？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575001656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1088710,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","nickname":"苗","note":"","ucode":"5ECCC6C855E541","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65757,"discussion_content":"加你了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575027012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65417,"ip_address":""},"score":65757,"extra":""}]},{"author":{"id":1255437,"avatar":"https://static001.geekbang.org/account/avatar/00/13/28/0d/558f6141.jpg","nickname":"你净瞎说～","note":"","ucode":"A4EE0154034D22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63460,"discussion_content":"才8000行的service有必要拿出来说嘛😏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574871229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63384,"discussion_content":"先点赞。\n但不太同意：controller 主要服务于非业务功能，比如说数据验证。\n我认为数据验证应该放在service层或domain层，domain层如果能直接原来做单元测试就牛逼了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574870137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":63758,"discussion_content":"个人认为数据验证分两种，与业务无关和业务有关，无关的放到controller，有关的放到对应的domain，主要是将功能点分离，具体实践还是看各公司的规范","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1574907695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":63384,"ip_address":""},"score":63758,"extra":""},{"author":{"id":1268264,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","nickname":"GEEKBANG_6638780","note":"","ucode":"952194E56FD8C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1049576,"avatar":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","nickname":"乐","note":"","ucode":"4505CB6BD9C144","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382761,"discussion_content":"这点我保留，说下我的观点。参见周志明老师的架构课程（极客时间的免费公开课）。 有个章节是针对valid的验证。 所有的验证（业务非业务）都集中在某个Model上。一是为了复用，二是为了内聚（符合充血思想）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625714635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":63758,"ip_address":""},"score":382761,"extra":""}]}]},{"had_liked":false,"id":156114,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1574820808,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"1096791481288","product_id":100039001,"comment_content":"我个人认为，充血模型在web开发领域不流行的一个根本原因，在于互联网兴起后各种层出不穷的需求变动，以及短命的项目生存周期，充血模型应对复杂业务确实很有优势，但是这是建立在复杂业务本身其实相对稳定上，比如银行的业务，虽然复杂，但是其实很稳定。但是要是换在互联网，今天改需求明天改需求，甚至很多时候根本就是推倒了重来的需求，充血模型面对这种状态，根本是力不从心的","like_count":256,"discussions":[{"author":{"id":1042354,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e7/b2/334bc992.jpg","nickname":"AlfredLover","note":"","ucode":"A3A998F362CC37","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219826,"discussion_content":"是思维固化了，如果ddd用熟练了，其实都差不多的。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1585814018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1903190,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0a/56/eee89103.jpg","nickname":"罗ྂ杰ྂ","note":"","ucode":"3277C09D7D38C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203151,"discussion_content":"我们公司的系统，我已经认为做的非常庞大了。现在看了文章后，尽然发现是属于贫血模式，数据和操作完全分离，几乎都是crud的前端到后端的流程，也不能完全说贫血模式不好，我们公司研发人员500多，如果都是ddd，这么多开发人员 ，做出来的系统，搞不好，真的会弄成四不像了","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1584005478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2277321,"avatar":"https://static001.geekbang.org/account/avatar/00/22/bf/c9/7f23f3ec.jpg","nickname":"momo","note":"","ucode":"00DB6D76B7B25A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344266,"discussion_content":"这条留言争哥应该回复一下的，我也很想知道答案。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1611375360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298991,"discussion_content":"贫血模型简单，对人员要求低，可控。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1597500756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100751,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/cf/417a5ec2.jpg","nickname":"黑豹","note":"","ucode":"B9F94D0AFA89DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397064,"discussion_content":"我们国家的短板，复杂工业软件设计，就是DDD的常用之地。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1632554609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013283,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","nickname":"空知","note":"","ucode":"C448E98238DD36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78250,"discussion_content":"做政府的项目,需求一天变N回,面向需求开发,DDD用不起来啊!","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1575985643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1013283,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","nickname":"空知","note":"","ucode":"C448E98238DD36","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282359,"discussion_content":"理论上，DDD不是在适应需求变更上表现得更好吗","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1591951320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":78250,"ip_address":""},"score":282359,"extra":""},{"author":{"id":1449071,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqG3dBQs7fghrraQuXztdTJjmVYicGoic85W33U9ekSL6mpKvXOANI4N7duq5rXZXc2u7GVSFXERe6A/132","nickname":"Geek_717f1d","note":"","ucode":"741C242B0BBD6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1013283,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","nickname":"空知","note":"","ucode":"C448E98238DD36","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299257,"discussion_content":"分离关注点没做好吧？ 一般来说模型是相对稳定的， DDD的关键就是提炼模型。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1597631781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":78250,"ip_address":""},"score":299257,"extra":""}]},{"author":{"id":1193468,"avatar":"https://static001.geekbang.org/account/avatar/00/12/35/fc/6d3e0035.jpg","nickname":"saber","note":"","ucode":"D02F8D129DB41C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106478,"discussion_content":"老师在文中说的 DDD 领域驱动设计，我的理解是在 Domain 类中进行需求的封装，也就是可以有多个驱动类，比如 xxDomain 类，然后 Service 根据不同的需求调用不同的驱动类来实现一些需求，所以这对于变动的需求也是可以适用的，不知道我的理解对不对，我不是做 Web 项目，所以不知道每步开发中的具体细节，如果理解不对，请大佬指教","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577537779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63862,"discussion_content":"如果充血模型应对不来需求变更 ddd为何流行呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574917092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1046302,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","nickname":"有铭","note":"","ucode":"2C7CB36CA5C04C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64148,"discussion_content":"ddd流行？我不觉得，你只要下基层看看那些数量更多的中小企业，看看他们的实践，你就不会得出ddd在国内流行的看法，所谓ddd流行也只是在比较规范的大企业，而这些企业的需求变更本身就是比较规范的","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1574939254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":63862,"ip_address":""},"score":64148,"extra":""},{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1046302,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","nickname":"有铭","note":"","ucode":"2C7CB36CA5C04C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66447,"discussion_content":"这个观点我很认可，按你所说，一些大公司已经开始尝试实践ddd，在某些领域反响也不错，已经开始对外输出自己对ddd的设计与思考，那就说明ddd不是毫无用处的吧。至于为什么中小型公司实践ddd的比较少的问题，我觉得正好是我想说的答案:成本！\n实现充血模型需要一定的对象设计能力以及预留一些可以扩展的点。那么这些在大公司不是事，假设大公司的研发经理设计不来，有架构师，架构师再不行，可以请行业高手来传授经验。这些在中小型公司都是不愿意承担的成本，技术人员水平层次不齐，你要求他按充血模型开发，最后交付的代码指不定是什么样的，最后很可能变成四不像，这样四不像的代码一直传承下去，很可能项目还没面世就凉了。而贫血模型，相对于更容易理解，即便是水平一般的程序员多花点时间去阅读代码也能明白代码逻辑和流程，上手门槛相对低一些，那么成本低下来了，按照这样的模式开发，大家都能看得懂，照葫芦画瓢都能实现功能。小公司还有一特点，时间紧需求多流程不完善，可能人员变动还大，如果这样去玩ddd，进来一新人培训半天，听不懂，玩不来，走了，你愿意买单吗？并且就你两段内容的最后一句话，更是觉得离谱，按你所说ddd只在比较规范的大公司流行，并且充血模型面对需求变更，力不从心，而ddd是基于充血模型的设计，那么你认为大公司是钱多了烧的慌，给自己挖坑跳吗？","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1575071180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":64148,"ip_address":""},"score":66447,"extra":""},{"author":{"id":1289396,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBXvJE7mmpvlrz87ZepheLb2T4LZlRDPibw5cAzE6ia3vIfDSfb50PDDXlgPImTic4BJcfibp3QPJVYBQ/132","nickname":"Leo","note":"","ucode":"EDD152327BF6A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76824,"discussion_content":"ddd的确不太流行，几乎找不到好的实践案例","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575857025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":63862,"ip_address":""},"score":76824,"extra":""}]},{"author":{"id":1737886,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/84/9e/d4c0e2c4.jpg","nickname":"Broadm","note":"","ucode":"BEA06300731AE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574937,"discussion_content":"频繁修改需求的本质原因是没有找到业务核心,到底要解决什么问题,把核心问题找出来,业务模型变动的不会大,DDD就是要让我们在业务上花时间,理清楚我们的业务逻辑,什么是核心业务,什么是支持业务,什么是通用业务, 核心业务就需要我们花费更多的时间打磨业务模型,核心业务比较适合使用充血模型,因为它封装了变化点,把业务逻辑集中到一个模型, 其他地方只要调用即可, 避免出现,业务逻辑满天飞的问题,需求变了要改N个地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654481854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2046685,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/3a/dd/e44bacb8.jpg","nickname":"Ray","note":"","ucode":"37E86CE67F004B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393717,"discussion_content":"你觉得力不从心是因为没设计好domain，应对不了变更","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631579123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156014,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1574812793,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"736014220409","product_id":100039001,"comment_content":"一直贫血而不自知","like_count":172},{"had_liked":false,"id":156058,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1574816213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"362352069077","product_id":100039001,"comment_content":"设计模式_10<br># 问题: <br>- 1. 做的Android项目更多，Android开发也是经历了MVC==&gt;MVP(依然是一种MVC架构)==&gt;MVVM的模式演进。类MVC模式比较多，在UI相关的开发中，只用过贫血模式(之前也尝试过使用充血模式，但考虑到不一致带来的成本就放弃了)；在UI无关的复杂服务类开发中，也用过充血模型(虽然我不知道它叫充血模型)。我认为贫血模型的优点是更容易看懂，充血模型的优点是更能应对复杂业务。<br>- 2. 我认为还是不要放在同一个类中，原因是：成本大于收益。成本：一个复杂的类，在被不同的模块调用时充当着不同的角色，甚至，不同的模块调用不同的字段，需要大篇幅的文档来描述这些差异。稍有修改，复杂度的增加非线性。优点：代码重用。<br><br># 感想:<br>软件开发处理的是工程学问题，解决方案依赖场景，一个新技术的火爆一定是解决了当前主流场景的痛点问题，随着规模和复杂度的变化，场景也随之变化；争论贫血模式更好还是充血模式更好，争论哪个开发语言更好，这样的问题都是伪命题，我们更应该投入精力的是为当前场景选择最合适的解决方案。","like_count":84},{"had_liked":false,"id":236213,"user_name":"倡印","can_delete":false,"product_type":"c1","uid":1455958,"ip_address":"","ucode":"4F53AA5D017D89","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","comment_is_top":false,"comment_ctime":1595346170,"is_pvip":false,"replies":[{"id":"87403","content":"你这是贫嘴，不是贫血","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1595465278,"ip_address":"","comment_id":236213,"utype":1}],"discussion_count":3,"race_medal":0,"score":"207753776378","product_id":100039001,"comment_content":"小时候妈妈说我贫血 ，长大了才知道我真的贫血","like_count":49,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501987,"discussion_content":"你这是贫嘴，不是贫血","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595465278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2671691,"avatar":"https://static001.geekbang.org/account/avatar/00/28/c4/4b/bf30a25e.jpg","nickname":"Honey,","note":"","ucode":"00AB03C755AD79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390681,"discussion_content":"没忍住~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629969671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336029,"discussion_content":"哈哈哈, 你这个话风.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608458723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156128,"user_name":"lmdcx","can_delete":false,"product_type":"c1","uid":1334409,"ip_address":"","ucode":"F2CDD0091ADFD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","comment_is_top":false,"comment_ctime":1574822478,"is_pvip":false,"replies":[{"id":"59985","content":"哈哈，多谢认可，我写这篇文字的时候，还害怕搞DDD的人会来骂我，看来是我多虑了。隔壁的DDD课程可以去学下，管它是不是我写的，看看他咋“吹”的也好。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574838339,"ip_address":"","comment_id":156128,"utype":1}],"discussion_count":8,"race_medal":0,"score":"194848350798","product_id":100039001,"comment_content":"看到「领域驱动设计有点儿类似敏捷开发、SOA、PAAS 等概念，听起来很高大上，但实际上只值“五分钱”。」时，不知道引起了多少人的共鸣，O(∩_∩)O~。  做技术的本身就经常会遇到沟通问题，一些人还总喜欢“造概念”，唯恐别人听懂了，争哥这句话无疑说中了我们的心坎儿。  <br>当然我这里也不是说 DDD 不好（看后面的争哥也没这个意思），但是每个理论都有自己的局限性和适用性，看很多文章在讲一些理论时，总是恨不得把自己的理论（其实也算不得自己的）吹成银弹，态度上就让人很难接受。  <br>我还是喜欢争哥的风格，逻辑很清晰，也很严谨，很务实。  <br><br>关于老师的问题。  <br>说句实话，我们就没有写过充血模型的代码。  <br>我们会把 UserEntity、UserBo 混着用， UserBo 和 UserVo 之间转换时有时还会用 BeanUtils 之类的工具 copy 。  <br>对于复杂的逻辑，我们就用复杂 SQL 或者 Service 中的代码解决。  <br><br>不过我在翻一些框架时，比如 Java 的并发包时不可避免的需要梳理 Lock、Condition、Synchronizer 之间的关系。比如看 Spring IOC 时，也会需要梳理围绕着 Context 、 Factory 展开的很多类之间的关系。  <br>就好像你要“混某个圈子”时，就不可避免的“拜码头”，认识一堆“七大姑八大姨”，然后你才能理解整个“圈子”里的关系和运转逻辑。  <br>我也经常会有疑问， DDD 和面向对象究竟是什么关系，也会猜想：是不是面向对象主要关注“圈子”内的问题，而 DDD 主要关注“圈子”之间的问题？有没有高手可以回答一下。  <br>（其实我最近一直都想订隔壁DDD的课，但是考虑到精力的问题，以及担心学不会，主要不是争哥讲O(∩_∩)O~，所以没下手）","like_count":45,"discussions":[{"author":{"id":1005282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/56/e2/2dcab30d.jpg","nickname":"郑印","note":"","ucode":"181B0FDE5E1532","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359535,"discussion_content":"适配器模式雪中送炭、门面模式锦上添花。 一个是必须做，一个是为了做的更好。","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1616222000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2303811,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zVeLpCbKVG7Wzg7QuK099dvEzRLOf8wibx5AgwUZNDBFqHAujX9jfricn6giakONamIPFPuxQCemyH384nm64O5BA/132","nickname":"Geek_1cf9a9","note":"","ucode":"A919E0D130B928","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367790,"discussion_content":"说话好听的人请多说话","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1618470712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2276155,"avatar":"https://static001.geekbang.org/account/avatar/00/22/bb/3b/6e020a32.jpg","nickname":"多学多看多记","note":"","ucode":"0670C833007510","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541270,"discussion_content":"门面模式的更多应用就是做bff，接口的聚合与编排","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640313278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2628119,"avatar":"https://static001.geekbang.org/account/avatar/00/28/1a/17/9e925f61.jpg","nickname":"雾都","note":"","ucode":"198CDE0F864C77","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537535,"discussion_content":"来自2021年最后一个月的点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639099480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2826368,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/20/80/9dfc7a42.jpg","nickname":"乌托邦的托","note":"","ucode":"2832BD58762D9F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414463,"discussion_content":"总结到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636775838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343207,"discussion_content":"非常到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610967416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264296,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/a8/b7e36dd2.jpg","nickname":"cw","note":"","ucode":"82A6B50462F9F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340531,"discussion_content":"非常到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610030171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330202,"discussion_content":"到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606542547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1739739,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8b/db/da0539fa.jpg","nickname":"Barry","note":"","ucode":"99711D97B4E30C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324400,"discussion_content":"精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605099364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1222211,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a6/43/cb6ab349.jpg","nickname":"Spring","note":"","ucode":"8175463FB4705B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311246,"discussion_content":"精辟！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602289830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1394822,"avatar":"https://static001.geekbang.org/account/avatar/00/15/48/86/54c68afe.jpg","nickname":"铁男神sama","note":"","ucode":"0A3E3E61D36EDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311078,"discussion_content":"精炼！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602213098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1495977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/d3/a9/36e59707.jpg","nickname":"行道有德","note":"","ucode":"92B2A5A6E8E7C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306096,"discussion_content":"点睛之笔","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600168368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1243331,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f8/c3/1d557354.jpg","nickname":"o my love","note":"","ucode":"307601ACAC5DCC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292928,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595386269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205050,"discussion_content":"流批，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584255440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203571,"discussion_content":"一语道破","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584057741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155985,"user_name":"╭(╯ε╰)╮","can_delete":false,"product_type":"c1","uid":1440349,"ip_address":"","ucode":"4CB5FAEEE8CC5D","user_header":"https://static001.geekbang.org/account/avatar/00/15/fa/5d/735fdc76.jpg","comment_is_top":false,"comment_ctime":1574788666,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"156193611322","product_id":100039001,"comment_content":"个人感觉业务被贫血模型绑架的另一个原因是以前缓存nosql这些技术不不成熟 刚毕业那会哪有什么redis，机器的内存也不多。都是公司堆在角落的旧机器。一些业务如果在domain里实现可能会hold住数据库中的大部分数据。所以业务上都需要翻译成sql的where和join来减少网络和内存的开销。功能都被sql抢了去，想充血也充不起来。现在随便开个项目不带个redis老板都会质疑一下。mysql的访问也都是能少就少，不行再多加几台云服务器。老板也显得更有面儿。","like_count":36,"discussions":[{"author":{"id":1209852,"avatar":"https://static001.geekbang.org/account/avatar/00/12/75/fc/797fe290.jpg","nickname":"FafaSaigai","note":"","ucode":"325EF70B500B4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268425,"discussion_content":"我觉得门面模式也不一定是事前行为吧。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589773677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1018370,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","nickname":"Frank","note":"","ucode":"7A488CC6FE15E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1209852,"avatar":"https://static001.geekbang.org/account/avatar/00/12/75/fc/797fe290.jpg","nickname":"FafaSaigai","note":"","ucode":"325EF70B500B4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269585,"discussion_content":"可能有其他方面的，欢迎补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589931147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":268425,"ip_address":""},"score":269585,"extra":""}]},{"author":{"id":2142423,"avatar":"","nickname":"Geek_7e0e83","note":"","ucode":"554DEE2AAAE33C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573867,"discussion_content":"作者说的第二点 感同身受，接口的复用性 感觉影响很大。这一块考量好了，代码量会少很多。不会开发太多无效的重复的接口。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653702584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156052,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1574815692,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"117538932684","product_id":100039001,"comment_content":"基本上经历过的web项目都是基于贫血模型开发模式的，entity，bo，vo不能放在一个类里，每个对象的应用场景不同，entity是映射数据库字段的，bo，vo适合业务和展示相关的，而且entity相对来讲变化不多，bo，vo可能会频繁变化，所以不适合放在同一个类里","like_count":27,"discussions":[{"author":{"id":1127783,"avatar":"https://static001.geekbang.org/account/avatar/00/11/35/67/7598e7f8.jpg","nickname":"毅","note":"","ucode":"927F29D970657D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381115,"discussion_content":"吐槽一下：一个app页面初始化需要调用10个接口才能拿到全部数据，接口之间还有数据依赖关系。后端开发改不改完全看心情，业务全堆前端，一点追求都没有。后端早早下班，前端天天加班，真恶心。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1624895681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","nickname":"QQ怪","note":"","ucode":"1A39B8433D9208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214615,"discussion_content":"精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585216311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158452,"user_name":"Ant","can_delete":false,"product_type":"c1","uid":1079563,"ip_address":"","ucode":"07E6374F91F61E","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/0b/4346a253.jpg","comment_is_top":false,"comment_ctime":1575375388,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"83179754012","product_id":100039001,"comment_content":"有哪些同学像我一样，是个移动端开发，也在学设计模式","like_count":19,"discussions":[{"author":{"id":1517590,"avatar":"https://static001.geekbang.org/account/avatar/00/17/28/16/ca72addc.jpg","nickname":"Senior6623","note":"","ucode":"D8ADAE5D037FC4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307118,"discussion_content":"人家是烂熟于心，我是真的忘了","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1600501604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1744257,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","nickname":"千锤百炼领悟之极限","note":"","ucode":"224B5CF2101716","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408519,"discussion_content":"草木竹石皆可为剑，自此精修，渐入无码胜有码之境。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635259935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2096683,"avatar":"","nickname":"Geek_151295","note":"","ucode":"970A611ECFB457","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575009,"discussion_content":"无招胜有招，得意而忘形。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654520674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1075334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/68/86/348be7f8.jpg","nickname":"Lingo","note":"","ucode":"82ECA2E0533B78","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414906,"discussion_content":"全忘了，跟从来都没有记住过，是两码事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636936753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248730,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0d/da/906dce6a.jpg","nickname":"sudo","note":"","ucode":"1936F782F914D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398638,"discussion_content":"秀儿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632824235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2630424,"avatar":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","nickname":"易飞","note":"","ucode":"32AC28754237F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394557,"discussion_content":"全学废了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631936859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156137,"user_name":"Lrwin","can_delete":false,"product_type":"c1","uid":1180503,"ip_address":"","ucode":"5E394E36419C56","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/57/31595f22.jpg","comment_is_top":false,"comment_ctime":1574823368,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"65999332808","product_id":100039001,"comment_content":"我觉得代码架构和业务架构一样，只要将关注点分离就可以。<br>简单的系统，困难的不在于领域的拆分，而在于时间成本的控制。从软件工程角度考虑，时间，成本，范围三角理论可以进行分析、。<br>我们所说的复杂系统，更看重业务的复杂度，将复杂度降低的方法则是分而治之。这样可以降低复杂度。<br>复杂要解决三个问题：规模问题，结构问题和需求变化问题。无论是技术复杂度或业务复杂度，只要能解决这三种复杂度问题就是好的方法。<br>DDD模型其实无异，都是将Model层做重。因为业务核心是技术无关的。传统MVC用于C&#47;S模型，也依然是重Model层的。我觉得软件设计的方法没有变化，只是大家看到的视角不同罢了。<br>软件架构有两个含义：1.参与的元素有哪些 2.元素间的关系是什么。 从抽象角度来看，非常简单。","like_count":15,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494679,"discussion_content":"你说的没错。但是，如果我用门面包装一个接口，使用分布式事务框架解决事务问题，其他多个业务就只用调用这个接口就好了，不用自己实现分布式事务问题。相当于复用了解决事务问题的代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589525544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278279,"discussion_content":"这种门面接口在多租户系统里挺常见的，比如初始化一个租户其实是分很多步骤的，创建租户，创建租户的各种配置，创建租户下的用户，完毕后给租户管理员推送已经完毕的信息（邮件，短信等），有时候为了易用性和交易一致性，就是要把这些步骤封装在一个接口里（其实每一步都有一个接口）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591167893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156514,"user_name":"Lonely绿豆蛙","can_delete":false,"product_type":"c1","uid":1044785,"ip_address":"","ucode":"0862179B614974","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f1/31/5001390b.jpg","comment_is_top":false,"comment_ctime":1574904396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61704446540","product_id":100039001,"comment_content":"最近边看边重构自己的项目，感觉真的是从码农视角转到了架构师层次~","like_count":14},{"had_liked":false,"id":156440,"user_name":"深度•仁","can_delete":false,"product_type":"c1","uid":1275854,"ip_address":"","ucode":"2A0759956F0683","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/ce/1f21d480.jpg","comment_is_top":false,"comment_ctime":1574871803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61704413947","product_id":100039001,"comment_content":"一拍大腿，靠，说到心坎里去了，各种细碎的sql，就为了解决某个小功能！ 业务熟悉，领域驱动设计就是屠龙刀，业务不熟悉，DDD也就值个半毛钱！茶不思，饭不想，期待后面的文章更新","like_count":14},{"had_liked":false,"id":156149,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1574824869,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"61704367013","product_id":100039001,"comment_content":"有本书叫ddd 原则，模式与实践可以翻阅一下<br>首先要明白一点ddd适用范围，多数业务就是CRUD就可以搞定，理解起来也没有困难，为啥不继续用贫血模型。<br>充血模型就像老师说的需要精心设计，以应对变化，如果没有一个复杂的业务场景就根本用不到，或者说用起来很难受是一个似是而非的东西。<br>况且充血模型只建议用在核心域，还有通用域和支撑域呢，不要一上来就ddd","like_count":14,"discussions":[{"author":{"id":2029485,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f7/ad/4fd4d867.jpg","nickname":"数学汤家凤","note":"","ucode":"DE84E777C384AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549167,"discussion_content":"就是简单封装","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643661718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293499,"discussion_content":"一言蔽之，通过封装实现，相当于将接口A、B的逻辑封装到门面接口C中。注意，这里的接口不是Java层面的接口类，而是业务层面的服务接口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595559721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155982,"user_name":"lizi","can_delete":false,"product_type":"c1","uid":1617799,"ip_address":"","ucode":"18FA399A9C5CB4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIAicKBNWU0IoqHEyWSI8OOtTLJhQ1K0dXbOmYEvmgNGdRplheIqibTDjUy3yNPO5PvELiazMTmmibNSw/132","comment_is_top":false,"comment_ctime":1574787310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61704329454","product_id":100039001,"comment_content":"沙发，不睡觉，听课。哈哈，加班好累，","like_count":14},{"had_liked":false,"id":155994,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1574806886,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44524479846","product_id":100039001,"comment_content":"第一个还没有太多的感受，还需要时间来练习感受<br>第二个是否合成一个各有优劣，可能还是和写代码人的功底有关：<br>拆分开的优势：各层的防腐隔离，当前层的变化不影响其他层。<br>拆分开的劣势：来一个迭代需求，比如需要加一下邮箱等，   rd很有可能在三个类里各加一个字段，从上改到下，完全看不出隔离的优势，就看不到了一层层的类转换<br>反过来就是不拆分的优劣<br>","like_count":10,"discussions":[{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559920,"discussion_content":"那能不能做一个父级实体类，包含通用字段，例如创建时间戳等  0.0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649060648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156452,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1574876871,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40229582535","product_id":100039001,"comment_content":"1.一直贫血模型，却没有发现。<br>2.充血模型我有点没看懂，我粗糙的理解成把贫血模型的service里面的复杂业务逻辑都搬到了domain，然后service简单调用domain即可。那domain里不也是业务逻辑+bo.吗？还有复杂的sql无法复用问题，我一般写业务都是单表。然后放到service层调用多个dao去组装最终的数据出来。这样可以解决乱七八糟的sqlz吗？希望争哥解答下。<br>3.第二道问题，我觉得不能合并，因为首先entity是对应的数据表字段，其次bo可能被多个业务方法所使用，返回的字段可能不同，这就需要vo来限制具体每个接口需要哪些字段来响应给客户端。","like_count":9,"discussions":[{"author":{"id":1800243,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/78/33/4a91bf3d.jpg","nickname":"吴里斯蒂亚诺.翀纳尔多","note":"","ucode":"8DB9EC2AC456E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372185,"discussion_content":"门面模式是同一个数据源的情况下，获取不同表的数据，才需要门面模式包装，你说的是调用不同数据源的情况，没法门面的，加一层门面包装反而会多了一次网络调用，没有必要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620220839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1439355,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","nickname":"否极泰来","note":"","ucode":"C249173266251A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360279,"discussion_content":"服务端，会跟你说，多个接口合并在一起，耦合性太高了，并且不合并接口你们前端又能并发调用，速度更快","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616408185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590793,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/09/c61257f6.jpg","nickname":"Song╮承諾","note":"","ucode":"50FDBFE5BDDD12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342112,"discussion_content":"调用多个修改数据的接口（回传给后端的数据）才要封装一个门面接口，调用多个渲染数据的接口（从后端读取数据）不算吧，异步加载数据啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610595424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156263,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1574844935,"is_pvip":false,"replies":[{"id":"60012","content":"下一节课有的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574847872,"ip_address":"","comment_id":156263,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40229550599","product_id":100039001,"comment_content":"能否用代码表达一下充血模型，其实还是不太理解","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476052,"discussion_content":"下一节课有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574847872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156174,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1574828714,"is_pvip":false,"replies":[{"id":"59970","content":"1. 充血模型并不是哪都适用<br>2. 赞成你的看法","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574833816,"ip_address":"","comment_id":156174,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40229534378","product_id":100039001,"comment_content":"1.目前基本都在接触贫血开发模型，充血的可能局部模块设计的时候，会把数据和方法组织到一个类里面去。但是DB的操作完全隔离。<br>这里有一个问题:充血模型的话，OOP的想法，应该是每个人(假设人是类，具体的人就是人这个类的实例化)管理自己的属性，比如我的主管。<br>这个时候有一个需求。批量修改人员的主管。那么充血模型是要遍历委托给每个具体的人自己去修改呢？还是提供一个service，直接批量操作DB。<br>2. entity,bo,vo我的做法是不合并，但是真的有贯穿三层的模型。那么就直接用一个。但是要单独分包。并且组内规范好这个包里面的东西都是有修改风险的。我个人倾向用麻烦换容错。毕竟软件的变化性比较大","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476017,"discussion_content":"1. 充血模型并不是哪都适用\n2. 赞成你的看法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574833816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156747,"user_name":"杨树敏","can_delete":false,"product_type":"c1","uid":1254983,"ip_address":"","ucode":"58B0917A14FB87","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/47/d958b25b.jpg","comment_is_top":false,"comment_ctime":1574946953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31639718025","product_id":100039001,"comment_content":"回想起来经历的互联网项目一直都是贫血模型, 究其原因:<br>1.互联网项目多采用敏捷开发, 需求多变, 设计充血模型的性价比低;<br>2.互联网小产品业务场景相对简单, 业务难点更多的出现在并发, 性能上, 在存储,内存成本急剧下降的当下, 粗暴的横向扩展成为见效更快的选择.","like_count":7},{"had_liked":false,"id":156101,"user_name":"追风少年","can_delete":false,"product_type":"c1","uid":1305639,"ip_address":"","ucode":"0467648A908B18","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/27/827015c0.jpg","comment_is_top":false,"comment_ctime":1574819440,"is_pvip":false,"replies":[{"id":"59996","content":"DTO：data transfer object，是一种更抽象的概念，这种数据类型可以是贫血模型的，主要是用在接口之间传递数据。<br><br>其他的两个没听说过：《","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574839102,"ip_address":"","comment_id":156101,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31639590512","product_id":100039001,"comment_content":"1. 以前做的项目都是基于贫血模型的，这次的话涉及风控业务，也是基于贫血模型，但是各种问题不断，正在考虑优化，这里刚好看到老师的文章，希望能有所借鉴。<br>2. Entity是ORM中数据库映射的实体类，BO是业务操作相关实体类，VO是视图层对应实体类。在简单情况下，这三个类可能是一样的，比方说你填写一个登陆注册的表单，此时前端传给后端接口的数据，一般就是VO，而通过业务层Service操作，加入创建时间，IP地址等，就转换成了BO，最后对应到数据层就转换为了Entity，也许一次注册可能需要写多个库，就会生成多个Entity。<br>有些复杂业务，还有DO,DTO，PO之类的概念，但是个人感觉很模糊，也不是很了解。这里希望老师能指点一下。","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475987,"discussion_content":"DTO：data transfer object，是一种更抽象的概念，这种数据类型可以是贫血模型的，主要是用在接口之间传递数据。\n\n其他的两个没听说过：《","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574839102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110113,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/61/68462a07.jpg","nickname":"无名","note":"","ucode":"2D2E877CF97138","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284775,"discussion_content":"po为持久化对象，就是entity。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592633439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157192,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1274787,"ip_address":"","ucode":"C233DF1D224EC1","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/a3/2b077607.jpg","comment_is_top":false,"comment_ctime":1575077948,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23049914428","product_id":100039001,"comment_content":"说一说我的经历吧，现在就在银行工作.之前做一个新系统，组长说我们用DDD模式来开发吧，大家都不熟，摸索着搞了一周，最后项目要在在几号几号上线，根本没有多余的时间让你慢慢设计，一句话，几号能不能正常上线，DDD花了一周时间难产了，只能老办法贫血模型快速搞定，先上线。若不能正常上线，业务才不管你贫血还是充血呢。所以，有些时候用什么模型真的是跟指标跟任务挂钩的，精心设计需要更多的时间，没有时间，只能粗暴的尽快搞定，后面就是还各种还技术债。","like_count":6},{"had_liked":false,"id":173081,"user_name":"刘嘉璐","can_delete":false,"product_type":"c1","uid":1810745,"ip_address":"","ucode":"A6C6B1B2B46950","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er9rgZJbZgoNaFJWjibXSfYiaEON6QcKib7FWbcNDceKXpSiceWDXGckdyOThsgs6lYaZ3Pg0FX2w55Tw/132","comment_is_top":false,"comment_ctime":1579421848,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18759291032","product_id":100039001,"comment_content":"在我开发的项目中几乎很少有用到BO，只有VO+Entity(DTO)，他俩是继承关系，VO继承Entity(DTO)。<br>前端有新增字段的需求，那就在VO新增字段，如果要屏蔽某些字段，就用@JsonIgnore。<br>不知道有多少兄台跟我类似，这样的话开发比较快，便捷，但是确实违背了OOP的原则😂","like_count":4,"discussions":[{"author":{"id":1051118,"avatar":"https://static001.geekbang.org/account/avatar/00/10/09/ee/288d878c.jpg","nickname":"Leon","note":"","ucode":"782F7ECE08C0E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306273,"discussion_content":"相似度100%","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600238102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163574,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1576747590,"is_pvip":false,"replies":[{"id":"62262","content":"是的","user_name":"作者回复","comment_id":163574,"uid":"1190123","ip_address":"","utype":1,"ctime":1576796693,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"18756616774","product_id":100039001,"comment_content":"项目中用到了google的ProtocolBuffer，根据数据结构体生成的类模型只能包含数据，不能包含方法。这种情况也是贫血模型吧。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478458,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576796693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156409,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1574867521,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18754736705","product_id":100039001,"comment_content":"1、收获：简简单单就解释了贫血（数据与业务分开），充血（数据与业务一起）<br>2、真实项目做了十来个，一直是贫血模式，包括曾经做过的复杂的金融系统也都是贫血模式<br>3、思考题2：不能合并，理由：BO很多时间都是多个Entity的复杂组合起来的。","like_count":4,"discussions":[{"author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73369,"discussion_content":"这种bo是没法合并，现在是考虑如果bo的字段都存在一张表里且跟vo的字段一致的情况要不要合并呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575558442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156075,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212758,"ip_address":"","ucode":"ABF1824D24BA2F","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/56/311be282.jpg","comment_is_top":false,"comment_ctime":1574817146,"is_pvip":false,"replies":[{"id":"59992","content":"一看就是没认真看文章，文章说了例子在下一节课中有的","user_name":"作者回复","comment_id":156075,"uid":"1190123","ip_address":"","utype":1,"ctime":1574838845,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"18754686330","product_id":100039001,"comment_content":"要是有代码例子就好了。实操性会强很多。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475978,"discussion_content":"一看就是没认真看文章，文章说了例子在下一节课中有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219429,"user_name":"fish","can_delete":false,"product_type":"c1","uid":1194551,"ip_address":"","ucode":"ABA0945C8B9615","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/37/06440c7f.jpg","comment_is_top":false,"comment_ctime":1590025210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14474927098","product_id":100039001,"comment_content":"我也喜欢DDD，但是他也有缺点，而且还很大，这就是他这么多年还没流行的原因吧，适合才最好，盆血模型也可以分层分方法让业务隔离的清楚，毕竟用了N年的东西，谁敢说基于DDD模型设计的程序在考虑业务时就不曾考虑数据库方面？数据库也是业务方面中的一员，还是大员！DDD先是整体设计再写码，三层可以边想一部分写一部分，适合迭代，适合实现一部分一部分的写，对整体来说影响不大，DDD业务要是分多次来那就比较麻烦了，重构领域就比较费劲了","like_count":3},{"had_liked":false,"id":158579,"user_name":"Geek_53aa5c","can_delete":false,"product_type":"c1","uid":1361000,"ip_address":"","ucode":"F468CFEF187BA9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELDhhlsdUpg4XsIoTlspAKYXYBQwSo0UsAKk1luurxC65tK3QZAuj2ALBmAUv4f7x9pib0TNCPicDTA/132","comment_is_top":false,"comment_ctime":1575420615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14460322503","product_id":100039001,"comment_content":" Ruby on Rails的model层，ActiveRecord是很好的充血模型实现，借助Ruby语言动态的特性，CRUD以及属性映射不需要写一行代码一行配置文件就可以开箱即用，所以没有必要有repository这一层。","like_count":3},{"had_liked":false,"id":156105,"user_name":"十二差一点","can_delete":false,"product_type":"c1","uid":1212732,"ip_address":"","ucode":"76C07F9A641630","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/3c/a01a60f3.jpg","comment_is_top":false,"comment_ctime":1574819796,"is_pvip":false,"replies":[{"id":"59995","content":"恩恩 可以这么理解","user_name":"作者回复","comment_id":156105,"uid":"1190123","ip_address":"","utype":1,"ctime":1574838957,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"14459721684","product_id":100039001,"comment_content":"MVC是面向过程编程，是因为它违反了封装的特性，数据和逻辑操作分离开了，在controller进行相关数据逻辑操作，而model仅仅只是个数据层，没有任何操作。而MVVM是面向对象编程，因为它把数据和其相关逻辑操作封装在了viewModel，只暴露给外部相关方法，controller想要获取数据直接通过这些方法就行了，不用像MVC在controller层进行一堆逻辑操作，同时减轻了controller的代码，在viewModel也方便维护数据逻辑操作。不知道这样的理解对不对？","like_count":3},{"had_liked":false,"id":156038,"user_name":"水银","can_delete":false,"product_type":"c1","uid":1045948,"ip_address":"","ucode":"0FD9C79590E484","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/bc/63be02b6.jpg","comment_is_top":false,"comment_ctime":1574814985,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14459716873","product_id":100039001,"comment_content":"我经历的所有的项目都是贫血模型，对于充血模型没尝试过，如果说业务数据与业务操作分离，那么在设计接口时如何将繁多的业务属性当成参数传入给接口方法呢？是说将所有属性的getter和setter直接生成在接口中吗？那么对于接口中使用这些零散的属性是怎样使用的呢？觉得二者确实还得从实际情况出发，看业务复杂度及对代码设计是否有要求，但往往都是为了习惯、速度而忽略了设计初心。<br><br>对于三类对象是否合并成一个，我上次的留言就正好说了这个问题，确实很难判别，起初是分开三个对象，但是为了所谓的分层、隔离干净避免耦合，都没有体现，在业务调整方面分开3个对象并没体现优势，可能是我参与的项目都比较简单，基本上不涉及到需要解耦来进行代码的扩展性调整，反而是增减改属性比较频繁，这样就涉及到一位同学说的，一下修改3个对象而且最好属性值的复制，如果是用委托就不说了，如果不是委托，那么属性值复制多数依赖BeanUtils类通过类反射完成，还要保证属性类型的一致性；如果用委托，那么意味着3个对象的组合难免又是对分层上的一个污点。所以我觉得两者适用在不同的设计要求、团队人员的一往习惯以及项目的目标，如果公司涉及的项目没有那么复杂、设计要求不高，我更倾向于合并为一个。<br><br>","like_count":3,"discussions":[{"author":{"id":1097416,"avatar":"https://static001.geekbang.org/account/avatar/00/10/be/c8/7c5f324f.jpg","nickname":"港岛妹夫","note":"","ucode":"9F6AAA29B60D8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304364,"discussion_content":"其实现在大部分互联网APP, 一个页面都是加载N多个接口.  除非有极致性能要求吧, 不然也没有改的必要. 当然, 也看团队风格, 领导怎么定了.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599554114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155980,"user_name":"(´田ω田`)","can_delete":false,"product_type":"c1","uid":1210588,"ip_address":"","ucode":"CA043D3EC6FE7E","user_header":"https://static001.geekbang.org/account/avatar/00/12/78/dc/0c9c9b0f.jpg","comment_is_top":false,"comment_ctime":1574787078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459688966","product_id":100039001,"comment_content":"第二题，不合并有好处。UserEntity是具体到数据库的，假如有不同版本的UserEntity，相互之间有少部分不同，抽象出一个BO层在Service层做UserEntity到BO的转化，可以方便Bo在Service层传播，方便不同项目之间复用、统一处理；再往上抽象出的VO，一般通过接口返回给前端展示，也可以是多种有差异的BO转化为同一种VO方便前端统一处理","like_count":3},{"had_liked":false,"id":200752,"user_name":"sundy","can_delete":false,"product_type":"c1","uid":1724856,"ip_address":"","ucode":"581D4B976524B6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/51/b8/f76b15a1.jpg","comment_is_top":false,"comment_ctime":1585646344,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10175580936","product_id":100039001,"comment_content":"老师 我有一个困惑很久的问题，<br>1 dao层的设计到底是对应一个业务的所有数据库操作还是对应一个数据库表的curd？<br>2如果按照业务创建dao，除了一定的解藕外，dao层存在的意义更多是抽离service层的代码，如果按照数据库表设计dao，那联表查询的逻辑应该写在哪？","like_count":2,"discussions":[{"author":{"id":1739390,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8a/7e/bfe37c46.jpg","nickname":"飞鱼","note":"","ucode":"95109E8F7DBE39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386227,"discussion_content":"dao层一般对单表操作，一个表对应一个dao；联查通过 往上在抽象一层（可以叫manage或者service,或者其他），通过组合n个dao来实现 连查","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627476799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168233,"user_name":"Pioneer4","can_delete":false,"product_type":"c1","uid":1742839,"ip_address":"","ucode":"EE095D397D9BB4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/97/f7/8afbb146.jpg","comment_is_top":false,"comment_ctime":1578035499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167970091","product_id":100039001,"comment_content":"目前所接触的项目都是以MVC框架为基础开发的，的确都是贫血模型的传统开发模式，没有去意识到还有DDD开发模式，今后留心。","like_count":2},{"had_liked":false,"id":156708,"user_name":"_呱太_","can_delete":false,"product_type":"c1","uid":1739226,"ip_address":"","ucode":"6B96DC7CF66094","user_header":"https://static001.geekbang.org/account/avatar/00/1a/89/da/e86b9932.jpg","comment_is_top":false,"comment_ctime":1574939265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164873857","product_id":100039001,"comment_content":"小争哥，对设计模式这些概念都有了解，一直想找一些源码来看看顺便练下手，请问下有没有推荐的 C++ 比较经典的开源代码呢","like_count":2},{"had_liked":false,"id":156445,"user_name":"条","can_delete":false,"product_type":"c1","uid":1203836,"ip_address":"","ucode":"6F8679175256E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/7c/94af3f5e.jpg","comment_is_top":false,"comment_ctime":1574872081,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10164806673","product_id":100039001,"comment_content":"争哥，对MVC的认识，感觉不是太统一呀，表示层、逻辑层、数据层应该是三层架构的分层概念吧，MVC的M-Model可以近似的看做逻辑层和数据层的加和，V-View近似看做表示层，C-controller是个桥梁。","like_count":2,"discussions":[{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218455,"discussion_content":"我理解MVC是control层的东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585660233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110218,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/ca/4560f06b.jpg","nickname":"zhchnchn","note":"","ucode":"2219E40ED134D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111120,"discussion_content":"确实，概念不能混淆。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577781893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1119490,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/02/66f65388.jpg","nickname":"雷霹雳的爸爸","note":"","ucode":"99BBA6D83DD11F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68862,"discussion_content":"你说的这个更贴近原意，不客气的说他这里属于明目张胆的替换概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575222006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156181,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1574829497,"is_pvip":false,"replies":[{"id":"59969","content":"可以的<br>","user_name":"作者回复","comment_id":156181,"uid":"1190123","ip_address":"","utype":1,"ctime":1574833294,"user_name_real":"王争"}],"discussion_count":1,"race_medal":4,"score":"10164764089","product_id":100039001,"comment_content":"是否可以采用组合的方式，来减少重复字段？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476021,"discussion_content":"可以的\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574833294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156179,"user_name":"路伴友行","can_delete":false,"product_type":"c1","uid":1506974,"ip_address":"","ucode":"96B54B7EEAEDAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","comment_is_top":false,"comment_ctime":1574829454,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10164764046","product_id":100039001,"comment_content":"MVC其实是表现层的架构模式，是对同一个数据的不同表现，不知道为啥来到了服务器端 又流行了起来","like_count":2,"discussions":[{"author":{"id":1242122,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f4/0a/cf728857.jpg","nickname":"YourSweetHeart","note":"","ucode":"38843F447B03F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62538,"discussion_content":"相当赞成","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574850251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156166,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1574827480,"is_pvip":false,"replies":[{"id":"59971","content":"存储本身有自己的逻辑在那里面，不能单独的看做是数据。","user_name":"作者回复","comment_id":156166,"uid":"1190123","ip_address":"","utype":1,"ctime":1574833941,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"10164762072","product_id":100039001,"comment_content":"最近在看消息队列的专栏，里面有提到Pulsar这个产品采用了存储与计算分离的设计。本质上和文中提到的数据与操作分离应该是一个意思吧？难道也是一种面向过程的设计","like_count":2},{"had_liked":false,"id":156164,"user_name":"成葛格","can_delete":false,"product_type":"c1","uid":1030745,"ip_address":"","ucode":"A09A57D891FA50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/59/ffa298a2.jpg","comment_is_top":false,"comment_ctime":1574827102,"is_pvip":false,"replies":[{"id":"59972","content":"如果三个object需要的字段不是完全一样的，该咋办呢","user_name":"作者回复","comment_id":156164,"uid":"1190123","ip_address":"","utype":1,"ctime":1574834274,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"10164761694","product_id":100039001,"comment_content":"这么说来我所有的项目都是基于贫血模式的；现实的开发中就是把三个VO都合成一个的。不知道会有什么问题？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476015,"discussion_content":"如果三个object需要的字段不是完全一样的，该咋办呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574834274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317256,"user_name":"阿甘","can_delete":false,"product_type":"c1","uid":1057843,"ip_address":"","ucode":"BC93175B70E05D","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/33/bcf37f50.jpg","comment_is_top":false,"comment_ctime":1634722937,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5929690233","product_id":100039001,"comment_content":"其实之前还真试过用充血模型搞过一个真实的比较复杂的项目，做到一半发现不合适还是切回贫血模型了。贫血模型最大的好处在于service都是无状态的单例，随便autowired，充血模型就要特别小心了，这种service都是一次性对象的其实意义不大。本质上充血跟贫血跟DDD没有太大关系。都是面向接口编程，你画一下service之间的类协作图，两者是一模一样的。","like_count":1},{"had_liked":false,"id":296548,"user_name":"zart","can_delete":false,"product_type":"c1","uid":1148637,"ip_address":"","ucode":"E32677C0FD4421","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eomCrCRrLAWib0gMI2L2NbicMummlxOY6nVmphsDO0J3xx7OygNd8wJicc88RbNoHrcuXBsKLtCMvgFQ/132","comment_is_top":false,"comment_ctime":1623038468,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5918005764","product_id":100039001,"comment_content":"第一层：贫血模型数据与逻辑分开，充血模型数据与逻辑封装在一起。<br>第二层：贫血模型属于面向过程，充血模型属于面向对象。<br>第三层：面试过程就是不管三七二十一，过程中需要啥就实现啥；面向对象是先基于封装，抽象，继承，多态把对象设计好，以后方便扩展和复用。<br>第四层：面向过程适合简单的业务，面向对象适合负责的业务。","like_count":1},{"had_liked":false,"id":257139,"user_name":"江南一笑","can_delete":false,"product_type":"c1","uid":2234620,"ip_address":"","ucode":"E38938A1178827","user_header":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","comment_is_top":false,"comment_ctime":1603860420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898827716","product_id":100039001,"comment_content":"这个一看，mvc非常好啊，适用广，门槛低，好维护，好变更，通俗易懂。<br><br>但有几个问题想请教：<br>1，贫血模型mvc会不会导致更频繁的数据库访问呢？能具体举例说明吗？比如两个service本来可以同享一个数据对象。<br>2，mvc会不会在对象的accessment scope方面比较欠缺，导致开发过程中的潜在风险呢？<br>","like_count":1},{"had_liked":false,"id":241786,"user_name":"好名字都让人取了！","can_delete":false,"product_type":"c1","uid":1122093,"ip_address":"","ucode":"B7FCD018C1AAF9","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/2d/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1597422054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892389350","product_id":100039001,"comment_content":"惭愧 自己所编写的业务逻辑几乎全是基于贫血模型的mvc 　更为直接的描述就是CURD，也正如一楼所说的没有好的指导跟学习对象　踏进这个领域最初学习的就是mvc模式　这也就导致整个思维比较僵硬","like_count":1},{"had_liked":false,"id":230200,"user_name":"BruceMaNo1","can_delete":false,"product_type":"c1","uid":1245387,"ip_address":"","ucode":"D58B7243722094","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/cb/c6523c81.jpg","comment_is_top":false,"comment_ctime":1593309248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5888276544","product_id":100039001,"comment_content":"1.  目前经历的项目中，没有基于充血模型来开发的，都是贫血模型，快速开发迭代上线，设计简单，出现重复代码这种事，倒也不是全部贫血模型的锅，有些业务逻辑开发时就是复制粘贴再修改一点东西，所以，代码复用这种事，与哪个模型无关，与开发人员自身有关<br>2. 几个类不能合并为一，每个类都有对应交互使用的地方，虽然看着一样，但在业务中可能会存在些微的差异，而且概念不同，这样分开写逻辑层次更清晰些","like_count":1},{"had_liked":false,"id":162599,"user_name":"查理","can_delete":false,"product_type":"c1","uid":1111297,"ip_address":"","ucode":"A9FEA901E3A05D","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/01/5389295c.jpg","comment_is_top":false,"comment_ctime":1576562840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871530136","product_id":100039001,"comment_content":"Domain是否只处理与自己有关的业务逻辑？如果是的话，有些业务需要多个Domain才能完成，还是要把大量业务代码放到Service中去；如果不是的话，那Domain处理很多与自己无关的业务逻辑，是否不符合DDD的思想？","like_count":1},{"had_liked":false,"id":159445,"user_name":"爱喝酸奶的程序员","can_delete":false,"product_type":"c1","uid":1274352,"ip_address":"","ucode":"3FDB0AC2854274","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjiaBHJyfAKK02CCcibkqI0jpaHJEcyrTRI4xbrqHCWiaia88WQs4r8zJVmHfibqricUYeUT2ezAZAC7wQ/132","comment_is_top":false,"comment_ctime":1575625147,"is_pvip":false,"replies":[{"id":"61132","content":"下一节课有例子的","user_name":"作者回复","comment_id":159445,"uid":"1190123","ip_address":"","utype":1,"ctime":1575896712,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5870592443","product_id":100039001,"comment_content":"一直贫血……我们的代码一直都是一点点修改就写SQL,但是感觉只是提了充血模式的长处……没有一个例子有点空洞","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477062,"discussion_content":"下一节课有例子的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575896712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157748,"user_name":"Bolin","can_delete":false,"product_type":"c1","uid":1206489,"ip_address":"","ucode":"6A0AC519030215","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/d9/7e5ca3ca.jpg","comment_is_top":false,"comment_ctime":1575255178,"is_pvip":true,"replies":[{"id":"60720","content":"感觉更像贫血模型😂","user_name":"作者回复","comment_id":157748,"uid":"1190123","ip_address":"","utype":1,"ctime":1575432364,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5870222474","product_id":100039001,"comment_content":"我们项目像是充血和贫血的结合体。涉及不是很烦复杂的业务基本上Repository这一层只跟单表操作。也就是只针对一张表的CRUD，业务逻辑在service这一层。这样也可以实现代码的重用。但是entity，domain实体大多时候只是做一个数据的传递功能。老师这种算充血模式的DDD吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476519,"discussion_content":"感觉更像贫血模型😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575432364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157076,"user_name":"🐾mc🐾","can_delete":false,"product_type":"c1","uid":1030759,"ip_address":"","ucode":"CE47F9316D6E14","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/67/c764be06.jpg","comment_is_top":false,"comment_ctime":1575025696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869992992","product_id":100039001,"comment_content":"文档review：基本的分层思路都大差不差。—》基本的分层思路都差不多。","like_count":1},{"had_liked":false,"id":156932,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1574998161,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5869965457","product_id":100039001,"comment_content":"个人觉得想搞DDD也要看项目的发展和团队成员的能力。<br>先贫血，有钱了再充血:)","like_count":1,"discussions":[{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96667,"discussion_content":"等有钱了就改不回来了 技术债务太重","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577085234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1022247,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","nickname":"阿卡牛","note":"","ucode":"0BC43A904C3199","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98244,"discussion_content":"大部份的项目还没等到有钱就挂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577150611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":96667,"ip_address":""},"score":98244,"extra":""}]}]},{"had_liked":false,"id":156450,"user_name":"修缘","can_delete":false,"product_type":"c1","uid":1035476,"ip_address":"","ucode":"72AB60C1DC88C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/d4/f1f84a96.jpg","comment_is_top":false,"comment_ctime":1574873415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869840711","product_id":100039001,"comment_content":"隔离关注点，降低复杂度是系统设计的原则。<br>Entity,Bo,Vo这三者虽然字段差不多，但是从职责上并不是一样。但是从类的设计来看其实可以进行高度抽象，将公共的字段定义在抽象类当中，三者继承抽象类即可，毕竟层次不会太多，所以可以大胆的使用抽象和继承来解决这个问题。包括lombok目前也提供了相关的注解可以解决！","like_count":1},{"had_liked":false,"id":156430,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1574870013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869837309","product_id":100039001,"comment_content":"感觉一点点在为引入设计模式做准备","like_count":1},{"had_liked":false,"id":156269,"user_name":"燕行","can_delete":false,"product_type":"c1","uid":1048380,"ip_address":"","ucode":"AE2BEFD3C5F31F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ff/3c/215aecca.jpg","comment_is_top":false,"comment_ctime":1574846288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869813584","product_id":100039001,"comment_content":"个人感觉，本节课中贫血与充血模型的讲解，如果配图进行比较，可能会更加直观","like_count":1},{"had_liked":false,"id":156146,"user_name":"拂尘","can_delete":false,"product_type":"c1","uid":1609964,"ip_address":"","ucode":"9563C002E4B06A","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/ec/ede93589.jpg","comment_is_top":false,"comment_ctime":1574824582,"is_pvip":false,"replies":[{"id":"59973","content":"因为是用到不同层的。每一层中的object包含的字段可能都不大一样，所以要区分定义。如果一个object贯穿所有层，本身有违反封装。","user_name":"作者回复","comment_id":156146,"uid":"1190123","ip_address":"","utype":1,"ctime":1574834350,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"5869791878","product_id":100039001,"comment_content":"老师，我还是学生，然后学的web架构里面我只知道实体类，那个vo，bo，和entity为什么需要定义三个啊，不是用一个实体类就可以了嘛？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476007,"discussion_content":"因为是用到不同层的。每一层中的object包含的字段可能都不大一样，所以要区分定义。如果一个object贯穿所有层，本身有违反封装。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574834350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259293,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/1d/b8014237.jpg","nickname":"千里之行 始于足下","note":"","ucode":"8F1CD8CECA588F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76994,"discussion_content":"我们项目里面，实体层(mysql)用的PO，redis用的RO，输出到Controller层用的VO，同时可用输入输出的，用的DTO，其他的就没用过了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575876683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609964,"avatar":"https://static001.geekbang.org/account/avatar/00/18/90/ec/ede93589.jpg","nickname":"拂尘","note":"","ucode":"9563C002E4B06A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62400,"discussion_content":"谢谢老师咯，后面看了一下别人的评论就感觉懂了，看这个专栏以来感觉真的是不一样的世界咯。思想上的提升真的不一样咯。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574840454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156136,"user_name":"迁橘","can_delete":false,"product_type":"c1","uid":1492125,"ip_address":"","ucode":"8FE37B7CA6CB74","user_header":"https://static001.geekbang.org/account/avatar/00/16/c4/9d/7c4dbcd9.jpg","comment_is_top":false,"comment_ctime":1574823256,"is_pvip":false,"replies":[{"id":"59975","content":"（づ￣3￣）づ╭❤～","user_name":"作者回复","comment_id":156136,"uid":"1190123","ip_address":"","utype":1,"ctime":1574834499,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5869790552","product_id":100039001,"comment_content":"看完了, 感觉热血沸腾, 特别期待下一节课.<br>课堂讨论:<br>1, 自己所参与做的项目中都是典型的基于贫血模型开发模式.<br>2, 我是基本都用一个类的, 因为所做的系统业务想比较简单, 也就没必要, 还有些共用的属性字段会拿出来,用继承的方式. 基本项目都是这么过来的. 也没遇到啥问题, (大家勿笑哈)<br><br>从第一节课听到现在, 受益匪浅, 每节课都会听个3-5遍. 到现在, 基本能意识到自己在工作种存在的一些问题,以及需要提升进步的地方, 期待后面的课程....","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476003,"discussion_content":"（づ￣3￣）づ╭❤～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574834499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156135,"user_name":"carol","can_delete":false,"product_type":"c1","uid":1239823,"ip_address":"","ucode":"B0DD5C80414694","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/0f/67a7142a.jpg","comment_is_top":false,"comment_ctime":1574823132,"is_pvip":false,"replies":[{"id":"59981","content":"业务是否复杂不好定义，只能考经验来判断。","user_name":"作者回复","comment_id":156135,"uid":"1190123","ip_address":"","utype":1,"ctime":1574837943,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5869790428","product_id":100039001,"comment_content":"问个小白问题。请问下，什么是业务？怎么来评判业务复杂不复杂呢？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476002,"discussion_content":"业务是否复杂不好定义，只能考经验来判断。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574837943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156131,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1574822541,"is_pvip":false,"replies":[{"id":"59982","content":"看完下一节课你再看看是否有答案了","user_name":"作者回复","comment_id":156131,"uid":"1190123","ip_address":"","utype":1,"ctime":1574837974,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"5869789837","product_id":100039001,"comment_content":"移动端的MVVM和MVP算是充血吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475999,"discussion_content":"看完下一节课你再看看是否有答案了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574837974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1457408,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","nickname":"Eden Ma","note":"","ucode":"755312F0D154F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62376,"discussion_content":"好的 争哥 期待周五的更新～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156117,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1574820887,"is_pvip":true,"replies":[{"id":"59987","content":"多读几遍，收获会不一样的。加油！","user_name":"作者回复","comment_id":156117,"uid":"1190123","ip_address":"","utype":1,"ctime":1574838445,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"5869788183","product_id":100039001,"comment_content":"1. 针对第一个问题，我就和楼上的很多同学一样，是一直在贫血的世界里不亦乐乎，丝毫没有体会过充血的愉快感。但是，现在自己有一个小打小闹的项目开启，虽然已经做了点，但是现在开始修正还来得及，准备尝试下用充血的模型，跟上老师的实战节奏。<br>2. 针对第二个问题，我还是倾向于不合并。虽然目前看来大部分字段是差不多的，但是万一后面内容扩展了，功能扩展了，有特殊处理相关的呢？<br><br>设计模式的课程真的是值得品味好几次，每次学习的时候，生怕上次的内容没有仔细看完，而跟不上当节课的内容，有点忐忑。老师的内容循序渐进，对于我这个职场比菜鸟稍微好点的鸟来说，都是一句句精辟的话语，打开了我很多平时看到的心结，也指出了我平时开发中的很多不足，原来我一直在落后的时代写代码。<br><br>所以，如何摆脱我的上古时代的开发模式，就是紧跟着老师的步伐走。虽然一开始说8个月的时间，但我觉得，8个月一晃就过去了，保持这个节奏，很赞。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475992,"discussion_content":"多读几遍，收获会不一样的。加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62677,"discussion_content":"恩恩，好的老师。努力学习，努力消化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574857791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156109,"user_name":"迈向架构师","can_delete":false,"product_type":"c1","uid":1637228,"ip_address":"","ucode":"2476594CF76001","user_header":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","comment_is_top":false,"comment_ctime":1574820415,"is_pvip":true,"replies":[{"id":"59989","content":"要区分一下的，可以看下其他小伙伴的留言，有的讲的很好","user_name":"作者回复","comment_id":156109,"uid":"1190123","ip_address":"","utype":1,"ctime":1574838707,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5869787711","product_id":100039001,"comment_content":"我觉得，简单的贫血模型可以不区分BOVO，直接把DO直接set到ResultData然后就丢给前端，区分各个pojo<br>如果分领域的话，区分各类pojo是有必要的<br>老师您觉得呢","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475991,"discussion_content":"要区分一下的，可以看下其他小伙伴的留言，有的讲的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156017,"user_name":"清风自来","can_delete":false,"product_type":"c1","uid":1026907,"ip_address":"","ucode":"89D07A602D2E00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/5b/fd0b96cb.jpg","comment_is_top":false,"comment_ctime":1574812962,"is_pvip":false,"replies":[{"id":"60016","content":"下一节课中有讲到你提到的问题的","user_name":"作者回复","comment_id":156017,"uid":"1190123","ip_address":"","utype":1,"ctime":1574850560,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5869780258","product_id":100039001,"comment_content":"老师，我有个问题，一直在疑问中，重domain轻service，那哪些业务应该写在service哪些应该写在domain呢？如果是有两个服务，一个订单服务，一个商品服务。我订单服务中需要商品信息支撑。调用商品服务的这个过程应该在domain还是在Service。如果在Service层，我是不是可以这样理解Service层应该处理的业务。1.构建domain(包括调用服务获取构建信息)。2.调用domain.do()，做业务处理。3. BO转化DO。4.调用Repository存DO？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475957,"discussion_content":"下一节课中有讲到你提到的问题的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574850560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156012,"user_name":"Numbpad1","can_delete":false,"product_type":"c1","uid":1114772,"ip_address":"","ucode":"2F075AC7E3847D","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/94/2bf394f3.jpg","comment_is_top":false,"comment_ctime":1574812628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869779924","product_id":100039001,"comment_content":"差别不大sql满天飞在最近的系统开发中就遇到了😂","like_count":1},{"had_liked":false,"id":155978,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":1514882,"ip_address":"","ucode":"2F1FA3519FAB50","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyiafvkibXnTOpIJxlhndHpSDMsqja9AajKYtYgGEGtFWtBb2Mg8DRVjqlWyIxl1piaT4qpMkwerQUg/132","comment_is_top":false,"comment_ctime":1574786693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869753989","product_id":100039001,"comment_content":"打卡✔<br>看完本节，感触颇深，在平常开发中越发的感觉到代码的复用性不够，往往自己意识不到自身的问题，听完本讲，大概知道问题的关键出在哪里，更加期待后续内容。<br>问题1，我经历的项目都是贫血模型，开发起来快速，复用性太差，越来越有这种感触。<br>问题2，理论上基于贫血模型合并用一个问题不大，要是(DDD)要分开。","like_count":1},{"had_liked":false,"id":359574,"user_name":"Will Zhang","can_delete":false,"product_type":"c1","uid":3197012,"ip_address":"上海","ucode":"294B06E7EFEB18","user_header":"https://static001.geekbang.org/account/avatar/00/30/c8/54/8d27cb56.jpg","comment_is_top":false,"comment_ctime":1665651303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665651303","product_id":100039001,"comment_content":"我用python做的所有项目都是类似的，就是页面需要展示一些金融指标时候传过来一些参数，然后我拿着参数取对应的数据，然后再计算一些列指标返回，我把所有的逻辑都揉在一个视图类里面，我这是啥模型啊，我还有救吗？<br>","like_count":0},{"had_liked":false,"id":359294,"user_name":"帝皓27","can_delete":false,"product_type":"c1","uid":2048316,"ip_address":"北京","ucode":"82586223E3C457","user_header":"https://static001.geekbang.org/account/avatar/00/1f/41/3c/eec7fc7c.jpg","comment_is_top":false,"comment_ctime":1665393632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665393632","product_id":100039001,"comment_content":"我的理解使用贫血模型还是充血模型和业务也有密切关系，对于长期复杂的项目确实适合充血模型，但是对于POC或者短期项目，考虑到成本和收益，还是贫血模型更合适","like_count":0},{"had_liked":false,"id":357111,"user_name":"Geek_3e9d7d","can_delete":false,"product_type":"c1","uid":3070253,"ip_address":"北京","ucode":"3BDEFFE68BE32F","user_header":"","comment_is_top":false,"comment_ctime":1662967237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662967237","product_id":100039001,"comment_content":"对于我们举的例子中，UserEntity、UserBo、UserVo 包含的字段都差不多，是否可以合并为一个类呢？<br>我认为不可以合并称为一个类：<br>UserEntity、UserBo和UserVo分别表示数据访问层、业务层和展示层的数据模型，虽然在大多数情况下这三个层的数据模型包含的数据大同小异，但是有些特殊场景使得它们会不一样，比如数据访问层的时间一般用Unix时间戳表示，而展示层的时间一般使用人类可读的时间格式，同时展示层一般又包含了一些国际化的内容；<br>此外，虽然一开始三个层的数据模型包含的数据都相同，但是随着业务需求的不断发展，可能会出现三层需要的数据模型包含大量不同数据的情况，如果合并为一个类，使三个层的数据模型耦合在一起很难维护。","like_count":0},{"had_liked":false,"id":356924,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662707532,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662707532","product_id":100039001,"comment_content":"第二个问题，应该和上节课的问题是一个意思，就是VO,BO,ENTITY 只是有细微的差别，该用一个大一统的bean还是保留这三个的问题？<br><br>其实合在一起也可以，弊端在于VO返回会包含用不上的字段，ENTITY入到数据库也会有用不上的字段。<br>分开的话，就是感觉代码有冗余。<br><br>通过继承的方式可能是个方向，感觉也不是很好用","like_count":0},{"had_liked":false,"id":356544,"user_name":"Sherk","can_delete":false,"product_type":"c1","uid":2156245,"ip_address":"重庆","ucode":"AFE3E7F158258D","user_header":"https://static001.geekbang.org/account/avatar/00/20/e6/d5/4f1fc074.jpg","comment_is_top":false,"comment_ctime":1662389661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662389661","product_id":100039001,"comment_content":"思考1: 支付服务是用充血模型， 会员服务是用贫血模型。感受最深的一点两者主要的区别是，贫血模型主要是实体数据会暴露属性，在什么地方都能改。封装性不好。支付的充血模型通过实体的方法进行修改，方法带有业务含义。<br>思考2:不行，三者的作用不一样。UserEntity 针对实体类，UserBo 增对具体的业务，可能需要取多个实体的数据，或者根据实体的字段加工得到。UserVo针对外部接口返回。<br><br>本节主要讲了贫血模型和充血模型。<br>     what： <br>           贫血模型 业务操作于数据分离， 像 UserBo 这样，只包含数据，不包含业务逻辑的类，。<br>            充血模型： 业务和数据都在实体类上。<br>     why 什么要 充血模型<br>         一般的开发用充血模型， 业务需求来了我们一般先考虑要什么数据，然后编写sql， 来组装数据，返回。之后就是定义 Entity、BO、VO。当新需求来的时候，只能重新写个满足新需求的 SQL 语句，这就可能导致各种长得差不多、区别很小的 SQL 语句满天飞。<br><br>    充血模型： 我们需要事先理清楚所有的业务，定义领域模型所包含的属性和方法。领域模型相当于可复用的业务中间层。新功能需求的开发，都基于之前定义好的这些领域模型来完成。<br><br>how哪些场景：<br>    如果业务比较简单，贫血模型相对更加高效。<br>    业务复杂尽量用充血模型考虑问题。<br>   ","like_count":0},{"had_liked":false,"id":356499,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"湖北","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1662368575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662368575","product_id":100039001,"comment_content":"问题<br>1.你做经历的项目中，有哪些是基于贫血模型的传统的开发模式？有哪些是基于充血模型的 DDD 开发模式呢？请简单对比一下两者的优劣。<br>基本上都是贫血的开发模型，优势就是开发思维比较统一，可以快速开发。缺点就是 可扩展性，可复用性，可维护性都不太好。比如如果业务修改了，大概率会改动业务实现或者重新写一个新方法来代替之前的方法这样的，导致service类中方法越来越多。可能导致前端后端都要一起修改等问题。<br>2.对于我们举的例子中，UserEntity、UserBo、UserVo 包含的字段都差不多，是否可以合并为一个类呢？<br>虽然是差不多但是还是有差异，最好的方法还是定义一个稳定的父类提取公共字段来继承这样比较好。","like_count":0},{"had_liked":false,"id":353654,"user_name":"大白杨","can_delete":false,"product_type":"c1","uid":1238048,"ip_address":"内蒙古","ucode":"6C34FB392A388F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/20/71ea229b.jpg","comment_is_top":false,"comment_ctime":1659664282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659664282","product_id":100039001,"comment_content":"打卡，这章看懂了，优劣：贫血模型，简单易上手，开发门槛低，不用考虑太多，扩展性和可维护性较差。充血模型，在复杂系统中优势就体现出来了。我们之前用的腾讯taf框架，我也没有写过大量的bo,VO。第二个问题我觉得不合并一个类好。","like_count":0},{"had_liked":false,"id":348920,"user_name":"Geek_8b0800","can_delete":false,"product_type":"c1","uid":2933797,"ip_address":"","ucode":"09D9692B62A691","user_header":"","comment_is_top":false,"comment_ctime":1655548255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655548255","product_id":100039001,"comment_content":"万能的评论区，我想问一下【userEntity 转换成 userBo】 和【 UserBo 转换成 UserVo】这两个方法应该分别写到哪个类里呢","like_count":0},{"had_liked":false,"id":345177,"user_name":"杜威","can_delete":false,"product_type":"c1","uid":1294908,"ip_address":"","ucode":"CF49380E27467F","user_header":"https://static001.geekbang.org/account/avatar/00/13/c2/3c/a82d4ed0.jpg","comment_is_top":false,"comment_ctime":1652090409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652090409","product_id":100039001,"comment_content":"贫血模型是通过在业务层做逻辑，面向业务需求，充血模型面向的是对象建模，业务暗含在对象的关系中，对于小项目的频繁变动，建的模型也会随意就被破坏，不如直接在业务层实现方便。","like_count":0},{"had_liked":false,"id":341388,"user_name":"十三月晴。","can_delete":false,"product_type":"c1","uid":1654239,"ip_address":"","ucode":"8FE6F9059EEF42","user_header":"https://static001.geekbang.org/account/avatar/00/19/3d/df/3655bde3.jpg","comment_is_top":false,"comment_ctime":1649575295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649575295","product_id":100039001,"comment_content":"贫血和ddd应用场景不同，简单的小项目上ddd，项目组会给你那么多时间？<br><br>再说人员问题，除了个别大公司，其他公司怎么维护ddd项目？","like_count":0},{"had_liked":false,"id":335752,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1645673157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645673157","product_id":100039001,"comment_content":"以前做的单系统服务都是基于贫血模型来做的。<br>而做微服务系统服务，都是基于充血模型来做的（但是还是多数是面向过程编程，不能完全叫面向对象编程）","like_count":0},{"had_liked":false,"id":335289,"user_name":"落落彩虹","can_delete":false,"product_type":"c1","uid":1264832,"ip_address":"","ucode":"F4CE1908DF149A","user_header":"https://static001.geekbang.org/account/avatar/00/13/4c/c0/73d52c05.jpg","comment_is_top":false,"comment_ctime":1645442891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645442891","product_id":100039001,"comment_content":"努力地回忆了下，似乎没有写过充血模型的代码…<br>对于第二个问题一直很困惑…","like_count":0},{"had_liked":false,"id":321004,"user_name":"一格状语","can_delete":false,"product_type":"c1","uid":1622696,"ip_address":"","ucode":"EBA9ED5F97416D","user_header":"https://static001.geekbang.org/account/avatar/00/18/c2/a8/f3f8f5d2.jpg","comment_is_top":false,"comment_ctime":1636615565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636615565","product_id":100039001,"comment_content":"请问，MVC贫血模型中，Control层校验请求参数，然后调用service层的方法，那么这个方法里需要再校验进来的实参吗？","like_count":0},{"had_liked":false,"id":319857,"user_name":"二小","can_delete":false,"product_type":"c1","uid":1593919,"ip_address":"","ucode":"5377CB552237B2","user_header":"https://static001.geekbang.org/account/avatar/00/18/52/3f/c8b40efe.jpg","comment_is_top":false,"comment_ctime":1635991050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635991050","product_id":100039001,"comment_content":"目前DDD虽然盛行，但其主要作用还是指导微服务的拆分，对于单个服务内部的设计还是基于贫血模型","like_count":0},{"had_liked":false,"id":316353,"user_name":"keep_it_real","can_delete":false,"product_type":"c1","uid":2055554,"ip_address":"","ucode":"F5057CAF752FF3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","comment_is_top":false,"comment_ctime":1634283011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634283011","product_id":100039001,"comment_content":"刚开始学习编程是从模仿入手的，别人怎么写我就怎么写。甚至都不知道什么是“贫血模型”，什么是DDD。也不知道一直都在用面向对象语言进行着面向过程编程，感觉有些小讽刺。但既然现在了解了，也有一定的编程基础梁，肯定要把它弄个明白。","like_count":0},{"had_liked":false,"id":314639,"user_name":"振振","can_delete":false,"product_type":"c1","uid":1313365,"ip_address":"","ucode":"ECE08186230140","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/55/5e440425.jpg","comment_is_top":false,"comment_ctime":1633271519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633271519","product_id":100039001,"comment_content":"虎头蛇尾啊，充血模型具体怎么写能不能给个对比demo？？","like_count":0},{"had_liked":false,"id":314360,"user_name":"Rootrl","can_delete":false,"product_type":"c1","uid":1035390,"ip_address":"","ucode":"50FE3BBA92D417","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/7e/0d050964.jpg","comment_is_top":false,"comment_ctime":1632984985,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1632984985","product_id":100039001,"comment_content":"个人认为简单的问题可以简单解决，复杂的问题要学会解决复杂问题的方法，具体要看问题、场景，不能因为复杂就不学，当然这里维度是个人技术追求以及业界趋势来考虑，不是说你所在的项目组，面临的当前问题哈。 而且随着业务的扩大简单问题会变为复杂问题，架构也是演进的。DDD现在火热跟微服务发展有莫大关系，比如按限界上下文来解决微服务拆分问题，其他还有很多，DDD分为战略和战术，战略方面对业务领域建模等，战术方面大的有DDD分层架构（Interfaces、Application、domain、infrastructure），这也是在更高维度去对系统解耦的，也是借用依赖倒置这些原则来实现高内聚低耦合思想的，小的就有这里充血模型啥的了。总之，还是很值得学的。不过这是架构层面的。","like_count":0},{"had_liked":false,"id":314069,"user_name":"邵光泽","can_delete":false,"product_type":"c1","uid":1985537,"ip_address":"","ucode":"45088A0F5DF384","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4c/01/72203f00.jpg","comment_is_top":false,"comment_ctime":1632823827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632823827","product_id":100039001,"comment_content":"你好，BO是Business Object把？这个应该是要包含业务逻辑的呀？<br>business object：It is an object that contains the business logic code. ","like_count":0},{"had_liked":false,"id":313526,"user_name":"瀚海","can_delete":false,"product_type":"c1","uid":2062203,"ip_address":"","ucode":"E64C22F3F6D285","user_header":"https://static001.geekbang.org/account/avatar/00/1f/77/7b/338c4617.jpg","comment_is_top":false,"comment_ctime":1632474180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632474180","product_id":100039001,"comment_content":"只有有痛点，才有去找优化     基于贫血模式，如果没有太大痛点，是不会有人考虑充血模式的  ","like_count":0},{"had_liked":false,"id":311762,"user_name":"happyfucheng","can_delete":false,"product_type":"c1","uid":1245040,"ip_address":"","ucode":"458E67028A5368","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/70/4a6f9065.jpg","comment_is_top":false,"comment_ctime":1631451897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631451897","product_id":100039001,"comment_content":"贫血模式，我是不是可以增加一层基础service层服务，让别的业务复杂的service都基于这个基础service来扩展实现，是不是就达到了和ddd相同的效果?","like_count":0},{"had_liked":false,"id":308084,"user_name":"Geek_6865f5","can_delete":false,"product_type":"c1","uid":2741599,"ip_address":"","ucode":"0367AC106E742F","user_header":"","comment_is_top":false,"comment_ctime":1629383861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629383861","product_id":100039001,"comment_content":"作为一名Android开发者，这一讲听得我好煎熬，java项目的很多东西都不懂。","like_count":0},{"had_liked":false,"id":307859,"user_name":"小周","can_delete":false,"product_type":"c1","uid":2453498,"ip_address":"","ucode":"7ED7BC27A46C4C","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/fa/615a0df3.jpg","comment_is_top":false,"comment_ctime":1629285048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629285048","product_id":100039001,"comment_content":"很难受，做的项目一直都是基于贫血模型的","like_count":0},{"had_liked":false,"id":306635,"user_name":"Geek_f0f0bc","can_delete":false,"product_type":"c1","uid":2678074,"ip_address":"","ucode":"A754BEC95E2BC6","user_header":"https://static001.geekbang.org/account/avatar/00/28/dd/3a/92726fb6.jpg","comment_is_top":false,"comment_ctime":1628652433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628652433","product_id":100039001,"comment_content":"面对复杂业务场景，DDD更有优势？这个结合实际情况有点儿绝对了，因为使用DDD的前提是精通业务，出来的DDD领域会比较健全，但是最后会根据设计人员对业务的掌握情况，业务爆发式扩张，以及需求快速打版上线要求，感觉最后DDD也有点流于概念，趋向于之前的贫血模式的的开发。","like_count":0},{"had_liked":false,"id":305100,"user_name":"小马哥","can_delete":false,"product_type":"c1","uid":1358045,"ip_address":"","ucode":"B2C0FF38F8C9BC","user_header":"https://static001.geekbang.org/account/avatar/00/14/b8/dd/37726c34.jpg","comment_is_top":false,"comment_ctime":1627812699,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627812699","product_id":100039001,"comment_content":"读完前面的面向对象设计思想之后看本篇实战, 发现贫血模型就是面向对象分析和设计不彻底的产物; 有人说, 互联网迭代快或者业务简单就适合使用贫血模型, 想问一句, 设计模式中讲的扩展性存在意义是什么呢!个人感觉, 充血模型是彻底的面向对象设计, 在分析和设计阶段就应该尽量完成, 即使快速迭代导致贫血出现, 业务层膨胀, 重构阶段的作用就体现了.","like_count":0},{"had_liked":false,"id":302527,"user_name":"Geek_设计模式之美","can_delete":false,"product_type":"c1","uid":2690172,"ip_address":"","ucode":"59263416E65594","user_header":"","comment_is_top":false,"comment_ctime":1626251231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626251231","product_id":100039001,"comment_content":"这敲代码的 得懂的太多了","like_count":0},{"had_liked":false,"id":301559,"user_name":"Geek__126303fc81f7","can_delete":false,"product_type":"c1","uid":1453774,"ip_address":"","ucode":"D256622360E1B4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibFY0KibR500NUAibZqsZCqg8Z6XicEaqr23oZTUlFcQaMXAlhETpVBXPAiamJ1IYcc7ibn7ZGdmUycxAicibkhtSc3xYA/132","comment_is_top":false,"comment_ctime":1625738675,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625738675","product_id":100039001,"comment_content":"学习了之后才知道基本使用贫血模型来开发","like_count":0},{"had_liked":false,"id":301496,"user_name":"GEEKBANG_6638780","can_delete":false,"product_type":"c1","uid":1268264,"ip_address":"","ucode":"952194E56FD8C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","comment_is_top":false,"comment_ctime":1625715060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625715060","product_id":100039001,"comment_content":"面向对象的思想很重要，但是有时候对象解决不了一些问题。所以DDD就出来了，DDD其实就是组合一组对象共同服务于一个业务。 说白了DDD就是更广义的面向对象设计。给你个链接：https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;a5NiKLFZsg54P_fcXPkahg 这篇文章讲述了利用DDD解决一些实际的问题","like_count":0},{"had_liked":false,"id":299987,"user_name":"易飞","can_delete":false,"product_type":"c1","uid":2630424,"ip_address":"","ucode":"32AC28754237F7","user_header":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","comment_is_top":false,"comment_ctime":1624948171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624948171","product_id":100039001,"comment_content":"一直贫血","like_count":0},{"had_liked":false,"id":295649,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1622530056,"is_pvip":false,"discussion_count":1,"race_medal":4,"score":"1622530056","product_id":100039001,"comment_content":"平时都是curd的贫血模式，微服务的充血模式没接触过😂","like_count":0,"discussions":[{"author":{"id":1098720,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","nickname":"技术骨干","note":"","ucode":"8FCF8DE6D29201","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543755,"discussion_content":"微服务单个服务也是搞贫血模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641294481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295379,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1622387219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622387219","product_id":100039001,"comment_content":"思考题：<br>第2个话题，UserEntity、UserBo、UserVo这三个类字段都差不多，但这三个类分别由三个不同的控制类来操纵，如果三个类合并为一个类，那么操作这三个类的控制类代码的耦合性太强，不利于代码的维护和扩展，因此，个人觉得这三个类不能合并。","like_count":0},{"had_liked":false,"id":293738,"user_name":"coding","can_delete":false,"product_type":"c1","uid":1207009,"ip_address":"","ucode":"A4F2E63C601993","user_header":"https://static001.geekbang.org/account/avatar/00/12/6a/e1/e2cbb49b.jpg","comment_is_top":false,"comment_ctime":1621515075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621515075","product_id":100039001,"comment_content":"知道自己做的是贫血，但是没有人指导ddd开发，也没有看到过好一点的ddd案例","like_count":0},{"had_liked":false,"id":293734,"user_name":"Geek_3c4f6b","can_delete":false,"product_type":"c1","uid":2053237,"ip_address":"","ucode":"2ACDF7AE539516","user_header":"","comment_is_top":false,"comment_ctime":1621511463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621511463","product_id":100039001,"comment_content":"平时写代码，都感觉这些设计模型存在，更不知道怎么去使用模式！","like_count":0},{"had_liked":false,"id":291428,"user_name":"Geek_d60492","can_delete":false,"product_type":"c1","uid":2599089,"ip_address":"","ucode":"9A79B12F0D3D63","user_header":"https://static001.geekbang.org/account/avatar/00/27/a8/b1/092b658f.jpg","comment_is_top":false,"comment_ctime":1620284695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620284695","product_id":100039001,"comment_content":"我认为主要还是学习成本高导致的，面向对象思想本身就比面向过程的线形思维要复杂的多","like_count":0},{"had_liked":false,"id":288888,"user_name":"😳","can_delete":false,"product_type":"c1","uid":1452857,"ip_address":"","ucode":"9AFB87EF308539","user_header":"https://static001.geekbang.org/account/avatar/00/16/2b/39/19041d78.jpg","comment_is_top":false,"comment_ctime":1618752006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618752006","product_id":100039001,"comment_content":"看完这篇之后发现用的都是贫血","like_count":0},{"had_liked":false,"id":287842,"user_name":"Kirk","can_delete":false,"product_type":"c1","uid":1584341,"ip_address":"","ucode":"BF53BD06CF4D60","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PAkHz6567oUZYsbskHL0cc3ibTOXu4mkzprvOx6iaXSa3vMTy5ib8ZmahxYibO2ss3Cia6ia12WVHa2ZNje1Nd4ibktMg/132","comment_is_top":false,"comment_ctime":1618193522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618193522","product_id":100039001,"comment_content":"贫血模式的话， 在repository里有个多表join查询，然后这样的话， 怎么样返回数据（entity）给service呢？或者在repository就把entity转成BO？","like_count":0},{"had_liked":false,"id":286752,"user_name":"Alicia1150","can_delete":false,"product_type":"c1","uid":1435760,"ip_address":"","ucode":"94FF9E2F04AD9E","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/70/34a83798.jpg","comment_is_top":false,"comment_ctime":1617551106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617551106","product_id":100039001,"comment_content":"有个问题想向老师提问，希望得到答复：<br>如果按照分析阶段得到的分析类进行体系结构设计，按照分层的模式，系统分析中的边界类属于Controller层，控制类属于Service层，与数据库打交道的辅助类属于DAO层，实体类属于实体层（po-entity），可以这么理解吗？","like_count":0},{"had_liked":false,"id":285577,"user_name":"不忘初心","can_delete":false,"product_type":"c1","uid":1015494,"ip_address":"","ucode":"5B5F45564DDBE7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/c6/83684988.jpg","comment_is_top":false,"comment_ctime":1616905256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616905256","product_id":100039001,"comment_content":"课堂讨论好像没有集中解答？","like_count":0},{"had_liked":false,"id":284302,"user_name":"夏秋冬","can_delete":false,"product_type":"c1","uid":2526247,"ip_address":"","ucode":"20D62081D9596F","user_header":"https://static001.geekbang.org/account/avatar/00/26/8c/27/5644834e.jpg","comment_is_top":false,"comment_ctime":1616154888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616154888","product_id":100039001,"comment_content":"简单业务用贫血，复杂业务用充血，充血只充service","like_count":0},{"had_liked":false,"id":280010,"user_name":"没有心的人","can_delete":false,"product_type":"c1","uid":2449748,"ip_address":"","ucode":"F27D5894087B11","user_header":"https://static001.geekbang.org/account/avatar/00/25/61/54/5bf767e7.jpg","comment_is_top":false,"comment_ctime":1614052713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614052713","product_id":100039001,"comment_content":"项目刚接触到充血模型，貌似公司以后都要用充血模型了","like_count":0},{"had_liked":false,"id":279464,"user_name":"马晨阳","can_delete":false,"product_type":"c1","uid":1230031,"ip_address":"","ucode":"344ACC3BF7F14A","user_header":"https://static001.geekbang.org/account/avatar/00/12/c4/cf/6e1205cc.jpg","comment_is_top":false,"comment_ctime":1613792542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613792542","product_id":100039001,"comment_content":"DDD对于产品设计的要求太高了我觉得，目前互联网的状况开发期间改个3，5遍需求呢是常事儿","like_count":0},{"had_liked":false,"id":276284,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1611877048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611877048","product_id":100039001,"comment_content":"目前我现在做的数据仓库的开发就是典型的贫血模式，面向过程，各种略有区别的sql代码满天飞","like_count":0},{"had_liked":false,"id":275313,"user_name":"xy","can_delete":false,"product_type":"c1","uid":2031661,"ip_address":"","ucode":"4D7DB0AC984170","user_header":"https://static001.geekbang.org/account/avatar/00/1f/00/2d/abff5821.jpg","comment_is_top":false,"comment_ctime":1611466499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611466499","product_id":100039001,"comment_content":"MVC(贫血模型)的缺点到底有什么呢？说的不过具体啊，过于理论了","like_count":0},{"had_liked":false,"id":273857,"user_name":"大雄","can_delete":false,"product_type":"c1","uid":2396269,"ip_address":"","ucode":"BABD97EBBB1394","user_header":"https://static001.geekbang.org/account/avatar/00/24/90/6d/705f3874.jpg","comment_is_top":false,"comment_ctime":1610697665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610697665","product_id":100039001,"comment_content":"问个问题，就是controller中调用service,里面需要写业务代码么，还是说整个方法都写在service里面，还有建议是如果这个功能没有复用的概率，那就不需要定义接口。所以这个怎么来界定边界呢","like_count":0},{"had_liked":false,"id":273748,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1610670000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610670000","product_id":100039001,"comment_content":"各层之间的数据模型不要共用，主要是因为稳定性不同，各层数据模型的变更原因和变更速率是不同的，离 IO 设备越近的的稳定性越差，比如说 controller 层的 VO，rep 层的 entity。Domain 层是核心业务逻辑和核心业务数据，稳定性是最高的","like_count":0},{"had_liked":false,"id":271035,"user_name":"不二先生","can_delete":false,"product_type":"c1","uid":1359635,"ip_address":"","ucode":"60D9800369CC33","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELEVMHiad4wERgib6x90kI81JZhzIvQeXMju6WohePAlfjWD3gHibapVNX88G4R29Ujcbiap1Bfz0Efmg/132","comment_is_top":false,"comment_ctime":1609378418,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609378418","product_id":100039001,"comment_content":"课堂讨论：<br>问题1. 目前我所经历的项目，大多是传统的开发模式，优势是开发周期短，劣势是可复用性低<br>问题2. 不能合并为一个类，因为 UserEntity 主要是对于表的字段，UserEntity 对应返回给客户端的字段，如果合并为一个类，会导致无法复用性","like_count":0},{"had_liked":false,"id":270801,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1609281713,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609281713","product_id":100039001,"comment_content":"充血模型符合面向对象，业务逻辑内聚，强制模型设计时业务核心逻辑要前置考虑","like_count":0},{"had_liked":false,"id":268140,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1608083371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608083371","product_id":100039001,"comment_content":"有没有必要每一层单独实体?拆分的原因无非是为了单一职责。从mvc的视角来看，模型和视图是应该分开的。所以，至少要有vo和bo. 如果bo和do数据基本一致，业务逻辑简单，那可以考虑这两个实体类合并。毕竟，大部分需求都是针对数据表crud.","like_count":0},{"had_liked":false,"id":266463,"user_name":"REAL_MADIRD","can_delete":false,"product_type":"c1","uid":1012889,"ip_address":"","ucode":"9E327B5456739D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/99/dbdee494.jpg","comment_is_top":false,"comment_ctime":1607347467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607347467","product_id":100039001,"comment_content":"之前看招聘需求上说熟悉ddd，一直不知道是什么东东，今天算是一知半解了，话说互联网这新名词可真多","like_count":0},{"had_liked":false,"id":255859,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1603444877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603444877","product_id":100039001,"comment_content":"如果充血模型中的类 数据+代码结合在一起，而且这个类在很多地方用到，如果每个地方只用此类中的某些逻辑，类会过于庞大吗","like_count":0},{"had_liked":false,"id":255346,"user_name":"紫日","can_delete":false,"product_type":"c1","uid":1207410,"ip_address":"","ucode":"73A8DEE323AC19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","comment_is_top":false,"comment_ctime":1603327293,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1603327293","product_id":100039001,"comment_content":"存在就有道理，复杂度没有上来不必要引入解决复杂问题的方法，简单够用最好。","like_count":0},{"had_liked":false,"id":253780,"user_name":"俄国的一盘桃子","can_delete":false,"product_type":"c1","uid":2220264,"ip_address":"","ucode":"DB9BFB35A54377","user_header":"https://static001.geekbang.org/account/avatar/00/21/e0/e8/a2d033fa.jpg","comment_is_top":false,"comment_ctime":1602871097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602871097","product_id":100039001,"comment_content":"我一直觉得领域设计是要做的，不过领域设计出来后，是用ddd来写还是用贫血模式来写这个不是特别重要，因为你的设计在这里，你要follow这个设计不过你要用什么实现手段，你都要抽象来符合你的设计，除非你设计都没有也不理会任何设计，那写出来的代码就是日后的垃圾。。。。","like_count":0},{"had_liked":false,"id":248446,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1600165087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600165087","product_id":100039001,"comment_content":"【要点】<br>1、什么是基于贫血模型的传统开发模式？<br>MVC 三层架构中的 M 表示 Model，V 表示 View，C 表示 Controller。它将整个项目分为三层：展示层、逻辑层、数据层。其中，我们用到很多数据类，只包含数据，不包含业务逻辑的类，就叫作贫血模型（Anemic Domain Model），模型将数据与操作分离，破坏了面向对象的封装特性，是一种典型的面向过程的编程风格。<br>2、什么是基于充血模型的 DDD 开发模式？<br>充血模型（Rich Domain Model），数据和对应的业务逻辑被封装到同一个类中。因此，这种充血模型满足面向对象的封装特性，是典型的面向对象编程风格。<br>领域驱动设计，即 DDD，主要是用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。<br>做好领域驱动设计的关键是，看你对自己所做业务的熟悉程度，而并不是对领域驱动设计这个概念本身的掌握程度。即便你对领域驱动搞得再清楚，但是对业务不熟悉，也并不一定能做出合理的领域设计。<br>基于充血模型的 DDD 开发模式实现的代码，也是按照 MVC 三层架构分层的。它跟基于贫血模型的传统开发模式的区别主要在 Service 层。在基于充血模型的 DDD 开发模式中，Service 层包含 Service 类和 Domain 类两部分。Domain 就相当于贫血模型中的 BO。不过，Domain 与 BO 的区别在于它是基于充血模型开发的，既包含数据，也包含业务逻辑。而 Service 类变得非常单薄。总结一下的话就是，基于贫血模型的传统的开发模式，重 Service 轻 BO；基于充血模型的 DDD 开发模式，轻 Service 重 Domain。<br>3、为什么基于贫血模型的传统开发模式如此受欢迎？<br>第一点原因是，大部分情况下，我们开发的系统业务可能都比较简单，简单到就是基于 SQL 的 CRUD 操作，所以，我们根本不需要动脑子精心设计充血模型，贫血模型就足以应付这种简单业务的开发工作。<br>第二点原因是，充血模型的设计要比贫血模型更加有难度。因为充血模型是一种面向对象的编程风格。我们从一开始就要设计好针对数据要暴露哪些操作，定义哪些业务逻辑。<br>第三点原因是，思维已固化，转型有成本。基于贫血模型的传统开发模式经历了这么多年，已经深得人心、习以为常。<br>4、什么项目应该考虑使用基于充血模型的 DDD 开发模式？<br>对于业务不复杂的系统开发来说，基于贫血模型的传统开发模式简单够用，基于充血模型的 DDD 开发模式有点大材小用，无法发挥作用。相反，对于业务复杂的系统开发来说，基于充血模型的 DDD 开发模式，因为前期需要在设计上投入更多时间和精力，来提高代码的复用性和可维护性，所以相比基于贫血模型的开发模式，更加有优势。<br>【思考】<br>1、目前为止还没开发过充血模型的代码，感觉充血模型里的Domain类似于业务中台的概念，可以讲核心业务包装，对外提供特定业务范围的服务。<br>2、Entity、Bo、Vo最好做成一个类，BO和VO是业务强相关的，随着需求变化而变化的，Entity是相对稳定的。另外就是，可以理解为BO和VO是对Entity数据的一种重新组合和封装，只对业务层暴露需要的数据，间接保证了数据安全。","like_count":0},{"had_liked":false,"id":245880,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599101112,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599101112","product_id":100039001,"comment_content":"<br>问题一：<br>1、主要时偏向于贫血模型。<br>2、充血模式：数据+业务构成的业务中间层，相对较少。<br><br><br>问题二：<br>1、不可以，entity针对的是数据库的字段，bo是业务使用的字段，vo是跟调用方的协议字段<br>","like_count":0},{"had_liked":false,"id":243323,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1598059440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598059440","product_id":100039001,"comment_content":"iOS是标准的MVC架构，但View和Controller耦合在一起，导致ViewController会变得异常庞大，难以维护。为了解决这个问题，发展出了MVVM架构，通过ViewModel分担VC中的复杂业务逻辑，而MVVM中的胖Model和瘦Model分别和充血、贫血模式类似。瘦Model提倡DataModel只应该包含Json的转换和Model的创建，胖Model提倡DataModel还应该封装与自身数据相关的业务逻辑。当时只记住了胖Model的业务可能会不断膨胀，越来越胖，最后导致难以维护，所以在开发过程中有意忽略了胖Model，后面开发过程会尝试把胖Model用起来，有对比才有进步。","like_count":0},{"had_liked":false,"id":242093,"user_name":"鲲鹏飞九万里","can_delete":false,"product_type":"c1","uid":1093920,"ip_address":"","ucode":"82BD0C789DF612","user_header":"https://static001.geekbang.org/account/avatar/00/10/b1/20/8718252f.jpg","comment_is_top":false,"comment_ctime":1597588519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597588519","product_id":100039001,"comment_content":"1. 开发中，有涉及到计算胜率到，我就在get方法中写了业务逻辑。那这样是不是就是充血模式了；<br>2. 在开发中，我就把VO+BO+Entity 合成一个用的。现在还不理解，作者为什么要将其分开；","like_count":0},{"had_liked":false,"id":240844,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1597102425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597102425","product_id":100039001,"comment_content":"1 基本都是贫血模型。<br>2 UserEntity、UserBo、UserVo大部分情况不能合并为一个类，有访问权限的影响。","like_count":0},{"had_liked":false,"id":239076,"user_name":"owen","can_delete":false,"product_type":"c1","uid":1902116,"ip_address":"","ucode":"0E79DA9080A085","user_header":"https://static001.geekbang.org/account/avatar/00/1d/06/24/c2ee3b16.jpg","comment_is_top":false,"comment_ctime":1596427995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596427995","product_id":100039001,"comment_content":"对于敏捷开发使用DDD是否适用？<br>本身敏捷开发模式更类似于面向过程编程对于未知的业务逻辑，无法预知的业务变更，如果要使用DDD怎样才能更好的结合?","like_count":0},{"had_liked":false,"id":239021,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1596417399,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596417399","product_id":100039001,"comment_content":"贫血模型重Service 轻BO<br>充血模型重Domain 轻 Service","like_count":0},{"had_liked":false,"id":238771,"user_name":"火影.海诺","can_delete":false,"product_type":"c1","uid":2091565,"ip_address":"","ucode":"34729AFEE93B6D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/ea/2d/34cb8e0a.jpg","comment_is_top":false,"comment_ctime":1596289972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596289972","product_id":100039001,"comment_content":"面向CURD开发","like_count":0},{"had_liked":false,"id":238500,"user_name":"小昊子","can_delete":false,"product_type":"c1","uid":1066084,"ip_address":"","ucode":"AD5220A57690B8","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/64/4c4c2c6e.jpg","comment_is_top":false,"comment_ctime":1596185376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596185376","product_id":100039001,"comment_content":"用贫血模式同样开发过复杂的系统","like_count":0,"discussions":[{"author":{"id":1050335,"avatar":"https://static001.geekbang.org/account/avatar/00/10/06/df/60126ff3.jpg","nickname":"0bug","note":"","ucode":"CADCC882F31784","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236258,"discussion_content":"有并发问题","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1587084724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1467219,"avatar":"https://static001.geekbang.org/account/avatar/00/16/63/53/b4590ccc.jpg","nickname":"阿文","note":"","ucode":"B53454CA52BD7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288640,"discussion_content":"父节点处理有问题吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593830957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237336,"user_name":"写代码的","can_delete":false,"product_type":"c1","uid":2085090,"ip_address":"","ucode":"F58186409A3D65","user_header":"https://static001.geekbang.org/account/avatar/00/1f/d0/e2/1d00c079.jpg","comment_is_top":false,"comment_ctime":1595783420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595783420","product_id":100039001,"comment_content":"1. 见过的贫血模型有将数据封装在 A 类中，将逻辑放在 AHelper 中。<br>2. 和很多原则和模式一样，是否合并得结合实际情况。不熟悉后端的开发模式，对于客户端开发，我觉得，如果百年不变，即使变化也是一致性的变化的数据类，我觉得可以合并；如果可能会在后面分化，我觉得还是不要合并，各自拷贝一份。如果不确定，先合并，然后出现分化及时将其分离，否则当代码遍布项目时再去分离牵一发而动全身。","like_count":0},{"had_liked":false,"id":237257,"user_name":"天空、海阔","can_delete":false,"product_type":"c1","uid":1318078,"ip_address":"","ucode":"9BCB64EF9A5894","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/be/fd1a9a3a.jpg","comment_is_top":false,"comment_ctime":1595757245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595757245","product_id":100039001,"comment_content":"1. 大部分都是贫血模型，基于sql驱动开发的，难过。没想到ddd用到的  2. 这个感觉不可以，vo bo entity的字段可能是不同的，比如对于sex, entity可能存储是0，1。但vo返回是男女。entity可能字段比较多，vo只需要返回部分数据等。如果要公用一个必须要强制字段相同，这样的类不能满足各个层的需要。","like_count":0},{"had_liked":false,"id":236100,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1595316648,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1595316648","product_id":100039001,"comment_content":"我以前写的业务代码应该也大多是贫血模型，偶尔可能在按照书本练习的时候写过一些充血模型。<br><br>看到留言里面有同学问 Entity、BO、VO 的区别，我从概念上能够理解，但是在现实代码中并没有用到过，感觉上似乎也没有什么差别。可能有字段名称或者显示方式的不同，但是有必要分成三个实体类么？<br><br>有一个问题，就是有没有可能先写贫血模型，保证项目快速上线，然后在以后的需求变化或者重构过程中，转化为充血模型？<br><br>有时间的话，也打算去看一下隔壁的 DDD 专栏。","like_count":0},{"had_liked":false,"id":234706,"user_name":"cw","can_delete":false,"product_type":"c1","uid":1264296,"ip_address":"","ucode":"82A6B50462F9F9","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/a8/b7e36dd2.jpg","comment_is_top":false,"comment_ctime":1594776980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594776980","product_id":100039001,"comment_content":"但是很多系统被设计之初都没有思考太多服务领域问题。。都随着业务走，然后业务耦合 贫血 ","like_count":0},{"had_liked":false,"id":232021,"user_name":"御风","can_delete":false,"product_type":"c1","uid":1812807,"ip_address":"","ucode":"51C8212BE06364","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","comment_is_top":false,"comment_ctime":1593833571,"is_pvip":false,"replies":[{"id":"86253","content":"一般没有facade吧，如果有的话，应该是在controller层之上的吧，而不是在service层之上吧","user_name":"作者回复","comment_id":232021,"uid":"1190123","ip_address":"","utype":1,"ctime":1594388155,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1593833571","product_id":100039001,"comment_content":"现在的项目分为controller、facade、service、dao四层，facade和service两层的具体分工是什么？需要共用BO还是有各自的BO？","like_count":0,"discussions":[{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561386,"discussion_content":"这个对于文件树很宽的结构有优化，但是对于文件树很深的结构的优化有限。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649614172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307500,"discussion_content":"你这个不错，我偷了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600671759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278917,"discussion_content":"兄弟，既然你把本层文件数和文件大小都缓存了，那么调用递归方法countNumOfFiles和countSizeOfFiles计算所有文件数和大小的时候，就应该把本层的文件过滤掉，不然想到于你算了两次啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591256427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290213,"discussion_content":"他的countNumOfFiles和countSizeOfFiles遍历的就是子目录的不包含本层的，遍历的是subDirectory而不是subNodes，你仔细看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594377980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":278917,"ip_address":""},"score":290213,"extra":""}]}]},{"had_liked":false,"id":226185,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1591973885,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1591973885","product_id":100039001,"comment_content":"每次开始搭建一个web项目的时候，总是想entity、bo、vo如何处理的问题。比如最近刚开始做的一个电商项目，我就一个vo行天下了（考虑到基本上就是crud，这几个都长得差不多，如果三层直接都转一次，会非常麻烦与浪费资源）。但是总是觉得带来了很大的耦合，就像constants、utils之类的东西到处引用。还有关于service同层之间是否可以相互调用、repository到处引用等等问题，不懂如何做分离封装，深深困扰，有没有朋友给点建议","like_count":0},{"had_liked":false,"id":221561,"user_name":"永远不要低估一颗冠军的心","can_delete":false,"product_type":"c1","uid":1339230,"ip_address":"","ucode":"FF0DD7382CD3CA","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/5e/3f7e9ccd.jpg","comment_is_top":false,"comment_ctime":1590540612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590540612","product_id":100039001,"comment_content":"我经历的项目都是基于贫血模式开发的，都是小系统","like_count":0},{"had_liked":false,"id":221551,"user_name":"永远不要低估一颗冠军的心","can_delete":false,"product_type":"c1","uid":1339230,"ip_address":"","ucode":"FF0DD7382CD3CA","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/5e/3f7e9ccd.jpg","comment_is_top":false,"comment_ctime":1590538743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590538743","product_id":100039001,"comment_content":"不可以合并为一个类，但是可以把公共的部分抽出来","like_count":0},{"had_liked":false,"id":216912,"user_name":"师哥","can_delete":false,"product_type":"c1","uid":1333376,"ip_address":"","ucode":"A86CD1661D370F","user_header":"https://static001.geekbang.org/account/avatar/00/14/58/80/c9e232b6.jpg","comment_is_top":false,"comment_ctime":1589368074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589368074","product_id":100039001,"comment_content":"如果按照领域模型设计这些可以抽象出来一个领域类，作为领域模型设计的中间层复用代码","like_count":0},{"had_liked":false,"id":210422,"user_name":"高鹏0409","can_delete":false,"product_type":"c1","uid":1928337,"ip_address":"","ucode":"1833CA764B6A46","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/91/8268a753.jpg","comment_is_top":false,"comment_ctime":1587742403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587742403","product_id":100039001,"comment_content":"大部分crud都是贫血模型，甚至无entity类。","like_count":0},{"had_liked":false,"id":208899,"user_name":"落尘kira","can_delete":false,"product_type":"c1","uid":1092169,"ip_address":"","ucode":"D203B519E43F85","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","comment_is_top":false,"comment_ctime":1587461095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587461095","product_id":100039001,"comment_content":"惨痛的历史经验告诉我，使用DDD建立领域模型时，必须要求2人以上一起制定模型，绝对不允许仅由一个人来制定！开发的整个过程中，理论上除了联调测试时间（变数大），设计模型的时间应该是要占大头的。","like_count":0},{"had_liked":false,"id":205788,"user_name":"铁血柔情","can_delete":false,"product_type":"c1","uid":1124220,"ip_address":"","ucode":"F09CACF06B8D05","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/7c/463d4342.jpg","comment_is_top":false,"comment_ctime":1586739713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586739713","product_id":100039001,"comment_content":"我们现在开发模式全部是贫血模式，但是要求代码可复用。第二个问题我是将公共字段比如说isdeleted等字段抽成一个公用类，但是其他的业务字段还是在这三个类中，不能做合并，因为有的时候业务的要求导致不能混合在一起。三个类展示很清晰，entity就是参数使用，po数据库映射使用，vo是结果集展示使用。","like_count":0},{"had_liked":false,"id":205117,"user_name":"凯玲","can_delete":false,"product_type":"c1","uid":1246373,"ip_address":"","ucode":"CF152D36B8EC70","user_header":"https://static001.geekbang.org/account/avatar/00/13/04/a5/a12612e4.jpg","comment_is_top":false,"comment_ctime":1586531778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586531778","product_id":100039001,"comment_content":"个人觉得：都是mvc，贫血型  VS  充血型。代码从这里放到了那里，并没有解决什么根本性问题。面向过程说的有些过度了。","like_count":0},{"had_liked":false,"id":204177,"user_name":"makermade","can_delete":false,"product_type":"c1","uid":1133194,"ip_address":"","ucode":"03386B90CB8F20","user_header":"https://static001.geekbang.org/account/avatar/00/11/4a/8a/c1069412.jpg","comment_is_top":false,"comment_ctime":1586346838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586346838","product_id":100039001,"comment_content":"做核心中间件等复杂的项目时，基于DDD开发，会更聚焦，更稳定，便于迭代","like_count":0},{"had_liked":false,"id":203780,"user_name":"reminis","can_delete":false,"product_type":"c1","uid":1020530,"ip_address":"","ucode":"43E5F6A610E846","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/72/c3b36a77.jpg","comment_is_top":false,"comment_ctime":1586266047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586266047","product_id":100039001,"comment_content":"&quot;领域模型相当于可复用的业务中间层&quot;，这句话说到心坎儿里去了。有次在团队中评审有关账务核销和信用那块的业务代码，刚开始是一整大块业务流，总感觉看着不舒服。多个交叉的业务流交叉在了一起，不仅看起来很复杂，也不利于维护。于是就想到了面向对象（当时并不了解ddd这个概念），考虑如何把业务流程整合成类，应该把哪些暴露出来，哪些又是可扩展的等等，最后就封装成了可复用的业务类。今天看到老师提到了“可复用的业务中间层”，一下子就想起来了，多谢老师","like_count":0},{"had_liked":false,"id":203581,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1586236123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586236123","product_id":100039001,"comment_content":"第一次听贫血模型这个概念，按照mvc架构的模型分析，openstack源码，总体来感觉是把数据库操作，对外接口，业务逻辑处理方法，分别进行归类，方便代码组织和维护及开发","like_count":0},{"had_liked":false,"id":203338,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1586177078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586177078","product_id":100039001,"comment_content":"打卡11","like_count":0},{"had_liked":false,"id":203083,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1586137977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586137977","product_id":100039001,"comment_content":"在业务中如果不用贫血模式，工作进度慢，会怎么办，用充血模式，功力发不出来，懂的人不多。","like_count":0},{"had_liked":false,"id":202498,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1585996692,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1585996692","product_id":100039001,"comment_content":"基本业务系统的开发，大多都是贫血模型的开发模式。<br>基础技术框架的开发，大多都是充血模型的DDD开发模式。","like_count":0},{"had_liked":false,"id":202461,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1585992122,"is_pvip":false,"discussion_count":2,"race_medal":1,"score":"1585992122","product_id":100039001,"comment_content":"贫血型是什么意思？这个背景知识不知道哇，望作者解释一下。","like_count":0,"discussions":[{"author":{"id":1959822,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","nickname":"Spoon","note":"","ucode":"2FF9193AD482C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371836,"discussion_content":"减少DB的访问可以加一层cache，一般员工的调薪也是固定日期的，不常变化，是一种读多写少的场景。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1620013060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1644104,"avatar":"https://static001.geekbang.org/account/avatar/00/19/16/48/09493874.jpg","nickname":"茶没喝完","note":"","ucode":"D72D88C42A1258","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386316,"discussion_content":"如果数据量不大，一般的公司顶多1万人，可以分几次从db读取内存，构建树时就不用循环读取db；如果数据量多大，比如千万条记录，不可能都加载到内存，只能循环加载了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1627525248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1186044,"avatar":"https://static001.geekbang.org/account/avatar/00/12/18/fc/a0f8a88d.jpg","nickname":"uranusleon","note":"","ucode":"3CD5222E590A92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200178,"discussion_content":"我看代码里面，薪酬是存在Department里面的，在第一次创建组织的时候初始化的，计算时不需要从数据库获取数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583665326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201449,"user_name":"bbbi","can_delete":false,"product_type":"c1","uid":1682175,"ip_address":"","ucode":"9A539AEF791428","user_header":"https://static001.geekbang.org/account/avatar/00/19/aa/ff/e2c331e0.jpg","comment_is_top":false,"comment_ctime":1585789863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585789863","product_id":100039001,"comment_content":"很多的公司都缺乏业务能力和技术能力都高的架构设计，包括表的设计。5岁小孩用50斤大锤干活，不一定有用5斤锤子干活快","like_count":0},{"had_liked":false,"id":200691,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1585638561,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585638561","product_id":100039001,"comment_content":"UserEntity、UserBo、UserVo是为了解耦吧，不该合并为一个类，如果合并为一个类，改了其中一个，各层都得改。","like_count":0},{"had_liked":false,"id":197538,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1585384134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585384134","product_id":100039001,"comment_content":"实际的开发中，Entity和Bo都是复用的，当然主要是内部系统之间，而RPC层有人会用Vo命名。","like_count":0},{"had_liked":false,"id":196040,"user_name":"改名不换人","can_delete":false,"product_type":"c1","uid":1118242,"ip_address":"","ucode":"7E25577829FA0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/22/910f705c.jpg","comment_is_top":false,"comment_ctime":1585232199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585232199","product_id":100039001,"comment_content":"1 没用过充血模型，几乎都是贫血模型的面向过程开发，因为快，而且需求变化快，用领域驱动设计，可能刚设计完还没写呢，就变了。<br>2 三个很相似但是不能合并成一个，我觉得这是遵守面向对象设计原则，每一层对外暴露最基本的也是最少的信息就可以了，如果合并到一起，肯定是大而全。","like_count":0},{"had_liked":false,"id":195909,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1585223454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585223454","product_id":100039001,"comment_content":"1.我是一个前端，以前用angularJS 的时候有 MVC 架构。开发也就是贫血模型开发的。其他的做的项目也大多数是贫血模型开发，我下这个结论的原因是：没有面向对象开发，东西很难复用。<br><br>贫血模式：面向过程开发，将数据和业务分类开，破坏了面向对象的封装特性。<br>充血模式：面向对象开发，数据和对应的逻辑放到一个类里面。","like_count":0},{"had_liked":false,"id":190329,"user_name":"索旭东","can_delete":false,"product_type":"c1","uid":1139039,"ip_address":"","ucode":"BFD07BCD8C8CAE","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/5f/b279daaf.jpg","comment_is_top":false,"comment_ctime":1584629421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584629421","product_id":100039001,"comment_content":"期待DDD的学习","like_count":0},{"had_liked":false,"id":190265,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1584624831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584624831","product_id":100039001,"comment_content":"二刷复习。<br><br>先回答问题：<br>1.一直是sql驱动开发。<br>2.不可以。每一层的实体尽管字段一致，但是承担不同的职责，如vo负责展示，entity负责数据库操作。如果三层使用同一个类，某一层的变动的影响将波及整个应用，违反单一职责，增加了各层之间的耦合。<br><br>立个flag:<br>专栏里的案例代码都要自己手敲一遍。加深对设计模式的理解。","like_count":0},{"had_liked":false,"id":189961,"user_name":"lwb123","can_delete":false,"product_type":"c1","uid":1873948,"ip_address":"","ucode":"B042BB2D66C754","user_header":"https://static001.geekbang.org/account/avatar/00/1c/98/1c/728c01df.jpg","comment_is_top":false,"comment_ctime":1584586043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584586043","product_id":100039001,"comment_content":"能用sql就把需求完成，那确实简单。我做游戏的，虽然大佬说项目用mvc，但确实整出来却像ddd","like_count":0},{"had_liked":false,"id":188075,"user_name":"刘爽","can_delete":false,"product_type":"c1","uid":1030794,"ip_address":"","ucode":"3763C72661AC1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/8a/a9cbb922.jpg","comment_is_top":false,"comment_ctime":1584320358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584320358","product_id":100039001,"comment_content":"一直贫血中，不仅贫血，而且失血，直接在controller中操作Model或写SQL了，返回hashMap。","like_count":0},{"had_liked":false,"id":186378,"user_name":"mo","can_delete":false,"product_type":"c1","uid":1595176,"ip_address":"","ucode":"FB3E8C827BE5CC","user_header":"https://static001.geekbang.org/account/avatar/00/18/57/28/be7550d2.jpg","comment_is_top":false,"comment_ctime":1583832129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583832129","product_id":100039001,"comment_content":"老师，怎么感觉这讲的是失血模型呢，贫血模型BO里应该还需要包含原子服务，而例子中的BO只有get，set方法。是我理解错了吗","like_count":0},{"had_liked":false,"id":185903,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1583722772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583722772","product_id":100039001,"comment_content":"贫血导致的后果就是没有重构，只有重写，改别人的代码还没有自己重写快。你可以费尽心思写漂亮的代码，但是代码质量不是评分标准啊，任务数才是KPI。就提高个人能力上讲，还是需要学习如何把代码写好，但是坚持下来很困难。一切为deadline服务。","like_count":0},{"had_liked":false,"id":185210,"user_name":"_yh葱","can_delete":false,"product_type":"c1","uid":1622209,"ip_address":"","ucode":"FA899711E91113","user_header":"https://static001.geekbang.org/account/avatar/00/18/c0/c1/414d5d1b.jpg","comment_is_top":false,"comment_ctime":1583516831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583516831","product_id":100039001,"comment_content":"想知道service和Domain怎样划分呢？","like_count":0},{"had_liked":false,"id":183628,"user_name":"一区","can_delete":false,"product_type":"c1","uid":1793770,"ip_address":"","ucode":"B5142A6276E490","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/a2mRI7BYncHCL6QWfibe7g7MWc70fSsqQibu7o9PcHjicYwo5dSnAoUN75HDDRz4GXWJdpWw59yJsMwFv3t7zSiaJQ/132","comment_is_top":false,"comment_ctime":1583080406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583080406","product_id":100039001,"comment_content":"我理解的DDD:设计软件时完全从业务角度考虑 舍弃技术。设计类时完全从业务角度考虑 舍弃数据库。而DDD中的事件风暴等战略设计 和中台的一部分思想不谋而合。不过中台的视野是站在更高的公司角度，DDD可大可小","like_count":0},{"had_liked":false,"id":183433,"user_name":"三年级2班 陈同学","can_delete":false,"product_type":"c1","uid":1639318,"ip_address":"","ucode":"5242BA5A1AACE1","user_header":"https://static001.geekbang.org/account/avatar/00/19/03/96/3def6d95.jpg","comment_is_top":false,"comment_ctime":1583038367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583038367","product_id":100039001,"comment_content":"@老师，能不能给非java的同学，在学习过程中感到吃力一些建议？","like_count":0},{"had_liked":false,"id":183273,"user_name":"三年级2班 陈同学","can_delete":false,"product_type":"c1","uid":1639318,"ip_address":"","ucode":"5242BA5A1AACE1","user_header":"https://static001.geekbang.org/account/avatar/00/19/03/96/3def6d95.jpg","comment_is_top":false,"comment_ctime":1582984821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582984821","product_id":100039001,"comment_content":"phper一名，没有学过java, 举的例子看的有点懵，什么OB OV ..这些概念不理解，是不是先学好java呢。。。再看教程呢","like_count":0},{"had_liked":false,"id":182051,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1582700202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582700202","product_id":100039001,"comment_content":"我们web刚开始就一个entity对象，包括表单Form、Bo、Vo 都在一个 POJO 中，后来稍微进步了一点，把表单Form单独定义成一个POJO。不过业务都是 SQL 查数据库后返回，定义多个 POJO 有时感觉还更麻烦了","like_count":0},{"had_liked":false,"id":181518,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1582553884,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582553884","product_id":100039001,"comment_content":"今天主要提到了贫血模型的mvc开发的缺陷以及盛行的原因，其实从前端的开发中可以发现简单逻辑的接口使用贫血模型贼爽，主要是因为我们习惯了基于数据库单位开发模式，而且DDD虽然听起来不错，但是对于简单逻辑没什么区别和优势，所以前端累需求我还是倾向使用贫血模型，但是DDD提供了一种领域开发模式，未来随着业务的复杂一定有其用武之地去所以平时也会花时间了解DDD的相关知识，为将来做储备。不过目前虽然前端类需求都使用贫血模式开发，但是随着各种vo、bo类的增加，很多字段的重复确实是一个问题，目前的想法是将具有业务相关性的（同一类业务）的字段放在一个公共类中。不知道大家有没有更好的实践，不过从解决的问题来说，本质上是为了代码的可维护性喝可扩展性。","like_count":0},{"had_liked":false,"id":180705,"user_name":"疯狂的石头","can_delete":false,"product_type":"c1","uid":1763900,"ip_address":"","ucode":"65CE6EB494FDCA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ea/3c/24cb4bde.jpg","comment_is_top":false,"comment_ctime":1582368245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582368245","product_id":100039001,"comment_content":"争哥，学生党没用过MVC，对于Repository,service,controller理解也不深入。。。总觉得一知半解。","like_count":0},{"had_liked":false,"id":180127,"user_name":"junmawang","can_delete":false,"product_type":"c1","uid":1763466,"ip_address":"","ucode":"977E9E25CE6C94","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/8a/803a42e0.jpg","comment_is_top":false,"comment_ctime":1582194032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582194032","product_id":100039001,"comment_content":"一直以来一直在用贫血模式进行开发，真心觉得随着项目运行到后期越是改不动，一个service方法多大几百行，都是由sql驱动的开发模式，一堆类似的sql，多表联查，甚至会有很多大sql，包含业务逻辑的sql。<br><br>针对问题二：Entity是ORM中数据库映射的实体类，BO是业务操作相关实体类，VO是视图层对应实体类，三者还是不能共用，一旦其中任何一项有变更还是需要进行拆分。","like_count":0},{"had_liked":false,"id":180020,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582166637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582166637","product_id":100039001,"comment_content":"对于问题1,由于一直面对的业务需求并没有非常复杂,而且架构师和产品在设计的时候也没有过深入的考虑,一直采用的都是基于面向过程编程的贫血模型开发,但是自从学习这几天来,我认为可以去在代码重构的时候,去考虑使用基于DDD的充血模型开发模式,将一些诸如监控等服务,改为了DDD驱动的充血模型,像是更为简单的SQL驱动的用户服务模块,做到符合编码规范即可,而且基于贫血模型的开发模式已经够用了<br>对于问题2,我的观点是,虽然大部分相同,但是仍然不能合并为一个类,因为有些东西我们储存在数据库中,我们不希望直接在接口层暴露出来,以免被不怀好意之人获取到","like_count":0},{"had_liked":false,"id":174681,"user_name":"Will","can_delete":false,"product_type":"c1","uid":1440599,"ip_address":"","ucode":"15E7715ADDABE3","user_header":"https://static001.geekbang.org/account/avatar/00/15/fb/57/258a7ff6.jpg","comment_is_top":false,"comment_ctime":1580347930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580347930","product_id":100039001,"comment_content":"充血模型是数据和逻辑封装在一起，可是需求在不断的变动，是不是就导致这个model类在不断修改，反而觉得充血模型更解藕这部分内容，好像在使用上更方便了","like_count":0},{"had_liked":false,"id":173819,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1579707030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579707030","product_id":100039001,"comment_content":"贫血模式：service + vo， 其中vo只有数据没有逻辑，是重service轻vo的模式，本质上是sql驱动开发，适用于简单场景；<br>充血模式：service + domain, 其中domain包含了所有的数据和逻辑，是轻service重domain的模式，本质上是业务抽象驱动开发，适用于复杂场景；<br>","like_count":0},{"had_liked":false,"id":173100,"user_name":"Screenly","can_delete":false,"product_type":"c1","uid":1220387,"ip_address":"","ucode":"AF1FEDD17F5DC9","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/23/1b41af11.jpg","comment_is_top":false,"comment_ctime":1579424403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579424403","product_id":100039001,"comment_content":"贫血模式的开发天天在写，本文可谓一针见血，身边总是有人说赶快吧设计模式学了，但是不会结合，看很期待的课程以及如何运用到生产上，争哥很务实，很接地气，还有就是在开发当中，总是被不懂技术的销售(项目经理)，牵着鼻子走，项目很赶，调研不重视，坑的还是开发，很伤心","like_count":0},{"had_liked":false,"id":169119,"user_name":"厉害了我的国","can_delete":false,"product_type":"c1","uid":1052191,"ip_address":"","ucode":"CD0A54A1B998AA","user_header":"https://static001.geekbang.org/account/avatar/00/10/0e/1f/d0472177.jpg","comment_is_top":false,"comment_ctime":1578277037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578277037","product_id":100039001,"comment_content":"没有贫血，是失血。。spring把程序员变成了煞笔","like_count":0},{"had_liked":false,"id":167282,"user_name":"公号-彤哥读源码","can_delete":false,"product_type":"c1","uid":1239881,"ip_address":"","ucode":"C0D16E1BA12DA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/49/bd914b5f.jpg","comment_is_top":false,"comment_ctime":1577756378,"is_pvip":false,"replies":[{"id":"65136","content":"为啥非得跟web开发联系在一起呢","user_name":"作者回复","comment_id":167282,"uid":"1190123","ip_address":"","utype":1,"ctime":1577948594,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1577756378","product_id":100039001,"comment_content":"有个疑问，之前老师说的购物车那个例子，items不暴露get方法，怎么转成VO返回前端？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479809,"discussion_content":"为啥非得跟web开发联系在一起呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577948594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167244,"user_name":"宇","can_delete":false,"product_type":"c1","uid":1609795,"ip_address":"","ucode":"2110A4AA023AA0","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/43/38dda182.jpg","comment_is_top":false,"comment_ctime":1577750444,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1577750444","product_id":100039001,"comment_content":"提问:移动端也是采用～mvc、mvp、mvvm之类的三层架构；如果使用ddd的架构方式","like_count":0},{"had_liked":false,"id":167166,"user_name":"Jessica","can_delete":false,"product_type":"c1","uid":1084877,"ip_address":"","ucode":"9FC7E9BD3FE9F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/cd/b6bdc1b2.jpg","comment_is_top":false,"comment_ctime":1577704622,"is_pvip":false,"replies":[{"id":"65165","content":"好像没有😂","user_name":"作者回复","comment_id":167166,"uid":"1190123","ip_address":"","utype":1,"ctime":1577955375,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1577704622","product_id":100039001,"comment_content":"老师，按照我们之前的项目解决方案里，我们是采用了DDD分层架构，但是没有使用充血模型，依然使用了贫血模型，通篇没看到老师提基于贫血模型的DDD架构，我在想是没有这种用法吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479766,"discussion_content":"好像没有😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577955375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166914,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1577630064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577630064","product_id":100039001,"comment_content":"1 充血模型与贫血模型的区别：数据和业务是否分离<br>2 贫血模型的MVC模式更受欢迎的原因：业务和数据分离，更灵活，前期不需要投入过多的设计；充血模型需要投入更多的精力，来提高代码的复用性和维护性，并且需要深度了解业务。<br>虽然MVC是面向过程，DDD是面向对象。但从自己角度考虑，MVC的统一风格和思维方式通用性更强，门槛更低；而DDD对业务和抽象能力要求更高，门槛高。难上手，也许就是DDD流行程度不如MVC的原因吧","like_count":0},{"had_liked":false,"id":166777,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1577592772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577592772","product_id":100039001,"comment_content":"其实我个人偏向DDD的思想在平时的开发中，奈何同事喜欢面向过程，因此经常发生争论！","like_count":0},{"had_liked":false,"id":166760,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1577589464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577589464","product_id":100039001,"comment_content":"一、什么是基于贫血模型的传统开发模式？<br>只包含数据、不包含业务逻辑的类，叫作贫血模型。<br>比如我们平时开发所使用到的VO、BO、PO都只包含数据，都是基于贫血模型设计的，与操作分离，破坏了面向对象的封装特性，是面向过程的编程风格。<br><br>二、什么是基于充血模型的DDD开发模式？<br>1.充血模型与贫血模型想反，数据和对应的业务逻辑被封装到同一个类中，满足面向对象的封装特性，是面向对象编程风格。<br>2.领域驱动设计（DDD）,主要用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。<br>3.跟基于贫血模型的传统开发模式的区别主要在Service层。贫血模型中的Service层包含Service类和BO类，BO只包含数据，具体的业务逻辑都在Service类中。而充血模型的Service层包含Service类和Domain类，Domain既包含数据，也包含业务逻辑，Service类很单薄。<br>基于贫血模型的传统的开发模式，重 Service 轻 BO；基于充血模型的 DDD 开发模式，轻 Service 重 Domain。<br><br>三、为什么基于贫血模型的传统开发模式如此受欢迎？<br>1.大部分情况开发的系统业务都比较简单，不需要动脑子精心设计充血模型，贫血模型足以应对，如果简单的业务设计成充血模型，没有太大意义。<br>2.充血模型设计比贫血模型更加有难度。充血模式是一种面向对象的编程风格，一开始就要设计好针对数据要暴露哪些操作，定义哪些业务逻辑，而贫血模型一开始只需要定义数据，之后有什么功能开发需求直接在Service层定义。<br>3.思维已固化，转型有成本。转向用充血模型和DDD，肯定有一定的学习成本、转型成本，很多人不愿意做。<br><br><br>四、什么项目应该考虑使用基于充血模型的DDD开发模式？<br>对于业务不复杂的系统开发来说，基于贫血模型的传统开发模式简单够用，基于充血模型的 DDD 开发模式有点大材小用，无法发挥作用。相反，对于业务复杂的系统开发来说，基于充血模型的 DDD 开发模式，因为前期需要在设计上投入更多时间和精力，来提高代码的复用性和可维护性，所以相比基于贫血模型的开发模式，更加有优势。","like_count":0},{"had_liked":false,"id":166748,"user_name":"Yangjing","can_delete":false,"product_type":"c1","uid":1018061,"ip_address":"","ucode":"D88DFD4958D07C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/cd/2c3808ce.jpg","comment_is_top":false,"comment_ctime":1577586087,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577586087","product_id":100039001,"comment_content":"1. 基本上都是基于 贫血模型开发。充血模型的偶尔是那种稳定的，后面基本不会变化的，不然数据表字段都有可能改的。<br>2. 不可以合并成一个类。职责不同，它们后面变化的程序后面也不同，比如 VO\\BO 可能更会变化","like_count":0},{"had_liked":false,"id":166166,"user_name":"喵喵喵","can_delete":false,"product_type":"c1","uid":1211713,"ip_address":"","ucode":"E3AD8BF42E19DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/41/3c5b770b.jpg","comment_is_top":false,"comment_ctime":1577410144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577410144","product_id":100039001,"comment_content":"打卡～","like_count":0},{"had_liked":false,"id":165454,"user_name":"可乐","can_delete":false,"product_type":"c1","uid":1731817,"ip_address":"","ucode":"7E7BAB49C085E7","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6c/e9/2bb44600.jpg","comment_is_top":false,"comment_ctime":1577239591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577239591","product_id":100039001,"comment_content":"确实，时间成本是很关键的一点。再有就是做需求分析的人没有意识，总是基于当前的客户模糊的需求总结出想要的，然后阉割生产<br>","like_count":0},{"had_liked":false,"id":165318,"user_name":"东流","can_delete":false,"product_type":"c1","uid":1738147,"ip_address":"","ucode":"2715BC6E87BD83","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","comment_is_top":false,"comment_ctime":1577199713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577199713","product_id":100039001,"comment_content":"1.杀鸡用贫血模型，杀牛用充血模型<br>2.这三个类分别是view，control，model层的数据结构，不可以合并","like_count":0},{"had_liked":false,"id":164971,"user_name":"一壶浊酒","can_delete":false,"product_type":"c1","uid":1145530,"ip_address":"","ucode":"5D90F8F8121BBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/ba/8545f2d7.jpg","comment_is_top":false,"comment_ctime":1577118198,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577118198","product_id":100039001,"comment_content":"看了争哥的文章之后，发现我们公司的系统虽然用了domain类，但是还是将其存放各种实体，并且把bo 、vo都整合在了一起，这样也导致了提供数据接口的controller层将数据的所有字段都展示了出来，虽然对于不必要的字段没有实际的内容，但是全都展示出来感觉还是缺乏了一些安全性","like_count":0},{"had_liked":false,"id":164535,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1577022769,"is_pvip":false,"replies":[{"id":"67751","content":"这个不在专栏内容之内呀","user_name":"作者回复","comment_id":164535,"uid":"1190123","ip_address":"","utype":1,"ctime":1580122466,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1577022769","product_id":100039001,"comment_content":"老师, 我觉得设计数据库结构我也会犯一些问题, 但自己可能不知, 能否花一个时间讲讲数据库设计的坑","like_count":0},{"had_liked":false,"id":163282,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1576679682,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1576679682","product_id":100039001,"comment_content":"1.目前项目中基本都是贫血模型开发模式，对于老师说的充血模型概念还是有些抽象，我的理解是充血模型中的数据会做一部分的业务逻辑，然后service对业务逻辑进行组装（就相当于把贫血中的两个类BO与Service合并成一个类，并且在BO中做一些业务逻辑），另外对于业务复杂的系统采用充血有优势，系统的业务复杂度有没有一个可以直观一点的评判标准的？<br>2.第二个问题不赞同合并成一个类，毕竟Entity的需求变化基本很少，而涉及到BO以及VO的变化就我接触的业务而言，是很多的，另外分开的话职责明确，维护性，可读性会更好","like_count":0},{"had_liked":false,"id":163105,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1576657490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576657490","product_id":100039001,"comment_content":"贫血模型使用：<br>1.大部分业务简单，没必要设计<br>2.定义简单，只要定义几个简单的属性，充血还要想这个这个业务怎么这么设计，那个那个怎么设计<br>3.用的人多<br>适合业务简单<br><br>充血适合复杂的<br>如果全部在service层用(充血)，那么下次就很难复用(因为涉及到sql之类的东西，系统会越做越大)<br>如果在实体类中(贫血)，下次就能再继续用这个方法了","like_count":0},{"had_liked":false,"id":161847,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1576377919,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576377919","product_id":100039001,"comment_content":"贫血模型的开发模式其实就是一个流水线的操作，有需要了就往里面填充相关的代码，唉，一直贫血而不知道啊！","like_count":0},{"had_liked":false,"id":160575,"user_name":"零度","can_delete":false,"product_type":"c1","uid":1071119,"ip_address":"","ucode":"C121285CD9D999","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/0f/8ed4be99.jpg","comment_is_top":false,"comment_ctime":1575977703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575977703","product_id":100039001,"comment_content":"Python中django框架用的是MVT，想问下贫血模式和充血模式在django或python中是什么体现？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509974,"discussion_content":"嗯嗯 说的没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160496,"user_name":"cv0cv0","can_delete":false,"product_type":"c1","uid":1360093,"ip_address":"","ucode":"93FF9277F03FD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","comment_is_top":false,"comment_ctime":1575964678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575964678","product_id":100039001,"comment_content":"UserVo 和 UserBo 有什么区别？","like_count":0},{"had_liked":false,"id":160035,"user_name":"Geek_ecf7bb","can_delete":false,"product_type":"c1","uid":1523207,"ip_address":"","ucode":"5BF4DD62425BE0","user_header":"https://static001.geekbang.org/account/avatar/00/17/3e/07/c27b53b8.jpg","comment_is_top":false,"comment_ctime":1575859562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575859562","product_id":100039001,"comment_content":"工作一年多还没接触过充血模型的实践，对于第一个对比的问题没有太多的想法。而第二个问题，我的想法是之所以分这么多UserEntity、UserBo、UserVo，虽然带来了定义多个相似类的冗余，但是去能保证每层能按需求取得相应的数据，如果三合一的话，会带来很多冗余的数据返回，有时候也有可能带来不安全性。","like_count":0},{"had_liked":false,"id":159913,"user_name":"开心小毛","can_delete":false,"product_type":"c1","uid":1023762,"ip_address":"","ucode":"9D57A2773759F3","user_header":"","comment_is_top":false,"comment_ctime":1575824987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575824987","product_id":100039001,"comment_content":"在高吞吐量且服务器内存成为瓶颈时，贫血模型优于充血模式，原因如下：<br>为了节省内存，我们希望把不含数据的对象定义成Singleton，repository和service正是这样的对象。<br>而BO和VO则需要对每一个请求建立新的对象。<br>那么把业务逻辑放在BO和VO的充血模型会浪费更多的内存。","like_count":0},{"had_liked":false,"id":159725,"user_name":"宋意","can_delete":false,"product_type":"c1","uid":1229043,"ip_address":"","ucode":"2CCFDB02BA8ADF","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/f3/281ccb06.jpg","comment_is_top":false,"comment_ctime":1575763648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575763648","product_id":100039001,"comment_content":"不知道spirng等java框架的源码设计是不是DDD 充血模型，怪不得看不懂，想不明白，太复杂了","like_count":0},{"had_liked":false,"id":159442,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1575624822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575624822","product_id":100039001,"comment_content":"贫血模型的开发模式——<br>是一种在实体类中不包含逻辑的模式，MVC是典型的面向过程的编程风格，违背了OOP原则<br>适用的场景——<br>开发的项目小，业务不复杂<br>缺点——<br>1，是一种面向过程的编程风格，违背了OOP的原则<br>2，代码的可复用性差，后期维护困难<br>3，不适合复杂业务的开发<br><br>充血模型的开发模式<br>DDD开发模式，是一种真正的面向对象的编程的风格<br>需要在前期花大量的时间理清楚所有的业务，定义好领域模型中的属性和方法，把大量的时间和精力用在设计上<br><br>适用的场景——<br>业务复杂，项目庞大<br><br>缺点——<br>对于小项目来说，使用DDD开发模式其实是“大材小用”，所以不适合<br><br>优点——<br>1，提高了代码的可复用性<br>2，提高了后期的可维护性<br>3，适合复杂业务的开发，（前期需要花大量的时间在设计上）<br><br>为什么基于MVC的贫血模式那么受欢迎？<br>1，大多数人都是模仿别人的代码，别人的代码基本都是demo,没有复杂的业务逻辑，基本都是贫血模型<br>2，大多数人接触不到复杂的业务项目<br>3，做web项目的时候，基本上就是简单的CURE，贫血模型就能解决<br>4，公司以任务数量来衡量个人的价值<br>5，个人不考虑项目质量属性， 只关心当前业务，没有意识去思考后期该如何维护和响应业务变更<br>6，求快不求质<br>  7，个人以任务数来自我满足<br>    * 没有 60 分和 100 分的概念<br>  9、 需求分析、设计、编码合为一体<br><br><br>","like_count":0},{"had_liked":false,"id":159400,"user_name":"唐先生","can_delete":false,"product_type":"c1","uid":1592772,"ip_address":"","ucode":"3D68A1B3223B3F","user_header":"https://static001.geekbang.org/account/avatar/00/18/4d/c4/97253590.jpg","comment_is_top":false,"comment_ctime":1575614984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575614984","product_id":100039001,"comment_content":"现在我所在的项目组，我们组的系统就是按照DDD设计的，最开始接触的时候，比较难理解。在我们支付核心负责的系统，需要对接交易层各种支付业务。代扣，充值，提现，退款。都抽象成一个个领域模型。一个模型对应的其实是数据库的多张表，满足整个业务模型的。但是让我写，我还是不行的，确实是对业务不熟悉。","like_count":0},{"had_liked":false,"id":159146,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1575547814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575547814","product_id":100039001,"comment_content":"不仅仅是我自己所做过的项目都是贫血的，而且我所了解到的其他人（包括和我水平一样的，比我水平高的）的项目也都是贫血的；充血模型的项目一个也没有见过；是我落伍了？课后的习题与上一节课后的习题差不多吧，代码上一定程度的冗余是可以接受的，不要牺牲了业务上的灵活性为了设计而设计","like_count":0},{"had_liked":false,"id":158927,"user_name":"居培波","can_delete":false,"product_type":"c1","uid":1437396,"ip_address":"","ucode":"27A5A8D9D4682B","user_header":"https://static001.geekbang.org/account/avatar/00/15/ee/d4/204d0c6d.jpg","comment_is_top":false,"comment_ctime":1575502872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575502872","product_id":100039001,"comment_content":"一直贫血。保持代码整洁就别合并，不同层的实体类还是有差异的。","like_count":0},{"had_liked":false,"id":158879,"user_name":"王喜春","can_delete":false,"product_type":"c1","uid":1022349,"ip_address":"","ucode":"436E91FDED1B30","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/8d/4d5dbfc5.jpg","comment_is_top":false,"comment_ctime":1575469295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575469295","product_id":100039001,"comment_content":"关于DDD等充血模型没有较好落地，想到一个原因： 现在整个行业是投资驱动的，在大量资金涌入情况下，谁能快速占领市场谁就能活下来，这个背景下，贫血模型因可快速开发、让业务快速落地成了首选。在业务稳定后，以前的老兵引写码快，升了起来，转管理、聊需求后， 贫血模型也就被人为地固化下来。<br><br>现在能让DDD再引起重视的场景，可能是中台。","like_count":0},{"had_liked":false,"id":158481,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1575381669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575381669","product_id":100039001,"comment_content":"1.目前的确是处于贫血模型而不自知，主要也是受限于一条龙的数据获取服务，controller也是针对每一个domain数据的操作，围绕其的部分数据的修改，很多时候并不需要特别体现数据与方法封装一起的作用<br>2.除了Entity之外，很多时候也只是在返回页面的数据上会做一定的修改出现VO,而BO的确没有使用过，暂时觉得VO和Entity大部分时候其实是重叠的，而少部分需要处理的数据格式，内容是不一样的，需要视具体的情况而定","like_count":0},{"had_liked":false,"id":157925,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1575283742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575283742","product_id":100039001,"comment_content":"一直贫血  没有冲过血","like_count":0},{"had_liked":false,"id":157921,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1575283494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575283494","product_id":100039001,"comment_content":"觉得BO在系统里很少用","like_count":0},{"had_liked":false,"id":157861,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1575272912,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575272912","product_id":100039001,"comment_content":"现在才发现，披着微服务的皮，写着贫血的MVC而自以为很先进，设计模式和面向对象的基础压根就没落到实处，哎，还是需要大佬来提携才能少走很多的弯路","like_count":0},{"had_liked":false,"id":157632,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1575216370,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575216370","product_id":100039001,"comment_content":"[我们平时开发 Web 后端项目的时候，基本上都是这么组织代码的。其中，UserEntity 和 UserRepository 组成了数据访问层，UserBo 和 UserService 组成了业务逻辑层，UserVo 和 UserController 在这里属于接口层］还是没看明白之间的关系，主要用php开发后端，都是直接controller类与model类交互返回接口数据，是语言导致的区别？不是说跟语言无关吗 望解答 谢谢 &#47;smile ","like_count":0},{"had_liked":false,"id":157395,"user_name":"小刀","can_delete":false,"product_type":"c1","uid":1351063,"ip_address":"","ucode":"94DF8C45E09E42","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaByN5IfYbE9jMtWrtTDXtPEIHeV77KW1p7ZkiasiaGgA50VXaibo4fbp5ib2JkFP3iaIe4AUudLibufkEIofu5euCNHg/132","comment_is_top":false,"comment_ctime":1575130299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575130299","product_id":100039001,"comment_content":"一直都是MVC贫血<br>Model  DAO<br>service 服务层<br>controller 外部接口类+前端接口","like_count":0},{"had_liked":false,"id":157300,"user_name":"奔跑的小孩","can_delete":false,"product_type":"c1","uid":1304259,"ip_address":"","ucode":"0053193F7A9870","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/21uTMWr7bx5qMibp2hwmGvLbYuj5Aic2dqD3futlNo25eDGDt4t7zzN9cdnj7cVGwTot1U4AyADfWUpqjq1SicgWQ/132","comment_is_top":false,"comment_ctime":1575105109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575105109","product_id":100039001,"comment_content":"领域驱动模型适合做复杂的项目，是不是就相当于细化逻辑，代码的抽象呢，提取公用部分","like_count":0},{"had_liked":false,"id":157277,"user_name":"一剑","can_delete":false,"product_type":"c1","uid":1022127,"ip_address":"","ucode":"93ADD5B5215D4C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/af/3945cea4.jpg","comment_is_top":false,"comment_ctime":1575102019,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575102019","product_id":100039001,"comment_content":"个人觉得DDD最有价值的是战略部分，对于领域的拆分，业务的分析方法论，而落到代码这块就要根据自身的情况看采用哪种方式了，DDD也没有要求说有模块都必须采用充血模型啊","like_count":0},{"had_liked":false,"id":157248,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1575096744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575096744","product_id":100039001,"comment_content":"@乐<br>说的很对.大部分人的公司水平,技术水平.....","like_count":0},{"had_liked":false,"id":157206,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1575082529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575082529","product_id":100039001,"comment_content":"打卡<br>1、贫血模型的MVC架构分为三层：数据访问层（Respository、UesrEntity）、业务逻辑层（Service<br>、Bo）和接口层（Controller、Vo）；<br>2、充血模型中。Service层中分为两个类Service 类和 Domain 类两部分，Domain相当于贫血模型中的BO，但是Domain类是按面向对象的编程思想设计的，里面既有数据，也包含逻辑处理，核心的业务逻辑转移到Domain中，Service类变得单薄了。<br>3、两者之间的区别落实到实际开发中不只是类的设计的区别，开发流程也完全不一样。贫血模型开发中根据需求看如何获取数据，之后的事情都在Service类中完成，而充血模型中，需要根据需求整理业务，之后定义领域模型中的属性和方法。领域模型相当于和复用的业务中间层，新的上层业务需求和功能都基于定义好的这些领域模型开发。","like_count":0},{"had_liked":false,"id":157203,"user_name":"大强","can_delete":false,"product_type":"c1","uid":1737397,"ip_address":"","ucode":"D5C64C5A01B25D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/82/b5/a6049a26.jpg","comment_is_top":false,"comment_ctime":1575081610,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575081610","product_id":100039001,"comment_content":"1我们公司快节奏迭代几乎都是基于sql表驱动，大大的sql你写一次，我写一次，加上没有代码规范，很少有方法负用 2 这些差不多属性可以放入到一个专门的类中，以便负用","like_count":0},{"had_liked":false,"id":157201,"user_name":"happychap","can_delete":false,"product_type":"c1","uid":1388033,"ip_address":"","ucode":"C872B959BF2F3D","user_header":"https://static001.geekbang.org/account/avatar/00/15/2e/01/14a478bb.jpg","comment_is_top":false,"comment_ctime":1575080282,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575080282","product_id":100039001,"comment_content":"一直没能找到vo,bo和entity代码的复用方法...(*￣０￣)ノ，它们既存在诸多相同字段，同事它们又都需要承载各自所在层的职责，如：为简化前端工作，减少额外的http请求，vo就经常需要各类id字段对应的人类可理解的值，bo则可能根据业务需要由多个原生属性计算出新的属性，而entity又会存在诸好删除标记之类的对bo和vo透明的字段。把共用字段放基类里，若继承使用吧，vo所需的json字段验证注解对bo和entity又是多余的，若组合使用吧，vo层又得把相关字段包裹一遍，收益不大。期待老师指点迷津","like_count":0},{"had_liked":false,"id":157144,"user_name":"李公子胜治","can_delete":false,"product_type":"c1","uid":1455420,"ip_address":"","ucode":"7D48D78D289935","user_header":"https://static001.geekbang.org/account/avatar/00/16/35/3c/9800b0ba.jpg","comment_is_top":false,"comment_ctime":1575041802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575041802","product_id":100039001,"comment_content":"老师，您好，现在看来，好像您讲的都是基于web编程的内容，而我是C++程序员，没怎么接触过web编程，倒是这种网络通信代码写的很多，您能否讲一下基于C++如何做出类似于java的反射机制，从而实现IOC功能呢？","like_count":0},{"had_liked":false,"id":157040,"user_name":"咸鱼","can_delete":false,"product_type":"c1","uid":1179028,"ip_address":"","ucode":"5E79636DE48155","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","comment_is_top":false,"comment_ctime":1575016840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575016840","product_id":100039001,"comment_content":"早就有这种感觉了，一个sql几乎解决了大部分需要，service层都没有什么可以写的了，空荡荡的，每次都觉得很别扭，都说service层主要负责处理业务逻辑的，现在一看，啥玩意没有，别扭","like_count":0},{"had_liked":false,"id":156804,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1574960884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574960884","product_id":100039001,"comment_content":"目前做过的应该都是贫血DDD，甚至有些旧代码没有分业务实体，直接一个 Entity 贯穿 Repository 层、Service 层、Controller 层。自己目前会用到Entity，VO，DTO（看完本文感觉BO更好），然后有时会用Param<br>或Query用来接收参数。<br>然后，一直对 DDD 开发模式不明白，在其他地方也零散看到过相关的内容。在下载的一个 PDF 《阿里巴巴Java开发手册》上有如下描述：<br>分层领域模型规约：<br>*   DO（ Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。<br>*   DTO（ Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。<br>*   BO（ Business Object）：业务对象。 由Service层输出的封装业务逻辑的对象。<br>*   AO（ Application Object）：应用对象。 在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。<br>*   VO（ View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。<br>*   POJO（ Plain Ordinary Java Object）：在本手册中， POJO专指只有setter&#47;getter&#47;toString的简单类，包括DO&#47;DTO&#47;BO&#47;VO等。<br>*   Query：数据查询对象，各层接收上层的查询请求。 注意超过2个参数的查询封装，禁止使用Map类来传输。<br>想请教下老师，<br>1.实际会用到或区分这些多类型的实体吗，还是就用文中三种覆盖所有的场景？<br>2.如果两个查询同一实体的信息，需要的字段信息不一样，是定义两个VO不同字段还是用一个大而全的VO，哪种较好？<br>3.还是阿里这个手册里，领域的实体命名推荐不用驼峰，规约写成 UserDO 形式，这也让我别扭过。后来看到 《Effective Java》说即使是首字母缩写的词还是用驼峰命名更易读，如 HttpUrl 比 HTTPURL 更好。这才让我不纠结阿里这个规约，还是使用 UserDo 形式命名。","like_count":0},{"had_liked":false,"id":156766,"user_name":"念去去·云","can_delete":false,"product_type":"c1","uid":1419980,"ip_address":"","ucode":"F185F5A4D963C6","user_header":"https://static001.geekbang.org/account/avatar/00/15/aa/cc/7285dd0a.jpg","comment_is_top":false,"comment_ctime":1574951367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574951367","product_id":100039001,"comment_content":"感谢现在的老大传授的思想理念。虽然我有没有使用过ddd，但是在业务逻辑时，会抽象代码，在业务层会和现实逻辑对应起来，主方法也就几行，命名体现真实意图。复杂逻辑通过合适的设计模式优化。并没有感觉到评论里说代码不好维护，逻辑分散怎么的。","like_count":0},{"had_liked":false,"id":156754,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1574947990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574947990","product_id":100039001,"comment_content":"我自己写过的后端，似乎三层架构都没有，就是定义了model，然后直接在API函数中处理并返回。所以，让我去想象三层架构是如何协调工作的都还有一些困难。<br>我写的后端就只有一个类，也就是所谓的“合并”了，到目前为止没出啥问题，可能还是因为业务太简单了。<br>突然有点感悟：架构和设计模式这些东西都是为了应对复杂度的","like_count":0},{"had_liked":false,"id":156700,"user_name":"arvin","can_delete":false,"product_type":"c1","uid":1101774,"ip_address":"","ucode":"1A008122D9E34C","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/ce/9261eae7.jpg","comment_is_top":false,"comment_ctime":1574937463,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574937463","product_id":100039001,"comment_content":"DDD 模式，和 “接口&#47;抽象” 感觉有点点类似","like_count":0},{"had_liked":false,"id":156676,"user_name":"丿淡忘","can_delete":false,"product_type":"c1","uid":1139645,"ip_address":"","ucode":"604AE01961A026","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","comment_is_top":false,"comment_ctime":1574934285,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574934285","product_id":100039001,"comment_content":"老师我想问一下，单纯针对ddd而言，ddd设计中的po，dto是不是属于贫血模型，而do是充血模型","like_count":0},{"had_liked":false,"id":156664,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1574932862,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574932862","product_id":100039001,"comment_content":"惯性的作用比较大 公司里不少资深的同事都是写贫血模型出身的 另外技术知识的分层也容易让大家觉得贫血模型容易理解系统的工作过程 能够简单的把代码实现归纳成CRUD + cache + mq","like_count":0},{"had_liked":false,"id":156655,"user_name":"陆老师","can_delete":false,"product_type":"c1","uid":1203293,"ip_address":"","ucode":"0EA27C4755FF4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5c/5d/974b033f.jpg","comment_is_top":false,"comment_ctime":1574931236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574931236","product_id":100039001,"comment_content":"那么问题来了，我们现实的功能需求，前期根本不明确，中途变化太大，先弄好领域模型，定义好有什么业务逻辑不大现实呀，有些东西都需要根据公司业务需求走向来的。","like_count":0},{"had_liked":false,"id":156626,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1574926197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574926197","product_id":100039001,"comment_content":"一直觉得 老师能把新概念讲解的很清楚的能力很厉害啊。今天好多新词，经过老师讲解之后，一下就能明白啥意思了，厉害，厉害~<br>还有，老师指出的问题都是痛点啊：高大上的概念可能只值“五毛钱”，SQL语句满天飞。哈哈哈哈","like_count":0},{"had_liked":false,"id":156622,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1574926011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574926011","product_id":100039001,"comment_content":"<br>贫血模型：重service，轻domain；大部分的业务逻辑都在service中处理完了，而domain中只是定义数据，不设计业务所需的方法。<br><br>充血模型：重domain，轻service；数据和方法都由domain来完成，service只处理部分业务。<br><br>领域驱动设计，即 DDD (Domain Driven Design)，主要是用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。这并没有多么的高大上，重在业务的理解，才能划分出好的模块。<br><br>基于贫血模型的MVC架构流行的原因：<br><br>大部分情况下，我们涉及到的业务太过简单，更多的是CRUD操作；<br>充血模型比贫血模型设计难度更大，需要提前设计好数据和业务处理方法；<br>思维已固化，转型有成本。基于贫血模型的传统开发模式经历了这么多年，已经深得人心、习以为常。<br>什么项目应该考虑使用基于充血模型的 DDD 开发模式？<br><br>于充血模型的 DDD 开发模式，更适合业务复杂的系统开发。比如，包含各种利息计算模型、还款模型等复杂业务的金融系统。<br>充血模型于贫血模型一个直观的区别就是：<br><br>一个将业务逻辑放到 Service 类中，一个将业务逻辑放到 Domain 领域模型中；<br>还有一个非常重要的区别，那就是两种不同的开发模式会导致不同的开发流程。<br>业务逻辑简单的系统更多是SQL语句满天飞~<br><br>而越复杂的系统，对代码的复用性、易维护性要求就越高，我们就越应该花更多的时间和精力在前期设计上。而基于充血模型的 DDD 开发模式，正好需要我们前期做大量的业务调研、领域模型设计，所以它更加适合这种复杂系统的开发。<br><br>如果我们在项目中，应用基于充血模型的DDD 的开发模式，我们需要事先理清楚所有的业务，定义领域模型所包含的属性和方法。领域模型相当于可复用的业务中间层。新功能需求的开发，都基于之前定义好的这些领域模型来完成。","like_count":0},{"had_liked":false,"id":156611,"user_name":"杨杰","can_delete":false,"product_type":"c1","uid":1131823,"ip_address":"","ucode":"74817EA9499843","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/2f/b0b0dd74.jpg","comment_is_top":false,"comment_ctime":1574922884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574922884","product_id":100039001,"comment_content":"UserEntity、UserBo、UserVo 合并肯定是不合适的，但是在业务场景经常发生变化的情况下，这样也确实很麻烦。我指的是UserEntity层面上经常涉及到增加字段这种。","like_count":0},{"had_liked":false,"id":156603,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1574921107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574921107","product_id":100039001,"comment_content":"1.基本没有做过DDD模型的项目，一直都是属于CRUD boy<br>2.针对对象字段有重合的问题，我觉得不能把对象进行合并，而应该允许冗余，因为一旦某一层的字段发生变化，会影响到其他层，导致代码可理解性大幅下降，然后必须对其他层的代码进行大改，简直费时费力。我自己就重构过这种代码，一开始，入参，业务参数，数据库实体字段，全都塞在一个实体里，后面越改越发现代码严重耦合+难以维护，拆分以后就舒服多了","like_count":0},{"had_liked":false,"id":156553,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574910726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574910726","product_id":100039001,"comment_content":"思考题2<br>如果不同层中需要的数据类都一样，就合在一起，不然增加一堆一样的类+拷贝意义不大，但是很多情况下，这些数据类会有不同，例如界面显示的数据和从服务端读到的数据会有不同，这个时候就有必要分离并创建数据类间的映射。还有些情况是，有些类一样有些类不一样，这个时候就处于一个两难选择，如果完全分层，必然引入一些重复代码，违反DRY原则。如果只映射那些需要的类，就会对数据类的处理不一致。这个时候可能增加一层适配器层，只处理那些不同的数据类是一个不错的选择。","like_count":0},{"had_liked":false,"id":156550,"user_name":"微凉","can_delete":false,"product_type":"c1","uid":1178156,"ip_address":"","ucode":"F6BD0AE11AE224","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/2c/9a0c45e6.jpg","comment_is_top":false,"comment_ctime":1574910457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574910457","product_id":100039001,"comment_content":"感觉充血模型适应于需求稳定清晰的，像我们有一些项目经常变更需求我倒认为贫血模型更适合。","like_count":0},{"had_liked":false,"id":156527,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574906387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574906387","product_id":100039001,"comment_content":"整个文章看完，其实对于DDD的理解还是不到位，如果在这边加上实际代码，相比较，更胜千言万语。","like_count":0},{"had_liked":false,"id":156515,"user_name":"Geek_8c1834","can_delete":false,"product_type":"c1","uid":1152381,"ip_address":"","ucode":"DC8650E15E9D58","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLDFpXOBPS26TqSmNjnxByBjDWJ5ZNKl47UgL61LfSNJZJB7VjxwOCXTmRS6nQibiaTWW7KG5yV17dQ/132","comment_is_top":false,"comment_ctime":1574904444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574904444","product_id":100039001,"comment_content":"第二个问题：DO必须与数据库表字段一一对应，VO适应于页面展示需求，BO也许有可能需要封装成有层次的对象结构，除非系统足够简单，否则不能合并VO,BO,DO","like_count":0},{"had_liked":false,"id":156459,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574888129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574888129","product_id":100039001,"comment_content":"我做的项目多是基于贫血模型的，主要的原因有下面几点：<br>1.数据相对稳定，业务逻辑时刻变化。两者的分离有助于隔离修改。<br>2.数据对应的代码少，但是对应的操作却很多。例如String对象，数据对应的代码大致就是存储一个字符数组，对应的操作有拼接，查找，替换等等。如果用面向对象的方法把数据和方法放到一个类里，这个类就会太大（老师能否提供一种解决这类问题的思路，多谢）。<br><br>读了今天的文章，我觉得两者整合起来会有一定的价值。一个类提供数据和核心方法，其他功能类提供扩展的方法。<br>","like_count":0},{"had_liked":false,"id":156444,"user_name":"sulatwx","can_delete":false,"product_type":"c1","uid":1348141,"ip_address":"","ucode":"366237F13DE8A7","user_header":"","comment_is_top":false,"comment_ctime":1574871965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574871965","product_id":100039001,"comment_content":"现在在做一个内部商城系统，学了这一讲，感觉尤其是结算部分可以采用充血模型的 DDD 开发模式开发。","like_count":0},{"had_liked":false,"id":156429,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1574869973,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574869973","product_id":100039001,"comment_content":"1.最近一直沉迷于DDD无法自拔，更多的还是关注DDD的设计思想，也就是战略设计。读完这篇也印证了自己的想法，不要为了DDD而DDD，原则是不变的，简单合适。<br>也刚刚经历了贫血以及使用DDD的两个个微服务设计以及落地，开始充血模型那个微服务的时候，真的很痛苦，完全不知道一个类，一个方法要放到哪里，纠结的时间远远大于写代码的时间。<br>现在回头总结来看，其实最根本的原因只是以前很少使用面向对象的思想来考虑如何设计、实现一个服务。<br>2.即使几个对象属性类似，也不能共用，分层最大的目的是隔离，降低耦合度，每个对象的职能也是不一样的，如果是为了代码复用，完全可以有其他的方式来实现。自己也经常纠结对象之间的转换，但是理解他背后的设计思想之后就会觉得是很自然合理的做法。难的是怎么跟团队的人说清楚，从思想上统一。","like_count":0},{"had_liked":false,"id":156421,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1574869361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574869361","product_id":100039001,"comment_content":"结合自己接触过的项目，和老师讲的，总结起来一句话：项目不够复杂，都是CRUD，充不了多少血。稍微复杂一些的设计，开发实施起来反而不适应了。","like_count":0},{"had_liked":false,"id":156420,"user_name":"　扬帆丶启航　","can_delete":false,"product_type":"c1","uid":1235282,"ip_address":"","ucode":"4079D0889CD86C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/52/73351eab.jpg","comment_is_top":false,"comment_ctime":1574869331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574869331","product_id":100039001,"comment_content":"只用过贫血模型。。vo,bo会随着业务或的变化发生改变，所以跟entity这三个不应该归并为一个类","like_count":0},{"had_liked":false,"id":156418,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1574869110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574869110","product_id":100039001,"comment_content":"以项目管理金三角来看，选择贫血模型可能是由于预算有限，雇不起高手，时间紧逼等因素导致的。<br>","like_count":0},{"had_liked":false,"id":156406,"user_name":"EOF","can_delete":false,"product_type":"c1","uid":1603575,"ip_address":"","ucode":"9DD2B2ABACBD2F","user_header":"https://static001.geekbang.org/account/avatar/00/18/77/f7/ebe38b96.jpg","comment_is_top":false,"comment_ctime":1574867302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574867302","product_id":100039001,"comment_content":"项目都是贫血模型，大多数业务比较简单","like_count":0},{"had_liked":false,"id":156391,"user_name":"新世界","can_delete":false,"product_type":"c1","uid":1079495,"ip_address":"","ucode":"4473DC1505F158","user_header":"https://static001.geekbang.org/account/avatar/00/10/78/c7/083a3a0b.jpg","comment_is_top":false,"comment_ctime":1574865964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574865964","product_id":100039001,"comment_content":"原来一直贫血","like_count":0},{"had_liked":false,"id":156381,"user_name":"技术小生","can_delete":false,"product_type":"c1","uid":1692743,"ip_address":"","ucode":"18B7751498029F","user_header":"https://static001.geekbang.org/account/avatar/00/19/d4/47/0deb44d6.jpg","comment_is_top":false,"comment_ctime":1574864049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574864049","product_id":100039001,"comment_content":"现在业务开发都是需求驱动，一两天完成功能，哪有时间仔细思考","like_count":0},{"had_liked":false,"id":156365,"user_name":"黎","can_delete":false,"product_type":"c1","uid":1127534,"ip_address":"","ucode":"B09EBFC0CEDC68","user_header":"https://static001.geekbang.org/account/avatar/00/11/34/6e/60a3a0e1.jpg","comment_is_top":false,"comment_ctime":1574862398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574862398","product_id":100039001,"comment_content":"这么一说ecs框架也是贫血模式，把逻辑和数据分开了。","like_count":0},{"had_liked":false,"id":156349,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1574860373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574860373","product_id":100039001,"comment_content":"一直基于贫血模型开发, 没用过 bo","like_count":0},{"had_liked":false,"id":156341,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1574859142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574859142","product_id":100039001,"comment_content":"哈哈。项目中根本没有用过充血模型。一直贫血而不自知","like_count":0},{"had_liked":false,"id":156333,"user_name":"白凤","can_delete":false,"product_type":"c1","uid":1644178,"ip_address":"","ucode":"9E39F18C808960","user_header":"https://static001.geekbang.org/account/avatar/00/19/16/92/6a7efb86.jpg","comment_is_top":false,"comment_ctime":1574857708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574857708","product_id":100039001,"comment_content":"C转Java开发，原来一直使用的是贫血模型开发，上手确实特别快，框架也很好理解，码起代码来飞快，开发流程跟老师讲的基本差不多，首先定义好各entity，然后划分业务的各个类就可以开工了，期待下一讲。<br>对于VO、BO、Entity来讲，我认为VO、BO更面向与业务，包含的数据结构要更宽泛一些，即一个VO或者BO可以包含多个Entity。平时开发的项目中会有南北向的概念，北向暴露接口给前端，有对应的数据模型，后台得到北向数据模型后处理数据（根据Entity存北向库，对应的业务流程处理），南向处理流程也差不台多，分开VO、BO、Entity可以更加清晰。<br>","like_count":0},{"had_liked":false,"id":156329,"user_name":"王杰","can_delete":false,"product_type":"c1","uid":1106506,"ip_address":"","ucode":"4E3B2A0F1C75F6","user_header":"https://static001.geekbang.org/account/avatar/00/10/e2/4a/3f07e217.jpg","comment_is_top":false,"comment_ctime":1574857371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574857371","product_id":100039001,"comment_content":"1. 目前做的项目都是贫血模型<br>2.目前的做法：Entity 是跟数据库字段一 一对应的， Bo主要做类的转换， Vo主要是作为一个对象返回给controller层对外的数据体。<br>","like_count":0},{"had_liked":false,"id":156316,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1574856152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574856152","product_id":100039001,"comment_content":"没做过web相关的 感觉好像没有遇到过贫血模型 根据自己的实际工作经验来看面向对象更好 更省事<br>我觉得可以合并到一个类 毕竟他们的继承关系比较单一就只是复用父类的数据 和对数据进行操作的方法<br>","like_count":0},{"had_liked":false,"id":156307,"user_name":"傲慢与偏执，","can_delete":false,"product_type":"c1","uid":1236496,"ip_address":"","ucode":"E9F81223DFAD24","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/10/9f15527d.jpg","comment_is_top":false,"comment_ctime":1574853533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574853533","product_id":100039001,"comment_content":"期待下一届ddd实战 了解domian","like_count":0},{"had_liked":false,"id":156296,"user_name":"乐观的鹏程","can_delete":false,"product_type":"c1","uid":1746026,"ip_address":"","ucode":"FA527FA2C4204B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJgXIicettSIeIDpL2zt39Zb0fdBwOlibdia5AjWITYQZCWPGDPdFKKe9UiahgROkAyoES7niaobZatvQA/132","comment_is_top":false,"comment_ctime":1574851981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574851981","product_id":100039001,"comment_content":"一直都是贫血","like_count":0},{"had_liked":false,"id":156288,"user_name":"deepz","can_delete":false,"product_type":"c1","uid":1570088,"ip_address":"","ucode":"4BD23A44CDB384","user_header":"https://static001.geekbang.org/account/avatar/00/17/f5/28/898a6947.jpg","comment_is_top":false,"comment_ctime":1574850084,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574850084","product_id":100039001,"comment_content":"我这项目没bo是啥情况？😅 我也不知道各种O的实际意义，只是知道他们对应不同层，用于“单一职责”吗？<br>期待周五的文章，公司代码确实被老师说中了，我也感觉相似的sql满天飞，稍微有点改动特别难受（前两天重构了） 感觉大佬要飙车了吗😬","like_count":0},{"had_liked":false,"id":156261,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1079657,"ip_address":"","ucode":"0335277F255F7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/69/5960a2af.jpg","comment_is_top":false,"comment_ctime":1574844714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574844714","product_id":100039001,"comment_content":"在我们公司Entity和Bo是一个,是合并起来的.","like_count":0},{"had_liked":false,"id":156243,"user_name":"木子00","can_delete":false,"product_type":"c1","uid":1314724,"ip_address":"","ucode":"8F78CA722EB29B","user_header":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","comment_is_top":false,"comment_ctime":1574841875,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574841875","product_id":100039001,"comment_content":"1. 我开发我的项目中都是贫血模型。没有用过充血模型。<br>2. 开发都是一个Entiry，很少用到BO，VO。<br><br>我们大多数都是CURD的。<br>想摆脱这样的开发。<br>期待下一节课。","like_count":0},{"had_liked":false,"id":156205,"user_name":"Jesse","can_delete":false,"product_type":"c1","uid":1368038,"ip_address":"","ucode":"727CA882B84DA0","user_header":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","comment_is_top":false,"comment_ctime":1574836258,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574836258","product_id":100039001,"comment_content":"问题一：<br>     我所参与的web项目都是基于贫血模型的，没有基于充血模型的经验，其实也是第一次听说这种思路。我觉得为什么项目大多是采用贫血模型呢，我想是因为web需求变化块，项目之处可能都无法预见后期需求的变化，在项目之初就不会投入很多成本在考虑了，而是以功能实现为驱动的。随着时间的推移，项目功能越来越多，五花八门的需求。导致项目越来越大，代码越来越冗余，维护起来成功越来越大，甚至相似的功能都可能无法复用原来的代码，功能相似的长sql满天飞。要应用充血模型，在开始应该对业务整个架构有一个很清晰的认识，并能把握业务未来的走向，我觉得应该是比较难做到的，我想这也是充血模型少见的原因吧。<br>问题二：我觉得不要合并为一个类，虽然我们的项目是基于贫血模型的，但是还是要做的数据要分层，我觉得可以抽取公共字段为基类。","like_count":0},{"had_liked":false,"id":156193,"user_name":"Lifelong Learning","can_delete":false,"product_type":"c1","uid":1173517,"ip_address":"","ucode":"3E39BED3E13FB4","user_header":"https://static001.geekbang.org/account/avatar/00/11/e8/0d/fcd95db8.jpg","comment_is_top":false,"comment_ctime":1574831075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574831075","product_id":100039001,"comment_content":"一直贫血中","like_count":0},{"had_liked":false,"id":156189,"user_name":"miracle","can_delete":false,"product_type":"c1","uid":1276137,"ip_address":"","ucode":"FD7074F1062AE9","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/e9/9d807269.jpg","comment_is_top":false,"comment_ctime":1574830590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574830590","product_id":100039001,"comment_content":"SOP 现在应该不太按 MVC 来分层了吧","like_count":0},{"had_liked":false,"id":156169,"user_name":"晨间新闻","can_delete":false,"product_type":"c1","uid":1161406,"ip_address":"","ucode":"6F7A55AAD52F16","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/be/2d77d643.jpg","comment_is_top":false,"comment_ctime":1574828051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574828051","product_id":100039001,"comment_content":"一个实体类，不区分vo，bo，entity，就导致只负责业务处理的字段，需要加Transient注解，经常定义一些getter方法，只是为了给前端展示翻译用","like_count":0},{"had_liked":false,"id":156168,"user_name":"陀螺","can_delete":false,"product_type":"c1","uid":1058808,"ip_address":"","ucode":"5016747DD39102","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/f8/1388139d.jpg","comment_is_top":false,"comment_ctime":1574827796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574827796","product_id":100039001,"comment_content":"贫血模式就像模板一样，在不需要了解业务场景前可以预先把主干开发出来。DDD则重业务，业务驱动代码OOP风格。<br>关于二问合并，简单写个例子，请指教。<br>@Getter<br>public class User {<br>    private Long id;<br>    private String name;<br>    private String cellphone;<br><br>    public User(Long id, String name, String cellphone){<br>        this.id = id;<br>        this.name = name;<br>        this.cellphone = cellphone;<br>    }<br><br>    public User toView(User user){<br>        this.id = user.id;<br>        this.name = user.name;<br>        this.cellphone = user.cellphone;<br>        return this;<br>    }<br>}","like_count":0},{"had_liked":false,"id":156159,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1574826352,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574826352","product_id":100039001,"comment_content":"C++码农，没做过web ，对MVC及变种不太熟悉，贫血模式在从数据库读数据时常用到。现状也满足需求，<br>没想好如何转成充血模式， 不是很理解 Domain模型","like_count":0},{"had_liked":false,"id":156142,"user_name":"塔兹米","can_delete":false,"product_type":"c1","uid":1425252,"ip_address":"","ucode":"1A58C81EF9B0A4","user_header":"https://static001.geekbang.org/account/avatar/00/15/bf/64/c9a0e913.jpg","comment_is_top":false,"comment_ctime":1574823822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574823822","product_id":100039001,"comment_content":"一直是贫血模式开发，entity、vo、bo 不能放在一个类中，用途不同。","like_count":0},{"had_liked":false,"id":156138,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1574823555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574823555","product_id":100039001,"comment_content":"参与过的项目都是都是基于贫血的mvc，还没接触过DDD，<br>第二个问题，理论上可以。不过有一些数据库操作的字段在controller层中并不需要体现（或者说不需要发回给前端,也不能返回给前端）。做好public与private的访问权限包含就可以了吧","like_count":0},{"had_liked":false,"id":156129,"user_name":"鱼向北游","can_delete":false,"product_type":"c1","uid":1439908,"ip_address":"","ucode":"580EC7DCE57E9A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IPdZZXuHVMibwfZWmm7NiawzeEFGsaRoWjhuN99iaoj5amcRkiaOePo6rH1KJ3jictmNlic4OibkF4I20vOGfwDqcBxfA/132","comment_is_top":false,"comment_ctime":1574822481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574822481","product_id":100039001,"comment_content":"1.作为一个传统的游戏程序员来说，恰好用的是充血模型，和传统mvc不一样，恰好没用spring这种web的开发模式，做法就是基于db层映射的一层entity，entity里也封装了一些数据操作的基本方法，剩下的业务都是基于这些基本方法的组合，不是面向sql编程。然后为什么说恰好，因为游戏发展大爆炸后，一些web程序员转行，一些游戏开发也用spring了。。。幸亏也不是做什么低延迟游戏，导致后来的开发框架五花八门<br>2.可以根据业务微调整，不建议一刀切的合并，毕竟vo和bo变动大，entity变动较小","like_count":0},{"had_liked":false,"id":156122,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1574821653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574821653","product_id":100039001,"comment_content":"1.所有项目都是贫血模型。除了我重构的模块，会参杂充血模型。因为是重构的,所以好处是省去多个服务方法中的重复代码（提炼公共函数也能做到,但充血模型语意更强一些）。而且充血模型内的方法逻辑可以通过mock简单测试,无任何依赖。<br><br>2.我的原则是不要。虽然重复定义相似数据类型是有开销的。但是各层操作各自的数据结构易于逻辑解耦。当出现变更时，易于拆解重组。测试时也易于分层定位问题。vo不能暴露数据库字段是一定要单独写一个的，但另外两个在简单场景很可能就是一摸一样，这种其实有些观点是直接操作do对象不创建bo对象的。但我还是坚持创建，哪怕我认为这个功能基本不会扩展或重组啥的。用严格的规范减少阅读时的负担。性能这东西，出问题再调优。","like_count":0},{"had_liked":false,"id":156113,"user_name":"FIGNT","can_delete":false,"product_type":"c1","uid":1540988,"ip_address":"","ucode":"D9DB185AE9E67C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","comment_is_top":false,"comment_ctime":1574820730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574820730","product_id":100039001,"comment_content":"1. 老项目都是基于MVC的贫血模式开发的单体架构，大部分的业务操作都是CRUD，所以开始没问题，但是经过几年后，系统越发难以维护。才想到用DDD来指导微服务，做重构。DDD不是适用所有的项目，简单的还是用MVC传统的模式，更快；DDD需要的前期成本更大，有很大的门槛。对于复杂系统，可以很好的才分业务<br>2. 各层的模型还是不能合为一个，但是其中相同的字段可以抽出来复用<br>这里不得不夸下老师，给我很大的惊喜，有意外收获。因为现在也再搞DDD、微服务。老师几句话把关键问题说明白了。学设计模式能扩展到DDD的充血模式是我万万没想到的，给老师点赞","like_count":0},{"had_liked":false,"id":156111,"user_name":"Geek_7f18eb","can_delete":false,"product_type":"c1","uid":1248270,"ip_address":"","ucode":"4A78D4583C73CA","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/0e/91af1b43.jpg","comment_is_top":false,"comment_ctime":1574820712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574820712","product_id":100039001,"comment_content":"2.不合并（BO和VO感觉有些地方可以只定义一个），运用继承和组合来增加代码的复用性，减少相同代码的冗余","like_count":0},{"had_liked":false,"id":156104,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1574819796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574819796","product_id":100039001,"comment_content":"课堂讨论 <br><br>question1: 你做经历的项目中，有哪些是基于贫血模型的传统的开发模式？有哪些是基于充血模型的 DDD 开发模式呢？请简单对比一下两者的优劣。<br><br>answer1:<br>我工作中还没有基于充血开发模式的项目,简单谈谈DDD解决了传统开发模式的&quot;痛点&quot;:<br><br>DDD通过定义业务领域模型的方式摊薄逻辑层,对于业务庞大的项目可以避免逻辑层臃肿的问题,提高项目维护性.<br><br>question2: 对于我们举的例子中，UserEntity、UserBo、UserVo 包含的字段都差不多，是否可以合并为一个类呢？<br><br>answer2:<br>我断然反对将Entity, BO, VO三者合并为一个类.<br>从AOP分层思想角度看,三者分别隶属于三个不同的Layer,而不同Layer之间是泾渭分明的,显然三个数据类不能混为一谈.<br><br>从开发效率的角度看,如果业务极简单,将三个数据类合并为一个类是有些许好处的,很明显好处就是节省开发时间.但这么做会导致维护成本高昂,业务依赖混乱,显然这是一个得不偿失的错误决定.","like_count":0},{"had_liked":false,"id":156099,"user_name":"青青子衿","can_delete":false,"product_type":"c1","uid":1438102,"ip_address":"","ucode":"4A388A3BA70C29","user_header":"https://static001.geekbang.org/account/avatar/00/15/f1/96/9571fa3d.jpg","comment_is_top":false,"comment_ctime":1574819258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574819258","product_id":100039001,"comment_content":"第二个问题，我觉得能不能合并要看业务的变化大小而定，如果后面BO、VO、entity都不发生变化，或者变化是一致的同步的，那就可以合并；反过来就不可以。","like_count":0},{"had_liked":false,"id":156093,"user_name":"eazonshaw","can_delete":false,"product_type":"c1","uid":1493784,"ip_address":"","ucode":"423952F7CEF475","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/18/4877c08b.jpg","comment_is_top":false,"comment_ctime":1574819007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574819007","product_id":100039001,"comment_content":"做java的话，其实是不是spring jpa更符合DDD的要求","like_count":0},{"had_liked":false,"id":156091,"user_name":"强哥","can_delete":false,"product_type":"c1","uid":1206726,"ip_address":"","ucode":"3B8DC780FE4EF9","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/c6/513df085.jpg","comment_is_top":false,"comment_ctime":1574818896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574818896","product_id":100039001,"comment_content":"无论是传统设计还是DDD，都应该分开，好处逻辑清晰，职责边界划分明确，提高后续的维护及扩展，当然所谓的成本无非是多了几个类而已……","like_count":0},{"had_liked":false,"id":156090,"user_name":"汤小高","can_delete":false,"product_type":"c1","uid":1555565,"ip_address":"","ucode":"D4AB7766273D52","user_header":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","comment_is_top":false,"comment_ctime":1574818864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574818864","product_id":100039001,"comment_content":"在目前我做过的项目中，entity，bo，vo都是合并在一个对象里，目前没发现有啥拓展性问题，可能是项目业务不够复杂吧","like_count":0},{"had_liked":false,"id":156089,"user_name":"稳","can_delete":false,"product_type":"c1","uid":1284626,"ip_address":"","ucode":"BF5723E63E4115","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/12/06863960.jpg","comment_is_top":false,"comment_ctime":1574818854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574818854","product_id":100039001,"comment_content":"1、没用过充血，get不到痛点<br>2、如果字段不变动的话，倒可以考虑；但是针对经常要加减字段的情况，就不太合适了","like_count":0},{"had_liked":false,"id":156083,"user_name":"逆流的鱼","can_delete":false,"product_type":"c1","uid":1258399,"ip_address":"","ucode":"AA3DDE44A83C40","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/9f/8dbd9558.jpg","comment_is_top":false,"comment_ctime":1574818164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574818164","product_id":100039001,"comment_content":"是不是有点mybatis贫血（国内？）、jpa（hibernate，国外？）充血模式的意思？","like_count":0},{"had_liked":false,"id":156081,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1574817883,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574817883","product_id":100039001,"comment_content":"我们一般都是一个实体类","like_count":0},{"had_liked":false,"id":156076,"user_name":"WIZ","can_delete":false,"product_type":"c1","uid":1260348,"ip_address":"","ucode":"313AF84674475C","user_header":"https://static001.geekbang.org/account/avatar/00/13/3b/3c/2947127c.jpg","comment_is_top":false,"comment_ctime":1574817322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574817322","product_id":100039001,"comment_content":"打卡<br>第一题，其实我感觉不止网页开发存在这种问题，只要是类似于三层这种多层结构甚至是普通的业务开发也存在这种情况，在.net做客户端的过程中，有时候我们会单独写一个只包含数据而不包含业务的类，只用于数据存取，操作全都放入业务里去处理，对于可以进行任何操作的数据来说，何种方式简单易用就用哪种方式，但是对于特殊的数据，比如银行系统的金额，各业务系统的创建时间等这种一旦创建即不能再修改的数据，这种封装特性，我觉得对于这个类来说，也是领域驱动的体现。","like_count":0},{"had_liked":false,"id":156061,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1574816335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574816335","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":156057,"user_name":"2018","can_delete":false,"product_type":"c1","uid":1107371,"ip_address":"","ucode":"4C2CD47AD70177","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/ab/6fab2492.jpg","comment_is_top":false,"comment_ctime":1574816132,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574816132","product_id":100039001,"comment_content":"完全使用的贫血模式，VO，BO，entity互转，也考虑过这样的代码太冗余，但是没有找到合适的解决办法，还有就是所做项目业务较简单，不需要那么复杂的业务设计，希望下一章节可以明确展示出DDD的好处","like_count":0},{"had_liked":false,"id":156056,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1574815972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574815972","product_id":100039001,"comment_content":"1. 目前所经历的项目中都是基于贫血模式的传统开发模式。时间一久了，写Controller，Service和Repository 这一套总是在重复，有时候感觉会有点烦人。但是目前来说没办法，该写还得写。<br>2. UserEntity、UserBo、UserVo 这些类存在重复字段，个人认为可以将公用的基础字段（稳定的，几乎不会变的）抽象到父类中。抽象层次也就两层，不存在继承层次太深的问题影响可读性问题。在各自层次上添加需要的特殊字段。","like_count":0},{"had_liked":false,"id":156046,"user_name":"大帅哥","can_delete":false,"product_type":"c1","uid":1333009,"ip_address":"","ucode":"4B5F9550663778","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIUXWqIBiadT4BYND0k3XwORqkW8j4q0GLyaXylG5ibfNnQaAQ26PQIvd4bp9uFrlp9QhV4YXpVfdzg/132","comment_is_top":false,"comment_ctime":1574815481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574815481","product_id":100039001,"comment_content":"第一题<br>php开发的web项目，数据都是存放在array中，业务逻辑在service中完成，这种也是也是贫血模型。把业务逻辑写在model类中，在service中只是调用model类和流程控制，这种算是充血模型。<br>区别:贫血模型写起来简单，不能复用。充血模型相对麻烦些，可以服复用部分逻辑。<br>第二题<br>业务简单直接合并会简单不少，复杂点的话还是拆开好些，问题是如何判定简单和复杂，只操作一张数据表就是简单……","like_count":0},{"had_liked":false,"id":156041,"user_name":"夏目","can_delete":false,"product_type":"c1","uid":1212750,"ip_address":"","ucode":"67C075A01CF4D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/4e/d71092f4.jpg","comment_is_top":false,"comment_ctime":1574815075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574815075","product_id":100039001,"comment_content":"我感觉我做的项目都是贫血模型🐶直到某一天我才突然发现为啥我的domain中为啥除了属性定义啥也没有，后来才慢慢把相关的操作放到domain中","like_count":0},{"had_liked":false,"id":156039,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1574815038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574815038","product_id":100039001,"comment_content":"候感觉复杂的查询还是喜欢SQL直接写，直接调用封装好的方法，可能再简单的时候操作很快很方便，还好很多框架都带这种方法","like_count":0},{"had_liked":false,"id":156036,"user_name":"风行者","can_delete":false,"product_type":"c1","uid":1541934,"ip_address":"","ucode":"F058640CF77A35","user_header":"https://static001.geekbang.org/account/avatar/00/17/87/2e/ea54c240.jpg","comment_is_top":false,"comment_ctime":1574814908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574814908","product_id":100039001,"comment_content":"全是贫血模型开发，三个类可以合并 一般可以用实体类中加临时变量代替其他的bo和vo","like_count":0},{"had_liked":false,"id":156035,"user_name":"罗洲","can_delete":false,"product_type":"c1","uid":1263417,"ip_address":"","ucode":"68133E38A25C17","user_header":"https://static001.geekbang.org/account/avatar/00/13/47/39/0ce1aa62.jpg","comment_is_top":false,"comment_ctime":1574814779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574814779","product_id":100039001,"comment_content":"思考题2：不能合并，因为他们的作用不一样，vo用于给展示层的数据，而bo是业务逻辑数据，可能包含多个实体数据（po）, 而entity是数据库表对应的实体，一一对应，他们的作用不同，也就意味着后续的修改情况不同，数据库表不改，entity就不会改，但是vo和po却有可能改。","like_count":0},{"had_liked":false,"id":156020,"user_name":"爱学习的杨酷暑","can_delete":false,"product_type":"c1","uid":1676216,"ip_address":"","ucode":"565865AAADCE7E","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/b8/3992768a.jpg","comment_is_top":false,"comment_ctime":1574813574,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574813574","product_id":100039001,"comment_content":"1.好像做过的项目都是贫血模型..，优点就是简单的业务开发比较快。<br>2.UserEntity、UserBo、UserVo如果比较简单，可能是从SQL查询后直接通过Controller返回了，那就使用同一个类（可能不太规范，但是比较省事）。如果比较复杂还是区分开来吧。","like_count":0},{"had_liked":false,"id":156002,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1574811698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574811698","product_id":100039001,"comment_content":"感觉可以跟下节课合在一起，这节课得到的结论就是贫血模型是面向过程，但大家已经习惯了，而充血模型在什么样的情况发挥优势，就得等下节课揭晓了","like_count":0},{"had_liked":false,"id":155997,"user_name":"Summer  空城","can_delete":false,"product_type":"c1","uid":1337146,"ip_address":"","ucode":"6BDBB70FB6F709","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","comment_is_top":false,"comment_ctime":1574809807,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574809807","product_id":100039001,"comment_content":"同一个项目，需求有简单，有复杂，简单的需求一般采用传统开发模式，复杂的需求需要使用DDD，但对于DDD如何建模，却总把握不到方向，期待老师讲解。","like_count":0},{"had_liked":false,"id":155977,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1574786666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574786666","product_id":100039001,"comment_content":"微服务拆分后，DB也拆分了，这样从复杂的DB操作，转换成编排其它服务的接口了，这是否DDD最近开始流行的原因？<br>我们现在还是用贫血模式。","like_count":0},{"had_liked":false,"id":155971,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1574785912,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1574785912","product_id":100039001,"comment_content":"我目前接触过的项目都是基于贫血模型。UserEntity, UseBo, UserVo ，在业务需求变化不大的项目可以适当调整，最好分开，避免耦合","like_count":0}]}