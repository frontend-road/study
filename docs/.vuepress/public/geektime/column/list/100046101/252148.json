{"id":252148,"title":"加餐 | MySQL XA是如何实现分布式事务的？","content":"<p>你好，我是韩健。</p><p>相信很多同学都知道MySQL支持单机事务，那么在分布式系统中，涉及多个节点，MySQL又是怎么实现分布式事务的呢？</p><p>这个和我最近遇到的问题很类似，我现在负责的一个业务系统，需要接收来自外部的指令，然后访问多个内部其他系统来执行指令，但执行完指令后，我需要同时更新多个内部MySQL数据库中的值（比如MySQL数据库A、B、C）。</p><p>但又因为业务敏感，系统必须处于一个一致性状态（也就是说，MySQL数据库A、B、C中的值要么同时更新成功，要么全部不更新）。不然的话，会出现有的系统显示指令执行成功了，有的系统显示指令尚未被执行，导致多部门对指令执行结果理解混乱。</p><p>那么我当时是如何实现多个MySQL数据库更新的一致性呢？答案就是采用MySQL XA。</p><p>在我看来，MySQL通过支持XA规范的二阶段提交协议，不仅实现了多个MySQL数据库操作的事务，还能实现MySQL、Oracle、SQL Server等支持XA规范的数据库操作的事务。</p><p>对你来说，理解MySQL XA，不仅能理解数据层分布式事务的原理，还能在实际系统中更加深刻的理解二阶段提交协议，这样一来，当你在实际工作中，遇到多个MySQL数据库的事务需求时，就知道如何通过MySQL XA来处理了。</p><!-- [[[read_end]]] --><p>老规矩，咱们先来看一道思考题。</p><p>假设两个数据库A、B（位于不同的服务器节点上），我们需要实现多个数据库更新（比如，UPDATE executed_table SET status = true WHERE id=100）和插入操作（比如，INSERT into operation_table SET id = 100, op = ‘get-cdn-log’）的事务，那么在MySQL中如何实现呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/92/e4/92164eafa6604e334b22d245d1543ce4.jpg?wh=1142*531\" alt=\"\"></p><p>带着这个问题，我们进入今天的学习。不过因为MySQL通过XA规范实现分布式事务的，所以你有必要先来了解一下XA规范。</p><h2>什么是XA？</h2><p>提到XA规范，就不得不说DTP模型（ Distributed Transaction Processing），因为XA规范约定的是DTP模型中2个模块（事务管理器和资源管理器）的通讯方式，那DTP，就是分布式事务处理，就像下图的样子：</p><p><img src=\"https://static001.geekbang.org/resource/image/a0/93/a08794d4a09101fdc0789496a50db193.jpg?wh=1142*604\" alt=\"\"></p><p>为了帮助你更好的理解DTP模型，我来解释一下DTP各模块的作用。</p><ul>\n<li>AP：应用程序（Aplication Program），一般指事务的发起者（比如数据库客户端或者访问数据库的程序），定义事务对应的操作（比如更新操作UPDATE executed_table SET status = true WHERE id=100）。</li>\n<li>RM：资源管理器（Resource Manager），管理共享资源，并提供访问接口，供外部程序来访问共享资源，比如数据库，另外RM还应该具有事务提交或回滚的能力。</li>\n<li>TM：事务管理器（Transaction Manager），TM是分布式事务的协调者。TM与每个RM进行通信，协调并完成事务的处理。</li>\n</ul><p>你是不是觉得这个架构看起来很复杂？其实在我看来，你可以这么理解这个架构：应用程序访问、使用资源管理器的资源，并通过事务管理器的事务接口（TX interface）定义需要执行的事务操作，然后事务管理器和资源管理器会基于XA规范，执行二阶段提交协议。</p><p>那么，XA规范是什么样子的呢？它约定了事务管理器和资源管理器之间双向通讯的接口规范，并实现了二阶段提交协议：</p><p><img src=\"https://static001.geekbang.org/resource/image/4e/ed/4e6d8e0104c4b22e58c5a400323e94ed.jpg?wh=1142*865\" alt=\"\"></p><p>为了帮你更好地理解这个过程，咱们一起走下流程，加深下印象：</p><ol>\n<li>AP（应用程序）联系TM（事务管理器）发起全局事务；</li>\n<li>TM调用ax_open()建立与资源管理器的会话；</li>\n<li>TM调用xa_start()标记事务分支（Transaction branch）的开头；</li>\n<li>AP访问RM（资源管理器），并定义具体事务分支的操作，比如更新一条数据记录（UPDATE executed_table SET status = true WHERE id=100）和插入一条数据记录（INSERT into operation_table SET id = 100, op = ‘get-cdn-log’）；</li>\n<li>TM调用xa_end()标记事务分支的结尾；</li>\n<li>TM调用xa_prepare()通知RM做好事务分支提交的准备工作，比如锁定相关资源，也就是执行二阶段提交协议的提交请求阶段；</li>\n<li>TM调用xa_commit()通知RM提交事务分支（xa_rollback()通知RM回滚事务），也就是执行二阶段提交协议的提交执行阶段；</li>\n<li>TM调用xa_close()关闭与RM的会话。</li>\n</ol><p>整个过程，也许有些复杂，不过你可以这么理解：<strong>xa_start()和xa_end()在准备和标记事务分支的内容，然后调用xa_prepare()和xa_commit()（或者xa_rollback()）执行二阶段提交协议，实现操作的原子性。</strong>在这里需要你注意的是，这些接口需要按照一定顺序执行，比如xa_start()必须要在xa_end()之前执行。</p><p>另外我想说的是，事务管理器对资源管理器调用的xa_start()和xa_end()这对组合，一般用于标记事务分支（就像上面的更新一条数据记录和插入一条数据记录）的开头和结尾。在这里，你需要注意的是：</p><ul>\n<li>对于同一个资源管理器，根据全局事务的要求，可以前后执行多个操作组合，比如，先标记一个插入操作，然后再标记一个更新操作。</li>\n<li>事务管理器只是标记事务，并不执行事务，最终是由应用程序通知资源管理器来执行事务操作的。</li>\n</ul><p>另外，XA规范还约定了如何向事务管理器注册和取消资源管理器的API接口（也就是ax_reg()和ax_unreg()接口）。在这里需要你注意的是，这两个接口是ax_开头的，而不是像xa_start()那样是xa_开头的，这是很容易误解的点，我希望你能注意到。</p><p>那么讲了这么多，我们该如何通过MySQL XA实现分布式事务呢？</p><h2>如何通过MySQL XA实现分布式事务呢？</h2><p>首先，你需要创建一个唯一的事务ID（比如xid），来唯一标识事务，并调用“XA START”和“XA END”来定义事务分支对应的操作（比如INSERT into operation_table SET id = 100, op = ‘get-cdn-log’）。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/ca/76c1110506c7409c748f20e17ea23bca.jpg?wh=1142*627\" alt=\"\"></p><p>接着，你需要执行“XA PREPARE”命令，来执行二阶段提交协议的提交请求阶段。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/30/285e440ff3bee6b6c74eeaaa2b37c430.jpg?wh=1142*546\" alt=\"\"></p><p>最后，你需要调用“XA COMMIT”来提交事务（或者“XA ROLLBACK”回滚事务）。这样你就实现了全局事务的一致性了。</p><p><img src=\"https://static001.geekbang.org/resource/image/16/93/169ae090f2b55c6e520ecf7424c0f293.jpg?wh=1142*520\" alt=\"\"></p><p>从上面的流程中，你可以看到，客户端在扮演事务管理器的角色，而MySQL数据库就在扮演资源管理器的角色。另外，你要注意，上面流程中的xid必须是唯一值。</p><p>另外，我想补充的是，如果你要开启MySQL的XA功能，必须设置存储引擎为 InnoDB，也就是说，在MySQL中，只有InnoDB引擎支持XA规范。</p><p>当然了，可能有些同学对MySQL XA有这样的疑问，能否将“XA END”和“XA PREPARE”合并到一起呢？<strong>答案是不能，因为在“XA END”之后，是可以直接执行“XA COMMIT”的，也就是一阶段提交（比如当共享资源变更只涉及到一个RM时）。</strong></p><p>最后，我强调一下，MySQL XA性能不高，适合在并发性能要求不高的场景中使用，而我之所以需要采用MySQL XA实现分布式事务，不仅因为整个系统对并发性能要求不高，还因为底层架构是多个第三方的，没法改造。</p><h2>内容小结</h2><p>本节课我主要带你了解了XA规范，以及如何使用MySQL XA实现分布式事务。我希望你明确这样几个重点。</p><p>1.XA规范是个标准的规范，也就是说，无论是否是相同的数据库，只要这些数据库（比如MySQL、Oracle、SQL Server）支持XA规范，那么它们就能实现分布式事务，也就是能保证全局事务的一致性。</p><p>2.相比商业数据库对XA规范的支持，MySQL XA性能不高，所以，我不推荐你在高并发的性能至上场景中，使用MySQL XA。</p><p>3.在实际开发中，为了降低单点压力，通常会根据业务情况进行分表分库，将表分布在不同的库中，那么，在这种情况下，如果后续需要保证全局事务的一致性时，也需要实现分布式事务。</p><p>最后我想说的是，尽管XA规范保证了全局事务的一致性，实现成本较低，而且包括MySQL在内的主流数据库都已经支持，但因为XA规范是基于二阶段提交协议实现的，所以它也存在二阶段提交协议的局限，比如：</p><p>首先，XA规范存在单点问题，也就是说，因为事务管理器在整个流程中扮演的角色很关键，如果其宕机，比如在第一阶段已经完成了，在第二阶段正准备提交的时候，事务管理器宕机了，相关的资源会被锁定，无法访问。</p><p>其次，XA规范存在资源锁定的问题，也就是说，在进入准备阶段后，资源管理器中的资源将处于锁定状态，直到提交完成或者回滚完成。</p><p>不过，虽然MySQL XA能实现数据层的分布式事务，但在我现在负责的这套业务系统中，还面临这样的问题：那就是在接收到外部的指令后，我需要访问多个内部系统，执行指令约定的操作，而且，我必须保证指令执行的原子性，也就是说，要么全部成功，要么全部失败，那么我应该怎么做呢？答案是TCC，这也是我在下一讲想和你聊一聊的。</p><h2>课堂思考</h2><p>既然我提到了我通过MySQL XA解决了数据库操作的一致性问题，而MySQL XA性能不高，适用于对并发性能要求不高的场景中。那么你不妨想想，在MySQL XA不能满足并发需求时，如何重新设计底层数据系统，来避免采用分布式事务呢？为什么呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这节课让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"加餐 | ZAB协议（三）：如何处理读写请求？","id":237950},"right":{"article_title":"加餐 | TCC如何实现指令执行的原子性？","id":254956}},"comments":[{"had_liked":false,"id":229203,"user_name":"侧耳倾听","can_delete":false,"product_type":"c1","uid":1512642,"ip_address":"","ucode":"5BF2A2440B54F0","user_header":"https://static001.geekbang.org/account/avatar/00/17/14/c2/46ebe3a0.jpg","comment_is_top":false,"comment_ctime":1592922706,"is_pvip":true,"replies":[{"id":"87382","content":"加一颗星：）","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595438178,"ip_address":"","comment_id":229203,"utype":1}],"discussion_count":1,"race_medal":0,"score":"121852006994","product_id":100046101,"comment_content":"既然是多数据库场景，首先，需要搞清楚的是为什么引入多数据库？如果是基于性能的考虑，并发量大，需要考虑的是读多写少，还是写多读少？如果是读多写少，那么可以采用一主多从，主库负责写，以及引入缓存机制来提高数据的实时性。如果是写多读少，问题有些复杂，如果读的实时要求不高，可以考虑采用队列的形式，后台线程负责写入数据库。如果是基于业务的拆分，要搞明白是不是需要拆分？是在现有硬件基础上解决不了并发的写入，还是仅仅是因为模仿。如果是后者，不妨先考虑将业务表的表空间分不到不同的磁盘，避免单磁盘的写入，可以提高一定的数据写入效率。在这个过程中还需要考虑数据库各种缓存的大小设定，比如chang buffer，redolog文件。争取做到单点优化做到无突破，再考虑横向或者纵向的扩展。一旦牵扯进分布式架构，就不再是一个数量级的问题展现。","like_count":29,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499377,"discussion_content":"加一颗星：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595438178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229853,"user_name":"ppyh","can_delete":false,"product_type":"c1","uid":1351148,"ip_address":"","ucode":"14022ADEC9B53F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","comment_is_top":false,"comment_ctime":1593164035,"is_pvip":false,"replies":[{"id":"84874","content":"加一颗星:)，第一个问题是如何实现多个MySQL间的操作事务，第二问题，是实现多个业务系统（包括非数据库系统）的操作事务，这时要考虑TCC了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1593248323,"ip_address":"","comment_id":229853,"utype":1}],"discussion_count":3,"race_medal":0,"score":"74607608067","product_id":100046101,"comment_content":"这个和我最近遇到的问题很类似，我现在负责的一个业务系统，需要接收来自外部的指令，然后访问多个内部其他系统来执行指令，但执行完指令后，我需要同时更新多个内部 MySQL 数据库中的值（比如 MySQL 数据库 A、B、C）。<br>不过，虽然 MySQL XA 能实现数据层的分布式事务，但在我现在负责的这套业务系统中，还面临这样的问题：那就是在接收到外部的指令后，我需要访问多个内部系统，执行指令约定的操作，而且，我必须保证指令执行的原子性，也就是说，要么全部成功，要么全部失败，那么我应该怎么做呢？答案是 TCC，这也是我在下一讲想和你聊一聊的。<br><br><br><br>这两句话有区别吗，怎么第一句话就可以用mysql xa，第二句话就得用tcc啊","like_count":18,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499669,"discussion_content":"加一颗星:)，第一个问题是如何实现多个MySQL间的操作事务，第二问题，是实现多个业务系统（包括非数据库系统）的操作事务，这时要考虑TCC了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593248323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1499380,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/6vz8MgZia6Xwdhayv9Jdnee7HfDYSAMTUtMAAVORMhiaN8bIM0QJibrQ5EDqB8o5pWE6FRuaqguwG86o5Gh90ruDw/132","nickname":"不会爬树的熊","note":"","ucode":"E417D8D9D5FED2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293135,"discussion_content":"是不是可以理解为\n第一个是一个应用链接多个数据库\n第二个是多个应用系统。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595461514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2714393,"avatar":"","nickname":"Geek_7a6fde","note":"","ucode":"6A00175AD4BF23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401285,"discussion_content":"第二句用tcc的意思是，某些数据源不支持xa，此时想再用xa就没办法了，就可以用tcc","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633618383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229086,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1464199,"ip_address":"","ucode":"854500026E2187","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhuGLVRYZibOTfMumk53Wn8Q0Rkg0o6DzTicbibCq42lWQoZ8lFeQvicaXuZa7dYsr9URMrtpXMVDDww/132","comment_is_top":false,"comment_ctime":1592894161,"is_pvip":false,"replies":[{"id":"84587","content":"感谢一路相伴，多交流:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1592952631,"ip_address":"","comment_id":229086,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40247599825","product_id":100046101,"comment_content":"课程都完结好长一段时间了，老师还在时不时加餐，给老师点赞。","like_count":9,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499328,"discussion_content":"感谢一路相伴，多交流:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592952631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228854,"user_name":"槑·先生","can_delete":false,"product_type":"c1","uid":1445744,"ip_address":"","ucode":"897F0475592E3A","user_header":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","comment_is_top":false,"comment_ctime":1592826213,"is_pvip":true,"replies":[{"id":"87380","content":"加一颗星:)，MySQL XA实现的是数据库层面的分布式事务，那么，当不仅涉及到数据库，还涉及到其他业务系统时，这时就需要TCC了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595437991,"ip_address":"","comment_id":228854,"utype":1}],"discussion_count":2,"race_medal":2,"score":"14477728101","product_id":100046101,"comment_content":"老师，有个问题不太理解。事务不就包含原子性吗？分布式事务不是也应该包含指令的原子性吗，为什么会存在最后那个指令原子性的问题。","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499217,"discussion_content":"加一颗星:)，MySQL XA实现的是数据库层面的分布式事务，那么，当不仅涉及到数据库，还涉及到其他业务系统时，这时就需要TCC了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595437991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2949200,"avatar":"","nickname":"Geek_adcf47","note":"","ucode":"D7C57C17DF3E4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":563434,"discussion_content":"老师，在我理解xa或者说分布式事务实现的都是原子性问题，隔离性，以及持久化，是由数据库本身实现的，而事务是应用层面的一致性问题！是通过aid同时实现的！不知道对不对！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649994158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":499217,"ip_address":""},"score":563434,"extra":""}]}]},{"had_liked":false,"id":229219,"user_name":"ξ！","can_delete":false,"product_type":"c1","uid":1636657,"ip_address":"","ucode":"F9797D21EBE10E","user_header":"https://static001.geekbang.org/account/avatar/00/18/f9/31/b75cc6d5.jpg","comment_is_top":false,"comment_ctime":1592925737,"is_pvip":false,"replies":[{"id":"87383","content":"加一颗星：），XA实现的是分布式事务，系统状态的一致性，操作要么全部执行成功，要么全部不执行。Raft能保证的是，写操作完成后，后续所有的读操作都能读取到更新后的值。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595438508,"ip_address":"","comment_id":229219,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10182860329","product_id":100046101,"comment_content":"老师，raft是不是在保证有状态节点间的内存中数据一致性，而XA在保证数据持久化后的一致性","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499383,"discussion_content":"加一颗星：），XA实现的是分布式事务，系统状态的一致性，操作要么全部执行成功，要么全部不执行。Raft能保证的是，写操作完成后，后续所有的读操作都能读取到更新后的值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595438508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1196886,"avatar":"https://static001.geekbang.org/account/avatar/00/12/43/56/62c38c36.jpg","nickname":"欧阳","note":"","ucode":"2612576E262813","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288022,"discussion_content":"xa是解决partition的问题，raft是解决replica的问题\nxa举的例子是在两个数据库执行不同的sql；raft通常是不同的副本如何就一系列值达成共识，比如set x=1 x=2在多个副本如何达成线性一致","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1593614716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1447569,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/WtHCCMoLJ2DvzqQwPYZyj2RlN7eibTLMHDMTSO4xIKjfKR1Eh9L98AMkkZY7FmegWyGLahRQJ5ibPzeeFtfpeSow/132","nickname":"脱缰的野马__","note":"","ucode":"D5F993E7232C61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1196886,"avatar":"https://static001.geekbang.org/account/avatar/00/12/43/56/62c38c36.jpg","nickname":"欧阳","note":"","ucode":"2612576E262813","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":577747,"discussion_content":"补充说下什么是partition，什么是replication\n首先讨论的对象都是数据\npartition：指分区，比如电商例子，商品库存和订单这两个数据，在最开始的单体应用中，商品库存管理和订单管理模块应该是会在一个应用集成(假设)，那意味着对应的库存和订单数据通常也会设计在一个数据库里面的两个表，这种情况下其实我们“扣减库存”和“创建订单”这两个操作在一个本地事务就能完成，但是由于系统的演化，演化成分布式微服务架构后，商品库存管理和订单管理这两个模块肯定是在不同的应用当中，进而两个数据表通常也不会在一个数据库里面了，这种情况下，要保证事务特性，就涉及到分布式事务的考虑场景了，总的来说这就是partition的问题。\nreplication：指复制，换句话说就是“备份”或者“冗余“，一般应用系统或者数据，采用多备份，比如数据库的主从结构，减少数据丢失风险，主从读写分离提升总体的访问性能，应用的多机房多实例部署，都是提为了提高系统可用性，这都是replication的应用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656315405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288022,"ip_address":""},"score":577747,"extra":""}]},{"author":{"id":1972293,"avatar":"","nickname":"Geek_e7c2ff","note":"","ucode":"611D7A93388A87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288001,"discussion_content":"一致性协议和共识协议的区别。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593611078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337647,"user_name":"janey","can_delete":false,"product_type":"c1","uid":1227067,"ip_address":"","ucode":"0BD4BDB4EB2E94","user_header":"https://static001.geekbang.org/account/avatar/00/12/b9/3b/7224f3b8.jpg","comment_is_top":false,"comment_ctime":1646953692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5941920988","product_id":100046101,"comment_content":"请问老师，mysql xa在xa prepare后资源锁定，锁定的主要是什么资源呢？这个资源锁定的影响面主要是哪些？","like_count":2},{"had_liked":false,"id":343150,"user_name":"Andy Huang","can_delete":false,"product_type":"c1","uid":1105776,"ip_address":"","ucode":"72ACB53CFDBCDA","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/70/52f2ab90.jpg","comment_is_top":false,"comment_ctime":1650680001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650680001","product_id":100046101,"comment_content":"有谁知道postgresql的分布式版本有哪些? 各是用了什么协议? 我正在做选型","like_count":0},{"had_liked":false,"id":315385,"user_name":"ezekiel","can_delete":false,"product_type":"c1","uid":1158795,"ip_address":"","ucode":"AB4AB6FA8612D8","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/8b/43ce01ca.jpg","comment_is_top":false,"comment_ctime":1633872725,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1633872725","product_id":100046101,"comment_content":"既然我提到了我通过 MySQL XA 解决了数据库操作的一致性问题，而 MySQL XA 性能不高，适用于对并发性能要求不高的场景中。那么你不妨想想，在 MySQL XA 不能满足并发需求时，如何重新设计底层数据系统，来避免采用分布式事务呢？为什么呢？<br>==============================================================<br>思考题的答案是什么呢？","like_count":0,"discussions":[{"author":{"id":2055809,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","nickname":"码小呆","note":"","ucode":"44532D6ABF9340","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572266,"discussion_content":"单库就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652684144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315202,"user_name":"Geek_a21638","can_delete":false,"product_type":"c1","uid":2319846,"ip_address":"","ucode":"6183EC95A59099","user_header":"","comment_is_top":false,"comment_ctime":1633748198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633748198","product_id":100046101,"comment_content":"&quot;事务管理器只是标记事务，并不执行事务，最终是由（应用程序）通知资源管理器来执行事务操作的&quot;, 我的理解应该是 “最终是由（事务管理器TM）通知资源管理器来执行事务操作的”？？","like_count":0},{"had_liked":false,"id":277693,"user_name":"blentle","can_delete":false,"product_type":"c1","uid":1064679,"ip_address":"","ucode":"AC092609A4942A","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e7/261711a5.jpg","comment_is_top":false,"comment_ctime":1612517405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612517405","product_id":100046101,"comment_content":"韩老师, 如果有一个事物分支在 commit阶段由于外部影响，commit了一个不存在的 Xid. 抛出了异常.这时其他的分支已经commit成功了. 最终能否保证所有的事物分支回滚呢？","like_count":0},{"had_liked":false,"id":245845,"user_name":"路人","can_delete":false,"product_type":"c1","uid":1084291,"ip_address":"","ucode":"55FF703DE772D7","user_header":"https://static001.geekbang.org/account/avatar/00/10/8b/83/d2afc837.jpg","comment_is_top":false,"comment_ctime":1599093294,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1599093294","product_id":100046101,"comment_content":"commit阶段如果只有部分成功，需要程序考虑补偿机制","like_count":0,"discussions":[{"author":{"id":2450893,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/L8EpqHoAnmvkzCIsdOkv5QvhIzu5tMaF2FDusXShqukv5ZBkS8DbicWaErjnYydibiaqBrs70wQ8P6axvC2FbWpbQ/132","nickname":"Geek_d3928c","note":"","ucode":"7CB09FD1F7CB23","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387513,"discussion_content":"那就是属于tcc了，业务逻辑上补偿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628226599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2714393,"avatar":"","nickname":"Geek_7a6fde","note":"","ucode":"6A00175AD4BF23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2450893,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/L8EpqHoAnmvkzCIsdOkv5QvhIzu5tMaF2FDusXShqukv5ZBkS8DbicWaErjnYydibiaqBrs70wQ8P6axvC2FbWpbQ/132","nickname":"Geek_d3928c","note":"","ucode":"7CB09FD1F7CB23","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":401287,"discussion_content":"补偿是属于saga了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633618446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387513,"ip_address":""},"score":401287,"extra":""}]}]},{"had_liked":false,"id":243010,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597918615,"is_pvip":false,"replies":[{"id":"96358","content":"加一颗星:)，这里的场景是执行多条SQL语句，在不同节点上执行不同的语句，需要实现各节点状态的一致，要么全部成功，要么全部失败。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606826163,"ip_address":"","comment_id":243010,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597918615","product_id":100046101,"comment_content":"我的思路是,首先只在主节点上执行事务,然后降低和跟随者的延迟,来保证,在主节点上执行成功了,必然会可以在从节点上执行成功,这是否是一种解决方案呢?<br>可以利用GTID来辅助查询工作","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504154,"discussion_content":"加一颗星:)，这里的场景是执行多条SQL语句，在不同节点上执行不同的语句，需要实现各节点状态的一致，要么全部成功，要么全部失败。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606826163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242759,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1597834329,"is_pvip":false,"replies":[{"id":"96360","content":"加一颗星:)，不同的连接。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606826594,"ip_address":"","comment_id":242759,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597834329","product_id":100046101,"comment_content":"按照文章中的表述，如果要实现分布式事务的话，需要对应的数据库实现XA规范接口。而且客户端会聚集一定的复杂性：因为我看图中客户端需要把一个事务里的不同语句发给不同的MySQL，那要怎么样才能知道自己的语句应该放在哪个SQL上执行呢？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504090,"discussion_content":"加一颗星:)，不同的连接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606826594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235656,"user_name":"Geek_9d0e04","can_delete":false,"product_type":"c1","uid":1902220,"ip_address":"","ucode":"F5560CE5BDB125","user_header":"","comment_is_top":false,"comment_ctime":1595139152,"is_pvip":false,"replies":[{"id":"88121","content":"加一颗星:)，事务管理器是逻辑的，一般不需要独立的事务管理器。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596205214,"ip_address":"","comment_id":235656,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595139152","product_id":100046101,"comment_content":"请假老师，操作两个数据库，我自己在代码中也能实现两阶段提交呀，两个数据库连接先各自执行自己的SQL，作为第一阶段；都没问题再提交事务，否则回滚，作为第二阶段。我觉得事务管理器的作用，也就是上面内容吧，那为何有需要独立一个事务管理器，增加单点呢？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501797,"discussion_content":"加一颗星:)，事务管理器是逻辑的，一般不需要独立的事务管理器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596205214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}