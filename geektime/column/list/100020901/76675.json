{"id":76675,"title":"22 | 答疑（三）：文件系统与磁盘的区别是什么？","content":"<p>你好，我是倪朋飞。</p><p>专栏更新至今，四大基础模块的第二个模块——内存性能篇，我们就已经学完了。很开心你还没有掉队，仍然在积极学习和实践操作，并且热情地留言与讨论。</p><p>这些留言中，我非常高兴看到，很多同学用学过的案例思路，解决了实际工作中的性能问题。我也非常感谢 espzest、大甜菜、Smile 等积极思考的同学，指出了文章中某些不当或者不严谨的地方。另外，还有我来也、JohnT3e、白华等同学，积极在留言区讨论学习和实践中的问题，也分享了宝贵的经验，在这里也非常感谢你们。</p><p>今天是性能优化的第三期。照例，我从内存模块的留言中摘出了一些典型问题，作为今天的答疑内容，集中回复。为了便于你学习理解，它们并不是严格按照文章顺序排列的。</p><p>每个问题，我都附上了留言区提问的截屏。如果你需要回顾内容原文，可以扫描每个问题右下方的二维码查看。</p><h2>问题1：内存回收与OOM</h2><p>虎虎的这个问题，实际上包括四个子问题，即，</p><ul>\n<li>\n<p>怎么理解 LRU 内存回收？</p>\n</li>\n<li>\n<p>回收后的内存又到哪里去了？</p>\n</li>\n<li>\n<p>OOM 是按照虚拟内存还是实际内存来打分？</p>\n</li>\n<li>\n<p>怎么估计应用程序的最小内存？</p>\n</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/90/36/905b15ee0df924038befe0e61ce81436.png?wh=900*1581\" alt=\"\"></p><p>其实在 Linux <a href=\"https://time.geekbang.org/column/article/74272\">内存的原理篇</a>和 <a href=\"https://time.geekbang.org/column/article/75797\">Swap 原理篇</a>中我曾经讲到，一旦发现内存紧张，系统会通过三种方式回收内存。我们来复习一下，这三种方式分别是 ：</p><!-- [[[read_end]]] --><ul>\n<li>\n<p>基于 LRU（Least Recently Used）算法，回收缓存；</p>\n</li>\n<li>\n<p>基于 Swap 机制，回收不常访问的匿名页；</p>\n</li>\n<li>\n<p>基于 OOM（Out of Memory）机制，杀掉占用大量内存的进程。</p>\n</li>\n</ul><p>前两种方式，缓存回收和 Swap 回收，实际上都是基于 LRU 算法，也就是优先回收不常访问的内存。LRU 回收算法，实际上维护着 active 和 inactive 两个双向链表，其中：</p><ul>\n<li>\n<p>active 记录活跃的内存页；</p>\n</li>\n<li>\n<p>inactive 记录非活跃的内存页。</p>\n</li>\n</ul><p>越接近链表尾部，就表示内存页越不常访问。这样，在回收内存时，系统就可以根据活跃程度，优先回收不活跃的内存。</p><p>活跃和非活跃的内存页，按照类型的不同，又分别分为文件页和匿名页，对应着缓存回收和 Swap 回收。</p><p>当然，你可以从 /proc/meminfo 中，查询它们的大小，比如：</p><pre><code># grep表示只保留包含active的指标（忽略大小写）\n# sort表示按照字母顺序排序\n$ cat /proc/meminfo | grep -i active | sort\nActive(anon):     167976 kB\nActive(file):     971488 kB\nActive:          1139464 kB\nInactive(anon):      720 kB\nInactive(file):  2109536 kB\nInactive:        2110256 kB\n</code></pre><p>第三种方式，OOM 机制按照 oom_score 给进程排序。oom_score 越大，进程就越容易被系统杀死。</p><p>当系统发现内存不足以分配新的内存请求时，就会尝试<a href=\"https://time.geekbang.org/column/article/75797\">直接内存回收</a>。这种情况下，如果回收完文件页和匿名页后，内存够用了，当然皆大欢喜，把回收回来的内存分配给进程就可以了。但如果内存还是不足，OOM就要登场了。</p><p>OOM 发生时，你可以在 dmesg 中看到 Out of memory 的信息，从而知道是哪些进程被 OOM 杀死了。比如，你可以执行下面的命令，查询 OOM 日志：</p><pre><code>$ dmesg | grep -i &quot;Out of memory&quot;\nOut of memory: Kill process 9329 (java) score 321 or sacrifice child\n</code></pre><p>当然了，如果你不希望应用程序被 OOM 杀死，可以调整进程的 oom_score_adj，减小 OOM 分值，进而降低被杀死的概率。或者，你还可以开启内存的 overcommit，允许进程申请超过物理内存的虚拟内存（这儿实际上假设的是，进程不会用光申请到的虚拟内存）。</p><p>这三种方式，我们就复习完了。接下来，我们回到开始的四个问题，相信你自己已经有了答案。</p><ol>\n<li>\n<p>LRU 算法的原理刚才已经提到了，这里不再重复。</p>\n</li>\n<li>\n<p>内存回收后，会被重新放到未使用内存中。这样，新的进程就可以请求、使用它们。</p>\n</li>\n<li>\n<p>OOM 触发的时机基于虚拟内存。换句话说，进程在申请内存时，如果申请的虚拟内存加上服务器实际已用的内存之和，比总的物理内存还大，就会触发 OOM。</p>\n</li>\n<li>\n<p>要确定一个进程或者容器的最小内存，最简单的方法就是让它运行起来，再通过 ps 或者 smap ，查看它的内存使用情况。不过要注意，进程刚启动时，可能还没开始处理实际业务，一旦开始处理实际业务，就会占用更多内存。所以，要记得给内存留一定的余量。</p>\n</li>\n</ol><h2>问题2: 文件系统与磁盘的区别</h2><p>文件系统和磁盘的原理，我将在下一个模块中讲解，它们跟内存的关系也十分密切。不过，在学习Buffer 和 Cache 的原理时，我曾提到，Buffer 用于磁盘，而 Cache 用于文件。因此，有不少同学困惑了，比如 JJ 留言中的这两个问题。</p><ul>\n<li>\n<p>读写文件最终也是读写磁盘，到底要怎么区分，是读写文件还是读写磁盘呢？</p>\n</li>\n<li>\n<p>读写磁盘难道可以不经过文件系统吗？</p>\n</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/6a/b1/6ac5f2e0bf43098a3ba2d14f057eeeb1.png?wh=900*1050\" alt=\"\"></p><p>如果你也有相同的疑问，主要还是没搞清楚，磁盘和文件的区别。我在“<a href=\"https://time.geekbang.org/column/article/74633\">怎么理解内存中的Buffer和Cache</a>”文章的留言区简单回复过，不过担心有同学没有看到，所以在这里重新讲一下。</p><p>磁盘是一个存储设备（确切地说是块设备），可以被划分为不同的磁盘分区。而在磁盘或者磁盘分区上，还可以再创建文件系统，并挂载到系统的某个目录中。这样，系统就可以通过这个挂载目录，来读写文件。</p><p>换句话说，磁盘是存储数据的块设备，也是文件系统的载体。所以，文件系统确实还是要通过磁盘，来保证数据的持久化存储。</p><p>你在很多地方都会看到这句话， Linux 中一切皆文件。换句话说，你可以通过相同的文件接口，来访问磁盘和文件（比如 open、read、write、close 等）。</p><ul>\n<li>\n<p>我们通常说的“文件”，其实是指普通文件。</p>\n</li>\n<li>\n<p>而磁盘或者分区，则是指块设备文件。</p>\n</li>\n</ul><p>你可以执行 “ls -l &lt;路径&gt;” 查看它们的区别。如果不懂ls 输出的含义，别忘了man一下就可以。执行 man ls 命令，以及 info ‘(coreutils) ls invocation’ 命令，就可以查到了。</p><p>在读写普通文件时，I/O 请求会首先经过文件系统，然后由文件系统负责，来与磁盘进行交互。而在读写块设备文件时，会跳过文件系统，直接与磁盘交互，也就是所谓的“裸I/O”。</p><p>这两种读写方式使用的缓存自然不同。文件系统管理的缓存，其实就是 Cache 的一部分。而裸磁盘的缓存，用的正是Buffer。</p><p>更多关于文件系统、磁盘以及 I/O 的原理，你先不要着急，往后我们都会讲到。</p><h2>问题3: 如何统计所有进程的物理内存使用量</h2><p>这其实是 <a href=\"https://time.geekbang.org/column/article/74633\">怎么理解内存中的Buffer和Cache</a> 的课后思考题，无名老卒、Griffin、JohnT3e 等少数几个同学，都给出了一些思路。</p><p>比如，无名老卒同学的方法，是把所有进程的 RSS 全部累加：</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/64/baa48809addf1f7b4d7c280f4ce03764.png?wh=900*1713\" alt=\"\"></p><p>这种方法，实际上导致不少地方会被重复计算。RSS 表示常驻内存，把进程用到的共享内存也算了进去。所以，直接累加会导致共享内存被重复计算，不能得到准确的答案。</p><p>留言中好几个同学的答案都有类似问题。你可以重新检查一下自己的方法，弄清楚每个指标的定义和原理，防止重复计算。</p><p>当然，也有同学的思路非常正确，比如 JohnT3e 提到的，这个问题的关键在于理解 PSS 的含义。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/1c/f5c56462ba5c821de1454a9c021e0f1c.png?wh=900*1050\" alt=\"\"></p><p>你当然可以通过 stackexchange 上的<a href=\"https://unix.stackexchange.com/questions/33381/getting-information-about-a-process-memory-usage-from-proc-pid-smaps\">链接</a>找到答案，不过，我还是更推荐，直接查 proc 文件系统的<a href=\"https://www.kernel.org/doc/Documentation/filesystems/proc.txt\">文档</a>：</p><blockquote>\n<p>The “proportional set size” (PSS) of a process is the count of pages it has in memory, where each page is divided by the number of processes sharing <a href=\"http://it.%20So\">it. So</a> if a process has 1000 pages all to itself, and 1000 shared with one other process, its PSS will be 1500.</p>\n</blockquote><p>这里我简单解释一下，每个进程的PSS ，是指把共享内存平分到各个进程后，再加上进程本身的非共享内存大小的和。</p><p>就像文档中的这个例子，一个进程的非共享内存为  1000 页，它和另一个进程的共享进程也是  1000 页，那么它的PSS=1000/2+1000=1500 页。</p><p>这样，你就可以直接累加 PSS ，不用担心共享内存重复计算的问题了。</p><p>比如，你可以运行下面的命令来计算：</p><pre><code># 使用grep查找Pss指标后，再用awk计算累加值\n$ grep Pss /proc/[1-9]*/smaps | awk '{total+=$2}; END {printf &quot;%d kB\\n&quot;, total }'\n391266 kB\n</code></pre><h2>问题4: CentOS系统中如何安装 bcc-tools</h2><p>很多同学留言说用的是 CentOS 系统。虽然我在文章中也给出了一个<a href=\"https://github.com/iovisor/bcc/issues/462\">参考文档</a>，不过 bcc-tools 工具安装起来还是有些困难。</p><p>比如白华同学留言表示，网络上的教程不太完整，步骤有些乱：</p><p><img src=\"https://static001.geekbang.org/resource/image/03/91/036cde548f2455e3d80b6b1c50e33c91.png?wh=900*1050\" alt=\"\"></p><p>不过，白华和渡渡鸟_linux同学在探索实践后，留言分享了他们的经验，感谢你们的分享。</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/17/8b80a335c3fa543226f42dcb2c506017.png?wh=900*1050\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/f3/0d/f34b80fc9f7eefc928959bfb41ce590d.png?wh=900*2157\" alt=\"\"></p><p>在这里，我也统一回复一下，在 CentOS 中安装 bcc-tools 的步骤。以 CentOS 7 为例，整个安装主要可以分两步。</p><p>第一步，升级内核。你可以运行下面的命令来操作：</p><pre><code># 升级系统\nyum update -y\n\n# 安装ELRepo\nrpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\nrpm -Uvh https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm\n\n# 安装新内核\nyum remove -y kernel-headers kernel-tools kernel-tools-libs\nyum --enablerepo=&quot;elrepo-kernel&quot; install -y kernel-ml kernel-ml-devel kernel-ml-headers kernel-ml-tools kernel-ml-tools-libs kernel-ml-tools-libs-devel\n\n# 更新Grub后重启\ngrub2-mkconfig -o /boot/grub2/grub.cfg\ngrub2-set-default 0\nreboot\n\n# 重启后确认内核版本已升级为4.20.0-1.el7.elrepo.x86_64\nuname -r\n</code></pre><p>第二步，安装 bcc-tools：</p><pre><code># 安装bcc-tools\nyum install -y bcc-tools\n\n# 配置PATH路径\nexport PATH=$PATH:/usr/share/bcc/tools\n\n# 验证安装成功\ncachestat \n</code></pre><h2>问题5: 内存泄漏案例的优化方法</h2><p>这是我在 <a href=\"https://time.geekbang.org/column/article/75670\">内存泄漏了，我该如何定位和处理</a> 中留的一个思考题。这个问题是这样的：</p><p>在内存泄漏案例的最后，我们通过增加 free() 调用，释放了函数 fibonacci() 分配的内存，修复了内存泄漏的问题。就这个案例而言，还有没有其他更好的修复方法呢？</p><p>很多同学留言写下了自己的想法，都很不错。这里，我重点表扬下郭江伟同学，他给出的方法非常好：</p><p><img src=\"https://static001.geekbang.org/resource/image/75/e4/757c532b561d142306c435a57277cae4.png?wh=900*2112\" alt=\"\"></p><p>他的思路是不用动态内存分配的方法，而是用数组来暂存计算结果。这样就可以由系统自动管理这些栈内存，也不存在内存泄漏的问题了。</p><p>这种减少动态内存分配的思路，除了可以解决内存泄漏问题，其实也是常用的内存优化方法。比如，在需要大量内存的场景中，你就可以考虑用栈内存、内存池、HugePage 等方法，来优化内存的分配和管理。</p><p>除了这五个问题，还有一点我也想说一下。很多同学在说工具的版本问题，的确，生产环境中的 Linux 版本往往都比较低，导致很多新工具不能在生产环境中直接使用。</p><p>不过，这并不代表我们就无能为力了。毕竟，系统的原理都是大同小异的。这其实也是我一直强调的观点。</p><ul>\n<li>\n<p>在学习时，最好先用最新的系统和工具，它们可以为你提供更简单直观的结果，帮你更好的理解系统的原理。</p>\n</li>\n<li>\n<p>在你掌握了这些原理后，回过头来，再去理解旧版本系统中的工具和原理，你会发现，即便旧版本中的很多工具并不是那么好用，但是原理和指标是类似的，你依然可以轻松掌握它们的使用方法。</p>\n</li>\n</ul><p>最后，欢迎继续在留言区写下你的疑问，我会持续不断地解答。我的目的不变，希望可以和你一起，把文章的知识变成你的能力，我们不仅仅在实战中演练，也要在交流中进步。</p><p></p>","comments":[{"had_liked":false,"id":58068,"user_name":"白华","can_delete":false,"product_type":"c1","uid":1315666,"ip_address":"","ucode":"FC9BACFCA6E8C1","user_header":"https://static001.geekbang.org/account/avatar/00/14/13/52/db1b01fc.jpg","comment_is_top":false,"comment_ctime":1546990133,"is_pvip":false,"replies":[{"id":"20987","content":"😊 k8s别忘了设置好内存资源的请求和限制","user_name":"作者回复","comment_id":58068,"uid":"1001282","ip_address":"","utype":1,"ctime":1547027505,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"65971499573","product_id":100020901,"comment_content":"自己跑虚拟机跑的k8s小集群，node节点跑的镜像太多，就特别卡，看集群情况发现好多pod都死了，看虚拟机上面就写到oom自动杀进程了，以前从没遇到过oom，这次一下就知道怎么回事了","like_count":15,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435889,"discussion_content":"😊 k8s别忘了设置好内存资源的请求和限制","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1547027505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1302228,"avatar":"https://static001.geekbang.org/account/avatar/00/13/de/d4/b83c4185.jpg","nickname":"David.cui","note":"","ucode":"AB46F310403612","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589394,"discussion_content":"Bcc折腾一下午最终没有搞定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664807289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58972,"user_name":"wykkx","can_delete":false,"product_type":"c1","uid":1122358,"ip_address":"","ucode":"ABCDF49E7A95C8","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/36/b3e2f1d5.jpg","comment_is_top":false,"comment_ctime":1547263143,"is_pvip":false,"replies":[{"id":"22295","content":"1.是的；2. swap都满了，说明内存也耗尽了呀，这时候就要OOM了","user_name":"作者回复","comment_id":58972,"uid":"1001282","ip_address":"","utype":1,"ctime":1548248182,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"57381837991","product_id":100020901,"comment_content":"老师您好，请教一个问题，您说匿名页回收是使用swap机制，那么这里有几个问题：一是如果我的系统不开启swap（现在很多系统都是不开启swap的，尤其是web类应用，为了提升响应时间），那么匿名页还怎么回收？二是即使我开启了swap，匿名页被放到了swap上，那么swap是如何清理这些匿名页的，总不能一致保存这些匿名页吧。谢谢老师<br>2019-01-10<br> 作者回复<br>1. 不开swap，没法回收<br>2. 取决于这些页的实际访问情况，只要一访问，就会换入到内存中<br>---------追问-------------------------<br>首先谢谢老师的问答，可能是我没有描述清楚。一是，如果按照老师说的“不开swap，没法回收”那么我系统产生的大量匿名页怎么办？是不是一直在内存里，不能被回收？直到引发oom，把这个进程干掉？；二是“ 取决于这些页的实际访问情况，只要一访问，就会换入到内存中”如果这些被换到swap上的匿名页量很大 ，把swap都写满了，这个时候是怎么选择从swap里清理哪些匿名页呢？","like_count":13,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436262,"discussion_content":"1.是的；2. swap都满了，说明内存也耗尽了呀，这时候就要OOM了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1548248182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068361,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","nickname":"明翼","note":"","ucode":"E77F86BEB3D5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536045,"discussion_content":"第一个问题不开启，那就程序自己管理或jvm 虚拟机管理了，不可能等着Pom","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638663806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83235,"user_name":"陳先森","can_delete":false,"product_type":"c1","uid":1229006,"ip_address":"","ucode":"0F7AC617E3FE90","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/ce/fc41ad5e.jpg","comment_is_top":false,"comment_ctime":1554475007,"is_pvip":false,"replies":[{"id":"30186","content":"👍谢谢分享","user_name":"作者回复","comment_id":83235,"uid":"1001282","ip_address":"","utype":1,"ctime":1554638412,"user_name_real":"倪朋飞"}],"discussion_count":3,"race_medal":0,"score":"31619246079","product_id":100020901,"comment_content":"很多同学装bcc工具的时候都提示找不到动态库之类的，经过本人亲测是因为没有安装匹配新内核版本的内核头包。我的系统centos7.3更新了之后内核是5.0.5版本的，升完之后一直提示缺少库文件，我的做法是<br>rpm -qa |grep kerner,先查找系统内核版本，网上查找相应的匹配kerner-devel包，及时没有相同版本也不要紧，比如5.0.5-1的版本就是我系统的版本网上找了没有这个版本对应的kerner-devel包但是不知道为什么升级了会安装这个版本，我系统升级前centos7.3，升级后7.6。我就下载了5.0.5-3并安装，然后版本的，找到对应的包版本，rpm -ql 包版本，做个软连接就OK。至此bcc已经安装完成。做为一个linux运维我都装了2天，可想而知大家。此方法亲测centos7.3","like_count":7,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445932,"discussion_content":"👍谢谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554638412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1611745,"avatar":"https://static001.geekbang.org/account/avatar/00/18/97/e1/0f4d90ff.jpg","nickname":"乖，摸摸头","note":"","ucode":"BD92741A11D3CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3992,"discussion_content":"没看懂，下载5.0.5-3 是kerner的版本还是 kernerl-devel的版本，软连接，是做那个链接，能否再写清楚一点","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565050501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1316840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/e8/f74f4a59.jpg","nickname":"patience","note":"","ucode":"D7BDBFBA979D9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4694,"discussion_content":"在这里 http://mirror.rc.usf.edu/compute_lock/elrepo/kernel/el7/x86_64/RPMS/找一个 4.1-4.20 的内核版本安装就好了，5.0 的会有 bug https://github.com/iovisor/bcc/issues/2329 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565665001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":59298,"user_name":"好好学习","can_delete":false,"product_type":"c1","uid":1258789,"ip_address":"","ucode":"63A002997462E3","user_header":"https://static001.geekbang.org/account/avatar/00/13/35/25/bab760a1.jpg","comment_is_top":false,"comment_ctime":1547347778,"is_pvip":false,"replies":[{"id":"21521","content":"smem是可以的👍，不过要注意计算 PSS 而不是 RSS","user_name":"作者回复","comment_id":59298,"uid":"1001282","ip_address":"","utype":1,"ctime":1547448037,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"31612118850","product_id":100020901,"comment_content":"内存统计这样也可以吧smem|awk &#39;{total+=$7};END{printf &quot;%d kb&#47;n&quot;,total}&#39;","like_count":7,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436319,"discussion_content":"smem是可以的👍，不过要注意计算 PSS 而不是 RSS","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547448037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187462,"user_name":"yann [扬] :曹同学","can_delete":false,"product_type":"c1","uid":1199315,"ip_address":"","ucode":"C449253263E796","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/d3/365fe5a1.jpg","comment_is_top":false,"comment_ctime":1584115189,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14469017077","product_id":100020901,"comment_content":"centos 安装方法安装完了，cachestat可以，memleak 不能使用，bpf text报错","like_count":3,"discussions":[{"author":{"id":1298046,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZicicibGibtR5zAia782Ajc5I5BN3F3tjAdlibATIknHv67gbxeH21N7B6vbgwLjYb1miaLKhqicptB5ibYw/132","nickname":"阿飞","note":"","ucode":"F8B1FC8521264D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280743,"discussion_content":"我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591607793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240911,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1597115170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10187049762","product_id":100020901,"comment_content":"小结：<br>① 内存紧张时的回收三方式：LRU+Swap+OOM<br>② 内存页根据类型分为：文件页（对应缓存回收）和匿名页(对应swap回收)。<br>③OOM方式内存回收<br>-- 如果回收完文件页和匿名页后，内存够用了，皆大欢喜，把回收回来的内存分配给进程就可以了。但如果内存还是不足，OOM 就要起作用了。<br>-- OOM 触发的时机基于虚拟内存。换句话说，进程在申请内存时，如果申请的虚拟内存加上服务器实际已用的内存之和，比总的物理内存还大，就会触发 OOM。<br>④磁盘与文件的区别和联系<br>- 磁盘是存储数据的块设备，也是文件系统的载体。所以，文件系统确实还是要通过磁盘，来保证数据的持久化存储。<br>- 在读写普通文件时，I&#47;O 请求会首先经过文件系统，然后由文件系统负责，来与磁盘进行交互。而在读写块设备文件时，会跳过文件系统，直接与磁盘交互，也就是所谓的“裸 I&#47;O”。<br>- 文件系统管理的缓存，其实就是 Cache 的一部分。而裸磁盘的缓存，用的正是 Buffer。","like_count":2},{"had_liked":false,"id":204846,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1007254,"ip_address":"","ucode":"E28F2602BA25DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","comment_is_top":false,"comment_ctime":1586482172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10176416764","product_id":100020901,"comment_content":"OOM触发的时机基于虚拟内存。不赞同这一说法，OOM是在内核页中断并尝试分配物理页工程中触发的，主要依据rss进行判断。<br><br>举个简单例子：容器限制100M，app一次性malloc 500M，相当于申请500M虚拟内存，但不会触发OOM，然后逐字节写入，不断触发页中断分配物理内存，当分配的物理内存达到100M时触发OOM。","like_count":2},{"had_liked":false,"id":176883,"user_name":"飘云","can_delete":false,"product_type":"c1","uid":1446494,"ip_address":"","ucode":"C6FE0310D6853C","user_header":"https://static001.geekbang.org/account/avatar/00/16/12/5e/77b67a85.jpg","comment_is_top":false,"comment_ctime":1581215144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10171149736","product_id":100020901,"comment_content":"老师 ，一个进程的 oom score 到底是根据什么计算的并没有说， 或者没有说清楚，说明白","like_count":2},{"had_liked":false,"id":75252,"user_name":"平安喜乐","can_delete":false,"product_type":"c1","uid":1102350,"ip_address":"","ucode":"B97D8944B0B035","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/0e/26bf35a4.jpg","comment_is_top":false,"comment_ctime":1552370437,"is_pvip":false,"replies":[{"id":"27485","content":"谢谢分享","user_name":"作者回复","comment_id":75252,"uid":"1001282","ip_address":"","utype":1,"ctime":1552399584,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"10142305029","product_id":100020901,"comment_content":"打卡：<br>bcc-tools install(centos6.9)  已尝试可以顺利安装 <br>https:&#47;&#47;blog.csdn.net&#47;luckgl&#47;article&#47;details&#47;88355074","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442838,"discussion_content":"谢谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552399584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202375,"avatar":"https://static001.geekbang.org/account/avatar/00/12/58/c7/a65f5080.jpg","nickname":"Lucky  Guy","note":"","ucode":"44B4688D764475","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264519,"discussion_content":"最近刚好有需求，在CentOS6.9安装这个工具包，有时间试试，多谢了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589331838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58080,"user_name":"ninuxer","can_delete":false,"product_type":"c1","uid":1243135,"ip_address":"","ucode":"5394ADAF2667D6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKQMM4m7NHuicr55aRiblTSEWIYe0QqbpyHweaoAbG7j2v7UUElqqeP3Ihrm3UfDPDRb1Hv8LvPwXqA/132","comment_is_top":false,"comment_ctime":1546994410,"is_pvip":false,"replies":[{"id":"20986","content":"👍","user_name":"作者回复","comment_id":58080,"uid":"1001282","ip_address":"","utype":1,"ctime":1547027463,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"10136929002","product_id":100020901,"comment_content":"打卡day23<br>喜欢一篇文章看两次，第一次看，第二次是实践的时候再看一遍","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435897,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547027463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326517,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1639550942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5934518238","product_id":100020901,"comment_content":"大佬，关于oom的出发时机，我这边做了实验测试，malloc分配失败是返回NULL,并且设置errno=12(内存不足)。但是不会出发oom. 只有当read &#47; write调用时，do_page_fault映射不到页表才出发oom","like_count":1},{"had_liked":false,"id":259093,"user_name":"Geek_f702be","can_delete":false,"product_type":"c1","uid":1143067,"ip_address":"","ucode":"8E3B5F393C4266","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epumnXjMLYzHkGFhAraIiaAMXpotuUR9PCexBWl25tRLFAvpzs03Hfse4Y1lyeWuryz6z80Fd8AXiaw/132","comment_is_top":false,"comment_ctime":1604629454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5899596750","product_id":100020901,"comment_content":"上一节提到常驻内存是进程实际使用的物理内存，不过，它不包括 Swap 和共享内存。<br>这一节说RSS 表示常驻内存，把进程用到的共享内存也算了进去。所以，直接累加会导致共享内存被重复计算，不能得到准确的答案<br>这是不是前后矛盾了","like_count":1},{"had_liked":false,"id":91911,"user_name":"cuikt","can_delete":false,"product_type":"c1","uid":1242702,"ip_address":"","ucode":"9A1DB426CEFEEA","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/4e/0066303c.jpg","comment_is_top":false,"comment_ctime":1557132277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852099573","product_id":100020901,"comment_content":"bcc-tool 确实厉害，无奈生成环境不可能轻易升级内核，只能学习使用。","like_count":1},{"had_liked":false,"id":78671,"user_name":"H＆HH","can_delete":false,"product_type":"c1","uid":1313162,"ip_address":"","ucode":"A52204F4E4115F","user_header":"https://static001.geekbang.org/account/avatar/00/14/09/8a/842981e0.jpg","comment_is_top":false,"comment_ctime":1553215891,"is_pvip":false,"replies":[{"id":"28750","content":"看错误是找不到依赖的动态链接库，可以试试修复安装 libstdc++","user_name":"作者回复","comment_id":78671,"uid":"1001282","ip_address":"","utype":1,"ctime":1553317237,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"5848183187","product_id":100020901,"comment_content":"老师，初始系统版本是centos7.3，按照你给的安装bcc-tools步骤安装完后还是出现了以下报错，请问老师怎么回事呀<br>[root@server tools]# .&#47;cachetop <br>Traceback (most recent call last):<br>  File &quot;.&#47;cachetop&quot;, line 21, in &lt;module&gt;<br>    from bcc import BPF<br>  File &quot;&#47;usr&#47;lib&#47;python2.7&#47;site-packages&#47;bcc&#47;__init__.py&quot;, line 27, in &lt;module&gt;<br>    from .libbcc import lib, bcc_symbol, bcc_symbol_option, _SYM_CB_TYPE<br>  File &quot;&#47;usr&#47;lib&#47;python2.7&#47;site-packages&#47;bcc&#47;libbcc.py&quot;, line 17, in &lt;module&gt;<br>    lib = ct.CDLL(&quot;libbcc.so.0&quot;, use_errno=True)<br>  File &quot;&#47;usr&#47;lib64&#47;python2.7&#47;ctypes&#47;__init__.py&quot;, line 360, in __init__<br>    self._handle = _dlopen(self._name, mode)<br>OSError: &#47;opt&#47;lampp&#47;lib&#47;libstdc++.so.6: version `GLIBCXX_3.4.14&#39; not found (required by &#47;lib64&#47;libbcc.so.0)<br>[root@server tools]# uname -r<br>5.0.3-1.el7.elrepo.x86_64<br>[root@server tools]# cat &#47;etc&#47;redhat-release <br>CentOS Linux release 7.6.1810 (Core) ","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444186,"discussion_content":"看错误是找不到依赖的动态链接库，可以试试修复安装 libstdc++","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553317237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58124,"user_name":"划时代","can_delete":false,"product_type":"c1","uid":1061454,"ip_address":"","ucode":"9554CE2F83B77F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2o1Izf2YyJSnnI0ErZ51pYRlnrmibqUTaia3tCU1PjMxuwyXSKOLUYiac2TQ5pd5gNGvS81fVqKWGvDsZLTM8zhWg/132","comment_is_top":false,"comment_ctime":1547000169,"is_pvip":false,"replies":[{"id":"21156","content":"什么进程？","user_name":"作者回复","comment_id":58124,"uid":"1001282","ip_address":"","utype":1,"ctime":1547125032,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"5841967465","product_id":100020901,"comment_content":"老师，在“如何统计所有进程的物理内存使用量”的问题中，我曾尝试将&#47;proc&#47;[pid]&#47;smaps中的项Pss相加，但发现一个进程中有多个地址段的Pss为0kB，而Rss是不为0kB的，该区域占用了物理内存却没有计算在Pss内，表示不太理解？","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435917,"discussion_content":"什么进程？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547125032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360255,"user_name":"秋玉白狼","can_delete":false,"product_type":"c1","uid":1649642,"ip_address":"浙江","ucode":"12CCEFAA49B17A","user_header":"https://static001.geekbang.org/account/avatar/00/19/2b/ea/bb9fabd7.jpg","comment_is_top":false,"comment_ctime":1666342289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666342289","product_id":100020901,"comment_content":"倪老师 你好 我是一名运维工程师，通过看你的这个技术专栏 让我在了解系统运行机制和对性能问题排除解决方面都有了很大的提高！真心感谢！","like_count":0},{"had_liked":false,"id":336555,"user_name":"Geek_982ffd","can_delete":false,"product_type":"c1","uid":2821365,"ip_address":"","ucode":"220B8AAA747F02","user_header":"","comment_is_top":false,"comment_ctime":1646211818,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646211818","product_id":100020901,"comment_content":"关于bcc工具的安装  仅4.1内核及以上支持  更进一步建议内核版本4.6及以上版本   Centos7源码安装：https:&#47;&#47;github.com&#47;iovisor&#47;bcc&#47;blob&#47;master&#47;INSTALL.md#centos---source   其他发行版安装也可以在该链接中找到。    最重要的是 文中出现的bcc包github链接出现了 在编译安装时有 头文件不全的提示   强烈建议选择该链接下载最新版本bcc 0.24 ：  https:&#47;&#47;github.com&#47;iovisor&#47;bcc&#47;releases   (兼容最新内核版本5.16)避免此类错误。   ","like_count":0},{"had_liked":false,"id":324912,"user_name":"lfn","can_delete":false,"product_type":"c1","uid":1026593,"ip_address":"","ucode":"2E1558C6A12A89","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/21/6c3ba9af.jpg","comment_is_top":false,"comment_ctime":1638713160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638713160","product_id":100020901,"comment_content":"2021-12-05打卡。","like_count":0},{"had_liked":false,"id":313236,"user_name":"宏典","can_delete":false,"product_type":"c1","uid":2616028,"ip_address":"","ucode":"63953F36596C28","user_header":"https://static001.geekbang.org/account/avatar/00/27/ea/dc/aa699264.jpg","comment_is_top":false,"comment_ctime":1632321193,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1632321193","product_id":100020901,"comment_content":"问题 5: 内存泄漏案例的优化方法 中，将堆改成栈。在函数返回的时候栈空间的局部变量不是释放了吗？","like_count":0},{"had_liked":false,"id":286343,"user_name":"babala","can_delete":false,"product_type":"c1","uid":1856958,"ip_address":"","ucode":"F0F06865D328A6","user_header":"https://static001.geekbang.org/account/avatar/00/1c/55/be/23b0fa67.jpg","comment_is_top":false,"comment_ctime":1617262728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617262728","product_id":100020901,"comment_content":"鲲鹏的cpu920基于arm的系统，好像编译安装bc-tools和pcstat等都遇到各种问题，有没相应的解决方法？","like_count":0},{"had_liked":false,"id":267577,"user_name":"Jasman","can_delete":false,"product_type":"c1","uid":2051085,"ip_address":"","ucode":"C5221E477219A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erGLUqIRJ2gJamFq0SbJksGTNOeHnAQzWZknhRaWFDt5vh1mPpZ9eZdrfvn0bzcRqTZo0yjMW3Ugw/132","comment_is_top":false,"comment_ctime":1607832904,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1607832904","product_id":100020901,"comment_content":"请问老师，我在一台服务器上模拟oom场景，先启动一个程序oom_swap(申请1.2G内存，并且访问内存了),再启动一个oom_bkilled(不断的申请100MB的内存），也看到oom_swap的内存全部swap出去了(&#47;proc&#47;pid&#47;status Swap查看的), 但是oom_bkilled 达到物理内存+swap上线后，只是报申请失败，没有被oom_kill ,请问可能是什么原因啊？","like_count":0,"discussions":[{"author":{"id":1643161,"avatar":"","nickname":"Geek_048a7e","note":"","ucode":"7DA71767433EE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547129,"discussion_content":"不一定是oom申请内存的程序吧，有可能别的程序被oom了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642555796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224968,"user_name":"阿飞","can_delete":false,"product_type":"c1","uid":1298046,"ip_address":"","ucode":"F8B1FC8521264D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZicicibGibtR5zAia782Ajc5I5BN3F3tjAdlibATIknHv67gbxeH21N7B6vbgwLjYb1miaLKhqicptB5ibYw/132","comment_is_top":false,"comment_ctime":1591606126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591606126","product_id":100020901,"comment_content":"系统：centos7.6 更新了内核，执行cachetop没问题，执行memleak会报错：Failed to compile BPF text。 一直找不到解决办法","like_count":0},{"had_liked":false,"id":224315,"user_name":"小学生","can_delete":false,"product_type":"c1","uid":1804356,"ip_address":"","ucode":"0DBB26031234FB","user_header":"https://static001.geekbang.org/account/avatar/00/1b/88/44/87cc5c0f.jpg","comment_is_top":false,"comment_ctime":1591343631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591343631","product_id":100020901,"comment_content":"我centos7.6 内核3.10.0-957.el7.x86_64 直接yum安装的bcc   ","like_count":0},{"had_liked":false,"id":189461,"user_name":"刘友淙","can_delete":false,"product_type":"c1","uid":1620058,"ip_address":"","ucode":"97F3A69A308313","user_header":"","comment_is_top":false,"comment_ctime":1584519237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584519237","product_id":100020901,"comment_content":"D9 打卡","like_count":0},{"had_liked":false,"id":148807,"user_name":"hana","can_delete":false,"product_type":"c1","uid":1600146,"ip_address":"","ucode":"CC1368CC17BC4B","user_header":"https://static001.geekbang.org/account/avatar/00/18/6a/92/0877ed15.jpg","comment_is_top":false,"comment_ctime":1573089347,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573089347","product_id":100020901,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":133077,"user_name":"风清扬","can_delete":false,"product_type":"c1","uid":1047043,"ip_address":"","ucode":"651F1390B64953","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/619e3e48.jpg","comment_is_top":false,"comment_ctime":1568348333,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1568348333","product_id":100020901,"comment_content":"问题五我认为有问题，不知道是不是理解错了。<br>最开始写法存在内存泄露，我认为也是有问题的，返回值是v，类型long long *,那么解引用拿到的还是long long,另外多申请的1023个long long 有啥用????<br><br>郭江伟的解法，是一个long long v[1024],返回值类型long long,返回什么?返回v[0]吗，那剩下的存的什么?","like_count":0},{"had_liked":false,"id":129971,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1567344743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567344743","product_id":100020901,"comment_content":"原来更新内核后可以直接yum安装bcc，不用挨个安装llvm等依赖太好了，赞。","like_count":0},{"had_liked":false,"id":108511,"user_name":"JJj","can_delete":false,"product_type":"c1","uid":1196463,"ip_address":"","ucode":"EA53F2CEAFCFF1","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/af/4307867a.jpg","comment_is_top":false,"comment_ctime":1561789569,"is_pvip":false,"replies":[{"id":"40449","content":"应该是buff&#47;cache+used，参考问题1的第三种方式，先尝试回收内存然后才是OOM","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1562510688,"ip_address":"","comment_id":108511,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561789569","product_id":100020901,"comment_content":"OOM 触发的时机基于虚拟内存。换句话说，进程在申请内存时，如果申请的虚拟内存加上服务器实际已用的内存之和---这里的实际已使用内存是不是对应free里面的used","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456018,"discussion_content":"应该是buff/cache+used，参考问题1的第三种方式，先尝试回收内存然后才是OOM","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562510688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92499,"user_name":"小松松","can_delete":false,"product_type":"c1","uid":1298152,"ip_address":"","ucode":"B9B5FFE7CAA548","user_header":"https://static001.geekbang.org/account/avatar/00/13/ce/e8/12cb8e99.jpg","comment_is_top":false,"comment_ctime":1557285351,"is_pvip":true,"replies":[{"id":"33111","content":"请参考 19 | 案例篇：为什么系统的Swap变高了","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1557324389,"ip_address":"","comment_id":92499,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557285351","product_id":100020901,"comment_content":"老师，请教个问题。 文件页和匿名页是什么呢？ 看书上说的很懵，希望老师能举个实际用途的例子讲解下。","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449287,"discussion_content":"请参考 19 | 案例篇：为什么系统的Swap变高了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557324389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67843,"user_name":"LotusChing","can_delete":false,"product_type":"c1","uid":1284801,"ip_address":"","ucode":"C59F179B528BD3","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/c1/60e65a44.jpg","comment_is_top":false,"comment_ctime":1550295747,"is_pvip":false,"replies":[{"id":"24051","content":"停止进程后当然是会释放进程所占用的内存。我说的是进程一直在运行中的时候，进程自己分配的内存只能进程自己来释放，或者等着进程推出后由系统释放。","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1550326655,"ip_address":"","comment_id":67843,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550295747","product_id":100020901,"comment_content":"老师，您对wykkx同学问题的回答我有些不理解，&quot;不开swap，没法回收匿名页。&quot;，我自己用tomcat容器做了个小实验。<br><br>环境：Ubuntu 14.04.1 LTS, Trusty Tahr，3.13.0-128-generic，docker 17.12.0-ce，tomcat:8-alpine<br><br>我的环境没有启用swap(free看到的都是0)，通过启停tomcat容器，并观察&#47;proc&#47;zoneinfo、&#47;proc&#47;meminfo中anon相关匿名页相关指标，发现这些指标数值会随着启停容器上下浮动。<br><br>这样，是不是说明应用占用的匿名页只有在退出时释放？那应用运行过程中使用到的内存如何释放呢？通过GC么？<br><br>希望老师能抽空回复下关于我们的这个问题么，感谢！","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439396,"discussion_content":"停止进程后当然是会释放进程所占用的内存。我说的是进程一直在运行中的时候，进程自己分配的内存只能进程自己来释放，或者等着进程推出后由系统释放。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550326655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66977,"user_name":"如果","can_delete":false,"product_type":"c1","uid":1320638,"ip_address":"","ucode":"138A3EEEE50850","user_header":"","comment_is_top":false,"comment_ctime":1550050377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550050377","product_id":100020901,"comment_content":"day22，打卡","like_count":0},{"had_liked":false,"id":65036,"user_name":"超","can_delete":false,"product_type":"c1","uid":1131107,"ip_address":"","ucode":"B20F7A2370792C","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/63/a08003a6.jpg","comment_is_top":false,"comment_ctime":1549008962,"is_pvip":false,"replies":[{"id":"23056","content":"使用容器的话，内存可能还受到cgroups的限制。这时候容器OOM只代表容器的内存达到了limit，不代表系统内存使用情况。另外，进程的内存使用不一定是飙升，还有可能缓慢增长（其实大部分内存泄漏都是这样）.<br><br>%commit跟free没有对应关系，commit是一个动态计算出来的估计值","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1549024455,"ip_address":"","comment_id":65036,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549008962","product_id":100020901,"comment_content":"我的现象是32G服务器 free 还有2g多出现oom，但并没有容器的内存升高。<br>进程申请的虚拟内存 + 服务器已用的内存(包括buf&#47;cache) &gt; 物理内存 的时候会触发OOM<br><br>那们我个人理解OOM 发生以后会出现某个进程内存飙升的情况，但从OOM对应的时间上来看，监控没有发现某个容器进程飙升。 不知道是为什么？  <br><br><br><br>ubuntu 16.04<br>sar -r -S 1 %commit 与 free -g 里面又该如何对应呢？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438288,"discussion_content":"使用容器的话，内存可能还受到cgroups的限制。这时候容器OOM只代表容器的内存达到了limit，不代表系统内存使用情况。另外，进程的内存使用不一定是飙升，还有可能缓慢增长（其实大部分内存泄漏都是这样）.\n\n%commit跟free没有对应关系，commit是一个动态计算出来的估计值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549024455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65029,"user_name":"marvinren","can_delete":false,"product_type":"c1","uid":1325147,"ip_address":"","ucode":"F7F7EEE0ED7588","user_header":"https://static001.geekbang.org/account/avatar/00/14/38/5b/26539a0b.jpg","comment_is_top":false,"comment_ctime":1549006977,"is_pvip":false,"replies":[{"id":"23052","content":"不会的，swap回收的是匿名页","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1549023915,"ip_address":"","comment_id":65029,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549006977","product_id":100020901,"comment_content":"我有个问题有点没弄明白，从实验角度上讲，进入cache和buffer的文件页，也会会被swap回收，对么？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438285,"discussion_content":"不会的，swap回收的是匿名页","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549023915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60731,"user_name":"wykkx","can_delete":false,"product_type":"c1","uid":1122358,"ip_address":"","ucode":"ABCDF49E7A95C8","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/36/b3e2f1d5.jpg","comment_is_top":false,"comment_ctime":1547539061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547539061","product_id":100020901,"comment_content":"老师您好，打扰了，我追问的内容麻烦您抽空回答下：<br>---------追问-------------------------<br>首先谢谢老师的问答，可能是我没有描述清楚。一是，如果按照老师说的“不开swap，没法回收”那么我系统产生的大量匿名页怎么办？是不是一直在内存里，不能被回收？直到引发oom，把这个进程干掉？；二是“ 取决于这些页的实际访问情况，只要一访问，就会换入到内存中”如果这些被换到swap上的匿名页量很大 ，把swap都写满了，这个时候是怎么选择从swap里清理哪些匿名页呢？<br>谢谢","like_count":0},{"had_liked":false,"id":60481,"user_name":"ddel_07","can_delete":false,"product_type":"c1","uid":1295801,"ip_address":"","ucode":"34FEA2CB2B96CD","user_header":"https://static001.geekbang.org/account/avatar/00/13/c5/b9/e592d576.jpg","comment_is_top":false,"comment_ctime":1547477752,"is_pvip":false,"replies":[{"id":"22301","content":"栈溢出程序会直接报错的","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1548248742,"ip_address":"","comment_id":60481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547477752","product_id":100020901,"comment_content":"老师，有没有检查栈溢出的工具？因为之前有一个很深调用栈的函数发生了入参不可访问的段错误，所以想查查是不是可能是栈溢出了，但一直没找到合适的工具。","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436522,"discussion_content":"栈溢出程序会直接报错的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548248742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58776,"user_name":"solar","can_delete":false,"product_type":"c1","uid":1316091,"ip_address":"","ucode":"D5BE087E264401","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/dwehJHP4ycAfDb9MoudXb4QSt7YgmISqwwsa928XZ6aTWqwWh0kx0iatjocSibLa7iajXmbGlJ5svegY3P6LfKJ0w/132","comment_is_top":false,"comment_ctime":1547191435,"is_pvip":true,"replies":[{"id":"22292","content":"cache是系统级的，直接看的话，看不出哪些进程导致的。可以借助 vmstat&#47;cachetop&#47;slabtop 综合观测","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1548247979,"ip_address":"","comment_id":58776,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547191435","product_id":100020901,"comment_content":"我想请教一个问题，在我的系统中，64G的内存基本被耗尽，但是有14个G的cache，我想查询到底是哪个进程使用了这么多的cache，如何查询呢？我使用top,smem等工具，都看不到到底是哪个进程使用这么多的cache，请指教如何查询。","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436208,"discussion_content":"cache是系统级的，直接看的话，看不出哪些进程导致的。可以借助 vmstat/cachetop/slabtop 综合观测","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548247979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58691,"user_name":"Brown羊羊","can_delete":false,"product_type":"c1","uid":1315332,"ip_address":"","ucode":"354EC478E57DEE","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/04/5837b21c.jpg","comment_is_top":false,"comment_ctime":1547176605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547176605","product_id":100020901,"comment_content":"打卡一下","like_count":0},{"had_liked":false,"id":58588,"user_name":"二三子也","can_delete":false,"product_type":"c1","uid":1245787,"ip_address":"","ucode":"69C7D86583277D","user_header":"https://static001.geekbang.org/account/avatar/00/13/02/5b/ce326cfc.jpg","comment_is_top":false,"comment_ctime":1547125241,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547125241","product_id":100020901,"comment_content":"Flag<br>还好没掉队，这种定期的答疑与总结超赞。","like_count":0},{"had_liked":false,"id":58538,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1547107470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547107470","product_id":100020901,"comment_content":"[D22打卡]<br>通过学习 内存性能篇 对linux内存的分配有了更深入的理解.<br>准备用学习的知识来分析生产环境中的一个内存问题:<br>某个进程(C+LUA)内存持续升高,c部分的内存是程序启动时就申请好了的,运行过程中不会有明显变化.<br>lua中通过调用 collectgarbage(&#39;count&#39;)  和   collectgarbage(&#39;collect&#39;) 比较回收前和回收后的内存.<br>启动时整个程序的实际占用内存100M, 跑不了一天, 实际内存就升到了400M+,而LUA中打印的内存也才70M+.<br>虽然也了解lua虚拟机释放的内存,并不会及时的被程序释放, 但这多出来的200M内存不知道消耗在什么地方了.<br>一台机器上,十几个进程都这样,总消耗的内存就比较可观了.<br><br>期待接下来的 I&#47;O 性能篇.<br>最近几天太忙了, 昨天出的文章现在才有时间看.<br>","like_count":0},{"had_liked":false,"id":58421,"user_name":"wykkx","can_delete":false,"product_type":"c1","uid":1122358,"ip_address":"","ucode":"ABCDF49E7A95C8","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/36/b3e2f1d5.jpg","comment_is_top":false,"comment_ctime":1547081007,"is_pvip":false,"replies":[{"id":"21150","content":"1. 不开swap，没法回收<br>2. 取决于这些页的实际访问情况，只要一访问，就会换入到内存中","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1547124277,"ip_address":"","comment_id":58421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547081007","product_id":100020901,"comment_content":"老师您好，请教一个问题，您说匿名页回收是使用swap机制，那么这里有几个问题：一是如果我的系统不开启swap（现在很多系统都是不开启swap的，尤其是web类应用，为了提升响应时间），那么匿名页还怎么回收？二是即使我开启了swap，匿名页被放到了swap上，那么swap是如何清理这些匿名页的，总不能一致保存这些匿名页吧。谢谢老师","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436056,"discussion_content":"1. 不开swap，没法回收\n2. 取决于这些页的实际访问情况，只要一访问，就会换入到内存中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547124277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58414,"user_name":"Bruce","can_delete":false,"product_type":"c1","uid":1130514,"ip_address":"","ucode":"31D1CACDCA6AA6","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/12/b0206f40.jpg","comment_is_top":false,"comment_ctime":1547078320,"is_pvip":false,"replies":[{"id":"21152","content":"除了CPU、Mem，还有 I&#47;O 和网络，具体怎么分析还要看你碰到了什么问题。cpu和mem变化不大看起来是个好事呀","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1547124490,"ip_address":"","comment_id":58414,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1547078320","product_id":100020901,"comment_content":"老师好，工作中遇到这样情景：  一个服务跑在Linux上， 客户端通过http和服务端通信，不管客户端怎么增加，服务端的cpu mem始终变化不大， 这种情况下想听听老师平时一般是怎么系统性debug的","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436053,"discussion_content":"除了CPU、Mem，还有 I/O 和网络，具体怎么分析还要看你碰到了什么问题。cpu和mem变化不大看起来是个好事呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547124490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1959822,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","nickname":"Spoon","note":"","ucode":"2FF9193AD482C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338601,"discussion_content":"大概率瓶颈是I/O","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609321115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58148,"user_name":"Adam","can_delete":false,"product_type":"c1","uid":1305633,"ip_address":"","ucode":"338BA720880E4F","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/21/b0fe1bfd.jpg","comment_is_top":false,"comment_ctime":1547002698,"is_pvip":false,"replies":[{"id":"20984","content":"😊 谢谢","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1547027355,"ip_address":"","comment_id":58148,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547002698","product_id":100020901,"comment_content":"这个专栏，对于运维同学来说真是太棒了。","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435928,"discussion_content":"😊 谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547027355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58086,"user_name":"风飘，吾独思","can_delete":false,"product_type":"c1","uid":1131032,"ip_address":"","ucode":"4DF0E7DC22EE53","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/18/edc1b373.jpg","comment_is_top":false,"comment_ctime":1546995163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546995163","product_id":100020901,"comment_content":"打卡","like_count":0}]}