{"id":692691,"title":"32｜缓存淘汰策略：怎么淘汰缓存命中率才不会下降？","content":"<p>你好，我是大明。今天我们来聊一个使用缓存的时候绕不开的话题——如何淘汰键值对？</p><p>这个问题在面试中也很常见。大多数人都能把八股文背好，也就是常见的 LRU 之类的策略都能回答出来。而它在面试中的独特优势，就是能够根据业务设计出花样繁多的解决方案。如果你能在面试中用上这些方案，就能给面试官留下很深刻的印象。</p><p>那么我们先从“为什么要淘汰”这个问题开始学习。</p><h2>为什么要淘汰？</h2><p>我们日常在使用缓存的时候，都会尝试控制整个缓存的开销，尤其是本地缓存的内存开销。比如说线上偶尔会遇到本地缓存了太多数据，导致应用内存不足的问题。如果是 Java 这种垃圾回收的语言，那么你就会遇到频繁地垃圾回收甚至 full GC 之类的问题。</p><p>所以用缓存肯定要控制住缓存的内存使用量。而这就会引出一个问题，万一我达到了内存使用上限，但是我又需要加入新的键值对，怎么办？最保守的做法就是直接报错，那么你就没有办法缓存新的数据了。后续如果缓存中已有的数据过期了，你就能缓存新的数据了。</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/8d/ed91bc802b8fd16ea0f91c3385ce168d.png?wh=1920x1084\" alt=\"图片\"></p><p>但是大多数的业务是不能接受这种方案的，因为这一类的业务认为已经在缓存中的数据可能用不上了，虽然还没有过期，但是还是可以考虑淘汰掉，腾出空间来存放新的数据。这些新的数据比老的数据有更大的可能性被使用。</p><!-- [[[read_end]]] --><h2>淘汰算法</h2><p>最有名的淘汰算法是 LRU 和 LFU。除了这两种，还有最佳置换算法（OPT）和先进先出置换算法（FIFO）等，但是用得都不如 LRU 和 LFU 多，所以这里主要聊LRU 和 LFU这两种。</p><h3>LRU</h3><p>LRU（Least Recently Used）是指最近最少使用算法。也就是说，缓存容量不足的时候，就从所有的 key 里面挑出一个最近一段时间最长时间未使用的 key。</p><p>这个算法从实现上来说很简单，只需要把 key 用额外的链表连起来，然后每次被访问到的 key 都挪到队尾，那么队首就是最近最长时间未访问过的 key。也可以反过来，每次访问过的挪到队首，那么队尾就是最近最久未访问过的 key。比如说你可以借助 Java 的 LinkedHashMap 轻易实现 LRU 算法。</p><p><img src=\"https://static001.geekbang.org/resource/image/26/0f/26ayyd38e37ec287b4c3da2029df670f.png?wh=1920x1084\" alt=\"图片\"></p><p>这里访问是一个含糊的说法，你可以认为读写都是访问，也可以认为只有写是访问。所以有个 LRU 的变种是只有在写的时候，才会挪动这个 key，读并不会，也就是它倾向于保留写频繁的数据。</p><h3>LFU</h3><p>LFU（Least Frequently Used）是最不经常使用算法，它是根据对象的使用次数来确定淘汰对象的，每次都是将使用次数最低的淘汰掉。所以基本的思路就是按照访问频率来给所有的对象排序。每次要淘汰的时候，就从使用次数最少的对象里面找出一个淘汰掉。</p><p>如果有好几个对象的访问频次恰好相等，而且又是最低的，那么你可以自由决策如何淘汰。标准做法是淘汰最先插入的，不过也有一些实现就是随机删一个，又或者删掉排序位置最小的那个。实现的基本思路就是每次读写的时候，对象上面的次数都加 1，然后调整位置。</p><p><img src=\"https://static001.geekbang.org/resource/image/26/a1/26ff10849e7f7ce99b389cb050f395a1.png?wh=1920x1084\" alt=\"图片\"></p><p>这个算法也有一些变种。最主要的变种是统计一段时间内的访问次数而不是整个生命周期的次数。比如说每个对象都只统计近一个小时内的访问次数。但是这种变种的实现复杂度就要高很多。</p><h3>小结</h3><p>在实践中，一般是优先考虑 LRU。这主要是因为 LRU 对时间局部性突出的应用非常友好，而大多数的应用场景都满足时间局部性的要求。</p><p>但是 LRU 在一些特殊的场景下，表现也不好。最典型的场景就是访问历史记录，因为越是历史悠久的，越有可能已经被你淘汰了。另外一个场景是遍历，遍历的时候，当次被遍历到对象总是不会被淘汰掉，而实际上，已经被遍历的对象反而应该被淘汰掉，腾出空间给尚未遍历的对象。</p><p><img src=\"https://static001.geekbang.org/resource/image/31/f0/314549c93d87f66c91cea32b7d784ef0.png?wh=1920x1084\" alt=\"图片\"></p><p>例如，图中遍历到 key5 的时候会触发淘汰，把 key4 淘汰了。紧接着遍历 key4，会把 key3 淘汰了。以此类推，最终结果就是缓存完全没命中。</p><h2>Redis 支持的淘汰算法</h2><p>Redis 支持很多种淘汰算法，你可以通过 maxmemory 选项来控制 Redis 的整个内存使用量，还可以通过指定 maxmemory_policy 来设置淘汰算法。</p><p><img src=\"https://static001.geekbang.org/resource/image/67/00/67f5f45ab8d835375632d3c477411700.jpg?wh=1920x953\" alt=\"图片\"></p><p>另外，你没有办法控制某些 key 的最大内存使用量，比如说某个业务最多缓存 100M 的数据，你只能控制整个 Redis 实例的内存使用量。</p><p><img src=\"https://static001.geekbang.org/resource/image/45/48/453641f0bd0b1c7dd790d969c78f8c48.png?wh=1920x789\" alt=\"图片\"></p><p>但是我们可以通过控制某个业务允许的键值对数量和单一键值对最大内存来间接控制业务在 Redis 上的内存使用量。比如说某个业务只允许有 10000 个键值对，每个键值对不能超过 1KB，那么它的整个内存使用量就不会超过 10MB。</p><p>你可以考虑在 Redis 中额外记录一个键值对数量，同时监听键值对的删除命令。当新加入某个键值对的时候，键值对数量加一。当某个键值对被删除的时候，键值对减一，那么就算键值对自然过期被淘汰，你还是能够得到通知。</p><p><img src=\"https://static001.geekbang.org/resource/image/44/60/44f53618a5d487ea600172b2d297cb60.png?wh=1920x1084\" alt=\"图片\"></p><p>注意，你要区分一下你这个键值对是一个全新的键值对，还是已有这个键但是值被修改了。在后一种情况下，你并不需要更新键值对的数量。</p><p>这种机制很复杂，如果你想把我在后面提到的那些算法用在 Redis 上，就得编写一些比较复杂的 lua 脚本。</p><h2>面试准备</h2><p>在面试缓存淘汰之前，你需要了解清楚公司内的一些情况。</p><ul>\n<li>公司的 Redis 淘汰策略是什么？中间有没有调整过？如果有，那么为什么调整？</li>\n<li>你有没有用过本地缓存？如果用过本地缓存，那么这个本地缓存是如何控制内存使用量的？它支持什么样的缓存淘汰策略？</li>\n<li>有没有出现过因为缓存占用内存太大而引起的线上故障？后来是怎么解决的？</li>\n<li>有没有使用 Redis 不当引起的线上故障？后来是怎么解决的？</li>\n</ul><p>我非常建议你有空的时候写一个本地缓存。对于大多数语言来说，实现一个本地缓存所需的数据结构大多数都已经有了，所以实际上难度并不大。</p><p>在这个过程中，你就可以尝试设计不同的淘汰策略，这样你就会有更加深刻的理解，面试的时候也就不会害怕面试官问细节了。</p><p>除此以外，当面试官问到以下问题，你也可以用这节课的内容来回答。</p><ul>\n<li>在使用缓存的时候有什么注意事项？</li>\n<li>为什么要控制缓存的内存使用量？</li>\n<li>你使用缓存遇到过什么问题？</li>\n<li>你优化过缓存吗？怎么提高缓存的命中率？</li>\n<li>Redis 支持哪些淘汰策略？你们公司用的是什么？</li>\n</ul><h2>基本思路</h2><p>最好的面试思路还是把优化缓存淘汰策略作为保证系统高性能的一环。这里就可以用对比说明策略，就是在优化之前缓存命中率或者响应时间有多差，而在优化之后，缓存命中率提高了多少或者响应时间下降了多少。</p><p>这里我用优先淘汰代价低的案例，给你展示如何回答。</p><blockquote>\n<p>为了进一步提高系统的性能，我还尝试过优化缓存。早期我们有一个业务，用到了一个本地缓存。这个本地缓存使用的淘汰算法是 LRU，最开始我们都觉得这个算法没什么问题。后来业务反馈，说有几个大客户一直抱怨自己的查询时快时慢。一听到时快时慢，我就可以确定应该是缓存出了问题。<br>\n&nbsp;<br>\n经过排查我们发现原来这个缓存执行 LRU 的时候有时会把大客户的数据淘汰掉。而偏偏大客户的数据实时计算很慢，所以一旦没有命中缓存，响应时间就会暴增。<br>\n&nbsp;<br>\n后来我进一步梳理业务，一方面考虑进一步增大缓存的可用内存。另外一方面，设计了灵活的淘汰策略，在淘汰的时候优先淘汰小客户的数据。<br>\n&nbsp;<br>\n这样做的好处就是优先保证了大客户的用户体验，平均响应时间下降了40%。而小客户因为本身计算就很快，所以影响也不是很大。</p>\n</blockquote><p>当然，从实践角度来说，针对不同业务调整淘汰策略取得的收益是比较小的。但是站在面试的角度，这也算是一个比较新奇的优化点，倒是可以用用。</p><p>除了你主动提起，面试官也可能主动询问，比如从怎么安全使用缓存这个点切入。“安全”强调的就是你用缓存不能影响到别人，那么控制缓存的内存使用量就是一个关键的环节。所以这种时候你应该这样回答：</p><blockquote>\n<p>使用缓存一定要注意控制缓存的内存使用量，不能因为某一个业务而直接把所有的内存都耗尽。</p>\n</blockquote><p>要控制住内存使用量，就需要在内存用完的时候淘汰一些键值对。</p><p>实际上，解决缓存淘汰的最佳思路，就是给缓存足够的内存，不触发淘汰。但这也可以说是正确但是无用的废话，因为现实中不可能你需要多少内存就给你多少内存，所以最终还是要考虑怎么淘汰键值对。</p><blockquote>\n<p>解决缓存淘汰的问题，应该优先考虑增加内存，降低缓存淘汰的几率。不过毕竟内存也不是无限的，最终都还是要选择合适的淘汰策略。比如说我们公司的 Redis 使用了 volatile-lru 淘汰策略。</p>\n</blockquote><p>这里你可以将 volatile-lru 淘汰策略换成你们实际的策略。有些时候面试官也可能会直接问你 Redis 支持哪些淘汰策略，这时候你按照前置知识里面罗列出来的内容回答就可以了，同时你不要忘记补充你的 Redis 使用的是什么策略。</p><p>最后，你记得补充一句话，用来引导话题。</p><blockquote>\n<p>这些 LRU 或者 LFU 之类的算法都是普适性很强的算法，但是我也用过一些更加针对业务的淘汰算法。比如说按照优先级淘汰，大对象优先淘汰、小对象优先淘汰、代价低优先淘汰。大多数时候，不论是 Redis 还是本地缓存，这种业务针对性特别强的算法，都得自己实现。</p>\n</blockquote><p>我相信面试官会对针对业务特性来设计淘汰策略感兴趣，因为它能够体现你对业务的理解，以及灵活设计方案的能力。</p><h2>亮点方案</h2><p>在实践中，同一个公司内部业务的重要性都是有区别的。就算是同一个业务内部，不同用户的重要性也是有区别的。所以针对业务设计淘汰策略的一个核心思路就是根据业务的重要性来设计。</p><p>比如说某个服务同时服务于 VIP 用户和普通用户，那么完全可以在缓存触发淘汰的时候，先把普通用户的数据淘汰了。所以可以考虑为每一个键值对绑定一个优先级，每次缓存要执行淘汰的时候，就从先淘汰优先级最低的数据。</p><p>这个方案在 Redis 落地基本上就是在前面提到的控制键值对数量的基础上，引入一个按照优先级进行排序的有序集合，那么有序集合里元素个数就是键值对个数。在每次触发淘汰的时候，从有序集合里面取出来一个 key，再把对应的键值对删除。</p><p><img src=\"https://static001.geekbang.org/resource/image/92/38/92be1066d2dcdfcf4c3cd1a48baa4338.png?wh=1920x1079\" alt=\"图片\"></p><p>你可以先简单介绍一下这个方案。</p><blockquote>\n<p>之前我在业务里面使用过一个按照优先级来淘汰的策略。我们的业务有一个特点，就是数据有很鲜明的重要性之分。所以对于我们来说，应该尽可能保证优先级高的数据都在缓存中。所以在触发了淘汰的时候，我们希望先淘汰优先级比较低的缓存。所以我在 Redis 上利用有序集合设计了一个控制键值对数量，并且按照优先级来淘汰键值对的机制。这个有序集合是使用数据的优先级来排序的，也就是用优先级作为 score。</p>\n</blockquote><p>这里，你要仔细解释每一个部分。首先是增加键值对的时候是如何操作的。</p><blockquote>\n<p>增加一个键值对就要执行一个 lua 脚本。在这个脚本里面，它会先检测有序集合里面的元素个数有没有超过允许的键值对数量上限，如果没有超过，就写入键值对，再把 key 加入有序集合。如果超过了上限，那么就从有序集合里面拿出第一个 key，删除这个 key 对应的键值对。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/db/74/dbde5623e1cf22c700dbc5eac15e3474.png?wh=1920x1084\" alt=\"图片\"></p><p>然后补充怎么在键值对过期的时候，维护有序集合。</p><blockquote>\n<p>同时监听 Redis 上的删除事件，每次收到删除事件，就把有序集合中对应的 key 删除。</p>\n</blockquote><p>那么在这个基础上，根据你计算优先级的不同方式，你可以将这个机制用于不同的场景。所以你需要总结拔高一下。</p><blockquote>\n<p>在这个基础上，我可以根据不同的业务特征来计算优先级，从而实现大对象先淘汰、小对象先淘汰、热度低先淘汰等算法。</p>\n</blockquote><p>这里我稍微解释一下这个总结里面提到的几种淘汰策略，你在面试官问到的时候可以补充说明。</p><h3>先淘汰大对象</h3><p>在一些场景下，如果你的缓存有大有小，那么在淘汰的时候你会希望尽可能先把大的对象淘汰了，因为这样可以一次性腾出比较多的内存。这种策略在本地缓存实现上经常使用。与之对应的另一些场景下，你可以考虑小对象优先淘汰。</p><h3>先淘汰小对象</h3><p>比如说你的大对象都是经过复杂计算之后得出来的，而小对象的计算逻辑就非常简单。那么显然淘汰大对象是不合适的，因为一旦缓存未命中，那么响应时间就会大幅度提高。而淘汰小对象，即便下一次触发了重复计算，响应时间也没多少波动。进一步抽象就可以说成是代价低的优先淘汰。</p><p>所谓的代价高低是一种逻辑上的概念，你可以把任何你认为会对你的业务产生关键性影响的资源认为是“代价”，而消耗很多这个资源的，就是代价高昂。不怎么消耗这个资源的，就可以认为是代价低廉。</p><p>那么小对象先淘汰也是基于这样一个假设，小对象对应的计算步骤都是很快的，代价是比较低的，所以可以先淘汰。但是淘汰小对象也有一个缺陷，就是如果新加入的键值对数据比较大，那么你需要淘汰好几个小对象才能腾出足够的空间。</p><h3>低热度优先</h3><p>这种是根据数据冷热来淘汰，比如说存在博主粉丝关系的内容平台上，在淘汰数据的时候完全可以先把小博主的数据淘汰了，留下大博主的数据。因为我们知道大博主粉丝更多，所以他们的数据留下来有更大的概率会被访问到。这个和上节课提到的热点数据缓存时间会更长的思路是一样的。</p><h2>面试思路总结</h2><p>最后我们来总结一下这节课的内容。</p><p>你需要先了解为什么会有淘汰这种说法，原因就是我们希望控制住内存使用量。常见的淘汰算法LRU、LFU，以及 Redis 支持的各种淘汰算法比较重要，在准备面试的过程中，记得提前了解你们公司 Redis 使用的算法。</p><p>最后我提出了一个针对业务特性来设计的按照优先级淘汰的算法，根据怎么计算优先级又可以进一步细分成大对象先淘汰、小对象先淘汰、根据热度来淘汰。这些方案在 Redis 上落地的时候，都需要借助 Redis 的有序集合，而且为了避免并发问题，你操作 Redis 的时候都是要通过 lua 脚本封装一系列操作的。</p><p><img src=\"https://static001.geekbang.org/resource/image/a0/dd/a073ea7c658277777246dd068f61b9dd.png?wh=2190x1886\" alt=\"\"></p><h2>思考题</h2><p>最后请你来思考两个问题。</p><ul>\n<li>我在这一节课里面只说了，可以在 Redis 上控制键值对数量来间接控制内存使用量。实际上要直接控制某个业务的内存使用量也不是不行，就是非常麻烦，你觉得可以怎么做？</li>\n<li>在 Redis 控制内存使用量的方案中，我一直说要使用 lua 脚本，因为有并发问题。那么你能想到有什么样的并发问题吗？</li>\n</ul><p>欢迎你把你的思考分享到评论区和我互动，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p>","comments":[{"had_liked":false,"id":380476,"user_name":"Geek_2c128e","can_delete":false,"product_type":"c1","uid":3693988,"ip_address":"北京","ucode":"149F058887CC6A","user_header":"","comment_is_top":false,"comment_ctime":1693645949,"is_pvip":false,"replies":[{"id":138597,"content":"这是必然的代价。不过这里只存了 key，所以也没那么严重。毕竟值占据的内存比 key 的多。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693895718,"ip_address":"广东","comment_id":380476,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"最后那个亮点方案中，新增的那个有序集合，这不是又加大了内存占用吗？？？？？","like_count":4,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627204,"discussion_content":"这是必然的代价。不过这里只存了 key，所以也没那么严重。毕竟值占据的内存比 key 的多。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1693895718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2818819,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/03/03/d610f362.jpg","nickname":"@","note":"","ucode":"1C6A78AB249D6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":646188,"discussion_content":"都要考虑内存不够用了，说明数据量很多。 再使用zset存一份不会影响性能吗\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717512967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":627204,"ip_address":"北京","group_id":0},"score":646188,"extra":""},{"author":{"id":1899599,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","nickname":"大毛","note":"","ucode":"93B18287F06706","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2818819,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/03/03/d610f362.jpg","nickname":"@","note":"","ucode":"1C6A78AB249D6B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650126,"discussion_content":"会增加内存的使用量，也会影响性能。但是好处是你可以自己选择释放哪个 key，这和内存爆炸后 redis 自行删除来说更有掌控感。\n当然这个方案没有完美解决问题，比如其他业务的人滥用 redis，放了很多大 key，导致redis 触发淘汰，最终删除了你的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724414677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":646188,"ip_address":"北京","group_id":0},"score":650126,"extra":""}]},{"author":{"id":2328971,"avatar":"","nickname":"Geek8004","note":"","ucode":"B3828F6414BDB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627685,"discussion_content":"是用的zset来实现吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694437073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386860,"user_name":"sheep","can_delete":false,"product_type":"c1","uid":2770150,"ip_address":"广东","ucode":"DAC2036F08CE27","user_header":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","comment_is_top":false,"comment_ctime":1705728340,"is_pvip":false,"replies":[{"id":141052,"content":"对的，并发问题。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1705926956,"ip_address":"广东","comment_id":386860,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"问题2：“它会先检测有序集合里面的元素个数有没有超过允许的键值对数量上限，如果没有超过，就写入键值对”，在没用lua时，可能有两个操作同时判断元素个数没用超过允许的键值对数量上限，然后同时进行写入了键值对","like_count":2,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636298,"discussion_content":"对的，并发问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705926956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382238,"user_name":"文敦复","can_delete":false,"product_type":"c1","uid":1195258,"ip_address":"四川","ucode":"B8F4A6BD5D7805","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/fa/e2990931.jpg","comment_is_top":false,"comment_ctime":1696926058,"is_pvip":false,"replies":[{"id":139370,"content":"1. 不能……有一种粗暴的方式就是要求客户端只能存储 byte，然后就比较容易计算了。\n2. 对的，你的顾虑很有道理，大规模监听 redis 的过期事件确实不怎么靠谱。但是怎么说呢，就是这个面试意义大于实践意义，你不到逼不得已不要搞这种骚操作……我搞过一次就不想再搞第二次。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1697726366,"ip_address":"广东","comment_id":382238,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"问题1，直接控制某个业务的内存使用量：可以proxy客户端redis指令，然后判定每次发送的对象的大小。但是问题又来了，java不能很好的判定当前对象的大小吧，可以通过传输的字节大小累加？？还有就是对象过期是在redis上，proxy如果要精准控制，也要自己做过期处理或者监听redis的过期事件？感觉得不偿失，还不如每个应用1个redis实例来的直观？","like_count":2,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629873,"discussion_content":"1. 不能……有一种粗暴的方式就是要求客户端只能存储 byte，然后就比较容易计算了。\n2. 对的，你的顾虑很有道理，大规模监听 redis 的过期事件确实不怎么靠谱。但是怎么说呢，就是这个面试意义大于实践意义，你不到逼不得已不要搞这种骚操作……我搞过一次就不想再搞第二次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697726367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383074,"user_name":"Lum","can_delete":false,"product_type":"c1","uid":3231352,"ip_address":"北京","ucode":"7EF828425E685A","user_header":"https://static001.geekbang.org/account/avatar/00/31/4e/78/ee4e12cc.jpg","comment_is_top":false,"comment_ctime":1698391482,"is_pvip":false,"replies":[{"id":139759,"content":"暂时没有这个计划。一般来说，选择数据结构应该是先看业务场景吧？比如说很多场景要求用 zset 之类的，想换也换不了。\n\n不过如果是站在面试的角度话，如果你想刷优化 Redis 内存使用量的，确实是可以考虑使用更加紧凑的内存结构，比如说 intset 之类的，不过都是首先得业务允许。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1699283741,"ip_address":"广东","comment_id":383074,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"老师会不会出一期，如何设计缓存结构，来说明一下各个结构的内存占用情况，并且在什么情况用什么样的数据结构比较好的","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631074,"discussion_content":"暂时没有这个计划。一般来说，选择数据结构应该是先看业务场景吧？比如说很多场景要求用 zset 之类的，想换也换不了。\n\n不过如果是站在面试的角度话，如果你想刷优化 Redis 内存使用量的，确实是可以考虑使用更加紧凑的内存结构，比如说 intset 之类的，不过都是首先得业务允许。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699283741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381720,"user_name":"Geek_aecbf4","can_delete":false,"product_type":"c1","uid":3599753,"ip_address":"北京","ucode":"82442FDDD732E0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyybZMjatF2cT7sibetD9t58jE6pZZ3kqUlsGgdCO4mm9pFq27Tn4iaXK1MzvfPric5icFqhOlocm64w/132","comment_is_top":false,"comment_ctime":1695728033,"is_pvip":false,"replies":[{"id":139233,"content":"赞！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1696923352,"ip_address":"广东","comment_id":381720,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"问题2：极端情况会引起oom， 当第一个请求完成有序集合的删除操作，此时第二个请求过来会判断未超限，导致2个请求都会去set\n","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629301,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696923352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3716493,"avatar":"","nickname":"Geek_7b73be","note":"","ucode":"2A1C306A888BE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633739,"discussion_content":"能麻烦详细解释一下是啥场景吗 没大看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702541439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380437,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1693575962,"is_pvip":false,"replies":[{"id":138599,"content":"只有性能要求很高的时候才会用，因为本地缓存一致性问题更加严重。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693895773,"ip_address":"广东","comment_id":380437,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"本地缓存最常用的有哪些? 在生产实践中，网络公司的网站是大量采用本地缓存还是很少使用本地缓存？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627206,"discussion_content":"只有性能要求很高的时候才会用，因为本地缓存一致性问题更加严重。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693895774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1665471,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/bf/58f70a2a.jpg","nickname":"程序员花卷","note":"","ucode":"DDCFE578C6C428","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633415,"discussion_content":"我们就用的本地缓存 + Redis + 数据库兜底  将性能尽可能做到极致，抢购的场景哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1702122555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"云南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1114999,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/77/3f6a76a9.jpg","nickname":"极客","note":"","ucode":"A4AAA6B4F40E66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627067,"discussion_content":"一般不怎么用本地缓存，除非实在扛不住突发的流量，比如很火爆的抢购等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693729522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388566,"user_name":"shikamaru","can_delete":false,"product_type":"c1","uid":3787155,"ip_address":"四川","ucode":"19260049B7F498","user_header":"https://static001.geekbang.org/account/avatar/00/39/c9/93/13c7d9aa.jpg","comment_is_top":false,"comment_ctime":1710402645,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"LRU（Least Recently Used）翻译为最近最少使用，就是以讹传讹，least是修饰recently的，根本没有最少的意思，意为“最不近”，翻译为“最久未用”比较合理","like_count":2,"discussions":[{"author":{"id":3842684,"avatar":"https://static001.geekbang.org/account/avatar/00/3a/a2/7c/be30e54c.jpg","nickname":"不动","note":"","ucode":"3ED95F24881737","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647770,"discussion_content":"应该是最少最近使用，而不是最近最少使用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1720595812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":391561,"user_name":"普吉岛大苹果","can_delete":false,"product_type":"c1","uid":3738815,"ip_address":"北京","ucode":"7FBEA6C80A8EE5","user_header":"https://static001.geekbang.org/account/avatar/00/39/0c/bf/522f3335.jpg","comment_is_top":false,"comment_ctime":1718529439,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"如果是使用redis cluster, 有序集合和键值对不在一个slot中，不能使用Lua应该怎么处理呢？","like_count":1},{"had_liked":false,"id":393642,"user_name":"大毛","can_delete":false,"product_type":"c1","uid":1899599,"ip_address":"北京","ucode":"93B18287F06706","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","comment_is_top":false,"comment_ctime":1724415196,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"问题 1：redis 可以查询每个 key 的内存使用量，如果开发者都遵守使用规范，理论上是可以统计某个业务的内存使用总量的。可以统计使用量，就可以控制使用总量了。\n问题 2：方案中要使用多个 redis 的基础命令，这些命令一同使用无法保证原子性，如果不使用 lua，存在命令在我们意料之外的顺序到达的情况，就一定会出现并发问题。","like_count":0}]}