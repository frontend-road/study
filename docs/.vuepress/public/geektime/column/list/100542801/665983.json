{"id":665983,"title":"24｜GBDT+LR：排序算法经典中的经典","content":"<p>你好，我是黄鸿波。</p><p>在前面的课程中，我们讲了推荐系统中的数据处理、接口实现和一些召回算法和模型，从本章开始，我们就会进入一个新的篇章：推荐系统中的排序算法。</p><p>我一共设计了三节课，分别是GBDT+LR、DeepFM和重排序。这三节课的内容代表了基于算法的排序、基于模型的排序和基于人工的排序。</p><p></p><p>在本节课先聚焦在GBDT+LR上，你将会学到下面四个部分的知识。</p><ol>\n<li>逻辑回归（LR）模型。</li>\n<li>GBDT算法概述。</li>\n<li>GBDT与LR的结合。</li>\n<li>实现一个GBDT+LR算法。</li>\n</ol><h2>什么是逻辑回归（LR）模型</h2><p>逻辑回归（LR,Logistic Regression）是一种传统机器学习分类模型，也是一种比较重要的非线性回归模型，其本质上是在线性回归模型的基础上，加了一个Sigmoid函数（也就是非线性映射），由于其简单、高效、易于并行计算的特点，在工业界受到了广泛的应用。</p><p>一般来讲，我们使用LR模型主要是用于分类任务，且大多以二分类为主。在推荐系统的实际业务中，LR常用来作为Baseline模型，实现快速上线的目的。</p><p>从本质上来讲，逻辑回归和线性回归一样同属于广义线性模型。虽然说逻辑回归可以实现回归预测，但是在推荐算法中（或者说在大多数的业务场景中），我们都将其看作是线性模型并把它应用在分类任务中。</p><!-- [[[read_end]]] --><p>作为广义线性模型的一种，LR假设因变量y服从伯努利分布。在推荐系统中我们用它来预估点击率，实际上就是来预测“点击”这个事件是否发生。这个“是否发生”实际上就是因变量y。因为点击事件只有两种可能性，点击或者不点击（二分类问题）。这个问题，实际上就是服从伯努利分布的。</p><p>总结一下，<strong>逻辑回归实际上就是在数据服从伯努利分布的假设下，通过极大似然的方法，运用梯度下降算法对参数进行求解，从而达到二分类。</strong></p><p>这里就会有一个问题，既然逻辑回归和线性回归都可以做到分类，那么在推荐系统中为什么用逻辑回归而不是线性回归呢？总的来说，有下面三点原因。</p><ol>\n<li>虽然它们都能够处理二分类问题，但线性回归模型一般是处理连续特征的二分类问题，比如身高体重这种连续特征；而推荐系统中的目标是推荐一个物品给用户，这个物品实际上是离散的，因此不能使用线性回归进行预测。</li>\n<li>逻辑回归模型具有较高的模型可解释性，可以帮助我们更好地理解推荐系统中不同因素对推荐结果的影响，而线性回归在这一点上无法实现我们的需求。</li>\n<li>推荐系统中往往存在很多的噪音，逻辑回归可以更好地处理异常值，避免推荐结果被干扰。<br>\n通过上面我们知道，线性回归的输出实际上是一个连续值。如果我想把它用作分类问题，比如说二分类，应该怎么办呢？</li>\n</ol><p>很简单，<strong>在线性回归的基础上，把它的输出通过另一个函数映射到[0, 1]这个区间范围内就</strong><strong>能解决这个问题。</strong>这个映射函数我们一般用Sigmoid函数，而映射之后的函数就是一个逻辑回归模型，它对应的逻辑回归图像如下。</p><p><img src=\"https://static001.geekbang.org/resource/image/c5/f3/c52faa2a60098073fb32076fb6538bf3.png?wh=556x428\" alt=\"图片\"></p><p>其函数原型为&nbsp;$y=\\frac{1}{(1+e^{-z})}$。</p><p>简单说下它的推导过程。刚刚说过，逻辑回归就是线性回归加上Sigmoid函数，线性回归模型的公式为&nbsp;$f(x)=\\omega^{T}x$；值域为&nbsp;$(-\\infty,\\infty)$。</p><p>我们不能直接基于线性模型来进行建模，那么中间的映射函数就选择Sigmoid函数，也就是$y=\\frac{1}{1+e^{-z}}$。</p><p></p><p>从上面对应的逻辑回归图像可以看出，Sigmoid函数的值域在（0,1）之间，这样实际上就完美地解决了分类的问题。</p><p>在推荐系统中，逻辑回归对于特征处理有着非常强的优势，你可以对照下面这个表格了解一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/d4/cdda67382a9c7f2c37cdaffbcc602fd4.jpg?wh=3000x1658\" alt=\"\"></p><p>一般来讲，使用逻辑回归处理特征会经过下面五个步骤。</p><ol>\n<li>特征选择：逻辑回归可以使用正则化技术（如L1、L2正则化）来选择最重要的特征，从而降低维度并去除无关特征。选择相关的特征有助于提高模型的稳定性和准确性。</li>\n<li>处理缺失值和异常值：逻辑回归可以使用缺失值插补和异常值检测来处理缺失值和异常值，从而避免对模型产生影响，提高模型的健壮性。</li>\n<li>处理非线性特征：逻辑回归可以通过引入多项式和交互特征来处理非线性特征，从而增强模型的表现力。以多项式模型为例，逻辑回归可以使用幂函数或指数函数对特征进行转换，从而处理非线性变量。</li>\n<li>特征标准化：逻辑回归可以使用特征标准化来消除特征数据值的量纲影响，避免数值范围大的特征对模型产生很大影响。</li>\n<li>特征工程：逻辑回归也可以使用特征工程来创建新的特征，例如聚合或拆分现有特征、提取信号等。这有助于发现与目标变量相关的新信息，从而改进对数据的理解。</li>\n</ol><p>总的来说，逻辑回归依靠特征处理来提高模型的准确性、稳定性和表现能力，并且可以使用各种技术来处理特征，以便更好地利用数据和建立强大的预测模型。</p><h2>什么是GBDT算法</h2><p>讲完逻辑回归模型后，我们来讲GBDT算法。</p><p>GBDT（Gradient Boosting Decision Tree）算法是一种基于决策树的集成学习算法，它通过不断训练决策树来提高模型的准确性。GBDT在每一次训练中都利用当前的模型进行预测，并将预测误差作为新的样本权重，然后训练下一棵决策树模型来拟合加权后的新数据。</p><blockquote>\n<p>决策树模型是一种基于树形结构的机器学习模型，用于解决分类与回归问题。它把所有的训练数据样本不断划分成更小的子集，以构建一棵树结构。每个节点代表一个特征属性，节点的分支代表该属性的不同取值。根据每个节点的属性值，将数据划分到不同的子节点里去，直到叶子节点表示最终的输出结果。在这里，分类树用于分类标签的值，比如用户的性别、文章是体育还是财经还是政治等；归回树用于预测实际的数值，例如温度、年龄、相关度等。</p>\n</blockquote><p>GBDT中的B代表Boosting。Boosting算法的基本思想是通过将多个弱分类器线性组合形成一个强分类器，达到优化训练误差和测试误差的目的。具体应用时，每一轮将上一轮分类错误的样本重新赋予更高的权重，这样一来，下一轮学习就容易重点关注错分样本，提高被错分样本的分类准确率。</p><p>GBDT 由多棵 CART 树组成，本质是多颗回归树组成的森林。每一个节点按贪心分裂，最终生成的树包含多层，这就相当于一个特征组合的过程。</p><p>在推荐系统中，我们使用 GBDT 算法来优化和提高个性化推荐的准确性。通过 GBDT 算法对用户历史行为数据进行建模和学习，可以很容易地学习到学习用户的隐式特征（例如品味、购买能力、口味偏好等）。另外，GBDT 算法可以自动选择重要的特征，对离散型和连续型特征进行处理（如缺失值填充、离散化等），为特征工程提供更好的支持。</p><p>总的来说，<strong>GBDT 算法可以帮助我们更好地理解用户行为和需求，提高推荐精度和用户满意度，让推荐系统更加智能、准确和可靠。</strong></p><h2>GBDT与LR的结合</h2><p>对LR和GBDT有了简单的了解之后，接下来就是如何将GBDT与LR结合，进行推荐系统的排序。</p><p>在推荐系统中，GBDT+LR使用最广泛的场景就是点击率预估，然后根据点击率预估的结果进行排序，因此GBDT+LR一般被应用于排序层中。</p><p>先来看一下GBDT+LR的模型结构。</p><p></p><p><img src=\"https://static001.geekbang.org/resource/image/30/8f/305e89e2cb39cf73aeea2fb8c1054f8f.png?wh=559x466\" alt=\"图片\"></p><p>可以看到，整个模型实际上被分成两个部分，下面是LR上面是GBDT。从上往下看，整个模型的训练可以分成下面五个步骤。</p><ol>\n<li>GBDT训练：使用GBDT对原始数据进行训练并生成特征。在训练过程中，每棵树都是基于前一棵树的残差进行构建。这样，GBDT可以逐步减少残差，生成最终的目标值。</li>\n<li>特征转换：使用GBDT生成的特征进行转换。这些特征是树节点的输出，每个特征都对应于一个叶子节点。在转换过程中，每个叶子节点都会被转换为一个新的特征向量，代表这个叶子节点与其他节点的相对位置，并将这些特征向量连接起来形成新的训练集。</li>\n<li>特征归一化：对生成的特征进行归一化处理，确保不同维度的特征在训练过程中具有相等的权重。</li>\n<li>LR训练：使用LR对转换后的特征进行二分类或回归。特征向量被送入逻辑回归模型中进行训练，以获得最终的分类模型。在训练过程中，使用梯度下降法来更新模型参数，以最小化损失函数，损失函数的选择取决于分类问题的具体情况。</li>\n<li>模型预测：训练完成后，使用LR模型对新的数据进行预测。GBDT+LR模型将根据特征生成函数和逻辑回归模型预测新数据的类别或值。</li>\n</ol><p>总之，整个过程实际上就是采用GBDT进行特征筛选后，再使用LR模型进行预测，从而得到最终的结果。</p><p></p><p>使用GBDT+LR结合的形式进行点击率预测最大的好处在于，它既可以利用GBDT对复杂数据进行非线性特征提取和降维，又可以运用LR对特征进行加权和融合，提高模型的预测精度。</p><p>另外，GBDT+LR不需要手动选择特征（通过GBDT自动选择），使得模型更具有鲁棒性和可扩展性。</p><p>同时，GBDT+LR具有良好的可解释性，可以通过分析GBDT中的特征重要度和LR中的权重，得到每个特征在模型中的贡献程度，从而更好地理解模型的预测结果。</p><p></p><p>虽然GBDT+LR来进行点击率预测有很多的好处，但是同时也有很多的问题，比如下面三点。</p><ol>\n<li>GBDT+LR建模复杂度较高，需要调节多个超参数，如GBDT中的树深度、叶子节点数量、学习率等，LR中的正则化参数等，增加了模型调优的难度。</li>\n<li>GBDT+LR需要大量的数据和计算资源进行训练，尤其是对于大规模的数据集，训练时间和计算成本都较高。</li>\n<li>GBDT+LR对异常值和噪声数据敏感，需要进行数据预处理和异常值处理，以提高模型的稳定性和鲁棒性。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/58/c1/58a498ecc827612070e41ea15ffe3cc1.jpg?wh=3000x1742\" alt=\"\"></p><p></p><h2>实现一个GBDT+LR算法</h2><p>接下来我们来看一下怎么实现一个GBDT+LR算法。由于目前没有比较好的生产数据，暂时使用Movielens 1MB数据集，后续你可以根据推荐系统实际的数据来做数据集。</p><p>我们直接看代码。</p><pre><code class=\"language-plain\">import pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\n&nbsp;\n&nbsp;\n# 读取数据集\nratings = pd.read_csv(\"ml-1m/ratings.dat\", sep=\"::\", header=None, names=[\"user_id\", \"movie_id\", \"rating\", \"timestamp\"], engine=\"python\")\nmovies = pd.read_csv(\"ml-1m/movies.dat\", sep=\"::\", header=None, names=[\"movie_id\", \"title\", \"genres\"], engine=\"python\")\ndata = pd.merge(ratings, movies, on=\"movie_id\").drop(columns=[\"timestamp\", \"title\"]) &nbsp;# 将两个数据表按 movie_id 进行合并\n&nbsp;\n# 将电影的genres字段转换为多个二值型变量（使用pandas的get_dummies函数）\ngenres_df = data.genres.str.get_dummies(sep=\"|\")\ndata = pd.concat([data, genres_df], axis=1).drop(columns=[\"genres\"])\n&nbsp;\n# 提取出用于训练 GBDT 模型和 LR 模型的特征和标签\nfeatures = data.drop(columns=[\"user_id\", \"movie_id\", \"rating\"])\nlabel = data[\"rating\"]\n&nbsp;\n# 划分训练集、测试集\nsplit_index = int(len(data) * 0.8)\ntrain_x, train_y = features[:split_index], label[:split_index]\ntest_x, test_y = features[split_index:], label[split_index:]\n&nbsp;\n# 训练 GBDT 模型\ngbdt_model = lgb.LGBMRegressor(n_estimators=100, max_depth=5, learning_rate=0.1)\ngbdt_model.fit(train_x, train_y)\ngbdt_train_leaves = gbdt_model.predict(train_x, pred_leaf=True)\ngbdt_test_leaves = gbdt_model.predict(test_x, pred_leaf=True)\n&nbsp;\n# 将 GBDT 输出的叶子节点 ID 转换为 one-hot 编码的特征\ntrain_new_feats = lgb.Dataset(gbdt_train_leaves)\ntest_new_feats = lgb.Dataset(gbdt_test_leaves)\none_hot_train = train_new_feats.construct_feature_matrix(train_new_feats.data).toarray()\none_hot_test = test_new_feats.construct_feature_matrix(test_new_feats.data).toarray()\n&nbsp;\n# 训练 LR 模型\nlr_model = LogisticRegression()\nlr_model.fit(one_hot_train, train_y)\n&nbsp;\n# 在测试集上评估模型性能\ny_pred = lr_model.predict(one_hot_test)\nprint(f\"Accuracy: {accuracy_score(test_y, y_pred)}\")\nprint(f\"Precision: {precision_score(test_y, y_pred, average='macro')}\")\nprint(f\"Recall: {recall_score(test_y, y_pred, average='macro')}\")\nprint(f\"F1-Score (macro): {f1_score(test_y, y_pred, average='macro')}\")\n</code></pre><p>解释下上面的代码。</p><ol>\n<li>从文件中读取电影评级数据集和电影数据集，然后将它们按电影ID进行合并。</li>\n<li>将电影的genres字段转换为多个二值型变量，得到包含二进制特征的数据集。</li>\n<li>将数据集按照 8:2 的比例分为训练集和测试集，并分别提取特征和标签。</li>\n<li>使用 LightGBM 训练 GBDT 模型，得到训练集和测试集输出的叶节点ID。</li>\n<li>将训练集和测试集节点ID转换成 One-Hot 编码的特征矩阵。</li>\n<li>使用 LogisticRegression 训练LR模型，得到预测结果。</li>\n<li>采用准确度，精确度，召回率和F1得分作为评价指标进行模型性能评估，并显示评估结果。</li>\n</ol><p>相关数据集你可以在<a href=\"https://grouplens.org/datasets/movielens/\">这个</a>网址中找到。</p><p></p><h2>总结</h2><p>到这里这节课就学完了，下面我们来总结一下本节课的内容，这节课主要讲了下面五个点。</p><ol>\n<li>逻辑回归是一种广义线性模型，属于分类算法。它通常用于对二元分类问题建模，即将数据分为两个相互排斥的类别。</li>\n<li>GBDT是一种集成学习算法，基本思路是通过迭代地训练多个弱学习器（例如决策树），每次训练都会调整样本的权重和残差，使得前一轮弱学习器的误差被后续模型进行更好地拟合。</li>\n<li>GBDT+LR模型在推荐系统中应用最为广泛的就是点击率预估（CTR，Click-through rate prediction）问题，即根据用户的历史行为（比如浏览历史、购买记录等）和当前的环境（比如时间、地点、设备等），预测用户是否会对推荐的商品产生兴趣并进行点击的概率。</li>\n<li>GBDT+LR 模型的优点在于能够充分利用GBDT模型的自适应学习特性，自动刻画大量的特征组合。同时，对于TF-IDF特征或者One-Hot编码的稀疏特征等处理方式，GBDT+LR能够更好地处理。</li>\n<li>最后我们还用一个例子讲解了如何使用Python在公开数据集上实现一个GBDT+LR。</li>\n</ol><h2>思考题</h2><p>学完本节课，我给你留两道思考题。</p><ol>\n<li>你认为 GBDT和LR分别用于GBDT+LR算法的哪些方面？</li>\n<li>什么情况下使用GBDT+LR算法？</li>\n</ol><p>期待在留言区看到你的想法，如果你觉得这门课对你有帮助，也欢迎分享给朋友们一起学习！</p>","neighbors":{"left":{"article_title":"23｜流程串联：数据处理和协同过滤串联进行内容推荐","id":665271},"right":{"article_title":"25｜DeepFM：如何使用深度学习技术给数据排序？","id":666599}},"comments":[{"had_liked":false,"id":376167,"user_name":"麦克范儿","can_delete":false,"product_type":"c1","uid":2808812,"ip_address":"加拿大","ucode":"702CAFBC2F744F","user_header":"https://static001.geekbang.org/account/avatar/00/2a/db/ec/d5638e84.jpg","comment_is_top":false,"comment_ctime":1686425163,"is_pvip":false,"replies":[{"id":140038,"content":"GBDT + LR和协同过滤是推荐系统中常用的两种算法，它们在推荐问题的建模和解决方式上有一些区别。\n\nGBDT + LR：这种方法将GBDT和LR结合起来，首先利用GBDT对用户和物品的特征进行建模和学习，得到一组高维稀疏特征的表示，然后将这些特征作为LR模型的输入，通过二分类问题来进行推荐。GBDT负责提取特征，LR负责做预测。这种方法可以更好地捕捉复杂的非线性关系和用户行为模式，提高模型的预测性能。\n\n协同过滤：协同过滤是一种基于用户行为数据的推荐算法，主要利用用户之间的行为相似性或者物品之间的关联性来进行推荐。协同过滤不需要依赖特征工程，直接根据用户与物品之间的交互信息进行计算。最常见的协同过滤方法有基于用户的协同过滤和基于物品的协同过滤。\n\n至于召回和排序的分类，召回是指从海量候选物品中快速筛选出一小部分潜在的推荐物品，而排序是在召回的物品中通过打分或排名来确定最终推荐的物品顺序。GBDT + LR和协同过滤算法都可以用于召回和排序的阶段。\n\n在召回阶段，GBDT + LR可以用于构建精确且高效的召回模型，通过学习用户和物品的关系来筛选出潜在的推荐候选集。协同过滤也可以用于召回，例如基于用户的协同过滤可以通过计算用户之间的相似度来找到相似用户喜欢的物品。实际上，召回阶段的算法种类很多，可以根据具体的需求和场景选择合适的方法。\n\n在排序阶段，GBDT + LR可以利用丰富的特征信息和模型的非线性能力，对召回的候选物品进行打分或排序，推荐给用户。协同过滤也可以用于排序，例如基于物品的协同过滤可以通过计算物品之间的相似度来给推荐物品排序。\n\n需要根据实际情况来选择适合的算法和阶段，以实现准确和个性化的推荐效果。","user_name":"作者回复","user_name_real":"编辑","uid":1982950,"ctime":1699861262,"ip_address":"广东","comment_id":376167,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100542801,"comment_content":"老师您好，感谢这讲非常详细的解释。有个关于算法使用的问题想请教一下，GBDT + LR 这类机器学习算法和协同过滤这类的传统算法的区别在于说机器学习将推荐问题从相似度计算和后续的用户 - 物品匹配问题转化为传统的机器学习的二分类问题吗？另外我看有些网站上面没有将这些算法按照召回和排序进行分类，而是都进行了平行分类，因此想了解下是否咱们介绍过的协同过滤和GBDT + LR这些算法都有召回和排序并推荐的作用呢？谢谢您指点！","like_count":0,"discussions":[{"author":{"id":1982950,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/41/e6/beb42103.jpg","nickname":"黄鸿波","note":"","ucode":"5EB4E6946A363C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631673,"discussion_content":"GBDT + LR和协同过滤是推荐系统中常用的两种算法，它们在推荐问题的建模和解决方式上有一些区别。\n\nGBDT + LR：这种方法将GBDT和LR结合起来，首先利用GBDT对用户和物品的特征进行建模和学习，得到一组高维稀疏特征的表示，然后将这些特征作为LR模型的输入，通过二分类问题来进行推荐。GBDT负责提取特征，LR负责做预测。这种方法可以更好地捕捉复杂的非线性关系和用户行为模式，提高模型的预测性能。\n\n协同过滤：协同过滤是一种基于用户行为数据的推荐算法，主要利用用户之间的行为相似性或者物品之间的关联性来进行推荐。协同过滤不需要依赖特征工程，直接根据用户与物品之间的交互信息进行计算。最常见的协同过滤方法有基于用户的协同过滤和基于物品的协同过滤。\n\n至于召回和排序的分类，召回是指从海量候选物品中快速筛选出一小部分潜在的推荐物品，而排序是在召回的物品中通过打分或排名来确定最终推荐的物品顺序。GBDT + LR和协同过滤算法都可以用于召回和排序的阶段。\n\n在召回阶段，GBDT + LR可以用于构建精确且高效的召回模型，通过学习用户和物品的关系来筛选出潜在的推荐候选集。协同过滤也可以用于召回，例如基于用户的协同过滤可以通过计算用户之间的相似度来找到相似用户喜欢的物品。实际上，召回阶段的算法种类很多，可以根据具体的需求和场景选择合适的方法。\n\n在排序阶段，GBDT + LR可以利用丰富的特征信息和模型的非线性能力，对召回的候选物品进行打分或排序，推荐给用户。协同过滤也可以用于排序，例如基于物品的协同过滤可以通过计算物品之间的相似度来给推荐物品排序。\n\n需要根据实际情况来选择适合的算法和阶段，以实现准确和个性化的推荐效果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699861262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376122,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1686357562,"is_pvip":false,"replies":[{"id":140037,"content":"Q1：一般情况下，模型的训练确实需要大量的计算资源和时间。模型的训练通常涉及大规模的数据集和复杂的计算过程，因此通常需要使用高性能的计算机或者分布式计算集群来进行训练。一旦模型训练完成后，用于计算阶段的资源需求可能会相对较少，因为计算阶段通常只需加载模型和输入数据，然后执行预测或推理操作。但需要注意的是，模型计算的资源需求仍然取决于模型的大小、复杂度以及输入数据的规模。\n\nQ2：GBDT+LR（Gradient Boosting Decision Tree + Logistic Regression）是一种常用的集成学习方法，它将GBDT的输出作为LR的输入，用于进一步提升模型的性能。GBDT+LR的方法在实际应用中是比较常见的，尤其在点击率预测、推荐系统等场景中取得了很好的效果。\n\n相对于单独使用GBDT或LR，GBDT+LR通过结合两种模型的优势，可以更好地处理非线性特征和高维稀疏特征，具有较强的表达能力和泛化性能。此外，由于GBDT和LR的计算都是可并行化的，所以在消耗硬件资源方面并不会太多，通常可以在普通的计算机或者少量节点的分布式环境中运行。当然，具体的资源消耗还取决于数据集的大小、特征的维度等因素。","user_name":"作者回复","user_name_real":"编辑","uid":1982950,"ctime":1699861219,"ip_address":"广东","comment_id":376122,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100542801,"comment_content":"Q1：模型训练的时候需要大量机器，模型确定以后用于计算则并不需要大量机器，是这样吗？\nQ2：GBDT+LR，这种算法用的多吗？实际效果怎么样？其消耗的硬件资源多吗？","like_count":0,"discussions":[{"author":{"id":1982950,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/41/e6/beb42103.jpg","nickname":"黄鸿波","note":"","ucode":"5EB4E6946A363C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631672,"discussion_content":"Q1：一般情况下，模型的训练确实需要大量的计算资源和时间。模型的训练通常涉及大规模的数据集和复杂的计算过程，因此通常需要使用高性能的计算机或者分布式计算集群来进行训练。一旦模型训练完成后，用于计算阶段的资源需求可能会相对较少，因为计算阶段通常只需加载模型和输入数据，然后执行预测或推理操作。但需要注意的是，模型计算的资源需求仍然取决于模型的大小、复杂度以及输入数据的规模。\n\nQ2：GBDT+LR（Gradient Boosting Decision Tree + Logistic Regression）是一种常用的集成学习方法，它将GBDT的输出作为LR的输入，用于进一步提升模型的性能。GBDT+LR的方法在实际应用中是比较常见的，尤其在点击率预测、推荐系统等场景中取得了很好的效果。\n\n相对于单独使用GBDT或LR，GBDT+LR通过结合两种模型的优势，可以更好地处理非线性特征和高维稀疏特征，具有较强的表达能力和泛化性能。此外，由于GBDT和LR的计算都是可并行化的，所以在消耗硬件资源方面并不会太多，通常可以在普通的计算机或者少量节点的分布式环境中运行。当然，具体的资源消耗还取决于数据集的大小、特征的维度等因素。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699861219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384831,"user_name":"Geek_3003b4","can_delete":false,"product_type":"c1","uid":3666388,"ip_address":"广东","ucode":"75F969EF300A8C","user_header":"","comment_is_top":false,"comment_ctime":1701661214,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100542801,"comment_content":"老师你好，您代码中数据特征的提取那一部分是不是写错了呀，pd.cut可以这样用吗        data = pd.read_csv(&#39;..&#47;..&#47;data&#47;trainningset.csv&#39;, header=None)\n        for _file in [&#39;..&#47;..&#47;data&#47;trainningset_10&#39;, &#39;..&#47;..&#47;data&#47;trainningset_11&#39;, &#39;..&#47;..&#47;data&#47;trainningset_12&#39;]:\n            temp = pd.cut(_file, header=None)\n            data = pd.concat([data, temp], axis=0, ignore_index=True)","like_count":0}]}