{"id":771660,"title":"02｜编程语言全景图（上）：编译器是如何把源代码翻译成字节码的？","content":"<p>你好，我是海纳。</p><p>从上节课编程语言发展的基本历程中，我们可以了解到，编程语言的发展为虚拟机技术提供了源动力，而虚拟机技术的发展则为编程语言的发展提供了根本保障。虚拟机中的很多技术是为了支持对应的语言特性才被发明出来的，同样有很多好用的语言特性也是因为虚拟机技术的长足发展才得以实现。所以说，<strong>编程语言和虚拟机技术是相互依赖和对立统一的</strong>。</p><p>这节课我们将在上节课内容的基础上，使用一个最基本的<strong>表达式求值</strong>的例子，来说明一个编程语言的编译器是如何把源代码翻译成计算机可以理解的结构并最终执行的。</p><p>我们先创建一个文本文件，里面是一个只包含了数字和四则运算的表达式，编写一个程序来计算这个表达式。基本的过程包括词法分析、文法分析、生成抽象语法树、生成字节码、虚拟机执行五个步骤。这节课我们会实现前四个步骤，虚拟机执行是一个很大的话题，我们将会在第三讲深入介绍。</p><p><img src=\"https://static001.geekbang.org/resource/image/01/dc/01f33b8729bb289658b79af49ca257dc.png?wh=3342x952\" alt=\"图片\"></p><h2>词法分析</h2><p>第一个步骤就是要从文本文件中逐个字符地去读取内容，然后把字符识别成数字或者是运算符。这些数字和运算符是组成程序的基本元素，它有一个专用的名字，叫做token。把文本文件中的一串字符，识别成一串token，这就是我们要解决的第一个问题。</p><p>比如，我们创建一个文本文件，命名为 test_token.txt，其中只包含一行表达式。</p><!-- [[[read_end]]] --><pre><code class=\"language-plain\">12 * 48 + 59\n</code></pre><p>这个表达式其实是由5个token组成的，分别是数字12、乘号、数字48、加号和数字59。这些 token 可以分为两大类：数字和操作符。我们可以使用正则表达式来描述这两类 token。</p><pre><code class=\"language-plain\">NUM = [0-9]+\nOP = [\"+-*/\"]\n</code></pre><p>其中，NUM 代表整数，它的定义是至少包含一个0到9之间的一个数字。OP 代表操作符，是加减乘除四个字符中的一个。在字符串中识别正则表达式，最常用的一个办法就是使用<strong>有限自动机</strong>。你可以看一下包含了这两条简单规则的自动机示意图。<br>\n<img src=\"https://static001.geekbang.org/resource/image/5e/83/5ea648a5d7cd6fc5eca7640d57897c83.png?wh=2112x1126\" alt=\"图片\"></p><p><span class=\"reference\">注：这里我补充一个有限自动机的讲解视频，你可以了解它是如何定义以及如何转换成相应的代码。</span></p><p><video poster=\"https://media001.geekbang.org/d01ff6f9125d71ef81205017f1f80102/snapshots/b0625d4602724f319e16229d9d24c99b-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/2cf450a8-18f79f4b206-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/20858f6e125e71ef80316732b68e0102/27cc669446954f45999d2ffc4952cbfa-9640d537f6d20870dce04a6748e3e6b0-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>将这个有限自动机转换成程序代码是一种固定化的模式。程序不断地读入字符，并把其中的token识别出来。你可以看一下相应的代码。</p><pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n\n#define INIT 0\n#define NUM 1\n\nint main() {\n    FILE * fp = fopen(\"test_token.txt\", \"r\");\n    char ch; \n    int state, num = 0;\n\n    while ((ch = getc(fp)) != EOF) {\n        if (ch == ' ' || ch == '\\n') {\n            if (state == NUM) {\n                printf(\"token NUM : %d\\n\", num);\n                state = INIT;\n                num = 0;\n            }   \n        }   \n\n        else if (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {\n            state = NUM;\n            num = num * 10 + ch - '0';\n        }   \n\n        else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {\n\t\t    if (state == NUM) {\n                printf(\"token NUM : %d\\n\", num);\n                state = INIT;\n                num = 0;\n            }\n\n            printf(\"token operator : %c\\n\", ch);\n            state = INIT;\n        }\n\n    }\n\n    fclose(fp);\n    return 0;\n}\n</code></pre><p>当程序遇到加减乘除操作符的时候，就可以直接打印出这是一个操作符。需要注意的是当遇到数字的时候要进行转换，将字符变成数字（20至23行）。在数字字符结束的时候要将数字的值打印出来（第13至17行，第26至30行）。</p><p>程序使用state变量来标识数字字符是否结束。当state的值为NUM时，就表示程序正在接收一个数字。</p><p>编译并执行的结果如下：</p><pre><code class=\"language-c++\">token NUM : 12\ntoken operator : *\ntoken NUM : 48\ntoken operator : +\ntoken NUM : 59\n</code></pre><p>可见，这个程序正确地将表达式中的各个 token 分析出来了。</p><h2>文法分析</h2><p>从文本文件中分析出程序的基本元素——token以后，编译器就要尝试着去理解这些 token 之间的关系了。</p><p>token 之间是有其内在的逻辑关系的，比如，加法符号的前后都必须是一个可以执行加法操作的目标，它可以是一个数字，也可以是一个变量，但加号后面却一定不能紧跟一个乘号，否则就是一个不合法的表达式。</p><p>编译器要分析这些 token 组成的序列是否有意义，这个工作就是由文法分析完成的。</p><p>文法分析主要有两大类算法，一种是自顶向下的分析方法，一种是自底向上的分析方法。其中，自顶向下的分析方法算法简单直接，易于理解和编写。而 yacc 等文法分析工具则以自底向上的算法为主，它的特点是性能好，表达能力强，但是难以调试。所以这里我们就以自顶向下的分析方法为主，来介绍文法分析器是如何工作的。</p><p>自顶向下的分析方法也被称为递归下降的分析方法。</p><p>所谓软件设计，不过是把一个大的问题化解为一个个小的问题。比如说，我们设计一个网站服务器，也是把它分成不同的模块，然后每个模块下面再设计各个不同的组件，组件下面再进行更细粒度的划分。这就是一种从上到下的任务分解。在文法分析中，本质上也采用了同样的分析思路。</p><p>以表达式求值为例，最顶部的任务，计算一个表达式（expression）的值。一个表达式，也就是多项式，它是由每个项求和（差与和的原理一样，这里为了描述方便只说和的情况）得到的。所以，一个expression就可以定义为：</p><pre><code class=\"language-c++\">expression := term + term + ... + term\n</code></pre><p>等式右边的 term 是一个求和式中的各个加数。例如，对于多项式 2 + 3 * 4 + 5，我们可以把这个式子看成 2 与 3 * 4 与 5 的求和。其中，2 是一个term，3 * 4 也是一个term，5 也是一个 term。</p><p>同样的方法也可以用来拆分 term。term 可以看成是多个因子的积。所以term 就可以定义为：</p><pre><code class=\"language-c++\">term := factor * factor ... * factor\n</code></pre><p>左边的 term 是一个规模比较大的积，而右边的一个 factor 则代表了一个因子。这样，我们就把 term 这个结构拆成了规模更小的因子了。接下来，我们继续定义 factor。</p><pre><code class=\"language-c++\">facotr := NUMBER | (expression)\n</code></pre><p>等式右边的中间竖线表示“或”的关系，也就是说，一个 factor 可以是一个整数（NUMBER），也可以是一个包在一对括号里的表达式。反过来说，当遇到一个整数，就可以认为它是一个 factor。或者用括号括起来的表达式，也是一个 factor。</p><p>这里需要注意的是，表达式的文法需要先使用 term 去解构 expression，再使用 factor 去解构 term，最后 factor 还要 expression 去解构，绕了一圈又回来了。<strong>这种用自己的定义来定义自己的情况就是递归。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/cc/d2/ccfa870a1eb9a2bdd1c9ed5d0cf222d2.png?wh=2002x1020\" alt=\"图片\"></p><p>但是递归不能没有终点，要使递归的定义变得完整，就必须满足两个条件。</p><ol>\n<li>子问题必须和原始问题是同样性质的，而且规模要更小、更简单。</li>\n<li>不能无限制地调用本身，必须有个出口，化简为非递归状况处理。</li>\n</ol><p>在上述例子中，子问题的规模是不断缩小的，这一点没有问题。第2点，必须有个出口，这个出口是什么呢？其实就是<strong>factor的定义</strong>，当问题拆到只有一个整数的时候，递归就会终止，也就是条件2中所说的出口。</p><p>这几条规则一起组成了表达式求值的<strong>文法</strong>，接下来，我们就把这个文法转换成程序（节选自parser.cpp）。</p><pre><code class=\"language-plain\">// 这里只要对照 expression 的定义实现就可以了\n// expression := term （+|- term)*\nint Parser::expression() {\n    // 对应第一个 term\n&nbsp; &nbsp; int a = term();\n&nbsp; &nbsp; Token* op = get_token();\n\n    // 多个 term 可以对应 while 语句\n&nbsp; &nbsp; while (op != NULL &amp;&amp;\n&nbsp; &nbsp; &nbsp; &nbsp; (op-&gt;_tt == T_PLUS || op-&gt;_tt == T_MINUS)) {\n&nbsp; &nbsp; &nbsp; &nbsp; consume();\n&nbsp; &nbsp; &nbsp; &nbsp; int b = term();\n&nbsp; &nbsp; &nbsp; &nbsp; if (op-&gt;_tt == T_PLUS) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a = a + b;\n&nbsp; &nbsp; &nbsp; &nbsp; } else {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a = a - b;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; op = get_token();\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; return a;\n}\n\n// term := factor ((*|/) factor) *\nint Parser::term() {\n&nbsp; &nbsp; int a = factor();\n&nbsp; &nbsp; Token* op = get_token();\n&nbsp; &nbsp; while (op != NULL &amp;&amp;\n&nbsp; &nbsp; &nbsp; &nbsp; (op-&gt;_tt == T_MULT || op-&gt;_tt == T_DIV)) {\n&nbsp; &nbsp; &nbsp; &nbsp; consume();\n&nbsp; &nbsp; &nbsp; &nbsp; int b = factor();\n&nbsp; &nbsp; &nbsp; &nbsp; if (op-&gt;_tt == T_MULT) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a = a * b;\n&nbsp; &nbsp; &nbsp; &nbsp; } else {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a = a / b;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; op = get_token();\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; return a;\n}\n\n// factor := INT | (expression)\nint Parser::factor() {\n&nbsp; &nbsp; Token* data = get_token();\n&nbsp; &nbsp; if (data-&gt;_tt == T_INT) {\n&nbsp; &nbsp; &nbsp; &nbsp; consume();\n&nbsp; &nbsp; &nbsp; &nbsp; return stoi(data);\n&nbsp; &nbsp; }\n&nbsp; &nbsp; else if (data-&gt;_tt == T_LEFT_PAR) {\n&nbsp; &nbsp; &nbsp; &nbsp; match(T_LEFT_PAR);\n&nbsp; &nbsp; &nbsp; &nbsp; int a = expression();\n&nbsp; &nbsp; &nbsp; &nbsp; match(T_RIGHT_PAR);\n\n&nbsp; &nbsp; &nbsp; &nbsp; return a;\n&nbsp; &nbsp; }\n&nbsp; &nbsp; return -1;\n}\n\n// 将字符串转换成数字\nint Parser::stoi(Token* data) {\n&nbsp; &nbsp; int value = 0;\n&nbsp; &nbsp; for (int i = 0; i &lt; data-&gt;_length; i++) {\n&nbsp; &nbsp; &nbsp; &nbsp; value = value * 10 + data-&gt;_value[i] - '0';\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; return value;\n}\n\nint Parser::eval() {\n&nbsp; &nbsp; printf(\"%d\\n\", expression());\n\n&nbsp; &nbsp; return 0;\n}\n</code></pre><p>代码里定义这样三个函数：expression、term、factor。expression表示对表达式求值，term表示对表达式中的某一项求值，factor表示对某一个因子求值。</p><p>expression 函数里的主要结构就是 while 循环，用于处理多个加号和减号的情况。遇到一个加号以后，就会调用 term 函数去处理多项式中的某一项。term 函数的结构与 expression 函数的结构是相同的。factor 函数则使用了分支结构来区分数字（第48行）和小括号（第52行）两种情况。</p><p>在这个过程中，从 expression 下降到 term，再下降到 factor，有明显的自上而下的解析过程。所以这种方式就被称为自上而下的递归下降式文法分析。</p><p>上述代码与三条文法规则的对应关系十分明显，所以这里我就不再过多地分析代码的实现了。这段代码在执行的时候就直接把表达式的值求出来，并且打印在屏幕上了。一个真实的编译器在工作的时候是不会执行源代码的，它只负责将源代码转换成抽象语法树（Abstract Syntax Tree，AST）。下面我们就来介绍一下抽象语法树的结构和工作原理。</p><h2>抽象语法树</h2><p>抽象语法树对编译器有非同寻常的意义，大多数编译器都会实现抽象语法树这个数据结构。这是因为语法树在表达程序结构方面有非常直观的形式。例如，12 * 48 + 59 的抽象语法树如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/3c/1ea8133850ebb83f94bf8bcf0877633c.png?wh=1630x984\" alt=\"图片\"></p><p>抽象语法树有很多作用，我们可以直接后序遍历语法树来对表达式进行求值，也可以在语法树上做很多性能优化的工作，还可以通过抽象语法树来生成字节码。接下来的例子将会展示如何通过语法树产生字节码。</p><p>在文法分析的过程中，如果不直接计算表达式的值，而是将每一个分析结果转化成一个语法树内部节点，就可以在文法分析过程中构建语法树了。</p><p>首先，定义好抽象语法树的各个结点的结构。</p><pre><code class=\"language-c++\">class Node {\npublic:\n&nbsp; &nbsp; virtual void accept(Visitor* v) = 0;\n};\n\nenum OpType {\n&nbsp; &nbsp; AST_OP_ADD,\n&nbsp; &nbsp; AST_OP_SUB,\n&nbsp; &nbsp; AST_OP_MUL,\n&nbsp; &nbsp; AST_OP_DIV,\n&nbsp; &nbsp; AST_OP_MOD,\n};\n\nclass BinaryOp : public Node {\nprotected:\n&nbsp; &nbsp; OpType _op_type;\n&nbsp; &nbsp; Node* _left;\n&nbsp; &nbsp; Node* _right;\n\npublic:\n&nbsp; &nbsp; BinaryOp(OpType op_type, Node* left, Node* right) :\n&nbsp; &nbsp; &nbsp; &nbsp; _op_type(op_type), _left(left), _right(right) {\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; virtual void accept(Visitor* v);\n\n&nbsp; &nbsp; void set_left(Node* left);\n&nbsp; &nbsp; void set_right(Node* right);\n\n&nbsp; &nbsp; OpType op_type()&nbsp; &nbsp; { return _op_type; }\n&nbsp; &nbsp; Node* left()&nbsp; &nbsp; &nbsp; &nbsp; { return _left; }\n&nbsp; &nbsp; Node* right()&nbsp; &nbsp; &nbsp; &nbsp;{ return _right; }\n};\n\nclass ConstInt : public Node {\npublic:\n&nbsp; &nbsp; int _value;\n\n&nbsp; &nbsp; ConstInt(int v) : _value(v) {}\n\n&nbsp; &nbsp; virtual void accept(Visitor* v);\n};\n</code></pre><p>抽象语法树结点类中的 accept 方法是为了实现访问者模式而定义的。同时，修改文法分析的实现，让文法分析的结果返回语法树结点。</p><pre><code class=\"language-c++\">Node* Parser::expression() {\n    Node* a = term();\n    Token* op = get_token();\n    while (op != NULL &amp;&amp;\n        (op-&gt;_tt == T_PLUS || op-&gt;_tt == T_MINUS)) {\n        consume();\n        Node* b = term();\n        if (op-&gt;_tt == T_PLUS) {\n            a = new BinaryOp(AST_OP_ADD, a, b);\n        } else {\n            a = new BinaryOp(AST_OP_SUB, a, b);\n        }\n\n        op = get_token();\n    }\n\n    return a;\n}\n\nNode* Parser::term() {\n    Node* a = factor();\n    Token* op = get_token();\n    while (op != NULL &amp;&amp;\n        (op-&gt;_tt == T_MULT || op-&gt;_tt == T_DIV)) {\n        consume();\n        Node* b = factor();\n        if (op-&gt;_tt == T_MULT) {\n            a = new BinaryOp(AST_OP_MUL, a, b);\n        } else {\n            a = new BinaryOp(AST_OP_DIV, a, b);\n        }\n\n        op = get_token();\n    }\n\n    return a;\n}\n\nNode* Parser::factor() {\n    Token* data = get_token();\n    if (data-&gt;_tt == T_INT) {\n        consume();\n        return new ConstInt(stoi(data));\n    }\n    else if (data-&gt;_tt == T_LEFT_PAR) {\n        match(T_LEFT_PAR);\n        Node* a = expression();\n        match(T_RIGHT_PAR);\n\n        return a;\n    }\n    return NULL;\n}\n</code></pre><p>到此为止，重新编译运行整个项目，就可以正确地得到抽象语法树了。我们课程所附带的代码仓里提供了一个使用访问者模式实现的Dumper工具，可以使用树形结构打印一个表达式的抽象语法树，你可以自己看一看。</p><h2>生成字节码</h2><p>对抽象语法树进行一次后序遍历就可以生成基于栈的字节码。如果你对二叉树的遍历比较了解的话，这个过程就是显而易见的。</p><p>第一节课我们已经介绍过了，<strong>字节码的本质是一个虚拟指令集</strong>，它里面的每条指令代表一种操作。一般来说，虚拟机的虚拟指令集包含的指令数不会超过 256，一个字节就足够编码全部的指令了，所以人们把这种虚拟指令集叫做字节码。</p><p>作为示例，虚拟指令的编码可以任意定义，例如：</p><pre><code class=\"language-c++\">#define BINARY_MUL      20\n#define BINARY_DIV      21\n#define BINARY_ADD\t    23\n#define BINARY_SUB      24\n\n#define LOAD_CONST\t100\n</code></pre><p>就像第一节课展示的基于栈的虚拟机的计算过程，BINARY_ADD这四个二元操作符的操作数都在栈上。执行BINARY_ADD时，虚拟机会从操作数栈顶上取两个数字，求和，然后将和再送入栈顶。而LOAD_CONST的作用则是将数字加载到栈顶。</p><p>接下来，再引入一个新的访问者PrintVisitor，用于打印字节码助记符。这里使用字符串将字节码的助记符打印出来，并不是直接将虚拟机可以执行的虚拟指令打印出来。我们可以这样定义：</p><pre><code class=\"language-c++\">// visitor.hpp\nclass PrintVisitor : public Visitor {\npublic:\n    PrintVisitor() {}\n\n    void visit(Node* n);\n\n    virtual void visit(BinaryOp* n);\n    virtual void visit(ConstInt* n);\n};\n\n// visitor.cpp\nvoid PrintVisitor::visit(Node* n) {\n    n-&gt;accept(this);\n}\n\nvoid PrintVisitor::visit(BinaryOp* op) {\n    visit(op-&gt;left());\n    visit(op-&gt;right());\n\n    switch(op-&gt;op_type()) {\n    case AST_OP_ADD:\n        printf(\"BINARY_ADD\\n\");\n        break;\n    case AST_OP_SUB:\n        printf(\"BINARY_SUB\\n\");\n        break;\n    case AST_OP_MUL:\n        printf(\"BINARY_MUL\\n\");\n        break;\n    case AST_OP_DIV:\n        printf(\"BINARY_DIV\\n\");\n        break;\n    default:\n        printf(\"Unknown binary op %d\\n\", op-&gt;op_type());\n        return;\n    }\n\n}\n\nvoid PrintVisitor::visit(ConstInt* n) {\n    printf(\"LOAD_CONST\\t%d\\n\", n-&gt;_value);\n}\n</code></pre><p>使用 PrintVisitor 来访问抽象语法树时，就可以使用字符串的方式将字节码展示出来。编译运行的结果如下所示：</p><pre><code class=\"language-c++\">LOAD_CONST&nbsp; &nbsp; &nbsp; 12\nLOAD_CONST&nbsp; &nbsp; &nbsp; 48\nBINARY_MUL\nLOAD_CONST&nbsp; &nbsp; &nbsp; 59\nBINARY_ADD\n</code></pre><p>如果想真正地生成字节码，就把字符串的方式改成字节码的方式即可。这里引入一个新的访问者 CodeGen，用于在内存中生成一段真正的可供虚拟机执行的虚拟指令串，也就是字节码。你可以看一下它的核心代码。</p><pre><code class=\"language-c++\">void CodeGen::add_op(unsigned char op_code, unsigned char param) {\n&nbsp; &nbsp; _insts.push_back(op_code);\n&nbsp; &nbsp; if (op_code &gt; HAVE_ARGUMENT) {\n&nbsp; &nbsp; &nbsp; &nbsp; _insts.push_back(param);\n&nbsp; &nbsp; }\n}\n\nvoid CodeGen::visit(BinaryOp* op) {\n&nbsp; &nbsp; visit(op-&gt;left());\n&nbsp; &nbsp; visit(op-&gt;right());\n\n&nbsp; &nbsp; switch(op-&gt;op_type()) {\n&nbsp; &nbsp; case AST_OP_ADD:\n&nbsp; &nbsp; &nbsp; &nbsp; add_op(BINARY_ADD);\n&nbsp; &nbsp; &nbsp; &nbsp; break;\n&nbsp; &nbsp; case AST_OP_SUB:\n&nbsp; &nbsp; &nbsp; &nbsp; add_op(BINARY_SUB);\n&nbsp; &nbsp; &nbsp; &nbsp; break;\n&nbsp; &nbsp; case AST_OP_MUL:\n&nbsp; &nbsp; &nbsp; &nbsp; add_op(BINARY_MUL);\n&nbsp; &nbsp; &nbsp; &nbsp; break;\n&nbsp; &nbsp; case AST_OP_DIV:\n&nbsp; &nbsp; &nbsp; &nbsp; add_op(BINARY_DIV);\n&nbsp; &nbsp; &nbsp; &nbsp; break;\n&nbsp; &nbsp; default:\n&nbsp; &nbsp; &nbsp; &nbsp; printf(\"Unknown binary op %d\\n\", op-&gt;op_type());\n&nbsp; &nbsp; &nbsp; &nbsp; return;\n&nbsp; &nbsp; }\n}\n\nvoid CodeGen::visit(ConstInt* n) {\n&nbsp; &nbsp; add_op(LOAD_CONST, n-&gt;_value);\n}\n</code></pre><p>CodeGen类的作用是记录字节码，_inst是一个 char 类型的 vector。add_op 方法是将一个指令添加到字节码向量里。</p><p>HAVE_ARGUMENT 是一个预定义的宏（第3行），它的值是 90，如果指令编号小于 90，就代表这个指令没有参数，否则这个指令就带有参数。</p><p>两个核心的 visit 方法（第 8 行和第 31 行），基本逻辑和 PrintVisitor 相同，都是对语法树进行后序遍历。</p><p>到此为止，我们就使用 C++ 语言成功实现了一个简单的表达式的编译器，包含了词法分析、文法分析、字节码生成等步骤，麻雀虽小，五脏俱全。后面不断地新增各种语法特性，实际上也不过是在这个大框架上添砖加瓦。理解了这个过程，就掌握了编译器的基本工作原理。</p><h2>总结</h2><p>源代码是由人编写，供人阅读和维护的，计算机并不认识它。计算机能理解的是机器指令，把源代码翻译成机器指令就是编译器的核心功能。一个由语言虚拟机支持的动态语言的编译器，其主要的工作流程包含了词法分析、文法分析、生成抽象语法树、生成字节码以及执行字节码等过程。</p><p>词法分析的主要作用是将字符划分成一个个有意义的单词，这些单词统称为 token，词法分析经常使用<strong>有限自动机</strong>作为主要的实现手段。文法分析的作用是分析 token 之间的有机联系，进而识别出抽象语法树结构。它有两大类重要的分析手段，分别是自顶向下的递归下降分析法和自底向上的分析法。自顶向下的分析法简单直观，所以是我们这节课重点介绍的内容。</p><p>使用<strong>访问者模式</strong>操作抽象语法树是一种常用的手段，对抽象语法树的后序遍历可以产生字节码，在生成字节码以后，虚拟机就可以执行这些字节码了。下一节课我们就会通过实现一个简单的虚拟机来说明字节码是如何被执行的。</p><p><span class=\"reference\">注：点击链接查看<a href=\"https://gitee.com/hinus/pythonvm/tree/geektime/\">课程代码地址</a></span></p><h2>思考题</h2><p>如果为这节课的文法引入变量的话，应该怎么做呢？只需要考虑变量出现在表达式即可，不用考虑变量是如何定义和赋初值的。欢迎你把你的答案分享到评论区，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p>","comments":[{"had_liked":false,"id":390429,"user_name":"lightwolf","can_delete":false,"product_type":"c1","uid":3229927,"ip_address":"安徽","ucode":"9F4E0F742C174D","user_header":"https://static001.geekbang.org/account/avatar/00/31/48/e7/958b7e6c.jpg","comment_is_top":false,"comment_ctime":1715324551,"is_pvip":false,"replies":[{"id":142049,"content":"👍，pratt算法用于处理自定义的中缀运算符非常有效。它要考虑运算符优先级。《crafting interpreter》这本书可以参考","user_name":"作者回复","user_name_real":"编辑","uid":1360512,"ctime":1715562344,"ip_address":"上海","comment_id":390429,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761401,"comment_content":"我觉得pratt算法是parse二元表达式最好的算法，特别好用😄","like_count":4,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644844,"discussion_content":"👍，pratt算法用于处理自定义的中缀运算符非常有效。它要考虑运算符优先级。《crafting interpreter》这本书可以参考","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715562344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390529,"user_name":"果粒橙","can_delete":false,"product_type":"c1","uid":1272730,"ip_address":"江苏","ucode":"000B15E28C68B6","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/9a/786b1ed8.jpg","comment_is_top":false,"comment_ctime":1715568949,"is_pvip":false,"replies":[{"id":142056,"content":"https:&#47;&#47;gitee.com&#47;hinus&#47;pythonvm&#47;tree&#47;geektime&#47;。记得加入微信群。及时获取最新的直播答疑信息。","user_name":"作者回复","user_name_real":"编辑","uid":1360512,"ctime":1715613074,"ip_address":"浙江","comment_id":390529,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761401,"comment_content":"gitee里面怎么找每一课对应的代码，最好能按照课时分类。","like_count":1,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644930,"discussion_content":"https://gitee.com/hinus/pythonvm/tree/geektime/。记得加入微信群。及时获取最新的直播答疑信息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715613074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390493,"user_name":"Triple tree","can_delete":false,"product_type":"c1","uid":3889514,"ip_address":"浙江","ucode":"4A9A6ABCA167B5","user_header":"https://static001.geekbang.org/account/avatar/00/3b/59/6a/ac154bfe.jpg","comment_is_top":false,"comment_ctime":1715488482,"is_pvip":false,"replies":[{"id":142054,"content":"👍，可以，可以。测试用例的最后加一个换行符规避一下吧。欢迎加入微信群，掌握最新的直播答疑信息。","user_name":"作者回复","user_name_real":"编辑","uid":1360512,"ctime":1715562848,"ip_address":"上海","comment_id":390493,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100761401,"comment_content":"词法分析parser.cpp代码中，如果文件中末尾以数字结束并且没有空格或换行符，最后一个数字无法打印，在fclose前需要判断一下state是否为NUM，是的话打印num","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644851,"discussion_content":"👍，可以，可以。测试用例的最后加一个换行符规避一下吧。欢迎加入微信群，掌握最新的直播答疑信息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715562848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644762,"discussion_content":"更通用的做法可能是遇到EOF就返回一个特殊字符, 这样就不用依赖于判断特定的state","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715495953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390454,"user_name":"lunar","can_delete":false,"product_type":"c1","uid":1197007,"ip_address":"江苏","ucode":"4FC1E388AD98C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/43/cf/118c4ef5.jpg","comment_is_top":false,"comment_ctime":1715392415,"is_pvip":false,"replies":[{"id":142046,"content":"两边一起对照着研究，一个是ll算法，一个是lr算法，并不冲突，加油💪","user_name":"作者回复","user_name_real":"编辑","uid":1360512,"ctime":1715561750,"ip_address":"上海","comment_id":390454,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761401,"comment_content":"antlr 还没研究完 又来看这个了，我还真是冲动","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644841,"discussion_content":"两边一起对照着研究，一个是ll算法，一个是lr算法，并不冲突，加油💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715561750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390355,"user_name":"浩仔是程序员","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"广东","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1715182871,"is_pvip":false,"replies":[{"id":141954,"content":"有呀，在课程介绍页面","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1715213033,"ip_address":"北京","comment_id":390355,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761401,"comment_content":"首发！！有交流群吗？","like_count":0,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644366,"discussion_content":"有呀，在课程介绍页面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715213033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":395034,"user_name":"ifelse","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1729149882,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":3,"score":2,"product_id":100761401,"comment_content":"学习打卡","like_count":0}]}