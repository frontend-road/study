{"id":403351,"title":"30 | ORM：CURD 神器 GORM 包介绍及实战","content":"<p>你好，我是孔令飞。</p><p>在用Go开发项目时，我们免不了要和数据库打交道。每种语言都有优秀的ORM可供选择，在Go中也不例外，比如<a href=\"https://github.com/go-gorm/gorm\">gorm</a>、<a href=\"https://github.com/go-xorm/xorm\">xorm</a>、<a href=\"https://github.com/gohouse/gorose\">gorose</a>等。目前，GitHub上 star数最多的是GORM，它也是当前Go项目中使用最多的ORM。</p><p>IAM项目也使用了GORM。这一讲，我就来详细讲解下GORM的基础知识，并介绍iam-apiserver是如何使用GORM，对数据进行CURD操作的。</p><h2>GORM基础知识介绍</h2><p>GORM是Go语言的ORM包，功能强大，调用方便。像腾讯、华为、阿里这样的大厂，都在使用GORM来构建企业级的应用。GORM有很多特性，开发中常用的核心特性如下：</p><ul>\n<li>功能全。使用ORM操作数据库的接口，GORM都有，可以满足我们开发中对数据库调用的各类需求。</li>\n<li>支持钩子方法。这些钩子方法可以应用在Create、Save、Update、Delete、Find方法中。</li>\n<li>开发者友好，调用方便。</li>\n<li>支持Auto Migration。</li>\n<li>支持关联查询。</li>\n<li>支持多种关系数据库，例如MySQL、Postgres、SQLite、SQLServer等。</li>\n</ul><p>GORM有两个版本，<a href=\"https://github.com/jinzhu/gorm\">V1</a>和<a href=\"https://github.com/go-gorm/gorm\">V2</a>。遵循用新不用旧的原则，IAM项目使用了最新的V2版本。</p><!-- [[[read_end]]] --><h2>通过示例学习GORM</h2><p>接下来，我们先快速看一个使用GORM的示例，通过该示例来学习GORM。示例代码存放在<a href=\"https://github.com/marmotedu/gopractise-demo/blob/main/gorm/main.go\">marmotedu/gopractise-demo/gorm/main.go</a>文件中。因为代码比较长，你可以使用以下命令克隆到本地查看：</p><pre><code class=\"language-bash\">$ mkdir -p $GOPATH/src/github.com/marmotedu\n$ cd $GOPATH/src/github.com/marmotedu\n$ git clone https://github.com/marmotedu/gopractise-demo\n$ cd gopractise-demo/gorm/\n</code></pre><p>假设我们有一个MySQL数据库，连接地址和端口为 <code>127.0.0.1:3306</code> ，用户名为 <code>iam</code> ，密码为 <code>iam1234</code> 。创建完main.go文件后，执行以下命令来运行：</p><pre><code class=\"language-bash\">$ go run main.go -H 127.0.0.1:3306 -u iam -p iam1234 -d test\n2020/10/17 15:15:50 totalcount: 1\n2020/10/17 15:15:50 \tcode: D42, price: 100\n2020/10/17 15:15:51 totalcount: 1\n2020/10/17 15:15:51 \tcode: D42, price: 200\n2020/10/17 15:15:51 totalcount: 0\n</code></pre><p>在企业级Go项目开发中，使用GORM库主要用来完成以下数据库操作：</p><ul>\n<li>连接和关闭数据库。连接数据库时，可能需要设置一些参数，比如最大连接数、最大空闲连接数、最大连接时长等。</li>\n<li>插入表记录。可以插入一条记录，也可以批量插入记录。</li>\n<li>更新表记录。可以更新某一个字段，也可以更新多个字段。</li>\n<li>查看表记录。可以查看某一条记录，也可以查看符合条件的记录列表。</li>\n<li>删除表记录。可以删除某一个记录，也可以批量删除。删除还支持永久删除和软删除。</li>\n<li>在一些小型项目中，还会用到GORM的表结构自动迁移功能。</li>\n</ul><p>GORM功能强大，上面的示例代码展示的是比较通用的一种操作方式。</p><p>上述代码中，首先定义了一个GORM模型（Models），Models是标准的Go struct，用来代表数据库中的一个表结构。我们可以给 Models 添加 TableName 方法，来告诉 GORM 该Models映射到数据库中的哪张表。Models定义如下：</p><pre><code class=\"language-go\">type Product struct {\n    gorm.Model\n    Code  string `gorm:\"column:code\"`\n    Price uint   `gorm:\"column:price\"`\n}\n\n// TableName maps to mysql table name.\nfunc (p *Product) TableName() string {\n    return \"product\"\n}\n</code></pre><p>如果没有指定表名，则GORM使用结构体名的蛇形复数作为表名。例如：结构体名为 <code>DockerInstance</code> ，则表名为 <code>dockerInstances</code> 。</p><p>在之后的代码中，使用Pflag来解析命令行的参数，通过命令行参数指定数据库的地址、用户名、密码和数据库名。之后，使用这些参数生成建立 MySQL 连接需要的配置文件，并调用 <code>gorm.Open</code> 建立数据库连接：</p><pre><code class=\"language-go\">var (\n    host     = pflag.StringP(\"host\", \"H\", \"127.0.0.1:3306\", \"MySQL service host address\")\n    username = pflag.StringP(\"username\", \"u\", \"root\", \"Username for access to mysql service\")\n    password = pflag.StringP(\"password\", \"p\", \"root\", \"Password for access to mysql, should be used pair with password\")\n    database = pflag.StringP(\"database\", \"d\", \"test\", \"Database name to use\")\n    help     = pflag.BoolP(\"help\", \"h\", false, \"Print this help message\")\n)\n\nfunc main() {\n    // Parse command line flags\n    pflag.CommandLine.SortFlags = false\n    pflag.Usage = func() {\n        pflag.PrintDefaults()\n    }\n    pflag.Parse()\n    if *help {\n        pflag.Usage()\n        return\n    }\n\n    dsn := fmt.Sprintf(`%s:%s@tcp(%s)/%s?charset=utf8&amp;parseTime=%t&amp;loc=%s`,\n        *username,\n        *password,\n        *host,\n        *database,\n        true,\n        \"Local\")\n    db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config{})\n    if err != nil {\n        panic(\"failed to connect database\")\n    }\n}\n</code></pre><p>创建完数据库连接之后，会返回数据库实例 <code>db</code> ，之后就可以调用db实例中的方法，完成数据库的CURD操作。具体操作如下，一共可以分为六个操作：</p><p>第一个操作，自动迁移表结构。</p><pre><code class=\"language-go\">// 1. Auto migration for given models\ndb.AutoMigrate(&amp;Product{})\n</code></pre><p><strong>我不建议你在正式的代码中自动迁移表结构。</strong>因为变更现网数据库是一个高危操作，现网数据库字段的添加、类型变更等，都需要经过严格的评估才能实施。这里将变更隐藏在代码中，在组件发布时很难被研发人员感知到，如果组件启动，就可能会自动修改现网表结构，也可能会因此引起重大的现网事故。</p><p>GORM的AutoMigrate方法，只对新增的字段或索引进行变更，理论上是没有风险的。在实际的Go项目开发中，也有很多人使用AutoMigrate方法自动同步表结构。但我更倾向于规范化、可感知的操作方式，所以我在实际开发中，都是手动变更表结构的。当然，具体使用哪种方法，你可以根据需要自行选择。</p><p>第二个操作，插入表记录。</p><pre><code class=\"language-go\">// 2. Insert the value into database\nif err := db.Create(&amp;Product{Code: \"D42\", Price: 100}).Error; err != nil {\n    log.Fatalf(\"Create error: %v\", err)\n}\nPrintProducts(db)\n</code></pre><p>通过 <code>db.Create</code> 方法创建了一条记录。插入记录后，通过调用 <code>PrintProducts</code> 方法打印当前表中的所有数据记录，来测试是否成功插入。</p><p>第三个操作，获取符合条件的记录。</p><pre><code class=\"language-go\">// 3. Find first record that match given conditions\nproduct := &amp;Product{}\nif err := db.Where(\"code= ?\", \"D42\").First(&amp;product).Error; err != nil {\n    log.Fatalf(\"Get product error: %v\", err)\n}\n</code></pre><p>First方法只会返回符合条件的记录列表中的第一条，你可以使用First方法来获取某个资源的详细信息。</p><p>第四个操作，更新表记录。</p><pre><code class=\"language-go\">// 4. Update value in database, if the value doesn't have primary key, will insert it\nproduct.Price = 200\nif err := db.Save(product).Error; err != nil {\n    log.Fatalf(\"Update product error: %v\", err)\n}\nPrintProducts(db)\n</code></pre><p>通过Save方法，可以把 product 变量中所有跟数据库不一致的字段更新到数据库中。具体操作是：先获取某个资源的详细信息，再通过 <code>product.Price = 200</code> 这类赋值语句，对其中的一些字段重新赋值。最后，调用 <code>Save</code> 方法更新这些字段。你可以将这些操作看作一种更新数据库的更新模式。</p><p>第五个操作，删除表记录。</p><p>通过 <code>Delete</code> 方法删除表记录，代码如下：</p><pre><code class=\"language-go\">// 5. Delete value match given conditions\nif err := db.Where(\"code = ?\", \"D42\").Delete(&amp;Product{}).Error; err != nil {\n    log.Fatalf(\"Delete product error: %v\", err)\n}\nPrintProducts(db)\n</code></pre><p>这里需要注意，因为 <code>Product</code> 中有 <code>gorm.DeletedAt</code> 字段，所以，上述删除操作不会真正把记录从数据库表中删除掉，而是通过设置数据库 <code>product</code> 表 <code>deletedAt</code> 字段为当前时间的方法来删除。</p><p>第六个操作，获取表记录列表。</p><pre><code class=\"language-go\">products := make([]*Product, 0)\nvar count int64\nd := db.Where(\"code like ?\", \"%D%\").Offset(0).Limit(2).Order(\"id desc\").Find(&amp;products).Offset(-1).Limit(-1).Count(&amp;count)\nif d.Error != nil {\n    log.Fatalf(\"List products error: %v\", d.Error)\n}\n</code></pre><p>在PrintProducts函数中，会打印当前的所有记录，你可以根据输出，判断数据库操作是否成功。</p><h2>GORM常用操作讲解</h2><p>看完上面的示例，我想你已经初步掌握了GORM的使用方法。接下来，我再来给你详细介绍下GORM所支持的数据库操作。</p><h3>模型定义</h3><p>GORM使用模型（Models）来映射一个数据库表。默认情况下，使用ID作为主键，使用结构体名的 <code>snake_cases</code> 作为表名，使用字段名的 <code>snake_case</code> 作为列名，并使用 CreatedAt、UpdatedAt、DeletedAt字段追踪创建、更新和删除时间。</p><p>使用GORM的默认规则，可以减少代码量，但我更喜欢的方式是<strong>直接指明字段名和表名</strong>。例如，有以下模型：</p><pre><code class=\"language-go\">type Animal struct {\n  AnimalID int64        // 列名 `animal_id`\n  Birthday time.Time    // 列名 `birthday`\n  Age      int64        // 列名 `age`\n}\n</code></pre><p>上述模型对应的表名为 <code>animals</code> ，列名分别为 <code>animal_id</code> 、 <code>birthday</code> 和 <code>age</code> 。我们可以通过以下方式来重命名表名和列名，并将 <code>AnimalID</code> 设置为表的主键：</p><pre><code class=\"language-go\">type Animal struct {\n    AnimalID int64     `gorm:\"column:animalID;primarykey\"` // 将列名设为 `animalID`\n    Birthday time.Time `gorm:\"column:birthday\"`            // 将列名设为 `birthday`\n    Age      int64     `gorm:\"column:age\"`                 // 将列名设为 `age`\n}\n\nfunc (a *Animal) TableName() string {\n    return \"animal\"\n}\n</code></pre><p>上面的代码中，通过 <code>primaryKey</code> 标签指定主键，使用 <code>column</code> 标签指定列名，通过给Models添加 <code>TableName</code> 方法指定表名。</p><p>数据库表通常会包含4个字段。</p><ul>\n<li>ID：自增字段，也作为主键。</li>\n<li>CreatedAt：记录创建时间。</li>\n<li>UpdatedAt：记录更新时间。</li>\n<li>DeletedAt：记录删除时间（软删除时有用）。</li>\n</ul><p>GORM也预定义了包含这4个字段的Models，在我们定义自己的Models时，可以直接内嵌到结构体内，例如：</p><pre><code class=\"language-go\">type Animal struct {\n    gorm.Model\n    AnimalID int64     `gorm:\"column:animalID\"` // 将列名设为 `animalID`\n    Birthday time.Time `gorm:\"column:birthday\"` // 将列名设为 `birthday`\n    Age      int64     `gorm:\"column:age\"`      // 将列名设为 `age`\n}\n</code></pre><p>Models中的字段能支持很多GORM标签，但如果我们不使用GORM自动创建表和迁移表结构的功能，很多标签我们实际上是用不到的。在开发中，用得最多的是 <code>column</code> 标签。</p><h3>连接数据库</h3><p>在进行数据库的CURD操作之前，我们首先需要连接数据库。你可以通过以下代码连接MySQL数据库：</p><pre><code class=\"language-go\">import (\n  \"gorm.io/driver/mysql\"\n  \"gorm.io/gorm\"\n)\n\nfunc main() {\n  // 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情\n  dsn := \"user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local\"\n  db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config{})\n}\n</code></pre><p>如果需要GORM正确地处理 <code>time.Time</code> 类型，在连接数据库时需要带上 <code>parseTime</code> 参数。如果要支持完整的UTF-8编码，可将<code>charset=utf8</code>更改为<code>charset=utf8mb4</code>。</p><p>GORM支持连接池，底层是用 <code>database/sql</code> 包来维护连接池的，连接池设置如下：</p><pre><code class=\"language-go\">sqlDB, err := db.DB()\nsqlDB.SetMaxIdleConns(100)              // 设置MySQL的最大空闲连接数（推荐100）\nsqlDB.SetMaxOpenConns(100)             // 设置MySQL的最大连接数（推荐100）\nsqlDB.SetConnMaxLifetime(time.Hour)    // 设置MySQL的空闲连接最大存活时间（推荐10s）\n</code></pre><p>上面这些设置，也可以应用在大型后端项目中。</p><h3>创建记录</h3><p>我们可以通过 <code>db.Create</code> 方法来创建一条记录：</p><pre><code class=\"language-go\">type User struct {\n  gorm.Model\n  Name         string\n  Age          uint8\n  Birthday     *time.Time\n}\nuser := User{Name: \"Jinzhu\", Age: 18, Birthday: time.Now()}\nresult := db.Create(&amp;user) // 通过数据的指针来创建\n</code></pre><p>db.Create函数会返回如下3个值：</p><ul>\n<li>user.ID：返回插入数据的主键，这个是直接赋值给user变量。</li>\n<li>result.Error：返回error。</li>\n<li>result.RowsAffected：返回插入记录的条数。</li>\n</ul><p>当需要插入的数据量比较大时，可以批量插入，以提高插入性能：</p><pre><code class=\"language-go\">var users = []User{{Name: \"jinzhu1\"}, {Name: \"jinzhu2\"}, {Name: \"jinzhu3\"}}\nDB.Create(&amp;users)\n\nfor _, user := range users {\n  user.ID // 1,2,3\n}\n</code></pre><h3>删除记录</h3><p>我们可以通过Delete方法删除记录：</p><pre><code class=\"language-go\">// DELETE from users where id = 10 AND name = \"jinzhu\";\ndb.Where(\"name = ?\", \"jinzhu\").Delete(&amp;user)\n</code></pre><p>GORM也支持根据主键进行删除，例如：</p><pre><code class=\"language-go\">// DELETE FROM users WHERE id = 10;\ndb.Delete(&amp;User{}, 10)\n</code></pre><p>不过，我更喜欢使用db.Where的方式进行删除，这种方式有两个优点。</p><p>第一个优点是删除方式更通用。使用db.Where不仅可以根据主键删除，还能够随意组合条件进行删除。</p><p>第二个优点是删除方式更显式，这意味着更易读。如果使用<code>db.Delete(&amp;User{}, 10)</code>，你还需要确认User的主键，如果记错了主键，还可能会引入Bug。</p><p>此外，GORM也支持批量删除：</p><pre><code class=\"language-go\">db.Where(\"name in (?)\", []string{\"jinzhu\", \"colin\"}).Delete(&amp;User{})\n</code></pre><p>GORM支持两种删除方法：软删除和永久删除。下面我来分别介绍下。</p><ol>\n<li>软删除</li>\n</ol><p>软删除是指执行Delete时，记录不会被从数据库中真正删除。GORM会将 <code>DeletedAt</code> 设置为当前时间，并且不能通过正常的方式查询到该记录。如果模型包含了一个 <code>gorm.DeletedAt</code> 字段，GORM在执行删除操作时，会软删除该记录。</p><p>下面的删除方法就是一个软删除：</p><pre><code class=\"language-go\">// UPDATE users SET deleted_at=\"2013-10-29 10:23\" WHERE age = 20;\ndb.Where(\"age = ?\", 20).Delete(&amp;User{})\n\n// SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL;\ndb.Where(\"age = 20\").Find(&amp;user)\n</code></pre><p>可以看到，GORM并没有真正把记录从数据库删除掉，而是只更新了 <code>deleted_at</code> 字段。在查询时，GORM查询条件中新增了<code>AND deleted_at IS NULL</code>条件，所以这些被设置过 <code>deleted_at</code> 字段的记录不会被查询到。对于一些比较重要的数据，我们可以通过软删除的方式删除记录，软删除可以使这些重要的数据后期能够被恢复，并且便于以后的排障。</p><p>我们可以通过下面的方式查找被软删除的记录：</p><pre><code class=\"language-go\">// SELECT * FROM users WHERE age = 20;\ndb.Unscoped().Where(\"age = 20\").Find(&amp;users)\n</code></pre><ol start=\"2\">\n<li>永久删除</li>\n</ol><p>如果想永久删除一条记录，可以使用Unscoped：</p><pre><code class=\"language-go\">// DELETE FROM orders WHERE id=10;\ndb.Unscoped().Delete(&amp;order)\n</code></pre><p>或者，你也可以在模型中去掉gorm.DeletedAt。</p><h3>更新记录</h3><p>GORM中，最常用的更新方法如下：</p><pre><code class=\"language-go\">db.First(&amp;user)\n\nuser.Name = \"jinzhu 2\"\nuser.Age = 100\n// UPDATE users SET name='jinzhu 2', age=100, birthday='2016-01-01', updated_at = '2013-11-17 21:34:10' WHERE id=111;\ndb.Save(&amp;user)\n</code></pre><p>上述方法会保留所有字段，所以执行Save时，需要先执行First，获取某个记录的所有列的值，然后再对需要更新的字段设置值。</p><p>还可以指定更新单个列：</p><pre><code class=\"language-go\">// UPDATE users SET age=200, updated_at='2013-11-17 21:34:10' WHERE name='colin';\ndb.Model(&amp;User{}).Where(\"name = ?\", \"colin\").Update(\"age\", 200)\n</code></pre><p>也可以指定更新多个列：</p><pre><code class=\"language-go\">// UPDATE users SET name='hello', age=18, updated_at = '2013-11-17 21:34:10' WHERE name = 'colin';\ndb.Model(&amp;user).Where(\"name\", \"colin\").Updates(User{Name: \"hello\", Age: 18, Active: false})\n</code></pre><p>这里要注意，这个方法只会更新非零值的字段。</p><h3>查询数据</h3><p>GORM支持不同的查询方法，下面我来讲解三种在开发中经常用到的查询方式，分别是检索单个记录、查询所有符合条件的记录和智能选择字段。</p><ol>\n<li>检索单个记录</li>\n</ol><p>下面是检索单个记录的示例代码：</p><pre><code class=\"language-go\">// 获取第一条记录（主键升序）\n// SELECT * FROM users ORDER BY id LIMIT 1;\ndb.First(&amp;user)\n\n// 获取最后一条记录（主键降序）\n// SELECT * FROM users ORDER BY id DESC LIMIT 1;\ndb.Last(&amp;user)\nresult := db.First(&amp;user)\nresult.RowsAffected // 返回找到的记录数\nresult.Error        // returns error\n\n// 检查 ErrRecordNotFound 错误\nerrors.Is(result.Error, gorm.ErrRecordNotFound)\n</code></pre><p>如果model类型没有定义主键，则按第一个字段排序。</p><ol start=\"2\">\n<li>查询所有符合条件的记录</li>\n</ol><p>示例代码如下：</p><pre><code class=\"language-go\">users := make([]*User, 0)\n\n// SELECT * FROM users WHERE name &lt;&gt; 'jinzhu';\ndb.Where(\"name &lt;&gt; ?\", \"jinzhu\").Find(&amp;users)\n</code></pre><ol start=\"3\">\n<li>智能选择字段</li>\n</ol><p>你可以通过Select方法，选择特定的字段。我们可以定义一个较小的结构体来接受选定的字段：</p><pre><code class=\"language-go\">type APIUser struct {\n  ID   uint\n  Name string\n}\n\n// SELECT `id`, `name` FROM `users` LIMIT 10;\ndb.Model(&amp;User{}).Limit(10).Find(&amp;APIUser{})\n</code></pre><p>除了上面讲的三种常用的基本查询方法，GORM还支持高级查询，下面我来介绍下。</p><h3>高级查询</h3><p>GORM支持很多高级查询功能，这里我主要介绍4种。</p><ol>\n<li>指定检索记录时的排序方式</li>\n</ol><p>示例代码如下：</p><pre><code class=\"language-go\">// SELECT * FROM users ORDER BY age desc, name;\ndb.Order(\"age desc, name\").Find(&amp;users)\n</code></pre><ol start=\"2\">\n<li>Limit &amp; Offset</li>\n</ol><p>Offset指定从第几条记录开始查询，Limit指定返回的最大记录数。Offset和Limit值为-1时，消除Offset和Limit条件。另外，Limit和Offset位置不同，效果也不同。</p><pre><code class=\"language-go\">// SELECT * FROM users OFFSET 5 LIMIT 10;\ndb.Limit(10).Offset(5).Find(&amp;users)\n</code></pre><ol start=\"3\">\n<li>Distinct</li>\n</ol><p>Distinct可以从数据库记录中选择不同的值。</p><pre><code class=\"language-go\">db.Distinct(\"name\", \"age\").Order(\"name, age desc\").Find(&amp;results)\n</code></pre><ol start=\"4\">\n<li>Count</li>\n</ol><p>Count可以获取匹配的条数。</p><pre><code class=\"language-go\">var count int64\n// SELECT count(1) FROM users WHERE name = 'jinzhu'; (count)\ndb.Model(&amp;User{}).Where(\"name = ?\", \"jinzhu\").Count(&amp;count)\n</code></pre><p>GORM还支持很多高级查询功能，比如内联条件、Not 条件、Or 条件、Group &amp; Having、Joins、Group、FirstOrInit、FirstOrCreate、迭代、FindInBatches等。因为IAM项目中没有用到这些高级特性，我在这里就不展开介绍了。你如果感兴趣，可以看下<a href=\"https://gorm.io/zh_CN/docs/index.html\">GORM的官方文档</a>。</p><h3>原生SQL</h3><p>GORM支持原生查询SQL和执行SQL。原生查询SQL用法如下：</p><pre><code class=\"language-go\">type Result struct {\n  ID   int\n  Name string\n  Age  int\n}\n\nvar result Result\ndb.Raw(\"SELECT id, name, age FROM users WHERE name = ?\", 3).Scan(&amp;result)\n</code></pre><p>原生执行SQL用法如下；</p><pre><code class=\"language-go\">db.Exec(\"DROP TABLE users\")\ndb.Exec(\"UPDATE orders SET shipped_at=? WHERE id IN ?\", time.Now(), []int64{1,2,3})\n</code></pre><h3>GORM钩子</h3><p>GORM支持钩子功能，例如下面这个在插入记录前执行的钩子：</p><pre><code class=\"language-go\">func (u *User) BeforeCreate(tx *gorm.DB) (err error) {\n  u.UUID = uuid.New()\n\n    if u.Name == \"admin\" {\n        return errors.New(\"invalid name\")\n    }\n    return\n}\n</code></pre><p>GORM支持的钩子见下表：</p><p><img src=\"https://static001.geekbang.org/resource/image/20/2c/20fb0b6a11dbcebd9ddf428517240d2c.jpg?wh=1920x1338\" alt=\"图片\"></p><h2>iam-apiserver中的CURD操作实战</h2><p>接下来，我来介绍下iam-apiserver是如何使用GORM，对数据进行CURD操作的。</p><p><strong>首先，</strong>我们需要配置连接MySQL的各类参数。iam-apiserver通过<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/pkg/options/mysql_options.go#L29\">NewMySQLOptions</a>函数创建了一个带有默认值的<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/pkg/options/mysql_options.go#L17\">MySQLOptions</a>类型的变量，将该变量传给<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/pkg/app/app.go#L157\">NewApp</a>函数。在App框架中，最终会调用MySQLOptions提供的AddFlags方法，将MySQLOptions提供的命令行参数添加到Cobra命令行中。</p><p><strong>接着，</strong>在<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/server.go#L81\">PrepareRun</a>函数中，调用<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/store/mysql/mysql.go#L55\">GetMySQLFactoryOr</a>函数，初始化并获取仓库层的实例<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/store/mysql/mysql.go#L50\">mysqlFactory</a>。实现了仓库层<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/store/store.go#L12\">store.Factory</a>接口：</p><pre><code class=\"language-go\">type Factory interface {\n    Users() UserStore\n    Secrets() SecretStore\n    Policies() PolicyStore\n    Close() error\n}\n</code></pre><p>GetMySQLFactoryOr函数采用了我们在 <a href=\"https://time.geekbang.org/column/article/386238\">11讲</a> 中提过的单例模式，确保iam-apiserver进程中只有一个仓库层的实例，这样可以减少内存开支和系统的性能开销。</p><p>GetMySQLFactoryOr函数中，使用<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/pkg/db/mysql.go#L30\">github.com/marmotedu/iam/pkg/db</a>包提供的New函数，创建了MySQL实例。New函数代码如下：</p><pre><code class=\"language-go\">func New(opts *Options) (*gorm.DB, error) {&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; dsn := fmt.Sprintf(`%s:%s@tcp(%s)/%s?charset=utf8&amp;parseTime=%t&amp;loc=%s`,&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; opts.Username,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; opts.Password,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; opts.Host,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; opts.Database,&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; true,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; \"Local\")&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config{&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; Logger: logger.New(opts.LogLevel),&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; })&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; if err != nil {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; return nil, err&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; }&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; sqlDB, err := db.DB()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; if err != nil {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; return nil, err&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; }&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // SetMaxOpenConns sets the maximum number of open connections to the database.\n&nbsp; &nbsp; sqlDB.SetMaxOpenConns(opts.MaxOpenConnections)\n\n&nbsp; &nbsp; // SetConnMaxLifetime sets the maximum amount of time a connection may be reused.\n&nbsp; &nbsp; sqlDB.SetConnMaxLifetime(opts.MaxConnectionLifeTime)\n\n&nbsp; &nbsp; // SetMaxIdleConns sets the maximum number of connections in the idle connection pool.\n&nbsp; &nbsp; sqlDB.SetMaxIdleConns(opts.MaxIdleConnections)\n\n&nbsp; &nbsp; return db, nil\n}\n</code></pre><p>上述代码中，我们先创建了一个 <code>*gorm.DB</code> 类型的实例，并对该实例进行了如下设置：</p><ul>\n<li>通过SetMaxOpenConns方法，设置了MySQL的最大连接数（推荐100）。</li>\n<li>通过SetConnMaxLifetime方法，设置了MySQL的空闲连接最大存活时间（推荐10s）。</li>\n<li>通过SetMaxIdleConns方法，设置了MySQL的最大空闲连接数（推荐100）。</li>\n</ul><p>GetMySQLFactoryOr函数最后创建了datastore类型的变量mysqlFactory，该变量是仓库层的变量。mysqlFactory变量中，又包含了 <code>*gorm.DB</code> 类型的字段 <code>db</code> 。</p><p><strong>最终</strong><strong>，</strong>我们通过仓库层的变量mysqlFactory，调用其 <code>db</code> 字段提供的方法来完成数据库的CURD操作。例如，创建密钥、更新密钥、删除密钥、获取密钥详情、查询密钥列表，具体代码如下（代码位于<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/store/mysql/secret.go\">secret.go</a>文件中）：</p><pre><code class=\"language-go\">// Create creates a new secret.\nfunc (s *secrets) Create(ctx context.Context, secret *v1.Secret, opts metav1.CreateOptions) error {\n\treturn s.db.Create(&amp;secret).Error\n}\n\n// Update updates an secret information by the secret identifier.\nfunc (s *secrets) Update(ctx context.Context, secret *v1.Secret, opts metav1.UpdateOptions) error {\n\treturn s.db.Save(secret).Error\n}\n\n// Delete deletes the secret by the secret identifier.\nfunc (s *secrets) Delete(ctx context.Context, username, name string, opts metav1.DeleteOptions) error {\n\tif opts.Unscoped {\n\t\ts.db = s.db.Unscoped()\n\t}\n\n\terr := s.db.Where(\"username = ? and name = ?\", username, name).Delete(&amp;v1.Secret{}).Error\n\tif err != nil &amp;&amp; !errors.Is(err, gorm.ErrRecordNotFound) {\n\t\treturn errors.WithCode(code.ErrDatabase, err.Error())\n\t}\n\n\treturn nil\n}\n\n// Get return an secret by the secret identifier.\nfunc (s *secrets) Get(ctx context.Context, username, name string, opts metav1.GetOptions) (*v1.Secret, error) {\n\tsecret := &amp;v1.Secret{}\n\terr := s.db.Where(\"username = ? and name= ?\", username, name).First(&amp;secret).Error\n\tif err != nil {\n\t\tif errors.Is(err, gorm.ErrRecordNotFound) {\n\t\t\treturn nil, errors.WithCode(code.ErrSecretNotFound, err.Error())\n\t\t}\n\n\t\treturn nil, errors.WithCode(code.ErrDatabase, err.Error())\n\t}\n\n\treturn secret, nil\n}\n\n// List return all secrets.\nfunc (s *secrets) List(ctx context.Context, username string, opts metav1.ListOptions) (*v1.SecretList, error) {\n\tret := &amp;v1.SecretList{}\n\tol := gormutil.Unpointer(opts.Offset, opts.Limit)\n\n\tif username != \"\" {\n\t\ts.db = s.db.Where(\"username = ?\", username)\n\t}\n\n\tselector, _ := fields.ParseSelector(opts.FieldSelector)\n\tname, _ := selector.RequiresExactMatch(\"name\")\n\n\td := s.db.Where(\" name like ?\", \"%\"+name+\"%\").\n\t\tOffset(ol.Offset).\n\t\tLimit(ol.Limit).\n\t\tOrder(\"id desc\").\n\t\tFind(&amp;ret.Items).\n\t\tOffset(-1).\n\t\tLimit(-1).\n\t\tCount(&amp;ret.TotalCount)\n\n\treturn ret, d.Error\n}\n</code></pre><p>上面的代码中， <code>s.db</code> 就是 <code>*gorm.DB</code> 类型的字段。</p><p>上面的代码段执行了以下操作：</p><ul>\n<li>通过 <code>s.db.Save</code> 来更新数据库表的各字段；</li>\n<li>通过 <code>s.db.Unscoped</code> 来永久性从表中删除一行记录。对于支持软删除的资源，我们还可以通过 <code>opts.Unscoped</code> 选项来控制是否永久删除记录。 <code>true</code> 永久删除， <code>false</code> 软删除，默认软删除。</li>\n<li>通过 <code>errors.Is(err, gorm.ErrRecordNotFound)</code> 来判断GORM返回的错误是否是没有找到记录的错误类型。</li>\n<li>通过下面两行代码，来获取查询条件name的值：</li>\n</ul><pre><code class=\"language-go\">selector, _ := fields.ParseSelector(opts.FieldSelector)&nbsp; &nbsp;&nbsp;\nname, _ := selector.RequiresExactMatch(\"name\")\n</code></pre><p>我们的整个调用链是：控制层 -&gt; 业务层 -&gt; 仓库层。这里你可能要问：<strong>我们<strong><strong>是</strong></strong>如何<strong><strong>调用</strong></strong>到<strong><strong>仓库层的</strong></strong>实例mysqlFactory<strong><strong>的</strong></strong>呢？</strong></p><p>这是因为我们的控制层实例包含了业务层的实例。在创建控制层实例时，我们传入了业务层的实例：</p><pre><code class=\"language-go\">type UserController struct {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; srv srvv1.Service&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n// NewUserController creates a user handler.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\nfunc NewUserController(store store.Factory) *UserController {\n&nbsp; &nbsp; return &amp;UserController{&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; srv: srvv1.NewService(store),&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; }&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n}&nbsp;\n</code></pre><p>业务层的实例包含了仓库层的实例。在创建业务层实例时，传入了仓库层的实例：</p><pre><code class=\"language-go\">type service struct {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; store store.Factory&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n// NewService returns Service interface.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\nfunc NewService(store store.Factory) Service {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; return &amp;service{&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; store: store,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; }\n}\n</code></pre><p>通过这种包含关系，我们在控制层可以调用业务层的实例，在业务层又可以调用仓库层的实例。这样，我们最终通过仓库层实例的 <code>db</code> 字段（<code>*gorm.DB</code> 类型）完成数据库的CURD操作。</p><h2>总结</h2><p>在Go项目中，我们需要使用ORM来进行数据库的CURD操作。在Go生态中，当前最受欢迎的ORM是GORM，IAM项目也使用了GORM。GORM有很多功能，常用的功能有模型定义、连接数据库、创建记录、删除记录、更新记录和查询数据。这些常用功能的常见使用方式如下：</p><pre><code class=\"language-go\">package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/spf13/pflag\"\n\t\"gorm.io/driver/mysql\"\n\t\"gorm.io/gorm\"\n)\n\ntype Product struct {\n\tgorm.Model\n\tCode&nbsp; string `gorm:\"column:code\"`\n\tPrice uint&nbsp; &nbsp;`gorm:\"column:price\"`\n}\n\n// TableName maps to mysql table name.\nfunc (p *Product) TableName() string {\n\treturn \"product\"\n}\n\nvar (\n\thost&nbsp; &nbsp; &nbsp;= pflag.StringP(\"host\", \"H\", \"127.0.0.1:3306\", \"MySQL service host address\")\n\tusername = pflag.StringP(\"username\", \"u\", \"root\", \"Username for access to mysql service\")\n\tpassword = pflag.StringP(\"password\", \"p\", \"root\", \"Password for access to mysql, should be used pair with password\")\n\tdatabase = pflag.StringP(\"database\", \"d\", \"test\", \"Database name to use\")\n\thelp&nbsp; &nbsp; &nbsp;= pflag.BoolP(\"help\", \"h\", false, \"Print this help message\")\n)\n\nfunc main() {\n\t// Parse command line flags\n\tpflag.CommandLine.SortFlags = false\n\tpflag.Usage = func() {\n\t\tpflag.PrintDefaults()\n\t}\n\tpflag.Parse()\n\tif *help {\n\t\tpflag.Usage()\n\t\treturn\n\t}\n\n\tdsn := fmt.Sprintf(`%s:%s@tcp(%s)/%s?charset=utf8&amp;parseTime=%t&amp;loc=%s`,\n\t\t*username,\n\t\t*password,\n\t\t*host,\n\t\t*database,\n\t\ttrue,\n\t\t\"Local\")\n\tdb, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config{})\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\n\t// 1. Auto migration for given models\n\tdb.AutoMigrate(&amp;Product{})\n\n\t// 2. Insert the value into database\n\tif err := db.Create(&amp;Product{Code: \"D42\", Price: 100}).Error; err != nil {\n\t\tlog.Fatalf(\"Create error: %v\", err)\n\t}\n\tPrintProducts(db)\n\n\t// 3. Find first record that match given conditions\n\tproduct := &amp;Product{}\n\tif err := db.Where(\"code= ?\", \"D42\").First(&amp;product).Error; err != nil {\n\t\tlog.Fatalf(\"Get product error: %v\", err)\n\t}\n\n\t// 4. Update value in database, if the value doesn't have primary key, will insert it\n\tproduct.Price = 200\n\tif err := db.Save(product).Error; err != nil {\n\t\tlog.Fatalf(\"Update product error: %v\", err)\n\t}\n\tPrintProducts(db)\n\n\t// 5. Delete value match given conditions\n\tif err := db.Where(\"code = ?\", \"D42\").Delete(&amp;Product{}).Error; err != nil {\n\t\tlog.Fatalf(\"Delete product error: %v\", err)\n\t}\n\tPrintProducts(db)\n}\n\n// List products\nfunc PrintProducts(db *gorm.DB) {\n\tproducts := make([]*Product, 0)\n\tvar count int64\n\td := db.Where(\"code like ?\", \"%D%\").Offset(0).Limit(2).Order(\"id desc\").Find(&amp;products).Offset(-1).Limit(-1).Count(&amp;count)\n\tif d.Error != nil {\n\t\tlog.Fatalf(\"List products error: %v\", d.Error)\n\t}\n\n\tlog.Printf(\"totalcount: %d\", count)\n\tfor _, product := range products {\n\t\tlog.Printf(\"\\tcode: %s, price: %d\\n\", product.Code, product.Price)\n\t}\n}\n</code></pre><p>此外，GORM还支持原生查询SQL和原生执行SQL，可以满足更加复杂的SQL场景。</p><p>GORM中，还有一个非常有用的功能是支持Hooks。Hooks可以在执行某个CURD操作前被调用。在Hook中，可以添加一些非常有用的功能，例如生成唯一ID。目前，GORM支持 <code>BeforeXXX</code> 、 <code>AfterXXX</code> 和 <code>AfterFind</code> Hook，其中 <code>XXX</code> 可以是 Save、Create、Delete、Update。</p><p>最后，我还介绍了IAM项目的GORM实战，具体使用方式跟总结中的示例代码大体保持一致，你可以返回文稿查看。</p><h2>课后练习</h2><ol>\n<li>GORM支持AutoMigrate功能，思考下，你的生产环境是否可以使用AutoMigrate功能，为什么？</li>\n<li>查看<a href=\"https://gorm.io/zh_CN/docs/index.html\">GORM官方文档</a>，看下如何用GORM实现事务回滚功能。</li>\n</ol><p>欢迎你在留言区与我交流讨论，我们下一讲见。</p>","neighbors":{"left":{"article_title":"29｜控制流（下）：iam-apiserver服务核心功能实现讲解","id":402206},"right":{"article_title":"31 | 数据流：通过iam-authz-server设计，看数据流服务的设计","id":404542}},"comments":[]}