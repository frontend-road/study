{"id":13051,"title":"17 | 容器镜像构建的那些事儿","content":"<p>随着容器发布越来越流行，持续交付最后一公里的产物，逐渐由之前的代码包变成了容器镜像。然而，容器镜像构建与传统的代码构建有很多不同之处，也增加了很多新鲜的技术领域和内容需要我们去学习。</p>\n<p>所以，今天我们就一起来聊聊容器镜像构建的那些事儿，打通容器镜像构建的各个环节。</p>\n<h2>什么是容器镜像？</h2>\n<p>在虚拟机时代就有镜像的说法，当我们创建一个虚拟机时，通常会去网上下载一个ISO格式的虚拟机镜像，然后经过 VirtualBox 或者 VMware 加载，最终形成一个包含完整操作系统的虚拟机实例。</p>\n<p>而容器镜像也是类似的意思，只不过它不像虚拟机镜像那么庞大和完整，它是一个只读的模板，一个独立的文件系统，包含了容器运行初始化时所需要的数据和软件，可以重复创建出多个一模一样的容器。</p>\n<p>容器镜像可以是一个完整的 Ubuntu 系统，也可以是一个仅仅能运行一个 sleep 进程的独立环境，大到几 G 小到几 M。而且Docker 的镜像是分层的，它由一层一层的文件系统组成，这种层级的文件系统被称为 UnionFS。下图就是一个 Ubuntu 15.04 的镜像结构。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/97/0f/97c622c247ef510b06fee1aff4ec890f.jpg?wh=675*469\" alt=\"\" /></p>\n<center>引用自<a href=\"https://docs.docker.com/v17.09/engine/userguide/storagedriver/images/container-layers.jpg\"> docker docs：images and layers</a></center>\n<p>图中的镜像部分画了一个锁的标记，它表示镜像中的每一层都是只读的，只有创建容器时才会在最上层添加一个叫作Container layer的可写层。容器运行后的所有修改都是在这个可写层进行，而不会影响容器镜像本身。</p><!-- [[[read_end]]] -->\n<p>因为这一特性，创建容器非常节省空间，因为一台宿主机上基于同一镜像创建的容器只有这一份镜像文件系统，每次创建多出来的只是每个容器与镜像 diff 的磁盘空间。而虚拟机每增加一个实例，都会在宿主机上占用一个完整的镜像磁盘空间。</p>\n<h2>什么是 Dockerfile</h2>\n<p>了解了什么是容器的镜像，以及与虚拟机镜像的区别后，可以清楚地看到：容器都是基于镜像产生的，没有镜像就没有容器。那么，我们应该怎么创建一个镜像呢？</p>\n<p><a href=\"https://hub.docker.com/\">Docker Hub</a>上提供了非常多的常用镜像，比如 Ubuntu 镜像，CentOS 镜像，或者仅仅是一个包含 Java 程序的镜像，你可以通过 docker pull 命令把它们下载到本地使用。当然你也可以自己在本地通过docker build 制作镜像。</p>\n<p>如果你想要修改或者加工这些镜像，可以找到文件系统中对应的 layer 目录，然后进行修改。按照这种方式操作的话，如果我要添加一个文件还好说，但如果要安装一个软件，那就要拷贝一堆文件到各个目录中，相当麻烦。</p>\n<p>如果真要这样操作的话，容器镜像也就不会有今天如此庞大的用户群体了。Docker帮我们解决这个问题的方式，就是提供了Dockerfile。</p>\n<p>简单来说，<strong>Dockerfile 第一个好处就是，可以通过文本格式的配置文件描述镜像，这个配置文件里面可以运行功能丰富的指令，你可以通过运行 docker build 将这些指令转化为镜像。</strong></p>\n<p>比如，我要更改 Ubuntu 镜像安装一个 Vim 编辑器，那么我的 Dockerfile 可以这样写：</p>\n<pre><code>FROM ubuntu\n\nRUN apt-get install vim -y\n</code></pre>\n<p>其中，FROM 指令说明我们这个镜像需要继承 Ubuntu 镜像，RUN 指令是需要在镜像内运行的命令。</p>\n<p>因为 Ubuntu 镜像内包含了 apt-get 包管理器，所以相当于启动了一个 Ubuntu 镜像的容器，然后在这个容器内部安装 Vim。这期间会产生一个新的 layer，这个新的 layer 包含安装 Vim 所需的所有文件。</p>\n<p>运行docker build 后会产生一个新镜像，我们可以通过 docker tag 给这个新镜像起一个名字，然后 docker push 到仓库，就可以从仓库下载这个镜像了，后续的其他镜像也可以继承这个镜像进行其他改动。</p>\n<p>镜像就是这样通过 Dockerfile 一层一层的继承，不断增加新的内容，直到变成你想要的样子。</p>\n<p><strong>Dockerfile 的另外一个好处就是可以描述镜像的变化</strong>，通过一行命令就可以直观描述出环境变更的过程，如果再通过 git 进行版本控制，就可以让环境的管理更加可靠与简单。</p>\n<p>了解了Dockerfile之后，你就可以利用它进行代码更新了，最主要的步骤就以下三步：</p>\n<ol>\n<li>\n<p>将代码包下载到构建服务器；</p>\n</li>\n<li>\n<p>通过Dockerfile 的 ADD 命令将代码包加载到容器里；</p>\n</li>\n<li>\n<p>Docker build 完成新的镜像。</p>\n</li>\n</ol>\n<h2>镜像构建优化</h2>\n<p>原则上，我们总是希望能够让镜像保持小巧、精致，这样可以让镜像环境更加清晰，不用占用过多空间，下载也会更快。</p>\n<p>那么，如何做好镜像的优化呢？你可以从3个方面入手：</p>\n<ol>\n<li>\n<p><strong>选择合适的 Base 镜像；</strong></p>\n</li>\n<li>\n<p><strong>减少不必要的镜像层的产生；</strong></p>\n</li>\n<li>\n<p><strong>充分利用指令的缓存。</strong></p>\n</li>\n</ol>\n<p><strong>为什么第一条说要选择合适的Base镜像呢？因为，这是最直接和有效的方式。</strong></p>\n<p>举个例子就更好理解了。比如，我只想运行一个 Java 进程，那么镜像里就只有这个 Java 进程所需的环境就可以了，而没必要使用一个完整 Ubuntu 或者 CentOS 镜像。</p>\n<p><strong>关于第二点，减少不必要的镜像层，是因为使用 Dockerfile 时，每一条指令都会创建一个镜像层，继而会增加整体镜像的大小。</strong></p>\n<p>比如，下面这个 Dockerfile：</p>\n<pre><code>FROM ubuntu\n\nRUN apt-get install vim -y\n\nRUN apt-get remove vim -y\n</code></pre>\n<p>虽然这个操作创建的镜像中没有安装 Vim，但是镜像的大小和有 Vim是一样的。原因就是，每条指令都会新加一个镜像层，执行install vim 后添加了一层，执行remove vim 后也会添加一层，而这一删除命令并不会减少整个镜像的大小。</p>\n<p>因此，当我们编写 Dockerfile 时，可以合并多个 RUN 指令，减少不必要的镜像层的产生，并且在之后将多余的命令清理干净，只保留运行时需要的依赖。就好比我买了两斤橘子，只需要把橘子肉保留下来就好，橘子皮可以直接丢掉，不用保留在房间里。</p>\n<p><strong>Dockerfile 构建的另外一个重要特性是指令可以缓存，可以极大地缩短构建时间。</strong> 因为之前也说了，每一个RUN都会产生一个镜像，而Docker在默认构建时，会优先选择这些缓存的镜像，而非重新构建一层镜像。比如，一开始我的 Dockerfile 如下：</p>\n<pre><code>FROM ubuntu\n\nRUN apt-get install vim -y\n</code></pre>\n<p>使用一段时间之后，我发现需要添加新的特性，Dockerfile 变成了如下的样子：</p>\n<pre><code>FROM ubuntu\n\nRUN apt-get install vim -y\n\nADD java /usr/local/java\n</code></pre>\n<p>重新 build 时，前面安装 Vim 那步可以使用缓存，而不需要重新运行。当我们需要构建一个新镜像时，这个特性非常有用，可以快速跳过前面构建通过的步骤，而不需要每次都重新构建，尤其适用于在 Docker 里面编译一些大型软件的情况，可以帮你节省大量时间。</p>\n<h2>镜像构建环境</h2>\n<p>当我们学会了使用 Dockerfile 构建镜像之后，下一步就是如何搭建构建环境了。搭建构建环境最简单的方式就是在虚拟机上安装 Docker Daemon，然后根据你所使用的语言提供的 Docker 客户端与 Docker Daemon 进行交互，完成构建。</p>\n<p>但是，我们推崇构建环境容器化，因为我们的构建环境可能除了 Docker 外，还会有一些其他的依赖，比如编程语言、Git 等等。</p>\n<p>上面我也分析了Docker 镜像的各种好处，那如果环境还没有实现容器化，是不是就有点说不过去了？</p>\n<p>接下来，我们就看看构建环境如何实现容器化。一般情况下，用容器来构建容器镜像有两种方式：</p>\n<ol>\n<li>\n<p>Docker Out Of Docker（DooD）</p>\n</li>\n<li>\n<p>Docker In Docker（DinD）</p>\n</li>\n</ol>\n<p><strong>第一，Docker Out Of Docker（DooD）</strong></p>\n<p>这种方式比较简单，首先在虚拟机上安装 Docker Daemon，然后将你的构建环境镜像下载下来启动一个容器。</p>\n<p>在默认情况下，Docker 客户端都是通过 /var/run/docker.sock 与 Docker Daemon 进行通信。我们在创建 Docker 实例时，把外部的 /var/run/docker.sock mount 到容器内部，这样容器内的 Docker 客户端就可以与外部的 Docker Daemon 进行通信了。</p>\n<p>另外，你还需要注意权限问题，容器内部的构建进程必须拥有读取 /var/run/docker.sock 的权限，才可以完成通信过程。</p>\n<p>这种方式的好处很明显，我们可以将镜像构建环境打包复用，对宿主机来说，只要安装 Docker Daemon 就可以了。但是这种方式的缺点是，内部的环境必须要与外部保持一致，不然就会报错，比如缺少库文件。此外，如果构建容器时不小心把 Docker Daemon 搞挂了，那么就会影响该宿主机上的其他容器。</p>\n<p>为了解决这个问题，我们是否可以在容器内部使用 Docker Daemon 呢？</p>\n<p><strong>第二，Docker In Docker（DinD）</strong></p>\n<p>Docker In Docker ，就是在容器内部启动一个完整的 Docker Daemon 进程，然后构建工具只需要和该进程交互，而不影响外部的 Docker 进程。</p>\n<p>默认情况下，容器内部不允许开启 Docker Daemon 进程，必须在运行容器的时候加上 --privileged 参数，这个参数的作用是真正取得root的权限。另外，Docker 社区官方提供了一个 docker:dind 镜像可以直接拿来使用。</p>\n<p>这样一来，容器内部 Docker Daemon 就和容器外部的 Docker Daemon 彻底分开了，容器内部就是一个完整的镜像构建环境，是不是很神奇。</p>\n<p>然而 DinD 也不是百分之百的完美和健壮，它也有一些关于安全和文件系统的问题。此外，因为每个容器都有独立的 /var/lib/docker 用来保存镜像文件，一旦容器被重启了，这些镜像缓存就消失了，这可能会影响我们构建镜像的性能。</p>\n<p>通过以上两个方法，你就可以做到用容器来构建容器镜像了。</p>\n<h2>总结</h2>\n<p>今天，我针对容器镜像构建的那些事儿，和你进行了讨论。</p>\n<p>首先，容器镜像是一个独立的文件系统，它包含了容器运行初始化时所需要的数据或软件。Docker容器的文件系统是分层的、只读的，每次创建容器时只要在最上层添加一个叫作Container layer的可写层就可以了。这种创建方式不同于虚拟机，可以极大的减少对磁盘空间的占用。</p>\n<p>其次，Docker提供了Dockerfile这个可以描述镜像的文本格式的配置文件。你可以在Dockerfile中运行功能丰富的指令，并可以通过docker build 将这些指令转化为镜像。</p>\n<p>再次，基于Dockerfile的特性，我分享了Dockerfile 镜像构建优化的三个建议，包括：选择合适的Base镜像、减少不必要的镜像层产生，以及善用构建缓存。</p>\n<p>最后，用容器来构建容器镜像，主要有DooD 和 DinD 两种方案。这两种方案，各有优劣，你可以根据自身情况去选择。</p>\n<h2>思考题</h2>\n<ol>\n<li>\n<p>除了上述的 DooD 和 DinD 之外，你还知道哪些其他的Docker构建方案吗？它们分别有什么特点？</p>\n</li>\n<li>\n<p>Docker构建的缓存机制的基本规则是怎样的，如果ADD或COPY命令后是不同的文件，缓存机制会怎么处理？</p>\n</li>\n</ol>\n<p>欢迎你给我留言。<br />\n</p>\n","comments":[{"had_liked":false,"id":23825,"user_name":"knightray","can_delete":false,"product_type":"c1","uid":1144549,"ip_address":"","ucode":"F2A6226C28E339","user_header":"https://static001.geekbang.org/account/avatar/00/11/76/e5/ed6da22e.jpg","comment_is_top":false,"comment_ctime":1536674689,"is_pvip":false,"replies":[{"id":"8772","content":"其实不会增加很多时间的，文章中也解释了，docker的原理是分层的文件系统。一般我们是在基础镜像之上做的发布镜像。下载也是下载的差异那层。差异那部分就是代码和一些配置，以java来说最多百兆吧，携程应用的镜像时间最多的也就分钟内吧","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1536739126,"ip_address":"","comment_id":23825,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18716543873","product_id":100009701,"comment_content":"请教一个问题。如果使用Jenkins pipeline + Docker的方式，这是否意味着每次测试环境的构建都需要生成镜像？如果是传统的构建方式，只需要编译生成jar&#47;war包就可以了，现在加上生成镜像这一步，构建耗时增加了不少。请问这有没有更好的解决办法？","like_count":4,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423747,"discussion_content":"其实不会增加很多时间的，文章中也解释了，docker的原理是分层的文件系统。一般我们是在基础镜像之上做的发布镜像。下载也是下载的差异那层。差异那部分就是代码和一些配置，以java来说最多百兆吧，携程应用的镜像时间最多的也就分钟内吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536739126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19823,"user_name":"暴风","can_delete":false,"product_type":"c1","uid":1131142,"ip_address":"","ucode":"6AA295151C4B70","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/86/98f18630.jpg","comment_is_top":false,"comment_ctime":1534113923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18713983107","product_id":100009701,"comment_content":"之前说错了，不是kibana，是kaniko。这俩名字容易搞混","like_count":4},{"had_liked":false,"id":293144,"user_name":"箫潇","can_delete":false,"product_type":"c1","uid":1562666,"ip_address":"","ucode":"45FA3945618DF5","user_header":"https://static001.geekbang.org/account/avatar/00/17/d8/2a/54c6b953.jpg","comment_is_top":false,"comment_ctime":1621242486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621242486","product_id":100009701,"comment_content":"2. ADD 命令与 COPY 命令：Dockerfile 没有发生任何改变，但是命令ADD run.sh &#47; 中 Dockerfile 当前目录下的 run.sh 却发生了变化，从而将直接导致镜像层文件系统内容的更新，原则上不应该再使用 cache。那么，判断 ADD 命令或者 COPY 命令后紧接的文件是否发生变化，则成为是否延用 cache 的重要依据。Docker 采取的策略是：获取 Dockerfile 下内容（包括文件的部分 inode 信息），计算出一个唯一的 hash 值，若 hash 值未发生变化，则可以认为文件内容没有发生变化，可以使用 cache 机制；反之亦然。","like_count":0},{"had_liked":false,"id":192522,"user_name":"戴斌","can_delete":false,"product_type":"c1","uid":1119385,"ip_address":"","ucode":"7DC53BEA432217","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/99/5b1ed92b.jpg","comment_is_top":false,"comment_ctime":1584857078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584857078","product_id":100009701,"comment_content":"Docker镜像的版本效果适合后续的维护，减少系统配置、系统环境依赖等无版本控制的风险","like_count":0},{"had_liked":false,"id":19721,"user_name":"暴风","can_delete":false,"product_type":"c1","uid":1131142,"ip_address":"","ucode":"6AA295151C4B70","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/86/98f18630.jpg","comment_is_top":false,"comment_ctime":1533995634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533995634","product_id":100009701,"comment_content":"对于第一个问题，还可以用谷歌出的kibana","like_count":0}]}