{"id":7045,"title":"60 | 性能设计篇之“数据库扩展”","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p>\n<h1>读写分离 CQRS</h1>\n<p>读写分离是数据库扩展最简单实用的玩法了，这种方法针对读多写少的业务场景还是很管用的，而且还可以有效地把业务做相应的隔离。</p>\n<p>如下图所示，数据库只有一个写库，有两个读库，所有的服务都写一个数据库。对于读操作来说，服务A和服务B走从库A，服务D和服务E走从库B，服务C在从库A和从库B间做轮询。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/27/a7/27ece98f96d18b6197f2184eb2c9c9a7.jpg?wh=1740x936\" alt=\"\" /></p>\n<p>这样的方法好处是：</p>\n<ul>\n<li>比较容易实现。数据库的master-slave的配置和服务框架里的读写分离都比较成熟，应用起来也很快。</li>\n<li>可以很好地把各个业务隔离开来。不会因为一个业务把数据库拖死而导致所有的业务都死掉。</li>\n<li>可以很好地分担数据库的读负载，毕竟读操作是最耗数据库CPU的操作。</li>\n</ul>\n<p>这样的方法不好的地方是：</p>\n<ul>\n<li>写库有单点故障问题。如果是写库出了性能问题，那么所有的业务一样不可用。对于交易型的业务，要得到高的写操作速度，这样的方式不行。</li>\n<li>数据库同步不实时，需要强一致性的读写操作还是需要落在写库上。</li>\n</ul>\n<p>综上所述，一般来说，这样的玩法主要是为了减少读操作的压力。</p>\n<!-- [[[read_end]]] -->\n<p>当然，这样的读写分离看上去有点差强人意，那么，我们还是为之找一个更靠谱的设计——CQRS。关于CQRS，我在这里只做一个简单的介绍，更多的细节你可以上网自行Google。</p>\n<p>CQRS全称Command and Query Responsibility Segregation，也就是命令与查询职责分离。其原理是，用户对于一个应用的操作可以分成两种，一种是Command也就是我们的写操作（增，删，改），另一种是Query操作（查），也就是读操作。Query操作基本上是在做数据整合显现，而Command操作这边会有更重的业务逻辑。分离开这两种操作可以在语义上做好区分。</p>\n<ul>\n<li>命令Command不会返回结果数据，只会返回执行状态，但会改变数据。</li>\n<li>查询Query会返回结果数据，但是不会改变数据，对系统没有副作用。</li>\n</ul>\n<p>这样一来，可以带来一些好处。</p>\n<ul>\n<li>\n<p>分工明确，可以负责不同的部分。</p>\n</li>\n<li>\n<p>将业务上的命令和查询的职责分离，能够提高系统的性能、可扩展性和安全性。并且在系统的演化中能够保持高度的灵活性，能够防止出现CRUD模式中，对查询或者修改中的某一方进行改动，导致另一方出现问题的情况。</p>\n</li>\n<li>\n<p>逻辑清晰，能够看到系统中的哪些行为或者操作导致了系统的状态变化。</p>\n</li>\n<li>\n<p>可以从数据驱动（Data-Driven）转到任务驱动（Task-Driven）以及事件驱动。</p>\n</li>\n</ul>\n<p>如果把Command操作变成Event Sourcing，那么只需要记录不可修改的事件，并通过回溯事件得到数据的状态。于是，我们可以把写操作给完全简化掉，也变成无状态的，这样可以大幅度降低整个系统的副作用，并可以得到更大的并发和性能。</p>\n<p>文本中有Event Sourcing和CQRS的架构示意图。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/ce/87/ceeb536d0fa15afa4f5fde0b2cbe7787.png?wh=831*339\" alt=\"\" /></p>\n<p>图片来源 - <a href=\"https://www.slideshare.net/planetcassandra/codecentric-ag-cqrs-and-event-sourcing-applications-with-cassandra\">CQRS and Event Sourcing Application with Cassandra</a></p>\n<h1>分库分表Sharding</h1>\n<p>一般来说，影响数据库最大的性能问题有两个，一个是对数据库的操作，一个是数据库中数据的大小。</p>\n<p>对于前者，我们需要从业务上来优化。一方面，简化业务，不要在数据库上做太多的关联查询，而对于一些更为复杂的用于做报表或是搜索的数据库操作，应该把其移到更适合的地方。比如，用ElasticSearch来做查询，用Hadoop或别的数据分析软件来做报表分析。</p>\n<p>对于后者，如果数据库里的数据越来越多，那么也会影响我们的数据操作。而且，对于我们的分布式系统来说，后端服务都可以做成分布式的，而数据库最好也是可以拆开成分布式的。读写分离也因为数据库里的数据太多而变慢，于是，分库分表就成了我们必须用的手段。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/a4/16/a457b93e2b76e41fec4fdac4b7e11616.jpg?wh=1506x1026\" alt=\"\" /></p>\n<p>上面的图片是一个分库的示例。其中有两个事，这里需要提一下，一个是关于分库的策略，一个是关于数据访问层的中间件。</p>\n<p><strong>关于分库的策略</strong>。我们把数据库按某种规则分成了三个库。比如，或是按地理位置，或是按日期，或是按某个范围分，或是按一种哈希散列算法。总之，我们把数据分到了三个库中。</p>\n<p><strong>关于数据访问层</strong>。为了不让我们前面的服务感知到数据库的变化，我们需要引入一个叫&quot;数据访问层&quot;的中间件，用来做数据路由。但是，老实说，这个数据访问层的中间件很不好写，其中要有解析SQL语句的能力，还要根据解析好的SQL语句来做路由。但即便是这样，也有很多麻烦事。</p>\n<p>比如，我要做一个分页功能，需要读一组顺序的数据，或是需要做Max/Min/Count这样的操作。于是，你要到三个库中分别求值，然后在数据访问层这里再合计处理返回。但即使是这样，你也会遇到各种令人烦恼的事，比如一个跨库的事务，你需要走XA这样的两阶段提交的操作，这样会把数据库的性能降到最低的。</p>\n<p>为了避免数据访问层的麻烦，分片策略一般如下。</p>\n<ul>\n<li>\n<p>按多租户的方式。用租户ID来分，这样可以把租户隔离开来。比如：一个电商平台的商家中心可以按商家的ID来分。</p>\n</li>\n<li>\n<p>按数据的种类来分。比如，一个电商平台的商品库可以按类目来分，或是商家按地域来分。</p>\n</li>\n<li>\n<p>通过范围来分。这样分片，可以保证在同一分片中的数据是连续的，于是我们数据库操作，比如分页查询会更高效一些。一般来说，大多数情况是用时间来分片的，比如，一个电商平台的订单中心是按月份来分表的，这样可以快速检索和统计一段连续的数据。</p>\n</li>\n<li>\n<p>通过哈希散列算法来分（比如：主键id % 3之类的算法。）此策略的目的是降低形成热点的可能性（接收不成比例的负载的分片）。但是，这会带来两个问题，一个就是前面所说的跨库跨表的查询和事务问题，另一个就是如果要扩容需要重新哈希部分或全部数据。</p>\n</li>\n</ul>\n<p>上面是最常见的分片模式，但是你还应考虑应用程序的业务要求及其数据使用模式。这里请注意几个非常关键的事宜。</p>\n<ol>\n<li>\n<p>数据库分片必须考虑业务，从业务的角度入手，而不是从技术的角度入手，如果你不清楚业务，那么无法做出好的分片策略。</p>\n</li>\n<li>\n<p>请只考虑业务分片。请不要走哈希散列的分片方式，除非有个人拿着刀把你逼到墙角，你马上就有生命危险，你才能走哈希散列的分片方式。</p>\n</li>\n</ol>\n<h1>数据库扩展的设计重点</h1>\n<p>先说明一下，这里没有讲真正数据库引擎的水平扩展的方法，我们只是在业务层上谈了一下数据扩展的两种方法。关于数据库引擎的水平扩展，你可能看一下我之前发过的《分布式数据调度的相关论文》一文中的AWS Aurora和Google Spanner的相关论文中提到的那些方法。</p>\n<p>接下来，我们说一下从业务层上把单体的数据库给拆解掉的相关重点。</p>\n<p>首先，你需要把数据库和应用服务一同拆开。也就是说，一个服务一个库，这就是微服务的玩法，也是Amazon的服务化的玩法——服务之间只能通过服务接口通讯，不能通过访问对方的数据库。在Amazon内，每个服务都会有一个自己的数据库，比如地址库、银行卡库等。这样一来，你的数据库就会被&quot;天生地&quot;给拆成服务化的，而不是一个单体的库。</p>\n<p>我们要知道，在一个单体的库上做读写分离或是做分片都是一件治标不治本的事，真正治本的方法就是要和服务一起拆解。</p>\n<p>当数据库也服务化后，我们才会在这个小的服务数据库上进行读写分离或分片的方式来获得更多的性能和吞吐量。这是整个设计模式的原则——先做服务化拆分，再做分片。</p>\n<p>对于分片来说，有两种分片模式，一种是水平分片，一种是垂直分片。水平分片就是我们之前说的那种分片。而垂直分片是把一张表中的一些字段放到一张表中，另一些字段放到另一张表中。垂直分片主要是把一些经常修改的数据和不经常修改的数据给分离开来，这样在修改某个字段的数据时，不会导致其它字段的数据被锁而影响性能。比如，对于电商系统来说，商品的描述信息不常改，但是商品的库存和价格经常改，所以，可以把描述信息和库存价格分成两张表，这样可以让商品的描述信息的查询更快。</p>\n<p>我们所说的sharding更多的是说水平分片。水平分片需要有以下一些注意事项。</p>\n<ul>\n<li>\n<p>随着数据库中数据的变化，我们有可能需要定期重新平衡分片，以保证均匀分布并降低形成热点的可能性。但是，重新平衡是一项昂贵的操作。 若要减少重新平衡的频率，我们需要通过确保每个分片包含足够的可用空间来处理未来一段时间的变化。另外，我们还需要开发用于快速重新平衡分片的工具和脚本。</p>\n</li>\n<li>\n<p>分片是静态的，而数据的访问则是不可预期的，可能需要经常性地调整我们的分片，这样一来成本太高。所以，我们最好使用一个索引表的方式来进行分片。也就是说，把我们数据的索引动态地记录在一个索引表中。这样一来，我们就可以非常灵活地调度我们的数据了。当数据调度到另一台节点上时，我们只需要去索引表里改一下这个数据的位置就好了。</p>\n</li>\n<li>\n<p>如果程序必须要从多个分片检索数据的查询，则可以使用并行任务从各个分片上提取此数据，然后聚合到单个结果中。 但是，此方法不可避免地会在一定程度上增加解决方案数据访问逻辑的复杂性。</p>\n</li>\n<li>\n<p>数据分片后，我们很难在分片之间保持引用完整性和一致性，也就是所谓的跨分片的事务，因此应尽量减少会影响多个分片中的数据的操作。如果应用程序必须跨分片修改数据，那么我们需要评估一致性以及评估是否采用两阶段提交的方式。</p>\n</li>\n<li>\n<p>配置和管理大量分片可能是一个挑战。在做相应的变更时，一定要先从生产线上拉出数据，然后根据数据计划好新的分片方式，并做好相当的测试工作。否则，这个事出了问题会是一个灾难性的问题。</p>\n</li>\n</ul>\n<h1>小结</h1>\n<p>好了，我们来总结一下今天分享的主要内容。首先，我介绍了单主库多从库的读写分离，并进一步用CQRS把语义区分成命令和查询。命令的执行可以变成事件溯源方式，从而得到更大的并发和性能。随后我讲了分库分表的策略及其数据访问层所做的抽象。最后，我指出了数据库扩展的设计重点。下节课，我们将会聊聊秒杀这个特定的场景，希望对你有帮助。</p>\n<p>也欢迎你在留言区分享一下你的数据库做过哪些形式的扩展？设计中有哪些方面的考量？</p>\n<p>文末给出了《分布式系统设计模式》系列文章的目录，希望你能在这个列表里找到自己感兴趣的内容。</p>\n<ul>\n<li>弹力设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/3912\">认识故障和弹力设计</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3917\">隔离设计Bulkheads</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3926\">异步通讯设计Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4050\">幂等性设计Idempotency</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4086\">服务的状态State</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4087\">补偿事务Compensating Transaction</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4121\">重试设计Retry</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4241\">熔断设计Circuit Breaker</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4245\">限流设计Throttle</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4252\">降级设计degradation</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4253\">弹力设计总结</a></li>\n</ul>\n</li>\n<li>管理设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/5175\">分布式锁Distributed Lock</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5819\">配置中心Configuration Management</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5909\">边车模式Sidecar</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5920\">服务网格Service Mesh</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6086\">网关模式Gateway</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6283\">部署升级策略</a></li>\n</ul>\n</li>\n<li>性能设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/6282\">缓存Cache</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7036\">异步处理Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7045\">数据库扩展</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7047\">秒杀Flash Sales</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7086\">边缘计算Edge Computing</a></li>\n</ul>\n</li>\n</ul>\n","neighbors":{"left":{"article_title":"59 | 性能设计篇之“异步处理”","id":7036},"right":{"article_title":"61 | 性能设计篇之“秒杀”","id":7047}},"comments":[{"had_liked":false,"id":9624,"user_name":"吞枣","can_delete":false,"product_type":"c1","uid":1056466,"ip_address":"","ucode":"87B1291B6E11E7","user_header":"https://static001.geekbang.org/account/avatar/00/10/1e/d2/96301606.jpg","comment_is_top":false,"comment_ctime":1526992734,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"61656534878","product_id":100002201,"comment_content":"感觉分库分表是分布式数据库到来之前的临时方案，另外感觉老外们好像并不怎么会采用分库分表，是这样吗？","like_count":15,"discussions":[{"author":{"id":1325997,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3b/ad/31193b83.jpg","nickname":"孙志强","note":"","ucode":"9C070F1E4EC6FF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581472,"discussion_content":"分布式数据库只是把分库分表要做的事情做好了，不需要用户在做了，本质上也是要分片。而且要使用分布式数据库需要同时具备运维能力，要不然就是灾难","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1658801454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1319157,"avatar":"https://static001.geekbang.org/account/avatar/00/14/20/f5/6cdbfa90.jpg","nickname":"刘匿名","note":"","ucode":"CB4C1DC8C1BB31","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313121,"discussion_content":"肯定也有用，主要是和人口及市场规模有关吧，国内几百万用户都是毛毛雨，欧美几百万用户都是非常知名的应用了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602946748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12435,"user_name":"^o^","can_delete":false,"product_type":"c1","uid":1063857,"ip_address":"","ucode":"8264AF18690076","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/b1/78d8fdff.jpg","comment_is_top":false,"comment_ctime":1528820131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35888558499","product_id":100002201,"comment_content":"一致性哈希","like_count":9},{"had_liked":false,"id":9008,"user_name":"唐稳","can_delete":false,"product_type":"c1","uid":1080853,"ip_address":"","ucode":"DCE325A0802FF2","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/15/dd163405.jpg","comment_is_top":false,"comment_ctime":1526568946,"is_pvip":false,"replies":[{"id":"2940","content":"嗯。另外，仔细想想，强一致性这种场景真的不多。","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1526978206,"ip_address":"","comment_id":9008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35886307314","product_id":100002201,"comment_content":"CQRS应该用在没有事务强一致性要求的场合，才能充分发挥其作用。不过微服务架构似乎更倾向于设计出最终一致性的程序。","like_count":8,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417940,"discussion_content":"嗯。另外，仔细想想，强一致性这种场景真的不多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526978206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8886,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1526516583,"is_pvip":false,"replies":[{"id":"2942","content":"索引表没有业务属性，就是kv，没有join，没有group，所以非常容易用哈希分片","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1526978409,"ip_address":"","comment_id":8886,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31591287655","product_id":100002201,"comment_content":"索引表也越来越多大 需要分片怎么办呢","like_count":8,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417888,"discussion_content":"索引表没有业务属性，就是kv，没有join，没有group，所以非常容易用哈希分片","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526978409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1516600,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/wBjvGCCZmO0Bic0DrnG466y6hwPkibGevAV6E6FPfQEricvw5toL7a2HSgjhI83cCiadrUibIyVibkgbbMOHVxo7HA8Q/132","nickname":"距离30米","note":"","ucode":"5566D9AB9E47DE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589115,"discussion_content":"但是,如果索引表太大,也会造成效率低下,难道又分,陷入死循环.再一个,两次查询性能问题也要考虑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664428372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9251,"user_name":"Geek_22d08b","can_delete":false,"product_type":"c1","uid":1120757,"ip_address":"","ucode":"3812B4113B7B46","user_header":"","comment_is_top":false,"comment_ctime":1526705411,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23001541891","product_id":100002201,"comment_content":"请问如果采用阿里云华为云的话，那么多技术要实现是不是只要购买阿里云他们相应的产品，然后配置下就可以了，就没程序员什么事了？","like_count":5,"discussions":[{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374719,"discussion_content":"有钱可以直接买来用。对比下价格，谁少用谁。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621325529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8905,"user_name":"W_T","can_delete":false,"product_type":"c1","uid":1044071,"ip_address":"","ucode":"1A78F28537E138","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/67/c146c144.jpg","comment_is_top":false,"comment_ctime":1526518900,"is_pvip":false,"replies":[{"id":"2941","content":"业务分片，其实直接就数据分库，服务拆分，走向微服务得了。","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1526978315,"ip_address":"","comment_id":8905,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18706388084","product_id":100002201,"comment_content":"按照哈希散列分片，实现方案最简单，只需要在操作数据库的时候特殊处理就可以了。<br>按照业务分片，为了减少跨分片操作，在请求的前端就需要明确业务字段的值，所以并不是所有场景都适用，这些方案各有利弊。<br>不过有一点我还是赞同的，不到万不得已，不要用哈希散列分片，不然等到以后要重新分片的时候代价巨大。","like_count":4,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417897,"discussion_content":"业务分片，其实直接就数据分库，服务拆分，走向微服务得了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526978315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8896,"user_name":"chaoqiang","can_delete":false,"product_type":"c1","uid":1097788,"ip_address":"","ucode":"CA5891DBDC45E3","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/3c/37aa8945.jpg","comment_is_top":false,"comment_ctime":1526517662,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18706386846","product_id":100002201,"comment_content":"请只考虑业务分片。请不要走哈希散列的分片方式<br>对这句话不太理解，走哈希分片虽然是有跨表查询隐患，后续数据量再次暴涨也需要重新哈希，比较恶心，但也可以解决热点问题，而且互联网公司的用户数据大部分场景下都是有热点的吧，为什么皓叔这么反对呢？实际场景中会遇到什么更痛的点嘛？能否更详细地讲讲呢","like_count":4,"discussions":[{"author":{"id":1153702,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/a6/3bddb98c.jpg","nickname":"大叶枫","note":"","ucode":"224AC5533889AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200812,"discussion_content":"作者的意思是才取业务分片的设计策略更好，而不是通过固定的数据哈希分片。我举个例子，比如说交易的订单数据，一般都是通过用户买家id去做哈希分片的，分库分表。有一天你会发现买家id可能会是卖家，比如说传销模式。这会导致某个单库单表的数据会很大。而替他的很小。如果采取继续哈希数据分片会带来很大运维成本和稳定性风险。所以才用业务策略分片的设计更好，也就是一开始这个买家id就不允许当作数据库的买家id，通过业务建立1:n关系来做映射，不要直接落库。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1583725691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210509,"user_name":"顾海","can_delete":false,"product_type":"c1","uid":1103602,"ip_address":"","ucode":"13F4E0A21975CE","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/f2/0601a60e.jpg","comment_is_top":false,"comment_ctime":1587781194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14472683082","product_id":100002201,"comment_content":"耗哥，关于CQRS有个问题:从架构图上来看，往Query Store中写数据是异步的，并没有解决读写分离方案下的数据非实时同步的问题。如果CQRS不用异步写，那么就是双写了，就会带来分布式事务的问题。<br>关于数据库分片，我的一点想法:1如果机器升级，读写分离，缓存不能解决问题，才考虑分片方案。2是分库还是分表，也要视场景而定。如果只是数据量比较大，但是TPS&#47;QPS不高，一个库能够满足未来预期的业务量增长，可以考虑只做分表，以规避分库带来的分布式事务问题。3分库分表的维度，要视业务场景。我们按一个主维度分库分表之后，由此会导致其他维度的查询问题。通常通过数据异构解决，有两种方式A按所有维度都把数据分库分表，在维度比较多的时候，这会导致数据维护的困难B使用ElasticSearch这种NOSQL数据库，只维护一份数据，但是对于不同维度的查询能够很好支撑。","like_count":4},{"had_liked":false,"id":116821,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1563929761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10153864353","product_id":100002201,"comment_content":"为了提高性能，有两种拆分数据库的方式，一种是读写分离CQRS，另一种是分库分表。<br>读写分离Command and Query Responsibility Separation，保证读服务是无副作用，写操作又可以改进为事件回溯的方式，从而提高系统性能。<br>在拆分数据库前应该先做服务拆分，并保证每个服务都有对应的数据库，不同服务间的库通过服务访问的方式来交换数据。","like_count":2},{"had_liked":false,"id":12653,"user_name":"sipom","can_delete":false,"product_type":"c1","uid":1074197,"ip_address":"","ucode":"80411DC49CFA57","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/15/9c9ca35c.jpg","comment_is_top":false,"comment_ctime":1528946014,"is_pvip":false,"replies":[{"id":"4172","content":"业务层上，只有两阶段提交，数据层上，只有Paxos ","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1528946554,"ip_address":"","comment_id":12653,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10118880606","product_id":100002201,"comment_content":"谢谢耗子老师。 我涉及的业务是金融交易的清算（批处理系统），需要保证主从库的数据强一致性，但mysql复制不能保证强一致性，这种情况怎么做为好呢？是在应用层写双库，做两阶段提交？还是有什么产品可用呢？","like_count":2,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419353,"discussion_content":"业务层上，只有两阶段提交，数据层上，只有Paxos ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528946554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186998,"user_name":"偏偏喜欢你","can_delete":false,"product_type":"c1","uid":1764425,"ip_address":"","ucode":"1E2E357F109F9D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ec/49/410176b8.jpg","comment_is_top":false,"comment_ctime":1583986242,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5878953538","product_id":100002201,"comment_content":"老师，你好，关于仓储这块有个问题，需要指点一下，如果我每个微服务对应一个数据库，这时我的表分散开来，有时会涉及到多个库连表查询的问题，在配置中怎么提现关系，请问老师这块在微服务中应如何处理。<br>1. 如果跨库联查应该在仓储层怎么定义。<br>2. 如果添加本地冗余表，会形成大量表和同步任务，不好维护。<br>3. 有没有一个中间件可以做到隔离数据库分库实现细节，在业务外层就相当于一个数据库。<br>如果使用mysql这种情况该如何实现。<br>4. 如果使用newsql类的数据库，如tidb是不是可以解决掉。","like_count":2,"discussions":[{"author":{"id":1503506,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","nickname":"你为啥那么牛","note":"","ucode":"1ABC604A54A8F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319932,"discussion_content":"es","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604201319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32626,"user_name":"jacy","can_delete":false,"product_type":"c1","uid":1103456,"ip_address":"","ucode":"0022A8759DDCE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/60/f21b2164.jpg","comment_is_top":false,"comment_ctime":1539651410,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5834618706","product_id":100002201,"comment_content":"先是读写分离，再扩展到按租户、地域等维度分库，再按时间维度进行分表，按数据进行水平或垂直分片。最后在讲到微服务的数据库设计模式，如当服务对单库，在之上应用之前提到的设计方法，拉近业务。","like_count":1},{"had_liked":false,"id":17420,"user_name":"王磊","can_delete":false,"product_type":"c1","uid":1050085,"ip_address":"","ucode":"A4DE9804642A08","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/e5/aa579968.jpg","comment_is_top":false,"comment_ctime":1532646839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5827614135","product_id":100002201,"comment_content":"新公司用到Postgres的Citus,感觉比较小众，老师怎么看这个技术选型。我们是大数据中心。","like_count":1},{"had_liked":false,"id":13512,"user_name":"楼下的小黑","can_delete":false,"product_type":"c1","uid":1161545,"ip_address":"","ucode":"84CBE4A47CDD26","user_header":"https://static001.geekbang.org/account/avatar/00/11/b9/49/4624516d.jpg","comment_is_top":false,"comment_ctime":1529714891,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5824682187","product_id":100002201,"comment_content":"一致性哈希的问题，个人认为很难绕开。实现通用型nosql数据库，不能根据业务分片。就如文章所说，一致性哈希在扩容时，需要重新整合，需要移动大量数据，成本太大。目前优化，也只是在数据移动时的优化，治标不治本。不知道，有没有其他解决方案","like_count":1,"discussions":[{"author":{"id":1487584,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","nickname":"鱼","note":"","ucode":"89EC9CE3AD0281","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261822,"discussion_content":"一开始定义远超节点（机器）数的分区，比如你有5个节点，直接200个分区。性能不够的时候，新增一个节点（机器）。直接从已有的节点上匀走一些分区，只需要重新维护一下节点和分区之间的路由，并且只移动匀走的数据。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589009567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321715,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1637024754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637024754","product_id":100002201,"comment_content":"目前在用clickhouse，我采用视图的模式提取多维度字段做索引，以加速查询。","like_count":0},{"had_liked":false,"id":250594,"user_name":"NullPointer","can_delete":false,"product_type":"c1","uid":1179184,"ip_address":"","ucode":"83B7DA926A0411","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/30/c9b568c3.jpg","comment_is_top":false,"comment_ctime":1601165821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601165821","product_id":100002201,"comment_content":"开始的时候分多级从库，针对业务的需求程度分配不同的从库，进阶的还是增加了分库分表用mycat，mycat又有连接数暴增的问题，又引入了tidb感觉经历还挺复杂","like_count":0},{"had_liked":false,"id":239014,"user_name":"罗杰.菲の樂","can_delete":false,"product_type":"c1","uid":2016408,"ip_address":"","ucode":"63590706846EEA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","comment_is_top":false,"comment_ctime":1596415973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596415973","product_id":100002201,"comment_content":"确认放弃笔记？ 放弃后所记笔记将不保留。 很多NoSQL 的 read replica 感觉就是读写分离的应用案例。大家的看法是这样的吗？","like_count":0},{"had_liked":false,"id":216983,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1589380937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589380937","product_id":100002201,"comment_content":"如果按照索引的方式进行分片，那么在访问数据的时候需要先查索引，再根据索引找到数据，多了一次访问索引的操作，这个对影响有多大？","like_count":0},{"had_liked":false,"id":201759,"user_name":"xxyyyboy","can_delete":false,"product_type":"c1","uid":1916113,"ip_address":"","ucode":"C8F0E08ED1C1D9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJu684YiafbNTjJNZ0BpxD2wVzW9mSdBEQd6ALfnqQJDcfntiatOmRribgngn31JIsibgQUF7t2q1ibIkQ/132","comment_is_top":false,"comment_ctime":1585833896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585833896","product_id":100002201,"comment_content":"学习中","like_count":0},{"had_liked":false,"id":171933,"user_name":"Goal","can_delete":false,"product_type":"c1","uid":1307012,"ip_address":"","ucode":"C337CD4C7E07B0","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/84/7d21bd9e.jpg","comment_is_top":false,"comment_ctime":1579055182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579055182","product_id":100002201,"comment_content":"打卡：60 | 性能设计篇之“数据库扩展”<br>对分布式系统中，数据库的分布式有了更深刻的认识<br>1.  主从、一主多从架构<br>2.  根据SQL语句拆分为 俩种类型的操作，然后借助数据库访问中间层，做请求的路由<br>3. 分库分表<br>4. 分库最基本的要求，就是从业务角度设计，这点也符合现在的微服务观念，单服务单库<br>5.  分表，水平分片、垂直分片 ：水平分片最常见的方式就是按时间维度拆分，垂直分片的含义就是按表中的字段拆分了；","like_count":0},{"had_liked":false,"id":169311,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1578312309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578312309","product_id":100002201,"comment_content":"坚持学习，学习笔记 https:&#47;&#47;mubu.com&#47;colla&#47;1xqu-zBrKB0","like_count":0}]}