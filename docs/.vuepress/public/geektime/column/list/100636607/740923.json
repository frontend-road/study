{"id":740923,"title":"附录","content":"\n    <h1 id=\"nav_point_374\">附录</h1>\n    <h2 id=\"nav_point_375\">A.1　状态码一览表</h2>\n    <p>这里我们将详细介绍一下 HTTP 的状态码。状态码是由使用 HTTP 实现远程存储的 WebDAV 规范扩展而来的。</p>\n    <p>在制定新的 RFC 规范时，状态码也会增加。状态码的含义和处理方式等详细信息都会记述在 RFC 中。另外，在状态码被定义时，IANA 的数据库也会随之更新，该网站中的状态码一览表用起来非常方便。</p>\n    <h3 id=\"nav_point_376\">A.1.1　1 字头（信息）</h3>\n    <p>首先介绍一下 1 字头状态码（表 A-1）。1 字头状态码表示确定请求成功或失败之前的状态。</p>\n    <p><strong>表 A-1　1 字头状态码</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>状态码</p>\n                </th>\n                <th>\n                    <p>用途</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>100 Continue</code></p>\n                </td>\n                <td>\n                    <p>这是第 4 章中介绍过的状态码。客户端先只向服务器发送请求首部，征求服务器的允许，服务器向客户端返回该状态码，表示已接收其发送的部分请求</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>101 Switching Protocols</code></p>\n                </td>\n                <td>\n                    <p>这是第 4 章中介绍过的状态码。当客户端请求切换到 HTTP 以外的协议时，服务器返回该状态码，表示已受理其请求。该状态码不可以用于 API</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>103 Early Hints</code></p>\n                </td>\n                <td>\n                    <p>在内容还未准备好之前，优先返回用于 HTTP/2 的服务器推送的提示信息</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <h3 id=\"nav_point_377\">A.1.2　2 字头（成功）</h3>\n    <p>当请求正常结束时，返回 2 字头状态码（表 A-2）作为响应。</p>\n    <p><strong>表 A-2　2 字头状态码</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>状态码</p>\n                </th>\n                <th>\n                    <p>用途</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>200 OK</code></p>\n                </td>\n                <td>\n                    <p>正常结束。这是最常见的响应</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>201 Created</code></p>\n                </td>\n                <td>\n                    <p>可对 <code>POST</code> 方法返回该状态码。当新的资源创建成功时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>202 Accepted</code></p>\n                </td>\n                <td>\n                    <p>服务器已经收到请求，但尚未处理完成</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>203 Non-Authoritative Information</code></p>\n                </td>\n                <td>\n                    <p>请求本身已成功，但不能信任进行中继的代理服务器</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>204 No Content</code></p>\n                </td>\n                <td>\n                    <p>可对 <code>DELETE</code> 方法返回该状态码。页面中没有内容，也不可以包含主体</p><!-- [[[read_end]]] -->\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>205 Reset Content</code></p>\n                </td>\n                <td>\n                    <p>服务器通知客户端重置画面，返回初始状态</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>206 Partial Content</code></p>\n                </td>\n                <td>\n                    <p>在下载中断后，当重新开始时使用该状态码</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <h3 id=\"nav_point_378\">A.1.3　3 字头（重定向）</h3>\n    <p>3 字头状态码（表 A-3）用于重定向和缓存无变化时的通知。重定向在第 1 章中进行了介绍，缓存在第 2 章中进行了介绍。注意，这里没有状态码 <code>306</code>（<code>306</code>\n        已不再被使用）。</p>\n    <p><strong>表 A-3　3 字头状态码</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>状态码</p>\n                </th>\n                <th>\n                    <p>用途</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>300 Multiple Choices</code></p>\n                </td>\n                <td>\n                    <p>用于存在多个重定向分支的情况。该状态码极少使用</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>301 Moved Permanently</code></p>\n                </td>\n                <td>\n                    <p>重定向到 <code>Location</code> 首部的 URL。用于因域迁移、网站迁移和 HTTPS 化而页面已永久迁移的情况。结果会被缓存。方法可改变</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>302 Found</code></p>\n                </td>\n                <td>\n                    <p>重定向到 <code>Location</code> 首部的 URL。用于临时维护等原有的 URL\n                        今后仍然有效的情况。如果存在用于缓存的首部，则会执行缓存。方法可改变</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>303 See Other</code></p>\n                </td>\n                <td>\n                    <p>重定向到 <code>Location</code> 首部的 URL。作为 <code>POST</code>\n                        操作的返回结果，重定向到一个新的资源。不可以进行缓存。方法可改变</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>304 Not Modified</code></p>\n                </td>\n                <td>\n                    <p>与使用 <code>If-Modified-Since</code> 首部或 <code>If-None-Match</code>\n                        首部发送过来的下载内容的信息相比，内容未改变（可以再次使用缓存）</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>305 Use Proxy</code></p>\n                </td>\n                <td>\n                    <p>现在不建议使用</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>307 Temporary Redirect</code></p>\n                </td>\n                <td>\n                    <p>重定向到 <code>Location</code> 首部的 URL。这是 RFC 7231\n                        中新增的状态码，表示临时迁移。如果存在用于缓存的首部，则会执行缓存。改变方法需要得到允许</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>308 Moved Permanently</code></p>\n                </td>\n                <td>\n                    <p>重定向到 <code>Location</code> 首部的 URL。这是 RFC 7538 中新增的状态码，表示永久迁移。会进行缓存。改变方法需要得到允许</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <h3 id=\"nav_point_379\">A.1.4　4 字头（客户端错误）</h3>\n    <p>4 字头状态码（表 A-4）表示客户端引起的错误。当请求目标的 URL 发生错误、所需首部不完整、主体的形式发生错误时，服务器就会返回这类状态码。</p>\n    <p><strong>表 A-4　4 字头状态码</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>状态码</p>\n                </th>\n                <th>\n                    <p>用途</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>400 Bad Request</code></p>\n                </td>\n                <td>\n                    <p>当客户端的请求中存在问题时返回该状态码。在其他更具体的状态码不适用的情况下使用</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>401 Unauthorized</code></p>\n                </td>\n                <td>\n                    <p>当需要认证时返回该状态码。如果 <code>WWW-Authenticate</code> 首部中指定 BASIC 认证或 Digest 认证，浏览器会发送用户 ID\n                        和密码的输入表单</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>403 Forbidden</code></p>\n                </td>\n                <td>\n                    <p>当访问禁止使用的资源时返回该状态码。有的站点会返回 <code>404</code></p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>404 Not Found</code></p>\n                </td>\n                <td>\n                    <p>当未发现资源时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>405 Method Not Allowed</code></p>\n                </td>\n                <td>\n                    <p>当使用了不允许使用的方法时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>406 Not Acceptable</code></p>\n                </td>\n                <td>\n                    <p>当第 2 章中介绍的内容协商的结果、MIME 类型、显示语言、字符集和压缩格式中的任意一项未找到服务器和客户端都理解的形式时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>407 Proxy Authentication Required</code></p>\n                </td>\n                <td>\n                    <p>由代理返回。客户端首先需要认证代理</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>408 Request Timeout</code></p>\n                </td>\n                <td>\n                    <p>当请求未在服务器等待的时间到来时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>409 Conflict</code></p>\n                </td>\n                <td>\n                    <p>当无法正常执行处理时返回该状态码。HTTP/1.1 中还添加了在类似的情况下使用的 <code>428</code></p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>410 Gone</code></p>\n                </td>\n                <td>\n                    <p>当过去应该存在的资源消失时返回该状态码。有的站点会返回 <code>404</code></p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>411 Length Required</code></p>\n                </td>\n                <td>\n                    <p>主体是必需的，但在不存在 <code>Content-Length</code> 首部的情况下，返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>412 Precondition Failed</code></p>\n                </td>\n                <td>\n                    <p>当未满足先决条件时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>413 Payload Too Large</code></p>\n                </td>\n                <td>\n                    <p>当主体的大小超出服务器允许的范围时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>414 URI Too Long</code></p>\n                </td>\n                <td>\n                    <p>当 URL 的长度超出服务器允许的范围时返回该状态码。RFC 7231 中添加了该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>415 Unsupported Media Type</code></p>\n                </td>\n                <td>\n                    <p>当不支持指定的媒体类型时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>416 Range Not Satisfiable</code></p>\n                </td>\n                <td>\n                    <p>当指定范围下载时，如果指定的范围无效，则返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>417 Expectation Failed</code></p>\n                </td>\n                <td>\n                    <p>Expect 首部中不允许放入 <code>100-continue</code> 之外的值，当放入其他值时会返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>421 Misdirected Request</code></p>\n                </td>\n                <td>\n                    <p>当不支持向服务器请求的 Schema 时返回该状态码。HTTP/2 的 RFC 7540 中添加了该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>425 Too Early</code></p>\n                </td>\n                <td>\n                    <p>在 TLS 1.3 的会话重启时以 0 RTT 一起发送信息的情况下，因为担心请求被重放，服务器要求从握手开始重来，此时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>426 Upgrade Required</code></p>\n                </td>\n                <td>\n                    <p>正如第 4 章的协议升级中介绍的那样，当向客户端请求变更协议时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>428 Precondition Required</code></p>\n                </td>\n                <td>\n                    <p>当先决条件错误时返回该状态码。RFC 2685 中设想的情况与 <code>409 Conflict</code> 类似。对之前 <code>GET</code>\n                        的内容进行加工，然后进行 <code>PUT</code>，中间如果有其他人修改，就会发生错误。所谓先决条件，就是设想修改源数据的 <code>ETag</code></p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>429 Too Many Requests</code></p>\n                </td>\n                <td>\n                    <p>当发送大量请求时返回该状态码。例如，在 Google 的服务中，API 限制每秒发送 10 次。如果发送请求的次数超过该限制，就会返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>431 Request Header Fields Too Large</code></p>\n                </td>\n                <td>\n                    <p>当请求首部过大时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>451 Unavailable For Legal Ressons</code></p>\n                </td>\n                <td>\n                    <p>用于出于法律原因而拒绝访问的情况，这是 <code>403 Forbidden</code> 的一种特殊情况</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p>表 A-5 的状态码虽然也进行了定义，但 RFC 中并未规定浏览器应该如何运行。</p>\n    <p><strong>表 A-5　特殊的 4 字头状态码</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>状态码</p>\n                </th>\n                <th>\n                    <p>用途</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>402 Payment Required</code></p>\n                </td>\n                <td>\n                    <p>当需要付钱时返回该状态码</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <h3 id=\"nav_point_380\">A.1.5　5 字头（服务器错误）</h3>\n    <p>5 字头状态码（表 A-6）表示服务器引起的错误。虽然有很多种，但由于客户端的请求不存在什么问题，所以需要等待服务器恢复正常。</p>\n    <p><strong>表 A-6　5 字头的状态码</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>状态码</p>\n                </th>\n                <th>\n                    <p>用途</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>500 Internal Server Error</code></p>\n                </td>\n                <td>\n                    <p>服务器内部的错误</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>501 Not Implemented</code></p>\n                </td>\n                <td>\n                    <p>服务器应该实现的功能还未实现</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>502 Bad Gateway</code></p>\n                </td>\n                <td>\n                    <p>在请求到达服务之前，网关或代理服务器拒绝请求时返回该状态码。在 AWS 的负载均衡器（ELB）与对象服务器交流失败（响应无法解析）时也返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>503 Service Unavailable</code></p>\n                </td>\n                <td>\n                    <p>在服务器未启动等情况下，代理服务器或者负载均衡器返回该状态码。有时在维护时也会返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>504 Gateway Timeout</code></p>\n                </td>\n                <td>\n                    <p>在请求到达服务之前，网关或者代理服务器无法到达最终目的地的服务器，超时后返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>505 HTTP Version Not Supported</code></p>\n                </td>\n                <td>\n                    <p>当请求不支持的 HTTP 版本时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>509 Bandwidth Limit Exceeded</code></p>\n                </td>\n                <td>\n                    <p>当通信带宽用尽时返回该状态码</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>511 Network Authentication Required</code></p>\n                </td>\n                <td>\n                    <p>在需要在建立网络连接之前进行验证的情况下返回该状态码</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <h2 id=\"nav_point_381\">A.2　首部字段一览表</h2>\n    <p>下面介绍一下本书中介绍过的首部（表 A-7~表 A-15）。首部有很多类型，除 HTTP 之外，电子邮件和新闻组中也会使用首部，我们可以在 IANA 网站上查看最新的 RFC 等中定义的所有首部。</p>\n    <p><strong>表 A-7　基本的首部</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>首部名</p>\n                </th>\n                <th>\n                    <p>发送</p>\n                </th>\n                <th>\n                    <p>接收</p>\n                </th>\n                <th>\n                    <p>说明</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>Host</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>指定发送目的地的主机名。由此，即使 IP 地址相同，也可以运行多个 Web 服务（虚拟主机）</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Referer</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>指定页面跳转时的前一个页面的 URL。使用 <code>Referrer-Policy</code> 首部可以控制是否在从 HTTPS 到 HTTP\n                        时发送该首部、是否在发送该首部时仅发送域名、是否返回绝对路径等</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Date</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>服务器返回响应时的日期</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Location</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>在服务器返回用于重定向的\n                        <code>301</code>、<code>302</code>、<code>303</code>、<code>307</code>、<code>308</code> 状态码时，指定跳转目标\n                    </p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>User-Agent</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>浏览器的名称。在功能机盛行时代，该首部用来根据运营商改写表情文字</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>X-Powered-By</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>表示服务器信息的首部。虽然它不是正式发布的首部，但会经常用到</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Server</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p><code>X-Powered-By</code> 实现标准化的首部</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>:authority</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>用于 HTTP/2 之后，替代 <code>Host</code> 首部</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>:path</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>用于 HTTP/2 之后，将路径作为首部发送</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>:method</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>用于 HTTP/2 之后，将方法作为首部发送</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>:status</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>用于 HTTP/2 之后，将状态作为首部接收。不可记述原因内容</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>:scheme</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>指 http、https 等。用于 HTTP/2</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>:protocol</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>在 Websocket 等非 HTTP 的情况下添加</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p><strong>表 A-8　内容信息的首部</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>首部名</p>\n                </th>\n                <th>\n                    <p>发送</p>\n                </th>\n                <th>\n                    <p>接收</p>\n                </th>\n                <th>\n                    <p>说明</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>Accept</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>浏览器发送图片类型等可处理的多媒体类型列表，服务器将该列表与自身支持的类型进行比较，确定返回的文件类型</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Content-Type</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>指定发送、接收的文件和信息的 MIME 类型，如 <code>text/html</code>、<code>image/png</code>\n                        等。还存在同时包含语法和词汇的 MIME 类型，使用 <code>image/svg+xml</code> 这种 XML 来表示 SVG</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Content-Length</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>设置所发送的主体大小。在压缩的情况下，指压缩后的大小</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Accept-Encoding</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>发送客户端能够理解的压缩格式列表</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Content-Encoding</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>指定压缩主体时的格式，从客户端发送的可使用的格式中选择</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Accept-Language</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>当可以选择内容的语言时，客户端发送可接收的语言列表</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Content-Language</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>指定发送给客户端的内容的语言，从客户端发送的可使用的语言中选择</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Content-Disposition</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>指定文件是以浏览器内联的形式显示，还是下载并保存到本地。当保存到本地时，可以指定文件名</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Accept-Ranges</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>服务器在支持部分下载时返回 <code>bytes</code>，否则返回 <code>none</code></p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Ranges</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>在部分下载的情况下，用于设置客户端要下载的范围</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>If-Range</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>在部分下载的情况下，如果内容被改写，即使与下载完的部分进行组合，数据仍是破损状态。因此，该首部通过添加 <code>ETag</code> 或\n                        <code>Last-Modified</code> 信息，在存在修改的情况下，能够由部分下载变为全部下载</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Content-Range</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>针对客户端的请求，返回实际返回的内容的范围</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p><strong>表 A-9　缓存相关的首部</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>首部名</p>\n                </th>\n                <th>\n                    <p>发送</p>\n                </th>\n                <th>\n                    <p>接收</p>\n                </th>\n                <th>\n                    <p>说明</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>Pragma: no-cache</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>要求通信线路上的代理不进行缓存。这是 HTTP/1.0 中的首部，现在已经不被推荐使用了。如果存在 <code>Cache-Control</code>，请忽略该首部\n                    </p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Expires</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>设置新鲜度保持期间。在新鲜度保持期间，使用缓存，不执行 HTTP 访问。这是 HTTP/1.0 中的首部，如果存在\n                        <code>Cache-Control</code>，请忽略该首部</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Cache-Control</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>这是客户端的请求和服务器的响应中都可以使用的缓存控制首部</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Last-Modified</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>返回内容的最后修改时间。客户端在下次访问服务器时将该日期作为 <code>If-Modified-Since</code> 发送，服务器以此来判断缓存是否有效</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>If-Modified-Since</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>与 <code>Last-Modified</code> 配套使用</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>ETag</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>可在服务器端设置条件（例如内容的散列等除日期之外的条件）的缓存的键。客户端在下次访问服务器时将该信息作为 <code>If-None-Match</code>\n                        发送，服务器以此来判断缓存是否有效</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>If-None-Match</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>与 <code>ETag</code> 配套使用</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Vary</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>即使是相同的 URL，内容也会随着语言、移动端或 PC\n                        端等发生变化，在这种情况下，该首部用来防止过度缓存。通过列举哪个首部对内容差异有影响，来判断浏览器是否应该使用缓存</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Link</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>存储当前显示的资源的相关信息的链接，如索引或作者信息等文档的相关信息、用于书签的永久链接、RESTful 资源的前端和后端等的信息、应该预加载的 CSS\n                        文件等。IANA 定义了可使用的类型</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p><strong>表 A-10　HTTP/1.1 中导入的通信方式相关的首部</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>首部名</p>\n                </th>\n                <th>\n                    <p>发送</p>\n                </th>\n                <th>\n                    <p>接收</p>\n                </th>\n                <th>\n                    <p>说明</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>Connection: Keep-Alive</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>将 HTTP/1.1 中的 Keep-Alive 设为有效。客户端发送该首部，服务器返回相同的首部来使其有效</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Connection: Close</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>当强行关闭 Keep-Alive 时发送该首部。在超时的情况下也可关闭网络连接</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Connection: Upgrade</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>当升级为 WebSocket 等协议时返回该首部。与 <code>Upgrade</code> 首部配套使用</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Upgrade</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>用于记述升级目标的协议</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Expect: 100-continue</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>在客户端发送大型文件的情况下，客户端向服务器确认是否接收即将使用 <code>Content-Length</code> 首部发送的数据量。如果服务器同意，则返回\n                        <code>100 continue</code></p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Transfer-Encoding: chunked</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>当以 Chunk 形式返回主体时，服务器发送该首部</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Transfer-Encoding: ( 其他 )</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p><code>Content-Encoding</code> 只是对主体进行压缩，而该首部用于压缩整个通信线路</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Trailer</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>当在主体后面发送某些首部时，通知浏览器之后要发送哪些首部</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Allow</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>当浏览器使用 <code>OPTION</code> 方法来确认可使用的方法时，服务器使用该首部返回可使用的方法信息</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Via</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>在使用代理等的情况下，该首部用来记录中继服务器的信息</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>X-Forwarded-For</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>用于识别代理服务器在中途连接的 IP 地址</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Fowarded</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>与 <code>X-Forwarded-For</code> 一样，但它是 RFC 中的标准首部</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p><strong>表 A-11　认证、会话相关的首部</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>首部名</p>\n                </th>\n                <th>\n                    <p>发送</p>\n                </th>\n                <th>\n                    <p>接收</p>\n                </th>\n                <th>\n                    <p>说明</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>WWW-Authenticate</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>当需要认证时（<code>401</code>），服务器将其使用的认证方式通知给浏览器。浏览器能够支持 Basic 认证和 Digest 认证</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Authorization</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>该首部用来发送认证所需的信息（如 ID+ 密码、访问令牌等）</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Set-Cookie</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>服务器发送希望浏览器保存的信息，浏览器在下次访问指定范围（域、路径）时，使用 <code>Cookie</code> 首部将保存的信息添加到请求中</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Cookie</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>该首部用来将之前接收的 Cookie 信息发送给服务器</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p><strong>表 A-12　用于 WebSocket 的首部</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>首部名</p>\n                </th>\n                <th>\n                    <p>发送</p>\n                </th>\n                <th>\n                    <p>接收</p>\n                </th>\n                <th>\n                    <p>说明</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>Sec-WebSocket-Key</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>HTTP/1.1 中浏览器发送的随机字符串</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Sec-WebSocket-Accept</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>HTTP/1.1 中服务器返回的字符串。基于 <code>Sec-WebSocket-Key</code> 生成该首部</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Sec-WebSocket-Protocol</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>指定子协议。发送端发送使用逗号分隔的列表，服务器返回选择的那一项</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Sec-WebSocket-Extensions</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>将以消息为单位进行压缩等扩展功能设为有效</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Sec-WebSocket-Version: 13</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>WebSocket 的版本号，当前固定为 13</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p><strong>表 A-13　安全相关的首部</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>首部名</p>\n                </th>\n                <th>\n                    <p>发送</p>\n                </th>\n                <th>\n                    <p>接收</p>\n                </th>\n                <th>\n                    <p>说明</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>X-XSS-Protection</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>当检测到跨站脚本攻击时，使浏览器停止动作</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Content-Security-Policy</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>详细定义网站中使用的内容的安全策略</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Content-Security-Policy-Report-Only</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>与 <code>Content-Security-Policy</code> 一样，但不停止动作，只是报告错误</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Strict-Transport-Security</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>服务器请求使用 HTTPS 连接</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Public-Key-Pins</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>为了防止认证机构遭受 MITM 攻击，网站提供所持有的证书的散列，以便浏览器可以检验证书。由于存在应用负载较大等问题，所以提出规范的 Google 本身的\n                        Chrome 已经停止支持该首部</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Public-Key-Pins-Report-Only</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>与 <code>Public-Key-Pins</code> 一样，但不停止动作，只是报告错误</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Expect-CT</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>它是 <code>Public-Key-Pins</code>\n                        强有力的替代者，返回签名证书的时间戳。结合认证机构之外的日志服务器发行的签名证书的时间戳信息，浏览器可以检验证书</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>X-Frame-Options</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>该首部用来通知浏览器禁止在 iframe 的内部显示网站，以防止点击劫持。在 IE\n                        之外的浏览器中，<code>Content-Security-Policy: frame-ancestors</code> 也可以实现同样的功能</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>X-Content-Type-Options: nosniff</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>这是禁用通过文件内容嗅探 MIME 类型的功能，而非禁用 MIME 类型，以防止非预期的脚本被执行</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Referrer-Policy</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>当在网站内部跳转或跳转到外部网站时，该首部用来控制可以展示哪些信息</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>X-Robots-Tag</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>告诉搜索引擎等的爬虫，内容是否被索引</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p><strong>表 A-14　CORS 相关的首部</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>首部名</p>\n                </th>\n                <th>\n                    <p>发送</p>\n                </th>\n                <th>\n                    <p>接收</p>\n                </th>\n                <th>\n                    <p>说明</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>Origin</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>指定通信源网页的域名</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Access-Control-Request-Method</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>用逗号分隔要获得允许的通信方法</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Access-Control-Request-Headers</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>用逗号分隔要获得允许的首部</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Access-Control-Allow-Origin</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>指定允许通信的源名。在未使用 Cookie 的情况下，可以设置为通配符（<code>*</code>）</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Access-Control-Allow-Method</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>目标 URL 允许的方法名列表。不需要预检请求的方法可以省略该首部</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Access-Control-Allow-Headers</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>目标 URL 允许的首部名列表。不需要预检请求的方法可以省略该首部</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Access-Control-Allow-Credentials</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>当允许服务器接收 Cookie 等资格信息时添加该首部。该首部只可以设为 <code>true</code></p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Access-Control-Expose-Headers</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>在服务器返回的不可被外部引用的响应首部中，指定可以通过脚本引用的首部名称</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Access-Control-Max-Age</code></p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>指定预检请求结果的有效期</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <p><strong>表 A-15　Web 推送相关的首部</strong></p>\n    <table width=\"90%\" border=\"1\">\n        <thead>\n            <tr>\n                <th>\n                    <p>首部名</p>\n                </th>\n                <th>\n                    <p>发送</p>\n                </th>\n                <th>\n                    <p>接收</p>\n                </th>\n                <th>\n                    <p>说明</p>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <p><code>Prefer</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>指定 Web 推送的设置</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>TTL</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>在发送一旦过时就失去价值的推送信息的情况下，设定其寿命的秒数</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Topic</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>表示话题的标识符。在发送相同标识符的推送信息时，旧的推送信息会被删除，仅通知用户最新的信息</p>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <p><code>Urgency</code></p>\n                </td>\n                <td>\n                    <p>√</p>\n                </td>\n                <td>\n                    <p>&nbsp;</p>\n                </td>\n                <td>\n                    <p>表示消息的紧急度。如果为 <code>high</code>，即使终端电量不足，也会通知；如果为 <code>low</code>，只要未连接电源或\n                        Wi-Fi，就忽略</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <h2 id=\"nav_point_382\">A.3　InternetExplorer 与 Content-Security-Policy 首部</h2>\n    <p>虽然从 Internet Explorer 到 Edge、Chrominum Edge，浏览器不断更新换代，但随着操作系统开始支持 HTTP 通信，Internet Explorer 也继续支持 HTTP\n        通信。由于某些新功能无法使用，所以我们需要使用 Internet Explorer 的旧功能来代替。</p>\n    <p>例如，缓存结构不运行只会使系统变慢，并不会存在其他影响。不过，安全问题影响很大，我们还需努力应对。</p>\n    <p>本节将介绍一下 Internet Explorer 仍然需要应对的安全相关的问题。</p>\n    <h3 id=\"nav_point_383\">A.3.1　X-Content-Security-Policy 首部</h3>\n    <p>Internet Explorer 只可以使用 <code>X-Content-Security-Policy</code> 来指定 <code>Content-Security-Policy</code>。另外，也只可以使用\n        <code>sandbox</code> 指令实现 <code>X-Content-Security-Policy</code> 首部。</p>\n    <h3 id=\"nav_point_384\">A.3.2　X-XSS-Protection 首部</h3>\n    <p>使用 <code>X-XSS-Protection</code> 首部可以检测到明显可疑的情况，比如通过 HTML 内联来使用脚本标签等。虽然现代浏览器使用的是\n        <code>Content-Security-Policy</code> 首部（代码清单 A-2），但 Internet Explorer 使用的是 <code>X-XSS-Protection</code> 首部（代码清单\n        A-1）。由于只是根据模式匹配来判断，所以本来没有问题的代码模式可能会被判定为存在问题，即假阳性。因此，当向既有网站中引入 <code>X-XSS-Protection</code>\n        首部时，至今能正常运行的功能可能变得无法运行，需要进行修改。</p>\n    <p><strong>代码清单 A-1　用于 Internet Explorer 的 X-XSS-Protection 首部的设置示例</strong></p>\n    <pre class=\"code-rows\"><code>X-XSS-Protection: 1; mode=block</code></pre>\n    <p><strong>代码清单 A-2　现代浏览器中的设置示例</strong></p>\n    <pre class=\"code-rows\"><code>Content-Security-Policy: script-src https: 'unsafe-inline'</code></pre>\n    <h3 id=\"nav_point_385\">A.3.3　X-Frame-Options 首部</h3>\n    <p>笔者介绍过，在 IFRAME 内部显示网站会增加点击劫持的风险。<code>Content-Security-Policy</code> 首部虽然可以防止点击劫持，但 Internet Explorer\n        并未实现该功能，而是使用了 <code>X-Frame-Options</code> 首部来代替。</p>\n    <blockquote>\n        <p><code>X-Frame-Options: DENY</code></p>\n        <p>不允许在框架内使用。等同于 <code>Content-Security-Policy: frame-ancestors 'none'</code>。</p>\n        <p><code>X-Frame-Options: SAMEORIGIN</code></p>\n        <p>不允许在不同 URL 的框架内使用。等同于 <code>Content-Security-Policy: frame-ancestors 'self'</code>。</p>\n        <p><code>X-Frame-Options: ALLOW-FROM http://××××.com</code></p>\n        <p>仅允许从指定的 URL 调用时在框架内显示。</p>\n    </blockquote>\n    <p>为了保持向后兼容，其他浏览器中也保留了该首部，但内容安全策略中规定 <code>Content-Security-Policy</code> 首部的优先级高于该首部。</p>\n    <h2 id=\"nav_point_386\">A.4　使用 Go 语言进行 JSON 解析</h2>\n    <p>最近的语言处理系统基本上是使用标准库来进行 JSON 解析的。Go 语言标准库中的 <code>encoding/json</code> 包能够用于 JSON 解析。</p>\n    <p>许多语言的标准 JSON 解析器会创建对象类型或者字典类型等嵌入类型的实例，而 Go 语言的 JSON 解析器与此不同，它执行对预先创建的结构体的映射。<code>encoding/json</code>\n        是静态类型语言中常用的一个包。</p>\n    <p>不过，有些数据预先并不知道存在什么样的键。例如，有的 JSON 会按关键字让数据行形成一览表的形式，以用于搜索引擎，并且关键字会根据文档发生改变，这种情况就非常难办了。这时可以按通用的数据类型进行转换。</p>\n    <p>下面，笔者先来介绍一下使用 Go 语言中常用的结构体进行 JSON 解析的相关内容。</p>\n    <h3 id=\"nav_point_387\">A.4.1　使用 Go 语言的结构体标签进行 JSON 解析</h3>\n    <p>我们将图书信息的 JSON 转换为结构体。在代码清单 A-3 中，首先创建记录图书数据的 <code>Book</code> 结构体。与一般的成员变量声明不同，<code>Book</code>\n        结构体中会附上名为标签的注解。这样一来，就可以与 JSON 的键进行对应了。</p>\n    <p><strong>代码清单 A-3　将 JSON 转换为结构体</strong></p>\n    <pre class=\"code-rows\"><code>package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n\ntype Book struct {\n    Title string `json:\"title\"`\n    Author string `json:\"author\"`\n}\n\nvar jsonString = []byte(`\n[\n    {\"title\": \"The Art of Community\", \"author\": \"Jono Bacon\"},\n    {\"title\": \"Mithril\", \"author\": \"Yoshiki Shibukawa\"}\n]`)\n\nfunc main() {\n    var books []Book\n    err := json.Unmarshal(jsonString, &amp;books)\n    if err != nil {\n        panic(err)\n    }\n    for _, book := range books {\n        fmt.Println(book)\n    }\n}</code></pre>\n    <p>另外，即使未声明标签，上述的 JSON 也可以读取。由于 Go 语言结构体的公开成员必须以大写字母开头，所以我们不能随意决定使用大写还是小写。Go 语言的 <code>encoding/json</code> 包也可以用来生成\n        JSON 字符串，但这时 JSON 的键会与变量名称一致，变成以大写字母开头的 <code>Title</code>。另外，如果名称的首字母是小写，那么 <code>encoding/json</code>\n        包也会忽略该成员，既不会进行读取，也不会进行写入。键中很少会用到大写字母，因此，在进行读写的情况下，要声明标签。</p>\n    <p>结构化标签有一些新增的记述方法。</p>\n    <blockquote>\n        <p><code>json:\"–\"</code></p>\n        <p>在输入和输出时忽略成员。用于结构体中不持有临时缓存数据的情况。</p>\n        <p><code>json:\" 键名 , omitempty\"</code></p>\n        <p>与输入无关，当输出为空时，省略该键。</p>\n    </blockquote>\n    <p>通常只使用这些规则就足够了，但在个别情况下这些规则不适用。关于这些情况，笔者将在后面的内容中详细进行讲解。</p>\n    <blockquote>\n        <p style=\"text-align: center\"><strong>自动生成结构体</strong></p>\n        <p>在如今这个 AI 和机器学习盛行的时代，我们无须手动执行所有的定义。使用 JSON-to-Go（图 A-1）等工具（笔者认为其内部并未使用 AI），通过传递 JSON 即可生成声明语句，声明加载数据的 Go\n            语言结构体。</p>\n        <p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00459.jpeg\" alt=\"{%}\" /></p>\n        <p class=\"ebook-image-title\"><strong>图 A-1　JSON-to-Go</strong></p>\n        <p>当然，需要手动完成的工作也没有完全消失，上一节介绍的内容，比如判断生成的标签是否正确、修改为更适合的设置等也还是有用的。另外，接下来笔者还会介绍一些应用性的话题，具体来说就是使 Go\n            语言更容易使用自动生成的结构体。不过，基于工具生成源代码，这一过程还是省去了很多手动作业。</p>\n    </blockquote>\n    <h3 id=\"nav_point_388\">A.4.2　判断值到底是省略了，还是为 0</h3>\n    <p>在 Go 语言中，变量一定会初始化为默认值。例如，数值会初始化为 0，字符串会初始化为空字符串（<code>\" \"</code>）。因此，除了表示日期的变量（比如一定会输入 1 到 12 的整数这样的变量）外，JSON\n        中无法区分是放入了数值 0，还是省略了值，这样一来，在将数据差分作为 JSON 接收的情况下就非常麻烦了。笔者来介绍一个示例。</p>\n    <p>代码清单 A-4 是持有商品修改记录的结构体。假设服务器仅将修改过的值以 JSON 返回。</p>\n    <p><strong>代码清单 A-4　持有商品修改记录的结构体</strong></p>\n    <pre class=\"code-rows\"><code>type EditHistory struct {\n    ID    int    `json:\"id\"`\n    Name  string `json:\"name\"`\n    Price int    `json:\"price\"`\n}</code></pre>\n    <p>如果使用 <code>json.Unmarshal</code> 来读取该结构体的值，就无法区分价格是设置成了 0，还是原本就没有包含在 JSON 中。如果像代码清单 A-5 一样改用指针变量，那么在 JSON\n        中未包含价格的情况下，通过判断变量是否为 <code>nil</code>，就可以知道 JSON 中是否包含价格了。</p>\n    <p><strong>代码清单 A-5　使用指针显式判断值是否存在</strong></p>\n    <pre class=\"code-rows\"><code>type EditHistory struct {\n    ID    int     `json:\"id\"`\n    Name  *string `json:\"name\"`\n    Price *int    `json:\"price\"`\n}\n\nif history.Price != nil {\n    // JSON 中放入了值\n    fmt.Println(*history.Price)\n}</code></pre>\n    <h3 id=\"nav_point_389\">A.4.3　想要执行特殊类型转换的情况</h3>\n    <p>JSON 与程序适合处理的格式不一定相同。JSON 中不存在表示日期的数据类型，但程序中可以使用各种编程语言的表示日期的类或者结构体。在 PAY.JP 的 API\n        中，服务器发送来的数据是纪元秒，因此需要将其转换为编程语言的日期类型。</p>\n    <p>这时，通过自己定义类型，并定义 <code>UnmarshalJSON()</code> 方法，就可以实现类型转换。在 Go 语言中，持有该方法的结构体满足 <code>json.Unmarshaler</code>\n        接口。Go 语言的服务器在持有该接口的对象中使用该转换方法，如代码清单 A-6 所示。</p>\n    <p><strong>代码清单 A-6　在读取 JSON 时执行类型转换，转换为读取的日期类型</strong></p>\n    <pre class=\"code-rows\"><code>type DueDate struct {\n    time.Time\n}\n\nfunc (d *DueDate) UnmarshalJSON(raw []byte) error {\n    epoch, err := strconv.Atoi(string(raw))\n    if err != nil {\n        return err\n    }\n    d.Time = time.Unix(int64(epoch), 0)\n    return nil\n}</code></pre>\n    <p>首先，使用 <code>type</code> 声明，创建填充了 <code>time.Time</code> 的 <code>DueDate</code> 类型。当进行填充时，<code>time.Time</code>\n        的方法也都可以使用。</p>\n    <p>然后，重新定义 <code>UnmarshalJSON()</code> 方法。该方法中传入了字节序列，因此，根据该类型的规则解析字节序列，初始化实例。这里传递的值是纪元秒，因此，首先要将其转换为表示秒的数值类型，使用\n        <code>time.Unix()</code> 函数创建 <code>time.Time</code> 结构体对象。最后将该结构体对象赋给填充的变量（默认创建与类型名称同名的实例变量）。</p>\n    <p>嵌入了该结构体的示例代码如代码清单 A-7 所示。与字符串和数值等一样，只需设置结构体的成员，并附上标签，就可以执行类型转换了。</p>\n    <p><strong>代码清单 A-7　嵌入 DueDate</strong></p>\n    <pre class=\"code-rows\"><code>package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"strconv\"\n    \"time\"\n)\n\n// 在这里写前面记述的 DueDate 类型的定义\n\ntype ToDo struct {\n    Task string `json:\"task\"`\n    Time DueDate `json:\"due\"`\n}\n\nvar jsonString = []byte(`[\n    {\"task\": \" 去幼儿园\", \"due\": 1486600200},\n    {\"task\": \" 去参加研究会\", \"due\": 1486634400}\n]`)\n\nfunc main() {\n    var todos []ToDo\n    err := json.Unmarshal(jsonString, &amp;todos)\n    if err != nil {\n        panic(err)\n    }\n    for _, todo := range todos {\n        fmt.Printf(\"%s: %v\\n\", todo.Task, todo.Time)\n    }\n}</code></pre>\n    <p>关于实现 <code>UnmarshalJSON()</code> 的位置，除各种数据类型之外，还可以将其赋给上一层的 <code>ToDo</code> 结构体。</p>\n    <h2 id=\"nav_point_390\">A.5　JSON 相关的应用话题</h2>\n    <p>到目前为止，笔者介绍了 Go 语言的 JSON 的基本处理方法。这些基本的处理方法无法应对所有的情况，所以笔者接下来再介绍一些可实际应用的方法。</p>\n    <h3 id=\"nav_point_391\">A.5.1　在输出时对输出内容进行加工</h3>\n    <p>像代码清单 A-8 那样，将结构体的实例传递给 <code>json.Marshal()</code>，就可以输出 JSON 了。</p>\n    <p><strong>代码清单 A-8　输出 JSON</strong></p>\n    <pre class=\"code-rows\"><code>d, _ := json.Marshal(Book{\" 领悟！ JavaScript\", \"Cody Lindley\"})\nlog.Println(string(d))\n// {\"title\":\"领悟！ JavaScript\",\"author\":\"Cody Lindley\"}</code></pre>\n    <p>结构体中的标签不仅用于读取数据，还用于写入数据。</p>\n    <p>在读取数据时，如果定义了 <code>UnmarshalJSON()</code>，就可以自定义读取处理，如果定义了 <code>MarshalJSON()</code> 方法，也可以自定义写入处理。在\n        <code>ToDo</code> 中加上结束标签 <code>Done</code>，在输出时，将输出完成的项目从 JSON 中去除。</p>\n    <p>我们将 <code>ToDo</code> 数组声明为 <code>ToDoList</code> 类型，并定义该类型的 <code>MarshalJSON</code>（代码清单 A-9）。在 Go 语言中，可以使用\n        <code>type</code> 以既有的类型等为基础来创建新的类型，数组也可以被创建为类型。前面创建的 <code>Due</code> 结构体中还创建了输出转换函数。代码清单 A-9 仅创建并输出\n        <code>Done</code> 标志位为假的项目的数组。</p>\n    <p><strong>代码清单 A-9　MarshalJSON 的定义</strong></p>\n    <pre class=\"code-rows\"><code>// 对日期进行序列化\nfunc (d *DueDate) MarshalJSON() ([]byte, error) {\n    return []byte(strconv.Itoa(int(d.Unix()))), nil\n}\n\ntype ToDoList []ToDo\n\n// 在过滤列表后进行序列化\nfunc (l ToDoList) MarshalJSON() ([]byte, error) {\n    tmpList := make([]ToDo, 0, len(l))\n    for _, todo := range l {\n        if !todo.Done {\n            tmpList = append(tmpList, todo)\n        }\n    }\n    return json.Marshal(tmpList)\n}</code></pre>\n    <p>在使用该代码时，需要先转换 <code>[]ToDo</code>，然后调用 <code>json.Marshal()</code>。</p>\n    <pre class=\"code-rows\"><code>d, _ := json.Marshal(ToDoList(todos))</code></pre>\n    <p>这里分两步进行序列化处理：第一步是对 <code>ToDoList</code> 进行过滤；第二步是使用项目内部的 <code>DueDate</code> 将值转换为纪元时间。在过滤处理的内部还会再调用\n        <code>json.Marshal()</code>。使用层次化结构，在修改较小的情况下，通过创建修改后的对象并再次执行，就能够实现序列化处理。也可以自己创建并返回完整的字节序列作为 JSON 片段。在\n        <code>DueDate</code> 结构体中会创建并返回整数的字节序列。</p>\n    <blockquote>\n        <p><img img src=\"https://static001.geekbang.org/files/resource/ebook/100009/image00380.jpeg\" alt=\"\" width=\"5%\" style=\"width: 5%\" inline-img=\"true\" />　<code>ToDoList</code> 的最后会调用\n            <code>json.Marshal</code>，但这里为了调用 <code>[]ToDo</code> 类型（非 <code>ToDoList</code> 类型），不会无限循环。</p>\n    </blockquote>\n    <h3 id=\"nav_point_392\">A.5.2　类型因情况而改变的 JSON 的解析</h3>\n    <p>虽说 JSON 只要能映射到简单的结构体即可，但在某些 API 中，需要灵活地对 JSON 进行解析。例如，其他 API 引起的信息变更操作也会触发 PAY.JP 的事件。返回的 JSON 的\n        <code>data</code> 属性会因事件类型而变化。如果是支付事件，则将 <code>Charge</code> 的 JSON 分配给 <code>data</code> 属性；如果是更新顾客信息，则将\n        <code>Customer</code> 的 JSON 分配给 <code>data</code> 属性。像这样，完全无关的对象很少会放入同一个变量中，虽然这些对象很少用作 API，但在处理 JSON\n        数据时，采用面向对象设计的、共享通用接口的其他类型的对象也可以放入变量中。</p>\n    <p>在这种情况下，我们可以使用 <code>json.Unmarshal()</code> 和 <code>json.RawMessage</code> 来解析。在代码清单 A-10 中，<code>type</code>\n        属性的值用于确定 <code>data</code> 属性。</p>\n    <p><strong>代码清单 A-10　data 部分的类型因事件类型而变化的示例代码</strong></p>\n    <pre class=\"code-rows\"><code>{\n    \"created\": 1442288882,\n    \"data\": {\n        \"email\": null,\n        \"id\": \"cus_a16c7b4df01168eb82557fe93de4\",\n        \"object\": \"customer\"\n    },\n    \"id\": \"evnt_54db4d63c7886256acdbc784ccf\",\n    \"object\": \"event\",\n    \"type\": \"customer\"\n}</code></pre>\n    <p>如代码清单 A-11 所示，类型不确定的数据会被设为 <code>json.RawMessage</code>，这是 <code>[]byte</code>\n        的别名，它用于临时存储解析到一半而暂停的内容。然后，只要按照顾客类型或者支付类型等使用的类型准备转换方法，用户就可以使用解析完的数据了。</p>\n    <p><strong>代码清单 A-11　不确定 data 的类型的事件信息（其 1）</strong></p>\n    <pre class=\"code-rows\"><code>type Event struct {\n    Created EpochDate       `json:\"create\"`\n    Data    json.RawMessage `json:\"data\"`\n    Id      string          `json:\"id\"`\n    Object  string          `json:\"object\"`\n    Type    string          `json:\"type\"`\n}\n\n// 将 data 看作顾客进行解析并返回\nfunc (e Event) GetCustomerData() (*Customer, error) {\n    if e.Type !== \"customer\" {\n        return nil, fmt.Errorf(\" 数据类型不是 customer%s\", e.Type)\n    }\n    customer := &amp;Customer{}\n    err := json.Unmarshal(e.data, customer)\n    if err != nil {\n        return nil, err\n    }\n    return customer, nil\n}</code></pre>\n    <p>如果拥有通用接口，就可以将用于公开的结构体和用于读取的结构体分开。<code>Data</code> 中会放入持有通用接口的结构体。如代码清单 A-12 所示，代码会变长，但由于可以使用 Go\n        语言的基于类型的分支处理，所以使用端的代码就更像 Go 语言了。</p>\n    <p><strong>代码清单 A-12　不确定 data 的类型的事件信息（其 2）</strong></p>\n    <pre class=\"code-rows\"><code>// 公开的结构体\ntype Event struct {\n    Created time.Time\n    Data    EventData\n    Id      string\n    Object  string\n}\n\n// 小写的、不向外部公开的、用于读写 JSON 的结构体\ntype tmpEvent struct {\n    Created EpochDate       `json:\"create\"`\n    Data    json.RawMessage `json:\"data\"`\n    Id      string          `json:\"id\"`\n    Object  string          `json:\"object\"`\n    Type    string          `json:\"type\"`\n}\n\nfunc (e *Event) UnmarshalJSON(raw []byte) error {\n    // 通过用于读写 JSON 的结构体进行解析\n    tmp := &amp;tmpEvent{}\n    err := json.Unmarshal(raw, &amp;tmp)\n    if err != nil {\n        return err\n    }\n    e.Created = time.Time(tmp.Created)\n    e.Id      = tmp.Id\n    e.Object  = tmp.Object\n    // 根据 Data 内部的类型，创建各自的结构体实例\n    switch tmp.Type {\n    case \"customer\":\n        customer := &amp;Customer{}\n        json.Unmarshal(tmp.Data, customer)\n        e.Data = customer\n    case \"charge\":\n        charge := &amp;Charge{}\n        json.Unmarshal(tmp.Data, charge)\n        e.Data = charge\n    }\n}</code></pre>\n    <h3 id=\"nav_point_393\">A.5.3　转换为通用的数据类型</h3>\n    <p>还有一个更加简便的方法，那就是不声明结构体。使用 Go 语言中的 <code>interface{}</code> 类型，解析器就会生成与 JSON 的数据结构相应的接口。</p>\n    <pre class=\"code-rows\"><code>func main() {\n    var books []interface{}\n    err := json.Unmarshal(jsonString, &amp;books)\n    if err != nil {\n        log.Fatal(err)\n    }\n    for _, book := range books {\n        log.Println(book)\n    }\n}</code></pre>\n    <p>在这种情况下，以在 JSON 中放入了某个数组为前提传递 <code>interface{}</code> 数组。当然，如果知道对象来了，还可以使用\n        <code>map[string]interface{}</code>，也可以使用原始类型的 <code>float64</code>、<code>string</code> 和 <code>bool</code>。JSON\n        规范中使用的类型与 JavaScript 相同，因此数值的数据类型只能是 <code>float64</code>，无法按整数进行处理。</p>\n    <p>实际上，在代码中处理时会进行类型转换。Go\n        语言的转换大致分为两种。在知道特定类型到来的情况下，可以使用一个变量来接收结果，但如果放入了不同类型的数据，就会造成混乱，导致程序运行结束。对于第二种形式，在处理不同类型的情况下，通过在 <code>ok</code>\n        变量中放入 <code>false</code>，程序就不会异常结束了。</p>\n    <p>在不知道处理什么类型的情况下，可以使用 <code>switch</code> 语句。</p>\n    <p>这几种转换方法的示例代码如代码清单 A-13 所示。</p>\n    <p><strong>代码清单 A-13　Go 语言的转换方法</strong></p>\n    <pre class=\"code-rows\"><code>// 转换为特定类型（1）\nbookList := books.([]interface{})\n\n// 转换为特定类型（2）\nbookMap, ok := book.(map[string]interface{})\n\n// switch 语句\nswitch v := value.(type) {\ncase bool:\n     log.Println(\"bool\", value)\ncase float64:\n     log.Println(\"float64\", value)\ncase string:\n     log.Println(\"string\", value)\ncase map[string]interface{}:\n     log.Println(\"map\", value)\ncase []interface{}:\n     log.Println(\"array\", value)\n}</code></pre>\n    <h3 id=\"nav_point_394\">A.5.4　JSON Schema</h3>\n    <p>Go 语言的 JSON 库会执行将 JSON 映射到结构体的操作，看起来似乎可以执行正确的转换，但是很遗憾，我们无法保证转换正确。即使读入的 JSON 和结构体的键不匹配，除了 JSON\n        语法错误的情况，其他情况下并不会发生错误。要想确认是否有符合预期的键，就需要用到 Schema。</p>\n    <p>虽然 Go 语言的标准库中没有 JSON Schema，但存在 JSON Schema 的第三方库，可以用来执行 JSON Schema 的验证。</p>\n    <p>JSON Schema 是由“JSON Schema Core”“JSON Schema Validation”“JSON Hyper-Schema”3 个规范构成的 <span&#10; class=\"comment-number\">1，<code>gojsonschema</code> 支持前两个规范。<code>gojsonschema</code> 对应的是版本 4，而版本 5 目前正在制定，有望由\n        IETF 实现标准化。</span&#10;></p>\n    \n    <p>由于 JSON Schema 的第三方库是非标准库，所以我们要先使用 <code>go get</code> 获取这个库。</p>\n    <p>代码清单 A-14 是引自 json-schema.org 的示例代码。</p>\n    <p><strong>代码清单 A-14　使用 JSON Schema 进行验证的 JSON</strong></p>\n    <pre class=\"code-rows\"><code>{\n    \"id\": 1,\n    \"name\": \"A green door\",\n    \"price\": 12.50,\n    \"tags\": [\"home\", \"green\"]\n}</code></pre>\n    <p>Schema 的示例代码有很多，我们看一下代码清单 A-15 的 Schema。</p>\n    <p><strong>代码清单 A-15　JSON Schema 示例代码</strong></p>\n    <pre class=\"code-rows\"><code>{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"Product\",\n    \"description\": \"A product from Acme's catalog\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"description\": \"The unique identifier for a product\",\n            \"type\": \"integer\"\n        },\n        \"name\": {\n            \"description\": \"Name of the product\",\n            \"type\": \"string\"\n        },\n        \"price\": {\n            \"type\": \"number\",\n            \"minimum\": 0,\n            \"exclusiveMinimum\": true\n        }\n    },\n    \"required\": [\"id\", \"name\", \"price\"]\n}</code></pre>\n    <p>该 Schema 中定义了关于 <code>Product</code> 对象的 Schema。该 Schema 中有 3 个必要属性：<code>id</code> 是整数，<code>name</code>\n        是字符串，<code>price</code> 是包含小数的数值，最小为 0（非负）。</p>\n    <p>代码清单 A-16 用于解析该 Schema 并进行确认。</p>\n    <p><strong>代码清单 A-16　运行 JSON Schema 的代码</strong></p>\n    <pre class=\"code-rows\"><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/xeipuuv/gojsonschema\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n    // 从文件中读取 Schema\n    schema, err := ioutil.ReadFile(\"schema.json\")\n    if err != nil {\n        panic(err)\n    }\n    schemaLoader := gojsonschema.NewBytesLoader(schema)\n\n    // 从文件中读取验证对象的文件\n    document, err := ioutil.ReadFile(\"document.json\")\n    if err != nil {\n        panic(err)\n    }\n    documentLoader := gojsonschema.NewBytesLoader(document)\n\n    result, err := gojsonschema.Validate(schemaLoader, documentLoader)\n    if err != nil {\n        panic(err)\n    }\n\n    if result.Valid() {\n        fmt.Printf(\"The document is valid\\n\")\n    } else {\n        fmt.Printf(\"The document is not valid. see errors :\\n\"\n        for _, desc := range result.Errors() {\n            fmt.Printf(\"- %s\\n\", desc)\n        }\n    }\n}</code></pre>\n    <p>该代码执行的处理很简单，在读取 Schema 后，使用 <code>gojsonschema.Validate()</code> 函数进行确认。本书中只尝试了基本功能，但其实该包中提供了多个方法，比如读取时的\n        <code>Loader</code> 和确认方法等。</p>\n    <p>至此，笔者介绍了从 JSON 创建结构体时的自动生成工具。在传递 JSON 时，有些工具还会返回相应的基本的 JSON Schema。</p>\n\n    <br style=\"page-break-after:always\" />\n    ","neighbors":{"left":{"article_title":"第 14 章 安全：守护浏览器的 HTTP 功能","id":740922},"right":{"article_title":"后记","id":740924}},"comments":[]}