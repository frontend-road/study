{"id":11966,"title":"13 | 效率为王：脚本与数据的解耦 + Page Object模型","content":"<p>在上一篇文章中，我用Selenium 2.0实现了我们的第一个GUI自动化测试用例，在你感觉神奇的同时，是否也隐隐感到一丝丝的担忧呢？比如，测试脚本中既有测试数据又有测试操作，所有操作都集中在一个脚本中等等。</p>\n<p>那么，今天我就通过介绍GUI测试中两个非常重要的概念：测试脚本和数据的解耦，以及页面对象（Page Object）模型，带你看看如何优化这个测试用例。</p>\n<h2>测试脚本和数据的解耦</h2>\n<p>我在前面的文章中，和你分享过GUI自动化测试适用的场景，它尤其适用于需要回归测试页面功能的场景。那么，你现在已经掌握了一些基本的GUI自动化测试用例的实现方法，是不是正摩拳擦掌准备批量开发GUI自动化脚本，把自己从简单、重复的GUI界面操作中解放出来呢？</p>\n<p>但是，你很快就会发现，如果在测试脚本中硬编码（hardcode）测试数据的话，测试脚本灵活性会非常低。而且，对于那些具有相同页面操作，而只是测试输入数据不同的用例来说，就会存在大量重复的代码。</p>\n<p>举个最简单的例子，上一篇文章中实现的百度搜索的测试用例，当时用例中搜索的关键词是“极客时间”，假设我们还需要测试搜索关键词是“极客邦”和“InfoQ”的场景，如果不做任何处理，那我们就可能需要将之前的代码复制3份，每份代码的主体完全一致，只是其中的搜索关键词和断言（Assert）的预期结果不同。</p><!-- [[[read_end]]] -->\n<p>显然，这样的做法是低效的。</p>\n<p>更糟糕的是，界面有任何的变更需要修改自动化脚本时，你之前复制出来的三个脚本都需要做相应的修改。比如，搜索输入框的名字发生了变化，你就需要修改所有脚本中findElement方法的by.name属性。</p>\n<p>而这里只有三个脚本还好，如果有30个或者更多的脚本呢，你会发现脚本的维护成本实在是太高了。那么，这种情况应该怎么处理呢？</p>\n<p>相信你现在已经想到了，把测试数据和测试脚本分离。也就是说测试脚本只有一份，其中需要输入数据的地方会用变量来代替，然后把测试输入数据单独放在一个文件中。这个存放测试输入数据的文件，通常是表格的形式，也就是最常见的CSV文件。</p>\n<p>然后，在测试脚本中通过data provider去CSV文件中读取一行数据，赋值给相应的变量，执行测试用例。接着再去CSV文件中读取下一行数据，读取完所有的数据后，测试结束。CSV文件中有几行数据，测试用例就会被执行几次。具体流程如图1所示。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/66/bb/664dfda4bee44e79b2437f68b2a06bbb.png?wh=1678*341\" alt=\"\" /></p>\n<center>图1 数据驱动测试的基本概念</center>\n<p>这也就是典型的数据驱动（Data-driven）测试了。</p>\n<ol>\n<li>\n<p><strong>数据驱动很好地解决了大量重复脚本的问题，实现了“测试脚本和数据的解耦”。</strong> 目前几乎所有成熟的自动化测试工具和框架，都支持数据驱动的测试，而且除了支持CSV这种最常见的数据源外，还支持xls文件、JSON文件，YAML文件，甚至还有直接以数据库中的表作为数据源的，比如QTP就支持以数据库中的表作为数据驱动的数据源。</p>\n</li>\n<li>\n<p><strong>数据驱动测试的数据文件中不仅可以包含测试输入数据，还可以包含测试验证结果数据，甚至可以包含测试逻辑分支的控制变量。</strong> 图1中的“Result_LoginSuccess_Flag”变量其实就是用户分支控制变量。</p>\n</li>\n<li>\n<p><strong>数据驱动测试的思想不仅适用于GUI测试，还可以用于API测试、接口测试、单元测试等。</strong> 所以，很多API测试工具（比如SoapUI），以及单元测试框架都支持数据驱动测试，它们往往都是通过Test Data Provider模块将外部测试数据源逐条“喂”给测试脚本。</p>\n</li>\n</ol>\n<h2>页面对象（Page Object）模型</h2>\n<p>为了让你了解“页面对象（Page Object）模型”这个概念的来龙去脉，并能够深入理解这个概念的核心思想，我会先从早期的GUI自动化测试开始讲起。</p>\n<p>早期的GUI自动化测试脚本，无论是用开源的Selenium开发，还是用商用的QTP（Quick Test Professional，现在已经改名为Unified Functional Testing）开发，脚本通常是由一系列的页面控件的顺序操作组成的，如图2所示的伪代码展示了一个典型的早期GUI测试脚本的结构。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/8a/a3/8a7a697eac4f0573eea52dcfe05768a3.png?wh=402*152\" alt=\"\" /></p>\n<center>图2 早期的GUI测试脚本伪代码示例</center>\n<p>我先来简单介绍一下这个脚本实现的功能。</p>\n<ul>\n<li>第1-4行，输入用户名和密码并点击“登录”按钮，登录完成后页面将跳转至新页面；</li>\n<li>第5行，在新页面找到“图书”链接，然后点击链接跳转至图书的页面；</li>\n<li>第7-10行，在图书搜索框输入需要查找的书名，点击“搜索”按钮，然后通过assert验证搜索结果；</li>\n<li>第11-12行，用户登出。</li>\n</ul>\n<p>看完这段伪代码，你是不是觉得脚本有点像操作级别的“流水账”，而且可读性也比较差，这主要体现在以下几个方面：</p>\n<ul>\n<li><strong>脚本逻辑层次不够清晰，属于All-in-one的风格，既有页面元素的定位查找，又有对元素的操作。</strong></li>\n<li><strong>脚本的可读性差。</strong> 为了方便你理解，示例中的代码用了比较直观的findElementByName，你可以很方便地从name的取值，比如“username”和“password”，猜出脚本所执行的操作。<br />\n但在实际代码中，很多元素的定位都会采用Xpath、ID等方法，此时你就很难从代码中直观看出到底脚本在操作哪个控件了。也就是说代码的可读性会更差，带来的直接后果就是后期脚本的维护难度增大。<br />\n有些公司自动化测试脚本的开发和维护是两拨人，脚本开发并调试完以后，开发人员就会把脚本移交给自动化测试执行团队使用并维护，这种情况下脚本的可读性就至关重要了。但即使是同一拨人维护，一段时间后，当时的开发人员也会遗忘某些甚至是大部分的开发步骤。</li>\n<li><strong>由于脚本的每一行都直接描述各个页面上的元素操作，你很难一眼看出脚本更高层的业务测试流程。</strong> 比如图2的业务测试流程其实就三大步：用户登录、搜索书籍和用户登出，但是通过阅读代码很难一下看出来。</li>\n<li><strong>通用步骤会在大量测试脚本中重复出现。</strong> 脚本中的某些操作集合在业务上是属于通用步骤，比如上面伪代码的第1-4行完成的是用户登录操作，第11-12行完成的是用户的登出操作。</li>\n</ul>\n<p>这些通用的操作，会在其他测试用例的脚本中被多次重复。无论操作发生变动，还是页面控件的定位发生变化时，都需要同时修改大量的脚本。</p>\n<p>其实，我上面说到的这四点正是早期GUI自动化测试的主要问题，这也是我一直说“开发几个GUI自动化测试玩玩会觉得很高效，但是当你开发成百上千个GUI自动化测试的时候，你会很痛苦”的本质含义。</p>\n<p>那怎么解决这个问题呢？你可能已经想到了软件设计中模块化设计的思想。</p>\n<p><strong>没错，就是利用模块化思想，把一些通用的操作集合打包成一个个名字有意义的函数，然后GUI自动化脚本直接去调用这些操作函数来构成整个测试用例，这样GUI自动化测试脚本就从原本的“流水账”过渡到了“可重用脚本片段”。</strong></p>\n<p>如图3所示，就是利用了模块化思想的伪代码。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/c9/33/c923bb048e0b33ff501e8b1b017b0333.png?wh=451*413\" alt=\"\" /></p>\n<center>图3 基于模块化的GUI测试用例伪代码示例</center>\n<p>第1-6行就是测试用例，非常简单直接，一眼就可以看出测试用例具体在执行什么操作，而各个操作函数的具体内部实现还是之前那些“流水账”。当然这里对于测试输入数据完全可以采用测试驱动方法，这里为了直观我就直接硬编码了测试示例数据。</p>\n<p>实际工程应用中，第1-6行的测试用例和第8-30行的操作函数通常不会放在一个文件中，因为操作函数往往会被很多测试用例共享。这种模块化的设计思想，带来的好处包括：</p>\n<ol>\n<li>\n<p><strong>解决了脚本可读性差的问题，脚本的逻辑层次也更清晰了；</strong></p>\n</li>\n<li>\n<p><strong>解决了通用步骤会在大量测试脚本中重复出现的问题，</strong> 现在操作函数可以被多个测试用例共享，当某个步骤的操作或者界面控件发生变化时，只要一次性修改相关的操作函数就可以了，而不需要去每个测试用例中逐个修改。</p>\n</li>\n</ol>\n<p>但是，这样的设计并没有完全解决早期GUI自动化测试的主要问题，比如每个操作函数内部的脚本可读性问题依然存在，而且还引入了新的问题，即如何把控操作函数的粒度，以及如何衔接两个操作函数之间的页面。</p>\n<p>关于这两个新引入的问题，我会在后面的文章中为你详细阐述。我先来跟你聊聊，怎么解决早期GUI自动化测试的“可读性差、难以维护”问题。</p>\n<p>现在，操作函数的内部实现还只是停留在“既有页面元素的定位查找，又有对元素的操作”的阶段，当业务操作本身比较复杂或者需要跨多个页面时，“可读性差、难以维护”的问题就会暴露得更加明显了。</p>\n<p>那么，有什么更好的办法来解决这个问题吗？答案就是，我要分享的GUI自动化测试的第二个概念：页面对象（Page Object）模型。</p>\n<p><span class=\"orange\">页面对象模型的核心理念是，以页面（Web Page 或者Native App Page）为单位来封装页面上的控件以及控件的部分操作。而测试用例，更确切地说是操作函数，基于页面封装对象来完成具体的界面操作，最典型的模式是“XXXPage.YYYComponent.ZZZOperation”。</span></p>\n<p>基于这个思想，上述用例的伪代码可以进化成如图4所示的结构。这里，我只给出了login函数的伪代码，建议你按照这种思路，自己去实现一下search和logout的代码，这样可以帮你更好的体会页面对象模型带来的变化。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/45/1d/459a4eaeec085ca7c6083651052ab31d.png?wh=1058*424\" alt=\"\" /></p>\n<center>图4 基于页面对象模型的伪代码示例</center>\n<p>通过这样的代码结构，你可以清楚地看到是在什么页面执行什么操作，代码的可读性以及可维护性大幅度提高，也可以更容易地将具体的测试步骤转换成测试脚本。</p>\n<h2>总结</h2>\n<p>今天我给你讲了什么是数据驱动的测试，让你明白了“测试脚本和数据解耦”的实现方式以及应用场景。接着从GUI自动化测试历史发展演变的角度引出了GUI测试中的“页面对象模型”的概念。</p>\n<p>“测试脚本和数据解耦”的本质是实现了数据驱动的测试，让操作相同但是数据不同的测试可以通过同一套自动化测试脚本来实现，只是在每次测试执行时提供不同的测试输入数据。</p>\n<p>“页面对象模型”的核心理念是，以页面为单位来封装页面上的控件以及控件的部分操作。而测试用例使用页面对象来完成具体的界面操作。</p>\n<p>希望这篇文章，可以让你更清楚地认识GUI自动化测试用例的逻辑以及结构。同时，你可能已经发现，这篇文章的内容并不是局限在某个GUI自动化测试框架上，你可以把这些设计思想灵活地运用其他GUI自动化测试项目中，这也是我希望达到的“授人以鱼，不如授人以渔”。</p>\n<h2>思考题</h2>\n<p>我在文中有这样一段描述：页面对象模型的核心理念是，以页面为单位来封装页面上的控件以及控件的部分操作。但是，现在业界对“是否应该在页面对象模型中封装控件的操作”一直有不同的看法。</p>\n<p>有些观点认为，可以在页面对象模型中封装页面控件的操作；而有些观点则认为，页面对象模型只封装控件，而操作应该再做一层额外的封装。</p>\n<p>你更认同哪种观点呢，说说你的理由吧。</p>\n<p>欢迎你给我留言。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":17651,"user_name":"康美之心 淇水之情","can_delete":false,"product_type":"c1","uid":1165041,"ip_address":"","ucode":"E9B871CD2058B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c6/f1/c10797f9.jpg","comment_is_top":true,"comment_ctime":1532839565,"is_pvip":false,"replies":[{"id":"6241","content":"哈哈，你说的完全在点子上，数据驱动不是用来解决你说的这些问题的，你遇到的这一系列问题我后面会介绍一个比较完美的方案，基本可以统一解决所有这些问题，我会在后买专门讲测试数据的时候详细展开，一定让你有豁然开朗的我感觉，因为我们也是一路走过来的","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1533081183,"ip_address":"","comment_id":17651,"utype":1}],"discussion_count":3,"race_medal":0,"score":"9.2233721543517e+18","product_id":100009601,"comment_content":"觉得data provide只是从行为操作上分离了数据的提供方式，没有从根本上解决自动化测试中测试数据本身的稳定性、快速响应变化、数据丢失、数据被修改的这些难点和blocker，比如生产数据库里的数据没半边会导入并refresh测试环境数据库，之前cases里使用的数据都没有了；比如几个小组在一个系统里使用同一个测试环境数据库，A组正在用的测试数据B组也正在用，B组还要把数据改变一下再用，或者B组用完后测试数据已经发生改变了；比如使用的测试数据本身随着时间是有实效性的到，状态会改变的，从active变成inactive的等；觉得自动化测试的其他方面都不是什么大问题，最主要的阻碍就是测试数据本身(特别是在真实的测试环境上时，单元测试不会有这些问题)，想问一下老师，有没有一些好的方法、方式、工具、工程实践来解决上述这些数据本身的问题？","like_count":28,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421216,"discussion_content":"哈哈，你说的完全在点子上，数据驱动不是用来解决你说的这些问题的，你遇到的这一系列问题我后面会介绍一个比较完美的方案，基本可以统一解决所有这些问题，我会在后买专门讲测试数据的时候详细展开，一定让你有豁然开朗的我感觉，因为我们也是一路走过来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533081183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477035,"avatar":"https://static001.geekbang.org/account/avatar/00/16/89/ab/fd71bd60.jpg","nickname":"年轻的樵夫呦~","note":"","ucode":"7CD927B48F35FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31098,"discussion_content":"牛逼，看你们对话好精彩","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1570881905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1645896,"avatar":"","nickname":"Echo","note":"","ucode":"876C2E5057507D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":32327,"discussion_content":"你还，请问有完整的一个系统的测试脚本案例参考一下吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571024867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17431,"user_name":"红娟","can_delete":false,"product_type":"c1","uid":1164879,"ip_address":"","ucode":"F5988451FC91A6","user_header":"https://static001.geekbang.org/account/avatar/00/11/c6/4f/0c215abf.jpg","comment_is_top":true,"comment_ctime":1532650173,"is_pvip":false,"replies":[{"id":"6089","content":"非常感谢高质量的留言👍，页面对象你可以看文章中最后那张截图，页面对象就是把页面元素的定位集中放在一起。","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1532738163,"ip_address":"","comment_id":17431,"utype":1}],"discussion_count":2,"race_medal":0,"score":"9.2233720856321004e+18","product_id":100009601,"comment_content":"首先 周三的例子通过python+seleniun3实现了，并且还开始在项目中开始了脚本编写。有点小小的成就感<br>其次，今天课程的关键词 数据解偶，模块化，页面对象  <br>        数据解偶和模块化我是深有体会的，之前测试项目中有用到自动化，因为是嵌入式设备，所以大多数都是自己写脚本，并没有现成的平台可以用。所以经历很多摸索。一开始是流水账式，后来发现测试用例一多，就无法维护。后来就思考，能不能数据和期望结果是一张表格，测试用例其实就是数据不一样。哇，这一做不得了，测试框架很清晰，测试用例管理很灵活。维护也很简单。效率必须提高。如果早知道有数据解偶这个词就好了😊。会少走很多弯路。<br>       模块化，是写代码的一个必备功能。特别是像我们大多数是基于c开发，如果没有做到模块化，那维护就如看天书😊<br>      页面对象，不是太能理解。我感觉像c++里面的面向对象。狗就一大类，小狗，大狗，哈士奇……，那都是基于狗这个基类继承发展出来的不同属性……。<br><br>最后 回答问题，关于争议问题？我觉得就如标题所说，效率为王，那个形式好用就用那个。那个对提升效率有用就用那个。","like_count":11,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421151,"discussion_content":"非常感谢高质量的留言👍，页面对象你可以看文章中最后那张截图，页面对象就是把页面元素的定位集中放在一起。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532738163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053562,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/7a/791d0f5e.jpg","nickname":"一井二百斤","note":"","ucode":"07CAA26383527D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2842,"discussion_content":"暂时这么理解：面向对象编程的思想，将页面看成是一个对象，页面的元素就是属性，页面可以进行的操作就是行为。元素定位是给对象属性初始化，一系列页面操作可以封装为页面行为（方法）如登录行为。面向对象模型会增加很多层次，但用更接近人的思维方式增强代码可读性，便于维护。期待数据解耦的思想与骚操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563964576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17584,"user_name":"Cynthia🌸","can_delete":false,"product_type":"c1","uid":1163960,"ip_address":"","ucode":"B3A48089794940","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/b8/ec758482.jpg","comment_is_top":false,"comment_ctime":1532759076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48777399332","product_id":100009601,"comment_content":"我们之前采用过这样一种设计：<br>输入数据和要操作的页面元素，都作为数据在外部进行存储，根据不同业务，以用例的形式进行组织并按行存入数据库，一条用例对应有一行记录页面操作，另一行记录输入数据。<br>然后脚本中封装了一些方法，使得操作页面元素的写法更加清晰可读。这样在数据中就可以直接这样写click（id，“username”）表明是点击id=username的页面元素，当然对于更加复杂的页面元素，也设计了可读性较高的写法表示多层获取，方便用例设计人员编写。<br>脚本读取这样表示页面操作的数据之后，抽取出层级关系，即可拿到页面元素。<br>对应的读取输入数据。<br>因此主要的操作步骤和数据内容都放在外部存储，脚本就不必随着业务用例的修改而修改。<br>而对于重复的页面操作则使用了子用例的概念，直接按照编号或名称进行调用，避免冗余。<br>","like_count":11},{"had_liked":false,"id":17433,"user_name":"ll","can_delete":false,"product_type":"c1","uid":1165095,"ip_address":"","ucode":"54584F46564543","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/27/7ff34a0c.jpg","comment_is_top":false,"comment_ctime":1532650509,"is_pvip":false,"replies":[{"id":"6099","content":"很棒的逻辑分析👍","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1532738910,"ip_address":"","comment_id":17433,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48777290765","product_id":100009601,"comment_content":"更倾向于 页面模型只封装控件，这种方法其实也是模块化思想的深一层应用，控件是页面的更小单元，且一个产品或项目中使用的控件种类有限，但是页面却很多，每个页面控件组合方式又不同，在项目中两种方法多次实践后，将控件单独封装后，页面操作又节约大量的开发和维护成本。","like_count":12,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421152,"discussion_content":"很棒的逻辑分析👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532738910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17488,"user_name":"李真真","can_delete":false,"product_type":"c1","uid":1167371,"ip_address":"","ucode":"41E3311E62CA8D","user_header":"https://static001.geekbang.org/account/avatar/00/11/d0/0b/122f08ee.jpg","comment_is_top":false,"comment_ctime":1532679750,"is_pvip":false,"replies":[{"id":"6084","content":"接口测试的含义范围一般更广，api测试是接口测试的一种，接口测试还包括传统软件集成测试中的模块之间的接口","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1532737641,"ip_address":"","comment_id":17488,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44482352710","product_id":100009601,"comment_content":"我一直认为api测试就是接口测试，但是看老师写的貌似有不一样，请问具体有什么区别呢？","like_count":10,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421174,"discussion_content":"接口测试的含义范围一般更广，api测试是接口测试的一种，接口测试还包括传统软件集成测试中的模块之间的接口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532737641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109904,"user_name":"@说了再见","can_delete":false,"product_type":"c1","uid":1202443,"ip_address":"","ucode":"FA8EE493F4553F","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/0b/27420fd7.jpg","comment_is_top":false,"comment_ctime":1562129962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27331933738","product_id":100009601,"comment_content":"我们现在的自动化测试项目每一个 page 都对应一个 PageElement 和 PageOperation 类，前者封装页面元素，后者则是封装页面操作（通过调用 PageElement 中的元素进行定位，操作）","like_count":6},{"had_liked":false,"id":195288,"user_name":"smallfish","can_delete":false,"product_type":"c1","uid":1923145,"ip_address":"","ucode":"EF05549772CF8E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/58/49/985d98c8.jpg","comment_is_top":false,"comment_ctime":1585154096,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14470055984","product_id":100009601,"comment_content":"老师最后的思考题很有意思，我的答案是，各有各的优缺点，应该根据项目实际进行选择。如果按照所有都封装的方案就是四层结构模型，1.页面封装所有元素，2.封装所有元素行为，3.方法封装所有页面操作流程，4.用例层。主要的歧义就在于第二层和第三层是否有必要存在，如果在页面的行为很多的情况下，第二层和第三层存在的必要性就很大。但基于编写GUI自动化一般是用于回归或冒烟测试，并不会将所有用例都进行涵盖的原则，第三层封装的页面行为方法并不会很多，所以我觉得首先第二层没有存在的必要，第三层可以考虑存在。","like_count":3},{"had_liked":false,"id":17481,"user_name":"图·美克尔","can_delete":false,"product_type":"c1","uid":1076720,"ip_address":"","ucode":"021FB5AE110066","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppQqDE6TNibvr3DNdxG323AruicIgWo5DpVr6U7yZVNkbF2rKluyDfhdpgAEcYEOZTAnbrMdTzFkUw/0","comment_is_top":false,"comment_ctime":1532676058,"is_pvip":false,"replies":[{"id":"6085","content":"这个就是一个典型的争议点，只是这个行为的封装是放在属性一起，还是具体属性再包装一个行为class","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1532737766,"ip_address":"","comment_id":17481,"utype":1}],"discussion_count":1,"race_medal":1,"score":"14417577946","product_id":100009601,"comment_content":"我觉得一个对象除了要有属性还得有行为。","like_count":3,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421171,"discussion_content":"这个就是一个典型的争议点，只是这个行为的封装是放在属性一起，还是具体属性再包装一个行为class","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532737766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67049,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1550062128,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10139996720","product_id":100009601,"comment_content":"1.数据驱动这个概念太重要了，从上层设计的角度看，数据分离是必须的，但有时候项目时间紧急，为了尽快满足实现，很多人就忽略了这些上层设计，只顾眼前利益，结果就影响了长远利益；<br><br>2.页面对象模型，这个名词之前就听说了，但是自己在写 selenium 时并没有进行充分的应用，曾经自己还为了 selenium 自动化设计了 4 层的分层实现逻辑，目前看起来和这个页面对象就是一样的道理，果然有理论性指导实践会更轻松；<br><br>3.关于最后的问题，我也觉得不能一概而论，比如我说的 4 层实现（原子操作层、函数层、实现层、用例层），我把登陆操作给放到了函数层，其他的控件操作则都是在用例层，一方面满足了分层和 PO 的要求，另一方面也保证了实现的简化；<br><br>以上，欢迎关注公众号「sylan215」一起沟通交流。","like_count":2},{"had_liked":false,"id":17429,"user_name":"王征","can_delete":false,"product_type":"c1","uid":1130985,"ip_address":"","ucode":"F07FE3C51C00F6","user_header":"https://static001.geekbang.org/account/avatar/00/11/41/e9/586275da.jpg","comment_is_top":false,"comment_ctime":1532650054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10122584646","product_id":100009601,"comment_content":"我同意对操作进行封装的观点，GUI自动化的其中一个问题就是对页面元素的定位操作耗费很多精力去维护，页面元素的多变性也是导致自动化不稳定的原因之一，对操作进行封装能够减少维护脚本的成本，我觉得还是值得投入的","like_count":2},{"had_liked":false,"id":17426,"user_name":"阿廉","can_delete":false,"product_type":"c1","uid":1006607,"ip_address":"","ucode":"A844B0E7FC1F3F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/0f/df1b13e7.jpg","comment_is_top":false,"comment_ctime":1532649364,"is_pvip":false,"replies":[{"id":"6090","content":"嗯嗯，这个目前的确没有标准答案，各自都有自己的优缺点","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1532738217,"ip_address":"","comment_id":17426,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10122583956","product_id":100009601,"comment_content":"个人感觉分开好一些<br>提高了粒度<br>增加了灵活的使用性<br>（入行新手一个月 仅仅是个人感觉）","like_count":2,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421149,"discussion_content":"嗯嗯，这个目前的确没有标准答案，各自都有自己的优缺点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532738217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17421,"user_name":"CoolPanda","can_delete":false,"product_type":"c1","uid":1156121,"ip_address":"","ucode":"8EABAF97BE952A","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/19/e09d3529.jpg","comment_is_top":false,"comment_ctime":1532648640,"is_pvip":false,"replies":[{"id":"6100","content":"你完全对，文中有提到，api测试，单元测试其实都是适用的","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1532738951,"ip_address":"","comment_id":17421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10122583232","product_id":100009601,"comment_content":"数据驱动测试的思想不适用于 GUI测试<br>这个是想说“不仅”适用于GUI吧<br><br>","like_count":2,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421147,"discussion_content":"你完全对，文中有提到，api测试，单元测试其实都是适用的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532738951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232804,"user_name":"捷后愚生","can_delete":false,"product_type":"c1","uid":1170483,"ip_address":"","ucode":"A1F935D39C8488","user_header":"https://static001.geekbang.org/account/avatar/00/11/dc/33/a68c6b26.jpg","comment_is_top":false,"comment_ctime":1594121513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889088809","product_id":100009601,"comment_content":"要理解Page Object模型，最好是有编程经验，不然刚开始的时候挺难理解模块化思想，特别是页面多了的时候，不知道是哪个调用了哪个，页面之间的跳转关系，页面之间传递driver。<br><br>老师这篇文章是讲得非常清晰了，赞！<br><br>按照老师这篇文章，我接触到的老师教授Page Object模型的课程，是在基于模块化的 GUI 测试用例和基于页面对象模型之间，使用了页面对象，但是操作方法内部的脚本可读性问题依然存在。<br><br>还有一点，学习Page Object模型时，千万不要直接埋头研究脚本代码，而是要从业务角度来理解脚本代码。","like_count":1},{"had_liked":false,"id":212028,"user_name":"刘莹","can_delete":false,"product_type":"c1","uid":1272589,"ip_address":"","ucode":"1328C8DC3A4C19","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/0d/2ad3a879.jpg","comment_is_top":false,"comment_ctime":1588048877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883016173","product_id":100009601,"comment_content":"自动化测试脚本在什么时期进行开发？等程序交付验收后吗？","like_count":1},{"had_liked":false,"id":204370,"user_name":"Maxwell","can_delete":false,"product_type":"c1","uid":1086275,"ip_address":"","ucode":"720A00AD472616","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/43/0e84492d.jpg","comment_is_top":false,"comment_ctime":1586392873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881360169","product_id":100009601,"comment_content":"页面方法的封装和调用都在一个文件里面么，还是分开呢？","like_count":1},{"had_liked":false,"id":90244,"user_name":"Geek__c1668bdf82c6","can_delete":false,"product_type":"c1","uid":1460894,"ip_address":"","ucode":"D73CDA5B844AB6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLoTzR54OKKhIhPsUZ0N84oViaMf7xia9IickJ0zsicpVMza9gdtegNmN3Bw5EJictRACFcubTp9xpJmRQ/132","comment_is_top":false,"comment_ctime":1556458050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5851425346","product_id":100009601,"comment_content":"我们之前写代码，数据放在单独地文件中，元素定位放在yaml文件中，实现数据和代码分离，不管数据还是页面ui变化，直接修改数据文件和yaml文件就可以了，节省维护成本，另外，我们会对共用功能进行封装，对不同页面进行封装，减少重复代码的使用，提高代码的质量，测试用例直接调用就可以了","like_count":1},{"had_liked":false,"id":74978,"user_name":"小寞子。(≥3≤)","can_delete":false,"product_type":"c1","uid":1206545,"ip_address":"","ucode":"6D978BDCBB2862","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/11/831cec7d.jpg","comment_is_top":false,"comment_ctime":1552346914,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5847314210","product_id":100009601,"comment_content":"个人觉得可以让人工智能介入。利用图像识别。未来这方面是有潜力的。","like_count":1},{"had_liked":false,"id":31611,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1003571,"ip_address":"","ucode":"58D6AFA7C905AF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/33/43833f7c.jpg","comment_is_top":false,"comment_ctime":1539245635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5834212931","product_id":100009601,"comment_content":"你这里所说的页面对象, 应该就是类似MVVM的ViewModel, ViewModel是应该包含页面的操作","like_count":1},{"had_liked":false,"id":17583,"user_name":"图·美克尔","can_delete":false,"product_type":"c1","uid":1076720,"ip_address":"","ucode":"021FB5AE110066","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppQqDE6TNibvr3DNdxG323AruicIgWo5DpVr6U7yZVNkbF2rKluyDfhdpgAEcYEOZTAnbrMdTzFkUw/0","comment_is_top":false,"comment_ctime":1532758688,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5827725984","product_id":100009601,"comment_content":"争论这个也没啥意思，如果代码写出来是给人看给人维护的关键是代码层级要清晰，注释要到位，结构要合理。其他不影响代码性能功能和使用效率的怎么组织都行啊……","like_count":1},{"had_liked":false,"id":335910,"user_name":"Geek_9e7b2d","can_delete":false,"product_type":"c1","uid":1912942,"ip_address":"","ucode":"F34668B03F701F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/TpXzl8Tkc43nScElZibBJDqQ9mUtrrwBhe53w3RRQ3aD4OKMKS8o93BqdLal9DaTz3XTXibIk7kYhAaLFVibqPnWQ/132","comment_is_top":false,"comment_ctime":1645767804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645767804","product_id":100009601,"comment_content":"Page Object 页面对象","like_count":0},{"had_liked":false,"id":335265,"user_name":"小呀么小二郎","can_delete":false,"product_type":"c1","uid":1326905,"ip_address":"","ucode":"149540DCFDF43E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/39/b1558fc9.jpg","comment_is_top":false,"comment_ctime":1645432411,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645432411","product_id":100009601,"comment_content":"脚本和数据解耦这个之前做接口测试的时候就接触到了，页面对象模型是个新知识点，get","like_count":0},{"had_liked":false,"id":316021,"user_name":"Geek_5ed08b","can_delete":false,"product_type":"c1","uid":2473874,"ip_address":"","ucode":"51EB92858BD690","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/z2eIjB1sQWibfiaFCWH2iaVJd35BVcYEYMfcB3GT7VKNvowFc0od1j2YicyLpvh6By8NibxL1eXVxLDUR8JbvX8iawqA/132","comment_is_top":false,"comment_ctime":1634109400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634109400","product_id":100009601,"comment_content":"个人感觉页面对象把控件和操作封装在一起比较好。因为每类控件从业务上基本只会用到一个操作类型，一般不会超过两个。比如文本框就是输入，按钮就是点击，实在有特殊情况就多定义一个对象就好了，把控件和操作分开封装不太值得。","like_count":1},{"had_liked":false,"id":232806,"user_name":"捷后愚生","can_delete":false,"product_type":"c1","uid":1170483,"ip_address":"","ucode":"A1F935D39C8488","user_header":"https://static001.geekbang.org/account/avatar/00/11/dc/33/a68c6b26.jpg","comment_is_top":false,"comment_ctime":1594121656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594121656","product_id":100009601,"comment_content":"对了，还补充一点，老师的伪代码中没有注释说明，其实真实的代码中是要写上注释，方便理解代码。","like_count":0},{"had_liked":false,"id":195196,"user_name":"二进制_1101","can_delete":false,"product_type":"c1","uid":1933516,"ip_address":"","ucode":"28DD5F42B4F11E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/80/cc/8455c6cf.jpg","comment_is_top":false,"comment_ctime":1585145610,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585145610","product_id":100009601,"comment_content":"一直都是页面控件与操作控件封装到一个class里的，因为有属性才有动作，而且我觉得同类调用","like_count":0,"discussions":[{"author":{"id":1933516,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/80/cc/8455c6cf.jpg","nickname":"二进制_1101","note":"","ucode":"28DD5F42B4F11E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214089,"discussion_content":"性能上会更快一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585145684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142565,"user_name":"Gz","can_delete":false,"product_type":"c1","uid":1057466,"ip_address":"","ucode":"78897C7FC7611A","user_header":"https://static001.geekbang.org/account/avatar/00/10/22/ba/7b73c9e1.jpg","comment_is_top":false,"comment_ctime":1571397353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571397353","product_id":100009601,"comment_content":"没有按照页面封装而是按照常用动作封装的，每次想对移动页面上的做操作就传入元素的定位方法和值 我自己的感受还是可以的 一直没有 将内容解除yml 变成数据驱动应该会更舒服 原因也比较简单现在不做 GUI自动化了😂","like_count":0},{"had_liked":false,"id":108101,"user_name":"Ana","can_delete":false,"product_type":"c1","uid":1526019,"ip_address":"","ucode":"41C841FE46CB2B","user_header":"https://static001.geekbang.org/account/avatar/00/17/49/03/7c9b0809.jpg","comment_is_top":false,"comment_ctime":1561682530,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561682530","product_id":100009601,"comment_content":"读完犹如醍醐灌顶<br>之前请教过一个做过自动化测试的朋友，他就跟我说测试框架的概念，就是能更好的组织测试代码，更高效易维护，要实现数据和代码分离。我之前就是全部都放在一起，当元素定位方式或者传递的参数发生变化时，就要改好几个代码。后来用了他这种方式，但是在，从配置文件读取，数据时也遇到了一些问题，譬如在设计时要包含哪一些字段。老师提供的是思路","like_count":0},{"had_liked":false,"id":79517,"user_name":"口水窝","can_delete":false,"product_type":"c1","uid":1004838,"ip_address":"","ucode":"6028B5AA10D8A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/26/154f9578.jpg","comment_is_top":false,"comment_ctime":1553504031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553504031","product_id":100009601,"comment_content":"更倾向于页面封装于控件，而操作在做一次封装，这样页面和操作完全分开，不同的对象去操作，更透明！","like_count":0},{"had_liked":false,"id":71632,"user_name":"wyy","can_delete":false,"product_type":"c1","uid":1367899,"ip_address":"","ucode":"3C2C74C75BDBF2","user_header":"https://static001.geekbang.org/account/avatar/00/14/df/5b/035b3c2c.jpg","comment_is_top":false,"comment_ctime":1551404240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551404240","product_id":100009601,"comment_content":"老师，你说的通过web url,自动生成页面上所有控件的定位信息，这个能具体解释下实现原理吗","like_count":0},{"had_liked":false,"id":48139,"user_name":"年轻人的瞎折腾^.","can_delete":false,"product_type":"c1","uid":1266462,"ip_address":"","ucode":"179997C9622609","user_header":"https://static001.geekbang.org/account/avatar/00/13/53/1e/7d098b33.jpg","comment_is_top":false,"comment_ctime":1544366583,"is_pvip":false,"replies":[{"id":"17347","content":"这个取决于你的后台架构以及相应的缓冲机制，没法一概而论","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1544488574,"ip_address":"","comment_id":48139,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1544366583","product_id":100009601,"comment_content":"我们主要做后台服务，大部分都是对接口进行自动化，当多个接口一起运行时，有缓存的影响等，容易耦合，请问后台接口自动化如何解耦？","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432045,"discussion_content":"这个取决于你的后台架构以及相应的缓冲机制，没法一概而论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544488574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37288,"user_name":"年轻人的瞎折腾^.","can_delete":false,"product_type":"c1","uid":1266462,"ip_address":"","ucode":"179997C9622609","user_header":"https://static001.geekbang.org/account/avatar/00/13/53/1e/7d098b33.jpg","comment_is_top":false,"comment_ctime":1541518467,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1541518467","product_id":100009601,"comment_content":"现在在处理API自动化，想了解一下如何高效用例，减少复用<br>","like_count":0},{"had_liked":false,"id":36041,"user_name":"_山顶","can_delete":false,"product_type":"c1","uid":1208941,"ip_address":"","ucode":"B34AE8150677BC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIrZg3zI65LUz8tuyPeFibqGC7ibNlYG1Z30agpxRjHb8jqcssib3uDiapJzEhIbxibcfpxtJVs9orHmxw/132","comment_is_top":false,"comment_ctime":1540901969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540901969","product_id":100009601,"comment_content":"针对老师最后提出的问题，我认为可以在页面对象模型中封装页面控件的操作，虽然我刚接触测试不久，但是对于面向对象编程的概念之前有所了解，所以也就更倾向于在对象模型中同时封装页面控件的操作，我认为这样的好处是我们在获得这个对象模型的同时也获得了该页面控件的操作权，这样对于自动化执行各种控件的操作来说，是比较便捷的，可以提高自动化执行的效率","like_count":0},{"had_liked":false,"id":35795,"user_name":"johnny","can_delete":false,"product_type":"c1","uid":1210226,"ip_address":"","ucode":"54E78B7BBC6AF0","user_header":"https://static001.geekbang.org/account/avatar/00/12/77/72/8f77ddb0.jpg","comment_is_top":false,"comment_ctime":1540804550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540804550","product_id":100009601,"comment_content":"我读完后，一套测试脚本可以抽象出三个类。<br>测试用例类：定义一个测试用例；<br>操作函数类：放测试用例调用的操作函数；<br>页面类（page object）：放置被封装的页面控件；","like_count":0},{"had_liked":false,"id":35794,"user_name":"johnny","can_delete":false,"product_type":"c1","uid":1210226,"ip_address":"","ucode":"54E78B7BBC6AF0","user_header":"https://static001.geekbang.org/account/avatar/00/12/77/72/8f77ddb0.jpg","comment_is_top":false,"comment_ctime":1540804126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540804126","product_id":100009601,"comment_content":"写的太好了。","like_count":0},{"had_liked":false,"id":35012,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1540381580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540381580","product_id":100009601,"comment_content":"若数据从数据库中获取，会不会影响测试用例运行速度？","like_count":0},{"had_liked":false,"id":34363,"user_name":"ddd","can_delete":false,"product_type":"c1","uid":1271169,"ip_address":"","ucode":"CF4874C1DB24A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eozpyAUaM6ra399Clj7XH15icIUGt4JKNqicwCw9qib8HTsp3heiaaZicmiawuoMMlN4CEcEibAibmlkGBP9A/132","comment_is_top":false,"comment_ctime":1540127488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540127488","product_id":100009601,"comment_content":"看完后，第一个感觉就是，这个东西可以当作爬虫用了","like_count":0},{"had_liked":false,"id":20855,"user_name":"木主人","can_delete":false,"product_type":"c1","uid":1166499,"ip_address":"","ucode":"27A227F66F357A","user_header":"https://static001.geekbang.org/account/avatar/00/11/cc/a3/48f12a75.jpg","comment_is_top":false,"comment_ctime":1534776227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1534776227","product_id":100009601,"comment_content":"讨论区很精彩。","like_count":0},{"had_liked":false,"id":19424,"user_name":"楚耳","can_delete":false,"product_type":"c1","uid":1068208,"ip_address":"","ucode":"7661633F3297C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/b0/f22017b0.jpg","comment_is_top":false,"comment_ctime":1533821958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533821958","product_id":100009601,"comment_content":"老师你提到的数据与脚本分离，文章提到了CSV登录数据，由于不同的数据字段不一样，如果是购买数据，字段跟登录肯定不一样，这样是不是要为各种测试数据准备一个CSV文件。就是说一整套GUI测试是不是就有多个csv文件。而不是都写在一个csv文件中","like_count":0},{"had_liked":false,"id":18557,"user_name":"晴天","can_delete":false,"product_type":"c1","uid":1164013,"ip_address":"","ucode":"AF7F1E39EE1F5A","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/ed/db97ffe5.jpg","comment_is_top":false,"comment_ctime":1533450140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533450140","product_id":100009601,"comment_content":"页面对象模型上面第三点，应该是不仅适用于吧？","like_count":0},{"had_liked":false,"id":18155,"user_name":"Jecy-8","can_delete":false,"product_type":"c1","uid":1016276,"ip_address":"","ucode":"2AE1575B9E63A6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/d4/e92abeb4.jpg","comment_is_top":false,"comment_ctime":1533170478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533170478","product_id":100009601,"comment_content":"GUI测试上没有什么经验，单纯以自己的测试经验发表一下观点，有错误还请指正。我认为从设计的角度上来说，将操作单独抽出来比较符合模块化设计，不过具体还是要根据实际情况来看，如果操作大部分可供多个页面使用那么分离出来是最好的，如果操作大部分都是跟页面特定相关的，那么抽出来就失去了原有的意义，或者是否能两者结合？","like_count":0},{"had_liked":false,"id":18094,"user_name":"两只左手","can_delete":false,"product_type":"c1","uid":1191413,"ip_address":"","ucode":"7CA2F8D067C0E1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erDsuUSbPuXfqKicpsPWiaickTYfpKwC2tgpapsENhSibFYT6fPEicY27ynazcTzRQwQUyw7Bv8Bn7ys4A/132","comment_is_top":false,"comment_ctime":1533126950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533126950","product_id":100009601,"comment_content":"适合自己的才是最好的，选用哪种方法，主要看自己要测试的对象是什么样的吧。有一个问题，再封装一层的方法，是不是就是三层架构呢？我觉得如果被测对象比较复杂的话，最好再封装一层。这样后期的维护会更方便。","like_count":0},{"had_liked":false,"id":17836,"user_name":"涅槃Ls","can_delete":false,"product_type":"c1","uid":1163943,"ip_address":"","ucode":"39EDBFB303D668","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/a7/c4de1048.jpg","comment_is_top":false,"comment_ctime":1532995109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532995109","product_id":100009601,"comment_content":"打卡13","like_count":0},{"had_liked":false,"id":17691,"user_name":"Mafia","can_delete":false,"product_type":"c1","uid":1170195,"ip_address":"","ucode":"E067D76430A077","user_header":"https://static001.geekbang.org/account/avatar/00/11/db/13/bf8f0ac2.jpg","comment_is_top":false,"comment_ctime":1532877514,"is_pvip":false,"replies":[{"id":"6239","content":"你希望更多看到的是哪方面的内容？其实目前互联网企业整体在gui测试上的投入都逐渐在减小","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1533080932,"ip_address":"","comment_id":17691,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532877514","product_id":100009601,"comment_content":"没有必要在 “传统“这个层面讲很多..","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421232,"discussion_content":"你希望更多看到的是哪方面的内容？其实目前互联网企业整体在gui测试上的投入都逐渐在减小","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533080932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17586,"user_name":"要做出好饭","can_delete":false,"product_type":"c1","uid":1177543,"ip_address":"","ucode":"4C04EFC0EC872A","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/c7/0313a73e.jpg","comment_is_top":false,"comment_ctime":1532760370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532760370","product_id":100009601,"comment_content":"更赞同控件封装与操作分离，这样在页面元素定位变化的时候，能更好的解偶，维护量也比较小","like_count":0},{"had_liked":false,"id":17578,"user_name":"arthur","can_delete":false,"product_type":"c1","uid":1116981,"ip_address":"","ucode":"EAD9D9D2837C5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/35/2c56c29c.jpg","comment_is_top":false,"comment_ctime":1532756709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532756709","product_id":100009601,"comment_content":"以前的项目中，用的是data driven的模式，软件装好后，会导入数据库，然后用既有数据进行测试。<br>现在的项目中，不停做新功能，数据都是现造，然后数据中会加时间戳 ，用这些现造的数据测试，并不会用到data driven模式。","like_count":0},{"had_liked":false,"id":17537,"user_name":"hohofugao","can_delete":false,"product_type":"c1","uid":1185996,"ip_address":"","ucode":"864F099E9A70AD","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/cc/50fa3518.jpg","comment_is_top":false,"comment_ctime":1532735490,"is_pvip":false,"replies":[{"id":"6245","content":"后年专门会有文章来讲api测试的，期待一下吧","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1533081357,"ip_address":"","comment_id":17537,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532735490","product_id":100009601,"comment_content":"老师讲讲接口测试，有没有好的实践","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421186,"discussion_content":"后年专门会有文章来讲api测试的，期待一下吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533081357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17445,"user_name":"杜艳","can_delete":false,"product_type":"c1","uid":1168516,"ip_address":"","ucode":"8D46A8CF33E9C7","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/84/7f584cb2.jpg","comment_is_top":false,"comment_ctime":1532652194,"is_pvip":false,"replies":[{"id":"6086","content":"目前没有提供源代码下载，因为都是示例性质的简单代码","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1532737815,"ip_address":"","comment_id":17445,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532652194","product_id":100009601,"comment_content":"有源代码下载吗","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421158,"discussion_content":"目前没有提供源代码下载，因为都是示例性质的简单代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532737815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}