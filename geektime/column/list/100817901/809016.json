{"id":809016,"title":"07｜改进RAG应用：诊断调试和支持Java、.NET的MIS系统","content":"<p>你好，我是叶伟民。</p><p>上一节课我们完成了实战案例1的代码。然而这只是个demo，如果要支持更多的用例，支持更多的模块，我们需要添加更多选项序号和提示。</p><p>但是这又会引起一个新问题，用户在用我们系统的时候，你并没有在旁边看着，你怎么知道如何添加这些内容呢？你又怎么知道如何改进呢？</p><p>这就是我们今天要讨论的主题——诊断与调试。我们先开始第一步，查看用户的提问。</p><h2>查看用户的提问</h2><p>前面我们已经把对话记录保存在数据库里面了。现在，我们只需要在管理员界面添加相关模块就可以查看它们了。</p><h3>启用管理员界面</h3><p>首先，我们需要启用管理员界面。</p><p>我们打开<strong>实战案例1\\改造前\\mysite\\urls.py</strong> 文件。然后把第7行的注释取消掉。</p><pre><code class=\"language-python\">from django.contrib import admin\nfrom django.urls import include, path\n\napp_name = \"home\"\nurlpatterns = [\n&nbsp; &nbsp; path('', include('home.urls')),\n&nbsp; &nbsp; path('admin/', admin.site.urls),\n]\n</code></pre><p>然后重新运行，打开浏览器，导航到 <a href=\"http://127.0.0.1:8000/admin\">http://127.0.0.1:8000/admin</a>。将会出现以下界面。<br>\n<img src=\"https://static001.geekbang.org/resource/image/af/5e/af5e0cf631fa0218145081yyae66f25e.jpg?wh=1990x715\" alt=\"\"></p><!-- [[[read_end]]] --><p>然后我们还需要添加管理员，设置管理员密码，才能登录管理员界面。</p><h3>添加管理员</h3><p>我们回到 <strong>Anaconda Powershell Prompt</strong>。按ctrl+c停止运行，然后输入以下命令。</p><pre><code class=\"language-python\">python manage.py createsuperuser\n</code></pre><p>这时将会出现以下提示。</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/bb/d5484c0cc53e805caaa87356892b63bb.jpg?wh=1946x117\" alt=\"\"></p><p>我们输入admin。然后在接下来的Email Address输入 “admin@admin.com”。</p><p>Password和Password(again)都输入admin。如果需要跳过密码验证这一步，这里输入y。</p><p>如果一切顺利，将会提示超级用户创建成功。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/b3/270b8556157a3ea4764b703eab229eb3.jpg?wh=1139x101\" alt=\"图3\"></p><p>然后我们重新运行，打开浏览器，导航到<a href=\"http://127.0.0.1:8000/admin\">http://127.0.0.1:8000/admin</a>。用户名输入admin，密码输入admin，点击登录。</p><p>然后我们将会看到如下界面。<br>\n<img src=\"https://static001.geekbang.org/resource/image/38/53/38e6a3097fd1b95b1041b7cc42532753.jpg?wh=975x341\" alt=\"\"></p><h3>在管理员界面添加对话记录模块</h3><p>不过，现在这个管理员界面并没有地方可以查看对话记录。我们还需要在管理员界面添加对话记录模块。</p><p>我们打开实战案例1\\改造前\\home\\admin.py文件。在文件尾部添加以下代码。</p><pre><code class=\"language-python\">from .models import 对话记录\n\nclass 对话记录Admin(admin.ModelAdmin):\n&nbsp; &nbsp; ordering = [\"created_time\"]\n&nbsp; &nbsp; list_display = ['已结束','created_time','不带入大模型对话中','role', 'content', '处理后content','提交给大模型的payload']\n&nbsp; &nbsp; search_fields = ['已结束']\n&nbsp; &nbsp; list_filter = ('已结束',)\n\nadmin.site.register(对话记录, 对话记录Admin)\n</code></pre><p>这段代码很好理解，其中第1行导入对话记录模型。第3行到第7行声明了对话记录模块在管理员界面里面的表现方式。第9行将对话记录模块注册到了管理员界面。</p><p>添加完刚才的代码，我们重新运行，打开浏览器登录管理员界面。这时将会看到以下界面。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/3e/e79f8yy27a2cdf29c01080c204b4383e.jpg?wh=968x393\" alt=\"\"></p><p>点击“对话记录”来链接之后，我们可以看到后面这几项内容。</p><p>首先是用户的对话记录。</p><p><img src=\"https://static001.geekbang.org/resource/image/98/ae/98b9037edae77c1c5b9e87c2623c13ae.jpg?wh=1934x581\" alt=\"\"></p><p>然后是大模型返回的结构化结果和AI处理后的结果。<br>\n<img src=\"https://static001.geekbang.org/resource/image/68/7a/689db3be08a01d3232b212d2fa4c487a.jpg?wh=1624x450\" alt=\"\"></p><p>另外还有提交给大模型的payload。<br>\n<img src=\"https://static001.geekbang.org/resource/image/yy/d2/yyf0c4e6c3b09697ed5ac84157801dd2.jpg?wh=1938x490\" alt=\"\"></p><p>细心的同学可能会注意到，提交给大模型的payload里面的文字是乱码，这样是否会影响到调试和诊断呢？</p><p>实际上，我们并不需要查看这些文字，我一般只关心payload里面有多少条messages，前面的内容在提交时有没有遗漏。如果你一定要查看，网上有很多unicode转中文的小工具，自行搜索一下就会发现很多。</p><p>现在我们可以根据前面这些信息来改进我们的RAG质量。和我们上节课讲的一样，如果示例不够多，那就加示例；如果对大模型结果做的进一步处理不到位，那就加上对应代码；如果大模型还是出现其他意外，那就参考之前<a href=\"https://time.geekbang.org/column/article/807859\">第五节课“</a>让大模型不要那么啰嗦”一节中所说的，添加更多指令。</p><p>讲到这里，我们实战案例1的相关代码都讲解完了。但是目前的代码还很乱。因此，我们需要整理一下代码。</p><h2>整理一下代码</h2><p>我们可以使用python的region关键词将同一类型的函数归类到一起。我们用VSCode打开项目以后，就可以使用ctrl+shift+a快捷键把<br>\n<strong>rag.py文件</strong>的代码按region折叠。这时代码将会变成后面这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/71/2778b117f180084825cf7f1592273971.jpg?wh=1990x1265\" alt=\"\"></p><p>你可以在<a href=\"https://github.com/weiminye/time-geekbang-org-rag/blob/main/%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B1/%E6%94%B9%E9%80%A0%E5%90%8E/home/rag.py\">这里</a>查看完整的rag.py代码。另外，我们会在这门专栏的最后一节课使用AI帮助我们认真的重构代码。</p><h2>如何将本实战案例代码重用到你的MIS系统？</h2><p>这里还有一个问题，有很多MIS系统并非使用Python编写，而是使用Java或.NET编写。那么如何将本实战案例的代码重用到你的MIS系统呢？</p><p>其中一个方案是将这个实战案例的代码从Python改成Java或.NET。然而AI基本是Python的世界，要想在AI的大道上走得更远，我并不建议你采用这个方案。</p><p>还有一个方案就是将现有的MIS系统从Java或.NET全部改成Python。这个方案工程量实在是太大，风险实在是太高。我也不建议你采用这个方案。</p><p>另一个方案是将这个实战案例的功能开放成API接口，提供给现有的MIS系统调用。这个方案是比较可行的，我们现在就来动手做做！</p><h3>新增接口</h3><p>我们在<strong>实战案例1\\改造后\\home</strong> 目录下新增一个文件，命名为 <strong>views_api.py</strong>。然后添加后面的代码。</p><pre><code class=\"language-python\">from django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.core import serializers\n\nfrom .rag import *\ndef 开始新的对话api(request):\n&nbsp; &nbsp; 开始新的对话()\n&nbsp; &nbsp; return JsonResponse({\"code\":200,\"message\":\"已经成功开始新的对话\"})\n\n@csrf_exempt\ndef 获取结构化数据查询参数api(request):\n&nbsp; &nbsp; 用户输入 = request.POST['question']\n\n&nbsp; &nbsp; 查询参数 = 获取结构化数据查询参数(用户输入)\n&nbsp; &nbsp; return JsonResponse({\"querydata\":查询参数})\n\ndef 从数据库查不到相关数据时的操作api(request):\n&nbsp; &nbsp; 从数据库查不到相关数据时的操作()\n&nbsp; &nbsp; return JsonResponse({\"code\":200,\"message\":\"已经成功执行从数据库查不到相关数据时的操作\"})\n\n@csrf_exempt\ndef 根据查询结果回答用户输入api(request):\n&nbsp; &nbsp; 用户输入 = request.POST['question']\n&nbsp; &nbsp; 查询结果 = request.POST['query-result']\n\n&nbsp; &nbsp; 根据查询结果回答用户输入(查询结果,用户输入)\n&nbsp; &nbsp; return JsonResponse({\"code\":200,\"message\":\"已经成功根据查询结果回答用户输入\"})\n\ndef 获取对话记录api(request):\n&nbsp; &nbsp; conversation_list = 获取当前对话记录()\n&nbsp; &nbsp; conversation_list_json = serializers.serialize(\"json\", list(conversation_list))\n&nbsp; &nbsp; return JsonResponse({\"conversationlist\":conversation_list_json})\n</code></pre><p>以上代码总共有5个接口，接口的功能都是我们之前接触过的。</p><p>除了新增接口，我们还需要修改rag.py和views.py文件。</p><p>第一处要修改的是<strong>开始新的对话</strong>函数。原因是views_api.py和views.py都重用了这个函数。首先我们打开views.py文件，将newtalk函数修改成以下模样。</p><pre><code class=\"language-python\">def newtalk(request):\n&nbsp; &nbsp; 开始新的对话()\n&nbsp; &nbsp; return redirect(reverse('home:index'))\n</code></pre><p>现在我们看到，第2行代码已经和接口文件里面的代码一样了。</p><p>然后打开rag.py文件，在文件尾部新增这个函数。</p><pre><code class=\"language-python\">def 开始新的对话():\n&nbsp; 未结束的对话 = 对话记录.objects.filter(已结束=False)\n&nbsp; for current in 未结束的对话:\n&nbsp; &nbsp; &nbsp; current.已结束 = True\n&nbsp; 对话记录.objects.bulk_update(未结束的对话, ['已结束'])\n</code></pre><p>其实就是将这段原来在views.py文件的代码移到了rag.py文件，从而让views_api.py和views.py能够共用它。</p><p>第二处是将获取当前对话记录的代码从views.py文件移到了rag.py文件，从而让views_api.py和views.py共用它。也就是说，我们首先需要在rag.py文件尾部新增这个函数。</p><pre><code class=\"language-python\">def 获取当前对话记录():\n&nbsp; return 对话记录.objects.filter(已结束=False).order_by('created_time')\n</code></pre><p>然后将views.py文件的index函数改成如下模样。</p><pre><code class=\"language-python\">def index(request):\n&nbsp; &nbsp; if request.method == 'POST':\n&nbsp; &nbsp; &nbsp; &nbsp; 用户输入 = request.POST['question']\n\n&nbsp; &nbsp; &nbsp; &nbsp; 查询参数 = 获取结构化数据查询参数(用户输入)\n&nbsp; &nbsp; &nbsp; &nbsp; 查询结果 = None\n&nbsp; &nbsp; &nbsp; &nbsp; if 查询参数 is not None:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 查询结果 = 查询(查询参数)\n\n&nbsp; &nbsp; &nbsp; &nbsp; if 查询结果 is None:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 从数据库查不到相关数据时的操作()\n&nbsp; &nbsp; &nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 查询结果json格式 = serializers.serialize(\"json\", list(查询结果))\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 根据查询结果回答用户输入(查询结果json格式,用户输入)\n\n&nbsp; &nbsp; conversation_list = 获取当前对话记录()\n&nbsp; &nbsp; return render(request, \"home/index.html\",{\"object_list\":conversation_list})\n</code></pre><p>第16行就是我们修改的地方。</p><p>然而细心的同学会发现，第13行也有变化。是的，这就是我们第三处需要修改的地方，把我们这个Python MIS系统才支持的功能从rag.py文件移出来。</p><p>我们需要打开rag.py文件，把将查询结果转为字符串函数修改成以下模样。</p><pre><code class=\"language-python\">def 将查询结果转为字符串(查询结果):\n&nbsp; return_str = \"\"\n&nbsp; data = json.loads(查询结果)\n&nbsp; for current in data:\n&nbsp; &nbsp; if 'fields' in current:\n&nbsp; &nbsp; &nbsp; for key, value in current['fields'].items():\n&nbsp; &nbsp; &nbsp; &nbsp; return_str += f\"{key}：{value}\\n\"\n&nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; for key, value in current.items():\n&nbsp; &nbsp; &nbsp; &nbsp; return_str += f\"{key}：{value}\\n\"\n&nbsp; return return_str\n</code></pre><p>我们可以看到，其实就是把原来的第2行代码从rag.py文件移到了views.py文件的index函数。</p><p>现在我们已经编写完API接口了，我们还需要注册这些接口，才能让外部调用它们。</p><h3>注册接口</h3><p>我们打开<strong>home\\urls.py</strong> 文件，在第11行之前插入以下代码。</p><pre><code class=\"language-python\">path(\"api/new-talk\", views_api.开始新的对话api, name=\"api-new-talk\"),\npath(\"api/get-query-paras\", views_api.获取结构化数据查询参数api, name=\"api-get-query-paras\"),\npath(\"api/answer-without-data\", views_api.从数据库查不到相关数据时的操作api, name=\"api-answer-without-data\"),\npath(\"api/answer-with-data\", views_api.根据查询结果回答用户输入api, name=\"api-answer-with-data\"),\npath(\"api/get-conversation-list\", views_api.获取对话记录api, name=\"api-get-conversation-list\"),\n</code></pre><h3>测试接口</h3><p>现在我们已经注册完接口了，我们重新运行，然后测试接口。</p><p>这里需要我们打开postman，输入以下接口url、提交方法和提交数据。然后进行测试。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/ef/e7f1bc1f62bb19fa1c55964d120744ef.jpg?wh=6781x3336\" alt=\"\"></p><p>需要注意的是，<strong>在测试第2和第5个接口时，我们的key和value是需要添加body里面的，并且数据提交类型下拉列表要选form-data。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/89/6b/89f2f5175ee2fbe62bb7c51223a1c36b.jpg?wh=1990x878\" alt=\"\"></p><p>完成这些操作后，你的Java或者.NET MIS系统就能通过以上接口调用我们的实战案例了。</p><p>至此，我们的实战案例1就结束了。完整的代码可以在<a href=\"https://github.com/weiminye/time-geekbang-org-rag\">这里</a>下载。</p><p>希望你通过这个实战案例能够说服你的利益相关者，说服他支持改造现有的MIS系统，从而真正进入生成式AI这条热门赛道。</p><h2>小结</h2><p>好了，今天这一讲到这里就结束了，最后我们来回顾一下。这一讲我们学会了两件事情。</p><p>第一件事情是通过查看用户的提问来改进我们的RAG应用。我们可以在管理员界面查看用户的提问，借此改进我们的RAG应用。</p><p>第二件事情是如何将实战案例1的代码重用到你的MIS系统。我们可以把rag.py文件里面的函数包装成http接口对外开放，这样你的MIS系统可以通过调用这些http接口来实现RAG功能了。</p><h2>思考题</h2><p>为了教学方便，代码中的数据库字段都是使用中文，但是实际工作中基本是英文，所以传给大模型的都会是英文而不是中文，如何处理这个问题？</p><p>欢迎你在留言区和我交流互动，如果这节课对你有启发，也推荐分享给身边更多朋友。</p>","comments":[{"had_liked":false,"id":395074,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":3920101,"ip_address":"广东","ucode":"19E83C631DF25E","user_header":"https://static001.geekbang.org/account/avatar/00/3b/d0/e5/0a3ee17c.jpg","comment_is_top":false,"comment_ctime":1729303579,"is_pvip":false,"replies":[{"id":143616,"content":"最终会实现，但不是现在，以上一波AI浪潮来说，最终支付宝微信都实现了刷脸支付，但距离OCR革命已经过去多年了。大模型才火一两年，所以目前还没有那么多，我相信五年或十年后，会有很多工具app都会这么做的。","user_name":"作者回复","user_name_real":"编辑","uid":1337319,"ctime":1731380048,"ip_address":"江苏","comment_id":395074,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"本章节讲了如何用自然语言替代以往的查询操作，从而达到节省操作时间提升工作效率，优化用户体验。但是为什么很多工具APP，比如美团订酒店为何没有采用这种方式呢，还是继续使用原来按键的方式。是不是由于比较复杂的操作，通过语音说出来，AI再去理解很容易出错不到位，很容易导致查询不准确。如果一个MIS的查询条件很多，或者保存记录很多字段，AI万一哪个字段搞错了，这种问题要如何解决呢？","like_count":1,"discussions":[{"author":{"id":1337319,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/e7/0d92745d.jpg","nickname":"Billy火炎焱燚(不羁的风)","note":"","ucode":"63DED1EB2CF6AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653662,"discussion_content":"最终会实现，但不是现在，以上一波AI浪潮来说，最终支付宝微信都实现了刷脸支付，但距离OCR革命已经过去多年了。大模型才火一两年，所以目前还没有那么多，我相信五年或十年后，会有很多工具app都会这么做的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731380048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":395913,"user_name":"Geek_fbf3a3","can_delete":false,"product_type":"c1","uid":4033130,"ip_address":"四川","ucode":"98ED0656762DE7","user_header":"","comment_is_top":false,"comment_ctime":1732443431,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"打卡：除字典外另外一个方式，就是让把数据库字典输入大模型，让大模型来转换中文-&gt;英文查询","like_count":0},{"had_liked":false,"id":395460,"user_name":"Geek_fbf3a3","can_delete":false,"product_type":"c1","uid":4033130,"ip_address":"广东","ucode":"98ED0656762DE7","user_header":"","comment_is_top":false,"comment_ctime":1730885680,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"学习打卡：可以增加一个字典表（从配置文件获取），将中文转换为英文","like_count":0}]}