{"id":468940,"title":"大咖助场｜开悟之坡（上）：Rust的现状、机遇与挑战","content":"<p>你好，我是张汉东。</p><p>本月应陈天兄邀请，为他的极客时间课程写一篇加餐文章。2021 年也马上要过去了，我也正好借此机会对 Rust 语言的现状、机遇和挑战来做一次盘点，希望给正在学习 Rust 的朋友提供一个全局视角。这篇文章包含一些客观的数据，也有一些个人观点，仅供参考。</p><h2>Rust 现状</h2><p>要比较全面地评价一个语言的现状，我个人认为要从三个方面分析：</p><ol>\n<li>\n<p><strong>语言自身的成熟度</strong>。从语言自身出发，去看语言的功能特性是否完善、便于开发和学习。</p>\n</li>\n<li>\n<p><strong>语言的生态和应用场景</strong>。从语言的生态系统出发，了解该门语言在哪些领域已经开始布局。</p>\n</li>\n<li>\n<p><strong>可持续发展能力</strong>。从三方面考虑：了解一门语言是开放的，还是封闭的、这门语言背后的开发者是否可以稳定投入到这门语言、这门语言被常应用的领域是否属于可持续发展的领域。</p>\n</li>\n</ol><p>所以，我们按这个分析方法对 Rust 语言进行分析，你也可以按这个方法来审视其他语言。</p><h3>语言自身成熟度</h3><p>Rust 语言 2015年发布 1.0 稳定版开始，已经连续发布了两大版次 2018 Edition 和 2021 Edition。</p><ul>\n<li><code>2015 Edition</code>：<code>Rust 0.1.0 ~ Rust 1.0</code> 稳定版，主题是 “稳定性”</li>\n<li><code>2018 Edition</code>：<code>Rust 1.0 ~ 1.31.0</code> 稳定版，主题是 “生产力”</li>\n<li><code>2021 Edition</code>:  <code>Rust 1.31.0 ~ 1.56.0</code> 稳定版，主题是“成熟”</li>\n</ul><!-- [[[read_end]]] --><p>可以说，Rust 语言已经足够成熟到能将其应用于生产环境。但是判断一门编程语言的成熟度，其实还有很多讲究。</p><p><strong>不同语言的成熟度标准可能不太一样，因为成熟度并不是一个绝对的值，它永远是相对而言的</strong>。 比如 <code>Java</code> 和 <code>Node.js</code> 哪个成熟度更高呢？<code>Java</code> 生态中 <code>Spring</code> 框架已经发展了十几个年头了，足够成熟。但是 <code>Node.js</code>  生态中，也有类似于 <code>AngularJS</code>、<code>Ember.js</code> 这些框架，也被认为是非常成熟的。 要说谁更成熟，这是没有答案的。</p><p>但是也有一些判断成熟度的思路和对应指标，我们可以通过这些指标来相对评判一下 Rust 的成熟度。大致可以分成这样4类：用户、语言、社区活跃性、应用广泛性。</p><p><img src=\"https://static001.geekbang.org/resource/image/55/6d/55c4d6567d49376f07200a8c9546636d.jpg?wh=1920x1012\" alt=\"图片\"></p><ul>\n<li><strong>用户：用户数、StackOverflow问题数量、贡献者数量</strong></li>\n</ul><p>用户数：Rust 连续六年是用户最受欢迎的语言，但实际用户数，可以从 <code>TIOBE</code> 编程语言排行榜中看出来，截止 2021年11月，Rust 排名 29 ，流行度是 <code>0.54%</code> 。任何没有进入 <code>TIOBE</code> 榜单前20的语言，其实都还需要进行营销和宣传，这意味着 Rust 依旧属于小众语言。</p><p>贡献者数量：Rust 贡献者数量截止目前为 <code>3539</code> 个。我们对比一下<code>Github</code>开源的其他语言：流行的 <code>Go</code> 语言目前贡献者是 <code>1758</code>个；<code>Kotlin</code> 目前的贡献者是 <code>516</code> 个。看一下流行的框架 <code>Rails</code> 的贡献者是 <code>4379</code>个。 相对而言，Rust 语言贡献者是相当多的。</p><p>StackOverflow 问题数量：Rust 相关问题一共有 <code>24924</code> 个，平均每周 <code>150</code> 个问题左右，每天 <code>20</code> 个问题左右。 相比其他语言，<code>javascript</code> 问题 <code>2299100</code>  个，<code>Java</code> 问题 <code>1811376</code> 个， <code>Go</code> 问题 <code>57536</code>  个，<code>C</code> 问题 <code>368957</code> 个，<code>Cpp</code>  问题 <code>745313</code>  个。 相比于 <code>Go</code>  ， Rust 的问题数几乎是它的一半。</p><ul>\n<li><strong>语言：错误修补/补丁频率、未解决问题数、存储库统计、新特性发布频率、是否稳定、API修改频率、是否存在“核心开发人员”</strong></li>\n</ul><p>错误修复/补丁频率。根据 <code>Github issues</code> 相关数据， Rust 目前肉眼可见每小时平均修复一个 issue 问题。从 2010年 6月17号 Rust 创始人 Graydon 的第一个提交开始，一共修复了 <code>33942</code> 个<code>issues</code> 和 <code>49011</code> 个 <code>PR</code>，十年间按 <code>3832</code>天计算，平均一天修复 <code>8</code> 个 issue，<code>13</code> 个 <code>PR</code>。</p><p>未解决问题数。目前有 <code>7515</code> 个开放的问题，如果按上面的平均问题修复频率来计算，预计 3 年左右可以修复完毕。3年以后，又是新的 Edition 发布： <code>2024 Edtion</code>。</p><p>存储库统计，目前 star 数有 <code>60500</code> 个，<code>watch</code> 数有 <code>15000</code> 个。新特性发布频率，Rust 稳定版每六周发一个新版。Rust 早已稳定，且稳定版 <code>API</code> 基本不会更改。Rust 核心开发人员非常多，按工作小组来组织分配，参考 <a href=\"https://www.rust-lang.org/governance\">Rust 团队治理</a></p><ul>\n<li><strong>社区活跃性：文档数量和质量、社区响应频率</strong></li>\n</ul><p>文档数量和质量主要看 <code>API</code> 文档、书籍、教程和博客。Rust <code>API</code> 文档相当成熟和先进，目前国内外 Rust 书籍也越来越丰富，Rust Weekly 每周都会发布社区很多 Rust 相关博客、 视频等文章。</p><p>社区响应频率考察有经验的用户如何帮助新用户。Rust 社区国内外都有，通过群组织、论坛、线下活动等帮助社区成员进行交流。</p><ul>\n<li><strong>应用广泛性：商业支持度、知名项目和产品应用的数量、“恐怖事故”的数量</strong></li>\n</ul><p>商业支持度方面，Rust 基金会已经成立：Google、华为、微软、亚马逊、<code>Facebook</code>、Mozilla 、丰田、动视等公司都是其董事成员。</p><p>知名项目和产品应用的数量，比如开源 <code>CNCF</code> 的一些知名项目： 数据库（<code>TiKV</code>）、云原生（<code>Linkerd</code>、<code>Krustlet</code>）、事件流系统（<code>Tremor</code>）、区块链（Near、Solana、 Parity等），还有<code>Google Andriod</code>，亚马逊、 微软等也都支持 Rust 开发。</p><p>国内使用 Rust 的公司：蚂蚁金服、PingCAP、字节跳动、秘猿、溪塔、海致星图、非凸科技等。还有很多优秀的项目或产品这里没有列出来。</p><p>最后是“恐怖事故”的数量，如果没有这一项，证明它并未在实际具有挑战性的生产环境中使用。Rust 有专门的信息安全工作组，并且有专门的网站记录 Rust 生态中相关“恐怖事故” :  <a href=\"https://rustsec.org/\">https://rustsec.org/</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/55/6d/55c4d6567d49376f07200a8c9546636d.jpg?wh=1920x1012\" alt=\"图片\"></p><p>通过上面这些标准来判断， Rust 语言都做的相当到位，所以可以说，Rust 语言基本已经迈入“成熟语言”行列。</p><h3>语言生态与应用场景</h3><p>当然，一个语言自身的成熟度是一方面，围绕语言的生态也相当重要。</p><p>我在今年六月份写的 <a href=\"https://www.infoq.cn/article/umqbighceoa81yij7uyg\">《Rust 2021 行业调研报告》</a> 中提到了 Rust 语言的生态状况，经过半年的发展，crates 的下载总量达到 <code>11,012,362,794</code> 次，即 110 亿次。</p><p>Rust的应用场景基本可以同时覆盖 <code>C/Cpp/Java/Go/Python</code> 的应用领域。大致可以分成十大领域：</p><ol>\n<li>数据处理与服务。 代表产品和项目包括：<a href=\"https://github.com/tikv/tikv\"><code>TiKV</code></a> /  <code>Timely Dataflow</code> / <code>Vector</code> / <code>tantivy</code> /  <code>tremor-rs</code> /  <code>databend</code>等</li>\n<li>云原生。代表产品和项目包括： <code>StratoVirt</code> / <code>Firecracker</code> / <code>Krustlet</code> /  <a href=\"https://github.com/linkerd/linkerd2-proxy\"><code>linkerd2-proxy</code></a> / <code>Lucet</code> / <code>WasmCloud</code> / <code>Habitat</code> 等</li>\n<li>操作系统： <code>Rust for Linux</code> /  <code>Coreutils</code> / <code>Occulum</code> / <code>Redox</code> / <code>Tock</code> /  <code>Theseus</code> 等</li>\n<li>工具类：  <code>rustdesk</code> / <code>ripgrep</code> / <a href=\"https://github.com/nushell/nushell\"><code>NuShell</code></a> / <code>Alacritty</code>  等</li>\n<li>机器学习： <code>Linfa</code> / <code>tokenizers</code> /<code>tch-rs</code> / <code>ndarray</code>  /<code>Neuronika</code>  / <code>tvm-rs</code> / <code>TensorFlow-rs</code></li>\n<li>游戏：<code>Veloren</code> / <code>A / B Street</code> / <code>rust-gpu</code> /  <code>Bevy</code> / <a href=\"https://github.com/rg3dengine/rg3d\">rg3d</a></li>\n<li>客户端开发： 飞书 <code>App</code>  跨平台组件 / <code>flutter_rust_bridge</code> / <code>Iced</code> / <code>Tauri</code> / <code>egui</code> 等</li>\n<li>区块链/元宇宙： <code>Diem</code> / <code>Substrate</code> /<code>Nervos CKB</code> / <a href=\"https://github.com/near\"><code>Near</code></a>/ <code>Solana</code> /  <code>nannou</code> / <code>makepad</code> / <code>makepad</code> 等</li>\n<li>安全：<code>rustscan</code> / <code>feroxbuster</code> / <code>rusty-tor</code> /<code>sn0int</code> / <code>sniffglue</code> 等</li>\n<li>其他语言生态基础设施：比如 <a href=\"https://github.com/swc-project/swc\">swc</a> /  <a href=\"https://github.com/denoland/deno\">deno</a> / <a href=\"https://github.com/rome/tools\">rome</a> 等前端基础设施工具，WebAssembly 技术等。</li>\n</ol><h3>可持续发展能力</h3><p>一个语言的可持续发展能力可以从三方面来了解：<strong>封闭的还是开放的、语言自身的可持续发展能力、语言公司应用的潜力</strong>。</p><p>Rust 语言是完全开源的，它也是世界上最大的开源社区组织。由不同职责的团队和工作组共同协作。具体可以在 <a href=\"https://www.rust-lang.org/zh-CN/governance\">Rust 官网</a>看到相关信息。目前拥有 <code>3539</code> 个贡献者。Rust 语言目前的工作流程和社区，对于 Rust 良性可持续发展拥有积极推动的作用。</p><p>2021 年 2 月 9 号，Rust 基金会宣布成立。华为、<code>AWS</code>、<code>Google</code>、微软、<code>Mozilla</code>、<code>Facebook</code> 等科技行业领军巨头加入 Rust 基金会，成为白金成员，以致力于在全球范围内推广和发展 Rust 语言，为 Rust 语言的开发者们也提供了强有力的资金后盾。</p><p>随后，<code>ARM</code> 、<code>AUTOMATA</code>、<code>1PASSword</code>、丰田汽车、动视、<code>Knoldus</code>  、<code>Tangram</code> 等各个领域的公司都加入了基金会，为推动 Rust 做贡献。最近 Rust 基金会又推选在非营利组织有十五年经验的 <code>Rebecca</code> 成为了基金会的执行董事（ED）和CEO。相信在 Rust 基金会的领导下，Rust 会有广泛的应用前景。</p><p>综合以上三方面， Rust 语言的可持续发展前景非常广阔。</p><h2>Rust 机遇</h2><p>我们分析 Rust 的现状，是为了让自己更全面地了解 Rust 。但 Rust 未来如何发展，对于正在学习 Rust 语言的个人来说，明白 Rust 未来机遇在哪，可能对自身职业规划更有帮助。</p><h3>时代变革中 Rust 有何机遇</h3><p>当下，互联网技术与可再生能源革命正在开启新一轮工业革命的大幕，人类已经站在新时代的门槛上。世界范围内新一轮科技革命和产业变革正在兴起。5G、低纳米制程芯片技术、物联网技术和人工智能，为智慧城市、智慧制造、智慧交通、智能家居等应用带来更多可能。</p><p>这意味着数以百万亿的设备会接入网络，业界在计算、储存和通信能力方面遇到前所未有的异质性，并且在产生数据以及必须交付和使用数据的规模方面也面临新的挑战。</p><p><strong>要构建美好的未来，并没有那么容易。头号的挑战就是安全问题</strong>。由于联网节点分布广、数量多，应用环境复杂，计算和存储能力有限，无法应用常规的安全防护手段，导致整体安全性相对减弱。如果在工业、能源、 电力、交通等国家战略性基础行业中应用，一旦发生安全问题，将造成难以估量的损失。</p><p>基础设施信任链条连接到哪里，安全就能保护到哪里。而Rust 语言正是今天用于构建可信系统的不二选择，可以说，Rust 是<strong>对的时间出现的对的工具（the right tool at the right time）</strong>。</p><p>Rust 丰富的类型系统和所有权模型，保证了内存安全和线程安全，让我们在编译期就能够消除各种各样的错误，并且在性能上可以媲美 <code>C/Cpp</code>。</p><p>理论上，因为 Rust 有比C 更严格的不可变和别名规则，应该比 C 语言有更好的性能优化，不过由于目前在LLVM 中，超越 C语言的优化是一项正在进行的工作，所以Rust仍然没有达到其全部潜力。</p><p>Rust 语言由于没有运行时和垃圾回收，它能够胜任对性能要求特别高的服务，可以在嵌入式设备上运行，还能轻松和其他语言集成。但是，最大的潜力是可以无畏（fearless）地并行化大多数 Rust 代码，而等价的 C 代码并行化的风险非常高。在这方面，Rust 语言是比 C 语言更为成熟的。</p><p>Rust 语言也支持高并发零成本的异步编程，Rust 应该是首个支持异步编程的系统级语言。</p><p>总的来说，Rust 像 C 语言一样也是一门通用型语言，它有极大的潜力成为未来五十年的语言级基础设施。</p><h3>Rust 造就了哪些工作岗位需求</h3><p>因为 Rust 的安全属性，目前在金融领域应用 Rust 的公司比较多，所以目前全球 Rust 工作岗位最多的分布就是“区块链”和“量化金融”。</p><p>基本上目前全球Rust岗位招聘，种类已经非常多了，按数量排名前三的：</p><ol>\n<li>区块链/ 量化金融 / 银行业</li>\n<li>基础设施（云原生平台开发）： 数据库 /  存储 / 数据服务 / 操作系统 / 容器 / 分布式系统</li>\n<li>平台工具类： 远程桌面 / 远程服务类产品 / SaaS / 远程工作类产品（比如Nexthink）</li>\n</ol><p>还有AI / 机器学习 / 机器人、客户端跨平台组件开发、区块链安全/ 信息安全的安全工程师、嵌入式工程师、广告服务商类比如 <code>Adinmo</code>、音视频实时通信工程师，以及电商平台、软件咨询。</p><p>关于具体的 Rust 职位招聘，你可以在 Rust Weekly / Reddit r/Rust 频道 / Rust Magazine 社区月刊 / Rustcc 论坛，以及各大招聘网站中找到。</p><p>Rust 的现状和机遇，我们今天就聊到这里，下半篇会讲一讲 Rust 语言的挑战。</p>","comments":[{"had_liked":false,"id":326782,"user_name":"overheat","can_delete":false,"product_type":"c1","uid":2675695,"ip_address":"","ucode":"DD82D9194C26D0","user_header":"https://static001.geekbang.org/account/avatar/00/28/d3/ef/b3b88181.jpg","comment_is_top":false,"comment_ctime":1639692666,"is_pvip":true,"replies":[{"id":"118727","content":"哈哈咋了，搭配奇妙吗。录音是请正霖主播录的，特邀张汉东老师来写了篇大咖加餐","user_name":"编辑回复","user_name_real":"编辑","uid":"2547771","ctime":1639707277,"ip_address":"","comment_id":326782,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5934659962","product_id":100085301,"comment_content":"陈天的课请了汉东，声音是zhenglin，有趣","like_count":2,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539397,"discussion_content":"哈哈咋了，搭配奇妙吗。录音是请正霖主播录的，特邀张汉东老师来写了篇大咖加餐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639707277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326832,"user_name":"大头君","can_delete":false,"product_type":"c1","uid":1068987,"ip_address":"","ucode":"3497FE575B220B","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/bb/a567f546.jpg","comment_is_top":false,"comment_ctime":1639713913,"is_pvip":false,"replies":[{"id":"118774","content":"有机会 :) Rust  在很多地方都有其能够扮演的角色。比如，用 Rust 写 NIF，用 Rust 写工具链，做一些基础的组件给 javascript, python, elixir 用， 等等","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639792031,"ip_address":"","comment_id":326832,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639713913","product_id":100085301,"comment_content":"哈哈哈 在 tubitv rust 有机会吗😁","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539623,"discussion_content":"有机会 :) Rust  在很多地方都有其能够扮演的角色。比如，用 Rust 写 NIF，用 Rust 写工具链，做一些基础的组件给 javascript, python, elixir 用， 等等","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639792031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1218666,"avatar":"https://static001.geekbang.org/account/avatar/00/12/98/6a/3ddeca6e.jpg","nickname":"losuika","note":"","ucode":"19685B1B00A4F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539581,"discussion_content":"同问哈哈，想体验下国外工作的感觉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639755975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326808,"user_name":"D","can_delete":false,"product_type":"c1","uid":1027596,"ip_address":"","ucode":"5BB4D16FE39BFF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/0c/f39f847a.jpg","comment_is_top":false,"comment_ctime":1639706878,"is_pvip":false,"replies":[{"id":"118777","content":"Rust 语言本身没有运行时，这是和 java (GC runtime)&#47; golang (GC runtime+ goroutine runtime) 这样的语言的本质区别。也就是说你不用异步的时候，不需要引入运行时。","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639792260,"ip_address":"","comment_id":326808,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639706878","product_id":100085301,"comment_content":"陈老师，第九讲中大量提到了运行时，但是这里说没有运行时，那rust到底有没有运行时呢？","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539627,"discussion_content":"Rust 语言本身没有运行时，这是和 java (GC runtime)/ golang (GC runtime+ goroutine runtime) 这样的语言的本质区别。也就是说你不用异步的时候，不需要引入运行时。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639792260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326802,"user_name":"Geek_442d8b","can_delete":false,"product_type":"c1","uid":2820319,"ip_address":"","ucode":"73078A71E7D9E3","user_header":"","comment_is_top":false,"comment_ctime":1639705323,"is_pvip":true,"replies":[{"id":"118776","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639792144,"ip_address":"","comment_id":326802,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639705323","product_id":100085301,"comment_content":"没想到在追更的过程中能看到张老师的文章，有观点、有数据、更有结论，妥妥的又被打了鸡血～","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539625,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639792145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326787,"user_name":"newzai","can_delete":false,"product_type":"c1","uid":1102367,"ip_address":"","ucode":"D5E34D427D65FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/1f/2ef2514b.jpg","comment_is_top":false,"comment_ctime":1639699666,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1639699666","product_id":100085301,"comment_content":"加油，rust  未来40年靠你了","like_count":1},{"had_liked":false,"id":326784,"user_name":"彭亚伦","can_delete":false,"product_type":"c1","uid":2425378,"ip_address":"","ucode":"77A32C73A23F72","user_header":"https://static001.geekbang.org/account/avatar/00/25/02/22/19585900.jpg","comment_is_top":false,"comment_ctime":1639696712,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639696712","product_id":100085301,"comment_content":"哈, 果然是东佬过来助力~","like_count":0}]}