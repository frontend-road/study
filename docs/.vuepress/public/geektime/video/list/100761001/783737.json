{"id":783737,"title":"25｜在条件中使用其它类型（L、R）","content":"","comments":[{"had_liked":false,"id":391717,"user_name":"Jack Q","can_delete":false,"product_type":"c3","uid":1160078,"ip_address":"广东","ucode":"A7DBC311884FFA","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","comment_is_top":false,"comment_ctime":1718899004,"is_pvip":false,"replies":[{"id":142430,"content":"赞的。++","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1718944675,"ip_address":"江苏","comment_id":391717,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"作业: 惰性求值类型\ntype Trans&lt;T&gt; = T;\n\n&#47;&#47; 1.字符串模版\ntype Templete = `${string}_${string}`;&#47;&#47; 包含定界符\n\ntype TempleteT = Trans&lt;Templete&gt;;\n\n&#47;&#47; 2.keyof T\ntype Obj = { a: 1; b: string; c: [number, number] };\n\ntype ObjT = Trans&lt;Obj&gt;;\n\n&#47;&#47; 3.typeof class\nclass C {}\n\ntype CT = Trans&lt;typeof C&gt;\n\n&#47;&#47; let v = { a: &#39;a&#39;, c: C }\n&#47;&#47; function F() {}\n\n&#47;&#47; type VT = Trans&lt;typeof v&gt;\n&#47;&#47; type FT = Trans&lt;typeof F&gt;\n\n&#47;&#47; 4.包含剩余元素语法的元组\ntype RestTuple = [number, boolean, ...boolean[]];\n\ntype RestTupleT = Trans&lt;RestTuple&gt;;\n\n&#47;&#47; 5.mapping 中 index 部分存在惰性求值\ntype Mapping = {\n  [k in Templete]: any\n}\n\ntype MappingT = Trans&lt;Mapping&gt;\n\n&#47;&#47; 6.结构类型交叉\ntype Intersect = Obj &amp; { e: boolean }\n\ntype IntersectT = Trans&lt;Intersect&gt;\n\n&#47;&#47; 7.联合类型\ntype Union = Obj | keyof Obj | [number, number];\n\ntype UnionT = Trans&lt;Union&gt;\n\n&#47;&#47; 8.未实力化的类型\nclass GenericA&lt;T&gt; { s!: [...number[], T];  };\n\ntype TAT = Trans&lt;typeof GenericA.prototype&gt;;\n\n\n&#47;&#47; 9.表达带范型参数的 类型别名\ntype GenericF = &lt;T&gt;() =&gt; T extends boolean ? true : false;\n\ntype TFT = Trans&lt;GenericF&gt;;","like_count":1,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646880,"discussion_content":"赞的。++","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1718944675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3887128,"avatar":"","nickname":"Geek_aeb936","note":"","ucode":"863338D4895F25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649352,"discussion_content":"请教下，以上的都是惰性求值的例子吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1723195715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"日本","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396216,"user_name":"fatme","can_delete":false,"product_type":"c3","uid":1034451,"ip_address":"广东","ucode":"75A805D2BB2AD1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c8/d3/3020ae46.jpg","comment_is_top":false,"comment_ctime":1733643323,"is_pvip":false,"replies":[{"id":143843,"content":"点赞 👍+5","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1733738271,"ip_address":"江苏","comment_id":396216,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"作业：\n\ninterface I {\n    a: number;\n}\ninterface I2 {\n    a: number;\n    b: string;\n}\n\n&#47;&#47; &amp; 两个 interface 会惰性求值\ntype T = I &amp; I2;\ntype T2 = Trans&lt;T&gt;;\n\n&#47;&#47; | 两个结构类型会惰性求值\ntype T3 = I | I2;\ntype T4 = Trans&lt;I | I2&gt;;\ntype T10 = Trans&lt;{a: number;} | {a: number; b: string;}&gt;;\n\n&#47;&#47; 模板字符串的惰性求值\ntype T12 = Trans&lt;`${number}`&gt;;\n\n&#47;&#47; keyof T 当 T 是类型名，且 T 的 property 个数 &gt; 1 时，keyof 会惰性求值\ntype T8 = Trans&lt;keyof I2&gt;; &#47;&#47; I2 property 个数为 2，惰性求值，T8 为 keyof I2\ntype T9 = Trans&lt;keyof I&gt;; &#47;&#47; I property 个数为 1，即时求值，T9 为 &quot;a&quot;\ntype Empty = {};\ntype T17 = Trans&lt;keyof Empty&gt;; &#47;&#47; Empty 的 property 个数为 0，即时求值，T17 为 never\ntype T20 = Trans&lt;keyof {a: number; b: string;}&gt;; &#47;&#47; keyof 的操作数是字面对象类型，不是类型名，即时求值，T20 为 &quot;a&quot; | &quot;b&quot;","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654895,"discussion_content":"点赞 👍+5","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1733738271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393463,"user_name":"Geek_aeb936","can_delete":false,"product_type":"c3","uid":3887128,"ip_address":"日本","ucode":"863338D4895F25","user_header":"","comment_is_top":false,"comment_ctime":1723944286,"is_pvip":false,"replies":[{"id":142887,"content":"惰性求值，与是否实例化在这里是两个视角，有相关性，但不是一个维度下的非此即彼。\n\nT7和B1都是未实例化的类型。在29~30讲的时候会较详细地说明，它们都是“泛型声明”，是还“未实例化”的泛型类型。\n\n关于第一个注释中有关“语义”的说明，详释如下：\n```\n&#47;&#47; 这里的T7是一个泛型声明，T7是一个未实例化的泛型类型\n&#47;&#47; T7实例化之后会得到一个单类型（对象&#47;接口），亦即是说它“是某个单类型的、未实例化的”泛型类型\ntype T7&lt;T&gt; = { a: T, b: T | string };\n\n&#47;&#47; 将T7实例化为它对应的单类型，T71是T7&lt;T&gt;的实例\n&#47;&#47; （这个实例化的过程也是求值过程，并且该求值过程“通常是”惰性求值的）\n&#47;&#47; （在这里我们通常使用“实例化”的语义，而不是求值&#47;惰性求值的语义，是讨论问题的角度不同）\ntype T71 = T7&lt;number&gt;;\n```\n","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1724042166,"ip_address":"江苏","comment_id":393463,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"&#47;* 以下是惰性求值在【单类型】中的情况\n  - 带泛型参数的结构类型（单类型）也是惰性求值的，但在语义上是【实例化】一个泛型声明，而不是求值。\n*&#47;\ntype T7&lt;T&gt; = { a: T, b: T | string }\ntype T8&lt;T&gt; = () =&gt; T | null;\nclass MyClass&lt;X&gt; { foo: T8&lt;X&gt; };\n&#47;&#47; more ...\n\n\n&#47;&#47; 以下两种，都称为“未实例化的类型”：\n&#47;&#47;  - A: 如果工具类型的求值结果是返回一个参数化类型的自身，那么该工具类型可以视为“未实例化的类型”。\n&#47;&#47;  - B: 任何带参数的结构类型，都可以称为“末实例化的类型”。\ntype A1&lt;T&gt; = {[k in keyof T]: any}; &#47;&#47; ex, Record&lt;&gt;\ntype B1&lt;T&gt; = {a: T};  &#47;&#47; ex, Array&lt;&gt;\n\n对于T7 和 B1 十分类似  如何区分实例化还是非实例化？ 这里不太明白","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649838,"discussion_content":"惰性求值，与是否实例化在这里是两个视角，有相关性，但不是一个维度下的非此即彼。\n\nT7和B1都是未实例化的类型。在29~30讲的时候会较详细地说明，它们都是“泛型声明”，是还“未实例化”的泛型类型。\n\n关于第一个注释中有关“语义”的说明，详释如下：\n```\n// 这里的T7是一个泛型声明，T7是一个未实例化的泛型类型\n// T7实例化之后会得到一个单类型（对象/接口），亦即是说它“是某个单类型的、未实例化的”泛型类型\ntype T7&lt;T&gt; = { a: T, b: T | string };\n\n// 将T7实例化为它对应的单类型，T71是T7&lt;T&gt;的实例\n// （这个实例化的过程也是求值过程，并且该求值过程“通常是”惰性求值的）\n// （在这里我们通常使用“实例化”的语义，而不是求值/惰性求值的语义，是讨论问题的角度不同）\ntype T71 = T7&lt;number&gt;;\n```\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724042166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393225,"user_name":"Geek_aeb936","can_delete":false,"product_type":"c3","uid":3887128,"ip_address":"日本","ucode":"863338D4895F25","user_header":"","comment_is_top":false,"comment_ctime":1723196903,"is_pvip":false,"replies":[{"id":142825,"content":"这里，在显示上的确是有版本差异的。但any&#47;string这样的类型确实是特殊处理过的，在35讲还会再讲到。","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1723288977,"ip_address":"江苏","comment_id":393225,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"type T0 = `${any}`\nT0 就是显示type T0 = `${any}`\n和视频中显示为any 又不一样了 \n编译器优化结果？\nVersion 5.5.4","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649397,"discussion_content":"这里，在显示上的确是有版本差异的。但any/string这样的类型确实是特殊处理过的，在35讲还会再讲到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1723288977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396215,"user_name":"fatme","can_delete":false,"product_type":"c3","uid":1034451,"ip_address":"广东","ucode":"75A805D2BB2AD1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c8/d3/3020ae46.jpg","comment_is_top":false,"comment_ctime":1733642440,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"作业：","like_count":0}]}