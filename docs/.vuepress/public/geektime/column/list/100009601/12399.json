{"id":12399,"title":"15 | 过不了的坎：聊聊GUI自动化过程中的测试数据","content":"<p>在前面几篇文章中，我从页面操作的角度介绍了GUI自动化测试，讲解了页面对象模型和业务流程封装，今天我将从测试数据的角度再来谈谈GUI自动化测试。</p>\n<p>为了顺利进行GUI测试，往往需要准备测试数据来配合测试的进行，如果不采用事先数据准备的方式，测试效率将会大打折扣，而且还会引入大量不必要的依赖关系。</p>\n<p>以“用户登录”功能的测试为例，如果你的目的仅仅是测试用户是否可以正常登录，比较理想的方式是这个用户已经存在于被测系统中了，或者你可以通过很方便的方式在测试用例中生成这个用户。否则，难道你要为了测试用户登录功能，而以GUI的方式当场注册一个新用户吗？显然，这是不可取的。</p>\n<p>其实从这里，你就可以看出测试数据准备是实现测试用例解耦的重要手段，你完全不必为了测试GUI用户登录功能而去执行用户注册，只要你能够有方法快速创建出这个登录用户就可以了。</p>\n<p>在正式讨论测试数据的创建方法前，我先来分析一下GUI测试中两种常见的数据类型：</p>\n<ul>\n<li>\n<p>第一大类是，测试输入数据，也就是GUI测试过程中，通过界面输入的数据。比如“用户登录”测试中输入的用户名和密码就就属于这一类数据；再比如，数据驱动测试中的测试数据，也是指这一类。</p>\n</li>\n<li>\n<p>第二大类是，为了完成GUI测试而需要准备的测试数据。比如，“用户登录”测试中，我们需要事先准备好用户账户，以便进行用户的登录测试。今天我分享的测试数据创建的方法，也都是围着这一部分的数据展开的。</p>\n</li>\n</ul><!-- [[[read_end]]] -->\n<p>那么接下来，我就带你一起去看看创建测试数据的方法都有哪些，以及它们各自的优缺点，和适用场景。</p>\n<p>从创建的技术手段上来讲，创建测试数据的方法主要分为三种：</p>\n<ol>\n<li>\n<p>API调用；</p>\n</li>\n<li>\n<p>数据库操作；</p>\n</li>\n<li>\n<p>综合运用API调用和数据库操作。</p>\n</li>\n</ol>\n<p>从创建的时机来讲，创建测试数据的方法主要分为两种：</p>\n<ol>\n<li>\n<p>测试用例执行过程中，实时创建测试数据，我们通常称这种方式为On-the-fly。</p>\n</li>\n<li>\n<p>测试用例执行前，事先创建好“开箱即用”的测试数据，我们通常称这种方式为Out-of-box。</p>\n</li>\n</ol>\n<p><strong>在实际项目中，对于创建数据的技术手段而言，最佳的选择是利用API来创建数据，只有当API不能满足数据创建的需求时，才会使用数据库操作的手段。</strong></p>\n<p><span class=\"orange\">实际上，往往很多测试数据的创建是基于API和数据库操作两者的结合来完成，即先通过API创建基本的数据，然后调用数据库操作来修改数据，以达到对测试数据的特定要求。</span></p>\n<p><strong>而对于创建数据的时机，在实际项目中，往往是On-the-fly和Out-of-box结合在一起使用。</strong></p>\n<p><span class=\"orange\">对于相对稳定的测试数据，比如商品类型、图书类型等，往往采用Out-of-box的方式以提高效率；而对于那些只能一次性使用的测试数据，比如商品、订单、优惠券等，往往采用On-the-fly的方式以保证不存在脏数据问题。</span></p>\n<p>接下来，我就先从测试数据创建的技术手段开始今天的分享吧。</p>\n<h2>基于API调用创建测试数据</h2>\n<p>先看一个电商网站“新用户注册”的例子，当用户通过GUI界面完成新用户注册信息填写后，向系统后台递交表单，系统后台就会调用createUser的API完成用户的创建。</p>\n<p>而互联网产品，尤其是现在大量采用微服务架构的网站，这个API往往以Web Service的形式暴露接口。那么，在这种架构下，你完全可以直接调用这个API来创建新用户，而无须再向后台递交表单。</p>\n<p>由于API通常都有安全相关的token机制来保护，所以实际项目中，通常会把对这些API的调用以代码的形式封装为测试数据工具（Test Data Utility）。</p>\n<p>这种方式最大的好处就是，测试数据的准确性直接由产品API保证，缺点是并不是所有的测试数据都有相关的API来支持。</p>\n<p>另外，对需要大量创建数据的测试来说，基于API调用方式的执行效率，即使采用了并发机制也不会十分理想。为了解决执行效率的问题，就有了基于数据库操作的测试数据创建手段。</p>\n<h2>基于数据库操作创建测试数据</h2>\n<p>实际项目中，并不是所有的数据都可以通过API的方式实现创建和修改，很多数据的创建和修改直接在产品代码内完成，而且并没有对外暴露供测试使用的接口。</p>\n<p>那么，这种情况下，你就需要通过直接操作数据库的方式来产生测试数据。</p>\n<p>同样地，我们可以把创建和修改数据的相关SQL语句封装成测试数据工具，以方便测试用例的使用。但是，如果你正尝试在实际项目中运用这个方法，不可避免地会遇到如何才能找到正确的SQL语句来创建和修改数据的问题。</p>\n<p>因为，创建或修改一条测试数据往往会涉及很多业务表，任何的遗漏都会造成测试数据的不准确，从而导致有些测试因为数据问题而无法进行。</p>\n<p>那么，现在我就提供两个思路来帮你解决这个问题：</p>\n<ol>\n<li>\n<p>手工方式。查阅设计文档和产品代码，找到相关的SQL语句集合。或者，直接找开发人员索要相关的SQL语句集合。</p>\n</li>\n<li>\n<p>自动方式。在测试环境中，先在只有一个活跃用户的情况下，通过GUI界面操作完成数据的创建、修改，然后利用数据库监控工具获取这段时间内所有的业务表修改记录，以此为依据开发SQL语句集。</p>\n</li>\n</ol>\n<p>需要注意的是，这两种思路的前提都是，假定产品功能正确，否则就会出现“一错到底”的尴尬局面。</p>\n<p>基于数据库操作创建测试数据的最大好处是，可以创建和修改API不支持的测试数据，并且由于是直接数据库操作，执行效率会远远高于API调用方法。</p>\n<p>但是，数据库操作这种方式的缺点也显而易见，数据库表操作的任何变更，都必须同步更新测试数据工具中的SQL语句。</p>\n<p>但很不幸的是，在实际项目中，经常出现因为SQL语句更新不及时而导致测试数据错误的问题，而且这里的数据不准确往往只是局部错误，因此这类问题往往比较隐蔽，只有在特定的测试场景下才会暴露。</p>\n<p>所以，在实际工程项目中，需要引入测试数据工具的版本管理，并通过开发流程来保证SQL的变更能够及时通知到测试数据工具团队。</p>\n<h2>综合运用API调用和数据库操作创建测试数据</h2>\n<p>你如果已经理解了基于API调用和基于数据库操作创建测试数据这两类方法，那么综合运用这两类方法，就是使得测试数据工具能够提供更多种类的业务测试数据。</p>\n<p>具体来讲，当你要创建一种特定的测试数据时，你发现没有直接API支持，但是可以通过API先创建一个基本的数据，然后再通过修改数据库的方式来更新这个数据，以此来达到创建特定测试数据的要求。</p>\n<p>比如，你需要创建一个已经绑定了信用卡的新用户，如果创建新用户有直接的API，而绑定信用卡需要操作数据库，那这种情况下就需要综合运用这两种方式完成测试数据工具的开发。</p>\n<h2>实时创建数据：On-the-fly</h2>\n<p><strong>GUI测试脚本中，在开始执行界面操作前，我们往往会通过调用测试数据工具实时创建测试数据，也就是On-the-fly方式。</strong></p>\n<p>这种方式不依赖被测试系统中的任何原有数据，也不会对原有数据产生影响，可以很好地从数据层面隔离测试用例，让测试用例实现“自包含”。</p>\n<p>从理论上讲，On-the-fly是很好的方法，但在实际测试项目中却并不是那么回事儿，往往会存在三个问题：</p>\n<ol>\n<li>\n<p><strong>在用例执行过程中实时创建数据，导致测试的执行时间比较长。</strong> 我曾经粗略统计过一个大型Web GUI自动化测试项目的执行时间，将近30%的时间都花在了测试数据的准备上。</p>\n</li>\n<li>\n<p><strong>业务数据的连带关系，导致测试数据的创建效率非常低。</strong> 比如，你需要创建一个订单数据，而这个订单必然会绑定买家和卖家，以及订单商品信息。<br />\n如果完全基于On-the-fly模式，你就需要先实时创建买家和卖家这两个用户，然后再创建订单中的商品，最后才是创建这个订单本身。<br />\n显然，这样的测试数据创建方式虽然是“自包含”的，但创建效率非常低，会使得测试用例执行时间变得更长，而这恰恰与互联网产品的测试策略产生冲突。</p>\n</li>\n<li>\n<p><strong>更糟糕的情况是，实时创建测试数据的方式对测试环境的依赖性很强。</strong> 比如，你要测试用户登录功能，基于On-the-fly方式，你就应该先调用测试数据工具实时创建一个用户，然后再用这个用户完成登录测试。<br />\n这时，创建用户的API由于各种原因处于不可用的状态（这种情况在采用微服务架构的系统中很常见），那么这时就会因为无法创建用户，而无法完成用户登录测试。</p>\n</li>\n</ol>\n<p>基于这三种常见问题，实际项目中还会引入Out-of-box方式（即在执行测试用例前，预先创建好测试数据）准备测试数据。</p>\n<h2>事先创建测试数据：Out-of-box</h2>\n<p><strong>Out-of-box的含义是开箱即用，也就是说，已经在被测系统中预先创建好了充足的、典型的测试数据。这些数据通常是在搭建测试环境时通过数据库脚本“预埋”在系统中的，后续的测试用例可以直接使用。</strong></p>\n<p>Out-of-box的方式有效解决了On-the-fly的很多问题，但是这种方法的缺点也很明显，主要体现在以下三个方面：</p>\n<ol>\n<li>\n<p><strong>测试用例中需要硬编码（hardcode）测试数据，额外引入了测试数据和用例之间的依赖。</strong></p>\n</li>\n<li>\n<p><strong>只能被一次性使用的测试数据不适合Out-of-box的方式。</strong> 测试用例往往会需要修改测试数据，而且有些测试数据只能被一次性使用。比如，一个商品被买下一次后就不能再用了；再比如，优惠券在一个订单中被使用后，就失效了，等等。所以如果没有很好的全局测试数据管理，很容易因为测试数据失效而造成测试失败。</p>\n</li>\n<li>\n<p><strong>“预埋”的测试数据的可靠性远不如实时创建的数据。</strong> 在测试用例执行过程中，经常会出现测试数据被修改的情况。比如，手动测试，或者是自动化测试用例的调试等情况。</p>\n</li>\n</ol>\n<h2>On-the-fly和Out-of-box的互补</h2>\n<p>基于On-the-fly和Out-of-box的优缺点和互补性，在实际的大型测试项目中，我们往往会采用两者相结合的方式，从测试数据本身的特点入手，选取不同的测试数据创建方式。</p>\n<p>针对应该选择什么时机创建测试数据，结合多年的实践经验，我为你总结了以下三点：</p>\n<ol>\n<li>\n<p>对于相对稳定、很少有修改的数据，建议采用Out-of-box的方式，比如商品类目、厂商品牌、部分标准的卖家和买家账号等。</p>\n</li>\n<li>\n<p>对于一次性使用、经常需要修改、状态经常变化的数据，建议使用On-the-fly的方式。</p>\n</li>\n<li>\n<p>用On-the-fly方式创建测试数据时，上游数据的创建可以采用Out-of-box方式，以提高测试数据创建的效率。以订单数据为例，订单的创建可以采用On-the-fly方式，而与订单相关联的卖家、买家和商品信息可以使用Out-of-box方式创建。</p>\n</li>\n</ol>\n<p>其实，为了更好地解决测试数据本身组合的复杂性和多样性，充分发挥测试数据工具的威力，还有很多大型企业的最佳实践值得讨论，在本专栏后面的测试数据章节，我会再为你详细介绍。</p>\n<h2>总结</h2>\n<p>今天我从创建测试数据的技术手段和时机两个方面，介绍了GUI测试数据的准备。</p>\n<p>在实际测试项目中，往往需要综合运用API调用和数据库操作来创建测试数据，并且会根据测试数据自身的特点，分而治之地采用On-the-fly和Out-of-box的方式，以寻求数据稳定性和数据准备效率之间的最佳平衡。</p>\n<h2>思考题</h2>\n<p>你所在的公司是如何准备GUI测试的测试数据的？遇到了哪些问题，对应的有哪些解决方案呢？</p>\n<p>欢迎你给我留言。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"14 | 更接近业务的抽象：让自动化测试脚本更好地描述业务","id":12135},"right":{"article_title":"16 | 脑洞大开：GUI测试还能这么玩（Page Code Gen + Data Gen + Headless）？","id":12401}},"comments":[{"had_liked":false,"id":17974,"user_name":"假装乐","can_delete":false,"product_type":"c1","uid":1093437,"ip_address":"","ucode":"97A7D0A6D93865","user_header":"https://static001.geekbang.org/account/avatar/00/10/af/3d/28b61e6b.jpg","comment_is_top":false,"comment_ctime":1533078579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"134677064755","product_id":100009601,"comment_content":"数据库监控工具有推荐的吗","like_count":31},{"had_liked":false,"id":18046,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1533105943,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"65957615383","product_id":100009601,"comment_content":"是不是可以这么理解：<br>API 调用和数据库操作创建，本质上都是操作数据库，不过 API 调用是做了一层封装，保证了操作的可控性（避免胡乱写数据库操作语句）。<br>实时创建数据和事先创建测试数据，其实也是不冲突的，我理解他俩并不是互斥的关系，而是互为补充，在 API 调用逻辑内部，先检查数据库中是否存在需要的测试数据，存在则继续，不存在则创建即可。<br>欢迎沟通交流，公众号「sylan215」","like_count":15,"discussions":[{"author":{"id":2060580,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ4icZuUxdMBSttwThbiazAXrLF4sWOkMMQSWIentO1IobXVAXoxA990Hb8icm0PPxhIbpkrYffJBOCw/132","nickname":"浦骥聃","note":"","ucode":"FDB0CF89F4AAC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562121,"discussion_content":"我还想到一点，比如用户表在某次迭代中增加了一个字段，那么如果sql方式的造数语句就需要同步修改；而api方式，则不需要额外的维护。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649774328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233343,"user_name":"捷后愚生","can_delete":false,"product_type":"c1","uid":1170483,"ip_address":"","ucode":"A1F935D39C8488","user_header":"https://static001.geekbang.org/account/avatar/00/11/dc/33/a68c6b26.jpg","comment_is_top":false,"comment_ctime":1594293670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23069130150","product_id":100009601,"comment_content":"了解到的新知识：利用数据库监控工具获取一段时间内数据库所有的业务表修改记录，以此为依据得到创建数据的 SQL 语句集。<br><br>在自己实际工作中，自己曾经使用QTP来创建测试数据，都是准备给自己使用，所以数据量不大。<br><br>我在银行做测试，测试数据准备是一个很大的问题，测试的对公信贷系统对接了几十个系统，现在还是主要以手工准备数据为主。<br><br>虽然有一个造数平台，现在准备数据比以前方便了，但是还是做不到快速大批量造数。是手工在造数平台造数后，再在对公信贷手工引入数据。<br><br>至于使用API造数，现在也实现不了，项目中接口文档没有形成知识资产，有些接口找不到接口文档，不知道具体字段的含义，项目内没有安排人统一去梳理接口，估计难以使用API造数。<br><br>数据库改数，也是很困难。银行内有专门的环境组管理环境，一般人使用的数据库用户都只有查询权限，没有改数权限，只有在测试的时候，真的需要改数，得提单进行申请修改。而且不同系统间是不同的人管理。<br><br>做为测试，太复杂的SQL写不出来，也不了解具体要改哪些表、哪些字段，所以很多时候还是得找开发帮忙。","like_count":5},{"had_liked":false,"id":81243,"user_name":"口水窝","can_delete":false,"product_type":"c1","uid":1004838,"ip_address":"","ucode":"6028B5AA10D8A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/26/154f9578.jpg","comment_is_top":false,"comment_ctime":1553841458,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14438743346","product_id":100009601,"comment_content":"小公司，没有做GUI自动化测试，更无从测试数据的准备谈起，只能自己摸索，不断尝试，总结更多的实践经验。","like_count":3},{"had_liked":false,"id":26009,"user_name":"任大树","can_delete":false,"product_type":"c1","uid":1188271,"ip_address":"","ucode":"88CA06CED398C1","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/af/006ae50e.jpg","comment_is_top":false,"comment_ctime":1537490809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14422392697","product_id":100009601,"comment_content":"老师讲的很清楚～～我有个小问题想请教一下：自动化做完 要进行数据还原，老师有没有什么数据还原的方法推荐呢？比如数据库快照什么的。或者说有哪些类型的自动化测试根本不用还原？","like_count":3},{"had_liked":false,"id":18728,"user_name":"arthur","can_delete":false,"product_type":"c1","uid":1116981,"ip_address":"","ucode":"EAD9D9D2837C5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/35/2c56c29c.jpg","comment_is_top":false,"comment_ctime":1533557733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14418459621","product_id":100009601,"comment_content":"我们的产品有一个best practice的包，里面包含了很多数据，对测试非常有用","like_count":3},{"had_liked":false,"id":17986,"user_name":"叶夏立","can_delete":false,"product_type":"c1","uid":1184057,"ip_address":"","ucode":"0A756C4553D4BB","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/39/f7dcc2e6.jpg","comment_is_top":false,"comment_ctime":1533083479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14417985367","product_id":100009601,"comment_content":"我的做法是备份还原整个数据库😂，当然也是看业务场景的","like_count":4},{"had_liked":false,"id":37714,"user_name":"年轻人的瞎折腾^.","can_delete":false,"product_type":"c1","uid":1266462,"ip_address":"","ucode":"179997C9622609","user_header":"https://static001.geekbang.org/account/avatar/00/13/53/1e/7d098b33.jpg","comment_is_top":false,"comment_ctime":1541691803,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"10131626395","product_id":100009601,"comment_content":"我们是out the box 脚本预制 然后on the fly 接口调用，API测试，经常因为接口变动大，数据库也有变化 这样脚本经常容易改动 有什么方法可以设置变量方面，灵活性的脚本？","like_count":2},{"had_liked":false,"id":18132,"user_name":"FamilyLi","can_delete":false,"product_type":"c1","uid":1166828,"ip_address":"","ucode":"CB51427E68385A","user_header":"https://static001.geekbang.org/account/avatar/00/11/cd/ec/0d1c052e.jpg","comment_is_top":false,"comment_ctime":1533161843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10123096435","product_id":100009601,"comment_content":"最近几张讲的GUI测试，听起来主要是基于浏览器的业务测试，对于APP的测试如何应用","like_count":2},{"had_liked":false,"id":49374,"user_name":"Lynn","can_delete":false,"product_type":"c1","uid":1167793,"ip_address":"","ucode":"E5A8023E06B99D","user_header":"https://static001.geekbang.org/account/avatar/00/11/d1/b1/453434dd.jpg","comment_is_top":false,"comment_ctime":1544673689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839640985","product_id":100009601,"comment_content":"数据库监控工具有推荐的吗","like_count":1},{"had_liked":false,"id":19471,"user_name":"晴天","can_delete":false,"product_type":"c1","uid":1164013,"ip_address":"","ucode":"AF7F1E39EE1F5A","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/ed/db97ffe5.jpg","comment_is_top":false,"comment_ctime":1533860829,"is_pvip":false,"replies":[{"id":"6782","content":"其实这里是从两个不同的角度来描述测试数据，一种是测试输入数据，也就是你的数据驱动中用到的数据，另一种是讲你怎么去创建这个测试数据。","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1533895987,"ip_address":"","comment_id":19471,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5828828125","product_id":100009601,"comment_content":"hui测试的两类数据感觉没有什么区别，老师能详细说下嘛","like_count":1,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421859,"discussion_content":"其实这里是从两个不同的角度来描述测试数据，一种是测试输入数据，也就是你的数据驱动中用到的数据，另一种是讲你怎么去创建这个测试数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533895987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356008,"user_name":"付晓杰","can_delete":false,"product_type":"c1","uid":1869584,"ip_address":"上海","ucode":"66634A3401A176","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/FGeCDgpXdhsXseIGF3GCzZibDJlOfO4KDqPJkMra2e0TJj3QVQk4t1oEd1BuQPtYOeavFyYxicd5fTZ33tIbPOZQ/132","comment_is_top":false,"comment_ctime":1661916950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661916950","product_id":100009601,"comment_content":"创建测试数据的方式：<br>一、从创建的技术手段上来讲，创建测试数据的方法主要分为三种：<br>1.API 调用（最佳的选择）；<br>2.数据库操作；<br>3.综合运用 API 调用和数据库操作。<br>二、从创建的时机来讲，创建测试数据的方法主要分为两种：<br>1.测试用例执行过程中，实时创建测试数据，我们通常称这种方式为 On-the-fly。<br>2.测试用例执行前，事先创建好“开箱即用”的测试数据，我们通常称这种方式为 Out-of-box。<br>对于创建数据的时机，在实际项目中，往往是 On-the-fly 和 Out-of-box 结合在一起使用","like_count":0},{"had_liked":false,"id":335872,"user_name":"小呀么小二郎","can_delete":false,"product_type":"c1","uid":1326905,"ip_address":"","ucode":"149540DCFDF43E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/39/b1558fc9.jpg","comment_is_top":false,"comment_ctime":1645750623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645750623","product_id":100009601,"comment_content":"先看了后面测试数据的4讲再来看这篇，就像是复习啦","like_count":0},{"had_liked":false,"id":303400,"user_name":"Geek_da7f5e","can_delete":false,"product_type":"c1","uid":2694542,"ip_address":"","ucode":"FB20938C74EEAE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJSGx0Fcs4kajDDVHjxjC3R1ibE1VmTnzPibohSP6ySBzoesCRLicKA9ocTtkceV9UlV6pvUj1vuh9TQ/132","comment_is_top":false,"comment_ctime":1626769181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626769181","product_id":100009601,"comment_content":"老师，这部分GUI自动化测试课程学起来有点吃力，我有对日外包的开发基础但没有测试经验，还需要自己补些什么基础知识吗？听不太懂呢","like_count":0},{"had_liked":false,"id":190253,"user_name":"nn_20160123","can_delete":false,"product_type":"c1","uid":1644410,"ip_address":"","ucode":"8538D35DB8D3E0","user_header":"","comment_is_top":false,"comment_ctime":1584623736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584623736","product_id":100009601,"comment_content":"你好，造数据有一部分是调用接口，我怎么确定这次部署的造数据接口是没问题的呢？","like_count":0},{"had_liked":false,"id":100622,"user_name":"Geek_AX1","can_delete":false,"product_type":"c1","uid":1552593,"ip_address":"","ucode":"ABBCD02FEB3A64","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eottzJibUvjql0cDsfqpBvpibib0B4GhVTs81jgcpwic5pCFYlf6wYhibqUw05cGQtoRvRVib8HoKgibvr2A/132","comment_is_top":false,"comment_ctime":1559607555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559607555","product_id":100009601,"comment_content":"老师，我以前做过一个项目，测试数据我们直接copy一些现网数据来创造数据，尤其是性能测试高并发的时候，请问这个是不是一种好方法呢？","like_count":0},{"had_liked":false,"id":89172,"user_name":"孙建伟","can_delete":false,"product_type":"c1","uid":1424281,"ip_address":"","ucode":"980B79A7616B8A","user_header":"https://static001.geekbang.org/account/avatar/00/15/bb/99/a10d145e.jpg","comment_is_top":false,"comment_ctime":1556097622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556097622","product_id":100009601,"comment_content":"并不矛盾，GUI自动化测试是基于功能稳定的情况下进行的！","like_count":0},{"had_liked":false,"id":35022,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1540383459,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1540383459","product_id":100009601,"comment_content":"1，本文中需要注意的是，这两种思路的前提都是，假定产品功能正确，否则就会出现“一错到底”的尴尬局面。一一－前题是产品功能正确，测试的目的是找到产品中的Bug，没觉得这有矛盾吗？<br>2，在自动化测试中，teatdown方法中往往作的最重要的事情是清除脏数据。但是自动化测试往往出现的状况是测试程序在测试过程中遇到问题，挂掉了，这样造成的结果是执行不了teatdown方法中清除脏数据的操作，从而影响其他用例的运行。我一般Have to在所有测试开始(setup方法)一开始都清除所有脏数据，保证此测试用例在干净环境下运行。请问作者没有别的好办法。","like_count":0,"discussions":[{"author":{"id":1356077,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b1/2d/661132f3.jpg","nickname":"佚名","note":"","ucode":"A4E35B21AC3C31","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2609,"discussion_content":"不是有一个alwaysrun=true的属性吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563786684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":18307,"user_name":"涅槃Ls","can_delete":false,"product_type":"c1","uid":1163943,"ip_address":"","ucode":"39EDBFB303D668","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/a7/c4de1048.jpg","comment_is_top":false,"comment_ctime":1533255583,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533255583","product_id":100009601,"comment_content":"打卡15","like_count":0},{"had_liked":false,"id":18120,"user_name":"hi ！girl","can_delete":false,"product_type":"c1","uid":1165892,"ip_address":"","ucode":"0DB69C86E361C4","user_header":"https://static001.geekbang.org/account/avatar/00/11/ca/44/c2d77269.jpg","comment_is_top":false,"comment_ctime":1533139646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533139646","product_id":100009601,"comment_content":"在准备测试数据中，我觉得应该尽量减少第三方的依赖，避免脚本的不稳定性，也就是说能预先设定的就先考虑，不能的再采取实时产生的方式","like_count":0}]}