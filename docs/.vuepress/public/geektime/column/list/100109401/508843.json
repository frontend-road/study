{"id":508843,"title":"17｜DI Container（5）：API接口该怎么设计？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现注入依赖容器。</p><h2>回顾代码与任务列表</h2><p>到目前为止，我们的代码是这样的：</p><pre><code>package geektime.tdd.di;\n\nimport jakarta.inject.Inject;\nimport jakarta.inject.Provider;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport static java.util.Arrays.stream;\n    \npublic class Context {\n    private Map&lt;Class&lt;?&gt;, Provider&lt;?&gt;&gt; providers = new HashMap&lt;&gt;();\n    \n    public &lt;Type&gt; void bind(Class&lt;Type&gt; type, Type instance) {\n        providers.put(type, (Provider&lt;Type&gt;) () -&gt; instance);\n    }\n    \n    public &lt;Type, Implementation extends Type&gt;\n    void bind(Class&lt;Type&gt; type, Class&lt;Implementation&gt; implementation) {\n        Constructor&lt;Implementation&gt; injectConstructor = getInjectConstructor(implementation);\n        providers.put(type, new ConstructorInjectionProvider(type, injectConstructor));\n    }\n    \n    public &lt;Type&gt; Optional&lt;Type&gt; get(Class&lt;Type&gt; type) {\n        return Optional.ofNullable(providers.get(type)).map(provider -&gt; (Type) provider.get());\n    }\n    \n    class ConstructorInjectionProvider&lt;T&gt; implements Provider&lt;T&gt; {\n        private Class&lt;?&gt; componentType;\n        private Constructor&lt;T&gt; injectConstructor;\n        private boolean constructing = false;\n        \n        public ConstructorInjectionProvider(Class&lt;?&gt; componentType, Constructor&lt;T&gt; injectConstructor) {\n            this.componentType = componentType;\n            this.injectConstructor = injectConstructor;\n        }\n        \n        @Override\n        public T get() {\n            if (constructing) throw new CyclicDependenciesFoundException(componentType);\n            try {\n                constructing = true;\n                Object[] dependencies = stream(injectConstructor.getParameters())\n                        .map(p -&gt; Context.this.get(p.getType())\n                                .orElseThrow(() -&gt; new DependencyNotFoundException(componentType, p.getType())))\n                        .toArray(Object[]::new);\n                return injectConstructor.newInstance(dependencies);\n            } catch (CyclicDependenciesFoundException e) {\n                throw new CyclicDependenciesFoundException(componentType, e);\n            } catch (InvocationTargetException | InstantiationException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            } finally {\n                constructing = false;\n            }\n        }\n    }\n    \n    private &lt;Type&gt; Constructor&lt;Type&gt; getInjectConstructor(Class&lt;Type&gt; implementation) {\n        List&lt;Constructor&lt;?&gt;&gt; injectConstructors = stream(implementation.getConstructors())\n                .filter(c -&gt; c.isAnnotationPresent(Inject.class)).collect(Collectors.toList());\n        if (injectConstructors.size() &gt; 1) throw new IllegalComponentException();\n        return (Constructor&lt;Type&gt;) injectConstructors.stream().findFirst().orElseGet(() -&gt; {\n            try {\n                return implementation.getConstructor();\n            } catch (NoSuchMethodException e) {\n                throw new IllegalComponentException();\n            }\n        });\n    }\n}\n</code></pre><p>任务列表状态为：</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/a1/ce5cab496bda4a51f449689ac6bedfa1.jpg?wh=6905x10949\" alt=\"\"></p><h2>视频演示</h2><p>让我们进入今天的部分：</p><p><video poster=\"https://media001.geekbang.org/d89ac7d35b044c0a87b699ef3e2a8683/snapshots/d2179197ea87460aab38a8304a99ac2e-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/40fc710f-1802c83cce8-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/f407242ff81744f08b63cc8aafc2f895/523130ea7a59482e80df463f53312242-a444d1e3cc2a565315b6c54dc7a63a9c-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>为了我们更好的交流与互动，从这节课开始，思考题目除了固定的技术问题外，我还会设置一道较为轻松的题目，供你选择与回答。</p><ol>\n<li>在当前结构下，如何实现对循环依赖的检查？</li>\n<li>你学习这节课的方式是什么？写实现代码了吗？有遇到卡壳的地方吗？</li>\n</ol><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码的链接分享出来。相信经过你的思考与实操，学习效果会更好！</p><!-- [[[read_end]]] -->","neighbors":{"left":{"article_title":"16｜DI Container（4）：如何实现对循环依赖的处理？","id":508841},"right":{"article_title":"18｜DI Container（6）：如何实现循环依赖的检查？","id":508859}},"comments":[{"had_liked":false,"id":342804,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1650468524,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"这节课的重点讲的是重构：\n1、构造一个更强大的新接口\n2、实现类同时 implements 老接口,新接口\n3、实现新接口\n4、删除老接口\n\n学习方式：\n刚开始：看完所有视频后，再跟着视频敲代码。以为可以独立完成功能，实际则翻车了，自由发挥过头了，都不知道哪错了，测试横竖通不过\n昨天：先看完一节课视频，再跟着视频敲代码。一个方法内，两个小细节，花了两个小时找bug\n今天：边看视频边敲代码，战战兢兢，一次通过\n\n卡克：\n虽然没有完全理解 DI 的实现思路，无脑跟着老师敲代码，也略有感悟：原来 TDD 是这样啊！","like_count":5},{"had_liked":false,"id":345939,"user_name":"奇小易","can_delete":false,"product_type":"c1","uid":1171151,"ip_address":"","ucode":"E06B4DFB5352BB","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/cf/ef2e0501.jpg","comment_is_top":false,"comment_ctime":1652705496,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"思考题一：\n\n递归思路：\n找出一个组件的所有依赖。\n判断所有依赖中是否存在当前组件。\n存在则抛循环依赖。\n不存在则将依赖当成组件来进行第一步操作。（未实现）\n\n\n思考题二：\n你学习这节课的方式是什么？写实现代码了吗？有遇到卡壳的地方吗？\n以每个小步为一个单元。\n看完老师的演示。\n理解老师的意图。\n自己尝试复现。\n不行就回看老师的内容，复现结果。\n如此往复，完成该课程内容。\n\n","like_count":3},{"had_liked":false,"id":367473,"user_name":"leesper","can_delete":false,"product_type":"c1","uid":1351104,"ip_address":"贵州","ucode":"CC76320571BECA","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/c0/cb5341ec.jpg","comment_is_top":false,"comment_ctime":1675254104,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"我在学这一部分课的时候记录了两个进度：读进度和写进度。读进度用来跟着老师听课，写进度用来跟着老师敲代码","like_count":0},{"had_liked":false,"id":348155,"user_name":"davix","can_delete":false,"product_type":"c1","uid":1074465,"ip_address":"","ucode":"CBFB39BAD7938B","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/21/101a7075.jpg","comment_is_top":false,"comment_ctime":1654786464,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"其實第二個重構保持Provider的名字改動很小。\n```\n@@ -1,7 +1,6 @@\n package geektime.tdd.di;\n \n import jakarta.inject.Inject;\n-import jakarta.inject.Provider;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n@@ -16,8 +15,12 @@ import static java.util.Arrays.stream;\n public class ContextConfig {\n     private Map&lt;Class&lt;?&gt;, Provider&lt;?&gt;&gt; providers = new HashMap&lt;&gt;();\n \n+    interface Provider&lt;T&gt; {\n+        T get(Context context);\n+    }\n+\n     public &lt;T&gt; void bind(Class&lt;T&gt; type, T instance) {\n-        providers.put(type, (Provider&lt;T&gt;) () -&gt; instance);\n+        providers.put(type, (Provider&lt;T&gt;) context -&gt; instance);\n     }\n \n     public &lt;T, Impl extends T&gt; void bind(Class&lt;T&gt; type, Class&lt;Impl&gt; implementation) {\n@@ -30,7 +33,7 @@ public class ContextConfig {\n         return new Context() {\n             @Override\n             public &lt;T&gt; Optional&lt;T&gt; get(Class&lt;T&gt; type) {\n-                return Optional.ofNullable(providers.get(type)).map(p -&gt; (T) p.get());\n+                return Optional.ofNullable(providers.get(type)).map(p -&gt; (T) p.get(this));\n             }\n         };\n     }\n@@ -46,12 +49,12 @@ public class ContextConfig {\n         }\n \n         @Override\n-        public T get() {\n+        public T get(Context context) {\n             if (constructing) throw new CyclicDependenciesFound(type);\n             try {\n                 constructing = true;\n                 Object[] dependencies = stream(constructor.getParameters())\n-                        .map(p -&gt; getContext().get(p.getType()).orElseThrow(() -&gt; new DependencyNotFoundException(type, p.getType())))\n+                        .map(p -&gt; context.get(p.getType()).orElseThrow(() -&gt; new DependencyNotFoundException(type, p.getType())))\n                         .toArray(Object[]::new);\n                 return (T) constructor.newInstance(dependencies);\n             } catch (CyclicDependenciesFound e) {\n```","like_count":0},{"had_liked":false,"id":345128,"user_name":"新的一页","can_delete":false,"product_type":"c1","uid":1509854,"ip_address":"","ucode":"DEF7A511BD905C","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/de/eed196cf.jpg","comment_is_top":false,"comment_ctime":1652067558,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"回答：\n1. 我在provider定义了一个check方法，检查循环依赖和依赖未找到；获取上下文的时候循环调用provider中的check方法；check方法的实现和原先的在get中去检查方法一致。\n2. 我学习课程的方法是先按照课程的标题 &#47; 课后思考题来做自己的实现，遇到自己对于实现思路不清晰的时候，先会去网上搜搜一般DI框架是怎么做的，然后在依据已有的代码构造一下思路，如果发现构思后的路径和现有的代码逻辑有重大冲突的时候，就会去看看老师的视频，验证是否会有无大结构调整的实现方法，如果发现实现思路和自己想的一致，就会停下视频，自己做实现，实现后再去看视频补充一些自己没考虑到的细节还有代码实现的结构等问题。\n问题2举例，在bind的时候做循环依赖的检查必定是失败的，因为总会有一个依赖不存在，然后抛出的异常是DependencyNotFound，这个时候就要引入类似生命周期的概念，在初始化的时候去检查，这时候就会有大的代码结构调整，我在这个时候就会去看下视频，验证下自己的思路是否和老师的一致。","like_count":0},{"had_liked":false,"id":343995,"user_name":"ACE丶8","can_delete":false,"product_type":"c1","uid":1119725,"ip_address":"","ucode":"BEF70158320D84","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/ed/db793197.jpg","comment_is_top":false,"comment_ctime":1651160956,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"1.在查找依赖的时候，把查找到的依赖都添加到一个set集合中，递归查找的时候传递set，判断set是否已经存在\n2.跟着老师敲~~","like_count":0}]}