{"id":11465,"title":"第29讲 | 容器网络：来去自由的日子，不买公寓去合租","content":"<p>如果说虚拟机是买公寓，容器则相当于合租，有一定的隔离，但是隔离性没有那么好。云计算解决了基础资源层的弹性伸缩，却没有解决PaaS层应用随基础资源层弹性伸缩而带来的批量、快速部署问题。于是，容器应运而生。</p><p>容器就是Container，而Container的另一个意思是集装箱。其实<strong>容器的思想就是要变成软件交付的集装箱</strong>。集装箱的特点，一是打包，二是标准。</p><p><img src=\"https://static001.geekbang.org/resource/image/79/d0/797ca1b09e4ayy527862e050dbd70cd0.jpg?wh=1947*384\" alt=\"\"></p><p>在没有集装箱的时代，假设要将货物从A运到B，中间要经过三个码头、换三次船。每次都要将货物卸下船来，弄得乱七八糟，然后还要再搬上船重新整齐摆好。因此在没有集装箱的时候，每次换船，船员们都要在岸上待几天才能干完活。</p><p>有了尺寸全部都一样的集装箱以后，可以把所有的货物都打包在一起，所以每次换船的时候，一个箱子整体搬过去就行了，小时级别就能完成，船员再也不用耗费很长时间了。这是集装箱的“打包”“标准”两大特点在生活中的应用。</p><p></p><p><img src=\"https://static001.geekbang.org/resource/image/34/ae/3417576013de1c8b2078a312ec75b7ae.jpg?wh=1975*427\" alt=\"\"></p><p>那么容器如何对应用打包呢？</p><p>学习集装箱，首先要有个封闭的环境，将货物封装起来，让货物之间互不干扰，互相隔离，这样装货卸货才方便。</p><p>封闭的环境主要使用了两种技术，一种是<strong>看起来是隔离的技术</strong>，称为<strong>namespace</strong>，也即每个 namespace中的应用看到的是不同的 IP地址、用户空间、程号等。另一种是<strong>用起来是隔离的技术</strong>，称为<strong>cgroup</strong>，也即明明整台机器有很多的 CPU、内存，而一个应用只能用其中的一部分。</p><!-- [[[read_end]]] --><p>有了这两项技术，就相当于我们焊好了集装箱。接下来的问题就是如何“将这个集装箱标准化”，并在哪艘船上都能运输。这里的标准首先就是<strong>镜像</strong>。</p><p>所谓镜像，就是将你焊好集装箱的那一刻，将集装箱的状态保存下来，就像孙悟空说：“定！”，集装箱里的状态就被定在了那一刻，然后将这一刻的状态保存成一系列文件。无论从哪里运行这个镜像，都能完整地还原当时的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/fe/5b/fec2010a23814e7b361b29e4080e3e5b.jpg?wh=1976*371\" alt=\"\"></p><p>接下来我们就具体来看看，这两种网络方面的打包技术。</p><h2>命名空间（namespace）</h2><p>我们首先来看网络namespace。</p><p>namespace翻译过来就是命名空间。其实很多面向对象的程序设计语言里面，都有命名空间这个东西。大家一起写代码，难免会起相同的名词，编译就会冲突。而每个功能都有自己的命名空间，在不同的空间里面，类名相同，不会冲突。</p><p>在Linux下也是这样的，很多的资源都是全局的。比如进程有全局的进程ID，网络也有全局的路由表。但是，当一台Linux上跑多个进程的时候，如果我们觉得使用不同的路由策略，这些进程可能会冲突，那就需要将这个进程放在一个独立的namespace里面，这样就可以独立配置网络了。</p><p>网络的namespace由ip netns命令操作。它可以创建、删除、查询namespace。</p><p>我们再来看将你们宿舍放进一台物理机的那个图。你们宿舍长的电脑是一台路由器，你现在应该知道怎么实现这个路由器吧？可以创建一个Router虚拟机来做这件事情，但是还有一个更加简单的办法，就是我在图里画的这条虚线，这个就是通过namespace实现的。</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/1a/1a5d299c2eb5480eda93a8f8e3b3ca1a.jpg?wh=720*951\" alt=\"\"></p><p>我们创建一个routerns，于是一个独立的网络空间就产生了。你可以在里面尽情设置自己的规则。</p><pre><code>ip netns add routerns\n</code></pre><p>既然是路由器，肯定要能转发嘛，因而forward开关要打开。</p><pre><code>ip netns exec routerns sysctl -w net.ipv4.ip_forward=1\n</code></pre><p>exec的意思就是进入这个网络空间做点事情。初始化一下iptables，因为这里面要配置NAT规则。</p><pre><code>ip netns exec routerns iptables-save -c \nip netns exec routerns iptables-restore -c\n</code></pre><p>路由器需要有一张网卡连到br0上，因而要创建一个网卡。</p><pre><code>ovs-vsctl -- add-port br0 taprouter -- set Interface taprouter type=internal -- set Interface taprouter external-ids:iface-status=active -- set Interface taprouter external-ids:attached-mac=fa:16:3e:84:6e:cc\n</code></pre><p>这个网络创建完了，但是是在namespace外面的，如何进去呢？可以通过这个命令：</p><pre><code>ip link set taprouter netns routerns\n</code></pre><p>要给这个网卡配置一个IP地址，当然应该是虚拟机网络的网关地址。例如虚拟机私网网段为192.168.1.0/24，网关的地址往往为192.168.1.1。</p><pre><code>ip netns exec routerns ip -4 addr add 192.168.1.1/24 brd 192.168.1.255 scope global dev taprouter\n</code></pre><p>为了访问外网，还需要另一个网卡连在外网网桥br-ex上，并且塞在namespace里面。</p><pre><code>ovs-vsctl -- add-port br-ex taprouterex -- set Interface taprouterex type=internal -- set Interface taprouterex external-ids:iface-status=active -- set Interface taprouterex external-ids:attached-mac=fa:16:3e:68:12:c0\n</code></pre><pre><code>ip link set taprouterex netns routerns\n</code></pre><p>我们还需要为这个网卡分配一个地址，这个地址应该和物理外网网络在一个网段。假设物理外网为16.158.1.0/24，可以分配一个外网地址16.158.1.100/24。</p><pre><code>ip netns exec routerns ip -4 addr add 16.158.1.100/24 brd 16.158.1.255 scope global dev taprouterex\n</code></pre><p>接下来，既然是路由器，就需要配置路由表，路由表是这样的：</p><pre><code>ip netns exec routerns route -n\nKernel IP routing table\nDestination   Gateway     Genmask     Flags Metric Ref  Use Iface\n0.0.0.0     16.158.1.1  0.0.0.0     UG  0   0    0 taprouterex\n192.168.1.0    0.0.0.0     255.255.255.0  U   0   0    0 taprouter\n16.158.1.0  0.0.0.0     255.255.255.0  U   0   0    0 taprouterex\n</code></pre><p>路由表中的默认路由是去物理外网的，去192.168.1.0/24也即虚拟机私网，走下面的网卡，去16.158.1.0/24也即物理外网，走上面的网卡。</p><p>我们在前面的章节讲过，如果要在虚拟机里面提供服务，提供给外网的客户端访问，客户端需要访问外网IP3，会在外网网口NAT称为虚拟机私网IP。这个NAT规则要在这个namespace里面配置。</p><pre><code>ip netns exec routerns iptables -t nat -nvL\nChain PREROUTING\ntarget  prot opt  in  out  source  destination\nDNAT  all  --  *  *  0.0.0.0/0 16.158.1.103 to:192.168.1.3\nChain POSTROUTING\ntarget  prot opt  in  out  source   destination\nSNAT  all  --  *  *  192.168.1.3  0.0.0.0/0 to:16.158.1.103\n</code></pre><p>这里面有两个规则，一个是SNAT，将虚拟机的私网IP 192.168.1.3 NAT成物理外网IP 16.158.1.103。一个是DNAT，将物理外网IP 16.158.1.103 NAT成虚拟机私网IP 192.168.1.3。</p><p>至此为止，基于网络namespace的路由器实现完毕。</p><h2>机制网络（cgroup）</h2><p>我们再来看打包的另一个机制网络cgroup。</p><p>cgroup全称control groups，是Linux内核提供的一种可以限制、隔离进程使用的资源机制。</p><p>cgroup能控制哪些资源呢？它有很多子系统：</p><ul>\n<li>\n<p>CPU子系统使用调度程序为进程控制CPU的访问；</p>\n</li>\n<li>\n<p>cpuset，如果是多核心的CPU，这个子系统会为进程分配单独的CPU和内存；</p>\n</li>\n<li>\n<p>memory子系统，设置进程的内存限制以及产生内存资源报告；</p>\n</li>\n<li>\n<p>blkio子系统，设置限制每个块设备的输入输出控制；</p>\n</li>\n<li>\n<p>net_cls，这个子系统使用等级识别符（classid）标记网络数据包，可允许Linux 流量控制程序（tc）识别从具体cgroup中生成的数据包。</p>\n</li>\n</ul><p>我们这里最关心的是net_cls，它可以和前面讲过的TC关联起来。</p><p>cgroup提供了一个虚拟文件系统，作为进行分组管理和各子系统设置的用户接口。要使用cgroup，必须挂载cgroup文件系统，一般情况下都是挂载到/sys/fs/cgroup目录下。</p><p>所以首先我们要挂载一个net_cls的文件系统。</p><pre><code>mkdir /sys/fs/cgroup/net_cls\nmount -t cgroup -onet_cls net_cls /sys/fs/cgroup/net_cls\n</code></pre><p>接下来我们要配置TC了。还记得咱们实验TC的时候那颗树吗？</p><p><img src=\"https://static001.geekbang.org/resource/image/3d/11/3d8555e9c76272f6baaeb50d2eb72611.jpg?wh=2076*1579\" alt=\"\"></p><p>当时我们通过这个命令设定了规则：从1.2.3.4来的，发送给port 80的包，从1:10走；其他从1.2.3.4发送来的包从1:11走；其他的走默认。</p><pre><code>tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip src 1.2.3.4 match ip dport 80 0xffff flowid 1:10\ntc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip src 1.2.3.4 flowid 1:11\n</code></pre><p>这里是根据源IP来设定的，现在有了cgroup，我们按照cgroup再来设定规则。</p><pre><code>tc filter add dev eth0 protocol ip parent 1:0 prio 1 handle 1: cgroup\n</code></pre><p>假设我们有两个用户a和b，要对它们进行带宽限制。</p><p>首先，我们要创建两个net_cls。</p><pre><code>mkdir /sys/fs/cgroup/net_cls/a   \nmkdir /sys/fs/cgroup/net_cls/b\n</code></pre><p>假设用户a启动的进程ID为12345，把它放在net_cls/a/tasks文件中。同样假设用户b启动的进程ID为12346，把它放在net_cls/b/tasks文件中。</p><p>net_cls/a目录下面，还有一个文件net_cls.classid，我们放flowid 1:10。net_cls/b目录下面，也创建一个文件net_cls.classid，我们放flowid 1:11。</p><p>这个数字怎么放呢？要转换成一个0xAAAABBBB的值，AAAA对应class中冒号前面的数字，而BBBB对应后面的数字。</p><pre><code>echo 0x00010010 &gt; /sys/fs/cgroup/net_cls/a/net_cls.classid    \necho 0x00010011 &gt; /sys/fs/cgroup/net_cls/b/net_cls.classid\n</code></pre><p>这样用户a的进程发的包，会打上1:10这个标签；用户b的进程发的包，会打上1:11这个标签。然后TC根据这两个标签，让用户a的进程的包走左边的分支，用户b的进程的包走右边的分支。</p><h2>容器网络中如何融入物理网络？</h2><p>了解了容器背后的技术，接下来我们来看，容器网络究竟是如何融入物理网络的？</p><p>如果你使用docker run运行一个容器，你应该能看到这样一个拓扑结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/ae/eba73892697293f0bde34aa30a255aae.jpg?wh=947*1109\" alt=\"\"></p><p>是不是和虚拟机很像？容器里面有张网卡，容器外有张网卡，容器外的网卡连到docker0网桥，通过这个网桥，容器直接实现相互访问。</p><p>如果你用brctl查看docker0网桥，你会发现它上面连着一些网卡。其实这个网桥和<a href=\"https://time.geekbang.org/column/article/10742\">第24讲</a>，咱们自己用brctl创建的网桥没什么两样。</p><p>那连接容器和网桥的那个网卡和虚拟机一样吗？在虚拟机场景下，有一个虚拟化软件，通过TUN/TAP设备虚拟一个网卡给虚拟机，但是容器场景下并没有虚拟化软件，这该怎么办呢？</p><p>在Linux下，可以创建一对veth pair的网卡，从一边发送包，另一边就能收到。</p><p>我们首先通过这个命令创建这么一对。</p><pre><code>ip link add name veth1 mtu 1500 type veth peer name veth2 mtu 1500\n</code></pre><p>其中一边可以打到docker0网桥上。</p><pre><code>ip link set veth1 master testbr    \nip link set veth1 up\n</code></pre><p>那另一端如何放到容器里呢？</p><p>一个容器的启动会对应一个namespace，我们要先找到这个namespace。对于docker来讲，pid就是namespace的名字，可以通过这个命令获取。</p><pre><code>docker inspect '--format={{ .State.Pid }}' test\n</code></pre><p>假设结果为12065，这个就是namespace名字。</p><p>默认Docker创建的网络namespace不在默认路径下 ，ip netns看不到，所以需要ln软链接一下。链接完毕以后，我们就可以通过ip netns命令操作了。</p><pre><code>rm -f /var/run/netns/12065    \nln -s /proc/12065/ns/net /var/run/netns/12065\n</code></pre><p>然后，我们就可以将另一端veth2塞到namespace里面。</p><pre><code>ip link set veth2 netns 12065\n</code></pre><p>然后，将容器内的网卡重命名。</p><pre><code>ip netns exec 12065 ip link set veth2 name eth0\n</code></pre><p>然后，给容器内网卡设置ip地址。</p><pre><code>ip netns exec 12065 ip addr add 172.17.0.2/16 dev eth0    \nip netns exec 12065 ip link set eth0 up\n</code></pre><p>一台机器内部容器的互相访问没有问题了，那如何访问外网呢？</p><p>你先想想看有没有思路？对，就是虚拟机里面的桥接模式和NAT模式。Docker默认使用NAT模式。NAT模式分为SNAT和DNAT，如果是容器内部访问外部，就需要通过SNAT。</p><p>从容器内部的客户端访问外部网络中的服务器，我画了一张图。在<a href=\"https://time.geekbang.org/column/article/10742\">虚拟机</a>那一节，也有一张类似的图。</p><p><img src=\"https://static001.geekbang.org/resource/image/54/93/5452971c96e8fea33c3f873860e25c93.jpg?wh=1280*2276\" alt=\"\"></p><p>在宿主机上，有这么一条iptables规则：</p><pre><code>-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n</code></pre><p>所有从容器内部发出来的包，都要做地址伪装，将源IP地址，转换为物理网卡的IP地址。如果有多个容器，所有的容器共享一个外网的IP地址，但是在conntrack表中，记录下这个出去的连接。</p><p>当服务器返回结果的时候，到达物理机，会根据conntrack表中的规则，取出原来的私网IP，通过DNAT将地址转换为私网IP地址，通过网桥docker0实现对内的访问。</p><p>如果在容器内部属于一个服务，例如部署一个网站，提供给外部进行访问，需要通过Docker的端口映射技术，将容器内部的端口映射到物理机上来。</p><p>例如容器内部监听80端口，可以通Docker run命令中的参数-p 10080:80，将物理机上的10080端口和容器的80端口映射起来， 当外部的客户端访问这个网站的时候，通过访问物理机的10080端口，就能访问到容器内的80端口了。</p><p><img src=\"https://static001.geekbang.org/resource/image/49/bb/49bb6b2a30fe76b124182980da935ebb.jpg?wh=1280*2276\" alt=\"\"></p><p>Docker有两种方式，一种是通过一个进程<strong>docker-proxy</strong>的方式，监听10080，转换为80端口。</p><pre><code>/usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 10080 -container-ip 172.17.0.2 -container-port 80\n</code></pre><p>另外一种方式是通过<strong>DNAT</strong>方式，在-A PREROUTING阶段加一个规则，将到端口10080的DNAT称为容器的私有网络。</p><pre><code>-A DOCKER -p tcp -m tcp --dport 10080 -j DNAT --to-destination 172.17.0.2:80\n</code></pre><p>如此就可以实现容器和物理网络之间的互通了。</p><h2>小结</h2><p>好了，这一节就到这里了，我们来总结一下。</p><ul>\n<li>\n<p>容器是一种比虚拟机更加轻量级的隔离方式，主要通过namespace和cgroup技术进行资源的隔离，namespace用于负责看起来隔离，cgroup用于负责用起来隔离。</p>\n</li>\n<li>\n<p>容器网络连接到物理网络的方式和虚拟机很像，通过桥接的方式实现一台物理机上的容器进行相互访问，如果要访问外网，最简单的方式还是通过NAT。</p>\n</li>\n</ul><p>最后，给你留两个思考题：</p><ol>\n<li>\n<p>容器内的网络和物理机网络可以使用NAT的方式相互访问，如果这种方式用于部署应用，有什么问题呢？</p>\n</li>\n<li>\n<p>和虚拟机一样，不同物理机上的容器需要相互通信，你知道容器是怎么做到这一点吗？</p>\n</li>\n</ol><p>我们的专栏更新到第29讲，不知你掌握得如何？每节课后我留的思考题，你都有没有认真思考，并在留言区写下答案呢？我会从<strong>已发布的文章中选出一批认真留言的同学</strong>，赠送<span class=\"orange\">学习奖励礼券</span>和我整理的<span class=\"orange\">独家网络协议知识图谱</span>。</p><p>欢迎你留言和我讨论。趣谈网络协议，我们下期见！</p>","comments":[{"had_liked":false,"id":20057,"user_name":"小文","can_delete":false,"product_type":"c1","uid":1177540,"ip_address":"","ucode":"974071FAA5F173","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","comment_is_top":false,"comment_ctime":1534244799,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"169037969343","product_id":100007101,"comment_content":"我怎么感觉干运维的才能理解这么深","like_count":39,"discussions":[{"author":{"id":1113587,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fd/f3/77223a8c.jpg","nickname":"清新灬小柠檬","note":"","ucode":"F3004F2F385096","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7864,"discussion_content":"运维的也不一定要懂这么深，懂得深的都是大佬","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1567693482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1226862,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/6e/0aae08d6.jpg","nickname":"VincentQ","note":"","ucode":"BDA2CE2453881C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307072,"discussion_content":"好好学完下次和运维吵架用","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1600488142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238646,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e6/76/26f555ce.jpg","nickname":"上沅同学","note":"","ucode":"CDE043A508E4EA","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287630,"discussion_content":"也许我干十年运维才能懂的这么深。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1593498552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1717549,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/35/2d/a2bde67e.jpg","nickname":"SapereAude","note":"","ucode":"C5D61C535B7B10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69235,"discussion_content":"大佬","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575274256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1158344,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ac/c8/4b1c0d40.jpg","nickname":"勤劳的小胖子-libo","note":"","ucode":"5BB20CD5A56568","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109388,"discussion_content":"代码化运维","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577689732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17246,"user_name":"贾鹏","can_delete":false,"product_type":"c1","uid":1157930,"ip_address":"","ucode":"9213D847AC7313","user_header":"https://static001.geekbang.org/account/avatar/00/11/ab/2a/f3207127.jpg","comment_is_top":false,"comment_ctime":1532520911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"96021801423","product_id":100007101,"comment_content":"问题1，由于nat导致网络性能有损耗，而且物理机端口被占用，当容器多的时候对于物理机端口的占用更加明显<br>问题2，跨物理机间的容器通信，主要的思路是构造扁平化网络模型，主要有cnm和cni模型，支持很多网络插件实现集群内的容器只有唯一的IP。这些插件很多，比如flannel macvlan<br>另外求网络梳理图<br>不分享还不能留言吗？","like_count":22},{"had_liked":false,"id":16951,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1532325077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48776965333","product_id":100007101,"comment_content":"突然想起来一个问题 nat网络 虽然能通信 但是别人看到的ip是你被nat之后的ip 例如服务注册这样的功能 会导致 服务注册获取的ip 是你nat之后的ip 而不是你真实的ip","like_count":11},{"had_liked":false,"id":117348,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1564027728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35923766096","product_id":100007101,"comment_content":"1 容器的定义和特性 云计算虚拟机解决的是基础医院层的弹性伸缩，容器解决的是基础资源层弹性伸缩带来的批量，快速部署问题。容器，英文是container，有另外一个意思是集装箱，可以交付的集装箱两大特性，一是打包，二是标准。2 容器如何对应用打包 2.1 首先要有个封闭环境 把东西封装起来，能互不干扰，封闭技术主要用了2种，一种是namespace，命名空间技术，看起来隔离的技术，每个namespace下面看到的是不同的ip，用户空间，一种是cgroup技术，用起来隔离的技术，一台机器有很多cpu和内存，只能用其中的一部分，集装箱的标准就是镜像，将打包那一刻的状态保存下来， 将那一刻的状态保存成文件，无论何时，都能还原成那个状态。3 namespace 网络命名空间 linux进程可以配置自己的路由规则，多个进程可能会有冲突，为了防止冲突，可以把不同的进程放到不同的命名空间下，可以独立配置网络，可以用namespace技术实现类似路由器的功能，先构建一个独立的网络空间，创建一个网卡，连接到网桥br0上，给网卡配置一个ip地址，这个地址是虚拟机网络的网关地址，为了访问外网，还需要另一个网卡连接到网桥br-ex上，这个网卡配置的ip要和物理外网网络在一个网段，可以在namespace下建立路由表，基于namespace的路由器实现完毕。4 cgroup controll group，是linux提供的一种可以限制，隔离进程使用的资源机制。cgroup能控制的资源，包括多个子系统4.1 CPU子系统使用调度程序为进程控制CPU的访问，4.2 CPU set 如果是多核CPU，可以分配单独的CPU和内存 4.3 memory 子系统设置进程内存的限制以及产生内存资源报告 4.4 blkio子系统 设置限制每个块设备的输入输出限制 4.5net_cls 这个子系统使用等级标识符来标记网络数据包，可允许流量控制程序tc识别从具体cgroup生成的数据包 cgroup提供了虚拟文件系统，作为进程分组管理和各子系统设置的用户接口，使用cgroup，一般挂载在sys&#47;fs&#47;cgroup目录下， 配置TC，先根据cgroup配置路由规则，比如有2个用户，建立2个net_cls，有2个进程，进程id放在各自的net_cls文件，还有flowid，这样a进程发的包和b进程发的包，有各自的flowid，根据flowid做不同的处理。5 容器网络如何融入物理网络 5.1 docker run运行容器，容器内有张网卡，容器外有张网卡连到网桥上，通过网桥实现互相访问，容器下可以创建veth pair的网卡，一边发包，另一边就能收到 5.2 docker网络如何访问外网 访问外网使用NAT模式，NAT模式分为SNAT模式和DNAT模式。容器内访问外部，需要SNAT模式。多个容器共享一个物理ip，<br>发送包的时候，会将私ip转换成物理ip，并记录到conntrack表，将连接记下来，服务端返回，会根据conntrack表，将不同的连接，找到不同的私ip,对应到不同的容器<br>。如果容器内的应用，跟外部交互，用不同的端口，映射到容器的80端口，访问。Docker有2种方式，做端口的映射转换，一种是通过单独的进程docker-proxy的方式，<br>将进程10080转换成80端口，另一种是通过DNAT的方式，在-A PREROUTING阶段，添加一条规则。这样就实现容器和物理网络之间的互通","like_count":8},{"had_liked":false,"id":23488,"user_name":"spdia","can_delete":false,"product_type":"c1","uid":1014366,"ip_address":"","ucode":"9F23413389342B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/5e/9431165a.jpg","comment_is_top":false,"comment_ctime":1536409968,"is_pvip":false,"replies":[{"id":"8553","content":"鼓励操作","user_name":"作者回复","comment_id":23488,"uid":"1001590","ip_address":"","utype":1,"ctime":1536503913,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"31601181040","product_id":100007101,"comment_content":"这章比较难，主要是我对ip netns 不熟悉，还要多看几遍，再上虚拟机上操作几遍才行。","like_count":7,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423585,"discussion_content":"鼓励操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536503913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221805,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1590593832,"is_pvip":false,"replies":[{"id":"83173","content":"跨行业学习","user_name":"作者回复","comment_id":221805,"uid":"1001590","ip_address":"","utype":1,"ctime":1591840765,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"23065430312","product_id":100007101,"comment_content":"学到了集装箱为解决什么问题而出现","like_count":5,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496578,"discussion_content":"跨行业学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591840765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17240,"user_name":"贾鹏","can_delete":false,"product_type":"c1","uid":1157930,"ip_address":"","ucode":"9213D847AC7313","user_header":"https://static001.geekbang.org/account/avatar/00/11/ab/2a/f3207127.jpg","comment_is_top":false,"comment_ctime":1532519942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23007356422","product_id":100007101,"comment_content":"问题1，nat会导致性能损耗<br>问题2，主要是通过构造扁平网络，k8s主要是cni和cnm网络模型，支持很多网络插件来实现，比如flannel，macvlan等，从而让不同物理机上的容器有不同的IP","like_count":5},{"had_liked":false,"id":315525,"user_name":"利威尔兵长","can_delete":false,"product_type":"c1","uid":2756739,"ip_address":"","ucode":"FDE0BD5BFB1B4A","user_header":"https://static001.geekbang.org/account/avatar/00/2a/10/83/0facd0eb.jpg","comment_is_top":false,"comment_ctime":1633915195,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18813784379","product_id":100007101,"comment_content":"说实话，有点失望，可能是我在刚开始的时候就对这个专栏抱有的期望过高了（看到了专栏摘要，加上专栏作者的简历），很多比喻有点刻意而为之的样子，比喻本是为了让读者能够比较容易get到某些复杂难懂的概念，但是本专栏为了“趣味性”而充斥着大量比喻，有点过犹不及了。","like_count":4},{"had_liked":false,"id":123295,"user_name":"蜉蝣","can_delete":false,"product_type":"c1","uid":1229070,"ip_address":"","ucode":"77CF92496855D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/0e/2b987d54.jpg","comment_is_top":false,"comment_ctime":1565657418,"is_pvip":false,"replies":[{"id":"46307","content":"就是图中，路由器连着两个网卡，一个在上，一个在下","user_name":"作者回复","comment_id":123295,"uid":"1001590","ip_address":"","utype":1,"ctime":1566283403,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"18745526602","product_id":100007101,"comment_content":"老师，您这句“路由表中的默认路由是去物理外网的，去 192.168.1.0&#47;24 也即虚拟机私网，走下面的网卡，去 16.158.1.0&#47;24 也即物理外网，走上面的网卡。” 我不太懂哪个是上面网卡，哪个是下面网卡。","like_count":4,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462614,"discussion_content":"就是图中，路由器连着两个网卡，一个在上，一个在下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566283403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1140080,"avatar":"https://static001.geekbang.org/account/avatar/00/11/65/70/7e137498.jpg","nickname":"FOCUS","note":"","ucode":"DFE3078B632026","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":556319,"discussion_content":"就是这段文字上面的画红线的图？\n即用作 namespace 示例的图？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647311862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":462614,"ip_address":""},"score":556319,"extra":""}]}]},{"had_liked":false,"id":84721,"user_name":"王芳","can_delete":false,"product_type":"c1","uid":1217704,"ip_address":"","ucode":"9DB0D9A3D65712","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/a8/84c78013.jpg","comment_is_top":false,"comment_ctime":1554898563,"is_pvip":false,"replies":[{"id":"49741","content":"实践好","user_name":"作者回复","comment_id":84721,"uid":"1001590","ip_address":"","utype":1,"ctime":1567699140,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"14439800451","product_id":100007101,"comment_content":"没操作，感觉看懂了--<br>等课程看完一遍，看是否实践操作 --","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446429,"discussion_content":"实践好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567699140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273213,"user_name":"旻言","can_delete":false,"product_type":"c1","uid":1018724,"ip_address":"","ucode":"563E6A83A50EC9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/64/d8bf2f6f.jpg","comment_is_top":false,"comment_ctime":1610500155,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10200434747","product_id":100007101,"comment_content":"刘超老师，我有个疑问，为什么docker可以用veth pair来管理网络，而虚拟机却采用tun&#47;tap设备来实现呢？是出于性能的原因吗？","like_count":2,"discussions":[{"author":{"id":1604742,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7c/86/3e69f06a.jpg","nickname":"神话","note":"","ucode":"1870C82F326A24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384108,"discussion_content":"因为处于不同的namespace，需要使用veth pair才能连通两个不同的net ns","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626365018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3002686,"avatar":"","nickname":"Geek_05c4f7","note":"","ucode":"EA0E756D5A327C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589388,"discussion_content":"因为 tun/tap 设备作为虚拟网络设备性能不好，容器对容器的直接通信并不会把 tun/tap 作为首选方案，一般是基于稍后介绍的 veth 来实现的。veth 作为一个二层设备，可以让两个隔离的网络名称空间之间可以互相通信，不需要反复多次经过网络协议栈， veth pair 是一端连着协议栈，另一端彼此相连的，数据之间的传输变得十分简单，这也让 veth 比起 tap/tun 具有更好的性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664798451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119689,"user_name":"程序员大天地","can_delete":false,"product_type":"c1","uid":1249001,"ip_address":"","ucode":"7A21F15FEE2D5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/e9/98b6ea61.jpg","comment_is_top":false,"comment_ctime":1564653253,"is_pvip":false,"replies":[{"id":"46377","content":"上手实验一下，会好一些","user_name":"作者回复","comment_id":119689,"uid":"1001590","ip_address":"","utype":1,"ctime":1566297709,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"10154587845","product_id":100007101,"comment_content":"发现虚拟网络和容器这块看不懂，好多不理解","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461019,"discussion_content":"上手实验一下，会好一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566297709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119164,"user_name":"天然","can_delete":false,"product_type":"c1","uid":1435982,"ip_address":"","ucode":"0F12BD470A8104","user_header":"https://static001.geekbang.org/account/avatar/00/15/e9/4e/22c73926.jpg","comment_is_top":false,"comment_ctime":1564533364,"is_pvip":false,"replies":[{"id":"46387","content":"如果是calico而且是路由的方式，应该可以的","user_name":"作者回复","comment_id":119164,"uid":"1001590","ip_address":"","utype":1,"ctime":1566297991,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"10154467956","product_id":100007101,"comment_content":"安全设备，例如waf,能拿到各容器的私有IP吗？还是只能拿到物理机ip?怎么判断一个攻击是针对哪个容器业务的？","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460770,"discussion_content":"如果是calico而且是路由的方式，应该可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566297991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265752,"user_name":"宋桓公","can_delete":false,"product_type":"c1","uid":1151948,"ip_address":"","ucode":"04235C2B87AB0E","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/cc/dfe92ee1.jpg","comment_is_top":false,"comment_ctime":1607002991,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5901970287","product_id":100007101,"comment_content":"超哥，和订阅专栏的大神们，我在工作中遇到一个奇怪的问题：<br>我在一个服务器上部署了一个docker  监听了一个端口，通过桥接的方式，把端口映射到宿主机的80端口。<br>然后在我办公室的机器去telnet这个端口，不通。<br>但是如果docker以host的模式启动，就能访问通。十分不解，求解惑。<br>","like_count":1,"discussions":[{"author":{"id":1946048,"avatar":"http://thirdwx.qlogo.cn/mmopen/KFgDEHIEpnT0EXnh02VHqEb8YJBvBZcVay6tsQrrtQfeibjgX0yWR1r5JkvY33qaBdViaJGS11V63M6gTtm4K3RlRPCFfZIwFU/132","nickname":"fitme","note":"","ucode":"7FF53592AC406B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580982,"discussion_content":"iptables规则被破坏了呗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658449241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21802,"user_name":"小宇宙","can_delete":false,"product_type":"c1","uid":1029649,"ip_address":"","ucode":"BBFFC39CB9E26F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b6/11/e8506a04.jpg","comment_is_top":false,"comment_ctime":1535344791,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5830312087","product_id":100007101,"comment_content":"部署应用要考虑服务发现问题，就是外部的client怎么找到这个应用并访问，还有就是一般应用都是集群化部署，还涉及到负载的均衡问题，通过NAT的方式，要暴露宿主机的ip和端口，进行端口映射和ip地址转换，一方面消耗很多宝贵的主机的网络资源，另一方面服务注册和服务发现也会变复杂。","like_count":1},{"had_liked":false,"id":16904,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1532305436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5827272732","product_id":100007101,"comment_content":"1.使用nat部署服务 可能会有网络性能问题<br>2.容器跨节点通信 可以使用 bgp 主机路由 vxlan 等方式","like_count":1},{"had_liked":false,"id":347060,"user_name":"Geek_db6a04","can_delete":false,"product_type":"c1","uid":2876446,"ip_address":"","ucode":"4864C2228C464C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/o60fbNDEphdEwdxID9CzuB0DB9VsthNMHLq3Em8yJiaiaeXAALqoCj4sibNymT6YVzT65VO82aElD6eHgBezUTiaIQ/132","comment_is_top":false,"comment_ctime":1653651822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653651822","product_id":100007101,"comment_content":"老师好，想向您请教下 `<br>-A POSTROUTING -s 172.17.0.0&#47;16 ! -o docker0 -j MASQUERADE` 这条规则中的 `! -o docker0` 有什么作用呢？<br>我自己使用 ip 命令创建 bridge、namespace、veth 设备模拟后发现，就算不加 `! -o docker0` 这部分，而仅仅使用 `-A POSTROUTING -s 172.17.0.0&#47;16 -j MASQUERADE` 来配置 SNAT，新 namespace 中的进程也可以访问外网","like_count":0},{"had_liked":false,"id":346386,"user_name":"无争就是yk","can_delete":false,"product_type":"c1","uid":1019128,"ip_address":"","ucode":"8739E996ACD746","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/f8/d378c121.jpg","comment_is_top":false,"comment_ctime":1653097864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653097864","product_id":100007101,"comment_content":"能不能把相应实验的环境说明下，这么多操作命令没有相应的环境搭建，除非是本身就比较了解这块的人才能看得懂吧。","like_count":0},{"had_liked":false,"id":344920,"user_name":"昊","can_delete":false,"product_type":"c1","uid":2900362,"ip_address":"","ucode":"210AE3ACE8A14B","user_header":"https://static001.geekbang.org/account/avatar/00/2c/41/8a/3cec4cbf.jpg","comment_is_top":false,"comment_ctime":1651858005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651858005","product_id":100007101,"comment_content":"看的是一头雾水","like_count":0},{"had_liked":false,"id":341049,"user_name":"陌兮","can_delete":false,"product_type":"c1","uid":1415619,"ip_address":"","ucode":"00CE47CAECD5CD","user_header":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","comment_is_top":false,"comment_ctime":1649313361,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649313361","product_id":100007101,"comment_content":"果真知识点都是共通的，还好之前看了点容器的知识，不然只能发呆了","like_count":0},{"had_liked":false,"id":325663,"user_name":"折腾青春","can_delete":false,"product_type":"c1","uid":2187228,"ip_address":"","ucode":"969A612EE3B938","user_header":"https://static001.geekbang.org/account/avatar/00/21/5f/dc/a3a0c113.jpg","comment_is_top":false,"comment_ctime":1639068752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639068752","product_id":100007101,"comment_content":"老师，同学门，有个疑问，既然容器是通过veth pair连接网桥的，那么只要保证数据包从veth pair出去，那么网桥就能抓发数据包了，为什么一定还要把容器的网关ip设定为网桥的ip呢，如果设定的不一样，还是能ping通网桥和主机上的网卡，但是不能ping通公网，很疑惑，为啥不能ping公网呢","like_count":0},{"had_liked":false,"id":281578,"user_name":"文刂文化十","can_delete":false,"product_type":"c1","uid":2157697,"ip_address":"","ucode":"C8BAE271FB173C","user_header":"https://static001.geekbang.org/account/avatar/00/20/ec/81/4863e9ed.jpg","comment_is_top":false,"comment_ctime":1614817207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614817207","product_id":100007101,"comment_content":"但是，当一台 Linux 上跑多个进程的时候，如果我们觉得使用不同的路由策略，这些进程可能会冲突，<br><br><br>这个冲突是什么，能举个例子吗？","like_count":0},{"had_liked":false,"id":280341,"user_name":"Wheat","can_delete":false,"product_type":"c1","uid":1260141,"ip_address":"","ucode":"7D99EA149B6DE8","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/910b2445.jpg","comment_is_top":false,"comment_ctime":1614161997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614161997","product_id":100007101,"comment_content":"cgroup要用进程id，那进程id每次也不固定，怎么搞啊，难道要每重启一次就创建一个相同进程id的文件吗","like_count":0},{"had_liked":false,"id":229757,"user_name":"老兵","can_delete":false,"product_type":"c1","uid":1471109,"ip_address":"","ucode":"F004F8EC90E5B0","user_header":"https://static001.geekbang.org/account/avatar/00/16/72/85/c337e9a1.jpg","comment_is_top":false,"comment_ctime":1593138599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593138599","product_id":100007101,"comment_content":"为什么查看docker里面的veth需要先删除？rm -f &#47;var&#47;run&#47;netns&#47;12065","like_count":0},{"had_liked":false,"id":218109,"user_name":"十里堡高月半","can_delete":false,"product_type":"c1","uid":1544284,"ip_address":"","ucode":"546E0985F61518","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIQCrCGpoE2wiaU9tD3BTrBeltk0MiaCG3njem5ariatDZCiah52cMicia38WJRhxqkl4WeOq9n70ibTUAAQ/132","comment_is_top":false,"comment_ctime":1589716595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589716595","product_id":100007101,"comment_content":"收获很大","like_count":0},{"had_liked":false,"id":195320,"user_name":"King-ZJ","can_delete":false,"product_type":"c1","uid":1915385,"ip_address":"","ucode":"7448A4BBB5A118","user_header":"https://static001.geekbang.org/account/avatar/00/1d/39/f9/b946719a.jpg","comment_is_top":false,"comment_ctime":1585179538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585179538","product_id":100007101,"comment_content":"容器是之前在云计算中接触到的概念，没有用过，很多概念也是第一次接触，其中看起来隔离的namespace和用起来隔离的cgroup，得实践一下，加深理解。","like_count":0},{"had_liked":false,"id":183828,"user_name":"kissrain","can_delete":false,"product_type":"c1","uid":1120583,"ip_address":"","ucode":"2177C53E3B2DCC","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/47/b27f1314.jpg","comment_is_top":false,"comment_ctime":1583141774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583141774","product_id":100007101,"comment_content":"这讲讲的太好了，之前了解了容器的网络架构，没想到和之前的kvm虚拟机网络架构也是这么相似。","like_count":0},{"had_liked":false,"id":175559,"user_name":"猫头鹰波波","can_delete":false,"product_type":"c1","uid":1019787,"ip_address":"","ucode":"573AC477FA869C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/8b/9080f1fa.jpg","comment_is_top":false,"comment_ctime":1580742913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580742913","product_id":100007101,"comment_content":"老师，请教下虚拟机都是用cgroup实现对CPU、内存的资源隔离么","like_count":0},{"had_liked":false,"id":84444,"user_name":"heliang","can_delete":false,"product_type":"c1","uid":1204188,"ip_address":"","ucode":"DEA624EF88B4C7","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/dc/d16e0923.jpg","comment_is_top":false,"comment_ctime":1554864055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554864055","product_id":100007101,"comment_content":"关于问题一，跨用户空间和内核空间的性能消耗较大","like_count":0},{"had_liked":false,"id":83947,"user_name":"超超","can_delete":false,"product_type":"c1","uid":1476077,"ip_address":"","ucode":"D0751F29553481","user_header":"https://static001.geekbang.org/account/avatar/00/16/85/ed/905b052f.jpg","comment_is_top":false,"comment_ctime":1554736935,"is_pvip":false,"replies":[{"id":"49789","content":"IP分配需要IPAM","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567701622,"ip_address":"","comment_id":83947,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554736935","product_id":100007101,"comment_content":"同一物理机上的多台虚拟机没有IP分配管理机制吗？是否存在容器之间IP冲突的问题？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446186,"discussion_content":"IP分配需要IPAM","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567701622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64972,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1548988194,"is_pvip":false,"replies":[{"id":"25959","content":"拿ovs-vsctl add-br创建试试看","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1551438473,"ip_address":"","comment_id":64972,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548988194","product_id":100007101,"comment_content":"[root@master SOURCES]# brctl show<br>bridge name\tbridge id\t\tSTP enabled\tinterfaces<br>br0\t\t8000.000000000000\tno<br>docker0\t\t8000.02422c960d0f\tno<br>virbr0\t\t8000.525400ad2143\tyes\t\tvirbr0-nic<br>[root@master SOURCES]# ovs-vsctl -- add-port br0 taprouter -- set Interface taprouter type=internal -- set Interface taprouter external-ids:iface-status=active -- set Interface taprouter external-ids:attached-mac=fa:16:3e:84:6e:cc<br>ovs-vsctl: no bridge named br0<br>老师，这是什么情况，我不是已经创建了网桥了吗","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438258,"discussion_content":"拿ovs-vsctl add-br创建试试看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551438473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":18408,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1533295055,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1533295055","product_id":100007101,"comment_content":"请问下docker()是什么意思？分享才能留言？","like_count":0,"discussions":[{"author":{"id":1109041,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ec/31/644fc4cd.jpg","nickname":"有课学","note":"","ucode":"9A8D5E9B9FDA62","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259290,"discussion_content":"是 docker0 不是 docker()","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588773203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17695,"user_name":"夜风","can_delete":false,"product_type":"c1","uid":1171187,"ip_address":"","ucode":"B4F81EB6C3D468","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/f3/6b47cedf.jpg","comment_is_top":false,"comment_ctime":1532881744,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1532881744","product_id":100007101,"comment_content":"看了一遍，没看明白，我多去看几遍","like_count":0,"discussions":[{"author":{"id":1692732,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d4/3c/a224220c.jpg","nickname":"曾垂鑫","note":"","ucode":"118E381F33B7CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348999,"discussion_content":"趣谈网络协议？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612840441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16976,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1532345953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532345953","product_id":100007101,"comment_content":"老师我又来签到了 你还记得我吗😀","like_count":0},{"had_liked":false,"id":16906,"user_name":"颇忒妥","can_delete":false,"product_type":"c1","uid":1026448,"ip_address":"","ucode":"AA86AD1049BC2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/90/0c5ed3d9.jpg","comment_is_top":false,"comment_ctime":1532305447,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532305447","product_id":100007101,"comment_content":"第二个问题docker用的是macvlan","like_count":0},{"had_liked":false,"id":16905,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1532305442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532305442","product_id":100007101,"comment_content":"1.使用nat部署服务 可能会有网络性能问题<br>2.容器跨节点通信 可以使用 bgp 主机路由 vxlan 等方式","like_count":0},{"had_liked":false,"id":16896,"user_name":"固态U盘","can_delete":false,"product_type":"c1","uid":1043446,"ip_address":"","ucode":"9C473DA25CB4C1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/f6/ec7971f4.jpg","comment_is_top":false,"comment_ctime":1532302394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532302394","product_id":100007101,"comment_content":"及时的文章，多谢老师。","like_count":0}]}