{"id":156948,"title":"35 | 答疑：编写高性能网络编程框架时，都需要注意哪些问题？","content":"<p>你好，我是盛延敏，这里是网络编程实战的第35讲，欢迎回来。</p><p>这一篇文章是实战篇的答疑部分，也是本系列的最后一篇文章。非常感谢你的积极评论与留言，让每一篇文章的留言区都成为学习互动的好地方。在今天的内容里，我将针对评论区的问题做一次集中回答，希望能帮助你解决前面碰到的一些问题。</p><p>有关这部分内容，我将采用Q&amp;A的形式来展开。</p><h2>为什么在发送数据时，会先尝试通过socket直接发送，再由框架接管呢？</h2><p>这个问题具体描述是下面这样的。</p><p>当应用程序需要发送数据时，比如下面这段，在完成数据读取和回应的编码之后，会调用tcp_connection_send_buffer方法发送数据。</p><pre><code>//数据读到buffer之后的callback\nint onMessage(struct buffer *input, struct tcp_connection *tcpConnection) {\n    printf(&quot;get message from tcp connection %s\\n&quot;, tcpConnection-&gt;name);\n    printf(&quot;%s&quot;, input-&gt;data);\n\n    struct buffer *output = buffer_new();\n    int size = buffer_readable_size(input);\n    for (int i = 0; i &lt; size; i++) {\n        buffer_append_char(output, rot13_char(buffer_read_char(input)));\n    }\n    tcp_connection_send_buffer(tcpConnection, output);\n    return 0;\n}\n</code></pre><p>而tcp_connection_send_buffer方法则会调用tcp_connection_send_data来发送数据：</p><pre><code>int tcp_connection_send_buffer(struct tcp_connection *tcpConnection, struct buffer *buffer) {\n    int size = buffer_readable_size(buffer);\n    int result = tcp_connection_send_data(tcpConnection, buffer-&gt;data + buffer-&gt;readIndex, size);\n    buffer-&gt;readIndex += size;\n    return result;\n}\n</code></pre><p>在tcp_connection_send_data中，如果发现当前 channel 没有注册 WRITE 事件，并且当前 tcp_connection 对应的发送缓冲无数据需要发送，就直接调用 write 函数将数据发送出去。</p><pre><code>//应用层调用入口\nint tcp_connection_send_data(struct tcp_connection *tcpConnection, void *data, int size) {\n    size_t nwrited = 0;\n    size_t nleft = size;\n    int fault = 0;\n\n    struct channel *channel = tcpConnection-&gt;channel;\n    struct buffer *output_buffer = tcpConnection-&gt;output_buffer;\n\n    //先往套接字尝试发送数据\n    if (!channel_write_event_is_enabled(channel) &amp;&amp; buffer_readable_size(output_buffer) == 0) {\n        nwrited = write(channel-&gt;fd, data, size);\n        if (nwrited &gt;= 0) {\n            nleft = nleft - nwrited;\n        } else {\n            nwrited = 0;\n            if (errno != EWOULDBLOCK) {\n                if (errno == EPIPE || errno == ECONNRESET) {\n                    fault = 1;\n                }\n            }\n        }\n    }\n\n    if (!fault &amp;&amp; nleft &gt; 0) {\n        //拷贝到Buffer中，Buffer的数据由框架接管\n        buffer_append(output_buffer, data + nwrited, nleft);\n        if (!channel_write_event_is_enabled(channel)) {\n            channel_write_event_enable(channel);\n        }\n    }\n\n    return nwrited;\n}\n</code></pre><p>这里有同学不是很理解，为啥不能做成无论有没有 WRITE 事件都统一往发送缓冲区写，再把WRITE 事件注册到event_loop中呢？</p><!-- [[[read_end]]] --><p>这个问题问得非常好。我觉得有必要展开讲讲。</p><p>如果用一句话来总结的话，这是为了发送效率。</p><p>我们来分析一下，应用层读取数据，进行编码，之后的这个buffer对象是应用层创建的，数据也在应用层这个buffer对象上。你可以理解，tcp_connection_send_data里面的data数据其实是应用层缓冲的，而不是我们tcp_connection这个对象里面的buffer。</p><p>如果我们跳过直接往套接字发送这一段，而是把数据交给我们的tcp_connection对应的output_buffer，这里有一个数据拷贝的过程，它发生在buffer_append里面。</p><pre><code>int buffer_append(struct buffer *buffer, void *data, int size) {\n    if (data != NULL) {\n        make_room(buffer, size);\n        //拷贝数据到可写空间中\n        memcpy(buffer-&gt;data + buffer-&gt;writeIndex, data, size);\n        buffer-&gt;writeIndex += size;\n    }\n}\n</code></pre><p>但是，如果增加了一段判断来直接往套接字发送，其实就跳过了这段拷贝，直接把数据发往到了套接字发生缓冲区。</p><pre><code>//先往套接字尝试发送数据\nif (!channel_write_event_is_enabled(channel) &amp;&amp; buffer_readable_size(output_buffer) == 0) {\n        nwrited = write(channel-&gt;fd, data, size)\n        ...\n</code></pre><p>在绝大部分场景下，这种处理方式已经满足数据发送的需要了，不再需要把数据拷贝到tcp_connection对象中的output_buffer中。</p><p>如果不满足直接往套接字发送的条件，比如已经注册了回调事件，或者output_buffer里面有数据需要发送，那么就把数据拷贝到output_buffer中，让event_loop的回调不断地驱动handle_write将数据从output_buffer发往套接字缓冲区中。</p><pre><code>//发送缓冲区可以往外写\n//把channel对应的output_buffer不断往外发送\nint handle_write(void *data) {\n    struct tcp_connection *tcpConnection = (struct tcp_connection *) data;\n    struct event_loop *eventLoop = tcpConnection-&gt;eventLoop;\n    assertInSameThread(eventLoop);\n\n    struct buffer *output_buffer = tcpConnection-&gt;output_buffer;\n    struct channel *channel = tcpConnection-&gt;channel;\n\n    ssize_t nwrited = write(channel-&gt;fd, output_buffer-&gt;data + output_buffer-&gt;readIndex,buffer_readable_size(output_buffer));\n    if (nwrited &gt; 0) {\n        //已读nwrited字节\n        output_buffer-&gt;readIndex += nwrited;\n        //如果数据完全发送出去，就不需要继续了\n        if (buffer_readable_size(output_buffer) == 0) {\n            channel_write_event_disable(channel);\n        }\n        //回调writeCompletedCallBack\n        if (tcpConnection-&gt;writeCompletedCallBack != NULL) {\n            tcpConnection-&gt;writeCompletedCallBack(tcpConnection);\n        }\n    } else {\n        yolanda_msgx(&quot;handle_write for tcp connection %s&quot;, tcpConnection-&gt;name);\n    }\n\n}\n</code></pre><p>你可以这样想象，在一个非常高效的处理条件下，你需要发送什么，都直接发送给了套接字缓冲区；而当网络条件变差，处理效率变慢，或者待发送的数据极大，一次发送不可能完成的时候，这部分数据被框架缓冲到tcp_connection的发送缓冲区对象output_buffer中，由事件分发机制来负责把这部分数据发送给套接字缓冲区。</p><h2>关于回调函数的设计</h2><p>在epoll-server-multithreads.c里面定义了很多回调函数，比如onMessage， onConnectionCompleted等，这些回调函数被用于创建一个TCPServer，但是在tcp_connection对照中，又实现了handle_read handle_write 等事件的回调，似乎有两层回调，为什么要这样封装两层回调呢？</p><p>这里如果说回调函数，确实有两个不同层次的回调函数。</p><p>第一个层次是框架定义的，对连接的生命周期管理的回调。包括连接建立完成后的回调、报文读取并接收到output缓冲区之后的回调、报文发送到套接字缓冲区之后的回调，以及连接关闭时的回调。分别是connectionCompletedCallBack、messageCallBack、writeCompletedCallBack，以及connectionClosedCallBack。</p><pre><code>struct tcp_connection {\n    struct event_loop *eventLoop;\n    struct channel *channel;\n    char *name;\n    struct buffer *input_buffer;   //接收缓冲区\n    struct buffer *output_buffer;  //发送缓冲区\n\n    connection_completed_call_back connectionCompletedCallBack;\n    message_call_back messageCallBack;\n    write_completed_call_back writeCompletedCallBack;\n    connection_closed_call_back connectionClosedCallBack;\n\n    void * data; //for callback use: http_server\n    void * request; // for callback use\n    void * response; // for callback use\n};\n</code></pre><p>为什么要定义这四个回调函数呢？</p><p>因为框架需要提供给应用程序和框架的编程接口，我把它总结为编程连接点，或者叫做program-hook-point。就像是设计了一个抽象类，这个抽象类代表了框架给你提供的一个编程入口，你可以继承这个抽象类，完成一些方法的填充，这些方法和框架类一起工作，就可以表现出一定符合逻辑的行为。</p><p>比如我们定义一个抽象类People，这个类的其他属性，包括它的创建和管理都可以交给框架来完成，但是你需要完成两个函数，一个是on_sad，这个人悲伤的时候干什么；另一个是on_happy，这个人高兴的时候干什么。</p><pre><code>abstract class People{\n  void on_sad();\n  \n  void on_happy();\n}\n</code></pre><p>这样，我们可以试着把tcp_connection改成这样：</p><pre><code>abstract class TCP_connection{\n  void on_connection_completed();\n  \n  void on_message();\n  \n  void on_write_completed();\n  \n  void on_connectin_closed();\n}\n</code></pre><p>这个层次的回调，更像是一层框架和应用程序约定的接口，接口实现由应用程序来完成，框架负责在合适的时候调用这些预定义好的接口，回调的意思体现在“框架会调用预定好的接口实现”。</p><p>比如，当连接建立成功，一个新的connection创建出来，connectionCompletedCallBack函数会被回调：</p><pre><code>struct tcp_connection *\ntcp_connection_new(int connected_fd, struct event_loop *eventLoop,\nconnection_completed_call_back connectionCompletedCallBack,\nconnection_closed_call_back connectionClosedCallBack,\nmessage_call_back messageCallBack, \nwrite_completed_call_back writeCompletedCallBack) {\n    ...\n    // add event read for the new connection\n    struct channel *channel1 = channel_new(connected_fd, EVENT_READ, handle_read, handle_write, tcpConnection);\n    tcpConnection-&gt;channel = channel1;\n\n    //connectionCompletedCallBack callback\n    if (tcpConnection-&gt;connectionCompletedCallBack != NULL) {\n        tcpConnection-&gt;connectionCompletedCallBack(tcpConnection);\n    }\n\n   ...\n}\n</code></pre><p>第二个层次的回调，是基于epoll、poll事件分发机制的回调。通过注册一定的读、写事件，在实际事件发生时，由事件分发机制保证对应的事件回调函数被及时调用，完成基于事件机制的网络I/O处理。</p><p>在每个连接建立之后，创建一个对应的channel对象，并为这个channel对象赋予了读、写回调函数：</p><pre><code>// add event read for the new connection\nstruct channel *channel1 = channel_new(connected_fd, EVENT_READ, handle_read, handle_write, tcpConnection);\n</code></pre><p>handle_read函数，对应用程序屏蔽了套接字的读操作，把数据缓冲到tcp_connection的input_buffer中，而且，它还起到了编程连接点和框架的耦合器的作用，这里分别调用了messageCallBack和connectionClosedCallBack函数，完成了应用程序编写部分代码在框架的“代入”。</p><pre><code>int handle_read(void *data) {\n    struct tcp_connection *tcpConnection = (struct tcp_connection *) data;\n    struct buffer *input_buffer = tcpConnection-&gt;input_buffer;\n    struct channel *channel = tcpConnection-&gt;channel;\n\n    if (buffer_socket_read(input_buffer, channel-&gt;fd) &gt; 0) {\n        //应用程序真正读取Buffer里的数据\n        if (tcpConnection-&gt;messageCallBack != NULL) {\n            tcpConnection-&gt;messageCallBack(input_buffer, tcpConnection);\n        }\n    } else {\n        handle_connection_closed(tcpConnection);\n    }\n}\n</code></pre><p>handle_write函数则负责把tcp_connection对象里的output_buffer源源不断地送往套接字发送缓冲区。</p><pre><code>//发送缓冲区可以往外写\n//把channel对应的output_buffer不断往外发送\nint handle_write(void *data) {\n    struct tcp_connection *tcpConnection = (struct tcp_connection *) data;\n    struct event_loop *eventLoop = tcpConnection-&gt;eventLoop;\n    assertInSameThread(eventLoop);\n\n    struct buffer *output_buffer = tcpConnection-&gt;output_buffer;\n    struct channel *channel = tcpConnection-&gt;channel;\n\n    ssize_t nwrited = write(channel-&gt;fd, output_buffer-&gt;data + output_buffer-&gt;readIndex,buffer_readable_size(output_buffer));\n    if (nwrited &gt; 0) {\n        //已读nwrited字节\n        output_buffer-&gt;readIndex += nwrited;\n        //如果数据完全发送出去，就不需要继续了\n        if (buffer_readable_size(output_buffer) == 0) {\n            channel_write_event_disable(channel);\n        }\n        //回调writeCompletedCallBack\n        if (tcpConnection-&gt;writeCompletedCallBack != NULL) {\n            tcpConnection-&gt;writeCompletedCallBack(tcpConnection);\n        }\n    } else {\n        yolanda_msgx(&quot;handle_write for tcp connection %s&quot;, tcpConnection-&gt;name);\n    }\n\n}\n</code></pre><h2>tcp_connection对象设计的想法是什么，和channel有什么联系和区别？</h2><p>tcp_connection对象似乎和channel对象有着非常紧密的联系，为什么要单独设计一个tcp_connection呢？</p><p>我也提到了，开始的时候我并不打算设计一个tcp_connection对象的，后来我才发现非常有必要存在一个tcp_connection对象。</p><p>第一，我需要在暴露给应用程序的onMessage，onConnectionCompleted等回调函数里，传递一个有用的数据结构，这个数据结构必须有一定的现实语义，可以携带一定的信息，比如套接字、缓冲区等，而channel对象过于单薄，和连接的语义相去甚远。</p><p>第二，这个channel对象是抽象的，比如acceptor，比如socketpair等，它们都是一个channel，只要能引起事件的发生和传递，都是一个channel，基于这一点，我也觉得最好把chanel作为一个内部实现的细节，不要通过回调函数暴露给应用程序。</p><p>第三，在后面实现HTTP的过程中，我发现需要在上下文中保存http_request和http_response数据，而这个部分数据放在channel中是非常不合适的，所以才有了最后的tcp_connection对象。</p><pre><code>struct tcp_connection {\n    struct event_loop *eventLoop;\n    struct channel *channel;\n    char *name;\n    struct buffer *input_buffer;   //接收缓冲区\n    struct buffer *output_buffer;  //发送缓冲区\n\n    connection_completed_call_back connectionCompletedCallBack;\n    message_call_back messageCallBack;\n    write_completed_call_back writeCompletedCallBack;\n    connection_closed_call_back connectionClosedCallBack;\n\n    void * data; //for callback use: http_server\n    void * request; // for callback use\n    void * response; // for callback use\n};\n</code></pre><p>简单总结下来就是，每个tcp_connection对象一定包含了一个channel对象，而channel对象未必是一个tcp_connection对象。</p><h2>主线程等待子线程完成的同步锁问题</h2><p>有人在加锁这里有个疑问，如果加锁的目的是让主线程等待子线程初始化event_loop，那不加锁不是也可以达到这个目的吗？主线程while循环里面不断判断子线程的event_loop是否不为null不就可以了？为什么一定要加一把锁呢？</p><pre><code>//由主线程调用，初始化一个子线程，并且让子线程开始运行event_loop\nstruct event_loop *event_loop_thread_start(struct event_loop_thread *eventLoopThread) {\n    pthread_create(&amp;eventLoopThread-&gt;thread_tid, NULL, &amp;event_loop_thread_run, eventLoopThread);\n\n    assert(pthread_mutex_lock(&amp;eventLoopThread-&gt;mutex) == 0);\n\n    while (eventLoopThread-&gt;eventLoop == NULL) {\n        assert(pthread_cond_wait(&amp;eventLoopThread-&gt;cond, &amp;eventLoopThread-&gt;mutex) == 0);\n    }\n    assert(pthread_mutex_unlock(&amp;eventLoopThread-&gt;mutex) == 0);\n\n    yolanda_msgx(&quot;event loop thread started, %s&quot;, eventLoopThread-&gt;thread_name);\n    return eventLoopThread-&gt;eventLoop;\n}\n</code></pre><p>要回答这个问题，就要解释多线程下共享变量竞争的问题。我们知道，一个共享变量在多个线程下同时作用，如果没有锁的控制，就会引起变量的不同步。这里的共享变量就是每个eventLoopThread的eventLoop对象。</p><p>这里如果我们不加锁，一直循环判断每个eventLoopThread的状态，会对CPU增加很大的消耗，如果使用锁-信号量的方式来加以解决，就变得很优雅，而且不会对CPU造成过多的影响。</p><h2>关于channel_map的设计，特别是内存方面的设计。</h2><p>我们来详细介绍一下channel_map。</p><p>channel_map实际上是一个指针数组，这个数组里面的每个元素都是一个指针，指向了创建出的channel对象。我们用数据下标和套接字进行了映射，这样虽然有些元素是浪费了，比如stdin，stdout，stderr代表的套接字0、1和2，但是总体效率是非常高的。</p><p>你在这里可以看到图中描绘了channel_map的设计。</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/fe/a32869877c3bd54f8433267e009002fe.png?wh=2333*2312\" alt=\"\"></p><p>而且，我们的channel_map还不会太占用内存，在最开始的时候，整个channel_map的指针数组大小为0，当这个channel_map投入使用时，会根据实际使用的套接字的增长，按照32、64、128这样的速度成倍增长，这样既保证了实际的需求，也不会一下子占用太多的内存。</p><p>此外，当指针数组增长时，我们不会销毁原来的部分，而是使用realloc()把旧的内容搬过去，再使用memset() 用来给新申请的内存初始化为0值，这样既高效也节省内存。</p><h2>总结</h2><p>以上就是实战篇中一些同学的疑问。</p><p>在这篇文章之后，我们的专栏就告一段落了，我希望这个专栏可以帮你梳理清楚高性能网络编程的方方面面，如果你能从中有所领悟，或者帮助你在面试中拿到好的结果，我会深感欣慰。</p><p>如果你觉得今天的答疑内容对你有所帮助，欢迎把它转发给你的朋友或者同事，一起交流一下。</p>","comments":[{"had_liked":false,"id":157341,"user_name":"酸葡萄","can_delete":false,"product_type":"c1","uid":1154146,"ip_address":"","ucode":"9D059C4FB327C0","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/62/f625b2bb.jpg","comment_is_top":false,"comment_ctime":1575114446,"is_pvip":false,"replies":[{"id":"60376","content":"有两种发送数据的方式，第一种是通过注册WRITE事件，等待reactor来驱动我们把数据发送出去；第二种是不需要reactor驱动，直接往套接字上发送。这里的解释是说，在大部分情况下，为了效率，直接往套接字上发送，当一次解决不了时，再通过reactor来驱动数据发送。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575186315,"ip_address":"","comment_id":157341,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40229820110","product_id":100032701,"comment_content":"为什么在发送数据时，会先尝试通过 socket 直接发送，再由框架接管呢？<br>老师你好，这个问题中，发送缓冲区有数据说明发送效率低（数据多，网络差等原因导致），没有注册WRITE事件是什么意思呢？（感觉这时一个基础问题[小尴尬]）","like_count":9,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476402,"discussion_content":"有两种发送数据的方式，第一种是通过注册WRITE事件，等待reactor来驱动我们把数据发送出去；第二种是不需要reactor驱动，直接往套接字上发送。这里的解释是说，在大部分情况下，为了效率，直接往套接字上发送，当一次解决不了时，再通过reactor来驱动数据发送。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575186315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238323,"user_name":"Geek_63bb29","can_delete":false,"product_type":"c1","uid":2017041,"ip_address":"","ucode":"65C27FA7531722","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/5kv7IqibneNnMLqtWZQR5f1et8lJmoxiaU43Ttzz3zqW7QzBqMkib8GCtImKsms7PPbWmTB51xRnZQAnRPfA1wVaw/132","comment_is_top":false,"comment_ctime":1596121345,"is_pvip":false,"replies":[{"id":"89339","content":"������","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1597585231,"ip_address":"","comment_id":238323,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23070957825","product_id":100032701,"comment_content":"谢谢盛老师，链接是关于实战代码的流程图 https:&#47;&#47;app.yinxiang.com&#47;fx&#47;7e601cad-6501-4fe7-8e4e-f0fbd9d02c4b","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502703,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597585231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2098652,"avatar":"https://static001.geekbang.org/account/avatar/00/20/05/dc/b501933a.jpg","nickname":"有手也不行","note":"","ucode":"D55D23A2C4517E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393891,"discussion_content":"非常感谢总结！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631629040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196664,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1585301076,"is_pvip":false,"replies":[{"id":"74756","content":"给你顶一下，大家一起帮忙看(PS：我最近有点忙，闲下来也来帮你一起看)","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1585484663,"ip_address":"","comment_id":196664,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18765170260","product_id":100032701,"comment_content":"<br>这是我改造的c++版本,目前还在调试中<br>https:&#47;&#47;gitee.com&#47;willam-dialogue&#47;net_reactor<br><br><br>调试过程中遇到了几个问题:<br>1.在telnet以后, 客户端第一次发送消息,可以正常收到消息. 客户端第二次发送消息,会导致server coredump. 目前初步定位到问题是发生在TcpConnection.h中的sendData函数,更具体的原因没有找到<br><br>2.如果将回调函数注册为如下方式:<br>TcpConnection 公有云继承了enabled_shared_from_this<br>typedef std::shared_ptr&lt;TcpConnection&gt; TcpConnectionPtr;<br>typedef std::function&lt;void (const TcpConnectionPtr &amp;)&gt;  ConnCompleteCallBack;<br>typedef std::function&lt;void (const TcpConnectionPtr &amp;)&gt;   ConnCloseCallBack;<br>typedef std::function&lt;void (const TcpConnectionPtr &amp;)&gt;   WriteCompleteCallBack;<br>typedef std::function&lt;void (Buffer*, const TcpConnectionPtr &amp;)&gt;  MessageCallBack;<br><br>在TcpConnection调用ConnCompleteCallBack就没有问题.<br><br>但是在channel中绑定了TcpConnection.h 中的handleRead和handleWrite的回调,在调试过程中会报weak_ptr的相关错误.实际定位发现在handleRead里面调用了MessageCallBack的回调,MessageCallBack的入参是shared_from_this()，weak_ptr的错误由这个产生的，目前还在看是否因为使用方法的原因引起的.<br><br>希望同学们能够一起帮忙看看 这些问题, 我还没找到好的方法.邮箱hy572801400@163.com<br>","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489354,"discussion_content":"给你顶一下，大家一起帮忙看(PS：我最近有点忙，闲下来也来帮你一起看)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585484663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073125,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","nickname":"范闲","note":"","ucode":"F21FD7DF6BA53C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217254,"discussion_content":"还有一些问题自己解决就好了呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585532685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238732,"user_name":"王小白白白","can_delete":false,"product_type":"c1","uid":1140277,"ip_address":"","ucode":"7049DA34B12208","user_header":"https://static001.geekbang.org/account/avatar/00/11/66/35/1b14f2af.jpg","comment_is_top":false,"comment_ctime":1596275679,"is_pvip":false,"replies":[{"id":"89343","content":"赞，已点。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1597585544,"ip_address":"","comment_id":238732,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14481177567","product_id":100032701,"comment_content":"首先非常感谢老师的课程，系统的学习了网络编程相关知识，受益匪浅。<br>这里是我改写的c++ epoll服务器版本，https:&#47;&#47;github.com&#47;wangxiaobai-dd&#47;BowServer<br>主要改动有：<br>1，使用c++语法，智能指针，variant，std::mutex，std::thread等，代码结构有些改变<br>2，消除一些内存泄漏，（buffer相关待做）<br>3，加入一个事件队列channel_queue，这样event_dispatch可以改为非阻塞，取消唤醒机制<br>4,  有新连接时选择任务数最少的连接<br>5，epoll del ，update 接口有所修改<br>会持续完善优化项目，一起学习进步～ 有帮助的话点个星星嘻嘻","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502838,"discussion_content":"赞，已点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597585544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196658,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1585300543,"is_pvip":false,"replies":[{"id":"74755","content":"C++的模板太强大了，不过也很复杂，加油~","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1585484610,"ip_address":"","comment_id":196658,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10175235135","product_id":100032701,"comment_content":"https:&#47;&#47;gitee.com&#47;willam-dialogue&#47;net_reactor<br><br>这是目前我改造的cpp版本，正在调试中。<br>调试过程中遇到一些问题<br>1.telnet连接以后，第一次发送消息正常。但是第二次发送消息就会coredump, 初步定位到问题出在TcpConnection.h 中的sendData函数中，具体原因还在排查<br>2.如果将回调函数改成<br>typedef std::shared_ptr&lt;TcpConnection&gt; TcpConnectionPtr;<br>typedef std::function&lt;void (const TcpConnectionPtr &amp;)&gt;  ConnCompleteCallBack;<br>typedef std::function&lt;void (const TcpConnectionPtr &amp;)&gt;   ConnCloseCallBack;<br>typedef std::function&lt;void (const TcpConnectionPtr &amp;)&gt;   WriteCompleteCallBack;<br>typedef std::function&lt;void (Buffer*, const TcpConnectionPtr &amp;)&gt;  MessageCallBack;","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489352,"discussion_content":"C++的模板太强大了，不过也很复杂，加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585484610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155705,"user_name":"yusuf","can_delete":false,"product_type":"c1","uid":1170784,"ip_address":"","ucode":"9F32149B2ADDA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/60/eae432c6.jpg","comment_is_top":false,"comment_ctime":1574739118,"is_pvip":false,"replies":[{"id":"60370","content":"这里是向reactor注册了数据可读的事件，注意这个时候缓冲区是没有写入的需求的，如果注册了可写事件，相当于这个事件是肯定会发生的(因为套接字写缓冲区都是空的，可以往里写)，所以这个时候你会看到一直会打印。<br><br>也就是说，只有在真正有数据需要发送的时候，才需要注册EVENT_WRITE，让reator驱动把需要发送的数据发送完。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575185568,"ip_address":"","comment_id":155705,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10164673710","product_id":100032701,"comment_content":"&#47;&#47; add event read for the new connection<br>struct channel *channel1 = channel_new(connected_fd, EVENT_READ, handle_read, handle_write, tcpConnection);<br><br>请问这里第4个参数设置了handle_write函数，为什么第2个参数没有设置EVENT_WRITE呢？<br>原本以为这个地方是漏掉了EVENT_WRITE，可添加上EVENT_WRITE后，发现tcp服务器收到数据后会一直打印，而http服务器响应一次请求后会崩溃。这又是为什么呢？","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475841,"discussion_content":"这里是向reactor注册了数据可读的事件，注意这个时候缓冲区是没有写入的需求的，如果注册了可写事件，相当于这个事件是肯定会发生的(因为套接字写缓冲区都是空的，可以往里写)，所以这个时候你会看到一直会打印。\n\n也就是说，只有在真正有数据需要发送的时候，才需要注册EVENT_WRITE，让reator驱动把需要发送的数据发送完。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575185568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331851,"user_name":"CofCai","can_delete":false,"product_type":"c1","uid":2233731,"ip_address":"","ucode":"D822F3309AE690","user_header":"https://static001.geekbang.org/account/avatar/00/22/15/83/8238c6cd.jpg","comment_is_top":false,"comment_ctime":1642833867,"is_pvip":false,"replies":[{"id":"121289","content":"强大，请问我可以引用么？","user_name":"作者回复","user_name_real":"编辑","uid":"1618647","ctime":1642924437,"ip_address":"","comment_id":331851,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5937801163","product_id":100032701,"comment_content":"我最开始是直接一头代码的细节里面去，没先从宏观上有个把握，然后读的很痛苦。于是自己就借助一些工具，比如思维导图画一下函数调用关系、各种结构体对象的关系，总算有一点头绪了。贴上我的学习笔记（笔记是边读源码边写的，有的理解后来觉得不对，但可能没来得及修改，希望各位伙伴带着思考）：<br>各种结构体对象关系：https:&#47;&#47;www.processon.com&#47;view&#47;link&#47;5ead14555653bb6efc7cbe59","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547895,"discussion_content":"强大，请问我可以引用么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642924437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2233731,"avatar":"https://static001.geekbang.org/account/avatar/00/22/15/83/8238c6cd.jpg","nickname":"CofCai","note":"","ucode":"D822F3309AE690","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":550752,"discussion_content":"就是写来分享的，不过会有些错误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644725767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547895,"ip_address":""},"score":550752,"extra":""}]},{"author":{"id":2233731,"avatar":"https://static001.geekbang.org/account/avatar/00/22/15/83/8238c6cd.jpg","nickname":"CofCai","note":"","ucode":"D822F3309AE690","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547853,"discussion_content":"具体是29讲的源码，不过后面都差不多，只不过多了http协议的处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642911134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317236,"user_name":"日就月将","can_delete":false,"product_type":"c1","uid":2651148,"ip_address":"","ucode":"0F9BA55A2898FF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/cabLXAUXiavXnEckAgo971o4l1CxP4L9wOV2eUGTyKBUicTib6gJyKV9iatM4GG1scz5Ym17GOzXWQEGzhE31tXUtQ/132","comment_is_top":false,"comment_ctime":1634718394,"is_pvip":false,"replies":[{"id":"115258","content":"有可能遗漏的，能帮忙在githut提MR么？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1635126775,"ip_address":"","comment_id":317236,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5929685690","product_id":100032701,"comment_content":"老师 您写的代码好像没有加内存释放处理","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528728,"discussion_content":"有可能遗漏的，能帮忙在githut提MR么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635126775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234661,"user_name":"范龙dragon","can_delete":false,"product_type":"c1","uid":1157519,"ip_address":"","ucode":"D9CEADE6B6BED4","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/8f/a998a456.jpg","comment_is_top":false,"comment_ctime":1594745827,"is_pvip":false,"replies":[{"id":"86814","content":"我的锅，应该在tcp_connection_shutdown函数里面释放channel和tcp_connection两个对象。抽空改下。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1594907961,"ip_address":"","comment_id":234661,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5889713123","product_id":100032701,"comment_content":"哪位大神回答下，框架中哪里有释放tcp_connection和channel资源的地方，从代码中看到这两个对象都是malloc出来的，但没找到在哪里free的，求指教！","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501453,"discussion_content":"我的锅，应该在tcp_connection_shutdown函数里面释放channel和tcp_connection两个对象。抽空改下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594907961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2075086,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","nickname":"Running man","note":"","ucode":"F3357D6696A5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":586242,"discussion_content":"还有loop_element对象没释放","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662058249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":501453,"ip_address":"浙江"},"score":586242,"extra":""}]},{"author":{"id":1024239,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/ef/791d0f5e.jpg","nickname":"猿","note":"","ucode":"372C2D5714EC0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384145,"discussion_content":"老师，你好。服务端调用shutdown导致连接半关闭，客户端回送fin报文后，服务端的已连接套接字read返回0，连接完全关闭，这样其实是不是得在handle_connection_closed释放这两个资源呢？但是这样的话，还有个问题，handle_connection_closed里的close还需要调用吗，有点困惑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626402813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195876,"user_name":"bbbi","can_delete":false,"product_type":"c1","uid":1682175,"ip_address":"","ucode":"9A539AEF791428","user_header":"https://static001.geekbang.org/account/avatar/00/19/aa/ff/e2c331e0.jpg","comment_is_top":false,"comment_ctime":1585220617,"is_pvip":false,"replies":[{"id":"74749","content":"嗯，应该说基于事件分发机制的框架，大致的思想都是相同的，不信你可以再去看看ACE, libevent或者其他的库。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1585483510,"ip_address":"","comment_id":195876,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5880187913","product_id":100032701,"comment_content":"老师，好像您封装的这个框架跟netty神似","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489177,"discussion_content":"嗯，应该说基于事件分发机制的框架，大致的思想都是相同的，不信你可以再去看看ACE, libevent或者其他的库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585483510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014061,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/79/2d/dbb5570f.jpg","nickname":"huadanian","note":"","ucode":"A986E1DB777428","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377729,"discussion_content":"类似的框架代码目前看的有点懵啊，应该还是功力不够啊。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622794439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192822,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1584873936,"is_pvip":false,"replies":[{"id":"74752","content":"1.应该直接透传了event_loop指针的，不是太明白你的问题；<br>2.保留event_loop对象到tcp_connection里面，是为了后面将这个connection对应的事件和event_loop绑定，就是你说的那部分理解；<br>3.handle_connection_established就是acceptor线程所要干的事情，也就是你说的从线程池event_loop数组里面获取一个去处理。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1585484352,"ip_address":"","comment_id":192822,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879841232","product_id":100032701,"comment_content":"老师你好，最近我在做这部分的C++代码的改造，但是再改造过程中有几个疑问点需要像您请教下。<br>1.关于channel的设计，channel 对象里面定义了一个void *data用来转换成EventLoop指针，在channel_write_event_enable 和 channel_write_event_disable用来改变事件的状态，而且内部的实现都是调用了EventLoop的event_loop_update_channel_event这个函数。为什么不直接将loop 指针透传呢？<br>2.关于TcpConnection的设计里面的一个成员是EventLoop指针，在tcp_connection_new中会调用channel_new， channel_new的赋值成了tcpConnection， 即data = ttcpConnection。但是在调用channel_write_event_enable 转换成的是EventLoop指针，所以在TcpConnection中EventLoop放第一个是为了这个调用?<br>3.在Reactor中，做事件分发的是Acceptor，但是在我们这个代码里实际做事件分发的应该是TcpServer啊~handle_connection_established中分发到了不同的线程上","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488471,"discussion_content":"1.应该直接透传了event_loop指针的，不是太明白你的问题；\n2.保留event_loop对象到tcp_connection里面，是为了后面将这个connection对应的事件和event_loop绑定，就是你说的那部分理解；\n3.handle_connection_established就是acceptor线程所要干的事情，也就是你说的从线程池event_loop数组里面获取一个去处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585484352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150168,"user_name":"Ray_h","can_delete":false,"product_type":"c1","uid":1619394,"ip_address":"","ucode":"A4B6040F7F1532","user_header":"https://static001.geekbang.org/account/avatar/00/18/b5/c2/b544d375.jpg","comment_is_top":false,"comment_ctime":1573472100,"is_pvip":false,"replies":[{"id":"58549","content":"非常支持c++改造，可以贴出代码地址大家一起review。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1573990977,"ip_address":"","comment_id":150168,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5868439396","product_id":100032701,"comment_content":"非常感谢老师的付出！前面基础篇和提升篇的课程可以很快消化。实践篇里面的内容我则需要花比较多的时间去梳理对象之间的关系，然后才能弄清楚运行时各个对象之间的联系。正如前面有同学说老师虽然是用C语言写的代码，但是处处是面向对象的思想。<br>我认为tcp-server与http-server是基类和子类关系；channel和acceptor也是基类与子类的关系。当然里面还存在大量的包含关系。tcp-connection类继承自channel，但是tcp-connection与eventloop的关系我就不是很确定。还想请老师或者其他同学能够指点迷津，最终很想将老师的c代码改写成c++风格，希望能跟各位同学相互讨论。email: leihao22@126.com","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474080,"discussion_content":"非常支持c++改造，可以贴出代码地址大家一起review。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573990977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2075086,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","nickname":"Running man","note":"","ucode":"F3357D6696A5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392982,"discussion_content":"同感，框架设计往往没有标准的答案，思考过程本身就是很繁杂，所以难点在于理解和消化作者的设计思路和方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631195074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073125,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","nickname":"范闲","note":"","ucode":"F21FD7DF6BA53C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":187648,"discussion_content":"Github贴出来呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582761958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356227,"user_name":"Running man","can_delete":false,"product_type":"c1","uid":2075086,"ip_address":"浙江","ucode":"F3357D6696A5C1","user_header":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","comment_is_top":false,"comment_ctime":1662054164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662054164","product_id":100032701,"comment_content":"event_loop_channel_buffer_nolock中申请channelElement并添加到eventLoop链表中，但代码中并没有看到释放该对象堆栈资源，这里是不是一处内存泄露？应该需要在event_loop_handle_pending_channel中去处理释放这部分内存吧？","like_count":0},{"had_liked":false,"id":353146,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"江苏","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1659189986,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1659189986","product_id":100032701,"comment_content":"谢谢老师，目前已经照着老师的思路重新拿c语言实现了一遍。然后现在准备利用go的channel，interface和协程重构一遍，有些语言上的支持感觉会方便很多。我自己现在准备往老师的思路里添加时间轮或时间堆来增加这个框架的功能。","like_count":0},{"had_liked":false,"id":312116,"user_name":"有手也不行","can_delete":false,"product_type":"c1","uid":2098652,"ip_address":"","ucode":"D55D23A2C4517E","user_header":"https://static001.geekbang.org/account/avatar/00/20/05/dc/b501933a.jpg","comment_is_top":false,"comment_ctime":1631630085,"is_pvip":false,"replies":[{"id":"114038","content":"第一个问题，文章中已经解释了，为了性能。<br><br>第二个问题，代码可以说明一切。(把没有发送的数据拷贝到缓冲区中)<br>f (!fault &amp;&amp; nleft &gt; 0) { &#47;&#47;拷贝到Buffer中，Buffer的数据由框架接管 buffer_append(output_buffer, data + nwrited, nleft); if (!channel_write_event_is_enabled(channel)) { channel_write_event_enable(channel); } }","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1633576302,"ip_address":"","comment_id":312116,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631630085","product_id":100032701,"comment_content":"为什么在发送数据时，会先尝试通过 socket 直接发送，再由框架接管呢？<br>老师关于这个问题我还有一点问题就是，假如此时这个channel没有注册write事件，那么我们直接通过write发送内容，但是此时的数据量很大，只发送了一部分，那么框架将接管剩余没发送的数据的，将之注册到channel中，那么我们在接收端收到的数据不就成了两部分了，接收端如何连接这两部分(或者说如何辨认这两部数据是属于一个完整信息的呢)","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526868,"discussion_content":"第一个问题，文章中已经解释了，为了性能。\n\n第二个问题，代码可以说明一切。(把没有发送的数据拷贝到缓冲区中)\nf (!fault &amp;amp;&amp;amp; nleft &amp;gt; 0) { //拷贝到Buffer中，Buffer的数据由框架接管 buffer_append(output_buffer, data + nwrited, nleft); if (!channel_write_event_is_enabled(channel)) { channel_write_event_enable(channel); } }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633576302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285486,"user_name":"小家伙54","can_delete":false,"product_type":"c1","uid":2444674,"ip_address":"","ucode":"8DCEC9BFA2260B","user_header":"https://static001.geekbang.org/account/avatar/00/25/4d/82/2bb78658.jpg","comment_is_top":false,"comment_ctime":1616836514,"is_pvip":false,"replies":[{"id":"103644","content":"看一下README。整个工程使用CMake编译。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1616934068,"ip_address":"","comment_id":285486,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1616836514","product_id":100032701,"comment_content":"老师，您最后的服务器代码是那个lib文件夹里的内容吗？我刚开始学这方面的内容，不知道怎么运行，您能说一下吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517689,"discussion_content":"看一下README。整个工程使用CMake编译。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616934068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279042,"user_name":"Steiner","can_delete":false,"product_type":"c1","uid":1622329,"ip_address":"","ucode":"232C1C75207A1E","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/39/11904266.jpg","comment_is_top":false,"comment_ctime":1613566403,"is_pvip":false,"replies":[{"id":"102009","content":"可以用std:map的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1614516923,"ip_address":"","comment_id":279042,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613566403","product_id":100032701,"comment_content":"如果用C++编写的话，这个channel_map可以用map&lt;int, channel&gt;对象来表示 fd 与 channel的映射吗","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515605,"discussion_content":"可以用std:map的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614516923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274807,"user_name":"Geek_de83f6","can_delete":false,"product_type":"c1","uid":2170148,"ip_address":"","ucode":"3EFB4DC01C222D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKn2fx2UTaWgMl3fSOSicJEDOibbtYicHUVSG8JsA8j6Njibc9j3YVSvHtMZb2Z20l4NmjibiaSv8m7hz9w/132","comment_is_top":false,"comment_ctime":1611168523,"is_pvip":false,"replies":[{"id":"99883","content":"额，仁者见仁，智者见智吧。个人觉得架构的好处是，可以快速进行业务逻辑的编写。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1611412258,"ip_address":"","comment_id":274807,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1611168523","product_id":100032701,"comment_content":"代码看了两周终于看完了，没感觉架构哪里好，把挺简单的事情写的这么复杂。。。","like_count":0,"discussions":[{"author":{"id":1593251,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/a3/0e56b4e5.jpg","nickname":"doge","note":"","ucode":"9E2D4C8F9B4CBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349952,"discussion_content":"有框架主要是方便迅速落地业务","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1613640168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514131,"discussion_content":"额，仁者见仁，智者见智吧。个人觉得架构的好处是，可以快速进行业务逻辑的编写。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611412258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233895,"user_name":"刘忽悠","can_delete":false,"product_type":"c1","uid":1252173,"ip_address":"","ucode":"095DE3A8D3F450","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/4d/2cc44d9a.jpg","comment_is_top":false,"comment_ctime":1594500632,"is_pvip":true,"replies":[{"id":"86810","content":"基本正确吧。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1594907572,"ip_address":"","comment_id":233895,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594500632","product_id":100032701,"comment_content":"直接往socket发送是不是就是线程池里面业务线程处理完成之后，在线程里面直接write，这样做的话有一部分I&#47;O业务相当于在业务线程里面发送，没有进行分离；交给框架去做的话，那么I&#47;O就全部交给负责I&#47;O的线程去处理，清晰一些；不过在业务线程里面直接发，效率高一些，也能理解，所以先去尝试直接发送，不成功再交给框架去处理，不知道理解对不对","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501210,"discussion_content":"基本正确吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594907572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219638,"user_name":"游走","can_delete":false,"product_type":"c1","uid":1897220,"ip_address":"","ucode":"7CA4B0D227B674","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f3/04/ee6da3c0.jpg","comment_is_top":false,"comment_ctime":1590054031,"is_pvip":false,"replies":[{"id":"82161","content":"可以跟大家分享一下么？有你的评论更精彩","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1590926417,"ip_address":"","comment_id":219638,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590054031","product_id":100032701,"comment_content":"学到了关于网络库的新知识","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495885,"discussion_content":"可以跟大家分享一下么？有你的评论更精彩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590926417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208652,"user_name":"吴向兵","can_delete":false,"product_type":"c1","uid":1350398,"ip_address":"","ucode":"918DFE98556A05","user_header":"https://static001.geekbang.org/account/avatar/00/14/9a/fe/c451a509.jpg","comment_is_top":false,"comment_ctime":1587396143,"is_pvip":false,"replies":[{"id":"78416","content":"当然可以","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587804296,"ip_address":"","comment_id":208652,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587396143","product_id":100032701,"comment_content":"一个客户端需要管理很多个服务器的情况下，客户端和多个服务器之间的网络通信，客户端能否采用多路复用模型？(比如管理5000个服务器)","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492563,"discussion_content":"当然可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587804296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207107,"user_name":"Geek_d6f50f","can_delete":false,"product_type":"c1","uid":1793213,"ip_address":"","ucode":"4AA490453CF4FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wwM75BhyU43UYOJ6fZCZgY6pfNPGHHRlooPLQEtDGUNic4aLRHWmBRTpIiblBAFheUVm9Sw8HWAChcFsnVM2sd5Q/132","comment_is_top":false,"comment_ctime":1587007423,"is_pvip":true,"replies":[{"id":"77705","content":"是这样，当我们返回后，事件驱动机制会保证，如果有数据，还会继续通知到我们继续进行readv操作，这样数据还是会被不断的读取到。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587302686,"ip_address":"","comment_id":207107,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1587007423","product_id":100032701,"comment_content":"老师，您好！在您封装读网络框架中，采用的是非阻塞IO，但是您在读数据的时候，仅仅是进行readv的一次调用进行读取，这样不会有问题吗？比如在读数据的时候，此时返回-1，errno==EWOULDBLOCK","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492011,"discussion_content":"是这样，当我们返回后，事件驱动机制会保证，如果有数据，还会继续通知到我们继续进行readv操作，这样数据还是会被不断的读取到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587302686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2075086,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a9/ce/23f2e185.jpg","nickname":"Running man","note":"","ucode":"F3357D6696A5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":586243,"discussion_content":"所以这个epoll 套接字，不能用边缘触发方式吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662058511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":492011,"ip_address":"浙江"},"score":586243,"extra":""}]}]},{"had_liked":false,"id":204158,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1586343439,"is_pvip":false,"replies":[{"id":"76797","content":"能描述的更细致一点么？","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1586680600,"ip_address":"","comment_id":204158,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586343439","product_id":100032701,"comment_content":"老师我们线程间通信的时候为啥不用eventfd呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491094,"discussion_content":"能描述的更细致一点么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586680600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201645,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1585815901,"is_pvip":false,"replies":[{"id":"75769","content":"嗯，可以的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1586075750,"ip_address":"","comment_id":201645,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585815901","product_id":100032701,"comment_content":"我把channelMap用vector替代了","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490388,"discussion_content":"嗯，可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586075750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197576,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1585386056,"is_pvip":false,"replies":[{"id":"74757","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1585484674,"ip_address":"","comment_id":197576,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585386056","product_id":100032701,"comment_content":"https:&#47;&#47;gitee.com&#47;willam-dialogue&#47;net_reactor<br>回调部分的bug解决了，目前可以多个telnet客户端一起发消息了，链接关闭的部分还有bug要修复","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489549,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585484674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196655,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1585300342,"is_pvip":false,"replies":[{"id":"74754","content":"可以的, C++版本看起来更清爽，本专栏用C语言也是为了减轻大家对语言的负担。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1585484576,"ip_address":"","comment_id":196655,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585300342","product_id":100032701,"comment_content":"https:&#47;&#47;gitee.com&#47;willam-dialogue&#47;net_reactor","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489350,"discussion_content":"可以的, C++版本看起来更清爽，本专栏用C语言也是为了减轻大家对语言的负担。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585484576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185138,"user_name":"程序员班吉","can_delete":false,"product_type":"c1","uid":1478098,"ip_address":"","ucode":"BD48CF7649609A","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/d2/8a6be8d8.jpg","comment_is_top":false,"comment_ctime":1583493551,"is_pvip":false,"replies":[{"id":"71665","content":"这个就是在连接上enbale SSL认证，是基于http的安全连接。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1583639552,"ip_address":"","comment_id":185138,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583493551","product_id":100032701,"comment_content":"期望老师能讲解一下让web服务器支持https的实现方法","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486263,"discussion_content":"这个就是在连接上enbale SSL认证，是基于http的安全连接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583639552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157411,"user_name":"龙骑士","can_delete":false,"product_type":"c1","uid":1109618,"ip_address":"","ucode":"306B2C9B781374","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/72/3008fd34.jpg","comment_is_top":false,"comment_ctime":1575137531,"is_pvip":false,"replies":[{"id":"61034","content":"我仔细看了下，确实在handle_connection_closed方法中需要增加释放connection对象，感谢指正，方便的话，不知道是否可以提一个PR修复一下。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575800527,"ip_address":"","comment_id":157411,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575137531","product_id":100032701,"comment_content":"看了代码，好像connection对象没有释放，不知道是不是看漏了","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476419,"discussion_content":"我仔细看了下，确实在handle_connection_closed方法中需要增加释放connection对象，感谢指正，方便的话，不知道是否可以提一个PR修复一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575800527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145266,"user_name":"CCC","can_delete":false,"product_type":"c1","uid":1003738,"ip_address":"","ucode":"2E254444098267","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/da/ed4803cb.jpg","comment_is_top":false,"comment_ctime":1572240481,"is_pvip":false,"replies":[{"id":"56057","content":"这是对我最大的奖励，感谢反馈","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572260126,"ip_address":"","comment_id":145266,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572240481","product_id":100032701,"comment_content":"真的非常谢谢老师，这个专栏我大多数文章都看了两遍以上，很多操作系统的细节关联的都搜了不少，很多以前只是了解的东西做到了真的理解了，再次谢谢老师！","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472313,"discussion_content":"这是对我最大的奖励，感谢反馈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572260126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145238,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1572235084,"is_pvip":false,"replies":[{"id":"56014","content":"感谢支持，有收获是对我工作最大的肯定","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572238293,"ip_address":"","comment_id":145238,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1572235084","product_id":100032701,"comment_content":"自己是做后端开发的，平常的开发工作也时常需要深入到TCP的底层去排除问题。学习完这个课程，真的是大大丰富了自己的网络知识细节。<br><br>尤其是最后的实战部分。最近在研究PYTHON和JAVASCRIPT中的异步编程模型和事件循环，但对它们的底层实现细节不清楚，看了老师的实战代码，里面也有事件循环，也有CHANNEL等，觉得收获甚大，对这里提到的两种语言底层有了一个模糊的感性认识，为以后研读源码提供了一个入口。<br><br>为此，自己也花了好长时间画了各个对象之间的关系图和应用启动后各对象之间的交互流程图。<br><br>感谢老师！","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472306,"discussion_content":"感谢支持，有收获是对我工作最大的肯定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572238293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1619394,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b5/c2/b544d375.jpg","nickname":"Ray_h","note":"","ucode":"A4B6040F7F1532","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48302,"discussion_content":"能够跟你交流一下对象关系图吗！同感兴趣 wx:18040519447","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573472179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145180,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1572226404,"is_pvip":false,"replies":[{"id":"56015","content":"江湖还在，继续交流哦","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572238336,"ip_address":"","comment_id":145180,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572226404","product_id":100032701,"comment_content":"这是老师给我吗收拾的细软,让我们下山了吗？o(╥﹏╥)o","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472281,"discussion_content":"江湖还在，继续交流哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572238336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145179,"user_name":"MoonGod","can_delete":false,"product_type":"c1","uid":1254337,"ip_address":"","ucode":"CB39976963F37A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/c1/54ef6885.jpg","comment_is_top":false,"comment_ctime":1572226338,"is_pvip":false,"replies":[{"id":"55966","content":"非常欣慰，感谢支持","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572228603,"ip_address":"","comment_id":145179,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572226338","product_id":100032701,"comment_content":"谢谢老师的解答，整个系列受益匪浅。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472280,"discussion_content":"非常欣慰，感谢支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572228603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}