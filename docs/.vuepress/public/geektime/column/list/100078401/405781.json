{"id":405781,"title":"40 | 瞧一瞧Linux：详解socket的接口实现","content":"<p>你好，我是LMOS。</p><p>上节课，我们一起了解了套接字的工作机制和数据结构，但套接字有哪些基本接口实现呢？相信学完这节课，你就能够解决这个问题了。</p><p>今天我会和你探讨套接字从创建、协议接口注册与初始化过程，还会为你深入分析套接字系统，是怎样调用各个功能函数的。通过这节课，相信你可以学会基于套接字来编写网络应用程序。有了之前的基础，想理解这节课并不难，让我们正式开始吧。</p><h2>套接字接口</h2><p>套接字接口最初是BSD操作系统的一部分，在应用层与TCP/IP协议栈之间接供了一套标准的独立于协议的接口。</p><p>Linux内核实现的套接字接口，将UNIX的“一切都是文件操作”的概念应用在了网络连接访问上，让应用程序可以用常规文件操作API访问网络连接。</p><p>从TCP/IP协议栈的角度来看，传输层以上的都是应用程序的一部分，Linux与传统的UNIX类似，TCP/IP协议栈驻留在内核中，与内核的其他组件共享内存。传输层以上执行的网络功能，都是在用户地址空间完成的。</p><p>Linux使用内核套接字概念与用户空间套接字通信，这样可以让实现和操作变得更简单。Linux提供了一套API和套接字数据结构，这些服务向下与内核接口，向上与用户空间接口，应用程序正是使用这一套API访问内核中的网络功能。</p><!-- [[[read_end]]] --><h3>套接字的创建</h3><p>在应用程序使用TCP/IP协议栈的功能之前，我们必须调用套接字库函数API创建一个新的套接字，创建好以后，对库函数创建套接字的调用，就会转换为内核套接字创建函数的系统调用。</p><p>这时，完成的是通用套接字创建的初始化功能，跟具体的协议族并不相关。</p><p>这个过程具体是这样的，在应用程序中执行socket函数，socket产生系统调用中断执行内核的套接字分路函数sys_socketcall，在sys_socketcall套接字函数分路器中将调用传送到sys_socket函数，由sys_socket函数调用套接字的通用创建函数sock_create。</p><p>sock_create函数完成通用套接字创建、初始化任务后，再调用特定协议族的套接字创建函数。</p><p>这样描述你可能还没有直观感受，我特意画了图，帮你梳理socket创建的流程，你可以对照图片仔细体会调用过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/31/ef/313d5d8c3b3224633fab2bd121006aef.jpg?wh=2655x2255\" alt=\"\" title=\"socket创建示意图\"></p><p>结合图解，我再用一个具体例子帮你加深理解，比如由AF_INET协议族的inet_create函数完成套接字与特定协议族的关联。</p><p>一个新的struct socket数据结构起始由sock_create函数创建，<strong>该函数直接调用__sock_create函数，__sock_create函数的任务是为套接字预留需要的内存空间，由sock_alloc函数完成这项功能。</strong></p><p>这个sock_alloc函数不仅会为struct socket数据结构实例预留空间，也会为struct inode数据结构实例分配需要的内存空间，这样可以使两个数据结构的实例相关联。__sock_create函数代码如下。</p><pre><code>static int __sock_create(struct net *net, int family, int type, int protocol,\n struct socket **res, int kern)\n{\nint err;\nstruct socket *sock;\nconst struct net_proto_family *pf;\n// 首先检验是否支持协议族\n/*\n* 检查是否在内核支持的socket范围内\n*/\nif (family &lt; 0 || family &gt;= NPROTO)\nreturn -EAFNOSUPPORT;\nif (type &lt; 0 || type &gt;= SOCK_MAX)\nreturn -EINVAL;\n/*\n* 为新的套接字分配内存空间，分配成功后返回新的指针\n*/\n\nsock = sock_alloc();\n}\n</code></pre><p>sock_alloc函数如下所示。</p><pre><code>static struct socket *sock_alloc(void) {\nstruct inode *inode;\nstruct socket *sock;\n    // 初始化一个可用的inode节点， 在fs/inode.c中\n    inode = new_inode(sock_mnt-&gt;mnt_sb);\n    if (!inode)\n    return NULL;\n    // 实际创建的是socket_alloc复合对象，因此要使用SOCKET_I宏从inode中取出关联的socket对象用于返回\n    sock = SOCKET_I(inode);\n\n    kmemcheck_annotate_bitfield(sock, type);\n    // 文件类型为套接字\n    inode-&gt;i_mode = S_IFSOCK | S_IRWXUGO;\n    inode-&gt;i_uid = current_fsuid();\n    inode-&gt;i_gid = current_fsgid();\n\n    percpu_add(sockets_in_use, 1);\nreturn sock;\n}\n</code></pre><p>当具体的协议与新套接字相连时，其内部状态的管理由协议自身维护。</p><p>现在，函数将struct socket数据结构的struct proto_ops *ops设置为NULL。随后，当某个协议族中的协议成员的套接字创建函数被调用时，ops将指向协议实例的操作函数。这时将struct socket数据结构的flags数据域设置为0，创建时还没有任何标志需要设置。</p><p>在之后的调用中，应用程序调用send或receive套接字库函数时会设置flags数据域。最后将其他两个数据域sk和file初始化为NULL。sk数据域随后会把由协议特有的套接字创建函数设置为指向内部套接字结构。file将在调用sock_ma_fd函数时设置为分配的文件返回的指针。</p><p>文件指针用于访问打开套接字的虚拟文件系统的文件状态。在sock_alloc函数返回后，sock_create函数调用协议族的套接字创建函数err =pf-&gt;create(net, sock, protocol)，它通过访问net_families数组获取协议族的创建函数，对于TCP/IP协议栈，协议族将设置为AF_INET。</p><h3>套接字的绑定</h3><p>创建完套接字后，应用程序需要调用sys_bind函数把套接字和地址绑定起来，代码如下所示。</p><pre><code>asmlinkage long sysbind (bind, int, fd, struct sockaddr __user *, umyaddr, int, addrlen)\n{\n\tstruct socket *sock;\n\tstruct sockaddr_storage address;\n\tint err, fput_needed;\n \n\t/*\n\t * 获取socket实例。\n\t */\n\tsock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);\n\tif (sock) {\n\t\terr = move_addr_to_kernel(umyaddr, addrlen, (struct sockaddr *)&amp;address);\n\t\tif (err &gt;= 0) {\n\t\t\terr = security_socket_bind(sock,\n\t\t\t\t\t\t   (struct sockaddr *)&amp;address,\n\t\t\t\t\t\t   addrlen);\n\t\t\t/*\n\t\t\t * 如果是TCP套接字，sock-&gt;ops指向的是inet_stream_ops，\n\t\t\t * sock-&gt;ops是在inet_create()函数中初始化，所以bind接口\n\t\t\t * 调用的是inet_bind()函数。\n\t\t\t */\n\t\t\tif (!err)\n\t\t\t\terr = sock-&gt;ops-&gt;bind(sock,\n\t\t\t\t\t\t      (struct sockaddr *)\n\t\t\t\t\t\t      &amp;address, addrlen);\n\t\t}\n\t\tfput_light(sock-&gt;file, fput_needed);\n\t}\n\treturn err;\n}\n</code></pre><p>结合代码，我们可以看到，sys_bind函数首先会查找套接字对应的socket实例，调用<strong>sockfd_lookup_light</strong>。在绑定之前，将用户空间的地址拷贝到内核空间的缓冲区中，在拷贝过程中会检查用户传入的地址是否正确。</p><p>等上述的准备工作完成后，就会调用<strong>inet_bind函数</strong>来完成绑定操作。<strong>inet_bind</strong>函数代码如下所示。</p><pre><code>int inet_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len)\n{\n    struct sockaddr_in *addr = (struct sockaddr_in *)uaddr;\n    struct sock *sk = sock-&gt;sk;  \n    struct inet_sock *inet = inet_sk(sk);\n    unsigned short snum;\n    int chk_addr_ret;\n    int err;\n\n    if (sk-&gt;sk_prot-&gt;bind) {/* 如果传输层接口上实现了bind调用，则回调它。目前只有SOCK_RAW类型的传输层实现了该接口raw_bind */\n        err = sk-&gt;sk_prot-&gt;bind(sk, uaddr, addr_len);\n        goto out;\n    }\n    err = -EINVAL;\n    if (addr_len &lt; sizeof(struct sockaddr_in))\n        goto out;\n    err = -EADDRNOTAVAIL;\n    if (!sysctl_ip_nonlocal_bind &amp;&amp;/* 必须绑定到本地接口的地址 */\n        !inet-&gt;freebind &amp;&amp;\n        addr-&gt;sin_addr.s_addr != INADDR_ANY &amp;&amp;/* 绑定地址不合法 */\n        chk_addr_ret != RTN_LOCAL &amp;&amp;\n        chk_addr_ret != RTN_MULTICAST &amp;&amp;\n        chk_addr_ret != RTN_BROADCAST)\n        goto out;\n\n    snum = ntohs(addr-&gt;sin_port);\n    err = -EACCES;\n    if (snum &amp;&amp; snum &lt; PROT_SOCK &amp;&amp; !capable(CAP_NET_BIND_SERVICE))\n        goto out;\n\n    lock_sock(sk);/* 对套接口进行加锁，因为后面要对其状态进行判断 */\n\n    /* Check these errors (active socket, double bind). */\n    err = -EINVAL;\n    /**\n     * 如果状态不为CLOSE，表示套接口已经处于活动状态，不能再绑定\n     * 或者已经指定了本地端口号，也不能再绑定\n     */\n    if (sk-&gt;sk_state != TCP_CLOSE || inet-&gt;num)\n        goto out_release_sock;\n\n    /* 设置地址到传输控制块中 */\n    inet-&gt;rcv_saddr = inet-&gt;saddr = addr-&gt;sin_addr.s_addr;\n    /* 如果是广播或者多播地址，则源地址使用设备地址。 */\n    if (chk_addr_ret == RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST)\n        inet-&gt;saddr = 0;  /* Use device */\n\n    /* 调用传输层的get_port来进行地址绑定。如tcp_v4_get_port或udp_v4_get_port */\n    if (sk-&gt;sk_prot-&gt;get_port(sk, snum)) {\n        …\n    }\n\n    /* 设置标志，表示已经绑定了本地地址和端口 */\n    if (inet-&gt;rcv_saddr)\n        sk-&gt;sk_userlocks |= SOCK_BINDADDR_LOCK;\n    if (snum)\n        sk-&gt;sk_userlocks |= SOCK_BINDPORT_LOCK;\n    inet-&gt;sport = htons(inet-&gt;num);\n    /* 还没有连接到对方，清除远端地址和端口 */\n    inet-&gt;daddr = 0;\n    inet-&gt;dport = 0;\n    /* 清除路由缓存 */\n    sk_dst_reset(sk);\n    err = 0;\nout_release_sock:\n    release_sock(sk);\nout:\n    return err;\n}\n</code></pre><h3>主动连接</h3><p>因为应用程序处理的是面向连接的网络服务（SOCK_STREAM或SOCK_SEQPACKET），所以在交换数据之前，需要在请求连接服务的进程（客户）与提供服务的进程（服务器）之间建立连接。</p><p>当应用程序调用<strong>connect</strong>函数发出连接请求时，内核会启动函数<strong>sys_connect</strong>，详细代码如下。</p><pre><code>int __sys_connect(int fd, struct sockaddr __user *uservaddr, int addrlen)\n{\n\tint ret = -EBADF;\n\tstruct fd f;\n\tf = fdget(fd);\n\tif (f.file) {\n\t\tstruct sockaddr_storage address;\n\t\tret = move_addr_to_kernel(uservaddr, addrlen, &amp;address);\n\t\tif (!ret)\n            // 调用__sys_connect_file\n\t\t\tret = __sys_connect_file(f.file, &amp;address, addrlen, 0);\n\t\tfdput(f);\n\t}\n\treturn ret;\n}\n</code></pre><p>连接成功会返回socket的描述符，否则会返回一个错误码。</p><h3>监听套接字</h3><p>调用listen函数时，应用程序触发内核的<strong>sys_listen</strong>函数，把套接字描述符fd对应的套接字设置为监听模式，观察连接请求。详细代码你可以看看后面的内容。</p><pre><code>int __sys_listen(int fd, int backlog)\n{\n\tstruct socket *sock;\n\tint err, fput_needed;\n\tint somaxconn;\n    // 通过套接字描述符\b找到struct socket\n\tsock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);\n\tif (sock) {\n\t\tsomaxconn = sock_net(sock-&gt;sk)-&gt;core.sysctl_somaxconn;\n\t\tif ((unsigned int)backlog &gt; somaxconn)\n\t\t\tbacklog = somaxconn;\n\t\terr = security_socket_listen(sock, backlog);\n\t\tif (!err)\n            // 根据套接字类型调用监听函数\n\t\t\terr = sock-&gt;ops-&gt;listen(sock, backlog);\n\t\tfput_light(sock-&gt;file, fput_needed);\n\t}\n\treturn err;\n}\n</code></pre><h3>被动接收连接</h3><p>前面说过主动连接，我们再来看看被动接受连接的情况。接受一个客户端的连接请求会调用<strong>accept</strong>函数，应用程序触发内核函数<strong>sys_accept</strong>，等待接收连接请求。如果允许连接，则重新创建一个代表该连接的套接字，并返回其套接字描述符，代码如下。</p><pre><code>int __sys_accept4_file(struct file *file, unsigned file_flags,\n\t\t       struct sockaddr __user *upeer_sockaddr,\n\t\t       int __user *upeer_addrlen, int flags,\n\t\t       unsigned long nofile)\n{\n\tstruct socket *sock, *newsock;\n\tstruct file *newfile;\n\tint err, len, newfd;\n\tstruct sockaddr_storage address;\n\tif (flags &amp; ~(SOCK_CLOEXEC | SOCK_NONBLOCK))\n\t\treturn -EINVAL;\n\tif (SOCK_NONBLOCK != O_NONBLOCK &amp;&amp; (flags &amp; SOCK_NONBLOCK))\n\t\tflags = (flags &amp; ~SOCK_NONBLOCK) | O_NONBLOCK;\n\tsock = sock_from_file(file, &amp;err);\n\tif (!sock)\n\t\tgoto out;\n\terr = -ENFILE;\n    // 创建一个新套接字\n\tnewsock = sock_alloc();\n\tif (!newsock)\n\t\tgoto out;\n\tnewsock-&gt;type = sock-&gt;type;\n\tnewsock-&gt;ops = sock-&gt;ops;\n\t__module_get(newsock-&gt;ops-&gt;owner);\n\tnewfd = __get_unused_fd_flags(flags, nofile);\n\tif (unlikely(newfd &lt; 0)) {\n\t\terr = newfd;\n\t\tsock_release(newsock);\n\t\tgoto out;\n\t}\n\tnewfile = sock_alloc_file(newsock, flags, sock-&gt;sk-&gt;sk_prot_creator-&gt;name);\n\tif (IS_ERR(newfile)) {\n\t\terr = PTR_ERR(newfile);\n\t\tput_unused_fd(newfd);\n\t\tgoto out;\n\t}\n\terr = security_socket_accept(sock, newsock);\n\tif (err)\n\t\tgoto out_fd;\n    // 根据套接字类型调用不同的函数inet_accept\n\terr = sock-&gt;ops-&gt;accept(sock, newsock, sock-&gt;file-&gt;f_flags | file_flags,\n\t\t\t\t\tfalse);\n\tif (err &lt; 0)\n\t\tgoto out_fd;\n\tif (upeer_sockaddr) {\n\t\tlen = newsock-&gt;ops-&gt;getname(newsock,\n\t\t\t\t\t(struct sockaddr *)&amp;address, 2);\n\t\tif (len &lt; 0) {\n\t\t\terr = -ECONNABORTED;\n\t\t\tgoto out_fd;\n\t\t}\n        // 从内核复制到用户空间\n\t\terr = move_addr_to_user(&amp;address,\n\t\t\t\t\tlen, upeer_sockaddr, upeer_addrlen);\n\t\tif (err &lt; 0)\n\t\t\tgoto out_fd;\n\t}\n\t/* File flags are not inherited via accept() unlike another OSes. */\n\tfd_install(newfd, newfile);\n\terr = newfd;\nout:\n\treturn err;\nout_fd:\n\tfput(newfile);\n\tput_unused_fd(newfd);\n\tgoto out;\n}\n</code></pre><p>这个新的套接字描述符与最初创建套接字时，设置的套接字地址族与套接字类型、使用的协议一样。原来创建的套接字不与连接关联，它继续在原套接字上侦听，以便接收其他连接请求。</p><h3>发送数据</h3><p>套接字应用中最简单的传送函数是<strong>send</strong>，send函数的作用类似于write，但send函数允许应用程序指定标志，规定如何对待传送数据。调用send函数时，会触发内核的<strong>sys_send</strong>函数，把发送缓冲区的数据发送出去。</p><p><strong>sys_send</strong>函数具体调用流程如下。</p><p>1.应用程序的数据被复制到内核后，sys_send函数调用<strong>sock_sendmsg</strong>，依据协议族类型来执行发送操作。<br>\n2.如果是INET协议族套接字，sock_sendmsg将调用inet_sendmsg函数。<br>\n3.如果采用TCP协议，inet_sendmsg函数将调用tcp_sendmsg，并按照TCP协议规则来发送数据包。</p><p>send函数返回发送成功，并不意味着在连接的另一端的进程可以收到数据，这里只能保证发送send函数执行成功，发送给网络设备驱动程序的数据没有出错。</p><h3>接收数据</h3><p><strong>recv</strong>函数与文件读read函数类似，recv函数中可以指定标志来控制如何接收数据，调用recv函数时，应用程序会触发内核的sys_recv函数，把网络中的数据递交到应用程序。当然，read、recvfrom函数也会触发sys_recv函数。具体流程如下。</p><p>1.为把内核的网络数据转入应用程序的接收缓冲区，sys_recv函数依次调用<strong>sys_recvfrom、sock_recvfrom和__sock_recvmsg</strong>，并依据协议族类型来执行具体的接收操作。<br>\n2.如果是INET协议族套接字，__sock_recvmsg将调用sock_common_recvmsg函数。<br>\n3.如果采用TCP协议，sock_common_recvmsg函数将调用tcp_recvmsg，按照TCP协议规则来接收数据包</p><p>如果接收方想获取数据包发送端的标识符，应用程序可以调用<strong>sys_recvfrom</strong>函数来获取数据包发送方的源地址，下面是<strong>sys_recvfrom</strong>函数的实现。</p><pre><code>int __sys_recvfrom(int fd, void __user *ubuf, size_t size, unsigned int flags,\n\t\t   struct sockaddr __user *addr, int __user *addr_len)\n{\n\tstruct socket *sock;\n\tstruct iovec iov;\n\tstruct msghdr msg;\n\tstruct sockaddr_storage address;\n\tint err, err2;\n\tint fput_needed;\n\terr = import_single_range(READ, ubuf, size, &amp;iov, &amp;msg.msg_iter);\n\tif (unlikely(err))\n\t\treturn err;\n    // 通过套接字描述符\b找到struct socket\n\tsock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);\n\tif (!sock)\n\t\tgoto out;\n\tmsg.msg_control = NULL;\n\tmsg.msg_controllen = 0;\n\t/* Save some cycles and don't copy the address if not needed */\n\tmsg.msg_name = addr ? (struct sockaddr *)&amp;address : NULL;\n\t/* We assume all kernel code knows the size of sockaddr_storage */\n\tmsg.msg_namelen = 0;\n\tmsg.msg_iocb = NULL;\n\tmsg.msg_flags = 0;\n\tif (sock-&gt;file-&gt;f_flags &amp; O_NONBLOCK)\n\t\tflags |= MSG_DONTWAIT;\n    // sock_recvmsg为具体的接收函数\n\terr = sock_recvmsg(sock, &amp;msg, flags);\n\tif (err &gt;= 0 &amp;&amp; addr != NULL) {\n        // 从内核复制到用户空间\n\t\terr2 = move_addr_to_user(&amp;address,\n\t\t\t\t\t msg.msg_namelen, addr, addr_len);\n\t\tif (err2 &lt; 0)\n\t\t\terr = err2;\n\t}\n\tfput_light(sock-&gt;file, fput_needed);\nout:\n\treturn err;\n}\n</code></pre><h3>关闭连接</h3><p>最后，我们来看看如何关闭连接。当应用程序调用shutdown函数关闭连接时，内核会启动函数sys_shutdown，代码如下。</p><pre><code>int __sys_shutdown(int fd, int how)\n{\n\tint err, fput_needed;\n\tstruct socket *sock;\n\tsock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);/* 通过套接字，描述符找到对应的结构*/\n\tif (sock != NULL) {\n\t\terr = security_socket_shutdown(sock, how);\n\t\tif (!err)\n             /* 根据套接字协议族调用关闭函数*/\n\t\t\terr = sock-&gt;ops-&gt;shutdown(sock, how);\n    \t\tfput_light(sock-&gt;file, fput_needed);\n\t}\n\treturn err;\n}\n</code></pre><h2>重点回顾</h2><p>好，这节课的内容告一段落了，我来给你做个总结。这节课我们继续研究了套接字在Linux内核中的实现。</p><p>套接字是UNIX兼容系统的一大特色，Linux在此基础上实现了内核套接字与应用程序套接字接口，在用户地址空间与内核地址空间之间提供了一套标准接口，实现应用套接字库函数与内核功能之间的一一对应，简化了用户地址空间与内核地址空间交换数据的过程。</p><p>通过应用套接字API编写网络应用程序，我们可以利用Linux内核TCP/IP协议栈提供的网络通信服务，在网络上实现应用数据快速、有效的传送。除此之外，套接字编程还可以使我们获取网络、主机的各种管理、统计信息。</p><p>创建套接字应用程序一般要经过后面这6个步骤。</p><p>1.创建套接字。<br>\n2.将套接字与地址绑定，设置套接字选项。<br>\n3.建立套接字之间的连接。<br>\n4.监听套接字<br>\n5.接收、发送数据。<br>\n6.关闭、释放套接字。</p><h2>思考题</h2><p>我们了解的TCP三次握手，发生在socket的哪几个函数中呢？</p><p>欢迎你在留言区跟我交流，也推荐你把这节课转发给有需要的朋友。</p><p>我是LMOS，我们下节课见！</p>","neighbors":{"left":{"article_title":"39 | 瞧一瞧Linux：详解socket实现与网络编程接口","id":404724},"right":{"article_title":"41 | 服务接口：如何搭建沟通桥梁？","id":406633}},"comments":[{"had_liked":false,"id":307236,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":true,"comment_ctime":1628956907,"is_pvip":false,"replies":[{"id":"111304","content":"66666","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1629085765,"ip_address":"","comment_id":307236,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720556635996e+18","product_id":100078401,"comment_content":"四次挥手过程分析下【V5.8，正常流程】<br>5、客户端收到FIN包，子状态从TCP_FIN_WAIT2变为TCP_TIME_WAIT，返回ACK包<br>A、状态和子状态都为TCP_TIME_WAIT<br>【tcp_protocol.handler】tcp_v4_rcv-&gt;<br>-&gt;if (sk-&gt;sk_state == TCP_TIME_WAIT) goto do_time_wait;<br>-&gt;do_time_wait:<br>-&gt;tcp_timewait_state_process<br>-&gt;-&gt;if (tw-&gt;tw_substate == TCP_FIN_WAIT2)<br>-&gt;-&gt;tw-&gt;tw_substate = TCP_TIME_WAIT;<br>-&gt;-&gt;inet_twsk_reschedule，重新设置回调时间<br>-&gt;-&gt;return TCP_TW_ACK;<br><br>B、返回ACK<br>-&gt;case TCP_TW_ACK:<br>-&gt;tcp_v4_timewait_ack(sk, skb);<br><br>6、服务端收到ACK包，状态从TCP_LAST_ACK变为TCP_CLOSE<br>【tcp_protocol.handler】tcp_v4_rcv-&gt;tcp_v4_do_rcv-&gt;tcp_rcv_state_process<br>-&gt;case TCP_LAST_ACK:<br>-&gt;tcp_done<br>-&gt;-&gt;tcp_set_state(sk, TCP_CLOSE);<br><br>7、客户端超时回调<br>A、超时时间定义<br>#define TCP_TIMEWAIT_LEN (60*HZ)<br>#define TCP_FIN_TIMEOUT TCP_TIMEWAIT_LEN<br><br>B、超时后，回调tw_timer_handler-&gt;inet_twsk_kill，进行inet_timewait_sock清理工作<br><br>C、没有找到状态变从TCP_TIME_WAIT变为TCP_CLOSE的代码<br><br>D、只看没调，有问题的，欢迎小伙伴告诉一下","like_count":4,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525089,"discussion_content":"66666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629085765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307235,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":true,"comment_ctime":1628956876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"9.2233720470736998e+18","product_id":100078401,"comment_content":"四次挥手过程分析上【V5.8，正常流程】<br>1、客户端主动断开连接，状态从TCP_ESTABLISHED变为TCP_FIN_WAIT1，发送FIN包给服务端<br>A、状态变为TCP_FIN_WAIT1<br>tcp_close-&gt;tcp_close_state<br>-&gt;tcp_set_state(sk, new_state[TCP_ESTABLISHED])，也就是TCP_FIN_WAIT1<br><br>B、发送FIN包<br>tcp_close-&gt;tcp_close_state<br>-&gt;tcp_send_fin<br><br>2、服务端收到FIN包，状态从TCP_ESTABLISHED变为TCP_CLOSE_WAIT，并返回ACK包<br>A、状态变为TCP_CLOSE_WAIT<br>【tcp_protocol.handler】tcp_v4_rcv-&gt;tcp_v4_do_rcv-&gt;tcp_rcv_established<br>-&gt;tcp_data_queue<br>-&gt;-&gt;tcp_fin<br>-&gt;-&gt;-&gt;inet_csk_schedule_ack; 安排ack<br>-&gt;-&gt;-&gt;sk-&gt;sk_shutdown |= RCV_SHUTDOWN; 模拟了close<br>-&gt;-&gt;-&gt;sock_set_flag(sk, SOCK_DONE);<br>-&gt;-&gt;-&gt;case TCP_ESTABLISHED:<br>-&gt;-&gt;-&gt;tcp_set_state(sk, TCP_CLOSE_WAIT); 修改状态<br>-&gt;-&gt;inet_csk(sk)-&gt;icsk_ack.pending |= ICSK_ACK_NOW;  ACS是否立即发送<br><br>B、发送ACK包<br>【tcp_protocol.handler】tcp_v4_rcv-&gt;tcp_v4_do_rcv-&gt;tcp_rcv_established【接上面】<br>-&gt;tcp_ack_snd_check-&gt;__tcp_ack_snd_check-&gt;tcp_send_ack<br><br>3、客户端收到ACK包，状态从TCP_FIN_WAIT1变为TCP_FIN_WAIT2，然后被替换为状态TCP_TIME_WAIT，子状态TCP_FIN_WAIT2<br>【tcp_protocol.handler】tcp_v4_rcv-&gt;tcp_v4_do_rcv-&gt;tcp_rcv_state_process<br>-&gt;case TCP_FIN_WAIT1:<br>-&gt;tcp_set_state(sk, TCP_FIN_WAIT2);<br>-&gt;tcp_time_wait(sk, TCP_FIN_WAIT2, tmo);<br>-&gt;-&gt;tw = inet_twsk_alloc(sk, tcp_death_row, state);<br>-&gt;-&gt;-&gt;tw-&gt;tw_state = TCP_TIME_WAIT;   <br>-&gt;-&gt;-&gt;tw-&gt;tw_substate = TCP_FIN_WAIT2;<br>-&gt;-&gt;-&gt;timer_setup(&amp;tw-&gt;tw_timer, tw_timer_handler, TIMER_PINNED);<br><br>4、服务端状态从TCP_CLOSE_WAIT变为TCP_LAST_ACK，发送FIN包<br>A、状态变为TCP_LAST_ACK<br>tcp_close-&gt;tcp_close_state<br>-&gt;tcp_set_state(sk, new_state[TCP_CLOSE_WAIT])，也就是TCP_LAST_ACK<br><br>B、发送FIN包<br>tcp_close-&gt;tcp_close_state<br>-&gt;tcp_send_fin","like_count":2},{"had_liked":false,"id":307231,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":true,"comment_ctime":1628953722,"is_pvip":false,"replies":[{"id":"111259","content":"是的 总结到位","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1628996504,"ip_address":"","comment_id":307231,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720427786998e+18","product_id":100078401,"comment_content":"三次握手过程分析【V5.8，正常流程】<br>1、客户端发起第一次握手，状态调变为TCP_SYN_SENT，发送SYN包<br>connect-&gt;__sys_connect-&gt;__sys_connect_file-&gt;【sock-&gt;ops-&gt;connect】tcp_v4_connect<br>A、状态变化<br>-&gt;tcp_set_state(sk, TCP_SYN_SENT);<br>B、发送SYN<br>-&gt;tcp_connect-&gt;tcp_send_syn_data<br><br>2、服务端收到客户端的SYN包，初始化socket，状态从TCP_LISTEN变为TCP_NEW_SYN_RECV，发送第二次握手SYN_ACK包<br>A、收到连接，初始化socket<br>accept-&gt;__sys_accept4-&gt;__sys_accept4_file-&gt;【sock-&gt;ops-&gt;accept】inet_csk_accept<br><br>B、收到SYN，改变状态<br>【tcp_protocol.handler】tcp_v4_rcv-&gt;tcp_v4_do_rcv-&gt;tcp_rcv_state_process-&gt;<br>-&gt;case TCP_LISTEN:<br>-&gt;[sock-&gt;ops-&gt;conn_request]tcp_v4_conn_request-&gt;tcp_conn_request<br>-&gt;-&gt;inet_reqsk_alloc<br>-&gt;-&gt;-&gt;ireq-&gt;ireq_state = TCP_NEW_SYN_RECV;<br><br>C、发送SYN_ACK包<br>-&gt;[sock-&gt;ops-&gt;conn_request]tcp_v4_conn_request-&gt;tcp_conn_request【和B路径一样】<br>-&gt;-&gt;【af_ops-&gt;send_synack】tcp_v4_send_synack<br>-&gt;-&gt;-&gt;tcp_make_synack<br>-&gt;-&gt;-&gt;__tcp_v4_send_check<br><br>3、客户端收到SYN_ACK包，状态从TCP_SYN_SENT变为TCP_ESTABLISHED，并发送ACK包<br>A、收到SYN_ACK包<br>【tcp_protocol.handler】tcp_v4_rcv-&gt;tcp_v4_do_rcv-&gt;tcp_rcv_state_process<br>-&gt;case TCP_SYN_SENT:<br>-&gt;tcp_rcv_synsent_state_process-&gt;tcp_finish_connect<br>-&gt;-&gt;tcp_set_state(sk, TCP_ESTABLISHED);<br><br>B、发送ACK包<br>-&gt;tcp_rcv_synsent_state_process-&gt;tcp_send_ack-&gt;__tcp_send_ack<br><br>4、服务端收到ACK包，状态从TCP_NEW_SYN_RECV变为TCP_SYN_RECV【实际上是新建了一个sock】<br>【tcp_protocol.handler】tcp_v4_rcv-&gt;<br>-&gt;if (sk-&gt;sk_state == TCP_NEW_SYN_RECV)<br>-&gt;tcp_check_req<br>-&gt;-&gt;【inet_csk(sk)-&gt;icsk_af_ops-&gt;syn_recv_sock】tcp_v4_syn_recv_sock-&gt;tcp_create_openreq_child-&gt;inet_csk_clone_lock<br>-&gt;-&gt;-&gt;inet_sk_set_state(newsk, TCP_SYN_RECV);<br><br>5、服务端状态从TCP_SYN_RECV变为TCP_ESTABLISHED<br>【tcp_protocol.handler】tcp_v4_rcv-&gt;tcp_v4_do_rcv-&gt;tcp_rcv_state_process<br>-&gt;case TCP_SYN_RECV:<br>-&gt;tcp_set_state(sk, TCP_ESTABLISHED);<br><br>只看没调，有问题的欢迎各位小伙伴指出。","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525086,"discussion_content":"是的 总结到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628996504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306239,"user_name":"MacBao","can_delete":false,"product_type":"c1","uid":1738119,"ip_address":"","ucode":"8CF51C3688C8F6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/87/727142bc.jpg","comment_is_top":false,"comment_ctime":1628468319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5923435615","product_id":100078401,"comment_content":"服务器端处于listen状态，客户端connect发起TCP三次握手？","like_count":1},{"had_liked":false,"id":306236,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1628466348,"is_pvip":false,"replies":[{"id":"110827","content":"好的 期待","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1628476391,"ip_address":"","comment_id":306236,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5923433644","product_id":100078401,"comment_content":"今天的问题不好回答，因为文中无明显三次握手的代码，而且三次握手的机制其实比较复杂，涉及到几个状态和几个队列之间的切换，笼统的 connect 和 accept 函数是说不清楚的，感兴趣可以看看这里：<br>https:&#47;&#47;blog.csdn.net&#47;tennysonsky&#47;article&#47;details&#47;45621341<br><br>当然这些不能全信，所以还是得自己看linux内核代码，待我看了再来补充😂","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524678,"discussion_content":"好的 期待","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628476391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389193,"discussion_content":"静候佳音","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629169957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2619436,"avatar":"https://static001.geekbang.org/account/avatar/00/27/f8/2c/92969c48.jpg","nickname":"青玉白露","note":"","ucode":"96FE2D4D2B94A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387849,"discussion_content":"静候佳音\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628472479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341241,"user_name":"王子虾","can_delete":false,"product_type":"c1","uid":2667644,"ip_address":"","ucode":"22B1ABCF9FC671","user_header":"https://static001.geekbang.org/account/avatar/00/28/b4/7c/59e24b60.jpg","comment_is_top":false,"comment_ctime":1649469020,"is_pvip":false,"replies":[{"id":"125097","content":"会，但 linux可以修改 &#47;proc&#47;sys&#47;net&#47;core&#47;somaxconn","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1650263651,"ip_address":"","comment_id":341241,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649469020","product_id":100078401,"comment_content":"老师，有一个问题，tcp在调用listen的时候，有全连接队列的概念，一般上限是128。但是问题是，我们比如实现单机百万链接的时候，一个server端的源组（server_ip+port），比如有65535个client，那会不会受限于这个全连接队列？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564515,"discussion_content":"会，但 linux可以修改 /proc/sys/net/core/somaxconn","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650263652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335960,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1645790099,"is_pvip":false,"replies":[{"id":"123047","content":"good","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1646360520,"ip_address":"","comment_id":335960,"utype":1}],"discussion_count":1,"race_medal":4,"score":"1645790099","product_id":100078401,"comment_content":"nice","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554382,"discussion_content":"good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646360520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317925,"user_name":"GeekCoder","can_delete":false,"product_type":"c1","uid":1523315,"ip_address":"","ucode":"14BB73CBE28545","user_header":"","comment_is_top":false,"comment_ctime":1635059825,"is_pvip":false,"replies":[{"id":"115360","content":"本课程是os实现课程 不会讲到这个","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1635211361,"ip_address":"","comment_id":317925,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635059825","product_id":100078401,"comment_content":"能讲讲epoll吗？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529032,"discussion_content":"本课程是os实现课程 不会讲到这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635211361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306306,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1628490371,"is_pvip":false,"replies":[{"id":"110869","content":"谢谢 老铁","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1628494596,"ip_address":"","comment_id":306306,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628490371","product_id":100078401,"comment_content":"这里有一篇三次握手的源码图解：https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;vlrzGc5bFrPIr9a7HIr2eA","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524710,"discussion_content":"谢谢 老铁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628494596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}