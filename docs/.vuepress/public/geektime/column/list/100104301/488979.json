{"id":488979,"title":"15 | Nginx的499状态码是怎么回事？","content":"<p>你好，我是胜辉。</p><p>“实战一：TCP真实案例解密篇”刚刚结束。在过去的十几讲里，我们全面回顾了TCP的各种技术细节，从握手到挥手，从重传等容错机制，到传输速度等效率机制，应该说也是对我们的TCP知识做了一个全面的“体检”。如果你发现自己对TCP的掌握还有不少漏洞，也别着急，可以回头复习一下相应部分的内容，或者在留言区提问，我会给你解答。</p><p>从这节课开始，我们要进入网络排查的“实战二：应用层真实案例解密篇”了。今天要给你讲解的是一个关于Nginx的排查案例。</p><h2>Nginx的499状态码是怎么回事？</h2><p>你肯定听说过Nginx，或者经常用到它。作为一个高性能的HTTP和反向代理服务器，Nginx不管是用来搭建Web Server，还是用作负载均衡都很合适，并且它可供配置的日志字段也很丰富，从各类HTTP头部到内部的性能数据都有。</p><p>不过，你在日常维护Nginx时有没有遇到过这种情况：<strong>在Nginx的访问日志中，存在499状态码的日志。</strong>但是常见的4xx家族的状态码只有400、401、403、404等，这个499并未在HTTP的RFC文档中定义，是不是很奇怪？</p><p>这个499错误日志，在流量较大的场景下，特别是面向Internet的Web站点场景下还是很常见的 。但如果你遇到过，第一感觉可能会是一头雾水，不知道499这个状态码具体是用来干啥的，因为确实跟其他的400系列状态码太不同了。</p><!-- [[[read_end]]] --><p>我在公有云的时候，做过的一个案例正好是关于Nginx的499日志。当时一位客户向我反馈：他们的Nginx服务器会连续几天记录较多的499错误日志，之后几天可能趋零，然后再回升，整体状况起伏不定。</p><p>这个客户经营的是To C的电子产品，跟手机端App协同工作。这个App会定时把消息上传到微信消息网关，后者再把这些消息推送到该客户的服务端（在公有云上）做业务处理，整体的消息量约每日三十万条。那么，对消息网关来说，这个服务端就是一个Web回调接口。下面是架构简图：</p><p><img src=\"https://static001.geekbang.org/resource/image/93/46/93ea615940b140d18e2c3087e0545346.jpg?wh=1697x809\" alt=\"\"></p><p>他们给我提供了499日志趋势图：</p><p><img src=\"https://static001.geekbang.org/resource/image/4d/71/4d99d187880ecaa09e454526e8a9b371.png?wh=1405x368\" alt=\"图片\"></p><p>由于大量499日志的存在，客户非常担心业务已经受到影响，比如他们的终端消费者是否经常上传数据失败？是否已经严重影响了消费者的体验？所以，我们需要搞清楚499错误日志的含义。</p><p>那么，499这个状态码本身能帮到我们什么呢？我们可以查一下它在Nginx里的<a href=\"https://www.Nginx.com/resources/wiki/extending/api/http\">官方定义</a>：</p><blockquote>\n<p>NGX_HTTP_CLIENT_CLOSED_REQUEST     |    499</p>\n</blockquote><p>可是，什么叫client closed request（客户端关闭了请求）呢？好像说了跟没说也没太大区别。我们知道499是客户端关闭请求引起的，那又是什么原因，引起了“客户端关闭了请求”呢？关于这个问题，Nginx的文档并没有提及。</p><p>有一句话叫做“解决问题的办法，可能不在问题自身所处的这个层面”。<strong>应用层日志，其实记录的依然是表象。</strong>更深层次的原因，很可能在更底层，比如在传输层或者网络层。</p><p>所以，搞清楚499这个状态码是什么意思，对于我们来说，不仅是理解这个499码的底层含义，而且通过这种排查，我们还能掌握一套<strong>对HTTP返回码进行网络分析的方法</strong>。这种方法，对于维护好Nginx以及其他Web服务，都是很有帮助的。</p><p>那么接下来，我们就根据这个案例，一起探讨下如何用抓包分析，来拆解HTTP返回码的真正含义。</p><h2><strong>锚定到网络层</strong></h2><p>如前面所说，我是选择用<strong>抓包分析</strong>这个方法来展开排查的。之所以采用这个方法，是因为我前面也说过，从软件文档已经无法查清楚问题根因了，所以需要下沉到网络层排查。如果你在处理应用层故障，比如HTTP异常返回码（4xx和5xx系列）场景中，也遇到了在应用层找不到答案的情况，你就可以考虑采用抓包分析的方法。</p><blockquote>\n<p>补充：下文中的“客户端”都指微信消息网关，“服务端”指这个客户在公有云的服务器。</p>\n</blockquote><p>这样，我在<strong>服务端</strong>使用tcpdump工具做了抓包，然后用Wireshark打开抓包文件展开分析。从抓包文件中，我一般会寻找一些比较可疑的报文。正好，这次抓包里有不少RST报文，于是我过滤出了一个典型的带RST报文的TCP流，请看下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/63/8c/63546e3e94690a685f9291eyy837318c.jpg?wh=2418x446\" alt=\"\"></p><blockquote>\n<p>补充：抓包示例文件已经上传至<a href=\"https://gitee.com/steelvictor/network-analysis/tree/master/15\">Gitee</a>，建议用Wireshark打开文件，结合文稿一起学习。</p>\n</blockquote><p>相信你也一眼就看到了那个结尾处的RST。但问题是，<strong>这个TCP流一定跟499日志有关系吗？</strong></p><p>得益于TCP/IP的精妙的分层设计，应用层只需要通过系统调用，就可以像使用文件IO那样使用网络IO，具体的网络细节都由内核处理了。可是由此也带来了一个问题：<strong>以应用层的视角，是无法“看到”具体的网络报文的</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/ba/a5/ba258d0aa729da8dc7d35a746cec55a5.jpg?wh=1893x831\" alt=\"\"></p><p>我们需要根据一些关键信息来确定应用层日志跟网络报文的对应关系。比如在这里，我可以确认上面这个带有RST的TCP流，就是日志中记录的一条499日志记录。这是如何做到的呢？</p><p>就是因为以下三点。</p><ul>\n<li><strong>客户端IP</strong>：日志中的remote IP跟抓包文件里面的IP符合。</li>\n<li><strong>时间戳</strong>：日志的时间戳也跟这个TCP流的时间吻合。</li>\n<li><strong>应用层请求</strong>：日志里的HTTP URL路径和这个TCP流里的URL相同。</li>\n</ul><blockquote>\n<p>补充：如果你对<a href=\"https://time.geekbang.org/column/article/480068\">第4讲</a>有印象，应该记得当时也是用类似的方式找到了应用日志跟报文的对应关系。</p>\n</blockquote><p>实际上，在真实的抓包分析场景中，“如何把应用层问题跟网络层抓包关联起来”，始终是一个关键环节。同时，这也是比较令人困扰的关键技术障碍，很多人就是在这一关前败下阵来，导致没有办法真正彻底地查到根因。所以这里的方法可以作为给你的参考，当你以后再处理这种关键环节的时候，也可以根据上面提到的三个维度的信息，即IP、时间戳、应用层请求（包括URL和header），来达到“把应用层问题锚定到网络层数据包”的目的。</p><p>好，既然确定这个流就是代表了一次499事件，那么我们就需要好好分析一下这些报文里面的文章了。</p><h2>TCP流的解读</h2><p>这里，你可以先注意一下我在下图的这个TCP流示意图中，标记出的红框部分，在后续的分析过程中，我会重点分析这几个部分。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/93/e32e1ef5e9006c7ef650d7a60930d193.jpg?wh=2230x452\" alt=\"\"></p><p>首先是报文1~3，表示TCP握手成功。</p><p>然后是报文4（客户端发出），表示客户端（消息网关）向服务器发送报文，这个报文里只包含HTTP header，其声明该请求为POST方法，但不含POST body。这其实是正常的，因为HTTP协议就是这样规定的，数据的先后顺序是：先header（包含method、URL、headers），后body。所以，既然方法（method）和URL单独位于一个报文里面了，那么按顺序来说，body就是在后续的报文里面。</p><p>接下来是报文5（服务端发出），它是一个确认报文。它的意思是：我（服务端）确认收到了你（客户端）发过来的报文4。</p><p>紧接着是报文6（客户端发出），此时距离上一个报文的时间是2秒。这个报文被Wireshark标记为了红色，注释为TCP Previous segment not captured，意思是它之前的TCP报文段没有被抓到。</p><p>什么叫做“之前的TCP报文”呢？其实就是按TCP序列号顺序，排在当前报文之前的报文。我对这个6号报文标注了3处红框，它们都有很重要的含义。这里我们先关注下右边一个红框圈出来的FIN标志位，这说明，<strong>这是一个客户端主动关闭连接的报文。</strong></p><p>我们可以把到目前为止的报文情况，用下面这个示意图来表示：</p><p><img src=\"https://static001.geekbang.org/resource/image/54/85/54b3cf96a80e2ac2638840c226ea7285.jpg?wh=2000x1125\" alt=\"\"></p><p>你看这里是不是很奇怪？明明HTTP POST请求的body（也称为HTTP载荷）部分还没发过来，这个客户端就嚷嚷着要关闭连接了？这就好比有个朋友跟你说：“我有个事情要你帮忙，嗯，拜拜~”，你刚听到上半句他的求助意向，还没听到这个忙具体是什么，他就跟你说再见了。惊不惊喜，意不意外？你可能暂时看不出这里究竟出了什么问题，不过没关系，先放一放。</p><p>我们继续看报文7（服务端发出）。服务器收到了FIN+ACK报文（6号报文），但发现序列号并不是它期待的309，而是777，于是服务器TCP协议栈判断：有一个长度为777-309=468的TCP段（TCP segment）丢失了。</p><p>按TCP的约定，这时候服务端只可以确认其收到的字节的最后位置，在这里，就是上一次（报文5）的ACK位置。形式上，报文7就成了一个DupAck（重复确认）。</p><p>当客户端收到DupAck的时候，它就需要长一个心眼了：“情况有点微妙，如果凑满3个DupAck可能有丢包啊”。</p><blockquote>\n<p>补充：如果凑满3个DupAck就重传的机制，被称为快速重传机制，我们在<a href=\"https://time.geekbang.org/column/article/487082\">第12讲</a>我们有深入学习过。</p>\n</blockquote><p>为了帮助理解，这里我再展示下报文4的TCP信息：</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/83/b253c16c2b861402a215fec7d2598883.jpg?wh=1406x396\" alt=\"\"></p><p>那么，按TCP的设计，客户端将要发送的下一个报文的序列号（309）=&nbsp;本次序列号（1）&nbsp;+&nbsp;本次数据长度（308），也就是图中的Next sequence number。</p><p>我们再来看报文8（客户端发出），过了16秒之久，客户端<strong>重传</strong>了这个报文，包含POST body的数据，长度为 <strong>468</strong> 字节。你看，这是不是就跟前面说的777-309=468对应起来了。</p><p>可能你在这里又有点困惑了，明明这个468字节的报文是第一次出现，怎么就算重传了呢？</p><p>其实是因为，这个抓包文件是在服务端生成的，所以它的视角，是无法看到多次传送同样这个报文的现象的。但我判断，在客户端抓包的话，一定可以看到这个468字节的报文被试图传送了多次。</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/c9/1ed4b43aba2eb399a8137d0a6f9869c9.jpg?wh=1639x722\" alt=\"\"></p><p>我们就以服务端视角来判断，一开始这个报文应该是走丢了，没有达到服务端，所以没有在这个服务端抓包文件里现身。又因为过了16秒之久才到达，很可能不是单纯一次重传，而是多次重传后才最终到达的。因此从这一点上讲，确实属于重传。</p><p>我们继续分析。接下来就是报文9，服务端对这个POST body的数据包回复了确认报文。</p><p>最后是报文10，服务端发送了HTTP 400的响应报文给消息网关。这个信息并没有被Wireshark直接按HTTP格式进行展示，但是因为HTTP是文本编码的，所以我们可以鼠标选中Transmission Control Protcol部分，在底下的文本栏直接看到HTTP 400这段文本：</p><p><img src=\"https://static001.geekbang.org/resource/image/ae/2a/aeed98d07a4cbaeb97a202877e33cc2a.jpg?wh=1656x850\" alt=\"\"></p><p>有趣的是，这个 <strong>HTTP 400报文也是带FIN标志位的</strong>，也就是服务端操作系统“图省事”了，把应用层的应答数据（HTTP 400），跟操作系统对TCP连接关闭的控制报文（这个FIN），合并在同一个报文里面了。也就是我们在<a href=\"https://time.geekbang.org/column/article/479163\">第3讲</a>提到的搭顺风车（Piggybacking），提升了网络利用效率。</p><p>这个阶段的报文图示如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/37/e2/37c17a924795069688bed6b9d69838e2.jpg?wh=1523x739\" alt=\"\"></p><p>那么，从这些报文的顺序来看，我们会发现它确实是有问题的。特别是有以下几个疑点：</p><ul>\n<li>服务端先收到了HTTP header报文，随后并没有收到期望的HTTP body报文，而是收到了FIN报文，即客户端试图关闭连接。这个行为十分古怪，要知道HTTP请求还没发送到服务端，服务端回复HTTP响应更是无从谈起，这个时候客户端发送FIN就不符合常理了（即前面说的朋友求帮忙的类比）。</li>\n<li>服务端回复了HTTP 400，并且也发送FIN关闭了这个连接。</li>\n<li>客户端回复RST彻底关闭这个连接。</li>\n</ul><p>而把上面这几条信息综合起来看，你有没有发现一个重要的线索？<strong>客户端先发送了FIN，之后才发送POST body。</strong>现在让我们把全部过程拼接起来，看一下全景图：</p><p><img src=\"https://static001.geekbang.org/resource/image/a4/17/a45e1cf729d62b8e7a4ce6258e3fe817.jpg?wh=2000x1125\" alt=\"\"></p><p>这么古怪的行为，可以描述为“<strong>服务端还没回复数据而客户端已经要关闭连接</strong>”。按照499的官方定义，这种行为就被Nginx判定为了499状态。对内表现为记录499日志，对外表现为回复HTTP 400给消息网关。</p><p>所以，在服务端的Nginx日志中，就留下了大量的499日志条目；而在消息网关那头，如果它也做Web日志的话，相信就不是499日志，而是400的报错了。</p><p>那么到这里，问题是水落石出了吗？其实不是。</p><h2><strong>从现象到本质</strong></h2><p>我们还需要搞清楚最底层的疑问：为什么客户端先发送FIN，然后才发送POST body？</p><p>我们回到Wireshark窗口，再次关注下6号报文：</p><p><img src=\"https://static001.geekbang.org/resource/image/d2/01/d2ee60e008e21e9b971ac7894f915601.jpg?wh=1712x84\" alt=\"\"></p><p>它离上一个报文相差了2秒，而我们知道这个信息，是因为Wireshark很友好地显示了报文之间的间隔时长。</p><p>我们再往前看4号报文：</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/29/8f79f673e07621c9a8dyycyy151c1929.jpg?wh=1568x82\" alt=\"\"></p><p>离3号报文相差了2.997秒，几乎就是3秒整了。那么加起来，6号报文离TCP握手完成，正好隔了 <strong>5秒整</strong>。</p><p>一般出现这种整数，就越发可疑了，因为如果是系统或者网络的错乱导致的行为，其时间分布上应该是<strong>随机的</strong>，不可能卡在整数时间上。就我的经验来看，<strong>这往往跟某种人为的设置有关系</strong>。</p><p>所以，经过我的提醒，客户自己仔细查看了微信网关的使用文档，果然发现了它确实有5秒超时的设置。也就是说，如果一个HTTP事务（在这个例子里是HTTP POST事务）无法在5秒内完成，就关闭这个连接。</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/80/1d35834f2da80aa64da94b0edca08980.jpg?wh=1659x711\" alt=\"\"></p><p>这个“无法完成”，在这个抓包里面体现为：HTTP header报文发过去了，但HTTP body报文没有一起过去（网络原因导致）。而由于初始阶段报文少，<strong>无法凑齐3个DupAck</strong>，所以快速重传没有被启动，只好依赖超时重传（关于超时重传的知识在<a href=\"https://time.geekbang.org/column/article/487082\">第12讲</a>也有详细的介绍），而且这多次超时重传也失败了，服务端只好持续等待这个丢失的报文。5秒钟过后，客户端（微信消息网关）没有收到服务端的响应，就主动关闭了这次连接（可以下次再试，这次就不继续干等了）。</p><p>也就是说，这个场景里的Nginx 499错误日志的产生，主要是由于两个因素造成的：</p><ul>\n<li><strong>“消息网关—&gt;服务器”方向上的一个TCP包丢失（案例里是HTTP POST body报文），引起服务端空闲等待；</strong></li>\n<li><strong>消息网关有一个5秒超时的设置，即连接达到5秒时，消息网关就发送FIN关闭连接。</strong></li>\n</ul><p>所以到这里，想必你也明白了这里的逻辑链条，也就是：</p><ul>\n<li>要解决499报错的问题，就需要解决5秒超时的问题；</li>\n<li>要解决5秒超时的问题，就需要解决丢包问题；</li>\n<li>要解决丢包的问题，就需要改善网络链路质量。</li>\n</ul><p>最根本的解决方案，就是如何确保客户端到服务端的<strong>网络连接</strong>可靠稳定，使得类似的报文延迟的现象降到最低。只要不丢包不延迟，HTTP事务就能在5秒内完成，消息网关就不会启动5秒超时断开连接的机制。</p><p>这样，我们跟客户还有网关的工程师一起配合，确实发现网关到我们公有云的一条链路有问题。更换为另外一条链路后，丢包率大幅降低，问题得到了极大改善。虽然还是有极小比例的错误日志（大约万分之一），但是这对于客户来说，完全在可接受范围之内了。</p><p>另外，因为丢包的存在，客户端的FIN报文跟HTTP POST body报文一样，也可能会丢失。不过，无论这个FIN是否被服务端及时收到，这次HTTP事务本身也已经在客户端被记为失败了，也就是不改变这件事的结果。</p><p>你可能会问了：链路丢包这种问题应该挺明显的，为什么没有在第一时间发现呢？</p><p>这其实是多种因素导致的：</p><ul>\n<li>我们虽然对主要链路的整体状况有细致的监控，但这里的网关到客户的公有云服务属于“点到点”的链接，本身也属于客户自身的业务，公有云难以对这种情况做监控，理想情况是客户自己来实现监控。</li>\n<li>客户的消息量很大，哪怕整体失败比例不高，但乘以绝对的消息量，产生的错误的绝对数也就比较可观了。</li>\n</ul><p>至于Nginx为什么要“创造”499这个独有的状态码的原因，其实在 <a href=\"https://github.com/Nginx/Nginx/blob/a6cb8210905f35977276cb3861184e4dad99cc2a/src/http/ngx_http_request.h\">Nginx源码</a>的注释部分里，已经写得非常清楚了。它并非标新立异，而确实是为了弥补标准HTTP协议的不足。相关代码如下：</p><pre><code>/*\n * HTTP does not define the code for the case when a client closed\n * the connection while we are processing its request so we introduce\n * own code to log such situation when a client has closed the connection\n * before we even try to send the HTTP header to it\n */\n#define NGX_HTTP_CLIENT_CLOSED_REQUEST     499\n</code></pre><p>翻译过来就是：HTTP并没有对服务端还在处理请求的时候客户端就关闭连接的情况，做一个状态码的定义。所以我们定义了自己的状态码（499），以记录这种“还没来得及发送返回，客户端就关闭了连接”的情形。</p><h2>小结</h2><p>现在，我们就清楚在这个例子里，造成499状态码的根因了。不过基于普适性的应用需求，我想把这个案例再延伸拓展一下，希望可以帮助你了解到更多的知识，并且在理解了这些知识点之后，你能够有效应用在类似的HTTP异常码的故障排查里。</p><p>首先，我们要知道，<strong>Nginx 499是Nginx自身定义的状态码，并非任何RFC中定义的HTTP状态码</strong>。它表示的是“Nginx收到完整的HTTP request前（或者已经接收到完整的request但还没来得及发送HTTP response前），客户端试图关闭TCP连接”这种反常情况。</p><p>第二，<strong>超时时间跟499报错数量也有直接关系</strong>。如果我们有办法延长消息网关的超时时间，比如从5秒改为50秒，那么客户端就有比较充足的时间去等待丢失的报文被成功重传，从而在50秒内完成HTTP事务，499日志也会少很多。</p><p>第三，<strong>我们要关注网络延迟对通信的影响</strong>。比如客户端发出的两个报文（报文3和报文4）间隔了3秒钟，这在网络通信中是个非常大的延迟。而造成这么大延迟的原因，会有两种可能：一是消息网关端本身是在握手后隔了3秒才发送了这个报文，属于<strong>应用层问题</strong>；二是消息网关在握手后立刻发送了这个报文，但在公网上丢失了，微信消息网关就根据“超时重传”的机制重新发了这个报文，并于3秒后到达。这属于<strong>网络链路问题</strong>。</p><p>由于上面的抓包是在服务端做的，所以未到达服务器的包自然也不可能抓到，也就是无法确定是具体哪一种原因（客户端应用层问题或网络链路问题）导致，但这并不影响结论。</p><p>最后一点，就是我们要清楚，<strong>公网上丢包现象不可能完全消失</strong>。千分之一左右的公网丢包率属于正常范围。由于客户发送量比较大（这是主要原因），加上微信消息网关设置的5秒超时相对比较短（这是次要原因），这两个因素一结合，问题就会在这个案例中被集中暴露出来。</p><p>那么，像上面第二点说的那样，设置更长的超时阈值（比如50秒）能解决问题吗？相信出错率会降低不少，但是这样新的问题也来了：</p><ul>\n<li>消息网关会有更多的资源消耗（内存、TCP源端口、计算能力等）；</li>\n<li>消息网关处理事务的平均耗时会增加。</li>\n</ul><p>所以，选择5秒应该是一个做过权衡后的适中的方案。</p><p>而从排查的方法论上来说，对于更广泛的应用层报错日志的排查，我的推荐是这样的：</p><ul>\n<li><strong>首先查看应用文档，初步确定问题性质，大体确定排查方向。</strong></li>\n<li><strong>通过对比应用日志和抓取的报文，在传输层和网络层寻找可疑报文。</strong>在这一步，可以采用以下的比对策略来找到可疑报文：\n<ul>\n<li>日志中的IP跟报文中的IP对应；</li>\n<li>日志和报文的时间戳对应；</li>\n<li>应用层请求信息和报文信息对应。</li>\n</ul>\n</li>\n<li><strong>结合协议规范和报文现象，推导出根因。</strong></li>\n</ul><h2><strong>思考题</strong></h2><p>给你留两个思考题，欢迎在留言区分享你的答案和思考，我们一起交流讨论。</p><ul>\n<li>第7个报文是DupAck，为什么没有触发快速重传呢？</li>\n<li>消息网关那头的应用日志应该不是499，那会是什么样的日志呢？</li>\n</ul><p>欢迎你把今天的内容分享给更多的朋友，我们一起成长。</p>","neighbors":{"left":{"article_title":"春节特别放送（四）| 测一测你的网络排查能力","id":484454},"right":{"article_title":"答疑（三）| 第11~15讲思考题答案","id":495852}},"comments":[{"had_liked":false,"id":336330,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1646100771,"is_pvip":false,"replies":[{"id":"123002","content":"谢谢你的支持，其实排查就是这样，很有趣，满足了像我这样的人的探索的欲望，从中也学习到新的知识，是一种很不错的“学习方法”~","user_name":"作者回复","comment_id":336330,"uid":"1662117","ip_address":"","utype":1,"ctime":1646228784,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"40300806435","product_id":100104301,"comment_content":"看老师的解密就像福尔摩斯在探案  精彩（改善客户端到服务端的网络质量）","like_count":9,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554148,"discussion_content":"谢谢你的支持，其实排查就是这样，很有趣，满足了像我这样的人的探索的欲望，从中也学习到新的知识，是一种很不错的“学习方法”~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646228784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338967,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1647840932,"is_pvip":false,"replies":[{"id":"124050","content":"是的，Packet size limited during capture: HTTP truncated的原因就是你说的这个~<br>HTTP是先发header后发body（如果有body的话）。header和body是否在不同的TCP分段中（严格来说不是“分片”）取决于应用程序往发送缓冲区里写入的速度。理论上说，TCP不认识HTTP，也不知道哪些数据是header哪些是body，所以header没凑满一个MSS就先发出去也是可能的。","user_name":"作者回复","comment_id":338967,"uid":"1662117","ip_address":"","utype":1,"ctime":1648043759,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"14532742820","product_id":100104301,"comment_content":"文中的抓包文件显示 POST请求，Packet size limited during capture: HTTP truncated。这个原因是IP包头里Length是348，而实际的包体小于这个值，所有wireshark才有此显示吧？<br><br>另外，HTTP 协议就是这样规定的，数据的先后顺序是：先 header（包含 method、URL、headers），后 body。而我测试了下抓包POST请求，在body不大的情况下，body和header在一个数据包里；而body过大的话，产生分片，此时第一个数据包包含了header以及部分body。请问老师，在POST请求里，存在第一个数据包只包含header，而第二个数据包含有body的情况么？","like_count":3,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558015,"discussion_content":"是的，Packet size limited during capture: HTTP truncated的原因就是你说的这个~\nHTTP是先发header后发body（如果有body的话）。header和body是否在不同的TCP分段中（严格来说不是“分片”）取决于应用程序往发送缓冲区里写入的速度。理论上说，TCP不认识HTTP，也不知道哪些数据是header哪些是body，所以header没凑满一个MSS就先发出去也是可能的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648043759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337777,"user_name":"简","can_delete":false,"product_type":"c1","uid":1132597,"ip_address":"","ucode":"52169AA28EB74C","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/35/2fe03602.jpg","comment_is_top":false,"comment_ctime":1647058186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14531960074","product_id":100104301,"comment_content":"3、后端服务异常导致<br><br>这个是情况最复杂多样也是最难排查定位的，因为这种情况并单纯是 499 往往还伴有随之而来来的 502&#47;503&#47;504 情况。<br><br>一般来说：前端请求超时设置 &gt; LB请求后端超时设置 &gt; 后端服务超时设置，但是大部分应该都不会令 “前端请求超时设置 &gt; LB请求后端超时设置”，因为前端请求超时设置是根据用户不同业务场景设置不同超时时间的，而 LB请求后端的超时时间 是针对所有转发请求的。<br><br>若后端服务中的某一环出现硬盘&#47;CPU&#47;内存等资源不足，在高流量情况下会产生流量堆积，从而呈现出：后端先出现大量的 504，LB 机器间歇的出现大量504和499，最后出现大量的 502&#47;503 的情况。（这种情况是否应该：先重启一下服务重置一下资源的占用情况，保证后续的服务能正常响应，缩短影响时间？？）<br><br>1). 人为因素：查看网络出入口带宽情况，看看在最近的时间内站点是否有大量的流量涌入导致了流量堆积，从而导致机器负载飙升。<br>①. 恶意攻击：有日志平台可以快速看一下是否是同一个IP或UA，针对IP&#47;UA迅速屏蔽掉对应的请求。<br>②. 正常流量：新接入了流量渠道导致流量一下子增加。有没有限流措施可以实施？能否快速横向扩增机器来抗住流量的涌入？如果都不行，先暂时下掉流量渠道<br><br>2). 非人为因素：自底向上排查到底是服务哪一环出现问题？<br>数据库--&gt;缓存--&gt;业务机器，因为下层问题都会导致上层受影响，如果一开始就从上层排查，情况会特别棘手。<br>①. 数据库机器负载：查看是否有频繁的IO写入操作？查看是否索引问题导致大量慢日志？是否因为缓存雪崩&#47;缓存穿透&#47;缓存击穿，导致缓存失效从而流量查询直接到了数据库？<br>②. 缓存机器负载：IO&#47;内存情况-看key的使用效率和IO操作？big key问题导致内存不足？往往是缓存的数据结构设计不正确导致<br>③. 业务机器负载：是否有代码逻辑不合理，导致业务机器有大量的IO处理、内存溢出...等情况？<br><br>非人为因素，没有固定的解决办法，往往需要在各个环节都做出调整，譬如：数据库添加合适的索引、针对热点查询增加正确的缓存结构、业务代码进行调整（如：避免在循环中查询数据&#47;缓存）","like_count":3},{"had_liked":false,"id":335537,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1645579509,"is_pvip":false,"replies":[{"id":"122814","content":"关于第一个问题：这确实是一个有点迷惑人的地方，因为没有客户端的代码（特别是5秒超时的时候tcp连接是如何关闭的，用了close还是shutdown，是否有Linger设置等等），我们只能间接的推测，可能是下面这样：<br>因为http请求数据量不大，可以在初始拥塞窗口里就能一次发送完，所以客户端把HTTP POST的所有报文都一次性发送了出去，但是因为网络问题，没有收到服务端的全部确认，所以有一部分数据滞留在发送缓冲区，并最终由于超时重传和重试机制得以发出（报文8的http body）；<br>到5秒时，应用程序启动了关闭socket的操作，一个FIN报文也进入了发送缓冲区，不过这个报文“运气好”，立刻被成功收到了。<br>结合上面的情况，就出现了http body反而在FIN后到达的情况。<br><br>第二个问题：报文10的seq是正确的，因为服务端还没有http响应，也就是没有真实的数据发送，所以seq还停留在1，这是对的。收到RST的原因，应该还是客户端那头的tcp连接已经被销毁，因为离客户端发起第一个FIN已经过去16秒。虽然16秒还是小于一般TIME_WAIT需要等待的时间（一般是60秒），但是考虑到客户端作为网关，要处理大量的连接，所以可能对TIME_WAIT做了优化（比如控制TW bucket的长度等）。16秒后，客户端认为这个报文已不属于任何连接，所以直接回复RST。而且这个RST没有ack号，这也符合“因为没有连接而回复”的RST的特征。","user_name":"作者回复","comment_id":335537,"uid":"1662117","ip_address":"","utype":1,"ctime":1645885566,"user_name_real":"作者"}],"discussion_count":2,"race_medal":0,"score":"10235514101","product_id":100104301,"comment_content":"请问老师客户端在报文6发送了fin，而服务器在报文8收到http body，这个报文8是由于客户端内核超时重传报文导致的吧？<br>客户端对于服务器报文10的fin，回复rst，是不是因为报文10的seq number不合法导致的呢？","like_count":2,"discussions":[{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557262,"discussion_content":"客户端认为这个报文已不属于任何连接，所以直接回复RST。而且这个RST没有ack号，这也符合“因为没有连接而回复”的RST的特征。—-仔细阅读抓包文件哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647744628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553434,"discussion_content":"关于第一个问题：这确实是一个有点迷惑人的地方，因为没有客户端的代码（特别是5秒超时的时候tcp连接是如何关闭的，用了close还是shutdown，是否有Linger设置等等），我们只能间接的推测，可能是下面这样：\n因为http请求数据量不大，可以在初始拥塞窗口里就能一次发送完，所以客户端把HTTP POST的所有报文都一次性发送了出去，但是因为网络问题，没有收到服务端的全部确认，所以有一部分数据滞留在发送缓冲区，并最终由于超时重传和重试机制得以发出（报文8的http body）；\n到5秒时，应用程序启动了关闭socket的操作，一个FIN报文也进入了发送缓冲区，不过这个报文“运气好”，立刻被成功收到了。\n结合上面的情况，就出现了http body反而在FIN后到达的情况。\n\n第二个问题：报文10的seq是正确的，因为服务端还没有http响应，也就是没有真实的数据发送，所以seq还停留在1，这是对的。收到RST的原因，应该还是客户端那头的tcp连接已经被销毁，因为离客户端发起第一个FIN已经过去16秒。虽然16秒还是小于一般TIME_WAIT需要等待的时间（一般是60秒），但是考虑到客户端作为网关，要处理大量的连接，所以可能对TIME_WAIT做了优化（比如控制TW bucket的长度等）。16秒后，客户端认为这个报文已不属于任何连接，所以直接回复RST。而且这个RST没有ack号，这也符合“因为没有连接而回复”的RST的特征。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645885566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354420,"user_name":"上杉夏香","can_delete":false,"product_type":"c1","uid":1521568,"ip_address":"上海","ucode":"9FDDE0979BCC8C","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/a0/032d0828.jpg","comment_is_top":false,"comment_ctime":1660378148,"is_pvip":true,"replies":[{"id":"129384","content":"你的思考很深入，给你点赞！<br>1. 这个报文8如你所说，应该是公网上漫游延迟后到达的，这也是TCP状态机设计的时候，考虑TIME_WAIT需要等待2MSL时间的原因，因为难保有一些报文会延迟到达，这种延迟在这里已经达到了十多秒。<br>2. 如果要确认这个判断逻辑，只能看一下wireshark源码了。我推测是因为FIN都已经到达了，那么序列号在FIN之前的报文已经都到达了（哪怕wiresahrk没有看到这个报文）。在FIN之后到达的报文，就被wireshark认为是重传。","user_name":"作者回复","comment_id":354420,"uid":"1662117","ip_address":"上海","utype":1,"ctime":1661496839,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"5955345444","product_id":100104301,"comment_content":"有两个问题，想要询问老师。<br>1、client在包6已经发送FIN，为啥包8还能发送数据呢？FIN不就是意味着发送端不再拥有发送能力了吗？我能想到的答案就是，这个包8是client在发送包6之前就发送的，只不过经过漫长的路由，才到达server端。<br><br>2、关于包8被server端标记为『重传』的标志。因为包是在server端抓取的，就算client确实在不断的重发，对于server来说，它不知道。可是它依然标记为『重传』。那么我觉得它一定有做出如此判断的依据，我能想到的答案是：1、时间；2、包6的seq超过包8.但是最终wireshark为何如此做出判断，那就得看它的源代码了？","like_count":1,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585351,"discussion_content":"你的思考很深入，给你点赞！\n1. 这个报文8如你所说，应该是公网上漫游延迟后到达的，这也是TCP状态机设计的时候，考虑TIME_WAIT需要等待2MSL时间的原因，因为难保有一些报文会延迟到达，这种延迟在这里已经达到了十多秒。\n2. 如果要确认这个判断逻辑，只能看一下wireshark源码了。我推测是因为FIN都已经到达了，那么序列号在FIN之前的报文已经都到达了（哪怕wiresahrk没有看到这个报文）。在FIN之后到达的报文，就被wireshark认为是重传。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661496840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521568,"avatar":"https://static001.geekbang.org/account/avatar/00/17/37/a0/032d0828.jpg","nickname":"上杉夏香","note":"","ucode":"9FDDE0979BCC8C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585414,"discussion_content":"先说第一个问题，当时可能陷入思路误区了，其实完全可以查看包6、8的详情嘛~得知包6的seq：777，包8的seq：309。就是我猜测的那样，也是老师的答案。\n\n另外，我想郑重的感谢老师，是老师你让我动手实践，让我通过wireshark学到了更多的网络知识。\n\n也让我有勇气看&lt;TCP/IP Illustrated, Volume I&gt; 2th 英文版，目前坚持看了100多页，且津津有味。\n\n但是我不是单纯来煽情的咯，老师的这句『这也是TCP状态机设计的时候，考虑TIME_WAIT需要等待2MSL时间的原因』让我想起来这本书讲到的有关TWA这个概念。\n\n这个TWA讲的是，如果进入TIME_WAIT后，对端发来包segment，该如何应对？\n\n原书第630页，13.6.4章节。\nTWA：TIME-WAIT Assassination.\n&gt; During this period(time-wait), the waiting TCP usually has little to do;it merely holds the state until the 2MSL timer expires .\n\n确实主动挥手的那一方，进入time-wait之后，等着完事就行，最重要的不是在这个阶段干什么，而是什么都不应该干。比如接受到对端发来的segment，不论是包含有效数据的，还是rst标志，主动挥手这一段，应该忽略，直到2MSL后关闭连接。\n\n&gt; Most systems avoid this problem by simply not reacting to reset segments while in the TIME_WAIT state.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661518008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342790,"user_name":"salt","can_delete":false,"product_type":"c1","uid":1056332,"ip_address":"","ucode":"A7D8D09E12353B","user_header":"https://static001.geekbang.org/account/avatar/00/10/1e/4c/d6416f57.jpg","comment_is_top":false,"comment_ctime":1650464092,"is_pvip":false,"replies":[{"id":"125284","content":"这个dupAck是因为客户端发的5号和6号报文之间，数据有间隔，所以服务端回复的ack只能“停留”在数据中断处。如果客户端收到这样的三个dupAck就会启动快速重传。当然这里并没有条件做快速重传了，因为没有凑满三个dupAck。如果还有疑问，可以继续回复我～","user_name":"作者回复","comment_id":342790,"uid":"1662117","ip_address":"","utype":1,"ctime":1650559551,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5945431388","product_id":100104301,"comment_content":"6号报文带了Fin 。7号报文回的不是Fin +ack 而是dup ack。这是因为dup ack的优先级更高？ 这样设计的原因是什么？","like_count":1,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565958,"discussion_content":"这个dupAck是因为客户端发的5号和6号报文之间，数据有间隔，所以服务端回复的ack只能“停留”在数据中断处。如果客户端收到这样的三个dupAck就会启动快速重传。当然这里并没有条件做快速重传了，因为没有凑满三个dupAck。如果还有疑问，可以继续回复我～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650559551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337775,"user_name":"简","can_delete":false,"product_type":"c1","uid":1132597,"ip_address":"","ucode":"52169AA28EB74C","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/35/2fe03602.jpg","comment_is_top":false,"comment_ctime":1647058169,"is_pvip":false,"replies":[{"id":"123815","content":"你的总结是对的：）确实是我们和客户都对这个微信网关的超时逻辑不熟悉导致的，不过这也给我们带去了经验的积累，以后遇到这类问题，会先查一下几个环节的超时设置，因为有可能就是它们没对齐导致了问题~","user_name":"作者回复","comment_id":337775,"uid":"1662117","ip_address":"","utype":1,"ctime":1647710855,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5942025465","product_id":100104301,"comment_content":"499的排查思路总结（麻烦老师帮忙看看是否正确）：<br><br>1、前&#47;后端设置超时不对导致。<br><br>譬如后端某接口后端需要3秒，而前端设置的请求超时时间小于3秒，那么会导致大量请求被客户端主动关闭，从而引发大量 NGINX 499。一般根据业务重设前端的请求超时时间即可，这种情况下：单独窗口访问接口、LB机器、后端机器、数据库机器等...负载、慢日志可能都是显示都正常的。<br>该情况一般多见于新对接功能对整体超时时间不熟悉的情况下，感觉倒是不太常见。","like_count":1,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557242,"discussion_content":"你的总结是对的：）确实是我们和客户都对这个微信网关的超时逻辑不熟悉导致的，不过这也给我们带去了经验的积累，以后遇到这类问题，会先查一下几个环节的超时设置，因为有可能就是它们没对齐导致了问题~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647710855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361302,"user_name":"阿强","can_delete":false,"product_type":"c1","uid":1323248,"ip_address":"广东","ucode":"8DF0C3586AE854","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJFo2Ro3AztpqqBUWZASkNbWic7YwKqsFTcXwrcekAl9z5XKiagg5TicHDeHNlavUjTg5FNgojg4H8g/132","comment_is_top":false,"comment_ctime":1667397050,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1667397050","product_id":100104301,"comment_content":"10号报文21s从服务端发出，也就是在消息网关发出fin后的16s后再发出，此时消息网关的应用层代码来看，tcp连接应该已经断开了，服务端返回的http状态码400等信息，消息网关的应用层应该是收不到吧，所以消息网关那头的应用日志，只能知道是http超时然后自己规定一个状态码，并不会获取到服务端的400状态码吧？","like_count":0},{"had_liked":false,"id":339989,"user_name":"Jack","can_delete":false,"product_type":"c1","uid":1636589,"ip_address":"","ucode":"0BD09106DEB33D","user_header":"https://static001.geekbang.org/account/avatar/00/18/f8/ed/9fd5ed8f.jpg","comment_is_top":false,"comment_ctime":1648526179,"is_pvip":true,"replies":[{"id":"124330","content":"你抓取的是什么应用的报文呢？如果是没有加密的http，应该能看到明文；如果是TLS，那确实是密文，也就是你说的乱码了：）","user_name":"作者回复","comment_id":339989,"uid":"1662117","ip_address":"","utype":1,"ctime":1648553157,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1648526179","product_id":100104301,"comment_content":"请教一下老师，wireshark抓到报文之后Follow Tcp Stream显示的都是乱码，这个怎么解决呢","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558998,"discussion_content":"你抓取的是什么应用的报文呢？如果是没有加密的http，应该能看到明文；如果是TLS，那确实是密文，也就是你说的乱码了：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648553157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1636589,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f8/ed/9fd5ed8f.jpg","nickname":"Jack","note":"","ucode":"0BD09106DEB33D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559117,"discussion_content":"老师你好，场景是这样的：我使用repo命令下载代码，报了407，我想抓个包分析一下，报文是SSH的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648615153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339976,"user_name":"Jack","can_delete":false,"product_type":"c1","uid":1636589,"ip_address":"","ucode":"0BD09106DEB33D","user_header":"https://static001.geekbang.org/account/avatar/00/18/f8/ed/9fd5ed8f.jpg","comment_is_top":false,"comment_ctime":1648520336,"is_pvip":true,"replies":[{"id":"124496","content":"你好，可以参考这里的解答：https:&#47;&#47;osqa-ask.wireshark.org&#47;questions&#47;39864&#47;the-temporary-file-to-which-the-capture-would-be-saved-could-not-be-opened-invalid-argument&#47;<br><br>简单来说是两步：1. 创建一个目录 2. 把TEMP环境变量的值设置为这个目录的绝对路径<br>你可以试试~","user_name":"作者回复","comment_id":339976,"uid":"1662117","ip_address":"","utype":1,"ctime":1648827550,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1648520336","product_id":100104301,"comment_content":"root用户登录机器使用wireshark抓包时报这个错误The temporary file to which the capture would be saved (&quot;&#47;tmpy&#47;<br>wireshark_eth0_20220328155843_EYvwXW.pcapng&quot;) could not be<br>opened: Permission denied.  这个怎么解决呢","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559599,"discussion_content":"你好，可以参考这里的解答：https://osqa-ask.wireshark.org/questions/39864/the-temporary-file-to-which-the-capture-would-be-saved-could-not-be-opened-invalid-argument/\n\n简单来说是两步：1. 创建一个目录 2. 把TEMP环境变量的值设置为这个目录的绝对路径\n你可以试试~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648827550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337778,"user_name":"简","can_delete":false,"product_type":"c1","uid":1132597,"ip_address":"","ucode":"52169AA28EB74C","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/35/2fe03602.jpg","comment_is_top":false,"comment_ctime":1647058321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647058321","product_id":100104301,"comment_content":"对于上述还有：还有可能是TCP的连接句柄不足等情况导致，这个之前遇到过，时间太久已经忘记当时的关注结果~期待老师能补充一下。（由于评论有字数限制...所以分了几种情况写）","like_count":0},{"had_liked":false,"id":337776,"user_name":"简","can_delete":false,"product_type":"c1","uid":1132597,"ip_address":"","ucode":"52169AA28EB74C","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/35/2fe03602.jpg","comment_is_top":false,"comment_ctime":1647058177,"is_pvip":false,"replies":[{"id":"123816","content":"是的，你说的场景是这样：<br>客户端-&gt;LB-&gt;nginx<br>那么如果客户端跟LB网络稳定，而LB跟nginx网络不稳定的话，很可能客户端发送请求是及时完成的，但是LB转发给nginx的过程会比较长，导致客户端超时后发送FIN，会间接导致nginx 499~","user_name":"作者回复","comment_id":337776,"uid":"1662117","ip_address":"","utype":1,"ctime":1647711124,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1647058177","product_id":100104301,"comment_content":"2、LB 机器问题导致<br>在 LB 机器上手动的请求一下要访问的接口，LB代理异常或网络抖动也会导致LB通过内网请求后端服务时超时，从而引发客户端主动关闭请求，导致 LB Nginx 大量的 499。<br>这个场景，多数由于网络抖动或运维人员进行网络调整之后导致。","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557243,"discussion_content":"是的，你说的场景是这样：\n客户端-&gt;LB-&gt;nginx\n那么如果客户端跟LB网络稳定，而LB跟nginx网络不稳定的话，很可能客户端发送请求是及时完成的，但是LB转发给nginx的过程会比较长，导致客户端超时后发送FIN，会间接导致nginx 499~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647711124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1132597,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/35/2fe03602.jpg","nickname":"简","note":"","ucode":"52169AA28EB74C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":557252,"discussion_content":"感谢老师的解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647738398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":557243,"ip_address":""},"score":557252,"extra":""}]}]},{"had_liked":false,"id":336809,"user_name":"小白","can_delete":false,"product_type":"c1","uid":1227630,"ip_address":"","ucode":"310FA28117D765","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKmXoYDRv98a9GEoJccTovtWH928eN9N6ZN0fibiamEVbpGwpAzuRmhEbI2sUZa6Hur7utDYMXYrIHw/132","comment_is_top":false,"comment_ctime":1646379705,"is_pvip":false,"replies":[{"id":"123079","content":"您好，可以参考抓包示例文件，我在文中有给出链接：https:&#47;&#47;gitee.com&#47;steelvictor&#47;network-analysis&#47;tree&#47;master&#47;15<br>在这个抓包文件第4个报文，就是客户端发送的HTTP POST请求头部，而body是在第8个报文。你下载抓包文件对比看看呢~有问题可以这里继续回复的。","user_name":"作者回复","comment_id":336809,"uid":"1662117","ip_address":"","utype":1,"ctime":1646403551,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1646379705","product_id":100104301,"comment_content":"如何判断，post请求是否发送了body。我记得之前的列子中MTU那节。我也没看到那个post请求的body已发送呀。","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554485,"discussion_content":"您好，可以参考抓包示例文件，我在文中有给出链接：https://gitee.com/steelvictor/network-analysis/tree/master/15\n在这个抓包文件第4个报文，就是客户端发送的HTTP POST请求头部，而body是在第8个报文。你下载抓包文件对比看看呢~有问题可以这里继续回复的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646403551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335575,"user_name":"bingo","can_delete":false,"product_type":"c1","uid":1285391,"ip_address":"","ucode":"2769EAADD3B5BB","user_header":"https://static001.geekbang.org/account/avatar/00/13/9d/0f/eb8f8422.jpg","comment_is_top":false,"comment_ctime":1645594045,"is_pvip":false,"replies":[{"id":"122702","content":"我看看示意图如何优化一下，把时间线展示的更加清楚些~<br>就顺序来说，示意图里对每个报文表上了数字序号，跟抓包文件里的序号是一致的~","user_name":"作者回复","comment_id":335575,"uid":"1662117","ip_address":"","utype":1,"ctime":1645712202,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645594045","product_id":100104301,"comment_content":"报文的时间有点乱，看得有点懵逼","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553087,"discussion_content":"我看看示意图如何优化一下，把时间线展示的更加清楚些~\n就顺序来说，示意图里对每个报文表上了数字序号，跟抓包文件里的序号是一致的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645712202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335547,"user_name":"taochao_zs","can_delete":false,"product_type":"c1","uid":1827961,"ip_address":"","ucode":"77382AB0B3CC0E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/e4/79/0f0114ba.jpg","comment_is_top":false,"comment_ctime":1645582696,"is_pvip":true,"replies":[{"id":"122653","content":"嗯 第一个问题回答正确，因为没有凑满3次DupAck，所以不会触发快速重传。<br>第二个问题，有两种可能性，一种就是你说的timeout，一种可能直接是原始的HTTP 400。具体记录了哪一种，要看客户端（消息网关）写日志的逻辑了：）","user_name":"作者回复","comment_id":335547,"uid":"1662117","ip_address":"","utype":1,"ctime":1645637268,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645582696","product_id":100104301,"comment_content":"1 触发快速重传条件是再丢失报文段之后有3次以上的新报文段，4号报文段后只有6号报文段未达到重传条件。<br>2 消息网关应该是出现timeout之类的消息日志（由于丢包+网关超时设置）。","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552921,"discussion_content":"嗯 第一个问题回答正确，因为没有凑满3次DupAck，所以不会触发快速重传。\n第二个问题，有两种可能性，一种就是你说的timeout，一种可能直接是原始的HTTP 400。具体记录了哪一种，要看客户端（消息网关）写日志的逻辑了：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645637268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335542,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1645580662,"is_pvip":false,"replies":[{"id":"122703","content":"问题一解答正确：）<br>问题二，那边虽然叫“网关”，但本身就属于独立业务端，并不是消费者app的http proxy，所以从语义上看，消息网关那里用504来结束不合适，我认为比较有可能的是两种：<br>1. 就是原始的HTTP 400<br>2. 记录应用层超时timeout（但不是504）<br>","user_name":"作者回复","comment_id":335542,"uid":"1662117","ip_address":"","utype":1,"ctime":1645712401,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1645580662","product_id":100104301,"comment_content":"问题一，应该是需要客户端收到三个dupack，才能触发快速重传<br>问题二，消息网管那里因为5秒超时，状态码可能是504 Gateway timeout","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553089,"discussion_content":"问题一解答正确：）\n问题二，那边虽然叫“网关”，但本身就属于独立业务端，并不是消费者app的http proxy，所以从语义上看，消息网关那里用504来结束不合适，我认为比较有可能的是两种：\n1. 就是原始的HTTP 400\n2. 记录应用层超时timeout（但不是504）\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645712401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1317111,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rQOn22bNV0kHpoPWRLRicjQCOkiaYmcVABiaIJxIDWIibSdqWXYTxjcdjiadibIxFsGVp5UE4DBd6Nx2DxjhAdlMIZeQ/132","nickname":"ThinkerWalker","note":"","ucode":"8CD44FFC37ACB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576252,"discussion_content":"老师你好，为什么不是504呢，通俗的理解，在限定的时间内没有收到服务端的响应不就是504吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655374304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335521,"user_name":"Realm","can_delete":false,"product_type":"c1","uid":1081299,"ip_address":"","ucode":"30CBEBE619D1A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/d3/b5896293.jpg","comment_is_top":false,"comment_ctime":1645573018,"is_pvip":true,"replies":[{"id":"122712","content":"嗯可能答案比你想的要简单些：）只是因为只有一个DupAck，没有凑满3个，所以不会触发快速重传~<br>网关（作为客户端）应该是收到了HTTP 400错误日志，你这个回答很好。我在另外一个回复里也提了另一种可能，就是记录应用层自己的超时报错，但这属于“二次包装”。如果答案只能选一个，我也会选HTTP 400，因为这就是HTTP原始报文里的信息，最为真实。","user_name":"作者回复","comment_id":335521,"uid":"1662117","ip_address":"","utype":1,"ctime":1645713906,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1645573018","product_id":100104301,"comment_content":"试着回答下<br><br>1）7号报文之上的6号报文，是网关发出的，带有fin标志位，按老师之前分享的，发出fin后，表示我可接受数据，即使收到服务端重传的请求，但不会发数据了，所以网关不会重传；<br><br>2 ）网关收到400的错误日志；","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553101,"discussion_content":"嗯可能答案比你想的要简单些：）只是因为只有一个DupAck，没有凑满3个，所以不会触发快速重传~\n网关（作为客户端）应该是收到了HTTP 400错误日志，你这个回答很好。我在另外一个回复里也提了另一种可能，就是记录应用层自己的超时报错，但这属于“二次包装”。如果答案只能选一个，我也会选HTTP 400，因为这就是HTTP原始报文里的信息，最为真实。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645713907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1081299,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7f/d3/b5896293.jpg","nickname":"Realm","note":"","ucode":"30CBEBE619D1A2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":553110,"discussion_content":"谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645715282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553101,"ip_address":""},"score":553110,"extra":""}]}]},{"had_liked":false,"id":335515,"user_name":"潘政宇","can_delete":false,"product_type":"c1","uid":1254758,"ip_address":"","ucode":"9A6658EE862D95","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/66/4835d92e.jpg","comment_is_top":false,"comment_ctime":1645547601,"is_pvip":true,"replies":[{"id":"122711","content":"示例文件已经上传到https:&#47;&#47;gitee.com&#47;steelvictor&#47;network-analysis&#47;tree&#47;master&#47;15<br>报文4没有被标注为HTTP（确切说是标注为POST）的原因是，这个报文并不是完整的HTTP请求，只是前一半（headers）。<br>标记为PSH的话，是因为这个报文就是当时客户端（微信网关）的发送队列里最后一个报文，内核会对此加上PSH标志位，这个行为不是应用程序控制的。","user_name":"作者回复","comment_id":335515,"uid":"1662117","ip_address":"","utype":1,"ctime":1645713687,"user_name_real":"编辑"}],"discussion_count":3,"race_medal":0,"score":"1645547601","product_id":100104301,"comment_content":"第4个报文，发送http header，为什么不标注为http请求，而是psh ack呢","like_count":0,"discussions":[{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553100,"discussion_content":"示例文件已经上传到https://gitee.com/steelvictor/network-analysis/tree/master/15\n报文4没有被标注为HTTP（确切说是标注为POST）的原因是，这个报文并不是完整的HTTP请求，只是前一半（headers）。\n标记为PSH的话，是因为这个报文就是当时客户端（微信网关）的发送队列里最后一个报文，内核会对此加上PSH标志位，这个行为不是应用程序控制的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645713687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":557263,"discussion_content":"老师能讲一下什么时候会设置PSH的flag？在TCP中？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647744747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553100,"ip_address":""},"score":557263,"extra":""},{"author":{"id":1662117,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM7zuDYFIutbSPc4eEtcMhdNBTI1FRR7q0xrGh2X1QdiaNxvAV31HcRUsjPWLaaWftqgwTnVoiaica8Nw/132","nickname":"胜辉（大V）","note":"","ucode":"3C13BFCD82D4EC","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":571746,"discussion_content":"应用层发送的连续消息分成多个TCP段，最后一个段要带PSH，前面的不用","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652374318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":557263,"ip_address":""},"score":571746,"extra":""}]}]}]}