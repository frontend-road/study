{"id":206937,"title":"20 | 二分查找：提升程序的查找效率","content":"<p>你好，我是胡光，欢迎回来。</p><p>上节课，我们讲了链表的基础结构，以及体会了一把链表结构在思维逻辑层面的作用，就是面对看似复杂的问题，当我们把它转换成链表结构思维去解决的时候，这些问题和困难都迎刃而解。</p><p>今天呢，我将带你学习一种简单、有趣且高效的算法，叫做二分查找。在学习二分查找之前呢，有一个关于二分查找的笑话，你必须知道。</p><p>话说，在学校图书馆的计算机科学相关书籍借阅区里面，有一个女生抱着 40 本书往外走，经过图书馆安检机器的时候，安检机器发出了警报声。这时候，女生很无奈，就把书放到了地上，准备一本一本地去试，看看究竟是哪一本书没有消磁。</p><p>女生的举动，被旁边图书馆管理员阿姨看到了，阿姨看不下去了，叫住了她，说：这么一本一本的尝试，多慢啊！我教你一种方法。眼看阿姨将书分成两摞，拿起其中一摞的书，过了一下安检，安检机器响了，阿姨就又将这摞书分成了两部分，拿出其中一部分又过了一次安检……就这样，阿姨每次将书的数量减少一半，没几次就找到了那本没有消磁的书。阿姨得意洋洋地说：小姑娘，这就是书中讲的二分查找算法，你这专业知识不过关啊！次日，图书馆发现，丢了 39 本书。</p><p>上面这个故事中的阿姨，虽然知道二分查找算法，可明显是对使用算法的前提条件没有搞清楚。今天，我教给你的不仅是二分查找算法本身，还希望你能准确搞清楚二分查找算法的使用场景。</p><!-- [[[read_end]]] --><h2>今日任务</h2><p>在正式开始课程之前呢，先来看一下我们今天这 10 分钟的任务吧。</p><p>假设你手上有 n 段长度不等的绳子，你现在想将这些绳子进行裁剪，裁剪出 k 条长度相等的绳子，注意，只能剪断绳子，不能拼接绳子。问题就是，你能得到的这 k 段绳子的最长长度是多长？<br>\n<img src=\"https://static001.geekbang.org/resource/image/72/41/72e13fc8a526d82a6f700892ea294741.jpg?wh=2819*1535\" alt=\"\" title=\"图1： 切绳子任务示意图\"></p><p>如图所示，如果你手中有 3 条绳子，分别是 4米、6米 和 5米，想要切出等长的4段，你会发现，每段最长就是 3 米。</p><p>那么我们是如何得到“每段最长就是3米”这个答案的呢？当然，你可以采用枚举法，就是先尝试能不能切出至少 4 段的 1 米长绳子，如果可以的话，再去尝试每段长度 2 米是否可行，依次尝试下去，直到尝试不下去为止。最后一次尝试可行的长度，就是每段绳子的最长长度了。</p><p>这种做法，就像前面故事中想要一本一本进行尝试的女生，显得低效且繁琐。而今天，我将扮演图书馆阿姨的角色，当然，不会像故事中的阿姨一样，犯了前提条件没有搞清的错误，去给你讲一种更高效的方法！</p><h2>必知必会，查缺补漏</h2><h4>1.二分查找算法基础</h4><p>最简单的二分算法的形式，就是在一个有序数组中，查找一个数字 x 是否存在。而二分算法，就是要基于这种有序性，才能对原问题进行加速求解。</p><p>我们先来思考，如何在一个数组中查找一个数字 x，最直接的方法，就是从头到尾一个一个找，找到了就是有数字x，找不到就是没有数字x。</p><p>而二分算法呢，是确定一个查找区间，然后从查找区间的一半处，与 x 进行比较，如果中间的数字比 x 大，说明x 在前半段，就把后半段扔掉；如果比 x 小，就把前半段扔掉，继续在后半段区间内查找。你会发现，二分查找的过程，每一次比较，都会使区间减少一半，对于一个大小为 n 的区间，我们只需要 ${log_2}{n}$ 次比较操作即可确定结果。</p><p>具体的过程呢，如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/9a/80/9afee42d2620c807f2dfc1507e349480.jpg?wh=3304*1905\" alt=\"\" title=\"图2： 二分查找算法示意图\"></p><p>图中呢，我们以查找 17 这个数字为例，L 和 R所圈定的，就是当前的查找区间，一开始 L = 0，R = 6，mid 所指向的就是数组的中间位置，根据 L 和 R 计算得到 mid 的值是 3。查看数组第 3 位的值是 12，比待查找值 17 要小，说明如果 17 在这个有序数组中，那它一定在 mid 所指向位置的后面，而 mid 本身所指向的数字已经确定不是 17 了，所以下一次我们可以将查找区间，定位到 mid + 1 到 R，也就是将 L 调整到 mid + 1 （即数组第4位）的位置。</p><p>理解二分查找的过程，首先要理解二分查找是怎么保证查找过程正确性的。中心思想就一个：<strong>不管如何调整区间，都要保证待查找数字，总是落在我们的由 L 和 R 标记的查找区间内部</strong>。而二分查找，实际上“二分”的就是查找范围。这个过程，就像警察排查犯罪嫌疑人一样，通过一些特定的条件，快速地缩小范围，并锁定真正的罪犯。</p><p>下面是一份二分查找的示例代码：</p><pre><code>int binary_search(int *arr, int n, int x) {\n    int l = 0, r = n - 1, mid;\n    while (l &lt;= r) {\n        mid = (l + r) &gt;&gt; 1;      \n        if (arr[mid] == x) return mid;\n        if (arr[mid] &gt; x) r = mid - 1;\n        else l = mid + 1;\n    }\n    return -1;\n}\n</code></pre><p>如代码所示，binary_search 函数传入三个参数，分别代表有序数组 arr，数组长度 n 和待查找数字 x。如果在数组中存在数字 x，函数将返回 x 数字的下标，否则就会返回 -1，代表数组中不存在数字 x。</p><p>你会看到，函数中有一个 while 循环，循环的执行条件是 l &lt;= r，意味着待查找区间不为空。每次循环开始的时候，都是先通过 l 和 r 的值，计算得到一个中间位置的下标 mid 值，然后比较 mid 位置的值与 x 的大小关系，从而确定区间调整策略。</p><p>如果 arr[mid] 大于 x，说明 x 值在区间的前半段，那么mid 及 mid 位置以后的值，就不在下一次查找的范围之内了，我们就把区间的尾部位置 r 向前移动，移动到 mid - 1 位。arr[mid] 小于 x 时候的调整策略与之类似。</p><p>至此，我们就讲完了基础的二分查找算法。</p><h4>2.二分答案的基本思路</h4><p>其实二分查找的算法思想，最有价值的部分，不是刚才讲的有序数组查找问题。而是由其衍生出来的叫做“二分答案”的思想。</p><p>关于二分答案的思想，你可以先回想一下，我们是如何介绍数组与函数的关系的？我们说：数组和函数本质上做的都是映射，函数是压缩的数组，数组是展开的函数。</p><p>我们沿着函数和数组的关系，回头再看看二分查找的代码，你会发现二分查找是在一个有序数组中，确定某一位为待查找值的位置，也就是 arr[x] = y，给定待查找 y 值，确定 x 值。对于这个有序数组，我们可以看成是一个单调函数，而对于这个arr[x] = y中去确定 x 值的过程，可以看成是对单调函数 f(x) = y 进行求解的过程。</p><p>如何判断，什么场景下需要使用二分思想对问题求解呢？其实，二分能解决的问题，还是比较有代表性的，基本需要满足如下两点：</p><ol>\n<li>f(x) 是一个单调函数。</li>\n<li>f(x) = y 函数，由 x 确定 y 值比较简单，而由 y 值确定 x 就比较困难。</li>\n</ol><p>关于第一点，我就不做过多解释了。至于第二点，你可以参考有序数组那个例子，对于数组来说，arr[x] = y，给定数组下标 x，确定值 y，这个过程对于计算机来说很容易，可给定 y 值，确定 y 值所在的下标 x，这个过程就不太容易了。所以，我们使用了二分查找算法。</p><p>总地来说，<strong>二分答案就是把二分查找过程中的数组换成了函数</strong>。关于二分答案的知识，你先理解思想，接下来我会用具体例子来给你展示。</p><h2>一起动手，搞事情</h2><p>今天给你留的作业题呢，是一个我们大家普遍都比较关心的问题，与计算工资有关系。下表是“个人所得税缴纳税率表”的一部分：<br>\n<img src=\"https://static001.geekbang.org/resource/image/da/6a/dac4a6d4427008ac750418fa79e3d06a.jpg?wh=4178*2319\" alt=\"\"></p><p>按照表格所示，如果一个人的每月工资是 18600，首先扣除不超过3000部分的3% 的所得税 90 元，然后扣除3000 到 12000 部分的 10%，就是(12000 - 3000) * 10% = 900，最后是扣除 12000 到 18600 的部分的 20%，也就是 (18600 - 12000) * 20% = 1320。所以，此人每月到手工资应该是：18600 - 90 - 900 - 1320 = 16290 元。</p><p>如果要是让你通过上表，计算一个人的税后工资，那这个任务可太容易了，我不会将这么简单的任务交给你的。</p><p>你今天要做的，是通过一个人的税后工资，反推出他/她的税前工资，也就是针对于上面这个例子，我给出税后工资 16290，你的程序应该能够计算得到税前工资 18600。想一想，怎么做吧，加油！</p><h2>切出最长的绳子</h2><p>最后，我们回到今天的任务。我们将每一段绳子的长度 x，与能切出来的绳子段数之间，看成一个映射关系，用函数 f(x) = y 来表示，代表每一段长度为 x 的情况下，最多能切出来 y 段绳子。你很容易发现，f 函数是一个单调函数，随着每一段长度的增加，能切出来的段数 y 是在减少的，而对于我们来说，就是要确定 y = k 时的 x 的最大值。</p><p>让我们总结以下 f(x) 函数的性质，首先f(x) 函数是单调函数，x 越大，y 值越小。其次，你应该可以感受出来，当我给你每一段长度 x 的时候，你很容易确定 f(x) = y 的 y 值，而如果让你通过 y 值求解 x，就没那么容易了！</p><p>至此，我们从这个任务出现的问题中，看到了能够使用二分思想的两个最重要的性质，下面我们就用二分思想的思路，来解决这个问题，下面是我给出的参考代码：</p><pre><code>#define EPS 1e-7\ndouble l[100], n;\n\nint f(double x) {\n    int cnt = 0;\n    for (int i = 0; i &lt; n; i++) {\n        cnt += (int)floor(l[i] / x);\n    }\n    return cnt;\n}\n\ndouble binary_search(double *l, double *r, int k) {\n    if (r - l &lt;= EPS) return r;\n    double mid = (l + r) / 2.0;\n    if (f(mid) &lt; k) return bs(l, mid, k);\n    return bs(mid, r, k);\n}\n</code></pre><p>代码中的 binary_search 就是二分答案的过程，函数 f 传入每一段的长度 x，返回最多能切多少段，变量 n 记录的是原始绳子的数量，l 数组记录的是每一段原始绳子的长度。</p><p>让我们把目光集中到 binary_search 函数过程，这一段二分答案的程序，使用递归的程序设计技巧，其实和之前给你演示的循环程序本质思想都是一样的。其中 l 和 r 表示待查找区间范围，也就是每一段绳子的长度范围。</p><p>递归程序的边界条件，是当 r - l 小于等于一个极小值的时候，就终止递归。这里需要特殊的说明一下，根据浮点数在我们计算机中的表示方法，我们很难用判等操作来判断两个浮点值相等，取而代之的，就是当这两个浮点值已经很接近的时候，我们就认为它俩是一个值。代码中的 EPS 是一个宏，就是我们控制的精度，一般控制在 $10^{-7}$ 范围，两个值相差不到 $10^{-7}$ 的时候，我们就认为这两个浮点值相等。</p><p>关于调整搜索范围的代码，我就不再赘述了，剩下的你自己就可以看明白了。至此，我们就解决了今天的任务。</p><h2>课程小结</h2><p>最后，我们来做一下课程小结。今天我们学习了二分查找算法，以及由二分思想延伸出来的二分答案相关算法思想。关于这些知识，你只需要记住如下几点即可：</p><ol>\n<li>二分算法框架，是求解具有单调性问题的利器。</li>\n<li>二分算法，通常用来求解那些f(x) = y 问题中，给定 y，求解 x 的问题。</li>\n<li>再次强调，数组和函数在思维层面，没有什么本质差别。</li>\n</ol><p>总结完了以后呢，我们再回顾那个笑话故事，图书馆阿姨用二分算法为什么会导致图书馆丢了 39 本书呢？如果我们将书的编号和是否是图书馆的书之间，做一个函数映射的话，你会发现这种映射出来的函数，本质上没有单调性。所以，原因就是阿姨将二分算法思想用错场景了。</p><p>好了，今天就到这里了，我是胡光，我们下期见。</p>","neighbors":{"left":{"article_title":"19 | 重新认识数据结构（下）：有趣的“链表思维”","id":206200},"right":{"article_title":"21 | 队列与单调队列：滑动区间最大值","id":208100}},"comments":[{"had_liked":false,"id":251906,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1601968307,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"5896935603","product_id":100043901,"comment_content":"茶艺师学编程<br><br>这节课的思考题做起来，感觉像是往4个贴成一排的小盒子里扔一个小球，看这个小球会落在哪一个盒子里。<br><br>这里是按要求是使用了二分查找，但我只要知道这个小球在哪个盒子里就行了。<br><br>&#47;*思考题 从税后工资反推税前工资，用二分查找法*&#47;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br><br>int count = -1;<br>int ending = -1;<br><br>&#47;*范围判断，不讨论税前工资超过35000的情况*&#47;<br>double test(double y){<br>    if(y &gt; 28910){<br>        puts(&quot;你太有钱了，不在讨论范围内。&quot;);<br>        exit(0);<br>    }<br>    else return y;<br>}<br><br>&#47;*二分算法，不精确到点，只要知道会落在哪一个区间就好了*&#47;<br>void binary_search(double x){<br>    double aftertax[5] = {0, 2910, 11010, 21410, 28910};<br>    if(x == aftertax[2])ending = 2;<br>    if(x &gt; aftertax[2]){<br>        if(x &lt; aftertax[3])count = 3;<br>        if(x == aftertax[3])ending = 3;<br>        if(x &gt; aftertax[3])count = 4;<br>        if(x == aftertax[4])count = 4;<br>    }<br>    if(x &lt; aftertax[2]){<br>        if(x &lt; aftertax[1])count = 1;<br>        if(x == aftertax[0])ending = 0;<br>        if(x &gt; aftertax[1])count = 2;<br>        if(x == aftertax[1])ending = 1;<br>    }<br>}<br><br>&#47;*计算函数，从税后工资反推税前工资*&#47;<br>double f(double y){<br>    double pertax[5] = {0, 3000, 12000, 25000, 35000};<br>    double taxratio[4] = {0.03, 0.1, 0.2, 0.25};<br>    double tax[5] = {0, 90, 900, 2600, 2500};<br>    double x = y;<br>    binary_search(y);<br>    if(ending != -1 &amp;&amp; count == -1)printf(&quot;\\n税前收入是%lf元&quot;, pertax[ending]);<br>    if(ending == -1 &amp;&amp; count != -1){<br>        for(int i = count; i &gt;= 0; i--){<br>            x += tax[i-1];<br>        }<br>        x -= pertax[count-1] * taxratio[count-1];<br>        x &#47;= (1 - taxratio[count-1]);<br>        printf(&quot;\\n税前收入是%lf元&quot;, x);<br>        }<br>        <br>}<br><br>int main(){<br>    puts(&quot;税后收入是&quot;);<br>    double y = 0;<br>    scanf(&quot;%lf&quot;, &amp;y);<br>    test(y);<br>    f(y);<br>    return 0;<br>}<br><br>","like_count":1},{"had_liked":false,"id":251823,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1601888284,"is_pvip":true,"discussion_count":1,"race_medal":5,"score":"5896855580","product_id":100043901,"comment_content":"茶艺师学编程<br><br>课文的例子，完整可运行程序<br><br>#include &lt;stdio.h&gt;<br>#include &lt;math.h&gt; <br>#define EPS 1e-7<br>double r[100] = {4, 5, 6}, n;<br><br>&#47;*切线段函数*&#47; <br>int f(double x){<br> int cnt = 0;<br> for (int i = 0; i &lt; n; i++){<br>  cnt += (int)floor(r[i] &#47; x);<br> }<br> return cnt;<br>}<br><br>&#47;*二分查找函数，可能是环境原因，这里只能的传入变量，而不能像老师那样直接传入数组（指针？）*&#47; <br>double binary_search(double l, double r, int k){<br> if(r - l &lt;= EPS)return r;<br> double mid = (l + r) &#47; 2.0;<br> if(f(mid) &lt; k) return binary_search(l, mid, k);<br> return binary_search(mid, r, k);<br>}<br><br>int main(){<br> n = 3;<br> double l = 0;<br> int k = 7;<br> double b;<br> for(int i = 0; i &lt; n; i++){ <br>  b = binary_search(l, r[i], k);<br> }<br> printf(&quot;线段最长为%lf&quot;, b);<br> return 0;<br>}<br><br>也许是环境问题，老师的传入数组的BS函数运行不了，我摸索出的方法是二分查找函数里还是传入变量，在主函数里在套一个循环来遍历所有的线段。","like_count":2,"discussions":[{"author":{"id":1185974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","nickname":"马建华","note":"","ucode":"928189590259AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362178,"discussion_content":"把存储线段信息的数组作为参数传递进去就行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616861856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325317,"user_name":"就说十三香嘛","can_delete":false,"product_type":"c1","uid":1995458,"ip_address":"","ucode":"C4DD3CA892BC67","user_header":"https://static001.geekbang.org/account/avatar/00/1e/72/c2/15c8ea9d.jpg","comment_is_top":false,"comment_ctime":1638923532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638923532","product_id":100043901,"comment_content":"想了一下，图书馆阿姨的初衷没有问题。说通俗点，问题在于报警器响了并不意味着只有一本书没有消磁。才开始学习，希望不晚。","like_count":0},{"had_liked":false,"id":285535,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1616861600,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1616861600","product_id":100043901,"comment_content":"老师的线段划分解法需要改一下二分查找函数，多加一个数组作为参数，把l和r改为double变量。<br><br>#include &lt;stdio.h&gt;<br>#include &lt;math.h&gt;<br>#define EPS 1e-7<br>double arr[100] = {4, 5, 6}, n;<br><br>&#47;&#47; 切线段函数<br>int f(double x) {<br>    int cnt = 0;<br>    for (int i = 0; i &lt; n; i++) {<br>        cnt += (int)floor(arr[i] &#47; x);<br>    }<br>    return cnt;<br>}<br><br>double binary_search(double *arr, double l, double r, int k) {<br>    if (r - l &lt;= EPS) {<br>        return r;<br>    }<br><br>    double mid = (l + r) &#47; 2.0;<br>    if (f(mid) &lt; k) {<br>        return binary_search(arr, l, mid, k);<br>    }<br>    return binary_search(arr, mid, r, k);<br>}<br><br>int main() {<br>    n = 3;<br>    double l = 0, r = 6;<br>    int k = 4;<br>    double res; <br>    res = binary_search(arr, l, r, k);<br>    printf(&quot;The longest segment is %lf\\n&quot;, res);<br>    return 0;<br>}<br>","like_count":0,"discussions":[{"author":{"id":1166748,"avatar":"https://static001.geekbang.org/account/avatar/00/11/cd/9c/286271ed.jpg","nickname":"秋云萧雪寒","note":"","ucode":"C48428011AEAC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544249,"discussion_content":"are数组是全局的，在函数内直接可用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641449028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253399,"user_name":"doge","can_delete":false,"product_type":"c1","uid":1593251,"ip_address":"","ucode":"9E2D4C8F9B4CBC","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/a3/0e56b4e5.jpg","comment_is_top":false,"comment_ctime":1602726827,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1602726827","product_id":100043901,"comment_content":"突然发现好像在大学的计算方法课上学过这个思想，o(╥﹏╥)o<br>省略计算税后工资的函数double afterTax(double payment);<br><br>double beforeTax(double income) {<br>    double l = income &#47; 2;<br>    double r = income * 2;<br>    while (afterTax(l) &gt; income) l &#47;= 2;<br>    while (afterTax(r) &lt; income) r *= 2;<br>    return bsSearch(l, r, income);<br>}<br><br>double bsSearch(double l, double r, double income) {<br>    double mid = (l + r) &#47; 2;<br>    if (afterTax(mid) - income &lt; 1e-7 &amp;&amp; income - afterTax(mid) &lt; 1e-7) return mid;<br>    if (afterTax(mid) &lt; income) return bsSearch(mid, r, income);<br>    else return bsSearch(l, mid, income);<br>}","like_count":0,"discussions":[{"author":{"id":1593251,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/a3/0e56b4e5.jpg","nickname":"doge","note":"","ucode":"9E2D4C8F9B4CBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312590,"discussion_content":"if (afterTax(mid) - income < 1e-7 &amp;&amp; income - afterTax(mid) < 1e-7) return mid;这一行改为if (r - l < 1e-7) return r;更有效率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602741537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251817,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1601887664,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1601887664","product_id":100043901,"comment_content":"茶艺师学编程<br><br>最简单的二分查找程序，输入一个数，看在不在数组1-10里，在的话在什么位置。<br><br>#include &lt;stdio.h&gt;<br><br>&#47;*老师的例子，二分查找函数，输出要么是数组下标，要么不存在（-1）*&#47; <br>int binary_search(int *arr, int n, int x){<br> int l = 0, r = n - 1, mid;<br> while(l &lt;= r){<br>  mid = (l + r) &gt;&gt; 1;<br>  if (arr[mid] == x)return mid;<br>  if (arr[mid] &gt; x)r = mid - 1;<br>  else l = mid + 1;<br> }<br> return -1;<br>}<br><br>&#47;*结果宣告函数*&#47; <br>void yesno(int x){<br> if(x &gt; 0)printf(&quot;yes! is %d&quot;, x);<br> else if(x &lt; 0)puts(&quot;no!&quot;);<br>}<br><br>int main(){<br> int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};<br> int x ;<br> scanf(&quot;%d&quot;, &amp;x);<br> int n = 10;<br> yesno(binary_search(arr, n, x));<br> return 0;<br>}","like_count":0},{"had_liked":false,"id":251811,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1601884918,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1601884918","product_id":100043901,"comment_content":"茶艺师学编程<br><br>老师的例子，这里：double binary_search(double *l, double *r, int k) { if (r - l &lt;= EPS) return r;<br>我自己跑的时候，返回了[Error] cannot convert &#39;double*&#39; to &#39;double&#39; in return","like_count":0},{"had_liked":false,"id":207350,"user_name":"1043","can_delete":false,"product_type":"c1","uid":1485365,"ip_address":"","ucode":"AAA69CC175AEE3","user_header":"https://static001.geekbang.org/account/avatar/00/16/aa/35/1a4884f9.jpg","comment_is_top":false,"comment_ctime":1587052609,"is_pvip":false,"replies":[{"id":"77459","content":"对的","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1587086045,"ip_address":"","comment_id":207350,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1587052609","product_id":100043901,"comment_content":"二分算法用在单调区间的增减计算比较快。不知道区间取值就会像图书馆阿姨一样丢了39&#47;40本书……<br>在题目中求f（x）=y，有限次二分计算中在给定y的情况求解x的问题就是多次取中尝试计算吗？就是经过log2n次计算就可以找到合适的答案……","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492093,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587086045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202046,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1585893409,"is_pvip":true,"replies":[{"id":"75582","content":"这么计算的逻辑没问题。再试试用二分试试吧。<br>","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1585972267,"ip_address":"","comment_id":202046,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1585893409","product_id":100043901,"comment_content":"# 通过税后工资计算税前工资<br>```golang<br>func TestReversePay(t *testing.T) {<br>\ttaxMatrix := []TaxRange{<br>\t\tTaxRange{Rate: 0.03, Start: 0, End: 3000, QuickValue: 90},<br>\t\tTaxRange{Rate: 0.1, Start: 3000, End: 12000, QuickValue: 900},<br>\t\tTaxRange{Rate: 0.2, Start: 12000, End: 25000, QuickValue: 2600},<br>\t\tTaxRange{Rate: 0.25, Start: 25000, End: 35000, QuickValue: 2500},<br>\t}<br><br>\t&#47;&#47;1.6 = 1 + 0.03 + 0.1 + 0.2 + 0.25<br>\tvar coefficient float64 = 1.6<br>\tvar pays []float64 = []float64{18600, 0.6, 600.6, 8600.6, 10600.6, 106000.15}<br><br>\tfor _, pay := range pays {<br>\t\tincome := pay - getTax(pay, taxMatrix)<br>\t\tfmt.Println(fmt.Sprintf(&quot;income:%f&quot;, income))<br>\t\tfmt.Println(fmt.Sprintf(&quot;pay:%f&quot;, pay))<br>\t\tfmt.Println(fmt.Sprintf(&quot;ReversePay:%f&quot;, ReversePay(income*coefficient, income, taxMatrix)))<br>\t\tfmt.Println(&quot;&quot;)<br>\t}<br>}<br><br>type TaxRange struct {<br>\tRate       float64<br>\tStart      float64<br>\tEnd        float64<br>\tQuickValue float64<br>}<br><br>func ReversePay(pay, income float64, taxMatrix []TaxRange) float64 {<br>\tguessIncome := pay - getTax(pay, taxMatrix)<br>\tif math.Abs(guessIncome-income) &lt;= 1e-7 {<br>\t\treturn pay<br>\t}<br><br>\tmid := math.Abs(guessIncome-income) &#47; 2<br>\tif guessIncome &gt; income {<br>\t\tpay -= mid<br>\t} else {<br>\t\tpay += mid<br>\t}<br><br>\treturn ReversePay(pay, income, taxMatrix)<br>}<br><br>func getTax(pay float64, taxMatrix []TaxRange) float64 {<br>\tvar tax float64 = 0<br>\tfor _, taxRange := range taxMatrix {<br>\t\tif pay &gt; taxRange.End {<br>\t\t\ttax += taxRange.QuickValue<br>\t\t\tcontinue<br>\t\t}<br><br>\t\ttax += (pay - taxRange.Start) * taxRange.Rate<br>\t\tbreak<br>\t}<br>\treturn tax<br>}<br>```","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490493,"discussion_content":"这么计算的逻辑没问题。再试试用二分试试吧。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585972267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047014,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","nickname":"webmin","note":"","ucode":"98B0CA882454E8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221119,"discussion_content":"//老师辛苦，周末还抽空Review同学的代码，已经按老师的建议调整\n\nfunc TestReversePay(t *testing.T) {\n\n              //参见之前的代码...\n\n               reversePay := ReversePay(income, income*coefficient, income, taxMatrix)\n               fmt.Println(fmt.Sprintf(&#34;ReversePay:%f&#34;, reversePay))\n               if math.Abs(pay-reversePay) > 1e-7 {\n                       t.Error(&#34;反推值不正确&#34;)\n               }\n               fmt.Println(&#34;&#34;)\n          }\n     }\n}\n\nfunc ReversePay(l, r, income float64, taxMatrix []TaxRange) float64 {\n        if r-l <= 1e-7 {\n            return r\n        }\n\n        mid := (l + r) / 2\n        guessIncome := mid - getTax(mid, taxMatrix)\n\n        if guessIncome > income {\n            return ReversePay(l, mid, income, taxMatrix)\n        }\n        return ReversePay(mid, r, income, taxMatrix)\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585978589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186027,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1583744066,"is_pvip":false,"replies":[{"id":"72097","content":"你想想哈，如果你 ff(mid) 比 x 小很多呢？？？那相减之后，是不是也是 &lt;= EPS ? 所以，你要判断应该是 ff(mid) 与 x 之间差的绝对值是不是 &lt;= EPS","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583936691,"ip_address":"","comment_id":186027,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1583744066","product_id":100043901,"comment_content":"就是计算的结果不正确，相差了大概1000<br>","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486590,"discussion_content":"你想想哈，如果你 ff(mid) 比 x 小很多呢？？？那相减之后，是不是也是 &amp;lt;= EPS ? 所以，你要判断应该是 ff(mid) 与 x 之间差的绝对值是不是 &amp;lt;= EPS","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583936691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1240126,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","nickname":"宋不肥","note":"","ucode":"32B34AF579C91C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202644,"discussion_content":"哦哦哦，对的，我没考虑到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583938096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185690,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1583664597,"is_pvip":false,"replies":[{"id":"71871","content":"错误结果？能说明具体情况么？","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583743504,"ip_address":"","comment_id":185690,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1583664597","product_id":100043901,"comment_content":"#include&lt;stdio.h&gt;<br>&#47;&#47;逆函数版本<br>double f(double x){<br>\tif(x &lt;= 3000*0.97) return x&#47;0.97;<br>\tif(x &lt;= (3000*0.97 + (12000-3000)*0.9 ))<br>\t\treturn ( x- 3000 * 0.97 ) &#47; 0.9 + 3000;<br>\tif(x &lt;= (3000*0.97 + (12000-3000)*0.9 + (25000-12000)*0.8 ) )<br>\t\treturn ( x- 3000 * 0.97 - (12000-3000)*0.9 ) &#47; 0.8 + 12000 ;<br>\tif(x &lt;= (3000*0.97 + (12000-3000)*0.9 + (25000-12000)*0.8 + (35000-25000)*0.75 ) )<br>\t\treturn ( x- 3000 * 0.97 - (12000-3000)*0.9 - ( 25000-12000 ) * 0.8 ) &#47; 0.75 + 25000;<br>\telse return -1;<br>}<br><br><br>&#47;&#47;二分法版本 <br>#define EPS 1e-7<br><br>double ff(double x){<br>\tif(x &lt;= 3000) return x*0.97;<br>\tif(x &lt;= 12000) return ( x- 3000 ) &#47; 0.9 + 3000*0.97;<br>\tif(x &lt;= 25000) return ( x- 12000 ) * 0.8 + 3000 * 0.97 + (12000-3000)*0.9 ;<br>\tif(x &lt;= 35000) return ( x- 25000 ) * 0.75 + 3000 * 0.97 + (12000-3000)*0.9 + (25000 - 12000)*0.8;<br>\telse return -1;<br>}<br><br>double binary_search(double x, double l , double h ) {<br>    if (h - l &lt;= EPS) return h;<br>    double mid = (h + l) &#47; 2.0;<br>    if(ff(mid) == x) return mid; &#47;&#47; 为什么这一行不能换为if(ff(mid) - x &lt;= EPS) return mid; <br>    if (ff(mid) &lt; x) return binary_search(x,mid, h);<br>    return binary_search(x, l, mid);<br>}<br><br><br>int main(){<br>\tdouble y;<br>\ty = f(16290);<br>\tprintf(&quot;%f\\n&quot;,y);<br>\ty = binary_search(16290,0,35000);<br>\tprintf(&quot;%f&quot;,y);<br>}<br>之前没注意，反函数想错了。 确实二分法 适合（对数时间复杂度） 这种单调函数  二分自变量来寻找目标因变量所对应的自变量的大小。 能避免求逆的繁琐过程出错。<br>但有个问题，二分法中的这一行代码，必须使用if(ff(mid) == x) return mid;为什么这一行换为if(ff(mid) - x &lt;= EPS) return mid; 会得到错误结果","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486466,"discussion_content":"错误结果？能说明具体情况么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583743504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1240126,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","nickname":"宋不肥","note":"","ucode":"32B34AF579C91C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200935,"discussion_content":"就是计算的结果不正确，相差了大概1000","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583743836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185496,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1583593543,"is_pvip":false,"replies":[{"id":"71712","content":"代码有如下问题：<br>1、没有用到二分思想。<br>2、结果不正确，你测试一下文章中的 16290。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583660096,"ip_address":"","comment_id":185496,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583593543","product_id":100043901,"comment_content":"#include&lt;stdio.h&gt;<br>double f(double x){<br>\tif(x &lt;= 3000*0.97) return x&#47;0.97;<br>\tif(x &lt;= (3000*0.97 + (12000-3000)*0.9 ))<br>\t\treturn ( x- 3000 * 0.97 ) &#47; 0.9 + 3000*0.97;<br>\tif(x &lt;= (3000*0.97 + (12000-3000)*0.9) + (25000-12000)*0.8 ) <br>\t\treturn ( x- 3000 * 0.97 - (12000-3000)*0.9 ) &#47; 0.8 + 3000*0.97 +(12000-3000)*0.9 ;<br>\tif(x &lt;= (3000*0.97 + (12000-3000)*0.9) + (25000-12000)*0.8 + (35000-25000)*0.75 ) <br>\t\treturn ( x- 3000 * 0.97 - (12000-3000)*0.9 - ( 25000-12000 ) * 0.8 ) &#47; 0.75 + 3000*0.97 +(12000-3000)*0.9 + ( 25000-12000 ) * 0.8;<br>\telse return -1;<br>}<br>int main(){<br>\tdouble y;<br>\ty = f(23534);<br>\tprintf(&quot;%f&quot;,y);<br>}","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486381,"discussion_content":"代码有如下问题：\n1、没有用到二分思想。\n2、结果不正确，你测试一下文章中的 16290。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583660096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185231,"user_name":"宋jia wen","can_delete":false,"product_type":"c1","uid":1346058,"ip_address":"","ucode":"9DB9BB7892B409","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/0a/29171291.jpg","comment_is_top":false,"comment_ctime":1583540527,"is_pvip":false,"replies":[{"id":"71556","content":"12000-3000*0.03-（12000-3000）*0.1","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583557259,"ip_address":"","comment_id":185231,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583540527","product_id":100043901,"comment_content":"老师 个人所得税缴纳税率表里 如果我的工资是12000，那税率怎么算呢？","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486300,"discussion_content":"12000-3000*0.03-（12000-3000）*0.1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583557259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184885,"user_name":"Hunter Liu","can_delete":false,"product_type":"c1","uid":1474463,"ip_address":"","ucode":"BD1FD203A295DC","user_header":"https://static001.geekbang.org/account/avatar/00/16/7f/9f/ca7b20cd.jpg","comment_is_top":false,"comment_ctime":1583424660,"is_pvip":false,"replies":[{"id":"71504","content":"-_-|||，可能是我对入门这个概念理解的有点儿偏差。sorry，让你们受苦了。^_^","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583477314,"ip_address":"","comment_id":184885,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583424660","product_id":100043901,"comment_content":"老师的课一路跟下来，虽然有不懂的地方，但这可不是入门啊。","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486158,"discussion_content":"-_-|||，可能是我对入门这个概念理解的有点儿偏差。sorry，让你们受苦了。^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583477314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184498,"user_name":"Jinlee","can_delete":false,"product_type":"c1","uid":1644723,"ip_address":"","ucode":"8EDA9B0C5184EA","user_header":"https://static001.geekbang.org/account/avatar/00/19/18/b3/848ffa10.jpg","comment_is_top":false,"comment_ctime":1583329203,"is_pvip":false,"replies":[{"id":"71444","content":"『分段函数关系式，再由每一段 x 的取值范围 得到每一段 y 的取值范围，这样就可以由』<br>这一步完全多余~~~~想想是不是。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583410932,"ip_address":"","comment_id":184498,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583329203","product_id":100043901,"comment_content":"我的思路是这样的：由“个人所得税缴纳税率表”得到税后工资 y 与税前工资 x 的<br>分段函数关系式，再由每一段 x 的取值范围 得到每一段 y 的取值范围，这样就可以由<br>已知税后工资与 y 的比较来锁定待求税前工资 x 的取值范围以及对应的函数， 进而<br>用二分答案法取得待求税前工资的逼近值。 但是，，，没能实现代码，想了很久。","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486036,"discussion_content":"『分段函数关系式，再由每一段 x 的取值范围 得到每一段 y 的取值范围，这样就可以由』\n这一步完全多余~~~~想想是不是。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583410932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184148,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1583238489,"is_pvip":true,"replies":[{"id":"71300","content":"(｡ì _ í｡)前一步操作比较多余。","user_name":"作者回复","user_name_real":"胡炜燚","uid":"1374625","ctime":1583284767,"ip_address":"","comment_id":184148,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583238489","product_id":100043901,"comment_content":"由税后工资算税前工资：可以把每个区间的边界值当作数组的一个值，最后得到这样的一个数组<br>[0,3000,12000,25000,35000] 然后在按照二分法进行计算","like_count":0,"discussions":[{"author":{"id":1374625,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/a1/ac36884c.jpg","nickname":"胡光","note":"","ucode":"601F29A45FC1E5","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485910,"discussion_content":"(｡ì _ í｡)前一步操作比较多余。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583284767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}