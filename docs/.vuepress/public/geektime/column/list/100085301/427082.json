{"id":427082,"title":"23｜类型系统：如何在实战中使用泛型编程？","content":"<p>你好，我是陈天。</p><p>从这一讲开始，我们就到进阶篇了。在进阶篇中，我们会先进一步夯实对类型系统的理解，然后再展开网络处理、Unsafe Rust、FFI 等主题。</p><p>为什么要把类型系统作为进阶篇的基石？之前讲解 rgrep 的代码时你可以看到，当要构建可读性更强、更加灵活、更加可测试的系统时，我们都要或多或少使用 trait 和泛型编程。</p><p>所以可以说在 Rust 开发中，泛型编程是我们必须掌握的一项技能。在你构建每一个数据结构或者函数时，最好都问问自己：我是否有必要在此刻就把类型定死？是不是可以把这个决策延迟到尽可能靠后的时刻，这样可以为未来留有余地？</p><p>在《架构整洁之道》里 Uncle Bob 说：<strong>架构师的工作不是作出决策，而是尽可能久地推迟决策，在现在不作出重大决策的情况下构建程序，以便以后有足够信息时再作出决策</strong>。所以，如果我们能通过泛型来推迟决策，系统的架构就可以足够灵活，可以更好地面对未来的变更。</p><p>今天，我们就来讲讲如何在实战中使用泛型编程，来延迟决策。如果你对 Rust 的泛型编程掌握地还不够牢靠，建议再温习一下第 <a href=\"https://time.geekbang.org/column/article/420021\">12</a> 和 <a href=\"https://time.geekbang.org/column/article/420028\">13</a> 讲，也可以阅读 The Rust Programming Language <a href=\"https://doc.rust-lang.org/book/ch10-00-generics.html\">第 10 章</a>作为辅助。</p><h2>泛型数据结构的逐步约束</h2><!-- [[[read_end]]] --><p>在进入正题之前，我们以标准库的 <a href=\"https://doc.rust-lang.org/src/std/io/buffered/bufreader.rs.html#48-53\">BufReader</a> 结构为例，先简单回顾一下，在定义数据结构和实现数据结构时，如果使用了泛型参数，到底有什么样的好处。</p><p>看这个定义的小例子：</p><pre><code class=\"language-rust\">pub struct BufReader&lt;R&gt; {\n    inner: R,\n    buf: Box&lt;[u8]&gt;,\n    pos: usize,\n    cap: usize,\n}\n</code></pre><p>BufReader 对要读取的 R 做了一个泛型的抽象。也就是说，R 此刻是个 File，还是一个 Cursor，或者直接是 Vec&lt;u8&gt;，都不重要。在定义 struct 的时候，我们并未对 R 做进一步的限制，这是最常用的使用泛型的方式。</p><p>到了实现阶段，根据不同的需求，我们可以为 R 做不同的限制。这个限制需要细致到什么程度呢？只需要添加刚好满足实现需要的限制即可。</p><p>比如在提供 capacity()、buffer() 这些不需要使用 R 的任何特殊能力的时候，可以<a href=\"https://doc.rust-lang.org/src/std/io/buffered/bufreader.rs.html#102-230\">不做任何限制</a>：</p><pre><code class=\"language-rust\">impl&lt;R&gt; BufReader&lt;R&gt; {\n    pub fn capacity(&amp;self) -&gt; usize { ... }\n    pub fn buffer(&amp;self) -&gt; &amp;[u8] { ... }\n}\n</code></pre><p>但在实现 new() 的时候，因为使用了 Read trait 里的方法，所以这时需要明确传进来的 <a href=\"https://doc.rust-lang.org/src/std/io/buffered/bufreader.rs.html#55-100\">R 满足 Read 约束</a>：</p><pre><code class=\"language-rust\">impl&lt;R: Read&gt; BufReader&lt;R&gt; {\n    pub fn new(inner: R) -&gt; BufReader&lt;R&gt; { ... }\n    pub fn with_capacity(capacity: usize, inner: R) -&gt; BufReader&lt;R&gt; { ... }\n}\n</code></pre><p>同样，在实现 Debug 时，也可以要求 <a href=\"https://doc.rust-lang.org/src/std/io/buffered/bufreader.rs.html#333-344\">R 满足 Debug trait 的约束</a>：</p><pre><code class=\"language-rust\">impl&lt;R&gt; fmt::Debug for BufReader&lt;R&gt;\nwhere\n    R: fmt::Debug\n{\n    fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result { ... }\n}\n</code></pre><p>如果你多花一些时间，把 <a href=\"https://doc.rust-lang.org/src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a> 对接口的所有实现都过一遍，还会发现 BufReader 在实现过程中使用了 Seek trait。</p><p>整体而言，impl BufReader 的代码根据不同的约束，分成了不同的代码块。这是一种非常典型的实现泛型代码的方式，我们可以学习起来，在自己的代码中也应用这种方法。</p><p>通过使用泛型参数，BufReader 把决策交给使用者。我们在上一讲期中考试的 rgrep 实现中也看到了，在测试和 rgrep 的实现代码中，是如何为 BufReader 提供不同的类型来满足不同的使用场景的。</p><h2>泛型参数的三种使用场景</h2><p>泛型参数的使用和逐步约束就简单复习到这里，相信你已经掌握得比较好了，我们开始今天的重头戏，来学习实战中如何使用泛型编程。</p><p>先看泛型参数，它有三种常见的使用场景：</p><ul>\n<li>使用泛型参数延迟数据结构的绑定；</li>\n<li>使用泛型参数和 PhantomData，声明数据结构中不直接使用，但在实现过程中需要用到的类型；</li>\n<li>使用泛型参数让同一个数据结构对同一个 trait 可以拥有不同的实现。</li>\n</ul><h3>用泛型参数做延迟绑定</h3><p>先来看我们已经比较熟悉的，用泛型参数做延迟绑定。在 KV server 的<a href=\"https://time.geekbang.org/column/article/425001\">上篇</a>中，我构建了一个 Service 数据结构：</p><pre><code class=\"language-rust\">/// Service 数据结构\npub struct Service&lt;Store = MemTable&gt; {\n    inner: Arc&lt;ServiceInner&lt;Store&gt;&gt;,\n}\n</code></pre><p>它使用了一个泛型参数 Store，并且这个泛型参数有一个缺省值 MemTable。指定了泛型参数缺省值的好处是，在使用时，可以不必提供泛型参数，直接使用缺省值。这个泛型参数在随后的实现中可以被逐渐约束：</p><pre><code class=\"language-rust\">impl&lt;Store&gt; Service&lt;Store&gt; {\n    pub fn new(store: Store) -&gt; Self { ... }\n}\n\nimpl&lt;Store: Storage&gt; Service&lt;Store&gt; {\n    pub fn execute(&amp;self, cmd: CommandRequest) -&gt; CommandResponse { ... }\n}\n</code></pre><p>同样的，在泛型函数中，可以使用 impl Storage 或者 &lt;Store: Storage&gt; 的方式去约束：</p><pre><code class=\"language-rust\">pub fn dispatch(cmd: CommandRequest, store: &amp;impl Storage) -&gt; CommandResponse { ... }\n// 等价于\npub fn dispatch&lt;Store: Storage&gt;(cmd: CommandRequest, store: &amp;Store) -&gt; CommandResponse { ... }\n</code></pre><p>这种用法，想必你现在已经非常熟悉了，可以在开发中使用泛型参数来对类型进行延迟绑定。</p><h3>使用泛型参数和幽灵数据（PhantomData）提供额外类型</h3><p>在熟悉了泛型参数的基本用法后，我来考考你：现在要设计一个 User 和 Product 数据结构，它们都有一个 u64 类型的 id。然而我希望每个数据结构的 id 只能和同种类型的 id 比较，也就是说如果 user.id 和 product.id 比较，编译器就能直接报错，拒绝这种行为。该怎么做呢？</p><p>你可以停下来先想一想。</p><p>很可能会立刻想到这个办法。先用一个自定义的数据结构 Identifier&lt;T&gt; 来表示 id：</p><pre><code class=\"language-rust\">pub struct Identifier&lt;T&gt; {\n    inner: u64,\n}\n</code></pre><p>然后，在 User 和 Product 中，各自用 Identifier&lt;Self&gt; 来让 Identifier 和自己的类型绑定，达到让不同类型的 id 无法比较的目的。有了这个构想，你可以很快写出这样的代码（<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d80dd549f6b57c7643381f75539ff1ca\">代码</a>）：</p><pre><code class=\"language-rust\">#[derive(Debug, Default, PartialEq, Eq)]\npub struct Identifier&lt;T&gt; {\n    inner: u64,\n}\n\n#[derive(Debug, Default, PartialEq, Eq)]\npub struct User {\n    id: Identifier&lt;Self&gt;,\n}\n\n#[derive(Debug, Default, PartialEq, Eq)]\npub struct Product {\n    id: Identifier&lt;Self&gt;,\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn id_should_not_be_the_same() {\n        let user = User::default();\n        let product = Product::default();\n\n        // 两个 id 不能比较，因为他们属于不同的类型\n        // assert_ne!(user.id, product.id);\n\n        assert_eq!(user.id.inner, product.id.inner);\n    }\n}\n</code></pre><p>然而它无法编译通过。为什么呢？</p><p>因为 Identifier&lt;T&gt; 在定义时，并没有使用泛型参数 T，编译器认为 T 是多余的，所以只能把 T 删除掉才能编译通过。但是，删除掉 T，User  和 Product 的 id 就可以比较了，我们就无法实现想要的功能了，怎么办？唉，刚刚还踌躇满志觉得可以用泛型来指点江山，现在面对这么个小问题却万念俱灭？</p><p>别急。如果你使用过任何其他支持泛型的语言，无论是 Java、Swift 还是 TypeScript，可能都接触过<strong>Phantom Type（幽灵类型）</strong>的概念。像刚才的写法，Swift / TypeScript 会让其通过，因为它们的编译器会自动把多余的泛型参数当成 Phantom type 来用，比如下面 TypeScript 的例子，可以编译：</p><pre><code class=\"language-typescript\">// NotUsed is allowed\nclass MyNumber&lt;T, NotUsed&gt; {\n    inner: T;\n    add: (x: T, y: T) =&gt; T;\n}\n</code></pre><p>但 Rust 对此有洁癖。Rust 并不希望在定义类型时，出现目前还没使用，但未来会被使用的泛型参数，所以 Rust 编译器对此无情拒绝，把门关得严严实实。</p><p>不过，别担心，作为过来人，Rust 知道 Phantom Type 的必要性，所以开了一扇叫 <a href=\"https://doc.rust-lang.org/std/marker/struct.PhantomData.html\">PhantomData</a> 的窗户：让我们可以用 PhantomData 来持有 Phantom Type。PhantomData 中文一般翻译成幽灵数据，这名字透着一股让人不敢亲近的邪魅，但它<strong>被广泛用在处理，数据结构定义过程中不需要，但是在实现过程中需要的泛型参数</strong>。</p><p>我们来试一下：</p><pre><code class=\"language-rust\">use std::marker::PhantomData;\n\n#[derive(Debug, Default, PartialEq, Eq)]\npub struct Identifier&lt;T&gt; {\n    inner: u64,\n    _tag: PhantomData&lt;T&gt;,\n}\n\n#[derive(Debug, Default, PartialEq, Eq)]\npub struct User {\n    id: Identifier&lt;Self&gt;,\n}\n\n#[derive(Debug, Default, PartialEq, Eq)]\npub struct Product {\n    id: Identifier&lt;Self&gt;,\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn id_should_not_be_the_same() {\n        let user = User::default();\n        let product = Product::default();\n\n        // 两个 id 不能比较，因为他们属于不同的类型\n        // assert_ne!(user.id, product.id);\n\n        assert_eq!(user.id.inner, product.id.inner);\n    }\n}\n</code></pre><p>Bingo！编译通过！在使用了 PhantomData 后，编译器允许泛型参数 T 的存在。</p><p>现在我们确认了：<strong>在定义数据结构时，对于额外的、暂时不需要的泛型参数，用 PhantomData 来“拥有”它们，这样可以规避编译器的报错</strong>。PhantomData 正如其名，它实际上长度为零，是个 ZST（Zero-Sized Type），就像不存在一样，唯一作用就是类型的标记。</p><p>再来写一个例子，加深对 PhantomData 的理解（<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d7ae09e39026cba20b6bc0c4a92f458f\">代码</a>）：</p><pre><code class=\"language-rust\">use std::{\n    marker::PhantomData,\n    sync::atomic::{AtomicU64, Ordering},\n};\n\nstatic NEXT_ID: AtomicU64 = AtomicU64::new(1);\n\npub struct Customer&lt;T&gt; {\n    id: u64,\n    name: String,\n    _type: PhantomData&lt;T&gt;,\n}\n\npub trait Free {\n    fn feature1(&amp;self);\n    fn feature2(&amp;self);\n}\n\npub trait Personal: Free {\n    fn advance_feature(&amp;self);\n}\n\nimpl&lt;T&gt; Free for Customer&lt;T&gt; {\n    fn feature1(&amp;self) {\n        println!(\"feature 1 for {}\", self.name);\n    }\n\n    fn feature2(&amp;self) {\n        println!(\"feature 2 for {}\", self.name);\n    }\n}\n\nimpl Personal for Customer&lt;PersonalPlan&gt; {\n    fn advance_feature(&amp;self) {\n        println!(\n            \"Dear {}(as our valuable customer {}), enjoy this advanced feature!\",\n            self.name, self.id\n        );\n    }\n}\n\npub struct FreePlan;\npub struct PersonalPlan(f32);\n\nimpl&lt;T&gt; Customer&lt;T&gt; {\n    pub fn new(name: String) -&gt; Self {\n        Self {\n            id: NEXT_ID.fetch_add(1, Ordering::Relaxed),\n            name,\n            _type: PhantomData::default(),\n        }\n    }\n}\n\nimpl From&lt;Customer&lt;FreePlan&gt;&gt; for Customer&lt;PersonalPlan&gt; {\n    fn from(c: Customer&lt;FreePlan&gt;) -&gt; Self {\n        Self::new(c.name)\n    }\n}\n\n/// 订阅成为付费用户\npub fn subscribe(customer: Customer&lt;FreePlan&gt;, payment: f32) -&gt; Customer&lt;PersonalPlan&gt; {\n    let _plan = PersonalPlan(payment);\n    // 存储 plan 到 DB\n    // ...\n    customer.into()\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_customer() {\n        // 一开始是个免费用户\n        let customer = Customer::&lt;FreePlan&gt;::new(\"Tyr\".into());\n        // 使用免费 feature\n        customer.feature1();\n        customer.feature2();\n        // 用着用着觉得产品不错愿意付费\n        let customer = subscribe(customer, 6.99);\n        customer.feature1();\n        customer.feature1();\n        // 付费用户解锁了新技能\n        customer.advance_feature();\n    }\n}\n</code></pre><p>在这个例子里，Customer 有个额外的类型 T。</p><p>通过类型 T，我们可以将用户分成不同的等级，比如免费用户是 Customer&lt;FreePlan&gt;、付费用户是 Customer&lt;PersonalPlan&gt;，免费用户可以转化成付费用户，解锁更多权益。使用 PhantomData 处理这样的状态，可以在编译期做状态的检测，避免运行期检测的负担和潜在的错误。</p><h3>使用泛型参数来提供多个实现</h3><p>用泛型参数做延迟绑定、结合PhantomData来提供额外类型，是我们经常能看到的泛型参数的用法。</p><p>有时候，对于同一个 trait，我们想要有不同的实现，该怎么办？比如一个方程，它可以是线性方程，也可以是二次方程，我们希望为不同的类型实现不同 Iterator。可以这样做（<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=123d1c5c030d1719d5d2de39bb5f8b10\">代码</a>）：</p><pre><code class=\"language-rust\">use std::marker::PhantomData;\n\n#[derive(Debug, Default)]\npub struct Equation&lt;IterMethod&gt; {\n    current: u32,\n    _method: PhantomData&lt;IterMethod&gt;,\n}\n\n// 线性增长\n#[derive(Debug, Default)]\npub struct Linear;\n\n// 二次增长\n#[derive(Debug, Default)]\npub struct Quadratic;\n\nimpl Iterator for Equation&lt;Linear&gt; {\n    type Item = u32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.current += 1;\n        if self.current &gt;= u32::MAX {\n            return None;\n        }\n\n        Some(self.current)\n    }\n}\n\nimpl Iterator for Equation&lt;Quadratic&gt; {\n    type Item = u32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.current += 1;\n        if self.current &gt;= u16::MAX as u32 {\n            return None;\n        }\n\n        Some(self.current * self.current)\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_linear() {\n        let mut equation = Equation::&lt;Linear&gt;::default();\n        assert_eq!(Some(1), equation.next());\n        assert_eq!(Some(2), equation.next());\n        assert_eq!(Some(3), equation.next());\n    }\n\n    #[test]\n    fn test_quadratic() {\n        let mut equation = Equation::&lt;Quadratic&gt;::default();\n        assert_eq!(Some(1), equation.next());\n        assert_eq!(Some(4), equation.next());\n        assert_eq!(Some(9), equation.next());\n    }\n}\n</code></pre><p>这个代码很好理解，但你可能会有疑问：这样做有什么好处么？为什么不构建两个数据结构 LinearEquation 和 QuadraticEquation，分别实现 Iterator 呢？</p><p>的确，对于这个例子，使用泛型的意义并不大，因为 Equation 自身没有很多共享的代码。但如果 Equation，只除了实现 Iterator 的逻辑不一样，其它大量的代码都是相同的，并且未来除了一次方程和二次方程，还会支持三次、四次……，那么，<strong>用泛型数据结构来统一相同的逻辑，用泛型参数的具体类型来处理变化的逻辑</strong>，就非常有必要了。</p><p>来看一个真实存在的例子<a href=\"https://docs.rs/async-prost/0.2.1/src/async_prost/reader.rs.html#26-31\">AsyncProstReader</a>，它来自之前我们在 KV server 里用过的 <a href=\"https://docs.rs/async-prost/0.2.1/async_prost/\">async-prost</a> 库。async-prost 库，可以把 TCP 或者其他协议中的 stream 里传输的数据，分成一个个 frame 处理。其中的 AsyncProstReader 为 AsyncDestination 和 AsyncFrameDestination 提供了不同的实现，你可以不用关心它具体做了些什么，只要学习它的接口的设计：</p><pre><code class=\"language-rust\">/// A marker that indicates that the wrapping type is compatible with `AsyncProstReader` with Prost support.\n#[derive(Debug)]\npub struct AsyncDestination;\n\n/// a marker that indicates that the wrapper type is compatible with `AsyncProstReader` with Framed support.\n#[derive(Debug)]\npub struct AsyncFrameDestination;\n\n/// A wrapper around an async reader that produces an asynchronous stream of prost-decoded values\n#[derive(Debug)]\npub struct AsyncProstReader&lt;R, T, D&gt; {\n    reader: R,\n    pub(crate) buffer: BytesMut,\n    into: PhantomData&lt;T&gt;,\n    dest: PhantomData&lt;D&gt;,\n}\n</code></pre><p>这个数据结构虽然使用了三个泛型参数，其实数据结构中真正用到的只有一个 R，它可以是一个实现了 AsyncRead 的数据结构（稍后会看到）。<strong>另外两个泛型参数 T 和 D，在数据结构定义的时候其实并不需要，只是在数据结构的实现过程中，才需要用到它们的约束</strong>。其中，</p><ul>\n<li>T 是从 R 中读取出的数据反序列化出来的类型，在实现时用 prost::Message 约束。</li>\n<li>D 是一个类型占位符，它会根据需要被具体化为 AsyncDestination 或者 AsyncFrameDestination。</li>\n</ul><p>类型参数 D 如何使用，我们可以先想像一下。实现 AsyncProstReader 的时候，我们希望在使用 AsyncDestination 时，提供一种实现，而在使用 AsyncFrameDestination 时，提供另一种实现。也就是说，这里的类型参数 D，在 impl 的时候，会被具体化成某个类型。</p><p>拿着这个想法，来看 AsyncProstReader 在实现 <a href=\"https://docs.rs/futures/0.3.17/futures/prelude/trait.Stream.html\">Stream</a> 时，D 是如何具体化的。这里你不用关心 Stream 具体是什么以及如何实现。实现的代码不重要，重要的是接口（<a href=\"https://docs.rs/async-prost/0.2.1/src/async_prost/reader.rs.html#81-105\">代码</a>）：</p><pre><code class=\"language-rust\">impl&lt;R, T&gt; Stream for AsyncProstReader&lt;R, T, AsyncDestination&gt;\nwhere\n    T: Message + Default,\n    R: AsyncRead + Unpin,\n{\n    type Item = Result&lt;T, io::Error&gt;;\n\n    fn poll_next(mut self: Pin&lt;&amp;mut Self&gt;, cx: &amp;mut Context&lt;'_&gt;) -&gt; Poll&lt;Option&lt;Self::Item&gt;&gt; {\n        ...\n    }\n}\n</code></pre><p>再看对另外一个对 D 的具体实现：</p><pre><code class=\"language-rust\">impl&lt;R, T&gt; Stream for AsyncProstReader&lt;R, T, AsyncFrameDestination&gt;\nwhere\n    R: AsyncRead + Unpin,\n    T: Framed + Default,\n{\n    type Item = Result&lt;T, io::Error&gt;;\n\n    fn poll_next(mut self: Pin&lt;&amp;mut Self&gt;, cx: &amp;mut Context&lt;'_&gt;) -&gt; Poll&lt;Option&lt;Self::Item&gt;&gt; {\n        ...\n    }\n}\n</code></pre><p>在这个例子里，除了 Stream 的实现不同外，AsyncProstReader 的其它实现都是共享的。所以我们有必要为其增加一个泛型参数 D，使其可以根据不同的 D 的类型，来提供不同的 Stream 实现。</p><p>AsyncProstReader 综合使用了泛型的三种用法，感兴趣的话你可以看源代码。如果你无法一下子领悟它的代码，也不必担心。很多时候，这样的高级技巧在阅读代码时用途会更大一些，起码你能搞明白别人的代码为什么这么写。至于自己写的时候是否要这么用，你可以根据自己掌握的程度来决定。</p><p>毕竟，<strong>我们写代码的首要目标是正确地实现所需要的功能</strong>，在正确性的前提下，优雅简洁的表达才有意义。</p><h2>泛型函数的高级技巧</h2><p>如果你掌握了泛型数据结构的基本使用方法，那么泛型函数并不复杂，因为在使用泛型参数和对泛型参数进行约束方面是一致的。</p><p>之前的课程中，我们已经在函数参数中多次使用泛型参数了，想必你已经有足够的掌握。关于泛型函数，我们讲两点，一是返回值如果想返回泛型参数，该怎么处理？二是对于复杂的泛型参数，该如何声明？</p><h3>返回值携带泛型参数怎么办？</h3><p>在 KV server 中，构建 Storage trait 的 get_iter 接口时，我们已经见到了这样的用法：</p><pre><code class=\"language-rust\">pub trait Storage {\n    ...\n    /// 遍历 HashTable，返回 kv pair 的 Iterator\n    fn get_iter(&amp;self, table: &amp;str) -&gt; \n\t\t    Result&lt;Box&lt;dyn Iterator&lt;Item = Kvpair&gt;&gt;, KvError&gt;;\n}\n</code></pre><p>对于 get_iter() 方法，并不关心返回值是一个什么样的 Iterator，只要它能够允许我们不断调用 next() 方法，获得一个 Kvpair 的结构，就可以了。在实现里，使用了 trait object。</p><p>你也许会有疑惑，为什么不能直接使用 impl Iterator 呢？</p><pre><code class=\"language-plain\">// 目前 trait 还不支持\nfn get_iter(&amp;self, table: &amp;str) -&gt; Result&lt;impl Iterator&lt;Item = Kvpair&gt;, KvError&gt;;\n</code></pre><p>原因是 Rust 目前还不支持在 trait 里使用 impl trait 做返回值：</p><pre><code class=\"language-rust\">pub trait ImplTrait {\n    // 允许\n    fn impl_in_args(s: impl Into&lt;String&gt;) -&gt; String {\n        s.into()\n    }\n\n    // 不允许\n    fn impl_as_return(s: String) -&gt; impl Into&lt;String&gt; {\n        s\n    }\n}\n</code></pre><p>那么使用泛型参数做返回值呢？可以，但是在实现的时候会很麻烦，你很难在函数中正确构造一个返回泛型参数的语句：</p><pre><code class=\"language-rust\">// 可以正确编译\npub fn generics_as_return_working(i: u32) -&gt; impl Iterator&lt;Item = u32&gt; {\n    std::iter::once(i)\n}\n\n// 期待泛型类型，却返回一个具体类型\npub fn generics_as_return_not_working&lt;T: Iterator&lt;Item = u32&gt;&gt;(i: u32) -&gt; T {\n    std::iter::once(i)\n}\n</code></pre><p>那怎么办？很简单，我们可以返回 trait object，它消除了类型的差异，把所有不同的实现 Iterator 的类型都统一到一个相同的 trait object 下：</p><pre><code class=\"language-rust\">// 返回 trait object\npub fn trait_object_as_return_working(i: u32) -&gt; Box&lt;dyn Iterator&lt;Item = u32&gt;&gt; {\n    Box::new(std::iter::once(i))\n}\n</code></pre><p>明白了这一点，回到刚才 KV server的 Storage trait：</p><pre><code class=\"language-rust\">pub trait Storage {\n    ...\n    /// 遍历 HashTable，返回 kv pair 的 Iterator\n    fn get_iter(&amp;self, table: &amp;str) -&gt; \n\t\t    Result&lt;Box&lt;dyn Iterator&lt;Item = Kvpair&gt;&gt;, KvError&gt;;\n}\n</code></pre><p>现在你是不是更好地理解了，在这个 trait 里，为何我们需要使用 Box&lt;dyn Iterator&lt;Item = Kvpair&gt;&gt; ？</p><p>不过使用 trait object 是有额外的代价的，首先这里有一次额外的堆分配，其次动态分派会带来一定的性能损失。</p><h3>复杂的泛型参数该如何处理？</h3><p>在泛型函数中，有时候泛型参数可以非常复杂。比如泛型参数是一个闭包，闭包返回一个 Iterator，Iterator 中的 Item 又有某个约束。看下面的示例代码：</p><pre><code class=\"language-rust\">pub fn comsume_iterator&lt;F, Iter,  T&gt;(mut f: F)\nwhere\n    F: FnMut(i32) -&gt; Iter, // F 是一个闭包，接受 i32，返回 Iter 类型\n    Iter: Iterator&lt;Item = T&gt;, // Iter 是一个 Iterator，Item 是 T 类型\n    T: std::fmt::Debug, // T 实现了 Debug trait\n{\n    // 根据 F 的类型，f(10) 返回 iterator，所以可以用 for 循环\n    for item in f(10) {\n        println!(\"{:?}\", item); // item 实现了 Debug trait，所以可以用 {:?} 打印\n    }\n}\n</code></pre><p>这个代码的泛型参数虽然非常复杂，不过一步步分解，其实并不难理解其实质：</p><ol>\n<li>参数 F 是一个闭包，接受 i32，返回 Iter 类型；</li>\n<li>参数 Iter 是一个 Iterator，Item 是 T 类型；</li>\n<li>参数 T 是一个实现了 Debug trait 的类型。</li>\n</ol><p>这么分解下来，我们就可以看到，为何这段代码能够编译通过，同时也可以写出合适的测试示例，来测试它：</p><pre><code class=\"language-rust\">#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_consume_iterator() {\n        // 不会 panic 或者出错\n        comsume_iterator(|i| (0..i).into_iter())\n    }\n}\n</code></pre><h2>小结</h2><p>泛型编程在 Rust 开发中占据着举足轻重的地位，几乎你写的每一段代码都或多或少会使用到泛型有关的结构，比如标准库的 Vec&lt;T&gt;、HashMap&lt;K, V&gt; 等。当我们自己构建数据结构和函数时要思考，是否使用泛型参数，让代码更加灵活、可扩展性更强。</p><p>当然，泛型编程也是一把双刃剑。任何时候，当我们引入抽象，即便能做到零成本抽象，要记得抽象本身也是一种成本。</p><p>当我们把代码抽象成函数、把数据结构抽象成泛型结构，即便运行时几乎并无添加额外成本，它还是会带来设计时的成本，如果抽象得不好，还会带来更大的维护上的成本。<strong>做系统设计，我们考虑 ROI（Return On Investment）时，要把 TCO（Total Cost of Ownership）也考虑进去</strong>。这也是为什么过度设计的系统和不做设计的系统，它们长期的 TCO 都非常糟糕。</p><p>建议你在自己的代码中使用复杂的泛型结构前，最好先做一些准备。</p><p>首先，自然是了解使用泛型的场景，以及主要的模式，就像本文介绍的那样；之后，可以多读别人的代码，多看优秀的系统，都是如何使用泛型来解决实际问题的。同时，不要着急把复杂的泛型引入到你自己的系统中，可以先多写一些小的、测试性质的代码，就像文中的那些示例代码一样，从小处着手，去更深入地理解泛型；</p><p>有了这些准备打底，最后在你的大型项目中，需要的时候引入自己的泛型数据结构或者函数，去解决实际问题。</p><h3>思考题</h3><p>如果你理解了今天讲的泛型的用法，那么阅读 <a href=\"https://docs.rs/futures/0.3.17\">futures</a> 库时，遇到类似的复杂泛型声明，比如说 <a href=\"https://docs.rs/futures/0.3.17/futures/stream/trait.StreamExt.html\">StreamExt</a> trait 的 <a href=\"https://docs.rs/futures/0.3.17/futures/stream/trait.StreamExt.html#method.for_each_concurrent\">for_each_concurrent</a>，你能搞明白它的参数 f 代表什么吗？你该怎么使用这个方法呢？</p><pre><code class=\"language-rust\">fn for_each_concurrent&lt;Fut, F&gt;(\n    self,\n    limit: impl Into&lt;Option&lt;usize&gt;&gt;,\n    f: F,\n) -&gt; ForEachConcurrent&lt;Self, Fut, F&gt;\nwhere\n    F: FnMut(Self::Item) -&gt; Fut,\n    Fut: Future&lt;Output = ()&gt;,\n    Self: Sized,\n{\n{ ... }\n</code></pre><p>今天你已经完成了Rust学习的第23次打卡。如果你觉得有收获，也欢迎你分享给身边的朋友，邀他一起讨论。我们下节课见。</p>","neighbors":{"left":{"article_title":"加餐｜期中测试：参考实现讲解","id":425015},"right":{"article_title":"24｜类型系统：如何在实战中使用trait object？","id":428018}},"comments":[{"had_liked":false,"id":317328,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1634742246,"is_pvip":false,"replies":[{"id":"115240","content":"👍 是的，非常厉害！这个 bug 我也是又看了一遍代码才发现。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1635121984,"ip_address":"","comment_id":317328,"utype":1}],"discussion_count":1,"race_medal":2,"score":"31699513318","product_id":100085301,"comment_content":"impl Iterator for Equation&lt;Quadratic&gt; 判断返回 None 的地方是不是应该写成 `if self.current &gt;= u16::MAX as u32`，不然会有逻辑错误。","like_count":8,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528767,"discussion_content":"👍 是的，非常厉害！这个 bug 我也是又看了一遍代码才发现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635121984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316700,"user_name":"Marvichov","can_delete":false,"product_type":"c1","uid":1111835,"ip_address":"","ucode":"7482099415C41C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","comment_is_top":false,"comment_ctime":1634518938,"is_pvip":false,"replies":[{"id":"114679","content":"👍","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1634537586,"ip_address":"","comment_id":316700,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23109355418","product_id":100085301,"comment_content":"和老师的对应下...<br><br>1. 使用泛型参数延迟数据结构的绑定；<br>2. 使用泛型参数和 PhantomData，声明数据结构中不直接使用，但在实现过程中需要用到的类型<br>3. 使用泛型参数让同一个数据结构对同一个 trait 可以拥有不同的实现。<br><br>1. 面向interface编程; 只不过静态多态<br>2. 引入自由参数 -&gt; 大部分impl共享; 剩下的, 根据自由参数类型的不同做template specialization -&gt; 比如tag struct -&gt; 本质还是代码共享<br>3. NewTypePattern; 一套代码给多个不同的type共用; 这个blog里面的例子比较生动: https:&#47;&#47;www.greyblake.com&#47;blog&#47;2021-10-11-phantom-types-in-rust&#47;; golang里面也经常用kilometer, mile来做例子, 类似于`type mile i32`;","like_count":6,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528463,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634537586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316685,"user_name":"Marvichov","can_delete":false,"product_type":"c1","uid":1111835,"ip_address":"","ucode":"7482099415C41C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","comment_is_top":false,"comment_ctime":1634510634,"is_pvip":false,"replies":[{"id":"114684","content":"我的理解是大部分时候 PhantomData 跟其它语言的 Phantom Type 是一个作用，为数据结构提供声明时没用用到，但在实现时需要用到的类型。因为这里你实实在在就只用 T 来保证类型的正确性，并没有涉及到 owership。<br><br>但在有些场合下，比如 Unique&lt;T&gt;，这里，如果没用 PhantomData&lt;T&gt;的话，你想想 Unique&lt;T&gt; 是否 own T？并不 own，因为 pointer 是一个指针类型，所以从类型上，Unique&lt;T&gt; 不 own T，但这里 Unique&lt;T&gt; 应该 own T 才对。所以 Rust 使用 PhantomData 来表述这个作用，见：https:&#47;&#47;github.com&#47;rust-lang&#47;rfcs&#47;blob&#47;master&#47;text&#47;0769-sound-generic-drop.md#phantom-data<br><br>```Rust<br>pub struct Unique&lt;T: ?Sized&gt; {<br>    pointer: *const T,<br>    _marker: PhantomData&lt;T&gt;,<br>}<br>```<br><br>这属于 PhantomData 的高级用法，大部分时候我们用类型系统解决问题需要使用 PhantomData 时，都是大家在其他语言中惯常的用法，所以我没有提这个 owership 的用法。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1634539075,"ip_address":"","comment_id":316685,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14519412522","product_id":100085301,"comment_content":"Cpp里面用tag和多generic param的例子也很多…<br><br>比如Cpp的iterator, 多个泛型做参数, 不需要PhantomData; <br><br>    template&lt;<br>        class Category,  &#47;&#47; tag data, 类似于 AsyncProstReader D<br>        class T,<br>        class Distance = std::ptrdiff_t,<br>        class Pointer = T*,<br>        class Reference = T&amp;<br>    &gt; struct iterator;<br><br>所以, 感觉PhantomData的主要用途是compile time ownership check;<br><br>我的疑问也就主要集中在ownership...<br><br>问题1:<br><br>from PhantomData doc:<br>&gt; Adding a PhantomData field to your type tells the compiler that your type acts as though it stores a value of type T, even though it doesn’t really. <br><br>不太明白, 为啥需要ownership. 比如AsyncProstReader的T是约束R的return type的, 按理说不用own T;  而且into和dest member全程没被调用过<br><br><br>    &#47;&#47;&#47; A wrapper around an async reader that produces an asynchronous stream of prost-decoded values<br>    #[derive(Debug)]<br>    pub struct AsyncProstReader&lt;R, T, D&gt; {<br>        reader: R,<br>        pub(crate) buffer: BytesMut,<br>        into: PhantomData&lt;T&gt;,<br>        dest: PhantomData&lt;D&gt;,<br>    }<br><br>如果不需要对T, D的ownership, 为啥不来个`PhantomDataNotOwned`来满足这样的场景: 不需要ownership, 但是这个generic type T不是多余的呢?<br><br>----<br><br>问题2:<br><br>&gt; This information is used when computing certain safety properties.<br><br>这句目前理解不了…假设对T有ownership, 没看出有啥特殊的safety需求<br>","like_count":4,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528458,"discussion_content":"我的理解是大部分时候 PhantomData 跟其它语言的 Phantom Type 是一个作用，为数据结构提供声明时没用用到，但在实现时需要用到的类型。因为这里你实实在在就只用 T 来保证类型的正确性，并没有涉及到 owership。\n\n但在有些场合下，比如 Unique&amp;lt;T&amp;gt;，这里，如果没用 PhantomData&amp;lt;T&amp;gt;的话，你想想 Unique&amp;lt;T&amp;gt; 是否 own T？并不 own，因为 pointer 是一个指针类型，所以从类型上，Unique&amp;lt;T&amp;gt; 不 own T，但这里 Unique&amp;lt;T&amp;gt; 应该 own T 才对。所以 Rust 使用 PhantomData 来表述这个作用，见：https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md#phantom-data\n\n```Rust\npub struct Unique&amp;lt;T: ?Sized&amp;gt; {\n    pointer: *const T,\n    _marker: PhantomData&amp;lt;T&amp;gt;,\n}\n```\n\n这属于 PhantomData 的高级用法，大部分时候我们用类型系统解决问题需要使用 PhantomData 时，都是大家在其他语言中惯常的用法，所以我没有提这个 owership 的用法。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1634539075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111835,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","nickname":"Marvichov","note":"","ucode":"7482099415C41C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405541,"discussion_content":"感谢老师🙏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634573347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344926,"user_name":"A.Y.","can_delete":false,"product_type":"c1","uid":2029589,"ip_address":"","ucode":"7A9701DD436547","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f8/15/2724d7ec.jpg","comment_is_top":false,"comment_ctime":1651880966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5946848262","product_id":100085301,"comment_content":"关于第三点使用场景，似乎可以用于替代其他面向对象语言中有而rust不支持的类继承。","like_count":1},{"had_liked":false,"id":357067,"user_name":"🐲礁sir","can_delete":false,"product_type":"c1","uid":1016004,"ip_address":"四川","ucode":"6AF330B5B9C2CC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/c4/1c0e3b84.jpg","comment_is_top":false,"comment_ctime":1662903654,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1662903654","product_id":100085301,"comment_content":"终于明白substrate的frame&#47;executiv&#47;src&#47;lib.rs里面这段代码的用意：","like_count":0,"discussions":[{"author":{"id":1016004,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/80/c4/1c0e3b84.jpg","nickname":"🐲礁sir","note":"","ucode":"6AF330B5B9C2CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587371,"discussion_content":"上次评论没有贴成功，这里加一下：\n\npub struct Executive&lt;\n    System,\n    Block,\n    Context,\n    UnsignedValidator,\n    AllPalletsWithSystem,\n    OnRuntimeUpgrade = (),\n&gt;(\n    PhantomData&lt;(\n        System,\n        Block,\n        Context,\n        UnsignedValidator,\n        AllPalletsWithSystem,\n        OnRuntimeUpgrade,\n    )&gt;,\n);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662997826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354510,"user_name":"zahi","can_delete":false,"product_type":"c1","uid":1447887,"ip_address":"北京","ucode":"F64ABEB63C6D1F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIofiaCAziajdQnbvrfpEkpCKVFgO62y6zicamhjF1BAWZSRcCVaTBXLIerLsGeZCic7XS7KOEkTN4fRg/132","comment_is_top":false,"comment_ctime":1660478150,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1660478150","product_id":100085301,"comment_content":"phantom type 的例子，感觉像java中的继承。","like_count":0},{"had_liked":false,"id":345857,"user_name":"Geek_7c0961","can_delete":false,"product_type":"c1","uid":2277181,"ip_address":"","ucode":"B1482E64FF9E4E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ8aLz0tWdsZuMiaNUAd0dicSD9M6A77seMGFdHgvsQwOzN8ztYPiaJSo53DcbjQWUQpw4pf4rI2f7vg/132","comment_is_top":false,"comment_ctime":1652641224,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652641224","product_id":100085301,"comment_content":"老师现在implement trait 用在返回值的类型了,那么 trait obejct还有什么用处么?它的性能那么差.<br>https:&#47;&#47;doc.rust-lang.org&#47;rust-by-example&#47;trait&#47;impl_trait.html","like_count":0},{"had_liked":false,"id":330926,"user_name":"渡鸦10086","can_delete":false,"product_type":"c1","uid":2491000,"ip_address":"","ucode":"58D72C8B5E9B98","user_header":"https://static001.geekbang.org/account/avatar/00/26/02/78/4d40b4b2.jpg","comment_is_top":false,"comment_ctime":1642303432,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642303432","product_id":100085301,"comment_content":"关于思考题：<br>f 是一个闭包，以 `Self::Item` 类型作为输入，以一个实现了 `Future` trait 的类型 Fut 作为输出，其中`Future` 的关联类型 `Output` 是 unit 类型","like_count":0},{"had_liked":false,"id":318810,"user_name":"Custer","can_delete":false,"product_type":"c1","uid":1020822,"ip_address":"","ucode":"8AEA5544C94D57","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/96/575d42c3.jpg","comment_is_top":false,"comment_ctime":1635431584,"is_pvip":true,"replies":[{"id":"116407","content":"👍","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1636558021,"ip_address":"","comment_id":318810,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635431584","product_id":100085301,"comment_content":"1. 参数 F 是一个闭包，接收 Self::Item,返回 Fut 类型；<br>2. 参数 Fut 是一个 Future&lt;Output=()&gt;;<br><br>所以 f 是一个闭包接收 Self::Item 闭包的返回值是 Future&lt;Output=()&gt;<br><br>使用参考源代码：<br><br>```rust<br>.for_each_concurrent(<br>    &#47;* limit *&#47; 2,<br>    |rx| async move {<br>        rx.await.unwrap();<br>    }<br>)<br>```<br>","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529386,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636558021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}