{"id":108576,"title":"10 | Widget中的State到底是什么？","content":"<p>你好，我是陈航。</p><p>通过上一篇文章，我们已经深入理解了Widget是Flutter构建界面的基石，也认识了Widget、Element、RenderObject是如何互相配合，实现图形渲染工作的。Flutter在底层做了大量的渲染优化工作，使得我们只需要通过组合、嵌套不同类型的Widget，就可以构建出任意功能、任意复杂度的界面。</p><p>同时，我们通过前面的学习，也已经了解到Widget有StatelessWidget和StatefulWidget两种类型。StatefulWidget应对有交互、需要动态变化视觉效果的场景，而StatelessWidget则用于处理静态的、无状态的视图展示。StatefulWidget的场景已经完全覆盖了StatelessWidget，因此我们在构建界面时，往往会大量使用StatefulWidget来处理静态的视图展示需求，看起来似乎也没什么问题。</p><p>那么，StatelessWidget存在的必要性在哪里？StatefulWidget是否是Flutter中的万金油？在今天这篇文章中，我将着重和你介绍这两种类型的区别，从而帮你更好地理解Widget，掌握不同类型Widget的正确使用时机。</p><!-- [[[read_end]]] --><h2>UI编程范式</h2><p>要想理解StatelessWidget与StatefulWidget的使用场景，我们首先需要了解，在Flutter中，如何调整一个控件（Widget）的展示样式，即UI编程范式。</p><p>如果你有过原生系统（Android、iOS）或原生JavaScript开发经验的话，应该知道视图开发是命令式的，需要精确地告诉操作系统或浏览器用何种方式去做事情。比如，如果我们想要变更界面的某个文案，则需要找到具体的文本控件并调用它的控件方法命令，才能完成文字变更。</p><p>下述代码分别展示了在Android、iOS及原生Javascript中，如何将一个文本控件的展示文案更改为Hello World：</p><pre><code>// Android设置某文本控件展示文案为Hello World\nTextView textView = (TextView) findViewById(R.id.txt);\ntextView.setText(&quot;Hello World&quot;);\n\n// iOS设置某文本控件展示文案为Hello World\nUILabel *label = (UILabel *)[self.view viewWithTag:1234];\nlabel.text = @&quot;Hello World&quot;;\n\n// 原生JavaScript设置某文本控件展示文案为Hello World\ndocument.querySelector(&quot;#demo&quot;).innerHTML = &quot;Hello World!&quot;;\n</code></pre><p>与此不同的是，<strong>Flutter的视图开发是声明式的，其核心设计思想就是将视图和数据分离，这与React的设计思路完全一致</strong>。</p><p>对我们来说，如果要实现同样的需求，则要稍微麻烦点：除了设计好Widget布局方案之外，还需要提前维护一套文案数据集，并为需要变化的Widget绑定数据集中的数据，使Widget根据这个数据集完成渲染。</p><p>但是，当需要变更界面的文案时，我们只要改变数据集中的文案数据，并通知Flutter框架触发Widget的重新渲染即可。这样一来，开发者将无需再精确关注UI编程中的各个过程细节，只要维护好数据集即可。比起命令式的视图开发方式需要挨个设置不同组件（Widget）的视觉属性，这种方式要便捷得多。</p><p><strong>总结来说，命令式编程强调精确控制过程细节；而声明式编程强调通过意图输出结果整体。</strong>对应到Flutter中，意图是绑定了组件状态的State，结果则是重新渲染后的组件。在Widget的生命周期内，应用到State中的任何更改都将强制Widget重新构建。</p><p>其中，对于组件完成创建后就无需变更的场景，状态的绑定是可选项。这里“可选”就区分出了Widget的两种类型，即：StatelessWidget不带绑定状态，而StatefulWidget带绑定状态。<strong>当你所要构建的用户界面不随任何状态信息的变化而变化时，需要选择使用StatelessWidget，反之则选用StatefulWidget。</strong>前者一般用于静态内容的展示，而后者则用于存在交互反馈的内容呈现中。</p><p>接下来，我分别和你介绍StatelessWidget和StatefulWidget，从源码分析它们的区别，并总结一些关于Widget选型的基本原则。</p><h2>StatelessWidget</h2><p>在Flutter中，Widget采用由父到子、自顶向下的方式进行构建，父Widget控制着子Widget的显示样式，其样式配置由父Widget在构建时提供。</p><p>用这种方式构建出的Widget，有些（比如Text、Container、Row、Column等）在创建时，除了这些配置参数之外不依赖于任何其他信息，换句话说，它们一旦创建成功就不再关心、也不响应任何数据变化进行重绘。在Flutter中，<strong>这样的Widget被称为StatelessWidget（无状态组件）</strong>。</p><p>这里有一张StatelessWidget的示意图，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/cc/3ec97a9f584132c2bcdbca60fd2888cc.png?wh=442*422\" alt=\"\"></p><center><span class=\"reference\">图1 StatelessWidget 示意图</span></center><p>接下来，我以Text的部分源码为例，和你说明StatelessWidget的构建过程。</p><pre><code>class Text extends StatelessWidget {     \n  //构造方法及属性声明部分\n  const Text(this.data, {\n    Key key,\n    this.textAlign,\n    this.textDirection,\n    //其他参数\n    ...\n  }) : assert(data != null),\n     textSpan = null,\n     super(key: key);\n     \n  final String data;\n  final TextAlign textAlign;\n  final TextDirection textDirection;\n  //其他属性\n  ...\n  \n  @override\n  Widget build(BuildContext context) {\n    ...\n    Widget result = RichText(\n       //初始化配置\n       ...\n      )\n    );\n    ...\n    return result;\n  }\n}\n</code></pre><p>可以看到，在构造方法将其属性列表赋值后，build方法随即将子组件RichText通过其属性列表（如文本data、对齐方式textAlign、文本展示方向textDirection等）初始化后返回，之后Text内部不再响应外部数据的变化。</p><p>那么，什么场景下应该使用StatelessWidget呢？</p><p>这里，我有一个简单的判断规则：<strong>父Widget是否能通过初始化参数完全控制其UI展示效果？</strong>如果能，那么我们就可以使用StatelessWidget来设计构造函数接口了。</p><p>我准备了两个简单的小例子，来帮助你理解这个判断规则。</p><p>第一个小例子是，我需要创建一个自定义的弹窗控件，把使用App过程中出现的一些错误信息提示给用户。这个组件的父Widget，能够完全在子Widget初始化时将组件所需要的样式信息和错误提示信息传递给它，也就意味着父Widget通过初始化参数就能完全控制其展示效果。所以，我可以采用继承StatelessWidget的方式，来进行组件自定义。</p><p>第二个小例子是，我需要定义一个计数器按钮，用户每次点击按钮后，按钮颜色都会随之加深。可以看到，这个组件的父Widget只能控制子Widget初始的样式展示效果，而无法控制在交互过程中发生的颜色变化。所以，我无法通过继承StatelessWidget的方式来自定义组件。那么，这个时候就轮到StatefulWidget出场了。</p><h2>StatefulWidget</h2><p>与StatelessWidget相对应的，有一些Widget（比如Image、Checkbox）的展示，除了父Widget初始化时传入的静态配置之外，还需要处理用户的交互（比如，用户点击按钮）或其内部数据的变化（比如，网络数据回包），并体现在UI上。</p><p>换句话说，这些Widget创建完成后，还需要关心和响应数据变化来进行重绘。在Flutter中，<strong>这一类Widget被称为StatefulWidget（有状态组件）</strong>。这里有一张StatefulWidget的示意图，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/f6/8ae7bf36f618a999da8847cbb4da4bf6.png?wh=762*502\" alt=\"\"></p><center><span class=\"reference\">图2 StatefulWidget 示意图</span></center><p>看到这里，你可能有点困惑了。因为，我在上一篇文章“Widget，构建Flutter界面的基石”中和你分享到，Widget是不可变的，发生变化时需要销毁重建，所以谈不上状态。那么，这到底是怎么回事呢？</p><p>其实，StatefulWidget是以State类代理Widget构建的设计方式实现的。接下来，我就以Image的部分源码为例，和你说明StatefulWidget的构建过程，来帮助你理解这个知识点。</p><p>和上面提到的Text一样，Image类的构造函数会接收要被这个类使用的属性参数。然而，不同的是，Image类并没有build方法来创建视图，而是通过createState方法创建了一个类型为_ImageState的state对象，然后由这个对象负责视图的构建。</p><p>这个state对象持有并处理了Image类中的状态变化，所以我就以_imageInfo属性为例来和你展开说明。</p><p>_imageInfo属性用来给Widget加载真实的图片，一旦State对象通过_handleImageChanged方法监听到_imageInfo属性发生了变化，就会立即调用_ImageState类的setState方法通知Flutter框架：“我这儿的数据变啦，请使用更新后的_imageInfo数据重新加载图片！”。而，Flutter框架则会标记视图状态，更新UI。</p><pre><code>class Image extends StatefulWidget {\n  //构造方法及属性声明部分\n  const Image({\n    Key key,\n    @required this.image,\n    //其他参数\n  }) : assert(image != null),\n       super(key: key);\n\n  final ImageProvider image;\n  //其他属性\n  ...\n  \n  @override\n  _ImageState createState() =&gt; _ImageState();\n  ...\n}\n\nclass _ImageState extends State&lt;Image&gt; {\n  ImageInfo _imageInfo;\n  //其他属性\n  ...\n\n  void _handleImageChanged(ImageInfo imageInfo, bool synchronousCall) {\n    setState(() {\n      _imageInfo = imageInfo;\n    });\n  }\n  ...\n  @override\n  Widget build(BuildContext context) {\n    final RawImage image = RawImage(\n      image: _imageInfo?.image,\n      //其他初始化配置\n      ...\n    );\n    return image;\n  }\n ...\n}\n</code></pre><p>可以看到，在这个例子中，Image以一种动态的方式运行：监听变化，更新视图。与StatelessWidget通过父Widget完全控制UI展示不同，StatefulWidget的父Widget仅定义了它的初始化状态，而其自身视图运行的状态则需要自己处理，并根据处理情况即时更新UI展示。</p><p>好了，至此我们已经通过StatelessWidget与StatefulWidget的源码，理解了这两种类型的Widget。这时，你可能会问，既然StatefulWidget不仅可以响应状态变化，又能展示静态UI，那么StatelessWidget这种只能展示静态UI的Widget，还有存在的必要吗？</p><h2>StatefulWidget不是万金油，要慎用</h2><p>对于UI框架而言，同样的展示效果一般可以通过多种控件实现。从定义来看，StatefulWidget仿佛是万能的，替代StatelessWidget看起来合情合理。于是StatefulWidget的滥用，也容易因此变得顺理成章，难以避免。</p><p>但事实是，StatefulWidget的滥用会直接影响Flutter应用的渲染性能。</p><p>接下来，在今天这篇文章的最后，我就再带你回顾一下Widget的更新机制，来帮你意识到完全使用StatefulWidget的代价：</p><blockquote>\n<p>Widget是不可变的，更新则意味着销毁+重建（build）。StatelessWidget是静态的，一旦创建则无需更新；而对于StatefulWidget来说，在State类中调用setState方法更新数据，会触发视图的销毁和重建，也将间接地触发其每个子Widget的销毁和重建。</p>\n</blockquote><p>那么，这意味着什么呢？</p><p>如果我们的根布局是一个StatefulWidget，在其State中每调用一次更新UI，都将是一整个页面所有Widget的销毁和重建。</p><p>在上一篇文章中，我们了解到，虽然Flutter内部通过Element层可以最大程度地降低对真实渲染视图的修改，提高渲染效率，而不是销毁整个RenderObject树重建。但，大量Widget对象的销毁重建是无法避免的。如果某个子Widget的重建涉及到一些耗时操作，那页面的渲染性能将会急剧下降。</p><p>因此，<strong>正确评估你的视图展示需求，避免无谓的StatefulWidget使用，是提高Flutter应用渲染性能最简单也是最直接的手段</strong>。</p><p>在接下来的第29篇文章“为什么需要做状态管理，怎么做？”中，我会继续带你学习StatefulWidget常见的几种状态管理方法，与你更为具体地介绍在不同场景中，该选用何种Widget的基本原则。这些原则，你都可以根据实际需要应用到后续工作中。</p><h2>总结</h2><p>好了，今天关于StatelessWidget与StatefulWidget的介绍，我们就到这里了。我们一起来回顾下今天的主要知识点。</p><p>首先，我带你了解了Flutter基于声明式的UI编程范式，并通过阅读两个典型Widget（Text与Image）源码的方式，与你一起学习了StatelessWidget与StatefulWidget的基本设计思路。</p><p>由于Widget采用由父到子、自顶向下的方式进行构建，因此在自定义组件时，我们可以根据父Widget是否能通过初始化参数完全控制其UI展示效果的基本原则，来判断究竟是继承StatelessWidget还是StatefulWidget。</p><p>然后，针对StatefulWidget的“万金油”误区，我带你重新回顾了Widget的UI更新机制。尽管Flutter会通过Element层去最大程度降低对真实渲染视图的修改，但大量的Widget销毁重建无法避免，因此避免StatefulWidget的滥用，是最简单、直接地提升应用渲染性能的手段。</p><p>需要注意的是，除了我们主动地通过State刷新UI之外，在一些特殊场景下，Widget的build方法有可能会执行多次。因此，我们不应该在这个方法内部，放置太多有耗时的操作。而关于这个build方法在哪些场景下会执行，以及为什么会执行多次，我会在下一篇文章“提到生命周期，我们是在说什么？”中，与你一起详细分析。</p><h2>思考题</h2><p>Flutter工程应用模板是计数器示例应用Demo，这个Demo的根节点是一个StatelessWidget。请在保持原有功能的情况下，将这个Demo改造为根节点为StatefulWidget的App。你能通过数据打点，得出这两种方式的性能差异吗？</p><p>欢迎你在评论区给我留言分享你的观点，我会在下一篇文章中等待你！感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":116103,"user_name":"加温后的啤酒","can_delete":false,"product_type":"c1","uid":1344488,"ip_address":"","ucode":"5F30978CDB1606","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/e8/f726c635.jpg","comment_is_top":false,"comment_ctime":1563786302,"is_pvip":false,"replies":[{"id":"42439","content":"实际上你即使不去主动setState，对于Stateful在特定的时机也会rebuild的。具体可以参看下一篇文章","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563794492,"ip_address":"","comment_id":116103,"utype":1}],"discussion_count":2,"race_medal":0,"score":"151887641662","product_id":100031001,"comment_content":"老师，有一个疑问没有理解。你文中提到如果根布局是StatefulWidget，如果调用setState,就会触发子widet的销毁和重建，影响性能。但是在真实业务场景中，我把跟控制器写成StatefulWidget，但我默认他是不可变的，所以我肯定不会主动去调用setState方法啊，那如果我不主动调用setState的话，那不就不会有应能影响了吗。这没法说明StatelessWidget的存在是必要的的？？老师能解释一下吗？","like_count":36,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459384,"discussion_content":"实际上你即使不去主动setState，对于Stateful在特定的时机也会rebuild的。具体可以参看下一篇文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563794492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1031075,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bb/a3/af469d27.jpg","nickname":"Qilin Lou","note":"","ucode":"29AD43329E7404","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2666,"discussion_content":"好问题 @wuqh","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563850070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115463,"user_name":"JakePrim","can_delete":false,"product_type":"c1","uid":1151981,"ip_address":"","ucode":"ACA227B7610D84","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/ed/9cc44242.jpg","comment_is_top":false,"comment_ctime":1563593690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83167972314","product_id":100031001,"comment_content":"就喜欢这种讲解加举例的方式，非常清晰","like_count":19},{"had_liked":false,"id":115759,"user_name":"Mr.J","can_delete":false,"product_type":"c1","uid":1267172,"ip_address":"","ucode":"372D8C614F6C3D","user_header":"https://static001.geekbang.org/account/avatar/00/13/55/e4/7061abd5.jpg","comment_is_top":false,"comment_ctime":1563720390,"is_pvip":false,"replies":[{"id":"42273","content":"是的","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563727893,"ip_address":"","comment_id":115759,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44513393350","product_id":100031001,"comment_content":"构建界面时，抛开业务，光看界面，把界面按层次拆分，需要动态更新的地方，用Stateful，然后将其统一放在Stateless中，做到例如在一个小区域中，根布局也是Stateless，其中有一个控件为stateful，刷新时只刷新这个小部分，这样吗老师","like_count":10,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459275,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563727893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136821,"user_name":"JW","can_delete":false,"product_type":"c1","uid":1180823,"ip_address":"","ucode":"1078B9415C1176","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/97/80740db0.jpg","comment_is_top":false,"comment_ctime":1569536551,"is_pvip":false,"replies":[{"id":"54211","content":"1.Widget通知Element重建的触发时机，可以参考第11篇生命周期的分享。<br>2.一旦Widget触发重建，Element会根据重建前后Widget树的渲染类型及属性变化情况，决定后续的复用、新建过程：比如Widget树中仅仅是调整了一个渲染样式，Flutter会通知Element直接复用现有节点，同步属性至RenderObject，触发绘制即可；如果Widget树中涉及到Widget类型的替换或变更，Flutter则会将老的Element及RenderObject摘除，让新的Widget重新走一遍创建Element和RenderObject的流程，挂载到Element树和RenderObject树上。","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1570855538,"ip_address":"","comment_id":136821,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31634307623","product_id":100031001,"comment_content":"Element是Widget层的一个抽象用来处理真正需要重建的的Widget，它是如何来决定谁要重建谁不要重建的逻辑的？","like_count":8,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468810,"discussion_content":"1.Widget通知Element重建的触发时机，可以参考第11篇生命周期的分享。\n2.一旦Widget触发重建，Element会根据重建前后Widget树的渲染类型及属性变化情况，决定后续的复用、新建过程：比如Widget树中仅仅是调整了一个渲染样式，Flutter会通知Element直接复用现有节点，同步属性至RenderObject，触发绘制即可；如果Widget树中涉及到Widget类型的替换或变更，Flutter则会将老的Element及RenderObject摘除，让新的Widget重新走一遍创建Element和RenderObject的流程，挂载到Element树和RenderObject树上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570855538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115462,"user_name":"(☆_☆)","can_delete":false,"product_type":"c1","uid":1170983,"ip_address":"","ucode":"1D21F9E12EE3A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/27/699c274c.jpg","comment_is_top":false,"comment_ctime":1563593436,"is_pvip":false,"replies":[{"id":"42277","content":"是的","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563727981,"ip_address":"","comment_id":115462,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31628364508","product_id":100031001,"comment_content":"简单来说StatelessWidget就是为了提升性能而被设计出来，而完全使用StatefulWidget可能对性能有影响，所以在使用前一定要评估一下用哪个比较合适，这样理解对吗？","like_count":7,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459119,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563727981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313837,"user_name":"Lgh","can_delete":false,"product_type":"c1","uid":2633163,"ip_address":"","ucode":"FB09D6E4ACA118","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/uyyCHGeo0gayHkjPqr5wlcB0BulhNwkSHkvq0vWOvRlArTBb4dGTE8kvtJzAbbNkwZreiab3Mq1BibayhfujU4Ww/132","comment_is_top":false,"comment_ctime":1632705483,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14517607371","product_id":100031001,"comment_content":"有个比较尴尬的问题，我想问问老师，为什么text是statelesswidget？Text的文案变化不应该属于可变的吗？","like_count":3,"discussions":[{"author":{"id":1177609,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f8/09/bc308b38.jpg","nickname":"小贺贺","note":"","ucode":"3099AD93BE99C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579981,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657787262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123812,"user_name":"、轻","can_delete":false,"product_type":"c1","uid":1625453,"ip_address":"","ucode":"30713196ED1AA6","user_header":"https://static001.geekbang.org/account/avatar/00/18/cd/6d/928b0ffd.jpg","comment_is_top":false,"comment_ctime":1565766265,"is_pvip":false,"replies":[{"id":"45386","content":"是类似的概念","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1565775838,"ip_address":"","comment_id":123812,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14450668153","product_id":100031001,"comment_content":"这两个widget与react中的容器和组件很类似","like_count":3,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462824,"discussion_content":"是类似的概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565775838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120824,"user_name":"格格","can_delete":false,"product_type":"c1","uid":1137499,"ip_address":"","ucode":"10D1D9EB44C0C2","user_header":"https://static001.geekbang.org/account/avatar/00/11/5b/5b/75f4a04f.jpg","comment_is_top":false,"comment_ctime":1565002058,"is_pvip":false,"replies":[{"id":"44442","content":"确实，1.5还有，1.7已经把这个方法替换掉了。","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1565019281,"ip_address":"","comment_id":120824,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14449903946","product_id":100031001,"comment_content":"现在Image里已经找不到_handleImageChanged方法了，好像被_handleImageFrame取代了","like_count":3,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461497,"discussion_content":"确实，1.5还有，1.7已经把这个方法替换掉了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565019281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118868,"user_name":"承香墨影","can_delete":false,"product_type":"c1","uid":1023750,"ip_address":"","ucode":"4D6A4D6E1ED29F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/06/287d77dd.jpg","comment_is_top":false,"comment_ctime":1564454930,"is_pvip":false,"replies":[{"id":"43930","content":"不是的哈。<br><br>1.重绘边界是解决同层Widget（有兄弟、有父子）之间渲染依赖出现的概念：即只要他们享用了同一个layer，则无论哪一个需要重绘，整个layer都会受到影响。<br>2.StatefulWidget则影响的是其子节点，一般情况下只影响重建，Element会在底层做diff，确保没有修改的不会重绘","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1564677597,"ip_address":"","comment_id":118868,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14449356818","product_id":100031001,"comment_content":"老师，你好，有个疑问希望解答。<br>既然 StatefulWidget 需要区分场景来使用，并且 Widget 的销毁和重建应该是 Flutter 的常态。那么在使用中，应该将 StatefulWidget 尽量的拆小，让其影响范围，尽可能的小。<br>这是不是就对应到 “04 | Flutter 区别于其他方案的关键技术是什么” 中讲到的 布局边界 和 重绘边界 概念。其实在实际代码中，是依赖 StatelessWidget 进行设定边界，从而隔离布局和重绘的？","like_count":3,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460626,"discussion_content":"不是的哈。\n\n1.重绘边界是解决同层Widget（有兄弟、有父子）之间渲染依赖出现的概念：即只要他们享用了同一个layer，则无论哪一个需要重绘，整个layer都会受到影响。\n2.StatefulWidget则影响的是其子节点，一般情况下只影响重建，Element会在底层做diff，确保没有修改的不会重绘","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564677597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123513,"user_name":"矮个子先生😝","can_delete":false,"product_type":"c1","uid":1147205,"ip_address":"","ucode":"2242A457B0E10D","user_header":"https://static001.geekbang.org/account/avatar/00/11/81/45/9aa91b75.jpg","comment_is_top":false,"comment_ctime":1565690382,"is_pvip":false,"replies":[{"id":"46706","content":"1.key用在Element复用过程中，控制控件如何取代树中的另一个控件。比如你在父Widget用新的image重建了Image，底层Element还是能复用的。<br>2.assert是断言，只在debug中生效。<br>3.super我们在Dart里面讲过，是调用父类的构造方法<br>","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566381430,"ip_address":"","comment_id":123513,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10155624974","product_id":100031001,"comment_content":"```<br>  const Image({<br>    Key key,<br>    @required this.image,<br>    &#47;&#47; 其他参数<br>  }) : assert(image != null),<br>       super(key: key);<br>```<br>老师可以介绍下这个构造方法吗, 第一个Key key, : assert(image != null),super(key: key); 这三部分","like_count":2,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462704,"discussion_content":"1.key用在Element复用过程中，控制控件如何取代树中的另一个控件。比如你在父Widget用新的image重建了Image，底层Element还是能复用的。\n2.assert是断言，只在debug中生效。\n3.super我们在Dart里面讲过，是调用父类的构造方法\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566381430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115845,"user_name":"G","can_delete":false,"product_type":"c1","uid":1547293,"ip_address":"","ucode":"50D8E1ADAE0330","user_header":"https://static001.geekbang.org/account/avatar/00/17/9c/1d/34c96367.jpg","comment_is_top":false,"comment_ctime":1563757107,"is_pvip":false,"replies":[{"id":"42656","content":"靠类型和key","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563895973,"ip_address":"","comment_id":115845,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10153691699","product_id":100031001,"comment_content":"我查了下资料，好像是说虽然widget是不可变的，但是state是可变的，也就是说state实例会被复用，并且在setstate重新生成widget树时会检查节点是否有变化，没有变化就停止遍历。另外我认为stateful的实例相比stateless更轻，毕竟没有build方法。<br>Ps: 在递归下降生成子树的时候，我有个疑问，flutter如何判断子树一样呢？算法是如何的？","like_count":2,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459312,"discussion_content":"靠类型和key","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563895973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049741,"avatar":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","nickname":"weineel","note":"","ucode":"6DC6EF4F256A53","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2651,"discussion_content":"stateless有build方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563844870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170640,"user_name":"曾家二女婿","can_delete":false,"product_type":"c1","uid":1653754,"ip_address":"","ucode":"99B7FFD1C71E47","user_header":"https://static001.geekbang.org/account/avatar/00/19/3b/fa/2cebefff.jpg","comment_is_top":false,"comment_ctime":1578648562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873615858","product_id":100031001,"comment_content":"【思考题】<br>void main() =&gt; runApp(MyApp());<br><br>class MyApp extends StatefulWidget {<br>  MyApp({Key key}) : super(key: key);<br>  @override<br>  _MyApp createState() =&gt; _MyApp();<br>}<br><br>class _MyApp extends State&lt;MyApp&gt; {<br>  bool check = true;<br>  void _updateIndeView() {<br>    setState(() {<br>      check = !check;<br>    });<br>  }<br><br>  @override<br>  Widget build(BuildContext context) {<br>    return MaterialApp(<br>      title: &#39;Flutter Demo&#39;,<br>      &#47;&#47; 应用的名字<br>      theme: ThemeData(<br>        &#47;&#47; 蓝色主题<br>        primarySwatch: Colors.red,<br>      ),<br>      &#47;&#47; 首页路由<br>      home: Scaffold(<br>        &#47;&#47; 点击 切换 主页<br>        body: Container(<br>          child: InkWell(<br>            onTap: _updateIndeView,<br>            child: check ? MyHomePage(title: &#39;Flutter Demo Home Page&#39;) : _MyHomePageDemo(),<br>          )<br>          &#47;&#47; check ? MyHomePage(title: &#39;Flutter Demo Home Page&#39;) : _MyHomePageDemo(),<br>        ),<br>      ),<br>    );<br>  }<br>}","like_count":1},{"had_liked":false,"id":151325,"user_name":"Captain","can_delete":false,"product_type":"c1","uid":1595885,"ip_address":"","ucode":"57B4E60ABA60AF","user_header":"https://static001.geekbang.org/account/avatar/00/18/59/ed/15465917.jpg","comment_is_top":false,"comment_ctime":1573699160,"is_pvip":false,"replies":[{"id":"58651","content":"“但，大量的Widget对象的销毁重建是无法避免的”","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1574059833,"ip_address":"","comment_id":151325,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5868666456","product_id":100031001,"comment_content":"有个问题请教“虽然 Flutter 内部通过 Element 层可以最大程度地降低对真实渲染视图的修改，提高渲染效率，而不是销毁整个 RenderObject 树重建。但，大量 Widget 对象的销毁重建是无法避免的”这里 如果根节点用了Stateful，根节点setState，来改变其中变化的子节点状态（子节点状态中没有耗时操作），那Element会帮助diff出变化的子节点，避免重新构建，这样也不影响性能呀？","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474437,"discussion_content":"“但，大量的Widget对象的销毁重建是无法避免的”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574059833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121748,"user_name":"严旭珺","can_delete":false,"product_type":"c1","uid":1115439,"ip_address":"","ucode":"A74F0098478FC6","user_header":"https://static001.geekbang.org/account/avatar/00/11/05/2f/5d93a37b.jpg","comment_is_top":false,"comment_ctime":1565218139,"is_pvip":false,"replies":[{"id":"44775","content":"是的","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1565263209,"ip_address":"","comment_id":121748,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860185435","product_id":100031001,"comment_content":"感觉项目的一个优化方向就是尽量用statelesswidget","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461930,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565263209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121521,"user_name":"吴小安","can_delete":false,"product_type":"c1","uid":1371398,"ip_address":"","ucode":"EDF8E04F867069","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqr5ibqxYwcSgqPA7s49MZb1vEKKXT4mPTojwiclXkJf3ug26NuzTa6A5gbicR2rAUHdEkUAn13Rr2KQ/132","comment_is_top":false,"comment_ctime":1565151449,"is_pvip":false,"replies":[{"id":"44656","content":"Litho和Texture（AsyncDisplayKit）算一个，不过框架整体比较重，有一定学习成本","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1565167335,"ip_address":"","comment_id":121521,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5860118745","product_id":100031001,"comment_content":"请问这种声明式编程在ios和安卓业界有没有简单的框架能用的？<br>感觉现在ios使用的面向数据开发也都是命令式编程，界面绑定某个值，kvo变化了在回调里做刷新ui的操作，怎样能向这种声明式转移","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461835,"discussion_content":"Litho和Texture（AsyncDisplayKit）算一个，不过框架整体比较重，有一定学习成本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565167335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006093,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5a/0d/653a49e1.jpg","nickname":"yeliu84","note":"","ucode":"9FE76FB36C1DDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44911,"discussion_content":"SwiftUI就是和Flutter一样的声明式编程框架","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572974198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116568,"user_name":"徐西文","can_delete":false,"product_type":"c1","uid":1455496,"ip_address":"","ucode":"87BCE6534CE2CF","user_header":"https://static001.geekbang.org/account/avatar/00/16/35/88/4dfad2fd.jpg","comment_is_top":false,"comment_ctime":1563871687,"is_pvip":false,"replies":[{"id":"42648","content":"因为simple is best，另外Element已经拦截不必要的绘制了","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563895358,"ip_address":"","comment_id":116568,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858838983","product_id":100031001,"comment_content":"Dart为什么不设计一种可以自动选择状态的widget","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459595,"discussion_content":"因为simple is best，另外Element已经拦截不必要的绘制了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563895358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115866,"user_name":"Bula","can_delete":false,"product_type":"c1","uid":1600113,"ip_address":"","ucode":"DB04F01E758F3A","user_header":"https://static001.geekbang.org/account/avatar/00/18/6a/71/d28392a9.jpg","comment_is_top":false,"comment_ctime":1563759924,"is_pvip":false,"replies":[{"id":"42440","content":"拆小就行了","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563794511,"ip_address":"","comment_id":115866,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858727220","product_id":100031001,"comment_content":"StatefulWidget感觉很难减少使用频率啊  现在的设计标题栏的标题都是要跟着状态改变动态更改  😓","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459320,"discussion_content":"拆小就行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563794511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115584,"user_name":"Eren","can_delete":false,"product_type":"c1","uid":1328576,"ip_address":"","ucode":"39DEF4F3DBFA8D","user_header":"https://static001.geekbang.org/account/avatar/00/14/45/c0/b7ced73a.jpg","comment_is_top":false,"comment_ctime":1563636557,"is_pvip":false,"replies":[{"id":"42275","content":"会讲一部分","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563727931,"ip_address":"","comment_id":115584,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858603853","product_id":100031001,"comment_content":"学到现在，真的是受益匪浅，之前的一些疑惑都从中得到了答案，有种恍然大悟的感觉，希望老师能在未来的学习中，分享一下 Flutter 的从业情况和面试题，感谢之至。","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459175,"discussion_content":"会讲一部分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563727931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115524,"user_name":"Egos","can_delete":false,"product_type":"c1","uid":1071143,"ip_address":"","ucode":"9F0055B140E935","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/27/1188e017.jpg","comment_is_top":false,"comment_ctime":1563612240,"is_pvip":false,"replies":[{"id":"42276","content":"是的","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563727970,"ip_address":"","comment_id":115524,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858579536","product_id":100031001,"comment_content":"思考题里面是将MyApp 替换成StatefulWidget，然后需要在点击FloatingActionButton 的时候更新MyApp 的State 么？这样需要将MyApp 的State 一直传递到_MyHomePageState？","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459144,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563727970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115431,"user_name":"张简","can_delete":false,"product_type":"c1","uid":1453513,"ip_address":"","ucode":"CF3F30D412FF78","user_header":"https://static001.geekbang.org/account/avatar/00/16/2d/c9/0d8983f3.jpg","comment_is_top":false,"comment_ctime":1563588248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5858555544","product_id":100031001,"comment_content":"清楚明白","like_count":1},{"had_liked":false,"id":351439,"user_name":"小贺贺","can_delete":false,"product_type":"c1","uid":1177609,"ip_address":"","ucode":"3099AD93BE99C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/09/bc308b38.jpg","comment_is_top":false,"comment_ctime":1657787597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657787597","product_id":100031001,"comment_content":"老师你好，有个疑问？假如我父widget是个stateful的，里边子widget有stateful和stateless的，调用父widget的setState后，子widget是stateless的会重新销毁和重建吗？","like_count":0},{"had_liked":false,"id":344306,"user_name":"故事与酒","can_delete":false,"product_type":"c1","uid":2788244,"ip_address":"","ucode":"1A0CCAA2C31D3C","user_header":"https://static001.geekbang.org/account/avatar/00/2a/8b/94/09dca97d.jpg","comment_is_top":false,"comment_ctime":1651459734,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1651459734","product_id":100031001,"comment_content":"能问一下数据打点怎么操作吗<br>","like_count":0,"discussions":[{"author":{"id":2812934,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/ec/06/4494ecde.jpg","nickname":"jk001","note":"","ucode":"FF1E3A2883E8D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583037,"discussion_content":"在build方法中打log：print(&#39;xxxx...&#39;);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659881249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307199,"user_name":"杨鹏","can_delete":false,"product_type":"c1","uid":2660078,"ip_address":"","ucode":"3582EEC0BFC2E0","user_header":"","comment_is_top":false,"comment_ctime":1628930697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628930697","product_id":100031001,"comment_content":"有交互的需要并且交互后要促使界面重新渲染的要使用StatefulWidget,和React一样，只是做个单纯的展示根本用不到state来维护数据。只要减少没必要的重新渲染，就是性能优化之根本，也就是statelessWidget存在的意义吧。","like_count":0},{"had_liked":false,"id":277289,"user_name":"Geek_3a7713","can_delete":false,"product_type":"c1","uid":2412068,"ip_address":"","ucode":"747562829A10CE","user_header":"","comment_is_top":false,"comment_ctime":1612346424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612346424","product_id":100031001,"comment_content":"老师，有一个疑问，如果是类似自定义画笔绘图这种不断更新state的操作岂不是会导致画板的不断销毁重建，最近在处理customPaint的一些业务，随着操作时间增加，画图会变得越来越卡是不是这个原因？","like_count":0},{"had_liked":false,"id":267946,"user_name":"媴爱喵喵","can_delete":false,"product_type":"c1","uid":1481309,"ip_address":"","ucode":"C7D8910AB52129","user_header":"","comment_is_top":false,"comment_ctime":1608001960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608001960","product_id":100031001,"comment_content":"老师，在StatefulWidget 不是万金油，要慎用这节中，您提到StatelessWidget 是静态的，一旦创建则无需更新，也就是我们开发者来避免一些无用的销毁重建，是吗，像StatefulWidget如果重建，那他的所有子widget是StatefulWidget类型的都会销毁重建吗？<br>","like_count":0},{"had_liked":false,"id":263215,"user_name":"VI jolie","can_delete":false,"product_type":"c1","uid":1742621,"ip_address":"","ucode":"1CBC214FFEB546","user_header":"https://static001.geekbang.org/account/avatar/00/1a/97/1d/4bac8dbf.jpg","comment_is_top":false,"comment_ctime":1606049253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606049253","product_id":100031001,"comment_content":"交作业了啦：<br>import &#39;package:flutter&#47;material.dart&#39;;<br><br>void main() {<br>  runApp(MyApp());<br>}<br><br>class MyApp extends StatefulWidget {<br>  @override<br>  State&lt;StatefulWidget&gt; createState() {<br>    return _MyAppState();<br>  }<br>}<br><br>class _MyAppState extends State&lt;MyApp&gt; {<br>  int counter = 0;<br><br>  void _incrementCounter() {<br>    setState(() {<br>      counter++;<br>    });<br>  }<br><br>  @override<br>  Widget build(BuildContext context) {<br>    return MaterialApp(<br>      title: &#39;Flutter Demo&#39;,<br>      color: Colors.amber,<br>      theme: ThemeData(<br>        primarySwatch: Colors.blue,<br>        visualDensity: VisualDensity.adaptivePlatformDensity,<br>      ),<br>      home: MyHomePage(<br>          title: &#39;Flutter Demo Home Page&#39;,<br>          counter: counter,<br>          function: _incrementCounter),<br>    );<br>  }<br>}<br><br>class MyHomePage extends StatelessWidget {<br>  MyHomePage({Key key, this.title, this.counter, this.function})<br>      : super(key: key);<br>  String title;<br>  int counter = 0;<br>  Function function;<br><br>  @override<br>  Widget build(BuildContext context) {<br>    return Scaffold(<br>      appBar: AppBar(<br>        title: Text(&#39;$title&#39;),<br>      ),<br>      body: Center(<br>        child: Column(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: &lt;Widget&gt;[<br>            Text(<br>              &#39;You have pushed the button this many times:&#39;,<br>            ),<br>            Text(<br>              &#39;$counter&#39;,<br>              style: Theme.of(context).textTheme.headline4,<br>            ),<br>          ],<br>        ),<br>      ),<br>      floatingActionButton: FloatingActionButton(<br>        onPressed: function,<br>        tooltip: &#39;Increment&#39;,<br>        child: Icon(Icons.add),<br>      ),<br>    );<br>  }<br>}<br><br>","like_count":0},{"had_liked":false,"id":260196,"user_name":"Random","can_delete":false,"product_type":"c1","uid":1630111,"ip_address":"","ucode":"4E164C8CF487FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/df/9f/6db75dff.jpg","comment_is_top":false,"comment_ctime":1604937638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604937638","product_id":100031001,"comment_content":"Stateful就是类似于React里的容器组件(container),Stateless组件就是无状态组件，傻瓜组件。不知道是否适用React中的Stateful作为容器组件，管理一堆Stateless的无状态组件的模式，哪怕从容器组件多层透传props","like_count":0},{"had_liked":false,"id":239658,"user_name":"Chvjs","can_delete":false,"product_type":"c1","uid":2042567,"ip_address":"","ucode":"4C88728FEFC314","user_header":"https://static001.geekbang.org/account/avatar/00/1f/2a/c7/3fb66518.jpg","comment_is_top":false,"comment_ctime":1596608685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596608685","product_id":100031001,"comment_content":"交作业<br>（需要重启才行，不然会报：type ‘MyApp’ is not a subtype of type ‘StatelessWidget’）<br><br><br>import &#39;package:flutter&#47;material.dart&#39;;<br><br>void main() {<br>  runApp(MyApp());<br>}<br><br>class MyApp extends StatefulWidget {<br>  @override<br>  _MyAppState createState() =&gt; _MyAppState();<br>}<br><br>class _MyAppState extends State&lt;MyApp&gt; {<br>  int _counter = 0;<br><br>  void _incrementCounter() {<br>    setState(() {<br>      _counter++;<br>    });<br>  }<br><br>  @override<br>  Widget build(BuildContext context) {<br>    return MaterialApp(<br>      title: &#39;Flutter Demo&#39;,<br>      theme: ThemeData(<br>        primarySwatch: Colors.blue,<br>        visualDensity: VisualDensity.adaptivePlatformDensity,<br>      ),<br>      home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(&#39;Flutter Demo Home Page1&#39;),<br>        ),<br>        body: Center(<br>          child: Column(<br>            mainAxisAlignment: MainAxisAlignment.center,<br>            children: &lt;Widget&gt;[<br>              Text(<br>                &#39;You have pushed the button this many times:&#39;,<br>              ),<br>              Text(<br>                &#39;$_counter&#39;,<br>                style: Theme.of(context).textTheme.headline4,<br>              ),<br>            ],<br>          ),<br>        ),<br>        floatingActionButton: FloatingActionButton(<br>          onPressed: _incrementCounter,<br>          tooltip: &#39;Increment&#39;,<br>          child: Icon(Icons.add),<br>        ), <br>      )<br>    );<br>  }<br>}<br>","like_count":0},{"had_liked":false,"id":237413,"user_name":"飓风","can_delete":false,"product_type":"c1","uid":1006197,"ip_address":"","ucode":"18D4E8139CD7B7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/75/4e0d7419.jpg","comment_is_top":false,"comment_ctime":1595822413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595822413","product_id":100031001,"comment_content":"一个页面Page声明为StatefulWidget，因为标题和内容都需要变化，这种情况怎么优化？","like_count":0},{"had_liked":false,"id":233237,"user_name":"我来人间一趟","can_delete":false,"product_type":"c1","uid":1733144,"ip_address":"","ucode":"15CAF96EF899E2","user_header":"https://static001.geekbang.org/account/avatar/00/1a/72/18/d9e2fcf9.jpg","comment_is_top":false,"comment_ctime":1594266676,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594266676","product_id":100031001,"comment_content":"老师你好 ，我这里有个疑问还想老师帮忙解答下哈，如果根节点是statefulWidget，是不是意味着如果一旦变更，整个组件树都要重建呀，那一旦根组件是statefulWidget又怎么做优化 能让其内部的statelessWidget不重建呢？","like_count":0},{"had_liked":false,"id":222699,"user_name":"Alen","can_delete":false,"product_type":"c1","uid":1225704,"ip_address":"","ucode":"45A74E09E93CB3","user_header":"https://static001.geekbang.org/account/avatar/00/12/b3/e8/cbb1ac81.jpg","comment_is_top":false,"comment_ctime":1590895482,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590895482","product_id":100031001,"comment_content":"如果vue有了statefull 和 stateless 的概念，是不是也可以提升性能？","like_count":0},{"had_liked":false,"id":209753,"user_name":"涛","can_delete":false,"product_type":"c1","uid":1085100,"ip_address":"","ucode":"92263D02C543E1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/ac/24fc311b.jpg","comment_is_top":false,"comment_ctime":1587609107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587609107","product_id":100031001,"comment_content":"感觉声明式编程类似于小程序里面的。或者vue里面的，界面绑定data，data准备好之后用setData之类的方法通知视图更新。不知道这么理解对不对","like_count":0},{"had_liked":false,"id":146518,"user_name":"干就完事","can_delete":false,"product_type":"c1","uid":1565622,"ip_address":"","ucode":"55E8FAB59CB713","user_header":"https://static001.geekbang.org/account/avatar/00/17/e3/b6/44760ef9.jpg","comment_is_top":false,"comment_ctime":1572567501,"is_pvip":false,"replies":[{"id":"58653","content":"这些都是不参与绘制&#47;布局的widget","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1574059925,"ip_address":"","comment_id":146518,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572567501","product_id":100031001,"comment_content":"老师，就是StatefulWidget拆小……不是造成整个树的子节点深度变多了嘛。","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472897,"discussion_content":"这些都是不参与绘制/布局的widget","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574059925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143104,"user_name":"菜头","can_delete":false,"product_type":"c1","uid":1456964,"ip_address":"","ucode":"C5E95519F9EA21","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/44/dd534c9b.jpg","comment_is_top":false,"comment_ctime":1571630896,"is_pvip":false,"replies":[{"id":"56202","content":"泛型","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1572322554,"ip_address":"","comment_id":143104,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571630896","product_id":100031001,"comment_content":"State&lt;Image&gt; 这种声明是什么意思？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471386,"discussion_content":"泛型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572322554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133623,"user_name":"面向加薪学习","can_delete":false,"product_type":"c1","uid":1108117,"ip_address":"","ucode":"5164A1DF058AC5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e8/95/13b88119.jpg","comment_is_top":false,"comment_ctime":1568623286,"is_pvip":false,"replies":[{"id":"52434","content":"ImageStream，图片加载完成。<br>","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1569499952,"ip_address":"","comment_id":133623,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568623286","product_id":100031001,"comment_content":" _handleImageChanged 这个方法是谁来调用，什么时候调用？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467452,"discussion_content":"ImageStream，图片加载完成。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569499952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126834,"user_name":"davidzhou","can_delete":false,"product_type":"c1","uid":1018904,"ip_address":"","ucode":"F4B2929F4111DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/18/7cbc34eb.jpg","comment_is_top":false,"comment_ctime":1566487268,"is_pvip":false,"replies":[{"id":"47054","content":"你可以在他们的父Widget之上定义一个controller去中转；也可以通过event bus搞定。","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566580972,"ip_address":"","comment_id":126834,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566487268","product_id":100031001,"comment_content":"老师，现在我创建了两个widget，widget a里面有个方法func（），我希望在widget b里面的button事件能够触发func（），怎么一个实现方案","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464190,"discussion_content":"你可以在他们的父Widget之上定义一个controller去中转；也可以通过event bus搞定。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566580972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126495,"user_name":"张简","can_delete":false,"product_type":"c1","uid":1453513,"ip_address":"","ucode":"CF3F30D412FF78","user_header":"https://static001.geekbang.org/account/avatar/00/16/2d/c9/0d8983f3.jpg","comment_is_top":false,"comment_ctime":1566395398,"is_pvip":false,"replies":[{"id":"47052","content":"State中持有的，用于界面渲染的数据","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566580830,"ip_address":"","comment_id":126495,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566395398","product_id":100031001,"comment_content":"您说的文案数据集就是state吧？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464015,"discussion_content":"State中持有的，用于界面渲染的数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566580830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1406113,"avatar":"https://static001.geekbang.org/account/avatar/00/15/74/a1/613e4b09.jpg","nickname":"Mars雪","note":"","ucode":"963592C6BB6FF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143088,"discussion_content":"setState里面的数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579489667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120015,"user_name":"Carlo","can_delete":false,"product_type":"c1","uid":1001557,"ip_address":"","ucode":"7C3FF23B597506","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/55/48de9a24.jpg","comment_is_top":false,"comment_ctime":1564755552,"is_pvip":false,"replies":[{"id":"44422","content":"看情况，如果不需要变化，通常都是Stateless","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1565017356,"ip_address":"","comment_id":120015,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564755552","product_id":100031001,"comment_content":"那所有的button都是stateful widget对么? 那一个提示错误的弹出框中包含一个OK button。那这个弹出框可以是stateless吗？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461175,"discussion_content":"看情况，如果不需要变化，通常都是Stateless","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565017356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117813,"user_name":"mq","can_delete":false,"product_type":"c1","uid":1594742,"ip_address":"","ucode":"B675D1E33E902C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoibW0Cougnv3Hjl8n1EWoUHloXu5lMicuPm1FcJ0qyXWEaqwXv4Z09ARaeDRicbicL9RTIXnoNARibSxw/132","comment_is_top":false,"comment_ctime":1564134814,"is_pvip":false,"replies":[{"id":"43166","content":"各有各的场景，有交集但谈不上完全替代","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1564164261,"ip_address":"","comment_id":117813,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564134814","product_id":100031001,"comment_content":"状态管理的话使用Redux是不是可以替代StatefulWidget？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460126,"discussion_content":"各有各的场景，有交集但谈不上完全替代","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564164261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116567,"user_name":"熊爸爸","can_delete":false,"product_type":"c1","uid":1053067,"ip_address":"","ucode":"9A6DF9C9EB7970","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/8b/35ea4275.jpg","comment_is_top":false,"comment_ctime":1563871633,"is_pvip":false,"replies":[{"id":"42649","content":"分场景。只要能够避免不必要的销毁重建就可以","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563895392,"ip_address":"","comment_id":116567,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563871633","product_id":100031001,"comment_content":"请问老师，我看到有人用 StatelessWidget + Provide 能取代一部分 StatefulWidget 的功能，而对于自定义控件的封装，StatefulWidget 能发挥出一定优势，不知这样理解对不对？<br>我在布局界面时是否能大量使用 StatelessWidget + Provide？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459594,"discussion_content":"分场景。只要能够避免不必要的销毁重建就可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563895392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116134,"user_name":"永生","can_delete":false,"product_type":"c1","uid":1176862,"ip_address":"","ucode":"024EA73EF5E865","user_header":"https://static001.geekbang.org/account/avatar/00/11/f5/1e/f0780b61.jpg","comment_is_top":false,"comment_ctime":1563792216,"is_pvip":false,"replies":[{"id":"42438","content":"下一篇文章会专门讲这个","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563794414,"ip_address":"","comment_id":116134,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1563792216","product_id":100031001,"comment_content":"A是一个statefulwidget,从A页面跳转到B页面，A会rebuild,然后从B页面返回A页面，A又rebuild一次，我想问一下A为什么要rebuild呢？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459401,"discussion_content":"下一篇文章会专门讲这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563794414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1406113,"avatar":"https://static001.geekbang.org/account/avatar/00/15/74/a1/613e4b09.jpg","nickname":"Mars雪","note":"","ucode":"963592C6BB6FF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143097,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579490004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115902,"user_name":"不拘小节","can_delete":false,"product_type":"c1","uid":1199826,"ip_address":"","ucode":"97E987EB199A80","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIAQdjCbZN4X6cJuicGia0zGMWN22TjagIZLBNgZII09wMyVPSX0fmsicelI9nGhds1vECGkynYOnJag/132","comment_is_top":false,"comment_ctime":1563764289,"is_pvip":false,"replies":[{"id":"42654","content":"1.大量使用StatefulWidget的话，你就没法做到只有变化的子Widget才进行构建了。最好的办法是用StatelessWidget让他根本就不重新构建<br>2.构建和渲染是两个步骤，请参考上一篇分享哈","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563895913,"ip_address":"","comment_id":115902,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563764289","product_id":100031001,"comment_content":"&#47;&#47; Android 设置某文本控件展示文案为 Hello World<br>TextView textView = (TextView) findViewById(R.id.txt);<br>textView.setText(&quot;Hello World&quot;);<br><br>&#47;&#47; iOS 设置某文本控件展示文案为 Hello World<br>UILabel *label = (UILabel *)[self.view viewWithTag:1234];<br>label.text = @&quot;Hello World&quot;;<br><br>&#47;&#47; 原生 JavaScript 设置某文本控件展示文案为 Hello World<br>document.querySelector(&quot;#demo&quot;).innerHTML = &quot;Hello World!&quot;;<br><br>有个疑问，ios（androin）在渲染的时候，是需要变化的地方更改渲染，而Flutter则是这整个页面渲染，是不是Flutter的渲染效率比原生低啊，而且这样分析，如果大量使用StatefulWidget的话，做到变化的子widget才进行部分渲染，那不是StatefulWidget用的越多，效率越高？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459339,"discussion_content":"1.大量使用StatefulWidget的话，你就没法做到只有变化的子Widget才进行构建了。最好的办法是用StatelessWidget让他根本就不重新构建\n2.构建和渲染是两个步骤，请参考上一篇分享哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563895913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115898,"user_name":"不拘小节","can_delete":false,"product_type":"c1","uid":1199826,"ip_address":"","ucode":"97E987EB199A80","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIAQdjCbZN4X6cJuicGia0zGMWN22TjagIZLBNgZII09wMyVPSX0fmsicelI9nGhds1vECGkynYOnJag/132","comment_is_top":false,"comment_ctime":1563763674,"is_pvip":false,"replies":[{"id":"42655","content":"不影响","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563895936,"ip_address":"","comment_id":115898,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1563763674","product_id":100031001,"comment_content":"有个疑惑，一个StatefulWidget中有一个子StatefulWidget的widget，如果我子的StatefulWidget调用setState刷新，回影响到父级的渲染吗？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459337,"discussion_content":"不影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563895936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1406113,"avatar":"https://static001.geekbang.org/account/avatar/00/15/74/a1/613e4b09.jpg","nickname":"Mars雪","note":"","ucode":"963592C6BB6FF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143098,"discussion_content":"不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579490043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1262728,"avatar":"https://static001.geekbang.org/account/avatar/00/13/44/88/69580101.jpg","nickname":"长方体混凝土移动工程师","note":"","ucode":"00CB4C4AB4D119","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2655,"discussion_content":"不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}