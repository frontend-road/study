{"id":316802,"title":"06｜对称密钥：如何保护私密数据？","content":"<p>你好，我是范学雷。</p><p>在上一个模块，我们学习了单向散列函数。从今天开始，我们将开启一个新的模块，在这个模块里，我将跟你讨论加密技术的相关知识。是不是感觉上一个模块的学习还意犹未尽？</p><p>别着急，单向散列函数还会出现在我们的视野里。那么，加密技术是用来做什么的呢？</p><p>还记得上一讲，我们讨论了单向散列函数的使用场景吗？其中，<strong>一个重要的限制是<strong><strong>我们</strong></strong>需要确保给定的散列值不能被修改</strong>。这个简单、直观的限制，给单向散列函数的使用套上了一个紧箍咒。</p><p>这说明在很多场景下，我们并不能仅仅使用单向散列函数来解决数据的完整性问题。要想去掉这个紧箍咒，扩大单向散列函数的适用场景，我们还需要其他技术，比如加密技术。</p><p>那加密技术是怎么帮助单向散列函数解决完整性问题的？这个疑问立即就来到了我们面前。不过不用担心，我们需要一点时间来了解这个问题，以及解决问题的办法。</p><p>今天，我们先来讨论第一类加密技术：对称加密技术。</p><h2>什么是加密？</h2><p>在讨论对称加密技术之前，我们要先了解加密、解密和密钥这几个概念。</p><p>其实这几个概念还是很容易理解的。把信息或者数据伪装、隐藏起来，转换成难以解释的信息或者数据，这个过程叫做<strong>加密</strong>。和加密这个过程相反的过程，就叫做<strong>解密</strong>。</p><p>一般来说，加密产生的那个难以解释的信息或者数据，我们把它叫做<strong>密文（Ciphertext）</strong>。对应的，加密前的数据，我们通常把它叫做<strong>明文（Plaintext）</strong>。</p><!-- [[[read_end]]] --><p>密文信息通常看起来都是晦涩难懂、毫无逻辑的，所以我们一般会通过传输或者存储密文信息，来保护私密数据。当然，这建立在一个假设基础上：没有经过授权的人或者机器，很难通过密文计算出明文；经过授权的人或者机器，才能够通过密文计算出明文。</p><p>那经过授权的人或者机器，是怎样通过密文计算出明文的？对，就是使用<strong>密钥</strong>。</p><p>在现代密码学里，<strong>密钥是在加密和解密运算里，决定运算结果的一段信息</strong>。因为，加密要使用密钥把明文信息转换为密文；解密要使用密钥把密文复原为明文。</p><p>也就是说，加密运算需要两个输入：密钥和明文。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/51/d1642ccc8074434a09d41cf8c360af51.jpg?wh=2284*1285\" alt=\"\"></p><p>解密运算也需要两个输入：密钥和密文。</p><p><img src=\"https://static001.geekbang.org/resource/image/6b/1a/6bff070fd3a2c96cc7b4caed4052d61a.jpg?wh=2284*1285\" alt=\"\"></p><p>如果没有密钥，我们就没有办法执行解密运算，也就很难把密文转换成明文。同理，如果只有授权的人或者机器才知道密钥，那么没有授权的人也很难通过密文计算出明文。</p><p>你可能会觉得，密钥太重要了！但现代密码学之前的加密，其实不是这样设计的。</p><p>历史上的加密，是没有密钥的。数据的保密性，依赖于算法的保密性。一旦算法被破解，数据也就被破解了。如果有一天，时光穿梭机真的实现了，我们穿越回去，偷听一下、偷看一下当初设计者的算法设计，算法就被破解了（时光穿梭机的梗，你可以自己搜索一下）。</p><p>其实也用不着这么科幻，就算时光穿梭机实现不了，我们也还有很多更有效的办法：</p><ul>\n<li>当初算法的设计者还健在吗？</li>\n<li>当初算法的实现者还健在吗？</li>\n<li>算法实现的代码还在吗？</li>\n<li>算法运行的环境还在吗？</li>\n</ul><p>解决掉其中任何一个问题，我们就能破坏掉算法的保密性。而且，这些破解办法通常没有什么难度，比制造时光机有效率多了。除此之外，还要说一点，虽然算法保密看起来很安全，但是这也意味着只有很少的人知道算法，这样的算法质量也是值得担忧的。</p><p><strong>到了<strong><strong>现代密码学，加密数据的安全性就</strong></strong>依赖于加密算法的质量和密钥的保密性这两个因素</strong>。密钥部分，是私有的部分，需要严格保密；算法部分，变成了公开的部分，要接受公开讨论、评测，接受各种分析和攻击。<strong>一个算法，如果<strong><strong>在</strong></strong>接受<strong><strong>了</strong></strong>公开的分析、评测和各种各样的攻击<strong><strong>之后</strong></strong>，还依然被认为是安全的，<strong><strong>我们才能说，这个算法</strong></strong>的安全性是真的经得起考验的。</strong></p><p>为什么算法一定要公开？不公开不行吗？为了可以让你更直观地了解使用公开算法有多重要，我们一起来看看公开算法的遴选过程是怎样的。</p><p><img src=\"https://static001.geekbang.org/resource/image/fd/a1/fd0074a5351eb4be97c2ea3e795aa3a1.jpeg?wh=2284*1285\" alt=\"\"></p><p>所以，你看，仅仅单向散列函数的遴选，就花费了7年时间，还聚集了世界上最出色的密码学家和密码分析专家。在遴选标准中，有一个重要指标，就是有没有足够多的密码分析。</p><p>什么是密码分析？<strong>密码分析，指的是分析、评测一个密码学算法，有没有安全缺陷和适用场景的限制。如果一个算法，没有人对它展开分析、评测，或者缺少足够的分析，它的安全性很难获得信任</strong>。63个落选的算法中，不乏知名密码学专家，或者知名团队和组织的撑腰。</p><p>我相信，这些算法在提交之前，它的发明者都是信心满满的。可是一旦接受了公开的分析和评测，很多意想不到的安全缺陷就暴露出来了。</p><p>但是，保密的算法，如果没有经过大量密码分析专家的分析，是很难给人信心的。可如果经过了大量的、不同的密码分析专家的分析，保密算法也算不上保密了。的确，这是一件很矛盾的事情，有时候却又不得不这样。</p><p>所以，渐渐地，<strong>使用公开的算法<strong><strong>是</strong></strong>密码学领域的<strong><strong>一个</strong></strong>基本常识。<strong><strong>不过，一个</strong></strong>现代密码学算法的安全性，都是基于密钥的保密，而不是算法保密要求</strong>。遗憾的是，仍然有很多保密算法的存在和使用。对于这样的使用，我们很难有信心相信它的安全性。</p><p>为什么我们要花费这么大篇幅去讨论公开算法的遴选过程呢？</p><p>其实是因为，我想让你对以下两个密码学常识留下深刻的印象：</p><ul>\n<li><strong>不要自己发明密码算法，尤其是<strong><strong>在</strong></strong>没有经过充分讨论、充分分析的情况下</strong>。大部分情况下，我们自行发明的密码学算法都是灾难。</li>\n<li><strong>不要把安全性寄托在算法的保密上</strong>。大部分情况下，保密的算法都是无法保密，并且是不堪分析的。</li>\n</ul><p>在这个部分里，我最后再强调一下：<strong>现代的密码学算法的安全性，都是基于密钥的保密，而不是算法保密要求</strong>。管理好密钥，做好密钥的保密，才是密码学系统最关键的任务。</p><h2>什么是对称密钥？</h2><p>讨论完加密和密钥，我们就要来看看对称密钥技术。</p><p>说起来对称密钥，就不得不提它的对立面，非对称密钥。1976年，惠特菲尔德·迪菲（Whitfield Diffie）、马丁·赫尔曼（Martin Hellman）发表了基于非对称密钥技术的密钥交换算法，但是在这之前，并没有对称密钥、非对称密钥的说法。</p><p>1976年之前，密码学就是一门研究对称密钥的学问。所以，我们看的二战时期的谍战片，如果里面提到了发报机和密钥，用的肯定不会是非对称密钥技术。这种影响，到现在还有，比如，当我们使用密钥这个词汇时，一般指的就是对称密钥。</p><p><strong>对称密钥，顾名思义，就是每一个参与者都持有相同的密钥，使用相同的密钥。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/e6/c3/e6eb19e271ecce7bedf629792d7ddfc3.jpeg?wh=2284*1285\" alt=\"\"></p><p><strong>非对称密钥，<strong><strong>就是指</strong></strong>每一个参与者都持有不同的密钥，使用不同的密钥。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/ba/eb/bab7b6ae0c35d2a5dbb56c32d3f139eb.jpeg?wh=2284*1285\" alt=\"\"></p><p>经常有人问我，密码属于对称密钥技术吗？如果属于的话，为什么密码学不叫密钥学？密码和密钥有什么区别吗？所以，在这里，我要稍微地强调一下。</p><p>密钥和密码是两个特别容易混淆，而且经常混淆的概念。比如密码学明明是研究密钥的，偏偏叫“密码”学；密码分析明明是研究加密算法的，偏偏叫“密码”分析。怎么理解呢？</p><p>有一个技巧，就是<strong>借助英语词汇</strong>，这两个概念一下子就会清晰。通常地，密码的英语词汇是Password，加解密算法的英语词汇是Cipher，密钥的英语词汇是Key。</p><p>密码（Password）使用中文里的“口令”，更为贴切。比如三国时期的曹操，据说就使用过“鸡肋”作为口令。口令该怎么用呢？如果执勤的士兵问：“口令？”杨修回答“鸡肋”，这就可以获得通行许可了。如果回答的不是“鸡肋”，就不能获得通行，还可能被逮起来进一步审查。</p><p>和对称密钥类似，需要每一个参与者都知道相同的口令，使用相同的口令。</p><p>而密钥（Key）和密码（Password）的区别，在于它们的用法。口令的用法是对照口令本身。士兵知道口令是“鸡肋”，然后对照他人的回答是不是“鸡肋”。</p><p>我们上网输入的用户名和密码，也是系统要直接地或者间接地进行对照，登录者是不是使用了系统记录的口令。而密钥的用法，则是参与加密运算或者解密运算。</p><p>通常地，我们也不用纠结别人是不是能准确地使用好“密码”和“密钥”这两个词汇。我们只要从它们的使用场景来判断，到底是用作对比的口令，还是用来运算的密钥就好。</p><p>另外，在生活中，我们总是在记口令，比如我们登录网站的密码。和自然界其他生物相比，人类的记忆能力值得自豪。我们通常可以记住六位的数字，或者学过的单词。不过，即便如此，我们还是倾向于选择“123456”， “888888”或者生日这样的简单口令。</p><p>稍微复杂的口令，就超越我们的记忆能力了，更别提要记住很多网站的很多口令了。在现代计算机的眼里，这样的记忆能力实在太渣了，用最不讲究技巧的蛮力攻击也就是分分钟钟的事情。</p><p>密码需要记，但是一般来说，我们不需要记住密钥，事实上，我们也记不住。现代的密钥，通常需要至少128位没有规律的字符，而且频繁更换。比如，下面的5个密钥，其实是质量不太好的、便于记住的128位的密钥，你可以挑战挑战，看看能不能记得住：</p><pre><code>密码1: Yq3t6w9z$C&amp;F)J@N\n密码2: gVkYp3s6v9y$B&amp;E)\n密码3: NdRgUkXp2s5v8y/B\n密码4: -JaNcRfUjXn2r5u8\n密码5: C&amp;F)J@NcQfTjWnZr\n</code></pre><p>我们当然记不住这么复杂的密钥，除非是不世的天才。所以，我们才要拜托计算机替我们记住这么复杂的信息，并且自动地更换。</p><h2>密钥管理的烦恼</h2><p>如果我们拜托计算机替我们管理密钥，方便是方便了，但是也会立即衍生出很多现实的问题：</p><ul>\n<li>计算机替我们记住了密钥，计算机能够保持密钥的保密性吗？</li>\n<li>计算机会不会出卖我们？</li>\n<li>使用密码的程序会不会泄漏密钥？</li>\n<li>运行算法的环境能不能泄漏密钥？</li>\n<li>退役的机器里，会不会有密钥存留导致密钥泄漏？</li>\n<li>……</li>\n</ul><p>无论哪个问题没有处理好，密钥的保密性可能都只是空谈。</p><p><strong>既然现代的密码学算法的安全性依赖于密钥的保密，那么，管理好密钥，做好密钥的保密，就是密码学系统最关键的任务</strong>。不过，密钥的管理，部分内容已经超出了密码学的范畴，我们需要在计算机基础的操作系统和编程语言里找答案。</p><p>比如，在<a href=\"https://time.geekbang.org/column/intro/100019601\">《代码精进之路》</a>里，我们提到的管理敏感信息的原则，同样适用于密钥的管理。要把密钥当作超级敏感的信息来看待，在我们的代码里保护好密钥，不要泄漏密钥信息。</p><p>之后，我们还会讨论对称密钥的管理，以及怎么使用密码学的技术降低密钥管理的难度和风险。</p><p>像单向散列函数一样，不同的加密算法也有不同的安全强度。那么，到底哪些对称密钥的算法是我们可以信赖的呢？这是我们下一次要讨论的问题。</p><h2>Take Away（今日收获）</h2><p>今天，我们讨论了什么是加密解密、什么是对称密钥、密钥保密的必要性，以及密钥管理的困难。通过今天的讨论，我们知道要把密钥当作超级敏感的信息来处理。</p><p>这需要我们在编写代码的时候，要特别留意密钥的无意识泄露，以及在内存、硬盘里的长时间驻留。比如说，用完密钥后，我们的代码一定要把密钥占用的内存清零，而不要依赖类似Java垃圾收集器这样的机制。再比如说，我们千万不能把密钥写到系统或者应用的日志里，日志可是泄露密钥的最便捷路径之一。</p><p>通过今天的讨论，我们要：</p><ul>\n<li>理解什么是对称密钥；</li>\n<li>知道对称密钥的安全性，取决于密钥的保密性和算法的安全性，而不是算法的保密性。</li>\n<li>要把密钥当作超级敏感的信息来处理，做好密钥的保密。</li>\n</ul><h2>思考题</h2><p>你还见过哪些坑？处理敏感信息，你有哪些经验？另外，你有没有发明过密码算法？你了解的项目有没有发明过密码算法？这些算法有能够替代的公开算法吗？</p><p>欢迎在留言区留言，分享你的经验。参与讨论的人越多，我们互相学习、互相启发的就越多。</p><p>好的，今天就这样，我们下次再聊。</p>","comments":[{"had_liked":false,"id":266005,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":1167046,"ip_address":"","ucode":"454538FF253B5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","comment_is_top":false,"comment_ctime":1607127004,"is_pvip":false,"replies":[{"id":"96642","content":"你就不嫌麻烦吗？你放心，你的老板放不放心？你的老板放心，股东放不放心？股东放心，客户放不放心？客户放心，你家人放不放心？麻烦比你想象的多。<br><br>请看文章“什么是加密？”这一部分的前半段，尤其是下面的话：“当初算法的设计者还健在吗？当初算法的实现者还健在吗？算法实现的代码还在吗？算法运行的环境还在吗？解决掉其中任何一个问题，我们就能破坏掉算法的保密性。” 这些都比逆向推导简单。更何况，王母娘娘还能请你去蟠桃会吃酒喝茶。当然，逆向推导和破解128位的密钥比起来，也不是一个数量级的难度。只不过，的确没有必要逆向推导，找到你就行了，软的不行就来硬的，你保守秘密，你就承担责任（换句话说是风险）。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1607132926,"ip_address":"","comment_id":266005,"utype":1}],"discussion_count":8,"race_medal":0,"score":"31671898076","product_id":100064801,"comment_content":"“大部分情况下，我们自行发明的密码学算法都是灾难。”有关这句，想问一下：我的理解是需要加一个前提，自行发明的算法程序可以被外部获取到大量明文密文对儿，从而逆向推导我的算法。 我想讨论的是，如果这个算法在某个系统的服务端内部，整个服务端代码只有我一个人有权限，对外输出的 可被客户端访问到的东西 只有大量的密文，这种情况下外界是否有可能攻破我自己发明的这个脆弱的加密算法呢？","like_count":7,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511122,"discussion_content":"你就不嫌麻烦吗？你放心，你的老板放不放心？你的老板放心，股东放不放心？股东放心，客户放不放心？客户放心，你家人放不放心？麻烦比你想象的多。\n\n请看文章“什么是加密？”这一部分的前半段，尤其是下面的话：“当初算法的设计者还健在吗？当初算法的实现者还健在吗？算法实现的代码还在吗？算法运行的环境还在吗？解决掉其中任何一个问题，我们就能破坏掉算法的保密性。” 这些都比逆向推导简单。更何况，王母娘娘还能请你去蟠桃会吃酒喝茶。当然，逆向推导和破解128位的密钥比起来，也不是一个数量级的难度。只不过，的确没有必要逆向推导，找到你就行了，软的不行就来硬的，你保守秘密，你就承担责任（换句话说是风险）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607132926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1568487,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ee/e7/4375e97c.jpg","nickname":"雲至","note":"","ucode":"47E2D099322BB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333418,"discussion_content":"那要是在已知的安全算法前加一个自己发明的算法会不会提高安全性  或者把两个加密算法组合起来会更安全吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607516727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1167046,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","nickname":"sugar","note":"","ucode":"454538FF253B5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332789,"discussion_content":"... 完了 我感觉我表达的方式让老师误解了。我可能该换个句式问：“假设现在得到了一种未知的对称加密算法加密后的密文，但是得不到任何明文。已知其算法并非公开的，而且强度很低只有20位以内。问 我们站在攻击者的角度上是否有可能得到明文？”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607339425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1167046,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","nickname":"sugar","note":"","ucode":"454538FF253B5F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333199,"discussion_content":"哈哈。如果只知道密文，其他的都不知道，我很怀疑这个算法真的可以被计算机破解。没反馈并且无法校验呀，即使破解了可能也不知道。但是，我估计这样的场景是很难存在的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607477552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":332789,"ip_address":""},"score":333199,"extra":""},{"author":{"id":1167046,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","nickname":"sugar","note":"","ucode":"454538FF253B5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":333401,"discussion_content":"首先给老师的敬业精神点个赞，第一次见过评论被回复后还二次评论的，感觉极客时间app可以迭代下作者回复的反复二次回复相关功能了～ 其实这个场景有的，我举个例子： 个人的一些非常重要的数据 文件，可以经过本地加密后上传到云平台oss之类的进行保存，但文件如果比较大的话，aes等算法的计算开销就比较大了，但是我看了下aes算法的一些细节，感觉如果自己单纯写个低强度的 基于位运算xor之类的加密算法，在这种场景下能节省很大的计算开销，当然牺牲了加密强度。我知道这种自己随便写出来的几次xor做出的加密算法 如果被人拿到大量明文密文对儿，是能够逆向拟合出一个加解密函数的，但我这个场景 基本上文件就在自己家里的nas中，上传前就加密了，用的时候下载时再解密，相当于端到端加密了。所以想和老师探讨这种场景 理论上来说安全性 以及主要的风险点～ 感谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607513088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333199,"ip_address":""},"score":333401,"extra":""},{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1167046,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","nickname":"sugar","note":"","ucode":"454538FF253B5F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333649,"discussion_content":"嗯，我看不到二次回复，有时候只能翻翻文章，但是还是会有很多遗漏的。 学习吗，就是教和学互相掰扯，讨论越多，问题才越深入。一个回合的讨论，可能只能解决表面化的问题。同希望极客时间添加个功能，能少点麻烦。\n\n你举的例子挺好的，不过也有很多假设因素在里面，比如文件明文一点都不泄漏，其实做到这一点挺难的。我们的文件里可能存在大量的重复内容，比如文件头之类的。\n\nAES计算很快的，不值得去发明新算法，除非你想玩一玩密码学的数学知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607585659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333401,"ip_address":""},"score":333649,"extra":""}]}]},{"had_liked":false,"id":265834,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1607047660,"is_pvip":false,"replies":[{"id":"96638","content":"这是一个好问题，密钥不能单纯地通过加密算法得到。我们后面还会讲密钥是怎么产生的。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1607100637,"ip_address":"","comment_id":265834,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18786916844","product_id":100064801,"comment_content":"问题3：密钥是怎么产生的，密钥可以通过加密算法得到吗，那么如果加密算法是公开的，密钥是不是也就能知道了？","like_count":4,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511063,"discussion_content":"这是一个好问题，密钥不能单纯地通过加密算法得到。我们后面还会讲密钥是怎么产生的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607100637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2083695,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/cb/6f/b6693f43.jpg","nickname":"Litt1eQ","note":"","ucode":"D80D0B14F3B312","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332144,"discussion_content":"密钥有密钥生成算法 个人感觉可以把密钥理解成为一个本地生成的符合加密算法规则的随机字符串 这个在本地生成 如果不传输的话 只有自己知道这个密钥是什么 所以说密码的安全只依赖于密钥 已知算法是无法推断密钥的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607074288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265805,"user_name":"Litt1eQ","can_delete":false,"product_type":"c1","uid":2083695,"ip_address":"","ucode":"D80D0B14F3B312","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cb/6f/b6693f43.jpg","comment_is_top":false,"comment_ctime":1607040441,"is_pvip":true,"replies":[{"id":"96614","content":"所以，千万不要在不安全的通道传输对称密钥；甚至，也不要在安全的通道传输对称密钥。<br>","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1607057845,"ip_address":"","comment_id":265805,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18786909625","product_id":100064801,"comment_content":"默认情况下，网络通信的信道是不可信的，在不安全的信道中传输对称加密的密钥是一个比较麻烦的问题","like_count":4,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511052,"discussion_content":"所以，千万不要在不安全的通道传输对称密钥；甚至，也不要在安全的通道传输对称密钥。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607057845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265952,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1607075112,"is_pvip":true,"replies":[{"id":"96636","content":"没太明白这个问题。“自己发明的算法”当然是“自己发明的算法”。我不了解这两个协议，不知道它们有没有发明“加密”算法。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1607100473,"ip_address":"","comment_id":265952,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5902042408","product_id":100064801,"comment_content":"Telegram的MTProto协议据说用了自己发明的算法。另外微信仿照TLS1.3开发的mmtls，据说使用的都是公开的高强度算法，那就不算是自己发明加密算法了吗？","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511105,"discussion_content":"没太明白这个问题。“自己发明的算法”当然是“自己发明的算法”。我不了解这两个协议，不知道它们有没有发明“加密”算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607100473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332234,"discussion_content":"如果你想了解细节的话，这里有一篇分析可供参考，其中提到了MTProto协议的问题。 https://caislab.kaist.ac.kr/publication/paper_files/2017/SCIS17_JU.pdf","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607105710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":332435,"discussion_content":"抱歉我可能问得不够清楚。其实我是对文中的“加密算法”的定义有些疑惑。因为文中举的例子可能都是具体的加密算法，比如DES/RSA这样的。而SSL/TLS是所谓的“加密协议栈”，通过协商决定具体要使用的加密算法。所以一般建议&#34;don&#39;t roll your own crypto&#34;，仅仅是指不要发明自己的加密算法呢，还是说连加密协议栈都不要自己发明（即便你发明的协议栈中用的都是公开的加密算法）？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607219187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":332234,"ip_address":""},"score":332435,"extra":""},{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":332643,"discussion_content":"说起协议的话，就有点复杂了。还没有“不要自己发明协议”的说法。使用基础密码算法的应用，或多或少，都是在发明自己的协议。密码算法的涉设计，应该是皮实耐用的，如果能使用好密码算法，规避掉算法的陷阱，有经验的应该能设计好简单的协议。\n\n不过协议设计本身，有很多超出密码学范围的安全需求。比如说MTProto的协议，包括TLS 1.2之前的协议，就没有解决好防跟踪的问题。比如说，上一个时间点，你在一个咖啡馆喝咖啡，阅读了一个新闻；下一个时间点，你回到家里，又阅读了下一个新闻。如果没有防跟踪的考量，那攻击者可能就知道家里的那个人，就是咖啡馆里的那个人，这就暴露了很多隐私。这超出了密码学的范畴，但也是通信协议要考虑的重要的内容。\n\n一个人，一定不能掌握所有的信息安全的知识，所以协议的公开也很重要。接受挑剔、批评的协议，即使能找到很多的问题，也要比封闭的协议更可信。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1607286078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":332435,"ip_address":""},"score":332643,"extra":""}]}]},{"had_liked":false,"id":361475,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1667533272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667533272","product_id":100064801,"comment_content":"到了现代密码学，加密数据的安全性就依赖于加密算法的质量和密钥的保密性这两个因素。--记下来","like_count":0},{"had_liked":false,"id":361474,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1667533215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667533215","product_id":100064801,"comment_content":"学习打卡","like_count":0},{"had_liked":false,"id":361473,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"美国","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1667533208,"is_pvip":false,"replies":[{"id":"131467","content":"哈哈，这个问题很常见吗？","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1667545165,"ip_address":"美国","comment_id":361473,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1667533208","product_id":100064801,"comment_content":"对称秘钥保存在了项目配置文件里","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592625,"discussion_content":"哈哈，这个问题很常见吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1667545165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":592629,"discussion_content":"有些保存在配置文件，有些保存在数据库","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1667546459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":592625,"ip_address":"浙江"},"score":592629,"extra":""}]}]},{"had_liked":false,"id":351532,"user_name":"Geek_32fc10","can_delete":false,"product_type":"c1","uid":3038222,"ip_address":"","ucode":"7786E42179499B","user_header":"https://static001.geekbang.org/account/avatar/00/2e/5c/0e/4a626b08.jpg","comment_is_top":false,"comment_ctime":1657870120,"is_pvip":true,"replies":[{"id":"128103","content":"不用费劲去破解，找个人问问就行了。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1658413717,"ip_address":"","comment_id":351532,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1657870120","product_id":100064801,"comment_content":"攻击者在不知道对方使用的什么加密算法的情况下，只能暴li破解吗？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580952,"discussion_content":"不用费劲去破解，找个人问问就行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658413717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310224,"user_name":"纳兰容若","can_delete":false,"product_type":"c1","uid":1605876,"ip_address":"","ucode":"2E1EA2CDFDA1A9","user_header":"https://static001.geekbang.org/account/avatar/00/18/80/f4/564209ea.jpg","comment_is_top":false,"comment_ctime":1630553275,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630553275","product_id":100064801,"comment_content":"看完老师的文章终于懂了 现代密码学为什么需要密钥这个东东了","like_count":0},{"had_liked":false,"id":267770,"user_name":"追风少年","can_delete":false,"product_type":"c1","uid":1318664,"ip_address":"","ucode":"C172E9CFA3FB3E","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/08/7b5bfbc7.jpg","comment_is_top":false,"comment_ctime":1607921605,"is_pvip":true,"replies":[{"id":"97270","content":"嗯，不惊讶。 快想办法吧。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1607963045,"ip_address":"","comment_id":267770,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607921605","product_id":100064801,"comment_content":"现在项目里都是明文的密码，日志，数据库全中，尴尬😓","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511738,"discussion_content":"嗯，不惊讶。 快想办法吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607963045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265886,"user_name":"孜孜","can_delete":false,"product_type":"c1","uid":1018203,"ip_address":"","ucode":"7EF4FB644357CE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","comment_is_top":false,"comment_ctime":1607062108,"is_pvip":true,"replies":[{"id":"96639","content":"是不是在cookie里写入机密信息？需要注意的是，使用公开的算法，不算是自己发明算法。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1607100748,"ip_address":"","comment_id":265886,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607062108","product_id":100064801,"comment_content":"我们公司的旧项目，会往cookie里面写入加密信息。比如accountinfo，然后Java code会用一个common的jar去解密。虽然没有研究过，不过可能不是公开算法。。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511082,"discussion_content":"是不是在cookie里写入机密信息？需要注意的是，使用公开的算法，不算是自己发明算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607100748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265833,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1607047656,"is_pvip":false,"replies":[{"id":"96637","content":"哈希逆向运算困难，加密可以逆向运算。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1607100548,"ip_address":"","comment_id":265833,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607047656","product_id":100064801,"comment_content":"问题2：哈希跟加密验证数据方式有些不同，似乎都是把原本的数据处理成难以解释的数据，这两个难以解释的结果有什么区别吗？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511062,"discussion_content":"哈希逆向运算困难，加密可以逆向运算。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607100548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}