{"id":541080,"title":"56｜RESTful Web Services（20）：为什么要通过测试的方法来驱动出代码结构？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p>目前我们已经实现了ResourceRouter，和UriTemplate整体的架构愿景如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/65/bfec2474efc36df7230f839c2bce1f65.jpg?wh=1920x1080\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/a5/d2/a5e7fyy80e85b80a482a8768281df6d2.jpg?wh=8000x4500\" alt=\"\"></p><p>接下来要进入RootResource/Resource和ResourceMethod的开发。目前未经细化的任务列表如下：</p><ul>\n<li>\n<p>Resource/RootResource/ResourceMethod</p>\n<ul>\n<li>在处理请求派分时，可以支持多级子资源（Sub-Resource）</li>\n<li>在处理请求派分时，可以根据客户端提供的超媒体类型，选择对应的资源方法（Resource Method）</li>\n<li>在处理请求派分时，可以根据客户端提供的Http方法，选择对应的资源方法</li>\n<li>资源方法可以返回Java对象，由Runtime自行推断正确的返回状态</li>\n<li>资源方法可以不明确指定返回的超媒体类型，由Runtime自行推断，比如，资源方法标注了Produces标注，那么就使用标注提供的超媒体类型等</li>\n<li>资源方法可按找期望的类型，访问Http请求的内容</li>\n<li>资源对象和资源方法可接受环境组件的注入</li>\n</ul>\n</li>\n</ul><p>让我们细化一下任务列表。首先关注在请求派分的Uri匹配部分，暂时忽略其他部分：</p><ul>\n<li>Resource/RootResource/ResourceMethod\n<ul>\n<li>从Path标注中获取UriTemplate\n<ul>\n<li>如不存在Path标注，则抛出异常</li>\n</ul>\n</li>\n<li>在处理请求派分时，可以根据客户端提供的Http方法，选择对应的资源方法\n<ul>\n<li>当请求与资源方法的Uri模版一致，且Http方法一致时，派分到该方法</li>\n<li>没有资源方法于请求的Uri和Http方法一致时，返回404</li>\n</ul>\n</li>\n<li>在处理请求派分时，可以支持多级子资源\n<ul>\n<li>当没有资源方法可以匹配请求时，选择最优匹配SubResourceLocater，通过它继续进行派分</li>\n<li>如果SubResourceLocator也无法找到满足的请求时，返回404</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><!-- [[[read_end]]] --><h2>视频演示</h2><p>进入今天的环节：</p><p><video poster=\"https://media001.geekbang.org/1d3e3c6f794c440a91955b499cf0c698/snapshots/70263cddfccc4a86bebf97329fc44f45-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/2e6d738c-1820ffee9c0-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/a4df0bdb04f04ba39a622542e31fc676/cdc670a867444a958523336cf5d61659-335fe9f212af454189aec2602573a6bc-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>按照三角法，接下来要如何增加新的测试案例？</p>","neighbors":{"left":{"article_title":"55｜RESTful Web Services（19）：如何更有效地构造测试数据？","id":538453},"right":{"article_title":"57｜RESTful Web Services（21）：按照三角法，该如何增加新的测试案例？","id":541082}},"comments":[{"had_liked":false,"id":352338,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":true,"comment_ctime":1658564143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"9.2233720385132995e+18","product_id":100109401,"comment_content":"第一次听说“三角法”，搜索了一下，分享一下我的理解：<br>三角法 = happy path + sad path<br><br>参考资料：<br>TDD笔记3 三角测量Triangulation <br>https:&#47;&#47;blog.csdn.net&#47;rockieyungn&#47;article&#47;details&#47;83288313<br><br>《Professional Test-Driven Development with C#: Developing Real World Applications with TDD》<br>https:&#47;&#47;www.oreilly.com&#47;library&#47;view&#47;professional-test-driven-development&#47;9780470643204&#47;ch007-sec010.html","like_count":0}]}