{"id":228924,"title":"13 | 空间检索（上）：如何用Geohash实现“查找附近的人”功能？","content":"<p>你好，我是陈东。</p><p>现在，越来越多的互联网应用在提供基于地理位置的服务。这些基于地理位置服务，本质上都是检索附近的人或者物的服务。比如说，社交软件可以浏览附近的人，餐饮平台可以查找附近的餐厅，还有出行平台会显示附近的车等。那如果你的老板希望你能为公司的应用开发相关的功能，比如说实现一个“查询附近的人”功能，你会怎么做呢？</p><p>一个很容易想到的方案是，把所有人的坐标取出来，计算每个人和自己当前坐标的距离。然后把它们全排序，并且根据距离远近在地图上列出来。但是仔细想想你就会发现，这种方案在大规模的系统中并不可行。</p><p>这是因为，如果系统中的人数到达了一定的量级，那计算和所有人的距离再排序，这会是一个非常巨大的代价。尽管，我们可以使用堆排序代替全排序来降低排序代价，但取出所有人的位置信息并计算距离，这本身就是一个很大的开销。</p><p>那在大规模系统中实现“查找附近的人功能”，我们有什么更高效的检索方案呢？今天我们就来聊聊这个问题。</p><h2>使用非精准检索的思路实现“查找附近的人”</h2><p>事实上，“查找附近的人”和“检索相关的网页”这两个功能的本质是非常相似的。在这两个功能的实现中，我们都没有明确的检索目标，也就都不需要非常精准的检索结果，只需要保证质量足够高的结果包含在Top K个结果中就够了。所以，非精准Top K检索也可以作为优化方案，来实现“查找附近的人”功能。那具体是如何实现的呢？</p><!-- [[[read_end]]] --><p>我们可以通过限定“附近”的范围来减少检索空间。一般来说，同一个城市的人往往会比不同城市的人距离更近。所以，我们不需要去查询所有的人，只需要去查询自己所在城市的人，然后计算出自己和他们的距离就可以了，这样就能大大缩小检索范围了。那在同一个城市中，我们也可以优先检索同一个区的用户，来再次缩小检索范围。这就是<strong>非精准检索的思路了</strong>。</p><p>在这种限定“附近”区域的检索方案中，为了进一步提高检索效率，我们可以将所有的检索空间划分为多个区域并做好编号，然后以区域编号为key做好索引。这样，当我们需要查询附近的人时，先快速查询到自己所属的区域，然后再将该区域中所有人的位置取出，计算和每一个人的距离就可以了。在这个过程中，划分检索空间以及对其编号是最关键的一步，那具体怎么操作呢？我们接着往下看。</p><h2>如何对区域进行划分和编号？</h2><p>对于一个完整的二维空间，我们可以用二分的思想将它均匀划分。也就是在水平方向上一分为二，在垂直方向上也一分为二。这样一个空间就会被均匀地划分为四个子空间，这四个子空间，我们可以用两个比特位来编号。在水平方向上，我们用0来表示左边的区域，用1来表示右边的区域；在垂直方向上，我们用0来表示下面的区域，用1来表示上面的区域。因此，这四个区域，从左下角开始按照顺时针的顺序，分别是00、01、11和10。<br>\n<img src=\"https://static001.geekbang.org/resource/image/7b/64/7b5fe4f79b6b5515e10fd6ea3fc26064.jpeg?wh=1920*1080\" alt=\"\" title=\"区域划分和编号\"></p><p>接下来，如果要继续划分空间，我们依然沿用这个思路，将每个区域再分为四块。这样，整个空间就被划分成了16块区域，那对应的编号也会再增加两位。比如说，01编号的区域被划分成了4小块，那这四小块的编号就是在01后面追加两位编码，分别为 01 00、01 01、 01 10、 01 11。依次类推，我们可以将整个空间持续细分。具体划分到什么粒度，就取决于应用对于“附近”的定义和需求了。</p><p>这种区域编码的方式有2个优点：</p><ol>\n<li>区域有层次关系：如果两个区域的前缀是相同的，说明它们属于同一个大区域；</li>\n<li>区域编码带有分割意义：奇数位的编号代表了垂直切分，偶数位的编号代表了水平切分，这会方便区域编码的计算（奇偶位是从右边以第0位开始数起的）。</li>\n</ol><h2>如何快速查询同个区域的人？</h2><p>那有了这样的区域编码方式以后，我们该怎么查询呢？这就要说到区域编码的一个特点了：<strong>区域编码能将二维空间的两个维度用一维编码表示</strong>。利用这个特点，我们就可以使用一维空间中常见的检索技术快速查找了。我们可以将区域编码作为key，用有序数组存储，这样就可以用二分查找进行检索了。</p><p>如果有效区域动态增加，那我们还可以使用二叉检索树、跳表等检索技术来索引。在一些系统的实现中，比如Redis，它就可以直接支持类似的地理位置编码的存入和检索，内部的实现方式是，使用跳表按照区域编码进行排序和查找。此外，如果希望检索效率更高，我们还可以使用哈希表来实现区域的查询。</p><p>这样一来，当我们想要查询附近的人时，只需要根据自己的坐标，计算出自己所属区域的编码，然后在索引中查询出所有属于该区域的用户，计算这些用户和自己的距离，最后排序展现即可。</p><p>不过，这种非精准检索的方案，会带来一定的误差。也就是说，我们找到的所谓“附近的人”，其实只是和你同一区域的人而已，并不一定是离你最近的。比如说，你的位置正好处于一个区域的边缘，那离你最近的人，也可能是在你的邻接区域里。<br>\n<img src=\"https://static001.geekbang.org/resource/image/f2/b8/f2039589483ba7a9d4c2c73568d55cb8.jpeg?wh=1920*1080\" alt=\"\" title=\"邻接区域距离可能更近\"></p><p>好在，在“查找附近的人”这类目的性不明确的应用中，这样的误差我们也是可以接受的。但是，在另一些有精准查询需求的应用中，是不允许存在这类误差的。比如说，在游戏场景中，角色技能的攻击范围必须是精准的，它要求技能覆盖范围内的所有敌人都应该受到伤害，不能有遗漏。那这是怎么做到的呢？你可以先想一想，然后再来看我的分析。</p><h2>如何精准查询附近的人？</h2><p>既然邻接区域的人距离我们更近，那我们是不是可以建立一个更大的候选集合，把这些邻接区域的用户都加进去，再一起计算距离和排序，这样问题是不是就解决了呢？我们先试着操作一下。</p><p>对于目标所在的当前区域，我们可以根据期望的查询半径，以当前区域为中心向周围扩散，从而将周围的区域都包含进来。假设，查询半径正好是一个区域边长的一半，那我们只要将目标区域周围一圈，也就是8个邻接区域中的用户都加入候选集，这就肯定不会有遗漏了。这时，虽然计算量提高了8倍，但我们可以给出精准的解了。</p><p>如果要降低计算量，我们可以将区域划分的粒度提高一个量级。这样，区域的划分就更精准，在查询半径不变的情况下，需要检索的用户的数量就会更少（查询范围对比见下图中两个红框部分）。<br>\n<img src=\"https://static001.geekbang.org/resource/image/3d/dd/3d3559effa9a38c7e05f85b75d497add.jpeg?wh=1920*1080\" alt=\"\" title=\"更细粒度地划分区域\"></p><p>知道了要查询的区域有哪些，那我们怎么快速寻找这些区域的编码呢？这就要回到我们区域编码的方案本身了。前面我们说了，区域编码可以根据奇偶位拆成水平编码和垂直编码这两块，如果一个区域编码是0110，那它的水平编码就是01，垂直编码就是10。那该区域右边一个区域的水平编码的值就比它自己的大1，垂直编码则相同。因此，<strong>我们通过分解出当前区域的水平编码和垂直编码，对对应的编码值进行加1或者减1的操作，就能得到不同方向上邻接的8个区域的编码了</strong>。<br>\n<img src=\"https://static001.geekbang.org/resource/image/e7/d7/e7e2973d140c951ad1b150f9e0186cd7.jpeg?wh=1920*1080\" alt=\"\" title=\"区域编码规则\"></p><p>以上，就是精准查询附近人的检索过程，我们可以总结为两步：第一步，先查询出自己所属的区域编码，再计算出周围8个邻接区域的区域编码；第二步，在索引中查询9次，取出所有属于这些区域中的人，精准计算每一个人和自己的距离，最后排序输出结果。</p><h2>什么是Geohash编码？</h2><p>说到这，你可能会有疑问了，在实际工作中，用户对应的都是实际的地理位置坐标，那它和二维空间的区域编码又是怎么联系起来的呢？别着急，我们慢慢说。</p><p>实际上，我们会将地球看作是一个大的二维空间，那经纬度就是水平和垂直的两个切分方向。在给出一个用户的经纬度坐标之后，我们通过对地球的经纬度区间不断二分，就能得到这个用户所属的区域编码了。这么说可能比较抽象，我来举个例子。</p><p>我们知道，地球的纬度区间是[-90,90]，经度是[-180,180]。如果给出的用户纬度（垂直方向）坐标是39.983429，经度（水平方向）坐标是116.490273，那我们求这个用户所属的区域编码的过程，就可以总结为3步：</p><ol>\n<li>\n<p>在纬度方向上，第一次二分，39.983429在[0,90]之间，[0,90]属于空间的上半边，因此我们得到编码1。然后在[0,90]这个空间上，第二次二分，39.983429在[0,45]之间，[0,45]属于区间的下半边，因此我们得到编码0。两次划分之后，我们得到的编码就是10。</p>\n</li>\n<li>\n<p>在经度方向上，第一次二分，116.490273在[0,180]之间，[0,180]属于空间的右半边，因此我们得到编码1。然后在[0,180]这个空间上，第二次二分，116.490273在[90,180]之间，[90,180]还是属于区间的右半边，因此我们得到的编码还是1。两次划分之后，我们得到的编码就是11。</p>\n</li>\n<li>\n<p>我们把纬度的编码和经度的编码交叉组合起来，先是经度，再是纬度。这样就构成了区域编码，区域编码为 1110。</p>\n</li>\n</ol><p>你会发现，在上面的例子中，我们只二分了两次。实际上，如果区域划分的粒度非常细，我们就要持续、多次二分。而每多二分一次，我们就需要增加一个比特位来表示编码。如果经度和纬度各二分15次的话，那我们就需要30个比特位来表示一个位置的编码。那上面例子中的编码就会是11100 11101 00100 01111 00110 11110。<br>\n<img src=\"https://static001.geekbang.org/resource/image/5e/35/5eb820345e2ccce69ed84a96eeba7135.jpeg?wh=1920*1080\" alt=\"\" title=\"计算编码的过程示意图\"></p><p>这样得到的编码会特别长，那为了简化编码的表示，我们可以以5个比特位为一个单位，把长编码转为base32编码，最终得到的就是wx4g6y。这样30个比特位，我们只需要用6个字符就可以表示了。</p><p>这样做不仅存储会更简单，而且具有相同前缀的区域属于同一个大区域，看起来也非常直观。<strong>这种将经纬度坐标转换为字符串的编码方式，就叫作Geohash编码</strong>。大多数应用都会使用Geohash编码进行地理位置的表示，以及在很多系统中，比如，Redis、MySQL以及Elastic Search中，也都支持Geohash数据的存储和查询。<br>\n<img src=\"https://static001.geekbang.org/resource/image/ce/ef/cee63fc368d7c7a765ce887f9b201fef.jpg?wh=1920*647\" alt=\"\" title=\"十进制转为base32编码字符对照表\"></p><p>那在实际转换的过程中，由于不同长度的Geohash代表不同大小的覆盖区域，因此我们可以结合GeoHash字符长度和覆盖区域对照表，根据自己的应用需要选择合适的Geohash编码长度。这个对照表让我们在使用Geohash编码的时候方便很多。<br>\n<img src=\"https://static001.geekbang.org/resource/image/3d/92/3de8e51e2746d77eeeeb9bbfefc2a492.jpeg?wh=1920*1080\" alt=\"\" title=\"字符长度和覆盖区域对照表\"></p><p>不过，Geohash编码也有缺点。由于Geohash编码的一个字符就代表了5个比特位，因此每当字符长度变化一个单位，区域的覆盖度变化跨度就是32倍（2^5），这会导致区域范围划分不够精细。</p><p>因此，当发现粒度划分不符合自己应用的需求时，我们其实可以将Geohash编码转换回二进制编码的表示方式。这样，编码长度变化的单位就是1个比特位了，区域覆盖度变化跨度就是2倍，我们就可以更灵活地调整自己期望的区域覆盖度了。实际上，在许多系统的底层实现中，虽然都支持以字符串形式输入Geohash编码，但是在内存中的存储和计算都是以二进制的方式来进行的。</p><h2>重点回顾</h2><p>今天，我们重点学习了利用空间检索的技术来查找附近的人。</p><p>首先，我们通过将二维空间在水平和垂直方向上不停二分，可以生成一维的区域编码，然后我们可以使用一维空间的检索技术对区域编码做好索引。</p><p>在查询时，我们可以使用非精准的检索思路，直接检索相应的区域编码，就可以查找到“附近的人”了。但如果要进行精准检索，我们就需要根据检索半径将扩大检索范围，一并检索周边的区域，然后将所有的检索结果进行精确的距离计算，最终给出整体排序。这也是一个典型的“非精准Top K检索-精准Top K检索”的应用案例。因此，当你需要基于地理位置，进行查找或推荐服务的开发时，可以根据具体需求，灵活使用今天学习到的检索方案。</p><p>此外，我们还学习了Geohash编码，Geohash编码是很常见的一种编码方式，它将真实世界的地理位置根据经纬度进行区域编码，再使用base32编码生成一维的字符串编码，使得区域编码在显示和存储上都更加方便。</p><h2>课堂讨论</h2><ol>\n<li>\n<p>如果一个应用期望支持“查找附近的人”的功能。在初期用户量不大的时候，我们使用什么索引技术比较合理？在后期用户量大的时候，为了加快检索效率，我们又可以采用什么检索技术？为什么？</p>\n</li>\n<li>\n<p>如果之前的应用选择了5个字符串的Geohash编码，进行区域划分（区域范围为4.9 km * 4.9 km），那当我们想查询10公里内的人，这个时候该如何进行查询呢？使用什么索引技术会比较合适呢？</p>\n</li>\n</ol><p>欢迎在留言区畅所欲言，说出你的思考过程和最终答案。如果有收获，也欢迎把这一讲分享给你的朋友。</p>","comments":[{"had_liked":false,"id":210631,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1587799815,"is_pvip":false,"replies":[{"id":78421,"content":"回答得很清晰！\n第一个问题，树和跳表都可以，都支持动态修改，并且支持范围查询，可以在log n时间复杂度内完成查询。如果用户量变大，又希望查询效率高。可以用倒排索引。\n第二个问题，查询周边两圈就可以了。这样相信你能更好地理解Geohash的原理。当然，还有更多灵活的查询方式，我们下一讲再介绍。\n","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587805743,"ip_address":"","comment_id":210631,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"1: \n用户量不大的时候：直接可以进行计算具体，这里因为用户的数据是一致在变化的，所以保存的数据结构可以使用 树 和 跳表， 都可以在 log(n) 的时间复杂度中进行查询\n用户量很大的时候，可以使用倒排索引， 以区域的 key 建 倒排索引\n2:  这里可以利用区域编码的特性，在同一大区域下的小区域的前缀是一样的\n这里最小的区域范围为  4.9 km * 4.9 km ，那么可以向上找大一级的区域，此时的区域范围为 9.8 km * 9.8 km 此时还是不满足要查询的范围，所以向上找大一级的区域  此时的区域范围为 18.6 km * 18.6 km 就可以了\n","like_count":9},{"had_liked":false,"id":210294,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1587715150,"is_pvip":true,"replies":[{"id":78382,"content":"你这个问题很好。的确是这样的，由于地球是球面，直接用经纬度划分格子的话，高纬度地区和低纬度地区的一个格子的范围是不同的。这里其实存在一个误差。因此，真要精准估计区域范围的话，我们应该每隔一个经度或者纬度就累加一个偏差值才对。\n不过，在查找附近的人的这类需求上，本来就是非精准检索，因此这个范围表更多是一个参考。帮助我们快速地决定需要使用的Geohash的长度。如果对精度有要求的话，可以按照按文中的思路，扩大范围，减少一个编码长度，取出更大范围的候选集进行精准计算。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587726424,"ip_address":"","comment_id":210294,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"把地球的球体表面投影到平面的话，相同Geohash编码长度对应的覆盖区域的大小会随着纬度高低变化的吧","like_count":6,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492994,"discussion_content":"你这个问题很好。的确是这样的，由于地球是球面，直接用经纬度划分格子的话，高纬度地区和低纬度地区的一个格子的范围是不同的。这里其实存在一个误差。因此，真要精准估计区域范围的话，我们应该每隔一个经度或者纬度就累加一个偏差值才对。\n不过，在查找附近的人的这类需求上，本来就是非精准检索，因此这个范围表更多是一个参考。帮助我们快速地决定需要使用的Geohash的长度。如果对精度有要求的话，可以按照按文中的思路，扩大范围，减少一个编码长度，取出更大范围的候选集进行精准计算。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587726424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217703,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1589592983,"is_pvip":false,"replies":[{"id":80509,"content":"你的感觉很敏锐。如果结合后面几课一起看的话，你会发现，这其实更像是一个降维映射。而降维以后的每一个bit，都可以看做是向量的一个维度，都有它自己的意义。\n最典型的例子，就是我们在计算附近区域的时候，我们其实还是还原回了原始的两个维度，分别处理。然后再合并回来。\n因此，从这个角度来说，我们将这两个维度作为两个向量，单独保存，组合检索，其实也是可以的。只是在特定场景下，转为一维编码，再利用大家熟悉的一维空间的检索技术，会更简单，也更容易被大众接受。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1589599412,"ip_address":"","comment_id":217703,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"GeoHash两维转一维编码，虽然看上去去是这样，但我老觉得很别扭，我想了想，核心我认为它并没有按照传统的单维度作为一个整体去计算，所以我更认为它是两个作用域无限的维度，转换位2*n个0，1维度表示。\n","like_count":2,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495226,"discussion_content":"你的感觉很敏锐。如果结合后面几课一起看的话，你会发现，这其实更像是一个降维映射。而降维以后的每一个bit，都可以看做是向量的一个维度，都有它自己的意义。\n最典型的例子，就是我们在计算附近区域的时候，我们其实还是还原回了原始的两个维度，分别处理。然后再合并回来。\n因此，从这个角度来说，我们将这两个维度作为两个向量，单独保存，组合检索，其实也是可以的。只是在特定场景下，转为一维编码，再利用大家熟悉的一维空间的检索技术，会更简单，也更容易被大众接受。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589599412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211259,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1587942194,"is_pvip":false,"replies":[{"id":78559,"content":"回答得很简明扼要。重点把握得不错。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587951105,"ip_address":"","comment_id":211259,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"1.小数据量怎么做都可以.大数据量倒排索引+跳表，倒排加速\n2.扩大查询范围，可以将GeoHash的编码减少一位。如果一开始是6位，可以变成5位去查。","like_count":2,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495226,"discussion_content":"你的感觉很敏锐。如果结合后面几课一起看的话，你会发现，这其实更像是一个降维映射。而降维以后的每一个bit，都可以看做是向量的一个维度，都有它自己的意义。\n最典型的例子，就是我们在计算附近区域的时候，我们其实还是还原回了原始的两个维度，分别处理。然后再合并回来。\n因此，从这个角度来说，我们将这两个维度作为两个向量，单独保存，组合检索，其实也是可以的。只是在特定场景下，转为一维编码，再利用大家熟悉的一维空间的检索技术，会更简单，也更容易被大众接受。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589599412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271693,"user_name":"Bachue Zhou","can_delete":false,"product_type":"c1","uid":1494491,"ip_address":"","ucode":"3175754775CA32","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","comment_is_top":false,"comment_ctime":1609759527,"is_pvip":false,"replies":[{"id":99520,"content":"这是一个很不错的思路，就是根据数据的出现频率来编码压缩。哈夫曼编码就是这样的一种实践。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1610890948,"ip_address":"","comment_id":271693,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"其实很多时候还可以根据使用场景对这个编码进行压缩吧，比如大部分情况下，人不会在海上，出现在南北极的概率也很低，出现在其他一些人迹罕至的地方的概率也不高，所以可以根据这一概率对编码进行压缩，得到更精简的编码。","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513006,"discussion_content":"这是一个很不错的思路，就是根据数据的出现频率来编码压缩。哈夫曼编码就是这样的一种实践。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610890948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210626,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1587798947,"is_pvip":false,"replies":[{"id":78418,"content":"是的。字符串长度和选择几个比特位作为编码单元是相关的。\n一般来说，对于Geohash，我们选择5个比特位作为一个单元，使用base32编码。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587805389,"ip_address":"","comment_id":210626,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"这里 GeoHash 编码字符串的长度和 选定几个比特位作为一个单元和编码方式有关\n\n这里是默认 选5个比特位作为一个单元 和 使用 base32 进行编码吗？","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513006,"discussion_content":"这是一个很不错的思路，就是根据数据的出现频率来编码压缩。哈夫曼编码就是这样的一种实践。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610890948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210187,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1587695548,"is_pvip":false,"replies":[{"id":78360,"content":"问题1: 数据量小的时候怎么做都行。如果出于节约空间的角度出发，用数组和链表(跳表)都可以。这样也可以做二分查找，效率也不算差。当数据量大的时候，如果觉得二分查找还不够快，那么还可以建立倒排索引，直接以编码作为key。\n问题2:不错，我们是可以扩展周边区域就可以了。不过如果只扩展周围一圈的邻接区域，那么扩展半径只是4.9公里。如果我希望的扩展半径是10公里，你会怎么做呢？","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587702350,"ip_address":"","comment_id":210187,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"问题1. 如老师讲过的，在用户量不大的情况下可以采用堆排序对全部用户排序，得到结果。而当用户量增大的时候，需要对二维空间进行编码的方式来解决。区别在于数据量小的情况堆排序可以解决问题，而且不需要额外的空间。当时数据量大的情况，时间复杂度增加，需要来增加空间复杂度，也就是对于空间位置进行二分编码的方式，来降低时间复杂度。\n问题2。可以采取您提到精准topk方案，取四个方位的额外4.9km区域，进行综合计算出10km附近的人。","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492963,"discussion_content":"问题1: 数据量小的时候怎么做都行。如果出于节约空间的角度出发，用数组和链表(跳表)都可以。这样也可以做二分查找，效率也不算差。当数据量大的时候，如果觉得二分查找还不够快，那么还可以建立倒排索引，直接以编码作为key。\n问题2:不错，我们是可以扩展周边区域就可以了。不过如果只扩展周围一圈的邻接区域，那么扩展半径只是4.9公里。如果我希望的扩展半径是10公里，你会怎么做呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587702350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374881,"user_name":"吉","can_delete":false,"product_type":"c1","uid":1299435,"ip_address":"广东","ucode":"2C373444E5C493","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/VciagicrDGcKR47SbWE00AFcsglxRy0rWialRB7NRt3X4jmfQVAb23AiaAn0UzbG2LmeTia1yShJ0Qeqiau5E11HpoEg/132","comment_is_top":false,"comment_ctime":1684564957,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"老师你好，这个倒排索引的 key 是什么？ value 又是什么呢？","like_count":0},{"had_liked":false,"id":372699,"user_name":"ifelse","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1681448799,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":3,"score":2,"product_id":100048401,"comment_content":"学习打卡","like_count":0},{"had_liked":false,"id":210136,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1587690175,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"干货满满，很受益","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492963,"discussion_content":"问题1: 数据量小的时候怎么做都行。如果出于节约空间的角度出发，用数组和链表(跳表)都可以。这样也可以做二分查找，效率也不算差。当数据量大的时候，如果觉得二分查找还不够快，那么还可以建立倒排索引，直接以编码作为key。\n问题2:不错，我们是可以扩展周边区域就可以了。不过如果只扩展周围一圈的邻接区域，那么扩展半径只是4.9公里。如果我希望的扩展半径是10公里，你会怎么做呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587702350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210631,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1587799815,"is_pvip":false,"replies":[{"id":78421,"content":"回答得很清晰！\n第一个问题，树和跳表都可以，都支持动态修改，并且支持范围查询，可以在log n时间复杂度内完成查询。如果用户量变大，又希望查询效率高。可以用倒排索引。\n第二个问题，查询周边两圈就可以了。这样相信你能更好地理解Geohash的原理。当然，还有更多灵活的查询方式，我们下一讲再介绍。\n","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587805743,"ip_address":"","comment_id":210631,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"1: \n用户量不大的时候：直接可以进行计算具体，这里因为用户的数据是一致在变化的，所以保存的数据结构可以使用 树 和 跳表， 都可以在 log(n) 的时间复杂度中进行查询\n用户量很大的时候，可以使用倒排索引， 以区域的 key 建 倒排索引\n2:  这里可以利用区域编码的特性，在同一大区域下的小区域的前缀是一样的\n这里最小的区域范围为  4.9 km * 4.9 km ，那么可以向上找大一级的区域，此时的区域范围为 9.8 km * 9.8 km 此时还是不满足要查询的范围，所以向上找大一级的区域  此时的区域范围为 18.6 km * 18.6 km 就可以了\n","like_count":9,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493071,"discussion_content":"回答得很清晰！\n第一个问题，树和跳表都可以，都支持动态修改，并且支持范围查询，可以在log n时间复杂度内完成查询。如果用户量变大，又希望查询效率高。可以用倒排索引。\n第二个问题，查询周边两圈就可以了。这样相信你能更好地理解Geohash的原理。当然，还有更多灵活的查询方式，我们下一讲再介绍。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587805743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100064,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","nickname":"zj","note":"","ucode":"E3329CCF694AC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296495,"discussion_content":"我一直搞不懂，为啥奇偶编码原理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596554821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134710,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLHDCyrQLakSwOQXrF8eE6HQvXP4h5tjpe4dRAZbA1qpSbLw7RYreD7feDThptpicicR7SBaalaus3A/132","nickname":"阳光总在风雨后","note":"","ucode":"67335717472592","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276450,"discussion_content":"老师，为什么大数据量用倒排比数要好呢？多大数据量选倒排呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590885805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210294,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1587715150,"is_pvip":true,"replies":[{"id":78382,"content":"你这个问题很好。的确是这样的，由于地球是球面，直接用经纬度划分格子的话，高纬度地区和低纬度地区的一个格子的范围是不同的。这里其实存在一个误差。因此，真要精准估计区域范围的话，我们应该每隔一个经度或者纬度就累加一个偏差值才对。\n不过，在查找附近的人的这类需求上，本来就是非精准检索，因此这个范围表更多是一个参考。帮助我们快速地决定需要使用的Geohash的长度。如果对精度有要求的话，可以按照按文中的思路，扩大范围，减少一个编码长度，取出更大范围的候选集进行精准计算。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587726424,"ip_address":"","comment_id":210294,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"把地球的球体表面投影到平面的话，相同Geohash编码长度对应的覆盖区域的大小会随着纬度高低变化的吧","like_count":6,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493071,"discussion_content":"回答得很清晰！\n第一个问题，树和跳表都可以，都支持动态修改，并且支持范围查询，可以在log n时间复杂度内完成查询。如果用户量变大，又希望查询效率高。可以用倒排索引。\n第二个问题，查询周边两圈就可以了。这样相信你能更好地理解Geohash的原理。当然，还有更多灵活的查询方式，我们下一讲再介绍。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587805743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100064,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","nickname":"zj","note":"","ucode":"E3329CCF694AC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296495,"discussion_content":"我一直搞不懂，为啥奇偶编码原理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596554821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134710,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLHDCyrQLakSwOQXrF8eE6HQvXP4h5tjpe4dRAZbA1qpSbLw7RYreD7feDThptpicicR7SBaalaus3A/132","nickname":"阳光总在风雨后","note":"","ucode":"67335717472592","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276450,"discussion_content":"老师，为什么大数据量用倒排比数要好呢？多大数据量选倒排呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590885805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217703,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1589592983,"is_pvip":false,"replies":[{"id":80509,"content":"你的感觉很敏锐。如果结合后面几课一起看的话，你会发现，这其实更像是一个降维映射。而降维以后的每一个bit，都可以看做是向量的一个维度，都有它自己的意义。\n最典型的例子，就是我们在计算附近区域的时候，我们其实还是还原回了原始的两个维度，分别处理。然后再合并回来。\n因此，从这个角度来说，我们将这两个维度作为两个向量，单独保存，组合检索，其实也是可以的。只是在特定场景下，转为一维编码，再利用大家熟悉的一维空间的检索技术，会更简单，也更容易被大众接受。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1589599412,"ip_address":"","comment_id":217703,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"GeoHash两维转一维编码，虽然看上去去是这样，但我老觉得很别扭，我想了想，核心我认为它并没有按照传统的单维度作为一个整体去计算，所以我更认为它是两个作用域无限的维度，转换位2*n个0，1维度表示。\n","like_count":2,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492994,"discussion_content":"你这个问题很好。的确是这样的，由于地球是球面，直接用经纬度划分格子的话，高纬度地区和低纬度地区的一个格子的范围是不同的。这里其实存在一个误差。因此，真要精准估计区域范围的话，我们应该每隔一个经度或者纬度就累加一个偏差值才对。\n不过，在查找附近的人的这类需求上，本来就是非精准检索，因此这个范围表更多是一个参考。帮助我们快速地决定需要使用的Geohash的长度。如果对精度有要求的话，可以按照按文中的思路，扩大范围，减少一个编码长度，取出更大范围的候选集进行精准计算。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587726424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211259,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1587942194,"is_pvip":false,"replies":[{"id":78559,"content":"回答得很简明扼要。重点把握得不错。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587951105,"ip_address":"","comment_id":211259,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"1.小数据量怎么做都可以.大数据量倒排索引+跳表，倒排加速\n2.扩大查询范围，可以将GeoHash的编码减少一位。如果一开始是6位，可以变成5位去查。","like_count":2,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493235,"discussion_content":"回答得很简明扼要。重点把握得不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587951105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271693,"user_name":"Bachue Zhou","can_delete":false,"product_type":"c1","uid":1494491,"ip_address":"","ucode":"3175754775CA32","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","comment_is_top":false,"comment_ctime":1609759527,"is_pvip":false,"replies":[{"id":99520,"content":"这是一个很不错的思路，就是根据数据的出现频率来编码压缩。哈夫曼编码就是这样的一种实践。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1610890948,"ip_address":"","comment_id":271693,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"其实很多时候还可以根据使用场景对这个编码进行压缩吧，比如大部分情况下，人不会在海上，出现在南北极的概率也很低，出现在其他一些人迹罕至的地方的概率也不高，所以可以根据这一概率对编码进行压缩，得到更精简的编码。","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493235,"discussion_content":"回答得很简明扼要。重点把握得不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587951105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210626,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1587798947,"is_pvip":false,"replies":[{"id":78418,"content":"是的。字符串长度和选择几个比特位作为编码单元是相关的。\n一般来说，对于Geohash，我们选择5个比特位作为一个单元，使用base32编码。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587805389,"ip_address":"","comment_id":210626,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"这里 GeoHash 编码字符串的长度和 选定几个比特位作为一个单元和编码方式有关\n\n这里是默认 选5个比特位作为一个单元 和 使用 base32 进行编码吗？","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493069,"discussion_content":"是的。字符串长度和选择几个比特位作为编码单元是相关的。\n一般来说，对于Geohash，我们选择5个比特位作为一个单元，使用base32编码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587805389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210187,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1587695548,"is_pvip":false,"replies":[{"id":78360,"content":"问题1: 数据量小的时候怎么做都行。如果出于节约空间的角度出发，用数组和链表(跳表)都可以。这样也可以做二分查找，效率也不算差。当数据量大的时候，如果觉得二分查找还不够快，那么还可以建立倒排索引，直接以编码作为key。\n问题2:不错，我们是可以扩展周边区域就可以了。不过如果只扩展周围一圈的邻接区域，那么扩展半径只是4.9公里。如果我希望的扩展半径是10公里，你会怎么做呢？","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587702350,"ip_address":"","comment_id":210187,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"问题1. 如老师讲过的，在用户量不大的情况下可以采用堆排序对全部用户排序，得到结果。而当用户量增大的时候，需要对二维空间进行编码的方式来解决。区别在于数据量小的情况堆排序可以解决问题，而且不需要额外的空间。当时数据量大的情况，时间复杂度增加，需要来增加空间复杂度，也就是对于空间位置进行二分编码的方式，来降低时间复杂度。\n问题2。可以采取您提到精准topk方案，取四个方位的额外4.9km区域，进行综合计算出10km附近的人。","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493069,"discussion_content":"是的。字符串长度和选择几个比特位作为编码单元是相关的。\n一般来说，对于Geohash，我们选择5个比特位作为一个单元，使用base32编码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587805389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374881,"user_name":"吉","can_delete":false,"product_type":"c1","uid":1299435,"ip_address":"广东","ucode":"2C373444E5C493","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/VciagicrDGcKR47SbWE00AFcsglxRy0rWialRB7NRt3X4jmfQVAb23AiaAn0UzbG2LmeTia1yShJ0Qeqiau5E11HpoEg/132","comment_is_top":false,"comment_ctime":1684564957,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"老师你好，这个倒排索引的 key 是什么？ value 又是什么呢？","like_count":0},{"had_liked":false,"id":372699,"user_name":"ifelse","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1681448799,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":3,"score":2,"product_id":100048401,"comment_content":"学习打卡","like_count":0},{"had_liked":false,"id":210136,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1587690175,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"干货满满，很受益","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245709,"discussion_content":"在移动互联网时代，查找附近的人其实是很常见的功能。不过也许许多人还没有认真思考过这个功能是怎么实现的。希望这篇文章对你有帮助","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587693618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}