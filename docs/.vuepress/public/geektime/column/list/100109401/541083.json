{"id":541083,"title":"58｜RESTful Web Services（22）：重构还是继续完成功能？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p>目前我们已经实现了ResourceRouter，和UriTemplate整体的架构愿景如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/65/bfec2474efc36df7230f839c2bce1f65.jpg?wh=1920x1080\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/a5/d2/a5e7fyy80e85b80a482a8768281df6d2.jpg?wh=8000x4500\" alt=\"\"></p><p>目前的任务列表：</p><ul>\n<li>Resource/RootResource/ResourceMethod\n<ul>\n<li><s>从Path标注中获取UriTemplate</s>\n<ul>\n<li>如不存在Path标注，则抛出异常</li>\n</ul>\n</li>\n<li>在处理请求派分时，可以根据客户端提供的Http方法，选择对应的资源方法\n<ul>\n<li>当请求与资源方法的Uri模版一致，且Http方法一致时，派分到该方法</li>\n<li>没有资源方法于请求的Uri和Http方法一致时，返回404</li>\n</ul>\n</li>\n<li>在处理请求派分时，可以支持多级子资源\n<ul>\n<li>当没有资源方法可以匹配请求时，选择最优匹配SubResourceLocater，通过它继续进行派分</li>\n<li>如果SubResourceLocator也无法找到满足的请求时，返回404</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><p>代码为：</p><pre><code>class RootResourceClass implements ResourceRouter.RootResource {\n    private PathTemplate uriTemplate;\n    private Class&lt;?&gt; resourceClass;\n    private Map&lt;String, List&lt;ResourceRouter.ResourceMethod&gt;&gt; resourceMethods;\n    public RootResourceClass(Class&lt;?&gt; resourceClass) {\n        this.resourceClass = resourceClass;\n        this.uriTemplate = new PathTemplate(resourceClass.getAnnotation(Path.class).value());\n        this.resourceMethods = Arrays.stream(resourceClass.getMethods()).filter(m -&gt; Arrays.stream(m.getAnnotations())\n                        .anyMatch(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class)))\n                .map(DefaultResourceMethod::new)\n                .collect(Collectors.groupingBy(ResourceRouter.ResourceMethod::getHttpMethod));\n    }\n    @Override\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; match(UriTemplate.MatchResult result, String method, String[] mediaTypes, UriInfoBuilder builder) {\n        String remaining = result.getRemaining();\n        return resourceMethods.get(method).stream().map(m -&gt; match(remaining, m)).filter(Result::isMatched).sorted()\n                .findFirst().map(Result::resourceMethod);\n    }\n    @Override\n    public UriTemplate getUriTemplate() {\n        return uriTemplate;\n    }\n    private Result match(String path, ResourceRouter.ResourceMethod method) {\n        return new Result(method.getUriTemplate().match(path), method);\n    }\n    record Result(Optional&lt;UriTemplate.MatchResult&gt; matched,\n                  ResourceRouter.ResourceMethod resourceMethod) implements Comparable&lt;Result&gt; {\n        public boolean isMatched() {\n            return matched.map(r -&gt; r.getRemaining() == null).orElse(false);\n        }\n        @Override\n        public int compareTo(Result o) {\n            return matched.flatMap(x -&gt; o.matched.map(x::compareTo)).orElse(0);\n        }\n    }\n    static class DefaultResourceMethod implements ResourceRouter.ResourceMethod {\n        private String httpMethod;\n        private UriTemplate uriTemplate;\n        private Method method;\n        public DefaultResourceMethod(Method method) {\n            this.method = method;\n            this.uriTemplate = new PathTemplate(method.getAnnotation(Path.class).value());\n            this.httpMethod = Arrays.stream(method.getAnnotations()).filter(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class))\n                    .findFirst().get().annotationType().getAnnotation(HttpMethod.class).value();\n        }\n        @Override\n        public String getHttpMethod() {\n            return httpMethod;\n        }\n        @Override\n        public UriTemplate getUriTemplate() {\n            return uriTemplate;\n        }\n        @Override\n        public GenericEntity&lt;?&gt; call(ResourceContext resourceContext, UriInfoBuilder builder) {\n            return null;\n        }\n        @Override\n        public String toString() {\n            return method.getDeclaringClass().getSimpleName() + &quot;.&quot; + method.getName();\n        }\n    }\n}\n</code></pre><h2>视频演示</h2><p>进入今天的环节：</p><p><video poster=\"https://media001.geekbang.org/930d5b078f5f4d60a6dff3301e59d275/snapshots/fe71512e3b434d25bba771d1d12eb1b0-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/3c8ddd65-1820ff093b1-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/057db71c6c70456886b2b715a9957450/c79f7acc6fec464db024c17d7663da87-7b3a66e342fc97069e90af6428d56583-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>Sub Resource Locator要如何构造测试数据？</p><!-- [[[read_end]]] -->","neighbors":{"left":{"article_title":"57｜RESTful Web Services（21）：按照三角法，该如何增加新的测试案例？","id":541082},"right":{"article_title":"59｜RESTful Web Services（23）：如何构造测试数据？","id":543912}},"comments":[{"had_liked":false,"id":353081,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"陕西","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1659148338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659148338","product_id":100109401,"comment_content":"原来 @ParameterizedTest(name = &quot;{2}&quot;) 这样就可以从参数中选一个做测试展示的名称","like_count":0}]}