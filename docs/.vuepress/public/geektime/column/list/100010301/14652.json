{"id":14652,"title":"21 | 方法内联（下）","content":"<p>在上一篇中，我举的例子都是静态方法调用，即时编译器可以轻易地确定唯一的目标方法。</p>\n<p>然而，对于需要动态绑定的虚方法调用来说，即时编译器则需要先对虚方法调用进行去虚化（devirtualize），即转换为一个或多个直接调用，然后才能进行方法内联。</p>\n<p><strong>即时编译器的去虚化方式可分为完全去虚化以及条件去虚化（guarded devirtualization）。</strong></p>\n<p><strong>完全去虚化</strong>是通过类型推导或者类层次分析（class hierarchy analysis），识别虚方法调用的唯一目标方法，从而将其转换为直接调用的一种优化手段。它的关键在于证明虚方法调用的目标方法是唯一的。</p>\n<p><strong>条件去虚化</strong>则是将虚方法调用转换为若干个类型测试以及直接调用的一种优化手段。它的关键在于找出需要进行比较的类型。</p>\n<p>在介绍具体的去虚化方式之前，我们先来看一段代码。这里我定义了一个抽象类BinaryOp，其中包含一个抽象方法apply。BinaryOp类有两个子类Add和Sub，均实现了apply方法。</p>\n<pre><code>abstract class BinaryOp {\n  public abstract int apply(int a, int b);\n}\n\nclass Add extends BinaryOp {\n  public int apply(int a, int b) {\n    return a + b;\n  }\n}\n\nclass Sub extends BinaryOp {\n  public int apply(int a, int b) {\n    return a - b;\n  }\n}\n</code></pre>\n<p>下面我便用这个例子来逐一讲解这几种去虚化方式。</p>\n<h2>基于类型推导的完全去虚化</h2>\n<p>基于类型推导的完全去虚化将通过数据流分析推导出调用者的动态类型，从而确定具体的目标方法。</p><!-- [[[read_end]]] -->\n<pre><code>public static int foo() {\n  BinaryOp op = new Add();\n  return op.apply(2, 1);\n}\n\npublic static int bar(BinaryOp op) {\n  op = (Add) op;\n  return op.apply(2, 1);\n}\n</code></pre>\n<p>举个例子，上面这段代码中的foo方法和bar方法均会调用apply方法，且调用者的声明类型皆为BinaryOp。这意味着Java编译器会将其编译为invokevirtual指令，调用BinaryOp.apply方法。</p>\n<p>前两篇中我曾提到过，在Sea-of-Nodes的IR系统中，变量不复存在，取而代之的是具体值。这些具体值的类型往往要比变量的声明类型精确。<br />\n<img src=\"https://static001.geekbang.org/resource/image/28/07/2874be42bccaece59ed2484aaa478407.png?wh=760*580\" alt=\"\" /></p>\n<p><strong>foo方法的IR图（方法内联前）</strong></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/32/fc/32ce05f4929ae328ffbf5517175420fc.png?wh=758*566\" alt=\"\" /></p>\n<h3>bar方法的IR图（方法内联前）</h3>\n<p>在上面两张IR图中，方法调用的调用者（即8号CallTarget节点的第一个依赖值）分别为2号New节点，以及5号Pi节点。后者可以简单看成强制转换后的精确类型。由于这两个节点的类型均被精确为Add类，因此，原invokevirtual指令对应的9号invoke节点都被识别对Add.apply方法的调用。</p>\n<p>经过对该具体方法的内联之后，对应的IR图如下所示：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/a9/0d/a90e99097591778a4dd5d145f84ed00d.png?wh=268*184\" alt=\"\" /></p>\n<h3>foo方法的IR图（方法内联及逃逸分析后）</h3>\n<p><img src=\"https://static001.geekbang.org/resource/image/31/4a/3161d594415960a3675fad00812df94a.png?wh=780*660\" alt=\"\" /></p>\n<h3>bar方法的IR图（方法内联后）</h3>\n<p>可以看到，通过将字节码转换为Sea-of-Nodes IR之后，即时编译器便可以直接去虚化，并将唯一的目标方法进一步内联进来。</p>\n<pre><code>public static int notInlined(BinaryOp op) {\n  if (op instanceof Add) {\n    return op.apply(2, 1);\n  }\n  return 0;\n}\n</code></pre>\n<p>不过，对于上面这段代码中的notInlined方法，尽管理论上即时编译器能够推导出调用者的动态类型为Add，但是C2和Graal都没有这么做。</p>\n<p>其原因在于类型推导属于全局优化，本身比较浪费时间；另一方面，就算不进行基于类型推导的完全去虚化，也有接下来的基于类层次分析的去虚化，以及条件去虚化兜底，覆盖大部分的代码情况。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/14/2f/1492fc7d74c1e904d47196f8f63b682f.png?wh=866*514\" alt=\"\" /></p>\n<h3>notInlined方法的IR图（方法内联失败后）</h3>\n<p>因此，C2和Graal决定，如果生成Sea-of-Nodes IR后，调用者的动态类型已能够直接确定，那么就进行这项去虚化。如果需要额外的数据流分析方能确定，那么干脆不做，以节省编译时间，并依赖接下来的去虚化手段进行优化。</p>\n<h2>基于类层次分析的完全去虚化</h2>\n<p>基于类层次分析的完全去虚化通过分析Java虚拟机中所有已被加载的类，判断某个抽象方法或者接口方法是否仅有一个实现。如果是，那么对这些方法的调用将只能调用至该具体实现中。</p>\n<p>在上面的例子中，假设在编译foo、bar或notInlined方法时，Java虚拟机仅加载了Add。那么，BinaryOp.apply方法只有Add.apply这么一个具体实现。因此，当即时编译器碰到对BinaryOp.apply的调用时，便可直接内联Add.apply的内容。</p>\n<p>那么问题来了，即时编译器如何保证在今后的执行过程中，BinaryOp.apply方法还是只有Add.apply这么一个具体实现呢？</p>\n<p>事实上，它无法保证。因为Java虚拟机有可能在上述编译完成之后加载Sub类，从而引入另一个BinaryOp.apply方法的具体实现Sub.apply。</p>\n<p>Java虚拟机的做法是为当前编译结果注册若干个假设（assumption），假定某抽象类只有一个子类，或者某抽象方法只有一个具体实现，又或者某类没有子类等。</p>\n<p>之后，每当新的类被加载，Java虚拟机便会重新验证这些假设。如果某个假设不再成立，那么Java虚拟机便会对其所属的编译结果进行去优化。</p>\n<pre><code>  public static int test(BinaryOp op) {\n    return op.apply(2, 1);\n  }\n</code></pre>\n<p>以上面这段代码中的test方法为例。假设即时编译的时候，如果类层次分析得出BinaryOp类只有Add一个子类的结论，那么即时编译器可以注册一个假设，假定抽象方法BinaryOp.apply有且仅有Add.apply这个具体实现。</p>\n<p>基于这个假设，原虚方法调用便可直接被去虚化为对Add.apply方法的调用。如果在之后的运行过程中，Java虚拟机又加载了Sub类，那么该假设失效，Java虚拟机需要触发test方法编译结果的去优化。</p>\n<pre><code>  public static int test(Add op) {\n    return op.apply(2, 1); // 仍需添加假设\n  }\n</code></pre>\n<p>事实上，即便调用者的声明类型为Add，即时编译器仍需为之添加假设。这是因为Java虚拟机不能保证没有重写了apply方法的Add类的子类。</p>\n<p>为了保证这里apply方法的语义，即时编译器需要假设Add类没有子类。当然，通过将Add类标注为final，可以避开这个问题。</p>\n<p>可以看到，即时编译器并不要求目标方法使用final修饰符。只要目标方法事实上是final的（effective final），便可以进行相应的去虚化以及内联。</p>\n<p>不过，如果使用了final修饰符，即时编译器便可以不用生成对应的假设。这将使编译结果更加精简，并减少类加载时所需验证的内容。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/f8/91/f87c733b714828c22c9d67c83911cd91.png?wh=674*370\" alt=\"\" /></p>\n<h3>test方法的IR图（方法内联后）</h3>\n<p>让我们回到原本的例子中。从test方法的IR图可以看出，生成的代码无须检测调用者的动态类型是否为Add，便直接执行内联之后的Add.apply方法中的内容（2+1经过常量折叠之后得到3，对应13号常数节点）。这是因为动态类型检测已被移至假设之中了。</p>\n<p>然而，对于接口方法调用，该去虚化手段则不能移除动态类型检测。这是因为在执行invokeinterface指令时，Java虚拟机必须对调用者的动态类型进行测试，看它是否实现了目标接口方法所在的接口。</p>\n<blockquote>\n<p>Java类验证器将接口类型直接看成Object类型，所以有可能出现声明类型为接口，实际类型没有继承该接口的情况，如下例所示。</p>\n</blockquote>\n<pre><code>// A.java\ninterface I {}\n\npublic class A {\n  public static void test(I obj) {\n    System.out.println(&quot;Hello World&quot;);\n  }\n  \n  public static void main(String[] args) {\n    test(new B());\n  }\n}\n\n// B.java\npublic class B implements I { }\n\n// Step 1: compile A.java and B.java\n// Step 2: remove &quot;implements I&quot; from B.java, and compile B.java\n// Step 3: run A\n</code></pre>\n<p>既然这一类型测试无法避免，C2干脆就不对接口方法调用进行基于类层次分析的完全去虚化，而是依赖于接下来的条件去虚化。</p>\n<h2>条件去虚化</h2>\n<p>前面提到，条件去虚化通过向代码中添加若干个类型比较，将虚方法调用转换为若干个直接调用。</p>\n<p>具体的原理非常简单，是将调用者的动态类型，依次与Java虚拟机所收集的类型Profile中记录的类型相比较。如果匹配，则直接调用该记录类型所对应的目标方法。</p>\n<pre><code>  public static int test(BinaryOp op) {\n    return op.apply(2, 1);\n  }\n</code></pre>\n<p>我们继续使用前面的例子。假设编译时类型Profile记录了调用者的两个类型Sub和Add，那么即时编译器可以据此进行条件去虚化，依次比较调用者的动态类型是否为Sub或者Add，并内联相应的方法。其伪代码如下所示：</p>\n<pre><code>  public static int test(BinaryOp op) {\n    if (op.getClass() == Sub.class) {\n      return 2 - 1; // inlined Sub.apply\n    } else if (op.getClass() == Add.class) {\n      return 2 + 1; // inlined Add.apply\n    } else {\n      ... // 当匹配不到类型Profile中的类型怎么办？\n    }\n  }\n</code></pre>\n<p>如果遍历完类型Profile中的所有记录，仍旧匹配不到调用者的动态类型，那么即时编译器有两种选择。</p>\n<p>第一，如果类型Profile是完整的，也就是说，所有出现过的动态类型都被记录至类型Profile之中，那么即时编译器可以让程序进行去优化，重新收集类型Profile，对应的IR图如下所示（这里27号TypeSwitch节点等价于前面伪代码中的多个if语句）：<br />\n<img src=\"https://static001.geekbang.org/resource/image/88/6d/8885061253bc50be255cff736b683f6d.png?wh=874*920\" alt=\"\" /></p>\n<h3>当匹配不到动态类型时进行去优化</h3>\n<p>第二，如果类型Profile是不完整的，也就是说，某些出现过的动态类型并没有记录至类型Profile之中，那么重新收集并没有多大作用。此时，即时编译器可以让程序进行原本的虚调用，通过内联缓存进行调用，或者通过方法表进行动态绑定。对应的IR图如下所示：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/dd/de/ddb0474fdad3031e935003c2d57a04de.png?wh=900*1090\" alt=\"\" /></p>\n<h3>当匹配不到动态类型时进行虚调用（仅在Graal中使用。）</h3>\n<p>在C2中，如果类型Profile是不完整的，即时编译器压根不会进行条件去虚化，而是直接使用内联缓存或者方法表。</p>\n<h2>总结与实践</h2>\n<p>今天我介绍了即时编译器去虚化的几种方法。</p>\n<p>完全去虚化通过类型推导或者类层次分析，将虚方法调用转换为直接调用。它的关键在于证明虚方法调用的目标方法是唯一的。</p>\n<p>条件去虚化通过向代码中增添类型比较，将虚方法调用转换为一个个的类型测试以及对应该类型的直接调用。它将借助Java虚拟机所收集的类型Profile。</p>\n<p>今天的实践环节，我们来重现因类加载导致去优化的过程。</p>\n<pre><code>// Run with java -XX:CompileCommand='dontinline JITTest.test' -XX:+PrintCompilation JITTest\npublic class JITTest {\n  static abstract class BinaryOp {\n      public abstract int apply(int a, int b);\n  }\n\n  static class Add extends BinaryOp {\n      public int apply(int a, int b) {\n          return a + b;\n      }\n  }\n\n  static class Sub extends BinaryOp {\n      public int apply(int a, int b) {\n          return a - b;\n      }\n  }\n\n  public static int test(BinaryOp op) {\n    return op.apply(2, 1);\n  }\n\n  public static void main(String[] args) throws Exception {\n    Add add = new Add();\n    for (int i = 0; i &lt; 400_000; i++) {\n      test(add);\n    }\n\n    Thread.sleep(2000);\n    System.out.println(&quot;Loading Sub&quot;);\n    Sub[] array = new Sub[0]; // Load class Sub\n    // Expect output: &quot;JITTest::test (7 bytes)   made not entrant&quot;\n    Thread.sleep(2000);\n  }\n}\n</code></pre>\n<p></p>\n","neighbors":{"left":{"article_title":"20 | 方法内联（上）","id":14575},"right":{"article_title":"22 | HotSpot虚拟机的intrinsic","id":18046}},"comments":[{"had_liked":false,"id":23895,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1536714975,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"126090766559","product_id":100010301,"comment_content":"感觉跟不上了，先过吧！<br>已经拉下两节了，日后回头再看看。<br>现在仅明白，方法内联-是编译器的一种代码优化手段，会根据不同代码调用方式有不同的优化方式，目的都是为了提高JVM的效率，根本方式，我认为就是采用取巧的方式，提前判断出来可以少做一些事情，然后先提前做一些准备，整体的时间和空间成本会降下来。<br>另外，提供小建议，雨迪能否对于这种比较比较抽象的知识，来点生动形象的比喻以便帮助消化，之前在知乎看到一篇关于锁的文章，全篇通过生动形象的比喻讲解锁的本质、分类、各种锁的特点，读起来一下子就明白了。","like_count":29,"discussions":[{"author":{"id":1297722,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL58j1S6Ax1MOjeEPAA9fZPibzUhRykXLgtpWp4fzeGWwO8SBmQgLx8qq3xcf0dv0ThXiaWNqA6drmQ/132","nickname":"fabulous","note":"","ucode":"E029AF037D5CFE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":115989,"discussion_content":"知乎上锁的地址有吗？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1578049779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299367,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d3/a7/d77e9179.jpg","nickname":"郴江","note":"","ucode":"15C71B121636D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301728,"discussion_content":"同求 ","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598621511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211190,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/36/fd46331c.jpg","nickname":"Jussi Lee","note":"","ucode":"F2F5948CCD52A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401463,"discussion_content":"能不能把链接分享出来","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1633677835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23626,"user_name":"永烁星光","can_delete":false,"product_type":"c1","uid":1119617,"ip_address":"","ucode":"D26A9097F9D24C","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/81/2c31cf79.jpg","comment_is_top":false,"comment_ctime":1536552249,"is_pvip":false,"replies":[{"id":"8608","content":"如果都看懂了，可以考虑来我司，或者阿里的JIT专家职位 :)<br><br>一般来说，了解这些优化针对怎样的代码模式，会转化为怎样的代码就可以啦。至于IR图，主要是用来辅助理解具体的优化过程。","user_name":"作者回复","comment_id":23626,"uid":"1176688","ip_address":"","utype":1,"ctime":1536579382,"user_name_real":"郑雨迪"}],"discussion_count":3,"race_medal":0,"score":"53076159801","product_id":100010301,"comment_content":"IR 图分析看了这三篇，好几次，现在还是不甚明白，","like_count":12,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423645,"discussion_content":"如果都看懂了，可以考虑来我司，或者阿里的JIT专家职位 :)\n\n一般来说，了解这些优化针对怎样的代码模式，会转化为怎样的代码就可以啦。至于IR图，主要是用来辅助理解具体的优化过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536579382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351148,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","nickname":"ppyh","note":"","ucode":"14022ADEC9B53F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390368,"discussion_content":"慢慢坚持吧 漫漫长路啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629802029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1357311,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b5/ff/d1f205b0.jpg","nickname":"L","note":"","ucode":"5B847B2378854E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328768,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606224428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124620,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1565929632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40220635296","product_id":100010301,"comment_content":"漫漫长路，这JAVA一门语言就要如此深究，真特么知无涯","like_count":10},{"had_liked":false,"id":235894,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1595237071,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31660008143","product_id":100010301,"comment_content":"方法内联就是将调用的目标方法，内联到调用者方法里面，以避免目标方法的重复调用带来的开销，但是在内联时，如果目标方法，完全确定，也就是说，目标方法的调用是唯一的，那么直接内联就可，<br>但是由于Java的多态特性，基于接口而非实现编程等，导致目标方法的调用的需要在运行时确定，也就是虚方法的调用在即时编译阶段无法确定唯一调用的目标方法版本，而内联是在即时编译阶段。<br>一部分方法的符号引用在编译阶段就可以确定唯一的调用版本，但是一部分必须在运行时才能将符号引用替换为直接引用，这就导致，在即时编译器进行内联时，这部分方法没法确定唯一的调用版本，于是就有去虚化手段，把虚方法调用通过一定的去虚化手段，直接替换为直接调用，保证内联后的方法在实际运行时不会出错。<br>去虚化的手段，只能尽量保证虚方法的调用能直接替换为直接调用，只有准确的替换，才能体现出内联的优势，如果实在确定不了虚方法调用的准确版本，那么就去优化，也就是不内联了。<br>基于类型的去虚化：通过对象的静态类型，实际类型，一些重载，重写方法的调用，其实编译器能通过具体的数据类型，进行识别。可以说一旦识别，就准确无误。<br>基于层次的去虚化：完全依赖于jvm类的加载，基于只加载一个类的假设。适用场景很受限。<br>基于条件的去虚化：依赖于分层编译时收集的数据。<br>总的来说，内联带来的程序运行的性能提升要远远大于内联的成本。方法内联，为的就是把即时编译的性能发挥到极致。都是为性能考虑的。","like_count":8},{"had_liked":false,"id":70977,"user_name":"一少爷","can_delete":false,"product_type":"c1","uid":1385671,"ip_address":"","ucode":"66C838AC8926BB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdV7Y5XbOicib3slyyVg2JmsjAg9YiaJnujTFia3iaIzic0RAaE4hNTFUgiba3OOwr8g0J6pZntKA3Xl6tQ/132","comment_is_top":false,"comment_ctime":1551237256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27321041032","product_id":100010301,"comment_content":"为什么后面留言的人越来越少了，我觉得后面这些也很关键很有趣呀。对思想的提升很有帮助的。","like_count":6},{"had_liked":false,"id":144705,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1572002094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18751871278","product_id":100010301,"comment_content":"免费的才是最贵的，享受便利的同时，想搞明白确实不容易，我只有个大的概念。感觉这可以类比CPU里面的冒险与预测来理解，都是基于某种方式来优化，让程序跑的更快些。","like_count":4},{"had_liked":false,"id":165249,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1577188621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167123213","product_id":100010301,"comment_content":"基于类型推导的完全去虚化<br>基于类层次分析的完全去虚化<br>条件虚拟化<br>目录挺清楚的，极客时间的文章出个标题侧栏就更好了。","like_count":2},{"had_liked":false,"id":85049,"user_name":"李亮亮","can_delete":false,"product_type":"c1","uid":1116508,"ip_address":"","ucode":"290907F930B261","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/5c/b5d79d20.jpg","comment_is_top":false,"comment_ctime":1554966977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10144901569","product_id":100010301,"comment_content":"后面两张图是不是还应该有Deopt NullCheckException 这条红色的路径？","like_count":2},{"had_liked":false,"id":23358,"user_name":"hqg","can_delete":false,"product_type":"c1","uid":1102094,"ip_address":"","ucode":"001F5D3DAF0ED1","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/0e/b110651a.jpg","comment_is_top":false,"comment_ctime":1536302089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5831269385","product_id":100010301,"comment_content":"遇到jvm崩溃，可否帮分析下","like_count":1},{"had_liked":false,"id":296864,"user_name":"史海洋","can_delete":false,"product_type":"c1","uid":1104791,"ip_address":"","ucode":"C5F7E12BDE31D1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKumMwlVcElxg28b0QZibiaDNxN35BDUvSiaMedz6QqVFC6S0Yp4d5FUicKUV4whGK0lov7fiaicJJnhhRQ/132","comment_is_top":false,"comment_ctime":1623206610,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623206610","product_id":100010301,"comment_content":"这一章比周志明书里讲的还是要深一点.<br>两类去虚化<br>三种去虚化方式<br>首先类型推导，看能否确认唯一类型。<br>再次，类层次分析看能否确认唯一子类。<br>最后基于即时编译收集到的profile做一些假设，以及类型判断。进行去虚化或者去优化。<br>结合即时编译章节看更容易理解后半部分。","like_count":0},{"had_liked":false,"id":226505,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1592124531,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592124531","product_id":100010301,"comment_content":"总结下来：<br>为了将invokeVertual的调用转成直接调用，然后进行内联<br>而方案有：<br>类型推导，条件判断，类层次分析<br>类型推导就是看代码中对应虚方法调用的实际类型，如果存在多种类型调用这个方案就无效了。<br>条件判断是判断每一个虚方法对应实现类，然后转成直接调用。<br>类层次调用则根据虚方法对应的实现类是否只有一个类型被加载。<br>","like_count":0},{"had_liked":false,"id":205927,"user_name":"GaGi","can_delete":false,"product_type":"c1","uid":1099053,"ip_address":"","ucode":"CC8D22E1DD8CA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c5/2d/1eebfc3c.jpg","comment_is_top":false,"comment_ctime":1586758819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586758819","product_id":100010301,"comment_content":"文中：“如果某个假设不再成立，那么 Java 虚拟机便会对其所属的编译结果进行去优化”的去优化是什么意思呢？","like_count":0},{"had_liked":false,"id":200609,"user_name":"单俊宁","can_delete":false,"product_type":"c1","uid":1855289,"ip_address":"","ucode":"403678A72C3305","user_header":"https://static001.geekbang.org/account/avatar/00/1c/4f/39/cb4df994.jpg","comment_is_top":false,"comment_ctime":1585623860,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585623860","product_id":100010301,"comment_content":"想问老师，很多底层理论知识当时学了，过了一段时间就忘了，怎么和实际工作联系起来，不至于过段时间就忘了","like_count":0,"discussions":[{"author":{"id":1460942,"avatar":"https://static001.geekbang.org/account/avatar/00/16/4a/ce/affe4307.jpg","nickname":"叫啥不行","note":"","ucode":"A84B9B6594BF35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283819,"discussion_content":"造火箭用，平常拧螺丝怎么可能联系起来","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592374310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198786,"user_name":"小陈","can_delete":false,"product_type":"c1","uid":1009385,"ip_address":"","ucode":"A03A299310AD18","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/e9/814d057a.jpg","comment_is_top":false,"comment_ctime":1585468269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585468269","product_id":100010301,"comment_content":"ir图很深奥啊，看不懂呐","like_count":0},{"had_liked":false,"id":165259,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1577190093,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577190093","product_id":100010301,"comment_content":"可以结合05篇看。","like_count":0},{"had_liked":false,"id":27449,"user_name":"星星个是大太阳丶","can_delete":false,"product_type":"c1","uid":1113823,"ip_address":"","ucode":"D12A2F94417100","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/df/f1ce77a8.jpg","comment_is_top":false,"comment_ctime":1537888775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537888775","product_id":100010301,"comment_content":"节点上的P（0）是否是代表方法的参数，C(1)这些代表常量，各个节点的线的颜色是否有什么含义呢？老师能不能指导一下","like_count":0},{"had_liked":false,"id":23667,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1014800,"ip_address":"","ucode":"7E57FDCB5E5D49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg","comment_is_top":false,"comment_ctime":1536580828,"is_pvip":false,"replies":[{"id":"8677","content":"每条类型相关字节码，如invokeinterface invokevirtual checkcast instanceof等","user_name":"作者回复","comment_id":23667,"uid":"1176688","ip_address":"","utype":1,"ctime":1536649856,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"1536580828","product_id":100010301,"comment_content":"是每个对象有type profile的限制么？","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423669,"discussion_content":"每条类型相关字节码，如invokeinterface invokevirtual checkcast instanceof等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536649856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23519,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1014800,"ip_address":"","ucode":"7E57FDCB5E5D49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg","comment_is_top":false,"comment_ctime":1536462487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536462487","product_id":100010301,"comment_content":"是C1在不同的编译层次么？","like_count":0},{"had_liked":false,"id":23516,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1014800,"ip_address":"","ucode":"7E57FDCB5E5D49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg","comment_is_top":false,"comment_ctime":1536460545,"is_pvip":false,"replies":[{"id":"8601","content":"回了原提问，这里复制一下:<br><br>每个字节码的type profile有数量限制，比如默认情况下只能存两个不同的动态类型。如果收集profile过程中来了三个不同的动态类型，那么JVM不能全部记下来，因此即时编译器看到的type profile是不完整的。","user_name":"作者回复","comment_id":23516,"uid":"1176688","ip_address":"","utype":1,"ctime":1536578717,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"1536460545","product_id":100010301,"comment_content":"我也不清楚，什么时候可以有完整的profile，什么时候是不完整的","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423599,"discussion_content":"回了原提问，这里复制一下:\n\n每个字节码的type profile有数量限制，比如默认情况下只能存两个不同的动态类型。如果收集profile过程中来了三个不同的动态类型，那么JVM不能全部记下来，因此即时编译器看到的type profile是不完整的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536578717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23466,"user_name":"Void_seT","can_delete":false,"product_type":"c1","uid":1070863,"ip_address":"","ucode":"DD55CB0198A5CD","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg","comment_is_top":false,"comment_ctime":1536387739,"is_pvip":false,"replies":[{"id":"8599","content":"每个字节码的type profile有数量限制，比如默认情况下只能存两个不同的动态类型。如果收集profile过程中来了三个不同的动态类型，那么JVM不能全部记下来，因此即时编译器看到的type profile是不完整的。","user_name":"作者回复","comment_id":23466,"uid":"1176688","ip_address":"","utype":1,"ctime":1536578687,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"1536387739","product_id":100010301,"comment_content":"老师，想请教一下，“类型Profile”完整还是不完整，是如何判断的？","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423574,"discussion_content":"每个字节码的type profile有数量限制，比如默认情况下只能存两个不同的动态类型。如果收集profile过程中来了三个不同的动态类型，那么JVM不能全部记下来，因此即时编译器看到的type profile是不完整的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536578687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}