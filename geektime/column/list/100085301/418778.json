{"id":418778,"title":"加餐｜愚昧之巅：你的Rust学习常见问题汇总","content":"<p>你好，我是陈天。</p><p>到目前为止，我们已经学了很多 Rust 的知识，比如基本语法、内存管理、所有权、生命周期等，也展示了三个非常有代表性的示例项目，让你了解接近真实应用环境的 Rust 代码是什么样的。</p><p>虽然学了这么多东西，你是不是还是有种“一学就会，一写就废”的感觉？别着急，饭要一口一口吃，任何新知识的学习都不是一蹴而就的，我们让子弹先飞一会。你也可以鼓励一下自己，已经完成了这么多次打卡，继续坚持。</p><p>在今天这个加餐里我们就休个小假，调整一下学习节奏，来聊一聊 Rust 开发中的常见问题，希望可以解决你的一些困惑。</p><h2>所有权问题</h2><p><strong>Q：</strong>如果我想创建双向链表，该怎么处理？</p><p>Rust 标准库有 <a href=\"https://doc.rust-lang.org/std/collections/struct.LinkedList.html\">LinkedList</a>，它是一个双向链表的实现。但是当你需要使用链表的时候，可以先考虑一下，<strong>同样的需求是否可以用列表 Vec&lt;T&gt;、循环缓冲区 VecDeque&lt;T&gt; 来实现</strong>。因为，链表对缓存非常不友好，性能会差很多。</p><p>如果你只是好奇如何实现双向链表，那么可以用之前讲的 Rc / RefCell （<a href=\"https://time.geekbang.org/column/article/416722\">第9讲</a>）来实现。对于链表的 next 指针，你可以用 Rc；对于 prev 指针，可以用 <a href=\"https://doc.rust-lang.org/std/rc/struct.Weak.html\">Weak</a>。</p><p>Weak 相当于一个弱化版本的 Rc，不参与到引用计数的计算中，而Weak 可以 <a href=\"https://doc.rust-lang.org/std/rc/struct.Weak.html#method.upgrade\">upgrade</a> 到 Rc 来使用。如果你用过其它语言的引用计数数据结构，你应该对 Weak 不陌生，它可以帮我们打破循环引用。感兴趣的同学可以自己试着实现一下，然后对照这个<a href=\"https://gist.github.com/matey-jack/3e19b6370c6f7036a9119b79a82098ca\">参考实现</a>。</p><!-- [[[read_end]]] --><p>你也许好奇为什么 Rust 标准库的 LinkedList 不用 Rc/Weak，那是因为标准库直接用 <a href=\"https://doc.rust-lang.org/std/ptr/struct.NonNull.html\">NonNull</a> 指针和 unsafe。</p><p><strong>Q：</strong>编译器总告诉我：“use of moved value” 错误，该怎么破？</p><p>这是我们初学 Rust 时经常会遇到的错误，这个错误是说<strong>你在试图访问一个所有权已经移走的变量</strong>。</p><p>对于这样的错误，首先你要判断，这个变量真的需要被移动到另一个作用域下么？如果不需要，可不可以使用借用？（<a href=\"https://time.geekbang.org/column/article/415988\">第8讲</a>）如果的确需要移动给另一个作用域的话：</p><ol>\n<li>如果需要多个所有者共享同一份数据，可以使用 Rc / Arc，辅以 Cell / RefCell / Mutex / RwLock。（<a href=\"https://time.geekbang.org/column/article/416722\">第9讲</a>）</li>\n<li>如果不需要多个所有者共享，那可以考虑实现 Clone 甚至 Copy。（<a href=\"https://time.geekbang.org/column/article/415988\">第7讲</a>）</li>\n</ol><h2>生命周期问题</h2><p><strong>Q：</strong>为什么我的函数返回一个引用的时候，编译器总是跟我过不去？</p><p>函数返回引用时，除非是静态引用，那么这个引用一定和带有引用的某个输入参数有关。输入参数可能是 &amp;self、&amp;mut self 或者 &amp;T / &amp;mut T。<strong>我们要建立正确的输入和返回值之间的关系，这个关系和函数内部的实现无关，只和函数的签名有关</strong>。</p><p>比如 HashMap 的 <a href=\"https://doc.rust-lang.org/src/std/collections/hash/map.rs.html#729-735\">get() 方法</a>：</p><pre><code class=\"language-rust\">pub fn get&lt;Q: ?Sized&gt;(&amp;self, k: &amp;Q) -&gt; Option&lt;&amp;V&gt;\n    where\n        K: Borrow&lt;Q&gt;,\n        Q: Hash + Eq\n</code></pre><p>我们并不用实现它或者知道它如何实现，就可以确定返回值 Option&lt;&amp;V&gt; 到底跟谁有关系。因为这里只有两个选择：&amp;self 或者 k: &amp;Q。显然是 &amp;self，因为 HashMap 持有数据，而 k 只是用来在 HashMap 里查询的 key。</p><p>这里为什么不需要使用生命周期参数呢？因为我们之前讲的规则：<strong>当 &amp;self / &amp;mut self 出现时，返回值的生命周期和它关联</strong>。（<a href=\"https://time.geekbang.org/column/article/417384\">第10讲</a>）这是一个很棒的规则，因为大部分方法，如果返回引用，它基本上是引用 &amp;self 里的某个数据。</p><p>如果你能搞明白这一层关系，那么就比较容易处理，函数返回引用时出现的生命周期错误。</p><p>当你要返回在函数执行过程中，创建的或者得到的数据，和参数无关，那么<strong>无论它是一个有所有权的数据，还是一个引用，你只能返回带所有权的数据</strong>。对于引用，这就意味着调用 clone() 或者 to_owned() 来，从引用中得到所有权。</p><h2>数据结构问题</h2><p><strong>Q：</strong>为什么 Rust 字符串这么混乱，有 String、&amp;String、&amp;str 这么多不同的表述？</p><p>我不得不说，这是一个很有误导性的问题，因为这个问题有点胡乱总结的倾向，很容易把人带到沟里。</p><p>首先，任何数据结构 T，都可以有指向它的引用 &amp;T，<strong>所以 String 跟 &amp;String的区别，以及 String 跟 &amp;str的区别，压根是两个问题</strong>。</p><p>更好的问题是：为什么有了 String，还要有 &amp;str？或者，更通用的问题：为什么 String、Vec&lt;T&gt; 这样存放连续数据的容器，还要有切片的概念呢？</p><p>一旦问到点子上，答案不言自喻，因为切片是一个非常通用的数据结构。</p><p>用过 Python 的人都知道：</p><pre><code class=\"language-python\">s = \"hello world\"\nlet slice1 = s[:5] # 可以对字符串切片\nlet slice2 = slice1[1:3] # 可以对切片再切片\nprint(slice1, slice2) # 打印 hello, el\n</code></pre><p>这和 Rust 的 String 切片何其相似：</p><pre><code class=\"language-rust\">let s = \"hello world\".to_string();\nlet slice1 = &amp;s[..5]; // 可以对字符串切片\nlet slice2 = &amp;slice1[1..3]; // 可以对切片再切片\nprintln!(\"{} {}\", slice1, slice2); // 打印 hello el\n</code></pre><p>所以 &amp;str 是 String 的切片，也可以是 &amp;str 的切片。它和 &amp;[T] 一样，没有什么特别的，就是一个带着长度的胖指针，指向了一片连续的内存区域。</p><p>你可以这么理解：<strong>切片之于 Vec&lt;T&gt; / String 等数据，就好比数据库里的视图（view）之于表（table）</strong>。关于这个问题我们会在后面，讲Rust的数据结构时详细讲到。</p><p><strong>Q：</strong>在课程的示例代码中，用了很多 unwrap()，这样可以么？</p><p>当我们需要从 Option<t> 或者 Result&lt;T, E&gt; 中获得数据时，可以使用 unwrap()，这是示例代码出现 unwrap() 的原因。</t></p><p>如果我们只是写一些学习性质的代码，那么 unwrap() 是可以接受的，但在生产环境中，除非你可以确保 unwrap() 不会引发 panic!()，否则应该使用模式匹配来处理数据，或者使用错误处理的 ? 操作符。我们后续会有专门一讲聊 Rust 的错误处理。</p><p>那什么情况下我们可以确定 unwrap() 不会 panic 呢？如果在做 unwrap() 之前，<strong>Option&lt;T&gt; 或者 Result&lt;T, E&gt; 中已经有合适的值（Some(T) 或者 Ok(T)）</strong>，你就可以做 unwrap()。比如这样的代码：</p><pre><code class=\"language-rust\">// 假设 v 是一个 Vec&lt;T&gt;\nif v.is_empty() {\n    return None;\n}\n\n// 我们现在确定至少有一个数据，所以 unwrap 是安全的\nlet first = v.pop().unwrap();\n</code></pre><p><strong>Q：</strong>为什么标准库的数据结构比如 Rc / Vec 用那么多 unsafe，但别人总是告诉我，unsafe 不好？</p><p>好问题。C 语言的开发者也认为 asm 不好，但 C 的很多库里也大量使用 asm。</p><p>标准库的责任是，在保证安全的情况下，即使牺牲一定的可读性，也要用最高效的手段来实现要实现的功能；同时，为标准库的用户提供一个优雅、高级的抽象，让他们可以在绝大多数场合下写出漂亮的代码，无需和丑陋打交道。</p><p>Rust中，unsafe 代码把程序的正确性和安全性交给了开发者来保证，而标准库的开发者花了大量的精力和测试来保证这种正确性和安全性。而我们自己撰写 unsafe 代码时，除非有经验丰富的开发者 review 代码，否则，有可能疏于对并发情况的考虑，写出了有问题的代码。</p><p>所以只要不是必须，建议不要写 unsafe 代码。<strong>毕竟大部分我们要处理的问题，都可以通过良好的设计、合适的数据结构和算法来实现</strong>。</p><p><strong>Q：</strong>在 Rust 里，我如何声明全局变量呢？</p><p>在<a href=\"https://time.geekbang.org/column/article/411632\">第3讲</a>里，我们讲过 const 和 static，它们都可以用于声明全局变量。但注意，除非使用 unsafe，static 无法作为 mut 使用，因为这意味着它可能在多个线程下被修改，所以不安全：</p><pre><code class=\"language-rust\">static mut COUNTER: u64 = 0; \n\nfn main() {\n    COUNTER += 1; // 编译不过，编译器告诉你需要使用 unsafe\n}\n</code></pre><p>如果你的确想用可写的全局变量，可以用 Mutex&lt;T&gt;，然而，初始化它很麻烦，这时，你可以用一个库 <a href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/\">lazy_static</a>。比如（<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4a292c22d7c1ad359e64d36a3f6806ab\">代码</a>）：</p><pre><code class=\"language-rust\">use lazy_static::lazy_static;\nuse std::collections::HashMap;\nuse std::sync::{Arc, Mutex};\n\nlazy_static! {\n    static ref HASHMAP: Arc&lt;Mutex&lt;HashMap&lt;u32, &amp;'static str&gt;&gt;&gt; = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        Arc::new(Mutex::new(m))\n    };\n}\n\nfn main() {\n    let mut map = HASHMAP.lock().unwrap();\n    map.insert(3, \"waz\");\n\n    println!(\"map: {:?}\", map);\n}\n</code></pre><h2>调试工具</h2><p><strong>Q：</strong>Rust 下，一般如何调试应用程序？</p><p>我自己一般会用 tracing 来打日志，一些简单的示例代码会使用 println! / dbg! ，来查看数据结构在某个时刻的状态。而在平时的开发中，我几乎不会用调试器设置断点单步跟踪。</p><p>因为与其浪费时间在调试上，不如多花时间做设计。<strong>在实现的时候，添加足够清晰的日志，以及撰写合适的单元测试，来确保代码逻辑上的正确性</strong>。如果你发现自己总需要使用调试工具单步跟踪才能搞清楚程序的状态，说明代码没有设计好，过于复杂。</p><p>当我学习 Rust 时，会常用调试工具来查看内存信息，后续的课程中我们会看到，在分析有些数据结构时使用了这些工具。</p><p>Rust 下，我们可以用 <a href=\"https://github.com/rust-lang/rust/blob/master/src/etc/rust-gdb\">rust-gdb</a> 或 <a href=\"https://github.com/rust-lang/rust/blob/master/src/etc/rust-lldb\">rust-lldb</a>，它们提供了一些对 Rust 更友好的 pretty-print 功能，在安装 Rust 时，它们也会被安装。我个人习惯使用 gdb，但 rust-gdb 适合在 linux 下，在 OS X 下有些问题，所以我一般会切到 Ubuntu 虚拟机中使用 rust-gdb。</p><h2>其它问题</h2><p><strong>Q：</strong>为什么 Rust 编译出来的二进制那么大？为什么 Rust 代码运行起来那么慢？</p><p>如果你是用 cargo build 编译出来的，那很正常，因为这是个 debug build，里面有大量的调试信息。你可以用 cargo build --release 来编译出优化过的版本，它会小很多。另外，还可以通过很多方法进一步优化二进制的大小，如果你对此感兴趣，可以参考这个<a href=\"https://github.com/johnthagen/min-sized-rust\">文档</a>。</p><p>Rust的很多库如果你不用 --release 来编译，它不会做任何优化，有时候甚至感觉比你的 Node.js 代码还慢。所以当你要把代码应用在生产环境，一定要使用 release build。</p><p><strong>Q：</strong>这门课使用什么样的 Rust 版本？会随着 2021 edition 更新么？</p><p>会的。Rust 是一门不断在发展的语言，每六周就会有一个新的版本诞生，伴随着很多新的功能。比如 <a href=\"https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html\">const generics</a>（<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1f2d31bcc74d6a2582e344b5d8e9288a\">代码</a>）：</p><pre><code class=\"language-rust\">#[derive(Debug)]\nstruct Packet&lt;const N: usize&gt; {\n    data: [u8; N],\n}\n\nfn main() {\n    let ip = Packet { data: [0u8; 20] };\n    let udp = Packet { data: [0u8; 8] };\n    \n    println!(\"ip: {:?}, udp: {:?}\", ip, udp);\n}\n</code></pre><p>再比如最近刚发的 <a href=\"https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html\">1.55</a> 支持了 open range pattern（<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f42ce3a4464501791cbe3f4e2bfc8cc7\">代码</a>）：</p><pre><code class=\"language-rust\">fn main() {\n    println!(\"{}\", match_range(10001));\n}\n\nfn match_range(v: usize) -&gt; &amp;'static str {\n    match v {\n        0..=99 =&gt; \"good\",\n        100..=9999 =&gt; \"unbelievable\",\n        10000.. =&gt; \"beyond expectation\",\n        _ =&gt; unreachable!(),\n    }\n}\n</code></pre><p>再过一个多月，Rust 就要发布 2021 edition 了。由于 Rust 良好的向后兼容能力，我建议保持使用最新的 Rust 版本。等 2021 edition 发布后，我会更新代码库到 2021 edition，文稿中的相应代码也会随之更新。</p><h2>思考题</h2><p>来一道简单的思考题，我们把之前学的内容融会贯通一下，代码展示了有问题的生命周期，你能找到原因么？（<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a71fcd49f8562fba6b01912715ee9133\">代码</a>）</p><pre><code class=\"language-rust\">use std::str::Chars;\n\n// 错误，为什么？\nfn lifetime1() -&gt; &amp;str {\n    let name = \"Tyr\".to_string();\n    &amp;name[1..]\n}\n\n// 错误，为什么？\nfn lifetime2(name: String) -&gt; &amp;str {\n    &amp;name[1..]\n}\n\n// 正确，为什么？\nfn lifetime3(name: &amp;str) -&gt; Chars {\n    name.chars()\n}\n</code></pre><p>欢迎在留言区抢答，也非常欢迎你分享这段时间的学习感受，一起交流进步。我们下节课回归正文讲Rust的类型系统，下节课见！</p>","comments":[{"had_liked":false,"id":330325,"user_name":"秋声赋","can_delete":false,"product_type":"c1","uid":1214412,"ip_address":"","ucode":"56E3AECD442E6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/87/cc/628b5fe3.jpg","comment_is_top":true,"comment_ctime":1641912101,"is_pvip":false,"replies":[{"id":"120473","content":"06那篇有简单讲到宏，不过因为宏是高级内容在课程里目前没有详细讲解，你可以自己找资料学习。之后老师有空会补充一篇关于宏的内容，也欢迎期待～","user_name":"编辑回复","comment_id":330325,"uid":"2547771","ip_address":"","utype":2,"ctime":1642039573,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"9.2233720470866002e+18","product_id":100085301,"comment_content":"我看到用了很多的宏，这个有没有详细的说明呢？","like_count":2,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545683,"discussion_content":"06那篇有简单讲到宏，不过因为宏是高级内容在课程里目前没有详细讲解，你可以自己找资料学习。之后老师有空会补充一篇关于宏的内容，也欢迎期待～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642039573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312472,"user_name":"lisiur","can_delete":false,"product_type":"c1","uid":1201350,"ip_address":"","ucode":"CEB2DBCE29CAA7","user_header":"https://static001.geekbang.org/account/avatar/00/12/54/c6/c2481790.jpg","comment_is_top":false,"comment_ctime":1631836215,"is_pvip":false,"replies":[{"id":"113217","content":"非常棒！","user_name":"作者回复","comment_id":312472,"uid":"1079375","ip_address":"","utype":1,"ctime":1631844304,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"147660724279","product_id":100085301,"comment_content":"第一个，没有标注生命周期，但即使标注也不对，因为返回值引用了本地已经 drop 的 String，会造成悬垂指针问题；<br><br>第二个，和第一个类似，因为参数是具有所有权的 String，该 String 会在函数执行完后被 drop，返回值不能引用该 String；<br><br>第三个，因为 Chars 的完整定义是 Chars&lt;&#39;a&gt;，根据生命周期标注规则，Chars 内部的引用的生命周期和参数 name 一致，所以不会产生问题。","like_count":34,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526975,"discussion_content":"非常棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631844304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312522,"user_name":"乌龙猹","can_delete":false,"product_type":"c1","uid":2739949,"ip_address":"","ucode":"43F94A0DEC54BE","user_header":"https://static001.geekbang.org/account/avatar/00/29/ce/ed/3dbe915b.jpg","comment_is_top":false,"comment_ctime":1631848102,"is_pvip":false,"replies":[{"id":"113270","content":":) 做这一门课我就感觉已经竭尽全力了，做完估计要休半年才能缓过来","user_name":"作者回复","comment_id":312522,"uid":"1079375","ip_address":"","utype":1,"ctime":1631927415,"user_name_real":"Tyr"}],"discussion_count":6,"race_medal":0,"score":"74646292134","product_id":100085301,"comment_content":"陈老师，啥时候再出一门 Elixir 编程的第一课啊 ","like_count":17,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526998,"discussion_content":":) 做这一门课我就感觉已经竭尽全力了，做完估计要休半年才能缓过来","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1631927415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1805805,"avatar":"","nickname":"renee","note":"","ucode":"3821D9296CD19F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":578267,"discussion_content":"天哥，辛苦了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656637006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":526998,"ip_address":""},"score":578267,"extra":""}]},{"author":{"id":1214893,"avatar":"https://static001.geekbang.org/account/avatar/00/12/89/ad/4efd929a.jpg","nickname":"老荀","note":"","ucode":"C32E743518DECD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552432,"discussion_content":"陈老师的课买爆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645457187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1021850,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/97/9a/01f87514.jpg","nickname":"woodong","note":"","ucode":"069EE091ADB5F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541882,"discussion_content":"好期待～  /兴奋","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640590830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1159437,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/tNAmMmIN8MMCd1Leto5gtH2XhIzVRgAeqe6RJOsibEZtPpQH81MBvxu6xY5pL2fgkqNzgerQwYrmO9U3UYU2Tmw/132","nickname":"Zilr","note":"","ucode":"A38FD050DB316B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397509,"discussion_content":"是说真有可能做吗? 期待","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632630572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2739949,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ce/ed/3dbe915b.jpg","nickname":"乌龙猹","note":"","ucode":"43F94A0DEC54BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394571,"discussion_content":"没关系 啥时候出  一定支持 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631943006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312464,"user_name":"gnu","can_delete":false,"product_type":"c1","uid":1631832,"ip_address":"","ucode":"B598402D9377D9","user_header":"https://static001.geekbang.org/account/avatar/00/18/e6/58/a0f74927.jpg","comment_is_top":false,"comment_ctime":1631812275,"is_pvip":false,"replies":[{"id":"113219","content":"非常棒！修改得也很棒！","user_name":"作者回复","comment_id":312464,"uid":"1079375","ip_address":"","utype":1,"ctime":1631844387,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"44581485235","product_id":100085301,"comment_content":"lifetime1: <br>返回的引用是在 lifetime1 里被分配，lifetime1 结束后引用就被回收，所以错误。<br>改为转成 string 后返回。<br>```<br>fn lifetime1() -&gt; String {<br>    let name = &quot;Tyr&quot;.to_string();<br>    name[1..].to_string()<br>}<br>```<br><br><br>lifetime2:<br>函数参数是 String，编译器无法通过参数确定返回值 &amp;str 的生命周期。<br>修改为<br>```<br>fn lifetime2(name: &amp;String) -&gt; &amp;str {<br>    &amp;name[1..]<br>}<br>```<br><br>lifetime3:<br>返回 Chars 类型的生命周期与参数 name 关联，所以正确。","like_count":10,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526972,"discussion_content":"非常棒！修改得也很棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631844387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312562,"user_name":"Arthur","can_delete":false,"product_type":"c1","uid":1784009,"ip_address":"","ucode":"1C064405490769","user_header":"https://static001.geekbang.org/account/avatar/00/1b/38/c9/63ea8fe6.jpg","comment_is_top":false,"comment_ctime":1631865430,"is_pvip":true,"replies":[{"id":"113265","content":"非常好，目前最棒的答案！","user_name":"作者回复","comment_id":312562,"uid":"1079375","ip_address":"","utype":1,"ctime":1631926640,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"40286571094","product_id":100085301,"comment_content":"lifetime1:<br>name为函数内部的临时变量，类型是String，函数返回值为其引用，但引用的变量name生命周期在函数结束时，会被drop，因此此处引用失效，无值可借；<br><br>lifetime2:<br>name为具有所有权的参数，类型是String，在函数被调用时，所有权会move给name，在函数执行结束时，name会被drop，因此返回值的引用还是无值可借，编译器无法推导出合理的生命周期；<br><br>lifetime3:<br>chars()返回的iterator具有和函数参数name相同的生命周期，name本身又是一个借用，真正具有所有权的变量存活的比函数久，因此这个函数可以编译通过<br><br>参考材料：<br>编译器报错信息<br>```plain<br>   |<br>12 | fn lifetime1() -&gt; &amp;str {<br>   |                   ^ expected named lifetime parameter<br>   |<br>   = help: this function&#39;s return type contains a borrowed value, but there is no value for it to be borrowed from<br><br>  --&gt; src&#47;main.rs:18:31<br>   |<br>18 | fn lifetime2(name: String) -&gt; &amp;str {<br>   |                               ^ expected named lifetime parameter<br>   |<br>   = help: this function&#39;s return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments<br><br>```<br><br>标准库具体实现<br>```rust<br>&#47;&#47; Returns an iterator over the chars of a string slice.<br>pub fn chars(&amp;self) -&gt; Chars&lt;&#39;_&gt;<br><br>&#47;&#47; Converts the given value to a String.<br>fn to_string(&amp;self) -&gt; String<br>```","like_count":9,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527026,"discussion_content":"非常好，目前最棒的答案！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631926640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318235,"user_name":"彭亚伦","can_delete":false,"product_type":"c1","uid":2425378,"ip_address":"","ucode":"77A32C73A23F72","user_header":"https://static001.geekbang.org/account/avatar/00/25/02/22/19585900.jpg","comment_is_top":false,"comment_ctime":1635212131,"is_pvip":true,"replies":[{"id":"116585","content":"&amp;str &#47; &amp;String 生命周期为什么不一样？生命周期和类型无关，和数据有关。我猜你说 &amp;str 和 &amp;String 声明周期不一样，是因为我们会使用 string literal，比如：<br><br>let s1 = &quot;hello&quot;;<br>let s2 = &quot;hello&quot;.to_stirng();<br><br>这两者生命周期不一样是因为 &quot;hello&quot; 本身是 &amp;&#39;static（编译时放在 RODATA section 中），而 s2 复制了一份 &quot;hello&quot; 放在堆上。","user_name":"作者回复","comment_id":318235,"uid":"1079375","ip_address":"","utype":1,"ctime":1636643945,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"23110048611","product_id":100085301,"comment_content":"关于String 和 &amp;str相关的各种问题,  我的经验, 一个核心原因是因为 String 实现了Deref&lt;Target = str&gt;,  String和&amp;str是通过这个Deref Trait建立了互换的关系; <br><br>这样做带来了很多便利, 同时也有个side effect, 就是当参数要求是 &amp;str 时, 实参可能是&amp;str也可能是&amp;String, 而两者的生命周期明显是不一样的, 于是就产生了各种看似比较难以琢磨的问题.","like_count":5,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529148,"discussion_content":"&amp;amp;str / &amp;amp;String 生命周期为什么不一样？生命周期和类型无关，和数据有关。我猜你说 &amp;amp;str 和 &amp;amp;String 声明周期不一样，是因为我们会使用 string literal，比如：\n\nlet s1 = &amp;quot;hello&amp;quot;;\nlet s2 = &amp;quot;hello&amp;quot;.to_stirng();\n\n这两者生命周期不一样是因为 &amp;quot;hello&amp;quot; 本身是 &amp;amp;&amp;#39;static（编译时放在 RODATA section 中），而 s2 复制了一份 &amp;quot;hello&amp;quot; 放在堆上。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636643945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312574,"user_name":"记事本","can_delete":false,"product_type":"c1","uid":1401568,"ip_address":"","ucode":"FA942636EE0CC8","user_header":"https://static001.geekbang.org/account/avatar/00/15/62/e0/d2ff52da.jpg","comment_is_top":false,"comment_ctime":1631870527,"is_pvip":false,"replies":[{"id":"113272","content":"是的，所以 * 不能直接使用在诸如 String &#47; Vec 这样数据结构的引用上。当你尝试这样做，编译器会报错：数据被 borrow，但又被 move，且没有实现 copy，所以错误。<br><br>```rust<br>fn main() {<br>    let s = &quot;hello&quot;.to_string();<br>    let r1 = &amp;s;<br>    let s1 = *r1;<br>    <br>    println!(&quot;{:?}&quot;, s1);<br>}<br>```<br><br>所以这里会编译出错，而不是移动所有权。你不能一边借用，一边移动所有权。","user_name":"作者回复","comment_id":312574,"uid":"1079375","ip_address":"","utype":1,"ctime":1631928173,"user_name_real":"Tyr"}],"discussion_count":2,"race_medal":0,"score":"18811739711","product_id":100085301,"comment_content":"老师，关于智能指针一些问题：<br>数据放在堆上，返回指针给栈上的结构体<br>智能指针有个特点，*解耦到原型，&amp;*就是获取数据的引用，单&amp;栈上结构体的地址<br>*因为会解耦出原型，所以原数据是否实现copy trait，否则会move，智能指针就没有所有权了","like_count":4,"discussions":[{"author":{"id":1390032,"avatar":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","nickname":"阿成","note":"","ucode":"CEC3CD65FB9333","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531783,"discussion_content":"但这跟智能指针没啥关系啊……\n看这个例子：\nstruct Simple;\nfn main() {\n    let simple = Simple;\n    let ref_simple = &amp;simple;\n   let moved_place = *ref_simple; // ERROR: cannot move out of `*ref_simple` which is behind a shared reference \n}\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637416137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527031,"discussion_content":"是的，所以 * 不能直接使用在诸如 String / Vec 这样数据结构的引用上。当你尝试这样做，编译器会报错：数据被 borrow，但又被 move，且没有实现 copy，所以错误。\n\n```rust\nfn main() {\n    let s = &amp;quot;hello&amp;quot;.to_string();\n    let r1 = &amp;amp;s;\n    let s1 = *r1;\n    \n    println!(&amp;quot;{:?}&amp;quot;, s1);\n}\n```\n\n所以这里会编译出错，而不是移动所有权。你不能一边借用，一边移动所有权。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631928173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312697,"user_name":"Kerry","can_delete":false,"product_type":"c1","uid":2061524,"ip_address":"","ucode":"92F809EC998FC6","user_header":"https://static001.geekbang.org/account/avatar/00/1f/74/d4/38d813f0.jpg","comment_is_top":false,"comment_ctime":1631945804,"is_pvip":false,"replies":[{"id":"113315","content":"👍 非常好。要注意的是例子 1 的改法并不是通用的，它只适合少数可以 &amp;&#39;static 的情况。","user_name":"作者回复","comment_id":312697,"uid":"1079375","ip_address":"","utype":1,"ctime":1631982059,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"14516847692","product_id":100085301,"comment_content":"例子一：<br><br>1. &amp;str生命周期不明确<br>2. 返回了局部函数拥有所有权的引用，也是生命周期问题<br><br>可改为：<br><br>fn lifetime1() -&gt; &amp;&#39;static str { <br>    let name = &quot;Tyr&quot;;<br>    &amp;name[1..]<br>}<br><br>例子二：<br><br>函数参数不是引用类型，而且String没有实现Copy Trait，传参的时候会把形参的所有权给到实参，这时候跟例子一是一样的。解决办法是把形参定义为引用类型，如&amp;str（&amp;String也不是不行）:<br><br>fn lifetime2(name: &amp;str) -&gt; &amp;str { <br>    &amp;name[1..]<br>}<br><br>注意这里例子二不用指定返回值的生命周期，因为编译器可以从参数列表自动推断。<br><br>例子三：<br><br>Chars是字符串切片迭代器，生命周期与&amp;str是一致的，这一点可以从签名中看出：<br><br>&#47;&#47; std::str::chars<br>pub fn chars(&amp;self) -&gt; Chars&lt;&#39;_&gt;<br><br>&#47;&#47; std::str::Chars<br>pub struct Chars&lt;&#39;a&gt; {<br>    pub(super) iter: slice::Iter&lt;&#39;a, u8&gt;,<br>}","like_count":3,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527083,"discussion_content":"👍 非常好。要注意的是例子 1 的改法并不是通用的，它只适合少数可以 &amp;amp;&amp;#39;static 的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631982059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312494,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1631842344,"is_pvip":false,"replies":[{"id":"113214","content":"非常棒！","user_name":"作者回复","comment_id":312494,"uid":"1079375","ip_address":"","utype":1,"ctime":1631844261,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":2,"score":"14516744232","product_id":100085301,"comment_content":"比较简单的问题，第一个 name 在函数里面创建的 String，函数返回时就释放掉了，这是最直白的悬垂引用。第二个 name 是从调用者 move 过来的 String，进入该函数，所有权就归函数了，返回时 name 也将被释放。第三个 name 不用加生命周期标注可以正常工作，参数是引用，返回的数据与该参数的生命周期相同，没有问题，可以编译通过。","like_count":3,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526987,"discussion_content":"非常棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631844261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319074,"user_name":"丁卯","can_delete":false,"product_type":"c1","uid":1142858,"ip_address":"","ucode":"62F4E3BA34278A","user_header":"https://static001.geekbang.org/account/avatar/00/11/70/4a/30cf63db.jpg","comment_is_top":false,"comment_ctime":1635567226,"is_pvip":false,"replies":[{"id":"116400","content":"一般是一个 clone()，得到有所有权的数据。比如 &amp;str -&gt; String。文档：https:&#47;&#47;doc.rust-lang.org&#47;std&#47;borrow&#47;trait.ToOwned.html#tymethod.to_owned","user_name":"作者回复","comment_id":319074,"uid":"1079375","ip_address":"","utype":1,"ctime":1636557278,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"5930534522","product_id":100085301,"comment_content":"to_owned() 什么意思？","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529490,"discussion_content":"一般是一个 clone()，得到有所有权的数据。比如 &amp;amp;str -&amp;gt; String。文档：https://doc.rust-lang.org/std/borrow/trait.ToOwned.html#tymethod.to_owned","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636557278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313347,"user_name":"亚伦碎语","can_delete":false,"product_type":"c1","uid":1014505,"ip_address":"","ucode":"F32E5E1B63CC90","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/e9/da5c0203.jpg","comment_is_top":false,"comment_ctime":1632384701,"is_pvip":false,"replies":[{"id":"113524","content":"嗯。其实不必这么记。还是要抓住 String 和 str 的实质。一个拥有所有权（自然也可以 put_str），一个没有所有权，只是切片（自然不能 resize 别人的东西）。","user_name":"作者回复","comment_id":313347,"uid":"1079375","ip_address":"","utype":1,"ctime":1632464441,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"5927351997","product_id":100085301,"comment_content":"对&amp;str 和 &amp;String的区别，更新一点：<br>String可以动态的调整内存大小。 str不能resize. <br>&amp;str直接是指到了String存储的引用，&amp;String是对于String内存对象的引用。<br>参考：<br>https:&#47;&#47;users.rust-lang.org&#47;t&#47;whats-the-difference-between-string-and-str&#47;10177&#47;8","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527320,"discussion_content":"嗯。其实不必这么记。还是要抓住 String 和 str 的实质。一个拥有所有权（自然也可以 put_str），一个没有所有权，只是切片（自然不能 resize 别人的东西）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632464441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312516,"user_name":"记事本","can_delete":false,"product_type":"c1","uid":1401568,"ip_address":"","ucode":"FA942636EE0CC8","user_header":"https://static001.geekbang.org/account/avatar/00/15/62/e0/d2ff52da.jpg","comment_is_top":false,"comment_ctime":1631847579,"is_pvip":false,"replies":[{"id":"113271","content":"String &#47; Vec 都是智能指针。理论上任何实现了 Deref &#47; DerefMut &#47; Drop 的数据结构，都是智能指针。","user_name":"作者回复","comment_id":312516,"uid":"1079375","ip_address":"","utype":1,"ctime":1631927505,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"5926814875","product_id":100085301,"comment_content":"老师，String，Vec算是智能指针吗？*String解除str，然后&amp;*String就是&amp;str了，Box::new()好像也可以这样用，Box::new(String::new)这样的使用，内存发生了什么变化啊","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526994,"discussion_content":"String / Vec 都是智能指针。理论上任何实现了 Deref / DerefMut / Drop 的数据结构，都是智能指针。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631927505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359194,"user_name":"木鸢","can_delete":false,"product_type":"c1","uid":1200260,"ip_address":"四川","ucode":"6900EFB05CB9A5","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/84/e51e1db3.jpg","comment_is_top":false,"comment_ctime":1665315625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665315625","product_id":100085301,"comment_content":"还没看到这里就体会到陈老师说的愚昧之颠了，rust的大量简写就当是语言特色来看了，到了所有权、rc、arc、生命周期这些章节，看完理论再对照代码就蒙圈了，代码完全看不懂啊！<br>vec!和直接定义切片有什么区别？<br>String::from定义的字符串和直接双引号定义的结果是一回事吗？<br>生命周期标示是 &#39; 还是 &#39;a-z ，参数里面中定义，和外界传参时候定义有区别吗？<br>语法 spawn（|| {}）到底表示什么意思？还是说这个写法是spawn独有的呢？<br><br>肯定是我太白，太先去看看rust基础语法再来从新看，润了润了<br><br>PS：陈老师讲得非常透彻，计算机基础，rust编程思想都娓娓道来，有rust经验的同学肯定会很有共鸣，评论区的精华帖也能看到","like_count":0},{"had_liked":false,"id":323962,"user_name":"手机失联户","can_delete":false,"product_type":"c1","uid":1258691,"ip_address":"","ucode":"876DC3D73F8E3A","user_header":"https://static001.geekbang.org/account/avatar/00/13/34/c3/ed5881c6.jpg","comment_is_top":false,"comment_ctime":1638241178,"is_pvip":false,"replies":[{"id":"118873","content":"之前因为宏相关的内容是高级内容，所以没放在这个课程中。","user_name":"作者回复","comment_id":323962,"uid":"1079375","ip_address":"","utype":1,"ctime":1639849460,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1638241178","product_id":100085301,"comment_content":"老师，我看课程里没有提到rust宏相关的知识点，请问后续会讲这个吗？因为有些rust项目，比如tokio都会用到宏，导致代码不是很容易懂，老师能不能后续专门出一期讲一下。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539834,"discussion_content":"之前因为宏相关的内容是高级内容，所以没放在这个课程中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639849460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320971,"user_name":"mobus","can_delete":false,"product_type":"c1","uid":1055088,"ip_address":"","ucode":"966C72FC8AE50A","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/70/7dbf25dc.jpg","comment_is_top":false,"comment_ctime":1636601094,"is_pvip":false,"replies":[{"id":"116571","content":"match &#47; if let 就是你最好的工具，你可以做非常深入的模式匹配","user_name":"作者回复","comment_id":320971,"uid":"1079375","ip_address":"","utype":1,"ctime":1636641431,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"1636601094","product_id":100085301,"comment_content":"老师，有没有办法快速提取 枚举值？比如jsonrpc request ，为了匹配最终请求值，代码膨胀的太厉害了","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530173,"discussion_content":"match / if let 就是你最好的工具，你可以做非常深入的模式匹配","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636641431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319813,"user_name":"活着","can_delete":false,"product_type":"c1","uid":2172358,"ip_address":"","ucode":"1AF2541D53C9EC","user_header":"https://static001.geekbang.org/account/avatar/00/21/25/c6/5b3ddf17.jpg","comment_is_top":false,"comment_ctime":1635950368,"is_pvip":false,"replies":[{"id":"116373","content":"谢谢！","user_name":"作者回复","comment_id":319813,"uid":"1079375","ip_address":"","utype":1,"ctime":1636555295,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"1635950368","product_id":100085301,"comment_content":"老师辛苦了，课程非常好👍","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529779,"discussion_content":"谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636555295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313346,"user_name":"亚伦碎语","can_delete":false,"product_type":"c1","uid":1014505,"ip_address":"","ucode":"F32E5E1B63CC90","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/e9/da5c0203.jpg","comment_is_top":false,"comment_ctime":1632384414,"is_pvip":false,"replies":[{"id":"113525","content":"正确！","user_name":"作者回复","comment_id":313346,"uid":"1079375","ip_address":"","utype":1,"ctime":1632464453,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"1632384414","product_id":100085301,"comment_content":"use std::str::Chars;<br><br>&#47;&#47; 错误，为什么？<br>&#47;&#47; name 在lifetime1 的block下就会被drop掉，所以返回&amp;str是不对<br>fn lifetime1() -&gt; String {<br>    let name = &quot;Tyr&quot;.to_string();<br>    name[1..].to_string()<br>}<br><br>&#47;&#47; 错误，为什么？<br>&#47;&#47; name类型变为String, ownership改变，但是返回是引用，block结束会被drop掉。可以讲入参改为引用。<br>fn lifetime2(name: &amp;String) -&gt; &amp;str {<br>    &amp;name[1..]<br>}<br><br>&#47;&#47; 正确，为什么？<br>&#47;&#47; 默认和参数一样的生命周期<br>fn lifetime3(name: &amp;str) -&gt; Chars {<br>    name.chars()<br>}","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527319,"discussion_content":"正确！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632464453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312937,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1632130127,"is_pvip":true,"replies":[{"id":"113411","content":"嗯，但这样实际上在 arena 内部有内存泄漏。","user_name":"作者回复","comment_id":312937,"uid":"1079375","ip_address":"","utype":1,"ctime":1632241244,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"1632130127","product_id":100085301,"comment_content":"某些情景下带环的结构可以用Arena实现，比如typed_arena，用的时候不管释放，用完了一起释放。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527169,"discussion_content":"嗯，但这样实际上在 arena 内部有内存泄漏。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632241244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312833,"user_name":"记事本","can_delete":false,"product_type":"c1","uid":1401568,"ip_address":"","ucode":"FA942636EE0CC8","user_header":"https://static001.geekbang.org/account/avatar/00/15/62/e0/d2ff52da.jpg","comment_is_top":false,"comment_ctime":1632043628,"is_pvip":false,"replies":[{"id":"113408","content":"符合。","user_name":"作者回复","comment_id":312833,"uid":"1079375","ip_address":"","utype":1,"ctime":1632240987,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"1632043628","product_id":100085301,"comment_content":"假如 泛型T约束需要实现AsRef trait, str 已经实现AsRef tarit,那么&amp;str符合这个泛型参数吗?","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527129,"discussion_content":"符合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632240987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312636,"user_name":"大哉乾元","can_delete":false,"product_type":"c1","uid":2738552,"ip_address":"","ucode":"1FE07EB60046ED","user_header":"","comment_is_top":false,"comment_ctime":1631918468,"is_pvip":false,"replies":[{"id":"113275","content":"不能。编译时和运行时是两个状态。cargo run 相当于在当前目录下运行编译出来的可执行文件，你也可以在任何目录下运行这个可执行文件。所以运行时不要假定程序运行的工作目录。","user_name":"作者回复","comment_id":312636,"uid":"1079375","ip_address":"","utype":1,"ctime":1631932055,"user_name_real":"Tyr"}],"discussion_count":1,"race_medal":0,"score":"1631918468","product_id":100085301,"comment_content":"请教老师一个问题，关于文件操作的相对路径，如果是先编译再执行，rust会以可执行文件所在目录作为当前目录进行文件操作，如果直接cargo run的话则是以源文件目录作为相对目录执行，有办法统一起来么？","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527058,"discussion_content":"不能。编译时和运行时是两个状态。cargo run 相当于在当前目录下运行编译出来的可执行文件，你也可以在任何目录下运行这个可执行文件。所以运行时不要假定程序运行的工作目录。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631932055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312551,"user_name":"芥末小龙","can_delete":false,"product_type":"c1","uid":1176417,"ip_address":"","ucode":"387D01880867AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/f3/61/8f7fca5b.jpg","comment_is_top":false,"comment_ctime":1631861725,"is_pvip":false,"replies":[{"id":"113268","content":"leetcode 跟纯算法有关，跟语法反倒关系不大吧。应该不需要和借用&#47;生命周期打交道，也基本上不涉及太多所有权（除了 String 和 Vec&lt;T&gt;，基本上都是用各种数值类型吧）。","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631927325,"ip_address":"","comment_id":312551,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1631861725","product_id":100085301,"comment_content":"在用rust重新撸leetcode，真痛苦。","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527018,"discussion_content":"leetcode 跟纯算法有关，跟语法反倒关系不大吧。应该不需要和借用/生命周期打交道，也基本上不涉及太多所有权（除了 String 和 Vec&amp;lt;T&amp;gt;，基本上都是用各种数值类型吧）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631927325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1176417,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f3/61/8f7fca5b.jpg","nickname":"芥末小龙","note":"","ucode":"387D01880867AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394522,"discussion_content":"主要是没有用熟练，用JAVA写轻松加愉快，用rust那个憋屈啊，其实就是还没有熟悉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631927883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312487,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1631840825,"is_pvip":false,"replies":[{"id":"113215","content":"加油！","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631844270,"ip_address":"","comment_id":312487,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631840825","product_id":100085301,"comment_content":"打卡 真的是愚昧之巅了 需要重头再来了","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526984,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631844270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312481,"user_name":"25ma","can_delete":false,"product_type":"c1","uid":1303713,"ip_address":"","ucode":"AB5435B9DB52C9","user_header":"https://static001.geekbang.org/account/avatar/00/13/e4/a1/178387da.jpg","comment_is_top":false,"comment_ctime":1631839513,"is_pvip":false,"replies":[{"id":"113216","content":"对！","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631844286,"ip_address":"","comment_id":312481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631839513","product_id":100085301,"comment_content":"1.返回是一个&amp;str,但是name的生命周期在函数执行结束就已经drop掉了，所以会造成悬垂指针的问题<br>2.同样也是犯规，一个&amp;str,不同的地方是当name这个不可变变量传递进函数lifttime2的时候已经将值move,然而这时再返回一个&amp;str,同样也会造成悬垂指针的问题","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526982,"discussion_content":"对！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631844286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312475,"user_name":"Do","can_delete":false,"product_type":"c1","uid":1313480,"ip_address":"","ucode":"EA11EBD6439D1B","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/c8/dae4a360.jpg","comment_is_top":false,"comment_ctime":1631837323,"is_pvip":false,"replies":[{"id":"113213","content":"啥太慢了，更新速度嘛？现在专栏都是一周更新三篇，因为也要考虑到老师高质量输出的频率和大家学习的频率。如果觉得慢，说明你的的Rust进度非常不错，学有余力嘛，推荐配套第一篇加餐里的资料来学习噢💪","user_name":"编辑回复","user_name_real":"叶如芊","uid":"2547771","ctime":1631843268,"ip_address":"","comment_id":312475,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1631837323","product_id":100085301,"comment_content":"太慢了","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526977,"discussion_content":"啥太慢了，更新速度嘛？现在专栏都是一周更新三篇，因为也要考虑到老师高质量输出的频率和大家学习的频率。如果觉得慢，说明你的的Rust进度非常不错，学有余力嘛，推荐配套第一篇加餐里的资料来学习噢💪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631843268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312467,"user_name":"hughieyu","can_delete":false,"product_type":"c1","uid":1206690,"ip_address":"","ucode":"FC1A64B2BAB784","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/a2/c30ac459.jpg","comment_is_top":false,"comment_ctime":1631827649,"is_pvip":false,"replies":[{"id":"113218","content":"对！","user_name":"作者回复","user_name_real":"Tyr","uid":"1079375","ctime":1631844313,"ip_address":"","comment_id":312467,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631827649","product_id":100085301,"comment_content":"1. name drop了<br>2. name drop了<br>3. name的内存数据拷贝并转换到了一个新的拥有所有权的对象中","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526973,"discussion_content":"对！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631844313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}