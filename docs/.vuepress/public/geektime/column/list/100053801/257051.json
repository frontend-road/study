{"id":257051,"title":"07 | 如何用向量和参数方程描述曲线？","content":"<p>你好，我是月影。</p><p>曲线是图形系统的基本元素之一，它可以构成几何图形的边，也可以描述点和几何体的运动轨迹，还可以控制像素属性的变化。不论我们用什么图形系统绘图，图形的呈现都离不开曲线。因此，对于可视化而言，掌握如何描述曲线是非常重要的。</p><p>今天，我们就来学习两种常见的描述曲线的方法，也就是用向量和参数方程来描述曲线。</p><h2>如何用向量描述曲线？</h2><p>我们先来说第一种方法，用向量来描述曲线。</p><p>我们知道，曲线是可以用折线来模拟的。因此，我们第5节课中用向量来绘制折线的方法，同样可以应用于曲线。具体怎么做呢？下面，我就详细来说说。</p><p>首先，我们用向量绘制折线的方法来绘制正多边形，我们定义一个函数regularShape，代码如下：</p><pre><code>function regularShape(edges = 3, x, y, step) {\n  const ret = [];\n  const delta = Math.PI * (1 - (edges - 2) / edges);\n  let p = new Vector2D(x, y);\n  const dir = new Vector2D(step, 0);\n  ret.push(p);\n  for(let i = 0; i &lt; edges; i++) {\n    p = p.copy().add(dir.rotate(delta));\n    ret.push(p);\n  }\n  return ret;\n}\n</code></pre><p>我们在regularShape函数中，给定边数edges、起点x, y、一条边的长度step，就可以绘制一个正多边形了。绘制的思路和我们上一节课的思路类似，也就是通过rotate旋转向量，然后通过向量加法来计算顶点位置。</p><p>具体来说就是，我们定义初始点为new Vector2D(x, y)，初始方向为x轴方向new Vector2D(step, 0)。然后循环计算正多边形的顶点位置，也就是从初始点开始，每次将方向向量旋转delta角度，delta角度是根据正多边形内角公式计算出来的。最后，我们将当前点和方向向量相加，就得到下一个顶点坐标了。</p><!-- [[[read_end]]] --><p>有了这个方法，我们就可以计算出要绘制的多边形的每一个顶点坐标，然后调用图形系统的API将图形绘制出来了。我在下面给出了绘制三角形、六边形、十一边形和六十边形的参数，你可以看一看，也可以试着自己动手绘制一下。</p><pre><code>draw(regularShape(3, 128, 128, 100));  // 绘制三角形\ndraw(regularShape(6, -64, 128, 50));  // 绘制六边形\ndraw(regularShape(11, -64, -64, 30));  // 绘制十一边形\ndraw(regularShape(60, 128, -64, 6));  // 绘制六十边形\n\n</code></pre><p>这些图形用Canvas2D绘制出来的结果如下图所示，详细的代码我放在了<a href=\"https://github.com/akira-cn/graphics/tree/master/vector_draw\">GitHub仓库</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/e6/59/e62865e98dd038c6da690961fe722c59.jpeg?wh=1920*1080\" alt=\"\"></p><p>从上面的例子中可以看出，当多边形的边数非常多的时候，这个图形就会接近圆。所以，只要利用regularShape函数，将多边形的边数设置得很大，我们就可以绘制出圆形了。不过，这个做法虽然能够绘制出圆这样的曲线，但它还有一些缺点。</p><p>首先，regularShape定义边数、起点、一条边的长度，这就和我们通常的使用习惯，也就是定义边数、中心和半径不符。如果我们按照现在这种定义方式绘图，是很难精确对应到图形的位置和大小的。那你可能要说了，不是还可以换算吗？确实可以，但是计算的过程比较繁琐，也很容易出错。</p><p>其次，regularShape可以画圆，改进一下也可以画圆弧，但是对于椭圆、抛物线、贝塞尔曲线等其他曲线的绘制就无能为力了。</p><p>那么，为了更简单地绘制出更多的曲线样式，我们需要用更好的模型来描述。</p><h2>如何用参数方程描述曲线？</h2><p>接下来，我们就来讨论用参数方程描述曲线的方法。通过这个方法，我们不仅可以描述常见的圆、椭圆、抛物线、正余弦等曲线，还能描述更具有一般性的曲线，也就是没有被数学公式预设好的曲线，比如贝塞尔曲线，或者Catmull–Rom曲线等等。</p><p>说到参数方程，接下来我在每次用它来画图之前，还是会先带你一起回顾相关的数学知识，这样对你后面的学习也会很方便。那我们先从最简单的曲线，也就是圆形开始，来看看它是如何用参数方程绘制的。</p><h3>1. 画圆</h3><p>首先，圆可以用一组参数方程来定义。如下所示的参数方程，定义了一个圆心在（x<sub>0</sub>,y<sub>0</sub>），半径为r的圆。</p><p><img src=\"https://static001.geekbang.org/resource/image/67/09/679bb841b70f7c7bae35d84c98a86b09.jpeg?wh=1920*555\" alt=\"\"></p><p>知道了方程，下面我们来说一下计算圆顶点的方法。首先，我们实现一个画圆弧的函数arc，代码如下所示。我们设置圆心为x<sub>0</sub>、y<sub>0</sub>，半径为radius，起始角度为startAng，结束角度是endAng。然后，我们就可以用draw(arc(0, 0, 100))这样的方式在(0,0)点绘制一个半径为100的圆了。</p><pre><code>const TAU_SEGMENTS = 60;\nconst TAU = Math.PI * 2;\nfunction arc(x0, y0, radius, startAng = 0, endAng = Math.PI * 2) {\n  const ang = Math.min(TAU, endAng - startAng);\n  const ret = ang === TAU ? [] : [[x0, y0]];\n  const segments = Math.round(TAU_SEGMENTS * ang / TAU);\n  for(let i = 0; i &lt;= segments; i++) {\n    const x = x0 + radius * Math.cos(startAng + ang * i / segments);\n    const y = y0 + radius * Math.sin(startAng + ang * i / segments);\n    ret.push([x, y]);\n  }\n  return ret;\n}\n\ndraw(arc(0, 0, 100));\n</code></pre><p>这个时候你可能想问，在第2节课利用Canvas2D画圆的时候，我们使用的context.arc方法和我们自己实现的这个函数很像，既然已经有了现成的API，我们为什么还要自己实现呢？关于这一点，我就要再啰嗦几句了。不是所有的图形系统都提供了画圆的API，比如WebGL中就没有默认的画圆API。因此，在没有提供画圆的API的时候，我们上面实现的函数就可以派上用场了。</p><h3>2. 画圆锥曲线</h3><p>除了画圆，参数方程还可以描述很多其他的圆锥曲线。比如椭圆的参数方程。它其实和圆的参数方程很接近。其中，a、b分别是椭圆的长轴和短轴，当a = b = r时，这个方程是就圆的方程式。所以，圆实际上就是椭圆的特例。</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/4b/c47446d2df11fba932267665e65d254b.jpeg?wh=1920*521\" alt=\"\"></p><p>再比如，抛物线的参数方程。其中p是常数，为焦点到准线的距离。</p><p><img src=\"https://static001.geekbang.org/resource/image/73/b2/737ab592aa82bdb7e145aebdc7e104b2.jpeg?wh=1920*521\" alt=\"\"></p><p>我们修改上面的arc方法中的对应参数，就能同样实现椭圆和抛物线的绘制了。修改的操作非常简单，我就在下面直接给出这两个函数的代码了。</p><p>首先是椭圆，它的函数代码如下所示。</p><pre><code>const TAU_SEGMENTS = 60;\nconst TAU = Math.PI * 2;\nfunction ellipse(x0, y0, radiusX, radiusY, startAng = 0, endAng = Math.PI * 2) {\n  const ang = Math.min(TAU, endAng - startAng);\n  const ret = ang === TAU ? [] : [[x0, y0]];\n  const segments = Math.round(TAU_SEGMENTS * ang / TAU);\n  for(let i = 0; i &lt;= segments; i++) {\n    const x = x0 + radiusX * Math.cos(startAng + ang * i / segments);\n    const y = y0 + radiusY * Math.sin(startAng + ang * i / segments);\n    ret.push([x, y]);\n  }\n  return ret;\n}\n\ndraw(ellipse(0, 0, 100, 50));\n</code></pre><p>其次是抛物线，它的函数代码如下所示。</p><pre><code>const LINE_SEGMENTS = 60;\nfunction parabola(x0, y0, p, min, max) {\n  const ret = [];\n  for(let i = 0; i &lt;= LINE_SEGMENTS; i++) {\n    const s = i / 60;\n    const t = min * (1 - s) + max * s;\n    const x = x0 + 2 * p * t ** 2;\n    const y = y0 + 2 * p * t;\n    ret.push([x, y]);\n  }\n  return ret;\n}\n\ndraw(parabola(0, 0, 5.5, -10, 10));\n</code></pre><h3>3. 画其他常见曲线</h3><p>除了前面说的圆锥曲线，应用参数方程我们还可以绘制许多比较有趣的曲线，这些曲线在实际工作中，常常用来构建各种几何图形。</p><p>不过，如果我们为每一种曲线都分别对应实现一个函数，就会非常笨拙和繁琐。那为了方便，我们可以用函数式的编程思想，封装一个更简单的JavaScript参数方程绘图模块，以此来绘制出不同的曲线。这个绘图模块的使用过程主要分为三步。</p><p>第一步，我们实现一个叫做parametric的高阶函数，它的参数分别是x、y坐标和参数方程。</p><p>第二步，parametric会返回一个函数，这个函数会接受几个参数，比如，start、end这样表示参数方程中关键参数范围的参数，以及seg这样表示采样点个数的参数等等。在下面的代码中，当seg默认100时，就表示在start、end范围内采样101（seg+1）个点，后续其他参数是作为常数传给参数方程的数据。</p><p>第三步，我们调用parametric返回的函数之后，它会返回一个对象。这个对象有两个属性：一个是points，也就是它生成的顶点数据；另一个是draw方法，我们可以利用这个draw方法完成绘图。</p><p>这个过程的代码如下：</p><pre><code>// 根据点来绘制图形\nfunction draw(points, context, {\n  strokeStyle = 'black',\n  fillStyle = null,\n  close = false,\n} = {}) {\n  context.strokeStyle = strokeStyle;\n  context.beginPath();\n  context.moveTo(...points[0]);\n  for(let i = 1; i &lt; points.length; i++) {\n    context.lineTo(...points[i]);\n  }\n  if(close) context.closePath();\n  if(fillStyle) {\n    context.fillStyle = fillStyle;\n    context.fill();\n  }\n  context.stroke();\n}\n\nexport function parametric(xFunc, yFunc) {\n  return function (start, end, seg = 100, ...args) {\n    const points = [];\n    for(let i = 0; i &lt;= seg; i++) {\n      const p = i / seg;\n      const t = start * (1 - p) + end * p;\n      const x = xFunc(t, ...args); // 计算参数方程组的x\n      const y = yFunc(t, ...args);  // 计算参数方程组的y\n      points.push([x, y]);\n    }\n    return {\n      draw: draw.bind(null, points),\n      points,\n    };\n  };\n}\n</code></pre><p>利用绘图模块，我们就可以绘制出各种有趣的曲线了。比如，我们可以很方便地绘制出抛物线，代码如下：</p><pre><code>// 抛物线参数方程\nconst para = parametric(\n  t =&gt; 25 * t,\n  t =&gt; 25 * t ** 2,\n);\n\n// 绘制抛物线\npara(-5.5, 5.5).draw(ctx);\n</code></pre><p>再比如，我们可以绘制出阿基米德螺旋线，代码如下：</p><pre><code>const helical = parametric(\n  (t, l) =&gt; l * t * Math.cos(t),\n  (t, l) =&gt; l * t * Math.sin(t),\n);\n\nhelical(0, 50, 500, 5).draw(ctx, {strokeStyle: 'blue'});\n</code></pre><p>以及，我们还可以绘制星形线，代码如下：</p><pre><code>const star = parametric(\n  (t, l) =&gt; l * Math.cos(t) ** 3,\n  (t, l) =&gt; l * Math.sin(t) ** 3,\n);\n\nstar(0, Math.PI * 2, 50, 150).draw(ctx, {strokeStyle: 'red'});\n</code></pre><p>同时绘制三条曲线后的效果，如下图所示。详细的代码，我都放到了<a href=\"https://github.com/akira-cn/graphics/tree/master/parametric2\">GitHub仓库</a>。你可以自己动手试一试，看看怎么把它们组合成更多有趣的图形。</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/b4/3e20fa773a4bfd78a22160832e2fdbb4.jpg?wh=1040*1050\" alt=\"\"></p><h3>4. 画贝塞尔曲线</h3><p>前面我们说的这些曲线都比较常见，它们都是符合某种固定数学规律的曲线。但生活中还有很多不规则的图形，无法用上面这些规律的曲线去描述。那我们该如何去描述这些不规则图形呢？<strong>贝塞尔曲线</strong>（Bezier Curves）就是最常见的一种解决方式。它在可视化领域中也是一类非常常用的曲线，它通过起点、终点和少量控制点，就能定义参数方程来生成复杂的平滑曲线，所以它通常被用来构建数据信息之间连接线。</p><p><img src=\"https://static001.geekbang.org/resource/image/54/29/546a855fc34c45cb7e654ffda4f88f29.png?wh=917*494\" alt=\"\" title=\"贝塞尔曲线示意图\"></p><p>贝塞尔曲线又分为<strong>二阶贝塞尔曲线</strong>（Quadratic Bezier Curve）和<strong>三阶贝塞尔曲线</strong>（Qubic Bezier Curve）。顾名思义，二阶贝塞尔曲线的参数方程是一元二次多项式，那么三阶贝塞尔曲线的参数方程是一元三次多项式。接下来，我们就分别说说它们的公式和描述曲线的方法</p><p>其中，二阶贝塞尔曲线由三个点确定，P<sub>0</sub>是起点，P<sub>1</sub>是控制点，P<sub>2</sub>是终点，示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/5a/36/5a15bb08a9815723a7745119b6328436.jpeg?wh=1920*1080\" alt=\"\"></p><p>我们可以用parametric构建并绘制二阶贝塞尔曲线，代码如下所示：</p><pre><code>const quadricBezier = parametric(\n  (t, [{x: x0}, {x: x1}, {x: x2}]) =&gt; (1 - t) ** 2 * x0 + 2 * t * (1 - t) * x1 + t ** 2 * x2,\n  (t, [{y: y0}, {y: y1}, {y: y2}]) =&gt; (1 - t) ** 2 * y0 + 2 * t * (1 - t) * y1 + t ** 2 * y2,\n);\n\nconst p0 = new Vector2D(0, 0);\nconst p1 = new Vector2D(100, 0);\np1.rotate(0.75);\nconst p2 = new Vector2D(200, 0);\nconst count = 30;\nfor(let i = 0; i &lt; count; i++) {\n  // 绘制30条从圆心出发，旋转不同角度的二阶贝塞尔曲线\n  p1.rotate(2 / count * Math.PI);\n  p2.rotate(2 / count * Math.PI);\n  quadricBezier(0, 1, 100, [\n    p0,\n    p1,\n    p2,\n  ]).draw(ctx);\n}\n</code></pre><p>在上面的代码中，我们绘制了30个二阶贝塞尔曲线，它们的起点都是(0,0)，终点均匀分布在半径200的圆上，控制点均匀地分布在半径100的圆上。最终，实现的效果如下图所示。详细的代码，你可以访问<a href=\"https://github.com/akira-cn/graphics/tree/master/bezier\">GitHub仓库</a>：</p><p><img src=\"https://static001.geekbang.org/resource/image/f7/98/f7228ee8407ea5ee8b2ac2896eef0798.jpeg?wh=1920*1080\" alt=\"\" title=\"二阶贝塞尔曲线效果图\"></p><p>三阶贝塞尔曲线的参数方程为：</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/1c/d35dfdfca5abf67f98f35e2ae168771c.jpg?wh=1920*349\" alt=\"\"></p><p>可以看到，与二阶贝塞尔曲线相比，三阶贝塞尔曲线有4个点，其中P<sub>0</sub>和P<sub>3</sub>是起点和终点，P<sub>1</sub>、P<sub>2</sub>是控制点，所以三阶贝塞尔曲线有两个控制点。</p><p><a href=\"http://math001.com/bezier_curve/\"><img src=\"https://static001.geekbang.org/resource/image/45/55/45d35cb4e1b446501fcefac07b3dab55.gif?wh=360*150\" alt=\"\" title=\"三阶贝塞尔曲线的原理示意图\"></a></p><p>我们同样可以用parametric构建并绘制三阶贝塞尔曲线：</p><pre><code>const cubicBezier = parametric(\n  (t, [{x: x0}, {x: x1}, {x: x2}, {x: x3}]) =&gt; (1 - t) ** 3 * x0 + 3 * t * (1 - t) ** 2 * x1 + 3 * (1 - t) * t ** 2 * x2 + t ** 3 * x3,\n  (t, [{y: y0}, {y: y1}, {y: y2}, {y: y3}]) =&gt; (1 - t) ** 3 * y0 + 3 * t * (1 - t) ** 2 * y1 + 3 * (1 - t) * t ** 2 * y2 + t ** 3 * y3,\n);\n\nconst p0 = new Vector2D(0, 0);\nconst p1 = new Vector2D(100, 0);\np1.rotate(0.75);\nconst p2 = new Vector2D(150, 0);\np2.rotate(-0.75);\nconst p3 = new Vector2D(200, 0);\nconst count = 30;\nfor(let i = 0; i &lt; count; i++) {\n  p1.rotate(2 / count * Math.PI);\n  p2.rotate(2 / count * Math.PI);\n  p3.rotate(2 / count * Math.PI);\n  cubicBezier(0, 1, 100, [\n    p0,\n    p1,\n    p2,\n    p3,\n  ]).draw(ctx);\n}\n</code></pre><p>三阶贝塞尔曲线控制点比二阶贝塞尔曲线多，这有什么优势呢？因为控制点越多，曲线能够模拟出更多不同的形状，也能更精确地控制细节。比如说，在上面的代码中，我们绘制了30个三阶贝塞尔曲线，它们的起点都为(0,0)，终点均匀分布在半径200的圆上，控制点1均匀分布在半径为100的圆上，控制点2均匀分布半径150的圆上。它和我们之前实现的二阶贝塞尔曲线相比，控制得更细致，形成的图案信息更丰富。</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/21/6a86ffe30937734e3601ba3724ab6721.jpeg?wh=1920*1080\" alt=\"\" title=\"三阶贝塞尔曲线效果图\"></p><p>总的来说，贝塞尔曲线对于可视化，甚至整个计算机图形学都有着极其重要的意义。因为它能够针对一组确定的点，在其中构造平滑的曲线，这也让图形的实现有了更多的可能性。而且，贝塞尔曲线还可以用来构建Catmull–Rom曲线。Catmull–Rom曲线也是一种常用的曲线，它可以平滑折线，我们在数据统计图表中经常会用到它。</p><p><img src=\"https://static001.geekbang.org/resource/image/f9/eb/f9dd8a508e3368141d15b85a330378eb.jpg?wh=1070*728\" alt=\"\" title=\"使用Catmull–Rom曲线绘制的折线、曲线和部分平滑折线\"></p><p>实际上Canvas2D和SVG都提供了直接绘制贝塞尔曲线的API，比如在Canvas2D中，我们可以通过创建Path2D对象，使用Path2D支持的SVGPath指令添加贝塞尔曲线。即使如此，我们依然需要掌握贝塞尔曲线的基本原理。因为在WebGL这样的图形系统里，我们还是需要自己实现贝塞尔曲线的绘制，而且贝塞尔曲线除了绘制曲线之外，还有其他的用处，比如构建平滑的轨迹动画、属性插值等等。这些内容，我们也会在后续课程中会深入讨论。</p><h2>要点总结</h2><p>这一节课我们讨论了用曲线和参数方程描述曲线的方法。</p><p>用向量描述比较简单直接，先确定起始点和起始向量，然后通过旋转和向量加法来控制形状，就可以将曲线一段一段地绘制出来。但是它的缺点也很明显，就是数学上不太直观，需要复杂的换算才能精确确定图形的位置和大小。</p><p>使用参数方程能够避免向量绘制的缺点，因此是更常用的绘制方式。使用参数方程绘制曲线时，我们既可以使用有规律的曲线参数方程来绘制这些规则曲线，还可以使用二阶、三阶贝塞尔曲线来在起点和终点之间构造平滑曲线。</p><h2>小试牛刀</h2><ol>\n<li>Canvas2D和SVG中都提供了画圆、椭圆、贝塞尔曲线的指令，你可以尝试直接使用这些指令来绘制圆、椭圆和贝塞尔曲线，然后比较一下使用这些指令和使用我们课程中讲过的方法有什么不同。</li>\n<li>除了圆和椭圆这些常见的参数方程，你还能自己创造出一些参数方程吗？如果可以，你可以使用parametric.js把它们绘制出来。</li>\n<li>我在课程中，画了两个最基础的贝塞尔曲线。你能试着修改parametric.js的代码，调整一下贝塞尔曲线控制点参数，画出更有趣的图形吗？</li>\n</ol><p>欢迎在留言区和我讨论，分享你的答案和思考，也欢迎你把这节课分享给你的朋友，我们下节课见！</p><hr><h2><span class=\"reference\">源码</span></h2><p><span class=\"reference\">[1]<a href=\"https://github.com/akira-cn/graphics/tree/master/parametric\">绘制圆锥曲线完整代码</a></span></p><p><span class=\"reference\">[2]<a href=\"https://github.com/akira-cn/graphics/tree/master/parametric2\">绘制其他曲线完整代码</a></span></p><p><span class=\"reference\">[3]<a href=\"https://github.com/akira-cn/graphics/tree/master/bezier\">绘制贝塞尔曲线完整代码</a></span></p><h2><span class=\"reference\">推荐阅读</span></h2><p><span class=\"reference\"> <a href=\"https://github.com/akira-cn/graphics/blob/master/common/lib/parametric.js\">Parametric.js</a></span></p>","comments":[{"had_liked":false,"id":232384,"user_name":"Geek_13e8db","can_delete":false,"product_type":"c1","uid":2046639,"ip_address":"","ucode":"3E214016FC2862","user_header":"","comment_is_top":false,"comment_ctime":1593992810,"is_pvip":false,"replies":[{"id":"85867","content":"嗯嗯，parametric这块实现用了过程抽象思想，它是函数式编程的基础，我会用一篇加餐来专门介绍这种编程思想","user_name":"作者回复","comment_id":232384,"uid":"1159792","ip_address":"","utype":1,"ctime":1594080527,"user_name_real":"月影"}],"discussion_count":5,"race_medal":0,"score":"35953731178","product_id":100053801,"comment_content":"这篇教程写得很好，感谢月影老师！这里提一个小建议：附件的snippet中，参数的定义对于初学者而言，需要花较长时间才能理解。老师能否在fn parametric()里面加上更多的comment，或者起一些更具体的变量名。多谢。<br>当然，当前这么写，让我不得不花很多时间来理解每行代码，客观上加强了学习效果。<br>","like_count":8,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500622,"discussion_content":"嗯嗯，parametric这块实现用了过程抽象思想，它是函数式编程的基础，我会用一篇加餐来专门介绍这种编程思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594080527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1309455,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM4QOQtS9EkriaJb24JjS8TSvpq7vq1r07bZoTlnfNAIa2jbsIgNKgyecr7XgoKBZ9daJkk7fzvnwxg/132","nickname":"Ccc","note":"","ucode":"5A588B3EE9BF98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295135,"discussion_content":"[{x: x0}, {x: x1}, {x: x2}, {x: x3}]这个赋值研究了好久都不太理解，能帮忙一下么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596100456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2146442,"avatar":"","nickname":"ssss","note":"","ucode":"6722D7C4091549","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1309455,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM4QOQtS9EkriaJb24JjS8TSvpq7vq1r07bZoTlnfNAIa2jbsIgNKgyecr7XgoKBZ9daJkk7fzvnwxg/132","nickname":"Ccc","note":"","ucode":"5A588B3EE9BF98","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301222,"discussion_content":"每个子数组都带有x，y属性，你可以打印出来看一下\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598445167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295135,"ip_address":""},"score":301222,"extra":""},{"author":{"id":2251534,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia4qBUs5bFs5tU3yVCcBapIcnVftM60nrJ73eu30YDMbDNvjhvnibct3pMYlj62G1c7nH8jSBaiaLw/132","nickname":"李文彬","note":"","ucode":"4CD326DC443028","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1309455,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM4QOQtS9EkriaJb24JjS8TSvpq7vq1r07bZoTlnfNAIa2jbsIgNKgyecr7XgoKBZ9daJkk7fzvnwxg/132","nickname":"Ccc","note":"","ucode":"5A588B3EE9BF98","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334584,"discussion_content":"我一开始也是，后来看到除了数组的方式，还有x和y属性~~你把{x: x0}换成{[0:x0]}（其他类似）也是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607907444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295135,"ip_address":""},"score":334584,"extra":""},{"author":{"id":1123627,"avatar":"https://static001.geekbang.org/account/avatar/00/11/25/2b/7f6aabc2.jpg","nickname":"wendraw","note":"","ucode":"EA404D7CFCAB44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1309455,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM4QOQtS9EkriaJb24JjS8TSvpq7vq1r07bZoTlnfNAIa2jbsIgNKgyecr7XgoKBZ9daJkk7fzvnwxg/132","nickname":"Ccc","note":"","ucode":"5A588B3EE9BF98","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378076,"discussion_content":"就是 ES6 中的参数解构和重命名，p0、p1、p2 的数据结构都是 {x, y}，将他们的 x 取出来并重命名为 x0、x1、x2。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623051214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295135,"ip_address":""},"score":378076,"extra":""}]}]},{"had_liked":false,"id":243758,"user_name":"不见飞刀","can_delete":false,"product_type":"c1","uid":1221078,"ip_address":"","ucode":"2490E8D608CECA","user_header":"https://static001.geekbang.org/account/avatar/00/12/a1/d6/9d99e5ef.jpg","comment_is_top":false,"comment_ctime":1598268213,"is_pvip":false,"replies":[{"id":"89818","content":"这是线性插值，t是当前时间的值","user_name":"作者回复","comment_id":243758,"uid":"1159792","ip_address":"","utype":1,"ctime":1598313170,"user_name_real":"月影"}],"discussion_count":3,"race_medal":0,"score":"10188202805","product_id":100053801,"comment_content":"老师能不能解释一下const t = start * (1 - p) + end * p; 这段代码里的t的意义是什么，为什么要这么算","like_count":2,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504384,"discussion_content":"这是线性插值，t是当前时间的值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598313170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2131824,"avatar":"","nickname":"Geek8686","note":"","ucode":"00A170CACF8365","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327218,"discussion_content":"const t = start + (end - start) * p;\n不知道这样表达会不会更清楚；\n同时少了一次乘法操作；","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1605770450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2045427,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/35/f3/32a3afa0.jpg","nickname":"Gazer","note":"","ucode":"E65544BFF884DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2131824,"avatar":"","nickname":"Geek8686","note":"","ucode":"00A170CACF8365","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334983,"discussion_content":"我纠结了半天...p的问题..\n最后：\nvar seg =9\nvar start =1,end = 10\nfor(var i=0;i<=seg;i++){\n    var p = i/seg;\n    var t = start*(1-p)+end*p \n\n    var t = start -start*p+end*p\n\n    var t = start -(start-end)*p\n\n    var t = start + (end-start)*i/seg\n    \n    var t = start + (end-start)/seg*i\n\n}","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608042277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327218,"ip_address":""},"score":334983,"extra":""}]}]},{"had_liked":false,"id":252430,"user_name":"I keep my ideals💤","can_delete":false,"product_type":"c1","uid":1483413,"ip_address":"","ucode":"38E68A0BCABA01","user_header":"https://static001.geekbang.org/account/avatar/00/16/a2/95/8f34237c.jpg","comment_is_top":false,"comment_ctime":1602299278,"is_pvip":true,"replies":[{"id":"93054","content":"就是整圆的线段数乘以弧度与2pi的比值得到圆弧的线段数","user_name":"作者回复","comment_id":252430,"uid":"1159792","ip_address":"","utype":1,"ctime":1603354327,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"5897266574","product_id":100053801,"comment_content":"const segments = Math.round(TAU_SEGMENTS * ang &#47; TAU)不太理解这一步的含义  希望老师能够帮我解除一下疑惑","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506773,"discussion_content":"就是整圆的线段数乘以弧度与2pi的比值得到圆弧的线段数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603354327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1469487,"avatar":"https://static001.geekbang.org/account/avatar/00/16/6c/2f/1dfbcf27.jpg","nickname":"昂帕帕斯","note":"","ucode":"244C3F6B455899","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319185,"discussion_content":"一个整圆由 TAU_SEGMENTS(60) 段弧线构成，整圆弧度是 2 PI；当目标图形弧度为 ang 时（可能不是整圆），此时弧线的段数 = ang / 2 PI * TAU_SEGMENTS，代码里 TAU 的值就是 2 PI；比如一个半圆 ang = PI，代入公式半圆的弧线数量就是30段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603959203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239418,"user_name":"量子蔷薇","can_delete":false,"product_type":"c1","uid":1999274,"ip_address":"","ucode":"EFD71A65DF2262","user_header":"https://static001.geekbang.org/account/avatar/00/1e/81/aa/1f7a8e88.jpg","comment_is_top":false,"comment_ctime":1596528623,"is_pvip":false,"replies":[{"id":"88827","content":"这个需要慢慢练习就有感觉了<br>","user_name":"作者回复","comment_id":239418,"uid":"1159792","ip_address":"","utype":1,"ctime":1597022519,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5891495919","product_id":100053801,"comment_content":"请问老师，圆和椭圆的参数方程使用弧度值作为参数，所以即使只看方程也能想象出曲线的样子，但是其他曲线比如圆锥曲线的 start 和 end 不能理解起到了什么作用，只能凭感觉画出来后再改参数慢慢微调，如何选择 start 和 end 的值，这里面有什么技巧吗？","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503099,"discussion_content":"这个需要慢慢练习就有感觉了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597022519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232425,"user_name":"廖熊猫","can_delete":false,"product_type":"c1","uid":1141444,"ip_address":"","ucode":"8E8C475CD11FBC","user_header":"https://static001.geekbang.org/account/avatar/00/11/6a/c4/8679ca8a.jpg","comment_is_top":false,"comment_ctime":1594000942,"is_pvip":false,"replies":[{"id":"86034","content":"其实理解贝塞尔曲线的原理就大致能知道贝塞尔曲线的样子。不过如果需要精确的控制，还是应该用一些画贝塞尔曲线的工具，这类工具不少，你可以在github上搜一下，输入简单的参数就可以将图形画出来。","user_name":"作者回复","comment_id":232425,"uid":"1159792","ip_address":"","utype":1,"ctime":1594261820,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5888968238","product_id":100053801,"comment_content":"感谢月影老师的讲解。贝塞尔曲线接触的时间也挺长了，但是总是感觉不得要领，曲线的公式都是死记硬背出来的，也很难想象出来对应控制点绘制出来的曲线的大概样子，其实对于很多类似贝塞尔曲线的参数绘制曲线都是这样子，希望可以了解下对于这些曲线，老师平时都是怎么记忆还有想象大概的绘制形状的？","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500639,"discussion_content":"其实理解贝塞尔曲线的原理就大致能知道贝塞尔曲线的样子。不过如果需要精确的控制，还是应该用一些画贝塞尔曲线的工具，这类工具不少，你可以在github上搜一下，输入简单的参数就可以将图形画出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594261820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341826,"user_name":"、轻","can_delete":false,"product_type":"c1","uid":1625453,"ip_address":"","ucode":"30713196ED1AA6","user_header":"https://static001.geekbang.org/account/avatar/00/18/cd/6d/928b0ffd.jpg","comment_is_top":false,"comment_ctime":1649849477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649849477","product_id":100053801,"comment_content":"终于明白贝塞尔曲线是怎么画的了","like_count":0},{"had_liked":false,"id":325592,"user_name":"null","can_delete":false,"product_type":"c1","uid":1130862,"ip_address":"","ucode":"3C97A82395E95C","user_header":"https://static001.geekbang.org/account/avatar/00/11/41/6e/e04ab385.jpg","comment_is_top":false,"comment_ctime":1639034031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639034031","product_id":100053801,"comment_content":"const t = start * (1 - p) + end * p; <br>刚开始 p 和抛物线中的 p 混淆，迷乱好一会儿；之后对于这个公式疑惑好久，一个【线性插值】瞬间顿悟。start 和 end 可以是圆或椭圆的弧度范围，也可以是一段类似于坐标的范围，最终 t 是这个范围内的线性插值。之后各个曲线的坐标再基于这个线性变化的 t 计算各自的变化结果；","like_count":0},{"had_liked":false,"id":322018,"user_name":"飞尚前端小组（1）","can_delete":false,"product_type":"c1","uid":2837377,"ip_address":"","ucode":"1E750C90F23EED","user_header":"","comment_is_top":false,"comment_ctime":1637139055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637139055","product_id":100053801,"comment_content":"曲线两种方式：向量和参数方程。我的总结是：线段和点。点和点之间通过lineTo连接。我的问题是：lineTo画的不也是线段吗？和向量画的线段有啥区别？ ","like_count":0},{"had_liked":false,"id":322017,"user_name":"飞尚前端小组（1）","can_delete":false,"product_type":"c1","uid":2837377,"ip_address":"","ucode":"1E750C90F23EED","user_header":"","comment_is_top":false,"comment_ctime":1637138814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637138814","product_id":100053801,"comment_content":"描述曲线的两种方式：向量和参数方程；我的总结：两种方式其实是线段和点的方式。 问题来了两个点之间又是怎么连接的？代码中是通过lineTo，那么lineTo不也是描述线段吗。lineTo不也是向量绘制？ ","like_count":0},{"had_liked":false,"id":317938,"user_name":"timeless","can_delete":false,"product_type":"c1","uid":1241839,"ip_address":"","ucode":"D90018D0FBC6B2","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/ef/fa8ab590.jpg","comment_is_top":false,"comment_ctime":1635065850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635065850","product_id":100053801,"comment_content":"有个问题想请教一下老师，如何解决画多边形的头和尾的误差，比如三角形的起点坐标是原点，但是最后的计算数组得到的末尾点是接近原点（-4,1)，因为计算机的角度计算是近似值不是精确值","like_count":0},{"had_liked":false,"id":310289,"user_name":"Ray","can_delete":false,"product_type":"c1","uid":1241787,"ip_address":"","ucode":"0A5319C7BF884E","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/bb/293e4641.jpg","comment_is_top":false,"comment_ctime":1630578151,"is_pvip":false,"replies":[{"id":"114130","content":"参数方程啊，抛物线是二次曲线。","user_name":"作者回复","comment_id":310289,"uid":"1159792","ip_address":"","utype":1,"ctime":1633750086,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"1630578151","product_id":100053801,"comment_content":"老师，我想问一下，抛物线里const t = min * (1 - s) + max * s;是怎么理解的，t不应该是正弦的倒数x&#47;y吗？","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526186,"discussion_content":"参数方程啊，抛物线是二次曲线。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633750086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262637,"user_name":"秋谷","can_delete":false,"product_type":"c1","uid":1515645,"ip_address":"","ucode":"745E8DB283BB51","user_header":"https://static001.geekbang.org/account/avatar/00/17/20/7d/2a5c137c.jpg","comment_is_top":false,"comment_ctime":1605788109,"is_pvip":false,"replies":[{"id":"101110","content":"内角大小公式","user_name":"作者回复","comment_id":262637,"uid":"1159792","ip_address":"","utype":1,"ctime":1612876567,"user_name_real":"月影"}],"discussion_count":6,"race_medal":0,"score":"1605788109","product_id":100053801,"comment_content":"老师，那个正多边形的里面的const delta = Math.PI * (1 - (edges - 2) &#47; edges)，这个是求每个角的大小的吗，是内角和 &#47; edges的意思吗，没有看懂","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509908,"discussion_content":"内角大小公式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612876567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1356099,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b1/43/5eebf2cd.jpg","nickname":"我系小艾","note":"","ucode":"274272105939D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349865,"discussion_content":"这样可能好理解点\nMath.PI-((edges-2)*Math.PI/edges)\n其中（edges-2）*Math.PI是内角和公式","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1613604483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1758012,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eokhlnrZO1G1SnxWka7hSeqwHnIcuQKugQDBDKUDXc2ZDXKsibHTNviaG6CiaqBiaK5Bwcu37xakaFthw/132","nickname":"Zack","note":"","ucode":"758511DF7D6D17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331615,"discussion_content":"感觉是算正多边形每个内角对应的外角大小","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1606915211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2108781,"avatar":"https://static001.geekbang.org/account/avatar/00/20/2d/6d/08103212.jpg","nickname":"王成","note":"","ucode":"FDC39D4316988A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567673,"discussion_content":"// !!!三角形内角和=180，多边形内角和=(n-2)*180 度；\n// 如果是正多边形，则每个角的角度=(n-2)*180/n 度;\n// 那么每条边需要转动的角度则为每个角的补角=180-(n-2)*180/n 度;\n// 转换成弧度=(Math.PI/180) * (180-(n-2)*180/n) rad;\n// !!!化简后，每条边需要转动的弧度差 = Math.PI/180 * 180*(1-(n-2)/n) = Math.PI*(1-(n-2)/n) rad","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650972608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130862,"avatar":"https://static001.geekbang.org/account/avatar/00/11/41/6e/e04ab385.jpg","nickname":"null","note":"","ucode":"3C97A82395E95C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537123,"discussion_content":"是每个外角的大小，多边形外角和是 2 * Math.PI，直接使用 (2 * Math.PI) / n 会直观一点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638963612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2303741,"avatar":"https://static001.geekbang.org/account/avatar/00/23/26/fd/11fb6e9f.jpg","nickname":"赫拉莉","note":"","ucode":"6AF2EA33B5DEC4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390507,"discussion_content":"我也觉得是计算外角","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629870028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253388,"user_name":"I keep my ideals💤","can_delete":false,"product_type":"c1","uid":1483413,"ip_address":"","ucode":"38E68A0BCABA01","user_header":"https://static001.geekbang.org/account/avatar/00/16/a2/95/8f34237c.jpg","comment_is_top":false,"comment_ctime":1602725382,"is_pvip":true,"replies":[{"id":"92599","content":"代表绘制的坐标范围","user_name":"作者回复","comment_id":253388,"uid":"1159792","ip_address":"","utype":1,"ctime":1602814197,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"1602725382","product_id":100053801,"comment_content":"<br>&#47;&#47; 抛物线参数方程<br>const para = parametric(<br>  t =&gt; 25 * t,<br>  t =&gt; 25 * t ** 2,<br>);<br><br>&#47;&#47; 绘制抛物线<br>para(-5.5, 5.5).draw(ctx);<br><br>想请教老师 这里调用抛物线方程 para函数里面的-5.5 和5.5的值代表什么呢  好像并不是点的坐标","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507060,"discussion_content":"代表绘制的坐标范围","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602814197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243754,"user_name":"不见飞刀","can_delete":false,"product_type":"c1","uid":1221078,"ip_address":"","ucode":"2490E8D608CECA","user_header":"https://static001.geekbang.org/account/avatar/00/12/a1/d6/9d99e5ef.jpg","comment_is_top":false,"comment_ctime":1598267111,"is_pvip":false,"replies":[{"id":"95002","content":"参数方程里的参数","user_name":"作者回复","comment_id":243754,"uid":"1159792","ip_address":"","utype":1,"ctime":1605515662,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"1598267111","product_id":100053801,"comment_content":"抛物线方程里的t是什么意思","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504383,"discussion_content":"参数方程里的参数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605515662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243753,"user_name":"不见飞刀","can_delete":false,"product_type":"c1","uid":1221078,"ip_address":"","ucode":"2490E8D608CECA","user_header":"https://static001.geekbang.org/account/avatar/00/12/a1/d6/9d99e5ef.jpg","comment_is_top":false,"comment_ctime":1598266789,"is_pvip":false,"replies":[{"id":"89820","content":"抛物线的参数方程是x轴线性方程，y轴二次方程，根据物理意义就可以知道，水平方向匀速，垂直方向匀加速就是抛物线","user_name":"作者回复","comment_id":243753,"uid":"1159792","ip_address":"","utype":1,"ctime":1598313301,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"1598266789","product_id":100053801,"comment_content":"抛物线函数那些参数是什么意思","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504382,"discussion_content":"抛物线的参数方程是x轴线性方程，y轴二次方程，根据物理意义就可以知道，水平方向匀速，垂直方向匀加速就是抛物线","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598313301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243731,"user_name":"不见飞刀","can_delete":false,"product_type":"c1","uid":1221078,"ip_address":"","ucode":"2490E8D608CECA","user_header":"https://static001.geekbang.org/account/avatar/00/12/a1/d6/9d99e5ef.jpg","comment_is_top":false,"comment_ctime":1598259831,"is_pvip":false,"replies":[{"id":"89821","content":"根据参数命名分别是圆心x,y,半径,起始角和结束角","user_name":"作者回复","comment_id":243731,"uid":"1159792","ip_address":"","utype":1,"ctime":1598313496,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"1598259831","product_id":100053801,"comment_content":"老师能不能解释下arc函数那段代码里各个变量的意义，我实在是猜不到啊","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504376,"discussion_content":"根据参数命名分别是圆心x,y,半径,起始角和结束角","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598313496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233347,"user_name":"Geek_3469f6","can_delete":false,"product_type":"c1","uid":2047009,"ip_address":"","ucode":"AE8CA3C7A8EF86","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3c/21/58f3740d.jpg","comment_is_top":false,"comment_ctime":1594294938,"is_pvip":false,"replies":[{"id":"86181","content":"很棒呀👍","user_name":"作者回复","comment_id":233347,"uid":"1159792","ip_address":"","utype":1,"ctime":1594346912,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"1594294938","product_id":100053801,"comment_content":"查阅了一下相关的资料，肾形线、摆线、心形线都可以轻易画出来，发明曲线参数方程是不会的。不过数学不好，需要调整一下参数、做一些移动、旋转之类的操作，才能让曲线正常一些。<br>https:&#47;&#47;codepen.io&#47;maslke&#47;pen&#47;pogVZjJ<br><br>我对parametric的理解是，它是一个高阶函数，是返回函数的函数。它的两个参数也都是函数，在文中的实现是使用了lambda的方式，写成function匿名函数的方式也是可以的。给定参数，第一次对parametric的调用，会返回一个函数。内部函数的返回结果是一个包含了draw函数和points属性的对象。<br>","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500987,"discussion_content":"很棒呀👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594346912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2359065,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoXXuvMlDFGib4ITSpTOVBRKhS8SbDrAgwjWQ6ZU7CnMkicgqYsj2gOHbpiaBmmtFVbAX1SlMfgHo2Ag/132","nickname":"Geek_ba2d95","note":"","ucode":"FA1C381D881377","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337077,"discussion_content":"三阶贝塞尔公式错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608792792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}