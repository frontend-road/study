{"id":658229,"title":"10｜详情页实现：如何实现需求定制化？","content":"<p>你好，我是Barry。</p><p>在日常开发中我们会接到各式各样的功能需求，那么如何根据业务特点选择合适的实现方式呢？</p><p>如果你稍微思考一下，就会发现里面有很多需求要点要提前考虑，比如说，页面开发过程中，实现的时候用组件，还是手写CSS？功能设计怎样才合理？功能代码实现又要如何完成呢？</p><p>这节课，我们就结合在线视频平台里两个重要的定制化模块——个人中心和视频详情页，帮你系统强化一下功能需求分析和技术选择判断等综合能力。掌握了这套分析思考方法，相信你未来应对其他模块开发的时候，也会更加得心应手。</p><p>这节课的代码量非常大，所以要认真听我的讲解，不要掉队哦。</p><h2>个人中心需求分析</h2><p>个人中心，几乎是所有应用都必备的一个模块，大多用来处理与用户相关的功能。每个平台的定位不同，个人中心也有很多定制化的需求。</p><p>那么，做视频平台的个人中心和其他通用的产品有什么不同呢？为了解决这个问题，我们需要先完成视频平台个人中心模块的需求分析，才能理清思路。</p><p>首先，除了常规的个人信息管理需求外，用户在浏览平台内视频的时候，还会进行点赞，收藏等动作，所以个人中心要满足用户的收藏和点赞内容的管理。</p><p>另外，别忘了我们的平台是UGC的，用户还有发布自己内容的需求。因此，个人中心还有一块比较重要的内容就是用户的关注数、粉丝数以及作品数，除了这三项基本数据，你也可以想一想还有什么关键数据。</p><!-- [[[read_end]]] --><p>现在，我们就可以按重要程度整理出视频平台的个人中心应该具备哪些功能了。</p><ul>\n<li>必须满足个人信息管理的需求。</li>\n<li>能够呈现用户相关喜好记录，例如点赞、收藏内容的管理。</li>\n<li>能够展示用户在平台内重点关注的一些数据。</li>\n</ul><p>明确了方向，我们还需要继续细化一下，想清楚这些功能都安排在哪里才更符合用户的习惯。这里分享一个小技巧，我们不妨以终为始，代入用户的视角，想象一下他们如何使用个人中心。</p><p>首先，个人中心入口我们安排在平台首页头部右上方，<strong>用户点击自己的头像就会出现下拉列表，</strong>里面就包括个人中心、创作中心等等这些菜单栏。</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/02/d3d5cd21b941904db0ec46836781da02.jpg?wh=2940x993\" alt=\"\"></p><p>接下来，用户点击个人中心就能跳转到个人中心的界面。对应前面的功能分析，这个界面大致分三个部分。</p><ul>\n<li>个人基础信息管理，包括用户名、头像信息和个人资料信息，支持用户灵活修改。</li>\n<li>用户喜好的记录，我们需要分别展示点赞、收藏、关注的数据。</li>\n<li>重要数据信息，比如用户发布视频的播放数据、粉丝数据、活跃度等。</li>\n</ul><p>具体呈现哪些数据，我们可以分成基础必备项和定制项来考虑。</p><p>基础必备项就是必须具备的数据指标，比如对于发布视频内容的用户，我们需要给他们展示视频播放量、粉丝数、视频点赞数等等。定制项更加考验我们的创造力和业务理解能力，需要根据特定场景定制化设计。比如为了帮助内容创作者把控内容，就可以设计粉丝活跃度这样的指标。</p><h2>个人中心的代码实现</h2><p>接下来我们看看这些功能需求应该如何实现。具体的实现代码是后面这样。</p><pre><code class=\"language-plain\">&lt;div class=\"user-wrapper rt\" v-if=\"user.user_id\"&gt; \n//这里的v-if主要是判断当前用户是否已登陆\n  &lt;el-dropdown trigger=\"click\"&gt;\n    &lt;div&gt;\n    //img标签主要用于展示头像，onerror的作用是，当无法加载的时候默认提供一张图片\n      &lt;img\n        :src=\"user.avatar_url || $store.state.userAvatar\"\n        :onerror=\"$store.state.defaultAvatar\"\n        alt\n      /&gt;\n      &lt;i class=\"el-icon-caret-bottom el-icon--right\"&gt;&lt;/i&gt;\n    &lt;/div&gt;\n    //以下是对el-dropdown-menu组件的应用\n    &lt;el-dropdown-menu slot=\"dropdown\"&gt;\n      &lt;el-dropdown-item class=\"clearfix\" @click.native=\"goHome\"\n        &gt;个人中心&lt;/el-dropdown-item\n      &gt;\n      &lt;el-dropdown-item class=\"clearfix\" @click.native=\"goAdmin\"\n        &gt;创作中心&lt;/el-dropdown-item\n      &gt;\n      &lt;el-dropdown-item class=\"clearfix\" @click.native=\"goData\"\n        &gt;数据中心&lt;/el-dropdown-item\n      &gt;\n      &lt;el-dropdown-item class=\"clearfix\" @click.native=\"goInfo\"\n        &gt;我的资料&lt;/el-dropdown-item\n      &gt;\n      &lt;el-dropdown-item class=\"clearfix\" @click.native=\"goPublic\"\n        &gt;发布视频&lt;/el-dropdown-item\n      &gt;\n      &lt;el-dropdown-item class=\"clearfix\" @click.native=\"onLogout\"\n        &gt;退出&lt;/el-dropdown-item\n      &gt;\n    &lt;/el-dropdown-menu&gt;\n&lt;/el-dropdown&gt;\n</code></pre><p>style部分的代码是后面这样。</p><pre><code class=\"language-plain\">.user-wrapper {\n    img {\n      width: 40px;\n      height: 40px;\n      border-radius: 50%;\n      vertical-align: middle;\n      cursor: pointer;\n      margin-right: -5px;\n    }\n    span {\n      vertical-align: middle;\n      font-size: 12px;\n      cursor: pointer;\n    }\n  }\n</code></pre><p>对照代码，我们来梳理一下个几个比较重要的部分。第一个部分是el-dropdown组件，也就是我们Element的组件。应对“<strong>用户点击自己的头像就会出现下拉列表”</strong>这样的展示需求，用官方提供的下拉列表组件来呈现是更加合适的。</p><p><img src=\"https://static001.geekbang.org/resource/image/67/db/679f19cf55eb9a0e45a4b28d1c2074db.jpg?wh=2179x1569\" alt=\"\"></p><p>课后你可以通过<a href=\"https://element.eleme.cn/#/zh-CN/component/dropdown\">这个链接</a>查看官网的具体案例和对应界面，自己练习巩固一下。</p><p>进入个人中心之后，整体的页面布局切为上下两块。当然这个布局格式比较灵活，你也可以自己发挥设计一下，通过代码实现尝试不同的风格。</p><p>我们回到项目里的实现，我先用假数据呈现效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/4e/7646c2acdc5087c5d733753b468cbf4e.jpg?wh=2966x1361\" alt=\"\"></p><p>黄色框内是主要展示用户个人的关注、粉丝、文章数，同时还有修改资料的功能。</p><p>蓝色框内主要用来展示用户相关的点赞、收藏、关注的详情，我们切换不同的Tab，就可以查看相应的内容，每一条内容都详细地展示了视频相关数据。我们也可以通过右侧的删除操作来调整内容。</p><p>接下来看一下具体的代码实现。</p><pre><code class=\"language-plain\">&lt;div class=\"user-data\"&gt;\n  &lt;p class=\"nick-name\"&gt;{{userInfo.nickName}}&lt;/p&gt;\n  &lt;ul&gt;\n    &lt;li&gt;\n      &lt;p&gt;{{followList.length}}&lt;/p&gt;\n      &lt;p&gt;关注&lt;/p&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;p&gt;{{userInfo.fansNum||0}}&lt;/p&gt;\n      &lt;p&gt;粉丝&lt;/p&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;p&gt;{{articleList.length}}&lt;/p&gt;\n      &lt;p&gt;文章&lt;/p&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;div v-if=\"isUserCenter\" class=\"handle-buttons\"&gt;\n  &lt;button class=\"button-default\" @click=\"goInfo\"&gt;修改资料&lt;/button&gt;\n&lt;/div&gt;\n</code></pre><p>CSS样式部分是后面这样。</p><pre><code class=\"language-plain\">.user-data {\n  display: inline-block;\n  vertical-align: middle;\n  .nick-name {\n    font-size: 16px;\n    font-weight: bold;\n    text-align: center;\n    margin-bottom: 16px;\n  }\n  \n.user-data {\n  display: inline-block;\n  vertical-align: middle;\n  .nick-name {\n    font-size: 16px;\n    font-weight: bold;\n    text-align: center;\n    margin-bottom: 16px;\n  }\n  \nul {\n  li {\n    display: inline-block;\n    border-right: 1px solid @border-color;\n    text-align: center;\n    padding: 0 10px;\n  }\n  li:last-child {\n    border: none;\n  }\n}\n\n.handle-buttons {\n  display: inline-block;\n  vertical-align: middle;\n  margin-left: 50px;\n  button {\n    width: 100px;\n  }\n}\n</code></pre><p>我们这里依然用列表标签&lt;li&gt;实现蓝色功能区，同时结合了v-for指令，遍历出我的点赞、我的收藏、我的关注三个Tabs，我们把这三个类别放到tabList列表中，所以这里需要关注tabList中的内容。</p><pre><code class=\"language-plain\">&lt;ul v-if=\"isUserCenter\" class=\"tab-list\"&gt;\n  &lt;li\n    v-for=\"(item,index) in tabList\"\n    :key=\"index\"\n    :class=\"index==active?'active':''\"\n    @click=\"active=index\"\n  &gt;{{item.name}}&lt;/li&gt;\n&lt;/ul&gt;\n\n//值的初始化，这一部分写在&lt;script&gt;内\ntabList: [\n  {\n    name: \"我的点赞\",\n    total: 0, //默认的内容条数\n  },\n  {\n    name: \"我的收藏\",\n    total: 0,\n  },\n  {\n    name: \"我的关注\",\n    total: 0,\n  },\n],\n</code></pre><p>每一个分区展示的内容，都是通过指令v-show判断active值的变换来展示的。</p><p>我们继续往下看，后面是详细的代码实现，可以看到active值的变换是通过指令v-show来判断的。</p><pre><code class=\"language-plain\">&lt;div v-show=\"active==0\"&gt;\n  &lt;ul class=\"article-list\"&gt;\n    &lt;li v-for=\"(item,index) in articleList\" @click=\"goDetail(item.articleId)\" :key=\"index\"&gt;\n      &lt;div&gt;\n        &lt;p class=\"article-title\"&gt;{{item.articleTitle}}&lt;/p&gt;\n        &lt;div class=\"article-content\" v-html=\"item.articleDetails\"&gt;&lt;/div&gt;\n        &lt;p&gt;\n          &lt;span&gt;2020-07-22 16:00&lt;/span&gt;\n          &lt;span class=\"rt\"&gt;\n            &lt;i class=\"icon-play\"&gt;&lt;/i&gt;\n            &lt;span&gt;{{item.play_times}}&lt;/span&gt;\n            &lt;i class=\"icon-good\"&gt;&lt;/i&gt;\n            &lt;span&gt;{{item.good}}&lt;/span&gt;\n            &lt;i class=\"icon-heart\"&gt;&lt;/i&gt;\n            &lt;span&gt;{{item.like}}&lt;/span&gt;\n            &lt;i class=\"icon-star\"&gt;&lt;/i&gt;\n            &lt;span&gt;{{item.collect}}&lt;/span&gt;\n          &lt;/span&gt;\n        &lt;/p&gt;\n      &lt;/div&gt;\n      &lt;span&gt;{{item.author}}&lt;/span&gt;\n      &lt;img :src=\"item.photoUrl\" alt /&gt;\n      &lt;span&gt;\n        &lt;i class=\"el-icon-delete\" @click.stop=\"onDelete(item.articleId,index)\"&gt;&lt;/i&gt;\n      &lt;/span&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre><p>这里的articleList代表的就是“我的点赞”内容的数量，通过v-for遍历依次展示每一条点赞的内容。<span>标签主要展示了视频的详情内容。其中的字段定义我们可以灵活定义，但是一定要明确含义，并且要与你在数据库定义的字段一致。在请求后端接口返回数据之后，就可以直接在页面显示对应的信息了。</span></p><p>另外两个模块（我的收藏和我的关注）实现思路和刚才讲过的模块差不多。</p><p>我们重点需要关注两点。第一，不同模块展示的内容不同、数据字段也不同，这样才能区别开来；第二就是关注页面展示内容的数据格式，想清楚怎么样组合封装更好处理，这也是我们字段定义和开发过程中要重点关注的。</p><h3>页面数据的获取与判断</h3><p>接下来，我们结合例子分析一下如何处理数据的获取和判断。比如视频详情页里要展示的内容比较多，就需要我们提前梳理清数据的逻辑，才能全面展示页面内容。</p><p>我画了一张导图来分个类，这样比较清晰。可以看到，从后端返回来的数据里，一部分是我们直接能用的，另一部分则是需要判断处理后才能在页面展示。</p><p><img src=\"https://static001.geekbang.org/resource/image/06/0b/06ba3322be1417da0eabed5b711d660b.jpg?wh=2966x1227\" alt=\"\"></p><p>为什么做这样的区分呢？其实这关系到内容如何呈现。可以直接用的数据，我们只要定义好数据格式，在页面中直接填充或遍历填充即可。</p><p>但是需要判断处理的数据，数据的初始值和接口返回的数据是两个状态。我举个例子你会更容易理解，比如在页面加载的时候，点赞的图标状态值默认就是false，它的图标就是灰色的。等到前端拿到接口的值，发现状态值是true，这时候它就要变成红色了。所以，我们就要在标签展示的代码里实现数据的判断。</p><h2>数据格式案例</h2><p>数据格式案例是我们在页面呈现内容的时候展示的信息，这样的封装有利于在页面展示，同时也是后端接口返回来的数据格式。因此，我们之后在做接口开发的时候，就需要把数据格式封装好。</p><p>我们结合具体案例来看看，在视频右侧的相似视频数据格式应该是什么样子的。结合代码里的注释，相信你可以看懂其中的含义。</p><pre><code class=\"language-plain\">data: {\n    total: 5,\n    'rows': [{\n      id: '1', //视频id\n      image: './static/1.jpg', //视频封面\n      name: '@name' //视频名称\n    },{\n      id: '2',\n      image: './static/2.jpg',\n      name: '@name'\n    },{\n      id: '3',\n      image: './static/3.jpg',\n      name: '@name'\n    },{\n      id: '4',\n      image: './static/4.jpg',\n      name: '@name'\n    },{\n      id: '5',\n      image: './static/5.jpg',\n      name: '@name'\n    }]\n  }\n</code></pre><p>以上就是个人中心模块的界面代码实现和数据格式的内容。你会发现数据的格式和页面样式的设计在代码实现上是息息相关的，所以在设计过程中，一定要全方位考虑。</p><h2>视频详情需求分析</h2><p>接下来我们来学习另一个经典案例——视频详情模块的实现。</p><p>我们从视频详情模块的需求分析入手。<br>\n<img src=\"https://static001.geekbang.org/resource/image/54/3b/5486d598585e62bc85119e0d1c9e103b.jpg?wh=2769x1329\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/86/67/86b42870e16bf46d6fb3e837370ece67.jpg?wh=1986x701\" alt=\"\"></p><p>借鉴前面个人中心需求的分析思路，我们分析一下用户需要在这个页面完成哪些操作。</p><p>首先，最核心的功能自然是视频播放器了，主要满足用户观看视频的需求。其次，为了增强视频的互动性，应该支持用户对视频进行点赞、收藏、评论，关注等操作。最后是推荐列表，我们希望界面中具备相似或推荐视频列表，增强用户与平台的黏性。</p><p>至于页面设计，需要注意的是页面要与整个平台的设计风格统一，在此基础上还要满足我们前面提到的功能。</p><h2>视频详情页的功能实现</h2><p>用户在视频列表中点击任意项目的视频以后，就会进入视频详情页。</p><p>结合前面的分析，我们把详情页面划分为两个功能区。上半部分是展示区，用来展示当前播放的视频和一些推荐视频列表，供用户观看和选择。下半部分就是功能区，用来满足用户互动相关功能，增强观看体验。</p><h3>展示区实现</h3><p>视频详情页的展示区还可以继续分割成两个部分。</p><p>第一部分是视频详情页最主要的播放器。第二部分是相似视频推荐，可以放在播放器右侧，展示一些与播放视频相似主题的视频，增强用户的黏性。</p><p>后面是具体代码实现。在代码实现部分，我们首先要关注在布局上的CSS实现和组件的使用，这一部分就是对CSS实践应用的考量。另外，这个部分有助于我们练习v-show等指令的应用，重点就是利用状态值的变化来灵活控制展示的内容。</p><pre><code class=\"language-plain\">&lt;div&gt;\n  &lt;p class=\"video-title\"&gt;{{ info.title }}&lt;/p&gt; //视频的标题\n&lt;/div&gt;\n&lt;div class=\"video-container\"&gt;\n  &lt;div class=\"left-container\"&gt;\n    &lt;div id=\"dplayer\"&gt;&lt;/div&gt; //播放器展位，播放器后边会重点讲解\n    &lt;div class=\"video-bottom-area\"&gt;\n      &lt;span class=\"play-times\"&gt;\n        //视频相关数据\n        &lt;span&gt;{{ info.play_times }}&lt;/span&gt;次播放量&lt;/span&gt;\n      &lt;span class=\"play-times\"&gt;\n        &lt;span&gt;{{ info.play_times }}&lt;/span\n        &gt;个赞\n      &lt;/span&gt;\n      &lt;span class=\"play-times\"&gt;\n        &lt;span&gt;{{ info.play_times }}&lt;/span\n        &gt;次收藏\n      &lt;/span&gt;\n      &lt;div class=\"auther-info rt clear\"&gt;\n        &lt;div class=\"lf\" @click=\"goHome(info.auther.userId)\"&gt; //点击头像或名字直接跳转到作者详情页\n          &lt;img :src=\"info.auther.photoUrl || $store.state.userAvatar\" alt /&gt;\n        &lt;/div&gt;\n        &lt;p class=\"author-name\" @click=\"goHome(info.auther.userId)\"&gt;\n          {{ info.auther.nickName }}\n        &lt;/p&gt;\n        //关注按钮，点击按钮关注作者\n        &lt;button\n          v-show=\"!info.auther.hasFollow\" //这里用到v-show判断是否已经关注，如果没有关注就显示关注按钮，否则展示取消关注按钮\n          class=\"button-primary rt\"\n          @click=\"followUser(info.auther.userId)\"\n        &gt;\n          关注\n        &lt;/button&gt;\n        &lt;button\n          v-show=\"info.auther.hasFollow\"\n          class=\"button-primary rt\"\n          @click=\"followUser(info.auther.userId)\"\n        &gt;\n          取消关注\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n</code></pre><p>CSS样式我也写在下面了，你可以直接参考，我把你可能觉得陌生的属性都加了注释。</p><pre><code class=\"language-plain\">.video-title {\n  font-size: 20px;\n  font-weight: bold;\n  padding-bottom: 20px;\n}\n.video-container {\n  display: flex;\n  justify-content: center; //用于设置或检索弹性盒子元素在主轴\n  .left-container {\n    width: 880px;\n    position: relative;\n    box-shadow: 0 0 8px #e5e9ef;  //设置多个阴影效果\n    video {\n      width: 100%;\n      height: 440px;\n      border: 0;\n      background: #000;\n    }\n    #canvas {\n      position: absolute;\n      left: 0;\n      top: 0;\n    }\n    .video-bottom-area {\n      padding: 20px;\n      .auther-info {\n        width: 140px;\n        &gt; div:first-child {//组合选择器，既满足是div元素，又满足是父级元素的“第一个孩子”\n          text-align: center;\n          img {\n            width: 60px;\n            height: 60px;\n          }\n        }\n        .author-name {\n          font-size: 14px;\n          font-weight: bold;\n          margin-bottom: 8px;\n          text-align: center;\n        }\n        button {\n          height: 28px;\n          line-height: 28px;\n        }\n      }\n      .play-times {\n        line-height: 60px;\n        margin-left: 20px;\n        color: #707070;\n        span {\n          margin-right: 5px;\n        }\n      }\n      .bullet-input {\n        margin-bottom: 20px;\n        padding-top: 10px;\n        .el-input {\n          width: 360px;\n        }\n        p {\n          cursor: pointer;\n        }\n      }\n    }\n  }\n</code></pre><p>进行到这里，我们完成了展示区的视频播放器页面设计与开发。你既可以参考<a href=\"https://gitee.com/Barry_Python_web/python_web_code.git\">课程配套代码</a>尝试开发，也可以加一些自己的想法做更多尝试。</p><h3>功能区实现</h3><p>接下来我们看看功能区，功能区主要用来满足后面这三类需求。</p><ul>\n<li>点赞和收藏功能：如果用户喜欢某个视频或者作者，可以收藏和点赞。</li>\n<li>评论功能：对视频做评论，满足用户的互动需求。</li>\n<li>关注功能：如果用户对视频的作者非常喜爱，可以直接点击关注按钮关注作者。</li>\n</ul><h4>点赞和收藏功能实现</h4><p>先来看看我做的这一版的效果。<br>\n<img src=\"https://static001.geekbang.org/resource/image/66/f9/66725fa76cc8b77705c5d97b1cebe2f9.jpg?wh=1981x824\" alt=\"\"><br>\n截图左侧框起来的部分，黄色图标代表收藏，红色图标代表点赞。当用户点击时，图标会由灰色分别变为黄色和红色。</p><p>实现逻辑的关键点就是通过v-show标签指令判断hasCollect值。我们重点去关注点赞和收藏的实现方法，在功能开发上<strong>点赞和收藏的实现逻辑是保持一致的</strong>。</p><p>在点击的时候会发生状态值的传递，未关注状态下点击按钮则向后端传值1。用户点击关注按钮的时候不但修改了状态，同时数据库也会记录当前用户已经对该视频点赞。</p><p>当该用户再进入该页面，就可以直接获取收藏的状态。那时图标就不再是灰色状态，而会直接展示黄色。</p><p>你可以再仔细看看后面的具体代码，结合代码来加深理解。</p><pre><code class=\"language-plain\">&lt;div class=\"handler-wrapper\"&gt;\n  &lt;img\n    src=\"@/assets/image/VideoDetail/star-default.png\"\n    v-show=\"!hasCollect\"\n    @click=\"onCollect(1)\"\n    alt\n  /&gt;\n  &lt;img\n    src=\"@/assets/image/VideoDetail/star-active.png\"\n    v-show=\"hasCollect\"\n    @click=\"onCollect(0)\"\n    alt\n  /&gt;\n  &lt;img\n    src=\"@/assets/image/VideoDetail/like-default.png\"\n    v-show=\"!hasLike\"\n    @click=\"onLike(1)\"\n    alt\n  /&gt;\n  &lt;img\n    src=\"@/assets/image/VideoDetail/like-active.png\"\n    v-show=\"hasLike\"\n    alt\n    @click=\"onLike(0)\"\n  /&gt;\n&lt;/div&gt;\nmethods:{\n onCollect(mode) {\n      //验证是否登陆\n      if (!this.authLogin()) {\n        return false;\n      }\n      //TODO:请求接口，收藏或取消收藏\n      if (mode === 1) {\n        this.$axios\n          .post(\"接口地址\", {\n            userId: this.user.userId,\n            articleId: this.$route.params.id,\n          })\n          .then((data) =&gt; {\n            this.hasCollect = true;\n            console.log(data);\n            this.$message({\n              type: \"success\",\n              message: \"收藏成功\",\n            });\n          });\n      } else {\n        this.$axios\n          .post(\"接口地址\", {\n            userId: this.user.userId,\n            articleId: this.$route.params.id,\n          })\n          .then((data) =&gt; {\n            this.hasCollect = false;\n            this.$message({\n              type: \"success\",\n              message: \"取消收藏成功\",\n            });\n            console.log(data);\n          });\n      }\n    },\n}\n\n&lt;style&gt;\n//css样式\n.video-detail {\n  padding: 40px 0;\n  .handler-wrapper {\n    position: fixed;\n    left: 0;\n    top: 300px;\n    img {\n      width: 50px;\n      background: #fff;\n      padding: 15px;\n      border-radius: 50%;\n      box-shadow: @box-shadow;\n      display: block;\n      margin: 30px;\n    }\n  }\n&lt;/style&gt;\n</code></pre><h4>评论功能的实现</h4><p>接下来我们看看如何实现评论功能。</p><p><strong>发起评论</strong></p><p>首先，我们需要有一个输入框，用来记录用户输入的评论内容。</p><p>用户点击提交就完成了评论的动作，这时评论区就会实时呈现评论内容，并且每条信息都支持评论和回复。</p><p>在这个过程中，重点需要记录某条信息是在哪一条评论下回复的内容。因此，我们需要提前设计好数据格式。这一点我之前讲数据格式案例时已经说过了，如果你记不清了可以回顾一下。</p><p>我把这部分代码实现的核心内容贴在了后面，完整代码你可以查看<a href=\"https://gitee.com/Barry_Python_web/python_web_code\">代码库</a>。</p><pre><code class=\"language-plain\">&lt;div class=\"comment\"&gt;\n    &lt;p class=\"sub-title\"&gt;评论&lt;/p&gt;\n    &lt;div class=\"textarea-wrapper\"&gt;\n    //评论输入框选用Element组件el-input，重点要把type设置成textarea\n    //案例应用，也可参考官网https://element.eleme.cn/#/zh-CN/component/input\n      &lt;el-input\n        type=\"textarea\"\n        :autosize=\"{ minRows: 4 }\"\n        placeholder=\"请输入评论内容\"\n        v-model=\"textarea\" //textarea是输入的评论内容\n        @focus=\"authLogin\" 当点击输入框时验证用户是否登录，这里也可设置在提交方法内\n      &gt;&lt;/el-input&gt;\n      &lt;button class=\"button-default\" @click=\"onReply\"&gt;提交评论&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n    &lt;ul class=\"reply-list\"&gt;\n    //评论内容展示区，详细字段描述看上面数据格式案例\n    //这里遍历commentList的值\n      &lt;li v-for=\"(item, index) in commentList\" :key=\"index\"&gt;\n        &lt;div class=\"user-wrraper\" @click=\"goHome(item.id)\"&gt;\n          &lt;img :src=\"item.userPhoto || $store.state.userAvatar\" alt /&gt;\n          &lt;p&gt;{{ item.nickName }}&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"reply-data\"&gt;\n          &lt;p&gt;{{ item.replyData }}&lt;/p&gt;\n          &lt;p class=\"reply-info\"&gt;\n            &lt;span&gt;{{ item.timestamp | format_timestamp }}&lt;/span&gt;\n            &lt;span\n              class=\"handle-reply\"\n              @click=\"item.showTextarea = !item.showTextarea\"\n              &gt;回复&lt;/span\n            &gt;\n            //评论的支持与不赞成数量\n            &lt;span class=\"rt\"&gt;\n              &lt;i class=\"icon-good\"&gt;&lt;/i&gt;\n              &lt;span&gt;{{ item.good &gt; 0 ? item.good : \"\" }}&lt;/span&gt;\n              &lt;i class=\"icon-bad\"&gt;&lt;/i&gt;\n              &lt;span&gt;{{ item.bad &gt; 0 ? item.bad : \"\" }}&lt;/span&gt;\n            &lt;/span&gt;\n          &lt;/p&gt;\n        &lt;/div&gt;\n        //嵌套用户评论回复\n        //这里遍历replyList的值\n        &lt;div class=\"user-reply\"&gt;\n        &lt;ul class=\"reply-list\" v-show=\"item.replyList.length &gt; 0\"&gt;\n          &lt;li v-for=\"(reply, index) in item.replyList\" :key=\"index\"&gt;\n            &lt;div class=\"user-wrraper\" @click=\"goHome(reply.id)\"&gt;\n              &lt;img\n                :src=\"reply.userPhoto || $store.state.userAvatar\"\n                alt\n              /&gt;\n              &lt;p&gt;{{ reply.nickName }}&lt;/p&gt;\n            &lt;/div&gt;\n            &lt;div class=\"reply-data\"&gt;\n              &lt;p&gt;@{{ reply.toUser }}：{{ reply.replyData }}&lt;/p&gt;\n              &lt;p class=\"reply-info\"&gt;\n                &lt;span&gt;{{ reply.timestamp | format_timestamp }}&lt;/span&gt;\n                &lt;span\n                  class=\"handle-reply\"\n                  @click=\"handleReply(reply)\"\n                  &gt;回复&lt;/span\n                &gt;\n                &lt;span class=\"rt\"&gt;\n                  &lt;i class=\"icon-good\"&gt;&lt;/i&gt;\n                  &lt;span&gt;{{ reply.good &gt; 0 ? reply.good : \"\" }}&lt;/span&gt;\n                  &lt;i class=\"icon-bad\"&gt;&lt;/i&gt;\n                  &lt;span&gt;{{ reply.bad &gt; 0 ? reply.bad : \"\" }}&lt;/span&gt;\n                &lt;/span&gt;\n              &lt;/p&gt;\n            &lt;/div&gt;\n          &lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;/div&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p><strong>对已发表评论进行点评</strong></p><p>为了让视频的互动性更强，我们还可以设计对已发表评论做点评的功能，效果你可以参考后面的截图。</p><p><img src=\"https://static001.geekbang.org/resource/image/86/67/86b42870e16bf46d6fb3e837370ece67.jpg?wh=1986x701\" alt=\"\"></p><p>这部分实现起来也不难，代码是后面这样。</p><pre><code class=\"language-plain\">//在点击评论下的回复按钮，showTextarea的值会变成true，这时候用户可以看到评论内容\n&lt;div class=\"textarea-wrapper\" v-show=\"item.showTextarea\"&gt;\n    &lt;img :src=\"user.photoUrl || $store.state.userAvatar\" alt /&gt;\n    &lt;el-input\n      type=\"textarea\"\n      :autosize=\"{ minRows: 2 }\"\n      placeholder=\"请输入回复内容\"\n      v-model=\"item.textarea\"\n      @focus=\"authLogin\"\n    &gt;&lt;/el-input&gt;\n    &lt;button\n      class=\"button-default\"\n      @click=\"onReplyUser(item, index)\"\n    &gt;\n      提交评论\n    &lt;/button&gt;\n  &lt;/div&gt;\n  \n</code></pre><p>具体methods里面的方法重点就是调用接口时进行传值，我整理了一张表格，帮你把不同方法的值梳理清楚。</p><p>CSS样式内容我放到最后了，你可以参考我的样式实现，也可以通过自己的方式来做，都没问题，重点是对技术的应用。</p><pre><code class=\"language-plain\">&lt;style&gt;\n.reply-list {\n      margin-top: 20px;\n      li {\n        padding: 20px 0;\n        display: block;\n        border-bottom: 1px solid @border-color;\n        img {\n          width: 60px;\n          border-radius: 50%;\n        }\n        .user-wrraper {\n          text-align: center;\n          margin-right: 20px;\n          cursor: pointer;\n        }\n        .user-wrraper,\n        .reply-data {\n          display: inline-block;\n          vertical-align: middle;\n          color: #666666;\n        }\n        .reply-data {\n          font-size: 14px;\n          width: calc(100% - 100px);\n          &gt; p:first-child {\n            height: 60px;\n            padding-top: 10px;\n            box-sizing: border-box;\n          }\n        }\n        .reply-info {\n          font-size: 12px;\n          .handle-reply {\n            margin-left: 10px;\n            cursor: pointer;\n            &amp;:hover {\n              color: #00a1d6;\n            }\n          }\n          &gt; span:last-child {\n            font-size: 14px;\n            line-height: 20px;\n          }\n        }\n        .user-reply {\n          padding-left: 80px;\n          li {\n            padding: 12px 0;\n            img {\n              width: 40px;\n              height: 40px;\n            }\n            border: 0;\n            .reply-data {\n              &gt; p:first-child {\n                height: 40px;\n                padding-top: 10px;\n                box-sizing: border-box;\n              }\n              i {\n                width: 16px;\n                height: 16px;\n              }\n            }\n          }\n        }\n        .textarea-wrapper {\n          width: 640px;\n          margin-top: 20px;\n          box-sizing: border-box;\n          border-radius: 4px;\n          padding: 20px;\n          background: #f2f2f2;\n          img {\n            margin-right: 10px;\n            vertical-align: middle;\n          }\n          .el-textarea {\n            width: 400px;\n            vertical-align: middle;\n          }\n          button {\n            display: inline-block;\n            vertical-align: middle;\n            margin: 0 0 0 10px;\n          }\n        }\n      }\n    }\n&lt;/style&gt;\n</code></pre><p>我们再来看看评论数据格式是什么样子的。后面是具体代码实现，你需要重点关注代码里的注释，还有每条数据间的层级关系。</p><pre><code class=\"language-plain\">commentList: [\n        {\n          id: \"111\", //评论ID\n          nickName: \"chloe\", //作者\n          replyData: \"lallla\",  //评论内容\n          good: 100, //好评数\n          bad: 1, //差评数\n          showTextarea: false, //是否暂时输入框\n          timestamp: 1600670910515, //评论发布时间\n          replyList: [ //这里是层级关系，对上一条评论的评论情况\n            {\n              id: \"111\",\n              nickName: \"tom\",\n              toUser: \"chloe\",\n              replyData: \"大师兄说得对\",\n              good: 2,\n              bad: 0,\n              showTextarea: false,\n              textarea: \"\",\n              timestamp: 1600670910515,\n            }\n          ]\n        },\n        {\n          id: \"222\",\n          nickName: \"jeny\",\n          good: 500,\n          bad: 9,\n          replyData: \"好棒哇哇哇哇哇\",\n          showTextarea: false,\n          replyList: [],\n          timestamp: 1600670910515\n        }\n      ]\n</code></pre><h2>总结</h2><p>今天的内容告一段落，我们回顾总结一下这节课的要点。</p><p>应对不同需求功能，需要前期做好规划，具体要从<strong>页面布局、呈现内容、用户功能、数据格式去考虑</strong>，这四个维度缺一不可。这里我再单独强调一下变量数据格式，它会直接影响我们页面展示的内容，明确变量数据格式不但有助于我们提高开发效率，也会让整体模块的呈现更加平滑。</p><p>另外，除了实现基础功能需求，我们还要重点关注用户的体验，让用户与平台建立粘性，增强用户对平台的喜爱程度，这样也是平台的价值体现。</p><p>页面的实现时候，我们要巧妙应用组件来助阵。这样不仅显示很美观，同时也能让我们的开发效率更高。除了课程中使用的组件，课后你不妨去官方文档上了解更多，最好可以实际操作一下，这样才能让掌握得更加扎实。</p><p>这节课我多次介绍了v-show、v-if此类的指令。用好指令能让我们很好地控制页面内容展示，且无须写出冗杂的代码，通过状态值的判断就能巧妙地呈现展示内容，这也是我们在开发过程中非常重要的思想。</p><p>相信这节课学完，你的业务理解能力和代码实力又会实现一次大的飞跃。希望你可以耐心把每一个知识点吃透。</p><p>今天我们只讲了播放器的展位，那平台中的播放器我们该如何选型，使用过程中又要重点关注哪些核心要素呢？下节课我们一起来探索，敬请期待。</p><h2>思考题</h2><p>我们一起来讨论一下，关于用户个人中心的“我的点赞”和“我的收藏”视频列表，是否有必要做分页？</p><p>欢迎你在留言区和我交流互动，或者记录下自己的学习心得，我们一起学习进步。</p>","comments":[{"had_liked":false,"id":374453,"user_name":"安静点","can_delete":false,"product_type":"c1","uid":1740680,"ip_address":"广东","ucode":"9598650FD71F23","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8f/88/3814fea5.jpg","comment_is_top":false,"comment_ctime":1684128487,"is_pvip":false,"replies":[{"id":136727,"content":"为你点赞，这下大家就都找到了代码了，👍","user_name":"作者回复","user_name_real":"编辑","uid":3050845,"ctime":1684205541,"ip_address":"北京","comment_id":374453,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100546501,"comment_content":"配套代码终于来了，地址在这\nhttps:&#47;&#47;gitee.com&#47;Barry_Python_web&#47;python_web_code","like_count":4,"discussions":[{"author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":618357,"discussion_content":"为你点赞，这下大家就都找到了代码了，👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684205541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}