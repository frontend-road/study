{"id":76183,"title":"10 | 动态规划（下）：如何求得状态转移方程并进行编程实现？","content":"<p>你好，我是黄申。</p><p>上一节，我从查询推荐的业务需求出发，介绍了编辑距离的概念，今天我们要基于此，来获得状态转移方程，然后才能进行实际的编码实现。</p><h2>状态转移方程和编程实现</h2><p>上一节我讲到了使用状态转移表来展示各个子串之间的关系，以及编辑距离的推导。不过，我没有完成那张表格。现在我把它补全，你可以和我的结果对照一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/26/8c/265fb5d134bfebb2fd2cf712f759468c.png?wh=1280*536\" alt=\"\"></p><p>这里面求最小值的min函数里有三个参数，分别对应我们上节讲的三种情况的编辑距离，分别是：A串插入、B串插入（A串删除）和替换字符。在表格的右下角我标出了两个字符串的编辑距离1。</p><p>概念和分析过程你都理解了，作为程序员，最终还是要落脚在编码上，我这里带你做些编码前的准备工作。</p><p>我们假设字符数组A[]和B[]分别表示字符串A和B，A[i]表示字符串A中第i个位置的字符，B[i]表示字符串B中第i个位置的字符。二维数组d[,]表示刚刚用于推导的二维表格，而d[i,j]表示这张表格中第i行、第j列求得的最终编辑距离。函数r(i, j)表示替换时产生的编辑距离。如果A[i]和B[j]相同，函数的返回值为0，否则返回值为1。</p><p>有了这些定义，下面我们用迭代来表达上述的推导过程。</p><ul>\n<li>\n<p>如果i为0，且j也为0，那么d[i, j]为0。</p>\n</li>\n<li>\n<p>如果i为0，且j大于0，那么d[i, j]为j。</p>\n</li>\n<li>\n<p>如果i大于0，且j为0，那么d[i, j]为i。</p>\n</li>\n<li>\n<p>如果i大于0，且 j大于0，那么d[i, j]=min(d[i-1, j] + 1, d[i, j-1] + 1, d[i-1, j-1] + r(i, j))。</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>这里面最关键的一步是d[i, j]=min(d[i-1, j] + 1, d[i, j-1] + 1, d[i-1, j-1] + r(i, j))。这个表达式表示的是动态规划中从上一个状态到下一个状态之间可能存在的一些变化，以及基于这些变化的最终决策结果。我们把这样的表达式称为<strong>状态转移方程</strong>。我上节最开始就说过，在所有动态规划的解法中，状态转移方程是关键，所以你一定要掌握它。</p><p>有了状态转移方程，我们就可以很清晰地用数学的方式，来描述状态转移及其对应的决策过程，而且，有了状态转移方程，具体的编码其实就很容易了。基于编辑距离的状态转移方程，我在这里列出了一种编码的实现，你可以看看。</p><p>我们首先要定义函数的参数和返回值，你需要注意判断一下a和b为null的情况。</p><pre><code> public class Lesson10_1 {\n\t\n\t/**\n    * @Description:\t使用状态转移方程，计算两个字符串之间的编辑距离\n    * @param a-第一个字符串，b-第二个字符串\n    * @return int-两者之间的编辑距离\n    */\n\t\n\tpublic static int getStrDistance(String a, String b) {\n\t\t\n\t\tif (a == null || b == null) return -1;\n</code></pre><p>然后，初始化状态转移表。我用int型的二维数组来表示这个状态转移表，并对i为0且j大于0的元素，以及i大于0且j为0的元素，赋予相应的初始值。</p><pre><code>  // 初始用于记录化状态转移的二维表\n\t\tint[][] d = new int[a.length() + 1][b.length() + 1];\n\t\t\n\t\t// 如果i为0，且j大于等于0，那么d[i, j]为j\n\t\tfor (int j = 0; j &lt;= b.length(); j++) {\n\t\t\td[0][j] = j;\n\t\t}\n\t\t\n\t\t// 如果i大于等于0，且j为0，那么d[i, j]为i\n\t\tfor (int i = 0; i &lt;= a.length(); i++) {\n\t\t\td[i][0] = i;\n\t\t}\n</code></pre><p>我这里实现的时候，i和j都是从0开始，所以我计算的d[i+1, j+1]，而不是d[i, j]。而d[i+1, j+1] = min(d[i, j+1] + 1, d[i+1, j] + 1, d[i, j] + r(i, j)。</p><pre><code>  // 实现状态转移方程\n\t\t// 请注意由于Java语言实现的关系，代码里的状态转移是从d[i, j]到d[i+1, j+1]，而不是从d[i-1, j-1]到d[i, j]。本质上是一样的。\n\t\tfor (int i = 0; i &lt; a.length(); i++) {\n\t\t\tfor (int j = 0; j &lt; b.length(); j++) {\n\t\t\t\t\n\t\t\t\tint r = 0;\n\t\t\t\tif (a.charAt(i) != b.charAt(j)) {\n\t\t\t\t\tr = 1;\n\t\t\t\t} \n\t\t\t\t\n\t\t\t\tint first_append = d[i][j + 1] + 1;\n\t\t\t\tint second_append = d[i + 1][j] + 1;\n\t\t\t\tint replace = d[i][j] + r;\n\t\t\t\t\n\t\t\t\tint min = Math.min(first_append, second_append);\n\t\t\t\tmin = Math.min(min, replace);\n\t\t\t\td[i + 1][j + 1] = min;\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn d[a.length()][b.length()];\n\t\t\t\t\n\t}\n\n}\n</code></pre><p>最后，我们用测试代码测试不同字符串之间的编辑距离。</p><pre><code>public static void main(String[] args) {\n  // TODO Auto-generated method stub\n  System.out.println(Lesson10_1.getStrDistance(&quot;mouse&quot;, &quot;mouuse&quot;));\n\n }\n</code></pre><p>从推导的表格和最终的代码可以看出，我们相互比较长度为m和n的两个字符串，一共需要求mxn个子问题，因此计算量是mxn这个数量级。和排列法的m^n相比，这已经降低太多太多了。</p><p>我们现在可以快速计算出编辑距离，所以就能使用这个距离作为衡量字符串之间相似度的一个标准，然后就可以进行查询推荐了。</p><p>到这里，使用动态规划来实现的编辑距离其实就讲完了。我把两个字符串比较的问题，分解成很多子串进行比较的子问题，然后使用状态转移方程来描述状态（也就是子问题）之间的关系，并根据问题的定义，保留最小的值作为当前的编辑距离，直到过程结束。</p><p>如果我们使用动态规划法来实现编辑距离的测算，那就能确保查询推荐的效率和效果。不过，基于编辑距离的算法也有局限性，它只适用于拉丁语系的相似度衡量，所以通常只用于英文或者拼音相关的查询。如果是在中文这种亚洲语系中，差一个汉字（或字符）语义就会差很远，所以并不适合使用基于编辑距离的算法。</p><h2>实战演练：钱币组合的新问题</h2><p>和排列组合等穷举的方法相比，动态规划法关注发现某种最优解。如果一个问题无需求出所有可能的解，而是要找到满足一定条件的最优解，那么你就可以思考一下，是否能使用动态规划来降低求解的工作量。</p><p>还记得之前我们提到的新版舍罕王奖赏的故事吗？国王需要支付一定数量的赏金，而宰相要列出所有可能的钱币组合，这使用了排列组合的思想。如果这个问题再变化为“给定总金额和可能的钱币面额，能否找出钱币数量最少的奖赏方式？”，那么我们是否就可以使用动态规划呢？</p><p>思路和之前是类似的。我们先把这个问题分解成很多更小金额的子问题，然后试图找出状态转移方程。如果增加一枚钱币c，那么当前钱币的总数量就是增加c之前的钱币总数再加上当前这枚。举个例子，假设这里我们有三种面额的钱币，2元、3元和7元。为了凑满100元的总金额，我们有三种选择。</p><p>第一种，总和98元的钱币，加上1枚2元的钱币。如果凑到98元的最少币数是$x_{1}$，那么增加一枚2元后就是($x_{1}$ + 1)枚。</p><p>第二种，总和97元的钱币，加上1枚3元的钱币。如果凑到97元的最少币数是$x_{2}$，那么增加一枚3元后就是($x_{2}$ + 1)枚。</p><p>第三种，总和93元的钱币，加上1枚7元的钱币。如果凑到93元的最少币数是$x_{3}$，那么增加一枚7元后就是($x_{3}$ + 1)枚。</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/d9/e5a9b9e6d931049bfae92ead29e37cd9.jpg?wh=1142*627\" alt=\"\"></p><p>比较一下以上三种情况的钱币总数，取最小的那个就是总额为100元时，最小的钱币数。换句话说，由于奖赏的总金额是固定的，所以最后选择的那枚钱币的面额，将决定到上一步为止的金额，同时也决定了上一步为止钱币的最少数量。根据这个，我们可以得出如下状态转移方程：</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/27/d81e704031156e605b61610ef681c427.jpg?wh=1142*301\" alt=\"\"></p><p>其中，c[i]表示总额为i的时候，所需要的最少钱币数，其中j=1,2,3,…,n，表示n种面额的钱币，value[j]表示第j种钱币的面额。c[i - values(j)]表示选择第j种钱币的时候，上一步为止最少的钱币数。需要注意的是，i - value(j)需要大于等于0，而且c[0] = 0。</p><p>我这里使用这个状态转移方程，做些推导，具体的数据你可以看下面这个表格。表格每一行表示奖赏的总额，前3列表示3种钱币的面额，最后一列记录最少的钱币数量。表中的“/”表示不可能，或者说无解。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/58/e78354fe2f577d07649882fed69bd358.png?wh=1282*794\" alt=\"\"></p><p>这张状态转移表同样可以帮助你来理解状态转移方程的正确性。一旦状态转移方程确定了，要编写代码来实现就不难了。</p><h2>小结</h2><p>通过这两节的内容，我讲述了动态规划主要的思想和应用。如果仅仅看这两个案例，也许你觉得动态规划不难理解。不过，在实际应用中，你可能会产生这些疑问：什么时候该用动态规划？这个问题可以用动态规划解决啊，为什么我没想到？我这里就讲一些我个人的经验。</p><p>首先，如果一个问题有很多种可能，看上去需要使用排列或组合的思想，但是最终求的只是某种最优解（例如最小值、最大值、最短子串、最长子串等等），那么你不妨试试是否可以使用动态规划。</p><p>其次，状态转移方程是个关键。你可以用状态转移表来帮助自己理解整个过程。如果能找到准确的转移方程，那么离最终的代码实现就不远了。当然，最好的方式，还是结合工作中的项目，不断地实践，尝试，然后总结。</p><p><img src=\"https://static001.geekbang.org/resource/image/7e/5b/7e084bc699b4939b78226718756fd65b.jpg?wh=1242*1521\" alt=\"\"></p><h2>思考题</h2><p>对于总金额固定、找出最少钱币数的题目，用循环或者递归的方式该如何进行编码呢？</p><p><span class=\"orange\">欢迎在留言区交作业，并写下你今天的学习笔记。你可以点击“请朋友读”，把今天的内容分享给你的好友，和他一起精进。</span></p>","neighbors":{"left":{"article_title":"09 | 动态规划（上）：如何实现基于编辑距离的查询推荐？","id":75807},"right":{"article_title":"11 | 树的深度优先搜索（上）：如何才能高效率地查字典？","id":76481}},"comments":[{"had_liked":false,"id":102357,"user_name":"阿信","can_delete":false,"product_type":"c1","uid":1399663,"ip_address":"","ucode":"CC7B15CE63264B","user_header":"https://static001.geekbang.org/account/avatar/00/15/5b/6f/113e24e6.jpg","comment_is_top":false,"comment_ctime":1560212744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78869624072","product_id":100021201,"comment_content":"编辑距离，刚开始没看太明白。后台看了下其他的博客，结合一起进行理解。表格里面min三个数值为：<br>d[i, j]=min(d[i-1, j] + 1, d[i,j-1]+1, d[i-1,j-1]+r(i,j))<br>涉及两个数组，是二维的。描述了从垂直、水平、斜对角 三个方向分别到达(i, j)这个位置时的距离。<br><br>我是先看懂了后面的推导公式，再看明白编辑推导表格。","like_count":19},{"had_liked":false,"id":166678,"user_name":"cwtxz","can_delete":false,"product_type":"c1","uid":1778151,"ip_address":"","ucode":"4F35AEDB8F5D5D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BAuQlia9Dc07m3icOkibIqu2lhbnLD6cjgCNE8FSzG5Aj4cd26eRgspicTsWvA7WK1ftlQBD34PYRucZRXML5FA27A/132","comment_is_top":false,"comment_ctime":1577542476,"is_pvip":false,"replies":[{"id":"65009","content":"我很佩服你有如此的思考，坚信自己选择的方向，从脚下的路开始，你一定会得到属于自己的成功","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1577839808,"ip_address":"","comment_id":166678,"utype":1}],"discussion_count":3,"race_medal":0,"score":"57412117324","product_id":100021201,"comment_content":"中国程序员的最大阻碍是语言障碍，英语不好，无法和世界各地的人交流技术，坐井观天的人很多。第二个严重的问题就是学习能力不强而且没有毅力，很容易放弃，不肯花时间深入思考问题和钻研，大多思考如何能少加班，如何能赚更多，如何在工作中偷懒等等。第三个问题就是好高骛远不能脚踏实地，很多人刚毕业就想要很多钱，换一份工作就想涨很多钱，但是能力不够，基础不扎实，有些连在简历中写的技术都说不清楚。曾经我是他们中的一员，但是我想改变去，不想继续平庸下去，所以，我来了，加油，坚持坚持再坚持!!!","like_count":13,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479585,"discussion_content":"我很佩服你有如此的思考，坚信自己选择的方向，从脚下的路开始，你一定会得到属于自己的成功","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577839808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1320487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","nickname":"罗杰","note":"","ucode":"96BAFAA147341F","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585431,"discussion_content":"现在太多的程序员就等人往嘴里喂了。不学新技术，面向百度，CSDN 编程，这些人不到 30 就应该被淘汰，不淘汰这些人，公司容易被淘汰。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661558577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338106,"discussion_content":"总结得太好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609172360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64870,"user_name":"云开","can_delete":false,"product_type":"c1","uid":1297758,"ip_address":"","ucode":"74541653336DDA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/nSvVtStiaQzslFM7YRnlhP7FxdVsz8abjlwY6XZ4guKtkXNUgG8EibxztoeosKL2YuxDsb159NTQhVXFBkj31kBw/132","comment_is_top":false,"comment_ctime":1548933565,"is_pvip":false,"replies":[{"id":"22994","content":"你可以参考那张状态转移表，看看是从哪一格到哪一格，字符串是如何变换的，相邻格子的变换就三种方式，插入、删除和替换。替换可以将字符串中的某个字符替换成另一个字符","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1548948324,"ip_address":"","comment_id":64870,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53088541117","product_id":100021201,"comment_content":"还是弄不明白编辑距离 为什么插入时是从空串开始 替换确并不计算从空串到有字符的过程","like_count":12,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438213,"discussion_content":"你可以参考那张状态转移表，看看是从哪一格到哪一格，字符串是如何变换的，相邻格子的变换就三种方式，插入、删除和替换。替换可以将字符串中的某个字符替换成另一个字符","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548948324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":59841,"user_name":"Joe","can_delete":false,"product_type":"c1","uid":1337998,"ip_address":"","ucode":"EC76699640B7BF","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/8e/7b6ea886.jpg","comment_is_top":false,"comment_ctime":1547427959,"is_pvip":false,"replies":[{"id":"21691","content":"答案正确 👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547574090,"ip_address":"","comment_id":59841,"utype":1}],"discussion_count":4,"race_medal":0,"score":"53087035511","product_id":100021201,"comment_content":"1.C++实现，对总金额100的最小纸币是15.<br>2.用递归法总金额为30就要算很久。<br>3.另外的数学办法可以用总金额依次对最大金额纸币求余数，直到为0.商相加为答案。如：若 {1, 2, 3, 7}为纸币金额，对于100，所需最小纸币数：100&#47;7=14余2; 2&#47;2 = 1余0;则纸币数为14+1=15.<br><br>&#47;&#47; 动态规划问题<br>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>class DynamicProgramming {<br> private:<br>  vector&lt;int&gt; money = {1, 2, 3, 7};  &#47;&#47; 纸币种类<br><br> public:<br>  &#47;**<br>   * Description: 对于金额固定，找出最少钱币数及方式。<br>   * prams: amountMoney- 输入总金额<br>   * return: 所需最小纸币数<br>   *&#47;<br>  int findFewerstMethod(int amountMoney) {<br>    int c[amountMoney];<br>    c[0] = 0;<br><br>    int temp;<br>    for (unsigned int i = 1; i &lt; amountMoney; i++) {<br>      &#47;&#47; 用最大值初始化<br>      int tempMin = amountMoney;<br>      for (unsigned int j = 0; j &lt; money.size(); j++) {<br>        int diff = i - money[j];<br>        if (0 &lt;= diff) {<br>          temp = c[diff] + 1;<br>        } else {<br>          &#47;&#47; 此情况表示该纸币无效，选择最大值。<br>          temp = amountMoney;<br>        }<br>        &#47;&#47; 求出最小值<br>        if (temp &lt; tempMin) {<br>          tempMin = temp;<br>        }<br>      }<br>      c[i] = tempMin;<br>    }<br><br>    return c[amountMoney - 1];<br>  }<br>};<br><br>&#47;&#47; test<br>int main(void) {<br>  DynamicProgramming test;<br>  int res = test.findFewerstMethod(100);<br>  cout &lt;&lt; res &lt;&lt; endl;<br>  return 0;<br>}","like_count":13,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436403,"discussion_content":"答案正确 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547574090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1813640,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/ac/88/8320f25d.jpg","nickname":"cinderella","note":"","ucode":"6EE7FA081E773F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189535,"discussion_content":"这个可选纸币如果不是[2,3,7]，如果是[3,7]就不对了啊。要普适所有情况还是得递归倒推才行。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582890883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2691683,"avatar":"https://static001.geekbang.org/account/avatar/00/29/12/63/c1ec9a8d.jpg","nickname":"落木随风","note":"","ucode":"77AB65D0057624","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383418,"discussion_content":"找零63块，面值为[1，5，10，21，25]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626088793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2027228,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2ibcQVCzwThf79tLAK9Fickoe75YVBK8X6tYggichZlgv07XtdpJcFYIRPBicbwdibzzicghyFpt3EfXg/132","nickname":"Geek_1bca3e","note":"","ucode":"B801B5B2416B4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284169,"discussion_content":"这节课动态规划 的算法没看懂\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592462112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63682,"user_name":"冰木","can_delete":false,"product_type":"c1","uid":1052644,"ip_address":"","ucode":"31EE0732AEAB05","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/e4/b44d863f.jpg","comment_is_top":false,"comment_ctime":1548463855,"is_pvip":false,"replies":[{"id":"22569","content":"是min(3, 1, 2)对吧，这个是mo和m的比较，3表示增加一个m再增加一个o，再删掉一个o，编辑距离是2+1=3。1表示两个字符串都是m，其中一个再增加一个o，编辑距离是1。2表示一个m增加o，一个从空集到m，编辑距离是2。你可以顺着第9讲最后的表格来推导。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1548560744,"ip_address":"","comment_id":63682,"utype":1}],"discussion_count":2,"race_medal":0,"score":"40203169519","product_id":100021201,"comment_content":"老大，我可能没有得到要领，可以推到下，表格中，第一行，第二列吗？","like_count":9,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437682,"discussion_content":"是min(3, 1, 2)对吧，这个是mo和m的比较，3表示增加一个m再增加一个o，再删掉一个o，编辑距离是2+1=3。1表示两个字符串都是m，其中一个再增加一个o，编辑距离是1。2表示一个m增加o，一个从空集到m，编辑距离是2。你可以顺着第9讲最后的表格来推导。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548560744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264720,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjUDIRQ0gRicvicty8DRWAwMGcicdUdKJjjo7f1V63WUbHuJu6YX44ojlXVLE4Bf3l6qXxOvkBaJNyA/132","nickname":"Geek_4472ab","note":"","ucode":"63DB215130ADF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343560,"discussion_content":"&#34;3表示增加一个m再增加一个o，再删掉一个o&#34;为什么又是增加又是删除的？能说详细一点吗？能详细地解释两个推到过程吗?一头雾水啊，。。。\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1611073932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56979,"user_name":"梅坊帝卿","can_delete":false,"product_type":"c1","uid":1240270,"ip_address":"","ucode":"702F019BA3356C","user_header":"","comment_is_top":false,"comment_ctime":1546591717,"is_pvip":false,"replies":[{"id":"20583","content":"是的 可能无解👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546648738,"ip_address":"","comment_id":56979,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27316395493","product_id":100021201,"comment_content":"按照面值排序优先取最大的方法 不一定能取到解 除非有万能的面额1 比如 2 5 7 总数15 ","like_count":6,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435345,"discussion_content":"是的 可能无解👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546648738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62472,"user_name":"caohuan","can_delete":false,"product_type":"c1","uid":1256428,"ip_address":"","ucode":"4B092E33F3DF1E","user_header":"https://static001.geekbang.org/account/avatar/00/13/2b/ec/af6d0b10.jpg","comment_is_top":false,"comment_ctime":1548065358,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23022901838","product_id":100021201,"comment_content":"本篇所得： 1.求解 最值可用动态规划 方法;<br>2.状态转移 可以把 大问题 分解为 小问题，再分解为 可以处理的问题，即 把 不可以处理的问题 分解为可以 处理的小问题（ 也为子问题）;<br>3.动态规划 适用于 下一个 状态与上一个状态有固定关系;<br>4.搜索引擎的 搜索词的查询推荐， 英文可用 编辑距离，中文 需要 转化 比 如转为英文 再使用 编辑距离;<br>5.从问题开始 ，初步分解 大问题为可解的子问题 为动态规划的方法，由问题 推到答案，也为反向思维法。<br><br>回答老师的问题：固定金额，找最小钱币数量，可用倒推法，总金额 减去 最大的 钱币数额 ，然后从钱币中寻找该数额，没有 再把该数额逐渐减去 大的数额，一步步分解，可得 钱币的数量，该方法是 动态规划，但不能保证寻找的是最小的数量，局部最优 不一定全局最优，如果 需要寻找全部最优 需要运用 排列和组合。","like_count":5,"discussions":[{"author":{"id":1926508,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","nickname":"Geek_bb2310","note":"","ucode":"022885B257DEB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213539,"discussion_content":"你说反了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585103303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62542,"user_name":"予悠悠","can_delete":false,"product_type":"c1","uid":1211755,"ip_address":"","ucode":"93D785F354E225","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/6b/648c30bc.jpg","comment_is_top":false,"comment_ctime":1548086443,"is_pvip":false,"replies":[{"id":"22156","content":"实现了两种方法，并进行了对比，赞👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1548122236,"ip_address":"","comment_id":62542,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18727955627","product_id":100021201,"comment_content":"用python交作业<br>用递归来实现时，运行非常慢。用循环实现时，由于记录了每一步的计算结果，不需要重复计算，速度快很多。<br><br>递归：<br>import sys<br>def least_bills_recursion(total):<br>\tif total == 0:<br>\t\treturn 0<br>\tif total &lt; 0:<br>\t\treturn sys.maxint<br>\tmin_bills = min(1 + least_bills_recursion(total-2), 1 + least_bills_recursion(total - 3),<br>\t\t1 + least_bills_recursion(total-7))<br>\treturn min_bills<br><br>循环：<br>def least_bills_iteration(total):<br>\tcurrent = 0<br>\tdp = [0] * (total + 1)<br>\tdp[2] = 1<br>\tdp[3] = 1<br>\tdp[7] = 1<br>\tfor i in xrange(3, total+1, 1):<br>\t\tif i &gt;= 7:<br>\t\t\tdp[i] = min(dp[i-2], dp[i-3], dp[i-7]) + 1<br>\t\telif i &gt;= 3 and i &lt; 7:<br>\t\t\tdp[i] = min(dp[i-2], dp[i-3]) + 1<br>\t\telse:<br>\t\t\tdp[i] = dp[i-2] + 1<br>\treturn dp[total]<br><br>当总金额为100时，答案为15.","like_count":5,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437255,"discussion_content":"实现了两种方法，并进行了对比，赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548122236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1544345,"avatar":"https://static001.geekbang.org/account/avatar/00/17/90/99/d03ef0d4.jpg","nickname":"newbmiao","note":"","ucode":"1BDD0341C490FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591297,"discussion_content":"least_bills_iteration方法有个问题\n总金额102时会计算错误为15（应该16）\n原因是错误用0初始化无法形成组合的值（如dp[1]=0）\n改成： dp = [0x3f3f3f] * (total + 1) 可以避免这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666447959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57111,"user_name":"我心留","can_delete":false,"product_type":"c1","uid":1338206,"ip_address":"","ucode":"09901B29C5613F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/5e/b76e7a79.jpg","comment_is_top":false,"comment_ctime":1546651325,"is_pvip":false,"replies":[{"id":"21426","content":"代码的逻辑是对的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547401914,"ip_address":"","comment_id":57111,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18726520509","product_id":100021201,"comment_content":"public class Lesson10_2 {<br>&#47;**\t<br> * 动态规划求最小钱币数\t<br> * @param c 用一维数组记录每一步的总金额\t * @param value 用一维数组记录三种面额的纸币\t<br> * @return \t<br> *&#47;\t<br>public static int getMinMoney(int[] c, int[] value) {<br>\t\tint[] t = new int[3];\t\t<br>                for (int i = 0; i &lt; c.length; i++) {\t\t<br>                       for (int j = 0; j &lt; value.length; j++) {\t\t\t\t<br>                              if (i - value[j] &gt;= 0) {\t\t\t\t\t<br>                                    t[j] = c[i - value[j]] + 1;\t\t\t\t<br>                               }\t\t\t<br>                        }\t\t\t<br>                  int min = Math.min(t[0], t[1]);\t\t\t<br>                  min = Math.min(min, t[2]);\t\t\t<br>                  c[i] = min;\t\t<br>                }\t\t<br>                return c[c.length - 1];<br>}\t<br>public static void main(String[] args) {\t\t<br>        int[] c = new int[100];\t\t<br>        int[] value = new int[] { 2, 3, 7 };\t\t<br>        System.out.println(getMinMoney(c, value)+1);\t<br> }<br>}<br>老师看一下代码对吗，运行结果是15","like_count":4,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435410,"discussion_content":"代码的逻辑是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547401914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2110804,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/vFhAmp9beuRuZZL0GQibJqsUmXNz2LPTOU95fGJlG0TDmZOvVcmatV0wHltu3YpQ9PQCDFoeJibvFBl8zvmUDvtQ/132","nickname":"Geek_27ca2b","note":"","ucode":"E2D9EA5EF1E113","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341189,"discussion_content":"这一种我也试了，你的算法复杂度肯定不是 3n，如果试试1000，就要递归1366813668次。         我写了一个算法复杂度是 3n 的，https://github.com/wss2020/Frontend-04-Template/blob/master/z.js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/2%20%E9%92%B1%E5%B8%81%E7%BB%84%E5%90%88%E7%9A%84%E6%96%B0%E9%97%AE%E9%A2%98/%E4%BB%A3%E7%A0%812.js","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610347877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56941,"user_name":"lianlian","can_delete":false,"product_type":"c1","uid":1298468,"ip_address":"","ucode":"79B48B38259097","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOc0n02eNKflX5ey4TYl1NBfb0kicc20AgayEAGDYylalqHnLTeqMnaJ2iaZsLVmqEo0T0YViadU9Ig/132","comment_is_top":false,"comment_ctime":1546584032,"is_pvip":false,"replies":[{"id":"21423","content":"动手实验，比较不同的实现，👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547401458,"ip_address":"","comment_id":56941,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18726453216","product_id":100021201,"comment_content":"方法1，动态规划，最快。方法2递归有点慢，方法三递归，超级慢。在aim数值大于30的时候，三种写法，在我电脑速度快慢特别明显。用2元,3元,5元去找开100块，用递归方法，我的电脑要等到地老天荒O(∩_∩)O哈哈~<br>#include&lt;iostream&gt;<br>#include&lt;vector&gt;<br><br>using namespace std;<br><br>int dp_solve(int *a, int n, int aim){<br>\tvector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(aim+1, 0));<br><br>\tfor(int j = 1; j &lt;= aim; j++){<br>\t\tdp[0][j] = INT_MAX;<br>\t\tif(j &gt;= a[0] &amp;&amp; dp[0][j - a[0]] != INT_MAX)<br>\t\t\tdp[0][j] = dp[0][j - a[0]] + 1;<br>\t}<br><br>\tfor(int i = 1; i &lt; n; i++){<br>\t\tfor(int j = 1; j &lt;= aim; j++)<br>\t\t{<br>\t\t\tint tmp = INT_MAX;<br>\t\t\tif(j - a[i] &gt;= 0 &amp;&amp; dp[i][j - a[i]] != INT_MAX)<br>\t\t\t\ttmp = dp[i][j - a[i]] + 1;<br><br>\t\t\tdp[i][j] = min(dp[i-1][j], tmp);<br>\t\t}<br>\t}<br><br>\treturn dp[n-1][aim] == INT_MAX ? -1 : dp[n-1][aim];<br>}<br><br>int min_res = INT_MAX;<br>void recur_solve(int *a, int n, int aim, int k){<br>\tif(aim == 0){<br>\t\tmin_res = min(min_res, k);<br>\t\treturn;<br>\t}<br>\tif(aim &lt; 0)<br>\t\treturn;<br>\tfor(int i = 0; i &lt; n; i++){<br>\t\taim -= a[i];<br>\t\tk++;<br>\t\trecur_solve(a, n, aim, k);<br>\t\taim += a[i];<br>\t\tk--;<br>\t}<br>}<br><br>int min_res2 = INT_MAX;<br>void recur_solve2(int *a, int n, int aim, vector&lt;int&gt; res){<br>\tif(aim == 0){<br>\t\tint size = res.size();<br>\t\tmin_res2 = min(min_res2, size);<br>\t\treturn;<br>\t}<br>\tif(aim &lt; 0)<br>\t\treturn;<br>\tfor(int i = 0; i &lt; n; i++){<br>\t\tres.push_back(a[i]);<br>\t\trecur_solve2(a, n, aim - a[i], res);<br>\t\tres.pop_back();<br>\t}<br>}<br><br>int main(){<br>\tint a[] = {2,3,7};<br>\tint sum = 25;<br>\t&#47;***dp最快**&#47;<br>\tcout &lt;&lt; dp_solve(a, 3, sum) &lt;&lt; endl;<br><br>\t&#47;***这种递归有点久**&#47;<br>\trecur_solve(a, 3, sum, 0);<br>\tcout &lt;&lt; min_res &lt;&lt; endl;<br><br>\t&#47;**这个太久了**&#47;<br>\tvector&lt;int&gt; result;<br>\trecur_solve2(a, 3, sum, result);<br>\tcout &lt;&lt; min_res2 &lt;&lt; endl;<br>\treturn 0;<br>}","like_count":4,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435322,"discussion_content":"动手实验，比较不同的实现，👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547401458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201704,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1585821476,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"10175756068","product_id":100021201,"comment_content":"茶艺师学编程<br><br>昨天讲编辑距离，今天讲状态转移方程。<br><br>我试着这样理解，状态转移方程，就是要看到这一堆数字的“每一份”变化会给整体带来什么影响。这就好像，在自己的脑海中，模拟一遍“小树是怎么长成大树”，找到其中的“规律”。<br><br>摸到了规律，再结合给定的条件，即可寻找“最优解”。<br><br>在现实中，当一个人跟你说“我要最好的”，你可以反问TA两句，“你了解其中的规律（状态转换方程）吗？你的约束条件是什么?”","like_count":2},{"had_liked":false,"id":142697,"user_name":"木子皿","can_delete":false,"product_type":"c1","uid":1242778,"ip_address":"","ucode":"3FDEAFABB4C427","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUzv6S9wroyXaoFIwvC1mdDiav4BVS4BbPTuwtvWibthL5PyMuxFNicY06QJMZicVpib7E88S19nH4I9Q/132","comment_is_top":false,"comment_ctime":1571463585,"is_pvip":false,"replies":[{"id":"55351","content":"确实不太好理解，不过一旦理解了对解题很有帮助","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1571678583,"ip_address":"","comment_id":142697,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10161398177","product_id":100021201,"comment_content":"动态规划的这两篇文章看了一个星期，总算是看懂了！","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471232,"discussion_content":"确实不太好理解，不过一旦理解了对解题很有帮助","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571678583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2970013,"avatar":"","nickname":"woJA1wCgAAGa0rnfVuCMtChUY-v1krsg","note":"","ucode":"B901C590C5F140","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564671,"discussion_content":"加油，我也是有点理解不上去，想多看几遍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650294880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142150,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1571300637,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10161235229","product_id":100021201,"comment_content":"答案是15 种 <br>private static int totalNumberForMoney(int[] moneyKind,int total){<br>        &#47;&#47;初始化 c数组<br>        int[] c = new int[total+1];<br>        for(int i=1;i&lt;c.length;i++){<br>            c[i] = -1;<br>        }<br>        c[0] = 0;<br>        for(int i=1;i&lt;=total;i++){<br>             int[] data = new int[moneyKind.length];<br>              for(int j = 0;j&lt;moneyKind.length;j++){<br>                  if((i - moneyKind[j])&lt;0){<br>                      data[j]= -1;<br>                      continue;<br>                  }<br>                  data[j] =  c[i - moneyKind[j]];<br>              }<br>              int min =  min(data);<br>              if(min == -1){<br>                  continue;<br>              }<br>              c[i] = min + 1;<br>            System.out.println(i + &quot;min&quot; + c[i]);<br>        }<br>        return c[total];<br>    }<br><br>    private static int min(int[] data) {<br>        boolean flag = true;<br>        int min = -1;<br>        for(int i=0;i&lt;data.length;i++){<br>            if(data[i]==-1){<br>                continue;<br>            }<br>            if(flag){<br>                min = data[i];<br>                flag = false;<br>                continue;<br>            }<br>            if(data[i]&lt;min){<br>                min = data[i];<br>            }<br>        }<br>        return min;<br>    }","like_count":2},{"had_liked":false,"id":56981,"user_name":"mickey","can_delete":false,"product_type":"c1","uid":1051663,"ip_address":"","ucode":"8B490C2DDE4010","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/0f/93d1c8eb.jpg","comment_is_top":false,"comment_ctime":1546591986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10136526578","product_id":100021201,"comment_content":"package Part01;<br><br>import java.util.ArrayList;<br>import java.util.Arrays;<br>import java.util.List;<br><br>public class Lesson10_ex {<br>\tpublic static void main(String[] args) {<br>\t\tswitchMoney(2, 3, 7, 100);<br>\t}<br><br>\tprivate static void switchMoney(int mz1, int mz2, int mz3, int total) {<br>\t\tList&lt;Integer[]&gt; list = new ArrayList&lt;Integer[]&gt;();<br>\t\tint s1 = total &#47; mz1;<br>\t\tint s2 = total &#47; mz2 + 1;<br>\t\tint s3 = total &#47; mz3 + 1;<br>\t\tfor (int i = 0; i &lt;= s1; i++) {<br>\t\t\tfor (int j = 0; j &lt;= s2; j++) {<br>\t\t\t\tfor (int k = 0; k &lt;= s3; k++) {<br>\t\t\t\t\tif (mz1 * i + mz2 * j + mz3 * k == 100) {<br>\t\t\t\t\t\tlist.add(new Integer[] { i, j, k });<br>\t\t\t\t\t}<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t\tInteger[] result = new Integer[3];<br>\t\tint min = total;<br>\t\tfor (Integer[] integers : list) {<br>\t\t\tint sum = 0;<br>\t\t\tfor (Integer num : integers) {<br>\t\t\t\tsum += num;<br>\t\t\t}<br>\t\t\tif (min &gt; sum) {<br>\t\t\t\tmin = sum;<br>\t\t\t\tresult = integers;<br>\t\t\t}<br>\t\t}<br>\t\tSystem.out.println(&quot;最小数：&quot; + min);<br>\t\tSystem.out.println(Arrays.toString(result));<br>\t}<br>}<br>","like_count":3},{"had_liked":false,"id":311996,"user_name":"Duke","can_delete":false,"product_type":"c1","uid":2131512,"ip_address":"","ucode":"77BB22ADCC2AB9","user_header":"https://static001.geekbang.org/account/avatar/00/20/86/38/379a9da5.jpg","comment_is_top":false,"comment_ctime":1631587033,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5926554329","product_id":100021201,"comment_content":"&#47;&#47; 作业<br>void Main()<br>{<br>\t&#47;&#47; 面额已经按照大到小排序<br>\t&#47;&#47;Console.WriteLine(Get(100, new int[] { 2, 3, 7 }));<br><br>\tGet2(10, null); &#47;&#47; 100 算太慢了。这种太耗资源了<br>\tConsole.WriteLine($&quot;共有【{count}】个解。&quot;);<br>\tConsole.WriteLine($&quot;最优解：{string.Join(&quot;,&quot;,result)}&quot;);<br>}<br><br>#region 动态规划解法，也就是循环<br>static int Get(int total, int[] value)<br>{<br>\tif (total &lt; 0 || value.Length &lt; 1) return -1;<br><br>\tint[,] c = new int[total + 1, value.Length + 1];<br><br>\tfor (int i = 1; i &lt;= total; i++)<br>\t{<br>\t\tvar min = -1; &#47;&#47; -1 表示无解<br>\t\tvar str =&quot;[&quot;;<br>\t\tfor (int j = 0; j &lt; value.Length; j++)<br>\t\t{<br>\t\t\tif (i - c[i, j] &gt;= 0 &amp;&amp; i - value[j] &gt;= 0 &amp;&amp; c[i - value[j], value.Length] &gt; -1)<br>\t\t\t{<br>\t\t\t\tc[i, j] = c[i - value[j], value.Length] + 1;<br>\t\t\t\tmin = c[i, j];<br>\t\t\t}<br>\t\t\telse<br>\t\t\t{<br>\t\t\t\tc[i, j] = -1;<br>\t\t\t}<br>\t\t\tstr += c[i, j] +&quot;\\t ,&quot;;<br>\t\t}<br><br>\t\tc[i, value.Length] = min;<br>\t\tstr += min + &quot;]&quot;;<br>\t\t<br>\t\tConsole.WriteLine(str);<br>\t}<br><br>\t&#47;&#47;Console.WriteLine(c);&#47;&#47; linqpad 可以直接打印表格形式<br>\treturn c[total, value.Length];<br>}<br>#endregion 动态规划解法，也就是循环<br><br>#region 递归解法<br>static List&lt;int&gt; rewards = new List&lt;int&gt; { 2,3,7 };<br>static int minLength = int.MaxValue;<br>static int count = 0;<br>static List&lt;int&gt; result = new List&lt;int&gt;();<br><br>static void Get2(int total, List&lt;int&gt; dest)<br>{<br>\tif(total &lt; 0) return; &#47;&#47; 无解<br>\t<br>\tif(total == 0)<br>\t{<br>\t\tcount++;<br>\t\tConsole.WriteLine(string.Join(&quot;,&quot;, dest));<br><br>\t\tif (dest.Count &lt; minLength)<br>\t\t{<br>\t\t\tminLength = dest.Count;<br>\t\t\tresult.Clear();<br>\t\t\t<br>\t\t\tdest.ForEach(i =&gt; result.Add(i));<br>\t\t}<br>\t}<br>\t<br>\tif(dest == null) dest = new List&lt;int&gt;();<br><br>\trewards.ForEach(<br>\t\titem =&gt;<br>\t\t{<br>\t\t\tvar newDest = new List&lt;int&gt;();<br>\t\t\tdest.ForEach(r =&gt; newDest.Add(r));<br>\t\t\tnewDest.Add(item);<br>\t\t\t<br>\t\t\tGet2(total - item, newDest);<br>\t\t}<br>\t);<br>}<br>#endregion 递归解法","like_count":1},{"had_liked":false,"id":266514,"user_name":"别人家的康少","can_delete":false,"product_type":"c1","uid":1192871,"ip_address":"","ucode":"90047378D529FA","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/a7/b1c90605.jpg","comment_is_top":false,"comment_ctime":1607374522,"is_pvip":false,"replies":[{"id":"97161","content":"动态规划虽然是当前子问题的最优解，不过由于不断的通过子问题递推到整个问题，其实是完成了对所有解的搜索，只是通过状态转移方程，缩减了很多不必要的搜索路径，是可以得到全局最优的。而贪心算法的本质决定了到达一定条件后就停止搜索，而全局最优解可能会存在于未被搜索的空间之中。简单来理解，动态规划确实搜索了所有的可能，只是在一定程度上提升了效率。而贪心可能效率更高，但是遗漏了全局最优。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1607794416,"ip_address":"","comment_id":266514,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5902341818","product_id":100021201,"comment_content":"说到动态规划，你说是考虑当前子问题的最优解，我于是想到了贪心算法，请问这两者有什么区别呢","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511294,"discussion_content":"动态规划虽然是当前子问题的最优解，不过由于不断的通过子问题递推到整个问题，其实是完成了对所有解的搜索，只是通过状态转移方程，缩减了很多不必要的搜索路径，是可以得到全局最优的。而贪心算法的本质决定了到达一定条件后就停止搜索，而全局最优解可能会存在于未被搜索的空间之中。简单来理解，动态规划确实搜索了所有的可能，只是在一定程度上提升了效率。而贪心可能效率更高，但是遗漏了全局最优。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607794416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265955,"user_name":"凹凸鸿","can_delete":false,"product_type":"c1","uid":1915334,"ip_address":"","ucode":"A458BAEBF314B2","user_header":"https://static001.geekbang.org/account/avatar/00/1d/39/c6/1e12f271.jpg","comment_is_top":false,"comment_ctime":1607075887,"is_pvip":false,"replies":[{"id":"96645","content":"感谢这个信息，我也来学习一下如何将这个问题说得更清楚","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1607144971,"ip_address":"","comment_id":265955,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5902043183","product_id":100021201,"comment_content":"https:&#47;&#47;www.jianshu.com&#47;p&#47;a617d20162cf<br>这篇文章写得更清楚","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511107,"discussion_content":"感谢这个信息，我也来学习一下如何将这个问题说得更清楚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607144971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257806,"user_name":"zart","can_delete":false,"product_type":"c1","uid":1148637,"ip_address":"","ucode":"E32677C0FD4421","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eomCrCRrLAWib0gMI2L2NbicMummlxOY6nVmphsDO0J3xx7OygNd8wJicc88RbNoHrcuXBsKLtCMvgFQ/132","comment_is_top":false,"comment_ctime":1604136607,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5899103903","product_id":100021201,"comment_content":"public class Lesson10_2 {<br>    public static int minCoinCount(int money, ArrayList&lt;Integer&gt; coinArray){<br>        if (coinArray == null || coinArray.isEmpty() || money &lt;= 0){<br>            return -1;<br>        }<br>        int minCoinValue = Collections.min(coinArray);<br>        if (money &lt; minCoinValue){<br>            return -1;<br>        }<br><br>        int[] c = new int[money+1];<br><br>        for (int i=0; i&lt;minCoinValue; i++){<br>            c[i] = -1;<br>        }<br><br>        for (int i=minCoinValue; i&lt;=money; i++){<br>            ArrayList&lt;Integer&gt; coinNumList = new ArrayList&lt;&gt;(coinArray.size());<br>            for (int coin : coinArray){<br>                 if (i == coin){<br>                    coinNumList.add(1);<br>                } else if (i-coin&gt;0 &amp;&amp; c[i-coin]!=-1){<br>                    coinNumList.add(c[i-coin] +1);<br>                }<br>            }<br>            c[i] = Collections.min(coinNumList);<br>        }<br>        return c[money];<br>    }<br><br>    public static void main(String[] args) {<br>        ArrayList&lt;Integer&gt; coinArray = new ArrayList&lt;&gt;(3);<br>        coinArray.add(2);<br>        coinArray.add(3);<br>        coinArray.add(7);<br>        System.out.println(minCoinCount(100, coinArray));<br>    }<br>}","like_count":1},{"had_liked":false,"id":249585,"user_name":"张楠","can_delete":false,"product_type":"c1","uid":2170490,"ip_address":"","ucode":"BE1118AB5C4BB7","user_header":"https://static001.geekbang.org/account/avatar/00/21/1e/7a/fdaf2f45.jpg","comment_is_top":false,"comment_ctime":1600698513,"is_pvip":false,"replies":[{"id":"92028","content":"c(3)表示目前已经有3元，+1表示增加一个2元纸币或硬币获得总共5元，而c(2)表示目前已经有2元，+1表示增加一个3元纸币或硬币获得总共5元","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1601779596,"ip_address":"","comment_id":249585,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5895665809","product_id":100021201,"comment_content":"老师您好，我数学不是很好本课程中第二个案例（钱币组合的案例）表格中推导公式不太理解，比如：面额5 这行中2对应的c(3)+1 =2、3对应c(2) + 1 = 2，如果您有方便能给讲解下么？怎么推导出来的，谢谢","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505961,"discussion_content":"c(3)表示目前已经有3元，+1表示增加一个2元纸币或硬币获得总共5元，而c(2)表示目前已经有2元，+1表示增加一个3元纸币或硬币获得总共5元","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601779596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209263,"user_name":"Albatross-G","can_delete":false,"product_type":"c1","uid":1936808,"ip_address":"","ucode":"094D197327468D","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8d/a8/957e57ae.jpg","comment_is_top":false,"comment_ctime":1587525866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882493162","product_id":100021201,"comment_content":"c语言实现：<br><br><br>法一（动态规划）<br><br><br>#include &quot;stdio.h&quot;\r\rint min(int a,int b,int c)\r{\r\tint temp;\r\tif(a&gt;b){temp=a,a=b,b=temp;\r\t}\r\tif(b&gt;c){temp=b,b=c,c=temp;\r\t}\r\tif(a&gt;b){temp=a,a=b,b=temp;\r\t}\r\treturn a;\r}\r\rvoid main()\r{\r\tint i;\r\tint num[100];\r\tnum[1]=10000000;&#47;&#47;不存在的设置为超大值 \r\tnum[2]=1;\r\tnum[3]=1;\r\tnum[7]=1;\r\tfor(i=4;i&lt;=7;i++)\r\t{\r\t\tnum[i]=min(num[i-2],num[i-3],10000000)+1;&#47;&#47;比较两数大小。第三个参数设为超大 \r\t}\r\tfor(i=8;i&lt;=100;i++)\r\t{\r\t\tnum[i]=min(num[i-2],num[i-3],num[i-7])+1;\r\t}\r\tprintf(&quot;%d&quot;,num[100]);\r}<br><br><br>法二（递归）<br><br><br>#include &quot;stdio.h&quot;\r\rint recursion(int total,int n,int min)\r{\r\tint coin[3]={2,3,7};\r\tint i;\r\tfor(i=0;i&lt;3;i++,n--)\r\t{\r\t\tif(total==0)\r\t\t{\r\t\t\tif(n&lt;=min)\r\t\t\t{\r\t\t\t\tmin=n;\r\t\t\t\t\r\t\t\t}\r\t\t\treturn min;\r\t\t}\r\t\telse if(total&gt;0)\r\t\t{\r\t\t\tn++;\r\t\t\tmin=recursion(total-coin[i],n,min);\r\t\t}\r\t}\r\treturn min;\r}\r\r\rvoid main()\r{\r\tprintf(&quot;%d&quot;,recursion(100,0,100000));\r}<br><br><br><br>法三（结合一些数学：先考虑7）<br><br><br>&#47;&#47;100元，有2，3，7面值的硬币，怎样分使硬币总数最小 \r\r#include&quot;stdio.h&quot;\r\rint recursion(int remaining,int num,int mini)\r{\r\tint coin[3]={2,3,7},i;\r\tfor(i=0;i&lt;2;i++,num--)\r\t{\r\t\tif(remaining==0)\r\t\t{\r\t\t\tif(num&lt;mini)\r\t\t\t{\r\t\t\t\tmini=num;\r\t\t\t}\r\t\t\treturn mini;\r\t\t}\r\t\telse if(remaining&gt;0)\r\t\t{\r\t\t\tnum++;\r\t\t\tmini=recursion(remaining-coin[i],num,mini);\r\t\t}\r\t}\r\r\treturn mini;\r}\r\rvoid main()\r{\r\tint total=100;\r\tint coin[3]={2,3,7};\r\tint min=10000;\r\tint remain=total%7;\r\tint n=total&#47;7;\r\tfor(;min==10000;remain&lt;=total,remain+=7){\r\t\tif(remain!=0){\r\t\t\tmin=recursion(remain,n,min);&#47;&#47;min参数同时充当着最小值和flag的作用 \r\t\t}\r\t\telse{\r\t\t\tmin=n;\r\t\t}\r\t}\r\tif(min==10000)\r\t{\r\t\tprintf(&quot;钱币永远无法分配！&quot;); \r\t}\r\tprintf(&quot;%d&quot;,min);\r}","like_count":1},{"had_liked":false,"id":187725,"user_name":"喻茂","can_delete":false,"product_type":"c1","uid":1318661,"ip_address":"","ucode":"C8BD8086A17365","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/05/8a06692e.jpg","comment_is_top":false,"comment_ctime":1584199501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879166797","product_id":100021201,"comment_content":"php示例<br>&lt;?php<br>&#47;**    <br> * @Description:  使用状态转移方程，计算两个字符串之间的编辑距离 <br> * @param a-第一个字符串，b-第二个字符串 <br> * @return int-两者之间的编辑距离    <br> *&#47;<br>function getStrDistance($a,$b) {<br>\tif ($a == null || $b == null) {<br>\t\treturn -1;<br>\t}<br>\t$d = []; &#47;&#47; 用来保存所有编辑距离<br>\tfor ($j=0;$j&lt;=strlen($b);$j++) {<br>\t\t$d[0][$j] = $j;<br>\t}<br>\t<br>\tfor ($i=0;$i&lt;=strlen($a);$i++) {<br>\t\t$d[$i][0] = $i;<br>\t}<br>\t<br>\tfor ($i=0;$i&lt;strlen($a);$i++) {<br>\t\tfor ($j=0;$j&lt;strlen($b);$j++) {<br>\t\t\t$r = 0;<br>\t\t\tif ($a[$i] != $b[$j]) {<br>\t\t\t\t$r = 1;<br>\t\t\t}<br>\t\t\t$first_append = $d[$i][$j + 1] + 1;<br>\t\t\t$second_append = $d[$i+1][$j] + 1;<br>\t\t\t$min = min($first_append,$second_append,$d[$i][$j]+$r);<br>\t\t\t$d[$i+1][$j+1] = $min;<br> \t\t}<br>\t}<br>\treturn $d[strlen($a)][strlen($b)];<br>}<br><br>print_R(getStrDistance(&quot;mouse&quot;, &quot;mouuse&quot;));","like_count":1},{"had_liked":false,"id":181925,"user_name":"四喜","can_delete":false,"product_type":"c1","uid":1071389,"ip_address":"","ucode":"C5EBED19C0F332","user_header":"https://static001.geekbang.org/account/avatar/00/10/59/1d/c89abcd8.jpg","comment_is_top":false,"comment_ctime":1582681007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877648303","product_id":100021201,"comment_content":"```<br>def min_cb_array(total=100, notations=None):<br>    if not notations:<br>        notations = (2, 3, 7)<br><br>    fields = notations + (&#39;min&#39;, )<br>    results = [[None] * len(fields) for _ in range(total)]<br>    results.insert(0, [None] * len(notations))<br><br>    for i in range(1, total + 1):<br>        amount = i<br>        for j, notation in enumerate(notations):<br>            if amount &lt; notation:<br>                continue<br>            elif amount == notation:<br>                results[i][j] = 1<br>            else:<br>                if results[amount - notation][-1]:<br>                    results[amount][j] = results[amount - notation][-1] + 1<br>                else:<br>                    continue<br><br>        results[i][-1] = min([value for value in results[i][:-1] if value],<br>                             default=0)<br>    return results[total][-1]<br>```","like_count":1},{"had_liked":false,"id":181919,"user_name":"四喜","can_delete":false,"product_type":"c1","uid":1071389,"ip_address":"","ucode":"C5EBED19C0F332","user_header":"https://static001.geekbang.org/account/avatar/00/10/59/1d/c89abcd8.jpg","comment_is_top":false,"comment_ctime":1582680475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877647771","product_id":100021201,"comment_content":"```<br>def editing_distance(sa, sb):<br>    if not sa or not sb:<br>        raise ValueError(&#39;empty string&#39;)<br><br>    lda = len(sa) + 1<br>    ldb = len(sb) + 1<br><br>    d = [[None] * ldb for _ in range(lda)]<br><br>    for j in range(ldb):<br>        d[0][j] = j<br><br>    for i in range(lda):<br>        d[i][0] = i<br><br>    for i, ca in enumerate(sa):<br>        for j, cb in enumerate(sb):<br>            r = 0<br>            if ca != cb:<br>                r = 1<br>            first_append = d[i][j + 1] + 1<br>            second_append = d[i + 1][j] + 1<br>            replace = d[i][j] + r<br><br>            d[i + 1][j + 1] = min(first_append, second_append, replace)<br><br>    return d[len(sa)][len(sb)]<br>```","like_count":1},{"had_liked":false,"id":177535,"user_name":"kissrain","can_delete":false,"product_type":"c1","uid":1120583,"ip_address":"","ucode":"2177C53E3B2DCC","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/47/b27f1314.jpg","comment_is_top":false,"comment_ctime":1581412414,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5876379710","product_id":100021201,"comment_content":"min(3, 1, 2)对吧，这个是mo和m的比较，<br>3表示增加一个m再增加一个o，再删掉一个o，编辑距离是2+1=3。<br>1表示两个字符串都是m，其中一个再增加一个o，编辑距离是1。<br>2表示一个m增加o，一个从空集到m，编辑距离是2。<br>这段看了很多遍都是一头雾水，是否可以重新用这段来重新推理一遍min（2,2,0）呢？为什么3的时候是从空串开始，1的时候是就是两个都是m了，2的时候又可以是从m开始了","like_count":1,"discussions":[{"author":{"id":1006027,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/cb/43124a2d.jpg","nickname":"立仔","note":"","ucode":"38885BA7B203BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382129,"discussion_content":"这段真没看懂 好奇怪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625446581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264720,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjUDIRQ0gRicvicty8DRWAwMGcicdUdKJjjo7f1V63WUbHuJu6YX44ojlXVLE4Bf3l6qXxOvkBaJNyA/132","nickname":"Geek_4472ab","note":"","ucode":"63DB215130ADF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343303,"discussion_content":"任何人看到了都是一头雾水的，我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610988117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338110,"discussion_content":"我也是，理论是看懂了，用代码反向验证","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609173263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153186,"user_name":"Vincent🌫","can_delete":false,"product_type":"c1","uid":1150764,"ip_address":"","ucode":"F7DAF7942417A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/2c/5c267d3e.jpg","comment_is_top":false,"comment_ctime":1574176470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869143766","product_id":100021201,"comment_content":"2x+3Y+7Z = 100（100 表示total）<br>X+Y+Z = min<br>这个是3元一次方程，但是只有两条公式，会有无数解，最优解只有一个","like_count":1},{"had_liked":false,"id":60832,"user_name":"xiaobang","can_delete":false,"product_type":"c1","uid":1157508,"ip_address":"","ucode":"1735BDCFD61655","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg","comment_is_top":false,"comment_ctime":1547559955,"is_pvip":false,"replies":[{"id":"21684","content":"是的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547567190,"ip_address":"","comment_id":60832,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5842527251","product_id":100021201,"comment_content":"min的三个参数应该分别是插入删除替换，或者插入插入替换吧","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436637,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547567190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57561,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1546835544,"is_pvip":false,"replies":[{"id":"21430","content":"确实，动态规划使用循环更快","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547402185,"ip_address":"","comment_id":57561,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841802840","product_id":100021201,"comment_content":"https:&#47;&#47;github.com&#47;somenzz&#47;geekbang&#47;blob&#47;master&#47;mathOfProgramer&#47;chapter10_dynamic_programming.py<br>实现了循环和递归，循环的方式快，递归的方式特别慢。<br>个人感觉递归是从后往前推导的，每一步的结果不论是否最优都保存在堆栈中，都占用了内存空间，算法上已经不属于动态规划。<br><br>循环的方式不论 num 有多大，仅占用了7个变量的内存空间，每一步都保留上一步的最优解，因此效率较高，而且可以方便地打印出有最小数量的组合。<br><br>循环方式的代码的输出如下：<br> 1 -&gt; None<br> 2 -&gt; (1, [2])<br> 3 -&gt; (1, [3])<br> 4 -&gt; (2, [2, 2])<br> 5 -&gt; (2, [2, 3])<br> 6 -&gt; (2, [3, 3])<br> 7 -&gt; (1, [7])<br> 8 -&gt; (3, [2, 3, 3])<br> 9 -&gt; (2, [2, 7])<br> 10 -&gt; (2, [3, 7])<br> 100 -&gt; (15, [2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])<br><br><br>","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435643,"discussion_content":"确实，动态规划使用循环更快","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547402185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57395,"user_name":"菩提","can_delete":false,"product_type":"c1","uid":1309278,"ip_address":"","ucode":"19586AC50BEF1E","user_header":"","comment_is_top":false,"comment_ctime":1546779542,"is_pvip":false,"replies":[{"id":"21427","content":"思路正确👍，编码可以稍微再通用点，用循环访问不同的币值","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547402001,"ip_address":"","comment_id":57395,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841746838","product_id":100021201,"comment_content":"思考题编码：<br>public static int least_count(int num) {<br>\t\tif (num &lt; 0)<br>\t\t\treturn -1;<br>\t\tint len = num;<br>\t\tif (num &lt; 9)<br>\t\t\tlen = 8;<br>\t\tint[] c = new int[len + 1];<br>\t\tc[0] = -1;<br>\t\tc[1] = -1;<br>\t\tc[2] = 1;<br>\t\tc[3] = 1;<br>\t\tc[4] = 2;<br>\t\tc[5] = 2;<br>\t\tc[6] = 2;<br>\t\tc[7] = 1;<br>\t\tc[8] = 3;<br><br>\t\tif (num &lt; 9) {<br>\t\t\treturn c[num];<br>\t\t}<br><br>\t\tfor (int i = 9; i &lt;= num; i++) {<br>\t\t\tint a = c[i - 2] + 1;<br>\t\t\tint b = c[i - 3] + 1;<br>\t\t\tint min = Math.min(a, b);<br>\t\t\tint m = c[i - 7] + 1;<br>\t\t\tmin = Math.min(min, m);<br>\t\t\tc[i] = min;<br>\t\t}<br><br>\t\treturn c[num];<br>\t}<br><br>\tpublic static void main(String[] args) {<br>\t\tSystem.out.println(least_count(100));<br>\t}<br><br>运行结果： 15","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435560,"discussion_content":"思路正确👍，编码可以稍微再通用点，用循环访问不同的币值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547402001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56982,"user_name":"FengX","can_delete":false,"product_type":"c1","uid":1353041,"ip_address":"","ucode":"B1B0235B1D1935","user_header":"https://static001.geekbang.org/account/avatar/00/14/a5/51/7773d421.jpg","comment_is_top":false,"comment_ctime":1546592016,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5841559312","product_id":100021201,"comment_content":"递归的写法：<br>这里举例了凑成11元的最少币数<br>import java.util.*;<br><br>public class MinCoins {<br>\tpublic static int[] arr={7,3,2};<br>\tpublic static int minNum=Integer.MAX_VALUE;<br>\tpublic static HashMap&lt;Integer,Integer&gt; min_map=new HashMap&lt;Integer,Integer&gt;();<br>    public static void main(String []args) {<br>        System.out.println(&quot;Coins:&quot;+Arrays.toString(arr));<br>\t\tminCoins(0,11,new HashMap&lt;Integer,Integer&gt;());<br>\t\tSystem.out.println(&quot;MinCoins:&quot;);<br>\t\tfor (Map.Entry&lt;Integer,Integer&gt;entry:min_map.entrySet()){<br>\t\t\tSystem.out.println(entry.getKey()+&quot;:&quot;+entry.getValue());<br>\t\t}<br>    }<br>\t<br>\tpublic static void minCoins(int index,int aim,HashMap&lt;Integer,Integer&gt; map){<br>\t\tif(index==arr.length||aim==0){<br>\t\t\tif(aim==0){<br>\t\t\t\tint num=0;<br>\t\t\t\tfor (Integer value:map.values())<br>\t\t\t\t\tnum+=value;<br>\t\t\t\tif(num&lt;minNum) min_map=map;<br>\t\t\t}<br>\t\t\treturn;<br>\t\t}<br>\t\tfor(int i=0;arr[index]*i&lt;=aim;i++){<br>\t\t\tHashMap&lt;Integer,Integer&gt; new_map=(HashMap&lt;Integer,Integer&gt;)map.clone();<br>\t\t\tnew_map.put(arr[index],i);<br>\t\t\tminCoins(index+1,aim-arr[index]*i,new_map);<br>\t\t}<br>\t}<br>}","like_count":1,"discussions":[{"author":{"id":1150764,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8f/2c/5c267d3e.jpg","nickname":"Vincent🌫","note":"","ucode":"F7DAF7942417A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54226,"discussion_content":"多谢你的参考资料","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574270395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356910,"user_name":"ACHL","can_delete":false,"product_type":"c1","uid":3168900,"ip_address":"广西","ucode":"5ACE8F786BD5D1","user_header":"https://static001.geekbang.org/account/avatar/00/30/5a/84/2d9a6785.jpg","comment_is_top":false,"comment_ctime":1662694845,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1662694845","product_id":100021201,"comment_content":"package firstPart;<br><br>import java.util.Arrays;<br><br><br>public class Lessonpratice_10_1 {<br><br>\t&#47;**<br>\t * @Description: 使用动态规划，解决给定金额求最小纸币数问题<br>\t * @param  C-给定的金额，m-给定的可能纸币<br>\t * @return int-最小纸币数<br>\t *&#47;<br>\tpublic static int Getres_version1(int C, int[] m) {<br>\t\tif (C &lt; 0) {<br>\t\t\treturn -1;<br>\t\t}<br>\t\tif (C == 0) {<br>\t\t\treturn 0;<br>\t\t}<br>\t    int[] dp = new int[C + 1];<br>\t    Arrays.fill(dp, (int)0x3f3f3f3f);<br>\t    dp[0] = 0;<br>\t\tfor (int i = 1; i &lt;= C; i++) {<br>\t\t\tfor (int j = 0; j &lt; m.length; j++) {<br>\t\t\t\tif (i &gt;= m[j]) {<br>\t\t\t\t\t dp[i] = Math.min(dp[i - m[j]] + 1, dp[i]);<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t\treturn dp[C];<br>\t}<br>\t&#47;**<br>\t * @Description: 使用贪心算法，解决给定金额求最小纸币数问题<br>\t * @param  C-给定的金额，m-给定的可能纸币<br>\t * @return int-最小纸币数<br>\t *&#47;<br>\tpublic static int Getres_version2(int C, int[] m) {<br>\t\tif (C &lt; 0) {<br>\t\t\treturn -1;<br>\t\t}<br>\t\tif (C == 0) {<br>\t\t\treturn 0;<br>\t\t}<br>\t\tArrays.sort(m);<br>\t\tint left = C;<br>\t\tint idx = m.length - 1;<br>\t\tint res = 0;<br>\t\twhile (true) {<br>\t\t\tif (left == 0) break;<br>\t\t\tint k = left &#47; m[idx];<br>\t\t\tres += k;<br>\t\t\tleft -= k * m[idx];<br>\t\t\tidx--;<br>\t\t}<br>\t\treturn res;<br>\t}<br>\tpublic static void main(String[] args) {<br>\t\t   int[] m = new int[]{2, 3, 7};<br>\t\t   int C = 100;<br>           System.out.println(Lessonpratice_10_1.Getres_version2(0, m));<br>\t}<br>}","like_count":1},{"had_liked":false,"id":352826,"user_name":"013923","can_delete":false,"product_type":"c1","uid":3035193,"ip_address":"","ucode":"1214DAADBCA848","user_header":"","comment_is_top":false,"comment_ctime":1658972745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658972745","product_id":100021201,"comment_content":"谢谢老师！","like_count":0},{"had_liked":false,"id":346779,"user_name":"祁墨","can_delete":false,"product_type":"c1","uid":1970487,"ip_address":"","ucode":"B23C0E2D54D222","user_header":"https://static001.geekbang.org/account/avatar/00/1e/11/37/9e279efe.jpg","comment_is_top":false,"comment_ctime":1653415579,"is_pvip":false,"replies":[{"id":"126551","content":"很高兴代码对你有用","user_name":"作者回复","user_name_real":"编辑","uid":"1275061","ctime":1653689391,"ip_address":"","comment_id":346779,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653415579","product_id":100021201,"comment_content":"刚开始理论没看懂，看了代码才明白","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573852,"discussion_content":"很高兴代码对你有用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653689391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340560,"user_name":"克己求生","can_delete":false,"product_type":"c1","uid":1055204,"ip_address":"","ucode":"F684AA10ECBBBA","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/e4/09de1820.jpg","comment_is_top":false,"comment_ctime":1648905642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648905642","product_id":100021201,"comment_content":"def min_value(datas):<br>    if not datas:<br>        return 0<br><br>    return min(datas)<br><br>def calculate(total, values):<br>    c = [0] * (total + 1)<br>    <br>    round_value = []<br>    for i in range(0, total):<br>        money = i + 1<br>        round_value.clear()<br>        <br>        for j in values:<br>            if money &lt; j:<br>                continue<br>            elif money == j:<br>                round_value.append(1)<br>            elif (money - j) &gt;= values[0]:<br>                round_value.append(c[money - j] + 1)<br>        <br>        c[money] = min_value(round_value)<br>    <br>    print(c[total])<br><br>calculate(100, [2, 3, 7])","like_count":0},{"had_liked":false,"id":340559,"user_name":"克己求生","can_delete":false,"product_type":"c1","uid":1055204,"ip_address":"","ucode":"F684AA10ECBBBA","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/e4/09de1820.jpg","comment_is_top":false,"comment_ctime":1648905478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648905478","product_id":100021201,"comment_content":"def min_value(datas):<br>    if not datas:<br>        return 0<br>    <br>    import sys<br>    minv = sys.maxsize<br>    <br>    for i in datas:<br>        if minv &gt; i:<br>            minv = i<br>            <br>    return minv<br><br>def calculate(total, values):<br>    c = [0] * (total + 1)<br>    <br>    round_value = []<br>    for i in range(0, total):<br>        money = i + 1<br>        round_value.clear()<br>        <br>        for j in values:<br>            if money &lt; j:<br>                continue<br>            elif money == j:<br>                round_value.append(1)<br>            elif (money - j) &gt;= values[0]:<br>                round_value.append(c[money - j] + 1)<br>        <br>        c[money] = min_value(round_value)<br>    <br>    print(c[total])<br><br>calculate(100, [2, 3, 7])","like_count":0},{"had_liked":false,"id":319032,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1635518961,"is_pvip":false,"replies":[{"id":"115684","content":"我稍后看一下，应该是个笔误","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1635637913,"ip_address":"","comment_id":319032,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635518961","product_id":100021201,"comment_content":"老师好，“如果 i 大于 0，且 j 大于 0，那么 d[i, j]=min(d[i-1, j] + 1, d[i, j-1] + 1, d[i-1, j-1] + r(i, j))”，可以得到d[2,2]=min(d[2-1, 2] + 1, d[2, 2-1] + 1, d[2-1, 2-1] + r(2, 2))=min(d[1,2] + 1, d[2,1] + 1, d[1,1] + r(2,2))=min(1 + 1, 1 + 1, 0 + 0)=min(2, 2, 0)吧？为何在推导表格里是min(2, 3, 0)呢？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529465,"discussion_content":"我稍后看一下，应该是个笔误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635637913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2331526,"avatar":"https://static001.geekbang.org/account/avatar/00/23/93/86/b97c3596.jpg","nickname":"Eclipse","note":"","ucode":"7A495B6E394AC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536933,"discussion_content":"me too 我也是因为这个格子困惑了很久，还去查了其他的资料，怎么看都感觉应该是min(2, 2, 0)，感觉应该是笔误吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638894000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313036,"user_name":"Geek_3e4f89","can_delete":false,"product_type":"c1","uid":1225737,"ip_address":"","ucode":"49197C3CAF8B7D","user_header":"https://static001.geekbang.org/account/avatar/00/12/b4/09/768af959.jpg","comment_is_top":false,"comment_ctime":1632222598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632222598","product_id":100021201,"comment_content":"int first_append = d[i][j + 1] + 1;    <br>int second_append = d[i + 1][j] + 1;<br><br>上面代码这样写会更好理解:<br>int first_append = d[i + 1][j] + 1;<br>int second_append = d[i][j + 1] + 1;<br>","like_count":0},{"had_liked":false,"id":313035,"user_name":"Geek_3e4f89","can_delete":false,"product_type":"c1","uid":1225737,"ip_address":"","ucode":"49197C3CAF8B7D","user_header":"https://static001.geekbang.org/account/avatar/00/12/b4/09/768af959.jpg","comment_is_top":false,"comment_ctime":1632221480,"is_pvip":false,"replies":[{"id":"113571","content":"其实本质都是一样的，理解动态规划的过程就好了","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1632504168,"ip_address":"","comment_id":313035,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632221480","product_id":100021201,"comment_content":"这题很经典, 想问一下为啥好多网上code都是写  word1[i]==word2[j]   则 dp[i][j] = dp[i-1][j-1]. 为啥和老师这种方法可以等价 ?<br><br>&#47;&#47;  word1 → word2<br>    public int minDistance(String word1, String word2) {<br>        int len1 = word1.length();<br>        int len2 = word2.length();<br><br>        &#47;&#47; 多开一行一列是为了保存边界条件，即字符长度为 0 的情况<br>        int[][] dp = new int[len1 + 1][len2 + 1];<br>        &#47;&#47; 初始化：当 word2 长度为 0 时，将 word1 的全部删除即可<br>        for (int i = 1; i &lt;= len1; i++) {<br>            dp[i][0] = i;<br>        }<br>        &#47;&#47; 当 word1 长度为 0 时，插入所有 word2 的字符即可<br>        for (int j = 1; j &lt;= len2; j++) {<br>            dp[0][j] = j;<br>        }<br><br><br>        char[] word1Array = word1.toCharArray();<br>        char[] word2Array = word2.toCharArray();<br>        &#47;&#47; 递推开始，注意：填写 dp 数组的时候，由于初始化多设置了一行一列，横纵坐标有个偏移<br>        for (int i = 1; i &lt;= len1; i++) {<br>            for (int j = 1; j &lt;= len2; j++) {<br>                &#47;&#47; 这是最佳情况<br>                if (word1Array[i - 1] == word2Array[j - 1]) {<br>                    dp[i][j] = dp[i - 1][j - 1];<br>                    continue;<br>                }<br>                &#47;&#47; 否则在以下三种情况中选出步骤最少的，这是「动态规划」的「最优子结构」<br>                &#47;&#47; 1、在下标 i 处插入一个字符<br>                int insert = dp[i][j - 1] + 1;<br>                &#47;&#47; 2、替换一个字符<br>                int replace = dp[i - 1][j - 1] + 1;<br>                &#47;&#47; 3、删除一个字符<br>                int delete = dp[i - 1][j] + 1;<br>                dp[i][j] = Math.min(Math.min(insert, replace), delete);<br><br>            }<br>        }<br>        return dp[len1][len2];<br>    }<br><br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527203,"discussion_content":"其实本质都是一样的，理解动态规划的过程就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632504168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304206,"user_name":"梦幻的星空","can_delete":false,"product_type":"c1","uid":1526058,"ip_address":"","ucode":"FACC1AE8994DEA","user_header":"https://static001.geekbang.org/account/avatar/00/17/49/2a/e1c914c9.jpg","comment_is_top":false,"comment_ctime":1627292450,"is_pvip":false,"replies":[{"id":"111221","content":"推导方式是一致的，只是在表里的路径不同，所以结果不同。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1628889582,"ip_address":"","comment_id":304206,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627292450","product_id":100021201,"comment_content":"表格中字符串A的m1这一行，min(2,2,0)、min(3,1,2)这两个中第三位数字0和2的推导方式是一样的吗？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523978,"discussion_content":"推导方式是一致的，只是在表里的路径不同，所以结果不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628889582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303692,"user_name":"Mr.LIU","can_delete":false,"product_type":"c1","uid":1590371,"ip_address":"","ucode":"0E3BE4272F7112","user_header":"https://static001.geekbang.org/account/avatar/00/18/44/63/283aa01b.jpg","comment_is_top":false,"comment_ctime":1626934881,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626934881","product_id":100021201,"comment_content":"老师能帮忙看下，递归的话，速度非常的慢<br>static int test2(int sum, int[] type) {<br>        &#47;&#47; 记录每个面值的最小数<br>        if (sum &lt;= 0) {<br>            return 0;<br>        }<br>        int c = 0;<br>        for (int value : type) {<br>            if (sum - value &gt;= 0) {<br>                int s = test2(sum - value, type) + 1;<br>                &#47;&#47; 取不同面值的最小值<br>                if (c == 0) {<br>                    c = s;<br>                } else {<br>                    c = Math.min(c, s);<br>                }<br>            }<br>        }<br>        return c;<br>    }","like_count":0},{"had_liked":false,"id":297011,"user_name":"张祈璟","can_delete":false,"product_type":"c1","uid":1400950,"ip_address":"","ucode":"DC7DDB3881633F","user_header":"https://static001.geekbang.org/account/avatar/00/15/60/76/be584def.jpg","comment_is_top":false,"comment_ctime":1623282760,"is_pvip":false,"replies":[{"id":"108262","content":"是的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1624026729,"ip_address":"","comment_id":297011,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623282760","product_id":100021201,"comment_content":"两个字符串，每个字符都需要cross join，有顺序，跟前一次的比较有联系，有一个连续性","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521681,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624026729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296485,"user_name":"Geek_2c8a24","can_delete":false,"product_type":"c1","uid":2334040,"ip_address":"","ucode":"5DDD7AEF3668A8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4O0oeYUkS2GuRrhEQCYY62YISgSbLrWMNG3FjagMQm9icGlLTH2AIIibWia3ZYxGvI8mp8LXagv4DkNRjAgh4hCyg/132","comment_is_top":false,"comment_ctime":1622995333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622995333","product_id":100021201,"comment_content":"这么简单的题，还是看着大佬的思路写，还是写了快一个小时，加油<br><br>输出为15<br><br>public int test(int amount){<br>        if(amount == 1){<br>            return -1;<br>        }<br>        int[][] temp = new int[amount][3 + 1];<br>        int[] money = new int[]{2, 3, 7};<br>        for (int i = 1; i &lt; amount; i++) {<br>            int mm = i+1;<br>            int min = 0;<br>            for (int i1 = 0; i1 &lt; money.length; i1++) {<br>                if(mm == money[i1]){<br>                    temp[i][i1] = 1;<br>                    min = 1;<br>                    continue;<br>                }<br>                if(money[i1] &gt; mm){<br>                    continue;<br>                }<br>                if((mm - money[i1]) &gt;= money[i1]){<br>                    temp[i][i1] = temp[i - money[i1]][money.length] + 1;<br>                    if(min == 0 || min &gt; temp[i][i1]){<br>                        min = temp[i][i1];<br>                    }<br>                }<br>            }<br>            temp[i][money.length] = min;<br>        }<br>        return temp[amount - 1][money.length];<br>    }","like_count":0},{"had_liked":false,"id":287601,"user_name":"何嘉伟","can_delete":false,"product_type":"c1","uid":2008250,"ip_address":"","ucode":"67EE6F637D5685","user_header":"https://static001.geekbang.org/account/avatar/00/1e/a4/ba/9e063987.jpg","comment_is_top":false,"comment_ctime":1618046168,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618046168","product_id":100021201,"comment_content":"func findMin() {<br>      dp := make([]int , 101)<br>\tfor i := 1 ; i &lt; 101 ; i ++ {<br>\t\tdp[i] = 101<br>\t}<br><br>\tmin := func(a , b int) int {<br>\t\tif a &lt; b {<br>\t\t\treturn  a<br>\t\t}<br>\t\treturn b<br>\t}<br><br>\tcoins := []int{ 2 , 3 , 7 }<br>\tfor i := 1 ; i &lt; 101 ; i ++ {<br>\t\tfor _ , v := range coins {<br>\t\t\tif i &lt; v {<br>\t\t\t\tcontinue<br>\t\t\t}<br>\t\t\tdp[i] = min(dp[i] , dp[i - v] + 1)<br>\t\t}<br>\t}<br><br>\tfmt.Println(dp[100])<br>}","like_count":0},{"had_liked":false,"id":274398,"user_name":"Dale","can_delete":false,"product_type":"c1","uid":1242602,"ip_address":"","ucode":"AD19A33FE5EEDF","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/ea/5f046856.jpg","comment_is_top":false,"comment_ctime":1610992319,"is_pvip":false,"replies":[{"id":"99842","content":"如果局部最优无法推导出全局，那么动态规划就不能保证全局最优解。有其他的方法例如随机的优化解搜索，但是也不能保证100%全局最优解。或者是增大搜索空间，也可就是增加时间复杂度","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1611349400,"ip_address":"","comment_id":274398,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610992319","product_id":100021201,"comment_content":"如果局部最优推导不出来全局最优怎么办？或者说怎么确实局部最优叠加出来就是全局最优呢?谢谢","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514006,"discussion_content":"如果局部最优无法推导出全局，那么动态规划就不能保证全局最优解。有其他的方法例如随机的优化解搜索，但是也不能保证100%全局最优解。或者是增大搜索空间，也可就是增加时间复杂度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611349400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274387,"user_name":"Geek_4472ab","can_delete":false,"product_type":"c1","uid":1264720,"ip_address":"","ucode":"63DB215130ADF1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjUDIRQ0gRicvicty8DRWAwMGcicdUdKJjjo7f1V63WUbHuJu6YX44ojlXVLE4Bf3l6qXxOvkBaJNyA/132","comment_is_top":false,"comment_ctime":1610986050,"is_pvip":false,"replies":[{"id":"99843","content":"上一节（第9节）最后部分的推导理解了吗？如果那个理解了，对于这个总表就不难理解了","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1611349438,"ip_address":"","comment_id":274387,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610986050","product_id":100021201,"comment_content":"这个表格，看了几个小时都没有搞明白，可以推理其中最简单的一个数据怎么得来的嘛？<br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514000,"discussion_content":"上一节（第9节）最后部分的推导理解了吗？如果那个理解了，对于这个总表就不难理解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611349438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272885,"user_name":"Geek_27ca2b","can_delete":false,"product_type":"c1","uid":2110804,"ip_address":"","ucode":"E2D9EA5EF1E113","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/vFhAmp9beuRuZZL0GQibJqsUmXNz2LPTOU95fGJlG0TDmZOvVcmatV0wHltu3YpQ9PQCDFoeJibvFBl8zvmUDvtQ/132","comment_is_top":false,"comment_ctime":1610347045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610347045","product_id":100021201,"comment_content":"js实现的版本<br>https:&#47;&#47;github.com&#47;wss2020&#47;Frontend-04-Template&#47;blob&#47;master&#47;z.js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95&#47;%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E8%AF%BE&#47;%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92&#47;2%20%E9%92%B1%E5%B8%81%E7%BB%84%E5%90%88%E7%9A%84%E6%96%B0%E9%97%AE%E9%A2%98&#47;%E4%BB%A3%E7%A0%812.js","like_count":0},{"had_liked":false,"id":271691,"user_name":"Geek_c23a4c","can_delete":false,"product_type":"c1","uid":2310989,"ip_address":"","ucode":"A74EACB790590D","user_header":"","comment_is_top":false,"comment_ctime":1609759276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609759276","product_id":100021201,"comment_content":"列号i：1行号j：1<br>2-2-0<br>列号i：1行号j：2<br>1-3-2<br>列号i：1行号j：3<br>2-4-3<br>列号i：1行号j：4<br>3-5-4<br>列号i：1行号j：5<br>4-6-5<br>列号i：1行号j：6<br>5-7-6<br>列号i：2行号j：1<br>3-1-2<br>列号i：2行号j：2<br>2-2-0<br>列号i：2行号j：3<br>1-3-2<br>列号i：2行号j：4<br>2-4-3<br>列号i：2行号j：5<br>3-5-4<br>列号i：2行号j：6<br>4-6-5<br>列号i：3行号j：1<br>4-2-3<br>列号i：3行号j：2<br>3-1-2<br>列号i：3行号j：3<br>2-2-0<br>列号i：3行号j：4<br>1-3-1<br>列号i：3行号j：5<br>2-4-3<br>列号i：3行号j：6<br>3-5-4<br>列号i：4行号j：1<br>5-3-4<br>列号i：4行号j：2<br>4-2-3<br>列号i：4行号j：3<br>3-1-2<br>列号i：4行号j：4<br>2-2-1<br>列号i：4行号j：5<br>2-3-1<br>列号i：4行号j：6<br>2-4-3<br>列号i：5行号j：1<br>6-4-5<br>列号i：5行号j：2<br>5-3-4<br>列号i：5行号j：3<br>4-2-3<br>列号i：5行号j：4<br>3-2-2<br>列号i：5行号j：5<br>3-2-2<br>列号i：5行号j：6<br>3-3-1","like_count":0},{"had_liked":false,"id":246057,"user_name":"欧阳洲","can_delete":false,"product_type":"c1","uid":1986708,"ip_address":"","ucode":"94606A6315F2BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKT9Tk01eiaQ9aAhszthzGm6lwruRWPXia1YYFozctrdRvKg0Usp8NbwuKBApwD0D6Fty2tib3RdtFJg/132","comment_is_top":false,"comment_ctime":1599146288,"is_pvip":false,"replies":[{"id":"90902","content":"第一个问题，看上去mo,m和m,mo的情况应该一直，但是由于这里的mo产生的方式不同，所以会导致不是简单的(3,3,x)<br><br>第二个问题，你可以参照第9章最后表格的推导，尝试填写表格中的值，就能明白其中的道理了。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1599713842,"ip_address":"","comment_id":246057,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1599146288","product_id":100021201,"comment_content":"老师好，按照 上一讲和这一讲 的 两个表格来推算，似乎不对：<br>想请教一下：<br>（疑问一）前面两个值计算的疑问：<br>(m,m)=(2,2,0),根据上一讲的表格：<br>第一个2是：先计算A方向+1，再计算B方向的+1，<br>另一个2是：先计算B方向+1，再计算A方向的+1，<br>这岂不是加法交换律吗，先计算哪个结果不都一样吗？那(mo,m)不应该是(3,3,x)吗？<br>（疑问二）第三个值的疑问<br>(mo,m)=(1,3,2) <br>我的理解是：<br>第一个值1 表示 m在自己后面直接插入 o 只花费1步到 mo 对吗；<br>第二个值3 表示 m先删除m自己，花费了1步，再从原点走到mo花费2步，一共是3 对吗；<br>第三个值2：没看懂，是替换吗，表示把m替换为m，把后面的空值替换为o吗？不明白！~<br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505048,"discussion_content":"第一个问题，看上去mo,m和m,mo的情况应该一直，但是由于这里的mo产生的方式不同，所以会导致不是简单的(3,3,x)\n\n第二个问题，你可以参照第9章最后表格的推导，尝试填写表格中的值，就能明白其中的道理了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599713842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1989445,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/45/a3fff72c.jpg","nickname":"Geek_457c8a","note":"","ucode":"62EDD7C6A20DCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305884,"discussion_content":"可以加个好友，一起讨论学习吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600102810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1986708,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKT9Tk01eiaQ9aAhszthzGm6lwruRWPXia1YYFozctrdRvKg0Usp8NbwuKBApwD0D6Fty2tib3RdtFJg/132","nickname":"欧阳洲","note":"","ucode":"94606A6315F2BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1989445,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5b/45/a3fff72c.jpg","nickname":"Geek_457c8a","note":"","ucode":"62EDD7C6A20DCE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306083,"discussion_content":"好的呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600164586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305884,"ip_address":""},"score":306083,"extra":""}]}]},{"had_liked":false,"id":229765,"user_name":"木叶","can_delete":false,"product_type":"c1","uid":2035530,"ip_address":"","ucode":"D4330399444F72","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0f/4a/b74386b2.jpg","comment_is_top":false,"comment_ctime":1593140841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593140841","product_id":100021201,"comment_content":"<br># -*- coding: utf-8 -*-<br>def _min_num(num, _list):<br>    sorts = _list<br>    i = len(sorts) - 1<br>    if _list == []: return -1<br>    if num % sorts[i] == 0: <br>        print &#39;## &#39;,sorts[i] ,&#39; * &#39;,num&#47;sorts[i]<br>        return num&#47;sorts[i] <br>    elif num&#47;sorts[i] &gt;= 0:                                 ## num&#47;sorts[i] == 0, it is ok ``<br>        _num = _min_num(num % sorts[i], _list[:i])<br>        if _num == -1:                              <br>            for j in xrange((num&#47;sorts[i]-1),-1,-1):        ## like 22 = 7*2 + 3*2 + 2，  but when 22 = 7*3 ,it returns -1.<br>                _num2 =  _min_num((num - sorts[i] * j), _list[:i])<br>                if _num2 &gt; 0: <br>                    print &#39;## &#39;,sorts[i] ,&#39; * &#39;,j<br>                    return _num2 + j<br>            return -1                                       ## each of all failed.  <br>        else:<br>            print &#39;## &#39;,sorts[i] ,&#39; * &#39;,num&#47;sorts[i]<br>            return _num + num&#47;sorts[i] <br>    else:<br>        pass<br><br><br><br>sorts = [2,3,7,13]<br>print _min_num(216,sorts)  <br>&quot;&quot;&quot;<br>PS C:\\Users\\math&gt; python .\\test.py<br>##  2  *  1<br>##  3  *  2<br>##  7  *  0<br>##  13  *  16<br>19<br>&quot;&quot;&quot; ","like_count":0},{"had_liked":false,"id":229618,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1593075557,"is_pvip":false,"replies":[{"id":"85067","content":"能具体说一下你是如何使用二进制表示文本的？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1593404109,"ip_address":"","comment_id":229618,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1593075557","product_id":100021201,"comment_content":"关于编辑距离算法的局限性只适用于拉丁语系的文本<br>我突然想起之前课程提到的异或操作<br>因为计算机代码本质是一串01数字，那么编辑距离是否可以用异或来表示？因为两个不同的文本用二进制表示之后，异或的结果就是它们距离，是否可以这样理解？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499565,"discussion_content":"能具体说一下你是如何使用二进制表示文本的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593404109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046920,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","nickname":"阳仔","note":"","ucode":"79F73D85EDF3E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287243,"discussion_content":"对字符进行01编码之后再进行逻辑异或操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593404398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227128,"user_name":"夏天吃西瓜","can_delete":false,"product_type":"c1","uid":1336957,"ip_address":"","ucode":"4C3B07C093ED03","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/7d/97d9ad57.jpg","comment_is_top":false,"comment_ctime":1592294223,"is_pvip":false,"replies":[{"id":"84225","content":"我查一下，可能是笔误，也许应该是(2,2,0)","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1592669916,"ip_address":"","comment_id":227128,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592294223","product_id":100021201,"comment_content":"横o纵o时为什么是min(2,3,0) ? 老师能不能给讲解一下","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498506,"discussion_content":"我查一下，可能是笔误，也许应该是(2,2,0)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592669916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225151,"user_name":"浪子大侠","can_delete":false,"product_type":"c1","uid":1149371,"ip_address":"","ucode":"9E36F43E8F7584","user_header":"https://static001.geekbang.org/account/avatar/00/11/89/bb/7f94ed1d.jpg","comment_is_top":false,"comment_ctime":1591667586,"is_pvip":false,"replies":[{"id":"83386","content":"你好，你是说应该为min(2,3,0)，对吧？3是针对哪种情况的编辑距离？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1592101731,"ip_address":"","comment_id":225151,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591667586","product_id":100021201,"comment_content":"黄sir，这边第一张结果状态表中坐标（横o， 纵o）地方的min（2，2，0）=0，应该写错应该是min（2，3，0）= 0<br>描述应该是<br>三种情况：<br>1.插入字符：B字符串为mo的时候，A（m）增加一个字符变为mo，编辑距离增加1，整体编辑距离为2<br>2.插入字符：A字符串为mo的时候，B（m）增加一个字符变为mo，编辑距离增加1， 整体编辑距离为2<br>3.替换字符，由于o和o相同，编辑距离增加0， 整体编辑距离为0<br>以上三种编辑距离分别为2，2，0，最小值为0，所以至此编辑距离为0","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497755,"discussion_content":"你好，你是说应该为min(2,3,0)，对吧？3是针对哪种情况的编辑距离？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592101731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205029,"user_name":"李家大白菜","can_delete":false,"product_type":"c1","uid":1686575,"ip_address":"","ucode":"0D0CCEA6C694DC","user_header":"https://static001.geekbang.org/account/avatar/00/19/bc/2f/8e782f0f.jpg","comment_is_top":false,"comment_ctime":1586510948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586510948","product_id":100021201,"comment_content":"package BasicThinking;<br><br><br>public class Lesson9_DP {<br>    public static void main(String[] args) {<br>&#47;&#47;        String str1 = &quot;mitcmu&quot;;<br>&#47;&#47;        String str2 = &quot;mtacnu&quot;;<br>        String str1 = &quot;mouuse&quot;;<br>        String str2 = &quot;mouse&quot;;<br>        char[] a = str1.toCharArray();<br>        char[] b = str2.toCharArray();<br>        int n = a.length;<br>        int m = b.length;<br>        int minDist = lwstDP(a,n,b,m);<br>        System.out.println(&quot;最小编辑距离为：&quot;+minDist);<br>    }<br><br>    public static int lwstDP(char[] a, int n, char[] b, int m) {<br>        &#47;&#47;设置一个二维数组存储最小编辑距离<br>        int[][] minDist = new int[n][m];<br>        &#47;&#47;初始化第0行:a[0..0]与b[0..j]的编辑距离<br>        for (int j = 0; j &lt; m; j++) {<br>            if (a[0] == b[j]) {<br>                minDist[0][j] = j;<br>            } else if (j != 0) {<br>                minDist[0][j] = minDist[0][j - 1] + 1;<br>            } else {<br>                minDist[0][j] = 1;<br>            }<br>        }<br>        &#47;&#47; 初始化第0列:a[0..i]与b[0..0]的编辑距离<br>        for (int i = 0; i &lt; n; i++) {<br>            if (a[i] == b[0]) {<br>                minDist[i][0] = i;<br>            } else if (i != 0) {<br>                minDist[i][0] = minDist[i - 1][0] + 1;<br>            } else {<br>                minDist[i][0] = 1;<br>            }<br>        }<br>        &#47;&#47;状态转移方程式<br>        for (int i = 1; i &lt; n; i++) {<br>            for (int j = 1; j &lt; m; j++) {<br>                if (a[i] == b[j]) {<br>                    int min= Math.min(minDist[i - 1][j] + 1, minDist[i][j - 1] + 1);<br>                    minDist[i][j] = Math.min(min,minDist[i-1][j-1]);<br>                } else{<br>                    int min= Math.min(minDist[i - 1][j] + 1, minDist[i][j - 1] + 1);<br>                    minDist[i][j] = Math.min(min,minDist[i-1][j-1]+1);<br>                }<br>            }<br>        }<br>        return minDist[n-1][m-1];<br>    }<br>}","like_count":0},{"had_liked":false,"id":201777,"user_name":"海晏","can_delete":false,"product_type":"c1","uid":1915554,"ip_address":"","ucode":"38E998D2036115","user_header":"https://static001.geekbang.org/account/avatar/00/1d/3a/a2/d9f736c6.jpg","comment_is_top":false,"comment_ctime":1585835872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585835872","product_id":100021201,"comment_content":"先用余数解法凑个数（python），但我要练的是动态规划啊😭<br>#求用2元、3元、7元组成100元货币数量最少的方案<br><br>def min_distance (number,combin = [],distance = 0):<br>    if number &lt; 2:<br>        return 0<br>    else:    <br>        if number%7 == 0:<br>            distance = number&#47;&#47;7<br>            combin = [7]*distance<br>        elif number%7 == 1:<br>            distance = number&#47;&#47;7-1<br>            combin = [7]*distance<br>            combin.append(3)<br>            combin.append(3)<br>            combin.append(2)<br>            distance = distance + 3<br>        elif number%7 == 2:<br>            distance = number&#47;&#47;7<br>            combin = [7]*distance<br>            combin.append(2)<br>            distance = distance +1<br>        elif number%7 == 3:<br>            distance = number&#47;&#47;7<br>            combin = [7]*distance<br>            combin.append(3)<br>            distance = distance +1<br>        elif number%7 == 4:<br>            distance = number&#47;&#47;7<br>            combin = [7]*distance<br>            combin.append(2)<br>            combin.append(2)<br>            distance = distance +2<br>        elif number%7 == 5:<br>            distance = number&#47;&#47;7<br>            combin = [7]*distance<br>            combin.append(3)<br>            combin.append(2)<br>            distance = distance +2<br>        else:<br>            distance = number&#47;&#47;7<br>            combin = [7]*distance<br>            combin.append(3)<br>            combin.append(3)<br>            distance = distance +2<br>    <br>    print(combin,&quot;最少需要货币%d张&quot;%(distance))<br><br>min_distance(100)","like_count":0},{"had_liked":false,"id":187780,"user_name":"喻茂","can_delete":false,"product_type":"c1","uid":1318661,"ip_address":"","ucode":"C8BD8086A17365","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/05/8a06692e.jpg","comment_is_top":false,"comment_ctime":1584240527,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584240527","product_id":100021201,"comment_content":"php示例<br>&lt;?php<br><br>&#47;**<br> *<br> *&#47;<br>function getMinNotes($totalMoney,$denomination) {<br>\tif ($totalMoney == 0) {<br>\t\treturn [&#39;times&#39;=&gt;0,&#39;choice&#39;=&gt;[]];<br>\t}<br>\t$choiceInfo = []; &#47;&#47; 保存选择后信息<br>\t<br>\tforeach ($denomination as $denominationOne) {<br>\t\tif ($totalMoney-$denominationOne &gt;= 0) {<br>\t\t\t<br>\t\t\t$lastGetMinNotesInfo = getMinNotes($totalMoney-$denominationOne,$denomination);<br>\t\t\t$lastGetMinNotesInfoTimes = $lastGetMinNotesInfo[&#39;times&#39;]; &#47;&#47; 上次选择使用的面额数量<br>\t\t\t$lastGetMinNotesInfoChoice = $lastGetMinNotesInfo[&#39;choice&#39;]; &#47;&#47; 上次选择具体包含了哪些面额<br>\t\t\tif ($lastGetMinNotesInfoTimes &gt;= 0) {<br>\t\t\t\t$choiceInfo[$denominationOne] = [&#39;times&#39;=&gt;$lastGetMinNotesInfoTimes+1,<br>\t\t\t\t&#39;choice&#39;=&gt;array_merge($lastGetMinNotesInfoChoice,[$denominationOne])];<br>\t\t\t}<br>\t\t\t<br>\t\t}<br>\t}<br>\tif (empty($choiceInfo)) { &#47;&#47; 无解<br>\t\treturn [&#39;times&#39;=&gt;-1,&#39;choice&#39;=&gt;[]];<br>\t} <br>\t$minTimesKey = 0; &#47;&#47; 记录选择次数的$key<br>\t$minTimes = -1;<br>\tforeach ($choiceInfo as $choiceKey=&gt;$choiceInfoOne) {<br>\t\tif ($minTimes == -1 || $minTimes &gt; $choiceInfoOne[&#39;times&#39;]) {<br>\t\t\t$minTimes = $choiceInfoOne[&#39;times&#39;];<br>\t\t\t$minTimesKey = $choiceKey;<br>\t\t} <br>\t}<br>\t<br>\treturn [&#39;times&#39;=&gt;$minTimes,&#39;choice&#39;=&gt;$choiceInfo[$minTimesKey][&#39;choice&#39;]];<br>}<br><br>$totalMoney = 10;<br>$denomination = [2,3,7];<br>$choiceInfo =  getMinNotes($totalMoney,$denomination);<br>if ($choiceInfo[&#39;times&#39;] == -1) {<br>\techo &#39;无解&#39;;<br>} else {<br>\techo &quot;纸币总张数为:{$choiceInfo[&#39;times&#39;]},具体为:&quot;.join(&#39;,&#39;,$choiceInfo[&#39;choice&#39;]);<br>}<br>","like_count":0},{"had_liked":false,"id":184224,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1237557,"ip_address":"","ucode":"72EB0F3E195269","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/35/5d015881.jpg","comment_is_top":false,"comment_ctime":1583250072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583250072","product_id":100021201,"comment_content":"def editDistance(s1, s2):<br>    def min_(a,b,c):<br>        if a&lt;b: return min(a,c)<br>        else: return min(b,c)<br>    m, n = len(s1), len(s2)<br>    grid = [ [0] * (n+1) for _ in range(m+1)]<br>    grid[0] = list(range(m+1))<br>    for idx,line in enumerate(grid):<br>        line[0] = idx<br>    for i in range(1,m+1):<br>        for j in range(1,n+1):<br>            if s1[i-1] == s2[j-1]:<br>                v1 = grid[i-1][j-1]<br>            else: v1 = grid[i-1][j-1] + 1<br>            v2 = grid[i-1][j] + 1<br>            v3 = grid[i][j-1] + 1<br>            grid[i][j] = min_(v1,v3,v2)<br>    print(grid[m][n])<br>editDistance(&#39;mouuse&#39;,&#39;mousel&#39;)","like_count":0},{"had_liked":false,"id":174274,"user_name":"Me.Gao","can_delete":false,"product_type":"c1","uid":1815189,"ip_address":"","ucode":"CA7696DAB95212","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b2/95/349aef32.jpg","comment_is_top":false,"comment_ctime":1580115741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580115741","product_id":100021201,"comment_content":"#Python Version<br>def moneyCount(moneySum):<br>    &quot;&quot;&quot;给定总金额和可能的钱币面额(2, 3, 7)，找出钱币数量最少的奖赏方式<br>    <br>    moneySum: 给定的总金额<br>    return: 最少的钱币数量<br>    &quot;&quot;&quot;<br>    count = list(range(moneySum + 1))<br>    count[0] = 0<br>    count[2] = 1<br>    count[3] = 1<br>    count[4] = 2<br>    count[5] = 2<br>    count[6] = 2<br>    count[7] = 1<br>    count[8] = 3<br>    for i in range(9, moneySum + 1):<br>        first_append = count[i - 2] + 1<br>        second_append = count[i - 3] + 1<br>        third_append = count[i - 7] + 1<br>        count[i] = min(first_append, second_append, third_append)<br>        print(i, count[i])<br>    return count[moneySum]<br><br>if __name__ == &#39;__main__&#39;:<br>    print(moneyCount(100))","like_count":0},{"had_liked":false,"id":167923,"user_name":"万丈尘","can_delete":false,"product_type":"c1","uid":1422351,"ip_address":"","ucode":"546FF45281EF6B","user_header":"https://static001.geekbang.org/account/avatar/00/15/b4/0f/84e32679.jpg","comment_is_top":false,"comment_ctime":1577963854,"is_pvip":false,"replies":[{"id":"65417","content":"感谢支持","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1578184596,"ip_address":"","comment_id":167923,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577963854","product_id":100021201,"comment_content":"之前那个编辑距离的表格太隐晦了，很难看懂，这节这个表格很好，还有公式也很好理解，点赞👍","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480055,"discussion_content":"感谢支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578184596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160729,"user_name":"半湖思絮","can_delete":false,"product_type":"c1","uid":1236746,"ip_address":"","ucode":"ECE58303541E59","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/0a/4084d5fa.jpg","comment_is_top":false,"comment_ctime":1576026633,"is_pvip":false,"replies":[{"id":"61367","content":"这是很好的改进👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1576087482,"ip_address":"","comment_id":160729,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576026633","product_id":100021201,"comment_content":"作业中，如果用递归确实很慢，在每次递归到最小值时，都重复计算，把递归方法增加了Map保存了已算变量，求解速度会大幅提升<br>```<br>public class Lesson10_1 {<br>    private static final int[] coins = {2, 5, 9};<br><br>    private static Map&lt;Integer, Integer&gt; hasCount = new HashMap&lt;&gt;();<br><br>    public static Integer getCount(int total, int[] coins) {<br>        if (hasCount.containsKey(total)) {<br>            return hasCount.get(total);<br>        }<br>        if (total &lt; 0) {<br>            return null;<br>        } else if (total == 0) {<br>            return 0;<br>        } else {<br>            int length = coins.length;<br>            Integer[] min = new Integer[length];<br>            for (int i = 0; i &lt; length; i++) {<br>                Integer tmpResult = getCount(total - coins[i], coins);<br>                min[i] = tmpResult != null ? (tmpResult + 1) : null;<br>            }<br>            List&lt;Integer&gt; resultList = Arrays.stream(min).filter(e -&gt; e != null).collect(Collectors.toList());<br>            Integer result = resultList.size() &gt; 0 ? resultList.stream().mapToInt(e -&gt; e).min().getAsInt() : null;<br>            hasCount.put(total, result);<br>            return result;<br>        }<br>    }<br><br>    public static void main(String[] args) {<br>        Integer count = getCount(5, coins);<br>        System.out.println(count);<br>    }<br>}<br>```","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477461,"discussion_content":"这是很好的改进👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576087482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159062,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1575528963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575528963","product_id":100021201,"comment_content":"int coin change(int[] coins, int coinNum, int account) {<br>vector&lt;int&gt; dp = vector&lt;int&gt;(account+1, account+1);<br>dp[0] = 0;<br>for (int i = 1; i&lt;=account;i++) {<br>for (int j=0; j&lt;coinNum; j++) {<br>if(i-coins[j] &gt;=0) dp[i]= min(dp[i-coins[j]], dp[i]);<br>}<br>}<br>return dp[account] != account+1 ? dp[account] : -1;<br>}","like_count":0},{"had_liked":false,"id":156552,"user_name":"ricarduuu","can_delete":false,"product_type":"c1","uid":1622899,"ip_address":"","ucode":"F663CF156764C0","user_header":"https://static001.geekbang.org/account/avatar/00/18/c3/73/1c8bf894.jpg","comment_is_top":false,"comment_ctime":1574910709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574910709","product_id":100021201,"comment_content":"js循环 重点是判断条件，将所有的不可能的组合事先规避掉，counts取值为0，在的判断最小counts的时候去除为0的值，再取最小值<br><br><br>       function countMin(total, currency) {<br>        let totalArr = new Array(total+1).fill(0);<br>        let tempCounts = new Array(currency.length).fill(0);<br>        for (let i=1; i &lt; totalArr.length; i++) {<br>          for (let j=0; j &lt; currency.length; j++) {<br>            if(i - currency[j] &gt;= 0) {<br>              &#47;&#47; 总额大于当前钱币的面值的情况下，去修改 对应的钱币的数量，因为是从小到大，所以肯定数量会从1开始<br>              tempCounts[j] = <br>              (i - currency[j] === 0 || i - currency[j] &gt;= Math.min(...currency))<br>              ? totalArr[i - currency[j]] + 1 : 0;<br>              &#47;&#47; 为什么每次都+1呢， totalArr[i - currency[j]]代表的是上一个金额总和所需钱币的数量，+当前面值 （1张）<br>            }<br>          }<br>          &#47;&#47; 在tempCounts中0的组合是不存在的，比大小的时候要排除掉<br>          &#47;&#47; 排除了0的干扰  但是还存在 totalArr[8 - 7]  这样的不符合常理的组合<br>          let filterTotalArr = tempCounts.filter(x=&gt; x!==0 );<br>          if(filterTotalArr.length &lt;= 0){<br>            totalArr[i] = 0;<br>          }else {<br>            totalArr[i] = Math.min(...filterTotalArr);<br>          }<br>         <br>            console.log(&#39;----&#39;, tempCounts, tempCounts.filter(x=&gt; x!==0 ), totalArr[i], i );<br>      }<br><br><br><br>      &#47;&#47; 这里为什么要+1呢, 上面的i总是比 total小1，这个答案好像不怎么合理，因为你把totalArr 初始化为ew Array(total+1).fill(0);后结果不对<br>      &#47;&#47; <br>      return totalArr[totalArr.length - 1]<br>    }<br><br>","like_count":0},{"had_liked":false,"id":155622,"user_name":"总统老唐","can_delete":false,"product_type":"c1","uid":1490070,"ip_address":"","ucode":"F2CC66E5BB4871","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/96/c679bb3d.jpg","comment_is_top":false,"comment_ctime":1574729647,"is_pvip":false,"replies":[{"id":"60340","content":"可以的，就是原路径倒退","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1575131245,"ip_address":"","comment_id":155622,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574729647","product_id":100021201,"comment_content":"有个小问题，假设最后求得的编辑距离是5，可以反推怎样通过5次编辑，把字符串A变成字符串B吗？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475809,"discussion_content":"可以的，就是原路径倒退","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575131245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154724,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1574521492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574521492","product_id":100021201,"comment_content":"用Python写了一个程序，代码如下：<br># 钱币分解<br># 功能：根据固定钱币种类，对于固定金额，分解出最少的钱币数量<br><br># 分解函数，参数amount是待分解的固定金额<br>def splitCurrency(amount):<br>#BEGIN<br><br>    # 最少的钱币数<br>    mincurrency_num = None<br><br>    # 分解后的最少钱币集合<br>    minresult = None<br><br>    for currency in currencyset:<br>        nextamount = amount - currency<br><br>        if nextamount &lt; 0:<br>            continue<br><br>        result = [currency]<br><br>        if nextamount == 0:<br>            return result<br>        else:<br>            nextresult = splitCurrency(nextamount)<br><br>            if nextresult is None:<br>                continue<br><br>            result += nextresult<br><br>        if mincurrency_num is None or len(result) &lt; mincurrency_num:<br>            mincurrency_num = len(result)<br>            minresult = result<br><br>    return minresult<br><br>#END<br><br>if __name__ == &#39;__main__&#39;:<br><br>    # 钱币种类<br>    currencyset = (2,3,7)<br><br>    # 分解固定金额所需要的最少钱币数<br>    amount = int(input(&#39;请输入固定金额：&#39;))<br>    result = splitCurrency(amount)<br><br>    if result is None:<br>        print(&#39;无解&#39;)<br>    else:<br>        print(&#39;{} = {}&#39;.format(str(amount), &#39;+&#39;.join([str(x) for x in result])))","like_count":0},{"had_liked":false,"id":139302,"user_name":"Yang","can_delete":false,"product_type":"c1","uid":1186879,"ip_address":"","ucode":"6335082702CF34","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/3f/eabd0cb1.jpg","comment_is_top":false,"comment_ctime":1570606785,"is_pvip":false,"replies":[{"id":"53760","content":"感谢支持","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1570638950,"ip_address":"","comment_id":139302,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570606785","product_id":100021201,"comment_content":"“函数 r(i, j) 表示替换时产生的编辑距离”，有些题目中认为替换是一次删除一次增加，所以是 2，有些题目又会任务是 1，老师这个地方写的很良心~","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469887,"discussion_content":"感谢支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570638950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137672,"user_name":"MC","can_delete":false,"product_type":"c1","uid":1004183,"ip_address":"","ucode":"AA0035C9C43516","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/97/4593cda8.jpg","comment_is_top":false,"comment_ctime":1569817296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569817296","product_id":100021201,"comment_content":"Golang 版 （为了提升查找效率，先把面额从大到小排列）：<br><br>package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;sort&quot;<br>)<br><br>func main() {<br>\tnum, notes := leastNotes(100, []int{2, 3, 7})<br>\tfmt.Println(&quot;Least number of notes required:&quot;, num)<br>\tfmt.Printf(&quot;They are: %v\\n&quot;, notes)<br>}<br><br>func leastNotes(amount int, options []int) (number int, notes []int) {<br>\t&#47;&#47; Prefer high denomination notes<br>\tsort.Sort(sort.Reverse(sort.IntSlice(options)))<br><br>\tnotes = search(amount, options)<br>\tnumber = len(notes)<br>\treturn<br>}<br><br>func search(amount int, sortedOptions []int) []int {<br>\tvar result []int<br>\tfor _, opt := range sortedOptions {<br>\t\tif amount &lt; opt {<br>\t\t\treturn nil<br>\t\t}<br><br>\t\tif amount == opt {<br>\t\t\treturn []int{opt}<br>\t\t}<br><br>\t\tnotes := search(amount-opt, sortedOptions)<br><br>\t\t&#47;&#47; No result<br>\t\tif notes == nil {<br>\t\t\tcontinue<br>\t\t}<br><br>\t\tnotes = append(notes, opt)<br>\t\tif result == nil || len(notes) &lt; len(result) {<br>\t\t\tresult = notes<br><br>\t\t\t&#47;&#47; As we try high denomination notes first, whenever<br>\t\t\t&#47;&#47; we find a result, no need to try other options which<br>\t\t\t&#47;&#47; have low denomination.<br>\t\t\tbreak<br>\t\t}<br>\t}<br><br>\treturn result<br>}","like_count":0},{"had_liked":false,"id":126560,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1566424354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566424354","product_id":100021201,"comment_content":"动态规划法是求最优值（极限值）而非列举所有值的一种常用方法，核心是状态转移方程。有了状态转移方程就可以从一些基本，简单容易计算的状态推导出更为复杂的状态，最终得出要求的状态，这个过程会耗费一些内存。实际中运用的时候要识别要求的状态可以由哪些相对简单一点的状态，通过加减乘除或者求最大最小等方法得出，而这些简单一点的状态和要求的状态结构相同但规模较小，这样整个递归过程就建立起来，最终我们只需要一些平凡的起点状态，通过这个递归过程算得最终要求的状态。","like_count":0},{"had_liked":false,"id":114177,"user_name":"Jan","can_delete":false,"product_type":"c1","uid":1542881,"ip_address":"","ucode":"375E1FC680980E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8a/e1/3ad44478.jpg","comment_is_top":false,"comment_ctime":1563246187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563246187","product_id":100021201,"comment_content":"  @Test<br>    public void coinTest() {<br>        int[] valArr = {2, 3, 7};<br>        int[] countArr = new int[101];<br>        boolean isExist = false;<br>        for (int i = 1; i &lt; 101; i++) {<br>            int minCount = 0;<br>            for (int j : valArr) {<br>                if (i &lt; j) continue;<br>                if (isExist &amp;&amp; countArr[i - j] == 0 &amp;&amp; i % j != 0) continue;<br>                int v = countArr[i - j] + 1;<br>                if (v &lt; minCount || minCount == 0)<br>                    minCount = v;<br>            }<br>            if (minCount &gt; 0)<br>                isExist = true;<br>            countArr[i] = minCount;<br>        }<br>        System.out.println(&quot;result:&quot; + countArr[100]);<br>    }","like_count":0},{"had_liked":false,"id":104270,"user_name":"挖矿的小戈","can_delete":false,"product_type":"c1","uid":1503917,"ip_address":"","ucode":"2078A85139BD5D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/9chAb6SjxFiapSeicsAsGqzziaNlhX9d5aEt8Z0gUNsZJ9dICaDHqAypGvjv4Bx3PryHnj7OFnOXFOp7Ik21CVXEA/132","comment_is_top":false,"comment_ctime":1560702839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560702839","product_id":100021201,"comment_content":"public class DynamicCoin {<br>    &#47;**<br>     * 最少硬币找零问题<br>     *<br>     * @param coinValue ：不同币值的数组<br>     * @param coinKinds ：数组的大小<br>     * @param money     ：需要找零的金钱总额<br>     *&#47;<br>    public static void getMinCoinCounts(int coinValue[], int coinKinds, int money) {<br><br>        int[] coinUsed = new int[money + 1];<br><br>        coinUsed[1] = 1;<br><br>        for (int i = 1; i &lt;= money; i++) {<br>            coinUsed[i] = i;<br>            for (int j = 1; j &lt;= coinKinds; j++) {<br>                if (coinValue[j - 1] &lt;= i) {<br>                    int temp = coinUsed[i - coinValue[j - 1]] + 1;<br>                    if (temp &lt; coinUsed[i]) {<br>                        coinUsed[i] = temp;<br>                    }<br>                }<br>            }<br>            System.out.println(i + &quot;最小硬币数：&quot; + coinUsed[i]);<br>        }<br><br>    }<br><br>    public static void main(String[] args) {<br>        int[] coinValue = new int[]{3, 2, 7};<br>        int money = 100;<br>        DynamicCoin.getMinCoinCounts(coinValue, coinValue.length, money);<br>    }<br>}","like_count":0},{"had_liked":false,"id":103319,"user_name":"Geek_0dc445","can_delete":false,"product_type":"c1","uid":1119907,"ip_address":"","ucode":"FE747E43F0098F","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/a3/03ac92d0.jpg","comment_is_top":false,"comment_ctime":1560413741,"is_pvip":false,"replies":[{"id":"37443","content":"替换操作是有的，就是表格中的“对角线”这条路径，我上面的解释是阐述了所有可能的“路径”，比如说从字符串a变化到字符串b，其实有很多种操作方法，有替换，也有删除再插入，当然，根据我们目前的定义，替换的距离（或者理解为成本）为1，而删除再增加的距离为2，所以替换这种操作肯定更优。动态规划并不能帮我们直接找到最优，还是列出可能的几种方案，然后取一个最优。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1560443330,"ip_address":"","comment_id":103319,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560413741","product_id":100021201,"comment_content":"作者回复: 是min(3, 1, 2)对吧，这个是mo和m的比较，3表示增加一个m再增加一个o，再删掉一个o，编辑距离是2+1=3。1表示两个字符串都是m，其中一个再增加一个o，编辑距离是1。2表示一个m增加o，一个从空集到m，编辑距离是2。你可以顺着第9讲最后的表格来推导。<br>老师你的这个回复从我的理解都是插入操作或者删除操作，没有替换操作，按照前一节的说法（插入，插入，替换）那怎么也应当是（3,1,1（替换只有0,1））所以针对这个就有点模糊了，如果按照网上解释的编辑距离，又得不到老师给的最后的推导表，请老师解惑。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453830,"discussion_content":"替换操作是有的，就是表格中的“对角线”这条路径，我上面的解释是阐述了所有可能的“路径”，比如说从字符串a变化到字符串b，其实有很多种操作方法，有替换，也有删除再插入，当然，根据我们目前的定义，替换的距离（或者理解为成本）为1，而删除再增加的距离为2，所以替换这种操作肯定更优。动态规划并不能帮我们直接找到最优，还是列出可能的几种方案，然后取一个最优。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560443330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102383,"user_name":"Geek_0dc445","can_delete":false,"product_type":"c1","uid":1119907,"ip_address":"","ucode":"FE747E43F0098F","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/a3/03ac92d0.jpg","comment_is_top":false,"comment_ctime":1560214716,"is_pvip":false,"replies":[{"id":"37127","content":"嗯，顺序和前面需要对应起来","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1560269882,"ip_address":"","comment_id":102383,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560214716","product_id":100021201,"comment_content":"这里面求最小值的 min 函数里有三个参数，分别对应我们上节是：替换、插入和删除字符<br>老师这三个参数描述顺序是不是错了，应当是，插入，删除，替换吧","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453390,"discussion_content":"嗯，顺序和前面需要对应起来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560269882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100091,"user_name":"lkj","can_delete":false,"product_type":"c1","uid":1515939,"ip_address":"","ucode":"E6FE96407AF620","user_header":"https://static001.geekbang.org/account/avatar/00/17/21/a3/06291d0c.jpg","comment_is_top":false,"comment_ctime":1559442360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559442360","product_id":100021201,"comment_content":"```<br>import numpy as np<br><br>def getStrDistance(a, b):<br>\tif (not a and not b):<br>\t\treturn -1<br><br>\tlen_a = len(a) + 1<br>\tlen_b = len(b) + 1<br><br>\td = np.zeros((len_a, len_b)).astype(&quot;int32&quot;)<br><br>\tfor i in range(len_a):<br>\t\td[i, 0] = i<br><br>\tfor j in range(len_b):<br>\t\td[0, j] = j<br><br>\tfor i in range(1, len_a):<br>\t\tfor j in range(1, len_b):<br>\t\t\tr = 0<br>\t\t\tif a[i-1] != b[j-1]:<br>\t\t\t\tr = 1<br><br>\t\t\tprint(d[i-1][j], d[i, j-1], d[i-1, j-1] + r)<br>\t\t\td[i][j] = min(d[i-1][j] + 1, d[i, j-1] + 1, d[i-1, j-1] + r)<br><br>\treturn d<br><br><br><br>print(getStrDistance(&quot;mouuse&quot;, &#39;mouse&#39;))<br>```<br>结果：<br>[[0 1 2 3 4 5]<br> [1 0 1 2 3 4]<br> [2 1 0 1 2 3]<br> [3 2 1 0 1 2]<br> [4 3 2 1 1 2]<br> [5 4 3 2 1 2]<br> [6 5 4 3 2 1]]<br><br>结果和前面的表格一致","like_count":0},{"had_liked":false,"id":98609,"user_name":"愤怒的虾干","can_delete":false,"product_type":"c1","uid":1266043,"ip_address":"","ucode":"CEBD1B2BE7BCEE","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/7b/191a2112.jpg","comment_is_top":false,"comment_ctime":1559040135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559040135","product_id":100021201,"comment_content":"    public static void main(String[] doYourBest) {<br>        &#47;&#47; 币种（约定最小币值放最前面，省去程序中的比较）<br>        int[] money = {2, 3, 7};<br>        &#47;&#47; 需要兑换的钱<br>        int sum = 100;<br>        &#47;&#47; 动态规划记录金额对应的币数<br>        int[] dynamic = new int[sum + 1];<br>        &#47;&#47; 动态规划记录对应币值<br>        int[] dyMoney = new int[sum + 1];<br>        countNum(money, sum, dynamic, dyMoney);<br>        System.out.println(&quot;总共：&quot; + dynamic[sum]);<br>        System.out.println(&quot;步骤：&quot; + print(sum, dyMoney));<br>    }<br><br>    &#47;**<br>     * 打印币值<br>     *&#47;<br>    private static String print(int sum, int[] dyMoney) {<br>        StringBuilder a = new StringBuilder();<br>        for (int b = sum; b &gt; 0; b -= dyMoney[b]) {<br>            a.append(dyMoney[b]).append(&quot;,&quot;);<br>        }<br>        return a.toString();<br>    }<br><br>    &#47;**<br>     * 计算金额sum所需最少纸币数目，存放于数组中<br>     *&#47;<br>    private static void countNum(int[] money, int sum, int[] dys, int[] dysMoney){<br>        &#47;&#47; 输入的<br>        if (sum &lt; money[0]) {<br>            return;<br>        }<br>        &#47;&#47; 初始条件<br>        for (int aMoney : money) {<br>            if (sum == aMoney) {<br>                dys[sum] = 1;<br>                dysMoney[sum] = sum;<br>                return;<br>            }<br>        }<br>        for (int i = 0; i &lt; money.length; i++) {<br>            dynamic(money, sum, dys, dysMoney, i);<br>        }<br>    }<br><br>    &#47;**<br>     * 动态规划计算当前最优解<br>     *&#47;<br>    private static void dynamic(int[] money, int sum, int[] dys, int[] dysMoney, int index){<br>        int penny = money[index];<br>        int nextSum = sum - penny;<br>        if (nextSum &gt;= money[0]) {<br>            if (dys[nextSum] == 0) {<br>                countNum(money, nextSum, dys, dysMoney);<br>            }<br>            if (dys[sum] == 0) {<br>                dys[sum] = dys[nextSum] + 1;<br>                dysMoney[sum] = money[index];<br>            } else {<br>                dysMoney[sum] = dys[sum] &gt; dys[nextSum] + 1 ? money[index] : dysMoney[sum];<br>                dys[sum] = Math.min(dys[sum], dys[nextSum] + 1);<br>            }<br>        }<br>    }","like_count":0},{"had_liked":false,"id":97789,"user_name":"sxpujs","can_delete":false,"product_type":"c1","uid":1503861,"ip_address":"","ucode":"F81931EC883D7C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yYzf0yonEqKny7dHlvLibc7OrQJ6HszX3VP1fciaMD3hITFySbayL9vULch5hvicoqGA2EBzcPicss2ciaB7ibodgQ6w/132","comment_is_top":false,"comment_ctime":1558774579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558774579","product_id":100021201,"comment_content":"package demo;<br><br>import java.util.Arrays;<br><br>public class Lesson10_2 {<br><br>    public static void main(String[] args) {<br>        int target = 101;<br>        int[] coins = {3, 2, 7, 10};<br>        System.out.println(getLeastCoins(target, coins));<br>    }<br><br>    public static int getLeastCoins(int target, int[] coins) {<br>        Arrays.sort(coins);<br>        int[] targetList = new int[target];<br>        for (int i = 1; i &lt;= target; i++) {<br>            int minValue = Integer.MAX_VALUE;<br>            for (int coin : coins) {<br>                int result;<br>                if (i &lt; coin) {<br>                    result = Integer.MAX_VALUE;<br>                } else if (i - coin == 0) {<br>                    result = targetList[0] + 1;<br>                } else if (targetList[i - coin - 1] == 0) {<br>                    result = Integer.MAX_VALUE;<br>                } else {<br>                    result = targetList[i - coin - 1] + 1;<br>                }<br>                minValue = Math.min(minValue, result);<br>            }<br>            targetList[i-1] = (minValue == Integer.MAX_VALUE ? 0 : minValue);<br>        }<br>        return targetList[target-1];<br>    }<br>}<br>","like_count":0},{"had_liked":false,"id":95077,"user_name":"奔跑的蜗牛","can_delete":false,"product_type":"c1","uid":1384698,"ip_address":"","ucode":"C5277C80B423A0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK6Nic6V6iawbbIF1RRbRlwNmC0Cmt3LlQRAiaiayCibpplSDPXticVyOp97CEypEuQm2Iib7ZYCjrrlIgWQ/132","comment_is_top":false,"comment_ctime":1557966375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557966375","product_id":100021201,"comment_content":"老大 如果是第一行第三列呢？是+m+o+u-u-o吗？","like_count":0},{"had_liked":false,"id":94602,"user_name":"jt","can_delete":false,"product_type":"c1","uid":1470991,"ip_address":"","ucode":"A3E2CAE00CE10A","user_header":"https://static001.geekbang.org/account/avatar/00/16/72/0f/f05b06d0.jpg","comment_is_top":false,"comment_ctime":1557849333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557849333","product_id":100021201,"comment_content":"c的来一个。<br><br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br><br>int min_piece(int sum, int *value, int num)<br>{<br>    int *c, i, j, gap, tmp;<br><br>    c = malloc(sizeof(int) * (sum+1));<br>    c[0] = 0;<br>    for (i = 1; i &lt;= sum; i++) {<br>        c[i] = 0;<br>        for (j = 0; j &lt; num; j++) {<br>            gap = i - value[j];<br>            if (gap &lt; 0) {<br>                continue;       &#47;* 不存在 *&#47;<br>            } else if (gap == 0) {<br>                c[i] = 1;<br>            } else if (gap &lt; i) { &#47;* 不应该超过i *&#47;<br>                if (c[gap] &lt;= 0) { continue; }<br>                tmp = c[gap] + 1;<br>                c[i] = (c[i] == 0 || c[i] &gt; tmp) ? tmp : c[i];<br>            }<br>        }<br>        printf(&quot;-- %d: %d\\n&quot;, i, c[i]);<br>    }<br>    tmp = c[sum];<br>    free(c);<br>    return tmp;<br>}<br><br>int main(void)<br>{<br>    int sum = 30;               &#47;* 指定金额 *&#47;<br>    int value[] = {2,5,10};     &#47;* 可选面额 *&#47;<br><br>    printf(&quot;need %d piece of money for %d yuan.\\n&quot;, <br>           min_piece(sum, value, sizeof(value)&#47;sizeof(int)), sum);<br>    return 0;<br>}<br>","like_count":0},{"had_liked":false,"id":83496,"user_name":"You_can","can_delete":false,"product_type":"c1","uid":1319784,"ip_address":"","ucode":"A560E394D8DA97","user_header":"https://static001.geekbang.org/account/avatar/00/14/23/68/913df2e1.jpg","comment_is_top":false,"comment_ctime":1554626938,"is_pvip":false,"replies":[{"id":"30221","content":"假期间坚持交作业，赞一个","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1554649649,"ip_address":"","comment_id":83496,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554626938","product_id":100021201,"comment_content":"&#47;**<br> * 交作业<br>* @param moneyCnt 钱币总金额<br>* @param coinValue 钱币面额<br>* @return int<br> *&#47;<br>public static int getCoinChangeLeastCnt(int moneyCnt, int[] coinValue) {<br>        if (moneyCnt &lt;= 0) {<br>            return 0;<br>        }<br><br>        int[] cnt = new int[moneyCnt + 1];<br><br>        for (int i = 1; i &lt;= moneyCnt; i++) {<br>            int minCnt = moneyCnt, tempValue =moneyCnt;<br>            for (int value : coinValue) {<br>                if (value &gt; i) {<br>                    tempValue = moneyCnt;<br>                } else if (i - value &gt;= 0){<br>                    tempValue = cnt[i - value] + 1;<br>                }<br>                if (tempValue &lt; minCnt) {<br>                    minCnt = tempValue;<br>                }<br>            }<br><br>            cnt[i] = minCnt;<br>        }<br><br>        return cnt[moneyCnt];<br>    }","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446049,"discussion_content":"假期间坚持交作业，赞一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554649649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83179,"user_name":"叮当猫","can_delete":false,"product_type":"c1","uid":1360159,"ip_address":"","ucode":"175BB66517E21B","user_header":"https://static001.geekbang.org/account/avatar/00/14/c1/1f/cc77944d.jpg","comment_is_top":false,"comment_ctime":1554452130,"is_pvip":false,"replies":[{"id":"30077","content":"代码写得很赞","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1554489545,"ip_address":"","comment_id":83179,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554452130","product_id":100021201,"comment_content":"#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>using namespace std;<br><br>int dpSolve(int * a, int n, int aim){<br>\tvector&lt;vector&lt;int&gt;&gt; dp(aim+1, vector&lt;int&gt;(n+1, 0));<br>\tfor(int i=0; i&lt;=aim; i++){<br>\t\tint minvalue = INT_MAX;<br>\t\tfor(int j=0; j&lt;n; j++){<br>\t\t\tdp[i][j] = INT_MAX;<br>\t\t\tif(i &gt;= a[j]){<br>\t\t\t\tif(i % a[j] == 0)<br>\t\t\t\t\tdp[i][j] = i &#47; a[j];<br>\t\t\t\tif(dp[i-a[j]][n] != INT_MAX)<br>\t\t\t\t\tdp[i][j] = min(dp[i-a[j]][n]+1, dp[i][j]);<br>\t\t\t\tif(minvalue &gt; dp[i][j]){<br>\t\t\t\t\tminvalue = dp[i][j];<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t\tdp[i][n] = minvalue;<br>\t}<br>\treturn dp[aim][n];<br>}<br><br>int main(){<br>\tint a[] = {1, 2, 5};<br>\tint sum[] = {2, 5, 7, 10, 20, 100};<br>\tfor(int i=0; i&lt;sizeof(sum)&#47;sizeof(int); i++){<br>\t\tcout &lt;&lt; &quot;sum:&quot; &lt;&lt; sum[i] &lt;&lt; &quot; &quot; &lt;&lt; dpSolve(a, 3, sum[i]) &lt;&lt; endl;<br>\t}<br>}<br><br>sum:2 1<br>sum:5 1<br>sum:7 2<br>sum:10 2<br>sum:20 4<br>sum:100 20","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445905,"discussion_content":"代码写得很赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554489545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81665,"user_name":"枫林火山","can_delete":false,"product_type":"c1","uid":1199855,"ip_address":"","ucode":"66099C9D1AD36C","user_header":"https://static001.geekbang.org/account/avatar/00/12/4e/ef/2ad3effd.jpg","comment_is_top":false,"comment_ctime":1554000889,"is_pvip":true,"replies":[{"id":"29659","content":"心得写得非常详细，赞一个。对于你最后的提问，我觉得暂时没有特别好的方法，除非我们可以接受某种近似解，并可以发现一种通过多个局部最优解能近似全局最优解的方法。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1554056544,"ip_address":"","comment_id":81665,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554000889","product_id":100021201,"comment_content":"对钱币问题经过循环，递归和动态规划的编码实践。作为一个数学菜鸟我有以下几个感触心得分享<br>1. 递归方法。<br>论性能是第一个就该出局的选择，但是他的分治思想是最容易理解和编码的。我觉得递归一个很大的作用是可以用快速得出的结果，帮助我们分析问题找出规律，来实现最优算法<br>2. 循环方法。<br>对于解这个问题时，循环编码的思路是我想的最久的，不像递归分治思想很快就出实现出来。循环的层数设置，跳出条件比较费脑子。最后我是用金额类别由大到小，依次嵌套循环遍历的方法实现的。这样的好处是找到的第一个解就是我需要的最优解。速度当然比递归快很多。<br>3. 动态规划<br>动态规划根据结果总结出转移方程后，他的编码实现比循环要简单。但是在实际多次逐步改大总金额设置试验后，发现动态规划的效率其实并没有上述的倒叙循环快。在设置金额10000时，循环打印0秒，动态规划42秒。<br>总结原因是由于状态数过大造成，动态规划是稳扎稳打的实力派，每一步的结果都依赖上一次的状态结果，因此10000元相当于要从1逐步推导到10000.效率就没有”投机型“循环快了。<br>因此我对动态规划程序做了第一步优化-尽可能完全的利用到已经计算的状态结果，<br>比如创建初始状态时对最大金额的倍数金额 C[MaxAmount*k],及这个最有解的基础上可推出的其他(金额种类数-1)个状态 都直接填充了最优解结果,这样在动态规划过程中可直接跳过这些状态的最优解求解过程。<br>此外还在动态规划推导中求得每个阶段最优解时，也同样填充了后面可以根据金额种类直接获得的最优解结果的状态<br>经过上述优化后，时间从42秒降到了30秒，但是依然耗时高于循环。<br>此时可以看到动态规划时间过长的根本原因还是其状态过多造成的，但是实际从结果可以看到我们应当是可以省略掉很多不必要的阶段求解的。需要将超多阶段数精减为一个最短阶段数的动态过程来处理。<br>这部分我没有找到更好的办法，最后采用了循环用到的”投机法“，循环最小阶段动态规划，最终找到最短结果。<br>总结：<br>1. 动态规划的优点是可控制的循环复杂度，这个是一个定值。循环在本题中如果金额种类过多，性能应该会受到较大影响，而且编码思路不容易理清。<br>2. 动态规划的最优解求法其性能是高于遍历的。如递归和未优化的循环<br>3. 动态规划的缺点是当前结果依赖前一状态结果，状态阶段数太多的时候，会产生数量可控，但是很多的不必要中间结果<br>4. 动态规划优化一定要尽可能的利用已计算的结果来减少状态求解数<br>5. 根据实际题目和数学思想缩短状态阶段数目<br>以上就是本节学习心得，发现了数据的魅力，有点后悔大学数据还给老师了。<br>如果老师有看到，还有耐心读完，那么请教老师的问题是该题目的阶段数（总金额过大）时该如何优化。我大概猜的可能就是1.数学知识缩短状态阶段数 2.重新定义状态数。但是2个我都不知道怎么办=。=","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445290,"discussion_content":"心得写得非常详细，赞一个。对于你最后的提问，我觉得暂时没有特别好的方法，除非我们可以接受某种近似解，并可以发现一种通过多个局部最优解能近似全局最优解的方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554056544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80494,"user_name":"李凯","can_delete":false,"product_type":"c1","uid":1456082,"ip_address":"","ucode":"834970D9BA21A5","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/d2/24c81feb.jpg","comment_is_top":false,"comment_ctime":1553669459,"is_pvip":false,"replies":[{"id":"29592","content":"第8行表示一共要8元，8元钱可以由6元钱加上1枚2元硬币，那么就是c(6)+1，而c(6)查看第6行的最后一列，是2，也就是说6元钱最少需要2枚硬币，所以8元钱如果是6元钱的硬币外加一枚2元硬币组成的话，那么最少需要(2+1)枚共3枚。不过，8元钱也可能由5元钱外加1枚3元硬币组成，所以我们还要看c(5)+1，其他的以此类推，最后确定8元钱最少需要多少钱币。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1554011113,"ip_address":"","comment_id":80494,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553669459","product_id":100021201,"comment_content":"黄老师您好 看不明白 您能讲一下 钱币组合表的8行和9行么  一行都没看懂","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444883,"discussion_content":"第8行表示一共要8元，8元钱可以由6元钱加上1枚2元硬币，那么就是c(6)+1，而c(6)查看第6行的最后一列，是2，也就是说6元钱最少需要2枚硬币，所以8元钱如果是6元钱的硬币外加一枚2元硬币组成的话，那么最少需要(2+1)枚共3枚。不过，8元钱也可能由5元钱外加1枚3元硬币组成，所以我们还要看c(5)+1，其他的以此类推，最后确定8元钱最少需要多少钱币。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554011113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78976,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1553312039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553312039","product_id":100021201,"comment_content":"有点想数学的归纳演义的感觉","like_count":0},{"had_liked":false,"id":78800,"user_name":"Lay Zhao","can_delete":false,"product_type":"c1","uid":1380033,"ip_address":"","ucode":"E3060C75B9E088","user_header":"https://static001.geekbang.org/account/avatar/00/15/0e/c1/0e95d479.jpg","comment_is_top":false,"comment_ctime":1553242199,"is_pvip":false,"replies":[{"id":"28695","content":"代码很详细，可以再贴一下运行结果吗？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1553275203,"ip_address":"","comment_id":78800,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553242199","product_id":100021201,"comment_content":"交作业： 支持任意数量面额<br><br>import Foundation<br><br>import XCTest<br><br><br>&#47;&#47; 动态规划的经典模型-区间模型<br>&#47;&#47; 钱币组合<br>&#47;&#47; 给定总金额和可能的钱币面额，能否找出钱币数量最少的奖赏方式？<br>&#47;&#47; 假设这里我们有三种面额的钱币，2 元、3 元和 7 元。为了凑满100元最少的钱币数<br><br>class DP05: XCTestCase {<br>    <br>    func countMoney(denomination: [Int], money: Int) -&gt; Int {<br>        var c: [Int] = Array(repeating: -1, count: money + 1)<br>        <br>        for i in 1..&lt;c.count {<br>            var d = -1<br>            for j in denomination {<br>                if i &lt; j { &#47;&#47; 面额比钱多，不能采用<br>                    continue<br>                }<br>                if c[i-j] == -1 { &#47;&#47; 减去当前面额，不能表示。<br>                    if i%j == 0 { &#47;&#47; 刚好能被这种面额整除<br>                        d = i &#47; j<br>                    }<br>                } else {<br>                    &#47;&#47; 动态转移方程，注意d &gt; 0说明当前面额能被其他方案表示。<br>                    let new_d = c[i-j]+1<br>                    d = d &gt; 0 ? min(d , new_d) : new_d<br>                }<br>            }<br>            c[i] = d<br>        }<br>        for item in c.enumerated() {<br>            print(item)<br>        }<br>        <br>        return c[money]<br>    }<br>    <br>    func testCountMoney() {<br>        print(countMoney(denomination: [2,3,7], money: 100))<br>    }<br>}","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444234,"discussion_content":"代码很详细，可以再贴一下运行结果吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553275203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76330,"user_name":"kai楷","can_delete":false,"product_type":"c1","uid":1397672,"ip_address":"","ucode":"623D38565BF0EF","user_header":"https://static001.geekbang.org/account/avatar/00/15/53/a8/73618c92.jpg","comment_is_top":false,"comment_ctime":1552573104,"is_pvip":true,"replies":[{"id":"27843","content":"因为我们这里要计算最少数量的钱币，所以这里加1表示又增加了一枚钱币。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1552582428,"ip_address":"","comment_id":76330,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1552573104","product_id":100021201,"comment_content":"老师，c[i-value[j]]+1,那个+1的含义是指什么","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443258,"discussion_content":"因为我们这里要计算最少数量的钱币，所以这里加1表示又增加了一枚钱币。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552582428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74990,"user_name":"力主道","can_delete":false,"product_type":"c1","uid":1178870,"ip_address":"","ucode":"8C2BE1B9B10A28","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/f6/d50bfaf4.jpg","comment_is_top":false,"comment_ctime":1552348334,"is_pvip":true,"replies":[{"id":"27546","content":"主要是那个表格要看懂，不一定需要高中数学😆","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1552408181,"ip_address":"","comment_id":74990,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552348334","product_id":100021201,"comment_content":"😓感觉对于状态转移方程有点看不懂 这是不是得补一下高中数学啊!","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442767,"discussion_content":"主要是那个表格要看懂，不一定需要高中数学😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552408181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74296,"user_name":"骄阳似火","can_delete":false,"product_type":"c1","uid":1200416,"ip_address":"","ucode":"DDA573648D8D5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/20/6fe62675.jpg","comment_is_top":false,"comment_ctime":1552183506,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552183506","product_id":100021201,"comment_content":"接上条留言，影视剧名现在规模5w条，每天大概增长50条","like_count":0},{"had_liked":false,"id":74293,"user_name":"骄阳似火","can_delete":false,"product_type":"c1","uid":1200416,"ip_address":"","ucode":"DDA573648D8D5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/20/6fe62675.jpg","comment_is_top":false,"comment_ctime":1552182949,"is_pvip":false,"replies":[{"id":"27206","content":"之前我处理过类似的问题，如果直接使用编辑距离，对中文而言效果不好。比如“马卡龙”和“马应龙”只差一个字，但是意思差很远，中文和拉丁语系还是不太一样。<br>考虑到大部分人是使用拼音输入法，我们可以从拼音入手，比如说输入“shubiao”，用户可能是想输“鼠标”，也可能是输“手表”时错输了，因此可能考虑拼音的编辑距离更合适。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1552235435,"ip_address":"","comment_id":74293,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552182949","product_id":100021201,"comment_content":"老师接上个留言举个例子。现在有一批影视剧名，现在需要做的是提供一个搜索的功能根据影视剧名搜索影视剧。需求是根据用户的输入找出相匹配的影视剧名称，现在遇到的问题是用户是有可能会输入错误的名称，错误的名称就要给出对的搜索推荐。<br>问题1、怎么根据用户的输入去影视剧名集合中找到编辑距离小于等于2的影视剧名字<br>问题2、如果编辑距离这个方法不适用，有没有其他好的解决方案","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442514,"discussion_content":"之前我处理过类似的问题，如果直接使用编辑距离，对中文而言效果不好。比如“马卡龙”和“马应龙”只差一个字，但是意思差很远，中文和拉丁语系还是不太一样。\n考虑到大部分人是使用拼音输入法，我们可以从拼音入手，比如说输入“shubiao”，用户可能是想输“鼠标”，也可能是输“手表”时错输了，因此可能考虑拼音的编辑距离更合适。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552235435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":74023,"user_name":"骄阳似火","can_delete":false,"product_type":"c1","uid":1200416,"ip_address":"","ucode":"DDA573648D8D5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/20/6fe62675.jpg","comment_is_top":false,"comment_ctime":1552069817,"is_pvip":false,"replies":[{"id":"27154","content":"不太明白你的意思，能否举几个具体的例子？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1552160570,"ip_address":"","comment_id":74023,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552069817","product_id":100021201,"comment_content":"老师学习你的课程真是受益匪浅，学习编辑距离后现在公司正好需要实现这样的功能模块，非常感谢老师！<br>但是现在还有个难点希望老师能帮帮学生解惑，就是如何根据用户的输入去匹配候选的可建议输入关键词的集合，不考虑其他排序的情况。<br>先谢谢老师了！","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442391,"discussion_content":"不太明白你的意思，能否举几个具体的例子？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552160570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73588,"user_name":"swift","can_delete":false,"product_type":"c1","uid":1156148,"ip_address":"","ucode":"B243DCD10B04F0","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/34/0ab08db6.jpg","comment_is_top":false,"comment_ctime":1551933113,"is_pvip":true,"replies":[{"id":"26941","content":"是的，这是使用空间换时间 👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1551980343,"ip_address":"","comment_id":73588,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551933113","product_id":100021201,"comment_content":"上面有些童鞋说用递归超级慢的，是否考虑到有些计算是多次重复了？用循环的时候，每次调用上次的C(i-1)都是直接取的，而用递归反向计算的时候，当一个C(k)第一次计算出来后同样也应该缓存下来，下次再调用直接取缓存结果而不用进入子递归过程，这样计算量才是相当的，才能与循环比较性能。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442172,"discussion_content":"是的，这是使用空间换时间 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551980343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73192,"user_name":"yanry","can_delete":false,"product_type":"c1","uid":1338538,"ip_address":"","ucode":"E7D5F8171A4C07","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/CBUjXqjXANMI0gtxkjBoVicKiakMkoHWCyTDXMvSTF4iasqO5PYNGfFtrlNE07U9DSibwCoa96ycw4lMM9UakHDj6A/132","comment_is_top":false,"comment_ctime":1551837009,"is_pvip":false,"replies":[{"id":"26767","content":"你是说编辑距离为1吗？应该是大于1的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1551893978,"ip_address":"","comment_id":73192,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551837009","product_id":100021201,"comment_content":"老师，令a=&quot;mouse&quot;，b=&quot;a&quot;，得出的结果是1，这样合理吗？该怎么理解呢？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441962,"discussion_content":"你是说编辑距离为1吗？应该是大于1的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551893978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73023,"user_name":"Wing·三金","can_delete":false,"product_type":"c1","uid":1341402,"ip_address":"","ucode":"6B9F5822C3717F","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/da/54c663f3.jpg","comment_is_top":false,"comment_ctime":1551779536,"is_pvip":false,"replies":[{"id":"26573","content":"如果只找一种，这是可以的，类似贪心的思路","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1551811504,"ip_address":"","comment_id":73023,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551779536","product_id":100021201,"comment_content":"感谢老师的讲解！想到另一类问题，希望老师抽空看下我的想法是否正确：<br><br>在钱币组合的新问题上使用动态规划，按照本文的做法应该是只能得到【钱币数最少】的数目；而其实也可以另建一个数组用来存储对应总额下的钱币组合。比如 c(9) = 2，在 python 中可以用 numpy.argmin<br> 找到最小的组合来源之一是面额 2 之下的 c(7) + 1，那么 c(9) 对应的最少钱币组合就可以表示为 [2] + c(7) 的最少钱币组合。<br>但这种思路的缺陷是【只能记录一种可能的组合】。<br><br>而如果我想找出所有的组合，可以考虑使用广度优先搜索，树的高度代表钱币数目，一旦到了某个高度余额为 0，就不需要再往下了，应该是效率较高的搜索方式了。<br><br>希望老师指正下我这个思路有没有问题，哪里可以改进。感谢！！","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441881,"discussion_content":"如果只找一种，这是可以的，类似贪心的思路","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551811504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71453,"user_name":"骄阳似火","can_delete":false,"product_type":"c1","uid":1200416,"ip_address":"","ucode":"DDA573648D8D5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/20/6fe62675.jpg","comment_is_top":false,"comment_ctime":1551345380,"is_pvip":false,"replies":[{"id":"25695","content":"根据这个表格的设计，我们都是考虑从B到A的变换情况，所以min(3, 1, 2)对应的是B:mo-&gt;A:m，而min(1, 3, 2)对应的是B:m-&gt;A:mo","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1551375218,"ip_address":"","comment_id":71453,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551345380","product_id":100021201,"comment_content":"老师你好：<br>都是参数为替换、插入、删除<br>当A为m的时候，B为mo状态转移方程为min(3,1,2)<br>当B为m的时候，A为mo状态转移方程为什么是min(1,3,2)?<br>这两者区别具体在哪呢请老师解惑","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441159,"discussion_content":"根据这个表格的设计，我们都是考虑从B到A的变换情况，所以min(3, 1, 2)对应的是B:mo-&amp;gt;A:m，而min(1, 3, 2)对应的是B:m-&amp;gt;A:mo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551375218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70129,"user_name":"阿海","can_delete":false,"product_type":"c1","uid":1281585,"ip_address":"","ucode":"2589431F840C42","user_header":"https://static001.geekbang.org/account/avatar/00/13/8e/31/28972804.jpg","comment_is_top":false,"comment_ctime":1551005404,"is_pvip":true,"replies":[{"id":"25015","content":"动态规划确实在复杂度上有优势","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1551035056,"ip_address":"","comment_id":70129,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551005404","product_id":100021201,"comment_content":"打卡交作业。这道题写循环比较容易，而且计算也快，递归刚好相反。<br>import time<br>money_type = [2, 3, 7]<br>total = 10<br>ret = {}<br>st = time.time()<br>for i in range(1, total + 1):<br>    tmp = []<br>    for mt in money_type:<br>        if mt == i:<br>            tmp.append((1, [mt]))<br>        else:<br>            if i - mt in ret:<br>                count, zuhe = ret[i - mt]<br>                count += 1<br>                zuhe = zuhe[:]<br>                zuhe.append(mt)<br>                tmp.append((count, zuhe))<br>            if mt == i:<br>                tmp.append((1, [mt]))<br>    if tmp:<br>        ret[i] = min(tmp)<br>print(i, ret.get(i, ()))<br>print(f&quot;total time {time.time() - st}&quot;)<br>import sys<br>sys.setrecursionlimit(1000000)<br>st = time.time()<br>def my_func(total, zuhe=[]):<br>    if total in money_type:<br>        zuhe.append(str(total))<br>        print(&quot;可能组合为：&quot;+&quot;,&quot;.join(zuhe))<br>        return 1<br>    tmp = []<br>    for mt in money_type:<br>        rest = total - mt<br>        if rest &gt;= min(money_type):<br>            new_zuhe = zuhe[:]<br>            new_zuhe.append(str(mt))<br>            count = my_func(rest, new_zuhe) + 1<br>            tmp.append(count)<br>        else:<br>            continue<br>    if tmp:<br>        return min(tmp)<br>    else:<br>        return 0<br>   <br><br>print(&quot;最小取值为&quot;+ str(my_func(total)))<br>print(f&quot;total time {time.time() - st}&quot;)  <br>    ","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440453,"discussion_content":"动态规划确实在复杂度上有优势","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551035056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68721,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1550586250,"is_pvip":false,"replies":[{"id":"24419","content":"动态规划的优势体现出来了，实现了两种方式还进行了比较，赞👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1550598546,"ip_address":"","comment_id":68721,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550586250","product_id":100021201,"comment_content":"python 动态规划和递归两种解法<br>需要注意的是各种边界情况的处理，有解无解。总金额=50 的时候，递归速度慢了下来，但还是比较快的，总金额=100 运行到电脑发烫也没个结果...<br><br><br>import copy<br><br>def min_coins_recruit(target_money, coins):<br>    &quot;&quot;&quot;<br>    对于总金额固定，使用函数的递归(嵌套调用)，找出最少钱币数<br>    :param target_money: 总金额大小<br>    :param coins: 可选面额的钱币列表，如 [2, 3, 7]<br>    :return:<br>    &quot;&quot;&quot;<br>    if target_money == 0:<br>        return 0<br>    elif target_money &lt; min(coins):<br>        return None  # 不存在或无解<br>    elif target_money in coins:<br>        return 1<br><br>    result = list()<br>    for j in coins:<br>        count = min_coins_recruit(target_money - j, coins)<br>        if count is None:<br>            continue<br>        else:<br>            result.append(count)<br>    if len(result) &gt; 0:<br>        return min(result) + 1<br>    else:<br>        return None  # 不存在或无解<br><br><br>def min_coins_dyna_pro(target_money, coins):<br>    &quot;&quot;&quot;<br>    对于总金额固定，使用动态规划算法，找出最少钱币数<br>    :param target_money: 总金额大小<br>    :param coins: 可选面额的钱币列表<br>    :return:<br>    &quot;&quot;&quot;<br>    if min(coins) &gt; target_money:<br>        return None<br>    # 每个额度的钱币数，初始化值为 None，假设不存在或无解<br>    count = list([None]*(target_money+1))<br>    # 一些确定额度的钱币数<br>    count[0] = 0<br>    for j in coins:<br>        if j &lt;= target_money:<br>            count[j] = 1<br>    # 动态规划求解钱币数<br>    for i in range(min(coins) + 1, target_money+1):<br>        tmp_count = list()  # 临时保存钱币数<br>        tmp_coins = [j for j in coins if j &lt;= i]  # 求解 count[i-j] 时，i-j 大于 0<br>        for j in tmp_coins:<br>            if count[i-j] is not None:<br>                tmp_count.append(count[i-j])<br>        if len(tmp_count) &gt; 0:<br>            count[i] = min(tmp_count) + 1<br><br>    return count[target_money]<br><br><br># 如何获取钱币组合？<br>if __name__ == &quot;__main__&quot;:<br>    print(&quot;动态规划，最少钱币数：&quot;, min_coins_dyna_pro(50, [2, 3, 7]))<br>    print(&quot;递归方法，最少钱币数：&quot;, min_coins_recruit(50, [2, 3, 7]))<br><br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439816,"discussion_content":"动态规划的优势体现出来了，实现了两种方式还进行了比较，赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550598546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68105,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1550413481,"is_pvip":false,"replies":[{"id":"24123","content":"你的这段理解<br>&quot;第 0 行第 2 列（A=空，B=mo），A 从空增加一个 m ，B 从空增加一个 m 再增加一个 o ，编辑距离为 3 ；（这里 B 从空开始增加，不太理解...）<br>第 1 行第 1 列（A=m，B=m），两个字符串都是 m ，其中 B 增加 o，编辑距离为 1 ；<br>第 0 行第 1 列（A=空，B=m），A 从空集增加一个 m ，B 从 m 增加一个 o ，编辑距离为 2 ；（而这里 B 又是从 m 开始增加...）&quot;<br><br>是正确的。至于你说的“按这样理解，第 1 行第 1 列 min(2, 2, 0)=0 似乎又说不通”具体是指什么？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1550425853,"ip_address":"","comment_id":68105,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550413481","product_id":100021201,"comment_content":"表格的行表示字符串 A，表格的列表示字符串 B <br>A = 空，B = 空，对应表格第 0 行第 0 列，编辑距离 d[0][0]=0<br>A = 空，B = m，对应表格第 0 行第 1 列，编辑距离 d[0][1]=1<br>A = 空，B = mo，对应表格第 0 行第 2 列，编辑距离 d[0][2]=2<br>以此类推....<br><br>第 1 行第 2 列 min(3, 1, 2) = 1 是怎么来的，是否可以这样理解：<br>第 1 行第 2 列 这个格子（对应 A=m ，B=mo），其相邻的格子分别为：<br><br>第 0 行第 2 列（A=空，B=mo），A 从空增加一个 m ，B 从空增加一个 m 再增加一个 o ，编辑距离为 3 ；（这里 B 从空开始增加，不太理解...）<br>第 1 行第 1 列（A=m，B=m），两个字符串都是 m ，其中 B 增加 o，编辑距离为 1 ；<br>第 0 行第 1 列（A=空，B=m），A 从空集增加一个 m ，B 从 m 增加一个 o ，编辑距离为 2 ；（而这里 B 又是从 m 开始增加...）<br><br>按这样理解，第 1 行第 1 列 min(2, 2, 0)=0 似乎又说不通，请老师点拨一下，谢谢 ～","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439516,"discussion_content":"你的这段理解\n&amp;quot;第 0 行第 2 列（A=空，B=mo），A 从空增加一个 m ，B 从空增加一个 m 再增加一个 o ，编辑距离为 3 ；（这里 B 从空开始增加，不太理解...）\n第 1 行第 1 列（A=m，B=m），两个字符串都是 m ，其中 B 增加 o，编辑距离为 1 ；\n第 0 行第 1 列（A=空，B=m），A 从空集增加一个 m ，B 从 m 增加一个 o ，编辑距离为 2 ；（而这里 B 又是从 m 开始增加...）&amp;quot;\n\n是正确的。至于你说的“按这样理解，第 1 行第 1 列 min(2, 2, 0)=0 似乎又说不通”具体是指什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550425853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68082,"user_name":"zzz","can_delete":false,"product_type":"c1","uid":1392427,"ip_address":"","ucode":"C57B9D2FDB19B8","user_header":"https://static001.geekbang.org/account/avatar/00/15/3f/2b/966c348b.jpg","comment_is_top":false,"comment_ctime":1550409180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550409180","product_id":100021201,"comment_content":"<br>total = 100<br>c = [0] * (total + 1)<br>value = [2, 3, 7]<br>t = [0] * 3<br>t[0] = 9999<br>t[1] = 9999<br>t[2] = 9999<br><br><br>for i in range(1, total+1, 1):<br>    log = &#39;&#39;  # 用于记录该使用的上一级动态规则，最后输出<br>    for j in range(0, len(value)):<br>        if i - value[j] &gt;= 0:<br>            t[j] = c[i - value[j]] + 1<br>            log = log + &#39;第1个数字选&#39; + str(value[j]) + &#39;时，剩余c[&#39; + str(i - value[j]) + &#39;]+1=&#39; + str(c[i - value[j]]) + &#39;+1 ；&#39;<br>    c[i] = min(t[0], t[1], t[2])<br>    print(&#39;c[&#39;, i, &#39;]最少钱币数&#39;, c[i], &#39;:&#39;, log)<br><br>输出：<br>...<br>...<br>c[ 97 ]最少钱币数 15 : 第1个数字选2时，剩余c[95]+1=15+1 ；第1个数字选3时，剩余c[94]+1=14+1 ；第1个数字选7时，剩余c[90]+1=14+1 ；<br>c[ 98 ]最少钱币数 14 : 第1个数字选2时，剩余c[96]+1=15+1 ；第1个数字选3时，剩余c[95]+1=15+1 ；第1个数字选7时，剩余c[91]+1=13+1 ；<br>c[ 99 ]最少钱币数 16 : 第1个数字选2时，剩余c[97]+1=15+1 ；第1个数字选3时，剩余c[96]+1=15+1 ；第1个数字选7时，剩余c[92]+1=15+1 ；<br>c[ 100 ]最少钱币数 15 : 第1个数字选2时，剩余c[98]+1=14+1 ；第1个数字选3时，剩余c[97]+1=15+1 ；第1个数字选7时，剩余c[93]+1=14+1 ；<br>","like_count":0},{"had_liked":false,"id":60988,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1547601240,"is_pvip":false,"replies":[{"id":"21801","content":"答案是正确的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547682218,"ip_address":"","comment_id":60988,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547601240","product_id":100021201,"comment_content":"这道题对于每种钱币的数量没有限制，应该就是背包问题里面的“完全背包”一类问题，代码如下，最后输出为15，望老师指点：<br>public int calculate(int[] coins, int totalValue) {<br>    if (totalValue &lt;= 0) {<br>        return 0;<br>    }<br><br>    int[] dp = new int[totalValue + 1];<br><br>    for (int i = 1; i &lt;= totalValue; ++i) {<br>        int min = Integer.MAX_VALUE;<br><br>        for (int j = 0; j &lt; coins.length; ++j) {<br>            if ((coins[j] &lt;= i) &amp;&amp; (dp[i - coins[j]] != Integer.MAX_VALUE)) {<br>                min = Math.min(min, dp[i - coins[j]] + 1);<br>            }<br>        }<br>       <br>        dp[i] = min;<br> }<br><br>     return dp[totalValue];<br>} ","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436696,"discussion_content":"答案是正确的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547682218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60732,"user_name":"会飞的猪","can_delete":false,"product_type":"c1","uid":1340194,"ip_address":"","ucode":"05EB9BF31F603D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIEONynt1pibq4AInxllIgSz3zJrB4tiabJwibYAohfcGTvScicboZkM03Wgic4dA4H1obcyAm9nbGR4pA/132","comment_is_top":false,"comment_ctime":1547539459,"is_pvip":false,"replies":[{"id":"21695","content":"看逻辑应该是对的，结果也可以贴一下","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547574790,"ip_address":"","comment_id":60732,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547539459","product_id":100021201,"comment_content":"python实现<br><br>import copy<br>list={0:0}<br>def getCoin(money):<br>    list={0:[0,[]]}<br>    coin=[2,3,7]<br>    for i in range(0,money):<br>        if(i in list.keys()):<br>            for k in coin:<br>                newMoney=i+k<br>                if(newMoney&lt;=money):<br>                    number=list[i][0]+1<br>                    newlist=copy.copy(list[i][1])<br>                    newlist.append(k)<br>                    if( not list.get(newMoney)):<br>                        list[newMoney]=[number,newlist]<br>                    elif(list[newMoney][0]&gt;number):<br>                        list[newMoney] = [number,newlist]<br>    # sorted(list.keys())<br>    print(list)<br>getCoin(100)","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436602,"discussion_content":"看逻辑应该是对的，结果也可以贴一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547574790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60719,"user_name":"会飞的猪","can_delete":false,"product_type":"c1","uid":1340194,"ip_address":"","ucode":"05EB9BF31F603D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIEONynt1pibq4AInxllIgSz3zJrB4tiabJwibYAohfcGTvScicboZkM03Wgic4dA4H1obcyAm9nbGR4pA/132","comment_is_top":false,"comment_ctime":1547537113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547537113","product_id":100021201,"comment_content":" php实现代码<br>public function getMoney($money){<br>        $coin=[2,3,7];<br>        $list=[0];<br>        for ($i=0;$i&lt;=$money;$i++){<br>            if(isset($list[$i])){<br>                for($k=0;$k&lt;count($coin);$k++){<br>                    $nowMoney=$i+$coin[$k];<br>                    if($nowMoney&lt;=$money){<br>                        $number=$list[$i]+1;<br>                        if(!isset($list[$nowMoney])||$number&lt;$list[$nowMoney]){<br>                            $list[$nowMoney]=$number;<br>                        }<br>                    }<br>                }<br>            }<br>        }<br><br>        ksort($list);<br>        if(isset($list[$money])){<br>            return $list[$money];<br>        }else{<br>            return &#39;该金额无法通过硬币组合输出&#39;;<br>        }<br>    }<br>","like_count":0},{"had_liked":false,"id":58577,"user_name":"Ricky","can_delete":false,"product_type":"c1","uid":1238256,"ip_address":"","ucode":"0B29C730CAD29C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/f0/82281239.jpg","comment_is_top":false,"comment_ctime":1547120953,"is_pvip":false,"replies":[{"id":"21441","content":"结果正确","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547405963,"ip_address":"","comment_id":58577,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547120953","product_id":100021201,"comment_content":"void getLeastReward(const int *amount, int n, int target, int &amp;least,<br>        vector&lt;int&gt; &amp;result, vector&lt;int&gt; &amp;tmp) {<br><br>    if (target &lt; 0) return;<br>    if (target == 0) {<br>        if (tmp.size() &lt; least) {<br>            least = tmp.size();<br>            result = tmp;<br>        }<br>    }<br><br>    for (int i = 0; i &lt; n; ++i) {<br>        if (target &lt; amount[i]) continue;<br>        int j = target &#47; amount[i];<br>        vector&lt;int&gt; rs = tmp;<br>        while (j &gt; 0) {<br>            rs.push_back(amount[i]);<br>            j--;<br>        }<br>        getLeastReward(amount, n, target % amount[i], least, result, rs);<br>    }<br>}<br><br>void getLeastReward(const int *amount, int n, int target) {<br>    if (target &lt;= 0) return;<br>    vector&lt;int&gt; rs, tmp;<br>    int least = INT16_MAX;<br>    getLeastReward(amount, n, target, least, rs, tmp);<br>    cout &lt;&lt; &quot;\\nThe least amount is &quot; &lt;&lt; least &lt;&lt; endl;<br>    cout &lt;&lt; &quot;Details are &quot;;<br>    for (int x: rs) {<br>        cout &lt;&lt; x &lt;&lt; &quot; &quot;;<br>    }<br>    cout &lt;&lt; endl;<br>}<br><br>主程序<br>int main() {<br>    int amount[] = {2, 3, 7};<br>    int target = 100;<br>    getLeastReward(amount, 3, target);<br>    return 0;<br>}<br>结果<br>The least amount is 15<br>Details are 7 7 7 7 7 7 7 7 7 7 7 7 7 7 2<br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436124,"discussion_content":"结果正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547405963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57403,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1546781883,"is_pvip":false,"replies":[{"id":"21428","content":"你说的中间三个变量，具体是指哪几个？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547402048,"ip_address":"","comment_id":57403,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546781883","product_id":100021201,"comment_content":"看了【我心留】的代码，这里的空间复杂度是O(n)，其实通过老师给出的那个表格可以看出，只要保留中间三个变量即可，因此可以改写成空间复杂度是O(1）的代码，而且，最好能打印出最小币数量的组合，比如 100 = 7+7+7+7+7+   7+7+7+7+7+   7+7+7+7 +2，感觉是可行的，有点烧脑，我暂时还没有写出来。<br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435563,"discussion_content":"你说的中间三个变量，具体是指哪几个？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547402048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56817,"user_name":"石佳佳_Gemtra","can_delete":false,"product_type":"c1","uid":1235210,"ip_address":"","ucode":"C992091D9CC8D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/0a/ce61e397.jpg","comment_is_top":false,"comment_ctime":1546563965,"is_pvip":true,"replies":[{"id":"20590","content":"这种属于贪心法，前面有读者说了，这种方法不一定能求出解","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546650149,"ip_address":"","comment_id":56817,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546563965","product_id":100021201,"comment_content":"思考题：<br>对于总金额固定、找出最少钱币数的题目，应该尽可能的使用面额较大的钱币；<br>维护一个钱币面额的数组，对数组进行降序排序，遍历数组，总金额对第一个数组元素整除值为a0，对第一个数组元素取模后的值继续对第二个数组元素整除值为a1...直至到某一个数组元素i取模值为0，则a0+a1+…+ai的值即为最少钱币数；<br>那么请教下老师，这种属于什么方法？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435253,"discussion_content":"这种属于贪心法，前面有读者说了，这种方法不一定能求出解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546650149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}