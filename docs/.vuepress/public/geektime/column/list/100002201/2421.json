{"id":2421,"title":"29 | 推荐阅读：分布式数据调度相关论文","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>我们在之前的系列文章《分布式系统架构的本质》中说过，分布式系统的一个关键技术是“数据调度”。因为我们需要扩充节点，提高系统的高可用性，所以必须冗余数据结点。</p><p>建立数据结点的副本看上去容易，但其中最大的难点就是分布式一致性的问题。下面，我会带你看看数据调度世界中的一些技术点以及相关的技术论文。</p><p>对于分布式的一致性问题，相信你在前面看过好几次下面这张图。从中，我们可以看出，Paxos算法的重要程度。还有人说，分布式下真正的一致性算法只有Paxos。</p><p><img src=\"https://static001.geekbang.org/resource/image/95/50/95e0fd0862be0e3489713687bf363f50.png?wh=656*348\" alt=\"\"></p><h1>Paxos算法</h1><p>Paxos算法，是莱斯利·兰伯特（Lesile Lamport）于1990年提出来的一种基于消息传递且具有高度容错特性的一致性算法。但是这个算法太过于晦涩，所以，一直以来都属于理论上的论文性质的东西。</p><p>其进入工程圈的源头在于Google的Chubby lock——一个分布式的锁服务，用在了Bigtable中。直到Google发布了下面的这两篇论文，Paxos才进入到工程界的视野中来。</p><ul>\n<li>\n<p><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf\">Bigtable: A Distributed Storage System for Structured Data</a></p>\n</li>\n<li>\n<p><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf\">The Chubby lock service for loosely-coupled distributed systems</a></p>\n</li>\n</ul><!-- [[[read_end]]] --><p>Google与Big Table相齐名的还有另外两篇论文。</p><ul>\n<li>\n<p><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf\">The Google File System</a></p>\n</li>\n<li>\n<p><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf\">MapReduce: Simplifed Data Processing on Large Clusters</a></p>\n</li>\n</ul><p>不过，这几篇论文中并没有讲太多的Paxos算法细节上的内容，反而在论文<a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/paxos_made_live.pdf\">Paxos Made Live – An Engineering Perspective</a> 中提到了很多工程实现的细节。比如，Google实现Paxos时遇到的各种问题和解决方案，讲述了从理论到实际应用二者之间巨大的鸿沟。</p><p>尤其在满地都是坑的分布式系统领域，这篇论文没有过多讨论Paxos算法本身，而是在讨论如何将理论应用到实践，如何弥补理论在实践中的不足，如何取舍，如何测试，这些在实践中的各种问题才是工程的魅力。所以建议你读一读。</p><p>Paxos算法的原版论文我在这里就不贴了，因为一来比较晦涩，二来也不易懂。推荐一篇比较容易读的——<a href=\"http://harry.me/blog/2014/12/27/neat-algorithms-paxos/\">Neat Algorithms - Paxos</a> ，这篇文章中还有一些小动画帮助你读懂。还有一篇可以帮你理解的文章是<a href=\"https://angus.nyc/2012/paxos-by-example/\">Paxos by Examples</a>。</p><p>如果你要自己实现Paxos算法，这里有几篇文章供你参考。</p><ul>\n<li>\n<p><a href=\"http://www.inf.usi.ch/faculty/pedone/MScThesis/marco.pdf\">Paxos Made Code</a> ，作者是马克罗·普里米(Macro Primi)，他实现了一个Paxos开源库<a href=\"http://libpaxos.sourceforge.net/\">libpaxos</a>。</p>\n</li>\n<li>\n<p><a href=\"http://www.cnds.jhu.edu/pub/papers/cnds-2008-2.pdf\">Paxos for System Builders</a> ，从一个系统实现者的角度讨论了实现Paxos的诸多具体问题，比如Leader选举、数据及消息类型、流控等。</p>\n</li>\n<li>\n<p><a href=\"http://www.cs.cornell.edu/courses/cs7412/2011sp/paxos.pdf\">Paxos Made Moderately Complex</a>，这篇文章比较新，是2011年才发表的。文中介绍了很多实现细节，并提供了很多伪代码，一方面可以帮助理解Paxos，另一方面也可以据此实现一个Paxos。</p>\n</li>\n<li>\n<p><a href=\"https://web.stanford.edu/class/cs340v/papers/paxos.pdf\">Paxos Made Practical</a>主要介绍如何采用Paxos实现replication。</p>\n</li>\n</ul><p>除了马克罗·普里米的那个开源实现外，到GitHub上找一下，你就会看到这些项目：<a href=\"https://github.com/cocagne/paxos\">Plain Paxos Implementations Python & Java</a>、<a href=\"https://github.com/xiang90/paxos\">A go implementation of the Paxos algorithm</a> 。</p><p>ZooKeeper 有和Paxos非常相似的一些特征，比如领导选举、提案号等，但是它本质上不是Paxos协议，而是自己发明的Zab协议，有兴趣的话，可以读一下这篇论文：<br>\n<a href=\"https://pdfs.semanticscholar.org/fc11/031895c302dc52404d34de58af1a72f3b817.pdf\">Zab: High-Performance broadcast for primary-backup systems</a>。</p><p>上述的Google File System、MapReduce、Bigtable并称为“谷三篇”。基本上来说，整个世界工程系统因为这三篇文章，开始向分布式系统演化，而云计算中的很多关键技术也是因为这三篇文章才得以成熟。后来，雅虎公司也基于这三篇论文开发了一个开源的软件——Hadoop。</p><h1>Raft算法</h1><p>因为Paxos算法太过于晦涩，而且在实际的实现上有太多的坑，并不太容易写对。所以，有人搞出了另外一个一致性的算法，叫Raft。其原始论文是<a href=\"https://raft.github.io/raft.pdf\"> In search of an Understandable Consensus Algorithm (Extended Version) </a>寻找一种易于理解的Raft算法。这篇论文的译文在InfoQ上《<a href=\"http://www.infoq.com/cn/articles/raft-paper\">Raft一致性算法论文译文</a>》，推荐你读一读。</p><p>Raft算法和Paxos的性能和功能是一样的，但是它和Paxos算法的结构不一样，这使Raft算法更容易理解并且更容易实现。那么Raft是怎样做到的呢？</p><p>Raft把这个一致性的算法分解成了几个部分，一个是领导选举（Leader Selection），一个是日志复制（Log Replication），一个是安全性（Safety），还有一个是成员变化（Membership Changes）。对于一般人来说，Raft协议比Paxos的学习曲线更低，也更平滑。</p><p>Raft协议中有一个状态机，每个结点会有三个状态，分别是 Leader、Candidate和Follower。Follower只响应其他服务器的请求，如果没有收到任何信息，它就会成为一个Candidate，并开始进行选举。收到大多数人同意选票的人会成为新的Leader。</p><p><img src=\"https://static001.geekbang.org/resource/image/40/33/408fe585546319dbe0e6c8422dc0e733.png?wh=865*386\" alt=\"\"></p><p>一旦选举出了一个Leader，它就开始负责服务客户端的请求。每个客户端的请求都包含一个要被复制状态机执行的指令。Leader首先要把这个指令追加到log中形成一个新的entry，然后通过AppendEntries RPC并行地把该entry发给其他服务器（server）。如果其他服务器没发现问题，复制成功后会给Leader一个表示成功的ACK。</p><p>Leader收到大多数ACK后应用该日志，返回客户端执行结果。如果Follower崩溃 （crash）或者丢包，Leader会不断重试AppendEntries RPC。</p><p><img src=\"https://static001.geekbang.org/resource/image/04/9f/0428dd28b89eba37de4e13ff9093ba9f.png?wh=748*560\" alt=\"\"></p><p>这里推荐几个不错的Raft算法的动画演示。</p><ul>\n<li>\n<p><a href=\"http://thesecretlivesofdata.com/raft/\">Raft – The Secret Lives of Data</a></p>\n</li>\n<li>\n<p><a href=\"https://raft.github.io/\">Raft Consensus Algorithm</a></p>\n</li>\n<li>\n<p><a href=\"http://kanaka.github.io/raft.js/\">Raft Distributed Consensus Algorithm Visualization</a></p>\n</li>\n</ul><h1>逻辑钟和向量钟</h1><p>后面，业内又搞出来一些工程上的东西，比如Amazon的DynamoDB，其论文<a href=\"http://bnrg.eecs.berkeley.edu/~randy/Courses/CS294.F07/Dynamo.pdf\">Dynamo: Amazon’s Highly Available Key Value Store</a> 的影响力也很大。这篇论文中讲述了Amazon 的DynamoDB是如何满足系统的高可用、高扩展和高可靠要求的，其中还展示了系统架构是如何做到数据分布以及数据一致性的。</p><p>GFS采用的是查表式的数据分布，而DynamoDB采用的是计算式的，也是一个改进版的通过虚拟结点减少增加结点带来数据迁移的一致性哈希。另外，这篇论文中还讲述了一个NRW模式用于让用户可以灵活地在CAP系统中选取其中两项，这使用到了Vector Clock——向量时钟来检测相应的数据冲突。最后还介绍了使用Handoff的机制对可用性的提升。</p><p>这篇文章中有几个关键的概念，一个是Vector Clock，另一个是Gossip协议。</p><p>提到向量时钟就需要提一下逻辑时钟。所谓逻辑时间，也就是在分布系统中为了解决消息有序的问题，由于在不同的机器上有不同的本地时间，这些本地时间的同步很难搞，会导致消息乱序。</p><p>于是Paxos算法的发明人兰伯特（Lamport）搞了个向量时钟，每个系统维护一个本地的计数器，这就是所谓的逻辑时钟。每执行一个事件（例如向网络发送消息，或是交付到应用层）都对这个计数器做加1操作。当跨系统的时候，在消息体上附着本地计算器，当接收端收到消息时，更新自己的计数器（取对端传来的计数器和自己当成计数器的最大值），也就是调整自己的时钟。</p><p>逻辑时钟可以保证，如果事件A先于事件B，那么事件A的时钟一定小于事件B的时钟，但是返过来则无法保证，因为返过来没有因果关系。所以，向量时钟解释了因果关系。向量时钟维护了数据更新的一组版本号（版本号其实就是使用逻辑时钟）。</p><p>假如一个数据需要存在三个结点上A、B、C。那么向量维度就是3，在初始化的时候，所有结点对于这个数据的向量版本是[A:0, B:0, C:0]。当有数据更新时，比如从A结点更新，那么，数据的向量版本变成[A:1, B:0, C:0]，然后向其他结点复制这个版本，其在语义上表示为我当前的数据是由A结果更新的，而在逻辑上则可以让分布式系统中的数据更新的顺序找到相关的因果关系。</p><p>这其中的逻辑关系，你可以看一下<a href=\"http://lass.cs.umass.edu/~shenoy/courses/spring05/lectures.html\">马萨诸塞大学课程 Distributed Operating System </a>中第10节<a href=\"http://lass.cs.umass.edu/~shenoy/courses/spring05/lectures/Lec10.pdf\"> Clock Synchronization </a>这篇讲议。关于Vector Clock，你可以看一下<a href=\"http://basho.com/posts/technical/why-vector-clocks-are-easy/\"> Why Vector Clocks are Easy</a>和<a href=\"http://basho.com/posts/technical/why-vector-clocks-are-hard/\">Why Vector Clocks are Hard</a> 这两篇文章。</p><h1>Gossip协议</h1><p>另外，DynamoDB中使用到了Gossip协议来做数据同步，这个协议的原始论文是 <a href=\"https://www.cs.cornell.edu/home/rvr/papers/flowgossip.pdf\">Efficient Reconciliation and Flow Control for Anti-Entropy Protocols</a>。Gossip算法也是Cassandra使用的数据复制协议。这个协议就像八卦和谣言传播一样，可以 “一传十、十传百”传播开来。但是这个协议看似简单，细节上却非常麻烦。</p><p>根据这篇论文，节点之间存在三种通信方式。</p><ul>\n<li>\n<p>push方式。A节点将数据(key,value,version)及对应的版本号推送给B节点，B节点更新A中比自己新的数据。</p>\n</li>\n<li>\n<p>pull 方式。A仅将数据key,version推送给B，B将本地比A新的数据(key,value,version)推送给A，A更新本地。</p>\n</li>\n<li>\n<p>push/pull方式。与pull类似，只是多了一步，A再将本地比B新的数据推送给B，B更新本地。</p>\n</li>\n</ul><p>如果把两个节点数据同步一次定义为一个周期，那么在一个周期内，push需通信1次，pull需2次，push/pull则需3次。从效果上来讲，push/pull最好，理论上一个周期内可以使两个节点完全一致。直观感觉上，也是push/pull的收敛速度最快。</p><p>另外，每个节点上又需要一个协调机制，也就是如何交换数据能达到最快的一致性——消除节点的不一致性。上面所讲的push、pull等是通信方式，协调是在通信方式下的数据交换机制。</p><p>协调所面临的最大问题是，一方面需要找到一个经济的方式，因为不可能每次都把一个节点上的数据发送给另一个节点；另一方面，还需要考虑到相关的容错方式，也就是当因为网络问题不可达的时候，怎么办？</p><p>一般来说，有两种机制：一种是以固定概率传播的Anti-Entropy机制，另一种是仅传播新到达数据的Rumor-Mongering机制。前者有完备的容错性，但是需要更多的网络和CPU资源，后者则反过来，不耗资源，但在容错性上难以保证。</p><p>Anti-Entropy的机制又分为Precise Reconciliation（精确协调）和Scuttlebutt Reconciliation（整体协调）这两种。前者希望在每次通信周期内都非常精确地消除双方的不一致性，具体表现就是互发对方需要更新的数据。因为每个结点都可以读写，所以这需要每个数据都要独立维护自己的版本号。</p><p>而整体协调与精确协调不同的是，整体协调不是为每个数据都维护单独的版本号，而是每个节点上的数据统一维护一个版本号，也就是一个一致的全局版本。这样与其他结果交换数据的时候，就只需要比较节点版本，而不是数据个体的版本，这样会比较经济一些。如果版本不一样，则需要做精确协调。</p><p>因为篇幅问题，这里就不多说了，你可以看看原始的论文，还可以去看看Cassandra中的源码，以及到GitHub搜一下其他人的实现。多说一句，Cassandra的实现是基于整体协调的push/pull模式。</p><p>关于Gossip的一些图示化的东西，你可以看一下动画<a href=\"https://rrmoelker.github.io/gossip-visualization/\">gossip visualization</a>。</p><h1>分布式数据库方面</h1><p>上面讲的都是一些基本概念相关的东西，下面我们来谈谈数据库方面的一些论文。</p><p>一篇是AWS Aurora的论文 <a href=\"http://www.allthingsdistributed.com/files/p1041-verbitski.pdf\">Amazon Aurora: Design Considerations for High Throughput Cloud –Native Relation Databases</a>。</p><p>Aurora是AWS将MySQL的计算和存储分离后，计算节点scale up，存储节点scale out。并把其redo log独立设计成一个存储服务，把分布式的数据方面的东西全部甩给了底层存储系统。从而提高了整体的吞吐量和水平的扩展能力。</p><p>Aurora要写6份拷贝，但是其只需要把一个Quorum中的日志写成功就可以了。如下所示。可以看到，将存储服务做成一个跨数据中心的服务，提高数据库容灾，降低性能影响。</p><p><img src=\"https://static001.geekbang.org/resource/image/70/eb/70eac246964e3ef8ad5100944bf5bdeb.png?wh=861*592\" alt=\"\"></p><p>对于存储服务的设计，核心的原理就是latency一定要低，毕竟写6个copy是一件开销很大的事。所以，基本上来说，Aurora用的是异步模型，然后拼命地做并行处理，其中用到的也是Gossip协议。如下所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/81/7f89ba6764ede9fc4df223e541179381.png?wh=860*566\" alt=\"\"></p><p>在上面这个图中，我们可以看到，完成前两步，就可以ACK回调用方。也就是说，只要数据在本地落地了，就可以返回成功了。然后，对于六个副本，这个log会同时发送到6个存储结点，只需要有大于4个成功ACK，就算写成功了。第4步我们可以看到用的是Gossip协议。然后，第5步产生cache 页，便于查询。第6步在S3做Snapshot，类似于Checkpoint。</p><p>第二篇比较有代表性的论文是Google的 <a href=\"http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/spanner-osdi2012.pdf\">Spanner: Google’s Globally-Distributed Database</a>。<br>\nSpanner 是Google的全球分布式数据库（Globally-Distributed Database) 。Spanner的扩展性达到了令人咋舌的全球级，可以扩展到数百万台机器，数以百计的数据中心，上万亿的行。更给力的是，除了夸张的扩展性之外，它还能同时通过同步复制和多版本来满足外部一致性，可用性也是很好的。</p><p>下面是Spanserver的一个架构。</p><p><img src=\"https://static001.geekbang.org/resource/image/13/91/1341af251b8997a3bd9de9272b9be191.jpg?wh=1533x1473\" alt=\"\"><br>\n我们可以看到，每个数据中心都会有一套Colossus，这是第二代的GFS。每个机器有100-1000个tablet，也就是相当数据库表中的行集，物理存储就是数据文件。比如，一张表有2000行，然后有20个tablet，那么每个tablet分别有100行数据。</p><p>在tablet上层通过Paxos协议进行分布式跨数据中心的一致性数据同步。Paxos会选出一个replica做Leader，这个Leader的寿命默认是10s，10s后重选。Leader就相当于复制数据的master，其他replica的数据都是从它那里复制的。读请求可以走任意的replica，但是写请求只有去Leader。这些replica统称为一个Paxos Group。</p><p>Group之间也有数据交互传输，Google定义了最小传输复制单元directory，是一些有共同前缀的key记录，这些key也有相同的replica配置属性。</p><p><img src=\"https://static001.geekbang.org/resource/image/e8/68/e85a1bf5efac06601fd6c5e9b75aa068.png?wh=561*293\" alt=\"\"></p><p>目前，基于Spanner论文的开源实现有两个，一个是Google公司自己的人出来做的<a href=\"https://github.com/cockroachdb/cockroach\">CockroachDB</a>，另一个是国人做的<a href=\"https://github.com/pingcap/tidb\">TiDB</a>。</p><h1>小结</h1><p>正如我在之前的分布式系统的本质文章里所说到的，分布式的服务的调度需要一个分布式的存储系统来支持服务的数据调度。而我们可以看到，各大公司都在分布式的数据库上做各种各样的创新，他们都在使用底层的分布式文件系统来做存储引擎，把存储和计算分离开来，然后使用分布式一致性的数据同步协议的算法来在上层提供高可用、高扩展的支持。</p><p>从这点来看，可以预见到，过去的分库分表并通过一个数据访问的代理服务的玩法，应该在不久就会过时就会成为历史。真正的现代化的分布式数据存储就是Aurora和Spanner这样的方式。</p><p>通过上面的这些论文和相关的工程实践以及开源项目，相信可以让你在细节方面对分布式中最难的一块——数据调度方面有更多的认识。</p><p>《分布式系统架构的本质》系列文章的目录如下，方便你查找自己关注的内容。</p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/1411\">分布式系统架构的冰与火</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1505\">从亚马逊的实践，谈分布式系统的难点</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1512\">分布式系统的技术栈</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1513\">分布式系统关键技术：全栈监控</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1604\">分布式系统关键技术：服务调度</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1609\">分布式系统关键技术：流量与数据调度</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1610\">洞悉PaaS平台的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2080\">推荐阅读：分布式系统架构经典资料</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2421\">推荐阅读：分布式数据调度相关论文</a></li>\n</ul>","comments":[{"had_liked":false,"id":23472,"user_name":"张志远","can_delete":false,"product_type":"c1","uid":1043990,"ip_address":"","ucode":"08337A651F03C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/16/6484dede.jpg","comment_is_top":false,"comment_ctime":1536397123,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"138975350595","product_id":100002201,"comment_content":"只能说作者很多文章学习时间单位最少是月","like_count":33,"discussions":[{"author":{"id":1938853,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/95/a5/de5df896.jpg","nickname":"JSJohnsonJS","note":"","ucode":"732F8EA6078302","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579256,"discussion_content":"深表认同啊，看完了之后，感觉作者的高度，太高了，已经不是仰望的程度了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657269026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157442,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1575165087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57409739935","product_id":100002201,"comment_content":"分库分表不就就会成为历史，本以为多么高级的技术，没想到就只是个过渡性产品。果然学技术还是要学思想，学习每个技术出现的背景，要解决什么问题，本身又有什么弊端，改如何解决。","like_count":13},{"had_liked":false,"id":2189,"user_name":"Michael Zhu","can_delete":false,"product_type":"c1","uid":1018356,"ip_address":"","ucode":"3C81174369B987","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/f4/2b89d2dc.jpg","comment_is_top":false,"comment_ctime":1516238929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57350813777","product_id":100002201,"comment_content":"这以后也不用录音了，本想听着省事，结果还要手机翻看，跳来跳去更麻烦了","like_count":13},{"had_liked":false,"id":2230,"user_name":"湖心亭看雪","can_delete":false,"product_type":"c1","uid":1023363,"ip_address":"","ucode":"88BAEBA964B6BC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/83/968da410.jpg","comment_is_top":false,"comment_ctime":1516427215,"is_pvip":false,"replies":[{"id":"468","content":"谢谢啊！是我搞错了……","user_name":"作者回复","comment_id":2230,"uid":"1001269","ip_address":"","utype":1,"ctime":1516713652,"user_name_real":"左耳朵"}],"discussion_count":1,"race_medal":0,"score":"40171132879","product_id":100002201,"comment_content":"耗子哥，zookeeper不是用的paxos啊","like_count":10,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415677,"discussion_content":"谢谢啊！是我搞错了……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1516713652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":2186,"user_name":"蘑菇王者","can_delete":false,"product_type":"c1","uid":1003667,"ip_address":"","ucode":"453C6F6185ADA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/93/c67d4f03.jpg","comment_is_top":false,"comment_ctime":1516234737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40170940401","product_id":100002201,"comment_content":"每一篇都能学一个月！大爱推荐阅读系列！","like_count":9},{"had_liked":false,"id":2243,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1516456109,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18696325293","product_id":100002201,"comment_content":"请问老师的架构图 示意图 是用什么软件画的 感觉很不错","like_count":4,"discussions":[{"author":{"id":1129610,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","nickname":"test","note":"","ucode":"C57A175CBC6547","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312925,"discussion_content":"一般的流程图软件应该都可以，加上各种属性就可以做的看起来复杂了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602854762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217489,"user_name":"阿斯蒂芬","can_delete":false,"product_type":"c1","uid":1024164,"ip_address":"","ucode":"61D5E3BDA4EBC5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/a4/b060c723.jpg","comment_is_top":false,"comment_ctime":1589513737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14474415625","product_id":100002201,"comment_content":"又见Google三驾马车：Big Table、GFS、MapReduce。<br>Paxos、Raft都是只听过没怎么接触过，倒是Gossip，在Redis集群中有应用到，当时就是给翻译的“流言”协议，与皓哥讲的「一传十、十传百」挺搭的。<br>看来分布式的一大关键，就是设计好的算法或机制，使节点间达成尽可能的一致性。<br>分布式数据库方面，TiDB被圈内人士安利过好几次，一直没有研究，皓哥背书，可以放心学习了，光是看了下文档，“高度兼容MySQL、100%支持标准的ACID事务、真正的金融级高可用...”，真是niubility","like_count":4},{"had_liked":false,"id":2739,"user_name":"D瓜哥","can_delete":false,"product_type":"c1","uid":1020000,"ip_address":"","ucode":"616192C94A700C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/60/44bf9fcc.jpg","comment_is_top":false,"comment_ctime":1518421111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14403322999","product_id":100002201,"comment_content":"耗子哥！还有一篇论文可能也值得推荐：<br><br>Spanner: Becoming a SQL System<br><br>https:&#47;&#47;static.googleusercontent.com&#47;media&#47;research.google.com&#47;zh-CN&#47;&#47;pubs&#47;archive&#47;46103.pdf<br><br>打印出来还没有读！😂","like_count":3},{"had_liked":false,"id":105120,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1560923139,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10150857731","product_id":100002201,"comment_content":"看了下TiDB 支持分布式事务，对业务没有任何侵入性，能优雅的替换传统的数据库中间件、数据库分库分表等 Sharding 方案  请问下TiDB是否已经比较成熟可以直接用于生产实践","like_count":2,"discussions":[{"author":{"id":1623409,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c5/71/f7c43b49.jpg","nickname":"风向北吹","note":"","ucode":"2FD0BC5159E1C1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590404,"discussion_content":"平安产险也在用了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665719355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155414,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a1/56/ad5dba39.jpg","nickname":"moliniao","note":"","ucode":"D38D159E960FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4980,"discussion_content":"美团都在用，应该可以吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565862772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95594,"user_name":"稻草人","can_delete":false,"product_type":"c1","uid":1535799,"ip_address":"","ucode":"CC8039AE206778","user_header":"https://static001.geekbang.org/account/avatar/00/17/6f/37/7597630e.jpg","comment_is_top":false,"comment_ctime":1558094532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10148029124","product_id":100002201,"comment_content":"陈老师，我现在是大数据平台开发，我看大数据平台归根结底都是分布式的东西，我如果在大数据平台开发深入一步的话，是分布式领域还是计算引擎领域？","like_count":2},{"had_liked":false,"id":167304,"user_name":"CalanceHao","can_delete":false,"product_type":"c1","uid":1401137,"ip_address":"","ucode":"068B4AC4D1D402","user_header":"https://static001.geekbang.org/account/avatar/00/15/61/31/211ac1a9.jpg","comment_is_top":false,"comment_ctime":1577759817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872727113","product_id":100002201,"comment_content":"添加到阅读列表，一点点啃💪🏻<br>🙏谢谢左耳整理的阅读推荐，有了进度条，游戏看起来才没那么难嘛～","like_count":2},{"had_liked":false,"id":165240,"user_name":"攻城狮Ra","can_delete":false,"product_type":"c1","uid":1681051,"ip_address":"","ucode":"4D6F97A6481166","user_header":"https://static001.geekbang.org/account/avatar/00/19/a6/9b/20b9fce3.jpg","comment_is_top":false,"comment_ctime":1577186667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872153963","product_id":100002201,"comment_content":"惭愧于自己的知识局限性，每一篇文章都足够我好好研读好一段时间。耗子叔的《左耳听风》适合反复研读，逐步加深理解，成长！！！","like_count":1},{"had_liked":false,"id":104790,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1560838688,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5855805984","product_id":100002201,"comment_content":"还好之前看过微服务，不然这些，都不知道如何来理解。","like_count":1},{"had_liked":false,"id":77562,"user_name":"铁鸟","can_delete":false,"product_type":"c1","uid":1227710,"ip_address":"","ucode":"D89CDBEA75BD40","user_header":"https://static001.geekbang.org/account/avatar/00/12/bb/be/0f96379d.jpg","comment_is_top":false,"comment_ctime":1552962956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5847930252","product_id":100002201,"comment_content":"打卡","like_count":1},{"had_liked":false,"id":14760,"user_name":"西园公子","can_delete":false,"product_type":"c1","uid":1062404,"ip_address":"","ucode":"2A21906A04DFE7","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/04/9fa7e773.jpg","comment_is_top":false,"comment_ctime":1530636912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5825604208","product_id":100002201,"comment_content":"Mark","like_count":1},{"had_liked":false,"id":3441,"user_name":"summer","can_delete":false,"product_type":"c1","uid":1000006,"ip_address":"","ucode":"7DF4E4FD6E9111","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/46/274d8dcc.jpg","comment_is_top":false,"comment_ctime":1519624829,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5814592125","product_id":100002201,"comment_content":"好文章","like_count":1},{"had_liked":false,"id":340827,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1649166340,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649166340","product_id":100002201,"comment_content":"还是要认真学习，思考～～","like_count":0},{"had_liked":false,"id":292580,"user_name":"槑·先生","can_delete":false,"product_type":"c1","uid":1445744,"ip_address":"","ucode":"897F0475592E3A","user_header":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","comment_is_top":false,"comment_ctime":1620883521,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1620883521","product_id":100002201,"comment_content":"分布式系统真是太过庞大，瑟瑟发抖。","like_count":0},{"had_liked":false,"id":168044,"user_name":"__Sunde__","can_delete":false,"product_type":"c1","uid":1088846,"ip_address":"","ucode":"17663D41830555","user_header":"https://static001.geekbang.org/account/avatar/00/10/9d/4e/546db84a.jpg","comment_is_top":false,"comment_ctime":1577992018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577992018","product_id":100002201,"comment_content":"Paxos by example 的链接错了： https:&#47;&#47;medium.com&#47;@angusmacdonald&#47;paxos-by-example-66d934e18522","like_count":0},{"had_liked":false,"id":2299,"user_name":"三万英尺","can_delete":false,"product_type":"c1","uid":1020753,"ip_address":"","ucode":"7ACF0073A65139","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/51/10a500bf.jpg","comment_is_top":false,"comment_ctime":1516693928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1516693928","product_id":100002201,"comment_content":"这种大纲式的文章我很喜欢😄","like_count":0}]}