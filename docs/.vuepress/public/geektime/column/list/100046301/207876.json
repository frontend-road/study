{"id":207876,"title":"07 | 可复用架构：如何实现高层次的复用？","content":"<p>你好，我是王庆友。在前面几讲中，我们讨论了如何打造一个可扩展的架构，相信你对架构的可扩展有了一定的了解，而架构还有一个非常重要的目标，那就是可复用。所以从今天开始，我就来和你聊一聊，如何打造可复用的架构。</p><p>作为开发人员，你对复用这个概念一定不陌生。在开发过程中，我们把系统中通用的代码逻辑抽取出来，变成公共方法或公共类，然后在多个地方调用，这就是最简单的技术上的复用。</p><p>但一开始，我们不会过多地考虑复用，当一个新项目过来，我们会选择最直接的方式来实现，结果往往是欲速而不达，比如说：</p><ul>\n<li>好不容易搞定了一个项目，接着又有新的类似项目过来，我们又要从头再来；</li>\n<li>项目的代码是定制的，项目结束后，系统维护的噩梦刚刚开始。</li>\n</ul><p>如果项目缺乏沉淀，每个项目都是全新的开始，出现这些情况，一点都不意外。而要想解决这个问题，我们一开始就要考虑系统的复用性。</p><p><strong>复用，它可以让我们站在巨人的肩膀上，基于现有的成果，快速落地一个新系统。</strong></p><p>那么，我们在做架构设计时，如何实现系统的高可复用呢？</p><p>今天，我就针对复用这个话题，首先和你介绍一下，复用具体都有哪些形式；然后，我会针对最有价值的业务复用，带你了解如何划分服务的边界，让你能够在工作中，设计一个可以高度复用的系统。</p><!-- [[[read_end]]] --><h2>复用的分类</h2><p>复用有多种形式，它可以分为技术复用和业务复用两大类。<strong>技术复用</strong>包括代码复用和技术组件复用；<strong>业务复用</strong>包括业务实体复用、业务流程复用和产品复用。</p><p>从复用的程度来看，从高到低，我们可以依次划分为产品复用&gt;业务流程复用&gt;业务实体复用&gt;组件复用&gt;代码复用。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/4c/7f1f6ba6fda64d49f29f5ebac518b24c.jpg?wh=1142*825\" alt=\"\"></p><p>接下来，我就按照复用度从低到高，对这些复用方式进行一一分析，帮助你更好地理解架构的可复用性。</p><h3>技术复用</h3><p>首先是<strong>代码级复用</strong>，这部分应该是你最熟悉的了。这里包括你自己打包的类库，第三方提供的SDK，还有各种算法封装等。我们的代码可以直接调用它们，物理上也和我们的应用打包在一起，运行在同一个进程里。代码级复用是最低层次的复用，你可以把它当作你自己源代码的一部分。</p><p>再往上，是<strong>技术组件复用</strong>。这些组件有我们自己封装的，更多的是大量开源的中间件，比如Redis、MQ、Dubbo等；组件也包括各种开发框架，比如Spring Cloud。这些基础组件技术复杂度很高，它们的存在，极大地简化了我们的开发工作。</p><p><strong>值得注意的是，代码级复用和技术组件复用都属于工具层面，它们的好处是在很多地方都可以用，但和业务场景隔得有点远，不直接对应业务功能，因此复用的价值相对比较低。</strong></p><h3>业务复用</h3><p>我们知道，系统最终是为业务而服务的，如果能够实现直接的业务复用，那系统开发的效率就更高。在前面的课程中，我们讨论架构的演进过程时，很多地方谈到了业务能力的复用，比如说，<a href=\"https://time.geekbang.org/column/article/205832\">微服务</a>强调单个业务实体的封装和复用，而<a href=\"https://time.geekbang.org/column/article/207121\">中台</a>进一步实现了企业级业务能力的复用。</p><p>所以接下来，我们就从比较简单的业务实体复用开始说起。</p><p><strong>业务实体复用针对细分的业务领域</strong>，比如订单、商品、用户等领域。它对各个业务领域的数据和业务规则进行封装，将它变成上层应用系统可以直接使用的业务组件。</p><p><strong>业务流程的复用针对的是业务场景</strong>，它可以把多个业务实体串起来，完成一个端到端的任务。比如说，下单流程需要访问会员、商品、订单、库存等多个业务，如果我们把这些调用逻辑封装为一个下单流程服务，那下单页面就可以调用这个流程服务来完成下单，而不需要去深入了解下单的具体过程。相比单个的业务实体复用，业务流程的复用程度更高，业务价值也更大。</p><p><strong>最高层次的复用是对整个系统的复用</strong>，比如说一个SaaS系统（Software-as-a-Service），它在内部做了各种通用化设计，允许我们通过各种参数配置，得到我们想要的功能；或者说一个PaaS（Platform-as-a-Service）平台，它会提供可编程的插件化支持，允许我们“嵌入”外部代码，实现想要的功能。</p><p>这种产品级的复用，它的复用程度无疑是最高的。这样的系统，在落地的时候，它无需核心的开发团队进行开发，只由外围的实施团队负责就可以了，这样，一个项目的上线就能简化为一次快速的实施，不但上线周期短，系统也更稳定。</p><p>当然，实现这样的复用，难度也是很大的，你既要对所在行业的业务有很全面的理解，又要有很强的抽象设计能力。这类系统中，比较典型的有Salesforce的CRM系统和SAP的ERP系统。</p><p>现在，我们先对复用做个总结。<strong>从技术复用到业务复用，越往上，复用程度越高，复用产生的价值也越大，但实现起来也越复杂，它能复用的场景就越有限。</strong>在实际工作中，技术层面上的复用相对比较简单，我们对这部分的认知也最多，而且由于开源的普及，现在有丰富的中间件让我们选择，我们可以基于它们，逐步构建适合自己的技术体系。</p><p><strong>但如果我们能进一步打造业务中间件，并在这个基础上，形成业务平台，这样，我们就能实现更高的业务级复用，可以更高效地支持系统的快速落地。</strong></p><p>而在实现业务组件化和平台化的过程中，首要的问题就是基础服务边界的划分。边界划分决定了服务的粒度和职责，在实际工作中，也是非常困扰我们和有争议的地方。</p><p>接下来，我就针对基础服务边界的划分，和你分享我自己在项目开发的过程中，总结的一些实用的原则和做法。</p><h2>基础服务边界划分</h2><p>服务边界划分要解决“我是谁”的问题，它实现了服务和周边环境的清晰切割。</p><p>我们都知道，服务包含了业务数据和业务规则，并提供接口给外部访问，其中，接口是服务的对外视图，它封装了服务的业务数据和规则。</p><p>所以从边界划分的角度来看，我们就是要确定哪些数据属于这个服务，哪些接口功能由这个服务提供。这里，我总结了3个基础服务边界划分的原则，供你设计时做参考。</p><h3>首先，是服务的<span class=\"orange\">完整性原则</span></h3><p>你在划分服务的边界时，需要确保服务内部数据的完整性。</p><p>举个例子，一个商品服务的数据模型，不仅要有商品基本信息，比如商品名称、价格、分类、图片、描述等；还需要包含商品的扩展信息，如商品的各种属性、商品标签等；最后还要包含各种复杂商品类型的定义，比如组合商品、套餐商品、多规格商品等。</p><p>另外，你还要保证服务功能的完整性。对于服务使用者来说，他们是以业务的角度看服务，而不是纯粹的数据角度。比如一个套餐商品，在服务内部，它是多个单品的复杂组合，但从服务调用者的角度来看，它就是一个商品。</p><p>那现在问题来了，对于套餐的价格，商品服务是给出一个最终价格呢？还是给出各个单品的价格，然后让调用方自己算最终价格呢？我们知道，套餐的价格不是各个单品价格累加的结果，它包含了一定的优惠，如果它的价格由服务调用方来算，这会导致商品的部分业务规则游离于服务外面，破坏了商品服务的功能完整性。</p><p>在实践中，有些服务只是存储基础数据，然后提供简单的增删改查功能，这样一来，服务只是一个简单的DAO，变成了数据访问通道。这样的服务，它的价值就很有限，也容易被服务调用方质疑。因此，我们要尽可能在服务内部封装完整的业务规则，对外提供完整的业务语义，最大程度地简化服务的使用。</p><p><strong>所以，当你在划分服务边界时，要保证服务数据完整、功能全面，这样才能支撑一个完整的业务领域。</strong></p><h3>其次，是服务的<span class=\"orange\">一致性原则</span></h3><p>也就是说，服务的数据和职责要一致，谁拥有信息，谁就负责提供相应的功能。</p><p>服务内部的业务逻辑要尽量依赖内部数据，而不是接口输入的数据，否则会造成数据和业务规则的脱节（一个在外面，一个在里面），如果服务对外部的依赖性很强，就无法提供稳定的能力了。</p><p>很多时候，我们对一个功能到底划分到哪个服务，有很大的争议。这时，我们可以结合这个功能所依赖的数据来判断，如果功能所需要的大部分数据都存储在A服务里，那当然由A服务来提供接口比较合适，这样接口输入的数据比较少，不但简化了服务对外部的依赖，同时也降低了接口调用的成本。</p><p>给你举个例子，在订单小票上，我们经常能看到一些优惠信息，比如说商品原价是多少，其中因为满减优惠了多少，因为商品特价减免了多少。这个优惠计算的结果是订单的一部分，毫无疑问，它需要保存在订单服务里。</p><p>但这个订单的优惠计算过程，却不是由订单服务来负责，而是由独立的促销服务负责的。因为优惠计算所需要的优惠规则是在促销服务里定义的，促销服务可以在内部拿到所有的优惠规则，然后完成整个优惠计算。</p><p>否则，如果是由订单服务负责优惠计算，订单服务的调用者就需要在接口中提供完整的促销规则，不但调用成本高，而且外部促销规则的改变会影响订单服务的内部实现。</p><p>所以在这里，促销服务负责促销规则的维护，以及对应的优惠计算功能；订单服务负责优惠结果数据落地，以及后续的查询功能。这样，每个服务存储的数据和对外提供的功能是一致的。</p><h3>最后一个，是<span class=\"orange\">正交原则</span></h3><p>既然是基础服务，它们就处于调用链的底层，服务之间不会有任何的调用关系，也就是说基础服务相互之间是正交的。比如说会员服务和商品服务，它们代表不同维度的基础业务域，彼此之间不会有调用关系。</p><p>正交还有另外一种情况：服务之间有数据的依赖关系，但没有接口的调用关系。</p><p>比如说，订单明细里包含商品ID信息，但订单服务内部不会调用商品服务来获取商品详情。如果页面需要展示订单的商品详情，针对这个具体的业务场景，我们可以在上层的聚合服务里，通过聚合订单服务和商品服务来实现。</p><h2>总结</h2><p>可复用是架构设计的一个重要目标，今天我们对复用进行了梳理，包括复用有哪些形式，以及它们有哪些价值，相信你现在对复用已经有了一个整体的认识。<strong>业务上的复用比纯粹的技术复用有更高的价值，我们要尽量往这个方向上靠。</strong></p><p>在实践中，落地基础服务是实现业务复用的有效方式，而基础服务边界的划分，它有科学的成分，但更多的是一种艺术，这里我提供了几个实用的划分原则，你可以在工作中结合实际情况，灵活地运用它们。</p><p>在专栏的下一讲，我会通过一个具体的订单服务例子，来帮助你更好地落地基础服务。</p><p><strong>最后，给你留一道思考题：我们在落地服务时，有时会冗余存储其它服务的数据，你对这个有什么看法呢？</strong></p><p>欢迎你在留言区与大家分享你的答案，如果你在学习和实践的过程中，有什么问题或者思考，也欢迎给我留言，我们一起讨论。感谢阅读，我们下期再见。</p>","neighbors":{"left":{"article_title":"06 | 可扩展架构案例（三）：你真的需要一个中台吗？","id":207121},"right":{"article_title":"08 | 可复用架构案例（一）：如何设计一个基础服务？","id":209138}},"comments":[{"had_liked":false,"id":186994,"user_name":"四喜","can_delete":false,"product_type":"c1","uid":1071389,"ip_address":"","ucode":"C5EBED19C0F332","user_header":"https://static001.geekbang.org/account/avatar/00/10/59/1d/c89abcd8.jpg","comment_is_top":true,"comment_ctime":1583984713,"is_pvip":false,"replies":[{"id":"72218","content":"这个比较复杂，大家不要陷入这个具体的业务里面。<br>具体讲，就是<br>1. 上层应用调用促销服务，把购物车的商品信息和用户信息传进去，返回的是最终订单金额，以及因为各个优惠减免的金额。这个是促销服务结合内部的促销规则记性计算<br>2. 然后上层应用调用订单服务，把订单的信息，以及优惠结果传进去，订单服务负责在数据里保存优惠结果。<br><br>所以是上层应用调各个基础服务，基础服务之间不会互相调。","user_name":"作者回复","user_name_real":"王庆友","uid":"1268522","ctime":1584021002,"ip_address":"","comment_id":186994,"utype":1}],"discussion_count":4,"race_medal":0,"score":"9.2233720770935009e+18","product_id":100046301,"comment_content":"老师请讲讲订单服务，<br><br>订单小票包含了价格，价格涉及到优惠信息。<br><br>价格信息来自商品服务，优惠信息来自促销服务。订单服务从数据上依赖商品服务、促销服务。<br><br>请问这个订单小票，是订单服务的功能呢？还是上层聚合服务的功能呢？<br><br>订单服务本身负责什么呢？<br>","like_count":9,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486949,"discussion_content":"这个比较复杂，大家不要陷入这个具体的业务里面。\n具体讲，就是\n1. 上层应用调用促销服务，把购物车的商品信息和用户信息传进去，返回的是最终订单金额，以及因为各个优惠减免的金额。这个是促销服务结合内部的促销规则记性计算\n2. 然后上层应用调用订单服务，把订单的信息，以及优惠结果传进去，订单服务负责在数据里保存优惠结果。\n\n所以是上层应用调各个基础服务，基础服务之间不会互相调。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584021002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","nickname":"梁中华","note":"","ucode":"52FE40242CBAD0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216463,"discussion_content":"这个上层服务在很多公司叫下单服务，里面包含的东西可多了，除了满减，优惠券，还有扣积分，限购，根据仓库拆单，运费计算，算是电商系统里核心和关键服务，但又不能算是底层基础服务，因为依赖太多，很不正交。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585454272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/59/1d/c89abcd8.jpg","nickname":"四喜","note":"","ucode":"C5EBED19C0F332","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203286,"discussion_content":"所以其实订单服务因为依赖了别的服务的数据，上层服务依次调用了被依赖数据的那些服务，得到结果，最后调用订单服务。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584021205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2235293,"avatar":"https://static001.geekbang.org/account/avatar/00/22/1b/9d/78cd27a9.jpg","nickname":"被雪吹过的夏天","note":"","ucode":"18ECB7DEB982C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330343,"discussion_content":"所以这个服务正交原则和单服务不能只是一个简单的 DAO，是一个权衡点。是不是可以理解成：根据具体场景区分，当一个功能大部分数据在A服务，而且只需要A服务调用B服务就能完成，就不用上层服务去组合； 而当一个功能需要两个以上服务才能完成或者功能容易变动的时候，就需要上层服务聚合，以做扩展性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606573567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201148,"user_name":"jun","can_delete":false,"product_type":"c1","uid":1899314,"ip_address":"","ucode":"3A9633CA1FE72E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/LalJD9ruYQI5zVM1GOCe4PjunIbbeeMiacFHC4TAj0DBVeialKt3vRCLs9dxn1vYXvfp8pgcyaeEQkh1nde1JoBQ/132","comment_is_top":false,"comment_ctime":1585723413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40240429077","product_id":100046301,"comment_content":"可以冗余一部分其他业务领域数据，但这部分冗余数据得有2个特点：1、不需要实时变化的数据 2、不需要保持数据一致性的信息；","like_count":10},{"had_liked":false,"id":184894,"user_name":"孙同学","can_delete":false,"product_type":"c1","uid":1676238,"ip_address":"","ucode":"C6C82400D15336","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/ce/092acd6a.jpg","comment_is_top":false,"comment_ctime":1583426689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35943165057","product_id":100046301,"comment_content":"https:&#47;&#47;www.processon.com&#47;view&#47;link&#47;5e51378ce4b0c037b5f9d1e3 冗余一定程度的数据可以简化上层的业务聚合调用，不过在存储数据时也会增加相应的复杂度，这应该是个辨证关系，看常用业务流程而定吧。不知道理解的对不对","like_count":8},{"had_liked":false,"id":188849,"user_name":"AngryApe","can_delete":false,"product_type":"c1","uid":1414971,"ip_address":"","ucode":"E0125A8D2AC84B","user_header":"https://static001.geekbang.org/account/avatar/00/15/97/3b/c98b68c1.jpg","comment_is_top":false,"comment_ctime":1584426044,"is_pvip":false,"replies":[{"id":"72926","content":"可以跨层调，你这里的共享业务层是聚合业务层吧? 基础业务层提供的就是共享业务","user_name":"作者回复","user_name_real":"王庆友","uid":"1268522","ctime":1584453307,"ip_address":"","comment_id":188849,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14469327932","product_id":100046301,"comment_content":"王老师，请教一个问题：在架构设计的时候服务一般的分层的，基础服务层（业务实体），共享业务层，应用服务层，按这个结构的话是否允许应用服务层直接调用基础服务层？比如一个简单的查询优惠券详情，没有什么复杂的逻辑，这时候应用层是否应该直接调用基础服务层？","like_count":3,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487547,"discussion_content":"可以跨层调，你这里的共享业务层是聚合业务层吧? 基础业务层提供的就是共享业务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584453307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296471,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1622989513,"is_pvip":false,"replies":[{"id":"108387","content":"价格规则复杂情况下，往往有独立的价格服务，比如同一个商品有app价，团购价，pc端价，线下价，促销价等等，涉及复杂的优先级排序","user_name":"作者回复","user_name_real":"王庆友","uid":"1268522","ctime":1624351268,"ip_address":"","comment_id":296471,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10212924105","product_id":100046301,"comment_content":"商品价格的例子，有点疑问。商品的录入的时候基本价格应该是属于商品域的。但是实际展示的时候涉及到营销活动，优惠活动。这个销售价又属于营销或者价格域的。<br>其实这里商品有时候也会冗余最终的销售价(会有一定延迟),这样在搜索商品的时候。基于价格排期才比较方便。","like_count":2,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521451,"discussion_content":"价格规则复杂情况下，往往有独立的价格服务，比如同一个商品有app价，团购价，pc端价，线下价，促销价等等，涉及复杂的优先级排序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624351268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252795,"user_name":"萧","can_delete":false,"product_type":"c1","uid":1229143,"ip_address":"","ucode":"0C2239867AFF5F","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/57/27de274f.jpg","comment_is_top":false,"comment_ctime":1602489445,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10192424037","product_id":100046301,"comment_content":"可复用架构<br>技术复用：工具层面，复用价值较低<br><br>代码复用：算法，SDK之类<br>技术组件复用：Redis、MQ、Dubbo<br>业务复用<br><br>业务实体复用：业务领域，订单、商品、用户<br>业务流程复用：业务场景，下单流程<br>产品复用：整个系统，SaaS、PaaS<br>基础服务边界的划分：<br><br>完整性原则：要保证服务数据完整、功能全面，这样才能支撑一个完整的业务领域。<br>一致性原则：服务的数据和指责一直，谁拥有较多的数据，谁就负责提供相应的功能<br>正交原则：服务之间可以用数据的依赖关系，但没有接口的调用关系","like_count":3},{"had_liked":false,"id":217690,"user_name":"果然爸爸","can_delete":false,"product_type":"c1","uid":1467300,"ip_address":"","ucode":"0E5F031A0E6A69","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/a4/e663c4d4.jpg","comment_is_top":false,"comment_ctime":1589590532,"is_pvip":false,"replies":[{"id":"80535","content":"在基础服务的上层聚合各个基础服务，比如应用通过订单服务拿到订单的用户id后，再调用用户服务获取用户详细信息，而不是订单服务内部去调用用户服务。","user_name":"作者回复","user_name_real":"王庆友","uid":"1268522","ctime":1589613508,"ip_address":"","comment_id":217690,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10179525124","product_id":100046301,"comment_content":"像用户服务这种基础服务，所有其他业务服务都会依赖，按照老师的说法，基础服务最好不要相互调用。这种情况，怎么处理，把用户数据冗余到所有服务吗？这样数据同步会是个比较复杂的问题。","like_count":2,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495221,"discussion_content":"在基础服务的上层聚合各个基础服务，比如应用通过订单服务拿到订单的用户id后，再调用用户服务获取用户详细信息，而不是订单服务内部去调用用户服务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589613508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184961,"user_name":"Din","can_delete":false,"product_type":"c1","uid":1013276,"ip_address":"","ucode":"02B38F4C612882","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/1c/e709be94.jpg","comment_is_top":false,"comment_ctime":1583458596,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10173393188","product_id":100046301,"comment_content":"冗余其他服务的数据时比较常见的做法，这样可以减少和其他系统数据的交互，提高服务性能。不过数据一旦冗余，就会带来数据一致性的问题。","like_count":2},{"had_liked":false,"id":203105,"user_name":"LiuHu","can_delete":false,"product_type":"c1","uid":1039768,"ip_address":"","ucode":"284E2025C554BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/98/883c42b4.jpg","comment_is_top":false,"comment_ctime":1586140678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881107974","product_id":100046301,"comment_content":"冗余的目的是保证自身业务的一致性、完整性， 原则是冗余的信息越少越好，不是为了方便搜索查询而冗余一些业务领域外的不必要信息。对于搜索查询，交由专门的聚合查询服务。<br>对于可变的信息只冗余关联信息的ID，对于不可变数据冗余可以具体信息。","like_count":1},{"had_liked":false,"id":185048,"user_name":"Middleware","can_delete":false,"product_type":"c1","uid":1072015,"ip_address":"","ucode":"C0028293ECDD47","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/8f/4b0ab5db.jpg","comment_is_top":false,"comment_ctime":1583471427,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5878438723","product_id":100046301,"comment_content":"冗余一些数据，字段，我认为适当的场景是很有必要的。检索数据方便，查询效率也会提高","like_count":1},{"had_liked":false,"id":184917,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1583452945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5878420241","product_id":100046301,"comment_content":"冗余数据有时也是可以的，就像电商中有买家查数据的需求，也有卖家查数据的需求，在做分表时为了提升性能会做冗余","like_count":1},{"had_liked":false,"id":354360,"user_name":"Geek__b3bddc1474fa","can_delete":false,"product_type":"c1","uid":1465820,"ip_address":"上海","ucode":"5EDBC40BF3EA94","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er0h19PTdaZDp4oHBHocYp5uYZicCPMibIPQ9c8TP29hRObZl8kJgaSQHdHGdXGCRiaLibJN3I1IxnWKg/132","comment_is_top":false,"comment_ctime":1660298038,"is_pvip":true,"replies":[{"id":"130110","content":"嗯，专栏这篇文章从实际出发，建议复用层次“高到&quot; 基础共享服务复用就可以，后面针对基础共享服务设计做了很多深入介绍，注意连贯起来阅读和理解。","user_name":"作者回复","user_name_real":"编辑","uid":"1268522","ctime":1663325945,"ip_address":"上海","comment_id":354360,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1660298038","product_id":100046301,"comment_content":"课题是：如何实现高层次的复用？但实际只是介绍了不同类型复用，大篇幅在介绍，没有讲解怎么做到。结论是没有干货","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587864,"discussion_content":"嗯，专栏这篇文章从实际出发，建议复用层次“高到&#34; 基础共享服务复用就可以，后面针对基础共享服务设计做了很多深入介绍，注意连贯起来阅读和理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663325945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317896,"user_name":"流云追风","can_delete":false,"product_type":"c1","uid":2611950,"ip_address":"","ucode":"16D738406CB191","user_header":"https://static001.geekbang.org/account/avatar/00/27/da/ee/63090718.jpg","comment_is_top":false,"comment_ctime":1635041374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635041374","product_id":100046301,"comment_content":"订单服务一般会冗余其他服务的部分信息，譬如会员ID和积分，这样在报表查询，小票打印以及订单推送至顾客时不用再访问会员服务","like_count":0},{"had_liked":false,"id":315162,"user_name":"ezekiel","can_delete":false,"product_type":"c1","uid":1158795,"ip_address":"","ucode":"AB4AB6FA8612D8","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/8b/43ce01ca.jpg","comment_is_top":false,"comment_ctime":1633715086,"is_pvip":false,"replies":[{"id":"120390","content":"这个应该是商品聚合服务，从领域来说，职责属于商品域，商品域包含商品聚合服务和商品基础服务，商品基础服务符合正交原则。","user_name":"作者回复","user_name_real":"编辑","uid":"1268522","ctime":1641977100,"ip_address":"","comment_id":315162,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633715086","product_id":100046301,"comment_content":"老师您好！<br>在服务的完整性原则中，套餐商品的价格应该由商品服务提供，商品服务应该访问优惠服务获取信息，然后返回调用方法，但是在下面正交原则中，基础服务是不应该访问其他服务的。这里有些困惑","like_count":0,"discussions":[{"author":{"id":1268522,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2a/83c3cb2d.jpg","nickname":"王庆友","note":"","ucode":"90D8743C4A6C79","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545498,"discussion_content":"这个应该是商品聚合服务，从领域来说，职责属于商品域，商品域包含商品聚合服务和商品基础服务，商品基础服务符合正交原则。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641977100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271939,"user_name":"Geek_0d2e5d","can_delete":false,"product_type":"c1","uid":2269023,"ip_address":"","ucode":"7D4BAEFA6E1035","user_header":"","comment_is_top":false,"comment_ctime":1609891272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609891272","product_id":100046301,"comment_content":"老师讲的太好了，赞","like_count":0},{"had_liked":false,"id":208836,"user_name":"Robin康F","can_delete":false,"product_type":"c1","uid":1962437,"ip_address":"","ucode":"618F8686D1231D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJyLCPnVq4gKMN5jPcd9wVVEXtZMibCNAkLrJf4uZKdV40Nelb3uPtCETfuw5hbbC693sUHQpRUMiaA/132","comment_is_top":false,"comment_ctime":1587446593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587446593","product_id":100046301,"comment_content":"冗余数据是比较常见的一种做法，目的是减少查询和交互次数，基本原则是 1数据变化很小 2非核心数据，可以提高性能，但对于变化多、复杂度高、和核心链路的数据冗余，要分析其影响，一般是不能冗余的","like_count":0},{"had_liked":false,"id":207405,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1587083564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587083564","product_id":100046301,"comment_content":"冗余存储，我觉得是必要的。好处是，减少外部的调用。也有坏处，别处修改，无法感知。但是冗余还是有必要的，可以使用时效性冗余，或者基本不变的冗余。","like_count":0},{"had_liked":false,"id":198499,"user_name":"梁中华","can_delete":false,"product_type":"c1","uid":1006789,"ip_address":"","ucode":"52FE40242CBAD0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","comment_is_top":false,"comment_ctime":1585453925,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585453925","product_id":100046301,"comment_content":"现在很多做垂直Saas的平台属于那一层服用？感觉产品级已经不够用了，需要平台级服用","like_count":0},{"had_liked":false,"id":197477,"user_name":"追忆似水年华","can_delete":false,"product_type":"c1","uid":1160192,"ip_address":"","ucode":"C1D7C0DD7E7411","user_header":"https://static001.geekbang.org/account/avatar/00/11/b4/00/661fb98d.jpg","comment_is_top":false,"comment_ctime":1585381048,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585381048","product_id":100046301,"comment_content":"“业务上的复用比纯粹的技术复用有更高的价值，我们要尽量往这个方向上靠”，这句话是精髓，不管用了什么技术，最终都要落地到一个个具体的业务，对大部分开发者来说，日常的工作也是服务于业务。那么为了让业务的开发更高效，就要尽量实现业务层的复用，受教了。","like_count":0},{"had_liked":false,"id":187891,"user_name":"ROCKETsFORWARD","can_delete":false,"product_type":"c1","uid":1158873,"ip_address":"","ucode":"D171E33E546FD2","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/d9/7a732188.jpg","comment_is_top":false,"comment_ctime":1584268176,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584268176","product_id":100046301,"comment_content":"空间换时间的做法。有时为了避免跨库join，需要保证查询效率时，可以本地冗余其他服务的数据。一般情况下冗余不常变化的数据。当冗余数据有变化的时候，可以开启定时任务在业务不繁忙的时候进行更新，保证最终一致性。","like_count":0},{"had_liked":false,"id":185559,"user_name":"雨霖铃声声慢","can_delete":false,"product_type":"c1","uid":1052607,"ip_address":"","ucode":"656D98310C6DA3","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/bf/ee93c4cf.jpg","comment_is_top":false,"comment_ctime":1583633438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583633438","product_id":100046301,"comment_content":"冗余存储其他服务的数据好处是查询效率高，单个服务就能满足业务需求，无序聚合查询其他服务，但是也要注意冗余的度，要综合考虑到数据一致性和性能来做决定。","like_count":0},{"had_liked":false,"id":185453,"user_name":"doannado","can_delete":false,"product_type":"c1","uid":1169379,"ip_address":"","ucode":"16CF3E7C2E0827","user_header":"https://static001.geekbang.org/account/avatar/00/11/d7/e3/7e07ae99.jpg","comment_is_top":false,"comment_ctime":1583586056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583586056","product_id":100046301,"comment_content":"20200307 高复用 代码 技术组件 业务实体 业务流程 业务 完整性 一致性 正交 基础服务边界划分原则等","like_count":0},{"had_liked":false,"id":185410,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1583576199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583576199","product_id":100046301,"comment_content":"在持久化数据中还是尽量少冗余其他服务的数据，因为维护一致性的开销较大。<br>如果某些服务数据是热点且变化频率不高，则可使用外部缓存提升性能，如redis。<br>如果热点数据变化大且一致性要求强，还是每次去调服务接口吧。","like_count":0},{"had_liked":false,"id":185388,"user_name":"卫江","can_delete":false,"product_type":"c1","uid":1101226,"ip_address":"","ucode":"DE2F7A6916F1A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","comment_is_top":false,"comment_ctime":1583572153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583572153","product_id":100046301,"comment_content":"之所以冗余数据，说明该服务需要这些数据，但是又不想因为获取该冗余的数据而对其他的服务产生依赖而违背了我们的正交原则，但是就会有一致性问题，多个服务维护同一份数据的问题，如果这一块的冗余可以通过聚合层来避免，把相关的这一块的逻辑放在上层的聚合层来减少底层的冗余。","like_count":0},{"had_liked":false,"id":185325,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1024763,"ip_address":"","ucode":"F6B5C64BC99FB7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/fb/94af9cf1.jpg","comment_is_top":false,"comment_ctime":1583561744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583561744","product_id":100046301,"comment_content":"我们在落地服务时，有时会冗余存储其它服务的数据。典型的空间换时间的做法。对于特定业务需求避免了服务间的联合查询，简化实现难度减少时间消耗。但要注意冗余数据带来的一致性问题。","like_count":0},{"had_liked":false,"id":185035,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1583468608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583468608","product_id":100046301,"comment_content":"冗余数据是为了业务实现的方便和效率吧，应该不能无条件的否决，但如果后续无法控制住这些数据的生长，可能会带来问题。<br><br>老师的课太赞了，篇篇精华，信息量大，又都重点明确。<br><br>我停下来的感觉，就是要紧紧的抓住服务是为业务服务的，业务是由数据和规则实现的。可扩展的下层是可复用，复用的前提是清晰的边界及正交分解的服务。<br><br>划分边界时，就是要紧紧的围绕数据和规则，做到不同服务间的数据交换最少化，规则上互相不调用。（又想到了设计模式中的单一职责原则和迪米特原则等）<br><br>然后通过上层的聚合服务去平台化、通用化这些底层基础服务，从而做到层次分明。","like_count":0},{"had_liked":false,"id":184951,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1583457642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583457642","product_id":100046301,"comment_content":"冗余数据的作用，我认为是为了提高查询性能，老师的课非常清晰到位，如果再附上一些代码就完美了","like_count":0},{"had_liked":false,"id":184938,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1583455990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583455990","product_id":100046301,"comment_content":"要点总结:<br>业务上的复用比纯粹的技术复用有更高的价值，我们要尽量往这个方向上靠。<br>在实践中，落地基础服务是实现业务复用的有效方式，而基础服务边界的划分，它有科学的成分，但更多的是一种艺术。一般有:完整性、一致性、正交性。<br>思考题:<br>冗余数据可为了提升性能。","like_count":0}]}