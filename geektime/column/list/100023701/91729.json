{"id":91729,"title":"24 | 技术债务：是继续修修补补凑合着用，还是推翻重来？","content":"<p>你好，我是宝玉，今天我想与你讨论一下关于技术债务的问题。</p><p>做开发的同学对以下场景应该不会陌生：</p><ul>\n<li>为了赶项目进度，单元测试代码就来不及写了，打算以后再补；</li>\n<li>随着需求的变化，原本的架构设计已经不能很好地满足新的需求，但是又不想对架构做改动，于是就绕开架构设计增加了很多代码；</li>\n<li>一个旧的系统，没有文档没有注释，技术老旧，难以维护。</li>\n</ul><p>这些问题，如果没有及时修正，就会导致代码臃肿、系统效率低下，难以维护，也难以新增功能。</p><p>有一个很形象的名词叫“技术债务”，用来形容上面这些架构或代码上的质量问题。</p><p>所以今天的课程，我将带你一起来了解一下什么是技术债务，它形成的原因是什么，以及怎么来管理技术债务。</p><h2>什么是技术债务？</h2><p>我们在学项目管理金三角时，有一张表示软件质量与时间、成本、范围关系的三角形图，也特别解释了为什么质量要放在三角形中间，因为质量往往是其他三个因素平衡后结果的体现。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/f7/7fa5c8351b4590a2bc8a482955c133f7.jpg?wh=2284*1077\" alt=\"\"></p><p>范围不减，成本不增加，还想节约时间走捷径，就会影响到质量。这个“质量”，不只是产品质量，还有架构质量和代码质量。这种对质量的透支，就是一种债务。<strong>而技术债务，就是软件项目中对架构质量和代码质量的透支。</strong></p><p>技术债务确实是个形象生动的比喻，让你意识到它是和成本挂钩的，而且技术债务也有金融债务的一些特点，比如有利息，再比如技术债务也有好的一面。</p><!-- [[[read_end]]] --><h4>技术债务是有利息的</h4><p>债务的“利息”，就是在后面对软件做修改的时候，需要额外的时间成本。</p><p>假设我们做一个项目，在刚开始时，架构良好代码整洁，添加一个功能可能需要4天时间。随着项目不断维护，因为走捷径积累了一些技术债务，这时候再开发一个同样复杂度的功能就需要5天时间了。</p><p>这多出来的1天，就是技术债务造成的利息。因为你需要时间去梳理现在臃肿的代码，以找到合适的位置添加代码；修改代码后还可能导致原有系统不稳定，需要额外的时间去修复系统不稳定的问题。</p><h4>技术债务不一定都是坏的</h4><p>现实中，如果是贷款买辆豪车，一方面要支付利息，一方面车子一直在贬值，这不一定是个良性的债务；但如果你贷款买房子，虽然支付了利息，但如果房子升值，这个债务其实是良性的。</p><p>在软件项目中，也经常会刻意的欠一些技术债务，提升短期的开发速度，让软件能尽快推出，从而抢占市场；还有像快速原型开发模型，通过欠技术债务的方式快速开发快速验证，如果验证不可行，甚至这笔技术债务都不需要偿还了。</p><p>但技术借债也一样不能是无限制的，因为借债越多，利息越大，当收益抵不过利息时，就会陷入恶性循环，导致开发效率低下，进度难以保障。</p><p>所以对于项目中的债务，我们要清楚的知道有哪些技术债务，以及它给项目带来的收益和产生利息，这样才能帮助我们管理好这些债务。</p><h2>技术债务产生的原因</h2><p>如果现实中有人负债累累，那么多半有几个原因：这人对债务没有规划、生活所迫不得不借债、为了长远利益而临时借债、不知情的情况下欠了债务。</p><p>其实技术债务产生的原因也类似，所以《重构》一书的作者Martin Fowler把技术债务产生的原因分成了两个维度：</p><ol>\n<li>轻率（reckless）还是谨慎（prudent）；</li>\n<li>有意（deliberate）还是无意（inadvertent）。</li>\n</ol><p>这两个维度正好可以划分成四个象限，如下图所示：<br>\n<a href=\"http://martinfowler.com/bliki/TechnicalDebtQuadrant.html\"><img src=\"https://static001.geekbang.org/resource/image/9e/88/9ee240f45ed039399819232419bb3088.png?wh=512*384\" alt=\"\" title=\"图片来源：Technical Debt Quadrant\"></a></p><ul>\n<li><strong>轻率/有意的债务</strong></li>\n</ul><p>这个象限，反映的是团队因为成本、时间的原因，故意走捷径没有设计、不遵守好的开发实践，对于债务没有后续的改进计划的情况。</p><p>例如不做设计直接编码，后期也没有打算重构代码。或者是团队成员以新手程序员为主，没有足够的资深程序员指导和审查代码。</p><p>这样产生的债务，短期可能还好，但是因为技术债务会一直积累，会导致利息越来越多，最终带来的负面效果会越来越大。</p><ul>\n<li><strong>谨慎/有意的债务</strong></li>\n</ul><p>这个象限，则反映的是团队清楚知道技术债务的收益和后果，并且也制定了后续的计划去完善架构和提升代码质量的情况。</p><p>比如说为了尽快发布产品，先采用“快猛糙”的方式开发，后续再对代码进行重构。</p><p>这样产生的债务，因为能及时偿还，所以既可以短期有一定时间上的收益，长期也不会造成负面影响。</p><ul>\n<li><strong>轻率/无意的债务</strong></li>\n</ul><p>这个象限，反映了团队不知道技术债务，也不知道要后续要偿还技术债务的情况。</p><p>比如说一些开发团队对于什么是架构设计，什么是好的开发实践一无所知，代码一团糟。</p><p>这样产生的债务是最危险的，因为既没得到技术债务的收益，还要偿还其产生的利息。</p><ul>\n<li><strong>谨慎/无意的债务</strong><br>\n这个象限反映了团队其实很重视架构设计和技术债务，但因为业务的变化，或者其他客观因素的原因，造成技术债务的产生。</li>\n</ul><p>比如说最初设计的时候，无法准确预测后面业务的发展，随着业务的发展，设计无法满足好新的需求。</p><p>这样产生的债务难以避免，但如果能及时的对架构升级、重构，就能保证不会造成严重的影响。</p><p>以上就是软件项目中的四种技术债务，每一种技术债务产生的原因都不尽相同，对其处理的策略不同，也会造成不同的影响。</p><h2>如何管理技术债务？</h2><p>既然技术债务有利息也有收益，那么我们怎么能保证软件项目中的收益大于支付的利息呢？</p><p>Martin Fowler画过一张图，来形象的描述了设计、时间和开发速度的关系。没有设计直接写代码，从短期看确实是节约时间的，但是跨过一个临界点后，开发速度会急剧下降。</p><p><a href=\"http://martinfowler.com/bliki/DesignStaminaHypothesis.html\"><img src=\"https://static001.geekbang.org/resource/image/79/16/7951ea8fb6d669260055ab07c624fb16.png?wh=618*329\" alt=\"\" title=\"图片来源：Is it worth the effort to design software well?\"></a></p><p>技术债务的收益和利息也是类似的道理，最初的时候，利息低收益高，欠一些技术债务是会节约时间的，但是超过一个临界点后，利息高收益低，就会大大降低开发效率。</p><p>所以最好能让技术债务控制在临界点之下，这就要求我们能充分了解目前项目中的债务情况，然后才好制定相应的策略，从而达到控制债务的目的。</p><h4>识别技术债务</h4><p>如果是现实中的债务，查查银行账户就很容易知道是不是欠债了，而技术债务却没那么直观，但识别技术债务是很关键一步，只有发现系统中的技术债务，才能去找到合适的方案解决它。</p><p>你要是细心观察，还是可以通过很多指标来发现软件项目存在的技术债务。比如说：</p><ul>\n<li>\n<p><strong>开发速度降低：</strong>通常项目正常情况下，在相同的时间间隔下，完成的任务是接近的。尤其是使用敏捷开发的团队，每个任务会评估故事分数，每个Sprint能完成的故事分数是接近的。但是如果单位时间内能完成的任务数明显下降，那很可能是技术债务太多导致的。</p>\n</li>\n<li>\n<p><strong>单元测试代码覆盖率低：</strong>现在大部分语言都有单元测试覆盖率的检测工具，通过工具可以很容易知道当前项目单元测试覆盖率如何，如果覆盖率太低或者下降厉害，就说明存在技术债务了。</p>\n</li>\n<li>\n<p><strong>代码规范检查的错误率高：</strong>现在主流的语言也有各种规范和错误检查工具，也叫lint工具，比如Javascript就有eslint，Swift有SwiftLint，python有pylint。通过各种lint工具，可以有效发现代码中潜在的错误和不规范之处，如果错误率高，则说明代码质量不够好。</p>\n</li>\n<li>\n<p><strong>Bug数量越来越多：</strong>正常情况下，如果没有新功能开发，Bug数量会越来越少。但是如果Bug数量下降很慢，甚至有增多的迹象，那说明代码质量或者架构可能存在比较大问题。</p>\n</li>\n</ul><p>除了上面这些指标，其实你还能找到一些其他指标，比如你用的语言或者框架的版本是不是太老，早已无人更新维护了；比如开发人员总是需要加班加点才能赶上进度，如果架构良好、代码质量良好，这些加班本是可以避免的。</p><h4>选择处理技术债务策略</h4><p>在识别出来技术债务后，就需要考虑如何来解决这些技术债务了。解决技术债务有三种策略。</p><ul>\n<li><strong>重写：推翻重来，一次还清</strong></li>\n</ul><p>将老系统推翻重写是很多程序员最热衷干的事情之一了。重写系统是一种优缺点都很明显的策略，这有点像你试图把债务一次性还清。</p><p>优点是你可以针对当前的需求和业务发展特点，重新进行良好的设计，精简掉不需要的功能和代码。缺点就是重写通常工作量很大，在新系统还没完成之前，同时还要对旧系统维护增加新功能，压力会非常大；另外新写的系统，重新稳定下来也需要一段时间。</p><ul>\n<li><strong>维持：修修补补，只还利息</strong></li>\n</ul><p>维持现状，只对严重问题修修补补，这其实是常见的一种策略，就跟还债的时候只还利息一样。</p><p>修修补补相对成本低，不用投入太大精力，如果项目不需要新增功能，只需要维护还好，如果项目还持续要新增功能，越到后面，维护的成本就越高了。</p><ul>\n<li><strong>重构：新旧交替，分期付款</strong></li>\n</ul><p>重构相对是一种比较折中的策略，就跟我们采用分期付款的方式偿还贷款一样。</p><p>每次只是改进系统其中一部分功能，在不改变功能的情况下，只对内部结构和代码进行重新整理，不断调整优化系统的结构，最终完全偿还技术债务。这种方式优点很多，例如不会导致系统不稳定，对业务影响很小。缺点就是整个过程耗时相对更久。</p><p>这三种策略并没有绝对好坏，需要根据当前项目场景灵活选择。有个简单原则可以帮助你选择，<strong>那就是看哪一种策略投入产出比更好。</strong></p><p>无论选择哪种策略，都是要有投入的，也就是要有人、要花时间，而人和时间就是成本；同样，对于选择的策略，也是有收益的，比如带来开发效率的提升，节约了人和时间，这就是收益。</p><p>如果收益高于投入，那这事可以考虑做，否则就要慎重考虑。对一个生命周期不会太久，或者没有什么新功能开发的系统，花大力气去重构、重写是不合算的，不如维持现状。而如果有新技术新产品出现，可以以极低的成本替代原有系统，这样重写就是个好方案。</p><p>比如说我们项目中有个很老的自己写的CMS系统，问题很多也没法维护，于是最近找了一个开源的CMS系统，把原有的数据一导入，马上就很好用了，也没有花多少时间。</p><p>通常，如果你纠结于不知道该选择哪一种策略时，那就选择重构的策略，因为这是相对最稳妥有效的。</p><h4>实施策略</h4><p>当你选择好用哪种策略处理技术债务之后，就可以实施你的策略了。不同的策略可能实施方式上略有不同。</p><ul>\n<li>对于重写的策略，要当作一个正式的项目来立项，按照项目流程推进；</li>\n<li>对于重构的策略，要把整个重构任务拆分成一个个小任务，放到项目计划中，创建成Ticket，放到任务跟踪系统中跟踪起来；</li>\n<li>对于维持的策略，也要把需要做的修补工作作为任务，放到计划中，放到任务跟踪系统中。</li>\n</ul><p><strong>实施策略的关键就在于要落实成开发任务，作为项目计划的一部分。</strong></p><h4>预防才是最好的方法</h4><p>前面说的方法策略，都是针对已经存在的技术债务而言的。其实最好的方法是预防技术债务的产生。像下面这些方法，都是行之有效的预防措施：</p><ul>\n<li><strong>预先投资：</strong>好的架构设计、高质量代码就像一种技术投资，能有效减少技术债务的发生；</li>\n<li><strong>不走捷径：</strong>大部分技术债务的来源都是因为走捷径，如果日常能做好代码审查、保障单元测试代码覆盖率，这些行之有效的措施都可以帮助你预防技术债务；</li>\n<li><strong>及时还债：</strong>有时候项目中，因为进度时间紧等客观原因，导致不得不走捷径，那么就应该把欠下的技术债务记下来，放到任务跟踪系统中，安排在后续的开发任务中，及时还债及时解决，就可以避免债务越来越多。</li>\n</ul><p>如果团队能提高对技术债务的认识，防患于未然，就能让技术债务保持在一个合理的水平，不会影响到开发效率。</p><h2>总结</h2><p>今天，我带你一起了解了软件项目中技术债务的知识。解释了技术债务的概念，技术债务，就是软件项目中架构质量和代码质量的透支。</p><p>技术债务，也并不都是坏事，如果合理利用，就可以在短期内缩短时间，但是后期如果不偿还技术债务，也会对项目及个人造成不好的后果。</p><p>技术债务产生的原因有四个方面：轻率/有意的债务、谨慎/有意的债务、轻率/无意的债务和谨慎/无意的债务。</p><p>可以分三个步骤来管理技术债务：识别技术债务、选择处理策略和实施策略。处理策略有三种：推翻重写、修修补补和重构。</p><p>对于技术债务，是继续修修补补凑合着用，还是推翻重来？其实取决于哪一种策略的投入产出比更好，如果推翻重来代价太大，那么就应该谨慎考虑，不如先修修补补或者局部重构；如果修修补补难以维持，就要考虑重写或者重构。</p><p>对于技术债务，还是要在日常开发中有好的意识，不走捷径，防患未然，预防技术债务的发生。</p><h2>课后思考</h2><p>你现在的项目中，你能识别出来哪些技术债务？你打算采用哪种策略来管理你的技术债务呢？欢迎在留言区与我分享讨论。</p><p>感谢阅读，如果你觉得这篇文章对你有一些启发，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":88627,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1555976380,"is_pvip":true,"replies":[{"id":"31772","content":"是这样子的，磨刀不误砍柴工","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1555978013,"ip_address":"","comment_id":88627,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70275453116","product_id":100023701,"comment_content":"明白了为什么不要接到一个需求就马上写代码。没有经过设计的代码，后期维护成本极高。","like_count":17,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447850,"discussion_content":"是这样子的，磨刀不误砍柴工","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555978013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88705,"user_name":"clever_P","can_delete":false,"product_type":"c1","uid":1013858,"ip_address":"","ucode":"39AA52990C1AC0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/62/354b1873.jpg","comment_is_top":false,"comment_ctime":1555983803,"is_pvip":false,"replies":[{"id":"31888","content":"预防是最好的方法，也是要求最高的。<br><br>技术债务的问题确实是没有万能的解决方案，还是要先识别，然后理性客观的做一个方案，再有计划的去实施。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556076120,"ip_address":"","comment_id":88705,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40210689467","product_id":100023701,"comment_content":"对技术债务有深刻的感触，但凡对技术有深刻理解的人都会采取预防的策略。<br>对于已经欠下的技术债务，如果软件生命不会很快结束，维持的策略长期来看是不可取的，债务只会越来越多，问题也会越来越多，在业务紧的情况下，不只是透支研发成本，还会透支工程师的健康。对于重构的策略，个人理解是从局部到整体的，在输出结果不变的情况下，改善内部设计，但是对于大的结构设计缺陷，有时局部重构也不太好做，整体结构会有很多限制。对于重写，要对原有系统的业务功能和业务特点有细致的理解，对业务发展有较为清晰的认识，最最重要的是能够清楚识别原有系统的设计问题，有针对性的提出解决方案来处理这些问题，不然重写就真的只是重写一遍了。","like_count":9,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447872,"discussion_content":"预防是最好的方法，也是要求最高的。\n\n技术债务的问题确实是没有万能的解决方案，还是要先识别，然后理性客观的做一个方案，再有计划的去实施。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556076120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88655,"user_name":"易林林","can_delete":false,"product_type":"c1","uid":1049836,"ip_address":"","ucode":"27F84A3FCBBCAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/ec/0539c89d.jpg","comment_is_top":false,"comment_ctime":1555979761,"is_pvip":false,"replies":[{"id":"31887","content":"“在你手中的技术债务就应该当成自己欠下的技术债务来解决，这样才能持续性的做好自己分内和分外的事情，工作起来才能得心应手。”👍👍<br><br>说的真好，偿还技术债务，从自己做起！","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556075707,"ip_address":"","comment_id":88655,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23030816241","product_id":100023701,"comment_content":"在研发过程中，产生技术债务的时候，稍微有点技术功底的人，或多或少都会有感觉的。比如：有重复代码的时候，会意识到好像已经写过了；函数命名的时候，会意识到好像有个相似的名称已经命名过；函数行数过多的时候，自己心里会感觉不舒服等等。更有甚者，你去整理这些问题还会被同事标上“强迫症”患者的称号，还是放弃吧。技术债务就这样在外部和内部双重压力下自然而然的产生了。<br><br>那么如何产生有利的技术债务呢？我觉得应该从公司制度、研发流程、个人素质培养三方面入手。公司制度实际上是为领导层准备的，领导层以身作则去影响下面的员工，员工就没有冒犯的理由，比如：合理的奖惩制度，要做到公平合理，一视同仁；研发流程主要是让团队成员知道自己什么时候该做什么事情，如何去按照指定的约束去做好自己的事情，除此之外，还应该给予明确的成长上升空间；员工素质的培养则需要从一个人的职业素质，技能优化，团队协作方面着手，让他们拥有积极努力的心态参与到工作中去，这基本上就能解决最基础的技术债务问题（领导决策错误产生的技术债务另当别论）。<br><br>在我遇到过的技术债务中，主要由领导决策、产品业务逻辑、技术最初选型、技术更新换代、团队综合素质中的一种或几种导致。对此，我只能说个人能力达到什么层次就应该去解决什么层次的技术债务，不能去推诿和落井下石，在你手中的技术债务就应该当成自己欠下的技术债务来解决，这样才能持续性的做好自己分内和分外的事情，工作起来才能得心应手。","like_count":5,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447858,"discussion_content":"“在你手中的技术债务就应该当成自己欠下的技术债务来解决，这样才能持续性的做好自己分内和分外的事情，工作起来才能得心应手。”👍👍\n\n说的真好，偿还技术债务，从自己做起！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556075707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94999,"user_name":"Joey","can_delete":false,"product_type":"c1","uid":1013698,"ip_address":"","ucode":"D0A23AE264AC09","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/c2/1740f435.jpg","comment_is_top":false,"comment_ctime":1557936101,"is_pvip":false,"replies":[{"id":"34079","content":"这种开发流程问题肯定还是要自上而下推才能推得动。<br><br>我觉得首先应该先找一两个小项目组试点，摸索出一套适合你们的最佳实践，形成流程规范，比如说基于Github Flow，把CI（持续集成）环境搭建起来（如果没有的话），把你说的SonarLint、自动化测试加入到CI流程中。<br><br>再就是逐步扩大范围，在更多项目组推行最佳实践和流程规范，并且改进流程规范。<br><br>最后就必须要借助行政手段强制推行了。<br><br>因为我对你的情况不是很了解，先简单回复一下，你有后续问题可以继续留言。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1558062328,"ip_address":"","comment_id":94999,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18737805285","product_id":100023701,"comment_content":"请教宝玉老师：<br><br>1.如何更好地推广SonarLint白盒扫描工具。<br>2.如何要求各开发团队更好地，有效地做代码走查，而不流于形式。（我们现在使用Gerrit）<br>3.如何要求开发人员有效实施单元测试。<br><br>我们一个研发部门人数1000左右，由于历史原因，大家根本不重视单元测试、代码走查以及白盒扫描，或者说这只是留于形式，走流程。久而久之，开发人员觉得我不关心这些东西，也没有出现很严重的事情啊，反正有测试人员对质量把最后一道关，我为什么要浪费时间呢？<br><br>但是现在随着业务越来越多，系统越来越复杂，要从研发过程上加强质量，面临以上三个很突出的问题，请宝玉老师支支招，多谢老师解答！","like_count":4,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450290,"discussion_content":"这种开发流程问题肯定还是要自上而下推才能推得动。\n\n我觉得首先应该先找一两个小项目组试点，摸索出一套适合你们的最佳实践，形成流程规范，比如说基于Github Flow，把CI（持续集成）环境搭建起来（如果没有的话），把你说的SonarLint、自动化测试加入到CI流程中。\n\n再就是逐步扩大范围，在更多项目组推行最佳实践和流程规范，并且改进流程规范。\n\n最后就必须要借助行政手段强制推行了。\n\n因为我对你的情况不是很了解，先简单回复一下，你有后续问题可以继续留言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558062328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89845,"user_name":"果然如此","can_delete":false,"product_type":"c1","uid":1210003,"ip_address":"","ucode":"C7543BD0A67505","user_header":"https://static001.geekbang.org/account/avatar/00/12/76/93/c78a132a.jpg","comment_is_top":false,"comment_ctime":1556281475,"is_pvip":false,"replies":[{"id":"32288","content":"👍技术债务最重要的一步就是识别出来问题在哪，然后再有一个稳妥的方案。<br><br>你这个问题，我建议你先把相应的自动化测试代码补上，然后保证有一定测试覆盖之后，再逐步用新模块替换旧模块，最终完全替换。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556392010,"ip_address":"","comment_id":89845,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14441183363","product_id":100023701,"comment_content":"最近遇到一些Bug 数量越来越多技术债务，而且都是同一类问题，因为数据准确性关系到月月末统计工资，所以临时解决方案是修复已知的错误数据。由于这个模块以前是其他同事做的，我在本周花了几天时间研究，得出结论是原设计没考虑到业务变化后的相关联数据如何跟着同步变化，导致了很多相关统计报表错误。<br>这个债务临时解决办法只是头疼医头脚疼医脚，最终还要抽出时间根本解决数据同步变化问题。","like_count":3,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448286,"discussion_content":"👍技术债务最重要的一步就是识别出来问题在哪，然后再有一个稳妥的方案。\n\n你这个问题，我建议你先把相应的自动化测试代码补上，然后保证有一定测试覆盖之后，再逐步用新模块替换旧模块，最终完全替换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556392010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88615,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1555971115,"is_pvip":false,"replies":[{"id":"31825","content":"重构的要领我觉得两点：<br>第一：你要先写一部分自动化测试代码，保证重构后这些测试代码能帮助你检测出来问题<br>第二：在重构模块的时候，老的代码先保留，写新的代码，然后指向新代码，或者用特定开关控制新旧代码的指向（这样上线后可以自己先测试，有问题也可以及时关闭），然后让自动化测试通过，再部署测试，新代码没问题了，删除旧代码","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556029095,"ip_address":"","comment_id":88615,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14440873003","product_id":100023701,"comment_content":"老师能不能具体讲讲重构有哪些原则和要注意的地方，感觉一直得不到要领","like_count":3,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447848,"discussion_content":"重构的要领我觉得两点：\n第一：你要先写一部分自动化测试代码，保证重构后这些测试代码能帮助你检测出来问题\n第二：在重构模块的时候，老的代码先保留，写新的代码，然后指向新代码，或者用特定开关控制新旧代码的指向（这样上线后可以自己先测试，有问题也可以及时关闭），然后让自动化测试通过，再部署测试，新代码没问题了，删除旧代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556029095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187739,"user_name":"白泗小林","can_delete":false,"product_type":"c1","uid":1228471,"ip_address":"","ucode":"CEF6A23B70947D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/b7/638b5d30.jpg","comment_is_top":false,"comment_ctime":1584203148,"is_pvip":false,"replies":[{"id":"75520","content":"很多开发人员对于开发设计文档有个误区，认为文档需要有特定格式，需要美观大方，文字优美，插图形象生动，所以裹足不前，不敢写不会写，或者认为时间不够。<br><br>其实开发文档最核心的两个目的：<br>1. 帮助你自己想清楚<br>2. 帮助别人搞清楚你是怎么想的<br><br>搞清楚目的后，怎么写反而不重要，只要能让你自己把设计想清楚，只要能让其他人搞清楚你的想法，至于是画图还是文字还是手书，都不重要。<br><br>比如我在拿到一个需求后，会写一个简单设计文档，一般就用Keynote写几页Slides，没有多少文字，花几个框框图表达模块关系，在找相关人约着开个会，就Slides讨论一下，就能把很多问题确认下来，并不需要花多少时间在文档上面。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1585897157,"ip_address":"","comment_id":187739,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10174137740","product_id":100023701,"comment_content":"产品经理讲完产品文档，留给开发的时间根本不够写文档。相信很多小公司的开发都有同感","like_count":2,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487222,"discussion_content":"很多开发人员对于开发设计文档有个误区，认为文档需要有特定格式，需要美观大方，文字优美，插图形象生动，所以裹足不前，不敢写不会写，或者认为时间不够。\n\n其实开发文档最核心的两个目的：\n1. 帮助你自己想清楚\n2. 帮助别人搞清楚你是怎么想的\n\n搞清楚目的后，怎么写反而不重要，只要能让你自己把设计想清楚，只要能让其他人搞清楚你的想法，至于是画图还是文字还是手书，都不重要。\n\n比如我在拿到一个需求后，会写一个简单设计文档，一般就用Keynote写几页Slides，没有多少文字，花几个框框图表达模块关系，在找相关人约着开个会，就Slides讨论一下，就能把很多问题确认下来，并不需要花多少时间在文档上面。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585897157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117326,"user_name":"Mr.Chen","can_delete":false,"product_type":"c1","uid":1559182,"ip_address":"","ucode":"2AF23AAF147037","user_header":"https://static001.geekbang.org/account/avatar/00/17/ca/8e/4b1d7063.jpg","comment_is_top":false,"comment_ctime":1564024342,"is_pvip":false,"replies":[{"id":"43278","content":"这个三角形，更多的是反应各个因素的影响关系，不完全对应几何上的反应 😛","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1564248827,"ip_address":"","comment_id":117326,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10153958934","product_id":100023701,"comment_content":"看了几次项目管理金三角后，发现有意思的是，这个图里，时间和成本的缩减，都会引起三角形面积减少，也就是质量变差，范围缩减也会引起三角形面积减少，但它应该是提升质量吧。😄","like_count":3,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459914,"discussion_content":"这个三角形，更多的是反应各个因素的影响关系，不完全对应几何上的反应 😛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564248827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90149,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1556432979,"is_pvip":false,"replies":[{"id":"32346","content":"需要综合评估一下，如果很稳定也不重要，那就别动了，补一点文档。<br>如果很重要又不稳定，建议对其立项，用开源产品或者商业产品或者新技术实现同样的需求，然后换掉。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556476535,"ip_address":"","comment_id":90149,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10146367571","product_id":100023701,"comment_content":"像我们公司有老系统，十年了，程序员都换完了，用perl写的，基本上都没有几个人懂perl<br>无法重写、也无法重构怎搞？","like_count":2,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448406,"discussion_content":"需要综合评估一下，如果很稳定也不重要，那就别动了，补一点文档。\n如果很重要又不稳定，建议对其立项，用开源产品或者商业产品或者新技术实现同样的需求，然后换掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556476535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88847,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1556012210,"is_pvip":true,"replies":[{"id":"31849","content":"突然感觉我们是金融行业从业者😄","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556064440,"ip_address":"","comment_id":88847,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10145946802","product_id":100023701,"comment_content":"技术债务不全坏，与金融债务一样，需要具体问题具体分析。轻率&amp;有意的债务要避免。谨慎&amp;有意的债务有收益。轻率&amp;无意的债务要警惕。谨慎&amp;无意的债务要改变。识别债务防患于未然。根据成本收益分析，决定重写（一次性还款）、维持（只还利息）还是重构（分期付款）。","like_count":3,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447921,"discussion_content":"突然感觉我们是金融行业从业者😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556064440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88767,"user_name":"J.M.Liu","can_delete":false,"product_type":"c1","uid":1200037,"ip_address":"","ucode":"B2CB84B8E923A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/a5/71358d7b.jpg","comment_is_top":false,"comment_ctime":1555996069,"is_pvip":false,"replies":[{"id":"31889","content":"是的，需要先识别，然后做方案，再做计划。线上项目不能太激进，不然代价很大的。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556076220,"ip_address":"","comment_id":88767,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10145930661","product_id":100023701,"comment_content":"偿还技术债务，最重要的还是要明白自己在哪个地方欠了债，深究问题的根源，然后才去寻找应对措施。比如你是因为流程不规范，没有必要的代码审查，那就应该规范流程，否则重写了之后，依旧是一堆乱代码。是因为测试没有做充足，那就应该把测试补上。是语言或者框架过时了，那么就要考虑更换语言框架了。但无论如何，最好还是分模块、有计划地把重构纳入到迭代中去逐步完成。防止步子迈太大，总是容易出问题","like_count":2,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447892,"discussion_content":"是的，需要先识别，然后做方案，再做计划。线上项目不能太激进，不然代价很大的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556076220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175072,"user_name":"巫山老妖","can_delete":false,"product_type":"c1","uid":1056037,"ip_address":"","ucode":"B35E2CF1B3B04E","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/25/c4cc1e9f.jpg","comment_is_top":false,"comment_ctime":1580546837,"is_pvip":true,"replies":[{"id":"69253","content":"👍你考虑的很周全，引入新技术要慎重，需要先预研，再小规模试用，最后再逐步替换。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1581739554,"ip_address":"","comment_id":175072,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5875514133","product_id":100023701,"comment_content":"我们项目中的技术债务有很多，举个例子，App最开始采用的动态化技术是React Native，但随着技术的演变RN的弊端逐渐暴露出来，比如问题定位困难，需要联动前端，后面Flutter出来之后，老大又想趁着这次技术更新将动态化切成Flutter，但这不是个简单的工作，需要评估好成本，然后去逐步验证。对我来说项目中采用的旧技术方案就是技术债务，承载了很多业务需求。我这边打算采用的策略是重构，新旧交替，分期付款。 在过渡期间做好降级策略，避免引入新技术导致线上问题，能够降级继续使用RN。等到Flutter技术应用稳定之后，才把旧的一套完全废除不再维护。","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482615,"discussion_content":"👍你考虑的很周全，引入新技术要慎重，需要先预研，再小规模试用，最后再逐步替换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581739554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135052,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1568990102,"is_pvip":false,"replies":[{"id":"51930","content":"1. 技术债务通常是指技术层面的，比如说代码质量底下，缺少良好的架构设计，缺少自动化测试覆盖等等，最终技术债务导致的结果就是产品质量低，难以响应需求的变化等<br><br>2. 重构和接口设计是两个不同概念，重构是对代码或系统结构进行调整优化，接口设计是架构设计的一部分。<br><br>大的系统重构也需要先进行架构的设计，其中包括接口的设计，在设计的时候就要决定新的接口是否兼容老的接口，设计完成后，在重构时，就应该遵循设计时定义的接口设计。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1569179701,"ip_address":"","comment_id":135052,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5863957398","product_id":100023701,"comment_content":"1、技术债务是不是仅是产品质量低。2、重构：如何作好新老系统接口的一致性。","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468021,"discussion_content":"1. 技术债务通常是指技术层面的，比如说代码质量底下，缺少良好的架构设计，缺少自动化测试覆盖等等，最终技术债务导致的结果就是产品质量低，难以响应需求的变化等\n\n2. 重构和接口设计是两个不同概念，重构是对代码或系统结构进行调整优化，接口设计是架构设计的一部分。\n\n大的系统重构也需要先进行架构的设计，其中包括接口的设计，在设计的时候就要决定新的接口是否兼容老的接口，设计完成后，在重构时，就应该遵循设计时定义的接口设计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569179701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98357,"user_name":"williamqian","can_delete":false,"product_type":"c1","uid":1028496,"ip_address":"","ucode":"A50FA554C9956A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/eZwkbhJPGg2yAUG5Qv9N1HGrGVUYW0ny3chic69icJPpoXPPsm0TUfONzZzJj6nlQ5nkU02ukCicoBv6NPvYt4FuA/132","comment_is_top":false,"comment_ctime":1558966957,"is_pvip":false,"replies":[{"id":"35254","content":"👍谢谢总结分享","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1559027382,"ip_address":"","comment_id":98357,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853934253","product_id":100023701,"comment_content":"写代码只是最后一步，前期的思考设计很重要。","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451655,"discussion_content":"👍谢谢总结分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559027382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90310,"user_name":"hua168","can_delete":false,"product_type":"c1","uid":1065255,"ip_address":"","ucode":"CFF9A7E86EBA48","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/27/3ff1a1d6.jpg","comment_is_top":false,"comment_ctime":1556478015,"is_pvip":false,"replies":[{"id":"32365","content":"是的，就是一个普通的软件项目，有需求说明，然后立项开发。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556500116,"ip_address":"","comment_id":90310,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851445311","product_id":100023701,"comment_content":"十年前的系统perl写的，很重要的，没办法维护，经常他会出问题，效率低下。<br>如果用Go重写的话，之前的perl开发走完了，<br>那如果重写，是按照业务逻辑来重写吗？<br><br>就问那些经常操作人了解有哪些功能，结合他们的讲解，把业务功能列出来？然后用Go来重写对吧？","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448465,"discussion_content":"是的，就是一个普通的软件项目，有需求说明，然后立项开发。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556500116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88943,"user_name":"Charles","can_delete":false,"product_type":"c1","uid":1001410,"ip_address":"","ucode":"32646D78CC0389","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/c2/e9fa4cf6.jpg","comment_is_top":false,"comment_ctime":1556030688,"is_pvip":false,"replies":[{"id":"31892","content":"单元测试、自动化测试在第27篇会再讲，希望到时候能解答你的一些困惑，当然也建议你看一些书，毕竟一些语言相关的还是得自己去学习研究。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556076356,"ip_address":"","comment_id":88943,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5850997984","product_id":100023701,"comment_content":"我们的技术债务：单元测试覆盖率几乎为0<br>主要两个方面原因，一个是一直创业公司待着，不知道单元测试好的实践到底是怎么样的，PHP的单元测试到底应该怎么做。另外一个就是项目排计划的时候总是不允许排单元测试实践，否则感觉整个项目周期太长<br>所以就这么一直恶性循环下去，怕重构怕改需求导致系统不稳定，测试全靠人（测试工程师）<br><br>最近每次一有空下意识就会补几个单元测试，希望能坚持下去，回头也得多找点这方面的书补一补","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447956,"discussion_content":"单元测试、自动化测试在第27篇会再讲，希望到时候能解答你的一些困惑，当然也建议你看一些书，毕竟一些语言相关的还是得自己去学习研究。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556076356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88726,"user_name":"空知","can_delete":false,"product_type":"c1","uid":1013283,"ip_address":"","ucode":"C448E98238DD36","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","comment_is_top":false,"comment_ctime":1555986465,"is_pvip":false,"replies":[{"id":"31833","content":"这未必是最好的方式，可以尝试预防为主，日常及时小范围重构，应该效果更好","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556029930,"ip_address":"","comment_id":88726,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5850953761","product_id":100023701,"comment_content":"基本隔个3年左右 全部推倒重建...债太多 还补上了","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447881,"discussion_content":"这未必是最好的方式，可以尝试预防为主，日常及时小范围重构，应该效果更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556029930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88653,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1555979730,"is_pvip":false,"replies":[{"id":"31827","content":"👍先识别，然后定方案，最后再行动","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1556029486,"ip_address":"","comment_id":88653,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5850947026","product_id":100023701,"comment_content":"我们应该是这种谨慎 &#47; 有意的债务，应该是通过重构来偿还","like_count":1,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447857,"discussion_content":"👍先识别，然后定方案，最后再行动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556029486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88643,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1555978506,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5850945802","product_id":100023701,"comment_content":"投资的比喻很传神👍","like_count":1},{"had_liked":false,"id":350000,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1656499664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656499664","product_id":100023701,"comment_content":"可以分三个步骤来管理技术债务：识别技术债务、选择处理策略和实施策略。处理策略有三种：推翻重写、修修补补和重构。--记下来","like_count":0},{"had_liked":false,"id":193746,"user_name":"Raymond吕","can_delete":false,"product_type":"c1","uid":1581719,"ip_address":"","ucode":"401C7BD43095FC","user_header":"https://static001.geekbang.org/account/avatar/00/18/22/97/7a1c4031.jpg","comment_is_top":false,"comment_ctime":1584957360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584957360","product_id":100023701,"comment_content":"技术债产生的四个原因，简单明了，茅塞顿开！","like_count":0},{"had_liked":false,"id":167003,"user_name":"calvins","can_delete":false,"product_type":"c1","uid":1276186,"ip_address":"","ucode":"42D0DDC24486A1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/m2baiaoDn4II6piarRCeVK4JGah8gzF0m9J6r35xDTEMUUaUrzf23jhRa0aicTeUXDv29ZkicicaI44Fhfn6NrSeHiaQ/132","comment_is_top":false,"comment_ctime":1577667563,"is_pvip":false,"replies":[{"id":"65528","content":"技术欠债多了，想一次还清几乎不可能的，只能是一点点还。关键不是要彻底还清，因为总有新的债务，而是要有技术债务的意识，控制在合理的范围。","user_name":"作者回复","user_name_real":"宝玉","uid":"1064938","ctime":1578252727,"ip_address":"","comment_id":167003,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577667563","product_id":100023701,"comment_content":"债欠多了难还，最怕的还是还不起！","like_count":0,"discussions":[{"author":{"id":1064938,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gem4tlXhUUSQwNklGwJFJ09lP4yfYwTlbNgH9vw01AJiar7z9cQeehBVgLNoZhOG9l96q12EfxpFh4SBXibmSQWw/132","nickname":"宝玉","note":"","ucode":"824342714F3310","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479707,"discussion_content":"技术欠债多了，想一次还清几乎不可能的，只能是一点点还。关键不是要彻底还清，因为总有新的债务，而是要有技术债务的意识，控制在合理的范围。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578252727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}