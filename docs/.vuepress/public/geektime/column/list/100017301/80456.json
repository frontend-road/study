{"id":80456,"title":"春节7天练 | Day 1：数组和链表","content":"<p>你好，我是王争。首先祝你新年快乐！</p><p>专栏的正文部分已经结束，相信这半年的时间，你学到了很多，究竟学习成果怎样呢？</p><p>我整理了数据结构和算法中必知必会的30个代码实现，从今天开始，分7天发布出来，供你复习巩固所用。你可以每天花一点时间，来完成测验。测验完成后，你可以根据结果，回到相应章节，有针对性地进行复习。</p><p>除此之外，@Smallfly 同学还整理了一份配套的LeetCode练习题，你也可以一起练习一下。在此，我谨代表我本人对@Smallfly 表示感谢！</p><p>另外，我还为假期坚持学习的同学准备了丰厚的<span class=\"orange\">春节加油礼包</span>。</p><ol>\n<li>\n<p>2月5日-2月14日，只要在专栏文章下的留言区写下你的答案，参与答题，并且留言被精选，即可获得极客时间10元无门槛优惠券。</p>\n</li>\n<li>\n<p>7篇中的所有题目，只要回答正确3道及以上，即可获得极客时间99元专栏通用阅码。</p>\n</li>\n<li>\n<p>如果7天连续参与答题，并且每天的留言均被精选，还可额外获得极客时间价值365元的每日一课年度会员。</p>\n</li>\n</ol><hr><h2>关于数组和链表的几个必知必会的代码实现</h2><h3>数组</h3><ul>\n<li>\n<p>实现一个支持动态扩容的数组</p>\n</li>\n<li>\n<p>实现一个大小固定的有序数组，支持动态增删改操作</p>\n</li>\n<li>\n<p>实现两个有序数组合并为一个有序数组</p>\n</li>\n</ul><h3>链表</h3><ul>\n<li>\n<p>实现单链表、循环链表、双向链表，支持增删操作</p>\n</li>\n<li>\n<p>实现单链表反转</p>\n</li>\n<li>\n<p>实现两个有序的链表合并为一个有序链表</p>\n</li>\n<li>\n<p>实现求链表的中间结点</p>\n</li>\n</ul><!-- [[[read_end]]] --><h2>对应的LeetCode练习题（@Smallfly 整理）</h2><h3>数组</h3><ul>\n<li>Three Sum（求三数之和）</li>\n</ul><p>英文版：<a href=\"https://leetcode.com/problems/3sum/\">https://leetcode.com/problems/3sum/</a></p><p>中文版：<a href=\"https://leetcode-cn.com/problems/3sum/\">https://leetcode-cn.com/problems/3sum/</a></p><ul>\n<li>Majority Element（求众数）</li>\n</ul><p>英文版：<a href=\"https://leetcode.com/problems/majority-element/\">https://leetcode.com/problems/majority-element/</a></p><p>中文版：<a href=\"https://leetcode-cn.com/problems/majority-element/\">https://leetcode-cn.com/problems/majority-element/</a></p><ul>\n<li>Missing Positive（求缺失的第一个正数）</li>\n</ul><p>英文版：<a href=\"https://leetcode.com/problems/first-missing-positive/\">https://leetcode.com/problems/first-missing-positive/</a></p><p>中文版：<a href=\"https://leetcode-cn.com/problems/first-missing-positive/\">https://leetcode-cn.com/problems/first-missing-positive/</a></p><h3>链表</h3><ul>\n<li>Linked List Cycle I（环形链表）</li>\n</ul><p>英文版：<a href=\"https://leetcode.com/problems/linked-list-cycle/\">https://leetcode.com/problems/linked-list-cycle/</a></p><p>中文版：<a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\">https://leetcode-cn.com/problems/linked-list-cycle/</a></p><ul>\n<li>Merge k Sorted Lists（合并k个排序链表）</li>\n</ul><p>英文版：<a href=\"https://leetcode.com/problems/merge-k-sorted-lists/\">https://leetcode.com/problems/merge-k-sorted-lists/</a></p><p>中文版：<a href=\"https://leetcode-cn.com/problems/merge-k-sorted-lists/\">https://leetcode-cn.com/problems/merge-k-sorted-lists/</a></p><hr><p>做完题目之后，你可以点击“请朋友读”，把测试题分享给你的朋友，说不定就帮他解决了一个难题。</p><p>祝你取得好成绩！明天见！</p>","neighbors":{"left":{"article_title":"《数据结构与算法之美》学习指导手册","id":91541},"right":{"article_title":"春节7天练 | Day 2：栈、队列和递归","id":80457}},"comments":[{"had_liked":false,"id":65405,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1549336272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"534125280976","product_id":100017301,"comment_content":"早上起来拿出电脑，准备做题。<br>老妈说：今天就别工作了，玩一天吧，啥也别干，啥也别想。<br>我说：不行呀，老师布置了题目，必须得做呀。<br>老妈说：大过年的老师还在工作，真不容易，替我向你老师说声：🔥🔥新年好！！！","like_count":124},{"had_liked":false,"id":65367,"user_name":"李皮皮皮皮皮","can_delete":false,"product_type":"c1","uid":1200281,"ip_address":"","ucode":"3BF1DEE4A12359","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/99/44378317.jpg","comment_is_top":false,"comment_ctime":1549285766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"259247323526","product_id":100017301,"comment_content":"感谢分享，虽然工作很忙，每天下班就不想动了。但是还是要不断克服自己。数据结构和算法的重要性可能在面试的时候才能深刻感悟。如果平时多下点功夫，结果可能会大不一样。前面很多期因为各种原因没有跟上，庆幸的是后面慢慢追上了。现在养成每天做一道算法题的习惯。每天装着一道算法题在脑子里。这感觉其实也不错，不是任务，感觉像是习惯😄","like_count":60},{"had_liked":false,"id":65392,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1549331905,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"216297696705","product_id":100017301,"comment_content":"哈哈，被提名了，谢谢老师。<br><br>有兴趣的同学可以把你的答案分享到 Github:  https:&#47;&#47;github.com&#47;iostalks&#47;Algorithms<br><br>有问题也可以在 issue 中一起讨论。<br><br>新的一年跟大家一起进步，一起流弊。","like_count":50,"discussions":[{"author":{"id":2577268,"avatar":"https://static001.geekbang.org/account/avatar/00/27/53/74/17c18b44.jpg","nickname":"布小丁","note":"","ucode":"3EDD7C5A0E4C8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545056,"discussion_content":"虽然过去两年多了，但是对你表示感谢，辛苦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641815649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1740208,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8d/b0/520f65d4.jpg","nickname":"幻影","note":"","ucode":"E98DDC420A6E00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348841,"discussion_content":"不想流弊，只想混口饭吃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612751134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237592,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e2/58/2468a5e9.jpg","nickname":"JGOS","note":"","ucode":"46A905A169408F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306754,"discussion_content":"老哥， 整理的配套练习在哪，求分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600362577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050191,"avatar":"https://static001.geekbang.org/account/avatar/00/10/06/4f/14cc4b53.jpg","nickname":"不专注的linuxer","note":"","ucode":"28ED11C1E2942C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12607,"discussion_content":"老哥稳","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568554936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237618,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e2/72/9ae3e5c8.jpg","nickname":"揅笑晏晏","note":"","ucode":"DB9847B1C393FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3452,"discussion_content":"這個GitHub很久沒有更新了啊。。。pr也沒有review，大家要堅持住啊¬_¬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564488586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65398,"user_name":"fancyyou","can_delete":false,"product_type":"c1","uid":1235095,"ip_address":"","ucode":"87B2257C888692","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/97/a8c7ed6c.jpg","comment_is_top":false,"comment_ctime":1549333764,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"91743646980","product_id":100017301,"comment_content":"新年好！<br>leetcode的题都做过了😁。","like_count":21,"discussions":[{"author":{"id":1482915,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","nickname":"业余爱好者","note":"","ucode":"A890935A982988","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145952,"discussion_content":"牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579590541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65501,"user_name":"菜菜","can_delete":false,"product_type":"c1","uid":1243536,"ip_address":"","ucode":"888AC33663B774","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/90/f90903e5.jpg","comment_is_top":false,"comment_ctime":1549420547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31614191619","product_id":100017301,"comment_content":"大小固定的有序数组，支持增删改：既然有序，则查询操作都可以用二分查询。增加操作，找到第一个大于新数据的值的位置，从最后一个有效数据往后移一个位置，目的是为了给新数据腾位置，然后插入。删除操作：找到第一个等于要删除的数据的值，然后将其后面的数据依次向前挪一个位置。改操作，查询再修改。要注意临界条件和找不到数据，以及数组满等情况。","like_count":7},{"had_liked":false,"id":66736,"user_name":"Abner","can_delete":false,"product_type":"c1","uid":1191257,"ip_address":"","ucode":"F8D34433833D7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/2d/59/b515a473.jpg","comment_is_top":false,"comment_ctime":1549991173,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"23024827653","product_id":100017301,"comment_content":"java实现一个动态扩容的数组（扩容2倍）<br>代码如下:<br>package array;<br><br>public class DynamicArray {<br>    <br>    private String[] data;<br>    private int count;<br>    private int size;<br>    <br>    public DynamicArray(int capacity) {<br>        data = new String[capacity];<br>        count = 0;<br>        size = capacity;<br>    }<br>    <br>    public String[] expand(String[] data) {<br>        if (count &gt;= size) {<br>            String[] newArray = new String[this.size * 2];<br>            this.size = this.size * 2;<br>            for (int i = 0;i &lt; count;i++) {<br>                newArray[i] = this.data[i];<br>            }<br>            return newArray;<br>        } else {<br>            return this.data;<br>        }<br>    }<br>    <br>    public boolean append(String item) {<br>        if (count &gt;= size) {<br>            this.data = expand(this.data);<br>        }<br>        this.data[count] = item;<br>        count++;<br>        return true;<br>    }<br>    <br>    public void printAll() {<br>        for (int i = 0;i &lt; count;i++) {<br>            System.out.print(data[i] + &quot; &quot;);<br>        }<br>        System.out.println();<br>    }<br>    <br>    public static void main(String[] args) {<br>        DynamicArray dynamicArray = new DynamicArray(5);<br>        for (int i = 0;i &lt; dynamicArray.size;i++) {<br>            dynamicArray.data[i] = &quot;This value is &quot; + i;<br>            dynamicArray.count++;<br>        }<br>        dynamicArray.append(&quot;This value is 5&quot;);<br>        System.out.println(&quot;Now the size of data is &quot; + dynamicArray.size);<br>        dynamicArray.printAll();<br>    }<br>  <br>}<br>","like_count":5,"discussions":[{"author":{"id":1249400,"avatar":"https://static001.geekbang.org/account/avatar/00/13/10/78/29bd3f1e.jpg","nickname":"王子瑞Aliloke有事电联","note":"","ucode":"9ABE8E475E336B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340938,"discussion_content":"扩容后原数组应赋值为null，方便回收","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610207884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65543,"user_name":"William","can_delete":false,"product_type":"c1","uid":1241365,"ip_address":"","ucode":"4499F99B180102","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/15/8fcf8038.jpg","comment_is_top":false,"comment_ctime":1549441390,"is_pvip":true,"replies":[{"id":"24750","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","comment_id":65543,"uid":"1058895","ip_address":"","utype":2,"ctime":1550804990,"user_name_real":"王锦"}],"discussion_count":1,"race_medal":2,"score":"18729310574","product_id":100017301,"comment_content":"特地新开了一个git仓库，https:&#47;&#47;github.com&#47;Si3ver&#47;LeetCode。刷完5道题，思路大致写一下。1.数组三数之和，时间复杂度是O(n^2)，先排序，外层i遍历数组，内层左右双指针，寻找两数之和 = -nums[i]。 2. 求数组中出现次数大于一半的数字。复杂度O(n)，是利用摩尔投票法。3.求缺失的最小正整数，复杂度O(n)，思路是哈希表统计。4.环形链表用快慢指针。5.合并k个有序链表，用的是两两归并，据说用堆会更快，这个有待补充。","like_count":4,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438497,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65462,"user_name":"Abner","can_delete":false,"product_type":"c1","uid":1191257,"ip_address":"","ucode":"F8D34433833D7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/2d/59/b515a473.jpg","comment_is_top":false,"comment_ctime":1549375018,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"18729244202","product_id":100017301,"comment_content":"Java语言实现一个大小固定的有序数组，支持动态增删改操作<br>代码如下:<br>public class Array {<br>    private String[] data;<br>    private int count;<br>    privvate int size;<br>    public Array(int capacity) {<br>        data = new String[capacity];<br>        count = 0;<br>        size = capacity;<br>    }<br>    public boolean insert(int index, String value) {<br>        if (count &gt;= size) {<br>            return false;<br>        }<br>        if (index &lt; 0 || index &gt; count) {<br>            return false;<br>        }<br>        for (int i = count - 1;i &gt;= index;i--) {<br>             data[i+1] = data[i];<br>        }<br>        data[index] = value;<br>        count++;<br>    }<br>    public String delete(int index, String value) {<br>        if (count == 0) {<br>            return false;<br>        }<br>        if (index &lt; 0 || index &gt;count) {<br>             return false;<br>         }<br>        value = data[index];<br>        for (int i = index;i &lt;= count - 1;i++) {<br>            data[i - 1] = data[i];<br>        }<br>        count--;<br>        return value;<br>}","like_count":4,"discussions":[{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334686,"discussion_content":"你们是怎么实现评论里代码换行有格式的？复制粘贴后，就混一起。再次编辑，发现是换行的。提交后，又混一起为一行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607936676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237849,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/6a8fRQFxX5VXOpRKyYibsemKwDMexMxkzZOBquPo6T4HOcYicBiaTcqibDoTIhZSjVjF3nKXTEGDYOGPt2xqqwiawjg/132","nickname":"咩咩咩","note":"","ucode":"9DEC7D5D52D972","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34804,"discussion_content":"这不是有序的吧???","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571223001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1372230,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f0/46/c707142d.jpg","nickname":"kyle","note":"","ucode":"70B0C98E905A2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2795,"discussion_content":"小改动：\npublic class Array {\n    private String[] data;\n    private int len;\n    private int cap;\n\n    // 构造器\n    public Array(int capacity) {\n        data = new String[capacity];\n        len = 0;\n        cap = capacity;\n    }\n\n    public boolean append(String value){\n        if (len == cap) {\n            return false;\n        }\n        data[len++] = value;\n        return true;\n    }\n    \n    public boolean insert(int index, String value) {\n        if (len == cap) {\n            return false;\n        }\n        if (index < 0 || index > len) {\n            return false;\n        }\n        for (int i = len; i > index; i--) {\n            data[i] = data[i-1];\n        }\n        data[index] = value;\n        len++;\n        return true;\n    }\n\n    public boolean delete(int index, String value) {\n        if (len == 0) {\n            return false;\n        }\n        if (index < 0 || index > len) {\n            return false;\n        }\n        for (int i = index; i <= len - 1; i++) {\n            data[i - 1] = data[i];\n        }\n        len--;\n        return true;\n    }\n}\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563939739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1237849,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/6a8fRQFxX5VXOpRKyYibsemKwDMexMxkzZOBquPo6T4HOcYicBiaTcqibDoTIhZSjVjF3nKXTEGDYOGPt2xqqwiawjg/132","nickname":"咩咩咩","note":"","ucode":"9DEC7D5D52D972","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1372230,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f0/46/c707142d.jpg","nickname":"kyle","note":"","ucode":"70B0C98E905A2B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34805,"discussion_content":"这不是有序的吧???","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571223016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2795,"ip_address":""},"score":34805,"extra":""}]}]},{"had_liked":false,"id":65453,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1549367497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18729236681","product_id":100017301,"comment_content":"合并有序数组 go 语言实现<br>package main<br><br>import &quot;fmt&quot;<br><br>func mergeOrderedArray(a, b []int) (c []int) {<br>\ti, j, k := 0, 0, 0<br>\tmergedOrderedArrayLength := len(a) + len(b)<br>\tc = make([]int, mergedOrderedArrayLength)<br>\tfor {<br>\t\tif i &gt;= len(a) || j &gt;= len(b) {<br>\t\t\tbreak<br>\t\t}<br><br>\t\tif a[i] &lt;= b[j] {<br>\t\t\tc[k] = a[i]<br>\t\t\ti++<br>\t\t} else {<br>\t\t\tc[k] = b[j]<br>\t\t\tj++<br>\t\t}<br>\t\tk++<br>\t}<br><br>\tfor ; i &lt; len(a); i++ {<br>\t\tc[k] = a[i]<br>\t\tk++<br>\t}<br><br>\tfor ; j &lt; len(b); j++ {<br>\t\tc[k] = a[j]<br>\t\tk++<br>\t}<br><br>\treturn<br>}<br><br>func main() {<br>\ta := []int{1, 3, 5, 7, 9, 10, 11, 13, 15}<br>\tb := []int{2, 4, 6, 8}<br>\tfmt.Println(&quot;ordered array a: &quot;, a)<br>\tfmt.Println(&quot;ordered array b: &quot;, b)<br>\tfmt.Println(&quot;merged ordered array: &quot;, mergeOrderedArray(a, b))<br>}<br>","like_count":4},{"had_liked":false,"id":65396,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1549333431,"is_pvip":true,"replies":[{"id":"24729","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","comment_id":65396,"uid":"1058895","ip_address":"","utype":2,"ctime":1550804074,"user_name_real":"王锦"}],"discussion_count":1,"race_medal":0,"score":"18729202615","product_id":100017301,"comment_content":"第三题，看这题，我就会想到用快排的思想在一堆数中求第n大。于是乎我就套，先把负数全部移掉，o(n)不影响。然后每轮迭代随机取个数n，比它小的放左边，比他大的放右边。比如说第一轮迭代，左边的数据个数小于n-1那么必然在左边。但这里有个问题是数据是可以重复的，怎么办，想呀想，我就选定n后，开始扫描，如果是1我就放第一个位置，如果是2我就放第二个位置，如果再有1，发现重复了，不用移动了，这样我就能计算小于n大于n的正整数有多少种了，然后就能迭代下去了。当然里面还有些细节，比如如果n很大已超过了数组长度，那说明那个数一定在左边。","like_count":4,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438437,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66010,"user_name":"kai","can_delete":false,"product_type":"c1","uid":1018452,"ip_address":"","ucode":"443ED92B59AB8C","user_header":"","comment_is_top":false,"comment_ctime":1549851172,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14434753060","product_id":100017301,"comment_content":"3. 实现求链表的中间结点<br>public class FindMidNode {<br><br>    &#47;&#47; 1. T(n) = O(2*n) 遍历2次<br>    public static Node findMidNode(Node head) {<br>        if (head == null) {<br>            return null;<br>        }<br><br>        int len = 0;<br>        Node p = head;<br><br>        while(p != null) {<br>            len++;<br>            p = p.next;<br>        }<br><br>        p = head;<br>        for (int i = 0; i &lt; len&#47;2; i++) {<br>            p = p.next;<br>        }<br><br>        return p;<br>    }<br><br>    &#47;&#47; 2. T(n) = O(n) 遍历1次<br>    &#47;&#47; 快慢指针法<br>    public static Node findMidNodeFast(Node head) {<br>        if (head == null) {<br>            return null;<br>        }<br><br>        Node fast = head;<br>        Node slow = head;<br><br>        while (fast != null &amp;&amp; fast.next != null) {<br>            fast = fast.next.next;<br>            slow = slow.next;<br>        }<br><br>        return slow;<br>    }<br><br><br>    public static Node createNode(int value) {<br>        return new Node(value, null);<br>    }<br><br>    public static class Node {<br>        public int data;<br>        public Node next;<br><br>        public Node(int data, Node next) {<br>            this.data = data;<br>            this.next = next;<br>        }<br>    }<br>}<br><br>4. Linked List Cycle I（环形链表）<br>&#47;**<br> * 141. Linked List Cycle<br> * https:&#47;&#47;leetcode.com&#47;problems&#47;linked-list-cycle&#47;<br> *&#47;<br>public class LinkedListCycle {<br>    public boolean hasCycle(ListNode head) {<br>        if (head == null || head.next == null) {<br>            return false;<br>        }<br><br>        ListNode fast = head;<br>        ListNode slow = head;<br><br>        while (fast != null &amp;&amp; fast.next != null) {<br>            fast = fast.next.next;<br>            slow = slow.next;<br>            if (fast == slow) return true;<br>        }<br><br>        return false;<br>    }<br><br>    public static class ListNode {<br>        int val;<br>        ListNode next;<br>        ListNode(int x) { val = x;}<br>    }<br>}","like_count":3},{"had_liked":false,"id":66009,"user_name":"kai","can_delete":false,"product_type":"c1","uid":1018452,"ip_address":"","ucode":"443ED92B59AB8C","user_header":"","comment_is_top":false,"comment_ctime":1549851013,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14434752901","product_id":100017301,"comment_content":"1. 实现单链表反转：<br>&#47;**<br> * 206. Reverse Linked List<br> * https:&#47;&#47;leetcode.com&#47;problems&#47;reverse-linked-list&#47;<br> *&#47;<br>public class ReverseList {<br>    public ListNode reverseList(ListNode head) {<br>        if (head == null || head.next == null) return head;<br><br>        ListNode pre = null;<br>        ListNode next = null;<br><br>        while (head != null) {<br>            next = head.next;<br>            head.next = pre;<br>            pre = head;<br>            head = next;<br>        }<br><br>        return pre;<br>    }<br><br>    public static class ListNode {<br>        int val;<br>        ListNode next;<br>        ListNode(int x) {<br>            this.val = val;<br>        }<br>    }<br>}<br><br>2. 实现两个有序的链表合并为一个有序链表<br>&#47;**<br> * 21. Merge Two Sorted Lists<br> * https:&#47;&#47;leetcode.com&#47;problems&#47;merge-two-sorted-lists&#47;<br> *&#47;<br>public class Merge2SortedLists {<br>    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {<br>        if (l1 == null) return l2;<br>        if (l2 == null) return l1;<br>\t<br>\t&#47;&#47; 利用哨兵（前哨节点）简化实现难度<br>        ListNode outpost = new ListNode(-1);<br>        ListNode temp = outpost;<br><br>        while (l1 != null &amp;&amp; l2 != null) {<br>            if (l1.val &lt;= l2.val) {<br>                temp.next = l1;<br>                l1 = l1.next;<br>            } else {<br>                temp.next = l2;<br>                l2 = l2.next;<br>            }<br><br>            temp = temp.next;<br>        }<br><br>        if (l1 == null) {<br>            temp.next = l2;<br>        }<br><br>        if (l2 == null) {<br>            temp.next = l1;<br>        }<br><br>        return outpost.next;<br>    }<br>\t<br>\tpublic ListNode mergeTwoListsRecur(ListNode l1, ListNode l2) {<br>        if (l1 == null) return l2;<br>        if (l2 == null) return l1;<br>\t\tif (l1.val &lt; l2.val) {<br>\t\t\tl1.next = mergeTwoListsRecur(l1.next, l2);<br>\t\t\treturn l1;<br>\t\t} else {<br>\t\t\tl2.next = mergeTwoListsRecur(l1, l2.next);<br>\t\t\treturn l2;<br>\t\t}<br>\t}<br><br>    public static class ListNode {<br>        int val;<br>        ListNode next;<br>        ListNode(int x) { val = x;}<br>    }<br>}<br><br><br>","like_count":3},{"had_liked":false,"id":65739,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1549613312,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14434515200","product_id":100017301,"comment_content":"1.Three Sum：暴力匹配三元组，三层循环结束后打印保存三元组的数组即可，时间复杂度O（n^3），空间复杂度O（n）。简化一下，为减少比较次数先排序。外层循环i遍历数组，内层循环从数组两头元素（s、t）开始考察，找出使num【s】+num【t】=-num【i】的s和t，若大了t- -，若小了s++（内层要避开i）s大于等于t则匹配失败。这样两层循环就可以了，时间复杂度O（n^2）。<br><br>2.Majority Element：重点在于统计每个元素出现次数，可以先排序，然后顺序计算出每个数的出现次数，与阈值比较，大于则输出，时间复杂度O（nlogn）。也可以采用散列表，把每个元素存入散列表，并记录出现次数，最后把出现次数超过阈值的元素输出即可，时间复杂度O（n），空间复杂度O（n）。<br><br>3.Missing Positive：本来想用散列表，发现要求时间复杂度O（n），空间复杂度为常量，有点捉急。只能从原数组上做文章。假设数组A长度为n，若i为1到n的正整数，若i存在于A中，我们就把它的位置调整到A【i-1】处，这样通过A【i】是否为i+1即可知道i+1是否在数组中。那么A中不满足上述条件的最小下标+1即为缺失的最小正整数值。<br><br>4. Linked List Cycle I（环形链表）：用图的拓扑排序算法可以，但是要统计顶点出入度，空间复杂度无法达到O（1）。那可以用快慢指针，*fast以*slow的两倍速前进，如果fast和slow重合则说明有环。<br><br>5. Merge k Sorted Lists（合并 k 个排序链表）：两两硬生生合并，时间复杂度应该是O（kN），再高级的方法想不出来。ps：如果可以抛弃原来的链表，那么新建一个合并后链表的时间复杂度可以是O（N）吧？N是k个链表的总长。","like_count":3},{"had_liked":false,"id":146305,"user_name":"寒溪","can_delete":false,"product_type":"c1","uid":1001970,"ip_address":"","ucode":"67B9F1A1C15A20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/f2/25cfa472.jpg","comment_is_top":false,"comment_ctime":1572492628,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"10162427220","product_id":100017301,"comment_content":"请问答案在哪里公布？好对比老师的实现，看一下自己的实现不足点在哪里。","like_count":2},{"had_liked":false,"id":67822,"user_name":"未来的胡先森","can_delete":false,"product_type":"c1","uid":1234682,"ip_address":"","ucode":"AFF193AC0E2E6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/fa/1f5bf642.jpg","comment_is_top":false,"comment_ctime":1550286725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10140221317","product_id":100017301,"comment_content":"求众数<br>解题思路：将数组排序，统计每个数字出现的次数，当满足众数条件时返回。时间复杂度 nlogn<br><br>int compare(const void  *a, const void *b)<br>{<br>\treturn (*(int*)a - *(int*)b);<br>}<br>int majorityElement(int* nums, int numsSize) {<br>\tqsort(nums,numsSize,sizeof(int), compare);<br>\tint num = nums[0],flag=numsSize&gt;&gt;1,count=1;<br>\tfor (int i = 1; i &lt; numsSize; i++)<br>\t{<br>\t\tif (nums[i] != num)<br>\t\t{<br>\t\t\tnum = nums[i]; count = 1;<br>\t\t}<br>\t\telse<br>\t\t{<br>\t\t\tcount++;<br>\t\t}<br>\t\tif (count &gt; flag)<br>\t\t\tbreak;<br>\t}<br>\treturn num; <br>}<br>更优解<br><br>数组元素为奇数个，众数数量大于半数，所以相互抵消后最后剩余的一定为众数，时间复杂度 O(n)<br><br>int majorityElement(int* nums, int numsSize)<br>{<br>\tint count = 1,num=nums[0];<br>\tfor (int i = 1; i &lt; numsSize; i++)<br>\t\tif (count == 0 || num == nums[i])<br>\t\t{<br>\t\t\tcount++; num = nums[i];<br>\t\t}<br>\t\telse<br>\t\t\tcount--;<br>\treturn num;<br>}","like_count":2},{"had_liked":false,"id":67389,"user_name":"Ben","can_delete":false,"product_type":"c1","uid":1252353,"ip_address":"","ucode":"70351D4FAE47F7","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/01/5aaaf5b6.jpg","comment_is_top":false,"comment_ctime":1550138264,"is_pvip":false,"replies":[{"id":"24754","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","comment_id":67389,"uid":"1058895","ip_address":"","utype":2,"ctime":1550805136,"user_name_real":"王锦"}],"discussion_count":1,"race_medal":0,"score":"10140072856","product_id":100017301,"comment_content":"class Solution(object):<br>    def threeSum(self, nums):<br>        &quot;&quot;&quot;<br>        :type nums: List[int]<br>        :rtype: List[List[int]]<br>        通过hash结构缓存去重值及出现的次数<br><br>        将值按正负区分, 将正负列表中的数字求和, 判断和的相反数是否仍存在于字典中<br>        &quot;&quot;&quot;<br>        #将输入列表的值作为索引, 对应出现的次数作为新的字典结构的值<br>        dic = {}<br>        for ele in nums:<br>            if ele not in dic:<br>                dic[ele] = 0<br>            dic[ele] += 1<br>        # 存在3个0的特殊情况<br>        if 0 in dic and dic[0] &gt; 2:<br>            rst = [[0, 0, 0]]<br>        else:<br>            rst = []<br><br>        pos = [p for p in dic if p &gt; 0]<br>        neg = [n for n in dic if n &lt; 0]<br><br>        # 若全为正或负值, 不存在和为0的情况<br>        for p in pos:<br>            for n in neg:<br>                inverse = -(p + n)<br>                if inverse in dic:<br>                    if inverse == p and dic[p] &gt; 1:<br>                        rst.append([n, p, p])<br>                    elif inverse == n and dic[n] &gt; 1:<br>                        rst.append([n, n, p])<br>                    # 去重: 小于负值且大于正值可以排除掉重复使用二者之间的值<br>                    elif inverse &lt; n or inverse &gt; p or inverse == 0:<br>                        rst.append([n, inverse, p])<br>        return rst<br>    def majorityElement(self, nums):<br>        &quot;&quot;&quot;<br>        :type nums: List[int]<br>        :rtype: int<br>        hash反存值和出现的次数<br>        &quot;&quot;&quot;<br>        #利用字典表反存值:出现的次数<br>        dic = {}<br>        for i in nums:<br>            if i not in dic:<br>                dic[i] = 1<br>            else:<br>                dic[i] +=1<br>        <br>        #根据列表获取值最大的索引<br>        vs = list(dic.values())<br>        return list(dic.keys())[vs.index(max(vs))]<br>    def firstMissingPositiveFast(self, nums):<br>        &quot;&quot;&quot;<br>        :type nums: List[int]<br>        :rtype: int<br>        &quot;&quot;&quot;<br>        n = 1<br>        while n in nums:<br>            n +=1<br>        return n","like_count":2,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439173,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550805136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121922,"user_name":"赵菁垚","can_delete":false,"product_type":"c1","uid":1161047,"ip_address":"","ucode":"8BD8F0802ED33C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/57/c58d3258.jpg","comment_is_top":false,"comment_ctime":1565250215,"is_pvip":false,"replies":[{"id":"44834","content":"也考的","user_name":"作者回复","comment_id":121922,"uid":"1190123","ip_address":"","utype":1,"ctime":1565304226,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5860217511","product_id":100017301,"comment_content":"王老师，请教您一个问题，想参加NOIP c++考这些算法吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462005,"discussion_content":"也考的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565304226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68383,"user_name":"神盾局闹别扭","can_delete":false,"product_type":"c1","uid":1006804,"ip_address":"","ucode":"0255AEB1EE73FC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/d4/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1550491904,"is_pvip":false,"replies":[{"id":"24212","content":"运营同学稍后会联系获奖同学哈","user_name":"编辑回复","comment_id":68383,"uid":"1058895","ip_address":"","utype":2,"ctime":1550499168,"user_name_real":"王锦"}],"discussion_count":1,"race_medal":0,"score":"5845459200","product_id":100017301,"comment_content":"加油礼包的福利在哪里领呢？","like_count":1,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439656,"discussion_content":"运营同学稍后会联系获奖同学哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550499168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66991,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550051940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5845019236","product_id":100017301,"comment_content":"&#47;&#47;单链表反转（带头结点）<br>void reverse(struct node* head){<br>\tstruct node* L;<br>\tstruct node* p;<br>\tstruct node* p2;<br>\tstruct node* p3;<br>\tL = head-&gt;next;<br>\tif(head == NULL){<br>\t\tprintf(&quot;链表未创建&quot;);<br>\t}else if(L-&gt;next==NULL){<br>\t\tprintf(&quot;单链表只有一个节点，无需反转&quot;);<br>\t\treturn;<br>\t}else if(L-&gt;next-&gt;next == NULL){<br>\t\thead-&gt;next = L-&gt;next;<br>\t\thead-&gt;next-&gt;next = L;<br>\t\tL-&gt;next = NULL;<br>\t\tprintf(&quot;单链表反转成功&quot;);<br>\t}else{<br>\t\tp = L;<br>\t\tp2 = L-&gt;next;<br>\t\tp3 = L-&gt;next-&gt;next;<br>\t\twhile(p3!=NULL){<br>\t\t\tp2-&gt;next = p;<br>\t\t\tp = p2;<br>\t\t\tp2 = p3;<br>\t\t\tp3 = p3-&gt;next;<br>\t\t}<br>\t\tp2-&gt;next = p;<br>\t\tL-&gt;next = NULL;<br>\t\thead-&gt;next = p2;<br>\t\tprintf(&quot;单链表反转成功&quot;);\t<br>\t}<br>}","like_count":1},{"had_liked":false,"id":66635,"user_name":"Neo_Zhang","can_delete":false,"product_type":"c1","uid":1175689,"ip_address":"","ucode":"92FFEFE7905AE9","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/89/25899406.jpg","comment_is_top":false,"comment_ctime":1549971151,"is_pvip":false,"replies":[{"id":"24738","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","comment_id":66635,"uid":"1058895","ip_address":"","utype":2,"ctime":1550804361,"user_name_real":"王锦"}],"discussion_count":1,"race_medal":0,"score":"5844938447","product_id":100017301,"comment_content":"Three Sum（求三数之和）Go语言：<br>func threeSum(nums []int) [][]int {<br>    results := [][]int{}<br>\tn := len(nums)<br>\tif n == 0 || n &lt; 3 {<br>\t\treturn results<br>\t}<br>\tsort.Ints(nums)  &#47;&#47;首先，对数组进行排序<br>\tfor i := 0; i &lt; n-2; i++ {<br>\t\tif i &gt; 0 &amp;&amp; nums[i] == nums[i-1] {  &#47;&#47;如果相邻两个数相等<br>\t\t\tcontinue<br>\t\t}<br>\t\ttarget := -nums[i]<br>\t\tleft := i + 1 <br>\t\tright := n - 1  <br>\t\tfor left &lt; right {<br>\t\t\tsum := nums[left] + nums[right]<br>\t\t\tif sum == target {<br>\t\t\t\tresults = append(results, []int{nums[left], nums[right], nums[i]})<br>\t\t\t\tleft++<br>\t\t\t\tright--<br>\t\t\t\tfor left &lt; right &amp;&amp; nums[left] == nums[left-1] {<br>\t\t\t\t\tleft++<br>\t\t\t\t}<br>\t\t\t\tfor left &lt; right &amp;&amp; nums[right] == nums[right+1] {<br>\t\t\t\t\tright--<br>\t\t\t\t}<br>\t\t\t} else if sum &gt; target {<br>\t\t\t\tright--<br>\t\t\t} else if sum &lt; target {<br>\t\t\t\tleft++<br>\t\t\t}<br>\t\t}<br><br>\t}<br>\treturn results<br>}<br>","like_count":1,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438853,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66460,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1549942014,"is_pvip":false,"replies":[{"id":"24742","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550804598,"ip_address":"","comment_id":66460,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5844909310","product_id":100017301,"comment_content":"链表篇<br>1. 翻转单链表<br>&#47;*翻转单链表*&#47;<br>void reversalList(Node&lt;int&gt;* head) {<br>\tNode&lt;int&gt;* p = head;<br>\tNode&lt;int&gt;* prev = NULL;<br>\tNode&lt;int&gt;* temp = NULL;<br>\twhile (p) {<br>\t\t&#47;&#47; 1. 保存要遍历的下一个结点<br>\t\ttemp = p-&gt;next;<br>\t\t&#47;&#47; 2. 将 node-&gt;next 指向前驱结点<br>\t\tp-&gt;next = prev;<br>\t\t&#47;&#47; 3. 更新前驱结点<br>\t\tprev = p;<br>\t\t&#47;&#47; 4. 更新下一个要遍历的结点<br>\t\tp = temp;<br>\t}<br>}<br><br>2. 将两个有序的单链表合并<br>&#47;* 合并两个有序链表, 将 list2 合并到 list1 中 *&#47;<br>Node&lt;int&gt;* mergeOrderList(Node&lt;int&gt;* list1, Node&lt;int&gt;* list2) {<br>\t&#47;&#47; 记录 list2 的头结点<br>\tNode&lt;int&gt;* head = list2;<br>\t&#47;&#47; 创建哨兵, 用于处理将 list2 中的元素插入到 list1 头结点前面的情况<br>\tNode&lt;int&gt;* sentry = new Node&lt;int&gt;(-1);<br>\tsentry-&gt;next = list1;<br>\t&#47;&#47; 记录 list1 要遍历的元素<br>\tNode&lt;int&gt;* node = sentry;<br>\tNode&lt;int&gt;* temp = NULL;<br>\twhile (node-&gt;next &amp;&amp; head) {<br>\t\tif (node-&gt;next-&gt;data &gt; head-&gt;data) {<br>\t\t\ttemp = head-&gt;next;<br>\t\t\thead-&gt;next = node-&gt;next;<br>\t\t\tnode-&gt;next = head;<br>\t\t\thead = temp;<br>\t\t}<br>\t\telse {<br>\t\t\tnode = node-&gt;next;<br>\t\t}<br>\t}<br>\t&#47;&#47; 若 list2 的头结点不为 NULL, 则说明 list1 中的元素提前遍历结束了<br>\t&#47;&#47; 剩下的 list2 中的元素均比 list1 中的大<br>\t&#47;&#47; 直接将 list1 的尾结点连接到 list2 的首结点即可<br>\tif (head) {<br>\t\tnode-&gt;next = head;<br>\t}<br>\t&#47;&#47; 释放哨兵结点内存<br>\tlist1 = sentry-&gt;next;<br>\tsentry-&gt;next = NULL;<br>\tdelete(sentry);<br>\treturn list1;<br>}<br><br>3. 求单链表的中间结点<br>&#47;* 查询单链表的中间结点 *&#47;<br>template&lt;typename E&gt;<br>Node&lt;E&gt;* findMidNode(Node&lt;E&gt;* head, Node&lt;E&gt;** mid_node) {<br>\tif (!head) {<br>\t\treturn NULL;<br>\t}<br>\tNode&lt;E&gt;* fast = head;<br>\tNode&lt;E&gt;* slow = head;<br>\twhile (fast &amp;&amp; fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next) {<br>\t\t&#47;&#47; 快指针走两步<br>\t\tfast = fast-&gt;next-&gt;next;<br>\t\t&#47;&#47; 慢指针走一步<br>\t\tslow = slow-&gt;next;<br>\t}<br>\t*mid_node = slow;<br>}","like_count":1,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438807,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65664,"user_name":"神盾局闹别扭","can_delete":false,"product_type":"c1","uid":1006804,"ip_address":"","ucode":"0255AEB1EE73FC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/d4/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1549547592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5844514888","product_id":100017301,"comment_content":"<br>实现两个有序的链表合并为一个有序链表： <br>Node *MergeNode(Node *head1, Node *head2)<br>{<br>\tif (head1 == NULL)<br>\t\treturn head2;<br>\tif (head2 == NULL)<br>\t\treturn head1;<br>\tstu *pMergedHead;<br>\tif (head1-&gt;age &lt; head2-&gt;age)<br>\t{<br>\t\tpMergedHead = head1;<br>\t\tpMergedHead-&gt;next = MergeNode(head1-&gt;next, head2);<br>\t}<br>\telse<br>\t{<br>\t\tpMergedHead = head2;<br>\t\tpMergedHead-&gt;next = MergeNode(head1, head2-&gt;next);<br>\t}<br>\treturn pMergedHead;<br>}","like_count":1},{"had_liked":false,"id":65613,"user_name":"ALAN","can_delete":false,"product_type":"c1","uid":1240164,"ip_address":"","ucode":"70E3B1C730E63F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/64/7403c694.jpg","comment_is_top":false,"comment_ctime":1549508440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5844475736","product_id":100017301,"comment_content":"linkedlist answer:<br>import java.util.ArrayList;<br>import java.util.List;<br><br>&#47;**<br> * <br> * @author root alan<br> *<br> *&#47;<br>public class List1 {<br><br>\tNode tail;<br>\tNode head;<br><br>\tpublic void addOneWay(int value) {<br>\t\tif (head == null) {<br>\t\t\thead = new Node(value);<br>\t\t\ttail = head;<br>\t\t} else {<br>\t\t\tNode node = new Node(value);<br>\t\t\ttail.next = node;<br>\t\t\ttail = node;<br>\t\t}<br>\t}<br><br>\tpublic void deleteOneWay(int value) {<br>\t\tNode node = head;<br>\t\tNode prev = head;<br>\t\twhile (node.value != value) {<br>\t\t\tprev = node;<br>\t\t\tnode = node.next;<br><br>\t\t}<br>\t\tif (node == head)<br>\t\t\thead = head.next;<br>\t\telse if (node != tail)<br>\t\t\tprev.next = node.next;<br>\t\telse {<br>\t\t\ttail = prev;<br>\t\t\tprev.next = null;<br>\t\t}<br><br>\t}<br><br><br><br>\tpublic Node reverse(Node node) {<br>\t\tNode prev = null;<br>\t\tNode now = node;<br>\t\twhile (now != null) {<br>\t\t\tNode next = now.next;<br>\t\t\tnow.next = prev;<br>\t\t\tprev = now;<br>\t\t\tnow = next;<br>\t\t}<br><br>\t\treturn prev;<br>\t}<br><br>\tpublic Node middle() {<br>\t\tNode nd = head;<br>\t\tNode nd2 = head;<br>\t\twhile (nd2 != null) {<br>\t\t\tnd = nd.next;<br>\t\t\tnd2 = nd2.next.next;<br>\t\t}<br>\t\treturn nd;<br>\t}<br><br>}<br><br>class Node {<br>\tNode prev;<br>\tNode next;<br>\tint value;<br><br>\tpublic Node(int ele) {<br>\t\tvalue = ele;<br>\t}<br>}<br>","like_count":1},{"had_liked":false,"id":65612,"user_name":"ALAN","can_delete":false,"product_type":"c1","uid":1240164,"ip_address":"","ucode":"70E3B1C730E63F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/64/7403c694.jpg","comment_is_top":false,"comment_ctime":1549508272,"is_pvip":false,"replies":[{"id":"24726","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550804002,"ip_address":"","comment_id":65612,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5844475568","product_id":100017301,"comment_content":"array answer:<br>import java.util.Arrays;<br><br>public class Array1 {<br>\tpublic int n;<br>\tpublic int cur;<br>\tpublic static int ary[];  &#47;&#47;dynamic expand<br>\tpublic static int fix[];  &#47;&#47;fixed array<br>\tpublic Array1(int size) {<br>\t\tn=size;<br>\t\tary=new int [n];<br>\t}<br>\t<br>\t&#47;&#47;dynamic expand<br>\tpublic void insert(int ele) {<br>\t\tif(cur==ary.length) {<br>\t\t\t\t\t\t<br>\t\t\tary=Arrays.copyOf(ary, ary.length*2);<br>\t\t\tSystem.out.println(&quot;length:&quot;+ary.length);<br>\t\t\t<br>\t\t}<br>\t\tary[cur]=ele;<br>\t\tcur++;<br>\t\t<br>\t}<br>\t&#47;&#47;fixed array --add   <br>\tpublic void  add(int ele) {<br>\t\tif(cur==fix.length) {<br>\t\t\treturn;<br>\t\t}<br>\t\tfix[cur]=ele;<br>\t\tcur++;<br>\t}<br>\t&#47;&#47;fixed array --delete<br>    public void delete() {<br>    \tif(cur==-1)<br>    \t\treturn ;<br>    \tfix[cur]=0;<br>    \tcur--;<br>    }<br>    &#47;&#47;fixed array --update<br>    public void update(int index,int ele) {<br>    \tif(index&gt;=0 &amp;&amp; index&lt;fix.length)<br>    \t\tfix[index]=ele;<br>    }<br>    &#47;&#47;merge<br>    public int[] merge(int[] a,int[] b ) {<br>    \tint[]c =new int[a.length+b.length];<br>    \tint j=0,k=0;<br>    \tfor(int i=0;i&lt;a.length+b.length;i++) {<br>    \t\tif(j==a.length) {<br>    \t\t\tc[i]=b[k];<br>    \t\t\tk++;<br>    \t\t\tcontinue;<br>    \t\t}else if(k==b.length){<br>    \t\t\tc[i]=a[j];<br>    \t\t\tj++;<br>    \t\t\tcontinue;<br>    \t\t\t<br>    \t\t}<br>    \t\tif(a[j]&lt;b[k]) {<br>    \t\t\tc[i]=a[j];<br>    \t\t\tj++;<br>    \t\t}else {<br>    \t\t\tc[i]=b[k];<br>    \t\t\tk++;<br>    \t\t}<br>    \t\t<br>    \t}<br>    \t<br>    \treturn c;<br>    }<br>}<br>","like_count":1,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438520,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65416,"user_name":"TryTs","can_delete":false,"product_type":"c1","uid":1036276,"ip_address":"","ucode":"1DD1E974D461A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f4/26b95f0b.jpg","comment_is_top":false,"comment_ctime":1549340995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5844308291","product_id":100017301,"comment_content":"祝大家新年快乐，王老师真的太负责了，不光是在新年更新，更重要的是老师能够在教完之后还为我们安排课程巩固。","like_count":1},{"had_liked":false,"id":65407,"user_name":"acqierement","can_delete":false,"product_type":"c1","uid":1234980,"ip_address":"","ucode":"AC8DA74B9CB924","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/24/f48a38f4.jpg","comment_is_top":false,"comment_ctime":1549337331,"is_pvip":false,"replies":[{"id":"24736","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550804282,"ip_address":"","comment_id":65407,"utype":2}],"discussion_count":1,"race_medal":0,"score":"5844304627","product_id":100017301,"comment_content":"自己总结了链表的部分算法，链表算是很简单的数据结构了，只要你心里有一个个节点的概念，必要时画图看一下还是很简单的。        <br>      1.单链表反转  反转比较简单,就是要有一个先前节点prev和当前节点cur，要有一个临时节点保存cur的下一个节点（cur.next），否则反转之后你就找不到下一个节点了。然后让head指向前一个节点prev。之后继续移动cur和prev节点进行下一次反转<br>\tpublic ListNode reverse(ListNode head) {<br>\t\tListNode prev = null;<br>\t\tListNode cur = head;<br>\t\twhile(cur != null) {<br>\t\t\tListNode temp = cur.next;<br>\t\t\tcur.next = prev;<br>\t\t\tprev = cur;<br>\t\t\tcur = temp;<br>\t\t}<br>\t\treturn prev;<br>\t}<br>\t2.两个有序的链表合并   思路就是自己创建一个链表，每次从两个链表头中找到较小的那个节点，接到自己的那个链表中。说着很简单，但还是有很多细节要注意。<br>\tpublic ListNode mergeTwoLists(ListNode l1,ListNode l2) {<br>\t\tif (l1  == null) return l2;<br>\t\tif (l2 == null) return l1;<br>\t\tListNode head = new ListNode(0);<br>\t\tListNode cur = head;<br>\t\twhile(l1 != null &amp;&amp; l2 != null) {<br>\t\t\tif (l1.val &lt; l2.val) {<br>\t\t\t\tcur.next = l1;<br>\t\t\t\tl1 = l1.next;<br>\t\t\t}else {<br>\t\t\t\tcur.next = l2;<br>\t\t\t\tl2 = l2.next;<br>\t\t\t}<br>            cur = cur.next;<br>\t\t}<br>\t\tif (l1 == null) cur.next = l2;<br>\t\tif (l2 == null) cur.next = l1;<br>\t\treturn head.next;<br>\t}<br><br>\t3.求链表的中间结点(如果是偶数，返回中间两个中靠右的那个）<br>这个问题就很简单了，环的检测也可以用到这种方法。就是用快慢指针，快的前进两步，慢的前进一步，等到快的指针到结尾时，慢的指针就到了中点。<br>\tpublic ListNode findCenter(ListNode head) {<br>\t\tListNode slow = head;<br>\t\tListNode fast = head;<br>\t\twhile(fast != null &amp;&amp; fast.next != null) {<br>\t\t\tslow = slow.next;<br>\t\t\tfast = fast.next.next;<br>\t\t}<br>\t\treturn slow;<br>\t}","like_count":1,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438439,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359860,"user_name":"tingting","can_delete":false,"product_type":"c1","uid":2035702,"ip_address":"新加坡","ucode":"61E6B0C4EC59C5","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0f/f6/609ded9f.jpg","comment_is_top":false,"comment_ctime":1665990802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665990802","product_id":100017301,"comment_content":" package array<br><br>&#47;&#47; time complexity: O(m+n)   <br>&#47;&#47; space complexity: O(m+n) <br><br>&#47;&#47; An golang implementation of merge two sorted array, assuming both array in ascending order<br>func mergeTwoSortedArray(arr1 []int, arr2 []int) []int {<br>\tif len(arr1) == 0 {<br>\t\treturn arr2<br>\t}<br>\tif len(arr2) == 0 {<br>\t\treturn arr1<br>\t}<br><br>\tres := make([]int, 0, len(arr1)+len(arr2))<br><br>\ti, j := 0, 0<br>\tfor i &lt; len(arr1) &amp;&amp; j &lt; len(arr2) {<br>\t\tif arr1[i] &lt;= arr2[j] {<br>\t\t\tres = append(res, arr1[i])<br>\t\t\ti++<br>\t\t} else {<br>\t\t\tres = append(res, arr2[j])<br>\t\t\tj++<br>\t\t}<br>\t}<br><br>\tres = res[:len(arr1)+len(arr2)] &#47;&#47; grow length before copy<br>\tif i &gt;= len(arr1) &amp;&amp; j &lt; len(arr2) {<br>\t\tcopy(res[(i+j):], arr2[j:])<br>\t}<br>\tif j &gt;= len(arr2) &amp;&amp; i &lt; len(arr1) {<br>\t\tcopy(res[(i+j):], arr1[i:])<br>\t}<br>\treturn res<br>}<br>","like_count":0},{"had_liked":false,"id":359854,"user_name":"tingting","can_delete":false,"product_type":"c1","uid":2035702,"ip_address":"新加坡","ucode":"61E6B0C4EC59C5","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0f/f6/609ded9f.jpg","comment_is_top":false,"comment_ctime":1665982256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665982256","product_id":100017301,"comment_content":"&#47;&#47; An golang implementation of dynamic array<br>func Append(arr []int, elems ...int) (newArr []int) {<br>\toldLen := len(arr)<br>\tnewLen := oldLen + len(elems)<br><br>\tif newLen &gt; cap(arr) { &#47;&#47; allocate a new double-sized array, copy existing elements over, then assign the new slice to arr.<br>\t\tnewArr = make([]int, len(arr), (cap(arr)+1)*2)<br>\t\tcopy(newArr, arr)<br>\t\tarr = newArr<br>\t}<br><br>\tarr = arr[0:newLen] &#47;&#47; grow length to newLen<br>\tcopy(arr[oldLen:newLen], elems)<br>\treturn arr<br>}","like_count":0},{"had_liked":false,"id":313440,"user_name":"陈以杰","can_delete":false,"product_type":"c1","uid":1594565,"ip_address":"","ucode":"69EF4CDC84C984","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/pCUrja4Z78P36FkdXQFFwgjoicDWSsIC0ibtibgibWRAXeyECTBpLg6IID89HKiaiakM6jia6IJxUGkSzMicXlB4MJHdqg/132","comment_is_top":false,"comment_ctime":1632444640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632444640","product_id":100017301,"comment_content":"30 个代码实现， 我想参考下，发出来的吗","like_count":0},{"had_liked":false,"id":281787,"user_name":"陈威洋","can_delete":false,"product_type":"c1","uid":2264679,"ip_address":"","ucode":"DCF84B4D3A7354","user_header":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","comment_is_top":false,"comment_ctime":1614903719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614903719","product_id":100017301,"comment_content":"今天6点起床，做第一个题，居然做了2个小时，不是看不懂逻辑和代码，而是一个--i和i--，搞了我一下，原本以为老师的代码写错，然后查资料，居然发现新大陆，这两个东西放在java的for里面的运行效果是没有区别的，那么问题来了，区别在哪里呢？当循环次数多的话，--i要快于i--，为什么呢？因为i--需要一个临时变量取存储返回自增前的值，而++i不需要！怎么理解呢？使用i++时，系统需要先申请一段内存空间，然后将值赛如进去，最后不用了才去释放。<br><br>结论：还是老师的代码写得好，并且有经验（只是这个经验有时候要自己找，哈哈~）","like_count":0},{"had_liked":false,"id":278551,"user_name":"rchild","can_delete":false,"product_type":"c1","uid":1462692,"ip_address":"","ucode":"2D4D41163516E6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM664mlBvfKEwP9qicZ7DLa4mc0S6jzSIcLwHicwuvOtvVGLacXrOkZWUEZQM7OJicOjsQq5icmgJ8SoqA/132","comment_is_top":false,"comment_ctime":1613047500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613047500","product_id":100017301,"comment_content":"又是一年春节，希望今年能实现小目标","like_count":0},{"had_liked":false,"id":264586,"user_name":"Q罗","can_delete":false,"product_type":"c1","uid":1792098,"ip_address":"","ucode":"E797378F4DA1F4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/58/62/346dd248.jpg","comment_is_top":false,"comment_ctime":1606533663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606533663","product_id":100017301,"comment_content":"动态扩容数组，验证过OK。<br><br>public class DynamicArray {<br><br>    &#47;&#47;数组实际的数量<br>    public int count;<br>    &#47;&#47;数组最大的容量<br>    public int capacity;<br>    public String[] data;<br><br>    public DynamicArray(int capacity){<br>        data = new String[capacity];<br>        this.capacity = capacity;<br>        count = 0;<br>    }<br><br>    public void expand(){<br>        capacity = capacity &lt;&lt; 1;<br>        String[] newArray = new String[capacity];<br>        for(int i = 0 ; i &lt; count; i++){<br>            newArray[i] = data[i];<br>        }<br><br>        data = newArray;<br><br>    }<br><br>    public boolean insert(int index, String value){<br>        &#47;&#47;因为数组是连续存放，所以insert插入的最大位置只能是数组最后一项的后一位<br>        if(index &gt; count || index &lt; 0){<br>            return false;<br>        }<br><br>        &#47;&#47;容量已满，插入位置刚好是数组最后一项的后一位<br>        if(count == capacity){<br>            &#47;&#47;扩容<br>            expand();<br>        }<br><br>        for(int i = count - 1; i &gt;= index; i--){<br>            data[i + 1] = data[i];<br>        }<br><br>        data[index] = value;<br>        count++;<br><br>        return true;<br>    }<br><br>    public boolean delete(int index){<br>        if(index &gt; count - 1 || index &lt; 0){<br>            return false;<br>        }<br><br>        if(count == 0){<br>            return false;<br>        }<br><br>        &#47;&#47;从index位置开始，后面依次覆盖前面的值。<br>        for(int i = index + 1; i &lt; count; i++){<br>            &#47;&#47;第一次进循环i - 1的值就是（index + 1） - 1 = index<br>            data[i - 1] = data[i];<br>        }<br><br>        data[count - 1] = null;<br>        count--;<br><br>        return true;<br>    }<br><br>}","like_count":0},{"had_liked":false,"id":244349,"user_name":"prepared","can_delete":false,"product_type":"c1","uid":1194853,"ip_address":"","ucode":"00E54A5C7CDCBE","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/65/3a4fc8cf.jpg","comment_is_top":false,"comment_ctime":1598490538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598490538","product_id":100017301,"comment_content":"<br><br>&#47;**<br> * 支持动态扩容的数组<br> *<br> * @Author: prepared<br> * @Date: 2020&#47;8&#47;27 08:37<br> *&#47;<br>public class DArray {<br><br>\tprivate String[] data;<br><br>\tprivate int count;<br><br>\t&#47;&#47;\t容量<br>\tprivate int capacity;<br><br>\tpublic DArray(String[] data, int count, int capacity) {<br>\t\tthis.data = data;<br>\t\tthis.count = count;<br>\t\tthis.capacity = capacity;<br>\t}<br><br>\t&#47;**<br>\t * 初始化数组构造方法——指定数组初始容量<br>\t *<br>\t * @param capacity<br>\t *&#47;<br>\tpublic DArray(int capacity) {<br>\t\tthis.data = new String[capacity];<br>\t\tthis.count = 0;<br>\t\tthis.capacity = capacity;<br>\t}<br><br>\t&#47;**<br>\t * 数组扩容<br>\t *<br>\t * @return<br>\t *&#47;<br>\tpublic String[] expand() {<br>\t\tif (count &gt;= capacity) {<br>\t\t\tString[] newArray = new String[this.capacity * 2];<br>\t\t\tthis.capacity = this.capacity * 2;<br>\t\t\t&#47;&#47; 数据copy到扩容后的数组<br>\t\t\tfor(int i = 0; i &lt; count; i++) {<br>\t\t\t\tnewArray[i] = this.data[i];<br>\t\t\t}<br>\t\t\treturn newArray;<br>\t\t}else {<br>\t\t\treturn this.data;<br>\t\t}<br>\t}<br><br>\t&#47;**<br>\t * 往数组中添加数据<br>\t *<br>\t * @param value<br>\t * @return<br>\t *&#47;<br>\tpublic boolean append(String value) {<br>\t\tif(count &gt;= this.capacity) {<br> \t\t\t&#47;&#47; 扩容<br>\t\t\tthis.data = expand();<br>\t\t}<br>\t\tthis.data[count] = value;<br>\t\tcount++;<br>\t\treturn true;<br>\t}<br><br>\tpublic void printAllData() {<br>\t\t&#47;&#47;\t循环打印数组中的数据<br>\t\tfor(int i = 0; i &lt; data.length; i++) {<br>\t\t\tSystem.out.print(data[i] + &quot; &quot;);<br>\t\t}<br>\t\t&#47;&#47;\t换行<br>\t\tSystem.out.println();<br>\t}<br><br>\tpublic static void main(String[] args) {<br>\t\tDArray dArray = new DArray(2);<br>\t\tdArray.append(&quot;hello&quot;);<br>\t\tdArray.append(&quot;word&quot;);<br>\t\tdArray.printAllData();<br>\t\tSystem.out.println(&quot;扩容前，数组size = &quot; + dArray.capacity);<br>\t\tdArray.append(&quot; java &quot;);<br>\t\tdArray.printAllData();<br>\t\tSystem.out.println(&quot;扩容后，数组size = &quot; + dArray.capacity);<br>\t}<br><br>}<br>","like_count":0},{"had_liked":false,"id":219587,"user_name":"star","can_delete":false,"product_type":"c1","uid":1303268,"ip_address":"","ucode":"9215C4134441FC","user_header":"https://static001.geekbang.org/account/avatar/00/13/e2/e4/f1ba6d82.jpg","comment_is_top":false,"comment_ctime":1590047418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590047418","product_id":100017301,"comment_content":"&#47;*<br>Three Sum（求三数之和）<br>author: xidoublestar<br>date: 2020-5-21<br>*&#47;<br>int compare(const void* a, const void* b)<br>{<br>    return (*(int*)a - *(int*)b);<br>}<br><br>int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {<br>    &#47;&#47;排除平台只输出]的bug<br>    *returnSize = 0;<br>    &#47;&#47;排除输入小于3的情况<br>    if (numsSize &lt; 3)<br>        return NULL;<br>    &#47;&#47;使用qsort函数快速排序<br>    qsort(nums, numsSize, sizeof(int), compare);<br><br>    &#47;&#47;申请二级指针空间<br>    int** returnArray = (int**)malloc(sizeof(int*) * (numsSize - 2) * (numsSize - 2));<br>    &#47;&#47;申请每个一维数组大小的空间<br>    *returnColumnSizes = (int*)malloc(sizeof(int) * (numsSize - 2) * (numsSize - 2));<br><br>    int cur = 0, low = 0,high = 0;<br>    &#47;&#47;cur遍历数组，low和high分别做为左值和右值的下标往中间夹<br>    while (nums[cur] &lt;= 0 &amp;&amp; cur &lt; numsSize - 2) {<br>        low = cur + 1;<br>        high = numsSize - 1;<br>        while (low &lt; high) {<br>            if (0 == (nums[cur] + nums[low] + nums[high])) {<br>                returnArray[*returnSize] = (int*)malloc(sizeof(int) * 3);&#47;&#47;每找到一组，二级指针分配3个空间<br>                (*returnColumnSizes)[*returnSize] = 3;&#47;&#47;记录列数<br>                returnArray[*returnSize][0] = nums[cur];<br>                returnArray[*returnSize][1] = nums[low];<br>                returnArray[(*returnSize)++][2] = nums[high];<br><br>                while ((nums[low] == nums[++low]) &amp;&amp; (low &lt; high));&#47;&#47;往后去重<br>                while ((nums[high] == nums[--high]) &amp;&amp; (low &lt; high));&#47;&#47;往前去重<br>            }<br>            else if (0 &lt; (nums[cur] + nums[low] + nums[high])) {<br>                high--;<br>            }<br>            else {<br>                low++;<br>            }<br><br>        }<br>        while ((nums[cur] == nums[++cur]) &amp;&amp; (cur &lt; numsSize - 2));&#47;&#47;cur左值去重<br>    }<br>    <br>    return returnArray;<br>}","like_count":0},{"had_liked":false,"id":217224,"user_name":"barry","can_delete":false,"product_type":"c1","uid":1331099,"ip_address":"","ucode":"5B7241F059890A","user_header":"https://static001.geekbang.org/account/avatar/00/14/4f/9b/ad1775ae.jpg","comment_is_top":false,"comment_ctime":1589443338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589443338","product_id":100017301,"comment_content":"&#47;&#47;单链表反转 核心部分<br>func (node *SingleNode) reverse() {<br>\tvar pre *Node<br>\tvar curr = node.head<br>\tfor curr != nil {<br>\t\ttmp := curr.next<br>\t\tcurr.next = pre<br>\t\tpre = curr<br>\t\tcurr = tmp<br>\t}<br>\tnode.head = pre<br>}","like_count":0},{"had_liked":false,"id":217139,"user_name":"barry","can_delete":false,"product_type":"c1","uid":1331099,"ip_address":"","ucode":"5B7241F059890A","user_header":"https://static001.geekbang.org/account/avatar/00/14/4f/9b/ad1775ae.jpg","comment_is_top":false,"comment_ctime":1589424748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589424748","product_id":100017301,"comment_content":"&#47;&#47;合并两个有序数组<br>func merge(array1 []int, array2 []int) []int {<br>\tlength := len(array1) + len(array2)<br>\tarr3 := make([]int, length)<br>\ti, j, k := 0, 0, 0<br>\tfor {<br>\t\tif i == len(array1) &amp;&amp; j == len(array2) {<br>\t\t\tbreak<br>\t\t}<br>\t\tif i == len(array1) {<br>\t\t\tarr3[k] = array2[j]<br>\t\t\tk++<br>\t\t\tj++<br>\t\t} else if j == len(array2) {<br>\t\t\tarr3[k] = array1[i]<br>\t\t\tk++<br>\t\t\ti++<br>\t\t} else {<br>\t\t\tif array1[i] &gt; array2[j] {<br>\t\t\t\tarr3[k] = array2[j]<br>\t\t\t\tk++<br>\t\t\t\tj++<br>\t\t\t} else {<br>\t\t\t\tarr3[k] = array1[i]<br>\t\t\t\tk++<br>\t\t\t\ti++<br>\t\t\t}<br>\t\t}<br><br>\t}<br>\treturn arr3<br>}","like_count":0},{"had_liked":false,"id":206284,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1586834552,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586834552","product_id":100017301,"comment_content":"我谨代表我本人对 @Smallfly 表示感谢！","like_count":0},{"had_liked":false,"id":159144,"user_name":"black","can_delete":false,"product_type":"c1","uid":1681512,"ip_address":"","ucode":"9B5E0909926674","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/68/70392fdd.jpg","comment_is_top":false,"comment_ctime":1575547015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575547015","product_id":100017301,"comment_content":"  static int[] a;<br>    static int num;<br>    static int count = 0;<br>    public ArrayLeetCode(int num) {<br>        num = num;<br>        a = new int[num];<br>    }<br>    public void addElement(int number) {<br>        if(count &#47; 0.75 &gt;= num) {<br>            reSize();<br>        }<br>        a[count++] = number;<br>    }<br><br>    private void reSize() {<br>        int size = num;<br>        num &lt;&lt;= 1;<br>        int[] newArr = new int[num];<br>        System.arraycopy(a,0,newArr,0,size);<br>        a  =  Arrays.copyOfRange(newArr,0,num);<br>    }","like_count":0},{"had_liked":false,"id":159143,"user_name":"black","can_delete":false,"product_type":"c1","uid":1681512,"ip_address":"","ucode":"9B5E0909926674","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/68/70392fdd.jpg","comment_is_top":false,"comment_ctime":1575546953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575546953","product_id":100017301,"comment_content":" &#47;&#47;两个有序数组，合并为一个有序数组<br>    private int[] merge(int[] a, int[] b) {<br>        int len = a.length + b.length;<br>        int[] newArr = new int[len];<br>        int i = 0 ;<br>        int j = 0;<br>        int k = 0;<br>        while (a[i] &lt;= b[j]) {<br>            newArr[k++] = a[i++];<br>        }<br>        while (a[i] &gt;= b[j]) {<br>            newArr[k++] = b[j++];<br>        }<br>        while (i &lt; a.length) {<br>            newArr[k++] = a[i++];<br>        }<br>        while (j &lt; b.length) {<br>            newArr[k++] = b[j++];<br>        }<br>        return newArr;<br>    }","like_count":0},{"had_liked":false,"id":146172,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1572446961,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572446961","product_id":100017301,"comment_content":"两个有序数组合并为一个有序数组<br>public class Demo03 {<br>    public static void main(String[] args) {<br>        int[] array = {2, 3, 4, 5, 6, 7, 8, 9};<br>        int[] array2 = {10, 11, 12, 13, 14, 15, 16, 17};<br>        int[] newArray = new int[array.length + array2.length];<br><br>        &#47;&#47;拷贝<br>        System.arraycopy(array, 0, newArray, 0, array.length);<br>        System.arraycopy(array2, 0, newArray, (newArray.length - array2.length), array2.length);<br><br>        &#47;&#47;遍历<br>        for (int i = 0; i &lt; newArray.length; i++) {<br>            System.out.printf(newArray[i] + &quot; &quot;);<br><br>        }<br>    }<br>}","like_count":0},{"had_liked":false,"id":145752,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1572359953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572359953","product_id":100017301,"comment_content":"public class Demo01 {<br>    public static void main(String[] args) {<br>        Employ employ = new Employ(10);<br>        for (int i = 0; i &lt; 15; i++) {<br>            employ.add(i);<br>        }<br>        employ.list();<br><br>    }<br><br>}<br><br>class Employ {<br>    private int size;<br>    private int count;<br>    private int[] array;<br><br>    public Employ(int size) {<br>        this.size = size;<br>        this.array = new int[size];<br>        this.count = 0;<br><br>    }<br><br>    &#47;**<br>     * 添加数据<br>     *<br>     * @param data<br>     *&#47;<br><br>    public void add(int data) {<br>        array[count++] = data;<br>        if (array.length &gt;= size) {<br>            int[] newArray = new int[array.length * 2];<br>            System.arraycopy(array, 0, newArray, 0, array.length);<br>            array = newArray;<br><br>        }<br><br>    }<br><br>    public void list() {<br>        for (int i = 0; i &lt; count; i++) {<br>            System.out.printf(array[i] + &quot; &quot;);<br>        }<br>    }<br><br>}<br><br>","like_count":0},{"had_liked":false,"id":142003,"user_name":"咩咩咩","can_delete":false,"product_type":"c1","uid":1237849,"ip_address":"","ucode":"9DEC7D5D52D972","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6a8fRQFxX5VXOpRKyYibsemKwDMexMxkzZOBquPo6T4HOcYicBiaTcqibDoTIhZSjVjF3nKXTEGDYOGPt2xqqwiawjg/132","comment_is_top":false,"comment_ctime":1571278123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571278123","product_id":100017301,"comment_content":"难道我理解的有序数组(动态增删改查)和大伙的不一样?   字数限制,将打印方法删除了<br>public class FixedList&lt;E extends Comparable&gt; {<br>    private static final int DEFAULT_CAPACITY=10;<br>    private Object[] data;<br>    private int capacity;<br>    private int size;<br>    public FixedList(){<br>        capacity=DEFAULT_CAPACITY;<br>        data=new Object[capacity];<br>    }<br>    public FixedList(int capacity){<br>        this.capacity=capacity;<br>        data=new Object[capacity];<br>    }<br>    &#47;&#47;增<br>    public boolean insert(E ele){<br>        if(size==capacity)<br>            return false;<br>        int index = find(ele);<br>        System.arraycopy(data,index,data,index+1,size-index);<br>        data[index]=ele;<br>        size++;<br>        return true;<br>    }<br>    &#47;&#47;查<br>    public E get(int index){<br>        checkIndex(index);<br>        return (E) data[index];<br>    }<br>    &#47;&#47;删<br>    public boolean remove(E ele){<br>        int index=find(ele);<br>        E e = get(index);<br>        if(e.equals(ele)){<br>            return remove(index);<br>        }<br>        return false;<br>    }<br>    &#47;&#47;删<br>    public boolean remove(int index){<br>        checkIndex(index);<br>        System.arraycopy(data,index+1,data,index,size-index-1);<br>        size--;<br>        return true;<br>    }<br>    &#47;&#47;改<br>    public boolean replace(E srcEle,E destEle){<br>        if(remove(srcEle)){<br>            insert(destEle);<br>            return true;<br>        }<br>        return false;<br>    }<br><br>    private int find(E key){<br>        if(size==0)<br>            return size;<br>        int lo=0,hi=size-1,mid;<br>        while(lo&lt;hi){<br>            mid=(lo+hi)&#47;2;<br>            int compare=key.compareTo(this.get(mid));<br>            if(compare&lt;0){<br>                hi=mid-1;<br>            }else if(compare&gt;0){<br>                lo=mid+1;<br>            }else{<br>                return mid;<br>            }<br>        }<br>        if(lo==hi)<br>            return key.compareTo(this.get(lo))&gt;0?lo+1:lo;<br>        else<br>            return lo;<br>    }<br>    private void checkIndex(int index){<br>        if(index&lt;0||index&gt;capacity)<br>            throw new IndexOutOfBoundsException(&quot;角标越界&quot;);<br>    }<br>}","like_count":0},{"had_liked":false,"id":138550,"user_name":"陈小白( ´･ᴗ･` )","can_delete":false,"product_type":"c1","uid":1334864,"ip_address":"","ucode":"A92C85374A711B","user_header":"https://static001.geekbang.org/account/avatar/00/14/5e/50/d2cdb05c.jpg","comment_is_top":false,"comment_ctime":1570332943,"is_pvip":false,"replies":[{"id":"53611","content":"加油！","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570580847,"ip_address":"","comment_id":138550,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570332943","product_id":100017301,"comment_content":"这些题，我都做了一遍，除了那个“求缺失的第一个正数“没有相处方法，其它的都是自己做出来了。尤其最后那个”合并 k 个排序链表“，其实以前我也看过一次，当时的想法觉得是一个个取出来，然后排序然后再遍历。学完这堂课之后，看完题目，咦，这不是合并两个链表么？哦，合并多个，怎么处理多个问题？好像可以分治归并，嗯，好像是可以。我了个去，就有那种顿塞的感觉，那种开心。谢谢这门课。也谢谢老师，虽然课程里面还有很多没有明白，不过有些数据结构，算法，细细品味，好爽。<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469566,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570580847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138448,"user_name":"coldpark","can_delete":false,"product_type":"c1","uid":1058331,"ip_address":"","ucode":"D1B0F343B384F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/26/1b/4caf36bd.jpg","comment_is_top":false,"comment_ctime":1570247039,"is_pvip":false,"replies":[{"id":"53612","content":"校招这种问题多点，社招的话不会问的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570580975,"ip_address":"","comment_id":138448,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570247039","product_id":100017301,"comment_content":"缺失的第一个正数那个题，如果让用额外内存空间还行，如果严格按照题意就是一道智力题，请问这种题在面时中遇到的多吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469524,"discussion_content":"校招这种问题多点，社招的话不会问的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570580975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129703,"user_name":"Geek_18b741","can_delete":false,"product_type":"c1","uid":1368496,"ip_address":"","ucode":"097BA0C2F44150","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLlztvlBgajZMEph8AvkP2pfoqNCGtYSalIKgrCbCg0MWDZJgJwqVRfWA6cgIoZicL6dKibfK0zjsWg/132","comment_is_top":false,"comment_ctime":1567222924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567222924","product_id":100017301,"comment_content":"终于作业完成，https:&#47;&#47;github.com&#47;Emma123456&#47;leetcodepractice&#47;tree&#47;master&#47;src&#47;homework&#47;linkedlist<br>https:&#47;&#47;github.com&#47;Emma123456&#47;leetcodepractice&#47;tree&#47;master&#47;src&#47;homework&#47;array<br>包含老师布置的作业和LeetCode代码。LeetCode相关题目已经做过，但这次还没有全部写出来。需要参考解释。但是比之前已经好多了。特别是在合并多个有序列表的时候，第一反应就是用堆排序。因为课程中应该有提到过。","like_count":0},{"had_liked":false,"id":125445,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1566185950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566185950","product_id":100017301,"comment_content":"现在才做好第一阶段的题","like_count":0},{"had_liked":false,"id":95333,"user_name":"懒猫","can_delete":false,"product_type":"c1","uid":1206544,"ip_address":"","ucode":"B4B567A11B491D","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/10/275ae749.jpg","comment_is_top":false,"comment_ctime":1558020844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558020844","product_id":100017301,"comment_content":"边工作边练，练完第一天内容，打卡","like_count":0},{"had_liked":false,"id":84710,"user_name":"二哥不再迷茫","can_delete":false,"product_type":"c1","uid":1043199,"ip_address":"","ucode":"D02D489F546A09","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/ff/d1eb00e3.jpg","comment_is_top":false,"comment_ctime":1554896861,"is_pvip":true,"replies":[{"id":"30469","content":"对的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1554939069,"ip_address":"","comment_id":84710,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554896861","product_id":100017301,"comment_content":"Missing Positive；循环n次和2n次，时间复杂度都算是O(n)吧，空间复杂度也是如此!<br>根据他们的思路变通来的，不知道对不对，请老师帮忙看看，哈哈哈，现在老师是不是都不维护了。<br>public static int getFirstMissingPositive(int[] nums){<br>        int result = 1;<br><br>        int[] arr = new int[nums.length+1];<br>        for(int i =0;i&lt;nums.length;i++){<br>            if(nums[i] &lt; arr.length &amp;&amp; nums[i] &gt; 0){<br>                arr[nums[i]] = nums[i];<br>            }<br>        }<br>        for(int j=1;j&lt;arr.length;j++){<br>            if(arr[j] == j){<br>                result = j+1;<br>            }else {<br>                result = j;<br>                break;<br>            }<br><br>        }<br><br>        return result;<br><br>    }","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446427,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554939069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83349,"user_name":"WhoAmI","can_delete":false,"product_type":"c1","uid":1445156,"ip_address":"","ucode":"58588E643EB842","user_header":"https://static001.geekbang.org/account/avatar/00/16/0d/24/b07de4f2.jpg","comment_is_top":false,"comment_ctime":1554542537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554542537","product_id":100017301,"comment_content":"一般都说线程池有界队列使用ArrayBlockingQueue，无界队列使用LinkedBlockingQueue，我很奇怪，有界无界不是取决于创建的时候传不传capacity参数么，我现在想创建线程池的时候，new LinkedBlockingQueue(2000)这样定义有界队列，请问可以吗？","like_count":0},{"had_liked":false,"id":82401,"user_name":"Kylin","can_delete":false,"product_type":"c1","uid":1450301,"ip_address":"","ucode":"15471CBE031E9E","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/3d/7e2c0345.jpg","comment_is_top":false,"comment_ctime":1554201606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554201606","product_id":100017301,"comment_content":"合并K个有序链表：<br>&#47;**<br> * Definition for singly-linked list.<br> * public class ListNode {<br> *     int val;<br> *     ListNode next;<br> *     ListNode(int x) { val = x; }<br> * }<br> *&#47;<br>public class Solution {<br>    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {<br>        ListNode dummy = new ListNode(0);<br>        ListNode cur = dummy;<br>        while(l1 != null &amp;&amp; l2 != null){<br>            if(l1.val &lt; l2.val){<br>                cur.next = l1;<br>                l1 = l1.next;<br>            }else{<br>                cur.next = l2;<br>                l2 = l2.next;<br>            }<br>            cur = cur.next;<br>        }<br>        cur.next = l1 != null ? l1:l2;<br>        return dummy.next;<br>    }<br><br>    public ListNode mergeHelper(ListNode[] lists, int low, int high) {<br>        if (low &lt; high) {<br>            int mid = (low + high) &#47; 2;<br>            ListNode leftList = mergeHelper(lists, low, mid);<br>            ListNode rightList = mergeHelper(lists, mid + 1, high);<br>            return mergeTwoLists(leftList, rightList);<br>        }<br>        return lists[low];<br>    }<br><br><br>    public ListNode mergeKLists(ListNode[] lists) {<br>        if (lists == null || lists.length == 0) {<br>            return null;<br>        }<br>        return mergeHelper(lists, 0, lists.length - 1);<br>    }<br>}","like_count":0},{"had_liked":false,"id":72138,"user_name":"静思览霓","can_delete":false,"product_type":"c1","uid":1119967,"ip_address":"","ucode":"FB61126250272A","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/df/82349475.jpg","comment_is_top":false,"comment_ctime":1551527943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551527943","product_id":100017301,"comment_content":"感觉这些练习题，对自己而言有些困难，没有思路，不知道该怎么下手","like_count":0},{"had_liked":false,"id":67820,"user_name":"未来的胡先森","can_delete":false,"product_type":"c1","uid":1234682,"ip_address":"","ucode":"AFF193AC0E2E6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/fa/1f5bf642.jpg","comment_is_top":false,"comment_ctime":1550286142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550286142","product_id":100017301,"comment_content":"缺失的第一个正数<br>解题思路 ：<br><br>1、由题可得数组索引 index 对应的值为 index + 1，整个数组的取值范围为 [ 1 , length] (length 为数组长度即元素个数)，且无重复。（可看做简单的 hashtable）<br><br>2、代码中的循环，在当前满足 nums[i] = i + 1 时 i++, 超出取值范围时将数值与末尾数交换，若是满足取值则进行对应索引值交换，直到满足 nums[i] = i + 1<br><br>最后输出的 length 为按升序排列的最大符合要求值，length + 1 则为缺失正数<br><br>void swap(int* nums, int a, int b)<br>{<br>\tint temp = nums[a];<br>\tnums[a] = nums[b];<br>\tnums[b] = temp;<br>}<br>int firstMissingPositive(int* nums, int numsSize) {<br>\tint length = numsSize, i = 0;<br>\twhile (i&lt;length)<br>\t{<br>\t\tif (nums[i] == i + 1) ++i;<br>\t\telse if (nums[i]&lt;=0 || nums[i]&gt;length || nums[i] == nums[nums[i]-1])<br>\t\t\tswap(nums, i, --length);&#47;&#47;将不符合的数放在末尾<br>\t\telse<br>\t\t\tswap(nums,i,nums[i]-1);<br>\t}<br>\treturn length + 1;<br>}","like_count":0},{"had_liked":false,"id":67490,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550158453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550158453","product_id":100017301,"comment_content":"&#47;&#47;合并两个有序链表<br>    def mergeTwoLists(self, l1, l2):<br>        if not l1:<br>            return l2<br>        if not l2:<br>            return l1<br>        p = ListNode(0)<br>        head = p<br><br>        while l1 and l2 :<br>            if l1.val &lt;= l2.val:<br>                p.next = l1<br>                l1 = l1.next<br>            else:<br>                p.next = l2<br>                l2 = l2.next<br>            p = p.next<br>                <br>        if l1 :<br>            p.next = l1<br>        else:<br>            p.next = l2<br>        return head.next","like_count":0},{"had_liked":false,"id":67429,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550144533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550144533","product_id":100017301,"comment_content":"&#47;&#47;双向链表的实现及其增删操作<br>#include&lt;stdlib.h&gt;<br>#define LEN sizeof(struct node)<br>struct node{<br>\tint num;<br>        struct node *pre;<br>\tstruct node *next;<br>};<br>struct node *creatList(int n){ <br>\tstruct node *head,*p1,*p2;<br>\tint i;<br>\tif(n&lt;1){<br>\t\t printf(&quot;链表创建失败\\n&quot;);<br>\t}<br>\telse{<br>\t\thead=(struct node*)malloc(sizeof(LEN));<br>\t\thead-&gt;next=NULL;<br>                head-&gt;pre=NULL;<br>\t\tfor(i=0 ; i&lt;n ; i++){<br>\t\t\tp1=(struct node*)malloc(sizeof(LEN));<br>\t\t\tp1-&gt;num=i;<br>\t\t\tp1-&gt;next=head-&gt;next;<br>\t\t\thead-&gt;next=p1;<br>\t\t}<br>                p1=head;<br>                while(p1-&gt;next!=NULL){<br>\t\t\tp1-&gt;next-&gt;pre=p1;<br>\t\t\tp1=p1-&gt;next;<br>\t\t}<br>\tprintf(&quot;双向链表创建成功\\n&quot;);<br>    }<br>  return head;<br>}<br>struct node *getelement(struct node *head,int n){<br>\tstruct node *p;<br>\tint i=1;<br>\tif(n&lt;1){<br>\t\tprintf(&quot;链表中不存在该节点\\n&quot;);<br>\t}<br>\telse{<br>\t\tp=head-&gt;next;<br>\t\twhile(p!=NULL&amp;&amp;i&lt;n){<br>\t\t\tp=p-&gt;next;<br>\t\t\ti=i+1;<br>\t\t}<br>\t}\t<br>\tif(p!=NULL){<br>\t\treturn p;<br>\t} <br>\telse {<br>\t\tprintf(&quot;该节点不存在\\n&quot;);\t<br>\t\treturn NULL;<br>  }<br>}<br>&#47;&#47;删除<br>void del(struct node *head,int n){&#47;&#47;删除 <br>\tstruct node *p1,*p2;<br>\tif(n&lt;1){<br>\t\tprintf(&quot;该节点不存在\\n&quot;);<br>\t\thead=NULL;<br>\t}<br>\telse if(n==1){<br>                head-&gt;next-&gt;pre=NULL;<br>\t\thead=head-&gt;next ;<br>\t\tfree(head);<br>\t}<br>\telse{<br>\t\tp1=getelement(head,n);<br>\t\tif(p1==NULL){<br>\t\t\tprintf(&quot;该节点不存在\\n&quot;);<br>\t\t}else if(p1-&gt;next==NULL){<br>                        p1-&gt;pre-&gt;next=NULL;<br>\t\t        free(p1);<br>                }else{<br>\t\t\tp1-&gt;pre-&gt;next=p1-&gt;next;<br>\t\t\tp1-&gt;next-&gt;pre=p1-&gt;pre;<br>\t\t\tfree(p1);<br>\t\t}<br>\t}<br>}<br>void insert(struct node *head,int n){<br>\tstruct node *p1,*p2,*p3;<br>\tp3=(struct node*)malloc(sizeof(LEN));<br>\tp3-&gt;num=10000;<br>\tif(n&lt;1)<br>\t    printf(&quot;该节点不存在，无法插入\\n&quot;);<br>\telse if(n==1){<br>            p3-&gt;next=head;<br>            head-&gt;pre=p3;<br>            p3-&gt;pre=NULL;<br>            head=p3;<br>\t}else{<br>\t\tp1=getelement(head,n-1);<br>\t\tif(p1==NULL){<br>\t \t\tprintf(&quot;该节点不存在，无法插入\\n&quot;);<br>                }else if(p1-&gt;next==NULL){<br>                        p1-&gt;next=p3;<br>\t\t        p3-&gt;pre=p1;<br>                        p3-&gt;next=NULL;<br>                }else{<br>\t\t\tp1-&gt;next-&gt;pre=p3;<br>\t\t\tp1-&gt;next=p3;<br>                        p3-&gt;pre=p1;<br>\t\t        p3-&gt;next=p1-&gt;next;<br>\t\t}\t<br>\t}<br>}","like_count":0},{"had_liked":false,"id":67424,"user_name":"TryTs","can_delete":false,"product_type":"c1","uid":1036276,"ip_address":"","ucode":"1DD1E974D461A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f4/26b95f0b.jpg","comment_is_top":false,"comment_ctime":1550143462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550143462","product_id":100017301,"comment_content":"求众数<br>#include&lt;iostream&gt;<br>#include&lt;algorithm&gt;<br>using namespace std;<br>int n[20];<br>int majority(){<br>\tint k;&#47;&#47;代表输入元素的个数 <br>\tcin&gt;&gt;k;<br>\tfor(int i = 0;i &lt; k;i++){<br>\t\tcin&gt;&gt;n[i];<br>\t}<br>\tsort(n,n + k);<br>\tint num = 0;<br>\tfor(int i = 1;i &lt; k;i++){<br>\t\tif(n[i] == n[i - 1]){<br>\t\t\tnum++;<br>\t\t}<br>\t\telse num = 0;<br>\t\tif(num &gt;= k &#47; 2 ){<br>\t\t\tcout&lt;&lt;n[i];<br>\t\t\treturn 1;<br>\t\t}<br>\t}<br>}<br>int main(){<br>\tmajority(); <br>}","like_count":0},{"had_liked":false,"id":67364,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550135451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550135451","product_id":100017301,"comment_content":"&#47;&#47;循环链表及其增删操作<br>#include&lt;stdlib.h&gt;<br>#define LEN sizeof(struct node)<br>struct node{<br>int num;<br>struct node *next;<br>};<br><br>int size;<br><br>&#47;&#47;创建链表<br>struct node *creatlist(int n){<br>\tstruct node *head,*p1,*p2;<br>\tint i,k;<br>\tk = 0;<br>\tif(n &lt; 1){<br>\t\t head = NULL;<br>\t\t printf(&quot;链表创建失败\\n&quot;);<br>\t}<br>\telse{<br>\t\thead = (struct node*)malloc(sizeof(LEN));<br>\t\tp1 = (struct node*)malloc(sizeof(LEN));<br>\t\tp2 = p1; <br>\t\tp1-&gt;num = k;<br>\t\thead-&gt;next = p1;<br>\t\tfor(i=0; i&lt;n-1; i++){<br>\t\t\tk = k+2;<br>\t\t\tp1 = (struct node*)malloc(sizeof(LEN));<br>\t\t\tp1-&gt;num = k;<br>\t\t\tp2-&gt;next = p1;<br>\t\t\tp2 = p1;<br>\t\t}<br>\t\tp1-&gt;next=head;<br>                size = n;<br>\t        printf(&quot;链表创建成功\\n&quot;);<br>       }<br>       return head;<br>}<br>&#47;&#47;删除节点<br>void del(struct node *head,int n){<br>\tstruct node *p1,*p2;<br>\tif(n&lt;1 || n&gt;size){<br>\t\tprintf(&quot;该节点不存在\\n&quot;);<br>\t}<br>\telse if(n==1){<br>                p1=getelement(head,size);<br>\t\tp1-&gt;next=head-&gt;next;<br>\t\tfree(head);<br>                head = p1-&gt;next;<br>\t}<br>\telse{<br>                p1=getelement(head,n-1);<br>\t\tp2=p1;<br>\t\tp1=p1-&gt;next;<br>\t\tp2-&gt;next=p1-&gt;next;<br>\t\tfree(p1);<br>\t\tprintf(&quot;已删除该节点\\n&quot;);<br>                size--;<br>\t}<br>}<br>&#47;&#47;查找节点<br>struct node *getelement(struct node *head,int n){<br>\tstruct node *p;<br>\tint i=1;<br>\tif(n&lt;1){<br>\t\tprintf(&quot;链表中不存在该节点\\n&quot;);<br>\t}<br>\telse{<br>\t\tp=head;<br>\t\twhile(i&lt;n){<br>\t\t\tp=p-&gt;next;<br>\t\t\ti=i+1;<br>\t\t}<br>\t}\t<br>\tif(p!=NULL){<br>\t\treturn p;<br>\t} <br>\telse {<br>\t\tprintf(&quot;该节点不存在\\n&quot;);\t<br>\t\treturn NULL;<br>        }<br>}<br>&#47;&#47;插入节点<br>void insert(struct node *head,int n){<br>\tstruct node *p1,*p2,*p3;<br>\tp3=(struct node*)malloc(sizeof(LEN));<br>\tp3-&gt;num=10000;<br>\tif(n&lt;1 || n&gt;size)<br>\t    printf(&quot;该节点不存在，无法插入\\n&quot;);<br>\telse if(n==1){<br>                p1=getelement(head,size);<br>\t\tp3-&gt;next=p1;<br>                p1-&gt;next = head;<br>                head = p1;<br>\t}<br>\telse{<br>\t\tp1=getelement(head,n-1);<br>\t\tif(p1==NULL)<br>\t \t\tprintf(&quot;该节点不存在，无法插入\\n&quot;);<br>\t\telse{<br>\t\t\tp2=p1-&gt;next;<br>\t\t\tp1-&gt;next=p3;<br>\t\t        p3-&gt;next=p2;<br>\t\t        printf(&quot;节点插入成功\\n&quot;);<br>                        size++;<br>\t\t}\t<br>\t}<br>}","like_count":0},{"had_liked":false,"id":67308,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550127880,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550127880","product_id":100017301,"comment_content":"&#47;&#47;得到链表中间节点<br>void getmid(struct node* head){<br>\tif(head==NULL || head-&gt;next==NULL){<br>\t\tprintf(&quot;链表无法得到中间节点&quot;);<br>\t\treturn ;<br>\t}else{<br>\t\tstruct node* p;<br>\t\tstruct node* p2;<br>\t\tp = head;<br>\t\tp2 = head;<br>\t\twhile(p2!=NULL &amp;&amp; p2-&gt;next!=NULL){<br>\t\t\tp = p-&gt;next;<br>\t\t\tp2 = p2-&gt;next;<br>\t\t\tif(p2!=NULL){<br>\t\t\t\tp2 = p2-&gt;next;<br>\t\t\t}<br>\t\t}<br>\t\tprintf(&quot;中间节点值为：%d\\n&quot;,p-&gt;num);<br>\t}<br>} ","like_count":0},{"had_liked":false,"id":66988,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550051875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550051875","product_id":100017301,"comment_content":"&#47;&#47;实现单链表，和其插入、删除、查找、遍历操作<br>#include&lt;stdlib.h&gt;<br>#define LEN sizeof(struct node)<br>struct node{<br>\tint num;<br>\tstruct node *next;<br>};<br>&#47;&#47;创建单链表<br>struct node *creatList(int n){ <br>\tstruct node *head,*p1,*p2;<br>\tint i,k;<br>\tk = 0;<br>\tif(n &lt; 1){<br>\t\t head = NULL;<br>\t\t printf(&quot;链表创建失败\\n&quot;);<br>\t}<br>\telse{<br>\t\thead = (struct node*)malloc(sizeof(LEN));<br>\t\thead-&gt;next = NULL;<br>\t\tfor(i=0 ; i&lt;n ; i++){<br>\t\t\tp1 = (struct node*)malloc(sizeof(LEN));<br>\t\t\tp1-&gt;num = i;<br>\t\t\tp1-&gt;next = head-&gt;next;<br>\t\t\thead-&gt;next = p1;<br>\t\t}<br>\tprintf(&quot;链表创建成功\\n&quot;);<br>    }<br>  return head;<br>}<br>&#47;&#47;遍历 <br>void print(struct node *head){<br>\tstruct node *p;<br>\tint i=1;<br>\tif(head!=NULL){<br> \t\tp=head-&gt;next;<br>        while(p!=NULL){<br>\t\t\tprintf(&quot;第%d个节点的数值是%d\\n&quot;,i,p-&gt;num);<br>\t\t\tp=p-&gt;next;<br>\t\t\ti=i+1;<br>\t\t}<br>  \t}<br>\telse{<br>\t   printf(&quot;链表遍历失败\\n&quot;); <br>\t}<br>}<br>&#47;&#47;查找<br>struct node *getelement(struct node *head,int n){<br>\tstruct node *p;<br>\tint i=1;<br>\tif(n&lt;1){<br>\t\tprintf(&quot;链表中不存在该节点\\n&quot;);<br>                head=NULL;<br>\t}<br>\telse{<br>\t\tp=head-&gt;next;<br>\t\twhile(p!=NULL&amp;&amp;i&lt;n){<br>\t\t\tp=p-&gt;next;<br>\t\t\ti=i+1;<br>\t\t}<br>\t}\t<br>\tif(p!=NULL){<br>\t\treturn p;<br>\t} <br>\telse {<br>\t\tprintf(&quot;该节点不存在\\n&quot;);\t<br>\t\treturn NULL;<br>        }<br>}<br>&#47;&#47;插入<br>struct node * insert(struct node *head,int n){<br>\tstruct node *p1,*p2,*p3;<br>\tp3=(struct node*)malloc(sizeof(LEN));<br>\tp3-&gt;num=10000;<br>\tif(n&lt;1)<br>\t    printf(&quot;该节点不存在，无法插入\\n&quot;);<br>\telse if(n==1){<br>\t\tp1=getelement(head,1);<br>\t\thead-&gt;next=p3;<br>\t\tp3-&gt;next=p1;<br>\t}<br>\telse{<br>\t\tp1=getelement(head,n-1);<br>\t\tif(p1==NULL)<br>\t \t\tprintf(&quot;该节点不存在，无法插入\\n&quot;);<br>\t\telse{<br>\t\t\tp2=p1-&gt;next;<br>\t\t\tp1-&gt;next=p3;<br>\t\t    p3-&gt;next=p2;<br>\t\t    printf(&quot;节点插入成功\\n&quot;);<br>\t\t}<br>                return head;\t<br>\t}<br>}<br>","like_count":0},{"had_liked":false,"id":66970,"user_name":"xumc","can_delete":false,"product_type":"c1","uid":1033274,"ip_address":"","ucode":"22D24AF9D52B65","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/3a/77bbc665.jpg","comment_is_top":false,"comment_ctime":1550049825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550049825","product_id":100017301,"comment_content":"数组 - threeSum<br>func threeSum(nums []int) [][]int {<br>\tif len(nums) &lt; 3 {<br>\t\treturn nil<br>\t}<br><br>\tvar results [][]int<br>\tsort.Ints(nums)<br><br>\tfor i := 0; i &lt; len(nums)-2; i++ {<br>\t\tif i &gt; 0 &amp;&amp; nums[i] == nums[i-1] {<br>\t\t\tcontinue<br>\t\t}<br><br>\t\tfor j, k := i+1, len(nums)-1; j &lt; k; {<br>\t\t\tif j &gt; i+1 &amp;&amp; nums[j] == nums[j-1] {<br>\t\t\t\tj++<br>\t\t\t\tcontinue<br>\t\t\t}<br>\t\t\tif k &lt; len(nums)-1 &amp;&amp; nums[k] == nums[k+1] {<br>\t\t\t\tk--<br>\t\t\t\tcontinue<br>\t\t\t}<br>\t\t\tsum := nums[i] + nums[j] + nums[k]<br>\t\t\tif sum == 0 {<br>\t\t\t\tresults = append(results, []int{nums[i], nums[j], nums[k]})<br>\t\t\t\tj++<br>\t\t\t\tk--<br>\t\t\t}<br>\t\t\tif sum &gt; 0 {<br>\t\t\t\tk--<br>\t\t\t}<br>\t\t\tif sum &lt; 0 {<br>\t\t\t\tj++<br>\t\t\t}<br><br>\t\t}<br>\t}<br>\treturn results<br>}","like_count":0},{"had_liked":false,"id":66959,"user_name":"xumc","can_delete":false,"product_type":"c1","uid":1033274,"ip_address":"","ucode":"22D24AF9D52B65","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/3a/77bbc665.jpg","comment_is_top":false,"comment_ctime":1550048126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550048126","product_id":100017301,"comment_content":" 数组 - missing positive<br>func firstMissingPositive(nums []int) int {<br>\tif len(nums) == 0 {<br>\t\treturn 1<br>\t}<br><br>\tm := make(map[int]struct{}) <br><br>\tfor i := range nums {<br>\t\tif nums[i] &gt; 0 {<br>\t\t\tm[nums[i]] = struct{}{}<br>\t\t}<br>\t}<br>        max := len(nums) + 1 &#47;&#47;nums = [1,2,3,4], 缺5<br>\tfor i := 1; i &lt; max; i++ { &#47;&#47;从1开始看是否在正数map里<br>\t\tif _, ok := m[i]; !ok {<br>\t\t\treturn i<br>\t\t}<br>\t}<br>\treturn max<br>}<br>","like_count":0},{"had_liked":false,"id":66939,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550044749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550044749","product_id":100017301,"comment_content":"&#47;&#47;两个有序数组合并为一个有序数组<br><br>public void mergeArray(int[] b , int[] c) {<br>\t\tint[] d = new int[b.length+c.length];<br>\t\tint i=0,k=0,j=0;<br>\t\twhile(i&lt;b.length&amp;&amp;k&lt;c.length) {<br>\t\t\tif(b[i] &lt; c[k]) {<br>\t\t\t\td[j++] = b[i++];<br>\t\t\t}else {<br>\t\t\t\td[j++] = c[k++];<br>\t\t\t}<br>\t\t}<br>\t\twhile(i&lt;b.length) {<br>\t\t\td[j++] = b[i++];<br>\t\t}<br>\t\twhile(k&lt;c.length) {<br>\t\t\td[j++] = c[k++];<br>\t\t}<br>\t\tthis.a = d;<br>\t}<br>","like_count":0},{"had_liked":false,"id":66938,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550044642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550044642","product_id":100017301,"comment_content":"&#47;&#47;大小固定的有序数组，支持动态增删改操作<br>public class SortArray {<br>\tint[] a ;<br>\tint count;<br>\tSortArray(int size){<br>\t\tthis.a = new int[size];<br>\t\tthis.count = 0;<br>\t}<br>\t<br>\tpublic int Size() {<br>\t\treturn this.count;<br>\t}<br>\t<br>\tpublic void add(int i) {<br>\t\tif((count+1) &gt;= a.length) {<br>\t\t\tSystem.out.println(&quot;已满&quot;);<br>\t\t}<br>\t\t<br>\t\tif(a[0] &lt; i) {<br>\t\t\tfor(int j = this.count-1 ; j&gt;-1 ; j--) {<br>\t\t\t\ta[j] = a[j+1];<br>\t\t\t}<br>\t\t\ta[0] = i;<br>\t\t}<br>\t\t<br>\t\tif(a[this.count-1]&gt;i) {<br>\t\t\ta[this.count] = i;<br>\t\t}<br>\t\t<br>\t\tfor (int j = 0; j &lt; this.count; j++) {<br>\t\t\tif(a[j] &lt; i)<br>\t\t\t\tcontinue;<br>\t\t\telse {<br>\t\t\t\tfor(int k = this.count-1 ; k &gt; j ; k--) {<br>\t\t\t\t\ta[k] = a[k+1];<br>\t\t\t\t}<br>\t\t\t\ta[j] = i;<br>\t\t\t}<br>\t\t}<br>\t}<br>\t<br>\tpublic void delete(int index) {<br>\t\tif(index&lt;1 || index&gt;this.count) {<br>\t\t\tSystem.out.println(&quot;输入有误&quot;);<br>\t\t\treturn ;<br>\t\t}else {<br>\t\t\tfor (int i = index + 1; i &lt; count; i++) {<br>\t\t\t\ta[i-1] = a[i];<br>\t\t\t}<br>\t\t\tcount--;<br>\t\t}\t<br>\t}<br>\t<br>\tpublic void update(int index , int value) {<br>\t\tif(index&lt;1 || index&gt;this.count) {<br>\t\t\tSystem.out.println(&quot;输入有误&quot;);<br>\t\t\treturn ;<br>\t\t}else {<br>\t\t\ta[index-1] = value;<br>\t\t}<br>\t}<br>\t<br>\tpublic void list() {<br>\t\tfor (int i = 0; i &lt; this.count; i++) {<br>\t\t\tSystem.out.print(a[i]);<br>\t\t}<br>\t}<br>\t<br>\tpublic int get(int index) {<br>\t\tif(index&lt;1 || index&gt;this.count) {<br>\t\t\tSystem.out.println(&quot;输入有误&quot;);<br>\t\t\treturn Integer.MIN_VALUE;<br>\t\t}else {<br>\t\t\treturn a[index];<br>\t\t}<br>\t}<br>}","like_count":0},{"had_liked":false,"id":66934,"user_name":"xumc","can_delete":false,"product_type":"c1","uid":1033274,"ip_address":"","ucode":"22D24AF9D52B65","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/3a/77bbc665.jpg","comment_is_top":false,"comment_ctime":1550044453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550044453","product_id":100017301,"comment_content":" 数组 - 求重数<br>func majorityElement(nums []int) int {<br>    counts := make(map[int]int)<br>    for _, num := range nums {<br>        counts[num] ++ <br>    }<br>    <br>    m := 0 <br>    n := 0<br>    for k, count:= range counts {<br>        if m &lt; count {<br>            m = count<br>            n = k<br>        }<br>    }<br>    <br>    return n<br>}","like_count":0},{"had_liked":false,"id":66932,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550044395,"is_pvip":false,"replies":[{"id":"24740","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550804396,"ip_address":"","comment_id":66932,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1550044395","product_id":100017301,"comment_content":"&#47;&#47;支持动态扩容的数组<br>public class MyArray {<br>\tObject[] object ;<br>\tprivate int capacity;<br>\tprivate int count;<br>\tMyArray(int capacity){<br>\t\tthis.capacity = capacity;<br>\t\tthis.object = new Object[capacity];<br>\t\tthis.count = 0;<br>\t}<br>\tpublic Object get(int i) {<br>\t\tif(i&lt;0 || i&gt;=count) {<br>\t\t\treturn null;<br>\t\t}else {<br>\t\t\treturn object[i];<br>\t\t}<br>\t}<br>\tpublic int size() {<br>\t\treturn this.count;<br>\t}<br>\tpublic int capacity() {<br>\t\treturn this.capacity;<br>\t}<br>\tpublic void add(int j, Object o) {<br>\t\tif((count+1)&gt;=capacity) {<br>\t\t\tObject[] ob = new Object[2*capacity];<br>\t\t\tSystem.arraycopy(object, 0, ob, 0, count);<br>\t\t\tthis.object = ob;<br>\t\t\tthis.capacity = object.length;<br>\t\t}<br>\t\tif(j &lt; 0 || j &gt; count) {<br>\t\t\tSystem.out.println(&quot;位置不合法&quot;);<br>\t\t\treturn false;<br>\t\t}<br>\t\tfor (int i = count; i &gt; j; i--) {<br>\t\t\tobject[i] = object[i-1];<br>\t\t}<br>\t\tobject[j] = o;<br>\t\tcount++;<br>\t\treturn true;<br>\t}<br>\tpublic void addFirst(Object o) {<br>\t\tif((count+1)&gt;=capacity) {<br>\t\t\tObject[] ob = new Object[2*capacity];<br>\t\t\tSystem.arraycopy(object, 0, ob, 0, count);<br>\t\t\tthis.object = ob;<br>\t\t\tthis.capacity = object.length;<br>\t\t}\t<br>\t\tfor (int i = count; i &gt; 0; i--) {<br>\t\t\tobject[i] = object[i-1];<br>\t\t}<br>\t\tobject[0] = o;<br>\t\tcount++;<br>\t}<br>\tpublic void addLast(Object o) {<br>\t\tif((count+1)&gt;=capacity) {<br>\t\t\tObject[] ob = new Object[2*capacity];<br>\t\t\tSystem.arraycopy(object, 0, ob, 0, count);<br>\t\t\tthis.object = ob;<br>\t\t\tthis.capacity = object.length;<br>\t\t}<br>\t\tobject[this.size()] = o;<br>\t\tcount++;\t<br>\t}<br>\tpublic boolean delete(int index) {<br>\t\tif(index &lt; 0 || index &gt;= count)<br>\t\t\treturn false;<br>\t\tfor (int i = index + 1; i &lt; count; i++) {<br>\t\t\tobject[i-1] = object[i];<br>\t\t}<br>\t\tcount--;<br>\t\treturn true;<br>\t}<br>\tpublic Object[] list() {<br>\t\tObject[] o = new Object[this.size()];<br>\t\tfor (int i = 0; i &lt; o.length; i++) {<br>\t\t\to[i] = object[i];<br>\t\t}<br>\t\treturn o;<br>\t}<br>}<br>","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438982,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66910,"user_name":"xumc","can_delete":false,"product_type":"c1","uid":1033274,"ip_address":"","ucode":"22D24AF9D52B65","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/3a/77bbc665.jpg","comment_is_top":false,"comment_ctime":1550040067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550040067","product_id":100017301,"comment_content":"数组基础 - （3）merge有序数组<br>func mergeOrderedArray2(a, b []int) (c []int) {<br>\tc = make([]int, len(a)+len(b))<br><br>\tvar i, j, k int<br>\tfor i &lt; len(a) &amp;&amp; j &lt; len(b) {<br>\t\tif a[i] &lt;= b[j] {<br>\t\t\tc[k] = a[i]<br>\t\t\ti++<br>\t\t} else {<br>\t\t\tc[k] = b[j]<br>\t\t\tj++<br>\t\t}<br>\t\tk++<br>\t}<br><br>\tif len(a) &gt; i {<br>\t\tc = append(c[0:k], a[i:]...)<br>\t}<br><br>\tif len(b) &gt; j {<br>\t\tc = append(c[0:k], b[j:]...)<br>\t}<br><br>\treturn c<br><br>}","like_count":0},{"had_liked":false,"id":66908,"user_name":"xumc","can_delete":false,"product_type":"c1","uid":1033274,"ip_address":"","ucode":"22D24AF9D52B65","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/3a/77bbc665.jpg","comment_is_top":false,"comment_ctime":1550039928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550039928","product_id":100017301,"comment_content":"数据基础 - （1）动态扩容数组<br>type ArrayInterface interface {<br>\tAdd(int, interface{}) &#47;&#47; 插入元素<br>\tRemove(int) interface{}<br>\tFind(interface{}) int &#47;&#47; 查找元素返回第一个索引<br>\tGetCapacity() int     &#47;&#47; 获得数组容量<br>\tGetSize() int         &#47;&#47; 获得元素个数<br>\tIsEmpty() bool        &#47;&#47; 查看数组是否为空<br>}<br><br>type Array struct {<br>\tdata []interface{}<br>\tsize int<br>}<br><br>func NewArray(capacity int) *Array {<br>\tarr := &amp;Array{}<br>\tarr.data = make([]interface{}, capacity)<br>\tarr.size = 0<br>\treturn arr<br>}<br><br>func (a *Array) IsEmpty() bool {<br>\treturn a.size == 0<br>}<br><br>func (a *Array) GetSize() int {<br>\treturn a.size<br>}<br><br>func (a *Array) GetCapacity() int {<br>\treturn len(a.data)<br>}<br><br>func (a *Array) Find(val interface{}) int {<br>\tfor i, d := range a.data {<br>\t\tif d == val {<br>\t\t\treturn i<br>\t\t}<br>\t}<br>\treturn -1<br>}<br><br>func (a *Array) Add(index int, val interface{}) {<br>\tif index &lt; 0 || index &gt;= a.GetCapacity() {<br>\t\tpanic(&quot;Add failed, index is illegal.&quot;)<br>\t}<br><br>\tif a.size == a.GetCapacity() {<br>\t\ta.resize(a.size * 2)<br>\t}<br><br>\tfor i := a.size - 1; i &gt; index; i-- {<br>\t\ta.data[i+1] = a.data[i]<br>\t}<br>\ta.data[index] = val<br>\ta.size++<br><br>}<br><br>func (a *Array) Remove(index int) interface{} {<br>\tif index &lt; 0 || index &gt;= a.size {<br>\t\tpanic(&quot;Remove failed, index is illegal.&quot;)<br>\t}<br><br>\tremoved := a.data[index]<br>\tfor i := index + 1; i &lt; a.size; i++ {<br>\t\ta.data[i-1] = a.data[i]<br>\t}<br>\ta.size--<br>\ta.data[a.size] = nil<br><br>\tif a.size == len(a.data)&#47;4 &amp;&amp; len(a.data)&#47;2 != 0 {<br>\t\ta.resize(len(a.data) &#47; 2)<br>\t}<br><br>\treturn removed<br><br>}<br><br>func (a *Array) resize(newCap int) {<br>\tb := make([]interface{}, newCap)<br>\tfor i := 0; i &lt; a.size; i++ {<br>\t\tb[i] = a.data[i]<br>\t}<br>\ta.data = b<br>}<br>","like_count":0},{"had_liked":false,"id":66904,"user_name":"xumc","can_delete":false,"product_type":"c1","uid":1033274,"ip_address":"","ucode":"22D24AF9D52B65","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/3a/77bbc665.jpg","comment_is_top":false,"comment_ctime":1550039460,"is_pvip":false,"replies":[{"id":"24739","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550804374,"ip_address":"","comment_id":66904,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1550039460","product_id":100017301,"comment_content":"数组基础 - 有序数组 （2）<br>func (array *OrderArray) Remove(val int) {<br>\tindex := array.Find(val)<br>\tif index == -1 {<br>\t\treturn<br>\t}<br><br>\tfor i := index; i &lt; len(*array)-1; i++ {<br>\t\t(*array)[i] = (*array)[i+1]<br>\t}<br>\t&#47;&#47;清除最后一个节点<br>\t(*array) = (*array)[0 : len(*array)-1]<br>}<br><br>&#47;&#47;a := OrderArray{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 11, 12}<br>&#47;&#47;a.RemoveAll(9)<br>func (array *OrderArray) RemoveAll(val int) {<br>\tindexs := array.FindAll(val)<br>\tif len(indexs) == 0 {<br>\t\treturn<br>\t}<br><br>\tsort.Ints(indexs)<br>\tstart := indexs[0]<br>\tleng := len(indexs)<br><br>\tfor i := start; i+leng &lt; len(*array); i++ {<br>\t\t(*array)[i] = (*array)[i+leng]<br>\t}<br>\t&#47;&#47;清除最后n节点<br>\t(*array) = (*array)[0 : len(*array)-leng]<br>}<br><br>func (array *OrderArray) Set(index int, val int) {<br>\tleng := len(*array)<br>\tif index &gt; leng || index &lt; 0 || leng == 0 {<br>\t\tpanic(&quot;cannot set&quot;)<br>\t}<br><br>\tif (leng == 1 &amp;&amp; index == 0) || (index == 0) &amp;&amp; val &lt;= (*array)[1] || (index == leng-1 &amp;&amp; val &gt;= (*array)[leng-2]) {<br>\t\t(*array)[index] = val<br>\t\treturn<br>\t}<br>\tif val &gt; (*array)[index+1] || val &lt; (*array)[index-1] {<br>\t\tpanic(&quot;cannot set&quot;)<br>\t}<br>\t(*array)[index] = val<br>}<br><br>基础薄弱，其他我慢慢写，谢谢老师。","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438968,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66903,"user_name":"xumc","can_delete":false,"product_type":"c1","uid":1033274,"ip_address":"","ucode":"22D24AF9D52B65","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/3a/77bbc665.jpg","comment_is_top":false,"comment_ctime":1550039427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550039427","product_id":100017301,"comment_content":"数组基础 -（2）有序数组 - 1<br>import &quot;sort&quot;<br><br>type OrderArrayInterface interface {<br>\tFind(val int) int      &#47;&#47; 查找元素返回第一个索引<br>\tFindAll(val int) []int &#47;&#47; 查找元素返回所有索引<br>\tAdd(val int)<br>\tRemove(val int)<br>\tRemoveAll(val int)<br>\tSet(index int, val int)<br>}<br><br>type OrderArray []int<br><br>&#47;&#47;二分排序法<br>func (array *OrderArray) Find(val int) int {<br>\tstart := 0<br>\tend := len(*array) - 1<br><br>\tfor start &lt;= end {<br>\t\tmiddle := (start + end) &#47; 2<br><br>\t\tif val &gt; (*array)[middle] {<br>\t\t\tstart = middle + 1<br>\t\t} else if val &lt; (*array)[middle] {<br>\t\t\tend = middle - 1<br>\t\t} else {<br>\t\t\treturn middle<br>\t\t}<br>\t}<br>\treturn -1<br>}<br><br>func (array *OrderArray) FindAll(val int) []int {<br>\tindexs := []int{}<br>\tmiddle := array.Find(val)<br>\tif middle == -1 {<br>\t\treturn indexs<br>\t}<br>\t&#47;&#47;from middle to start<br>\tfor i := middle - 1; i &gt;= 0 &amp;&amp; (*array)[i] == val; i-- {<br>\t\tindexs = append(indexs, i)<br>\t}<br><br>\t&#47;&#47; from middle to end<br>\tfor i := middle; i &lt; len(*array) &amp;&amp; (*array)[i] == val; i++ {<br>\t\tindexs = append(indexs, i)<br>\t}<br>\treturn indexs<br><br>}<br><br>func (array *OrderArray) Add(val int) {<br>\tpos := array.findPosForAdd(val)<br>\tif pos != -1 {<br>\t\t*array = append(*array, 0) &#47;&#47;扩容<br>\t\tfor i := len(*array) - 1; i &gt; pos; i-- {<br>\t\t\t(*array)[i] = (*array)[i-1]<br>\t\t}<br>\t\t(*array)[pos] = val<br>\t\treturn<br>\t}<br><br>\tpanic(&quot;cannot add&quot;)<br>}<br><br>func (array *OrderArray) findPosForAdd(val int) int {<br>\tlen := len(*array)<br><br>\tif len == 0 || (*array)[0] &gt; val {<br>\t\treturn 0<br>\t} else if (*array)[len-1] &lt; val {<br>\t\treturn len<br>\t}<br><br>\tstart := 0<br>\tend := len - 1<br><br>\tfor start &lt;= end {<br>\t\tmiddle := (start + end) &#47; 2<br>\t\tif val == (*array)[middle] {<br>\t\t\treturn middle<br>\t\t}<br><br>\t\tif val &gt; (*array)[middle] &amp;&amp; val &lt; (*array)[middle+1] {<br>\t\t\treturn middle + 1<br>\t\t}<br><br>\t\tif val &lt; (*array)[middle] {<br>\t\t\tend = middle - 1<br>\t\t}<br>\t\tif val &gt; (*array)[middle] {<br>\t\t\tstart = middle + 1<br>\t\t}<br><br>\t}<br><br>\treturn -1<br>}<br><br>","like_count":0},{"had_liked":false,"id":66705,"user_name":"未来的胡先森","can_delete":false,"product_type":"c1","uid":1234682,"ip_address":"","ucode":"AFF193AC0E2E6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/fa/1f5bf642.jpg","comment_is_top":false,"comment_ctime":1549983453,"is_pvip":false,"replies":[{"id":"24745","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550804771,"ip_address":"","comment_id":66705,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549983453","product_id":100017301,"comment_content":"「三数之和」<br>解题思路：<br><br>1、先将一维数组升序排序，第 1 、2、3 三个数也按照升序选取，但出现符合题目要求的组合出现则加入要返回的二维数组中。<br><br>2、在新的组合出现时判断是否与前一个组合相同，若是则放弃该组合。<br><br>3、初始化申请二维数组大小为 64 若不够则扩充 2 倍大小。<br><br>4、优化代码，防止超时。第 1 个数为正数时即可结束循环，将三重循环优化成双重循环。<br>代码<br>int compare(const void  *a, const void *b)<br>{<br>\treturn (*(int*)a - *(int*)b);<br>}<br>int** threeSum(int* nums, int numsSize, int* returnSize)<br>{<br>\tqsort(nums, numsSize, sizeof(int), compare);<br>\tint flag = numsSize, size = 64;<br>\tfor (int i = 0; i &lt; numsSize; i++)<br>\t\tif (nums[i] &gt; 0)<br>\t\t{<br>\t\t\tflag = i; break;<br>\t\t}<br>\tif (flag == 0 || flag &gt; numsSize - 2)<br>\t\tflag = numsSize - 2;<br>\tint **arrys = (int **)malloc(size * sizeof(int *));<br>\t*returnSize = 0;<br>\tfor (int i = 0; i &lt; flag; i++)<br>\t{<br>\t\tint  start = i + 1, end = numsSize - 1;<br>\t\tif (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1])<br>\t\t\tcontinue;<br>\t\twhile (start &lt; end)<br>\t\t{<br>\t\t\tint sum = nums[i] + nums[start] + nums[end];<br>\t\t\tif (sum== 0)<br>\t\t\t{<br>\t\t\t\tif (start &gt; i + 1 &amp;&amp; nums[start] == nums[start - 1])<br>\t\t\t\t{<br>\t\t\t\t\tstart++; continue;<br>\t\t\t\t}<br>\t\t\t\tarrys[*returnSize] = (int*)malloc(3 * sizeof(int));<br>\t\t\t\tarrys[*returnSize][0] = nums[i]; arrys[*returnSize][1] = nums[start]; arrys[*returnSize][2] = nums[end];<br>\t\t\t\tprintf(&quot;%d %d %d\\n&quot;, arrys[*returnSize][0], arrys[*returnSize][1], arrys[*returnSize][2]);<br>\t\t\t\t(*returnSize)++;<br>\t\t\t\tif (size == *returnSize)<br>\t\t\t\t{<br>\t\t\t\t\tsize &lt;&lt;= 1;<br>\t\t\t\t\tarrys = (int **)realloc(arrys, sizeof(int *) * size);<br>\t\t\t\t}<br>\t\t\t\tstart++; end--;&#47;&#47;因为是从小到大排序，start 增大 则第 3 个数需要减小<br>\t\t\t\tcontinue;<br>\t\t\t}<br>\t\t\telse if (sum &gt; 0)<br>\t\t\t\tend--;<br>\t\t\telse<br>\t\t\t{<br>\t\t\t\tstart++;&#47;&#47; end = numsSize - 1;<br>\t\t\t}<br>\t\t}<br>\t}<br>\treturn arrys;<br>}","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438871,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66643,"user_name":"Neo_Zhang","can_delete":false,"product_type":"c1","uid":1175689,"ip_address":"","ucode":"92FFEFE7905AE9","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/89/25899406.jpg","comment_is_top":false,"comment_ctime":1549972886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549972886","product_id":100017301,"comment_content":"求缺失的第一个整数<br>int firstMissingPositive(int* nums, int numsSize) {<br>    if(numsSize == 0)<br>        return 1;<br>    <br>    &#47;&#47;第i位存放i+1的数值<br>    for(int i = 0;i &lt; numsSize;i++){<br>        if(nums[i] &gt; 0){<br>            &#47;&#47;如果交换的数据大于0且小于i+1且数据不相等，则进行交换（放在合适的位置上）<br>            while(nums[i] &gt; 0 &amp;&amp; nums[i] &lt; i+1 &amp;&amp; nums[i] != nums[nums[i] - 1]){<br>                int temp = nums[nums[i] - 1];<br>                nums[nums[i] - 1] = nums[i];<br>                nums[i] = temp;<br>            }<br>        }<br>    }<br><br>    &#47;&#47;循环寻找不符合要求的数据<br>    for(int i = 0;i &lt; numsSize;i++){<br>        if(nums[i] != i+1){<br>            return i+1;<br>        }<br>    }<br><br>    &#47;&#47;如果都符合要求，则返回长度+1的值<br>    return numsSize + 1;<br>}","like_count":0},{"had_liked":false,"id":66637,"user_name":"Neo_Zhang","can_delete":false,"product_type":"c1","uid":1175689,"ip_address":"","ucode":"92FFEFE7905AE9","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/89/25899406.jpg","comment_is_top":false,"comment_ctime":1549971637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549971637","product_id":100017301,"comment_content":"求众数 C++<br>class Solution {<br>public:<br>    int majorityElement(vector&lt;int&gt;&amp; nums) {<br>        int res,cnt;<br>        res = 0;<br>        cnt = 0;<br>        for (int num : nums) {<br>            if (cnt == 0)<br>            {<br>                res = num;<br>                ++cnt;<br>            }<br>            else (num == res) ? ++cnt : --cnt;<br>        }<br>        return res;<br>    }<br>};","like_count":0},{"had_liked":false,"id":66037,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1549855682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549855682","product_id":100017301,"comment_content":"Three Sum（求三数之和）go语言代码如下，自测无问题，要么编译不过，要么就是报错，求老师指点<br>func threeSum(nums []int) [][]int {<br>    if nums==nil || len(nums)==0{<br>\t\treturn [][]int{}<br>\t}<br><br>\tresult:=make([]int,1)<br>\tresult[0]=nums[0]<br>\tSum(result,nums,nums[0],0)<br>\treturn results[1:]<br>}<br>var results [][]int=make([][]int,1)<br>func Sum(result []int,nums []int,sum int,index int){<br><br>\tif len(result)==3 &amp;&amp; sum==0{<br>\t\tresults=append(results,result)<br>\t\treturn<br>\t}<br>\tindex++<br>\tif index==len(nums){<br>\t\treturn<br>\t}<br>\tSum(result,nums,sum,index)<br>\tresult=append(result,nums[index])<br>\tsum+=nums[index]<br>\tSum(result,nums,sum,index)<br>}","like_count":0},{"had_liked":false,"id":65956,"user_name":"Hot   Heat","can_delete":false,"product_type":"c1","uid":1235964,"ip_address":"","ucode":"EF8E2ADEB29BEA","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/fc/8ddeaccb.jpg","comment_is_top":false,"comment_ctime":1549798249,"is_pvip":false,"replies":[{"id":"24746","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550804781,"ip_address":"","comment_id":65956,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549798249","product_id":100017301,"comment_content":"Leetcode 前三道题<br>https:&#47;&#47;github.com&#47;hotheat&#47;LeetCode&#47;tree&#47;master&#47;015.%203Sum<br>https:&#47;&#47;github.com&#47;hotheat&#47;LeetCode&#47;tree&#47;master&#47;169.%20Majority%20Element<br>https:&#47;&#47;github.com&#47;hotheat&#47;LeetCode&#47;tree&#47;master&#47;041.%20First%20Missing%20Positive<br>关于链表和数组的一些操作<br>https:&#47;&#47;github.com&#47;hotheat&#47;JiKeExcercise&#47;tree&#47;master&#47;python-code&#47;05_array<br>https:&#47;&#47;github.com&#47;hotheat&#47;JiKeExcercise&#47;blob&#47;master&#47;python-code&#47;06_linked_list&#47;Single_Linked_List.py","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438657,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65871,"user_name":"墨禾","can_delete":false,"product_type":"c1","uid":1216590,"ip_address":"","ucode":"81BA44231AABE8","user_header":"https://static001.geekbang.org/account/avatar/00/12/90/4e/efaea936.jpg","comment_is_top":false,"comment_ctime":1549711023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549711023","product_id":100017301,"comment_content":"做出来的时候有点兴奋🥰，做不出来的时候颓废得有点想😫放弃，但是看到大家的精彩评论，又有一种征服难题的动力。   “不擅长的刚好是自己的短板”心里磨练无数次，才让自己在刷剧和刷算法之间做了抉择😅","like_count":0},{"had_liked":false,"id":65749,"user_name":"你看起来很好吃","can_delete":false,"product_type":"c1","uid":1188854,"ip_address":"","ucode":"F9079138EC3D7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/f6/1ef70cab.jpg","comment_is_top":false,"comment_ctime":1549617665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549617665","product_id":100017301,"comment_content":"第一个缺失的正整数Python实现，时间 复杂度O(nlogn)：<br>class Solution:<br>    def firstMissingPositive(self, nums):<br>        result = min = 1<br><br>        nums.sort()<br>        for num in nums:<br>            if num == result:<br>                result += 1<br>        return result","like_count":0},{"had_liked":false,"id":65736,"user_name":"你看起来很好吃","can_delete":false,"product_type":"c1","uid":1188854,"ip_address":"","ucode":"F9079138EC3D7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/f6/1ef70cab.jpg","comment_is_top":false,"comment_ctime":1549612912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549612912","product_id":100017301,"comment_content":"Majority Element用python实现, 使用散列表实现：<br><br>from collections import defaultdict<br><br>class Solution:<br>    def majorityElement(self, nums: &#39;List[int]&#39;) -&gt; &#39;int&#39;:<br>        count = len(nums)&#47;&#47;2<br>        result = defaultdict(int)<br><br>        for num in nums:<br>                result[num] += 1<br>            <br>        for key in result.keys():<br>            if result[key] &gt; count:<br>                return int(key)","like_count":0},{"had_liked":false,"id":65675,"user_name":"你看起来很好吃","can_delete":false,"product_type":"c1","uid":1188854,"ip_address":"","ucode":"F9079138EC3D7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/f6/1ef70cab.jpg","comment_is_top":false,"comment_ctime":1549553594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549553594","product_id":100017301,"comment_content":"三数之和python实现：<br>class Solution:<br>    def threeSum(self, nums: &#39;List[int]&#39;) -&gt; &#39;List[List[int]]&#39;:<br>        result = []<br><br>        nums.sort()<br>        N = len(nums)<br><br>        for i in range(N):<br>            if i &gt; 0 and nums[i] == nums[i-1]:<br>                continue<br><br>            target = nums[i] * -1<br>            s, e = i+1, N-1<br><br>            while s &lt; e:<br>                if nums[s] + nums[e] == target:<br>                    result.append([nums[i], nums[s], nums[e]])<br>                    s += 1<br>                    while s &lt; e and nums[s] == nums[s-1]:<br>                        s += 1<br>                elif nums[s] + nums[e] &lt; target:<br>                    s += 1<br>                else:<br>                    e -= 1<br><br>        return result<br><br>时间复杂度主要由外层for和内层while决定，是O(n*n) + O(list排序)，实际上python中List排序使用了timsort, 时间复度度是O(nlogn), 所以整个代码的时间 复杂度是O(n*n)<br>","like_count":0},{"had_liked":false,"id":65667,"user_name":"神盾局闹别扭","can_delete":false,"product_type":"c1","uid":1006804,"ip_address":"","ucode":"0255AEB1EE73FC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/d4/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1549548485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549548485","product_id":100017301,"comment_content":"实现求链表的中间结点：<br><br>Node *GetMidNode(Node *head) {<br>\tif (head == nullptr)<br>\t\treturn nullptr;<br><br>\tNode *slow = head;<br>\tNode *fast = head;<br><br>\twhile (fast-&gt;next != nullptr &amp;&amp; fast-&gt;next-&gt;next != nullptr)<br>\t{<br>\t\tfast = fast-&gt;next-&gt;next;<br>\t\tslow = slow-&gt;next;<br>\t}<br><br>\treturn slow;\t<br>}","like_count":0},{"had_liked":false,"id":65661,"user_name":"神盾局闹别扭","can_delete":false,"product_type":"c1","uid":1006804,"ip_address":"","ucode":"0255AEB1EE73FC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/d4/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1549547186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549547186","product_id":100017301,"comment_content":"合并2个有序数组：<br>int * MergeArray(int a[], int n, int b[], int m)<br>{<br>\tif (n &lt;= 0 || m &lt;= 0)<br>\t\treturn nullptr;<br>\tif (a == nullptr)<br>\t\treturn b;<br>\tif (b == nullptr)<br>\t\treturn a;<br><br>\tint *newArray = new int[n + m];<br>\tint i = 0;<br>\tint j = 0;<br>\tint k = 0;<br>\twhile (i &lt; n &amp;&amp; j &lt; m) {<br>\t\tif (a[i] &lt; b[j])<br>\t\t\tnewArray[k++] = a[i++];<br>\t\telse<br>\t\t\tnewArray[k++] = b[j++];<br>\t}<br><br>\twhile (i &lt; n) {<br>\t\tnewArray[k++] = a[i++];<br>\t}<br><br>\twhile (j &lt; m) {<br>\t\tnewArray[k++] = b[j++];<br>\t}<br><br>\treturn newArray;<br>}","like_count":0},{"had_liked":false,"id":65658,"user_name":"yingyingqin","can_delete":false,"product_type":"c1","uid":1244276,"ip_address":"","ucode":"D75A0C4DDC5F08","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQyP4WVaRJVZcYD5h0GhEgzdML1qGyDBibu21TsiaDHxBx8knCzrClsoh9ZZwjurLGgvsprP6QW9qQ/132","comment_is_top":false,"comment_ctime":1549545381,"is_pvip":false,"replies":[{"id":"24756","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550805235,"ip_address":"","comment_id":65658,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549545381","product_id":100017301,"comment_content":"不知道现在是否来得及，做了leetcode的几道题目<br>觉得其中的merge k sorted lists非常有代表性，下面是我的代码<br>ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {<br>\t\tpriority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, cmp&gt; pri_que;<br>\t\tfor (auto i : lists)<br>\t\t{<br>\t\t\tif (i)<br>\t\t\t\tpri_que.push(i);<br>\t\t}<br>\t\tif (pri_que.empty())<br>\t\t\treturn nullptr;<br>\t\tListNode* head = new ListNode(0);<br>\t\tListNode* tail = head;<br>\t\twhile(!pri_que.empty())<br>\t\t{<br>\t\t\ttail-&gt;next = pri_que.top();<br>\t\t\ttail = tail-&gt;next;<br>\t\t\tpri_que.pop();<br>\t\t\tif (tail-&gt;next)<br>\t\t\t\tpri_que.push(tail-&gt;next);<br>\t\t}<br>\t\treturn head;<br>\t}","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438539,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550805235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65632,"user_name":"你看起来很好吃","can_delete":false,"product_type":"c1","uid":1188854,"ip_address":"","ucode":"F9079138EC3D7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/f6/1ef70cab.jpg","comment_is_top":false,"comment_ctime":1549520327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549520327","product_id":100017301,"comment_content":"合并K个排序列表代码（写完之后，看了下Leetcode里的标准答案，好像这个不是最优的）：<br>class Solution:<br>    def get_minimum_node(self, lists:list) -&gt; ListNode:<br>        minimum = lists[0]<br><br>        for item in lists:<br>            if item.val &lt; minimum.val:<br>                minimum = item<br><br>        return minimum<br>    <br>    def mergeKLists(self, lists: &#39;List[ListNode]&#39;) -&gt; &#39;ListNode&#39;:<br>        k_value = []<br>        dummy_ptr = ptr = ListNode(0)<br>        <br>        for l in lists:<br>            if l:<br>                k_value.append(l)<br><br>        while k_value:<br>            &#39;&#39;&#39;get the minimum data from the list and append the next value into this list&#39;&#39;&#39;<br>            node = self.get_minimum_node(k_value)<br>            k_value.remove(node)<br><br>            ptr.next = ListNode(node.val)<br>            ptr = ptr.next<br><br>            if node.next:<br>                k_value.append(node.next)<br><br>        return dummy_ptr.next<br>时间复杂度是O(kN), K是有序列表个数，N是一共有多少个元素<br>空间复杂度是O(1)或者是O(k)？ 因为我只使用列表的长度最多不会超过有序列表的个数k，像这种情况我也不确定应该是算做O(k)还是O(1)，希望老师指点<br>","like_count":0},{"had_liked":false,"id":65622,"user_name":"你看起来很好吃","can_delete":false,"product_type":"c1","uid":1188854,"ip_address":"","ucode":"F9079138EC3D7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/f6/1ef70cab.jpg","comment_is_top":false,"comment_ctime":1549515040,"is_pvip":false,"replies":[{"id":"24727","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550804031,"ip_address":"","comment_id":65622,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549515040","product_id":100017301,"comment_content":"环形链表I代码python实现，使用两个指针来实现，做过了一部分leetcode题之后，我发现两个指针在处理链表问题时，非常有用，好几个题目都会用到这种方法<br><br>class Solution(object):<br>    def hasCycle(self, head):<br>        fast_ptr = head.next<br>        slow_ptr = head<br><br>        while fast_ptr != slow_ptr:<br>            <br>            if fast_ptr is None or fast_ptr.next is None:<br>                return False<br>            <br>            fast_ptr = fast_ptr.next.next<br>            slow_ptr = slow_ptr.next<br><br>        return True","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438525,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65554,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1549450288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549450288","product_id":100017301,"comment_content":"&quot;实现一个大小固定的有序数组，支持动态增删改操作&quot;<br>大小固定的有序数组，那么增加一个，那么为了保证大小固定，是删除一个还是数组扩容呢？<br>同理，删除的时候，也是相同的问题。<br><br>感觉这块定义的不是很清晰?","like_count":0},{"had_liked":false,"id":65553,"user_name":"siegfried","can_delete":false,"product_type":"c1","uid":1007931,"ip_address":"","ucode":"31673819DD2605","user_header":"https://static001.geekbang.org/account/avatar/00/0f/61/3b/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1549449587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549449587","product_id":100017301,"comment_content":"Merge k sorted List这一题。需要用到 priorityQueue。 ","like_count":0},{"had_liked":false,"id":65552,"user_name":"你看起来很好吃","can_delete":false,"product_type":"c1","uid":1188854,"ip_address":"","ucode":"F9079138EC3D7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/f6/1ef70cab.jpg","comment_is_top":false,"comment_ctime":1549448371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549448371","product_id":100017301,"comment_content":"这个春节因为一些原因没有回家，刚好王老师做了这个特别版，努力复习，加油","like_count":0},{"had_liked":false,"id":65547,"user_name":"ext4","can_delete":false,"product_type":"c1","uid":1180826,"ip_address":"","ucode":"FC881AECAC1974","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg","comment_is_top":false,"comment_ctime":1549443794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549443794","product_id":100017301,"comment_content":"求三数只和<br>class Solution {<br>  public:<br>    vector&lt; vector&lt;int&gt; &gt; threeSum(vector&lt;int&gt;&amp; nums) {<br>      vector&lt; vector&lt;int&gt; &gt; res;<br>      int size = nums.size();<br>      if (size &lt; 3) return res; <br>      sort(nums.begin(), nums.end());<br>      for (int i = 0; i &lt; size - 2; i++) {<br>        if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;<br>        int target = -nums[i];<br>        int p = i + 1, q = size - 1;<br>        while (p &lt; q) {<br>          if (nums[p] + nums[q] &lt; target) {<br>            p++;<br>          } else if (nums[p] + nums[q] &gt; target) {<br>            q--;<br>          } else {<br>            vector&lt;int&gt; v;<br>            v.push_back(nums[i]);<br>            v.push_back(nums[p]);<br>            v.push_back(nums[q]);<br>            sort(v.begin(), v.end());<br>            res.push_back(v);<br>            while (p &lt; q &amp;&amp; nums[p] == nums[p + 1]) p++;<br>            while (p &lt; q &amp;&amp; nums[q - 1] == nums[q]) q--;<br>            p++;<br>            q--;<br>          }<br>        }<br>      }<br>      return res;<br>    }<br>};<br>","like_count":0},{"had_liked":false,"id":65545,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1549443554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549443554","product_id":100017301,"comment_content":"动态数组：<br><br>public class Array&lt;E&gt; {<br><br>    private E[] data;<br>    private int size;<br><br>    &#47;&#47; 构造函数，传入数组的容量capacity构造Array<br>    public Array(int capacity){<br>        data = (E[])new Object[capacity];<br>        size = 0;<br>    }<br><br>    &#47;&#47; 在index索引的位置插入一个新元素e<br>    public void add(int index, E e){<br><br>        if(index &lt; 0 || index &gt; size)<br>            throw new IllegalArgumentException(&quot;Add failed. Require index &gt;= 0 and index &lt;= size.&quot;);<br><br>        if(size == data.length)<br>            resize(2 * data.length);<br><br>        for(int i = size - 1; i &gt;= index ; i --)<br>            data[i + 1] = data[i];<br><br>        data[index] = e;<br><br>        size ++;<br>    }<br><br>    &#47;&#47; 获取index索引位置的元素<br>    public E get(int index){<br>        if(index &lt; 0 || index &gt;= size)<br>            throw new IllegalArgumentException(&quot;Get failed. Index is illegal.&quot;);<br>        return data[index];<br>    }<br><br>    &#47;&#47; 修改index索引位置的元素为e<br>    public void set(int index, E e){<br>        if(index &lt; 0 || index &gt;= size)<br>            throw new IllegalArgumentException(&quot;Set failed. Index is illegal.&quot;);<br>        data[index] = e;<br>    }<br><br><br>    &#47;&#47; 查找数组中元素e所在的索引，如果不存在元素e，则返回-1<br>    public int find(E e){<br>        for(int i = 0 ; i &lt; size ; i ++){<br>            if(data[i].equals(e))<br>                return i;<br>        }<br>        return -1;<br>    }<br><br>    &#47;&#47; 从数组中删除index位置的元素, 返回删除的元素<br>    public E remove(int index){<br>        if(index &lt; 0 || index &gt;= size)<br>            throw new IllegalArgumentException(&quot;Remove failed. Index is illegal.&quot;);<br><br>        E ret = data[index];<br>        for(int i = index + 1 ; i &lt; size ; i ++)<br>            data[i - 1] = data[i];<br>        size --;<br>        data[size] = null; &#47;&#47; loitering objects != memory leak<br><br>        if(size == data.length &#47; 2)<br>            resize(data.length &#47; 2);<br>        return ret;<br>    }<br><br>    &#47;&#47; 将数组空间的容量变成newCapacity大小<br>    private void resize(int newCapacity){<br><br>        E[] newData = (E[])new Object[newCapacity];<br>        for(int i = 0 ; i &lt; size ; i ++)<br>            newData[i] = data[i];<br>        data = newData;<br>    }<br>}","like_count":0},{"had_liked":false,"id":65542,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1549439908,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1549439908","product_id":100017301,"comment_content":"&#47;**<br> * 固定容量有序数组，从小到大排列<br> *&#47;<br>public class FixedSortArr {<br>    private int capacity;<br>    private int size;<br>    private int[] data;<br>    public FixedSortArr(int capacity) {<br>        this.capacity = capacity;<br>        data = new int[capacity];<br>    }<br><br>    public int[] getInternalArr() {<br>        return data;<br>    }<br>    public void add(int elem) {<br>        if (capacity == size) {<br>            throw new RuntimeException(&quot;数组已满&quot;);<br>        }<br>        int index = search(elem, &quot;gt&quot;);<br>        if (index == capacity) {<br>            data[size++] = elem;<br>            return;<br>        }<br>        System.arraycopy(data, index, data, index + 1, size - index);<br>        data[index] = elem;<br>        size++;<br>    }<br>    public void delete(int target) {<br>        if (data[0] &gt; target || data[size - 1] &lt; target) {<br>            return;<br>        }<br><br>        if (data[size - 1] == target) {<br>            data[size - 1] = 0;<br>        }<br><br>        int index = search(target, &quot;eq&quot;);<br>        if (index == data.length) {<br>            return;<br>        }<br>        System.arraycopy(data, index + 1, data, index, size - (index + 1));<br>        data[size - 1] = 0;<br>    }<br><br>    public void update(int elem, int target) {<br> if (data[0] &gt; elem || data[size - 1] &lt; elem) {<br>            return;<br>        }<br><br>        int elemIndex = search(elem, &quot;eq&quot;);<br><br>        int insertPos = search(target, &quot;gt&quot;) - 1;<br><br>        if (elemIndex == size) {<br>            return;<br>        }<br><br>        System.arraycopy(data, elemIndex + 1, data, elemIndex, (insertPos - elemIndex));<br>        data[insertPos] = target;<br>    }<br><br>    private int search(int object, String compareFlag) {<br>        for (int i = 0; i &lt; data.length; i++) {<br>            if (&quot;eq&quot;.equals(compareFlag)) {<br>                if (data[i] == object) {<br>                    return i;<br>                }<br>            }<br>            if (&quot;gt&quot;.equals(compareFlag)) {<br>                if (data[i] &gt; object) {<br>                    return i;<br>                }<br>            }<br>        }<br>        return data.length;<br>    }<br>}","like_count":0},{"had_liked":false,"id":65541,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1549439748,"is_pvip":true,"replies":[{"id":"24749","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550804957,"ip_address":"","comment_id":65541,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549439748","product_id":100017301,"comment_content":"package org.oscar.data.sturcture.array;<br><br>&#47;**<br> * 动态扩容的数组<br> *<br> * @author chen.huaying<br> * @version 0.0.1<br> * @date 2019&#47;2&#47;6<br> *&#47;<br>public class DynamicArr {<br>    private Object[] data;<br><br>    private int capacity;<br><br>    private int size = 0;<br><br>    public DynamicArr(){<br>        this.capacity = 4;<br>        data = new Object[capacity];<br>    }<br><br>    public void add(Object obj){<br>        if(capacity &gt; size){<br>            data[size++] = obj;<br>            return;<br>        }<br><br>        if(capacity == size){<br>            capacity = capacity &lt;&lt; 1;<br>            Object [] tempArr = new Object[capacity];<br>            System.arraycopy(data, 0, tempArr, 0, data.length);<br>            data = tempArr;<br>        }<br>        data[size++] = obj;<br>    }<br><br>    public int size(){<br>        return size;<br>    }<br><br>    public Object get(int index){<br>        if (index &gt;= size) {<br>            throw new IllegalArgumentException(&quot;数组下标超出范围&quot;);<br>        }<br>        return data[index];<br>    }<br>}","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438496,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65535,"user_name":"C_love","can_delete":false,"product_type":"c1","uid":1043613,"ip_address":"","ucode":"F268D1867C90C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/9d/4d705f03.jpg","comment_is_top":false,"comment_ctime":1549434101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549434101","product_id":100017301,"comment_content":"First Missing Positive<br><br>class Solution {<br>    &#47;**<br>     * Time complexity: O(n)<br>     * Space complexity: O(1)<br>     *&#47;<br>    public int firstMissingPositive(int[] nums) {<br>        for (int i = 0; i &lt; nums.length; i++) {<br>            while (nums[i] != i + 1) {<br>                if (nums[i] &lt;= 0 || nums[i] &gt; nums.length || nums[i] == nums[nums[i] - 1]) {<br>                    break;<br>                }<br>                int tmp = nums[nums[i] - 1];<br>                nums[nums[i] - 1] = nums[i];<br>                nums[i] = tmp;<br>            }<br>        }<br>        <br>        int i = 0;<br>        for (; i &lt; nums.length; i++) {<br>            if (nums[i] != i + 1) {<br>                break; <br>            }<br>        }<br>        return i + 1;<br>    }<br>}","like_count":0},{"had_liked":false,"id":65532,"user_name":"C_love","can_delete":false,"product_type":"c1","uid":1043613,"ip_address":"","ucode":"F268D1867C90C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/9d/4d705f03.jpg","comment_is_top":false,"comment_ctime":1549432011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549432011","product_id":100017301,"comment_content":"Linked List Cycle I<br><br>&#47;**<br> * Definition for singly-linked list.<br> * class ListNode {<br> *     int val;<br> *     ListNode next;<br> *     ListNode(int x) {<br> *         val = x;<br> *         next = null;<br> *     }<br> * }<br> *&#47;<br>public class Solution {<br>    &#47;**<br>     * Time complexity: O(n)<br>     * Space complexity: O(1)<br>     *&#47;<br>    public boolean hasCycle(ListNode head) {<br>        ListNode slow = head;<br>        ListNode fast = head;<br>        <br>        while (fast != null &amp;&amp; fast.next != null) {<br>            slow = slow.next;<br>            fast = fast.next.next;<br>            if (slow == fast) {<br>                return true;<br>            }<br>        }<br>        return false;<br>    }<br>}","like_count":0},{"had_liked":false,"id":65516,"user_name":"子嘉","can_delete":false,"product_type":"c1","uid":1252422,"ip_address":"","ucode":"CF0DC72E2B6B9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/46/a141c7e6.jpg","comment_is_top":false,"comment_ctime":1549424458,"is_pvip":false,"replies":[{"id":"24752","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550805076,"ip_address":"","comment_id":65516,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549424458","product_id":100017301,"comment_content":"动态扩容的数组可以参考哈希表.. 如果到了某个阀值则增加对应大小 那么如果这个数组太大了的话再搬运数据可能会很耗时 那么可以记录当前的最后一个位置 每次操作搬运一部分时间分摊下来.. 新年快乐🎉","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438484,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550805076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65515,"user_name":"C_love","can_delete":false,"product_type":"c1","uid":1043613,"ip_address":"","ucode":"F268D1867C90C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/9d/4d705f03.jpg","comment_is_top":false,"comment_ctime":1549424306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549424306","product_id":100017301,"comment_content":"Three Sum:<br><br>class Solution {<br>    public List&lt;List&lt;Integer&gt;&gt; threeSum(final int[] nums) {<br>        if (nums == null) {<br>            return Collections.emptyList();<br>        }<br>        <br>        Arrays.sort(nums);<br>        <br>        final List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();<br>        for (int i = 0; i &lt; nums.length - 2; i++) {<br>            if (nums[i] &gt; 0) {<br>                break;<br>            }<br>            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) {<br>                continue;<br>            }<br>            for (int j = i + 1, k = nums.length - 1; j &lt; k;) {<br>                final int sum = nums[i] + nums[j] + nums[k];<br>                if (sum == 0) {<br>                    result.add(Arrays.asList(nums[i], nums[j], nums[k]));<br>                    <br>                    while (j &lt; k &amp;&amp; nums[j] == nums[j + 1]) j++;<br>                    while (j &lt; k &amp;&amp; nums[k] == nums[k - 1]) k--;<br>                <br>                    j++;<br>                    k--;<br>                } else if (sum &lt; 0) {<br>                    j++;<br>                } else {<br>                    k--;<br>                }<br>            }<br>        }<br>        return result;<br>    }<br>}","like_count":0},{"had_liked":false,"id":65509,"user_name":"菜菜","can_delete":false,"product_type":"c1","uid":1243536,"ip_address":"","ucode":"888AC33663B774","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/90/f90903e5.jpg","comment_is_top":false,"comment_ctime":1549421951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549421951","product_id":100017301,"comment_content":"老师真是太用心了，大过年的还不忘带我们学习，这种精神真是值得学习啊。这门课真是物超所值！","like_count":0},{"had_liked":false,"id":65503,"user_name":"菜菜","can_delete":false,"product_type":"c1","uid":1243536,"ip_address":"","ucode":"888AC33663B774","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/90/f90903e5.jpg","comment_is_top":false,"comment_ctime":1549420729,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549420729","product_id":100017301,"comment_content":"单链表反转，用三个指针，current、next、tmp进行。<br>求链表的中间节点用快慢指针，快指针每次走两步，当快指针走到头的时候，慢指针在中间。","like_count":0},{"had_liked":false,"id":65502,"user_name":"菜菜","can_delete":false,"product_type":"c1","uid":1243536,"ip_address":"","ucode":"888AC33663B774","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/90/f90903e5.jpg","comment_is_top":false,"comment_ctime":1549420591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549420591","product_id":100017301,"comment_content":"有序数组合并为一个数组，就像归并排序里面的合并函数一样。","like_count":0},{"had_liked":false,"id":65499,"user_name":"菜菜","can_delete":false,"product_type":"c1","uid":1243536,"ip_address":"","ucode":"888AC33663B774","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/90/f90903e5.jpg","comment_is_top":false,"comment_ctime":1549420292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549420292","product_id":100017301,"comment_content":"支持动态扩容的数组：设置初始容量cp，并设置一个变量counter对当前使用了的空间进行计数，当向数组中加入数据的时候，判断数组是否已满：数组已满则重新申请一个cp*2大小的数组，将cp=cp*2，将旧数组中的数据复制过来，counter++；否则直接将数据添加，counter++；","like_count":0},{"had_liked":false,"id":65472,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1549381627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549381627","product_id":100017301,"comment_content":"2）有序数组合并，链表合并类似（java实现，使用了优先队列）<br>    public int[] mergeArray(List&lt;int[]&gt; arrayList) {<br>        PriorityQueue&lt;MergeNode&gt; priorityQueue = new PriorityQueue();&#47;&#47;java的小顶堆<br>        int totalNum = 0;<br>        &#47;&#47;初始化小顶堆<br>        for(int[] tmp:arrayList){<br>            if(tmp!=null&amp;&amp;tmp.length&gt;0){<br>                priorityQueue.offer(new MergeNode(tmp));<br>                totalNum = totalNum + tmp.length;<br>            }<br>        }<br>        &#47;&#47;结果数组<br>        int[] result = new int[totalNum];<br>        int index = 0;<br>        while(priorityQueue.peek()!=null){<br>            MergeNode mergeNode = priorityQueue.peek();<br>            result[index] = mergeNode.getVal();<br>            index++;<br>            &#47;&#47;如果mergeNode持有的arr还有值，重新加入小顶堆<br>            priorityQueue.poll();<br>            if(mergeNode.hasNext()){<br>                mergeNode.moveNext();<br>                priorityQueue.offer(mergeNode);<br>            }<br>        }<br><br>        return result;<br>    }<br>    static class MergeNode implements Comparable {<br>        int index = 0;<br>        int [] arr;<br>        MergeNode(int [] args){<br>            this.arr = args;<br>        }<br>        public boolean hasNext(){<br>            return  (index + 1&lt;arr.length)?true:false;<br>        }<br>        public int getVal(){<br>            return arr[index];<br>        }<br>        public void moveNext(){<br>            index++;<br>        }<br>        @Override<br>        public int compareTo(Object o) {<br>            if(o instanceof MergeNode){<br>                int t = this.getVal();<br>                int t2 = ((MergeNode)o).getVal();<br>                if(t&gt;t2){<br>                    return 1;<br>                }else if(t == t2){<br>                    return 0;<br>                }else{<br>                    return -1;<br>                }<br>            }else{<br>                return 1;<br>            }<br>        }<br>    }<br><br>","like_count":0},{"had_liked":false,"id":65471,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1549381550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549381550","product_id":100017301,"comment_content":"联系了两个，单链表反转 和 有序数组合并。<br>1）单向链表反转的方法 （java）<br>   private Node reverse(Node root) {<br>        if(root==null||root.getNext()==null){<br>            return root;<br>        }<br>        Node nextNode = root.getNext();<br>        &#47;&#47;保持nextNext节点<br>        Node nextNextNode = nextNode.getNext();<br>        &#47;&#47;构造反转后的列表<br>        root.setNext(null);<br>        nextNode.setNext(root);<br>        &#47;&#47;把nextNextNode持有的链表，逐个加到结果链表的头部<br>        Node temp ;&#47;&#47;辅助引用<br>        while(nextNextNode!=null){<br>            temp = nextNextNode.getNext();<br>            nextNextNode.setNext(nextNode);<br>            nextNode = nextNextNode;<br>            nextNextNode = temp;<br>        }<br>        return nextNode; <br>    }<br><br><br>","like_count":0},{"had_liked":false,"id":65457,"user_name":"苍茫","can_delete":false,"product_type":"c1","uid":1299149,"ip_address":"","ucode":"CED8598307BEAE","user_header":"https://static001.geekbang.org/account/avatar/00/13/d2/cd/6fb14677.jpg","comment_is_top":false,"comment_ctime":1549371709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549371709","product_id":100017301,"comment_content":"还没怎么看，感觉要凉了","like_count":0},{"had_liked":false,"id":65452,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1549367455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549367455","product_id":100017301,"comment_content":"有序数组 go 语言实现<br>package main<br><br>import &quot;fmt&quot;<br><br>type orderedArray struct {<br>\tdata   []int<br>\tsize   int<br>\tlength int<br>}<br><br>func newOrderedArray(size int) *orderedArray {<br>\treturn &amp;orderedArray{<br>\t\tdata: make([]int, size),<br>\t\tsize: size,<br>\t}<br>}<br><br>func (o *orderedArray) add(e int) error {<br>\tpos := -1<br>\tfor i := 0; i &lt; o.length; i++ {<br>\t\tif e &lt; o.data[i] {<br>\t\t\tpos = i<br>\t\t\tbreak<br>\t\t}<br>\t}<br><br>\tif pos == -1 {<br>\t\to.data[o.length] = e<br>\t\to.length++<br>\t\treturn nil<br>\t}<br><br>\tfor i := o.length; i &gt; pos; i-- {<br>\t\to.data[i] = o.data[i-1]<br>\t}<br><br>\to.data[pos] = e<br>\to.length++<br>\treturn nil<br>}<br><br>func (o *orderedArray) delete(e int) error {<br>\tpos := -1<br>\tfor i := 0; i &lt; o.length; i++ {<br>\t\tif o.data[i] == e {<br>\t\t\tpos = i<br>\t\t\tbreak<br>\t\t}<br>\t}<br><br>\tif pos == -1 {<br>\t\treturn nil<br>\t}<br><br>\tcount := 1<br>\tfor {<br>\t\tif pos+count &lt; o.length &amp;&amp; o.data[pos+count] == e {<br>\t\t\tcount++<br>\t\t} else {<br>\t\t\tbreak<br>\t\t}<br>\t}<br><br>\tfor i := pos; i &lt; o.length-count; i++ {<br>\t\to.data[i] = o.data[i+count]<br>\t}<br>\to.length -= count<br>\treturn nil<br>}<br><br>func main() {<br>\taOrderedArray := newOrderedArray(10)<br>\ttestData := []int{100, 38, 25, 40, 27, 16, 29, 81, 81, 7}<br><br>\tfmt.Println(&quot;unsorted array: &quot;, testData)<br><br>\tfor _, v := range testData {<br>\t\taOrderedArray.add(v)<br>\t}<br>\tfmt.Println(&quot;sorted array: &quot;, aOrderedArray.data[:aOrderedArray.length])<br><br>\tdeletedElement := 81<br>\taOrderedArray.delete(deletedElement)<br>\tfmt.Printf(&quot;delete element %d: %v\\n&quot;, deletedElement, aOrderedArray.data[:aOrderedArray.length])<br>}<br>","like_count":0},{"had_liked":false,"id":65451,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1549367391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549367391","product_id":100017301,"comment_content":"动态扩容数组 go 语言实现<br>package main<br><br>import &quot;fmt&quot;<br><br>type dynamicArray struct {<br>\tdata []int<br>}<br><br>func newDynamicArray(size int) *dynamicArray {<br>\treturn &amp;dynamicArray{<br>\t\tdata: make([]int, size),<br>\t}<br>}<br><br>func (d *dynamicArray) enlarge(size int) error {<br>\tsize = len(d.data) + size<br>\tdata := make([]int, size)<br>\tfor i, v := range d.data {<br>\t\tdata[i] = v<br>\t}<br>\td.data = data<br>\treturn nil<br>}<br><br>func (d *dynamicArray) set(i int, e int) error {<br>\tif i &gt; len(d.data)-1 {<br>\t\td.enlarge(len(d.data))<br>\t}<br><br>\td.data[i] = e<br>\treturn nil<br>}<br><br>func (d dynamicArray) get(i int) (e int, err error) {<br>\treturn d.data[i], nil<br>}<br><br>func main() {<br>\tsize := 5<br>\taDynamicArray := newDynamicArray(size)<br>\tfmt.Printf(&quot;create a array with initial size %d\\n&quot;, size)<br>\tfor i := 0; i &lt; 2*size; i++ {<br>\t\taDynamicArray.set(i, i)<br>\t\tfmt.Printf(&quot;add to array index: %d value: %d\\n&quot;, i, i)<br>\t}<br><br>\tindex := 2*size - 1<br>\tv, _ := aDynamicArray.get(index)<br>\tfmt.Printf(&quot;get element index: %d value: %d\\n&quot;, index, v)<br>}<br>","like_count":0},{"had_liked":false,"id":65429,"user_name":"黄丹","can_delete":false,"product_type":"c1","uid":1245295,"ip_address":"","ucode":"29C209F0D78996","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/6f/aacb013d.jpg","comment_is_top":false,"comment_ctime":1549352691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549352691","product_id":100017301,"comment_content":"这是链表的两道题的解题思路和代码<br>第一题：Linked List Cycle I ，判断链表中是否有环，这题有两种解题思路，一是判断链表中是否有节点之前被访问过，使用hashSet保存访问过的节点。二是使用两个指针遍历数组，但是他们有着不同的速度，如果链表中有环的话，fast指针一定会再次追上slow指针，这种方法的空间复杂度是O(1).<br>代码：https:&#47;&#47;github.com&#47;yyxd&#47;leetcode&#47;blob&#47;master&#47;src&#47;leetcode&#47;linkedlist&#47;Problem141_LinkedListCycle.java<br>第二题：Merge K Sorted Lists,归并K个有序链表，我的代码解题思路是将链表一个一个的归并，归并的结果与链表数组中的下一个链表进行归并，最终得到有序的链表，时间复杂度是O(kN)，leetcode中的Solution 提到了使用优先队列或者分治的思想去解题，时间复杂度可以优化到O(logkN)，有兴趣的童鞋可以去LeetCode看，我这里就不赘述啦。<br>代码：https:&#47;&#47;github.com&#47;yyxd&#47;leetcode&#47;blob&#47;master&#47;src&#47;leetcode&#47;linkedlist&#47;Problem23_MergeKSortedLists.java","like_count":0},{"had_liked":false,"id":65426,"user_name":"jun2an","can_delete":false,"product_type":"c1","uid":1017982,"ip_address":"","ucode":"22255C18B3FD3B","user_header":"","comment_is_top":false,"comment_ctime":1549350913,"is_pvip":false,"replies":[{"id":"24757","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550805250,"ip_address":"","comment_id":65426,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549350913","product_id":100017301,"comment_content":"这几道leetcode都是经典题目了。用golang把这几道题目都实现了一下，字数限制第一题代码就不贴了。<br>1.求三数之和。时间复杂度可以从暴力的O(n^3)优化到O(n)。关键点在于排序后可以使用左右夹逼降低时间复杂度，后面要注意结果去重。<br>2.求众数。空间复杂度可以从直接hashmap的O(n)优化到O(1)。利用众数的特点，让不同值的两个数相互约去，最后剩余的数必是众数。<br>func majorityElement(nums []int) int {<br>  res := struct {<br>    val int<br>    times int<br>  }{}<br>  for i:=0; i&lt;len(nums); i++{<br>    if res.times!=0 {<br>      if res.val==nums[i] {<br>          res.times++<br>      } else {<br>          res.times--<br>      }<br>    } else {<br>      res.val = nums[i]<br>      res.times = 1<br>    }<br>  }<br>  return res.val<br>}<br>3.求缺失的第一个正数。空间复杂度O(1)的做法，是利用了&quot;数组其实就是一个简单hashmap&quot;的特性，可以认为数组的下标是key，数组的值是value。这个特性能够降低很多数组题目的空间复杂度。<br>func firstMissingPositive(nums []int) int {<br>  for i:=0; i&lt;len(nums); i++ {<br>    if nums[i] == i+1 {<br>      continue<br>    }<br>    pos := i<br>    for nums[pos] != pos+1 {<br>      if 0&lt;=nums[pos]-1 &amp;&amp; nums[pos]-1&lt;len(nums) &amp;&amp; nums[pos] != nums[nums[pos]-1] {<br>        swap(nums, pos, nums[pos]-1)<br>      } else {<br>        break<br>      }<br>    }<br>  }<br>  for i:=0; i&lt;len(nums); i++ {<br>    if nums[i] != i+1 {<br>      return i+1<br>    }<br>  }<br>  return len(nums)+1<br>}<br>4.环形链表。老经典的题目了，使用快慢指针，还有一些类似的衍生题目。<br>func hasCycle(head *ListNode) bool {<br>  if head == nil || head.Next == nil {<br>    return false<br>  }<br>  fast := head.Next<br>  slow := head<br>  for fast.Next !=nil &amp;&amp; fast.Next.Next !=nil &amp;&amp; fast!=slow {<br>    fast = fast.Next.Next<br>    slow = slow.Next<br>  }<br>  if fast == slow {<br>    return true<br>  }<br>  return false<br>}<br>5.合并 k 个排序链表。仔细回想一下归并排序的过程，这不就是后半部分的内容吗。<br>func mergeKLists(lists []*ListNode) *ListNode {<br>  if len(lists) == 0 {<br>    return nil<br>  } else if len(lists) == 1 {<br>    return lists[0]<br>  }<br>  var result []*ListNode <br>  for i:=0; i&lt;len(lists); i=i+2 {<br>    if i+1 == len(lists) {<br>      result = append(result, lists[i])<br>    } else {<br>      result = append(result, merge2Lists(lists[i], lists[i+1]))<br>    }<br>  }<br>  return mergeKLists(result)<br>}","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438446,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550805250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65422,"user_name":"黄丹","can_delete":false,"product_type":"c1","uid":1245295,"ip_address":"","ucode":"29C209F0D78996","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/6f/aacb013d.jpg","comment_is_top":false,"comment_ctime":1549346500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549346500","product_id":100017301,"comment_content":"王争老师新年快乐，出的题我以前都做过耶，3 sum这一题真的是做了好几遍，才将它的解法记在脑中了，还是很经典的一题。<br>先放上数组的三题的解题思路和代码：<br>第一题：3 sum，对数组先排序，让a从nums[0]到nums[nums.length-3]遍历，另target = -a，然后遍历数组，寻找是否有b+c = target，不过这一题要考虑去除重复的三元组以及边界溢出条件。<br>代码：https:&#47;&#47;github.com&#47;yyxd&#47;leetcode&#47;blob&#47;master&#47;src&#47;leetcode&#47;array&#47;mediunm&#47;Problem15_3sum.java<br>第二题：Majority Element ，这一题我是用hashmap做的，key是数组的值，value 是该值在数组中出现的次数，如果出现次数超过数组长度的一半，就返回key的值。<br>代码：https:&#47;&#47;github.com&#47;yyxd&#47;leetcode&#47;blob&#47;master&#47;src&#47;leetcode&#47;array&#47;easy&#47;Problem169.java<br>第三题：First Missing Positive 找到最小的缺失的正数，题目要求是O(n)的时间内完成，依然是用hashmap做，主要是利用hashmap的查找复杂度为O(1)，key是数组的值，value是true，并保存数组中出现的最大值max。然后遍历ans从1到max+1，第一个没有在hashmap中出现过的数就是最小的缺失的正数。虽然max可能很大，但是第一个缺失的正数一定是&lt;=数组长度+1的，所以时间复杂度为O(n)<br>代码：https:&#47;&#47;github.com&#47;yyxd&#47;leetcode&#47;blob&#47;master&#47;src&#47;acwing&#47;leetcode4&#47;Problem41_FirstMissingPositive.java<br><br>","like_count":0},{"had_liked":false,"id":65418,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1549342726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549342726","product_id":100017301,"comment_content":"动态扩容数组，就是每次到了<br><br>&#47;&#47;单链表反转<br>public ListNode reverseList1(ListNode head) {<br>          if (head == null)<br>              return head;<br>          ListNode dummy = new ListNode(-1);<br>          dummy.next = head;<br>          ListNode prev = dummy.next;<br>          ListNode pCur = prev.next;<br>         while (pCur != null) {<br>             prev.next = pCur.next;<br>             pCur.next = dummy.next;<br>             dummy.next = pCur;<br>             pCur = prev.next;<br>         }<br>         return dummy.next;<br>     }<br><br>&#47;&#47;合并两个有序链表<br>public ListNode mergeTwoLists(ListNode l1, ListNode l2) {<br>        if (l1 == null){<br>            return l2;<br>        }<br>        if(l2 == null){<br>            return l1;<br>        }<br>        ListNode node1 = l1;<br>        ListNode node2 = l2;<br>        ListNode head;<br>        if (node1.val &lt;= node2.val){<br>            head = node1;<br>            node1 = node1.next;<br>        }else {<br>            head = node2;<br>            node2 = node2.next;<br>        }<br>        ListNode prev = head;<br>        while (node1 != null &amp;&amp; node2 != null){<br>            if(node1.val &lt;= node2.val){<br>                prev.next = node1;<br>                node1 = node1.next;<br>            }else {<br>                prev.next = node2;<br>                node2 = node2.next;<br>            }<br>            prev = prev.next;<br>        }<br>        if(node1 == null){<br>            prev.next = node2;<br>        }else if(node2 == null){<br>            prev.next = node1;<br>        }<br>        return head;<br>    }<br><br> &#47;&#47; 求中间结点<br>  public static Node findMiddleNode(Node list) {<br>    if (list == null) return null;<br><br>    Node fast = list;<br>    Node slow = list;<br><br>    while (fast.next != null &amp;&amp; fast.next.next != null) {<br>      fast = fast.next.next;<br>      slow = slow.next;<br>    }<br><br>    return slow;<br>  }","like_count":0},{"had_liked":false,"id":65417,"user_name":"小韩","can_delete":false,"product_type":"c1","uid":1188863,"ip_address":"","ucode":"6CDE03F432607E","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/ff/701c6f4d.jpg","comment_is_top":false,"comment_ctime":1549341572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549341572","product_id":100017301,"comment_content":"工作5年了，对于数据结构和算法只能算了解，但是并不深入。决定回头好好啃啃。2019年加油(ง •̀_•́)ง","like_count":0},{"had_liked":false,"id":65393,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1549332206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549332206","product_id":100017301,"comment_content":"谢谢老师的题目","like_count":0}]}