{"id":263444,"title":"23 | 接口隔离原则：接口里的方法，你都用得到吗？","content":"<p>你好！我是郑晔。</p><p>在前面几讲中，我们讲的设计原则基本上都是关于如何设计一个类。SRP告诉我们，一个类的变化来源应该是单一的；OCP说，不要随意修改一个类；LSP则教导我们应该设计好类的继承关系。</p><p>而在面向对象的设计中，接口设计也是一个非常重要的组成部分。我们一直都在强调面向接口编程，想实现OCP也好，或者是下一讲要讲的DIP也罢，都是要依赖于接口实现的。</p><p>也许你会说，接口不就是一个语法吗？把需要的方法都放到接口里面，接口不就出来了吗？顶多是Java用interface，C++都声明成纯虚函数。这种对于接口的理解，显然还停留在语法的层面上。这样设计出来的只能算作是有了一个接口，但想要设计出好的接口，还要有在设计维度上的思考。</p><p>那什么样的接口算是一个好接口呢？这就需要我们了解接口隔离原则。</p><h2>接口隔离原则</h2><p>接口隔离原则（Interface segregation principle，简称ISP）是这样表述的：</p><blockquote>\n<p>不应强迫使用者依赖于它们不用的方法。<br>\nNo client should be forced to depend on methods it does not use.</p>\n</blockquote><p>这个表述看上去很容易理解，就是指在接口中，不要放置使用者用不到的方法。站在使用者的角度，这简直再合理不过了。每个人都会觉得，我怎么会依赖于我不用的方法呢？相信作为设计者，你也会同意这种观点。然而，真正在设计的时候，却不是人人都能记住这一点的。</p><!-- [[[read_end]]] --><p>首先，很多程序员分不清使用者和设计者两个是不同的角色。因为在很多人看来，接口的设计和使用常常是由同一个人完成。这就是角色区分意识的缺失，这种缺失导致我们不能把两种不同的角色区分开来，本质上来说，这也是分离关注点没有做好的一种体现。</p><p>实际上，很多程序员在开发过程中，其实是两种角色都没有的，他们根本没有思考过接口的问题，因为他们更关心的是一个个的具体类。只有到了必须的时候，接口才作为语法选项使用一次，这种做法干脆就是没在设计上进行思考。</p><p>然而，你不设计接口，并不代表没有接口。</p><p>在做软件设计的时候，我们经常考虑的是模型之间如何交互，接口只是一个方便描述的词汇，为了让我们把注意力从具体的实现细节中抽离出来。但是，<strong>如果没有设计特定的接口，你的一个个具体类就变成它的接口</strong>。同设计不好的接口一样，这样的“接口”往往也是存在问题的。</p><p>那接口设计不好会有什么问题呢？典型的问题就是接口过“胖”，什么叫接口过“胖”呢？我给你举个例子。</p><h2>胖接口减肥</h2><p>假设有一个银行的系统，对外提供存款、取款和转账的能力。它通过一个接口向外部系统暴露了它的这些能力，而不同能力的差异要通过请求的内容来区分。所以，我们在这里设计了一个表示业务请求的对象，像下面这样：</p><pre><code>class TransactionRequest {\n  // 获取操作类型\n  TransactionType getType() {\n    ...\n  }\n  \n  // 获取存款金额\n  double getDepositAmount() {\n    ...\n  }\n  \n  // 获取取款金额\n  double getWithdrawAmount() {\n    ...\n  }\n  \n  // 获取转账金额\n  double getTransferAmount() {\n    ...\n  }\n}\n</code></pre><p>每种操作类型都对应着一个业务处理的模块，它们会根据自己的需要，去获取所需的信息，像下面这样：</p><pre><code>interface TransactionHandler {\n  void handle(TransactionRequest request)；\n}\n\nclass DepositHandler implements TransactionHandler {\n  void handle(final TransactionRequest request) {\n    double amount = request.getDepositAmount();\n    ...\n  }\n}\n\nclass WithdrawHandler implements TransactionHandler {\n  void handle(final TransactionRequest request) {\n    double amount = request.getWithdrawAmount();\n    ...\n  }\n}\n\nclass TransferHandler implements TransactionHandler {\n  void handle(final TransactionRequest request) {\n    double amount = request.getTransferAmount();\n    ...\n  }\n}\n</code></pre><p>这样一来，我们只要在收到请求之后，做一个业务分发就好了：</p><pre><code>TransactionHandler handler = handlers.get(request.getType());\nif (handler != null) {\n  handler.handle(request);\n}\n</code></pre><p>一切看上去都很好，不少人在实际工作中也会写出类似的代码。然而，在这个实现里，有一个接口就太“胖”了，它就是TransactionRequest。</p><p>TransactionRequest这个类包含了相关的请求内容，虽然这是无可厚非的。但是在这里，我们容易直觉地把它作为参数传给TransactionHandler。于是，它作为一个请求对象，摇身一变，变成了业务处理接口的一部分。</p><p>正如我在前面所说的，虽然你没有设计特定的接口，但具体类可以变成接口。不过，作为业务处理中的接口，TransactionRequest就显得“胖”了：</p><ul>\n<li>getDepositAmount方法只在DepositHandler 里使用；</li>\n<li>getWithdrawAmount方法只在WithdrawHandler里使用；</li>\n<li>getTransferAmount只在TransferHandler使用。</li>\n</ul><p>然而，传给它们的TransactionRequest却包含所有这些方法。</p><p>也许你会想，这有什么问题吗？问题就在于，一个“胖”接口常常是不稳定的。比如说，现在要增加一个生活缴费的功能，TransactionRequest就要增加一个获取生活缴费金额的方法：</p><pre><code>class TransactionRequest {\n  ...\n  \n  // 获取生活缴费金额\n  double getLivingPaymentAmount() {\n    ...\n  }\n}\n</code></pre><p>相应地，还需要增加业务处理的方法：</p><pre><code>class LivingPaymentHandler implements TransactionHandler {\n  void handle(final TransactionRequest request) {\n    double amount = request.getLivingPaymentAmount();\n    ...\n  }\n} \n</code></pre><p>虽然这种做法看上去还挺符合OCP的，但实际上，由于TransactionRequest的修改，前面几个写好的业务处理类：DepositHandler、WithdrawHandler、TransferHandler都会受到影响。为什么这么说呢？</p><p>如果我们用的是一些现代的程序设计语言，你的感觉可能不明显。假如这段代码是用C/C++这些需要编译链接的语言写成的，TransactionRequest的修改势必会导致其它几个业务处理类重新编译，因为它们都引用了TransactionRequest。</p><p>实际上，<strong>C/C++的程序在编译链接上常常需要花很多时间，除了语言本身的特点之外，因为设计没做好，造成本来不需要重新编译的文件也要重新编译的现象几乎是随处可见的</strong>。</p><p>你可以理解为，如果一个接口修改了，依赖它的所有代码全部会受到影响，而这些代码往往也有依赖于它们实现的代码，这样一来，一个修改的影响就传播出去了。用这种角度去评估，你就会发现，不稳定的“胖”接口影响面是非常之广的，所以，我们说“胖”接口不好。</p><p>怎样修改这段代码呢？既然这个接口是由于“胖”造成的，给它减肥就好了。根据ISP，只给每个使用者提供它们关心的方法。所以，我们可以引入一些“瘦”接口：</p><pre><code>interface TransactionRequest {\n}\n\ninterface DepositRequest extends TransactionRequest {\n  double getDepositAmount();\n}\n\ninterface WithdrawRequest extends TransactionRequest {\n  double getWithdrawAmount();\n}\n\ninterface TransferRequest extends TransactionRequest {\n  double getTransferAmount();\n}\n\nclass ActualTransactionRequest implements DepositRequest, WithdrawRequest, TransferRequest {\n  ...\n}\n</code></pre><p>这里，我们把TransactionRequest变成了一个接口，目的是给后面的业务处理进行统一接口，而ActualTransactionRequest则对应着原来的实现类。我们引入了DepositRequest、WithdrawRequest、TransferRequest等几个“瘦”接口，它们就是分别供不同的业务处理方法使用的接口。</p><p>有了这个基础，我们也可以改造对应的业务处理方法了：</p><pre><code>interface TransactionHandler&lt;T extends TransactionRequest&gt; {\n  void handle(T request)；\n}\n\n\nclass DepositHandler implements TransactionHandler&lt;DepositRequest&gt; {\n  void handle(final DepositRequest request) {\n    double amount = request.getDepositAmount();\n    ...\n  }\n}\n\n\nclass WithdrawHandler implements TransactionHandler&lt;WithdrawRequest&gt; {\n  void handle(final WithdrawRequest request) {\n    double amount = request.getWithdrawAmount();\n    ...\n  }\n}\n\n\nclass TransferHandler implements TransactionHandler&lt;TransferRequest&gt; {\n  void handle(final TransferRequest request) {\n    double amount = request.getTransferAmount();\n    ...\n  }\n}\n</code></pre><p>经过这个改造，每个业务处理方法就只关心自己相关的业务请求。那么，新增生活缴费该如何处理呢？你可能已经很清楚了，就是再增加一个新的接口：</p><pre><code>interface LivingPaymentRequest extends TransactionRequest {\n  double getLivingPaymentAmount();\n}\n\nclass ActualTransactionRequest implements DepositRequest, WithdrawRequest, TransferRequest, LivingPaymentRequest {\n}\n</code></pre><p>然后，再增加一个新的业务处理方法：</p><pre><code>class LivingPaymentHandler implements TransactionHandler&lt;LivingPaymentRequest&gt; {\n  void handle(final LivingPaymentRequest request) {\n    double amount = request.getLivingPaymentAmount();\n    ...\n  }\n}\n</code></pre><p>我们可以对比一下两个设计，只有ActualTransactionRequest做了修改，而因为这个类表示的是实际的请求对象，在现在的结构之下，它是无论如何都要修改的。而其他的部分因为不存在依赖关系，所以，并不会受到这次需求增加的影响。相对于原来的做法，新设计改动的影响面变得更小了。</p><h2>你的角色</h2><p>我们来回顾一下这个设计的改进过程，其中的重点就在于，原本那个大的TransactionRequest被拆分成了若干个小接口，每个小接口就只为特定的使用者服务。这样做的好处就在于，每个使用者只要关注自己所使用的方法就行，这样的接口才可能是稳定的，“胖”接口不稳定的原因就是，它承担了太多的职责。</p><p>或许你从这个讨论里听出了一点SRP的味道，没错，你甚至可以把ISP理解成接口设计的 SRP。</p><p>这个改进还有一个有趣的地方，ActualTransactionRequest实现了多个接口。在这个设计里面，每个接口代表着与不同使用者交互的角色，Martin Fowler将这种接口称为<a href=\"https://www.martinfowler.com/bliki/RoleInterface.html\">角色接口</a>（Role Interface）。</p><p>这就像每个人在实际生活中扮演着不同的角色一样。在家里，我们是父母的子女；在公司里，我们是公司的员工；购物时，我们是顾客；出行时，我们是乘客，但所有这些角色最终都是由我们一个人承担的。前面讲做接口设计时，我们虽然是一个个体，但常常要同时扮演设计者和使用者两个不同的角色。而在这段代码里，各种角色则汇聚到了ActualTransactionRequest这个类上。</p><p>在一个设计中，识别出不同的角色是至关重要的。你可能又发现了，我想强调的还是分离关注点。</p><p>我们在讲多态的时候说过，接口是把变和不变隔离开。现在有了对ISP的理解，我们知道了，接口应该是尽可能稳定的。接口的使用者对于接口是一种依赖关系，被依赖的一方越稳定越好，而只有规模越小，才越有可能稳定下来。</p><p>我们还可以从更广泛的角度理解ISP，就是不依赖于任何不需要的东西。我曾经遇到过一个项目，项目里的核心计算中依赖了一个非常小众的数据库，选择它的理由只是它提供了一个特有的功能。</p><p>然而，由于项目组人员变迁，结果是，大家除了知道这个特有的功能，对其他能力知之甚少。这个系统只要运行一段时间，数据库占据的空间就会膨胀到硬盘的极限，而只要重新把数据库中的数据导出导入一次，空间瞬间就小了许多（如果你好奇产生这个现象的原因，其实就是这个数据库鼓励的是不变风格，而核心计算中有大量的修改，产生了大量的修改日志，导出导入之后，日志就减少了）。</p><p>于是，我们只能通过加上硬盘监控，定期去导数据，以维持系统的正常运行。最后，大家忍无可忍，想办法把这个数据库换掉了。</p><p>之所以会依赖于这个数据库，是因为在技术选型时，我们用到了一个特定的框架，而这个框架缺省就依赖于这个数据库。开发人员为了快速实现，就把框架和数据库一起引入到了项目中，引发了后面的这些问题。</p><p>从这个例子中，你可以看出，在高层次上依赖于不需要的东西，这和类依赖于不需要的东西，其实是异曲同工的，由此可见，ISP同样是一个可以广泛使用的设计原则。</p><h2>总结时刻</h2><p>今天，我们讨论了接口隔离原则，它告诉我们不应强迫使用者依赖于它们不用的方法。之所以要把这个原则列出来，很重要的一个原因就是很多接口设计得太“胖”了，里面包含了太多的内容，所以，一个更好的设计是，把大接口分解成一个一个的小接口。</p><p>这里说的接口不仅仅是一种语法，实际上，每个类都有自己的接口，所有的公开方法都是接口。</p><p>我们在做接口设计时，需要关注不同的使用者。我们可以把ISP理解成接口设计的SRP。每个使用者面对的接口，其实都是一种角色接口。识别出接口不同的角色是至关重要的，这也与分离关注点的能力是相关的。</p><p>ISP还可以从更广泛的角度去理解，也就是说，不要依赖于任何不需要的东西，这个原则可以指导我们在高层次上进行设计。</p><p>在这一讲的案例里，除了接口太“胖”造成的问题，还有一个很重要的问题，它的依赖方向搞反了。我们下一讲就来讨论到底谁该依赖谁的设计原则：依赖倒置原则。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>识别对象的不同角色，设计小接口</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/c6/d9f46a4153c3f26ba099ea83039207c6.jpg?wh=2284*1222\" alt=\"\"></p><h2>思考题</h2><p>在今天的请求对象例子里面，为了支持生活付费，根据ISP原则，我改动了ActualTransactionRequest，但其实这种做法一定程度上破坏了OCP。你可以想一下，如何改进这个例子，能够让它更好地符合OCP。 欢迎在留言区分享你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":283067,"user_name":"李文彬","can_delete":false,"product_type":"c1","uid":2251534,"ip_address":"","ucode":"4CD326DC443028","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia4qBUs5bFs5tU3yVCcBapIcnVftM60nrJ73eu30YDMbDNvjhvnibct3pMYlj62G1c7nH8jSBaiaLw/132","comment_is_top":false,"comment_ctime":1615537309,"is_pvip":false,"replies":[{"id":"103608","content":"哈哈哈，这个比喻真有意思","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1616854438,"ip_address":"","comment_id":283067,"utype":1}],"discussion_count":3,"race_medal":0,"score":"74629981341","product_id":100052601,"comment_content":"“识别对象的不同角色，设计小接口”，想到一个段子~<br>给女性朋友的六个建议：<br>1. 找个能让你笑的男人。<br>2. 找个有稳定工作的男人。<br>3. 找个喜欢做家务的男人。<br>4. 找个诚实的男人。<br>5. 找个和你在性方面能契合的男人。<br>6. 不要让他们五个人见面。","like_count":18,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516925,"discussion_content":"哈哈哈，这个比喻真有意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616854438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2821935,"avatar":"","nickname":"linfei","note":"","ucode":"F6F8D6DAF35C59","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565565,"discussion_content":"如果见面，就违反了OCP原则？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1650500455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410999,"discussion_content":"有点意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635823113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235845,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1595220661,"is_pvip":false,"replies":[{"id":"87144","content":"分别用不同的接口就好了，不一定要组合。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595249950,"ip_address":"","comment_id":235845,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31659991733","product_id":100052601,"comment_content":"总结一下：软件设计时候需要从不同的用户角色来考虑，接口设计要尽量小。小接口其实也体现了单一职责原则，如果一个功能需要用到多个接口，那么可以通过组合（或者实现）各个小接口成一个大的接口。","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501849,"discussion_content":"分别用不同的接口就好了，不一定要组合。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595249950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237844,"user_name":"shniu","can_delete":false,"product_type":"c1","uid":1019555,"ip_address":"","ucode":"E64CD8BED96D8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/a3/d7e5fe8a.jpg","comment_is_top":false,"comment_ctime":1595986068,"is_pvip":false,"replies":[{"id":"87910","content":"总结得不错。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1596012133,"ip_address":"","comment_id":237844,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27365789844","product_id":100052601,"comment_content":"接口的定义不应该和具体的业务细节过度耦合，应该业务细节依赖更高层面的抽象","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502564,"discussion_content":"总结得不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596012133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255886,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603451043,"is_pvip":false,"replies":[{"id":"100540","content":"是的，先关注行为。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612255930,"ip_address":"","comment_id":255886,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23078287523","product_id":100052601,"comment_content":"我们现在是贫血模式，一个模块的所有接口都在一个service里面，我们的代码和设计还是数据为主。<br>这一章节的内容感觉有点无从下手，不知道该怎么拆分，是不是应该按前面说的先从关注行为开始优化现有的设计","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507863,"discussion_content":"是的，先关注行为。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612255930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235812,"user_name":"OlafOO","can_delete":false,"product_type":"c1","uid":1019254,"ip_address":"","ucode":"105F8B194ED37B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/76/994a9929.jpg","comment_is_top":false,"comment_ctime":1595209505,"is_pvip":true,"replies":[{"id":"87145","content":"有什么不开心的，可以说出来开心一下。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595249981,"ip_address":"","comment_id":235812,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14480111393","product_id":100052601,"comment_content":"想到一个场景是之前在电商公司一个中台服务提供给外部业务部门的接口大部分都是胖接口","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501839,"discussion_content":"有什么不开心的，可以说出来开心一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595249981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235999,"user_name":"蓝士钦","can_delete":false,"product_type":"c1","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1595287633,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10185222225","product_id":100052601,"comment_content":"日常开发中常常为了写接口而写接口，一个service中的所有方法都提取到一个接口类中，感觉这样和不写接口没啥区别，因为这样实现类要实现接口类中的所有方法。<br>应该把不同行为的接口抽离出来，service组合这些接口实现类才比较灵活吧，controller不一定非得通过接口去调用service吧。毕竟controller的职责是处理入参校验，直接通过方法调用业务service没什么不妥吧","like_count":2,"discussions":[{"author":{"id":2404924,"avatar":"https://static001.geekbang.org/account/avatar/00/24/b2/3c/22028324.jpg","nickname":"呆呆狗的兽","note":"","ucode":"B7D445F3BE2E4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384572,"discussion_content":"这种service在这里充当了能力聚合的角色，暴露了当前这个领域模型的业务下的所有方法，比如userService，提供了user这个领域模型的相关业务方法，没有别的意图与行为，也不需要，而那些通用的行为的接口，比如ExcelReader这种，他们也不会用service这种业务综合的方式来命名","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626667388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236572,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1595470093,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5890437389","product_id":100052601,"comment_content":"思考题：<br>把ActualTransactionRequest拆掉，DepositRequest, WithdrawRequest, TransferRequest 每个接口都有自己的实现类，这样就符合OCP了吧。<br>请老师指正。","like_count":1},{"had_liked":false,"id":236500,"user_name":"Being","can_delete":false,"product_type":"c1","uid":1152227,"ip_address":"","ucode":"80A8783927B650","user_header":"https://static001.geekbang.org/account/avatar/00/11/94/e3/ed118550.jpg","comment_is_top":false,"comment_ctime":1595429479,"is_pvip":false,"replies":[{"id":"88923","content":"理解得不错。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1597056694,"ip_address":"","comment_id":236500,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890396775","product_id":100052601,"comment_content":"在LSP里面有提到公共接口是宝贵的资源，学习完ISP后，更觉得设计小接口的必要性了。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502096,"discussion_content":"理解得不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597056694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235954,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1595255423,"is_pvip":true,"replies":[{"id":"89055","content":"这方面，我也不是很了解，有一些模块，但不是整个项目。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1597125894,"ip_address":"","comment_id":235954,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5890222719","product_id":100052601,"comment_content":"郑老师，有金融类的，设计的比较好的，可以用来学习的开源项目么？如果是TDD方式开发的更佳。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501896,"discussion_content":"这方面，我也不是很了解，有一些模块，但不是整个项目。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597125894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015267,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/e3/ad6a4758.jpg","nickname":"Todd  BD","note":"","ucode":"21F27169916949","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292870,"discussion_content":"可以自己去GitHub上找","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595371919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1158436,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","nickname":"桃子-夏勇杰","note":"","ucode":"5D5F38AABA980F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1015267,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/e3/ad6a4758.jpg","nickname":"Todd  BD","note":"","ucode":"21F27169916949","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292874,"discussion_content":"找过一下，不太好找。老师有金融和TDD两个背景可能会关注更多更深入才问的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595374025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":292870,"ip_address":""},"score":292874,"extra":""}]}]},{"had_liked":false,"id":346190,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1652879938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652879938","product_id":100052601,"comment_content":"识别对象的不同角色，设计小接口--记下来","like_count":0},{"had_liked":false,"id":342147,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1650038022,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1650038022","product_id":100052601,"comment_content":"根据角色来设计小接口 是个好主意","like_count":0},{"had_liked":false,"id":324371,"user_name":"饭","can_delete":false,"product_type":"c1","uid":1610573,"ip_address":"","ucode":"B3F1702D4DE604","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","comment_is_top":false,"comment_ctime":1638407616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638407616","product_id":100052601,"comment_content":"老师，我尝试敲了一下C#代码.<br> TransactionHandler&lt;TransactionRequest&gt; handle = new DepositHandler();<br>发现handle，通过这样的接口形式去用，泛型类并不支持，这样的话，针对每种具体Handle实现类，都必须有一个具体配套的接口，还是没达到抽象的效果啊.我不知道是不是JAVA支持这种用法","like_count":0},{"had_liked":false,"id":277396,"user_name":"Geek_0315ca","can_delete":false,"product_type":"c1","uid":1810532,"ip_address":"","ucode":"675254A9FC25A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVAVOYIoohh3bCdgErne0VHtoPorcrtmOAR45rsWPmJsLkzlvqMulbRyv0Skj8JHajrA9bPia3Lxw/132","comment_is_top":false,"comment_ctime":1612404239,"is_pvip":false,"replies":[{"id":"100680","content":"对，难点在于把握粒度。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612483423,"ip_address":"","comment_id":277396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1612404239","product_id":100052601,"comment_content":"把握好接口粒度:不应该让使用者依赖于用不到的接口","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515034,"discussion_content":"对，难点在于把握粒度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612483423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271026,"user_name":"阿布黑皮诺","can_delete":false,"product_type":"c1","uid":1007156,"ip_address":"","ucode":"D9533156D5EC29","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/34/2c34e55a.jpg","comment_is_top":false,"comment_ctime":1609376124,"is_pvip":false,"replies":[{"id":"100421","content":"很好的补充","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612099164,"ip_address":"","comment_id":271026,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609376124","product_id":100052601,"comment_content":"五张生动阐述SOLID原则的图片<br><br><br>http:&#47;&#47;web.archive.org&#47;web&#47;20160521015258&#47;https:&#47;&#47;lostechies.com&#47;derickbailey&#47;2009&#47;02&#47;11&#47;solid-development-principles-in-motivational-pictures&#47;","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512821,"discussion_content":"很好的补充","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612099164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250636,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1601180723,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1601180723","product_id":100052601,"comment_content":"我应该是那种只关心具体的类，使用者和设计者两种角色都没有意识到的。<br><br>“不设计接口，不代表没有接口”，这个说的挺对的，而且这里的接口是广义的，具体类也可能成为接口（所有的公开方法都是接口）。<br><br>有一个小问题，那个 ActualTransactionRequest 为什么要继承所有的 Request 接口？<br><br>对于思考题，其实可能不需要 ActualTransactionRequest，每个业务处理方法都可以用 TransactionRequest 接口作为参数。<br><br>“不要依赖于任何不需要的东西”这个已经可以类比奥卡姆剃刀原理了，如无必要勿增实体。<br><br>在留言里面看到有同学推荐 DDD，我觉的可能在设计小接口的时候，需要用到领域建模的思想，准备去隔壁专栏看看。","like_count":0},{"had_liked":false,"id":240007,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1596712057,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1596712057","product_id":100052601,"comment_content":"老师您好，我想问下文中引入这个ActualTransactionRequest类有什么特别的作用吗？还是只是为了不破坏原先的设计意图","like_count":0,"discussions":[{"author":{"id":1444919,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0c/37/913de94f.jpg","nickname":"keys头","note":"","ucode":"47C3E0648A8434","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336698,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608669878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238186,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1596091458,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1596091458","product_id":100052601,"comment_content":"在TransactionRequest中声明getAmount方法，把DepositRequest等几个接口变成实现类，用ActualTransactionRequest类组合不同的Request。ActualTransactionRequest引用TransactionRequest的集合而非具体的Request的类，这样可以避免修改ActualTransactionRequest。","like_count":0,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377207,"discussion_content":"但是如何使用呢？集合里面完全没法区分呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622548969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237843,"user_name":"shniu","can_delete":false,"product_type":"c1","uid":1019555,"ip_address":"","ucode":"E64CD8BED96D8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/a3/d7e5fe8a.jpg","comment_is_top":false,"comment_ctime":1595985981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595985981","product_id":100052601,"comment_content":"可以考虑把TransactionRequest 接口定义一个 getAmount 的行为，不同的业务场景，如充值&#47;提现等去直接实现，这样简单直接，根据特定场景使用特定的对象，针对修改只需要扩展新的业务类，应该也符合ocp<br>","like_count":0},{"had_liked":false,"id":235814,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1595209786,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1595209786","product_id":100052601,"comment_content":"接口隔离，感觉调用方在acl实现更合理些。毕竟每个调用方的关注点各不相同，服务提供方也没必要去感知各个调用方的关注点。","like_count":0,"discussions":[{"author":{"id":2404924,"avatar":"https://static001.geekbang.org/account/avatar/00/24/b2/3c/22028324.jpg","nickname":"呆呆狗的兽","note":"","ucode":"B7D445F3BE2E4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384591,"discussion_content":"你说的提供方感知，其实是上面例子巧了，每个功能都契合一个消费方的使用，就像是提供方故意给使用方拆分的一样。即使没有消费方，如果后面业务复杂，也需要这样去拆分的做，去重构成这样，考虑后面的拓展及功能隔离是主要原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626672255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512618,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epuvKVmiaiaYDRFVRX3rGwSS4T1jibEKibqZYQjxob03ibdmguKzRsftAssCTDVWrdXL7ojNagaIdjIvzA/132","nickname":"Reason","note":"","ucode":"719EA4D5E5BC5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292420,"discussion_content":"acl 是指？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595220995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1512618,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epuvKVmiaiaYDRFVRX3rGwSS4T1jibEKibqZYQjxob03ibdmguKzRsftAssCTDVWrdXL7ojNagaIdjIvzA/132","nickname":"Reason","note":"","ucode":"719EA4D5E5BC5A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309045,"discussion_content":"我猜可能是指 Access Control List","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601180527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":292420,"ip_address":""},"score":309045,"extra":""}]}]},{"had_liked":false,"id":235786,"user_name":"骨汤鸡蛋面","can_delete":false,"product_type":"c1","uid":1050002,"ip_address":"","ucode":"2AC141A523E710","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/92/b609f7e3.jpg","comment_is_top":false,"comment_ctime":1595203015,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"1595203015","product_id":100052601,"comment_content":"感觉开发经常忽视设计的一个重要原因就是：大部分开发日常工作就是用springmvc 写controller&#47;service&#47;dao，关于这个老师可以给一些建议嘛","like_count":0,"discussions":[{"author":{"id":1169474,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d8/42/d4e7a136.jpg","nickname":"有思想的芦苇","note":"","ucode":"AA0B96363B1587","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589432,"discussion_content":"个人认为MVC和面向对象设计原则不在一个层面，前者是具体应用层面的模式，在MVC中各个部分都可以应用到设计原则，而设计原则是指导性原则。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1664895669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1640991,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/GkMk4gBlfZcljsY3Vqu7w6GM4qd7QjEy4X6c25jdtEowhjyTzOeIBDFXYcleXmfF1qFicaI8gz5k2TkUgvAYibNQ/132","nickname":"杨妞","note":"","ucode":"D734D8512B27D6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1169474,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d8/42/d4e7a136.jpg","nickname":"有思想的芦苇","note":"","ucode":"AA0B96363B1587","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591817,"discussion_content":"说的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666839184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":589432,"ip_address":"陕西"},"score":591817,"extra":""}]},{"author":{"id":1258209,"avatar":"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg","nickname":"段启超","note":"","ucode":"164CF3018071B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302200,"discussion_content":"这个问题的源头可能在于MVC这种结构多年以来在很多人的潜意识中已经成了一个固定，不可突破的模型，认为代码只能这么写，任何违背这种模式的代码都是不可接受的，这也就让我们失去了去探索更多好的实践的能力。所以，从意识上明白探索更好的实践才是解决这个问题的起点，我也是从DDD 开始才意识到这一点的，在看《领域驱动设计》的时候，各种观点真的直接锤到了自己的各种痛点，有种强烈的共鸣。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598839588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015267,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/e3/ad6a4758.jpg","nickname":"Todd  BD","note":"","ucode":"21F27169916949","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292871,"discussion_content":"建议去学习ddd，学习后再回头品一下你这个问题， 你会发现自己的成长","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595372009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}