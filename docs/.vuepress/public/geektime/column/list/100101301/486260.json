{"id":486260,"title":"27 | 微服务网关：如何借助 Nacos 实现动态路由规则？","content":"<p>你好，我是姚秋辰。</p><p>在上节课中，我们通过一系列谓词和过滤器的组合为三个微服务模块配置了路由规则，这套方案足以应对大部分线上业务的需求，但在可扩展性方面还不够完美。为什么这么说呢？因为这些路由规则是以yml文件或者Java代码配置在项目中的静态规则。随着项目启动，这些路由规则会被加载到应用上下文并生效。但在程序运行期，如果我们想要改变这些预定义的路由规则，或者创建新的路由规则，似乎只有提交改动到Gateway组件-&gt;编译项目-&gt;重新部署这一条路子。</p><p>那么，如果我们希望不重新部署网关，就能更改路由规则，可以有哪些途径呢？</p><p>有一种“临时性”的方案，是借助Gateway网关的actuator endpoiont进行CRUD。Gateway组件内定义了一套内置的actuator endpoints，当满足下面两个条件时，我们就可以借助actuator提供的能力对路由表进行修改了。</p><ul>\n<li>项目中存在spring-boot-starter-actuator依赖项；</li>\n<li>Gateway组件的actuator endpoint已对外开放。<br>\n为了满足上面这两个条件，我已经将配置项添加到了Gateway模块中，并且在application.yml文件中的management节点下，对外开放了所有actuator端点。</li>\n</ul><!-- [[[read_end]]] --><p>接下来，你就可以借助Gateway组件的actuator endpoiont完成一系列CRUD操作了。以实战项目的源码为例，actuator endpoint地址是localhost:30000/actuator/gateway/routes。这套接口遵循了标准的RESTful规范，你可以对这个路径发起GET请求，获取一段JSON格式的路由规则全集，也可以使用POST请求添加一个新的路由规则，或者使用PUT/DELETE请求修改/删除指定路由规则。</p><p>好了，Gateway的actuator动态路由功能我就点到即止了，actuator方案尽管实现了动态路由管理，但这些动态路由只保存在了应用的上下文中，一重启就没了。接下来我要给你介绍个更牛的方案，它不仅能动态管理路由表，而且还能让这些规则实现持久化，无论怎么重启都不会丢失路由规则。</p><p>下面，我们就来了解一下，如何借助Nacos Config实现动态路由规则的持久化。</p><h2>使用Nacos Config添加动态路由表</h2><p><strong>但凡有动态配置相关的需求，使用Nacos Config就对了</strong>。上节课里我已经将Nacos Config的依赖项添加到了Gateway模块，接下来我们直奔主题，看一下Gateway和Nacos是如何来集成的吧。</p><p>首先，我们需要定义一个底层的网关路由规则编辑类，它的作用是将变化后的路由信息添加到网关上下文中。我把这个类命名为GatewayService，放置在com.geekbang.gateway.dynamic包路径下。</p><pre><code class=\"language-java\">@Slf4j\n@Service\npublic class GatewayService {\n\n    @Autowired\n    private RouteDefinitionWriter routeDefinitionWriter;\n\n    @Autowired\n    private ApplicationEventPublisher publisher;\n\n    public void updateRoutes(List&lt;RouteDefinition&gt; routes) {\n        if (CollectionUtils.isEmpty(routes)) {\n            log.info(\"No routes found\");\n            return;\n        }\n\n        routes.forEach(r -&gt; {\n            try {\n                routeDefinitionWriter.save(Mono.just(r)).subscribe();\n                publisher.publishEvent(new RefreshRoutesEvent(this));\n            } catch (Exception e) {\n                log.error(\"cannot update route, id={}\", r.getId());\n            }\n        });\n    }\n}\n</code></pre><p>这段代码接收了一个RouteDefinition List对象作为入参，它是Gateway网关组件用来封装路由规则的标准类，在里面包含了谓词、过滤器和metadata等一系列构造路由规则所需要的元素。在主体逻辑部分，我调用了Gateway内置的路由编辑类RouteDefinitionWriter，将路由规则写入上下文，再调用ApplicationEventPublisher类发布一个路由刷新事件。</p><p>接下来，我们要去做一个中间层转换层来对接Nacos和GatewayService，这个中间层主要完成两个任务，一是动态接收Nacos Config的参数，二是将配置文件的内容转换为GatewayService的入参。</p><p>这里我不打算使用@RefreshScope来获取Nacos动态参数了，我另辟蹊径使用了一种更为灵活的监听机制，通过注册一个“监听器”来获取Nacos Config的配置变化通知。我把这段逻辑封装在了DynamicRoutesListener类中，它位于GatewayService同级目录下，你可以参考下面的代码实现。</p><pre><code class=\"language-java\">@Slf4j\n@Component\npublic class DynamicRoutesListener implements Listener {\n\n    @Autowired\n    private GatewayService gatewayService;\n\n    @Override\n    public Executor getExecutor() {\n        log.info(\"getExecutor\");\n        return null;\n    }\n\n    // 使用JSON转换，将plain text变为RouteDefinition\n    @Override\n    public void receiveConfigInfo(String configInfo) {\n        log.info(\"received routes changes {}\", configInfo);\n\n        List&lt;RouteDefinition&gt; definitionList = JSON.parseArray(configInfo, RouteDefinition.class);\n        gatewayService.updateRoutes(definitionList);\n    }\n}\n</code></pre><p>DynamicRoutesListener实现了Listener接口，后者是Nacos Config提供的标准监听器接口，当被监听的Nacos配置文件发生变化的时候，框架会自动调用receiveConfigInfo方法执行自定义逻辑。在这段方法里，我将接收到的文本对象configInfo转换成了List<routedefinition>类，并调用GatewayService完成路由表的更新。</routedefinition></p><p>这里需要你注意的一点是，你需要按照RouteDefinition的JSON格式来编写Nacos Config中的配置项，如果两者格式不匹配，那么这一步格式转换就会抛出异常。</p><p>定义好了监听器之后，接下来你就要考虑如何来加载Nacos路由配置项了。我们需要在两个场景下加载配置文件，一个是项目首次启动的时候，从Nacos读取文件用来初始化路由表；另一个场景是当Nacos的配置项发生变化的时候，动态获取配置项。</p><p>为了能够一石二鸟简化开发，我决定使用一个类来搞定这两个场景。我定义了一个叫做DynamicRoutesLoader的类，它实现了InitializingBean接口，后者是Spring框架提供的标准接口。它的作用是在当前类所有的属性加载完成后，执行一段定义在afterPropertiesSet方法中的自定义逻辑。</p><p>在afterPropertiesSet方法中我执行了两项任务，第一项任务是调用Nacos提供的NacosConfigManager类加载指定的路由配置文件，配置文件名是routes-config.json；第二项任务是将前面我们定义的DynamicRoutesListener注册到routes-config.json文件的监听列表中，这样一来，每次这个文件发生变动，监听器都能够获取到通知。</p><pre><code class=\"language-java\">@Slf4j\n@Configuration\npublic class DynamicRoutesLoader implements InitializingBean {\n\n    @Autowired\n    private NacosConfigManager configService;\n\n    @Autowired\n    private NacosConfigProperties configProps;\n\n    @Autowired\n    private DynamicRoutesListener dynamicRoutesListener;\n\n    private static final String ROUTES_CONFIG = \"routes-config.json\";\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        // 首次加载配置\n        String routes = configService.getConfigService().getConfig(\n                ROUTES_CONFIG, configProps.getGroup(), 10000);\n        dynamicRoutesListener.receiveConfigInfo(routes);\n        \n        // 注册监听器\n        configService.getConfigService().addListener(ROUTES_CONFIG,\n                configProps.getGroup(),\n                dynamicRoutesListener);\n    }\n\n}\n</code></pre><p>到这里，我们的代码任务就完成了，你只需要往项目的bootstrap.yml文件中添加Nacos Config的配置项就可以了。按照惯例，我仍然使用dev作为存放配置文件的namespace。</p><pre><code class=\"language-plain\">spring:\n  application:\n    name: coupon-gateway \n  cloud:\n    nacos:\n      config:\n        server-addr: localhost:8848\n        file-extension: yml\n        namespace: dev\n        timeout: 5000\n        config-long-poll-timeout: 1000\n        config-retry-time: 100000\n        max-retry: 3\n        refresh-enabled: true\n        enable-remote-sync-config: true\n</code></pre><p>完成了以上步骤之后，Gateway组件的改造任务就算搞定了，接下来我再带你去Nacos里创建一个路由规则配置文件。</p><h2>添加Nacos配置文件</h2><p>在Nacos配置列表页中，你需要在“开发环境”的命名空间下创建一个JSON格式的文件，文件名要和Gateway代码中的名称一致，叫做“routes-config.json”，它的Group是默认分组，也就是DEFAULT_GROUP。</p><p>创建好之后，你需要根据RoutesDefinition这个类的格式定义配置文件的内容。以coupon-customer-serv为例，我编写了下面的路由规则。</p><pre><code class=\"language-json\">[{\n    \"id\": \"customer-dynamic-router\",\n    \"order\": 0,\n    \"predicates\": [{\n        \"args\": {\n            \"pattern\": \"/dynamic-routes/**\"\n        },\n        \"name\": \"Path\"\n    }],\n    \"filters\": [{\n        \"name\": \"StripPrefix\",\n        \"args\": {\n            \"parts\": 1\n        }\n    }  \n    ],\n    \"uri\": \"lb://coupon-customer-serv\"\n}]\n</code></pre><p>在这段配置文件中，我指定当前路由的ID是customer-dynamic-router，并且优先级为0。除此之外，我还定义了一段Path谓词作为路径匹配规则，还通过StripPrefix过滤器将Path中第一个前置路径删除。</p><p>创建完成后，你可以在本地启动项目，并尝试访问localhost:30000/dynamic-routes/coupon-customer/requestCoupon，发起一个用户领券请求到Gateway组件来领取优惠券。在配置正确无误的情况下，这个请求就会被转发到Customer服务啦。</p><p>到这里，我们就完整搭建了一套可被持久化的动态路由方案。下面让我来带你回顾下本节重点吧。</p><h2>总结</h2><p>在今天的课程里，我们借助Nacos Config作为路由规则的数据源，完成了路由表的动态加载和持久化。我这里讲的解决方案只是一种思路，在代码中我还留了一个坑给你来填，希望你可以顺着这节课学到的技术方案向下继续探索，把这个坑填上。</p><p>我所指的坑是什么呢？我在Nacos Config里定义的路由表中有一个ID，它是这个路由的全局唯一ID，借助这个ID呢我们就可以完成路由的UPDATE操作。但是，如果我想要删除某个路由，应该怎么办呢？</p><p>我可以给你提示几个解决方案，你挑其中一种来实现就好。比如说，你可以对Nacos配置项做一层额外封装，添加几个新字段用来表示“删除路由”这个语义，并创建一个自定义POJO类接收参数；还有，你可以在路由的metadata里为Nacos的动态路由做一个特殊标记，每次当Nacos刷新路由表的时候，就删除上下文当中的所有Nacos路由表，再重新创建；又或者你可以通过metadata做一个逻辑删除的标记，每次更新路由表的时候只要见到这个标记就删除当前路由，否则就更新或新建路由。</p><h2>思考题</h2><p>我在上面提示了几种路由删除的方案，希望可以抛砖引玉，接下来就轮到你来设计并实现一个优雅方案了，欢迎在留言区分享你自己的思路。</p><p>好啦，这节课就结束啦。欢迎你把这节课分享给更多对Spring Cloud感兴趣的朋友。我是姚秋辰，我们下节课再见！</p>","neighbors":{"left":{"article_title":"26 | 微服务网关：如何设置请求转发、跨域和限流规则？","id":485746},"right":{"article_title":"28 | 消息驱动：谁说消息队列只能削峰填谷？","id":487158}},"comments":[{"had_liked":false,"id":346440,"user_name":"Ever","can_delete":false,"product_type":"c1","uid":1088821,"ip_address":"","ucode":"69B52B0E20BBE0","user_header":"https://static001.geekbang.org/account/avatar/00/10/9d/35/e026cf65.jpg","comment_is_top":false,"comment_ctime":1653138818,"is_pvip":false,"replies":[{"id":"126726","content":"文中我特意提到“我这里我不打算使用 @RefreshScope 来获取 Nacos 动态参数了”，前者Nacos动态属性是很容易就能想到的方案，前面章节也都学过了，所以为了兼具演示Nacos Config实现监听的原理和过程，才用了一套可以更加灵活做自定义配置的listener。","user_name":"作者回复","comment_id":346440,"uid":"2819998","ip_address":"","utype":1,"ctime":1654237317,"user_name_real":"编辑"}],"discussion_count":3,"race_medal":0,"score":"23127975298","product_id":100101301,"comment_content":"没明白为啥不直接在nacos上用spring.cloud.gateway.routes配置项配置路由，明明本身就支持动态刷新，哪里需要画蛇添足自定义监听配置和刷新路由。<br>RefreshRoutesEvent 事件会触发路由刷新，这一步本身就比较耗CPU（可以自己抓个火焰图），这里在forEach里还不停触发是否合理（放在循环外面不是更好）。","like_count":6,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574662,"discussion_content":"文中我特意提到“我这里我不打算使用 @RefreshScope 来获取 Nacos 动态参数了”，前者Nacos动态属性是很容易就能想到的方案，前面章节也都学过了，所以为了兼具演示Nacos Config实现监听的原理和过程，才用了一套可以更加灵活做自定义配置的listener。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1654237317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008312,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/axLup21Kib4S45WFUw1byPZWicbicvp76rZMoXZDmAnOrpJpYJEqou6wRmFQ4h4YUfEfwLU0e9NGrcibFH99k8qtFg/132","nickname":"fireshort","note":"","ucode":"10550CA9C6C730","race_medal":3,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591195,"discussion_content":"publisher.publishEvent(new RefreshRoutesEvent(this)); \n\n这句应该放在循环外就可以了，应该刷新一次就好？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666352983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109562,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/3a/c0ad9c43.jpg","nickname":"杰","note":"","ucode":"036B010A45070A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585814,"discussion_content":"监听和刷新路由是需要的，你理解应该有误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661841642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341045,"user_name":"theodore","can_delete":false,"product_type":"c1","uid":1187261,"ip_address":"","ucode":"98A87E2636E1CA","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/bd/ba3530ff.jpg","comment_is_top":false,"comment_ctime":1649312261,"is_pvip":false,"replies":[{"id":"125185","content":"这个吊炸天，大中台路由:)","user_name":"作者回复","comment_id":341045,"uid":"2819998","ip_address":"","utype":1,"ctime":1650416750,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":1,"score":"14534214149","product_id":100101301,"comment_content":"我们的路由是自己实现的前后端分离的服务，增删改查都在上面操作 没有依靠nacos config","like_count":4,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565209,"discussion_content":"这个吊炸天，大中台路由:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650416750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334244,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1644826227,"is_pvip":true,"replies":[{"id":"122268","content":"Q1：通用规范接口，理念类似于jmx<br>Q2：设计模式是微观层面的实现，很难把某个功能归类到设计模式上。只能说表现方式上是observer，但底层实现复杂得多<br>Q3：读取文件内容<br>Q4：gatewayserv是gateway这个module的一个类，和templateserv-&gt;Template模块这个所属关系一样","user_name":"作者回复","comment_id":334244,"uid":"2819998","ip_address":"","utype":1,"ctime":1645079731,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5939793523","product_id":100101301,"comment_content":"请教老师四个问题啊：<br>Q1：Gateway内置的actuator endpoint是Gateway独有的？还是具有通用性？比如其他的组件(e.g,nacos)也可以加入actuator endpoint?<br>Q2：DynamicRoutesListener是观察者模式吗？<br>Q3：DynamicRoutesLoader是把Nacos中的文件“routes-config.json”读取过来吗？（相当于跨进程或跨机器传输文件）<br>Q4：在middleware下面的Gateway这个module本身是个独立的服务，它不同于Gateway组件，对吗？ 如果是这样，GatewayService是定义在Gateway这个服务中的，GatewayService要把路由信息更新到Gateway组件的上下文中，是通过跨进程或跨机器通信，对吗？","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551667,"discussion_content":"Q1：通用规范接口，理念类似于jmx\nQ2：设计模式是微观层面的实现，很难把某个功能归类到设计模式上。只能说表现方式上是observer，但底层实现复杂得多\nQ3：读取文件内容\nQ4：gatewayserv是gateway这个module的一个类，和templateserv-&gt;Template模块这个所属关系一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645079731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336414,"user_name":"so long","can_delete":false,"product_type":"c1","uid":1449679,"ip_address":"","ucode":"2A6B47BB32FC18","user_header":"https://static001.geekbang.org/account/avatar/00/16/1e/cf/97cd8be1.jpg","comment_is_top":false,"comment_ctime":1646134623,"is_pvip":false,"replies":[{"id":"123085","content":"RefreshRoutesEvent做了很多善后的事儿，比如说清理cache啊之类的，还有很多类似的注解，比如@RefreshScope注解背后也会发布一个Event，他们背后都有不少的其它支线任务","user_name":"作者回复","comment_id":336414,"uid":"2819998","ip_address":"","utype":1,"ctime":1646404405,"user_name_real":"编辑"}],"discussion_count":3,"race_medal":0,"score":"1646134623","product_id":100101301,"comment_content":" 请教老师一个问题：publisher.publishEvent(new RefreshRoutesEvent(this));这行代码是必须的吗？我自己测试的时候执行该行代码后就卡主不会往下执行了，然后我注释掉该行代码，也可以实现路由的动态刷新。","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554491,"discussion_content":"RefreshRoutesEvent做了很多善后的事儿，比如说清理cache啊之类的，还有很多类似的注解，比如@RefreshScope注解背后也会发布一个Event，他们背后都有不少的其它支线任务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646404405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2930417,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/b6/f1/82933092.jpg","nickname":"尘浮","note":"","ucode":"D3145DB8A36F4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572546,"discussion_content":"我也遇到了相同的问题，debug发现是spring-cloud-dependencies版本2020.0.4稍微高了一点，其中WeightCalculatorWebFilter类中的onApplicationEvent方法有些许不同，调整为老师的2020.0.1就行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652845807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025862,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a7/46/0d0aa7d5.jpg","nickname":"No more","note":"","ucode":"A8E4F4CC48076A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563671,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650039464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}