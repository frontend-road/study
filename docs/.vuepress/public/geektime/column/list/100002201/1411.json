{"id":1411,"title":"21 | 分布式系统架构的冰与火","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>最近几年，我们一直在谈论各式各样的架构，如高并发架构、异地多活架构、容器化架构、微服务架构、高可用架构、弹性化架构等。还有和这些架构相关的管理型的技术方法，如DevOps、应用监控、自动化运维、SOA服务治理、去IOE等。面对这么多纷乱的技术，我看到很多团队或是公司都是一个一个地去做这些技术，非常辛苦，也非常累。这样的做法就像我们在撑开一张网里面一个一个的网眼。</p><p>其实，只要我们能够找到这张网的“纲”，我们就能比较方便和自如地打开整张网了。那么，这张“分布式大网”的总线——“纲”在哪里呢？我希望通过这一系列文章可以让你找到这个“纲”，从而能让你更好更有效率地做好架构和工程。</p><h1>分布式系统架构的冰与火</h1><p>首先，我们需要阐述一下为什么需要分布式系统，而不是传统的单体架构。也许这对你来说已经不是什么问题了，但是请允许我在这里重新说明一下。使用分布式系统主要有两方面原因。</p><ul>\n<li>\n<p><strong>增大系统容量</strong>。我们的业务量越来越大，而要能应对越来越大的业务量，一台机器的性能已经无法满足了，我们需要多台机器才能应对大规模的应用场景。所以，我们需要垂直或是水平拆分业务系统，让其变成一个分布式的架构。</p>\n</li>\n<li>\n<p><strong>加强系统可用</strong>。我们的业务越来越关键，需要提高整个系统架构的可用性，这就意味着架构中不能存在单点故障。这样，整个系统不会因为一台机器出故障而导致整体不可用。所以，需要通过分布式架构来冗余系统以消除单点故障，从而提高系统的可用性。</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>当然，分布式系统还有一些优势，比如：</p><ul>\n<li>\n<p>因为模块化，所以系统模块重用度更高；</p>\n</li>\n<li>\n<p>因为软件服务模块被拆分，开发和发布速度可以并行而变得更快；</p>\n</li>\n<li>\n<p>系统扩展性更高；</p>\n</li>\n<li>\n<p>团队协作流程也会得到改善；</p>\n</li>\n<li>\n<p>……</p>\n</li>\n</ul><p>不过，这个世界上不存在完美的技术方案，采用任何技术方案都是“按下葫芦浮起瓢”，都是有得有失，都是一种trade-off。也就是说，分布式系统在解决上述问题的同时，也给我们带来了其他的问题。因此，我们需要清楚地知道分布式系统所带来的问题。</p><p>下面这个表格比较了单体应用和分布式架构的优缺点。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/91/8fecccec610626a3e348318b1fd17791.png?wh=1084*724\" alt=\"\"></p><p>从上面的表格我们可以看到，分布式系统虽然有一些优势，但也存在一些问题。</p><ul>\n<li>\n<p>架构设计变得复杂（尤其是其中的分布式事务）。</p>\n</li>\n<li>\n<p>部署单个服务会比较快，但是如果一次部署需要多个服务，流程会变得复杂。</p>\n</li>\n<li>\n<p>系统的吞吐量会变大，但是响应时间会变长。</p>\n</li>\n<li>\n<p>运维复杂度会因为服务变多而变得很复杂。</p>\n</li>\n<li>\n<p>架构复杂导致学习曲线变大。</p>\n</li>\n<li>\n<p>测试和查错的复杂度增大。</p>\n</li>\n<li>\n<p>技术多元化，这会带来维护和运维的复杂度。</p>\n</li>\n<li>\n<p>管理分布式系统中的服务和调度变得困难和复杂。</p>\n</li>\n</ul><p>也就是说，分布式系统架构的难点在于系统设计，以及管理和运维。所以，分布式架构解决了“单点”和“性能容量”的问题，但却新增了一堆问题。而对于这些新增的问题，还会衍生出更多的子问题，这就需要我们不断地用各式各样的技术和手段来解决这些问题。</p><p>这就出现了我前面所说的那些架构方式，以及各种相关的管理型的技术方法。这个世界就是这样变得复杂起来的。</p><h1>分布式系统的发展</h1><p>从20世纪70年代的模块化编程，80年代的面向事件设计，90年代的基于接口/构件设计，这个世界很自然地演化出了SOA——基于服务的架构。SOA架构是构造分布式计算应用程序的方法。它将应用程序功能作为服务发送给最终用户或者其他服务。它采用开放标准与软件资源进行交互，并采用标准的表示方式。</p><p>开发、维护和使用SOA要遵循以下几条基本原则。</p><ul>\n<li>\n<p>可重用，粒度合适，模块化，可组合，构件化以及有互操作性。</p>\n</li>\n<li>\n<p>符合开放标准（通用的或行业的）。</p>\n</li>\n<li>\n<p>服务的识别和分类，提供和发布，监控和跟踪。</p>\n</li>\n</ul><p>但IBM搞出来的SOA非常重，所以对SOA的裁剪和优化从来没有停止过。比如，之前的SOAP、WSDL和XML这样的东西基本上已经被抛弃了，而改成了RESTful和JSON这样的方式。而ESB（Enterprise Service Bus，企业服务总线）这样非常重要的东西也被简化成了Pub/Sub的消息服务……</p><p>不过，SOA的思想一直延续着。所以，我们现在也不说SOA了，而是说分布式服务架构了。</p><p>下面是一个SOA架构的演化图。</p><p><img src=\"https://static001.geekbang.org/resource/image/54/42/542f449c5aeffd20a6d66b32c1736f42.png?wh=865*375\" alt=\"\"></p><p>我们可以看到，面向服务的架构有以下三个阶段。</p><ul>\n<li>\n<p>20世纪90年代前，是单体架构，软件模块高度耦合。当然，这张图同样也说明了有的SOA架构其实和单体架构没什么两样，因为都是高度耦合在一起的。就像图中的齿轮一样，当你调用一个服务时，这个服务会调用另一个服务，然后又调用另外的服务……于是整个系统就转起来了。但是这本质是比较耦合的做法。</p>\n</li>\n<li>\n<p>而2000年左右出现了比较松耦合的SOA架构，这个架构需要一个标准的协议或是中间件来联动其它相关联的服务（如ESB）。这样一来，服务间并不直接依赖，而是通过中间件的标准协议或是通讯框架相互依赖。这其实就是IoC（控制反转）和DIP（依赖倒置原则）设计思想在架构中的实践。它们都依赖于一个标准的协议或是一个标准统一的交互方式，而不是直接调用。</p>\n</li>\n<li>\n<p>而2010年后，出现了微服务架构，这个架构更为松耦合。每一个微服务都能独立完整地运行（所谓的自包含），后端单体的数据库也被微服务这样的架构分散到不同的服务中。而它和传统SOA的差别在于，服务间的整合需要一个服务编排或是服务整合的引擎。就好像交响乐中需要有一个指挥来把所有乐器编排和组织在一起。</p>\n</li>\n</ul><p>一般来说，这个编排和组织引擎可以是工作流引擎，也可以是网关。当然，还需要辅助于像容器化调度这样的技术方式，如Kubernetes。在Martin Fowler 的 <a href=\"https://martinfowler.com/articles/microservices.html\">Microservices 这篇文章</a>中有详细描述。</p><p>微服务的出现使得开发速度变得更快，部署快，隔离性高，系统的扩展度也很好，但是在集成测试、运维和服务管理等方面就比较麻烦了。所以，需要一套比较好的微服务PaaS平台。就像Spring Cloud一样需要提供各种配置服务、服务发现、智能路由、控制总线……还有像Kubernetes提供的各式各样的部署和调度方式。</p><p>没有这些PaaS层的支撑，微服务也是很难被管理和运维的。好在今天的世界已经有具备了这些方面的基础设施，所以，采用微服务架构，我认为只是一个时间问题了。</p><h1>小结</h1><p>好了，今天的内容就到这里。相信通过今天的学习，你应该已经对为什么需要分布式系统，而不是传统的单体架构，有了清晰的认识。并且对分布式系统的发展历程了然于心。下一节课，我将结合亚马逊的分布式架构实践，来谈谈分布式系统架构的技术难点及应对方案。</p><p>下面我列出了《分布式系统架构的本质》系列文章的目录，希望你能在这个列表里找到自己感兴趣的内容。</p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/1411\">分布式系统架构的冰与火</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1505\">从亚马逊的实践，谈分布式系统的难点</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1512\">分布式系统的技术栈</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1513\">分布式系统关键技术：全栈监控</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1604\">分布式系统关键技术：服务调度</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1609\">分布式系统关键技术：流量与数据调度</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/1610\">洞悉PaaS平台的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2080\">推荐阅读：分布式系统架构经典资料</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2421\">推荐阅读：分布式数据调度相关论文</a></li>\n</ul><p>在这节课的最后，很想听你说说：在进行分布式系统开发，把一个单体应用拆解成服务化或是微服务中遇到的问题和难点是什么？踩过什么样的坑？你是如何应对的？欢迎在评论区留言。</p>","neighbors":{"left":{"article_title":"20 | Git协同工作流，你该怎么选？","id":2440},"right":{"article_title":"22 | 从亚马逊的实践，谈分布式系统的难点","id":1505}},"comments":[{"had_liked":false,"id":1380,"user_name":"二进制之路","can_delete":false,"product_type":"c1","uid":1008395,"ip_address":"","ucode":"67C84B013147B1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/0b/ad56aeb4.jpg","comment_is_top":false,"comment_ctime":1513006014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"336520455102","product_id":100002201,"comment_content":"微服务通常根据业务来划分边界，粒度通常是一个独立的业务，具体多大合适不是一开始就决定的，这是一个逐步拆分细化的过程，李智慧老师说任何复杂的架构都是从最简单的应用慢慢演化过来的，就像当年的淘宝发展到现在。单体应用，为了高可用，需要集群多实例部署。查询太慢，访问太慢，加缓存，DB读写分离。业务发展到一定复杂程度，单体应用太庞大，会产生一系列问题。例如开发方面，一个工程几十上百人不停的改动，如何协作，一个人的代码有问题，影响了所有业务。每一个版本的迭代与发布，开发、测试、沟通得花大把时间，可能还会出错，牵一发而可能动全身。运维上，发布一次可以睡个午觉，发布一次影响线上所有功能。资源方面，扩容到几十上百台机器的时候，DB、NoSQL等的连接数撑爆了……","like_count":79},{"had_liked":false,"id":1265,"user_name":"caoxile","can_delete":false,"product_type":"c1","uid":1023723,"ip_address":"","ucode":"11C17590F039EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9e/eb/f68665b6.jpg","comment_is_top":false,"comment_ctime":1512607453,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"190491168477","product_id":100002201,"comment_content":"我遇到的比较麻烦的就是数据一致性问题。一个操作需要调用好几个服务，后面的服务异常，前面的服务怎么回滚，如何保证事务。","like_count":45,"discussions":[{"author":{"id":2366393,"avatar":"https://static001.geekbang.org/account/avatar/00/24/1b/b9/d1d299bd.jpg","nickname":"Jeff.","note":"","ucode":"958AB49DCA5B70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334016,"discussion_content":"在分布式情况下，就需要使用分布式事务来保证一致性。一般情况下，只有在金融场景才会使用分布式事务。一方面，引入分布式事务的开销比单体项目来得高得多，不如做成单体项目集群；另一方面，大多数的场景比起一致性更在乎高可用性，并不需要保证最终一致性，最简单的例子就是日志，即使丢了几条日志，对项目也没有什么影响。\n再者，大多数的业务只有一个主操作，只要主操作保证了数据一致性，即使丢了其他的操作一般也不会产生太大的影响。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607694570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043814,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/66/f65ed1ea.jpg","nickname":"莫汉辉","note":"","ucode":"174A00895ED8DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569805,"discussion_content":"有saga模式，可以看&lt;微服务架构设计模式&gt;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651559465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55114,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1546046064,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"113215195760","product_id":100002201,"comment_content":"阅后留痕<br><br>单机在中间，往下研究是多线程高并发，往上研究是分布式高并发，往下是线程级别，往上是进程，集群级别，不过他们的根本是为了速度，为了快，为了快点将任务做完。<br><br>1:什么是分布式？<br>我认为相对单机而言，分布式至少是多机部署，多机共同分担任务处理<br><br>2:分布式核心解决的问题是什么？<br>我认为本质如浩哥所言，一是增加系统容量，二是实现系统高可用，其他还有并行开发、服务解耦<br><br>3:分布式引入的问题是什么？<br>数据不一致性，测试、运维复杂，排障链路长<br><br>4:分布式实现的难点是什么？<br>CAP<br><br>5:目前有哪些分布式的最佳实践？<br>不太清楚？<br><br>6:分布式必备技术有哪些？<br>RPC、MQ、各种集群存储系统、负载均衡、容器化部署","like_count":27,"discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287912,"discussion_content":"“不过他们的根本是为了速度，为了快，为了快点将任务做完。”\n这句话个人不认同， 简单表达下自己的看法，供交流： \n查看 “文中表格比较了单体应用和分布式架构的优缺点。”知道单体架构响应时间更快， 只是吞吐量小.  这里就可以看出分布式架构并不是为了快，而且增加吞吐量个人认为也不是分布式的目的，集群方式可以实现，分布式的目的更多是为了拆分业务成若干服务， 达到系统的可扩展与可维护。【尽管耗子老师说， 一是增加系统容量，二是实现系统高可用，其他还有并行开发、服务解耦】//Note： 不是很清楚 集群部署【业务不做拆分】算是分布式架构吗？TBD","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593586717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1485752,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ab/b8/0a979678.jpg","nickname":"小康","note":"","ucode":"2445F7BB91387C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384440,"discussion_content":"耗子叔推荐下分布式存储方向的技术栈，万分感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626594056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1687,"user_name":"whhbbq","can_delete":false,"product_type":"c1","uid":1018494,"ip_address":"","ucode":"4A93F3E375CB44","user_header":"","comment_is_top":false,"comment_ctime":1514117678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"70233594414","product_id":100002201,"comment_content":"服务化过程中代码层面需要注意以下几点1.序列化。接口的入参出参需要序列化;之前在单体应用中适用的service接口，可能不适用远程调用，需要改造，如匿名函数作为参数的接口。2.既当入参又当出参的接口，在服务化后，不再适用，需要改造。即调用更新接口后，需要调用查询接口以返回正确的值。3.服务化后，要考虑写接口是否是幂等。4.考虑接口超时，设置合理的超时时间。<br>","like_count":17},{"had_liked":false,"id":122641,"user_name":"zeroxus","can_delete":false,"product_type":"c1","uid":1058002,"ip_address":"","ucode":"9DBB3A81F01792","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/d2/40353046.jpg","comment_is_top":false,"comment_ctime":1565449436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48810089692","product_id":100002201,"comment_content":"将SOA架构描述成 IoC（控制反转）和 DIP（依赖倒置原则）设计思想在架构中的实践，真的直击本质啊，眼前一亮。","like_count":12},{"had_liked":false,"id":1289,"user_name":"左耳朵","can_delete":false,"product_type":"c1","uid":1001269,"ip_address":"","ucode":"8A4741D677702E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","comment_is_top":false,"comment_ctime":1512637478,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"48757277734","product_id":100002201,"comment_content":"@ lfn 当然不是","like_count":11},{"had_liked":false,"id":1279,"user_name":"左耳朵","can_delete":false,"product_type":"c1","uid":1001269,"ip_address":"","ucode":"8A4741D677702E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","comment_is_top":false,"comment_ctime":1512621502,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"44462294462","product_id":100002201,"comment_content":"@ helloworld 关于技术细节，我会单开另一个系列讲各种Pattern。敬请期待。","like_count":10},{"had_liked":false,"id":1280,"user_name":"左耳朵","can_delete":false,"product_type":"c1","uid":1001269,"ip_address":"","ucode":"8A4741D677702E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","comment_is_top":false,"comment_ctime":1512621550,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"40167327214","product_id":100002201,"comment_content":"@ coco 后面的“数据调度”会讲","like_count":9},{"had_liked":false,"id":1267,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1015222,"ip_address":"","ucode":"27EB4A725CE14E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/b6/abdebdeb.jpg","comment_is_top":false,"comment_ctime":1512608980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40167314644","product_id":100002201,"comment_content":"我很想知道对于新手来说，应该如何去学习分布式系统？耗子哥能给一些建议或者列一些书单么？","like_count":10},{"had_liked":false,"id":1273,"user_name":"bullboying","can_delete":false,"product_type":"c1","uid":1004962,"ip_address":"","ucode":"8DAC2384B770A3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/a2/e237925d.jpg","comment_is_top":false,"comment_ctime":1512612705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35872351073","product_id":100002201,"comment_content":"公司的新产品研发基本上是沿着分布式，微服务这个路线发展的，我们的产品是行业软件，to b的，发现分布式之后定制研发成本增加了不少，另外可能很多客户的体量还达不到需要部署微服务的程度，没法平摊越来越高的运维成本，所以最新的版本同时保留了单体应用和微服务架构两个方向的产品，适应不同的客户要求。这种一国两制的方式应该是挺正确的选择。<br>虽然微服务是将来的方向，如果只是一套系统自己运维，客户是自己，那自然是没得选。如果是离岸交付，那还是要权衡一下迈进的速度。","like_count":9},{"had_liked":false,"id":3982,"user_name":"TH","can_delete":false,"product_type":"c1","uid":1053413,"ip_address":"","ucode":"C5EA20546DC09C","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/e5/592d9324.jpg","comment_is_top":false,"comment_ctime":1521121262,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"27290925038","product_id":100002201,"comment_content":"耗子叔这篇文章简洁明了，但是在了解微服务的过程中仍有一些结合实际情况产生的疑问，希望能得到解答。<br>1.服务化和分布式是什么关系？是否把单体应用拆成服务就意味着一定要分布式部署？<br>2.包含本地操作和业务逻辑的桌面应用应当如何改造？把业务逻辑从本地客户端挪到服务端是不是会带来性能损失？<br>3.在企业内部应用(用户都在同一个局域网)的情况下，使用分布式架构是否有必要？","like_count":6,"discussions":[{"author":{"id":1252585,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1c/e9/48cc8f57.jpg","nickname":"小梅子","note":"","ucode":"B9797DE06232D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576788,"discussion_content":"试着回答下问题第一个问题，练习整理自己的思路：\n服务化和分布式是从不同角度来看到软件。服务化是在描素一个功能模块式是如何被外部使用的。软件工程中，从最早的 “include xx&#34; file的静态链接，到后来的dll 动态链接，...,  到现在的，我们不用知道”你在哪里，只要给我网络地址，一个公共的url，一般使用的restfull API；我发了request，你按request 完成要求”，就就是服务化“。至于帮我们完成服务的产品，内部是如何被设计的，我不关心的。而分布式，是指一个软件产品的架构设计。从它的内部子系统是否分布在不同计算节点上，每个子系统是否是集群合作，集群各个成员的角色是什么样的，等等","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655791309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2651290,"avatar":"https://static001.geekbang.org/account/avatar/00/28/74/9a/580d35a5.jpg","nickname":"用户7437721993","note":"","ucode":"0E16E6CFA4D225","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379041,"discussion_content":"在微服务架构下，你说的客户端只是提供ui和显示，逻辑主要在后端实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623640190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1320,"user_name":"xzyline","can_delete":false,"product_type":"c1","uid":1017591,"ip_address":"","ucode":"C81D3CD90F4217","user_header":"https://static001.geekbang.org/account/avatar/00/0f/86/f7/c829bde3.jpg","comment_is_top":false,"comment_ctime":1512739688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27282543464","product_id":100002201,"comment_content":"服务的部署问题，需要按业务线，重要等级，服务性能，服务类型高cpu还是高io好多维度需要考虑。<br>还有服务的负载均衡也不好处理。","like_count":6},{"had_liked":false,"id":1261,"user_name":"梁汉泉","can_delete":false,"product_type":"c1","uid":1028255,"ip_address":"","ucode":"7DA2CBA052AD6A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b0/9f/e3c9e687.jpg","comment_is_top":false,"comment_ctime":1512603990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27282407766","product_id":100002201,"comment_content":"15年，部署在阿里云服务，服务A访问服务B，因没有内网DNS以及阿里云的网络原因，流量走到公网又回来，延时秒级，更有甚者，服务B访问服务X也走的是公网，延时3s+…同样部署在AWS的服务在1秒内！","like_count":7},{"had_liked":false,"id":1285,"user_name":"lfn","can_delete":false,"product_type":"c1","uid":1026593,"ip_address":"","ucode":"2E1558C6A12A89","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/21/6c3ba9af.jpg","comment_is_top":false,"comment_ctime":1512628884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"22987465364","product_id":100002201,"comment_content":"是不是说，采用「微服务」之后，就不需要「中间件」了？","like_count":5},{"had_liked":false,"id":3941,"user_name":"krugle","can_delete":false,"product_type":"c1","uid":1045770,"ip_address":"","ucode":"60A7D9189C01BE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/0a/077b9922.jpg","comment_is_top":false,"comment_ctime":1521014240,"is_pvip":false,"replies":[{"id":"947","content":"后面有相应的设计模式系列","user_name":"作者回复","comment_id":3941,"uid":"1001269","ip_address":"","utype":1,"ctime":1521703124,"user_name_real":"左耳朵"}],"discussion_count":1,"race_medal":0,"score":"14405916128","product_id":100002201,"comment_content":"可不可以讲一些架构设计的基础，很多概念都不清楚，网上的概念也不统一","like_count":3,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416127,"discussion_content":"后面有相应的设计模式系列","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1521703124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1342,"user_name":"张向阳","can_delete":false,"product_type":"c1","uid":1018720,"ip_address":"","ucode":"BB14907C219AF3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/60/ec4dfaf3.jpg","comment_is_top":false,"comment_ctime":1512868079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14397769967","product_id":100002201,"comment_content":"微服务粒度怎么把握？什么东西可以被拆分出来独立为一个服务？有没有方法论可以遵循。期待老师能够分享","like_count":3},{"had_liked":false,"id":1321,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1015222,"ip_address":"","ucode":"27EB4A725CE14E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/b6/abdebdeb.jpg","comment_is_top":false,"comment_ctime":1512740109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14397641997","product_id":100002201,"comment_content":"耗子哥 你好 一直就对分布式感兴趣 但是不知道该从哪里入手 要学的东西太多了。耗子哥能不能给个建议或者入手的地方","like_count":3},{"had_liked":false,"id":1296,"user_name":"Sdylan","can_delete":false,"product_type":"c1","uid":1008503,"ip_address":"","ucode":"4589D0D0FA9275","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/77/423345ab.jpg","comment_is_top":false,"comment_ctime":1512654615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14397556503","product_id":100002201,"comment_content":"既然分布式架构的难点和痛点在维护和运维，能否讲讲分布式架构下的如何维护好软件和运维呢","like_count":3},{"had_liked":false,"id":1281,"user_name":"子悠","can_delete":false,"product_type":"c1","uid":1000383,"ip_address":"","ucode":"070BB09477E8A8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/bf/9a982bc1.jpg","comment_is_top":false,"comment_ctime":1512622060,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14397523948","product_id":100002201,"comment_content":"我们在分布式架构下开发时，当时遇到的问题主要是数据一致性的问题，就是有些时候必须采用分布式锁实现","like_count":3},{"had_liked":false,"id":1268,"user_name":"Xiang","can_delete":false,"product_type":"c1","uid":1000070,"ip_address":"","ucode":"374744FF627C00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/86/d05de870.jpg","comment_is_top":false,"comment_ctime":1512609039,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14397510927","product_id":100002201,"comment_content":"期待下一篇文章","like_count":3},{"had_liked":false,"id":12556,"user_name":"冰糕不冰","can_delete":false,"product_type":"c1","uid":1134761,"ip_address":"","ucode":"B754FE464BA426","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","comment_is_top":false,"comment_ctime":1528909313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10118843905","product_id":100002201,"comment_content":"我司用的是golang，目前服务发现和编排还未上。只是简单的把服务分拆到了几个独立的系统里面，然后通过php自写的一个网关来管理大部分服务。","like_count":2},{"had_liked":false,"id":4090,"user_name":"missa","can_delete":false,"product_type":"c1","uid":1033417,"ip_address":"","ucode":"485CB229C4C556","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/c9/90c8a53e.jpg","comment_is_top":false,"comment_ctime":1521542061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10111476653","product_id":100002201,"comment_content":"目前比较流行的分布式，应该算是微服务了。难点是服务之间的管理，调度。","like_count":2},{"had_liked":false,"id":3761,"user_name":"秋天","can_delete":false,"product_type":"c1","uid":1057056,"ip_address":"","ucode":"A7E1D953EF7E17","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","comment_is_top":false,"comment_ctime":1520515562,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10110450154","product_id":100002201,"comment_content":"对于一些关键名词加深啦理解，从理论层面有知道啦一些知识应用","like_count":2},{"had_liked":false,"id":1474,"user_name":"A1","can_delete":false,"product_type":"c1","uid":1010873,"ip_address":"","ucode":"3886FEF9895299","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/b9/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1513211821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10103146413","product_id":100002201,"comment_content":"终于等到你详解分布式系统构建！","like_count":2},{"had_liked":false,"id":1410,"user_name":"预流","can_delete":false,"product_type":"c1","uid":1005392,"ip_address":"","ucode":"A6B7E58D564521","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/50/059dc781.jpg","comment_is_top":false,"comment_ctime":1513058432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10102993024","product_id":100002201,"comment_content":"分布式服务的经典问题，事务一致性如何做？","like_count":2},{"had_liked":false,"id":1405,"user_name":"硕根","can_delete":false,"product_type":"c1","uid":1027754,"ip_address":"","ucode":"6C8D33036F76DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/aa/5d75359c.jpg","comment_is_top":false,"comment_ctime":1513055964,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10102990556","product_id":100002201,"comment_content":"容器技术为模块提供一个轻量的封装。但是基于Java开发的业务模块，运行时需要与企业内部框架、spring、web容器等结合，封装的基础镜像十分臃肿，对微服务化非常不利。如果希望基于Java语言，对庞大的遗留业务（系统）进行云原生架构改造，有什么好的产品&#47;技术演进思路？","like_count":2,"discussions":[{"author":{"id":1401137,"avatar":"https://static001.geekbang.org/account/avatar/00/15/61/31/211ac1a9.jpg","nickname":"CalanceHao","note":"","ucode":"068B4AC4D1D402","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86750,"discussion_content":"java 9 Module？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576619931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162401,"user_name":"Arvin","can_delete":false,"product_type":"c1","uid":1340755,"ip_address":"","ucode":"3EC6A110251B63","user_header":"https://static001.geekbang.org/account/avatar/00/14/75/53/a7cbe7ec.jpg","comment_is_top":false,"comment_ctime":1576509638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871476934","product_id":100002201,"comment_content":"学习获得：<br>1.分布式系统使用的前提：系统业务扩增、加强系统可用等；<br>2.与单体应用的差异；<br>3.从 SOA的演变看分布式系统产生，以及“微服务”的出现；<br>4.微服务流行，以及PaaS支撑；<br>5.新增从分布式系统的视角理解 IoC，DIP，容器等；<br>学习反思：<br>1.如何判断系统需要使用分布式系统架构？（逻辑判断）<br>2.分布式包含微服务吗，二者如何理解区分？（没有实践过微服务）<br>学习实践：<br>1.从分布式系统架构（微服务）视角，改善现有业务系统；","like_count":1},{"had_liked":false,"id":162200,"user_name":"十里坡剑神","can_delete":false,"product_type":"c1","uid":1675980,"ip_address":"","ucode":"06DD3DFAE50CC6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIIb51lMmiapEpT1594HNrYbRevRVonBfQSHVgFdNL7jrGhCawqoqDAGrkWpvuIDaUE0UwJoHXj1pw/132","comment_is_top":false,"comment_ctime":1576476180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871443476","product_id":100002201,"comment_content":"不是特别明白现代SOA怎么工作","like_count":1},{"had_liked":false,"id":108301,"user_name":"vvsuperman","can_delete":false,"product_type":"c1","uid":1021518,"ip_address":"","ucode":"F393A3FB894124","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/4e/2acbc3a8.jpg","comment_is_top":false,"comment_ctime":1561715287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856682583","product_id":100002201,"comment_content":"看到soa-&gt; 微服务那张图，微服务中有几个内聚到小齿轮上了，这个表示注册中心么？在微服务架构中不一般都是一个注册中心么？难道还可能部署几个么？","like_count":1},{"had_liked":false,"id":103032,"user_name":"LoveDlei","can_delete":false,"product_type":"c1","uid":1102916,"ip_address":"","ucode":"68065848DF518B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/44/ec084136.jpg","comment_is_top":false,"comment_ctime":1560351869,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5855319165","product_id":100002201,"comment_content":"服务的垂直和水平拆分如何理解？","like_count":1,"discussions":[{"author":{"id":1166614,"avatar":"https://static001.geekbang.org/account/avatar/00/11/cd/16/981cc4f8.jpg","nickname":"limix","note":"","ucode":"76401FF54AE0D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587767,"discussion_content":"服务水平垂直拆分，按服务功能拆开，比如安全服务，日志服务，监控服务，按层拆，存储层服务，计算层服务，服务层拆...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663259981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"安徽"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100284,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1559522114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854489410","product_id":100002201,"comment_content":"分布式系统核心目标是增大了系统容量，加强了系统可用。通过把单体应用拆成很多微服务，从而打破系统耦合，让开发任务并行度加大，减小开发难度，提升开发速度，让快速发布快速验证成为可能。但由于开发技术的多样化，同时带来运维和部署的困难，保障系统扩容此时就需要一系列的自动监控和自动运维调度工具。","like_count":1},{"had_liked":false,"id":79267,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1553420221,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5848387517","product_id":100002201,"comment_content":"接触过ESB，也经历过系统开始的时候是单体还是微服务，对分布式认知不够，技术栈积累不够，以至于后续在系统研发过程中比较痛苦，还没有起到理想的效果。微服务是演进而来的。","like_count":1},{"had_liked":false,"id":42856,"user_name":"蜉蝣","can_delete":false,"product_type":"c1","uid":1229070,"ip_address":"","ucode":"77CF92496855D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/0e/2b987d54.jpg","comment_is_top":false,"comment_ctime":1543063165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838030461","product_id":100002201,"comment_content":"从这上一节开始，很多东西都看不懂了。还只是实习两个月的大四学生，得好好努力。","like_count":1},{"had_liked":false,"id":39169,"user_name":"Geek_fb3db2","can_delete":false,"product_type":"c1","uid":1218254,"ip_address":"","ucode":"8089B8311B6C80","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/ce/8c3bdbe5.jpg","comment_is_top":false,"comment_ctime":1542202492,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5837169788","product_id":100002201,"comment_content":"也在探索微服务 但未使用 目前正在使用组件化开发 把独立大功能模块抽象为组件","like_count":1},{"had_liked":false,"id":24935,"user_name":"FeiFei","can_delete":false,"product_type":"c1","uid":1045586,"ip_address":"","ucode":"01CD655DD4E56C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/52/10c4d863.jpg","comment_is_top":false,"comment_ctime":1537231720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5832199016","product_id":100002201,"comment_content":"老的单体应用模块之间耦合过于复杂，在进行拆解时对于拆解粒度，拆解范围都有待商榷。<br>系统采用Remoting通讯，拆解时是否采用RESTFul等问题都需要考量。","like_count":1},{"had_liked":false,"id":11583,"user_name":"Geek_5a4b38","can_delete":false,"product_type":"c1","uid":1144413,"ip_address":"","ucode":"0C96D062DB6692","user_header":"","comment_is_top":false,"comment_ctime":1528213082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5823180378","product_id":100002201,"comment_content":"微服务的耦合性也好强呀，服务和服务之间rpc调用太高了","like_count":1},{"had_liked":false,"id":11414,"user_name":"lundi","can_delete":false,"product_type":"c1","uid":1003106,"ip_address":"","ucode":"FDFC5D4066273D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/62/65466407.jpg","comment_is_top":false,"comment_ctime":1528123017,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5823090313","product_id":100002201,"comment_content":"我想问问耗子哥，目前流行的微服务架构具体到了一个单体架构的系统时该怎么拆解？很多人说要学会DDD，根据领域进行拆解。可是实操时发现这个并不好用。不知大神们有什么好的建议？","like_count":1},{"had_liked":false,"id":1508,"user_name":"湖心亭看雪","can_delete":false,"product_type":"c1","uid":1023363,"ip_address":"","ucode":"88BAEBA964B6BC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/83/968da410.jpg","comment_is_top":false,"comment_ctime":1513304089,"is_pvip":false,"replies":[{"id":"120","content":"请关注后继文章","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1513656591,"ip_address":"","comment_id":1508,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5808271385","product_id":100002201,"comment_content":"能不能讲讲微服务的调用链追踪呢？","like_count":1,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415434,"discussion_content":"请关注后继文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1513656591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1274,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1020010,"ip_address":"","ucode":"2CE3A527F6712E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLCeXf2XYOatT9fxOaJfhQ2ETIMZ9vxqbpQSOaynP5ERcATzo1G77hhYCPXUR6kC3iaC9gfXZespdzw/132","comment_is_top":false,"comment_ctime":1512614278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5807581574","product_id":100002201,"comment_content":"事件的时序是不是可以讲讲","like_count":1},{"had_liked":false,"id":334543,"user_name":"ipofss","can_delete":false,"product_type":"c1","uid":1018620,"ip_address":"","ucode":"DE3061C9259F9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","comment_is_top":false,"comment_ctime":1644994969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644994969","product_id":100002201,"comment_content":"耗子哥，你的文章值得反复看。同一篇文章，当时看，过一年再看，过两年再看，都会有新收获","like_count":0},{"had_liked":false,"id":320116,"user_name":"刘勇","can_delete":false,"product_type":"c1","uid":2003326,"ip_address":"","ucode":"4776CC4D2821FD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/91/7e/4bb77d45.jpg","comment_is_top":false,"comment_ctime":1636085851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636085851","product_id":100002201,"comment_content":"耗子哥，这个微服务与分布式是什么关系？","like_count":0},{"had_liked":false,"id":315961,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1634087958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634087958","product_id":100002201,"comment_content":"在2018年参与改造公司的服务架构，难点就是服务边界的划分，外部系统依赖的改造，调用点的收拢铲除。以及现在阶段的服务治理问题","like_count":0},{"had_liked":false,"id":313951,"user_name":"Hugh","can_delete":false,"product_type":"c1","uid":1324363,"ip_address":"","ucode":"41DFAEC169B856","user_header":"https://static001.geekbang.org/account/avatar/00/14/35/4b/7c7eeb56.jpg","comment_is_top":false,"comment_ctime":1632752210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632752210","product_id":100002201,"comment_content":"高手就是高手，名不虚传！这也是在极客时间购买最贵的课程，试听了三节课才购买的，感觉超值！以前是做网络系统集成，现在想转行做软件，希望自己能坚持下去，也能做一名自由软件工作者。听完今天的课程有几点感触：<br>1、经常在网上看到分布式架构，也经常看到Kubernetes、DevOps、SOAP等等各种名词，却不知道他们之间的关系；<br>2、这个世界上不存在完美的技术方案，我们需要清楚地知道分布式系统所带来的问题；<br>3、最近在学习Spring Cloud，希望能跟打卡一起坚持下去，理论联系实际，早日实现技术变现，哈哈。","like_count":0},{"had_liked":false,"id":313946,"user_name":"刘彩虹","can_delete":false,"product_type":"c1","uid":2441363,"ip_address":"","ucode":"37E4E1C0AAFEEB","user_header":"https://static001.geekbang.org/account/avatar/00/25/40/93/bb5c734a.jpg","comment_is_top":false,"comment_ctime":1632749894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632749894","product_id":100002201,"comment_content":"知道了一下分布式的概念及发展历程～","like_count":0},{"had_liked":false,"id":242912,"user_name":"森林木","can_delete":false,"product_type":"c1","uid":1220089,"ip_address":"","ucode":"79A06FCC43673B","user_header":"https://static001.geekbang.org/account/avatar/00/12/9d/f9/b98d9c40.jpg","comment_is_top":false,"comment_ctime":1597890517,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1597890517","product_id":100002201,"comment_content":"我们项目在一开始的时候过于细分服务了，导致后来在维护和调用的时候异常痛苦，尤其是跨服务的事务。后来又把很多服务合并在一起了，事实告诉我们不要开始的时候过度设计。","like_count":0},{"had_liked":false,"id":231109,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1593586575,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593586575","product_id":100002201,"comment_content":"请问老师，“所以，我们需要垂直或是水平拆分业务系统，让其变成一个分布式的架构。”应该怎么理解呢？ 集群部署是否属于单体架构？ ","like_count":0},{"had_liked":false,"id":220962,"user_name":"Geek_7b1383","can_delete":false,"product_type":"c1","uid":1310716,"ip_address":"","ucode":"A2F03709F77122","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLndPicaib35sSOgGib8iafFBq8B0hoBO3Bfp3QViblYQ669lRFjPD1RSX2rDibmElID00l5oWokhuZBJnw/132","comment_is_top":false,"comment_ctime":1590367646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590367646","product_id":100002201,"comment_content":"架构设计变得复杂（尤其是其中的分布式事务）。<br>部署单个服务会比较快，但是如果一次部署需要多个服务，流程会变得复杂。<br>系统的吞吐量会变大，但是响应时间会变长。<br>运维复杂度会因为服务变多而变得很复杂。<br>架构复杂导致学习曲线变大。<br>测试和查错的复杂度增大（集成测试）。<br>技术多元化，这会带来维护和运维的复杂度。<br>管理分布式系统中的服务和调度变得困难和复杂。","like_count":0},{"had_liked":false,"id":220216,"user_name":"爱学习的大叔","can_delete":false,"product_type":"c1","uid":1085152,"ip_address":"","ucode":"91F9ABF1EC98D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/e0/847348b1.jpg","comment_is_top":false,"comment_ctime":1590207579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590207579","product_id":100002201,"comment_content":"构造分布式架构业务体量上来才可以，一般传统行业不会让大刀阔斧的让来改造。反而改造完了，人力物力投入了。但是带来的业务提升也不会有提高。还是业务体量跟不上。","like_count":0},{"had_liked":false,"id":212116,"user_name":"ɴɪᴋᴇʀ","can_delete":false,"product_type":"c1","uid":1616622,"ip_address":"","ucode":"DB7D92CBB5FD15","user_header":"https://static001.geekbang.org/account/avatar/00/18/aa/ee/15c328ca.jpg","comment_is_top":false,"comment_ctime":1588061430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588061430","product_id":100002201,"comment_content":"服务化过程中代码层面需要注意以下几点1.序列化。接口的入参出参需要序列化;之前在单体应用中适用的service接口，可能不适用远程调用，需要改造，如匿名函数作为参数的接口。2.既当入参又当出参的接口，在服务化后，不再适用，需要改造。即调用更新接口后，需要调用查询接口以返回正确的值。3.服务化后，要考虑写接口是否是幂等。4.考虑接口超时，设置合理的超时时间。","like_count":0},{"had_liked":false,"id":211059,"user_name":"Geek_ab239c","can_delete":false,"product_type":"c1","uid":1714051,"ip_address":"","ucode":"74B1483839EBE2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/M17Xuml8YibVkRdtKeN3qpBicBRnYzpxFqJClxg9FwxufxXNcO8VqrUKCKsicjxwWlrODge3QuVXcw6iazFsf83zug/132","comment_is_top":false,"comment_ctime":1587889422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587889422","product_id":100002201,"comment_content":"K8s是不是已经成为下一个必会的技能了？","like_count":0},{"had_liked":false,"id":211008,"user_name":"Geek_dwq","can_delete":false,"product_type":"c1","uid":1817279,"ip_address":"","ucode":"7DC6BFCF746787","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wI2LwgvwseNqXwkF67zicD9UXBSle9DPhmL6uyKG9Nib6NLfU3OuKYuSQ4DHCWxIQecnqell2vKVvNX8boox0B8w/132","comment_is_top":false,"comment_ctime":1587880734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587880734","product_id":100002201,"comment_content":"努力学习中...","like_count":0},{"had_liked":false,"id":210465,"user_name":"Geek_130e9e","can_delete":false,"product_type":"c1","uid":1587628,"ip_address":"","ucode":"518AAF2F228C17","user_header":"","comment_is_top":false,"comment_ctime":1587756532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587756532","product_id":100002201,"comment_content":"需要分布式系统，而不是传统的单体架构，下一步分布式系统架构的技术难点及应对方案就要提到议事日程了吧","like_count":0},{"had_liked":false,"id":210375,"user_name":"Johnny","can_delete":false,"product_type":"c1","uid":1809156,"ip_address":"","ucode":"E3BD0D9ABF2710","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/p83UpvULG4E9MbCfmia1OcUEu67eTOdWjednKu3N2FuAqxUqtyI9JCxf2Wmic39vwrAx55iakEEzNhLWE28bOvHyw/132","comment_is_top":false,"comment_ctime":1587732082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587732082","product_id":100002201,"comment_content":"我感觉微服务的两个难点是服务如果拆分和整体架构工具栈选型和部署。这些都需要大量的权衡和经验积累。文章中对IBM的SOA说的太好了，包括之前的EJB在内。虽然很多技术各有所长，没有银弹。但是，太重的技术是注定要被淘汰的。","like_count":1},{"had_liked":false,"id":171927,"user_name":"meijing0114","can_delete":false,"product_type":"c1","uid":1012416,"ip_address":"","ucode":"B349D33E2F3ECC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/c0/b09911a0.jpg","comment_is_top":false,"comment_ctime":1579054406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579054406","product_id":100002201,"comment_content":"遇到的问题主要是开发语言没有很好的微服务解决方案，需要做大量改造才能接入到实际的微服务架构中。包括通信协议的兼容，服务发现，监控上报，日志接入，服务监控，接入发布平台等一系列的问题。","like_count":1},{"had_liked":false,"id":162503,"user_name":"jerry","can_delete":false,"product_type":"c1","uid":1032859,"ip_address":"","ucode":"525F24CD2FBB0F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c2/9b/75ba46ad.jpg","comment_is_top":false,"comment_ctime":1576546248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576546248","product_id":100002201,"comment_content":"有demo上手的话比较好理解","like_count":0},{"had_liked":false,"id":162358,"user_name":"Geek_3.3","can_delete":false,"product_type":"c1","uid":1784431,"ip_address":"","ucode":"E8188BCBFD10AB","user_header":"","comment_is_top":false,"comment_ctime":1576503935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576503935","product_id":100002201,"comment_content":"对单体应用进行拆解，做服务化的过程中，遇到的主要问题是：<br>1. 如何确立拆分的原则，把握拆分的粒度？水平和垂直拆分该如何选择？个人理解只有深入到具体的业务中去，才能把握好分寸。不知是否有一些实践原则可以借鉴。<br>2. 部署和发布的效率问题。上线的过程是一个比较耗时耗精力的过程，该如何高效、安全、可靠的实现发布部署呢？","like_count":0},{"had_liked":false,"id":162344,"user_name":"洪桂全","can_delete":false,"product_type":"c1","uid":1203896,"ip_address":"","ucode":"23004365A30BB7","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/b8/310933d7.jpg","comment_is_top":false,"comment_ctime":1576501950,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576501950","product_id":100002201,"comment_content":"1、单体应用吞吐量低、扩展性差，满足不了现今高性能的互联网应用要求，所以需要分布式架构。<br>2、把服务拆分为多个子服务的好处<br>（1）提高能应用的吞吐量。数据库操作，网络请求分散到各个服务中，降低每个服务的负载压力，从而为更多用户提供服务。<br>（2）提高可用性，提供某种功能的其中一个服务挂掉，不影响该功能使用，应用整体不受影响。<br>3、取舍，分布式架构的缺点。<br>（1）部署及维护难度增加<br>（2）学习及设计的难度增加<br>4、spring生态及k8s容器化等基础设施的辅助使得微服务的发展与实现有了基础","like_count":0},{"had_liked":false,"id":162329,"user_name":"Geek_a95326","can_delete":false,"product_type":"c1","uid":1103082,"ip_address":"","ucode":"02CD9929766EE5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erhoVfUiaSk1lpZbIZ2UlIr4c7ae1U5EgYkDE7rYGY8lMauGg027C7bUV01yJiaVXRFC69iasYczQZRQ/132","comment_is_top":false,"comment_ctime":1576500859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576500859","product_id":100002201,"comment_content":"业务发展初期对未来业务的遇见不够，导致随着业务的发展系统越来越重，各模块之间依赖也越来越复杂，最后不得不采用微服务的的方法来进行重构，重构主要有这么几个思路：将引擎能力、权限服务、基础服务统一下沉，不同的模块之间只能单向依赖不能重复依赖，这样重构完后系统的可扩展性和可复用性提升了很多，业务逻辑也变的更加清晰","like_count":1},{"had_liked":false,"id":162312,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1576498704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576498704","product_id":100002201,"comment_content":"参加老师的打卡活动，学习笔记 https:&#47;&#47;mubu.com&#47;colla&#47;8Cssh8BFRM","like_count":0},{"had_liked":false,"id":162287,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1576492548,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576492548","product_id":100002201,"comment_content":"读了两遍 有些还是看不懂, 继续学习,查资料 , 打个卡","like_count":0},{"had_liked":false,"id":134721,"user_name":"摩羯行僧","can_delete":false,"product_type":"c1","uid":1142377,"ip_address":"","ucode":"4B481F8B1ED7B6","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/69/8ed686c7.jpg","comment_is_top":false,"comment_ctime":1568903478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568903478","product_id":100002201,"comment_content":"对单体应用进行拆解，做服务化的过程中，遇到的主要问题是：<br>1. 如何确立拆分的原则，把握拆分的粒度？水平和垂直拆分该如何选择？个人理解只有深入到具体的业务中去，才能把握好分寸。不知是否有一些实践原则可以借鉴。<br>2. 部署和发布的效率问题。上线的过程是一个比较耗时耗精力的过程，该如何高效、安全、可靠的实现发布部署呢？","like_count":0},{"had_liked":false,"id":123886,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1565777150,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1565777150","product_id":100002201,"comment_content":"因为单体架构的性能容量问题，系统被横向纵向拆分，当服务拆分越来越多，量变引起质变，服务的统一运维部署就成了问题，微服务的相关技术应运而生。","like_count":0},{"had_liked":false,"id":11322,"user_name":"simon.jiang","can_delete":false,"product_type":"c1","uid":1035823,"ip_address":"","ucode":"215DFAB2F37DDA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/2f/d8a541cf.jpg","comment_is_top":false,"comment_ctime":1528071675,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1528071675","product_id":100002201,"comment_content":"总结得很好","like_count":0},{"had_liked":false,"id":8417,"user_name":"来","can_delete":false,"product_type":"c1","uid":1048433,"ip_address":"","ucode":"2612C1D888ED03","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ff/71/c492b7fa.jpg","comment_is_top":false,"comment_ctime":1526195689,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1526195689","product_id":100002201,"comment_content":"目前系统拆分，服务化后面对的主要问题如下：<br>1、一致性问题，事务一致性，如何保证两个跨库的事务都执行成功，还有就是跨库的查询，需要将之前一个连接sql拆分为多个sql，然后通过服务来查询数据<br>2、当服务多了后，如何进行服务治理、调度<br>3、服务依赖，jar包版本管理，防止jar包冲突<br>","like_count":0},{"had_liked":false,"id":7488,"user_name":"alpha","can_delete":false,"product_type":"c1","uid":1084887,"ip_address":"","ucode":"B70F4029E6297A","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/d7/42bbcf6e.jpg","comment_is_top":false,"comment_ctime":1525492948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525492948","product_id":100002201,"comment_content":"mark","like_count":0},{"had_liked":false,"id":5726,"user_name":"qimiguang","can_delete":false,"product_type":"c1","uid":1001275,"ip_address":"","ucode":"B95CC4A96D932F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/3b/963a3a80.jpg","comment_is_top":false,"comment_ctime":1523873688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1523873688","product_id":100002201,"comment_content":"可以结合《Building microservices》一起读","like_count":0},{"had_liked":false,"id":3896,"user_name":"神丸","can_delete":false,"product_type":"c1","uid":1047838,"ip_address":"","ucode":"662367EC8CC6D6","user_header":"","comment_is_top":false,"comment_ctime":1520931763,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1520931763","product_id":100002201,"comment_content":"如何理解单体系统响应时间快，吞吐量小，分布式系统响应时间慢，吞吐量大？不是响应时间越快，吞吐量越大吗？","like_count":0,"discussions":[{"author":{"id":1401137,"avatar":"https://static001.geekbang.org/account/avatar/00/15/61/31/211ac1a9.jpg","nickname":"CalanceHao","note":"","ucode":"068B4AC4D1D402","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86757,"discussion_content":"我也对于说响应时间慢这一点很茫然，研究了一下。\n\n【QPS】 每秒钟处理完请求的次数；注意这里是处理完。具体是指发出请求到服务器处理完成功返回结果。可以理解在server中有个counter，每处理一个请求加1，1秒后counter=QPS。\n【TPS】每秒钟处理完的事务次数；\n一般TPS是对整个系统来讲的。一个应用系统1s能完成多少事务处理，一个事务在分布式处理中，可能会对应多个请求，对于衡量单个接口服务的处理能力，用QPS比较多。\n【并发量】系统能同时处理的请求数\n【吞吐量】一次性能测试过程中网络上传输的数据量的总和。\n以不同的方式表达的吞吐量可以说明不同层次的问题。例如，以字节数/秒方式表示的吞吐量主要受网络基础设置、服务器架构、应用服务器制约；以请求数/秒方式表示的吞吐量主要受应用服务器和应用代码的制约。\n【RT·响应时间】处理一次请求所需要的平均处理时间\n\n文章讲到的地方，隐藏条件是系统暂时是固定的。即假设QPS不变，那么根据公式 QPS = 并发量 / 平均响应时间，显然可证同时需要处理的请求增加，则响应时间增加(变慢)😉","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576621391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2651290,"avatar":"https://static001.geekbang.org/account/avatar/00/28/74/9a/580d35a5.jpg","nickname":"用户7437721993","note":"","ucode":"0E16E6CFA4D225","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379045,"discussion_content":"我觉得应该不是这个解释，以前单体架构处理一个请求或事务都在一个进程里，现在需要在多个微服务之间互相协作才能完成，微服务的物理位置是不受限制，之间通讯网络时延是主要影响因素之一，再加上需要一些消息中间件，任务多的时候消息队列的积压都是有影响的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623642412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":2252,"user_name":"阿亮","can_delete":false,"product_type":"c1","uid":1043579,"ip_address":"","ucode":"B9C04E0345299B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/7b/708a8734.jpg","comment_is_top":false,"comment_ctime":1516501557,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1516501557","product_id":100002201,"comment_content":"耗子哥，文中(“编排和组织引擎可以是工作流引擎，也可以是网关”）提到的工作流引擎，有哪些开源的软件吗？","like_count":0},{"had_liked":false,"id":2044,"user_name":"多啦A嘉","can_delete":false,"product_type":"c1","uid":1042138,"ip_address":"","ucode":"7DD3E371083FCA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e6/da/4bb97cd8.jpg","comment_is_top":false,"comment_ctime":1515631737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1515631737","product_id":100002201,"comment_content":"写的非常清楚！多谢！","like_count":0},{"had_liked":false,"id":1978,"user_name":"knull","can_delete":false,"product_type":"c1","uid":1043484,"ip_address":"","ucode":"3BFECF3D29F40C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/1c/d323b066.jpg","comment_is_top":false,"comment_ctime":1515337038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1515337038","product_id":100002201,"comment_content":"求教，SOA(ESB)和微服务的区别是什么呢？感觉好类似","like_count":0},{"had_liked":false,"id":1516,"user_name":"喻桃勋","can_delete":false,"product_type":"c1","uid":1005542,"ip_address":"","ucode":"5147027E0AD146","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/e6/1ae417bf.jpg","comment_is_top":false,"comment_ctime":1513321416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1513321416","product_id":100002201,"comment_content":"我们目前在对一个运行了6年的巨大单体系统进行服务化，目前遇到了以下几方面的问题: 1. 人员组织安排  2.团队成员思维认知提升 3. 服务边界怎么划分，粒度如何定义 4. 异地多团队如何协同 5.服务如何治理 等等一系列问题","like_count":0},{"had_liked":false,"id":1277,"user_name":"yafei","can_delete":false,"product_type":"c1","uid":1003298,"ip_address":"","ucode":"B60FF5DFF96538","user_header":"","comment_is_top":false,"comment_ctime":1512618654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1512618654","product_id":100002201,"comment_content":"最期盼的系列文章，感谢皓哥","like_count":0},{"had_liked":false,"id":1266,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1024763,"ip_address":"","ucode":"F6B5C64BC99FB7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/fb/94af9cf1.jpg","comment_is_top":false,"comment_ctime":1512608520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1512608520","product_id":100002201,"comment_content":"很期待这个系列啊！","like_count":0},{"had_liked":false,"id":1263,"user_name":"郎哲","can_delete":false,"product_type":"c1","uid":1007926,"ip_address":"","ucode":"EE2F5F061E2F7A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/61/36/343a8ef8.jpg","comment_is_top":false,"comment_ctime":1512606180,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1512606180","product_id":100002201,"comment_content":"老师，我们采用的语言本身就是基于分布式设计的Erlang研发的，实践起来比较容易。踩到一个小坑，服务器有好多定时任务。这些任务会在集群中每个节点上运行，会导致执行N次。这时就不得不选出一个节点专门执行，其他节点监控执行节点，一旦执行节点出现故障其他节点一台节点要自动接管执行任务。","like_count":0,"discussions":[{"author":{"id":2651290,"avatar":"https://static001.geekbang.org/account/avatar/00/28/74/9a/580d35a5.jpg","nickname":"用户7437721993","note":"","ucode":"0E16E6CFA4D225","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379046,"discussion_content":"这个k8s就可以保障","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623642614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1440185,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f9/b9/21b0553f.jpg","nickname":"叶少波","note":"","ucode":"CDF3DEEC7DFEA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50472,"discussion_content":"用erlang怎么在避免脑裂的前提下选出一个主节点？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573724637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1258,"user_name":"zcom","can_delete":false,"product_type":"c1","uid":1017059,"ip_address":"","ucode":"70507B19E5B581","user_header":"","comment_is_top":false,"comment_ctime":1512603040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1512603040","product_id":100002201,"comment_content":"相当期待下一篇！","like_count":0}]}