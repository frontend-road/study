{"id":111172,"title":"41 | 理解内存（下）：解析TLB和内存保护","content":"<p>机器指令里面的内存地址都是虚拟内存地址。程序里面的每一个进程，都有一个属于自己的虚拟内存地址空间。我们可以通过地址转换来获得最终的实际物理地址。我们每一个指令都存放在内存里面，每一条数据都存放在内存里面。因此，“地址转换”是一个非常高频的动作，“地址转换”的性能就变得至关重要了。这就是我们今天要讲的<strong>第一个问题</strong>，也就是<strong>性能问题</strong>。</p><p>因为我们的指令、数据都存放在内存里面，这里就会遇到我们今天要谈的<strong>第二个问题</strong>，也就是<strong>内存安全问题</strong>。如果被人修改了内存里面的内容，我们的CPU就可能会去执行我们计划之外的指令。这个指令可能是破坏我们服务器里面的数据，也可能是被人获取到服务器里面的敏感信息。</p><p>现代的CPU和操作系统，会通过什么样的方式来解决这两个问题呢？别着急，等讲完今天的内容，你就知道答案了。</p><h2>加速地址转换：TLB</h2><p>上一节我们说了，从虚拟内存地址到物理内存地址的转换，我们通过页表这个数据结构来处理。为了节约页表的内存存储空间，我们会使用多级页表数据结构。</p><p>不过，多级页表虽然节约了我们的存储空间，但是却带来了时间上的开销，变成了一个“以时间换空间”的策略。原本我们进行一次地址转换，只需要访问一次内存就能找到物理页号，算出物理内存地址。但是用了4级页表，我们就需要访问4次内存，才能找到物理页号。</p><!-- [[[read_end]]] --><p>我们知道，内存访问其实比Cache要慢很多。我们本来只是要做一个简单的地址转换，现在反而要一下子多访问好多次内存。这种情况该怎么处理呢？你是否还记得之前讲过的“加个缓存”的办法呢？我们来试一试。</p><p>程序所需要使用的指令，都顺序存放在虚拟内存里面。我们执行的指令，也是一条条顺序执行下去的。也就是说，我们对于指令地址的访问，存在前面几讲所说的“空间局部性”和“时间局部性”，而需要访问的数据也是一样的。我们连续执行了5条指令。因为内存地址都是连续的，所以这5条指令通常都在同一个“虚拟页”里。</p><p>因此，这连续5次的内存地址转换，其实都来自于同一个虚拟页号，转换的结果自然也就是同一个物理页号。那我们就可以用前面几讲说过的，用一个“加个缓存”的办法。把之前的内存转换地址缓存下来，使得我们不需要反复去访问内存来进行内存地址转换。</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/27/ef754d9b2c816acff1dad63875ffea27.jpeg?wh=2356*1555\" alt=\"\"></p><p>于是，计算机工程师们专门在CPU里放了一块缓存芯片。这块缓存芯片我们称之为<strong>TLB</strong>，全称是<strong>地址变换高速缓冲</strong>（Translation-Lookaside Buffer）。这块缓存存放了之前已经进行过地址转换的查询结果。这样，当同样的虚拟地址需要进行地址转换的时候，我们可以直接在TLB里面查询结果，而不需要多次访问内存来完成一次转换。</p><p>TLB和我们前面讲的CPU的高速缓存类似，可以分成指令的TLB和数据的TLB，也就是<strong>ITLB</strong>和<strong>DTLB</strong>。同样的，我们也可以根据大小对它进行分级，变成L1、L2这样多层的TLB。</p><p>除此之外，还有一点和CPU里的高速缓存也是一样的，我们需要用脏标记这样的标记位，来实现“写回”这样缓存管理策略。</p><p><img src=\"https://static001.geekbang.org/resource/image/43/d9/432050446f68569a37c7699cccda75d9.jpeg?wh=1969*1300\" alt=\"\"></p><p>为了性能，我们整个内存转换过程也要由硬件来执行。在CPU芯片里面，我们封装了内存管理单元（MMU，Memory Management Unit）芯片，用来完成地址转换。和TLB的访问和交互，都是由这个MMU控制的。</p><h2>安全性与内存保护</h2><p>讲完了虚拟内存和物理内存的转换，我们来看看内存保护和安全性的问题。</p><p>进程的程序也好，数据也好，都要存放在内存里面。实际程序指令的执行，也是通过程序计数器里面的地址，去读取内存内的内容，然后运行对应的指令，使用相应的数据。</p><p>虽然我们现代的操作系统和CPU，已经做了各种权限的管控。正常情况下，我们已经通过虚拟内存地址和物理内存地址的区分，隔离了各个进程。但是，无论是CPU这样的硬件，还是操作系统这样的软件，都太复杂了，难免还是会被黑客们找到各种各样的漏洞。</p><p>就像我们在软件开发过程中，常常会有一个“兜底”的错误处理方案一样，在对于内存的管理里面，计算机也有一些最底层的安全保护机制。这些机制统称为<strong>内存保护</strong>（Memory Protection）。我这里就为你简单介绍两个。</p><h3>可执行空间保护</h3><p>第一个常见的安全机制，叫<strong>可执行空间保护</strong>（Executable Space Protection）。</p><p>这个机制是说，我们对于一个进程使用的内存，只把其中的指令部分设置成“可执行”的，对于其他部分，比如数据部分，不给予“可执行”的权限。因为无论是指令，还是数据，在我们的CPU看来，都是二进制的数据。我们直接把数据部分拿给CPU，如果这些数据解码后，也能变成一条合理的指令，其实就是可执行的。</p><p>这个时候，黑客们想到了一些搞破坏的办法。我们在程序的数据区里，放入一些要执行的指令编码后的数据，然后找到一个办法，让CPU去把它们当成指令去加载，那CPU就能执行我们想要执行的指令了。对于进程里内存空间的执行权限进行控制，可以使得CPU只能执行指令区域的代码。对于数据区域的内容，即使找到了其他漏洞想要加载成指令来执行，也会因为没有权限而被阻挡掉。</p><p>其实，在实际的应用开发中，类似的策略也很常见。我下面给你举两个例子。</p><p>比如说，在用PHP进行Web开发的时候，我们通常会禁止PHP有eval函数的执行权限。这个其实就是害怕外部的用户，所以没有把数据提交到服务器，而是把一段想要执行的脚本提交到服务器。服务器里在拼装字符串执行命令的时候，可能就会执行到预计之外被“注入”的破坏性脚本。这里我放了一个例子，用这个办法可以去删除服务器上的数据。</p><pre><code>script.php?param1=xxx\n\n//我们的PHP接受一个传入的参数，这个参数我们希望提供计算功能\n</code></pre><pre><code>$code = eval($_GET[&quot;param1&quot;]);\n// 我们直接通过 eval 计算出来对应的参数公式的计算结果\n</code></pre><pre><code>script.php?param1=&quot;;%20echo%20exec('rm -rf ~/');%20//\n// 用户传入的参数里面藏了一个命令\n</code></pre><pre><code>$code = &quot;&quot;; echo exec('rm -rf ~/'); //&quot;;\n// 执行的结果就变成了删除服务器上的数据\n</code></pre><p>还有一个例子就是SQL注入攻击。如果服务端执行的SQL脚本是通过字符串拼装出来的，那么在Web请求里面传输的参数就可以藏下一些我们想要执行的SQL，让服务器执行一些我们没有想到过的SQL语句。这样的结果就是，或者破坏了数据库里的数据，或者被人拖库泄露了数据。</p><h3>地址空间布局随机化</h3><p>第二个常见的安全机制，叫<strong>地址空间布局随机化</strong>（Address Space Layout Randomization）。</p><p>内存层面的安全保护核心策略，是在可能有漏洞的情况下进行安全预防。上面的可执行空间保护就是一个很好的例子。但是，内存层面的漏洞还有其他的可能性。</p><p>这里的核心问题是，其他的人、进程、程序，会去修改掉特定进程的指令、数据，然后，让当前进程去执行这些指令和数据，造成破坏。要想修改这些指令和数据，我们需要知道这些指令和数据所在的位置才行。</p><p>原先我们一个进程的内存布局空间是固定的，所以任何第三方很容易就能知道指令在哪里，程序栈在哪里，数据在哪里，堆又在哪里。这个其实为想要搞破坏的人创造了很大的便利。而地址空间布局随机化这个机制，就是让这些区域的位置不再固定，在内存空间随机去分配这些进程里不同部分所在的内存空间地址，让破坏者猜不出来。猜不出来呢，自然就没法找到想要修改的内容的位置。如果只是随便做点修改，程序只会crash掉，而不会去执行计划之外的代码。</p><p><img src=\"https://static001.geekbang.org/resource/image/db/b9/dbda1bd1d43d6fa9d7b552ca57d223b9.jpeg?wh=1366*1501\" alt=\"\"></p><p>这样的“随机化”策略，其实也是我们日常应用开发中一个常见的策略。一个大家都应该接触过的例子就是密码登陆功能。网站和App都会需要你设置用户名和密码，之后用来登陆自己的账号。然后，在服务器端，我们会把用户名和密码保存下来，在下一次用户登陆的时候，使用这个用户名和密码验证。</p><p>我们的密码当然不能明文存储在数据库里，不然就会有安全问题。如果明文存储在数据库里，意味着能拿到数据库访问权限的人，都能看到用户的明文密码。这个可能是因为安全漏洞导致被人拖库，而且网站的管理员也能直接看到所有的用户名和密码信息。</p><p>比如，前几年CSDN就发生过被人拖库的事件。虽然用户名和密码都是明文保存的，别人如果只是拿到了CSDN网站的用户名密码，用户的损失也不会太大。但是很多用户可能会在不同的网站使用相同的密码，如果拿到这些用户名和密码的人，能够成功登录用户的银行、支付、社交等等其他网站的话，用户损失就大了去了。</p><p>于是，大家会在数据库里存储密码的哈希值，比如用现在常用的SHA256，生成一一个验证的密码哈希值。但是这个往往还是不够的。因为同样的密码，对应的哈希值都是相同的，大部分用户的密码又常常比较简单。于是，拖库成功的黑客可以通过<a href=\"https://zh.wikipedia.org/wiki/%E5%BD%A9%E8%99%B9%E8%A1%A8\">彩虹表</a>的方式，来推测出用户的密码。</p><p>这个时候，我们的“随机化策略”就可以用上了。我们可以在数据库里，给每一个用户名生成一个随机的、使用了各种特殊字符的<strong>盐值</strong>（Salt）。这样，我们的哈希值就不再是仅仅使用密码来生成的了，而是密码和盐值放在一起生成的对应的哈希值。哈希值的生成中，包括了一些类似于“乱码”的随机字符串，所以通过彩虹表碰撞来猜出密码的办法就用不了了。</p><pre><code>$password = &quot;goodmorning12345&quot;;\n// 我们的密码是明文存储的\n\n$hashed_password = hash('sha256', password);\n// 对应的hash值是 054df97ac847f831f81b439415b2bad05694d16822635999880d7561ee1b77ac\n// 但是这个hash值里可以用彩虹表直接“猜出来”原始的密码就是goodmorning12345\n\n$salt = &quot;#21Pb$Hs&amp;Xi923^)?&quot;;\n$salt_password = $salt.$password;\n$hashed_salt_password = hash('sha256', salt_password);\n// 这个hash后的slat因为有部分随机的字符串，不会在彩虹表里面出现。\n// 261e42d94063b884701149e46eeb42c489c6a6b3d95312e25eee0d008706035f\n</code></pre><p>可以看到，通过加入“随机”因素，我们有了一道最后防线。即使在出现安全漏洞的时候，我们也有了更多的时间和机会去补救这些问题。</p><p>虽然安全机制似乎在平时用不太到，但是在开发程序的时候，还是要有安全意识。毕竟谁也不想看到，被拖库的新闻里出现的是自己公司的名字，也不希望用户因为我们的错误遭受到损失。</p><h2>总结延伸</h2><p>为了节约页表所需要的内存空间，我们采用了多级页表这样一个数据结构。但是，多级页表虽然节省空间了，却要花费更多的时间去多次访问内存。于是，我们在实际进行地址转换的MMU旁边放上了TLB这个用于地址转换的缓存。TLB也像CPU Cache一样，分成指令和数据部分，也可以进行L1、L2这样的分层。</p><p>然后，我为你介绍了内存保护。无论是数据还是代码，我们都要存放在内存里面。为了防止因为各种漏洞，导致一个进程可以访问别的进程的数据或者代码，甚至是执行对应的代码，造成严重的安全问题，我们介绍了最常用的两个内存保护措施，可执行空间保护和地址空间布局随机化。</p><p>通过让数据空间里面的内容不能执行，可以避免了类似于“注入攻击”的攻击方式。通过随机化内存空间的分配，可以避免让一个进程的内存里面的代码，被推测出来，从而不容易被攻击。</p><h2>推荐阅读</h2><p>对于内存保护的相关知识，你可以通过<a href=\"https://en.wikipedia.org/wiki/Memory_protection#Capability-based_addressing\">Wikipedia里面的相关条目</a>来进一步了解相关的信息。</p><p>另外，2017年暴露出来的<a href=\"https://zh.wikipedia.org/wiki/%E5%B9%BD%E7%81%B5%E6%BC%8F%E6%B4%9E\">Spectre和Meltdown漏洞</a>的相关原理，你也可以在Wikipedia里面找到相关的信息，来了解一下。</p><p>Spectre和Meltdown漏洞，出现在CPU的高速缓存和虚拟机结合的层面。理解这个漏洞，可以让你看到，安全问题是如何出现各种让人难以想到的结果。这也是为什么我们需要可执行空间保护和地址空间布局，随机化这样的“防卫性”的安全策略。即使我们不知道漏洞可以从哪里来，即使漏洞可能已经发生了，这些策略也能够使得我们的系统更不容易被攻破。</p><h2>课后思考</h2><p>除了我们今天说的可执行空间保护和地址空间布局随机化之外，你还知道其他内存保护策略吗？你想到的这些内存保护策略，和你日常的开发工作中，是否也有类似思路的应用呢？</p><p>欢迎留言和我分享你日常开发中用到的内存保护策略，如果这篇文章对你有帮助，你也可以把它分享给你的朋友，和他一起讨论和学习。</p><p></p>","comments":[{"had_liked":false,"id":140222,"user_name":"zaab","can_delete":false,"product_type":"c1","uid":1683063,"ip_address":"","ucode":"EE846895FF0C85","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QYKSUV20DMgBHAPLfgngdw4N8FHRCSBLCJueVRu9Ya1Ba2x4icx70zoVVFOZtG1K6TkHj5CFbuztQhRFyCjWXHQ/132","comment_is_top":false,"comment_ctime":1570853041,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"173369544881","product_id":100026001,"comment_content":"想通了一个问题: 你知道sql里面不用sql拼接 而使用占位符可以防止sql注入攻击吧<br>那么为什么使用占位符可以防止攻击呢 我没想明白。<br>简单来说就是将占位符当成数据解析 而不当作指令解析， 不管这个占位符给得什么 我都把它当成是数据 而不会是指令","like_count":41,"discussions":[{"author":{"id":2809887,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/e0/1f/de322ce3.jpg","nickname":"Harley","note":"","ucode":"F92472893F2156","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574370,"discussion_content":"预编译了，这里的占位符不会当指令执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653999851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022687,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9a/df/71046f65.jpg","nickname":"不会写代码的书僮","note":"","ucode":"0C078A6C102BEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567862,"discussion_content":"用占位符在数据库内核里走的不一样的处理流程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651020571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135032,"user_name":"焰火","can_delete":false,"product_type":"c1","uid":1244606,"ip_address":"","ucode":"D3353B386DE3B5","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/be/079c78c7.jpg","comment_is_top":false,"comment_ctime":1568984203,"is_pvip":true,"replies":[{"id":"52625","content":"焰火同学，<br><br>你好，不是的。虚拟内存空间的布局发生变化了。因为如果通过程序或者系统漏洞往进程里面注入代码，针对改写的也是虚拟内存地址，所以虚拟内存地址的布局是发生了变化的。而不是虚拟到物理之间多做一层转化，因为物理内存地址的分配本来就不是固定的，相当于已经随机化过了。","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1569656880,"ip_address":"","comment_id":135032,"utype":1}],"discussion_count":2,"race_medal":0,"score":"70288460939","product_id":100026001,"comment_content":"地址空间布局随机化。虽然进程里的段乱序了，但是他的虚拟地址和乱序前没有改变吧，只是又多了一层地址转换而已？这样理解对么？","like_count":17,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468009,"discussion_content":"焰火同学，\n\n你好，不是的。虚拟内存空间的布局发生变化了。因为如果通过程序或者系统漏洞往进程里面注入代码，针对改写的也是虚拟内存地址，所以虚拟内存地址的布局是发生了变化的。而不是虚拟到物理之间多做一层转化，因为物理内存地址的分配本来就不是固定的，相当于已经随机化过了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1569656880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1795371,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/2b/446ef7b6.jpg","nickname":"许先森","note":"","ucode":"1F42D4A6B5C6AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143043,"discussion_content":"物理内存本来就不够用，所以才有虚拟内存技术，所以物理内存地址本来就不是固定的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579488475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198487,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1585453413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40240159077","product_id":100026001,"comment_content":"1. 简单页表：类似数组，时间复杂度为 O(1)。但空间复杂度为数组的长度，即页的个数。32 位的内存地址为 4MB（= 2^20 * 4byte）。<br>2. 多级页表：类似 B+ 树，时间复杂度为 O(n)，如 4 级页表就需要查询 4 次。但程序只需要存储正在使用的虚拟页的映射关系，空间复杂度大大降低。<br>3. TLB：使用缓存保存之前虚拟页的映射关系。因为指令和数据往往都是连续的，存在空间局部性和时间局部性。也就是说，连续执行的多个指令和数据往往在同一个虚拟页中，没必要每次都从内存中读取页表来解析虚拟地址。","like_count":9},{"had_liked":false,"id":118471,"user_name":"免费的人","can_delete":false,"product_type":"c1","uid":1032106,"ip_address":"","ucode":"2B12D8ED63C564","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/aa/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1564371040,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31629142112","product_id":100026001,"comment_content":"linux下  内存空间随机化是否开启  是有配置的吗  还是跟内核版本有关？","like_count":7,"discussions":[{"author":{"id":1517311,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJEbZZ65d5ibzjadyKq6Odjs5eeSJGwxnfBAv7gKjp6vG5GUdz9YrXq54KZeAEsS1OfahWVZurXODg/132","nickname":"Akizuki","note":"","ucode":"2B48169ED18AC7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4823,"discussion_content":"cat /proc/sys/kernel/randomize_va_space\n\n0 为禁用，2 为启用","likes_number":21,"is_delete":false,"is_hidden":false,"ctime":1565753197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144277,"user_name":"拓山","can_delete":false,"product_type":"c1","uid":1545647,"ip_address":"","ucode":"11FE9CF3821898","user_header":"https://static001.geekbang.org/account/avatar/00/17/95/af/b7f8dc43.jpg","comment_is_top":false,"comment_ctime":1571886978,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14456788866","product_id":100026001,"comment_content":"如果是这个salt是保存在db中，这个随机化策略只是增加了黑客的破解成本，并非完全安全。<br>一个解决方案是将一个从密码机生成的秘钥通过算法将其生成为一个安全图片，同时提供一个sdk来封装对安全图片的读取，并提供加解密方法。<br>业务方每次加解密时，调用sdk来做加解密，这样秘钥就不会落盘，不会有日志记录。安全性得到极大提升<br><br>","like_count":3,"discussions":[{"author":{"id":1457464,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/38/6f02a4b9.jpg","nickname":"your problem？","note":"","ucode":"6E096E7958CFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304056,"discussion_content":"安全没有绝对安全的，只能是提高安全系数，增加破解难度，达到破解收益低于破解代价得到相对安全的方案，本身为数据或系统添加安全防护也是需要付出一定代价的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599460496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1147461,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/45/981ac8ab.jpg","nickname":"lcp","note":"","ucode":"3C9975BFF7654E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143146,"discussion_content":"看起来方案跟 srp 差不多，只是多了一层图片跟密钥映射，这个映射实际上也只是增加了成本","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579492043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1513948,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/dc/9d3ed421.jpg","nickname":"monchickey","note":"","ucode":"D7B670444F62B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365243,"discussion_content":"可以用一些密钥派生算法比如scrypt/bcrypt，Argon2这种本身就相当于加盐了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617756413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213476,"user_name":"宇宙超人","can_delete":false,"product_type":"c1","uid":1073894,"ip_address":"","ucode":"28EBA3B0C136C2","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/e6/163eb9f8.jpg","comment_is_top":false,"comment_ctime":1588427816,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5883395112","product_id":100026001,"comment_content":"问个问题 <br>cpu.缓存和mmu是怎么个顺序<br>先mmu转换地址 然后去cache看命中还是反过来","like_count":2,"discussions":[{"author":{"id":1452167,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYRSYg6icjibzGa7efcMrCsGec2UwibjTd57icqDz0zzkEEOM2pXVju60dibzcnQKPfRkN9g/132","nickname":"Geek_93970d","note":"","ucode":"52AC308BEC7737","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582026,"discussion_content":"好问题。阿里面试官曾问过我类似的问题。所以赶紧报名学习本课程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659146881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185554,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1583632047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5878599343","product_id":100026001,"comment_content":"还有使用哨兵进行堆栈溢出检测等","like_count":1},{"had_liked":false,"id":142811,"user_name":"不一样的烟火","can_delete":false,"product_type":"c1","uid":1473251,"ip_address":"","ucode":"6E305F0EE90E8B","user_header":"https://static001.geekbang.org/account/avatar/00/16/7a/e3/145adba9.jpg","comment_is_top":false,"comment_ctime":1571540950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5866508246","product_id":100026001,"comment_content":"地址随机化后不再局部 是不是牺牲了效率","like_count":1},{"had_liked":false,"id":118534,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1564382433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5859349729","product_id":100026001,"comment_content":"老师你好，TLB的原理给多介绍一下吗？","like_count":1},{"had_liked":false,"id":118420,"user_name":"xta0","can_delete":false,"product_type":"c1","uid":1233248,"ip_address":"","ucode":"82342C8C303E6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/60/5c1227a2.jpg","comment_is_top":false,"comment_ctime":1564363119,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"5859330415","product_id":100026001,"comment_content":"问一下，对于使用salt加密的策略，salt是需要存入数据库的吧？这样当用户登录时，先取出salt，然后重新计算hash值进行比对？","like_count":1,"discussions":[{"author":{"id":1012832,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/74/60/0403b575.jpg","nickname":"林三杠","note":"","ucode":"E667F986D07DC6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3463,"discussion_content":"这个很多种方案吧，不一定存库。比如我可以把密码先md5一下，当做盐，和原密码拼一起再做一次hash","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1564495739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244606,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fd/be/079c78c7.jpg","nickname":"焰火","note":"","ucode":"D3353B386DE3B5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":17835,"discussion_content":"颜值有可能也是用户信息的哈嘻值","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568984041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1265940,"avatar":"https://static001.geekbang.org/account/avatar/00/13/51/14/c800c859.jpg","nickname":"N0mansky","note":"","ucode":"86DC16096C4F5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4510,"discussion_content":"需要存入，可以看下/etc/shadow文件，里面每个账号的密码都加 salt 了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565505672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003005,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","nickname":"许童童","note":"","ucode":"4B799C0C6BC678","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3297,"discussion_content":"需要存入","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564381976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3276,"discussion_content":"感觉应该是硬编码到程序里的~~~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564370600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1122034,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/f2/453d5f88.jpg","nickname":"seker","note":"","ucode":"9B705F91355873","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296663,"discussion_content":"不应该是硬编码到程序里的，这个是随机生成的，每个用户随机出来的值不一样。\n\n硬编码的前提是你得知道这个随机出来的值是多少，但是在系统新注册的每个用户，都会随机出一个新值，而这个新值，事先是无法预知的，因此是不可能硬编码到程序的。\n\n如果每个用户都是固定的一个值，想硬编码到程序里是可以的，要么是放在程序的配置文件中，要么是放在配置中心里。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596617012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3276,"ip_address":""},"score":296663,"extra":""}]}]},{"had_liked":false,"id":351016,"user_name":"排骨","can_delete":false,"product_type":"c1","uid":1811277,"ip_address":"","ucode":"A413CF46211E1F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a3/4d/59390ba9.jpg","comment_is_top":false,"comment_ctime":1657454644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657454644","product_id":100026001,"comment_content":"局部性原理无处不在啊","like_count":0},{"had_liked":false,"id":329950,"user_name":"菜鸟","can_delete":false,"product_type":"c1","uid":2451215,"ip_address":"","ucode":"214A61B6B3410F","user_header":"https://static001.geekbang.org/account/avatar/00/25/67/0f/3cb10900.jpg","comment_is_top":false,"comment_ctime":1641694227,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1641694227","product_id":100026001,"comment_content":"共享内存是不是没有启用地址保护？","like_count":0},{"had_liked":false,"id":280334,"user_name":"红薯板栗","can_delete":false,"product_type":"c1","uid":2413071,"ip_address":"","ucode":"236BE91291A575","user_header":"https://static001.geekbang.org/account/avatar/00/24/d2/0f/8f14c85b.jpg","comment_is_top":false,"comment_ctime":1614161129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614161129","product_id":100026001,"comment_content":"spectre漏洞：CPU流水线优化- 分支预测-边信号-https:&#47;&#47;www.sohu.com&#47;a&#47;318447401_132567","like_count":0},{"had_liked":false,"id":235086,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1594888344,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1594888344","product_id":100026001,"comment_content":"进程布局的随机化减少了被黑客猜到数据地址的危险。原来哈希值也有可能通过彩虹表猜出来，应对方法是用一个随机值和用户的输入一起作哈希。","like_count":0},{"had_liked":false,"id":152860,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1574090758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574090758","product_id":100026001,"comment_content":"绍了最常用的两个内存保护措施，可执行空间保护和地址空间布局随机化。","like_count":0},{"had_liked":false,"id":126435,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1566386642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566386642","product_id":100026001,"comment_content":"局部性原理应用的淋漓尽致<br>day41 笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;11385395.html","like_count":0},{"had_liked":false,"id":119079,"user_name":"Geek_7f28ff","can_delete":false,"product_type":"c1","uid":1554075,"ip_address":"","ucode":"DEC79BC88B72FE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6BNrtko7d9ZXic04QhUuQic7N9XEVFtXciaHNlYMVvIic8bv4k52GmFRuYotiaJpjGiaj35rCdhWcFojKsgFIvZ5XlMA/132","comment_is_top":false,"comment_ctime":1564499449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564499449","product_id":100026001,"comment_content":"老师，最近也在学习计算机网络，能不能推荐一下，这方面的书籍和好点的视频，趣味网络协议已经买了。","like_count":0}]}