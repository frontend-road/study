{"id":88531,"title":"39 | 万能程序","content":"<h1>课件及源代码地址</h1><p><a href=\"https://gitee.com/geektime-geekbang/go_learning\">https://gitee.com/geektime-geekbang/go_learning</a></p><h2>书目推荐</h2><p><a href=\"time://mall?url=https%3A%2F%2Fh5.youzan.com%2Fv2%2Fgoods%2F1ycmk3uob0ryw\">《计算机程序的构造和解释》</a></p>","comments":[{"had_liked":false,"id":85436,"user_name":"芝士老爹","can_delete":false,"product_type":"c3","uid":1071316,"ip_address":"","ucode":"5F2935967574D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/d4/c52f9f6d.jpg","comment_is_top":false,"comment_ctime":1555060037,"is_pvip":false,"replies":[{"id":30760,"content":"非常感谢指出这个问题。你学得非常细致，正确的代码如下，github上的代码也会修正。\n\n\tif reflect.TypeOf(st).Kind() != reflect.Ptr {\n\t\treturn errors.New(&quot;the first param should be a pointer to the struct type.&quot;)\n\t}\n\t&#47;&#47; Elem() 获取指针指向的值\n\tif reflect.TypeOf(st).Elem().Kind() != reflect.Struct {\n\t\treturn errors.New(&quot;the first param should be a pointer to the struct type.&quot;)\n\t}","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1555158256,"ip_address":"","comment_id":85436,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"课程源码：\nif reflect.TypeOf(st).Kind() != reflect.Ptr { \n\t\t&#47;&#47; Elem() 获取指针指向的值\n\t\tif reflect.TypeOf(st).Elem().Kind() != reflect.Struct {\n\t\t\treturn errors.New(&quot;the first param should be a pointer to the struct type.&quot;)\n\t\t}\n\t}\n这一段的判断有些疑问。\n第一行if先判断是否为指针，如果不是，则执行第二行if。\n但是第二行if里面用到了Elem()方法，这个方法不是指针是不能调用的。\n所以这里是不是有些问题？\n改成如下这样呢？\n\tif reflect.TypeOf(st).Kind() != reflect.Ptr {\n\t\treturn errors.New(&quot;the first param should be a pointer&quot;)\n\t}\n\t&#47;&#47; Elem() 获取指针指向的值\n\tif reflect.TypeOf(st).Elem().Kind() != reflect.Struct {\n\t\treturn errors.New(&quot;the first param should be a pointer to the struct type&quot;)\n\t}\n请解惑、指正。","like_count":9,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446667,"discussion_content":"非常感谢指出这个问题。你学得非常细致，正确的代码如下，github上的代码也会修正。\n\n\tif reflect.TypeOf(st).Kind() != reflect.Ptr {\n\t\treturn errors.New(&amp;quot;the first param should be a pointer to the struct type.&amp;quot;)\n\t}\n\t// Elem() 获取指针指向的值\n\tif reflect.TypeOf(st).Elem().Kind() != reflect.Struct {\n\t\treturn errors.New(&amp;quot;the first param should be a pointer to the struct type.&amp;quot;)\n\t}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555158256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85102,"user_name":"西門熱","can_delete":false,"product_type":"c3","uid":1151033,"ip_address":"","ucode":"89DAEEBC83714C","user_header":"https://static001.geekbang.org/account/avatar/00/11/90/39/0f4c8f71.jpg","comment_is_top":false,"comment_ctime":1554980949,"is_pvip":false,"replies":[{"id":30616,"content":"可以啊。你还可以利用我们接先来课程中涉及的性能分析方法来分析一下影响。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1555049123,"ip_address":"","comment_id":85102,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"老师您好。\n我看演示代码中多次出现reflect.TypeOf(st)和reflect.ValueOf(st)，考虑到多次调用函数是否会存在性能问题，能否分别赋值给一个变量（新增变量占用内存？），例如：\n        rt := reflect.TypeOf(st)\n\trv := reflect.ValueOf(st)\n然后在下面rt.Kind()，rt.Elem().Kind()这样调用。","like_count":7,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446559,"discussion_content":"可以啊。你还可以利用我们接先来课程中涉及的性能分析方法来分析一下影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555049123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135385,"user_name":"Geek_338030","can_delete":false,"product_type":"c3","uid":1614014,"ip_address":"","ucode":"6F2ACB3C528BAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1ZcgbSZ1Q0eARic4sFq9PRO0rT55MAYUAcBVNK3dE6ficOQViblBlzUTnMJyK2bZbU3IsewnDxKD5Wtrq01DeHnWQ/132","comment_is_top":false,"comment_ctime":1569143254,"is_pvip":false,"replies":[{"id":52937,"content":"Elem()返回的是值Value，而Type()之后返回的是类型。\n你运行以下两行代码就会清楚了：\nfmt.Println(&quot;--&quot;, (reflect.ValueOf(st)).Elem())\nfmt.Println(&quot;**&quot;, (reflect.ValueOf(st)).Elem().Type())","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1569835723,"ip_address":"","comment_id":135385,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"好像有点懂老师的意思了，我这样理解是否正确呢？\n(reflect.ValueOf(st)).Elem().FieldByName(k)\n返回的是一个struct filed类型的值\n(reflect.ValueOf(st)).Elem().Type().FieldByName(k)\n由于加上了Type，所以就返回了struct filed这个类型","like_count":1,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468168,"discussion_content":"Elem()返回的是值Value，而Type()之后返回的是类型。\n你运行以下两行代码就会清楚了：\nfmt.Println(&amp;quot;--&amp;quot;, (reflect.ValueOf(st)).Elem())\nfmt.Println(&amp;quot;**&amp;quot;, (reflect.ValueOf(st)).Elem().Type())","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569835723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1199670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4e/36/de029ebf.jpg","nickname":"🐬Innocence","note":"","ucode":"7CBAB4976FACE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247831,"discussion_content":"(reflect.ValueOf(st)).Elem().FieldByName(k) 这个执行是会有报错的。因为你定义了field 是StructField类型，而这个(reflect.ValueOf(st)).Elem().FieldByName(k)返回的是一个具体的值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587825971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135060,"user_name":"Geek_338030","can_delete":false,"product_type":"c3","uid":1614014,"ip_address":"","ucode":"6F2ACB3C528BAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1ZcgbSZ1Q0eARic4sFq9PRO0rT55MAYUAcBVNK3dE6ficOQViblBlzUTnMJyK2bZbU3IsewnDxKD5Wtrq01DeHnWQ/132","comment_is_top":false,"comment_ctime":1568992485,"is_pvip":false,"replies":[{"id":51909,"content":"以下是FieldByName的定义，可见返回值是StructField类型。\n&#47;&#47; FieldByName returns the struct field with the given name\n\t&#47;&#47; and a boolean indicating if the field was found.\n\tFieldByName(name string) (StructField, bool)\n\n&#47;&#47; A StructField describes a single field in a struct.\ntype StructField struct {\n\t&#47;&#47; Name is the field name.\n\tName string\n\t&#47;&#47; PkgPath is the package path that qualifies a lower case (unexported)\n\t&#47;&#47; field name. It is empty for upper case (exported) field names.\n\t&#47;&#47; See https:&#47;&#47;golang.org&#47;ref&#47;spec#Uniqueness_of_identifiers\n\tPkgPath string\n\n\tType      Type      &#47;&#47; field type\n\tTag       StructTag &#47;&#47; field tag string\n\tOffset    uintptr   &#47;&#47; offset within struct, in bytes\n\tIndex     []int     &#47;&#47; index sequence for Type.FieldByIndex\n\tAnonymous bool      &#47;&#47; is an embedded field\n}","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1569139687,"ip_address":"","comment_id":135060,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"(reflect.ValueOf(st)).Elem().Type().FieldByName(k)\n(reflect.ValueOf(st)).Elem().Type()打印出来的结果是flexible_reflect.Employee，而FieldByName这个函数返回的不是k对应的值吗？为什么返回的却是{Name  string format:&quot;normal&quot; 16 [1] false} true","like_count":1,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468025,"discussion_content":"以下是FieldByName的定义，可见返回值是StructField类型。\n// FieldByName returns the struct field with the given name\n\t// and a boolean indicating if the field was found.\n\tFieldByName(name string) (StructField, bool)\n\n// A StructField describes a single field in a struct.\ntype StructField struct {\n\t// Name is the field name.\n\tName string\n\t// PkgPath is the package path that qualifies a lower case (unexported)\n\t// field name. It is empty for upper case (exported) field names.\n\t// See https://golang.org/ref/spec#Uniqueness_of_identifiers\n\tPkgPath string\n\n\tType      Type      // field type\n\tTag       StructTag // field tag string\n\tOffset    uintptr   // offset within struct, in bytes\n\tIndex     []int     // index sequence for Type.FieldByIndex\n\tAnonymous bool      // is an embedded field\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569139687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135056,"user_name":"Geek_338030","can_delete":false,"product_type":"c3","uid":1614014,"ip_address":"","ucode":"6F2ACB3C528BAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1ZcgbSZ1Q0eARic4sFq9PRO0rT55MAYUAcBVNK3dE6ficOQViblBlzUTnMJyK2bZbU3IsewnDxKD5Wtrq01DeHnWQ/132","comment_is_top":false,"comment_ctime":1568991602,"is_pvip":false,"replies":[{"id":51905,"content":"因为传入的结构的实例里面包含两个field （Name和Age）所以重复了两遍，\n第一个输出是由于 Name和Age都还没有被赋值（Name位空字符串，Age为0，都是缺省值）\n第二个输出是由于Name已经被赋值了“Mike”","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1569139370,"ip_address":"","comment_id":135056,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"\n\t\tif field.Type == reflect.TypeOf(v) {\n\t\t\tvstr := reflect.ValueOf(st)\n\t\t\tvstr = vstr.Elem()\n                        &#47;&#47;为什么这里查看我要修改的st的时候，会发现打印出两个值呢？\n                        fmt.Println(st)\n\t\t\tvstr.FieldByName(k).Set(reflect.ValueOf(v))\n\t\t}\n显示结果如下：\n&amp;{  0}\n&amp;{ Mike 0}\n\n","like_count":1,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468023,"discussion_content":"因为传入的结构的实例里面包含两个field （Name和Age）所以重复了两遍，\n第一个输出是由于 Name和Age都还没有被赋值（Name位空字符串，Age为0，都是缺省值）\n第二个输出是由于Name已经被赋值了“Mike”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569139370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379978,"user_name":"草原fan","can_delete":false,"product_type":"c3","uid":2082341,"ip_address":"北京","ucode":"8F24B531252411","user_header":"https://static001.geekbang.org/account/avatar/00/1f/c6/25/38653ad1.jpg","comment_is_top":false,"comment_ctime":1692779899,"is_pvip":false,"replies":[{"id":139265,"content":"很好的发现！没错可以的。","user_name":"作者回复","user_name_real":"编辑","uid":1008262,"ctime":1697111657,"ip_address":"北京","comment_id":379978,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"请教老师：\n\tvStr := reflect.ValueOf(st)\n\tvStr = vStr.Elem()\n这个操作我看课程是放在for循环里的，这个是不是可以放在for循环之前，因为获取实例对象只需要一次就可以了，在for循环里只需执行vStr.FieldByName(k).Set(reflect.ValueOf(v))就行了","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629488,"discussion_content":"很好的发现！没错可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697111658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333134,"user_name":"Redamancy","can_delete":false,"product_type":"c3","uid":2327655,"ip_address":"","ucode":"856412C42A7F1A","user_header":"https://static001.geekbang.org/account/avatar/00/23/84/67/1dacc4b3.jpg","comment_is_top":false,"comment_ctime":1644123099,"is_pvip":false,"replies":[{"id":127020,"content":"你的Field的name是怎样的，首字母大写了吗","user_name":"作者回复","user_name_real":"编辑","uid":1008262,"ctime":1655601041,"ip_address":"","comment_id":333134,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"vstr.FieldByName(k).Set(reflect.ValueOf(v))\n我在执行这行语句报了panic\npanic: reflect: reflect.Value.Set using value obtained using unexported field\n老师同学们能帮忙看下这个是为啥吗","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576489,"discussion_content":"你的Field的name是怎样的，首字母大写了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655601041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287669,"user_name":"escray","can_delete":false,"product_type":"c3","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1618099950,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"与配置有关的程序，很多都可以使用反射来写，其他语言或者框架也确实是这么做的。\n\n在性能要求比较高的时候，要注意反射的性能。\n\n反射代码的可读性也比较差，代码的 debug 难度也会增加。\n\n看了一下留言里面 @Geek_338030 和老师关于 FieldByName 的讨论，不明觉厉，先留个印象，以后看到相关代码再回来。","like_count":1},{"had_liked":false,"id":372933,"user_name":"Nemo","can_delete":false,"product_type":"c3","uid":1657039,"ip_address":"广东","ucode":"2B11D18D6FA2AE","user_header":"https://static001.geekbang.org/account/avatar/00/19/48/cf/8c88e6c0.jpg","comment_is_top":false,"comment_ctime":1681820661,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"`reflect.DeepEqual`是Go语言标准库`reflect`包中提供的一个函数，用于深度比较两个值是否相等。在使用`DeepEqual`进行比较时，如果两个值的类型相同，就会比较它们的值；如果类型不同，则直接返回false。`DeepEqual`支持比较多种类型的值，包括值类型、结构体、切片、映射、接口等。`DeepEqual`会递归比较每个值是否相等，直到找到不相等的值或者比较完所有的值为止。如果比较完所有的值都相等，则返回true，否则返回false。\n\n需要注意的是，使用`DeepEqual`进行比较时，应该尽可能使用相同类型的值进行比较，否则可能会得到意想不到的结果。此外，`DeepEqual`比较值时，会比较所有的成员，包括私有成员。因此，在使用`DeepEqual`进行比较时，应该尽量使用公有成员，或者自定义`Equal`方法来进行比较。\n\n在这段代码中，我们使用了`DeepEqual`函数进行了三组不同类型的值的比较，分别是：\n\n1. 两个map，它们的键和值都是int和string类型，内容相同，所以比较结果为true；\n2. 两个切片，它们的元素类型都是int，长度和内容都相同，所以比较结果为true；\n3. 两个自定义的Customer结构体，它们的成员变量都相同，所以比较结果为true。\n\n最后，我们在这段代码中也对比较操作符`==`进行了使用，用于比较两个Customer结构体的内容是否相等。这里需要注意，对于结构体类型，使用`==`进行比较时只有所有成员都相等时才相等。如果结构体中包含指针类型的成员变量，那么比较时需要保证指针指向的内容也相等。因此，使用`DeepEqual`函数进行比较更为保险和准确。","like_count":0},{"had_liked":false,"id":347239,"user_name":"Geek_a4cca6","can_delete":false,"product_type":"c3","uid":2136813,"ip_address":"","ucode":"68B3E4FDECFFF0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5GQZCecntmOibVjWkMWVnibqXEZhAYnFiaRkgfAUGdrQBWzfXjqsYteLee6afDEjvBLBVa5uvtWYTTicwO2jKia0zOw/132","comment_is_top":false,"comment_ctime":1653838512,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"老师，反射能动态给实例对象添加属性吗？","like_count":0},{"had_liked":false,"id":302609,"user_name":"Roy","can_delete":false,"product_type":"c3","uid":2633127,"ip_address":"","ucode":"2B1675B084D3A6","user_header":"https://static001.geekbang.org/account/avatar/00/28/2d/a7/c7b0c34e.jpg","comment_is_top":false,"comment_ctime":1626280632,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"老师，我看着两个是等价的写法，您看是吗？\n\nreflect.ValueOf(st).Elem().Type.FieldByName(key)\n等价于\nreflect.TypeOf(st).Elem().FieldByName(key)","like_count":0},{"had_liked":false,"id":302595,"user_name":"Roy","can_delete":false,"product_type":"c3","uid":2633127,"ip_address":"","ucode":"2B1675B084D3A6","user_header":"https://static001.geekbang.org/account/avatar/00/28/2d/a7/c7b0c34e.jpg","comment_is_top":false,"comment_ctime":1626274969,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"记录一下边学编写的代码：\npackage flexible_reflect\n\nimport (\n\t&quot;errors&quot;\n\t&quot;fmt&quot;\n\t&quot;reflect&quot;\n\t&quot;testing&quot;\n)\n\ntype Employee struct {\n\tEmployeeId int\n\tName string\n\tAge int\n}\n\ntype Customer struct {\n\tCustomerId int\n\tName string\n\tAge int\n}\n\n&#47;&#47;用同一个数据填充不同的结构体\n&#47;&#47;思路：既然是不同的结构体，那么要想通用，所以参数必须是一个空接口才行。\n&#47;&#47;因为是空接口，所有我们需要对参数类型写断言\nfunc fillDifferentStructByData(st interface{}, data map[string]interface{}) error {\n\t&#47;&#47;先判断传过来的类型是不是指针\n\tif reflect.TypeOf(st).Kind() != reflect.Ptr {\n\t\treturn errors.New(&quot;第一个参数必须传一个指向结构体的指针&quot;)\n\t}\n\t&#47;&#47;Elem() 用来获取指针指向的值\n\t&#47;&#47;如果参数不是指针，会报 panic 错误\n\t&#47;&#47;如果参数值是 nil, 获取的值为 0\n\tif reflect.TypeOf(st).Elem().Kind() != reflect.Struct {\n\t\treturn errors.New(&quot;第一个参数必须是一个结构体类型&quot;)\n\t}\n\n\tif data == nil {\n\t\treturn errors.New(&quot;填充用的数据不能为nil&quot;)\n\t}\n\n\tvar (\n\t\tfield reflect.StructField\n\t\tok bool\n\t)\n\n\tfor key, val := range data  {\n\t\t&#47;&#47;如果结构体里面没有 key 这个字段，则跳过\n\t\t&#47;&#47;reflect.ValueOf(st)).Elem().Type() 返回的是字段类型\n\t\tif field, ok = reflect.ValueOf(st).Elem().Type().FieldByName(key); !ok {\n\t\t\tcontinue\n\t\t}\n\n\t\t&#47;&#47;如果字段的类型相同，则用 data 的数据填充这个字段的值\n\t\tif field.Type == reflect.TypeOf(val) {\n\t\t\t&#47;&#47;reflect.ValueOf(st)).Elem() 返回的是字段的值\n\t\t\treflect.ValueOf(st).Elem().FieldByName(key).Set(reflect.ValueOf(val))\n\t\t}\n\t}\n\n\treturn nil\n}\n\n&#47;&#47;填充姓名和年龄\nfunc TestFillNameAndAge(t *testing.T) {\n\t&#47;&#47;声明一个 map，用来存放数据，这些数据将会填充到 Employee 和 Customer 这两个结构体中\n\tdata := map[string]interface{}{&quot;Name&quot;:&quot;Jane&quot;, &quot;Age&quot;:18}\n\n\te := Employee{}\n\tif err := fillDifferentStructByData(&amp;e, data); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tc := Customer{}\n\tif err := fillDifferentStructByData(&amp;c, data); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tfmt.Println(e, &quot;\\n&quot;, c)\n}\n&#47;*\n=== RUN   TestFillNameAndAge\n{0 Jane 18}\n{0 Jane 18}\n--- PASS: TestFillNameAndAge (0.00s)\nPASS\n*&#47;","like_count":0},{"had_liked":false,"id":135384,"user_name":"Geek_338030","can_delete":false,"product_type":"c3","uid":1614014,"ip_address":"","ucode":"6F2ACB3C528BAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1ZcgbSZ1Q0eARic4sFq9PRO0rT55MAYUAcBVNK3dE6ficOQViblBlzUTnMJyK2bZbU3IsewnDxKD5Wtrq01DeHnWQ/132","comment_is_top":false,"comment_ctime":1569142998,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"麻烦老师了，但还是没太懂老师回复的，既然fieldByName return的是struct field和bool，那为什么以下的这一行代码返回的是一个k对应的值呢？ \n(reflect.ValueOf(st)).Elem().FieldByName(k)\n而加上了Type,即：(reflect.ValueOf(st)).Elem().Type().FieldByName(k) \n返回的就变成了是struct field 和bool了\n这是为什么?\n\n","like_count":0,"discussions":[{"author":{"id":1199670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4e/36/de029ebf.jpg","nickname":"🐬Innocence","note":"","ucode":"7CBAB4976FACE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247839,"discussion_content":"这两个程序是等价的\n(reflect.TypeOf(st)).Elem().FieldByName(k) == (reflect.ValueOf(st)).Elem().FieldByName(k)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587826143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1182219,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0a/0b/985d3800.jpg","nickname":"郭星","note":"","ucode":"8A0F5DF80E0C61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1199670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4e/36/de029ebf.jpg","nickname":"🐬Innocence","note":"","ucode":"7CBAB4976FACE0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292658,"discussion_content":"reflect.TypeOf 和 reflect.ValueOf首先这两个的含义就不相同, \n在指针结构体中包含Type和Value\nreflect.TypeOf 实际是获取指针结构中的Type,因此(reflect.TypeOf(st)).Elem().FieldByName(k) 这里是对当前指针的Type进行操作\nreflect.ValueOf实际是获取指针结构中的Value\n(reflect.TypeOf(st)).Elem().FieldByName(k) 和 (reflect.ValueOf(st)).Elem().FieldByName(k) 这两者的返回值是不同的,因此不是等价操作","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595298010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":247839,"ip_address":"","group_id":0},"score":292658,"extra":""}]}]}]}