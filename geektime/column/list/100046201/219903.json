{"id":219903,"title":"20 | 详解时钟轮在RPC中的应用","content":"<p>你好，我是何小锋。上一讲我们学习了在分布式环境下如何快速定位问题，简单回顾下重点。在分布式环境下，RPC框架自身以及服务提供方的业务逻辑实现，都应该对异常进行合理地封装，让使用方可以根据异常快速地定位问题；而在依赖关系复杂且涉及多个部门合作的分布式系统中，我们也可以借助分布式链路跟踪系统，快速定位问题。</p><p>现在，切换到咱们今天的主题，一起看看时钟轮在RPC中的应用。</p><h2>定时任务带来了什么问题？</h2><p>在讲解时钟轮之前，我们先来聊聊定时任务。相信你在开发的过程中，很多场景都会使用到定时任务，在RPC框架中也有很多地方会使用到它。就以调用端请求超时的处理逻辑为例，下面我们看一下RPC框架是如果处理超时请求的。</p><p>回顾下<a href=\"https://time.geekbang.org/column/article/216803\">[第 17 讲]</a>，我讲解Future的时候说过：无论是同步调用还是异步调用，调用端内部实行的都是异步，而调用端在向服务端发送消息之前会创建一个Future，并存储这个消息标识与这个Future的映射，当服务端收到消息并且处理完毕后向调用端发送响应消息，调用端在接收到消息后会根据消息的唯一标识找到这个Future，并将结果注入给这个Future。</p><p>那在这个过程中，如果服务端没有及时响应消息给调用端呢？调用端该如何处理超时的请求？</p><!-- [[[read_end]]] --><p>没错，就是可以利用定时任务。每次创建一个Future，我们都记录这个Future的创建时间与这个Future的超时时间，并且有一个定时任务进行检测，当这个Future到达超时时间并且没有被处理时，我们就对这个Future执行超时逻辑。</p><p><strong>那定时任务该如何实现呢？</strong></p><p>有种实现方式是这样的，也是最简单的一种。每创建一个Future我们都启动一个线程，之后sleep，到达超时时间就触发请求超时的处理逻辑。</p><p>这种方式吧，确实简单，在某些场景下也是可以使用的，但弊端也是显而易见的。就像刚才我讲的那个Future超时处理的例子，如果我们面临的是高并发的请求，单机每秒发送数万次请求，请求超时时间设置的是5秒，那我们要创建多少个线程用来执行超时任务呢？超过10万个线程，这个数字真的够吓人了。</p><p>别急，我们还有另一种实现方式。我们可以用一个线程来处理所有的定时任务，还以刚才那个Future超时处理的例子为例。假设我们要启动一个线程，这个线程每隔100毫秒会扫描一遍所有的处理Future超时的任务，当发现一个Future超时了，我们就执行这个任务，对这个Future执行超时逻辑。</p><p>这种方式我们用得最多，它也解决了第一种方式线程过多的问题，但其实它也有明显的弊端。</p><p>同样是高并发的请求，那么扫描任务的线程每隔100毫秒要扫描多少个定时任务呢？如果调用端刚好在1秒内发送了1万次请求，这1万次请求要在5秒后才会超时，那么那个扫描的线程在这个5秒内就会不停地对这1万个任务进行扫描遍历，要额外扫描40多次（每100毫秒扫描一次，5秒内要扫描近50次），很浪费CPU。</p><p>在我们使用定时任务时，它所带来的问题，就是让CPU做了很多额外的轮询遍历操作，浪费了CPU，这种现象在定时任务非常多的情况下，尤其明显。</p><h2>什么是时钟轮？</h2><p>这个问题也不难解决，我们只要找到一种方式，减少额外的扫描操作就行了。比如我的一批定时任务是5秒之后执行，我在4.9秒之后才开始扫描这批定时任务，这样就大大地节省了CPU。这时我们就可以利用时钟轮的机制了。</p><p>我们先来看下我们生活中用到的时钟。</p><p><img src=\"https://static001.geekbang.org/resource/image/d6/cf/d6366d3aec1af5f1b028b5939a7753cf.jpg?wh=3169*1390\" alt=\"\" title=\"时钟示意图\"></p><p>很熟悉了吧，时钟有时针、分针和秒针，秒针跳动一周之后，也就是跳动60个刻度之后，分针跳动1次，分针跳动60个刻度，时针走动一步。</p><p>而时钟轮的实现原理就是参考了生活中的时钟跳动的原理。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/5a/b61d5a5d1ec29384ba8730b71b4beb5a.jpg?wh=3181*1364\" alt=\"\" title=\"时钟轮示意图\"></p><p>在时钟轮机制中，有时间槽和时钟轮的概念，时间槽就相当于时钟的刻度，而时钟轮就相当于秒针与分针等跳动的一个周期，我们会将每个任务放到对应的时间槽位上。</p><p>时钟轮的运行机制和生活中的时钟也是一样的，每隔固定的单位时间，就会从一个时间槽位跳到下一个时间槽位，这就相当于我们的秒针跳动了一次；时钟轮可以分为多层，下一层时钟轮中每个槽位的单位时间是当前时间轮整个周期的时间，这就相当于1分钟等于60秒钟；当时钟轮将一个周期的所有槽位都跳动完之后，就会从下一层时钟轮中取出一个槽位的任务，重新分布到当前的时钟轮中，当前时钟轮则从第0槽位从新开始跳动，这就相当于下一分钟的第1秒。</p><p>为了方便你了解时钟轮的运行机制，我们用一个场景例子来模拟下，一起看下这个场景。</p><p>假设我们的时钟轮有10个槽位，而时钟轮一轮的周期是1秒，那么我们每个槽位的单位时间就是100毫秒，而下一层时间轮的周期就是10秒，每个槽位的单位时间也就是1秒，并且当前的时钟轮刚初始化完成，也就是第0跳，当前在第0个槽位。</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/e9/a661c85b35508dea9cd9db6969f58de9.jpg?wh=3189*1366\" alt=\"\" title=\"时钟轮示意图\"></p><p>好，现在我们有3个任务，分别是任务A（90毫秒之后执行）、任务B（610毫秒之后执行）与任务C（1秒610毫秒之后执行），我们将这3个任务添加到时钟轮中，任务A被放到第0槽位，任务B被放到第6槽位，任务C被放到下一层时间轮的第1槽位，如下面这张图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/6d/de/6da0e7a3dc3d327f7f7b7a3cf7f658de.jpg?wh=3172*1362\" alt=\"\" title=\"时钟轮任务分布示意图\"></p><p>当任务A刚被放到时钟轮，就被即刻执行了，因为它被放到了第0槽位，而当前时间轮正好跳到第0槽位（实际上还没开始跳动，状态为第0跳）；600毫秒之后，时间轮已经进行了6跳，当前槽位是第6槽位，第6槽位所有的任务都被取出执行；1秒钟之后，当前时钟轮的第9跳已经跳完，从新开始了第0跳，这时下一层时钟轮从第0跳跳到了第1跳，将第1槽位的任务取出，分布到当前的时钟轮中，这时任务C从下一层时钟轮中取出并放到当前时钟轮的第6槽位；1秒600毫秒之后，任务C被执行。</p><p><img src=\"https://static001.geekbang.org/resource/image/92/11/9224564f0bad64e130061e0bb1e07411.jpg?wh=6172*1589\" alt=\"\" title=\"任务C槽位转换示意图\"></p><p>看完了这个场景，相信你对时钟轮的机制已经有所了解了。在这个例子中，时钟轮的扫描周期仍是100毫秒，但是其中的任务并没有被过多的重复扫描，它完美地解决了CPU浪费的问题。</p><p>这个机制其实不难理解，但实现起来还是很有难度的，其中要注意的问题也很多。具体的代码实现我们这里不展示，这又是另外一个比较大的话题了。有兴趣的话你可以自行查阅下相关源码，动手实现一下。到哪里卡住了，我们可以在留言区交流。</p><h2>时钟轮在RPC中的应用</h2><p>通过刚才对时钟轮的讲解，相信你可以看出，它就是用来执行定时任务的，可以说在RPC框架中只要涉及到定时相关的操作，我们就可以使用时钟轮。</p><p>那么RPC框架在哪些功能实现中会用到它呢？</p><p>刚才我举例讲到的调用端请求超时处理，这里我们就可以应用到时钟轮，我们每发一次请求，都创建一个处理请求超时的定时任务放到时钟轮里，在高并发、高访问量的情况下，时钟轮每次只轮询一个时间槽位中的任务，这样会节省大量的CPU。</p><p>调用端与服务端启动超时也可以应用到时钟轮，以调用端为例，假设我们想要让应用可以快速地部署，例如1分钟内启动，如果超过1分钟则启动失败。我们可以在调用端启动时创建一个处理启动超时的定时任务，放到时钟轮里。</p><p>除此之外，你还能想到RPC框架在哪些地方可以应用到时钟轮吗？还有定时心跳。RPC框架调用端定时向服务端发送心跳，来维护连接状态，我们可以将心跳的逻辑封装为一个心跳任务，放到时钟轮里。</p><p>这时你可能会有一个疑问，心跳是要定时重复执行的，而时钟轮中的任务执行一遍就被移除了，对于这种需要重复执行的定时任务我们该如何处理呢？在定时任务的执行逻辑的最后，我们可以重设这个任务的执行时间，把它重新丢回到时钟轮里。</p><h2>总结</h2><p>今天我们主要讲解了时钟轮的机制，以及时钟轮在RPC框架中的应用。</p><p>这个机制很好地解决了定时任务中，因每个任务都创建一个线程，导致的创建过多线程的问题，以及一个线程扫描所有的定时任务，让CPU做了很多额外的轮询遍历操作而浪费CPU的问题。</p><p>时钟轮的实现机制就是模拟现实生活中的时钟，将每个定时任务放到对应的时间槽位上，这样可以减少扫描任务时对其它时间槽位定时任务的额外遍历操作。</p><p>在时间轮的使用中，有些问题需要你额外注意：</p><ul>\n<li>时间槽位的单位时间越短，时间轮触发任务的时间就越精确。例如时间槽位的单位时间是10毫秒，那么执行定时任务的时间误差就在10毫秒内，如果是100毫秒，那么误差就在100毫秒内。</li>\n<li>时间轮的槽位越多，那么一个任务被重复扫描的概率就越小，因为只有在多层时钟轮中的任务才会被重复扫描。比如一个时间轮的槽位有1000个，一个槽位的单位时间是10毫秒，那么下一层时间轮的一个槽位的单位时间就是10秒，超过10秒的定时任务会被放到下一层时间轮中，也就是只有超过10秒的定时任务会被扫描遍历两次，但如果槽位是10个，那么超过100毫秒的任务，就会被扫描遍历两次。</li>\n</ul><p>结合这些特点，我们就可以视具体的业务场景而定，对时钟轮的周期和时间槽数进行设置。</p><p>在RPC框架中，只要涉及到定时任务，我们都可以应用时钟轮，比较典型的就是调用端的超时处理、调用端与服务端的启动超时以及定时心跳等等。</p><h2>课后思考</h2><p>在RPC框架中，除了我说过的那几个例子，你还知道有哪些功能的实现可以应用到时钟轮？</p><p>欢迎留言和我分享你的答案，也欢迎你把文章分享给你的朋友，邀请他加入学习。我们下节课再见！</p>","comments":[{"had_liked":false,"id":203119,"user_name":"雨霖铃声声慢","can_delete":false,"product_type":"c1","uid":1052607,"ip_address":"","ucode":"656D98310C6DA3","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/bf/ee93c4cf.jpg","comment_is_top":false,"comment_ctime":1586141864,"is_pvip":false,"replies":[{"id":"76878","content":"是的，真棒","user_name":"作者回复","comment_id":203119,"uid":"1541007","ip_address":"","utype":1,"ctime":1586734473,"user_name_real":"何小锋"}],"discussion_count":8,"race_medal":0,"score":"164794899112","product_id":100046201,"comment_content":"时钟轮可以实现延时消息的功能，比如让一个任务几分钟之后发送一条消息出去。在比如可以实现订单过期功能，用户下单10分钟没付款，就取消订单，可以通过时钟轮实现。","like_count":39,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490772,"discussion_content":"是的，真棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586734473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1092218,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/7a/ae8c247d.jpg","nickname":"指尖以东","note":"","ucode":"1DEE134FE92FD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272936,"discussion_content":"不取消的话岂不是占用空间？如果恶意用户很多呢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590379326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1516600,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/wBjvGCCZmO0Bic0DrnG466y6hwPkibGevAV6E6FPfQEricvw5toL7a2HSgjhI83cCiadrUibIyVibkgbbMOHVxo7HA8Q/132","nickname":"距离30米","note":"","ucode":"5566D9AB9E47DE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586792,"discussion_content":"你服务挂了，这个时钟轮就没了，还是在mq队列来做这个事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662518561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1687292,"avatar":"https://static001.geekbang.org/account/avatar/00/19/be/fc/1151859a.jpg","nickname":"maxiao","note":"","ucode":"911C3487CD7B0E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580383,"discussion_content":"应用重启，及分布式情况下的任务调度都有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658135816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2343990,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c4/36/4f7239de.jpg","nickname":"codewor","note":"","ucode":"2715765269385B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332410,"discussion_content":"mq延迟的单位时间没有那么细的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607183078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246664,"avatar":"https://static001.geekbang.org/account/avatar/00/13/05/c8/2f849dfb.jpg","nickname":"山顶的洞","note":"","ucode":"D3E9E928A3FA62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252316,"discussion_content":"不取消，任务还是会执行，只不过直接返回了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588153398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391249,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3a/91/d894a61f.jpg","nickname":"好久不见","note":"","ucode":"283FDB7580D398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":238234,"discussion_content":"假如用户马上就付款了，怎么取消定时的消息呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587215888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1239557,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ea/05/c0d8014d.jpg","nickname":"一道阳光","note":"","ucode":"F35207CCCEC6E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1391249,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3a/91/d894a61f.jpg","nickname":"好久不见","note":"","ucode":"283FDB7580D398","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284568,"discussion_content":"任务马上付款，那么对应的时钟轮中的任务也会被删除掉。时钟轮中提供一个对外的删除接口。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592558310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":238234,"ip_address":""},"score":284568,"extra":""}]}]},{"had_liked":false,"id":203075,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1586136574,"is_pvip":false,"replies":[{"id":"76824","content":"是的，netty里面有实现","user_name":"作者回复","comment_id":203075,"uid":"1541007","ip_address":"","utype":1,"ctime":1586691548,"user_name_real":"何小锋"}],"discussion_count":1,"race_medal":0,"score":"108960318974","product_id":100046201,"comment_content":"在java里面和Netty框架里面有这个类，TimeWheel时钟轮模型。","like_count":26,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490754,"discussion_content":"是的，netty里面有实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586691548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203227,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1586158482,"is_pvip":true,"replies":[{"id":"76877","content":"👍","user_name":"作者回复","comment_id":203227,"uid":"1541007","ip_address":"","utype":1,"ctime":1586734441,"user_name_real":"何小锋"}],"discussion_count":5,"race_medal":0,"score":"66010667922","product_id":100046201,"comment_content":"时钟轮存取任务的时间复杂度是O(1)，相比之下优先队列的时间复杂度是O(logN)","like_count":15,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490803,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586734441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181000,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/48/432c4b74.jpg","nickname":"Micheal","note":"","ucode":"F5DA66A08BDCE4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252096,"discussion_content":"好吧，我一开始还想着为什么不用优先队列的方式解决。原来效率要低一些！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588141541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102385,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d2/31/f1bec7fc.jpg","nickname":"汉斯·冯·拉特","note":"","ucode":"29F14B0D938A02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344183,"discussion_content":"是的，优先级队列用了红黑树，时间复杂度nlogN，同时空间复杂度也高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611317338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2119325,"avatar":"https://static001.geekbang.org/account/avatar/00/20/56/9d/4b2a7d29.jpg","nickname":"ryanxw","note":"","ucode":"0B91EAC8D06EED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1102385,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d2/31/f1bec7fc.jpg","nickname":"汉斯·冯·拉特","note":"","ucode":"29F14B0D938A02","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541340,"discussion_content":"谁和你说的优先级队列使用的是红黑树？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640335146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":344183,"ip_address":""},"score":541340,"extra":""},{"author":{"id":2826205,"avatar":"","nickname":"hillwater","note":"","ucode":"FB16D5FCE8C7E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1102385,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d2/31/f1bec7fc.jpg","nickname":"汉斯·冯·拉特","note":"","ucode":"29F14B0D938A02","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590329,"discussion_content":"堆啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665662099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":344183,"ip_address":"上海"},"score":590329,"extra":""}]}]},{"had_liked":false,"id":217902,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1589641904,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40244347568","product_id":100046201,"comment_content":"定时任务相关解决方案：<br>1：线程休眠，可能需要N多线程<br>2：定时轮询，可能会空耗许多CPU轮询<br>3：时间轮，和时钟原理相似，规避1&#47;2的缺陷<br>只有涉及到定时任务，就可以使用时钟轮来解决，比如：<br>调用端超时处理、调用端和服务端的启动超时处理、定时心跳检测、延迟消息队列的延迟消息发送等。<br>netty框架中就有时钟轮的实现，可以研究一下。","like_count":9,"discussions":[{"author":{"id":2028952,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/98/c490d236.jpg","nickname":"小团","note":"","ucode":"B81FD9742B1F22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321328,"discussion_content":"时间轮，和时钟原理相似，规避1/2的缺陷？怎么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604564898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203044,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1586126578,"is_pvip":false,"replies":[{"id":"76872","content":"一般都是统一划分，时间轮主要解决是长时间没有触发的问题，不解决实时性","user_name":"作者回复","comment_id":203044,"uid":"1541007","ip_address":"","utype":1,"ctime":1586734078,"user_name_real":"何小锋"}],"discussion_count":3,"race_medal":0,"score":"40240832242","product_id":100046201,"comment_content":"时钟轮这个我头一次听到，老师如果并发线程比较多，单位时间是不是划分很细啊，但是我有个疑问例如我同时有5个线程几乎之间间隔3到5毫秒，又有3个线程10到100毫秒的，我时钟轮也得调整具体怎么划分的，这么短时间内如何保证时钟轮准确性，老师哪有参考代码学习一下","like_count":9,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490745,"discussion_content":"一般都是统一划分，时间轮主要解决是长时间没有触发的问题，不解决实时性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586734078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1197455,"avatar":"https://static001.geekbang.org/account/avatar/00/12/45/8f/a56b2214.jpg","nickname":"innocent","note":"","ucode":"368659A0DDE7E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":225666,"discussion_content":"参考netty","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586391186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113937,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/51/9d5cfadd.jpg","nickname":"好运来","note":"","ucode":"F469ED6CEFEF30","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222460,"discussion_content":"将时钟轮的槽位时间间隔设为1毫秒，每次轮询都是将轮询到当前的1毫秒内的任务全部取出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586146787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298036,"user_name":"🐠","can_delete":false,"product_type":"c1","uid":1664786,"ip_address":"","ucode":"2757135A36165F","user_header":"https://static001.geekbang.org/account/avatar/00/19/67/12/51b78d88.jpg","comment_is_top":false,"comment_ctime":1623895031,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"14508796919","product_id":100046201,"comment_content":"请问老师，为什么说多层时间轮中的任务会被重复扫描呢？就上面例子的任务C来说，它处于下一层的第1个槽位，那么经过1s后，它被分布到当前的时间轮中，然后经过600ms后跳动到当前时间轮的第6个槽位，此时才会触发任务C。重复扫描的意思就是说在下一层的第1个槽位被扫描过一次，然后在当前时间轮的第6个槽位又被扫描过一次吗？","like_count":3,"discussions":[{"author":{"id":1018132,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/14/71bcd25e.jpg","nickname":"风","note":"","ucode":"6FCC11027BBE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580026,"discussion_content":"可能意思说的是这个任务c会被访问两次","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657814828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277642,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1612503186,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5907470482","product_id":100046201,"comment_content":"调用方的异常重试也可以考虑使用时间轮。感触：软件设计的本质都是生活~","like_count":1},{"had_liked":false,"id":215942,"user_name":"鸠摩智","can_delete":false,"product_type":"c1","uid":1106201,"ip_address":"","ucode":"853E584FC4CD64","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/19/c756aaed.jpg","comment_is_top":false,"comment_ctime":1589156902,"is_pvip":true,"discussion_count":7,"race_medal":0,"score":"5884124198","product_id":100046201,"comment_content":"redis中的key的超时是不是也用时钟轮实现的？","like_count":1,"discussions":[{"author":{"id":1300039,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d6/47/cc5d9ca9.jpg","nickname":"WKQ","note":"","ucode":"CDD650679EAD50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302103,"discussion_content":"不是，redis的key是惰性删除，每次随机取一部分看是否过期","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598789818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1351487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9f/3f/a51e6376.jpg","nickname":"IT之眼","note":"","ucode":"AB0F40D96C38D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1300039,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d6/47/cc5d9ca9.jpg","nickname":"WKQ","note":"","ucode":"CDD650679EAD50","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325157,"discussion_content":"问的是过期。超时过期和超时删除是两回事。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605246556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302103,"ip_address":""},"score":325157,"extra":""},{"author":{"id":1500742,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUcSLVV6ia3dibe7qvTu8Vic1PVs2EibxoUdx930MC7j2Q9A6s4eibMDZlcicMFY0D0icd3RrDorMChu0zw/132","nickname":"Tesla","note":"","ucode":"98629AFD9861EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1351487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9f/3f/a51e6376.jpg","nickname":"IT之眼","note":"","ucode":"AB0F40D96C38D9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534249,"discussion_content":"请教一下过期和删除的区别是什么？redis正常情况下的删除不是删除过期的key嘛，有查询过期key时的删除 有定时任务的删除？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638149537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325157,"ip_address":""},"score":534249,"extra":""}]},{"author":{"id":2826205,"avatar":"","nickname":"hillwater","note":"","ucode":"FB16D5FCE8C7E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590330,"discussion_content":"redis如果设置一个很久的过期时间，那这个key会被无限次重复扫描","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665662381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1433178,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJMzj0MHiaXBdDFp4E16qhu6PZlu6xkJRWgaoJXOeqMDDLqM4vcvUbnVLiactTypZkYibOg7okwm2TAQ/132","nickname":"Geek_921929","note":"","ucode":"26BF6978F040BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338494,"discussion_content":"redis不能用时间轮，因为是正无穷的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609300751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1433178,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJMzj0MHiaXBdDFp4E16qhu6PZlu6xkJRWgaoJXOeqMDDLqM4vcvUbnVLiactTypZkYibOg7okwm2TAQ/132","nickname":"Geek_921929","note":"","ucode":"26BF6978F040BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338493,"discussion_content":"不是，redis记录的是绝对时间，过期时间是和当前时间计算的差值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609300729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","nickname":"QQ怪","note":"","ucode":"1A39B8433D9208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273025,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590394615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359588,"user_name":"hillwater","can_delete":false,"product_type":"c1","uid":2826205,"ip_address":"上海","ucode":"FB16D5FCE8C7E6","user_header":"","comment_is_top":false,"comment_ctime":1665662702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665662702","product_id":100046201,"comment_content":"时间槽里面的任务用什么数据结构维护呢，hashmap？","like_count":0},{"had_liked":false,"id":352436,"user_name":"Hugo","can_delete":false,"product_type":"c1","uid":1399370,"ip_address":"","ucode":"95D22A07EF2B85","user_header":"https://static001.geekbang.org/account/avatar/00/15/5a/4a/856ea384.jpg","comment_is_top":false,"comment_ctime":1658670672,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658670672","product_id":100046201,"comment_content":"文中提到，时间轮的槽位越多，那么一个任务被重复扫描的概率就越小，因为只有在多层时钟轮中的任务才会被重复扫描。<br>这里为什么会重复扫描呢<br>","like_count":0},{"had_liked":false,"id":333245,"user_name":"漆黑的小白","can_delete":false,"product_type":"c1","uid":2435535,"ip_address":"","ucode":"C8FF1577C6FBDC","user_header":"https://static001.geekbang.org/account/avatar/00/25/29/cf/db5be02a.jpg","comment_is_top":false,"comment_ctime":1644227899,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644227899","product_id":100046201,"comment_content":"第一次听到时间轮还是在kafka里，拿来做一些轻量级的延时处理还挺不错的","like_count":0},{"had_liked":false,"id":298614,"user_name":"锦","can_delete":false,"product_type":"c1","uid":1468298,"ip_address":"","ucode":"CB0EB4B68C468B","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","comment_is_top":false,"comment_ctime":1624237975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624237975","product_id":100046201,"comment_content":"在实际开发中，单层时间轮和多层时间轮哪个用得多呢？","like_count":0},{"had_liked":false,"id":291774,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1620471298,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620471298","product_id":100046201,"comment_content":"定时心跳这个，可以用定时任务线程池来实现，底层是用延时队列来保存任务，普通的线程是队列中取出任务执行就完了，定时任务 ，可以从队列 取出任务，然后在重设时间，放回任务队列。","like_count":0},{"had_liked":false,"id":265877,"user_name":"司空摘星","can_delete":false,"product_type":"c1","uid":2082272,"ip_address":"","ucode":"B1B6BC53F432B0","user_header":"https://static001.geekbang.org/account/avatar/00/1f/c5/e0/7bbb6f3a.jpg","comment_is_top":false,"comment_ctime":1607059831,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1607059831","product_id":100046201,"comment_content":"为什么要自己实现时间轮，简单的超时回调不行吗？","like_count":0,"discussions":[{"author":{"id":2343990,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c4/36/4f7239de.jpg","nickname":"codewor","note":"","ucode":"2715765269385B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332411,"discussion_content":"说的就是框架怎么实现超时处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607183149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247398,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1599701186,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1599701186","product_id":100046201,"comment_content":"貌似jdk的优先级队列也可以实现到期任务的优化扫描。","like_count":0,"discussions":[{"author":{"id":1508990,"avatar":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","nickname":"西门吹牛","note":"","ucode":"E5D3624DDE1E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372824,"discussion_content":"你说的是延时队列吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620471355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222764,"user_name":"lucas","can_delete":false,"product_type":"c1","uid":1064052,"ip_address":"","ucode":"2AE7992B0EA534","user_header":"https://static001.geekbang.org/account/avatar/00/10/3c/74/580d5bbb.jpg","comment_is_top":false,"comment_ctime":1590908419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590908419","product_id":100046201,"comment_content":"技术的思想很多都是源于生活","like_count":0},{"had_liked":false,"id":218631,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1589848234,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1589848234","product_id":100046201,"comment_content":"时间轮，是不停的走动。怎么动态新添加？","like_count":0,"discussions":[{"author":{"id":1243901,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","nickname":"fcb的鱼","note":"","ucode":"88667EBF09CEC0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275705,"discussion_content":"每次添加的时候都是以当前执行的时间点为基准进行添加的！比如你一共10个槽位，每个槽100毫秒，如果当前运行到第二个槽位你要添加300毫秒后执行的任务时，你需要就当前200作为基准加上300那么任务就会放到500这个槽位，再过300后就能执行了！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590756843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1239557,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ea/05/c0d8014d.jpg","nickname":"一道阳光","note":"","ucode":"F35207CCCEC6E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1243901,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","nickname":"fcb的鱼","note":"","ucode":"88667EBF09CEC0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284570,"discussion_content":"还要加上一个层数，是当前层执行还是下一层执行，这个层数根据当前线程执行的层数+超时时间/轮询一个周期的时间 来计算，当这个层数越来越大时，有没有可能超过long的最大值？可以在空闲时，没有任务时。把当前轮询线程层数重新置为0。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592558913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":275705,"ip_address":""},"score":284570,"extra":""}]}]},{"had_liked":false,"id":217894,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1589640066,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589640066","product_id":100046201,"comment_content":"头次听说这个东西，主要解决定时任务相关的不断轮询过多耗CPU的问题。优秀代码，真应该好好研究一下。","like_count":0},{"had_liked":false,"id":214337,"user_name":"719","can_delete":false,"product_type":"c1","uid":1089173,"ip_address":"","ucode":"71DA8FAA93AD8A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqMevH71ChH7gIJ18A79xFWnGicsbebuREjPYxzLMzwtX08icapU3hmsGpF1zZ2iayDt2ZoMiaic0PcG3g/132","comment_is_top":false,"comment_ctime":1588726753,"is_pvip":false,"replies":[{"id":"80439","content":"应该是不同场景吧","user_name":"作者回复","comment_id":214337,"uid":"1541007","ip_address":"","utype":1,"ctime":1589500261,"user_name_real":"何小锋"}],"discussion_count":2,"race_medal":0,"score":"1588726753","product_id":100046201,"comment_content":"提高扫描定时任务效率还有一种方法是所有定时任务放入按照时间排序的优先队列，每次只扫描队首节点。从性能上看，哪种方法好一些？","like_count":0,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494028,"discussion_content":"应该是不同场景吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589500261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2826205,"avatar":"","nickname":"hillwater","note":"","ucode":"FB16D5FCE8C7E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590331,"discussion_content":"时间轮适合大量短时间的任务，优先队列适合任意时间的任务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665662597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}