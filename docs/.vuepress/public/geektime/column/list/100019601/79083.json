{"id":79083,"title":"10 | 异常处理都有哪些陷阱？","content":"<p>上一讲中我们聊了聊怎么用好Java注解，今天我们谈谈怎么处理异常。</p><p>处理好异常状况是掌握一门编程语言的基础，也是我们编程离不开的基本功。相信你对异常处理的机制已经很熟悉了。异常处理便捷、灵活、好用。但是，越好用的东西，我们越容易忽视它的缺陷。异常处理就有很多我们容易忽视的陷阱。今天，我们来聊聊这些问题，以及该怎么处理这些问题。</p><h2>异常就是非正常</h2><p>异常状况，就是不正常的状况。</p><p>异常状况的处理会让代码的效率变低。一个流畅的业务，它实现代码的执行路径，理想的状况就是没有任何异常状况发生。否则，业务执行的效率就会大打折扣。既然这样，我们就不应该使用异常机制来处理正常的状况。</p><p>这一点不难理解。可是，由于一门语言无法理解什么样的状况是正常状况，什么样的状况又是异常状况，也就无法限制异常机制使用的具体场景。所以作为程序员，我们需要自己解决好这个问题，不要滥用了异常机制。</p><p>比如说，很多API的设计有检查参数有效性的方法。如果参数通过检验，就没有异常抛出，否则就会抛出异常。在使用这个方法的代码时，我们需要检查有没有抛出异常来确认参数是否有效。</p><pre><code>/**\n * Check if the user name is a registered name.        \n *\n * @throws IllegalArgumentException if the user name is invalid or\n *         not registered.\n */\nvoid checkUserName(String userName) {\n    // snipped\n}\n</code></pre><p>这是一个糟糕的设计！</p><p>在这个例子中，如果userName字符串不符合规范，这是一个异常状况； 如果userName不是一个注册用户，这通常是一个正常状况。 在正常状况下使用异常处理，无疑会降低系统的效率，以及编码的效率。</p><!-- [[[read_end]]] --><p>所以正常的状况和异常的状况一定要分开、分清，不能混用。</p><pre><code>/**\n * Check if the user name is a registered name.        \n *\n * @return true if the userName is a registered name.\n * @throws IllegalArgumentException if the user name is invalid\n */\nboolean isRegisteredUser(String userName) {\n    // snipped\n}\n</code></pre><h2>分清异常的类别</h2><p>我们上面讲了异常的一些基本概念，现在我们来讲讲异常的类别。在Java语言里，异常状况分为三类。</p><ul>\n<li>\n<p><strong>非正常异常</strong>（Error）：这类异常的命名以Error结尾，比如OutOfMemoryError，NoSuchMethodError。这类异常，编译器编译时不检查，应用程序不需要处理，接口不需要声明，接口规范也不需要纪录；</p>\n</li>\n<li>\n<p><strong>运行时异常</strong>（RuntimeException）：这类异常的命名通常以Exception结尾，比如IllegalArgumentException，NullPointerException。这类异常，编译器编译时不检查，接口不需要声明，但是应用程序可能需要处理，因此接口规范需要记录清楚；</p>\n</li>\n<li>\n<p><strong>非运行时异常</strong>：除了运行时异常之外的其他的正常异常都是非运行时异常，比如InterruptedException，GeneralSecurityException。和运行时异常一样，命名通常以Exception结尾。这类异常，编译器编译时会检查异常是否已经处理或者可以抛出，接口需要声明，应用程序需要处理，接口规范需要记录清楚。</p>\n</li>\n</ul><p>通常我们说的异常，指的是运行时异常和非运行时异常。对于非正常异常，我们通常使用“错误”这个词汇而不是“异常”来表示。 由于非正常异常不需要特别处理，使用“错误”这个词汇，并不会导致使用方面的误导。</p><p>非运行时异常还有一个别名，叫作检查型异常（CheckedException）。对应地，运行时异常的别名是非检查型异常（UncheckedException）。 为了便于识别，我们通常使用检查型异常指代非运行时异常，使用运行时异常指代非检查型异常。</p><p><img src=\"https://static001.geekbang.org/resource/image/b3/b5/b3ef298ce41f79d3d2f54bc4581bd9b5.png?wh=511*220\" alt=\"\"><br>\n我们来看看两个例子，感受下运行时异常和检查型异常不同的处理方式。</p><p>下面这个例子中，IllegalArgumentException是运行时异常。虽然方法的声明中没有出现IllegalArgumentException，但是在方法的规范中，需要使用记录什么情况下抛出该异常。只有这样，方法的调用者才能知道什么时候异常会抛出，该采取什么样的处理办法。</p><pre><code>/**\n * Check if the user name is a registered name.\n *\n * @return true if the userName is a registered name.\n * @throws IllegalArgumentException if the user name is invalid\n */\nboolean isRegisteredUser(String userName) {\n    // snipped\n}\n</code></pre><p>下面这个例子中，CloneNotSupportedException是检查型异常。这样的异常，一定要出现在对应方法的声明中。</p><pre><code>/**\n * Returns a clone if the implementation is cloneable.\n *\n * @return a clone if the implementation is cloneable.\n *\n * @throws CloneNotSupportedException if this is called on an\n *         implementation that does not support {@code Cloneable}.\n */\npublic Object clone() throws CloneNotSupportedException {\n    // snipped\n}\n</code></pre><p>这三类异常的处理，可以用下表来总结。</p><p><img src=\"https://static001.geekbang.org/resource/image/83/fb/83dfc1cc1ff2c5df0a35326ca6ad4afb.png?wh=627*148\" alt=\"\"></p><h2>标记清楚抛出异常</h2><p>应用程序需要处理异常（CheckedException和RuntimeException），就需要我们在方法的规范描述文档中清楚地标记异常。没有标记的异常，应用程序没有办法通过文档了解哪些异常需要处理、什么状况下会抛出异常以及该怎么处理这些异常。</p><p>对于检查型异常，编译器或者IDE会友好地提醒使用合适的声明。我们一般不会遗漏检查型异常的声明。既然声明不会遗漏，异常的标记也通常不容易遗漏。 比如上面clone()方法的例子，CloneNotSupportedException已经在方法定义部分声明了。在方法规范描述部分，只要不遗漏这个异常的描述就好了。</p><p>然而，对于运行时异常，我们就没有这么幸运了。目前我们使用的编译器或者IDE，还没有提醒运行时异常遗漏的功能。由于没有工具的帮助，我们就很难发现运行时异常，这就很容易导致代码效率降低，错误增多。</p><p>我举个例子，在上面的检查用户名的例子中，如果我们不在方法的规范描述中记录抛出的运行时异常，该方法的使用立即就会遇到问题。</p><pre><code>/**\n * Check if the user name is a registered name.\n *\n * @return true if the userName is a registered name.\n */\nboolean isRegisteredUser(String userName) {\n    // snipped\n}\n</code></pre><p>其中最常见的问题包括：</p><ol>\n<li>\n<p>如果参数userName是一个无效引用（null），会发生什么状况，该怎么处理？</p>\n</li>\n<li>\n<p>如果参数userName是一个空字符串（“”），会发生什么状况，该怎么处理？</p>\n</li>\n<li>\n<p>如果参数userName不是一个规范的用户名，会发生什么状况，该怎么处理？</p>\n</li>\n</ol><p>每一个问题，都会降低使用者的效率，让使用者陷入难以摆脱的困扰。</p><p>如果代码的层次结构再多一层，这个问题就会更加严重：</p><pre><code>/**\n * Check if the {@code userName} is an authenticated user.\n *\n * @return true if the {@code userName} is an authenticated user.\n */\nboolean isAuthenticatedUser(String userName, String password) {\n    // WRONG, should catch or describe the thrown exception.\n    if (isRegisteredUser(userName)) {\n        // snipped      \n    } else {\n        // snipped\n    }\n    // snipped\n}\n</code></pre><p>如果一个方法既没有异常的声明，又没有异常的规范描述，调用者一般不会进行异常处理，也不在规范描述中加入抛出异常的描述。 这样的层次结构，只要稍微多个一两层，运行时异常虽然在代码和规范描述层面消失得无影无踪，但它并没有真正消失，依然会在运行时准时出现。</p><p>即使调用者拥有源代码，可以阅读源代码，也不容易意识到有运行时异常需要谨慎对待。代码的阅读者也不会有足够的精力和动力去深挖所有的层次，来确认有没有运行时异常。</p><p>由于编译器或者IDE并不能给我们太多的帮助，我们更需要谨慎、严格地处理好运行时异常。具体该怎么做呢？</p><ol>\n<li>\n<p>对于所有的可能抛出运行时异常，都要有清晰的描述，一个也不要错过；</p>\n</li>\n<li>\n<p>查看所有的调用方法的规范描述，确认抛出的异常要么已经处理，要么已经规范描述。</p>\n</li>\n</ol><p>如果我们都遵循了这两条运行时异常处理的办法，我们只需要查看一层代码的异常就可以了，这样无论是编码还是阅读代码，都会轻松不少。</p><h2>处理好捕获异常</h2><p>要想处理好异常，我们需要了解异常机制的基本原理。 我们一起回顾一下Java异常的四个要素：</p><ol>\n<li>\n<p>异常类名（IllegalArgumentException， FileNotFoundException）</p>\n</li>\n<li>\n<p>异常描述（“Invalid file path”）</p>\n</li>\n<li>\n<p>异常堆栈（at sun.security.ssl.InputRecord.read(InputRecord.java:504)）</p>\n</li>\n<li>\n<p>异常转换（Caused by: javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?）</p>\n</li>\n</ol><p>这四个要素满足了三个现实的异常处理问题：</p><ol>\n<li>\n<p>出了什么错？</p>\n</li>\n<li>\n<p>什么地方出了错？</p>\n</li>\n<li>\n<p>为什么会出错？</p>\n</li>\n</ol><p>其中，异常类名解决了“出了什么错”的问题；异常描述解决了“为什么会出错”的问题；异常堆栈解决了“什么地方出了错”的问题；而异常转换记录了不同场景对这三个问题的不同理解和不同处理。</p><p>其中JVM自动帮我们处理异常堆栈，我们需要特别关注的就只有三点了。</p><p>1.对于异常类名，我们要准确地选择异常类。</p><p>Exception类是一个包罗万象的超级异常类，如果我们使用Exception作为声明和抛出的异常，就不方便用户精准定位，从而解读和判断“出了什么错”。 类似的超级异常类还有RuntimeException、IOException等。 除非是超级的接口，否则我们应该尽量减少超级异常类的使用，而是选择那些意义明确、覆盖面小的异常类，比如FileNotFoundException。</p><p>2.对于异常描述，我们要清晰地描述异常信息。</p><p>虽然Java异常允许使用没有具体异常信息的异常，但是这种使用却容易丢失用户对于“为什么会出错”这个问题更精准的解读。 所以我不推荐使用没有描述信息的异常。</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/3c/b9485b59a003d569f4a3a2de46f0d43c.png?wh=627*89\" alt=\"\"><br>\n3.对于异常转换，我们要恰当地转换异常场景。</p><p>随着应用场景的转换，我们还需要转换异常的类型和描述。 比如，SQLException这种涉及具体实现细节的异常类就不太适合直接抛给最终的用户应用。 用户关心的是商业的逻辑，并不是实现的细节，这就需要我们随着使用场景调整异常。如果一股脑儿地把所有的异常抛到底，业务逻辑就会很混乱，用户体验也不好。</p><p>但是随着场景调整异常也不是没有代价的。这是一个妥协的选择，会带来一些负面的情况。</p><p>第一个情况，就是需要编写转换的代码，这当然没有异常一抛到底方便。</p><p>第二个情况，就是信息的冗余。如果转换场景有两三层，异常打印出来的堆栈信息就会很长，而最有用的信息其实只有最原始的异常。</p><p>第三个情况，就是信息的丢失。有些信息的丢失是有意的，比如对敏感信息的过滤而丢掉的异常信息。有些信息的丢失是无意的过失。信息的丢失很难让我们排查出异常问题，于是错误的源头被硬生生地隐匿了起来。所以，除非有明确的需求，我们要尽量保留所有的异常信息以及转换场景。</p><p><img src=\"https://static001.geekbang.org/resource/image/08/3f/08ef911dcf7311485b8b7831c422e43f.png?wh=625*376\" alt=\"\"><br>\n由于这些负面情况的存在，我们就更要谨慎地使用异常场景转换，特别是要认真权衡信息丢失的问题。</p><h2>小结</h2><p>今天我给你讲了处理异常的一些情况，它的小陷阱很多。单就编写规范的代码来说，我们要记住三条准则：</p><ol>\n<li>\n<p>不要使用异常机制处理正常业务逻辑；</p>\n</li>\n<li>\n<p>异常的使用要符合具体的场景；</p>\n</li>\n<li>\n<p>具体的异常要在接口规范中声明和标记清楚。</p>\n</li>\n</ol><p>你还知道哪些异常处理的陷阱呢？欢迎你分享在留言区，我们一起来学习。</p><h2>一起来动手</h2><p>下面的这段Java代码，它的异常处理有没有违反我们上面讨论的原则？你能够改进下面的代码吗？</p><p>欢迎你把优化的代码公布在讨论区，我们一起来讨论，看哪些地方我们可以做得更好。也欢迎你把今天的内容分享给协作的小伙伴，和他一起进步。</p><pre><code>import java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    /**\n     * Given an array of integers, return indices of the two numbers\n     * such that they add up to a specific target.\n     */\n    public int[] twoSum(int[] nums, int target) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        throw new IllegalArgumentException(&quot;No two sum solution&quot;);\n    }\n}\n</code></pre><p></p>","neighbors":{"left":{"article_title":"09 | 怎么用好Java注解？","id":78674},"right":{"article_title":"11 | 组织好代码段，让人对它“一见钟情”","id":79306}},"comments":[{"had_liked":false,"id":64552,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1548819081,"is_pvip":true,"replies":[{"id":"22862","content":"这个留言必须赞！","user_name":"作者回复","comment_id":64552,"uid":"1111315","ip_address":"","utype":1,"ctime":1548822183,"user_name_real":"范学雷"}],"discussion_count":3,"race_medal":1,"score":"194822347401","product_id":100019601,"comment_content":"当方法中返回的数组或集合，会有为空的情况，不要直接返回 null（会强迫调用方需要进行判空处理，否则可能出现 NullPointerException），最好返回大小为 0 的数组或集合。<br><br>其实分配一个空数组或集合所花费的时间和空间，性能损坏是很小到基本可以忽略不计的。同时，如果返回的空数组或者集合是 immutable（即不可变的）的话，可以进一步定义成 static final（对于数组而言）或者 Collections.emptyList()&#47;emptyMap()&#47;emptySet()，来公用同一个对象，减少性能影响。","like_count":46,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438065,"discussion_content":"这个留言必须赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548822183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1273306,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epXxiaZoxYCUM6ppy3SpQmeEL3JqicRhLI9NhMsibBAQRHoNWibJwvCZ8DfQKlfJxUYe8pP44ufiaSqUtg/132","nickname":"Gavin","note":"","ucode":"B8F5B500DFA829","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334849,"discussion_content":"不管接口是否返回null 或者空集合，调用方就得判空，如果是网络中断，注册中心失效，超时，返回的就是 null 。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608010781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133711,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4c/8f/a90b3969.jpg","nickname":"oldman","note":"","ucode":"6BACE2832B4429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60390,"discussion_content":"为什么会有返回空的情况？求解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574729965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63574,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1548403830,"is_pvip":false,"replies":[{"id":"22535","content":"改的很赞！<br><br>另外，有一个小技巧和你分享一下。如果返回值是空值（null），如果调用代码没有检查空值就调用，会抛除NullPointerException异常。如果返回空数组（int[0]）, 就不会出现这个问题了。 这个小技巧可以减少调用代码的错误，这样设计的接口比较皮实耐用。如果返回值是数组或者集合，我们通常使用这一个技巧。","user_name":"作者回复","comment_id":63574,"uid":"1111315","ip_address":"","utype":1,"ctime":1548480009,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"48793044086","product_id":100019601,"comment_content":"1. 没找到结果应该是正常业务，不用抛出异常<br>2. 缺失必要的参数校验<br><br>import java.util.HashMap;<br>import java.util.Map;<br><br>class Solution {<br>    &#47;**<br>     * Given an array of integers, return indices of the two numbers<br>     * such that they add up to a specific target.<br>     * return null if nums==null or nums.length==0 or result not found.<br>     *&#47;<br>    public int[] twoSum(int[] nums, int target) {<br>    \t\tif(nums==null || nums.length==0){<br>    \t\t\t\treturn null;<br>    \t\t}<br>        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();<br>        for (int i = 0; i &lt; nums.length; i++) {<br>            int complement = target - nums[i];<br>            if (map.containsKey(complement)) {<br>                return new int[] { map.get(complement), i };<br>            }<br>            map.put(nums[i], i);<br>        }<br>        return null;<br>    }<br>}<br>","like_count":12,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437644,"discussion_content":"改的很赞！\n\n另外，有一个小技巧和你分享一下。如果返回值是空值（null），如果调用代码没有检查空值就调用，会抛除NullPointerException异常。如果返回空数组（int[0]）, 就不会出现这个问题了。 这个小技巧可以减少调用代码的错误，这样设计的接口比较皮实耐用。如果返回值是数组或者集合，我们通常使用这一个技巧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548480009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80813,"user_name":"木白","can_delete":false,"product_type":"c1","uid":1194009,"ip_address":"","ucode":"BEC459430B293C","user_header":"https://static001.geekbang.org/account/avatar/00/12/38/19/c8d72c61.jpg","comment_is_top":false,"comment_ctime":1553737195,"is_pvip":false,"replies":[{"id":"29395","content":"坏消息是，即使我们记住了所有的JDK异常类，也仅仅是异常世界的一小部分，不够用的。 好消息是，没有人能记住即便是JDK这么少的异常类，所有我们也不要折磨自己去记住所有的异常。<br><br>首先要记住，异常是一个可以扩展的类，需要时可以自己定义。所以，你的应用可以有自己定义的异常类。<br><br>弄不清楚使用哪种异常，有两种情况比较典型，一种是不了解调用的类；另一种是不了解自己编写的代码的逻辑。这两条清楚了，异常就清楚了。这两条不清楚，代码也很难清楚。<br><br>异常就不正常的状况。不正常的状况是什么，搞清楚了，异常该是什么也就知道了八九分。然后，去找合适的现存异常类，或者定义新的异常类，剩下的一两分工作也就凑齐了。<br><br>比如说，我回复这条信息的时候，总是输错字母。要是用异常表示，这个不正常的状况就是“键盘输入信息错误”。 然后，在你使用的类库中，去寻找有没有表示这个不正常状况的异常，找到了就用。找不到，如果你想精确定义，就自己定义一个KeyboadInputException; 如果你不想定义新异常，就扩大概念，从“键盘输入信息错误&quot;扩大到&quot;输入信息错误&quot;。然后IOException就是大家都常用的异常了，然后你就可以使用new IOException(&quot;键盘输入信息错误&quot;)来表示“键盘输入信息错误”这个不正常状况了。<br><br>就这样，了解的代码，了解了不正常的状况到底是什么状况。","user_name":"作者回复","comment_id":80813,"uid":"1111315","ip_address":"","utype":1,"ctime":1553747621,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"35913475563","product_id":100019601,"comment_content":"“ 对于异常类名，我们要准确地选择异常类。”   老师，我们应该怎么去快速准确地知道需要抛哪个异常呢？因为有时候只是觉得应该做异常检测，但是属于哪种异常自己也描述不清楚。需要把jdk中的异常都记下来吗？我就是那种直接抛Exception异常的。","like_count":7,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444987,"discussion_content":"坏消息是，即使我们记住了所有的JDK异常类，也仅仅是异常世界的一小部分，不够用的。 好消息是，没有人能记住即便是JDK这么少的异常类，所有我们也不要折磨自己去记住所有的异常。\n\n首先要记住，异常是一个可以扩展的类，需要时可以自己定义。所以，你的应用可以有自己定义的异常类。\n\n弄不清楚使用哪种异常，有两种情况比较典型，一种是不了解调用的类；另一种是不了解自己编写的代码的逻辑。这两条清楚了，异常就清楚了。这两条不清楚，代码也很难清楚。\n\n异常就不正常的状况。不正常的状况是什么，搞清楚了，异常该是什么也就知道了八九分。然后，去找合适的现存异常类，或者定义新的异常类，剩下的一两分工作也就凑齐了。\n\n比如说，我回复这条信息的时候，总是输错字母。要是用异常表示，这个不正常的状况就是“键盘输入信息错误”。 然后，在你使用的类库中，去寻找有没有表示这个不正常状况的异常，找到了就用。找不到，如果你想精确定义，就自己定义一个KeyboadInputException; 如果你不想定义新异常，就扩大概念，从“键盘输入信息错误&amp;quot;扩大到&amp;quot;输入信息错误&amp;quot;。然后IOException就是大家都常用的异常了，然后你就可以使用new IOException(&amp;quot;键盘输入信息错误&amp;quot;)来表示“键盘输入信息错误”这个不正常状况了。\n\n就这样，了解的代码，了解了不正常的状况到底是什么状况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553747621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63446,"user_name":"草原上的奔跑","can_delete":false,"product_type":"c1","uid":1120348,"ip_address":"","ucode":"D69C617F767736","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/5c/1a58e8f6.jpg","comment_is_top":false,"comment_ctime":1548376411,"is_pvip":false,"replies":[{"id":"22450","content":"找的都对。你想到怎么修改了吗？","user_name":"作者回复","comment_id":63446,"uid":"1111315","ip_address":"","utype":1,"ctime":1548379103,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"10138311003","product_id":100019601,"comment_content":"课后习题，1.使用异常处理正常的业务逻辑。2.异常没有在接口规范中标记清楚。3.异常类名感觉用在这里不合适","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437587,"discussion_content":"找的都对。你想到怎么修改了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548379103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194964,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1585124369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880091665","product_id":100019601,"comment_content":"1.我把异常分为 业务异常和系统异常。业务异常 = 需要人工接入处理的异常（重试也没用）。 系统异常 = 非业务异常，既重试可以成功的。然后处理就是业务异常不会重试，但会以告警方式通知业务方。 系统异常会重试，但会记录重试次数，达到阀值也会告警到开发侧。<br><br>2.然后这样分，对照上文就有问题。因为业务异常里面，即包含数据异常也包含正常业务场景（两个场景都需要人工介入才能成功）。语义上确实有歧义，但使用的场景却是合适的。因为如果我把，正常业务场景，这个情况不用业务异常的方式统一处理。那么我就需要在方法每一层嵌套都带上returnObj（有时候本来就有returnObject，不走异常还要为这个returnObj加上字段来描述场景）。以此带了的就是阅读会很费劲。 因为我既要关注异常也要关注返回。<br><br>2.所以，如果场景符合，牺牲语义是不是也是可选项。毕竟就这两种操作来看，我们的最终目标都是提高代码可读性。","like_count":1},{"had_liked":false,"id":72715,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1551701147,"is_pvip":false,"replies":[{"id":"26378","content":"deal()能不能不抛出异常？或者不正常的时候抛出异常，正常的业务不抛出异常？<br><br>使用线程处理更复杂，还不如捕获异常呢。","user_name":"作者回复","comment_id":72715,"uid":"1111315","ip_address":"","utype":1,"ctime":1551744344,"user_name_real":"范学雷"}],"discussion_count":2,"race_medal":1,"score":"5846668443","product_id":100019601,"comment_content":"老师，请教一个问题，在写定时任务的业务时，一开始从表中提取一些记录，然后针对每条记录进行业务处理（业务处理有事务），如果业务处理成功，则更新这条记录状态为A，如果业务处理失败，则更新这条记录状态为B，此时我就感觉违背了“不要用异常处理业务逻辑”这条规则，老师有什么好建议。另外，我想到的是用两个线程处理 ，主线程更新状态，子线程处理业务逻辑，但是需要线程间同步。<br>public void execute(){<br>List&lt;T&gt; rows = list();<br>for(T t:rows){<br>    try{<br>      deal(t);<br>      updateStatus(&quot;A&quot;);<br>    }catch(Exception ex){<br>       updateStatus(&quot;B&quot;);<br>    }<br>}<br>}","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441705,"discussion_content":"deal()能不能不抛出异常？或者不正常的时候抛出异常，正常的业务不抛出异常？\n\n使用线程处理更复杂，还不如捕获异常呢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551744344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2624291,"avatar":"","nickname":"Geek_d81543","note":"","ucode":"A465D3AB377A66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374131,"discussion_content":"个人认为写业务用你的方法其实更好，否则业务复杂还要很多判断才能做到不抛，有这时间不如搞些其他的。基础项目除外。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621037041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65789,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1549642000,"is_pvip":false,"replies":[{"id":"23267","content":"新春快乐！<br><br>JDK的习惯是，不论是null还是空的集合、数组，都在文档描述中标记清楚。这样，调用者能确切地知道该怎么检查。","user_name":"作者回复","comment_id":65789,"uid":"1111315","ip_address":"","utype":1,"ctime":1549679979,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"5844609296","product_id":100019601,"comment_content":"思考题：<br>1. 对输入数组需进行预判<br>2. 方法内如果有异常抛出，需进行标记描述<br>3. 异常名称名不副实<br><br>import java.util.HashMap;<br>import java.util.Map;<br><br>class Solution {<br>    &#47;**<br>     * Given an array of integers, return indices of the two numbers<br>     * such that they add up to a specific target.<br>     *&#47;<br>    public int[] twoSum(int[] nums, int target) {<br>        if (nums == null || nums.length ==0) {<br>            return new int[0];<br>        }<br><br>        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();<br>        for (int i = 0; i &lt; nums.length; i++) {<br>            int complement = target - nums[i];<br>            if (map.containsKey(complement)) {<br>                return new int[] { map.get(complement), i };<br>            }<br>            map.put(nums[i], i);<br>        }<br>        <br>        return new int[0];<br>    }<br>}<br><br>最后还想问下，如果说是 return 的不是 null 而是空数组，是不是就不需要在文档描述中标记写明？<br><br>年过了一半了，看看自己拉下的章节还有不少，得抓紧了，祝老师新的一年心想事成，身体健康，工作生活一切顺利～ 今年励志一定要好好和你学写代码，稳扎稳打，快速成长","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438588,"discussion_content":"新春快乐！\n\nJDK的习惯是，不论是null还是空的集合、数组，都在文档描述中标记清楚。这样，调用者能确切地知道该怎么检查。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549679979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351714,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1658120951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658120951","product_id":100019601,"comment_content":"正常的业务逻辑不该抛异常","like_count":0},{"had_liked":false,"id":351713,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1658120922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658120922","product_id":100019601,"comment_content":"所以正常的状况和异常的状况一定要分开、分清，不能混用--记下来","like_count":0},{"had_liked":false,"id":347079,"user_name":"🤔","can_delete":false,"product_type":"c1","uid":1676962,"ip_address":"","ucode":"40ACB53BF3C6B1","user_header":"https://static001.geekbang.org/account/avatar/00/19/96/a2/c1596dd8.jpg","comment_is_top":false,"comment_ctime":1653701716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653701716","product_id":100019601,"comment_content":"都是java案例，应该改成java代码精进之路","like_count":0},{"had_liked":false,"id":322331,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1637305656,"is_pvip":true,"replies":[{"id":"117034","content":"第一次听说这样的话术，有意思！","user_name":"作者回复","comment_id":322331,"uid":"1111315","ip_address":"","utype":1,"ctime":1637310888,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1637305656","product_id":100019601,"comment_content":"想起我们以前抛异常常用的话术“服务器繁忙，请稍后重试”，服务器是够繁忙的，光是异常就变化万千。<br>不过，我们还是得和异常和谐相处~<br><br>异常处理的三条准则：<br>不要使用异常机制处理正常业务逻辑；<br>异常的使用要符合具体的场景；<br>具体的异常要在接口规范中声明和标记清楚。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531433,"discussion_content":"第一次听说这样的话术，有意思！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637310888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192037,"user_name":"余昭","can_delete":false,"product_type":"c1","uid":1055073,"ip_address":"","ucode":"29EEEA1BFFE16B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/sOvjoV6STk6SYPHRqVOo7DkiajY0KKuKLHSnDNvOKic5lllRNGEQo6W1oE6FrPiaSzUia1vCw9lqmV0vibCOtYtIfHQ/132","comment_is_top":false,"comment_ctime":1584822274,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584822274","product_id":100019601,"comment_content":" int类型运算要考虑结果越界的问题","like_count":0},{"had_liked":false,"id":96684,"user_name":"Sisyphus235","can_delete":false,"product_type":"c1","uid":1366359,"ip_address":"","ucode":"829CC4CE0FA96E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ooZCPFY1xgC81h0Eu3vuqbWG5MaBp8RNmvXXGQwupo2LpSOLq0rBlTDRAF1yM6wF09WdeG49rA9dJSVKIUBxnQ/132","comment_is_top":false,"comment_ctime":1558487753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558487753","product_id":100019601,"comment_content":"异常和错误是必须要分离的部分，错误必须抛出，异常要分清类型处理。<br>对于开发异常，应该及时抛出，在开发中解决；<br>对于生产中异常，要做好 log，及时报警，比如用 Sentry 处理 500 的服务器异常，用 log 记录核心功能的状态","like_count":0},{"had_liked":false,"id":73787,"user_name":"北风一叶","can_delete":false,"product_type":"c1","uid":1087302,"ip_address":"","ucode":"30310E66341D2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/46/fe1f21d8.jpg","comment_is_top":false,"comment_ctime":1552000567,"is_pvip":false,"replies":[{"id":"26946","content":"哈哈，看来你喜欢干脆的结论。","user_name":"作者回复","comment_id":73787,"uid":"1111315","ip_address":"","utype":1,"ctime":1552001910,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"1552000567","product_id":100019601,"comment_content":"异常的使用要符合具体的场景，这一条非常虚，不具备可执行性","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442279,"discussion_content":"哈哈，看来你喜欢干脆的结论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552001910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69723,"user_name":"拉格朗日的忧桑","can_delete":false,"product_type":"c1","uid":1312991,"ip_address":"","ucode":"5FCB2C6616E113","user_header":"https://static001.geekbang.org/account/avatar/00/14/08/df/4e5c2b29.jpg","comment_is_top":false,"comment_ctime":1550818971,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550818971","product_id":100019601,"comment_content":"从函数的单一职责规范来看，该方法for循环里面的逻辑可以提取出来，单独称为一个方法","like_count":0},{"had_liked":false,"id":66520,"user_name":"李星","can_delete":false,"product_type":"c1","uid":1149249,"ip_address":"","ucode":"6BB527DBF642C6","user_header":"https://static001.geekbang.org/account/avatar/00/11/89/41/c276dbda.jpg","comment_is_top":false,"comment_ctime":1549952531,"is_pvip":false,"replies":[{"id":"23617","content":"我们先来看看线程的主方法声明“public void run()”。这个声明没有抛出检查型异常，只能抛出运行时异常。所以，检查型异常一定要在线程的实现中得到处理；否则的话，编译器应该报错的。这个方法可以抛出运行时异常。一个线程，像一个普通的方法一样（run()），抛出运行时异常后，线程就终止了。问题在于，线程通常共享资源，如果线程之间有联系，很多事情就会发生，依赖于线程的具体实现逻辑。比如说，如果一个线程要等待另一个线程的I&#47;O，也许会阻塞。","user_name":"作者回复","comment_id":66520,"uid":"1111315","ip_address":"","utype":1,"ctime":1549991981,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"1549952531","product_id":100019601,"comment_content":"如果是异常没有被try-catch住的线程呢？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438819,"discussion_content":"我们先来看看线程的主方法声明“public void run()”。这个声明没有抛出检查型异常，只能抛出运行时异常。所以，检查型异常一定要在线程的实现中得到处理；否则的话，编译器应该报错的。这个方法可以抛出运行时异常。一个线程，像一个普通的方法一样（run()），抛出运行时异常后，线程就终止了。问题在于，线程通常共享资源，如果线程之间有联系，很多事情就会发生，依赖于线程的具体实现逻辑。比如说，如果一个线程要等待另一个线程的I/O，也许会阻塞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549991981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66319,"user_name":"李星","can_delete":false,"product_type":"c1","uid":1149249,"ip_address":"","ucode":"6BB527DBF642C6","user_header":"https://static001.geekbang.org/account/avatar/00/11/89/41/c276dbda.jpg","comment_is_top":false,"comment_ctime":1549929400,"is_pvip":false,"replies":[{"id":"23481","content":"当前线程是发生异常没处理的线程吗？ 还是不同的两个线程? 没太明白问题。","user_name":"作者回复","comment_id":66319,"uid":"1111315","ip_address":"","utype":1,"ctime":1549951479,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"1549929400","product_id":100019601,"comment_content":"想问一下作者，在多线程情况下时，当某一个线程发生运行时异常，并且不处理时，是否真的会阻塞当前线程呢？使得这个线程被废掉。？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438779,"discussion_content":"当前线程是发生异常没处理的线程吗？ 还是不同的两个线程? 没太明白问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549951479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63777,"user_name":"天佑","can_delete":false,"product_type":"c1","uid":1367369,"ip_address":"","ucode":"AFE2DBC0F31402","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/49/da7125ef.jpg","comment_is_top":false,"comment_ctime":1548497061,"is_pvip":false,"replies":[{"id":"22627","content":"简单的说，就是尽量不要使用断言。断言的设计是为了提高代码质量，可是断言一般有三个状态：断言是否启用；如果启用，断言是否成立。这让编码的逻辑很混乱，阅读的时候我们不一定能够把三个逻辑考虑周全，增加了编码错误的几率，降低了代码质量。","user_name":"作者回复","comment_id":63777,"uid":"1111315","ip_address":"","utype":1,"ctime":1548636745,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"1548497061","product_id":100019601,"comment_content":"大师，断言呢，使用场景是什么。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437715,"discussion_content":"简单的说，就是尽量不要使用断言。断言的设计是为了提高代码质量，可是断言一般有三个状态：断言是否启用；如果启用，断言是否成立。这让编码的逻辑很混乱，阅读的时候我们不一定能够把三个逻辑考虑周全，增加了编码错误的几率，降低了代码质量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548636745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63639,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1548426830,"is_pvip":false,"replies":[{"id":"22534","content":"有问题就留言，我们一起把疑惑的地方解决掉。","user_name":"作者回复","comment_id":63639,"uid":"1111315","ip_address":"","utype":1,"ctime":1548479475,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"1548426830","product_id":100019601,"comment_content":"看不懂java 看这个异常处理有点吃力 🤦‍♂️","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437666,"discussion_content":"有问题就留言，我们一起把疑惑的地方解决掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548479475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63459,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1079657,"ip_address":"","ucode":"0335277F255F7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/69/5960a2af.jpg","comment_is_top":false,"comment_ctime":1548379039,"is_pvip":false,"replies":[{"id":"22454","content":"练手题的问题找的都不错啊！","user_name":"作者回复","comment_id":63459,"uid":"1111315","ip_address":"","utype":1,"ctime":1548381301,"user_name_real":"范学雷"}],"discussion_count":1,"race_medal":0,"score":"1548379039","product_id":100019601,"comment_content":"这个小节看着懵懵的,看完之后完全不记得看了个啥,(╥╯^╰╥).还得看第二遍呀.  <br><br>后面的题目那个算是正常的业务,不应该用异常处理? 而且就算用异常处理了,方法的注释中也没有提及这个异常,那文档中就不会有这个异常的说明.<br><br>我看了半天就看了这个,能力还是有点弱,得加油呀!!!","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437596,"discussion_content":"练手题的问题找的都不错啊！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548381301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}