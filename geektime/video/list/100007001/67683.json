{"id":67683,"title":"133 |【实验】Spring Boot Actuator 监控实验","content":"无","comments":[{"had_liked":false,"id":235925,"user_name":"v杨Lilian奥力","can_delete":false,"product_type":"c3","uid":1106716,"ip_address":"","ucode":"400D4F0A146268","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/1c/1c9d0106.jpg","comment_is_top":false,"comment_ctime":1595247474,"is_pvip":false,"replies":[{"id":87607,"content":"如果spring boot应用部署在k8s中，prometheus&#47;grafana部署在集群外，这样监控起来会比较麻烦，因为很难在k8s集群外去发现k8s集群内的微服务实例。\n\n可以考虑通过调用k8s API发现服务实例 + kubectl port-forward等方式做到，但是也是比较麻烦的，你可以进一步研究下。\n参考，如何将k8s内部服务暴露出来的方法：\nhttps:&#47;&#47;blog.csdn.net&#47;yang75108&#47;article&#47;details&#47;101268208","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1595690406,"ip_address":"","comment_id":235925,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"杨老师，您好。假设这个视频讲的actuator-demo这个Spring Boot应用部署在了k8s环境里，而Prometheus+Grafana+Alertmanager还是部署在传统的Linux服务器里（意思是说：部署在了非k8s环境中），那么Prometheus是否还能监控到这个Spring Boot应用的jvm等信息？还是说：一旦Spring Boot应用部署在了k8s环境里，那么它只能被也部署在k8s环境里的Prometheus监控到、而它无法被部署在传统Linux服务器中的Prometheus给监控到？","like_count":3,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501883,"discussion_content":"如果spring boot应用部署在k8s中，prometheus/grafana部署在集群外，这样监控起来会比较麻烦，因为很难在k8s集群外去发现k8s集群内的微服务实例。\n\n可以考虑通过调用k8s API发现服务实例 + kubectl port-forward等方式做到，但是也是比较麻烦的，你可以进一步研究下。\n参考，如何将k8s内部服务暴露出来的方法：\nhttps://blog.csdn.net/yang75108/article/details/101268208","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595690406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224661,"user_name":"v杨Lilian奥力","can_delete":false,"product_type":"c3","uid":1106716,"ip_address":"","ucode":"400D4F0A146268","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/1c/1c9d0106.jpg","comment_is_top":false,"comment_ctime":1591499736,"is_pvip":false,"replies":[{"id":83117,"content":"这个petclinic微服务案例可以参考，里头有演示micrometer+promethues+grafana：\nhttps:&#47;&#47;github.com&#47;spring-petclinic&#47;spring-petclinic-microservices\n我在B站上的《k8s微服务监控》课程也有演示这个项目：\nhttps:&#47;&#47;www.bilibili.com&#47;video&#47;BV1Qi4y1b79r\n\n另外，这个样例也可以看看\nhttps:&#47;&#47;dzone.com&#47;articles&#47;using-micrometer-with-spring-boot-2\n","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1591803424,"ip_address":"","comment_id":224661,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"感谢杨老师答复。有个新问题：目前我不清楚如何用micrometer来实现自定义埋点监控Java应用（然后由Prometheus周期性地去抓）。所以能给个参考链接吗？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497559,"discussion_content":"这个petclinic微服务案例可以参考，里头有演示micrometer+promethues+grafana：\nhttps://github.com/spring-petclinic/spring-petclinic-microservices\n我在B站上的《k8s微服务监控》课程也有演示这个项目：\nhttps://www.bilibili.com/video/BV1Qi4y1b79r\n\n另外，这个样例也可以看看\nhttps://dzone.com/articles/using-micrometer-with-spring-boot-2\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591803424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223870,"user_name":"v杨Lilian奥力","can_delete":false,"product_type":"c3","uid":1106716,"ip_address":"","ucode":"400D4F0A146268","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/1c/1c9d0106.jpg","comment_is_top":false,"comment_ctime":1591199624,"is_pvip":false,"replies":[{"id":82673,"content":"两种方法都可以，第一种是直接用prometheus client，第二种是通过micrometer这个Facade去接入prometheus，背后也会通过prometheus client。\n\n第一种有一定耦合性，第二种micrometer好处是可以屏蔽后端metrics系统的具体实现。类似SLF4J这种Facade，后面可以对接log4j, logback，或者jdk logger，而且后面可以根据需要换。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1591456120,"ip_address":"","comment_id":223870,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"杨老师，您好。我发现自定义埋点监控Java应用有两种方法。第1个方法是利用Prometheus Client自定义埋点监控Java应用；第2个方法是利用micrometer_registry_prometheus自定义埋点监控Java应用。我这么说对吗？如果不对，请老师指正。另外，在做实际项目时，用哪种方法较好？选用那个方法的原因是什么？\n期待杨老师的快递答复","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497273,"discussion_content":"两种方法都可以，第一种是直接用prometheus client，第二种是通过micrometer这个Facade去接入prometheus，背后也会通过prometheus client。\n\n第一种有一定耦合性，第二种micrometer好处是可以屏蔽后端metrics系统的具体实现。类似SLF4J这种Facade，后面可以对接log4j, logback，或者jdk logger，而且后面可以根据需要换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591456120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89451,"user_name":"allen的微波炉","can_delete":false,"product_type":"c3","uid":1001457,"ip_address":"","ucode":"5581008B22B9BD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/f1/8b20dc76.jpg","comment_is_top":false,"comment_ctime":1556177010,"is_pvip":false,"replies":[{"id":32046,"content":"你好，报错显示是micrometer依赖版本有问题，参考https:&#47;&#47;micrometer.io&#47;docs提到Spring Boot 2.0是内置支持micrometer的，不需要单独声明依赖。Spring Boot 1.5.x才需要显式声明依赖。你可以尝试把micrometer的依赖声明去掉。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1556197164,"ip_address":"","comment_id":89451,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100007001,"comment_content":"使用springBootVersion = &#39;2.0.2.RELEASE&#39;，\n依赖为\ncompile group: &#39;io.micrometer&#39;, name: &#39;micrometer-registry-prometheus&#39;, version: &#39;1.1.2&#39;\ncompile group: &#39;io.micrometer&#39;, name: &#39;micrometer-spring-legacy&#39;, version: &#39;1.1.2&#39;\ncompile group: &#39;io.github.mweirauch&#39;, name: &#39;micrometer-jvm-extras&#39;, version: &#39;0.1.3&#39;\n结果报异常：\nCaused by: java.lang.NoSuchMethodError: io.micrometer.core.instrument.MeterRegistry$Config.onMeterRemoved(Ljava&#47;util&#47;function&#47;Consumer;)Lio&#47;micrometer&#47;core&#47;instrument&#47;MeterRegistry$Config;\n要如何修改才好呢？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448139,"discussion_content":"你好，报错显示是micrometer依赖版本有问题，参考https://micrometer.io/docs提到Spring Boot 2.0是内置支持micrometer的，不需要单独声明依赖。Spring Boot 1.5.x才需要显式声明依赖。你可以尝试把micrometer的依赖声明去掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556197164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}