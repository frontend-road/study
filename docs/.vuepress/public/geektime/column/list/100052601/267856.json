{"id":267856,"title":"30 | 程序库的设计：Moco是如何解决集成问题的？","content":"<p>你好，我是郑晔！</p><p>经过前面内容的讲解，我终于把软件设计的基础知识交付给你了，如果你有一定的经验，相信有很多东西你已经可以借鉴到日常工作中了。</p><p>但是对于一些同学来说，这些知识恐怕还是有些抽象。那在接下来的几讲中，我会给你讲几个例子，让你看看如何在日常的工作中，运用学到的这些知识，巩固一下前面所学。</p><p>我在<a href=\"https://time.geekbang.org/column/article/245878\">第9讲</a>说过，学习软件设计，可以从写程序库开始。所以，我们的巩固篇就从一个程序库开讲。这是我自己维护的一个开源项目 <a href=\"https://github.com/dreamhead/moco\">Moco</a>，它曾经获得 2013 年的 Oracle Duke 选择奖。</p><p>Moco 是用来做模拟服务器的，你既可以把它当作一个程序库用在自动化测试里，也可以把它单独部署，做一个独立的服务器。我们先来看一个用 Moco 写的测试，感受一下它的简单吧！</p><pre><code>public void should_return_expected_response() {\n  // 设置模拟服务器的信息\n  // 设置服务器访问的端口\n  HttpServer server = httpServer(12306);\n  // 访问/foo 这个 URI 时，返回 bar\n  server.request(by(uri(&quot;/foo&quot;))).response(&quot;bar&quot;); \n  \n  // 开始执行测试\n  running(server, new Runnable() {\n    // 这里用了 Apache HTTP库访问模拟服务器，实际上，可以使用你的真实项目\n    Content content = Request.Get(&quot;http://localhost:12306/foo&quot;)\n      .execute()\n      .returnContent();\n      \n    // 对结果进行断言\n    assertThat(content.asString(), is(&quot;bar&quot;));\n  });\n}\n</code></pre><p>这一讲，我就来说说它的设计过程，让你看看一个程序库是如何诞生以及成长的。</p><h2>集成的问题</h2><p>不知道你有没有发现，阻碍一个人写出一个程序库的，往往是第一步，也就是<strong>要实现一个什么样的程序库</strong>。因为对于很多人来说，能想到的程序库，别人都写了，再造一个轮子意义并不大。</p><p>但是，这种思路往往是站在理解结果的角度。其实，<strong>程序库和所有的应用一样，都是从一个要解决的问题出发。</strong>所以，在日常的繁忙工作中，我们需要偶尔抬头，想想哪些问题正困扰着我们，也许这就是一个程序库或者一个工具的出发点。</p><!-- [[[read_end]]] --><p>曾经有一个问题困扰了我好久，就是<strong>集成</strong>。还记得在我初入职场时，有一次，我们开发的系统要与第三方厂商的系统进行集成。可是，怎样才能知道我们与第三方集成的效果呢？我们想到的办法就是模拟一个第三方服务。</p><p>于是，作为当时的新人，我就承担起编写这个模拟服务的任务。那个时候还真是年少无知，居然自己写了一个 HTTP 服务器，然后又继续在上面写了应用协议。那时候的我完全没有编写程序库的意识，只是有人要求我返回什么样的应答，我就改代码，返回一个什么应答。</p><p>在我的职业生涯中，集成并不少见，只是后来我的经验多了，这种编写模拟服务的事就交到了别人的手上，我就成了那个让别人改来改去的人。</p><p>2012 年，我加入到一个海外合作的项目中，这个项目也有一个模拟的 HTTP 服务。开发人员根据自己的需要去改动代码，让这个模拟服务返回不同的应答。之后，他们再打出一个包，部署到一个 Web 服务器上。显然，这比我当年一个人维护模拟服务器要进步很多了，至少它不用考虑 HTTP 协议层面的问题了。</p><p>不过，依旧要自己部署模拟服务这一点，让我突然想起当年开发模拟服务时的景象。这么多年过去了，模拟服务却依然如此麻烦，没有得到任何好转，也许我可以做点什么。比起当年做软件开发的懵懂的我，工作了十多年的我，显然已经有了更多的知识储备。</p><h2>从问题到需求，再到解决方案</h2><p>那问题有了，我要怎么解决这个问题呢？我需要先把它变成一个可以下手解决的需求。首先，我要考虑的是，我希望这个模拟服务做成什么样子呢？</p><ul>\n<li>它可以支持配置，这样的话，我就不用每次都调整代码了；</li>\n<li>它可以独立部署，因为部署到应用服务器上的方式实在不够轻量级；</li>\n<li>它可以是一个通用的解决方案，因为我已经在多个不同的场景下遇到类似的问题。</li>\n</ul><p>除了这些正常的需求之外，我还有一个额外的小需求，就是希望它<strong>有一个有表达性的 DSL</strong>。因为我当时刚刚翻译完《领域特定语言》，特别想找个机会练练手。</p><p>以我当时的知识水平来看，配置肯定不是问题，这是任何一个程序员都可以做到的。独立部署，应该也可行，虽然当时还不流行嵌入式的 Web 服务器，但我还知道有 Netty 这样的网络编程框架，我稍微做了一点调研就发现，用它实现一个简单的 Web 服务器并不难。</p><p>问题就是，我怎样能把它做成一个通用的方案？</p><p>在设计中，其实最难的部分就在这里。一个特定的问题总有一个快速的解决方案，而要<strong>想做成一个通用方案，它就必须是一个通用的模式。这就需要我们把问题抽丝剥茧，把无关的信息都拿掉，才可能看到最核心的部分。</strong>而进行这种分析的的根基，同样是我们在前面说过的分离关注点。</p><p>我找到的核心问题就是，模拟服务到底是做什么的呢？其实，它就是按照我预期返回相应的应答。对，一方面，我要表达出预期；另一方面，它要给出返回的结果。</p><p>当我想明白这一点之后，一段代码浮现在我的脑海中：</p><pre><code>server.request(&quot;foo&quot;).response(&quot;bar&quot;);\n</code></pre><p>对，这就是这个模拟服务器最简单的样子。当请求是“foo”的时候，它就给出对应的应答“bar”，这个结构非常适用于 HTTP 这种请求应答的结构。这段代码简直太合我的胃口了，因为它还是一段内部 DSL，声明出这个模拟服务器的行为，我的额外需求也得到了满足。</p><p>如果代码真的可以做成这个样子，那它应该就可以写在单元测试里了。和现在一比，动辄需要启动整个应用，做人工的集成测试，这简直是一个巨大的飞跃。而且，从开发效率上看，这简直就是数量级的提升。</p><p>不过，上面只是给出了设置服务器的样子，如果我们要把它写到单元测试里，还要考虑到如何去启动和关闭服务器。于是，一段单元测试的代码就浮现了出来：</p><pre><code>public void should_return_expected_response() {\n  HttpServer server = httpServer(12306);\n  server.request(&quot;foo&quot;).response(&quot;bar&quot;);\n  running(server, new Runnable() {\n    Content content = Request.Post(&quot;http://localhost:12306&quot;)\n      .bodyString(&quot;foo&quot;, ContentType.TEXT_PLAIN)\n      .execute()\n      .returnContent();\n    assertThat(content.asString(), is(&quot;foo&quot;));\n  });\n}\n</code></pre><p>这就是 Moco 的第一个测试了。有了测试，我就该考虑如何让测试通过了。同时，测试帮我锁定了具体的目标，我还知道了可用的技术，剩下的就是把它实现出来了。</p><p>对于程序员而言，实现反而是最简单的。就这样，我花了一个周末的时间，翻着各种文档，让第一个测试通过了。如此一来，Moco 在实现上的技术难度就被突破了。</p><h2>基础设计的诞生</h2><p>接下来，我就要考虑 Moco 可以提供怎样的功能了。Moco 首先是一个 HTTP 的模拟服务器，所以，它需要对各种 HTTP 的元素进行支持。HTTP 的元素有哪些呢？其实，无非就是 HTTP 协议中可以看到的HTTP 协议版本、 URI、HTTP 方法、HTTP 头和HTTP 内容等等这些东西。</p><p>问题来了，如果我们要把 Moco 实现成一个通用的解决方案，我们就需要任意地组合这些元素，我们该如何设计呢？</p><p>你可能已经想到了，在前面我们讲函数式编程的组合性时，已经提到了要设计可以组合的接口。是的，Moco 就是这么做的。下面是一个例子，如果我们请求 /foo 这个 URI，请求的内容是 foo，那就返回一个 bar，我们还要把这个应答的状态码设置成 200。</p><pre><code>server\n  .request(and(by(&quot;foo&quot;), by(uri(&quot;/foo&quot;))))\n  .response(and(with(text(&quot;bar&quot;)), status(200)));\n</code></pre><p>在这里，传给 request 和 response 的就不再是一个简简单单的文本，而是一个元素的组合。</p><p>所以，传给 request 的，我称之为 RequestMatcher，也就是对请求进行匹配，匹配成功则返回 true，反之返回 false。而传给 response 的，我称之为 ResponseHandler，也就是对应答进行处理，在这里面设置应答中的各种元素。</p><p>这就是 Moco 最核心的两个模型。从 Moco 的第一个版本形成开始，一直没有变过。</p><pre><code>interface RequestMatcher {\n  boolean match(Request request);\n}\n\ninterface ResponseHandler {\n  void writeToResponse(Response response);\n}\n</code></pre><p>从这段代码上，你还可以看到用来组合各个元素的and。学过前面函数式编程的内容，想必你也知道了该如何实现它。除了 and，我还提供了 or 和 not 这样的元素，方便你更好地进行表达。</p><h2>扩展设计</h2><p>有了基础设计之后，其实 Moco 已经是一个可用的程序库了。从理论上来说，它已经能够完成HTTP 模拟服务器所有的需求了。事实上，当我拿出了 Moco 的第一个版本，就有同事在实际的项目中用了起来。</p><p>如同所有开源项目一样，只要有人用，就会有人给出反馈，你就需要去解决它。Moco 就这样，不经意间开启了自己的生命周期。</p><p>我在开篇词就说过，软件设计是一门关注长期变化的学问。长期意味着会有需求源源不断地扑面而来。每当有新问题的到来，软件就要去应对这个新的变化，这也是考验软件设计的时候。</p><p>第一个变化就是，有人提出要有一个外部的配置文件。Moco 所要做的调整，就是增加一个配置文件，然后要在配置文件和核心模型之间做一个映射。这个变化其实在核心模型上没有任何的改变。学了前面的课程，你也知道，这就相当于给 Moco 增加了一种外部 DSL，只不过，这个 DSL 的语法我采用了 JSON。</p><p>正是因为 JSON 配置文件的出现，Moco 有了一个全新的用法，就是把 Moco 当作了一个独立的模拟服务器。后来的很多人其实更熟悉的反而是这种用法，而把 Moco 用在单元测试的这种场景比例就要低一些。也是因为这个独立模拟服务器的用法，Moco 也不再局限于 Java，不同的程序设计语言编写的应用都可以与之进行交互，Moco 的使用范围得到了扩展。</p><p>随后，还有人提出了更多功能性上的需求，让 Moco 的能力也得到了极大的提升：</p><ul>\n<li>有些被模拟的服务不稳定，Moco 支持了一个 proxy 功能，将请求转发给被模拟服务。如果这个服务失效了，就使用本地缓存的信息；</li>\n<li>有些应答里的字段是根据请求的内容来的，Moco 支持了 template 功能，让使用者自己决定怎样使用哪个信息；</li>\n<li>有时还要对请求的内容，进行各种匹配。比如，URI 在同一个根目录下，就进行一样的处理，Moco 支持了 match 功能，让使用者自己可以写正则表达式，对请求进行匹配；</li>\n<li>有人为了方便管理，希望把所有的应答内容放到一个目录下，Moco 支持了 mount 功能，把一个目录挂载在一个 URI ；</li>\n<li>现在的 REST 开发是主流，Moco 支持了 REST 能力，能够定义资源，更方便地将同一资源的内容定义在一起；</li>\n<li>……</li>\n</ul><p>所有这些内容都是在基础的模型上扩展出来的，基本上都不需要去改动基础模型。不过，有一个功能的拓展影响了基础模型，就是 template。因为它需要根据请求的内容来决定应答的内容，这让原本各自独立的 request 和 response 开始有了关联。</p><p>为了适应 template 的需求，我在 ResponseHandler 的接口上增加了 Request，把请求信息带了进来：</p><pre><code>class SessionContext {\n    private final Request request;\n    private final Response response;\n    ...\n}\n\ninterface ResponseHandler {\n  void writeToResponse(SessionContext context);\n}\n</code></pre><p>也是由于这个调整，让 Moco 后来有了可以支持录制回放的能力：</p><pre><code>server\n  .request(by(uri(&quot;/record&quot;)))\n  .response(record(group(&quot;foo&quot;)));\n  \nserver\n  .request(by(uri(&quot;/replay&quot;)))\n  .response(replay(group(&quot;foo&quot;)));\n</code></pre><p>在这个设置中，我们发给 /record 这个地址的内容就可以记录下来，然后，访问 /replay 这个地址的时候，我们就可以得到刚才记录的内容。由此，Moco 由原来只提供静态设置的模拟服务器，变成了一个能够动态配置的模拟服务器，能力得到了进一步提升。</p><p>至此，你已经看到了 Moco 是怎么一点一点长大的。与 2012 年刚刚起步时相比，今天的 Moco 的能力已经强大了许多，但它的内核依然很小，代码量也不大。如果你希望研究一个有设计的代码，不妨从 Moco 入手，这个专栏讲到的不少内容都可以在 Moco 中看到影子。</p><p><strong>Moco 就是根据请求给出应答，只要理解了这么一个简单的逻辑，你就完全可以理解 Moco 在做的事情</strong>，其他的东西都是在这个基础上生长出来的。</p><h2>总结时刻</h2><p>今天，我给你讲了 Moco 的设计过程。一个好的软件也好，程序库也罢，都是从实际的问题出发的。阻碍一个程序员写出好的程序库的原因，往往是没有找到一个好问题去解决。<strong>程序员不能只当一个问题的解决者，还应该经常抬头看路，做一个问题的发现者。</strong></p><p>有了问题之后，<strong>需要把问题拆解成可以下手解决的需求</strong>，让自己有一个更明确的目标。然后，我们才是根据这个需求找到一个适当的解决方案。<strong>一个通用的解决方案需要不断地抽丝剥茧，抛开无关的部分，找到核心的部分</strong>，这同样根植于分离关注点。</p><p>如果最后的解决方案是一个程序库，那么，我们用测试把程序库要表达的内容写出来，就是最直接的。有了测试，就锁定了目标，剩下的就是让测试通过。</p><p>一个好的设计，应该找到一个最小的核心模型，所有其他的内容都是在这个核心模型上生长出来的，越小的模型越容易理解，相对地，也越容易保持稳定。</p><p>这一讲，我讲了一个程序库的设计。下一讲，我们再来看看如何设计一个应用。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>注意发现身边的小问题，用一个程序库或工具解决它。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/ce/8f/ce398c521cbc2793c0a8522b468f7a8f.jpg?wh=2284*2325\" alt=\"\"></p><h2>思考题</h2><p>最后，我想请你抬头看一下路，看看你在开发的过程中，发现过哪些阻碍研发过程的问题呢？欢迎在留言区分享你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":239542,"user_name":"jg4igianshu","can_delete":false,"product_type":"c1","uid":1059873,"ip_address":"","ucode":"DE1001BF2D383E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsia5hqVlTLn17lUBwSpSUzraib7MSH3gOUNWOx8qUwpz3Lp6gFtkIibOMUAouyMGj5RIeTcePUfNkw/132","comment_is_top":false,"comment_ctime":1596583035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48841223291","product_id":100052601,"comment_content":"https:&#47;&#47;github.com&#47;dreamhead&#47;moco","like_count":11},{"had_liked":false,"id":239640,"user_name":"人间四月天","can_delete":false,"product_type":"c1","uid":1048314,"ip_address":"","ucode":"11BE219C23EEBC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","comment_is_top":false,"comment_ctime":1596602707,"is_pvip":false,"replies":[{"id":"88511","content":"总结得很好！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1596615740,"ip_address":"","comment_id":239640,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40251308371","product_id":100052601,"comment_content":"真的很精辟，开发工作是很讲究套路的，从问题，需求，方案，设计，发现问题很关键，太多开发，眼睛里看不到问题，重复开发，功能不复用，不扩展，性能差，开发效率慢，系统质量低，工作中有太多的痛点，痛点即是问题，不追求问题本质，不勤于思考的开发，就是推代码，能跑就行，不管后续维护。如果发现不了问题，更谈不上解决问题，解决方案和设计，就是解决问题，需要积累经验，不断学习，实践，提升解决问题的能力，只有把发现问题和解决问题都做好的开发，才能成为架构师或者leader，更上一层楼。","like_count":10,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503172,"discussion_content":"总结得很好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596615740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271654,"user_name":"Edison Zhou","can_delete":false,"product_type":"c1","uid":1191877,"ip_address":"","ucode":"DDD50EA2335CAC","user_header":"https://static001.geekbang.org/account/avatar/00/12/2f/c5/55832856.jpg","comment_is_top":false,"comment_ctime":1609748040,"is_pvip":false,"replies":[{"id":"98567","content":"你找到重点了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1609811161,"ip_address":"","comment_id":271654,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23084584520","product_id":100052601,"comment_content":"老师这篇的讲解方式很像是一个TDD的案例，先从一个最基本的测试入手，它代表了一个最小化的核心模型，剩下的就是不断的迭代地去实现它并让测试通过。在不断地迭代中，让测试通过的同时，也在不断地进行重构，“抽丝剥茧”+“分离关注点”，最后形成一个好的设计。","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512989,"discussion_content":"你找到重点了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609811161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239738,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1596630317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23071466797","product_id":100052601,"comment_content":"作为程序猿学习能力应该是自带属性，实际工作中，从解决问题出发，锻炼自身的软件设计和开发能力，这是一个层次。<br>把问题抽象出来提供一个通用的解决方案，并提供程序库出来，这又是一个层次。<br>自己和自己维护的代码一起进化，这应该是每一个开发者所追求的<br>","like_count":6},{"had_liked":false,"id":239544,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1596584106,"is_pvip":false,"replies":[{"id":"88493","content":"RequestMatcher和ResponseHandler是模型，函数式的DSL是接口。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1596591598,"ip_address":"","comment_id":239544,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14481485994","product_id":100052601,"comment_content":"记得不错的话，spring mvc test里面也有相似的概念，如RequestMatcher，ResponseHandler,今天才明白原来这是一种函数式编程的dsl。moco已clone,学习一下","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503134,"discussion_content":"RequestMatcher和ResponseHandler是模型，函数式的DSL是接口。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596591598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240443,"user_name":"蓝士钦","can_delete":false,"product_type":"c1","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1596932390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10186866982","product_id":100052601,"comment_content":"在日常工作中，常常因为查bug导致阻碍开发进度，其实也是旧项目单元测试没做好，但是有一部分原因是集成测试没做，有些问题需要整个系统和外部系统串起来完整的调用才能定位问题。我想写一个易于集成测试的DSL，可以将测试人员写好的测试用例的描述内容作为集成测试的逻辑组装。 大多数情况下都是测试人员在写自己的测试代码，通过系统的http接口调用进行测试。很难覆盖到系统和外部系统之间的调用，往往出问题的也是不同团队间的系统间调用，不同系统间调用老师有什么好的建议吗","like_count":2},{"had_liked":false,"id":346490,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1653194765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653194765","product_id":100052601,"comment_content":"注意发现身边的小问题，用一个程序库或工具解决它。--记下来<br>这一讲很贴近开发","like_count":1},{"had_liked":false,"id":342328,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1650196712,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1650196712","product_id":100052601,"comment_content":"程序员不能只当一个问题的解决者，还应该经常抬头看路，做一个问题的发现者。<br>真实生活并不是本该就是现在这样，是存在各种各样的问题的，不应该局限于我们要解决什么问题，更多应该留出时间想想我们有什么问题，我们为什么有这些问题。","like_count":0},{"had_liked":false,"id":340158,"user_name":"laolinshi","can_delete":false,"product_type":"c1","uid":1024994,"ip_address":"","ucode":"269B879389D7D5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/e2/5cb4f43f.jpg","comment_is_top":false,"comment_ctime":1648633810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648633810","product_id":100052601,"comment_content":"做微服务拆分的时候对于那些新实现的接口，需要跟原有系统的旧接口进行返回内容的比较，以此来保证新接口返回的数据和老接口是一致的，没有缺少需要返回的数据。刚开始的时候对新旧接口是采用肉眼比较的方式来找到差异的地方的，由于接口返回的数据非常多，这个比较过程非常痛苦，而且很容易出错。为了解决肉眼比较带来的困扰，花了一些时间研究了微服务契约测试框架Pact的实现原理，借鉴了框架中用于JSON字符串比较的实现逻辑，自己实现了一套新旧接口返回数据比较的小工具。通过这个工具可以标记出新旧接口返回数据的差异，根据这些差异信息就可以比较容易的发现新接口在逻辑实现的过程中不小心引入的问题。","like_count":1},{"had_liked":false,"id":259313,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1604678594,"is_pvip":true,"replies":[{"id":"94788","content":"这种分析在网上可以找到，我来写的话，肯定会偏向Moco，不那么客观。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1605237723,"ip_address":"","comment_id":259313,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604678594","product_id":100052601,"comment_content":"郑大大，很好奇你的moco，也粗略地看了几次。有时间的时候，是否可以来个mock server的竞品分析","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508902,"discussion_content":"这种分析在网上可以找到，我来写的话，肯定会偏向Moco，不那么客观。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605237723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}