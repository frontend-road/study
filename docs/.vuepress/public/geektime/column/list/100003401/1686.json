{"id":1686,"title":"03 | 标准化体系建设（上）：如何建立应用标准化体系和模型？","content":"<p>今天我专门来讲讲标准化这个工作。可以说这项工作是运维过程中最基础、最重要的，但也是最容易被忽视的一个环节。</p>\n<p>我做过多次公开演讲，每次讲到这个环节，通常会有单独的一页PPT，就放四个字，字号加大加粗，重复三遍，这四个字就是“<strong>标准先行</strong>”，然后演讲过程中会大声说出“<strong>标准先行，标准先行，标准先行</strong>”，重要的事情说三遍，目的就是想反复强调这件事情的重要程度，一定不要忽视。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/0c/13/0cfd49cae5cf02689bb7167aae972c13.jpg?wh=1280*720\" alt=\"\" /></p>\n<p><strong>我们运维工作的开展常常不知从何下手，或者上来就冲着工具和自动化去了，却始终不得章法，工具做了一堆，效率却并没有提升。其实绝大多数情况下，问题和原因就是标准化这个基础工作没做扎实。</strong></p>\n<p>首先，让我们来看看为什么标准化这个事情如此重要。</p>\n<h2>为什么要做标准化？</h2>\n<p><strong>标准化的过程实际上就是对运维对象的识别和建模过程</strong>。形成统一的对象模型后，各方在统一的认识下展开有效协作，然后针对不同的运维对象，再抽取出它们所对应的运维场景，接下来才是运维场景的自动化实现。</p>\n<p>这有点像我们学的面向对象编程的思想，其实我们就是需要遵循这样一个思路，我们面对的就是一个个实体和逻辑运维对象。</p>\n<p>在标准化的过程中，先识别出各个运维对象，然后我们日常做的所有运维工作，都应该是针对这些对象的运维。如果运维操作脱离了对象，那就没有任何意义。同样，没有理清楚对象，运维自然不得章法。</p>\n<p>比如我们说扩容，那就要先确定这里到底是服务器的扩容，还是应用的扩容，还是其它对象的扩容。你会发现，对象不同，扩容这个场景所实施的动作是完全不一样的。</p>\n<p>如果把服务器的扩容套用到应用的扩容上去，必然会导致流程错乱。同时对于对象理解上的不一致，也会徒增无谓的沟通成本，造成效率低下。自然地，这种情况下的运维自动化不但不能提升效率，还会越自动越混乱。</p>\n<p>这就是为什么我每次都会连续强调三遍“标准先行”的原因。虽然这个事情比较枯燥和繁琐，但是<strong>于纷繁复杂中抽象出标准规范的东西，是我们后续一系列自动化和稳定性保障的基础</strong>。万丈高楼平地起，所以请你一定不要忽略这个工作。</p>\n<p>好，总结一下标准化的套路：</p>\n<!-- [[[read_end]]] -->\n<ul>\n<li>第一步，<strong>识别对象</strong>；</li>\n<li>第二步，<strong>识别对象属性</strong>；</li>\n<li>第三步，<strong>识别对象关系</strong>；</li>\n<li>第四步，<strong>识别对象场景</strong>。</li>\n</ul>\n<p>接下来我们就按照上面这个思路，一起来分析从基础设施层面和应用层面应该识别出哪些运维对象。</p>\n<h2>基础设施层面的标准化</h2>\n<p>基础设施层面的运维对象应该不难识别，因为都是一个个物理存在的实体，我们可以进行如下分析。</p>\n<ul>\n<li>第一步，识别实体对象，主要有服务器、网络、IDC、机柜、存储、配件等。</li>\n<li>第二步，识别对象的属性，比如服务器就会有SN序列号、IP地址、厂商、硬件配置（如CPU、内存、硬盘、网卡、PCIE、BIOS）、维保信息等；网络设备如交换机也会有厂商、型号、带宽等信息。</li>\n<li>第三步，识别对象之间的关联关系，比如服务器所在的机柜，虚拟机所在的宿主机、机柜所在IDC等简单关系；复杂一点就会有核心交换机、汇聚交换机、接入交换机以及机柜和服务器之间的级联关系等，这些相对复杂一些，也就是我们常说的<strong>网络拓扑关系</strong>。</li>\n</ul>\n<p>把以上信息梳理清楚，通过ER建模工具进行数据建模，再将以上的信息固化到DB中，一个资源层面的信息管理平台就基本成型了。</p>\n<p>以服务器为例简单展示一下，我们的视角就是下面这样的：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/a7/1d/a7726de2cea0e957dabfa28ecdfa7a1d.jpg?wh=694*399\" alt=\"\" /></p>\n<p>但是，信息固化不是目的，也没有价值，只有信息动态流转起来才有价值。接下来我们需要做的事情，就是识别出针对运维对象所实施的日常运维操作有哪些，也就是<strong>识别出运维场景是什么</strong>。</p>\n<ul>\n<li>第四步，还是以服务器为例，我们针对服务器的日常操作有采购、入库、安装、配置、上线、下线、维修等等。另外，可能还会有可视化和查询的场景，如拓扑关系的可视化和动态展示，交换机与服务器之间的级联关系、状态（正常or故障）的展示等，这样可以很直观地关注到资源节点的状态。</li>\n</ul>\n<p>完成了这些工作，接下来才是对上述运维场景的自动化开发。所以你看，在真正执行去做工具和自动化平台之前，其实是需要先做好大量的基础准备工作的。我要再次强调这一点，一定不能忽视。</p>\n<h2>应用层面的标准化</h2>\n<p>下面我们再一起看一个逻辑上的对象，就是我们前面经常提到的运维的核心：<strong>应用</strong>。对这个逻辑对象的建模会相对复杂一些，不过我们依然可以按照上面的套路来。</p>\n<ul>\n<li>第一步，识别对象。</li>\n</ul>\n<p>我们前面讲过，这个识别过程是在做微服务架构设计或拆分的时候就确定下来的。所以严格地讲，它不应该是运维阶段才被识别出来的，而是在之前设计阶段就被识别和确认下来，然后延伸到运维这里才对。</p>\n<ul>\n<li>第二步，识别对象属性。</li>\n</ul>\n<p>一个应用是业务的抽象逻辑，所以会有业务和运维两个维度的属性。业务属性在业务架构时确定，这主要是需要业务架构师去识别的，但是它的运维属性就应该由运维来识别了。</p>\n<p>下面我们一起来看一下，一个应用应该具备哪些基本的运维属性。</p>\n<p>*<strong>应用的元数据属性</strong>，也就是简单直接地描述一个应用的信息，如应用名、应用Owner、所属业务、是否核心链路应用以及应用功能说明等，这里的关键是应用名；</p>\n<p>*<strong>应用代码属性</strong>，主要是编程语言及版本（决定了后续的构建方式），GitLab地址；</p>\n<p>*<strong>应用部署模式</strong>，涉及到基础软件包，如语言包Java、C++、Go等；容器如Tomcat、JBoss等；</p>\n<p>*<strong>应用目录信息</strong>，如运维脚本目录、日志目录、应用包目录、临时目录等；</p>\n<p>*<strong>应用运行脚本</strong>，如启停脚本、健康监测脚本；</p>\n<p>*<strong>应用运行时的参数配置</strong>，如运行端口、Java的JVM参数GC方式、新生代、老生代、永生代的堆内存大小配置等。</p>\n<p>从应用属性的视角，应该是下面这样一个视图（简单示例，不完整）：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/b5/74/b583b0e3224229f6e0fb3f3350edbe74.jpg?wh=450*556\" alt=\"\" /></p>\n<ul>\n<li>第三步，识别对象关系。</li>\n</ul>\n<p>也就是应用与外部的关系，概括起来有三大类：</p>\n<p><strong>第一类是应用与基础设施的关系</strong>，包括应用与资源、应用与VIP、应用与DNS等等的关系；</p>\n<p><strong>第二类是平行层面的应用与应用之间的关系</strong>，这里再细分下去就是应用服务或API与其它应用服务和API的依赖关系。如果你有相关的经验，应该会联想到全链路这样的工具平台了，没错，这样的平台就是用来处理应用间关系管理的。</p>\n<p><strong>第三类是应用与各类基础组件之间的关系</strong>，比如应用与缓存，应用与消息、应用与DB等等之间的关系。</p>\n<ul>\n<li>第四步，识别应用的运维场景。</li>\n</ul>\n<p>这个就会比较多了，比如应用创建、持续集成、持续发布、扩容、缩容、监控等；再复杂点的比如容量评估、压测、限流降级等。</p>\n<p>好，这里我们先收一下，聚焦到标准化的层面，通过基础设施和应用层面标准化的示例，我想你应该可以掌握基本的建模思路了，这样的思路可以应用到其它的运维对象上 。</p>\n<p>同时，通过上面这些内容，你应该可以比较清晰地看到，我们的每一个运维操作都是针对某个运维对象的，这一点在规划运维体系时非常重要。</p>\n<p><strong>而在这些对象中，应用又是重中之重，是微服务架构下的核心运维对象</strong>。</p>\n<p>从应用标准化的过程中我们也可以看到，针对应用的识别和建模，明显复杂很多。所以，后面我还会从理论和实践的角度来继续强化和分析这个概念。</p>\n<p>最后，给你留两个小问题。</p>\n<p>1.标准化部分我们提到，在规划和设计一个运维技术方案时，一定要找到对象主体，那请你思考以下问题：我们现在经常听到一些高大上的词汇，如水平扩展、弹性伸缩和自动化扩缩容等，你能否说一说这些技术手段的主体是谁，也就是是谁的水平扩展？弹性伸缩的是什么？同时，这些名词之间又有什么关系？</p>\n<p>2.在对象属性识别过程中，我们进行了一些关键项的举例，但是如果换一个对象，有没有好的方法论来指导我们进行准确和全面的识别，而不至于遗漏？从我们今天的内容中，你有没有发现一些规律呢？</p>\n<p>如果今天的内容对你有帮助，也请你分享给身边的朋友。</p>\n<p>欢迎你留言与我一起讨论。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"02 | 微服务架构时代，运维体系建设为什么要以“应用”为核心？","id":1682},"right":{"article_title":"04 | 标准化体系建设（下）：如何建立基础架构标准化及服务化体系？","id":1689}},"comments":[{"had_liked":false,"id":1696,"user_name":"宵伯特","can_delete":false,"product_type":"c1","uid":1031939,"ip_address":"","ucode":"88AE839449EE33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/03/9e5c2259.jpg","comment_is_top":false,"comment_ctime":1514164739,"is_pvip":true,"replies":[{"id":"275","content":"感谢你的留言，回答地很精彩！对于第二个问题，状态管理是一部分，领域驱动的方法论也是个很值得借鉴的思路，后面文章会讲到。","user_name":"作者回复","user_name_real":"赵成","uid":"1001380","ctime":1514191489,"ip_address":"","comment_id":1696,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74528608771","product_id":100003401,"comment_content":"在我的理解中，可扩展的应用设计，应用可以根据现有的基础设施资源进行有效的分配，确保各个模块之前能够达到均衡的负载，所以在水平扩展，弹性伸缩和自动化扩缩容时，主要调节的也就是基础的处理资源，例如服务器，带宽等，在现在的云服务和微服务架构下，更多的也就是服务实例。<br>对于对象属性的识别，需要参考该对象属性在系统中的状态管理情况，而在业务逻辑层面，对于对象关注相对强势的，应该是领域驱动设计了吧。","like_count":18,"discussions":[{"author":{"id":1001380,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/a4/6076bd5f.jpg","nickname":"赵成","note":"","ucode":"934FC7D12479AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415503,"discussion_content":"感谢你的留言，回答地很精彩！对于第二个问题，状态管理是一部分，领域驱动的方法论也是个很值得借鉴的思路，后面文章会讲到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1514191489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1717,"user_name":"岑崟","can_delete":false,"product_type":"c1","uid":1033106,"ip_address":"","ucode":"AAD04D3C7A70F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/92/9df49838.jpg","comment_is_top":false,"comment_ctime":1514248742,"is_pvip":true,"replies":[{"id":"280","content":"你一定有过亲身经历，已经感同身受了。","user_name":"作者回复","user_name_real":"赵成","uid":"1001380","ctime":1514269541,"ip_address":"","comment_id":1717,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35873987110","product_id":100003401,"comment_content":"磨刀不误砍柴工，标准化就是这个磨刀的过程。之前对于工具化、自动化往往就是撸起袖子就干，结果在实施的过程中发现工具化、自动化本身就是一个负担。相同的需求，不同的实施人员，得到的结果不尽相同。所以标准化越早开展越好，可以从最简单的最容易识别的对象开始，对于那些业务系统建成已有些时间的，更适合逐步的改变，结合当下流行的DevOps思想，让研发也一起参与其中，效果更好","like_count":9,"discussions":[{"author":{"id":1001380,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/a4/6076bd5f.jpg","nickname":"赵成","note":"","ucode":"934FC7D12479AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415512,"discussion_content":"你一定有过亲身经历，已经感同身受了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1514269541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221716,"user_name":"技术修行者","can_delete":false,"product_type":"c1","uid":1013147,"ip_address":"","ucode":"28CA41A1214D6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/9b/611e74ab.jpg","comment_is_top":false,"comment_ctime":1590573318,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"10180507910","product_id":100003401,"comment_content":"标准化确实很重要，作者总结的非常好。<br>标准化的制定套路：1. 识别对象，2. 识别对象属性，3. 识别对象关系，4. 识别对象场景。<br>标准化的内容：1. 基础设施层面标准化，2. 应用层面标准化。<br><br>我的问题：如果我们的应用是全部托管在公有云上，那么基础设施层面的标准化是不是应该由各个云厂商来负责？还需要开发运维团队介入吗？","like_count":2,"discussions":[{"author":{"id":2807439,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/d6/8f/fd7a5840.jpg","nickname":"Leoheng","note":"","ucode":"CFDD39DD386F7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403880,"discussion_content":"这时候处理应用层面就可以了吧，各大云厂商的基础设施建设，基本一致，差别在于生态产品之间的耦合，拿阿里云为例子，基本你所用到的，未来所涉及的产品或者应用，基本提供出来。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634177374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9665,"user_name":"Matthew_Yin","can_delete":false,"product_type":"c1","uid":1102239,"ip_address":"","ucode":"E6F3732BD3D78A","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/9f/537f95bb.jpg","comment_is_top":false,"comment_ctime":1527032650,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"10116967242","product_id":100003401,"comment_content":"敏捷开发，devops这些感觉和应用运维更贴近，运维人员转型也容易，但是传统网络，系统和存储这些硬件运维的方向在哪？多数人不具备开发能力，但是随着工具化，自动化的开展和普及，这些岗位势必会受到冲击。楼主能不能给一些指导性的建议，谢谢","like_count":2,"discussions":[{"author":{"id":2440848,"avatar":"https://static001.geekbang.org/account/avatar/00/25/3e/90/c86ec4ca.jpg","nickname":"XCF","note":"","ucode":"00A895B0B4CA3E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580302,"discussion_content":"emm，传统网公、经常去机房维修的硬件工程师，也都是能往上爬的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658069594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1916685,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3f/0d/1e8dbb2c.jpg","nickname":"怀揣梦想的学渣","note":"","ucode":"2349B9F4F6FDE3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549776,"discussion_content":"层主现在发展状况如何，我是已经被迫学开发了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644233324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063970,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/8YX35AFKL60uUNM5YGloEx8uDbv0VGB5VddYvqKDgPRiauyW1ggJIs9p6B7ad3AricFMZAp8ahAqP4FmzaTP1few/132","nickname":"葱味黑咖啡","note":"","ucode":"9BF75E8CCF8E0B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311257,"discussion_content":"不具备开发能力，那就去学习开发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602292235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1348718,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoTaib6ok9f5erFMuENwb8CtlqSSWG7HuUSZcic7MfxBiaa9EPMJP1HOMRanM8JYAvK12E1iba8MDF7icw/132","nickname":"jizast","note":"","ucode":"758E928FD32831","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210692,"discussion_content":"转行，这是最实际的建议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584761054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":5556,"user_name":"白下","can_delete":false,"product_type":"c1","uid":1085157,"ip_address":"","ucode":"5AD8360FE05D58","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/e5/69d77d56.jpg","comment_is_top":false,"comment_ctime":1523505892,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10113440484","product_id":100003401,"comment_content":"醍醐灌顶<br>就第一个问题而言 作者已经说的很清楚了 对象<br>水平扩容 弹性伸缩对象是什么？<br>缓存？<br>无状态容器？<br>数据库？<br>存储？<br>服务器等基础设施？<br>基于RPC的服务<br>基于HTTP的服务<br>对象不同涉及到的弹性伸缩 水平扩容的的流程 方法都不一样<br>不同对象 需要建立不同运维模型<br>不同对象本身涉及到了关联和不同属性","like_count":2},{"had_liked":false,"id":2013,"user_name":"foxracle","can_delete":false,"product_type":"c1","uid":1043220,"ip_address":"","ucode":"1CBC9486E867EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/14/b6929253.jpg","comment_is_top":false,"comment_ctime":1515486424,"is_pvip":false,"replies":[{"id":"389","content":"你的理解没有问题，在运维工作中，标准化更为重要，且更容易被忽略。","user_name":"作者回复","user_name_real":"赵成","uid":"1001380","ctime":1515630426,"ip_address":"","comment_id":2013,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10105421016","product_id":100003401,"comment_content":"个人理顺一下逻辑：为了让用户，运营，开发，测试，运维统一术语和视角以及价值观，应用是唯一能通用的术语，只是各个人看到的应用大小粒度不一样，那运维的工作自然就都是面向应用来开展的。而运维的具体工作内容是用应用的运维场景来描述的，所以运维体系建设也应该是以捕捉具体运维场景来开展的，就好比面向对象的需求分析是通过use case来落地一样。在理顺所有运维场景之后，才开始去识别场景中的具体对象，对对象进行建模，理清对象之间的关系。这样来看的话，所谓标准先行也仅仅是对象建模的自然产物，另一种说法而已","like_count":2,"discussions":[{"author":{"id":1001380,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/a4/6076bd5f.jpg","nickname":"赵成","note":"","ucode":"934FC7D12479AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415616,"discussion_content":"你的理解没有问题，在运维工作中，标准化更为重要，且更容易被忽略。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1515630426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1789,"user_name":"春生儿","can_delete":false,"product_type":"c1","uid":1035389,"ip_address":"","ucode":"408118F5AD0F83","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/7d/d1a82cf3.jpg","comment_is_top":false,"comment_ctime":1514469764,"is_pvip":false,"replies":[{"id":"298","content":"从自动化角度，CMDB一定是优先做，这个后面文章会讲到。不过标准化写几篇文章是想讲清楚自动化之前要做哪些准备和分析梳理的工作，这个比直接做CMDB要重要的多。","user_name":"作者回复","user_name_real":"赵成","uid":"1001380","ctime":1514625625,"ip_address":"","comment_id":1789,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10104404356","product_id":100003401,"comment_content":"这个实际上就是先做cmdb对吧","like_count":2,"discussions":[{"author":{"id":1001380,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/a4/6076bd5f.jpg","nickname":"赵成","note":"","ucode":"934FC7D12479AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415533,"discussion_content":"从自动化角度，CMDB一定是优先做，这个后面文章会讲到。不过标准化写几篇文章是想讲清楚自动化之前要做哪些准备和分析梳理的工作，这个比直接做CMDB要重要的多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1514625625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161972,"user_name":"17","can_delete":false,"product_type":"c1","uid":1551347,"ip_address":"","ucode":"73E8E163E507B4","user_header":"https://static001.geekbang.org/account/avatar/00/17/ab/f3/4f8a5cd7.jpg","comment_is_top":false,"comment_ctime":1576419324,"is_pvip":false,"replies":[{"id":"73418","content":"定标准的过程本身就是需要迭代完善的，一开始没法完全考虑清楚是很正常的，就跟设计架构一样，一开始就想地很周全，设计的非常全面，也是不太现实的。<br><br>因为具体哪些点不符合我问题中没看出来，你可以再补充下。","user_name":"作者回复","user_name_real":"赵成","uid":"1001380","ctime":1584791307,"ip_address":"","comment_id":161972,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5871386620","product_id":100003401,"comment_content":"分享标准化过程实践的经验：一开始基于目前的应用场景，抽象分析，定规范，出标准规范文档。随着业务的发展或前期分析不到位，导致之前的标准不太符合当前的应用场景。这个过程虽然知道不可避免，但是真正发生的时候，还是非常和痛。针对这种场景，不知作者是如何来处理的？","like_count":1,"discussions":[{"author":{"id":1001380,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/a4/6076bd5f.jpg","nickname":"赵成","note":"","ucode":"934FC7D12479AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477933,"discussion_content":"定标准的过程本身就是需要迭代完善的，一开始没法完全考虑清楚是很正常的，就跟设计架构一样，一开始就想地很周全，设计的非常全面，也是不太现实的。\n\n因为具体哪些点不符合我问题中没看出来，你可以再补充下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584791307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2504378,"avatar":"https://static001.geekbang.org/account/avatar/00/26/36/ba/b177d176.jpg","nickname":"可观测性无声笛","note":"","ucode":"709CE03E7EFCC4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577648,"discussion_content":"我感觉都是标准先行，然后字段限定死了，后面发生变更要做规范化管理，做数据治理，很难…还是要有极强的可编程性，可扩展性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656259257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":1901,"user_name":"思涵_芳瑞","can_delete":false,"product_type":"c1","uid":1019126,"ip_address":"","ucode":"0EB84D7125CE0B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/f6/ea6b30c9.jpg","comment_is_top":false,"comment_ctime":1515043865,"is_pvip":false,"replies":[{"id":"321","content":"我后面专门有一篇文章介绍第一个问题，你可以先思考一下。<br><br>第二个问题，不仅仅指微服务应用，单体或分层应用也适合，但是在微服务架构下应用这个概念的作用会更突出。<br><br>","user_name":"作者回复","user_name_real":"赵成","uid":"1001380","ctime":1515055651,"ip_address":"","comment_id":1901,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5810011161","product_id":100003401,"comment_content":"文章中提到的应用扩容和服务器扩容是什么区别？另外应用本身不仅仅指微服务应用吧？","like_count":1,"discussions":[{"author":{"id":1001380,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/a4/6076bd5f.jpg","nickname":"赵成","note":"","ucode":"934FC7D12479AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415578,"discussion_content":"我后面专门有一篇文章介绍第一个问题，你可以先思考一下。\n\n第二个问题，不仅仅指微服务应用，单体或分层应用也适合，但是在微服务架构下应用这个概念的作用会更突出。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1515055651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352062,"user_name":"devops-xu","can_delete":false,"product_type":"c1","uid":2101788,"ip_address":"","ucode":"9CA40267DFA1A6","user_header":"https://static001.geekbang.org/account/avatar/00/20/12/1c/b6600668.jpg","comment_is_top":false,"comment_ctime":1658371021,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658371021","product_id":100003401,"comment_content":"设计先行，走一步看一步的痛，不堪回首","like_count":0},{"had_liked":false,"id":344681,"user_name":"包军山","can_delete":false,"product_type":"c1","uid":2850568,"ip_address":"","ucode":"90B996A8C8CE58","user_header":"","comment_is_top":false,"comment_ctime":1651721553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651721553","product_id":100003401,"comment_content":"感觉标准化是一套方法论，识别对象、看清对象、理清对象关系、对象的使用场景","like_count":0},{"had_liked":false,"id":344680,"user_name":"包军山","can_delete":false,"product_type":"c1","uid":2850568,"ip_address":"","ucode":"90B996A8C8CE58","user_header":"","comment_is_top":false,"comment_ctime":1651721248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651721248","product_id":100003401,"comment_content":"运维标准化主要工作：第一识别对象、第二对象属性、第三对象之间关系、第四对象使用的场景。","like_count":0},{"had_liked":false,"id":333256,"user_name":"怀揣梦想的学渣","can_delete":false,"product_type":"c1","uid":1916685,"ip_address":"","ucode":"2349B9F4F6FDE3","user_header":"https://static001.geekbang.org/account/avatar/00/1d/3f/0d/1e8dbb2c.jpg","comment_is_top":false,"comment_ctime":1644233432,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644233432","product_id":100003401,"comment_content":"虽然这篇文章写在很早之前，现在看团队，依旧是很实用的思想指导。","like_count":0},{"had_liked":false,"id":132120,"user_name":"向日葵","can_delete":false,"product_type":"c1","uid":1345399,"ip_address":"","ucode":"898F0A9996D589","user_header":"https://static001.geekbang.org/account/avatar/00/14/87/77/b07d0806.jpg","comment_is_top":false,"comment_ctime":1568025538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568025538","product_id":100003401,"comment_content":"运维人员将来的趋势应该是逐渐变成平台的构建者","like_count":0},{"had_liked":false,"id":115316,"user_name":"牧野静风","can_delete":false,"product_type":"c1","uid":1311629,"ip_address":"","ucode":"FB5963F97C23AA","user_header":"https://static001.geekbang.org/account/avatar/00/14/03/8d/38a98dc6.jpg","comment_is_top":false,"comment_ctime":1563529930,"is_pvip":false,"replies":[{"id":"90657","content":"万丈高楼平地起，标准化就是地基，地基打的坚实了，才会有上面的高楼大厦。","user_name":"作者回复","user_name_real":"赵成","uid":"1001380","ctime":1599462179,"ip_address":"","comment_id":115316,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563529930","product_id":100003401,"comment_content":"受益良多，作为一个传统的运维，发现后期的维护越来越繁杂，很多东西无法自动化处理，比如，所有的应用日志如何归集分析，语言，标准，编程习惯都不一样，统一化平台很难；另外随着应用的增加，比如定时Job,想做个管理平台，发现很不好分析，数据结果不一致，报错信息有些有，有些没有，很麻烦；标准化是一切自动化，效率化的前提，后面来推行，就很难了","like_count":0,"discussions":[{"author":{"id":1001380,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/a4/6076bd5f.jpg","nickname":"赵成","note":"","ucode":"934FC7D12479AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459053,"discussion_content":"万丈高楼平地起，标准化就是地基，地基打的坚实了，才会有上面的高楼大厦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599462179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8730,"user_name":"水手","can_delete":false,"product_type":"c1","uid":1023804,"ip_address":"","ucode":"19767E53199AEA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ45FTjX8enVh38AeBjDVMibe68cBHpPjLjyqPBZYrCs9yUJ7zwDia397sP1Uw2rV3s5ickTiaLf15fkQ/132","comment_is_top":false,"comment_ctime":1526389198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526389198","product_id":100003401,"comment_content":"刚读到此章，日常混乱无章的运维工作，顿时找到了头绪，谢谢。","like_count":0},{"had_liked":false,"id":3025,"user_name":"FOX","can_delete":false,"product_type":"c1","uid":1053330,"ip_address":"","ucode":"150F905448A47F","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/92/5794d852.jpg","comment_is_top":false,"comment_ctime":1518519750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1518519750","product_id":100003401,"comment_content":"学习收藏，少走弯路","like_count":0},{"had_liked":false,"id":2240,"user_name":"指尖流逝","can_delete":false,"product_type":"c1","uid":1005381,"ip_address":"","ucode":"417009F674FAF1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/45/c418ea5c.jpg","comment_is_top":false,"comment_ctime":1516446250,"is_pvip":false,"replies":[{"id":"451","content":"不同对象间的关联关系管理方式是不同的，我建议你可以先分类下都有哪些关联关系，再看管理方式","user_name":"作者回复","user_name_real":"赵成","uid":"1001380","ctime":1516529505,"ip_address":"","comment_id":2240,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1516446250","product_id":100003401,"comment_content":"这种关联关系 能通过什么方式来自动发现，人为维护太繁重了","like_count":0,"discussions":[{"author":{"id":1001380,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/a4/6076bd5f.jpg","nickname":"赵成","note":"","ucode":"934FC7D12479AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415680,"discussion_content":"不同对象间的关联关系管理方式是不同的，我建议你可以先分类下都有哪些关联关系，再看管理方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1516529505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179268,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/84/c0b887bf.jpg","nickname":"VinnieMo","note":"","ucode":"807ECCA1A47D4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382496,"discussion_content":"我提供一种思路。关联关系可以在对象业务模型的基础上通过一些唯一标识的属性（如应用名）进行关联，在标准化再配合流程化来实现自动化。比如要开通一个缓存或者数据库可以通过标准的流程指定对应的属性进行关联。在一些不能通过流程来实现的可以通过一些agent进行采集得到关键属性之后自动关联，这些关键属性也是要基于标准化，如机器名统一是按照标准的命名就可以从里面分析到对应的信息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625617634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}