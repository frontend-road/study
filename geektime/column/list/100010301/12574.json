{"id":12574,"title":"09 | JVM是怎么实现invokedynamic的？（下）","content":"<p>上回讲到，为了让所有的动物都能参加赛马，Java 7引入了invokedynamic机制，允许调用任意类的“赛跑”方法。不过，我们并没有讲解invokedynamic，而是深入地探讨了它所依赖的方法句柄。</p>\n<p>今天，我便来正式地介绍invokedynamic指令，讲讲它是如何生成调用点，并且允许应用程序自己决定链接至哪一个方法中的。</p>\n<h2>invokedynamic指令</h2>\n<p>invokedynamic是Java 7引入的一条新指令，用以支持动态语言的方法调用。具体来说，它将调用点（CallSite）抽象成一个Java类，并且将原本由Java虚拟机控制的方法调用以及方法链接暴露给了应用程序。在运行过程中，每一条invokedynamic指令将捆绑一个调用点，并且会调用该调用点所链接的方法句柄。</p>\n<p>在第一次执行invokedynamic指令时，Java虚拟机会调用该指令所对应的启动方法（BootStrap Method），来生成前面提到的调用点，并且将之绑定至该invokedynamic指令中。在之后的运行过程中，Java虚拟机则会直接调用绑定的调用点所链接的方法句柄。</p>\n<p>在字节码中，启动方法是用方法句柄来指定的。这个方法句柄指向一个返回类型为调用点的静态方法。该方法必须接收三个固定的参数，分别为一个Lookup类实例，一个用来指代目标方法名字的字符串，以及该调用点能够链接的方法句柄的类型。</p><!-- [[[read_end]]] -->\n<p>除了这三个必需参数之外，启动方法还可以接收若干个其他的参数，用来辅助生成调用点，或者定位所要链接的目标方法。</p>\n<pre><code>import java.lang.invoke.*;\n\nclass Horse {\n  public void race() {\n    System.out.println(&quot;Horse.race()&quot;); \n  }\n}\n\nclass Deer {\n  public void race() {\n    System.out.println(&quot;Deer.race()&quot;);\n  }\n}\n\n// javac Circuit.java\n// java Circuit\npublic class Circuit {\n\n  public static void startRace(Object obj) {\n    // aload obj\n    // invokedynamic race()\n  }\n\n  public static void main(String[] args) {\n    startRace(new Horse());\n    // startRace(new Deer());\n  }\n  \n  public static CallSite bootstrap(MethodHandles.Lookup l, String name, MethodType callSiteType) throws Throwable {\n    MethodHandle mh = l.findVirtual(Horse.class, name, MethodType.methodType(void.class));\n    return new ConstantCallSite(mh.asType(callSiteType));\n  }\n}\n</code></pre>\n<p>我在文稿中贴了一段代码，其中便包含一个启动方法。它将接收前面提到的三个固定参数，并且返回一个链接至Horse.race方法的ConstantCallSite。</p>\n<p>这里的ConstantCallSite是一种不可以更改链接对象的调用点。除此之外，Java核心类库还提供多种可以更改链接对象的调用点，比如MutableCallSite和VolatileCallSite。</p>\n<p>这两者的区别就好比正常字段和volatile字段之间的区别。此外，应用程序还可以自定义调用点类，来满足特定的重链接需求。</p>\n<p>由于Java暂不支持直接生成invokedynamic指令[1]，所以接下来我会借助之前介绍过的字节码工具ASM来实现这一目的。</p>\n<pre><code>import java.io.IOException;\nimport java.lang.invoke.*;\nimport java.nio.file.*;\n\nimport org.objectweb.asm.*;\n\n// javac -cp /path/to/asm-all-6.0_BETA.jar:. ASMHelper.java\n// java -cp /path/to/asm-all-6.0_BETA.jar:. ASMHelper\n// java Circuit\npublic class ASMHelper implements Opcodes {\n\n  private static class MyMethodVisitor extends MethodVisitor {\n\n    private static final String BOOTSTRAP_CLASS_NAME = Circuit.class.getName().replace('.', '/');\n    private static final String BOOTSTRAP_METHOD_NAME = &quot;bootstrap&quot;;\n    private static final String BOOTSTRAP_METHOD_DESC = MethodType\n        .methodType(CallSite.class, MethodHandles.Lookup.class, String.class, MethodType.class)\n        .toMethodDescriptorString();\n\n    private static final String TARGET_METHOD_NAME = &quot;race&quot;;\n    private static final String TARGET_METHOD_DESC = &quot;(Ljava/lang/Object;)V&quot;;\n\n    public final MethodVisitor mv;\n\n    public MyMethodVisitor(int api, MethodVisitor mv) {\n      super(api);\n      this.mv = mv;\n    }\n\n    @Override\n    public void visitCode() {\n      mv.visitCode();\n      mv.visitVarInsn(ALOAD, 0);\n      Handle h = new Handle(H_INVOKESTATIC, BOOTSTRAP_CLASS_NAME, BOOTSTRAP_METHOD_NAME, BOOTSTRAP_METHOD_DESC, false);\n      mv.visitInvokeDynamicInsn(TARGET_METHOD_NAME, TARGET_METHOD_DESC, h);\n      mv.visitInsn(RETURN);\n      mv.visitMaxs(1, 1);\n      mv.visitEnd();\n    }\n  }\n\n  public static void main(String[] args) throws IOException {\n    ClassReader cr = new ClassReader(&quot;Circuit&quot;);\n    ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_FRAMES);\n    ClassVisitor cv = new ClassVisitor(ASM6, cw) {\n      @Override\n      public MethodVisitor visitMethod(int access, String name, String descriptor, String signature,\n          String[] exceptions) {\n        MethodVisitor visitor = super.visitMethod(access, name, descriptor, signature, exceptions);\n        if (&quot;startRace&quot;.equals(name)) {\n          return new MyMethodVisitor(ASM6, visitor);\n        }\n        return visitor;\n      }\n    };\n    cr.accept(cv, ClassReader.SKIP_FRAMES);\n\n    Files.write(Paths.get(&quot;Circuit.class&quot;), cw.toByteArray());\n  }\n}\n</code></pre>\n<p>你无需理解上面这段代码的具体含义，只须了解它会更改同一目录下Circuit类的startRace(Object)方法，使之包含invokedynamic指令，执行所谓的赛跑方法。</p>\n<pre><code> public static void startRace(java.lang.Object);\n         0: aload_0\n         1: invokedynamic #80,  0 // race:(Ljava/lang/Object;)V\n         6: return\n</code></pre>\n<p>如果你足够细心的话，你会发现该指令所调用的赛跑方法的描述符，和Horse.race方法或者Deer.race方法的描述符并不一致。这是因为invokedynamic指令最终调用的是方法句柄，而方法句柄会将调用者当成第一个参数。因此，刚刚提到的那两个方法恰恰符合这个描述符所对应的方法句柄类型。</p>\n<p>到目前为止，我们已经可以通过invokedynamic调用Horse.race方法了。为了支持调用任意类的race方法，我实现了一个简单的单态内联缓存。如果调用者的类型命中缓存中的类型，便直接调用缓存中的方法句柄，否则便更新缓存。</p>\n<pre><code>// 需要更改ASMHelper.MyMethodVisitor中的BOOTSTRAP_CLASS_NAME\nimport java.lang.invoke.*;\n\npublic class MonomorphicInlineCache {\n\n  private final MethodHandles.Lookup lookup;\n  private final String name;\n\n  public MonomorphicInlineCache(MethodHandles.Lookup lookup, String name) {\n    this.lookup = lookup;\n    this.name = name;\n  }\n\n  private Class&lt;?&gt; cachedClass = null;\n  private MethodHandle mh = null;\n\n  public void invoke(Object receiver) throws Throwable {\n    if (cachedClass != receiver.getClass()) {\n      cachedClass = receiver.getClass();\n      mh = lookup.findVirtual(cachedClass, name, MethodType.methodType(void.class));\n    }\n    mh.invoke(receiver);\n  }\n\n  public static CallSite bootstrap(MethodHandles.Lookup l, String name, MethodType callSiteType) throws Throwable {\n    MonomorphicInlineCache ic = new MonomorphicInlineCache(l, name);\n    MethodHandle mh = l.findVirtual(MonomorphicInlineCache.class, &quot;invoke&quot;, MethodType.methodType(void.class, Object.class));\n    return new ConstantCallSite(mh.bindTo(ic));\n  }\n}\n</code></pre>\n<p>可以看到，尽管invokedynamic指令调用的是所谓的race方法，但是实际上我返回了一个链接至名为“invoke”的方法的调用点。由于调用点仅要求方法句柄的类型能够匹配，因此这个链接是合法的。</p>\n<p>不过，这正是invokedynamic的目的，也就是将调用点与目标方法的链接交由应用程序来做，并且依赖于应用程序对目标方法进行验证。所以，如果应用程序将赛跑方法链接至兔子的睡觉方法，那也只能怪应用程序自己了。</p>\n<h2>Java 8的Lambda表达式</h2>\n<p>在Java 8中，Lambda表达式也是借助invokedynamic来实现的。</p>\n<p>具体来说，Java编译器利用invokedynamic指令来生成实现了函数式接口的适配器。这里的函数式接口指的是仅包括一个非default接口方法的接口，一般通过@FunctionalInterface注解。不过就算是没有使用该注解，Java编译器也会将符合条件的接口辨认为函数式接口。</p>\n<pre><code>int x = ..\nIntStream.of(1, 2, 3).map(i -&gt; i * 2).map(i -&gt; i * x);\n</code></pre>\n<p>举个例子，上面这段代码会对IntStream中的元素进行两次映射。我们知道，映射方法map所接收的参数是IntUnaryOperator（这是一个函数式接口）。也就是说，在运行过程中我们需要将i-&gt;i<em>2和i-&gt;i</em>x 这两个Lambda表达式转化成IntUnaryOperator的实例。这个转化过程便是由invokedynamic来实现的。</p>\n<p>在编译过程中，Java编译器会对Lambda表达式进行解语法糖（desugar），生成一个方法来保存Lambda表达式的内容。该方法的参数列表不仅包含原本Lambda表达式的参数，还包含它所捕获的变量。(注：方法引用，如Horse::race，则不会生成生成额外的方法。)</p>\n<p>在上面那个例子中，第一个Lambda表达式没有捕获其他变量，而第二个Lambda表达式（也就是i-&gt;i*x）则会捕获局部变量x。这两个Lambda表达式对应的方法如下所示。可以看到，所捕获的变量同样也会作为参数传入生成的方法之中。</p>\n<pre><code>  // i -&gt; i * 2\n  private static int lambda$0(int);\n    Code:\n       0: iload_0\n       1: iconst_2\n       2: imul\n       3: ireturn\n\n  // i -&gt; i * x\n  private static int lambda$1(int, int);\n    Code:\n       0: iload_1\n       1: iload_0\n       2: imul\n       3: ireturn\n</code></pre>\n<p>第一次执行invokedynamic指令时，它所对应的启动方法会通过ASM来生成一个适配器类。这个适配器类实现了对应的函数式接口，在我们的例子中，也就是IntUnaryOperator。启动方法的返回值是一个ConstantCallSite，其链接对象为一个返回适配器类实例的方法句柄。</p>\n<p>根据Lambda表达式是否捕获其他变量，启动方法生成的适配器类以及所链接的方法句柄皆不同。</p>\n<p>如果该Lambda表达式没有捕获其他变量，那么可以认为它是上下文无关的。因此，启动方法将新建一个适配器类的实例，并且生成一个特殊的方法句柄，始终返回该实例。</p>\n<p>如果该Lambda表达式捕获了其他变量，那么每次执行该invokedynamic指令，我们都要更新这些捕获了的变量，以防止它们发生了变化。</p>\n<p>另外，为了保证Lambda表达式的线程安全，我们无法共享同一个适配器类的实例。因此，在每次执行invokedynamic指令时，所调用的方法句柄都需要新建一个适配器类实例。</p>\n<p>在这种情况下，启动方法生成的适配器类将包含一个额外的静态方法，来构造适配器类的实例。该方法将接收这些捕获的参数，并且将它们保存为适配器类实例的实例字段。</p>\n<p>你可以通过虚拟机参数-Djdk.internal.lambda.dumpProxyClasses=/DUMP/PATH导出这些具体的适配器类。这里我导出了上面这个例子中两个Lambda表达式对应的适配器类。</p>\n<pre><code>// i-&gt;i*2 对应的适配器类\nfinal class LambdaTest$$Lambda$1 implements IntUnaryOperator {\n private LambdaTest$$Lambda$1();\n  Code:\n    0: aload_0\n    1: invokespecial java/lang/Object.&quot;&lt;init&gt;&quot;:()V\n    4: return\n\n public int applyAsInt(int);\n  Code:\n    0: iload_1\n    1: invokestatic LambdaTest.lambda$0:(I)I\n    4: ireturn\n}\n\n// i-&gt;i*x 对应的适配器类\nfinal class LambdaTest$$Lambda$2 implements IntUnaryOperator {\n private final int arg$1;\n\n private LambdaTest$$Lambda$2(int);\n  Code:\n    0: aload_0\n    1: invokespecial java/lang/Object.&quot;&lt;init&gt;&quot;:()V\n    4: aload_0\n    5: iload_1\n    6: putfield arg$1:I\n    9: return\n\n private static java.util.function.IntUnaryOperator get$Lambda(int);\n  Code:\n    0: new LambdaTest$$Lambda$2\n    3: dup\n    4: iload_0\n    5: invokespecial &quot;&lt;init&gt;&quot;:(I)V\n    8: areturn\n\n public int applyAsInt(int);\n  Code:\n    0: aload_0\n    1: getfield arg$1:I\n    4: iload_1\n    5: invokestatic LambdaTest.lambda$1:(II)I\n    8: ireturn\n}\n</code></pre>\n<p>可以看到，捕获了局部变量的Lambda表达式多出了一个get$Lambda的方法。启动方法便会所返回的调用点链接至指向该方法的方法句柄。也就是说，每次执行invokedynamic指令时，都会调用至这个方法中，并构造一个新的适配器类实例。</p>\n<p>这个多出来的新建实例会对程序性能造成影响吗？</p>\n<h2>Lambda以及方法句柄的性能分析</h2>\n<p>我再次请出测试反射调用性能开销的那段代码，并将其改造成使用Lambda表达式的v6版本。</p>\n<pre><code>// v6版本\nimport java.util.function.IntConsumer;\n\npublic class Test {\n  public static void target(int i) { }\n\n  public static void main(String[] args) throws Exception {\n    long current = System.currentTimeMillis();\n    for (int i = 1; i &lt;= 2_000_000_000; i++) {\n      if (i % 100_000_000 == 0) {\n        long temp = System.currentTimeMillis();\n        System.out.println(temp - current);\n        current = temp;\n      }\n\n      ((IntConsumer) j -&gt; Test.target(j)).accept(128);\n      // ((IntConsumer) Test::target.accept(128);\n    }\n  }\n}\n</code></pre>\n<p>测量结果显示，它与直接调用的性能并无太大的区别。也就是说，即时编译器能够将转换Lambda表达式所使用的invokedynamic，以及对IntConsumer.accept方法的调用统统内联进来，最终优化为空操作。</p>\n<p>这个其实不难理解：Lambda表达式所使用的invokedynamic将绑定一个ConstantCallSite，其链接的目标方法无法改变。因此，即时编译器会将该目标方法直接内联进来。对于这类没有捕获变量的Lambda表达式而言，目标方法只完成了一个动作，便是加载缓存的适配器类常量。</p>\n<p>另一方面，对IntConsumer.accept方法的调用实则是对适配器类的accept方法的调用。</p>\n<p>如果你查看了accept方法对应的字节码的话，你会发现它仅包含一个方法调用，调用至Java编译器在解Lambda语法糖时生成的方法。</p>\n<p>该方法的内容便是Lambda表达式的内容，也就是直接调用目标方法Test.target。将这几个方法调用内联进来之后，原本对accept方法的调用则会被优化为空操作。</p>\n<p>下面我将之前的代码更改为带捕获变量的v7版本。理论上，每次调用invokedynamic指令，Java虚拟机都会新建一个适配器类的实例。然而，实际运行结果还是与直接调用的性能一致。</p>\n<pre><code>// v7版本\nimport java.util.function.IntConsumer;\n\npublic class Test {\n  public static void target(int i) { }\n\n  public static void main(String[] args) throws Exception {\n    int x = 2;\n\n    long current = System.currentTimeMillis();\n    for (int i = 1; i &lt;= 2_000_000_000; i++) {\n      if (i % 100_000_000 == 0) {\n        long temp = System.currentTimeMillis();\n        System.out.println(temp - current);\n        current = temp;\n      }\n\n      ((IntConsumer) j -&gt; Test.target(x + j)).accept(128);\n    }\n  }\n}\n</code></pre>\n<p>显然，即时编译器的逃逸分析又将该新建实例给优化掉了。我们可以通过虚拟机参数-XX:-DoEscapeAnalysis来关闭逃逸分析。果然，这时候测得的值约为直接调用的2.5倍。</p>\n<p>尽管逃逸分析能够去除这些额外的新建实例开销，但是它也不是时时奏效。它需要同时满足两件事：invokedynamic指令所执行的方法句柄能够内联，和接下来的对accept方法的调用也能内联。</p>\n<p>只有这样，逃逸分析才能判定该适配器实例不逃逸。否则，我们会在运行过程中不停地生成适配器类实例。所以，我们应当尽量使用非捕获的Lambda表达式。</p>\n<h2>总结与实践</h2>\n<p>今天我介绍了invokedynamic指令以及Lambda表达式的实现。</p>\n<p>invokedymaic指令抽象出调用点的概念，并且将调用该调用点所链接的方法句柄。在第一次执行invokedynamic指令时，Java虚拟机将执行它所对应的启动方法，生成并且绑定一个调用点。之后如果再次执行该指令，Java虚拟机则直接调用已经绑定了的调用点所链接的方法。</p>\n<p>Lambda表达式到函数式接口的转换是通过invokedynamic指令来实现的。该invokedynamic指令对应的启动方法将通过ASM生成一个适配器类。</p>\n<p>对于没有捕获其他变量的Lambda表达式，该invokedynamic指令始终返回同一个适配器类的实例。对于捕获了其他变量的Lambda表达式，每次执行invokedynamic指令将新建一个适配器类实例。</p>\n<p>不管是捕获型的还是未捕获型的Lambda表达式，它们的性能上限皆可以达到直接调用的性能。其中，捕获型Lambda表达式借助了即时编译器中的逃逸分析，来避免实际的新建适配器类实例的操作。</p>\n<p>在上一篇的课后实践中，你应该测过这一段代码的性能开销了。我这边测得的结果约为直接调用的3.5倍。</p>\n<pre><code>// v8版本\nimport java.lang.invoke.MethodHandle;\nimport java.lang.invoke.MethodHandles;\nimport java.lang.invoke.MethodType;\n\npublic class Test {\n  public static void target(int i) { }\n\n  public static void main(String[] args) throws Exception {\n    MethodHandles.Lookup l = MethodHandles.lookup();\n    MethodType t = MethodType.methodType(void.class, int.class);\n    MethodHandle mh = l.findStatic(Test.class, &quot;target&quot;, t);\n\n    long current = System.currentTimeMillis();\n    for (int i = 1; i &lt;= 2_000_000_000; i++) {\n      if (i % 100_000_000 == 0) {\n        long temp = System.currentTimeMillis();\n        System.out.println(temp - current);\n        current = temp;\n      }\n\n      mh.invokeExact(128);\n    }\n  }\n}\n</code></pre>\n<p>实际上，它与使用Lambda表达式或者方法引用的差别在于，即时编译器无法将该方法句柄识别为常量，从而无法进行内联。那么如果将它变成常量行不行呢？</p>\n<p>一种方法便是将其赋值给final的静态变量，如下面的v9版本所示：</p>\n<pre><code>// v9版本\nimport java.lang.invoke.MethodHandle;\nimport java.lang.invoke.MethodHandles;\nimport java.lang.invoke.MethodType;\n\npublic class Test {\n  public static void target(int i) { }\n\n  static final MethodHandle mh;\n  static {\n    try {\n      MethodHandles.Lookup l = MethodHandles.lookup();\n      MethodType t = MethodType.methodType(void.class, int.class);\n      mh = l.findStatic(Test.class, &quot;target&quot;, t);\n    } catch (Throwable e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  public static void main(String[] args) throws Throwable {\n    long current = System.currentTimeMillis();\n    for (int i = 1; i &lt;= 2_000_000_000; i++) {\n      if (i % 100_000_000 == 0) {\n        long temp = System.currentTimeMillis();\n        System.out.println(temp - current);\n        current = temp;\n      }\n\n      mh.invokeExact(128);\n    }\n  }\n}\n</code></pre>\n<p>这个版本测得的数据和直接调用的性能数据一致。也就是说，即时编译器能够将该方法句柄完全内联进来，成为空操作。</p>\n<p>今天的实践环节，我们来继续探索方法句柄的性能。运行下面的v10版本以及v11版本，比较它们的性能并思考为什么。</p>\n<pre><code>// v10版本\nimport java.lang.invoke.*;\n\npublic class Test {\n  public static void target(int i) {\n  }\n\n  public static class MyCallSite {\n\n    public final MethodHandle mh;\n\n    public MyCallSite() {\n      mh = findTarget();\n    }\n\n    private static MethodHandle findTarget() {\n      try {\n        MethodHandles.Lookup l = MethodHandles.lookup();\n        MethodType t = MethodType.methodType(void.class, int.class);\n        return l.findStatic(Test.class, &quot;target&quot;, t);\n      } catch (Throwable e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n  private static final MyCallSite myCallSite = new MyCallSite();\n\n  public static void main(String[] args) throws Throwable {\n    long current = System.currentTimeMillis();\n    for (int i = 1; i &lt;= 2_000_000_000; i++) {\n      if (i % 100_000_000 == 0) {\n        long temp = System.currentTimeMillis();\n        System.out.println(temp - current);\n        current = temp;\n      }\n\n      myCallSite.mh.invokeExact(128);\n    }\n  }\n}\n\n// v11版本\nimport java.lang.invoke.*;\n\npublic class Test {\n  public static void target(int i) {\n  }\n\n  public static class MyCallSite extends ConstantCallSite {\n\n    public MyCallSite() {\n      super(findTarget());\n    }\n\n    private static MethodHandle findTarget() {\n      try {\n        MethodHandles.Lookup l = MethodHandles.lookup();\n        MethodType t = MethodType.methodType(void.class, int.class);\n        return l.findStatic(Test.class, &quot;target&quot;, t);\n      } catch (Throwable e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n  public static final MyCallSite myCallSite = new MyCallSite();\n\n  public static void main(String[] args) throws Throwable {\n    long current = System.currentTimeMillis();\n    for (int i = 1; i &lt;= 2_000_000_000; i++) {\n      if (i % 100_000_000 == 0) {\n        long temp = System.currentTimeMillis();\n        System.out.println(temp - current);\n        current = temp;\n      }\n\n      myCallSite.getTarget().invokeExact(128);\n    }\n  }\n}\n</code></pre>\n<p>感谢你的收听，我们下次再见。</p>\n<p>[1] <a href=\"http://openjdk.java.net/jeps/303\">http://openjdk.java.net/jeps/303</a></p>\n<p></p>\n","comments":[{"had_liked":false,"id":20090,"user_name":"Shine","can_delete":false,"product_type":"c1","uid":1022568,"ip_address":"","ucode":"C8C617B87C63C7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/68/92caeed6.jpg","comment_is_top":false,"comment_ctime":1534255063,"is_pvip":false,"replies":[{"id":"7062","content":"逃逸分析是指通过数据流分析，判断一个对象会不会被传递到当前编译的方法之外。比如说你调用了一个方法，将一个新建的对象作为参数传递出去，如果这个方法没有被内联，则说明该新建对象会逃逸。<br><br>逃逸分析是一项比较重要的优化，我后面会详细讲。","user_name":"作者回复","comment_id":20090,"uid":"1176688","ip_address":"","utype":1,"ctime":1534323033,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"113203404759","product_id":100010301,"comment_content":"一直没理解“逃逸分析”啥意思？","like_count":26,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422102,"discussion_content":"逃逸分析是指通过数据流分析，判断一个对象会不会被传递到当前编译的方法之外。比如说你调用了一个方法，将一个新建的对象作为参数传递出去，如果这个方法没有被内联，则说明该新建对象会逃逸。\n\n逃逸分析是一项比较重要的优化，我后面会详细讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534323033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19959,"user_name":"karl","can_delete":false,"product_type":"c1","uid":1075670,"ip_address":"","ucode":"F35A310D69BCFD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4Tosj3tAYvdgDfa32FAu85ibEicxhtibU4ibdm3YAgvTWwukycMlVfPwea9sL2bFSdBeymWI7iaIbg0g/132","comment_is_top":false,"comment_ctime":1534178506,"is_pvip":false,"replies":[{"id":"7067","content":"invokedynamic涉及到的东西很多，底层实现也在不断改进。看懂个大概就好啦","user_name":"作者回复","comment_id":19959,"uid":"1176688","ip_address":"","utype":1,"ctime":1534325501,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"83138557130","product_id":100010301,"comment_content":"看了两遍 勉强有个概念了 <br>还是基础不够 看不懂啊","like_count":19,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422037,"discussion_content":"invokedynamic涉及到的东西很多，底层实现也在不断改进。看懂个大概就好啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534325501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37407,"user_name":"　素丶　　","can_delete":false,"product_type":"c1","uid":1081535,"ip_address":"","ucode":"883B7EDBE76104","user_header":"https://static001.geekbang.org/account/avatar/00/10/80/bf/3041138b.jpg","comment_is_top":false,"comment_ctime":1541576746,"is_pvip":false,"replies":[{"id":"14114","content":"赞！","user_name":"作者回复","comment_id":37407,"uid":"1176688","ip_address":"","utype":1,"ctime":1542280403,"user_name_real":"郑雨迪"}],"discussion_count":3,"race_medal":0,"score":"78850988074","product_id":100010301,"comment_content":"https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;26389041<br>https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;30936412<br>可以和 Shijie 大大的两篇文章配合着看。","like_count":19,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428329,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542280403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249789,"avatar":"https://static001.geekbang.org/account/avatar/00/13/11/fd/45e90d04.jpg","nickname":"Casin","note":"","ucode":"E495A97E2BF6C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538537,"discussion_content":"mark下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639443419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1093541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/af/a5/afa1d7d7.jpg","nickname":"hasWhere","note":"","ucode":"2C2B2988107489","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159116,"discussion_content":"mark看的懵懵懂懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580653179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19641,"user_name":"ext4","can_delete":false,"product_type":"c1","uid":1180826,"ip_address":"","ucode":"FC881AECAC1974","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg","comment_is_top":false,"comment_ctime":1533918770,"is_pvip":false,"replies":[{"id":"7070","content":"语言里的final，是对于当前方法调用而言的。这是因为它实际上就传了个值进去。比如说你定义了int a，然后传入 i -&gt; i +a里，那么之后你对a的修改lambda是看不到的。<br><br>适配器针对的是多次不同调用，比如说每次调用你定义的final int a都不一样。","user_name":"作者回复","comment_id":19641,"uid":"1176688","ip_address":"","utype":1,"ctime":1534328284,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"65958428210","product_id":100010301,"comment_content":"我知道Java对Lambda有个规定：“The variable used in Lambda should be final or effectively final&quot;，也就是说Lambda表达式捕获的变量必须是final或等同于final的。而文中您又讲到：“对于捕获了变量的Lambda，每次invokedynamic都需要新建适配器类实例，以防止他们发生变化”。JVM之所以这么做，是因为这种final的要求仅限于Java source层面，在bytecode层面是是无法保证的。我理解的对吗？","like_count":15,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421929,"discussion_content":"语言里的final，是对于当前方法调用而言的。这是因为它实际上就传了个值进去。比如说你定义了int a，然后传入 i -&amp;gt; i +a里，那么之后你对a的修改lambda是看不到的。\n\n适配器针对的是多次不同调用，比如说每次调用你定义的final int a都不一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534328284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242011,"user_name":"lantern","can_delete":false,"product_type":"c1","uid":1473561,"ip_address":"","ucode":"E6217558F0B150","user_header":"","comment_is_top":false,"comment_ctime":1597561013,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18777430197","product_id":100010301,"comment_content":"用invokedynamic实现lambda发生了什么是看懂了，但没有完全想明白这么做的必要性，这样做相比于编译时解lambda语法糖生成一个匿名类有什么好处呢<br>是因为对于不捕获局部变量的lambda不用反复new对象吗，那么对于需要捕获局部变量的情况invokedynamic的实现方式还有什么其他的好处吗","like_count":4,"discussions":[{"author":{"id":1119490,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/02/66f65388.jpg","nickname":"雷霹雳的爸爸","note":"","ucode":"99BBA6D83DD11F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382515,"discussion_content":"应该还是为了可能的偷摸的干点什么，https://www.zhihu.com/question/39462935","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625622257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68037,"user_name":"Kfreer","can_delete":false,"product_type":"c1","uid":1114448,"ip_address":"","ucode":"0B6BA0603963C3","user_header":"https://static001.geekbang.org/account/avatar/00/11/01/50/9ac4905e.jpg","comment_is_top":false,"comment_ctime":1550394043,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18730263227","product_id":100010301,"comment_content":"如果该 Lambda 表达式捕获了其他变量，那么每次执行该 invokedynamic 指令，我们都要更新这些捕获了的变化。<br>问题：捕获的变量必须是final，为什么还会变呢，为什么会线程不安全呢？","like_count":4,"discussions":[{"author":{"id":1460942,"avatar":"https://static001.geekbang.org/account/avatar/00/16/4a/ce/affe4307.jpg","nickname":"叫啥不行","note":"","ucode":"A84B9B6594BF35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276653,"discussion_content":"因为可以用unsafe类对final进行修改，而jvm并不知道有没有修改","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590925069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20630,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1014800,"ip_address":"","ucode":"7E57FDCB5E5D49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg","comment_is_top":false,"comment_ctime":1534608304,"is_pvip":false,"replies":[{"id":"7323","content":"1. 这个数字0，指的是第几个bootstrap method，你多定义几个lambda，应该可以见到1 2 3等等。<br><br>2. 对的，是不能内联。不过，字节码中字段处还是会有final标志的。C2认为final实例字段在编译过程中不应该被认为是不变的，因为应用程序可能通过Unsafe来更改。Graal认为可以当成不变的，毕竟Java语言规范没有规定不可以。<br><br>V11的话，可以看出ConstantCallsite及时子类被特殊对待了。","user_name":"作者回复","comment_id":20630,"uid":"1176688","ip_address":"","utype":1,"ctime":1534778501,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"18714477488","product_id":100010301,"comment_content":"老师你好，我有两个问题，1是我看了几个有invokedynmaic指令的文件，都是invokedynamic #31,  0这种形式，似乎后面这个0没有什么作用，网上invokedynamic的解说也大多过时，我使用的是1.8.0_181版本。2. v10版本和v11版本性能的差距我猜想是v10版本不能正确的内联方法吧？虽然mh是final的，但是字节码层面已经丢失这个信息了。","like_count":4,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422338,"discussion_content":"1. 这个数字0，指的是第几个bootstrap method，你多定义几个lambda，应该可以见到1 2 3等等。\n\n2. 对的，是不能内联。不过，字节码中字段处还是会有final标志的。C2认为final实例字段在编译过程中不应该被认为是不变的，因为应用程序可能通过Unsafe来更改。Graal认为可以当成不变的，毕竟Java语言规范没有规定不可以。\n\nV11的话，可以看出ConstantCallsite及时子类被特殊对待了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534778501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39253,"user_name":"小鳄鱼","can_delete":false,"product_type":"c1","uid":1178888,"ip_address":"","ucode":"9C30CAFB41A263","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg","comment_is_top":false,"comment_ctime":1542240174,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14427142062","product_id":100010301,"comment_content":"老师，看来上一篇和这篇，又两个问题：<br>1. 尽管逃逸分析能够去除这些额外的新建实例开销，但是它也不是时时奏效。那么什么情况下不奏效呢？<br>2. 什么情况下编译器会将句柄识别成常量？除了本文中将MethodHandler定义为常量外，在其他什么情况下能识别为常量呢","like_count":3,"discussions":[{"author":{"id":1178888,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg","nickname":"小鳄鱼","note":"","ucode":"9C30CAFB41A263","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580740,"discussion_content":"看了后面的逃逸分析回来自己答：\n1. 基于逃逸分析的优化只对局部变量有用。当变量的作用域只在当前方法中，那么则认为变量逃逸。反之，如果变量可以在方法外部被修改，则认为变量不逃逸。当变量逃逸时，可以使用标量替换等方式优化，不再创建新的目标对象实例。\n2. 要满足常量的定义。一个很重要的点是，对象一旦生成就不能再被更改，例如：基础数据类型，String","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658366492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210699,"avatar":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","nickname":"-W.LI-","note":"","ucode":"3556786538664F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24531,"discussion_content":"1.文中写了逃逸分析生效的前提。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570171261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203993,"user_name":"snakorse","can_delete":false,"product_type":"c1","uid":1064887,"ip_address":"","ucode":"0AD727E1F16993","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/b7/0d8b5431.jpg","comment_is_top":false,"comment_ctime":1586316034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10176250626","product_id":100010301,"comment_content":"老师，请教个问题：java为什么采用在jvm上通过invokedynamic方式来实现lambda，而不直接通过在编译阶段直接生成和替换代码的方式实现？","like_count":2},{"had_liked":false,"id":20638,"user_name":"小橙橙","can_delete":false,"product_type":"c1","uid":1054923,"ip_address":"","ucode":"4F467210A15F66","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/cb/edb5a0a0.jpg","comment_is_top":false,"comment_ctime":1534616893,"is_pvip":false,"replies":[{"id":"7438","content":"主要是了解底层实现。<br><br>对普通的日常开发可能作用不大。对于进阶的，比如分析应用的性能瓶颈，了解字节码将有所帮助。","user_name":"作者回复","comment_id":20638,"uid":"1176688","ip_address":"","utype":1,"ctime":1534933196,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"10124551485","product_id":100010301,"comment_content":"其实有个地方一直没有想透，为什么要学习字节码，学习字节码对我们日常开发有什么作用吗，老师能否给指点迷津一下？","like_count":2,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422342,"discussion_content":"主要是了解底层实现。\n\n对普通的日常开发可能作用不大。对于进阶的，比如分析应用的性能瓶颈，了解字节码将有所帮助。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534933196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308615,"user_name":"ppyh","can_delete":false,"product_type":"c1","uid":1351148,"ip_address":"","ucode":"14022ADEC9B53F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","comment_is_top":false,"comment_ctime":1629705037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5924672333","product_id":100010301,"comment_content":"有一点不太明白，invokeddynamic为什么要用methodHandle来实现。","like_count":1},{"had_liked":false,"id":356080,"user_name":"Geek_a7016f","can_delete":false,"product_type":"c1","uid":2215364,"ip_address":"广东","ucode":"310C3D37108115","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er9Wgp3Yiby2q79pcibXFv4oPfVVCFDsq1cOh8vP7tegaqpzoeHdIWicBVWuYjG1Hs5UGAgvl00ua14w/132","comment_is_top":false,"comment_ctime":1661952386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661952386","product_id":100010301,"comment_content":"老师能提供一些前置基础资料吗？文章感觉有点难度。","like_count":0},{"had_liked":false,"id":351976,"user_name":"逆流的鱼","can_delete":false,"product_type":"c1","uid":1127223,"ip_address":"","ucode":"2F4813D17082F4","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/37/c9c544fb.jpg","comment_is_top":false,"comment_ctime":1658311652,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658311652","product_id":100010301,"comment_content":"看不懂","like_count":0},{"had_liked":false,"id":348694,"user_name":"Hyacinth","can_delete":false,"product_type":"c1","uid":1414510,"ip_address":"","ucode":"C9A251CC2FFA70","user_header":"https://static001.geekbang.org/account/avatar/00/15/95/6e/6f20ea3b.jpg","comment_is_top":false,"comment_ctime":1655304221,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1655304221","product_id":100010301,"comment_content":"基础太差 看不懂<br>","like_count":0},{"had_liked":false,"id":342118,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1650019467,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650019467","product_id":100010301,"comment_content":"文中 “ i-&gt;i2 和 i-&gt;ix ” 描述有问题，乘号不见了。","like_count":0},{"had_liked":false,"id":332844,"user_name":"竹林木","can_delete":false,"product_type":"c1","uid":2817866,"ip_address":"","ucode":"60031BA3A2D907","user_header":"","comment_is_top":false,"comment_ctime":1643723962,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643723962","product_id":100010301,"comment_content":"没有JVM基础根本看不懂啊","like_count":0},{"had_liked":false,"id":325191,"user_name":"Geek_5eca72","can_delete":false,"product_type":"c1","uid":2861167,"ip_address":"","ucode":"77016C587C7E19","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/QrAfzjy5NbAGeptpDAiaQqgfLnlW7JADawOBKJjojvTB1yicl1fIUwgAO7JLiakYB4ZJOAXYXxlJlcuD0mYBYsq4g/132","comment_is_top":false,"comment_ctime":1638858364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638858364","product_id":100010301,"comment_content":"我太菜了 我放弃了  : (","like_count":0},{"had_liked":false,"id":308921,"user_name":"ppyh","can_delete":false,"product_type":"c1","uid":1351148,"ip_address":"","ucode":"14022ADEC9B53F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","comment_is_top":false,"comment_ctime":1629862165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629862165","product_id":100010301,"comment_content":"前面的反射调用也不是final的啊，为什么能够被内联呢？","like_count":0},{"had_liked":false,"id":308609,"user_name":"ppyh","can_delete":false,"product_type":"c1","uid":1351148,"ip_address":"","ucode":"14022ADEC9B53F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","comment_is_top":false,"comment_ctime":1629701675,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629701675","product_id":100010301,"comment_content":"有深度","like_count":0},{"had_liked":false,"id":303266,"user_name":"滴答丶滴","can_delete":false,"product_type":"c1","uid":1181206,"ip_address":"","ucode":"2093C2948B4327","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/16/e85c1fa8.jpg","comment_is_top":false,"comment_ctime":1626691650,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1626691650","product_id":100010301,"comment_content":"既然捕获型Lambda表达式能借助即时编译器中的逃逸分析，来优化<br>那为什么上边还要建议使用非捕获的Lambda表达式。<br>这两句点矛盾吧","like_count":0,"discussions":[{"author":{"id":1178888,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg","nickname":"小鳄鱼","note":"","ucode":"9C30CAFB41A263","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582202,"discussion_content":"非捕获，说的是lambda表达式。不是说逃逸分析。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659315064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276968,"user_name":"LQS  KF","can_delete":false,"product_type":"c1","uid":1364737,"ip_address":"","ucode":"3C0A07A8220094","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/01/716d45b6.jpg","comment_is_top":false,"comment_ctime":1612195717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612195717","product_id":100010301,"comment_content":"最后两个版本，个人理解应该都会造成逃逸优化失效。v10版本是外界可以直接方法MethodHandle属性逸出，v11版本则是getTarget()方法也会造成逸出。","like_count":0},{"had_liked":false,"id":222903,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1590947583,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590947583","product_id":100010301,"comment_content":"invokeDynamic指令，出现是为了解决像lambada这样需要有很多不同lambada实现的场景<br>如果用传统编绎生成类及方法，则编绎时间会很长<br>invokeDynamic在lambada没有变量值的情况下，只生成一个call site，并且后面不同的表达式都对应一个方法链接。这样相对来说性能会好点","like_count":0},{"had_liked":false,"id":192206,"user_name":"今天","can_delete":false,"product_type":"c1","uid":1532354,"ip_address":"","ucode":"F8577A2BABCD1F","user_header":"https://static001.geekbang.org/account/avatar/00/17/61/c2/94c1d4c9.jpg","comment_is_top":false,"comment_ctime":1584843151,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584843151","product_id":100010301,"comment_content":"已经购买，期待后续文章","like_count":0},{"had_liked":false,"id":188799,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1584416736,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1584416736","product_id":100010301,"comment_content":"看后还是云里雾里的，可能是关于字节码的基础有点薄弱的缘故。<br>有几个问题想请教一下老师：<br>1、bootstrap方法是由编译器生成的？还是自己编写的？<br>2、boostrap返回的调用点所链接的方法句柄指向的是要调用的最终目标方法吗？<br>3、能对方法句柄做一个更详细的解释吗？<br><br>谢谢！","like_count":0},{"had_liked":false,"id":161560,"user_name":"鼠里鼠气","can_delete":false,"product_type":"c1","uid":1696883,"ip_address":"","ucode":"4793476BBDB202","user_header":"https://static001.geekbang.org/account/avatar/00/19/e4/73/74dce191.jpg","comment_is_top":false,"comment_ctime":1576232061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576232061","product_id":100010301,"comment_content":"invokedynamic是用来支持动态类型语言的，而不是把java语言变成动态类型语言，只是在java语言的方法调用上做了改进，以前是将方法分派固化在虚拟机上，现在可以动态的确定目标方法。不知道我说得对不对？还望大神指点一下","like_count":0},{"had_liked":false,"id":112051,"user_name":"KW💤","can_delete":false,"product_type":"c1","uid":1109389,"ip_address":"","ucode":"290DD7016F4EE0","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","comment_is_top":false,"comment_ctime":1562660459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562660459","product_id":100010301,"comment_content":"我想问下MonomorphicInlineCache这个例子，为什么能说“调用点方法句柄类型匹配”？<br>&quot;invoke&quot;的methodType是MethodType.methodType(void.class, Object.class)<br>“race”的methodType是 MethodType.methodType(void.class)。<br>还有callsite的用处是什么，我感觉只是将MethodHandle包了一层返回而已，为什么要多这一层","like_count":0},{"had_liked":false,"id":87008,"user_name":"夕林语","can_delete":false,"product_type":"c1","uid":1264180,"ip_address":"","ucode":"B57681D0C73E1B","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/34/1faac99b.jpg","comment_is_top":false,"comment_ctime":1555496294,"is_pvip":false,"discussion_count":1,"race_medal":2,"score":"1555496294","product_id":100010301,"comment_content":"v10和v11的区别仅仅是v11的内部类继承了ConstantCallSite，ConstantCallSite是不可被更改链接的调用点，是不是说明v11的内部类被内联了？从而可以达到和直接调用近似的执行效率","like_count":0,"discussions":[{"author":{"id":1178888,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg","nickname":"小鳄鱼","note":"","ucode":"9C30CAFB41A263","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580806,"discussion_content":"上一篇老师说过，方法句柄能否被内联的关键在于方法句柄否是可以识别为常量。v10版本，通过final进行定义，虽然没有继承ConstanceCallSite，但可以被认为是常量。而v11继承了ConstanceCallSite，这个在这篇文章中分析过，可以被内联。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658380031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19719,"user_name":"Void_seT","can_delete":false,"product_type":"c1","uid":1070863,"ip_address":"","ucode":"DD55CB0198A5CD","user_header":"https://static001.geekbang.org/account/avatar/00/10/57/0f/1f229bf5.jpg","comment_is_top":false,"comment_ctime":1533995448,"is_pvip":false,"replies":[{"id":"6936","content":"多谢指出！","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1534156065,"ip_address":"","comment_id":19719,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1533995448","product_id":100010301,"comment_content":"单态内联缓存的实现代码段，bootstrap方法的实现有问题，没有return一个CallSite类型返回值。另外，这篇有点难度了，看了三遍，勉强理解。","like_count":0,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421952,"discussion_content":"多谢指出！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534156065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19552,"user_name":"小江","can_delete":false,"product_type":"c1","uid":1080044,"ip_address":"","ucode":"5DE28BE4417EC6","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/ec/f39349f3.jpg","comment_is_top":false,"comment_ctime":1533875566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533875566","product_id":100010301,"comment_content":"老师邮箱可以提供一下吗，咨询一个问题，经过btrace增强后class文件错误问题","like_count":0},{"had_liked":false,"id":19489,"user_name":"自来也","can_delete":false,"product_type":"c1","uid":1082445,"ip_address":"","ucode":"0A436463B355D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/84/4d/97691ff9.jpg","comment_is_top":false,"comment_ctime":1533862286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1533862286","product_id":100010301,"comment_content":"示例应该用jdk.internal.org.objectweb.asm.*包吧？","like_count":0}]}