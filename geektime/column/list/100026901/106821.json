{"id":106821,"title":"29 | 巧用上下文管理器和With语句精简代码","content":"<p>你好，我是景霄。</p><p>我想你对Python中的with语句一定不陌生，在专栏里它也曾多次出现，尤其是在文件的输入输出操作中，不过我想，大部分人可能习惯了它的使用，却并不知道隐藏在其背后的“秘密”。</p><p>那么，究竟with语句要怎么用，与之相关的上下文管理器（context manager）是什么，它们之间又有着怎样的联系呢？这节课，我就带你一起揭开它们的神秘面纱。</p><h2>什么是上下文管理器？</h2><p>在任何一门编程语言中，文件的输入输出、数据库的连接断开等，都是很常见的资源管理操作。但资源都是有限的，在写程序时，我们必须保证这些资源在使用过后得到释放，不然就容易造成资源泄露，轻者使得系统处理缓慢，重则会使系统崩溃。</p><p>光说这些概念，你可能体会不到这一点，我们可以看看下面的例子：</p><pre><code>for x in range(10000000): \n    f = open('test.txt', 'w')\n    f.write('hello') \n</code></pre><p>这里我们一共打开了10000000个文件，但是用完以后都没有关闭它们，如果你运行该段代码，便会报错：</p><pre><code>OSError: [Errno 23] Too many open files in system: 'test.txt'\n</code></pre><p>这就是一个典型的资源泄露的例子。因为程序中同时打开了太多的文件，占据了太多的资源，造成系统崩溃。</p><p>为了解决这个问题，不同的编程语言都引入了不同的机制。而在Python中，对应的解决方式便是上下文管理器（context manager）。上下文管理器，能够帮助你自动分配并且释放资源，其中最典型的应用便是with语句。所以，上面代码的正确写法应该如下所示：</p><!-- [[[read_end]]] --><pre><code>for x in range(10000000):\n    with open('test.txt', 'w') as f:\n        f.write('hello')\n</code></pre><p>这样，我们每次打开文件<code>“test.txt”</code>，并写入<code>‘hello’</code>之后，这个文件便会自动关闭，相应的资源也可以得到释放，防止资源泄露。当然，with语句的代码，也可以用下面的形式表示：</p><pre><code>f = open('test.txt', 'w')\ntry:\n    f.write('hello')\nfinally:\n    f.close()\n</code></pre><p>要注意的是，最后的finally block尤其重要，哪怕在写入文件时发生错误异常，它也可以保证该文件最终被关闭。不过与with语句相比，这样的代码就显得冗余了，并且还容易漏写，因此我们一般更倾向于使用with语句。</p><p>另外一个典型的例子，是Python中的threading.lock类。举个例子，比如我想要获取一个锁，执行相应的操作，完成后再释放，那么代码就可以写成下面这样：</p><pre><code>some_lock = threading.Lock()\nsome_lock.acquire()\ntry:\n    ...\nfinally:\n    some_lock.release()\n</code></pre><p>而对应的with语句，同样非常简洁：</p><pre><code>some_lock = threading.Lock()\nwith somelock:\n    ...\n</code></pre><p>我们可以从这两个例子中看到，with语句的使用，可以简化了代码，有效避免资源泄露的发生。</p><h2>上下文管理器的实现</h2><h3>基于类的上下文管理器</h3><p>了解了上下文管理的概念和优点后，下面我们就通过具体的例子，一起来看看上下文管理器的原理，搞清楚它的内部实现。这里，我自定义了一个上下文管理类FileManager，模拟Python的打开、关闭文件操作：</p><pre><code>class FileManager:\n    def __init__(self, name, mode):\n        print('calling __init__ method')\n        self.name = name\n        self.mode = mode \n        self.file = None\n        \n    def __enter__(self):\n        print('calling __enter__ method')\n        self.file = open(self.name, self.mode)\n        return self.file\n\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print('calling __exit__ method')\n        if self.file:\n            self.file.close()\n            \nwith FileManager('test.txt', 'w') as f:\n    print('ready to write to file')\n    f.write('hello world')\n    \n## 输出\ncalling __init__ method\ncalling __enter__ method\nready to write to file\ncalling __exit__ method\n</code></pre><p>需要注意的是，当我们用类来创建上下文管理器时，必须保证这个类包括方法<code>”__enter__()”</code>和方法<code>“__exit__()”</code>。其中，方法<code>“__enter__()”</code>返回需要被管理的资源，方法<code>“__exit__()”</code>里通常会存在一些释放、清理资源的操作，比如这个例子中的关闭文件等等。</p><p>而当我们用with语句，执行这个上下文管理器时：</p><pre><code>with FileManager('test.txt', 'w') as f:\n    f.write('hello world')\n</code></pre><p>下面这四步操作会依次发生：</p><ol>\n<li>方法<code>“__init__()”</code>被调用，程序初始化对象FileManager，使得文件名（name）是<code>\"test.txt\"</code>，文件模式(mode)是<code>'w'</code>；</li>\n<li>方法<code>“__enter__()”</code>被调用，文件<code>“test.txt”</code>以写入的模式被打开，并且返回FileManager对象赋予变量f；</li>\n<li>字符串<code>“hello world”</code>被写入文件<code>“test.txt”</code>；</li>\n<li>方法<code>“__exit__()”</code>被调用，负责关闭之前打开的文件流。</li>\n</ol><p>因此，这个程序的输出是：</p><pre><code>calling __init__ method\ncalling __enter__ method\nready to write to file\ncalling __exit__ meth\n</code></pre><p>另外，值得一提的是，方法<code>“__exit__()”</code>中的参数<code>“exc_type, exc_val, exc_tb”</code>，分别表示exception_type、exception_value和traceback。当我们执行含有上下文管理器的with语句时，如果有异常抛出，异常的信息就会包含在这三个变量中，传入方法<code>“__exit__()”</code>。</p><p>因此，如果你需要处理可能发生的异常，可以在<code>“__exit__()”</code>添加相应的代码，比如下面这样来写：</p><pre><code>class Foo:\n    def __init__(self):\n        print('__init__ called')        \n\n    def __enter__(self):\n        print('__enter__ called')\n        return self\n    \n    def __exit__(self, exc_type, exc_value, exc_tb):\n        print('__exit__ called')\n        if exc_type:\n            print(f'exc_type: {exc_type}')\n            print(f'exc_value: {exc_value}')\n            print(f'exc_traceback: {exc_tb}')\n            print('exception handled')\n        return True\n    \nwith Foo() as obj:\n    raise Exception('exception raised').with_traceback(None)\n\n# 输出\n__init__ called\n__enter__ called\n__exit__ called\nexc_type: &lt;class 'Exception'&gt;\nexc_value: exception raised\nexc_traceback: &lt;traceback object at 0x1046036c8&gt;\nexception handled\n</code></pre><p>这里，我们在with语句中手动抛出了异常“exception raised”，你可以看到，<code>“__exit__()”</code>方法中异常，被顺利捕捉并进行了处理。不过需要注意的是，如果方法<code>“__exit__()”</code>没有返回True，异常仍然会被抛出。因此，如果你确定异常已经被处理了，请在<code>“__exit__()”</code>的最后，加上<code>“return True”</code>这条语句。</p><p>同样的，数据库的连接操作，也常常用上下文管理器来表示，这里我给出了比较简化的代码：</p><pre><code>class DBConnectionManager: \n    def __init__(self, hostname, port): \n        self.hostname = hostname \n        self.port = port \n        self.connection = None\n  \n    def __enter__(self): \n        self.connection = DBClient(self.hostname, self.port) \n        return self\n  \n    def __exit__(self, exc_type, exc_val, exc_tb): \n        self.connection.close() \n  \nwith DBConnectionManager('localhost', '8080') as db_client: \n</code></pre><p>与前面FileManager的例子类似：</p><ul>\n<li>方法<code>“__init__()”</code>负责对数据库进行初始化，也就是将主机名、接口（这里是localhost和8080）分别赋予变量hostname和port；</li>\n<li>方法<code>“__enter__()”</code>连接数据库，并且返回对象DBConnectionManager；</li>\n<li>方法<code>“__exit__()”</code>则负责关闭数据库的连接。</li>\n</ul><p>这样一来，只要你写完了DBconnectionManager这个类，那么在程序每次连接数据库时，我们都只需要简单地调用with语句即可，并不需要关心数据库的关闭、异常等等，显然大大提高了开发的效率。</p><h3>基于生成器的上下文管理器</h3><p>诚然，基于类的上下文管理器，在Python中应用广泛，也是我们经常看到的形式，不过Python中的上下文管理器并不局限于此。除了基于类，它还可以基于生成器实现。接下来我们来看一个例子。</p><p>比如，你可以使用装饰器contextlib.contextmanager，来定义自己所需的基于生成器的上下文管理器，用以支持with语句。还是拿前面的类上下文管理器FileManager来说，我们也可以用下面形式来表示：</p><pre><code>from contextlib import contextmanager\n\n@contextmanager\ndef file_manager(name, mode):\n    try:\n        f = open(name, mode)\n        yield f\n    finally:\n        f.close()\n        \nwith file_manager('test.txt', 'w') as f:\n    f.write('hello world')\n</code></pre><p>这段代码中，函数file_manager()是一个生成器，当我们执行with语句时，便会打开文件，并返回文件对象f；当with语句执行完后，finally block中的关闭文件操作便会执行。</p><p>你可以看到，使用基于生成器的上下文管理器时，我们不再用定义<code>“__enter__()”</code>和<code>“__exit__()”</code>方法，但请务必加上装饰器@contextmanager，这一点新手很容易疏忽。</p><p>讲完这两种不同原理的上下文管理器后，还需要强调的是，基于类的上下文管理器和基于生成器的上下文管理器，这两者在功能上是一致的。只不过，</p><ul>\n<li>基于类的上下文管理器更加flexible，适用于大型的系统开发；</li>\n<li>而基于生成器的上下文管理器更加方便、简洁，适用于中小型程序。</li>\n</ul><p>无论你使用哪一种，请不用忘记在方法<code>“__exit__()”</code>或者是finally block中释放资源，这一点尤其重要。</p><h2>总结</h2><p>这节课，我们先通过一个简单的例子，了解了资源泄露的易发生性，和其带来的严重后果，从而引入了应对方案——即上下文管理器的概念。上下文管理器，通常应用在文件的打开关闭和数据库的连接关闭等场景中，可以确保用过的资源得到迅速释放，有效提高了程序的安全性，</p><p>接着，我们通过自定义上下文管理的实例，了解了上下文管理工作的原理，并一起学习了基于类的上下文管理器和基于生成器的上下文管理器，这两者的功能相同，具体用哪个，取决于你的具体使用场景。</p><p>另外，上下文管理器通常和with语句一起使用，大大提高了程序的简洁度。需要注意的是，当我们用with语句执行上下文管理器的操作时，一旦有异常抛出，异常的类型、值等具体信息，都会通过参数传入<code>“__exit__()”</code>函数中。你可以自行定义相关的操作对异常进行处理，而处理完异常后，也别忘了加上<code>“return True”</code>这条语句，否则仍然会抛出异常。</p><h2>思考题</h2><p>那么，在你日常的学习工作中，哪些场景使用过上下文管理器？使用过程中又遇到了哪些问题，或是有什么新的发现呢？欢迎在下方留言与我讨论，也欢迎你把这篇文章分享出去，我们一起交流，一起进步。</p><p></p>","comments":[{"had_liked":false,"id":113723,"user_name":"AllenGFLiu","can_delete":false,"product_type":"c1","uid":1221991,"ip_address":"","ucode":"90FA8A619A2629","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","comment_is_top":false,"comment_ctime":1563147897,"is_pvip":false,"replies":[{"id":"41481","content":"嗯嗯，是这样的","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1563169123,"ip_address":"","comment_id":113723,"utype":1}],"discussion_count":2,"race_medal":0,"score":"100347395705","product_id":100026901,"comment_content":"第一次有教程提到这个上下文管理器，学习。<br>对知识的学习就是需要从多角度重复去看，在这个过程中查遗补缺，才能保持不断进步。","like_count":24,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458361,"discussion_content":"嗯嗯，是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563169123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1848630,"avatar":"","nickname":"xiaoyan","note":"","ucode":"064CCE4FC356F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236829,"discussion_content":"你看的多半是阉割版的教程吧，mark lutz老师的书所有内容都有，你可以看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587125775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113979,"user_name":"ajodfaj","can_delete":false,"product_type":"c1","uid":1019618,"ip_address":"","ucode":"4E96DDDF9D686D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/e2/fc6260fb.jpg","comment_is_top":false,"comment_ctime":1563197954,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"61692740098","product_id":100026901,"comment_content":"with tf.Session() as sess","like_count":15,"discussions":[{"author":{"id":1528865,"avatar":"https://static001.geekbang.org/account/avatar/00/17/54/21/aaf74594.jpg","nickname":"Fullmetal Alchemist","note":"","ucode":"4D260084DBC2B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385223,"discussion_content":"一看就是老炼丹师了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626945275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113746,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1563150830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57397725678","product_id":100026901,"comment_content":"主要用于数据库连接","like_count":14},{"had_liked":false,"id":113749,"user_name":"new","can_delete":false,"product_type":"c1","uid":1096252,"ip_address":"","ucode":"DFFCDC2123CCAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/ba/3c/2b642c9a.jpg","comment_is_top":false,"comment_ctime":1563151539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53102759091","product_id":100026901,"comment_content":"打开文件时用最方便","like_count":13},{"had_liked":false,"id":113854,"user_name":"LJK","can_delete":false,"product_type":"c1","uid":1199213,"ip_address":"","ucode":"12B2441099FF1D","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","comment_is_top":false,"comment_ctime":1563173518,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"35922911886","product_id":100026901,"comment_content":"老师好，请问基于类的上下文，“__enter__“方法什么时候返回self呢？DBConnectionManager的例子中可以说明一下为什么是返回self不是返回self.connection么？","like_count":8,"discussions":[{"author":{"id":1130122,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3e/8a/891b0e58.jpg","nickname":"wnz27","note":"","ucode":"BC9ACB6B7C6FD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71669,"discussion_content":"取决于你with语句要用什么，我觉得后面的那个connection漏了，self的意思是类的实例，但我觉得那个with语句里要使用的是那个connection。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1575446248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2977554,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLCmEAVBUFDcT4pChy93J4RKHA2OasbwWaIYXB70t1CJsmrD71sxnpWlDfY1diaLLKz1zUwDjzAKibGQ/132","nickname":"Geek_dcd08f","note":"","ucode":"1ECA7B63CA95A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570101,"discussion_content":"import pymongo\n\nclass DBConnectionManager:\n    def __init__(self, hostname, port):\n        self.hostname = hostname\n        self.port = port\n        self.connection = None\n\n    def DBClient(self, hostname, port):\n        my_client = pymongo.MongoClient(host=hostname, port=port)\n        return my_client\n\n    def __enter__(self):\n        self.connection = self.DBClient(self.hostname, self.port)\n        return self.connection\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.connection.close()\n\n\nwith DBConnectionManager(&#39;localhost&#39;, 27017) as db_client:\n    mydb = db_client[数据库]\n    mongod_con = mydb[集合]\n    mongod_con.insert_one(data)\n    print(&#39;连接成功&#39;)\n都行取决你要什么\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651664676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113731,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1563148695,"is_pvip":false,"replies":[{"id":"41480","content":"准确的说释放资源的行为发生在with语句的最后（上下文管理器的__exit__函数内）","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1563169102,"ip_address":"","comment_id":113731,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27332952471","product_id":100026901,"comment_content":"是不是只有程序出了with代码块，管理的对象才会析构，也就是释放资源？","like_count":7,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458364,"discussion_content":"准确的说释放资源的行为发生在with语句的最后（上下文管理器的__exit__函数内）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563169102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1126441,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","nickname":"小侠龙旋风","note":"","ucode":"073F3924A99835","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2465,"discussion_content":"析构是__del__，和__exit__不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563677553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114281,"user_name":"Geek_59f23e","can_delete":false,"product_type":"c1","uid":1513783,"ip_address":"","ucode":"A463C6EB7447FD","user_header":"https://static001.geekbang.org/account/avatar/00/17/19/37/e0a9bf99.jpg","comment_is_top":false,"comment_ctime":1563265116,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18743134300","product_id":100026901,"comment_content":"UnboundLocalError: local variable &#39;f&#39; referenced before assignment<br>最后一个例子有报错哦，基于生成器的上下文管理器那儿，提示说finally语句里的f变量没有先声明。","like_count":4,"discussions":[{"author":{"id":1934873,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/86/19/86d74814.jpg","nickname":"天凉好个秋","note":"","ucode":"718D353E16C8F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332694,"discussion_content":"在try之前声明一个global","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607313322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246498,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1599379442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189314034","product_id":100026901,"comment_content":"这里with 的用法和C#中的using 一样，表示资源变量在一个块中有效，块结束后自动回收资源","like_count":2},{"had_liked":false,"id":146848,"user_name":"火锅小王子","can_delete":false,"product_type":"c1","uid":1053262,"ip_address":"","ucode":"7D1BF39C437A99","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/4e/ff0702fc.jpg","comment_is_top":false,"comment_ctime":1572675438,"is_pvip":false,"replies":[{"id":"66796","content":"后面有讲到","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1579136111,"ip_address":"","comment_id":146848,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10162610030","product_id":100026901,"comment_content":"现在才学这个专栏 感觉落后了好多同学 想问下老师一个问题 这里讲到了上下文管理器 可不可以分析下async with异步上下文的逻辑和用法 ？一直不是很明白这个点 😀","like_count":2,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473031,"discussion_content":"后面有讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579136111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143158,"user_name":"Carl","can_delete":false,"product_type":"c1","uid":1355401,"ip_address":"","ucode":"B611507DCFFA11","user_header":"https://static001.geekbang.org/account/avatar/00/14/ae/89/81404170.jpg","comment_is_top":false,"comment_ctime":1571640852,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10161575444","product_id":100026901,"comment_content":"为什么平时使用 with open() as f 时可以畅通无阻呢?<br>是因为open这个函数在源码里就用@contextmanager装饰了吗?","like_count":2,"discussions":[{"author":{"id":1313840,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","nickname":"lyonger","note":"","ucode":"E89A75DADEA2A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306803,"discussion_content":"可以看下这里：https://stackoverflow.com/questions/43757161/why-can-you-use-open-as-context-manager","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600394070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2034865,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/0c/b1/f85dbb1e.jpg","nickname":"小西子","note":"","ucode":"321C9C6075FFE2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290457,"discussion_content":"同问，请问同学搞清楚了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594479400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114562,"user_name":"瞳梦","can_delete":false,"product_type":"c1","uid":1596386,"ip_address":"","ucode":"A86FC44F6321BD","user_header":"","comment_is_top":false,"comment_ctime":1563336882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10153271474","product_id":100026901,"comment_content":"请问数据库的那个例子，__enter__()中返回self.connection是不是更符合实际应用中的情况。 ","like_count":2},{"had_liked":false,"id":120339,"user_name":"fly1024","can_delete":false,"product_type":"c1","uid":1076193,"ip_address":"","ucode":"EBABDE1D13B509","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/e1/90d63f3e.jpg","comment_is_top":false,"comment_ctime":1564837335,"is_pvip":false,"replies":[{"id":"48149","content":"对","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1567123892,"ip_address":"","comment_id":120339,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5859804631","product_id":100026901,"comment_content":"有个疑问: 对于file和Lock这两个使用with用法，python会自动调用对应释放资源的函数(close和release)，这两个释放资源的函数也是定义__exit函数里的吗？希望老师解答一下。","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461292,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567123892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118227,"user_name":"张洪阆","can_delete":false,"product_type":"c1","uid":1001954,"ip_address":"","ucode":"CFF7035D0DF059","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/e2/1fad12eb.jpg","comment_is_top":false,"comment_ctime":1564296786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5859264082","product_id":100026901,"comment_content":"with限制了对象的作用域，相当于是个临时对象","like_count":1},{"had_liked":false,"id":113817,"user_name":"Geek_d848f7","can_delete":false,"product_type":"c1","uid":1524021,"ip_address":"","ucode":"F24BC59B6E9E6B","user_header":"","comment_is_top":false,"comment_ctime":1563160993,"is_pvip":false,"replies":[{"id":"41478","content":"哪里不明白？文章中应该讲的很清楚了","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1563168972,"ip_address":"","comment_id":113817,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858128289","product_id":100026901,"comment_content":"还是不怎么清楚基于生成器的上下文管理器的运行过程","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458399,"discussion_content":"哪里不明白？文章中应该讲的很清楚了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563168972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113786,"user_name":"倾","can_delete":false,"product_type":"c1","uid":1524099,"ip_address":"","ucode":"ADE03757A4AAE2","user_header":"https://static001.geekbang.org/account/avatar/00/17/41/83/a6263932.jpg","comment_is_top":false,"comment_ctime":1563156613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5858123909","product_id":100026901,"comment_content":"只是在文件操作时使用，今天第一次学习到还能这么用。","like_count":1},{"had_liked":false,"id":327125,"user_name":"Fearless.","can_delete":false,"product_type":"c1","uid":2416390,"ip_address":"","ucode":"0870B7BB23E294","user_header":"https://static001.geekbang.org/account/avatar/00/24/df/06/72f90828.jpg","comment_is_top":false,"comment_ctime":1639926942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639926942","product_id":100026901,"comment_content":"  yield f  <br>这里用生成器的意义是啥呢？","like_count":0},{"had_liked":false,"id":255415,"user_name":"王位庆","can_delete":false,"product_type":"c1","uid":1180978,"ip_address":"","ucode":"D480AEA92894FE","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/32/7440d47d.jpg","comment_is_top":false,"comment_ctime":1603339242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603339242","product_id":100026901,"comment_content":"最近正好看with语句，然后看课程学习了一下。基本了解了原理","like_count":0},{"had_liked":false,"id":253859,"user_name":"郭纯","can_delete":false,"product_type":"c1","uid":1314521,"ip_address":"","ucode":"2613860B4642C4","user_header":"https://static001.geekbang.org/account/avatar/00/14/0e/d9/e61ce097.jpg","comment_is_top":false,"comment_ctime":1602921182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602921182","product_id":100026901,"comment_content":"我的理解在 __enter__ 和 __exit__ 魔术方法内定义资源初始化和资源释放的逻辑.也就是两个回调钩子. 当使用 with 的时候会在代码块内创建上下文.在上下文开始的时候执行 __enter__ 钩子函数. 在上下文销毁之前执行__exit__ 钩子函数. 提供了类似生命周期的机制.","like_count":0},{"had_liked":false,"id":241158,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1597204571,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597204571","product_id":100026901,"comment_content":"这一节学到了with 的上下文管理器，之前都是f.close(  )  ","like_count":0},{"had_liked":false,"id":161898,"user_name":"风含叶","can_delete":false,"product_type":"c1","uid":1162800,"ip_address":"","ucode":"7AE8D3963343AB","user_header":"https://static001.geekbang.org/account/avatar/00/11/be/30/1154657e.jpg","comment_is_top":false,"comment_ctime":1576395723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576395723","product_id":100026901,"comment_content":"1. 主要是 io 操作，包含 文件打开关闭、网络请求","like_count":0},{"had_liked":false,"id":154349,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574412803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574412803","product_id":100026901,"comment_content":"内存管理Python已经实现，with语句是管理其他类型资源的简便方法。","like_count":0},{"had_liked":false,"id":142896,"user_name":"自由民","can_delete":false,"product_type":"c1","uid":1346236,"ip_address":"","ucode":"435C67531697F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/bc/cb39ed38.jpg","comment_is_top":false,"comment_ctime":1571577605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571577605","product_id":100026901,"comment_content":"没用过，以前在c&#47;c++里都是自己释放资源的。最多在类的析构函数里释放，但是这样还是有可能会资源泄露的。","like_count":0},{"had_liked":false,"id":138814,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1570459559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570459559","product_id":100026901,"comment_content":"超喜欢py 这总把啰哩巴嗦的实现简化的套路。","like_count":0},{"had_liked":false,"id":137762,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1569839000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569839000","product_id":100026901,"comment_content":"“__enter__()返回FileManager 对象赋给变量f”这里应该写错了，应该是返回资源self.file给变量f","like_count":0},{"had_liked":false,"id":125502,"user_name":"温若","can_delete":false,"product_type":"c1","uid":1633918,"ip_address":"","ucode":"F9DA0C07F11FF3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI9TONIzolbQaRAubeRv37J4zfwRicsOPe8T6LpAgfLxusiaiaibAWmTwNRxb3OeChNbc0kIgtlhoIEWw/132","comment_is_top":false,"comment_ctime":1566195850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566195850","product_id":100026901,"comment_content":"some_lock = threading.Lock()<br>with somelock:<br>    ...<br><br>这个第二行是不是 with some_lock ? ","like_count":0},{"had_liked":false,"id":116510,"user_name":"magician","can_delete":false,"product_type":"c1","uid":1483968,"ip_address":"","ucode":"1BD1125C7C907A","user_header":"https://static001.geekbang.org/account/avatar/00/16/a4/c0/c6880c07.jpg","comment_is_top":false,"comment_ctime":1563860435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563860435","product_id":100026901,"comment_content":"DBClient用了什么python package?","like_count":0},{"had_liked":false,"id":115625,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1563677742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563677742","product_id":100026901,"comment_content":"老师，您好，threading.Lock()案例能否写得详细一点","like_count":0},{"had_liked":false,"id":115207,"user_name":"Geek_077da0","can_delete":false,"product_type":"c1","uid":1479000,"ip_address":"","ucode":"EBA26487CB0482","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIenBesolAerbtjodfkbSsM9VFsHkr6icdZgPqkbQkx1Easl8jqRPWQubEfib3plicD1zXwnTbQ2xU1A/132","comment_is_top":false,"comment_ctime":1563507927,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563507927","product_id":100026901,"comment_content":"老师您好，在DBConnectionManager中的__enter__方法返回的是self，即当前对象，但是在FileManager类的__enter__方法中返回的却是self.file。<br>请问究竟是应该返回对象本身，还是应该返回这个对象具体要操作的那个资源呢？希望能得到您的解答。","like_count":0,"discussions":[{"author":{"id":1126441,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","nickname":"小侠龙旋风","note":"","ucode":"073F3924A99835","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2466,"discussion_content":"应该写成self.connection吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563677638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114153,"user_name":"岁月婧好","can_delete":false,"product_type":"c1","uid":1580287,"ip_address":"","ucode":"A75DB677DE61D3","user_header":"https://static001.geekbang.org/account/avatar/00/18/1c/ff/cfc25424.jpg","comment_is_top":false,"comment_ctime":1563243624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563243624","product_id":100026901,"comment_content":"主要用于 打开文件、连接数据库等","like_count":0},{"had_liked":false,"id":114074,"user_name":"converse✪","can_delete":false,"product_type":"c1","uid":1433812,"ip_address":"","ucode":"0CC4C24A6458B6","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d4/bdd3ed27.jpg","comment_is_top":false,"comment_ctime":1563236188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563236188","product_id":100026901,"comment_content":"文件操作最常用","like_count":0},{"had_liked":false,"id":114019,"user_name":"响雨","can_delete":false,"product_type":"c1","uid":1581705,"ip_address":"","ucode":"C5FB3A3BC68F92","user_header":"https://static001.geekbang.org/account/avatar/00/18/22/89/73397ccb.jpg","comment_is_top":false,"comment_ctime":1563205529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563205529","product_id":100026901,"comment_content":"打开文件的操作使用with语句，这样就不会忘记关闭文件了","like_count":0},{"had_liked":false,"id":113872,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1563176731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563176731","product_id":100026901,"comment_content":"没有在大型项目使用过，由于目前还在学习阶段，只有在自己做数据分析，打开表格文件的时候使用过with。还有发现一个无伤大雅的笔误：&quot;exception_type、exception_value和tracebook&quot;, 最后一个tracebook应该是traceback吧？调用栈？<br>","like_count":0},{"had_liked":false,"id":113813,"user_name":"Geek_d848f7","can_delete":false,"product_type":"c1","uid":1524021,"ip_address":"","ucode":"F24BC59B6E9E6B","user_header":"","comment_is_top":false,"comment_ctime":1563160367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563160367","product_id":100026901,"comment_content":"利用邮箱发邮件中使用到了，但文中提到的基于生成器的上下文管理第一次听过，这个的使用是不是主要在于需要关注资源是否被释放的生成器中呢？","like_count":0},{"had_liked":false,"id":113789,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1563157171,"is_pvip":false,"replies":[{"id":"41479","content":"谢谢指正，已更新","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1563168986,"ip_address":"","comment_id":113789,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563157171","product_id":100026901,"comment_content":"老师，最后一段代码执行后报这个错：<br>TypeError: file_manager() missing 1 required positional argument: &#39;mode&#39;<br><br>应该写成这样把，<br>with file_manager(&#39;test.txt&#39;,&#39;w&#39;) as f:<br>    f.write(&#39;hello world2&#39;)","like_count":0,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458388,"discussion_content":"谢谢指正，已更新","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563168986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113763,"user_name":"ZJY😇","can_delete":false,"product_type":"c1","uid":1524683,"ip_address":"","ucode":"766DB464A0403C","user_header":"https://static001.geekbang.org/account/avatar/00/17/43/cb/665048ce.jpg","comment_is_top":false,"comment_ctime":1563152965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563152965","product_id":100026901,"comment_content":"http的session是上下文管理器吗？","like_count":0}]}