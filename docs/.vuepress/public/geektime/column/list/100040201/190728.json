{"id":190728,"title":"25 | 数据存储架构：如何改善系统的数据存储能力？","content":"<p>在整个互联网系统架构中，承受着最大处理压力，最难以被伸缩的，就是数据存储部分。原因主要有两方面。一方面，数据存储需要使用硬盘，而硬盘的处理速度要比其他几种计算资源，比如CPU、内存、网卡都要慢一些；另一方面，数据是公司最重要的资产，公司需要保证数据的高可用以及一致性，非功能性约束更多一些。</p><p>因此数据存储通常都是互联网应用的瓶颈。在高并发的情况下，最容易出现性能问题的就是数据存储。目前用来改善数据存储能力的主要手段包括：数据库主从复制、数据库分片和NoSQL数据库。</p><h2>数据库主从复制</h2><p>我们以MySQL为例，看下数据库主从复制的实现技术以及应用场景。</p><p>MySQL的主从复制，顾名思义就是将MySQL主数据库中的数据复制到从数据库中去。主要的复制原理是，当应用程序客户端发送一条更新命令到主服务器数据库的时候，数据库会把这条更新命令同步记录到Binlog中，然后由另外一个线程从Binlog中读取这条日志，通过远程通讯的方式将它复制到从服务器上面去。</p><p>从服务器获得这条更新日志后，将其加入到自己的Relay Log中，然后由另外一个SQL执行线程从Relay log中读取这条新的日志，并把它在本地的数据库中重新执行一遍，这样当客户端应用程序执行一个update命令的时候，这个命令会同时在主数据库和从数据库上执行，从而实现了主数据库向从数据库的复制，让从数据库和主数据库保持一样的数据。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/b4/cc/b44938ad3560931905ecdfdd763d50cc.png?wh=790*604\" alt=\"\"><br>\n通过数据库主从复制的方式，我们可以实现数据库读写分离。写操作访问主数据库，读操作访问从数据库，使数据库具有更强大的访问负载能力，支撑更多的用户访问。在实践中，通常采用一主多从的数据复制方案，也就是说，一个主数据库将数据复制到多个从数据库，多个从数据库承担更多的读操作压力，以及不同的角色，比如有的从数据库用来做实时数据分析，有的从数据库用来做批任务报表计算，有的单纯做数据备份。</p><p>采用一主多从的方案，当某个从数据库宕机的时候，还可以将读操作迁移到其他从数据库上，保证读操作的高可用。但如果主数据库宕机，系统就没法使用了，因此现实中，也会采用MySQL主主复制的方案。也就是说，两台服务器互相备份，任何一台服务器都会将自己的Binlog复制到另一台机器的Relay Log中，以保持两台服务器的数据一致。</p><p><img src=\"https://static001.geekbang.org/resource/image/2c/0f/2ca67b5a646b7a1ee206f32c78303e0f.png?wh=1002*698\" alt=\"\"></p><p>使用主主复制需要注意的是，主主复制仅仅用来提升数据写操作的可用性，并不能用来提高写操作的性能。任何时候，系统中都只能有一个数据库作为主数据库，也就是说，所有的应用程序都必须连接到同一个主数据库进行写操作。只有当该数据库宕机失效的时候，才会将写操作切换到另一台主数据库上。这样才能够保证数据库数据的一致性，不会出现数据冲突。</p><p>此外，不管是主从复制还是主主复制，都无法提升数据库的存储能力，也就是说，不管增加多少服务器，这些服务器存储的数据都是一样的。如果数据量太大，数据库无法存下这么多的数据，通过数据库复制是无法解决问题的。</p><h2>数据库分片</h2><p>我们上面说到，数据库主从复制无法解决数据库的存储问题，但是数据库分片技术可以解决。也就是说，将一张表的数据分成若干片，每一片都包含了数据表中一部分的行记录，然后每一片存储在不同的服务器上，这样一张表就存储在多台服务器上了。</p><p>最简单的数据库分片存储可以采用硬编码的方式，在程序代码中直接指定一条数据库记录要存放到哪个服务器上。比如将用户表分成两片，存储在两台服务器上，那么就可以在程序代码中根据用户ID进行分片计算，ID为偶数的用户记录存储到服务器1，ID为奇数的用户记录存储到服务器2。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/38/76a4efee00c67cb1fa745b6f3dfdfa38.png?wh=1472*760\" alt=\"\"><br>\n但是硬编码方式的缺点比较明显。首先，如果要增加服务器，那么就必须修改分片逻辑代码，这样程序代码就会因为非业务需求产生不必要的变更；其次，分片逻辑耦合在处理业务逻辑的程序代码中，修改分片逻辑或者修改业务逻辑都可能使另一部分代码因为不小心的改动而出现Bug。</p><p>但是我们可以通过使用分布式关系数据库中间件解决这个问题，将数据的分片逻辑在中间件中完成，对应用程序透明。</p><p>比如MYCAT。</p><p><img src=\"https://static001.geekbang.org/resource/image/c3/d7/c3e3bae9e9ed1c5de922d0d6be000ad7.png?wh=2474*1236\" alt=\"\"><br>\n应用程序像使用MySQL数据库一样连接MYCAT，提交SQL命令。MYCAT在收到SQL命令以后，查找配置的分片逻辑规则。比如上图例子中，根据地区进行数据分片，不同地区的订单存储在不同的数据库上，那么MYCAT就可以解析出SQL中的地区字段prov，根据这个字段连接相对应的数据库。例子中SQL的地区字段是“wuhan”，而在MYCAT中配置“wuhan”对应的数据库是DB1，用户提交的这条SQL最终会被发送给DB1数据库进行处理。</p><p>实践中，更常见的数据库分片算法是我们所熟悉的余数Hash算法，根据主键ID和服务器的数目进行取模计算，根据余数连接相对应的服务器。</p><h2>关系数据库的混合部署</h2><p>我在上面提到了关系数据库的主从复制、主主复制、数据库分片这几种改善数据读写以及存储能力的技术方案。事实上，这几种方案可以根据应用场景的需要混合部署，也就是说，可以在一个系统中混合使用以上多种技术方案。</p><p>对于数据访问和存储压力不太大，对可用性要求也不太高的系统，也许部署在单一服务器上的数据库就可以解决，所有的应用服务器都连接访问这一台数据库服务器。</p><p><img src=\"https://static001.geekbang.org/resource/image/88/3d/881e828ef3768b01e5f4cca64f14673d.png?wh=1096*1292\" alt=\"\"></p><p>如果访问量比较大，同时对数据可用性要求也比较高，那么就需要使用数据库主从复制技术，将数据库部署在多台服务器上。</p><p><img src=\"https://static001.geekbang.org/resource/image/67/90/6766189ab62fc48871858084455d9b90.png?wh=1096*1480\" alt=\"\"><br>\n随着业务复杂以及数据存储和访问压力的增加，这时候可以选择业务分库。也就是说，将不同业务相关的数据库表，部署在不同的服务器上，比如类目数据和用户数据相对关联关系不大，服务的应用也不一样，那么就可以将这两类数据库部署在不同的服务器上。而每一类数据库还可以继续选择使用主从复制，或者主主复制。</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/7b/9b09155fb8e7f744cbbdbd7896ef5e7b.png?wh=1410*1302\" alt=\"\"></p><p>不同的业务数据库，其数据库存储的数据和访问压力也是不同的，比如用户数据库的数据量和访问量就可能是类目数据库的几十倍，甚至上百倍。那么这时候就可以针对用户数据库进行数据分片，而每个分片数据库还可以继续进行主从复制或者主主复制。</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/98/c8094fc37a2d2402e3b737b44a14a398.png?wh=1586*1488\" alt=\"\"></p><h2>NoSQL数据库</h2><p>NoSQL数据是改善数据存储能力的一个重要手段。NoSQL数据库和传统的关系型数据库不同，它主要的访问方式不是使用SQL进行操作，而是使用Key、Value的方式进行数据访问，所以被称作NoSQL数据库。NoSQL数据库主要用来解决大规模分布式数据的存储问题。常用的NoSQL数据库有Apache HBase，Apache Cassandra等，Redis虽然是一个分布式缓存技术产品，但有时候也被归类为NoSQL数据库。</p><p>NoSQL数据库面临的挑战之一是数据一致性问题。如果数据分布存储在多台服务器组成的集群上，那么当有服务器节点失效的时候，或者服务器之间网络通信故障的时候，不同用户读取的数据就可能会不一致。</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/d0/9bad2794b6538d0fe456cd6736882cd0.png?wh=1892*728\" alt=\"\"></p><p>比如用户1连接服务器节点A，用户2连接服务器节点B，当两个用户同时修改某个数据的时候，如果正好服务器A和服务器B之间的网络通信失败，那么这两个节点上的数据也就不一致了，其他用户在访问这个数据的时候，可能会得到不一致的结果。</p><p>关于分布式存储系统有一个著名的CAP原理，CAP原理说：一个提供数据服务的分布式系统无法同时满足数据一致性（Consistency）、可用性（Availability）和分区耐受性（Partition Tolerance）这三个条件。</p><p>一致性是说，每次读取的数据都应该是最近写入的数据或者返回一个错误，而不是过期数据，也就是说，数据是一致的。</p><p>可用性是说，每次请求都应该得到一个响应，而不是返回一个错误或者失去响应，不过这个响应不需要保证数据是最近写入的。也就是说，系统需要一直都是可以正常使用的，不会引起调用者的异常，但是并不保证响应的数据是最新的。</p><p>分区耐受性说，即使因为网络原因，网络分区失效的时候，部分服务器节点之间消息丢失或者延迟了，系统依然应该是可以操作的。</p><p>CAP原理是说，当网络分区失效发生的时候，我们要么取消操作，保证数据就是一致的，但是系统却不可用；要么继续写入数据，但是数据的一致性就得不到保证了。</p><p>对于一个分布式系统而言，网络失效一定会发生，也就是说，分区耐受性是必须要保证的，而对于互联网应用来说，可用性也是需要保证的，分布式存储系统通常需要在一致性上做一些妥协和增强。</p><p>Apache Cassandra解决数据一致性的方案是，在用户写入数据的时候，将一个数据写入集群中的三个服务器节点，等待至少两个节点响应写入成功。用户读取数据的时候，从三个节点尝试读取数据，至少等到两个节点返回数据，并根据返回数据的时间戳，选取最新版本的数据。这样，即使服务器中的数据不一致，但是最终用户还是能得到一个一致的数据，这种方案也被称为最终一致性。</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/dc/8ad71240caaf1fcba3b22e711a4b0bdc.png?wh=1666*704\" alt=\"\"></p><h2>小结</h2><p>有人说，架构是一门关于权衡的艺术，这一点在数据存储架构上表现得最为明显。由于数据存储的挑战性和复杂性，无论你选择何种技术方案，都会带来一些新的问题和挑战。数据存储架构没有银弹，没有一劳永逸的解决方案，唯有在深刻理解自己业务场景和各种分布式存储技术特点的基础上，进行各种权衡考虑，选择最合适的解决方案，并想办法弥补其缺陷，才能真正解决问题。</p><p>我在架构模块第一篇就讨论了垂直伸缩和水平伸缩这两种不同的架构思路。因为各种原因，互联网应用主要采用的是水平伸缩，也就是各种分布式技术。事实上，在数据存储方面，有时候采用垂直伸缩，也就是使用更好的硬件服务器部署数据库，也是一种不错的改善数据存储能力的手段。</p><h2>思考题</h2><p>分布式架构的一个最大特点是可以动态伸缩，可以随着需求变化，动态增加或者减少服务器。对于支持分片的分布式关系数据库而言，比如我们使用MYCAT进行数据分片，那么随着数据量逐渐增大，如何增加服务器以存储更多的数据呢？如果增加一台服务器，如何调整数据库分片，使部分数据迁移到新的服务器上？如何保证整个迁移过程快速、安全？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","neighbors":{"left":{"article_title":"24 | 负载均衡架构：如何用10行代码实现一个负载均衡服务？","id":190089},"right":{"article_title":"26 | 搜索引擎架构：如何瞬间完成海量数据检索？","id":190702}},"comments":[{"had_liked":false,"id":178343,"user_name":"Victor","can_delete":false,"product_type":"c1","uid":1003903,"ip_address":"","ucode":"801413B2B5C7B5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/7f/c74e3543.jpg","comment_is_top":false,"comment_ctime":1581665450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83186044074","product_id":100040201,"comment_content":"思考题在所说的增加一台机器，数据如何迁移的问题，主要有三个思路：<br>1、创建远超实际节点数的分区，每个节点分配多个分区。当集群增加新节点时，该新节点从现有的节点中匀走几个分区，直到达到全局平衡。请求到来时 、由于分区总数不变，所以不会改变关键词到分区的映射关系，唯一调整的是分区与节点的对应关系。这种策略目前在ElasticSearch等系统使用<br>2、动态分区策略。当分区数据增长超过阈值（如Hbase 为10G），那么拆分为两个分区，每个承担一半的数据量，数据转移到其他节点。如Hbase借助了 HDFS 实现分区文件的传输<br>3、分区数与节点数成正比。当加入新的节点时，分区数增加。如Cassandra 采用了这样的方式","like_count":19},{"had_liked":false,"id":175190,"user_name":"uangguan","can_delete":false,"product_type":"c1","uid":1009220,"ip_address":"","ucode":"6FEDC33B452D4B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/44/f8032c04.jpg","comment_is_top":false,"comment_ctime":1580608407,"is_pvip":false,"replies":[{"id":"68150","content":"每个节点的写入和等待响应都是并行的，所以等待两个节点写入成功，并不是等待两倍的响应时间。<br><br>响应时间几乎没有增加。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1580695496,"ip_address":"","comment_id":175190,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23055444887","product_id":100040201,"comment_content":"老师，Cassandra等待至少两个节点成功写入，不就增加了应用的响应时间吗？","like_count":5,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482647,"discussion_content":"每个节点的写入和等待响应都是并行的，所以等待两个节点写入成功，并不是等待两倍的响应时间。\n\n响应时间几乎没有增加。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580695496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174833,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1580410710,"is_pvip":false,"replies":[{"id":"67944","content":"是的，也遵循CAP原理","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1580437216,"ip_address":"","comment_id":174833,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23055247190","product_id":100040201,"comment_content":"老师 sql数据库主从或者主主 也有你后面说的nosql集群数据不一致的的问题吧？","like_count":5,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482538,"discussion_content":"是的，也遵循CAP原理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580437216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173879,"user_name":"ple","can_delete":false,"product_type":"c1","uid":1120057,"ip_address":"","ucode":"E1C4519C325994","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","comment_is_top":false,"comment_ctime":1579751756,"is_pvip":false,"replies":[{"id":"67834","content":"主要区别可用RDMS的ACID和NoSQL的BASE概括","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1580269835,"ip_address":"","comment_id":173879,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23054588236","product_id":100040201,"comment_content":"老师，我一直有疑问，为什么NoSQL 比关系型数据库更能解决大规模分布式数据的存储问题？<br>作者回复: NoSQL这个词大概是2010年前后才出现的，就是为大规模数据存储而设计的，这是他的核心设计目标；而RDBMS历史要远得多，大规模数据存储根本不是RDBMS的设计目标。<br><br>NoSQL放弃了RDBMS的很多特性，在处理大规模数据的时候可以更加灵活。<br>----------------------------------------<br>可以详细聊一下，比如放弃了什么特性，事物？还有别的么？","like_count":5,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482225,"discussion_content":"主要区别可用RDMS的ACID和NoSQL的BASE概括","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580269835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541643,"discussion_content":"nosql是非关系行数据库，也就决定了它的读写更快，扩容更容易","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640499019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252060,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1602082003,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"18781951187","product_id":100040201,"comment_content":"存储这里确实水比较深，这篇专栏还只讲了关于数据库存储的部分，文件存储似乎没怎么涉及，只有在最后的 Apache Cassandra 部分讲了一点。<br><br>另外在数据库备份里面，似乎也跳过了主备数据库机制（由于浪费了服务器资源，似乎已经不怎么使用了）。<br><br>专栏中的数据库分片似乎是把分库和分表也合在一起讲了，不过这个部分本来也是需要专业的 DBA 来设计吧，架构师只能提出个框架而已。<br><br>NoSQL 的另一个说法是 Not only SQL，应该是作为传统关系型数据库的一个补充吧（用于存储文件或者对象），估计还没有哪个系统可以抛弃关系型数据的。<br><br>列式数据库似乎也没有提及。<br><br>关于思考题，分布式存储架构的动态伸缩，我只能按照前面的思路，想到一致性哈希算法，而留言里面 @Victor 大神的留言非常全面，不再重复。","like_count":4},{"had_liked":false,"id":173318,"user_name":"VenFox","can_delete":false,"product_type":"c1","uid":1002112,"ip_address":"","ucode":"11F08AD5685505","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/80/b1862ca3.jpg","comment_is_top":false,"comment_ctime":1579503366,"is_pvip":true,"replies":[{"id":"67238","content":"NoSQL这个词大概是2010年前后才出现的，就是为大规模数据存储而设计的，这是他的核心设计目标；而RDBMS历史要远得多，大规模数据存储根本不是RDBMS的设计目标。<br><br>NoSQL放弃了RDBMS的很多特性，在处理大规模数据的时候可以更加灵活。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1579569141,"ip_address":"","comment_id":173318,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14464405254","product_id":100040201,"comment_content":"老师，我一直有疑问，为什么NoSQL 比关系型数据库更能解决大规模分布式数据的存储问题？","like_count":3,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482035,"discussion_content":"NoSQL这个词大概是2010年前后才出现的，就是为大规模数据存储而设计的，这是他的核心设计目标；而RDBMS历史要远得多，大规模数据存储根本不是RDBMS的设计目标。\n\nNoSQL放弃了RDBMS的很多特性，在处理大规模数据的时候可以更加灵活。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579569141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120057,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","nickname":"ple","note":"","ucode":"E1C4519C325994","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":149436,"discussion_content":"比如放弃了什么特性？事物么？还有呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579751555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295515,"discussion_content":"比如放弃了 数据之间的关联性，这就导致 nosql 可以轻易extend到多台电脑上。nosql 的储存更像树结构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596214733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266818,"user_name":"李郝","can_delete":false,"product_type":"c1","uid":1590465,"ip_address":"","ucode":"4818313D933CE6","user_header":"https://static001.geekbang.org/account/avatar/00/18/44/c1/ebe870bb.jpg","comment_is_top":false,"comment_ctime":1607496138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10197430730","product_id":100040201,"comment_content":"在最开始就建很多db，从db0-db64这种，只不过一开始都放在一个服务器上罢了，后续直接整库迁移就可以了","like_count":2},{"had_liked":false,"id":254257,"user_name":"饕盡天下","can_delete":false,"product_type":"c1","uid":1122163,"ip_address":"","ucode":"5D2E2F96D5D6C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/73/5f5d053f.jpg","comment_is_top":false,"comment_ctime":1603092363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10193026955","product_id":100040201,"comment_content":"MYCAT 已经不适合再做分库分表的例子了","like_count":2},{"had_liked":false,"id":247011,"user_name":"Linker","can_delete":false,"product_type":"c1","uid":1652670,"ip_address":"","ucode":"018C4414F3F99A","user_header":"https://static001.geekbang.org/account/avatar/00/19/37/be/b2355457.jpg","comment_is_top":false,"comment_ctime":1599556980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189491572","product_id":100040201,"comment_content":"mycat支持多种策略的分库分表方案。<br>加了一台服务器上面部署多个数据库实例处理数据迁移问题要依据分库分表方案进行，以及数据的状态和使用情况。<br>比如<br>1、分离活跃数据（会变动的）和静态数据（不会变的）<br>2、如果使用hash分库分表这就比较坑了。rehash一般就会造成数据重新分布迁移工作量很大。所以这种情况下先瞄准好要处理哪些hash节点非常重要<br>3、如果用enum做的分库分表，一般不会涉及重新数据分布。<br>数据迁移的时候一般注意的就是<br>1、做好时间标签管理目的是找出迁移过程中变化的数据，开始执行迁移的数据时间点，执行完成需要更新的数据时间点<br>2、做好数据验证工作。因为迁移完成的数据能否按照期望做好。<br>3、执行过程中做好异常管理，比如个别数据异常要记录下来。及时分析处理。<br>4、做好预演以及积累迁移过程中的经验，比如mysql中执行大量的DDL语句耗时非常大，并且有可能卡死。需要调整buffer参数等。<br>5、做好回滚预案（这时候一般事比较大）<br>总之，任何实践方案都可能是不完备的，做之前多做预演，做之中做好记录，做之后做好验证，做炸了做好回滚。","like_count":2},{"had_liked":false,"id":245373,"user_name":"vega","can_delete":false,"product_type":"c1","uid":1748242,"ip_address":"","ucode":"5872FDA0974091","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJPNsfvnqsB8eTbKgzwIOhcKkzCTUSoAyujl8MtiazpP07zUfboOaWJaZK2jfRVH6S2ibXEc7WIibufA/132","comment_is_top":false,"comment_ctime":1598927187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5893894483","product_id":100040201,"comment_content":"用一致性hash会不会好一些,只要某一个库的数据rehash就可以了","like_count":1},{"had_liked":false,"id":180677,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1582362930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877330226","product_id":100040201,"comment_content":"关于思考题我觉得可以理解成选择合理的路由策略使得新增服务器时数据迁移最小。和之前负载均衡的答案一样，可以采用一致性哈希策略","like_count":1},{"had_liked":false,"id":357472,"user_name":"jaylg","can_delete":false,"product_type":"c1","uid":1320759,"ip_address":"北京","ucode":"893C6AE4F04696","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJl2cs8X08aK5LNianJ0CnuOsZoiaJj7zibrhlGFaKke8rhLmiadz2cHotnJH86Qib9mrdSQx2dLCXiaia7w/132","comment_is_top":false,"comment_ctime":1663294565,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663294565","product_id":100040201,"comment_content":"数据库分片是根据用户 ID 跟服务器数量取模计算，那初始创建用户，可以分片吗？","like_count":0},{"had_liked":false,"id":350173,"user_name":"java小霸王","can_delete":false,"product_type":"c1","uid":1168540,"ip_address":"","ucode":"7094BCD9F25E1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/9c/030e80d3.jpg","comment_is_top":false,"comment_ctime":1656638764,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656638764","product_id":100040201,"comment_content":"思考题有点像之前一个rehash，补充点资料，ddia和凤凰架构","like_count":0},{"had_liked":false,"id":279323,"user_name":"惘 闻","can_delete":false,"product_type":"c1","uid":1181650,"ip_address":"","ucode":"C5909F034BF072","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","comment_is_top":false,"comment_ctime":1613721206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613721206","product_id":100040201,"comment_content":"老师 可用性和分区耐受性 看完文章还是有点无法区分,这两者有什么不同吗?看起来都是出现故障还要保证可用","like_count":0},{"had_liked":false,"id":274850,"user_name":"程同学","can_delete":false,"product_type":"c1","uid":2418763,"ip_address":"","ucode":"622B71D5A2DA5E","user_header":"https://static001.geekbang.org/account/avatar/00/24/e8/4b/8ddf36b0.jpg","comment_is_top":false,"comment_ctime":1611195058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611195058","product_id":100040201,"comment_content":"太棒了，站在高处统领数据存储架构的全貌，让我一个大学软件毕业生，也能窥得架构之美，真的太棒了","like_count":0},{"had_liked":false,"id":223108,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1591003136,"is_pvip":false,"replies":[{"id":"82390","content":"参考本模块答疑","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1591163547,"ip_address":"","comment_id":223108,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591003136","product_id":100040201,"comment_content":"老师，请假一下。采用 余数 Hash 算法 进行数据库分片，不就意味着无法增加服务器数目了么？这不就意味着 余数 Hash 算法 的局限性挺大的么？","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497014,"discussion_content":"参考本模块答疑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591163547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}