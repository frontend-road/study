{"id":226710,"title":"73 | 中介模式：什么时候用中介模式？什么时候用观察者模式？","content":"<p>今天，我们来学习23种经典设计模式中的最后一个，中介模式。跟前面刚刚讲过的命令模式、解释器模式类似，中介模式也属于不怎么常用的模式，应用场景比较特殊、有限，但是，跟它俩不同的是，中介模式理解起来并不难，代码实现也非常简单，学习难度要小很多。</p><p>如果你对中介模式有所了解，你可能会知道，中介模式跟之前讲过的观察者模式有点相似，所以，今天我们还会详细讨论下这两种模式的区别。</p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>中介模式的原理和实现</h2><p>中介模式的英文翻译是Mediator Design Pattern。在GoF中的《设计模式》一书中，它是这样定义的：</p><blockquote>\n<p>Mediator pattern defines a separate (mediator) object that encapsulates the interaction between a set of objects and the objects delegate their interaction to a mediator object instead of interacting with each other directly.</p>\n</blockquote><p>翻译成中文就是：中介模式定义了一个单独的（中介）对象，来封装一组对象之间的交互。将这组对象之间的交互委派给与中介对象交互，来避免对象之间的直接交互。</p><!-- [[[read_end]]] --><p>还记得我们在<a href=\"https://time.geekbang.org/column/article/187761\">第30节课</a>中讲的“如何给代码解耦”吗？其中一个方法就是引入中间层。</p><p>实际上，中介模式的设计思想跟中间层很像，通过引入中介这个中间层，将一组对象之间的交互关系（或者说依赖关系）从多对多（网状关系）转换为一对多（星状关系）。原来一个对象要跟n个对象交互，现在只需要跟一个中介对象交互，从而最小化对象之间的交互关系，降低了代码的复杂度，提高了代码的可读性和可维护性。</p><p>这里我画了一张对象交互关系的对比图。其中，右边的交互图是利用中介模式对左边交互关系优化之后的结果，从图中我们可以很直观地看出，右边的交互关系更加清晰、简洁。</p><p><img src=\"https://static001.geekbang.org/resource/image/43/9f/4376d541bf17a029f37aa76009ef3a9f.jpg?wh=2563*1183\" alt=\"\"></p><p>提到中介模式，有一个比较经典的例子不得不说，那就是航空管制。</p><p>为了让飞机在飞行的时候互不干扰，每架飞机都需要知道其他飞机每时每刻的位置，这就需要时刻跟其他飞机通信。飞机通信形成的通信网络就会无比复杂。这个时候，我们通过引入“塔台”这样一个中介，让每架飞机只跟塔台来通信，发送自己的位置给塔台，由塔台来负责每架飞机的航线调度。这样就大大简化了通信网络。</p><p>刚刚举的是生活中的例子，我们再举一个跟编程开发相关的例子。这个例子与UI控件有关，算是中介模式比较经典的应用，很多书籍在讲到中介模式的时候，都会拿它来举例。</p><p>假设我们有一个比较复杂的对话框，对话框中有很多控件，比如按钮、文本框、下拉框等。当我们对某个控件进行操作的时候，其他控件会做出相应的反应，比如，我们在下拉框中选择“注册”，注册相关的控件就会显示在对话框中。如果我们在下拉框中选择“登陆”，登陆相关的控件就会显示在对话框中。</p><p>按照通常我们习惯的UI界面的开发方式，我们将刚刚的需求用代码实现出来，就是下面这个样子。在这种实现方式中，控件和控件之间互相操作、互相依赖。</p><pre><code>public class UIControl {\n  private static final String LOGIN_BTN_ID = &quot;login_btn&quot;;\n  private static final String REG_BTN_ID = &quot;reg_btn&quot;;\n  private static final String USERNAME_INPUT_ID = &quot;username_input&quot;;\n  private static final String PASSWORD_INPUT_ID = &quot;pswd_input&quot;;\n  private static final String REPEATED_PASSWORD_INPUT_ID = &quot;repeated_pswd_input&quot;;\n  private static final String HINT_TEXT_ID = &quot;hint_text&quot;;\n  private static final String SELECTION_ID = &quot;selection&quot;;\n\n  public static void main(String[] args) {\n    Button loginButton = (Button)findViewById(LOGIN_BTN_ID);\n    Button regButton = (Button)findViewById(REG_BTN_ID);\n    Input usernameInput = (Input)findViewById(USERNAME_INPUT_ID);\n    Input passwordInput = (Input)findViewById(PASSWORD_INPUT_ID);\n    Input repeatedPswdInput = (Input)findViewById(REPEATED_PASSWORD_INPUT_ID);\n    Text hintText = (Text)findViewById(HINT_TEXT_ID);\n    Selection selection = (Selection)findViewById(SELECTION_ID);\n\n    loginButton.setOnClickListener(new OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        String username = usernameInput.text();\n        String password = passwordInput.text();\n        //校验数据...\n        //做业务处理...\n      }\n    });\n\n    regButton.setOnClickListener(new OnClickListener() {\n      @Override\n      public void onClick(View v) {\n      //获取usernameInput、passwordInput、repeatedPswdInput数据...\n      //校验数据...\n      //做业务处理...\n      }\n    });\n\n    //...省略selection下拉选择框相关代码....\n  }\n}\n</code></pre><p>我们再按照中介模式，将上面的代码重新实现一下。在新的代码实现中，各个控件只跟中介对象交互，中介对象负责所有业务逻辑的处理。</p><pre><code>public interface Mediator {\n  void handleEvent(Component component, String event);\n}\n\npublic class LandingPageDialog implements Mediator {\n  private Button loginButton;\n  private Button regButton;\n  private Selection selection;\n  private Input usernameInput;\n  private Input passwordInput;\n  private Input repeatedPswdInput;\n  private Text hintText;\n\n  @Override\n  public void handleEvent(Component component, String event) {\n    if (component.equals(loginButton)) {\n      String username = usernameInput.text();\n      String password = passwordInput.text();\n      //校验数据...\n      //做业务处理...\n    } else if (component.equals(regButton)) {\n      //获取usernameInput、passwordInput、repeatedPswdInput数据...\n      //校验数据...\n      //做业务处理...\n    } else if (component.equals(selection)) {\n      String selectedItem = selection.select();\n      if (selectedItem.equals(&quot;login&quot;)) {\n        usernameInput.show();\n        passwordInput.show();\n        repeatedPswdInput.hide();\n        hintText.hide();\n        //...省略其他代码\n      } else if (selectedItem.equals(&quot;register&quot;)) {\n        //....\n      }\n    }\n  }\n}\n\npublic class UIControl {\n  private static final String LOGIN_BTN_ID = &quot;login_btn&quot;;\n  private static final String REG_BTN_ID = &quot;reg_btn&quot;;\n  private static final String USERNAME_INPUT_ID = &quot;username_input&quot;;\n  private static final String PASSWORD_INPUT_ID = &quot;pswd_input&quot;;\n  private static final String REPEATED_PASSWORD_INPUT_ID = &quot;repeated_pswd_input&quot;;\n  private static final String HINT_TEXT_ID = &quot;hint_text&quot;;\n  private static final String SELECTION_ID = &quot;selection&quot;;\n\n  public static void main(String[] args) {\n    Button loginButton = (Button)findViewById(LOGIN_BTN_ID);\n    Button regButton = (Button)findViewById(REG_BTN_ID);\n    Input usernameInput = (Input)findViewById(USERNAME_INPUT_ID);\n    Input passwordInput = (Input)findViewById(PASSWORD_INPUT_ID);\n    Input repeatedPswdInput = (Input)findViewById(REPEATED_PASSWORD_INPUT_ID);\n    Text hintText = (Text)findViewById(HINT_TEXT_ID);\n    Selection selection = (Selection)findViewById(SELECTION_ID);\n\n    Mediator dialog = new LandingPageDialog();\n    dialog.setLoginButton(loginButton);\n    dialog.setRegButton(regButton);\n    dialog.setUsernameInput(usernameInput);\n    dialog.setPasswordInput(passwordInput);\n    dialog.setRepeatedPswdInput(repeatedPswdInput);\n    dialog.setHintText(hintText);\n    dialog.setSelection(selection);\n\n    loginButton.setOnClickListener(new OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        dialog.handleEvent(loginButton, &quot;click&quot;);\n      }\n    });\n\n    regButton.setOnClickListener(new OnClickListener() {\n      @Override\n      public void onClick(View v) {\n        dialog.handleEvent(regButton, &quot;click&quot;);\n      }\n    });\n\n    //....\n  }\n}\n</code></pre><p>从代码中我们可以看出，原本业务逻辑会分散在各个控件中，现在都集中到了中介类中。实际上，这样做既有好处，也有坏处。好处是简化了控件之间的交互，坏处是中介类有可能会变成大而复杂的“上帝类”（God Class）。所以，在使用中介模式的时候，我们要根据实际的情况，平衡对象之间交互的复杂度和中介类本身的复杂度。</p><h2>中介模式 VS 观察者模式</h2><p>前面讲观察者模式的时候，我们讲到，观察者模式有多种实现方式。虽然经典的实现方式没法彻底解耦观察者和被观察者，观察者需要注册到被观察者中，被观察者状态更新需要调用观察者的update()方法。但是，在跨进程的实现方式中，我们可以利用消息队列实现彻底解耦，观察者和被观察者都只需要跟消息队列交互，观察者完全不知道被观察者的存在，被观察者也完全不知道观察者的存在。</p><p>我们前面提到，中介模式也是为了解耦对象之间的交互，所有的参与者都只与中介进行交互。而观察者模式中的消息队列，就有点类似中介模式中的“中介”，观察者模式的中观察者和被观察者，就有点类似中介模式中的“参与者”。那问题来了：中介模式和观察者模式的区别在哪里呢？什么时候选择使用中介模式？什么时候选择使用观察者模式呢？</p><p>在观察者模式中，尽管一个参与者既可以是观察者，同时也可以是被观察者，但是，大部分情况下，交互关系往往都是单向的，一个参与者要么是观察者，要么是被观察者，不会兼具两种身份。也就是说，在观察者模式的应用场景中，参与者之间的交互关系比较有条理。</p><p>而中介模式正好相反。只有当参与者之间的交互关系错综复杂，维护成本很高的时候，我们才考虑使用中介模式。毕竟，中介模式的应用会带来一定的副作用，前面也讲到，它有可能会产生大而复杂的上帝类。除此之外，如果一个参与者状态的改变，其他参与者执行的操作有一定先后顺序的要求，这个时候，中介模式就可以利用中介类，通过先后调用不同参与者的方法，来实现顺序的控制，而观察者模式是无法实现这样的顺序要求的。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。</p><p>中介模式的设计思想跟中间层很像，通过引入中介这个中间层，将一组对象之间的交互关系（或者依赖关系）从多对多（网状关系）转换为一对多（星状关系）。原来一个对象要跟n个对象交互，现在只需要跟一个中介对象交互，从而最小化对象之间的交互关系，降低了代码的复杂度，提高了代码的可读性和可维护性。</p><p>观察者模式和中介模式都是为了实现参与者之间的解耦，简化交互关系。两者的不同在于应用场景上。在观察者模式的应用场景中，参与者之间的交互比较有条理，一般都是单向的，一个参与者只有一个身份，要么是观察者，要么是被观察者。而在中介模式的应用场景中，参与者之间的交互关系错综复杂，既可以是消息的发送者、也可以同时是消息的接收者。</p><h2>课堂讨论</h2><p>在讲观察者模式的时候，我们有讲到EventBus框架。当时我们认为它是观察者模式的实现框架。EventBus作为一个事件处理的中心，事件的派送、订阅都通过这个中心来完成，那是不是更像中介模式的实现框架呢？</p><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":208358,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1587344854,"is_pvip":false,"discussion_count":2,"race_medal":1,"score":"559933093334","product_id":100039001,"comment_content":"eventbus更属于观察者模式，首先eventbus中不处理业务逻辑，只提供了对象与对象之间交互的管道；而中介模式为了解决多个对象之间交互的问题，将多个对象的行为封装到一起（中介），然后任意对象和这个中介交互，中介中包含了具体业务逻辑。其次从其实现的思路上，EventBus 和观察者都需要定义 Observer，并且通过 register() 函数注册 Observer，也都需要通过调用某个函数（比如，EventBus 中的 post() 函数）来给 Observer 发送消息。而且eventbus并没有中介模式大而臃肿的上帝类问题。","like_count":131,"discussions":[{"author":{"id":1134288,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","nickname":"Ken张云忠","note":"","ucode":"D0BAC9FC17DE2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":241252,"discussion_content":"标准答案了 兄弟赞赞赞👍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587397150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311125,"avatar":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","nickname":"布拉姆","note":"","ucode":"479FF27D73BCAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400099,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633164743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208463,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1587364484,"is_pvip":false,"replies":[{"id":"78930","content":"👍","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1588130321,"ip_address":"","comment_id":208463,"utype":1}],"discussion_count":7,"race_medal":0,"score":"315119977092","product_id":100039001,"comment_content":"我按照老师的demo写了一遍中介模式的dialog实现, 发现不就是Dialog impl OnClickListener嘛...<br><br>关于Observer与Mediator的区别<br><br>Observer定义了一对多(one-to-many)的依赖关系, Mediator封装了多个对象互相之间的交互方式. Oberver定义了单向的订阅关系, Mediator通过引入中间件的方式解决多个对象之间混乱的依赖关系与通信方式.<br><br><br><br>一个可爱的小栗子:<br><br>Observer不能做什么:<br><br>1. 观察者: hey订阅号, 你到底什么时候更新?<br>2. 观察者: 订阅号你到底什么时候更新? 我怎么没收到更新?<br>3. 观察者: 我知道订阅号更新了!(假话)<br><br><br><br>Observer能做什么:<br><br>       1. 观察者乖乖坐等更新;<br>       2. 一段时间后...<br>       3. 订阅号: hey我更新了, 小崽子们!<br><br><br><br>Mediator不能做什么:<br><br>1. 乘客1: hey taxi1, 带我去xx(不会得到任何回应)<br>2. 乘客2: hey taxi2, 带我去xx(不会得到任何回应)<br>3. 乘客1: hey taxi2, 带我去xx(不会得到任何回应)<br><br><br><br>Mediator能做什么:<br><br>1. 乘客1: dd车辆调度中心, 我要去xx, 请派车接我!(司机正在赶来)<br>2. 乘客2: dd车辆调度中心, 我要去xx, 请派优享来接我!(优享司机马上就到!)<br><br><br><br>课堂讨论: <br><br>​    EventBus基于观察者模式实现, 并不符合中介模式的定义. 中介模式封装一组对象间交互, 将这组对象间的交互委派给中介对象交互. EventBus仅负责发布消息, 并不处理发布者&#47;订阅者的任何交互. <br><br>","like_count":74,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492466,"discussion_content":"👍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588130321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070878,"avatar":"https://static001.geekbang.org/account/avatar/00/10/57/1e/8ed4a7cf.jpg","nickname":"Paradise","note":"","ucode":"D92EACCBF6B3B5","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563218,"discussion_content":"妙啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649950986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2475056,"avatar":"https://static001.geekbang.org/account/avatar/00/25/c4/30/711b03e5.jpg","nickname":"Geek_Candice","note":"","ucode":"0F2CBCF624F905","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403309,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634047739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1196523,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/eb/6494dc04.jpg","nickname":"lzxDchaser","note":"","ucode":"7173DC3F9CA1BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387110,"discussion_content":"脑子多少有点黄金，这例子太对了哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627990711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380998,"discussion_content":"栗子挺好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624861799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370638,"discussion_content":"我得个乖乖, 赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619489386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1734795,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/78/8b/421cb2c4.jpg","nickname":"成活","note":"","ucode":"F8840EE4DC3969","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266543,"discussion_content":"哈哈哈可可爱爱","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589529647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208308,"user_name":"大头","can_delete":false,"product_type":"c1","uid":1315367,"ip_address":"","ucode":"C1FB2C8A0FB0C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/27/32746bbf.jpg","comment_is_top":false,"comment_ctime":1587337478,"is_pvip":true,"discussion_count":6,"race_medal":0,"score":"212040734982","product_id":100039001,"comment_content":"想到了现在流行的微服务，注册中心可以理解为广义的中介模式，防止各个服务间错综复杂的调用","like_count":49,"discussions":[{"author":{"id":1109528,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/18/65e89d9c.jpg","nickname":"王大喵","note":"","ucode":"C14AAE3ED964DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324252,"discussion_content":"业务网关  更像中介模式，注册中心不是的，职责比较单一。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1605079551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302614,"discussion_content":"注册中心只是负责服务的发现与注册，并没有改变服务之间错综复杂的调用关系","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1598970857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690242,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","nickname":"番茄炒西红柿","note":"","ucode":"13F47BABAB2110","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":260355,"discussion_content":"这样说其实有问题消息总线才是中介模式，微服务中注册中心只是负责各服务信息的存取和拉取，真正的调用还是服务自己搞不算中介","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1588861348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118488,"avatar":"https://static001.geekbang.org/account/avatar/00/11/11/18/8cee35f9.jpg","nickname":"HuaMax","note":"","ucode":"2E78DE1AF098AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251172,"discussion_content":"我的理解，注册中心并没有起到中介模式里中介的作用，而是服务的配置管理者的角色，微服务之间还是直接调用的，并没有通过注册中心中转","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1588071318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046662,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/86/ff190109.jpg","nickname":"jiangwq。","note":"","ucode":"B6D7021D476F74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251023,"discussion_content":"SOA架构更像中介者模式","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1588058596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2559186,"avatar":"https://static001.geekbang.org/account/avatar/00/27/0c/d2/11718c13.jpg","nickname":"cutieWolf","note":"","ucode":"677FD30CE4882E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379848,"discussion_content":"不像……很多注册中心只负责存储什么服务在哪，不管调用，都是自己去调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624188315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208284,"user_name":"iLeGeND","can_delete":false,"product_type":"c1","uid":1055475,"ip_address":"","ucode":"4055A628A6E97C","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/f3/41d5ba7d.jpg","comment_is_top":false,"comment_ctime":1587314472,"is_pvip":false,"replies":[{"id":"78777","content":"是的 你感觉没错","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1588045480,"ip_address":"","comment_id":208284,"utype":1}],"discussion_count":5,"race_medal":0,"score":"91781627688","product_id":100039001,"comment_content":"感觉23中设计模式之间本身就有某种耦合 好多不易区分","like_count":21,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492401,"discussion_content":"是的 你感觉没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588045480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1681814,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a9/96/6d517a06.jpg","nickname":"自来也","note":"","ucode":"94CF8E5FF6DEC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240098,"discussion_content":"感觉没必要分这么仔细，只要能让自己的代码耦合性低。写的流畅，就够了，招式的名字可以忘记，招式的路数一定要清楚。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1587339718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302615,"discussion_content":"这些设计模式都起源于“开闭原则”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598970917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1514305,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","nickname":"xk_","note":"","ucode":"DFE1AC38EA78A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257792,"discussion_content":"对啊，耦合的部分就是那些设计原则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588604204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240447,"discussion_content":"是呀，这 23 中设计模式，可以给我们打开思路，喔，原来可以这样组织代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587364982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208420,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1587354179,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27357157955","product_id":100039001,"comment_content":"设计模式_73:<br># 作业:<br>个人认为还是观察者模式，当然，引入消息队列的观察者模式可以理解为中介模式的一种，它的业务调用更有规律，它不要求被调用者的顺序。<br><br># 感想:<br>中介模式看下来，感觉是要带领我们回到面向过程的老路，就文中所述的“上帝类”，有了这个中介，依然在维护复杂的调用关系。","like_count":6,"discussions":[{"author":{"id":1275356,"avatar":"https://static001.geekbang.org/account/avatar/00/13/75/dc/6cbc27d7.jpg","nickname":"gyank💋","note":"","ucode":"5449C617AB7876","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323307,"discussion_content":"不太一样，面对前端页面各种触发的时候，中介模式很好用。   否则某个值改变的时候，很可能根本找不到来源","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604913852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248201,"user_name":"写代码的","can_delete":false,"product_type":"c1","uid":2085090,"ip_address":"","ucode":"F58186409A3D65","user_header":"https://static001.geekbang.org/account/avatar/00/1f/d0/e2/1d00c079.jpg","comment_is_top":false,"comment_ctime":1600063239,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18779932423","product_id":100039001,"comment_content":"中介模式注重于协调，而不是通讯。既然要协调，那么中介模式就得依赖于各个参与者，知道他们的功能。而观察者不需要知道被观察者的功能，只负责把消息送到就行。","like_count":5,"discussions":[{"author":{"id":2076251,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/ae/5b/4bd42286.jpg","nickname":"宋计洋","note":"","ucode":"9A34E8F71C6CBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562479,"discussion_content":"你说的很有道理，EventBus和中介者功能都是传话，EventBus不用管发/收消息对象的功能，简单传话就行，而中介者就得知道参与者的能力\n就好比领导，有的领导懂得自己的手下的能力，能把上头的任务妥善安排给下级再汇报成果，就是中介者；而有的领导，就是一个传话的，把上头的任务转给下级，再把下级的结果转给上级，就是EventBus。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649834553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213978,"user_name":"xk_","can_delete":false,"product_type":"c1","uid":1514305,"ip_address":"","ucode":"DFE1AC38EA78A7","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","comment_is_top":false,"comment_ctime":1588604949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14473506837","product_id":100039001,"comment_content":"EventBus不处理业务逻辑，只是单向传递消息，所以是观察者模式。<br>中介模式，可以处理业务逻辑，而且双向传递信息的。","like_count":3},{"had_liked":false,"id":208450,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1587361661,"is_pvip":false,"replies":[{"id":"78932","content":"不是做前端的吧😂 聊天室的看懂就好了 不过聊天室的那个就存粹是拼凑出来的例子 真实场景里 不可能那么实现","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1588130417,"ip_address":"","comment_id":208450,"utype":1}],"discussion_count":3,"race_medal":1,"score":"14472263549","product_id":100039001,"comment_content":"老师的这个例子，我还是没看明白哪里体现了“多个对象之间交互” --&gt; &quot;多个对象之间通过中介交互&quot;  的变化。比如之前是regButton，loginButton，Selection三者之间是怎么交互的，我没看出来。然后又是如何把这三个对象的相互调用，改成了通过中介类交互的，我也没看明白。我去查阅了其他资料，发现什么虚拟聊天室什么的代码就体现了上面这一点：用户A发消息给用户B是直接交互，改造之后是，用户A发消息给中介，中介再把消息转给消息B。有小伙伴们理解了么，能否分享下。","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492460,"discussion_content":"不是做前端的吧😂 聊天室的看懂就好了 不过聊天室的那个就存粹是拼凑出来的例子 真实场景里 不可能那么实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588130417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305096,"discussion_content":"A直接发送给B，B不在线咋办，发送给中介，等B上线再推送；中介处理中间的复杂性","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599785203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052859,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","nickname":"Demon.Lee","note":"","ucode":"7F0E5493A8E345","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252012,"discussion_content":"做后端的😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588133468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208350,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1587343742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14472245630","product_id":100039001,"comment_content":"eventbus解决的是消息的发布订阅等，跟具体的业务没关系，所以是观察者模式","like_count":4},{"had_liked":false,"id":225421,"user_name":"为梦想而生！","can_delete":false,"product_type":"c1","uid":1397129,"ip_address":"","ucode":"12F55CA418A164","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/89/4385d64b.jpg","comment_is_top":false,"comment_ctime":1591753854,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"10181688446","product_id":100039001,"comment_content":"中介模式:调用和被调用之间无法确认彼此，只能到中介询问，比如黑心中间商，如果明确的知道彼此的存在，不会找中间商，中间商有特定的业务能力，才会有价值<br>观察者模式？就是这种确彼此关系，依赖特定的事件出发或者通知，比如公司通知发工资了，大家才会去看看工资到账了没。观察者模式，不关心具体的业务知识，我只是发了一个通知给大家，或者发了一个特定类型的通知给大家，具体内容，不太关心","like_count":2},{"had_liked":false,"id":208380,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1587347772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10177282364","product_id":100039001,"comment_content":"eventbus 是不带业务处理的，而且bus不会随着业务复杂而改变，所以属于观察者模式","like_count":2},{"had_liked":false,"id":208329,"user_name":"eason2017","can_delete":false,"product_type":"c1","uid":1009422,"ip_address":"","ucode":"E070BA624FA490","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","comment_is_top":false,"comment_ctime":1587340538,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10177275130","product_id":100039001,"comment_content":"从定义上看，中介模式是解决一组对象之间的交互，而Evenybus并不是解决这块的，解决的是所有观察者和被观察者之间的交互方式。所以，确切的说，它并不算中介模式。不知回答是否正确，请指点，谢谢","like_count":2,"discussions":[{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240689,"discussion_content":"感觉你说的在理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587382849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208319,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1587339799,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10177274391","product_id":100039001,"comment_content":"打卡<br>在实际的开发中 UI 控件变化那种感觉不太适合中介模式<br>因为要把所有的控件view 都传到中介类中才可以获取到输入的内容 感觉比较奇怪，就像只是把某个方法单独提取到一个类中一样","like_count":3,"discussions":[{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240445,"discussion_content":"中介模式可以说是Activity或Dialog实现OnClickListener, 而不是每个view分别实现OnClickListener","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587364855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132203,"avatar":"https://static001.geekbang.org/account/avatar/00/11/46/ab/bae17033.jpg","nickname":"、BQ","note":"","ucode":"7CAFE074F7C536","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591658,"discussion_content":"我理解是 比如输入控件与注册控件有交互、输入控件与登录控件有交互、首次密码输入与再次输入密码有交互 等等这些，中介模式是让控件之间不直接有交互，而是通过一个中间控制台来交互","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666752133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277713,"user_name":"鲁鸣","can_delete":false,"product_type":"c1","uid":2152306,"ip_address":"","ucode":"974BA3C3E64630","user_header":"https://static001.geekbang.org/account/avatar/00/20/d7/72/cbef720d.jpg","comment_is_top":false,"comment_ctime":1612523187,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5907490483","product_id":100039001,"comment_content":"中介模式和门面模式感觉有点像呢，难道是差在，一个单向一个多向？","like_count":1},{"had_liked":false,"id":213497,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1588433794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883401090","product_id":100039001,"comment_content":"saga编排器应该是一种中介者模式的体现。","like_count":1},{"had_liked":false,"id":353876,"user_name":"High-five!!!","can_delete":false,"product_type":"c1","uid":1185673,"ip_address":"四川","ucode":"F0A67636A99C24","user_header":"https://static001.geekbang.org/account/avatar/00/12/17/89/b43884ea.jpg","comment_is_top":false,"comment_ctime":1659881028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659881028","product_id":100039001,"comment_content":"把反例里用匿名内部类创建Listener对象该成普通的继承&#47;实现方式，应该更能体现不用中介者模式的混乱感。。。","like_count":0},{"had_liked":false,"id":329191,"user_name":"阿曼","can_delete":false,"product_type":"c1","uid":1236791,"ip_address":"","ucode":"ABF93767C58F21","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/37/4e3bfd99.jpg","comment_is_top":false,"comment_ctime":1641200681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641200681","product_id":100039001,"comment_content":"星型网络是中介者模式","like_count":0},{"had_liked":false,"id":324837,"user_name":"MrVito","can_delete":false,"product_type":"c1","uid":1252169,"ip_address":"","ucode":"716FF6F8871706","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/49/ddefc656.jpg","comment_is_top":false,"comment_ctime":1638676360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638676360","product_id":100039001,"comment_content":"eventBus没有业务逻辑，中介模式是存在业务逻辑处理的，所以eventbus属于观察者而不是中介。","like_count":0},{"had_liked":false,"id":318455,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1635301947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635301947","product_id":100039001,"comment_content":"EventBus的将被观察者的行为，传递到观察者，而反过来如果在被观察者中也引入@Subscribe注解，其实是可以双向传递的。所以只要交互复杂，双向传递，那就是中介模式，否则可以理解为观察者模式，至于是不是叫EventBus并不重要，重要的是场景。","like_count":0},{"had_liked":false,"id":302841,"user_name":"璀璨星空","can_delete":false,"product_type":"c1","uid":1476490,"ip_address":"","ucode":"CE6324C4261A52","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","comment_is_top":false,"comment_ctime":1626404640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626404640","product_id":100039001,"comment_content":"直接让我想到了网关和nginx","like_count":0,"discussions":[{"author":{"id":1358609,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","nickname":"炫炫","note":"","ucode":"FDC7A0C6E08B02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267850,"discussion_content":"不与陌生人说话","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1589700650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1178715,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fc/5b/4b92d745.jpg","nickname":"命中水","note":"","ucode":"2D4431A9CC67EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320882,"discussion_content":"高手说话就是简单明了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604497456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311125,"avatar":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","nickname":"布拉姆","note":"","ucode":"479FF27D73BCAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383029,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625835338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2153325,"avatar":"","nickname":"Geek_9dc8d3","note":"","ucode":"4C8D3E307CE866","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303546,"discussion_content":"学到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599294566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209208,"discussion_content":"透彻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584619593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279256,"user_name":"风","can_delete":false,"product_type":"c1","uid":1077538,"ip_address":"","ucode":"104638BF19B048","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/22/b8c596b6.jpg","comment_is_top":false,"comment_ctime":1613697441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613697441","product_id":100039001,"comment_content":"eventbus算是中介的一种，它的存在是用来协调被观察者和观察者之间的交互，解耦观察者与被观察者，所以我觉得观察者模式应该算是一种特殊的中介者模式。<br>设计模式中的角色都是抽象出来的，所以确认其角色应该站在抽象的角度去看，具体的职责可能存在差异，但是其所处的位置决定了它的本质。","like_count":0},{"had_liked":false,"id":273947,"user_name":"Song╮承諾","can_delete":false,"product_type":"c1","uid":1590793,"ip_address":"","ucode":"50FDBFE5BDDD12","user_header":"https://static001.geekbang.org/account/avatar/00/18/46/09/c61257f6.jpg","comment_is_top":false,"comment_ctime":1610761821,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1610761821","product_id":100039001,"comment_content":"后面的模式就是前面的模式组合啊，结构型依赖创建型，行为型又依赖结构型，所有模式的根是设计原则，原则又依据面向对象设计思想，感觉后面的模式不用太在意，只有把握设计思想和设计原则，代码就错不了","like_count":0},{"had_liked":false,"id":272516,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1610106540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610106540","product_id":100039001,"comment_content":"中介模式的中介者需要知晓对应事件是干什么，然后根据功能进行处理，而EventBus无须知道具体事件是干什么的。所以两者是有区别的","like_count":0},{"had_liked":false,"id":260655,"user_name":"王大喵","can_delete":false,"product_type":"c1","uid":1109528,"ip_address":"","ucode":"C14AAE3ED964DE","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/18/65e89d9c.jpg","comment_is_top":false,"comment_ctime":1605079342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605079342","product_id":100039001,"comment_content":"看到这个 突然想起来之前说的业务网关，也是将错综复杂的网状多对多关系，解决为一对多的关系。共鸣。","like_count":0},{"had_liked":false,"id":260046,"user_name":"gyank💋","can_delete":false,"product_type":"c1","uid":1275356,"ip_address":"","ucode":"5449C617AB7876","user_header":"https://static001.geekbang.org/account/avatar/00/13/75/dc/6cbc27d7.jpg","comment_is_top":false,"comment_ctime":1604914007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604914007","product_id":100039001,"comment_content":"我认为中介模式能解决前端开发时的痛点，各种监听缠绕在一起，甚至循环调用。我偶尔排查前端问题的时候，某个值的改变很难找到到底是哪里触发的，要全局搜索相关信息，非常麻烦","like_count":0},{"had_liked":false,"id":251957,"user_name":"gevin","can_delete":false,"product_type":"c1","uid":1005862,"ip_address":"","ucode":"B5AD68F1884A1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/26/1015d573.jpg","comment_is_top":false,"comment_ctime":1602000115,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1602000115","product_id":100039001,"comment_content":"想到了SOA的企业服务总线，这就是个上帝类了，所以SOA才会衰落，微服务才会兴起","like_count":0,"discussions":[{"author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340848,"discussion_content":"esb只是soa架构下的一种通讯模式，soa还可以采用rest通讯。实际上，微服务是soa的另一种形态，soa没有死，而是重生。\n\nESB is software architecture model used for implementing communication between software applications in a service-oriented architecture (SOA).\n\nSOA is an architectural pattern in which application components provide services to other components/clients via communication protocol (SOAP, REST).\n\nSOA architecture is independent of any vendor, product or technology.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610180357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219326,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1589989094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589989094","product_id":100039001,"comment_content":"观察者模式为了解耦对象状态变更单向地通知其他对象<br>中介模式为了解耦多个对象之间的双向交互<br><br>EventBus 根据对象类型通知相应的对象，被通知的对象之间并不存在相互通知的关系，所以更偏向于观察者模式<br><br>如果“观察者”被设计成“被观察者”则容易引起回路通知，即死循环，如 A-&gt;B-&gt;A-&gt;B-&gt;A.... 个人认为应该避免或禁止这种实现","like_count":0},{"had_liked":false,"id":216577,"user_name":"落尘kira","can_delete":false,"product_type":"c1","uid":1092169,"ip_address":"","ucode":"D203B519E43F85","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","comment_is_top":false,"comment_ctime":1589288567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589288567","product_id":100039001,"comment_content":"eventbus更偏向于事件的分发（通知），中介模式则采用了集中式管理的方式，让中介自身过于庞大","like_count":0},{"had_liked":false,"id":216292,"user_name":"Ifdevil","can_delete":false,"product_type":"c1","uid":1212912,"ip_address":"","ucode":"79DB0ADE9AD082","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/f0/695ca05f.jpg","comment_is_top":false,"comment_ctime":1589217623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589217623","product_id":100039001,"comment_content":"是不是可以这么理解，eventBus只是个中转站，但是中介模式更像指挥站","like_count":0},{"had_liked":false,"id":215919,"user_name":"pippin","can_delete":false,"product_type":"c1","uid":1784022,"ip_address":"","ucode":"F7619FCE24D481","user_header":"","comment_is_top":false,"comment_ctime":1589152692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589152692","product_id":100039001,"comment_content":"感觉对象转换的时候可以用中介模式，像dto想转换成vo的时候，虽然字段会有相同，可以用一些拷贝方法，但有时候实体类的转换都是相互的，放在各自的文件就会依赖其他对象。","like_count":0},{"had_liked":false,"id":209308,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1587532776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587532776","product_id":100039001,"comment_content":"1.事件总线属于观察者模式。因为订阅的操作虽然是在中心执行，但却是由观察者发起的，且后续消息分派都遵循当前的订阅规则。也就是说观察者模式的中心，只干活，不决定干活的方式，分派规则与运行时的数据流无关。而中介模式不一样，中介模式消息派送是由每个参与者的每次调用时决定的，中心需要维护一套协调所有参与者相互通信的规则，并根据数据流协调多个参与者间的交互。也就是说，中介者模式的中心，要干活，还得决定怎么干，决定的逻辑看中心本身实现的策略，决定的依据看参与者推送的数据流上的标记或则说元数据信息。<br><br>2.中介模式放到应用架构的典型案例：soa中的企业服务总线esb（解决异构系统交互问题）","like_count":0},{"had_liked":false,"id":208851,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1587451254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587451254","product_id":100039001,"comment_content":"从代码实现上看，eventBus确实有点像中介模式，但是从应用场景看，其实EventBus还是一个标准的观察者模式实现框架","like_count":0},{"had_liked":false,"id":208500,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1587372044,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587372044","product_id":100039001,"comment_content":"设计模式有点像是咬文嚼字的感觉，其实很多可以通用，编码是一样，非得叫的杂乱，随着技术越来越多这种反而庞杂，以后可以有人把这些凝练成通用就更好了，去除各大门派的花哨部分，取其精华，然后截取精华--截拳道，这样对于后者更加便宜","like_count":0,"discussions":[{"author":{"id":1625233,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","nickname":"CoderArthur","note":"","ucode":"5B591914F0F67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348984,"discussion_content":"1.单一职责原则\n适用对象: 模块，类，接口\n白话：职责太多，容易被依赖（高耦合），以后维护，容易牵一发而动全身。（易维护性）\n\n2.接口隔离原则\n适用对象:接口，函数\n白话：有些是不需要让你知道的，避免调用者需要了解的太多（最小知识原则）。有些是不能让你知道的，属于权限问题，需要隔离开来。\n\n3.基于接口而非实现编程\n适用对象: 接口，抽象类\n白话：易维护和可扩展性问题。业务不稳定，于是依赖相对稳定的接口。\n\n4.迪米特法则\n适用对象:模块，类\n白话：这个只是原则，不是说从谁的角度考虑吧。只要符合这个原则，就能做到高内聚、低耦合。","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1612834235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282665,"discussion_content":"简单、明了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592041055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587173,"discussion_content":"稳","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662867087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2829494,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/2c/b6/61b1d6be.jpg","nickname":"阿卡","note":"","ucode":"04F3C90DF51A5D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585260,"discussion_content":"mark\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661424443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2843250,"avatar":"","nickname":"张华","note":"","ucode":"0C92864C8BB705","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535686,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638517070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066102,"avatar":"https://static001.geekbang.org/account/avatar/00/10/44/76/a86cfd2a.jpg","nickname":"Akira","note":"","ucode":"A0BFD54A95012D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530612,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637112387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2611236,"avatar":"https://static001.geekbang.org/account/avatar/00/27/d8/24/5238947d.jpg","nickname":"烟酒店老板","note":"","ucode":"A632F085299CDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384373,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626530211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1163504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c0/f0/1aabc056.jpg","nickname":"Jiantao","note":"","ucode":"444580EC5EF109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370927,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619581198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1723580,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/4c/bc/d9ef313e.jpg","nickname":"。","note":"","ucode":"BFEF2648FE8A85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347278,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612186105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043293,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/eb/5d/2467ad6c.jpg","nickname":"木心","note":"","ucode":"538A3B9B214BF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335835,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608347805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005574,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/58/06/6a9c089b.jpg","nickname":"Lee大树","note":"","ucode":"3C2012F6D21698","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328810,"discussion_content":"精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606230555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208437,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1587358288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587358288","product_id":100039001,"comment_content":"eventbus没有处理相应的业务逻辑，是一种观察者模型。","like_count":0},{"had_liked":false,"id":208395,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1587349815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587349815","product_id":100039001,"comment_content":"个人认为是很像的,EventBus其本质上就是为了在交互双方的基础上进行了抽取,形成了这个框架,可以被称为是中介,但是也只是像,因为观察者模式的这种实现本身就和中介模式类似,但是也只限于这种实现罢了,因为比起中介模式那种更加具体的中介类,EventBus将交互双方解耦的更加详细","like_count":0},{"had_liked":false,"id":208379,"user_name":"Jimbol","can_delete":false,"product_type":"c1","uid":1178008,"ip_address":"","ucode":"8D9190B3B3E08B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/98/95b13446.jpg","comment_is_top":false,"comment_ctime":1587347571,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587347571","product_id":100039001,"comment_content":"相同点是中介模式和观察者模式都是为了实现模块解耦，不同点是eventbus只是单纯的消息通知，而中介类中需要定义处理逻辑，中介相对于观察者把业务逻辑处理提前了<br>个人理解，请争哥指点","like_count":0}]}