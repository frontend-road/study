{"id":94064,"title":"18 | 进程的创建：如何发起一个新项目？","content":"<p>前面我们学习了如何使用fork创建进程，也学习了进程管理和调度的相关数据结构。这一节，我们就来看一看，创建进程这个动作在内核里都做了什么事情。</p><p>fork是一个系统调用，根据咱们讲过的系统调用的流程，流程的最后会在sys_call_table中找到相应的系统调用sys_fork。</p><p>sys_fork是如何定义的呢？根据SYSCALL_DEFINE0这个宏的定义，下面这段代码就定义了sys_fork。</p><pre><code>SYSCALL_DEFINE0(fork)\n{\n......\n\treturn _do_fork(SIGCHLD, 0, 0, NULL, NULL, 0);\n}\n</code></pre><p>sys_fork会调用_do_fork。</p><pre><code>long _do_fork(unsigned long clone_flags,\n\t      unsigned long stack_start,\n\t      unsigned long stack_size,\n\t      int __user *parent_tidptr,\n\t      int __user *child_tidptr,\n\t      unsigned long tls)\n{\n\tstruct task_struct *p;\n\tint trace = 0;\n\tlong nr;\n\n\n......\n\tp = copy_process(clone_flags, stack_start, stack_size,\n\t\t\t child_tidptr, NULL, trace, tls, NUMA_NO_NODE);\n......\n\tif (!IS_ERR(p)) {\n\t\tstruct pid *pid;\n\t\tpid = get_task_pid(p, PIDTYPE_PID);\n\t\tnr = pid_vnr(pid);\n\n\n\t\tif (clone_flags &amp; CLONE_PARENT_SETTID)\n\t\t\tput_user(nr, parent_tidptr);\n\n\n......\n\t\twake_up_new_task(p);\n......\n\t\tput_pid(pid);\n\t} \n......\n</code></pre><h2>fork的第一件大事：复制结构</h2><p>_do_fork里面做的第一件大事就是copy_process，咱们前面讲过这个思想。如果所有数据结构都从头创建一份太麻烦了，还不如使用惯用“伎俩”，Ctrl C + Ctrl V。</p><p>这里我们再把task_struct的结构图拿出来，对比着看如何一个个复制。</p><p><img src=\"https://static001.geekbang.org/resource/image/fd/1d/fda98b6c68605babb2036bf91782311d.png?wh=2098*2332\" alt=\"\"></p><pre><code>static __latent_entropy struct task_struct *copy_process(\n\t\t\t\t\tunsigned long clone_flags,\n\t\t\t\t\tunsigned long stack_start,\n\t\t\t\t\tunsigned long stack_size,\n\t\t\t\t\tint __user *child_tidptr,\n\t\t\t\t\tstruct pid *pid,\n\t\t\t\t\tint trace,\n\t\t\t\t\tunsigned long tls,\n\t\t\t\t\tint node)\n{\n\tint retval;\n\tstruct task_struct *p;\n......\n\tp = dup_task_struct(current, node);\n</code></pre><p>dup_task_struct主要做了下面几件事情：</p><ul>\n<li>\n<p>调用alloc_task_struct_node分配一个task_struct结构；</p>\n</li>\n<li>\n<p>调用alloc_thread_stack_node来创建内核栈，这里面调用__vmalloc_node_range分配一个连续的THREAD_SIZE的内存空间，赋值给task_struct的void *stack成员变量；</p>\n</li>\n<li>\n<p>调用arch_dup_task_struct(struct task_struct *dst, struct task_struct *src)，将task_struct进行复制，其实就是调用memcpy；</p>\n</li>\n<li>\n<p>调用setup_thread_stack设置thread_info。</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>到这里，整个task_struct复制了一份，而且内核栈也创建好了。</p><p>我们再接着看copy_process。</p><pre><code>retval = copy_creds(p, clone_flags);\n</code></pre><p>轮到权限相关了，copy_creds主要做了下面几件事情：</p><ul>\n<li>\n<p>调用prepare_creds，准备一个新的struct cred *new。如何准备呢？其实还是从内存中分配一个新的struct cred结构，然后调用memcpy复制一份父进程的cred；</p>\n</li>\n<li>\n<p>接着p-&gt;cred = p-&gt;real_cred = get_cred(new)，将新进程的“我能操作谁”和“谁能操作我”两个权限都指向新的cred。</p>\n</li>\n</ul><p>接下来，copy_process重新设置进程运行的统计量。</p><pre><code>p-&gt;utime = p-&gt;stime = p-&gt;gtime = 0;\np-&gt;start_time = ktime_get_ns();\np-&gt;real_start_time = ktime_get_boot_ns();\n</code></pre><p>接下来，copy_process开始设置调度相关的变量。</p><pre><code>retval = sched_fork(clone_flags, p);\n</code></pre><p>sched_fork主要做了下面几件事情：</p><ul>\n<li>\n<p>调用__sched_fork，在这里面将on_rq设为0，初始化sched_entity，将里面的exec_start、sum_exec_runtime、prev_sum_exec_runtime、vruntime都设为0。你还记得吗，这几个变量涉及进程的实际运行时间和虚拟运行时间。是否到时间应该被调度了，就靠它们几个；</p>\n</li>\n<li>\n<p>设置进程的状态p-&gt;state = TASK_NEW；</p>\n</li>\n<li>\n<p>初始化优先级prio、normal_prio、static_prio；</p>\n</li>\n<li>\n<p>设置调度类，如果是普通进程，就设置为p-&gt;sched_class = &amp;fair_sched_class；</p>\n</li>\n<li>\n<p>调用调度类的task_fork函数，对于CFS来讲，就是调用task_fork_fair。在这个函数里，先调用update_curr，对于当前的进程进行统计量更新，然后把子进程和父进程的vruntime设成一样，最后调用place_entity，初始化sched_entity。这里有一个变量sysctl_sched_child_runs_first，可以设置父进程和子进程谁先运行。如果设置了子进程先运行，即便两个进程的vruntime一样，也要把子进程的sched_entity放在前面，然后调用resched_curr，标记当前运行的进程TIF_NEED_RESCHED，也就是说，把父进程设置为应该被调度，这样下次调度的时候，父进程会被子进程抢占。</p>\n</li>\n</ul><p>接下来，copy_process开始初始化与文件和文件系统相关的变量。</p><pre><code>retval = copy_files(clone_flags, p);\nretval = copy_fs(clone_flags, p);\n</code></pre><p>copy_files主要用于复制一个进程打开的文件信息。这些信息用一个结构files_struct来维护，每个打开的文件都有一个文件描述符。在copy_files函数里面调用dup_fd，在这里面会创建一个新的files_struct，然后将所有的文件描述符数组fdtable拷贝一份。</p><p>copy_fs主要用于复制一个进程的目录信息。这些信息用一个结构fs_struct来维护。一个进程有自己的根目录和根文件系统root，也有当前目录pwd和当前目录的文件系统，都在fs_struct里面维护。copy_fs函数里面调用copy_fs_struct，创建一个新的fs_struct，并复制原来进程的fs_struct。</p><p>接下来，copy_process开始初始化与信号相关的变量。</p><pre><code>init_sigpending(&amp;p-&gt;pending);\nretval = copy_sighand(clone_flags, p);\nretval = copy_signal(clone_flags, p);\n</code></pre><p>copy_sighand会分配一个新的sighand_struct。这里最主要的是维护信号处理函数，在copy_sighand里面会调用memcpy，将信号处理函数sighand-&gt;action从父进程复制到子进程。</p><p>init_sigpending和copy_signal用于初始化，并且复制用于维护发给这个进程的信号的数据结构。copy_signal函数会分配一个新的signal_struct，并进行初始化。</p><p>接下来，copy_process开始复制进程内存空间。</p><pre><code>retval = copy_mm(clone_flags, p);\n</code></pre><p>进程都有自己的内存空间，用mm_struct结构来表示。copy_mm函数中调用dup_mm，分配一个新的mm_struct结构，调用memcpy复制这个结构。dup_mmap用于复制内存空间中内存映射的部分。前面讲系统调用的时候，我们说过，mmap可以分配大块的内存，其实mmap也可以将一个文件映射到内存中，方便可以像读写内存一样读写文件，这个在内存管理那节我们讲。</p><p>接下来，copy_process开始分配pid，设置tid，group_leader，并且建立进程之间的亲缘关系。</p><pre><code>\tINIT_LIST_HEAD(&amp;p-&gt;children);\n\tINIT_LIST_HEAD(&amp;p-&gt;sibling);\n......\n    p-&gt;pid = pid_nr(pid);\n\tif (clone_flags &amp; CLONE_THREAD) {\n\t\tp-&gt;exit_signal = -1;\n\t\tp-&gt;group_leader = current-&gt;group_leader;\n\t\tp-&gt;tgid = current-&gt;tgid;\n\t} else {\n\t\tif (clone_flags &amp; CLONE_PARENT)\n\t\t\tp-&gt;exit_signal = current-&gt;group_leader-&gt;exit_signal;\n\t\telse\n\t\t\tp-&gt;exit_signal = (clone_flags &amp; CSIGNAL);\n\t\tp-&gt;group_leader = p;\n\t\tp-&gt;tgid = p-&gt;pid;\n\t}\n......\n\tif (clone_flags &amp; (CLONE_PARENT|CLONE_THREAD)) {\n\t\tp-&gt;real_parent = current-&gt;real_parent;\n\t\tp-&gt;parent_exec_id = current-&gt;parent_exec_id;\n\t} else {\n\t\tp-&gt;real_parent = current;\n\t\tp-&gt;parent_exec_id = current-&gt;self_exec_id;\n\t}\n</code></pre><p>好了，copy_process要结束了，上面图中的组件也初始化的差不多了。</p><h2>fork的第二件大事：唤醒新进程</h2><p>_do_fork做的第二件大事是wake_up_new_task。新任务刚刚建立，有没有机会抢占别人，获得CPU呢？</p><pre><code>void wake_up_new_task(struct task_struct *p)\n{\n\tstruct rq_flags rf;\n\tstruct rq *rq;\n......\n\tp-&gt;state = TASK_RUNNING;\n......\n\tactivate_task(rq, p, ENQUEUE_NOCLOCK);\n\tp-&gt;on_rq = TASK_ON_RQ_QUEUED;\n\ttrace_sched_wakeup_new(p);\n\tcheck_preempt_curr(rq, p, WF_FORK);\n......\n}\n</code></pre><p>首先，我们需要将进程的状态设置为TASK_RUNNING。</p><p>activate_task函数中会调用enqueue_task。</p><pre><code>static inline void enqueue_task(struct rq *rq, struct task_struct *p, int flags)\n{\n.....\n\tp-&gt;sched_class-&gt;enqueue_task(rq, p, flags);\n}\n</code></pre><p>如果是CFS的调度类，则执行相应的enqueue_task_fair。</p><pre><code>static void\nenqueue_task_fair(struct rq *rq, struct task_struct *p, int flags)\n{\n\tstruct cfs_rq *cfs_rq;\n\tstruct sched_entity *se = &amp;p-&gt;se;\n......\n\tcfs_rq = cfs_rq_of(se);\n\tenqueue_entity(cfs_rq, se, flags);\n......\n\tcfs_rq-&gt;h_nr_running++;\n......\n}\n</code></pre><p>在enqueue_task_fair中取出的队列就是cfs_rq，然后调用enqueue_entity。</p><p>在enqueue_entity函数里面，会调用update_curr，更新运行的统计量，然后调用__enqueue_entity，将sched_entity加入到红黑树里面，然后将se-&gt;on_rq = 1设置在队列上。</p><p>回到enqueue_task_fair后，将这个队列上运行的进程数目加一。然后，wake_up_new_task会调用check_preempt_curr，看是否能够抢占当前进程。</p><p>在check_preempt_curr中，会调用相应的调度类的rq-&gt;curr-&gt;sched_class-&gt;check_preempt_curr(rq, p, flags)。对于CFS调度类来讲，调用的是check_preempt_wakeup。</p><pre><code>static void check_preempt_wakeup(struct rq *rq, struct task_struct *p, int wake_flags)\n{\n\tstruct task_struct *curr = rq-&gt;curr;\n\tstruct sched_entity *se = &amp;curr-&gt;se, *pse = &amp;p-&gt;se;\n\tstruct cfs_rq *cfs_rq = task_cfs_rq(curr);\n......\n\tif (test_tsk_need_resched(curr))\n\t\treturn;\n......\n\tfind_matching_se(&amp;se, &amp;pse);\n\tupdate_curr(cfs_rq_of(se));\n\tif (wakeup_preempt_entity(se, pse) == 1) {\n\t\tgoto preempt;\n\t}\n\treturn;\npreempt:\n\tresched_curr(rq);\n......\n}\n</code></pre><p>在check_preempt_wakeup函数中，前面调用task_fork_fair的时候，设置sysctl_sched_child_runs_first了，已经将当前父进程的TIF_NEED_RESCHED设置了，则直接返回。</p><p>否则，check_preempt_wakeup还是会调用update_curr更新一次统计量，然后wakeup_preempt_entity将父进程和子进程PK一次，看是不是要抢占，如果要则调用resched_curr标记父进程为TIF_NEED_RESCHED。</p><p>如果新创建的进程应该抢占父进程，在什么时间抢占呢？别忘了fork是一个系统调用，从系统调用返回的时候，是抢占的一个好时机，如果父进程判断自己已经被设置为TIF_NEED_RESCHED，就让子进程先跑，抢占自己。</p><h2>总结时刻</h2><p>好了，fork系统调用的过程咱们就解析完了。它包含两个重要的事件，一个是将task_struct结构复制一份并且初始化，另一个是试图唤醒新创建的子进程。</p><p>这个过程我画了一张图，你可以对照着这张图回顾进程创建的过程。</p><p>这个图的上半部分是复制task_struct结构，你可以对照着右面的task_struct结构图，看这里面的成员是如何一部分一部分地被复制的。图的下半部分是唤醒新创建的子进程，如果条件满足，就会将当前进程设置应该被调度的标识位，就等着当前进程执行__schedule了。</p><p><img src=\"https://static001.geekbang.org/resource/image/9d/58/9d9c5779436da40cabf8e8599eb85558.jpeg?wh=4297*6652\" alt=\"\"></p><h2>课堂练习</h2><p>你可以试着设置sysctl_sched_child_runs_first参数，然后使用系统调用写程序创建进程，看看执行结果。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎你收藏本节内容，<span class=\"orange\">反复研读</span>。你也可以把今天的内容分享给你的朋友，和他一起学习、进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","comments":[{"had_liked":false,"id":92713,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1557315432,"is_pvip":false,"replies":[{"id":"49423","content":"是的。","user_name":"作者回复","comment_id":92713,"uid":"1001590","ip_address":"","utype":1,"ctime":1567661037,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"181945941864","product_id":100024701,"comment_content":"文章中出现了SYSCALL_DEFINE0宏定义，不明白，就网上查了一下，一看吓一跳，宏定义里面又有一堆宏定义，其实就是一个函数调用，为什么弄得这么复杂呢？原来是为了修复一个bug。这让我意识到linux内核代码的复杂性。linux是一个集大成者，为了适应各种硬件架构平台，修复各种意想不到的bug，里面充斥着各种兼容性代码，修复补丁等等。而且里面的代码也是世界各路大神，黑客写出来的，为了保证内核的安全性，健壮性，扩展性，考虑的东西非常之多，充斥着各种奇技淫巧，不是我等普通人短时间能够理解。每一行代码，甚至一个宏定义，都是要花时间研究的。从这个角度上来说，linux就像是一个迷宫，如果没有一个向导，进去后估计就出不来了。也许这个专栏的作用就是充当一个向导，欣赏沿途风景的同时，带领我们穿越迷宫，找到出口...","like_count":42,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449359,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567661037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93526,"user_name":"why","can_delete":false,"product_type":"c1","uid":1012937,"ip_address":"","ucode":"C9E796E53F6F5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/c9/d3439ca4.jpg","comment_is_top":false,"comment_ctime":1557486639,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"160471276591","product_id":100024701,"comment_content":"- fork -&gt; sys_call_table 转换为 sys_fork()-&gt;`_do_fork`<br>- 创建进程做两件事: 复制初始化 task_struct; 唤醒新进程<br>- 复制并初始化 task_struct, copy_process()<br>    - dup_task_struct: 分配 task_struct 结构体; 创建内核栈, 赋给`* stack`; 复制 task_struct, 设置 thread_info;<br>    - copy_creds: 分配 cred 结构体并复制, p-&gt;cred = p-&gt;real_cred = get_cred(new)<br>    - 初始化运行时统计量<br>    - sched_fork 调度相关结构体: 分配并初始化 sched_entity; state = TASK_NEW; 设置优先级和调度类; task_fork_fair()-&gt;update_curr 更新当前进程运行统计量, 将当前进程 vruntime 赋给子进程, 通过 sysctl_sched_child_runs_first 设置是否让子进程抢占, 若是则将其 sched_entity 放前头, 并调用 resched_curr 做被抢占标记.<br>    - 初始化文件和文件系统变量 <br>        - copy_files: 复制进程打开的文件信息, 用 files_struct 维护; <br>        - copy_fs: 复制进程目录信息, 包括根目录&#47;根文件系统; pwd 等, 用 fs_struct 维护<br>    - 初始化信号相关内容: 复制信号和处理函数<br>    - 复制内存空间: 分配并复制 mm_struct; 复制内存映射信息<br>    - 分配 pid<br>- 唤醒新进程 wake_up_new_task()<br>    - state = TASK_RUNNING; activate 用调度类将当前子进程入队列<br>    - 其中 enqueue_entiry 中会调用 update_curr 更新运行统计量, 再加入队列<br>    - 调用 check_preempt_curr 看是否能抢占, 若 task_fork_fair 中已设置 sysctl_sched_child_runs_first, 直接返回, 否则进一步比较并调用 resched_curr 做抢占标记<br>    - 若父进程被标记会被抢占, 则系统调用 fork 返回过程会调度子进程<br>    ","like_count":37,"discussions":[{"author":{"id":1143399,"avatar":"https://static001.geekbang.org/account/avatar/00/11/72/67/aa52812a.jpg","nickname":"stark","note":"","ucode":"ADC5C2AE5B97C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348066,"discussion_content":"牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612421059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92718,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1557315869,"is_pvip":false,"replies":[{"id":"49422","content":"错了会做错误处理的，没有啥捷径，都是代码里面自己做的，写c就要这样，每一步都要清楚自己创建了什么，万一错误应该销毁什么。如果程序员不做这个，没有人帮忙，不像java还有个gc","user_name":"作者回复","comment_id":92718,"uid":"1001590","ip_address":"","utype":1,"ctime":1567661003,"user_name_real":"刘超@网易云"}],"discussion_count":3,"race_medal":0,"score":"87456661789","product_id":100024701,"comment_content":"有个问题：<br>在数据库中，有个事务的概念，也就是保证一连串操作的原子性，如果其中任何一步错误，整个操作回滚，回到原来的状态，好像什么也没发生。但是在文章中我看到，在创建进程的过程中，步骤太多了。每一步都要申请空间，复制数据。如果其中一步发生了错误，怎么保证释放这些空间，回到原来状态？","like_count":20,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449363,"discussion_content":"错了会做错误处理的，没有啥捷径，都是代码里面自己做的，写c就要这样，每一步都要清楚自己创建了什么，万一错误应该销毁什么。如果程序员不做这个，没有人帮忙，不像java还有个gc","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567661003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007330,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/e2/1fad3052.jpg","nickname":"Jemmy","note":"","ucode":"A979F4A5210225","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284934,"discussion_content":"源码中每一步 copy error 都有对应的 handler：\n\nretval = copy_sighand(clone_flags, p);\nif (retval)\n\tgoto bad_fork_cleanup_fs;\nretval = copy_signal(clone_flags, p);\nif (retval)\n\tgoto bad_fork_cleanup_sighand;\nretval = copy_mm(clone_flags, p);\nif (retval)\n\tgoto bad_fork_cleanup_signal;","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1592672993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1007330,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/e2/1fad3052.jpg","nickname":"Jemmy","note":"","ucode":"A979F4A5210225","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":390406,"discussion_content":"这样看突然觉得Go很合理：）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629816997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":284934,"ip_address":""},"score":390406,"extra":""}]}]},{"had_liked":false,"id":93322,"user_name":"Milittle","can_delete":false,"product_type":"c1","uid":1045455,"ip_address":"","ucode":"80E566639A8ABB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/cf/851dab01.jpg","comment_is_top":false,"comment_ctime":1557452510,"is_pvip":true,"replies":[{"id":"49399","content":"其实不用纠结，因为代码过一阵就变了，关键是理解原理和流程。我原来做过代码逐行分析的这种，但是发现这种文章过一阵就没法看了。","user_name":"作者回复","comment_id":93322,"uid":"1001590","ip_address":"","utype":1,"ctime":1567656087,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"70276929246","product_id":100024701,"comment_content":"老师，要是能把对应代码路径给出就好了，有时候自己找不见，谢谢老师~","like_count":16,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449582,"discussion_content":"其实不用纠结，因为代码过一阵就变了，关键是理解原理和流程。我原来做过代码逐行分析的这种，但是发现这种文章过一阵就没法看了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567656087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390407,"discussion_content":"确实，现在对着linux 5.10看，很多都不一样了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629817029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93067,"user_name":"免费的人","can_delete":false,"product_type":"c1","uid":1032106,"ip_address":"","ucode":"2B12D8ED63C564","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bf/aa/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1557388398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40212094062","product_id":100024701,"comment_content":"我是来收图的。","like_count":9},{"had_liked":false,"id":207370,"user_name":"zhengfan","can_delete":false,"product_type":"c1","uid":1020160,"ip_address":"","ucode":"B3AC0E10BF7A14","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/00/2007d2f3.jpg","comment_is_top":false,"comment_ctime":1587058052,"is_pvip":false,"replies":[{"id":"83917","content":"不会的，调度这个函数是在内核里面的，这个逻辑其实不属于任何一个进程，反而是上下文的数据才标志了属于哪个进程。而且子进程刚fork完之后，没有exec之前，所有都和父进程一模一样","user_name":"作者回复","comment_id":207370,"uid":"1001590","ip_address":"","utype":1,"ctime":1592458685,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"35946796420","product_id":100024701,"comment_content":"刘老师：<br>遇到一个问题。<br>您在上面两个章节提到过“进程调度第一定律”，是说任何被调度的task（无论是获得还是交出运行权一方）都是在调用__schedule方法，并因此在进程实际切换完成后不需修改指令指针寄存器。<br>以此来思考本节介绍的创建进程过程。父进程在交出运行权的时候没什么特殊的，一定是在执行__schedule方法。<br>然而当子进程获得运行权的时候，因为之前它没运行过，不是通过__schedule方法交出运行权的，当前的指令指针寄存器和子进程运行状态的上下文（dup_task_struct中？）不相符吧？这样不会出问题吗？","like_count":8,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492100,"discussion_content":"不会的，调度这个函数是在内核里面的，这个逻辑其实不属于任何一个进程，反而是上下文的数据才标志了属于哪个进程。而且子进程刚fork完之后，没有exec之前，所有都和父进程一模一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592458685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131589,"user_name":"garlic","can_delete":false,"product_type":"c1","uid":1019579,"ip_address":"","ucode":"FEB147EDB5774E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/bb/c039dc11.jpg","comment_is_top":false,"comment_ctime":1567820729,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"31632591801","product_id":100024701,"comment_content":"先前一些版本中人们讨论child first run主要为了减少COW对子进程造成影响，CFS调度器在2.6.23 版本引入后 2.6.32 将child first run关闭默认，父进程运行，理由是尤其引发的一些bash bug 和 更好的利用TLB和cache， 学习笔记https:&#47;&#47;garlicspace.com&#47;2019&#47;09&#47;07&#47;linux内核参数sysctl_sched_child_runs_first&#47;","like_count":7},{"had_liked":false,"id":222597,"user_name":"注意力$","can_delete":false,"product_type":"c1","uid":1142316,"ip_address":"","ucode":"7FB3399A1EAB72","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/2c/e2f3cfc0.jpg","comment_is_top":false,"comment_ctime":1590846422,"is_pvip":false,"replies":[{"id":"83015","content":"创建复杂，创建起来就好了，很多多进程的软件，也不是任务来了，现创建进程的，而是事先创建好了，等待分配任务。","user_name":"作者回复","comment_id":222597,"uid":"1001590","ip_address":"","utype":1,"ctime":1591753824,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":1,"score":"27360650198","product_id":100024701,"comment_content":"超哥，Oracle 这种多进程的数据库，和mysql 这种单进程多线程的数据库，在进程管理上有什么优势呢？看见创建进程这么复杂，资源消耗也多","like_count":6,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496855,"discussion_content":"创建复杂，创建起来就好了，很多多进程的软件，也不是任务来了，现创建进程的，而是事先创建好了，等待分配任务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591753824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93657,"user_name":"尚墨","can_delete":false,"product_type":"c1","uid":1300116,"ip_address":"","ucode":"114EE139168CB9","user_header":"http://thirdwx.qlogo.cn/mmopen/uqaRIfRCAhJ6t1z92XYEzXpqpgpS1veBc5DNGhfRHFsHgE19qHqG0cevcIJRRsjIKxsSEcIPVP1nOkaVKLibb2xFq04A4KMY3/132","comment_is_top":false,"comment_ctime":1557548750,"is_pvip":false,"replies":[{"id":"49393","content":"再难的知识就怕反复研究，加油","user_name":"作者回复","comment_id":93657,"uid":"1001590","ip_address":"","utype":1,"ctime":1567654358,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"23032385230","product_id":100024701,"comment_content":"反复研读都已经高亮了。我几乎每篇都要听，读三次以上，才能懵懵懂懂。","like_count":5,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449716,"discussion_content":"再难的知识就怕反复研究，加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567654358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160162,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1575882790,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18755751974","product_id":100024701,"comment_content":"老师您好，记得fork时，一些大的内存对象，会有copy on write的机制，这个是在何时起作用的呢？是copy_mm这里吗？感谢！","like_count":4,"discussions":[{"author":{"id":2028554,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8HE5kCNluviaVjzPSk0YuacxXF6HFV2257c4edGGpnZSCR2e2Z7S9c89ahY6A4WsbtLMhfgeicYeA/132","nickname":"中华小厨神","note":"","ucode":"2C4CB3D6777969","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368042,"discussion_content":"同问，对照do_fork代码我也没找到COW及slab机制如何体现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618549453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2344081,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c4/91/a017bf72.jpg","nickname":"coconut","note":"","ucode":"07B95C7A6AC2F7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347130,"discussion_content":"同问，似乎这个课程没有讲这个机制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612159417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92952,"user_name":"青石","can_delete":false,"product_type":"c1","uid":1215531,"ip_address":"","ucode":"B0056AD6453322","user_header":"https://static001.geekbang.org/account/avatar/00/12/8c/2b/3ab96998.jpg","comment_is_top":false,"comment_ctime":1557367550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18737236734","product_id":100024701,"comment_content":"如果是完全公平调度算法的话，sched_fork的时候，将子进程的vruntime修改为与父进程的vruntime一致，是为了将子进程的vruntime设置到与其他进程在同一个量级上，父进程的执行说明当前它处在红黑树的最左节点，将父进程的TIF_NEED_RESCHED标记为允许被抢占，当系统回调时调用__schedule()，更新父进程的vruntime后，子进程处在红黑树最左节点，此时运行子进程。","like_count":4},{"had_liked":false,"id":92435,"user_name":"一苇渡江","can_delete":false,"product_type":"c1","uid":1219224,"ip_address":"","ucode":"3213C283370549","user_header":"https://static001.geekbang.org/account/avatar/00/12/9a/98/c6be134a.jpg","comment_is_top":false,"comment_ctime":1557274440,"is_pvip":false,"replies":[{"id":"49434","content":"手抄啊，牛","user_name":"作者回复","comment_id":92435,"uid":"1001590","ip_address":"","utype":1,"ctime":1567663877,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"18737143624","product_id":100024701,"comment_content":"老师写的太棒了，特别是这个图，肯定是花了不少时间，把这个图手抄了一遍，时不时拿出来看看","like_count":4,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449257,"discussion_content":"手抄啊，牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567663877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286546,"user_name":"geek","can_delete":false,"product_type":"c1","uid":2401422,"ip_address":"","ucode":"FF0845140D72A9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/NyFOEueITjaGLpakMEuWAqVQjo1uDIXlpDdpCxXGfaWiaXzibLQ3WgOFCe8D9FvCmyjsGT7jDsLUbkt8jt2aVs9g/132","comment_is_top":false,"comment_ctime":1617367935,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10207302527","product_id":100024701,"comment_content":"COW是指父子task的mm相同，虚拟地址对应的物理内存是同一份。task_struct中的其他变量是直接copy新的一份的。","like_count":2},{"had_liked":false,"id":190601,"user_name":"小橙子","can_delete":false,"product_type":"c1","uid":1244724,"ip_address":"","ucode":"7E3DD87C3DE6F9","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/34/67c1ed1e.jpg","comment_is_top":false,"comment_ctime":1584671814,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10174606406","product_id":100024701,"comment_content":"整个系列看了几次了 ，越看有理解深刻。<br><br>现在有个问题，就是一直没看到多CPU的调用问题， 每一个cpu上的task 会被其他cpu来请求么？<br><br>也就是父子进程最后会在不同的CPU上运行么？","like_count":2,"discussions":[{"author":{"id":2877693,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/e8/fd/37e21dbb.jpg","nickname":"BellerSun","note":"","ucode":"62B7B49DFE2BDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562535,"discussion_content":"肯定是可以在不同CPU上运行的，可以举个反例：所有用户态进程的父进程都是1号进程，照那么说所有用户进程就都在同一个CPU了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649847311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1078099,"avatar":"https://static001.geekbang.org/account/avatar/00/10/73/53/ae874916.jpg","nickname":"张贺东","note":"","ucode":"7353D54BDFB15E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350805,"discussion_content":"我也有这个疑问，查了下发现CPU调度也有load_balance机制，会迁移不同CPU上面的进程来实现均负载衡。猜想：虽然有亲和性等机制，但是一些情况下父子进程可能也会在不同CPU上面运行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614013491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97589,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1558702929,"is_pvip":false,"replies":[{"id":"35417","content":"有区别的","user_name":"作者回复","comment_id":97589,"uid":"1001590","ip_address":"","utype":1,"ctime":1559110481,"user_name_real":"刘超@网易云"}],"discussion_count":3,"race_medal":0,"score":"10148637521","product_id":100024701,"comment_content":"内核态的内核进程和用户态的用户进程创建过程有区别吗？","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451334,"discussion_content":"有区别的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559110481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325256,"avatar":"https://static001.geekbang.org/account/avatar/00/14/38/c8/972a5024.jpg","nickname":"凉凉","note":"","ucode":"FCCF976E41EF71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553376,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645867442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063804,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3b/7c/14daf010.jpg","nickname":"风轻云淡","note":"","ucode":"9A69E4491DB8E4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208991,"discussion_content":"老师这个内核态的内核进程和用户态的用户进程创建过程具体有啥区别呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584598832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198501,"user_name":"Dispy","can_delete":false,"product_type":"c1","uid":1483495,"ip_address":"","ucode":"1BF7870B32AB15","user_header":"","comment_is_top":false,"comment_ctime":1585454113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880421409","product_id":100024701,"comment_content":"回头又来看看这个专栏，我百度了下设置sysctl_sched_child_runs_first的方法，只是给出了一个命令，sysctl -w kernel.sched_child_runs_first=1。作者能发下这道课堂练习的答案吗？<br>","like_count":1},{"had_liked":false,"id":92520,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1557290327,"is_pvip":false,"replies":[{"id":"49428","content":"类是全局的。里面主要实现的是算法。","user_name":"作者回复","comment_id":92520,"uid":"1001590","ip_address":"","utype":1,"ctime":1567663173,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"5852257623","product_id":100024701,"comment_content":"调度类是全局的吗？还是每个cpu核有自己的调度类集合？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449298,"discussion_content":"类是全局的。里面主要实现的是算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567663173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133711,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4c/8f/a90b3969.jpg","nickname":"oldman","note":"","ucode":"6BACE2832B4429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204,"discussion_content":"我理解是全局的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561279820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357672,"user_name":"zixuan","can_delete":false,"product_type":"c1","uid":1131300,"ip_address":"广东","ucode":"C72920DD05B074","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/24/3f9f7c70.jpg","comment_is_top":false,"comment_ctime":1663554820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663554820","product_id":100024701,"comment_content":"wakeup child那里有可能调度了一个更高优的进程吧，不能保证是新child被调度？","like_count":0},{"had_liked":false,"id":319262,"user_name":"幼儿编程教学","can_delete":false,"product_type":"c1","uid":1237199,"ip_address":"","ucode":"F13F3150E6CAE9","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/cf/43f201f2.jpg","comment_is_top":false,"comment_ctime":1635727285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635727285","product_id":100024701,"comment_content":"请教老师。做了这么多步骤，好像很复杂，看起来create process成本不低。COW(copy-on-write)体现在哪里？","like_count":0},{"had_liked":false,"id":279756,"user_name":"Geek_df264e","can_delete":false,"product_type":"c1","uid":2013087,"ip_address":"","ucode":"EB65EE14DF8EC0","user_header":"","comment_is_top":false,"comment_ctime":1613957801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613957801","product_id":100024701,"comment_content":"老师请问一下，从桌面双击一个进程是经过什么系统调用过去的？在终端运行一个进程其实就是将该终端的上下文切换为即将运行的进程，该进程运行结束会切换回来，该进程的父进程就是该终端。那桌面双击运行一个进程为何该进程的父进程是init而不是桌面进程。有点疑惑，麻烦老师解疑下。","like_count":0},{"had_liked":false,"id":275627,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1611625355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611625355","product_id":100024701,"comment_content":"先略读一遍","like_count":0},{"had_liked":false,"id":256975,"user_name":"AlexS","can_delete":false,"product_type":"c1","uid":1472051,"ip_address":"","ucode":"3DA81A613CE645","user_header":"https://static001.geekbang.org/account/avatar/00/16/76/33/928ffd21.jpg","comment_is_top":false,"comment_ctime":1603802130,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1603802130","product_id":100024701,"comment_content":"关于子进程怎么正确的从__schedule返回用户态的问题。 <br>父进程fork系统调用返回的时候调用__schedule让出cpu，让子进程运行，那么此刻子进程的指令指针肯定也在__schedule，要从__schedule返回用户态，那么返回的依据将会是和父进程类似的函数栈。假设子进程在父进程fork系统调用返回的时候得以运行，那么以64位sys_call的栈为例，应该是这样do_syscall_64-&gt;syscall_return_slowpath-&gt;prepare_exit_to_usermode-&gt;exit_to_usermode_loop-&gt;schedule-&gt;__schedule。但是这个子进程栈的内容在do_syscall_64-&gt;sys_fork-&gt;_do_fork-&gt;copy_process-&gt;dup_task_struct的时候就已经初始化完成了，那时候复制出来的栈还没有do_syscall_64-&gt;syscall_return_slowpath-&gt;...-&gt;schedule-&gt;__schedule的内容啊。子进程要以怎么样的路径返回呢？<br>求求解答。","like_count":0,"discussions":[{"author":{"id":1297941,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ce/15/51187703.jpg","nickname":"瓜蛋","note":"","ucode":"9033348BEF5F5A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349700,"discussion_content":"子进程的指令指针不是__schedule，子进程尚未被运行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613468007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1472051,"avatar":"https://static001.geekbang.org/account/avatar/00/16/76/33/928ffd21.jpg","nickname":"AlexS","note":"","ucode":"3DA81A613CE645","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322274,"discussion_content":"有没有同学老师指导一下呀。。我卡住了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604716378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241886,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1597486540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597486540","product_id":100024701,"comment_content":"fork系统调用：<br>----sys_fork 会调用 _do_fork<br>--- copy_process<br>--dup_task_struct<br>-alloc_task_struct_node 分配一个 task_struct 结构<br>- alloc_thread_stack_node 来创建内核栈<br>-arch_dup_task_struct将 task_struct 进行复制<br>-调用 setup_thread_stack 设置 thread_info<br>--copy_creds<br>- prepare_creds<br>- p-&gt;cred = p-&gt;real_cred = get_cred(new)（“我能操作谁”和“谁能操作我”两个权限都指向新的 cred）<br><br>--copy_process 重新设置进程运行的统计量<br>--sched_fork(clone_flags, p)设置调度相关变量<br>--retval = copy_files(clone_flags, p); retval = copy_fs(clone_flags, p);开始初始化与文件和文件系统相关的变量<br>--始化与信号相关的变量<br>init_sigpending(&amp;p-&gt;pending);<br>retval = copy_sighand(clone_flags, p);<br>将信号处理函数 sighand-&gt;action 从父进程复制到子进程<br>retval = copy_signal(clone_flags, p);<br>配一个新的 signal_struct，并进行初始化<br>--复制进程内存空间retval = copy_mm(clone_flags, p);<br>(进程都有自己的内存空间，用 mm_struct 结构来表示)<br>--分配 pid，设置 tid，group_leader，并且建立进程之间的亲缘关系<br><br>---wake_up_new_task<br>--需要将进程的状态设置为 TASK_RUNNING<br>--CFS 的调度类，则执行相应的 enqueue_task_fair<br>--在 enqueue_entity 函数里面，会调用 update_curr，更新运行的统计量，然后调用 __enqueue_entity，将 sched_entity 加入到红黑树里面;<br>--check_preempt_curr，看是否能够抢占当前进程<br>-前面调用 task_fork_fair 的时候，设置 sysctl_sched_child_runs_first 了，已经将当前父进程的 TIF_NEED_RESCHED 设置了，则直接返回;<br>-否则将父进程和子进程 PK 一次，看是不是要抢占，如果要则调用 resched_curr 标记父进程为 TIF_NEED_RESCHED<br>-- fork 是一个系统调用，从系统调用返回的时候，是抢占的一个好时机","like_count":0},{"had_liked":false,"id":239487,"user_name":"lcken","can_delete":false,"product_type":"c1","uid":1298018,"ip_address":"","ucode":"9F7CD55370D94B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3Mf5ickZ4gwXXM0kO04EtWY6icTswVNSg1H8bhy72b5ErNjbmKkawcneovickGfmK1OkfhfIZ2Fib77e2uLIsiaH4aw/132","comment_is_top":false,"comment_ctime":1596546192,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1596546192","product_id":100024701,"comment_content":"如果在用户态写了个死循环，那进程就无法被调度？","like_count":0,"discussions":[{"author":{"id":1257502,"avatar":"https://static001.geekbang.org/account/avatar/00/13/30/1e/0b05530d.jpg","nickname":"Yakmoz","note":"","ucode":"1FA18A711457A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299307,"discussion_content":"上一节评论里有回答过了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597651710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237778,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1595950688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595950688","product_id":100024701,"comment_content":"最后的图，赞👍","like_count":0},{"had_liked":false,"id":206397,"user_name":"vsan","can_delete":false,"product_type":"c1","uid":1896461,"ip_address":"","ucode":"20D3C0BF575C9D","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f0/0d/1ddba1aa.jpg","comment_is_top":false,"comment_ctime":1586853662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586853662","product_id":100024701,"comment_content":"子进程唤醒后如果设置比父进程优先运行，当fork返回用户态时是有可能被其他进程截胡CPU的吧？","like_count":0},{"had_liked":false,"id":202015,"user_name":"Geek_103f3f","can_delete":false,"product_type":"c1","uid":1724657,"ip_address":"","ucode":"BD4E0A2606B11F","user_header":"","comment_is_top":false,"comment_ctime":1585887810,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585887810","product_id":100024701,"comment_content":"老师，我工作四年，做图像深度学习。因为是从非计算机专业转过来的，不懂操作系统，编译原理这些。我要换方向，做底层的话，我还需要把上学时候的上千页经典教材读一遍吗，工作中有需要再查可以吗，最近找了一份驱动的工作，还没入职。","like_count":0,"discussions":[{"author":{"id":2651290,"avatar":"https://static001.geekbang.org/account/avatar/00/28/74/9a/580d35a5.jpg","nickname":"用户7437721993","note":"","ucode":"0E16E6CFA4D225","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535616,"discussion_content":"做深度学习不是挺好的，人工智能不是很热待遇很好 么？做驱动能干啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638497211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197218,"user_name":"如歌","can_delete":false,"product_type":"c1","uid":1292419,"ip_address":"","ucode":"727C90CA52CD73","user_header":"https://static001.geekbang.org/account/avatar/00/13/b8/83/7c1ed918.jpg","comment_is_top":false,"comment_ctime":1585363611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585363611","product_id":100024701,"comment_content":"老师，面试经常问的一点cop😄","like_count":0},{"had_liked":false,"id":193339,"user_name":"Geek_b8928e","can_delete":false,"product_type":"c1","uid":1926597,"ip_address":"","ucode":"96E4ABE3F2F145","user_header":"","comment_is_top":false,"comment_ctime":1584890387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584890387","product_id":100024701,"comment_content":"fork 先复制父进程，再唤醒进程","like_count":0},{"had_liked":false,"id":155668,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1574734820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574734820","product_id":100024701,"comment_content":"老实说Ctrl C + Ctrl V是一种非常不好的编程习惯","like_count":0},{"had_liked":false,"id":155310,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1574677137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574677137","product_id":100024701,"comment_content":"进程创建的过程其实就是执行系统调用fork的过程。它包含两个重要的事件，一个是将 task_struct 结构复制一份并且初始化，另一个是试图唤醒新创建的子进程。","like_count":0},{"had_liked":false,"id":136107,"user_name":"懒懒懒！","can_delete":false,"product_type":"c1","uid":1332640,"ip_address":"","ucode":"81D084811C1916","user_header":"https://static001.geekbang.org/account/avatar/00/14/55/a0/e4134100.jpg","comment_is_top":false,"comment_ctime":1569368077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569368077","product_id":100024701,"comment_content":"老师好，请问下linux加入写时拷贝技术后，对fork这块的具体影响是怎么样的呢","like_count":0},{"had_liked":false,"id":127020,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1566537683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566537683","product_id":100024701,"comment_content":"老师好!虽然看不懂这些函数调用，but还在坚持，老师的图画的很好。思虑很清晰，向老师学习","like_count":0},{"had_liked":false,"id":95443,"user_name":"周平","can_delete":false,"product_type":"c1","uid":1047936,"ip_address":"","ucode":"CA1869B139A4F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fd/80/52763d62.jpg","comment_is_top":false,"comment_ctime":1558057011,"is_pvip":false,"replies":[{"id":"49342","content":"赞","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567650280,"ip_address":"","comment_id":95443,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558057011","product_id":100024701,"comment_content":"讲得好的细节，与前面的内容可以无缝连接，不至于管中窥豹，让学习者越学越乱，谢谢老师","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450459,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567650280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92654,"user_name":"chengzise","can_delete":false,"product_type":"c1","uid":1006070,"ip_address":"","ucode":"1C27D216359894","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/f6/ed66d1c1.jpg","comment_is_top":false,"comment_ctime":1557309565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557309565","product_id":100024701,"comment_content":"解析的逻辑特别清晰，后面需要自己结合代码，加深理解。老师说的太好了","like_count":0},{"had_liked":false,"id":92437,"user_name":"blentle","can_delete":false,"product_type":"c1","uid":1064679,"ip_address":"","ucode":"AC092609A4942A","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e7/261711a5.jpg","comment_is_top":false,"comment_ctime":1557274595,"is_pvip":false,"replies":[{"id":"49433","content":"一旦创建了，就独立竞争了","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567663864,"ip_address":"","comment_id":92437,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557274595","product_id":100024701,"comment_content":"子进程是如何抢占父进程的呢？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449258,"discussion_content":"一旦创建了，就独立竞争了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567663864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}