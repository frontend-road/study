{"id":303568,"title":"33 | 脑裂：一次奇怪的数据丢失","content":"<p>你好，我是蒋德钧。</p><p>在使用主从集群时，我曾遇到过这样一个问题：我们的主从集群有1个主库、5个从库和3个哨兵实例，在使用的过程中，我们发现客户端发送的一些数据丢失了，这直接影响到了业务层的数据可靠性。</p><p>通过一系列的问题排查，我们才知道，这其实是主从集群中的脑裂问题导致的。</p><p>所谓的脑裂，就是指在主从集群中，同时有两个主节点，它们都能接收写请求。而脑裂最直接的影响，就是客户端不知道应该往哪个主节点写入数据，结果就是不同的客户端会往不同的主节点上写入数据。而且，严重的话，脑裂会进一步导致数据丢失。</p><p>那么，主从集群中为什么会发生脑裂？脑裂为什么又会导致数据丢失呢？我们该如何避免脑裂的发生呢？这节课，我就结合我遇见的这个真实问题，带你一起分析和定位问题，帮助你掌握脑裂的成因、后果和应对方法。</p><h2>为什么会发生脑裂？</h2><p>刚才我提到，我最初发现的问题是，在主从集群中，客户端发送的数据丢失了。所以，我们首先要弄明白，为什么数据会丢失？是不是数据同步出了问题？</p><h3>第一步：确认是不是数据同步出现了问题</h3><p>在主从集群中发生数据丢失，最常见的原因就是<strong>主库的数据还没有同步到从库，结果主库发生了故障，等从库升级为主库后，未同步的数据就丢失了。</strong></p><!-- [[[read_end]]] --><p>如下图所示，新写入主库的数据a:1、b:3，就因为在主库故障前未同步到从库而丢失了。</p><p><img src=\"https://static001.geekbang.org/resource/image/46/a4/46a7bef9a7074b6a46978c2524f92ea4.jpg?wh=2115*1636\" alt=\"\"></p><p>如果是这种情况的数据丢失，我们可以通过比对主从库上的复制进度差值来进行判断，也就是计算master_repl_offset和slave_repl_offset的差值。如果从库上的slave_repl_offset小于原主库的master_repl_offset，那么，我们就可以认定数据丢失是由数据同步未完成导致的。</p><p>我们在部署主从集群时，也监测了主库上的master_repl_offset，以及从库上的slave_repl_offset。但是，当我们发现数据丢失后，我们检查了新主库升级前的slave_repl_offset，以及原主库的master_repl_offset，它们是一致的，也就是说，这个升级为新主库的从库，在升级时已经和原主库的数据保持一致了。那么，为什么还会出现客户端发送的数据丢失呢？</p><p>分析到这里，我们的第一个设想就被推翻了。这时，我们想到，所有的数据操作都是从客户端发送给Redis实例的，那么，是不是可以从客户端操作日志中发现问题呢？紧接着，我们就把目光转到了客户端。</p><h3>第二步：排查客户端的操作日志，发现脑裂现象</h3><p>在排查客户端的操作日志时，我们发现，在主从切换后的一段时间内，有一个客户端仍然在和原主库通信，并没有和升级的新主库进行交互。这就相当于主从集群中同时有了两个主库。根据这个迹象，我们就想到了在分布式主从集群发生故障时会出现的一个问题：脑裂。</p><p>但是，不同客户端给两个主库发送数据写操作，按道理来说，只会导致新数据会分布在不同的主库上，并不会造成数据丢失。那么，为什么我们的数据仍然丢失了呢？</p><p>到这里，我们的排查思路又一次中断了。不过，在分析问题时，我们一直认为“从原理出发是追本溯源的好方法”。脑裂是发生在主从切换的过程中，我们猜测，肯定是漏掉了主从集群切换过程中的某个环节，所以，我们把研究的焦点投向了主从切换的执行过程。</p><h3>第三步：发现是原主库假故障导致的脑裂</h3><p>我们是采用哨兵机制进行主从切换的，当主从切换发生时，一定是有超过预设数量（quorum配置项）的哨兵实例和主库的心跳都超时了，才会把主库判断为客观下线，然后，哨兵开始执行切换操作。哨兵切换完成后，客户端会和新主库进行通信，发送请求操作。</p><p>但是，在切换过程中，既然客户端仍然和原主库通信，这就表明，<strong>原主库并没有真的发生故障</strong>（例如主库进程挂掉）。我们猜测，主库是由于某些原因无法处理请求，也没有响应哨兵的心跳，才被哨兵错误地判断为客观下线的。结果，在被判断下线之后，原主库又重新开始处理请求了，而此时，哨兵还没有完成主从切换，客户端仍然可以和原主库通信，客户端发送的写操作就会在原主库上写入数据了。</p><p>为了验证原主库只是“假故障”，我们也查看了原主库所在服务器的资源使用监控记录。</p><p>的确，我们看到原主库所在的机器有一段时间的CPU利用率突然特别高，这是我们在机器上部署的一个数据采集程序导致的。因为这个程序基本把机器的CPU都用满了，导致Redis主库无法响应心跳了，在这个期间内，哨兵就把主库判断为客观下线，开始主从切换了。不过，这个数据采集程序很快恢复正常，CPU的使用率也降下来了。此时，原主库又开始正常服务请求了。</p><p>正因为原主库并没有真的发生故障，我们在客户端操作日志中就看到了和原主库的通信记录。等到从库被升级为新主库后，主从集群里就有两个主库了，到这里，我们就把脑裂发生的原因摸清楚了。</p><p>为了帮助你加深理解，我再画一张图，展示一下脑裂的发生过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/13/72/1339e1bfe6d07da8477342ba5fyy9872.jpg?wh=2592*1865\" alt=\"\"></p><p>弄清楚了脑裂发生的原因后，我们又结合主从切换的原理过程进行了分析，很快就找到数据丢失的原因了。</p><h2>为什么脑裂会导致数据丢失？</h2><p>主从切换后，从库一旦升级为新主库，哨兵就会让原主库执行slave of命令，和新主库重新进行全量同步。而在全量同步执行的最后阶段，原主库需要清空本地的数据，加载新主库发送的RDB文件，这样一来，原主库在主从切换期间保存的新写数据就丢失了。</p><p>下面这张图直观地展示了原主库数据丢失的过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/95/66/959240fa59c2bb9f5ddb7df4b318af66.jpg?wh=2671*1872\" alt=\"\"></p><p>到这里，我们就完全弄明白了这个问题的发生过程和原因。</p><p>在主从切换的过程中，如果原主库只是“假故障”，它会触发哨兵启动主从切换，一旦等它从假故障中恢复后，又开始处理请求，这样一来，就会和新主库同时存在，形成脑裂。等到哨兵让原主库和新主库做全量同步后，原主库在切换期间保存的数据就丢失了。</p><p>看到这里，你肯定会很关心，我们该怎么应对脑裂造成的数据丢失问题呢？</p><h2>如何应对脑裂问题？</h2><p>刚刚说了，主从集群中的数据丢失事件，归根结底是因为发生了脑裂。所以，我们必须要找到应对脑裂问题的策略。</p><p>既然问题是出在原主库发生假故障后仍然能接收请求上，我们就开始在主从集群机制的配置项中查找是否有限制主库接收请求的设置。</p><p>通过查找，我们发现，Redis已经提供了两个配置项来限制主库的请求处理，分别是min-slaves-to-write和min-slaves-max-lag。</p><ul>\n<li>min-slaves-to-write：这个配置项设置了主库能进行数据同步的最少从库数量；</li>\n<li>min-slaves-max-lag：这个配置项设置了主从库间进行数据复制时，从库给主库发送ACK消息的最大延迟（以秒为单位）。</li>\n</ul><p>有了这两个配置项后，我们就可以轻松地应对脑裂问题了。具体咋做呢？</p><p>我们可以把min-slaves-to-write和min-slaves-max-lag这两个配置项搭配起来使用，分别给它们设置一定的阈值，假设为N和T。这两个配置项组合后的要求是，主库连接的从库中至少有N个从库，和主库进行数据复制时的ACK消息延迟不能超过T秒，否则，主库就不会再接收客户端的请求了。</p><p>即使原主库是假故障，它在假故障期间也无法响应哨兵心跳，也不能和从库进行同步，自然也就无法和从库进行ACK确认了。这样一来，min-slaves-to-write和min-slaves-max-lag的组合要求就无法得到满足，原主库就会被限制接收客户端请求，客户端也就不能在原主库中写入新数据了。</p><p>等到新主库上线时，就只有新主库能接收和处理客户端请求，此时，新写的数据会被直接写到新主库中。而原主库会被哨兵降为从库，即使它的数据被清空了，也不会有新数据丢失。</p><p>我再来给你举个例子。</p><p>假设我们将min-slaves-to-write设置为1，把min-slaves-max-lag设置为12s，把哨兵的down-after-milliseconds设置为10s，主库因为某些原因卡住了15s，导致哨兵判断主库客观下线，开始进行主从切换。同时，因为原主库卡住了15s，没有一个从库能和原主库在12s内进行数据复制，原主库也无法接收客户端请求了。这样一来，主从切换完成后，也只有新主库能接收请求，不会发生脑裂，也就不会发生数据丢失的问题了。</p><h2>小结</h2><p>这节课，我们学习了主从切换时可能遇到的脑裂问题。脑裂是指在主从集群中，同时有两个主库都能接收写请求。在Redis的主从切换过程中，如果发生了脑裂，客户端数据就会写入到原主库，如果原主库被降为从库，这些新写入的数据就丢失了。</p><p>脑裂发生的原因主要是原主库发生了假故障，我们来总结下假故障的两个原因。</p><ol>\n<li>和主库部署在同一台服务器上的其他程序临时占用了大量资源（例如CPU资源），导致主库资源使用受限，短时间内无法响应心跳。其它程序不再使用资源时，主库又恢复正常。</li>\n<li>主库自身遇到了阻塞的情况，例如，处理bigkey或是发生内存swap（你可以复习下<a href=\"https://time.geekbang.org/column/article/287819\">第19讲</a>中总结的导致实例阻塞的原因），短时间内无法响应心跳，等主库阻塞解除后，又恢复正常的请求处理了。</li>\n</ol><p>为了应对脑裂，你可以在主从集群部署时，通过合理地配置参数min-slaves-to-write和min-slaves-max-lag，来预防脑裂的发生。</p><p>在实际应用中，可能会因为网络暂时拥塞导致从库暂时和主库的ACK消息超时。在这种情况下，并不是主库假故障，我们也不用禁止主库接收请求。</p><p>所以，我给你的建议是，假设从库有K个，可以将min-slaves-to-write设置为K/2+1（如果K等于1，就设为1），将min-slaves-max-lag设置为十几秒（例如10～20s），在这个配置下，如果有一半以上的从库和主库进行的ACK消息延迟超过十几秒，我们就禁止主库接收客户端写请求。</p><p>这样一来，我们可以避免脑裂带来数据丢失的情况，而且，也不会因为只有少数几个从库因为网络阻塞连不上主库，就禁止主库接收请求，增加了系统的鲁棒性。</p><h2>每课一问</h2><p>按照惯例，我给你提个小问题，假设我们将min-slaves-to-write设置为1，min-slaves-max-lag设置为15s，哨兵的down-after-milliseconds设置为10s，哨兵主从切换需要5s。主库因为某些原因卡住了12s，此时，还会发生脑裂吗？主从切换完成后，数据会丢失吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得今天的内容对你有所帮助，也欢迎你分享给你的朋友或同事。我们下节课见。</p>","neighbors":{"left":{"article_title":"32 | Redis主从同步与故障切换，有哪些坑？","id":303247},"right":{"article_title":"34 | 第23~33讲课后思考题答案及常见问题答疑","id":304145}},"comments":[{"had_liked":false,"id":258425,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1604421741,"is_pvip":true,"discussion_count":21,"race_medal":0,"score":"1092526114925","product_id":100056701,"comment_content":"假设我们将 min-slaves-to-write 设置为 1，min-slaves-max-lag 设置为 15s，哨兵的 down-after-milliseconds 设置为 10s，哨兵主从切换需要 5s。主库因为某些原因卡住了 12s，此时，还会发生脑裂吗？主从切换完成后，数据会丢失吗？<br><br>主库卡住 12s，达到了哨兵设定的切换阈值，所以哨兵会触发主从切换。但哨兵切换的时间是 5s，也就是说哨兵还未切换完成，主库就会从阻塞状态中恢复回来，而且也没有触发 min-slaves-max-lag 阈值，所以主库在哨兵切换剩下的 3s 内，依旧可以接收客户端的写操作，如果这些写操作还未同步到从库，哨兵就把从库提升为主库了，那么此时也会出现脑裂的情况，之后旧主库降级为从库，重新同步新主库的数据，新主库也会发生数据丢失。<br><br>由此也可以看出，即使 Redis 配置了 min-slaves-to-write 和 min-slaves-max-lag，当脑裂发生时，还是无法严格保证数据不丢失，它只能是尽量减少数据的丢失。<br><br>其实在这种情况下，新主库之所以会发生数据丢失，是因为旧主库从阻塞中恢复过来后，收到的写请求还没同步到从库，从库就被哨兵提升为主库了。如果哨兵在提升从库为新主库前，主库及时把数据同步到从库了，那么从库提升为主库后，也不会发生数据丢失。但这种临界点的情况还是有发生的可能性，因为 Redis 本身不保证主从同步的强一致。<br><br>还有一种发生脑裂的情况，就是网络分区：主库和客户端、哨兵和从库被分割成了 2 个网络，主库和客户端处在一个网络中，从库和哨兵在另一个网络中，此时哨兵也会发起主从切换，出现 2 个主库的情况，而且客户端依旧可以向旧主库写入数据。等网络恢复后，主库降级为从库，新主库丢失了这期间写操作的数据。<br><br>脑裂产生问题的本质原因是，Redis 主从集群内部没有通过共识算法，来维护多个节点数据的强一致性。它不像 Zookeeper 那样，每次写请求必须大多数节点写成功后才认为成功。当脑裂发生时，Zookeeper 主节点被孤立，此时无法写入大多数节点，写请求会直接返回失败，因此它可以保证集群数据的一致性。<br><br>另外关于 min-slaves-to-write，有一点也需要注意：如果只有 1 个从库，当把 min-slaves-to-write 设置为 1 时，在运维时需要小心一些，当日常对从库做维护时，例如更换从库的实例，需要先添加新的从库，再移除旧的从库才可以，或者使用 config set 修改 min-slaves-to-write 为 0 再做操作，否则会导致主库拒绝写，影响到业务。","like_count":255,"discussions":[{"author":{"id":1133919,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4d/5f/835a9d46.jpg","nickname":"信念","note":"","ucode":"A2F35A4CDD937E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408835,"discussion_content":"Min-slave-max-lag和down-after-milliseconds设置成一样的值是不是就可以了，在准备开始切换的时候，就不让主库接受命令了，这样做可以吗？求高手指点","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635330184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1736462,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/7f/0e/e3a8dbd9.jpg","nickname":"Liujun","note":"","ucode":"3DB1F3CA57B5B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1133919,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4d/5f/835a9d46.jpg","nickname":"信念","note":"","ucode":"A2F35A4CDD937E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412964,"discussion_content":"通常设置为：min-slave-max-lag <= down-after-milliseconds","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636342108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":408835,"ip_address":""},"score":412964,"extra":""},{"author":{"id":2898098,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/38/b2/f1d51239.jpg","nickname":"会说话的流氓","note":"","ucode":"649FD336CE9BE3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1736462,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/7f/0e/e3a8dbd9.jpg","nickname":"Liujun","note":"","ucode":"3DB1F3CA57B5B3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560984,"discussion_content":"我也是这么觉得","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649507246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":412964,"ip_address":""},"score":560984,"extra":""}]},{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322427,"discussion_content":"理解一致，无法做到绝对的数据不丢失，嘿嘿","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604741903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553746,"discussion_content":"精彩！细致入微","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646047669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2900973,"avatar":"","nickname":"Geek_064e72","note":"","ucode":"D627BACE46C37C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550068,"discussion_content":"redis之所以快，其中之一就是各种临界条件并没有被处理，所以还是将redis看作一个缓存吧，敏感数据就不要存放在redis了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644374544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2348024,"avatar":"","nickname":"Geek_c3bf02","note":"","ucode":"97C6848DFCA2A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334211,"discussion_content":"大佬们打扰了，网络分区产生的脑裂 不太明白 可以细讲一点吗 谢谢谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607766773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1253597,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/dd/82d8eff2.jpg","nickname":"Mine","note":"","ucode":"85C3A3117FD9CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2348024,"avatar":"","nickname":"Geek_c3bf02","note":"","ucode":"97C6848DFCA2A0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335593,"discussion_content":"我也有这个疑问，主和客户端一个网络分区，从与哨兵集群一个网络分区，这么说的话，主是没法与从进行通信的，自然是无法满足至少有 N 个从库，和主库进行数据复制时的 ACK 消息延迟不能超过 T 秒这个条件，此时的主库应该是会拒绝客户端的写入请求的呀🤔","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608227339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334211,"ip_address":""},"score":335593,"extra":""},{"author":{"id":1204168,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5f/c8/13aa8aa9.jpg","nickname":"night","note":"","ucode":"03B3C955092C03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2348024,"avatar":"","nickname":"Geek_c3bf02","note":"","ucode":"97C6848DFCA2A0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350074,"discussion_content":"一个非常实际的例子：一个集群中的多个redis 节点在不同机房，机房间专线断了","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1613699889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334211,"ip_address":""},"score":350074,"extra":""},{"author":{"id":2049478,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/45/c6/ba5176a6.jpg","nickname":"从不卖萌","note":"","ucode":"E9B7B1C8FAFE0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2348024,"avatar":"","nickname":"Geek_c3bf02","note":"","ucode":"97C6848DFCA2A0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353036,"discussion_content":"我理解是，不同的网络分区，可能会有延迟导致的哨兵误以为原主库挂了。比如A分区的主库因为网络延迟，被半数以上哨兵判定为挂了，那就会重新进行选主，选主完成，则B分区的从库提升为主库，这时候原主库延迟好了，此时会产生脑裂。其本质就是原主库的假死，造成了哨兵重新选主。感觉跟小说一样..","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614956812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334211,"ip_address":""},"score":353036,"extra":""}]},{"author":{"id":1229254,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c1/c6/1456274a.jpg","nickname":"麦呆小石头","note":"","ucode":"1F21C9FBE2057C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331936,"discussion_content":"哨兵机制不就是raft 么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607008108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1229254,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c1/c6/1456274a.jpg","nickname":"麦呆小石头","note":"","ucode":"1F21C9FBE2057C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331948,"discussion_content":"主从是主从，哨兵是哨兵。主从不是强一致的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607009906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331936,"ip_address":""},"score":331948,"extra":""},{"author":{"id":1513825,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/61/119cbde2.jpg","nickname":"Dolly","note":"","ucode":"CC74978F393055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1229254,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c1/c6/1456274a.jpg","nickname":"麦呆小石头","note":"","ucode":"1F21C9FBE2057C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338603,"discussion_content":"哨兵那个raft对写入没做什么限制，换成hbase那种机制有强一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609321462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331936,"ip_address":""},"score":338603,"extra":""}]},{"author":{"id":2179830,"avatar":"","nickname":"Geek_f00f74","note":"","ucode":"7A0E89CB0AF499","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325188,"discussion_content":"redis的哨兵机制，不是要求超过一半的哨兵认为主库宕机，才能进行主从切换嘛？这种可以保证，网络分区时，不会出现两个主库呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605251135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1013669,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/77/a5/c5ae871d.jpg","nickname":"zenk","note":"","ucode":"B235D5EBCF49BC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2179830,"avatar":"","nickname":"Geek_f00f74","note":"","ucode":"7A0E89CB0AF499","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331491,"discussion_content":"我也这么认为","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606885385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325188,"ip_address":""},"score":331491,"extra":""},{"author":{"id":1239350,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e9/36/f62471c5.jpg","nickname":"不诉离殇","note":"","ucode":"4F7BB1220ECED7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2179830,"avatar":"","nickname":"Geek_f00f74","note":"","ucode":"7A0E89CB0AF499","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335490,"discussion_content":"原主库卡死的时候 超过半数的哨兵会认为主库卡死，然后开始切换操作。但是在切换完成的期间， 如果原主库恢复，并且某个客户端也能继续向原主库写数据，这种情况就会出现两个主库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608204580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325188,"ip_address":""},"score":335490,"extra":""},{"author":{"id":1253597,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/dd/82d8eff2.jpg","nickname":"Mine","note":"","ucode":"85C3A3117FD9CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2179830,"avatar":"","nickname":"Geek_f00f74","note":"","ucode":"7A0E89CB0AF499","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335592,"discussion_content":"哨兵和主库已经处在两个不同的网络分区中，哨兵集群自然能否去主库进行连接了呀，此时主库被判断为客观下线，触发主从切换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608227127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325188,"ip_address":""},"score":335592,"extra":""}]},{"author":{"id":1140276,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/34/0508d9e4.jpg","nickname":"u","note":"","ucode":"88FA7BA089807C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321322,"discussion_content":"第12s旧主库恢复，第15s主从切换完成，应该是不会同时存在两个主库的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604564543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2268992,"avatar":"","nickname":"婷","note":"","ucode":"8D60459FEFD44B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1140276,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/34/0508d9e4.jpg","nickname":"u","note":"","ucode":"88FA7BA089807C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322896,"discussion_content":"但是原主库在12s-15s之间可能接受了写命令，这些数据可能丢失。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1604839593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":321322,"ip_address":""},"score":322896,"extra":""},{"author":{"id":1227107,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b9/63/a3b11794.jpg","nickname":"麦抠","note":"","ucode":"875DEA26F38BAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2268992,"avatar":"","nickname":"婷","note":"","ucode":"8D60459FEFD44B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546809,"discussion_content":"问题时12s时哨兵已经开始了主从切换，这时候原主库如果知道已经开始了切换，是否就不会继续接收新请求？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642429464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":322896,"ip_address":""},"score":546809,"extra":""}]}]},{"had_liked":false,"id":267041,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1607579886,"is_pvip":false,"replies":[{"id":"98130","content":"结合CAP进行分析，赞！<br><br>Redis本身不支持强一致性，因为保证强一致性的代价太大，从CAP角度看，就是放弃C，选择A和P。<br><br>min-slaves-to-write 和 min-slaves-max-lag的设置，是为了避免主从数据不一致程度加重。两个参数起作用时，相当于对主库做降级，放弃了A，选择C和P。<br><br>","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1609172132,"ip_address":"","comment_id":267041,"utype":1}],"discussion_count":1,"race_medal":0,"score":"276485486830","product_id":100056701,"comment_content":"穿插使用 CAP 理论来分析一下课程的内容：<br>1. redis 集群允许脑裂存在，其实是一种可用性高的特征，但不保证数据一直。<br>2. redis 通过设置两个参数，一定程度上其实是在降低可用性，以提供数据一致性。<br>3. 为什么愿意降低可用性？因为那部分的数据会因为主从切换而丢失，所以宁愿不可用。","like_count":65,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511492,"discussion_content":"结合CAP进行分析，赞！\n\nRedis本身不支持强一致性，因为保证强一致性的代价太大，从CAP角度看，就是放弃C，选择A和P。\n\nmin-slaves-to-write 和 min-slaves-max-lag的设置，是为了避免主从数据不一致程度加重。两个参数起作用时，相当于对主库做降级，放弃了A，选择C和P。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609172132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258448,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1604451025,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"57439025873","product_id":100056701,"comment_content":"课后问题：仍然可能会发生数据丢失。究其原因是redis内部没有共识算法保证数据同步，写数据的时候只是写入主库即可返回成功，数据同步到从库是通过异步处理的。","like_count":13,"discussions":[{"author":{"id":1513825,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/61/119cbde2.jpg","nickname":"Dolly","note":"","ucode":"CC74978F393055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338591,"discussion_content":"确实，没有共识算法的组群模式，怎么搞都有一致性问题。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609319570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258481,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1604457060,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"44554130020","product_id":100056701,"comment_content":"最欣赏的是排查分析问题的过程。","like_count":11},{"had_liked":false,"id":258491,"user_name":"snailshen","can_delete":false,"product_type":"c1","uid":1436839,"ip_address":"","ucode":"C4875C476649B1","user_header":"https://static001.geekbang.org/account/avatar/00/15/ec/a7/7d44c655.jpg","comment_is_top":false,"comment_ctime":1604460448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23079296928","product_id":100056701,"comment_content":"老师您好，防止脑裂我认为有2点需要注意：<br>1可以考虑把多个sentinel节点部署到不同的机房，减少由于网络原因导致的误判。<br>2.redis master主节点主机，避免高负载，部署时留有一些冗余<br><br>关于min-slaves-to-write，min-slaves-max-lag这两个配置，主要是解决主从同步数据一致性问题的，尽量减少主从同步的数据不一致，我觉得不能从根本上通过这两个参数解决脑裂。比如master和slave的网络很好，那么这两个参数失效，如果这个时候3个sentinel节点的到master的网络都异常并且这些节点到slave网络良好，那么一样会触发主从切换，造成脑裂。我是这样理解的，希望老师指正！","like_count":6},{"had_liked":false,"id":269224,"user_name":"我很迪奥","can_delete":false,"product_type":"c1","uid":2062003,"ip_address":"","ucode":"D5CBE87C1264C1","user_header":"","comment_is_top":false,"comment_ctime":1608561044,"is_pvip":false,"discussion_count":11,"race_medal":0,"score":"14493462932","product_id":100056701,"comment_content":"不太明白为什么需要引入min-slaves-to-write，min-slaves-max-lag这两个参数来避免脑裂，为什么不在哨兵认为主库客观下线的时候，就禁止主库的写操作。","like_count":4,"discussions":[{"author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371866,"discussion_content":"哨兵认为客观下线，此时哨兵和主库是断连了，怎么禁止主库写操作呢","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1620029318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962899,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/35/d3/8de43dd5.jpg","nickname":"Breeze","note":"","ucode":"8B6711F5B9D112","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564551,"discussion_content":"哨兵选主成功后才通知客户端切换主库，是因为哨兵选主也不是百分之百成功，如果选主前通知主库下线，那么选主失败的话，可能会导致整个存储无法写入。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650276949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297635,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo7R9LibMTe6CF9sVIcZUee5xCVEAxiava7CUb37V3ic6eFYuWBgFelDqeA0wekG2ibA3HFic94PYJHWlA/132","nickname":"山里小龙","note":"","ucode":"4ADA02F1ED59EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406263,"discussion_content":"主都无法响应ACK了，它还怎么响应你的禁止主写操作请求呢?","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634733202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1519415,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/dr34H3hOMVsibL0XV1iaBWFiaTnYssX8sNjmJDpiaBUVv2X39nFzDjNpe288cKkZfH3P9sVRxZ1lzYZEcRR3vJNYtA/132","nickname":"Benson_Geek","note":"","ucode":"D95B5C2BA09961","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1297635,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo7R9LibMTe6CF9sVIcZUee5xCVEAxiava7CUb37V3ic6eFYuWBgFelDqeA0wekG2ibA3HFic94PYJHWlA/132","nickname":"山里小龙","note":"","ucode":"4ADA02F1ED59EA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":415128,"discussion_content":"通知客户端旧主库下线不就行了？这样客户端直接就不向旧的写数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636991151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":406263,"ip_address":""},"score":415128,"extra":""}]},{"author":{"id":1811277,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a3/4d/59390ba9.jpg","nickname":"排骨","note":"","ucode":"A413CF46211E1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587162,"discussion_content":"可用性就降低了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662861280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531966,"discussion_content":"我觉得也是为了尽量保证更大的可用性。因为哨兵判断出主库断联开始选主操作，如果在选主完成之前就禁止原主库写入，就会丢失掉切主库这段时间的系统可用性。反之如果再切换成功后再通知客户端写入新的主库，对可用性影响会小一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637484297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1389314,"avatar":"https://static001.geekbang.org/account/avatar/00/15/33/02/83f47bf9.jpg","nickname":"流沙","note":"","ucode":"6153686D1C34B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385362,"discussion_content":"感觉是在一致性和可用性之间权衡吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627014241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028941,"avatar":"","nickname":"Geek1254","note":"","ucode":"BC2F7756A0676D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379888,"discussion_content":"或者在哨兵认为主库客观下线后，通知到客户端主库下线","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624205008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113737,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","nickname":"xuanyuan","note":"","ucode":"1EC79B9372868F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374827,"discussion_content":"可以通知客户端不要写主库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621384472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738455,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/d7/bfd9e42a.jpg","nickname":"轨迹","note":"","ucode":"6C9619A0B60CDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360533,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616469905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254423,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/17/a8db1ff7.jpg","nickname":"李团结","note":"","ucode":"23831A96515E2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357361,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615794034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258560,"user_name":"与君共勉","can_delete":false,"product_type":"c1","uid":1763046,"ip_address":"","ucode":"1FB5EBFCF510A1","user_header":"","comment_is_top":false,"comment_ctime":1604483089,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14489384977","product_id":100056701,"comment_content":"min-slaves-max-lag是不是一般要设置成比down-after-milliseconds小的值最好？","like_count":3,"discussions":[{"author":{"id":2027435,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/ef/ab/ea3488c8.jpg","nickname":"Bijiasuo","note":"","ucode":"6DB63A899D184C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543677,"discussion_content":"是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641266592,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286471,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1617333516,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"10207268108","product_id":100056701,"comment_content":"其实我不太关心脑裂，但是我对于发现数据丢失之后的故障排查思路比较感兴趣。<br><br>1. 确认数据同步是否有问题，检查主从库复制进度差值（master_repl_offset 和 slave_repl_offset）<br>2. 排查客户端日志，发现脑裂<br>3. 发现原主库假故障导致脑裂<br><br>利用 min-slaves-to-write 和 min-slaves-max-lag 两个配置项搭配使用，可以避免脑裂。参考文中的例子，min-slaves-to-write 设置为 1，就是说只要有一个从库无法在 min-slaves-max-lag 的时间内发送代表主从复制完成的 ACK 消息，原主库就不能再接收客户端请求了。<br><br>假设从库有 K 个，那么 min-slaves-to-write 就设置为 K&#47;2+1，其实超过半数的从库，再结合哨兵机制的 quorum，就可以避免脑裂。<br><br>对于课后题，按照题目的条件，min-slaves-to-write 设为 1，min-slaves-max-lag 设为 15s，哨兵 down-after-milliseconds 设置为 10s，哨兵主从切换 5s，主库卡住 12s，我觉的可能不会发生脑裂。<br><br>主库卡住 12s，哨兵已经判定原主库下线了，而因为 min-slave-to-write 和 min-slaves-max-lag 的设置，只有超过 15s，才会拒绝原主库接受客户端请求，也就是说从第 12s 到 15s 之间，原主库可以接受客户端请求，而 15s 后，主从切换完成，新主库开始接收客户端请求，而原主库在 12s 后接收的请求可以同步到新主库。<br><br>看了课代表的答案，其实我也纠结，原主库从 12s 到 15s 接收到的请求能否同步到新主库。<br><br>课代表对于只有一个从库，且设置了 min-slave-to-write 为 1 的时候，运维操作注意事项的提醒很有价值。","like_count":3},{"had_liked":false,"id":279362,"user_name":"Geek_3d51a3","can_delete":false,"product_type":"c1","uid":2306090,"ip_address":"","ucode":"4BEFF3CA6CCE50","user_header":"","comment_is_top":false,"comment_ctime":1613730810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10203665402","product_id":100056701,"comment_content":"redis执行slave of之后，就变成了只读实例，写入会报错","like_count":2},{"had_liked":false,"id":258868,"user_name":"Geek_d1eece","can_delete":false,"product_type":"c1","uid":1728504,"ip_address":"","ucode":"BEFAA7A93E6653","user_header":"","comment_is_top":false,"comment_ctime":1604570858,"is_pvip":false,"replies":[{"id":"94190","content":"PPT哈～","user_name":"编辑回复","user_name_real":"孟朝阳","uid":"1576654","ctime":1604574273,"ip_address":"","comment_id":258868,"utype":2}],"discussion_count":1,"race_medal":0,"score":"10194505450","product_id":100056701,"comment_content":"老师用的画图工具叫什么？","like_count":2,"discussions":[{"author":{"id":1576654,"avatar":"https://static001.geekbang.org/account/avatar/00/18/0e/ce/9c96fa35.jpg","nickname":"客行","note":"","ucode":"FF508FF1346F1A","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508773,"discussion_content":"PPT哈～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604574273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258775,"user_name":"叶子。","can_delete":false,"product_type":"c1","uid":1393004,"ip_address":"","ucode":"3EF2CC36F0D09A","user_header":"https://static001.geekbang.org/account/avatar/00/15/41/6c/687c5dfb.jpg","comment_is_top":false,"comment_ctime":1604553681,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10194488273","product_id":100056701,"comment_content":"老师可否讲讲 Cluster模式下的脑裂？","like_count":2,"discussions":[{"author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371867,"discussion_content":"切片没有脑裂问题吧，数据已经分片了，不会去做数据同步，而且本身每个分片都可以是主节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620029434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1389314,"avatar":"https://static001.geekbang.org/account/avatar/00/15/33/02/83f47bf9.jpg","nickname":"流沙","note":"","ucode":"6153686D1C34B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385364,"discussion_content":"集群模式下也要有从节点才能保证高可用啊，所以应该也有脑裂问题吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627014391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":371867,"ip_address":""},"score":385364,"extra":""}]}]},{"had_liked":false,"id":318680,"user_name":"信念","can_delete":false,"product_type":"c1","uid":1133919,"ip_address":"","ucode":"A2F35A4CDD937E","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/5f/835a9d46.jpg","comment_is_top":false,"comment_ctime":1635389718,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5930357014","product_id":100056701,"comment_content":"Min-slave-max-lag和down-after-milliseconds设置成一样的值是不是就可以了，在准备开始切换的时候，就不让主库接受命令了，这样做可以吗？","like_count":1,"discussions":[{"author":{"id":1159645,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b1/dd/c814190f.jpg","nickname":"巴子小","note":"","ucode":"1C3D35AEC235BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560615,"discussion_content":"以下情况还是无法避免：旧主节点和从节点的通信恢复，但主从切换还未完成，旧主节点又会开始接受写命令，主从切换完成，旧主节点成为从节点后，主从期间产生的数据丢失。\n个人认为，只有旧mater恢复时，主从切换完成了，数据才不会丢失","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649404709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282610,"user_name":"天空","can_delete":false,"product_type":"c1","uid":1038338,"ip_address":"","ucode":"96C04E8D3C32B7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/02/c749e2c7.jpg","comment_is_top":false,"comment_ctime":1615339580,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5910306876","product_id":100056701,"comment_content":"很奇怪啊，为什么已经发生了切换，原主库还提供服务","like_count":1,"discussions":[{"author":{"id":1386315,"avatar":"https://static001.geekbang.org/account/avatar/00/15/27/4b/e49c82d0.jpg","nickname":"Rover","note":"","ucode":"7575EC91F45B99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378341,"discussion_content":"同问。哨兵模式下客户端连接的不是哨兵节点信息嘛，既然发生了切换，那么通过哨兵节点获得的主库应该是切换后的，为何客户端还会写到原主库？\n哪位老哥解释下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623166233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1357315,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoVRER40LhyAhBK6YgPYibRzWARkc3efUquib4j9BPru4y8FfvXK2sBPbXej9314pZdfdcxb07RcjZw/132","nickname":"酷酷的嵩","note":"","ucode":"EF249E96F42491","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1386315,"avatar":"https://static001.geekbang.org/account/avatar/00/15/27/4b/e49c82d0.jpg","nickname":"Rover","note":"","ucode":"7575EC91F45B99","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390630,"discussion_content":"完成切换后，才会通知客户端切主库。在切换期间，原主库假死，连接的上原主库的客户端正常写入，但是这部分数据再完成切换后丢失。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629946073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":378341,"ip_address":""},"score":390630,"extra":""}]}]},{"had_liked":false,"id":267726,"user_name":"小袁","can_delete":false,"product_type":"c1","uid":1811495,"ip_address":"","ucode":"3F5D8721F577D9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","comment_is_top":false,"comment_ctime":1607907030,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5902874326","product_id":100056701,"comment_content":"如果这么容易引起脑裂（仅仅是参数配置不合理），redis有做一些基础的检查检测这些问题么？要去翻客户端日志再结合原理发现问题，这本身就不够友好了","like_count":1,"discussions":[{"author":{"id":1317999,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","nickname":"嘉木","note":"","ucode":"AF4877693782C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404928,"discussion_content":"哨兵配置和redis配置是分开的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634463231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321681,"user_name":"Benson_Geek","can_delete":false,"product_type":"c1","uid":1519415,"ip_address":"","ucode":"D95B5C2BA09961","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/dr34H3hOMVsibL0XV1iaBWFiaTnYssX8sNjmJDpiaBUVv2X39nFzDjNpe288cKkZfH3P9sVRxZ1lzYZEcRR3vJNYtA/132","comment_is_top":false,"comment_ctime":1636990586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636990586","product_id":100056701,"comment_content":"一路被误导过来，还以为从标记了主是客观下线后，旧主就不能再接受数据了。。。<br>原来这时候旧主还可以接受数据啊。。。","like_count":0},{"had_liked":false,"id":313774,"user_name":"对方正在输入。。。","can_delete":false,"product_type":"c1","uid":1179298,"ip_address":"","ucode":"7B0DEB4D9B43D2","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/a2/5252a278.jpg","comment_is_top":false,"comment_ctime":1632661074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632661074","product_id":100056701,"comment_content":"zk选举时的令牌，就会保证不会发生爆裂","like_count":0},{"had_liked":false,"id":310430,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1630654142,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1630654142","product_id":100056701,"comment_content":"老师您好，我回头看的时候，结合第8课，产生了一个问题，切换主库完成后，如果客户端订阅了哨兵的新主库切换事件的话，是不是就不会发生脑裂了？或者应该是主库切换有一个过程，这个过程完成之前，还是会发生数据的丢失？","like_count":0,"discussions":[{"author":{"id":1317999,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","nickname":"嘉木","note":"","ucode":"AF4877693782C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404931,"discussion_content":"down-after-milliseconds是主观下线判定时间，\n需要经过  主观下线判定->客观下线判定->选举这一次的哨兵leader->哨兵leader选出合适的slave->哨兵leader给slave发送slaveof no one->发布+switch-master主从切换消息，\n整个流程需要一定时间，期间如果原主接收了客户端的写命令，且还未同步到原从，就会丢数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634463713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309729,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1630315018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630315018","product_id":100056701,"comment_content":"这是必然的,因为,假设10s后哨兵达成了客观下线,那么会进行主从切换的操作,但是这个时候,主库还没达到min-slaves-max-lag时间,这时候还是可以接受客户端请求的,故可能导致了脑裂问题","like_count":0},{"had_liked":false,"id":296807,"user_name":"Rover","can_delete":false,"product_type":"c1","uid":1386315,"ip_address":"","ucode":"7575EC91F45B99","user_header":"https://static001.geekbang.org/account/avatar/00/15/27/4b/e49c82d0.jpg","comment_is_top":false,"comment_ctime":1623166246,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1623166246","product_id":100056701,"comment_content":"哨兵模式下客户端连接的不是哨兵节点信息嘛，既然发生了切换，那么通过哨兵节点获得的主库应该是切换后的，为何客户端还会写到原主库？<br>哪位老哥解释下","like_count":0,"discussions":[{"author":{"id":2346917,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cf/a5/5224b297.jpg","nickname":"cafe babe","note":"","ucode":"6205DF67AD86F8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581754,"discussion_content":"还没有切换完成时，客户端向原来的主库写数据。当然切换完成之后，哨兵会通知客户端。可是没切换完成写入的数据就会丢失。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658973764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269384,"user_name":"yzz","can_delete":false,"product_type":"c1","uid":2350551,"ip_address":"","ucode":"AD5FB7E893B495","user_header":"","comment_is_top":false,"comment_ctime":1608629322,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1608629322","product_id":100056701,"comment_content":"老师您好，针对您分析的脑裂的产生原因，我有一个疑问：您在前面分析问题的过程中排除了主从库之间复制进度不一致的问题，既然主从库之间是完全同步的，那主库重新变为可用之后写入的数据应该已经同步到从库了，那么经过主从切换后，数据是不是也不应该丢呢？","like_count":0,"discussions":[{"author":{"id":1762191,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e3/8f/77b5a753.jpg","nickname":"好好学习","note":"","ucode":"9D44D9530D9A1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341796,"discussion_content":"老师的图上标注的是：新主库上线后，旧的主库沦为从库，会删除本地数据，全量同步新主库的数据，这样在主从切换期间，旧主库接受到客户端的写请求的这些数据就丢失了，且这些数据没有被同步到从库时因为当时已经被哨兵集群认定为客观下线了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610525886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2253496,"avatar":"","nickname":"Geek_3d87cb","note":"","ucode":"F09334D60C3BC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339929,"discussion_content":"这个时候哨兵已经进行主从切换了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609843737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259524,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1604741542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604741542","product_id":100056701,"comment_content":"生产环境更为复杂，Redis跨机器多实例部署，网络状况抖动时，应该还是会出现脑裂问题，感觉无法完全避免啊","like_count":0},{"had_liked":false,"id":259045,"user_name":"唐朝首都","can_delete":false,"product_type":"c1","uid":1081233,"ip_address":"","ucode":"F72655AE0AE4CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/91/962eba1a.jpg","comment_is_top":false,"comment_ctime":1604623363,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604623363","product_id":100056701,"comment_content":"Redis无法完全避免脑裂的产生，因为其不保证主从的强一致，所以必然有产生脑裂的可能性。","like_count":0}]}