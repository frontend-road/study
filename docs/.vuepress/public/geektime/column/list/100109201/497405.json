{"id":497405,"title":"02｜3KU法则：如何找出最优自动化实施截面？","content":"<p>你好，我是柳胜。</p><p>上一讲我们提出了自动化测试ROI模型，在回归测试中的应用。回归测试是一个笼统的概念，单元测试、接口测试以及UI测试里都有回归测试，甚至性能测试也已经成为回归测试的一部分。</p><p>今天我们要关注一个具体场景，给你一个软件系统，作为自动化测试人员，你怎么找出测试截面，制定自动化测试方案？这些事可能你都做过，觉得并不稀奇，但既然我们已经学习了ROI思维，今天要再加上一个小目标，<strong>制定策略，能够让这个自动化测试设计获得尽可能大的ROI</strong>。换句话说，能干还不够，还要干得好，既要马儿跑，又要马儿少吃草。</p><p>有挑战不？那就跟我进入这一讲的学习，一起找到最佳策略吧。</p><h2>测试ROI金字塔</h2><p>在测试设计领域，经常提到的方法是分层。具体就是给定一个系统，结构上划分三个层级，单元在最小圈；服务包含多个单元，在中圈；而系统又包含多个服务，是外部的最大圈。结构图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/77/c3/7713a7081ac2723a2cfc35d3277b21c3.jpg?wh=1920x1050\" alt=\"图片\" title=\"软件结构圈图\"></p><p>相应地，我们的测试结构是在代码层做单元测试，服务层做接口测试，系统层做UI功能测试。</p><p>在实践中，这三种测试该怎么组合安排呢？迈克·科恩在2009年他的新书《敏捷成功之道》中首次提出了测试金字塔模型。单元测试自动化在金字塔底部，接口测试自动化在中部，而UI测试自动化在金字塔顶部。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/bd/68/bdyy34691cc7a36c8e50f13e3bbaca68.jpg?wh=1920x1050\" alt=\"图片\" title=\"分层测试金字塔\"></p><p>迈克·科恩讲到自动化测试工作量配比时，认为应该按照层面积分配。也就是说，单元测试案例的数目应该多于接口测试案例数目，接口测试案例数目应该多于UI测试自动化测试案例数目。</p><p>后来，金字塔模型又被业界发展，赋予了不同的测试策略，比如自底向上执行速度减慢，自顶向下业务属性减弱，技术属性增强。</p><p>但迈克·科恩没有解释，为什么各层工作量配比要按照测试金字塔分布？按照软件结构图，系统在最大圈，测试案例应该最多，而到了自动化测试金字塔，UI自动化测试案例却最少；单元测试在小圈，测试案例应该最少，但到了自动化测试金字塔，单元测试案例却最多。</p><p>为什么是金字塔？要是不去理解规律背后这个“为什么”，你就用不好这个规律。上一讲我们知道了“ROI其实是自动化测试的隐式命脉”，现在我们就利用ROI思维，分析一下测试金字塔规律。</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/00/cd34280bc70b3633e696a7ba16f9e300.jpg?wh=1920x868\" alt=\"图片\" title=\"ROI公式\"></p><p>下面，我们分别看看每层的ROI。单元测试可以在开发人员每次code commit触发运行，回归频率高；接口测试在每轮集成测试运行，回归频率中；UI自动化测试在用户验收测试，回归频率低。</p><p>按照ROI模型，我们可以得出3种类型自动化测试的ROI排序，如下表：</p><p><img src=\"https://static001.geekbang.org/resource/image/71/08/713a743c26347d08d561d5a77ab27608.jpg?wh=3363x1379\" alt=\"\"></p><p>对照测试金字塔不难发现，实际上三类自动化测试的ROI是自底向上由高到低的。</p><p><img src=\"https://static001.geekbang.org/resource/image/7e/af/7ebe91f53e1fc7a84e53a26d68c4baaf.jpg?wh=1920x1050\" alt=\"图片\" title=\"分层测试ROI金字塔\"></p><p>按照第一讲得出的规律“自动化测试顺序从ROI高到低”，我们优先投入精力做ROI最高的单元测试，再做ROI中的接口测试，最后完成UI测试。</p><p>现在就可以轻松解释迈克·科恩的金字塔了，因为ROI存在差异，所以按照高ROI大投入，中ROI中投入，低ROI小投入，工作量比例呈金字塔分布，底层面积最大，顶层面积最小。发现没？<strong>根源在于ROI，金字塔是表现出来的形态而已</strong>。</p><p>好，到这里，总结一下。各种软件理论学派，大致可以分为两种，一种是理论基础，讲的是做什么，比如软件测试定义、软件过程，另外一种是实践经验，讲的是该怎么做，比如金字塔模型。</p><p>实践和理论很大的不同就是在现实商业中，我们不可能完全按照理想来工作，而是要加入很多制约因素，其中最大的制约就是钱。明白这个道理，你就会知道为什么ROI是根源，你也会知道怎么能够在工作中做出业绩了，不是耍两个工具，忽悠一下领导就算成功，而是认认真真地去思考，踏踏实实地去提高ROI，直到边际效应ROI无法提高为止。</p><h2>寻找最优ROI策略</h2><p>刚才说了分层测试和各层ROI，业界也很认可这种分层理论，但实际落地时却存在问题：一批人做UI测试自动化，另外一批人去做接口测试，然后开发人员做单元测试。三路人马忙得不亦乐乎，都说自己贡献大，等到bug发生了泄漏到生产环境，又开始甩锅。</p><h3>分层测试为啥会“内卷”</h3><p>很明显，这是一个内卷的场景，让我们结合例子具体看看内卷发生在哪里？</p><p>以一个Web登录操作为例，用户在UI上输入用户名和密码，点击“登录”按钮。Selenium UI 自动化会这样实现：</p><pre><code class=\"language-plain\">@Test\npublic void login() {\n  WebDriver driver=new ChromeDriver();\n  driver.manage().window().maximize();\n  //打开页面\n  driver.get(\"https://www.example.com/users/sign_in\");\n  WebElement username=driver.findElement(By.id(\"user_email_Login\"));\n  WebElement password=driver.findElement(By.id(\"user_password\"));\n  WebElement login=driver.findElement(By.name(\"login\"));\n  //输入用户名\n  username.sendKeys(\"liusheng@example.com\");\n  //输入密码\n  password.sendKeys(\"123456\");\n  //点击登录按钮\n  login.click();\n}\n</code></pre><p>上面UI的操作被Web服务转化成Rest请求，进入到API网关，是这样的：</p><pre><code class=\"language-plain\">curl --location --request POST 'http://auth.example.com/auth/realms/Test/users' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--header 'username=liusheng@example.com' \\\n--header 'password=123456'\n</code></pre><p>在单元上执行的则是这样的代码：</p><pre><code class=\"language-plain\">public Future&lt;ResponseData&gt; login(String userName, String password) {\n    //入口参数检验\n    if (StringUtil.isBlank(userName)||StringUtil.isBlank(password)){\n      return new AsyncResult&lt;&gt;(ResponseData.error(\"账号密码不能为空\"));\n    }\n    //查询用户是否存在\n    List&lt;User&gt; userList = baseMapper.getUserInfo(userName);\n    if (CollectionUtils.isEmpty(userList)){\n        return new AsyncResult&lt;&gt;(ResponseData.error(\"账号不存在\"));\n    }\n    //验证账号密码是否正确\n    User user = userList.get(0);\n    String requestMd5 = SaltUtil.md5Encrypt(password, user.getSalt());\n    String dbMd5 = user.getPassword();\n    if (dbMd5 == null || !dbMd5.equalsIgnoreCase(requestMd5)) {\n        return new AsyncResult&lt;&gt;(ResponseData.error(\"账户密码不正确\"));\n    }\n    //生成 access token，并返回\n    String token = JwtTokenUtil.generateToken(user);\n    return new (ResponseData.success(token));\n}\n</code></pre><p>可以看到，一个请求，从浏览器页面发起，进入API网关，再传递到服务里的Login函数，经过了UI测试、API测试和单元测试三个测试截面。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/ce/0a1af39ca343083b14fe1472c5610cce.jpg?wh=1920x1045\" alt=\"图片\" title=\"三个测试截面示意图\"></p><p>三个测试截面测的是一个请求在不同层面上的形态，那么每一个截面都可以测试全部的案例，也可以测试部分的案例。就像3个人负责1个项目一样，如果没有经过事先的协调和安排，3个人可能做了重复的事情，造成浪费，也可能存在一件事3个人都没干，形成测试盲区。</p><h3>需求/策略矩阵</h3><p>这种“内卷”是不是一个问题？可能你会说没问题，各层独立测试能够加强质量保障。说这话的底气在于测试上的投入充足，不计内卷成本。实际上，在DevOps风行的今天，趋势是追求效果和效率。所以，在资源有限的条件下，我们需要在整体上看待分层测试的最优ROI。</p><p>咱们先看看测试需求是什么，用 <a href=\"https://zh.wikipedia.org/wiki/FURPS\">FURPS模型</a>来理一下需求。FURPS是用5个维度来描述一个软件的功能需求，FURPS这个单词对应着每个需求的英文首字母：</p><ul>\n<li>F=Function 功能</li>\n<li>U=Usability 易用性</li>\n<li>R=Reliability 可靠性</li>\n<li>P=Performance 性能</li>\n<li>S=Supportability 可支持性</li>\n</ul><p>把测试需求和测试类型组合在一起，就整合了后面这个矩阵表格：</p><p><img src=\"https://static001.geekbang.org/resource/image/44/21/443b6845a599a19d27704a3f89b44b21.jpg?wh=4000x1410\" alt=\"\" title=\"3KU测试矩阵\"></p><p>结合表格，可以看到UI测试、接口测试和单元测试每个截面的测试能力。</p><ul>\n<li>在UI层面上，功能性最强，所有测试需求都可以做。这个可以理解，因为软件本身就是满足用户需求，没有一个需求不可以从用户层面感受到。如果真的存在一个需求，用户却无法体验到，那根据<a href=\"https://zh.wikipedia.org/wiki/%E5%A5%A5%E5%8D%A1%E5%A7%86%E5%89%83%E5%88%80\">奥卡姆剃须刀原理</a>，这种用户无法体验到的需求就是无效的。</li>\n<li>接口层面上，功能性减弱，技术性增强。</li>\n<li>单元层面上，技术性最强，功能性主要体现在数据的处理，算法逻辑上。</li>\n</ul><h3>3KU整体策略</h3><p>好，有了需求/策略矩阵后，结合上面讲到的自动化测试ROI金字塔，我们的整体最优ROI策略就呼之欲出了。什么是整体最优ROI呢？</p><p>有3个Key（关键因素）：</p><ul>\n<li><strong>U</strong>seful:  每个测试需求都是有效的；</li>\n<li><strong>U</strong>ltimate:  每个测试需求的验证都在优先寻找自动化ROI高的层面去实现，如果不可行，按照ROI高到低回退，直到UI层；</li>\n<li><strong>U</strong>nique: 每个层面上验证的测试需求都和别的层面都不是重复的。<br>\n这样分配的工作，既不重复，又没遗漏，还遵循了ROI的原则。我管它叫<strong>3KU原则。</strong></li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/7e/af/7ebe91f53e1fc7a84e53a26d68c4baaf.jpg?wh=1920x1050\" alt=\"图片\" title=\"3KU测试金字塔\"></p><p>3KU策略该怎么执行呢?按照3KU策略，我们把表格里的测试需求，对照下面这三个问题，按顺序检查一遍：</p><p>1.能在单元测试验证么？<br>\n2.能在接口测试验证么？<br>\n3.能在UI测试验证么？</p><p>这样检查以后，就能得出各个需求的自动化实现截面了。</p><p>UI测试关注功能场景测试，易用性测试和可执行性测试；而接口测试关注不同数据的循环，接口的性能和错误恢复能力；单元测试关注算法的正确性和性能。</p><p>恭喜你看到这里，最后就是我们收割成果的环节了。我们又得出了一个满足3KU原则的自动化测试实施金字塔，各层有自己的关注点，又在整体上实现了互相配合补偿。</p><p><img src=\"https://static001.geekbang.org/resource/image/95/a7/950bdb1892c70d0598cd0657e2ca92a7.jpg?wh=1920x1064\" alt=\"图片\" title=\"3KU测试金字塔\"></p><p>在3KU测试金字塔下，每一个测试需求都会选择最大的ROI测试截面，通过这样的安排，实现了整体最优ROI的目标。对不对？</p><h2>小结</h2><p>这一讲，我们从ROI角度分析了一下分层测试的原理和在实践中的应用。先入为主地，分层理论上的分层测试的特性，必然会造成重叠和错失。这给测试从业者带来了挑战。但挑战也是机会，如何解决这个问题？</p><p>这就需要我们遵循回归到效益的原则，思考怎么用最少的资源干最多的事，能达到这个效果，就是好的实践。因此，我们提出了分层但协调实现整体最优ROI的解决方案，3KU测试矩阵和3KU测试金字塔。</p><p><img src=\"https://static001.geekbang.org/resource/image/44/21/443b6845a599a19d27704a3f89b44b21.jpg?wh=4000x1410\" alt=\"\" title=\"3KU测试矩阵\"></p><p><img src=\"https://static001.geekbang.org/resource/image/95/a7/950bdb1892c70d0598cd0657e2ca92a7.jpg?wh=1920x1064\" alt=\"图片\" title=\"3KU测试金字塔\"></p><p>沿着这个思路，各层做好自己具有优势能力的测试需求，比起全部需求系于端到端的测试上，更有效率和效益，<strong>分层是追求整体ROI的结果</strong>。之后的课程里我们还会反复提到ROI，最后你也会不由感叹，ROI是背后无形的大手，大道无形，无处不在。</p><h2>思考题</h2><p>1 软件大师马丁·福勒曾经说过：“在微服务时代，分层测试不再呈现金字塔形状。”这是为什么？试着用ROI来解释一下。</p><p>2 学完今天的内容，如果你是测试主管，你希望你的团队是全栈（一个人负责一个模块的所有层面测试），还是精细分工（一个人负责所有模块的一个层面测试）？有什么优劣?</p><p>欢迎你在留言区跟我交流互动，如果这一讲对你有启发，也推荐你分享给身边更多同事和朋友。</p>","neighbors":{"left":{"article_title":"01｜ROI价值内核：自动化测试的价值可以量化么？","id":496857},"right":{"article_title":"03｜工具选择：什么工具框架值得用？","id":498458}},"comments":[{"had_liked":false,"id":339718,"user_name":"lisa","can_delete":false,"product_type":"c1","uid":1508049,"ip_address":"","ucode":"62CB6333CBF7B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLw3jpao45frZibQIAicWBfc7ofgrm5gJLiaFQSj5u2DDvkjy3ia5goicJLJlgVtZ0HryiaXb2VqpTSQT5Q/132","comment_is_top":false,"comment_ctime":1648308596,"is_pvip":false,"replies":[{"id":"124217","content":"很有思想！也很有经验！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648434623,"ip_address":"","comment_id":339718,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27418112372","product_id":100109201,"comment_content":"微服务本身基于RPC调用，服务拆分的力度比较小，所有从ROI的模型来讲，微服务的代码每次commit以及merge&#47;pull request会进行API测试，这样API测试的运行次数n会加大，分子变大。而相对于单元测试来讲，API测试的建设成本d和维护成本m相对于单元测试会变小很多，导致分母变小。所以在微服务架构下，投资API测试的ROI明显更高，所以就会出现棱形更由于金字塔的情况出现。<br><br>但是说实话，我觉得说到底还是模块拆分力度变小带来的变化，拆分的越小，单元测试和API测试的界限就会变得模糊。实际上API测试的运行的成本还是比较高的，他需要初始化数据以及初始化泳道环境，并且稳定性远远低于单元测试，带来的维护成本其实还挺高的。所以我个人还是比较赞成金字塔模型，即便是在微服务的架构下。","like_count":7,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558677,"discussion_content":"很有思想！也很有经验！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648434623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339303,"user_name":"D_w","can_delete":false,"product_type":"c1","uid":1518271,"ip_address":"","ucode":"394FA90C41A32E","user_header":"https://static001.geekbang.org/account/avatar/00/17/2a/bf/14c3ac8a.jpg","comment_is_top":false,"comment_ctime":1648028646,"is_pvip":false,"replies":[{"id":"124075","content":"我在甲骨文和其他公司经历过几轮调整，每一轮过后，专职系统测试人员就会减少一部分，这个背后的逻辑就是测试下沉，单元测试和API测试做强，有了这个基础后，端到端测试做轻巧。被变化，不如准备好，拥抱变化！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648090002,"ip_address":"","comment_id":339303,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14532930534","product_id":100109201,"comment_content":"一点浅见：<br>问题1：在微服务架构下，测试层级会扩充，新增契约测试，组件测试，端到端的测试等等，并且在实际测试任务中一般开发负责的单元测试占比不高，最终成纺锤形。<br>问题2：如果团队成员能力都比较强，我偏向全栈，如果能力不均衡还是得考虑精细分工。我觉得全栈的测试效果能更好","like_count":3,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558092,"discussion_content":"我在甲骨文和其他公司经历过几轮调整，每一轮过后，专职系统测试人员就会减少一部分，这个背后的逻辑就是测试下沉，单元测试和API测试做强，有了这个基础后，端到端测试做轻巧。被变化，不如准备好，拥抱变化！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648090002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339252,"user_name":"太匆匆","can_delete":false,"product_type":"c1","uid":1628299,"ip_address":"","ucode":"2F3F273CB65F5D","user_header":"https://static001.geekbang.org/account/avatar/00/18/d8/8b/d81769bf.jpg","comment_is_top":false,"comment_ctime":1648010897,"is_pvip":false,"replies":[{"id":"123989","content":"你有这个问号，已经很有悟性了！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648021839,"ip_address":"","comment_id":339252,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14532912785","product_id":100109201,"comment_content":"我们很多人都喜欢引用金字塔模型，但是似乎没有多少人认真思考过金字塔的模型是怎么来的，有无理论依据。这点得向老师学习，拒绝拿来主义","like_count":3,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557911,"discussion_content":"你有这个问号，已经很有悟性了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648021839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347285,"user_name":"lisa","can_delete":false,"product_type":"c1","uid":1508049,"ip_address":"","ucode":"62CB6333CBF7B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLw3jpao45frZibQIAicWBfc7ofgrm5gJLiaFQSj5u2DDvkjy3ia5goicJLJlgVtZ0HryiaXb2VqpTSQT5Q/132","comment_is_top":false,"comment_ctime":1653901912,"is_pvip":false,"replies":[{"id":"126680","content":"赞👍👍👍！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1654068522,"ip_address":"","comment_id":347285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10243836504","product_id":100109201,"comment_content":"最近重新思考了一下这个问题，其实我们没有必要去选择是采用金字塔模型还是菱形，而是更多的是基于测试需求去进行ROI分析，放在哪一层ROI最高就选择在哪一层（可能不同的产品形态会不一样）,不用太关注最后会形成什么模型。考虑到目前越往底层的运行成本最低，运行次数最多且最稳定，也就是D和M的时间比较少，大量的测试点会下沉，但是我们同时也要考虑到自动化测试是面向风险，而不是面向代码覆盖率。所以基于风险来看，哪些测试点应该要被设计也存在一个设计评估的过程。最后测试基础设施的完善性以及团队的实际情况也是其中一个重要的考虑因素。总之，最终是一个什么模型是测试点落地的结果，而不是前期的决策依据。","like_count":2,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574457,"discussion_content":"赞👍👍👍！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654068522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349879,"user_name":"随片","can_delete":false,"product_type":"c1","uid":2139020,"ip_address":"","ucode":"1EDA99E17B20C7","user_header":"https://static001.geekbang.org/account/avatar/00/20/a3/8c/23b2464c.jpg","comment_is_top":false,"comment_ctime":1656403435,"is_pvip":true,"replies":[{"id":"127885","content":"谢谢分享！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1658064616,"ip_address":"","comment_id":349879,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1656403435","product_id":100109201,"comment_content":"answer：<br>1、微服务时代，每个系统都是单独的应用，整体性相对是减弱的，独立性提高后，也许该应用在UI层是不体现测试点的。所以金字塔是不符合微服务时代的。<br>2、要考虑团队规模和项目复杂程度。规模小，那么一人单挑吧，反之，多人负责。项目负责程度与规模类似。一人：优势--编程、维护代码，个人思路更清晰；劣势--时间成本，交接成本，代码模块粘性。多人：时间短，分工明确；劣势--人工成本，测试功能点重叠？","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580284,"discussion_content":"谢谢分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658064616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347069,"user_name":"一默","can_delete":false,"product_type":"c1","uid":1163974,"ip_address":"","ucode":"F23A6E42DFD0C4","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/c6/88d0c7b2.jpg","comment_is_top":false,"comment_ctime":1653664431,"is_pvip":false,"replies":[{"id":"126673","content":"理论上会是这样。但在实践中<br>1.  单元测试只会关注部分领域逻辑强的代码的测试<br>2.  我看到很多单元测试，都是追求代码覆盖率，并不会一个方法一个测试案例。在需要测试的地方测得不够，在不需要测的地方又花费了精力。<br>从测试整体来看，单元测试捕捉到Bug，比起在生产环境捕捉到Bug，节省了至少10倍左右的成本。它的ROI还是最高的。当然单元测试也要聪明地做，这些我都在第二模块，第四模块都会讲到！欢迎关注！<br><br>","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1654066452,"ip_address":"","comment_id":347069,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653664431","product_id":100109201,"comment_content":"老师请教一下，单元测试无法手动测试，但是因为单元测试应该会到方法级别，所以是不是应该测试用例数也会最多，开发时间和维护时间应该也是比较多的吧。相应的ROI成本也会变低吧。<br>谢谢老师指教。<br>","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574447,"discussion_content":"理论上会是这样。但在实践中\n1.  单元测试只会关注部分领域逻辑强的代码的测试\n2.  我看到很多单元测试，都是追求代码覆盖率，并不会一个方法一个测试案例。在需要测试的地方测得不够，在不需要测的地方又花费了精力。\n从测试整体来看，单元测试捕捉到Bug，比起在生产环境捕捉到Bug，节省了至少10倍左右的成本。它的ROI还是最高的。当然单元测试也要聪明地做，这些我都在第二模块，第四模块都会讲到！欢迎关注！\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654066452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346933,"user_name":"志杰","can_delete":false,"product_type":"c1","uid":1386528,"ip_address":"","ucode":"787F1FFCD18CBB","user_header":"https://static001.geekbang.org/account/avatar/00/15/28/20/f60dc417.jpg","comment_is_top":false,"comment_ctime":1653546470,"is_pvip":true,"replies":[{"id":"126672","content":"看出来你很有经验！谢谢分享！在微服务体系下，单体应用被切分成很多块，接口测试和单元测试的界限也有靠近的趋势。","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1654065848,"ip_address":"","comment_id":346933,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653546470","product_id":100109201,"comment_content":"我目前所参与的微服务，偏向于接口方面，从ROI的模型来讲，接口运行的次数会增加，相对于开发而言，成本会变得小很多；目前项目中没有单元测试，投资接口测试的ROI明显会变高，纺锤型更贴近目前的测试方向。微服务框架下的接口测试，我个人感觉：基于数据，性能，可靠性的要求更贴近目前一个主流趋势。把握当下主流，并剖析测试未来方向，眼界还是不能缺少，学以致用为主，老师所讲的内容让我少走了一些弯路，再此十分感谢；最后，做好一件事情，精力是有限的，对一个事物的理解和打磨需要持续化的时间。","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574446,"discussion_content":"看出来你很有经验！谢谢分享！在微服务体系下，单体应用被切分成很多块，接口测试和单元测试的界限也有靠近的趋势。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654065849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344534,"user_name":"萧瑟","can_delete":false,"product_type":"c1","uid":1633901,"ip_address":"","ucode":"0C182BA4EF650C","user_header":"https://static001.geekbang.org/account/avatar/00/18/ee/6d/1e715544.jpg","comment_is_top":false,"comment_ctime":1651635839,"is_pvip":false,"replies":[{"id":"125828","content":"很好的思考！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1651745424,"ip_address":"","comment_id":344534,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651635839","product_id":100109201,"comment_content":"我是这么理解的：在微服务架构的系统中，一个请求进入系统，可能会经过多个服务获取数据，最后整合输出。也就是说一个 UI 测试 会对应多个接口测试，而一个接口测试可能会对应多个不同服务之间的接口调用，单元测试更注重的是单个服务的逻辑、算法。因此接口测试因为运行次数 N 而变得比单元测试的 ROI 更高，测试金字塔也就变成了中间凸出两头小的棒槌形状。","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570367,"discussion_content":"很好的思考！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651745424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342910,"user_name":"Geek_d00d65","can_delete":false,"product_type":"c1","uid":2572973,"ip_address":"","ucode":"64D5574B05C176","user_header":"","comment_is_top":false,"comment_ctime":1650530936,"is_pvip":true,"replies":[{"id":"125275","content":"精细分工是很多公司的现状，不但是测试，也包括开发！全栈是一个全方位的转变，思维意识上，框架成熟度上，团队责任能力上。需要一步步来，一般是开发先转全栈，测试再转全栈。","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1650549865,"ip_address":"","comment_id":342910,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650530936","product_id":100109201,"comment_content":"是选择全栈还是精细分工，我觉得要依赖于团队成员的能力，如果团队成员一个模块的所有层面测试，效率和时间都比精细分工要好，那我会选择全栈，反之，则会选择精细分工","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565862,"discussion_content":"精细分工是很多公司的现状，不但是测试，也包括开发！全栈是一个全方位的转变，思维意识上，框架成熟度上，团队责任能力上。需要一步步来，一般是开发先转全栈，测试再转全栈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650549866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340630,"user_name":"大饼夹一切啊","can_delete":false,"product_type":"c1","uid":2253582,"ip_address":"","ucode":"29CC32B8E33BE3","user_header":"https://static001.geekbang.org/account/avatar/00/22/63/0e/2885d9bd.jpg","comment_is_top":false,"comment_ctime":1648980208,"is_pvip":false,"replies":[{"id":"124654","content":"非常好的分享！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1649252775,"ip_address":"","comment_id":340630,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648980208","product_id":100109201,"comment_content":"1. 由于微服务是按照轻量级的API进行通信的，应在保持UI测试占比不变的情况下，提升接口测试占比，减少单元测试占比，虽然微服务架构降低了单体架构的复杂度，同时也提升了多个服务的维护成本，若将重点放在单元测试，则会大幅增加开发成本、维护成本。<br><br>2. 首先表达观点，个人更倾向于精细分工。<br>优势：（1）对人员技术栈要求相对于全栈低，降低学习成本。 （2）专人专责，避免了个个模块负责人之间的“甩锅”现象。<br>劣势：（1）由于单人负责所有模块一个层面测试，需要及时对测试代码进行review，并且初期要做好相关的书写规范。（2）单人负责所有模块单层的测试，增加了项目风险，若相关负责人离职，则会对项目交付产生影响。<br>当然，如果产品、项目生命周期够长的情况下，还是需要进行人员的功能轮换，取长补短，提升测试团队整体能力，以保证产品质量。","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560290,"discussion_content":"非常好的分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649252775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339795,"user_name":"Even","can_delete":false,"product_type":"c1","uid":1147948,"ip_address":"","ucode":"C3555903EE9525","user_header":"https://static001.geekbang.org/account/avatar/00/11/84/2c/1b0926b4.jpg","comment_is_top":false,"comment_ctime":1648388917,"is_pvip":true,"replies":[{"id":"124216","content":"是的！也需要让你的团队的开发人员来学习这门课，因为单元测试的价值被低估了！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648434544,"ip_address":"","comment_id":339795,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648388917","product_id":100109201,"comment_content":"测试测试金字塔，每一层做自己最擅长的事情，roi综合起来才会最高","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558676,"discussion_content":"是的！也需要让你的团队的开发人员来学习这门课，因为单元测试的价值被低估了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648434544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339719,"user_name":"lisa","can_delete":false,"product_type":"c1","uid":1508049,"ip_address":"","ucode":"62CB6333CBF7B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLw3jpao45frZibQIAicWBfc7ofgrm5gJLiaFQSj5u2DDvkjy3ia5goicJLJlgVtZ0HryiaXb2VqpTSQT5Q/132","comment_is_top":false,"comment_ctime":1648308687,"is_pvip":false,"replies":[{"id":"124170","content":"你能从成本的角度看待问题了，大大的👍！我是用了好几年才悟到这些！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648373035,"ip_address":"","comment_id":339719,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648308687","product_id":100109201,"comment_content":"我希望是最重视全栈的模式，因为对技术的理解成本远远小于对业务的理解成本，也就是一个人把它培训成全栈可能花上一个月就行，但是让这个人充分理解业务以及业务的架构是一件比较长期的事情","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558542,"discussion_content":"你能从成本的角度看待问题了，大大的👍！我是用了好几年才悟到这些！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648373035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339677,"user_name":"swordman","can_delete":false,"product_type":"c1","uid":1002980,"ip_address":"","ucode":"F6719BD5E20B37","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/e4/94b543c3.jpg","comment_is_top":false,"comment_ctime":1648287477,"is_pvip":false,"replies":[{"id":"124169","content":"你是自动化测试有经验的老兵！非常好的经验和收获体会，谢谢分享！可能有一个Typo，“ROI最高的UI自动化测试”我猜你想说的是”ROI最低的UI自动化测试“，对吧。😄","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648372886,"ip_address":"","comment_id":339677,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1648287477","product_id":100109201,"comment_content":"说说我这几年的项目经历：<br>1. Android移动端：全部使用ROI最高的UI自动化测试，开发和维护成本较高，虽然和CI流水线进行了集成，但由于测试用例数量的缺乏，及稳定性不足，并未达到预期的结果；<br>2. 微信小程序：由于业务的实时性需求，小程序前端承担了大部分的业务和算法处理。因此采用ROI最高的单元测试 + 基本场景的手工UI测试，再加上和代码提交流水线结合，取得了很好的效果；<br>3. C++多组件项目：正准备着手进行的项目。由于涉及多组件协同工作，拟采用接口测试 + 基本功能UI自动化测试。正愁着如何验证测试策略的正确性呢，老师的课程就来了，给了我一个清晰的指导思路，谢谢！","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558541,"discussion_content":"你是自动化测试有经验的老兵！非常好的经验和收获体会，谢谢分享！可能有一个Typo，“ROI最高的UI自动化测试”我猜你想说的是”ROI最低的UI自动化测试“，对吧。😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648372887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002980,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4d/e4/94b543c3.jpg","nickname":"swordman","note":"","ucode":"F6719BD5E20B37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559225,"discussion_content":"是的，我写错了，更正一下，是ROI最低UI自动化测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648649244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339358,"user_name":"IT蜗壳-Tango","can_delete":false,"product_type":"c1","uid":1000612,"ip_address":"","ucode":"92330844C1EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/a4/7a45d979.jpg","comment_is_top":false,"comment_ctime":1648043728,"is_pvip":true,"replies":[{"id":"124069","content":"是的！ 国内不重视单元测试，可以先把ROI思维用在UI和API测试上，逐步推动单元测试。最终一定会行得通，因为没有哪个老板不喜欢ROI。","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648088965,"ip_address":"","comment_id":339358,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648043728","product_id":100109201,"comment_content":"思考题：<br>我选择全栈，因为对于特定模块来说，我可以从单元测试，API，UI三个层面去验证这个模块的性能以及可用性。<br>问题：<br>目前的自动化测试感觉很少会接触到单元测试层面，尤其是黑合测试的场景。是不是主要将UI, API的ROI考虑的全面一些就可以了啊。","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558085,"discussion_content":"是的！ 国内不重视单元测试，可以先把ROI思维用在UI和API测试上，逐步推动单元测试。最终一定会行得通，因为没有哪个老板不喜欢ROI。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648088965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339294,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1648025288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648025288","product_id":100109201,"comment_content":"2. 精细分工","like_count":0},{"had_liked":false,"id":339293,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1648025246,"is_pvip":false,"replies":[{"id":"124068","content":"是的，这是一个general的规则，可以根据软件项目实际情况进行调整。","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648088443,"ip_address":"","comment_id":339293,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648025246","product_id":100109201,"comment_content":"UI 测试关注功能场景测试，易用性测试和可执行性测试；而接口测试关注不同数据的循环，接口的性能和错误恢复能力；单元测试关注算法的正确性和性能。","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558082,"discussion_content":"是的，这是一个general的规则，可以根据软件项目实际情况进行调整。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648088443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339254,"user_name":"太匆匆","can_delete":false,"product_type":"c1","uid":1628299,"ip_address":"","ucode":"2F3F273CB65F5D","user_header":"https://static001.geekbang.org/account/avatar/00/18/d8/8b/d81769bf.jpg","comment_is_top":false,"comment_ctime":1648011104,"is_pvip":false,"replies":[{"id":"123987","content":"精细分工的优势是专而快，劣势是协作沟通的成本。也要相信团队，不妨让他们放手干一下！","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648021369,"ip_address":"","comment_id":339254,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1648011104","product_id":100109201,"comment_content":"问题2，我仍偏向于精细分工，一人负责所有会出现效率问题，同时个人有其局限性","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557907,"discussion_content":"精细分工的优势是专而快，劣势是协作沟通的成本。也要相信团队，不妨让他们放手干一下！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648021369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2391650,"avatar":"https://static001.geekbang.org/account/avatar/00/24/7e/62/48045bee.jpg","nickname":"Sarah","note":"","ucode":"2B35D90CE51B8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566826,"discussion_content":"更赞同全栈的方式。效率问题是开头时候会遇到的，刚开始接触一个新的东西都会有学习成本，但是从长远的角度看，在一定启动时间后，这个效率问题可以忽略了。\n个人局限这个倒是存在，不过可以从其他的层面来解决，比如团队共同review AC和分层策略","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650770312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339251,"user_name":"清风明月","can_delete":false,"product_type":"c1","uid":1271199,"ip_address":"","ucode":"5EF23458E5869A","user_header":"https://static001.geekbang.org/account/avatar/00/13/65/9f/217346ce.jpg","comment_is_top":false,"comment_ctime":1648009239,"is_pvip":false,"replies":[{"id":"123988","content":"是的，你的UI测试的实践很务实，可惜的是单元测试这么高的ROI测试层面。","user_name":"作者回复","user_name_real":"编辑","uid":"1877634","ctime":1648021664,"ip_address":"","comment_id":339251,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1648009239","product_id":100109201,"comment_content":"1，我所经历的几个项目，在微服务架构，主要还是接口自动化测试，基本上不做UI自动化测试了（只做少量的app自动化测试），单元测试基本上形同虚设，主要还是做大量的接口测试！<br>2，全栈的测试人员很难招到，而且现在微服务测试人员最好是熟悉所有模块，只测试局部模块意义不大，之前带团队的时候，手下有10多人，基本上大家都负责有自己的项目，所以必须熟悉整个项目，必须会做接口自动化测试！所以我还是比较倾向于：一个人负责一个模块的所有层面测试。","like_count":0,"discussions":[{"author":{"id":1877634,"avatar":"","nickname":"sunshinelius","note":"","ucode":"50F35834586E4A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557909,"discussion_content":"是的，你的UI测试的实践很务实，可惜的是单元测试这么高的ROI测试层面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648021664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1488020,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","nickname":"追风筝的人","note":"","ucode":"2993D60F94C396","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557919,"discussion_content":"惟江上之清风，与山间之明月。 是你的id 出处吗？ 来自赤壁赋，还有后赤壁赋","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648024467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}