{"id":509753,"title":"11｜组件实战：如何实现瀑布流？","content":"<p>你好，我是蒋宏伟。</p><p>现在，国内购物 App 的首页大都采用了双列瀑布流的布局，假如你的产品经理也想实现同样的瀑布流效果，你在网上找了很多的 React Native 列表组件，但都满足不了需求，你会怎么办？你会选择改让产品改方案，还是自己再研究研究？</p><p>大概是 2019 年的时候，我们的产品也提了同样的需求，使用 React Native 实现瀑布流效果。当时我们有个同事试了很多方案，比如双 List、多层嵌套 List，性能都很差效果不好，后来我们开会的时候提到了这个问题，我也参与了讨论。</p><p>当时我提出了一种思路：改 RecyclerListView 的源码。我说，RecyclerListView 的布局原理是绝对定位，每个 item 的 x、y 轴坐标是根据传入的 height、width 值算出来的，现在它的布局算法是单列的，我们只要把单列布局算法改成双列布局算法，这件事情应该能成。</p><p>后来我们团队的另一个大牛把它落地实现了，实现了一个 React Native 瀑布流页面。</p><p>在准备写实战案例的时候，我又想起了当初的这个事情。使用瀑布流的业务场景很多，却没有直接能用的开源方案，但它的实现原理其实并不复杂，应该是一个很好的实战案例。于是我就基于 RecyclerListView 最新的版本，又实现了一版。</p><!-- [[[read_end]]] --><p>我今天就和你讲讲，我是如何通过修改 RecyclerListView 组件的源码，实现瀑布流效果的。希望你能通过这次实战，把我们以前学的知识和技巧都用起来。也只有通过实战才能<strong>把知识变成能力</strong>，快和我一起动手试试吧。</p><h2>准备开发调试环境</h2><p>关于 RecyclerListView 的基础用法，我在《List》一讲中已经介绍，它主要是通过列表数据 dataProvider 来驱动列表项的渲染 rowRenderer，并且指定为列表项指定了布局方式 layoutProvider。</p><p>现在，你需要做的是准备开发调试环境。准备开发调试环境永远是第一步，而且现在我们要调试的是放在 node_modeuls 目录下的第三方组件 RecyclerListView，所以现在我们要准备<strong>第三方依赖包的开发调试环境</strong>，这怎么准备呢？</p><p>在 React Native 中，我们是通过 import 导入第三方模块 RecyclerListView 的：</p><pre><code class=\"language-plain\">import {RecyclerListView, DataProvider, LayoutProvider} from 'recyclerlistview';\n</code></pre><p>这段代码的意思是从<code>recyclerlistview</code>模块中导入 RecyclerListView 组件、DataProvider 列表数据类、LayoutProvider 布局方式类。</p><p>那<code>recyclerlistview</code>模块到底在哪呢？通常情况下，该模块是<code>node_modules/recyclerlistview</code>目录下的 <code>index.js</code>文件<code>export</code>导出的模块。不过第三方库，也可以通过<code>package.json</code>中的<code>main</code>字段进行配置。<code>recyclerlistview</code>采用的就是这种配置方法：</p><pre><code class=\"language-plain\">// node_modules/recyclerlistview/package.json\n{\n  \"name\": \"recyclerlistview\",\n  \"main\": \"dist/reactnative/index.js\",\n  ...\n}\n</code></pre><p>你看，在<code>recyclerlistview</code>的<code>package.json</code>文件中，它通过<code>main</code>参数指定了模块路径<code>dist/reactnative/index.js</code>。</p><p>但你再看下 <code>recyclerlistview</code> 的目录：</p><pre><code class=\"language-plain\">node_modules/recyclerlistview/\n├── dist\n│   └── reactnative\n│       ├── core\n│       └── index.js\n├── src\n│   ├── core\n│   └── index.ts\n└── package.json\n</code></pre><p>你会发现，<code>dist</code>目录下放的是编译后的 .js 文件。也就是说，如果我们直接跑项目，只能调试编译后的 .js 文件，不能调试放在 <code>src</code> 目录中的 .ts 源码。</p><p>那怎样才能调试 .ts 的源码文件呢？有一招很简单，修改 <code>recyclerlistview</code> 的导出模块的配置：</p><pre><code class=\"language-plain\">// node_modules/recyclerlistview/package.json\n\n- \"main\": \"dist/reactnative/index.js\"\n+ \"main\": \"src/index.ts\"\n</code></pre><p>你只需把<code>recyclerlistview/package.json</code>的 <code>main</code>参数改为<code>src/index.ts</code>即可，React Native 会在编译时通过 babel 将 .ts、.tsx 文件编译为 .js 文件再执行。</p><p>改完之后，你再重新跑一次<code>yarn start</code> ，会遇到一个报错：</p><pre><code class=\"language-plain\">error: node_modules/recyclerlistview/src/core/RecyclerListView.tsx: \n\n`import debounce = require('lodash.debounce')` is not supported by @babel/plugin-transform-typescript\n\nPlease consider using `import debounce from 'lodash.debounce';` alongside Typescript's --allowSyntheticDefaultImports option.\n\n&gt; 21 | import debounce = require('lodash.debounce');\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre><p>现在我们来分析这个报错信息。你还记得解决具体 BUG 的顺序吗？“一推理”、“二分法”、“三问人”。</p><p>遇到报错先不用着急去网上搜，先看看红屏的报错提示。第一行报错，说的是<code>core/RecyclerListView.tsx</code>文件中有报错。第二行，说的是 <code>@babel/plugin-transform-typescript</code> 插件不支持 <code>import = require()</code> 的导入语法。第三行，直接把建议答案告诉你了，你可以用<code>import from</code>的语法进行导入。第四行，提示了具体是哪行代码报错了。</p><p>你看，这类报错信息都把答案都告诉我们了，我们只要认真读一下就行，我们的“一推理”刚刚开始，就把这个 BUG 解决了，都用不着后面的“二分法”和“三问人”。</p><p>在你把代码跑起来后，还需要准备一下调试工具 Flipper 和 React Native Tool。</p><p>Flipper 调试工具，你只需要下载一下就行，它的功能很强大：</p><p><img src=\"https://static001.geekbang.org/resource/image/e4/d1/e4e1f3a26e124dd4c582342ayy70b7d1.png?wh=1726x3472\" alt=\"图片\"></p><p>这张长截图显示了 Flipper 的功能，从上到下依次是打印日志 Logs、组件树 Components、性能火焰图 Profiler、宿主组件树和布局 Layout、网络请求 Network。它还有一个功能是支持 Hermes 引擎 Debugger，它和浏览器的 Debugger 类似，这里我没有进行截图了。</p><p>现在 RecyclerListView 源码已经跑起来了，调试环境也已经准备完成，接着下一步就是找到控制布局的关键源码。</p><h2>找到关键源码</h2><p>要找到关键源码，我们得先从整体上理解源码。很多人读源码没有方法，不知道从哪里入手，甚至有些程序员从来没有读过别人的源码。其实写代码和读代码，就像写文章和读文章的关系一样，<strong>没有大量的阅读积累，怎<strong><strong>么</strong></strong>能写出好的代码呢？</strong></p><p>理解 RecyclerListView 这类复合组件的源码，我有一个技巧，就是从复合组件 JSX 部分开始切入。</p><p>这时我们能直接观察到的是 UI 视图，以 UI 视图为锚点，去理解 JSX 文件就很容易了。在你了解  JSX 之后，再根据状态 <code>state</code> 和属性<code>props</code>去推断组件的内部逻辑 <code>f</code> ，会容易很多。一个页面，无非也就是由这几个部分组成：</p><pre><code class=\"language-plain\">UI/JSX = f(state, props)\n</code></pre><p>了解了基本方法，现在我们开始分析RecyclerListView组件的源码，请你先<strong>在本地打开</strong> <a href=\"https://github.com/Flipkart/recyclerlistview/blob/master/src/core/RecyclerListView.tsx\">RecyclerListView 的源码文件</a>。下面是我从 RecyclerListView 类组件摘出来的 3 个和 JSX 相关的方法：</p><pre><code class=\"language-plain\">// node_modules/recyclerlistview/src/core/RecyclerListView.tsx\npublic renderCompat() { // 先调用 render 后调用它\n  return (\n    &lt;ScrollComponent&gt;\n      {this._generateRenderStack()}\n    &lt;/ScrollComponent&gt;\n  );    \n}\n\nprivate _generateRenderStack(){\n  for(const key in this.state.renderStack){\n    renderedItems.push(this._renderRowUsingMeta(this.state.renderStack[key]))      \n  }\n  return renderedItems\n}\n\nprivate _renderRowUsingMeta() {return &lt;ViewRenderer/&gt;}\n</code></pre><p>它们分别是：</p><ul>\n<li><code>renderCompat</code> 方法：实际就是类组件的 <code>render</code>方法，它最外层是一个滚动组件<code>ScrollComponent</code> ；</li>\n<li><code>_generateRenderStack</code>方法：循环了状态 <code>state.renderStack</code>，生成了若干个<code>renderedItems</code>；</li>\n<li><code>_renderRowUsingMeta</code> 方法：返回的是具体的<code>renderedItems</code> ，也就是<code>ViewRenderer</code>容器元素。</li>\n</ul><p>当你把 UI 视图和 JSX 部分联系在一起时你就明白了，RecyclerListView 渲染出的 UI 页面，是由一个滚动容器和若干个<code>ViewRenderer</code>容器组成的。</p><p>我们还是回到最基础的 UI 公式：</p><pre><code class=\"language-plain\">UI/JSX = f(state, props)\n</code></pre><p>现在我们已知 <strong>JSX</strong> 是 ScrollView + View，已知 <strong>state</strong> 是用 <code>for...in</code>循环的对象 renderStack，还已知 RecyclerListView 的三个必传 <strong>props</strong>：列表数据 dataProvider(dp)、列表项的布局方法 layoutProvider、列表项的渲染函数 rowRenderer。</p><p>这时虽然你还不知道组件内部逻辑 <code>f</code> 具体是什么，但是你应该已经把握住了函数的“入口”和“出口”，你知道放进去的入参是什么，能够产出的 UI 又是什么。知道了“入口”“出口”的特点后，再从两端往中间推理，理解组件内部逻辑 <code>f</code>就会变得简单很多。</p><p>这时候，你可能会有一些关于内部逻辑<code>f</code>的问题，你或许想问<code>state.renderStack</code>和三个 props 是怎么控制 JSX 的？</p><p>那我们就要再仔细读一下<code>_renderRowUsingMeta</code>中的代码了：</p><pre><code class=\"language-plain\">private _renderRowUsingMeta(itemMeta: RenderStackItem): JSX.Element | null {\n  const dataIndex = itemMeta.dataIndex;\n  const data = this.props.dataProvider.getDataForIndex(dataIndex);\n  const type = this.props.layoutProvider.getLayoutTypeForIndex(dataIndex);\n  return (\n    &lt;ViewRenderer\n      data={data}\n      layoutType={type}\n      index={dataIndex}\n      layoutProvider={this.props.layoutProvider}\n      childRenderer={this.props.rowRenderer}\n    /&gt;\n  );\n}\n</code></pre><p>在这段源码中，我只标记出了 state、props 和 ViewRenderer 三个部分，即便只有这些代码片段，你可以猜出它的大致逻辑。</p><p>状态 <code>state.renderStack[key]</code> 就是 <code>itemMeta</code>，每个 <code>itemMeta</code> 的 <code>dataIndex</code> 是不一样的，通过 <code>dataIndex</code> 从列表数据 dataProvider  和布局方法 layoutProvider 中，选取了对应项的数据 <code>data</code> 和布局类型 <code>type</code> ，并将这些值和列表项的渲染函数 rowRenderer 都赋值给了 <code>ViewRenderer</code>的<code>childRenderer</code>属性。</p><p>读完这段源码片段，你大概能够补全此段代码的内部逻辑<code>f</code>。<code>ViewRenderer</code> 是一个容器，内部装的是你传给它的渲染函数 rowRenderer 方法，并且按照你指定的数据<code>data</code>、类型<code>type</code> 进行渲染。</p><p>因为<code>ViewRenderer</code>是你指定的列表项<code>rowRenderer</code>的父容器，父容器的位置决定了你列表项的位置。这时候，你再读一遍<code>_renderRowUsingMeta</code>的源码：</p><pre><code class=\"language-plain\">  private _renderRowUsingMeta(itemMeta: RenderStackItem): JSX.Element | null {\n    const dataSize = this.props.dataProvider.getSize();\n    const dataIndex = itemMeta.dataIndex;\n    const itemRect = (\n    this._virtualRenderer.getLayoutManager() as LayoutManager\n    ).getLayouts()[dataIndex];\n    return (\n      &lt;ViewRenderer\n        key={key}\n        data={data}\n        x={itemRect.x}\n        y={itemRect.y}\n        layoutType={type}\n        index={dataIndex}\n        layoutProvider={this.props.layoutProvider}\n        onSizeChanged={this._onViewContainerSizeChange}\n        childRenderer={this.props.rowRenderer}\n        height={itemRect.height}\n        width={itemRect.width}\n      /&gt;\n    );\n  }\n</code></pre><p>在这个源码片段中，这些由<code>LayoutManager</code>类的<code>getLayouts</code>方法生成的 x/y/width/height 属性，就是决定你列表项布局方式的关键源码。</p><p>但 <code>getLayouts</code> 到底是什么呢？请你打开 <code>LayoutManager</code> 类的源码：</p><pre><code class=\"language-plain\">// node_modules/recyclerlistview/src/core/layoutmanager/LayoutManager.ts   \n   public getLayouts(): Layout[] {\n        return this._layouts;\n   }\n\n    public relayoutFromIndex(): void {\n        let startX = 0;\n        let startY = 0;\n        let maxBound = 0;\n\n        for () {\n            oldLayout = this._layouts[i];\n            if () {\n                itemDim.height = oldLayout.height;\n                itemDim.width = oldLayout.width;\n                maxBound = 0;\n            }\n            while () {\n                startX = 0;\n                startY += maxBound;\n            }\n\n            maxBound = Math.max(maxBound, itemDim.height);\n            this._layouts.push({ x: startX, y: startY, height: itemDim.height, width: itemDim.width, type: layoutType });\n\n        }\n    }\n</code></pre><p>上述的代码片段是 <code>getLayouts</code> 方法和设置<code>this._layouts</code>的<code>relayoutFromIndex</code>方法。大致扫一眼，你就能明白<code>relayoutFromIndex</code>方法通过一堆计算，计算出了实现单列布局的 x/y/height/width 值，然后把它们作为对象 push 到了 <code>this._layouts</code>。</p><p>而 ViewRenderer 根据 <code>this._layouts</code> 把你的列表项，渲染到了指定的位置上。因此，我们要想实现双列瀑布流布局，就得理解和修改 <code>relayoutFromIndex</code> 方法。</p><h2>修改源码</h2><p>在“找到关键源码”这一步，我们读源码其实只要有宏观上的理解就行了，但要“修改别人源码”就需要更微观上的理解了。</p><p>我说的宏观上理解源码，讲究的是速度，大致理解就行，细节上有点小偏差也不要紧。但微观上理解源码，讲究的是准确，我们要改别人的源码，理解要是不准确，改起来肯定容易出问题。</p><p>在提高理解的准确性上，我是这么做的。首先我会使用断点工具，一行一行地执行代码，并对上下文中的变量进行一些“终极拷问”：“变量从哪来”、“变量用到哪里去”、“变量的意义是什么”，再把自己的理解马上备注起来，不然容易忘。</p><p>在微观理解上，我们也要找到切入点。比如，在理解 <code>relayoutFromIndex</code> 方法时，我找的切入点就是设置列表项的 x/y。设置 x/y 的核心代码如下：</p><pre><code class=\"language-plain\">  public relayoutFromIndex(itemCount: number): void {\n    // 新 item x y 坐标\n    let startX = 0;\n    let startY = 0;\n    // 记录当前一行最高元素的高度\n    let maxBound = 0;\n\n    for (let i = 0; i &lt; itemCount; i++) {\n\n      // 如果当前多个 item 宽度之和超过屏幕宽度就换行\n      while (!this._checkBounds(startX, startY, this._layouts[i])) {\n        // 将实际 x 坐标设置为 0\n        startX = 0;\n        // 将实际 y 坐标设置增加上一行最高 item 的高度\n        startY += maxBound;\n        maxBound = 0;\n      }\n\n      // 设置新的宽高\n      this._layouts.push({ x: startX, y: startY, height: itemDim.height, width: itemDim.width, type: layoutType });\n\n      // 记录当前一行最高 item 的高度\n      maxBound =  Math.max(maxBound, this._layouts[i].height);\n      // 默认情况下：下一个 item 的初始化的 x 坐标\n      startX += itemDim.width;\n    }\n  }\n  private _checkBounds(\n    itemX: number,\n    itemY: number,\n    itemDim: Dimension,\n  ): boolean {\n    return itemX + itemDim.width &lt;= this._window.width;\n  }\n</code></pre><p>虽然我已经把代码精简并写了备注，但理解起来可能还是有点难度，所以我还给你配了单列布局的原理示意图：</p><p><img src=\"https://static001.geekbang.org/resource/image/c0/a8/c03b10ea793948d7f280072a857964a8.png?wh=1920x556\" alt=\"图片\"></p><p>单列布局的原理是什么呢？</p><p>从代码层面看，它对你传入的列表项进行<code>for</code>循环遍历，并通过 <code>_checkBounds</code>方法来判断。如果当前遍历的列表项宽度和当前一列已有列表项的宽度之和，不超过屏幕宽度，也就是<code>itemX + itemDim.width &lt;= this._window.width</code>，那么就跳过 <code>while</code> 循环，直接使用同一行前几个列表项的宽度之和<code>startX += itemDim.width</code> ，作为当前列表项的 x(startX) 坐标。也就是情况一：<strong>宽度足够，放到同一行。</strong></p><p>如果<code>_checkBounds</code>判断，同一行剩余宽度不够了，那么就进入  <code>while</code> 循环，将当前列表项的 x(startX) 坐标设置为 0，y 坐标设置增加上一行最高 item 的高度<code>maxBound</code>。也就是情况二：<strong>宽度不够，放到下一行。</strong></p><p>我还在图中给你画了一个单列布局的例子。第一行 A、B 列表项宽度正好占满整个屏幕宽度，所以列表项 C 得再起一行，其 x 坐标为 0，其 y 坐标为 A 的 y 坐标和 B 的高度 height 之和。列表项 C 横向独占了一行，所以 D、E 就只能放到下一行了。整体上看，RecyclerListView 实现的还是一种单列布局，只不过同一行中可以放置多个列表项。</p><p>理解完 RecyclerListView 的单列布局源码后，接下来就要设计我们自己的双列瀑布流布局了。我给你画了一张瀑布流的示意图：</p><p><img src=\"https://static001.geekbang.org/resource/image/93/9c/938fbe382fc3438c4ee41ed01c8eab9c.png?wh=1920x548\" alt=\"图片\"></p><p>双列瀑布流布局只有两种情况，第一种情况是如果左边已有列表项的高度之和  <code>startLeftY</code> 大于右边已有列表项的高度之和 <code>startRightY</code>，那么下一个列表项就要放右边。第二种情况则刚好相反，我们需要把下一个列表项放在左边。简单来说就是，<strong>左高放右、右高放左。</strong></p><p>我同样给你举了一个例子，你可以对照双列瀑布流布局的图片看一下。起始时左右两边一样高，所以先是左 A，再是右 B。接下来，由于左边比右边高，所以再是右 C，最后是左 D。如果是单列布局，C 应该放在左边，D 应该放在右边，这就是双列瀑布流布局和单列布局不同之处。</p><p>双列瀑布流实现的核心代码如下：</p><pre><code class=\"language-plain\">  public relayoutFromIndex(startIndex: number, itemCount: number): void {\n\n    // 假设: 每个 item 的宽度为 1/2*window.width 两种情况\n    const halfWindowWidth = this._window.width / 2;\n\n    let startLeftY = 0; // 左边所有 item 的高度之和\n    let startRightY = 0; // 右边所有 item 的高度之和\n\n    let startX = 0; // 新增 item 的 X\n    let startY = 0; // 新增 item 的 Y\n\n    for (let i = startIndex; i &lt; itemCount; i++) {\n      itemDim.height = oldLayout.height;\n      itemDim.width = halfWindowWidth;\n\n      // 保证一行中所有的 item 宽度之和不超过屏幕宽度，超过就换行\n      if (startLeftY &gt; startRightY) {\n        startX = halfWindowWidth;\n        startY = startRightY;\n        startRightY += itemDim.height;\n      } else {\n        startX = 0;\n        startY = startLeftY;\n        startLeftY += itemDim.height;\n      }\n\n      // 如果是 item 是新增的，在添加新的 layout\n      this._layouts.push({x: startX, y: startY, height: itemDim.height, width: itemDim.width, type: layoutType,});\n  }\n</code></pre><p>首先，双列瀑布流有一个假设，假设每个列表项的宽度为屏幕的一半。其次，我们还需要记录左边的高度之和<code>startLeftY</code>和右边的高度之和<code>startRightY</code>。在<code>for</code>遍历列表项时，如果左边高 <code>startLeftY &gt; startRightY</code>，那么当前列表项放右边<code>startX = halfWindowWidth</code>，否则当前列表项放左边<code>startX = 0</code>，同时记录最新的左边/右边高度之和。最后把当前列表项 push 到 <code>this._layouts</code> 中。</p><p>将单列布局改为双列瀑布流布局，改动的代码量很少，你可以现在就动手试一试。我也将我改动的代码前后对比图，放在了下面，你可以参考一下：</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/b1/3b0cbcb54e6e06fd52b7fe0d5d1f35b1.png?wh=1920x3413\" alt=\"图片\"></p><h2>保存修改</h2><p>现在，我们来到了最后一步保存修改的源码。</p><p>在修改完 node_modules 中的源码后，如果不进行保存，很有可能就会丢失。并且，有时候我们需要和同事进行合作，同事也需要我们修改后的代码，又或者是在使用上线平台进行打包时，也需要将修改后的 node_modules 源码同步给上线平台一份。本地修改 node_modules 源码后，不保存、不同步肯定会出线上问题。</p><p>怎么把修改好的 node_modules 代码保存呢？有三种思路：</p><p>第一种<strong>直接复制源码</strong>。但复制源码后续想要升级 RecyclerListview 的版本会非常困难，每次升级可能面临的是一次重新改造。</p><p>第二种<strong>在运行时进行修改</strong>。这种方法对源码的侵入性小，但每次升级前我们还是需要手动检查一下的，不然相关代码逻辑有变化，我们的修改就会受到影响。</p><p>我在这次实战中，采用的就是在运行时进行修改的方案。我观察了一下 RecyclerListview 的代码，它的代码风格是面向对象的编程风格，几乎把所有的内部类都暴露出来了。</p><p>但由于它 LayoutManager 类的所有属性是私有属性，我没办法通过继承的方式读取到 LayoutManager 的私有属性。</p><p>因此我复制了 <code>LayoutManager</code> 和 <code>layoutProvider</code> 类，并将其重写为 <code>WaterfallLayoutManager</code> 和 <code>WaterfallLayoutProvider</code>。</p><p>当你的列表是单列布局时，就应该使用<code>layoutProvider</code>类 ，当你的列表是双列瀑布流布局时，就可以使用我创建的<code>WaterfallLayoutProvider</code>类。</p><p>第三种<strong>在编译时修改</strong>。这里利用的是 <code>patch-package</code> 即时修复第三方 npm 包的能力，它的原理是先对你的修改进行保存，然后在你每次安装 npm 包的时候把你原先的修改给注入进去，也就是 patch package。它是侵入式的修改方式，步骤如下：</p><p>在修改完 node_modules 目录下的 RecyclerListview 文件后，你直接运行如下命令：</p><pre><code class=\"language-plain\">$ npx patch-package some-package\n</code></pre><p>这时你修改的代码就会以 patch 文件的形式进行保存，patch 文件的示例代码如下：</p><pre><code class=\"language-plain\">diff --git a/node_modules/recyclerlistview/src/core/layoutmanager/LayoutManager.ts b/node_modules/recyclerlistview/src/core/layoutmanager/LayoutManager.ts\nindex e9454a4..3168330 100644\n\n--- a/node_modules/recyclerlistview/src/core/layoutmanager/LayoutManager.ts\n+++ b/node_modules/recyclerlistview/src/core/layoutmanager/LayoutManager.ts\n\n@@ -95,75 +95,113 @@ export class WrapGridLayoutManager extends LayoutManager {\n         }\n     }\n\n-    public relayoutFromIndex(startIndex: number, itemCount: number): void {\n\n+  // startIndex：从第几个 item 开始有了更新，从这个 item 开始算，目的是为了减少计算量。默认：0\n+  // itemCount: 一共多个 item。\n+  // 以下注释只考虑垂直滚动，水平滚动同理。\n+  public relayoutFromIndex(startIndex: number, itemCount: number): void {\n\n     private _pointDimensionsToRect(itemRect: Layout): void {\n         if (this._isHorizontal) {\n</code></pre><p>那如果别人想用你瀑布流版本的 RecyclerListview 怎么办呢？首先，你需要修改 package.json 文件：</p><pre><code class=\"language-plain\"> // package.json\n \"scripts\": {\n+  \"postinstall\": \"patch-package\"\n }\n</code></pre><p>然后将修改后的 package.json 和前面自动生成的 patch 文件用 Gitlab/GitHub 保存起来。</p><p>这样，你同事下载最新代码，再执行 <code>npm install</code> 或 <code>yarn</code> 命令后，就会自动触发 <code>patch-package</code> 命令。 <code>patch-package</code> 命令会利用你生成的 patch 文件，将官方的 RecyclerListview 修改成你的瀑布流版本的 RecyclerListview。</p><p>一般来说，无论是快速修改第三方组件源码，还是修改 React Native 的 JavaScript 层的源码，我都不建议使用第一种直接复制源码的方式。我会<strong>优先考虑在运行时的修改方法</strong>，通常该方案改动最小、侵入性也最小。<strong>如果运行时方案改不了，我才会考虑有侵入性的编译时的</strong><code>patch-package</code><strong>方案。</strong></p><h2>总结</h2><p>在前面的课程中，我讲的大多是概念性的知识，要消化这些概念性的知识就必须要有练习，所以我在每节课中都给你留了一道实操的练习题，目的就是帮你把知识内化为能力。这一讲中，我准备的实战案例也是为了让你把前几讲中学习到的知识灵活运用起来。</p><p>首先你需要提前准备好写代码时会用到调试工具 Flipper ，并灵活运行“一推理”、“二分法”、“三问人”的思路来解决过程中遇到的问题。</p><p>在理解别人的组件代码时，利用 <code>UI/JSX = f(state, props)</code> 这个最基本 React/React Native 原理，先找到实现 UI 的 JSX 部分，再找到 state、props，然后再理解逻辑 <code>f</code> 的部分。</p><p>在修改别人的逻辑代码时，先通过调试工具来理解各个变量上下文含义，理清楚别人的逻辑后，再根据自己目的进行修改。</p><p>最后要意识到，你修改的是别人的源码，你可以通过运行时、编译时两种方案把其保存下来。</p><h2>附加材料</h2><ol>\n<li><a href=\"https://github.com/ds300/patch-package\">patch-package</a> 可以帮你保存对第三方模块的问题修复。</li>\n<li>本节课的源码，我放在了<a href=\"https://github.com/jiangleo/react-native-classroom/tree/main/src/11_Waterfall\">GitHub</a>中。</li>\n</ol><h2>作业</h2><ol>\n<li>请你根据这节课的资料，实现一个三列瀑布流布局。</li>\n<li>你觉得阅读源码，有什么意义？</li>\n</ol><p>欢迎在评论区写下你的想法。我是蒋宏伟，咱们下节课见。</p>","neighbors":{"left":{"article_title":"10｜Debug：解决 BUG 思路有哪些？","id":508776},"right":{"article_title":"12｜页面实战：如何搭建一个电商首页？","id":510659}},"comments":[{"had_liked":false,"id":353648,"user_name":"songyq","can_delete":false,"product_type":"c1","uid":2427725,"ip_address":"美国","ucode":"0A95EBA8D2F16A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLib4GiaK4KB3UvnnzIkMAD4QzKBAkOzdntPwsb8RX1xjHYgr2w0GLWhmoPdwy3iby3zOHbeTBR2DgRQ/132","comment_is_top":false,"comment_ctime":1659660650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5954627946","product_id":100110101,"comment_content":"这个学习曲线有点陡峭","like_count":1},{"had_liked":false,"id":350465,"user_name":"wilson","can_delete":false,"product_type":"c1","uid":1286793,"ip_address":"","ucode":"55CFA9D4AA9A19","user_header":"https://static001.geekbang.org/account/avatar/00/13/a2/89/7098b532.jpg","comment_is_top":false,"comment_ctime":1656928390,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5951895686","product_id":100110101,"comment_content":"我按着修改完后，瀑布流效果是有了，但是为啥不能滑动了。一滑动就卡死","like_count":1},{"had_liked":false,"id":348657,"user_name":"学习中...","can_delete":false,"product_type":"c1","uid":1126774,"ip_address":"","ucode":"AF180F386ABC09","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/76/8e3347a1.jpg","comment_is_top":false,"comment_ctime":1655282326,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5950249622","product_id":100110101,"comment_content":"老师讲的很好，不过试用了demo和结合自己实际项目中的需求来说，魔改RecyclerListView成瀑布流之后还是需要在layoutProvider中设置Dimension.width和height，但是在需求上有可能UI并不能确定好当前瀑布流item的高度，也就是无法说我区分type的方式来确定item，例如文字一行两行多行等需要在item进行了layout之后才能确定，我们没有办法measure，这样的话如果在item的onLayout之后再次刷新高度的话就会出现抖动等问题了。<br><br>请教老师一下这种情况有什么解决办法吗？是否能够让recyclerListView和FlatList一样在布局的时候可以自己动态的计算高度或者宽度进行布局呢","like_count":1},{"had_liked":false,"id":343174,"user_name":"python4","can_delete":false,"product_type":"c1","uid":1023327,"ip_address":"","ucode":"BFEE720743B53E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/5f/06671a0d.jpg","comment_is_top":false,"comment_ctime":1650690056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5945657352","product_id":100110101,"comment_content":"长见识了，以前都是直接复制","like_count":1},{"had_liked":false,"id":351460,"user_name":"未月","can_delete":false,"product_type":"c1","uid":1975122,"ip_address":"","ucode":"80964C11623AF3","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/eMtXYzYicV03GIlIMx7tiabZq0HFve24jQ8QRqaatvd5BGE2DssrFIEdAk8ZTJHiad4XJNWcaBDWTndGzDPhsEq9Q/132","comment_is_top":false,"comment_ctime":1657806459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657806459","product_id":100110101,"comment_content":"老师，请问下，按照上面修改完之后调用WaterfallLayoutProvider里面无限回调是什么原因？","like_count":0},{"had_liked":false,"id":347685,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1654312492,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1654312492","product_id":100110101,"comment_content":"高手，不仅把原理解释清楚了，改的代码成本也很低","like_count":0},{"had_liked":false,"id":346864,"user_name":"大神博士","can_delete":false,"product_type":"c1","uid":1195144,"ip_address":"","ucode":"8C4318095949F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/88/6bef27d6.jpg","comment_is_top":false,"comment_ctime":1653477699,"is_pvip":true,"replies":[{"id":"126477","content":"现在没有哦","user_name":"作者回复","user_name_real":"编辑","uid":"1088541","ctime":1653522579,"ip_address":"","comment_id":346864,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1653477699","product_id":100110101,"comment_content":"没有现成的高性能瀑布流组件吗，改开源库源码也不是很方便呐","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573574,"discussion_content":"现在没有哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653522580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345133,"user_name":"dao","can_delete":false,"product_type":"c1","uid":1087879,"ip_address":"","ucode":"4181FB270462CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","comment_is_top":false,"comment_ctime":1652071978,"is_pvip":true,"replies":[{"id":"126001","content":"点赞👍<br>实现三列布局的关键是理解 瀑布流 每一项该放哪。","user_name":"作者回复","user_name_real":"编辑","uid":"1088541","ctime":1652157979,"ip_address":"","comment_id":345133,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652071978","product_id":100110101,"comment_content":"三列布局还没有来得及写，单纯抄老师的思路来搞两列的瀑布布局就花了好几个小时。用上了 npm 包的几种修改方式——这是个额外的收获。（https:&#47;&#47;github.com&#47;hdouhua&#47;hybrid-mobile-app&#47;tree&#47;main&#47;AwesomeProject&#47;src&#47;c11）<br>要扩展这个组件的瀑布布局就必须阅读源码。阅读源码是很有必要的，也是每个程序员成长和进阶的必经之路！<br>","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571251,"discussion_content":"点赞👍\n实现三列布局的关键是理解 瀑布流 每一项该放哪。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652157980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345132,"user_name":"dao","can_delete":false,"product_type":"c1","uid":1087879,"ip_address":"","ucode":"4181FB270462CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","comment_is_top":false,"comment_ctime":1652071420,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652071420","product_id":100110101,"comment_content":"分享一下 RN 升级助手 https:&#47;&#47;react-native-community.github.io&#47;upgrade-helper&#47;","like_count":0},{"had_liked":false,"id":343787,"user_name":"geeklyc","can_delete":false,"product_type":"c1","uid":1264061,"ip_address":"","ucode":"F25441AB6433B3","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/bd/ae37990b.jpg","comment_is_top":false,"comment_ctime":1651054241,"is_pvip":false,"replies":[{"id":"125611","content":"淘宝首页的效果是吧？<br>社区有实现，不过代码有点老了，完整 demo 我放在了 Github 手势库 Gesture 的目录下了（过几天上传）。<br><br>关键库如下：<br>import { HScrollView } from &#39;react-native-head-tab-view&#39;<br>import { CollapsibleHeaderTabView } from &#39;react-native-tab-view-collapsible-header&#39;<br>","user_name":"作者回复","user_name_real":"编辑","uid":"1088541","ctime":1651208183,"ip_address":"","comment_id":343787,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651054241","product_id":100110101,"comment_content":"老师，对于列表垂直滑动吸顶，水平也可以滑动的切换不同的列表，有什么好的实现不？","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568714,"discussion_content":"淘宝首页的效果是吧？\n社区有实现，不过代码有点老了，完整 demo 我放在了 Github 手势库 Gesture 的目录下了（过几天上传）。\n\n关键库如下：\nimport { HScrollView } from &#39;react-native-head-tab-view&#39;\nimport { CollapsibleHeaderTabView } from &#39;react-native-tab-view-collapsible-header&#39;\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651208183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343019,"user_name":"学习中...","can_delete":false,"product_type":"c1","uid":1126774,"ip_address":"","ucode":"AF180F386ABC09","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/76/8e3347a1.jpg","comment_is_top":false,"comment_ctime":1650596418,"is_pvip":true,"replies":[{"id":"125292","content":"不会。<br>从原理层面，你可以用 Flipper 查看 Tree 的销毁、复用。<br>从实践层面，你可以用 Xcode AS 等工具查看内存使用情况。","user_name":"作者回复","user_name_real":"编辑","uid":"1088541","ctime":1650598856,"ip_address":"","comment_id":343019,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650596418","product_id":100110101,"comment_content":"大佬，这种方式会影响RecyclerListView的复用逻辑吗，感觉这种方式布局view复用逻辑会有问题？","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566093,"discussion_content":"不会。\n从原理层面，你可以用 Flipper 查看 Tree 的销毁、复用。\n从实践层面，你可以用 Xcode AS 等工具查看内存使用情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650598856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342916,"user_name":"贺子华","can_delete":false,"product_type":"c1","uid":1003168,"ip_address":"","ucode":"472F4ECD9E7B17","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/a0/67782623.jpg","comment_is_top":false,"comment_ctime":1650531874,"is_pvip":false,"replies":[{"id":"125248","content":"直接上代码吧，看了就懂：<br><br>https:&#47;&#47;github.com&#47;jiangleo&#47;react-native-classroom&#47;tree&#47;main&#47;src&#47;11_Waterfall&#47;lib&#47;RecyclerListView","user_name":"作者回复","user_name_real":"编辑","uid":"1088541","ctime":1650545812,"ip_address":"","comment_id":342916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650531874","product_id":100110101,"comment_content":"运行时修改这个方法没太理解<br>","like_count":0,"discussions":[{"author":{"id":1088541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/1d/f0f10198.jpg","nickname":"蒋宏伟","note":"","ucode":"02226CABD5ECE7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565804,"discussion_content":"直接上代码吧，看了就懂：\n\nhttps://github.com/jiangleo/react-native-classroom/tree/main/src/11_Waterfall/lib/RecyclerListView","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650545813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}