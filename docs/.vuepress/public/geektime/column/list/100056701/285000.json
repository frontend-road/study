{"id":285000,"title":"16 | 异步机制：如何避免单线程模型的阻塞？","content":"<p>你好，我是蒋德钧。</p><p>Redis之所以被广泛应用，很重要的一个原因就是它支持高性能访问。也正因为这样，我们必须要重视所有可能影响Redis性能的因素（例如命令操作、系统配置、关键机制、硬件配置等），不仅要知道具体的机制，尽可能避免性能异常的情况出现，还要提前准备好应对异常的方案。</p><p>所以，从这节课开始，我会用6节课的时间介绍影响Redis性能的5大方面的潜在因素，分别是：</p><ul>\n<li>Redis内部的阻塞式操作；</li>\n<li>CPU核和NUMA架构的影响；</li>\n<li>Redis关键系统配置；</li>\n<li>Redis内存碎片；</li>\n<li>Redis缓冲区。</li>\n</ul><p>这节课，我们就先学习了解下Redis内部的阻塞式操作以及应对的方法。</p><p>在<a href=\"https://time.geekbang.org/column/article/270474\">第3讲</a>中，我们学习过，Redis的网络IO和键值对读写是由主线程完成的。那么，如果在主线程上执行的操作消耗的时间太长，就会引起主线程阻塞。但是，Redis既有服务客户端请求的键值对增删改查操作，也有保证可靠性的持久化操作，还有进行主从复制时的数据同步操作，等等。操作这么多，究竟哪些会引起阻塞呢？</p><p>别着急，接下来，我就带你分门别类地梳理下这些操作，并且找出阻塞式操作。</p><h2>Redis实例有哪些阻塞点？</h2><p>Redis实例在运行时，要和许多对象进行交互，这些不同的交互就会涉及不同的操作，下面我们来看看和Redis实例交互的对象，以及交互时会发生的操作。</p><!-- [[[read_end]]] --><ul>\n<li><strong>客户端</strong>：网络IO，键值对增删改查操作，数据库操作；</li>\n<li><strong>磁盘</strong>：生成RDB快照，记录AOF日志，AOF日志重写；</li>\n<li><strong>主从节点</strong>：主库生成、传输RDB文件，从库接收RDB文件、清空数据库、加载RDB文件；</li>\n<li><strong>切片集群实例</strong>：向其他实例传输哈希槽信息，数据迁移。</li>\n</ul><p>为了帮助你理解，我再画一张图来展示下这4类交互对象和具体的操作之间的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/22/6ce8abb76b3464afe1c4cb3bbe426922.jpg?wh=2685*2250\" alt=\"\"></p><p>接下来，我们来逐个分析下在这些交互对象中，有哪些操作会引起阻塞。</p><p><strong>1.和客户端交互时的阻塞点</strong></p><p>网络IO有时候会比较慢，但是Redis使用了IO多路复用机制，避免了主线程一直处在等待网络连接或请求到来的状态，所以，网络IO不是导致Redis阻塞的因素。</p><p>键值对的增删改查操作是Redis和客户端交互的主要部分，也是Redis主线程执行的主要任务。所以，复杂度高的增删改查操作肯定会阻塞Redis。</p><p>那么，怎么判断操作复杂度是不是高呢？这里有一个最基本的标准，就是看操作的复杂度是否为O(N)。</p><p>Redis中涉及集合的操作复杂度通常为O(N)，我们要在使用时重视起来。例如集合元素全量查询操作HGETALL、SMEMBERS，以及集合的聚合统计操作，例如求交、并和差集。这些操作可以作为Redis的<strong>第一个阻塞点：集合全量查询和聚合操作</strong>。</p><p>除此之外，集合自身的删除操作同样也有潜在的阻塞风险。你可能会认为，删除操作很简单，直接把数据删除就好了，为什么还会阻塞主线程呢？</p><p>其实，删除操作的本质是要释放键值对占用的内存空间。你可不要小瞧内存的释放过程。释放内存只是第一步，为了更加高效地管理内存空间，在应用程序释放内存时，操作系统需要把释放掉的内存块插入一个空闲内存块的链表，以便后续进行管理和再分配。这个过程本身需要一定时间，而且会阻塞当前释放内存的应用程序，所以，如果一下子释放了大量内存，空闲内存块链表操作时间就会增加，相应地就会造成Redis主线程的阻塞。</p><p>那么，什么时候会释放大量内存呢？其实就是在删除大量键值对数据的时候，最典型的就是删除包含了大量元素的集合，也称为bigkey删除。为了让你对bigkey的删除性能有一个直观的印象，我测试了不同元素数量的集合在进行删除操作时所消耗的时间，如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/94/53/94bc8cf9yy5c34a6445434a15b1e9653.jpg?wh=2951*836\" alt=\"\"></p><p>从这张表里，我们可以得出三个结论：</p><ol>\n<li>当元素数量从10万增加到100万时，4大集合类型的删除时间的增长幅度从5倍上升到了近20倍；</li>\n<li>集合元素越大，删除所花费的时间就越长；</li>\n<li>当删除有100万个元素的集合时，最大的删除时间绝对值已经达到了1.98s（Hash类型）。Redis的响应时间一般在微秒级别，所以，一个操作达到了近2s，不可避免地会阻塞主线程。</li>\n</ol><p>经过刚刚的分析，很显然，<strong>bigkey删除操作就是Redis的第二个阻塞点</strong>。删除操作对Redis实例性能的负面影响很大，而且在实际业务开发时容易被忽略，所以一定要重视它。</p><p>既然频繁删除键值对都是潜在的阻塞点了，那么，在Redis的数据库级别操作中，清空数据库（例如FLUSHDB和FLUSHALL操作）必然也是一个潜在的阻塞风险，因为它涉及到删除和释放所有的键值对。所以，这就是<strong>Redis的第三个阻塞点：清空数据库</strong>。</p><p><strong>2.和磁盘交互时的阻塞点</strong></p><p>我之所以把Redis与磁盘的交互单独列为一类，主要是因为磁盘IO一般都是比较费时费力的，需要重点关注。</p><p>幸运的是，Redis开发者早已认识到磁盘IO会带来阻塞，所以就把Redis进一步设计为采用子进程的方式生成RDB快照文件，以及执行AOF日志重写操作。这样一来，这两个操作由子进程负责执行，慢速的磁盘IO就不会阻塞主线程了。</p><p>但是，Redis直接记录AOF日志时，会根据不同的写回策略对数据做落盘保存。一个同步写磁盘的操作的耗时大约是1～2ms，如果有大量的写操作需要记录在AOF日志中，并同步写回的话，就会阻塞主线程了。这就得到了Redis的<strong>第四个阻塞点了：AOF日志同步写</strong>。</p><p><strong>3.主从节点交互时的阻塞点</strong></p><p>在主从集群中，主库需要生成RDB文件，并传输给从库。主库在复制的过程中，创建和传输RDB文件都是由子进程来完成的，不会阻塞主线程。但是，对于从库来说，它在接收了RDB文件后，需要使用FLUSHDB命令清空当前数据库，这就正好撞上了刚才我们分析的<strong>第三个阻塞点。</strong></p><p>此外，从库在清空当前数据库后，还需要把RDB文件加载到内存，这个过程的快慢和RDB文件的大小密切相关，RDB文件越大，加载过程越慢，所以，<strong>加载RDB文件就成为了Redis的第五个阻塞点</strong>。</p><p><strong>4.切片集群实例交互时的阻塞点</strong></p><p>最后，当我们部署Redis切片集群时，每个Redis实例上分配的哈希槽信息需要在不同实例间进行传递，同时，当需要进行负载均衡或者有实例增删时，数据会在不同的实例间进行迁移。不过，哈希槽的信息量不大，而数据迁移是渐进式执行的，所以，一般来说，这两类操作对Redis主线程的阻塞风险不大。</p><p>不过，如果你使用了Redis Cluster方案，而且同时正好迁移的是bigkey的话，就会造成主线程的阻塞，因为Redis Cluster使用了同步迁移。我将在第33讲中向你介绍不同切片集群方案对数据迁移造成的阻塞的解决方法，这里你只需要知道，当没有bigkey时，切片集群的各实例在进行交互时不会阻塞主线程，就可以了。</p><p>好了，你现在已经了解了Redis的各种关键操作，以及其中的阻塞式操作，我们来总结下刚刚找到的五个阻塞点：</p><ul>\n<li>集合全量查询和聚合操作；</li>\n<li>bigkey删除；</li>\n<li>清空数据库；</li>\n<li>AOF日志同步写；</li>\n<li>从库加载RDB文件。</li>\n</ul><p>如果在主线程中执行这些操作，必然会导致主线程长时间无法服务其他请求。为了避免阻塞式操作，Redis提供了异步线程机制。所谓的异步线程机制，就是指，Redis会启动一些子线程，然后把一些任务交给这些子线程，让它们在后台完成，而不再由主线程来执行这些任务。使用异步线程机制执行操作，可以避免阻塞主线程。</p><p>不过，这个时候，问题来了：这五大阻塞式操作都可以被异步执行吗？</p><h2>哪些阻塞点可以异步执行？</h2><p>在分析阻塞式操作的异步执行的可行性之前，我们先来了解下异步执行对操作的要求。</p><p>如果一个操作能被异步执行，就意味着，它并不是Redis主线程的关键路径上的操作。我再解释下关键路径上的操作是啥。这就是说，客户端把请求发送给Redis后，等着Redis返回数据结果的操作。</p><p>这么说可能有点抽象，我画一张图片来解释下。</p><p><img src=\"https://static001.geekbang.org/resource/image/f1/61/f196035e3d2ba65257b211ed436b0b61.jpg?wh=3000*1593\" alt=\"\"></p><p>主线程接收到操作1后，因为操作1并不用给客户端返回具体的数据，所以，主线程可以把它交给后台子线程来完成，同时只要给客户端返回一个“OK”结果就行。在子线程执行操作1的时候，客户端又向Redis实例发送了操作2，而此时，客户端是需要使用操作2返回的数据结果的，如果操作2不返回结果，那么，客户端将一直处于等待状态。</p><p>在这个例子中，操作1就不算关键路径上的操作，因为它不用给客户端返回具体数据，所以可以由后台子线程异步执行。而操作2需要把结果返回给客户端，它就是关键路径上的操作，所以主线程必须立即把这个操作执行完。</p><p>对于Redis来说，<strong>读操作是典型的关键路径操作</strong>，因为客户端发送了读操作之后，就会等待读取的数据返回，以便进行后续的数据处理。而Redis的第一个阻塞点“集合全量查询和聚合操作”都涉及到了读操作，所以，它们是不能进行异步操作了。</p><p>我们再来看看删除操作。删除操作并不需要给客户端返回具体的数据结果，所以不算是关键路径操作。而我们刚才总结的第二个阻塞点“bigkey删除”，和第三个阻塞点“清空数据库”，都是对数据做删除，并不在关键路径上。因此，我们可以使用后台子线程来异步执行删除操作。</p><p>对于第四个阻塞点“AOF日志同步写”来说，为了保证数据可靠性，Redis实例需要保证AOF日志中的操作记录已经落盘，这个操作虽然需要实例等待，但它并不会返回具体的数据结果给实例。所以，我们也可以启动一个子线程来执行AOF日志的同步写，而不用让主线程等待AOF日志的写完成。</p><p>最后，我们再来看下“从库加载RDB文件”这个阻塞点。从库要想对客户端提供数据存取服务，就必须把RDB文件加载完成。所以，这个操作也属于关键路径上的操作，我们必须让从库的主线程来执行。</p><p>对于Redis的五大阻塞点来说，除了“集合全量查询和聚合操作”和“从库加载RDB文件”，其他三个阻塞点涉及的操作都不在关键路径上，所以，我们可以使用Redis的异步子线程机制来实现bigkey删除，清空数据库，以及AOF日志同步写。</p><p>那么，Redis实现的异步子线程机制具体是怎么执行呢？</p><h2>异步的子线程机制</h2><p>Redis主线程启动后，会使用操作系统提供的pthread_create函数创建3个子线程，分别由它们负责AOF日志写操作、键值对删除以及文件关闭的异步执行。</p><p>主线程通过一个链表形式的任务队列和子线程进行交互。当收到键值对删除和清空数据库的操作时，主线程会把这个操作封装成一个任务，放入到任务队列中，然后给客户端返回一个完成信息，表明删除已经完成。</p><p>但实际上，这个时候删除还没有执行，等到后台子线程从任务队列中读取任务后，才开始实际删除键值对，并释放相应的内存空间。因此，我们把这种异步删除也称为惰性删除（lazy free）。此时，删除或清空操作不会阻塞主线程，这就避免了对主线程的性能影响。</p><p>和惰性删除类似，当AOF日志配置成everysec选项后，主线程会把AOF写日志操作封装成一个任务，也放到任务队列中。后台子线程读取任务后，开始自行写入AOF日志，这样主线程就不用一直等待AOF日志写完了。</p><p>下面这张图展示了Redis中的异步子线程执行机制，你可以再看下，加深印象。</p><p><img src=\"https://static001.geekbang.org/resource/image/ae/69/ae004728bfe6d3771c7424e4161e7969.jpg?wh=2889*1371\" alt=\"\"></p><p>这里有个地方需要你注意一下，异步的键值对删除和数据库清空操作是Redis 4.0后提供的功能，Redis也提供了新的命令来执行这两个操作。</p><ul>\n<li>键值对删除：当你的集合类型中有大量元素（例如有百万级别或千万级别元素）需要删除时，我建议你使用UNLINK命令。</li>\n<li>清空数据库：可以在FLUSHDB和FLUSHALL命令后加上ASYNC选项，这样就可以让后台子线程异步地清空数据库，如下所示：</li>\n</ul><pre><code>FLUSHDB ASYNC\nFLUSHALL AYSNC\n</code></pre><h2>小结</h2><p>这节课，我们学习了Redis实例运行时的4大类交互对象：客户端、磁盘、主从库实例、切片集群实例。基于这4大类交互对象，我们梳理了会导致Redis性能受损的5大阻塞点，包括集合全量查询和聚合操作、bigkey删除、清空数据库、AOF日志同步写，以及从库加载RDB文件。</p><p>在这5大阻塞点中，bigkey删除、清空数据库、AOF日志同步写不属于关键路径操作，可以使用异步子线程机制来完成。Redis在运行时会创建三个子线程，主线程会通过一个任务队列和三个子线程进行交互。子线程会根据任务的具体类型，来执行相应的异步操作。</p><p>不过，异步删除操作是Redis 4.0以后才有的功能，如果你使用的是4.0之前的版本，当你遇到bigkey删除时，我给你个小建议：先使用集合类型提供的SCAN命令读取数据，然后再进行删除。因为用SCAN命令可以每次只读取一部分数据并进行删除，这样可以避免一次性删除大量key给主线程带来的阻塞。</p><p>例如，对于Hash类型的bigkey删除，你可以使用HSCAN命令，每次从Hash集合中获取一部分键值对（例如200个），再使用HDEL删除这些键值对，这样就可以把删除压力分摊到多次操作中，那么，每次删除操作的耗时就不会太长，也就不会阻塞主线程了。</p><p>最后，我想再提一下，集合全量查询和聚合操作、从库加载RDB文件是在关键路径上，无法使用异步操作来完成。对于这两个阻塞点，我也给你两个小建议。</p><ul>\n<li>集合全量查询和聚合操作：可以使用SCAN命令，分批读取数据，再在客户端进行聚合计算；</li>\n<li>从库加载RDB文件：把主库的数据量大小控制在2~4GB左右，以保证RDB文件能以较快的速度加载。</li>\n</ul><h2>每课一问</h2><p>按照惯例，我给你提一个小问题：我们今天学习了关键路径上的操作，你觉得，Redis的写操作（例如SET、HSET、SADD等）是在关键路径上吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得今天的内容对你有所帮助，也欢迎你帮我分享给更多人，我们下节课见。</p>","neighbors":{"left":{"article_title":"15 | 消息队列的考验：Redis有哪些解决方案？","id":284291},"right":{"article_title":"17 | 为什么CPU结构也会影响Redis的性能？","id":286082}},"comments":[{"had_liked":false,"id":248113,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1600013397,"is_pvip":true,"discussion_count":78,"race_medal":0,"score":"2123313857621","product_id":100056701,"comment_content":"Redis的写操作（例如SET，HSET，SADD等）是在关键路径上吗？<br><br>我觉得这需要客户端根据业务需要来区分：<br><br>1、如果客户端依赖操作返回值的不同，进而需要处理不同的业务逻辑，那么HSET和SADD操作算关键路径，而SET操作不算关键路径。因为HSET和SADD操作，如果field或member不存在时，Redis结果会返回1，否则返回0。而SET操作返回的结果都是OK，客户端不需要关心结果有什么不同。<br><br>2、如果客户端不关心返回值，只关心数据是否写入成功，那么SET&#47;HSET&#47;SADD不算关键路径，多次执行这些命令都是幂等的，这种情况下可以放到异步线程中执行。<br><br>3、但是有种例外情况，如果Redis设置了maxmemory，但是却没有设置淘汰策略，这三个操作也都算关键路径。因为如果Redis内存超过了maxmemory，再写入数据时，Redis返回的结果是OOM error，这种情况下，客户端需要感知有错误发生才行。<br><br>另外，我查阅了lazy-free相关的源码，发现有很多细节需要补充下：<br><br>1、lazy-free是4.0新增的功能，但是默认是关闭的，需要手动开启。<br><br>2、手动开启lazy-free时，有4个选项可以控制，分别对应不同场景下，要不要开启异步释放内存机制：<br>a) lazyfree-lazy-expire：key在过期删除时尝试异步释放内存<br>b) lazyfree-lazy-eviction：内存达到maxmemory并设置了淘汰策略时尝试异步释放内存<br>c) lazyfree-lazy-server-del：执行RENAME&#47;MOVE等命令或需要覆盖一个key时，删除旧key尝试异步释放内存<br>d) replica-lazy-flush：主从全量同步，从库清空数据库时异步释放内存<br><br>3、即使开启了lazy-free，如果直接使用DEL命令还是会同步删除key，只有使用UNLINK命令才会可能异步删除key。<br><br>4、这也是最关键的一点，上面提到开启lazy-free的场景，除了replica-lazy-flush之外，其他情况都只是*可能*去异步释放key的内存，并不是每次必定异步释放内存的。<br><br>开启lazy-free后，Redis在释放一个key的内存时，首先会评估代价，如果释放内存的代价很小，那么就直接在主线程中操作了，没必要放到异步线程中执行（不同线程传递数据也会有性能消耗）。<br><br>什么情况才会真正异步释放内存？这和key的类型、编码方式、元素数量都有关系（详细可参考源码中的lazyfreeGetFreeEffort函数）：<br><br>a) 当Hash&#47;Set底层采用哈希表存储（非ziplist&#47;int编码存储）时，并且元素数量超过64个<br>b) 当ZSet底层采用跳表存储（非ziplist编码存储）时，并且元素数量超过64个<br>c) 当List链表节点数量超过64个（注意，不是元素数量，而是链表节点的数量，List的实现是在每个节点包含了若干个元素的数据，这些元素采用ziplist存储）<br><br>只有以上这些情况，在删除key释放内存时，才会真正放到异步线程中执行，其他情况一律还是在主线程操作。<br><br>也就是说String（不管内存占用多大）、List（少量元素）、Set（int编码存储）、Hash&#47;ZSet（ziplist编码存储）这些情况下的key在释放内存时，依旧在主线程中操作。<br><br>可见，即使开启了lazy-free，String类型的bigkey，在删除时依旧有阻塞主线程的风险。所以，即便Redis提供了lazy-free，我建议还是尽量不要在Redis中存储bigkey。<br><br>个人理解Redis在设计评估释放内存的代价时，不是看key的内存占用有多少，而是关注释放内存时的工作量有多大。从上面分析基本能看出，如果需要释放的内存是连续的，Redis作者认为释放内存的代价比较低，就放在主线程做。如果释放的内存不连续（大量指针类型的数据），这个代价就比较高，所以才会放在异步线程中去执行。<br><br>如果我的理解有偏差，还请老师和大家指出！","like_count":495,"discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305732,"discussion_content":"刚又看了一下，Redis 6.0又提供一个选项：lazyfree-lazy-user-del。\n\n打开这个选项后，使用DEL和UNLINK就没有区别了。","likes_number":59,"is_delete":false,"is_hidden":false,"ctime":1600071522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047423,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fb/7f/746a6f5e.jpg","nickname":"Q","note":"","ucode":"785546C617D3DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305615,"discussion_content":"大佬每次的总结，可以集合成一个专栏了，😄！赞👍","likes_number":22,"is_delete":false,"is_hidden":false,"ctime":1600039205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1325816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","nickname":"君哥聊技术","note":"","ucode":"2C9A22BCE4C79E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1047423,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fb/7f/746a6f5e.jpg","nickname":"Q","note":"","ucode":"785546C617D3DF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305636,"discussion_content":"确实","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600043289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305615,"ip_address":""},"score":305636,"extra":""},{"author":{"id":1069127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/47/46da4585.jpg","nickname":"Fan()","note":"","ucode":"FED79EC7D78E91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1047423,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fb/7f/746a6f5e.jpg","nickname":"Q","note":"","ucode":"785546C617D3DF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305642,"discussion_content":"确实","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600044511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305615,"ip_address":""},"score":305642,"extra":""},{"author":{"id":2201323,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/CV9kk5M26pdxvFhbrkicjZa4avHTfWWPJCKCIrkhgws8WN9RJAJ5D4oGAPgAOVXmDk9gKEQ9nbrhia9Qjsqk4DyA/132","nickname":"crtmsvc","note":"","ucode":"A00D3FB17CB614","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1047423,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fb/7f/746a6f5e.jpg","nickname":"Q","note":"","ucode":"785546C617D3DF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311130,"discussion_content":"确实","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602232314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305615,"ip_address":""},"score":311130,"extra":""}]},{"author":{"id":1209939,"avatar":"https://static001.geekbang.org/account/avatar/00/12/76/53/21d62a23.jpg","nickname":"鲁·本","note":"","ucode":"F1DEB30C21B48E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325544,"discussion_content":"老师不知从啥时候开始就消失不回复评论了","likes_number":18,"is_delete":false,"is_hidden":false,"ctime":1605342799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1932460,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/7c/ac/f7106c90.jpg","nickname":"i","note":"","ucode":"334B4F089CB983","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351032,"discussion_content":"功高盖主了","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1614129376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1227366,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ba/66/7d9f45e7.jpg","nickname":"太空牛仔","note":"","ucode":"0205635C3854AF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1932460,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/7c/ac/f7106c90.jpg","nickname":"i","note":"","ucode":"334B4F089CB983","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545781,"discussion_content":"这么可怕吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642050069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":351032,"ip_address":""},"score":545781,"extra":""},{"author":{"id":2630632,"avatar":"https://static001.geekbang.org/account/avatar/00/28/23/e8/9f445339.jpg","nickname":"章潘","note":"","ucode":"1A24E1B3084450","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1932460,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/7c/ac/f7106c90.jpg","nickname":"i","note":"","ucode":"334B4F089CB983","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588930,"discussion_content":"蒋老师对redis的理解和表达能力明显强很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664237177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":351032,"ip_address":"广东"},"score":588930,"extra":""}]},{"author":{"id":1079495,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/c7/083a3a0b.jpg","nickname":"新世界","note":"","ucode":"4473DC1505F158","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331796,"discussion_content":" 确实，kaito可以开个专栏了","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1606979987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2320446,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJxzxDIUjoToCibu1fOnK5xII7WdYkkgxSL3tbd9uTicZhhaqZ42rIhDT3J3jmQZL2sxX3om3jI9xRA/132","nickname":"Geek_88888888","note":"","ucode":"8CA811FA981159","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353117,"discussion_content":"小kk，真正异步释放内存的a b c几种情况中, 还需要同时满足引用次数仅为1的时候，才能异步释放~","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1615018078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2320446,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJxzxDIUjoToCibu1fOnK5xII7WdYkkgxSL3tbd9uTicZhhaqZ42rIhDT3J3jmQZL2sxX3om3jI9xRA/132","nickname":"Geek_88888888","note":"","ucode":"8CA811FA981159","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577110,"discussion_content":"什么时候会增加RedisObject的引用计数啊?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655920548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":353117,"ip_address":""},"score":577110,"extra":""},{"author":{"id":2662872,"avatar":"https://static001.geekbang.org/account/avatar/00/28/a1/d8/42252c48.jpg","nickname":"123","note":"","ucode":"5A343B568B9524","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586019,"discussion_content":"为了内存能重复使用，节省内存空间，redis 数据对象可能被共享，通过引用计数，统计对象被引用的次数，redis在启动时会自动添加0-9999的整数字符串，待设置新的key的值对象在0-9999之间，会复用原有的内存地址，将对应键值的引用对象进行改变","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661936786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":577110,"ip_address":"浙江"},"score":586019,"extra":""}]},{"author":{"id":2015036,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJxTic6Oaob2NaRp4uQ1hI08fFJpH0vB7cEymDhz9kufQZ5ibAxkrvwtjjDM7parCAye8S24zWZtqiaw/132","nickname":"Geek_35d414","note":"","ucode":"8CED159FEF7260","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371423,"discussion_content":"果然源码是王道","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1619765831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101762,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/c2/a5b3ceaf.jpg","nickname":"helloworld","note":"","ucode":"003700A99A910B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348951,"discussion_content":"课代表你好,  请教一个问题:  老师在文中说 AOF 同步写这个操作是在子线程执行的, 但在之前的文章说 AOF 同步写会影响性能, 这两处说法该怎么理解呢? 我的理解是 AOF 同步写就是在主线程执行的,执行完才能会返回给客户端.","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1612792549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":7,"child_discussions":[{"author":{"id":1112676,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","nickname":"Sam Fu","note":"","ucode":"EA285A4943271F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1101762,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/c2/a5b3ceaf.jpg","nickname":"helloworld","note":"","ucode":"003700A99A910B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348989,"discussion_content":"+1， 我也有这个疑惑，听老师的意思好像是全程子线程完成，那都在子线程了，为什么还会阻塞呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612835992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348951,"ip_address":""},"score":348989,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1101762,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/c2/a5b3ceaf.jpg","nickname":"helloworld","note":"","ucode":"003700A99A910B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348993,"discussion_content":"AOF刷盘是有参数可以控制的，可以在主线程做，我可以放在子线程做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612836563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348951,"ip_address":""},"score":348993,"extra":""},{"author":{"id":2162784,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/9ExlO4FktmTib5RRJKaxic2bbS7AicJodsnms8jOGibG53ibNyqicHO1F7LKOaDjDNTlyqCO91NXTlLcYlFia2sO5SPQw/132","nickname":"漂泊的小码农","note":"","ucode":"8557471627BA6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":350124,"discussion_content":"如果配置的always，就是在主线程做的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613718294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348993,"ip_address":""},"score":350124,"extra":""}]},{"author":{"id":1101762,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cf/c2/a5b3ceaf.jpg","nickname":"helloworld","note":"","ucode":"003700A99A910B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348945,"discussion_content":"每次看完文章,必看课代表的总结,看完总结,每次不由自主想给课代表点赞!","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1612790077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305687,"discussion_content":"正好有好多异步删除key的问题想问，看过你的总结准备去看下官方文档，有些地方还是没理解，如果是异步删除的话，在没有真正删除之前查询怎么办，我记得是会有删除标记的吧，我要再去看看，就和java虚拟机垃圾回收一样，有个标记清除的算法","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1600058550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":11,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305696,"discussion_content":"放到异步线程之前，先在主线程中把这个key从数据库中删掉，再进来的查询请求就查不到这个key了。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1600061973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305687,"ip_address":""},"score":305696,"extra":""},{"author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":305711,"discussion_content":"您说的数据库删除是指关系性数据库吧，还有个问题，我看了redis官网，哪里可以看到lazyfree的相关文档","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600065693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305696,"ip_address":""},"score":305711,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305713,"discussion_content":"不是关系型数据库，从数据库中删除指的是Redis的全局键值对的dict中剔除。\n\n文档我没具体关注，我看的是源码。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1600066680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305711,"ip_address":""},"score":305713,"extra":""}]},{"author":{"id":1503506,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","nickname":"你为啥那么牛","note":"","ucode":"1ABC604A54A8F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340684,"discussion_content":"给你一朵小红花","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610097028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305656,"discussion_content":"优秀课代表","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600048409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1227366,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ba/66/7d9f45e7.jpg","nickname":"太空牛仔","note":"","ucode":"0205635C3854AF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545782,"discussion_content":"天下评论三千 我只看你一人","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642050137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2805682,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/cf/b2/2a124ccc.jpg","nickname":"明人不做暗事","note":"","ucode":"10D845C54312C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411086,"discussion_content":"大佬太强了。每次都是看完老师的文章，必须要再看下你的总结才算把本节课学完。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635845557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1779061,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/25/75/d38dacaf.jpg","nickname":"李安民","note":"","ucode":"B5C45FD56E652B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408973,"discussion_content":"老师 您好 什么时候开一门课？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635347739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1641326,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDdmHm6txEVtEXEDibSdIsRLEpghOoMt2kfZHetY9QLWHygicKCfhVoYiaylAZJoXbcCMBhXqMF4icgw/132","nickname":"洗洗睡吧","note":"","ucode":"DE7F8B4CA512F6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385340,"discussion_content":"你这样老师很没面子啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627008127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1641326,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDdmHm6txEVtEXEDibSdIsRLEpghOoMt2kfZHetY9QLWHygicKCfhVoYiaylAZJoXbcCMBhXqMF4icgw/132","nickname":"洗洗睡吧","note":"","ucode":"DE7F8B4CA512F6","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":385485,"discussion_content":"老师每节课不可能讲的很全很细，而且每个人的基础也不一样。大体方向有了，能力强的，可以自己再做深入。课代表对一些细节做补充，我觉得他俩配合的挺好的，哈哈...","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1627092637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":385340,"ip_address":""},"score":385485,"extra":""},{"author":{"id":1272315,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/nSvVtStiaQzslFM7YRnlhPyTgSHGoXvOqlSQS8rMEmfnFCtasNxRiaVfrRcMlkuOSq1iaReQD0CiaGHMVibsVMNkAxQ/132","nickname":"justin","note":"","ucode":"09AE502D6A28D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1641326,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDdmHm6txEVtEXEDibSdIsRLEpghOoMt2kfZHetY9QLWHygicKCfhVoYiaylAZJoXbcCMBhXqMF4icgw/132","nickname":"洗洗睡吧","note":"","ucode":"DE7F8B4CA512F6","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":412967,"discussion_content":"的确是没面子，老师讲的比较high，偏应用实践，感觉对源码没有怎么深入研究。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636342858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":385340,"ip_address":""},"score":412967,"extra":""},{"author":{"id":2729003,"avatar":"https://static001.geekbang.org/account/avatar/00/29/a4/2b/0e1bab59.jpg","nickname":"senda","note":"","ucode":"74541011088AFB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1272315,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/nSvVtStiaQzslFM7YRnlhPyTgSHGoXvOqlSQS8rMEmfnFCtasNxRiaVfrRcMlkuOSq1iaReQD0CiaGHMVibsVMNkAxQ/132","nickname":"justin","note":"","ucode":"09AE502D6A28D9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545943,"discussion_content":"你错了，不研究源码，根本写不出这样的文章来","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1642087077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":412967,"ip_address":""},"score":545943,"extra":""}]},{"author":{"id":1879262,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/ac/de/68f35320.jpg","nickname":"小来子","note":"","ucode":"4EDAF31E43B211","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342719,"discussion_content":"有kaito大佬的话, 这个专栏变得太棒了~  kaito大佬不止是总结和补充到位, 更是给大家抛出了学习方向.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610792129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305942,"discussion_content":"hi，课代表！我想问问要读 Redis 的源码需要什么样的预备知识？我把 Redis 的源码拷贝下来了，也编译完成，在 VS 上可以 debug 了。剩下就硬吃么？感觉里头的源码都是几千行，几千行的来的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600135173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305950,"discussion_content":"先看底层数据类型的实现，再看每种数据类型的命令是如何执行的，最后再关注主从复制、高可用、切片集群相关的逻辑。","likes_number":20,"is_delete":false,"is_hidden":false,"ctime":1600135548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305942,"ip_address":""},"score":305950,"extra":""},{"author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":305987,"discussion_content":"thanks.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600143218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305950,"ip_address":""},"score":305987,"extra":""}]},{"author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305786,"discussion_content":"我是过来抄作业的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600084849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305689,"discussion_content":"还有个问题，写的时候看是否是关键路径不用考虑写失败吗，会抛出异常或者是因为写幂等的原因吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600058659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1312184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/b8/8d468842.jpg","nickname":"JulyRemember","note":"","ucode":"9E3D5D60D82999","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305697,"discussion_content":"既然放到异步执行，就必须要保证成功。如果有失败风险，只能同步来做把结果返回客户端，或者用其他机制保证不会失败。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600062114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305689,"ip_address":""},"score":305697,"extra":""}]},{"author":{"id":1103171,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d5/43/714ec40b.jpg","nickname":"燃情岁月","note":"","ucode":"97F046C32715F9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590060,"discussion_content":"细","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665493528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3013303,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/fa/b7/0342db08.jpg","nickname":"大排泡饭","note":"","ucode":"30B882AAB67CC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574266,"discussion_content":"hihi, 既然linkedList每个节点是一个ziplist， 那skiplist的节点有没有也用这种数据结构，感觉这样实现出来会快很多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653929535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553497,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645932293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2856313,"avatar":"","nickname":"Yipsen","note":"","ucode":"F0ECE8C12AF105","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535696,"discussion_content":"你好，请教两个问题：1. 老师画的图里主从同步采用的是RDB，为什么不只是采用RDB做初始同步，后续再采用AOF来增量同步呢？感觉每次传输RDB非常大而且有延迟，AOF增量就拆小了。2. 老师课中说到异步任务有个队列，那异步子线程是有线程池的吗？如果没有的话，有没有可能任务太多把CPU打爆了。那如果有的话，又是怎么保证AOF在everysec完成处理的，有可能AOF执行时，线程池没有可用的了，都在阻塞，此时的AOF执行不了需要等待，那就有可能保证不了秒级了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638520534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000441,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/f9/723ee153.jpg","nickname":"wessonwang","note":"","ucode":"A9BA5E3A3F278E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534983,"discussion_content":"list节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638327914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1272315,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/nSvVtStiaQzslFM7YRnlhPyTgSHGoXvOqlSQS8rMEmfnFCtasNxRiaVfrRcMlkuOSq1iaReQD0CiaGHMVibsVMNkAxQ/132","nickname":"justin","note":"","ucode":"09AE502D6A28D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412961,"discussion_content":"感觉老师没有你懂得多。 哈哈， 毕竟你应该是读了源码的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636341798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1289329,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ac/71/1661342c.jpg","nickname":"Limmy","note":"","ucode":"67E91AA8EC0729","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410329,"discussion_content":"异步删除的话，如果真正删除之前的读取是不是还是能够读到呢。如果不是的话，是否会阻塞后面对该值的读取和写操作？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635665813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098987,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","nickname":"花晨少年","note":"","ucode":"6AA3537A6BA10E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380822,"discussion_content":"请问，如果aof配置选项是always的话，应该不能使用子线程异步执行这个落日志操作把？\n因为我理解always应该是为了保证数据安全性，如果异步执行，就失去了保证数据安全性的意义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624713632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2673963,"avatar":"https://static001.geekbang.org/account/avatar/00/28/cd/2b/2a640e56.jpg","nickname":"nil","note":"","ucode":"3E10F284D95475","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1098987,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","nickname":"花晨少年","note":"","ucode":"6AA3537A6BA10E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389367,"discussion_content":"always时候是在主进程落盘的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629254782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":380822,"ip_address":""},"score":389367,"extra":""}]},{"author":{"id":1815374,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4ibibOsboHycltqqicSIkm9eibSBu86BRNc0LQnTRTMEPGDvJXYpBicWOW4srMt7c9iaUT7b5mTmicgkjw/132","nickname":"Geek_6a58c7","note":"","ucode":"37900229ED9B3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375377,"discussion_content":"大佬，请问一下删除和直接把key设置成过期，在性能上有区别吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621596093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1815374,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4ibibOsboHycltqqicSIkm9eibSBu86BRNc0LQnTRTMEPGDvJXYpBicWOW4srMt7c9iaUT7b5mTmicgkjw/132","nickname":"Geek_6a58c7","note":"","ucode":"37900229ED9B3C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375426,"discussion_content":"有的，设置成过期后，Redis还需要执行逻辑去删除这些key，肯定比直接删多花时间。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621647950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375377,"ip_address":""},"score":375426,"extra":""},{"author":{"id":1691516,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cf/7c/2e99d0ad.jpg","nickname":"一新","note":"","ucode":"1915C6C655C31F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1815374,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4ibibOsboHycltqqicSIkm9eibSBu86BRNc0LQnTRTMEPGDvJXYpBicWOW4srMt7c9iaUT7b5mTmicgkjw/132","nickname":"Geek_6a58c7","note":"","ucode":"37900229ED9B3C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376459,"discussion_content":"业务逻辑上可通过 版本级别 + 过期时间 进行删除","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622129458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375377,"ip_address":""},"score":376459,"extra":""},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1815374,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4ibibOsboHycltqqicSIkm9eibSBu86BRNc0LQnTRTMEPGDvJXYpBicWOW4srMt7c9iaUT7b5mTmicgkjw/132","nickname":"Geek_6a58c7","note":"","ucode":"37900229ED9B3C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577113,"discussion_content":"过期了如果还没开始删除这个时候能读到吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655920895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375377,"ip_address":""},"score":577113,"extra":""}]},{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374798,"discussion_content":"replica-lazy-flush 有必要清空数据库时异步释放内存么？此时从库并没有对外服务，主线程应该没有其他操作需要处理，主线程重新加载新的 rdb 文件，也需要等待数据库清空完毕。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621350303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358817,"discussion_content":"可以可以，比较干货了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616055175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2320446,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJxzxDIUjoToCibu1fOnK5xII7WdYkkgxSL3tbd9uTicZhhaqZ42rIhDT3J3jmQZL2sxX3om3jI9xRA/132","nickname":"Geek_88888888","note":"","ucode":"8CA811FA981159","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353124,"discussion_content":"Redis在设计评估释放内存的代价时，不是看key的内存占用有多少，而是关注释放内存时的工作量有多大...“释放的内存不连续&#34; 这个是根据什么得出的结论呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615019373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2320446,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJxzxDIUjoToCibu1fOnK5xII7WdYkkgxSL3tbd9uTicZhhaqZ42rIhDT3J3jmQZL2sxX3om3jI9xRA/132","nickname":"Geek_88888888","note":"","ucode":"8CA811FA981159","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353135,"discussion_content":"底层是链表实现的数据结构，内存就是不连续的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1615021330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":353124,"ip_address":""},"score":353135,"extra":""}]},{"author":{"id":1101251,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cd/c3/d62a07f9.jpg","nickname":"Fanrncho","note":"","ucode":"D2D28FC92CFB6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350501,"discussion_content":"“即使开启了lazy-free，如果直接使用DEL命令还是会同步删除key，只有使用UNLINK命令才会可能异步删除key。”这段总结的源出处在哪，能透露个链接不？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613896630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1101251,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cd/c3/d62a07f9.jpg","nickname":"Fanrncho","note":"","ucode":"D2D28FC92CFB6C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350535,"discussion_content":"源码","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1613908775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":350501,"ip_address":""},"score":350535,"extra":""}]},{"author":{"id":1606288,"avatar":"https://static001.geekbang.org/account/avatar/00/18/82/90/295449c4.jpg","nickname":"半生瓜。","note":"","ucode":"6D4CC445230D19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343751,"discussion_content":"你好，请问一下，如果写放到异步执行，那么在redis没写入的时候客户端就读取不会有问题吗？还是说这种情况其实是比较极端的，没有那么容易出现？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611146660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1006735,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/8f/551b5624.jpg","nickname":"小可","note":"","ucode":"8834AF621FA67D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1606288,"avatar":"https://static001.geekbang.org/account/avatar/00/18/82/90/295449c4.jpg","nickname":"半生瓜。","note":"","ucode":"6D4CC445230D19","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347870,"discussion_content":"先删除全局哈希映射表，相当于标记删除，是查不到数据的，再新写的数据，是新的地址，也不影响","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1612346192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":343751,"ip_address":""},"score":347870,"extra":""}]},{"author":{"id":2034717,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ZOjPic948JaOXhbUwZcBqGibPYtu6QA5BuA9qdQHE6xBaGuER5BAfdVGDyeenvhuXAb8069w1fA8p5iblALtmk6hA/132","nickname":"Geek_f5a46e","note":"","ucode":"C6618A64653E5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330629,"discussion_content":"超神，牛皮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606659641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306128,"discussion_content":"lazy-free 可以提高Redis 性能，为什么默认关闭呢？ 这是处于什么考虑的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600176819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1436839,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ec/a7/7d44c655.jpg","nickname":"snailshen","note":"","ucode":"C4875C476649B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":308118,"discussion_content":"数据一致性，客户端和redis的数据一致性","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1600848934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":306128,"ip_address":""},"score":308118,"extra":""},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1436839,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ec/a7/7d44c655.jpg","nickname":"snailshen","note":"","ucode":"C4875C476649B1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333574,"discussion_content":"我觉得应该不是。。。无论del 还是unlink  key都是同步删除，lazy 指的是value值。我觉得还是稳妥起见，大家先用用，有问题反馈反馈，我们fix完了，迭代几个版本 我们再fix为默认打开。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1607566858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308118,"ip_address":""},"score":333574,"extra":""},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346582,"discussion_content":"感觉不冲突，稳妥是为了这种可能造成不一致特性上的稳妥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611997579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333574,"ip_address":""},"score":346582,"extra":""}]}]},{"had_liked":false,"id":255177,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1603276889,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"139042230361","product_id":100056701,"comment_content":"1，作者讲了什么？<br>    Redis有哪些可能导致阻塞的操作，以及解决机制<br><br>2，作者是怎么把这件事讲明白的？<br>    1，分类：通过Redis实例的交互关系，拆分了四类：客户端，磁盘，主从集群，分片集群<br>    2，提出关键路径操作概念，作为是否可以异步处理的判断标准<br><br>3，为了讲明白，作者讲了哪些要点？有哪些亮点？<br>    1，亮点1：将Redis的可能阻塞点划分了四块，与客户端交互，与磁盘交互，主从实例交互，分片集群实例交互<br>    2，亮点2：通过关键路径上操作概念，建立了判断是否适合异步操作的标准<br>    3，要点1：与客户端交互时的阻塞点：高复杂度的增删改操作（集合全量的查询和聚合操作，bigKey 删除操作，清空数据库）<br>    4，要点2：与磁盘交互的阻塞点：aof日志实时同步写回<br>    5，要点3：主从节点交互时的阻塞点：从库加载RDB文件<br>    6，要点4：分片集群的阻塞点：哈希槽bigkey数据迁移<br>    7，要点5：关键路径操作概念：客户端把请求发给Redis后，要等着Redis返回数据结果的操作<br>    8，要点6：异步的子线程机制：主线程通过一个链表形式的任务队列和子线程进行交互<br><br>4，对于作者所讲，我有哪些发散性思考？<br>   给自己提了几个问题：<br>     1，Redis至少有几个线程？<br>     2，网络IO有时会比较慢，网络IO是否为Redis的阻塞点？<br>     3，删除操作为什么会阻塞Redis<br><br>5，将来在哪些场景里，我能够使用它？<br><br>6，留言收获<br>什么时候Redis会真正的异步释放内存？（答案来自@kaito 大佬）<br><br>lazy free机制：Redis收到键值对删除和清空数据库的指令时，主线线程会把这个操作封装成一个任务，放入任务队列中，然后给客户端返回一个完成信息，但实际上，这个删除还没有执行，需要等待后台子线程从任务队列中读取到这个任务后，才开始实际删除键值对，并释放相应的内存空间。<br><br>但是：lazy-free是4.0新增功能，默认关闭。开启这个配置后， 除了replica-lazy-flush之外，其他情况都只是*可能*去异步释放key的内存，并不是每次必定异步释放内存的。是否会真正异步释放内存，取决于key的类型，编码方式，元素数量，所以 即使开启了lazy-free，String类型的bigkey，在删除时依旧有阻塞主线程的风险","like_count":33},{"had_liked":false,"id":248210,"user_name":"Spring4J","can_delete":false,"product_type":"c1","uid":1645430,"ip_address":"","ucode":"06F056085A2564","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","comment_is_top":false,"comment_ctime":1600065849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44549738809","product_id":100056701,"comment_content":"Redis的异步子线程机制就跟java里面的线程池原理差不多，都是主线程封装任务到队列中，子线程到队列中拉取任务异步执行，运用了生产者消费者的模型","like_count":10},{"had_liked":false,"id":248478,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1600176415,"is_pvip":true,"discussion_count":5,"race_medal":1,"score":"27369980191","product_id":100056701,"comment_content":"释放掉的内存块插入一个空闲内存块的链表<br>===================<br>这个过程怎么会耗时间呢？ 插入链表的时候，不就是在链表尾部一放不就可以了吗？ 时间复杂度位 O(1)","like_count":6,"discussions":[{"author":{"id":1275690,"avatar":"https://static001.geekbang.org/account/avatar/00/13/77/2a/244d98aa.jpg","nickname":"cp★钊","note":"","ucode":"6B86D4D538BDF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325398,"discussion_content":"这个得看操作系统具体实现，有可能不是直接放链表尾部，内存链表可能按内存大小进行排序","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1605285765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1281480,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8d/c8/3ffed92b.jpg","nickname":"徐培","note":"","ucode":"0020C302D02C34","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312150,"discussion_content":"释放最终还是要交给操作系统底层去操作的，而Linux底层内存管理有一种叫做伙伴系统的东西。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602597547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2326134,"avatar":"https://static001.geekbang.org/account/avatar/00/23/7e/76/368394bf.jpg","nickname":"哦","note":"","ucode":"C776659DED9D79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386899,"discussion_content":"系统调用，陷入内核，上下文切换都是需要时间的。具体到实际肯定不是简单的移动指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627886637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371642,"discussion_content":"hash里全是指针，一个指针就就是一块内存，就要放一次","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619881696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268603,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/7b/7481a340.jpg","nickname":"一只牛","note":"","ucode":"32950C7C3F5997","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318854,"discussion_content":"数据太多，量变引起质变","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603867934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248477,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1600175841,"is_pvip":true,"discussion_count":3,"race_medal":1,"score":"27369979617","product_id":100056701,"comment_content":"在删除一个 大 key 的时候，redis 把这个任务放到队列，实际还没有执行删除操作，这时候马上来个查询查刚才删除的 key. 这时候会查询到吗？ Redis 是怎么处理这种情况的？","like_count":7,"discussions":[{"author":{"id":1317999,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","nickname":"嘉木","note":"","ucode":"AF4877693782C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393799,"discussion_content":"删除全局hash键，就查不到了；value对象的内存放到异步线程释放","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1631604240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2253496,"avatar":"","nickname":"Geek_3d87cb","note":"","ucode":"F09334D60C3BC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337966,"discussion_content":"应该只会删除掉全局的hash键,内存释放异步执行","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609138962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1649662,"avatar":"https://static001.geekbang.org/account/avatar/00/19/2b/fe/7925eb7e.jpg","nickname":"pdf","note":"","ucode":"A44250955878BB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336397,"discussion_content":"标记删除","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608563674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248122,"user_name":"漫步oo0云端","can_delete":false,"product_type":"c1","uid":1427152,"ip_address":"","ucode":"4906095751D7B0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppZl39m2knwLH6PIia5YQTOWSOTGhy8ZZAutUIrxKOYFCtLLLYb1OZvIVVLzL7Y8eglKFe4Sib9D7g/132","comment_is_top":false,"comment_ctime":1600038274,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23074874754","product_id":100056701,"comment_content":"今天学习了5种阻塞点，请问老师，后面会学习，当redis发生阻塞时如何分析是什么操作导致的这个技能吗？","like_count":5,"discussions":[{"author":{"id":1336009,"avatar":"https://static001.geekbang.org/account/avatar/00/14/62/c9/7da27891.jpg","nickname":"DKSky","note":"","ucode":"69371A81033949","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305859,"discussion_content":"一般看慢任务（slowlog），或者当时是否在做aof操作","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600095685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341176,"user_name":"Geek_1b4c8","can_delete":false,"product_type":"c1","uid":1972308,"ip_address":"","ucode":"1B446E400D70F0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJlZSBIXmp6PQWeibP4iaztdX3hF3o2p5EJZGNBN9aILibIj5JHVFUeqYFEOv0a7tHs6R3pOsXpta0qQ/132","comment_is_top":false,"comment_ctime":1649403228,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10239337820","product_id":100056701,"comment_content":"异步删除key时，如果删除操作在任务队列里面还未被子线程执行，此时如果来了get查询操作，是否会返回数据吗，异步删除时是否会先标识为删除吗","like_count":2},{"had_liked":false,"id":248187,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1600054618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189989210","product_id":100056701,"comment_content":"写操作是否在关键路径，需要看使用方是否需要确认写入已经完成。","like_count":2},{"had_liked":false,"id":248168,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1600049772,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"10189984364","product_id":100056701,"comment_content":"当 AOF 日志配置成 everysec 选项后，主线程会把 AOF 写日志操作封装成一个任务，也放到任务队列中。后台子线程读取任务后，然后写入AOF日志。请问老师，如果写入操作比较频繁，是否也会引起redis延迟增大呢？","like_count":2,"discussions":[{"author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305788,"discussion_content":"写入操作频繁更应该用异步的子线程，写内存总比写磁盘好吧。如果异步子线程都扛不住，主线程直接写磁盘更扛不住了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600084971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286239,"user_name":"Geek_77c5bf","can_delete":false,"product_type":"c1","uid":2423085,"ip_address":"","ucode":"9C850E34868C7D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKcgJZ4M0hFDvia4IicRiaPaAfKoDBxTYI22Nduibs0ThDFA6s54uztEo5qaVP1TfvkRrnnDSYoHSFicng/132","comment_is_top":false,"comment_ctime":1617204952,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5912172248","product_id":100056701,"comment_content":"老师我一直有个问题，你上面说，如果是读操作。读操作是主线程来处理查询并返回的吗？意思是同步的？我的理解，客户端的确是一直在等待结果，但是redis是异步的，是基于事件通知回调机制，等redis查到结果，再socket通知客户端。希望老师帮忙解答，困扰我很久","like_count":1,"discussions":[{"author":{"id":1035612,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","nickname":"刘強","note":"","ucode":"B2E41BB894A727","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378140,"discussion_content":"网上的文章翻来翻去，还不如去看看redis源码。整明白了源码，这些文章都是垃圾，不要在垃圾上浪费时间。这是我的经验。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623065857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1136421,"avatar":"https://static001.geekbang.org/account/avatar/00/11/57/25/956ee90f.jpg","nickname":"Max","note":"","ucode":"B705CF0314D84D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532790,"discussion_content":"场景不一样，一般情况下，这里面我们说的get都是要同步返回结果的。你说的这种场景，是客户端已经接受了异步的情况，并且做了支持才可以（不管使用消息队列还是socket通知，都增加了客户端的开发成本）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637685742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264334,"user_name":"大上海","can_delete":false,"product_type":"c1","uid":1092861,"ip_address":"","ucode":"3969C018D6C0DC","user_header":"https://static001.geekbang.org/account/avatar/00/10/ac/fd/f70a6e3e.jpg","comment_is_top":false,"comment_ctime":1606441647,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5901408943","product_id":100056701,"comment_content":"老师，大key的查询也会阻塞，这个能介绍一下原理吗？","like_count":1,"discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376233,"discussion_content":"如果是O(N)级别查询 就会阻塞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622031270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250660,"user_name":"dfuru","can_delete":false,"product_type":"c1","uid":2110772,"ip_address":"","ucode":"0222FADA093D95","user_header":"","comment_is_top":false,"comment_ctime":1601188442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5896155738","product_id":100056701,"comment_content":"1. 主线程接收到SET、HSET、SADD操作命令后，要返回成功或失败。如重复增加需要返回失败，判断是否重复则需要访问集合数据，所以是关键关键路径操作。<br>   为保证读写一致性，也需要保证写入成功后再返回。<br>2. 若不是关键路径操作，主线程将操作放入任务队列，再由后台子线程写入集合。若后台子线程尚未执行，主线程进行读操作，则读失败。<br>   若发生宕机，在队列中的写操作，也会丢失。<br>","like_count":1},{"had_liked":false,"id":248676,"user_name":"Geek_lc","can_delete":false,"product_type":"c1","uid":1590580,"ip_address":"","ucode":"B854E84A98C8C9","user_header":"","comment_is_top":false,"comment_ctime":1600259830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5895227126","product_id":100056701,"comment_content":"当删除bigkey的时候会有阻塞，如果新增一个bigkey，会有阻塞吗？是阻塞在AOF还是内存分配？","like_count":1},{"had_liked":false,"id":354408,"user_name":"怡红楼总裁","can_delete":false,"product_type":"c1","uid":1263044,"ip_address":"上海","ucode":"DDF513B06C1A98","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqzGbatqxWianMyppPS2XUgEJHLGW3ib0l3HsoOnYKKJJlUekv2R7Sf7zkzlnjQl5eibZSZNxDUysKQ/132","comment_is_top":false,"comment_ctime":1660370730,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1660370730","product_id":100056701,"comment_content":"老师，文中说&quot;Redis 实例需要保证 AOF 日志中的操作记录已经落盘，这个操作虽然需要实例等待，但它并不会返回具体的数据结果给实例。所以，我们也可以启动一个子线程来执行 AOF 日志的同步写，而不用让主线程等待 AOF 日志的写完成。&quot;这样是不是在aof落盘机制设置了always的时候，不会优化异步呢","like_count":0},{"had_liked":false,"id":353573,"user_name":"going","can_delete":false,"product_type":"c1","uid":2313353,"ip_address":"北京","ucode":"3AA83F9B07BE8B","user_header":"https://static001.geekbang.org/account/avatar/00/23/4c/89/82a3ee04.jpg","comment_is_top":false,"comment_ctime":1659577465,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659577465","product_id":100056701,"comment_content":"是因为子实例在进行同步的时候需要告知客户端自己同步完成的结果吗，为什么他也是关键路径上的操作。","like_count":0},{"had_liked":false,"id":353018,"user_name":"飞龙","can_delete":false,"product_type":"c1","uid":2276763,"ip_address":"北京","ucode":"EC83FE73985491","user_header":"https://static001.geekbang.org/account/avatar/00/22/bd/9b/366bb87b.jpg","comment_is_top":false,"comment_ctime":1659080453,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1659080453","product_id":100056701,"comment_content":"可以查看redis命令执行的时间吗，例如del一个key，用了多长时间","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587426,"discussion_content":"用slowlog","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663050236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351022,"user_name":"XXG","can_delete":false,"product_type":"c1","uid":1219238,"ip_address":"","ucode":"55258F95874BF4","user_header":"https://static001.geekbang.org/account/avatar/00/12/9a/a6/29ac6f6a.jpg","comment_is_top":false,"comment_ctime":1657460380,"is_pvip":true,"discussion_count":1,"race_medal":4,"score":"1657460380","product_id":100056701,"comment_content":"老师，有个疑问，清空数据库操作异步的意义是什么？不管是主库还是从库，就算异步清空数据库，没有执行完成也不能干别的吧","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587425,"discussion_content":"异步删除分2步：1、同步删除指针指向；2、异步释放value的内存，所以只要完成第一步，就能进行后续的操作，第二步可以子线程慢慢做","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663050226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341552,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1649688075,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649688075","product_id":100056701,"comment_content":"写操作虽然没有具体返回值，但是客户端需要知道写入的结果，因此属于关键链路","like_count":0},{"had_liked":false,"id":339824,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1648425091,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648425091","product_id":100056701,"comment_content":"异步删除，如果线程1删除key为a的，但是是异步删除，还没来得及执行的异步删除。<br>这时线程2来取这个key为a的，我理解这种情况是需要有机制保障线程2读取不到的，比如在线程1删除的时候先对key为a的打个清除标","like_count":0},{"had_liked":false,"id":334521,"user_name":"日月星辰","can_delete":false,"product_type":"c1","uid":1796332,"ip_address":"","ucode":"4E9F48153B2D8B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/68/ec/eb0ebbb6.jpg","comment_is_top":false,"comment_ctime":1644984234,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1644984234","product_id":100056701,"comment_content":"这里的子线程是子线程还是子进程？","like_count":0,"discussions":[{"author":{"id":2632273,"avatar":"https://static001.geekbang.org/account/avatar/00/28/2a/51/4694740b.jpg","nickname":"根音战士","note":"","ucode":"F2EBE390E32480","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587972,"discussion_content":"都叫子线程了，你还问是子线程还是子进程？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663413456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331274,"user_name":"1634LM","can_delete":false,"product_type":"c1","uid":1483821,"ip_address":"","ucode":"0F5FA57B69788C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0G3cibDykvgIkomb5QrjBGuiaf5rJG2317JN1sePZ589IjUcMTOF4ZMrKVYU4ywfq1qfREqCW9Zww/132","comment_is_top":false,"comment_ctime":1642514300,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1642514300","product_id":100056701,"comment_content":"您好 蒋老师! 什么是IO多路复用呢,可以用通俗的语言解释一下吗? 谢谢","like_count":0,"discussions":[{"author":{"id":2061045,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/72/f5/35f2f763.jpg","nickname":"路小鹿","note":"","ucode":"331F70041CE8DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574786,"discussion_content":"IO 多路复用在本教程的第 3 讲有讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654337837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329591,"user_name":"Geek_9bd7ef","can_delete":false,"product_type":"c1","uid":2649828,"ip_address":"","ucode":"E68C656EE1EBAC","user_header":"https://static001.geekbang.org/account/avatar/00/28/6e/e4/9901994d.jpg","comment_is_top":false,"comment_ctime":1641437669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641437669","product_id":100056701,"comment_content":"”pthread_create 函数创建 3 个子线程，分别由它们负责 AOF 日志写操作、键值对删除以及文件关闭的异步执行“ 请问下这里面的文件关闭指的是加载文件到内存的时候吗？<br>","like_count":0},{"had_liked":false,"id":326578,"user_name":"树心","can_delete":false,"product_type":"c1","uid":1589523,"ip_address":"","ucode":"6C329F0FF798B9","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","comment_is_top":false,"comment_ctime":1639569366,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1639569366","product_id":100056701,"comment_content":"惰性删除中，如果在处理完删除之间再次读还能读到吗？如果不能是如何保证的呢？","like_count":0},{"had_liked":false,"id":319192,"user_name":"Limmy","can_delete":false,"product_type":"c1","uid":1289329,"ip_address":"","ucode":"67E91AA8EC0729","user_header":"https://static001.geekbang.org/account/avatar/00/13/ac/71/1661342c.jpg","comment_is_top":false,"comment_ctime":1635665801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635665801","product_id":100056701,"comment_content":"异步删除的话，如果真正删除之前的读取是不是还是能够读到呢。如果不是的话，是否会阻塞后面对该值的读取和写操作？","like_count":0},{"had_liked":false,"id":312369,"user_name":"倪昊","can_delete":false,"product_type":"c1","uid":1236631,"ip_address":"","ucode":"790CB649341D37","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/97/cda3f551.jpg","comment_is_top":false,"comment_ctime":1631777685,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1631777685","product_id":100056701,"comment_content":"异步删除的话，如果在还没删除完之前收到了一条读的命令，会返回什么结果呢？","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404937,"discussion_content":"读不到，即使开启惰性删除，全局hash表删除也是同步的，只是释放内存等后续操作是异步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634466302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306444,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1628564586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628564586","product_id":100056701,"comment_content":"我认为在,因为Reids的写操作可能后续跟着读请求,直接放入异步子线程的话,可能会出现子线程没有及时处理,导致读取的数据不符的问题,所以应该是关键路径上的","like_count":0},{"had_liked":false,"id":300856,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1625405945,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625405945","product_id":100056701,"comment_content":"阻塞点：<br>1.面向客户端<br>网络IO（不可控）<br>集合及big key查询，新增，修改，删除操作<br>查询不能异步操作<br>删除可异步，新增修改看业务场景,redis因为是通用的存储，所以新增和修改都是同步操作(底层的持久化可以是异步)。<br>2.主从同步<br>从库flush db（可以异步），并加载rdb文件(不能异步，客户端读取或操作的时候依赖这个数据)<br>3.集群分片，rehash<br>这里cluster可以做渐近式rehash<br>4.磁盘交互<br>AOF同步刷盘<br><br>收获：<br>对于异步要看业务场景，如果是影响业务的是不能异步的。<br>其次redis4对于已经开启了异步删除的情况，还是会考虑清除key的成本，如果成本不大就直接清掉了。<br>这个一方面是看是否是连续内存的元素，如果是直接在主线程清除。否则就看元素数量及大小了。","like_count":0},{"had_liked":false,"id":299566,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1624713601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624713601","product_id":100056701,"comment_content":"如果aof配置选项是always的话，应该不能使用子线程异步执行这个落日志操作把？<br>因为我理解always应该是为了保证数据安全性，如果异步执行，就失去了保证数据安全性的意义。","like_count":0},{"had_liked":false,"id":294328,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1621901524,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1621901524","product_id":100056701,"comment_content":"这篇总结得很棒！","like_count":0},{"had_liked":false,"id":291927,"user_name":"活着","can_delete":false,"product_type":"c1","uid":1080023,"ip_address":"","ucode":"29B91C57E94E65","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/d7/8d64cfb1.jpg","comment_is_top":false,"comment_ctime":1620610331,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1620610331","product_id":100056701,"comment_content":"主从复制FLUSHDB 如果改为异步 后续从加rdb文件加载的数据是否会被误删除","like_count":0,"discussions":[{"author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373982,"discussion_content":"肯定严格按照逻辑先后顺序执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620957814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289497,"user_name":"沧颜","can_delete":false,"product_type":"c1","uid":1517966,"ip_address":"","ucode":"143CF912BC7247","user_header":"https://static001.geekbang.org/account/avatar/00/17/29/8e/bdd22627.jpg","comment_is_top":false,"comment_ctime":1619054382,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619054382","product_id":100056701,"comment_content":"删除如果是异步操作，那读取有没有可能读到删除的值","like_count":0},{"had_liked":false,"id":285109,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1616630070,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1616630070","product_id":100056701,"comment_content":"Redis 实例运行时 4 大类交互对象的图非常漂亮，一图顶千言。<br><br>Redis 阻塞点<br><br>1. 集合的全量查询、聚合<br>2. bigkey 删除（释放内存）<br>3. 清空数据<br>4. AOF 日志同步写<br>5. （从库）加载 RDB 文件<br>6. Redis Cluster 同步迁移 bigkey （后续有解决方案）<br><br>关键操作（读操作）<br><br>- 集合的全量查询和删除<br>- 从库加载 RDB<br><br>pthread_create 子线程<br><br>1. AOF 日志写操作<br>2. 键值对删除<br>3. 文件关闭<br><br>如果是 Redis 4.0 以前的版本，bigkey 删除的时候，如果是集合类型可以先使用 SCAN 命令读取（一部分）数据，然后再进行删除；如果是 Hash 类型，那么搭配使用 HSCAN 和 HDEL，把删除压力分摊到多次操作中。<br><br>集合全量查询和聚合操作也可以使用 SCAN 命令，分批读取数据，在客户端聚合<br>解决从库加载 RDB 文件的阻塞，可以把主库数据量控制在 2~4GB<br><br>对于课后题目 Redis 的写操作（SET、HSET、SADD）一般来说应该不在关键路径上。主要还是看业务的需要，如果是要求实时读取写入内容，那么写操作就在关键路径上；一般情况下，不要求，就不在关键路径上。<br><br>可以对照的是，对于关系型数据库，特别是记录日志的，写操作应该在关键路径上。<br><br>看了课代表 @Kaito 的回答，我也只好膜拜一下了，特别是对于 lazy free 的补充，我觉的完全可以放到专栏正文中去。","like_count":0},{"had_liked":false,"id":282931,"user_name":"stock石头","can_delete":false,"product_type":"c1","uid":1269523,"ip_address":"","ucode":"ED8AEBA09A5A31","user_header":"https://static001.geekbang.org/account/avatar/00/13/5f/13/d22a0ff0.jpg","comment_is_top":false,"comment_ctime":1615468722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615468722","product_id":100056701,"comment_content":"想问一个对于聚合操作的疑问。比如使用ZSET存储了时间序列数据 timestamp1_value1, timestamp2_value2......，想做distinct、sum之类的聚合操作。在应用时，这个聚合操作通过lua脚本，放到redis服务端实现有必要吗？还是通过zrangebyscore来数据到本地更好？","like_count":0},{"had_liked":false,"id":281539,"user_name":"ladba","can_delete":false,"product_type":"c1","uid":1232522,"ip_address":"","ucode":"78ADCE66B403A4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/K8uoNDBqLNQicA8KOecJIb6DWrt7YJuy99VsVpAqPZia2SzSGyECAaPhFU5td1cO9wqjWIqLWIzfxd5DqmUXTKibw/132","comment_is_top":false,"comment_ctime":1614779294,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1614779294","product_id":100056701,"comment_content":"当 AOF 日志配置成 everysec 选项后，主线程会把 AOF 写日志操作封装成一个任务，也放到任务队列中。后台子线程读取任务后，然后写入AOF日志。--那这还叫同步写吗？不就成异步的了吗？那这个时候宕机了，数据不就丢失了吗？","like_count":0,"discussions":[{"author":{"id":2028938,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/8a/dc9a23a1.jpg","nickname":"续费专用","note":"","ucode":"1B585A131B64B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388193,"discussion_content":"Everysec本来就不保证数据完全不丢失","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628648121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275588,"user_name":"少年","can_delete":false,"product_type":"c1","uid":1009178,"ip_address":"","ucode":"2B6BCC526A5F2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/1a/9e9f7d58.jpg","comment_is_top":false,"comment_ctime":1611591025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611591025","product_id":100056701,"comment_content":"“Redis 主线程启动后，会使用操作系统提供的 pthread_create 函数创建 3 个子线程，分别由它们负责 AOF 日志写操作、键值对删除以及文件关闭的异步执行”<br>这句话跟图片有些矛盾？","like_count":0},{"had_liked":false,"id":263267,"user_name":"漂泊者及其影子","can_delete":false,"product_type":"c1","uid":1119979,"ip_address":"","ucode":"13FE760FE8B111","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/eb/30864e40.jpg","comment_is_top":false,"comment_ctime":1606083765,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1606083765","product_id":100056701,"comment_content":"主从节点交互时主库也会阻塞吗？","like_count":0,"discussions":[{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339553,"discussion_content":"会 , fork子进程时会阻塞一下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609730237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260792,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1605106861,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1605106861","product_id":100056701,"comment_content":"键值对的增删改查操作是 Redis 和客户端交互的主要部分，也是 Redis 主线程执行的主要任务。所以，复杂度高的增删改查操作肯定会阻塞 Redis。","like_count":0},{"had_liked":false,"id":260791,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1605106842,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1605106842","product_id":100056701,"comment_content":"如果客户端依赖操作返回值的不同，进而需要处理不同的业务逻辑，那么HSET和SADD操作算关键路径，而SET操作不算关键路径。因为HSET和SADD操作，如果field或member不存在时，Redis结果会返回1，否则返回0。而SET操作返回的结果都是OK，客户端不需要关心结果有什么不同。","like_count":0},{"had_liked":false,"id":258194,"user_name":"Gypsophila丶💐","can_delete":false,"product_type":"c1","uid":2267827,"ip_address":"","ucode":"6213EBAEBC7171","user_header":"https://static001.geekbang.org/account/avatar/00/22/9a/b3/7055134b.jpg","comment_is_top":false,"comment_ctime":1604324697,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1604324697","product_id":100056701,"comment_content":"用SCAN的方式去删除集合类型数据以减少主线程的阻塞,但论效率上讲,这增加了TCP传输的次数,对于这一点该怎么权衡呢?","like_count":0,"discussions":[{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339555,"discussion_content":"分治思想在计算机体系无处不在","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609730305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250237,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1601000835,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601000835","product_id":100056701,"comment_content":"我觉得是在的，针对一个写操作，可能紧接着就会有下一个读操作，如果是异步的话，可能会发生写失败或者写延迟，导致出现脏读。删除操作即使我删除失败不影响正常数据的准确性。判断的标准就是异步操作能不能保证数据的准确性","like_count":0},{"had_liked":false,"id":249611,"user_name":"Mr.蜜","can_delete":false,"product_type":"c1","uid":1035257,"ip_address":"","ucode":"C911B81198B3F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","comment_is_top":false,"comment_ctime":1600705856,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1600705856","product_id":100056701,"comment_content":"看到从库读rdb文件，接着之前说过如果从库同步窗口超时，那么会重新同步新的rdb文件，那么我有一个问题，就是会不会存在一种可能，就是从库每次同步完rdb文件后，其同步窗口都是超时的？","like_count":0,"discussions":[{"author":{"id":1221953,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/41/f480323c.jpg","nickname":"齐哥哥","note":"","ucode":"867D3EBB5BD608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310474,"discussion_content":"在做全量同步时，master会把写命令放到缓存，rdb同步完后继续把缓存的写命令同步到slave，所以不会出现一直超时","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601870221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1035257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","nickname":"Mr.蜜","note":"","ucode":"C911B81198B3F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1221953,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/41/f480323c.jpg","nickname":"齐哥哥","note":"","ucode":"867D3EBB5BD608","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310547,"discussion_content":"“rdb同步完后继续把缓存的写命令同步到slave”，如果这个过程就已经超过缓存容量了呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601901046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310474,"ip_address":""},"score":310547,"extra":""},{"author":{"id":1221953,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/41/f480323c.jpg","nickname":"齐哥哥","note":"","ucode":"867D3EBB5BD608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1035257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","nickname":"Mr.蜜","note":"","ucode":"C911B81198B3F5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310673,"discussion_content":"这样会进入一个死循环，不过缓冲区大小会根据业务估算一个合适的值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601990958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310547,"ip_address":""},"score":310673,"extra":""}]}]},{"had_liked":false,"id":249538,"user_name":"黯言","can_delete":false,"product_type":"c1","uid":1200106,"ip_address":"","ucode":"11D7CAC0CE27D1","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/ea/05056ee0.jpg","comment_is_top":false,"comment_ctime":1600686332,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1600686332","product_id":100056701,"comment_content":"异步处理，redis出现异常重启，会不会导致数据丢失？","like_count":0,"discussions":[{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312543,"discussion_content":"会出现数据不一致","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602731260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248482,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1600176810,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1600176810","product_id":100056701,"comment_content":"lazy-free 可以提高Redis 性能，为什么默认关闭呢？ 这是处于什么考虑的","like_count":0},{"had_liked":false,"id":248263,"user_name":"小袁","can_delete":false,"product_type":"c1","uid":1811495,"ip_address":"","ucode":"3F5D8721F577D9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","comment_is_top":false,"comment_ctime":1600083672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600083672","product_id":100056701,"comment_content":"我听说网络部分已经有多线程实现，这里已经不是问题了吧？","like_count":0},{"had_liked":false,"id":248165,"user_name":"MClink","can_delete":false,"product_type":"c1","uid":1435733,"ip_address":"","ucode":"F479190923355C","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","comment_is_top":false,"comment_ctime":1600047619,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1600047619","product_id":100056701,"comment_content":"想问一个问题，Redis 自己会不会维护一个可用内存区域呢，我看过一些工具的设计，有些都是向 os 申请到内存空间后，都会通过标记作用（即标记为可复用，而不是真正的释放内存）来管理以往申请过的内存。文中提到的空闲内存块的链表，应该是 os 层级的把，那 Redis 有没有相关的处理呢？","like_count":0,"discussions":[{"author":{"id":1336009,"avatar":"https://static001.geekbang.org/account/avatar/00/14/62/c9/7da27891.jpg","nickname":"DKSky","note":"","ucode":"69371A81033949","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305849,"discussion_content":"有吧，内存分配器（默认jemalloc）的作用吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600094250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305789,"discussion_content":"个人觉得应该会这样做。不然马上来一个查询刚删除key的读操作，就麻烦了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600085033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}