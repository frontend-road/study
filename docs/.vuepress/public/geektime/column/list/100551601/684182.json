{"id":684182,"title":"22｜消息队列：消息队列可以用来解决什么问题？","content":"<p>你好，我是大明。</p><p>从今天开始我们要学习一个新的主题——消息队列。一直以来，消息队列都是业界用于构建高并发、高可用系统的利器。即便是简单的业务开发，也可以通过消息队列的解耦、异步特性来提高性能和可用性。</p><p>消息队列和数据库、缓存并列为面试中最热门的三个中间件。消息队列本身的知识也很多，理论和实践结合紧密，也是面试中的难题。所以在消息队列这个主题下，我会带你学习最热门的面试点，确保你可以在面试中保持竞争优势。今天我们就先来学习第一个面试主题：消息队列的使用场景。</p><h2>前置知识</h2><p>消息队列最鲜明的特性是<strong>异步、削峰、解耦</strong>。也有人说这是消息队列的使用场景、用途，并且额外加了几个，比如日志处理和消息通讯。但是实际上，日志处理和消息通讯可以看作是消息队列的具体落地案例。比如日志处理同时利用了消息队列异步、解耦和削峰的特性。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/a4/f5832b15e1b1fee1356d1fd29976fda4.png?wh=1920x780\" alt=\"图片\"></p><p>消息通讯是指即时通讯之类的工具，比如说你使用的微信、QQ都是通讯工具。通讯工具主要利用的是异步和解耦特性，不过要是你觉得你的通讯工具会有高并发的收发消息场景，也可以看作是削峰。</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/12/5e5fb2c430e38b2d1342607632de6712.png?wh=1920x948\" alt=\"图片\"></p><p>基本上一切消息队列的应用场景，都是围绕异步、解耦和削峰三个特性来设计的。反过来也可以说，如果你有一些需要异步、解耦和削峰的需求，那么消息队列就是最合适的工具。</p><!-- [[[read_end]]] --><p>此外消息队列还可以用来实现事件驱动架构，这个也是你后面要学习的亮点方案。</p><h2>面试准备</h2><p>在准备消息队列面试的时候，你需要搞清楚下面几点。</p><ul>\n<li>你们公司有没有使用消息队列？主要用于解决什么场景的问题？</li>\n<li>如果使用了消息队列，那么在具体的场景下不使用消息队列是否可行？和使用消息队列的方案比起来，有什么优缺点？</li>\n<li>你们公司用的是什么消息队列，它有什么优缺点？</li>\n</ul><p>在前置知识里面我提到了消息队列的三种特性：异步、解耦和削峰。你可以在公司内部，或者自己的过往工作经验里面各找一个案例。虽然我提到过，一个案例可能同时体现了异步、解耦和削峰三个特性，但是你还是需要多准备几个案例，准备得更充分一些。</p><p>面试官如果问到了下面这些问题，你都可以直接用这节课的内容回答，或者引导到这里。</p><ul>\n<li>你有没有用过消息队列？用来解决什么问题？</li>\n<li>你是否听过延时队列？怎么实现延时队列？</li>\n<li>如何设计一个秒杀架构？在回答的时候可以强调一下消息队列的作用。</li>\n<li>什么是事件驱动架构？</li>\n</ul><p>我建议你有机会的话，在遇到一些非常复杂棘手的业务时可以考虑使用事件驱动来解决。我个人认为越复杂的业务系统，应用事件驱动就越有价值。</p><h2>基本思路</h2><p>首先在简历上你就应该写上自己擅长消息队列或者说自己能够用消息队列解决问题。后续面试官在提问的时候就会考虑面消息队列这方面的内容。面试官可能会先问你用消息队列解决过什么问题，那么你回答你准备的案例就可以。</p><p>在介绍了案例之后，面试官大概率会问一个问题，就是在具体的场景下，你为什么非得使用消息队列？</p><p>在前置知识里面我已经解释了两个场景：日志处理和消息通讯。我这里再补充几个。这些场景都是那种引导性非常强的场景，也就是说，你可以在这些场景下把话题引导到别的主题下。</p><h3>秒杀场景</h3><p>秒杀也是面试中的一个大热点。一般秒杀的架构设计中都会使用消息队列，同时利用消息队列三个特性。</p><p>你可以看一下一个比较简单的秒杀架构图是怎样的。</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/4a/8b1b2602760736c6d40f09c00076954a.png?wh=1920x875\" alt=\"图片\"></p><p>在消息队列之前，要对用户请求做一些校验，比如说这个用户是否已经参加过秒杀了。其次要扣库存，扣库存成功才算是抢到了。紧接着就是把这个请求丢到消息队列里，后续异步创建订单，并且完成支付。</p><p>那么这种设计的精髓就是利用消息队列把整个秒杀过程分成轻重两个部分。</p><ul>\n<li>在进入消息队列之前的操作都是轻量级的，一般也就是内存计算或者访问一些 Redis，所以你可以认为瓶颈基本上取决于 Redis 的性能。</li>\n<li>而进入消息队列之后就是非常重量级的操作了，比如说要进一步验证交易的合法性，操作数据库等。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/a2/d3/a2e37cf53c064b23637a7edef119c1d3.png?wh=1920x875\" alt=\"图片\"></p><p>所以你可以这样介绍秒杀方案，关键词是<strong>轻重之分</strong>。</p><blockquote>\n<p>消息队列还经常被用在秒杀场景里面。最基本的架构是秒杀请求进来之后，会有一个轻量级的服务。这个服务就是做一些限流、请求校验和库存扣减的事情。这些事情差不多都是内存操作，最多操作 Redis。当库存扣减成功之后，就会把秒杀请求丢到一个消息队列。<br>\n&nbsp;<br>\n然后订单服务会从消息队列里面将请求拿出来，真正创建订单，并且提示用户支付。这一部分就是重量级的操作，无法支撑大规模并发。所以，在这个场景里面可以把消息队列看作是一个轻重操作的分界线。</p>\n</blockquote><p>这个场景介绍完，面试官就可能会进一步问你和秒杀有关的内容，比如说扣减了库存之后，万一用户没有支付怎么办，于是你就可以用下面这个案例了。</p><h3>订单超时取消</h3><p>在电商里面，如果用户下单之后一直没有支付，那么这个订单就会被取消，从而释放库存。</p><p>订单超时取消在行业内有很多种做法，这里我只介绍使用消息队列的解决方案。要想利用消息队列实现订单超时取消功能，需要使用<strong>延时消息</strong>。所谓的延时消息，就是发送者在发送之后，要过一段时间，消费者才能消费的消息。</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/f7/1ed0b3815036a5d7573fff30b1b92af7.png?wh=1920x878\" alt=\"图片\"></p><p>你可以这样介绍你的方案。</p><blockquote>\n<p>消息队列也可以用于订单超时取消这种场景。在这种场景下，我们可以准备一个延时队列，比如说超时时间是 30 分钟，那么延时也是 30 分钟。<br>\n&nbsp;<br>\n但是消费的时候要小心并发问题，就是在 30 分钟这一个时刻，一边用户支付，一边消费者也消费超时消息，就会有并发问题。解决思路有很多，可以使用分布式锁、乐观锁，也可以使用 SELECT FOR UPDATE 锁住订单，防止并发操作。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/00/8e/00a06b42e6b876b5aa82404d1a9e7d8e.png?wh=1920x895\" alt=\"图片\"></p><p>这里我提到了并发问题，在解决并发问题的思路中我也提到了之前数据库部分我们学过的 SELECT FOR  UPDATE 和乐观锁，记得复习一下。</p><p>这里我再额外解释一下乐观锁方案的关键步骤。乐观锁方案就是在你把订单更新为超时状态的时候，需要<strong>确保原始状态还是未支付</strong>。</p><pre><code class=\"language-sql\">UPDATE `order` SET `status`=\"超时未支付\" \nWHERE `id`=123 AND `status`=\"未支付\"\n</code></pre><p>类似地，在支付那边也需要确保只有在 status 是未支付的时候才能发起支付。</p><p>这个场景主要是把话题引导到延时消息，延时消息我们后面会详细分析。目前主流的消息队列中 RocketMQ 是支持延时消息的，它有插件支持。但是 Kafka 不支持，不过后续我也会教你怎么用 Kafka 支持延时消息。所以当面试官问你“为什么不用 Kafka”这种问题，你可以把 Kafka 不支持延时消息作为理由之一。</p><h2>亮点方案</h2><p>这节课我给你准备了一个理论上的亮点和一个高级并且复杂的方案。第一个亮点是回答为什么一定要使用消息队列。前面我给你讲过消息队列广泛应用于各种场景，那么你有没有深入思考过，为什么你非得使用消息队列呢？</p><p>换一句话来说，不用消息队列会怎样？用了又有什么好处呢？</p><h3>为什么一定要使用消息队列？</h3><p>这个问题本身也是反直觉的。也就是说因为业界一直说消息队列很好很好，那么如果你没有思考过这个问题，面试官突如其来问一下，你就不知道怎么回答了。</p><p>我们先从创建订单的典型场景看起。在订单创建之后，要通知很多下游，正常做法都是发送一个订单创建的消息，然后关心订单创建的业务方各自去订阅这个消息就可以了。</p><p>这里面试官就会问，为什么订单服务不直接调用各个业务方呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/17/26/1764ae0cffcdddd95e49277e2dc9c626.png?wh=1920x812\" alt=\"图片\"></p><p><img src=\"https://static001.geekbang.org/resource/image/68/23/6899318310095f93d40b03409e9c7023.png?wh=1920x812\" alt=\"图片\"></p><p>类似的场景还有，在消息通讯里面为什么服务端不直接把消息转发给各个接收者呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/e8/3f/e833f95f2b5dc437a418af4e6164783f.png?wh=1920x658\" alt=\"图片\"></p><p>这一类的问题，本质上都是在问：<strong>在这个业务场景下，不异步、不解耦或者不削峰会有什么问题</strong>？</p><p>那么不用消息队列究竟有什么问题呢？答案是性能差、扩展性差、可用性差。</p><p>这里有一个不太好的回答，就是耦合严重。这个回答只能说你答了，但是回答得不到位。毕竟你没有解耦自然就是耦合严重，所以面试官希望你深入解释的是耦合严重会带来什么后果。你其实可以这么说：</p><blockquote>\n<p>同步调用方案相比引入消息队列有三个缺陷，分别是性能差、可扩展性差和可用性差。</p>\n</blockquote><h4>性能差</h4><p>性能差是因为你需要停下来等全部调用完成才可以返回响应。</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/12/f679211007f1d5d2d9a5d17de2c2fb12.png?wh=1920x1079\" alt=\"图片\"></p><blockquote>\n<p>业务方必须停下来等待结果，如果我这里需要通知三个下游，那么就需要发起三次调用，并且等它们各自的结果返回之后才能继续往下执行，或者返回响应，这样性能太差了。</p>\n</blockquote><p>紧接着面试官就可能和你抬扛：“如果我并发调用呢？性能也很好啊！”他隐含的意思就是你可以开启多个线程或者协程，并发调用所有的下游。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/4b/3a9c7b1e733371b1d80d36dcf1e9ab4b.png?wh=1920x1065\" alt=\"图片\"></p><p>但是，即便是<strong>并发调用性能也比使用消息队列差</strong>。</p><blockquote>\n<p>并发调用相比于使用消息队列，性能也更差。在并发调用的情况下，性能取决于最坏的那个同步调用什么时候返回结果。而正常我们丢一个消息到消息中间件上是很快的。</p>\n</blockquote><p>紧接着你可以补充一点，引出扩展性和可用性的话题。</p><blockquote>\n<p>并且，即便并发调用的性能损耗是可以接受的，但是扩展性和可用性还是解决不了。</p>\n</blockquote><h4>扩展性</h4><p>扩展性归根结底就是一句话：如果一个新的下游要接入进来有多难？在使用消息队列的时候，新的下游要接入，只需要自己去订阅消息就可以，完全不需要通知任何人。在公司里，可能就是你丢给下游一个文档，下游自己看看文档，知道订阅哪个 topic，消息生产速率有多高，差不多就能自己独立完成接入了。</p><p><img src=\"https://static001.geekbang.org/resource/image/c5/ac/c5d80d98cde37788d4b8c39a5bfb2fac.png?wh=1920x920\" alt=\"图片\"></p><p>但是如果是同步调用，事情就麻烦很多。你需要下游提供 RPC 服务地址（定位信息），根据下游的 API 设计构造请求、处理响应，再一起联调、测试、上线，遇到了 Bug 还得推诿扯皮一番。</p><p><img src=\"https://static001.geekbang.org/resource/image/85/c9/859fb2603f6d737bfe9f15f7137033c9.png?wh=1920x1052\" alt=\"图片\"></p><p>所以这里你可以这样回答。</p><blockquote>\n<p>在使用消息队列的情况下，消息发送者完全不关心谁会去消费这些消息。同样地，如果有一个新的业务方要订阅这个消息，它可以自主完成。而同步调用的时候，上游必须知道下游的接口，然后要知道如何构造请求、如何解析响应，还要联调、测试、上线，整个过程都得和下游密切合作，因此效率特别低，可扩展性很差。</p>\n</blockquote><p>但是这里你可以刷一个亮点，就是在类似的场景下，如果因为一些业务情况确实不能使用消息队列，那么可以考虑提供一个一致性的抽象来减轻这种接入的负担。</p><blockquote>\n<p>如果在某些场景下确实不能用消息队列，那么这个扩展性问题可以通过一些技术手段来缓解。比如说上游提供一整套的对接规范，包括 API 定义、请求和响应中每个字段的含义。这样下游就对着这个 API 定义来提供实现，上游就不需要适配每一个下游了。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/73/90/7306576de9c2e4a38748a0948d203e90.png?wh=1920x809\" alt=\"图片\"></p><p>然后你进一步总结。</p><blockquote>\n<p>这是对接众多下游的基本设计，可以充分保障高可扩展性和高研发效率。</p>\n</blockquote><h4>可用性</h4><p>在使用消息队列的方案中，你只需要确保自己把消息发送到了消息队列上，就认为操作已经成功了。</p><p>但是，在同步调用方案中，你必须要确保调用所有的下游都成功了才算是成功了。所以你还需要额外考虑部分成功部分失败的问题。</p><p>比如说在订单的例子里面，如果同步调用到推荐成功，但是到审计和搜索失败了，那么该怎么办？</p><p>所以这样来看，相比使用消息队列的方案，同步调用的方案更加容易出错，并且容错也更难。</p><h3>事件驱动</h3><p>事件驱动（Event-Driven）可以说是一种软件开发模式，也可以看作是一种架构。它的核心思想是通过把系统看作一系列事件的处理过程，来实现对系统的优化和重构。</p><p>你可以直观地理解成，整个系统不同组件之间的通信是通过事件来完成的。也就是组件 1 发送一个事件到消息队列上，然后组件 2 消费这个消息。组件 2 消费完成后再发出一个消息到消息队列。每一个事件就是一个消息。</p><p><img src=\"https://static001.geekbang.org/resource/image/ac/56/ac805acb49f7eb8939577f73baef2d56.png?wh=1920x732\" alt=\"图片\"></p><p>这些消息可能有不同的 Topic，也可能发送到不同的消息队列集群。但是毫无疑问它们要通过密切合作来解决一个业务问题。</p><p>它的优点十分明显。</p><ul>\n<li>低耦合性：各个组件只依赖消息队列，组件之间通过消息的定义间接地耦合在一起。换句话来说，组件只需要知道消息的定义，并不需要知道发送消息的组件是哪个。</li>\n<li>可扩展性：事件驱动的应用程序具有很强的扩展性，可以通过添加新的事件处理程序、组件等来实现系统的扩展和升级。</li>\n<li>高可用：可以充分利用消息队列的可靠性、可重复消费等特性，来保证消息发送、消费高可用，从而保证整个系统的高可用。</li>\n</ul><p>事件驱动适合用来解决一些<strong>复杂、步骤繁多、流程冗长</strong>的业务问题。在下面的亮点方案里面，我用的就是事件驱动结合 SAGA 分布式事务的方案。这个方案足够高级、冷僻、奇异。它原本用在一个大规模的分布式系统里面，是一个高性能和高可用的分布式事务解决方案。</p><p>你可以看一下事件驱动和 SAGA 结合之后的形态。</p><p><img src=\"https://static001.geekbang.org/resource/image/77/6b/77f0e01de943feb6885a690a6d3c856b.png?wh=1920x757\" alt=\"图片\"></p><p>也就是说，当某一个步骤完成之后，就会发出一个或者多个事件，驱动事务中的后续步骤。包括回滚也是这样，比如说发出一个代表某一个步骤执行失败的事件，对应的消费者就会去执行反向补偿步骤。</p><p><img src=\"https://static001.geekbang.org/resource/image/33/29/33344e60bcb5782a086f7c5584675629.png?wh=1920x815\" alt=\"图片\"></p><p>使用事件驱动的优点是低耦合、高扩展性、异步、高可用。不过在实时性上要比同步调用差一点。我用一个最简单的例子给你解释清楚它的运作。比如说你有一个分布式事务，就是要求先更新 DB，再更新缓存。那么在缓存更新失败的场景下，过程看起来就像图里展示的这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/66/bb/66b2cf98851930010f480dc07fd7d8bb.png?wh=1920x766\" alt=\"图片\"></p><p>其中还原 DB 是指你需要用原始数据更新回去，而不是数据库回滚操作，我之前在 SAGA 分布式事务里面就讲过的。当然，这个例子只是帮助你理解，正常来说这么简单的分布式事务是用不着 SAGA 的。</p><p>你可以考虑这样介绍这个方案。</p><blockquote>\n<p>之前我们公司用事件驱动实现了 SAGA 的分布式事务解决方案。基于事件驱动的 SAGA 模式就是在每一个步骤结束之后发送事件，不同的步骤会发送一个或者多个事件。然后消费者消费了消息之后，就开始执行下一个步骤。比如说在更新DB再更新缓存的场景里就可以这样用。这种形态和一般的事务比起来，优势是低耦合、高扩展、高可用。</p>\n</blockquote><p>在这个方案里面，面试官可能追问的方向有两个，一个是分布式事务，这个你<a href=\"https://time.geekbang.org/column/article/678287\">第 18 讲</a>已经学过了。另外一个方向是课程后面会讨论的问题，就是怎么做到消息的可靠发送和可靠消费。</p><h2>面试思路总结</h2><p>今天这节课的内容还是比较简单的，主要介绍了消息队列的三个用途：<strong>解耦、异步、削峰</strong>，还有几个使用消息队列的场景，包括<strong>日志处理、消息通讯、秒杀场景和订单超时取消</strong>。我希望你能够从这些场景里面领悟到消息队列适合解决什么样的问题。</p><p>最后在面试的亮点部分，我给出了一个<strong>基于事件驱动的 SAGA 分布式事务方案</strong>。事件驱动是一个解决复杂业务问题的神器，你有机会的话尽可能实践一下，之后有很大可能会用到。</p><p><img src=\"https://static001.geekbang.org/resource/image/11/92/111199134031684c78a61558d0cca992.png?wh=2078x1391\" alt=\"\"></p><h2>思考题</h2><p>最后请你来思考2个问题。</p><ul>\n<li>除了我这里列举的消息队列使用场景，你还见过哪些很有特点的使用消息队列的场景？</li>\n<li>面试中还有一个比较经典的问题，就是你为什么用 Kafka、RabbitMQ 或 RocketMQ，又或者说你为什么使用某一个中间件，这种问题该怎么回答呢？</li>\n</ul><p>欢迎你把自己的经验和面试心得分享到评论区，也欢迎你把这节课分享给需要的朋友，邀他一起学习，我们下节课再见！</p>","comments":[{"had_liked":false,"id":379147,"user_name":"子休","can_delete":false,"product_type":"c1","uid":1131592,"ip_address":"上海","ucode":"EDB61FB012C195","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/48/fae317c1.jpg","comment_is_top":false,"comment_ctime":1691415538,"is_pvip":false,"replies":[{"id":138163,"content":"6666，你是懂面试的！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1691564647,"ip_address":"广东","comment_id":379147,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"除了我这里列举的消息队列使用场景，你还见过哪些很有特点的使用消息队列的场景？\n答：上家公司，我所在的中台基础服务组，实现了一个叫“事件中心”的微服务，核心功能之一就是使用消息队列作为事件传递和调用。相较于正常的消息传递，这个服务相当于把消息队列包了一层，可以提供比消息队列更多的功能，比如统计，审计等，因为代码是掌握在自己手中，可以做更多的事情。\n\t\n面试中还有一个比较经典的问题，就是你为什么用 Kafka、RabbitMQ 或 RocketMQ，又或者说你为什么使用某一个中间件，这种问题该怎么回答呢？\n答：\n1. 先大致描述一下各种中间件的优点和缺点，这些基本都是随便搜搜就知道了。\n2. 然后结合项目中的业务场景特点，说出自己的看法，比如这个中间件用在自己的业务里面会有什么益处，会有什么弊端等等。\n3. 告诉面试官，自己在技术选型的时候，写了一些demo，在测试环境跑了下，结果如何如何，最后敲定了其中一个。之后，经过技术评审，大家认可了自己的看法，一致通过。\n4. 选好中间件之后，选择一个业务组进行接入，通过充分测试之后，开始上线试运行，结果大致良好。只是中间出了一些小问题，由此可以引出一些你自己对这个中间件的常见问题的解决思路。比如消息丢失是怎么解决的？消息积压是怎么解决的。\n5. 最后收尾的时候，如果可能的话，可以升华一下，自己对这个中间件的高维度认知。比如虽然你只是在这个公司用了消息队列来解决削峰解耦的事情，但是其实消息队列还可以用在很多地方。比如本文中提到的分布式事务。","like_count":14,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625309,"discussion_content":"6666，你是懂面试的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691564647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018452,"avatar":"","nickname":"kai","note":"","ucode":"443ED92B59AB8C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626047,"discussion_content":"好巧，我们公司也有这个“事件中心”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692499208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"日本","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384569,"user_name":"sheep","can_delete":false,"product_type":"c1","uid":2770150,"ip_address":"广东","ucode":"DAC2036F08CE27","user_header":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","comment_is_top":false,"comment_ctime":1701173713,"is_pvip":false,"replies":[{"id":140347,"content":"协程你终究还是堵在了这台机器上，如果并发高的话，你这里协程就很有问题。\n\n另外一个就是，引入消息队列，你的性能瓶颈就是消息队列的瓶颈，数十万上百万的 QPS 都没问题。但是你一台机器是开不出来数十万上百万的协程的。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1701846908,"ip_address":"广东","comment_id":384569,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"面试官假若问:&quot;我调用第三方业务，直接启动一个协程去调用，但是并不关心返回值，直接返回信息给用户了&quot;，怎么样回答，才能证明使用消息队列才是性能更好的方案呢。我想这里其实不关心返回值的话，其实也不用消息队列了吧","like_count":4,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633123,"discussion_content":"协程你终究还是堵在了这台机器上，如果并发高的话，你这里协程就很有问题。\n\n另外一个就是，引入消息队列，你的性能瓶颈就是消息队列的瓶颈，数十万上百万的 QPS 都没问题。但是你一台机器是开不出来数十万上百万的协程的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701846908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1665471,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/bf/58f70a2a.jpg","nickname":"程序员花卷","note":"","ucode":"DDCFE578C6C428","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633379,"discussion_content":"1. 耦合性比较高，毕竟你这个协程的代码也是需要写在调用方服务的\n2. 所有的压力集中到了单台机器上或者单个服务上，这个服务挂了，严重的可能下游的业务一个都没办法执行成功，而采用消息队列的话，只要消息发出去了，你挂你的，无所谓，各忙各的事，对业务影响最小","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702047292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"云南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385105,"user_name":"程序员花卷","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"云南","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/58f70a2a.jpg","comment_is_top":false,"comment_ctime":1702049611,"is_pvip":false,"replies":[{"id":140765,"content":"可以的，赞！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1704190162,"ip_address":"广东","comment_id":385105,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"除了我这里列举的消息队列使用场景，你还见过哪些很有特点的使用消息队列的场景？\n比如使用RocketMQ的事务消息来解决分布式事务的问题，保证数据的最终一致性。\n具体场景就拿文中的例子来举例：扣减库存 和 创建保存订单这两个操作是位于不同的服务的，那么就涉及到了分布式事务的问题，大体思路是当缓存库存扣减完成之后，就发送事务消息到Broker，这个事务消息执行的业务就是创建并保存订单，事务消息发送成功之后就会执行本地事务，本地事务对应的业务操作就是扣减数据库库存，当本地事务执行完之后，如果成功就COMMIT，否则就ROLLBACK，让Broker真正投递事务消息，订单服务那边创建并保存订单。如果在创建并保存订单的过程中出了问题，那么就需要利用RocketMQ发送一条普通消息到商品服务，商品服务这边要做两个事情：一个是还原缓存库存，一个是还原数据库库存。这样就保证了最终一致性。\n需要注意的问题：\n1. 需要保证扣减商品库存、还原商品库存、创建并保存订单的幂等性\n2. 如果订单创建并保存失败后服务就挂了，导致还原库存的消息没发出去，怎么办，针对这种情况可以设计一个异步检测的服务，使用一个下单业务记录表来记录下库存扣减和创建订单的业务，然后使用这个异步检测服务去定时扫描检查，但凡出现某个业务扣减过库存但是没创建保存过订单，那就将缓存库存和数据库库存还原回来，并记录下这个异常情况，方便后期核查！","like_count":2,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634926,"discussion_content":"可以的，赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704190162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379506,"user_name":"ZhiguoXue_IT","can_delete":false,"product_type":"c1","uid":2639055,"ip_address":"北京","ucode":"EAA83F53B54520","user_header":"https://static001.geekbang.org/account/avatar/00/28/44/cf/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1692022938,"is_pvip":false,"replies":[{"id":138252,"content":"我认为无脑选 Kafka，哈哈哈哈。就这么说，就是虽然别的 MQ 有一些很方便的功能，但是总的来说并不构成强有力的选型理由。而 Kafka 社区支持，文档都非常成熟。\n\n即便是从混职场的角度来说，选 Kafka 肯定没人敢说你选得不对。\n\n就我个人来说，我其实觉得性能并不是决定性的选型因素，虽然重要，但是也没特别重要。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1692078095,"ip_address":"广东","comment_id":379506,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"对于大数据量的mq，大多数会选择kafka，高吞吐量，作者是如何认为的","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625688,"discussion_content":"我认为无脑选 Kafka，哈哈哈哈。就这么说，就是虽然别的 MQ 有一些很方便的功能，但是总的来说并不构成强有力的选型理由。而 Kafka 社区支持，文档都非常成熟。\n\n即便是从混职场的角度来说，选 Kafka 肯定没人敢说你选得不对。\n\n就我个人来说，我其实觉得性能并不是决定性的选型因素，虽然重要，但是也没特别重要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692078095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390300,"user_name":"瀚海","can_delete":false,"product_type":"c1","uid":2062203,"ip_address":"上海","ucode":"E64C22F3F6D285","user_header":"https://static001.geekbang.org/account/avatar/00/1f/77/7b/338c4617.jpg","comment_is_top":false,"comment_ctime":1715048747,"is_pvip":false,"replies":[{"id":141959,"content":"随便，差不多都能满足你的要求。如果是面试，你就 rocketmq 的优缺点，kafka 的优缺点，随便说一下自己的业务，然后就说你选 X。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1715228511,"ip_address":"广东","comment_id":390300,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"rocketmq和kafka  怎么选择","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644379,"discussion_content":"随便，差不多都能满足你的要求。如果是面试，你就 rocketmq 的优缺点，kafka 的优缺点，随便说一下自己的业务，然后就说你选 X。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715228511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384646,"user_name":"sheep","can_delete":false,"product_type":"c1","uid":2770150,"ip_address":"广东","ucode":"DAC2036F08CE27","user_header":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","comment_is_top":false,"comment_ctime":1701271090,"is_pvip":false,"replies":[{"id":140345,"content":"创建订单的时候再发一个超时未支付的消息就行。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1701846750,"ip_address":"广东","comment_id":384646,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"，“基本思路-&gt;秒杀场景”这里扣减库存时候订单服务不是已经通过消费消息队列，来进行创建订单了么。这里后续的“订单超时取消”，又是如何应用上的呢，是客户端又发了一个延时消息吗，来告诉指定订单30分后“未支付”则进行取消？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633121,"discussion_content":"创建订单的时候再发一个超时未支付的消息就行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701846750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1665471,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/bf/58f70a2a.jpg","nickname":"程序员花卷","note":"","ucode":"DDCFE578C6C428","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633380,"discussion_content":"你去观察下很多购物平台，你一旦进入了支付页面，要退出，它都会让你确定一下，这个时候就可以发送一个延时消息，从这个时候算起。当然也可以使用老师说的方案：创建订单的时候就发一个延时消息开始计时。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1702047441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"云南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384571,"user_name":"sheep","can_delete":false,"product_type":"c1","uid":2770150,"ip_address":"广东","ucode":"DAC2036F08CE27","user_header":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","comment_is_top":false,"comment_ctime":1701174216,"is_pvip":false,"replies":[{"id":140348,"content":"对！所以你可以考虑刷个 KPI。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1701846928,"ip_address":"广东","comment_id":384571,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"回答课后问题：\n1. 使用消息队列来进行削峰，比如某项目就用kafka来缓解往ES插入数据的压力\n2. 组内好像没有使用到消息队列，但是了解其他部门有使用，主要是在第三方业务服使用公用ES时候，使用kafka来缓解ES的压力吧，而且kafka的吞吐量会比其他消息队列好很多","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633124,"discussion_content":"对！所以你可以考虑刷个 KPI。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701846928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383283,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"北京","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1698814010,"is_pvip":false,"replies":[{"id":139753,"content":"可以通过回调，也可以再次借助消息队列。我猜测你是指前端怎么知道的吧？这个可以用websocket，而 APP 之类的也可以考虑用 gRPC。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1699282703,"ip_address":"广东","comment_id":383283,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"请问一下老师，这个步骤是怎么实现提示用户支付的呀，通过API还是什么操作？\n\n“订单服务会从消息队列里面将请求拿出来，真正创建订单，并且提示用户支付”。\n","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631068,"discussion_content":"可以通过回调，也可以再次借助消息队列。我猜测你是指前端怎么知道的吧？这个可以用websocket，而 APP 之类的也可以考虑用 gRPC。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1699282703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":640778,"discussion_content":"再次借助消息队列，是指客户端订阅某个topic来获得订单信息，从而发起支付吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711851827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":631068,"ip_address":"北京","group_id":0},"score":640778,"extra":""}]},{"author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631163,"discussion_content":"对，疑问点就是前端如何知道。或者如何与前端交互。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699351193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":639261,"discussion_content":"前端轮询","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1710424251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":631163,"ip_address":"广东","group_id":0},"score":639261,"extra":""}]}]},{"had_liked":false,"id":383255,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"北京","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1698762273,"is_pvip":false,"replies":[{"id":139754,"content":"我一般都是无脑选 Kafka，万一同事喷我，我也可以说我做的是最保守的选择。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1699282733,"ip_address":"广东","comment_id":383255,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"pulsar 与 kafka 会选择哪一个？\n","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631069,"discussion_content":"我一般都是无脑选 Kafka，万一同事喷我，我也可以说我做的是最保守的选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699282733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631164,"discussion_content":"哈哈哈 好的 老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699351217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380317,"user_name":"Geek8004","can_delete":false,"product_type":"c1","uid":2328971,"ip_address":"中国香港","ucode":"B3828F6414BDB0","user_header":"","comment_is_top":false,"comment_ctime":1693365200,"is_pvip":false,"replies":[{"id":138539,"content":"直接用 Redis 来扣减内存的话，不需要分布式锁。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693488305,"ip_address":"广东","comment_id":380317,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"轻问老师,秒杀系统里面需要用分布式锁锁住redis的库存吗?我理解不用分布式锁,因为redis在读写key的时候其实是单线程的.没有并发问题","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626920,"discussion_content":"直接用 Redis 来扣减内存的话，不需要分布式锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693488305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1665471,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/bf/58f70a2a.jpg","nickname":"程序员花卷","note":"","ucode":"DDCFE578C6C428","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633383,"discussion_content":"秒杀系统你还得考虑一个问题，在大流量场景下，Redis分布式锁还起到了限流的作用哦，比如你秒杀商品只有100件，但是几十万的流量过来了，这时候可以通过分布式锁做一些限流，比如获取不到锁的就直接提示稍后重试。另外你既然是要扣库存，那就涉及到两个操作：校验库存数量 和 扣减库存，且必须保证这两操作的原子性，你不用锁，那你就得用Lua脚本之类的来做，缓存库存 &gt; 当前订单购买的商品数量：扣减，否则提示商品已经卖完了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702048473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"云南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379146,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1691413560,"is_pvip":false,"replies":[{"id":138162,"content":"我没看懂，啥叫做用户大数据的消息队列？","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1691564626,"ip_address":"广东","comment_id":379146,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"请教老师一个问题：kafka是用户大数据的消息队列，有没有这个说法？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625308,"discussion_content":"我没看懂，啥叫做用户大数据的消息队列？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691564626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1367048,"avatar":"https://static001.geekbang.org/account/avatar/00/14/dc/08/64f5ab52.jpg","nickname":"陈斌","note":"","ucode":"B639AB5F6AA03D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625267,"discussion_content":"kafka相对于其他消息中间件更适合做处理高并发、数据量大的场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691504661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383282,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"北京","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1698814007,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"请问一下老师，这个步骤是怎么实现提示用户支付的呀，通过API还是什么操作？\n\n“订单服务会从消息队列里面将请求拿出来，真正创建订单，并且提示用户支付”。\n","like_count":0}]}