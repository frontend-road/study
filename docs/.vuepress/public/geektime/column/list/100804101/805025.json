{"id":805025,"title":"04｜RAG索引（二）：分块策略与Embedding技术","content":"<blockquote>\n<p><span class=\"reference\">本门课程为精品小课，不标配音频</span></p>\n</blockquote><p>你好，我是常扬。</p><p>本节课将深入探讨RAG索引（Indexing）流程中的<strong>分块（Chunking）策略和嵌入（Embedding）技术。</strong></p><p>文档数据（Documents）经过解析后，通过分块技术将信息内容划分为适当大小的文档片段（chunks），从而使RAG系统能够高效处理和精准检索这些片段信息。分块的本质在于依据一定逻辑或语义原则，将较长文本拆解为更小的单元。分块策略有多种，各有侧重，<strong>选择适合特定场景的分块策略</strong>是提升RAG系统召回率的关键。</p><p>嵌入模型（Embedding Model）负责将文本数据映射到高维向量空间中，将输入的文档片段转换为对应的嵌入向量（embedding vectors）。这些向量捕捉了文本的语义信息，并被存储在向量库（VectorStore）中，以便后续检索使用。用户查询（Query）同样通过嵌入模型的处理生成查询嵌入向量，这些向量用于在向量数据库中通过向量检索（Vector Retrieval）匹配最相似的文档片段。根据不同的场景需求，<strong>评估并选择最优的嵌入模型</strong>，以确保RAG的检索性能符合要求。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/d0/c2eea144d5e3ffd46fb18fe11fb069d0.jpg?wh=1920x1603\" alt=\"图片\"></p><h2>为什么说分块很重要？</h2><p>文档通常包含丰富的上下文信息和复杂的语义结构，通过将文档分块，模型可以更有效地提取关键信息，并减少不相关内容的干扰。分块的目标在于确保每个片段在<strong>保留核心语义</strong>的同时，具备<strong>相对独立的语义完整性</strong>，从而使模型在处理时不必依赖广泛的上下文信息，<strong>增强检索召回的准确性</strong>。</p><!-- [[[read_end]]] --><p>分块的重要性在于它直接影响RAG系统的生成质量。首先，合理的分块能够确保检索到的片段与用户查询<strong>信息高度匹配</strong>，避免信息冗余或丢失。其次，分块有助于提升<strong>生成内容的连贯性</strong>，精心设计的独立语义片段可以降低模型对上下文的依赖，从而增强生成的逻辑性与一致性。最后，分块策略的选择还会影响系统的<strong>响应速度与效率</strong>，模型能够更快、更准确地处理和生成内容。</p><p>分块策略最大的挑战在于<strong>确定分块的大小</strong>。如果片段过大，可能导致向量无法精确捕捉内容的特定细节并且计算成本增加；若片段过小，则可能丢失上下文信息，导致句子碎片化和语义不连贯。较小的块适用于需要细粒度分析的任务，例如情感分析，能够精确捕捉特定短语或句子的细节。更大的块则更为合适需要保留更广泛上下文的场景，例如文档摘要或主题检测。因此，块大小的确定必须在计算效率和上下文信息之间取得平衡。</p><p><img src=\"https://static001.geekbang.org/resource/image/12/88/12ab6af24cc2eb16185e127e90440a88.jpg?wh=1920x1019\" alt=\"图片\"></p><h2>分块策略</h2><p>最佳的分块策略取决于具体的应用场景，而非行业内的统一标准。<strong>根据场景中文档内容的特点和查询问题的需求，选择最合适该场景的分块策略，以确保RAG系统中大模型能够更精确地处理和检索数据</strong>。</p><p>多种分块策略从本质上来看，由以下三个关键组成部分构成：</p><ol>\n<li><strong>大小</strong>：每个文档块所允许的最大字符数。</li>\n<li><strong>重叠</strong>：在相邻数据块之间，重叠字符的数量。</li>\n<li><strong>拆分</strong>：通过段落边界、分隔符、标记，或语义边界来确定块边界的位置。</li>\n</ol><p>上述三个组成部分共同决定了分块策略的特性及其适用场景。基于这些组成部分，常见的分块策略包括：<strong>固定大小分块（Fixed Size Chunking）</strong>、<strong>重叠分块（Overlap Chunking）</strong>、<strong>递归分块（Recursive Chunking）</strong>、<strong>文档特定分块（Document Specific Chunking）</strong>、<strong>语义分块（Semantic Chunking）</strong>、<strong>混合分块（Mix Chunking）</strong>。下面我将对这些策略逐一进行介绍。</p><p><img src=\"https://static001.geekbang.org/resource/image/63/ef/63b052c1b1639bfa66c23342cf28d9ef.jpg?wh=1920x1206\" alt=\"图片\"></p><h3><strong>固定大小分块（Fixed Size Chunking）</strong></h3><p>最基本的方法是将文档按固定大小进行分块，通常作为<strong>分块策略的基准线</strong>使用。</p><p>Chunk Size 100字符（每种颜色为一个文本块，Chunk切分可视化呈现链接：<a href=\"https://chunkviz.up.railway.app/\">https://chunkviz.up.railway.app/</a>）</p><p><img src=\"https://static001.geekbang.org/resource/image/6y/bb/6yy324332a63ab8cf344d9f350fc27bb.png?wh=1315x725\" alt=\"图片\"></p><p>Chunk Size 50字符</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/df/3f02a46f4e84ac280d1525749d3b48df.png?wh=1278x475\" alt=\"图片\"></p><p><strong>适用场景</strong></p><ol>\n<li>作为分块策略的基准线；</li>\n<li>对大型数据集进行初步分析；</li>\n<li>实现简单且可预测性高，分块便于管理；</li>\n<li>适用于格式和大小相似的同质数据集，如新闻文章或博客文章。</li>\n</ol><p><strong>问题</strong></p><ol>\n<li>不考虑内容上下文，可能在句子或段落中断内容，导致无意义的文本块，例如上面图示中的“大模/型”“边际成/本”等词组被中断；</li>\n<li>缺乏灵活性，无法适应文本的自然结构。</li>\n</ol><h3><strong>重叠分块（Overlap Chunking）</strong></h3><p>通过滑动窗口技术切分文本块，使新文本块与前一个块的内容部分重叠，从而保留块边界处的重要上下文信息，增强系统的语义相关性。虽然这种方法增加了存储需求和冗余信息，但它有效避免了在块之间丢失关键语义或句法结构。</p><p>Chunk Size 100字符，Chunk overlap 20字符（绿色）</p><p><img src=\"https://static001.geekbang.org/resource/image/47/74/47081fa325055a09af84b373408b7b74.png?wh=1326x474\" alt=\"图片\"></p><p><strong>适用场景</strong></p><ol>\n<li>需要深入理解语义并保持上下文完整性的文档，如法律文档、技术手册或科研论文；</li>\n<li>提升分块内容的连贯性，以提高分析质量。</li>\n</ol><p><strong>问题</strong></p><ol>\n<li>计算复杂度增加，处理效率降低；</li>\n<li>冗余信息的存储和管理成为负担。</li>\n</ol><h3><strong>递归分块（Recursive Chunking）</strong></h3><p>通过预定义的文本分隔符（如换行符\\n\\n、\\n ，句号、逗号、感叹号、空格等）迭代地将文本分解为更小的块，以实现段大小的均匀性和语义完整性。此过程中，文本首先按较大的逻辑单元分割（如段落 \\n\\n），然后逐步递归到较小单元（如句子 \\n 和单词），确保在分块大小限制内保留最强的语义片段。</p><p>Chunk Size 100字符</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/12/7d544182c5a87899d214096f46a87912.png?wh=1278x472\" alt=\"图片\"></p><p>这种方法适用于需要逐层分析的文本文档或需要分解成长片段、长段落的长文档，如研究报告、法律文档等。不过仍有可能在块边界处模糊语义，容易将完整的语义单元切分开。</p><h3><strong>文档特定分块（Document Specific Chunking）</strong></h3><p>根据文档的格式（如Markdown、Latex、或编程语言如Python等）进行定制化分割的技术。此方法依据文档的特定格式和结构规则，例如Markdown的标题、列表项，或Python代码中的函数和类定义等，来确定分块边界。通过这种方式，确保分块能够准确反映文档的格式特点，优化保留这些语义完整的单元，提升后续的处理和分析效果。</p><p>Chunk Size 100字符，Markdown特定分块</p><p><img src=\"https://static001.geekbang.org/resource/image/4b/e3/4bb487bea5e25511d71cc2e7cd8e1de3.png?wh=1291x416\" alt=\"图片\"></p><p>Chunk Size 100字符，Python特定分块</p><p><img src=\"https://static001.geekbang.org/resource/image/b0/2a/b0e4135a497a5cf06b9e986b68b2132a.png?wh=1281x508\" alt=\"图片\"></p><p>这种方法可以根据特定的文档结构，进行准确的语义内容切分，在编程语言、Markdown、Latex等结构文档中表现出色。但文档特定分块的方式格式依赖性强，不同格式之间的分块策略不通用，并且无法处理格式不规范及混合多种格式的情况。</p><h3><strong>语义分块（Semantic Chunking）</strong></h3><p>基于文本的自然语言边界（如句子、段落或主题中断）进行分段的技术，需要使用NLP技术根据语义分词分句，旨在确保每个分块都包含语义连贯的信息单元。语义分块保留了较高的上下文保留，并确保每个块都包含连贯的信息，但需要更多的计算资源。常用的分块策略有spaCy 和 NLTK 的NLP库，spaCy 适用于需要高效、精准语义切分的大规模文本处理，NLTK更适合教学、研究和需要灵活自定义的语义切分任务。</p><p>spaCy语义分块</p><p><img src=\"https://static001.geekbang.org/resource/image/95/cf/95687f417dyy2f92ab7c9ca374619acf.png?wh=1909x325\" alt=\"图片\"></p><p><strong>适用场景</strong></p><ol>\n<li>确保每个文档块的信息完整且语义连贯；</li>\n<li>提高检索结果的相关性和准确性；</li>\n<li>适用于复杂文档和上下文敏感的精细化分析。</li>\n</ol><p><strong>问题</strong></p><ol>\n<li>需要额外的高计算资源，特别是在处理大型或动态变化的文档数据时；</li>\n<li>处理效率降低。</li>\n</ol><h3><strong>混合分块（Mix Chunking）</strong></h3><p>混合分块是一种结合多种分块方法的技术，通过综合利用不同分块技术的优势，提高分块的精准性和效率。例如，在初始阶段使用固定长度分块快速整理大量文档，而在后续阶段使用语义分块进行更精细的分类和主题提取。根据实际业务场景，设计多种分块策略的混合，能够灵活适应各种需求，提供更强大的分块方案。</p><p><strong>适用场景</strong></p><ol>\n<li>适用于多层次的精细化分块场景；</li>\n<li>数据集动态变化，包含多种文档格式与结构；</li>\n<li>平衡处理速度与准确性的场景。</li>\n</ol><p><strong>问题</strong></p><ol>\n<li>实现复杂度高；</li>\n<li>策略调优难度高；</li>\n<li>资源消耗增加。</li>\n</ol><h2>分块策略实战</h2><p>LangChain 提供了多种文档分块方法（Text Splitters），帮助开发者轻松集成使用。上述分块策略在 <strong>langchain_text_splitters</strong> 库中对应的具体方法类如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/72/6f/72fb7d398cf2e1d5d50024d0c0e8386f.png?wh=1836x1396\" alt=\"图片\"></p><p>除了上述方法类外，LangChain 还提供了更多的 Text Splitter，参考 <a href=\"https://python.langchain.com/v0.2/api_reference/text_splitters/index.html\">LangChain 官网</a>。</p><p>关于开发环境以及 <code>langchain</code> 和 <code>langchain_community</code> 等库的安装和配置，已在第 02 课中详细说明。下面实战的代码更新在Gitee托管项目的 <strong>rag_app_lesson4.py</strong> 代码文件中，rag_app_lesson4.py 代码基于第03讲中的 rag_app_lesson3.py 进行迭代更新。</p><p>SpacyTextSplitter 和 NLTKTextSplitter 需要额外安装 Python 依赖库，其中 SpacyTextSplitter 还需要按照文档的语言对应安装额外的语言模型。</p><p><strong>命令行中执行以下安装命令：</strong></p><pre><code class=\"language-plain\">source rag_env/bin/activate  # 激活虚拟环境\npip install spacy nltk -i https://pypi.tuna.tsinghua.edu.cn/simple\npython -m spacy download zh_core_web_sm # 如果需要进行中文分块，安装spacy中文语言模型\npython -m spacy download en_core_web_sm # 如果需要进行英文分块，安装spacy英文语言模型\n</code></pre><p><strong>导入langchain.text_splitter中各种文档分块类代码：</strong></p><pre><code class=\"language-plain\">from langchain.text_splitter import (\n    CharacterTextSplitter,\n    RecursiveCharacterTextSplitter,\n    MarkdownTextSplitter,\n    PythonCodeTextSplitter,\n    LatexTextSplitter,\n    SpacyTextSplitter,\n    NLTKTextSplitter\n) # 从 langchain.text_splitter 模块中导入各种文档分块类\n</code></pre><p>CharacterTextSplitter、RecursiveCharacterTextSplitter、MarkdownTextSplitter、PythonCodeTextSplitter、LatexTextSplitter、NLTKTextSplitter替换原有text_splitter参数的赋值类即可。需要额外处理的是SpacyTextSplitter，需要参数pipeline指定具体的语言模型才可以运行。</p><p><strong>indexing_process方法中切分文本块库代码：</strong></p><pre><code class=\"language-plain\"># 配置SpacyTextSplitter分割文本块库\n#text_splitter = SpacyTextSplitter(\n#    chunk_size=512, chunk_overlap=128, pipeline=\"zh_core_web_sm\")\n\n# 配置RecursiveCharacterTextSplitter分割文本块\n# 可以更换为CharacterTextSplitter、MarkdownTextSplitter、PythonCodeTextSplitter、LatexTextSplitter、NLTKTextSplitter等\ntext_splitter = RecursiveCharacterTextSplitter(\nchunk_size=512, chunk_overlap=128)\n</code></pre><p>其中，SpacyTextSplitter 的文本分块逻辑已被注释。如果需要使用，只需取消注释，并将下方使用其他文本分块库的代码注释即可。</p><h2>什么是Embedding嵌入？</h2><p><strong>Embedding 嵌入</strong>是指将文本、图像、音频、视频等形式的信息映射为高维空间中的密集向量表示。这些向量在语义空间中起到坐标的作用，捕捉对象之间的语义关系和隐含的意义。通过在向量空间中进行计算（例如余弦相似度），可以量化和衡量这些对象之间的<strong>语义相似性</strong>。</p><p>在具体实现中，嵌入的每个维度通常对应文本的某种特征，例如性别、类别、数量等。通过多维度的数值表示，计算机能够理解并解析文本的复杂语义结构。例如，“man”和“woman”在描述性别维度上具有相似性，而“king”和“queen”则在性别和王室身份等维度上表现出相似的语义特征。</p><p>向量是一组在高维空间中定义点的数值数组，而嵌入则是将信息（如文本）转化为这种向量表示的过程。这些向量能够捕捉数据的语义及其他重要特征，使得语义相近的对象在向量空间中彼此邻近，而语义相异的对象则相距较远。<strong>向量检索（Vector Retrieval）</strong>是一种基于向量表示的搜索技术，通过计算查询向量与已知文本向量的相似度来识别最相关的文本数据。向量检索的高效性在于，它能在大规模数据集中快速、准确地找到与查询最相关的内容，这得益于向量表示中蕴含的丰富语义信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/60/09/60d4d55a2c7d16d42e255e19038eb409.jpg?wh=1920x1080\" alt=\"图片\"></p><h2>Embedding Model 嵌入模型</h2><p>自 2013 年以来，word2vec、GloVe、fastText 等嵌入模型通过分析大量文本数据，学习得出单词的嵌入向量。近年来，随着 transformer 模型的突破，嵌入技术以惊人的速度发展。BERT、RoBERTa、ELECTRA 等模型将词嵌入推进到上下文敏感的阶段。这些模型在为文本中的每个单词生成嵌入时，会充分考虑其上下文环境，因此同一个单词在不同语境下的嵌入向量可以有所不同，从而大大提升了模型理解复杂语言结构的能力。</p><p>在 RAG 系统中，<strong>Embedding Model 嵌入模型</strong>扮演着关键角色，负责将文本数据映射到高维向量空间，以便高效检索和处理。具体而言，Embedding Model 将输入的<strong>文档片段（Chunks）<strong>和</strong>查询文本（Query）<strong>转换为</strong>嵌入向量（Vectors）</strong>，这些向量捕捉了文本的语义信息，并可在向量空间中与其他嵌入向量进行比较。</p><p>在 RAG 流程中，文档首先被分割成多个片段，每个片段随后通过 Embedding Model 进行嵌入处理。生成的文档嵌入向量被存储在 VectorStore 中，供后续检索使用。用户查询会通过 Embedding Model 转换为查询嵌入向量，这些向量用于在向量数据库中匹配最相似的文档片段，最终组合生成<strong>指令（Prompt）</strong>，大模型生成回答。</p><p><img src=\"https://static001.geekbang.org/resource/image/77/4c/7714f94f54d754cc6d45dd4a63b8494c.jpg?wh=1920x1080\" alt=\"图片\"></p><p>正如图中所示，嵌入模型是 RAG 流程的核心。既然如此重要，市面上有非常多的嵌入模型，我们该如何为我们的业务场景选择最合适的嵌入模型呢？</p><h2><strong>Embedding Model 嵌入模型评估</strong></h2><p>在选择适合的嵌入模型时，需要综合考虑多个因素，包括<strong>特定领域的适用性</strong>、<strong>检索精度</strong>、<strong>支持的语言</strong>、<strong>文本块长度</strong>、<strong>模型大小</strong>以及<strong>检索效率</strong>等因素。同时以广泛受到认可的 <strong>MTEB</strong>（Massive Text Embedding Benchmark）和 <strong>C-MTEB</strong>（Chinese Massive Text Embedding Benchmark）榜单作为参考，通过涵盖分类、聚类、语义文本相似性、重排序和检索等多个数据集的评测，开发者可以根据不同任务的需求，评估并选择最优的向量模型，以确保在特定应用场景中的最佳性能。</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/d4/f670a0df1b78f0891bd8fb63f17f9dd4.jpg?wh=1920x1122\" alt=\"图片\"></p><p><a href=\"https://huggingface.co/spaces/mteb/leaderboard\">MTEB & C-MTEB榜单</a></p><p><img src=\"https://static001.geekbang.org/resource/image/6a/f8/6a330f2f96a08d147523fbc91d3e0ef8.png?wh=1920x1140\" alt=\"图片\"></p><p>榜单每日更新，上图展示的是2024年8月28日的榜单。点击“Overall”，切换语言为Chinese，可以看到中文嵌入模型的排名。由于 RAG 是一项检索任务，我们需要按“<strong>Retrieval Average</strong>”（检索平均值）列对排行榜进行排序，图中显示的就是检索任务效果排序后的结果。在检索任务中，我们需要在榜单顶部看到最佳的检索模型，并且专注于以下几个关键列：</p><ul>\n<li><strong>Retrieval Average 检索平均值：</strong>较高的检索平均值表示模型更擅长在检索结果列表中将相关项目排在较高的位置，检索效果更好。</li>\n<li><strong>Model Size 模型大小：</strong>模型的大小（以 GB 为单位）。虽然检索性能随模型大小而变化，但要注意，模型大小也会对延迟产生直接影响。因此，在选择模型时，建议筛选掉那些在硬件资源有限的情况下不可行的过大模型。在生产环境中，性能与效率之间的权衡尤为重要。</li>\n<li><strong>Max Tokens 最大Token数：</strong>可压缩到单个文本块中的最大Token数。因为文档块我们希望不要过大而降低目标信息块的精准度，因此，即使最大 tokens 数为 512 的模型在大部分场景下也足够使用。</li>\n<li><strong>Embedding Dimensions：</strong>嵌入向量的维度。越少的嵌入维度提供更快的推理速度，存储效率更高，而更多的维度可以捕获数据中的细微特征。我们需要在模型的性能和效率之间取得良好的权衡。</li>\n<li><strong>实验至关重要</strong>，在排行榜上表现良好的模型不一定在你的任务上表现良好，试验各种高得分的模型至关重要。我们参考 MTEB 排行榜，选择多个适合我们场景的嵌入模型作为备选，并在我们的业务场景数据集上进行评估测试，以选出最适合我们 RAG 系统的嵌入模型。</li>\n</ul><h2>Embedding Model 技术实战</h2><p>我们使用 <strong>SentenceTransformers</strong> 作为加载嵌入模型的 Python 模块。</p><p>SentenceTransformers（又名 SBERT）是一个用于训练和推理文本嵌入模型的 Python 模块，可以在 RAG 系统中计算嵌入向量。使用 SentenceTransformers 进行文本嵌入转换非常简单：只需导入模块库、加载模型，并调用 encode 方法即可。执行时，SentenceTransformers 会自动下载相应的模型库，当然也可以手动下载并指定模型库的路径。所有可用的模型都可以在 <a href=\"https://www.sbert.net/docs/sentence_transformer/pretrained_models.html\">SentenceTransformers 模型库</a> 查看，超过8000个发布在 Hugging Face 上的嵌入模型库可以被使用。</p><p>在中文领域，智源研究院的 <a href=\"https://huggingface.co/collections/BAAI/bge-66797a74476eb1f085c7446d\">BGE 系列模型</a> 是较为知名的开源嵌入模型，在 C-MTEB 上表现出色。BGE 系列目前包含23个嵌入模型，涵盖多种维度、多种最大 Token 数和模型大小，用户可以根据需求进行测试和使用。</p><p><strong>load_embedding_model 方法中使用SentenceTransformer加载嵌入模型代码：</strong></p><pre><code class=\"language-plain\"># 绝对路径：SentenceTransformer读取绝对路径下的bge-small-zh-v1.5模型，如需使用其他模型，下载其他模型，并且更换绝对路径即可\nembedding_model = SentenceTransformer(os.path.abspath('rag_app/bge-small-zh-v1.5'))\n\n# 自动下载：SentenceTransformer库自动下载BAAI/bge-large-zh-v1.5模型，如需下载其他模型，输入其他模型名称即可\n# embedding_model = SentenceTransformer('BAAI/bge-large-zh-v1.5')\n</code></pre><p><strong>indexing_process 方法中将文本转化为嵌入向量代码：</strong></p><pre><code class=\"language-plain\"># 文本块转化为嵌入向量列表，normalize_embeddings表示对嵌入向量进行归一化，用于后续流程准确计算向量相似度\nembeddings = []\nfor chunk in all_chunks:\n      embedding = embedding_model.encode(chunk, normalize_embeddings=True)\n      embeddings.append(embedding)\n</code></pre><h2>总结</h2><p>这节课我们深入探讨了RAG索引流程中的分块策略和嵌入技术。</p><p><strong>分块策略</strong>通过将文档拆分为更小的片段，使模型能更高效地处理和检索信息，确保每个片段在保留核心语义的同时，具备相对独立的语义完整性。常见的分块策略包括<strong>固定大小分块</strong>、<strong>重叠分块</strong>、<strong>递归分块</strong>、<strong>文档特定分块</strong>、<strong>语义分块</strong>、<strong>混合分块</strong>。分块的关键在于选择<strong>适合的分块大小</strong>与<strong>特定场景的策略</strong>，以优化系统的检索精度和生成内容的连贯性。</p><p><strong>嵌入技术</strong>将文本数据映射到高维向量空间中，捕捉其语义信息，支持<strong>向量检索</strong>，从而在大规模数据中快速识别与查询最相关的文档片段。在选择嵌入模型时，需要综合考虑<strong>特定领域的适用性</strong>、<strong>检索精度</strong>、<strong>支持的语言</strong>、<strong>文本块长度</strong>、<strong>模型大小</strong>以及<strong>检索效率</strong>等因素。</p><p>通过参考 <strong>MTEB</strong> 和 <strong>C-MTEB</strong> 的评测榜单，可以评估多个高得分的模型，并在具体的业务场景中进行测试，最终选择最适合该场景的嵌入模型。同时，使用 SentenceTransformers Python 模块可以简化嵌入模型的加载和嵌入计算，进而高效率集成测试。</p><p>相关代码已公开在<a href=\"https://gitee.com/techleadcy/rag_app\">Gitee 代码仓库</a>中了，代码文件为 <strong>rag_app_lesson4.py</strong>。</p><h2>思考题</h2><p>本节课程涵盖了分块策略和嵌入技术两个关键知识点。对应这两个知识点，我给你留两道思考题。</p><ol>\n<li>在你的业务场景中，是否曾遇到过因分块策略选择不当而导致检索精度下降的问题？如果有，请分析这个问题，并思考如何通过调整分块策略来优化系统的性能。</li>\n<li>在选择嵌入模型时，你如何在模型大小与延迟、精度与效率之间做出权衡？分享你在实际项目中平衡这些因素的经验，或探讨在不同业务场景下的最佳平衡点。</li>\n</ol><p>欢迎你把你的经验和思考分享到留言区，和我一起讨论，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p>","neighbors":{"left":{"article_title":"03｜RAG 索引（一）：文档解析技术","id":804324},"right":{"article_title":"05｜RAG向量数据库原理与常用向量库","id":805566}},"comments":[{"had_liked":false,"id":394177,"user_name":"药师","can_delete":false,"product_type":"c1","uid":1213258,"ip_address":"四川","ucode":"14BB054A38A2F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/4a/3e08427e.jpg","comment_is_top":false,"comment_ctime":1726042893,"is_pvip":false,"replies":[{"id":143094,"content":"感谢支持！！！🌹","user_name":"作者回复","user_name_real":"编辑","uid":3954065,"ctime":1726060070,"ip_address":"上海","comment_id":394177,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100804101,"comment_content":"这个课真不错，看了好几个了，这个是最落地且含金量高的","like_count":5,"discussions":[{"author":{"id":3954065,"avatar":"https://static001.geekbang.org/account/avatar/00/3c/55/91/e3c96b88.jpg","nickname":"常扬","note":"","ucode":"11B62CDABBE875","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651015,"discussion_content":"感谢支持！！！🌹","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1726060070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393928,"user_name":"小虎子🐯","can_delete":false,"product_type":"c1","uid":2843479,"ip_address":"北京","ucode":"4C9530B3FB407B","user_header":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","comment_is_top":false,"comment_ctime":1725355072,"is_pvip":false,"replies":[{"id":143049,"content":"感谢支持！","user_name":"作者回复","user_name_real":"编辑","uid":3954065,"ctime":1725626315,"ip_address":"上海","comment_id":393928,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100804101,"comment_content":"这门课很有含金量，每节课都有代码和注释，而且还是独立的，能看到整个框架起来的过程，赞👍","like_count":4,"discussions":[{"author":{"id":3954065,"avatar":"https://static001.geekbang.org/account/avatar/00/3c/55/91/e3c96b88.jpg","nickname":"常扬","note":"","ucode":"11B62CDABBE875","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650801,"discussion_content":"感谢支持！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725626316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3954065,"avatar":"https://static001.geekbang.org/account/avatar/00/3c/55/91/e3c96b88.jpg","nickname":"常扬","note":"","ucode":"11B62CDABBE875","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650638,"discussion_content":"感谢支持！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725361220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":395152,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"北京","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1729598468,"is_pvip":false,"replies":[{"id":143484,"content":"不只是内化语义信息，还有信息结构、关系。嵌入是将高维、复杂的原始数据压缩到更低维的向量中，同时尽量保留数据中的重要特征。用“嵌入”，是表达将某个东西（如信息、数据）放入另一个空间或结构中的过程，同时带有保持原有形状、特征的意味。","user_name":"作者回复","user_name_real":"编辑","uid":3954065,"ctime":1729651782,"ip_address":"上海","comment_id":395152,"utype":1}],"discussion_count":1,"race_medal":2,"score":2,"product_id":100804101,"comment_content":"第4讲打卡~\n请教老师一个问题：我一直有个困惑，将文本、图片或者视频这类非结构化信息，转换成高维向量的过程，叫做Embedding嵌入，那么“嵌入”这个词的由来是什么呢？是指将语义信息内化到高维向量空间中了吗？","like_count":3,"discussions":[{"author":{"id":3954065,"avatar":"https://static001.geekbang.org/account/avatar/00/3c/55/91/e3c96b88.jpg","nickname":"常扬","note":"","ucode":"11B62CDABBE875","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652802,"discussion_content":"不只是内化语义信息，还有信息结构、关系。嵌入是将高维、复杂的原始数据压缩到更低维的向量中，同时尽量保留数据中的重要特征。用“嵌入”，是表达将某个东西（如信息、数据）放入另一个空间或结构中的过程，同时带有保持原有形状、特征的意味。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1729651782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393974,"user_name":"Jaycee-张少同","can_delete":false,"product_type":"c1","uid":1992400,"ip_address":"辽宁","ucode":"92C60380B37BE6","user_header":"https://static001.geekbang.org/account/avatar/00/1e/66/d0/2fb761be.jpg","comment_is_top":false,"comment_ctime":1725457697,"is_pvip":false,"replies":[{"id":143046,"content":"固定分块更多作为分块效果基准来使用，实战中简单分块多用重叠，可以减少上下文丢失的问题。在资源足够的情况下，语义分块无疑是最理想的方式，能够确保每个分块在语义上的完整性。","user_name":"作者回复","user_name_real":"编辑","uid":3954065,"ctime":1725626140,"ip_address":"上海","comment_id":393974,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100804101,"comment_content":"对于思考问题1我没有实战经验，目前一切凭感觉。固定字符分块这种好理解，但是略显笨，比较起来似乎重叠分块更好一些；如果在资源足够的情况下，是否语义分块是比较理想的分块方式。","like_count":1,"discussions":[{"author":{"id":3954065,"avatar":"https://static001.geekbang.org/account/avatar/00/3c/55/91/e3c96b88.jpg","nickname":"常扬","note":"","ucode":"11B62CDABBE875","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650798,"discussion_content":"固定分块更多作为分块效果基准来使用，实战中简单分块多用重叠，可以减少上下文丢失的问题。在资源足够的情况下，语义分块无疑是最理想的方式，能够确保每个分块在语义上的完整性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725626140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396011,"user_name":"煜寶","can_delete":false,"product_type":"c1","uid":1222726,"ip_address":"广东","ucode":"F5A5BB5DAD4912","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/46/42c2e559.jpg","comment_is_top":false,"comment_ctime":1732689129,"is_pvip":false,"replies":[{"id":143828,"content":"要做到产品级别，建议使用混合化分块策略。代码部分采用基于代码格式分块，文档部分先解析文档层级结构，按层级逐步分块，确保检索时层级语义清晰。工程上的细节工作下功夫，才能达到理想结果。嵌入模型没有太多影响，目前的嵌入模型都会有代码的理解。","user_name":"作者回复","user_name_real":"编辑","uid":3954065,"ctime":1733477523,"ip_address":"上海","comment_id":396011,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100804101,"comment_content":"请问下老师，如果是想要基于RAG来增强底座模型在特定领域里的编码理解能力的，比如我就希望通过描述一个特定框架对应的功能需求信息，然后模型可以根据相关的代码框架知识库来输出结果，这个比较推荐用哪种分块策略和嵌入模型呢？","like_count":0,"discussions":[{"author":{"id":3954065,"avatar":"https://static001.geekbang.org/account/avatar/00/3c/55/91/e3c96b88.jpg","nickname":"常扬","note":"","ucode":"11B62CDABBE875","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654798,"discussion_content":"要做到产品级别，建议使用混合化分块策略。代码部分采用基于代码格式分块，文档部分先解析文档层级结构，按层级逐步分块，确保检索时层级语义清晰。工程上的细节工作下功夫，才能达到理想结果。嵌入模型没有太多影响，目前的嵌入模型都会有代码的理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1733477523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":395559,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":3920101,"ip_address":"广东","ucode":"19E83C631DF25E","user_header":"https://static001.geekbang.org/account/avatar/00/3b/d0/e5/0a3ee17c.jpg","comment_is_top":false,"comment_ctime":1731235162,"is_pvip":false,"replies":[{"id":143748,"content":"很精髓，够用就好👍","user_name":"作者回复","user_name_real":"编辑","uid":3954065,"ctime":1732267644,"ip_address":"上海","comment_id":395559,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100804101,"comment_content":"在选择嵌入模型时，你如何在模型大小与延迟、精度与效率之间做出权衡？分享你在实际项目中平衡这些因素的经验，或探讨在不同业务场景下的最佳平衡点。\n答：够用就好，如果小模型够用，一定用小模型。","like_count":0,"discussions":[{"author":{"id":3954065,"avatar":"https://static001.geekbang.org/account/avatar/00/3c/55/91/e3c96b88.jpg","nickname":"常扬","note":"","ucode":"11B62CDABBE875","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654266,"discussion_content":"很精髓，够用就好👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1732267644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}