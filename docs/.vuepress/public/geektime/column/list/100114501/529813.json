{"id":529813,"title":"11｜YAML：Kubernetes世界里的通用语","content":"<p>你好，我是Chrono。</p><p>在上次课里，我们一起研究了Kubernetes的内部架构和组成，知道它分为控制面和数据面。控制面管理集群，数据面跑业务应用，节点内部又有apiserver、etcd、scheduler、kubelet、kube-proxy等组件，它们互相协作来维护整个集群的稳定运行。</p><p>这套独特的Master/Node架构是Kubernetes得以安身立命的根本，但仅依靠这套“内功心法”是不是就能够随意仗剑走天涯了呢？</p><p>显然不行。就像许多武侠、玄幻作品里的人物一样，Kubernetes也需要一份“招式秘籍”才能把自己的“内功”完全发挥出来，只有内外兼修才能够达到笑傲江湖的境界。</p><p>而这份“招式秘籍”，就是Kubernetes世界里的标准工作语言YAML，所以今天，我就来讲讲为什么要有YAML、它是个什么样子、该怎么使用。</p><h2>声明式与命令式是怎么回事</h2><p>Kubernetes使用的YAML语言有一个非常关键的特性，叫“声明式”（Declarative），对应的有另外一个词：“命令式”（Imperative）。</p><p>所以在详细了解YAML之前，我们得先来看看“<strong>声明式</strong>”与“<strong>命令式</strong>”这两种工作方式，它们在计算机世界里的关系有点像小说里的“剑宗”与“气宗”。</p><!-- [[[read_end]]] --><p>我们在入门篇里学习的Docker命令和Dockerfile就属于“命令式”，大多数编程语言也属于命令式，它的特点是交互性强，注重顺序和过程，你必须“告诉”计算机每步该做什么，所有的步骤都列清楚，这样程序才能够一步步走下去，最后完成任务，显得计算机有点“笨”。</p><p>“声明式”，在Kubernetes出现之前比较少见，它与“命令式”完全相反，不关心具体的过程，更注重结果。我们不需要“教”计算机该怎么做，只要告诉它一个目标状态，它自己就会想办法去完成任务，相比起来自动化、智能化程度更高。</p><p>这两个概念比较抽象，不太好理解，也是Kubernetes初学者经常遇到的障碍之一。Kubernetes官网上特意以空调为例，解说“声明式”的原理，但我感觉还是没有说得太清楚，所以这里我就再以“打车”来形象地解释一下“命令式”和“声明式”的区别。</p><p><img src=\"https://static001.geekbang.org/resource/image/78/52/781e4bcc7c8c89263cca2710488a8152.jpg?wh=1200x750\" alt=\"图片\"></p><p>假设你要打车去高铁站，但司机不熟悉路况，你就只好不厌其烦地告诉他该走哪条路、在哪个路口转向、在哪里进出主路、停哪个站口。虽然最后到达了目的地，但这一路上也费了很多口舌，发出了无数的“命令”。很显然，这段路程就属于“命令式”。</p><p>现在我们来换一种方式，同样是去高铁站，但司机经验丰富，他知道哪里有拥堵、哪条路的红绿灯多、哪段路有临时管控、哪里可以抄小道，此时你再多嘴无疑会干扰他的正常驾驶，所以，你只要给他一个“声明”：我要去高铁站，接下来就可以舒舒服服地躺在后座上休息，顺利到达目的地了。</p><p>在这个“打车”的例子里，Kubernetes就是这样的一位熟练的司机，Master/Node架构让它对整个集群的状态了如指掌，内部的众多组件和插件也能够自动监控管理应用。</p><p>这个时候我们再用“命令式”跟它打交道就不太合适了，因为它知道的信息比我们更多更全面，不需要我们这个外行去指导它这个内行，所以我们最好是做一个“<strong>甩手掌柜</strong>”，用“声明式”把任务的目标告诉它，比如使用哪个镜像、什么时候运行，让它自己去处理执行过程中的细节。</p><p>那么，该用什么方式去给Kubernetes发出一个“声明”呢？</p><p>容器技术里的Shell脚本和Dockerfile可以很好地描述“命令式”，但对于“声明式”就不太合适了，这个时候，我们需要使用专门的YAML语言。</p><h2>什么是YAML</h2><p>YAML语言创建于2001年，比XML晚了三年。XML你应该知道吧，它是一种类似HTML的标签式语言，有很多繁文缛节。而YAML虽然在名字上模仿了XML，但实质上与XML完全不同，更适合人类阅读，计算机解析起来也很容易。</p><p>YAML的官网（<a href=\"https://yaml.org/\">https://yaml.org/</a>）有对语言规范的完整介绍，所以我就不在这里列举语言的细节了，只讲一些与Kubernetes相关的要点，帮助你快速掌握。</p><p>你需要知道，<strong>YAML是JSON的超集</strong>，支持整数、浮点数、布尔、字符串、数组和对象等数据类型。也就是说，任何合法的JSON文档也都是YAML文档，如果你了解JSON，那么学习YAML会容易很多。</p><p>但和JSON比起来，YAML的语法更简单，形式也更清晰紧凑，比如：</p><ul>\n<li>使用空白与缩进表示层次（有点类似Python），可以不使用花括号和方括号。</li>\n<li>可以使用 <code>#</code> 书写注释，比起JSON是很大的改进。</li>\n<li>对象（字典）的格式与JSON基本相同，但Key不需要使用双引号。</li>\n<li>数组（列表）是使用 <code>-</code> 开头的清单形式（有点类似MarkDown）。</li>\n<li>表示对象的 <code>:</code> 和表示数组的 <code>-</code> 后面都必须要有空格。</li>\n<li>可以使用 <code>---</code> 在一个文件里分隔多个YAML对象。</li>\n</ul><p>下面我们来看几个YAML的简单示例。</p><p>首先是数组，它使用 <code>-</code> 列出了三种操作系统：</p><pre><code class=\"language-yaml\"># YAML数组(列表)\nOS:\n  - linux\n  - macOS\n  - Windows\n</code></pre><p>这段YAML对应的JSON如下：</p><pre><code class=\"language-json\">{\n&nbsp; \"OS\": [\"linux\", \"macOS\", \"Windows\"]\n}\n</code></pre><p>对比可以看到YAML形式上很简单，没有闭合花括号、方括号的麻烦，每个元素后面也不需要逗号。</p><p>再来看一个YAML对象，声明了1个Master节点，3个Worker节点：</p><pre><code class=\"language-yaml\"># YAML对象(字典)\nKubernetes:\n  master: 1\n  worker: 3\n</code></pre><p>它等价的JSON如下：</p><pre><code class=\"language-json\">{\n&nbsp; \"Kubernetes\": {\n&nbsp; &nbsp; \"master\": 1,\n&nbsp; &nbsp; \"worker\": 3\n&nbsp; }\n}\n</code></pre><p>注意到了吗YAML里的Key都不需要使用双引号，看起来更舒服。</p><p>把YAML的数组、对象组合起来，我们就可以描述出任意的Kubernetes资源对象，第三个例子略微复杂点，你可以自己尝试着解释一下：</p><pre><code class=\"language-yaml\"># 复杂的例子，组合数组和对象\nKubernetes:\n  master:\n    - apiserver: running\n    - etcd: running\n  node:\n    - kubelet: running\n    - kube-proxy: down\n    - container-runtime: [docker, containerd, cri-o]\n</code></pre><p>关于YAML语言的其他知识点我就不再一一细说了，都整理在了这张图里，你可以参考<a href=\"https://yaml.org\">YAML官网</a>，在今后的课程中慢慢体会。</p><p><img src=\"https://static001.geekbang.org/resource/image/d4/04/d4f3d4cc27a8a4a70d4898b41efebf04.jpg?wh=1920x2030\" alt=\"图片\"></p><h2>什么是API对象</h2><p>学到这里还不够，因为YAML语言只相当于“语法”，要与Kubernetes对话，我们还必须有足够的“词汇”来表示“语义”。</p><p>那么应该声明Kubernetes里的哪些东西，才能够让Kubernetes明白我们的意思呢？</p><p>作为一个集群操作系统，Kubernetes归纳总结了Google多年的经验，在理论层面抽象出了很多个概念，用来描述系统的管理运维工作，这些概念就叫做“<strong>API对象</strong>”。说到这个名字，你也许会联想到上次课里讲到的Kubernetes组件<strong>apiserver</strong>。没错，它正是来源于此。</p><p>因为apiserver是Kubernetes系统的唯一入口，外部用户和内部组件都必须和它通信，而它采用了HTTP协议的URL资源理念，API风格也用RESTful的GET/POST/DELETE等等，所以，这些概念很自然地就被称为是“API对象”了。</p><p>那都有哪些API对象呢？</p><p>你可以使用 <code>kubectl api-resources</code> 来查看当前Kubernetes版本支持的所有对象：</p><pre><code class=\"language-bash\">kubectl api-resources\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/b2/91/b259e8bfbd0d15b796228d92ede42a91.png?wh=1920x701\" alt=\"图片\"></p><p>在输出的“NAME”一栏，就是对象的名字，比如ConfigMap、Pod、Service等等，第二栏“SHORTNAMES”则是这种资源的简写，在我们使用kubectl命令的时候很有用，可以少敲几次键盘，比如Pod可以简写成po，Service可以简写成svc。</p><p>在使用kubectl命令的时候，你还可以加上一个参数 <code>--v=9</code>，它会显示出详细的命令执行过程，清楚地看到发出的HTTP请求，比如：</p><pre><code class=\"language-bash\">kubectl get pod --v=9\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/3f/31/3fe4823f6ba10600e63c197487e84931.png?wh=1920x571\" alt=\"图片\"></p><p>从截图里可以看到，kubectl客户端等价于调用了curl，向8443端口发送了HTTP GET 请求，URL是 <code>/api/v1/namespaces/default/pods</code>。</p><p>目前的Kubernetes 1.23版本有50多种API对象，全面地描述了集群的节点、应用、配置、服务、账号等等信息，apiserver会把它们都存储在数据库etcd里，然后kubelet、scheduler、controller-manager等组件通过apiserver来操作它们，就在API对象这个抽象层次实现了对整个集群的管理。</p><h2>如何描述API对象</h2><p>现在我们就来看看如何以YAML语言，使用“声明式”在Kubernetes里描述并创建API对象。</p><p>之前我们运行Nginx的命令你还记得吗？使用的是 <code>kubectl run</code>，和Docker一样是“命令式”的：</p><pre><code class=\"language-plain\">kubectl run ngx --image=nginx:alpine\n</code></pre><p>我们来把它改写成“声明式”的YAML，说清楚我们想要的Nginx应用是个什么样子，也就是“目标状态”，让Kubernetes自己去决定如何拉取镜像运行：</p><pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n&nbsp; name: ngx-pod\n&nbsp; labels:\n&nbsp; &nbsp; env: demo\n&nbsp; &nbsp; owner: chrono\n\nspec:\n&nbsp; containers:\n&nbsp; - image: nginx:alpine\n&nbsp; &nbsp; name: ngx\n&nbsp; &nbsp; ports:\n&nbsp; &nbsp; - containerPort: 80\n</code></pre><p>有了刚才YAML语言知识“打底”，相信你基本上能够把它看明白，知道它是一个Pod，要使用nginx:alpine镜像创建一个容器，开放端口80，而其他的部分，就是Kubernetes对API对象强制的格式要求了。</p><p>因为API对象采用标准的HTTP协议，为了方便理解，我们可以借鉴一下HTTP的报文格式，把API对象的描述分成“header”和“body”两部分。</p><p>“header”包含的是API对象的基本信息，有三个字段：<strong>apiVersion</strong>、<strong>kind</strong>、<strong>metadata</strong>。</p><ul>\n<li>apiVersion表示操作这种资源的API版本号，由于Kubernetes的迭代速度很快，不同的版本创建的对象会有差异，为了区分这些版本就需要使用apiVersion这个字段，比如v1、v1alpha1、v1beta1等等。</li>\n<li>kind表示资源对象的类型，这个应该很好理解，比如Pod、Node、Job、Service等等。</li>\n<li>metadata这个字段顾名思义，表示的是资源的一些“元信息”，也就是用来标记对象，方便Kubernetes管理的一些信息。</li>\n</ul><pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n&nbsp; name: ngx-pod\n&nbsp; labels:\n&nbsp; &nbsp; env: demo\n&nbsp; &nbsp; owner: chrono\n</code></pre><p>比如在这个YAML示例里就有两个“元信息”，一个是name，给Pod起了个名字叫 <code>ngx-pod</code>，另一个是labels，给Pod“贴”上了一些便于查找的标签，分别是 <code>env</code> 和 <code>owner</code>。</p><p><strong>apiVersion</strong>、<strong>kind</strong>、<strong>metadata</strong>都被kubectl用于生成HTTP请求发给apiserver，你可以用 <code>--v=9</code> 参数在请求的URL里看到它们，比如：</p><pre><code class=\"language-plain\">https://192.168.49.2:8443/api/v1/namespaces/default/pods/ngx-pod\n</code></pre><p>和HTTP协议一样，“header”里的apiVersion、kind、metadata这三个字段是任何对象都必须有的，而“body”部分则会与对象特定相关，每种对象会有不同的规格定义，在YAML里就表现为 <code>spec</code> 字段（即specification），表示我们对对象的“期望状态”（desired status）。</p><p>还是来看这个Pod，它的spec里就是一个 <code>containers</code> 数组，里面的每个元素又是一个对象，指定了名字、镜像、端口等信息：</p><pre><code class=\"language-yaml\">spec:\n&nbsp; containers:\n&nbsp; - image: nginx:alpine\n&nbsp; &nbsp; name: ngx\n&nbsp; &nbsp; ports:\n&nbsp; &nbsp; - containerPort: 80\n</code></pre><p>现在把这些字段综合起来，我们就能够看出，这份YAML文档完整地描述了一个类型是Pod的API对象，要求使用v1版本的API接口去管理，其他更具体的名称、标签、状态等细节都记录在了metadata和spec字段等里。</p><p>使用 <code>kubectl apply</code>、<code>kubectl delete</code>，再加上参数 <code>-f</code>，你就可以使用这个YAML文件，创建或者删除对象了：</p><pre><code class=\"language-plain\">kubectl apply -f ngx-pod.yml\nkubectl delete -f ngx-pod.yml\n</code></pre><p>Kubernetes收到这份“声明式”的数据，再根据HTTP请求里的POST/DELETE等方法，就会自动操作这个资源对象，至于对象在哪个节点上、怎么创建、怎么删除完全不用我们操心。</p><h2>如何编写YAML</h2><p>讲到这里，相信你对如何使用YAML与Kubernetes沟通应该大概了解了，不过疑问也会随之而来：这么多API对象，我们怎么知道该用什么apiVersion、什么kind？metadata、spec里又该写哪些字段呢？还有，YAML看起来简单，写起来却比较麻烦，缩进对齐很容易搞错，有没有什么简单的方法呢？</p><p>这些问题最权威的答案无疑是Kubernetes的官方参考文档（<a href=\"https://kubernetes.io/docs/reference/kubernetes-api/\">https://kubernetes.io/docs/reference/kubernetes-api/</a>），API对象的所有字段都可以在里面找到。不过官方文档内容太多太细，查阅起来有些费劲，所以下面我就介绍几个简单实用的小技巧。</p><p>第一个技巧其实前面已经说过了，就是 <code>kubectl api-resources</code> 命令，它会显示出资源对象相应的API版本和类型，比如Pod的版本是“v1”，Ingress的版本是“networking.k8s.io/v1”，照着它写绝对不会错。</p><p>第二个技巧，是命令 <code>kubectl explain</code>，它相当于是Kubernetes自带的API文档，会给出对象字段的详细说明，这样我们就不必去网上查找了。比如想要看Pod里的字段该怎么写，就可以这样：</p><pre><code class=\"language-plain\">kubectl explain pod\nkubectl explain pod.metadata\nkubectl explain pod.spec\nkubectl explain pod.spec.containers\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/53/85/53cf783195be896e7632c1fc6bd24185.png?wh=1920x1068\" alt=\"图片\"></p><p>使用前两个技巧编写YAML就基本上没有难度了。</p><p>不过我们还可以让kubectl为我们“代劳”，生成一份“文档样板”，免去我们打字和对齐格式的工作。<strong>这第三个技巧就是kubectl的两个特殊参数 <code>--dry-run=client</code> 和 <code>-o yaml</code>，前者是空运行，后者是生成YAML格式，结合起来使用就会让kubectl不会有实际的创建动作，而只生成YAML文件。</strong></p><p>例如，想要生成一个Pod的YAML样板示例，可以在 <code>kubectl run</code> 后面加上这两个参数：</p><pre><code class=\"language-plain\">kubectl run ngx --image=nginx:alpine --dry-run=client -o yaml\n</code></pre><p>就会生成一个绝对正确的YAML文件：</p><pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n&nbsp; creationTimestamp: null\n&nbsp; labels:\n&nbsp; &nbsp; run: ngx\n&nbsp; name: ngx\nspec:\n&nbsp; containers:\n&nbsp; - image: nginx:alpine\n&nbsp; &nbsp; name: ngx\n&nbsp; &nbsp; resources: {}\n&nbsp; dnsPolicy: ClusterFirst\n&nbsp; restartPolicy: Always\nstatus: {}\n</code></pre><p>接下来你要做的，就是查阅对象的说明文档，添加或者删除字段来定制这个YAML了。</p><p>这个小技巧还可以再进化一下，把这段参数定义成Shell变量（名字任意，比如<span dollar=\"\">$</span>do/<span dollar=\"\">$</span>go，这里用的是<span dollar=\"\">$</span>out），用起来会更省事，比如：</p><pre><code class=\"language-plain\">export out=\"--dry-run=client -o yaml\"\nkubectl run ngx --image=nginx:alpine $out\n</code></pre><p>今后除了一些特殊情况，我们都不会再使用 <code>kubectl run</code> 这样的命令去直接创建Pod，而是会编写YAML，用“声明式”来描述对象，再用 <code>kubectl apply</code> 去发布YAML来创建对象。</p><h2>小结</h2><p>好了，今天就到这里，我们一起学习了“声明式”和“命令式”的区别、YAML语言的语法、如何用YAML来描述API对象，还有一些编写YAML文件的技巧。</p><p>Kubernetes采用YAML作为工作语言是它有别与其他系统的一大特色，声明式的语言能够更准确更清晰地描述系统状态，避免引入繁琐的操作步骤扰乱系统，与Kubernetes高度自动化的内部结构相得益彰，而且纯文本形式的YAML也很容易版本化，适合CI/CD。</p><p>再小结一下今天的内容要点：</p><ol>\n<li>YAML是JSON的超集，支持数组和对象，能够描述复杂的状态，可读性也很好。</li>\n<li>Kubernetes把集群里的一切资源都定义为API对象，通过RESTful接口来管理。描述API对象需要使用YAML语言，必须的字段是<strong>apiVersion、kind、metadata</strong>。</li>\n<li>命令 <code>kubectl api-resources</code> 可以查看对象的apiVersion和kind，命令 <code>kubectl explain</code> 可以查看对象字段的说明文档。</li>\n<li>命令 <code>kubectl apply</code>、<code>kubectl delete</code> 发送HTTP请求，管理API对象。</li>\n<li>使用参数 <code>--dry-run=client -o yaml</code> 可以生成对象的YAML模板，简化编写工作。</li>\n</ol><h2>课下作业</h2><p>最后是课下作业时间，给你留两个思考题：</p><ol>\n<li>你是如何理解“命令式”和“声明式”的？为什么说空调是“声明式”的？</li>\n<li>使用 <code>--v=9</code> 参数，试着解释一下YAML是如何被kubectl转换成HTTP请求的。</li>\n</ol><p>欢迎在留言区分享你的思考，从今天开始我们就要习惯写YAML来创建对象了，如果学习过程中有任何问题也欢迎留言提问，我会第一时间回复你。下节课再见。</p><p><img src=\"https://static001.geekbang.org/resource/image/13/36/13dc437dda840dda4850fb72237b8e36.jpg?wh=1920x2868\" alt=\"\"></p>","neighbors":{"left":{"article_title":"加餐｜Kubernetes“弃用Docker”是怎么回事？","id":536048},"right":{"article_title":"12｜Pod：如何理解这个Kubernetes里最核心的概念？","id":531551}},"comments":[{"had_liked":false,"id":351510,"user_name":"nada","can_delete":false,"product_type":"c1","uid":1112458,"ip_address":"","ucode":"F36E60AEB405A6","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/8a/fc767da7.jpg","comment_is_top":false,"comment_ctime":1657855917,"is_pvip":true,"replies":[{"id":"127844","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1657863020,"ip_address":"","comment_id":351510,"utype":1}],"discussion_count":4,"race_medal":0,"score":"48902496173","product_id":100114501,"comment_content":"1. 因为空调的使用是我们设置温度，然后空调尽量去达成设置的温度，即我们设置的是我们想要达成的效果，而不像电视遥控器，每次操作都发送一个指令，声明式还有一个特点是容易 patch，拿空调举例，当前气温 30 度，我们先设置了 24 度，然后升高到 26 度，空调并不会先降低到 24 度，再升高到 26 度，而是将两次传递的意图 patch，直接降低到 26 度，k8s 也是这样<br>2. yaml 转换 json 的过程基本上字段一一对应，除了最后会把当前的 json 再序列化为字符串，存储到 &quot;kubectl.kubernetes.io&#47;last-applied-configuration&quot; 这个 annotations 中","like_count":12,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580077,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657863020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581362,"discussion_content":"同学，&#34;kubectl.kubernetes.io/last-applied-configuration&#34; 这个是什么？ 在哪里看呀？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658742796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580747,"discussion_content":"annotation自己也可以写，Kubernetes也可以加","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658367612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580165,"discussion_content":"annotation应该是kubectl添加的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657943340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351505,"user_name":"psoracle","can_delete":false,"product_type":"c1","uid":1219195,"ip_address":"","ucode":"26F9B166508BBA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2xoGmvlQ9qfSibVpPJyyaEriavuWzXnuECrJITmGGHnGVuTibUuBho43Uib3Y5qgORHeSTxnOOSicxs0FV3HGvTpF0A/132","comment_is_top":false,"comment_ctime":1657855287,"is_pvip":false,"replies":[{"id":"127842","content":"awesome","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1657862977,"ip_address":"","comment_id":351505,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27427659063","product_id":100114501,"comment_content":"回答一下作业<br>1. 你是如何理解“命令式”和“声明式”的？为什么说空调是“声明式”的？<br>我现在从kubernetes相关知识点中学习并理解到的“声明式”一个最直白的地方是新增与修改两个命令式操作写成apply，如果创建对象不存在则创建、对象已存在就比较spec进行相应变更，当然k8s的修改实际上是先delete再create。至于kubectl create、kubectl edit、kubectl delete等都是&quot;命令式&quot;操作，告诉k8s应该怎么做。<br>空调是“声明式”的原因是我不知道当前温度是多少，只需要我知道应该开成多少度即可，即我们在操作遥控器之前就知道我们要将空调调成多少度，这是预期值。<br><br>2. 使用 --v=9 参数，试着解释一下 YAML 是如何被 kubectl 转换成 HTTP 请求的。<br>虽然yaml格式是json的超集，但在k8s中的yaml文件最终都是被转换为json格式字符串放在request body中提交到apiserver的，从`kubectl -v=9`对各种操作的调试中可以看到。<br>除此之外，还发现一些有规律的地方，如下：<br>可见简单对象（如pod, configmap, secret, serviceaccount等）调用的接口形式如 `&#47;api&#47;&lt;apiVersion&gt;&#47;namespaces&#47;&lt;namespace&gt;&#47;&lt;kinds&gt;[&#47;&lt;name&gt;]`，其中对象类型为复数形式即`kubectl api-resources`中的name字段，修改、删除与查询具体对象时在URL中有`&#47;&lt;name&gt;`部分，其它如创建、查询所有就没有。对于复合对象（简单对象的包装对象，如replicaset, deployment, statefulset, cronjob等）的URL不同的是以`&#47;apis`开头，说明是属于复合型的接口（组合服务）。<br>","like_count":6,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580075,"discussion_content":"awesome","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657862977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351480,"user_name":"陶乐思","can_delete":false,"product_type":"c1","uid":1961274,"ip_address":"","ucode":"45A996B75E8341","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ed/3a/ab8faba0.jpg","comment_is_top":false,"comment_ctime":1657836558,"is_pvip":false,"replies":[{"id":"127833","content":"它直接输出在屏幕上，需要用一个重定向功能，命令后面加上 &gt; xxx.yml，或者直接鼠标选择文本。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1657839695,"ip_address":"","comment_id":351480,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27427640334","product_id":100114501,"comment_content":"请问一下老师, —dry-run=client -o yaml生成的YAML默认情况下会将文件保存在哪里啊？没有找到呢…环境：windows+minikube","like_count":6,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580034,"discussion_content":"它直接输出在屏幕上，需要用一个重定向功能，命令后面加上 &gt; xxx.yml，或者直接鼠标选择文本。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657839695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1961274,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/ed/3a/ab8faba0.jpg","nickname":"陶乐思","note":"","ucode":"45A996B75E8341","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":580144,"discussion_content":"谢谢解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657918654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":580034,"ip_address":""},"score":580144,"extra":""}]}]},{"had_liked":false,"id":352043,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1658363827,"is_pvip":false,"replies":[{"id":"127997","content":"my pleasure。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1658367367,"ip_address":"","comment_id":352043,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14543265715","product_id":100114501,"comment_content":"终于对一头雾水的yaml文件有了一个正确的了解，感谢老师","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580746,"discussion_content":"my pleasure。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1658367367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351917,"user_name":"安迪密恩","can_delete":false,"product_type":"c1","uid":1331611,"ip_address":"","ucode":"A6F3F67CF8E6F8","user_header":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","comment_is_top":false,"comment_ctime":1658290104,"is_pvip":false,"replies":[{"id":"127959","content":"欢迎分享学习心得。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1658301562,"ip_address":"","comment_id":351917,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10248224696","product_id":100114501,"comment_content":"这门课太棒了，以前接触的杂乱的知识点在学完这一章之后逐渐变得脉络清晰！","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580631,"discussion_content":"欢迎分享学习心得。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658301562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352273,"user_name":"郑海成","can_delete":false,"product_type":"c1","uid":1192616,"ip_address":"","ucode":"B0363EA4B2C646","user_header":"https://static001.geekbang.org/account/avatar/00/12/32/a8/d5bf5445.jpg","comment_is_top":false,"comment_ctime":1658491597,"is_pvip":true,"replies":[{"id":"128153","content":"知道这个意思就行，不用太咬文嚼字。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1658495450,"ip_address":"","comment_id":352273,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5953458893","product_id":100114501,"comment_content":"有了刚才 YAML 语言知识“打底”，相信你基本上能够把它看明白，知道它是一个 Pod，要使用 nginx:alpine 镜像创建一个容器，开放端口 80，而其他的部分，就是 Kubernetes 对 API 对象强制的格式要求了。<br>————<br>查了一下官方文档，其实不是“开放”，好像是是“说明”容器中暴露的端口是80","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581101,"discussion_content":"知道这个意思就行，不用太咬文嚼字。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658495450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1349202,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJEQ91aYaGSuicvGteyiboh9LibWSxAN9zml6XVGeSGmaICIgZ8lH54ngicLicJWcAU0NENibTvtgc0d3tw/132","nickname":"xuing","note":"","ucode":"04DBD82DD1D3F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582005,"discussion_content":"应该和docker里的expose表达的是一个东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659136934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352039,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1658362557,"is_pvip":false,"replies":[{"id":"127996","content":"<br>1. pod&#47;pods&#47;po在Kubernetes里都是同义词，至于单复数的语法问题我就不太好解释了。<br><br>2.是的，image在Pod的container里，见下一讲。<br><br>3.我试了可以转换，再查一下看是哪里有问题。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1658367357,"ip_address":"","comment_id":352039,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5953329853","product_id":100114501,"comment_content":"有两个问题想请教老师，<br><br>1. 通过 `kubectl api-resources` 看到的资源名称中其实没有 pod 而是 pods，但是我们依旧可以通过 pod 来访问对应的资源，这里是否可以理解为 k8s 自动帮忙做了单复数转换？<br><br>2. 没有看到 images 相关的资源，k8s 是如何管理 image 的呢？还是说对应的镜像管理被细分到 pod 的字段中？<br><br>3. 文章中（在 “什么是 YAML” 的结尾处）给的最后一个复杂的 YAML 例子，我试着在 https:&#47;&#47;www.bejson.com&#47;json&#47;json2yaml&#47; 上面转换成 JSON，但是平台会报如下错误：<br><br>yaml错误:<br>TypeError: Cannot read properties of undefined (reading &#39;split&#39;)<br><br>感觉像是缩进的问题","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580745,"discussion_content":"\n1. pod/pods/po在Kubernetes里都是同义词，至于单复数的语法问题我就不太好解释了。\n\n2.是的，image在Pod的container里，见下一讲。\n\n3.我试了可以转换，再查一下看是哪里有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658367357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581383,"discussion_content":"我试了，也可以转换呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658747439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351564,"user_name":"摊牌","can_delete":false,"product_type":"c1","uid":1453182,"ip_address":"","ucode":"F142596BFE4594","user_header":"https://static001.geekbang.org/account/avatar/00/16/2c/7e/f1efd18b.jpg","comment_is_top":false,"comment_ctime":1657932487,"is_pvip":true,"replies":[{"id":"127854","content":"理解的不错，不过命令式不局限于shell命令，只要是有顺序关系的一系列指令都可以叫命令式。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1657949591,"ip_address":"","comment_id":351564,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5952899783","product_id":100114501,"comment_content":"对于&quot;命令式&quot;和&quot;声明式&quot;，我觉得最本质的区别就是，命令式是通过实际的shell命令来执行完成某项功能，而声明式是仅仅定义一个配置文件，来描述预期的对象状态，再通过特定的命令去加载渲染这个配置文件，去完成对应的功能。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580168,"discussion_content":"理解的不错，不过命令式不局限于shell命令，只要是有顺序关系的一系列指令都可以叫命令式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657949591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351551,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1111985,"ip_address":"","ucode":"9DADD72C193296","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","comment_is_top":false,"comment_ctime":1657885115,"is_pvip":true,"replies":[{"id":"127847","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1657894784,"ip_address":"","comment_id":351551,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5952852411","product_id":100114501,"comment_content":"有了那个三个技巧，终于可以方便地写YAML 文件了","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580132,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657894785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351509,"user_name":"朱雯","can_delete":false,"product_type":"c1","uid":1035744,"ip_address":"","ucode":"064C45FBF6B51F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/e0/c85bb948.jpg","comment_is_top":false,"comment_ctime":1657855504,"is_pvip":true,"replies":[{"id":"127843","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1657863005,"ip_address":"","comment_id":351509,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5952822800","product_id":100114501,"comment_content":"1. 声明式： 我要结果。命令式：过程要符合要求，有一个不合适的比喻那就是面向对象和面向过程。要结果和要过程。<br>2. 会变成这样一条curl命令，curl -v -XGET  -H &quot;Accept: application&#47;com.github.proto-openapi.spec.v2@v1.0+protobuf&quot; -H &quot;User-Agent: kubectl&#47;v1.23.3 (linux&#47;amd64) kubernetes&#47;816c97a&quot; &#39;https:&#47;&#47;192.168.49.2:8443&#47;openapi&#47;v2?timeout=32s&#39; 不确定是不是要的答案","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580076,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657863005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581361,"discussion_content":"同学，这个curl命令是怎么生成的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658742121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1035744,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cd/e0/c85bb948.jpg","nickname":"朱雯","note":"","ucode":"064C45FBF6B51F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581363,"discussion_content":"就是kubectl 加上—v9 就可以显示详细日志 里面就有curl命令。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1658742908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":581361,"ip_address":""},"score":581363,"extra":""},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1035744,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cd/e0/c85bb948.jpg","nickname":"朱雯","note":"","ucode":"064C45FBF6B51F","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":581422,"discussion_content":"了解了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658767618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":581363,"ip_address":""},"score":581422,"extra":""}]}]},{"had_liked":false,"id":351483,"user_name":"赤色闪电","can_delete":false,"product_type":"c1","uid":1144765,"ip_address":"","ucode":"B5FAA29E62132C","user_header":"https://static001.geekbang.org/account/avatar/00/11/77/bd/e7ff842c.jpg","comment_is_top":false,"comment_ctime":1657844986,"is_pvip":true,"replies":[{"id":"127835","content":"good","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1657849277,"ip_address":"","comment_id":351483,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5952812282","product_id":100114501,"comment_content":"“声明式”：空调遥控器操控空调设定想要的温度和模式即可。“命令式”：电视遥控器操控电视，按一个钮换一个台。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580047,"discussion_content":"good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657849277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360451,"user_name":"Geek_cb910c","can_delete":false,"product_type":"c1","uid":2268541,"ip_address":"上海","ucode":"E60FCD26CE439A","user_header":"","comment_is_top":false,"comment_ctime":1666579269,"is_pvip":false,"replies":[{"id":"131153","content":"不写出来外界就不知道容器用哪个端口提供服务，和docker的-p作用是一样的，只是语法不同。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1666588752,"ip_address":"上海","comment_id":360451,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1666579269","product_id":100114501,"comment_content":"containerPort: 80， 开发端口是80<br>这个pod资源对象，containerPort字段写出来有什么意义呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591457,"discussion_content":"不写出来外界就不知道容器用哪个端口提供服务，和docker的-p作用是一样的，只是语法不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666588752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360018,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1087243,"ip_address":"上海","ucode":"E1CE8575B3F106","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","comment_is_top":false,"comment_ctime":1666139303,"is_pvip":false,"replies":[{"id":"130938","content":"good","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1666144621,"ip_address":"上海","comment_id":360018,"utype":1}],"discussion_count":1,"race_medal":3,"score":"1666139303","product_id":100114501,"comment_content":"<br><br>1.声明式：只关注结果不关注过程<br>命令式：过程结果都关注<br>我只要告诉空调你给我把温度调到26度，我根本不用管他的过程是怎么样的<br><br>2.其实就是根据yaml的属性中的版本，类型拼接请求地址，然后将对应的属性当做请求体和参数传递","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590872,"discussion_content":"good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666144621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355517,"user_name":"stefen","can_delete":false,"product_type":"c1","uid":1202047,"ip_address":"上海","ucode":"7C9AAE829E7802","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/oib0a89lqtOhJL1UvfUp4uTsRLrDbhoGk9jLiciazxMu0COibJsFCZDypK1ZFcHEJc9d9qgbjvgR41ImL6FNPoVlWA/132","comment_is_top":false,"comment_ctime":1661442421,"is_pvip":false,"replies":[{"id":"129375","content":"好像有不少同学遇到了这个问题，可能是shell对变量的支持不一样，看看是不是bash。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1661483409,"ip_address":"上海","comment_id":355517,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1661442421","product_id":100114501,"comment_content":"报错了呢, 不知道为啥，麻烦指点一下，谢谢<br>export out=&quot;--dry-run=client -o yaml&quot;<br>kubectl run ngx2 --image=nginx:alpine $out<br><br>error: Invalid dry-run value (client -o yaml). Must be &quot;none&quot;, &quot;server&quot;, or &quot;client&quot;.","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585326,"discussion_content":"好像有不少同学遇到了这个问题，可能是shell对变量的支持不一样，看看是不是bash。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661483409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2169837,"avatar":"https://static001.geekbang.org/account/avatar/00/21/1b/ed/34d56ff4.jpg","nickname":"CV","note":"","ucode":"CBB5C73B22D3FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586877,"discussion_content":"我用zsh有同样问题，切回bash好使","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662550335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354433,"user_name":"静且慢且远","can_delete":false,"product_type":"c1","uid":2767251,"ip_address":"北京","ucode":"4C07047F052BB4","user_header":"https://static001.geekbang.org/account/avatar/00/2a/39/93/bcafe00f.jpg","comment_is_top":false,"comment_ctime":1660383293,"is_pvip":true,"replies":[{"id":"128927","content":"<br>1.Kubernetes会看YAML 的内容，内容不变就不会修改对象，所以不会有任何动作发生。端口的问题看后面的文章再讲。<br><br>2.是minikube利用了docker来实现的Kubernetes，Kubernetes本身不会绑定在docker上，而是用cri接口实现了解耦。<br><br>3.是同一个，因为Kubernetes通过docker创建了Pod，所以从Kubernetes和docker角度分别来看，就都能够看到容器。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1660438150,"ip_address":"北京","comment_id":354433,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1660383293","product_id":100114501,"comment_content":"老师有几个疑问，想问一下<br>1,我用yaml的方式创建了一个pod,这个文件我执行了2次， 名字改了一下，其他都没改， 端口是一样的，我在想 这样端口不会冲突吗？还有就是我这两个yaml都执行成功了，端口都是8888，为啥去访问虚拟机的端口访问不了呢？<br>2，我用minikube ssh 登进去这个k8s系统里面看，执行了一下docker ps 命令，里面有好多容器在运行，我记得我当时只在宿主机ubuntu里面装了docker,没有在这个minikube 里面装docker,我想请问一下，k8s系统里面的docker 是绑定的吗？就是前面几讲讲的，容器可以不绑定docker 还可以绑定其他其他容器， 是这个时候 k8s系统里面才有docker的吗？<br>3,用yaml方式创建pod成功之后， 使用kubectl get pod命令，可以查看到这里增加一个pod， 然后在登进去 k8s 这个系统里面，执行docker ps ，这里应该也会增加一个容器把，他们有啥关系吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583839,"discussion_content":"\n1.Kubernetes会看YAML 的内容，内容不变就不会修改对象，所以不会有任何动作发生。端口的问题看后面的文章再讲。\n\n2.是minikube利用了docker来实现的Kubernetes，Kubernetes本身不会绑定在docker上，而是用cri接口实现了解耦。\n\n3.是同一个，因为Kubernetes通过docker创建了Pod，所以从Kubernetes和docker角度分别来看，就都能够看到容器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660438150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352954,"user_name":"学渣要每日进步","can_delete":false,"product_type":"c1","uid":1111434,"ip_address":"陕西","ucode":"0EB5CB54F2E890","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/8a/e0fa8730.jpg","comment_is_top":false,"comment_ctime":1659054323,"is_pvip":true,"replies":[{"id":"128321","content":"可以初步这么理解，后面在使用Kubernetes的过程中慢慢体会。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1659057357,"ip_address":"陕西","comment_id":352954,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1659054323","product_id":100114501,"comment_content":"我倒是觉得申明是和命令式是只是多了一个概念，申明式其实就是一个配置文件","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581876,"discussion_content":"可以初步这么理解，后面在使用Kubernetes的过程中慢慢体会。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659057357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352804,"user_name":"Geek_eb20c9","can_delete":false,"product_type":"c1","uid":2379478,"ip_address":"","ucode":"2E450A37026090","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/JddqdJSic77HqM1ZsfYtppHzDP9HDKY09Kib48VLMB3zDx9iaTCZZZMXg0mdyMETlJ1IjIH1QfvpA2Y2B3jHibldgg/132","comment_is_top":false,"comment_ctime":1658935339,"is_pvip":false,"replies":[{"id":"128285","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1658960443,"ip_address":"","comment_id":352804,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1658935339","product_id":100114501,"comment_content":"你是如何理解“命令式”和“声明式”的？为什么说空调是“声明式”的？  <br>命令式是它不知道怎么去完成你给它的目标，你需要指导它才能完成。声明式，我只需要给它一个目标，它就知道怎么完成！<br>因为我给空调一个目标，空调通过自己的办法可以完成这个目标！所以是声明式！<br>使用 --v=9 参数，试着解释一下 YAML 是如何被 kubectl 转换成 HTTP 请求的<br>YAML被转换成两部分，一部份是apiversion  metedata，kind作为head，剩余的转换为body！","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581730,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658960443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352617,"user_name":"YueShi","can_delete":false,"product_type":"c1","uid":1625530,"ip_address":"","ucode":"8F7AFAE4641A7D","user_header":"https://static001.geekbang.org/account/avatar/00/18/cd/ba/3a348f2d.jpg","comment_is_top":false,"comment_ctime":1658815328,"is_pvip":true,"replies":[{"id":"128270","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1658876168,"ip_address":"","comment_id":352617,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1658815328","product_id":100114501,"comment_content":"好多client和server的交互，其实本质上还是http&#47;socket&#47;等底层的东西，例如mysql client&#47;server的交互，redis cli的交互，kafka交互等，选择RESTful的http的接口形式，代表着最通用，最宽泛和最自由的形势，外面加上软件自身的编码解码翻译过程","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581591,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658876168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}