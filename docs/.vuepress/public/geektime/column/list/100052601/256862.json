{"id":256862,"title":"17 | 函数式编程：不用函数式编程语言，怎么写函数式的程序？","content":"<p>你好，我是郑晔！</p><p>前面几讲，我们讲了结构化编程和面向对象编程，对于大多数程序员来说，这些内容还是比较熟悉的。接下来，我们要讨论的函数式编程，对一些人来说就要陌生一些。</p><p>你可能知道，Java和C++已经引入了Lambda，目的就是为了支持函数式编程。因为，函数式编程里有很多优秀的元素，比如，组合式编程、不变性等等，都是我们值得在日常设计中借鉴的。即便我们使用的是面向对象编程语言，也可以将这些函数式编程的做法运用到日常工作中，这已经成为大势所趋。</p><p>但是，很多人学习函数式编程，刚刚知道了概念，就碰上了函数式编程的起源，遇到许多数学概念，然后，就放弃了。为什么学习函数式编程这么困难呢？主要是因为它有一些不同的思维逻辑，同时人们也缺少一个更好的入门方式。</p><p>所以，在这一讲中，我打算站在一个更实用的角度，帮你做一个函数式编程的入门。等你有了基础之后，后面两讲，我们再来讨论函数式编程中优秀的设计理念。</p><p>好，我们开始吧！</p><h2>不断增加的需求</h2><p>我们从一个熟悉的场景出发。假设我们有一组学生，其类定义如下：</p><pre><code>// 单个学生的定义\nclass Student {\n  // 实体 ID\n  private long id;\n  // 学生姓名\n  private String name;\n  // 学号\n  private long sno;\n  // 年龄\n  private long age;\n}\n\n// 一组学生的定义\nclass Students {\n  private List&lt;Student&gt; students;\n}\n</code></pre><p>如果我们需要按照姓名找出其中一个，代码可能会这么写：</p><pre><code>Student findByName(final String name) {\n  for (Student student : students) {\n    if (name.equals(student.getName())) {\n        return student;\n    }\n  }\n\n  return null;\n}\n</code></pre><p>这时候，新需求来了，我们准备按照学号来找人，代码也许就会这么写：</p><!-- [[[read_end]]] --><pre><code>Student findBySno(final long sno) {\n  for (Student student : students) {\n    if (sno == student.getSno()) {\n        return student;\n    }\n  }\n\n  return null;\n}\n</code></pre><p>又一个新需求来了，我们这次需要按照 ID 去找人，代码可以如法炮制：</p><pre><code>Student findById(final long id) {\n  for (Student student : students) {\n    if (id == student.getId()) {\n        return student;\n    }\n  }\n\n  return null;\n}\n</code></pre><p>看完这三段代码，你发现问题了吗？这三段代码，除了查询的条件不一样，剩下的结构几乎一模一样，这就是一种重复。</p><p>那么，我们要怎么消除这个重复呢？我们可以引入查询条件这个概念，这里只需要返回一个真假值，我们可以这样定义：</p><pre><code>interface Predicate&lt;T&gt; {\n  boolean test(T t);\n}\n</code></pre><p>有了查询条件，我们可以改造一下查询方法，把条件作为参数传进去：</p><pre><code>Student find(final Predicate&lt;Student&gt; predicate) {\n  for (Student student : students) {\n    if (predicate.test(student)) {\n        return student;\n    }\n  }\n\n  return null;\n}\n</code></pre><p>于是，按名字查找就会变成下面这个样子（其他两个类似，就不写了）。为了帮助你更好地理解，我没有采用Java 8的Lambda写法，而用了你最熟悉的对象：</p><pre><code>Student findByName(final String name) {\n  return find(new Predicate&lt;Student&gt;() {\n    @Override\n    public boolean test(final Student student) {\n      return name.equals(student.getName());\n    }\n  });\n}\n</code></pre><p>这样是很好，但你会发现，每次有一个新的查询，你就要做一层这个封装。为了省去这层封装，我们可以把查询条件做成一个方法：</p><pre><code>static Predicate&lt;Student&gt; byName(final String name) {\n  return new Predicate&lt;Student&gt;() {\n    @Override\n    public boolean test(final Student student) {\n      return name.equals(student.getName();\n    }\n  };\n}\n</code></pre><p>其他几个字段也可以做类似的封装，这样一来，要查询什么就由使用方自己决定了：</p><pre><code>find(byName(name));\nfind(bySno(sno));\nfind(byId(id));\n</code></pre><p>现在我们想用名字和学号同时查询，该怎么办呢？你是不是打算写一个byNameAndSno的方法呢？且慢，这样一来，岂不是每种组合你都要写一个？那还受得了吗。我们完全可以用已有的两个方法组合出一个新查询来，像这样：</p><pre><code>find(and(byName(name), bySno(sno)));\n</code></pre><p>这里面多出一个and方法，它要怎么实现呢？其实也不难，按照正常的and逻辑写一个就好，像下面这样：</p><pre><code>static &lt;T&gt; Predicate&lt;T&gt; and(final Predicate&lt;T&gt;... predicates) {\n    return new Predicate&lt;T&gt;() {\n        @Override\n        public boolean test(final T t) {\n            for (Predicate&lt;T&gt; predicate : predicates) {\n                if (!predicate.test(t)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    };\n}\n</code></pre><p>类似地，你还可以写出or和not的逻辑，这样，使用方能够使用的查询条件一下子就多了起来，他完全可以按照自己的需要任意组合。</p><p>这时候，又来了一个新需求，想找出所有指定年龄的人。写一个byAge现在已经很简单了。那找到所有人该怎么写呢？有了前面的基础也不难。</p><pre><code>Student findAll(final Predicate&lt;Student&gt; predicate) {\n    List&lt;Student&gt; foundStudents = new ArrayList&lt;Student&gt;();\n    for (Student student : students) {\n        if (predicate.test(student)) {\n            foundStudents.add(student);\n        }\n    }\n\n    return new Students(foundStudents);\n}\n</code></pre><p>如此一来，要做什么动作（查询一个、查询所有等）和用什么条件（名字、学号、ID 和年龄等）就成了两个维度，使用方可以按照自己的需要任意组合。</p><p>直到现在，我们所用的代码都是常规的Java代码，却产生了神奇的效应。这段代码的作者只提供了各种基本元素（动作和条件），而这段代码的用户通过组合这些基本的元素完成真正的需求。这种做法完全不同于常规的面向对象的做法，其背后的思想就源自函数式编程。在上面这个例子里面，让代码产生质变的地方就在于Predicate的引入，而它实际上就是一个函数。</p><p>这是一个简单的例子，但是我们可以发现，按照“消除重复”这样一个简单的编写代码逻辑，我们不断地调整代码，就是可以写出这种函数式风格的代码。在写代码这件事上，我们常常会有一种殊途同归的感觉。</p><p>现在，你已经对函数式编程应该有了一个初步的印象，接下来，我们看看函数式编程到底是什么。</p><h2>函数式编程初步</h2><p>函数式编程是一种编程范式，<strong>它提供给我们的编程元素就是函数</strong>。只不过，这个函数是来源于数学的函数，你可以回想一下，高中数学学到的那个f(x)。同我们习惯的函数相比，它要规避状态和副作用，换言之，同样的输入一定会给出同样的输出。</p><p>之所以说函数式编程的函数来自数学，因为它的起源是数学家Alonzo Church发明的Lambda演算（Lambda calculus，也写作 λ-calculus）。所以，Lambda这个词在函数式编程中经常出现，你可以简单地把它理解成<strong>匿名函数</strong>。</p><p>我们这里不关心Lambda演算的数学逻辑，你只要知道，Lambda演算和图灵机是等价的，都是那个年代对“计算”这件事探索的结果。</p><p>我们现在接触的大多数程序设计语言都是从图灵机的模型出发的，但既然二者是等价的，就有人选择从Lambda演算出发。比如早期的函数式编程语言LISP，它在20 世纪50年代就诞生了，是最早期的几门程序设计语言之一。它的影响却是极其深远的，后来的函数式编程语言可以说都直接或间接受着它的影响。</p><p>虽然说函数式编程语言早早地就出现了，但函数式编程这个概念却是John Backus在其<a href=\"https://www.thocp.net/biographies/papers/backus_turingaward_lecture.pdf\">1977 年图灵奖获奖的演讲</a>上提出来。有趣的是，John Backus 获奖的理由是他在Fortran语言上的贡献，而这门语言和函数式编程刚好是两个不同“计算”模型的极端。</p><p>了解了函数式编程产生的背景之后，我们就可以正式打开函数式编程的大门了。</p><p>函数式编程第一个需要了解的概念就是函数。在函数式编程中，函数是一等公民（first-class citizen）。一等公民是什么意思呢？</p><ul>\n<li>它可以按需创建；</li>\n<li>它可以存储在数据结构中；</li>\n<li>它可以当作实参传给另一个函数；</li>\n<li>它可以当作另一个函数的返回值。</li>\n</ul><p>对象，是面向对象程序设计语言的一等公民，它就满足所有上面的这些条件。在函数式编程语言里，函数就是一等公民。函数式编程语言有很多，经典的有LISP、Haskell、Scheme等，后来也出现了一批与新平台结合紧密的函数式编程语言，比如：Clojure、F#、Scala等。</p><p>很多语言虽然不把自己归入函数式编程语言，但它们也提供了函数式编程的支持，比如支持了Lambda的，这类的语言像Ruby、JavaScript等。</p><p><strong>如果你的语言没有这种一等公民的函数支持，完全可以用某种方式模拟出来</strong>。在前面的例子里，我们就用对象模拟出了一个函数，也就是Predicate。在旧版本的C++中，也可以用functor（函数对象）当作一等公民的函数。在这两个例子中，既然函数是用对象模拟出来的，自然就符合一等公民的定义，可以方便将其传来传去。</p><p>在开头，我提到过，随着函数式编程这几年蓬勃的发展，越来越多的“老”程序设计语言已经在新的版本中加入了对函数式编程的支持。所以，如果你用的是新版本，可以不必像我写得那么复杂。</p><p>比如，在Java里，Predicate本身就是JDK自带的，and方法也不用自己写，加上有Lambda语法简化代码的编写，代码可以写成下面这样，省去了构建一个匿名内部类的繁琐：</p><pre><code>static Predicate&lt;Student&gt; byName(String name) {\n    return student -&gt; student.getName().equals(name);\n}\n\nfind(byName(name).and(bySno(sno)));\n</code></pre><p>如果按照对象的理解方式，Predicate是一个对象接口，但它可以接受一个Lambda为其赋值。有了前面的基础，你可以把它理解成一个简化版的匿名内部类。其实，这里面主要工作都在编译器上，它帮助我们做了类型推演（Type Inference）。</p><p>在Java里，可以表示一个函数的接口还有几个，比如，Function（一个参数一个返回值）、Supplier（没有参数只有返回值），以及一大堆形式稍有不同的变体。</p><p>这些“函数”的概念为我们提供了一些基础的构造块，从前面的例子，你可以看出，函数式编程一个有趣的地方就在于这些构造块可以组合起来，这一点和面向对象是类似的，都是由基础的构造块逐步组合出来的。</p><p>我们讲模型也好，面向对象也罢，对于这种用小组件逐步叠加构建世界的思路已经很熟悉了，在函数式编程里，我们又一次领略到同样的风采，而这一切的出发点，就是“函数”。</p><h2>总结时刻</h2><p>这一讲我们讨论了<strong>函数式编程</strong>这种编程范式，它给我们提供的编程元素是函数。只不过，这个函数不同于传统程序设计语言的函数，它的思想根源是数学中的<strong>函数</strong>。</p><p>函数是函数式编程的一等公民（first-class citizen）。一等公民指的是：</p><ul>\n<li>它可以按需创建；</li>\n<li>它可以存储在数据结构中；</li>\n<li>它可以当作实参传给另一个函数；</li>\n<li>它可以当作另一个函数的返回值。</li>\n</ul><p>如果你使用的程序设计语言不支持函数是一等公民，可以用其他的方式模拟出来，比如，用对象模拟函数。随着函数式编程的兴起，越来越多的程序设计语言加入了自己的函数，比如：Java和C++增加了Lambda，可以在一定程度上支持函数式编程。</p><p>函数式编程就是把函数当做一个个的构造块，然后将这些函数组合起来，构造出一个新的构造块。这样有趣的事情就来了。下一讲，我们来看看这件有趣的事，看函数式编程中是怎么组合函数的。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>函数式编程的要素是一等公民的函数，如果语言不支持，可以自己模拟。</strong></p><h2>思考题</h2><p>今天我们开始了函数式编程的讲解，我想请你谈谈函数式编程给你留下的最深刻印象，无论是哪门函数式编程语言也好，还是某个函数式编程的特性也罢。欢迎在留言区分享你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":231594,"user_name":"骨汤鸡蛋面","can_delete":false,"product_type":"c1","uid":1050002,"ip_address":"","ucode":"2AC141A523E710","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/92/b609f7e3.jpg","comment_is_top":false,"comment_ctime":1593734734,"is_pvip":true,"replies":[{"id":"85507","content":"下一讲会讲函数式编程的组合性，会提到这个问题，简言之，函数式切分的是动词，面向对象切分的是名词。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593740168,"ip_address":"","comment_id":231594,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74608178766","product_id":100052601,"comment_content":"基于函数切分逻辑跟基于对象切分逻辑有何异同嘛？","like_count":18,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500361,"discussion_content":"下一讲会讲函数式编程的组合性，会提到这个问题，简言之，函数式切分的是动词，面向对象切分的是名词。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593740168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231635,"user_name":"被雨水过滤的空气","can_delete":false,"product_type":"c1","uid":1080417,"ip_address":"","ucode":"1A6316040EB6A7","user_header":"https://static001.geekbang.org/account/avatar/00/10/7c/61/76b1b888.jpg","comment_is_top":false,"comment_ctime":1593739555,"is_pvip":false,"replies":[{"id":"85559","content":"后面我们会讲到纯函数，也会讲到缓存的做法，敬请期待。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593774927,"ip_address":"","comment_id":231635,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35953477923","product_id":100052601,"comment_content":"函数式编程给我印象最深的就是“纯函数”的概念。想想看，如果程序是由一个个纯函数组成的，那么在实现每一个函数的时候，不需要关心外界的情况，并且还可以利用缓存提高性能。","like_count":8,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500387,"discussion_content":"后面我们会讲到纯函数，也会讲到缓存的做法，敬请期待。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593774927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231695,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1593750695,"is_pvip":false,"replies":[{"id":"85707","content":"对，是这个意思。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593937998,"ip_address":"","comment_id":231695,"utype":1}],"discussion_count":2,"race_medal":1,"score":"27363554471","product_id":100052601,"comment_content":"拆成一个个小组件，然后就是随意组合搭积木。面向对象编程的基础组件就是类，而函数式编程就是函数。","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500412,"discussion_content":"对，是这个意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593937998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107484,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/1c/9d3744ee.jpg","nickname":"小李讲源码","note":"","ucode":"2573037D7C82C8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538983,"discussion_content":"这个说的好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639570786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231658,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1593743809,"is_pvip":false,"replies":[{"id":"85708","content":"这取决于给使用端提供多大的灵活度，灵活度大，这个设计才有意义。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593938072,"ip_address":"","comment_id":231658,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23068580289","product_id":100052601,"comment_content":"demo里面，感觉消除重复不怎么明显（虽然调用侧少了恶心的ifelse，但整体代码量反而变多了）。反而适配的味道很重。将所有equest判断适配成统一规格的Predicate 函数。调用侧基于Predicate 函数（统一规格的接口）做职责链链式调用。挺复合统一多个类的接口设计的一应用场景。","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500398,"discussion_content":"这取决于给使用端提供多大的灵活度，灵活度大，这个设计才有意义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593938072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007294,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/be/9ea55f46.jpg","nickname":"feihui","note":"","ucode":"13F1D4A82BC650","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288791,"discussion_content":"这是因为函数并不是一等公民的原因，java8 的 stream 虽然有所简化，但还是不如 kt，而且你的责任链，你试下不同场景不同组合，代码更多，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593872762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1007294,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/be/9ea55f46.jpg","nickname":"feihui","note":"","ucode":"13F1D4A82BC650","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":288798,"discussion_content":"1.kt我也写过，用得比较菜。这里函数已经做为参数在传递了，我没看出跟kt有什么区别，麻烦解答下。\n2.你所谓的不同场景不同组合能描述下吗，不是很理解这句话要描述的场景是什么样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593874614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288791,"ip_address":""},"score":288798,"extra":""},{"author":{"id":1125033,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/a9/83684d4a.jpg","nickname":"喆里","note":"","ucode":"0B4B38104645CA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584961,"discussion_content":"我理解楼主说的不同场景不同组合，主要是指多查询条件组合，比如多条件 and or。这样设计，会简化很多代码 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661247951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":288798,"ip_address":"北京"},"score":584961,"extra":""}]}]},{"had_liked":false,"id":231607,"user_name":"bigben","can_delete":false,"product_type":"c1","uid":1169313,"ip_address":"","ucode":"DBD15A6C8E2590","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","comment_is_top":false,"comment_ctime":1593736787,"is_pvip":false,"replies":[{"id":"85508","content":"用好 lambda 的第一条，不要在 lambda 里写太多代码。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593740208,"ip_address":"","comment_id":231607,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18773605971","product_id":100052601,"comment_content":"java有空lambda之后好，代码精炼了很多，但有些人表示看不懂了，增加了理解难度","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500370,"discussion_content":"用好 lambda 的第一条，不要在 lambda 里写太多代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593740208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303966,"discussion_content":"和三元运算有点像，本质还是糖","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599439003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1021539,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","nickname":"捞鱼的搬砖奇","note":"","ucode":"2FD194C4DA26E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288703,"discussion_content":"老说说的这一点 在  effective java 有提到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593844141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276347,"user_name":"Geek_0315ca","can_delete":false,"product_type":"c1","uid":1810532,"ip_address":"","ucode":"675254A9FC25A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVAVOYIoohh3bCdgErne0VHtoPorcrtmOAR45rsWPmJsLkzlvqMulbRyv0Skj8JHajrA9bPia3Lxw/132","comment_is_top":false,"comment_ctime":1611891202,"is_pvip":false,"replies":[{"id":"100402","content":"道理很简单，只是市面上这么讲的东西太少了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612090533,"ip_address":"","comment_id":276347,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14496793090","product_id":100052601,"comment_content":"函数式编程给自己提供了一种新的代码重构思路-通过函数单元将数据逻辑处理和条件隔离开来。另外，提升了自己的编程抽象思维，多态不是绝对依赖于继承，而是依赖于函数。“走路像鸭子，叫声像鸭子，那么它就是鸭子”，这就是多态思想。有幸看过go语言的开源项目，对多态思想有了新认识，提高了编程抽象思维。设计关注点开始从关注细节实现向宏观统筹开始转变。","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514673,"discussion_content":"道理很简单，只是市面上这么讲的东西太少了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612090533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234494,"user_name":"kylin","can_delete":false,"product_type":"c1","uid":1351248,"ip_address":"","ucode":"3588B62A4F9534","user_header":"https://static001.geekbang.org/account/avatar/00/14/9e/50/21e0beca.jpg","comment_is_top":false,"comment_ctime":1594704790,"is_pvip":true,"replies":[{"id":"86530","content":"是啊，函数式编程已然是一套独立的体系，是图灵完备的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594727267,"ip_address":"","comment_id":234494,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14479606678","product_id":100052601,"comment_content":"函数是一等公民，当时刚刚接触函数式编程是学习clojure和js时，当时感觉特别绕的地方就是js中函数里面定义函数，返回函数，通过闭包保存状态，这些特性完全可以不使用对象就可以实现很多功能。","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501405,"discussion_content":"是啊，函数式编程已然是一套独立的体系，是图灵完备的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594727267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231701,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1593753179,"is_pvip":true,"replies":[{"id":"85706","content":"很好地分享","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593937981,"ip_address":"","comment_id":231701,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14478655067","product_id":100052601,"comment_content":"zipper吧，对immutable的递归数据结构进行遍历和修改，很精致的copy on write","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500415,"discussion_content":"很好地分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593937981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169313,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","nickname":"bigben","note":"","ucode":"DBD15A6C8E2590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289269,"discussion_content":"zipper是啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594043561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1169313,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","nickname":"bigben","note":"","ucode":"DBD15A6C8E2590","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289407,"discussion_content":"https://en.wikipedia.org/wiki/Zipper_%28data_structure%29","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594090367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":289269,"ip_address":""},"score":289407,"extra":""}]}]},{"had_liked":false,"id":231839,"user_name":"Being","can_delete":false,"product_type":"c1","uid":1152227,"ip_address":"","ucode":"80A8783927B650","user_header":"https://static001.geekbang.org/account/avatar/00/11/94/e3/ed118550.jpg","comment_is_top":false,"comment_ctime":1593784391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10183718983","product_id":100052601,"comment_content":"尝试用C++模板实现了课程中的例子，咋一看不如常规的findByxxx好理解，不过仔细一琢磨，扩展模板的test方法，可扩展性是绝对比常规的扩展一个个findByxxx方法大太多了，一个新增的查找需求，只需要扩展一个模板实例的test方法就完美支持了。","like_count":3},{"had_liked":false,"id":231611,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1593737403,"is_pvip":false,"replies":[{"id":"85509","content":"这个总结是到位的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593740227,"ip_address":"","comment_id":231611,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10183671995","product_id":100052601,"comment_content":"函数式编程范式里，函数是一等公民，有了函数式编程就可以封装复用的逻辑代码，还可以组合这些逻辑代码<br>语言设计越往后它是不断会进化的，毕竟这个世界里唯一不变的就是变化","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500372,"discussion_content":"这个总结是到位的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593740227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345785,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1652594730,"is_pvip":false,"replies":[{"id":"126193","content":"不理解编程范式，就会把所有编程范式都用成C语言。","user_name":"作者回复","user_name_real":"编辑","uid":"1258861","ctime":1652625041,"ip_address":"","comment_id":345785,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5947562026","product_id":100052601,"comment_content":"函数式编程的要素是一等公民的函数，如果语言不支持，可以自己模拟。--记下来<br>记得刚开始用java的lambda语法，想在里面修改元素的值，结果就是不行，搞得我有点火🔥，觉得太不方便了。后来才知道，这就是lambda的约束，&quot;不变性&quot;&quot;。","like_count":1,"discussions":[{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572199,"discussion_content":"😂是的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652653850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572168,"discussion_content":"不理解编程范式，就会把所有编程范式都用成C语言。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652625041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333227,"user_name":"petit_kayak","can_delete":false,"product_type":"c1","uid":1025214,"ip_address":"","ucode":"6889CCCBFA0180","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/be/39cc22f5.jpg","comment_is_top":false,"comment_ctime":1644221896,"is_pvip":true,"replies":[{"id":"121855","content":"感受到美之后是很难回退的😄","user_name":"作者回复","user_name_real":"编辑","uid":"1258861","ctime":1644374973,"ip_address":"","comment_id":333227,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5939189192","product_id":100052601,"comment_content":"第一次接触函数式编程是看Erlang的时候，当时被这种简洁、直接的函数式所震撼，后来又学习了MapReduce模型，感觉都是非常相似的模型，虽然我从来没有在工作中用到这些纯函数式的语言，但一直喜欢在代码中模拟这种编程模型。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550072,"discussion_content":"感受到美之后是很难回退的😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644374973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248656,"user_name":"木头发芽","can_delete":false,"product_type":"c1","uid":1419723,"ip_address":"","ucode":"657B381C5DA963","user_header":"https://static001.geekbang.org/account/avatar/00/15/a9/cb/a431bde5.jpg","comment_is_top":false,"comment_ctime":1600254780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5895222076","product_id":100052601,"comment_content":"我用go实现了一遍本问中的例子,请大家指正:<br><br>&#47;&#47;Predicate接口<br>type Predicate interface {<br>\ttest(t Student) bool;<br>}<br>&#47;&#47;学生结构体<br>type Student struct {<br>\tid   int64<br>\tname string<br>\tsno  string<br>\tage  int<br>}<br>&#47;&#47;判断名字相等<br>func (s Student) EqualName(name string) bool {<br>\treturn s.name == name<br>}<br>&#47;&#47;判断ID相等<br>func (s Student) EqualId(id int64) bool {<br>\treturn s.id == id<br>}<br><br>&#47;&#47;学生集合的结构体<br>type Students struct {<br>\tstudents []*Student<br>}<br><br>&#47;&#47;实现按名字的Predicate<br>type ByName struct {<br>\tname string<br>}<br>func (s ByName) test(student Student) bool {<br>\treturn student.EqualName(s.name)<br>}<br>&#47;&#47;实现按ID的 Predicate<br>type ById struct {<br>\tid int64<br>}<br>func (s ById) test(student Student) bool {<br>\treturn student.EqualId(s.id)<br>}<br>&#47;&#47;按与Predicate<br>type And struct {<br>\tid        int64<br>\tpredicate []Predicate<br>}<br><br>func (s And) test(student Student) bool {<br>\tfor _, predicate := range s.predicate {<br>\t\tif !predicate.test(student) {<br>\t\t\treturn false<br>\t\t}<br>\t}<br>\treturn true<br>}<br>&#47;&#47;按或Predicate<br>type Or struct {<br>\tid        int64<br>\tpredicate []Predicate<br>}<br><br>func (s Or) test(student Student) bool {<br>\tfor _, predicate := range s.predicate {<br>\t\tif predicate.test(student) {<br>\t\t\treturn true<br>\t\t}<br>\t}<br>\treturn false<br>}<br><br>&#47;&#47;查找一个符合条件的<br>func (s Students) find(predicate Predicate) (*Student) {<br>\tfor _, student := range s.students {<br>\t\tif predicate.test(*student) {<br>\t\t\treturn student<br>\t\t}<br><br>\t}<br>\treturn nil<br>}<br><br>&#47;&#47;查找所有符合条件的<br>func (s Students) findAll(predicates ...Predicate) (students []*Student) {<br>\tfor _, predicate := range predicates {<br>\t\tfor _, student := range s.students {<br>\t\t\tif predicate.test(*student) {<br>\t\t\t\tstudents = append(students, student)<br>\t\t\t}<br>\t\t}<br>\t}<br>\treturn<br>}<br>&#47;&#47;测试用例<br>func TestFind(t *testing.T) {<br>\t&#47;&#47;填入学生数据<br>\tstudents := Students{<br>\t\tstudents: []*Student{<br>\t\t\t{name: &quot;张三&quot;, id: 11}, {name: &quot;李四&quot;, id: 12}, {name: &quot;王五&quot;, id: 13}, {name: &quot;王五&quot;, id: 14},<br>\t\t},<br>\t}<br>\t&#47;&#47;And找出符合条件的<br>\tstudent := students.find(And{predicate: []Predicate{ById{11}, ByName{&quot;张三&quot;}}})<br>\tlog.Println(student) &#47;&#47;打印张三<br>\t&#47;&#47;找出符合任意一个条件的所有学生数据<br>\tstudentAll := students.findAll(ByName{&quot;张三&quot;}, ById{12})<br>\tlog.Println(studentAll) &#47;&#47;打印 张三和李四<br>}","like_count":1},{"had_liked":false,"id":231585,"user_name":"favorlm","can_delete":false,"product_type":"c1","uid":1120997,"ip_address":"","ucode":"CFD52127AA6E1D","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/e5/6899701e.jpg","comment_is_top":false,"comment_ctime":1593733647,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5888700943","product_id":100052601,"comment_content":"在实际开发中，我一般把查询条件放到sql里，现在我准备拿到代码里，但是以前的分页插件阻止了我这么做，分页插件是以sql为基础的。那么请问郑大，如果改造查询用函数式表示的话，如何评判利弊呢。最近在拯救一个很烂(完全没有测试)的项目。","like_count":1,"discussions":[{"author":{"id":2404924,"avatar":"https://static001.geekbang.org/account/avatar/00/24/b2/3c/22028324.jpg","nickname":"呆呆狗的兽","note":"","ucode":"B7D445F3BE2E4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380600,"discussion_content":"建议直接mybatisplus重写.... mp已经帮我们做了很多了，条件简化为链式调用。SFunction直接方法引用代替字段，自带分页 个人项目稍微封装一下即可，完全符合你的需求 不过sql改为代码这个工作量庞大，如果多表查询多的话，项目体量大的话，也是很痛苦的 哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624601631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349139,"user_name":"Bumblebee","can_delete":false,"product_type":"c1","uid":2051293,"ip_address":"","ucode":"B879C8A511D08D","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","comment_is_top":false,"comment_ctime":1655770630,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655770630","product_id":100052601,"comment_content":"函数式编程像是模板方法，我经常用jdk function包下的函数式接口进行通用代码的封装，使用时传个表达式进来就行。","like_count":0},{"had_liked":false,"id":318664,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1635385299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635385299","product_id":100052601,"comment_content":"用函数封装变化，掌握后非常方便","like_count":0},{"had_liked":false,"id":299373,"user_name":"呆呆狗的兽","can_delete":false,"product_type":"c1","uid":2404924,"ip_address":"","ucode":"B7D445F3BE2E4C","user_header":"https://static001.geekbang.org/account/avatar/00/24/b2/3c/22028324.jpg","comment_is_top":false,"comment_ctime":1624601264,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624601264","product_id":100052601,"comment_content":"以前java8前的什么listener、callable等，这些在新版本基本都变成了functionalinterface了，那时候个人所想就是虽然调用某A方法传入的是个类，但其实就传进去了一个B方法（listener、callable中方法的实现）而已，A方法在执行到某行时会调用传入的对象的B方法，那为啥不支持直接传入一个方法呢？偏偏要new出来一个对象来，后来出现的lambada也是用语法糖的形式向我展示了确实可以传入一个方法的所想，但这个方法同时也是一个类包裹着的，只不过语法糖原因，编译器会自动推行推断","like_count":0},{"had_liked":false,"id":290162,"user_name":"猪肉怂","can_delete":false,"product_type":"c1","uid":2011383,"ip_address":"","ucode":"59C909384E1116","user_header":"https://static001.geekbang.org/account/avatar/00/1e/b0/f7/9016fbbb.jpg","comment_is_top":false,"comment_ctime":1619410230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619410230","product_id":100052601,"comment_content":"文章的配图很有意思，和函数式编程这个主题有什么联系吗？","like_count":0},{"had_liked":false,"id":255149,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603273355,"is_pvip":false,"replies":[{"id":"100660","content":"代码需要实际地敲几遍才能理解。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612431948,"ip_address":"","comment_id":255149,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603273355","product_id":100052601,"comment_content":"Lambda 还没用过，身边也很少人用，之前看的文章都云里雾里的。这个 Demo 看了好几遍，回头再跑一遍代码看看。<br><br>分解成粒度很小的模块，然后通过组合的形式来编程，确实简单易懂很多。有被这种编程思想惊到，像魔方一样。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507620,"discussion_content":"代码需要实际地敲几遍才能理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612431948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239120,"user_name":"布凡","can_delete":false,"product_type":"c1","uid":1202465,"ip_address":"","ucode":"346FCD332F8BFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","comment_is_top":false,"comment_ctime":1596440376,"is_pvip":false,"replies":[{"id":"88873","content":"C#在语法层面还是非常不错的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1597049373,"ip_address":"","comment_id":239120,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596440376","product_id":100052601,"comment_content":"C#中lambda表达式简直不要太爽，结合EF写出的代码简洁漂亮","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502988,"discussion_content":"C#在语法层面还是非常不错的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597049373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237603,"user_name":"PM2","can_delete":false,"product_type":"c1","uid":1276515,"ip_address":"","ucode":"BE80B76C1CA3F1","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/63/487f537e.jpg","comment_is_top":false,"comment_ctime":1595898563,"is_pvip":false,"replies":[{"id":"88318","content":"在函数式编程语言中，函数本身就是一等公民。到了不支持一等公民函数的语言中，才需要模拟。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1596436818,"ip_address":"","comment_id":237603,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595898563","product_id":100052601,"comment_content":"函数编程中，可以把函数当做对象传递，根据不同的需要定义相应的函数，这是其设计灵活之处。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502477,"discussion_content":"在函数式编程语言中，函数本身就是一等公民。到了不支持一等公民函数的语言中，才需要模拟。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596436818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231639,"user_name":"王十一","can_delete":false,"product_type":"c1","uid":1003751,"ip_address":"","ucode":"778D464DD8C225","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/e7/8b543b5b.jpg","comment_is_top":false,"comment_ctime":1593740329,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593740329","product_id":100052601,"comment_content":"C 语言的函数指针是不是也是一种函数式编程呢，感觉也符合函数是 “一等公民” 的所有定义","like_count":0}]}