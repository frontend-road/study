{"id":113533,"title":"39 | Django：搭建监控平台","content":"<p>你好，我是景霄。</p><p>通过前几节课的学习，相信你对量化交易系统已经有了一个最基本的认知，也能通过自己的代码，搭建一个简单的量化交易系统来进行盈利。</p><p>前面几节课，我们的重点在后台代码、中间件、分布式系统和设计模式上。这节课，我们重点来看前端交互。</p><p>监控和运维，是互联网工业链上非常重要的一环。监控的目的就是防患于未然。通过监控，我们能够及时了解到企业网络的运行状态。一旦出现安全隐患，你就可以及时预警，或者是以其他方式通知运维人员，让运维监控人员有时间处理和解决隐患，避免影响业务系统的正常使用，将一切问题的根源扼杀在摇篮当中。</p><p>在硅谷互联网大公司中，监控和运维被称为 SRE，是公司正常运行中非常重要的一环。作为 billion 级别的 Facebook，内部自然也有着大大小小、各种各样的监控系统和运维工具，有的对标业务数据，有的对标服务器的健康状态，有的则是面向数据库和微服务的控制信息。</p><p>不过，万变不离其宗，运维工作最重要的就是维护系统的稳定性。除了熟悉运用各种提高运维效率的工具来辅助工作外，云资源费用管理、安全管理、监控等，都需要耗费不少精力和时间。运维监控不是一朝一夕得来的，而是随着业务发展的过程中同步和发展的。</p><!-- [[[read_end]]] --><p>作为量化实践内容的最后一节，今天我们就使用 Django 这个 Web 框架，来搭建一个简单的量化监控平台。</p><h2>Django 简介和安装</h2><p>Django 是用 Python 开发的一个免费开源的 Web 框架，可以用来快速搭建优雅的高性能网站。它采用的是“MVC”的框架模式，即模型 M、视图 V 和控制器 C。</p><p>Django 最大的特色，在于将网页和数据库中复杂的关系，转化为 Python 中对应的简单关系。它的设计目的，是使常见的Web开发任务变得快速而简单。Django是开源的，不是商业项目或者科研项目，并且集中力量解决Web开发中遇到的一系列问题。所以，Django 每天都会在现有的基础上进步，以适应不断更迭的开发需求。这样既节省了开发时间，也提高了后期维护的效率。</p><p>说了这么多，接下来，我们通过上手使用进一步来了解。先来看一下，如何安装和使用 Django。你可以先按照下面代码块的内容来操作，安装Django ：</p><pre><code>pip3 install Django\ndjango-admin --version\n\n########## 输出 ##########\n\n2.2.3\n</code></pre><p>接着，我们来创建一个新的 Django 项目：</p><pre><code>django-admin startproject TradingMonitor\ncd TradingMonitor/\npython3 manage.py migrate\n\n########## 输出 ##########\n</code></pre><pre><code>  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying auth.0010_alter_group_name_max_length... OK\n  Applying auth.0011_update_proxy_permissions... OK\n  Applying sessions.0001_initial... OK\n</code></pre><p>这时，你能看到文件系统大概是下面这样的：</p><pre><code>TradingMonitor/\n├── TradingMonitor\n│   ├── __init__.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n├── db.sqlite3\n└── manage.py\n</code></pre><p>我简单解释一下它的意思：</p><ul>\n<li>TradingMonitor/TradingMonitor，表示项目最初的 Python 包；</li>\n<li>TradingMonitor/init.py，表示一个空文件，声明所在目录的包为一个 Python 包；</li>\n<li>TradingMonitor/settings.py，管理项目的配置信息；</li>\n<li>TradingMonitor/urls.py，声明请求 URL 的映射关系；</li>\n<li>TradingMonitor/wsgi.py，表示Python 程序和 Web 服务器的通信协议；</li>\n<li>manage.py，表示一个命令行工具，用来和 Django 项目进行交互；</li>\n<li>Db.sqlite3，表示默认的数据库，可以在设置中替换成其他数据库。</li>\n</ul><p>另外，你可能注意到了上述命令中的<code>python3 manage.py migrate</code>，这个命令表示创建或更新数据库模式。每当 model 源代码被改变后，如果我们要将其应用到数据库上，就需要执行一次这个命令。</p><p>接下来，我们为这个系统添加管理员账户：</p><pre><code>python3 manage.py createsuperuser\n\n########## 输出 ##########\n\nUsername (leave blank to use 'ubuntu'): admin\nEmail address:  \nPassword: \nPassword (again): \nSuperuser created successfully.\n</code></pre><p>然后，我们来启动 Django 的 debugging 模式：</p><pre><code>python3 manage.py runserver\n</code></pre><p>最后，打开浏览器输入：<code>http://127.0.0.1:8000</code>。如果你能看到下面这个画面，就说明 Django 已经部署成功了。</p><p><img src=\"https://static001.geekbang.org/resource/image/6d/02/6d8244a8016c97139b3de4680ae2e802.png?wh=1109*946\" alt=\"\"></p><p>Django 的安装是不是非常简单呢？这其实也是 Python 一贯的理念，简洁，并简化入门的门槛。</p><p>OK，现在我们再定位到 <code>http://127.0.0.1:8000/admin</code>，你会看到 Django 的后台管理网页，这里我就不过多介绍了。</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/93/ef29a801bd367263aa4792131eeae093.png?wh=528*388\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/31/25/311b3ebf2b0801e84de60d36a81c6925.png?wh=871*423\" alt=\"\"></p><p>到此，Django 就已经成功安装，并且正常启动啦。</p><h2>MVC 架构</h2><p>刚刚我说过，MVC 架构是 Django 设计模式的精髓。接下来，我们就来具体看一下这个架构，并通过 Django  动手搭建一个服务端。</p><h3>设计模型 Model</h3><p>在之前的日志和存储系统这节课中，我介绍过 peewee 这个库，它能避开通过繁琐的 SQL 语句来操作 MySQL，直接使用 Python 的 class 来进行转换。事实上，这也是 Django 采取的方式。</p><p>Django 无需数据库就可以使用，它通过对象关系映射器（object-relational mapping），仅使用Python代码就可以描述数据结构。</p><p>我们先来看下面这段 Model 代码：</p><pre><code>#  TradingMonitor/models.py\n\nfrom django.db import models\n\n\nclass Position(models.Model):\n    asset = models.CharField(max_length=10)\n    timestamp = models.DateTimeField()\n    amount = models.DecimalField(max_digits=10, decimal_places=3)\n</code></pre><p>models.py 文件主要用一个 Python 类来描述数据表，称为模型 。运用这个类，你可以通过简单的 Python 代码来创建、检索、更新、删除数据库中的记录，而不用写一条又一条的SQL语句，这也是我们之前所说的避免通过 SQL 操作数据库。</p><p>在这里，我们创建了一个 Position 模型，用来表示我们的交易仓位信息。其中，</p><ul>\n<li>asset 表示当前持有资产的代码，例如 btc；</li>\n<li>timestamp 表示时间戳；</li>\n<li>amount 则表示时间戳时刻的持仓信息。</li>\n</ul><h3>设计视图 Views</h3><p>在模型被定义之后，我们便可以在视图中引用模型了。通常，视图会根据参数检索数据，加载一个模板，并使用检索到的数据呈现模板。</p><p>设计视图，则是我们用来实现业务逻辑的地方。我们来看 render_positions 这个代码，它接受 request 和 asset 两个参数，我们先不用管 request。这里的 asset 表示指定一个资产名称，例如 btc，然后这个函数返回一个渲染页面。</p><pre><code>#  TradingMonitor/views.py\n\nfrom django.shortcuts import render\nfrom .models import Position\n\ndef render_positions(request, asset):\n    positions = Position.objects.filter(asset = asset)\n    context = {'asset': asset, 'positions': positions}\n    return render(request, 'positions.html', context)\n</code></pre><p>不过，这个函数具体是怎么工作的呢？我们一行行来看。</p><p><code>positions = Position.objects.filter(asset = asset)</code>，这行代码向数据库中执行一个查询操作，其中， filter 表示筛选，意思是从数据库中选出所有我们需要的 asset 的信息。不过，这里我只是为你举例做示范；真正做监控的时候，我们一般会更有针对性地从数据库中筛选读取信息，而不是一口气读取出所有的信息。</p><p><code>context = {'asset': asset, 'positions': positions}</code>，这行代码没什么好说的，封装一个字典。至于这个字典的用处，下面的内容中可以体现。</p><p><code>return render(request, 'positions.html', context)</code>，最后这行代码返回一个页面。这里我们采用的模板设计，这也是 Django 非常推荐的开发方式，也就是让模板和数据分离，这样，数据只需要向其中填充即可。</p><p>最后的模板文件是 <code>position.html</code>，你应该注意到了， context 作为变量传给了模板，下面我们就来看一下设计模板的内容。</p><h3>设计模板Templates</h3><p>模板文件，其实就是 HTML 文件和部分代码的综合。你可以想象成，这个HTML 在最终送给用户之前，需要被我们预先处理一下，而预先处理的方式就是找到对应的地方进行替换。</p><p>我们来看下面这段示例代码：</p><pre><code>#  TradingMonitor/templates/positions.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en-US&quot;&gt;\n&lt;head&gt;\n&lt;title&gt;Positions for {{asset}}&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;h1&gt;Positions for {{asset}}&lt;/h1&gt;\n\n&lt;table&gt;\n&lt;tr&gt;\n    &lt;th&gt;Time&lt;/th&gt;\n    &lt;th&gt;Amount&lt;/th&gt;\n&lt;/tr&gt;\n{% for position in positions %}\n&lt;tr&gt;\n    &lt;th&gt;{{position.timestamp}}&lt;/th&gt;\n    &lt;th&gt;{{position.amount}}&lt;/th&gt;\n&lt;/tr&gt;\n{% endfor %}\n&lt;/table&gt;\n&lt;/body&gt;\n</code></pre><p>我重点说一下几个地方。首先是<code>&lt;title&gt;Positions for {{asset}}&lt;/title&gt;</code>，这里双大括号括住 asset 这个变量，这个变量对应的正是前面 context 字典中的 asset key。Django 的渲染引擎会将 asset ，替换成 context 中 asset 对应的内容，此处是替换成了 btc。</p><p>再来看<code>{% for position in positions %}</code>，这是个很关键的地方。我们需要处理一个列表的情况，用 for 对 positions 进行迭代就行了。这里的 positions ，同样对应的是 context 中的 positions。</p><p>末尾的<code>{% endfor %}</code>，自然就表示结束了。这样，我们就将数据封装到了一个列表之中。</p><h3>设计链接 Urls</h3><p>最后，我们需要为我们的操作提供 URL 接口，具体操作我放在了下面的代码中，内容比较简单，我就不详细展开讲解了。</p><pre><code>#  TradingMonitor/urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('positions/&lt;str:asset&gt;', views.render_positions),\n]\n</code></pre><p>到这里，我们就可以通过 <code>http://127.0.0.1:8000/positions/btc</code> 来访问啦！</p><h3>测试</h3><p>当然，除了主要流程外，我还需要强调几个很简单但非常关键的细节，不然，我们这些改变就不能被真正地应用。</p><p>第一步，在 <code>TradingMonitor/TradingMonitor</code> 下，新建一个文件夹 migrations；并在这个文件夹中，新建一个空文件 <code>__init__.py</code>。</p><pre><code>mkdir TradingMonitor/migrations\ntouch TradingMonitor/migrations/__init__.py\n</code></pre><p>此时，你的目录结构应该长成下面这样：</p><pre><code>TradingMonitor/\n├── TradingMonitor\n│   ├── migrations\n│       └── __init__.py\n│   ├── templates\n│       └── positions.html\n│   ├── __init__.py\n│   ├── settings.py\n│   ├── urls.py\n│   ├── models.py\n│   ├── views.py\n│   └── wsgi.py\n├── db.sqlite3\n└── manage.py\n</code></pre><p>第二步，修改 <code>TradingMonitor/settings.py</code>：</p><pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'TradingMonitor',  # 这里把我们的 app 加上\n]\n</code></pre><pre><code>TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'TradingMonitor/templates')],  # 这里把 templates 的目录加上\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n</code></pre><p>第三步，运行 <code>python manage.py makemigrations</code>：</p><pre><code>python manage.py makemigrations\n\n########## 输出 ##########\n\nMigrations for 'TradingMonitor':\n  TradingMonitor/migrations/0001_initial.py\n    - Create model Position\n</code></pre><p>第四步，运行 <code>python manage.py migrate</code>：</p><pre><code>python manage.py migrate\n\n\n########## 输出 ##########\n\n\nOperations to perform:\n  Apply all migrations: TradingMonitor, admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying TradingMonitor.0001_initial... OK\n</code></pre><p>这几步的具体操作，我都用代码和注释表示了出来，你完全可以同步进行操作。操作完成后，现在，我们的数据结构就已经被成功同步到数据库中了。</p><p>最后，输入 <code>python manage.py runserver</code>，然后打开浏览器输入<code>http://127.0.0.1:8000/positions/btc</code>，你就能看到效果啦。<br>\n<img src=\"https://static001.geekbang.org/resource/image/ab/4a/abb5a9aaf8016f485d38552f4291784a.png?wh=542*339\" alt=\"\"></p><p>现在，我们再回过头来看一下 MVC 模式，通过我画的这张图，你可以看到，M、V、C这三者，以一种插件似的、松耦合的方式连接在一起：</p><p><img src=\"https://static001.geekbang.org/resource/image/c7/bc/c7ff058064e869d6da652805c29263bc.png?wh=628*333\" alt=\"\"></p><p>当然，我带你写的只是一个简单的 Django 应用程序，对于真正的量化平台监控系统而言，这还只是一个简单的开始。</p><p>除此之外，对于监控系统来说，其实还有着非常多的开源插件可以使用。有一些界面非常酷炫，有一些可以做到很高的稳定性和易用性，它们很多都可以结合 Django 做出很好的效果来。比较典型的有：</p><ul>\n<li>Graphite 是一款存储时间序列数据，并通过 Django Web 应用程序在图形中显示的插件；</li>\n<li>Vimeo 则是一个基于 Graphite 的仪表板，具有附加功能和平滑的设计；</li>\n<li>Scout 监控  Django和Flask应用程序的性能，提供自动检测视图、SQL查询、模板等。</li>\n</ul><h2>总结</h2><p>这一节课的内容更靠近上游应用层，我们以 Django 这个 Python 后端为例，讲解了搭建一个服务端的过程。你应该发现了，使用 RESTful Framework 搭建服务器，是一个如此简单的过程，你可以去开一个自己的交易所了（笑）。相比起具体的技术，今天我所讲的 MVC 框架和 Django 的思想，更值得你去深入学习和领会。</p><h2>思考题</h2><p>今天我想给你留一个难度比较高的作业。RESTful API 在 Django 中是如何实现安全认证的？你能通过搜索和自学掌握这个知识点吗？希望可以在留言区看到你的认真学习记录和总结，我会一一给出建议。也欢迎你把这篇文章分享给你的朋友、同事，一起交流、一起进步。</p><p></p>","comments":[{"had_liked":false,"id":125465,"user_name":"Jingxiao","can_delete":false,"product_type":"c1","uid":1259521,"ip_address":"","ucode":"EB966BB87132F6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","comment_is_top":true,"comment_ctime":1566187352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"9.223372141500201e+18","product_id":100026901,"comment_content":"常用的认证方式有，HTTP Basic Auth，OAuth，Cookie Auth，Token Auth，而 Django Restful 一种常用的方式是 JSON Web Token（JWT），这是一个非常轻巧的规范，可以参考 https:&#47;&#47;github.com&#47;jpadilla&#47;django-rest-framework-jwt.","like_count":25},{"had_liked":false,"id":121422,"user_name":"Kuzaman","can_delete":false,"product_type":"c1","uid":1166957,"ip_address":"","ucode":"DB60937873CBF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/6d/6de830ef.jpg","comment_is_top":false,"comment_ctime":1565138550,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"126119190134","product_id":100026901,"comment_content":"建议老师以后能专门出一个实战栏目，必顶","like_count":30,"discussions":[{"author":{"id":2508685,"avatar":"https://static001.geekbang.org/account/avatar/00/26/47/8d/5d2f4acd.jpg","nickname":"zys","note":"","ucode":"594399D8EA484D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356222,"discussion_content":"他这叫项目实战?真服了,,,B站大把视频,,,","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1615554107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124238,"user_name":"图·美克尔","can_delete":false,"product_type":"c1","uid":1076720,"ip_address":"","ucode":"021FB5AE110066","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppQqDE6TNibvr3DNdxG323AruicIgWo5DpVr6U7yZVNkbF2rKluyDfhdpgAEcYEOZTAnbrMdTzFkUw/0","comment_is_top":false,"comment_ctime":1565840656,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"74580284688","product_id":100026901,"comment_content":"MVC在Django中对应的是MTV","like_count":18},{"had_liked":false,"id":121545,"user_name":"奥特虾不会写代码","can_delete":false,"product_type":"c1","uid":1025685,"ip_address":"","ucode":"B41DD6B575571A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/95/3960d10e.jpg","comment_is_top":false,"comment_ctime":1565157258,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"53104764810","product_id":100026901,"comment_content":"老师的专栏是我在极客时间看过的质量最高的专栏了，文字简单易懂，又不失深度，不知道以后会不会专门出一个量化交易的专栏，一定支持！","like_count":13,"discussions":[{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361940,"discussion_content":"外行很难懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616808754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1524904,"avatar":"https://static001.geekbang.org/account/avatar/00/17/44/a8/0ce75c8c.jpg","nickname":"Skrpy","note":"","ucode":"BB6CB4E9AA1712","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4262,"discussion_content":"这是在什么系统装呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565259091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2628251,"avatar":"https://static001.geekbang.org/account/avatar/00/28/1a/9b/aa3b16f5.jpg","nickname":"海棠","note":"","ucode":"9416069D151314","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1524904,"avatar":"https://static001.geekbang.org/account/avatar/00/17/44/a8/0ce75c8c.jpg","nickname":"Skrpy","note":"","ucode":"BB6CB4E9AA1712","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549935,"discussion_content":"linux","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644303332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4262,"ip_address":""},"score":549935,"extra":""}]},{"author":{"id":1568487,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ee/e7/4375e97c.jpg","nickname":"雲至","note":"","ucode":"47E2D099322BB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4177,"discussion_content":"这是在什么系统装呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565187166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121477,"user_name":"TKbook","can_delete":false,"product_type":"c1","uid":1073829,"ip_address":"","ucode":"F6E0E99CC79059","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/a5/43aa0c27.jpg","comment_is_top":false,"comment_ctime":1565144379,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27334948155","product_id":100026901,"comment_content":"貌似还缺少一步，添加相关数据。","like_count":6,"discussions":[{"author":{"id":2873069,"avatar":"","nickname":"Geek_bc0291","note":"","ucode":"DF2C8ED3E9B0BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550027,"discussion_content":"use TradingMonitor;\ninsert into TradingMonitor_position (asset,timestamp,amount) values (&#39;btc&#39;,now(),&#39;100&#39;);\ninsert into TradingMonitor_position (asset,timestamp,amount) values (&#39;btc&#39;,now(),&#39;130&#39;);\n多插如几条就行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644334153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200713,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/49/23a6ea52.jpg","nickname":"叶子","note":"","ucode":"4B043DE31345C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310171,"discussion_content":"想问下去哪添加数据啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601654797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132426,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1568119007,"is_pvip":false,"replies":[{"id":"50655","content":"棒","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1568129083,"ip_address":"","comment_id":132426,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18747988191","product_id":100026901,"comment_content":"老师，我本地的django版本是1.11.8，没法运行你的最新版本。<br>指出一个错误：不用手动创建migrations文件夹。执行python3 manage.py makemigrations命令就会生成了。<br>有个问题：这个url的正则表达式我不太懂“path(&#39;positions&#47;&lt;str:asset&gt;&#39;, views.render_positions)”，&lt;str:asset&gt;不是一般都写成(?P&lt;asset&gt;[a-zA-Z]+)这样子的嘛？<br>作业回答：<br>因为http协议是无状态的，每次请求都是一次新的请求，不会记得之前通信的状态。所以需要一些特殊手段来记录状态。<br>方法一：把userinfo存储在request.session中，每次请求进行验证userinfo；<br>方法二：jwt生成一个包含用户信息的token令牌，并设置过期时间，每次处理客户端请求先验证是否请求头中带有token，要是有token解析出来的用户信息是否正确，以此来确定用户的登录状态。","like_count":5,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466931,"discussion_content":"棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568129083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121406,"user_name":"夜月不挂科","can_delete":false,"product_type":"c1","uid":1543651,"ip_address":"","ucode":"9D358B176E5CA9","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/e3/c3ed083a.jpg","comment_is_top":false,"comment_ctime":1565136579,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14450038467","product_id":100026901,"comment_content":"django会自动生成一个csrf字段用来认证。","like_count":3,"discussions":[{"author":{"id":1414844,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKxqOFPRvW2d6WEC705zuSSvxBOBxibBib4XQxBGAGPOx2bRGqhsSeQkUNa0Z11OJoKbuGsNaMR4GNg/132","nickname":"hel793","note":"","ucode":"4E4F51EE321162","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12967,"discussion_content":"CSRF字段是用来防止跨站请求伪造攻击的，不是用来认证的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1568620684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122998,"user_name":"路伴友行","can_delete":false,"product_type":"c1","uid":1506974,"ip_address":"","ucode":"96B54B7EEAEDAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","comment_is_top":false,"comment_ctime":1565585071,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10155519663","product_id":100026901,"comment_content":"DRF 有自带的token验证，也可以自己写中间件实现拦截","like_count":2},{"had_liked":false,"id":121680,"user_name":"旗木卡卡","can_delete":false,"product_type":"c1","uid":1104407,"ip_address":"","ucode":"2C05BFE91D6892","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/17/69cca649.jpg","comment_is_top":false,"comment_ctime":1565181833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10155116425","product_id":100026901,"comment_content":"不知不觉已经学习了40讲，专栏马上就结束了，还没学够！","like_count":2},{"had_liked":false,"id":258219,"user_name":"山雨淋淋","can_delete":false,"product_type":"c1","uid":1515297,"ip_address":"","ucode":"0D4538C616A130","user_header":"https://static001.geekbang.org/account/avatar/00/17/1f/21/da776587.jpg","comment_is_top":false,"comment_ctime":1604328376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5899295672","product_id":100026901,"comment_content":"监控系统的稳定性谁来保证，监控监控系统本身？","like_count":1},{"had_liked":false,"id":254166,"user_name":"林润娥是我女朋友","can_delete":false,"product_type":"c1","uid":1422391,"ip_address":"","ucode":"5660F6039156A7","user_header":"https://static001.geekbang.org/account/avatar/00/15/b4/37/5d2a5288.jpg","comment_is_top":false,"comment_ctime":1603075003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898042299","product_id":100026901,"comment_content":"Django是MVT，虽然是从MVC演变的，但还是有必要区别开","like_count":1},{"had_liked":false,"id":245059,"user_name":"Rs先生","can_delete":false,"product_type":"c1","uid":1649120,"ip_address":"","ucode":"4B09A979E106F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/29/e0/35835788.jpg","comment_is_top":false,"comment_ctime":1598799474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5893766770","product_id":100026901,"comment_content":"请教老师一个问题，我用的是python2.7，然后Django的版本为1.11.29，但是在最后访问url的是时候的显示page not found。这个是什么原因呢？<br>","like_count":1},{"had_liked":false,"id":241232,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1597220269,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5892187565","product_id":100026901,"comment_content":"<br>pip3 install Django<br>django-admin --version<br><br>########## 输出 ##########<br><br>2.2.3<br>老师  django的这些命令再Windows CMD命令框执行后不行，访问不了https:&#47;&#47;127.0.0.1:8000,  再centos 执行完所有代码  启动后django 服务，命令显示[root@localhost TradingMonitor]# python3 manage.py runserver<br>Watching for file changes with StatReloader<br>Performing system checks...<br><br>System check identified no issues (0 silenced).<br>August 12, 2020 - 15:59:14<br>Django version 3.1, using settings &#39;TradingMonitor.settings&#39;<br>Starting development server at http:&#47;&#47;127.0.0.1:8000&#47;<br>Quit the server with CONTROL-C. ，但是浏览器访问失败 是什么原因","like_count":1,"discussions":[{"author":{"id":1009002,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/65/6a/be36c108.jpg","nickname":"ikel","note":"","ucode":"1D5CE7803C1C2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319234,"discussion_content":"settings.py中修改这个试试\nALLOWED_HOSTS = [&#39;*&#39;]\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603968205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239581,"user_name":"Geek_aa780e","can_delete":false,"product_type":"c1","uid":1671394,"ip_address":"","ucode":"20C49732158424","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8KpWhCMxgVgqKMxNT9zuJuVnz1gNBzYlWrZCO4hlF4OQibhawvn0hpHhHgHr4kSXfVNjeuE4StuvTR54NGcE4Zg/132","comment_is_top":false,"comment_ctime":1596591489,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891558785","product_id":100026901,"comment_content":"可以讲一下在web项目中，对于非法情况，比如说数据库链接错误报的异常，该怎么处理吗？ 是直接抛到handler层，还是在哪进行捕获？ ","like_count":1},{"had_liked":false,"id":206382,"user_name":"皮皮侠","can_delete":false,"product_type":"c1","uid":1258402,"ip_address":"","ucode":"04205990C1DE1F","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/a2/6c0ffc15.jpg","comment_is_top":false,"comment_ctime":1586850776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881818072","product_id":100026901,"comment_content":"django好像是基于MVT模型，不过跟MVC差不多","like_count":1},{"had_liked":false,"id":203892,"user_name":"姑苏小沈🏃🎸","can_delete":false,"product_type":"c1","uid":1085941,"ip_address":"","ucode":"FFC9C7BC1C6B4B","user_header":"https://static001.geekbang.org/account/avatar/00/10/91/f5/6881f336.jpg","comment_is_top":false,"comment_ctime":1586301261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881268557","product_id":100026901,"comment_content":"请教一个Sqlalchemy的更新数据问题：<br>我创建一个session后，session. query(User). filter(ID=user_id). first()<br>明明能找到一条数据，但是执行 user.Name = &#39;my nam&#39;<br>session. commit()时却提示 expected to update 1 row: 0 were matched","like_count":1},{"had_liked":false,"id":123963,"user_name":"拾掇拾掇","can_delete":false,"product_type":"c1","uid":1051873,"ip_address":"","ucode":"D775F374C2A1D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/e1/f663213e.jpg","comment_is_top":false,"comment_ctime":1565785013,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5860752309","product_id":100026901,"comment_content":"DRF好像好久没更新了，不支持Django2.0。不知道有什么框架可以替代","like_count":1},{"had_liked":false,"id":121938,"user_name":"jxs1211","can_delete":false,"product_type":"c1","uid":1101006,"ip_address":"","ucode":"B7F1F2D84389E7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","comment_is_top":false,"comment_ctime":1565252933,"is_pvip":false,"replies":[{"id":"48147","content":"fb是通过graphql连接前后端。前后端也是独立开发。做后端不需要看什么书籍，不如多操作，多看一些优秀的代码","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1567123789,"ip_address":"","comment_id":121938,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860220229","product_id":100026901,"comment_content":"目前流行前后端分离，通过http通信，独立部署，不知在fackbook也是这样，另外想了解下python做后端有什么比较好的推荐书籍可供学习吗","like_count":2,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462015,"discussion_content":"fb是通过graphql连接前后端。前后端也是独立开发。做后端不需要看什么书籍，不如多操作，多看一些优秀的代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567123789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311046,"user_name":"落雨","can_delete":false,"product_type":"c1","uid":2041435,"ip_address":"","ucode":"5B3B09E72211B6","user_header":"https://static001.geekbang.org/account/avatar/00/1f/26/5b/30281476.jpg","comment_is_top":false,"comment_ctime":1631029684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631029684","product_id":100026901,"comment_content":"按照文档操作,最后一直提示no such table: TradingMonitor_position .感觉很多地方都没讲清楚.这课感觉有点不值","like_count":0},{"had_liked":false,"id":165568,"user_name":"Geek_a86175","can_delete":false,"product_type":"c1","uid":1704845,"ip_address":"","ucode":"EFBFFEF86C4120","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/O1kSTJtNUNtpehQmFxbSVHiaOHbibYR3dB2Ms9LgmfkGFxLfpM8QCcyge1OP5HLCpxXtFcy1jXcc3ibiaTcfaQ0pmg/132","comment_is_top":false,"comment_ctime":1577261781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577261781","product_id":100026901,"comment_content":"有的文章说创建项目后，还应该创建应用，一个大的业务模块作为一个APP，这个文章好像没有提及这块","like_count":0},{"had_liked":false,"id":149044,"user_name":"自由民","can_delete":false,"product_type":"c1","uid":1346236,"ip_address":"","ucode":"435C67531697F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/bc/cb39ed38.jpg","comment_is_top":false,"comment_ctime":1573130707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573130707","product_id":100026901,"comment_content":"使用安全令牌。适用于服务器客户端程序。https:&#47;&#47;blog.csdn.net&#47;qw943571775&#47;article&#47;details&#47;82687843","like_count":0},{"had_liked":false,"id":121728,"user_name":"稳","can_delete":false,"product_type":"c1","uid":1284626,"ip_address":"","ucode":"BF5723E63E4115","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/12/06863960.jpg","comment_is_top":false,"comment_ctime":1565193476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565193476","product_id":100026901,"comment_content":"Django自带的是通过session来认证的，DRF里支持Token等形式，大多通过中间件、dispatch、装饰器来实现","like_count":0},{"had_liked":false,"id":121677,"user_name":"旗木卡卡","can_delete":false,"product_type":"c1","uid":1104407,"ip_address":"","ucode":"2C05BFE91D6892","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/17/69cca649.jpg","comment_is_top":false,"comment_ctime":1565181649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565181649","product_id":100026901,"comment_content":"通过 Session or auth or Token来实现？","like_count":0},{"had_liked":false,"id":121546,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1565157324,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565157324","product_id":100026901,"comment_content":"可以用drf 或者自己做数据 通过路由和方法自己组织","like_count":0}]}