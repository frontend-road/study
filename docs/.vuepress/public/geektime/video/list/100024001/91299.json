{"id":91299,"title":"54 | Chaos Engineering","content":"<h1>课件及源代码地址</h1><p><a href=\"https://gitee.com/geektime-geekbang/go_learning\">https://gitee.com/geektime-geekbang/go_learning</a></p><h2>书目推荐</h2><p><a href=\"time://mall?url=https%3A%2F%2Fh5.youzan.com%2Fv2%2Fgoods%2F1ycmk3uob0ryw\">《计算机程序的构造和解释》</a></p>","comments":[{"had_liked":false,"id":218081,"user_name":"lupguo","can_delete":false,"product_type":"c3","uid":1009098,"ip_address":"","ucode":"1B55A01DF78647","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/ca/38dcd55a.jpg","comment_is_top":false,"comment_ctime":1589709740,"is_pvip":false,"replies":[{"id":81303,"content":"采用decorator模式主要是以一种透明的方式（对于调用者）来扩充原有模块的功能，让功能的开发者把精力集中在实现业务功能上","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1590217530,"ip_address":"","comment_id":218081,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"另外，请教下老师，就是面对chaos engineering，目前我看到蔡老师设计文档中chaos engineering decorator主要是模拟了慢响应、异常响应，我们的系统设计层面是否主要是基于design for fail的思想来做设计？我的收获是，看完老师的service decorate设计，对design for fail的思想有了更多的理解！\n另外一点思考在另外一条评论中也有提及，对比目前成熟的服务网格，design for fail的实现更多的放在了基于sidecar落地的类似envoy代理实现，做到了很好的解耦和异构服务标准化这块。\n最后，还想到一个点就是除了基于decorator设计模式包了很多层，是否还可以基于责任链的设计模式实现？至少之前看laravel框架就是将请求逐步逐步的往后续请求，其很多中间组件就是做了类似的断路器、限流的功能，老师能谈下你对两种设计模式的选择考虑呢？","like_count":1,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495345,"discussion_content":"采用decorator模式主要是以一种透明的方式（对于调用者）来扩充原有模块的功能，让功能的开发者把精力集中在实现业务功能上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590217530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218048,"user_name":"lupguo","can_delete":false,"product_type":"c3","uid":1009098,"ip_address":"","ucode":"1B55A01DF78647","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/ca/38dcd55a.jpg","comment_is_top":false,"comment_ctime":1589704001,"is_pvip":false,"replies":[{"id":81304,"content":"对的。你的理解没问题","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1590217606,"ip_address":"","comment_id":218048,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"老师，我看了你写的service_decorators，这类实际上还是对代码有一定耦合，但是与现在istio的envoy类似的sidecar模式相比，少了一次通信开销。目前的service mesh也是强调把服务装在服务网格，让研发专注基础设施外的核心业务开发，从长期看，把熔断、限流、可观测性放在基础设施层来做，解耦业务逻辑和基础设施，长期来看，更有利于微幅系统的维护，不知道这样理解有没有问题？","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495335,"discussion_content":"对的。你的理解没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590217606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217937,"user_name":"Joe Black","can_delete":false,"product_type":"c3","uid":1052528,"ip_address":"","ucode":"21FE222A286445","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/70/cdef7a3d.jpg","comment_is_top":false,"comment_ctime":1589674474,"is_pvip":false,"replies":[{"id":81094,"content":"对的。Istio由于采用了envoy做sidecar，是进程外的，会对性能有一定影响。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1590056307,"ip_address":"","comment_id":217937,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"请问老师，如果开发的Go系统就是用于k8s环境，而且会配有Istio这样的服务网格，那是不是类似限流，熔断这样的功能就不需要使用库直接集成到自己的服务中了？自己就服务可以比较单纯的处理RESTful API或者gRPC调用就行了（当然日志之类的还是自己服务要有）？","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495297,"discussion_content":"对的。Istio由于采用了envoy做sidecar，是进程外的，会对性能有一定影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590056307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130903,"user_name":"老张","can_delete":false,"product_type":"c3","uid":1004246,"ip_address":"","ucode":"4BAED736CFB9DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/d6/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1567569536,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"开阔技术视野，谢谢老师","like_count":7}]}