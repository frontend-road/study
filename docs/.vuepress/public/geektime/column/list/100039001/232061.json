{"id":232061,"title":"78 | 开源实战二（上）：从Unix开源开发学习应对大型复杂项目开发","content":"<p>软件开发的难度无外乎两点，一是技术难，意思是说，代码量不一定多，但要解决的问题比较难，需要用到一些比较深的技术解决方案或者算法，不是靠“堆人”就能搞定的，比如自动驾驶、图像识别、高性能消息队列等；二是复杂度，意思是说，技术不难，但项目很庞大，业务复杂，代码量多，参与开发的人多，比如物流系统、财务系统等。第一点涉及细分专业的领域知识，跟我们专栏要讲的设计、编码无关，所以我们重点来讲第二点，如何应对软件开发的复杂度。</p><p>简单的“hello world”程序，谁都能写得出来。几千行的代码谁都能维护得了。但是，当代码超过几万行、十几万，甚至几十万行、上百万行的时候，软件的复杂度就会呈指数级增长。这种情况下，我们不仅仅要求程序运行得了，运行得正确，还要求代码看得懂、维护得了。实际上，复杂度不仅仅体现在代码本身，还体现在协作研发上，如何管理庞大的团队，来进行有条不紊地协作开发，也是一个很复杂的难题。</p><p>如何应对复杂软件开发？Unix开源项目就是一个值得学习的例子。</p><p>Unix从1969年诞生，一直演进至今，代码量有几百万行，如此庞大的项目开发，能够如此完美的协作开发，并且长期维护，保持足够的代码质量，这里面有很多成功的经验可以借鉴。所以，接下来，我们就以Unix开源项目的开发为引子，分三节课的时间，通过下面三个话题，详细地讲讲应对复杂软件开发的方法论。希望这些经验能为你所用，在今后面对复杂项目开发的时候，能让你有条不紊、有章可循地从容应对。</p><!-- [[[read_end]]] --><ul>\n<li>从设计原则和思想的角度来看，如何应对庞大而复杂的项目开发？</li>\n<li>从研发管理和开发技巧的角度来看，如何应对庞大而复杂的项目开发？</li>\n<li>聚焦在Code Review上来看，如何通过Code Reviwe保持项目的代码质量？</li>\n</ul><p>话不多说，让我们正式开始今天的学习吧！</p><h2>封装与抽象</h2><p>在Unix、Linux系统中，有一句经典的话，“Everything is a file”，翻译成中文就是“一切皆文件”。这句话的意思就是，在Unix、Linux系统中，很多东西都被抽象成“文件”这样一个概念，比如Socket、驱动、硬盘、系统信息等。它们使用文件系统的路径作为统一的命名空间（namespace），使用统一的read、write标准函数来访问。</p><p>比如，我们要查看CPU的信息，在Linux系统中，我们只需要使用Vim、Gedit等编辑器或者cat命令，像打开其他文件一样，打开/proc/cpuinfo，就能查看到相应的信息。除此之外，我们还可以通过查看/proc/uptime文件，了解系统运行了多久，查看/proc/version了解系统的内核版本等。</p><p>实际上，“一切皆文件”就体现了封装和抽象的设计思想。</p><p>封装了不同类型设备的访问细节，抽象为统一的文件访问方式，更高层的代码就能基于统一的访问方式，来访问底层不同类型的设备。这样做的好处是，隔离底层设备访问的复杂性。统一的访问方式能够简化上层代码的编写，并且代码更容易复用。</p><p>除此之外，抽象和封装还能有效控制代码复杂性的蔓延，将复杂性封装在局部代码中，隔离实现的易变性，提供简单、统一的访问接口，让其他模块来使用，其他模块基于抽象的接口而非具体的实现编程，代码会更加稳定。</p><h2>分层与模块化</h2><p>前面我们也提到，模块化是构建复杂系统的常用手段。</p><p>对于像Unix这样的复杂系统，没有人能掌控所有的细节。之所以我们能开发出如此复杂的系统，并且能维护得了，最主要的原因就是将系统划分成各个独立的模块，比如进程调度、进程通信、内存管理、虚拟文件系统、网络接口等模块。不同的模块之间通过接口来进行通信，模块之间耦合很小，每个小的团队聚焦于一个独立的高内聚模块来开发，最终像搭积木一样，将各个模块组装起来，构建成一个超级复杂的系统。</p><p>除此之外，Unix、Linux等大型系统之所以能做到几百、上千人有条不紊地协作开发，也归功于模块化做得好。不同的团队负责不同的模块开发，这样即便在不了解全部细节的情况下，管理者也能协调各个模块，让整个系统有效运转。</p><p>实际上，除了模块化之外，分层也是我们常用来架构复杂系统的方法。</p><p>我们常说，计算机领域的任何问题都可以通过增加一个间接的中间层来解决，这本身就体现了分层的重要性。比如，Unix系统也是基于分层开发的，它可以大致上分为三层，分别是内核、系统调用、应用层。每一层都对上层封装实现细节，暴露抽象的接口来调用。而且，任意一层都可以被重新实现，不会影响到其他层的代码。</p><p>面对复杂系统的开发，我们要善于应用分层技术，把容易复用、跟具体业务关系不大的代码，尽量下沉到下层，把容易变动、跟具体业务强相关的代码，尽量上移到上层。</p><h2>基于接口通信</h2><p>刚刚我们讲了分层、模块化，那不同的层之间、不同的模块之间，是如何通信的呢？一般来讲都是通过接口调用。在设计模块（module）或者层（layer）要暴露的接口的时候，我们要学会隐藏实现，接口从命名到定义都要抽象一些，尽量少涉及具体的实现细节。</p><p>比如，Unix系统提供的open()文件操作函数，底层实现非常复杂，涉及权限控制、并发控制、物理存储，但我们用起来却非常简单。除此之外，因为open()函数基于抽象而非具体的实现来定义，所以我们在改动open()函数的底层实现的时候，并不需要改动依赖它的上层代码。</p><h2>高内聚、松耦合</h2><p>高内聚、松耦合是一个比较通用的设计思想，内聚性好、耦合少的代码，能让我们在修改或者阅读代码的时候，聚集到在一个小范围的模块或者类中，不需要了解太多其他模块或类的代码，让我们的焦点不至于太发散，也就降低了阅读和修改代码的难度。而且，因为依赖关系简单，耦合小，修改代码不会牵一发而动全身，代码改动比较集中，引入bug的风险也就减少了很多。</p><p>实际上，刚刚讲到的很多方法，比如封装、抽象、分层、模块化、基于接口通信，都能有效地实现代码的高内聚、松耦合。反过来，代码的高内聚、松耦合，也就意味着，抽象、封装做到比较到位、代码结构清晰、分层和模块化合理、依赖关系简单，那代码整体的质量就不会太差。即便某个具体的类或者模块设计得不怎么合理，代码质量不怎么高，影响的范围也是非常有限的。我们可以聚焦于这个模块或者类做相应的小型重构。而相对于代码结构的调整，这种改动范围比较集中的小型重构的难度就小多了。</p><h2>为扩展而设计</h2><p>越是复杂项目，越要在前期设计上多花点时间。提前思考项目中未来可能会有哪些功能需要扩展，提前预留好扩展点，以便在未来需求变更的时候，在不改动代码整体结构的情况下，轻松地添加新功能。</p><p>做到代码可扩展，需要代码满足开闭原则。特别是像Unix这样的开源项目，有n多人参与开发，任何人都可以提交代码到代码库中。代码满足开闭原则，基于扩展而非修改来添加新功能，最小化、集中化代码改动，避免新代码影响到老代码，降低引入bug的风险。</p><p>除了满足开闭原则，做到代码可扩展，我们前面也提到很多方法，比如封装和抽象，基于接口编程等。识别出代码可变部分和不可变部分，将可变部分封装起来，隔离变化，提供抽象化的不可变接口，供上层系统使用。当具体的实现发生变化的时候，我们只需要基于相同的抽象接口，扩展一个新的实现，替换掉老的实现即可，上游系统的代码几乎不需要修改。</p><h2>KISS首要原则</h2><p>简单清晰、可读性好，是任何大型软件开发要遵循的首要原则。只要可读性好，即便扩展性不好，顶多就是多花点时间、多改动几行代码的事情。但是，如果可读性不好，连看都看不懂，那就不是多花时间可以解决得了的了。如果你对现有代码的逻辑似懂非懂，抱着尝试的心态去修改代码，引入bug的可能性就会很大。</p><p>不管是自己还是团队，在参与大型项目开发的时候，要尽量避免过度设计、过早优化，在扩展性和可读性有冲突的时候，或者在两者之间权衡，模棱两可的时候，应该选择遵循KISS原则，首选可读性。</p><h2>最小惊奇原则</h2><p>《Unix编程艺术》一书中提到一个Unix的经典设计原则，叫“最小惊奇原则”，英文是“The Least Surprise Principle”。实际上，这个原则等同于“遵守开发规范”，意思是，在做设计或者编码的时候要遵守统一的开发规范，避免反直觉的设计。实际上，关于这一点，我们在前面的编码规范部分也讲到过。</p><p>遵从统一的编码规范，所有的代码都像一个人写出来的，能有效地减少阅读干扰。在大型软件开发中，参与开发的人员很多，如果每个人都按照自己的编码习惯来写代码，那整个项目的代码风格就会千奇百怪，这个类是这种编码风格，另一个类又是另外一种风格。在阅读的时候，我们要不停地切换去适应不同的编码风格，可读性就变差了。所以，对于大型项目的开发来说，我们要特别重视遵守统一的开发规范。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。</p><p>今天，我们主要从设计原则和思想的角度，也可以说是从设计开发的角度，来学习如何应对复杂软件开发。我总计了7点我认为比较重要的。这7点前面我们都详细讲过，如果你对哪块理解得不够清楚，可以回过头去再看下。这7点分别是：</p><ul>\n<li>封装与抽象</li>\n<li>分层与模块化</li>\n<li>基于接口通信</li>\n<li>高内聚、松耦合</li>\n<li>为扩展而设计</li>\n<li>KISS首要原则</li>\n<li>最小惊奇原则</li>\n</ul><p>当然，这7点之间并不是相互独立的，有几点是互相支持的，比如“高内聚、松耦合”与抽象封装、分层模块化、基于接口通信。有几点是互相冲突的， 比如KISS原则与为扩展而设计，这都需要我们根据实际情况去权衡。</p><h2>课堂讨论</h2><p>从设计原则和思想的角度来看，你觉得哪些原则或思想在大型软件开发中最能发挥作用，最能有效地应对代码的复杂性？</p><p>欢迎留言和我分享你的想法。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"77 | 开源实战一（下）：通过剖析Java JDK源码学习灵活应用设计模式","id":230708},"right":{"article_title":"79 | 开源实战二（中）：从Unix开源开发学习应对大型复杂项目开发","id":232427}},"comments":[{"had_liked":false,"id":213576,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1588481454,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"272171421102","product_id":100039001,"comment_content":"1.不用哪些，只要一个，就是合理的分层。<br><br>2.大型软件的持续开发，。人多，代码量大，时间长会有这三个问题。<br><br><br>3.人多：人一多什么鸟都有，在快节奏下，你很难去保证所有人的所有代码质量。即便你有code review，但质量是要对业务做让步的，而这是合理的。那么这时候去要求每个人的，编码规范，抽象封装能力，就非常的难。所以这些能力对软件质量很重要，但你抓不了也是白搭。反观分层，它其实是限定了一块业务逻辑，实现代码的基本拆分和归类，定义了一个基本的规范。任何人都可以顺着这个规范去阅读他人的代码。实现了最基本的复杂性隔离。可执行可落地，试用期基本就可以灌输成功。<br><br>4.代码量大：对于代码量大的项目，要找到目标功能，是很痛苦的。而分层在这时候就具备类似索引的功能。哪怕项目没注释，只要它按着分层写，你就可以顺着 业务 功能 细节这样的线去摸到目标功能，无需从入口开始读代码。<br><br>5.时间长：软件在时间线上是动态的，当下的业务边界很可能因时间的推移而被变革，需要重组模块的数据范围和业务边界。好的分层可以让你更快的重组模块，解决当前模块划分不合理的问题。具体可以看下ddd的分层。它可以让你在重组模块时，只需花一两个小时，剪切粘帖整块聚合的业务代码，并调整一些基础功能的实现，便能实现模块重组。而不需长达数个月的风险评估，代码调整，测试覆盖。","like_count":64,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479400,"discussion_content":"说的挺对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577951952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1162242,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bc/02/3f7a7197.jpg","nickname":"跨江大桥","note":"","ucode":"4629B23F1BB9F0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":530426,"discussion_content":"真巧，同一天","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637072124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":479400,"ip_address":""},"score":530426,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":214019,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1588636219,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"126142687803","product_id":100039001,"comment_content":"年前做的一个项目，是一个能力编排引擎，这是我实际参与的第一个具备良好设计的软件项目，满足了：抽象和封装、模块化和分层结构、基于接口而非实现编程等设计原则，在这个项目中我才真正获得了对这些设计原则的理解。这个经历说明—我应该尽量去高水平高素质的团队，才有机会遇到高水平的项目和代码","like_count":30,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479479,"discussion_content":"是的 主要是对象转json的格式问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577952280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1618328,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b1/98/11b22d79.jpg","nickname":"絆","note":"","ucode":"52D965461314DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531664,"discussion_content":"我喜欢在xxxVO,xxxBO,xxxTDO....这些对象上用一个xxxFactroy 来统一处理这些类型转换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637377500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035243,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/eb/2a51ba53.jpg","nickname":"Sunny Snow","note":"","ucode":"A7C5D3327FD3BD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293466,"discussion_content":"使用inline的组合方式这个问题不就解决了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595552810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1622696,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/a8/f3f8f5d2.jpg","nickname":"一格状语","note":"","ucode":"EBA9ED5F97416D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1035243,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/eb/2a51ba53.jpg","nickname":"Sunny Snow","note":"","ucode":"A7C5D3327FD3BD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":413663,"discussion_content":"有资料我看看吗inline组合方式，java的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636536938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":293466,"ip_address":""},"score":413663,"extra":""}]}]},{"had_liked":false,"id":214036,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1588643063,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48833283319","product_id":100039001,"comment_content":"分层和模块化，基于接口通讯，这两点最重要！<br>这个相当于整个架构搭起来了，每个模块怎么划分怎么交流定好了，其他扩展行，可读性，抽象都可以细化到模块中实施。","like_count":12},{"had_liked":false,"id":213494,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1588432656,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27358236432","product_id":100039001,"comment_content":"个人觉得是：高内聚、松耦合，高内聚说明合适的人都在一起了，松耦合说明不合适的人的都隔离起来。","like_count":6,"discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479478,"discussion_content":"应该吹毛求疵，我们fix去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577446023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128447,"discussion_content":"我觉得这个不是吹毛求疵， 而专栏应该去做的更好。技术人如果听到/fə&#39;sɑ:d/应该是很敏感的。当时如果我听到的是/fə&#39;sɑ:d/，就能马上联想到是门面（外观）模式，然后后面的内容会很好理解；听到/fə&#39;kei:d/时脑子里会产生疑惑，直至看到文稿才弄明白","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578640746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026832,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ab/10/b812ff3e.jpg","nickname":"Hesher","note":"","ucode":"99AB8B1704CB7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386286,"discussion_content":"20210-07-29，这个读音问题还没有被修正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627513471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376561,"discussion_content":"既然专栏都这么严谨，我们用户也需要严谨的态度去学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622192608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1922242,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/54/c2/17512f7a.jpg","nickname":"banxiaobu","note":"","ucode":"0FC00E5E90ACB8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236365,"discussion_content":"我还以为我一直读错了呢，还特地Google了一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587088623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134288,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","nickname":"Ken张云忠","note":"","ucode":"D0BAC9FC17DE2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109365,"discussion_content":"音频有读错概念内容的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577687993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106473,"discussion_content":"小编真是太难了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577537697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213080,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1588298111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27358101887","product_id":100039001,"comment_content":"我觉得在大型项目开发中，单一职责和最小知识原则也是发挥很大的作用，从编码角度来看，类，模块都遵守单一和最小知识原则，这样的话内聚性高，耦合少，每个类和模块可能都不会太复杂，可读性，可测试性也就不会太差。从一个系统的生命周期来看，单一职责体现为产品，开发，测试，运维。各个角色的人各司其职，耦合不会太多，能有效的提高效率。会想起以前在某家传统公司，需求沟通、设计、编码、测试、维护几乎要自己一个人干，有时候觉得太累。","like_count":7},{"had_liked":false,"id":213040,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1588282624,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"23063119104","product_id":100039001,"comment_content":"五一快乐！<br>我觉得抽象封装和分层模块化最能发挥作用。最近在看ROS机器人操作系统，是开源一个中间件系统，思想是通过封装，抽象，使得不懂硬件的程序员可以对机器人进行编程。里面所有的可执行程序，都可以叫做一个node（节点），机器人可以组装的（移动底盘，机器臂等）这个是模块化，机械臂控制使用moveit运动学控制规划模块，底座导航使用导航功能模块，这个算是模块化。机器的各个部分，都使用命名空间的方式访问，和争哥将的linux系统结构的方式差不多。","like_count":5,"discussions":[{"author":{"id":1246707,"avatar":"https://static001.geekbang.org/account/avatar/00/13/05/f3/5488276f.jpg","nickname":"心雨鑫晴","note":"","ucode":"37A42C19B98F1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311185,"discussion_content":"第二种方式感觉很不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602246437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1255918,"avatar":"https://static001.geekbang.org/account/avatar/00/13/29/ee/fba11edf.jpg","nickname":"        ","note":"","ucode":"21028A49D81B06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111111,"discussion_content":"明白了 谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577781467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1255918,"avatar":"https://static001.geekbang.org/account/avatar/00/13/29/ee/fba11edf.jpg","nickname":"        ","note":"","ucode":"21028A49D81B06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110860,"discussion_content":"赞！但是第二点你的设计可以说的更清晰一点吗，不是很能明白 这个生成id到后面推mq其中的逻辑，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577761270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1255918,"avatar":"https://static001.geekbang.org/account/avatar/00/13/29/ee/fba11edf.jpg","nickname":"        ","note":"","ucode":"21028A49D81B06","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110939,"discussion_content":"上游系统只需要拿到积分id，记录关联关系，并将积分id和来源 类型以及积分增减数量这些字段以消息的形式推往mq，即认为积分操作成功。积分系统消费mq消息，mq会失败重试，保证最终一致。积分id是唯一键可以去重保证消费幂等。这个是常用套路，比较简单的了。（不要用数据库唯一键异常做幂等，异常堆栈比较耗性能的。可以加redis或插入前线查询，以做重复消费的过滤）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577767094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":110860,"ip_address":""},"score":110939,"extra":""},{"author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311331,"discussion_content":"上下游在这里用同步策略比较好，采用异步操作会显著增加实现的复杂度：比如上游要消费，先拿到积分id，然后推送消息到mq，积分消费mq后发现积分不足，则要通知上游（也通过mq？）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602310421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":110939,"ip_address":""},"score":311331,"extra":""},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311362,"discussion_content":"如果上有需要等待下有操作成功的场景。就不能这么玩。这么玩是建立在下游操作最终必定成功的前提条件下。有依赖的该用tcc或则其他分布式事务方案，就用。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1602316739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":311331,"ip_address":""},"score":311362,"extra":""}]}]},{"had_liked":false,"id":216896,"user_name":"落尘kira","can_delete":false,"product_type":"c1","uid":1092169,"ip_address":"","ucode":"D203B519E43F85","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","comment_is_top":false,"comment_ctime":1589364206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14474266094","product_id":100039001,"comment_content":"我觉得是最小惊奇原则，可读性一定要是第一位的（不管代码写的有多惊奇，起码得让后面的同学看懂，多写一行注释也好）","like_count":3},{"had_liked":false,"id":215622,"user_name":"xk_","can_delete":false,"product_type":"c1","uid":1514305,"ip_address":"","ucode":"DFE1AC38EA78A7","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","comment_is_top":false,"comment_ctime":1589034506,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14473936394","product_id":100039001,"comment_content":"单一职责原则和KISS原则，其他原则太复杂，就记得这两个。","like_count":4},{"had_liked":false,"id":214777,"user_name":"，","can_delete":false,"product_type":"c1","uid":1701867,"ip_address":"","ucode":"A5543C8DFEB198","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","comment_is_top":false,"comment_ctime":1588817852,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10178752444","product_id":100039001,"comment_content":"    如何定义复杂度: 对软件做一些修改,所需的人力物力较少,那么我们就可以说他复杂度低,反之则认定它复杂度较高<br>    分层和模块化应对的是架构层面的复杂度,影响的是整个软件的质量,他应该是软件开发中最重要的部分,一旦发生改动,需要多个模块进行修改,将近于重新做架构设计,成本非常大<br>实例:  TCP&#47;IP网络模型,应用层,传输层,网络传输层,网络层的划分是水平方向的划分,应用服务器,负载均衡服务器,DNS服务器,个人电脑,体现的是垂直方向的划分,这种划分方式能够很好的应对复杂度<br><br>     基于接口通讯是应对的是模块通讯时的复杂度,一次改动,通常会影响多个模块,需要多个模块的开发者协作才能完成改动,但毕竟只需要修改模块之间的通讯,成本相对较小,所以较为次要<br>    KISS,为扩展设计,最小惊奇应对的是代码层面的复杂度,属于实现细节,改动通常不会被其他模块感知,改动需要的人力物力较上两者更少,所以他最为次要","like_count":2},{"had_liked":false,"id":214152,"user_name":"J","can_delete":false,"product_type":"c1","uid":1002675,"ip_address":"","ucode":"EC6B45BD3E128D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/b3/931dcd9e.jpg","comment_is_top":false,"comment_ctime":1588667953,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10178602545","product_id":100039001,"comment_content":"封装与抽象、分层与模块化、基于接口通信，我觉得是最重要的三个设计原则。<br><br>封装与抽象是从使用者的角度来考虑系统该如何设计。<br>分层与模块化则是在系统建设者之间划分好界限和职责。<br>基于接口通信构建了内外之间最合适的交互方式。","like_count":2},{"had_liked":false,"id":214119,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1588662414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10178597006","product_id":100039001,"comment_content":"课堂讨论: <br><br>    在大型项目开发中, 分层与模块化最能发挥作用. <br><br>    分层与模块化思想搭建项目骨架, 层间通信或模块间通信可以应用基于接口而非实现的原则通信, 提高了扩展性. <br><br>    而分层与模块化自然而然的实现了封装与抽象的原则. <br>    <br>    而某一层或某一模块的具体实现可以参考KISS原则, 最小惊奇原则等进行设计.","like_count":2},{"had_liked":false,"id":213095,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1588300904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10178235496","product_id":100039001,"comment_content":"这一篇教导的是一些实际开发中的经验,如果没有接触过实际开发的同学,可能会觉得对上面原则的取舍比较困难,这就需要在不断实战中积累<br>顺便一提今天的问题,在现在的开发中,最重要的必然是封装<br>操作系统将网络连接封装为了Socket函数,而浏览器和各种高级语言会对于Socket再进一次的封装,方便我们的开发,<br>并且如果没有封装,现在可能从事编程的人员需要各个从底层硬件开始了解,互联网也不会发展如此的快了","like_count":2},{"had_liked":false,"id":213078,"user_name":"马球先生","can_delete":false,"product_type":"c1","uid":1119609,"ip_address":"","ucode":"858C2CE0E494C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/79/efde2a69.jpg","comment_is_top":false,"comment_ctime":1588297726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10178232318","product_id":100039001,"comment_content":"在大型软件开发中 模块化和分层 分别从横行和纵向 两种相互垂直的方向来划分软件结构","like_count":2},{"had_liked":false,"id":287025,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1617750145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5912717441","product_id":100039001,"comment_content":"我觉得分层模块化比较重要，有这个能保证阅读代码的边界<br>毕竟再复杂的代码，只要花些时间都能看完，但是熟悉一个模块代码的时候不知道边界在哪，容易把迷失在这个系统里面。","like_count":1},{"had_liked":false,"id":216772,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1589339904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884307200","product_id":100039001,"comment_content":"我觉得有效的避免复杂性都是通过转移来实现，比如设计模式的，策略，职责链，状态模式，门面模式去转移复杂度。但是每种模式都有其场景化，需要根据业务来衡量","like_count":1},{"had_liked":false,"id":214687,"user_name":"will","can_delete":false,"product_type":"c1","uid":1156207,"ip_address":"","ucode":"7A7DBE3E0EEAEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/6f/672a27d4.jpg","comment_is_top":false,"comment_ctime":1588782072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883749368","product_id":100039001,"comment_content":"好的设计会满足抽象封装模块化等各种特性。","like_count":1},{"had_liked":false,"id":214339,"user_name":"漫游者","can_delete":false,"product_type":"c1","uid":1058856,"ip_address":"","ucode":"7402D9068413D5","user_header":"https://static001.geekbang.org/account/avatar/00/10/28/28/5ffdd123.jpg","comment_is_top":false,"comment_ctime":1588726761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883694057","product_id":100039001,"comment_content":"我觉得还有一点是需求管理吧，好像跟设计思想和原则没有关系～～。我们写代码除了实现功能，更重要的是面向未来做扩展。如果需求是可预期的，其实更容易让我们去运用老师说的设计思想原则模式等等。","like_count":1},{"had_liked":false,"id":214330,"user_name":"不能忍的地精","can_delete":false,"product_type":"c1","uid":1754913,"ip_address":"","ucode":"66A921C0BC8102","user_header":"","comment_is_top":false,"comment_ctime":1588725679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883692975","product_id":100039001,"comment_content":"分层和模块化，有效的将软件的复杂性限制在了层里面和模块里面","like_count":1},{"had_liked":false,"id":213850,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1588576659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883543955","product_id":100039001,"comment_content":"分层、模块化、接口编程 最实用的技巧。","like_count":1},{"had_liked":false,"id":213767,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1588556777,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5883524073","product_id":100039001,"comment_content":"现在微服务很火，服务切分按照模块来的。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479833,"discussion_content":"对于大部分业务系统来说 数据库是最耗时的 对象转化那点性能损失可以忽略","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577946130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1319759,"avatar":"https://static001.geekbang.org/account/avatar/00/14/23/4f/3ce24bed.jpg","nickname":"朱延云","note":"","ucode":"08E6EE2AB82DE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":114330,"discussion_content":"mapstruct.Mapper 可以了解下,性能方面应该比beanutils好很多","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1577968667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1464006,"avatar":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","nickname":"斐波那契","note":"","ucode":"85E2EBC01392B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1319759,"avatar":"https://static001.geekbang.org/account/avatar/00/14/23/4f/3ce24bed.jpg","nickname":"朱延云","note":"","ucode":"08E6EE2AB82DE9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":115294,"discussion_content":"好的 谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578009764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":114330,"ip_address":""},"score":115294,"extra":""},{"author":{"id":1104818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","nickname":"JasonZ","note":"","ucode":"992193AE44C39C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1319759,"avatar":"https://static001.geekbang.org/account/avatar/00/14/23/4f/3ce24bed.jpg","nickname":"朱延云","note":"","ucode":"08E6EE2AB82DE9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295506,"discussion_content":"推荐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596210611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":114330,"ip_address":""},"score":295506,"extra":""},{"author":{"id":1266987,"avatar":"https://static001.geekbang.org/account/avatar/00/13/55/2b/b7927cc4.jpg","nickname":"超超超超超帅耶🌴","note":"","ucode":"931E23DC0ACB04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1319759,"avatar":"https://static001.geekbang.org/account/avatar/00/14/23/4f/3ce24bed.jpg","nickname":"朱延云","note":"","ucode":"08E6EE2AB82DE9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351836,"discussion_content":"我就是用的这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614485066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":114330,"ip_address":""},"score":351836,"extra":""}]},{"author":{"id":1316926,"avatar":"https://static001.geekbang.org/account/avatar/00/14/18/3e/f8632713.jpg","nickname":"EveryDayIsNew","note":"","ucode":"776B81EF6830FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391326,"discussion_content":"这个字段有差异或者类型不同的时候，转换会有问题，会带来复杂性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630400982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1261052,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3d/fc/f81d7847.jpg","nickname":"BATMAN","note":"","ucode":"414137A1074E62","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352709,"discussion_content":"直接 get set性能最高吧\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614825280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342737,"discussion_content":"“对于大部分业务系统来说 数据库是最耗时的 对象转化那点性能损失可以忽略”\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610801776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2041049,"avatar":"","nickname":"肆方海木","note":"","ucode":"5808923F83890B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293268,"discussion_content":"Dozer性能倒数第一","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595495796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068819,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4f/13/5197f8d2.jpg","nickname":"永旭","note":"","ucode":"C9C74BE32C8F46","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213826,"discussion_content":"Apache的beanutils不建议使用, 但spring的beanutils性能不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585125657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1464006,"avatar":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","nickname":"斐波那契","note":"","ucode":"85E2EBC01392B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1068819,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4f/13/5197f8d2.jpg","nickname":"永旭","note":"","ucode":"C9C74BE32C8F46","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213916,"discussion_content":"这两个有什么区别！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585134711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":213826,"ip_address":""},"score":213916,"extra":""},{"author":{"id":2034632,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/0b/c8/15f055d3.jpg","nickname":"图灵机","note":"","ucode":"EB02DB653AD591","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1464006,"avatar":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","nickname":"斐波那契","note":"","ucode":"85E2EBC01392B1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541658,"discussion_content":"差别很大，apache的beanutils简直是性能杀手，生产禁止使用的，spring业务使用是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640506022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":213916,"ip_address":""},"score":541658,"extra":""}]}]},{"had_liked":false,"id":213262,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1588342551,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883309847","product_id":100039001,"comment_content":"最小惊奇原则吧，实际上大型业务系统的架构都大同小异，有些特定的程式，但是实际编码过程中，对于开发规范的遵守，就很重要了，这个直接影响代码可读性，如果不好好遵守，各行其是，“破窗效应”就会显现，导致代码越来越难维护，严重打击开发团队的信心~~~","like_count":1},{"had_liked":false,"id":213092,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1588300306,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5883267602","product_id":100039001,"comment_content":"个人认为有效降低复杂性的原则是封装抽象和分层模块化，封装抽象能够使一些通用功能服用，降低复杂性，分层模块化可以方便多人协调开发，还可以让开发人员专注于某些层级模块的代码实现。","like_count":1},{"had_liked":false,"id":345702,"user_name":"寒光","can_delete":false,"product_type":"c1","uid":1206187,"ip_address":"","ucode":"061BE413595F21","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/ab/fcf0cec4.jpg","comment_is_top":false,"comment_ctime":1652517616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652517616","product_id":100039001,"comment_content":"一般都讲“高内聚，低耦合”，是不是说，内聚和耦合是一组相对的概念，那高和低相对应该是比较合适的。如果要换一种说法，也应该是相对的，如：紧内聚，松耦合~~，高内聚，松耦合，总觉得怪怪的。","like_count":0},{"had_liked":false,"id":299362,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1624594006,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1624594006","product_id":100039001,"comment_content":"厉害了","like_count":0},{"had_liked":false,"id":291579,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1620373915,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620373915","product_id":100039001,"comment_content":"我感觉分层与模块化, 为扩展而设计还有最小惊奇原则在大型项目中最有用. 因为大型项目的特点就是业务复杂度高<br>, 而分层与模块化可以将各个复杂的部分进行隔离, 修改当中的某个复杂部分的同时不会影响到其他的部分; 而为扩展<br>设计也是为了解决当引入新的功能时候以至于已有复杂的功能不受影响, 从而使项目的健壮性增强; 项目之所以是大项目<br>参与的人数注定是少不了的, 因为通过分层与模块化后部门team的人可以比较职责单一的只维护其中的一个模块, 这时候就<br>需要针对无论是代码的风格还有设计方式(类的命名, 工具类的命名等)需要统一, 这样才能减轻学习的成本","like_count":0},{"had_liked":false,"id":285712,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1616987682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616987682","product_id":100039001,"comment_content":"从设计原则和思想的角度来看，你觉得哪些原则或思想在大型软件开发中最能发挥作用，最能有效地应对代码的复杂性？<br><br>开闭原则、单一职责原则、基于接口而非实现编程、KISS原则","like_count":0},{"had_liked":false,"id":264943,"user_name":"万历十五年","can_delete":false,"product_type":"c1","uid":1122150,"ip_address":"","ucode":"3D8CF5DF847AE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/66/59e0647a.jpg","comment_is_top":false,"comment_ctime":1606716180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606716180","product_id":100039001,"comment_content":"1.针对代码质量，首要的是“可读”，其次是“可扩展”，但这二者是相冲突的，需要“持续重构”来平衡。平衡做好了，代码就是“可维护的”。<br>2.解决复杂性的方法：降低复杂度。可通过“分层分模块”，“封装抽象”，“高内聚低耦合”等手段来实现。最终的目的就是把复杂的系统分解成若干个简单的子系统。<br>3.对个人而言，要多练习：既要动脑，也要动手，二者缺一不可。万丈高楼平地起，先从小的功能，小的项目开始练手，逐渐过渡到大的系统设计。<br>4.保持开放的心态，虚心与人多交流。","like_count":0},{"had_liked":false,"id":256409,"user_name":"Vivion","can_delete":false,"product_type":"c1","uid":1242310,"ip_address":"","ucode":"C62C4F46B8EB4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/c6/aed9e44a.jpg","comment_is_top":false,"comment_ctime":1603618587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603618587","product_id":100039001,"comment_content":"个人认为以下几点在复杂度高的系统中作用最重：<br>1. 好理解的分模块分层<br>2. 统一的开发规范<br>3. 良好的接口 bao 露<br><br>易维护、易懂是首要","like_count":0},{"had_liked":false,"id":247901,"user_name":"龙猫","can_delete":false,"product_type":"c1","uid":1112490,"ip_address":"","ucode":"FD726CC969EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","comment_is_top":false,"comment_ctime":1599909664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599909664","product_id":100039001,"comment_content":"对大部分中小公司来讲，一个团队中必须有一个编码素质高、有高标准的人来做把关，否则看烂代码就会腐蚀真个系统。","like_count":0},{"had_liked":false,"id":240811,"user_name":"JasonZ","can_delete":false,"product_type":"c1","uid":1104818,"ip_address":"","ucode":"992193AE44C39C","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","comment_is_top":false,"comment_ctime":1597072464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597072464","product_id":100039001,"comment_content":"分层与模块化、基于接口开发、高内聚、松耦合","like_count":0},{"had_liked":false,"id":222488,"user_name":"feihui","can_delete":false,"product_type":"c1","uid":1007294,"ip_address":"","ucode":"13F1D4A82BC650","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/be/9ea55f46.jpg","comment_is_top":false,"comment_ctime":1590819218,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590819218","product_id":100039001,"comment_content":"文中第一段如同科学家和工程师的对比，software engineer 不仅仅包含 coding，还涉及management","like_count":0},{"had_liked":false,"id":221776,"user_name":"Sean","can_delete":false,"product_type":"c1","uid":1490049,"ip_address":"","ucode":"9360D9FBB2F851","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJpJz0SORayxydkezyVfk4TvDcJjSahuMbvXPkCbvvjC4RLt6picrlp4rrxXm22TbRQrbC6ibl8zNSw/132","comment_is_top":false,"comment_ctime":1590589971,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590589971","product_id":100039001,"comment_content":"一个功能的实现总会有某种天然的复杂度，把复杂的实现留在接口背后，把简洁的接口留给调用一方。<br>在分层的设计中，每一层都承载了部分关注点。将更为细节、更为琐碎的部分往下沉。越高层，考虑的颗粒越大，接口应越简单。","like_count":0},{"had_liked":false,"id":214087,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1588654392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588654392","product_id":100039001,"comment_content":"单一职责原则和为扩展而设计以及高内聚低耦合","like_count":0}]}