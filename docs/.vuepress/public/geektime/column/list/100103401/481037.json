{"id":481037,"title":"11 | 注解与反射：进阶必备技能","content":"<p>你好，我是朱涛。今天这节课，我们来学习一下Kotlin的<strong>注解</strong>（Annotation）和<strong>反射</strong>（Reflection）。</p><p>注解和反射，是Kotlin当中比较难理解的内容了。和前面我们学习的<a href=\"https://time.geekbang.org/column/article/480022\">泛型</a>一样，注解与反射都是比较抽象的概念。我们现在已经知道，Kotlin的泛型，就是在代码架构的层面进行的一种抽象，从而达到代码逻辑尽可能复用的目的。那么，注解与反射，它们存在的意义是什么呢？</p><p>答案是：提高代码的<strong>灵活性</strong>。</p><p>灵活性，就让注解与反射同样有着举足轻重的地位，借助这两种技术，我们可以做许多有趣的事情。Kotlin与Java领域，有许多著名的开源库，比如大名鼎鼎的<a href=\"https://spring.io/projects/spring-boot\">Spring Boot</a>、<a href=\"https://github.com/square/retrofit\">Retrofit</a>、<a href=\"https://github.com/google/gson\">Gson</a>等，都会用到这两种技术。</p><p>所以，只有深刻理解了注解和反射，我们才可能理解那些著名开源库的设计思路，也才可能读懂这些世界顶级开发者的代码。</p><p>当然，课程进行到这里，学习的难度也越来越高了，不过你也不要因此产生畏难的情绪，只要你能多思考、多练习，把对知识点的理解都落实到代码上，那我相信你对Kotlin的掌握情况、代码能力甚至架构能力，都会有一个质的飞跃。并且，在课程中我也会尽量用通俗易懂的语言、例子来给你介绍这些陌生的概念知识，让你在学习的过程中可以轻松一些。</p><!-- [[[read_end]]] --><p>好，下面我们就正式开始吧。</p><h2>认识注解</h2><p>注解，可能是我们眼里<strong>最熟悉的陌生人</strong>。虽然经常见面，但我们并不真的认识它。</p><p>实际上，注解几乎无处不在，比如说，我们经常能在Kotlin标准库当中看见“@Deprecated”这样的注解，它代表了被标注的代码“已废弃”。如果你有Java的编程经验，你一定见过“@Override”这个注解，它代表了重写。</p><p>而就算你没有任何编程经验，你也已经在前面的课程中见到过注解了。比如我们在<a href=\"https://time.geekbang.org/column/article/473656\">第4讲</a>的单元测试代码当中，就用到了@Test这个注解；在<a href=\"https://time.geekbang.org/column/article/477295\">第8讲</a>的性能测试代码中，我们用到了@Benchmark这个注解。</p><p>其实，要理解Kotlin的注解也并不困难，因为在我们的生活当中也有类似的概念，那就是<strong>便利贴</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/7a/21/7a0a847eb0a881fba6413be150dd2f21.png?wh=1920x1280\" alt=\"图片\"></p><p>比如在学习的时候，你看到书本里的某个知识点有了新的感悟，就会拿起便利贴，写下来你当时的想法，然后贴到书本当中去。</p><p>另一个例子就是，我们经常会在论文或者维基百科当中看到的“注解”。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/1e/68966cf6789af5ecf03cf65338a0451e.png?wh=887x196\" alt=\"图片\"></p><p>所以，从这个角度来看，我们很容易就能想清楚注解到底是什么。其实，它就是“对已有数据进行补充的一种数据”。这话读起来有点绕，让我用更通俗的语言来解释一下：</p><ul>\n<li>我们学习的时候，写下来的便利贴注解，其实就是对知识点的补充。</li>\n<li>维基百科当中的注解，其实就是对它描述内容的一种补充。</li>\n</ul><p>因此，<strong>Kotlin当中的注解，其实就是“程序代码的一种补充”</strong>。</p><p>现在我们就拿第4讲中的单元测试代码为例，来看看它的作用。</p><pre><code class=\"language-plain\">class TestCalculatorV3 {\n//   注解\n//    ↓\n    @Test\n    fun testCalculate() {\n        val calculator = CalculatorV3()\n\n        val res1 = calculator.calculate(\"2333333333333332+1\")\n        assertEquals(\"2333333333333333\", res1)\n    }\n}\n</code></pre><p>上面这段代码中的“@Test”，它的作用是告诉我们的IDE，testCalculate()这个方法是一个测试方法。IDE检测到这个注解以后，就会在旁边的工具栏展示出一个绿色的三角形按钮，方便我们直接运行这个测试方法。</p><p>如果我们删掉“@Test”这个注解，这段代码就会变成一段普通的Kotlin代码，而旁边工具栏的绿色三角形按钮也会消失。</p><p><img src=\"https://static001.geekbang.org/resource/image/65/cb/65d02a01df21a579d05944aedeff59cb.gif?wh=1174x668\" alt=\"图片\"></p><p>从这个例子里，我们其实就能体会到注解的灵活性。我们开发者只需要用Kotlin的语法写代码即可，至于代码是不是用来做单元测试，我们用一个简单的“@Test”注解就可以搞定。这中间有<strong>解耦</strong>的思想在里面。</p><p>认识到注解是什么以后，我们后面的学习就很简单了。接下来，我们就来看看注解的定义还有使用。</p><h3>注解的定义</h3><p>首先，让我们来看看注解是如何定义的。Kotlin的源代码当中，提供了很多内置的注解，比如@Deprecated、@JvmStatic、@JvmOverloads等等。除了Kotlin默认就有的注解以外，我们也可以定义自己的注解。</p><p>比如说，如果我们想定义一个@Deprecated注解，应该怎么做呢？其实非常简单，总体结构和定义一个普通的Kotlin类差不多，只是多了一些额外的东西。</p><pre><code class=\"language-plain\">@Target(CLASS, FUNCTION, PROPERTY, ANNOTATION_CLASS, CONSTRUCTOR, PROPERTY_SETTER, PROPERTY_GETTER, TYPEALIAS)\n@MustBeDocumented\npublic annotation class Deprecated(\n    val message: String,\n    val replaceWith: ReplaceWith = ReplaceWith(\"\"),\n    val level: DeprecationLevel = DeprecationLevel.WARNING\n)\n</code></pre><p>从上面的代码里，我们可以看到，@Deprecated这个注解的定义上面，还有其他的注解@Target、@MustBeDocumented。这样的注解，我们叫做<strong>元注解</strong>，即它本身是注解的同时，还可以用来修饰其他注解。</p><p>Kotlin常见的元注解有四个：</p><ul>\n<li><strong>@Target</strong>，这个注解是指定了被修饰的注解都可以用在什么地方，也就是<strong>目标</strong>；</li>\n<li><strong>@Retention</strong>，这个注解是指定了被修饰的注解是不是编译后可见、是不是运行时可见，也就是<strong>保留位置</strong>；</li>\n<li><strong>@Repeatable</strong>，这个注解是允许我们在同一个地方，多次使用相同的被修饰的注解，使用场景比较少；</li>\n<li><strong>@MustBeDocumented</strong>，指定被修饰的注解应该包含在生成的API文档中显示，这个注解一般用于SDK当中。</li>\n</ul><p>这里，你需要注意的是Target和Retention的取值：</p><pre><code class=\"language-plain\">public enum class AnnotationTarget {\n    // 类、接口、object、注解类\n    CLASS,\n    // 注解类\n    ANNOTATION_CLASS,\n    // 泛型参数\n    TYPE_PARAMETER,\n    // 属性\n    PROPERTY,\n    // 字段、幕后字段\n    FIELD,\n    // 局部变量\n    LOCAL_VARIABLE,\n    // 函数参数\n    VALUE_PARAMETER,\n    // 构造器\n    CONSTRUCTOR,\n    // 函数\n    FUNCTION,\n    // 属性的getter\n    PROPERTY_GETTER,\n    // 属性的setter\n    PROPERTY_SETTER,\n    // 类型\n    TYPE,\n    // 表达式\n    EXPRESSION,\n    // 文件\n    FILE,\n    // 类型别名\n    TYPEALIAS\n}\n\npublic enum class AnnotationRetention {\n    // 注解只存在于源代码，编译后不可见\n    SOURCE,\n    // 注解编译后可见，运行时不可见\n    BINARY,\n    // 编译后可见，运行时可见\n    RUNTIME\n}\n</code></pre><p>在这段代码的注释当中，我详细解释了Target和Retention的取值，以及它们各自代表的意义。现在我们就可以回过头，来看看我们定义的“@Deprecated”到底是什么含义。</p><p>通过@Target的取值，我们可以看到，@Deprecated只能作用于这些地方：类、 函数、 属性、注解类、构造器、属性getter、属性setter、类型别名。此外，@Deprecated这个类当中还包含了几个成员：message代表了废弃的提示信息；replaceWith代表了应该用什么来替代废弃的部分；level代表警告的程度，分别是WARNING、ERROR、HIDDEN。</p><p>OK，现在我们已经知道如何定义注解了，接下来看看如何用它。我们仍然以@Deprecated注解为例。</p><h3>注解的使用</h3><p>假设现在我们要开发一个计算器，第一个版本的Calculator代码出现了问题，然后这个问题在CalculatorV3当中修复了。这时候，我们希望所有的调用方都将Calculator改为CalculatorV3。这种情况，@Deprecated这个注解就恰好符合我们的需求。</p><pre><code class=\"language-plain\">@Deprecated(\n    message = \"Use CalculatorV3 instead.\",\n    replaceWith = ReplaceWith(\"CalculatorV3\"),\n    level = DeprecationLevel.ERROR\n)\nclass Calculator {\n    // 错误逻辑\n    fun add(a: Int, b: Int): Int = a - b\n}\n\nclass CalculatorV3 {\n    // 正确逻辑\n    fun add(a: Int, b: Int): Int = a + b\n}\n</code></pre><p>在上面的代码中，我们使用@Deprecated修饰了Calculator这个类。message代表了报错的提示信息；replaceWith代表了正确的解决方案；DeprecationLevel.ERROR则代表了IDE会把这个问题当作是错误的来看待。</p><p>现在，我们再来看看@Deprecated的实际效果：</p><p><img src=\"https://static001.geekbang.org/resource/image/62/89/6212fddyy950855b67c6f267c5351e89.gif?wh=2102x1754\" alt=\"图片\"></p><p>可以看到，当我们在代码当中使用了Calculator的时候，IDE会报错，鼠标挪到报错处后，IDE会显示message当中的内容“Use CalculatorV3 instead.”。另外，IDE还会提供一个快速修复的选项“Replace with CalculatorV3”，只要我们点击那个选项，我们的Calculator就会被直接替换成CalculatorV3，从而达到修复错误的目的。</p><p>还有，由于我们使用的level是DeprecationLevel.ERROR，所以IDE会直接报错。而如果我们使用的是DeprecationLevel.WARNING，IDE就只会提示一个警告，而不是错误了。</p><p>好了，到这里，我们就了解了注解要如何定义和使用。其实啊，只要我们真正理解了Kotlin的注解到底是什么东西，前面的这些注解的语法是很容易就能记住的。不过，Kotlin注解在使用的时候，还有一个细节需要注意，那就是注解的<strong>精确使用目标</strong>。</p><p>我们看一个具体的例子，比如<a href=\"https://github.com/google/dagger\">Dagger</a>当中的@Inject注解：</p><pre><code class=\"language-plain\">object Singleton {\n//    ①\n//    ↓\n    @set:Inject\n    lateinit var person: Person\n//     ↑\n//     ②\n}\n</code></pre><p>这段代码，是一个简单的Dagger使用场景。如果你不熟悉Dagger，那也没关系，你只需要关注一下上面的两个注释。</p><ul>\n<li><strong>注释①</strong>：如果去掉set这个标记，直接使用@Inject这个注解，我们的程序将无法正常工作。这是因为Kotlin当中的一个var修饰的属性，它会有多种含义：这个属性背后的字段（field）、这个属性对应的setter、还有这个属性对应的getter，在没有明确标注出来要用哪个的时候，@Inject根本不知道该如何决定。因此，这里的“@set:Inject”的作用，就是明确标记出注解的精确使用目标（Use-site targets）。</li>\n<li><strong>注释②</strong>：如果没有lateinit这个关键字，person这个属性是必须要有初始值的，要么直接赋值，要么在构造函数当中被赋值。因为如果它不被初始化，person这个属性将为空，而这个就和它的类型“不可为空的Person类型”冲突了。而加上lateinit修饰的属性，即使它是不可为空的，编译器也会允许它无初始值。但当我们需要依赖注入的时候，常常需要与lateinit结合使用。</li>\n</ul><p>实际上，注解的精确使用目标，一般是和注解一起使用的，在上面的例子当中，set就是和@Inject一起使用的。而除了set以外，Kotlin当中还有其他的使用目标：</p><ul>\n<li>file，作用于文件；</li>\n<li>property，作用于属性；</li>\n<li>field，作用于字段；</li>\n<li>get，作用于属性getter；</li>\n<li>set，作用于属性setter；</li>\n<li>receiver，作用于扩展的接受者参数；</li>\n<li>param，作用于构造函数参数；</li>\n<li>setparam，作用于函数参数；</li>\n<li>delegate，作用于委托字段。</li>\n</ul><p>好，理解了注解这个特性之后，我们再来看看Kotlin的反射。</p><h2>认识反射</h2><p>反射，是Kotlin当中另一个比较抽象的概念。如果说<strong>注解是最熟悉的陌生人</strong>，那<strong>反射就单纯只是个陌生人</strong>了。因为，我们很少会在平时的业务开发当中直接用到反射。但是，在架构设计的时候，反射却可以极大地提升架构的灵活性。很多热门的开源库，也都喜欢用反射来做一些不同寻常的事情。因此，反射也是极其重要的一个语法特性。</p><p>所有的计算机程序其实都是服务于真实世界，用来解决实际问题的。所以，其实我们也通过一些真实世界的例子来理解反射的本质。</p><p><img src=\"https://static001.geekbang.org/resource/image/81/3e/81b9c3253cce6a4b7a89cd44yyb21c3e.png?wh=1920x1280\" alt=\"图片\"></p><p>古人云：吾日三省吾身，指的是人的自我反省能力。<strong>反射，则是程序自我反省的能力。</strong>人的自我反省的能力，跟程序的反射，它们之间有许多相似之处。</p><ul>\n<li>人类可以<strong>反省自己当前的状态</strong>，比如说，我们随时可以知道自己是不是困了。而在Kotlin当中，程序可以通过反射来检查代码自身的状态，比如说，判断某个变量，它是不是可变的。</li>\n<li>另外，人类反省自己的状态以后，还可以<strong>主动改变自己的状态</strong>。比如说，困了就休息一会儿、饿了就吃饭、渴了就喝点水。而在Kotlin当中，我们可以在运行时，用反射来查看变量的值是否符合预期，如果不符合预期，我们就可以动态修改这个变量的值，即使这个变量是private的甚至是final的。</li>\n<li>还有，人类可以<strong>根据状态作出不同的决策</strong>。比如说，上班的路上，如果快迟到了，我们就会走快点，如果时间很充足，就可以走慢一点。而在程序世界里，<a href=\"https://github.com/google/gson/blob/master/UserGuide.md\">JSON解析</a>经常会用到@SerializedName这个注解，如果属性有@SerializedName修饰的话，它就以指定的名称为准，如果没有，那就直接使用属性的名称来解析。</li>\n</ul><p>所以，总的来看，Kotlin反射具备这三个特质：</p><ul>\n<li><strong>感知</strong>程序的状态，包含程序的运行状态，还有源代码结构；</li>\n<li><strong>修改</strong>程序的状态；</li>\n<li>根据程序的状态，<strong>调整</strong>自身的决策行为。</li>\n</ul><h3>反射的应用</h3><p>在Kotlin当中，反射库并没有直接集成到标准库当中。这是为了方便一些对程序安装包敏感的应用，可以根据实际需求来选择是否要用Kotlin反射。比如，在Android开发当中，我们对安装包体积就十分敏感，如果没有反射的需求，就完全不需要多引入这个依赖。</p><p>而对应的，如果我们需要用到反射，就必须要引入这个依赖：</p><pre><code class=\"language-groovy\">implementation \"org.jetbrains.kotlin:kotlin-reflect\"\n</code></pre><p>前面我们刚了解过Kotlin反射的三个特质，那么在这里，我们就用代码来探索下这三种特质。<br>\n在正常情况下，我们写出来的程序，其实也可以感知自身部分的状态。比如，我们前面课程中写的计算器程序，还有词频统计程序，本质上都是对输入数据状态的感知。不过，它们感知的状态十分有限。</p><p>假设，现在有一个待实现的函数readMembers。这个函数的参数obj可能是任何的类型，我们需要读取obj当中所有的成员属性的名称和值，那么具体该怎么做呢？</p><pre><code class=\"language-plain\">fun main() {\n    val student = Student(\"Tom\", 99.5, 170)\n    val school = School(\"PKU\", \"Beijing...\")\n\n    readMembers(student)\n    readMembers(school)\n}\n\nfun readMembers(obj: Any) {\n    // 读取obj的所有成员属性的名称和值\n}\n\ndata class Student(\n    val name: String,\n    val score: Double,\n    val height: Int\n)\n\ndata class School(\n    val name: String,\n    var address: String\n)\n\n// 要求readMembers函数能够输出以下内容：\n\nStudent.height=170\nStudent.name=Tom\nStudent.score=99.5\nSchool.address=Beijing...\nSchool.name=PKU\n</code></pre><p>从上面的代码，我们可以看到，readMembers()这个函数无法提前知道参数是什么类型，但是，在这个函数当中，我们还是要能够准确找到obj的所有成员属性，然后输出它们的名称和值。<br>\n对于这样的问题，也许你会第一时间想到用when表达式，写出类似这样的代码：</p><pre><code class=\"language-plain\">fun readMembers(obj: Any) {\n    when(obj) {\n        is Student -&gt; { /*...*/ }\n        is School -&gt; { /*...*/}\n        else -&gt; { /*...*/}\n    }\n}\n</code></pre><p>但是，在这个例子里，我们是只有Student、School这两种情况，而在实际情况下，obj可能的类型是成千上万的，我们根本无法用when的方式提前硬编码进行预测。比如你可以再看看下面这段示例：</p><pre><code class=\"language-plain\">fun readMembers(obj: Any) {\n    when(obj) {\n        is Student -&gt; { /*...*/ }\n        is School -&gt; { /*...*/}\n        // 硬编码的话，这里要写成千上万个逻辑分支，根本不可能做到\n        else -&gt; { /*...*/}\n    }\n}\n</code></pre><p>可见，即使我们有心想要写上万个逻辑分支，那当中的代码量也是不可想象的。因此，对于类似这样的问题，我们就可以考虑使用反射了。</p><pre><code class=\"language-plain\">fun readMembers(obj: Any) {\n    obj::class.memberProperties.forEach {\n        println(\"${obj::class.simpleName}.${it.name}=${it.getter.call(obj)}\")\n    }\n}\n</code></pre><p>看，通过反射，简单的几行代码就搞定了这个需求。如果你是第一次接触反射，可能会觉得上面的代码有点难懂，我来带你分析一下。</p><p>首先，是<strong>obj::class</strong>，这是Kotlin反射的语法，我们叫做<strong>类引用</strong>，通过这样的语法，我们就可以读取一个变量的“类型信息”，并且就能拿到这个变量的类型，它的类型是KClass。</p><pre><code class=\"language-plain\">public actual interface KClass&lt;T : Any&gt; : KDeclarationContainer, KAnnotatedElement, KClassifier {\n\n    public actual val simpleName: String?\n\n    public actual val qualifiedName: String?\n\n    override val members: Collection&lt;KCallable&lt;*&gt;&gt;\n    // 省略部分代码\n}\n</code></pre><p>这个KClass其实就代表了一个Kotlin类，通过obj::class，我们就可以拿到这个类型的所有信息，比如说，类的名称“obj::class.simpleName”。而如果要获取类的所有成员属性，我们访问它的扩展属性memberProperties就可以了。</p><pre><code class=\"language-plain\">val &lt;T : Any&gt; KClass&lt;T&gt;.memberProperties: Collection&lt;KProperty1&lt;T, *&gt;&gt;\n    get() = (this as KClassImpl&lt;T&gt;).data().allNonStaticMembers.filter { it.isNotExtension &amp;&amp; it is KProperty1&lt;*, *&gt; } as Collection&lt;KProperty1&lt;T, *&gt;&gt;\n</code></pre><p>在拿到所有的成员属性以后，我们可以通过<strong>forEach</strong>遍历所有的属性，它的类型是KProperty1，同时也是KCallable的子类，我们通过调用属性的getter.call()，就可以拿到obj属性的值了。</p><p>这样，到目前为止，我们的程序就已经可以感知到自身的状态了，接下来我们来尝试修改自身的状态，这是反射的第二个特质。</p><p>具体需求是这样的：如果传入的参数当中，存在String类型的address变量，我们就将其改为China。</p><pre><code class=\"language-plain\">fun main() {\n    val student = Student(\"Tom\", 99.5, 170)\n    val school = School(\"PKU\", \"Beijing...\")\n\n    readMembers(student)\n    readMembers(school)\n\n    // 修改其中的address属性\n    modifyAddressMember(school)\n\n    readMembers(school)\n    readMembers(student)\n}\n\nfun modifyAddressMember(obj: Any) {\n    obj::class.memberProperties.forEach {\n        if (it.name == \"address\" &amp;&amp; // ①\n            it is KMutableProperty1 &amp;&amp; // ②\n            it.setter.parameters.size == 2 &amp;&amp; // ③\n            it.getter.returnType.classifier == String::class // ④\n        ) {\n            // ⑤\n            it.setter.call(obj, \"China\")\n            println(\"====Address changed.====\")\n        }\n    }\n}\n\n// 运行结果：\nStudent.height=170\nStudent.name=Tom\nStudent.score=99.5\n// 注意这里\nSchool.address=Beijing...\nSchool.name=PKU\n====Address changed.====\n// 注意这里\nSchool.address=China\nSchool.name=PKU\nStudent.height=170\nStudent.name=Tom\nStudent.score=99.5\n</code></pre><p>从上面的代码中，我们可以看到，当我们运行了modifyAddressMember(school)这行代码以后，反射代码就会检查传入的变量当中，是否存在String类型的address，如果存在，就会将它的值修改为“China”。</p><p>这里你可以关注下我在其中标出来的四个注释，它们就代表了关键的逻辑：</p><ul>\n<li>注释①，判断属性的名称是否为address，如果不是，则跳过；</li>\n<li>注释②，判断属性是否可变，在我们的例子当中address是用var修饰的，因此它的类型是KMutableProperty1；</li>\n<li>注释③，我们在后面要调用属性的setter，所以我们要先判断setter的参数是否符合预期，这里setter的参数个数应该是2，第一个参数是obj自身，第二个是实际的值；</li>\n<li>注释④，根据属性的getter的返回值类型returnType，来判断属性的类型是不是String类型；</li>\n<li>注释⑤，调用属性的setter方法，传入obj，还有“China”，来完成属性的赋值。</li>\n</ul><p>好，到这里，我们就已经了解了反射的两种特质，分别是感知程序的状态和修改程序的状态。现在只剩下第三种，根据程序状态作出不同决策。这个其实非常容易做到。</p><p>假如在前面的例子的基础上，我们想要增加一个功能：如果传入的参数没有符合需求的address属性，我们就输出一行错误日志。这其实也就代表了根据程序的状态，作出不同的行为。比如，我们可以看看下面这段示例，其中的else分支就是我们的决策行为“输出错误日志”：</p><pre><code class=\"language-plain\">fun modifyAddressMember(obj: Any) {\n    obj::class.memberProperties.forEach {\n        if (it.name == \"address\" &amp;&amp;\n            it is KMutableProperty1 &amp;&amp;\n            it.getter.returnType.classifier == String::class\n        ) {\n            it.setter.call(obj, \"China\")\n            println(\"====Address changed.====\")\n        } else {\n            // 差别在这里\n            println(\"====Wrong type.====\")\n        }\n    }\n}\n\n// 输出结果：\nStudent.height=170\nStudent.name=Tom\nStudent.score=99.5\nSchool.address=Beijing...\nSchool.name=PKU\n====Address changed.====\n====Wrong type.====  // 差别在这里\nSchool.address=China\nSchool.name=PKU\nStudent.height=170\nStudent.name=Tom\nStudent.score=99.5\n</code></pre><p>在前面的几个案例当中，我们用到了Kotlin反射的几个关键的反射Api和类：KClass、KCallable、KParameter、KType。现在，我们来进一步看看它们的关键成员。</p><p><strong>KClass代表了一个Kotlin的类，下面是它的重要成员：</strong></p><ul>\n<li>simpleName，类的名称，对于匿名内部类，则为null；</li>\n<li>qualifiedName，完整的类名；</li>\n<li>members，所有成员属性和方法，类型是<code>Collection&lt;KCallable&lt;*&gt;&gt;</code>；</li>\n<li>constructors，类的所有构造函数，类型是<code>Collection&lt;KFunction&lt;T&gt;&gt;&gt;</code>；</li>\n<li>nestedClasses，类的所有嵌套类，类型是<code>Collection&lt;KClass&lt;*&gt;&gt;</code>；</li>\n<li>visibility，类的可见性，类型是<code>KVisibility?</code>，分别是这几种情况，PUBLIC、PROTECTED、INTERNAL、PRIVATE；</li>\n<li>isFinal，是不是final；</li>\n<li>isOpen，是不是open；</li>\n<li>isAbstract，是不是抽象的；</li>\n<li>isSealed，是不是密封的；</li>\n<li>isData，是不是数据类；</li>\n<li>isInner，是不是内部类；</li>\n<li>isCompanion，是不是伴生对象；</li>\n<li>isFun，是不是函数式接口；</li>\n<li>isValue，是不是Value Class。</li>\n</ul><p><strong>KCallable代表了Kotlin当中的所有可调用的元素，比如函数、属性、甚至是构造函数。下面是KCallable的重要成员：</strong></p><ul>\n<li>name，名称，这个很好理解，属性和函数都有名称；</li>\n<li>parameters，所有的参数，类型是<code>List&lt;KParameter&gt;</code>，指的是调用这个元素所需的所有参数；</li>\n<li>returnType，返回值类型，类型是KType；</li>\n<li>typeParameters，所有的类型参数(比如泛型)，类型是<code>List&lt;KTypeParameter&gt;</code>；</li>\n<li>call()，KCallable对应的调用方法，在前面的例子中，我们就调用过setter、getter的call()方法。</li>\n<li>visibility，可见性；</li>\n<li>isSuspend，是不是挂起函数。</li>\n</ul><p><strong>KParameter，代表了<code>KCallable</code>当中的参数，它的重要成员如下：</strong></p><ul>\n<li>index，参数的位置，下标从0开始；</li>\n<li>name，参数的名称，源码当中参数的名称；</li>\n<li>type，参数的类型，类型是KType；</li>\n<li>kind，参数的种类，对应三种情况：INSTANCE是对象实例、EXTENSION_RECEIVER是扩展接受者、VALUE是实际的参数值。</li>\n</ul><p><strong>KType，代表了Kotlin当中的类型，它重要的成员如下：</strong></p><ul>\n<li>classifier，类型对应的Kotlin类，即KClass，我们前面的例子中，就是用的classifier == String::class来判断它是不是String类型的；</li>\n<li>arguments，类型的类型参数，看起来好像有点绕，其实它就是这个类型的泛型参数；</li>\n<li>isMarkedNullable，是否在源代码中标记为可空类型，即这个类型的后面有没有“?”修饰。</li>\n</ul><p>所以，归根结底，<strong>反射，其实就是Kotlin为我们开发者提供的一个工具</strong>，通过这个工具，我们可以让程序在运行的时候“自我反省”。这里的“自我反省”一共有三种情况，其实跟我们的现实生活类似。</p><ul>\n<li>第一种情况，程序在运行的时候，可以通过反射来查看自身的状态。</li>\n<li>第二种情况，程序在运行的时候，可以修改自身的状态。</li>\n<li>第三种情况，程序在运行的时候，可以根据自身的状态调整自身的行为。</li>\n</ul><h2>小结</h2><p>好了，让我们来做个简单的总结吧。</p><p>注解和反射，是Kotlin当中十分重要的特性，它们可以极大地提升程序的灵活性。那么，在使用注解和反射的时候，你要知道，<strong>注解，其实就是“程序代码的一种补充”，而反射，其实就是“程序代码自我反省的一种方式”。</strong></p><p>在这节课当中，我们已经分别见识了注解与反射的威力。那么，如果我们将它们两者结合起来使用会产生什么样的反应呢？我们将在下节课当中揭晓！</p><h2>思考题</h2><p>这节课，我们学习了Kotlin的注解、反射，其实Java当中也是有注解与反射的。那么你知道Kotlin和Java之间有哪些异同点吗？欢迎给我留言，我们一起交流探讨。</p><p>好了，我们下节课再见吧！</p>","comments":[{"had_liked":false,"id":332434,"user_name":"神秘嘉Bin","can_delete":false,"product_type":"c1","uid":2879116,"ip_address":"","ucode":"6045F09320E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ee/8c/06f3aef0.jpg","comment_is_top":false,"comment_ctime":1643249856,"is_pvip":false,"replies":[{"id":"121443","content":"理解很到位。赞~","user_name":"作者回复","comment_id":332434,"uid":"1180670","ip_address":"","utype":1,"ctime":1643253568,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10233184448","product_id":100103401,"comment_content":"kotlin的反射看起来更像是根据&quot;面向对象&quot;思想对Kotlin所需的所有属性进行的一种封装","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548548,"discussion_content":"理解很到位。赞~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643253568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339327,"user_name":"H.ZWei","can_delete":false,"product_type":"c1","uid":1329072,"ip_address":"","ucode":"48FFADE574C327","user_header":"https://static001.geekbang.org/account/avatar/00/14/47/b0/8c301d00.jpg","comment_is_top":false,"comment_ctime":1648037232,"is_pvip":false,"replies":[{"id":"124295","content":"是存在一些差异，相信Kotlin以后会继续优化的。","user_name":"作者回复","comment_id":339327,"uid":"1180670","ip_address":"","utype":1,"ctime":1648521261,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5943004528","product_id":100103401,"comment_content":"Kotlin反射的性能比Java反射差很多","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558904,"discussion_content":"是存在一些差异，相信Kotlin以后会继续优化的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648521261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333143,"user_name":"苍王","can_delete":false,"product_type":"c1","uid":1621978,"ip_address":"","ucode":"92F4A7513AF228","user_header":"https://static001.geekbang.org/account/avatar/00/18/bf/da/fede41ea.jpg","comment_is_top":false,"comment_ctime":1644127498,"is_pvip":true,"replies":[{"id":"121773","content":"没错，Java反射其实是更接近底层，但Java反射无法访问Kotlin独有的特性，比如“判断一个类是不是数据类”，这一点我们要借助Kotlin反射才能实现。","user_name":"作者回复","comment_id":333143,"uid":"1180670","ip_address":"","utype":1,"ctime":1644250655,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5939094794","product_id":100103401,"comment_content":"kotlin反射是针对kotlin语法特性重新封装的api，感觉如非必要直接针对kotlin反射直接使用java反射就好了，特别是像android开发这样framework层还是java代码这样，至于性能不清楚有什么差异","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549838,"discussion_content":"没错，Java反射其实是更接近底层，但Java反射无法访问Kotlin独有的特性，比如“判断一个类是不是数据类”，这一点我们要借助Kotlin反射才能实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644250655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356237,"user_name":"eden","can_delete":false,"product_type":"c1","uid":1220656,"ip_address":"广东","ucode":"8A5620A5C4BDB8","user_header":"https://static001.geekbang.org/account/avatar/00/12/a0/30/5a7247eb.jpg","comment_is_top":false,"comment_ctime":1662081691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662081691","product_id":100103401,"comment_content":"没有一个可以跑起来的完整例子，看了几遍不知道Kotlin的 反射怎么实现。。。 ","like_count":0},{"had_liked":false,"id":335617,"user_name":"$Kotlin","can_delete":false,"product_type":"c1","uid":2148188,"ip_address":"","ucode":"098E9C8F60D865","user_header":"https://static001.geekbang.org/account/avatar/00/20/c7/5c/94cb3a1a.jpg","comment_is_top":false,"comment_ctime":1645605412,"is_pvip":false,"replies":[{"id":"122725","content":"注解的更多应用，在12节有提到，你可以去看看。<br><br>至于Deprecated，“怎么能实现编译器提示文案的功能，replaceWith怎么能告知编译器”这其实是Kotlin官方实现的。","user_name":"作者回复","comment_id":335617,"uid":"1180670","ip_address":"","utype":1,"ctime":1645747217,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1645605412","product_id":100103401,"comment_content":"老师，注解Deprecated这部分，我看到了注解的定义和用法，还有讲解了元注解，但是没有看到具体的实现逻辑。<br>比如说message属性怎么能实现编译器提示文案的功能，replaceWith怎么能告知编译器使用哪个替换方法。<br>是不是说明我们只能使用已经定义好的注解，无法新增自定义的注解？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553132,"discussion_content":"注解的更多应用，在12节有提到，你可以去看看。\n\n至于Deprecated，“怎么能实现编译器提示文案的功能，replaceWith怎么能告知编译器”这其实是Kotlin官方实现的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645747217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334992,"user_name":"白乾涛","can_delete":false,"product_type":"c1","uid":1339841,"ip_address":"","ucode":"0C704B0B90C8D7","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","comment_is_top":false,"comment_ctime":1645243605,"is_pvip":false,"replies":[{"id":"122412","content":"其实就在后面哈：file，作用于文件；property，作用于属性；field，作用于字段；get，作用于属性 getter；set，作用于属性 setter；receiver，作用于扩展的接受者参数；param，作用于构造函数参数；setparam，作用于函数参数；delegate，作用于委托字段。<br><br>这是Kotlin里面独有的，目的是为了让target更加精确。","user_name":"作者回复","comment_id":334992,"uid":"1180670","ip_address":"","utype":1,"ctime":1645370364,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1645243605","product_id":100103401,"comment_content":"@set:Inject<br>为啥这里要用 set 而不用 enum AnnotationTarget 中定义的枚举值？两者有什么区别？<br><br>文稿中说：而除了 set 以外，Kotlin 当中还有其他的使用目标...<br><br>这些目标又是哪里定义的？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552271,"discussion_content":"其实就在后面哈：file，作用于文件；property，作用于属性；field，作用于字段；get，作用于属性 getter；set，作用于属性 setter；receiver，作用于扩展的接受者参数；param，作用于构造函数参数；setparam，作用于函数参数；delegate，作用于委托字段。\n\n这是Kotlin里面独有的，目的是为了让target更加精确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645370364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560028,"discussion_content":"AnnotationTarget 里面定义的是 target，set 相当于让注解更精确的修饰目标元素","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649133497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333654,"user_name":"追梦小乐","can_delete":false,"product_type":"c1","uid":1035507,"ip_address":"","ucode":"82AB8A7F98389D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/f3/5e4b0315.jpg","comment_is_top":false,"comment_ctime":1644460657,"is_pvip":false,"replies":[{"id":"121889","content":"问题1：我按照你的步骤试了一下，没有出现问题。你可以尝试从两个方面去排查：一个是导包是否出错，还有就是是否出现重名的冲突。IDE的错误提示其实是很人性化的，大部分情况下都可以根据错误信息来排查的。<br><br>问题2：这里不能从Java角度来看，这是Kotlin独有的语法。这其实就是一个知识点，调用setter的时候，第一个参数永远是对象本身。","user_name":"作者回复","comment_id":333654,"uid":"1180670","ip_address":"","utype":1,"ctime":1644462516,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1644460657","product_id":100103401,"comment_content":"老师，看完有两个问题不太理解：<br>1、 将类 Calculator  CalculatorV3  写在同一个文件中，然后在这个文件中main方法中使用Calculator就会提示报错，但是把两个类单独分类出去，在main方法中调用Calculator没发现提示报错，这个是为什么？<br>2、反射部分的  it.setter.parameters.size == 2, 这里有点不太理解，如果是转成java方法，set方法也就只有一个参数，打印出来看到这两个是  ins tance parameter....  和   parameter  #1  null.......","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550271,"discussion_content":"问题1：我按照你的步骤试了一下，没有出现问题。你可以尝试从两个方面去排查：一个是导包是否出错，还有就是是否出现重名的冲突。IDE的错误提示其实是很人性化的，大部分情况下都可以根据错误信息来排查的。\n\n问题2：这里不能从Java角度来看，这是Kotlin独有的语法。这其实就是一个知识点，调用setter的时候，第一个参数永远是对象本身。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644462516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333021,"user_name":"开飞机的老舒克","can_delete":false,"product_type":"c1","uid":1231517,"ip_address":"","ucode":"7DD15B40DCF6A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/ca/9d/8646083b.jpg","comment_is_top":false,"comment_ctime":1643966617,"is_pvip":true,"replies":[{"id":"121690","content":"原本我也有打算介绍：反射的原理还有性能问题，不过由于涉及到JVM相关的细节，很容易就偏题，毕竟大家都是冲着Kotlin和协程来的，所以也就没有继续深入，如果后面有机会，我会用其他方式，比如博客，直播的形式来介绍一些更深入的JVM知识。","user_name":"作者回复","comment_id":333021,"uid":"1180670","ip_address":"","utype":1,"ctime":1643984529,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1643966617","product_id":100103401,"comment_content":"希望老师多一些深入的讲解，例如反射的原理，性能方面的影响等。感谢🙏","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549437,"discussion_content":"原本我也有打算介绍：反射的原理还有性能问题，不过由于涉及到JVM相关的细节，很容易就偏题，毕竟大家都是冲着Kotlin和协程来的，所以也就没有继续深入，如果后面有机会，我会用其他方式，比如博客，直播的形式来介绍一些更深入的JVM知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643984529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332437,"user_name":"只为你停留","can_delete":false,"product_type":"c1","uid":2577082,"ip_address":"","ucode":"DEDF92E0EB0426","user_header":"https://static001.geekbang.org/account/avatar/00/27/52/ba/25f8f998.jpg","comment_is_top":false,"comment_ctime":1643250713,"is_pvip":false,"replies":[{"id":"121442","content":"注解这部分的内容，其实重在实践，下节课其实就有对应的实战，你可以去看看，在那里，你可以看到注解的实际应用场景。<br><br>至于博客什么的其实没太大必要，在真正知道注解是什么以后，能够深刻理解Target、Retention之类的概念就足够了。","user_name":"作者回复","comment_id":332437,"uid":"1180670","ip_address":"","utype":1,"ctime":1643253539,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1643250713","product_id":100103401,"comment_content":"有没有写的好又详细的注解博客推荐","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548547,"discussion_content":"注解这部分的内容，其实重在实践，下节课其实就有对应的实战，你可以去看看，在那里，你可以看到注解的实际应用场景。\n\n至于博客什么的其实没太大必要，在真正知道注解是什么以后，能够深刻理解Target、Retention之类的概念就足够了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643253539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2577082,"avatar":"https://static001.geekbang.org/account/avatar/00/27/52/ba/25f8f998.jpg","nickname":"只为你停留","note":"","ucode":"DEDF92E0EB0426","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":548555,"discussion_content":"注解这一块我觉的挺重要，就是不知道怎么用，所以就找不到应用场景，多谢指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643254079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":548547,"ip_address":""},"score":548555,"extra":""}]}]},{"had_liked":false,"id":331829,"user_name":"辉哥","can_delete":false,"product_type":"c1","uid":1236983,"ip_address":"","ucode":"21A65F4EE6CD04","user_header":"","comment_is_top":false,"comment_ctime":1642811037,"is_pvip":false,"replies":[{"id":"121305","content":"嗯，这也是一个角度。","user_name":"作者回复","comment_id":331829,"uid":"1180670","ip_address":"","utype":1,"ctime":1642989978,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1642811037","product_id":100103401,"comment_content":"kotlin的反射性能怎么样，和Java反射相比","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547991,"discussion_content":"嗯，这也是一个角度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642989978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1090798,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","nickname":"魏全运","note":"","ucode":"3FED702C724E2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547845,"discussion_content":"kotlin编译以后也是class文件，跟java一样，所以反射的性能感觉不会有太大差别，可以写个demo试一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642901179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331690,"user_name":"魏全运","can_delete":false,"product_type":"c1","uid":1090798,"ip_address":"","ucode":"3FED702C724E2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","comment_is_top":false,"comment_ctime":1642726824,"is_pvip":false,"replies":[{"id":"121178","content":"不错。不同点的地方还有待挖掘哈~","user_name":"作者回复","comment_id":331690,"uid":"1180670","ip_address":"","utype":1,"ctime":1642756771,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1642726824","product_id":100103401,"comment_content":"kotlin 和java 反射的异同点：<br>相同点：都是在运行时获取或修改对象的属性或行为，获取类的信息，功能大同小异。<br>不同点：kotlin中反射操作更加便利。用的不多，也许很多优势还没挖掘出来","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547582,"discussion_content":"不错。不同点的地方还有待挖掘哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642756771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}