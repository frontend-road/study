{"id":73790,"title":"52 | 答疑：在问题中解决问题，在思考中产生思考","content":"<p>在本篇文章中，我将会对本专栏部分文章最后的思考题，进行一次集中的汇总和答疑。希望能够帮助你更好地理解和掌握 Kubernetes 项目。</p><p><span class=\"orange\">问题1：</span>你是否知道如何修复容器中的top指令以及/proc文件系统中的信息呢？（提示：lxcfs）</p><p>其实，这个问题的答案在提示里其实已经给出了，即 lxcfs 方案。通过lxcfs，你可以把宿主机的 /var/lib/lxcfs/proc 文件系统挂载到Docker容器的/proc目录下。使得容器中进程读取相应文件内容时，实际上会从容器对应的Cgroups中读取正确的资源限制。 从而得到正确的top 命令的返回值。</p><blockquote>\n<p>问题选自第6篇文章<a href=\"https://time.geekbang.org/column/article/14653\">《白话容器基础（二）：隔离与限制》</a>。</p>\n</blockquote><p><span class=\"orange\">问题2：</span>既然容器的rootfs（比如，Ubuntu镜像），是以只读方式挂载的，那么又如何在容器里修改Ubuntu镜像的内容呢？（提示：Copy-on-Write）</p><p>这个问题的答案也同样出现在了提示里。</p><p>简单地说，修改一个镜像里的文件的时候，联合文件系统首先会从上到下在各个层中查找有没有目标文件。如果找到，就把这个文件复制到可读写层进行修改。这个修改的结果会屏蔽掉下层的文件，这种方式就被称为copy-on-write。</p><!-- [[[read_end]]] --><blockquote>\n<p>问题选自第7篇文章<a href=\"https://time.geekbang.org/column/article/17921\">《白话容器基础（三）：深入理解容器镜像》</a>。</p>\n</blockquote><p><span class=\"orange\">问题3：</span>你在查看Docker容器的Namespace时，是否注意到有一个叫cgroup的Namespace？它是Linux 4.6之后新增加的一个Namespace，你知道它的作用吗？</p><p>Linux 内核从4.6开始，支持了一个新的 Namespace叫作：Cgroup Namespace。 我们知道，正常情况下，在一个容器里查看/proc/$PID/cgroup，是会看到整个宿主机的cgroup信息的。而有了Cgroup Namespace后，每个容器里的进程都会有自己Cgroup Namespace，从而获得一个属于自己的 Cgroups 文件目录视图。也就是说，Cgroups 文件系统也可以被 Namespace 隔离起来了。</p><blockquote>\n<p>问题选自第8篇文章<a href=\"https://time.geekbang.org/column/article/18119\">《 白话容器基础（四）：重新认识Docker容器》</a>。</p>\n</blockquote><p><span class=\"orange\">问题4：</span>你能否说出，Kubernetes使用的这个“控制器模式”，跟我们平常所说的“事件驱动”，有什么区别和联系吗？</p><p>这里“控制器模式”和“事件驱动”最关键的区别在于：</p><ul>\n<li>\n<p>对于控制器来说，被监听对象的变化是一个持续的信号，比如变成 ADD 状态。只要这个状态没变化，那么此后无论任何时候控制器再去查询对象的状态，都应该是 ADD。</p>\n</li>\n<li>\n<p>而对于事件驱动来说，它只会在 ADD 事件发生的时候发出一个事件。如果控制器错过了这个事件，那么它就有可能再也没办法知道 ADD 这个事件的发生了。</p>\n</li>\n</ul><blockquote>\n<p>问题选自第16篇文章<a href=\"https://time.geekbang.org/column/article/40583\">《编排其实很简单：谈谈“控制器”模型》</a>。</p>\n</blockquote><p><span class=\"orange\">问题5：</span>在实际场景中，有一些分布式应用的集群是这么工作的：当一个新节点加入到集群时，或者老节点被迁移后重建时，这个节点可以从主节点或者其他从节点那里同步到自己所需要的数据。</p><p>在这种情况下，你认为是否还有必要将这个节点Pod与它的PV进行一对一绑定呢？（提示：这个问题的答案根据不同的项目是不同的。关键在于，重建后的节点进行数据恢复和同步的时候，是不是一定需要原先它写在本地磁盘里的数据）</p><p>这个问题的答案是不需要。</p><p>像这种不依赖于 PV 保持存储状态或者不依赖于 DNS 名字保持拓扑状态的”非典型“应用的管理，都应该使用 Operator 来实现。</p><blockquote>\n<p>问题选自第19篇文章<a href=\"https://time.geekbang.org/column/article/41154\">《深入理解StatefulSet（二）：存储状态》</a>。</p>\n</blockquote><p><span class=\"orange\">问题6：</span>我在文中提到，在Kubernetes v1.11之前，DaemonSet所管理的Pod的调度过程，实际上都是由DaemonSet Controller自己而不是由调度器完成的。你能说出这其中有哪些原因吗？</p><p>这里的原因在于，默认调度器之前的功能不是很完善，比如，缺乏优先级和抢占机制。所以，它没办法保证 DaemonSet ，尤其是部署时候的系统级的、高优先级的 DaemonSet 一定会调度成功。这种情况下，就会影响到集群的部署了。</p><blockquote>\n<p>问题选自第21篇文章<a href=\"https://time.geekbang.org/column/article/41366\">《容器化守护进程的意义：DaemonSet》</a>。</p>\n</blockquote><p><span class=\"orange\">问题7：</span>在Operator的实现过程中，我们再一次用到了CRD。可是，你一定要明白，CRD并不是万能的，它有很多场景不适用，还有性能瓶颈。你能列举出一些不适用CRD的场景么？你知道造成CRD性能瓶颈的原因主要在哪里么？</p><p>CRD 目前不支持protobuf，当 API Object数量 &gt;1K，或者单个对象 &gt;1KB，或者高频请求时，CRD 的响应都会有问题。 所以，CRD 千万不能也不应该被当作数据库使用。</p><p>其实像 Kubernetes ，或者说 Etcd 本身，最佳的使用场景就是作为配置管理的依赖。此外，如果业务需求不能用 CRD 进行建模的时候，比如，需要等待 API 最终返回，或者需要检查 API 的返回值，也是不能用 CRD 的。同时，当你需要完整的 APIServer 而不是只关心 API 对象的时候，请使用 API Aggregator。</p><blockquote>\n<p>问题选自第27篇文章<a href=\"https://time.geekbang.org/column/article/42493\">《聪明的微创新：Operator工作原理解读》</a>。</p>\n</blockquote><p><span class=\"orange\">问题8：</span>正是由于需要使用“延迟绑定”这个特性，Local Persistent Volume目前还不能支持Dynamic Provisioning。你是否能说出，为什么“延迟绑定”会跟Dynamic Provisioning有冲突呢？</p><p>延迟绑定将 Volume Bind 的时机，推迟到了第一个使用该 Volume 的 Pod 到达调度器的时候。可是对于Dynamic Provisioning 来说，它是要在管理 Volume的控制循环里就为 PVC 创建 PV 然后绑定起来的，这个时间点跟Pod 被调度的时间点是不相关的。</p><blockquote>\n<p>问题选自第29篇文章<a href=\"https://time.geekbang.org/column/article/42819\">《 PV、PVC体系是不是多此一举？从本地持久化卷谈起》</a>。</p>\n</blockquote><p><span class=\"orange\">问题9：</span>请你根据编写FlexVolume和CSI插件的流程，分析一下什么时候该使用FlexVolume，什么时候应该使用CSI？</p><p>在文章中我其实已经提到，CSI 与 FlexVolume 的最大区别，在于 CSI 可以实现 Provision 阶段。所以说，对于不需要 Provision的情况 ，比如你的远程存储服务总是事先准备好或者准备起来非常简单的情况下，就可以考虑使用FlexVolume。但在生产环境下，我都会优先推荐 CSI的方案。</p><blockquote>\n<p>问题选自第31篇文章<a href=\"https://time.geekbang.org/column/article/64392\">《容器存储实践：CSI插件编写指南》</a>。</p>\n</blockquote><p><span class=\"orange\">问题10：</span>Flannel通过“隧道”机制，实现了容器之间三层网络（IP地址）的连通性。但是，根据这个机制的工作原理，你认为Flannel能保证容器二层网络（MAC地址）的连通性吗？为什么呢？</p><p>不能保证，因为“隧道”机制只能保证被封装的 IP 包可以到达目的地。而只要网络插件能满足 Kubernetes 网络的三个假设，Kubernetes 并不关心你的网络插件的实现方式是把容器二层连通的，还是三层连通的。</p><blockquote>\n<p>问题选自第33篇文章<a href=\"https://time.geekbang.org/column/article/65287\">《深入解析容器跨主机网络》</a>。</p>\n</blockquote><p><span class=\"orange\">问题11：</span>你能否能总结一下三层网络方案和“隧道模式”的异同，以及各自的优缺点？</p><p>在第35篇文章的正文里，我已经为你讲解过，隧道模式最大的特点，在于需要通过某种方式比如 UDP 或者 VXLAN 来对原始的容器间通信的网络包进行封装，然后伪装成宿主机间的网络通信来完成容器跨主通信。这个过程中就不可避免地需要封包和解封包。这两个操作的性能损耗都是非常明显的。而三层网络方案则避免了这个过程，所以性能会得到很大的提升。</p><p>不过，隧道模式的优点在于，它依赖的底层原理非常直白，内核里的实现也非常成熟和稳定。而三层网络方案，相对来说维护成本会比较高，容易碰到路由规则分发和设置出现问题的情况，并且当容器数量很多时，宿主机上的路由规则会非常复杂，难以Debug。</p><p>所以最终选择选择哪种方案，还是要看自己的具体需求。</p><blockquote>\n<p>问题选自第35篇文章<a href=\"https://time.geekbang.org/column/article/67775\">《解读Kubernetes三层网络方案》</a>。</p>\n</blockquote><p><span class=\"orange\">问题12：</span>为什么宿主机进入MemoryPressure或者DiskPressure状态后，新的Pod就不会被调度到这台宿主机上呢？</p><p>在 Kubernetes 里，实际上有一种叫作 Taint Nodes by Condition 的机制，即当</p><p>Node 本身进入异常状态的时候，比如 Condition 变成了DiskPressure。那么， Kubernetes 会通过 Controller自动给Node加上对应的 Taint，从而阻止新的 Pod 调度到这台宿主机上。</p><blockquote>\n<p>问题选自第40篇文章<a href=\"https://time.geekbang.org/column/article/69678\">《Kubernetes的资源模型与资源管理》</a>。</p>\n</blockquote><p><span class=\"orange\">问题13：</span>Kubernetes默认调度器与Mesos的“两级”调度器，有什么异同呢？</p><p>Mesos 的两级调度器的设计，是Mesos 自己充当0层调度器（Layer 0），负责统一管理整个集群的资源情况，把可用资源以 Resource Offer 的方式暴露出去；而上层的大数据框架（比如 Spark）则充当1层调度器（Layer 1），它会负责根据Layer 0发来的Resource Offer来决定把任务调度到某个具体的节点上。这样做的好处是：</p><ul>\n<li>\n<p>第一，上层大数据框架本身往往自己已经实现了调度逻辑，这样它就可以很方便地接入到 Mesos 里面；</p>\n</li>\n<li>\n<p>第二，这样的设计，使得Mesos 本身能够统一地对上层所有框架进行资源分配，资源利用率和调度效率就可以得到很好的保证了。</p>\n</li>\n</ul><p>相比之下，Kubernetes 的默认调度器实际上无论从功能还是性能上都要简单得多。这也是为什么把 Spark 这样本身就具有调度能力的框架接入到 Kubernetes 里还是比较困难的。</p><blockquote>\n<p>问题选自第41篇文章<a href=\"https://time.geekbang.org/column/article/69890\">《十字路口上的Kubernetes默认调度器》</a>。</p>\n</blockquote><p><span class=\"orange\">问题14：</span>当整个集群发生可能会影响调度结果的变化（比如，添加或者更新 Node，添加和更新 PV、Service等）时，调度器会执行一个被称为MoveAllToActiveQueue的操作，把所调度失败的 Pod 从 unscheduelableQ 移动到activeQ 里面。请问这是为什么？</p><p>一个相似的问题是，当一个已经调度成功的 Pod 被更新时，调度器则会将unschedulableQ 里所有跟这个 Pod 有 Affinity/Anti-affinity 关系的 Pod，移动到 activeQ 里面。请问这又是为什么呢？</p><p>其实，这两个问题的答案是一样的。</p><p>在正常情况下，默认调度器在调度失败后，就会把该 Pod 放到 unschedulableQ里。unschedulableQ里的 Pod 是不会出现在下个调度周期里的。但是，当集群本身发生变化时，这个 Pod 就有可能再次变成可调度的了，所以这时候调度器要把它们移动到activeQ里面，这样它们就获得了下一次调度的机会。</p><p>类似地，当原本已经调度成功的 Pod 被更新后，也有可能触发unschedulableQ里与它有Affinity 或者 Anti-Affinity 关系的 Pod 变成可调度的，所以它也需要获得“重新做人”的机会。</p><blockquote>\n<p>问题选自第43篇文章<a href=\"https://time.geekbang.org/column/article/70519\">《Kubernetes默认调度器的优先级与抢占机制》</a>。</p>\n</blockquote><p><span class=\"orange\">问题15：</span>请你思考一下，我前面讲解过的Device Plugin 为容器分配的 GPU 信息，是通过 CRI 的哪个接口传递给 dockershim，最后交给 Docker API 的呢？</p><p>既然 GPU 是Devices 信息，那当然是通过CRI 的CreateContainerRequest接口。这个接口的参数ContainerConfig里就有容器 Devices 的描述。</p><blockquote>\n<p>问题选自第46篇文章<a href=\"https://time.geekbang.org/column/article/71499\">《解读 CRI 与 容器运行时》</a>。</p>\n</blockquote><p><span class=\"orange\">问题16：</span>安全容器的意义，绝不仅仅止于安全。你可以想象一下这样一个场景：比如，你的宿主机的 Linux 内核版本是3.6，但是应用却必须要求 Linux 内核版本是4.0。这时候，你就可以把这个应用运行在一个 KataContainers 里。那么请问，你觉得使用 gVisor 是否也能提供这种能力呢？原因是什么呢？</p><p>答案是不能。gVisor 的实现里并没有一个真正的Linux Guest Kernel 在运行。所以它不能像 KataContainers 或者虚拟机那样，实现容器和宿主机不同 Kernel 甚至不同操作系统的需求。</p><p>但还是要强调一下，以gVisor 为代表的用户态 Kernel 方案是安全容器的未来，只是现在还不够完善。</p><blockquote>\n<p>问题选自第47篇文章<a href=\"https://time.geekbang.org/column/article/71606\">《绝不仅仅是安全：Kata Containers 与 gVisor》</a>。</p>\n</blockquote><p><span class=\"orange\">问题17：</span>将日志直接输出到 stdout 和 stderr，有没有什么其他的隐患或者问题呢？如何进行处理呢？</p><p>这样做有一个问题，就是日志都需要经过 Docker Daemon 的处理才会写到宿主机磁盘上，所以宿主机没办法以容器为单位进行日志文件的 Rotate。这时候，还是要考虑通过宿主机的 Agent 来对容器日志进行处理和收集的方案。</p><blockquote>\n<p>问题选自第50篇文章<a href=\"https://time.geekbang.org/column/article/73156\">《让日志无处可逃：容器日志收集与管理》</a>。</p>\n</blockquote><p><span class=\"orange\">问题18：</span>你能说出 Kubernetes 社区同 OpenStack 社区相比的不同点吗？你觉得各有哪些优缺点呢？</p><p>OpenStack 社区非常强调民主化，治理方式相对松散，这导致它在治理上没能把主线和旁线分开，政治和技术也没有隔离。这使得后期大量的低价值或者周边型的项目不断冲进 OpenStack社区，大大降低了社区的含金量，并且分散了大量的社区精力在这些价值相对不高的项目上，从而拖慢并干扰了比如 Cinder、Neutron 等核心项目的演进步伐和方向，最终使得整个社区在容器的热潮下难以掉头，不可避免地走向了下滑的态势。</p><p>相比之下，CNCF 基金会成功地帮助 Kubernetes 社区分流了低价值以及周边型项目的干扰，并且完全承接了 Marketing 的角色，使得 Kubernetes 社区在后面大量玩家涌入的时候，依然能够专注在主线的演进上。</p><p>Kubernetes社区和OpenStack社区的这个区别，是非常关键的。</p><blockquote>\n<p>问题选自第51篇文章<a href=\"https://time.geekbang.org/column/article/73477\">《谈谈Kubernetes开源社区和未来走向》</a>。</p>\n</blockquote><p>感谢你的收听，欢迎你给我留言，也欢迎分享给更多的朋友一起阅读。</p><p><img src=\"https://static001.geekbang.org/resource/image/96/25/96ef8576a26f5e6266c422c0d6519725.jpg?wh=1110*659\" alt=\"\"></p>","comments":[{"had_liked":false,"id":215727,"user_name":"Geek_10d981","can_delete":false,"product_type":"c1","uid":1807117,"ip_address":"","ucode":"AF4E774D17F7B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6GcSnUMzR0H9haiaAxssjibGLQMLAsPKonh50g9W2Iz38LcZNGH39HPaANLtovXTp1YvsINIZoH6F0iaSGuxJMXZS/132","comment_is_top":false,"comment_ctime":1589087816,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"224927387208","product_id":100015201,"comment_content":"负责的告诉各位朋友，K8S不容易理解。 我从1996-2003年在北京一个外企做UNIX，曾经给华为中兴讲UNIX课程，2004年移民，一直做技术，对UNIX CLUSTER。ORACLE RAC, WEBSPHERE ,JAVA都熟悉，我接触了AWS，感觉不复杂，AWS就是概念多，很多概念其实UNIX,ORACLE也有类似的，，，，目前我接触K8S，这个课程是比较复杂的，反复看书，动手，还要看英文原版图书，还需要 看UDEMY一些欧美的老师讲课，，，张磊讲解的课程比UNDEMY欧美老师讲解的要深入，非常不错，，，这个课程太划算了，不到20美元，我在北美购买随便一本书都是60-100美元","like_count":53,"discussions":[{"author":{"id":2254917,"avatar":"https://static001.geekbang.org/account/avatar/00/22/68/45/ddf89612.jpg","nickname":"bestgopher","note":"","ucode":"D89735C8CA9C6E","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546071,"discussion_content":"这个是真大佬。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642151027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52198,"user_name":"唐丹","can_delete":false,"product_type":"c1","uid":1204418,"ip_address":"","ucode":"B45D936E6C4744","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/c2/6d50bfdf.jpg","comment_is_top":false,"comment_ctime":1545350575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83149729199","product_id":100015201,"comment_content":"赞👍，跟了一遍，再复习两遍，不放过任何一个细节。多谢老师","like_count":19},{"had_liked":false,"id":85125,"user_name":"王天神","can_delete":false,"product_type":"c1","uid":1311149,"ip_address":"","ucode":"16384EF0E19E2A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3jUBQJMfLRQiaKpghicMot32AE70icSn1EsP7vX9t1V2qkp5oM0uXtnp5qmWlZgnXKk2mac0XdgVUQ/132","comment_is_top":false,"comment_ctime":1554985714,"is_pvip":false,"replies":[{"id":"31582","content":"多来几遍，其意自现","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1555697891,"ip_address":"","comment_id":85125,"utype":1}],"discussion_count":2,"race_medal":0,"score":"53094593266","product_id":100015201,"comment_content":"心酸，慢慢的发现自己学习放弃了，有点难懂","like_count":12,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446565,"discussion_content":"多来几遍，其意自现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555697891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1916685,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3f/0d/1e8dbb2c.jpg","nickname":"怀揣梦想的学渣","note":"","ucode":"2349B9F4F6FDE3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570582,"discussion_content":"老哥还在吗，现在继续学也是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651825519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60752,"user_name":"liyinda0000","can_delete":false,"product_type":"c1","uid":1198421,"ip_address":"","ucode":"12D5C62716DAB6","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/55/b6c9c0f4.jpg","comment_is_top":false,"comment_ctime":1547542805,"is_pvip":false,"replies":[{"id":"22072","content":"实际中我们设置了动态资源边界调整和应用画像能力来选择最合理的limit值","user_name":"作者回复","user_name_real":"Geek_6ef93d","uid":"1218095","ctime":1548054104,"ip_address":"","comment_id":60752,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31612313877","product_id":100015201,"comment_content":"您好 最近k8s的工作中有个问题 如果限制pods资源使用，比如limits内存设置1g，但如果应用程序由于内存使用的不好超出指定内存就会无限重启，查日志也不容易发现对应错误。<br>现有如下问题：<br>1）在生产环境中，使用limits是否是比较明智的方法？<br>2）个人感觉这种超出内存就杀掉进程的方法有点暴力，不知道这个算不算是个问题？新版本或将来的版本是否会有改进？<br>还望帮助指点，谢谢啦","like_count":7,"discussions":[{"author":{"id":1218095,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/2f/876085fa.jpg","nickname":"张磊 Kubernetes","note":"","ucode":"16E29BDAB1F5BC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436608,"discussion_content":"实际中我们设置了动态资源边界调整和应用画像能力来选择最合理的limit值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548054104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320935,"user_name":"陈斯佳","can_delete":false,"product_type":"c1","uid":1259323,"ip_address":"","ucode":"C236F874FC767A","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","comment_is_top":false,"comment_ctime":1636583377,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27406387153","product_id":100015201,"comment_content":"学习k8s确实感觉很不容易。今年是我学习,<br>k8s第一年，年初考下CKA证书以后马上找了一份和K8s相关的工作，现在基本的命令概念还算比较熟，但是看了张磊老师的文章后，发现自己的理解还是非常的皮毛。如果遇到一点问题，也很难找到问题的根本原因，更别提优化了。不知道这条路还需要走多久，不过好在现在还是处在K8s的红利期，真正有实际操作经验的人还不多，趁这个机会，多学，多练，一定会有所收获的！","like_count":6,"discussions":[{"author":{"id":2254917,"avatar":"https://static001.geekbang.org/account/avatar/00/22/68/45/ddf89612.jpg","nickname":"bestgopher","note":"","ucode":"D89735C8CA9C6E","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546074,"discussion_content":"cka难吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642153073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1259323,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","nickname":"陈斯佳","note":"","ucode":"C236F874FC767A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2254917,"avatar":"https://static001.geekbang.org/account/avatar/00/22/68/45/ddf89612.jpg","nickname":"bestgopher","note":"","ucode":"D89735C8CA9C6E","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":547852,"discussion_content":"如果工作上经常使用k8s就不难，因为都是实验题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642904776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546074,"ip_address":""},"score":547852,"extra":""},{"author":{"id":2434668,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIdIfuExu7Hnez7l9ykibzRdbqweG9OT0fWH2fUJthoe5l2MNRqzo6YjwysCzSgzP7JyFnx5WMR0lg/132","nickname":"Geek_83641d","note":"","ucode":"8915938ADE7FF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1259323,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","nickname":"陈斯佳","note":"","ucode":"C236F874FC767A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570144,"discussion_content":"你是运维还是开发，是在哪个城市呢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651676013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547852,"ip_address":""},"score":570144,"extra":""}]}]},{"had_liked":false,"id":52213,"user_name":"kissingers","can_delete":false,"product_type":"c1","uid":1135299,"ip_address":"","ucode":"615151808CF628","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKzqiaZnBw2myRWY802u48Rw3W2zDtKoFQ6vN63m4FdyjibM21FfaOYe8MbMpemUdxXJeQH6fRdVbZA/132","comment_is_top":false,"comment_ctime":1545352492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18725221676","product_id":100015201,"comment_content":"没跟上节奏 不过干货满满 谢谢老师","like_count":4},{"had_liked":false,"id":211891,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1588036377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14472938265","product_id":100015201,"comment_content":"早上看了阿里的声东写的关于k8s的pdf，跟老师讲得很多内容都贴合，结合老师的专栏再好好学习。谢谢","like_count":4},{"had_liked":false,"id":196120,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1585237286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14470139174","product_id":100015201,"comment_content":"在思考中产生思考👍 <br>可以来自别人的问题，自己的问题，总之要刺激大脑不断思考，懂得越多，不同的知识之间越容易产生关联，经过长期努力，最终可能像老师一样融会贯通😄","like_count":3},{"had_liked":false,"id":52509,"user_name":"Rickybi","can_delete":false,"product_type":"c1","uid":1217908,"ip_address":"","ucode":"4A2CAB19B38852","user_header":"https://static001.geekbang.org/account/avatar/00/12/95/74/53c4e990.jpg","comment_is_top":false,"comment_ctime":1545401768,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14430303656","product_id":100015201,"comment_content":"感觉这50多篇文章值得反复看反复做笔记消化啊。","like_count":3},{"had_liked":false,"id":52343,"user_name":"兵戈","can_delete":false,"product_type":"c1","uid":1017595,"ip_address":"","ucode":"0F1723EBCE1BC0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/86/fb/4add1a52.jpg","comment_is_top":false,"comment_ctime":1545364464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14430266352","product_id":100015201,"comment_content":"感谢磊哥的专栏分享，受益匪浅，还需时时回顾学习。期待下一期专栏","like_count":3},{"had_liked":false,"id":52190,"user_name":"Johnson","can_delete":false,"product_type":"c1","uid":1225037,"ip_address":"","ucode":"55B582953E49F3","user_header":"https://static001.geekbang.org/account/avatar/00/12/b1/4d/10c75b34.jpg","comment_is_top":false,"comment_ctime":1545347469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135282061","product_id":100015201,"comment_content":"结课了 打卡 学的不扎实，还要结合实际深入理解","like_count":2},{"had_liked":false,"id":300482,"user_name":"独孤九剑","can_delete":false,"product_type":"c1","uid":2230909,"ip_address":"","ucode":"6C1253E2B8C1D4","user_header":"https://static001.geekbang.org/account/avatar/00/22/0a/7d/ac715471.jpg","comment_is_top":false,"comment_ctime":1625192855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5920160151","product_id":100015201,"comment_content":"听君一问答，胜读十年书。","like_count":1},{"had_liked":false,"id":230477,"user_name":"自然","can_delete":false,"product_type":"c1","uid":1181887,"ip_address":"","ucode":"EDFC3EFAB0B88E","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/bf/cd6bfc22.jpg","comment_is_top":false,"comment_ctime":1593397417,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5888364713","product_id":100015201,"comment_content":"我们现在是传统的单体应用，多用GBK字符集，默认的docker镜像是不带GBK字符集的，这种情况怎么处理？","like_count":1,"discussions":[{"author":{"id":1500131,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e3/e3/2a928261.jpg","nickname":"杂食动物","note":"","ucode":"AA97D92A8AB0FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349113,"discussion_content":"可以基于docker镜像封装一个带走GBK字符集的镜像啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612890442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53818,"user_name":"子非鱼","can_delete":false,"product_type":"c1","uid":1218657,"ip_address":"","ucode":"B2D8385F38FE5A","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/61/ab1e3ac0.jpg","comment_is_top":false,"comment_ctime":1545734092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840701388","product_id":100015201,"comment_content":"好深，之前看完了cloudman的博客，现在更深入了，受益匪浅！","like_count":1},{"had_liked":false,"id":52837,"user_name":"杜鹏","can_delete":false,"product_type":"c1","uid":1197300,"ip_address":"","ucode":"7D43939C1B32DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/44/f4/6b456c12.jpg","comment_is_top":false,"comment_ctime":1545537989,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5840505285","product_id":100015201,"comment_content":"生产环境中用的默认flannel网络，大规模部署情况下，经常碰到机器之间可以ping通，pod之间不可以。如果pod在同样的机器上重启的话，还是不可以ping通。必须要让pod在其他机器上启动才可以通。","like_count":1,"discussions":[{"author":{"id":1233455,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d2/2f/04882ff8.jpg","nickname":"龙坤","note":"","ucode":"D1724E68D6304D","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308799,"discussion_content":"这最后有查出原因吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601085882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52319,"user_name":"锋","can_delete":false,"product_type":"c1","uid":1247421,"ip_address":"","ucode":"76839165B11E72","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/bd/a2a70bdc.jpg","comment_is_top":false,"comment_ctime":1545362218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840329514","product_id":100015201,"comment_content":"张磊老师，你好！非常感谢您的分享，可以加下您微信吗？我的微信13666009543，再次感谢的分享！","like_count":1},{"had_liked":false,"id":354276,"user_name":"旋风","can_delete":false,"product_type":"c1","uid":1272591,"ip_address":"北京","ucode":"B9FF02969F4307","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/0f/293b999c.jpg","comment_is_top":false,"comment_ctime":1660236023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660236023","product_id":100015201,"comment_content":"张大，请教一个权威的回答，k8s创建pod的整个流程","like_count":0},{"had_liked":false,"id":343761,"user_name":"明宇","can_delete":false,"product_type":"c1","uid":2982206,"ip_address":"","ucode":"D204117434AEC2","user_header":"https://static001.geekbang.org/account/avatar/00/2d/81/3e/d1e647c7.jpg","comment_is_top":false,"comment_ctime":1651042345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651042345","product_id":100015201,"comment_content":"两遍了，收获满满<br>","like_count":0},{"had_liked":false,"id":340921,"user_name":"Run","can_delete":false,"product_type":"c1","uid":1371941,"ip_address":"","ucode":"6738D2F36ACFF6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLMDBq7lqg9ZasC4f21R0axKJRVCBImPKlQF8yOicLLXIsNgsZxsVyN1mbvFOL6eVPluTNgJofwZeA/132","comment_is_top":false,"comment_ctime":1649230907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649230907","product_id":100015201,"comment_content":"希望张磊老师再出点新课","like_count":0},{"had_liked":false,"id":334838,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1241581,"ip_address":"","ucode":"9B70BE6908EB3B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/ed/4e249c6b.jpg","comment_is_top":false,"comment_ctime":1645151605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645151605","product_id":100015201,"comment_content":"这次算是第二遍到达这里，第一遍真是云里雾里","like_count":0},{"had_liked":false,"id":325230,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1638871011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638871011","product_id":100015201,"comment_content":"第一遍打卡    容器间网络 从  docker0 网桥   CNI 插件 接口 以后 好难","like_count":0},{"had_liked":false,"id":317966,"user_name":"庄周梦蝶","can_delete":false,"product_type":"c1","uid":1693576,"ip_address":"","ucode":"7878ED3EB11E97","user_header":"https://static001.geekbang.org/account/avatar/00/19/d7/88/7dcde249.jpg","comment_is_top":false,"comment_ctime":1635077557,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1635077557","product_id":100015201,"comment_content":"既然k8s能提供服务发现，注册中心，负载均衡，网关，限流。为什么很多项目还是用k8s部署springcloud的nacos等，而不是用k8s自带的那些？","like_count":0,"discussions":[{"author":{"id":1707741,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/vM2NmFZQYmb4kkk8Cba1fGP4bhK9diaeXb2LXFWXJWfOPuibK3aib24qujweqciaxt43btqicSz9gDDlJkUQ12RDfJQ/132","nickname":"Geek_955506","note":"","ucode":"D07C5B9A1ECEA1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574409,"discussion_content":"有的是技术栈不熟悉，搞开发的对k8s不熟，有的是考虑到 k8s service 性能没有 nacos 好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654047887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309092,"user_name":"Md3zed","can_delete":false,"product_type":"c1","uid":1717785,"ip_address":"","ucode":"83EAD89468ED7B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/CccT5NgKlZRlTL8f4BsIDqfJ8tRkHPyaR3SXnfgU7acxo2OO7vGzNWjfQBuFnbPPzVYH8Lh49f1jyicuuRSndcA/132","comment_is_top":false,"comment_ctime":1629941641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629941641","product_id":100015201,"comment_content":"第一遍打卡","like_count":0},{"had_liked":false,"id":279008,"user_name":"小寞子。(≥3≤)","can_delete":false,"product_type":"c1","uid":1206545,"ip_address":"","ucode":"6D978BDCBB2862","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/11/831cec7d.jpg","comment_is_top":false,"comment_ctime":1613539631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613539631","product_id":100015201,"comment_content":"看完有一种可以手写k8源码的错觉。 我现在架构自己软件的时候也会开始借鉴一些k8的设计。 比如都是API, controller pattern, 等等等 感谢作者！","like_count":0},{"had_liked":false,"id":271454,"user_name":"阿泽onebig","can_delete":false,"product_type":"c1","uid":1648279,"ip_address":"","ucode":"C5E213C2757772","user_header":"https://static001.geekbang.org/account/avatar/00/19/26/97/35e8765b.jpg","comment_is_top":false,"comment_ctime":1609647200,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609647200","product_id":100015201,"comment_content":"感谢张磊的老师的付出，干货满满，接下来会再读几遍~~加强理解~","like_count":0},{"had_liked":false,"id":230942,"user_name":"小丢👣","can_delete":false,"product_type":"c1","uid":1031711,"ip_address":"","ucode":"A7699F00418FC4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/be/1f/57c88dd1.jpg","comment_is_top":false,"comment_ctime":1593527592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593527592","product_id":100015201,"comment_content":"看了第三遍了，每一遍都有收获，感谢磊哥","like_count":0},{"had_liked":false,"id":230475,"user_name":"自然","can_delete":false,"product_type":"c1","uid":1181887,"ip_address":"","ucode":"EDFC3EFAB0B88E","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/bf/cd6bfc22.jpg","comment_is_top":false,"comment_ctime":1593396862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593396862","product_id":100015201,"comment_content":"我是做java后台开发的，看了文章有2个问题：<br>1.关于前面说的k8s提供的类似负载均衡的功能，像很多微服务架构 应用提供这个功能，还提供额外的其他功能 如服务自注册等，感觉这个和k8s的服务重复，这个是怎么考虑和取舍的呢？<br>2.前面老师也有说过，关于长连接的处理方式（像jdbc），想详细了解下这方面的编程处理（造成长连接短暂失效，如网络瞬断，改数据库密码，传统的单体应用通常需求重启应用）？","like_count":0},{"had_liked":false,"id":205059,"user_name":"耶愿","can_delete":false,"product_type":"c1","uid":1340960,"ip_address":"","ucode":"549E54F67FC000","user_header":"https://static001.geekbang.org/account/avatar/00/14/76/20/2f9c6763.jpg","comment_is_top":false,"comment_ctime":1586517953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586517953","product_id":100015201,"comment_content":"老师你好，请教一下:使用k8s搭微服务架构我理解网关应该是用ingress或者istio,那么服务间调用的服务发现也是用同样的方式吗，或者有其它方式？","like_count":0},{"had_liked":false,"id":82439,"user_name":"MoFanDon","can_delete":false,"product_type":"c1","uid":1053363,"ip_address":"","ucode":"F8A9D26EA0171D","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/b3/9e8f4b4f.jpg","comment_is_top":false,"comment_ctime":1554213362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554213362","product_id":100015201,"comment_content":"看完了。至少还要看两遍。","like_count":0},{"had_liked":false,"id":76268,"user_name":"国锐","can_delete":false,"product_type":"c1","uid":1452683,"ip_address":"","ucode":"8E38FC162B3B0D","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Wb0NE3ibcF9Yjiciayqd4BbpeWHbh6Sh3Y6L17j4qNs7ZO4cicANJJLymyA4jdCFR5zkJOAmaMdfldjegSCibXCz8AQ/132","comment_is_top":false,"comment_ctime":1552562499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552562499","product_id":100015201,"comment_content":"请教张老师，有没有办法在docker容器里面获取到宿主机上所有网卡的mac地址呢","like_count":0},{"had_liked":false,"id":69757,"user_name":"casera","can_delete":false,"product_type":"c1","uid":1260104,"ip_address":"","ucode":"3D77CE5BD8B9F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/48/6b1cca18.jpg","comment_is_top":false,"comment_ctime":1550829641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550829641","product_id":100015201,"comment_content":"很好,很棒~","like_count":0},{"had_liked":false,"id":66769,"user_name":"萧箫萧","can_delete":false,"product_type":"c1","uid":1218358,"ip_address":"","ucode":"B8259F3CDFCCAD","user_header":"https://static001.geekbang.org/account/avatar/00/12/97/36/6addd2b6.jpg","comment_is_top":false,"comment_ctime":1550018744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550018744","product_id":100015201,"comment_content":"容器内的应用如果要控制宿主机上的资源 用什么方法给权限？","like_count":0},{"had_liked":false,"id":57432,"user_name":"王涛","can_delete":false,"product_type":"c1","uid":1315326,"ip_address":"","ucode":"6241F08634D342","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/fe/de00d8d8.jpg","comment_is_top":false,"comment_ctime":1546789622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546789622","product_id":100015201,"comment_content":"结课打卡，收获满满。物超所值，值得购买！<br>开发上的一些知识点还是没有理解明白，以后需要慢慢来复习一下","like_count":0},{"had_liked":false,"id":52839,"user_name":"杜鹏","can_delete":false,"product_type":"c1","uid":1197300,"ip_address":"","ucode":"7D43939C1B32DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/44/f4/6b456c12.jpg","comment_is_top":false,"comment_ctime":1545538147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545538147","product_id":100015201,"comment_content":"请教一个网络问题。<br><br>1 使用的默认flannel网络<br>2 机器之间可以ping通<br>3 pod之间ping不通<br>4 pod在同样的机器上重启，还是不通<br>5 pod调度到其他机器上，可以通<br>6 在大规模部署的情况下，有一定的概率发生","like_count":0}]}