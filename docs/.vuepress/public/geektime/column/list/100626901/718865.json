{"id":718865,"title":"01｜快速入门：Rust中有哪些你不得不了解的基础语法？","content":"<p>你好，我是Mike。今天是我们的Rust入门与实战第一讲。</p><p>无论对人，还是对事儿，第一印象都很重要，Rust也不例外。今天我们就来看一看Rust给人的第一印象是什么吧。其实Rust宣称的安全、高性能、无畏并发这些特点，初次接触的时候都是感受不到的。第一次能直观感受到的实际是下面这些东西。</p><ul>\n<li>Rust代码长什么样儿？</li>\n<li>Rust在编辑器里面体验如何？</li>\n<li>Rust工程如何创建？</li>\n<li>Rust程序如何编译、执行？</li>\n</ul><p>下面我们马上下载安装Rust，快速体验一波。</p><h2>下载安装</h2><p>要做Rust编程开发，安装Rust编译器套件是第一步。如果是在MacOS或Linux下，只需要执行：</p><pre><code class=\"language-plain\">curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre><p>按提示执行操作，就安装好了，非常方便。</p><p>而如果你使用的是Windows系统，那么会有更多选择。你既可以在WSL中开发编译Rust代码，也可以在Windows原生平台上开发Rust代码。</p><p>如果你计划在WSL中开发，安装方式与上面一致。</p><pre><code class=\"language-plain\">curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre><p>如果想在Windows原生平台上开发Rust代码，首先需要确定安装 <a href=\"https://static.rust-lang.org/rustup/dist/i686-pc-windows-msvc/rustup-init.exe\">32 位的版本</a>还是 <a href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\">64 位的版本</a>。在安装过程中，它会询问你是想安装GNU工具链的版本还是MSVC工具链的版本。安装GNU工具链版本的话，不需要额外安装其他软件包。而安装MSVC工具链的话，需要先安装微软的 <a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html\">Visual Studio</a> 依赖。</p><!-- [[[read_end]]] --><p>如果你暂时不想在本地安装，或者本地安装有问题，对于我们初学者来说，也有一个方便、快捷的方式，就是Rust语言官方提供的一个网页端的 <a href=\"https://play.rust-lang.org/\">Rust 试验场</a>，可以让你快速体验。</p><p><img src=\"https://static001.geekbang.org/resource/image/59/35/595aba7cc9ff3ab964fab094cb16b335.png?wh=1920x1104\" alt=\"图片\" title=\"网页端的 Rust 试验场：https://play.rust-lang.org/\"></p><p>这个网页Playground非常方便，可以用来快速验证一些代码片段，也便于将代码分享给别人。如果你的电脑本地没有安装Rust套件，可以临时使用这个Playground学习。</p><h3>编辑器/ IDE</h3><p>开发Rust，除了下载、安装Rust本身之外，还有一个工具也推荐你使用，就是<strong>VS Code</strong>。需要提醒你的是，在VS Code中需要安装 rust-analyzer 插件才会有自动提示等功能。你可以看一下VS Code编辑Rust代码的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/d7/b29a9f442ba5f55e1041e1b8b527a7d7.png?wh=1920x1198\" alt=\"图片\"></p><p>VS Code功能非常强大，除了基本的IDE功能外，还能实现<strong>远程编辑。</strong>比如在Windows下开发，代码放在WSL Linux里面，在Windows Host下使用VS Code远程编辑WSL中的代码，体验非常棒。</p><p>其他一些常用的Rust代码编辑器还有VIM、NeoVIM、IDEA、Clion等。JetBrains最近推出了Rust专用的IDE：RustRover，如果有精力的话，你也可以下载下来体验一下。</p><p>Rust编译器套件安装好之后，会提供一些工具，这里我们选几个主要的简单介绍一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/0d/65/0d016a3b26c6ab11ba0e979469714165.png?wh=2264x1248\" alt=\"\"></p><p>工具齐备了，下面我们马上体验起来，先来创建一个Rust工程。</p><h2>创建一个工程</h2><p>创建工程我们应该使用哪个工具呢？ 没错，就是刚刚我们提到的 cargo 命令行工具。我们用它来创建一个Rust工程 helloworld。</p><p>打开终端，输入：</p><pre><code class=\"language-plain\">cargo new --bin helloworld \n</code></pre><p>显示：</p><pre><code class=\"language-plain\">     Created binary (application) `helloworld` package\n</code></pre><p>这样就创建好了一个新工程。这个新工程的目录组织结构是这样的：</p><pre><code class=\"language-plain\">helloworld\n    ├── Cargo.toml\n    └── src\n        └── main.rs\n</code></pre><p>第一层是一个src目录和一个Cargo.toml配置文件。src是放置源代码的地方，而Cargo.toml是这个工程的配置文件，我们来看一下里面的内容。</p><pre><code class=\"language-plain\">[package]\nname = \"helloworld\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n</code></pre><p>Cargo.toml中包含package等基本信息，里面有名字、版本和采用的Rust版次。Rust 3 年发行一个版次，目前有2015、2018和2021版次，最新的是2021版次，也是我们这门课使用的版次。可以执行 <code>rustc -V</code> 来查看我们课程使用的Rust版本。</p><pre><code class=\"language-plain\">rustc 1.69.0 (84c898d65 2023-04-16)\n</code></pre><p>好了，一切就绪后，我们可以来看看src下的main.rs里面的代码。</p><h3>Hello, World</h3><pre><code class=\"language-plain\">fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre><p>这段代码的意思是，我们要在终端输出这个 <code>\"Hello, world!\"</code> 的字符串。</p><p>使用 <code>cargo build</code> 来编译。</p><pre><code class=\"language-plain\">$ cargo build\n   Compiling helloworld v0.1.0 (/home/mike/works/classes/helloworld)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.57s\n</code></pre><p>使用 <code>cargo run</code> 命令可以直接运行程序。</p><pre><code class=\"language-plain\">$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.01s\n     Running `target/debug/helloworld`\nHello, world!\n</code></pre><p>可以看到，最后终端打印出了 <code>Hello, world</code>。我们成功地执行了第一个Rust程序。</p><h2>Rust基础语法</h2><p>快速体验 Hello World 后，你是不是对Rust 已经有了一个感性的认识？不过只是会Hello World的话，我们离入门Rust尚远。下面我们就从Rust的基础语法入手开始了解这门语言，为今后使用Rust编程打下一个良好的基础。</p><p>Rust基础语法主要包括基础类型、复合类型、控制流、函数与模块几个方面，下面我带你一个一个看。</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/88/f613198e5e24568c79e53ba774193f88.jpg?wh=2539x2701\" alt=\"\"></p><h3>Rust的基础类型</h3><h4>赋值语句</h4><p>Rust中使用 <strong>let</strong> 关键字定义变量及初始化，你可以看一下我给出的这个例子。</p><pre><code class=\"language-plain\">fn main() {\n  let a: u32 = 1;\n}\n</code></pre><p>可以看到，Rust中类型写在变量名的后面，例子里变量a的类型是u32, 也就是无符号32位整数，赋值为1。Rust保证你定义的变量在第一次使用之前一定被初始化过。</p><h4>数字类型</h4><p>与一些动态语言不同，Rust中的数字类型是区分位数的。我们先来看整数。</p><p><strong>整数</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/af/cb/af0bfe2293a5decf19f76d0431fe98cb.png?wh=1704x830\" alt=\"\"></p><p>其中，isize和usize的位数与具体CPU架构位数有关。CPU是64位的，它们就是64位的，CPU是32位的，它们就是32位的。这些整数类型可以在写字面量的时候作为后缀跟在后面，来直接指定值的类型，比如 <code>let a = 10u32;</code> 就定义了一个变量a，初始化成无符号32位整型，值为10。</p><p><strong>整数字面量的辅助写法</strong></p><p>Rust提供了灵活的数字表示方法，便于我们编写整数字面量。比如：</p><pre><code class=\"language-plain\">十进制字面量 98_222，使用下划线按三位数字一组隔开\n十六进制字面量 0xff，使用0x开头\n8进制字面量 0o77，使用0o（小写字母o）开头\n二进制字面量 0b1111_0000，使用0b开头，按4位数字一组隔开\n字符的字节表示 b'A'，对一个ASCII字符，在其前面加b前缀，直接得到此字符的ASCII码值\n</code></pre><p>各种形式的辅助写法是为了提高程序员写整数字面量的效率，同时更清晰，更不容易犯错。</p><p><strong>浮点数</strong></p><p>浮点数有两种类型：f32和f64，分别代表32位浮点数类型和64位浮点数类型。它们也可以跟在字面量的后面，用来指定浮点数值的类型，比如 <code>let a = 10.0f32;</code> 就定义了一个变量a，初始化成32位浮点数类型，值为10.0。</p><h4>布尔类型</h4><p>Rust中的布尔类型为 bool，它只有两个值，true 和 false。</p><pre><code class=\"language-plain\">let a = true;\nlet b: bool = false;\n</code></pre><h4></h4><h4>字符</h4><p>Rust中的字符类型是 char，值用单引号括起来。</p><pre><code class=\"language-plain\">fn main() {\n    let c = 'z';\n    let z: char = 'ℤ'; \n    let heart_eyed_cat = '😻';\n    let t = '中';\n}\n</code></pre><p>Rust的 char 类型存的是 <a href=\"https://unicode.org/glossary/#unicode_scalar_value\">Unicode 散列值</a>。这意味着它可以表达各种符号，比如中文符号、emoji符号等。在Rust中，char类型在内存中总是占用 <a href=\"https://doc.rust-lang.org/std/primitive.char.html#representation\">4 个字节</a>大小。这一点与C语言或其他某些语言中的char有很大不同。</p><h4>字符串</h4><p>Rust中的字符串类型是 String。虽然中文表述上，字符串只比前面的字符类型多了一个串字，但它们内部存储结构完全不同。String内部存储的是Unicode字符串的UTF8编码，而char直接存的是Unicode Scalar Value（二者的区别可查阅<a href=\"https://stackoverflow.com/questions/48465265/what-is-the-difference-between-unicode-code-points-and-unicode-scalars\">这里</a>）。也就是说 <strong>String不是char的数组</strong>，这点与C语言也有很大区别。</p><p>通过下面示例我们可以看到，Rust字符串对Unicode字符集有着良好的支持。</p><pre><code class=\"language-plain\">let hello = String::from(\"السلام عليكم\");\nlet hello = String::from(\"Dobrý den\");\nlet hello = String::from(\"Hello\");\nlet hello = String::from(\"שָׁלוֹם\");\nlet hello = String::from(\"नमस्ते\");\nlet hello = String::from(\"こんにちは\");\nlet hello = String::from(\"안녕하세요\");\nlet hello = String::from(\"你好\");\nlet hello = String::from(\"Olá\");\nlet hello = String::from(\"Здравствуйте\");\nlet hello = String::from(\"Hola\");\n</code></pre><p>注意，Rust中的String不能通过下标去访问。</p><pre><code class=\"language-plain\">let hello = String::from(\"你好\");\nlet a = hello[0];  // 你可能想把“你”字取出来，但实际上这样是错误的\n</code></pre><p>为什么呢？你可以想一想。因为String存储的Unicode序列的UTF8编码，而UTF8编码是变长编码。这样即使能访问成功，也只能取出一个字符的UTF8编码的第一个字节，它很可能是没有意义的。因此Rust直接对String禁止了这个索引操作。</p><p><strong>字符串字面量中的转义</strong></p><p>与C语言一样，Rust中转义符号也是反斜杠 <code>\\</code> ，可用来转义各种字符。你可以运行我给出的这几个示例来理解一下。</p><pre><code class=\"language-plain\">fn main() {\n    // 将\"\"号进行转义\n    let byte_escape = \"I'm saying \\\"Hello\\\"\";\n    println!(\"{}\", byte_escape);\n    \n    // 分两行打印\n    let byte_escape = \"I'm saying \\n 你好\";\n    println!(\"{}\", byte_escape);\n    \n    // Windows下的换行符\n    let byte_escape = \"I'm saying \\r\\n 你好\";\n    println!(\"{}\", byte_escape);\n    \n    // 打印出 \\ 本身\n    let byte_escape = \"I'm saying \\\\ Ok\";\n    println!(\"{}\", byte_escape);\n    \n    // 强行在字符串后面加个0，与C语言的字符串一致。\n    let byte_escape = \"I'm saying hello.\\0\";\n    println!(\"{}\", byte_escape);\n}\n</code></pre><p>除此之外，Rust还支持通过 <code>\\x</code> 输入等值的ASCII字符，以及通过 <code>\\u{}</code> 输入等值的Unicode字符。你可以看一下我给出的这两个例子。</p><pre><code class=\"language-plain\">fn main() {\n    // 使用 \\x 输入等值的ASCII字符（最高7位）\n    let byte_escape = \"I'm saying hello \\x7f\";\n    println!(\"{}\", byte_escape);\n    \n    // 使用 \\u{} 输入等值的Unicode字符（最高24位）\n    let byte_escape = \"I'm saying hello \\u{0065}\";\n    println!(\"{}\", byte_escape);\n}\n</code></pre><p><span class=\"reference\">注：字符串转义的详细知识点，请参考 <a href=\"https://doc.rust-lang.org/reference/tokens.html#character-escapes\">Tokens - The Rust Reference (rust-lang.org)</a>。</span></p><p><strong>禁止转义的字符串字面量</strong></p><p>有时候，我们不希望字符串被转义，也就是想输出原始字面量。这个在Rust中也有办法，使用 <code>r\"\"</code> 或 <code>r#\"\"#</code> 把字符串字面量套起来就行了。</p><pre><code class=\"language-plain\">fn main() {\n    // 字符串字面量前面加r，表示不转义\n    let raw_str = r\"Escapes don't work here: \\x3F \\u{211D}\";\n    println!(\"{}\", raw_str);\n    \n    // 这个字面量必须使用r##这种形式，因为我们希望在字符串字面量里面保留\"\"\n    let quotes = r#\"And then I said: \"There is no escape!\"\"#;\n    println!(\"{}\", quotes);\n    \n    // 如果遇到字面量里面有#号的情况，可以在r后面，加任意多的前后配对的#号，\n    // 只要能帮助Rust编译器识别就行\n    let longer_delimiter = r###\"A string with \"# in it. And even \"##!\"###;\n    println!(\"{}\", longer_delimiter);\n}\n</code></pre><p>一点小提示，Rust中的字符串字面量都支持换行写，默认把换行符包含进去。</p><p><strong>字节串</strong></p><p>很多时候，我们的字符串字面量中用不到Unicode字符，只需要ASCII字符集。对于这种情况，Rust还有一种更紧凑的表示法：<strong>字节串</strong>。用b开头，双引号括起来，比如 <code>b\"this is a byte string\"</code>。这时候字符串的类型已不是字符串，而是字节的数组 [u8; N]，N为字节数。</p><p>你可以在Playground里面运行一下代码，看看输出什么。</p><pre><code class=\"language-plain\">fn main() {\n    // 字节串的类型是字节的数组，而不是字符串了\n    let bytestring: &amp;[u8; 21] = b\"this is a byte string\";\n    println!(\"A byte string: {:?}\", bytestring);\n    \n    // 可以看看下面这串打印出什么\n    let escaped = b\"\\x52\\x75\\x73\\x74 as bytes\";\n    println!(\"Some escaped bytes: {:?}\", escaped);\n\n    // 字节串与原始字面量结合使用\n    let raw_bytestring = br\"\\u{211D} is not escaped here\";\n    println!(\"{:?}\", raw_bytestring);\n}\n</code></pre><p>字节串很有用，特别是在做系统级编程或网络协议开发的时候，经常会用到。</p><h4>数组</h4><p>Rust中的数组是array类型，用于存储同一类型的多个值。数组表示成[T; N]，由中括号括起来，中间用分号隔开，分号前面表示类型，分号后面表示数组长度。</p><pre><code class=\"language-plain\">fn main() {\n    let a: [i32; 5] = [1, 2, 3, 4, 5];\n    let a = [1, 2, 3, 4, 5];\n}\n</code></pre><p>Rust中的数组是固定长度的，也就是说在编译阶段就能知道它占用的字节数，并且在运行阶段，不能改变它的长度（尺寸）。</p><p>听到这里你是不是想说，这岂不是很麻烦？Rust中的数组竟然不能改变长度。这里我解释一下，Rust中区分固定尺寸数组和动态数组。之所以做这种区分是因为Rust语言在设计时就要求适应不同的场合，要有足够的韧性能在不同的场景中都达到最好的性能。因为固定尺寸的数据类型是可以直接放栈上的，创建和回收都比在堆上动态分配的动态数组性能要好。</p><p><strong>是否能在编译期计算出某个数据类型在运行过程中占用内存空间的大小，</strong>这个指标很重要，Rust的类型系统就是按这个对类型进行分类的。后面的课程中我们会经常用到这个指标。</p><p>数组常用于开辟一个固定大小的Buffer（缓冲区），用来接收IO输入输出等。也常用已知元素个数的字面量集合来初始化，比如表达一年有12个月。</p><pre><code class=\"language-plain\">let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\n</code></pre><p>数组的访问，可以用下标索引。</p><pre><code class=\"language-plain\">fn main() {\n    let a: [i32; 5] = [1, 2, 3, 4, 5];\n    let b = a[0];\n    println!(\"{}\", b)\n}\n// 输出 \n1\n</code></pre><p>我们再来看看，如果下标索引越界了会发生什么。</p><pre><code class=\"language-plain\">fn main() {\n    let a: [i32; 5] = [1, 2, 3, 4, 5];\n    let b = a[5];\n    println!(\"{}\", b)\n}\n</code></pre><p>提示：</p><pre><code class=\"language-plain\">   Compiling playground v0.0.1 (/playground)\nerror: this operation will panic at runtime\n --&gt; src/main.rs:3:13\n  |\n3 |     let b = a[5];\n  |             ^^^^ index out of bounds: the length is 5 but the index is 5\n</code></pre><p>这时候你可能已经发现了，Rust在编译的时候，就给我们指出了问题，说这个操作会在运行的时候崩溃。为什么Rust能指出来呢？就是因为<strong>数组的长度是确定的</strong>，Rust在编译时就分析并提取了这个数组类型占用空间长度的信息，因此直接阻止了你的越界访问。</p><p>不得不说，Rust太贴心了。</p><h4>动态数组</h4><p>Rust中的动态数组类型是Vec（Vector），也就是向量，中文翻译成动态数组。它用来存储同一类型的多个值，容量可在程序运行的过程中动态地扩大或缩小，因此叫做动态数组。</p><pre><code class=\"language-plain\">fn main() {\n    let v: Vec&lt;i32&gt; = Vec::new();\n    let v = vec![1, 2, 3];\n    \n    let mut v = Vec::new();\n    v.push(5);\n    v.push(6);\n    v.push(7);\n    v.push(8);\n}\n</code></pre><p>动态数组可以用下标进行索引访问。</p><p>比如：</p><pre><code class=\"language-plain\">fn main() {\n&nbsp; &nbsp; let s1 = String::from(\"superman 1\");\n&nbsp; &nbsp; let s2 = String::from(\"superman 2\");\n&nbsp; &nbsp; let s3 = String::from(\"superman 3\");\n&nbsp; &nbsp; let s4 = String::from(\"superman 4\");\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; let v = vec![s1, s2, s3, s4];\n\n&nbsp; &nbsp; println!(\"{:?}\", v[0]);\n}\n// 输出 \n\"superman 1\"\n</code></pre><p>如果我们下标越界了会发生什么？Rust能继续帮我们提前找出问题来吗？试一试就知道了。</p><pre><code class=\"language-plain\">fn main() {\n&nbsp; &nbsp; let s1 = String::from(\"superman 1\");\n&nbsp; &nbsp; let s2 = String::from(\"superman 2\");\n&nbsp; &nbsp; let s3 = String::from(\"superman 3\");\n&nbsp; &nbsp; let s4 = String::from(\"superman 4\");\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; let v = vec![s1, s2, s3, s4];\n    // 这里下标访问越界了\n&nbsp; &nbsp; println!(\"{:?}\", v[4]);\n}\n</code></pre><p>运行后，出现了提示。</p><pre><code class=\"language-plain\">   Compiling playground v0.0.1 (/playground)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.62s\n     Running `target/debug/playground`\nthread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', src/main.rs:9:22\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre><p>可以看到，这段代码正确通过了编译，但在运行的时候出错了，并且导致了主线程的崩溃。</p><p>你可以将其与前面讲的数组array下标越界时的预警行为对比理解。为什么array的越界访问能在编译阶段检查出来，而Vec的越界访问不能在编译阶段检查出来呢？你可以好好想一想。</p><h4>哈希表</h4><p>哈希表是一种常见的结构，用于存储Key-Value映射关系，基本在各种语言中都有内置提供。Rust中的哈希表类型为HashMap。对一个HashMap结构来说，Key要求是同一种类型，比如是字符串就统一用字符串，是数字就统一用数字。Value也是一样，要求是同一种类型。Key和Value的类型不需要相同。</p><pre><code class=\"language-plain\">fn main() {\n    use std::collections::HashMap;\n    \n    let mut scores = HashMap::new();\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Yellow\"), 50);\n}\n</code></pre><p>因为哈希表能从一个键索引到一个值，所以应用场景非常广泛，后面我们还会仔细分析它的用法。</p><h3>Rust中的复合类型</h3><p>复合类型可以包含多种基础类型，是一种将类型进行有效组织的方式，提供了一级一级搭建更高层类型的能力。Rust中的复合类型包括元组、结构体、枚举等。</p><h4>元组</h4><p>元组是一个固定（元素）长度的列表，每个元素类型可以不一样。用小括号括起来，元素之间用逗号隔开。例如：</p><pre><code class=\"language-plain\">fn main() {\n    let tup: (i32, f64, u8) = (500, 6.4, 1);\n}\n</code></pre><p>元组元素的访问：</p><pre><code class=\"language-plain\">fn main() {\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n    \n    // 元组使用.运算符访问其元素，下标从0开始，注意语法\n    let five_hundred = x.0;\n    let six_point_four = x.1;\n    let one = x.2;\n}\n</code></pre><p>与数组的相同点是，它们都是固定元素个数的，在运行时不可伸缩。与数组的不同点是，元组的每个元素的类型可以不一样。元组在Rust中很有用，因为它可以用于<strong>函数的返回值</strong>，相当于把多个想返回的值捆绑在一起，一次性返回。</p><p>当没有任何元素的时候，元组退化成 ()，就叫做unit类型，是Rust中一个非常重要的基础类型和值，unit类型唯一的值实例就是()，与其类型本身的表示相同。比如一个函数没有返回值的时候，它实际默认返回的是这个unit值。</p><h4>结构体</h4><p>结构体也是一种复合类型，它由若干字段组成，每个字段的类型可以不一样。Rust中使用 <strong>struct</strong> 关键字来定义结构体。比如下面的代码就定义了一个User类型。</p><pre><code class=\"language-plain\">struct User {\n    active: bool,\n    username: String,\n    email: String,\n    age: u64,\n}\n</code></pre><p>下面这段代码演示了结构体类型的实例化。</p><pre><code class=\"language-plain\">fn main() {\n    let user1 = User {\n        active: true,\n        username: String::from(\"someusername123\"),\n        email: String::from(\"someone@example.com\"),\n        age: 1,\n    };\n}\n</code></pre><h4>枚举</h4><p>Rust中使用 <strong>enum</strong> 关键字定义枚举类型。比如：</p><pre><code class=\"language-plain\">enum IpAddrKind {\n    V4,\n    V6,\n}\n</code></pre><p>枚举类型里面的选项叫做此枚举的变体（variants）。变体是其所属枚举类型的一部分。</p><p>枚举使用变体进行枚举类型的实例化，比如：</p><pre><code class=\"language-plain\">let four = IpAddrKind::V4;\nlet six = IpAddrKind::V6;\n</code></pre><p>可以看到，枚举类型也是一种复合类型。但是与结构体不同，结构体类型是里面的所有字段（所有类型）同时起作用，来产生一个具体的实例，而枚举类型是其中的一个变体起作用，来产生一个具体实例，这点区别可以细细品味。学术上，通常把枚举叫作<strong>和类型</strong>（sum type），把结构体叫作<strong>积类型</strong>（product type）。</p><p><strong>枚举类型是Rust中最强大的复合类型</strong>，在后面的课程中我们会看到，枚举就像一个载体，可以携带任何类型。</p><h3>Rust中的控制流</h3><p>下面我们来了解一下Rust语言的控制流语句。</p><h4>分支语句</h4><p>Rust中使用if else来构造分支。</p><pre><code class=\"language-plain\">fn main() {\n    let number = 6;\n    // 判断数字number能被4，3，2中的哪一个数字整除\n    if number % 4 == 0 {\n        println!(\"number is divisible by 4\");\n    } else if number % 3 == 0 {\n        println!(\"number is divisible by 3\");\n    } else if number % 2 == 0 {\n        println!(\"number is divisible by 2\");\n    } else {\n        println!(\"number is not divisible by 4, 3, or 2\");\n    }\n}\n</code></pre><p>与其他C系语言不同，Rust中 if 后面的条件表达式不推荐用（）包裹起来，因为Rust设计者认为那个是不必要的，是多余的语法噪音。</p><p>还要注意一点，if else 支持表达式返回。</p><pre><code class=\"language-plain\">fn main() {\n    let x = 1;\n    // 在这里，if else 返回了值\n    let y = if x == 0 {\n        // 代码块结尾最后一句不加分号，表示把值返回回去\n        100\n    } else {\n        // 代码块结尾最后一句不加分号，表示把值返回回去\n        101\n    };\n    println!(\"y is {}\", y);\n}\n</code></pre><p>像上面这样的代码，其实已经实现了类似于C语言中的三目运算符这样的设计，在Rust中，不需要额外提供那样的特殊语法。</p><h4>循环语句</h4><p>Rust中有三种循环语句，分别是loop、while、for。</p><ul>\n<li>loop用于无条件（无限）循环。</li>\n</ul><pre><code class=\"language-plain\">fn main() {\n    let mut counter = 0;\n    \n    // 这里，接收从循环体中返回的值，对result进行初始化\n    let result = loop {\n        counter += 1;\n        if counter == 10 {\n            // 使用break跳出循环，同时带一个返回值回去\n            break counter * 2;\n        }\n    };\n\n    println!(\"The result is {result}\");\n}\n</code></pre><p>请仔细品味这个例子，这种<strong>返回一个值到外面对一个变量初始化的方式</strong>，是Rust中的习惯用法，这能让代码更紧凑。</p><ul>\n<li>while循环为条件判断循环。当后面的条件为真的时候，执行循环体里面的代码。和前面的 if 语句一样，Rust中的 while 后面的条件表达式不推荐用（）包裹起来。比如：</li>\n</ul><pre><code class=\"language-plain\">fn main() {\n    let mut number = 3;\n\n    while number != 0 {\n        println!(\"{number}!\");\n\n        number -= 1;\n    }\n\n    println!(\"LIFTOFF!!!\");\n}\n</code></pre><ul>\n<li>for循环在Rust中，基本上只用于迭代器（暂时可以想象成对数组，动态数组等）的遍历。Rust中没有C语言那种for循环风格的语法支持，因为那被认为是一种不好的设计。</li>\n</ul><p>你可以看一下下面的代码，就是对一个数组进行遍历。</p><pre><code class=\"language-plain\">fn main() {\n    let a = [10, 20, 30, 40, 50];\n\n    for element in a {\n        println!(\"the value is: {element}\");\n    }\n}\n</code></pre><p>上面代码对动态数组Vec的遍历阻止了越界的可能性，因此用这种方式访问Vec比用下标索引的方式访问更加安全。</p><p>对于循环的场景，Rust还提供了一个便捷的语法来生成遍历区间： <code>..</code>（两个点）。</p><p>请看下面的示例。</p><pre><code>fn main() {\n    // 左闭右开区间\n    for number in 1..4 {\n        println!(&quot;{number}&quot;);\n    }\n    println!(&quot;--&quot;);\n    // 左闭右闭区间\n    for number in 1..=4 {\n        println!(&quot;{number}&quot;);\n    }\n    println!(&quot;--&quot;);\n    // 反向\n    for number in (1..4).rev() {\n        println!(&quot;{number}&quot;);\n    }\n}\n// 输出\n1\n2\n3\n--\n1\n2\n3\n4\n--\n3\n2\n1\n</code></pre><p>我们再来试试打印字符。</p><pre><code class=\"language-plain\">fn main() {\nfor ch in 'a'..='z' {\n        println!(\"{ch}\");\n    }\n}\n// 输出：\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n</code></pre><p>嘿，Rust很智能啊！</p><h3>Rust中的函数和模块</h3><p>最后我们来看Rust的函数、闭包和模块，它们用于封装和复用代码。</p><h4>函数</h4><p>函数基本上是所有编程语言的标配，在Rust中也不例外，它是一种基本的代码复用方法。在Rust中使用 <strong>fn 关键字</strong>来定义一个函数。比如：</p><pre><code class=\"language-plain\">fn print_a_b(a: i32, b: char) {\n    println!(\"The value of a b is: {a}{b}\");\n}\n\nfn main() {\n    print_a_b(5, 'h');\n}\n</code></pre><p>函数定义时的参数叫作<strong>形式参数</strong>（形参），函数调用时传入的参数值叫做<strong>实际参数</strong>（实参）。函数的调用要与函数的签名（函数名、参数个数、参数类型、参数顺序、返回类型）一致，也就是实参和形参要匹配。</p><p>函数对于几乎所有语言都非常重要，实际上各种编程语言在实现时，都是以函数作为基本单元来组织栈上的内存分配和回收的，这个基本的内存单元就是所谓的<strong>栈帧（frame）</strong>，我们在下节课会讲到。</p><h4>闭包（Closure）</h4><p>闭包是另一种风格的函数。它使用两个竖线符号 <code>||</code> 定义，而不是用 <code>fn ()</code> 来定义。你可以看下面的形式对比。</p><pre><code class=\"language-plain\">// 标准的函数定义\nfn&nbsp; add_one_v1 &nbsp; (x: u32) -&gt; u32 { x + 1 }\n// 闭包的定义，请注意形式对比\nlet add_one_v2 = |x: u32| -&gt; u32 { x + 1 };\n// 闭包的定义2，省略了类型标注\nlet add_one_v3 = |x| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { x + 1 };\n// 闭包的定义3，花括号也省略了\nlet add_one_v4 = |x| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x + 1&nbsp; ;\n</code></pre><p><span class=\"reference\">注：可参考完整代码</span><a href=\"http://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=abbfe79ef90d992b9caeb58b2405ed20\">链接</a></p><p>闭包与函数的一个显著不同就是，闭包可以捕获函数中的局部变量为我所用，而函数不行。比如，下面示例中的闭包 add_v2 捕获了main函数中的局部变量 a 来使用，但是函数 add_v1 就没有这个能力。</p><pre><code class=\"language-plain\">fn main() {\n&nbsp; &nbsp; let a = 10u32;             // 局部变量\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; fn&nbsp; add_v1&nbsp; &nbsp;(x: u32) -&gt; u32 { x + a }    // 定义一个内部函数\n&nbsp; &nbsp; let add_v2 = |x: u32| -&gt; u32 { x + a };   // 定义一个闭包\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; let result1 = add_v1(20);  // 调用函数\n&nbsp; &nbsp; let result2 = add_v2(20);  // 调用闭包\n&nbsp; &nbsp; println!(\"{}\", result2);\n}\n</code></pre><p>这样会编译出错，并提示错误。</p><pre><code class=\"language-plain\">error[E0434]: can't capture dynamic environment in a fn item\n&nbsp;--&gt; src/main.rs:4:40\n&nbsp; |\n4 |&nbsp; &nbsp; &nbsp;fn&nbsp; add_v1&nbsp; &nbsp;(x: u32) -&gt; u32 { x + a }&nbsp; &nbsp; // 定义一个内部函数\n&nbsp; |&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^\n&nbsp; |\n&nbsp; = help: use the `|| { ... }` closure form instead\n</code></pre><p>闭包之所以能够省略类型参数等信息，主要是其定义在某个函数体内部，从闭包的内容和上下文环境中能够分析出来那些类型信息。</p><h4>模块</h4><p>我们不可能把所有代码都写在一个文件里面。代码量多了后，分成不同的文件模块书写是非常自然的事情。这个需求需要从编程语言层级去做一定的支持才行，Rust也提供了相应的方案。</p><p>分文件和目录组织代码理解起来其实很简单，主要的知识点在于目录的组织结构上。比如下面示例：</p><pre><code class=\"language-plain\">backyard\n├── Cargo.lock\n├── Cargo.toml\n└── src\n    ├── garden              // 子目录\n    │   └── vegetables.rs\n    ├── garden.rs           // 与子目录同名的.rs文件，表示这个模块的入口\n    └── main.rs\n</code></pre><p>第五行代码到第七行代码组成 garden 模块，在 garden.rs 中，使用 <code>mod vegetables;</code> 导入 vegetables 子模块。</p><p>在main.rs中，用同样的方式导入 garden 模块。</p><pre><code class=\"language-plain\">mod garden;\n</code></pre><p>整个代码结构就这样一层一层地组织起来了。</p><p>另一种文件的组织形式来自2015 版，也很常见，有很多人喜欢用。</p><pre><code class=\"language-plain\">backyard\n├── Cargo.lock\n├── Cargo.toml\n└── src\n    ├── garden          // 子目录\n    │   └── mod.rs      // 子目录中有一个固定文件名 mod.rs，表示这个模块的入口\n    │   └── vegetables.rs\n    └── main.rs\n</code></pre><p>同上，由第五行到第七行代码组成garden模块，在 main.rs 中导入它使用。</p><p>你可以在本地创建文件，来体会两种不同目录组织形式的区别。</p><h3>测试</h3><p>Rust语言中自带单元测试和集成测试方案。我们来看一个示例，在src/lib.rs 或 src/main.rs 下有一段代码。</p><pre><code class=\"language-plain\">fn foo() -&gt; u32 { 10u32 }\n\n#[cfg(test)]            // 这里配置测试模块\nmod tests {\n&nbsp; &nbsp; use crate::foo;\n&nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; #[test]             // 具体的单元测试用例\n&nbsp; &nbsp; fn it_works() {\n&nbsp; &nbsp; &nbsp; &nbsp; let result = foo();           // 调用被测试的函数或功能\n&nbsp; &nbsp; &nbsp; &nbsp; assert_eq!(result, 10u32);    // 断言\n&nbsp; &nbsp; }\n}\n</code></pre><p>在项目目录下运行 <code>cargo test</code>，会输出类似如下结果。</p><pre><code class=\"language-plain\">running 1 test\ntest tests::it_works ... ok\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nrunning 0 tests\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n</code></pre><p>Rust自带测试方案，让我们能够非常方便地写测试用例，并且统一了社区的测试设计规范。</p><h3>配置文件 Cargo.toml</h3><p>这节课开头的时候，我们简单介绍过Cargo.toml，它是Rust语言包和依赖管理器Cargo的配置文件，由官方定义约定。写Rust代码基本都会按照这种约定来使用它，对所在工程进行配置。这里面其实包含的知识点非常多，后面实战的部分，我们会详细解释用到的特性。</p><p>我们要对包依赖这件事情的复杂度有所了解。不知道你有没有听说过<strong> npm依赖黑洞</strong>？指的就是Node.js的包依赖太多太琐碎了。这怪不得Node.js，其实Rust也类似。包依赖这件事儿，本身就很复杂，可以说这是软件工程固有的复杂性。对固有复杂性，不能绕弯过，只能正面刚。</p><p>幸运的是，Cargo工具已经帮我们搞定了包依赖相关方方面面的麻烦事（此刻C++社区羡慕不已）。为了应对这种复杂性，Cargo工具的提供了非常多的特性，配置起来也相对比较复杂。有兴趣的话，你可以详细了解一下<a href=\"https://doc.rust-lang.org/cargo/\">各种配置属性</a>。</p><h2>小结</h2><p>这节课我们洋洋洒洒罗列了写一个Rust程序所需要用到的基本的语法结构和数据类型，让你对Rust语言有了一个初步印象。这些知识点虽多，但并不复杂。因为这节课呈现的绝大部分元素都能在其他语言中找到，所以理解起来应该不算太难。</p><p>这节课出现了一个比较重要的指标：<strong>是否能在编译期计算出某个数据类型在运行过程中占用的内存空间的大小</strong>。如果能计算出，那我们称之为固定尺寸的数据类型；如果不能计算出，那我们称之为不固定尺寸的数据类型，或动态数据类型。</p><p>其实这也很好理解，因为Rust要尽量在编译期间多做一些事情，帮我们做安全性的检查。而在编译期只有能计算出内存尺寸的数据类型，才能被更详尽地去分析和检查，就是这个原理。</p><h2>思考题</h2><ol>\n<li>Rust中能否实现类似 JS 中的 number 这种通用的数字类型呢？</li>\n<li>Rust中能否实现Python中那种无限大小的数字类型呢？</li>\n</ol><p>希望你可以积极思考这几个问题，然后把你的答案分享到评论区，如果你觉得这节课对你有帮助的话，也欢迎你分享给你的朋友，邀他一起学习，我们共同进步。下节课再见！</p>","neighbors":{"left":{"article_title":"开篇词｜拥抱Rust浪潮，迎接更极致的编程体验","id":718813},"right":{"article_title":"02｜所有权（上）：Rust是如何管理程序中的资源的？","id":718916}},"comments":[{"had_liked":false,"id":383242,"user_name":"学会用实力去谈条件","can_delete":false,"product_type":"c1","uid":1743123,"ip_address":"广西","ucode":"4D4994BE3919CC","user_header":"https://static001.geekbang.org/account/avatar/00/1a/99/13/2b325b02.jpg","comment_is_top":false,"comment_ctime":1698742102,"is_pvip":false,"replies":[{"id":139620,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698806493,"ip_address":"重庆","comment_id":383242,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"推荐几个Rust的VsCode插件\nRust Syntax：语法高亮\ncrates：分析项目依赖\nEven Better Toml：项目配置管理\nRust Test Lens：Rust快速测试","like_count":22,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630708,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698806493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3070613,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/GUYEdkZwS6icOYHPhwhkXNsxficiaoDnxRbXibgS6iakpIwiajN6UMb8oDucMaiaORaPqRkyaCL84ApaiaRKPwiaKPDzTXA/132","nickname":"士心23","note":"","ucode":"ADE597E88C3EC1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645745,"discussion_content":"RustRover解君愁，Java程序员用惯了Jetbrain家的IDE","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716634398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630788,"discussion_content":"感谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698892992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383121,"user_name":"warning","can_delete":false,"product_type":"c1","uid":2903392,"ip_address":"上海","ucode":"632A62C2756A50","user_header":"https://static001.geekbang.org/account/avatar/00/2c/4d/60/1aa99bd9.jpg","comment_is_top":false,"comment_ctime":1698478909,"is_pvip":true,"replies":[{"id":139560,"content":"建议看完这个再去看那个书。因为有些先入为主的理解如果不是很准确的话，会影响后面的学习。","user_name":"作者回复","user_name_real":"作者","uid":2186062,"ctime":1698502452,"ip_address":"重庆","comment_id":383121,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"看完了Rust语言圣经，再看这个还感觉有些吃力需要时不时的看看之前的笔记。课程并不适合没接触过Rust的小白，需要自己花些时间去找别的资料进行补充","like_count":7,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630468,"discussion_content":"建议看完这个再去看那个书。因为有些先入为主的理解如果不是很准确的话，会影响后面的学习。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1698502452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3736170,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/fLI3NSG6qScRzrMBQzuXHzAY0QyialcvoadMd662U7hxhJe7jlpAPgjtRPTicE91lWWSJx80TRrXXaVja59YJQ9g/132","nickname":"Geek_07ce33","note":"","ucode":"E4E4C89A024433","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635819,"discussion_content":"还是看这个入门吧。中国人嘴里讲出来，特别适合中国宝宝的体质。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705244230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3670432,"avatar":"https://static001.geekbang.org/account/avatar/00/38/01/a0/36ad3dd6.jpg","nickname":"Live","note":"","ucode":"E73DB8F2C5D1F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633654,"discussion_content":"我也是先看的那个，只不过只看了基础部分，现在准备先看看课，在看看管网的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702436269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3791900,"avatar":"","nickname":"Geek_2bd44f","note":"","ucode":"6BD3312C2AAC69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632940,"discussion_content":"rust 圣经需要大概过一遍官方的书，再去看才会有收获，要不然你可能会懵逼，特别是练习题和课程有时候不对应","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701660556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3779530,"avatar":"https://static001.geekbang.org/account/avatar/00/39/ab/ca/32d6c05d.jpg","nickname":"哄哄","note":"","ucode":"F75FB23BEDC60A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631146,"discussion_content":"那个圣经，我觉得作者理解有限","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699345209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1513948,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/dc/9d3ed421.jpg","nickname":"monchickey","note":"","ucode":"D7B670444F62B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3779530,"avatar":"https://static001.geekbang.org/account/avatar/00/39/ab/ca/32d6c05d.jpg","nickname":"哄哄","note":"","ucode":"F75FB23BEDC60A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632323,"discussion_content":"那个讲的有些乱，建议参考官方的 book 把基础打牢固","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700655125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":631146,"ip_address":"山东","group_id":0},"score":632323,"extra":""},{"author":{"id":1203049,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/69/7ace1ddb.jpg","nickname":"独钓寒江","note":"","ucode":"2C81906FD88C8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1513948,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/dc/9d3ed421.jpg","nickname":"monchickey","note":"","ucode":"D7B670444F62B3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638221,"discussion_content":"可以分享一下官方介绍的书的链接吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709371686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":632323,"ip_address":"广东","group_id":0},"score":638221,"extra":""}]}]},{"had_liked":false,"id":383805,"user_name":"知夫","can_delete":false,"product_type":"c1","uid":1198257,"ip_address":"北京","ucode":"A99C470AC85D1E","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/b1/7214b986.jpg","comment_is_top":false,"comment_ctime":1699673645,"is_pvip":false,"replies":[{"id":139992,"content":"https:&#47;&#47;github.com&#47;tokio-rs&#47;mini-redis&#47;tree&#47;master 算比较适合初学者的项目。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699846735,"ip_address":"重庆","comment_id":383805,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"可以推荐一个项目结构的最佳实践吗？ 能囊括lib，bin，示例，单元测试，性能测试等。","like_count":4,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631620,"discussion_content":"https://github.com/tokio-rs/mini-redis/tree/master 算比较适合初学者的项目。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1699846735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2853524,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/8a/94/cbbf8b4d.jpg","nickname":"天穹智能","note":"","ucode":"989318E61BDDCB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631611,"discussion_content":"同求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699842504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383823,"user_name":"草剑","can_delete":false,"product_type":"c1","uid":1026310,"ip_address":"重庆","ucode":"C6DA55E7E1B701","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/06/9811fb65.jpg","comment_is_top":false,"comment_ctime":1699753986,"is_pvip":false,"replies":[{"id":139990,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699846551,"ip_address":"重庆","comment_id":383823,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"windows 中，不想安装 visual studio，想使用 gnu 工具链：\nrustup default stable-gnu\n","like_count":3,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631618,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699846551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382895,"user_name":"eriklee","can_delete":false,"product_type":"c1","uid":2826132,"ip_address":"北京","ucode":"6F755DB7C29DD6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIyhbzdkFM64Npva5ZKf4IPwhy6rDAX0L77QNESbalnXhnGKibcTbwtSaNC0hO6z0icO8DYI9Nf4xwg/132","comment_is_top":false,"comment_ctime":1698156381,"is_pvip":false,"replies":[{"id":139485,"content":"对的，Rust专用IDE","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698208788,"ip_address":"重庆","comment_id":382895,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"IDE推荐一波RustRover，jetbrains家新出的，现在免费使用阶段","like_count":3,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630248,"discussion_content":"对的，Rust专用IDE","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698208789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052528,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0f/70/cdef7a3d.jpg","nickname":"Joe Black","note":"","ucode":"21FE222A286445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630779,"discussion_content":"等出正式版会买一个，确实好用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698887724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2702330,"avatar":"https://static001.geekbang.org/account/avatar/00/29/3b/fa/05f8e53c.jpg","nickname":"bobo","note":"","ucode":"602C77000B24E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1052528,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0f/70/cdef7a3d.jpg","nickname":"Joe Black","note":"","ucode":"21FE222A286445","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638091,"discussion_content":"用惯了idea的快捷键就很不适应这个的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709218016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630779,"ip_address":"辽宁","group_id":0},"score":638091,"extra":""},{"author":{"id":1052528,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0f/70/cdef7a3d.jpg","nickname":"Joe Black","note":"","ucode":"21FE222A286445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2702330,"avatar":"https://static001.geekbang.org/account/avatar/00/29/3b/fa/05f8e53c.jpg","nickname":"bobo","note":"","ucode":"602C77000B24E7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646889,"discussion_content":"哈哈，正好我从来没用过idea开发。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1718960741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":638091,"ip_address":"河南","group_id":0},"score":646889,"extra":""}]}]},{"had_liked":false,"id":382840,"user_name":"阿五","can_delete":false,"product_type":"c1","uid":1238623,"ip_address":"广东","ucode":"70047A6A38FC3D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/5f/2e620b89.jpg","comment_is_top":false,"comment_ctime":1698112630,"is_pvip":false,"replies":[{"id":139428,"content":"厉害的！","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698119220,"ip_address":"重庆","comment_id":382840,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"\n虽然 Rust 不像 JavaScript 那样具有动态的通用数字类型，但你可以通过使用 num crate 和 Rust 的强类型系统来实现类似的通用数字操作。","like_count":3,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630118,"discussion_content":"厉害的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698119220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1051873,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0c/e1/f663213e.jpg","nickname":"拾掇拾掇","note":"","ucode":"D775F374C2A1D3","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630331,"discussion_content":"小白不懂呀\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698321365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383939,"user_name":"Levix","can_delete":false,"product_type":"c1","uid":1272749,"ip_address":"中国台湾","ucode":"A82CE7EF74B311","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/ad/cf2e924e.jpg","comment_is_top":false,"comment_ctime":1699968816,"is_pvip":false,"replies":[{"id":140093,"content":"非常棒，谢谢分享","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700015125,"ip_address":"重庆","comment_id":383939,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"https:&#47;&#47;synctoai.com&#47;rustclosures\n看了老师的第一节课，然后觉得闭包有点难理解，跑去问了下 GPT 后，整理出来一篇文档，希望对大家有用。","like_count":2,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631827,"discussion_content":"非常棒，谢谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700015125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383427,"user_name":"Ransang","can_delete":false,"product_type":"c1","uid":1133041,"ip_address":"上海","ucode":"DB67566A627DF2","user_header":"https://static001.geekbang.org/account/avatar/00/11/49/f1/bd61dbb1.jpg","comment_is_top":false,"comment_ctime":1699010689,"is_pvip":false,"replies":[{"id":139732,"content":"rust里面，fn可以定义在另一个fn里面，就是局限作用域呗，其他函数不能访问到这个内部函数。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699191528,"ip_address":"重庆","comment_id":383427,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"闭包那个测试里，为什么main函数里面可以有其他函数，就是fn里面套了一个fn ，他们之间有什么关系吗","like_count":2,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630987,"discussion_content":"rust里面，fn可以定义在另一个fn里面，就是局限作用域呗，其他函数不能访问到这个内部函数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699191528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1508755,"avatar":"https://static001.geekbang.org/account/avatar/00/17/05/93/3c3f2a6d.jpg","nickname":"安石","note":"","ucode":"185AD0046CF1C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":643580,"discussion_content":"JSer对这个表示很熟悉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1714441787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382849,"user_name":"🤔","can_delete":false,"product_type":"c1","uid":1066834,"ip_address":"广东","ucode":"4DAE32D4820509","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/52/5205764a.jpg","comment_is_top":false,"comment_ctime":1698117007,"is_pvip":false,"replies":[{"id":139432,"content":"可以看这里：https:&#47;&#47;doc.rust-lang.org&#47;std&#47;primitive.char.html#validity   这里确实比较细节，我是按std标准库文档里面的说法来的。可以参照理解。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698119498,"ip_address":"重庆","comment_id":382849,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"关于char的unicode散列值，gpt4的说明是：\nUnicode 是一种字符集（Character Set），用于对世界上大多数语言的字符进行编码。不同于 ASCII 码仅包括了基本的英文字符和控制字符，Unicode 意在包括世界上所有的字符，包括字母、符号、表情符号（emoji）等。\n\n在 Unicode 标准中，每个字符都有一个唯一的标识符，通常称为代码点（Code Point）。这些代码点是用整数表示的，一般用十六进制的形式来展示。例如，英文字母 &quot;A&quot; 的 Unicode 代码点是 U+0041，而中文字符 &quot;中&quot; 的 Unicode 代码点是 U+4E2D。\n\n散列值一般用于描述数据结构中用于快速查找的数值标识，但在这里（Rust 的 char 类型存的是 Unicode &quot;散列值&quot;），这种说法不太准确。实际上，Rust 的 char 类型存储的是 Unicode 代码点。\n\n老师可以解答一下吗","like_count":2,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630122,"discussion_content":"可以看这里：https://doc.rust-lang.org/std/primitive.char.html#validity   这里确实比较细节，我是按std标准库文档里面的说法来的。可以参照理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698119498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1066834,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/52/5205764a.jpg","nickname":"🤔","note":"","ucode":"4DAE32D4820509","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":630123,"discussion_content":"谢谢～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698119982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630122,"ip_address":"广东","group_id":0},"score":630123,"extra":""}]}]},{"had_liked":false,"id":388043,"user_name":"独钓寒江","can_delete":false,"product_type":"c1","uid":1203049,"ip_address":"广东","ucode":"2C81906FD88C8C","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/69/7ace1ddb.jpg","comment_is_top":false,"comment_ctime":1709212171,"is_pvip":false,"replies":[{"id":141311,"content":"Windows 上优先选择msvc，少很多麻烦。 gnu可用于编译从linux来的程序，比如gtk gui界面程序等。 ","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1709308302,"ip_address":"加拿大","comment_id":388043,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"可以说说GNU 工具链的版本 和 MSVC 工具链的版本 有什么区别吗？ 应该怎么选择呢？","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638182,"discussion_content":"Windows 上优先选择msvc，少很多麻烦。 gnu可用于编译从linux来的程序，比如gtk gui界面程序等。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709308302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":1,"child_discussions":[{"author":{"id":1203049,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/69/7ace1ddb.jpg","nickname":"独钓寒江","note":"","ucode":"2C81906FD88C8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":638272,"discussion_content":"谢谢解答指引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709458038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":638182,"ip_address":"广东","group_id":0},"score":638272,"extra":""}]}]},{"had_liked":false,"id":384593,"user_name":"weineel","can_delete":false,"product_type":"c1","uid":1049741,"ip_address":"江苏","ucode":"6DC6EF4F256A53","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","comment_is_top":false,"comment_ctime":1701217954,"is_pvip":true,"replies":[{"id":140284,"content":"小版本version 6周滚动一次，版次edition是为了提供稳定的特性集。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1701220192,"ip_address":"重庆","comment_id":384593,"utype":1}],"discussion_count":1,"race_medal":1,"score":3,"product_id":100626901,"comment_content":"老师好\n版次是什么？\n为什么要 3 年发布一次？\n和版本有什么区别？","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632691,"discussion_content":"小版本version 6周滚动一次，版次edition是为了提供稳定的特性集。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1701220192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383601,"user_name":"J²","can_delete":false,"product_type":"c1","uid":1100048,"ip_address":"广东","ucode":"17D9D30F90F97C","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/10/65fe5b06.jpg","comment_is_top":false,"comment_ctime":1699333367,"is_pvip":false,"replies":[{"id":139799,"content":"加油","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699363700,"ip_address":"重庆","comment_id":383601,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"工作之余，正在艰难抽空学习rust，希望这次能坚持学完并且入门。","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631175,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699363700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382802,"user_name":"uyplayer","can_delete":false,"product_type":"c1","uid":2975298,"ip_address":"上海","ucode":"03ACCB446FBD3B","user_header":"https://static001.geekbang.org/account/avatar/00/2d/66/42/8a645285.jpg","comment_is_top":false,"comment_ctime":1698061687,"is_pvip":false,"replies":[{"id":139418,"content":"没有用main()函数包起来呢，怎么编译通过的？","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698119045,"ip_address":"重庆","comment_id":382802,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100626901,"comment_content":" println!(&quot;Hello World! this is first commit in Rust&quot;)","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630108,"discussion_content":"没有用main()函数包起来呢，怎么编译通过的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698119045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1262181,"avatar":"https://static001.geekbang.org/account/avatar/00/13/42/65/5bfd0a65.jpg","nickname":"coming","note":"","ucode":"7625CE61D9A2D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630487,"discussion_content":"jupyter 安装插件，来运行rust， 来记笔记不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698559223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393406,"user_name":"Geek_5c44aa","can_delete":false,"product_type":"c1","uid":2428523,"ip_address":"山东","ucode":"58AB2197E00F8F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erwIgbTd3oy4ESHr6bX9iblONuwgU0MWHcgxndWwNNRQGXlhicduummSiamfTcxHsicicxR4nElxzj280Q/132","comment_is_top":false,"comment_ctime":1723714489,"is_pvip":false,"replies":[{"id":142873,"content":"没有呀，同学刷新一下之类的？","user_name":"编辑回复","user_name_real":"编辑","uid":2852467,"ctime":1723716596,"ip_address":"北京","comment_id":393406,"utype":2}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"语音讲解是不是有问题？都在那段IDE介绍里循环播放","like_count":0,"discussions":[{"author":{"id":2852467,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/86/73/5190bbde.jpg","nickname":"苏果果","note":"","ucode":"12A62ED032F345","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649678,"discussion_content":"没有呀，同学刷新一下之类的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1723716596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388258,"user_name":"独钓寒江","can_delete":false,"product_type":"c1","uid":1203049,"ip_address":"中国香港","ucode":"2C81906FD88C8C","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/69/7ace1ddb.jpg","comment_is_top":false,"comment_ctime":1709726237,"is_pvip":false,"replies":[{"id":141753,"content":"强行，就是手动的意思。如果不写这个 \\0，是不能生成类c字符串的。另外，最新版本rust中，可以用 c&quot;&quot; 来定义这种c字符串了。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1713028821,"ip_address":"加拿大","comment_id":388258,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"    &#47;&#47; 强行在字符串后面加个0，与C语言的字符串一致。 \n    let byte_escape = &quot;I&#39;m saying hello.\\0&quot;; \n    println!(&quot;{}&quot;, byte_escape); \n\n以上的代码，按注释，我理解打印出来的结果是在字符串后显示一个0， 实际打印结果是“I&#39;m saying hello.”\n看了一下紧接着的参考文章 -- Tokens - The Rust Reference (rust-lang.org)， \\0代表Null， 那输出结果是正常的\n\n可以多说一下“强行在字符串后面加个0”吗？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641835,"discussion_content":"强行，就是手动的意思。如果不写这个 \\0，是不能生成类c字符串的。另外，最新版本rust中，可以用 c&#34;&#34; 来定义这种c字符串了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713028821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":1,"child_discussions":[{"author":{"id":1389584,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4Is6kDeJDasxicicYDmJSlISqUpzpW8GEchDxlv6wgNKOfsjPQnrqpKpO8QMaBoEOkyTEUDiagcAdw/132","nickname":"LemonCat-","note":"","ucode":"6098775C363AD8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":648638,"discussion_content":"这里结合上下文，描述的是控制台的结果，我看的时候也和层主理解一致，感觉有些奇怪，运行后确实没打印 0，问了 GPT 才明白，这是 C 语言的终止符，用来生成 C 语言或者 FFI 函数能够理解的字符串。看到我不是一个人，建议这个中文描述考虑改一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1721898986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":641835,"ip_address":"上海","group_id":0},"score":648638,"extra":""}]}]},{"had_liked":false,"id":388100,"user_name":"林子茗","can_delete":false,"product_type":"c1","uid":2337884,"ip_address":"广东","ucode":"59EDCECD54731F","user_header":"https://static001.geekbang.org/account/avatar/00/23/ac/5c/bb67abe6.jpg","comment_is_top":false,"comment_ctime":1709351067,"is_pvip":false,"replies":[{"id":141757,"content":"在本课程最后一讲有关于这个的讨论和实战。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1713029072,"ip_address":"加拿大","comment_id":388100,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"思考题1：采用f64，所有数字类型都转成f64，问题是丢失精度，大整数精度丢失严重。\n2：Python数字类型是不可变的Number对象类型，若在Rust中使用结构体来封装数字类型一样可以实现无限大小，但是性能太差、太耗内存。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641839,"discussion_content":"在本课程最后一讲有关于这个的讨论和实战。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713029072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":387609,"user_name":"xhsndl","can_delete":false,"product_type":"c1","uid":3803175,"ip_address":"贵州","ucode":"22C4A146B1B63A","user_header":"https://static001.geekbang.org/account/avatar/00/3a/08/27/0bd80208.jpg","comment_is_top":false,"comment_ctime":1708243845,"is_pvip":false,"replies":[{"id":141263,"content":"答得过于模糊了同学。而且第二句方向不对。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1708823308,"ip_address":"加拿大","comment_id":387609,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"rust问答题，\n构建自定义数据类型？\n构建自定义常量？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637688,"discussion_content":"答得过于模糊了同学。而且第二句方向不对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708823308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":387579,"user_name":"脱尼","can_delete":false,"product_type":"c1","uid":1579987,"ip_address":"广东","ucode":"627947E7BED072","user_header":"https://static001.geekbang.org/account/avatar/00/18/1b/d3/5cf53a64.jpg","comment_is_top":false,"comment_ctime":1708150246,"is_pvip":false,"replies":[{"id":141267,"content":"foo() 定义前加一个 pub?","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1708823628,"ip_address":"加拿大","comment_id":387579,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"写单元测试的时候 use crate::foo; 会报错编译不通过。请问是啥原因？vscode 中\nfn foo() -&gt; i32 {\n    10i32\n}\n\n#[cfg(test)]\nmod tests {\n    use crate::foo;\n\n    #[test]\n    fn it_works() {\n        assert_eq!(foo(), 10i32);\n    }\n}","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637692,"discussion_content":"foo() 定义前加一个 pub?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708823628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":387578,"user_name":"脱尼","can_delete":false,"product_type":"c1","uid":1579987,"ip_address":"广东","ucode":"627947E7BED072","user_header":"https://static001.geekbang.org/account/avatar/00/18/1b/d3/5cf53a64.jpg","comment_is_top":false,"comment_ctime":1708147057,"is_pvip":false,"replies":[{"id":141248,"content":"不是哈，简单的代码copilot输出一样可以理解的😃","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1708627366,"ip_address":"加拿大","comment_id":387578,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"请教下老师您的代码是用 copilot 辅助写的吗？ 这边发现用 vscode + copilot 输出的code prompt 几乎和您的文章一样的，太赞了！","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637559,"discussion_content":"不是哈，简单的代码copilot输出一样可以理解的😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708627366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":387452,"user_name":"lhy","can_delete":false,"product_type":"c1","uid":1666587,"ip_address":"海南","ucode":"BF07A5E471CC8E","user_header":"https://static001.geekbang.org/account/avatar/00/19/6e/1b/8ea8f15c.jpg","comment_is_top":false,"comment_ctime":1707298894,"is_pvip":false,"replies":[{"id":141264,"content":"可以呀。但是在windows上本身就有wsl，可以参考vscode的远程编辑来配置。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1708823371,"ip_address":"加拿大","comment_id":387452,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100626901,"comment_content":"想问下，我现在想在windows上装rustrover，然后远程连接到linux服务器上进行编译调试开发，这种可行吗？   因为不想在本机上去整windows相关的依赖问题。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637689,"discussion_content":"可以呀。但是在windows上本身就有wsl，可以参考vscode的远程编辑来配置。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708823371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200773,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/85/b45fe181.jpg","nickname":"Noah","note":"","ucode":"52A919FF51DAC4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645601,"discussion_content":"我的感觉是不太好用，VSCode的远程更好用点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716424397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385885,"user_name":"月色很美","can_delete":false,"product_type":"c1","uid":1724017,"ip_address":"浙江","ucode":"0D8C5D3D6F1641","user_header":"https://static001.geekbang.org/account/avatar/00/1a/4e/71/bdfb050c.jpg","comment_is_top":false,"comment_ctime":1703583004,"is_pvip":false,"replies":[{"id":140638,"content":"都可以，现在社区里面两种势均力敌","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703644982,"ip_address":"重庆","comment_id":385885,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"请教下老师，模块管理建议用新的还是2015的呢","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634546,"discussion_content":"都可以，现在社区里面两种势均力敌","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703644982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385860,"user_name":"HdUIprince","can_delete":false,"product_type":"c1","uid":1262168,"ip_address":"中国香港","ucode":"2510EBFACDBDB2","user_header":"https://static001.geekbang.org/account/avatar/00/13/42/58/2286eca6.jpg","comment_is_top":false,"comment_ctime":1703521867,"is_pvip":false,"replies":[{"id":140627,"content":"就是 “aaa\nBbb\nCcc”\n这样是可以的","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703577434,"ip_address":"重庆","comment_id":385860,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"&quot;Rust 中的字符串字面量都支持换行写，默认把换行符包含进去。&quot;，老师这句话啥意思呀？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634493,"discussion_content":"就是 “aaa\nBbb\nCcc”\n这样是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703577434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":1,"child_discussions":[{"author":{"id":1200773,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/85/b45fe181.jpg","nickname":"Noah","note":"","ucode":"52A919FF51DAC4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":645602,"discussion_content":"😯那和Python的三引号保持原样输出一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716424649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":634493,"ip_address":"江苏","group_id":0},"score":645602,"extra":""}]}]},{"had_liked":false,"id":385184,"user_name":"稍后重试","can_delete":false,"product_type":"c1","uid":1273130,"ip_address":"广东","ucode":"D06ECCFABC2403","user_header":"https://static001.geekbang.org/account/avatar/00/13/6d/2a/6173d3f7.jpg","comment_is_top":false,"comment_ctime":1702274350,"is_pvip":false,"replies":[{"id":140407,"content":"都能用，win下安装后也能用","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1702289596,"ip_address":"重庆","comment_id":385184,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"cargo 命令行工具 是来Linux终端里面的工具么？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633538,"discussion_content":"都能用，win下安装后也能用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702289596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385035,"user_name":"Mango","can_delete":false,"product_type":"c1","uid":1560032,"ip_address":"重庆","ucode":"CCD3A91D69555D","user_header":"https://static001.geekbang.org/account/avatar/00/17/cd/e0/7ba3c15d.jpg","comment_is_top":false,"comment_ctime":1701957996,"is_pvip":false,"replies":[{"id":140385,"content":"好滴","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1702050868,"ip_address":"重庆","comment_id":385035,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"看了国外rust与java的对比，性能吊打，我就要来学一学，看看怎么个事","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633384,"discussion_content":"好滴","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702050869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384817,"user_name":"雅致","can_delete":false,"product_type":"c1","uid":1440317,"ip_address":"北京","ucode":"1D7A82A3760F38","user_header":"https://static001.geekbang.org/account/avatar/00/15/fa/3d/89e753be.jpg","comment_is_top":false,"comment_ctime":1701612509,"is_pvip":false,"replies":[{"id":140320,"content":"这块需要在具体场景中用数据说话。目前业界已经有相关的评测信息。你可以搜一下 discord，字节，influxdb等的相关信息。rust带来的效率提升是非常大的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1701740882,"ip_address":"重庆","comment_id":384817,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"没有看到 rest 优势的介绍，比如 性能 内存占用 高并发项目当中的实际情况，相比 Java go 的优势有哪些，同样一个服务用 go 和 rest 写资源损耗和性能是否能更优秀","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632991,"discussion_content":"这块需要在具体场景中用数据说话。目前业界已经有相关的评测信息。你可以搜一下 discord，字节，influxdb等的相关信息。rust带来的效率提升是非常大的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701740882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384795,"user_name":"aloha66","can_delete":false,"product_type":"c1","uid":1469820,"ip_address":"广东","ucode":"60AF4685BF38A2","user_header":"https://static001.geekbang.org/account/avatar/00/16/6d/7c/e91866cf.jpg","comment_is_top":false,"comment_ctime":1701533032,"is_pvip":false,"replies":[{"id":140319,"content":"看看下面给的完整源码","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1701740662,"ip_address":"重庆","comment_id":384795,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"&#47;&#47; 闭包的定义2，省略了类型标注\n    let add_one_v3 = |x|             { x + 1 };\n  Compiling playground v0.0.1 (&#47;playground)\nerror[E0282]: type annotations needed\n报了这个错，现在是需要类型了？？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632989,"discussion_content":"看看下面给的完整源码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701740662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2884396,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/03/2c/aa7368c5.jpg","nickname":"谁书","note":"","ucode":"59728649820D53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645880,"discussion_content":"|x| 不能省略类型，正确的是 |x:i32|","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716946733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384132,"user_name":"dj_ukyo","can_delete":false,"product_type":"c1","uid":1015588,"ip_address":"北京","ucode":"0ED26B6E5416E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/24/d9fbe1e8.jpg","comment_is_top":false,"comment_ctime":1700385237,"is_pvip":false,"replies":[{"id":140160,"content":"是的，这个是C中的字符串结束符，不会体现在打印信息上。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1700540354,"ip_address":"重庆","comment_id":384132,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"&quot;强行在字符串后面加个\\0，与C语言的字符串一致。&quot;\n1. 我没有看到任何内容\n2. 是本来就不显示吗？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632175,"discussion_content":"是的，这个是C中的字符串结束符，不会体现在打印信息上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700540354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383818,"user_name":"简爱","can_delete":false,"product_type":"c1","uid":2826204,"ip_address":"北京","ucode":"CEA61CBC8949DA","user_header":"https://static001.geekbang.org/account/avatar/00/2b/1f/dc/682fa185.jpg","comment_is_top":false,"comment_ctime":1699712703,"is_pvip":false,"replies":[{"id":139989,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699846547,"ip_address":"重庆","comment_id":383818,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"https:&#47;&#47;blog.csdn.net&#47;qq_42108074&#47;article&#47;details&#47;129250580，Windows 11中搭建Rust环境，使用VS Code做为编辑器","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631617,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699846547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383716,"user_name":"My dream","can_delete":false,"product_type":"c1","uid":1077733,"ip_address":"四川","ucode":"2FEFB344230C17","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/e5/bcdc382a.jpg","comment_is_top":false,"comment_ctime":1699510176,"is_pvip":false,"replies":[{"id":139947,"content":"往后看","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699527009,"ip_address":"重庆","comment_id":383716,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"怎么将String类型的字符串分组成单个字符组成的数组，或者按指定字符如逗号，分割成数组？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631437,"discussion_content":"往后看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699527009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383687,"user_name":"路","can_delete":false,"product_type":"c1","uid":2291761,"ip_address":"山东","ucode":"B914A26CC456A1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLib098UOLAHuEn82MYuaGibv5hUsgy8MFzo16GG3sSeH3t8O574icAMZG77X9aDqg2nmpDy9iad9OusA/132","comment_is_top":false,"comment_ctime":1699449892,"is_pvip":false,"replies":[{"id":139934,"content":"再买本rust书来搭配，毕竟这个课程不能面面俱到，另外就是要边看边在playground里面练习","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699505322,"ip_address":"重庆","comment_id":383687,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100626901,"comment_content":"不会任何代码，直接就买了，能学会不，需要怎么补充，或者搭配？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631401,"discussion_content":"再买本rust书来搭配，毕竟这个课程不能面面俱到，另外就是要边看边在playground里面练习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699505322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383466,"user_name":"VIC","can_delete":false,"product_type":"c1","uid":2657477,"ip_address":"河南","ucode":"645F8AB1F09D6C","user_header":"https://static001.geekbang.org/account/avatar/00/28/8c/c5/79bf2301.jpg","comment_is_top":false,"comment_ctime":1699093256,"is_pvip":false,"replies":[{"id":139733,"content":"结构体 积类型 product type。enum 和类型 sum type。积类型就是所有成员同时起作用的类型，和类型就是成员中的其中一个起作用的类型。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699191939,"ip_address":"重庆","comment_id":383466,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"在rust基础语法图中的结构体后边的 积类型 是不是应该更换为 和类型？😄","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630988,"discussion_content":"结构体 积类型 product type。enum 和类型 sum type。积类型就是所有成员同时起作用的类型，和类型就是成员中的其中一个起作用的类型。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1699191940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383413,"user_name":"Distance","can_delete":false,"product_type":"c1","uid":1109780,"ip_address":"北京","ucode":"B30FAFE1F64D3D","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/14/83867b58.jpg","comment_is_top":false,"comment_ctime":1699000383,"is_pvip":false,"replies":[{"id":139734,"content":"error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n --&gt; src&#47;main.rs:4:9\n  |\n4 |     let b = a[..3];\n  |         ^ doesn&#39;t have a size known at compile-time\n  |\n\n你要让一个变量持有一个编译期尺寸未知的对象，得用引用或其他指针形式。你像String和Vec就是指针形式。后面会讲到这个。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1699192660,"ip_address":"重庆","comment_id":383413,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"有个问题想问一下, 对于数组切片, 为什么必须要加引用呢?\nlet test = vec![1, 2, 3];\nprintln!(&quot;{:?}&quot;, test[..2]); &#47;&#47; 会报错\nprintln!(&quot;{:?}&quot;, &amp;test[..2]); &#47;&#47; 不会报错","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630989,"discussion_content":"error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n --&gt; src/main.rs:4:9\n  |\n4 |     let b = a[..3];\n  |         ^ doesn&#39;t have a size known at compile-time\n  |\n\n你要让一个变量持有一个编译期尺寸未知的对象，得用引用或其他指针形式。你像String和Vec就是指针形式。后面会讲到这个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699192661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383214,"user_name":"Noya","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"浙江","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/a15b477c.jpg","comment_is_top":false,"comment_ctime":1698697768,"is_pvip":false,"replies":[{"id":139616,"content":"👍👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698806210,"ip_address":"重庆","comment_id":383214,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"&#47;&#47; num_bigint\n```rust\nextern crate num_bigint;\nextern crate num_traits;\n\nuse num_bigint::BigUint;\nuse num_traits::One;\n\nfn main() {\n    let mut a: BigUint = One::one();\n    let b: BigUint = BigUint::parse_bytes(b&quot;100000000000000000000000000000&quot;, 10).unwrap();\n    println!(&quot;a = {}&quot;, a);\n    println!(&quot;b = {}&quot;, b);\n    a = a + b;\n    println!(&quot;a = {}&quot;, a);\n}\n\n```","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630704,"discussion_content":"👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698806211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383213,"user_name":"plh","can_delete":false,"product_type":"c1","uid":1031828,"ip_address":"四川","ucode":"D79F2B87AC3AD2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erEHTaQDkWqEYib9iabib8rACYpSFBHTPFmgicUKaib79MB6VIxNwiajHUS8kYFEKCGOjpibf0dibhIjqhfzg/132","comment_is_top":false,"comment_ctime":1698682489,"is_pvip":false,"replies":[{"id":139617,"content":"对的，无限大小的数字，其实就是自定义一个新类型，自己管理内存占用。这在所有语言里面都是一样的，在Rust可以通过第三方crate做到。这块的信息，可以搜 高精度数字类型 等关键字。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698806320,"ip_address":"重庆","comment_id":383213,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"思考题2:Rust 中能否实现 Python 中那种无限大小的数字类型呢？\n1. Rust 原生的数字类型,因为有具体的字节大小,可以确定范围,这个地方 官方有个博客 Sizedness in Rust  原文链接 https:&#47;&#47;github.com&#47;pretzelhammer&#47;rust-blog&#47;blob&#47;master&#47;posts&#47;sizedness-in-rust.md \n2. stackoverflow 上面有个5年前的提的同样问题,  https:&#47;&#47;stackoverflow.com&#47;questions&#47;56095102&#47;how-to-define-an-infinite-range-of-a-generic-integer-type-in-rust , 也没有答案.\n3. Python 中 无限大小的数据类型, 个人觉得 如果清楚其实现的原理,Rust 应该也可以做到实现. 如果不清楚原理, 从 Python 和 Rust 之间的互动 比如 pyo3, RustPython  中又是处理这个 数据对应的 问题的.\n\n暂时个人能力有限 , 希望学完本课程后能够得到心中答案.","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630705,"discussion_content":"对的，无限大小的数字，其实就是自定义一个新类型，自己管理内存占用。这在所有语言里面都是一样的，在Rust可以通过第三方crate做到。这块的信息，可以搜 高精度数字类型 等关键字。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698806320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383146,"user_name":"coming","can_delete":false,"product_type":"c1","uid":1262181,"ip_address":"上海","ucode":"7625CE61D9A2D2","user_header":"https://static001.geekbang.org/account/avatar/00/13/42/65/5bfd0a65.jpg","comment_is_top":false,"comment_ctime":1698559161,"is_pvip":false,"replies":[{"id":139570,"content":"省略类型标注的前提是能在上下文环境代码中找到足够的信息，比如下面这个代码里面的闭包就是省略了类型信息的表示。https:&#47;&#47;play.rust-lang.org&#47;?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=abbfe79ef90d992b9caeb58b2405ed20。文中代码需要优化一下表达方式。感谢指正！","user_name":"作者回复","user_name_real":"作者","uid":2186062,"ctime":1698587216,"ip_address":"重庆","comment_id":383146,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"是版本不一样吗？ 现在闭包， 不能省略类型了 \nhttps:&#47;&#47;play.rust-lang.org&#47;?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=96e65dbfc29ac352a164f385ef5aa562","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630508,"discussion_content":"省略类型标注的前提是能在上下文环境代码中找到足够的信息，比如下面这个代码里面的闭包就是省略了类型信息的表示。https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=abbfe79ef90d992b9caeb58b2405ed20。文中代码需要优化一下表达方式。感谢指正！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698587216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383122,"user_name":"A0.何文祥","can_delete":false,"product_type":"c1","uid":1052569,"ip_address":"广东","ucode":"2549126DAEA15D","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/99/0d72321f.jpg","comment_is_top":false,"comment_ctime":1698479177,"is_pvip":false,"replies":[{"id":139562,"content":"好想法。不过用枚举包裹不是那么方便，我们可以把这个问题留在第8讲去解决。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698502860,"ip_address":"重庆","comment_id":383122,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"Rust 中能否实现类似 JS 中的 number 这种通用的数字类型呢？\n是否可以利用枚举类型来实现这一点","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630470,"discussion_content":"好想法。不过用枚举包裹不是那么方便，我们可以把这个问题留在第8讲去解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698502860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383070,"user_name":"Geek_6fjt20","can_delete":false,"product_type":"c1","uid":1672482,"ip_address":"北京","ucode":"B7EB9B061E2C06","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqrbHib1v0wPRVHxrFK2CPQQX8Wg3rRMPiaZ5teMKu5klT48yns6yo4krZsIqHskwdEsibVvQ3QB7CUQ/132","comment_is_top":false,"comment_ctime":1698387647,"is_pvip":false,"replies":[{"id":139547,"content":"前者。替换栈中的变量的内容。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698418155,"ip_address":"重庆","comment_id":383070,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"let mut a = String::from(&quot;hello&quot;);\na = String::from(&quot;world&quot;);\n请问将字符串变量a的值从“hello”改为“world”是，是在堆中新创建&quot;world&quot;字符串值，然后将a在栈中的指针指向新的堆地址，还是将“hello”在堆内存中删掉，在这块地址中的值改为“world”？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630438,"discussion_content":"前者。替换栈中的变量的内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698418155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1672482,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqrbHib1v0wPRVHxrFK2CPQQX8Wg3rRMPiaZ5teMKu5klT48yns6yo4krZsIqHskwdEsibVvQ3QB7CUQ/132","nickname":"Geek_6fjt20","note":"","ucode":"B7EB9B061E2C06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":630519,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698628014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630438,"ip_address":"北京","group_id":0},"score":630519,"extra":""}]}]},{"had_liked":false,"id":382978,"user_name":"冷石","can_delete":false,"product_type":"c1","uid":1523432,"ip_address":"广东","ucode":"2A2B056A83E963","user_header":"https://static001.geekbang.org/account/avatar/00/17/3e/e8/3736f3cd.jpg","comment_is_top":false,"comment_ctime":1698250207,"is_pvip":false,"replies":[{"id":139503,"content":"加油加油","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698327698,"ip_address":"重庆","comment_id":382978,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"本篇作为快速入门很棒(๑•̀ㅂ•́)و✧","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630339,"discussion_content":"加油加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698327698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382854,"user_name":"negative","can_delete":false,"product_type":"c1","uid":1073244,"ip_address":"四川","ucode":"831B64E3FCA9F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/5c/d3adc78b.jpg","comment_is_top":false,"comment_ctime":1698126012,"is_pvip":true,"replies":[{"id":139465,"content":"char的存储是4个字节的存储，直接存的unicode scalar value，不是utf8编码哦。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698163902,"ip_address":"重庆","comment_id":382854,"utype":1}],"discussion_count":3,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"老师，关于这个【String 内部存储的是 Unicode 字符串的 UTF8 编码，而 char 直接存的是 Unicode Scalar Value】我也想问一下，我看了说明，scalar 就是除开 surrogate 之外的 unicode 字符，但是这个 unicode 字符不也应该是通过 UTF8 编码存起来的吗？这和String 内部存的 unicode 字符的 UTF8 编码，不就是一样的了吗？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630204,"discussion_content":"char的存储是4个字节的存储，直接存的unicode scalar value，不是utf8编码哦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698163902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1073244,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/5c/d3adc78b.jpg","nickname":"negative","note":"","ucode":"831B64E3FCA9F1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":630230,"discussion_content":"好的老师，我想我明白了，scalar value就是unicode 字符，UTF8编码是对字符的转化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698197219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630204,"ip_address":"四川","group_id":0},"score":630230,"extra":""}]},{"author":{"id":1073244,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/5c/d3adc78b.jpg","nickname":"negative","note":"","ucode":"831B64E3FCA9F1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630124,"discussion_content":"老师，我觉得也许应该从其他角度来比较这两个。比如 &amp;str 是硬编码到最后的可执行程序中的，而 String 是可变长度的，类比于对象，可以修改属性等。从编码的角度，它们都是 UTF-8 的编码，不知道我这样理解对不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698126706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382827,"user_name":"小新","can_delete":false,"product_type":"c1","uid":3163893,"ip_address":"天津","ucode":"6F1F1BE16A847F","user_header":"https://static001.geekbang.org/account/avatar/00/30/46/f5/f2ad6692.jpg","comment_is_top":false,"comment_ctime":1698074016,"is_pvip":false,"replies":[{"id":139424,"content":"VS Code吧？","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1698119129,"ip_address":"重庆","comment_id":382827,"utype":1}],"discussion_count":5,"race_medal":0,"score":5,"product_id":100626901,"comment_content":"mac系统选哪个ide好一点","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630114,"discussion_content":"VS Code吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698119129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018209,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/89/61/e989ee5c.jpg","nickname":"houseme","note":"","ucode":"888294955B1731","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630098,"discussion_content":"按照自己习惯来就可以了，各有所长","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698117766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2637539,"avatar":"https://static001.geekbang.org/account/avatar/00/28/3e/e3/5eceee85.jpg","nickname":"江东日暮云","note":"","ucode":"EDCB9A38CB8D8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630096,"discussion_content":"vscode","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698116458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"甘肃","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1260993,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ErtPogpTKQRNOVSoQba1e8UucNmfnuXEfmGUpmySiboTrTNI3eV723URgSALtBx6Zt5YC8LGqgaHlQz5oIBOxEA/132","nickname":"裕悦","note":"","ucode":"3453863AD870F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630095,"discussion_content":"Rustrover","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698115998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1519230,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/a15b477c.jpg","nickname":"Noya","note":"","ucode":"52EEB72E80BAF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1260993,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ErtPogpTKQRNOVSoQba1e8UucNmfnuXEfmGUpmySiboTrTNI3eV723URgSALtBx6Zt5YC8LGqgaHlQz5oIBOxEA/132","nickname":"裕悦","note":"","ucode":"3453863AD870F7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630589,"discussion_content":"这个还不太好用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698697725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630095,"ip_address":"浙江","group_id":0},"score":630589,"extra":""}]}]},{"had_liked":false,"id":392228,"user_name":"Geek_337881","can_delete":false,"product_type":"c1","uid":3922272,"ip_address":"广东","ucode":"632C54F3CD7EF6","user_header":"","comment_is_top":false,"comment_ctime":1720336630,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"可以通过枚举来实现通用数字类型。\n无限大小的数字可以实现！","like_count":0},{"had_liked":false,"id":391173,"user_name":"alexy","can_delete":false,"product_type":"c1","uid":1630242,"ip_address":"福建","ucode":"6ECFC6F6B21816","user_header":"https://static001.geekbang.org/account/avatar/00/18/e0/22/0812cfd5.jpg","comment_is_top":false,"comment_ctime":1717514453,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"第一节课学完打卡","like_count":0},{"had_liked":false,"id":390786,"user_name":"陽","can_delete":false,"product_type":"c1","uid":3895102,"ip_address":"白俄罗斯","ucode":"579358AB4E411C","user_header":"https://static001.geekbang.org/account/avatar/00/3b/6f/3e/d185b428.jpg","comment_is_top":false,"comment_ctime":1716278798,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"如果可以加上一些编译运行后的代码效果就好了，这样就可以让初学者学习时候运行看看对应内容是否一致。","like_count":0},{"had_liked":false,"id":386442,"user_name":"达芬奇","can_delete":false,"product_type":"c1","uid":2451310,"ip_address":"北京","ucode":"B174F5347557B3","user_header":"https://static001.geekbang.org/account/avatar/00/25/67/6e/ec7299ec.jpg","comment_is_top":false,"comment_ctime":1704844318,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"这一讲的内容好充实","like_count":0},{"had_liked":false,"id":384794,"user_name":"aloha66","can_delete":false,"product_type":"c1","uid":1469820,"ip_address":"广东","ucode":"60AF4685BF38A2","user_header":"https://static001.geekbang.org/account/avatar/00/16/6d/7c/e91866cf.jpg","comment_is_top":false,"comment_ctime":1701532951,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100626901,"comment_content":"&#47;&#47; 闭包的定义2，省略了类型标注\n    let add_one_v3 = |x|             { x + 1 };\n  Compiling playground v0.0.1 (&#47;playground)\nerror[E0282]: type annotations needed\n报了这个错，现在的版本是需要类型了？？","like_count":0}]}