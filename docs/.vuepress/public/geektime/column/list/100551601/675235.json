{"id":675235,"title":"13｜MVCC协议：MySQL 在修改数据的时候，还能不能读到这条数据？","content":"<p>你好，我是大明。今天我们来学习 MySQL 面试中非常重要的一个内容—— MVCC 协议。</p><p>MVCC（Multi-Version Concurrency Control）中文叫做多版本并发控制协议，是 MySQL InnoDB 引擎用于控制数据并发访问的协议。它在面试中属于必面题，而且从 MVCC 出发能够将话题引申到事务、隔离级别两个重头戏上，所以掌握 MVCC 能让你进可攻退可守。</p><p>那么今天我就带你从 MVCC 的基本原理开始讲起，教你怎么在 MVCC 的面试中进退自如，秀出实力。在开始之前，我们先思考一个问题，为什么 InnoDB 会需要 MVCC？</p><h2>为什么需要 MVCC？</h2><p>你在前面已经学过了锁，知道锁本身就是用于并发控制的，那么为什么 InnoDB 还需要引入 MVCC，读写都加锁不就可以控制住并发吗？</p><p>锁确实可以，但是性能太差。如果是纯粹的锁，那么写和写、读和写、读和读之间都是互斥的。如果是读写锁，那么写和写、读和写之间依旧是互斥的。</p><p>数据库和一般的应用有一个很大的区别，就是<strong>数据库即便是读，也不能被写阻塞住。</strong>试想一下，如果一个线程准备执行 UPDATE 一行数据，如果这时候阻塞住了所有的 SELECT 语句，那么这个性能你能接受吗？</p><p><img src=\"https://static001.geekbang.org/resource/image/a0/02/a031e076bb10c09dff987230ac68df02.png?wh=1920x787\" alt=\"图片\"></p><p>显然接受不了，所以数据库要有一种机制，避免读写阻塞。在理解了为什么 MVCC 必不可少之后，现在你需要进一步了解一个和 MVCC 紧密关联的概念：<strong>隔离级别</strong>。</p><!-- [[[read_end]]] --><h2>隔离级别</h2><p>数据库的隔离级别是<strong>一组规则，</strong>用来控制并发访问数据库时如何分配、保护和共享资源。不同的隔离级别在不同的并发控制策略之间进行调整，从而提供了不同的读写隔离级别和安全性。用人话来说，就是隔离级别代表了一个事务是否了解别的事务以及了解程度怎么样。</p><p>MySQL 的隔离级别有四个。</p><ol>\n<li><strong>读未提交</strong>（Read Uncommitted）是指一个事务可以看到另外一个事务尚未提交的修改。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/47/fc/475451d533257d436459775e714e9bfc.png?wh=2464x1118\" alt=\"\"></p><ol start=\"2\">\n<li><strong>读已提交</strong>（Read Committed，简写 RC）是指一个事务只能看到已经提交的事务的修改。这意味着<strong>如果在事务执行过程中有别的事务提交了，那么事务还是能够看到别的事务最新提交的修改。</strong></li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/a7/75/a7c6736fa83ebc72715044257739f975.png?wh=2464x1200\" alt=\"\"></p><ol start=\"3\">\n<li><strong>可重复读</strong>（Repeatable Read，简写 RR）是指在这一个事务内部读同一个数据多次，读到的结果都是同一个。这意味着即便<strong>在事务执行过程中有别的事务提交，这个事务依旧看不到别的事务提交的修改</strong>。这是 MySQL 默认的隔离级别。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/37/5d/37e7909f2a72a63d0538bf32ceb4ca5d.png?wh=1920x954\" alt=\"图片\"></p><ol start=\"4\">\n<li><strong>串行化</strong>（Serializable）是指事务对数据的读写都是串行化的。</li>\n</ol><p>从上到下，隔离性变强但是性能变差了。所以一个提升 MySQL 性能最简单的方式，就是将隔离级别往下调，这也是我们的一个亮点方案。</p><p>和隔离级别密切相关的概念是脏读、幻读和不可重复读这三个读异常。</p><ul>\n<li><strong>脏读</strong>是指读到了别的事务还没有提交的数据。之所以叫做“脏”读，就是因为未提交数据可能会被回滚掉。</li>\n<li><strong>不可重复读</strong>是指在一个事务执行过程中，对同一行数据读到的结果不同。</li>\n<li><strong>幻读</strong>是指在事务执行过程中，别的事务插入了新的数据并且提交了，然后事务在后续步骤中读到了这个新的数据。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/0a/f3/0a0b5343f602f202b75084187c74cff3.png?wh=1920x867\" alt=\"图片\"></p><p>我们可以用一个表来描述隔离级别和这三种读异常的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/4b/3cec4b180e2a0a92bc6aa1c0d2de2c4b.png?wh=1920x750\" alt=\"图片\"></p><p>这里尤其要注意一点，就是理论上来说可重复读是没有解决幻读的。但是 MySQL 因为使用了临键锁，因此它的可重复读隔离级别已经解决了幻读问题。你在面试的过程中不要忘了强调这一点。</p><p>此外还有两个相似的概念：快照读和当前读。简单来说，快照读就是在事务开始的时候创建了一个数据的快照，在整个事务过程中都读这个快照；而当前读，则是每次都去读最新数据。MySQL 在可重复读这个隔离级别下，查询的执行效果和快照读非常接近。</p><h2>版本链</h2><p>为了实现 MVCC，InnoDB 引擎给每一行都加了两个额外的字段<strong>trx_id 和 roll_ptr</strong>。</p><ul>\n<li>trx_id：事务ID，也叫做事务版本号。MVCC 里面的 V 指的就是这个数字。每一个事务在开始的时候就会获得一个 ID，然后这个事务内操作的行的事务 ID，都会被修改为这个事务的 ID。</li>\n<li>roll_ptr：回滚指针。InnoDB 通过 roll_ptr 把每一行的历史版本串联在一起。</li>\n</ul><p>实际上，InnoDB 引擎还隐式地插入了另外一个列 row_id，如果你没有设置任何主键，那么这个列就会被当成主键来使用。但是它其实和 MVCC 没太大的关系，所以你不需要关注。</p><p>下面我用一个例子来说明 MVCC 是如何利用这两个列的。</p><p>假设最开始我插入了一行数据，我插入数据的这个事务的 ID 是 100，那么这个时候数据行看起来是这样的。</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/eb/fcb04eaf546734e2a0e3143063cc81eb.png?wh=1920x507\" alt=\"图片\"></p><p>假设有一个事务 A 拿到了 ID 101，然后把 x 的值修改为 15，那么就会变成这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/19/a5cdc04ab6b35170c298a9ffffba9f19.png?wh=1920x709\" alt=\"图片\"></p><p>这个时候，事务 A 修改后的 roll_ptr 会指向初始状态的数据。假如现在再来一个事务 B 拿到 ID 102 ，要把数据 x 修改成 20，那么就会变成下面这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/ae/fc2f56b6dec20bbc2524ec8f479fd3ae.png?wh=1920x1037\" alt=\"图片\"></p><p>这条链就是大名鼎鼎的版本链。这个版本链存储在所谓的 undolog 里面，undolog 我们下一节课会详细讨论。</p><p>现在问题来了，假如这个时候我有一个新的事务 C，我要读 x 的值，那么我该读取 trx_id 为几的数据呢？这就涉及到了另外一个和 MVCC 紧密相关的概念：Read View。</p><h2>Read View</h2><p>Read View 你可以理解成是一种可见性规则。前面你已经知道了 undolog 里面存放着历史版本的数据，当事务内部要读取数据的时候，Read View 就被用来控制这个事务应该读取哪个版本的数据。</p><p>Read View 最关键的字段叫做 m_ids，它代表的是当前已经开始，但是还没有结束的事务的 ID，也叫做活跃事务 ID。</p><p>Read View <strong>只用于已提交读和可重复读</strong>两个隔离级别，它用于这两个隔离级别的不同点就在于<strong>什么时候生成 Read View</strong>。</p><ul>\n<li>已提交读：事务每次发起查询的时候，都会重新创建一个新的 Read View。</li>\n<li>可重复读：事务开始的时候，创建出 Read View。</li>\n</ul><p>已提交读就像你的渣男朋友，你每次见到他，他都会换一个新对象；而可重复读就是一个痴情男，你每次见到他，看到的都是他高中时候谈的对象。</p><h3>Read View 与已提交读</h3><p>在已提交读的隔离级别下，每一次查询语句都会重新生成一个 Read  View。这意味着在事务执行过程中，Read View 是在不断变动的。现在我们来看一个例子，假如说现在已经有三个事务了，状态分别是已提交、未提交、未提交。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/d2/28d8fa3fca19cd6aa074060a166949d2.png?wh=1920x1035\" alt=\"图片\"></p><p>假如说现在新开了一个事务 A，分配给它的 ID 是 4。如果这个时候 A 开始查询 x 的值，那么 MySQL 会创建一个新的 Read View，其中 <code>m_ids = 2,3</code>。事务 A 发现最后一个已经提交的是事务 <code>trx_id = 1</code>，对应的 x 的值是 1。于是事务 A 读到 x = 1。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/d5/c226080b4a200eeecd01a623365dd2d5.png?wh=1920x1035\" alt=\"\"></p><p>如果这个时候事务 2 提交了，事务 A 再次读取 x，这个时候 MySQL <strong>又会生成一个新的 Read View</strong> <code>m_ids=3</code>。因此事务 A 会读取到 x = 4。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/4e/e2f5cf70f686e1cd9e67b8f90d5e9e4e.png?wh=2464x1324\" alt=\"\"></p><h3>Read View 与可重复读</h3><p>在可重复读的隔离级别下，数据库会在事务开始的时候生成一个 Read View。这意味着整个 Read View 在事务执行过程中都是稳定不变的。我们用前面的例子来说明，就是在事务 A 开始的时候就会创建出来一个 Read View <code>m_ids=2,3</code>。</p><p><img src=\"https://static001.geekbang.org/resource/image/7a/6c/7a7e1a1b069dbab48dbb52939ecffe6c.png?wh=1920x1035\" alt=\"图片\"></p><p>如果这时候事务 A  去读 x 的数据，毫无疑问，读出来的是 x=1。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/d5/c226080b4a200eeecd01a623365dd2d5.png?wh=1920x1035\" alt=\"图片\"></p><p>如果这时候事务 2 提交了，然后事务 A 想要再去读 x 的值，Read View 不会发生变化，还是 <code>m_ids = 2,3</code>。所以你可以看到，虽然事务 2 提交了，但是事务 A 完全不知道这回事，因此它还是读到 x=1。</p><p><img src=\"https://static001.geekbang.org/resource/image/9d/33/9d5c4983202b2077b53579c8eddfc733.png?wh=1920x1035\" alt=\"图片\"></p><p>万一这时候有一个新事务 ID = 5 开始了，并且也提交了。那么事务 A 并不会读取这个新事务的数据，因为新事务 ID 已经大于事务 A 的 ID 了（5 &gt; 4），事务 A 知道这是一个比它还要晚的事务，所以会忽略新的事务的修改。</p><h3>Read View 小结</h3><p>我把前面的内容整合在一起，画成了图，你可以参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/03/0a/0370dd5c3b73da1a06e62e175ae2410a.png?wh=1920x1071\" alt=\"图片\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/61/7a/619e22884e6719182afaf90ba92a4c7a.png?wh=1920x1045\" alt=\"图片\"></p><p>这里我只提到了 m_ids，实际上和 Read View 相关的概念还有三个。</p><ul>\n<li>m_up_limit_id是指 m_ids 中的最小值。</li>\n<li>m_low_limit_id是指下一个分配的事务 ID。</li>\n<li>m_creator_trx_id当前事务 ID。</li>\n</ul><p>那么可见性如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/19/cd9e5fc6dccb166f3894ce0a7fb27f19.png?wh=1920x659\" alt=\"图片\"></p><p>m_up_limit_id 在左边，而 m_low_limit_id 在右边，你不要记错了。实际上，m_up_limit_id 和 m_low_limit_id 你记不住也没关系，它不影响你对 MVCC 和 ReadView 核心逻辑的理解。</p><h2>面试准备</h2><p>有了前面基础知识的铺垫，现在你应该可以分清重点了。那么在面试中我们应该关注哪些细节呢？</p><p>首先你需要了解清楚你们公司数据库的隔离级别，如果你们公司设置的不是默认的隔离级别，那么你就要搞清楚为什么不使用默认隔离级别。尤其是用了未提交读、串行化两个隔离级别，更加要弄清楚为什么决定使用这两个隔离级别。</p><p>在面试过程中，面试官会出一些让人很难反应过来的问题。比如说面试官会口头构造一条版本链。</p><blockquote>\n<p>我现在有三个事务，ID 分别是 101、102、103。如果事务 101 已经提交了，但是 102、103 还没提交。这个时候，我开启了一个事务，准备读取数据，那么我读到的是哪个事务的数据？</p>\n</blockquote><p>如果这时候你回答读取到事务 101 的数据，那么面试官就进一步追问。</p><blockquote>\n<p>如果这时候事务 103 提交了，但是 102 还没提交，那么会读到谁的呢？</p>\n</blockquote><p>你就要回答根据隔离级别来了。</p><p>这种问题很难反应过来是因为你需要快速在脑海里面建立起整个版本链，然后综合考虑隔离级别以及谁先提交谁后提交，才能正确回答出来。你想一下你刚才读到那一段话的时候，是不是有一种迷糊的感觉？在面试那种紧张的氛围下，你只会觉得迷糊，难以反应过来。</p><p>我的建议是你只要对这一类问题有一个心理预期就可以了。在面试的时候要是一时半会没办法回答出来，可以请求面试官再说一遍，并且说慢一点。如果面试官好说话，你还可以借助纸笔，直接将这个东西画出来，再来分析最终读到的是什么数据。</p><h2>基本思路</h2><p>有些时候面试官会在面了锁之后，将话题引到 MVCC，问你为什么有了锁，还需要 MVCC？你在回答的时候要答出关键词<strong>避免读写阻塞。</strong></p><blockquote>\n<p>单纯使用锁的时候，并发性能会比较差。即便是在读写锁这种机制下，读和写依旧是互斥的。而数据库是一个性能非常关键的中间件，如果某个线程修改某条数据就让其他线程都不能读这条数据，这种性能损耗是无法接受的。所以 InnoDB 引擎引入了 MVCC，就是为了减少读写阻塞。</p>\n</blockquote><p>大部分时候，面试官在问 MVCC 的时候，都是直接问你这几个问题。</p><ul>\n<li>你是否了解 MVCC？</li>\n<li>MVCC 是什么？</li>\n<li>MySQL 的 InnoDB 引擎是怎么控制数据并发访问的？</li>\n<li>当一个线程在修改数据的时候，另外一个线程还能不能读到数据？</li>\n</ul><p>这时候你就要简明扼要地把原理解释清楚。按照<strong>基本定义、实现机制、隔离级别</strong>的逻辑顺序来回答。</p><blockquote>\n<p>MVCC 是 MySQL InnoDB 引擎用于控制数据并发访问的协议。MVCC 主要是借助于版本链来实现的。在 InnoDB 引擎里面，每一行都有两个额外的列，一个是 trx_id，代表的是修改这一行数据的事务 ID。另外一个是 roll_ptr，代表的是回滚指针。InnoDB 引擎通过回滚指针，将数据的不同版本串联在一起，也就是版本链。这些串联起来的历史版本，被放到了 undolog 里面。当某一个事务发起查询的时候，MVCC 会根据事务的隔离级别来生成不同的 Read View，从而控制事务查询最终得到的结果。</p>\n</blockquote><p>这里的话术非常简洁，基本上没有涉及任何细节，但是又提及了足够多的关键词。</p><p>首先，在回答里我们提到了 undolog，那么接着面试官就可能追问 undolog、redolog 或者 binlog 的细节，这一部分可以把话题引到下一节课的内容。</p><p>其次，在回答中我们提到了隔离级别，并且提到了 Read View 是和隔离级别有关的东西，那么面试官就会非常深入地问隔离级别的基本定义，MVCC 是怎么利用 Read View 来实现已提交读和可重复读的。</p><p>在回答的时候，要先解释清楚<strong>四个隔离级别和三个读异常</strong>，然后强调一下 InnoDB 引擎。</p><blockquote>\n<p>在 MySQL 的 InnoDB 引擎里面，使用了临键锁来解决幻读的问题，所以实际上 MySQL InnoDB 引擎的可重复读隔离级别也没有幻读的问题。一般来说，隔离级别越高，性能越差。所以我之前在公司做的一个很重要的事情，就是推动隔离级别降低为已提交读。</p>\n</blockquote><p>这个回答的最后，你就可以尝试将话题引导到下面的亮点方案中。</p><h2>亮点方案</h2><p>这一个亮点方案重点在于描述清楚两方面的内容。</p><ol>\n<li>推动公司将隔离级别从默认的可重复读降低为已提交读。</li>\n<li>在已提交读的基础上，万一需要利用可重复读的特性，该怎么办？</li>\n</ol><p>从前面的内容中你已经知道，MySQL 的默认隔离级别是可重复读，实际上互联网的很多应用都调整过这个隔离级别，降低为已提交读。</p><p>那么你在面试的时候可以考虑使用这个来作为你的亮点方案。首先你要强调<strong>为什么要改</strong>。</p><blockquote>\n<p>最开始我来到公司的时候，我们的数据库隔离级别都是使用默认的隔离级别，也就是可重复读。但其实我们的业务场景很少利用可重复读的特性，比如说几乎全部事务内部对某一个数据都是只读一次的。<br>\n&nbsp;<br>\n并且，可重复读比已提交读更加容易引起死锁的问题，比如说我们之前就出现过一个因为临键锁引发的死锁问题。而且已提交读的性能要比可重复读更好。所以综合之下，我就推动公司去调整隔离级别，将数据库的默认隔离级别降低为已提交读。</p>\n</blockquote><p>在这种情况下，面试官可能会追问你：“在调整了事务级别之后，万一需要可重复读的特性了，你怎么办？”</p><p>首先你要理解在什么样的场景下你才会需要可重复读这个隔离级别。</p><ul>\n<li>你需要在事务中发起两次同样的查询，并且你希望两次得到的结果是一样的。</li>\n<li>你需要避开幻读，也就是事务开始之后，即便有别的事务插入了数据并且提交了，你也不希望读到这个新数据。</li>\n</ul><p>但是仔细想想，你真的存在这种场景吗？或者说，你真的没得选，以至于一定要使用可重复读这个隔离级别吗？</p><p>答案是几乎没有。大部分出现可重复读的需求都是因为代码没有写好，或者说至少可以通过改造业务来实现。比如说常见的可重复读，既然你需要读多次，那么自然可以在第一次读完之后缓存起来。</p><p>不过幻读是没有办法通过业务改造来解决的。但是在业务层面上，幻读一般不会被认为是一个问题，原因有两点：一是你分不清是不是幻读。比如说你在事务 A 里面读到了一条数据，你判断不出来它是在事务 A 开始之前就插入的，还是在事务 A 开始之后，事务 B 才插入并且提交的。</p><p><img src=\"https://static001.geekbang.org/resource/image/73/e6/73ae591deec6d782d2e690f0585565e6.png?wh=1920x905\" alt=\"图片\"></p><p>二是事务提交往往意味着业务已经结束，所以读到一个已经提交的事务的数据，不会损害业务的正确性。也就是说，如果事务 A 在开始之后，事务 B 才插入数据并且提交。那么这个时候事务 A 完全可以认为事务 B 所在的整个业务已经结束了，那么读出来也没什么问题。</p><p>所以你可以这么回答，关键词是<strong>改造业务。</strong></p><blockquote>\n<p>正常来说我是不推荐使用可重复读的，因为在我们的业务环境下想不到有什么场景非得使用可重复读这个隔离级别。<br>\n&nbsp;<br>\n之前在推动降低隔离级别的时候，我其实重构过一些业务。这一类业务就是在一个事务里面发起了两个同样的查询，比如说在 UPDATE 之后又立刻查询，这种查询还必须走主库，不然会有主从延迟的问题。<br>\n&nbsp;<br>\n这种业务可以通过缓存第一次查询的数据来避免第二次查询。但是这种改造一般是避不开幻读的。不过在业务上幻读一般不是问题。一方面是业务层面上区分不出来是否是幻读。另外一方面，事务提交了往往代表业务已经结束，那么发生幻读了，业务依旧是正常的。比如说事务 A 读到了事务 B 新插入的数据，但是事务 B 本身已经提交了，那么事务 A 就认为事务 B 所在的业务已经完结了，那么读到了就读到了，并不会出什么问题。</p>\n</blockquote><p>但是这种回答，如果遇上较真的面试官，他依旧会觉得不满意，那么你就可以使出最后的兜底手段，关键词是<strong>指定隔离级别。</strong></p><blockquote>\n<p>万一不能改造业务，那么还有一个方法，就是直接在创建事务的时候指定隔离级别。我前面调整的都是数据库的默认隔离级别，实际上还可以在 Session 或者事务这两个维度上指定隔离级别。</p>\n</blockquote><p>如果你记不住或者难以理解如何改造业务代码，你只需要回答这一点就可以。</p><h2>面试思路总结</h2><p>今天我们重点学习了 MVCC 的基本原理，这里我总结一下这节课的主要内容。</p><ol>\n<li>你需要记住为什么需要 MVCC，尤其是在有锁机制的情况下，为什么还需要 MVCC？主要是为了读写并发。</li>\n<li>你需要记住四个隔离级别：未提交读、已提交读、可重复读、串行化，以及和隔离级别密切相关的三个读异常：脏读、不可重复读、幻读。</li>\n<li>你需要记住 MVCC 是如何构造版本链的。</li>\n<li>你需要记住 Read View 在不同的隔离级别下是如何运作的。</li>\n</ol><p>最后我也给出一个调整隔离级别的亮点方案，面试的时候要抓住两个关键点。</p><ul>\n<li>为什么要调整为已提交读？主要原因有两个：一是因为业务用不上，二是为了提升性能。</li>\n<li>在调整之后真的需要可重复读隔离级别该怎么办？你就按照我给出的话术回答就好了。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/3e/e0/3ef1f8997756f958930d73ec310c9fe0.png?wh=2772x2592\" alt=\"\"></p><h2>思考题</h2><p>最后你来思考几个问题。</p><ul>\n<li>MVCC 只作用于已提交读和可重复读，那么 InnoDB 是怎么处理其他两个隔离级别的？</li>\n<li>你有没有遇到过看起来真的要可重复读这个隔离级别的问题？如果遇到了，你现在有办法在已提交读这个隔离级别上解决这个问题吗？</li>\n</ul><p>欢迎你把你的答案分享在评论区，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p><h2>面试锦囊</h2><p>到了后面的几面，面试官很有可能会问你这种影响很大的事情你是怎么推进的？你是如何说服同事的？你是如何说服上司的？这一类问题就属于软技能。类似这种推进某件事情的策略，你基本上都可以按照准备充分、公开决议、小步推进、全面铺开四步来回答。</p><ul>\n<li><strong>准备充分</strong>：当你准备推进一件事的时候，要充分调研实际情况，提出针对性的方案。需要强调你知道为什么不做不行，以及如果要做该怎么做。就拿这节课的内容来说，你已经调研清楚了业务上确实用不到可重复读这个隔离级别，并且公司也的确出过死锁的案例。而你的计划是先从比较简单的不重要的数据库开始，降低隔离级别，经过验证之后再推广。或者采用更简单的方案，就是老的数据库不变，新的数据库就使用已提交读来作为默认的隔离级别。</li>\n<li><strong>公开决议</strong>：正常来说，一般要先和关键人物沟通，取得支持。然后在公开会议上抛出议题，取得大多数人的支持。这一步其实有点自保的意味，因为群体决策就意味着群体负责。并且取得大多数人的支持之后，推进一件事会更加容易。</li>\n<li><strong>小步推进</strong>：放到这节课就是按照你的计划，先改造不重要业务的数据库，或者只在新的数据库上应用。也就是说在实施的初期，先小规模推进。这样可以验证方案的正确性，也可以在出事的时候将影响范围控制住。</li>\n<li><strong>全面铺开</strong>：你有了成熟的改造经验之后，就可以制定操作规范之类的东西了，让业务的负责人自己选择合适的时机进行切换。在经过了前一个步骤的验证之后，你对方案的弊病、落地可能出现的问题就都心中有数了。这时候就可以全面铺开了。</li>\n</ul><p>这节课你第一次接触到了软技能面试相关的内容。软技能面试在整个面试过程中，有一点成事不足败事有余的味道。意思是说，如果你硬实力——技术实力不达标，软技能面出花来，也没用，这就是成事不足；但是如果你硬实力很强，但是后面老大和部门负责人面试你的时候觉得你软技能不行，那你依旧会被淘汰，这就是败事有余。</p><p>软技能面试其实也是需要准备的，你平时准备面试不要忽略这一点。</p>","neighbors":{"left":{"article_title":"12｜数据库锁：明明有行锁，怎么突然就加了表锁？","id":674789},"right":{"article_title":"14｜数据库事务：事务提交了，你的数据就一定不会丢吗？","id":675812}},"comments":[{"had_liked":false,"id":382270,"user_name":"sheep","can_delete":false,"product_type":"c1","uid":2770150,"ip_address":"广东","ucode":"DAC2036F08CE27","user_header":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","comment_is_top":false,"comment_ctime":1696987703,"is_pvip":false,"replies":[{"id":139358,"content":"update 和 delete 执行的时候会加锁，但是读的时候并不会。读会根据你的隔离级别直接去找历史数据来读。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1697725413,"ip_address":"广东","comment_id":382270,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"有一个加锁的问题？\n可重复读由于加了next-key lock防止了幻读，这里加了锁叫next-key lock。\n那读提交情况下，就不会加锁了么，都是靠read view来获取数据？update和delete下，读提交也不会加锁了么","like_count":4,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629861,"discussion_content":"update 和 delete 执行的时候会加锁，但是读的时候并不会。读会根据你的隔离级别直接去找历史数据来读。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697725413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379943,"user_name":"nirvana","can_delete":false,"product_type":"c1","uid":1197280,"ip_address":"辽宁","ucode":"48082CF2F0B8FE","user_header":"https://static001.geekbang.org/account/avatar/00/12/44/e0/a6a51198.jpg","comment_is_top":false,"comment_ctime":1692750746,"is_pvip":false,"replies":[{"id":138405,"content":"死锁基本上就没了。只有你自己瞎搞加锁才有可能导致死锁，一般使用的时候都不会碰上。\n\n数据库压力，我之前自己本地机器测试的时候效果不是很明显，不到 5%。这个测试也和 SQL 有关系，要是 SQL 拼命加间隙锁测起来可能效果会明显很多。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1692892662,"ip_address":"广东","comment_id":379943,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"请问下老师，有推进数据库改成rc真实案例的结果么，比如改成rc后，死锁减少了百分之多少，数据库压力减少了百分之多少","like_count":2,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626420,"discussion_content":"死锁基本上就没了。只有你自己瞎搞加锁才有可能导致死锁，一般使用的时候都不会碰上。\n\n数据库压力，我之前自己本地机器测试的时候效果不是很明显，不到 5%。这个测试也和 SQL 有关系，要是 SQL 拼命加间隙锁测起来可能效果会明显很多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692892662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385973,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"北京","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1703751270,"is_pvip":false,"replies":[{"id":140743,"content":"读锁要看你有没有主动启用。比如说你要是有 SELECT FOR UPDATE 的语句，那么读锁还是有的。\n\n确实是变了，不再需要在最开始的时候就加锁了。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1704188610,"ip_address":"广东","comment_id":385973,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"是引入mvcc之后，对于读写来说，原来读加的读锁不再加了？还是说写锁加的逻辑时机变了？","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634902,"discussion_content":"读锁要看你有没有主动启用。比如说你要是有 SELECT FOR UPDATE 的语句，那么读锁还是有的。\n\n确实是变了，不再需要在最开始的时候就加锁了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704188611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379517,"user_name":"Sampson","can_delete":false,"product_type":"c1","uid":1418226,"ip_address":"上海","ucode":"BA78CA29A6D898","user_header":"https://static001.geekbang.org/account/avatar/00/15/a3/f2/ab8c5183.jpg","comment_is_top":false,"comment_ctime":1692060321,"is_pvip":false,"replies":[{"id":138251,"content":"因为插入的时候，会被临键锁阻止。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1692078000,"ip_address":"广东","comment_id":379517,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"你好，为什么使用了临健锁之后，可重复读的幻读问题解决了呢","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625687,"discussion_content":"因为插入的时候，会被临键锁阻止。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692078000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1624574,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/fe/874b172b.jpg","nickname":"benxiong","note":"","ucode":"F6498059D439D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":643166,"discussion_content":"“插入的时候，会被临键锁阻止。”这个你验证过吗？我试了下，在 RR 级别下，开了三个事务线程，接着事务 A 插入一条 主键 id=5 的新数据，成功了，当前事务也能查得到，事务 B 和事务 C 是查不到，符合 RR 级别定义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1714097323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":625687,"ip_address":"湖北","group_id":0},"score":643166,"extra":""},{"author":{"id":1241197,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f0/6d/3e570bb8.jpg","nickname":"一打七","note":"","ucode":"D242C5EF70C176","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1624574,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/fe/874b172b.jpg","nickname":"benxiong","note":"","ucode":"F6498059D439D9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644374,"discussion_content":"应该是在A插入之前，需要在B或C执行一次加锁读，才能把临键锁加上，然后A的插入就执行不了了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715219614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":643166,"ip_address":"北京","group_id":0},"score":644374,"extra":""}]}]},{"had_liked":false,"id":377815,"user_name":"rrbbt","can_delete":false,"product_type":"c1","uid":1128740,"ip_address":"山东","ucode":"637A27C532D817","user_header":"https://static001.geekbang.org/account/avatar/00/11/39/24/963178c4.jpg","comment_is_top":false,"comment_ctime":1689295075,"is_pvip":false,"replies":[{"id":137707,"content":"当然会出问题，而且这个问题臭名昭著。也就是，如果你有两个事务，假设说事务1 将name更新为 Tom，接下来事务 2 将 name 更新为 Jerry，那么就看谁最后提交，数据就是谁的。\n因此为了避免这种更新丢失的问题，都是用乐观锁的，比如说数据带上版本号，update xxx set xxx where version = 123。这个版本号就是为了确保数据没被别的事务更改了。\n\n用悲观锁也是可以的。\n\nMySQL 为什么默认是可重复读，我猜测是 MySQL 认为可重复读更加满足贴近 ACID 特性中的隔离性要求吧。这方面倒是没见到官方说法。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689423914,"ip_address":"广东","comment_id":377815,"utype":1}],"discussion_count":8,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"老师讲的确实很精彩，但有个问题没明白：可重复读的情况下，看不到别的事物的修改结果，当前事物还是基于老数据去修改，这时候最后的结果不会出问题吗？这个怎么解决呢？（我感觉mysql应该用读已提交才对啊，因为别人已经把数据改了，我再改的话，肯定得基于最新的数据去改啊，为什么mysql要默认设置成可重复读呢？）","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623404,"discussion_content":"当然会出问题，而且这个问题臭名昭著。也就是，如果你有两个事务，假设说事务1 将name更新为 Tom，接下来事务 2 将 name 更新为 Jerry，那么就看谁最后提交，数据就是谁的。\n因此为了避免这种更新丢失的问题，都是用乐观锁的，比如说数据带上版本号，update xxx set xxx where version = 123。这个版本号就是为了确保数据没被别的事务更改了。\n\n用悲观锁也是可以的。\n\nMySQL 为什么默认是可重复读，我猜测是 MySQL 认为可重复读更加满足贴近 ACID 特性中的隔离性要求吧。这方面倒是没见到官方说法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689423914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":1299095,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d2/97/5f4cd8da.jpg","nickname":"虎虎生威的程坚强","note":"","ucode":"321C89298D3682","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":623437,"discussion_content":"MySQL默认的隔离级别为rr，主要是为了规避binlog日志为statement格式时的主从同步不一致问题，这个问题比较经典，可以搜下看下，如果隔离级别为rc，是禁止设置日志格式为statement的，会造成主从库结果不一致","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1689494373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":623404,"ip_address":"广东","group_id":0},"score":623437,"extra":""},{"author":{"id":1172050,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e2/52/56dbb738.jpg","nickname":"牙小木","note":"","ucode":"E5C12D37A62949","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1299095,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d2/97/5f4cd8da.jpg","nickname":"虎虎生威的程坚强","note":"","ucode":"321C89298D3682","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625408,"discussion_content":"理论上5.1的版本之后，binlog都改为row了，就没这事了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691654958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":623437,"ip_address":"北京","group_id":0},"score":625408,"extra":""},{"author":{"id":1583740,"avatar":"https://static001.geekbang.org/account/avatar/00/18/2a/7c/0d6a87c4.jpg","nickname":"dandy","note":"","ucode":"5EE976FCBD9215","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1299095,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d2/97/5f4cd8da.jpg","nickname":"虎虎生威的程坚强","note":"","ucode":"321C89298D3682","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627256,"discussion_content":"是滴，没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693928364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":623437,"ip_address":"广东","group_id":0},"score":627256,"extra":""}]},{"author":{"id":1299095,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d2/97/5f4cd8da.jpg","nickname":"虎虎生威的程坚强","note":"","ucode":"321C89298D3682","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623384,"discussion_content":"update 操作是当前读的，会读到最新的数据，在修改的时候，是有锁的，别的事务想修改会阻塞等锁的","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1689396315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145383,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/27/791d0f5e.jpg","nickname":"小林子","note":"","ucode":"058C95ECBFE422","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623353,"discussion_content":"修改是当前读，不是快照读","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1689327934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"贵州","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2986043,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/90/3b/791d0f5e.jpg","nickname":"进击的和和","note":"","ucode":"8978AF077FA6AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623331,"discussion_content":"更新之前应该会读取最新版本的数据,不管这两个隔离级别吧...","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1689301574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3187242,"avatar":"","nickname":"Geek_2493f9","note":"","ucode":"C577130194DCFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":642805,"discussion_content":"实际业务中 写操作之间都会上锁的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713806886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389893,"user_name":"Geek_2493f9","can_delete":false,"product_type":"c1","uid":3187242,"ip_address":"上海","ucode":"C577130194DCFA","user_header":"","comment_is_top":false,"comment_ctime":1713806965,"is_pvip":false,"replies":[{"id":141977,"content":"一般面试不会面。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1715230740,"ip_address":"广东","comment_id":389893,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"关于rc和rr的执行过程中上锁的过程， 独占锁，行级锁，间隙锁相关的问题老师咋不讲讲","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644397,"discussion_content":"一般面试不会面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715230740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":387960,"user_name":"到不了的塔","can_delete":false,"product_type":"c1","uid":1258362,"ip_address":"上海","ucode":"0F5BE3CB58DE31","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/7a/ac307bfc.jpg","comment_is_top":false,"comment_ctime":1709029514,"is_pvip":false,"replies":[{"id":141340,"content":"在你举的例子里面，我倾向于赞同你的说法（虽然我没实验）。但是一般认为 RC 比较快是源自 RC 没那么多锁，比如说在文档里面 https:&#47;&#47;dev.mysql.com&#47;doc&#47;refman&#47;8.0&#47;en&#47;innodb-transaction-isolation-levels.html 描述了，它比 RR 要少很多锁。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1709714287,"ip_address":"广东","comment_id":387960,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"邓明老师，请问下，为什么mysql在读已提交隔离级别下会比可重复读隔离级别下性能更好？\n比如不带锁的select语句查询，性能应该差不多吧，甚至可重复读的性能更好（因为可能不需要生成读快照）。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638585,"discussion_content":"在你举的例子里面，我倾向于赞同你的说法（虽然我没实验）。但是一般认为 RC 比较快是源自 RC 没那么多锁，比如说在文档里面 https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html 描述了，它比 RR 要少很多锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709714287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386200,"user_name":"起风了","can_delete":false,"product_type":"c1","uid":1110574,"ip_address":"浙江","ucode":"DEA3B47B7F3C3F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/2e/cb647708.jpg","comment_is_top":false,"comment_ctime":1704328538,"is_pvip":false,"replies":[{"id":141064,"content":"这个就是 innodb 的规定，没啥特别的理由。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1705927861,"ip_address":"广东","comment_id":386200,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"m_up_limit_id 在左边，而 m_low_limit_id 在右边 这块能再详细讲吗 ","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636311,"discussion_content":"这个就是 innodb 的规定，没啥特别的理由。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705927861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385968,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"北京","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1703746592,"is_pvip":false,"replies":[{"id":140745,"content":"幻读肯定会造成不可重复读。但是幻读针对的是新数据，不可重复读针对的是老数据。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1704188775,"ip_address":"广东","comment_id":385968,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"感觉幻读和不可重复读是一回事，他俩的区别是啥呀？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634904,"discussion_content":"幻读肯定会造成不可重复读。但是幻读针对的是新数据，不可重复读针对的是老数据。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1704188775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1197511,"avatar":"https://static001.geekbang.org/account/avatar/00/12/45/c7/f1c40c89.jpg","nickname":"李凯","note":"","ucode":"8828DCFC48D05B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635781,"discussion_content":"举个例子，假设现在隔离级别是RC。\n\n不可重复读，可以理解为更新操作导致导致的。事务A查询id为1的age是10；事务B将id为1的age改为20，提交事务；事务A查询id为1的age是20；在一个事务内同一条数据多次读取，结果不一样，这就不可重复读了。\n\n幻读，可以理解为插入操作导致的。事务A查询表user，只有id为1的数据；事务B插入id为2的数据，提交事务；事务A再次查询表user，有id 为1和id 为2的两条数，事务A幻读了（刚才只有一条数据，现在怎么两条了？）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705167749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384622,"user_name":"okkkkk","can_delete":false,"product_type":"c1","uid":1958092,"ip_address":"江苏","ucode":"FEA6F454376F6D","user_header":"https://static001.geekbang.org/account/avatar/00/1d/e0/cc/a8c26fb2.jpg","comment_is_top":false,"comment_ctime":1701246947,"is_pvip":false,"replies":[{"id":140344,"content":"加油加油！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1701846718,"ip_address":"广东","comment_id":384622,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"readview的几张图太棒了，很有收获，感谢","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633120,"discussion_content":"加油加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701846718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384004,"user_name":"Geek_035c60","can_delete":false,"product_type":"c1","uid":3768453,"ip_address":"北京","ucode":"08EA6457312DA1","user_header":"","comment_is_top":false,"comment_ctime":1700065485,"is_pvip":false,"replies":[{"id":140358,"content":"能理解就行，本身在外面大家的说法就是各种混着喊。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1701847443,"ip_address":"广东","comment_id":384004,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"已提交读，读已提交，是否可以统一一下称呼。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633135,"discussion_content":"能理解就行，本身在外面大家的说法就是各种混着喊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701847443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382117,"user_name":"我得儿意的笑","can_delete":false,"product_type":"c1","uid":1116344,"ip_address":"上海","ucode":"752E66C6AA96E2","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/b8/ac8a778e.jpg","comment_is_top":false,"comment_ctime":1696739225,"is_pvip":false,"replies":[{"id":139220,"content":"read view 是为了控制你能看到哪些数据。换言之，就是你得通过 read view 才知道别的事务已经提交了。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1696922710,"ip_address":"广东","comment_id":382117,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"你好老师，在已提交读的情况下，直接读最后一次提交的数据就可以了，为什么还需要readview?","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629288,"discussion_content":"read view 是为了控制你能看到哪些数据。换言之，就是你得通过 read view 才知道别的事务已经提交了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696922710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380511,"user_name":"浩仔是程序员","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"广东","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1693741824,"is_pvip":false,"replies":[{"id":138606,"content":"这里的同时，其实不是严格同一时刻。同一时刻确实是写操作在等锁。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693896365,"ip_address":"广东","comment_id":380511,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"老师你好，为什么可以同时多个事务修改同一条数据呢，第一个事务要修改时候不会对这条记录加锁吗？其他事务不是等待拿到锁？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627214,"discussion_content":"这里的同时，其实不是严格同一时刻。同一时刻确实是写操作在等锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693896365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380510,"user_name":"浩仔是程序员","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"广东","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1693741555,"is_pvip":false,"replies":[{"id":138596,"content":"会删除掉用不上的。但是触发删除的原理也有点复杂，你有兴趣可以去了解一下。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693895599,"ip_address":"广东","comment_id":380510,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"老师你好，这个版本链是一直维护的吗？还是执行完事务之后会断开这条链","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627201,"discussion_content":"会删除掉用不上的。但是触发删除的原理也有点复杂，你有兴趣可以去了解一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693895599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378191,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1367048,"ip_address":"中国香港","ucode":"B639AB5F6AA03D","user_header":"https://static001.geekbang.org/account/avatar/00/14/dc/08/64f5ab52.jpg","comment_is_top":false,"comment_ctime":1689867757,"is_pvip":false,"replies":[{"id":137820,"content":"会。其实 RC 就是能够插入进去。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689952434,"ip_address":"广东","comment_id":378191,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"这里尤其要注意一点，就是理论上来说可重复读是没有解决幻读的。但是 MySQL 因为使用了临键锁，因此它的可重复读隔离级别已经解决了幻读问题。你在面试的过程中不要忘了强调这一点。\n\n有人知道为啥吗，解释一下，是不是如下原因：\n\n如果是范围查询SQL语句的话，如果没有临建锁，查询出来的数据会变多，导致不一致。例如 where id &lt; 3 for update, 如果没有临建锁把[4, 正无穷）的记录锁住，那么会导致查出的数据会不一致吗？\n\n","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623887,"discussion_content":"会。其实 RC 就是能够插入进去。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689952434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378173,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"浙江","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1689844040,"is_pvip":false,"replies":[{"id":137823,"content":"目前来说，MySQL 的官方从来没说过自己的 RR 是快照读。所以我只能保守一点说 MySQL 的 RR 非常接近快照读。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689952957,"ip_address":"广东","comment_id":378173,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"MySQL 在可重复读这个隔离级别下，查询的执行效果和快照读非常接近。\n在rr隔离级别下，查询不就是快照读吗，为什么说和快照读非常接近呢？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623890,"discussion_content":"目前来说，MySQL 的官方从来没说过自己的 RR 是快照读。所以我只能保守一点说 MySQL 的 RR 非常接近快照读。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689952957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378164,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"浙江","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1689839648,"is_pvip":false,"replies":[{"id":137822,"content":"ru 下面也会有锁，不然多个线程更新同一个数据，就乱套了。rc 性能好我认为主要体现在没有临键锁这些机制上，也就是资源保护没那么严苛。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689952867,"ip_address":"广东","comment_id":378164,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"rc为什么比rr性能更好呢，ru级别下是否还有锁呢","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623889,"discussion_content":"ru 下面也会有锁，不然多个线程更新同一个数据，就乱套了。rc 性能好我认为主要体现在没有临键锁这些机制上，也就是资源保护没那么严苛。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689952867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377956,"user_name":"so long","can_delete":false,"product_type":"c1","uid":1449679,"ip_address":"浙江","ucode":"2A6B47BB32FC18","user_header":"https://static001.geekbang.org/account/avatar/00/16/1e/cf/97cd8be1.jpg","comment_is_top":false,"comment_ctime":1689591021,"is_pvip":false,"replies":[{"id":137758,"content":"Read View 针对的是读请求。正常都有可能出现多个活跃事务，比如说你直接在代码里面 begin 多个事务就可以。那么中间这些事务会执行 UPDATE 语句，也会提交，这样就会影响别的事务的 Read View","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689680140,"ip_address":"广东","comment_id":377956,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"老师你好，请教一个问题。多个事物并发更新同一条数据，应该会加记录锁，同一时间这条数据最多就一个活跃的事物。老师上文所讲的Read View m_ids会存在多条活跃的事物，什么情况下会出现多条活跃事物呢？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623614,"discussion_content":"Read View 针对的是读请求。正常都有可能出现多个活跃事务，比如说你直接在代码里面 begin 多个事务就可以。那么中间这些事务会执行 UPDATE 语句，也会提交，这样就会影响别的事务的 Read View","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689680140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131592,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/48/fae317c1.jpg","nickname":"子休","note":"","ucode":"EDB61FB012C195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623770,"discussion_content":"所谓活跃事务，指的是已经开启，但是还没commit的事务。你可以在mysql的命令窗口，手动开几个session窗口，分别执行begin命令，这就已经是开启了多个事务（每一个窗口代表一个事务），然后分别在每个窗口各自对同一条记录做修改或者查询，但是不执行commit命令,这几个事务就已经处于活跃状态。这个时候，你在这几个活跃事务的命令窗口里面执行select命令，就可以复现你想复现的隔离级别问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689820520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377873,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1689427269,"is_pvip":false,"replies":[{"id":137737,"content":"1. 不需要你指定，你只能调一调隔离级别。比如说你使用可重复读，你就可以认为自己在用快照读。\n2. 当然会占用内存，但是这个没有你想的那么严重，因为用完了的 undo log 是会被删掉的。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689609217,"ip_address":"广东","comment_id":377873,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"请教老师两个问题：\nQ1：快照读，当前读，是怎么指定的？SQL语句中指定吗？\nQ2：用版本链的话，一行记录会生成多个备份。数据库会有很多读、写，就会有很多行的版本链，这样会占用很多内存吗？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623550,"discussion_content":"1. 不需要你指定，你只能调一调隔离级别。比如说你使用可重复读，你就可以认为自己在用快照读。\n2. 当然会占用内存，但是这个没有你想的那么严重，因为用完了的 undo log 是会被删掉的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689609217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1592045,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoKiaUID2xruIcHdtdT7vsx8tsVRIjTx4ZpxNP8RYibnJ0AVcU4DRUibBQwkHeovr7NSDUoib16sg5IWQ/132","nickname":"沙漠胖胖树","note":"","ucode":"FC352122E6BA1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":642960,"discussion_content":"你这说的不对啊， 看下gpt的回答：\n\n在MySQL中，有两种常见的读操作方式：**当前读**和**快照读**。让我详细解释一下它们的区别和使用方法：\n\n1. **当前读**（也称为**锁定读**）：\n   - 当前读会读取最新版本的数据，并且需要先获取对应记录的锁。\n   - 使用以下SQL语句会触发当前读：\n     - `SELECT ... FOR UPDATE`\n     - `SELECT ... LOCK IN SHARE MODE`\n   - 当前读适用于需要保证数据一致性的场景，如金融交易等。\n\n2. **快照读**（也称为**一致性非锁定读**）：\n   - 快照读不会锁定任何行记录，而是基于一个快照来读取数据。\n   - 这个快照是在事务开始时创建的，因此在事务执行期间，即使其他事务修改了数据，当前事务看到的仍然是事务开始时的数据状态。\n   - 普通的SELECT语句（不带FOR UPDATE或LOCK IN SHARE MODE）就是快照读。\n   - 快照读不会阻塞其他事务的读写操作，因此并发性能较好。\n\n在选择使用哪种读方式时，需要根据具体的业务需求和场景来权衡数据一致性、并发性能以及幻读问题等因素。通过合理地使用这两种读方式，我们可以更好地保证数据库的事务隔离性和一致性。¹[1] ²[2]\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713947154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":623550,"ip_address":"北京","group_id":0},"score":642960,"extra":""}]},{"author":{"id":1131592,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/48/fae317c1.jpg","nickname":"子休","note":"","ucode":"EDB61FB012C195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623768,"discussion_content":"当前读：select ... for update; select in share mode; insert ...; update...; delete...;\n快照读：除了上面五种，其它select都是快照读。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689820212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3720570,"avatar":"https://static001.geekbang.org/account/avatar/00/38/c5/7a/c03cb56e.jpg","nickname":"一弦一柱思华年","note":"","ucode":"36F8086A275AA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1131592,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/48/fae317c1.jpg","nickname":"子休","note":"","ucode":"EDB61FB012C195","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635097,"discussion_content":"还有读未提交 串行两种隔离级别下 也是当前读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704417109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":623768,"ip_address":"广东","group_id":0},"score":635097,"extra":""}]}]},{"had_liked":false,"id":377827,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"重庆","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1689308279,"is_pvip":false,"replies":[{"id":137706,"content":"赞！\n关于第二点，我有一个小问题，是因为账单可能数据很多，所以要分批次查询吗？还是说，即便很少的数据，账单本身也会被修改了？","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689423669,"ip_address":"广东","comment_id":377827,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"1.读未提交，每次都查询最新的数据即可；串行化，由于代码是串行，所以每次直接读取即可。\n2.计算客户的账单，需要保证整个事务读取的数据是一致的","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623403,"discussion_content":"赞！\n关于第二点，我有一个小问题，是因为账单可能数据很多，所以要分批次查询吗？还是说，即便很少的数据，账单本身也会被修改了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689423669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":392249,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"北京","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1720410305,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"READ UNCOMMITTED：直接读取最新的数据行，不使用 MVCC，也不加锁。允许脏读，性能较高，但数据一致性较差。\nSERIALIZABLE：通过加锁机制（共享锁、排他锁和间隙锁）来实现完全隔离，防止脏读、不可重复读和幻读。数据一致性最高，但并发性能较低。","like_count":0},{"had_liked":false,"id":389446,"user_name":"一块跑跑","can_delete":false,"product_type":"c1","uid":1177796,"ip_address":"浙江","ucode":"576EC5A37721FD","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/c4/c7f665df.jpg","comment_is_top":false,"comment_ctime":1712593196,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"课程中面试准备部分“如果这时候你回答读取到事务 101 的数据，那么面试官就进一步追问。如果这时候事务 103 提交了，但是 102 还没提交，那么会读到谁的呢？”\n\n针对同一行的数据，102未提交的情况下103是不可能提交的，会一直阻塞等待102提交后才执行吧","like_count":0},{"had_liked":false,"id":388301,"user_name":"哈哈哈","can_delete":false,"product_type":"c1","uid":1182129,"ip_address":"北京","ucode":"6EE4760B4CBCBF","user_header":"https://static001.geekbang.org/account/avatar/00/12/09/b1/0750daba.jpg","comment_is_top":false,"comment_ctime":1709827279,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"老师，有个问题我和您理解的不一样。\nRR下，如果A和B两个事务，A事务先进行快照读，然后B事务执行Insert且提交，然后A继续在原有的事务里执行Update所有记录，然后A事务再进行一次快照读，这时候在A这里，出现了幻读。所以可重复读级别下，即使使用临键锁，也没有完全解决幻读问题。","like_count":0,"discussions":[{"author":{"id":1184140,"avatar":"https://static001.geekbang.org/account/avatar/00/12/11/8c/503e440e.jpg","nickname":"柴墟散人","note":"","ucode":"DCD96E17C89408","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645966,"discussion_content":"临键锁存在的情况下，B事务中的insert插不进去的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717057890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386189,"user_name":"学无涯","can_delete":false,"product_type":"c1","uid":1545358,"ip_address":"广东","ucode":"8AA154ADC0ECAE","user_header":"https://static001.geekbang.org/account/avatar/00/17/94/8e/c611687c.jpg","comment_is_top":false,"comment_ctime":1704285812,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"--- 可重复读：事务开始的时候，创建出 Read View。","like_count":0}]}