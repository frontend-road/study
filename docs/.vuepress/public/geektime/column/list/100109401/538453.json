{"id":538453,"title":"55｜RESTful Web Services（19）：如何更有效地构造测试数据？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p>目前我们已经实现了ResourceRouter，整体的架构愿景如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/59/24/59ee2d534a4ae87623a736157e848924.jpg?wh=2284x1285\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/2e/a4/2ef7e84ba450b36d1df67cfce9e61da4.jpg?wh=2284x1285\" alt=\"\"></p><p>目前UriTemplate的任务列表为</p><ul>\n<li>UriTemplate\n<ul>\n<li>\n<p><s>匹配无参数的Uri模版</s></p>\n<ul>\n<li><s>如果Uri可以与模版匹配，则返回匹配结果</s></li>\n<li><s>如果Uri不能与模版匹配，则返回Optional.empty</s></li>\n</ul>\n</li>\n<li>\n<p><s>匹配带参数的Uri模版</s></p>\n<ul>\n<li><s>如果Uri可以与模版匹配，按照指定参数从Uri中提取值</s></li>\n<li><s>参数可以通过正则表达式指定格式</s></li>\n<li><s>如果参数重复定义，则抛出异常</s></li>\n</ul>\n</li>\n<li>\n<p>模版匹配的结果可以比较大小</p>\n<ul>\n<li>如果匹配的非参字符多，则优先（长的优先）</li>\n<li>如果匹配的非参数字符一样，匹配的分组多，则优先（参数优先）</li>\n<li>如果匹配的分组一样多，指定格式参数匹配多的优先（指定格式参数优先）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><p>代码为：</p><pre><code>{\n    private static final String LeftBracket = &quot;\\\\{&quot;;\n    private static final String RightBracket = &quot;}&quot;;\n    private static final String VariableName = &quot;\\\\w[\\\\w\\\\.-]*&quot;;\n    private static final String NonBrackets = &quot;[^\\\\{}]+&quot;;\n    private static final Pattern variable = Pattern.compile(LeftBracket + group(VariableName) +\n            group(&quot;:&quot; + group(NonBrackets)) + &quot;?&quot; + RightBracket);\n    private static final int variableNameGroup = 1;\n    private static final int variablePatternGroup = 3;\n    private static final String defaultVariablePattern = &quot;([^/]+?)&quot;;\n    private final Pattern pattern;\n    private final List&lt;String&gt; variables = new ArrayList&lt;&gt;();\n    private int variableGroupStartFrom;\n    public UriTemplateString(String template) {\n        pattern = Pattern.compile(group(variable(template)) + &quot;(/.*)?&quot;);\n        variableGroupStartFrom = 2;\n    }\n    private String variable(String template) {\n        return variable.matcher(template).replaceAll(result -&gt; {\n            String variableName = result.group(variableNameGroup);\n            String pattern = result.group(variablePatternGroup);\n            if (variables.contains(variableName))\n                throw new IllegalArgumentException(&quot;duplicate variable &quot; + variableName);\n            variables.add(variableName);\n            return pattern == null ? defaultVariablePattern : group(pattern);\n        });\n    }\n    @Override\n    public Optional&lt;MatchResult&gt; match(String path) {\n        Matcher matcher = pattern.matcher(path);\n        if (!matcher.matches()) return Optional.empty();\n        return Optional.of(new PathMatchResult(matcher));\n    }\n    class PathMatchResult implements MatchResult {\n        private int count;\n        private Matcher matcher;\n        private Map&lt;String, String&gt; parameters = new HashMap&lt;&gt;();\n        public PathMatchResult(Matcher matcher) {\n            this.matcher = matcher;\n            this.count = matcher.groupCount();\n            for (int i = 0; i &lt; variables.size(); i++)\n                parameters.put(variables.get(i), matcher.group(variableGroupStartFrom + i));\n        }\n        @Override\n        public int compareTo(MatchResult o) {\n            return 0;\n        }\n        @Override\n        public String getMatched() {\n            return matcher.group(1);\n        }\n        @Override\n        public String getRemaining() {\n            return matcher.group(count);\n        }\n        @Override\n        public Map&lt;String, String&gt; getMatchedPathParameters() {\n            return parameters;\n        }\n    }\n    private static String group(String pattern) {\n        return &quot;(&quot; + pattern + &quot;)&quot;;\n    }\n}\n</code></pre><h2>视频演示</h2><p>进入今天的环节：</p><p><video poster=\"https://media001.geekbang.org/e8f432e755ff454c888a7d875f42dfa1/snapshots/b50edd9fa0fd4bc9a1aad2f3d552aff4-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/39d375d0-181ec6d762a-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/53a53bbcaf5844c795cc78618bfdcd1b/bf7d4913ddc4459298ec80d95528ae43-1ebea23d192a79cc85aa43c042e853cf-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>RootResource/Resource/ResourceMethod部分的任务要如何分解？</p><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码分享出来。相信经过你的思考与实操，学习效果会更好！</p><!-- [[[read_end]]] -->","neighbors":{"left":{"article_title":"54｜RESTful Web Services（18）：如何实现UriTemplate的主要功能？","id":538452},"right":{"article_title":"56｜RESTful Web Services（20）：为什么要通过测试的方法来驱动出代码结构？","id":541080}},"comments":[{"had_liked":false,"id":352231,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1658466801,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"原来通过排序也可以实现策略模式，之前只知道使用HASH实现策略模式","like_count":0}]}