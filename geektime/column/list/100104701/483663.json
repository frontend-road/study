{"id":483663,"title":"05｜负载均衡：从状态的角度重新思考负载均衡","content":"<p>你好，我是陈现麟。</p><p>通过学习“注册发现”的内容，你已经明白了分布式系统为什么需要注册发现组件，也知道了在实现注册发现时要注意的两个关键点，并且理解了从 CAP 理论的角度来说，注册发现是一个 AP 模型。如果我们想把极客时间这个单体服务，改造成一个分布式系统，那么这些内容都将为我们打下一个良好的基础。</p><p>同时，极客时间为了实现系统的高可用和高性能，它所有的服务都会部署多个实例，那么这就会导致在极客时间的后端系统，调用方通过注册发现组件，去获得被调用服务实例的网络地址时，获取到包含多个服务实例的网络地址列表。<strong>这时你将面临一个新的问题，那就是调用方应该将请求，发向被调用服务的哪一个服务实例呢</strong>？</p><p>在本节课里，我们就一起来解决分布式系统中，多个被调用服务实例的选择问题，即负载均衡策略。我们会先从负载均衡在架构设计中需要考虑的关键点出发，根据负载均衡策略是否关心请求中携带的信息，即请求是否有状态，将负载均衡策略分为无状态的负载均衡、半状态的负载均衡和全状态的负载均衡，从状态的角度来重新思考。</p><h2>负载均衡的关键点</h2><p>每一个被调用服务（后面简称为后端服务）都会有多个实例，那么服务的调用方应该将请求，发向被调用服务的哪一个服务实例，这就是负载均衡的业务场景。</p><!-- [[[read_end]]] --><p>关于如何解决这个问题，我们可以换一个角度，站在被调用服务实例（后面简称为后端实例）的角度理解负载均衡。对于后端实例组来说，负载均衡就是一个调度器，它将发送给被调用服务的每一个请求，按一定的策略分配给后端实例组中的一个实例，确保能高效、正确地提供服务。</p><p>根据上面的讨论，我们可以得出，负载均衡需要达到的目的是“确保能高效、正确地提供服务”，同时从这个目的中，我们还可以分析出负载均衡的两个关键点。</p><p>首先，我们结合“高效地提供服务”这个目的来分析。如何高效地提供服务，我认为可以理解为后端实例组多个实例的资源运行效率问题。负载均衡需要考虑到各个实例性能差异的情况，让每一个实例都能充分发挥它的能力，不要出现一些实例负载比较高，而另一些实例的负载却非常低的情况，这样会造成资源浪费。</p><p>所以，我们从中可以得出，<strong>负载均衡的第一个关键点是公平性</strong>，即负载均衡需要关注被调用服务实例组之间的公平性，不要出现旱的旱死，涝的涝死的情况。</p><p>接着，我们来讨论一下“正确地提供服务”这个目的。如何正确地提供服务，我认为这是后端服务对外表现出的整体结果。负载均衡需要确保外部对后端服务的请求，一定能被路由到可以提供正确服务的实例上。如果后端实例是有状态的，比如需要利用本地缓存和存储来处理请求的，我们就需要考虑每个请求携带的状态，然后依据状态信息，将请求正确路由到后端的实例上。</p><p>从这里我们可以得出，<strong>负载均衡的第二个关键点是正确性</strong>，即对于有状态的服务来说，负载均衡需要关心请求的状态，将请求调度到能处理它的后端实例上，不要出现不能处理和错误处理的情况。</p><p>我们已经讨论出了负载均衡的两个关键点：公平性和正确性。所以，在后面讨论负载均衡各种不同的策略时，我们将采用公平性和正确性这两个维度，来评价每一种负载均衡策略的具体情况。</p><p>为了更好地实现负载均衡的公平性和正确性，针对各种不同的业务场景，出现了多种不同的策略。<strong>在这些不同的业务场景中，我认为对负载均衡策略的设计，影响最大的因素是后端实例是否存在状态，后端实例有状态，负载均衡就需要关心请求的状态</strong>。</p><p>如果一个有状态的请求，被路由到错误的后端实例上，将会导致请求无法处理或者获得错误的结果。比如一个查询用户年龄的请求，如果负载均衡策略将该请求，错误地路由到一个没有存储该用户年龄数据的实例上，那么这个实例就只能返回 not found 。对于有状态的请求，如果路由错误，就会影响负载均衡的正确性。</p><p>因此我们会在下文中，依据负载均衡是否关心请求的状态，将负载均衡策略分为无状态的负载均衡、半状态的负责均衡和全状态的负载均衡，结合负载均衡的两个关键点一一进行分析。</p><h2>无状态的负载均衡</h2><p>无状态的负载均衡是我们日常工作中接触最多的负载均衡模型，它指的是参与负载均衡的后端实例是无状态的，所有的后端实例都是对等的，一个请求不论发向哪一个实例，都会得到相同的并且正确的处理结果，<strong>所以无状态的负载均衡策略不需要关心请求的状态</strong>。</p><p>到这里，你可能会有一个疑问，这些无状态实例难道不能处理像存储数据这样的状态吗？如果需要处理状态应该怎么办呢？这是一个很好的问题，答案也非常简单。</p><p>实例将这些状态信息的处理都交给一个中心存储来负责，比如 MySQL 数据库和 Redis 缓存等，实例不在本地机器的磁盘或者内存中，存储任何状态信息。这是一个非常好的设计原则，让专业的中心存储来处理状态信息，大大简化了系统的设计。</p><p>下面我们以轮询和权重轮询来举例，先讲一讲它们的负载均衡策略，再结合公平性和正确性这两个关键点，评价无状态的负载均衡策略的具体情况。</p><h3>轮询</h3><p>轮询的负载均衡策略非常简单，只需要将请求按顺序分配给多个实例，不用再做其他的处理。例如，轮询策略会将第一个请求分配给第一个实例，然后将下一个请求分配给第二个实例，这样依次分配下去，分配完一轮之后，再回到开头分配给第一个实例，再依次分配。</p><p>轮询在路由时，不利用请求的状态信息，属于无状态的负载均衡策略，所以它不能用于有状态实例的负载均衡器，否则正确性会出现问题。在公平性方面，因为轮询策略只是按顺序分配请求，所以适用于请求的工作负载和实例的处理能力差异都较小的情况。</p><h3>权重轮询</h3><p>权重轮询的负载均衡策略是将每一个后端实例分配一个权重，分配请求的数量和实例的权重成正比轮询。例如有两个实例 A，B，假设我们设置 A 的权重为 20，B 的权重为 80，那么负载均衡会将 20% 的请求数量分配给 A，80 % 的请求数量分配给 B。</p><p>权重轮询在路由时，不利用请求的状态信息，属于无状态的负载均衡策略，所以它也不能用于有状态实例的负载均衡器，否则正确性会出现问题。在公平性方面，因为权重策略会按实例的权重比例来分配请求数，<strong>所以，我们可以利用它解决实例的处理能力差异的问题，认为它的公平性比轮询策略要好</strong>。</p><p>无状态的负载均衡策略除了上面的两种外，还有 FAIR 、随机、权重随机和最少链接数等策略，你可以从两个关键点出发对这些负载均衡策略进行分析。</p><h2>半状态的负载均衡</h2><p>半状态的负载均衡指的是，虽然负载均衡策略利用请求的状态信息进行路由，但是仅仅进行简单的规则处理，比如 Hash 运算加求模来路由请求，它不保证路由的正确性，这个正确性由后端实例来保证。</p><p>另外，一些实例会在内存中缓存一些状态数据，用于提升系统的性能，如果一个请求被路由到错误的实例中，该实例可以立即通过中心存储，读取出所需要的数据，然后在内存中重建并缓存正确的处理请求，不会导致请求出现错误。</p><p>而对于路由错误，后端实例不能恢复状态数据的场景，后端节点需要适应路由策略来保证数据的正确性，例如基于 Hash 策略路由的 MySQL 集群，如果集群的数目发生变更，我们需要通过数据迁移来保证路由的正确性。</p><p>所以，我们可以看出，<strong>半状态的负载均衡将请求按一定的策略进行路由，后端实例可以利用路由规则来进行优化</strong>。假设后端实例在进程里面缓存用户的信息，如果我们能将同一个用户的多个请求，都路由到同一个实例上，相对于轮询策略，单个实例不需要缓存全部的用户信息，可以大大减少缓存的内存容量。</p><p>为了评价半状态的负载均衡策略的具体情况，我们以 Hash 和一致性 Hash 来举例。</p><h3>Hash</h3><p>Hash 负载均衡策略是指将请求的状态信息，按一定的 Hash 算法固定分配到一个实例上，例如，按请求的来源 IP 地址或者用户的 ID，将同一个来源 IP 地址或者用户 ID 的请求固定到一个实例上。</p><p>我们来举个例子，如果有两个实例，我们想将相同用户 ID 的请求，固定分配到一个实例上面，那么按如下的方法来计算：</p><center>\n<p>$$<br>\n\\text { i }=\\operatorname{MD5}\\left(\\text {ID)} \\%2\\right.<br>\n$$</p>\n</center><p>这里要说明一下，公式中的 2 为实例的数量，除了 MD5 外，我们还可以使用不同的 Hash 算法。我们将实例从 0 开始编号，上面公式的计算结果 i 为负载均衡将要分配实例的编号。</p><p>从这个计算公式中，我们可以看出 Hash 负载均衡策略，在机器实例数量发生变化的时候，几乎所有请求的分配实例都会发送变化。如果后端实例依赖 Hash 负载均衡策略来保证正确性，那么当实例数发生变化的时候，正确性将会出现问题。对于 Hash 策略是如何保证正确性的具体内容，在后面“数据分片”的课程中，我们将会继续讨论。</p><p>公平性方面，在不考虑 Hash 算法均匀性的情况下，Hash 策略会按 Hash 值按模等分，它和轮询策略类似，不能解决请求的工作负载和实例的处理能力差异的问题。</p><h3>一致性 Hash</h3><p>Hash 的负载均衡策略中，最大的一个问题是基于机器数量求模，如果机器数量发生变化，请求和实例的分配关系机会将全部变化，这会影响它的正确性，而一致性 Hash 就可以用来解决这个问题，你可以结合下图来理解：<br>\n<img src=\"https://static001.geekbang.org/resource/image/25/67/25543f20f6536c4yy21988yyfceed167.jpg?wh=2284x1873\" alt=\"\"></p><p>假设我们定义 Hash 环的空间大小为$2^{32}$，那么我们先将 0 ~ $2^{32}$均匀地分配到上图的 Hash 环上，将所有的实例按其唯一标识（例如名字的字符串 “ Node A ”）计算在环上的位置：</p><center>\n<p>$$<br>\n\\text { iNode }=\\operatorname{hash}\\left(\\text { Node ID) } \\%2^{32}\\right.<br>\n$$</p>\n</center><p>然后，对于每一个请求，我们也按上面的方法计算其在环上的位置：</p><center>\n<p>$$<br>\n\\text { iRequest }=\\operatorname{hash}\\left(\\text {Request ID) } \\%2^{32}\\right.<br>\n$$</p>\n</center><p>最后，按请求在环上的位置沿环顺时针“行走”，遇到的第一个服务器节点，就是该请求负载均衡分配的节点。这里要注意的是，“键 5 ”沿环顺时针“行走”到环的结尾，如果还没有找到服务器节点，将从环的开头继续找，直到找到 Node A 。</p><p>你可以看到，一致性 Hash 和 Hash 策略最大的区别在于，一致性 Hash 是对固定值$2^{32}$求模，不会随着机器数量的变化而变化，所以对于同一个 Request ID ， iRequest 是始终稳定不变的，这样就解决了 Hash 的策略在实例数量发送变化后，几乎所有的分配关系都会发生变化的问题。</p><p>如果一致性 Hash 的机器数量发生变化后，会出现什么问题呢？其实就是发生变化的实例节点逆时针方向的一些请求的路由实例会发生改变，例如 Node A 下线了，那么“键 5 ”将被路由到 Node B ，如果在“键 5 ”和 Node B 之间新增了一个节点，那么“键 5 ”将路由到新增的节点。那么关于一致性 Hash 策略如何保证正确性的问题，我们也是在后面的“数据分片”课程中详细讨论。</p><p>到这里，你是不是觉得一致性 Hash 能在后端实例数量变化的时候，依然保持比较好的正确性，已经很完善了呢？</p><p>其实还有一个问题，那就是公平性，这里有两点需要我们注意。首先，如果后端实例数非常少，公平性将会出现问题，假设上图中只有 Node B 和 Node C ，那么 Node B 将要承担 70% 以上的请求；其次，如果各个节点的性能差异比较大，这样的情况我们会希望能按权重来进行分配。</p><p>关于一致性 Hash 策略公平性的问题，一致性 Hash 是通过增加虚拟节点的方法来解决的，在 Hash 环中路由到虚拟实例的请求，会被路由到它的真实实例上，比如下图中“键 1”和“键 3”的请求将路由到 Node A。<br>\n<img src=\"https://static001.geekbang.org/resource/image/c0/76/c0758401ae49481bd907d22fe0yyd576.jpg?wh=2284x1607\" alt=\"\"></p><p>对于实例数过少导致的公平性问题，一致性 Hash 策略让每一个实例都生成多个虚拟实例，使分配更加均衡；对于实例之间性能差异的问题，一致性 Hash 策略通过让实例生成虚拟实例的数量，与该实例的权重成正比的策略来解决。</p><h2>全状态的负载均衡</h2><p>全状态的负载均衡是指，负载均衡策略不仅利用请求的状态信息进行路由，并且在后端实例有状态的情况下，依然会保证路由的正确性。那它是怎么做到的呢？下面我们就来讨论一下全状态负载均衡的实现。</p><p>全状态的负载均衡一般以路由服务的形式存在，在路由服务里面，都会存储后端实例 ID 和状态信息的索引，在进行请求路由的时候，路由服务从请求的状态信息中获得索引的标识，通过查询索引获得后端实例的 ID，然后再进行路由。</p><p>如果你了解过“数据分片”机制，你就会发现它和全状态的负载均衡非常类似，其实它们就是一个事情，只是我们讨论的角度不同。如果我们从请求调度的角度来讨论，这就是一个全状态服务的负载均衡问题，如果我们从后端实例数据分布的角度来讨论，这就是一个数据分片的问题。</p><p>那么关于全状态的负载均衡策略，我们将放到后面的“数据分片”课程中进行讨论，这里就先不再赘述了。</p><h2>总结</h2><p>到这里，我们一起讨论了分布式系统场景下的负载均衡问题，一起来总结一下这节课的主要内容：</p><p>首先，我们通过对负载均衡业务场景的讨论，确定了评价负载均衡策略的关键点：公平性和正确性，以后当我们碰到负载均衡策略选型的时候，可以通过公平性和正确性来进行讨论。</p><p>然后，我们讨论了后端为无状态实例，常用的无状态的负载均衡策略：轮询、权重和 FAIR 等，学完这部分，你可以为无状态实例来选择合适的负载均衡策略。</p><p>接着，我们讨论了后端实例有状态，但是正确性不需要由负载均衡策略来保证的半状态负载均衡策略，常用的半状态的负载均衡策略有：Hash 和一致性 Hash 等，这里我们就知道了，怎么利用负载均衡策略的特点，优化后端服务的性能。</p><p>最后，我们讨论了全状态的负载均衡策略，其实全状态的负载均衡和数据分片是同一件事情，只是我们讨论的角度不一样而已，你会发现负载均衡和数据分片之间是有非常多的交集的。</p><h2>思考题</h2><p>我们利用 Hash 策略路由的 MySQL 集群，如果需要对集群进行扩容，我们怎么做才能在最少迁移数据的情况下，依然保证路由的正确性呢？</p><p>欢迎你在留言区发表你的看法。如果这节课对你有帮助，也推荐你分享给更多的同事、朋友。</p>","comments":[{"had_liked":false,"id":333203,"user_name":"啊树","can_delete":false,"product_type":"c1","uid":1281551,"ip_address":"","ucode":"F1072F4610B6F8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pZ5ibu3jOPTfWVtzTeNTiaL2PiabGT2Y2yKd2TNDcZMkIY34T5fhGcSnBjgpkd54Q3S6b3gRW3yYTxZk0QHYB0qnw/132","comment_is_top":true,"comment_ctime":1644207050,"is_pvip":true,"replies":[{"id":"122114","content":"服务路由是指通过服务的唯一标识找到服务的ip和port，所以它就是服务注册发现～","user_name":"作者回复","comment_id":333203,"uid":"1047808","ip_address":"","utype":1,"ctime":1644892456,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"9.2233720427939e+18","product_id":100104701,"comment_content":"服务路由是指etcd eureka这样的注册组件么？还是建立在注册组件之上的服务？","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551069,"discussion_content":"服务路由是指通过服务的唯一标识找到服务的ip和port，所以它就是服务注册发现～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644892456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333379,"user_name":"努力努力再努力","can_delete":false,"product_type":"c1","uid":1182967,"ip_address":"","ucode":"F71E16290CB58C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/f7/d6547adb.jpg","comment_is_top":false,"comment_ctime":1644316084,"is_pvip":true,"replies":[{"id":"121954","content":"赞~<br>1、滚动升级从库，是从提高硬件能力的角度来扩容<br>2、双写迁移，不能减少迁移的量，只是让迁移平滑一点，一般是 2 倍扩容，比如之前分了 4 张表，那么扩容为分 8 张表，就只需要迁移一半的数据。","user_name":"作者回复","comment_id":333379,"uid":"1047808","ip_address":"","utype":1,"ctime":1644579773,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"57478890932","product_id":100104701,"comment_content":"今天 才有空 整理，出本节的那天就看了<br>总结：<br>1. 负载均衡策略<br>      1.1 无状态<br>      1.2 半状态<br>      1.3 全状态<br>2. 关键点：<br>      2.1 公平性<br>      2.2 正确性 （请求调度到能正确处理它的后端实例上）<br>3. 无状态的负载均衡<br>4. 负载均衡策略：<br>      4.1 无状态<br>          4.1.1 轮训 （请求的工作负载和实例的处理能力差异都较小的情况） <br>          4.1.2 权重轮询 (解决实例的处理能力差异的问题)<br>          4.1.3 FAIR 、随机、权重随机和最少链接数 （可以看gateway &#47; ribbon）<br>      4.2 半状态 （正确性由后端实例来保证 将请求按一定的策略进行路由，后端实例可以利用路由规则来进行优化）<br>          4.2.1 hash<br>                4.2.1.1 正确性： 当实例数发生变化的时候，正确性将会出现问题<br>                4.2.1.2 公平性： 公平<br>           4.2.2 一致性 Hash<br>                 4.2.2.1 一句话： 一个圆，但是可能把压力给到某一个节点，怎么办？ 添加虚拟节点<br>      4.3 全状态（正确性由路由服务 来保证 ）<br><br>应用场景：<br>1. 无状态 我们正常服务都是<br>2. 半状态 分库分表的时候 hash id 和 时间戳进行分，属于半状态<br>3. 全状态 想到了 Kafka的Controller模型 数据分片 &#47; 正常分布式系统 leader&#47;follower 的选举其实也算 全状态<br><br>思考题：<br>就是 分库分表之后 怎么扩容<br>hash的 属于半状态<br>1. 升级从库 （这种的最少迁移量）<br>2. 双写迁移<br>","like_count":12,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550533,"discussion_content":"赞~\n1、滚动升级从库，是从提高硬件能力的角度来扩容\n2、双写迁移，不能减少迁移的量，只是让迁移平滑一点，一般是 2 倍扩容，比如之前分了 4 张表，那么扩容为分 8 张表，就只需要迁移一半的数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644579773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2055464,"avatar":"","nickname":"毛哥","note":"","ucode":"35EB4D51DB2C9B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553528,"discussion_content":"1\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645950652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333198,"user_name":"wd","can_delete":false,"product_type":"c1","uid":1178066,"ip_address":"","ucode":"1CE7A9F8237B8A","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/d2/dc2ac260.jpg","comment_is_top":false,"comment_ctime":1644204887,"is_pvip":false,"replies":[{"id":"121955","content":"是的，非常正确","user_name":"作者回复","comment_id":333198,"uid":"1047808","ip_address":"","utype":1,"ctime":1644579938,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"36003943255","product_id":100104701,"comment_content":"思考题：“我们利用 Hash 策略路由的 MySQL 集群，如果需要对集群进行扩容，我们怎么做才能在最少迁移数据的情况下，依然保证路由的正确性呢？” 是不是可以考虑采取每次倍增扩容的方式来减少必要的数据迁移？比如从两个实例扩容到四个实例，只需要迁移一半的数据到新节点上。","like_count":8,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550534,"discussion_content":"是的，非常正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644579938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333233,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1644223826,"is_pvip":true,"replies":[{"id":"122425","content":"Q1：SpringCloud Ribbon 是一个负责均衡组件，可以通过配置选择负载均衡算法：com.netflix.loadbalancer.****，比如com.netflix.loadbalancer.RandomRule 是随机算法，com.netflix.loadbalancer. RoundRobinRule 是轮询算法，这些算法可以是讨论是否有无状态的<br>Q2：mysql的 分区分表一般都是采用 hash 算法的半状态负载均衡<br>Q3：是的，数据分片的问题从负载均衡的角度来看，就是全状态负载均衡","user_name":"作者回复","comment_id":333233,"uid":"1047808","ip_address":"","utype":1,"ctime":1645408899,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10234158418","product_id":100104701,"comment_content":"请教老师三个问题：<br>Q1：SpringCloud的负载均衡组件，一个是Ribbon，一个是LoadBalencer,他们是有状态的还是无状态的？<br>Q2：半状态负载均衡有哪些例子？<br>Q3：全状态负载均衡等同于数据分片吗？<br>本文中有这样一句话：“其实全状态的负载均衡和数据分片是同一件事情”，那么，全状态负载均衡就等同于数据分片吗？如果不等同，还有其他什么情况？<br>","like_count":2,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552313,"discussion_content":"Q1：SpringCloud Ribbon 是一个负责均衡组件，可以通过配置选择负载均衡算法：com.netflix.loadbalancer.****，比如com.netflix.loadbalancer.RandomRule 是随机算法，com.netflix.loadbalancer. RoundRobinRule 是轮询算法，这些算法可以是讨论是否有无状态的\nQ2：mysql的 分区分表一般都是采用 hash 算法的半状态负载均衡\nQ3：是的，数据分片的问题从负载均衡的角度来看，就是全状态负载均衡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645408899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355466,"user_name":"Geek_05ebfb","can_delete":false,"product_type":"c1","uid":2740627,"ip_address":"浙江","ucode":"9C4780275F5925","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLgJgAHLWf6aEZvKao4DR8ajxz0J0EEzgNQcN9iaHicfM3gYgQZAhB8w3pOibcrLy2F6c4Y13YIFNElw/132","comment_is_top":false,"comment_ctime":1661407132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5956374428","product_id":100104701,"comment_content":"无状态<br>半状态<br>全状态<br>可以举个例子么？老师 不懂啊","like_count":1},{"had_liked":false,"id":349446,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1655973412,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5950940708","product_id":100104701,"comment_content":"- 大道至简，很多技术的底层原理都是相通的。全状态负载均衡本质上就是数据分片。<br>- 负载均衡的正确性就是要保证同样的 key 要路由到固定的节点上，对应到数据分片中就是分布式存储，传统的关系型数据库需要做数据迁移，而 NoSQL 如 Redis 是通过 Hash Slot 来实现。<br>- 负载均衡的公平性其实就是数据分片的均匀性，在做数据分片时也要采用合适的 Sharding Key，否则可能导致数据倾斜。同时还有考虑数据热点等场景。<br>- 全状态负载均衡的典型场景如泳道、全链路压测，都是需要借助流量标识和路由服务，将特定流量标识的请求路由到正确的实例上。<br>- 思考题：扩容时一般都采用成倍扩容，这样在数据迁移时可以只处理一半的节点。<br><br>","like_count":1,"discussions":[{"author":{"id":1258345,"avatar":"https://static001.geekbang.org/account/avatar/00/13/33/69/e6947f65.jpg","nickname":"Npepsi","note":"","ucode":"08782676C3B67D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581465,"discussion_content":"你好，我想请教一下为啥扩容采用成倍扩容，可以在数据迁移时只处理一半的节点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658798853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339167,"user_name":"study的程序员","can_delete":false,"product_type":"c1","uid":1023101,"ip_address":"","ucode":"E5AE9037D24429","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","comment_is_top":false,"comment_ctime":1647953893,"is_pvip":false,"replies":[{"id":"124518","content":"是的，这是一个区别之一，全状态的粒度更细。","user_name":"作者回复","comment_id":339167,"uid":"1047808","ip_address":"","utype":1,"ctime":1648862643,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5942921189","product_id":100104701,"comment_content":"感觉全状态和半状态有点难以区分，能否这样理解：半状态下，负载均衡只保证某一key路由到一个节点；全状态下，负载均衡要保证某一个key路由到固定的一个节点。","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559634,"discussion_content":"是的，这是一个区别之一，全状态的粒度更细。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648862643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339166,"user_name":"study的程序员","can_delete":false,"product_type":"c1","uid":1023101,"ip_address":"","ucode":"E5AE9037D24429","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","comment_is_top":false,"comment_ctime":1647953796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5942921092","product_id":100104701,"comment_content":"感觉半状态和全状态有点模糊，能否这样理解？","like_count":1},{"had_liked":false,"id":337853,"user_name":"零极限","can_delete":false,"product_type":"c1","uid":1260579,"ip_address":"","ucode":"45F437CD69A47F","user_header":"https://static001.geekbang.org/account/avatar/00/13/3c/23/10f99c54.jpg","comment_is_top":false,"comment_ctime":1647093984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5942061280","product_id":100104701,"comment_content":"什么场景用无状态，什么场景用半状态","like_count":1},{"had_liked":false,"id":335764,"user_name":"Ronnie","can_delete":false,"product_type":"c1","uid":1604191,"ip_address":"","ucode":"D7DEA7A4D13963","user_header":"https://static001.geekbang.org/account/avatar/00/18/7a/5f/c05cd5dc.jpg","comment_is_top":false,"comment_ctime":1645682624,"is_pvip":true,"replies":[{"id":"123066","content":"是的，还有一种处理公平性的策略，不过使用的比较少，它不引入虚拟节点，而是去调整节点在hash环上的位置(节点在hash环上的位置不是通过hash计算来确定，而是维护好节点的位置信息)，只不过这种策略使用比较少一点","user_name":"作者回复","comment_id":335764,"uid":"1047808","ip_address":"","utype":1,"ctime":1646391346,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5940649920","product_id":100104701,"comment_content":"一致性哈希，不过一致性哈希也存在不公平性，这个可以通过虚拟节点来实现","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554463,"discussion_content":"是的，还有一种处理公平性的策略，不过使用的比较少，它不引入虚拟节点，而是去调整节点在hash环上的位置(节点在hash环上的位置不是通过hash计算来确定，而是维护好节点的位置信息)，只不过这种策略使用比较少一点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646391346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335573,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1645592685,"is_pvip":false,"replies":[{"id":"122656","content":"是的，容易导致雪崩","user_name":"作者回复","comment_id":335573,"uid":"1047808","ip_address":"","utype":1,"ctime":1645658998,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5940559981","product_id":100104701,"comment_content":"还有自适应负载均衡。虽然这玩意在应对高并发时并不是很靠谱。","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552927,"discussion_content":"是的，容易导致雪崩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645658998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334622,"user_name":"Noah","can_delete":false,"product_type":"c1","uid":1473744,"ip_address":"","ucode":"30748FB1FFB4AD","user_header":"https://static001.geekbang.org/account/avatar/00/16/7c/d0/eec67c84.jpg","comment_is_top":false,"comment_ctime":1645021467,"is_pvip":true,"replies":[{"id":"122281","content":"这个状态是由后端提供服务的实例是否对等来决定的。<br>文中查询用户的年龄的例子，是假设在用户信息是按一定的策略存储在后端的服务上，每一个后端服务只存储一部分。<br><br>如果用户的年龄信息是存储在一个外部的数据库中，所有的后端服务实例都可以访问到，那么这些后端服务的对等的，这个时候，请求就是无状态的。","user_name":"作者回复","comment_id":334622,"uid":"1047808","ip_address":"","utype":1,"ctime":1645108991,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"5939988763","product_id":100104701,"comment_content":"陈老师，您好，关于“请求的状态”中的“状态”的定义，我感到有点困惑，文中以查询用户的年龄作为有状态的请求的示例，请问这里的状态指的是什么？用户的年龄数据么？您能否给出一个“不带状态“的请求示例呢？","like_count":1,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551773,"discussion_content":"这个状态是由后端提供服务的实例是否对等来决定的。\n文中查询用户的年龄的例子，是假设在用户信息是按一定的策略存储在后端的服务上，每一个后端服务只存储一部分。\n\n如果用户的年龄信息是存储在一个外部的数据库中，所有的后端服务实例都可以访问到，那么这些后端服务的对等的，这个时候，请求就是无状态的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645108991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1604191,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7a/5f/c05cd5dc.jpg","nickname":"Ronnie","note":"","ucode":"D7DEA7A4D13963","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552994,"discussion_content":"给你举个通熟易懂的，比如某用户登录系统访问的是服务器A然后缓存了一部分用户数据在服务器A中供后面的调用时使用，那么后面的请求也要到A才能取到这部分信息，这就是带状态的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645683157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356357,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"四川","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1662196481,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1662196481","product_id":100104701,"comment_content":"所以说，尽量把服务设计成无状态的才是上策吧？","like_count":0},{"had_liked":false,"id":347333,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1653957028,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653957028","product_id":100104701,"comment_content":"思考题应该是以2的幂次方倍数进行扩容，其实跟最新的hashmap扩容原理一样，可以有效降低元素的迁移数量","like_count":1},{"had_liked":false,"id":345733,"user_name":"Jay","can_delete":false,"product_type":"c1","uid":1070670,"ip_address":"","ucode":"ED9970F7E66080","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/4e/9291fac0.jpg","comment_is_top":false,"comment_ctime":1652533353,"is_pvip":true,"replies":[{"id":"126378","content":"好的，这几天就会提供","user_name":"作者回复","comment_id":345733,"uid":"1047808","ip_address":"","utype":1,"ctime":1653112182,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1652533353","product_id":100104701,"comment_content":"思考题的答案，作者是否可以给下呢？不是后端开发，但对分布式技术很感兴趣，感觉思考题里面可能需要后端方面的背景知识才能回答呢……","like_count":0,"discussions":[{"author":{"id":1047808,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/00/f5d19a8b.jpg","nickname":"伴鱼技术团队","note":"","ucode":"C7FAC706B18376","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572979,"discussion_content":"好的，这几天就会提供","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653112182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}