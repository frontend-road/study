{"id":649077,"title":"28｜最小生成树：克鲁斯卡尔（Kruskal）算法与修路费用最少的问题？","content":"<p>你好，我是王健伟。</p><p>上节课我带你实现了用普里姆算法寻找一个无向连通图的最小生成树，并且我们已经知道，普里姆算法比较适合<strong>顶点数比较少，边数比较多</strong>的图。</p><p>这节课我带你看一看另外一种寻找无向连通图最小生成树的方法——克鲁斯卡尔<span class=\"reference\">（Kruskal）</span>算法。话不多说，我们先看一看这个算法是如何描述的。</p><h2>克鲁斯卡尔<span class=\"reference\">（Kruskal）</span>算法详解</h2><p>将图中的顶点列出来，挑选出权值最小的一条边，前提是第一这条边以往没被挑选过，第二这条边对应的两个顶点并没有连通。注意，直接或者间接通过其他顶点连通都算连通，连通会造成有环，是不行的。重复挑选这样的边，直到所有顶点都直接或者间接连通。</p><p>克鲁斯卡尔算法的主要难点是<strong>判断两个顶点是否已经直接或者间接地连通，因为对于已经连通的两个顶点，即便他们之间的边权值最小，也不能选择。</strong>看一看图1所示的无向连通图：</p><p><img src=\"https://static001.geekbang.org/resource/image/d6/f5/d650438bf233ea553cbb83036078b7f5.jpg?wh=2488x566\" alt=\"\" title=\"图1 采用克鲁斯卡尔算法得到的一个无向连通图最小生成树的步骤\"></p><p>图1展示了一个无向连通图最小生成树的步骤，从权值最小的边开始挑选。其中边的权值为1、2、3、4的边都非常好挑选，但权值为5的边却有3条，分别是顶点CD之间的边、顶点AD之间的边以及顶点BC之间的边。</p><p>但显然顶点CD之间的边不能选，否则C、D、F三个顶点就会构成环<span class=\"reference\">（顶点C和D已经通过F间接连通）</span>，顶点AD之间的边不能选，否则A、D、F、C四个顶点会构成环，只能选择BC之间的边。克鲁斯卡尔算法的难点就是如何判断C、D、F三个顶点会构成环或者A、D、F、C四个顶点会构成环。</p><!-- [[[read_end]]] --><p>这里图的存储仍然采用邻接矩阵的方式，那么克鲁斯卡尔算法的代码如何实现呢？</p><p>首先需要引入一个边结构：</p><pre><code class=\"language-plain\">//边结构\nstruct Edge\n{\n\tint idx_startVert;&nbsp; //边所对应的开始顶点下标索引\n\tint idx_endVert;&nbsp; &nbsp; //边所对应的结束顶点下标索引\n\tint weight;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//边的权值\n};\n</code></pre><p>那么如何判断加入的新顶点与原来的顶点是否会构成一个环呢？这并不复杂，在前面讲解静态链表时曾采取过用一维数组来代替指针来描述单链表。在这里也同样，把从未加入过数组的顶点加入到数组中构成一个链表，那么判断某个顶点加入到该数组后是否会构成环只需要遍历这个数组看一看。</p><p>以图1中左侧无向图为例，图中一共有6个顶点，给每个顶点编一个下标。顶点A的下标是0，顶点B的下标是1，顶点C的下标是2，顶点D的下标是3，顶点E的下标是4，顶点F的下标是5。提供一个包含6个元素的数组比如LinkSign[6]用于保存顶点下标信息，给每个数组元素设置一个初始值-1（<span class=\"reference\">小于0的值）</span>，即：</p><p>LinkSign[0] = LinkSign[1] = LinkSign[2] = LinkSign[3] = LinkSign[4] = LinkSign[5] = -1</p><p>然后完成下面的4个步骤。</p><ol>\n<li>选择一条权值最小的边，这里肯定选择顶点A<span class=\"reference\">（下标0）</span>和C<span class=\"reference\">（下标2）</span>之间权值为1的边，根据下标找对应的LinkSign数组元素。因为LinkSign[0]和LinkSign[2]都等于-1，所以LinkSign[2] = 0<span class=\"reference\">（当然也可以让LinkSign[0] = 2）</span>，这样顶点A和顶点C就构成了一个静态链表，并且顶点C指向了顶点A。这里是因为LinkSign[2]里记录数字是0，而0正是顶点A的下标，如图2所示：</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/ef/37/ef63173996cddbb10a1e62b833e64037.jpg?wh=1471x601\" alt=\"\" title=\"图2 采用数组的方式实现静态链表将顶点A和顶点C连到了一起\"></p><ol start=\"2\">\n<li>继续选择一条权值最小的边，这次选择了顶点D到顶点F之间的权值为2的边，根据下标找对应的LinkSign数组元素。因为LinkSign[3]和LinkSign[5]都等于-1，所以LinkSign[5] = 3<span class=\"reference\">（当然也可以让LinkSign[3] = 5）</span>，这样顶点D和顶点F就构成了一个静态链表，并且顶点F指向了顶点D。这里是因为LinkSign[5]里记录数字是3，而3正是顶点D的下标。目前的情形如图3所示：</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/ef/f3/efc310152bb8999yyc128479253e4cf3.jpg?wh=1414x604\" alt=\"\" title=\"图3 采用数组的方式实现静态链表继续将顶点D和顶点F连到了一起\"></p><ol start=\"3\">\n<li>继续选择一条权值最小的边，这次选择了顶点B到顶点E之间的权值为3的边，根据下标找对应的LinkSign数组元素。因为LinkSign[1]和LinkSign[4]都等于-1，所以LinkSign[4] = 1<span class=\"reference\">（当然也可以让LinkSign[1] = 4）</span>，这样顶点B和顶点E就构成了一个静态链表，并且顶点E指向了顶点B。这里是因为LinkSign[4]里记录数字是1，而1正是顶点B的下标，目前的情形如图4所示：</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/85/af/856997596762e25786f4e04553080baf.jpg?wh=1486x672\" alt=\"\" title=\"图4 采用数组的方式实现静态链表继续将顶点B和顶点E连到了一起\"></p><ol start=\"4\">\n<li>继续选择一条权值最小的边，这次选择了顶点C到顶点F之间的权值为4的边，根据下标找对应的LinkSign数组元素。现在的情况是LinkSign[2]等于0 ，而LinkSign[5]等于3，如果顶点对应的LinkSign数组元素不为-1，则肯定表示该顶点位于一个静态链表中，所以进行下面的步骤。</li>\n</ol><ul>\n<li>代表顶点C的LinkSign[2]值为0，则沿着这个链向回找，一直找到静态链表头即顶点A<span class=\"reference\">（LinkSign[0]）</span>。</li>\n<li>代表顶点F的LinkSign[5]值为3，则沿着这个链向回找，一直找到静态链表头即顶点D<span class=\"reference\">（LinkSign[3]）</span>。</li>\n<li>因为顶点A和顶点D不是同一个点，也就是静态链表头节点不同，代表顶点C和顶点F不在同一个静态链表中，因此可以选择这条边，并且让这两个静态链表合并成为一个静态链表，即让一个静态链表头连到另外一个链表头——LinkSign[3] = 0<span class=\"reference\">（当然也可以让LinkSign[0]=3）</span>。</li>\n</ul><p>目前的情形如图5所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/71/bc/71d9c7fa1722b3d18546ecf80efacabc.jpg?wh=1513x688\" alt=\"\" title=\"图5 采用数组的方式实现静态链表继续将顶点C和顶点F连到了一起\"></p><ul>\n<li>\n<p>继续选择一条权值最小的边，这次看到了顶点C到顶点D之间的权值为5的边，根据下标找对应的LinkSign数组元素。现在的情况是LinkSign[2]和LinkSign[3]都等于0，因为这两个顶点对应的LinkSign数组元素都不为-1，表示这两个顶点都位于静态链表中，所以分别沿着链向回找一直找到静态链表头，却发现顶点C和顶点D所在的静态链表对应的<strong>链表头顶点相同</strong>——都是A<span class=\"reference\">（LinkSign[0]）</span>，这说明顶点C和顶点D之间的边<strong>不能选</strong>，否则图中会出现环。</p>\n</li>\n<li>\n<p>继续选择一条权值最小的边，这次看到了顶点A到顶点D之间的权值为5的边，根据下标找对应的LinkSign数组元素。现在的情况是LinkSign[0]等于-1，而LinkSign[3]等于0。这说明LinkSign[3] 位于静态链表中，沿着链向回找一直找到静态链表头，发现顶点D所在的静态链表对应的链表头顶点正好是顶点A，这说明顶点A顶点D之间的边<strong>不能选</strong>，否则图中会出现环。</p>\n</li>\n<li>\n<p>继续选择一条权值最小的边，这次看到了顶点B到顶点C之间的权值为5的边，根据下标找对应的LinkSign数组元素。现在的情况是LinkSign[1]等于-1，而LinkSign[2]等于0。这说明LinkSign[2] 位于静态链表中，沿着链向回找一直找到静态链表头，发现头节点是顶点A。顶点A与顶点B是两个不同的顶点，代表顶点A和顶点B不在同一个静态链表中，因此可以选择这条边，并且让这两个静态链表合并成为一个静态链表，即让一个静态链表头连到另外一个链表头——LinkSign[1] = 0<span class=\"reference\">（当然也可以让LinkSign[0]=1）</span>。目前的情形如图6所示：</p>\n</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/f4/60/f4eb895ee7632de2e2fdabd74c887460.jpg?wh=1517x672\" alt=\"\" title=\"图6 采用数组的方式实现静态链表继续将顶点B和顶点C连到了一起\"></p><ul>\n<li>此时，加入到最小生成树中的边已经是“顶点数-1”个了，最小生成树生成结束。</li>\n</ul><h2>克鲁斯卡尔<span class=\"reference\">（Kruskal）</span>算法的代码实现</h2><p>说完算法的实现思路，我们尝试写一下按照上述想法实现的克鲁斯卡尔（Kruskal）最小生成树算法代码。</p><pre><code class=\"language-plain\">//边权值排序专用比较函数\nstatic int cmpEdgeWeight(const void* elem1, const void* elem2) //注意这里是static修饰\n{\n\tEdge* p1 = (Edge*)elem1;\n\tEdge* p2 = (Edge*)elem2;\n\treturn p1-&gt;weight - p2-&gt;weight;\n}\n//找静态链表头节点的下标\nint findHeadVertidx(int* pLinkSign,int curridx)\n{\n\twhile (pLinkSign[curridx] != -1)\n\t\tcurridx = pLinkSign[curridx];\n\treturn curridx;\n}\n\t\n//用克鲁斯卡尔（Kruskal）算法创建最小生成树\nbool CreateMinSpanTree_Kruskal()\n{\n\t//单独创建一个边数组来保存图中所有的边，之所以创建数组，是为了方便对这个数组进行单独操作\n\tEdge* pedge = new Edge[m_numVertices*(m_numVertices-1)/2];&nbsp; &nbsp; //含有n个顶点的无向图最多有n(n-1)/2条边，这里的n代表顶点数\n\tint edgecount = 0;&nbsp; //边的数量统计\n\t\n\t//因为是采用邻接矩阵存储图，这是个对称矩阵，所以只考察该矩阵的一半内容即可得到图中所有边的信息\n\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t{\n\t\tfor (int j = i + 1; j &lt; m_numVertices; ++j) //注意j的值无需从0开始，其实从i+1开始即可\n\t\t{\n\t\t\tif (pm_Edges[i][j] &gt; 0 &amp;&amp; pm_Edges[i][j] != INT_MAX_MY) //这两个顶点之间有边\n\t\t\t{\n\t\t\t\tpedge[edgecount].idx_startVert = i;\n\t\t\t\tpedge[edgecount].idx_endVert = j;\n\t\t\t\tpedge[edgecount].weight = pm_Edges[i][j];\n\t\t\t\tedgecount++;\n\t\t\t}\n\t\t}\n\t}\n\t//以资料中的无向连通图为例，输出相关的边信息看一看\n\t/*\n\tA----&gt;B : 权值=6\n\tA----&gt;C : 权值=1\n\tA----&gt;D : 权值=5\n\tB----&gt;C : 权值=5\n\tB----&gt;E : 权值=3\n\tC----&gt;D : 权值=5\n\tC----&gt;E : 权值=6\n\tC----&gt;F : 权值=4\n\tD----&gt;F : 权值=2\n\tE----&gt;F : 权值=6\n\t*/\n\tfor (int i = 0; i &lt; edgecount; ++i)\n\t{\n\t\tcout &lt;&lt; pm_VecticesList[pedge[i].idx_startVert] &lt;&lt;\"----&gt;\"&lt;&lt; pm_VecticesList[pedge[i].idx_endVert] &lt;&lt;\" : 权值=\"&lt;&lt; pedge[i].weight &lt;&lt; endl;\n\t}\n\tcout &lt;&lt;\"--------------------------\"&lt;&lt; endl;\n\t//克鲁斯卡尔（Kruskal）算法是要挑选出权值最小的一条边，所以按照边权值来把边从小到大排序\n\t//这里排序采用C++标准库提供的快速排序函数qsort即可，可以通过搜索引擎查询本函数用法（当然自己书写排序方法也可以）\n\tqsort(pedge, edgecount, sizeof(Edge), cmpEdgeWeight);\n\t//排序后的边信息就按如下顺序排好了\n\t/*\n\tA----&gt;C : 权值=1\n\tD----&gt;F : 权值=2\n\tB----&gt;E : 权值=3\n\tC----&gt;F : 权值=4\n\tC----&gt;D : 权值=5\n\tA----&gt;D : 权值=5\n\tB----&gt;C : 权值=5\n\tC----&gt;E : 权值=6\n\tA----&gt;B : 权值=6\n\tE----&gt;F : 权值=6\n\t*/\n\tfor (int i = 0; i &lt; edgecount; ++i)\n\t{\n\t\tcout &lt;&lt; pm_VecticesList[pedge[i].idx_startVert] &lt;&lt;\"----&gt;\"&lt;&lt; pm_VecticesList[pedge[i].idx_endVert] &lt;&lt;\" : 权值=\"&lt;&lt; pedge[i].weight &lt;&lt; endl;\n\t}\n\tcout &lt;&lt;\"--------------------------\"&lt;&lt; endl;\n\t//现在边的权值已经按照从小到大排序了\n\tint* pLinkSign = new int[m_numVertices];&nbsp; //LinkSign数组用于保存顶点下标信息。\n\tfor (int i = 0; i &lt; m_numVertices; ++i)\n\t{\n\t\tpLinkSign[i] = -1;\n\t}\n\tint iSelEdgeCount = 0; //选择的边数统计，最小生成树的边数等于顶点数-1\n\tint iCurEdgeIdx = 0; //当前所选择的边编号记录，从0开始\n\twhile (iSelEdgeCount &lt; (m_numVertices - 1))\n\t{\n\t\tint idxS = pedge[iCurEdgeIdx].idx_startVert;\n\t\tint idxE = pedge[iCurEdgeIdx].idx_endVert;\n\t\tif (pLinkSign[idxS] == -1 &amp;&amp; pLinkSign[idxE] == -1)\n\t\t{\n\t\t\tpLinkSign[idxE] = idxS; //将两个节点链在一起\n\t\t\tiSelEdgeCount++; //这个边可以被选中\n\t\t\tcout &lt;&lt; pm_VecticesList[idxS] &lt;&lt;\"---&gt;\"&lt;&lt; pm_VecticesList[idxE] &lt;&lt;\" : 权值=\"&lt;&lt; pedge[iCurEdgeIdx].weight &lt;&lt; endl; //显示边和权值信息\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//静态链表头结点的pLinkSign[...]值都是-1的\n\t\t\tint idxHead1 = idxS;\n\t\t\tif (pLinkSign[idxS] != -1)\n\t\t\t{\n\t\t\t\tidxHead1 = findHeadVertidx(pLinkSign, pLinkSign[idxS]);//找到所在静态链表头节点\n\t\t\t}\n\t\t\tint idxHead2 = idxE;\n\t\t\tif (pLinkSign[idxE] != -1)\n\t\t\t{\n\t\t\t\tidxHead2 = findHeadVertidx(pLinkSign, pLinkSign[idxE]);\n\t\t\t}\n\t\t\tif (idxHead1 != idxHead2) //静态链表头结点不同，表示这两个顶点不在同一个静态链表中，这种边是可以被选择的\n\t\t\t{\n\t\t\t\tpLinkSign[idxHead2] = idxHead1; //也可以是pLinkSign[idxHead1] = idxHead2;，注意这里是静态链表头结点的连接\n\t\t\t\tiSelEdgeCount++; //这个边可以被选中\n\t\t\t\tcout &lt;&lt; pm_VecticesList[idxS] &lt;&lt;\"---&gt;\"&lt;&lt; pm_VecticesList[idxE] &lt;&lt;\" : 权值=\"&lt;&lt; pedge[iCurEdgeIdx].weight &lt;&lt; endl; //显示边和权值信息\n\t\t\t}\n\t\t}\n\t\tiCurEdgeIdx++;\n\t} //end while\n\tdelete[] pedge;\n\tdelete[] pLinkSign;\n\treturn true;\n}\n</code></pre><p>在main主函数中，注释掉以往的代码，新增如下测试代码：</p><pre><code class=\"language-plain\">GraphMatrix&lt;char&gt; gm;\ngm.InsertVertex('A');\ngm.InsertVertex('B');\ngm.InsertVertex('C');\ngm.InsertVertex('D');\ngm.InsertVertex('E');\ngm.InsertVertex('F');\n//向图中插入边\ngm.InsertEdge('A', 'B', 6); //6代表边的权值\ngm.InsertEdge('A', 'C', 1);\ngm.InsertEdge('A', 'D', 5);\ngm.InsertEdge('B', 'C', 5);\ngm.InsertEdge('B', 'E', 3);\ngm.InsertEdge('C', 'D', 5);\ngm.InsertEdge('C', 'E', 6);\ngm.InsertEdge('C', 'F', 4);\ngm.InsertEdge('D', 'F', 2);\ngm.InsertEdge('E', 'F', 6);\ngm.DispGraph();\t\ngm.CreateMinSpanTree_Kruskal();\n</code></pre><p>其中的克鲁斯卡尔（Kruskal）算法所得到的最小生成树结果如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/d0/8c/d0f4f7a4086399b6f630d0bdfa4bae8c.jpg?wh=2786x518\" alt=\"\"></p><p>在上面的代码中，用到了C++标准库提供的qsort函数对边按权值大小进行排序，当然也可以书写自己的排序函数，代码如下：</p><pre><code class=\"language-plain\">//将两个位置的边信息互换\nvoid SwapE(Edge* pedges, int i, int j)\n{\n\tEdge tmpedgeobj;\n\ttmpedgeobj.idx_startVert = pedges[i].idx_startVert;\n\ttmpedgeobj.idx_endVert = pedges[i].idx_endVert;\n\ttmpedgeobj.weight = pedges[i].weight;\n\t\n\tpedges[i].idx_startVert = pedges[j].idx_startVert;\n\tpedges[i].idx_endVert = pedges[j].idx_endVert;\n\tpedges[i].weight = pedges[j].weight;\n\t\n\tpedges[j].idx_startVert = tmpedgeobj.idx_startVert;\n\tpedges[j].idx_endVert = tmpedgeobj.idx_endVert;\n\tpedges[j].weight = tmpedgeobj.weight;\n}\n\t\n//按权值对边进行排序（冒泡排序）\nvoid WeightSort(Edge *pedges,int edgecount) //edgecount：边数量\n{\t\t\t\n\tfor (int i = 0; i &lt; edgecount - 1; ++i)\n\t{\n\t\tfor (int j = i + 1; j &lt; edgecount; ++j)\n\t\t{\n\t\t\tif (pedges[i].weight &gt; pedges[j].weight)\n\t\t\t{\n\t\t\t\tSwapE(pedges, i, j);\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre><p>当然，在CreateMinSpanTree_Kruskal成员函数中，也要将如下代码：</p><pre><code class=\"language-plain\">qsort(pedge, edgecount, sizeof(Edge), cmpEdgeWeight);\n</code></pre><p>替换为：</p><pre><code class=\"language-plain\">WeightSort(pedge, edgecount);\n</code></pre><p>运行结果与前面是一样的。</p><p>克鲁斯卡尔算法的时间复杂度和实现代码有很大关系。从上面代码可以看到，克鲁斯卡尔算法有一个很重要的步骤是对边按权值大小进行排序，所以，该算法的时间复杂度主要由排序算法决定。如果采用上述我们自己写的WeightSort函数对图中的边进行排序，则排序算法的时间复杂度可能会达到O(${|E|}^{2}$)，而如果采用C++标准库提供的qsort<span class=\"reference\">（快速排序）</span>，则排序算法的时间复杂度会变为O(|E|log|E|)。同时，在实现代码中用到了一个while循环，也就是下面的代码行。</p><pre><code class=\"language-plain\">while (iSelEdgeCount &lt; (m_numVertices - 1)){......}\n</code></pre><p>其实，这个while中实现的代码采用了“并查集”算法来判断两个顶点是否属于同一个集合，或者说判断选中某条边后是否会出现环，“并查集”算法虽然有优化空间，但这里并没有对其进行优化，就目前的情况下，采用并查集算法的最坏时间复杂度大概是O(Log|V|)<span class=\"reference\">（注意V代表图中顶点数量）</span>，加之这里的while循环次数，整个while循环的时间复杂度为O(|V|Log|V|)。所以当前代码的克鲁斯卡尔算法的时间复杂度为“排序算法时间复杂度+并查集算法时间复杂度”，即在采用qsort对边按照权值排序时为O(|E|log|E| + |V|Log|V|)。</p><p>一般来说，克鲁斯卡尔算法<strong>中的边按照权值排序算法</strong>时间复杂度较高，而这个排序算法与图中顶点个数无关，只与边的条数有关，所以当图中<strong>顶点数比较多</strong>，而<strong>边数比较少</strong>时使用该算法构造最小生成树效果较好。</p><h2>小结</h2><p>本节课我向你介绍了利用克鲁斯卡尔（Kruskal）算法来寻找一个无向连通图的最小生成树。我们从权值最小的边开始挑选，挑选的原则是不可以在图中出现环路。</p><p>这里程序实现的难点是如何判断加入的新顶点与原来的顶点是否会构成一个环路。我在文中通过大量的图形展示阐述了详细的判断方法。</p><p>在编写代码环节，我们仍旧采用邻接矩阵来保存图，然后引入一个边结构的定义和一个用于保存顶点下标信息的数组LinkSign。</p><p>克鲁斯卡尔算法中一个很重要的步骤就是对边按权值大小进行排序，该算法的时间复杂度主要就是由这个排序算法决定的，当采用C++标准库中提供的qsort快速排序算法对边按照权值排序时，整个克鲁斯卡尔算法的时间复杂度大概为O(|E|log|E| + |V|Log|V|)，并且因为该算法只与图中边的数量相关，与顶点个数无关，所以当图中<strong>顶点数比较多，边数比较少</strong>时最适合使用该算法构造最小生成树。</p><h2>课后思考</h2><p>请你想一想，现实生活中有哪些问题比较适合用克鲁斯卡尔算法实现的最小生成树来解决？</p><p>欢迎你在留言区和我互动。如果觉得有所收获，也可以把课程分享给更多的朋友一起学习，我们下节课见！</p>","neighbors":{"left":{"article_title":"27｜最小生成树：如何用普里姆（Prim）算法解决修路费用最少的问题？","id":648413},"right":{"article_title":"29｜最短路径：迪杰斯特拉（Dijkstra）算法与选择最节省时间的行走路线问题","id":649887}},"comments":[{"had_liked":false,"id":377637,"user_name":"Yj.yolo","can_delete":false,"product_type":"c1","uid":2814082,"ip_address":"广东","ucode":"0ED1B41F124061","user_header":"https://static001.geekbang.org/account/avatar/00/2a/f0/82/f235d91d.jpg","comment_is_top":false,"comment_ctime":1688920983,"is_pvip":false,"replies":[{"id":137655,"content":"加油学，有点忙，回复晚了些抱歉哈。如果发现代码有些遗漏，可以调试看看，确认后自己大胆修改并验证，相信自己可以做的更好😁","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1689124905,"ip_address":"广东","comment_id":377637,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"有两个疑问：\n（1）图3中顶点D的linksign[3]=-1，但是图4中顶点D的linksign[3]=0，没有给出为什么？\n（2）图4中顶点B的linksign[1]=0？是不是应该先是-1，直到图6才会变成顶点B的linksign[3]才是0","like_count":0,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623164,"discussion_content":"加油学，有点忙，回复晚了些抱歉哈。如果发现代码有些遗漏，可以调试看看，确认后自己大胆修改并验证，相信自己可以做的更好😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689124905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}