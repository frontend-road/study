{"id":234928,"title":"25 | 异步处理好用，但非常容易用错","content":"<p>你好，我是朱晔。今天，我来和你聊聊好用但容易出错的异步处理。</p><p>异步处理是互联网应用不可或缺的一种架构模式，大多数业务项目都是由同步处理、异步处理和定时任务处理三种模式相辅相成实现的。</p><p>区别于同步处理，异步处理无需同步等待流程处理完毕，因此适用场景主要包括：</p><ul>\n<li>服务于主流程的分支流程。比如，在注册流程中，把数据写入数据库的操作是主流程，但注册后给用户发优惠券或欢迎短信的操作是分支流程，时效性不那么强，可以进行异步处理。</li>\n<li>用户不需要实时看到结果的流程。比如，下单后的配货、送货流程完全可以进行异步处理，每个阶段处理完成后，再给用户发推送或短信让用户知晓即可。</li>\n</ul><p>同时，异步处理因为可以有MQ中间件的介入用于任务的缓冲的分发，所以相比于同步处理，在应对流量洪峰、实现模块解耦和消息广播方面有功能优势。</p><p>不过，异步处理虽然好用，但在实现的时候却有三个最容易犯的错，分别是异步处理流程的可靠性问题、消息发送模式的区分问题，以及大量死信消息堵塞队列的问题。今天，我就用三个代码案例结合目前常用的MQ系统RabbitMQ，来和你具体聊聊。</p><p>今天这一讲的演示，我都会使用Spring AMQP来操作RabbitMQ，所以你需要先引入amqp依赖：</p><!-- [[[read_end]]] --><pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre><h2>异步处理需要消息补偿闭环</h2><p>使用类似RabbitMQ、RocketMQ等MQ系统来做消息队列实现异步处理，虽然说消息可以落地到磁盘保存，即使MQ出现问题消息数据也不会丢失，但是异步流程在消息发送、传输、处理等环节，都可能发生消息丢失。此外，任何MQ中间件都无法确保100%可用，需要考虑不可用时异步流程如何继续进行。</p><p>因此，<strong>对于异步处理流程，必须考虑补偿或者说建立主备双活流程</strong>。</p><p>我们来看一个用户注册后异步发送欢迎消息的场景。用户注册落数据库的流程为同步流程，会员服务收到消息后发送欢迎消息的流程为异步流程。</p><p><img src=\"https://static001.geekbang.org/resource/image/62/93/629d9f0557cd7f06ac9ee2e871524893.png?wh=1596*836\" alt=\"\"></p><p>我们来分析一下：</p><ul>\n<li>蓝色的线，使用MQ进行的异步处理，我们称作主线，可能存在消息丢失的情况（虚线代表异步调用）；</li>\n<li>绿色的线，使用补偿Job定期进行消息补偿，我们称作备线，用来补偿主线丢失的消息；</li>\n<li>考虑到极端的MQ中间件失效的情况，我们要求备线的处理吞吐能力达到主线的能力水平。</li>\n</ul><p>我们来看一下相关的实现代码。</p><p>首先，定义UserController用于注册+发送异步消息。对于注册方法，我们一次性注册10个用户，用户注册消息不能发送出去的概率为50%。</p><pre><code>@RestController\n@Slf4j\n@RequestMapping(&quot;user&quot;)\npublic class UserController {\n    @Autowired\n    private UserService userService;\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @GetMapping(&quot;register&quot;)\n    public void register() {\n        //模拟10个用户注册\n        IntStream.rangeClosed(1, 10).forEach(i -&gt; {\n            //落库\n            User user = userService.register();\n            //模拟50%的消息可能发送失败\n            if (ThreadLocalRandom.current().nextInt(10) % 2 == 0) {\n                //通过RabbitMQ发送消息\n               rabbitTemplate.convertAndSend(RabbitConfiguration.EXCHANGE, RabbitConfiguration.ROUTING_KEY, user);\n                log.info(&quot;sent mq user {}&quot;, user.getId());\n            }\n        });\n    }\n}\n</code></pre><p>然后，定义MemberService类用于模拟会员服务。会员服务监听用户注册成功的消息，并发送欢迎短信。我们使用ConcurrentHashMap来存放那些发过短信的用户ID实现幂等，避免相同的用户进行补偿时重复发送短信：</p><pre><code>@Component\n@Slf4j\npublic class MemberService {\n    //发送欢迎消息的状态\n    private Map&lt;Long, Boolean&gt; welcomeStatus = new ConcurrentHashMap&lt;&gt;();\n    //监听用户注册成功的消息，发送欢迎消息\n    @RabbitListener(queues = RabbitConfiguration.QUEUE)\n    public void listen(User user) {\n        log.info(&quot;receive mq user {}&quot;, user.getId());\n        welcome(user);\n    }\n    //发送欢迎消息\n    public void welcome(User user) {\n        //去重操作\n        if (welcomeStatus.putIfAbsent(user.getId(), true) == null) {\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n            }\n            log.info(&quot;memberService: welcome new user {}&quot;, user.getId());\n        }\n    }\n}\n</code></pre><p>对于MQ消费程序，处理逻辑务必考虑去重（支持幂等），原因有几个：</p><ul>\n<li>MQ消息可能会因为中间件本身配置错误、稳定性等原因出现重复。</li>\n<li>自动补偿重复，比如本例，同一条消息可能既走MQ也走补偿，肯定会出现重复，而且考虑到高内聚，补偿Job本身不会做去重处理。</li>\n<li>人工补偿重复。出现消息堆积时，异步处理流程必然会延迟。如果我们提供了通过后台进行补偿的功能，那么在处理遇到延迟的时候，很可能会先进行人工补偿，过了一段时间后处理程序又收到消息了，重复处理。我之前就遇到过一次由MQ故障引发的事故，MQ中堆积了几十万条发放资金的消息，导致业务无法及时处理，运营以为程序出错了就先通过后台进行了人工处理，结果MQ系统恢复后消息又被重复处理了一次，造成大量资金重复发放。</li>\n</ul><p>接下来，定义补偿Job也就是备线操作。</p><p>我们在CompensationJob中定义一个@Scheduled定时任务，5秒做一次补偿操作，因为Job并不知道哪些用户注册的消息可能丢失，所以是全量补偿，补偿逻辑是：每5秒补偿一次，按顺序一次补偿5个用户，下一次补偿操作从上一次补偿的最后一个用户ID开始；对于补偿任务我们提交到线程池进行“异步”处理，提高处理能力。</p><pre><code>@Component\n@Slf4j\npublic class CompensationJob {\n    //补偿Job异步处理线程池\n    private static ThreadPoolExecutor compensationThreadPool = new ThreadPoolExecutor(\n            10, 10,\n            1, TimeUnit.HOURS,\n            new ArrayBlockingQueue&lt;&gt;(1000),\n            new ThreadFactoryBuilder().setNameFormat(&quot;compensation-threadpool-%d&quot;).get());\n    @Autowired\n    private UserService userService;\n    @Autowired\n    private MemberService memberService;\n    //目前补偿到哪个用户ID\n    private long offset = 0;\n\n    //10秒后开始补偿，5秒补偿一次\n    @Scheduled(initialDelay = 10_000, fixedRate = 5_000)\n    public void compensationJob() {\n        log.info(&quot;开始从用户ID {} 补偿&quot;, offset);\n        //获取从offset开始的用户\n        userService.getUsersAfterIdWithLimit(offset, 5).forEach(user -&gt; {\n            compensationThreadPool.execute(() -&gt; memberService.welcome(user));\n            offset = user.getId();\n        });\n    }\n}\n</code></pre><p>为了实现高内聚，主线和备线处理消息，最好使用同一个方法。比如，本例中MemberService监听到MQ消息和CompensationJob补偿，调用的都是welcome方法。</p><p>此外值得一说的是，Demo中的补偿逻辑比较简单，生产级的代码应该在以下几个方面进行加强：</p><ul>\n<li>考虑配置补偿的频次、每次处理数量，以及补偿线程池大小等参数为合适的值，以满足补偿的吞吐量。</li>\n<li>考虑备线补偿数据进行适当延迟。比如，对注册时间在30秒之前的用户再进行补偿，以方便和主线MQ实时流程错开，避免冲突。</li>\n<li>诸如当前补偿到哪个用户的offset数据，需要落地数据库。</li>\n<li>补偿Job本身需要高可用，可以使用类似XXLJob或ElasticJob等任务系统。</li>\n</ul><p>运行程序，执行注册方法注册10个用户，输出如下：</p><pre><code>[17:01:16.570] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.a.compensation.UserController:28  ] - sent mq user 1\n[17:01:16.571] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.a.compensation.UserController:28  ] - sent mq user 5\n[17:01:16.572] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.a.compensation.UserController:28  ] - sent mq user 7\n[17:01:16.573] [http-nio-45678-exec-1] [INFO ] [o.g.t.c.a.compensation.UserController:28  ] - sent mq user 8\n[17:01:16.594] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:18  ] - receive mq user 1\n[17:01:18.597] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 1\n[17:01:18.601] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:18  ] - receive mq user 5\n[17:01:20.603] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 5\n[17:01:20.604] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:18  ] - receive mq user 7\n[17:01:22.605] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 7\n[17:01:22.606] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:18  ] - receive mq user 8\n[17:01:24.611] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 8\n[17:01:25.498] [scheduling-1] [INFO ] [o.g.t.c.a.compensation.CompensationJob:29  ] - 开始从用户ID 0 补偿\n[17:01:27.510] [compensation-threadpool-1] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 2\n[17:01:27.510] [compensation-threadpool-3] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 4\n[17:01:27.511] [compensation-threadpool-2] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 3\n[17:01:30.496] [scheduling-1] [INFO ] [o.g.t.c.a.compensation.CompensationJob:29  ] - 开始从用户ID 5 补偿\n[17:01:32.500] [compensation-threadpool-6] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 6\n[17:01:32.500] [compensation-threadpool-9] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 9\n[17:01:35.496] [scheduling-1] [INFO ] [o.g.t.c.a.compensation.CompensationJob:29  ] - 开始从用户ID 9 补偿\n[17:01:37.501] [compensation-threadpool-0] [INFO ] [o.g.t.c.a.compensation.MemberService:28  ] - memberService: welcome new user 10\n[17:01:40.495] [scheduling-1] [INFO ] [o.g.t.c.a.compensation.CompensationJob:29  ] - 开始从用户ID 10 补偿\n</code></pre><p>可以看到：</p><ul>\n<li>总共10个用户，MQ发送成功的用户有四个，分别是用户1、5、7、8。</li>\n<li>补偿任务第一次运行，补偿了用户2、3、4，第二次运行补偿了用户6、9，第三次运行补充了用户10。</li>\n</ul><p>最后提一下，针对消息的补偿闭环处理的最高标准是，能够达到补偿全量数据的吞吐量。也就是说，如果补偿备线足够完善，即使直接把MQ停机，虽然会略微影响处理的及时性，但至少确保流程都能正常执行。</p><h2>注意消息模式是广播还是工作队列</h2><p>在今天这一讲的一开始，我们提到异步处理的一个重要优势，是实现消息广播。</p><p>消息广播，和我们平时说的“广播”意思差不多，就是希望同一条消息，不同消费者都能分别消费；而队列模式，就是不同消费者共享消费同一个队列的数据，相同消息只能被某一个消费者消费一次。</p><p>比如，同一个用户的注册消息，会员服务需要监听以发送欢迎短信，营销服务同样需要监听以发送新用户小礼物。但是，会员服务、营销服务都可能有多个实例，我们期望的是同一个用户的消息，可以同时广播给不同的服务（广播模式），但对于同一个服务的不同实例（比如会员服务1和会员服务2），不管哪个实例来处理，处理一次即可（工作队列模式）：</p><p><img src=\"https://static001.geekbang.org/resource/image/79/14/79994116247045ff90652254770a6d14.png?wh=1548*814\" alt=\"\"></p><p>在实现代码的时候，我们务必确认MQ系统的机制，确保消息的路由按照我们的期望。</p><p>对于类似RocketMQ这样的MQ来说，实现类似功能比较简单直白：如果消费者属于一个组，那么消息只会由同一个组的一个消费者来消费；如果消费者属于不同组，那么每个组都能消费一遍消息。</p><p>而对于RabbitMQ来说，消息路由的模式采用的是队列+交换器，队列是消息的载体，交换器决定了消息路由到队列的方式，配置比较复杂，容易出错。所以，接下来我重点和你讲讲RabbitMQ的相关代码实现。</p><p>我们还是以上面的架构图为例，来演示使用RabbitMQ实现广播模式和工作队列模式的坑。</p><p><strong>第一步，实现会员服务监听用户服务发出的新用户注册消息的那部分逻辑。</strong></p><p>如果我们启动两个会员服务，那么同一个用户的注册消息应该只能被其中一个实例消费。</p><p>我们分别实现RabbitMQ队列、交换器、绑定三件套。其中，队列用的是匿名队列，交换器用的是直接交换器DirectExchange，交换器绑定到匿名队列的路由Key是空字符串。在收到消息之后，我们会打印所在实例使用的端口：</p><pre><code>//为了代码简洁直观，我们把消息发布者、消费者、以及MQ的配置代码都放在了一起\n@Slf4j\n@Configuration\n@RestController\n@RequestMapping(&quot;workqueuewrong&quot;)\npublic class WorkQueueWrong {\n\n    private static final String EXCHANGE = &quot;newuserExchange&quot;;\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @GetMapping\n    public void sendMessage() {\n        rabbitTemplate.convertAndSend(EXCHANGE, &quot;&quot;, UUID.randomUUID().toString());\n    }\n\n    //使用匿名队列作为消息队列\n    @Bean\n    public Queue queue() {\n        return new AnonymousQueue();\n    }\n  \n    //声明DirectExchange交换器，绑定队列到交换器\n    @Bean\n    public Declarables declarables() {\n        DirectExchange exchange = new DirectExchange(EXCHANGE);\n        return new Declarables(queue(), exchange,\n                BindingBuilder.bind(queue()).to(exchange).with(&quot;&quot;));\n    }\n\n    //监听队列，队列名称直接通过SpEL表达式引用Bean\n    @RabbitListener(queues = &quot;#{queue.name}&quot;)\n    public void memberService(String userName) {\n        log.info(&quot;memberService: welcome message sent to new user {} from {}&quot;, userName, System.getProperty(&quot;server.port&quot;));\n\n    }\n}   \n</code></pre><p>使用12345和45678两个端口启动两个程序实例后，调用sendMessage接口发送一条消息，输出的日志，显示<strong>同一个会员服务两个实例都收到了消息</strong>：</p><p><img src=\"https://static001.geekbang.org/resource/image/bd/5f/bd649f78f2f3a7c732b8883fd4d5255f.png?wh=2918*120\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/96/04/96278ba64ac411d5910d7ce8073c7304.png?wh=2898*126\" alt=\"\"></p><p><strong>出现这个问题的原因是，我们没有理清楚RabbitMQ直接交换器和队列的绑定关系。</strong></p><p>如下图所示，RabbitMQ的直接交换器根据routingKey对消息进行路由。由于我们的程序每次启动都会创建匿名（随机命名）的队列，所以相当于每一个会员服务实例都对应独立的队列，以空routingKey绑定到直接交换器。用户服务发出消息的时候也设置了routingKey为空，所以直接交换器收到消息之后，发现有两条队列匹配，于是都转发了消息：</p><p><img src=\"https://static001.geekbang.org/resource/image/c6/f8/c685c1a07347b040ee5ba1b48ce00af8.png?wh=1864*446\" alt=\"\"></p><p>要修复这个问题其实很简单，对于会员服务不要使用匿名队列，而是使用同一个队列即可。把上面代码中的匿名队列替换为一个普通队列：</p><pre><code>private static final String QUEUE = &quot;newuserQueue&quot;;\n@Bean\npublic Queue queue() {\n    return new Queue(QUEUE);\n}\n</code></pre><p>测试发现，对于同一条消息来说，两个实例中只有一个实例可以收到，不同的消息按照轮询分发给不同的实例。现在，交换器和队列的关系是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/65/7b/65205002a2cdde62d55330263afd317b.png?wh=1724*424\" alt=\"\"></p><p><strong>第二步，进一步完整实现用户服务需要广播消息给会员服务和营销服务的逻辑。</strong></p><p>我们希望会员服务和营销服务都可以收到广播消息，但会员服务或营销服务中的每个实例只需要收到一次消息。</p><p>代码如下，我们声明了一个队列和一个广播交换器FanoutExchange，然后模拟两个用户服务和两个营销服务：</p><pre><code>@Slf4j\n@Configuration\n@RestController\n@RequestMapping(&quot;fanoutwrong&quot;)\npublic class FanoutQueueWrong {\n    private static final String QUEUE = &quot;newuser&quot;;\n    private static final String EXCHANGE = &quot;newuser&quot;;\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @GetMapping\n    public void sendMessage() {\n        rabbitTemplate.convertAndSend(EXCHANGE, &quot;&quot;, UUID.randomUUID().toString());\n    }\n    //声明FanoutExchange，然后绑定到队列，FanoutExchange绑定队列的时候不需要routingKey\n    @Bean\n    public Declarables declarables() {\n        Queue queue = new Queue(QUEUE);\n        FanoutExchange exchange = new FanoutExchange(EXCHANGE);\n        return new Declarables(queue, exchange,\n                BindingBuilder.bind(queue).to(exchange));\n    }\n    //会员服务实例1\n    @RabbitListener(queues = QUEUE)\n    public void memberService1(String userName) {\n        log.info(&quot;memberService1: welcome message sent to new user {}&quot;, userName);\n\n    }\n    //会员服务实例2\n    @RabbitListener(queues = QUEUE)\n    public void memberService2(String userName) {\n        log.info(&quot;memberService2: welcome message sent to new user {}&quot;, userName);\n\n    }\n    //营销服务实例1\n    @RabbitListener(queues = QUEUE)\n    public void promotionService1(String userName) {\n        log.info(&quot;promotionService1: gift sent to new user {}&quot;, userName);\n    }\n    //营销服务实例2\n    @RabbitListener(queues = QUEUE)\n    public void promotionService2(String userName) {\n        log.info(&quot;promotionService2: gift sent to new user {}&quot;, userName);\n    }\n}\n</code></pre><p>我们请求四次sendMessage接口，注册四个用户。通过日志可以发现，<strong>一条用户注册的消息，要么被会员服务收到，要么被营销服务收到，显然这不是广播</strong>。那，我们使用的FanoutExchange，看名字就应该是实现广播的交换器，为什么根本没有起作用呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/34/6d/34e2ea5e0f38ac029ff3d909d8b9606d.png?wh=2974*390\" alt=\"\"></p><p>其实，广播交换器非常简单，它会忽略routingKey，广播消息到所有绑定的队列。在这个案例中，两个会员服务和两个营销服务都绑定了同一个队列，所以这四个服务只能收到一次消息：</p><p><img src=\"https://static001.geekbang.org/resource/image/20/cb/20adae38645d1cc169756fb4888211cb.png?wh=1656*462\" alt=\"\"></p><p>修改方式很简单，我们把队列进行拆分，会员和营销两组服务分别使用一条独立队列绑定到广播交换器即可：</p><pre><code>@Slf4j\n@Configuration\n@RestController\n@RequestMapping(&quot;fanoutright&quot;)\npublic class FanoutQueueRight {\n    private static final String MEMBER_QUEUE = &quot;newusermember&quot;;\n    private static final String PROMOTION_QUEUE = &quot;newuserpromotion&quot;;\n    private static final String EXCHANGE = &quot;newuser&quot;;\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n    @GetMapping\n    public void sendMessage() {\n        rabbitTemplate.convertAndSend(EXCHANGE, &quot;&quot;, UUID.randomUUID().toString());\n    }\n    @Bean\n    public Declarables declarables() {\n        //会员服务队列\n        Queue memberQueue = new Queue(MEMBER_QUEUE);\n        //营销服务队列\n        Queue promotionQueue = new Queue(PROMOTION_QUEUE);\n        //广播交换器\n        FanoutExchange exchange = new FanoutExchange(EXCHANGE);\n        //两个队列绑定到同一个交换器\n        return new Declarables(memberQueue, promotionQueue, exchange,\n                BindingBuilder.bind(memberQueue).to(exchange),\n                BindingBuilder.bind(promotionQueue).to(exchange));\n    }\n    @RabbitListener(queues = MEMBER_QUEUE)\n    public void memberService1(String userName) {\n        log.info(&quot;memberService1: welcome message sent to new user {}&quot;, userName);\n    }\n    @RabbitListener(queues = MEMBER_QUEUE)\n    public void memberService2(String userName) {\n        log.info(&quot;memberService2: welcome message sent to new user {}&quot;, userName);\n    }\n    @RabbitListener(queues = PROMOTION_QUEUE)\n    public void promotionService1(String userName) {\n        log.info(&quot;promotionService1: gift sent to new user {}&quot;, userName);\n    }\n    @RabbitListener(queues = PROMOTION_QUEUE)\n    public void promotionService2(String userName) {\n        log.info(&quot;promotionService2: gift sent to new user {}&quot;, userName);\n    }\n}\n</code></pre><p>现在，交换器和队列的结构是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/9a/78/9a3b06605913aa17025854dfbe6a5778.png?wh=1640*434\" alt=\"\"></p><p>从日志输出可以验证，对于每一条MQ消息，会员服务和营销服务分别都会收到一次，一条消息广播到两个服务的同时，在每一个服务的两个实例中通过轮询接收：</p><p><img src=\"https://static001.geekbang.org/resource/image/29/63/2975386cec273f3ca54b42872d9f4b63.png?wh=2886*390\" alt=\"\"></p><p>所以说，理解了RabbitMQ直接交换器、广播交换器的工作方式之后，我们对消息的路由方式了解得很清晰了，实现代码就不会出错。</p><p>对于异步流程来说，消息路由模式一旦配置出错，轻则可能导致消息的重复处理，重则可能导致重要的服务无法接收到消息，最终造成业务逻辑错误。</p><p>每个MQ中间件对消息的路由处理的配置各不相同，我们一定要先了解原理再着手编码。</p><h2>别让死信堵塞了消息队列</h2><p>我们在介绍<a href=\"https://time.geekbang.org/column/article/210337\">线程池</a>的时候提到，如果线程池的任务队列没有上限，那么最终可能会导致OOM。使用消息队列处理异步流程的时候，我们也同样要注意消息队列的任务堆积问题。对于突发流量引起的消息队列堆积，问题并不大，适当调整消费者的消费能力应该就可以解决。<strong>但在很多时候，消息队列的堆积堵塞，是因为有大量始终无法处理的消息</strong>。</p><p>比如，用户服务在用户注册后发出一条消息，会员服务监听到消息后给用户派发优惠券，但因为用户并没有保存成功，会员服务处理消息始终失败，消息重新进入队列，然后还是处理失败。这种在MQ中像幽灵一样回荡的同一条消息，就是死信。</p><p>随着MQ被越来越多的死信填满，消费者需要花费大量时间反复处理死信，导致正常消息的消费受阻，<strong>最终MQ可能因为数据量过大而崩溃</strong>。</p><p>我们来测试一下这个场景。首先，定义一个队列、一个直接交换器，然后把队列绑定到交换器：</p><pre><code>@Bean\npublic Declarables declarables() {\n    //队列\n    Queue queue = new Queue(Consts.QUEUE);\n    //交换器\n    DirectExchange directExchange = new DirectExchange(Consts.EXCHANGE);\n    //快速声明一组对象，包含队列、交换器，以及队列到交换器的绑定\n    return new Declarables(queue, directExchange,\n            BindingBuilder.bind(queue).to(directExchange).with(Consts.ROUTING_KEY));\n}\n</code></pre><p>然后，实现一个sendMessage方法来发送消息到MQ，访问一次提交一条消息，使用自增标识作为消息内容：</p><pre><code>//自增消息标识\nAtomicLong atomicLong = new AtomicLong();\n@Autowired\nprivate RabbitTemplate rabbitTemplate;\n\n@GetMapping(&quot;sendMessage&quot;)\npublic void sendMessage() {\n    String msg = &quot;msg&quot; + atomicLong.incrementAndGet();\n    log.info(&quot;send message {}&quot;, msg);\n    //发送消息\n    rabbitTemplate.convertAndSend(Consts.EXCHANGE, msg);\n}\n</code></pre><p>收到消息后，直接抛出空指针异常，模拟处理出错的情况：</p><pre><code>@RabbitListener(queues = Consts.QUEUE)\npublic void handler(String data) {\n    log.info(&quot;got message {}&quot;, data);\n    throw new NullPointerException(&quot;error&quot;);\n}\n</code></pre><p>调用sendMessage接口发送两条消息，然后来到RabbitMQ管理台，可以看到这两条消息始终在队列中，不断被重新投递，导致重新投递QPS达到了1063。</p><p><img src=\"https://static001.geekbang.org/resource/image/11/54/1130fc65dee6acba4df08227baf4d554.jpg?wh=2284*1281\" alt=\"\"></p><p>同时，在日志中可以看到大量异常信息：</p><pre><code>[20:02:31.533] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [WARN ] [o.s.a.r.l.ConditionalRejectingErrorHandler:129 ] - Execution of Rabbit message listener failed.\norg.springframework.amqp.rabbit.support.ListenerExecutionFailedException: Listener method 'public void org.geekbang.time.commonmistakes.asyncprocess.deadletter.MQListener.handler(java.lang.String)' threw exception\n\tat org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:219)\n\tat org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandlerAndProcessResult(MessagingMessageListenerAdapter.java:143)\n\tat org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.onMessage(MessagingMessageListenerAdapter.java:132)\n\tat org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:1569)\n\tat org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.actualInvokeListener(AbstractMessageListenerContainer.java:1488)\n\tat org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:1476)\n\tat org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:1467)\n\tat org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer.executeListener(AbstractMessageListenerContainer.java:1411)\n\tat org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.doReceiveAndExecute(SimpleMessageListenerContainer.java:958)\n\tat org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.receiveAndExecute(SimpleMessageListenerContainer.java:908)\n\tat org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer.access$1600(SimpleMessageListenerContainer.java:81)\n\tat org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.mainLoop(SimpleMessageListenerContainer.java:1279)\n\tat org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer$AsyncMessageProcessingConsumer.run(SimpleMessageListenerContainer.java:1185)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.NullPointerException: error\n\tat org.geekbang.time.commonmistakes.asyncprocess.deadletter.MQListener.handler(MQListener.java:14)\n\tat sun.reflect.GeneratedMethodAccessor46.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)\n\tat org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:50)\n\tat org.springframework.amqp.rabbit.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:211)\n\t... 13 common frames omitted\n</code></pre><p>解决死信无限重复进入队列最简单的方式是，在程序处理出错的时候，直接抛出AmqpRejectAndDontRequeueException异常，避免消息重新进入队列：</p><pre><code>throw new AmqpRejectAndDontRequeueException(&quot;error&quot;);\n</code></pre><p>但，我们更希望的逻辑是，对于同一条消息，能够先进行几次重试，解决因为网络问题导致的偶发消息处理失败，如果还是不行的话，再把消息投递到专门的一个死信队列。对于来自死信队列的数据，我们可能只是记录日志发送报警，即使出现异常也不会再重复投递。整个逻辑如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/40/28/40f0cf14933178fd07690372199e8428.png?wh=1478*684\" alt=\"\"></p><p>针对这个问题，Spring AMQP提供了非常方便的解决方案：</p><ul>\n<li>首先，定义死信交换器和死信队列。其实，这些都是普通的交换器和队列，只不过被我们专门用于处理死信消息。</li>\n<li>然后，通过RetryInterceptorBuilder构建一个RetryOperationsInterceptor，用于处理失败时候的重试。这里的策略是，最多尝试5次（重试4次）；并且采取指数退避重试，首次重试延迟1秒，第二次2秒，以此类推，最大延迟是10秒；如果第4次重试还是失败，则使用RepublishMessageRecoverer把消息重新投入一个“死信交换器”中。</li>\n<li>最后，定义死信队列的处理程序。这个案例中，我们只是简单记录日志。</li>\n</ul><p>对应的实现代码如下：</p><pre><code>//定义死信交换器和队列，并且进行绑定\n@Bean\npublic Declarables declarablesForDead() {\n    Queue queue = new Queue(Consts.DEAD_QUEUE);\n    DirectExchange directExchange = new DirectExchange(Consts.DEAD_EXCHANGE);\n    return new Declarables(queue, directExchange,\n            BindingBuilder.bind(queue).to(directExchange).with(Consts.DEAD_ROUTING_KEY));\n}\n//定义重试操作拦截器\n@Bean\npublic RetryOperationsInterceptor interceptor() {\n    return RetryInterceptorBuilder.stateless()\n            .maxAttempts(5) //最多尝试（不是重试）5次\n            .backOffOptions(1000, 2.0, 10000) //指数退避重试\n            .recoverer(new RepublishMessageRecoverer(rabbitTemplate, Consts.DEAD_EXCHANGE, Consts.DEAD_ROUTING_KEY)) //重新投递重试达到上限的消息\n            .build();\n}\n//通过定义SimpleRabbitListenerContainerFactory，设置其adviceChain属性为之前定义的RetryOperationsInterceptor来启用重试拦截器\n@Bean\npublic SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory) {\n    SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n    factory.setConnectionFactory(connectionFactory);\n    factory.setAdviceChain(interceptor());\n    return factory;\n}\n//死信队列处理程序\n@RabbitListener(queues = Consts.DEAD_QUEUE)\npublic void deadHandler(String data) {\n    log.error(&quot;got dead message {}&quot;, data);\n}\n</code></pre><p>执行程序，发送两条消息，日志如下：</p><pre><code>[11:22:02.193] [http-nio-45688-exec-1] [INFO ] [o.g.t.c.a.d.DeadLetterController:24  ] - send message msg1\n[11:22:02.219] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg1\n[11:22:02.614] [http-nio-45688-exec-2] [INFO ] [o.g.t.c.a.d.DeadLetterController:24  ] - send message msg2\n[11:22:03.220] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg1\n[11:22:05.221] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg1\n[11:22:09.223] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg1\n[11:22:17.224] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg1\n[11:22:17.226] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [WARN ] [o.s.a.r.retry.RepublishMessageRecoverer:172 ] - Republishing failed message to exchange 'deadtest' with routing key deadtest\n[11:22:17.227] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg2\n[11:22:17.229] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] [ERROR] [o.g.t.c.a.deadletter.MQListener:20  ] - got dead message msg1\n[11:22:18.232] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg2\n[11:22:20.237] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg2\n[11:22:24.241] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg2\n[11:22:32.245] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [INFO ] [o.g.t.c.a.deadletter.MQListener:13  ] - got message msg2\n[11:22:32.246] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#0-1] [WARN ] [o.s.a.r.retry.RepublishMessageRecoverer:172 ] - Republishing failed message to exchange 'deadtest' with routing key deadtest\n[11:22:32.250] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#1-1] [ERROR] [o.g.t.c.a.deadletter.MQListener:20  ] - got dead message msg2\n</code></pre><p>可以看到：</p><ul>\n<li>msg1的4次重试间隔分别是1秒、2秒、4秒、8秒，再加上首次的失败，所以最大尝试次数是5。</li>\n<li>4次重试后，RepublishMessageRecoverer把消息发往了死信交换器。</li>\n<li>死信处理程序输出了got dead message日志。</li>\n</ul><p>这里需要尤其注意的一点是，虽然我们几乎同时发送了两条消息，但是msg2是在msg1的四次重试全部结束后才开始处理。原因是，<strong>默认情况下SimpleMessageListenerContainer只有一个消费线程</strong>。可以通过增加消费线程来避免性能问题，如下我们直接设置concurrentConsumers参数为10，来增加到10个工作线程：</p><pre><code>@Bean\npublic SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory) {\n    SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\n    factory.setConnectionFactory(connectionFactory);\n    factory.setAdviceChain(interceptor());\n    factory.setConcurrentConsumers(10);\n    return factory;\n}\n</code></pre><p>当然，我们也可以设置maxConcurrentConsumers参数，来让SimpleMessageListenerContainer自己动态地调整消费者线程数。不过，我们需要特别注意它的动态开启新线程的策略。你可以通过<a href=\"https://docs.spring.io/spring-amqp/docs/2.2.1.RELEASE/reference/html/#listener-concurrency\">官方文档</a>，来了解这个策略。</p><h2>重点回顾</h2><p>在使用异步处理这种架构模式的时候，我们一般都会使用MQ中间件配合实现异步流程，需要重点考虑四个方面的问题。</p><p>第一，要考虑异步流程丢消息或处理中断的情况，异步流程需要有备线进行补偿。比如，我们今天介绍的全量补偿方式，即便异步流程彻底失效，通过补偿也能让业务继续进行。</p><p>第二，异步处理的时候需要考虑消息重复的可能性，处理逻辑需要实现幂等，防止重复处理。</p><p>第三，微服务场景下不同服务多个实例监听消息的情况，一般不同服务需要同时收到相同的消息，而相同服务的多个实例只需要轮询接收消息。我们需要确认MQ的消息路由配置是否满足需求，以避免消息重复或漏发问题。</p><p>第四，要注意始终无法处理的死信消息，可能会引发堵塞MQ的问题。一般在遇到消息处理失败的时候，我们可以设置一定的重试策略。如果重试还是不行，那可以把这个消息扔到专有的死信队列特别处理，不要让死信影响到正常消息的处理。</p><p>今天用到的代码，我都放在了GitHub上，你可以点击<a href=\"https://github.com/JosephZhu1983/java-common-mistakes\">这个链接</a>查看。</p><h2>思考与讨论</h2><ol>\n<li>在用户注册后发送消息到MQ，然后会员服务监听消息进行异步处理的场景下，有些时候我们会发现，虽然用户服务先保存数据再发送MQ，但会员服务收到消息后去查询数据库，却发现数据库中还没有新用户的信息。你觉得，这可能是什么问题呢，又该如何解决呢？</li>\n<li>除了使用Spring AMQP实现死信消息的重投递外，RabbitMQ 2.8.0 后支持的死信交换器DLX也可以实现类似功能。你能尝试用DLX实现吗，并比较下这两种处理机制？</li>\n</ol><p>关于使用MQ进行异步处理流程，你还遇到过其他问题吗？我是朱晔，欢迎在评论区与我留言分享你的想法，也欢迎你把今天的内容分享给你的朋友或同事，一起交流。</p>","neighbors":{"left":{"article_title":"24 | 业务代码写完，就意味着生产就绪了？","id":231568},"right":{"article_title":"26 | 数据存储：NoSQL与RDBMS如何取长补短、相辅相成？","id":234930}},"comments":[{"had_liked":false,"id":216285,"user_name":"vivi","can_delete":false,"product_type":"c1","uid":1632728,"ip_address":"","ucode":"1A02D8396F538B","user_header":"https://static001.geekbang.org/account/avatar/00/18/e9/d8/026493cc.jpg","comment_is_top":false,"comment_ctime":1589214899,"is_pvip":true,"replies":[{"id":"80038","content":"这个实现很赞","user_name":"作者回复","comment_id":216285,"uid":"1001470","ip_address":"","utype":1,"ctime":1589241550,"user_name_real":"朱晔"}],"discussion_count":7,"race_medal":0,"score":"126143266483","product_id":100047701,"comment_content":"我之前做过一个demo 是基于canal做mysql数据同步，需要将解析好的数据发到kafka里面，再进行处理。在使用的时候发现这么一个问题，就是kafka多partition消费时不能保证消息的顺序消费，进而导致mysql数据同步异常。<br>由于kafka可以保证在同一个partition内消息有序，于是我自定义了一个分区器，将数据的id取hashcode然后根据partition的数量取余作为分区号，保证同一条数据的binlog能投递到同一个partition中，从而达到消息顺序消费的目的。","like_count":30,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494752,"discussion_content":"这个实现很赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589241550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623626,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c6/4a/3bd896fc.jpg","nickname":"Heiky","note":"","ucode":"03AA79E1BC4AE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274032,"discussion_content":"我最近一直研究canal，canal本身做了顺序消费的问题，单topic单分区，单topic多分区，多topic单分区，多topic多分区，其中分区就是根据hash来做的，可以做到表级，库级都投放同一个分区，最佳实践，分区数=消费者数，就可以实现有序，我用的rocketmq，kafka和rocketmq基于canal的实现大同小异。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590537912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1965236,"avatar":"","nickname":"Geek_c703f7","note":"","ucode":"0D49860F83534E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266227,"discussion_content":"canal_client本来就可以保证有序，为何中间非要加个kafka呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589472511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1632728,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e9/d8/026493cc.jpg","nickname":"vivi","note":"","ucode":"1A02D8396F538B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1965236,"avatar":"","nickname":"Geek_c703f7","note":"","ucode":"0D49860F83534E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266930,"discussion_content":"那会刚接触canal 就多此一举了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589560045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":266227,"ip_address":""},"score":266930,"extra":""},{"author":{"id":1024486,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","nickname":"旭东(Frank)","note":"","ucode":"176FA629800062","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1965236,"avatar":"","nickname":"Geek_c703f7","note":"","ucode":"0D49860F83534E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326658,"discussion_content":"有异常canal会暂停消费吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605657474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":266227,"ip_address":""},"score":326658,"extra":""}]},{"author":{"id":1178235,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fa/7b/f89a398b.jpg","nickname":"Charles | 姜海龙","note":"","ucode":"17BA74D1684184","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282649,"discussion_content":"vivi很厉害啊，每次都能提出自己不错的见解，想来北京发展吗，给你内推","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592037357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1632728,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e9/d8/026493cc.jpg","nickname":"vivi","note":"","ucode":"1A02D8396F538B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1178235,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fa/7b/f89a398b.jpg","nickname":"Charles | 姜海龙","note":"","ucode":"17BA74D1684184","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286300,"discussion_content":"不好意思啊  才看到您的消息  请问您这边是？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593112941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":282649,"ip_address":""},"score":286300,"extra":""}]}]},{"had_liked":false,"id":216303,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1589237666,"is_pvip":false,"replies":[{"id":"80037","content":"是的，或许本文标题可以改为消息队列：XXX 😀，不过文中的一些点是可以泛化到你提到的两种异步处理的<br><br>思考题一是我真实遇到的问题，当时倒不是因为主从的问题，而是因为业务代码把保存数据和发MQ消息放在了一个事务中，有概率收到消息的时候事务还没有提交完成，当时开发同学的处理方式是收MQ消息的时候sleep 1秒，或许应该是先提交事务，完成后再发MQ消息，但是这又出来一个问题MQ消息发送失败怎么办？所以后来演化为建立本地消息表来确保MQ消息可补偿，把业务处理和保存MQ消息到本地消息表操作在相同事务内处理，然后异步发送和补偿发送消息表中的消息到MQ","user_name":"作者回复","comment_id":216303,"uid":"1001470","ip_address":"","utype":1,"ctime":1589241443,"user_name_real":"朱晔"}],"discussion_count":9,"race_medal":1,"score":"87488583586","product_id":100047701,"comment_content":"老师，我理解的异步处理不仅仅是通过 MQ 来实现，还有其他方式<br>比如开新线程执行，返回 Future<br>还有各种异步框架，比如 Vertx，它是通过 callback 的方式实现<br><br>思考题<br>1.可能是数据写到了主库，然后查询了从库。但因为主从同步有延迟，导致没有查询到","like_count":21,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494761,"discussion_content":"是的，或许本文标题可以改为消息队列：XXX 😀，不过文中的一些点是可以泛化到你提到的两种异步处理的\n\n思考题一是我真实遇到的问题，当时倒不是因为主从的问题，而是因为业务代码把保存数据和发MQ消息放在了一个事务中，有概率收到消息的时候事务还没有提交完成，当时开发同学的处理方式是收MQ消息的时候sleep 1秒，或许应该是先提交事务，完成后再发MQ消息，但是这又出来一个问题MQ消息发送失败怎么办？所以后来演化为建立本地消息表来确保MQ消息可补偿，把业务处理和保存MQ消息到本地消息表操作在相同事务内处理，然后异步发送和补偿发送消息表中的消息到MQ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589241443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002939,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4d/bb/abb7bfe3.jpg","nickname":"csyangchsh","note":"","ucode":"8604F5C839710B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268569,"discussion_content":"其实要保证数据库事务提交成功后再发送消息，Spring里面可以考虑使用TransactionSynchronization。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1589803224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1324190,"avatar":"https://static001.geekbang.org/account/avatar/00/14/34/9e/96f6b34e.jpg","nickname":"℃不要说话","note":"","ucode":"59A4BBD34BFE1C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352919,"discussion_content":"rocketmq的事务消息也可以处理这种场景","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1614910667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004698,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","nickname":"每天晒白牙","note":"","ucode":"A1B102CD933DEA","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263675,"discussion_content":"看完老师的案例分享，我想的还是太简单了，学到了，谢谢老师","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589241673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536094,"discussion_content":"可以用延时队列呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638684230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2378309,"avatar":"https://static001.geekbang.org/account/avatar/00/24/4a/45/e048531a.jpg","nickname":"迪米乌格斯","note":"","ucode":"1D4393746DCBCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373515,"discussion_content":"确实,我也只想到了主从延迟, 对于事务这一块没有考虑到,谢谢老师的指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620754139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046545,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/11/c62a583d.jpg","nickname":"333","note":"","ucode":"A0BA53EBAD81EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338036,"discussion_content":"这个不就是事务性发件箱吗？Transaction Outbox？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609159212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1162714,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","nickname":"看不到de颜色","note":"","ucode":"88348CCAE81931","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285125,"discussion_content":"老师说的案例应该就是消息队列实现分布式事务的一种处理方式吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592747472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200858,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/da/a6f990b6.jpg","nickname":"tttw","note":"","ucode":"36EF5E82704346","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263930,"discussion_content":"通过消息队列实现最终一致性分布式事务也是这种方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589267397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216458,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1589263574,"is_pvip":true,"replies":[{"id":"80103","content":"感谢分享 👍🏻","user_name":"作者回复","comment_id":216458,"uid":"1001470","ip_address":"","utype":1,"ctime":1589265021,"user_name_real":"朱晔"}],"discussion_count":6,"race_medal":0,"score":"78898674902","product_id":100047701,"comment_content":"第一个问题：<br>\t每天晒白牙大佬的回答和老师的回复已经很棒了，我就不班门弄斧了。<br>第二个问题：<br>\t自定义的私信队列，其实是发送失败，主要是生产者发送到mq的时候，发送失败，进了自定义的私信队列；<br>\tDLX的方式的方式其实解决已到了mq，但是因为各种原因，无法到达正常的队列中，大概分类下面几种吧：<br>\t\t消息消费时被拒绝(basic.reject &#47; basic.nack)，并且requeue = false<br>\t\t消息TTL过期<br>\t\t队列达到最大长度<br><br>分享一下之前在公司内部分享的RabbitMQ的资料，欢迎大家交流<br>github上传不上去，只能用有道云笔记，请大家见谅<br>资料主要从：<br>    MQ选型及特点；<br>    AMQP与RabbitMQ模型；<br>    RabbitMQ核心概念；<br>    RabbitMQ相关机制；<br>这几个点去分析的，请大家多多指教。<br>http:&#47;&#47;note.youdao.com&#47;noteshare?id=e9f2f88c6c7fcb7ac690463eb230650a<br>","like_count":19,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494826,"discussion_content":"感谢分享 👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589265021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1791614,"avatar":"","nickname":"职业送奶工","note":"","ucode":"422666312C0BBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341608,"discussion_content":"感谢~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610461120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":317232,"discussion_content":"感谢大佬的分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603519614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1992424,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep3sqfTQey7eKYgGibLnAvaNj9k8gVvIYKVADicOA3DxmXZcDrAkeM8iaJLruiblmEVUr3q2LOVLvYicTw/132","nickname":"郑先生","note":"","ucode":"AA0BA751C4F132","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303249,"discussion_content":"大佬都太谦虚了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599200528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1344529,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI85Y2Va9sKp8bOCCsjK7ABt6H6qzxunXk2zUJpdrOgoXergdAGfibEVoqKs0Zz8RicxmQyQiaRcx5nA/132","nickname":"asia","note":"","ucode":"1876DD836EFCE3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285906,"discussion_content":"看完了 在看的过程中 对mq的一些疑问找到了答案 谢谢分享 thank you very much","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592987791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1232129,"avatar":"https://static001.geekbang.org/account/avatar/00/12/cd/01/c7c9f2f4.jpg","nickname":"kfighter","note":"","ucode":"741CE8A22E5391","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264021,"discussion_content":"资料很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589281633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216471,"user_name":"203。","can_delete":false,"product_type":"c1","uid":1903586,"ip_address":"","ucode":"25D508AB07A2FE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0b/e2/a4eddbe6.jpg","comment_is_top":false,"comment_ctime":1589267013,"is_pvip":false,"replies":[{"id":"80107","content":"比如下面的类，id1和id2重复认为是重复的，id3不需要考虑<br>@Data<br>\t@Builder<br>\t@NoArgsConstructor<br>\t@AllArgsConstructor<br>\tstatic class Test {<br>\t\tprivate String id1;<br>\t\tprivate String id2;<br>\t\t@EqualsAndHashCode.Exclude<br>\t\tprivate String id3;<br>\t}<br><br>通过Set去重或者通过distinct去重即可：<br><br>List&lt;Test&gt; list = new ArrayList&lt;&gt;();<br>\t\tlist.add(new Test(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;));<br>\t\tlist.add(new Test(&quot;a&quot;,&quot;b&quot;,&quot;d&quot;));<br>\t\tSystem.out.println(list.stream().collect(Collectors.toSet()));<br>\t\tSystem.out.println(list.stream().distinct().collect(Collectors.toList()));","user_name":"作者回复","comment_id":216471,"uid":"1001470","ip_address":"","utype":1,"ctime":1589269911,"user_name_real":"朱晔"}],"discussion_count":2,"race_medal":0,"score":"31654038085","product_id":100047701,"comment_content":"老师 我这里有个问题 关于Stream的，业务需求里需要按某几个字段去重(acctId,billingCycleId,prodInstId,offerId)<br>我这里想到了遍历集合areaDatas 后用contains方法判断 重写AcctItemYzfBean实体类的equals方法实现，<br>请问有没有更好的方法？ 代码如下<br><br>List&lt;AcctItemYzfBean&gt; newList = new CopyOnWriteArrayList&lt;&gt;();<br>&#47;&#47;循环过滤、增强翼支付数据<br>Optional.ofNullable(areaDatas)&#47;&#47;集合判空<br>\t\t.orElse(new ArrayList&lt;&gt;())<br>\t\t.stream()&#47;&#47;转化为流 便于下面过滤和增强数据<br>\t\t.filter(Objects::nonNull)&#47;&#47;元素判空<br>\t\t.filter(yzfBean -&gt; this.judgeIfOfferId(yzfBean))&#47;&#47;判断销售品ID是否相同<br>\t\t.filter(yzfBean -&gt; this.enhanceYzfBean(yzfBean))&#47;&#47;增强过滤accNbr和acctId<br>\t\t.filter(yzfBean -&gt; this.judgeIfArrears(yzfBean))&#47;&#47;判断是否不欠费<br>\t\t.filter(yzfBean -&gt; this.judgeIfCancel(yzfBean))&#47;&#47;判断是否销账金额大于0<br>\t\t.filter(yzfBean -&gt; this.judgeIfReturn(yzfBean))&#47;&#47;判断是否上月未返还<br>\t\t.forEach(yzfBean -&gt; {<br>\t\t\t&#47;&#47;去重 重写AcctItemYzfBean.equals方法<br>\t\t\tif(!newList.contains(yzfBean)) {<br>\t\t\t\t&#47;&#47;增强latnName<br>\t\t\t\tyzfBean.setLatnName(commonRegionMap.get(yzfBean.getRegionId()));<br>\t\t\t\t&#47;&#47;增强areaCode<br>\t\t\t\tyzfBean.setAreaCode(areaCode);<br>\t\t\t\t&#47;&#47;数据封装<br>\t\t\t\tnewList.add(yzfBean);<br>\t\t\t}<br>\t\t});<br><br>重写的equals方法\t\t<br>@Override<br>public boolean equals(Object yzfBeanObj) {<br>\tif(yzfBeanObj instanceof AcctItemYzfBean) {<br>\t\tAcctItemYzfBean yzfBean = (AcctItemYzfBean) yzfBeanObj;<br>\t\tif(Tools.isEmpty(yzfBean.getAcctId(), yzfBean.getBillingCycleId(), yzfBean.getProdInstId(),  yzfBean.getOfferId())) {<br>\t\t\treturn false;<br>\t\t}<br>\t\tif(yzfBean.getAcctId().equals(this.acctId) &amp;&amp; yzfBean.getBillingCycleId().equals(this.billingCycleId)<br>\t\t\t\t&amp;&amp; yzfBean.getProdInstId().equals(this.prodInstId) &amp;&amp; yzfBean.getOfferId().equals(this.offerId)) {<br>\t\t\treturn true;<br>\t\t}<br>\t}<br>\treturn super.equals(yzfBeanObj);<br>}","like_count":7,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494832,"discussion_content":"比如下面的类，id1和id2重复认为是重复的，id3不需要考虑\n@Data\n\t@Builder\n\t@NoArgsConstructor\n\t@AllArgsConstructor\n\tstatic class Test {\n\t\tprivate String id1;\n\t\tprivate String id2;\n\t\t@EqualsAndHashCode.Exclude\n\t\tprivate String id3;\n\t}\n\n通过Set去重或者通过distinct去重即可：\n\nList&amp;lt;Test&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();\n\t\tlist.add(new Test(&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;));\n\t\tlist.add(new Test(&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;d&amp;quot;));\n\t\tSystem.out.println(list.stream().collect(Collectors.toSet()));\n\t\tSystem.out.println(list.stream().distinct().collect(Collectors.toList()));","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589269911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1903586,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0b/e2/a4eddbe6.jpg","nickname":"203。","note":"","ucode":"25D508AB07A2FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264538,"discussion_content":"哦哦，意思是distinct去重必须重写实体类的equals方法和hashCode方法，我明白了 谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589332714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218148,"user_name":"似曾相识","can_delete":false,"product_type":"c1","uid":1971079,"ip_address":"","ucode":"DCBA5F6ABC7401","user_header":"https://static001.geekbang.org/account/avatar/00/1e/13/87/73a17c60.jpg","comment_is_top":false,"comment_ctime":1589724540,"is_pvip":false,"replies":[{"id":"80702","content":"这只是demo生产应用肯定用数据库做幂等的","user_name":"作者回复","comment_id":218148,"uid":"1001470","ip_address":"","utype":1,"ctime":1589764427,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"14474626428","product_id":100047701,"comment_content":"老师 <br>1.如果实际生产中用使用 ConcurrentHashMap 来存放那些发过短信的用户 ID 实现幂等，如何一直往map中增加，会不会oom呢？<br>2.如果数据量巨大 使用ConcurrentSkipListMap 跳表会不会更好一些呢？<br>","like_count":4,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495362,"discussion_content":"这只是demo生产应用肯定用数据库做幂等的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589764427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256076,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1603520372,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"10193454964","product_id":100047701,"comment_content":"问题一出现的问题我也遇到了，和评论区包括和老师遇到的问题一样，还是因为在事务没完成的时候进行了提交，就会产生概率性的查询不到结果。<br><br>这种错误，经历过一次，后面的事情就好办了，会当做一个tips始终记在心里，编码的时候也一直注意着 。没想到在这里还能和大家遇到类似的问题，幸会幸会","like_count":3,"discussions":[{"author":{"id":1848364,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/34/2c/cd158db1.jpg","nickname":"小刘","note":"","ucode":"F50BCF1E9D285A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411839,"discussion_content":"我也遇到了，确实是深刻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636016314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2378309,"avatar":"https://static001.geekbang.org/account/avatar/00/24/4a/45/e048531a.jpg","nickname":"迪米乌格斯","note":"","ucode":"1D4393746DCBCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373517,"discussion_content":"确实, 数据库事务这种情况其实遇到一次就很难忘记了,太经典了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620754260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216611,"user_name":"王鹏","can_delete":false,"product_type":"c1","uid":1934785,"ip_address":"","ucode":"B79003C125BE00","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Pu41KPIhAp72l0N7kOFL738owSAIT5EyH0oUUMacQRWzeFV77QDjSDNTSFNvjNZib1myibvxAfQAsAY5KzsIia73w/132","comment_is_top":false,"comment_ctime":1589295539,"is_pvip":false,"replies":[{"id":"80132","content":"是，我遇到的就是这个情况","user_name":"作者回复","comment_id":216611,"uid":"1001470","ip_address":"","utype":1,"ctime":1589296867,"user_name_real":"朱晔"}],"discussion_count":3,"race_medal":0,"score":"10179230131","product_id":100047701,"comment_content":"mq发信息写到了事务中，导致了mq的消费时，事务还没有提交","like_count":2,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494881,"discussion_content":"是，我遇到的就是这个情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589296867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2405757,"avatar":"https://static001.geekbang.org/account/avatar/00/24/b5/7d/d2b40599.jpg","nickname":"Joker","note":"","ucode":"5D6838BF021AE2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340433,"discussion_content":"这种解决办法是吧发消息的操作放到controller？消息发送是否成功利用rabbitmq的confirm机制来确保？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610005653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1195258,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3c/fa/e2990931.jpg","nickname":"文敦复","note":"","ucode":"B8F4A6BD5D7805","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2405757,"avatar":"https://static001.geekbang.org/account/avatar/00/24/b5/7d/d2b40599.jpg","nickname":"Joker","note":"","ucode":"5D6838BF021AE2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387940,"discussion_content":"。。。你完全可以用一个XXManager或者另外的Servervice包装下啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628503356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":340433,"ip_address":""},"score":387940,"extra":""}]}]},{"had_liked":false,"id":216340,"user_name":"郭石龙","can_delete":false,"product_type":"c1","uid":1998819,"ip_address":"","ucode":"EB963343AA10DD","user_header":"","comment_is_top":false,"comment_ctime":1589244569,"is_pvip":false,"replies":[{"id":"80054","content":"补偿需要配合幂等","user_name":"作者回复","comment_id":216340,"uid":"1001470","ip_address":"","utype":1,"ctime":1589246441,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"10179179161","product_id":100047701,"comment_content":"老师，你好，如果有多个补偿实例，会不会造成消息重复？","like_count":2,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494782,"discussion_content":"补偿需要配合幂等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589246441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250324,"user_name":"鲁鸣","can_delete":false,"product_type":"c1","uid":2152306,"ip_address":"","ucode":"974BA3C3E64630","user_header":"https://static001.geekbang.org/account/avatar/00/20/d7/72/cbef720d.jpg","comment_is_top":false,"comment_ctime":1601025263,"is_pvip":false,"replies":[{"id":"91669","content":"这就是消息事务表模式","user_name":"作者回复","comment_id":250324,"uid":"1001470","ip_address":"","utype":1,"ctime":1601033179,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"5895992559","product_id":100047701,"comment_content":"在event sourcing的时候，有一种方案是outbox，在发送方维持一个数据表，这样可以保证消息和业务数据在一个事务中，也是一种消息发送记录的方式","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506184,"discussion_content":"这就是消息事务表模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601033179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217578,"user_name":"G小调","can_delete":false,"product_type":"c1","uid":1145529,"ip_address":"","ucode":"8F3D50E2C1A559","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/b9/c3d3a92f.jpg","comment_is_top":false,"comment_ctime":1589536805,"is_pvip":true,"replies":[{"id":"80487","content":"其实这就是本地事务消息的实现  第二步不一定需要定时任务拉取 第一步完成后直接发mq即可 定时任务拉取只用来补偿","user_name":"作者回复","comment_id":217578,"uid":"1001470","ip_address":"","utype":1,"ctime":1589547251,"user_name_real":"朱晔"}],"discussion_count":2,"race_medal":0,"score":"5884504101","product_id":100047701,"comment_content":"第一个问题，是否可以这样解决<br>1.先保存用户注册的数据，同时记录下要发送mq的消息，入库在一个事务里<br>2.通过异步任务定时拉取mq的消息表，发送到mq，进行处理<br><br>但这个有个问题，异步任务就能执行mq的的业务，那mq的价值是不是减少了","like_count":1,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495187,"discussion_content":"其实这就是本地事务消息的实现  第二步不一定需要定时任务拉取 第一步完成后直接发mq即可 定时任务拉取只用来补偿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589547251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1195258,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3c/fa/e2990931.jpg","nickname":"文敦复","note":"","ucode":"B8F4A6BD5D7805","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387939,"discussion_content":"用户注册和存储MQ放一个事务并不好，因为将用户注册才是目的，不能因为存储MQ的消息的失败而导致用户都注册不成功。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628503285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216796,"user_name":"汝林外史","can_delete":false,"product_type":"c1","uid":1188906,"ip_address":"","ucode":"3C66C0F0537A99","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/2a/33441e2b.jpg","comment_is_top":false,"comment_ctime":1589344980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884312276","product_id":100047701,"comment_content":"哈哈，写一个几率比较小的情况：注册register的代码中把异常都吃掉了，没抛出来，注册又报错了，但还是继续执行并且发了消息。","like_count":1},{"had_liked":false,"id":328254,"user_name":"","can_delete":false,"product_type":"c1","uid":2877195,"ip_address":"","ucode":"","user_header":"","comment_is_top":false,"comment_ctime":1640623986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640623986","product_id":100047701,"comment_content":"你好，请问一下，<br>1.比如开启prefetch、多实例、多消费时是否会出现预取消息重复。","like_count":0},{"had_liked":false,"id":302117,"user_name":"walle斌","can_delete":false,"product_type":"c1","uid":1062848,"ip_address":"","ucode":"0DB3243004951F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","comment_is_top":false,"comment_ctime":1626086695,"is_pvip":false,"replies":[{"id":"109331","content":"@Async和MQ原理完全不同","user_name":"作者回复","comment_id":302117,"uid":"1001470","ip_address":"","utype":1,"ctime":1626142078,"user_name_real":"朱晔"}],"discussion_count":2,"race_medal":0,"score":"1626086695","product_id":100047701,"comment_content":"对了  许多同时用@Async标签实现 希望能够做到，但是又不用100%保证的解耦动作。实际也有隐患，不放把@Async标签底层实现更换为mq，是不是更合适？","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523187,"discussion_content":"@Async和MQ原理完全不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626142078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":544447,"discussion_content":"😃我这自研了类asyc标签，底层用mq实现，解决其问题，补充了缺陷，不过有得有失，底层mq实现肯定想比目前纯线程重了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641524944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":523187,"ip_address":""},"score":544447,"extra":""}]}]},{"had_liked":false,"id":302115,"user_name":"walle斌","can_delete":false,"product_type":"c1","uid":1062848,"ip_address":"","ucode":"0DB3243004951F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","comment_is_top":false,"comment_ctime":1626086629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626086629","product_id":100047701,"comment_content":"额 看完老师用rabbitmq ，很庆幸当时技术选型选了rocketmq，自带补偿，时间递增重试。。外加消费端天然支持并发消费。消费并发能力=  读队列数* 消费端的线程数。 <br>外加rocketmq 支持分布式事物。。高效的tags广播消息消费，低效但是定制化极强的sql筛选消息消费，而且延迟低，支持消息堆积能力强。<br>总体而言，。对于业务而言rocketmq的易用度 是好于rabbitmq的。许多是因为习惯的惯性还在用rabbitmq","like_count":1},{"had_liked":false,"id":272248,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":2405757,"ip_address":"","ucode":"5D6838BF021AE2","user_header":"https://static001.geekbang.org/account/avatar/00/24/b5/7d/d2b40599.jpg","comment_is_top":false,"comment_ctime":1610005124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610005124","product_id":100047701,"comment_content":"如果是用户注册后在一个 db 事务中同时插入一条消息到发送表，如果发自己的 mq 成功则在事务中删除发送表的消息，如果 mqbroker 出现故障发送不了则不删除，或者做一个消息状态字段来记录是否成功发送，这样会看到成功发mq失败，但发送表中有失败的消息，之后通过一个定时任务定期重发失败表中的失败消息即可。也可以用这个表来确认数据是否入库？","like_count":0},{"had_liked":false,"id":256061,"user_name":"Bug? Feature!","can_delete":false,"product_type":"c1","uid":1164531,"ip_address":"","ucode":"F8FA8A0094FBA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","comment_is_top":false,"comment_ctime":1603516672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603516672","product_id":100047701,"comment_content":"异步处理，死信队列，学习了，谢谢老师","like_count":0},{"had_liked":false,"id":254466,"user_name":"行则将至","can_delete":false,"product_type":"c1","uid":1542987,"ip_address":"","ucode":"DB972F2DF059C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","comment_is_top":false,"comment_ctime":1603118714,"is_pvip":false,"replies":[{"id":"92883","content":"ThreadFactoryBuilder完全可以自己写一个，非常简单，没必要像我一样引入三方库","user_name":"作者回复","comment_id":254466,"uid":"1001470","ip_address":"","utype":1,"ctime":1603163100,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":1,"score":"1603118714","product_id":100047701,"comment_content":"我前几天就遇到了问题一。是因为mq发送消息在事务方法里。mq发消息时，数据库事务可能还没有提交(不是必现)。<br>老师，你用的ThreadFactoryBuilder，我引入对应的依赖之后，发现会该依赖会引入其他N多个不相干的依赖。。。。。。您是咋解决的？","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507409,"discussion_content":"ThreadFactoryBuilder完全可以自己写一个，非常简单，没必要像我一样引入三方库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603163100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252720,"user_name":"Carter","can_delete":false,"product_type":"c1","uid":1030842,"ip_address":"","ucode":"1FD476D8F2BE27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ba/83de3488.jpg","comment_is_top":false,"comment_ctime":1602466368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602466368","product_id":100047701,"comment_content":"第一个问题：发送消息在MySQL事务里，事务未提交，但是消息被消费了。","like_count":0},{"had_liked":false,"id":247191,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1599629899,"is_pvip":false,"replies":[{"id":"90781","content":"根据队列积压情况或者说入流量和出流量对比情况来设置消费线程数，并且需要确保消费有2x的冗余量","user_name":"作者回复","comment_id":247191,"uid":"1001470","ip_address":"","utype":1,"ctime":1599640056,"user_name_real":"朱晔"}],"discussion_count":1,"race_medal":0,"score":"1599629899","product_id":100047701,"comment_content":"老师：rabbitmq中的SimpleRabbitListenerContainerFactory设置的最大消费线程数和监听的队列数之间应该是什么关系比较合适？是监控消费qps，消息总量等情况，调整最大消费线程数吗？<br>       ","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505336,"discussion_content":"根据队列积压情况或者说入流量和出流量对比情况来设置消费线程数，并且需要确保消费有2x的冗余量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599640056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225258,"user_name":"Geek_3b086e","can_delete":false,"product_type":"c1","uid":2015738,"ip_address":"","ucode":"FCEE6511B1F397","user_header":"","comment_is_top":false,"comment_ctime":1591697923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591697923","product_id":100047701,"comment_content":"异步的本质是变被动处理为主动处理，这个转变就需要一个蓄水池，不管是线程池中的队列还是把队列彻底独立的mq形式。","like_count":0},{"had_liked":false,"id":222478,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1068571,"ip_address":"","ucode":"65AF6AF292DAD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/1b/f4b786b9.jpg","comment_is_top":false,"comment_ctime":1590815323,"is_pvip":true,"replies":[{"id":"82050","content":"你是指补偿吗？我遇到过mq瘫痪的情况，没有补偿这个时候除了干着急我们还能做啥","user_name":"作者回复","user_name_real":"朱晔","uid":"1001470","ctime":1590829991,"ip_address":"","comment_id":222478,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590815323","product_id":100047701,"comment_content":"老师 生产者发送给mq消息 即使异步发送也会有listener 来监听投递消息是否成功 如果失败 重试不就行了 ？ 不是类似kafka 有100%投递 100%保证消费的配置嘛","like_count":0,"discussions":[{"author":{"id":1001470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/fe/d0e25d57.jpg","nickname":"朱晔","note":"","ucode":"0B7F0BADE6AAB8","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496814,"discussion_content":"你是指补偿吗？我遇到过mq瘫痪的情况，没有补偿这个时候除了干着急我们还能做啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590829991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218150,"user_name":"似曾相识","can_delete":false,"product_type":"c1","uid":1971079,"ip_address":"","ucode":"DCBA5F6ABC7401","user_header":"https://static001.geekbang.org/account/avatar/00/1e/13/87/73a17c60.jpg","comment_is_top":false,"comment_ctime":1589724813,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1589724813","product_id":100047701,"comment_content":"“ConcurrentHashMap 来存放那些发过短信的用户 ID 实现幂等”<br>老师 3.能将ConcurrentHashMap换成 LinkedHashmap吗？通过LUR 还可以定时 删除一些数据，避免集合过大，这样做对吗？","like_count":0,"discussions":[{"author":{"id":1239462,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e9/a6/69907ec1.jpg","nickname":"李伟","note":"","ucode":"F0EF60EB250B20","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288106,"discussion_content":"一般生产上应该是通过数据库来区分到底有没有发过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593653153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}