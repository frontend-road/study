{"id":160991,"title":"03 | 面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？","content":"<p>在上一节课中，我们讲到，要具备编写高质量代码的能力，你需要学习一些编程方法论，其中就包含面向对象（我们可以把它看成一种设计思想）、设计原则、设计模式、编程规范、重构技巧等。而我们整个专栏的内容也是围绕着这几块展开讲解的。所以，今天我就先来简单介绍一下这几个概念，并且说一说它们之间的联系。</p><p>今天的内容相当于专栏的一个教学大纲，或者说学习框架。它能让你对整个专栏所涉及的知识点，有一个全局性的了解，能帮你将后面零散的知识更系统地组织在大脑里。</p><p>话不多说，我们就一块来看一下，接下来的这8个月我们到底要学习哪些内容吧！</p><h2>面向对象</h2><p>现在，主流的编程范式或者是编程风格有三种，它们分别是面向过程、面向对象和函数式编程。面向对象这种编程风格又是这其中最主流的。现在比较流行的编程语言大部分都是面向对象编程语言。大部分项目也都是基于面向对象编程风格开发的。面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式编码实现的基础。</p><p>所以，在专栏的最开始，我们会详细地讲解面向对象编程的相关的知识，为学习后面的内容做铺垫。对于这部分内容，你需要掌握下面这7个大的知识点。</p><!-- [[[read_end]]] --><ul>\n<li>面向对象的四大特性：封装、抽象、继承、多态</li>\n<li>面向对象编程与面向过程编程的区别和联系</li>\n<li>面向对象分析、面向对象设计、面向对象编程</li>\n<li>接口和抽象类的区别以及各自的应用场景</li>\n<li>基于接口而非实现编程的设计思想</li>\n<li>多用组合少用继承的设计思想</li>\n<li>面向过程的贫血模型和面向对象的充血模型</li>\n</ul><h2>设计原则</h2><p>设计原则是指导我们代码设计的一些经验总结。设计原则这块儿的知识有一个非常大的特点，那就是这些原则听起来都比较抽象，定义描述都比较模糊，不同的人会有不同的解读。所以，如果单纯地去记忆定义，对于编程、设计能力的提高，意义并不大。对于每一种设计原则，我们需要掌握它的设计初衷，能解决哪些编程问题，有哪些应用场景。只有这样，我们才能在项目中灵活恰当地应用这些原则。</p><p>对于这一部分内容，你需要透彻理解并且掌握，如何应用下面这样几个常用的设计原则。</p><ul>\n<li>SOLID原则-SRP单一职责原则</li>\n<li>SOLID原则-OCP开闭原则</li>\n<li>SOLID原则-LSP里式替换原则</li>\n<li>SOLID原则-ISP接口隔离原则</li>\n<li>SOLID原则-DIP依赖倒置原则</li>\n<li>DRY原则、KISS原则、YAGNI原则、LOD法则</li>\n</ul><h2>设计模式</h2><p>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。大部分设计模式要解决的都是代码的可扩展性问题。设计模式相对于设计原则来说，没有那么抽象，而且大部分都不难理解，代码实现也并不复杂。这一块的学习难点是了解它们都能解决哪些问题，掌握典型的应用场景，并且懂得不过度应用。</p><p>经典的设计模式有23种。随着编程语言的演进，一些设计模式（比如Singleton）也随之过时，甚至成了反模式，一些则被内置在编程语言中（比如Iterator），另外还有一些新的模式诞生（比如Monostate）。</p><p>在专栏中，我们会重点讲解23种经典的设计模式。它们又可以分为三大类：创建型、结构型、行为型。对于这23种设计模式的学习，我们要有侧重点，因为有些模式是比较常用的，有些模式是很少被用到的。对于常用的设计模式，我们要花多点时间理解掌握。对于不常用的设计模式，我们只需要稍微了解即可。</p><p>我按照类型和是否常用，对专栏中讲到的这些设计模式，进行了简单的分类，具体如下所示。</p><h3>1.创建型</h3><p>常用的有：单例模式、工厂模式（工厂方法和抽象工厂）、建造者模式。</p><p>不常用的有：原型模式。</p><h3>2.结构型</h3><p>常用的有：代理模式、桥接模式、装饰者模式、适配器模式。</p><p>不常用的有：门面模式、组合模式、享元模式。</p><h3>3.行为型</h3><p>常用的有：观察者模式、模板模式、策略模式、职责链模式、迭代器模式、状态模式。</p><p>不常用的有：访问者模式、备忘录模式、命令模式、解释器模式、中介模式。</p><h2>编程规范</h2><p>编程规范主要解决的是代码的可读性问题。编码规范相对于设计原则、设计模式，更加具体、更加偏重代码细节。即便你可能对设计原则不熟悉、对设计模式不了解，但你最起码要掌握基本的编码规范，比如，如何给变量、类、函数命名，如何写代码注释，函数不宜过长、参数不能过多等等。</p><p>对于编码规范，考虑到很多书籍已经讲得很好了（比如《重构》《代码大全》《代码整洁之道》等）。而且，每条编码规范都非常简单、非常明确，比较偏向于记忆，你只要照着来做可以。它不像设计原则，需要融入很多个人的理解和思考。所以，在这个专栏中，我并没有花太多的篇幅来讲解所有的编码规范，而是总结了我认为的最能改善代码质量的20条规范。如果你暂时没有时间去看那些经典的书籍，看我这些就够了。</p><p>除此之外，专栏并没有将编码规范单独作为一个模块来讲解，而是跟重构放到了一起。之所以这样做，那是因为我把重构分为大重构和小重构两种类型，而小重构利用的知识基本上就是编码规范。</p><p>除了编码规范，我们还会介绍一些代码的坏味道，让你知道什么样的代码是不符合规范的，应该如何优化。参照编码规范，你可以写出可读性好的代码；参照代码的坏味道，你可以找出代码存在的可读性问题。</p><h2>代码重构</h2><p>在软件开发中，只要软件在不停地迭代，就没有一劳永逸的设计。随着需求的变化，代码的不停堆砌，原有的设计必定会存在这样那样的问题。针对这些问题，我们就需要进行代码重构。重构是软件开发中非常重要的一个环节。持续重构是保持代码质量不下降的有效手段，能有效避免代码腐化到无可救药的地步。</p><p>而重构的工具就是我们前面罗列的那些面向对象设计思想、设计原则、设计模式、编码规范。实际上，设计思想、设计原则、设计模式一个最重要的应用场景就是在重构的时候。我们前面讲过，虽然使用设计模式可以提高代码的可扩展性，但过度不恰当地使用，也会增加代码的复杂度，影响代码的可读性。在开发初期，除非特别必须，我们一定不要过度设计，应用复杂的设计模式。而是当代码出现问题的时候，我们再针对问题，应用原则和模式进行重构。这样就能有效避免前期的过度设计。</p><p>对于重构这部分内容，你需要掌握以下几个知识点：</p><ul>\n<li>重构的目的（why）、对象（what）、时机（when）、方法（how）；</li>\n<li>保证重构不出错的技术手段：单元测试和代码的可测试性；</li>\n<li>两种不同规模的重构：大重构（大规模高层次）和小重构（小规模低层次）。</li>\n</ul><p>希望你学完这部分内容之后，不仅仅是掌握一些重构技巧、套路，更重要的是建立持续重构意识，把重构当作开发的一部分，融入到日常的开发中。</p><h2>五者之间的联系</h2><p>关于面向对象、设计原则、设计模式、编程规范和代码重构，这五者的关系我们前面稍微提到了一些，我这里再总结梳理一下。</p><ul>\n<li>面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式等编码实现的基础。</li>\n<li>设计原则是指导我们代码设计的一些经验总结，对于某些场景下，是否应该应用某种设计模式，具有指导意义。比如，“开闭原则”是很多设计模式（策略、模板等）的指导原则。</li>\n<li>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。应用设计模式的主要目的是提高代码的可扩展性。从抽象程度上来讲，设计原则比设计模式更抽象。设计模式更加具体、更加可执行。</li>\n<li>编程规范主要解决的是代码的可读性问题。编码规范相对于设计原则、设计模式，更加具体、更加偏重代码细节、更加能落地。持续的小重构依赖的理论基础主要就是编程规范。</li>\n<li>重构作为保持代码质量不下降的有效手段，利用的就是面向对象、设计原则、设计模式、编码规范这些理论。</li>\n</ul><p>实际上，面向对象、设计原则、设计模式、编程规范、代码重构，这五者都是保持或者提高代码质量的方法论，本质上都是服务于编写高质量代码这一件事的。当我们追本逐源，看清这个本质之后，很多事情怎么做就清楚了，很多选择怎么选也清楚了。比如，在某个场景下，该不该用这个设计模式，那就看能不能提高代码的可扩展性；要不要重构，那就看重代码是否存在可读、可维护问题等。</p><h2>重点回顾</h2><p>今天的内容到此就讲完了。我画了一张图，总结了专栏中所涉及的知识点。在学习后面的课程的时候，你可以经常翻出来看一下，建立全局意识，不至于迷失在零碎的知识点中。</p><p><img src=\"https://static001.geekbang.org/resource/image/f3/d3/f3262ef8152517d3b11bfc3f2d2b12d3.png?wh=5013*3903\" alt=\"\"></p><h2>课堂讨论</h2><p>今天课堂讨论的话题有两个。</p><ol>\n<li>在今天讲到的内容中，你觉得哪一部分内容对提高代码质量最有效？为什么？除了我罗列的这些内容之外，你还知道哪些可以提高代码质量的方法？</li>\n<li>我们知道，最经典的设计模式书籍是GoF的《设计模式》，它的中文全称是《设计模式：可复用面向对象软件的基础》，英文全称是“Design Patterns: Elements of Reusable Object-Oriented Software”。为什么它在标题中会特意提到“面向对象”呢？</li>\n</ol><p>欢迎在留言区写下你的想法，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"02 | 从哪些维度评判代码质量的好坏？如何具备写出高质量代码的能力？","id":160985},"right":{"article_title":"04 | 理论一：当谈论面向对象的时候，我们到底在谈论什么？","id":161575}},"comments":[{"had_liked":false,"id":147428,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1572863607,"is_pvip":false,"discussion_count":17,"race_medal":0,"score":"3501971209847","product_id":100039001,"comment_content":"面向对象是武器，设计模式是招式，设计原则是心法<br>以心法为基础，以武器运用招式应对复杂的编程问题","like_count":816,"discussions":[{"author":{"id":1303330,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e3/22/972dacba.jpg","nickname":"大白","note":"","ucode":"34B8D3BA215553","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51217,"discussion_content":"这是硬靠呀。\n\n思想衍生理论，理论指导实践。\n\n原则，模式，规范，分别约束着思想，理论，实践，使其条理化，秩序化。 形成的过程是，自底向上的抽象总结，然后又自顶向下的应用指导。闭环生态。","likes_number":25,"is_delete":false,"is_hidden":false,"ctime":1573825258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1580358,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/ZMALpD4bKCVdsx8ymCC5Oo0oxibxIFGQzT6fP2B8MEgLGLktQRX4ictobkbcNBDTQibjoQNKBmWCKomNibWqHZ5kpg/132","nickname":"Long","note":"","ucode":"D85B99FD0C4B76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1303330,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e3/22/972dacba.jpg","nickname":"大白","note":"","ucode":"34B8D3BA215553","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72690,"discussion_content":"咋两个名字一样，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575516406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51217,"ip_address":""},"score":72690,"extra":""},{"author":{"id":1055722,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1b/ea/4f5661c6.jpg","nickname":"牛头人","note":"","ucode":"DABDEF4F32A812","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1303330,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e3/22/972dacba.jpg","nickname":"大白","note":"","ucode":"34B8D3BA215553","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217754,"discussion_content":"这是一个抽象层次递增的关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585579294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51217,"ip_address":""},"score":217754,"extra":""}]},{"author":{"id":1713885,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/26/dd/9b764dc7.jpg","nickname":"zard_sakai","note":"","ucode":"1466C541F9FB26","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296383,"discussion_content":"我怎么觉得怪怪的，置顶留言中将面向对象作为武器，其实我更觉得面向对象是更高层次的抽象：理由如下\n个人认为，任何设计都是需要针对已有现象，解决问题的。\n1、首先需要有一个支撑思想（类比现实中的国家是社会主义制度还是资本主义制度）\n这个思想可以是：面向过程编程的思想、面向对象编程的思想、面向函数编程的思想\n2、其次需要有一些基本原则（类比现实中的不能违反伦理道德，需要遵守法律原则..）\n这些原则包括：老师讲的设计原则\n3、最后需要有一些具体模式（类比现实中的应试教育、制定刑法这些.....）\n这些模式包括：23种设计模式","likes_number":21,"is_delete":false,"is_hidden":false,"ctime":1596529295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095997,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b9/3d/e061a652.jpg","nickname":"Geek_109a0b","note":"","ucode":"93A45B581947FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47590,"discussion_content":"最抽象的回答\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573375002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1186089,"avatar":"https://static001.geekbang.org/account/avatar/00/12/19/29/4a8214b7.jpg","nickname":"Bug Killer","note":"","ucode":"2741A206F504E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1095997,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b9/3d/e061a652.jpg","nickname":"Geek_109a0b","note":"","ucode":"93A45B581947FC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50561,"discussion_content":"哈哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573734255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":47590,"ip_address":""},"score":50561,"extra":""}]},{"author":{"id":2730262,"avatar":"https://static001.geekbang.org/account/avatar/00/29/a9/16/769ca683.jpg","nickname":"Jaycee","note":"","ucode":"5B78C2731FA302","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388757,"discussion_content":"面向对象是基础，设计原则是原则，设计模式为具体的实施策论。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628938443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/20/e5/f66d6144.jpg","nickname":"九先生","note":"","ucode":"A63A333299D485","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385739,"discussion_content":"还是感觉有点怪怪的，面向对象是设计原则、设计模式实现的基础，它们强关联性，这个类比里，武器有没有其实对心法、招式影响不大","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627258750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1691447,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cf/37/6ed137b9.jpg","nickname":"Dunk","note":"","ucode":"A8F5AB98382719","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366233,"discussion_content":"数据结构与算法才是程序员的内功心法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617984249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1362023,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c8/67/5489998a.jpg","nickname":"John Bull","note":"","ucode":"2A1B4191CD87B8","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546018,"discussion_content":"面向对象是武器有点扯啊，面向对象是设计范式的一种，更像是某种武功；设计原则是心法，适用于不同的武功；设计模式是招式，在具体招式下的发力像数据结构或算法才是武器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642130338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2416157,"avatar":"https://static001.geekbang.org/account/avatar/00/24/de/1d/c1bd26dc.jpg","nickname":"我不是黄蓉我不会武功","note":"","ucode":"E4BE01B01AF1BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343838,"discussion_content":"总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611193401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2033256,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKHxicHW07jz5vB9I8QAonrDXrcFmOS9CtqufVexs0wY1YxH7picctcTMOiaibgVvwkQX3UcicqqUXWTYQ/132","nickname":"Geek_aq","note":"","ucode":"6FFE7A9D746964","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284487,"discussion_content":"精辟老铁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592541293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098720,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","nickname":"技术骨干","note":"","ucode":"8FCF8DE6D29201","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217998,"discussion_content":"老铁说的好啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585613450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019807,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/9f/e49b68ea.jpg","nickname":"幽弥狂","note":"","ucode":"5AECEA7D6ADF33","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216978,"discussion_content":"境界呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585493976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1187197,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","nickname":"somenzz","note":"","ucode":"EA59A170DF8910","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166079,"discussion_content":"总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581347588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241140,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f0/34/d572802b.jpg","nickname":"风流倜傥怪蜀黍","note":"","ucode":"ADBA7EBDC9C7E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50838,"discussion_content":"数据结构是什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573779221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1186089,"avatar":"https://static001.geekbang.org/account/avatar/00/12/19/29/4a8214b7.jpg","nickname":"Bug Killer","note":"","ucode":"2741A206F504E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50562,"discussion_content":"总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573734260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150026,"user_name":"段启超","can_delete":false,"product_type":"c1","uid":1258209,"ip_address":"","ucode":"164CF3018071B2","user_header":"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg","comment_is_top":false,"comment_ctime":1573449496,"is_pvip":false,"discussion_count":22,"race_medal":0,"score":"1938603699992","product_id":100039001,"comment_content":"我觉得今年对我来说，是重新认识“面向对象”的一年。<br>今年事我工作的第三年了（从八月份开始算第三年），年初的时候误打误撞的学了一段时间的DDD，让我瞬间感受到了什么才是面向对象编程，之前自己做的都是用面向对象的语言写面向过程的代码。究其原因，可能是MVC 三层架构的影响，太多人的代码里头只剩下了pojo这种贫血模型。封装，继承，多态，抽象是啥，早就忘干净了。<br>在软件设计方面，很多人习惯了一开始就设计数据库表结构，结果就是代码逻辑跟数据库构成了强耦合，数据库一改，代码基本上会被改个彻底。在这种情况下，我们用的java面向对象的语言，结果却写的是面向过程的代码，这种代码基本没有可维护，可扩展，更没有可测试性一说。所以，面向对象的这个词语，被太多的人只是挂在嘴边上了，落实到代码里边，就成了面向过程。<br>在意识到这个问题后，我花了一段时间重新回顾了一遍面向对象的知识，并试图用来改进代码质量，这个过程是充满坎坷的，我总结了一些自己的体会：<br>1： 要真正落地面向对象编程，面向对象设计是前提，没有面向对象的设计意识，写着写着就成了面条代码。<br>2：以前只知道封装、继承、多态，全然忽视了最重要的抽象，抽象是封装、继承、和多态的基础。合理的抽象源于对业务主体的合理分析和认识。合理的抽象，应该是自洽的，易于理解的。<br>3：关于组合和聚合的关系，最核心的区别就是生命周期的区别，组合关系中，整体和部分是一个整体，离开了整体，部分没有意义，同时产生，同时销毁，而聚合关系中，部分单独存在也可以是有意义的。<br>4：别滥用继承，继承的作用更多的时候使用多态的特性。<br>关于UML ：<br>在工作的过程中，试着画过UML图，UML图有着自己一条完整的语言和生态，学习成本还是相当高的，问题在于，即使用了标准的UML 图，如果沟通过程中，对方不懂，也依然效果不大，所以我对UML的感觉就是: 能看懂，会画基本的即可，没必要太追求标准化，虽然如此，但是UML 还是很重要的，它的意义是提供一种面向对象设计的表达方式，是学习面向对象设计中不可缺少的一部分（个人理解）。","like_count":452,"discussions":[{"author":{"id":1098720,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","nickname":"技术骨干","note":"","ucode":"8FCF8DE6D29201","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218001,"discussion_content":"三年就有这么高的觉悟","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1585613641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51089,"discussion_content":"我觉得能画好UML的程序员，都是很优秀的。因为这一个过程，就是老师讲到的，好的程序员，是写能让人看懂的代码，画图就是前提之一。不然能看机器看懂代码，是个程序员，都会，哈哈","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1573809696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1996765,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep74kPF5y5NnmKVH2N95W9RobhxkiacPhypTOHOmcNbRtiaokhr4bPacl5NtJib41RJqPCGvWZgibordw/132","nickname":"易","note":"","ucode":"D6CA82A57FEF02","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":335357,"discussion_content":"傻瓜都能写出机器能懂的程序，只有程序员才能写出人看懂的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608172521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51089,"ip_address":""},"score":335357,"extra":""}]},{"author":{"id":1021530,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/5a/846a09f7.jpg","nickname":"pony","note":"","ucode":"B72FA864CDD286","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58237,"discussion_content":"抽象是面向对象编程基础，双手赞成","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574660825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2346847,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cf/5f/b14bd101.jpg","nickname":"坚持","note":"","ucode":"6CCC5C34D66306","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336486,"discussion_content":"同名不同姓！你好，很高兴认识你，我姓古。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608606756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1258209,"avatar":"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg","nickname":"段启超","note":"","ucode":"164CF3018071B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2346847,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cf/5f/b14bd101.jpg","nickname":"坚持","note":"","ucode":"6CCC5C34D66306","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347426,"discussion_content":"这么巧啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612230640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":336486,"ip_address":""},"score":347426,"extra":""},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2346847,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cf/5f/b14bd101.jpg","nickname":"坚持","note":"","ucode":"6CCC5C34D66306","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379748,"discussion_content":"我姓梁【手动狗头】","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624105383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":336486,"ip_address":""},"score":379748,"extra":""}]},{"author":{"id":1043401,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/eb/c9/b1b233cf.jpg","nickname":"小伟","note":"","ucode":"B631E56A112BDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173421,"discussion_content":"同意，常用的架构图、时序图和类图","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1581853331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341166,"discussion_content":"写的真心不错，非常棒","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610335179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242573,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/cd/3890be04.jpg","nickname":"小川","note":"","ucode":"D462222DDBB978","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333155,"discussion_content":"写的非常好，谢谢。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607445165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910657,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/27/81/27c9d811.jpg","nickname":"高燕军","note":"","ucode":"AF31DDD0EE08BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584341,"discussion_content":"想知道做设计不先做数据库设计，那应该先做啥嘞？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660780454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962932,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cqdrEzhcZ54ibGbf3rjuHCesA6otluIKn9BR9uESN8E8b9nbcjX6xy8UmlictdLdp62dqNofHr5J5138D2Q9yOvw/132","nickname":"Geek_949f5e","note":"","ucode":"C771E35F26B718","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560323,"discussion_content":"醍醐灌顶","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649257950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347168,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Rf6mwic4bGT4qtaN0acF5ShVsNyxOIUZc0pXfwdquCoibAxWuN6O6UL9KFSohqOR6fMmbm5nr23MlHelwW0BKrCg/132","nickname":"muyu","note":"","ucode":"DB86E1D49308D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331662,"discussion_content":"可以转发下吗?当做经验保存着","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606923385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1258209,"avatar":"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg","nickname":"段启超","note":"","ucode":"164CF3018071B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2347168,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Rf6mwic4bGT4qtaN0acF5ShVsNyxOIUZc0pXfwdquCoibAxWuN6O6UL9KFSohqOR6fMmbm5nr23MlHelwW0BKrCg/132","nickname":"muyu","note":"","ucode":"DB86E1D49308D0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347427,"discussion_content":"可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612230656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331662,"ip_address":""},"score":347427,"extra":""}]},{"author":{"id":1612120,"avatar":"https://static001.geekbang.org/account/avatar/00/18/99/58/012da9ad.jpg","nickname":"于聪","note":"","ucode":"DFB32F9FE5A6C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194102,"discussion_content":"大佬：‘’年初的时候误打误撞的学了一段时间的DDD‘’，看的什么资料，我也想学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583191777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1451910,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep3DicN9rHZiblqUmR1icKl5FoSJnibSibkdm2nHaibDwDatI3G9iaib5e7FQ0fJgiahR5VEqLFh8ZQBFmdBzw/132","nickname":"追风少年刘全有","note":"","ucode":"A727759687C963","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1612120,"avatar":"https://static001.geekbang.org/account/avatar/00/18/99/58/012da9ad.jpg","nickname":"于聪","note":"","ucode":"DFB32F9FE5A6C9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208862,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584585203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":194102,"ip_address":""},"score":208862,"extra":""},{"author":{"id":1055722,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1b/ea/4f5661c6.jpg","nickname":"牛头人","note":"","ucode":"DABDEF4F32A812","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1451910,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep3DicN9rHZiblqUmR1icKl5FoSJnibSibkdm2nHaibDwDatI3G9iaib5e7FQ0fJgiahR5VEqLFh8ZQBFmdBzw/132","nickname":"追风少年刘全有","note":"","ucode":"A727759687C963","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217762,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585579457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":208862,"ip_address":""},"score":217762,"extra":""},{"author":{"id":1258209,"avatar":"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg","nickname":"段启超","note":"","ucode":"164CF3018071B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1451910,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep3DicN9rHZiblqUmR1icKl5FoSJnibSibkdm2nHaibDwDatI3G9iaib5e7FQ0fJgiahR5VEqLFh8ZQBFmdBzw/132","nickname":"追风少年刘全有","note":"","ucode":"A727759687C963","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273177,"discussion_content":"DDD的资料不太多，简单一点的可以看  《实现领域驱动设计精粹》，也有开山之做《领域驱动设计，软件复杂性应对之道》","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1590418168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":208862,"ip_address":""},"score":273177,"extra":""}]},{"author":{"id":1528931,"avatar":"https://static001.geekbang.org/account/avatar/00/17/54/63/3a3f7d4c.jpg","nickname":"Giraffe","note":"","ucode":"2F272FFD6CD0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130849,"discussion_content":"学习学习，很有启发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578799897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1743953,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9c/51/76fcc9cd.jpg","nickname":"李杰","note":"","ucode":"E177762621E11E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53392,"discussion_content":"你的路还很长","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574164826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2432026,"avatar":"","nickname":"Geek_5a9dc0","note":"","ucode":"81B464DE3EAC26","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1743953,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9c/51/76fcc9cd.jpg","nickname":"李杰","note":"","ucode":"E177762621E11E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373637,"discussion_content":"你挺叼的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620808626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":53392,"ip_address":""},"score":373637,"extra":""}]}]},{"had_liked":false,"id":147468,"user_name":"帆大肚子","can_delete":false,"product_type":"c1","uid":1529040,"ip_address":"","ucode":"3DB11DB2FA1802","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/d0/4e1fc664.jpg","comment_is_top":false,"comment_ctime":1572865531,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1315832858107","product_id":100039001,"comment_content":"函数是相对比较小的可复用单位<br>面向对象把可复用单位提升到类层次<br>设计模式把可复用单位提升到框架层次","like_count":307,"discussions":[{"author":{"id":1337016,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/b8/ece79234.jpg","nickname":"王智","note":"","ucode":"37D2AD591C1AEC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535064,"discussion_content":"“设计模式把可复用单位提升到框架层次”这点能举个例子吗？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638344648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412499,"discussion_content":"精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636193487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1612666,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9b/7a/78dde0a2.jpg","nickname":"克一","note":"","ucode":"1C9F8229B5739A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294395,"discussion_content":"总结的到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595864462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147522,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1572868046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"293630644174","product_id":100039001,"comment_content":"第二题，文中已经给出答案了?<br>主要是因为面向对象编程因为具有丰富的特性(封装抽象继承多态)，可以实现很多复杂的设计思路，<br>是很多设计原则、设计模式等编码实现的基础。","like_count":68},{"had_liked":false,"id":148313,"user_name":"于留月","can_delete":false,"product_type":"c1","uid":1048918,"ip_address":"","ucode":"DE3516198CF1B2","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/56/03fb63d9.jpg","comment_is_top":false,"comment_ctime":1572972872,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"233501206856","product_id":100039001,"comment_content":"个人认为重构对提高代码质量最有效，原因：<br>重构的基础就是面向对象、设计原则、设计模式、编程规范；<br>重构是一个持续的过程，能够兼顾项目进度、项目开发效率和项目质量，既可以避免前期的过度设计，又能避免后期代码腐化，从而保证代码的质量不下降以致不断提高代码质量；<br>通过单元测试等相关手段，保证重构的正确性<br>重构可从代码层次、项目阶段、开发周期、人员规模等不同纬度进行<br><br>其他提高代码质量的方法：<br>阅读高质量框架代码，先模仿；<br>代码Review，定期总结；<br>技术分享，倒逼输出，看了、做了都不如说给比人听更有效果；<br>工具检查（如lint、leakcanary等），开发过程中避免常识性错误和隐藏问题；<br><br>为什么它在标题中会特意提到“面向对象”呢？<br>因为设计原则、设计模式实现大部分都是基于面向对象的特性（封装、抽象、继承、多态）实现的","like_count":54,"discussions":[{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569046,"discussion_content":"可维护性，复杂度度量工具，这个定量的，比较好操作\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651299494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151674,"user_name":"陈拾柒","can_delete":false,"product_type":"c1","uid":1473069,"ip_address":"","ucode":"22213E2FA5143A","user_header":"https://static001.geekbang.org/account/avatar/00/16/7a/2d/e3a5c52e.jpg","comment_is_top":false,"comment_ctime":1573778514,"is_pvip":false,"replies":[{"id":"58339","content":"嗯嗯，加餐里有讲到的。","user_name":"作者回复","comment_id":151674,"uid":"1190123","ip_address":"","utype":1,"ctime":1573785659,"user_name_real":"王争"}],"discussion_count":5,"race_medal":0,"score":"212027176018","product_id":100039001,"comment_content":"再好的理论，应用不到实际中也是白费。所以对于提升代码质量，最有效的是编码规范，其次是设计原则，再次是代码重构，最后才是面向对象和设计模式。<br>整个排序是按照我理解的难易程度来进行的。一般一个项目都是多人开发，多人并行开发中，考虑到团队中技术水平不一，保持代码质量最好的方式就是先制定编码规范，大家最容易达成一致并遵守。其次是设计原则，因为它相对来讲更明确，违反设计原则基本等于硬伤，更容易得到认同。代码重构是需要长期去做的，甚至不是在开发过程中而是在维护过程中去做的，所以排在第三位。后面两项更多的要考虑实际情况，不同水平的人甚至相同水平的人都会有自己不同的理解，比较难以达成统一，项目排期足够还好，一旦排期不足，很可能在当时没那个成本去谈论这些。<br><br>第二个问题老师已经回答了，因为面向对象的特性是其他的基石。<br><br>建议老师在后续课程中，除了讨论如何提升自己的代码质量，也讨论一下在一个多人团队中如何提升团队的代码质量，有哪些比较好的手段可以去应用。包括在项目排期比较紧的时候，可以有哪些方式去保证代码质量。","like_count":49,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474572,"discussion_content":"嗯嗯，加餐里有讲到的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573785659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1490169,"avatar":"https://static001.geekbang.org/account/avatar/00/16/bc/f9/f4345ea6.jpg","nickname":"聆听","note":"","ucode":"D7232626C6394D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580542,"discussion_content":"理论指导实践 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658239363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2942404,"avatar":"","nickname":"FOCUS","note":"","ucode":"C1AD031F155EFE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575693,"discussion_content":"说的实在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655028285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2710546,"avatar":"https://static001.geekbang.org/account/avatar/00/29/5c/12/0eef6a4b.jpg","nickname":"壹零贰零","note":"","ucode":"53DC22F45FC2A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385198,"discussion_content":"十分赞同，说的太好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626941767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622209,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c0/c1/414d5d1b.jpg","nickname":"_yh葱","note":"","ucode":"FA899711E91113","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190234,"discussion_content":"感同身受，还是以落地为主导去应用，特别是团队","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582907193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147336,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1572859766,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"212026257270","product_id":100039001,"comment_content":"建议和左耳的程序员练级攻略结合起来一起读。<br>上述道理 ，知易行难，一起加油。","like_count":49,"discussions":[{"author":{"id":1077387,"avatar":"https://static001.geekbang.org/account/avatar/00/10/70/8b/89b06343.jpg","nickname":"JustinLiu","note":"","ucode":"D571AD2910799B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47742,"discussion_content":"谢谢建议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573400260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1417176,"avatar":"https://static001.geekbang.org/account/avatar/00/15/9f/d8/62030082.jpg","nickname":"浅夏","note":"","ucode":"8E1F54025C865A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44573,"discussion_content":"阔以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572956694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1309089,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f9/a1/0396e1fb.jpg","nickname":"镞砺括羽","note":"","ucode":"EC4CD773CA06EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43672,"discussion_content":"知易行难👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572883543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148204,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1572958011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"130421976891","product_id":100039001,"comment_content":"最近一直在思考一个问题，就是我们在开发过程中，写好代码，应该是一个程序员必备的基本功。这个好字就是这老师说的高质量的代码，以前一直觉得要追求最热最新的技术，不然就会被淘汰。其实忘记了一个最基本的事情，怎么写好代码，写高质量的代码，这个才是我们开发过程中的重点，写好代码应该是一个合格的程序员必备的技能，毕竟写代码才是我们真真正正吃饭的家伙。老师出的这个专栏真的是太好了，教大家怎么样做好我们程序员最基本的事情。","like_count":30},{"had_liked":false,"id":148400,"user_name":"兔2🐰🍃","can_delete":false,"product_type":"c1","uid":1096984,"ip_address":"","ucode":"1FEDA044BB6CBD","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/18/2af6bf4b.jpg","comment_is_top":false,"comment_ctime":1573003218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"113242152914","product_id":100039001,"comment_content":"总结：提高代码质量的方法论，包含面向对象（基础），设计原则（指导方针），设计模式（三大类，提高扩展性），编程规范（提高可读性），重构（保证代码质量）。","like_count":26},{"had_liked":false,"id":148183,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1572955582,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"104652170686","product_id":100039001,"comment_content":"看起来都明白，讲起来都不清","like_count":24,"discussions":[{"author":{"id":1247350,"avatar":"https://static001.geekbang.org/account/avatar/00/13/08/76/350f19ea.jpg","nickname":"听雨声淅沥","note":"","ucode":"C975EE69A5D103","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45877,"discussion_content":"使用的时候更加手足无措","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573093278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2567349,"avatar":"https://static001.geekbang.org/account/avatar/00/27/2c/b5/10141329.jpg","nickname":"杰良","note":"","ucode":"5DC1D1C58A4731","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369222,"discussion_content":"用费曼学习法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618977472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376913,"discussion_content":"😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622424420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1394410,"avatar":"https://static001.geekbang.org/account/avatar/00/15/46/ea/b86667b8.jpg","nickname":"王玄","note":"","ucode":"E54ABB340D1E49","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292488,"discussion_content":"不用担心，99%不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595243499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150127,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1573465493,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"91767778709","product_id":100039001,"comment_content":"设计原则<br>SOLID：<br>Single Responsibility Principle：单一职责原则：一个东西就一个功能<br>Open Closed Principle：开闭原则  修改的时候，要保留原来的功能<br>Liskov Substitution Principle：里氏替换原则：避免子类重写父类中已经实现的方法<br>Law of Demeter：迪米特法则 ：尽可能的少暴露自己的接口，能不 public 就不 public<br>Interface Segregation Principle：接口隔离原则   1.接口里不要有其它的功能，比如查一个订单的，你调个接口还查一遍用户，浪费数据库消耗2.不要影响到实现类，比如你突然throws异常<br>Dependence Inversion Principle：依赖倒置原则：尽可能使用接口或抽象类<br><br>DRY原则：Don&#39;t Repeat Yourself ，是指编程过程中不写重复代码，将能够公共的部分抽象出来<br><br>KISS：keep it simple、傻屌(s)<br>YAGNI:You Ain’t Gonna Need It.指的是只需要将应用程序必需的功能包含进来，而不要试图添加任何其他你认为可能需要的功能。比如绑个银行卡，就不要浪费时间来记录绑定时的验证码<br>设计模式<br><br>1. 创建型常用的有：单例模式、工厂模式（工厂方法和抽象工厂）、建造者模式。不常用的有：原型模式。<br>2. 结构型常用的有：代理模式、桥接模式、装饰者模式、适配器模式。不常用的有：门面模式、组合模式、享元模式。<br>3. 行为型常用的有：观察者模式、模板模式、策略模式、职责链模式、迭代器模式、状态模式。不常用的有：访问者模式、备忘录模式、命令模式、解释器模式、中介模式。<br><br>编程规范<br>命名等等那些东西，具体的可以看《阿里的JAVA规范》<br><br>代码重构 <br>ctrl+alt+M<br><br><br>原则是基础，模式是套路，规范是可读，重构是行为<br><br>1.目前我做的最有效也正在改的是规范，原则和模式都要大概，容易出错<br>2.用对象的原因，吧东西做成了对象，你就也有了操作对象，也就有了开始，","like_count":22,"discussions":[{"author":{"id":1604344,"avatar":"","nickname":"Geek_4373f4","note":"","ucode":"8F87306FD153D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385031,"discussion_content":"ctrl+alt+M是哪个IDE里的快捷方式，是什么意思呢，怎么就重构了呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626854890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1958147,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e1/03/f937e673.jpg","nickname":"🍀","note":"","ucode":"60E0AC2A55B63B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268463,"discussion_content":"?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589784233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147772,"user_name":"Yayu","can_delete":false,"product_type":"c1","uid":1058015,"ip_address":"","ucode":"5E7842458D8229","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","comment_is_top":false,"comment_ctime":1572885576,"is_pvip":false,"replies":[{"id":"57047","content":"后面会讲到，等讲到了就明白了","user_name":"作者回复","comment_id":147772,"uid":"1190123","ip_address":"","utype":1,"ctime":1572946436,"user_name_real":"王争"}],"discussion_count":10,"race_medal":0,"score":"65997395016","product_id":100039001,"comment_content":"面向对象的特征也未必包含“继承”这一点吧，比如 Go 语言就没有提供“继承”这个特性，取而代之的是，推荐使用“组合”。但不能说它不支持面向对象编程。那么我们在探讨“面向对象”这个范式时，需要更深刻的去思考“面向对象”的本质是什么。而不是用Java 中的概念来一以概之。希望王争老师参考。","like_count":15,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473302,"discussion_content":"后面会讲到，等讲到了就明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572946436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640930,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/MOdHDtqwCDfU2sicYMNh7BhcqWxrn9ROzsqCANwkqq0icKAATiaibEKwxib1kCc7tuBia5TCZq28sZicQc9Uwh7IM68Dg/132","nickname":"Geek_c8b9ac","note":"","ucode":"90AB8AD4894D66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46841,"discussion_content":"“面向对象的特征也未必包含“继承”这一点吧，比如 Go 语言就没有提供“继承”这个特性”\n\n第一句话是不是应该反过来说，继承确实是面向对象的特征没错，但Golang并非完全是面向对象语言(Golang官方自己承认的，因其缺乏继承)","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1573215962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118056,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0f/68/3696aae4.jpg","nickname":"雪痕","note":"","ucode":"1056F3B1D49973","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46228,"discussion_content":"发表一下自己的想法哈：组合是无法表达A is B这个含义的，体现在语音层面就是，不能将一个组合结构体(子类)赋值给一个被组合结构体(父类)类型的变量。但是需要多态的地方是需要这个特性的，目前Go语言是通过接口&#34;组合&#34;+结构体组合的方式来实现多态的，而接口&#34;组合&#34;本质上其实不是组合而是继承，因为子接口是可以赋值给父接口的，也就是可以表达A is B的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573133297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43985,"discussion_content":"我觉得也是，记得许式伟老师还专门讲过继承和组合的不同","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572920711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45048,"discussion_content":"期待王争老师的讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573001682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43985,"ip_address":""},"score":45048,"extra":""}]},{"author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44121,"discussion_content":"继承这个概念我觉得比较混，有时候接口也叫继承，extended也是继承。这个时候只要自己分清楚这个地方说的是什么就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572932428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45041,"discussion_content":"“混”意味着没有搞清楚。使用什么关键字是语言范畴，与面向对象概念无关。期待王争老师的讲解吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573001375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":44121,"ip_address":""},"score":45041,"extra":""},{"author":{"id":1234682,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/fa/1f5bf642.jpg","nickname":"未来的胡先森","note":"","ucode":"AFF193AC0E2E6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48660,"discussion_content":"接口的继承叫做实现，而在部分语言中将接口称为（协议），我觉得这个更直观一些，要想调用已经写好的方法必须遵守一致的协议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573519067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":44121,"ip_address":""},"score":48660,"extra":""}]},{"author":{"id":1053084,"avatar":"https://static001.geekbang.org/account/avatar/00/10/11/9c/4fd6ebe0.jpg","nickname":"白了少年头","note":"","ucode":"A65E00E05B23BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44018,"discussion_content":"维基百科里有面向对象的定义，里面专门介绍了面向对象的4个特性：封装、继承、多态、抽象。Go语言只是用另一种方式实现了面向对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572923196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1053084,"avatar":"https://static001.geekbang.org/account/avatar/00/10/11/9c/4fd6ebe0.jpg","nickname":"白了少年头","note":"","ucode":"A65E00E05B23BA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45046,"discussion_content":"那么 既然Go没有继承的实现了支持面向对象的编程，是不是是说，面向对象“四个特性”中的“继承”特性，并不是不可或缺的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573001655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":44018,"ip_address":""},"score":45046,"extra":""}]}]},{"had_liked":false,"id":148305,"user_name":"小学一年级","can_delete":false,"product_type":"c1","uid":1217230,"ip_address":"","ucode":"59B9805D7C2D92","user_header":"https://static001.geekbang.org/account/avatar/00/12/92/ce/9d24cb2c.jpg","comment_is_top":false,"comment_ctime":1572971252,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"61702513396","product_id":100039001,"comment_content":"设计原则是高手的内功，设计模式是少林，武当，峨眉派的武术套路，规范是招式 出拳还是横扫，重构是组合拳 融汇贯通各种组合，而想练好这些武功还要有扎实的基本功 面向对象。","like_count":15,"discussions":[{"author":{"id":1149022,"avatar":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","nickname":"scmath","note":"","ucode":"641023BB246C29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264433,"discussion_content":"设计模式是设计原则的细化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589326851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147640,"user_name":"lijun","can_delete":false,"product_type":"c1","uid":1116095,"ip_address":"","ucode":"69EC8B86211AD9","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/bf/49f385ec.jpg","comment_is_top":false,"comment_ctime":1572875551,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"61702417695","product_id":100039001,"comment_content":"有的时候业务复杂，代码就被业务牵着鼻子走，尤其是老项目，既存代码写的可读性差，但是时间紧任务重，能跑就行……哎","like_count":14,"discussions":[{"author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47980,"discussion_content":"多年的经验告诉我，遇到这种项目最好的办法就是赶紧跑，如果对项目重构，在初始阶段因为是看不到效果的，公司不乐意承担这种重构的成本，你重构完成的时候估计就是业务失去耐心的时候，最惨是这个时候换了个人在你基础上做事情，然后被业务奉为天人，自己辛苦栽的树，却免费给他人乘凉。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1573439628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1356225,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b1/c1/08cc53c0.jpg","nickname":"...","note":"","ucode":"D2E6EBA5E9B6F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44422,"discussion_content":"是在写完之后，马上看一遍重构，重复这个过程就好了。当你在原有的东西上修改的时候觉得看起来不舒服的时候也可以重构。并不是你需要花一个大版本去做这件事情，从小做起就好了，哪怕修改一个变量名，也可以说是重构。重构没有你想的那么复杂，也没有那么高大上。重构就是维以及改善代码的质量。其实遇到“代码就被业务牵着鼻子走”的时候可以多想想，再下手。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1572947771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1367043,"avatar":"https://static001.geekbang.org/account/avatar/00/14/dc/03/ad9574b3.jpg","nickname":"习兮习兮","note":"","ucode":"E616E924188CBA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45799,"discussion_content":"大多数存量代码晃眼一看都会有很多槽点，静下心来重构，你就能体会到最初设计者的思想","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1573087316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334327,"discussion_content":"是的,  有的项目过于紧急,导致没时间研究如何写出高质量代码","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607825291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1938739,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/95/33/7d4b08ec.jpg","nickname":"乐朦","note":"","ucode":"C5A666DB0521E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216460,"discussion_content":"程序员的无奈之处。多次遇到上午刚刚冒出一个想法，下午就讨论需求的可行性，晚上就着急上线的情况。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585453637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43528,"discussion_content":"给你个建议，完成后，立马低调重构（偷偷的干，打抢的不要），要有颗强大的心。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572879807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1532404,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIvUlicgrWtibbDzwhLw5cQrDSy2JuE1mVvmXq11KQIwpLicgDuWfpp9asE0VCN6HhibPDWn7wBc2lfmA/132","nickname":"a、","note":"","ucode":"590FE8DB111492","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43617,"discussion_content":"你这样是不行的，重构以后就需要测试人员，把你重构的代码全部都回归一遍，不然可能上线出bug","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1572882406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43528,"ip_address":""},"score":43617,"extra":""},{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1532404,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIvUlicgrWtibbDzwhLw5cQrDSy2JuE1mVvmXq11KQIwpLicgDuWfpp9asE0VCN6HhibPDWn7wBc2lfmA/132","nickname":"a、","note":"","ucode":"590FE8DB111492","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44084,"discussion_content":"有让你完成后立马就打包上线了？？？？代码功能完成只是第1步。那么着急对外展示干嘛？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572928569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43617,"ip_address":""},"score":44084,"extra":""}]}]},{"had_liked":false,"id":172796,"user_name":"王子瑞Aliloke有事电联","can_delete":false,"product_type":"c1","uid":1249400,"ip_address":"","ucode":"9ABE8E475E336B","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/78/29bd3f1e.jpg","comment_is_top":false,"comment_ctime":1579314551,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44528987511","product_id":100039001,"comment_content":"方法：<br>掌握心法（面向对象），内功（设计原则），招式（设计模式），经验（重构技巧和编程规范），常练习（写高质量代码），与人切磋（相互review）.<br>最近想学太极，总是练习武术。","like_count":10},{"had_liked":false,"id":147803,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1572905852,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"35932644220","product_id":100039001,"comment_content":"GoF的提出是针对解决面向对象编程中遇到的问题，所以书名中强调“面向对象”。It’s a book<br>of design patterns that describes simple and elegant solutions to specific problems<br>in object-oriented software design. ","like_count":8},{"had_liked":false,"id":178357,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1581668537,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27351472313","product_id":100039001,"comment_content":"从依赖关系上看，设计模式&amp;编码规范依赖设计原则，设计原则依赖面向对象 | 面向过程 | 函数式编程，也就是面向对象这种设计思想是基础，作为工程师，我们直接打交道的是设计模式和编码规范，这是我们落地设计原则和面向对象设计思想的地方，看问题抓本质，那么我们讲面向对象编程到底在讲什么呢？我的理解是通过封装、继承、多态和抽象这些特性完整表达一件事情，可以是名词也可以是动词。直观的例子是如何把大象装进冰箱这个案例，面向过程是1）打开冰箱；2）把大象装进去；3）把冰箱关上，依次完成这些过程就能把大象装进冰箱。好，我们看看面向对象怎么处理这个问题，1）冰箱你给我把门打开；2）冰箱你给我把大象装进去；3）冰箱你给我把门关上。看起来是否没啥区别，这里每个动作都多了执行者，也就是这里的冰箱，也就是冰箱会有三个功能：开门、装大象、关门，也就是每一个动作都必然会有一个执行者，执行者怎么产生呢？不就是对象本身么，冰箱是一个对象，大象也是一个对象，冰箱具有装大象的能力，怎么装呢，开门、装大象和关门啊！发现了么，面向对象隐藏了装大象的细节，冰箱的开门、装大象和关门都是对象本身的功能（方法），理解了面向对象后才能更好理解设计原则设计模式这些东西，这些都是一些写出高质量代码的经验总结，说白了就是套路，我理解设计原则可以帮助我们看懂一些开源框架的代码，学习Apache大佬们是怎么写代码的，从而内化为自己的能力。最后想说一点高质量代码的实践，多考虑异常和兜底场景，给代码留出足够的安全边际，所以说健壮性很重要啊","like_count":6},{"had_liked":false,"id":148855,"user_name":"不与三季人说","can_delete":false,"product_type":"c1","uid":1693164,"ip_address":"","ucode":"A3F03832309FDD","user_header":"https://static001.geekbang.org/account/avatar/00/19/d5/ec/3d6e7ea7.jpg","comment_is_top":false,"comment_ctime":1573095099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27342898875","product_id":100039001,"comment_content":"导读部分的最后一节课了，明白了编程思想、设计原则。设计模式。编码规范和重构的意思，之前也有了解，这次通过老师解读，理解变得更清晰了，有了面向对象的设计思想，才有了适合这种思想的设计原则，设计原则是设计系统和代码应该考虑的问题，在满足部分原则的情况下，针对具体的场景，有了设计模式，设计模式的出现就是为了最大可能的满足设计原则，至于编码规范，可以提高代码的可读性和不同程序员直接的一个约定一样的，没有规范不影响计算机运行程序，但是在项目交接和团队合作的时候会变得很麻烦，重构也是一个项目的必经阶段，好的代码重构起来也会很方便，而不是牵一发动全身。<br>提高代码质量的方法还有就是写注释吧，代码注释可以很大程度的增加可读性。<br>设计模式之所以加上面向对象，是因为设计模式是基于设计原则而设计出来的具体执行方法，而设计原则是根据设计思想衍生出的，设计思想是面向对象，所以才有了设计原则和设计模式。<br>编程思想就像是宪法，在宪法的基础上细化的法规就相当于设计原则，而设计模式就相当于条例，是具体的体现。","like_count":6},{"had_liked":false,"id":189735,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1584544305,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23059380785","product_id":100039001,"comment_content":"去年刚考过系统架构设计师，设计模式在这门高级软考中属于很重要的一块，我对各个模式现在就只能记得他们的名称和分类，至于深入的理解谈不上，更别提实际应用了，总知当时也只是为了应考，总算考过了值得庆幸。这次打算跟着老师好好学习。","like_count":5},{"had_liked":false,"id":148351,"user_name":"zachary","can_delete":false,"product_type":"c1","uid":1349192,"ip_address":"","ucode":"2559469DCF083F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/HRicO9C2gHpCxibedw0370AtpeqE9uo5kkBW4XCrsF9btibJPIq4vSribYdsjiaOFPK7YMfNmSSdIQlUMXGwgicTLTCg/132","comment_is_top":false,"comment_ctime":1572997603,"is_pvip":false,"replies":[{"id":"57178","content":"后面会讲到的，别急哈","user_name":"作者回复","comment_id":148351,"uid":"1190123","ip_address":"","utype":1,"ctime":1573026595,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"23047834083","product_id":100039001,"comment_content":"争哥，设计模式有三种类型：<br>创建型：这个好理解，就是用来创建对象的一些模式<br>结构型和行为型不好理解，结构体现在哪里？行为又体现在哪里？能否说的更具体点？","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473467,"discussion_content":"后面会讲到的，别急哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573026595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2140419,"avatar":"https://static001.geekbang.org/account/avatar/00/20/a9/03/ff4d791e.jpg","nickname":"Lucky","note":"","ucode":"8BBF890999ECE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302294,"discussion_content":"这是个好问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598872060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149174,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1573173314,"is_pvip":false,"replies":[{"id":"57473","content":"学了后面章节就明白了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573281298,"ip_address":"","comment_id":149174,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18753042498","product_id":100039001,"comment_content":"我看到设计原则中还有迪米特法则(Law of Demeter, LoD)，这个也是解决God类的一种方式。另外这个法则，好像跟组合复用相背呢。帮忙解释一下。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473761,"discussion_content":"学了后面章节就明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573281298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148648,"user_name":"vivi_lee","can_delete":false,"product_type":"c1","uid":1027680,"ip_address":"","ucode":"166D8CB1648300","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/UswOHxYIocRX8Lzhxbotte13bKzRhk9fexAXVzGeibljibY15g30PwolaDOQvQyKsBtJziaFasu67qVCU4fib5ZKIQ/132","comment_is_top":false,"comment_ctime":1573044395,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18752913579","product_id":100039001,"comment_content":"周末准备考架构师，才发现自己对这些理论理解有困难。同事提醒论文会考设计模式，刚好课程就出来了👻","like_count":4,"discussions":[{"author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294313,"discussion_content":"这还有考证吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595853148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082785,"avatar":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","nickname":"郭俊杰","note":"","ucode":"D328E5738A4413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261675,"discussion_content":"设计模式，选择是必考题，案例和论文是选考题，哥已过，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588991168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1851743,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/41/5f/b08562bf.jpg","nickname":"小麦VictorMak","note":"","ucode":"2331AD5B63B5D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1082785,"avatar":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","nickname":"郭俊杰","note":"","ucode":"D328E5738A4413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308396,"discussion_content":"也准备报考，备考过程能分享一下吗？谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600937870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":261675,"ip_address":""},"score":308396,"extra":""}]}]},{"had_liked":false,"id":149587,"user_name":"Geek_222ec6","can_delete":false,"product_type":"c1","uid":1736229,"ip_address":"","ucode":"9B5C085CEDFF95","user_header":"https://static001.geekbang.org/account/avatar/00/1a/7e/25/a6fd1326.jpg","comment_is_top":false,"comment_ctime":1573284162,"is_pvip":true,"replies":[{"id":"57500","content":"理解是对的。这个正常，一个好的命名确实要花点时间想的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573287081,"ip_address":"","comment_id":149587,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14458186050","product_id":100039001,"comment_content":"设计原则是指导设计模式的更抽象的理论（这么说应该对吧）<br><br>另外有个困惑就是在编码规范的时候，自我感觉英语还可以，但是函数，变量命名的时候经常会犯纠结症和强迫症。。。不知道怎么命名才好。<br><br>","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473909,"discussion_content":"理解是对的。这个正常，一个好的命名确实要花点时间想的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573287081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391199,"avatar":"","nickname":"卡趴开发部","note":"","ucode":"416C2824A68708","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48741,"discussion_content":"不知道怎么命名隐藏着要么英文不好要么职责不明确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573522492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148869,"user_name":"Geek_Spring","can_delete":false,"product_type":"c1","uid":1292572,"ip_address":"","ucode":"3F44EE152CB357","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erRavHNiaicxIIq5Pal1iadE4axG6ibbib6llpHBslhiahWDQ6tdE1IcWicFogfvuyfGoiayC51knA09UtQvQ/132","comment_is_top":false,"comment_ctime":1573096946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457998834","product_id":100039001,"comment_content":"其实这些概念都是老生常谈了，你要说是哪种好，哪种坏不见得有个标准答案，有的时候还是不得不违反这些原则去编程，真心希望跟着王老师能深究这其中的奥妙","like_count":3},{"had_liked":false,"id":148301,"user_name":"修缘","can_delete":false,"product_type":"c1","uid":1035476,"ip_address":"","ucode":"72AB60C1DC88C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/d4/f1f84a96.jpg","comment_is_top":false,"comment_ctime":1572970656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457872544","product_id":100039001,"comment_content":"编码规范和设计原则解决的是可读性和可维护性，而面向对象是一种设计方法或者说是一种抽象思维，更符合人类的思考方式，所以它们的属性偏向于静态的概念；代码重构和设计模式是一种动态的概念，是具体的执行方法，当然代码重构本身就包含了：编码规范,设计原则,设计模式。<br>另外，面向对象和设计模式本身就有着紧密的联系，设计模式是解决特定问题的有效方法，是经验的总结。<br>","like_count":3},{"had_liked":false,"id":147749,"user_name":"刘冬","can_delete":false,"product_type":"c1","uid":1401797,"ip_address":"","ucode":"982676C96C0EB4","user_header":"https://static001.geekbang.org/account/avatar/00/15/63/c5/a85ade71.jpg","comment_is_top":false,"comment_ctime":1572883192,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14457785080","product_id":100039001,"comment_content":"初级：代码规范 面向对象<br>中级：设计原则 设计模式<br>高级：设计模式 重构<br><br>oop的基本特性（封装 抽象 继承 多态）和design pattern的需求高度匹配","like_count":3,"discussions":[{"author":{"id":1116862,"avatar":"","nickname":"leior","note":"","ucode":"82AEBD0D254362","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143164,"discussion_content":"感觉也可以这样评价程序员\n--- 初级程序员： 代码规范，能做到面向对象\n--- 中级程序员：能应用设计原则和设计模式\n--- 高级程序员： 能应用设计模式完成重构\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579492970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253852,"user_name":"探5065","can_delete":false,"product_type":"c1","uid":1003793,"ip_address":"","ucode":"3C8E0584F10127","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFY51ATlJvLYrcqnm2tnAfdRIYDUtWa8zQQz4opFicFG8lwUMEQPWasWNP92L0y1yPiaWLbkmBxVQQ/132","comment_is_top":false,"comment_ctime":1602919433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10192854025","product_id":100039001,"comment_content":"个人认为，如果将代码比作是武术，面向对象就像是门派的宗旨，设计原则其内功心法，设计模式是其套路招式，编码规范是其门规，持续重构就是在不断练习改进。","like_count":2},{"had_liked":false,"id":151904,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1573809957,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10163744549","product_id":100039001,"comment_content":"1：针对第一个问题，我觉得重构挺重要的。看过《Head First设计模式》，以及今天老师也说了，设计模式其实不是滥用，是有需要的时候用，不能过度使用。那这些判断从哪来，就是从一步步的重构而来。程序和功能都是从易到难，从简单到复杂，这就形成大家总结的设计模式，都是无数前人的经验总结。<br><br>因为编码经验还不够，所以除了老师的这些讲解，我暂时还没想到其他更多的。<br><br>2：面向对象，真是个神器的东西。因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式编码实现的基础。所以，很多时候编程就是对面向对象一个深刻运用的过程，我师傅就和我说，Java开发，一切皆对象，我觉得到现在为止，还是挺在理的","like_count":2},{"had_liked":false,"id":149829,"user_name":"学好习，做好人","can_delete":false,"product_type":"c1","uid":1205294,"ip_address":"","ucode":"C991643DB458E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/2e/e70a317a.jpg","comment_is_top":false,"comment_ctime":1573396540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163331132","product_id":100039001,"comment_content":"接口是对行为的抽象，是某一类行为所具有的共性或者需要遵循的标准，比如策略模式，定义了一组不同方式方法的抽象实现，而抽象类是是对公共行为的一种复用，将相同的逻辑，行为复用在抽象类中，比如模板模式，定义了公共实现，不同的实现延迟到子类当中去<br>个人感觉面向对象是一切设计原则设计模式的基础，依赖倒置与里氏替换依赖的的也是面向对象的抽象与多态，最开始上学的时候其实对编程感觉是懵懂的，也看过设计模式，当时看懂了，其实不会用，后来工作了才发现，当你自己主动的注意自己的代码，自己的逻辑，希望写的代码可复用，简单高效的时候，回过头来，这些已经是设计原则，设计模式了，在读这些文章或者书籍感觉更有味道了","like_count":2},{"had_liked":false,"id":149464,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1573225054,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"10163159646","product_id":100039001,"comment_content":"Day004 03<br>关于编码规范：<br>阿里巴巴 java 开发规范，官方已提供了 idea、eclipse 插件，详情可以访问官方链接：https:&#47;&#47;github.com&#47;alibaba&#47;p3c&#47;blob&#47;master&#47;README.md<br><br>此外还有FindBugs、PMDPlugin、CheckStyle<br>、JavaNCSS、sonarlint，可以多管齐下，为你保驾护航。","like_count":2},{"had_liked":false,"id":149105,"user_name":"阿玛铭","can_delete":false,"product_type":"c1","uid":1100703,"ip_address":"","ucode":"DBF948D82ACBE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/9f/ee68858c.jpg","comment_is_top":false,"comment_ctime":1573141693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163076285","product_id":100039001,"comment_content":"模拟一下老师的思路：1.最终目的why：提高代码质量。拆分目的后就得到代码质量的评价纬度what：易维护、易读、易扩展、灵活、简单、易测试。到这里还是只能做到定性分析，不足以定量分析，所以指出评价标准的主观性。 2. 明确定义、概念，理清它们之间的联系：编程范式――面向对象和其它，设计原则，设计模式，编码规范，重构。为达到提高代码质量的目的how，提出面向对象这一编程范式（核心域），再在核心域上提炼出一些普遍适用指导思想（设计原则），然后是适用特定场景的具体方法（设计模式），编码规范则属于由来已久的具体方法〔粒度很细〕，对各种范式而言是通用的。<br>       其它how: 测试驱动，CodeReview,工具支撑: 编码规范插件，sonar，JUnit,mock,jcoco,代码分层及目录规范，spring initializer等脚手架。<br>      可读性指出高质量代码的侧重点是面向人的，不是面相机器的。所以提升团队的基础能力才能从根本上解决代码质量差的问题。<br>      听过软件开发的根本价值在于应对各种变化的需求，提高代码质量也是应对变化的一部分重要内容。希望能从本课程中学到更多精髓。","like_count":2},{"had_liked":false,"id":148241,"user_name":"浅夏","can_delete":false,"product_type":"c1","uid":1417176,"ip_address":"","ucode":"8E1F54025C865A","user_header":"https://static001.geekbang.org/account/avatar/00/15/9f/d8/62030082.jpg","comment_is_top":false,"comment_ctime":1572962657,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10162897249","product_id":100039001,"comment_content":"个人觉得首先应该提高代码可读性，然后在应用相关的面向对象思想，设计原则，设计模式等去重构","like_count":2},{"had_liked":false,"id":147979,"user_name":"胖大海","can_delete":false,"product_type":"c1","uid":1002290,"ip_address":"","ucode":"E9994CC28D49CB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/32/c067cd2f.jpg","comment_is_top":false,"comment_ctime":1572924749,"is_pvip":false,"replies":[{"id":"57046","content":"单元测试是一个非常有效的手段，后面的章节中会讲到。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572946202,"ip_address":"","comment_id":147979,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10162859341","product_id":100039001,"comment_content":"对于重构，我有话（槽）要说（吐）：我是做企业项目外包的，我们给客户交付的项目大多在客户方面庞杂缺少弹性的IT合规性要求和业务快速变动的现实的双重夹击下痛苦地演进着。重构意味着不改变系统已有功能的情况下优化项目代码，但面临着合规性和流程的限制导致这类无业务功能更新的发布不会被甲方IT放行；另一方面不断的新需求的变更又不断地劣化着已有代码的系统架构以及业务代码的设计。不知道有没有面临同样问题的同学，在无法改变现有大环境的前提下进行有限的优化？我们现在能做的也就是在每一次追加的新需求变更时进行小幅度的改善，但这无法受到任何工作流程的保护和管理，仅能靠程序员个人的良心来做。另外，如何保证重构不会因为代码结构的变化引入新的bug呢？单元测试以及覆盖率较高的自动化测试吗？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473360,"discussion_content":"单元测试是一个非常有效的手段，后面的章节中会讲到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572946202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1356225,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b1/c1/08cc53c0.jpg","nickname":"...","note":"","ucode":"D2E6EBA5E9B6F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44427,"discussion_content":"动的比较大的话接口测试就行了，只要不改变现有程序的行为就好了啊。《重构》这本书里面对重构的方法讲的比较清晰。其实都是先改善代码的可读性，然后理解了之后在去继续重构，重构也可以帮助理解代码的意义。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572948107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245901,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1599104262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894071558","product_id":100039001,"comment_content":"【要点】<br>1、面向对象<br>封装、抽象、继承、多态<br>面向对象编程VS面向过程编程<br>面向对象分析、设计、编程<br>接口VS抽象类<br>基于接口而非实现编程<br>多用组合少用继承<br>贫血模型和充血模型<br>2、设计原则<br>SOLID原则-SRP单一职责原则<br>SOLID原则-OCP开闭原则<br>SOLID原则-LSP里氏替换原则<br>SOLID原则-ISP接口隔离原则<br>SOLID原则-DIP依赖倒置原则<br>DRY原则、KISS原则、YAGNI原则、LOD法则<br>3、编程规范<br>20条最快速改善代码质量的编程规范<br>4、代码重构<br>目的、对象、时机、方法<br>单元测试和代码的可测试性<br>大重构(大规模高层次)<br>小重构(小规模低层次)<br>5、设计模式<br>创建型<br>常用：单例模式、工厂模式(工厂方法和抽象工厂)、建造者模式<br>不常用：原型模式<br>结构型<br>常用：代理模式、桥接模式、装饰着模式、适配器模式<br>不常用：门面模式、组合模式、享元模式<br>行为型<br>常用：观察者模式、模板模式、策略模式、职责链模式、迭代器模式、状态模式<br>不常用：访问者模式、备忘录模式、命令模式、解释器模式、中介模式<br>【思考】<br>1、编程规范对提高代码最有效，编程规范在一个公司属于编程铁律，必须严格执行，以此为基础，之后才是面向对象、设计原则、设计模式。如果编码规范都不一致，代码可读性、维护性都会大打折扣。<br>2、面向对象是大部分设计模式实现的基础。面向对象更适合对现实事物的抽象和建模，以此为基础相关的设计模式才能玩得转。","like_count":1},{"had_liked":false,"id":241295,"user_name":"熊丽娟","can_delete":false,"product_type":"c1","uid":2044711,"ip_address":"","ucode":"F374BA5540379D","user_header":"","comment_is_top":false,"comment_ctime":1597240164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892207460","product_id":100039001,"comment_content":"面对对象是身体素质 设计模式是招式 设计原则是内力","like_count":1},{"had_liked":false,"id":237709,"user_name":"三哥","can_delete":false,"product_type":"c1","uid":1189582,"ip_address":"","ucode":"12A4ED23301EBB","user_header":"https://static001.geekbang.org/account/avatar/00/12/26/ce/0b8b98d4.jpg","comment_is_top":false,"comment_ctime":1595931513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890898809","product_id":100039001,"comment_content":"个人认为面试对象的设计思想对提高代码的质量最有效，对事物抽象能力的强弱能能直接影响到设计模式和设计原则，从而影响到整个程序的设计。就像欧阳锋练的九阴真经的心法都是错的，怎么可能练到大成，个人愚见。","like_count":1},{"had_liked":false,"id":216428,"user_name":"慕高迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/ad3127e0.jpg","comment_is_top":false,"comment_ctime":1589257422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884224718","product_id":100039001,"comment_content":"总结成了一张思维导图：https:&#47;&#47;gitee.com&#47;arch-aims&#47;database&#47;blob&#47;master&#47;Design%20Pattern&#47;%E7%BC%96%E7%A8%8B%E6%96%B9%E6%B3%95%E8%AE%BA.xmind","like_count":1},{"had_liked":false,"id":174577,"user_name":"Calios","can_delete":false,"product_type":"c1","uid":1004758,"ip_address":"","ucode":"B1AA60164DC42A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/d6/124e2e93.jpg","comment_is_top":false,"comment_ctime":1580283488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875250784","product_id":100039001,"comment_content":"回想起《小强升职记：时间管理故事书》中的提到，我们的工作和人生都可以划分成六个高度来检视：原则（五万英尺）、愿景（四万英尺）、目标（三万英尺）、责任范围（两万英尺）、任务（一万英尺）、下一步行动（跑道）；而对应“如何编写高质量的代码”这件事，自上而下、从抽象到具体实现也可以分成这样几个部分：设计思想（面向对象 vs 面向过程）、设计原则、设计模式、编码规范和重构技巧。这两者，实在是有异曲同工之妙。","like_count":1},{"had_liked":false,"id":170514,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1578623772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873591068","product_id":100039001,"comment_content":"问题2:<br>因为文章提过，面向对象的思想可以方便的实现这些设计模式和原则。<br><br>其实，我理解最关键的面向对象的思想符合人类思维","like_count":1},{"had_liked":false,"id":170513,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1578623683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873590979","product_id":100039001,"comment_content":"问题1:<br>1.1<br>编码规范最直接有效，其他的都得学习理解😂。<br>我认为团队开发，编码规范是硬标准，思想、原则、模式都可能因人而异（理解不同，实践不同）。<br>1.2<br>做业务需求之前，画出设计图，写出简单的设计文档，并与人讨论，这样能够帮助自己思考弥补不足。","like_count":1},{"had_liked":false,"id":165334,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1577202102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872169398","product_id":100039001,"comment_content":"我觉得设计原则最有用，<br>面向对象思想是基础，不积跬步无以至千里，基础不牢，寸步难行。是必须要掌握的。<br>设计模式是一类问题的通用解法，总结出来的解决方案，算是武功招式。<br>编码规范是军规，每个厂，甚至团队规范都不尽相同，目的是要解决统一风格，降低理解交流成本。<br>重构，持续重构，是一种意识，打怪升级的路径。<br>设计原则是魂，基于原则才能不变应万变，无招胜有招，四两拨千斤。 <br><br>GOF 解决的是面向对象领域内的设计模式问题，所以圈定了范围，我相信面向过程或函数式编程也有自己的套路和沉淀的通用的解决方案。","like_count":1},{"had_liked":false,"id":156139,"user_name":"奇小易","can_delete":false,"product_type":"c1","uid":1171151,"ip_address":"","ucode":"E06B4DFB5352BB","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/cf/ef2e0501.jpg","comment_is_top":false,"comment_ctime":1574823672,"is_pvip":true,"replies":[{"id":"59974","content":"有code readability认证，需要每个人通过","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574834456,"ip_address":"","comment_id":156139,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869790968","product_id":100039001,"comment_content":"我觉得编程规范是最有效的一种方法，选择它就表示认可了可读性是代码质量最核心的一点。因为它不仅好学、好上手，用起来效果还明显。不像其它的方法对个人经验的依赖性强。还有个例子证明它的重要性，听说Google入职前几个月最先做的事情是把他们的编程规范熟记于心。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476004,"discussion_content":"有code readability认证，需要每个人通过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574834456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152327,"user_name":"皮邱～","can_delete":false,"product_type":"c1","uid":1103150,"ip_address":"","ucode":"5D3E6247798949","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/2e/be47ac55.jpg","comment_is_top":false,"comment_ctime":1573973052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868940348","product_id":100039001,"comment_content":"面对对象是基础，设计原则是指导思想，设计模式是指导思想下理论诠释，编码规范和重构是实践和运用。","like_count":1},{"had_liked":false,"id":149803,"user_name":"条","can_delete":false,"product_type":"c1","uid":1203836,"ip_address":"","ucode":"6F8679175256E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/7c/94af3f5e.jpg","comment_is_top":false,"comment_ctime":1573382885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868350181","product_id":100039001,"comment_content":"1.对于一些刚接触面向对象语言的同学，有面向对象的思维尤为重要。对于有了一定开发基础的同学，可能编程规范是他们亟需了解的。对一些老同学而言，设计原则、设计模式、什么样的代码需要重构、怎样把代码重构的更合理是他们最关注的的。<br>2.还没有看过这本书，但是感觉标题提到了“设计模式”，应该是这种思想贯穿着整本书。","like_count":1},{"had_liked":false,"id":149604,"user_name":"Arthur","can_delete":false,"product_type":"c1","uid":1151989,"ip_address":"","ucode":"B6CD75EACF6AF4","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/f5/32c9fc77.jpg","comment_is_top":false,"comment_ctime":1573289204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868256500","product_id":100039001,"comment_content":"写单元测试是有效提高代码质量的一种方式。并且你在写出能够可测试，易于测试的代码的时候，已经在不断的修改你的代码。并且在编写各种测试用例的时候，你已经将各种边界条件或者特殊情况已经考虑进去了。最终的代码覆盖率也能提醒你哪些部分是还没有经过测试的。<br>所以，写单元测试吧！","like_count":1},{"had_liked":false,"id":149562,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1573273671,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5868240967","product_id":100039001,"comment_content":"设计模式是帮助梳理对象之间的关系的，帮助重用复用对象，所以才强调“对象”","like_count":1},{"had_liked":false,"id":149272,"user_name":"！null","can_delete":false,"product_type":"c1","uid":1242483,"ip_address":"","ucode":"4E5B7922980397","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/73/f7d3a996.jpg","comment_is_top":false,"comment_ctime":1573181335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868148631","product_id":100039001,"comment_content":"1.设计原则比设计模式有效。模式是原则的实现，原则是内功。但直接说原则不好懂，通过设计模式思考实现了哪个原则，进而对原则有所理解。当原则弄明白，模式就没啥用了，灵活运用原则，无招胜有招。<br>2.面向对象是一种思想而不是仅仅是语言。面向对象的语言有的人写出来和面向过程没啥区别。反过来c是面向过程语言，但是如果能够用好结构体和指针，尤其是函数指针，也可以写的面向对象，也可以用设计原则和设计模式。","like_count":1},{"had_liked":false,"id":148475,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1573015855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867983151","product_id":100039001,"comment_content":"1.设计模式，编程规范，代码重构。其他的我认为 架构分层的合理也可以间接的提高代码质量。还有就是命名统一，比如查询单个都get*，列表都list*等，当然这也属于编程规范，我认为最主要的还是代码重构，但这四个字要想持续做下去做起来比登天还难！<br>2.万物皆对象，设计模式脱离不了对象，正是因为万物皆对象，才使得代码耦合度没那么高，才使得设计模式得以炉火纯青","like_count":1},{"had_liked":false,"id":148284,"user_name":"大豆腐","can_delete":false,"product_type":"c1","uid":1244050,"ip_address":"","ucode":"1E8D4F938F9AEA","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/92/e3b0e597.jpg","comment_is_top":false,"comment_ctime":1572968062,"is_pvip":false,"replies":[{"id":"57096","content":"我后面的文章会讲到的 别急","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572993370,"ip_address":"","comment_id":148284,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867935358","product_id":100039001,"comment_content":"面向对象的特性，有些地方说是4个，有些地方说是3个，一脸懵逼","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473451,"discussion_content":"我后面的文章会讲到的 别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572993370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148151,"user_name":"liliumss","can_delete":false,"product_type":"c1","uid":1333094,"ip_address":"","ucode":"A52AC5042F3115","user_header":"https://static001.geekbang.org/account/avatar/00/14/57/66/e57bdb18.jpg","comment_is_top":false,"comment_ctime":1572950357,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5867917653","product_id":100039001,"comment_content":"很想听下fp有没对应的“设计模式”","like_count":1,"discussions":[{"author":{"id":1132337,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","nickname":"小晏子","note":"","ucode":"3AAA6FB5ACB6AE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47118,"discussion_content":"有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573273900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023731,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9e/f3/9c067137.jpg","nickname":"Rocky","note":"","ucode":"CA33ACBDE8B87B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44875,"discussion_content":"我也想问这个问题，在函数式编程中，有多少设计模式是适用的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572970096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147989,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1572925155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867892451","product_id":100039001,"comment_content":"话题1：在说如果提高代码质量之前，要定义清楚什么事代码质量。个人理解，高质量的代码是容易读懂的、代码结构清晰的、逻辑思路缜密的、适度抽象的、书写规范的及测试友好的。那么回头再看如何提高代码质量，就可以从改善这几点入手。除王老师文中讲到的，我觉得写代码前做到逻辑思路缜密也很重要。细细说来，如果业务思路清楚了，那么现有几个业务分支就清楚了，以后扩展时可能的业务分支也清楚了，那么定义几个类和方法、他们之间的关系、用什么模式等就清楚了，说白了就是代码框架就有了，其实也就涵盖了可读性、可扩展性、可复用性和简洁性。之后，就是在每个方法里做CRUD了。所以说，就像算法一样，思路是核心，有了明确的思路，其他的经过练手，自然就水到渠成了。借用国庆举个栗子，思路是DF-41的控制芯片，火箭发动机等助推器是设计模式，分导弹头是业务逻辑，控制芯片决定了助推器的点火和分离，助推器决定了分导弹头能否发挥出最大作用。","like_count":1},{"had_liked":false,"id":147922,"user_name":"划时代","can_delete":false,"product_type":"c1","uid":1061454,"ip_address":"","ucode":"9554CE2F83B77F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2o1Izf2YyJSnnI0ErZ51pYRlnrmibqUTaia3tCU1PjMxuwyXSKOLUYiac2TQ5pd5gNGvS81fVqKWGvDsZLTM8zhWg/132","comment_is_top":false,"comment_ctime":1572919401,"is_pvip":false,"replies":[{"id":"57044","content":"哈哈 感觉你说的继承、多态、封装、组合可以任意组合起来用啊。并没有说面向对象就是继承+多态，基于对象就是封装+组合呀","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572945811,"ip_address":"","comment_id":147922,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5867886697","product_id":100039001,"comment_content":"老师我有疑问，在没有充分必要的情况下是不是不采用面向对象编程（继承+多态），大多数情况下使用基于对象的方式进行编程（封装+组合）？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473340,"discussion_content":"哈哈 感觉你说的继承、多态、封装、组合可以任意组合起来用啊。并没有说面向对象就是继承+多态，基于对象就是封装+组合呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572945811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44124,"discussion_content":"如果概念比较宽泛接口也是一种继承方式，所以说还是继承，多态，封装。面向接口编程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572932749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147891,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1572917393,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5867884689","product_id":100039001,"comment_content":"1.面向对象，设计原则，内功心法，功力越深厚，设计模式，编程范式应用就越得心应手和自然而然。生搬硬套甚至会适得其反，不但自己觉得别扭，别人也看不懂","like_count":1},{"had_liked":false,"id":147846,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1572913739,"is_pvip":false,"replies":[{"id":"57045","content":"后面会讲到，别急~","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572945965,"ip_address":"","comment_id":147846,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5867881035","product_id":100039001,"comment_content":"请问一下老师面向对象编程，面向过程编程，面向对象设计这些词中的“面向”是啥意思？怎样做就算“面向”了呢？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473322,"discussion_content":"后面会讲到，别急~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572945965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141612,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6b/6c/1e097d82.jpg","nickname":"donglu","note":"","ucode":"427B50B0BCC559","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43869,"discussion_content":"要有这个意识，背对着总不行吧，视而不见也不行吧？勇士敢于直面人生，就是这个意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572914738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147711,"user_name":"繁星mind","can_delete":false,"product_type":"c1","uid":1455441,"ip_address":"","ucode":"387B67F75303AA","user_header":"https://static001.geekbang.org/account/avatar/00/16/35/51/ed895596.jpg","comment_is_top":false,"comment_ctime":1572880514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867847810","product_id":100039001,"comment_content":"1.面向对象特性是设计原则的基础，设计原则又为面向对象特性使用提供指导。<br>2.设计模式是为了解决某些特定问题而产生的方案，我们要了解每种设计模式解决的问题，以及优缺点才能更好的解决问题。<br>3.编码规范则是一种约定，让大家以相同的语言来沟通。<br>4.重构是对发展过程中，出现的一些问题，进行针对性的改造，换句话说，当前框架和设计不能满足业务发展，就要对设计框架进行改造，解决现在和未来遇到的问题。","like_count":1},{"had_liked":false,"id":147557,"user_name":"moqifei","can_delete":false,"product_type":"c1","uid":1358410,"ip_address":"","ucode":"E0A6C858B78A3A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGovXf8jNP5ZqHsDKLwajjicbFwpX9on1xiaJDR4CgWaWP2KcfOdneasBfKFo3dO3dwQyGG6WjK40w/132","comment_is_top":false,"comment_ctime":1572869706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867837002","product_id":100039001,"comment_content":"编程规范最重要，编程规范就像士兵的正步，是基础中的基础。提高代码质量应该善假于物，很多静态工具如Findbugs可以指导编程规范，白盒测试工具如JaCoCo可以评价单测的质量，进而保证重构质量。","like_count":1},{"had_liked":false,"id":358718,"user_name":"亚宁","can_delete":false,"product_type":"c1","uid":1002561,"ip_address":"北京","ucode":"B7B5D282EA59D8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/41/659d6113.jpg","comment_is_top":false,"comment_ctime":1664617725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664617725","product_id":100039001,"comment_content":"我觉得对业务的认知也很重要，对业务的理解程度直接决定了表结构的层级关系，如果只是简单一张张表的堆积，对后续的维护和可扩展性都毫无意义。","like_count":0},{"had_liked":false,"id":356988,"user_name":"Geek_3e9d7d","can_delete":false,"product_type":"c1","uid":3070253,"ip_address":"北京","ucode":"3BDEFFE68BE32F","user_header":"","comment_is_top":false,"comment_ctime":1662798499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662798499","product_id":100039001,"comment_content":"1、在今天讲到的内容中，你觉得哪一部分内容对提高代码质量最有效？为什么？<br>我认为编程规范对提高代码质量最有效。原因有以下两点：<br>首先，设计规范、设计模式等只有在编写较为复杂的系统时才能发挥大的作用，而我们日常中大多数在编写业务逻辑。但编程规范可以浸透在日常代码编写中，持续提高代码质量；<br>其次，将设计规范、设计模式、重构等技术学以致用并且用好需要一定门槛，而编程规范简单易懂、实践起来没有门槛，能在日常编码中轻松实施。<br>除了我罗列的这些内容之外，你还知道哪些可以提高代码质量的方法？<br>我觉得在设计和编码中要时刻谨记面向失败的编程理念。写一段业务逻辑，不仅仅要把正确的逻辑写好；也要注意出现错误时怎么处理、如何保证整体业务流程受影响最小，如何记录详细错误日志方便排查问题。<br>2、我们知道，最经典的设计模式书籍是 GoF 的《设计模式》，它的中文全称是《设计模式：可复用面向对象软件的基础》，英文全称是“Design Patterns: Elements of Reusable Object-Oriented Software”。为什么它在标题中会特意提到“面向对象”呢？<br>因为其中大多数设计模式都要使用到面向对象的多态、封装、继承、接口等特性，如果是面向过程的编程语言无法支持实施这些设计模式。","like_count":0},{"had_liked":false,"id":356527,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662381207,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662381207","product_id":100039001,"comment_content":"提高代码质量，需要刻到骨子里，或者说是条件反射式的融入到代码中，将设计思想，设计原则，设计模式，代码规范这四点有机融合到代码中去！<br>设计模式是基于面向对象的，对于面向过程语言，没有封装，对于设计模式没有用武之地！我的理解机构型的设计模式，就是多个对象之间引用的设计规范。创建型设计模式，就是单个对象初始化的设计规范。行为型的设计模式，也是对象之间的传递规范。","like_count":0},{"had_liked":false,"id":355879,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"北京","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1661824690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661824690","product_id":100039001,"comment_content":"先总结一下今天的学习：<br>面向对象是设计或者重构的一些基础；设计原则是设计的指导思想；设计模式是对具体场景中对于设计原则运用的提炼；编程规范是写出良好代码的基础；重构是对于编程规范的具体实践。<br>1.你觉得哪一部分内容对提高代码质量最有效？<br>对于我自己来说重构是最有效的，设计模式会过时，编程规范会更新迭代甚至面向对象也可能以后不再使用了。只有不断的根据实际情况来重构优化自己的代码才是延长代码寿命的最好的方法。<br>2.除了我罗列的这些内容之外，你还知道哪些可以提高代码质量的方法？<br>codereview或者说结对编程应该算很好的一种方式。只可惜我本人也很少进行。<br>3.为什么它在标题中会特意提到“面向对象”呢？<br>我认为是在面向对象的编程风格中能更好的实现那些设计模式。当然面向过程的语言中一样可以实现很多的设计模式。但是大部分的设计模式只有在面向对象的语言中，才能更加直观，方便，清晰的去实践那些设计模式。<br><br>","like_count":0},{"had_liked":false,"id":351673,"user_name":"无名道长","can_delete":false,"product_type":"c1","uid":1387960,"ip_address":"","ucode":"0F694D17459CC0","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/b8/7e49a241.jpg","comment_is_top":false,"comment_ctime":1658073871,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658073871","product_id":100039001,"comment_content":"课堂讨论：<br><br>1. 我觉得编程规范对提高代码质量最有效，因为在工作中不论什么样的代码都需要编程规范，不遵守编程规范代码的可读性会非常差。多看一些优秀的代码可以提高代码质量<br><br><br>2. 设计模式一书描述了在面向对象软件设计过程中针对特定问题简洁而优雅的解决方案。它研究的前提就是面向对象。个人觉得这个问题最后变成了面向对象为什么这么流行了","like_count":0},{"had_liked":false,"id":350923,"user_name":"SICUN","can_delete":false,"product_type":"c1","uid":1254261,"ip_address":"","ucode":"22A384904EB9E9","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/75/2b599841.jpg","comment_is_top":false,"comment_ctime":1657350950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657350950","product_id":100039001,"comment_content":"1. 编程规范解决代码质量下限问题，设计模式可以提高代码质量的上限，培养开发者代码质量意识是提高代码质量的根本<br>2.这就需要了解设计模式的根源了，设计模式是1990年代由Erich Gamma等人从建筑领域引入到计算机科学中来的，是对面向对象设计中反复出现的问题的解决方案，是对代码设计经验的总结，目的是实现代码的重用，增加可维护性。","like_count":0},{"had_liked":false,"id":350649,"user_name":"孙新","can_delete":false,"product_type":"c1","uid":2875594,"ip_address":"","ucode":"A80038A479B943","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e0/ca/adfaa551.jpg","comment_is_top":false,"comment_ctime":1657073572,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657073572","product_id":100039001,"comment_content":"第一个问题，我正在按照一个统一的编码规范改造原先的代码，但是设计模式和设计原则层面的东西还不够。所以最高效的部分就是编码规范。<br>第二个问题，因为面向过程讲设计模式，比较难以推广。很多设计模式是基于面向对象的。个人理解。","like_count":0},{"had_liked":false,"id":350647,"user_name":"孙新","can_delete":false,"product_type":"c1","uid":2875594,"ip_address":"","ucode":"A80038A479B943","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e0/ca/adfaa551.jpg","comment_is_top":false,"comment_ctime":1657073377,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657073377","product_id":100039001,"comment_content":"图片直接作为桌面背景了。这几个月就它了。","like_count":0},{"had_liked":false,"id":348493,"user_name":"陈平Edgar","can_delete":false,"product_type":"c1","uid":1043749,"ip_address":"","ucode":"DD5A715893827E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/25/a48988c0.jpg","comment_is_top":false,"comment_ctime":1655135213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655135213","product_id":100039001,"comment_content":"第二题和面向对象出现的历史原因有关吧。当初面向过程的编程方式，无法满足大型复杂应用的开发，而提出面向对象编程思想的作者，基于面向对象的特性，特意强调的原因？","like_count":0},{"had_liked":false,"id":346970,"user_name":"HStar-X","can_delete":false,"product_type":"c1","uid":2456408,"ip_address":"","ucode":"3C6302D14075B1","user_header":"https://static001.geekbang.org/account/avatar/00/25/7b/58/2bd6e093.jpg","comment_is_top":false,"comment_ctime":1653567655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653567655","product_id":100039001,"comment_content":"第二题，面向对象具有的诸多特性是实现设计模式的工具基础，同时设计模式也是体现真正的面向对象编程的方法。","like_count":0},{"had_liked":false,"id":345374,"user_name":"姚钫","can_delete":false,"product_type":"c1","uid":1498146,"ip_address":"","ucode":"ECB8B0627A4F9B","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/22/41a390ae.jpg","comment_is_top":false,"comment_ctime":1652239582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652239582","product_id":100039001,"comment_content":"220511 day03<br>1. 5大概念 1.面向对象(设计思想) 2.设计原则 3.设计模式 4.代码规范 5.重构技巧<br>2.1 5个步骤都很重要,代码规范最能立竿见影<br>2.2 为什么要叫面向对象的设计模式?因为使用很多面向对象的思想和特性","like_count":0},{"had_liked":false,"id":343152,"user_name":"没有軒的筝","can_delete":false,"product_type":"c1","uid":1332535,"ip_address":"","ucode":"8B6A8A1B5472EE","user_header":"https://static001.geekbang.org/account/avatar/00/14/55/37/57aeb6af.jpg","comment_is_top":false,"comment_ctime":1650681757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650681757","product_id":100039001,"comment_content":"使用JAVA开发这么年，一直认为面向对象说白了就是对类的操作，而面向过程就是有顺序的结构开发，但是要具体说面向对象到底是什么，却解释不清。","like_count":0},{"had_liked":false,"id":341380,"user_name":"Hero","can_delete":false,"product_type":"c1","uid":1321726,"ip_address":"","ucode":"33D7939CC3C815","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/fe/197449a0.jpg","comment_is_top":false,"comment_ctime":1649572972,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649572972","product_id":100039001,"comment_content":"1:面向对象我觉得是最重要的，是基础，好比建造摩天大楼一下，地基不稳，建上去了也是危楼；<br>提高代码质量的方法：不断回头看，看看自己一年前写的代码，就有感觉了。<br>2:我觉得面向对象是基础，有了扎实的基本功，才能写出高质量的代码。","like_count":0},{"had_liked":false,"id":341016,"user_name":"Geek_441001","can_delete":false,"product_type":"c1","uid":2421724,"ip_address":"","ucode":"159C7D1965FDD9","user_header":"","comment_is_top":false,"comment_ctime":1649296715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649296715","product_id":100039001,"comment_content":"1.根据文章来看，五个部分对于提高代码质量都是很有效的，但是侧重点不同，或者说维度不同。除了一些简单的项目，偏大型项目都会涉及到这几部分。<br>2.面向对象编程是作战部队，设计原则是战略层面的考虑，设计模式是战术层面的考虑，编码规范则具体到小兵，重构是优化作战部队结构。所以没有面向对象作为实际作战单位，设计模式就不能体现出其价值。","like_count":0},{"had_liked":false,"id":336747,"user_name":"Dunk","can_delete":false,"product_type":"c1","uid":1691447,"ip_address":"","ucode":"A8F5AB98382719","user_header":"https://static001.geekbang.org/account/avatar/00/19/cf/37/6ed137b9.jpg","comment_is_top":false,"comment_ctime":1646352606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646352606","product_id":100039001,"comment_content":"1.  编程规范<br>2. 设计模式的基础是面向对象的特性","like_count":0},{"had_liked":false,"id":336097,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":1285986,"ip_address":"","ucode":"F29D56F9265751","user_header":"https://static001.geekbang.org/account/avatar/00/13/9f/62/960eecc3.jpg","comment_is_top":false,"comment_ctime":1645925069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645925069","product_id":100039001,"comment_content":" 由难到易:编程规范-&gt;重构-&gt;设计模式-&gt;设计原则-&gt;面向对象<br>5个level ","like_count":0},{"had_liked":false,"id":334797,"user_name":"夜空中的咸鱼","can_delete":false,"product_type":"c1","uid":2143489,"ip_address":"","ucode":"D6F1EAF082D000","user_header":"https://static001.geekbang.org/account/avatar/00/20/b5/01/9938349b.jpg","comment_is_top":false,"comment_ctime":1645113664,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1645113664","product_id":100039001,"comment_content":"如果这个设计模式是一本秘籍的话,面向对象是内功心法,基础中的基础,也是其他四项的根源;设计模式就是招式;设计原则是武器;编程规范招式的套路;重构就相当于把其他四项掌握了后,根据实际场景优化招式,出招的套路,甚至还可以夯实基础","like_count":0},{"had_liked":false,"id":329154,"user_name":"krauser","can_delete":false,"product_type":"c1","uid":1219733,"ip_address":"","ucode":"13E5CB0ECF1613","user_header":"https://static001.geekbang.org/account/avatar/00/12/9c/95/edbb01ae.jpg","comment_is_top":false,"comment_ctime":1641184505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641184505","product_id":100039001,"comment_content":"1、遵循代码规范<br>2、在合适的业务背景下，选择最合适的设计模式，在设计过程中，考虑是否触碰了设计原则的红线<br><br>面向对象的特性（多态、继承、封装、抽象），可以实现很多复杂的设计思路","like_count":0},{"had_liked":false,"id":328554,"user_name":"L先生","can_delete":false,"product_type":"c1","uid":2879424,"ip_address":"","ucode":"D1E567ED3377CE","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ef/c0/537b3905.jpg","comment_is_top":false,"comment_ctime":1640769753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640769753","product_id":100039001,"comment_content":"2、因为面向对象的特性，才能产生这么多的设计模式，很多设计模式都是基于面向对象的特性去实现的","like_count":0},{"had_liked":false,"id":328553,"user_name":"L先生","can_delete":false,"product_type":"c1","uid":2879424,"ip_address":"","ucode":"D1E567ED3377CE","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ef/c0/537b3905.jpg","comment_is_top":false,"comment_ctime":1640769698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640769698","product_id":100039001,"comment_content":"1、首先肯定是编码规范，这个东西是最快也是最好约束的。其次就是设计模式了","like_count":0},{"had_liked":false,"id":324229,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1337016,"ip_address":"","ucode":"37D2AD591C1AEC","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/b8/ece79234.jpg","comment_is_top":false,"comment_ctime":1638344713,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638344713","product_id":100039001,"comment_content":"第一题：<br>* 设计模式最实用、最直接。设计原则最根本。<br>* 不知道。<br>第二题：<br>* 因为面向对象是主流原则、模式的有形载体。没有面向对象特点，那很多模式、原则无法体现出来。换言之，大部分原则、模式，是建立在面向对象的封装、继承、多态、抽象基础上的。","like_count":0},{"had_liked":false,"id":314217,"user_name":"Bacchus","can_delete":false,"product_type":"c1","uid":1830814,"ip_address":"","ucode":"A8AA7E4909B201","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ef/9e/fd29bdd8.jpg","comment_is_top":false,"comment_ctime":1632904394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632904394","product_id":100039001,"comment_content":"面对对象是一切的基础，设计原则是在面向对象的基础上来思考的，设计模式只是常用场景归纳出来的普世方法","like_count":0},{"had_liked":false,"id":313975,"user_name":"Geek_1","can_delete":false,"product_type":"c1","uid":2704407,"ip_address":"","ucode":"59300A73996D20","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/17/e4fdcaad.jpg","comment_is_top":false,"comment_ctime":1632788636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632788636","product_id":100039001,"comment_content":"设计思想（面向对象），设计原则，设计模式，代码规范，重构思想这五个里面，我觉得设计原则更能有效提升我们的编码水平吧。<br>第二题：因为面向对象是设计模式编写的基础","like_count":0},{"had_liked":false,"id":313057,"user_name":"振振","can_delete":false,"product_type":"c1","uid":1313365,"ip_address":"","ucode":"ECE08186230140","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/55/5e440425.jpg","comment_is_top":false,"comment_ctime":1632236672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632236672","product_id":100039001,"comment_content":"20条规范呢<br>","like_count":0},{"had_liked":false,"id":312600,"user_name":"在左","can_delete":false,"product_type":"c1","uid":2767626,"ip_address":"","ucode":"1331E31BF69820","user_header":"https://static001.geekbang.org/account/avatar/00/2a/3b/0a/3b235a7e.jpg","comment_is_top":false,"comment_ctime":1631886231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631886231","product_id":100039001,"comment_content":"我觉得都是挺重要的，感觉都是一环扣一环的。如果你的没有良好的应用面向对象的思想，就很难遵循设计原则。写出来的代码可能就也没有遵循编程规范，没有这些做为基础，在重构的时候可能就很难下手了，可能就直接无法维护了。","like_count":0},{"had_liked":false,"id":311481,"user_name":"U2R2otkit","can_delete":false,"product_type":"c1","uid":1501330,"ip_address":"","ucode":"6CBF19655AC0AF","user_header":"https://static001.geekbang.org/account/avatar/00/16/e8/92/caaa56ce.jpg","comment_is_top":false,"comment_ctime":1631251293,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1631251293","product_id":100039001,"comment_content":"1. 保证代码质量的是重构，重构必要条件必须可测试性，设计原则，编码规范，面向对象这些提供重构的方法。<br>2. 面向对象是基础，设计原则，设计模式都是此基础上进一步总结出来的。 ","like_count":0},{"had_liked":false,"id":307115,"user_name":"Geek_752a1b","can_delete":false,"product_type":"c1","uid":1965533,"ip_address":"","ucode":"B831D21C7CB4BF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLVqEDcszBlhElG96Z5VB5BPrLB4tFtwCUgSHI1THuZGHbfWXMWUBn1yKzDyYQJFcQGmgK0sZCftQ/132","comment_is_top":false,"comment_ctime":1628868174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628868174","product_id":100039001,"comment_content":"面向对象是基石，设计原则是钢筋混凝土，设计模式是钢筋混凝土组成的楼架骨。编程规范是装潢师，<br>重构是休整调节","like_count":0},{"had_liked":false,"id":306901,"user_name":"小周","can_delete":false,"product_type":"c1","uid":2453498,"ip_address":"","ucode":"7ED7BC27A46C4C","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/fa/615a0df3.jpg","comment_is_top":false,"comment_ctime":1628768089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628768089","product_id":100039001,"comment_content":"我觉得面向对象对提高代码质量最有效。因为可以利用面向对象的特性：继承、封装、多态和抽象有效提高代码的可扩展性、可维护性、可复用性等等。并且设计原则和设计模式的编码实现都是基于面向对象编程的","like_count":0},{"had_liked":false,"id":306540,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1628601786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628601786","product_id":100039001,"comment_content":"1.在今天讲到的内容中，你觉得哪一部分内容对提高代码质量最有效？为什么？除了我罗列的这些内容之外，你还知道哪些可以提高代码质量的方法？<br>答：对我个人而言，现在感觉最明显的是设计模式和编程规范，开发时可以遵守一些编程规范，比如针对C++，Google有提出了一个编程规范，个人还是挺推荐的<br>2.我们知道，最经典的设计模式书籍是 GoF 的《设计模式》，它的中文全称是《设计模式：可复用面向对象软件的基础》，英文全称是“Design Patterns: Elements of Reusable Object-Oriented Software”。为什么它在标题中会特意提到“面向对象”呢？<br>答：因为很多设计模式是以面向对象为基础的，或者说设计模式是对面向对象的进一步加深和经验总结","like_count":0},{"had_liked":false,"id":304111,"user_name":"九先生","can_delete":false,"product_type":"c1","uid":1122533,"ip_address":"","ucode":"A63A333299D485","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/e5/f66d6144.jpg","comment_is_top":false,"comment_ctime":1627260054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627260054","product_id":100039001,"comment_content":"面向对象是基础<br>设计原则是指导方针<br>设计模式是落地的解决方案<br>编码规范是真实落地的细节<br>重构是利用以上四种理论来保证代码质量（个人认为重构不只是跟以上四种有关，难道面向过程编程就没有重构了吗？）","like_count":0},{"had_liked":false,"id":303590,"user_name":"连星科技","can_delete":false,"product_type":"c1","uid":2642229,"ip_address":"","ucode":"C84FF7FF4AAE56","user_header":"https://static001.geekbang.org/account/avatar/00/28/51/35/d3a1144b.jpg","comment_is_top":false,"comment_ctime":1626865463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626865463","product_id":100039001,"comment_content":"go既可以面向过程，又可以面向对象，还可以面向函数","like_count":0},{"had_liked":false,"id":302481,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1626235732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626235732","product_id":100039001,"comment_content":"重构的目的（why）、对象（what）、时机（when）、方法（how）； 这里的时机和方法怎么理解呢","like_count":0},{"had_liked":false,"id":302480,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1626235583,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626235583","product_id":100039001,"comment_content":"更加能落地 是什么意思呀","like_count":0},{"had_liked":false,"id":297639,"user_name":"追逐繁星的孩纸~","can_delete":false,"product_type":"c1","uid":1593884,"ip_address":"","ucode":"69DC37A9E39C7E","user_header":"https://static001.geekbang.org/account/avatar/00/18/52/1c/e902de0f.jpg","comment_is_top":false,"comment_ctime":1623684013,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1623684013","product_id":100039001,"comment_content":"问题1<br>答：编程规范是最有效的，还有些手段比如CR，TDD。<br>问题2<br>答：因为面向对象具备四大特性，能够实现复杂的设计思路，是设计模式实现的基础。","like_count":0},{"had_liked":false,"id":294439,"user_name":"何同一","can_delete":false,"product_type":"c1","uid":2637195,"ip_address":"","ucode":"3270B66A34F29A","user_header":"https://static001.geekbang.org/account/avatar/00/28/3d/8b/47bcc851.jpg","comment_is_top":false,"comment_ctime":1621942743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621942743","product_id":100039001,"comment_content":"设计原则是指导思想<br>面向对象是工具<br>规范和重构是工作流程<br>设计模式是前人总结的套路","like_count":0},{"had_liked":false,"id":290432,"user_name":"乐","can_delete":false,"product_type":"c1","uid":2098217,"ip_address":"","ucode":"5379CD3C973434","user_header":"https://static001.geekbang.org/account/avatar/00/20/04/29/14ccf5dd.jpg","comment_is_top":false,"comment_ctime":1619542545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619542545","product_id":100039001,"comment_content":"泛型编程，元编程也是编程范式的一种么？","like_count":0},{"had_liked":false,"id":289702,"user_name":"哇*我好肥","can_delete":false,"product_type":"c1","uid":2579133,"ip_address":"","ucode":"26C937842EC9FE","user_header":"https://static001.geekbang.org/account/avatar/00/27/5a/bd/a3b20809.jpg","comment_is_top":false,"comment_ctime":1619147238,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619147238","product_id":100039001,"comment_content":"高质量代码应该具有的能力<br>1、面向对象思想：<br>(1)四大特性：封装、抽象、继承、多态。可以实现很多复杂的设计思路，是很多设计原则、设计模式的编码实现基础<br>(2)需要掌握的7大知识点：<br>①四大特性<br>②面向对象编程和面向过程编程的区别和联系<br>③面向对象分析、面向对象设计、面向对象编程<br>④接口和抽象类的区别以及各自的应用场景<br>⑤基于接口而非实现编程的设计思想<br>⑥多用组合少用继承的设计思想<br>⑦面向过程的贫血模型和面向对象的充血模型<br>2、设计原则：是指导我们代码设计的一些经验总结，对是否应用某种设计模式具有指导作用<br>3、设计模式：是我们软件开发过程中遇到一些问题，总结出来的一套解决方案或者设计思路，它的主要目的是提高代码的可扩展性<br>4、编程规范：提高代码的可读性，命名的规范，注释的描述，函数的长度适中等等<br>5、重构：就是用上面的工具（面向对象设计思想、设计原则、设计模式、编码规范）来对代码优化，但是不要过度设计，在遇到问题的时候，才针对考虑重构<br><br>你觉得哪一部分内容对提高代码质量最有效？为什么？<br>我觉得面对对象思想和设计模式最有效。其实我觉得五个都非常重要，一个好的软件，不可能离开这五个特性的，为什么选这两个？是因为面对对象的思想的四大特性是必不可少的，而设计模式结合这四大特性可以解决很多复杂的代码。<br><br>你还知道哪些可以提高代码质量的方法？<br>利用mvc、mvp、mvvm等框架可以提高代码的质量","like_count":0},{"had_liked":false,"id":288456,"user_name":"keep_it_real","can_delete":false,"product_type":"c1","uid":2055554,"ip_address":"","ucode":"F5057CAF752FF3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","comment_is_top":false,"comment_ctime":1618476301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618476301","product_id":100039001,"comment_content":"看的再多也没用，都是纸上谈兵，理解再深刻过几天又忘了。只有在平时用到去真正解决了问题，那就深深的刻在脑海了。","like_count":0},{"had_liked":false,"id":287900,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1618212669,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618212669","product_id":100039001,"comment_content":"课堂讨论<br>1、我认为设计思想+设计模式提高我们代码的扩展性最好，当开发新的功能点是可以基于已有设计填充不同的功能实现<br>编码规范+持续重构对于提高我们代码的简单可读性可测试性可复用性更好，平常我们都会通过一些小重构优化重复代码等<br>而设计原则可以在我们完成编码时来检验代码是否符合原则，从具体再到抽象<br>2、设计模式、设计原则都是基于面向对象的四大特性才能落地，另外设计模式也可以通过面向过程编程语言写面向对象的代码来实现","like_count":0},{"had_liked":false,"id":287871,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1618203347,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1618203347","product_id":100039001,"comment_content":"第一题：重构，重构作为保持代码质量不下降的有效手段，利用的就是面向对象、设计原则、设计模式、编码规范这些理论。","like_count":0},{"had_liked":false,"id":287870,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1618203283,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1618203283","product_id":100039001,"comment_content":"第二题，是因为面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式等编码实现的基础。","like_count":0},{"had_liked":false,"id":284912,"user_name":"李叶","can_delete":false,"product_type":"c1","uid":1470449,"ip_address":"","ucode":"41B33FA8526E48","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/f1/35f9f16f.jpg","comment_is_top":false,"comment_ctime":1616543631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616543631","product_id":100039001,"comment_content":"面向对象设计思想 设计原则 设计模式 编码规范 重构是服务代码质量的5大方法论","like_count":0},{"had_liked":false,"id":283955,"user_name":"程序猿MT","can_delete":false,"product_type":"c1","uid":2319922,"ip_address":"","ucode":"6B97D4D535F5BB","user_header":"","comment_is_top":false,"comment_ctime":1615994943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615994943","product_id":100039001,"comment_content":"面向对象是一种编程思想，你对设计模式的理解，会直接影响你的抽象能力。学习，学习。","like_count":0},{"had_liked":false,"id":282879,"user_name":"ck","can_delete":false,"product_type":"c1","uid":1142348,"ip_address":"","ucode":"2335A22314296A","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/4c/494b2907.jpg","comment_is_top":false,"comment_ctime":1615450865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615450865","product_id":100039001,"comment_content":"一下收到这么多名词, 感觉自己想要把整篇文章背下来. 静静心, 重点名词和名次之间的关系要放到脑子里.","like_count":0},{"had_liked":false,"id":282012,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1615014974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615014974","product_id":100039001,"comment_content":"个人觉得编程规范和代码重构对改善代码质量可以有立竿见影的效果，这两部分直接作用于代码，对代码进行外科手术式的改造，因此效果最明显。其他提高代码质量的方式有利用自动化工具或者集成开发工具对代码进行自动语法补全，或则代码规范性检查，还可以利用一些成熟的模板进行代码编写。<br>设计模式中提到面向对象，这是因为设计模式就是用来解决面向对象的程序设计中的问题。","like_count":0},{"had_liked":false,"id":281971,"user_name":"CoreDao","can_delete":false,"product_type":"c1","uid":2418145,"ip_address":"","ucode":"75D08C21EC57FA","user_header":"https://static001.geekbang.org/account/avatar/00/24/e5/e1/5af35687.jpg","comment_is_top":false,"comment_ctime":1614999162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614999162","product_id":100039001,"comment_content":"1. 面向对象是基础，高楼的基建所以很重要，而最有效的我觉得是设计模式，因为它是过往那个坎坷的总结，针对问题最有效的解决办法。<br>2. 同上，因为面向对象是基础。","like_count":0},{"had_liked":false,"id":280401,"user_name":"🌐是平的","can_delete":false,"product_type":"c1","uid":2449361,"ip_address":"","ucode":"7D890E3994999F","user_header":"https://static001.geekbang.org/account/avatar/00/25/5f/d1/6aa90b7a.jpg","comment_is_top":false,"comment_ctime":1614178331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614178331","product_id":100039001,"comment_content":"面向过程，面向对象，面向百度","like_count":0},{"had_liked":false,"id":280165,"user_name":"Geek_ea3267","can_delete":false,"product_type":"c1","uid":1962384,"ip_address":"","ucode":"71C1EBF50F457A","user_header":"","comment_is_top":false,"comment_ctime":1614102023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614102023","product_id":100039001,"comment_content":"1.重构最有效, 因为重构包含了其它四种方法论<br>2.我猜 设计模式是基于面向对象这个编程范式而总结的开发经验","like_count":0},{"had_liked":false,"id":278244,"user_name":"你当像鸟飞往你的山","can_delete":false,"product_type":"c1","uid":1116363,"ip_address":"","ucode":"7F63B307D7B92D","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/cb/5a0690cb.jpg","comment_is_top":false,"comment_ctime":1612843711,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612843711","product_id":100039001,"comment_content":"重构的意识很重要，每读一遍代码，就做一些改进","like_count":0},{"had_liked":false,"id":273983,"user_name":"爱学习的Kirk","can_delete":false,"product_type":"c1","uid":2392633,"ip_address":"","ucode":"CB6607E26037EC","user_header":"https://static001.geekbang.org/account/avatar/00/24/82/39/c3227567.jpg","comment_is_top":false,"comment_ctime":1610776540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610776540","product_id":100039001,"comment_content":"暂时个人认为编码规范和遵循一些团队的基本设计原则对提高代码质量非常有效。面向对象是一种思想，是基石，一名合格的开发者必备且需要不断精进的思想","like_count":0},{"had_liked":false,"id":273462,"user_name":"刘立嘉","can_delete":false,"product_type":"c1","uid":2414637,"ip_address":"","ucode":"1241140EBE7FE3","user_header":"https://static001.geekbang.org/account/avatar/00/24/d8/2d/6ec3760c.jpg","comment_is_top":false,"comment_ctime":1610605393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610605393","product_id":100039001,"comment_content":"我觉得5点各有侧重，设计模式多种多样，能谈到这四个字的程序员，一定是很有经验的，它本身也是前人经过长时间的实践，总结出来的代码编写经验，最后形成了一套可借鉴的固定模式，对想提升代码编写技术的人很有帮助。","like_count":0},{"had_liked":false,"id":272264,"user_name":"Geek_d3e32a","can_delete":false,"product_type":"c1","uid":2406530,"ip_address":"","ucode":"ABA0CBBEF3EC60","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkeAgcDSuVibqooia2ibmWQ0s7OSuqsXaX84wjlcic4t3s1ULGx5kcx9mdsN4cKIJAAu6fKNaGnOFZicg/132","comment_is_top":false,"comment_ctime":1610010460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610010460","product_id":100039001,"comment_content":"1、分情况：如果是做框架的重构，重构完了给别人用，或者是在已有系统上做优化，那编程规范就很重要，需要其他开发者按规范来进行编码；需要开发人员从无到有去完成一个模块代码的编写，那设计思想、设计原则、设计模式和编程规范都很重要。<br>2、说明面向对象的设计思想非常之重要！","like_count":0},{"had_liked":false,"id":272220,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1609992451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609992451","product_id":100039001,"comment_content":"## 好的判断来自经验，而经验来自坏的判断。 <br>再看今天的内容，感受又不同了，编程是一个工程问题，主题中讨论的 `面向对象`、`设计原则`、`设计模式`、`编程规范`、`重构技巧`，这五个概念说到底还是一个经验的问题。<br>好的判断来自经验，而经验来自坏的判断。<br>我们没有精力也没有必要把前任的错误都犯一遍再总结出同样的经验，站在他们的肩膀上吧，平庸的我们也有如神助~","like_count":0},{"had_liked":false,"id":269475,"user_name":"Am0xil","can_delete":false,"product_type":"c1","uid":2153943,"ip_address":"","ucode":"CE2A04F9FF9FE6","user_header":"https://static001.geekbang.org/account/avatar/00/20/dd/d7/885e4ce3.jpg","comment_is_top":false,"comment_ctime":1608682944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608682944","product_id":100039001,"comment_content":"前几天重构了自己以前的一个功能模块，业务和逻辑并不复杂，但我却整整搞了一周，现在想想，主要还是因为第一次做的时候单纯追求速度，没有做任何考虑，为了交付而实现，方法能写死就写死，在主方法中写了大量的实现而没有抽出来，几乎没有任何的扩展性和维护性，感觉自己这一年多来CRUD了一年，也CV了一年，终究活成了曾经最不想变成的样子","like_count":0},{"had_liked":false,"id":267898,"user_name":"米虫","can_delete":false,"product_type":"c1","uid":1448031,"ip_address":"","ucode":"18B78262CA2B0A","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/5f/b391c6c2.jpg","comment_is_top":false,"comment_ctime":1607989754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607989754","product_id":100039001,"comment_content":"最直接有效的是重构，因为需求变化和人力时间问题。长期来看是建立团队技术体系，让团队🈶️组织能力，加大基建投入，完善培养与晋升机制，才能把这些落地下去。<br>","like_count":0},{"had_liked":false,"id":267363,"user_name":"焱","can_delete":false,"product_type":"c1","uid":1113301,"ip_address":"","ucode":"677BF1BE4B94D5","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/d5/1cf5fd56.jpg","comment_is_top":false,"comment_ctime":1607694641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607694641","product_id":100039001,"comment_content":"个人觉得是设计原则最重要，比如说开闭原则，现在维护的项目耦合过高每次修改都得小心翼翼，然后呢设计模式是对遇到问题抽象成对象的一种解决方案呢","like_count":0},{"had_liked":false,"id":265306,"user_name":"李奇峰","can_delete":false,"product_type":"c1","uid":1563487,"ip_address":"","ucode":"22BC56BA5A5726","user_header":"https://static001.geekbang.org/account/avatar/00/17/db/5f/c5791954.jpg","comment_is_top":false,"comment_ctime":1606843151,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606843151","product_id":100039001,"comment_content":"在实际的工作生产中，我认为代码整洁性对于代码的质量最重要。因为大家在开发的时候都是团队合作的，代码的整洁性可以大大提高团队整体的效率，所以显得尤为重要。","like_count":0},{"had_liked":false,"id":264784,"user_name":"落尘","can_delete":false,"product_type":"c1","uid":1802622,"ip_address":"","ucode":"7B76B94CA301D7","user_header":"https://static001.geekbang.org/account/avatar/00/1b/81/7e/fb688b5c.jpg","comment_is_top":false,"comment_ctime":1606647495,"is_pvip":false,"replies":[{"id":"96060","content":"嗯嗯 ������","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700527,"ip_address":"","comment_id":264784,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606647495","product_id":100039001,"comment_content":"讨论课题：<br>1.我认为提高代码质量的核心思想应该是设计原则；根据实际业务，或许有时违背设计模式反而能够提高代码质量？<br>2.GoF 的《设计模式》是针对面向对象编程提出的？因此小标题特意提到“面向对象”？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510685,"discussion_content":"嗯嗯 ������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264389,"user_name":"Daisy","can_delete":false,"product_type":"c1","uid":1800029,"ip_address":"","ucode":"5B4A9DF62BB583","user_header":"https://static001.geekbang.org/account/avatar/00/1b/77/5d/b3b4bc02.jpg","comment_is_top":false,"comment_ctime":1606454021,"is_pvip":false,"replies":[{"id":"96074","content":"饿呢","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700608,"ip_address":"","comment_id":264389,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606454021","product_id":100039001,"comment_content":"第二个问题，文中有答案了，是因为面向对象语言的特性。面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式编码实现的基础。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510549,"discussion_content":"饿呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263380,"user_name":"初学者","can_delete":false,"product_type":"c1","uid":2331845,"ip_address":"","ucode":"A6B5DDB0FCD5EC","user_header":"https://static001.geekbang.org/account/avatar/00/23/94/c5/67fa8668.jpg","comment_is_top":false,"comment_ctime":1606120308,"is_pvip":false,"replies":[{"id":"96099","content":"是的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700778,"ip_address":"","comment_id":263380,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606120308","product_id":100039001,"comment_content":"一直跟着pojo，controller，service转写不出好的代码","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510166,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263075,"user_name":"Geek_54e0bd","can_delete":false,"product_type":"c1","uid":2283289,"ip_address":"","ucode":"24C615524F9570","user_header":"","comment_is_top":false,"comment_ctime":1605971303,"is_pvip":false,"replies":[{"id":"96111","content":"������","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700857,"ip_address":"","comment_id":263075,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605971303","product_id":100039001,"comment_content":"面向对象是易筋经，设计模式是独孤九剑","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510087,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261225,"user_name":"mbg_feiRen","can_delete":false,"product_type":"c1","uid":2260457,"ip_address":"","ucode":"40E843F6A45142","user_header":"","comment_is_top":false,"comment_ctime":1605245584,"is_pvip":false,"replies":[{"id":"96153","content":"嗯嗯","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606701530,"ip_address":"","comment_id":261225,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605245584","product_id":100039001,"comment_content":"面向对象、设计原则、设计模式、编程规范、重构，这五者是相互协助，互利共赢的原则，先掌握，后灵活运用，方可升华！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509424,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259258,"user_name":"JRich","can_delete":false,"product_type":"c1","uid":1114901,"ip_address":"","ucode":"66AE9D61533960","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/15/293a185d.jpg","comment_is_top":false,"comment_ctime":1604664057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604664057","product_id":100039001,"comment_content":"觉得是不是可以回溯到最本源，面向对象编程产生的历史背景是什么，是为了解决什么问题，她有什么优势，为什么这么设计，设计的理论依据是什么，这么追问下去是不是就能搞懂面向对象的思想了。","like_count":0},{"had_liked":false,"id":259251,"user_name":"JRich","can_delete":false,"product_type":"c1","uid":1114901,"ip_address":"","ucode":"66AE9D61533960","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/15/293a185d.jpg","comment_is_top":false,"comment_ctime":1604663555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604663555","product_id":100039001,"comment_content":"对提升代码质量最有效的是设计模式，因为设计模式是是用来解决具体某一类问题的，这类问题解决了，代码质量也就提升了。第二个问题是因为是针对面向对象编程的经验总结。","like_count":0},{"had_liked":false,"id":256715,"user_name":"意林","can_delete":false,"product_type":"c1","uid":1607657,"ip_address":"","ucode":"95A333608E1D43","user_header":"https://static001.geekbang.org/account/avatar/00/18/87/e9/80a3e28e.jpg","comment_is_top":false,"comment_ctime":1603714800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603714800","product_id":100039001,"comment_content":"对于设计模式，常用和不常用，不知道作者是如何界定的呢？","like_count":0},{"had_liked":false,"id":256282,"user_name":"一万小时","can_delete":false,"product_type":"c1","uid":1297927,"ip_address":"","ucode":"D2D443595BB1ED","user_header":"","comment_is_top":false,"comment_ctime":1603592091,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603592091","product_id":100039001,"comment_content":"提高软件质量的方法：每个函数都用bool返回值，并且如果不符合函数条件，提前return false。不知道算不算一个提高的方案","like_count":0},{"had_liked":false,"id":254459,"user_name":"Kelly.W","can_delete":false,"product_type":"c1","uid":1518308,"ip_address":"","ucode":"6EFB58A24355C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/2a/e4/714ffd01.jpg","comment_is_top":false,"comment_ctime":1603118059,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1603118059","product_id":100039001,"comment_content":"我认为面向对象设计思想对提高代码质量最有效。因为它是实现设计原则和设计模式的基础，可以在首次写代码时就避免一些问题，","like_count":0},{"had_liked":false,"id":250296,"user_name":"闻天","can_delete":false,"product_type":"c1","uid":2206424,"ip_address":"","ucode":"DE44AA4B728D20","user_header":"","comment_is_top":false,"comment_ctime":1601016037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601016037","product_id":100039001,"comment_content":"不是说函数式编程才是编程界的一等公民吗，java也支持了函数式编程当然还有很多编程语言支持scala","like_count":0},{"had_liked":false,"id":249264,"user_name":"REAL_MADIRD","can_delete":false,"product_type":"c1","uid":1012889,"ip_address":"","ucode":"9E327B5456739D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/99/dbdee494.jpg","comment_is_top":false,"comment_ctime":1600530918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600530918","product_id":100039001,"comment_content":"面向对象是设计原则、设计模式的地基","like_count":0},{"had_liked":false,"id":247567,"user_name":"apollo_steve","can_delete":false,"product_type":"c1","uid":1708286,"ip_address":"","ucode":"754053D5957A94","user_header":"https://static001.geekbang.org/account/avatar/00/1a/10/fe/a46a5a06.jpg","comment_is_top":false,"comment_ctime":1599742913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599742913","product_id":100039001,"comment_content":"作为一个新手，我觉得比较重要的是代码规范，这个容易掌握，且能很好的提高代码可读性；需要深入了解面向对象特性，这是基础；设计原则和设计模式需要多去练；代码重构这部分是工作重点，但只有掌握了前面的部分，才能更好完成；<br>面向对象可以实现很多复杂的设计思想，面向过程和面向函数实现的功能不是很多；所以重点提到面向对象","like_count":0},{"had_liked":false,"id":246378,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1599302165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599302165","product_id":100039001,"comment_content":"面向对象、设计原则、设计模式、编程规范、代码重构，这五者都是保持或者提高代码质量的方法论，本质上都是服务于编写高质量代码这一件事的。每一种对提高代码质量有很有用，并且作用的维度不一样，都很重要，我觉得差别主要体现在掌握的难易程度，而是否容易掌握又体现在使用的频度上，就大多数码代码程序员来说，显然设计模式、原则及重构技巧这些用的机会不多，也就更不容易深谙其精髓，所以才要来学习老师的《设计模式之美》，希望通过该课程能够在老师的引领下尽情体验设计模式之美。","like_count":0},{"had_liked":false,"id":245694,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599028963,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599028963","product_id":100039001,"comment_content":"问题1：<br>1、重构。<br>2、不断将代码整合的更具有可读性、可扩展性、可维护性。<br>3、暂无<br><br>问题2：<br>1、可复用以对象作为基础","like_count":0},{"had_liked":false,"id":244193,"user_name":"逆风一战九","can_delete":false,"product_type":"c1","uid":2143900,"ip_address":"","ucode":"83127627F6F37C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI45zO9GOMquhD0ia1wTBSwtJ1juPcpFTSrOGicGW3jf6JclaudauHicN8OpADArQKL8zPtDicEx4aicgA/132","comment_is_top":false,"comment_ctime":1598423657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598423657","product_id":100039001,"comment_content":"设计模式和原则 是脑袋， 指导 面向对象 这种方式来进行开发和重构 ，保证项目代码，修改容易，增删不易出bug , 便于后面的迭代。","like_count":0},{"had_liked":false,"id":243850,"user_name":"y y gi r l","can_delete":false,"product_type":"c1","uid":2132615,"ip_address":"","ucode":"0BC00677D3071D","user_header":"https://static001.geekbang.org/account/avatar/00/20/8a/87/dd68531b.jpg","comment_is_top":false,"comment_ctime":1598312057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598312057","product_id":100039001,"comment_content":"设计面向对象是基石，设计原则是目标检测工具，设计模式是结构方法论，编码规范是代码调整的方法论，可以把设计原则作为工具去执行","like_count":0},{"had_liked":false,"id":239292,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1596498361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596498361","product_id":100039001,"comment_content":"我觉得提高代码质量最重要的是设计模式，设计模式易于实践。<br>设计模式与面向对象编程紧密相关。","like_count":0},{"had_liked":false,"id":238600,"user_name":"Elvis Lee","can_delete":false,"product_type":"c1","uid":2098270,"ip_address":"","ucode":"A4B26AFFE817FA","user_header":"https://static001.geekbang.org/account/avatar/00/20/04/5e/5d2e6254.jpg","comment_is_top":false,"comment_ctime":1596209674,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596209674","product_id":100039001,"comment_content":"个人觉得编程规范最能有效提高编程质量，程序往往是写给别人看的，可读性最直观，编写不规范大大提高阅读难度<br>面向对象是设计模式的基础","like_count":0},{"had_liked":false,"id":238415,"user_name":"Happy—sea","can_delete":false,"product_type":"c1","uid":1624484,"ip_address":"","ucode":"4EAD3636164392","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/a4/66b606ad.jpg","comment_is_top":false,"comment_ctime":1596162798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596162798","product_id":100039001,"comment_content":"在今天讲到的内容中，你觉得哪一部分内容对提高代码质量最有效？为什么？除了我罗列的这些内容之外，你还知道哪些可以提高代码质量的方法？<br>我觉得遵守编码规范对提高代码质量有一定的作用，像设计模式、重构这些都是建立在最开始的遵守编码规范的基础上的。其他的我觉得可以提高代码质量的方法是读前辈的源码，虽然我到目前为止读得很少。。。。。。就像写小说，看得多了也有了感觉了","like_count":0},{"had_liked":false,"id":238299,"user_name":"龙猫","can_delete":false,"product_type":"c1","uid":1112490,"ip_address":"","ucode":"FD726CC969EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","comment_is_top":false,"comment_ctime":1596115877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596115877","product_id":100039001,"comment_content":"来晚了，才发现这么牛biubiu的课","like_count":0},{"had_liked":false,"id":238127,"user_name":"站在岸上的鱼","can_delete":false,"product_type":"c1","uid":2093578,"ip_address":"","ucode":"96C3D7B1772541","user_header":"https://static001.geekbang.org/account/avatar/00/1f/f2/0a/e10d198f.jpg","comment_is_top":false,"comment_ctime":1596074981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596074981","product_id":100039001,"comment_content":"面向对象，设计模式，编程规范。这三个对提高代码质量有比较明显的帮助。正确的使用设计模式能让你的代码更简洁，更易阅读。熟练使用面向对象的特性，可以让代码的逻辑更清晰，至于编程规范，平时用的最多的应该就是命名规范，一套系统的命名规范可以让代码更易理解。一个好的项目框架的设计也是提高代码质量的好办法，但是，框架设计这个东西是随着你的能力的提升而有不同的认识的，如何让自己的框架变得更易重构也是很重要的。<br><br>现在说的这些设计模式的基础就是面向对象编程，就像使用c，很多设计模式实现起来就很复杂。准确的说是基本无法实现。","like_count":0},{"had_liked":false,"id":237880,"user_name":"时二少","can_delete":false,"product_type":"c1","uid":1352255,"ip_address":"","ucode":"874213405EDEFC","user_header":"https://static001.geekbang.org/account/avatar/00/14/a2/3f/73d08b2a.jpg","comment_is_top":false,"comment_ctime":1595994686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595994686","product_id":100039001,"comment_content":"1.设计原则。因为这个是规范，规范的产生是经验总结。首先得有面向对象的思想，在面向对象的基础之上，设计原则是最能提高代码质量","like_count":0},{"had_liked":false,"id":237740,"user_name":"汉江","can_delete":false,"product_type":"c1","uid":1788647,"ip_address":"","ucode":"01622D984B8F9B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4a/e7/6c16af5d.jpg","comment_is_top":false,"comment_ctime":1595939447,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595939447","product_id":100039001,"comment_content":"设计原则就像宪法一样 是基本的，团队成员容易达成一致，设计模式是设计原则为基本约束下的较具体的行为规范","like_count":0},{"had_liked":false,"id":235165,"user_name":"朱月俊","can_delete":false,"product_type":"c1","uid":1017707,"ip_address":"","ucode":"4DA0728B862FBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","comment_is_top":false,"comment_ctime":1594911819,"is_pvip":false,"replies":[{"id":"87058","content":"😄","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1595205933,"ip_address":"","comment_id":235165,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594911819","product_id":100039001,"comment_content":"争哥 牛逼 能提出这些词已经不错了，还能对比分析。赞👍榜样","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501620,"discussion_content":"😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595205933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229722,"user_name":"御风","can_delete":false,"product_type":"c1","uid":1812807,"ip_address":"","ucode":"51C8212BE06364","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","comment_is_top":false,"comment_ctime":1593130758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593130758","product_id":100039001,"comment_content":"评论区说“函数是相对比较小的可复用单位<br>面向对象把可复用单位提升到类层次<br>设计模式把可复用单位提升到框架层次”。<br>自己当下的能力还在第一到第二阶段直接。在用类和对象进行分析、设计和组织代码时，就感到犯怵。<br>希望本专栏能让自己有很大的提升。","like_count":0},{"had_liked":false,"id":228140,"user_name":"杨锋","can_delete":false,"product_type":"c1","uid":1283461,"ip_address":"","ucode":"85A7828A538FB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","comment_is_top":false,"comment_ctime":1592565540,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592565540","product_id":100039001,"comment_content":"1、实际工作中，常常因为需要快速迭代，都是先简单粗暴的实现功能。所以，重构是必须的手段。而重构要以面向对象，编程规范，设计原则，设计模式这些理论作为依据。所以争哥讲的都是重点，缺一不可，哈哈哈。<br>2、面向对象是设计模式的基础？","like_count":0},{"had_liked":false,"id":226545,"user_name":"小树苗","can_delete":false,"product_type":"c1","uid":1644500,"ip_address":"","ucode":"71288176D058E2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqtnoXPFibFwKdrUibJQWYSCmAlc7FeEH5MbjiawszNgwEXAkuWKGYQMTQbnQbjlR8n9lpDgN4GQHoXQ/132","comment_is_top":false,"comment_ctime":1592136545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592136545","product_id":100039001,"comment_content":"code review是提高代码质量的不错方法，让优秀的人站在旁观者的角度提出建议。<br>如果自己本身能力有限，最好还是学习基本功，再谈代码质量。","like_count":0},{"had_liked":false,"id":226443,"user_name":"Chris Zou","can_delete":false,"product_type":"c1","uid":1897148,"ip_address":"","ucode":"B6DFC71C1DD8B7","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/bc/ffc7ad67.jpg","comment_is_top":false,"comment_ctime":1592104312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592104312","product_id":100039001,"comment_content":"1. 我觉的设计原则最更根本的，然后具体的设计模式和编程规范是不同层次的重构。设计模式中的这种重构也是一个迭代中按需进行的，编程规范是编码中要小的方面必须要遵守的，可以形成习惯。<br>2. 设计模式中应用都了面向对象的四大特性：封装、继承、抽象、多态。<br>","like_count":0},{"had_liked":false,"id":224221,"user_name":"pony","can_delete":false,"product_type":"c1","uid":1021530,"ip_address":"","ucode":"B72FA864CDD286","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/5a/846a09f7.jpg","comment_is_top":false,"comment_ctime":1591319295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591319295","product_id":100039001,"comment_content":"1.设计原则最重要，指导原则永远是行动的规范，可以阅读别人的高质量代码来提高<br>2.面向对象是很多设计模式的基础","like_count":0},{"had_liked":false,"id":223736,"user_name":"微末凡尘","can_delete":false,"product_type":"c1","uid":1099525,"ip_address":"","ucode":"25EDFD0914D0F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","comment_is_top":false,"comment_ctime":1591169070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591169070","product_id":100039001,"comment_content":"面向对象是其他的基础，是核心，其他的一些方式方法都是在面向对象的基础上延伸出来的。<br>我觉得重构非常的重要，前两天写了一个功能，领导给我重构了一下代码，瞬间可读性大大的增加，看起来舒服多了，或许这就是高手与菜鸟之间的区别","like_count":0},{"had_liked":false,"id":223510,"user_name":"今夕何夕","can_delete":false,"product_type":"c1","uid":1620929,"ip_address":"","ucode":"C3374848592304","user_header":"https://static001.geekbang.org/account/avatar/00/18/bb/c1/b2f1bd6f.jpg","comment_is_top":false,"comment_ctime":1591104314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591104314","product_id":100039001,"comment_content":"在编程时牢记设计原则，采用适合特定业务场景的设计模式，提高代码质量。","like_count":0},{"had_liked":false,"id":221410,"user_name":"lee","can_delete":false,"product_type":"c1","uid":1213651,"ip_address":"","ucode":"68633E69154801","user_header":"https://static001.geekbang.org/account/avatar/00/12/84/d3/34820f8f.jpg","comment_is_top":false,"comment_ctime":1590495402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590495402","product_id":100039001,"comment_content":"设计模式用的不好容易导致很多问题，单例模式基本上大家都用过，使用很简单。但是，很多人用的不好导致各种问题。前段时间。查找程序中（android）的内存泄露问题。找到了二十来个泄露问题。差不多有一半是因为单例导致的。各种单例持有资源（直接或间接）不释放","like_count":0},{"had_liked":false,"id":218761,"user_name":"李达龙","can_delete":false,"product_type":"c1","uid":1450486,"ip_address":"","ucode":"F5702E69D90B7F","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/f6/16bc9c24.jpg","comment_is_top":false,"comment_ctime":1589869544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589869544","product_id":100039001,"comment_content":"老师讲的很清楚，要跟着课程思考，总结，练习，输出，经过这样的闭环才能转化为自己的知识","like_count":0},{"had_liked":false,"id":216956,"user_name":"舒偌一","can_delete":false,"product_type":"c1","uid":1053833,"ip_address":"","ucode":"C1F87ED4E84FD9","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/89/229bb890.jpg","comment_is_top":false,"comment_ctime":1589376269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589376269","product_id":100039001,"comment_content":"1、认为代码重构是改善代码质量的好方法，因为这个时候问题和产生问题的场景、原因比较清楚，这时有针对性的进行能显著提高质量。<br>2、因为它是基于面向对象程序的特性写的。","like_count":0},{"had_liked":false,"id":216675,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589326472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589326472","product_id":100039001,"comment_content":"该不该用这个设计模式，那就看能不能提高代码的可“扩展性”；要不要“重构”，那就看重代码是否存在“可读”、“可维护”问题等。具体需求具体分析，不要乱用。","like_count":0},{"had_liked":false,"id":216671,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589326199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589326199","product_id":100039001,"comment_content":"面向对象编程是一种编程范式。面向对象语言是对封装、抽象、继承、多态提供语法支持的语言。<br>设计规范是面向对象编程的经验总结，在写代码时要利用封装抽象继承多态的语法遵守这些规范。<br>设计模式是解决具体问题的具体办法。是解决扩展性的。<br>编码规范更具体，解决代码的可读性的。<br>持续重构是利用面向对象提供的语法支持，遵守设计规范，应用设计模式，按照编码规范进行代码升级。<br>面向对象编程要杜绝数据库驱动的思维，要从需求出发设计类属性方法和类之间的关系(泛化、实现、关联、组合、聚合、依赖)。<br><br>组合聚合的区别：对象B：低层、提供者、被引用者。<br>对象A：高层、调用者、流程控制者。<br>A内部实例化B还是外部实例化B，通过A的构造函数或函数传入A，自己实例化对象B是部分整体关系，生命周期一致；A外部实例化通过构造函数或函数传入的，B可以单独存在，生命周期不一致。","like_count":0},{"had_liked":false,"id":216461,"user_name":"师哥","can_delete":false,"product_type":"c1","uid":1333376,"ip_address":"","ucode":"A86CD1661D370F","user_header":"https://static001.geekbang.org/account/avatar/00/14/58/80/c9e232b6.jpg","comment_is_top":false,"comment_ctime":1589264521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589264521","product_id":100039001,"comment_content":"本章了解了面向对象，设计原则，设计模式，编程规范， 重构 的关系。面向对象是基础；设计原则是指导思想；设计模式是手段；编程规范是具体要求；重构是保持代码活力。<br>以后工作中要加强这几方面的建设，转变自己多年养成的不好的编程习惯，希望成为一个代码工匠。","like_count":0},{"had_liked":false,"id":213541,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1588469553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588469553","product_id":100039001,"comment_content":"<br>面向对象的特性（封装、抽象、继承、多态）是设计原则、设计模式的基础。设计原则是指导方针，具体可实施的是设计模式，设计模式解决可扩展问题。编码规范解决可读性问题。重构作为保持代码质量不下降的有效手段，利用的就是面向对象、设计原则、设计模式、编码规范这些理论。<br><br>对编程新手来说最有效的是编码规范了，简单可行性强。在有经验的工程师眼中，可能一切都是对象，才能面向对象编程。","like_count":0},{"had_liked":false,"id":213285,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588362795,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588362795","product_id":100039001,"comment_content":"面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式编码实现的基础 第二题答案","like_count":0},{"had_liked":false,"id":213284,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588362569,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588362569","product_id":100039001,"comment_content":"设计原则最重要，只要掌握了这个就好了，我用anki 把全部的设计模式都背下来，就只会硬套。","like_count":0},{"had_liked":false,"id":211319,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1587948173,"is_pvip":false,"replies":[{"id":"78758","content":"你往后看 慢慢就懂了 后面有讲解","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1588042276,"ip_address":"","comment_id":211319,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587948173","product_id":100039001,"comment_content":"设计原则是指导我们代码设计的一些经验总结，对于某些场景下，是否应该应用某种设计模式，具有指导意义。<br><br>争哥，这句话可以详细举个例子吗？设计原则如何指导我们去选择哪个设计模式？我感觉设计原则更像是设计模式的一种理论基础，基于这个基础形成了各类设计模式，但是深入到某个具体业务问题的时候，想到的是应该选择什么样的设计模式能达到设计原则要求的那些”理论成果”。这么理解正确吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493249,"discussion_content":"你往后看 慢慢就懂了 后面有讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588042276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210197,"user_name":"track6688","can_delete":false,"product_type":"c1","uid":1088040,"ip_address":"","ucode":"0A9E893F8FD379","user_header":"https://static001.geekbang.org/account/avatar/00/10/9a/28/03613c22.jpg","comment_is_top":false,"comment_ctime":1587696477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587696477","product_id":100039001,"comment_content":"我觉得这几个像是一套组合拳，如果说比较有效的，个人觉得编程规范和重构提高代码质量，是前提。这是我见过，一个方法超千行，六七层循环外加多个if-else等等之后的体会。","like_count":0},{"had_liked":false,"id":203248,"user_name":"guan0078","can_delete":false,"product_type":"c1","uid":1090467,"ip_address":"","ucode":"53B15FF3752A40","user_header":"https://static001.geekbang.org/account/avatar/00/10/a3/a3/804fb3e9.jpg","comment_is_top":false,"comment_ctime":1586160538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586160538","product_id":100039001,"comment_content":"个人喜好。因为用Java，所以团队成员是否用面向对象编程，自己会看的比较重。因为这能体现一个人对功能理解的程度，从数据模型的设计，类的划分，方法的实现和拆分，包括Rest接口的定义都能体现。如果真的能比较好的采用面向对象去实现整个系统，你会发现从表一直到controller的逻辑和层次关系都很清晰。","like_count":0},{"had_liked":false,"id":200512,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1585614449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585614449","product_id":100039001,"comment_content":"先从写的出人人都可以看的懂的代码开始也就是编程规范。<br>然后再根据业务，应用面向对象的编程思想，设计原则，设计模式指导自己写出不一般的代码<br>最后有个高手指导那说极好的。然而大多数公司是没有的。幸好有了这个专栏","like_count":0},{"had_liked":false,"id":200379,"user_name":"赵毅","can_delete":false,"product_type":"c1","uid":1905585,"ip_address":"","ucode":"28F6820F1987F6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIgDicRj9LAvWVyuibTbRnZDFeC6uWI8zfWU1gLM6yPoNklUaiar4TKxEyRHFibjIth3iahRNLcNvewjug/132","comment_is_top":false,"comment_ctime":1585578648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585578648","product_id":100039001,"comment_content":"我觉得面向对象的设计、重构（why、what、when、how）是对提高代码质量有很大帮助，但是知易行难，<br>在日常编码中需要仔细去思考，思考的这个动作非常重要，要琢磨解决这个问题最好的方式是什么？不要一上来就动手写，要考虑实现是不是符合面向对象的设计？是不是还有更简单的算法、更少量的代码来解决这个问题，实现这个功能？这个是今后写代码需要仔细考虑的地方<br>希望学完这门课程对我的面向对象有所帮助","like_count":0},{"had_liked":false,"id":200051,"user_name":"佐西玛","can_delete":false,"product_type":"c1","uid":1090743,"ip_address":"","ucode":"73AAED82340E2B","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/b7/e0d88365.jpg","comment_is_top":false,"comment_ctime":1585537100,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585537100","product_id":100039001,"comment_content":"1、我认为设计模式对提高代码质量最有效，因为设计模式能针对具体的需求提出具体的、方便扩展的实践。<br>2、因为面向对象的丰富特性是设计模式实践的基础。","like_count":0},{"had_liked":false,"id":198027,"user_name":"郭强","can_delete":false,"product_type":"c1","uid":1192928,"ip_address":"","ucode":"38F36F0F4CC775","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/e0/387ab6fd.jpg","comment_is_top":false,"comment_ctime":1585407373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585407373","product_id":100039001,"comment_content":"最重要的是要结合实际业务灵活运用。","like_count":0},{"had_liked":false,"id":197687,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585392073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585392073","product_id":100039001,"comment_content":"我想说的是，虽然我是个学生，自从学了java后，知道了一些理论知识，但是自己的实战经验一点不够，如果一开始你就抱着设计模式的原则，开闭，单一，借口隔离，里是代换，依赖倒转原则，去写代码的化，说实话，有困难，有些简单问题，你会复杂化，但其实不必那么复杂，还是应用在其重要场景比较重要，虽然前期有难度，但内心一直是坚持的，对自己有很大好处，尤其是看源码","like_count":0},{"had_liked":false,"id":197514,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1585382837,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585382837","product_id":100039001,"comment_content":"1 开闭原则很重要，边增加新功能边引入bug太常见了<br>2 设计模式是基于面向对象的吧？","like_count":0},{"had_liked":false,"id":196345,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1585274634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585274634","product_id":100039001,"comment_content":"打卡3","like_count":0},{"had_liked":false,"id":194474,"user_name":"影子","can_delete":false,"product_type":"c1","uid":1308555,"ip_address":"","ucode":"99791520EC706D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLy4XyYTMxFbuviauqRibjibcBvN2GicibuDT7chCXwDcGgtibrTfaFseiaxKfOrVaEWWxaZcEbhf0KQBUUw/132","comment_is_top":false,"comment_ctime":1585061508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585061508","product_id":100039001,"comment_content":"For me: 本节课程涉及较多概念，其中设计原则需要进一步了解，设计模式需要掌握几种常用模式的应用，编码规范需要学习最基本的20条规范。","like_count":0},{"had_liked":false,"id":194472,"user_name":"影子","can_delete":false,"product_type":"c1","uid":1308555,"ip_address":"","ucode":"99791520EC706D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLy4XyYTMxFbuviauqRibjibcBvN2GicibuDT7chCXwDcGgtibrTfaFseiaxKfOrVaEWWxaZcEbhf0KQBUUw/132","comment_is_top":false,"comment_ctime":1585061320,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585061320","product_id":100039001,"comment_content":"设计原则，设计模式，编码规范<br>以设计原则为指导，使用设计模式设计问题解决方案，遵守编码规范编写代码来落地解决方案","like_count":0},{"had_liked":false,"id":190325,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1584629002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584629002","product_id":100039001,"comment_content":"1.提高代码质量最有效的方法应该是强制遵守编码规范，这是最快的提高代码质量的办法。可以使用 code review 来进行。还有一个就是重构代码，code review 之后重构一下代码。<br><br>2.为啥要在标题中提到面向对象的原因应该是： 所有设计原则都是基于面向对象的特性来展开的，包括继承，多态，封装，抽象","like_count":0},{"had_liked":false,"id":190242,"user_name":"邵松","can_delete":false,"product_type":"c1","uid":1869520,"ip_address":"","ucode":"823AC23E3C0570","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKqkTm19Rdkv5c7icnSAQ1SytUgApjWlb4uYzZvqIkicYROJQJAdV7H91Iibt4WSniacwbyDAHhetZrvw/132","comment_is_top":false,"comment_ctime":1584621334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584621334","product_id":100039001,"comment_content":"封装、抽象、继承、多态！不重视基础知识，很难写出优美的代码。","like_count":0},{"had_liked":false,"id":189097,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1584455303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584455303","product_id":100039001,"comment_content":"面相对象更符合人类的思维模式","like_count":0},{"had_liked":false,"id":184798,"user_name":"Presley","can_delete":false,"product_type":"c1","uid":1215219,"ip_address":"","ucode":"D8F125835F4903","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/f3/7c89d00e.jpg","comment_is_top":false,"comment_ctime":1583406909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583406909","product_id":100039001,"comment_content":"1.设计原则对提高代码质量最有效，设计原则是九阳神功，设计模式是少林拳、武当腿。掌握了设计原则，可以应万变，甚至可以不用设计模式。TDD也是提高代码质量的方式。<br>2.面向对象可能是大趋势吧，还可能是oopL非常适合应用设计模式。","like_count":0},{"had_liked":false,"id":184515,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1091781,"ip_address":"","ucode":"67802124F5181D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epjdWhOia2BKpvYDUIria0klBOvxU4v8CfsobsGYicUia6Hybb4n658LfJymFbuPk0koxldr6QIOpQsMA/132","comment_is_top":false,"comment_ctime":1583332287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583332287","product_id":100039001,"comment_content":"最快提高代码质量：<br>1.编码规范；<br>2.设计原则。<br>原因：<br>1.编码规范：有效提高代码可读性，减少低级bug，代码整洁。<br>2.设计原则：使用基本原则设计的代码不经意间就会发现使用了某一种设计模式","like_count":0},{"had_liked":false,"id":183460,"user_name":"新的起点，新的开始^_^","can_delete":false,"product_type":"c1","uid":1262068,"ip_address":"","ucode":"9C0810F472AC93","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/f4/5df17eff.jpg","comment_is_top":false,"comment_ctime":1583045779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583045779","product_id":100039001,"comment_content":"我感觉代码的可扩展性和维护性是最重要的，其他的还有提高代码质量的还有代码中使用的数据结构，从时间和空间上可以提高代码的质量。<br>因为设计模式的基础就是基于面向对象的","like_count":0},{"had_liked":false,"id":183159,"user_name":"轶帝","can_delete":false,"product_type":"c1","uid":1013660,"ip_address":"","ucode":"2D61D534691189","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/9c/26828c0d.jpg","comment_is_top":false,"comment_ctime":1582964018,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582964018","product_id":100039001,"comment_content":"借助一些静态检查工具，完成代码质量的初级筛查，在code review阶段，工程师之间再相互讨论","like_count":0},{"had_liked":false,"id":181851,"user_name":"发飙的蜗牛","can_delete":false,"product_type":"c1","uid":1800868,"ip_address":"","ucode":"B2D96A2D0B6BA4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7a/a4/79ffe77c.jpg","comment_is_top":false,"comment_ctime":1582644698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582644698","product_id":100039001,"comment_content":"以为自己理解了什么事面向对象编程，什么封装继承抽象多态，要你说的时候就说不出来了","like_count":0},{"had_liked":false,"id":179870,"user_name":"挽风～","can_delete":false,"product_type":"c1","uid":1876429,"ip_address":"","ucode":"342FE973A06488","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a1/cd/46184b76.jpg","comment_is_top":false,"comment_ctime":1582114744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582114744","product_id":100039001,"comment_content":"设计原则是经验总结，设计模式解决代码可扩展性问题，编程规范解决代码可读性可维护性","like_count":0},{"had_liked":false,"id":179659,"user_name":"Geek_neo","can_delete":false,"product_type":"c1","uid":1568248,"ip_address":"","ucode":"147211A6624E01","user_header":"https://static001.geekbang.org/account/avatar/00/17/ed/f8/3a7499f9.jpg","comment_is_top":false,"comment_ctime":1582073025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582073025","product_id":100039001,"comment_content":"我认为编程规范是开发中，提高代码质量最切实可靠的方法之一。原因开发团队每个程序员的“内功”水平有高有低，某个项目可能时间紧迫，着急上线来不及等待团队深入磨合、彼此了解，每个人去遵守编码规范是最直接、简单、有效的办法。","like_count":0},{"had_liked":false,"id":179267,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1581948011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581948011","product_id":100039001,"comment_content":"对于第一题,对我而言,我认为设计模式更加的能够提高代码质量,编程规范是一种习惯,养成就自然遵循了,说实话并不能去养成,但是能够把设计模式实际应用到项目中,则需要一些对设计模式的深入理解,而且设计模式更加具体,能够让代码能加流畅<br>当然,在实际开发中,采用合适的数据结构也是一种提高代码质量的好方法<br>第二题的话,个人认为,设计模式是设计原则的一种具体表现形式,而这些都是建立在编程范式的基础上,只有面向对象这种编程思想才能够体现这些设计模式,这就是这本书为什么叫这个原因","like_count":0},{"had_liked":false,"id":178911,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1043401,"ip_address":"","ucode":"B631E56A112BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/c9/b1b233cf.jpg","comment_is_top":false,"comment_ctime":1581853154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581853154","product_id":100039001,"comment_content":"1、在今天讲到的内容中，你觉得哪一部分内容对提高代码质量最有效？为什么？除了我罗列的这些内容之外，你还知道哪些可以提高代码质量的方法？<br>答：这些手段都比较重要，只是应用于不同的阶段；设计模块框架的时候，肯定是面向对象、设计原则、设计模式有用；<br>具体编码的时候，肯定是编程规范有用；代码维护和更新的时候，代码重构技巧有用。<br><br>另外，对代码的日志规范也是很重要的，一方面可以方便定位线上问题；另一方面，可以方便接入trace监控系统；<br>PS：对面向对象理念不太熟悉，希望下面可以讲到。<br><br>2、我们知道，最经典的设计模式书籍是 GoF 的《设计模式》，它的中文全称是《设计模式：可复用面向对象软件的基础》，英文全称是“Design Patterns: Elements of Reusable Object-Oriented Software”。为什么它在标题中会特意提到“面向对象”呢？<br>答：我感觉，是因为面向对象是最广泛的编程范式吧。","like_count":0},{"had_liked":false,"id":178356,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1581668509,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581668509","product_id":100039001,"comment_content":"从依赖关系上看，设计模式&amp;编码规范依赖设计原则，设计原则依赖面向对象 | 面向过程 | 函数式编程，也就是面向对象这种设计思想是基础，作为工程师，我们直接打交道的是设计模式和编码规范，这是我们落地设计原则和面向对象设计思想的地方，看问题抓本质，那么我们讲面向对象编程到底在讲什么呢？我的理解是通过封装、继承、多态和抽象这些特性完整表达一件事情，可以是名词也可以是动词。直观的例子是如何把大象装进冰箱这个案例，面向过程是1）打开冰箱；2）把大象装进去；3）把冰箱关上，依次完成这些过程就能把大象装进冰箱。好，我们看看面向对象怎么处理这个问题，1）冰箱你给我把门打开；2）冰箱你给我把大象装进去；3）冰箱你给我把门关上。看起来是否没啥区别，这里每个动作都多了执行者，也就是这里的冰箱，也就是冰箱会有三个功能：开门、装大象、关门，也就是每一个动作都必然会有一个执行者，执行者怎么产生呢？不就是对象本身么，冰箱是一个对象，大象也是一个对象，冰箱具有装大象的能力，怎么装呢，开门、装大象和关门啊！发现了么，面向对象隐藏了装大象的细节，冰箱的开门、装大象和关门都是对象本身的功能（方法），理解了面向对象后才能更好理解设计原则设计模式这些东西，这些都是一些写出高质量代码的经验总结，说白了就是套路，我理解设计原则可以帮助我们看懂一些开源框架的代码，学习Apache大佬们是怎么写代码的，从而内化为自己的能力。最后想说一点高质量代码的实践，多考虑异常和兜底场景，给代码留出足够的安全边际，所以说健壮性很重要啊","like_count":0},{"had_liked":false,"id":178293,"user_name":"北纬32°","can_delete":false,"product_type":"c1","uid":1014570,"ip_address":"","ucode":"66D21E24CBF468","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/2a/73495eee.jpg","comment_is_top":false,"comment_ctime":1581652775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581652775","product_id":100039001,"comment_content":"面向对象的四大特性：封装、抽象、继承、多态<br>面向对象编程与面向过程编程的区别和联系<br>面向对象分析、面向对象设计、面向对象编程<br>接口和抽象类的区别以及各自的应用场景<br>基于接口而非实现编程的设计思想<br>多用组合少用继承的设计思想<br>面向过程的贫血模型和面向对象的充血模型<br>设计原则<br>设计原则是指导我们代码设计的一些经验总结。设计原则这块儿的知识有一个非常大的特点，那就是这些原则听起来都比较抽象，定义描述都比较模糊，不同的人会有不同的解读。所以，如果单纯地去记忆定义，对于编程、设计能力的提高，意义并不大。对于每一种设计原则，我们需要掌握它的设计初衷，能解决哪些编程问题，有哪些应用场景。只有这样，我们才能在项目中灵活恰当地应用这些原则。<br>对于这一部分内容，你需要透彻理解并且掌握，如何应用下面这样几个常用的设计原则。<br>SOLID 原则 -SRP 单一职责原则<br>SOLID 原则 -OCP 开闭原则<br>SOLID 原则 -LSP 里式替换原则<br>SOLID 原则 -ISP 接口隔离原则<br>SOLID 原则 -DIP 依赖倒置原则<br>DRY 原则、KISS 原则、YAGNI 原则、LOD 法则","like_count":0},{"had_liked":false,"id":178283,"user_name":"junmawang","can_delete":false,"product_type":"c1","uid":1763466,"ip_address":"","ucode":"977E9E25CE6C94","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/8a/803a42e0.jpg","comment_is_top":false,"comment_ctime":1581649996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581649996","product_id":100039001,"comment_content":"第一个问题<br>提高代码质量最有效的方式还是需要有一个好的编程规范和代码重构，另外可以多读github上面的优秀开源代码，多问自己为什么，弄清楚为什么要这么写，以及如何运用到自己的项目中去。<br>第二个问题<br>所以的设计模式都依赖于对象的处理吧？不然就是面向过程的开发了，大概就用不到设计模式了？","like_count":0},{"had_liked":false,"id":177979,"user_name":"秀丽","can_delete":false,"product_type":"c1","uid":1402332,"ip_address":"","ucode":"9872272B8056F5","user_header":"https://static001.geekbang.org/account/avatar/00/15/65/dc/0737102d.jpg","comment_is_top":false,"comment_ctime":1581565237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581565237","product_id":100039001,"comment_content":"通过本篇文章，先把这几个概念，在大脑里形成一个体系，系统化的学习也就在于此了吧。<br>前面的文章提到了，我们如何认为代码是好的标准，那么这篇文章就是告诉我们如何达到这些标准。<br>通过设计原则的指导，设计模式的运用，当然要把面向对象作为基础，然后通过编码规范的约束，以及代码重构的手段，来达到写一手好代码的目标。","like_count":0},{"had_liked":false,"id":177502,"user_name":"nightn","can_delete":false,"product_type":"c1","uid":1026818,"ip_address":"","ucode":"39FC4FF0281637","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/02/8688abed.jpg","comment_is_top":false,"comment_ctime":1581406846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581406846","product_id":100039001,"comment_content":"结合个人实践说说对提升现有代码质量的一点浅薄理解。提升手段主要是代码重构：小重构主要依据编码规范（如命名、格式等）；大重构就需要借助面向对象设计原则、设计模式等。个人觉得，最常用到的是 SOLID 设计原则，如单一职责原则，开闭原则指导类的抽象封装，里氏替换原则指导类继承的设计。","like_count":0},{"had_liked":false,"id":177329,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1581347855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581347855","product_id":100039001,"comment_content":"目前在编程时仅思考了如何设计一个好的对象，缺少的就设计模式，设计原则，我觉得后两者对写出高质量的代码非常有用，我只所以讨厌自己的代码就是因为程序缺少这方面的思考，代码和人一样，是有灵魂的。","like_count":0},{"had_liked":false,"id":176796,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1581168461,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581168461","product_id":100039001,"comment_content":"第一题：短期来看，编码规范和重构技术对提高代码的质量见效很快；长期来看，还得在上面的基础上加上设计原则和设计模式<br>第二题：因为很多设计模式的实现方式都依赖于面向对象编程的特性","like_count":0},{"had_liked":false,"id":176185,"user_name":"Geek_bb89c3","can_delete":false,"product_type":"c1","uid":1331828,"ip_address":"","ucode":"0F97B5B0F2DDD6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IZKGetBZDuMEa2VwwtesTELvLORIyV749ItgfAqNPv30n4zEv71wuGNr1aNVIVltG0icvH53DHDuqPuzNpiauWAg/132","comment_is_top":false,"comment_ctime":1580982145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580982145","product_id":100039001,"comment_content":"高质量的代码的衡量标准是：易维护，易理解，易扩展，精简，复用，可测试。<br>其中依赖的是面向对象设计思想，设计原则，设计模式，编码规范，重构。<br>其中前面四个是为后面四个服务的：其中编码规范是为了重构中的小重构服务的。设计思想，设计原则，设计模式主要是为了大重构服务的。<br>","like_count":0},{"had_liked":false,"id":175702,"user_name":"张理查","can_delete":false,"product_type":"c1","uid":1003152,"ip_address":"","ucode":"1F93E631CD4B35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/90/a8d19e7b.jpg","comment_is_top":false,"comment_ctime":1580802753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580802753","product_id":100039001,"comment_content":"03.这篇是整个专栏的大纲，先简单介绍了面向对象、设计原则、设计模式、编程规范和代码重构都是什么，以及在培训的过程中要关注什么，再阐述了五者的关系。面向对象的封装、抽象、继承、多态是很多设计原则与设计模式的基础；设计原则是指导代码的经验，强调该干啥不该干啥，是许多设计模式的参考对象；设计模式是设计代码的思路，偏重代码的可扩展性，强调怎么干；编程规范是更偏重细节解决可读性问题，强调怎么写；最后重构是用上述规范模式原则对代码进行改良。归根结底都是在提升代码质量。","like_count":0},{"had_liked":false,"id":173939,"user_name":"song","can_delete":false,"product_type":"c1","uid":1125245,"ip_address":"","ucode":"4A8FECAD2BE795","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/7d/6febeabe.jpg","comment_is_top":false,"comment_ctime":1579792623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579792623","product_id":100039001,"comment_content":"面向对象主要是面向接口实现","like_count":0},{"had_liked":false,"id":173905,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1579770659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579770659","product_id":100039001,"comment_content":"阿里出的《java编码规范》就是一个很好的规范文档","like_count":0},{"had_liked":false,"id":172926,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1579359220,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579359220","product_id":100039001,"comment_content":"1:我觉编码规范很重要，因为他对所有编码都适用，还有一些跟语言强相关的设计技巧。<br>2.个人觉得面相对象使用的比较多，并且能解决大部分的问题的原因","like_count":0},{"had_liked":false,"id":169090,"user_name":"铁血柔情","can_delete":false,"product_type":"c1","uid":1124220,"ip_address":"","ucode":"F09CACF06B8D05","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/7c/463d4342.jpg","comment_is_top":false,"comment_ctime":1578272534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578272534","product_id":100039001,"comment_content":"设计模式对于写出高的代码质量有很大帮助，其实前面老师提到的一种方式就是review代码。面向对象是编程的基础，是实现业务与代码的桥梁。","like_count":0},{"had_liked":false,"id":165808,"user_name":"北风一叶","can_delete":false,"product_type":"c1","uid":1087302,"ip_address":"","ucode":"30310E66341D2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/46/fe1f21d8.jpg","comment_is_top":false,"comment_ctime":1577325301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577325301","product_id":100039001,"comment_content":"王老师讲述了五个概念之间的关系：<br>1. 面向对象，是构成设计的核心基础，在我看来没有面向对象的特性（封装，抽象，继承，多态）就不存在后续的设计<br>2. 设计原则：一些设计的标准，也可以说是一些规范，根据这些规则做设计<br>3. 设计模式：是前人总结出来的针对一些特定的常见问题场景的解决方案，有类似的问题场景可以直接套用<br>4. 编程规范：主要是解决代码在编写过程中的一些诸如命名之类的指导原则<br>5. 重构：是提升现有代码质量的一种手段，是对以上几个概念的充分实践。打卡第七天，今日学习设计模式之美专栏第三篇，王老师讲述了五个概念之间的关系：<br>1. 面向对象，是构成设计的核心基础，在我看来没有面向对象的特性（封装，抽象，继承，多态）就不存在后续的设计<br>2. 设计原则：一些设计的标准，也可以说是一些规范，根据这些规则做设计<br>3. 设计模式：是前人总结出来的针对一些特定的常见问题场景的解决方案，有类似的问题场景可以直接套用<br>4. 编程规范：主要是解决代码在编写过程中的一些诸如命名之类的指导原则<br>5. 重构：是提升现有代码质量的一种手段，是对以上几个概念的充分实践。","like_count":0},{"had_liked":false,"id":165391,"user_name":"喵喵喵","can_delete":false,"product_type":"c1","uid":1211713,"ip_address":"","ucode":"E3AD8BF42E19DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/41/3c5b770b.jpg","comment_is_top":false,"comment_ctime":1577233170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577233170","product_id":100039001,"comment_content":"打卡～","like_count":0},{"had_liked":false,"id":164790,"user_name":"我太难了","can_delete":false,"product_type":"c1","uid":1731602,"ip_address":"","ucode":"B80133799A4494","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6c/12/67bcce50.jpg","comment_is_top":false,"comment_ctime":1577092208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577092208","product_id":100039001,"comment_content":"我看博客有些地方把设计原则称面向对象设计原则，这么理解的话像是集合一样一层一层包含的关系，面向对象思想是最外层集合，这么理解不知道正不正确？","like_count":0},{"had_liked":false,"id":164689,"user_name":"明光村小队长","can_delete":false,"product_type":"c1","uid":1152743,"ip_address":"","ucode":"F6088DAD9D9E37","user_header":"https://static001.geekbang.org/account/avatar/00/11/96/e7/57cf6b75.jpg","comment_is_top":false,"comment_ctime":1577072499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577072499","product_id":100039001,"comment_content":"抽象到底算不算面向对象的特性呢？因为有些人认为抽象不是面向对象所独有的特性。","like_count":0},{"had_liked":false,"id":164530,"user_name":"Yangjing","can_delete":false,"product_type":"c1","uid":1018061,"ip_address":"","ucode":"D88DFD4958D07C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/cd/2c3808ce.jpg","comment_is_top":false,"comment_ctime":1577021296,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577021296","product_id":100039001,"comment_content":"对代码质量最有帮助的还是 设计原则、设计模式（保证代码的扩展性、可维护性）。项目中一直想着下次重构，却基本找不到重构的时间😂","like_count":0},{"had_liked":false,"id":163960,"user_name":"Geek_3e2092","can_delete":false,"product_type":"c1","uid":1788428,"ip_address":"","ucode":"5906E9EE05F4BE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJnv4h4j5tWy6HappcibN0A5wCwMoXGfxeufDfgCfiaficfericwNv5Slode5ysZDkOKDdF0d0orYBHUw/132","comment_is_top":false,"comment_ctime":1576834542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576834542","product_id":100039001,"comment_content":"用着面向对象的语言写着面向过程的代码，尤其在成熟平台基础上的应用逻辑开发。很多年前，打开java编程思想，有几个大大的字，面向对象。多年过去了，对象早就找到了，但还是没有将面向对象实际应用好。珍惜这一次学习的机会，将理论联系实际，将实际上升到理论高度，是我这次学习的目标<br>另外，平时review团队的代码，主要从可读性，可维护性，可扩展性要求较高，忽略了可测试性，忽略了单元白盒测试的重要性。","like_count":0},{"had_liked":false,"id":161861,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1576382925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576382925","product_id":100039001,"comment_content":"对于创建型、结构型、行为型的分类：<br>创建型还能理解，该分类下的模式，都是用于创建对象。<br>但是结构型和行为型就不太理解了，怎么去理解某个设计模式属于结构型或行为型？<br>谢谢老师！","like_count":0},{"had_liked":false,"id":161138,"user_name":"捕风捉影","can_delete":false,"product_type":"c1","uid":1713935,"ip_address":"","ucode":"E7F75B2521C8CF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/27/0f/4af4daff.jpg","comment_is_top":false,"comment_ctime":1576128498,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576128498","product_id":100039001,"comment_content":"1.知识点：<br>1.1 面向对象是很多设计原则、设计模式的基础。<br>代码规范提高编程可读性以及节省编写代码的时间和维护的时间。<br>重构可以快速的调整架构，在以上四种的基础之上。<br>2.疑惑：<br>1.面向对象是很多设计原则、设计模式的基础，可以实现很多复杂的设计思路，为什么可以设计复杂的设计思路？面向对象的特性又是如何在他们上面体现出来的？<br>2.面向对象和面向过程编程的真正区别是什么？ 对象和过程如何在代码中体现出来。<br>3.课后讨论：<br>3.1.以往敲代码的过程中忽略了深入考虑代码质量这个问题， 目前感觉最重要的，就是封装。<br>对于一个机器学习项目而言，比如评估指标。对于评估指标，你可以将它封装，下次直接输入预测值，可以有一个全面的评估<br>另数据的处理流程都是固定的，对这些处理方法，封装成类以待后用。<br>另对于每一个类型的特征，一个统一的方法，你只需要传入你需要的操作，求时间差、取天数，取月份等等，它会给你生成的数据。<br>这些更多体现了代码封装的好处：可复用性<br>3.2 我自己觉得可以提升代码质量的方法，动态命名法，减少变量的命名；另对于指定操作的东西，统一格式，比如我要操作pandas的dataframe的，多列：list_features_target ，多列中的子集：list_features_target_sub，单列：target_feature，标签：target_label；<br>对于自己处理的数据，统一格式，比如数字类型，统一用01，02模式，排序时数据可以清晰可见。————体现的最重要的一点就是将所有固定的东西统一格式，方便阅读，可扩展性也高。<br>3.3 我认为原因是现实生活中所有的事物都可以对象化，我们去分析这个对象的属性和固有行为模式，然后我们可以很快的和代码建立桥梁。<br><br><br>","like_count":0,"discussions":[{"author":{"id":1713935,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/27/0f/4af4daff.jpg","nickname":"捕风捉影","note":"","ucode":"E7F75B2521C8CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80199,"discussion_content":"第二个问题有点偏差，我想的太大了，面向对象是设计原则、设计模式、代码重构的基础..","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576154918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161069,"user_name":"|･ω･｀)","can_delete":false,"product_type":"c1","uid":1636123,"ip_address":"","ucode":"34E1DF62058D80","user_header":"https://static001.geekbang.org/account/avatar/00/18/f7/1b/8036958c.jpg","comment_is_top":false,"comment_ctime":1576113906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576113906","product_id":100039001,"comment_content":"目前对我来说，设计原则是我接触的比较少的部分，<br>面向对象，代码规范和设计模式都或多或少从实际和书籍中有了解和一定的运用，当然也不是特别熟悉quq<br>现在了解了设计原则设计模式的概念，感觉思路又清晰了点！加油！","like_count":0},{"had_liked":false,"id":159642,"user_name":"雨下不停","can_delete":false,"product_type":"c1","uid":1311947,"ip_address":"","ucode":"0893B9C249E48A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/xysT7OH4SrD4sv944ndDv5tnJOk5na37Gxd5owGWsE7ON7AVW0ibnYGNRoZd0ibLWhFVXLLjOB5QFxwjo0EGIkoQ/132","comment_is_top":false,"comment_ctime":1575711627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575711627","product_id":100039001,"comment_content":"编码规范：最显而易见的提高代码质量<br>代码重构：持续保持代码质量<br>面向对象、设计原则、设计模式：提高项目的清晰度，使项目对内对外保持高度清晰透彻的可见、可读、可扩展性","like_count":0},{"had_liked":false,"id":158557,"user_name":"我叫郭小黑","can_delete":false,"product_type":"c1","uid":1463441,"ip_address":"","ucode":"C238592EB5EDBC","user_header":"https://static001.geekbang.org/account/avatar/00/16/54/91/0d4647d9.jpg","comment_is_top":false,"comment_ctime":1575418751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575418751","product_id":100039001,"comment_content":"面相对象，设计原则，设计模式，编程范式都是作为重构的方法论，是重构代码的技术指导，持续的重构对于我们保持良好的代码风格，具有很重要的作用。我们都知道有一种效应叫“破窗效应”，讲的是当一个窗户有瑕疵的时候，那么后面可能会出现更多的瑕疵，所以保持持续的重构是很重要的，但是重构需要建立在良好的单元测试上，要不然重构把功能改坏了，也就没什么意义了，只是我的一些粗略的理解，如果有问题，请大家指出，谢谢","like_count":0},{"had_liked":false,"id":157318,"user_name":"马哲","can_delete":false,"product_type":"c1","uid":1692122,"ip_address":"","ucode":"45FC76B2CE0E53","user_header":"https://static001.geekbang.org/account/avatar/00/19/d1/da/1249fc90.jpg","comment_is_top":false,"comment_ctime":1575107365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575107365","product_id":100039001,"comment_content":"作为一个大公司的实习生，这几个月的工作主要是在别人的代码基础上改动，期间有机会自己从0写了一个服务，自己也很想将代码分模块，在分出几个模块之后，模块内部感觉有点像在写面向过程的代码。<br>其余在别人代码上改动时，更像是在写面向过程的代码，希望我学习之后，在根据一个需求设计服务时，能够思路清晰，更专业。看被人的代码也能专业的识别出其中的设计原则，设计模式等。","like_count":0},{"had_liked":false,"id":156542,"user_name":"zmysang","can_delete":false,"product_type":"c1","uid":1642663,"ip_address":"","ucode":"8A98057E7819DD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/tjhOILHBAmlx6YiaTZJzqzxn1uyB6XpdvGDIZhBn127TYEcoLLzxRiaKvtVd3HllQqPx7cqf2YmibyBUgGGGJPDkw/132","comment_is_top":false,"comment_ctime":1574907705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574907705","product_id":100039001,"comment_content":"觉得编程规范和代码重构比较重要。能做到编程规范，至少可以让代码具备可读性，提供了后续优化和重构的基础，这一点感觉就很多人做不到。通常在工作中，业务需求的变化，很多时候可能会让人心累，可能会疲于去做重构吧，只是在原有代码上堆砌功能，但是其实会导致后面代码的可读性和可维护性越来越差。这一点还是应该要靠自己自觉~","like_count":0},{"had_liked":false,"id":156188,"user_name":"灯盖","can_delete":false,"product_type":"c1","uid":1482839,"ip_address":"","ucode":"0F8455A593D60C","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/57/3a729755.jpg","comment_is_top":false,"comment_ctime":1574830547,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574830547","product_id":100039001,"comment_content":"目前我觉得代码质量的关键在于对于设计模式的理解与运用","like_count":0},{"had_liked":false,"id":156158,"user_name":"络石","can_delete":false,"product_type":"c1","uid":1677237,"ip_address":"","ucode":"B0FCF8156EB2AB","user_header":"https://static001.geekbang.org/account/avatar/00/19/97/b5/431b2561.jpg","comment_is_top":false,"comment_ctime":1574826351,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574826351","product_id":100039001,"comment_content":"面向对象是基础，设计原则、设计模式、编程规范是工具，重构的时候会用到前面两类东西。简记。","like_count":0},{"had_liked":false,"id":156098,"user_name":"chenlingwx","can_delete":false,"product_type":"c1","uid":1168919,"ip_address":"","ucode":"3B65DA03D46411","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/17/2293e98f.jpg","comment_is_top":false,"comment_ctime":1574819200,"is_pvip":false,"replies":[{"id":"59991","content":"后面有单独的一篇文章来讲这个问题，你可以看下目录","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574838781,"ip_address":"","comment_id":156098,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574819200","product_id":100039001,"comment_content":"请问老师，怎样判断是否过度设计呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475985,"discussion_content":"后面有单独的一篇文章来讲这个问题，你可以看下目录","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156063,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1574816537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574816537","product_id":100039001,"comment_content":"阿里出的《Java开发手册》代码规约和相应的IDE插件。从工具侧，提高了代码可读性和代码质量。同时降低了规范门槛。","like_count":0},{"had_liked":false,"id":155813,"user_name":"禅若静水","can_delete":false,"product_type":"c1","uid":1266038,"ip_address":"","ucode":"5028D28106963C","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/76/ad8115b0.jpg","comment_is_top":false,"comment_ctime":1574760533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574760533","product_id":100039001,"comment_content":"提高代码质量的方法论:<br>面向对象（基础），设计原则（指导方针），设计模式（提高扩展性），编程规范（提高可读性），重构（持续提高代码质量）<br>在深刻理解下这些方法论后重构，是提高代码质量可靠的方法！！！","like_count":0},{"had_liked":false,"id":155684,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1574736041,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1574736041","product_id":100039001,"comment_content":"先要有面向对象概念，再者规范，最后设计模式与设计原则，重构大部分都是基于需求的变更导致原有的项目架构不能满足业务的发展方向而不得不发起的流程。","like_count":0},{"had_liked":false,"id":155530,"user_name":"LvTwoCold","can_delete":false,"product_type":"c1","uid":1731782,"ip_address":"","ucode":"AB51168244ECE9","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6c/c6/f4759809.jpg","comment_is_top":false,"comment_ctime":1574695848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574695848","product_id":100039001,"comment_content":"设计模式是为了更好的可扩展性。<br>领域驱动设计也是可以提高编码de","like_count":0},{"had_liked":false,"id":154712,"user_name":"飞鱼","can_delete":false,"product_type":"c1","uid":1739390,"ip_address":"","ucode":"95109E8F7DBE39","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8a/7e/bfe37c46.jpg","comment_is_top":false,"comment_ctime":1574518206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574518206","product_id":100039001,"comment_content":"有没有说一下面向领域","like_count":0},{"had_liked":false,"id":154259,"user_name":"hungery","can_delete":false,"product_type":"c1","uid":1349902,"ip_address":"","ucode":"5CE6E6C1DB073E","user_header":"https://static001.geekbang.org/account/avatar/00/14/99/0e/cf461038.jpg","comment_is_top":false,"comment_ctime":1574399196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574399196","product_id":100039001,"comment_content":"设计模式是这五个中最难的，也是在项目中很关键的一部分，所以本门课就叫做设计模式之美，哈哈哈，瞎猜的!<br>以设计模式为核心，而设计模式很多都是在设计原则的基础上总结出来的模型<br>在学习设计模式的时候，其他四个也是必须要用到的知识点，学好设计模式其他四个也就真正的的理解和应用了；<br>所以这五者之间的关系和解决的问题是得门清才是啊，谢谢王老师带我理清这五个的关系，辛苦啦！","like_count":0},{"had_liked":false,"id":154020,"user_name":"被讨厌的勇气","can_delete":false,"product_type":"c1","uid":1547913,"ip_address":"","ucode":"AE3B3CA27D91A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/89/6e9c05d6.jpg","comment_is_top":false,"comment_ctime":1574348714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574348714","product_id":100039001,"comment_content":"##坚持打卡##<br><br>好的士兵的武器一定不会差，而方法论是写好高质量代码的一套武器。<br><br>面向对象具有丰富的特性，是实现很多复杂设计思路的基础。<br>设计原则是指导我们代码设计的一些经验总结。<br>设计模式是针对软件开发中经常遇到的一些问题，总结出的一套解决方案或设计思路。主要目的是可扩展性，同时也容易被过度使用。一开始不要使用复杂的设计。<br>编码规范解决代码可读性问题。命名、注释、函数长度等。<br>重构，保证代码质量不下降的重要手段。<br><br>个人现阶段感觉编码规范比较重要，我水平比较初级，大部分时间都用在编码上，此时代码的可读性会异常重要。<br><br>《设计模式》提到面向对象，个人认为面向对象的一些特性是使用设计模式的基础，C语言虽然也能实现面向对象的一些特性，但这些特性并非语言的基础部分，类比于组装电脑会选择CPU，而不会自己去造CPU。","like_count":0},{"had_liked":false,"id":153180,"user_name":"姚布斯","can_delete":false,"product_type":"c1","uid":1335972,"ip_address":"","ucode":"09F958407F63FB","user_header":"https://static001.geekbang.org/account/avatar/00/14/62/a4/972b2b33.jpg","comment_is_top":false,"comment_ctime":1574175318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574175318","product_id":100039001,"comment_content":"就像大家说的那样，设计原则是总的指导思想，面向对象是方法，设计模式是技巧。而思想往往是最重要的而且易被忽视的。","like_count":0},{"had_liked":false,"id":153036,"user_name":"程思源","can_delete":false,"product_type":"c1","uid":1021127,"ip_address":"","ucode":"29297C447D717F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/c7/b4cb1d88.jpg","comment_is_top":false,"comment_ctime":1574144338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574144338","product_id":100039001,"comment_content":"先规范，再模式，最后思想。熟能生巧，巧能生变。","like_count":0},{"had_liked":false,"id":152873,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1574092734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574092734","product_id":100039001,"comment_content":"面向对象，设计原则，设计模式，重构，编码规范，这些都单点学习了解过，但是没有像老师这样系统地串联过，受到启发了，迁移发散思考","like_count":0},{"had_liked":false,"id":152825,"user_name":"菩提晓","can_delete":false,"product_type":"c1","uid":1052898,"ip_address":"","ucode":"9716098118C32D","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/e2/d4b51007.jpg","comment_is_top":false,"comment_ctime":1574084309,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574084309","product_id":100039001,"comment_content":"23种设计模式<br>  创建型<br>    常用<br>      单例模式<br>      工厂模式(工厂方法和抽象工厂)<br>      建造者模式<br>    不常用<br>      原型模式<br>  结构型<br>    常用<br>      代理模式<br>      桥接模式<br>      装饰者模式<br>      适配器模式<br>    不常用<br>      门面模式<br>      组合模式<br>      享元模式<br>  行为型<br>    常用<br>      观察者模式<br>      模板模式<br>      策略模式<br>      指责链模式<br>      迭代器模式<br>      状态模式<br>    不常用<br>      访问者模式<br>      备忘录模式<br>      解释器模式<br>      命令模式<br>      中介模式","like_count":0},{"had_liked":false,"id":152794,"user_name":"wyf2317","can_delete":false,"product_type":"c1","uid":1236837,"ip_address":"","ucode":"7F3E61A6188B39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ub4icibeRLzff8Nf6ORsolib9KHtmeu3d4cCCAFd3Xgah3v78WfDYQB7WKq9iaIPXPwHBxw7mkBP9wYxDGMT9m1Rbw/132","comment_is_top":false,"comment_ctime":1574080978,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574080978","product_id":100039001,"comment_content":"1 编程规范，设计原则，设计模式<br>2 设计模式个人感觉是对面对对象更进一步的抽象","like_count":0},{"had_liked":false,"id":152099,"user_name":"李杰","can_delete":false,"product_type":"c1","uid":1743953,"ip_address":"","ucode":"E177762621E11E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9c/51/76fcc9cd.jpg","comment_is_top":false,"comment_ctime":1573876681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573876681","product_id":100039001,"comment_content":"答案一：工匠之心","like_count":0},{"had_liked":false,"id":151928,"user_name":"东流","can_delete":false,"product_type":"c1","uid":1738147,"ip_address":"","ucode":"2715BC6E87BD83","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","comment_is_top":false,"comment_ctime":1573815942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573815942","product_id":100039001,"comment_content":"编程规范吧，这个最容易做到<br>代码审查也可以提高代码质量<br>面向对象的代码更具复用性吧，跟设计模式的扩展性不谋而合","like_count":0},{"had_liked":false,"id":151816,"user_name":"乐观的鹏程","can_delete":false,"product_type":"c1","uid":1746026,"ip_address":"","ucode":"FA527FA2C4204B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJgXIicettSIeIDpL2zt39Zb0fdBwOlibdia5AjWITYQZCWPGDPdFKKe9UiahgROkAyoES7niaobZatvQA/132","comment_is_top":false,"comment_ctime":1573796180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573796180","product_id":100039001,"comment_content":"面向对象就像这个世界一样，跟现实世界很多地方相似，写代码的时候，可以多参考这个世界上很多灵活的东西去运用到代码里","like_count":0},{"had_liked":false,"id":151653,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1025030,"ip_address":"","ucode":"62A89FD460827A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/06/cf6b6d0f.jpg","comment_is_top":false,"comment_ctime":1573776490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573776490","product_id":100039001,"comment_content":"两眼抹黑，看着都见过，写代码的时候不知道该怎么用。。","like_count":0},{"had_liked":false,"id":151567,"user_name":"酷飞不会飞","can_delete":false,"product_type":"c1","uid":1004609,"ip_address":"","ucode":"ECFD5111260A7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/41/3d352f74.jpg","comment_is_top":false,"comment_ctime":1573741192,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573741192","product_id":100039001,"comment_content":"这才发现，写了这么多年的代码，白写了，设计模式不少用，却不明白真正的意义；设计原则也不少见，就是不知如何应用","like_count":0},{"had_liked":false,"id":151265,"user_name":"斜杠ing...","can_delete":false,"product_type":"c1","uid":1676247,"ip_address":"","ucode":"C4AE866AC8B9AE","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/d7/93c8f92a.jpg","comment_is_top":false,"comment_ctime":1573692793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573692793","product_id":100039001,"comment_content":"最近安排我对系统一个功能重构，改的很痛苦我，因为我觉得根本没法重构，大量的无用注视，魔鬼数字，奇怪的业务逻辑.....烂透的代码根本不值得重构","like_count":0},{"had_liked":false,"id":151122,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1573655456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573655456","product_id":100039001,"comment_content":"1.如果从最开始而言，提高编程的规范，是比较简单有效的<br>2.面向对象在java中的确是十分重要的基础性知识点，包含了封装，继承，多态。如果能够以此为基础，然后稳步向前，是最好不过的了。","like_count":0},{"had_liked":false,"id":151088,"user_name":"瓜瓜","can_delete":false,"product_type":"c1","uid":1053853,"ip_address":"","ucode":"2E98377E48399E","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/9d/19dcdd42.jpg","comment_is_top":false,"comment_ctime":1573652304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573652304","product_id":100039001,"comment_content":"明确代码的职责，每个方法的边界，每个模块的边界，每个系统的边界。","like_count":0},{"had_liked":false,"id":151062,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1241567,"ip_address":"","ucode":"C42E11098E1B38","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","comment_is_top":false,"comment_ctime":1573649778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573649778","product_id":100039001,"comment_content":"编程规范是保证易读的前提，面向对象是设计模式和设计原则的基础，设计模式是设计原则的具体实现，重构是重复使用面向对象，设计原则和设计模式来保证项目的持续可度性，可维护性，可扩展性","like_count":0},{"had_liked":false,"id":150763,"user_name":"成楠Peter","can_delete":false,"product_type":"c1","uid":1252977,"ip_address":"","ucode":"4D13E7368D8CF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","comment_is_top":false,"comment_ctime":1573608190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573608190","product_id":100039001,"comment_content":"提高代码质量的方法，代码检查工具和Code Review。","like_count":0},{"had_liked":false,"id":150732,"user_name":"alls well","can_delete":false,"product_type":"c1","uid":1072439,"ip_address":"","ucode":"8E3EB5A3DF6E0D","user_header":"https://static001.geekbang.org/account/avatar/00/10/5d/37/8261fc68.jpg","comment_is_top":false,"comment_ctime":1573605647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573605647","product_id":100039001,"comment_content":"1.当系统较为简单，可读性就是提高质量的最有效的方法，而当系统越发复杂，就有必要引入统一框架设计模式来指导简化模型，来提高质量。我想知道模块化是属于哪个范畴？<br>2.复杂的特征才能最好支撑复杂模式，面向过程就比较难玩起花样","like_count":0},{"had_liked":false,"id":150485,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1573544201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573544201","product_id":100039001,"comment_content":"1、设计原则吧，因为面向对象起到了对设计原则的更好地支持，设计原则又可以指导设计模式，对于重构时有提供了基础。 其它提高代码质量的方法是学习 数据结构与算法之美，写出高效的代码，高效也代表高质量吧？<br>2、因为设计模式表现为对 对象的组织，对象直接关系的管理？","like_count":0},{"had_liked":false,"id":150401,"user_name":"shniu","can_delete":false,"product_type":"c1","uid":1019555,"ip_address":"","ucode":"E64CD8BED96D8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/a3/d7e5fe8a.jpg","comment_is_top":false,"comment_ctime":1573527820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573527820","product_id":100039001,"comment_content":"1. 首先最简单直接的是编程规范，这个考察的更多是习惯和意识，也是团队的结晶，这是第一要做到的；其次是重构的思想，使用小步迭代，单测，改进的思想去做事情，一步步优化出优质的代码，这个是编程基本功；最后是设计原则和设计模式，这个是高阶技能，需要多思考，多沉淀，真正掌握需要时间，需要一点点尝试用到自己项目中，不可强求；我认为有这样的递进程度，不同水平的人在不同阶段，要向下一阶段进阶。除此之外，还有code review，tdd，结对编程等，都可以提高代码质量<br><br>2. 我理解讲设计模式，需要依赖一种编程范式，老师也讲了主流的有面向过程，面向对象，函数式编程，而面向对象的抽象层次更贴近真实世界，是对行为、状态和个体通信等的高度抽象，函数式编程更偏向处理无状态，面向对象有更好的设计空间和模式沉淀","like_count":0},{"had_liked":false,"id":150369,"user_name":"Young！","can_delete":false,"product_type":"c1","uid":1025221,"ip_address":"","ucode":"2A658CEFD26011","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c5/a53f8bbc.jpg","comment_is_top":false,"comment_ctime":1573523365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573523365","product_id":100039001,"comment_content":"1. 现阶段来看，对于我或者公司来说，编码规范应该是首当其冲解决的问题，首先得让同时看懂代码，当前的情况是，注释没有注释，变量名模糊缩写，可读性特别差，影响时间和效率。在之后随着正确可读的代码规范普及之后，提升设计模式基础知识，尽力使公司的项目代码变得优雅。<br><br>2. 因为还未读过此书，不懂作者的意思，以我现有的知识来看，应该是市面上大多数编程语言都是面向对象的，基于面向对象的设计模式应该是绝大多数，也是最重要的。","like_count":0},{"had_liked":false,"id":150303,"user_name":"黄剑","can_delete":false,"product_type":"c1","uid":1204424,"ip_address":"","ucode":"D7F68DE19F41CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/c8/044dd4a2.jpg","comment_is_top":false,"comment_ctime":1573516661,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1573516661","product_id":100039001,"comment_content":"面向对象，设计原则，设计模式，编程规范，代码重构。","like_count":0},{"had_liked":false,"id":150269,"user_name":"努力努力再努力m","can_delete":false,"product_type":"c1","uid":1644369,"ip_address":"","ucode":"9DD9E9C2988FFC","user_header":"https://static001.geekbang.org/account/avatar/00/19/17/51/3e13dc0c.jpg","comment_is_top":false,"comment_ctime":1573487642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573487642","product_id":100039001,"comment_content":"1.设计原则对提高代码质量最有效吧，因为设计原则是指导我们做代码设计的。<br>2.因为面向对象是编码实现的基础。","like_count":0},{"had_liked":false,"id":150138,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1573467521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573467521","product_id":100039001,"comment_content":"在耗子叔的推荐下买了一本厚厚的《代码大全》，看了其中几章，然后就没有然后了。。。","like_count":0},{"had_liked":false,"id":149962,"user_name":"HF","can_delete":false,"product_type":"c1","uid":1112811,"ip_address":"","ucode":"0839195346C3CC","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/eb/84d4de33.jpg","comment_is_top":false,"comment_ctime":1573436827,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573436827","product_id":100039001,"comment_content":"如何建立一套代码走查机制，来约束别人的代码。这一套人为因素外的框架的东西也需要讲一下。","like_count":0},{"had_liked":false,"id":149939,"user_name":"小畅","can_delete":false,"product_type":"c1","uid":1322880,"ip_address":"","ucode":"D031CC07CD564E","user_header":"","comment_is_top":false,"comment_ctime":1573434612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573434612","product_id":100039001,"comment_content":"养成一个重构的习惯，《重构》这本书也是这样说的","like_count":0},{"had_liked":false,"id":149845,"user_name":"join","can_delete":false,"product_type":"c1","uid":1130132,"ip_address":"","ucode":"C097D89F7BA3EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/94/c6460883.jpg","comment_is_top":false,"comment_ctime":1573401625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573401625","product_id":100039001,"comment_content":"总结：<br>1. 三种主流的编程风格：面向对象（主流）、面向过程、函数式编程。  <br>面向对象四大特征： 封装、抽象、继承、多态。<br><br>2.设计原则：<br>（1）SOLID原则：SRP单一职责原则、OCP开闭原则、LSP里式替换原则、ISP接口隔离原则、DIP依赖倒置原则；  <br>（2）DRY原则：KISS原则、YAGNI原则、LOD原则。 <br><br>3. 设计模式<br>设计原则是更上层的抽象，而是设计模式是设计原则的具体化，是编码经验设计思路的总结，是一种方法论。  <br>设计模式的三种类型：创建型、结构型、行为型。<br><br>4. 编程规范  <br>使代码有更好的可读性，参考书籍《代码整洁之道》。   <br><br>5. 重构  <br>持续重构是保持代码质量不下降的有效手段。重构的工具就是面向对象思想、设计原则、设计模式、编码规范。  <br>开发前期业务相对简单，不一定要使用设计模式，不要过度设计，设计模式的使用应该是在持续重构中使用，没必要在开始就为了使用设计模式而生搬硬套，项目初期业务可能还没有成型也就没法断定使用哪种模式更合适。  ","like_count":0},{"had_liked":false,"id":149844,"user_name":"米 虫","can_delete":false,"product_type":"c1","uid":1073087,"ip_address":"","ucode":"6F35AA8BB8195B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/bf/4bd3eb4b.jpg","comment_is_top":false,"comment_ctime":1573401602,"is_pvip":false,"replies":[{"id":"57682","content":"长短不重要 关键是能否让人一眼就看出命名的含义","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573436337,"ip_address":"","comment_id":149844,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573401602","product_id":100039001,"comment_content":"我可能有病，每次命名的时候，三个单词我就觉得很长。但看一些开源的代码，他们都五六个单词长度。。这些归纳和思考出来的设计模式大多都依赖于面向对象的那几条基本特征。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473994,"discussion_content":"长短不重要 关键是能否让人一眼就看出命名的含义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573436337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149834,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1573397877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573397877","product_id":100039001,"comment_content":"现在大部分书籍介绍面向对象的四个基石的顺序为：抽象，封装，继承，多态。","like_count":0},{"had_liked":false,"id":149776,"user_name":"初心","can_delete":false,"product_type":"c1","uid":1104576,"ip_address":"","ucode":"C090A1723E3474","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/c0/9fc31f2d.jpg","comment_is_top":false,"comment_ctime":1573374437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573374437","product_id":100039001,"comment_content":"设计原则指导设计模式，如何运用面向对象，使用简单办法解决复杂问题","like_count":0},{"had_liked":false,"id":149697,"user_name":"Uncle.席","can_delete":false,"product_type":"c1","uid":1635218,"ip_address":"","ucode":"2A23428FBBAFF0","user_header":"https://static001.geekbang.org/account/avatar/00/18/f3/92/96fe653f.jpg","comment_is_top":false,"comment_ctime":1573347665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573347665","product_id":100039001,"comment_content":"面向对象是设计模式的基础，就像数据结构是算法的基础一个概念","like_count":0},{"had_liked":false,"id":149643,"user_name":"坐看云起","can_delete":false,"product_type":"c1","uid":1199474,"ip_address":"","ucode":"D829864AA23482","user_header":"https://static001.geekbang.org/account/avatar/00/12/4d/72/9915ebb4.jpg","comment_is_top":false,"comment_ctime":1573302500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573302500","product_id":100039001,"comment_content":"要写出好代码，还要对具体语言提供的各种抽象元素合理的使用才行","like_count":0},{"had_liked":false,"id":149561,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1573273570,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1573273570","product_id":100039001,"comment_content":"在大部分的日常开发工作中，因为其实都是专注于业务开发，所以强调代码规范，重构和单元测试是一个非常好的保障代码质量的实践。","like_count":0},{"had_liked":false,"id":149515,"user_name":"quietwater","can_delete":false,"product_type":"c1","uid":1055029,"ip_address":"","ucode":"C25E2CD356D3F9","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/35/be8372be.jpg","comment_is_top":false,"comment_ctime":1573262910,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573262910","product_id":100039001,"comment_content":"单一职责是最重要的。<br>DRY是最基础的。<br>依赖倒置是最难掌握的，很多人以为理解了，但实际上根本没理解。<br>因为这些设计模式都用到了面向对象的特性。","like_count":0},{"had_liked":false,"id":149507,"user_name":"Andy Jiang","can_delete":false,"product_type":"c1","uid":1227279,"ip_address":"","ucode":"436609A0A445CF","user_header":"https://static001.geekbang.org/account/avatar/00/12/ba/0f/9789c2cc.jpg","comment_is_top":false,"comment_ctime":1573260924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573260924","product_id":100039001,"comment_content":"面向对象(封装&#47;抽象、继承、多态)是基础；设计原则和设计模式在设计阶段提高可扩展性；编程规范在具体实现阶段保证代码的可读性；重构涵盖设计和实现，提高可维护性。<br>平时工作中代码的质量保证是通过编程规范和单元测试覆盖率(sonar代码扫描进行衡量)。是否使用设计模式还是得看业务场景，具体问题具体分析。","like_count":0},{"had_liked":false,"id":149493,"user_name":"村长","can_delete":false,"product_type":"c1","uid":1218960,"ip_address":"","ucode":"AB8B2B79387D11","user_header":"https://static001.geekbang.org/account/avatar/00/12/99/90/ca2a8632.jpg","comment_is_top":false,"comment_ctime":1573255233,"is_pvip":false,"replies":[{"id":"57458","content":"具体发出来讲讲 不常用的你们都常用在哪里 ","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573257138,"ip_address":"","comment_id":149493,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1573255233","product_id":100039001,"comment_content":"嗯 组里常用的模式全是“不常用”的模式","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473881,"discussion_content":"具体发出来讲讲 不常用的你们都常用在哪里 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573257138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1218960,"avatar":"https://static001.geekbang.org/account/avatar/00/12/99/90/ca2a8632.jpg","nickname":"村长","note":"","ucode":"AB8B2B79387D11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47015,"discussion_content":"再包括不同的primitive type可以用flyweight模式一次性解决 不需要每次都重新create","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573258686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1218960,"avatar":"https://static001.geekbang.org/account/avatar/00/12/99/90/ca2a8632.jpg","nickname":"村长","note":"","ucode":"AB8B2B79387D11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47010,"discussion_content":"代码分析里不同的expression或者statement需要不同的visitor来manipulate 这种multiple dispatch应该很常见啊\n当需要处理一个expression又不想改变原来的expression的时候用prototype模式来decouple\n用facade模式把不同transform按顺序封装起来统一执行\n等等等等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573258429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149472,"user_name":"Warn","can_delete":false,"product_type":"c1","uid":1465310,"ip_address":"","ucode":"F2F7FCDB0940D0","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/de/152f1c2c.jpg","comment_is_top":false,"comment_ctime":1573227513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573227513","product_id":100039001,"comment_content":"设计原则和代码规范是比较直观的提高代码质量的吧","like_count":0},{"had_liked":false,"id":149444,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1573220734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573220734","product_id":100039001,"comment_content":"1.个人认为设计原则对提高代码质量最有效。<br>设计原则定义了interface，设计模式是设计原则的implementation。<br>我们未必精通每一个设计模式，但深刻理解设计原则是非常重要的。<br><br>2.设计模式一定程度上补充了面向对象编程范式的缺陷。","like_count":0},{"had_liked":false,"id":149399,"user_name":"桃翁","can_delete":false,"product_type":"c1","uid":1044036,"ip_address":"","ucode":"CB438AF450DC00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/44/26ac883e.jpg","comment_is_top":false,"comment_ctime":1573211479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573211479","product_id":100039001,"comment_content":"说下第二个思考题，强调面向对象的原因我觉得是因为这里面大多数设计模式都不适合函数式编程和面相过程的，在设计模式里大量的继承，接口，抽象等都是面相对象的，其他范式没有，对于其他范式有其他的设计模式","like_count":0},{"had_liked":false,"id":149347,"user_name":"William","can_delete":false,"product_type":"c1","uid":1241365,"ip_address":"","ucode":"4499F99B180102","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/15/8fcf8038.jpg","comment_is_top":false,"comment_ctime":1573199160,"is_pvip":true,"replies":[{"id":"57456","content":"抱歉 这个模式在后端开发中确实不常用 我主要是做后端开发 js的东西不怎么了解 ","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573253968,"ip_address":"","comment_id":149347,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1573199160","product_id":100039001,"comment_content":"我是前端工程师，希望争哥也能结合JavaScript聊聊设计模式在前端的应用场景。原型模式在前端应用广泛哦，老师却归为不常用的设计模式？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473826,"discussion_content":"抱歉 这个模式在后端开发中确实不常用 我主要是做后端开发 js的东西不怎么了解 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573253968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149285,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1573183167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573183167","product_id":100039001,"comment_content":"设计原则是价值观，面向对象是工具，设计模式是套路。<br>以价值观为根本，在套路中合理利用工具，方能达到目标。<br>","like_count":0},{"had_liked":false,"id":149259,"user_name":"tao1024","can_delete":false,"product_type":"c1","uid":1274660,"ip_address":"","ucode":"5FCFDB7D8B570D","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/24/199023bb.jpg","comment_is_top":false,"comment_ctime":1573180268,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573180268","product_id":100039001,"comment_content":"老师能不能及早放出一篇干货，先讲第一个设计模式，让读者可以尽快了解讲课的思路和方式。前四篇文章有点浅，不足以体现课程的特点。","like_count":0},{"had_liked":false,"id":149157,"user_name":"Chen","can_delete":false,"product_type":"c1","uid":1503113,"ip_address":"","ucode":"C1128558AB5BC4","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/89/8c73a24d.jpg","comment_is_top":false,"comment_ctime":1573171433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573171433","product_id":100039001,"comment_content":"持续不断的对代码进行重构？老代码根本不敢动😂","like_count":0},{"had_liked":false,"id":149140,"user_name":"旭东(Frank)","can_delete":false,"product_type":"c1","uid":1024486,"ip_address":"","ucode":"176FA629800062","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","comment_is_top":false,"comment_ctime":1573168750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573168750","product_id":100039001,"comment_content":"代码质量检查插件，代码质量扫描有助于初中级开发工程师的代码质量","like_count":0},{"had_liked":false,"id":149139,"user_name":"旭东(Frank)","can_delete":false,"product_type":"c1","uid":1024486,"ip_address":"","ucode":"176FA629800062","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","comment_is_top":false,"comment_ctime":1573168547,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573168547","product_id":100039001,"comment_content":"1.25倍速听的舒服😊","like_count":0,"discussions":[{"author":{"id":1434857,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e4/e9/1ab7a3be.jpg","nickname":"Gandalf","note":"","ucode":"969B80B7128FA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48966,"discussion_content":"怎么操作?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573541434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149135,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1573164492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573164492","product_id":100039001,"comment_content":"面向对象四大特性：<br>封装---对代码划定边界。<br>抽象---接口和实现分离。<br>继承---对象之间的依赖和不对等替换关系。<br>多态---接口可以对应多种实现。<br>","like_count":0},{"had_liked":false,"id":149126,"user_name":"Fun","can_delete":false,"product_type":"c1","uid":1145502,"ip_address":"","ucode":"5D89BA4C678785","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJdUGdEj3R25CrYqibPibYibibRicqUfyL4aTTPbMagyywjKMhXGZE37RTe7lEdvC4DibvtYpzg8zXvt9HQ/132","comment_is_top":false,"comment_ctime":1573150480,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573150480","product_id":100039001,"comment_content":"# day4.<br>中心思想：提纲契领，总体描述面相对象，设计原则，设计模式，代码规范，重构技巧五个部分的学习要点及相互关系。<br>以我个人理解来说，除了编码规范，其他都是务虚的东西。<br>面相对象，是我们认识这个世界的一种方式…它的四大特性（封装，抽象，继承，多态）如雷贯耳，应该没有程序员没听过…贫血、充血模型表示好奇，多用组合少用继承的设计思想愿闻其详~<br>设计原则，多多少少听过，但从没有认真揣摩过。凡事嵌入式程序员都懂…关注的焦点永远都是单板、芯片驱动或功能应用调通…<br>设计模式，23种经典模式，通俗化解释就是编码套路。难能可贵的是知道在什么场景下需要使用什么套路。<br>编码规范，一本《代码整洁之道》足矣。<br>重构技巧，设计思想，原则，模式，规范都是重构的理论基础。<br>五部分串联起来就是，形成一种面相对象的思想，按照前人抽象出的编码原则，使用前人总结过的编码模式，规定团队内部共识的编码规范，开展即将<br>新需求的编码及老代码的重构。<br>最后，今天没有金句，又是一天。","like_count":0},{"had_liked":false,"id":149120,"user_name":"terminator","can_delete":false,"product_type":"c1","uid":1415409,"ip_address":"","ucode":"A8046D047A04AD","user_header":"https://static001.geekbang.org/account/avatar/00/15/98/f1/473f18b7.jpg","comment_is_top":false,"comment_ctime":1573144684,"is_pvip":false,"replies":[{"id":"57478","content":"有实战的 别急","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573281587,"ip_address":"","comment_id":149120,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573144684","product_id":100039001,"comment_content":"个人以为我们在实际开发中进行面向对象开发的时候碰到的最大麻烦还是在于对象的选取定义上。通常书籍中都会以物理世界中的实物作为面向对象中的对象这一概念，而在实际编程中，很多对象的概念都是不具有实际物理世界中的对应实体的，归类哪些属性和方法成为一个合理的对象是一个很有技巧的问题，希望王老师能够在后续课程中加以实例指导","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473741,"discussion_content":"有实战的 别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573281587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149119,"user_name":"卫江","can_delete":false,"product_type":"c1","uid":1101226,"ip_address":"","ucode":"DE2F7A6916F1A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","comment_is_top":false,"comment_ctime":1573144400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573144400","product_id":100039001,"comment_content":"第一题，感觉设计原则是最核心的，不论是设计模式还是重构基本都是遵循设计原则的指导来实践的。<br>第二题，设计模式和重构核心就是解决扩展性的问题，而扩展性就是面向对象思想出现的原因，具体而言就是使用多态来提高扩展性，既对应了核心编程原则：针对于接口编程。","like_count":0},{"had_liked":false,"id":149100,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1573141059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573141059","product_id":100039001,"comment_content":"书写代码遵循标准的规范可以提高团队效率，让写代码从人治变成“法治&quot;；设计原则、设计模式可以让我们以更加简单方便地复用成功的设计和体系结构。<br><br>书名《Design Patterns: Elements of Reusable Object-Oriented Software》中带有“面向对象”是因为书中总结记录的 模式都可以使用标准的面向对象语言来实现。","like_count":0},{"had_liked":false,"id":149095,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1573140392,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1573140392","product_id":100039001,"comment_content":"上面说到的设计原则，设计模式都可以用来提高代码质量，但是只有对业务流程的熟悉，做好抽象，将不变和变化的部分区分好，才能写出更好的代码。另外常用的23种设计模式应该主要是针对面向对象编程。","like_count":0},{"had_liked":false,"id":149091,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1573139810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573139810","product_id":100039001,"comment_content":"第一个问题 我觉得是不断反复看自己写过的代码 基本过一段时间就会回头看一下 虽然那一片代码没怎么用到设计模式（没法用到）但是也在不断思考怎么写会更优雅 然后不断的改进<br><br>第二问题 其实我就看过head first系列的设计模式 也就略懂略懂","like_count":0},{"had_liked":false,"id":149082,"user_name":"星空123","can_delete":false,"product_type":"c1","uid":1596920,"ip_address":"","ucode":"E998A7C585671B","user_header":"https://static001.geekbang.org/account/avatar/00/18/5d/f8/7de2c1cc.jpg","comment_is_top":false,"comment_ctime":1573138122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573138122","product_id":100039001,"comment_content":"老师的课 有必买的冲动","like_count":0},{"had_liked":false,"id":149077,"user_name":"4thirteen2one","can_delete":false,"product_type":"c1","uid":1403309,"ip_address":"","ucode":"085D582DD552DD","user_header":"https://static001.geekbang.org/account/avatar/00/15/69/ad/608188c2.jpg","comment_is_top":false,"comment_ctime":1573137197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573137197","product_id":100039001,"comment_content":"编码规范是基本行为准则，设计模式是在场景下的处事方案，设计原则当然就是人生观价值观世界观了，面向对象则是编程向客观世界的模拟，而重构可以称得上对（小范围）世界秩序的重建。","like_count":0},{"had_liked":false,"id":149043,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1573130525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573130525","product_id":100039001,"comment_content":"至今能看懂的设计模式不超过五种   期待老师的课程！！！！","like_count":0},{"had_liked":false,"id":149042,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1573130488,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1573130488","product_id":100039001,"comment_content":"我认为编码规范对提升代码质量的速度是最快的，首先规范大家的习惯，让代码的可读性提升，前后就是面向对象设计模式了","like_count":0},{"had_liked":false,"id":149027,"user_name":"迈向架构师","can_delete":false,"product_type":"c1","uid":1637228,"ip_address":"","ucode":"2476594CF76001","user_header":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","comment_is_top":false,"comment_ctime":1573128772,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573128772","product_id":100039001,"comment_content":"还可以通过tdd来提高代码质量😄","like_count":0},{"had_liked":false,"id":149019,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1573128107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573128107","product_id":100039001,"comment_content":"抽象业务核心流程，提供核心可扩展的功能，让写业务不再困难。小菜鸡，报到打卡时间。","like_count":0},{"had_liked":false,"id":148953,"user_name":"davidzhou","can_delete":false,"product_type":"c1","uid":1018904,"ip_address":"","ucode":"F4B2929F4111DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/18/7cbc34eb.jpg","comment_is_top":false,"comment_ctime":1573117097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573117097","product_id":100039001,"comment_content":"有效提高代码质量我认为是设计原则和代码重构，设计原则的前3条会在我们创建一个类和实现接口的时候要反复涉及到的，里氏替换原则让我们思考到底是怎么样才需要使用继承，重构应该发生在我们编写代码时候，而不是积累到某一定的技术债务，才来一个版本重构，在不断的开发过程中，我们对需求不断理解渗透，代码也会越来越优化","like_count":0},{"had_liked":false,"id":148834,"user_name":"雷霹雳的爸爸","can_delete":false,"product_type":"c1","uid":1119490,"ip_address":"","ucode":"99BBA6D83DD11F","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/02/66f65388.jpg","comment_is_top":false,"comment_ctime":1573093260,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573093260","product_id":100039001,"comment_content":"课堂讨论举手发言：<br><br>1. 我觉得第一个问题主要在于怎么来看待效率这个问题，设计原则短期内未必能直接派上用场，是具体编程范式如面向对象构造其语言要素得动机，是编码规范制定得指引，是衡量代码重构一些看似矛盾方法如何采用的最根本的判断依据，它本身也是设计模式应对特定场景时所要解决的非功能性需求问题——可扩展性衡量的基础，看老师的图它也是处在一个众星捧月的C位上；要说起来觉得还有什么可以提高代码质量的方法，那，也就是多听多看多学多参考多练习了，除去方法，倒是还应该利用一些手段，可能还需要一些静态检查工具的辅助吧，帮助我们在学习应用这些原则、模式、规范、技巧时，识别具体产出的代码的问题，另外，比如阅读PMD得各条规则，其实也就是学习一些实用得编码规范的过程吧<br><br>2. 这个问题我觉得书名本身其实也讲的很明白，它并非罗列OO的概念，或它是什么，而是怎样来构建可复用的OO的软件的讲解，不这么来应用OO其实就有可能走偏了，那本书开头非章节结构提到的那两个原则反倒为很多人觉得是比具体每个模式阐述有着更深远的意义：基于接口而不是基于类来编程，优先使用组合而不是继承...<br>","like_count":0},{"had_liked":false,"id":148830,"user_name":"weineel","can_delete":false,"product_type":"c1","uid":1049741,"ip_address":"","ucode":"6DC6EF4F256A53","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","comment_is_top":false,"comment_ctime":1573092655,"is_pvip":true,"replies":[{"id":"57461","content":"后面有讲到的 别急","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573257635,"ip_address":"","comment_id":148830,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1573092655","product_id":100039001,"comment_content":"老师您好，为什么说 单例模式 现在是反模式呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473627,"discussion_content":"后面有讲到的 别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573257635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148809,"user_name":"仲夏","can_delete":false,"product_type":"c1","uid":1690965,"ip_address":"","ucode":"2849869C765CDE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cd/55/8c1243dc.jpg","comment_is_top":false,"comment_ctime":1573089407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573089407","product_id":100039001,"comment_content":"老师你好，计算机四门专业课加你出的设计模式是决定一个程序员走的高度是吧，你在介绍里面说这门课已经教透了设计模式和写出高质量代码的全部要点是吧","like_count":0},{"had_liked":false,"id":148802,"user_name":"旭","can_delete":false,"product_type":"c1","uid":1002420,"ip_address":"","ucode":"6AF6518D4F7D0A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/b4/4768f34b.jpg","comment_is_top":false,"comment_ctime":1573088861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573088861","product_id":100039001,"comment_content":"结对编程和代码评审也可提高代码质量","like_count":0},{"had_liked":false,"id":148762,"user_name":"蔡振东","can_delete":false,"product_type":"c1","uid":1040066,"ip_address":"","ucode":"063D9A36EF72FC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/de/c2/037264da.jpg","comment_is_top":false,"comment_ctime":1573083314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573083314","product_id":100039001,"comment_content":" 1、我觉得编码规范和重构对提高代码最有效，刚开始可能不会过度设计，重构时再加；<br>2、因为设计模式建立在面向对象基础上","like_count":0},{"had_liked":false,"id":148737,"user_name":"路伴友行","can_delete":false,"product_type":"c1","uid":1506974,"ip_address":"","ucode":"96B54B7EEAEDAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","comment_is_top":false,"comment_ctime":1573058526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573058526","product_id":100039001,"comment_content":"面相对象，本质是对象间交互。<br>设计模式总结了一套方法，是关于程序运行时 各个实例对象间如何高效交流的方法，所以是面相对象，而不是类。而类只是一组对象的抽象描述。这是我的理解，望大佬们指点 谢谢","like_count":0},{"had_liked":false,"id":148735,"user_name":"小毅","can_delete":false,"product_type":"c1","uid":1016799,"ip_address":"","ucode":"5651C740D68038","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/hg9Tsg2iaBeG6Q5mxiczjw1ph0OvhKziblEIiaOxg4gwQ0Dgia7Fw7pDQ0mM8AL5SJAm2Yavk1RmBJrFd9jKPBQRkOw/132","comment_is_top":false,"comment_ctime":1573057540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573057540","product_id":100039001,"comment_content":"第一题：短期来说肯定是编程规范和设计模式，尤其是编程规范可以立刻提升代码的质量；但中长期来说，一定是设计思想和原则，没有自己的思想和原则的理解，单纯的“严格”执行规范和模式，就很容易教条，不变通了<br>第二题：我认为是因为GoF的23种设计模式是基于OOP总结出来的套路，按照这个套路，即使对OOP的精髓没有理解到位，也能做出高质量的OOP设计","like_count":0},{"had_liked":false,"id":148734,"user_name":"Running","can_delete":false,"product_type":"c1","uid":1006392,"ip_address":"","ucode":"6377B6BD1F01FF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5b/38/42ff18f1.jpg","comment_is_top":false,"comment_ctime":1573057246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573057246","product_id":100039001,"comment_content":"寻找解决问题最简单容易理解的方案，方案简单一般会代码理解起来容易，可维护性好，出问题的概率自然会降低","like_count":0},{"had_liked":false,"id":148728,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1573056082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573056082","product_id":100039001,"comment_content":"1.编码规范最重要。没有统一、良好的编码规范，写各自风格的代码，团队无法协作。其他提高代码质量的方法：TDD（测试驱动开发），结对编程，CodeReview。<br>2.设计模式以面向对象为基础，总结出面向对象编码的一些套路，没有面向对象谈何设计模式。","like_count":0},{"had_liked":false,"id":148712,"user_name":"Juntíng","can_delete":false,"product_type":"c1","uid":1039290,"ip_address":"","ucode":"F6A3B528D6F3FD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/ba/304a9a4a.jpg","comment_is_top":false,"comment_ctime":1573052795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573052795","product_id":100039001,"comment_content":"搭建设计模式学习框架模型，后续持续从模型扩展，落实到细节，待 8个月后的羽翼丰满。","like_count":0},{"had_liked":false,"id":148691,"user_name":"秋惊蛰","can_delete":false,"product_type":"c1","uid":1620344,"ip_address":"","ucode":"3D9A6D5CA9C79F","user_header":"https://static001.geekbang.org/account/avatar/00/18/b9/78/a5804dae.jpg","comment_is_top":false,"comment_ctime":1573049813,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573049813","product_id":100039001,"comment_content":"思考题:<br>1. 掌握设计原则是很有必要的, 原则无关语言, 无关业务, 是基础的东西, 设计模式只是设计原则的具体应用, 很多时候遵循简单的设计原则就可以让代码保持clean, 而且这些原则不光是编码的时候用有, 架构设计也可以参考, 换一种范式的语言也没关系.<br>2. 之所以强调面向对象, 是因为这些模式对其他编程范式不一定适用, 说白了设计模式就是OO的常用套路.","like_count":0},{"had_liked":false,"id":148683,"user_name":"Flash","can_delete":false,"product_type":"c1","uid":1236163,"ip_address":"","ucode":"E285075C9E0B02","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/c3/e4ba51d5.jpg","comment_is_top":false,"comment_ctime":1573048848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573048848","product_id":100039001,"comment_content":"1.我觉得编码规范对提高代码质量最有效，<br>1.1 因为设计原则和设计模式都比较抽象，需要很多经验才能熟练应用，在项目中的程序员都能遵循编码规范的话，编码规范起码能保证代码的可读性，方便持续重构。<br>1.2 前面也说了，代码的阅读次数通常会大于编写和修改次数的，所以遵循编码规范保证代码可读性是很重要的，对提高代码质量也是最重要的。<br>1.3 就像“约定优于配置”，编码规范也优于设计。<br>其他的提高代码质量的方法，CodeReview吧，大家一起看看代码有什么地方让人觉得有坏味道吧<br>","like_count":0},{"had_liked":false,"id":148664,"user_name":"小可爱(๑• . •๑)","can_delete":false,"product_type":"c1","uid":1106190,"ip_address":"","ucode":"1E97973449DBDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/0e/2912db26.jpg","comment_is_top":false,"comment_ctime":1573046421,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573046421","product_id":100039001,"comment_content":"设计模式是需要面向对象语言作为保证的","like_count":0,"discussions":[{"author":{"id":1242483,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/73/f7d3a996.jpg","nickname":"！null","note":"","ucode":"4E5B7922980397","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46052,"discussion_content":"也不是，C语言也可以做到。关键是面向对象的设计思想。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573114716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148661,"user_name":"小可爱(๑• . •๑)","can_delete":false,"product_type":"c1","uid":1106190,"ip_address":"","ucode":"1E97973449DBDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/0e/2912db26.jpg","comment_is_top":false,"comment_ctime":1573046342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573046342","product_id":100039001,"comment_content":"今天学习了怎么从面向对象、设计原则、设计模式、编码规范、重构这几个方面，提高代码的可维护性、可读性、可扩展性，加油。","like_count":0},{"had_liked":false,"id":148646,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1573044319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573044319","product_id":100039001,"comment_content":"不够看不够看","like_count":0},{"had_liked":false,"id":148635,"user_name":"安静的下雪天","can_delete":false,"product_type":"c1","uid":1574961,"ip_address":"","ucode":"3D7DB58BDEED40","user_header":"https://static001.geekbang.org/account/avatar/00/18/08/31/6ebb96dd.jpg","comment_is_top":false,"comment_ctime":1573041786,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573041786","product_id":100039001,"comment_content":"1 我觉得，高手review自己的代码是最高效、最印象深刻的。因为自己刚上班的时候，有位老员工给自己改了一遍代码，告诉我为什么这样改。之后自己再写的时候就会注意到之前指正过的问题，感觉功力突飞猛进😁<br>2 因为面向对象最流行，很多项目都是基于面向对象思想开发的，所以这方面的经验积累的越来越多，设计模式也在此基础上总结出来。","like_count":0,"discussions":[{"author":{"id":1574961,"avatar":"https://static001.geekbang.org/account/avatar/00/18/08/31/6ebb96dd.jpg","nickname":"安静的下雪天","note":"","ucode":"3D7DB58BDEED40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45480,"discussion_content":"面向对象丰富的语言特性（多态、继承、封装）可以实现许多复杂的设计思路，是设计原则、设计模式编码实现的基础。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573042317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148632,"user_name":"夜空咏叹调","can_delete":false,"product_type":"c1","uid":1189074,"ip_address":"","ucode":"CC9350BCF218CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d2/a5e272ce.jpg","comment_is_top":false,"comment_ctime":1573041450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573041450","product_id":100039001,"comment_content":"我觉得重构是对提高代码质量最有效，因为重构其实是对你以前代码以前思路的一种清洗，一种反思，能有助于你提高对以后遇到相同问题的解决效率以及建立一个完整的体系。<br><br>重构真的是代码里很重要的一环。","like_count":0},{"had_liked":false,"id":148623,"user_name":"Eilie","can_delete":false,"product_type":"c1","uid":1245145,"ip_address":"","ucode":"6BAC7E694EDFA6","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/d9/bc7b114a.jpg","comment_is_top":false,"comment_ctime":1573039726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573039726","product_id":100039001,"comment_content":"不断的反省与思考，无限接近于完美。","like_count":0},{"had_liked":false,"id":148568,"user_name":"攀登者","can_delete":false,"product_type":"c1","uid":1074549,"ip_address":"","ucode":"FC26A8AC504C5E","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/75/9c0b9b5b.jpg","comment_is_top":false,"comment_ctime":1573031858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573031858","product_id":100039001,"comment_content":"20191106 彻底理解设计原则是写好的代码的前提","like_count":0},{"had_liked":false,"id":148553,"user_name":"wl","can_delete":false,"product_type":"c1","uid":1392730,"ip_address":"","ucode":"45062AA2460F1F","user_header":"https://static001.geekbang.org/account/avatar/00/15/40/5a/e65e8c40.jpg","comment_is_top":false,"comment_ctime":1573029778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573029778","product_id":100039001,"comment_content":"学习笔记：<br>1、面向对象是一种编程范式，是设计原则、设计模式的基础。<br>以前听过编程范式，一脸懵逼，现在终于知道面向对象、面向过程、函数式编程都是编程范式。<br>2、设计原则是用来指导代码设计的，有很多的设计原则，比如SOLID KISS，但是不要去背，而要去理解这些原则出现的原因，是为了解决什么问题而出现的。<br>3、设计模式，是软件开发中遇到的问题而出现的设计思路，大部分是为了解决扩展性问题。<br>4、编程规范是为了解决代码可读性问题。<br>5、重构，是一个持续的过程，分为小重构和大重构，会用到前面四种理论。<br><br>话题1: 个人觉得持续重构是提高代码质量最有效的方法，再好的代码，也经不住业务的迭代变更和技术的推陈出新，而且重构会用到前面四种理论，把理论应用于实践中，不断优化代码，才能保证代码的高质量性。<br><br>话题2: 这本书还没看过，但是从今天的学习来看的话，猜测是因为面向对象是设计原则和设计模式的基础，所以比较重要吧。<br><br>希望跟着老师学习，能慢慢提高自己的代码质量和编程能力～","like_count":0},{"had_liked":false,"id":148547,"user_name":"依旧木瓜","can_delete":false,"product_type":"c1","uid":1364763,"ip_address":"","ucode":"A77CD9CE9F67EB","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/1b/94a0637b.jpg","comment_is_top":false,"comment_ctime":1573029128,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573029128","product_id":100039001,"comment_content":"设计模式受语言范式影响很大，可能有的语言特性根本就不要设计模式。所以这些只是针对面向对象语言一些应用实践总结出来的可以服用的模式规则","like_count":0},{"had_liked":false,"id":148523,"user_name":"君不得闲","can_delete":false,"product_type":"c1","uid":1101581,"ip_address":"","ucode":"718AA2C9B410BB","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/0d/f4150547.jpg","comment_is_top":false,"comment_ctime":1573024471,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1573024471","product_id":100039001,"comment_content":"我觉得统一的代码规范和恰当的注释和及时更新的文档对于代码质量的提升和可读性的提高是必不可少的。其次是单元测试，可以在重构可以避免引入新的bug。","like_count":0},{"had_liked":false,"id":148498,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1573019921,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573019921","product_id":100039001,"comment_content":"（从可读性角度）提高代码质量最有效的内容，我觉得应该是编程规范。对于刚踏入软件工程师这个行当的新手，让他们在最开始掌握合适的编码规范，对以后的发展大有裨益。<br><br>但掌握面向对象编程的设计思想，也是很重要的。很多工程师编码的现实是：一直打着面向对象编程的旗号，做着过程式开发的基于对象的编程实践。关于程序的可维护、易复用、易扩展，则最需要面向对象的设计思想。<br><br>文中作者已经给出了结论：『面向对象编程具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式等编码实现的基础。』","like_count":0},{"had_liked":false,"id":148496,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1573019155,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573019155","product_id":100039001,"comment_content":"继续学习...","like_count":0},{"had_liked":false,"id":148424,"user_name":"Wiggins","can_delete":false,"product_type":"c1","uid":1078222,"ip_address":"","ucode":"021EE98CF0E4EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/73/ce/23bd3997.jpg","comment_is_top":false,"comment_ctime":1573005723,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1573005723","product_id":100039001,"comment_content":"单元测试是保证代码质量的一个比较好的手段，但是只是面向实现的，而灵活的使用设计模式，才能让代码保证一定的可维护性与可拓展性，延长软件的生命周期","like_count":0},{"had_liked":false,"id":148417,"user_name":"夜萤","can_delete":false,"product_type":"c1","uid":1241220,"ip_address":"","ucode":"533BEA458C02D3","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/84/ad931ccb.jpg","comment_is_top":false,"comment_ctime":1573005460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573005460","product_id":100039001,"comment_content":"我们现在都是贫血模型，不是充血模型","like_count":0},{"had_liked":false,"id":148403,"user_name":"Kumaron","can_delete":false,"product_type":"c1","uid":1383211,"ip_address":"","ucode":"EAF93BE46A8B91","user_header":"https://static001.geekbang.org/account/avatar/00/15/1b/2b/0294718e.jpg","comment_is_top":false,"comment_ctime":1573003373,"is_pvip":false,"replies":[{"id":"57142","content":"可以的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573009837,"ip_address":"","comment_id":148403,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573003373","product_id":100039001,"comment_content":"老师介意这周先将加餐的java知识点部分发布出来么，想先跟着熟悉一下java的知识点。谢谢老师！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473483,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573009837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148373,"user_name":"古古惑惑","can_delete":false,"product_type":"c1","uid":1039710,"ip_address":"","ucode":"37724A018564FF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/5e/2354204d.jpg","comment_is_top":false,"comment_ctime":1572999929,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572999929","product_id":100039001,"comment_content":"编码时牢记设计原则，严格遵守编码规范，使用设计模式对代码进行重构。<br>面向对象语言具有封装，继承，重载等特性，天然适合各种设计模式。","like_count":0},{"had_liked":false,"id":148369,"user_name":"WIZ","can_delete":false,"product_type":"c1","uid":1260348,"ip_address":"","ucode":"313AF84674475C","user_header":"https://static001.geekbang.org/account/avatar/00/13/3b/3c/2947127c.jpg","comment_is_top":false,"comment_ctime":1572999641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572999641","product_id":100039001,"comment_content":"我觉得规范是最重要的，因为不管项目大小，结构是否复杂，都逃不过编码这一步，既然要编码，那么就一定要涉及到编码规范，书写良好的代码让人一看就懂赏心悦目，书写差的代码很容易让人差生逆反心理，当然不是说，其他技巧不重要，只不过我觉得只有做好最基本的，那么那些高端机票才会发挥更大的作用。","like_count":0},{"had_liked":false,"id":148353,"user_name":"力主道","can_delete":false,"product_type":"c1","uid":1178870,"ip_address":"","ucode":"8C2BE1B9B10A28","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/f6/d50bfaf4.jpg","comment_is_top":false,"comment_ctime":1572998120,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572998120","product_id":100039001,"comment_content":"因为，面向对象的封装，继承，抽象，多态，是很多，设计原则和设计模式的的实现基础!然后，<br>其他的提高代码质量的方法，好像没有啥其他的了!","like_count":0},{"had_liked":false,"id":148348,"user_name":"Smirk","can_delete":false,"product_type":"c1","uid":1230263,"ip_address":"","ucode":"F677072767F0A4","user_header":"https://static001.geekbang.org/account/avatar/00/12/c5/b7/87e7e865.jpg","comment_is_top":false,"comment_ctime":1572996191,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572996191","product_id":100039001,"comment_content":"不只是面向对象有设计模式，面向过程和函数式编程也有自己的模式，甚至在面向对象中也会用到些面向过程的模式","like_count":0},{"had_liked":false,"id":148303,"user_name":"Lugyedo","can_delete":false,"product_type":"c1","uid":1011793,"ip_address":"","ucode":"EB5E456B638E70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/70/51/f1825adb.jpg","comment_is_top":false,"comment_ctime":1572970852,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572970852","product_id":100039001,"comment_content":"个人认为代码可读性和编码规范是最重要的，一个团队要有统一的编码规范，写出来的代码可读性高，便于做CodeReview和重构","like_count":0},{"had_liked":false,"id":148299,"user_name":"Rocky","can_delete":false,"product_type":"c1","uid":1023731,"ip_address":"","ucode":"CA33ACBDE8B87B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9e/f3/9c067137.jpg","comment_is_top":false,"comment_ctime":1572970168,"is_pvip":false,"replies":[{"id":"57179","content":"这个话题有点大。函数式编程里本身就集成了很多设计模式，都不需要自己实现了。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573026778,"ip_address":"","comment_id":148299,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572970168","product_id":100039001,"comment_content":"<br>在函数式编程中，这些设计模式还有哪些是适用的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473455,"discussion_content":"这个话题有点大。函数式编程里本身就集成了很多设计模式，都不需要自己实现了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573026778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148297,"user_name":"小北","can_delete":false,"product_type":"c1","uid":1120156,"ip_address":"","ucode":"A428FC9B771108","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ercic1LB9N9P1kArjS1f3hOo641elcwFGHWrxeYF4yZjfwiaydLwVeM4ZJEmVkib66GtJoE0cr6Dviauw/132","comment_is_top":false,"comment_ctime":1572969219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572969219","product_id":100039001,"comment_content":"其实今天讲的五个方面都是提高代码质量必不可少的，但最基础最重要的仍然是面向对象设计和设计模式。<br>设计模式必须建立在面向对象编程基础之上，否则很多设计思想无法实现","like_count":0},{"had_liked":false,"id":148278,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1572967203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572967203","product_id":100039001,"comment_content":"我认设计模式对提高代码质量最有效，因为设计模式已经融入了设计思想和设计原则，是真正落地的环节。如果没有使用合适的设计模式，再怎么遵循编码规范和积极重构，也只是在打补丁。<br>老师罗列的内容涵盖已经很广了，我想到的一些比较小的点，比如“不要炫技”可以被涵盖在KISS原则中。<br><br>因为面向对象的特性是这些设计模式的依托，所以强调面向对象","like_count":0},{"had_liked":false,"id":148260,"user_name":"佳民","can_delete":false,"product_type":"c1","uid":1000433,"ip_address":"","ucode":"A5626BAEC96945","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/f1/3c69eb09.jpg","comment_is_top":false,"comment_ctime":1572965311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572965311","product_id":100039001,"comment_content":"第一个问题我认为设计原则对提高代码质量最有效，遵循设计原则，就会运用好面向对象分析和设计的方法，就会选择对应的设计模式，文中有说“开闭原则”是很多设计模式（策略、模板等）的指导原则，如果追求设计原则，相对来讲写得代码也是符合编程规范的。追求复用、减少重复，追求代码的可读性和可维护性是写好代码的宗旨，熟悉语言的特性和框架的原理、使用好算法和数据结构对写高质量的代码有非常大的帮助，对代码或系统进行拆分也有利于提高代码质量，不过这个应该属于重构。<br>第二个问题我的理解是大部分设计模式只针对面向对象编程思想的，也就是说是面向对象编程特有的，当然书中的设计模式都是面向对象编程语言实现的（C++）。","like_count":0},{"had_liked":false,"id":148216,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1572959372,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572959372","product_id":100039001,"comment_content":"第一题，感觉设计模式最有效，设计原则过于抽象，代码规范粒度太小<br>第二题，只有面向对象的前提才能讨论这些吧<br>最后，跟上大部队了！干！","like_count":0},{"had_liked":false,"id":148185,"user_name":"Victoryli","can_delete":false,"product_type":"c1","uid":1037369,"ip_address":"","ucode":"0D296E383B2090","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d4/39/7b321e92.jpg","comment_is_top":false,"comment_ctime":1572955637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572955637","product_id":100039001,"comment_content":"一口气看完前四节，之前一直没接触过设计模式，开始学起来","like_count":0},{"had_liked":false,"id":148132,"user_name":"真是艹0","can_delete":false,"product_type":"c1","uid":1234043,"ip_address":"","ucode":"0A082CE0D79C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/7b/74e59208.jpg","comment_is_top":false,"comment_ctime":1572946082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572946082","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":148125,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1572944404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572944404","product_id":100039001,"comment_content":"个人认为设计原则最抽象，一旦掌握也是最有用的","like_count":0},{"had_liked":false,"id":148096,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1572940700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572940700","product_id":100039001,"comment_content":"知易行难，想要push别人做到更是难上加难","like_count":0},{"had_liked":false,"id":148061,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1572934535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572934535","product_id":100039001,"comment_content":"感觉重构(不断重构)对提高代码质量最有效。<br>个人感觉：<br>1.现阶段而言不可能直接写出高质量的代码，应该一步一步来<br>2.需求是经常变动的，不断重构可以持续保持 代码的质量","like_count":0},{"had_liked":false,"id":148058,"user_name":"andavid","can_delete":false,"product_type":"c1","uid":1018739,"ip_address":"","ucode":"4CA32B155A682F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/73/5d4dca26.jpg","comment_is_top":false,"comment_ctime":1572934370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572934370","product_id":100039001,"comment_content":"大学里上过面向对象的课，翻过设计模式，看过代码整洁之道和重构，但是从来没有思考过他们之间的联系，知识都是分散的不成体系。看完这篇文章感觉老师真是厉害，竟然能把这些内容都串联起来，佩服！老师有空可以多多分享下学习方法，很值得借鉴。","like_count":0},{"had_liked":false,"id":148043,"user_name":"橘子","can_delete":false,"product_type":"c1","uid":1368522,"ip_address":"","ucode":"EDF6145878F897","user_header":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","comment_is_top":false,"comment_ctime":1572932505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572932505","product_id":100039001,"comment_content":"面向对象的才有，继承和多态的概念，面向过程没有这个概念","like_count":0},{"had_liked":false,"id":148035,"user_name":"张瑞浩","can_delete":false,"product_type":"c1","uid":1242092,"ip_address":"","ucode":"3F37052E1D00FB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLnQfCfmXCPI1icrD2mVlIkY5AVY6MT3VMAYKjDXZYlBgUk6wxBj61vpK1Om3aRlj27R0RYbVoALGw/132","comment_is_top":false,"comment_ctime":1572931204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572931204","product_id":100039001,"comment_content":"设计的原则总是：抽象，封装<br>","like_count":0},{"had_liked":false,"id":148034,"user_name":"Sisyphus235","can_delete":false,"product_type":"c1","uid":1366359,"ip_address":"","ucode":"829CC4CE0FA96E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ooZCPFY1xgC81h0Eu3vuqbWG5MaBp8RNmvXXGQwupo2LpSOLq0rBlTDRAF1yM6wF09WdeG49rA9dJSVKIUBxnQ/132","comment_is_top":false,"comment_ctime":1572931116,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572931116","product_id":100039001,"comment_content":"结对编程可以提高代码质量，只是太难实践，现实中几乎不可行，但是认真执行的 code review 确实能提升系统稳定性，提高代码质量。<br>面向对象则具备了封装、抽象、继承、多态的特性，这提供了设计模式的基础。","like_count":0},{"had_liked":false,"id":148013,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1572928996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572928996","product_id":100039001,"comment_content":"话题2：<br>    其实是个怎么理解“面向对象”这四个字的问题。个人理解，“面向”是构建的意思，“面向对象”就是构建对象，而使用什么东西来构建并不是关注的重点。相对的，还有“基于对象”的概念，指的是使用的就对象，关注的也是使用的这些对象，而用这些对象构建出来的东西则不是关注重点。<br>    回到话题中的问题，《设计模式》关注的是对象的构建过程，所以强调的是“面向对象”，如果关注的是被使用的那些对象，则名字应该改成《设计模式：可复用基于对象软件的基础》，当然，基于对象的模式和面向对象的模式会完全不同。","like_count":0},{"had_liked":false,"id":147982,"user_name":"EndayN","can_delete":false,"product_type":"c1","uid":1006168,"ip_address":"","ucode":"98D020A2BCE34F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/58/47e8e1b7.jpg","comment_is_top":false,"comment_ctime":1572924878,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1572924878","product_id":100039001,"comment_content":"不过组合模式还挺有用的啊。在那种有递归的场景里啊。","like_count":0,"discussions":[{"author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44123,"discussion_content":"组合最后其实是一颗树，结合数据结构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572932566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147962,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1572922720,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572922720","product_id":100039001,"comment_content":"打卡!","like_count":0},{"had_liked":false,"id":147880,"user_name":"阳光很轻","can_delete":false,"product_type":"c1","uid":1619031,"ip_address":"","ucode":"73408E2DA4F10D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKE7VtDBFkSht6VgE4UZL82SlUrDXKVaGVibJSNXsVhfrPTNQ2OfrrOGu7ugMxwa0osyZibRqZjh5KQ/132","comment_is_top":false,"comment_ctime":1572916963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572916963","product_id":100039001,"comment_content":"面向对象，设计原则，设计模式，编程规范，代码重构","like_count":0},{"had_liked":false,"id":147770,"user_name":"Yuuuuu","can_delete":false,"product_type":"c1","uid":1233780,"ip_address":"","ucode":"64FD04761D2111","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/74/578b169d.jpg","comment_is_top":false,"comment_ctime":1572885120,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572885120","product_id":100039001,"comment_content":"在初次编写代码时可读性是最重要的，在维护过程中扩展性是最要的。因为初次编写代码时，我们可能不清楚未来程序的扩展点，而当新需求来时，就给了我们一些提示，我们可以更好的判断是否需要重构，是否需要提供扩展点","like_count":0,"discussions":[{"author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44126,"discussion_content":"结合下许式伟的课程，应该是分清楚哪些会变，哪些不会变。不会变得下沉，会变得就是扩展点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572932963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147754,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1572883778,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572883778","product_id":100039001,"comment_content":"个人认为编码规范最重要，<br>     代码是读的时候多，所以可读性必须好. <br><br><br>","like_count":0},{"had_liked":false,"id":147727,"user_name":"汤小高","can_delete":false,"product_type":"c1","uid":1555565,"ip_address":"","ucode":"D4AB7766273D52","user_header":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","comment_is_top":false,"comment_ctime":1572881517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572881517","product_id":100039001,"comment_content":"个人认为代码是给人看的，因此可读性最重要，所以编码规范就特别重要，其次为了应对未来需求的变化而对现有代码嵌入式更小，所以可拓展性次也很重要，因此设计模式和设计原则第二重要。","like_count":0},{"had_liked":false,"id":147707,"user_name":"GeekAmI","can_delete":false,"product_type":"c1","uid":1005030,"ip_address":"","ucode":"232C0B6DFB9F56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e6/87197b10.jpg","comment_is_top":false,"comment_ctime":1572880178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572880178","product_id":100039001,"comment_content":"最有效的方法还是去一个有牛人的组，组内形成Review代码的氛围，这点美团做的比较好。","like_count":0},{"had_liked":false,"id":147698,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1572879735,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572879735","product_id":100039001,"comment_content":"又读了一遍，感觉不具备（归纳）简洁笔记的能力，记笔记本上了。慢慢消化。","like_count":0},{"had_liked":false,"id":147686,"user_name":"赌神很低调","can_delete":false,"product_type":"c1","uid":1168545,"ip_address":"","ucode":"1066778E1EDF26","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/a1/8bc8e7e1.jpg","comment_is_top":false,"comment_ctime":1572879327,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572879327","product_id":100039001,"comment_content":"写完业务逻看是否需要提炼方法，先不考虑重复，只是为了增加可读性，方法名即注释。完成一个类，看看职责是否太多，否则提炼类。复杂逻辑多思考怎么好写单元测试。多读开源代码增加语感，多读源码分析文章，学会分析和评价，体会好坏。","like_count":0},{"had_liked":false,"id":147666,"user_name":"　扬帆丶启航　","can_delete":false,"product_type":"c1","uid":1235282,"ip_address":"","ucode":"4079D0889CD86C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/52/73351eab.jpg","comment_is_top":false,"comment_ctime":1572877944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572877944","product_id":100039001,"comment_content":"1.编程规范和重构，好的编程规范有利于编写可读性强的代码，重构可以不断的优化代码，提高代码质量。<br>2.面向对象是很多设计原则，设计模式的基础","like_count":0},{"had_liked":false,"id":147665,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1572877729,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572877729","product_id":100039001,"comment_content":"以平时工作来看，编码规范最重要，让自己的代码写的更规范，可读性是肯定会上去的。后面学习设计模式和重构，可以维护代码质量。面向对象是设计模式的基础","like_count":0},{"had_liked":false,"id":147628,"user_name":"小明","can_delete":false,"product_type":"c1","uid":1625618,"ip_address":"","ucode":"5A0357E9849226","user_header":"https://static001.geekbang.org/account/avatar/00/18/ce/12/1488e361.jpg","comment_is_top":false,"comment_ctime":1572874598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572874598","product_id":100039001,"comment_content":"1. 最有效的我觉着还是编码规范，只要编写代码就离不开，而且最好执行；除了老师讲的以外，单元测试的编写也可以提高代码质量<br>2. 第二个问题，我觉着面向过程、函数式编程相当于是个一次性工作，涉及可复用、可扩展这些性能很少吧","like_count":0},{"had_liked":false,"id":147603,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1572872783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572872783","product_id":100039001,"comment_content":"回答问题：<br>1.编码规范和重构。（持续可读的代码是一切的基础）。举个例子：一个业务代码可扩展性和性能都很好，就是可读性很差。看懂要花5天，十个开发看懂共花50天，变更的成本会递增，耗时会随加入的人越多而变得越高。一个业务代码可扩展性和性能都很差，但可读性很高，看懂只要一小时，改这块代码，一个开发要50天，两个分工要25天，5个人只要10天，十个开发只要五天，变更成本固定，耗时不会变，加入人越多完成越快。<br><br>2.因为部分设计模式，就是在面向对象的基础上产生的。","like_count":0},{"had_liked":false,"id":147588,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1572871752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572871752","product_id":100039001,"comment_content":"赶着听赶着忘记，多亏作者后边的一张图，保存了没事看看","like_count":0},{"had_liked":false,"id":147585,"user_name":"暒","can_delete":false,"product_type":"c1","uid":1547048,"ip_address":"","ucode":"9C956F418C66BB","user_header":"https://static001.geekbang.org/account/avatar/00/17/9b/28/9d89de4d.jpg","comment_is_top":false,"comment_ctime":1572871578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572871578","product_id":100039001,"comment_content":"继续更进<br>","like_count":0},{"had_liked":false,"id":147573,"user_name":"不破楼兰终不还","can_delete":false,"product_type":"c1","uid":1145867,"ip_address":"","ucode":"F06EEF04552A90","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/0b/2b5e5da5.jpg","comment_is_top":false,"comment_ctime":1572870786,"is_pvip":false,"replies":[{"id":"57053","content":"可以这么理解","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572947211,"ip_address":"","comment_id":147573,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1572870786","product_id":100039001,"comment_content":"封装、抽象、继承、多态是面向对象的基础，也是代码复用的前提。既然强调复用，面向对象是少不了的咯。可以这么理解么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473266,"discussion_content":"可以这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572947211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1217306,"avatar":"https://static001.geekbang.org/account/avatar/00/12/93/1a/5bb29be9.jpg","nickname":"曹玉磊","note":"","ucode":"BD46077D348F75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43422,"discussion_content":"复用不是面向对象独有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572873583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147569,"user_name":"楠子","can_delete":false,"product_type":"c1","uid":1035603,"ip_address":"","ucode":"386718B191B034","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/53/287bae47.jpg","comment_is_top":false,"comment_ctime":1572870630,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572870630","product_id":100039001,"comment_content":"知易行难","like_count":0},{"had_liked":false,"id":147552,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1572869483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869483","product_id":100039001,"comment_content":"第一问 提高代码质量最有效的我觉得还是设计原则加面向对象吧 这些是基础<br>第二问 就如同我在第一问的回答一样 没有面向对象的那些特性就不会有设计模式","like_count":0},{"had_liked":false,"id":147516,"user_name":"梁军","can_delete":false,"product_type":"c1","uid":1521145,"ip_address":"","ucode":"81E22EFAFD77B4","user_header":"https://static001.geekbang.org/account/avatar/00/17/35/f9/7a682fc1.jpg","comment_is_top":false,"comment_ctime":1572867766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572867766","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":147470,"user_name":"阿崔cxr","can_delete":false,"product_type":"c1","uid":1177565,"ip_address":"","ucode":"26E2C7D96306A4","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/dd/c85f2065.jpg","comment_is_top":false,"comment_ctime":1572865676,"is_pvip":false,"replies":[{"id":"57058","content":"会讲到的：）","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572947679,"ip_address":"","comment_id":147470,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572865676","product_id":100039001,"comment_content":"老师你好，想问下再讲重构的篇章中，会讲到如何加测试嘛？没有测试的保障，那么重构是没有保障的。 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473250,"discussion_content":"会讲到的：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572947679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147381,"user_name":"青青木","can_delete":false,"product_type":"c1","uid":1049870,"ip_address":"","ucode":"2732BA6FBC149D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKILshrJiasJADt0FTdA9x9rJbSeM3t7BUgUxKqBpsZK4Uukg9qwmbOCmLia89VaqsPcKyauGBLRFw/132","comment_is_top":false,"comment_ctime":1572861409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572861409","product_id":100039001,"comment_content":"我觉得不管是设计 还是重构SOLID这5个原则都是最基础的原则","like_count":0},{"had_liked":false,"id":147365,"user_name":"盖瑞Chen","can_delete":false,"product_type":"c1","uid":1029547,"ip_address":"","ucode":"CAD57E0D9F4D3B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b5/ab/0a43c406.jpg","comment_is_top":false,"comment_ctime":1572861017,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572861017","product_id":100039001,"comment_content":"啊，组合模式不常用吗，还是这个组合不是那个组合","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43223,"discussion_content":"不是一个组合 后面就讲到了 别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572864054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147363,"user_name":"mcuallen","can_delete":false,"product_type":"c1","uid":1211069,"ip_address":"","ucode":"AD8511953AD235","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/bd/f314a2ae.jpg","comment_is_top":false,"comment_ctime":1572860973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572860973","product_id":100039001,"comment_content":"谢谢老师准备的全局图，按图索骥，直到成功","like_count":0},{"had_liked":false,"id":147317,"user_name":"Sskkl","can_delete":false,"product_type":"c1","uid":1116516,"ip_address":"","ucode":"BB22A5DF48AFCB","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/64/c2226be3.jpg","comment_is_top":false,"comment_ctime":1572858689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572858689","product_id":100039001,"comment_content":"争哥威武💪🏻","like_count":0},{"had_liked":false,"id":147428,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1572863607,"is_pvip":false,"discussion_count":17,"race_medal":0,"score":"3501971209847","product_id":100039001,"comment_content":"面向对象是武器，设计模式是招式，设计原则是心法<br>以心法为基础，以武器运用招式应对复杂的编程问题","like_count":816,"discussions":[{"author":{"id":1303330,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e3/22/972dacba.jpg","nickname":"大白","note":"","ucode":"34B8D3BA215553","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51217,"discussion_content":"这是硬靠呀。\n\n思想衍生理论，理论指导实践。\n\n原则，模式，规范，分别约束着思想，理论，实践，使其条理化，秩序化。 形成的过程是，自底向上的抽象总结，然后又自顶向下的应用指导。闭环生态。","likes_number":25,"is_delete":false,"is_hidden":false,"ctime":1573825258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1580358,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/ZMALpD4bKCVdsx8ymCC5Oo0oxibxIFGQzT6fP2B8MEgLGLktQRX4ictobkbcNBDTQibjoQNKBmWCKomNibWqHZ5kpg/132","nickname":"Long","note":"","ucode":"D85B99FD0C4B76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1303330,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e3/22/972dacba.jpg","nickname":"大白","note":"","ucode":"34B8D3BA215553","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72690,"discussion_content":"咋两个名字一样，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575516406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51217,"ip_address":""},"score":72690,"extra":""},{"author":{"id":1055722,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1b/ea/4f5661c6.jpg","nickname":"牛头人","note":"","ucode":"DABDEF4F32A812","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1303330,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e3/22/972dacba.jpg","nickname":"大白","note":"","ucode":"34B8D3BA215553","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217754,"discussion_content":"这是一个抽象层次递增的关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585579294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51217,"ip_address":""},"score":217754,"extra":""}]},{"author":{"id":1713885,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/26/dd/9b764dc7.jpg","nickname":"zard_sakai","note":"","ucode":"1466C541F9FB26","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296383,"discussion_content":"我怎么觉得怪怪的，置顶留言中将面向对象作为武器，其实我更觉得面向对象是更高层次的抽象：理由如下\n个人认为，任何设计都是需要针对已有现象，解决问题的。\n1、首先需要有一个支撑思想（类比现实中的国家是社会主义制度还是资本主义制度）\n这个思想可以是：面向过程编程的思想、面向对象编程的思想、面向函数编程的思想\n2、其次需要有一些基本原则（类比现实中的不能违反伦理道德，需要遵守法律原则..）\n这些原则包括：老师讲的设计原则\n3、最后需要有一些具体模式（类比现实中的应试教育、制定刑法这些.....）\n这些模式包括：23种设计模式","likes_number":21,"is_delete":false,"is_hidden":false,"ctime":1596529295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095997,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b9/3d/e061a652.jpg","nickname":"Geek_109a0b","note":"","ucode":"93A45B581947FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47590,"discussion_content":"最抽象的回答\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573375002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1186089,"avatar":"https://static001.geekbang.org/account/avatar/00/12/19/29/4a8214b7.jpg","nickname":"Bug Killer","note":"","ucode":"2741A206F504E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1095997,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b9/3d/e061a652.jpg","nickname":"Geek_109a0b","note":"","ucode":"93A45B581947FC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50561,"discussion_content":"哈哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573734255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":47590,"ip_address":""},"score":50561,"extra":""}]},{"author":{"id":2730262,"avatar":"https://static001.geekbang.org/account/avatar/00/29/a9/16/769ca683.jpg","nickname":"Jaycee","note":"","ucode":"5B78C2731FA302","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388757,"discussion_content":"面向对象是基础，设计原则是原则，设计模式为具体的实施策论。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628938443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/20/e5/f66d6144.jpg","nickname":"九先生","note":"","ucode":"A63A333299D485","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385739,"discussion_content":"还是感觉有点怪怪的，面向对象是设计原则、设计模式实现的基础，它们强关联性，这个类比里，武器有没有其实对心法、招式影响不大","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627258750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1691447,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cf/37/6ed137b9.jpg","nickname":"Dunk","note":"","ucode":"A8F5AB98382719","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366233,"discussion_content":"数据结构与算法才是程序员的内功心法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617984249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1362023,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c8/67/5489998a.jpg","nickname":"John Bull","note":"","ucode":"2A1B4191CD87B8","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546018,"discussion_content":"面向对象是武器有点扯啊，面向对象是设计范式的一种，更像是某种武功；设计原则是心法，适用于不同的武功；设计模式是招式，在具体招式下的发力像数据结构或算法才是武器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642130338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2416157,"avatar":"https://static001.geekbang.org/account/avatar/00/24/de/1d/c1bd26dc.jpg","nickname":"我不是黄蓉我不会武功","note":"","ucode":"E4BE01B01AF1BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343838,"discussion_content":"总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611193401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2033256,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKHxicHW07jz5vB9I8QAonrDXrcFmOS9CtqufVexs0wY1YxH7picctcTMOiaibgVvwkQX3UcicqqUXWTYQ/132","nickname":"Geek_aq","note":"","ucode":"6FFE7A9D746964","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284487,"discussion_content":"精辟老铁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592541293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098720,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","nickname":"技术骨干","note":"","ucode":"8FCF8DE6D29201","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217998,"discussion_content":"老铁说的好啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585613450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019807,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/9f/e49b68ea.jpg","nickname":"幽弥狂","note":"","ucode":"5AECEA7D6ADF33","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216978,"discussion_content":"境界呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585493976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1187197,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","nickname":"somenzz","note":"","ucode":"EA59A170DF8910","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166079,"discussion_content":"总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581347588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241140,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f0/34/d572802b.jpg","nickname":"风流倜傥怪蜀黍","note":"","ucode":"ADBA7EBDC9C7E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50838,"discussion_content":"数据结构是什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573779221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1186089,"avatar":"https://static001.geekbang.org/account/avatar/00/12/19/29/4a8214b7.jpg","nickname":"Bug Killer","note":"","ucode":"2741A206F504E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50562,"discussion_content":"总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573734260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150026,"user_name":"段启超","can_delete":false,"product_type":"c1","uid":1258209,"ip_address":"","ucode":"164CF3018071B2","user_header":"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg","comment_is_top":false,"comment_ctime":1573449496,"is_pvip":false,"discussion_count":22,"race_medal":0,"score":"1938603699992","product_id":100039001,"comment_content":"我觉得今年对我来说，是重新认识“面向对象”的一年。<br>今年事我工作的第三年了（从八月份开始算第三年），年初的时候误打误撞的学了一段时间的DDD，让我瞬间感受到了什么才是面向对象编程，之前自己做的都是用面向对象的语言写面向过程的代码。究其原因，可能是MVC 三层架构的影响，太多人的代码里头只剩下了pojo这种贫血模型。封装，继承，多态，抽象是啥，早就忘干净了。<br>在软件设计方面，很多人习惯了一开始就设计数据库表结构，结果就是代码逻辑跟数据库构成了强耦合，数据库一改，代码基本上会被改个彻底。在这种情况下，我们用的java面向对象的语言，结果却写的是面向过程的代码，这种代码基本没有可维护，可扩展，更没有可测试性一说。所以，面向对象的这个词语，被太多的人只是挂在嘴边上了，落实到代码里边，就成了面向过程。<br>在意识到这个问题后，我花了一段时间重新回顾了一遍面向对象的知识，并试图用来改进代码质量，这个过程是充满坎坷的，我总结了一些自己的体会：<br>1： 要真正落地面向对象编程，面向对象设计是前提，没有面向对象的设计意识，写着写着就成了面条代码。<br>2：以前只知道封装、继承、多态，全然忽视了最重要的抽象，抽象是封装、继承、和多态的基础。合理的抽象源于对业务主体的合理分析和认识。合理的抽象，应该是自洽的，易于理解的。<br>3：关于组合和聚合的关系，最核心的区别就是生命周期的区别，组合关系中，整体和部分是一个整体，离开了整体，部分没有意义，同时产生，同时销毁，而聚合关系中，部分单独存在也可以是有意义的。<br>4：别滥用继承，继承的作用更多的时候使用多态的特性。<br>关于UML ：<br>在工作的过程中，试着画过UML图，UML图有着自己一条完整的语言和生态，学习成本还是相当高的，问题在于，即使用了标准的UML 图，如果沟通过程中，对方不懂，也依然效果不大，所以我对UML的感觉就是: 能看懂，会画基本的即可，没必要太追求标准化，虽然如此，但是UML 还是很重要的，它的意义是提供一种面向对象设计的表达方式，是学习面向对象设计中不可缺少的一部分（个人理解）。","like_count":452},{"had_liked":false,"id":147468,"user_name":"帆大肚子","can_delete":false,"product_type":"c1","uid":1529040,"ip_address":"","ucode":"3DB11DB2FA1802","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/d0/4e1fc664.jpg","comment_is_top":false,"comment_ctime":1572865531,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1315832858107","product_id":100039001,"comment_content":"函数是相对比较小的可复用单位<br>面向对象把可复用单位提升到类层次<br>设计模式把可复用单位提升到框架层次","like_count":307,"discussions":[{"author":{"id":1905357,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/12/cd/55e25527.jpg","nickname":"咕咕噜噜","note":"","ucode":"E9045BF11FAB7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221070,"discussion_content":"我觉得还是应该根据业务需求来判断，拿到的主机名为空是什么原因？会影响业务吗？如果允许主机名为空属于正常情况且不影响业务，完全不需要抛异常啥的，正常返回id就可以。但是如果主机名为空会影响业务需求那就不应该兼容这个错误，直接往上面抛异常就可以了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585970894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2234620,"avatar":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","nickname":"江南一笑","note":"","ucode":"E38938A1178827","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1905357,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/12/cd/55e25527.jpg","nickname":"咕咕噜噜","note":"","ucode":"E9045BF11FAB7C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378019,"discussion_content":"即便主机名会为空影响了业务需求，也不应该有这个id generator来发现这个问题。而应该由其他相关的业务代码去发现这个问题。id generator就是用来生成id的，不应该耦合其他职责。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1623020399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":221070,"ip_address":""},"score":378019,"extra":""}]},{"author":{"id":2076251,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/ae/5b/4bd42286.jpg","nickname":"宋计洋","note":"","ucode":"9A34E8F71C6CBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558395,"discussion_content":"我觉得抛不抛出都是可以的，取决于写这个函数的人，我们在使用一些工具类的时候也会参考文档或注释看他会不会抛出异常。我更倾向于抛出，hostName按理只在启动时获取一次就行了，在应用启动时，没有报错，我们可以断定它运行中也不会报错，启动时报错了，这要去找原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648278695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609051,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","nickname":"charmsongo","note":"","ucode":"4FBEE716E93A1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405975,"discussion_content":"赞同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634686462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345054,"discussion_content":"是的，跟我想的差不多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611648888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159190,"discussion_content":"总体赞成，具体来说，“另外对于小王的异常处理我认为是可以捕获处理的，只是不能该让整个函数都返回一个空id，而是应该捕获异常时使用一个默认主机名继续后面的逻辑”，这就意味着不向上抛出异常，对嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580656417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1132337,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","nickname":"小晏子","note":"","ucode":"3AAA6FB5ACB6AE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159351,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580688702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":159190,"ip_address":""},"score":159351,"extra":""}]},{"author":{"id":1102357,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d2/15/4d43d05a.jpg","nickname":"天空只能仰望？","note":"","ucode":"D87BF6A57DAB42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158639,"discussion_content":"比较赞成这个观点，和我想的差不多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580610394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147522,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1572868046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"293630644174","product_id":100039001,"comment_content":"第二题，文中已经给出答案了?<br>主要是因为面向对象编程因为具有丰富的特性(封装抽象继承多态)，可以实现很多复杂的设计思路，<br>是很多设计原则、设计模式等编码实现的基础。","like_count":68},{"had_liked":false,"id":148313,"user_name":"于留月","can_delete":false,"product_type":"c1","uid":1048918,"ip_address":"","ucode":"DE3516198CF1B2","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/56/03fb63d9.jpg","comment_is_top":false,"comment_ctime":1572972872,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"233501206856","product_id":100039001,"comment_content":"个人认为重构对提高代码质量最有效，原因：<br>重构的基础就是面向对象、设计原则、设计模式、编程规范；<br>重构是一个持续的过程，能够兼顾项目进度、项目开发效率和项目质量，既可以避免前期的过度设计，又能避免后期代码腐化，从而保证代码的质量不下降以致不断提高代码质量；<br>通过单元测试等相关手段，保证重构的正确性<br>重构可从代码层次、项目阶段、开发周期、人员规模等不同纬度进行<br><br>其他提高代码质量的方法：<br>阅读高质量框架代码，先模仿；<br>代码Review，定期总结；<br>技术分享，倒逼输出，看了、做了都不如说给比人听更有效果；<br>工具检查（如lint、leakcanary等），开发过程中避免常识性错误和隐藏问题；<br><br>为什么它在标题中会特意提到“面向对象”呢？<br>因为设计原则、设计模式实现大部分都是基于面向对象的特性（封装、抽象、继承、多态）实现的","like_count":54,"discussions":[{"author":{"id":1474356,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3F4IdQuDZrhN8ThibP85eCiaSWTYpTrcC6QB9EoAkw3IIj6otMibb1CgrS1uzITAnJmGLXQ2tgIkAQ/132","nickname":"cugphoenix","note":"","ucode":"80101AF04C00D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204472,"discussion_content":"看了GitHub代码，感觉formatID这个函数起名不好，从名称+参数列表看上去，并不会知道里面还会额外加上一个“时间”","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584177326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1474356,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3F4IdQuDZrhN8ThibP85eCiaSWTYpTrcC6QB9EoAkw3IIj6otMibb1CgrS1uzITAnJmGLXQ2tgIkAQ/132","nickname":"cugphoenix","note":"","ucode":"80101AF04C00D3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204480,"discussion_content":"好的，谢谢建议！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584178739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204472,"ip_address":""},"score":204480,"extra":""}]},{"author":{"id":1092169,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","nickname":"落尘kira","note":"","ucode":"D203B519E43F85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256610,"discussion_content":"重构里面有个分歧点是 究竟写多少代码才需要写/运行一次单元测试用例，有的人喜欢全部写完后补，有的人喜欢写一个就补一个；我的想法是 看项目进度：如果是时间紧张，尤其是倒排期或者紧急的需求，要保证对接方能早点联调，我们就需要先快速发布一些接口上去，早点完成部分接口可调，加快进度，这就适合前者；否则就是后者，慢慢写嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588503715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176024,"discussion_content":"你们GitHub叫啥？我 wyyl1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582015802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176055,"discussion_content":"get!我的gdhucoder ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582018738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":176024,"ip_address":""},"score":176055,"extra":""}]},{"author":{"id":1254392,"avatar":"https://static001.geekbang.org/account/avatar/00/13/23/f8/24fcccea.jpg","nickname":"💢 星星💢","note":"","ucode":"A402B765222C35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174993,"discussion_content":"向辣么大 大哥 靠齐。好欣赏你，不知道咋关注你的动态。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581947676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1254392,"avatar":"https://static001.geekbang.org/account/avatar/00/13/23/f8/24fcccea.jpg","nickname":"💢 星星💢","note":"","ucode":"A402B765222C35","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":175545,"discussion_content":"加油加油，都是普通人，哪有什么厉害的。github互相关注吧😀你叫啥？我github经常更新push代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581977905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":174993,"ip_address":""},"score":175545,"extra":""}]}]},{"had_liked":false,"id":151674,"user_name":"陈拾柒","can_delete":false,"product_type":"c1","uid":1473069,"ip_address":"","ucode":"22213E2FA5143A","user_header":"https://static001.geekbang.org/account/avatar/00/16/7a/2d/e3a5c52e.jpg","comment_is_top":false,"comment_ctime":1573778514,"is_pvip":false,"replies":[{"id":"58339","content":"嗯嗯，加餐里有讲到的。","user_name":"作者回复","comment_id":151674,"uid":"1190123","ip_address":"","utype":1,"ctime":1573785659,"user_name_real":"王争"}],"discussion_count":5,"race_medal":0,"score":"212027176018","product_id":100039001,"comment_content":"再好的理论，应用不到实际中也是白费。所以对于提升代码质量，最有效的是编码规范，其次是设计原则，再次是代码重构，最后才是面向对象和设计模式。<br>整个排序是按照我理解的难易程度来进行的。一般一个项目都是多人开发，多人并行开发中，考虑到团队中技术水平不一，保持代码质量最好的方式就是先制定编码规范，大家最容易达成一致并遵守。其次是设计原则，因为它相对来讲更明确，违反设计原则基本等于硬伤，更容易得到认同。代码重构是需要长期去做的，甚至不是在开发过程中而是在维护过程中去做的，所以排在第三位。后面两项更多的要考虑实际情况，不同水平的人甚至相同水平的人都会有自己不同的理解，比较难以达成统一，项目排期足够还好，一旦排期不足，很可能在当时没那个成本去谈论这些。<br><br>第二个问题老师已经回答了，因为面向对象的特性是其他的基石。<br><br>建议老师在后续课程中，除了讨论如何提升自己的代码质量，也讨论一下在一个多人团队中如何提升团队的代码质量，有哪些比较好的手段可以去应用。包括在项目排期比较紧的时候，可以有哪些方式去保证代码质量。","like_count":49,"discussions":[{"author":{"id":2159964,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f5/5c/86e87361.jpg","nickname":"default","note":"","ucode":"21FF7DA4A8C4FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333408,"discussion_content":"用英文注释  突然感觉代码高大上了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607514289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147336,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1572859766,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"212026257270","product_id":100039001,"comment_content":"建议和左耳的程序员练级攻略结合起来一起读。<br>上述道理 ，知易行难，一起加油。","like_count":49,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482208,"discussion_content":"也可以，不过尽量的缩小变量的作用域，代码可读性也好，毕竟random只会用在某个函数中，而不是用在多个函数中，放到局部函数中，也符合封装的特性，不暴露太多细节。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1580114083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475866,"avatar":"https://static001.geekbang.org/account/avatar/00/16/85/1a/fc016813.jpg","nickname":"萧潇","note":"","ucode":"1FA83092845507","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401420,"discussion_content":"。。。这玩意不是线程安全的啊 想静态就用ThreadLocalRandom","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633664172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1220273,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9e/b1/758f2fe7.jpg","nickname":"香","note":"","ucode":"121D6CECECEEC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340254,"discussion_content":"我赞同，变量作用域尽可能小。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609938373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148204,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1572958011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"130421976891","product_id":100039001,"comment_content":"最近一直在思考一个问题，就是我们在开发过程中，写好代码，应该是一个程序员必备的基本功。这个好字就是这老师说的高质量的代码，以前一直觉得要追求最热最新的技术，不然就会被淘汰。其实忘记了一个最基本的事情，怎么写好代码，写高质量的代码，这个才是我们开发过程中的重点，写好代码应该是一个合格的程序员必备的技能，毕竟写代码才是我们真真正正吃饭的家伙。老师出的这个专栏真的是太好了，教大家怎么样做好我们程序员最基本的事情。","like_count":30},{"had_liked":false,"id":148400,"user_name":"兔2🐰🍃","can_delete":false,"product_type":"c1","uid":1096984,"ip_address":"","ucode":"1FEDA044BB6CBD","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/18/2af6bf4b.jpg","comment_is_top":false,"comment_ctime":1573003218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"113242152914","product_id":100039001,"comment_content":"总结：提高代码质量的方法论，包含面向对象（基础），设计原则（指导方针），设计模式（三大类，提高扩展性），编程规范（提高可读性），重构（保证代码质量）。","like_count":26},{"had_liked":false,"id":148183,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1572955582,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"104652170686","product_id":100039001,"comment_content":"看起来都明白，讲起来都不清","like_count":24,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482165,"discussion_content":"感谢认可，暂时没有呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580115107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1216284,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8f/1c/1c728388.jpg","nickname":"皮卡皮卡","note":"","ucode":"D440EEC7301C76","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147943,"discussion_content":"极客时间有从零学架构的课程了，目前学习的人还挺多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579682214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150127,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1573465493,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"91767778709","product_id":100039001,"comment_content":"设计原则<br>SOLID：<br>Single Responsibility Principle：单一职责原则：一个东西就一个功能<br>Open Closed Principle：开闭原则  修改的时候，要保留原来的功能<br>Liskov Substitution Principle：里氏替换原则：避免子类重写父类中已经实现的方法<br>Law of Demeter：迪米特法则 ：尽可能的少暴露自己的接口，能不 public 就不 public<br>Interface Segregation Principle：接口隔离原则   1.接口里不要有其它的功能，比如查一个订单的，你调个接口还查一遍用户，浪费数据库消耗2.不要影响到实现类，比如你突然throws异常<br>Dependence Inversion Principle：依赖倒置原则：尽可能使用接口或抽象类<br><br>DRY原则：Don&#39;t Repeat Yourself ，是指编程过程中不写重复代码，将能够公共的部分抽象出来<br><br>KISS：keep it simple、傻屌(s)<br>YAGNI:You Ain’t Gonna Need It.指的是只需要将应用程序必需的功能包含进来，而不要试图添加任何其他你认为可能需要的功能。比如绑个银行卡，就不要浪费时间来记录绑定时的验证码<br>设计模式<br><br>1. 创建型常用的有：单例模式、工厂模式（工厂方法和抽象工厂）、建造者模式。不常用的有：原型模式。<br>2. 结构型常用的有：代理模式、桥接模式、装饰者模式、适配器模式。不常用的有：门面模式、组合模式、享元模式。<br>3. 行为型常用的有：观察者模式、模板模式、策略模式、职责链模式、迭代器模式、状态模式。不常用的有：访问者模式、备忘录模式、命令模式、解释器模式、中介模式。<br><br>编程规范<br>命名等等那些东西，具体的可以看《阿里的JAVA规范》<br><br>代码重构 <br>ctrl+alt+M<br><br><br>原则是基础，模式是套路，规范是可读，重构是行为<br><br>1.目前我做的最有效也正在改的是规范，原则和模式都要大概，容易出错<br>2.用对象的原因，吧东西做成了对象，你就也有了操作对象，也就有了开始，","like_count":22,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501337,"discussion_content":"拆出来的目的并非为了单元测试，更重要的是逻辑清晰，可读性好。之所以设置成potected的，是因为private的没法写单元测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594781420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103960,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d8/58/1f5f7aed.jpg","nickname":"HYH","note":"","ucode":"F2A339CC9AC594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291363,"discussion_content":"增加可读性这部分了解了，那是否我也可以拆出private方法就好，而统一透过generate去测试里面所有private的相关逻辑呢？这样的方法是否有不妥之处？\n谢谢老师的回答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594793119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1103960,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d8/58/1f5f7aed.jpg","nickname":"HYH","note":"","ucode":"F2A339CC9AC594","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589067,"discussion_content":"好问题啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664377997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":291363,"ip_address":"北京"},"score":589067,"extra":""}]}]},{"had_liked":false,"id":147772,"user_name":"Yayu","can_delete":false,"product_type":"c1","uid":1058015,"ip_address":"","ucode":"5E7842458D8229","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","comment_is_top":false,"comment_ctime":1572885576,"is_pvip":false,"replies":[{"id":"57047","content":"后面会讲到，等讲到了就明白了","user_name":"作者回复","comment_id":147772,"uid":"1190123","ip_address":"","utype":1,"ctime":1572946436,"user_name_real":"王争"}],"discussion_count":10,"race_medal":0,"score":"65997395016","product_id":100039001,"comment_content":"面向对象的特征也未必包含“继承”这一点吧，比如 Go 语言就没有提供“继承”这个特性，取而代之的是，推荐使用“组合”。但不能说它不支持面向对象编程。那么我们在探讨“面向对象”这个范式时，需要更深刻的去思考“面向对象”的本质是什么。而不是用Java 中的概念来一以概之。希望王争老师参考。","like_count":15,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482197,"discussion_content":"好像没有吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580115294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098286,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","nickname":"blacknhole","note":"","ucode":"271682FFE28F25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156473,"discussion_content":"还应包含边界，也即应改为：\nAssert.assertTrue((&#39;0&#39; <= c &amp;&amp; c <= &#39;9&#39;) || (&#39;a&#39; <= c &amp;&amp; c <= &#39;z&#39;) || (&#39;A&#39; <= c &amp;&amp; c <= &#39;Z&#39;));","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1580369178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098286,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","nickname":"blacknhole","note":"","ucode":"271682FFE28F25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156468,"discussion_content":"当然错了，应该是：\nAssert.assertTrue((&#39;0&#39; < c &amp;&amp; c < &#39;9&#39;) || (&#39;a&#39; < c &amp;&amp; c < &#39;z&#39;) || (&#39;A&#39; < c &amp;&amp; c < &#39;Z&#39;));","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580368409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236953,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/d9/a90b2488.jpg","nickname":"learning","note":"","ucode":"14CE94C24F9C87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218993,"discussion_content":"前两个都是c大于某个值，你这测试用例真的运行了么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585721379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1596868,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/YJHQDzuLavGFmwunybBiaBrrU1aOib7Siam0fJrWIaHfdT0p2GicsRT42d9bhRNO324wewDtic8RiaokAFkUyO3YRF0g/132","nickname":"胡子高兴了","note":"","ucode":"A32AE341E3683D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164438,"discussion_content":"要加=号","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581174714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148305,"user_name":"小学一年级","can_delete":false,"product_type":"c1","uid":1217230,"ip_address":"","ucode":"59B9805D7C2D92","user_header":"https://static001.geekbang.org/account/avatar/00/12/92/ce/9d24cb2c.jpg","comment_is_top":false,"comment_ctime":1572971252,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"61702513396","product_id":100039001,"comment_content":"设计原则是高手的内功，设计模式是少林，武当，峨眉派的武术套路，规范是招式 出拳还是横扫，重构是组合拳 融汇贯通各种组合，而想练好这些武功还要有扎实的基本功 面向对象。","like_count":15,"discussions":[{"author":{"id":1200650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/0a/65976e95.jpg","nickname":"kougazhang","note":"","ucode":"E9AD678FCEC75D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539272,"discussion_content":"python行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639653874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147640,"user_name":"lijun","can_delete":false,"product_type":"c1","uid":1116095,"ip_address":"","ucode":"69EC8B86211AD9","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/bf/49f385ec.jpg","comment_is_top":false,"comment_ctime":1572875551,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"61702417695","product_id":100039001,"comment_content":"有的时候业务复杂，代码就被业务牵着鼻子走，尤其是老项目，既存代码写的可读性差，但是时间紧任务重，能跑就行……哎","like_count":14,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482275,"discussion_content":"有可能hostname会改变，你的代码就获取不到最新的hostname","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580112152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1217874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/95/52/ad190682.jpg","nickname":"Mr wind","note":"","ucode":"484F02D1962239","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":152152,"discussion_content":"需要考虑的是主机名的更改，以及第一次加载有异常。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579947135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172796,"user_name":"王子瑞Aliloke有事电联","can_delete":false,"product_type":"c1","uid":1249400,"ip_address":"","ucode":"9ABE8E475E336B","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/78/29bd3f1e.jpg","comment_is_top":false,"comment_ctime":1579314551,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44528987511","product_id":100039001,"comment_content":"方法：<br>掌握心法（面向对象），内功（设计原则），招式（设计模式），经验（重构技巧和编程规范），常练习（写高质量代码），与人切磋（相互review）.<br>最近想学太极，总是练习武术。","like_count":10},{"had_liked":false,"id":147803,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1572905852,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"35932644220","product_id":100039001,"comment_content":"GoF的提出是针对解决面向对象编程中遇到的问题，所以书名中强调“面向对象”。It’s a book<br>of design patterns that describes simple and elegant solutions to specific problems<br>in object-oriented software design. ","like_count":8},{"had_liked":false,"id":178357,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1581668537,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"27351472313","product_id":100039001,"comment_content":"从依赖关系上看，设计模式&amp;编码规范依赖设计原则，设计原则依赖面向对象 | 面向过程 | 函数式编程，也就是面向对象这种设计思想是基础，作为工程师，我们直接打交道的是设计模式和编码规范，这是我们落地设计原则和面向对象设计思想的地方，看问题抓本质，那么我们讲面向对象编程到底在讲什么呢？我的理解是通过封装、继承、多态和抽象这些特性完整表达一件事情，可以是名词也可以是动词。直观的例子是如何把大象装进冰箱这个案例，面向过程是1）打开冰箱；2）把大象装进去；3）把冰箱关上，依次完成这些过程就能把大象装进冰箱。好，我们看看面向对象怎么处理这个问题，1）冰箱你给我把门打开；2）冰箱你给我把大象装进去；3）冰箱你给我把门关上。看起来是否没啥区别，这里每个动作都多了执行者，也就是这里的冰箱，也就是冰箱会有三个功能：开门、装大象、关门，也就是每一个动作都必然会有一个执行者，执行者怎么产生呢？不就是对象本身么，冰箱是一个对象，大象也是一个对象，冰箱具有装大象的能力，怎么装呢，开门、装大象和关门啊！发现了么，面向对象隐藏了装大象的细节，冰箱的开门、装大象和关门都是对象本身的功能（方法），理解了面向对象后才能更好理解设计原则设计模式这些东西，这些都是一些写出高质量代码的经验总结，说白了就是套路，我理解设计原则可以帮助我们看懂一些开源框架的代码，学习Apache大佬们是怎么写代码的，从而内化为自己的能力。最后想说一点高质量代码的实践，多考虑异常和兜底场景，给代码留出足够的安全边际，所以说健壮性很重要啊","like_count":6},{"had_liked":false,"id":148855,"user_name":"不与三季人说","can_delete":false,"product_type":"c1","uid":1693164,"ip_address":"","ucode":"A3F03832309FDD","user_header":"https://static001.geekbang.org/account/avatar/00/19/d5/ec/3d6e7ea7.jpg","comment_is_top":false,"comment_ctime":1573095099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27342898875","product_id":100039001,"comment_content":"导读部分的最后一节课了，明白了编程思想、设计原则。设计模式。编码规范和重构的意思，之前也有了解，这次通过老师解读，理解变得更清晰了，有了面向对象的设计思想，才有了适合这种思想的设计原则，设计原则是设计系统和代码应该考虑的问题，在满足部分原则的情况下，针对具体的场景，有了设计模式，设计模式的出现就是为了最大可能的满足设计原则，至于编码规范，可以提高代码的可读性和不同程序员直接的一个约定一样的，没有规范不影响计算机运行程序，但是在项目交接和团队合作的时候会变得很麻烦，重构也是一个项目的必经阶段，好的代码重构起来也会很方便，而不是牵一发动全身。<br>提高代码质量的方法还有就是写注释吧，代码注释可以很大程度的增加可读性。<br>设计模式之所以加上面向对象，是因为设计模式是基于设计原则而设计出来的具体执行方法，而设计原则是根据设计思想衍生出的，设计思想是面向对象，所以才有了设计原则和设计模式。<br>编程思想就像是宪法，在宪法的基础上细化的法规就相当于设计原则，而设计模式就相当于条例，是具体的体现。","like_count":6},{"had_liked":false,"id":189735,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1584544305,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23059380785","product_id":100039001,"comment_content":"去年刚考过系统架构设计师，设计模式在这门高级软考中属于很重要的一块，我对各个模式现在就只能记得他们的名称和分类，至于深入的理解谈不上，更别提实际应用了，总知当时也只是为了应考，总算考过了值得庆幸。这次打算跟着老师好好学习。","like_count":5},{"had_liked":false,"id":148351,"user_name":"zachary","can_delete":false,"product_type":"c1","uid":1349192,"ip_address":"","ucode":"2559469DCF083F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/HRicO9C2gHpCxibedw0370AtpeqE9uo5kkBW4XCrsF9btibJPIq4vSribYdsjiaOFPK7YMfNmSSdIQlUMXGwgicTLTCg/132","comment_is_top":false,"comment_ctime":1572997603,"is_pvip":false,"replies":[{"id":"57178","content":"后面会讲到的，别急哈","user_name":"作者回复","comment_id":148351,"uid":"1190123","ip_address":"","utype":1,"ctime":1573026595,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"23047834083","product_id":100039001,"comment_content":"争哥，设计模式有三种类型：<br>创建型：这个好理解，就是用来创建对象的一些模式<br>结构型和行为型不好理解，结构体现在哪里？行为又体现在哪里？能否说的更具体点？","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482183,"discussion_content":"我英语也不好，多花点心思优化一下，实在不行，写中文注释也是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580114185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589068,"discussion_content":"小争哥在Google时不用英文交流？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664378154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149174,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1573173314,"is_pvip":false,"replies":[{"id":"57473","content":"学了后面章节就明白了","user_name":"作者回复","comment_id":149174,"uid":"1190123","ip_address":"","utype":1,"ctime":1573281298,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"18753042498","product_id":100039001,"comment_content":"我看到设计原则中还有迪米特法则(Law of Demeter, LoD)，这个也是解决God类的一种方式。另外这个法则，好像跟组合复用相背呢。帮忙解释一下。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500684,"discussion_content":"一般来讲，一个单元测试类对应一个类。你说的可能更像是集成测试了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594112838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148648,"user_name":"vivi_lee","can_delete":false,"product_type":"c1","uid":1027680,"ip_address":"","ucode":"166D8CB1648300","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/UswOHxYIocRX8Lzhxbotte13bKzRhk9fexAXVzGeibljibY15g30PwolaDOQvQyKsBtJziaFasu67qVCU4fib5ZKIQ/132","comment_is_top":false,"comment_ctime":1573044395,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18752913579","product_id":100039001,"comment_content":"周末准备考架构师，才发现自己对这些理论理解有困难。同事提醒论文会考设计模式，刚好课程就出来了👻","like_count":4,"discussions":[{"author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294313,"discussion_content":"这还有考证吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595853148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082785,"avatar":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","nickname":"郭俊杰","note":"","ucode":"D328E5738A4413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261675,"discussion_content":"设计模式，选择是必考题，案例和论文是选考题，哥已过，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588991168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1851743,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/41/5f/b08562bf.jpg","nickname":"小麦VictorMak","note":"","ucode":"2331AD5B63B5D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1082785,"avatar":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","nickname":"郭俊杰","note":"","ucode":"D328E5738A4413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308396,"discussion_content":"也准备报考，备考过程能分享一下吗？谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600937870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":261675,"ip_address":""},"score":308396,"extra":""}]}]},{"had_liked":false,"id":149587,"user_name":"Geek_222ec6","can_delete":false,"product_type":"c1","uid":1736229,"ip_address":"","ucode":"9B5C085CEDFF95","user_header":"https://static001.geekbang.org/account/avatar/00/1a/7e/25/a6fd1326.jpg","comment_is_top":false,"comment_ctime":1573284162,"is_pvip":true,"replies":[{"id":"57500","content":"理解是对的。这个正常，一个好的命名确实要花点时间想的","user_name":"作者回复","comment_id":149587,"uid":"1190123","ip_address":"","utype":1,"ctime":1573287081,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"14458186050","product_id":100039001,"comment_content":"设计原则是指导设计模式的更抽象的理论（这么说应该对吧）<br><br>另外有个困惑就是在编码规范的时候，自我感觉英语还可以，但是函数，变量命名的时候经常会犯纠结症和强迫症。。。不知道怎么命名才好。<br><br>","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473909,"discussion_content":"理解是对的。这个正常，一个好的命名确实要花点时间想的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573287081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391199,"avatar":"","nickname":"卡趴开发部","note":"","ucode":"416C2824A68708","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48741,"discussion_content":"不知道怎么命名隐藏着要么英文不好要么职责不明确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573522492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148869,"user_name":"Geek_Spring","can_delete":false,"product_type":"c1","uid":1292572,"ip_address":"","ucode":"3F44EE152CB357","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erRavHNiaicxIIq5Pal1iadE4axG6ibbib6llpHBslhiahWDQ6tdE1IcWicFogfvuyfGoiayC51knA09UtQvQ/132","comment_is_top":false,"comment_ctime":1573096946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457998834","product_id":100039001,"comment_content":"其实这些概念都是老生常谈了，你要说是哪种好，哪种坏不见得有个标准答案，有的时候还是不得不违反这些原则去编程，真心希望跟着王老师能深究这其中的奥妙","like_count":3},{"had_liked":false,"id":148301,"user_name":"修缘","can_delete":false,"product_type":"c1","uid":1035476,"ip_address":"","ucode":"72AB60C1DC88C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/d4/f1f84a96.jpg","comment_is_top":false,"comment_ctime":1572970656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457872544","product_id":100039001,"comment_content":"编码规范和设计原则解决的是可读性和可维护性，而面向对象是一种设计方法或者说是一种抽象思维，更符合人类的思考方式，所以它们的属性偏向于静态的概念；代码重构和设计模式是一种动态的概念，是具体的执行方法，当然代码重构本身就包含了：编码规范,设计原则,设计模式。<br>另外，面向对象和设计模式本身就有着紧密的联系，设计模式是解决特定问题的有效方法，是经验的总结。<br>","like_count":3},{"had_liked":false,"id":147749,"user_name":"刘冬","can_delete":false,"product_type":"c1","uid":1401797,"ip_address":"","ucode":"982676C96C0EB4","user_header":"https://static001.geekbang.org/account/avatar/00/15/63/c5/a85ade71.jpg","comment_is_top":false,"comment_ctime":1572883192,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14457785080","product_id":100039001,"comment_content":"初级：代码规范 面向对象<br>中级：设计原则 设计模式<br>高级：设计模式 重构<br><br>oop的基本特性（封装 抽象 继承 多态）和design pattern的需求高度匹配","like_count":3,"discussions":[{"author":{"id":1116862,"avatar":"","nickname":"leior","note":"","ucode":"82AEBD0D254362","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143164,"discussion_content":"感觉也可以这样评价程序员\n--- 初级程序员： 代码规范，能做到面向对象\n--- 中级程序员：能应用设计原则和设计模式\n--- 高级程序员： 能应用设计模式完成重构\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579492970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253852,"user_name":"探5065","can_delete":false,"product_type":"c1","uid":1003793,"ip_address":"","ucode":"3C8E0584F10127","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFY51ATlJvLYrcqnm2tnAfdRIYDUtWa8zQQz4opFicFG8lwUMEQPWasWNP92L0y1yPiaWLbkmBxVQQ/132","comment_is_top":false,"comment_ctime":1602919433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10192854025","product_id":100039001,"comment_content":"个人认为，如果将代码比作是武术，面向对象就像是门派的宗旨，设计原则其内功心法，设计模式是其套路招式，编码规范是其门规，持续重构就是在不断练习改进。","like_count":2},{"had_liked":false,"id":151904,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1573809957,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10163744549","product_id":100039001,"comment_content":"1：针对第一个问题，我觉得重构挺重要的。看过《Head First设计模式》，以及今天老师也说了，设计模式其实不是滥用，是有需要的时候用，不能过度使用。那这些判断从哪来，就是从一步步的重构而来。程序和功能都是从易到难，从简单到复杂，这就形成大家总结的设计模式，都是无数前人的经验总结。<br><br>因为编码经验还不够，所以除了老师的这些讲解，我暂时还没想到其他更多的。<br><br>2：面向对象，真是个神器的东西。因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式编码实现的基础。所以，很多时候编程就是对面向对象一个深刻运用的过程，我师傅就和我说，Java开发，一切皆对象，我觉得到现在为止，还是挺在理的","like_count":2},{"had_liked":false,"id":149829,"user_name":"学好习，做好人","can_delete":false,"product_type":"c1","uid":1205294,"ip_address":"","ucode":"C991643DB458E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/2e/e70a317a.jpg","comment_is_top":false,"comment_ctime":1573396540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163331132","product_id":100039001,"comment_content":"接口是对行为的抽象，是某一类行为所具有的共性或者需要遵循的标准，比如策略模式，定义了一组不同方式方法的抽象实现，而抽象类是是对公共行为的一种复用，将相同的逻辑，行为复用在抽象类中，比如模板模式，定义了公共实现，不同的实现延迟到子类当中去<br>个人感觉面向对象是一切设计原则设计模式的基础，依赖倒置与里氏替换依赖的的也是面向对象的抽象与多态，最开始上学的时候其实对编程感觉是懵懂的，也看过设计模式，当时看懂了，其实不会用，后来工作了才发现，当你自己主动的注意自己的代码，自己的逻辑，希望写的代码可复用，简单高效的时候，回过头来，这些已经是设计原则，设计模式了，在读这些文章或者书籍感觉更有味道了","like_count":2},{"had_liked":false,"id":149464,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1573225054,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"10163159646","product_id":100039001,"comment_content":"Day004 03<br>关于编码规范：<br>阿里巴巴 java 开发规范，官方已提供了 idea、eclipse 插件，详情可以访问官方链接：https:&#47;&#47;github.com&#47;alibaba&#47;p3c&#47;blob&#47;master&#47;README.md<br><br>此外还有FindBugs、PMDPlugin、CheckStyle<br>、JavaNCSS、sonarlint，可以多管齐下，为你保驾护航。","like_count":2},{"had_liked":false,"id":149105,"user_name":"阿玛铭","can_delete":false,"product_type":"c1","uid":1100703,"ip_address":"","ucode":"DBF948D82ACBE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/9f/ee68858c.jpg","comment_is_top":false,"comment_ctime":1573141693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163076285","product_id":100039001,"comment_content":"模拟一下老师的思路：1.最终目的why：提高代码质量。拆分目的后就得到代码质量的评价纬度what：易维护、易读、易扩展、灵活、简单、易测试。到这里还是只能做到定性分析，不足以定量分析，所以指出评价标准的主观性。 2. 明确定义、概念，理清它们之间的联系：编程范式――面向对象和其它，设计原则，设计模式，编码规范，重构。为达到提高代码质量的目的how，提出面向对象这一编程范式（核心域），再在核心域上提炼出一些普遍适用指导思想（设计原则），然后是适用特定场景的具体方法（设计模式），编码规范则属于由来已久的具体方法〔粒度很细〕，对各种范式而言是通用的。<br>       其它how: 测试驱动，CodeReview,工具支撑: 编码规范插件，sonar，JUnit,mock,jcoco,代码分层及目录规范，spring initializer等脚手架。<br>      可读性指出高质量代码的侧重点是面向人的，不是面相机器的。所以提升团队的基础能力才能从根本上解决代码质量差的问题。<br>      听过软件开发的根本价值在于应对各种变化的需求，提高代码质量也是应对变化的一部分重要内容。希望能从本课程中学到更多精髓。","like_count":2},{"had_liked":false,"id":148241,"user_name":"浅夏","can_delete":false,"product_type":"c1","uid":1417176,"ip_address":"","ucode":"8E1F54025C865A","user_header":"https://static001.geekbang.org/account/avatar/00/15/9f/d8/62030082.jpg","comment_is_top":false,"comment_ctime":1572962657,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10162897249","product_id":100039001,"comment_content":"个人觉得首先应该提高代码可读性，然后在应用相关的面向对象思想，设计原则，设计模式等去重构","like_count":2},{"had_liked":false,"id":147979,"user_name":"胖大海","can_delete":false,"product_type":"c1","uid":1002290,"ip_address":"","ucode":"E9994CC28D49CB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/32/c067cd2f.jpg","comment_is_top":false,"comment_ctime":1572924749,"is_pvip":false,"replies":[{"id":"57046","content":"单元测试是一个非常有效的手段，后面的章节中会讲到。","user_name":"作者回复","comment_id":147979,"uid":"1190123","ip_address":"","utype":1,"ctime":1572946202,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"10162859341","product_id":100039001,"comment_content":"对于重构，我有话（槽）要说（吐）：我是做企业项目外包的，我们给客户交付的项目大多在客户方面庞杂缺少弹性的IT合规性要求和业务快速变动的现实的双重夹击下痛苦地演进着。重构意味着不改变系统已有功能的情况下优化项目代码，但面临着合规性和流程的限制导致这类无业务功能更新的发布不会被甲方IT放行；另一方面不断的新需求的变更又不断地劣化着已有代码的系统架构以及业务代码的设计。不知道有没有面临同样问题的同学，在无法改变现有大环境的前提下进行有限的优化？我们现在能做的也就是在每一次追加的新需求变更时进行小幅度的改善，但这无法受到任何工作流程的保护和管理，仅能靠程序员个人的良心来做。另外，如何保证重构不会因为代码结构的变化引入新的bug呢？单元测试以及覆盖率较高的自动化测试吗？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473360,"discussion_content":"单元测试是一个非常有效的手段，后面的章节中会讲到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572946202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1356225,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b1/c1/08cc53c0.jpg","nickname":"...","note":"","ucode":"D2E6EBA5E9B6F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44427,"discussion_content":"动的比较大的话接口测试就行了，只要不改变现有程序的行为就好了啊。《重构》这本书里面对重构的方法讲的比较清晰。其实都是先改善代码的可读性，然后理解了之后在去继续重构，重构也可以帮助理解代码的意义。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572948107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245901,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1599104262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894071558","product_id":100039001,"comment_content":"【要点】<br>1、面向对象<br>封装、抽象、继承、多态<br>面向对象编程VS面向过程编程<br>面向对象分析、设计、编程<br>接口VS抽象类<br>基于接口而非实现编程<br>多用组合少用继承<br>贫血模型和充血模型<br>2、设计原则<br>SOLID原则-SRP单一职责原则<br>SOLID原则-OCP开闭原则<br>SOLID原则-LSP里氏替换原则<br>SOLID原则-ISP接口隔离原则<br>SOLID原则-DIP依赖倒置原则<br>DRY原则、KISS原则、YAGNI原则、LOD法则<br>3、编程规范<br>20条最快速改善代码质量的编程规范<br>4、代码重构<br>目的、对象、时机、方法<br>单元测试和代码的可测试性<br>大重构(大规模高层次)<br>小重构(小规模低层次)<br>5、设计模式<br>创建型<br>常用：单例模式、工厂模式(工厂方法和抽象工厂)、建造者模式<br>不常用：原型模式<br>结构型<br>常用：代理模式、桥接模式、装饰着模式、适配器模式<br>不常用：门面模式、组合模式、享元模式<br>行为型<br>常用：观察者模式、模板模式、策略模式、职责链模式、迭代器模式、状态模式<br>不常用：访问者模式、备忘录模式、命令模式、解释器模式、中介模式<br>【思考】<br>1、编程规范对提高代码最有效，编程规范在一个公司属于编程铁律，必须严格执行，以此为基础，之后才是面向对象、设计原则、设计模式。如果编码规范都不一致，代码可读性、维护性都会大打折扣。<br>2、面向对象是大部分设计模式实现的基础。面向对象更适合对现实事物的抽象和建模，以此为基础相关的设计模式才能玩得转。","like_count":1},{"had_liked":false,"id":241295,"user_name":"熊丽娟","can_delete":false,"product_type":"c1","uid":2044711,"ip_address":"","ucode":"F374BA5540379D","user_header":"","comment_is_top":false,"comment_ctime":1597240164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892207460","product_id":100039001,"comment_content":"面对对象是身体素质 设计模式是招式 设计原则是内力","like_count":1},{"had_liked":false,"id":237709,"user_name":"三哥","can_delete":false,"product_type":"c1","uid":1189582,"ip_address":"","ucode":"12A4ED23301EBB","user_header":"https://static001.geekbang.org/account/avatar/00/12/26/ce/0b8b98d4.jpg","comment_is_top":false,"comment_ctime":1595931513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890898809","product_id":100039001,"comment_content":"个人认为面试对象的设计思想对提高代码的质量最有效，对事物抽象能力的强弱能能直接影响到设计模式和设计原则，从而影响到整个程序的设计。就像欧阳锋练的九阴真经的心法都是错的，怎么可能练到大成，个人愚见。","like_count":1},{"had_liked":false,"id":216428,"user_name":"慕高迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/ad3127e0.jpg","comment_is_top":false,"comment_ctime":1589257422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884224718","product_id":100039001,"comment_content":"总结成了一张思维导图：https:&#47;&#47;gitee.com&#47;arch-aims&#47;database&#47;blob&#47;master&#47;Design%20Pattern&#47;%E7%BC%96%E7%A8%8B%E6%96%B9%E6%B3%95%E8%AE%BA.xmind","like_count":1},{"had_liked":false,"id":174577,"user_name":"Calios","can_delete":false,"product_type":"c1","uid":1004758,"ip_address":"","ucode":"B1AA60164DC42A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/d6/124e2e93.jpg","comment_is_top":false,"comment_ctime":1580283488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875250784","product_id":100039001,"comment_content":"回想起《小强升职记：时间管理故事书》中的提到，我们的工作和人生都可以划分成六个高度来检视：原则（五万英尺）、愿景（四万英尺）、目标（三万英尺）、责任范围（两万英尺）、任务（一万英尺）、下一步行动（跑道）；而对应“如何编写高质量的代码”这件事，自上而下、从抽象到具体实现也可以分成这样几个部分：设计思想（面向对象 vs 面向过程）、设计原则、设计模式、编码规范和重构技巧。这两者，实在是有异曲同工之妙。","like_count":1},{"had_liked":false,"id":170514,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1578623772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873591068","product_id":100039001,"comment_content":"问题2:<br>因为文章提过，面向对象的思想可以方便的实现这些设计模式和原则。<br><br>其实，我理解最关键的面向对象的思想符合人类思维","like_count":1},{"had_liked":false,"id":170513,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1578623683,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873590979","product_id":100039001,"comment_content":"问题1:<br>1.1<br>编码规范最直接有效，其他的都得学习理解😂。<br>我认为团队开发，编码规范是硬标准，思想、原则、模式都可能因人而异（理解不同，实践不同）。<br>1.2<br>做业务需求之前，画出设计图，写出简单的设计文档，并与人讨论，这样能够帮助自己思考弥补不足。","like_count":1},{"had_liked":false,"id":165334,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1577202102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872169398","product_id":100039001,"comment_content":"我觉得设计原则最有用，<br>面向对象思想是基础，不积跬步无以至千里，基础不牢，寸步难行。是必须要掌握的。<br>设计模式是一类问题的通用解法，总结出来的解决方案，算是武功招式。<br>编码规范是军规，每个厂，甚至团队规范都不尽相同，目的是要解决统一风格，降低理解交流成本。<br>重构，持续重构，是一种意识，打怪升级的路径。<br>设计原则是魂，基于原则才能不变应万变，无招胜有招，四两拨千斤。 <br><br>GOF 解决的是面向对象领域内的设计模式问题，所以圈定了范围，我相信面向过程或函数式编程也有自己的套路和沉淀的通用的解决方案。","like_count":1},{"had_liked":false,"id":156139,"user_name":"奇小易","can_delete":false,"product_type":"c1","uid":1171151,"ip_address":"","ucode":"E06B4DFB5352BB","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/cf/ef2e0501.jpg","comment_is_top":false,"comment_ctime":1574823672,"is_pvip":true,"replies":[{"id":"59974","content":"有code readability认证，需要每个人通过","user_name":"作者回复","comment_id":156139,"uid":"1190123","ip_address":"","utype":1,"ctime":1574834456,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5869790968","product_id":100039001,"comment_content":"我觉得编程规范是最有效的一种方法，选择它就表示认可了可读性是代码质量最核心的一点。因为它不仅好学、好上手，用起来效果还明显。不像其它的方法对个人经验的依赖性强。还有个例子证明它的重要性，听说Google入职前几个月最先做的事情是把他们的编程规范熟记于心。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476004,"discussion_content":"有code readability认证，需要每个人通过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574834456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152327,"user_name":"皮邱～","can_delete":false,"product_type":"c1","uid":1103150,"ip_address":"","ucode":"5D3E6247798949","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/2e/be47ac55.jpg","comment_is_top":false,"comment_ctime":1573973052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868940348","product_id":100039001,"comment_content":"面对对象是基础，设计原则是指导思想，设计模式是指导思想下理论诠释，编码规范和重构是实践和运用。","like_count":1},{"had_liked":false,"id":149803,"user_name":"条","can_delete":false,"product_type":"c1","uid":1203836,"ip_address":"","ucode":"6F8679175256E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/7c/94af3f5e.jpg","comment_is_top":false,"comment_ctime":1573382885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868350181","product_id":100039001,"comment_content":"1.对于一些刚接触面向对象语言的同学，有面向对象的思维尤为重要。对于有了一定开发基础的同学，可能编程规范是他们亟需了解的。对一些老同学而言，设计原则、设计模式、什么样的代码需要重构、怎样把代码重构的更合理是他们最关注的的。<br>2.还没有看过这本书，但是感觉标题提到了“设计模式”，应该是这种思想贯穿着整本书。","like_count":1},{"had_liked":false,"id":149604,"user_name":"Arthur","can_delete":false,"product_type":"c1","uid":1151989,"ip_address":"","ucode":"B6CD75EACF6AF4","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/f5/32c9fc77.jpg","comment_is_top":false,"comment_ctime":1573289204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868256500","product_id":100039001,"comment_content":"写单元测试是有效提高代码质量的一种方式。并且你在写出能够可测试，易于测试的代码的时候，已经在不断的修改你的代码。并且在编写各种测试用例的时候，你已经将各种边界条件或者特殊情况已经考虑进去了。最终的代码覆盖率也能提醒你哪些部分是还没有经过测试的。<br>所以，写单元测试吧！","like_count":1},{"had_liked":false,"id":149562,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1573273671,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5868240967","product_id":100039001,"comment_content":"设计模式是帮助梳理对象之间的关系的，帮助重用复用对象，所以才强调“对象”","like_count":1},{"had_liked":false,"id":149272,"user_name":"！null","can_delete":false,"product_type":"c1","uid":1242483,"ip_address":"","ucode":"4E5B7922980397","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/73/f7d3a996.jpg","comment_is_top":false,"comment_ctime":1573181335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868148631","product_id":100039001,"comment_content":"1.设计原则比设计模式有效。模式是原则的实现，原则是内功。但直接说原则不好懂，通过设计模式思考实现了哪个原则，进而对原则有所理解。当原则弄明白，模式就没啥用了，灵活运用原则，无招胜有招。<br>2.面向对象是一种思想而不是仅仅是语言。面向对象的语言有的人写出来和面向过程没啥区别。反过来c是面向过程语言，但是如果能够用好结构体和指针，尤其是函数指针，也可以写的面向对象，也可以用设计原则和设计模式。","like_count":1},{"had_liked":false,"id":148475,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1573015855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867983151","product_id":100039001,"comment_content":"1.设计模式，编程规范，代码重构。其他的我认为 架构分层的合理也可以间接的提高代码质量。还有就是命名统一，比如查询单个都get*，列表都list*等，当然这也属于编程规范，我认为最主要的还是代码重构，但这四个字要想持续做下去做起来比登天还难！<br>2.万物皆对象，设计模式脱离不了对象，正是因为万物皆对象，才使得代码耦合度没那么高，才使得设计模式得以炉火纯青","like_count":1},{"had_liked":false,"id":148284,"user_name":"大豆腐","can_delete":false,"product_type":"c1","uid":1244050,"ip_address":"","ucode":"1E8D4F938F9AEA","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/92/e3b0e597.jpg","comment_is_top":false,"comment_ctime":1572968062,"is_pvip":false,"replies":[{"id":"57096","content":"我后面的文章会讲到的 别急","user_name":"作者回复","comment_id":148284,"uid":"1190123","ip_address":"","utype":1,"ctime":1572993370,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5867935358","product_id":100039001,"comment_content":"面向对象的特性，有些地方说是4个，有些地方说是3个，一脸懵逼","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473451,"discussion_content":"我后面的文章会讲到的 别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572993370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148151,"user_name":"liliumss","can_delete":false,"product_type":"c1","uid":1333094,"ip_address":"","ucode":"A52AC5042F3115","user_header":"https://static001.geekbang.org/account/avatar/00/14/57/66/e57bdb18.jpg","comment_is_top":false,"comment_ctime":1572950357,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5867917653","product_id":100039001,"comment_content":"很想听下fp有没对应的“设计模式”","like_count":1,"discussions":[{"author":{"id":1132337,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","nickname":"小晏子","note":"","ucode":"3AAA6FB5ACB6AE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47118,"discussion_content":"有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573273900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023731,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9e/f3/9c067137.jpg","nickname":"Rocky","note":"","ucode":"CA33ACBDE8B87B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44875,"discussion_content":"我也想问这个问题，在函数式编程中，有多少设计模式是适用的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572970096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147989,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1572925155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867892451","product_id":100039001,"comment_content":"话题1：在说如果提高代码质量之前，要定义清楚什么事代码质量。个人理解，高质量的代码是容易读懂的、代码结构清晰的、逻辑思路缜密的、适度抽象的、书写规范的及测试友好的。那么回头再看如何提高代码质量，就可以从改善这几点入手。除王老师文中讲到的，我觉得写代码前做到逻辑思路缜密也很重要。细细说来，如果业务思路清楚了，那么现有几个业务分支就清楚了，以后扩展时可能的业务分支也清楚了，那么定义几个类和方法、他们之间的关系、用什么模式等就清楚了，说白了就是代码框架就有了，其实也就涵盖了可读性、可扩展性、可复用性和简洁性。之后，就是在每个方法里做CRUD了。所以说，就像算法一样，思路是核心，有了明确的思路，其他的经过练手，自然就水到渠成了。借用国庆举个栗子，思路是DF-41的控制芯片，火箭发动机等助推器是设计模式，分导弹头是业务逻辑，控制芯片决定了助推器的点火和分离，助推器决定了分导弹头能否发挥出最大作用。","like_count":1},{"had_liked":false,"id":147922,"user_name":"划时代","can_delete":false,"product_type":"c1","uid":1061454,"ip_address":"","ucode":"9554CE2F83B77F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2o1Izf2YyJSnnI0ErZ51pYRlnrmibqUTaia3tCU1PjMxuwyXSKOLUYiac2TQ5pd5gNGvS81fVqKWGvDsZLTM8zhWg/132","comment_is_top":false,"comment_ctime":1572919401,"is_pvip":false,"replies":[{"id":"57044","content":"哈哈 感觉你说的继承、多态、封装、组合可以任意组合起来用啊。并没有说面向对象就是继承+多态，基于对象就是封装+组合呀","user_name":"作者回复","comment_id":147922,"uid":"1190123","ip_address":"","utype":1,"ctime":1572945811,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"5867886697","product_id":100039001,"comment_content":"老师我有疑问，在没有充分必要的情况下是不是不采用面向对象编程（继承+多态），大多数情况下使用基于对象的方式进行编程（封装+组合）？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473340,"discussion_content":"哈哈 感觉你说的继承、多态、封装、组合可以任意组合起来用啊。并没有说面向对象就是继承+多态，基于对象就是封装+组合呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572945811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44124,"discussion_content":"如果概念比较宽泛接口也是一种继承方式，所以说还是继承，多态，封装。面向接口编程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572932749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147891,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1572917393,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5867884689","product_id":100039001,"comment_content":"1.面向对象，设计原则，内功心法，功力越深厚，设计模式，编程范式应用就越得心应手和自然而然。生搬硬套甚至会适得其反，不但自己觉得别扭，别人也看不懂","like_count":1},{"had_liked":false,"id":147846,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1572913739,"is_pvip":false,"replies":[{"id":"57045","content":"后面会讲到，别急~","user_name":"作者回复","comment_id":147846,"uid":"1190123","ip_address":"","utype":1,"ctime":1572945965,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"5867881035","product_id":100039001,"comment_content":"请问一下老师面向对象编程，面向过程编程，面向对象设计这些词中的“面向”是啥意思？怎样做就算“面向”了呢？","like_count":1},{"had_liked":false,"id":147711,"user_name":"繁星mind","can_delete":false,"product_type":"c1","uid":1455441,"ip_address":"","ucode":"387B67F75303AA","user_header":"https://static001.geekbang.org/account/avatar/00/16/35/51/ed895596.jpg","comment_is_top":false,"comment_ctime":1572880514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867847810","product_id":100039001,"comment_content":"1.面向对象特性是设计原则的基础，设计原则又为面向对象特性使用提供指导。<br>2.设计模式是为了解决某些特定问题而产生的方案，我们要了解每种设计模式解决的问题，以及优缺点才能更好的解决问题。<br>3.编码规范则是一种约定，让大家以相同的语言来沟通。<br>4.重构是对发展过程中，出现的一些问题，进行针对性的改造，换句话说，当前框架和设计不能满足业务发展，就要对设计框架进行改造，解决现在和未来遇到的问题。","like_count":1},{"had_liked":false,"id":147557,"user_name":"moqifei","can_delete":false,"product_type":"c1","uid":1358410,"ip_address":"","ucode":"E0A6C858B78A3A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGovXf8jNP5ZqHsDKLwajjicbFwpX9on1xiaJDR4CgWaWP2KcfOdneasBfKFo3dO3dwQyGG6WjK40w/132","comment_is_top":false,"comment_ctime":1572869706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867837002","product_id":100039001,"comment_content":"编程规范最重要，编程规范就像士兵的正步，是基础中的基础。提高代码质量应该善假于物，很多静态工具如Findbugs可以指导编程规范，白盒测试工具如JaCoCo可以评价单测的质量，进而保证重构质量。","like_count":1},{"had_liked":false,"id":358718,"user_name":"亚宁","can_delete":false,"product_type":"c1","uid":1002561,"ip_address":"北京","ucode":"B7B5D282EA59D8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/41/659d6113.jpg","comment_is_top":false,"comment_ctime":1664617725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664617725","product_id":100039001,"comment_content":"我觉得对业务的认知也很重要，对业务的理解程度直接决定了表结构的层级关系，如果只是简单一张张表的堆积，对后续的维护和可扩展性都毫无意义。","like_count":0},{"had_liked":false,"id":356988,"user_name":"Geek_3e9d7d","can_delete":false,"product_type":"c1","uid":3070253,"ip_address":"北京","ucode":"3BDEFFE68BE32F","user_header":"","comment_is_top":false,"comment_ctime":1662798499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662798499","product_id":100039001,"comment_content":"1、在今天讲到的内容中，你觉得哪一部分内容对提高代码质量最有效？为什么？<br>我认为编程规范对提高代码质量最有效。原因有以下两点：<br>首先，设计规范、设计模式等只有在编写较为复杂的系统时才能发挥大的作用，而我们日常中大多数在编写业务逻辑。但编程规范可以浸透在日常代码编写中，持续提高代码质量；<br>其次，将设计规范、设计模式、重构等技术学以致用并且用好需要一定门槛，而编程规范简单易懂、实践起来没有门槛，能在日常编码中轻松实施。<br>除了我罗列的这些内容之外，你还知道哪些可以提高代码质量的方法？<br>我觉得在设计和编码中要时刻谨记面向失败的编程理念。写一段业务逻辑，不仅仅要把正确的逻辑写好；也要注意出现错误时怎么处理、如何保证整体业务流程受影响最小，如何记录详细错误日志方便排查问题。<br>2、我们知道，最经典的设计模式书籍是 GoF 的《设计模式》，它的中文全称是《设计模式：可复用面向对象软件的基础》，英文全称是“Design Patterns: Elements of Reusable Object-Oriented Software”。为什么它在标题中会特意提到“面向对象”呢？<br>因为其中大多数设计模式都要使用到面向对象的多态、封装、继承、接口等特性，如果是面向过程的编程语言无法支持实施这些设计模式。","like_count":0},{"had_liked":false,"id":356527,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662381207,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662381207","product_id":100039001,"comment_content":"提高代码质量，需要刻到骨子里，或者说是条件反射式的融入到代码中，将设计思想，设计原则，设计模式，代码规范这四点有机融合到代码中去！<br>设计模式是基于面向对象的，对于面向过程语言，没有封装，对于设计模式没有用武之地！我的理解机构型的设计模式，就是多个对象之间引用的设计规范。创建型设计模式，就是单个对象初始化的设计规范。行为型的设计模式，也是对象之间的传递规范。","like_count":0},{"had_liked":false,"id":355879,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"北京","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1661824690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661824690","product_id":100039001,"comment_content":"先总结一下今天的学习：<br>面向对象是设计或者重构的一些基础；设计原则是设计的指导思想；设计模式是对具体场景中对于设计原则运用的提炼；编程规范是写出良好代码的基础；重构是对于编程规范的具体实践。<br>1.你觉得哪一部分内容对提高代码质量最有效？<br>对于我自己来说重构是最有效的，设计模式会过时，编程规范会更新迭代甚至面向对象也可能以后不再使用了。只有不断的根据实际情况来重构优化自己的代码才是延长代码寿命的最好的方法。<br>2.除了我罗列的这些内容之外，你还知道哪些可以提高代码质量的方法？<br>codereview或者说结对编程应该算很好的一种方式。只可惜我本人也很少进行。<br>3.为什么它在标题中会特意提到“面向对象”呢？<br>我认为是在面向对象的编程风格中能更好的实现那些设计模式。当然面向过程的语言中一样可以实现很多的设计模式。但是大部分的设计模式只有在面向对象的语言中，才能更加直观，方便，清晰的去实践那些设计模式。<br><br>","like_count":0,"discussions":[{"author":{"id":1012815,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/74/4f/7975c7ee.jpg","nickname":"胡敏And","note":"","ucode":"8FA14B27F47F92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380219,"discussion_content":"第一层结构泛化出订单ID，商品id，日志id。第二层接口泛化出随机日志id，序列随机id。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624377129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326168,"discussion_content":"interface IdGenerator 可以供系统其它业务生成id 用；interface LogTraceIdGenerator目的是方便当前的业务使用。基于接口而非实现编程，主要的目的是为了方便后续灵活的替换实现类。这点灵活的替换实现类是指同一个业务，如你要优化实现方法的执行过程，输出结果仍然不变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605535461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351673,"user_name":"无名道长","can_delete":false,"product_type":"c1","uid":1387960,"ip_address":"","ucode":"0F694D17459CC0","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/b8/7e49a241.jpg","comment_is_top":false,"comment_ctime":1658073871,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658073871","product_id":100039001,"comment_content":"课堂讨论：<br><br>1. 我觉得编程规范对提高代码质量最有效，因为在工作中不论什么样的代码都需要编程规范，不遵守编程规范代码的可读性会非常差。多看一些优秀的代码可以提高代码质量<br><br><br>2. 设计模式一书描述了在面向对象软件设计过程中针对特定问题简洁而优雅的解决方案。它研究的前提就是面向对象。个人觉得这个问题最后变成了面向对象为什么这么流行了","like_count":0},{"had_liked":false,"id":350923,"user_name":"SICUN","can_delete":false,"product_type":"c1","uid":1254261,"ip_address":"","ucode":"22A384904EB9E9","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/75/2b599841.jpg","comment_is_top":false,"comment_ctime":1657350950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657350950","product_id":100039001,"comment_content":"1. 编程规范解决代码质量下限问题，设计模式可以提高代码质量的上限，培养开发者代码质量意识是提高代码质量的根本<br>2.这就需要了解设计模式的根源了，设计模式是1990年代由Erich Gamma等人从建筑领域引入到计算机科学中来的，是对面向对象设计中反复出现的问题的解决方案，是对代码设计经验的总结，目的是实现代码的重用，增加可维护性。","like_count":0},{"had_liked":false,"id":350649,"user_name":"孙新","can_delete":false,"product_type":"c1","uid":2875594,"ip_address":"","ucode":"A80038A479B943","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e0/ca/adfaa551.jpg","comment_is_top":false,"comment_ctime":1657073572,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657073572","product_id":100039001,"comment_content":"第一个问题，我正在按照一个统一的编码规范改造原先的代码，但是设计模式和设计原则层面的东西还不够。所以最高效的部分就是编码规范。<br>第二个问题，因为面向过程讲设计模式，比较难以推广。很多设计模式是基于面向对象的。个人理解。","like_count":0},{"had_liked":false,"id":350647,"user_name":"孙新","can_delete":false,"product_type":"c1","uid":2875594,"ip_address":"","ucode":"A80038A479B943","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e0/ca/adfaa551.jpg","comment_is_top":false,"comment_ctime":1657073377,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657073377","product_id":100039001,"comment_content":"图片直接作为桌面背景了。这几个月就它了。","like_count":0},{"had_liked":false,"id":348493,"user_name":"陈平Edgar","can_delete":false,"product_type":"c1","uid":1043749,"ip_address":"","ucode":"DD5A715893827E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/25/a48988c0.jpg","comment_is_top":false,"comment_ctime":1655135213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655135213","product_id":100039001,"comment_content":"第二题和面向对象出现的历史原因有关吧。当初面向过程的编程方式，无法满足大型复杂应用的开发，而提出面向对象编程思想的作者，基于面向对象的特性，特意强调的原因？","like_count":0},{"had_liked":false,"id":346970,"user_name":"HStar-X","can_delete":false,"product_type":"c1","uid":2456408,"ip_address":"","ucode":"3C6302D14075B1","user_header":"https://static001.geekbang.org/account/avatar/00/25/7b/58/2bd6e093.jpg","comment_is_top":false,"comment_ctime":1653567655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653567655","product_id":100039001,"comment_content":"第二题，面向对象具有的诸多特性是实现设计模式的工具基础，同时设计模式也是体现真正的面向对象编程的方法。","like_count":0},{"had_liked":false,"id":345374,"user_name":"姚钫","can_delete":false,"product_type":"c1","uid":1498146,"ip_address":"","ucode":"ECB8B0627A4F9B","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/22/41a390ae.jpg","comment_is_top":false,"comment_ctime":1652239582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652239582","product_id":100039001,"comment_content":"220511 day03<br>1. 5大概念 1.面向对象(设计思想) 2.设计原则 3.设计模式 4.代码规范 5.重构技巧<br>2.1 5个步骤都很重要,代码规范最能立竿见影<br>2.2 为什么要叫面向对象的设计模式?因为使用很多面向对象的思想和特性","like_count":0},{"had_liked":false,"id":343152,"user_name":"没有軒的筝","can_delete":false,"product_type":"c1","uid":1332535,"ip_address":"","ucode":"8B6A8A1B5472EE","user_header":"https://static001.geekbang.org/account/avatar/00/14/55/37/57aeb6af.jpg","comment_is_top":false,"comment_ctime":1650681757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650681757","product_id":100039001,"comment_content":"使用JAVA开发这么年，一直认为面向对象说白了就是对类的操作，而面向过程就是有顺序的结构开发，但是要具体说面向对象到底是什么，却解释不清。","like_count":0},{"had_liked":false,"id":341380,"user_name":"Hero","can_delete":false,"product_type":"c1","uid":1321726,"ip_address":"","ucode":"33D7939CC3C815","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/fe/197449a0.jpg","comment_is_top":false,"comment_ctime":1649572972,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649572972","product_id":100039001,"comment_content":"1:面向对象我觉得是最重要的，是基础，好比建造摩天大楼一下，地基不稳，建上去了也是危楼；<br>提高代码质量的方法：不断回头看，看看自己一年前写的代码，就有感觉了。<br>2:我觉得面向对象是基础，有了扎实的基本功，才能写出高质量的代码。","like_count":0},{"had_liked":false,"id":341016,"user_name":"Geek_441001","can_delete":false,"product_type":"c1","uid":2421724,"ip_address":"","ucode":"159C7D1965FDD9","user_header":"","comment_is_top":false,"comment_ctime":1649296715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649296715","product_id":100039001,"comment_content":"1.根据文章来看，五个部分对于提高代码质量都是很有效的，但是侧重点不同，或者说维度不同。除了一些简单的项目，偏大型项目都会涉及到这几部分。<br>2.面向对象编程是作战部队，设计原则是战略层面的考虑，设计模式是战术层面的考虑，编码规范则具体到小兵，重构是优化作战部队结构。所以没有面向对象作为实际作战单位，设计模式就不能体现出其价值。","like_count":0},{"had_liked":false,"id":336747,"user_name":"Dunk","can_delete":false,"product_type":"c1","uid":1691447,"ip_address":"","ucode":"A8F5AB98382719","user_header":"https://static001.geekbang.org/account/avatar/00/19/cf/37/6ed137b9.jpg","comment_is_top":false,"comment_ctime":1646352606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646352606","product_id":100039001,"comment_content":"1.  编程规范<br>2. 设计模式的基础是面向对象的特性","like_count":0},{"had_liked":false,"id":336097,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":1285986,"ip_address":"","ucode":"F29D56F9265751","user_header":"https://static001.geekbang.org/account/avatar/00/13/9f/62/960eecc3.jpg","comment_is_top":false,"comment_ctime":1645925069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645925069","product_id":100039001,"comment_content":" 由难到易:编程规范-&gt;重构-&gt;设计模式-&gt;设计原则-&gt;面向对象<br>5个level ","like_count":0},{"had_liked":false,"id":334797,"user_name":"夜空中的咸鱼","can_delete":false,"product_type":"c1","uid":2143489,"ip_address":"","ucode":"D6F1EAF082D000","user_header":"https://static001.geekbang.org/account/avatar/00/20/b5/01/9938349b.jpg","comment_is_top":false,"comment_ctime":1645113664,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1645113664","product_id":100039001,"comment_content":"如果这个设计模式是一本秘籍的话,面向对象是内功心法,基础中的基础,也是其他四项的根源;设计模式就是招式;设计原则是武器;编程规范招式的套路;重构就相当于把其他四项掌握了后,根据实际场景优化招式,出招的套路,甚至还可以夯实基础","like_count":0},{"had_liked":false,"id":329154,"user_name":"krauser","can_delete":false,"product_type":"c1","uid":1219733,"ip_address":"","ucode":"13E5CB0ECF1613","user_header":"https://static001.geekbang.org/account/avatar/00/12/9c/95/edbb01ae.jpg","comment_is_top":false,"comment_ctime":1641184505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641184505","product_id":100039001,"comment_content":"1、遵循代码规范<br>2、在合适的业务背景下，选择最合适的设计模式，在设计过程中，考虑是否触碰了设计原则的红线<br><br>面向对象的特性（多态、继承、封装、抽象），可以实现很多复杂的设计思路","like_count":0},{"had_liked":false,"id":328554,"user_name":"L先生","can_delete":false,"product_type":"c1","uid":2879424,"ip_address":"","ucode":"D1E567ED3377CE","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ef/c0/537b3905.jpg","comment_is_top":false,"comment_ctime":1640769753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640769753","product_id":100039001,"comment_content":"2、因为面向对象的特性，才能产生这么多的设计模式，很多设计模式都是基于面向对象的特性去实现的","like_count":0},{"had_liked":false,"id":328553,"user_name":"L先生","can_delete":false,"product_type":"c1","uid":2879424,"ip_address":"","ucode":"D1E567ED3377CE","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ef/c0/537b3905.jpg","comment_is_top":false,"comment_ctime":1640769698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640769698","product_id":100039001,"comment_content":"1、首先肯定是编码规范，这个东西是最快也是最好约束的。其次就是设计模式了","like_count":0},{"had_liked":false,"id":324229,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1337016,"ip_address":"","ucode":"37D2AD591C1AEC","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/b8/ece79234.jpg","comment_is_top":false,"comment_ctime":1638344713,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638344713","product_id":100039001,"comment_content":"第一题：<br>* 设计模式最实用、最直接。设计原则最根本。<br>* 不知道。<br>第二题：<br>* 因为面向对象是主流原则、模式的有形载体。没有面向对象特点，那很多模式、原则无法体现出来。换言之，大部分原则、模式，是建立在面向对象的封装、继承、多态、抽象基础上的。","like_count":0},{"had_liked":false,"id":314217,"user_name":"Bacchus","can_delete":false,"product_type":"c1","uid":1830814,"ip_address":"","ucode":"A8AA7E4909B201","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ef/9e/fd29bdd8.jpg","comment_is_top":false,"comment_ctime":1632904394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632904394","product_id":100039001,"comment_content":"面对对象是一切的基础，设计原则是在面向对象的基础上来思考的，设计模式只是常用场景归纳出来的普世方法","like_count":0},{"had_liked":false,"id":313975,"user_name":"Geek_1","can_delete":false,"product_type":"c1","uid":2704407,"ip_address":"","ucode":"59300A73996D20","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/17/e4fdcaad.jpg","comment_is_top":false,"comment_ctime":1632788636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632788636","product_id":100039001,"comment_content":"设计思想（面向对象），设计原则，设计模式，代码规范，重构思想这五个里面，我觉得设计原则更能有效提升我们的编码水平吧。<br>第二题：因为面向对象是设计模式编写的基础","like_count":0},{"had_liked":false,"id":313057,"user_name":"振振","can_delete":false,"product_type":"c1","uid":1313365,"ip_address":"","ucode":"ECE08186230140","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/55/5e440425.jpg","comment_is_top":false,"comment_ctime":1632236672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632236672","product_id":100039001,"comment_content":"20条规范呢<br>","like_count":0},{"had_liked":false,"id":312600,"user_name":"在左","can_delete":false,"product_type":"c1","uid":2767626,"ip_address":"","ucode":"1331E31BF69820","user_header":"https://static001.geekbang.org/account/avatar/00/2a/3b/0a/3b235a7e.jpg","comment_is_top":false,"comment_ctime":1631886231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631886231","product_id":100039001,"comment_content":"我觉得都是挺重要的，感觉都是一环扣一环的。如果你的没有良好的应用面向对象的思想，就很难遵循设计原则。写出来的代码可能就也没有遵循编程规范，没有这些做为基础，在重构的时候可能就很难下手了，可能就直接无法维护了。","like_count":0},{"had_liked":false,"id":311481,"user_name":"U2R2otkit","can_delete":false,"product_type":"c1","uid":1501330,"ip_address":"","ucode":"6CBF19655AC0AF","user_header":"https://static001.geekbang.org/account/avatar/00/16/e8/92/caaa56ce.jpg","comment_is_top":false,"comment_ctime":1631251293,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1631251293","product_id":100039001,"comment_content":"1. 保证代码质量的是重构，重构必要条件必须可测试性，设计原则，编码规范，面向对象这些提供重构的方法。<br>2. 面向对象是基础，设计原则，设计模式都是此基础上进一步总结出来的。 ","like_count":0},{"had_liked":false,"id":307115,"user_name":"Geek_752a1b","can_delete":false,"product_type":"c1","uid":1965533,"ip_address":"","ucode":"B831D21C7CB4BF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLVqEDcszBlhElG96Z5VB5BPrLB4tFtwCUgSHI1THuZGHbfWXMWUBn1yKzDyYQJFcQGmgK0sZCftQ/132","comment_is_top":false,"comment_ctime":1628868174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628868174","product_id":100039001,"comment_content":"面向对象是基石，设计原则是钢筋混凝土，设计模式是钢筋混凝土组成的楼架骨。编程规范是装潢师，<br>重构是休整调节","like_count":0},{"had_liked":false,"id":306901,"user_name":"小周","can_delete":false,"product_type":"c1","uid":2453498,"ip_address":"","ucode":"7ED7BC27A46C4C","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/fa/615a0df3.jpg","comment_is_top":false,"comment_ctime":1628768089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628768089","product_id":100039001,"comment_content":"我觉得面向对象对提高代码质量最有效。因为可以利用面向对象的特性：继承、封装、多态和抽象有效提高代码的可扩展性、可维护性、可复用性等等。并且设计原则和设计模式的编码实现都是基于面向对象编程的","like_count":0},{"had_liked":false,"id":306540,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1628601786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628601786","product_id":100039001,"comment_content":"1.在今天讲到的内容中，你觉得哪一部分内容对提高代码质量最有效？为什么？除了我罗列的这些内容之外，你还知道哪些可以提高代码质量的方法？<br>答：对我个人而言，现在感觉最明显的是设计模式和编程规范，开发时可以遵守一些编程规范，比如针对C++，Google有提出了一个编程规范，个人还是挺推荐的<br>2.我们知道，最经典的设计模式书籍是 GoF 的《设计模式》，它的中文全称是《设计模式：可复用面向对象软件的基础》，英文全称是“Design Patterns: Elements of Reusable Object-Oriented Software”。为什么它在标题中会特意提到“面向对象”呢？<br>答：因为很多设计模式是以面向对象为基础的，或者说设计模式是对面向对象的进一步加深和经验总结","like_count":0},{"had_liked":false,"id":304111,"user_name":"九先生","can_delete":false,"product_type":"c1","uid":1122533,"ip_address":"","ucode":"A63A333299D485","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/e5/f66d6144.jpg","comment_is_top":false,"comment_ctime":1627260054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627260054","product_id":100039001,"comment_content":"面向对象是基础<br>设计原则是指导方针<br>设计模式是落地的解决方案<br>编码规范是真实落地的细节<br>重构是利用以上四种理论来保证代码质量（个人认为重构不只是跟以上四种有关，难道面向过程编程就没有重构了吗？）","like_count":0},{"had_liked":false,"id":303590,"user_name":"连星科技","can_delete":false,"product_type":"c1","uid":2642229,"ip_address":"","ucode":"C84FF7FF4AAE56","user_header":"https://static001.geekbang.org/account/avatar/00/28/51/35/d3a1144b.jpg","comment_is_top":false,"comment_ctime":1626865463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626865463","product_id":100039001,"comment_content":"go既可以面向过程，又可以面向对象，还可以面向函数","like_count":0},{"had_liked":false,"id":302481,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1626235732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626235732","product_id":100039001,"comment_content":"重构的目的（why）、对象（what）、时机（when）、方法（how）； 这里的时机和方法怎么理解呢","like_count":0},{"had_liked":false,"id":302480,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1626235583,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626235583","product_id":100039001,"comment_content":"更加能落地 是什么意思呀","like_count":0},{"had_liked":false,"id":297639,"user_name":"追逐繁星的孩纸~","can_delete":false,"product_type":"c1","uid":1593884,"ip_address":"","ucode":"69DC37A9E39C7E","user_header":"https://static001.geekbang.org/account/avatar/00/18/52/1c/e902de0f.jpg","comment_is_top":false,"comment_ctime":1623684013,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1623684013","product_id":100039001,"comment_content":"问题1<br>答：编程规范是最有效的，还有些手段比如CR，TDD。<br>问题2<br>答：因为面向对象具备四大特性，能够实现复杂的设计思路，是设计模式实现的基础。","like_count":0},{"had_liked":false,"id":294439,"user_name":"何同一","can_delete":false,"product_type":"c1","uid":2637195,"ip_address":"","ucode":"3270B66A34F29A","user_header":"https://static001.geekbang.org/account/avatar/00/28/3d/8b/47bcc851.jpg","comment_is_top":false,"comment_ctime":1621942743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621942743","product_id":100039001,"comment_content":"设计原则是指导思想<br>面向对象是工具<br>规范和重构是工作流程<br>设计模式是前人总结的套路","like_count":0},{"had_liked":false,"id":290432,"user_name":"乐","can_delete":false,"product_type":"c1","uid":2098217,"ip_address":"","ucode":"5379CD3C973434","user_header":"https://static001.geekbang.org/account/avatar/00/20/04/29/14ccf5dd.jpg","comment_is_top":false,"comment_ctime":1619542545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619542545","product_id":100039001,"comment_content":"泛型编程，元编程也是编程范式的一种么？","like_count":0},{"had_liked":false,"id":289702,"user_name":"哇*我好肥","can_delete":false,"product_type":"c1","uid":2579133,"ip_address":"","ucode":"26C937842EC9FE","user_header":"https://static001.geekbang.org/account/avatar/00/27/5a/bd/a3b20809.jpg","comment_is_top":false,"comment_ctime":1619147238,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619147238","product_id":100039001,"comment_content":"高质量代码应该具有的能力<br>1、面向对象思想：<br>(1)四大特性：封装、抽象、继承、多态。可以实现很多复杂的设计思路，是很多设计原则、设计模式的编码实现基础<br>(2)需要掌握的7大知识点：<br>①四大特性<br>②面向对象编程和面向过程编程的区别和联系<br>③面向对象分析、面向对象设计、面向对象编程<br>④接口和抽象类的区别以及各自的应用场景<br>⑤基于接口而非实现编程的设计思想<br>⑥多用组合少用继承的设计思想<br>⑦面向过程的贫血模型和面向对象的充血模型<br>2、设计原则：是指导我们代码设计的一些经验总结，对是否应用某种设计模式具有指导作用<br>3、设计模式：是我们软件开发过程中遇到一些问题，总结出来的一套解决方案或者设计思路，它的主要目的是提高代码的可扩展性<br>4、编程规范：提高代码的可读性，命名的规范，注释的描述，函数的长度适中等等<br>5、重构：就是用上面的工具（面向对象设计思想、设计原则、设计模式、编码规范）来对代码优化，但是不要过度设计，在遇到问题的时候，才针对考虑重构<br><br>你觉得哪一部分内容对提高代码质量最有效？为什么？<br>我觉得面对对象思想和设计模式最有效。其实我觉得五个都非常重要，一个好的软件，不可能离开这五个特性的，为什么选这两个？是因为面对对象的思想的四大特性是必不可少的，而设计模式结合这四大特性可以解决很多复杂的代码。<br><br>你还知道哪些可以提高代码质量的方法？<br>利用mvc、mvp、mvvm等框架可以提高代码的质量","like_count":0},{"had_liked":false,"id":288456,"user_name":"keep_it_real","can_delete":false,"product_type":"c1","uid":2055554,"ip_address":"","ucode":"F5057CAF752FF3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","comment_is_top":false,"comment_ctime":1618476301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618476301","product_id":100039001,"comment_content":"看的再多也没用，都是纸上谈兵，理解再深刻过几天又忘了。只有在平时用到去真正解决了问题，那就深深的刻在脑海了。","like_count":0},{"had_liked":false,"id":287900,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1618212669,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618212669","product_id":100039001,"comment_content":"课堂讨论<br>1、我认为设计思想+设计模式提高我们代码的扩展性最好，当开发新的功能点是可以基于已有设计填充不同的功能实现<br>编码规范+持续重构对于提高我们代码的简单可读性可测试性可复用性更好，平常我们都会通过一些小重构优化重复代码等<br>而设计原则可以在我们完成编码时来检验代码是否符合原则，从具体再到抽象<br>2、设计模式、设计原则都是基于面向对象的四大特性才能落地，另外设计模式也可以通过面向过程编程语言写面向对象的代码来实现","like_count":0},{"had_liked":false,"id":287871,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1618203347,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1618203347","product_id":100039001,"comment_content":"第一题：重构，重构作为保持代码质量不下降的有效手段，利用的就是面向对象、设计原则、设计模式、编码规范这些理论。","like_count":0},{"had_liked":false,"id":287870,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1618203283,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1618203283","product_id":100039001,"comment_content":"第二题，是因为面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式等编码实现的基础。","like_count":0},{"had_liked":false,"id":284912,"user_name":"李叶","can_delete":false,"product_type":"c1","uid":1470449,"ip_address":"","ucode":"41B33FA8526E48","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/f1/35f9f16f.jpg","comment_is_top":false,"comment_ctime":1616543631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616543631","product_id":100039001,"comment_content":"面向对象设计思想 设计原则 设计模式 编码规范 重构是服务代码质量的5大方法论","like_count":0},{"had_liked":false,"id":283955,"user_name":"程序猿MT","can_delete":false,"product_type":"c1","uid":2319922,"ip_address":"","ucode":"6B97D4D535F5BB","user_header":"","comment_is_top":false,"comment_ctime":1615994943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615994943","product_id":100039001,"comment_content":"面向对象是一种编程思想，你对设计模式的理解，会直接影响你的抽象能力。学习，学习。","like_count":0},{"had_liked":false,"id":282879,"user_name":"ck","can_delete":false,"product_type":"c1","uid":1142348,"ip_address":"","ucode":"2335A22314296A","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/4c/494b2907.jpg","comment_is_top":false,"comment_ctime":1615450865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615450865","product_id":100039001,"comment_content":"一下收到这么多名词, 感觉自己想要把整篇文章背下来. 静静心, 重点名词和名次之间的关系要放到脑子里.","like_count":0,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176028,"discussion_content":"名字很拉风","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582016117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1464006,"avatar":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","nickname":"斐波那契","note":"","ucode":"85E2EBC01392B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176039,"discussion_content":"必须的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582016790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":176028,"ip_address":""},"score":176039,"extra":""}]}]},{"had_liked":false,"id":282012,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1615014974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615014974","product_id":100039001,"comment_content":"个人觉得编程规范和代码重构对改善代码质量可以有立竿见影的效果，这两部分直接作用于代码，对代码进行外科手术式的改造，因此效果最明显。其他提高代码质量的方式有利用自动化工具或者集成开发工具对代码进行自动语法补全，或则代码规范性检查，还可以利用一些成熟的模板进行代码编写。<br>设计模式中提到面向对象，这是因为设计模式就是用来解决面向对象的程序设计中的问题。","like_count":0},{"had_liked":false,"id":281971,"user_name":"CoreDao","can_delete":false,"product_type":"c1","uid":2418145,"ip_address":"","ucode":"75D08C21EC57FA","user_header":"https://static001.geekbang.org/account/avatar/00/24/e5/e1/5af35687.jpg","comment_is_top":false,"comment_ctime":1614999162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614999162","product_id":100039001,"comment_content":"1. 面向对象是基础，高楼的基建所以很重要，而最有效的我觉得是设计模式，因为它是过往那个坎坷的总结，针对问题最有效的解决办法。<br>2. 同上，因为面向对象是基础。","like_count":0},{"had_liked":false,"id":280401,"user_name":"🌐是平的","can_delete":false,"product_type":"c1","uid":2449361,"ip_address":"","ucode":"7D890E3994999F","user_header":"https://static001.geekbang.org/account/avatar/00/25/5f/d1/6aa90b7a.jpg","comment_is_top":false,"comment_ctime":1614178331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614178331","product_id":100039001,"comment_content":"面向过程，面向对象，面向百度","like_count":0},{"had_liked":false,"id":280165,"user_name":"Geek_ea3267","can_delete":false,"product_type":"c1","uid":1962384,"ip_address":"","ucode":"71C1EBF50F457A","user_header":"","comment_is_top":false,"comment_ctime":1614102023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614102023","product_id":100039001,"comment_content":"1.重构最有效, 因为重构包含了其它四种方法论<br>2.我猜 设计模式是基于面向对象这个编程范式而总结的开发经验","like_count":0},{"had_liked":false,"id":278244,"user_name":"你当像鸟飞往你的山","can_delete":false,"product_type":"c1","uid":1116363,"ip_address":"","ucode":"7F63B307D7B92D","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/cb/5a0690cb.jpg","comment_is_top":false,"comment_ctime":1612843711,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612843711","product_id":100039001,"comment_content":"重构的意识很重要，每读一遍代码，就做一些改进","like_count":0},{"had_liked":false,"id":273983,"user_name":"爱学习的Kirk","can_delete":false,"product_type":"c1","uid":2392633,"ip_address":"","ucode":"CB6607E26037EC","user_header":"https://static001.geekbang.org/account/avatar/00/24/82/39/c3227567.jpg","comment_is_top":false,"comment_ctime":1610776540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610776540","product_id":100039001,"comment_content":"暂时个人认为编码规范和遵循一些团队的基本设计原则对提高代码质量非常有效。面向对象是一种思想，是基石，一名合格的开发者必备且需要不断精进的思想","like_count":0},{"had_liked":false,"id":273462,"user_name":"刘立嘉","can_delete":false,"product_type":"c1","uid":2414637,"ip_address":"","ucode":"1241140EBE7FE3","user_header":"https://static001.geekbang.org/account/avatar/00/24/d8/2d/6ec3760c.jpg","comment_is_top":false,"comment_ctime":1610605393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610605393","product_id":100039001,"comment_content":"我觉得5点各有侧重，设计模式多种多样，能谈到这四个字的程序员，一定是很有经验的，它本身也是前人经过长时间的实践，总结出来的代码编写经验，最后形成了一套可借鉴的固定模式，对想提升代码编写技术的人很有帮助。","like_count":0},{"had_liked":false,"id":272264,"user_name":"Geek_d3e32a","can_delete":false,"product_type":"c1","uid":2406530,"ip_address":"","ucode":"ABA0CBBEF3EC60","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkeAgcDSuVibqooia2ibmWQ0s7OSuqsXaX84wjlcic4t3s1ULGx5kcx9mdsN4cKIJAAu6fKNaGnOFZicg/132","comment_is_top":false,"comment_ctime":1610010460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610010460","product_id":100039001,"comment_content":"1、分情况：如果是做框架的重构，重构完了给别人用，或者是在已有系统上做优化，那编程规范就很重要，需要其他开发者按规范来进行编码；需要开发人员从无到有去完成一个模块代码的编写，那设计思想、设计原则、设计模式和编程规范都很重要。<br>2、说明面向对象的设计思想非常之重要！","like_count":0},{"had_liked":false,"id":272220,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1609992451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609992451","product_id":100039001,"comment_content":"## 好的判断来自经验，而经验来自坏的判断。 <br>再看今天的内容，感受又不同了，编程是一个工程问题，主题中讨论的 `面向对象`、`设计原则`、`设计模式`、`编程规范`、`重构技巧`，这五个概念说到底还是一个经验的问题。<br>好的判断来自经验，而经验来自坏的判断。<br>我们没有精力也没有必要把前任的错误都犯一遍再总结出同样的经验，站在他们的肩膀上吧，平庸的我们也有如神助~","like_count":0},{"had_liked":false,"id":269475,"user_name":"Am0xil","can_delete":false,"product_type":"c1","uid":2153943,"ip_address":"","ucode":"CE2A04F9FF9FE6","user_header":"https://static001.geekbang.org/account/avatar/00/20/dd/d7/885e4ce3.jpg","comment_is_top":false,"comment_ctime":1608682944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608682944","product_id":100039001,"comment_content":"前几天重构了自己以前的一个功能模块，业务和逻辑并不复杂，但我却整整搞了一周，现在想想，主要还是因为第一次做的时候单纯追求速度，没有做任何考虑，为了交付而实现，方法能写死就写死，在主方法中写了大量的实现而没有抽出来，几乎没有任何的扩展性和维护性，感觉自己这一年多来CRUD了一年，也CV了一年，终究活成了曾经最不想变成的样子","like_count":0},{"had_liked":false,"id":267898,"user_name":"米虫","can_delete":false,"product_type":"c1","uid":1448031,"ip_address":"","ucode":"18B78262CA2B0A","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/5f/b391c6c2.jpg","comment_is_top":false,"comment_ctime":1607989754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607989754","product_id":100039001,"comment_content":"最直接有效的是重构，因为需求变化和人力时间问题。长期来看是建立团队技术体系，让团队🈶️组织能力，加大基建投入，完善培养与晋升机制，才能把这些落地下去。<br>","like_count":0},{"had_liked":false,"id":267363,"user_name":"焱","can_delete":false,"product_type":"c1","uid":1113301,"ip_address":"","ucode":"677BF1BE4B94D5","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/d5/1cf5fd56.jpg","comment_is_top":false,"comment_ctime":1607694641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607694641","product_id":100039001,"comment_content":"个人觉得是设计原则最重要，比如说开闭原则，现在维护的项目耦合过高每次修改都得小心翼翼，然后呢设计模式是对遇到问题抽象成对象的一种解决方案呢","like_count":0},{"had_liked":false,"id":265306,"user_name":"李奇峰","can_delete":false,"product_type":"c1","uid":1563487,"ip_address":"","ucode":"22BC56BA5A5726","user_header":"https://static001.geekbang.org/account/avatar/00/17/db/5f/c5791954.jpg","comment_is_top":false,"comment_ctime":1606843151,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606843151","product_id":100039001,"comment_content":"在实际的工作生产中，我认为代码整洁性对于代码的质量最重要。因为大家在开发的时候都是团队合作的，代码的整洁性可以大大提高团队整体的效率，所以显得尤为重要。","like_count":0},{"had_liked":false,"id":264784,"user_name":"落尘","can_delete":false,"product_type":"c1","uid":1802622,"ip_address":"","ucode":"7B76B94CA301D7","user_header":"https://static001.geekbang.org/account/avatar/00/1b/81/7e/fb688b5c.jpg","comment_is_top":false,"comment_ctime":1606647495,"is_pvip":false,"replies":[{"id":"96060","content":"嗯嗯 ������","user_name":"作者回复","comment_id":264784,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700527,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1606647495","product_id":100039001,"comment_content":"讨论课题：<br>1.我认为提高代码质量的核心思想应该是设计原则；根据实际业务，或许有时违背设计模式反而能够提高代码质量？<br>2.GoF 的《设计模式》是针对面向对象编程提出的？因此小标题特意提到“面向对象”？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510685,"discussion_content":"嗯嗯 ������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264389,"user_name":"Daisy","can_delete":false,"product_type":"c1","uid":1800029,"ip_address":"","ucode":"5B4A9DF62BB583","user_header":"https://static001.geekbang.org/account/avatar/00/1b/77/5d/b3b4bc02.jpg","comment_is_top":false,"comment_ctime":1606454021,"is_pvip":false,"replies":[{"id":"96074","content":"饿呢","user_name":"作者回复","comment_id":264389,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700608,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1606454021","product_id":100039001,"comment_content":"第二个问题，文中有答案了，是因为面向对象语言的特性。面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式编码实现的基础。","like_count":0},{"had_liked":false,"id":263380,"user_name":"初学者","can_delete":false,"product_type":"c1","uid":2331845,"ip_address":"","ucode":"A6B5DDB0FCD5EC","user_header":"https://static001.geekbang.org/account/avatar/00/23/94/c5/67fa8668.jpg","comment_is_top":false,"comment_ctime":1606120308,"is_pvip":false,"replies":[{"id":"96099","content":"是的","user_name":"作者回复","comment_id":263380,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700778,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1606120308","product_id":100039001,"comment_content":"一直跟着pojo，controller，service转写不出好的代码","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510166,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263075,"user_name":"Geek_54e0bd","can_delete":false,"product_type":"c1","uid":2283289,"ip_address":"","ucode":"24C615524F9570","user_header":"","comment_is_top":false,"comment_ctime":1605971303,"is_pvip":false,"replies":[{"id":"96111","content":"������","user_name":"作者回复","comment_id":263075,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700857,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1605971303","product_id":100039001,"comment_content":"面向对象是易筋经，设计模式是独孤九剑","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482189,"discussion_content":"可以再看看前面的28、29讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580114137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147911,"discussion_content":"没法mock呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579680931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261225,"user_name":"mbg_feiRen","can_delete":false,"product_type":"c1","uid":2260457,"ip_address":"","ucode":"40E843F6A45142","user_header":"","comment_is_top":false,"comment_ctime":1605245584,"is_pvip":false,"replies":[{"id":"96153","content":"嗯嗯","user_name":"作者回复","comment_id":261225,"uid":"1190123","ip_address":"","utype":1,"ctime":1606701530,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1605245584","product_id":100039001,"comment_content":"面向对象、设计原则、设计模式、编程规范、重构，这五者是相互协助，互利共赢的原则，先掌握，后灵活运用，方可升华！","like_count":0,"discussions":[{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147735,"discussion_content":"总之CE的问题在于你写的爽了,你的调用者食屎.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579670377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147733,"discussion_content":"CE的缺陷和性能关系极小,主要问题在于你封装的module的调用者必须处理CE,让调用者非常烦.你想想,当你面对一个必须捕获的自定义CE,(例如 FormatUnsupportedEXception)你知道这个异常是什么意思?是不是还要翻module作者的源码去看?看了半天是不是还要琢磨该怎么处理异常?多层的CE就更不友好了.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579670296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259258,"user_name":"JRich","can_delete":false,"product_type":"c1","uid":1114901,"ip_address":"","ucode":"66AE9D61533960","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/15/293a185d.jpg","comment_is_top":false,"comment_ctime":1604664057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604664057","product_id":100039001,"comment_content":"觉得是不是可以回溯到最本源，面向对象编程产生的历史背景是什么，是为了解决什么问题，她有什么优势，为什么这么设计，设计的理论依据是什么，这么追问下去是不是就能搞懂面向对象的思想了。","like_count":0},{"had_liked":false,"id":259251,"user_name":"JRich","can_delete":false,"product_type":"c1","uid":1114901,"ip_address":"","ucode":"66AE9D61533960","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/15/293a185d.jpg","comment_is_top":false,"comment_ctime":1604663555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604663555","product_id":100039001,"comment_content":"对提升代码质量最有效的是设计模式，因为设计模式是是用来解决具体某一类问题的，这类问题解决了，代码质量也就提升了。第二个问题是因为是针对面向对象编程的经验总结。","like_count":0},{"had_liked":false,"id":256715,"user_name":"意林","can_delete":false,"product_type":"c1","uid":1607657,"ip_address":"","ucode":"95A333608E1D43","user_header":"https://static001.geekbang.org/account/avatar/00/18/87/e9/80a3e28e.jpg","comment_is_top":false,"comment_ctime":1603714800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603714800","product_id":100039001,"comment_content":"对于设计模式，常用和不常用，不知道作者是如何界定的呢？","like_count":0},{"had_liked":false,"id":256282,"user_name":"一万小时","can_delete":false,"product_type":"c1","uid":1297927,"ip_address":"","ucode":"D2D443595BB1ED","user_header":"","comment_is_top":false,"comment_ctime":1603592091,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603592091","product_id":100039001,"comment_content":"提高软件质量的方法：每个函数都用bool返回值，并且如果不符合函数条件，提前return false。不知道算不算一个提高的方案","like_count":0},{"had_liked":false,"id":254459,"user_name":"Kelly.W","can_delete":false,"product_type":"c1","uid":1518308,"ip_address":"","ucode":"6EFB58A24355C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/2a/e4/714ffd01.jpg","comment_is_top":false,"comment_ctime":1603118059,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1603118059","product_id":100039001,"comment_content":"我认为面向对象设计思想对提高代码质量最有效。因为它是实现设计原则和设计模式的基础，可以在首次写代码时就避免一些问题，","like_count":0},{"had_liked":false,"id":250296,"user_name":"闻天","can_delete":false,"product_type":"c1","uid":2206424,"ip_address":"","ucode":"DE44AA4B728D20","user_header":"","comment_is_top":false,"comment_ctime":1601016037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601016037","product_id":100039001,"comment_content":"不是说函数式编程才是编程界的一等公民吗，java也支持了函数式编程当然还有很多编程语言支持scala","like_count":0},{"had_liked":false,"id":249264,"user_name":"REAL_MADIRD","can_delete":false,"product_type":"c1","uid":1012889,"ip_address":"","ucode":"9E327B5456739D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/99/dbdee494.jpg","comment_is_top":false,"comment_ctime":1600530918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600530918","product_id":100039001,"comment_content":"面向对象是设计原则、设计模式的地基","like_count":0},{"had_liked":false,"id":247567,"user_name":"apollo_steve","can_delete":false,"product_type":"c1","uid":1708286,"ip_address":"","ucode":"754053D5957A94","user_header":"https://static001.geekbang.org/account/avatar/00/1a/10/fe/a46a5a06.jpg","comment_is_top":false,"comment_ctime":1599742913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599742913","product_id":100039001,"comment_content":"作为一个新手，我觉得比较重要的是代码规范，这个容易掌握，且能很好的提高代码可读性；需要深入了解面向对象特性，这是基础；设计原则和设计模式需要多去练；代码重构这部分是工作重点，但只有掌握了前面的部分，才能更好完成；<br>面向对象可以实现很多复杂的设计思想，面向过程和面向函数实现的功能不是很多；所以重点提到面向对象","like_count":0},{"had_liked":false,"id":246378,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1599302165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599302165","product_id":100039001,"comment_content":"面向对象、设计原则、设计模式、编程规范、代码重构，这五者都是保持或者提高代码质量的方法论，本质上都是服务于编写高质量代码这一件事的。每一种对提高代码质量有很有用，并且作用的维度不一样，都很重要，我觉得差别主要体现在掌握的难易程度，而是否容易掌握又体现在使用的频度上，就大多数码代码程序员来说，显然设计模式、原则及重构技巧这些用的机会不多，也就更不容易深谙其精髓，所以才要来学习老师的《设计模式之美》，希望通过该课程能够在老师的引领下尽情体验设计模式之美。","like_count":0},{"had_liked":false,"id":245694,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599028963,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599028963","product_id":100039001,"comment_content":"问题1：<br>1、重构。<br>2、不断将代码整合的更具有可读性、可扩展性、可维护性。<br>3、暂无<br><br>问题2：<br>1、可复用以对象作为基础","like_count":0},{"had_liked":false,"id":244193,"user_name":"逆风一战九","can_delete":false,"product_type":"c1","uid":2143900,"ip_address":"","ucode":"83127627F6F37C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI45zO9GOMquhD0ia1wTBSwtJ1juPcpFTSrOGicGW3jf6JclaudauHicN8OpADArQKL8zPtDicEx4aicgA/132","comment_is_top":false,"comment_ctime":1598423657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598423657","product_id":100039001,"comment_content":"设计模式和原则 是脑袋， 指导 面向对象 这种方式来进行开发和重构 ，保证项目代码，修改容易，增删不易出bug , 便于后面的迭代。","like_count":0},{"had_liked":false,"id":243850,"user_name":"y y gi r l","can_delete":false,"product_type":"c1","uid":2132615,"ip_address":"","ucode":"0BC00677D3071D","user_header":"https://static001.geekbang.org/account/avatar/00/20/8a/87/dd68531b.jpg","comment_is_top":false,"comment_ctime":1598312057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598312057","product_id":100039001,"comment_content":"设计面向对象是基石，设计原则是目标检测工具，设计模式是结构方法论，编码规范是代码调整的方法论，可以把设计原则作为工具去执行","like_count":0},{"had_liked":false,"id":239292,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1596498361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596498361","product_id":100039001,"comment_content":"我觉得提高代码质量最重要的是设计模式，设计模式易于实践。<br>设计模式与面向对象编程紧密相关。","like_count":0},{"had_liked":false,"id":238600,"user_name":"Elvis Lee","can_delete":false,"product_type":"c1","uid":2098270,"ip_address":"","ucode":"A4B26AFFE817FA","user_header":"https://static001.geekbang.org/account/avatar/00/20/04/5e/5d2e6254.jpg","comment_is_top":false,"comment_ctime":1596209674,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596209674","product_id":100039001,"comment_content":"个人觉得编程规范最能有效提高编程质量，程序往往是写给别人看的，可读性最直观，编写不规范大大提高阅读难度<br>面向对象是设计模式的基础","like_count":0},{"had_liked":false,"id":238415,"user_name":"Happy—sea","can_delete":false,"product_type":"c1","uid":1624484,"ip_address":"","ucode":"4EAD3636164392","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/a4/66b606ad.jpg","comment_is_top":false,"comment_ctime":1596162798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596162798","product_id":100039001,"comment_content":"在今天讲到的内容中，你觉得哪一部分内容对提高代码质量最有效？为什么？除了我罗列的这些内容之外，你还知道哪些可以提高代码质量的方法？<br>我觉得遵守编码规范对提高代码质量有一定的作用，像设计模式、重构这些都是建立在最开始的遵守编码规范的基础上的。其他的我觉得可以提高代码质量的方法是读前辈的源码，虽然我到目前为止读得很少。。。。。。就像写小说，看得多了也有了感觉了","like_count":0},{"had_liked":false,"id":238299,"user_name":"龙猫","can_delete":false,"product_type":"c1","uid":1112490,"ip_address":"","ucode":"FD726CC969EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","comment_is_top":false,"comment_ctime":1596115877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596115877","product_id":100039001,"comment_content":"来晚了，才发现这么牛biubiu的课","like_count":0},{"had_liked":false,"id":238127,"user_name":"站在岸上的鱼","can_delete":false,"product_type":"c1","uid":2093578,"ip_address":"","ucode":"96C3D7B1772541","user_header":"https://static001.geekbang.org/account/avatar/00/1f/f2/0a/e10d198f.jpg","comment_is_top":false,"comment_ctime":1596074981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596074981","product_id":100039001,"comment_content":"面向对象，设计模式，编程规范。这三个对提高代码质量有比较明显的帮助。正确的使用设计模式能让你的代码更简洁，更易阅读。熟练使用面向对象的特性，可以让代码的逻辑更清晰，至于编程规范，平时用的最多的应该就是命名规范，一套系统的命名规范可以让代码更易理解。一个好的项目框架的设计也是提高代码质量的好办法，但是，框架设计这个东西是随着你的能力的提升而有不同的认识的，如何让自己的框架变得更易重构也是很重要的。<br><br>现在说的这些设计模式的基础就是面向对象编程，就像使用c，很多设计模式实现起来就很复杂。准确的说是基本无法实现。","like_count":0},{"had_liked":false,"id":237880,"user_name":"时二少","can_delete":false,"product_type":"c1","uid":1352255,"ip_address":"","ucode":"874213405EDEFC","user_header":"https://static001.geekbang.org/account/avatar/00/14/a2/3f/73d08b2a.jpg","comment_is_top":false,"comment_ctime":1595994686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595994686","product_id":100039001,"comment_content":"1.设计原则。因为这个是规范，规范的产生是经验总结。首先得有面向对象的思想，在面向对象的基础之上，设计原则是最能提高代码质量","like_count":0},{"had_liked":false,"id":237740,"user_name":"汉江","can_delete":false,"product_type":"c1","uid":1788647,"ip_address":"","ucode":"01622D984B8F9B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4a/e7/6c16af5d.jpg","comment_is_top":false,"comment_ctime":1595939447,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595939447","product_id":100039001,"comment_content":"设计原则就像宪法一样 是基本的，团队成员容易达成一致，设计模式是设计原则为基本约束下的较具体的行为规范","like_count":0},{"had_liked":false,"id":235165,"user_name":"朱月俊","can_delete":false,"product_type":"c1","uid":1017707,"ip_address":"","ucode":"4DA0728B862FBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","comment_is_top":false,"comment_ctime":1594911819,"is_pvip":false,"replies":[{"id":"87058","content":"😄","user_name":"作者回复","comment_id":235165,"uid":"1190123","ip_address":"","utype":1,"ctime":1595205933,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1594911819","product_id":100039001,"comment_content":"争哥 牛逼 能提出这些词已经不错了，还能对比分析。赞👍榜样","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501620,"discussion_content":"😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595205933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229722,"user_name":"御风","can_delete":false,"product_type":"c1","uid":1812807,"ip_address":"","ucode":"51C8212BE06364","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","comment_is_top":false,"comment_ctime":1593130758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593130758","product_id":100039001,"comment_content":"评论区说“函数是相对比较小的可复用单位<br>面向对象把可复用单位提升到类层次<br>设计模式把可复用单位提升到框架层次”。<br>自己当下的能力还在第一到第二阶段直接。在用类和对象进行分析、设计和组织代码时，就感到犯怵。<br>希望本专栏能让自己有很大的提升。","like_count":0},{"had_liked":false,"id":228140,"user_name":"杨锋","can_delete":false,"product_type":"c1","uid":1283461,"ip_address":"","ucode":"85A7828A538FB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","comment_is_top":false,"comment_ctime":1592565540,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592565540","product_id":100039001,"comment_content":"1、实际工作中，常常因为需要快速迭代，都是先简单粗暴的实现功能。所以，重构是必须的手段。而重构要以面向对象，编程规范，设计原则，设计模式这些理论作为依据。所以争哥讲的都是重点，缺一不可，哈哈哈。<br>2、面向对象是设计模式的基础？","like_count":0},{"had_liked":false,"id":226545,"user_name":"小树苗","can_delete":false,"product_type":"c1","uid":1644500,"ip_address":"","ucode":"71288176D058E2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqtnoXPFibFwKdrUibJQWYSCmAlc7FeEH5MbjiawszNgwEXAkuWKGYQMTQbnQbjlR8n9lpDgN4GQHoXQ/132","comment_is_top":false,"comment_ctime":1592136545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592136545","product_id":100039001,"comment_content":"code review是提高代码质量的不错方法，让优秀的人站在旁观者的角度提出建议。<br>如果自己本身能力有限，最好还是学习基本功，再谈代码质量。","like_count":0},{"had_liked":false,"id":226443,"user_name":"Chris Zou","can_delete":false,"product_type":"c1","uid":1897148,"ip_address":"","ucode":"B6DFC71C1DD8B7","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/bc/ffc7ad67.jpg","comment_is_top":false,"comment_ctime":1592104312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592104312","product_id":100039001,"comment_content":"1. 我觉的设计原则最更根本的，然后具体的设计模式和编程规范是不同层次的重构。设计模式中的这种重构也是一个迭代中按需进行的，编程规范是编码中要小的方面必须要遵守的，可以形成习惯。<br>2. 设计模式中应用都了面向对象的四大特性：封装、继承、抽象、多态。<br>","like_count":0},{"had_liked":false,"id":224221,"user_name":"pony","can_delete":false,"product_type":"c1","uid":1021530,"ip_address":"","ucode":"B72FA864CDD286","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/5a/846a09f7.jpg","comment_is_top":false,"comment_ctime":1591319295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591319295","product_id":100039001,"comment_content":"1.设计原则最重要，指导原则永远是行动的规范，可以阅读别人的高质量代码来提高<br>2.面向对象是很多设计模式的基础","like_count":0},{"had_liked":false,"id":223736,"user_name":"微末凡尘","can_delete":false,"product_type":"c1","uid":1099525,"ip_address":"","ucode":"25EDFD0914D0F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","comment_is_top":false,"comment_ctime":1591169070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591169070","product_id":100039001,"comment_content":"面向对象是其他的基础，是核心，其他的一些方式方法都是在面向对象的基础上延伸出来的。<br>我觉得重构非常的重要，前两天写了一个功能，领导给我重构了一下代码，瞬间可读性大大的增加，看起来舒服多了，或许这就是高手与菜鸟之间的区别","like_count":0},{"had_liked":false,"id":223510,"user_name":"今夕何夕","can_delete":false,"product_type":"c1","uid":1620929,"ip_address":"","ucode":"C3374848592304","user_header":"https://static001.geekbang.org/account/avatar/00/18/bb/c1/b2f1bd6f.jpg","comment_is_top":false,"comment_ctime":1591104314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591104314","product_id":100039001,"comment_content":"在编程时牢记设计原则，采用适合特定业务场景的设计模式，提高代码质量。","like_count":0},{"had_liked":false,"id":221410,"user_name":"lee","can_delete":false,"product_type":"c1","uid":1213651,"ip_address":"","ucode":"68633E69154801","user_header":"https://static001.geekbang.org/account/avatar/00/12/84/d3/34820f8f.jpg","comment_is_top":false,"comment_ctime":1590495402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590495402","product_id":100039001,"comment_content":"设计模式用的不好容易导致很多问题，单例模式基本上大家都用过，使用很简单。但是，很多人用的不好导致各种问题。前段时间。查找程序中（android）的内存泄露问题。找到了二十来个泄露问题。差不多有一半是因为单例导致的。各种单例持有资源（直接或间接）不释放","like_count":0},{"had_liked":false,"id":218761,"user_name":"李达龙","can_delete":false,"product_type":"c1","uid":1450486,"ip_address":"","ucode":"F5702E69D90B7F","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/f6/16bc9c24.jpg","comment_is_top":false,"comment_ctime":1589869544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589869544","product_id":100039001,"comment_content":"老师讲的很清楚，要跟着课程思考，总结，练习，输出，经过这样的闭环才能转化为自己的知识","like_count":0},{"had_liked":false,"id":216956,"user_name":"舒偌一","can_delete":false,"product_type":"c1","uid":1053833,"ip_address":"","ucode":"C1F87ED4E84FD9","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/89/229bb890.jpg","comment_is_top":false,"comment_ctime":1589376269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589376269","product_id":100039001,"comment_content":"1、认为代码重构是改善代码质量的好方法，因为这个时候问题和产生问题的场景、原因比较清楚，这时有针对性的进行能显著提高质量。<br>2、因为它是基于面向对象程序的特性写的。","like_count":0},{"had_liked":false,"id":216675,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589326472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589326472","product_id":100039001,"comment_content":"该不该用这个设计模式，那就看能不能提高代码的可“扩展性”；要不要“重构”，那就看重代码是否存在“可读”、“可维护”问题等。具体需求具体分析，不要乱用。","like_count":0},{"had_liked":false,"id":216671,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589326199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589326199","product_id":100039001,"comment_content":"面向对象编程是一种编程范式。面向对象语言是对封装、抽象、继承、多态提供语法支持的语言。<br>设计规范是面向对象编程的经验总结，在写代码时要利用封装抽象继承多态的语法遵守这些规范。<br>设计模式是解决具体问题的具体办法。是解决扩展性的。<br>编码规范更具体，解决代码的可读性的。<br>持续重构是利用面向对象提供的语法支持，遵守设计规范，应用设计模式，按照编码规范进行代码升级。<br>面向对象编程要杜绝数据库驱动的思维，要从需求出发设计类属性方法和类之间的关系(泛化、实现、关联、组合、聚合、依赖)。<br><br>组合聚合的区别：对象B：低层、提供者、被引用者。<br>对象A：高层、调用者、流程控制者。<br>A内部实例化B还是外部实例化B，通过A的构造函数或函数传入A，自己实例化对象B是部分整体关系，生命周期一致；A外部实例化通过构造函数或函数传入的，B可以单独存在，生命周期不一致。","like_count":0},{"had_liked":false,"id":216461,"user_name":"师哥","can_delete":false,"product_type":"c1","uid":1333376,"ip_address":"","ucode":"A86CD1661D370F","user_header":"https://static001.geekbang.org/account/avatar/00/14/58/80/c9e232b6.jpg","comment_is_top":false,"comment_ctime":1589264521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589264521","product_id":100039001,"comment_content":"本章了解了面向对象，设计原则，设计模式，编程规范， 重构 的关系。面向对象是基础；设计原则是指导思想；设计模式是手段；编程规范是具体要求；重构是保持代码活力。<br>以后工作中要加强这几方面的建设，转变自己多年养成的不好的编程习惯，希望成为一个代码工匠。","like_count":0},{"had_liked":false,"id":213541,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1588469553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588469553","product_id":100039001,"comment_content":"<br>面向对象的特性（封装、抽象、继承、多态）是设计原则、设计模式的基础。设计原则是指导方针，具体可实施的是设计模式，设计模式解决可扩展问题。编码规范解决可读性问题。重构作为保持代码质量不下降的有效手段，利用的就是面向对象、设计原则、设计模式、编码规范这些理论。<br><br>对编程新手来说最有效的是编码规范了，简单可行性强。在有经验的工程师眼中，可能一切都是对象，才能面向对象编程。","like_count":0},{"had_liked":false,"id":213285,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588362795,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588362795","product_id":100039001,"comment_content":"面向对象编程因为其具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式编码实现的基础 第二题答案","like_count":0},{"had_liked":false,"id":213284,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588362569,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588362569","product_id":100039001,"comment_content":"设计原则最重要，只要掌握了这个就好了，我用anki 把全部的设计模式都背下来，就只会硬套。","like_count":0},{"had_liked":false,"id":211319,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1587948173,"is_pvip":false,"replies":[{"id":"78758","content":"你往后看 慢慢就懂了 后面有讲解","user_name":"作者回复","comment_id":211319,"uid":"1190123","ip_address":"","utype":1,"ctime":1588042276,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1587948173","product_id":100039001,"comment_content":"设计原则是指导我们代码设计的一些经验总结，对于某些场景下，是否应该应用某种设计模式，具有指导意义。<br><br>争哥，这句话可以详细举个例子吗？设计原则如何指导我们去选择哪个设计模式？我感觉设计原则更像是设计模式的一种理论基础，基于这个基础形成了各类设计模式，但是深入到某个具体业务问题的时候，想到的是应该选择什么样的设计模式能达到设计原则要求的那些”理论成果”。这么理解正确吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493249,"discussion_content":"你往后看 慢慢就懂了 后面有讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588042276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210197,"user_name":"track6688","can_delete":false,"product_type":"c1","uid":1088040,"ip_address":"","ucode":"0A9E893F8FD379","user_header":"https://static001.geekbang.org/account/avatar/00/10/9a/28/03613c22.jpg","comment_is_top":false,"comment_ctime":1587696477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587696477","product_id":100039001,"comment_content":"我觉得这几个像是一套组合拳，如果说比较有效的，个人觉得编程规范和重构提高代码质量，是前提。这是我见过，一个方法超千行，六七层循环外加多个if-else等等之后的体会。","like_count":0},{"had_liked":false,"id":203248,"user_name":"guan0078","can_delete":false,"product_type":"c1","uid":1090467,"ip_address":"","ucode":"53B15FF3752A40","user_header":"https://static001.geekbang.org/account/avatar/00/10/a3/a3/804fb3e9.jpg","comment_is_top":false,"comment_ctime":1586160538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586160538","product_id":100039001,"comment_content":"个人喜好。因为用Java，所以团队成员是否用面向对象编程，自己会看的比较重。因为这能体现一个人对功能理解的程度，从数据模型的设计，类的划分，方法的实现和拆分，包括Rest接口的定义都能体现。如果真的能比较好的采用面向对象去实现整个系统，你会发现从表一直到controller的逻辑和层次关系都很清晰。","like_count":0},{"had_liked":false,"id":200512,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1585614449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585614449","product_id":100039001,"comment_content":"先从写的出人人都可以看的懂的代码开始也就是编程规范。<br>然后再根据业务，应用面向对象的编程思想，设计原则，设计模式指导自己写出不一般的代码<br>最后有个高手指导那说极好的。然而大多数公司是没有的。幸好有了这个专栏","like_count":0},{"had_liked":false,"id":200379,"user_name":"赵毅","can_delete":false,"product_type":"c1","uid":1905585,"ip_address":"","ucode":"28F6820F1987F6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIgDicRj9LAvWVyuibTbRnZDFeC6uWI8zfWU1gLM6yPoNklUaiar4TKxEyRHFibjIth3iahRNLcNvewjug/132","comment_is_top":false,"comment_ctime":1585578648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585578648","product_id":100039001,"comment_content":"我觉得面向对象的设计、重构（why、what、when、how）是对提高代码质量有很大帮助，但是知易行难，<br>在日常编码中需要仔细去思考，思考的这个动作非常重要，要琢磨解决这个问题最好的方式是什么？不要一上来就动手写，要考虑实现是不是符合面向对象的设计？是不是还有更简单的算法、更少量的代码来解决这个问题，实现这个功能？这个是今后写代码需要仔细考虑的地方<br>希望学完这门课程对我的面向对象有所帮助","like_count":0},{"had_liked":false,"id":200051,"user_name":"佐西玛","can_delete":false,"product_type":"c1","uid":1090743,"ip_address":"","ucode":"73AAED82340E2B","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/b7/e0d88365.jpg","comment_is_top":false,"comment_ctime":1585537100,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585537100","product_id":100039001,"comment_content":"1、我认为设计模式对提高代码质量最有效，因为设计模式能针对具体的需求提出具体的、方便扩展的实践。<br>2、因为面向对象的丰富特性是设计模式实践的基础。","like_count":0},{"had_liked":false,"id":198027,"user_name":"郭强","can_delete":false,"product_type":"c1","uid":1192928,"ip_address":"","ucode":"38F36F0F4CC775","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/e0/387ab6fd.jpg","comment_is_top":false,"comment_ctime":1585407373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585407373","product_id":100039001,"comment_content":"最重要的是要结合实际业务灵活运用。","like_count":0},{"had_liked":false,"id":197687,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585392073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585392073","product_id":100039001,"comment_content":"我想说的是，虽然我是个学生，自从学了java后，知道了一些理论知识，但是自己的实战经验一点不够，如果一开始你就抱着设计模式的原则，开闭，单一，借口隔离，里是代换，依赖倒转原则，去写代码的化，说实话，有困难，有些简单问题，你会复杂化，但其实不必那么复杂，还是应用在其重要场景比较重要，虽然前期有难度，但内心一直是坚持的，对自己有很大好处，尤其是看源码","like_count":0},{"had_liked":false,"id":197514,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1585382837,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585382837","product_id":100039001,"comment_content":"1 开闭原则很重要，边增加新功能边引入bug太常见了<br>2 设计模式是基于面向对象的吧？","like_count":0},{"had_liked":false,"id":196345,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1585274634,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585274634","product_id":100039001,"comment_content":"打卡3","like_count":0},{"had_liked":false,"id":194474,"user_name":"影子","can_delete":false,"product_type":"c1","uid":1308555,"ip_address":"","ucode":"99791520EC706D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLy4XyYTMxFbuviauqRibjibcBvN2GicibuDT7chCXwDcGgtibrTfaFseiaxKfOrVaEWWxaZcEbhf0KQBUUw/132","comment_is_top":false,"comment_ctime":1585061508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585061508","product_id":100039001,"comment_content":"For me: 本节课程涉及较多概念，其中设计原则需要进一步了解，设计模式需要掌握几种常用模式的应用，编码规范需要学习最基本的20条规范。","like_count":0},{"had_liked":false,"id":194472,"user_name":"影子","can_delete":false,"product_type":"c1","uid":1308555,"ip_address":"","ucode":"99791520EC706D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLy4XyYTMxFbuviauqRibjibcBvN2GicibuDT7chCXwDcGgtibrTfaFseiaxKfOrVaEWWxaZcEbhf0KQBUUw/132","comment_is_top":false,"comment_ctime":1585061320,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585061320","product_id":100039001,"comment_content":"设计原则，设计模式，编码规范<br>以设计原则为指导，使用设计模式设计问题解决方案，遵守编码规范编写代码来落地解决方案","like_count":0},{"had_liked":false,"id":190325,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1584629002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584629002","product_id":100039001,"comment_content":"1.提高代码质量最有效的方法应该是强制遵守编码规范，这是最快的提高代码质量的办法。可以使用 code review 来进行。还有一个就是重构代码，code review 之后重构一下代码。<br><br>2.为啥要在标题中提到面向对象的原因应该是： 所有设计原则都是基于面向对象的特性来展开的，包括继承，多态，封装，抽象","like_count":0},{"had_liked":false,"id":190242,"user_name":"邵松","can_delete":false,"product_type":"c1","uid":1869520,"ip_address":"","ucode":"823AC23E3C0570","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKqkTm19Rdkv5c7icnSAQ1SytUgApjWlb4uYzZvqIkicYROJQJAdV7H91Iibt4WSniacwbyDAHhetZrvw/132","comment_is_top":false,"comment_ctime":1584621334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584621334","product_id":100039001,"comment_content":"封装、抽象、继承、多态！不重视基础知识，很难写出优美的代码。","like_count":0},{"had_liked":false,"id":189097,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1584455303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584455303","product_id":100039001,"comment_content":"面相对象更符合人类的思维模式","like_count":0},{"had_liked":false,"id":184798,"user_name":"Presley","can_delete":false,"product_type":"c1","uid":1215219,"ip_address":"","ucode":"D8F125835F4903","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/f3/7c89d00e.jpg","comment_is_top":false,"comment_ctime":1583406909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583406909","product_id":100039001,"comment_content":"1.设计原则对提高代码质量最有效，设计原则是九阳神功，设计模式是少林拳、武当腿。掌握了设计原则，可以应万变，甚至可以不用设计模式。TDD也是提高代码质量的方式。<br>2.面向对象可能是大趋势吧，还可能是oopL非常适合应用设计模式。","like_count":0},{"had_liked":false,"id":184515,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1091781,"ip_address":"","ucode":"67802124F5181D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epjdWhOia2BKpvYDUIria0klBOvxU4v8CfsobsGYicUia6Hybb4n658LfJymFbuPk0koxldr6QIOpQsMA/132","comment_is_top":false,"comment_ctime":1583332287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583332287","product_id":100039001,"comment_content":"最快提高代码质量：<br>1.编码规范；<br>2.设计原则。<br>原因：<br>1.编码规范：有效提高代码可读性，减少低级bug，代码整洁。<br>2.设计原则：使用基本原则设计的代码不经意间就会发现使用了某一种设计模式","like_count":0},{"had_liked":false,"id":183460,"user_name":"新的起点，新的开始^_^","can_delete":false,"product_type":"c1","uid":1262068,"ip_address":"","ucode":"9C0810F472AC93","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/f4/5df17eff.jpg","comment_is_top":false,"comment_ctime":1583045779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583045779","product_id":100039001,"comment_content":"我感觉代码的可扩展性和维护性是最重要的，其他的还有提高代码质量的还有代码中使用的数据结构，从时间和空间上可以提高代码的质量。<br>因为设计模式的基础就是基于面向对象的","like_count":0},{"had_liked":false,"id":183159,"user_name":"轶帝","can_delete":false,"product_type":"c1","uid":1013660,"ip_address":"","ucode":"2D61D534691189","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/9c/26828c0d.jpg","comment_is_top":false,"comment_ctime":1582964018,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582964018","product_id":100039001,"comment_content":"借助一些静态检查工具，完成代码质量的初级筛查，在code review阶段，工程师之间再相互讨论","like_count":0},{"had_liked":false,"id":181851,"user_name":"发飙的蜗牛","can_delete":false,"product_type":"c1","uid":1800868,"ip_address":"","ucode":"B2D96A2D0B6BA4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7a/a4/79ffe77c.jpg","comment_is_top":false,"comment_ctime":1582644698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582644698","product_id":100039001,"comment_content":"以为自己理解了什么事面向对象编程，什么封装继承抽象多态，要你说的时候就说不出来了","like_count":0},{"had_liked":false,"id":179870,"user_name":"挽风～","can_delete":false,"product_type":"c1","uid":1876429,"ip_address":"","ucode":"342FE973A06488","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a1/cd/46184b76.jpg","comment_is_top":false,"comment_ctime":1582114744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582114744","product_id":100039001,"comment_content":"设计原则是经验总结，设计模式解决代码可扩展性问题，编程规范解决代码可读性可维护性","like_count":0},{"had_liked":false,"id":179659,"user_name":"Geek_neo","can_delete":false,"product_type":"c1","uid":1568248,"ip_address":"","ucode":"147211A6624E01","user_header":"https://static001.geekbang.org/account/avatar/00/17/ed/f8/3a7499f9.jpg","comment_is_top":false,"comment_ctime":1582073025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582073025","product_id":100039001,"comment_content":"我认为编程规范是开发中，提高代码质量最切实可靠的方法之一。原因开发团队每个程序员的“内功”水平有高有低，某个项目可能时间紧迫，着急上线来不及等待团队深入磨合、彼此了解，每个人去遵守编码规范是最直接、简单、有效的办法。","like_count":0},{"had_liked":false,"id":179267,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1581948011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581948011","product_id":100039001,"comment_content":"对于第一题,对我而言,我认为设计模式更加的能够提高代码质量,编程规范是一种习惯,养成就自然遵循了,说实话并不能去养成,但是能够把设计模式实际应用到项目中,则需要一些对设计模式的深入理解,而且设计模式更加具体,能够让代码能加流畅<br>当然,在实际开发中,采用合适的数据结构也是一种提高代码质量的好方法<br>第二题的话,个人认为,设计模式是设计原则的一种具体表现形式,而这些都是建立在编程范式的基础上,只有面向对象这种编程思想才能够体现这些设计模式,这就是这本书为什么叫这个原因","like_count":0},{"had_liked":false,"id":178911,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1043401,"ip_address":"","ucode":"B631E56A112BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/c9/b1b233cf.jpg","comment_is_top":false,"comment_ctime":1581853154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581853154","product_id":100039001,"comment_content":"1、在今天讲到的内容中，你觉得哪一部分内容对提高代码质量最有效？为什么？除了我罗列的这些内容之外，你还知道哪些可以提高代码质量的方法？<br>答：这些手段都比较重要，只是应用于不同的阶段；设计模块框架的时候，肯定是面向对象、设计原则、设计模式有用；<br>具体编码的时候，肯定是编程规范有用；代码维护和更新的时候，代码重构技巧有用。<br><br>另外，对代码的日志规范也是很重要的，一方面可以方便定位线上问题；另一方面，可以方便接入trace监控系统；<br>PS：对面向对象理念不太熟悉，希望下面可以讲到。<br><br>2、我们知道，最经典的设计模式书籍是 GoF 的《设计模式》，它的中文全称是《设计模式：可复用面向对象软件的基础》，英文全称是“Design Patterns: Elements of Reusable Object-Oriented Software”。为什么它在标题中会特意提到“面向对象”呢？<br>答：我感觉，是因为面向对象是最广泛的编程范式吧。","like_count":0},{"had_liked":false,"id":178356,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1581668509,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581668509","product_id":100039001,"comment_content":"从依赖关系上看，设计模式&amp;编码规范依赖设计原则，设计原则依赖面向对象 | 面向过程 | 函数式编程，也就是面向对象这种设计思想是基础，作为工程师，我们直接打交道的是设计模式和编码规范，这是我们落地设计原则和面向对象设计思想的地方，看问题抓本质，那么我们讲面向对象编程到底在讲什么呢？我的理解是通过封装、继承、多态和抽象这些特性完整表达一件事情，可以是名词也可以是动词。直观的例子是如何把大象装进冰箱这个案例，面向过程是1）打开冰箱；2）把大象装进去；3）把冰箱关上，依次完成这些过程就能把大象装进冰箱。好，我们看看面向对象怎么处理这个问题，1）冰箱你给我把门打开；2）冰箱你给我把大象装进去；3）冰箱你给我把门关上。看起来是否没啥区别，这里每个动作都多了执行者，也就是这里的冰箱，也就是冰箱会有三个功能：开门、装大象、关门，也就是每一个动作都必然会有一个执行者，执行者怎么产生呢？不就是对象本身么，冰箱是一个对象，大象也是一个对象，冰箱具有装大象的能力，怎么装呢，开门、装大象和关门啊！发现了么，面向对象隐藏了装大象的细节，冰箱的开门、装大象和关门都是对象本身的功能（方法），理解了面向对象后才能更好理解设计原则设计模式这些东西，这些都是一些写出高质量代码的经验总结，说白了就是套路，我理解设计原则可以帮助我们看懂一些开源框架的代码，学习Apache大佬们是怎么写代码的，从而内化为自己的能力。最后想说一点高质量代码的实践，多考虑异常和兜底场景，给代码留出足够的安全边际，所以说健壮性很重要啊","like_count":0},{"had_liked":false,"id":178293,"user_name":"北纬32°","can_delete":false,"product_type":"c1","uid":1014570,"ip_address":"","ucode":"66D21E24CBF468","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/2a/73495eee.jpg","comment_is_top":false,"comment_ctime":1581652775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581652775","product_id":100039001,"comment_content":"面向对象的四大特性：封装、抽象、继承、多态<br>面向对象编程与面向过程编程的区别和联系<br>面向对象分析、面向对象设计、面向对象编程<br>接口和抽象类的区别以及各自的应用场景<br>基于接口而非实现编程的设计思想<br>多用组合少用继承的设计思想<br>面向过程的贫血模型和面向对象的充血模型<br>设计原则<br>设计原则是指导我们代码设计的一些经验总结。设计原则这块儿的知识有一个非常大的特点，那就是这些原则听起来都比较抽象，定义描述都比较模糊，不同的人会有不同的解读。所以，如果单纯地去记忆定义，对于编程、设计能力的提高，意义并不大。对于每一种设计原则，我们需要掌握它的设计初衷，能解决哪些编程问题，有哪些应用场景。只有这样，我们才能在项目中灵活恰当地应用这些原则。<br>对于这一部分内容，你需要透彻理解并且掌握，如何应用下面这样几个常用的设计原则。<br>SOLID 原则 -SRP 单一职责原则<br>SOLID 原则 -OCP 开闭原则<br>SOLID 原则 -LSP 里式替换原则<br>SOLID 原则 -ISP 接口隔离原则<br>SOLID 原则 -DIP 依赖倒置原则<br>DRY 原则、KISS 原则、YAGNI 原则、LOD 法则","like_count":0},{"had_liked":false,"id":178283,"user_name":"junmawang","can_delete":false,"product_type":"c1","uid":1763466,"ip_address":"","ucode":"977E9E25CE6C94","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/8a/803a42e0.jpg","comment_is_top":false,"comment_ctime":1581649996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581649996","product_id":100039001,"comment_content":"第一个问题<br>提高代码质量最有效的方式还是需要有一个好的编程规范和代码重构，另外可以多读github上面的优秀开源代码，多问自己为什么，弄清楚为什么要这么写，以及如何运用到自己的项目中去。<br>第二个问题<br>所以的设计模式都依赖于对象的处理吧？不然就是面向过程的开发了，大概就用不到设计模式了？","like_count":0},{"had_liked":false,"id":177979,"user_name":"秀丽","can_delete":false,"product_type":"c1","uid":1402332,"ip_address":"","ucode":"9872272B8056F5","user_header":"https://static001.geekbang.org/account/avatar/00/15/65/dc/0737102d.jpg","comment_is_top":false,"comment_ctime":1581565237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581565237","product_id":100039001,"comment_content":"通过本篇文章，先把这几个概念，在大脑里形成一个体系，系统化的学习也就在于此了吧。<br>前面的文章提到了，我们如何认为代码是好的标准，那么这篇文章就是告诉我们如何达到这些标准。<br>通过设计原则的指导，设计模式的运用，当然要把面向对象作为基础，然后通过编码规范的约束，以及代码重构的手段，来达到写一手好代码的目标。","like_count":0},{"had_liked":false,"id":177502,"user_name":"nightn","can_delete":false,"product_type":"c1","uid":1026818,"ip_address":"","ucode":"39FC4FF0281637","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/02/8688abed.jpg","comment_is_top":false,"comment_ctime":1581406846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581406846","product_id":100039001,"comment_content":"结合个人实践说说对提升现有代码质量的一点浅薄理解。提升手段主要是代码重构：小重构主要依据编码规范（如命名、格式等）；大重构就需要借助面向对象设计原则、设计模式等。个人觉得，最常用到的是 SOLID 设计原则，如单一职责原则，开闭原则指导类的抽象封装，里氏替换原则指导类继承的设计。","like_count":0},{"had_liked":false,"id":177329,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1581347855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581347855","product_id":100039001,"comment_content":"目前在编程时仅思考了如何设计一个好的对象，缺少的就设计模式，设计原则，我觉得后两者对写出高质量的代码非常有用，我只所以讨厌自己的代码就是因为程序缺少这方面的思考，代码和人一样，是有灵魂的。","like_count":0},{"had_liked":false,"id":176796,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1581168461,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581168461","product_id":100039001,"comment_content":"第一题：短期来看，编码规范和重构技术对提高代码的质量见效很快；长期来看，还得在上面的基础上加上设计原则和设计模式<br>第二题：因为很多设计模式的实现方式都依赖于面向对象编程的特性","like_count":0},{"had_liked":false,"id":176185,"user_name":"Geek_bb89c3","can_delete":false,"product_type":"c1","uid":1331828,"ip_address":"","ucode":"0F97B5B0F2DDD6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IZKGetBZDuMEa2VwwtesTELvLORIyV749ItgfAqNPv30n4zEv71wuGNr1aNVIVltG0icvH53DHDuqPuzNpiauWAg/132","comment_is_top":false,"comment_ctime":1580982145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580982145","product_id":100039001,"comment_content":"高质量的代码的衡量标准是：易维护，易理解，易扩展，精简，复用，可测试。<br>其中依赖的是面向对象设计思想，设计原则，设计模式，编码规范，重构。<br>其中前面四个是为后面四个服务的：其中编码规范是为了重构中的小重构服务的。设计思想，设计原则，设计模式主要是为了大重构服务的。<br>","like_count":0},{"had_liked":false,"id":175702,"user_name":"张理查","can_delete":false,"product_type":"c1","uid":1003152,"ip_address":"","ucode":"1F93E631CD4B35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/90/a8d19e7b.jpg","comment_is_top":false,"comment_ctime":1580802753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580802753","product_id":100039001,"comment_content":"03.这篇是整个专栏的大纲，先简单介绍了面向对象、设计原则、设计模式、编程规范和代码重构都是什么，以及在培训的过程中要关注什么，再阐述了五者的关系。面向对象的封装、抽象、继承、多态是很多设计原则与设计模式的基础；设计原则是指导代码的经验，强调该干啥不该干啥，是许多设计模式的参考对象；设计模式是设计代码的思路，偏重代码的可扩展性，强调怎么干；编程规范是更偏重细节解决可读性问题，强调怎么写；最后重构是用上述规范模式原则对代码进行改良。归根结底都是在提升代码质量。","like_count":0},{"had_liked":false,"id":173939,"user_name":"song","can_delete":false,"product_type":"c1","uid":1125245,"ip_address":"","ucode":"4A8FECAD2BE795","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/7d/6febeabe.jpg","comment_is_top":false,"comment_ctime":1579792623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579792623","product_id":100039001,"comment_content":"面向对象主要是面向接口实现","like_count":0},{"had_liked":false,"id":173905,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1579770659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579770659","product_id":100039001,"comment_content":"阿里出的《java编码规范》就是一个很好的规范文档","like_count":0},{"had_liked":false,"id":172926,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1579359220,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579359220","product_id":100039001,"comment_content":"1:我觉编码规范很重要，因为他对所有编码都适用，还有一些跟语言强相关的设计技巧。<br>2.个人觉得面相对象使用的比较多，并且能解决大部分的问题的原因","like_count":0},{"had_liked":false,"id":169090,"user_name":"铁血柔情","can_delete":false,"product_type":"c1","uid":1124220,"ip_address":"","ucode":"F09CACF06B8D05","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/7c/463d4342.jpg","comment_is_top":false,"comment_ctime":1578272534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578272534","product_id":100039001,"comment_content":"设计模式对于写出高的代码质量有很大帮助，其实前面老师提到的一种方式就是review代码。面向对象是编程的基础，是实现业务与代码的桥梁。","like_count":0},{"had_liked":false,"id":165808,"user_name":"北风一叶","can_delete":false,"product_type":"c1","uid":1087302,"ip_address":"","ucode":"30310E66341D2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/46/fe1f21d8.jpg","comment_is_top":false,"comment_ctime":1577325301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577325301","product_id":100039001,"comment_content":"王老师讲述了五个概念之间的关系：<br>1. 面向对象，是构成设计的核心基础，在我看来没有面向对象的特性（封装，抽象，继承，多态）就不存在后续的设计<br>2. 设计原则：一些设计的标准，也可以说是一些规范，根据这些规则做设计<br>3. 设计模式：是前人总结出来的针对一些特定的常见问题场景的解决方案，有类似的问题场景可以直接套用<br>4. 编程规范：主要是解决代码在编写过程中的一些诸如命名之类的指导原则<br>5. 重构：是提升现有代码质量的一种手段，是对以上几个概念的充分实践。打卡第七天，今日学习设计模式之美专栏第三篇，王老师讲述了五个概念之间的关系：<br>1. 面向对象，是构成设计的核心基础，在我看来没有面向对象的特性（封装，抽象，继承，多态）就不存在后续的设计<br>2. 设计原则：一些设计的标准，也可以说是一些规范，根据这些规则做设计<br>3. 设计模式：是前人总结出来的针对一些特定的常见问题场景的解决方案，有类似的问题场景可以直接套用<br>4. 编程规范：主要是解决代码在编写过程中的一些诸如命名之类的指导原则<br>5. 重构：是提升现有代码质量的一种手段，是对以上几个概念的充分实践。","like_count":0},{"had_liked":false,"id":165391,"user_name":"喵喵喵","can_delete":false,"product_type":"c1","uid":1211713,"ip_address":"","ucode":"E3AD8BF42E19DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/41/3c5b770b.jpg","comment_is_top":false,"comment_ctime":1577233170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577233170","product_id":100039001,"comment_content":"打卡～","like_count":0},{"had_liked":false,"id":164790,"user_name":"我太难了","can_delete":false,"product_type":"c1","uid":1731602,"ip_address":"","ucode":"B80133799A4494","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6c/12/67bcce50.jpg","comment_is_top":false,"comment_ctime":1577092208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577092208","product_id":100039001,"comment_content":"我看博客有些地方把设计原则称面向对象设计原则，这么理解的话像是集合一样一层一层包含的关系，面向对象思想是最外层集合，这么理解不知道正不正确？","like_count":0},{"had_liked":false,"id":164689,"user_name":"明光村小队长","can_delete":false,"product_type":"c1","uid":1152743,"ip_address":"","ucode":"F6088DAD9D9E37","user_header":"https://static001.geekbang.org/account/avatar/00/11/96/e7/57cf6b75.jpg","comment_is_top":false,"comment_ctime":1577072499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577072499","product_id":100039001,"comment_content":"抽象到底算不算面向对象的特性呢？因为有些人认为抽象不是面向对象所独有的特性。","like_count":0},{"had_liked":false,"id":164530,"user_name":"Yangjing","can_delete":false,"product_type":"c1","uid":1018061,"ip_address":"","ucode":"D88DFD4958D07C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/cd/2c3808ce.jpg","comment_is_top":false,"comment_ctime":1577021296,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577021296","product_id":100039001,"comment_content":"对代码质量最有帮助的还是 设计原则、设计模式（保证代码的扩展性、可维护性）。项目中一直想着下次重构，却基本找不到重构的时间😂","like_count":0},{"had_liked":false,"id":163960,"user_name":"Geek_3e2092","can_delete":false,"product_type":"c1","uid":1788428,"ip_address":"","ucode":"5906E9EE05F4BE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJnv4h4j5tWy6HappcibN0A5wCwMoXGfxeufDfgCfiaficfericwNv5Slode5ysZDkOKDdF0d0orYBHUw/132","comment_is_top":false,"comment_ctime":1576834542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576834542","product_id":100039001,"comment_content":"用着面向对象的语言写着面向过程的代码，尤其在成熟平台基础上的应用逻辑开发。很多年前，打开java编程思想，有几个大大的字，面向对象。多年过去了，对象早就找到了，但还是没有将面向对象实际应用好。珍惜这一次学习的机会，将理论联系实际，将实际上升到理论高度，是我这次学习的目标<br>另外，平时review团队的代码，主要从可读性，可维护性，可扩展性要求较高，忽略了可测试性，忽略了单元白盒测试的重要性。","like_count":0},{"had_liked":false,"id":161861,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1576382925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576382925","product_id":100039001,"comment_content":"对于创建型、结构型、行为型的分类：<br>创建型还能理解，该分类下的模式，都是用于创建对象。<br>但是结构型和行为型就不太理解了，怎么去理解某个设计模式属于结构型或行为型？<br>谢谢老师！","like_count":0},{"had_liked":false,"id":161138,"user_name":"捕风捉影","can_delete":false,"product_type":"c1","uid":1713935,"ip_address":"","ucode":"E7F75B2521C8CF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/27/0f/4af4daff.jpg","comment_is_top":false,"comment_ctime":1576128498,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576128498","product_id":100039001,"comment_content":"1.知识点：<br>1.1 面向对象是很多设计原则、设计模式的基础。<br>代码规范提高编程可读性以及节省编写代码的时间和维护的时间。<br>重构可以快速的调整架构，在以上四种的基础之上。<br>2.疑惑：<br>1.面向对象是很多设计原则、设计模式的基础，可以实现很多复杂的设计思路，为什么可以设计复杂的设计思路？面向对象的特性又是如何在他们上面体现出来的？<br>2.面向对象和面向过程编程的真正区别是什么？ 对象和过程如何在代码中体现出来。<br>3.课后讨论：<br>3.1.以往敲代码的过程中忽略了深入考虑代码质量这个问题， 目前感觉最重要的，就是封装。<br>对于一个机器学习项目而言，比如评估指标。对于评估指标，你可以将它封装，下次直接输入预测值，可以有一个全面的评估<br>另数据的处理流程都是固定的，对这些处理方法，封装成类以待后用。<br>另对于每一个类型的特征，一个统一的方法，你只需要传入你需要的操作，求时间差、取天数，取月份等等，它会给你生成的数据。<br>这些更多体现了代码封装的好处：可复用性<br>3.2 我自己觉得可以提升代码质量的方法，动态命名法，减少变量的命名；另对于指定操作的东西，统一格式，比如我要操作pandas的dataframe的，多列：list_features_target ，多列中的子集：list_features_target_sub，单列：target_feature，标签：target_label；<br>对于自己处理的数据，统一格式，比如数字类型，统一用01，02模式，排序时数据可以清晰可见。————体现的最重要的一点就是将所有固定的东西统一格式，方便阅读，可扩展性也高。<br>3.3 我认为原因是现实生活中所有的事物都可以对象化，我们去分析这个对象的属性和固有行为模式，然后我们可以很快的和代码建立桥梁。<br><br><br>","like_count":0,"discussions":[{"author":{"id":1713935,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/27/0f/4af4daff.jpg","nickname":"捕风捉影","note":"","ucode":"E7F75B2521C8CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80199,"discussion_content":"第二个问题有点偏差，我想的太大了，面向对象是设计原则、设计模式、代码重构的基础..","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576154918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161069,"user_name":"|･ω･｀)","can_delete":false,"product_type":"c1","uid":1636123,"ip_address":"","ucode":"34E1DF62058D80","user_header":"https://static001.geekbang.org/account/avatar/00/18/f7/1b/8036958c.jpg","comment_is_top":false,"comment_ctime":1576113906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576113906","product_id":100039001,"comment_content":"目前对我来说，设计原则是我接触的比较少的部分，<br>面向对象，代码规范和设计模式都或多或少从实际和书籍中有了解和一定的运用，当然也不是特别熟悉quq<br>现在了解了设计原则设计模式的概念，感觉思路又清晰了点！加油！","like_count":0},{"had_liked":false,"id":159642,"user_name":"雨下不停","can_delete":false,"product_type":"c1","uid":1311947,"ip_address":"","ucode":"0893B9C249E48A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/xysT7OH4SrD4sv944ndDv5tnJOk5na37Gxd5owGWsE7ON7AVW0ibnYGNRoZd0ibLWhFVXLLjOB5QFxwjo0EGIkoQ/132","comment_is_top":false,"comment_ctime":1575711627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575711627","product_id":100039001,"comment_content":"编码规范：最显而易见的提高代码质量<br>代码重构：持续保持代码质量<br>面向对象、设计原则、设计模式：提高项目的清晰度，使项目对内对外保持高度清晰透彻的可见、可读、可扩展性","like_count":0},{"had_liked":false,"id":158557,"user_name":"我叫郭小黑","can_delete":false,"product_type":"c1","uid":1463441,"ip_address":"","ucode":"C238592EB5EDBC","user_header":"https://static001.geekbang.org/account/avatar/00/16/54/91/0d4647d9.jpg","comment_is_top":false,"comment_ctime":1575418751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575418751","product_id":100039001,"comment_content":"面相对象，设计原则，设计模式，编程范式都是作为重构的方法论，是重构代码的技术指导，持续的重构对于我们保持良好的代码风格，具有很重要的作用。我们都知道有一种效应叫“破窗效应”，讲的是当一个窗户有瑕疵的时候，那么后面可能会出现更多的瑕疵，所以保持持续的重构是很重要的，但是重构需要建立在良好的单元测试上，要不然重构把功能改坏了，也就没什么意义了，只是我的一些粗略的理解，如果有问题，请大家指出，谢谢","like_count":0},{"had_liked":false,"id":157318,"user_name":"马哲","can_delete":false,"product_type":"c1","uid":1692122,"ip_address":"","ucode":"45FC76B2CE0E53","user_header":"https://static001.geekbang.org/account/avatar/00/19/d1/da/1249fc90.jpg","comment_is_top":false,"comment_ctime":1575107365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575107365","product_id":100039001,"comment_content":"作为一个大公司的实习生，这几个月的工作主要是在别人的代码基础上改动，期间有机会自己从0写了一个服务，自己也很想将代码分模块，在分出几个模块之后，模块内部感觉有点像在写面向过程的代码。<br>其余在别人代码上改动时，更像是在写面向过程的代码，希望我学习之后，在根据一个需求设计服务时，能够思路清晰，更专业。看被人的代码也能专业的识别出其中的设计原则，设计模式等。","like_count":0},{"had_liked":false,"id":156542,"user_name":"zmysang","can_delete":false,"product_type":"c1","uid":1642663,"ip_address":"","ucode":"8A98057E7819DD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/tjhOILHBAmlx6YiaTZJzqzxn1uyB6XpdvGDIZhBn127TYEcoLLzxRiaKvtVd3HllQqPx7cqf2YmibyBUgGGGJPDkw/132","comment_is_top":false,"comment_ctime":1574907705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574907705","product_id":100039001,"comment_content":"觉得编程规范和代码重构比较重要。能做到编程规范，至少可以让代码具备可读性，提供了后续优化和重构的基础，这一点感觉就很多人做不到。通常在工作中，业务需求的变化，很多时候可能会让人心累，可能会疲于去做重构吧，只是在原有代码上堆砌功能，但是其实会导致后面代码的可读性和可维护性越来越差。这一点还是应该要靠自己自觉~","like_count":0},{"had_liked":false,"id":156188,"user_name":"灯盖","can_delete":false,"product_type":"c1","uid":1482839,"ip_address":"","ucode":"0F8455A593D60C","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/57/3a729755.jpg","comment_is_top":false,"comment_ctime":1574830547,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574830547","product_id":100039001,"comment_content":"目前我觉得代码质量的关键在于对于设计模式的理解与运用","like_count":0},{"had_liked":false,"id":156158,"user_name":"络石","can_delete":false,"product_type":"c1","uid":1677237,"ip_address":"","ucode":"B0FCF8156EB2AB","user_header":"https://static001.geekbang.org/account/avatar/00/19/97/b5/431b2561.jpg","comment_is_top":false,"comment_ctime":1574826351,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574826351","product_id":100039001,"comment_content":"面向对象是基础，设计原则、设计模式、编程规范是工具，重构的时候会用到前面两类东西。简记。","like_count":0},{"had_liked":false,"id":156098,"user_name":"chenlingwx","can_delete":false,"product_type":"c1","uid":1168919,"ip_address":"","ucode":"3B65DA03D46411","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/17/2293e98f.jpg","comment_is_top":false,"comment_ctime":1574819200,"is_pvip":false,"replies":[{"id":"59991","content":"后面有单独的一篇文章来讲这个问题，你可以看下目录","user_name":"作者回复","comment_id":156098,"uid":"1190123","ip_address":"","utype":1,"ctime":1574838781,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1574819200","product_id":100039001,"comment_content":"请问老师，怎样判断是否过度设计呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475985,"discussion_content":"后面有单独的一篇文章来讲这个问题，你可以看下目录","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574838781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156063,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1574816537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574816537","product_id":100039001,"comment_content":"阿里出的《Java开发手册》代码规约和相应的IDE插件。从工具侧，提高了代码可读性和代码质量。同时降低了规范门槛。","like_count":0},{"had_liked":false,"id":155813,"user_name":"禅若静水","can_delete":false,"product_type":"c1","uid":1266038,"ip_address":"","ucode":"5028D28106963C","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/76/ad8115b0.jpg","comment_is_top":false,"comment_ctime":1574760533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574760533","product_id":100039001,"comment_content":"提高代码质量的方法论:<br>面向对象（基础），设计原则（指导方针），设计模式（提高扩展性），编程规范（提高可读性），重构（持续提高代码质量）<br>在深刻理解下这些方法论后重构，是提高代码质量可靠的方法！！！","like_count":0},{"had_liked":false,"id":155684,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1574736041,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1574736041","product_id":100039001,"comment_content":"先要有面向对象概念，再者规范，最后设计模式与设计原则，重构大部分都是基于需求的变更导致原有的项目架构不能满足业务的发展方向而不得不发起的流程。","like_count":0},{"had_liked":false,"id":155530,"user_name":"LvTwoCold","can_delete":false,"product_type":"c1","uid":1731782,"ip_address":"","ucode":"AB51168244ECE9","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6c/c6/f4759809.jpg","comment_is_top":false,"comment_ctime":1574695848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574695848","product_id":100039001,"comment_content":"设计模式是为了更好的可扩展性。<br>领域驱动设计也是可以提高编码de","like_count":0},{"had_liked":false,"id":154712,"user_name":"飞鱼","can_delete":false,"product_type":"c1","uid":1739390,"ip_address":"","ucode":"95109E8F7DBE39","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8a/7e/bfe37c46.jpg","comment_is_top":false,"comment_ctime":1574518206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574518206","product_id":100039001,"comment_content":"有没有说一下面向领域","like_count":0},{"had_liked":false,"id":154259,"user_name":"hungery","can_delete":false,"product_type":"c1","uid":1349902,"ip_address":"","ucode":"5CE6E6C1DB073E","user_header":"https://static001.geekbang.org/account/avatar/00/14/99/0e/cf461038.jpg","comment_is_top":false,"comment_ctime":1574399196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574399196","product_id":100039001,"comment_content":"设计模式是这五个中最难的，也是在项目中很关键的一部分，所以本门课就叫做设计模式之美，哈哈哈，瞎猜的!<br>以设计模式为核心，而设计模式很多都是在设计原则的基础上总结出来的模型<br>在学习设计模式的时候，其他四个也是必须要用到的知识点，学好设计模式其他四个也就真正的的理解和应用了；<br>所以这五者之间的关系和解决的问题是得门清才是啊，谢谢王老师带我理清这五个的关系，辛苦啦！","like_count":0},{"had_liked":false,"id":154020,"user_name":"被讨厌的勇气","can_delete":false,"product_type":"c1","uid":1547913,"ip_address":"","ucode":"AE3B3CA27D91A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/89/6e9c05d6.jpg","comment_is_top":false,"comment_ctime":1574348714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574348714","product_id":100039001,"comment_content":"##坚持打卡##<br><br>好的士兵的武器一定不会差，而方法论是写好高质量代码的一套武器。<br><br>面向对象具有丰富的特性，是实现很多复杂设计思路的基础。<br>设计原则是指导我们代码设计的一些经验总结。<br>设计模式是针对软件开发中经常遇到的一些问题，总结出的一套解决方案或设计思路。主要目的是可扩展性，同时也容易被过度使用。一开始不要使用复杂的设计。<br>编码规范解决代码可读性问题。命名、注释、函数长度等。<br>重构，保证代码质量不下降的重要手段。<br><br>个人现阶段感觉编码规范比较重要，我水平比较初级，大部分时间都用在编码上，此时代码的可读性会异常重要。<br><br>《设计模式》提到面向对象，个人认为面向对象的一些特性是使用设计模式的基础，C语言虽然也能实现面向对象的一些特性，但这些特性并非语言的基础部分，类比于组装电脑会选择CPU，而不会自己去造CPU。","like_count":0},{"had_liked":false,"id":153180,"user_name":"姚布斯","can_delete":false,"product_type":"c1","uid":1335972,"ip_address":"","ucode":"09F958407F63FB","user_header":"https://static001.geekbang.org/account/avatar/00/14/62/a4/972b2b33.jpg","comment_is_top":false,"comment_ctime":1574175318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574175318","product_id":100039001,"comment_content":"就像大家说的那样，设计原则是总的指导思想，面向对象是方法，设计模式是技巧。而思想往往是最重要的而且易被忽视的。","like_count":0},{"had_liked":false,"id":153036,"user_name":"程思源","can_delete":false,"product_type":"c1","uid":1021127,"ip_address":"","ucode":"29297C447D717F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/c7/b4cb1d88.jpg","comment_is_top":false,"comment_ctime":1574144338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574144338","product_id":100039001,"comment_content":"先规范，再模式，最后思想。熟能生巧，巧能生变。","like_count":0},{"had_liked":false,"id":152873,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1574092734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574092734","product_id":100039001,"comment_content":"面向对象，设计原则，设计模式，重构，编码规范，这些都单点学习了解过，但是没有像老师这样系统地串联过，受到启发了，迁移发散思考","like_count":0},{"had_liked":false,"id":152825,"user_name":"菩提晓","can_delete":false,"product_type":"c1","uid":1052898,"ip_address":"","ucode":"9716098118C32D","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/e2/d4b51007.jpg","comment_is_top":false,"comment_ctime":1574084309,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574084309","product_id":100039001,"comment_content":"23种设计模式<br>  创建型<br>    常用<br>      单例模式<br>      工厂模式(工厂方法和抽象工厂)<br>      建造者模式<br>    不常用<br>      原型模式<br>  结构型<br>    常用<br>      代理模式<br>      桥接模式<br>      装饰者模式<br>      适配器模式<br>    不常用<br>      门面模式<br>      组合模式<br>      享元模式<br>  行为型<br>    常用<br>      观察者模式<br>      模板模式<br>      策略模式<br>      指责链模式<br>      迭代器模式<br>      状态模式<br>    不常用<br>      访问者模式<br>      备忘录模式<br>      解释器模式<br>      命令模式<br>      中介模式","like_count":0},{"had_liked":false,"id":152794,"user_name":"wyf2317","can_delete":false,"product_type":"c1","uid":1236837,"ip_address":"","ucode":"7F3E61A6188B39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ub4icibeRLzff8Nf6ORsolib9KHtmeu3d4cCCAFd3Xgah3v78WfDYQB7WKq9iaIPXPwHBxw7mkBP9wYxDGMT9m1Rbw/132","comment_is_top":false,"comment_ctime":1574080978,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574080978","product_id":100039001,"comment_content":"1 编程规范，设计原则，设计模式<br>2 设计模式个人感觉是对面对对象更进一步的抽象","like_count":0},{"had_liked":false,"id":152099,"user_name":"李杰","can_delete":false,"product_type":"c1","uid":1743953,"ip_address":"","ucode":"E177762621E11E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9c/51/76fcc9cd.jpg","comment_is_top":false,"comment_ctime":1573876681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573876681","product_id":100039001,"comment_content":"答案一：工匠之心","like_count":0,"discussions":[{"author":{"id":2071327,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/9b/1f/9f3379d3.jpg","nickname":"Geek_7f21d2","note":"","ucode":"12204FDAD951BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318313,"discussion_content":"你领导活明白了","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1603703212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350858,"discussion_content":"测试应该覆盖 否则我也不敢动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614052756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345059,"discussion_content":"一样的，我前段时间重构了部分代码都被说为什么要去修改稳定的代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611650910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","nickname":"Sid","note":"","ucode":"0461B574B2736B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318484,"discussion_content":"我理解可以等到修改这块逻辑的时候重构掉，因为测试的时候可以覆盖到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603763876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151928,"user_name":"东流","can_delete":false,"product_type":"c1","uid":1738147,"ip_address":"","ucode":"2715BC6E87BD83","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","comment_is_top":false,"comment_ctime":1573815942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573815942","product_id":100039001,"comment_content":"编程规范吧，这个最容易做到<br>代码审查也可以提高代码质量<br>面向对象的代码更具复用性吧，跟设计模式的扩展性不谋而合","like_count":0},{"had_liked":false,"id":151816,"user_name":"乐观的鹏程","can_delete":false,"product_type":"c1","uid":1746026,"ip_address":"","ucode":"FA527FA2C4204B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJgXIicettSIeIDpL2zt39Zb0fdBwOlibdia5AjWITYQZCWPGDPdFKKe9UiahgROkAyoES7niaobZatvQA/132","comment_is_top":false,"comment_ctime":1573796180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573796180","product_id":100039001,"comment_content":"面向对象就像这个世界一样，跟现实世界很多地方相似，写代码的时候，可以多参考这个世界上很多灵活的东西去运用到代码里","like_count":0},{"had_liked":false,"id":151653,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1025030,"ip_address":"","ucode":"62A89FD460827A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/06/cf6b6d0f.jpg","comment_is_top":false,"comment_ctime":1573776490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573776490","product_id":100039001,"comment_content":"两眼抹黑，看着都见过，写代码的时候不知道该怎么用。。","like_count":0},{"had_liked":false,"id":151567,"user_name":"酷飞不会飞","can_delete":false,"product_type":"c1","uid":1004609,"ip_address":"","ucode":"ECFD5111260A7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/41/3d352f74.jpg","comment_is_top":false,"comment_ctime":1573741192,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573741192","product_id":100039001,"comment_content":"这才发现，写了这么多年的代码，白写了，设计模式不少用，却不明白真正的意义；设计原则也不少见，就是不知如何应用","like_count":0},{"had_liked":false,"id":151265,"user_name":"斜杠ing...","can_delete":false,"product_type":"c1","uid":1676247,"ip_address":"","ucode":"C4AE866AC8B9AE","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/d7/93c8f92a.jpg","comment_is_top":false,"comment_ctime":1573692793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573692793","product_id":100039001,"comment_content":"最近安排我对系统一个功能重构，改的很痛苦我，因为我觉得根本没法重构，大量的无用注视，魔鬼数字，奇怪的业务逻辑.....烂透的代码根本不值得重构","like_count":0},{"had_liked":false,"id":151122,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1573655456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573655456","product_id":100039001,"comment_content":"1.如果从最开始而言，提高编程的规范，是比较简单有效的<br>2.面向对象在java中的确是十分重要的基础性知识点，包含了封装，继承，多态。如果能够以此为基础，然后稳步向前，是最好不过的了。","like_count":0},{"had_liked":false,"id":151088,"user_name":"瓜瓜","can_delete":false,"product_type":"c1","uid":1053853,"ip_address":"","ucode":"2E98377E48399E","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/9d/19dcdd42.jpg","comment_is_top":false,"comment_ctime":1573652304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573652304","product_id":100039001,"comment_content":"明确代码的职责，每个方法的边界，每个模块的边界，每个系统的边界。","like_count":0},{"had_liked":false,"id":151062,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1241567,"ip_address":"","ucode":"C42E11098E1B38","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","comment_is_top":false,"comment_ctime":1573649778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573649778","product_id":100039001,"comment_content":"编程规范是保证易读的前提，面向对象是设计模式和设计原则的基础，设计模式是设计原则的具体实现，重构是重复使用面向对象，设计原则和设计模式来保证项目的持续可度性，可维护性，可扩展性","like_count":0},{"had_liked":false,"id":150763,"user_name":"成楠Peter","can_delete":false,"product_type":"c1","uid":1252977,"ip_address":"","ucode":"4D13E7368D8CF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","comment_is_top":false,"comment_ctime":1573608190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573608190","product_id":100039001,"comment_content":"提高代码质量的方法，代码检查工具和Code Review。","like_count":0},{"had_liked":false,"id":150732,"user_name":"alls well","can_delete":false,"product_type":"c1","uid":1072439,"ip_address":"","ucode":"8E3EB5A3DF6E0D","user_header":"https://static001.geekbang.org/account/avatar/00/10/5d/37/8261fc68.jpg","comment_is_top":false,"comment_ctime":1573605647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573605647","product_id":100039001,"comment_content":"1.当系统较为简单，可读性就是提高质量的最有效的方法，而当系统越发复杂，就有必要引入统一框架设计模式来指导简化模型，来提高质量。我想知道模块化是属于哪个范畴？<br>2.复杂的特征才能最好支撑复杂模式，面向过程就比较难玩起花样","like_count":0},{"had_liked":false,"id":150485,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1573544201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573544201","product_id":100039001,"comment_content":"1、设计原则吧，因为面向对象起到了对设计原则的更好地支持，设计原则又可以指导设计模式，对于重构时有提供了基础。 其它提高代码质量的方法是学习 数据结构与算法之美，写出高效的代码，高效也代表高质量吧？<br>2、因为设计模式表现为对 对象的组织，对象直接关系的管理？","like_count":0},{"had_liked":false,"id":150401,"user_name":"shniu","can_delete":false,"product_type":"c1","uid":1019555,"ip_address":"","ucode":"E64CD8BED96D8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/a3/d7e5fe8a.jpg","comment_is_top":false,"comment_ctime":1573527820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573527820","product_id":100039001,"comment_content":"1. 首先最简单直接的是编程规范，这个考察的更多是习惯和意识，也是团队的结晶，这是第一要做到的；其次是重构的思想，使用小步迭代，单测，改进的思想去做事情，一步步优化出优质的代码，这个是编程基本功；最后是设计原则和设计模式，这个是高阶技能，需要多思考，多沉淀，真正掌握需要时间，需要一点点尝试用到自己项目中，不可强求；我认为有这样的递进程度，不同水平的人在不同阶段，要向下一阶段进阶。除此之外，还有code review，tdd，结对编程等，都可以提高代码质量<br><br>2. 我理解讲设计模式，需要依赖一种编程范式，老师也讲了主流的有面向过程，面向对象，函数式编程，而面向对象的抽象层次更贴近真实世界，是对行为、状态和个体通信等的高度抽象，函数式编程更偏向处理无状态，面向对象有更好的设计空间和模式沉淀","like_count":0},{"had_liked":false,"id":150369,"user_name":"Young！","can_delete":false,"product_type":"c1","uid":1025221,"ip_address":"","ucode":"2A658CEFD26011","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c5/a53f8bbc.jpg","comment_is_top":false,"comment_ctime":1573523365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573523365","product_id":100039001,"comment_content":"1. 现阶段来看，对于我或者公司来说，编码规范应该是首当其冲解决的问题，首先得让同时看懂代码，当前的情况是，注释没有注释，变量名模糊缩写，可读性特别差，影响时间和效率。在之后随着正确可读的代码规范普及之后，提升设计模式基础知识，尽力使公司的项目代码变得优雅。<br><br>2. 因为还未读过此书，不懂作者的意思，以我现有的知识来看，应该是市面上大多数编程语言都是面向对象的，基于面向对象的设计模式应该是绝大多数，也是最重要的。","like_count":0},{"had_liked":false,"id":150303,"user_name":"黄剑","can_delete":false,"product_type":"c1","uid":1204424,"ip_address":"","ucode":"D7F68DE19F41CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/c8/044dd4a2.jpg","comment_is_top":false,"comment_ctime":1573516661,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1573516661","product_id":100039001,"comment_content":"面向对象，设计原则，设计模式，编程规范，代码重构。","like_count":0},{"had_liked":false,"id":150269,"user_name":"努力努力再努力m","can_delete":false,"product_type":"c1","uid":1644369,"ip_address":"","ucode":"9DD9E9C2988FFC","user_header":"https://static001.geekbang.org/account/avatar/00/19/17/51/3e13dc0c.jpg","comment_is_top":false,"comment_ctime":1573487642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573487642","product_id":100039001,"comment_content":"1.设计原则对提高代码质量最有效吧，因为设计原则是指导我们做代码设计的。<br>2.因为面向对象是编码实现的基础。","like_count":0},{"had_liked":false,"id":150138,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1573467521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573467521","product_id":100039001,"comment_content":"在耗子叔的推荐下买了一本厚厚的《代码大全》，看了其中几章，然后就没有然后了。。。","like_count":0},{"had_liked":false,"id":149962,"user_name":"HF","can_delete":false,"product_type":"c1","uid":1112811,"ip_address":"","ucode":"0839195346C3CC","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/eb/84d4de33.jpg","comment_is_top":false,"comment_ctime":1573436827,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573436827","product_id":100039001,"comment_content":"如何建立一套代码走查机制，来约束别人的代码。这一套人为因素外的框架的东西也需要讲一下。","like_count":0},{"had_liked":false,"id":149939,"user_name":"小畅","can_delete":false,"product_type":"c1","uid":1322880,"ip_address":"","ucode":"D031CC07CD564E","user_header":"","comment_is_top":false,"comment_ctime":1573434612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573434612","product_id":100039001,"comment_content":"养成一个重构的习惯，《重构》这本书也是这样说的","like_count":0},{"had_liked":false,"id":149845,"user_name":"join","can_delete":false,"product_type":"c1","uid":1130132,"ip_address":"","ucode":"C097D89F7BA3EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/94/c6460883.jpg","comment_is_top":false,"comment_ctime":1573401625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573401625","product_id":100039001,"comment_content":"总结：<br>1. 三种主流的编程风格：面向对象（主流）、面向过程、函数式编程。  <br>面向对象四大特征： 封装、抽象、继承、多态。<br><br>2.设计原则：<br>（1）SOLID原则：SRP单一职责原则、OCP开闭原则、LSP里式替换原则、ISP接口隔离原则、DIP依赖倒置原则；  <br>（2）DRY原则：KISS原则、YAGNI原则、LOD原则。 <br><br>3. 设计模式<br>设计原则是更上层的抽象，而是设计模式是设计原则的具体化，是编码经验设计思路的总结，是一种方法论。  <br>设计模式的三种类型：创建型、结构型、行为型。<br><br>4. 编程规范  <br>使代码有更好的可读性，参考书籍《代码整洁之道》。   <br><br>5. 重构  <br>持续重构是保持代码质量不下降的有效手段。重构的工具就是面向对象思想、设计原则、设计模式、编码规范。  <br>开发前期业务相对简单，不一定要使用设计模式，不要过度设计，设计模式的使用应该是在持续重构中使用，没必要在开始就为了使用设计模式而生搬硬套，项目初期业务可能还没有成型也就没法断定使用哪种模式更合适。  ","like_count":0},{"had_liked":false,"id":149844,"user_name":"米 虫","can_delete":false,"product_type":"c1","uid":1073087,"ip_address":"","ucode":"6F35AA8BB8195B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/bf/4bd3eb4b.jpg","comment_is_top":false,"comment_ctime":1573401602,"is_pvip":false,"replies":[{"id":"57682","content":"长短不重要 关键是能否让人一眼就看出命名的含义","user_name":"作者回复","comment_id":149844,"uid":"1190123","ip_address":"","utype":1,"ctime":1573436337,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1573401602","product_id":100039001,"comment_content":"我可能有病，每次命名的时候，三个单词我就觉得很长。但看一些开源的代码，他们都五六个单词长度。。这些归纳和思考出来的设计模式大多都依赖于面向对象的那几条基本特征。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482277,"discussion_content":"新年快乐~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580106729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149834,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1573397877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573397877","product_id":100039001,"comment_content":"现在大部分书籍介绍面向对象的四个基石的顺序为：抽象，封装，继承，多态。","like_count":0},{"had_liked":false,"id":149776,"user_name":"初心","can_delete":false,"product_type":"c1","uid":1104576,"ip_address":"","ucode":"C090A1723E3474","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/c0/9fc31f2d.jpg","comment_is_top":false,"comment_ctime":1573374437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573374437","product_id":100039001,"comment_content":"设计原则指导设计模式，如何运用面向对象，使用简单办法解决复杂问题","like_count":0},{"had_liked":false,"id":149697,"user_name":"Uncle.席","can_delete":false,"product_type":"c1","uid":1635218,"ip_address":"","ucode":"2A23428FBBAFF0","user_header":"https://static001.geekbang.org/account/avatar/00/18/f3/92/96fe653f.jpg","comment_is_top":false,"comment_ctime":1573347665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573347665","product_id":100039001,"comment_content":"面向对象是设计模式的基础，就像数据结构是算法的基础一个概念","like_count":0},{"had_liked":false,"id":149643,"user_name":"坐看云起","can_delete":false,"product_type":"c1","uid":1199474,"ip_address":"","ucode":"D829864AA23482","user_header":"https://static001.geekbang.org/account/avatar/00/12/4d/72/9915ebb4.jpg","comment_is_top":false,"comment_ctime":1573302500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573302500","product_id":100039001,"comment_content":"要写出好代码，还要对具体语言提供的各种抽象元素合理的使用才行","like_count":0},{"had_liked":false,"id":149561,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1573273570,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1573273570","product_id":100039001,"comment_content":"在大部分的日常开发工作中，因为其实都是专注于业务开发，所以强调代码规范，重构和单元测试是一个非常好的保障代码质量的实践。","like_count":0},{"had_liked":false,"id":149515,"user_name":"quietwater","can_delete":false,"product_type":"c1","uid":1055029,"ip_address":"","ucode":"C25E2CD356D3F9","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/35/be8372be.jpg","comment_is_top":false,"comment_ctime":1573262910,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573262910","product_id":100039001,"comment_content":"单一职责是最重要的。<br>DRY是最基础的。<br>依赖倒置是最难掌握的，很多人以为理解了，但实际上根本没理解。<br>因为这些设计模式都用到了面向对象的特性。","like_count":0},{"had_liked":false,"id":149507,"user_name":"Andy Jiang","can_delete":false,"product_type":"c1","uid":1227279,"ip_address":"","ucode":"436609A0A445CF","user_header":"https://static001.geekbang.org/account/avatar/00/12/ba/0f/9789c2cc.jpg","comment_is_top":false,"comment_ctime":1573260924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573260924","product_id":100039001,"comment_content":"面向对象(封装&#47;抽象、继承、多态)是基础；设计原则和设计模式在设计阶段提高可扩展性；编程规范在具体实现阶段保证代码的可读性；重构涵盖设计和实现，提高可维护性。<br>平时工作中代码的质量保证是通过编程规范和单元测试覆盖率(sonar代码扫描进行衡量)。是否使用设计模式还是得看业务场景，具体问题具体分析。","like_count":0},{"had_liked":false,"id":149493,"user_name":"村长","can_delete":false,"product_type":"c1","uid":1218960,"ip_address":"","ucode":"AB8B2B79387D11","user_header":"https://static001.geekbang.org/account/avatar/00/12/99/90/ca2a8632.jpg","comment_is_top":false,"comment_ctime":1573255233,"is_pvip":false,"replies":[{"id":"57458","content":"具体发出来讲讲 不常用的你们都常用在哪里 ","user_name":"作者回复","comment_id":149493,"uid":"1190123","ip_address":"","utype":1,"ctime":1573257138,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"1573255233","product_id":100039001,"comment_content":"嗯 组里常用的模式全是“不常用”的模式","like_count":0},{"had_liked":false,"id":149472,"user_name":"Warn","can_delete":false,"product_type":"c1","uid":1465310,"ip_address":"","ucode":"F2F7FCDB0940D0","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/de/152f1c2c.jpg","comment_is_top":false,"comment_ctime":1573227513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573227513","product_id":100039001,"comment_content":"设计原则和代码规范是比较直观的提高代码质量的吧","like_count":0},{"had_liked":false,"id":149444,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1573220734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573220734","product_id":100039001,"comment_content":"1.个人认为设计原则对提高代码质量最有效。<br>设计原则定义了interface，设计模式是设计原则的implementation。<br>我们未必精通每一个设计模式，但深刻理解设计原则是非常重要的。<br><br>2.设计模式一定程度上补充了面向对象编程范式的缺陷。","like_count":0},{"had_liked":false,"id":149399,"user_name":"桃翁","can_delete":false,"product_type":"c1","uid":1044036,"ip_address":"","ucode":"CB438AF450DC00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/44/26ac883e.jpg","comment_is_top":false,"comment_ctime":1573211479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573211479","product_id":100039001,"comment_content":"说下第二个思考题，强调面向对象的原因我觉得是因为这里面大多数设计模式都不适合函数式编程和面相过程的，在设计模式里大量的继承，接口，抽象等都是面相对象的，其他范式没有，对于其他范式有其他的设计模式","like_count":0},{"had_liked":false,"id":149347,"user_name":"William","can_delete":false,"product_type":"c1","uid":1241365,"ip_address":"","ucode":"4499F99B180102","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/15/8fcf8038.jpg","comment_is_top":false,"comment_ctime":1573199160,"is_pvip":true,"replies":[{"id":"57456","content":"抱歉 这个模式在后端开发中确实不常用 我主要是做后端开发 js的东西不怎么了解 ","user_name":"作者回复","comment_id":149347,"uid":"1190123","ip_address":"","utype":1,"ctime":1573253968,"user_name_real":"王争"}],"discussion_count":1,"race_medal":2,"score":"1573199160","product_id":100039001,"comment_content":"我是前端工程师，希望争哥也能结合JavaScript聊聊设计模式在前端的应用场景。原型模式在前端应用广泛哦，老师却归为不常用的设计模式？","like_count":0,"discussions":[{"author":{"id":1608383,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8a/bf/3f7c45c9.jpg","nickname":"X_L～","note":"","ucode":"6BD8C24750F86B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382966,"discussion_content":"其实都一样 整体看过去就是 现代编程语言 异常处理的一条发展历程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625812312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149285,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1573183167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573183167","product_id":100039001,"comment_content":"设计原则是价值观，面向对象是工具，设计模式是套路。<br>以价值观为根本，在套路中合理利用工具，方能达到目标。<br>","like_count":0},{"had_liked":false,"id":149259,"user_name":"tao1024","can_delete":false,"product_type":"c1","uid":1274660,"ip_address":"","ucode":"5FCFDB7D8B570D","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/24/199023bb.jpg","comment_is_top":false,"comment_ctime":1573180268,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573180268","product_id":100039001,"comment_content":"老师能不能及早放出一篇干货，先讲第一个设计模式，让读者可以尽快了解讲课的思路和方式。前四篇文章有点浅，不足以体现课程的特点。","like_count":0},{"had_liked":false,"id":149157,"user_name":"Chen","can_delete":false,"product_type":"c1","uid":1503113,"ip_address":"","ucode":"C1128558AB5BC4","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/89/8c73a24d.jpg","comment_is_top":false,"comment_ctime":1573171433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573171433","product_id":100039001,"comment_content":"持续不断的对代码进行重构？老代码根本不敢动😂","like_count":0},{"had_liked":false,"id":149140,"user_name":"旭东(Frank)","can_delete":false,"product_type":"c1","uid":1024486,"ip_address":"","ucode":"176FA629800062","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","comment_is_top":false,"comment_ctime":1573168750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573168750","product_id":100039001,"comment_content":"代码质量检查插件，代码质量扫描有助于初中级开发工程师的代码质量","like_count":0},{"had_liked":false,"id":149139,"user_name":"旭东(Frank)","can_delete":false,"product_type":"c1","uid":1024486,"ip_address":"","ucode":"176FA629800062","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","comment_is_top":false,"comment_ctime":1573168547,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573168547","product_id":100039001,"comment_content":"1.25倍速听的舒服😊","like_count":0,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219035,"discussion_content":"我给您优化下你的代码吧：抛出异常。O(∩_∩)O哈哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585726199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149135,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1573164492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573164492","product_id":100039001,"comment_content":"面向对象四大特性：<br>封装---对代码划定边界。<br>抽象---接口和实现分离。<br>继承---对象之间的依赖和不对等替换关系。<br>多态---接口可以对应多种实现。<br>","like_count":0},{"had_liked":false,"id":149126,"user_name":"Fun","can_delete":false,"product_type":"c1","uid":1145502,"ip_address":"","ucode":"5D89BA4C678785","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJdUGdEj3R25CrYqibPibYibibRicqUfyL4aTTPbMagyywjKMhXGZE37RTe7lEdvC4DibvtYpzg8zXvt9HQ/132","comment_is_top":false,"comment_ctime":1573150480,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573150480","product_id":100039001,"comment_content":"# day4.<br>中心思想：提纲契领，总体描述面相对象，设计原则，设计模式，代码规范，重构技巧五个部分的学习要点及相互关系。<br>以我个人理解来说，除了编码规范，其他都是务虚的东西。<br>面相对象，是我们认识这个世界的一种方式…它的四大特性（封装，抽象，继承，多态）如雷贯耳，应该没有程序员没听过…贫血、充血模型表示好奇，多用组合少用继承的设计思想愿闻其详~<br>设计原则，多多少少听过，但从没有认真揣摩过。凡事嵌入式程序员都懂…关注的焦点永远都是单板、芯片驱动或功能应用调通…<br>设计模式，23种经典模式，通俗化解释就是编码套路。难能可贵的是知道在什么场景下需要使用什么套路。<br>编码规范，一本《代码整洁之道》足矣。<br>重构技巧，设计思想，原则，模式，规范都是重构的理论基础。<br>五部分串联起来就是，形成一种面相对象的思想，按照前人抽象出的编码原则，使用前人总结过的编码模式，规定团队内部共识的编码规范，开展即将<br>新需求的编码及老代码的重构。<br>最后，今天没有金句，又是一天。","like_count":0},{"had_liked":false,"id":149120,"user_name":"terminator","can_delete":false,"product_type":"c1","uid":1415409,"ip_address":"","ucode":"A8046D047A04AD","user_header":"https://static001.geekbang.org/account/avatar/00/15/98/f1/473f18b7.jpg","comment_is_top":false,"comment_ctime":1573144684,"is_pvip":false,"replies":[{"id":"57478","content":"有实战的 别急","user_name":"作者回复","comment_id":149120,"uid":"1190123","ip_address":"","utype":1,"ctime":1573281587,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1573144684","product_id":100039001,"comment_content":"个人以为我们在实际开发中进行面向对象开发的时候碰到的最大麻烦还是在于对象的选取定义上。通常书籍中都会以物理世界中的实物作为面向对象中的对象这一概念，而在实际编程中，很多对象的概念都是不具有实际物理世界中的对应实体的，归类哪些属性和方法成为一个合理的对象是一个很有技巧的问题，希望王老师能够在后续课程中加以实例指导","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473741,"discussion_content":"有实战的 别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573281587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149119,"user_name":"卫江","can_delete":false,"product_type":"c1","uid":1101226,"ip_address":"","ucode":"DE2F7A6916F1A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","comment_is_top":false,"comment_ctime":1573144400,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573144400","product_id":100039001,"comment_content":"第一题，感觉设计原则是最核心的，不论是设计模式还是重构基本都是遵循设计原则的指导来实践的。<br>第二题，设计模式和重构核心就是解决扩展性的问题，而扩展性就是面向对象思想出现的原因，具体而言就是使用多态来提高扩展性，既对应了核心编程原则：针对于接口编程。","like_count":0},{"had_liked":false,"id":149100,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1573141059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573141059","product_id":100039001,"comment_content":"书写代码遵循标准的规范可以提高团队效率，让写代码从人治变成“法治&quot;；设计原则、设计模式可以让我们以更加简单方便地复用成功的设计和体系结构。<br><br>书名《Design Patterns: Elements of Reusable Object-Oriented Software》中带有“面向对象”是因为书中总结记录的 模式都可以使用标准的面向对象语言来实现。","like_count":0},{"had_liked":false,"id":149095,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1573140392,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1573140392","product_id":100039001,"comment_content":"上面说到的设计原则，设计模式都可以用来提高代码质量，但是只有对业务流程的熟悉，做好抽象，将不变和变化的部分区分好，才能写出更好的代码。另外常用的23种设计模式应该主要是针对面向对象编程。","like_count":0},{"had_liked":false,"id":149091,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1573139810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573139810","product_id":100039001,"comment_content":"第一个问题 我觉得是不断反复看自己写过的代码 基本过一段时间就会回头看一下 虽然那一片代码没怎么用到设计模式（没法用到）但是也在不断思考怎么写会更优雅 然后不断的改进<br><br>第二问题 其实我就看过head first系列的设计模式 也就略懂略懂","like_count":0},{"had_liked":false,"id":149082,"user_name":"星空123","can_delete":false,"product_type":"c1","uid":1596920,"ip_address":"","ucode":"E998A7C585671B","user_header":"https://static001.geekbang.org/account/avatar/00/18/5d/f8/7de2c1cc.jpg","comment_is_top":false,"comment_ctime":1573138122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573138122","product_id":100039001,"comment_content":"老师的课 有必买的冲动","like_count":0},{"had_liked":false,"id":149077,"user_name":"4thirteen2one","can_delete":false,"product_type":"c1","uid":1403309,"ip_address":"","ucode":"085D582DD552DD","user_header":"https://static001.geekbang.org/account/avatar/00/15/69/ad/608188c2.jpg","comment_is_top":false,"comment_ctime":1573137197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573137197","product_id":100039001,"comment_content":"编码规范是基本行为准则，设计模式是在场景下的处事方案，设计原则当然就是人生观价值观世界观了，面向对象则是编程向客观世界的模拟，而重构可以称得上对（小范围）世界秩序的重建。","like_count":0},{"had_liked":false,"id":149043,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1573130525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573130525","product_id":100039001,"comment_content":"至今能看懂的设计模式不超过五种   期待老师的课程！！！！","like_count":0},{"had_liked":false,"id":149042,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1573130488,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1573130488","product_id":100039001,"comment_content":"我认为编码规范对提升代码质量的速度是最快的，首先规范大家的习惯，让代码的可读性提升，前后就是面向对象设计模式了","like_count":0},{"had_liked":false,"id":149027,"user_name":"迈向架构师","can_delete":false,"product_type":"c1","uid":1637228,"ip_address":"","ucode":"2476594CF76001","user_header":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","comment_is_top":false,"comment_ctime":1573128772,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573128772","product_id":100039001,"comment_content":"还可以通过tdd来提高代码质量😄","like_count":0},{"had_liked":false,"id":149019,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1573128107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573128107","product_id":100039001,"comment_content":"抽象业务核心流程，提供核心可扩展的功能，让写业务不再困难。小菜鸡，报到打卡时间。","like_count":0},{"had_liked":false,"id":148953,"user_name":"davidzhou","can_delete":false,"product_type":"c1","uid":1018904,"ip_address":"","ucode":"F4B2929F4111DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/18/7cbc34eb.jpg","comment_is_top":false,"comment_ctime":1573117097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573117097","product_id":100039001,"comment_content":"有效提高代码质量我认为是设计原则和代码重构，设计原则的前3条会在我们创建一个类和实现接口的时候要反复涉及到的，里氏替换原则让我们思考到底是怎么样才需要使用继承，重构应该发生在我们编写代码时候，而不是积累到某一定的技术债务，才来一个版本重构，在不断的开发过程中，我们对需求不断理解渗透，代码也会越来越优化","like_count":0},{"had_liked":false,"id":148834,"user_name":"雷霹雳的爸爸","can_delete":false,"product_type":"c1","uid":1119490,"ip_address":"","ucode":"99BBA6D83DD11F","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/02/66f65388.jpg","comment_is_top":false,"comment_ctime":1573093260,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573093260","product_id":100039001,"comment_content":"课堂讨论举手发言：<br><br>1. 我觉得第一个问题主要在于怎么来看待效率这个问题，设计原则短期内未必能直接派上用场，是具体编程范式如面向对象构造其语言要素得动机，是编码规范制定得指引，是衡量代码重构一些看似矛盾方法如何采用的最根本的判断依据，它本身也是设计模式应对特定场景时所要解决的非功能性需求问题——可扩展性衡量的基础，看老师的图它也是处在一个众星捧月的C位上；要说起来觉得还有什么可以提高代码质量的方法，那，也就是多听多看多学多参考多练习了，除去方法，倒是还应该利用一些手段，可能还需要一些静态检查工具的辅助吧，帮助我们在学习应用这些原则、模式、规范、技巧时，识别具体产出的代码的问题，另外，比如阅读PMD得各条规则，其实也就是学习一些实用得编码规范的过程吧<br><br>2. 这个问题我觉得书名本身其实也讲的很明白，它并非罗列OO的概念，或它是什么，而是怎样来构建可复用的OO的软件的讲解，不这么来应用OO其实就有可能走偏了，那本书开头非章节结构提到的那两个原则反倒为很多人觉得是比具体每个模式阐述有着更深远的意义：基于接口而不是基于类来编程，优先使用组合而不是继承...<br>","like_count":0},{"had_liked":false,"id":148830,"user_name":"weineel","can_delete":false,"product_type":"c1","uid":1049741,"ip_address":"","ucode":"6DC6EF4F256A53","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","comment_is_top":false,"comment_ctime":1573092655,"is_pvip":true,"replies":[{"id":"57461","content":"后面有讲到的 别急","user_name":"作者回复","comment_id":148830,"uid":"1190123","ip_address":"","utype":1,"ctime":1573257635,"user_name_real":"王争"}],"discussion_count":1,"race_medal":2,"score":"1573092655","product_id":100039001,"comment_content":"老师您好，为什么说 单例模式 现在是反模式呢？","like_count":0,"discussions":[{"author":{"id":1058278,"avatar":"https://static001.geekbang.org/account/avatar/00/10/25/e6/a69cff76.jpg","nickname":"lyshrine","note":"","ucode":"497551F047A5C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":153951,"discussion_content":"SZ. MS是啥意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580096492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1058278,"avatar":"https://static001.geekbang.org/account/avatar/00/10/25/e6/a69cff76.jpg","nickname":"lyshrine","note":"","ucode":"497551F047A5C6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":154037,"discussion_content":"实战vs面试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580107245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":153951,"ip_address":""},"score":154037,"extra":""}]}]},{"had_liked":false,"id":148809,"user_name":"仲夏","can_delete":false,"product_type":"c1","uid":1690965,"ip_address":"","ucode":"2849869C765CDE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cd/55/8c1243dc.jpg","comment_is_top":false,"comment_ctime":1573089407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573089407","product_id":100039001,"comment_content":"老师你好，计算机四门专业课加你出的设计模式是决定一个程序员走的高度是吧，你在介绍里面说这门课已经教透了设计模式和写出高质量代码的全部要点是吧","like_count":0},{"had_liked":false,"id":148802,"user_name":"旭","can_delete":false,"product_type":"c1","uid":1002420,"ip_address":"","ucode":"6AF6518D4F7D0A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/b4/4768f34b.jpg","comment_is_top":false,"comment_ctime":1573088861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573088861","product_id":100039001,"comment_content":"结对编程和代码评审也可提高代码质量","like_count":0},{"had_liked":false,"id":148762,"user_name":"蔡振东","can_delete":false,"product_type":"c1","uid":1040066,"ip_address":"","ucode":"063D9A36EF72FC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/de/c2/037264da.jpg","comment_is_top":false,"comment_ctime":1573083314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573083314","product_id":100039001,"comment_content":" 1、我觉得编码规范和重构对提高代码最有效，刚开始可能不会过度设计，重构时再加；<br>2、因为设计模式建立在面向对象基础上","like_count":0},{"had_liked":false,"id":148737,"user_name":"路伴友行","can_delete":false,"product_type":"c1","uid":1506974,"ip_address":"","ucode":"96B54B7EEAEDAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","comment_is_top":false,"comment_ctime":1573058526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573058526","product_id":100039001,"comment_content":"面相对象，本质是对象间交互。<br>设计模式总结了一套方法，是关于程序运行时 各个实例对象间如何高效交流的方法，所以是面相对象，而不是类。而类只是一组对象的抽象描述。这是我的理解，望大佬们指点 谢谢","like_count":0},{"had_liked":false,"id":148735,"user_name":"小毅","can_delete":false,"product_type":"c1","uid":1016799,"ip_address":"","ucode":"5651C740D68038","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/hg9Tsg2iaBeG6Q5mxiczjw1ph0OvhKziblEIiaOxg4gwQ0Dgia7Fw7pDQ0mM8AL5SJAm2Yavk1RmBJrFd9jKPBQRkOw/132","comment_is_top":false,"comment_ctime":1573057540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573057540","product_id":100039001,"comment_content":"第一题：短期来说肯定是编程规范和设计模式，尤其是编程规范可以立刻提升代码的质量；但中长期来说，一定是设计思想和原则，没有自己的思想和原则的理解，单纯的“严格”执行规范和模式，就很容易教条，不变通了<br>第二题：我认为是因为GoF的23种设计模式是基于OOP总结出来的套路，按照这个套路，即使对OOP的精髓没有理解到位，也能做出高质量的OOP设计","like_count":0},{"had_liked":false,"id":148734,"user_name":"Running","can_delete":false,"product_type":"c1","uid":1006392,"ip_address":"","ucode":"6377B6BD1F01FF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5b/38/42ff18f1.jpg","comment_is_top":false,"comment_ctime":1573057246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573057246","product_id":100039001,"comment_content":"寻找解决问题最简单容易理解的方案，方案简单一般会代码理解起来容易，可维护性好，出问题的概率自然会降低","like_count":0},{"had_liked":false,"id":148728,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1573056082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573056082","product_id":100039001,"comment_content":"1.编码规范最重要。没有统一、良好的编码规范，写各自风格的代码，团队无法协作。其他提高代码质量的方法：TDD（测试驱动开发），结对编程，CodeReview。<br>2.设计模式以面向对象为基础，总结出面向对象编码的一些套路，没有面向对象谈何设计模式。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482267,"discussion_content":"嗯嗯 收到 我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580112217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148712,"user_name":"Juntíng","can_delete":false,"product_type":"c1","uid":1039290,"ip_address":"","ucode":"F6A3B528D6F3FD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/ba/304a9a4a.jpg","comment_is_top":false,"comment_ctime":1573052795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573052795","product_id":100039001,"comment_content":"搭建设计模式学习框架模型，后续持续从模型扩展，落实到细节，待 8个月后的羽翼丰满。","like_count":0},{"had_liked":false,"id":148691,"user_name":"秋惊蛰","can_delete":false,"product_type":"c1","uid":1620344,"ip_address":"","ucode":"3D9A6D5CA9C79F","user_header":"https://static001.geekbang.org/account/avatar/00/18/b9/78/a5804dae.jpg","comment_is_top":false,"comment_ctime":1573049813,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573049813","product_id":100039001,"comment_content":"思考题:<br>1. 掌握设计原则是很有必要的, 原则无关语言, 无关业务, 是基础的东西, 设计模式只是设计原则的具体应用, 很多时候遵循简单的设计原则就可以让代码保持clean, 而且这些原则不光是编码的时候用有, 架构设计也可以参考, 换一种范式的语言也没关系.<br>2. 之所以强调面向对象, 是因为这些模式对其他编程范式不一定适用, 说白了设计模式就是OO的常用套路.","like_count":0},{"had_liked":false,"id":148683,"user_name":"Flash","can_delete":false,"product_type":"c1","uid":1236163,"ip_address":"","ucode":"E285075C9E0B02","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/c3/e4ba51d5.jpg","comment_is_top":false,"comment_ctime":1573048848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573048848","product_id":100039001,"comment_content":"1.我觉得编码规范对提高代码质量最有效，<br>1.1 因为设计原则和设计模式都比较抽象，需要很多经验才能熟练应用，在项目中的程序员都能遵循编码规范的话，编码规范起码能保证代码的可读性，方便持续重构。<br>1.2 前面也说了，代码的阅读次数通常会大于编写和修改次数的，所以遵循编码规范保证代码可读性是很重要的，对提高代码质量也是最重要的。<br>1.3 就像“约定优于配置”，编码规范也优于设计。<br>其他的提高代码质量的方法，CodeReview吧，大家一起看看代码有什么地方让人觉得有坏味道吧<br>","like_count":0},{"had_liked":false,"id":148664,"user_name":"小可爱(๑• . •๑)","can_delete":false,"product_type":"c1","uid":1106190,"ip_address":"","ucode":"1E97973449DBDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/0e/2912db26.jpg","comment_is_top":false,"comment_ctime":1573046421,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573046421","product_id":100039001,"comment_content":"设计模式是需要面向对象语言作为保证的","like_count":0,"discussions":[{"author":{"id":1242483,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/73/f7d3a996.jpg","nickname":"！null","note":"","ucode":"4E5B7922980397","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46052,"discussion_content":"也不是，C语言也可以做到。关键是面向对象的设计思想。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573114716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148661,"user_name":"小可爱(๑• . •๑)","can_delete":false,"product_type":"c1","uid":1106190,"ip_address":"","ucode":"1E97973449DBDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/0e/2912db26.jpg","comment_is_top":false,"comment_ctime":1573046342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573046342","product_id":100039001,"comment_content":"今天学习了怎么从面向对象、设计原则、设计模式、编码规范、重构这几个方面，提高代码的可维护性、可读性、可扩展性，加油。","like_count":0},{"had_liked":false,"id":148646,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1573044319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573044319","product_id":100039001,"comment_content":"不够看不够看","like_count":0},{"had_liked":false,"id":148635,"user_name":"安静的下雪天","can_delete":false,"product_type":"c1","uid":1574961,"ip_address":"","ucode":"3D7DB58BDEED40","user_header":"https://static001.geekbang.org/account/avatar/00/18/08/31/6ebb96dd.jpg","comment_is_top":false,"comment_ctime":1573041786,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573041786","product_id":100039001,"comment_content":"1 我觉得，高手review自己的代码是最高效、最印象深刻的。因为自己刚上班的时候，有位老员工给自己改了一遍代码，告诉我为什么这样改。之后自己再写的时候就会注意到之前指正过的问题，感觉功力突飞猛进😁<br>2 因为面向对象最流行，很多项目都是基于面向对象思想开发的，所以这方面的经验积累的越来越多，设计模式也在此基础上总结出来。","like_count":0,"discussions":[{"author":{"id":1574961,"avatar":"https://static001.geekbang.org/account/avatar/00/18/08/31/6ebb96dd.jpg","nickname":"安静的下雪天","note":"","ucode":"3D7DB58BDEED40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45480,"discussion_content":"面向对象丰富的语言特性（多态、继承、封装）可以实现许多复杂的设计思路，是设计原则、设计模式编码实现的基础。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573042317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148632,"user_name":"夜空咏叹调","can_delete":false,"product_type":"c1","uid":1189074,"ip_address":"","ucode":"CC9350BCF218CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d2/a5e272ce.jpg","comment_is_top":false,"comment_ctime":1573041450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573041450","product_id":100039001,"comment_content":"我觉得重构是对提高代码质量最有效，因为重构其实是对你以前代码以前思路的一种清洗，一种反思，能有助于你提高对以后遇到相同问题的解决效率以及建立一个完整的体系。<br><br>重构真的是代码里很重要的一环。","like_count":0},{"had_liked":false,"id":148623,"user_name":"Eilie","can_delete":false,"product_type":"c1","uid":1245145,"ip_address":"","ucode":"6BAC7E694EDFA6","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/d9/bc7b114a.jpg","comment_is_top":false,"comment_ctime":1573039726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573039726","product_id":100039001,"comment_content":"不断的反省与思考，无限接近于完美。","like_count":0},{"had_liked":false,"id":148568,"user_name":"攀登者","can_delete":false,"product_type":"c1","uid":1074549,"ip_address":"","ucode":"FC26A8AC504C5E","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/75/9c0b9b5b.jpg","comment_is_top":false,"comment_ctime":1573031858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573031858","product_id":100039001,"comment_content":"20191106 彻底理解设计原则是写好的代码的前提","like_count":0},{"had_liked":false,"id":148553,"user_name":"wl","can_delete":false,"product_type":"c1","uid":1392730,"ip_address":"","ucode":"45062AA2460F1F","user_header":"https://static001.geekbang.org/account/avatar/00/15/40/5a/e65e8c40.jpg","comment_is_top":false,"comment_ctime":1573029778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573029778","product_id":100039001,"comment_content":"学习笔记：<br>1、面向对象是一种编程范式，是设计原则、设计模式的基础。<br>以前听过编程范式，一脸懵逼，现在终于知道面向对象、面向过程、函数式编程都是编程范式。<br>2、设计原则是用来指导代码设计的，有很多的设计原则，比如SOLID KISS，但是不要去背，而要去理解这些原则出现的原因，是为了解决什么问题而出现的。<br>3、设计模式，是软件开发中遇到的问题而出现的设计思路，大部分是为了解决扩展性问题。<br>4、编程规范是为了解决代码可读性问题。<br>5、重构，是一个持续的过程，分为小重构和大重构，会用到前面四种理论。<br><br>话题1: 个人觉得持续重构是提高代码质量最有效的方法，再好的代码，也经不住业务的迭代变更和技术的推陈出新，而且重构会用到前面四种理论，把理论应用于实践中，不断优化代码，才能保证代码的高质量性。<br><br>话题2: 这本书还没看过，但是从今天的学习来看的话，猜测是因为面向对象是设计原则和设计模式的基础，所以比较重要吧。<br><br>希望跟着老师学习，能慢慢提高自己的代码质量和编程能力～","like_count":0},{"had_liked":false,"id":148547,"user_name":"依旧木瓜","can_delete":false,"product_type":"c1","uid":1364763,"ip_address":"","ucode":"A77CD9CE9F67EB","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/1b/94a0637b.jpg","comment_is_top":false,"comment_ctime":1573029128,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573029128","product_id":100039001,"comment_content":"设计模式受语言范式影响很大，可能有的语言特性根本就不要设计模式。所以这些只是针对面向对象语言一些应用实践总结出来的可以服用的模式规则","like_count":0},{"had_liked":false,"id":148523,"user_name":"君不得闲","can_delete":false,"product_type":"c1","uid":1101581,"ip_address":"","ucode":"718AA2C9B410BB","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/0d/f4150547.jpg","comment_is_top":false,"comment_ctime":1573024471,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1573024471","product_id":100039001,"comment_content":"我觉得统一的代码规范和恰当的注释和及时更新的文档对于代码质量的提升和可读性的提高是必不可少的。其次是单元测试，可以在重构可以避免引入新的bug。","like_count":0},{"had_liked":false,"id":148498,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1573019921,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573019921","product_id":100039001,"comment_content":"（从可读性角度）提高代码质量最有效的内容，我觉得应该是编程规范。对于刚踏入软件工程师这个行当的新手，让他们在最开始掌握合适的编码规范，对以后的发展大有裨益。<br><br>但掌握面向对象编程的设计思想，也是很重要的。很多工程师编码的现实是：一直打着面向对象编程的旗号，做着过程式开发的基于对象的编程实践。关于程序的可维护、易复用、易扩展，则最需要面向对象的设计思想。<br><br>文中作者已经给出了结论：『面向对象编程具有丰富的特性（封装、抽象、继承、多态），可以实现很多复杂的设计思路，是很多设计原则、设计模式等编码实现的基础。』","like_count":0},{"had_liked":false,"id":148496,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1573019155,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573019155","product_id":100039001,"comment_content":"继续学习...","like_count":0},{"had_liked":false,"id":148424,"user_name":"Wiggins","can_delete":false,"product_type":"c1","uid":1078222,"ip_address":"","ucode":"021EE98CF0E4EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/73/ce/23bd3997.jpg","comment_is_top":false,"comment_ctime":1573005723,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1573005723","product_id":100039001,"comment_content":"单元测试是保证代码质量的一个比较好的手段，但是只是面向实现的，而灵活的使用设计模式，才能让代码保证一定的可维护性与可拓展性，延长软件的生命周期","like_count":0},{"had_liked":false,"id":148417,"user_name":"夜萤","can_delete":false,"product_type":"c1","uid":1241220,"ip_address":"","ucode":"533BEA458C02D3","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/84/ad931ccb.jpg","comment_is_top":false,"comment_ctime":1573005460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573005460","product_id":100039001,"comment_content":"我们现在都是贫血模型，不是充血模型","like_count":0},{"had_liked":false,"id":148403,"user_name":"Kumaron","can_delete":false,"product_type":"c1","uid":1383211,"ip_address":"","ucode":"EAF93BE46A8B91","user_header":"https://static001.geekbang.org/account/avatar/00/15/1b/2b/0294718e.jpg","comment_is_top":false,"comment_ctime":1573003373,"is_pvip":false,"replies":[{"id":"57142","content":"可以的","user_name":"作者回复","comment_id":148403,"uid":"1190123","ip_address":"","utype":1,"ctime":1573009837,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1573003373","product_id":100039001,"comment_content":"老师介意这周先将加餐的java知识点部分发布出来么，想先跟着熟悉一下java的知识点。谢谢老师！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473483,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573009837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148373,"user_name":"古古惑惑","can_delete":false,"product_type":"c1","uid":1039710,"ip_address":"","ucode":"37724A018564FF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/5e/2354204d.jpg","comment_is_top":false,"comment_ctime":1572999929,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572999929","product_id":100039001,"comment_content":"编码时牢记设计原则，严格遵守编码规范，使用设计模式对代码进行重构。<br>面向对象语言具有封装，继承，重载等特性，天然适合各种设计模式。","like_count":0},{"had_liked":false,"id":148369,"user_name":"WIZ","can_delete":false,"product_type":"c1","uid":1260348,"ip_address":"","ucode":"313AF84674475C","user_header":"https://static001.geekbang.org/account/avatar/00/13/3b/3c/2947127c.jpg","comment_is_top":false,"comment_ctime":1572999641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572999641","product_id":100039001,"comment_content":"我觉得规范是最重要的，因为不管项目大小，结构是否复杂，都逃不过编码这一步，既然要编码，那么就一定要涉及到编码规范，书写良好的代码让人一看就懂赏心悦目，书写差的代码很容易让人差生逆反心理，当然不是说，其他技巧不重要，只不过我觉得只有做好最基本的，那么那些高端机票才会发挥更大的作用。","like_count":0},{"had_liked":false,"id":148353,"user_name":"力主道","can_delete":false,"product_type":"c1","uid":1178870,"ip_address":"","ucode":"8C2BE1B9B10A28","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/f6/d50bfaf4.jpg","comment_is_top":false,"comment_ctime":1572998120,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572998120","product_id":100039001,"comment_content":"因为，面向对象的封装，继承，抽象，多态，是很多，设计原则和设计模式的的实现基础!然后，<br>其他的提高代码质量的方法，好像没有啥其他的了!","like_count":0},{"had_liked":false,"id":148348,"user_name":"Smirk","can_delete":false,"product_type":"c1","uid":1230263,"ip_address":"","ucode":"F677072767F0A4","user_header":"https://static001.geekbang.org/account/avatar/00/12/c5/b7/87e7e865.jpg","comment_is_top":false,"comment_ctime":1572996191,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572996191","product_id":100039001,"comment_content":"不只是面向对象有设计模式，面向过程和函数式编程也有自己的模式，甚至在面向对象中也会用到些面向过程的模式","like_count":0},{"had_liked":false,"id":148303,"user_name":"Lugyedo","can_delete":false,"product_type":"c1","uid":1011793,"ip_address":"","ucode":"EB5E456B638E70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/70/51/f1825adb.jpg","comment_is_top":false,"comment_ctime":1572970852,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572970852","product_id":100039001,"comment_content":"个人认为代码可读性和编码规范是最重要的，一个团队要有统一的编码规范，写出来的代码可读性高，便于做CodeReview和重构","like_count":0},{"had_liked":false,"id":148299,"user_name":"Rocky","can_delete":false,"product_type":"c1","uid":1023731,"ip_address":"","ucode":"CA33ACBDE8B87B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9e/f3/9c067137.jpg","comment_is_top":false,"comment_ctime":1572970168,"is_pvip":false,"replies":[{"id":"57179","content":"这个话题有点大。函数式编程里本身就集成了很多设计模式，都不需要自己实现了。","user_name":"作者回复","comment_id":148299,"uid":"1190123","ip_address":"","utype":1,"ctime":1573026778,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1572970168","product_id":100039001,"comment_content":"<br>在函数式编程中，这些设计模式还有哪些是适用的？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473455,"discussion_content":"这个话题有点大。函数式编程里本身就集成了很多设计模式，都不需要自己实现了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573026778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148297,"user_name":"小北","can_delete":false,"product_type":"c1","uid":1120156,"ip_address":"","ucode":"A428FC9B771108","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ercic1LB9N9P1kArjS1f3hOo641elcwFGHWrxeYF4yZjfwiaydLwVeM4ZJEmVkib66GtJoE0cr6Dviauw/132","comment_is_top":false,"comment_ctime":1572969219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572969219","product_id":100039001,"comment_content":"其实今天讲的五个方面都是提高代码质量必不可少的，但最基础最重要的仍然是面向对象设计和设计模式。<br>设计模式必须建立在面向对象编程基础之上，否则很多设计思想无法实现","like_count":0},{"had_liked":false,"id":148278,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1572967203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572967203","product_id":100039001,"comment_content":"我认设计模式对提高代码质量最有效，因为设计模式已经融入了设计思想和设计原则，是真正落地的环节。如果没有使用合适的设计模式，再怎么遵循编码规范和积极重构，也只是在打补丁。<br>老师罗列的内容涵盖已经很广了，我想到的一些比较小的点，比如“不要炫技”可以被涵盖在KISS原则中。<br><br>因为面向对象的特性是这些设计模式的依托，所以强调面向对象","like_count":0},{"had_liked":false,"id":148260,"user_name":"佳民","can_delete":false,"product_type":"c1","uid":1000433,"ip_address":"","ucode":"A5626BAEC96945","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/f1/3c69eb09.jpg","comment_is_top":false,"comment_ctime":1572965311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572965311","product_id":100039001,"comment_content":"第一个问题我认为设计原则对提高代码质量最有效，遵循设计原则，就会运用好面向对象分析和设计的方法，就会选择对应的设计模式，文中有说“开闭原则”是很多设计模式（策略、模板等）的指导原则，如果追求设计原则，相对来讲写得代码也是符合编程规范的。追求复用、减少重复，追求代码的可读性和可维护性是写好代码的宗旨，熟悉语言的特性和框架的原理、使用好算法和数据结构对写高质量的代码有非常大的帮助，对代码或系统进行拆分也有利于提高代码质量，不过这个应该属于重构。<br>第二个问题我的理解是大部分设计模式只针对面向对象编程思想的，也就是说是面向对象编程特有的，当然书中的设计模式都是面向对象编程语言实现的（C++）。","like_count":0},{"had_liked":false,"id":148216,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1572959372,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572959372","product_id":100039001,"comment_content":"第一题，感觉设计模式最有效，设计原则过于抽象，代码规范粒度太小<br>第二题，只有面向对象的前提才能讨论这些吧<br>最后，跟上大部队了！干！","like_count":0},{"had_liked":false,"id":148185,"user_name":"Victoryli","can_delete":false,"product_type":"c1","uid":1037369,"ip_address":"","ucode":"0D296E383B2090","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d4/39/7b321e92.jpg","comment_is_top":false,"comment_ctime":1572955637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572955637","product_id":100039001,"comment_content":"一口气看完前四节，之前一直没接触过设计模式，开始学起来","like_count":0},{"had_liked":false,"id":148132,"user_name":"真是艹0","can_delete":false,"product_type":"c1","uid":1234043,"ip_address":"","ucode":"0A082CE0D79C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/7b/74e59208.jpg","comment_is_top":false,"comment_ctime":1572946082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572946082","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":148125,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1572944404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572944404","product_id":100039001,"comment_content":"个人认为设计原则最抽象，一旦掌握也是最有用的","like_count":0},{"had_liked":false,"id":148096,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1572940700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572940700","product_id":100039001,"comment_content":"知易行难，想要push别人做到更是难上加难","like_count":0},{"had_liked":false,"id":148061,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1572934535,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572934535","product_id":100039001,"comment_content":"感觉重构(不断重构)对提高代码质量最有效。<br>个人感觉：<br>1.现阶段而言不可能直接写出高质量的代码，应该一步一步来<br>2.需求是经常变动的，不断重构可以持续保持 代码的质量","like_count":0},{"had_liked":false,"id":148058,"user_name":"andavid","can_delete":false,"product_type":"c1","uid":1018739,"ip_address":"","ucode":"4CA32B155A682F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/73/5d4dca26.jpg","comment_is_top":false,"comment_ctime":1572934370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572934370","product_id":100039001,"comment_content":"大学里上过面向对象的课，翻过设计模式，看过代码整洁之道和重构，但是从来没有思考过他们之间的联系，知识都是分散的不成体系。看完这篇文章感觉老师真是厉害，竟然能把这些内容都串联起来，佩服！老师有空可以多多分享下学习方法，很值得借鉴。","like_count":0},{"had_liked":false,"id":148043,"user_name":"橘子","can_delete":false,"product_type":"c1","uid":1368522,"ip_address":"","ucode":"EDF6145878F897","user_header":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","comment_is_top":false,"comment_ctime":1572932505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572932505","product_id":100039001,"comment_content":"面向对象的才有，继承和多态的概念，面向过程没有这个概念","like_count":0},{"had_liked":false,"id":148035,"user_name":"张瑞浩","can_delete":false,"product_type":"c1","uid":1242092,"ip_address":"","ucode":"3F37052E1D00FB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLnQfCfmXCPI1icrD2mVlIkY5AVY6MT3VMAYKjDXZYlBgUk6wxBj61vpK1Om3aRlj27R0RYbVoALGw/132","comment_is_top":false,"comment_ctime":1572931204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572931204","product_id":100039001,"comment_content":"设计的原则总是：抽象，封装<br>","like_count":0},{"had_liked":false,"id":148034,"user_name":"Sisyphus235","can_delete":false,"product_type":"c1","uid":1366359,"ip_address":"","ucode":"829CC4CE0FA96E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ooZCPFY1xgC81h0Eu3vuqbWG5MaBp8RNmvXXGQwupo2LpSOLq0rBlTDRAF1yM6wF09WdeG49rA9dJSVKIUBxnQ/132","comment_is_top":false,"comment_ctime":1572931116,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572931116","product_id":100039001,"comment_content":"结对编程可以提高代码质量，只是太难实践，现实中几乎不可行，但是认真执行的 code review 确实能提升系统稳定性，提高代码质量。<br>面向对象则具备了封装、抽象、继承、多态的特性，这提供了设计模式的基础。","like_count":0},{"had_liked":false,"id":148013,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1572928996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572928996","product_id":100039001,"comment_content":"话题2：<br>    其实是个怎么理解“面向对象”这四个字的问题。个人理解，“面向”是构建的意思，“面向对象”就是构建对象，而使用什么东西来构建并不是关注的重点。相对的，还有“基于对象”的概念，指的是使用的就对象，关注的也是使用的这些对象，而用这些对象构建出来的东西则不是关注重点。<br>    回到话题中的问题，《设计模式》关注的是对象的构建过程，所以强调的是“面向对象”，如果关注的是被使用的那些对象，则名字应该改成《设计模式：可复用基于对象软件的基础》，当然，基于对象的模式和面向对象的模式会完全不同。","like_count":0},{"had_liked":false,"id":147982,"user_name":"EndayN","can_delete":false,"product_type":"c1","uid":1006168,"ip_address":"","ucode":"98D020A2BCE34F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/58/47e8e1b7.jpg","comment_is_top":false,"comment_ctime":1572924878,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1572924878","product_id":100039001,"comment_content":"不过组合模式还挺有用的啊。在那种有递归的场景里啊。","like_count":0,"discussions":[{"author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44123,"discussion_content":"组合最后其实是一颗树，结合数据结构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572932566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147962,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1572922720,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572922720","product_id":100039001,"comment_content":"打卡!","like_count":0},{"had_liked":false,"id":147880,"user_name":"阳光很轻","can_delete":false,"product_type":"c1","uid":1619031,"ip_address":"","ucode":"73408E2DA4F10D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKE7VtDBFkSht6VgE4UZL82SlUrDXKVaGVibJSNXsVhfrPTNQ2OfrrOGu7ugMxwa0osyZibRqZjh5KQ/132","comment_is_top":false,"comment_ctime":1572916963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572916963","product_id":100039001,"comment_content":"面向对象，设计原则，设计模式，编程规范，代码重构","like_count":0},{"had_liked":false,"id":147770,"user_name":"Yuuuuu","can_delete":false,"product_type":"c1","uid":1233780,"ip_address":"","ucode":"64FD04761D2111","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/74/578b169d.jpg","comment_is_top":false,"comment_ctime":1572885120,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572885120","product_id":100039001,"comment_content":"在初次编写代码时可读性是最重要的，在维护过程中扩展性是最要的。因为初次编写代码时，我们可能不清楚未来程序的扩展点，而当新需求来时，就给了我们一些提示，我们可以更好的判断是否需要重构，是否需要提供扩展点","like_count":0,"discussions":[{"author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44126,"discussion_content":"结合下许式伟的课程，应该是分清楚哪些会变，哪些不会变。不会变得下沉，会变得就是扩展点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572932963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147754,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1572883778,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572883778","product_id":100039001,"comment_content":"个人认为编码规范最重要，<br>     代码是读的时候多，所以可读性必须好. <br><br><br>","like_count":0},{"had_liked":false,"id":147727,"user_name":"汤小高","can_delete":false,"product_type":"c1","uid":1555565,"ip_address":"","ucode":"D4AB7766273D52","user_header":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","comment_is_top":false,"comment_ctime":1572881517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572881517","product_id":100039001,"comment_content":"个人认为代码是给人看的，因此可读性最重要，所以编码规范就特别重要，其次为了应对未来需求的变化而对现有代码嵌入式更小，所以可拓展性次也很重要，因此设计模式和设计原则第二重要。","like_count":0},{"had_liked":false,"id":147707,"user_name":"GeekAmI","can_delete":false,"product_type":"c1","uid":1005030,"ip_address":"","ucode":"232C0B6DFB9F56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e6/87197b10.jpg","comment_is_top":false,"comment_ctime":1572880178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572880178","product_id":100039001,"comment_content":"最有效的方法还是去一个有牛人的组，组内形成Review代码的氛围，这点美团做的比较好。","like_count":0},{"had_liked":false,"id":147698,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1572879735,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572879735","product_id":100039001,"comment_content":"又读了一遍，感觉不具备（归纳）简洁笔记的能力，记笔记本上了。慢慢消化。","like_count":0},{"had_liked":false,"id":147686,"user_name":"赌神很低调","can_delete":false,"product_type":"c1","uid":1168545,"ip_address":"","ucode":"1066778E1EDF26","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/a1/8bc8e7e1.jpg","comment_is_top":false,"comment_ctime":1572879327,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572879327","product_id":100039001,"comment_content":"写完业务逻看是否需要提炼方法，先不考虑重复，只是为了增加可读性，方法名即注释。完成一个类，看看职责是否太多，否则提炼类。复杂逻辑多思考怎么好写单元测试。多读开源代码增加语感，多读源码分析文章，学会分析和评价，体会好坏。","like_count":0},{"had_liked":false,"id":147666,"user_name":"　扬帆丶启航　","can_delete":false,"product_type":"c1","uid":1235282,"ip_address":"","ucode":"4079D0889CD86C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/52/73351eab.jpg","comment_is_top":false,"comment_ctime":1572877944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572877944","product_id":100039001,"comment_content":"1.编程规范和重构，好的编程规范有利于编写可读性强的代码，重构可以不断的优化代码，提高代码质量。<br>2.面向对象是很多设计原则，设计模式的基础","like_count":0},{"had_liked":false,"id":147665,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1572877729,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572877729","product_id":100039001,"comment_content":"以平时工作来看，编码规范最重要，让自己的代码写的更规范，可读性是肯定会上去的。后面学习设计模式和重构，可以维护代码质量。面向对象是设计模式的基础","like_count":0},{"had_liked":false,"id":147628,"user_name":"小明","can_delete":false,"product_type":"c1","uid":1625618,"ip_address":"","ucode":"5A0357E9849226","user_header":"https://static001.geekbang.org/account/avatar/00/18/ce/12/1488e361.jpg","comment_is_top":false,"comment_ctime":1572874598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572874598","product_id":100039001,"comment_content":"1. 最有效的我觉着还是编码规范，只要编写代码就离不开，而且最好执行；除了老师讲的以外，单元测试的编写也可以提高代码质量<br>2. 第二个问题，我觉着面向过程、函数式编程相当于是个一次性工作，涉及可复用、可扩展这些性能很少吧","like_count":0},{"had_liked":false,"id":147603,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1572872783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572872783","product_id":100039001,"comment_content":"回答问题：<br>1.编码规范和重构。（持续可读的代码是一切的基础）。举个例子：一个业务代码可扩展性和性能都很好，就是可读性很差。看懂要花5天，十个开发看懂共花50天，变更的成本会递增，耗时会随加入的人越多而变得越高。一个业务代码可扩展性和性能都很差，但可读性很高，看懂只要一小时，改这块代码，一个开发要50天，两个分工要25天，5个人只要10天，十个开发只要五天，变更成本固定，耗时不会变，加入人越多完成越快。<br><br>2.因为部分设计模式，就是在面向对象的基础上产生的。","like_count":0},{"had_liked":false,"id":147588,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1572871752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572871752","product_id":100039001,"comment_content":"赶着听赶着忘记，多亏作者后边的一张图，保存了没事看看","like_count":0},{"had_liked":false,"id":147585,"user_name":"暒","can_delete":false,"product_type":"c1","uid":1547048,"ip_address":"","ucode":"9C956F418C66BB","user_header":"https://static001.geekbang.org/account/avatar/00/17/9b/28/9d89de4d.jpg","comment_is_top":false,"comment_ctime":1572871578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572871578","product_id":100039001,"comment_content":"继续更进<br>","like_count":0},{"had_liked":false,"id":147573,"user_name":"不破楼兰终不还","can_delete":false,"product_type":"c1","uid":1145867,"ip_address":"","ucode":"F06EEF04552A90","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/0b/2b5e5da5.jpg","comment_is_top":false,"comment_ctime":1572870786,"is_pvip":false,"replies":[{"id":"57053","content":"可以这么理解","user_name":"作者回复","comment_id":147573,"uid":"1190123","ip_address":"","utype":1,"ctime":1572947211,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1572870786","product_id":100039001,"comment_content":"封装、抽象、继承、多态是面向对象的基础，也是代码复用的前提。既然强调复用，面向对象是少不了的咯。可以这么理解么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473266,"discussion_content":"可以这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572947211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1217306,"avatar":"https://static001.geekbang.org/account/avatar/00/12/93/1a/5bb29be9.jpg","nickname":"曹玉磊","note":"","ucode":"BD46077D348F75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43422,"discussion_content":"复用不是面向对象独有的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572873583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147569,"user_name":"楠子","can_delete":false,"product_type":"c1","uid":1035603,"ip_address":"","ucode":"386718B191B034","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/53/287bae47.jpg","comment_is_top":false,"comment_ctime":1572870630,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572870630","product_id":100039001,"comment_content":"知易行难","like_count":0},{"had_liked":false,"id":147552,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1572869483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869483","product_id":100039001,"comment_content":"第一问 提高代码质量最有效的我觉得还是设计原则加面向对象吧 这些是基础<br>第二问 就如同我在第一问的回答一样 没有面向对象的那些特性就不会有设计模式","like_count":0},{"had_liked":false,"id":147516,"user_name":"梁军","can_delete":false,"product_type":"c1","uid":1521145,"ip_address":"","ucode":"81E22EFAFD77B4","user_header":"https://static001.geekbang.org/account/avatar/00/17/35/f9/7a682fc1.jpg","comment_is_top":false,"comment_ctime":1572867766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572867766","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":147470,"user_name":"阿崔cxr","can_delete":false,"product_type":"c1","uid":1177565,"ip_address":"","ucode":"26E2C7D96306A4","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/dd/c85f2065.jpg","comment_is_top":false,"comment_ctime":1572865676,"is_pvip":false,"replies":[{"id":"57058","content":"会讲到的：）","user_name":"作者回复","comment_id":147470,"uid":"1190123","ip_address":"","utype":1,"ctime":1572947679,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1572865676","product_id":100039001,"comment_content":"老师你好，想问下再讲重构的篇章中，会讲到如何加测试嘛？没有测试的保障，那么重构是没有保障的。 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473250,"discussion_content":"会讲到的：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572947679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147381,"user_name":"青青木","can_delete":false,"product_type":"c1","uid":1049870,"ip_address":"","ucode":"2732BA6FBC149D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKILshrJiasJADt0FTdA9x9rJbSeM3t7BUgUxKqBpsZK4Uukg9qwmbOCmLia89VaqsPcKyauGBLRFw/132","comment_is_top":false,"comment_ctime":1572861409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572861409","product_id":100039001,"comment_content":"我觉得不管是设计 还是重构SOLID这5个原则都是最基础的原则","like_count":0},{"had_liked":false,"id":147365,"user_name":"盖瑞Chen","can_delete":false,"product_type":"c1","uid":1029547,"ip_address":"","ucode":"CAD57E0D9F4D3B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b5/ab/0a43c406.jpg","comment_is_top":false,"comment_ctime":1572861017,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572861017","product_id":100039001,"comment_content":"啊，组合模式不常用吗，还是这个组合不是那个组合","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43223,"discussion_content":"不是一个组合 后面就讲到了 别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572864054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147363,"user_name":"mcuallen","can_delete":false,"product_type":"c1","uid":1211069,"ip_address":"","ucode":"AD8511953AD235","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/bd/f314a2ae.jpg","comment_is_top":false,"comment_ctime":1572860973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572860973","product_id":100039001,"comment_content":"谢谢老师准备的全局图，按图索骥，直到成功","like_count":0},{"had_liked":false,"id":147317,"user_name":"Sskkl","can_delete":false,"product_type":"c1","uid":1116516,"ip_address":"","ucode":"BB22A5DF48AFCB","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/64/c2226be3.jpg","comment_is_top":false,"comment_ctime":1572858689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572858689","product_id":100039001,"comment_content":"争哥威武💪🏻","like_count":0}]}