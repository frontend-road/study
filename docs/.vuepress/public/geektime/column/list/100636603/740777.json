{"id":740777,"title":"第 14 章 内建组件和模块","content":"<h1 id=\"nav_point_128\">第 14 章　内建组件和模块</h1>\n<p>在第 12 章和第 13 章中，我们讨论了 Vue.js 是如何基于渲染器实现组件化能力的。本章，我们将讨论 Vue.js 中几个非常重要的内建组件和模块，例如 KeepAlive 组件、Teleport 组件、Transition 组件等，它们都需要渲染器级别的底层支持。另外，这些内建组件所带来的能力，对开发者而言非常重要且实用，理解它们的工作原理有助于我们正确地使用它们。</p>\n<h2 id=\"nav_point_129\">14.1　KeepAlive 组件的实现原理</h2>\n<h3 id=\"nav_point_130\">14.1.1　组件的激活与失活</h3>\n<p>KeepAlive 一词借鉴于 HTTP 协议。在 HTTP 协议中，KeepAlive 又称 <strong>HTTP 持久连接</strong>（HTTP persistent connection），其作用是允许多个请求或响应共用一个 TCP 连接。在没有 KeepAlive 的情况下，一个 HTTP 连接会在每次请求/响应结束后关闭，当下一次请求发生时，会建立一个新的 HTTP 连接。频繁地销毁、创建 HTTP 连接会带来额外的性能开销，KeepAlive 就是为了解决这个问题而生的。</p>\n<p>HTTP 中的 KeepAlive 可以避免连接频繁地销毁/创建，与 HTTP 中的 KeepAlive 类似，Vue.js 内建的 KeepAlive 组件可以避免一个组件被频繁地销毁/重建。假设我们的页面中有一组 <code>&lt;Tab&gt;</code> 组件，如下面的代码所示：</p><!-- [[[read_end]]] -->\n<pre class=\"code-rows\"><code> &lt;template&gt;\n   &lt;Tab v-if=\"currentTab === 1\"&gt;...&lt;/Tab&gt;\n   &lt;Tab v-if=\"currentTab === 2\"&gt;...&lt;/Tab&gt;\n   &lt;Tab v-if=\"currentTab === 3\"&gt;...&lt;/Tab&gt;\n &lt;/template&gt;\n</code></pre>\n<p>可以看到，根据变量 <code>currentTab</code> 值的不同，会渲染不同的 <code>&lt;Tab&gt;</code> 组件。当用户频繁地切换 Tab 时，会导致不停地卸载并重建对应的 <code>&lt;Tab&gt;</code> 组件。为了避免因此产生的性能开销，可以使用 KeepAlive 组件来解决这个问题，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> &lt;template&gt;\n   &lt;!-- 使用 KeepAlive 组件包裹 --&gt;\n   &lt;KeepAlive&gt;\n     &lt;Tab v-if=\"currentTab === 1\"&gt;...&lt;/Tab&gt;\n     &lt;Tab v-if=\"currentTab === 2\"&gt;...&lt;/Tab&gt;\n     &lt;Tab v-if=\"currentTab === 3\"&gt;...&lt;/Tab&gt;\n   &lt;/KeepAlive&gt;\n &lt;/template&gt;\n</code></pre>\n<p>这样，无论用户怎样切换 <code>&lt;Tab&gt;</code> 组件，都不会发生频繁的创建和销毁，因而会极大地优化对用户操作的响应，尤其是在大组件场景下，优势会更加明显。那么，KeepAlive 组件的实现原理是怎样的呢？其实 KeepAlive 的本质是缓存管理，再加上特殊的挂载/卸载逻辑。</p>\n<p>首先，KeepAlive 组件的实现需要渲染器层面的支持。这是因为被 KeepAlive 的组件在卸载时，我们不能真的将其卸载，否则就无法维持组件的当前状态了。正确的做法是，将被 KeepAlive 的组件从原容器搬运到另外一个隐藏的容器中，实现“假卸载”。当被搬运到隐藏容器中的组件需要再次被“挂载”时，我们也不能执行真正的挂载逻辑，而应该把该组件从隐藏容器中再搬运到原容器。这个过程对应到组件的生命周期，其实就是 <code>activated</code> 和 <code>deactivated</code>。</p>\n<p>图 14-1 描述了“卸载”和“挂载”一个被 KeepAlive 的组件的过程。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00608.jpeg\" alt=\"\" width=\"85%\" style=\"width: 85%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 14-1　“卸载”和“挂载”一个被 KeepAlive 的组件的过程</strong></p>\n<p>如图 14-1 所示，“卸载”一个被 KeepAlive 的组件时，它并不会真的被卸载，而会被移动到一个隐藏容器中。当重新“挂载”该组件时，它也不会被真的挂载，而会被从隐藏容器中取出，再“放回”原来的容器中，即页面中。</p>\n<p>一个最基本的 KeepAlive 组件实现起来并不复杂，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> const KeepAlive = {\n   // KeepAlive 组件独有的属性，用作标识\n   __isKeepAlive: true,\n   setup(props, { slots }) {\n     // 创建一个缓存对象\n     // key: vnode.type\n     // value: vnode\n     const cache = new Map()\n     // 当前 KeepAlive 组件的实例\n     const instance = currentInstance\n     // 对于 KeepAlive 组件来说，它的实例上存在特殊的 keepAliveCtx 对象，该对象由渲染器注入\n     // 该对象会暴露渲染器的一些内部方法，其中 move 函数用来将一段 DOM 移动到另一个容器中\n     const { move, createElement } = instance.keepAliveCtx\n<pre><code> // 创建隐藏容器\n const storageContainer = createElement('div')\n\n // KeepAlive 组件的实例上会被添加两个内部函数，分别是 _deActivate 和 _activate\n // 这两个函数会在渲染器中被调用\n instance._deActivate = (vnode) =&amp;gt; {\n   move(vnode, storageContainer)\n }\n instance._activate = (vnode, container, anchor) =&amp;gt; {\n   move(vnode, container, anchor)\n }\n\n return () =&amp;gt; {\n   // KeepAlive 的默认插槽就是要被 KeepAlive 的组件\n   let rawVNode = slots.default()\n   // 如果不是组件，直接渲染即可，因为非组件的虚拟节点无法被 KeepAlive\n   if (typeof rawVNode.type !== 'object') {\n     return rawVNode\n   }\n\n   // 在挂载时先获取缓存的组件 vnode\n   const cachedVNode = cache.get(rawVNode.type)\n   if (cachedVNode) {\n     // 如果有缓存的内容，则说明不应该执行挂载，而应该执行激活\n     // 继承组件实例\n     rawVNode.component = cachedVNode.component\n     // 在 vnode 上添加 keptAlive 属性，标记为 true，避免渲染器重新挂载它\n     rawVNode.keptAlive = true\n   } else {\n     // 如果没有缓存，则将其添加到缓存中，这样下次激活组件时就不会执行新的挂载动作了\n     cache.set(rawVNode.type, rawVNode)\n   }\n\n   // 在组件 vnode 上添加 shouldKeepAlive 属性，并标记为 true，避免渲染器真的将组件卸载\n   rawVNode.shouldKeepAlive = true\n   // 将 KeepAlive 组件的实例也添加到 vnode 上，以便在渲染器中访问\n   rawVNode.keepAliveInstance = instance\n\n   // 渲染组件 vnode\n   return rawVNode\n }\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>从上面的实现中可以看到，与普通组件的一个较大的区别在于，KeepAlive 组件与渲染器的结合非常深。首先，KeepAlive 组件本身并不会渲染额外的内容，它的渲染函数最终只返回需要被 KeepAlive 的组件，我们把这个需要被 KeepAlive 的组件称为“内部组件”。KeepAlive 组件会对“内部组件”进行操作，主要是在“内部组件”的 <code>vnode</code> 对象上添加一些标记属性，以便渲染器能够据此执行特定的逻辑。这些标记属性包括如下几个。</p>\n<ul>\n<li><p><code>shouldKeepAlive</code>：该属性会被添加到“内部组件”的 <code>vnode</code> 对象上，这样当渲染器卸载“内部组件”时，可以通过检查该属性得知“内部组件”需要被 KeepAlive。于是，渲染器就不会真的卸载“内部组件”，而是会调用 <code>_deActivate</code> 函数完成搬运工作，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> // 卸载操作\n function unmount(vnode) {\n   if (vnode.type === Fragment) {\n     vnode.children.forEach(c =&gt; unmount(c))\n     return\n   } else if (typeof vnode.type === 'object') {\n     // vnode.shouldKeepAlive 是一个布尔值，用来标识该组件是否应该被 KeepAlive\n     if (vnode.shouldKeepAlive) {\n       // 对于需要被 KeepAlive 的组件，我们不应该真的卸载它，而应调用该组件的父组件，\n       // 即 KeepAlive 组件的 _deActivate 函数使其失活\n       vnode.keepAliveInstance._deActivate(vnode)\n     } else {\n       unmount(vnode.component.subTree)\n     }\n     return\n   }\n   const parent = vnode.el.parentNode\n   if (parent) {\n     parent.removeChild(vnode.el)\n   }\n }\n</code></pre>\n<p>可以看到，<code>unmount</code> 函数在卸载组件时，会检测组件是否应该被 KeepAlive，从而执行不同的操作。</p>\n</li>\n<li><p><code>keepAliveInstance</code>：“内部组件”的 <code>vnode</code> 对象会持有 KeepAlive 组件实例，在 <code>unmount</code> 函数中会通过 <code>keepAliveInstance</code> 来访问 <code>_deActivate</code> 函数。</p>\n</li>\n<li><p><code>keptAlive</code>：“内部组件”如果已经被缓存，则还会为其添加一个 <code>keptAlive</code> 标记。这样当“内部组件”需要重新渲染时，渲染器并不会重新挂载它，而会将其激活，如下面 <code>patch</code> 函数的代码所示：</p>\n<pre class=\"code-rows\"><code> function patch(n1, n2, container, anchor) {\n   if (n1 &amp;&amp; n1.type !== n2.type) {\n     unmount(n1)\n     n1 = null\n   }\n<p>const { type } = n2</p>\n<p>if (typeof type === ‘string’) {<br />\n// 省略部分代码<br />\n} else if (type === Text) {<br />\n// 省略部分代码<br />\n} else if (type === Fragment) {<br />\n// 省略部分代码<br />\n} else if (typeof type === ‘object’ || typeof type === ‘function’) {<br />\n// component<br />\nif (!n1) {<br />\n// 如果该组件已经被 KeepAlive，则不会重新挂载它，而是会调用 _activate 来激活它<br />\nif (n2.keptAlive) {<br />\nn2.keepAliveInstance._activate(n2, container, anchor)<br />\n} else {<br />\nmountComponent(n2, container, anchor)<br />\n}<br />\n} else {<br />\npatchComponent(n1, n2, anchor)<br />\n}<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>可以看到，如果组件的 <code>vnode</code> 对象中存在 <code>keptAlive</code> 标识，则渲染器不会重新挂载它，而是会通过 <code>keepAliveInstance._activate</code> 函数来激活它。</p>\n</li>\n</ul>\n<p>我们再来看一下用于激活组件和失活组件的两个函数：</p>\n<pre class=\"code-rows\"><code> const { move, createElement } = instance.keepAliveCtx\n<p>instance._deActivate = (vnode) =&gt; {<br />\nmove(vnode, storageContainer)<br />\n}<br />\ninstance._activate = (vnode, container, anchor) =&gt; {<br />\nmove(vnode, container, anchor)<br />\n}<br />\n</code></pre></p>\n<p>可以看到，失活的本质就是将组件所渲染的内容移动到隐藏容器中，而激活的本质是将组件所渲染的内容从隐藏容器中搬运回原来的容器。另外，上面这段代码中涉及的 <code>move</code> 函数是由渲染器注入的，如下面 <code>mountComponent</code> 函数的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountComponent(vnode, container, anchor) {\n   // 省略部分代码\n<p>const instance = {<br />\nstate,<br />\nprops: shallowReactive(props),<br />\nisMounted: false,<br />\nsubTree: null,<br />\nslots,<br />\nmounted: [],<br />\n// 只有 KeepAlive 组件的实例下会有 keepAliveCtx 属性<br />\nkeepAliveCtx: null<br />\n}</p>\n<p>// 检查当前要挂载的组件是否是 KeepAlive 组件<br />\nconst isKeepAlive = vnode.type.__isKeepAlive<br />\nif (isKeepAlive) {<br />\n// 在 KeepAlive 组件实例上添加 keepAliveCtx 对象<br />\ninstance.keepAliveCtx = {<br />\n// move 函数用来移动一段 vnode<br />\nmove(vnode, container, anchor) {<br />\n// 本质上是将组件渲染的内容移动到指定容器中，即隐藏容器中<br />\ninsert(vnode.component.subTree.el, container, anchor)<br />\n},<br />\ncreateElement<br />\n}<br />\n}</p>\n<p>// 省略部分代码<br />\n}<br />\n</code></pre></p>\n<p>至此，一个最基本的 KeepAlive 组件就完成了。</p>\n<h3 id=\"nav_point_131\">14.1.2　<code>include</code> 和 <code>exclude</code></h3>\n<p>在默认情况下，KeepAlive 组件会对所有“内部组件”进行缓存。但有时候用户期望只缓存特定组件。为了使用户能够自定义缓存规则，我们需要让 KeepAlive 组件支持两个 <code>props</code>，分别是 <code>include</code> 和 <code>exclude</code>。其中，<code>include</code> 用来显式地配置应该被缓存组件，而 <code>exclude</code> 用来显式地配置不应该被缓存组件。</p>\n<p>KeepAlive 组件的 <code>props</code> 定义如下：</p>\n<pre class=\"code-rows\"><code> const KeepAlive = {\n   __isKeepAlive: true,\n   // 定义 include 和 exclude\n   props: {\n     include: RegExp,\n     exclude: RegExp\n   },\n   setup(props, { slots }) {\n     // 省略部分代码\n   }\n }\n</code></pre>\n<p>为了简化问题，我们只允许为 <code>include</code> 和 <code>exclude</code> 设置正则类型的值。在 KeepAlive 组件被挂载时，它会根据“内部组件”的名称（即 <code>name</code> 选项）进行匹配，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> const cache = new Map()\n const KeepAlive = {\n   __isKeepAlive: true,\n   props: {\n     include: RegExp,\n     exclude: RegExp\n   },\n   setup(props, { slots }) {\n     // 省略部分代码\n<pre><code> return () =&amp;gt; {\n   let rawVNode = slots.default()\n   if (typeof rawVNode.type !== 'object') {\n     return rawVNode\n   }\n   // 获取“内部组件”的 name\n   const name = rawVNode.type.name\n   // 对 name 进行匹配\n   if (\n     name &amp;amp;&amp;amp;\n     (\n       // 如果 name 无法被 include 匹配\n       (props.include &amp;amp;&amp;amp; !props.include.test(name)) ||\n       // 或者被 exclude 匹配\n       (props.exclude &amp;amp;&amp;amp; props.exclude.test(name))\n     )\n   ) {\n     // 则直接渲染“内部组件”，不对其进行后续的缓存操作\n     return rawVNode\n   }\n\n   // 省略部分代码\n }\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>可以看到，我们根据用户指定的 <code>include</code> 和 <code>exclude</code> 正则，对“内部组件”的名称进行匹配，并根据匹配结果判断是否要对“内部组件”进行缓存。在此基础上，我们可以任意扩充匹配能力。例如，可以将 <code>include</code> 和 <code>exclude</code> 设计成多种类型值，允许用户指定字符串或函数，从而提供更加灵活的匹配机制。另外，在做匹配时，也可以不限于“内部组件”的名称，我们甚至可以让用户自行指定匹配要素。但无论如何，其原理都是不变的。</p>\n<h3 id=\"nav_point_132\">14.1.3　缓存管理</h3>\n<p>在前文给出的实现中，我们使用一个 <code>Map</code> 对象来实现对组件的缓存：</p>\n<pre class=\"code-rows\"><code> const cache = new Map()\n</code></pre>\n<p>该 <code>Map</code> 对象的键是组件选项对象，即 <code>vnode.type</code> 属性的值，而该 <code>Map</code> 对象的值是用于描述组件的 <code>vnode</code> 对象。由于用于描述组件的 <code>vnode</code> 对象存在对组件实例的引用（即 <code>vnode.component</code> 属性），所以缓存用于描述组件的 <code>vnode</code> 对象，就等价于缓存了组件实例。</p>\n<p>回顾一下目前 KeepAlive 组件中关于缓存的实现，如下是该组件渲染函数的部分代码：</p>\n<pre class=\"code-rows\"><code> // KeepAlive 组件的渲染函数中关于缓存的实现\n<p>// 使用组件选项对象 rawVNode.type 作为键去缓存中查找<br />\nconst cachedVNode = cache.get(rawVNode.type)<br />\nif (cachedVNode) {<br />\n// 如果缓存存在，则无须重新创建组件实例，只需要继承即可<br />\nrawVNode.component = cachedVNode.component<br />\nrawVNode.keptAlive = true<br />\n} else {<br />\n// 如果缓存不存在，则设置缓存<br />\ncache.set(rawVNode.type, rawVNode)<br />\n}<br />\n</code></pre></p>\n<p>缓存的处理逻辑可以总结为：</p>\n<ul>\n<li>如果缓存存在，则继承组件实例，并将用于描述组件的 <code>vnode</code> 对象标记为 <code>keptAlive</code>，这样渲染器就不会重新创建新的组件实例；</li>\n<li>如果缓存不存在，则设置缓存。</li>\n</ul>\n<p>这里的问题在于，当缓存不存在的时候，总是会设置新的缓存。这会导致缓存不断增加，极端情况下会占用大量内存。为了解决这个问题，我们必须设置一个缓存阈值，当缓存数量超过指定阈值时对缓存进行修剪。但是这又引出了另外一个问题：我们应该如何对缓存进行修剪呢？换句话说，当需要对缓存进行修剪时，应该以怎样的策略修剪？优先修剪掉哪一部分？</p>\n<p>Vue.js 当前所采用的修剪策略叫作“最新一次访问”。首先，你需要为缓存设置最大容量，也就是通过 KeepAlive 组件的 <code>max</code> 属性来设置，例如：</p>\n<pre class=\"code-rows\"><code> &lt;KeepAlive :max=\"2\"&gt;\n   &lt;component :is=\"dynamicComp\"/&gt;\n &lt;/KeepAlive&gt;\n</code></pre>\n<p>在上面这段代码中，我们设置缓存的容量为 <code>2</code>。假设我们有三个组件 <code>Comp1</code>、<code>Comp2</code>、<code>Comp3</code>，并且它们都会被缓存。然后，我们开始模拟组件切换过程中缓存的变化，如下所示。</p>\n<ul>\n<li>初始渲染 <code>Comp1</code> 并缓存它。此时缓存队列为：<code>[Comp1]</code>，并且最新一次访问（或渲染）的组件是 <code>Comp1</code>。</li>\n<li>切换到 <code>Comp2</code> 并缓存它。此时缓存队列为：<code>[Comp1, Comp2]</code>，并且最新一次访问（或渲染）的组件是 <code>Comp2</code>。</li>\n<li>切换到 <code>Comp3</code>，此时缓存容量已满，需要修剪，应该修剪谁呢？因为当前最新一次访问（或渲染）的组件是 <code>Comp2</code>，所以它是“安全”的，即不会被修剪。因此被修剪掉的将会是 <code>Comp1</code>。当缓存修剪完毕后，将会出现空余的缓存空间用来存储 <code>Comp3</code>。所以，现在的缓存队列是：<code>[Comp2, Comp3]</code>，并且最新一次渲染的组件变成了 <code>Comp3</code>。</li>\n</ul>\n<p>我们还可以换一种切换组件的方式，如下所示。</p>\n<ul>\n<li>初始渲染 <code>Comp1</code> 并缓存它。此时，缓存队列为：<code>[Comp1]</code>，并且最新一次访问（或渲染）的组件是 <code>Comp1</code>。</li>\n<li>切换到 <code>Comp2</code> 并缓存它。此时，缓存队列：<code>[Comp1, Comp2]</code>，并且最新一次访问（或渲染）的组件是 <code>Comp2</code>。</li>\n<li>再切换回 <code>Comp1</code>，由于 <code>Comp1</code> 已经在缓存队列中，所以不需要修剪缓存，只需要激活组件即可，但要将最新一次渲染的组件设置为 <code>Comp1</code>。</li>\n<li>切换到 <code>Comp3</code>，此时缓存容量已满，需要修剪。应该修剪谁呢？由于 <code>Comp1</code> 是最新一次被渲染的，所以它是“安全”的，即不会被修剪掉，所以最终会被修剪掉的是 <code>Comp2</code>。于是，现在的缓存队列是：<code>[Comp1, Comp3]</code>，并且最新一次渲染的组件变成了 <code>Comp3</code>。</li>\n</ul>\n<p>可以看到，在不同的模拟策略下，最终的缓存结果会有所不同。“最新一次访问”的缓存修剪策略的核心在于，需要把当前访问（或渲染）的组件作为最新一次渲染的组件，并且该组件在缓存修剪过程中始终是安全的，即不会被修剪。</p>\n<p>实现 Vue.js 内建的缓存策略并不难，本质上等同于一个小小的算法题目。我们的关注点在于，缓存策略能否改变？甚至允许用户自定义缓存策略？实际上，在 Vue.js 官方的 RFCs 中已经有相关提议<span class=\"comment-number\">1</span>。该提议允许用户实现自定义的缓存策略，在用户接口层面，则体现在 KeepAlive 组件新增了 <code>cache</code> 接口，允许用户指定缓存实例：</p>\n<pre class=\"code-rows\"><code> &lt;KeepAlive :cache=\"cache\"&gt;\n   &lt;Comp /&gt;\n &lt;/KeepAlive&gt;\n</code></pre>\n<p>缓存实例需要满足固定的格式，一个基本的缓存实例的实现如下：</p>\n<pre class=\"code-rows\"><code> // 自定义实现\n const _cache = new Map()\n const cache: KeepAliveCache = {\n   get(key) {\n     _cache.get(key)\n   },\n   set(key, value) {\n     _cache.set(key, value)\n   },\n   delete(key) {\n     _cache.delete(key)\n   },\n   forEach(fn) {\n     _cache.forEach(fn)\n   }\n }\n</code></pre>\n<p>在 KeepAlive 组件的内部实现中，如果用户提供了自定义的缓存实例，则直接使用该缓存实例来管理缓存。从本质上来说，这等价于将缓存的管理权限从 KeepAlive 组件转交给用户了。</p>\n<h2 id=\"nav_point_133\">14.2　Teleport 组件的实现原理</h2>\n<h3 id=\"nav_point_134\">14.2.1　Teleport 组件要解决的问题</h3>\n<p>Teleport 组件是 Vue.js 3 新增的一个内建组件，我们首先讨论它要解决的问题是什么。通常情况下，在将虚拟 DOM 渲染为真实 DOM 时，最终渲染出来的真实 DOM 的层级结构与虚拟 DOM 的层级结构一致。以下面的模板为例：</p>\n<pre class=\"code-rows\"><code> &lt;template&gt;\n   &lt;div id=\"box\" style=\"z-index: -1;\"&gt;\n     &lt;Overlay /&gt;\n   &lt;/div&gt;\n &lt;/template&gt;\n</code></pre>\n<p>在这段模板中，<code>&lt;Overlay&gt;</code> 组件的内容会被渲染到 <code>id</code> 为 <code>box</code> 的 <code>div</code> 标签下。然而，有时这并不是我们所期望的。假设 <code>&lt;Overlay&gt;</code> 是一个“蒙层”组件，该组件会渲染一个“蒙层”，并要求“蒙层”能够遮挡页面上的任何元素。换句话说，我们要求 <code>&lt;Overlay&gt;</code> 组件的 <code>z-index</code> 的层级最高，从而实现遮挡。但问题是，如果 <code>&lt;Overlay&gt;</code> 组件的内容无法跨越 DOM 层级渲染，就无法实现这个目标。还是拿上面这段模板来说，<code>id</code> 为 <code>box</code> 的 <code>div</code> 标签拥有一段内联样式：<code>z-index: -1</code>，这导致即使我们将 <code>&lt;Overlay&gt;</code> 组件所渲染内容的 <code>z-index</code> 值设置为无穷大，也无法实现遮挡功能。</p>\n<p>通常，我们在面对上述场景时，会选择直接在 <code>&lt;body&gt;</code> 标签下渲染“蒙层”内容。在 Vue.js 2 中我们只能通过原生 DOM API 来手动搬运 DOM 元素实现需求。这么做的缺点在于，手动操作 DOM 元素会使得元素的渲染与 Vue.js 的渲染机制脱节，并导致各种可预见或不可预见的问题。考虑到该需求的确非常常见，用户对此也抱有迫切的期待，于是 Vue.js 3 内建了 Teleport 组件。该组件可以将指定内容渲染到特定容器中，而不受 DOM 层级的限制。</p>\n<p>我们先来看看 Teleport 组件是如何解决这个问题的。如下是基于 Teleport 组件实现的 <code>&lt;Overlay&gt;</code> 组件的模板：</p>\n<pre class=\"code-rows\"><code> &lt;template&gt;\n   &lt;Teleport to=\"body\"&gt;\n     &lt;div class=\"overlay\"&gt;&lt;/div&gt;\n   &lt;/Teleport&gt;\n &lt;/template&gt;\n &lt;style scoped&gt;\n   .overlay {\n     z-index: 9999;\n   }\n &lt;/style&gt;\n</code></pre>\n<p>可以看到，<code>&lt;Overlay&gt;</code> 组件要渲染的内容都包含在 Teleport 组件内，即作为 Teleport 组件的插槽。通过为 Teleport 组件指定渲染目标 <code>body</code>，即 <code>to</code> 属性的值，该组件就会直接把它的插槽内容渲染到 <code>body</code> 下，而不会按照模板的 DOM 层级来渲染，于是就实现了跨 DOM 层级的渲染。最终 <code>&lt;Overlay&gt;</code> 组件的 <code>z-index</code> 值也会按预期工作，并遮挡页面中的所有内容。</p>\n<h3 id=\"nav_point_135\">14.2.2　实现 Teleport 组件</h3>\n<p>与 KeepAlive 组件一样，Teleport 组件也需要渲染器的底层支持。首先我们要将 Teleport 组件的渲染逻辑从渲染器中分离出来，这么做有两点好处：</p>\n<ul>\n<li>可以避免渲染器逻辑代码“膨胀”；</li>\n<li>当用户没有使用 Teleport 组件时，由于 Teleport 的渲染逻辑被分离，因此可以利用 TreeShaking 机制在最终的 bundle 中删除 Teleport 相关的代码，使得最终构建包的体积变小。</li>\n</ul>\n<p>为了完成逻辑分离的工作，要先修改 <code>patch</code> 函数，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function patch(n1, n2, container, anchor) {\n   if (n1 &amp;&amp; n1.type !== n2.type) {\n     unmount(n1)\n     n1 = null\n   }\n<p>const { type } = n2</p>\n<p>if (typeof type === ‘string’) {<br />\n// 省略部分代码<br />\n} else if (type === Text) {<br />\n// 省略部分代码<br />\n} else if (type === Fragment) {<br />\n// 省略部分代码<br />\n} else if (typeof type === ‘object’ &amp;&amp; type.__isTeleport) {<br />\n// 组件选项中如果存在 __isTeleport 标识，则它是 Teleport 组件，<br />\n// 调用 Teleport 组件选项中的 process 函数将控制权交接出去<br />\n// 传递给 process 函数的第五个参数是渲染器的一些内部方法<br />\ntype.process(n1, n2, container, anchor, {<br />\npatch,<br />\npatchChildren,<br />\nunmount,<br />\nmove(vnode, container, anchor) {<br />\ninsert(vnode.component ? vnode.component.subTree.el : vnode.el, container, anchor)<br />\n}<br />\n})<br />\n} else if (typeof type === ‘object’ || typeof type === ‘function’) {<br />\n// 省略部分代码<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>可以看到，我们通过组件选项的 <code>__isTeleport</code> 标识来判断该组件是否是 Teleport 组件。如果是，则直接调用组件选项中定义的 <code>process</code> 函数将渲染控制权完全交接出去，这样就实现了渲染逻辑的分离。</p>\n<p>Teleport 组件的定义如下：</p>\n<pre class=\"code-rows\"><code> const Teleport = {\n   __isTeleport: true,\n   process(n1, n2, container, anchor) {\n     // 在这里处理渲染逻辑\n   }\n }\n</code></pre>\n<p>可以看到，Teleport 组件并非普通组件，它有特殊的选项 <code>__isTeleport</code> 和 <code>process</code>。</p>\n<p>接下来我们设计虚拟 DOM 的结构。假设用户编写的模板如下：</p>\n<pre class=\"code-rows\"><code> &lt;Teleport to=\"body\"&gt;\n   &lt;h1&gt;Title&lt;/h1&gt;\n   &lt;p&gt;content&lt;/p&gt;\n &lt;/Teleport&gt;\n</code></pre>\n<p>那么它应该被编译为怎样的虚拟 DOM 呢？虽然在用户看来 Teleport 是一个内建组件，但实际上，Teleport 是否拥有组件的性质是由框架本身决定的。通常，一个组件的子节点会被编译为插槽内容，不过对于 Teleport 组件来说，直接将其子节点编译为一个数组即可，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function render() {\n   return {\n     type: Teleport,\n     // 以普通 children 的形式代表被 Teleport 的内容\n     children: [\n       { type: 'h1', children: 'Title' },\n       { type: 'p', children: 'content' }\n     ]\n   }\n }\n</code></pre>\n<p>设计好虚拟 DOM 的结构后，我们就可以着手实现 Teleport 组件了。首先，我们来完成 Teleport 组件的挂载动作，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> const Teleport = {\n   __isTeleport: true,\n   process(n1, n2, container, anchor, internals) {\n     // 通过 internals 参数取得渲染器的内部方法\n     const { patch } = internals\n     // 如果旧 VNode n1 不存在，则是全新的挂载，否则执行更新\n     if (!n1) {\n       // 挂载\n       // 获取容器，即挂载点\n       const target = typeof n2.props.to === 'string'\n         ? document.querySelector(n2.props.to)\n         : n2.props.to\n       // 将 n2.children 渲染到指定挂载点即可\n       n2.children.forEach(c =&gt; patch(null, c, target, anchor))\n     } else {\n       // 更新\n     }\n   }\n }\n</code></pre>\n<p>可以看到，即使 Teleport 渲染逻辑被单独分离出来，它的渲染思路仍然与渲染器本身的渲染思路保持一致。通过判断旧的虚拟节点（<code>n1</code>）是否存在，来决定是执行挂载还是执行更新。如果要执行挂载，则需要根据 <code>props.to</code> 属性的值来取得真正的挂载点。最后，遍历 Teleport 组件的 <code>children</code> 属性，并逐一调用 <code>patch</code> 函数完成子节点的挂载。</p>\n<p>更新的处理更加简单，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> const Teleport = {\n   __isTeleport: true,\n   process(n1, n2, container, anchor, internals) {\n     const { patch, patchChildren } = internals\n     if (!n1) {\n       // 省略部分代码\n     } else {\n       // 更新\n       patchChildren(n1, n2, container)\n     }\n   }\n }\n</code></pre>\n<p>只需要调用 <code>patchChildren</code> 函数完成更新操作即可。不过有一点需要额外注意，更新操作可能是由于 Teleport 组件的 <code>to</code> 属性值的变化引起的，因此，在更新时我们应该考虑这种情况。具体的处理方式如下：</p>\n<pre class=\"code-rows\"><code> const Teleport = {\n   __isTeleport: true,\n   process(n1, n2, container, anchor, internals) {\n     const { patch, patchChildren, move } = internals\n     if (!n1) {\n       // 省略部分代码\n     } else {\n       // 更新\n       patchChildren(n1, n2, container)\n       // 如果新旧 to 参数的值不同，则需要对内容进行移动\n       if (n2.props.to !== n1.props.to) {\n         // 获取新的容器\n         const newTarget = typeof n2.props.to === 'string'\n           ? document.querySelector(n2.props.to)\n           : n2.props.to\n         // 移动到新的容器\n         n2.children.forEach(c =&gt; move(c, newTarget))\n       }\n     }\n   }\n }\n</code></pre>\n<p>用来执行移动操作的 <code>move</code> 函数的实现如下：</p>\n<pre class=\"code-rows\"><code> else if (typeof type === 'object' &amp;&amp; type.__isTeleport) {\n   type.process(n1, n2, container, anchor, {\n     patch,\n     patchChildren,\n     // 用来移动被 Teleport 的内容\n     move(vnode, container, anchor) {\n       insert(\n         vnode.component\n           ? vnode.component.subTree.el  // 移动一个组件\n           : vnode.el,  // 移动普通元素\n         container,\n         anchor\n        )\n     }\n   })\n }\n</code></pre>\n<p>在上面的代码中，我们只考虑了移动组件和普通元素。我们知道，虚拟节点的类型有很多种，例如文本类型（<code>Text</code>）、片段类型（<code>Fragment</code>）等。一个完善的实现应该考虑所有这些虚拟节点的类型。</p>\n<h2 id=\"nav_point_136\">14.3　Transition 组件的实现原理</h2>\n<p>通过对 KeepAlive 组件和 Teleport 组件的讲解，我们能够意识到，Vue.js 内建的组件通常与渲染器的核心逻辑结合得非常紧密。本节将要讨论的 Transition 组件也不例外，甚至它与渲染器的结合更加紧密。</p>\n<p>实际上，Transition 组件的实现比想象中简单得多，它的核心原理是：</p>\n<ul>\n<li>当 DOM 元素被挂载时，将动效附加到该 DOM 元素上；</li>\n<li>当 DOM 元素被卸载时，不要立即卸载 DOM 元素，而是等到附加到该 DOM 元素上的动效执行完成后再卸载它。</li>\n</ul>\n<p>当然，规则上主要遵循上述两个要素，但具体实现时要考虑的边界情况还有很多。不过，我们只要理解它的核心原理即可，至于细节，可以在基本实现的基础上按需添加或完善。</p>\n<h3 id=\"nav_point_137\">14.3.1　原生 DOM 的过渡</h3>\n<p>为了更好地理解 Transition 组件的实现原理，我们有必要先讨论如何为原生 DOM 创建过渡动效。过渡效果本质上是一个 DOM 元素在两种状态间的切换，浏览器会根据过渡效果自行完成 DOM 元素的过渡。这里的过渡效果指的是持续时长、运动曲线、要过渡的属性等。</p>\n<p>我们从一个例子开始。假设我们有一个 <code>div</code> 元素，宽高各 100px，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> &lt;div class=\"box\"&gt;&lt;/div&gt;\n</code></pre>\n<p>接着，为其添加对应的 CSS 样式：</p>\n<pre class=\"code-rows\"><code> .box {\n   width: 100px;\n   height: 100px;\n   background-color: red;\n }\n</code></pre>\n<p>现在，假设我们要为元素添加一个进场动效。我们可以这样描述该动效：从距离左边 200px 的位置在 1 秒内运动到距离左边 0px 的位置。在这句描述中，初始状态是“距离左边 200px”，因此我们可以用下面的样式来描述初始状态：</p>\n<pre class=\"code-rows\"><code> .enter-from {\n   transform: translateX(200px);\n }\n</code></pre>\n<p>而结束状态是“距离左边 0px”，也就是初始位置，可以用下面的 CSS 代码来描述：</p>\n<pre class=\"code-rows\"><code> .enter-to {\n   transform: translateX(0);\n }\n</code></pre>\n<p>初始状态和结束状态都已经描述完毕了。最后，我们还要描述运动过程，例如持续时长、运动曲线等。对此，我们可以用如下 CSS 代码来描述：</p>\n<pre class=\"code-rows\"><code> .enter-active {\n   transition: transform 1s ease-in-out;\n }\n</code></pre>\n<p>这里我们指定了运动的属性是 <code>transform</code>，持续时长为 <code>1s</code>，并且运动曲线是 <code>ease-in-out</code>。</p>\n<p>定义好了运动的初始状态、结束状态以及运动过程之后，接下来我们就可以为 DOM 元素添加进场动效了，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> // 创建 class 为 box 的 DOM 元素\n const el = document.createElement('div')\n el.classList.add('box')\n<p>// 在 DOM 元素被添加到页面之前，将初始状态和运动过程定义到元素上<br />\nel.classList.add(‘enter-from’)    // 初始状态<br />\nel.classList.add(‘enter-active’)  // 运动过程</p>\n<p>// 将元素添加到页面<br />\ndocument.body.appendChild(el)<br />\n</code></pre></p>\n<p>上面这段代码主要做了三件事：</p>\n<ul>\n<li>创建 DOM 元素；</li>\n<li>将过渡的初始状态和运动过程定义到元素上，即把 <code>enter-from</code>、<code>enter-active</code> 这两个类添加到元素上；</li>\n<li>将元素添加到页面，即挂载。</li>\n</ul>\n<p>经过这三个步骤之后，元素的初始状态会生效，页面渲染的时候会将 DOM 元素以初始状态所定义的样式进行展示。接下来我们需要切换元素的状态，使得元素开始运动。那么，应该怎么做呢？理论上，我们只需要将 <code>enter-from</code> 类从 DOM 元素上移除，并将 <code>enter-to</code> 这个类添加到 DOM 元素上即可，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> // 创建 class 为 box 的 DOM 元素\n const el = document.createElement('div')\n el.classList.add('box')\n<p>// 在 DOM 元素被添加到页面之前，将初始状态和运动过程定义到元素上<br />\nel.classList.add(‘enter-from’)    // 初始状态<br />\nel.classList.add(‘enter-active’)  // 运动过程</p>\n<p>// 将元素添加到页面<br />\ndocument.body.appendChild(el)</p>\n<p>// 切换元素的状态<br />\nel.classList.remove(‘enter-from’)  // 移除 enter-from<br />\nel.classList.add(‘enter-to’)       // 添加 enter-to<br />\n</code></pre></p>\n<p>然而，上面这段代码无法按预期执行。这是因为浏览器会在当前帧绘制 DOM 元素，最终结果是，浏览器将 <code>enter-to</code> 这个类所具有的样式绘制出来，而不会绘制 <code>enter-from</code> 类所具有的样式。为了解决这个问题，我们需要在下一帧执行状态切换，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> // 创建 class 为 box 的 DOM 元素\n const el = document.createElement('div')\n el.classList.add('box')\n<p>// 在 DOM 元素被添加到页面之前，将初始状态和运动过程定义到元素上<br />\nel.classList.add(‘enter-from’)    // 初始状态<br />\nel.classList.add(‘enter-active’)  // 运动过程</p>\n<p>// 将元素添加到页面<br />\ndocument.body.appendChild(el)</p>\n<p>// 在下一帧切换元素的状态<br />\nrequestAnimationFrame(() =&gt; {<br />\nel.classList.remove(‘enter-from’)  // 移除 enter-from<br />\nel.classList.add(‘enter-to’)       // 添加 enter-to<br />\n})<br />\n</code></pre></p>\n<p>可以看到，我们使用 <code>requestAnimationFrame</code> 注册了一个回调函数，该回调函数理论上会在下一帧执行。这样，浏览器就会在当前帧绘制元素的初始状态，然后在下一帧切换元素的状态，从而使得过渡生效。但如果你尝试在 Chrome 或 Safari 浏览器中运行上面这段代码，会发现过渡仍未生效，这是为什么呢？实际上，这是浏览器的实现 bug 所致。该 bug 的具体描述参见 Issue 675795: Interop: mismatch in when animations are started between different browsers。其大意是，使用 <code>requestAnimationFrame</code> 函数注册回调会在当前帧执行，除非其他代码已经调用了一次 <code>requestAnimationFrame</code> 函数。这明显是不正确的，因此我们需要一个变通方案，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> // 创建 class 为 box 的 DOM 元素\n const el = document.createElement('div')\n el.classList.add('box')\n<p>// 在 DOM 元素被添加到页面之前，将初始状态和运动过程定义到元素上<br />\nel.classList.add(‘enter-from’)    // 初始状态<br />\nel.classList.add(‘enter-active’)  // 运动过程</p>\n<p>// 将元素添加到页面<br />\ndocument.body.appendChild(el)</p>\n<p>// 嵌套调用 requestAnimationFrame<br />\nrequestAnimationFrame(() =&gt; {<br />\nrequestAnimationFrame(() =&gt; {<br />\nel.classList.remove(‘enter-from’)  // 移除 enter-from<br />\nel.classList.add(‘enter-to’)       // 添加 enter-to<br />\n})<br />\n})<br />\n</code></pre></p>\n<p>通过嵌套一层 <code>requestAnimationFrame</code> 函数的调用即可解决上述问题。现在，如果你再次尝试在浏览器中运行代码，会发现进场动效能够正常显示了。</p>\n<p>最后我们需要做的是，当过渡完成后，将 <code>enter-to</code> 和 <code>enter-active</code> 这两个类从 DOM 元素上移除，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> // 创建 class 为 box 的 DOM 元素\n const el = document.createElement('div')\n el.classList.add('box')\n<p>// 在 DOM 元素被添加到页面之前，将初始状态和运动过程定义到元素上<br />\nel.classList.add(‘enter-from’)    // 初始状态<br />\nel.classList.add(‘enter-active’)  // 运动过程</p>\n<p>// 将元素添加到页面<br />\ndocument.body.appendChild(el)</p>\n<p>// 嵌套调用 requestAnimationFrame<br />\nrequestAnimationFrame(() =&gt; {<br />\nrequestAnimationFrame(() =&gt; {<br />\nel.classList.remove(‘enter-from’)  // 移除 enter-from<br />\nel.classList.add(‘enter-to’)       // 添加 enter-to</p>\n<pre><code> // 监听 transitionend 事件完成收尾工作\n el.addEventListener('transitionend', () =&amp;gt; {\n   el.classList.remove('enter-to')\n   el.classList.remove('enter-active')\n })\n</code></pre>\n<p>})<br />\n})<br />\n</code></pre></p>\n<p>通过监听元素的 <code>transitionend</code> 事件来完成收尾工作。实际上，我们可以对上述为 DOM 元素添加进场过渡的过程进行抽象，如图 14-2 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100005/image00609.jpeg\" alt=\"\" width=\"90%\" style=\"width: 90%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 14-2　对进场过渡过程的抽象</strong></p>\n<p>从创建 DOM 元素完成后，到把 DOM 元素添加到 <code>body</code> 前，整个过程可以视作 <code>beforeEnter</code> 阶段。在把 DOM 元素添加到 <code>body</code> 之后，则可以视作 <code>enter</code> 阶段。在不同的阶段执行不同的操作，即可完成整个进场过渡的实现。</p>\n<ul>\n<li><code>beforeEnter</code> 阶段：添加 <code>enter-from</code> 和 <code>enter-active</code> 类。</li>\n<li><code>enter</code> 阶段：在下一帧中移除 <code>enter-from</code> 类，添加 <code>enter-to</code>。</li>\n<li>进场动效结束：移除 <code>enter-to</code> 和 <code>enter-active</code> 类。</li>\n</ul>\n<p>理解了进场过渡的实现原理后，接下来我们讨论 DOM 元素的离场过渡效果。与进场过渡一样，我们需要定义离场过渡的初始状态、结束状态以及过渡过程，如下面的 CSS 代码所示：</p>\n<pre class=\"code-rows\"><code> /* 初始状态 */\n .leave-from {\n   transform: translateX(0);\n }\n /* 结束状态 */\n .leave-to {\n   transform: translateX(200px);\n }\n /* 过渡过程 */\n .leave-active {\n   transition: transform 2s ease-out;\n }\n</code></pre>\n<p>可以看到，离场过渡的初始状态与结束状态正好对应进场过渡的结束状态与初始状态。当然，我们完全可以打破这种对应关系，你可以采用任意过渡效果。</p>\n<p>离场动效一般发生在 DOM 元素被卸载的时候，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> // 卸载元素\n el.addEventListener('click', () =&gt; {\n   el.parentNode.removeChild(el)\n })\n</code></pre>\n<p>当点击元素的时候，该元素会被移除，这样就实现了卸载。然而，从代码中可以看出，元素被点击的瞬间就会被卸载，所以如果仅仅这样做，元素根本就没有执行过渡的机会。因此，一个很自然的思路就产生了：当元素被卸载时，不要将其立即卸载，而是等待过渡效果结束后再卸载它。为了实现这个目标，我们需要把用于卸载 DOM 元素的代码封装到一个函数中，该函数会等待过渡结束后被调用，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> el.addEventListener('click', () =&gt; {\n   // 将卸载动作封装到 performRemove 函数中\n   const performRemove = () =&gt; el.parentNode.removeChild(el)\n })\n</code></pre>\n<p>在上面这段代码中，我们将卸载动作封装到 <code>performRemove</code> 函数中，这个函数会等待过渡效果结束后再执行。</p>\n<p>具体的离场动效的实现如下：</p>\n<pre class=\"code-rows\"><code> el.addEventListener('click', () =&gt; {\n   // 将卸载动作封装到 performRemove 函数中\n   const performRemove = () =&gt; el.parentNode.removeChild(el)\n<p>// 设置初始状态：添加 leave-from 和 leave-active 类<br />\nel.classList.add(‘leave-from’)<br />\nel.classList.add(‘leave-active’)</p>\n<p>// 强制 reflow：使初始状态生效<br />\ndocument.body.offsetHeight</p>\n<p>// 在下一帧切换状态<br />\nrequestAnimationFrame(() =&gt; {<br />\nrequestAnimationFrame(() =&gt; {<br />\n// 切换到结束状态<br />\nel.classList.remove(‘leave-from’)<br />\nel.classList.add(‘leave-to’)</p>\n<pre><code>   // 监听 transitionend 事件做收尾工作\n   el.addEventListener('transitionend', () =&amp;gt; {\n     el.classList.remove('leave-to')\n     el.classList.remove('leave-active')\n     // 当过渡完成后，记得调用 performRemove 函数将 DOM 元素移除\n     performRemove()\n   })\n })\n</code></pre>\n<p>})<br />\n})<br />\n</code></pre></p>\n<p>从上面这段代码中可以看到，离场过渡的处理与进场过渡的处理方式非常相似，即首先设置初始状态，然后在下一帧中切换为结束状态，从而使得过渡生效。需要注意的是，当离场过渡完成之后，需要执行 <code>performRemove</code> 函数来真正地将 DOM 元素卸载。</p>\n<h3 id=\"nav_point_138\">14.3.2　实现 Transition 组件</h3>\n<p>Transition 组件的实现原理与 14.3.1 节介绍的原生 DOM 的过渡原理一样。只不过，Transition 组件是基于虚拟 DOM 实现的。在 14.3.1 节中，我们在为原生 DOM 元素创建进场动效和离场动效时能注意到，整个过渡过程可以抽象为几个阶段，这些阶段可以抽象为特定的回调函数。例如 <code>beforeEnter</code>、<code>enter</code>、<code>leave</code> 等。实际上，基于虚拟 DOM 的实现也需要将 DOM 元素的生命周期分割为这样几个阶段，并在特定阶段执行对应的回调函数。</p>\n<p>为了实现 Transition 组件，我们需要先设计它在虚拟 DOM 层面的表现形式。假设组件的模板内容如下：</p>\n<pre class=\"code-rows\"><code> &lt;template&gt;\n   &lt;Transition&gt;\n     &lt;div&gt;我是需要过渡的元素&lt;/div&gt;\n   &lt;/Transition&gt;\n &lt;/template&gt;\n</code></pre>\n<p>我们可以将这段模板被编译后的虚拟 DOM 设计为：</p>\n<pre class=\"code-rows\"><code> function render() {\n   return {\n     type: Transition,\n     children: {\n       default() {\n         return { type: 'div', children: '我是需要过渡的元素' }\n       }\n     }\n   }\n }\n</code></pre>\n<p>可以看到，Transition 组件的子节点被编译为默认插槽，这与普通组件的行为一致。虚拟 DOM 层面的表示已经设计完了，接下来，我们着手实现 Transition 组件，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> const Transition = {\n   name: 'Transition',\n   setup(props, { slots }) {\n     return () =&gt; {\n       // 通过默认插槽获取需要过渡的元素\n       const innerVNode = slots.default()\n<pre><code>   // 在过渡元素的 VNode 对象上添加 transition 相应的钩子函数\n   innerVNode.transition = {\n     beforeEnter(el) {\n       // 省略部分代码\n     },\n     enter(el) {\n       // 省略部分代码\n     },\n     leave(el, performRemove) {\n       // 省略部分代码\n     }\n   }\n\n   // 渲染需要过渡的元素\n   return innerVNode\n }\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>观察上面的代码，可以发现几点重要信息：</p>\n<ul>\n<li>Transition 组件本身不会渲染任何额外的内容，它只是通过默认插槽读取过渡元素，并渲染需要过渡的元素；</li>\n<li>Transition 组件的作用，就是在过渡元素的虚拟节点上添加 <code>transition</code> 相关的钩子函数。</li>\n</ul>\n<p>可以看到，经过 Transition 组件的包装后，内部需要过渡的虚拟节点对象会被添加一个 <code>vnode.transition</code> 对象。这个对象下存在一些与 DOM 元素过渡相关的钩子函数，例如 <code>beforeEnter</code>、<code>enter</code>、<code>leave</code> 等。这些钩子函数与我们在 14.3.1 节中介绍的钩子函数相同，渲染器在渲染需要过渡的虚拟节点时，会在合适的时机调用附加到该虚拟节点上的过渡相关的生命周期钩子函数，具体体现在 <code>mountElement</code> 函数以及 <code>unmount</code> 函数中，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function mountElement(vnode, container, anchor) {\n   const el = vnode.el = createElement(vnode.type)\n<p>if (typeof vnode.children === ‘string’) {<br />\nsetElementText(el, vnode.children)<br />\n} else if (Array.isArray(vnode.children)) {<br />\nvnode.children.forEach(child =&gt; {<br />\npatch(null, child, el)<br />\n})<br />\n}</p>\n<p>if (vnode.props) {<br />\nfor (const key in vnode.props) {<br />\npatchProps(el, key, null, vnode.props[key])<br />\n}<br />\n}</p>\n<p>// 判断一个 VNode 是否需要过渡<br />\nconst needTransition = vnode.transition<br />\nif (needTransition) {<br />\n// 调用 transition.beforeEnter 钩子，并将 DOM 元素作为参数传递<br />\nvnode.transition.beforeEnter(el)<br />\n}</p>\n<p>insert(el, container, anchor)<br />\nif (needTransition) {<br />\n// 调用 transition.enter 钩子，并将 DOM 元素作为参数传递<br />\nvnode.transition.enter(el)<br />\n}<br />\n}<br />\n</code></pre></p>\n<p>上面这段代码是修改后的 <code>mountElement</code> 函数，我们为它增加了 <code>transition</code> 钩子的处理。可以看到，在挂载 DOM 元素之前，会调用 <code>transition.beforeEnter</code> 钩子；在挂载元素之后，会调用 <code>transition.enter</code> 钩子，并且这两个钩子函数都接收需要过渡的 DOM 元素对象作为第一个参数。除了挂载之外，卸载元素时我们也应该调用 <code>transition.leave</code> 钩子函数，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> function unmount(vnode) {\n   // 判断 VNode 是否需要过渡处理\n   const needTransition = vnode.transition\n   if (vnode.type === Fragment) {\n     vnode.children.forEach(c =&gt; unmount(c))\n     return\n   } else if (typeof vnode.type === 'object') {\n     if (vnode.shouldKeepAlive) {\n       vnode.keepAliveInstance._deActivate(vnode)\n     } else {\n       unmount(vnode.component.subTree)\n     }\n     return\n   }\n   const parent = vnode.el.parentNode\n   if (parent) {\n     // 将卸载动作封装到 performRemove 函数中\n     const performRemove = () =&gt; parent.removeChild(vnode.el)\n     if (needTransition) {\n       // 如果需要过渡处理，则调用 transition.leave 钩子，\n       // 同时将 DOM 元素和 performRemove 函数作为参数传递\n       vnode.transition.leave(vnode.el, performRemove)\n     } else {\n       // 如果不需要过渡处理，则直接执行卸载操作\n       performRemove()\n     }\n   }\n }\n</code></pre>\n<p>上面这段代码是修改后的 <code>unmount</code> 函数的实现，我们同样为其增加了关于过渡的处理。首先，需要将卸载动作封装到 <code>performRemove</code> 函数内。如果 DOM 元素需要过渡处理，那么就需要等待过渡结束后再执行 <code>performRemove</code> 函数完成卸载，否则直接调用该函数完成卸载即可。</p>\n<p>有了 <code>mountElement</code> 函数和 <code>unmount</code> 函数的支持后，我们可以轻松地实现一个最基本的 <code>Transition</code> 组件了，如下面的代码所示：</p>\n<pre class=\"code-rows\"><code> const Transition = {\n   name: 'Transition',\n   setup(props, { slots }) {\n     return () =&gt; {\n       const innerVNode = slots.default()\n<pre><code>   innerVNode.transition = {\n     beforeEnter(el) {\n       // 设置初始状态：添加 enter-from 和 enter-active 类\n       el.classList.add('enter-from')\n       el.classList.add('enter-active')\n     },\n     enter(el) {\n       // 在下一帧切换到结束状态\n       nextFrame(() =&amp;gt; {\n         // 移除 enter-from 类，添加 enter-to 类\n         el.classList.remove('enter-from')\n         el.classList.add('enter-to')\n         // 监听 transitionend 事件完成收尾工作\n         el.addEventListener('transitionend', () =&amp;gt; {\n           el.classList.remove('enter-to')\n           el.classList.remove('enter-active')\n         })\n       })\n     },\n     leave(el, performRemove) {\n       // 设置离场过渡的初始状态：添加 leave-from 和 leave-active 类\n       el.classList.add('leave-from')\n       el.classList.add('leave-active')\n       // 强制 reflow，使得初始状态生效\n       document.body.offsetHeight\n       // 在下一帧修改状态\n       nextFrame(() =&amp;gt; {\n         // 移除 leave-from 类，添加 leave-to 类\n         el.classList.remove('leave-from')\n         el.classList.add('leave-to')\n\n         // 监听 transitionend 事件完成收尾工作\n         el.addEventListener('transitionend', () =&amp;gt; {\n           el.classList.remove('leave-to')\n           el.classList.remove('leave-active')\n           // 调用 transition.leave 钩子函数的第二个参数，完成 DOM 元素的卸载\n           performRemove()\n         })\n       })\n     }\n   }\n\n   return innerVNode\n }\n</code></pre>\n<p>}<br />\n}<br />\n</code></pre></p>\n<p>在上面这段代码中，我们补全了 <code>vnode.transition</code> 中各个钩子函数的具体实现。可以看到，其实现思路与我们在 14.3.1 节中讨论的关于原生 DOM 过渡的思路一样。</p>\n<p>在上面的实现中，我们硬编码了过渡状态的类名，例如 <code>enter-from</code>、<code>enter-to</code> 等。实际上，我们可以轻松地通过 <code>props</code> 来实现允许用户自定义类名的能力，从而实现一个更加灵活的 Transition 组件。另外，我们也没有实现“模式”的概念，即先进后出（<code>in-out</code>）或后进先出（<code>out-in</code>）。实际上，模式的概念只是增加了对节点过渡时机的控制，原理上与将卸载动作封装到 <code>performRemove</code> 函数中一样，只需要在具体的时机以回调的形式将控制权交接出去即可。</p>\n<h2 id=\"nav_point_139\">14.4　总结</h2>\n<p>在本章中，我们介绍了 Vue.js 内建的三个组件，即 KeepAlive 组件、Teleport 组件和 Transition 组件。它们的共同特点是，与渲染器的结合非常紧密，因此需要框架提供底层的实现与支持。</p>\n<p>KeepAlive 组件的作用类似于 HTTP 中的持久链接。它可以避免组件实例不断地被销毁和重建。KeepAlive 的基本实现并不复杂。当被 KeepAlive 的组件“卸载”时，渲染器并不会真的将其卸载掉，而是会将该组件搬运到一个隐藏容器中，从而使得组件可以维持当前状态。当被 KeepAlive 的组件“挂载”时，渲染器也不会真的挂载它，而是将它从隐藏容器搬运到原容器。</p>\n<p>我们还讨论了 KeepAlive 的其他能力，如匹配策略和缓存策略。<code>include</code> 和 <code>exclude</code> 这两个选项用来指定哪些组件需要被 KeepAlive，哪些组件不需要被 KeepAlive。默认情况下，<code>include</code> 和 <code>exclude</code> 会匹配组件的 <code>name</code> 选项。但是在具体实现中，我们可以扩展匹配能力。对于缓存策略，Vue.js 默认采用“最新一次访问”。为了让用户能自行实现缓存策略，我们还介绍了正在讨论中的提案。</p>\n<p>接着，我们讨论了 Teleport 组件所要解决的问题和它的实现原理。Teleport 组件可以跨越 DOM 层级完成渲染，这在很多场景下非常有用。在实现 Teleport 时，我们将 Teleport 组件的渲染逻辑从渲染器中分离出来，这么做有两点好处：</p>\n<ul>\n<li>可以避免渲染器逻辑代码“膨胀”；</li>\n<li>可以利用 Tree-Shaking 机制在最终的 bundle 中删除 Teleport 相关的代码，使得最终构建包的体积变小。</li>\n</ul>\n<p>Teleport 组件是一个特殊的组件。与普通组件相比，它的组件选项非常特殊，例如 <code>__isTeleport</code> 选型和 <code>process</code> 选项等。这是因为 Teleport 本质上是渲染器逻辑的合理抽象，它完全可以作为渲染器的一部分而存在。</p>\n<p>最后，我们讨论了 Transition 组件的原理与实现。我们从原生 DOM 过渡开始，讲解了如何使用 JavaScript 为 DOM 元素添加进场动效和离场动效。在此过程中，我们将实现动效的过程分为多个阶段，即 <code>beforeEnter</code>、<code>enter</code>、<code>leave</code> 等。Transition 组件的实现原理与为原生 DOM 添加过渡效果的原理类似，我们将过渡相关的钩子函数定义到虚拟节点的 <code>vnode.transition</code> 对象中。渲染器在执行挂载和卸载操作时，会优先检查该虚拟节点是否需要进行过渡，如果需要，则会在合适的时机执行 <code>vnode.transition</code> 对象中定义的过渡相关钩子函数。</p>\n<br style=\"page-break-after:always\" />","neighbors":{"left":{"article_title":"第 13 章 异步组件与函数式组件","id":740776},"right":{"article_title":"第 15 章 编译器核心技术概览(1)","id":740778}},"comments":[]}