{"id":184356,"title":"08丨案例： 手把手教你编写最简单的性能脚本","content":"<p>通常我们会遇到要手写脚本的时候，就要针对一些接口编写脚本。这时候，我们需要知道接口规范和后台的数据是什么。而有些性能测试工程师写脚本时，并不知道后端的逻辑，只知道实现脚本，事实上，只知道实现脚本是远远不够的。</p><p>在这一篇文章中，我不打算讲复杂的内容，只想针对新手写一步步的操作，描述最简单的脚本编写。如果你已经具有丰富的脚本编写经验，会觉得本文很简单。</p><p>我没有打算把JMeter的功能点一一罗列出来，作为一个性能测试的专栏，不写一下脚本的实现似乎不像个样子。在脚本实现中，我们最常用的协议就是HTTP和TCP了吧，所以在今天的内容里，我简单地说一下如何编写HTTP和TCP脚本，以应测试主题。</p><p>我先画个图说明一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/e6/c99990fb1cfce0410b6bb2be24107be6.jpg?wh=1355*1331\" alt=\"\"></p><p>这样的图做性能的人一定要知道，相信很多人也画的出来。</p><p>我们知道HTTP是应用层的协议之一，现在很多场景都在用它，并且是用的HTTP1.1的版本，对应的是RFC2616，当然还有补充协议RFC7231、6265。</p><p>HTTP中只规定了传输的规则，\b规定了请求、响应、连接、方法、状态定义等。我们写脚本的时候，必须符合这些规则。比如为什么要在脚本中定义个Header？Header里为什么要那样写？这些在RFC中都说得明明白白了。</p><!-- [[[read_end]]] --><p>还有一点也需要注意，HTTP是通过Socket来使用TCP的，Socket做为套接层API，它本身不是协议，只规定了API。</p><p>而我们通常在JMeter中写TCP脚本，就是直接调用Socket层的API。TCP脚本和HTTP脚本最大的区别就是，TCP脚本中发送和接收的内容完全取决于Socket server是怎么处理的，并没有通用的规则。所以脚本中也就只有根据具体的项目来发挥了。</p><h2>手工编写HTTP脚本</h2><h3>服务端代码逻辑说明</h3><p>我们先自己编写一小段服务端代码的逻辑。现在用Spring Boot写一个示例，其实就是分分钟的事情。我们做性能测试的人至少要知道访问的是什么东西。</p><p>Controller关键代码如下：</p><pre><code>@RestController\n@RequestMapping(value = &quot;pa&quot;)\npublic class PAController {\n\n  @Autowired\n  private PAService paService;\n\n  //查询\n  @GetMapping(&quot;/query/{id}&quot;)\n  public ResultVO&lt;User&gt; getById(@PathVariable(&quot;id&quot;) String id) {\n    User user = paService.getById(id);\n    return ResultVO.&lt;User&gt;builder().success(user).build();\n  }\n}\n</code></pre><p>Service关键代码如下：</p><pre><code>  public User getById(String id) {\n    return mapper.selectByPrimaryKey(id);\n  }\n</code></pre><p>用MyBatis组件实现对Mapper的操作。由于不是基础开发教程，这里只是为了说明逻辑，如果你感兴趣的话，可以自己编写一个接口示例。</p><p>逻辑调用关系如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/5a/42/5a41a086e7756bc2bdb2dc834bd4b942.jpg?wh=3114*798\" alt=\"\"></p><p>数据库中表的信息如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/be/ebdadf0672b21c631f7fc6af41eaefbe.png?wh=764*57\" alt=\"\"></p><p>我们先看这个接口的访问逻辑：JMeter——SprintBoot的应用——MySQL。</p><h2>1.编写JMeter脚本</h2><h3>1.1 创建线程组</h3><p>首先创建一个线程组，配置如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/88/0d/8803e67574df9a393ab4a3f135052e0d.png?wh=1361*443\" alt=\"\"></p><p>在这个线程组中，有几个关键配置，我来一一说明一下。</p><p>Number of Threads(users)：我们都知道这是JMeter中的线程数，也可以称之为用户数。但是在<a href=\"https://time.geekbang.org/column/article/178076\">第2篇文章</a>中，我已经说得非常明确了，这个线程数是产生TPS的，而一个线程产生多少TPS，取决于系统的响应时间有多快。所以我们用TPS这个概念来承载系统的负载能力，而不是用这里的线程数。</p><p>Ramp-up Period(in seconds)：递增时间，以秒为单位。指的就是上面配置的线程数将在多长时间内会全部递增完。如果我们配置了100线程，这里配置为10秒，那么就是100/(10s*1000ms)=1线程/100ms；如果我们配置了10线程，这里配置为1秒，则是10/1000=1线程/100ms。这时我们要注意了哦，在10线程启动的这个阶段中，对服务器的压力是一样的。示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/e4/67/e42a668bbdf2d80968af233dea816267.png?wh=1609*527\" alt=\"\"></p><p>Loop Count这个值指的是一个线程中脚本迭代的次数。这里你需要注意，这个值和后面的Scheduler有一个判断关系，下面我们会提到。</p><p>Delay Thread creation until needed：这个含义从字面看不是特别清楚。这里有一个默认的知识点，那就是JMeter所有的线程是一开始就创建完成的，只是递增的时候会按照上面的规则递增。如果选择了这个选项，则不会在一开始创建所有线程，只有在需要时才会创建。这一点和LoadRunner中的初始化选项类似。只是不知道你有没有注意过，基本上，我们做性能测试的工程师，很少有选择这个选项的。选与不选之间，区别到底是什么呢？</p><p>如果不选择，在启动场景时，JMeter会用更多的CPU来创建线程，它会影响前面的一些请求的响应时间，因为压力机的CPU在做其他事情嘛。</p><p>如果选择了的话，就会在使用时再创建，CPU消耗会平均一些，但是这时会有另一个隐患，就是会稍微影响正在跑的线程。这个选项，选择与否，取决于压力机在执行过程中，它能产生多大的影响。如果你的线程数很多，一旦启动，压力机的CPU都被消耗在创建线程上了，那就可以考虑选择它，否则，可以不选择。</p><p>Scheduler Configuration：这里有一句重要的话，<code>If Loop Count is not -1 or Forever, duration will be min(Duration, Loop Count * iteration duration)</code>。举例来说，如果设置了Loop Count 为100，而响应时间是0.1秒，那么Loop <code>Count * iteration duration(这个就是响应时间) = 100 * 0.1 = 10秒</code>。</p><p>即便设置了Scheduler的Duration为100秒，线程仍然会以10秒为结束点。</p><p>如果没有设置Scheduler的Duration，那么你会看到，在JMeter运行到10秒时，控制台中会出现如下信息：</p><pre><code>  2019-11-26 10:39:20,521 INFO o.a.j.t.JMeterThread: Thread finished: Thread Group 1-10\n</code></pre><p>有些人不太理解这一点，经常会设置迭代次数，同时又设置Scheduler中的Duration。而对TPS来说，就会产生这样的图：</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/16/5e341022b296dbda9b75ec504ab80e16.png?wh=839*462\" alt=\"\"></p><p>场景没执行完，结果TPS全掉下去了，于是开始查后端系统，其实和后端没有任何关系。</p><h3>1.2 创建HTTP Sampler</h3><h3>1.2.1 GET接口</h3><p><img src=\"https://static001.geekbang.org/resource/image/e5/9b/e550be089497bdbec158d906481ae99b.png?wh=1350*345\" alt=\"\"></p><p>看上图，我将Method选择为GET。为什么要选择它？往上看我们的接口注解，这是一个GetMapping，所以这里要选择GET。</p><p>再看path中，这里是<code>/pa/query/0808050c-0ae0-11ea-af5f-00163e124cff</code>，对应着<code>“/query/{id}”</code>。</p><p>然后执行：</p><pre><code>User user = paService.getById(id);\n</code></pre><p>返回执行结果：</p><pre><code>return ResultVO.&lt;User&gt;builder().success(user).build();\n</code></pre><p>为什么要解释这一段呢？</p><p>做开发的人可能会觉得，你这个解释毫无意义呀，代码里已经写得很清楚了。事实上，在我的工作经历中，会发现很多做性能测试脚本的，实际上并不知道后端采用了什么样的技术，实现的是什么样的逻辑。</p><p>所以还是希望你可以自己写一些demo，去了解一些逻辑，然后在排除问题的时候，就非常清楚了。</p><p>接着我们执行脚本，就得到了如下结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/08/c7/08896d4bb8e30b957bf14ae486197ac7.png?wh=979*181\" alt=\"\"></p><p>这样一个最简单的GET脚本就做好了。</p><p>前面我们提到过，URL中的ID是0808050c-0ae0-11ea-af5f-00163e124cff，这个数据来自于数据库中的第一条。</p><p>如果我们随便写一个数据，会得到什么结果呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/3d/55/3d9a128860fc71bdc0132ce0b8350155.png?wh=525*148\" alt=\"\"></p><p>你会看到，结果一样得到了200的code，但是这个结果明显就不对了，明明没有查到，还是返回了成功。</p><p>所以说，业务的成功，只能靠业务来判断。这里只是查询成功了，没返回数据也是查询成功了。我将在后面给你说明如何加断言。</p><h3>1.2.2 POST接口</h3><p>下面我将Method改为POST，POST接口与GET接口的区别有这么几处：</p><ol>\n<li>要把Path改为/pa/add；</li>\n<li>输入JSON格式的Body Data。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/70/1d/7005421905a969c081be038f7ab5541d.png?wh=1346*487\" alt=\"\"></p><p>执行起来，查看下结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/87/d006b04df0746c5de5a122e8036a1487.png?wh=972*160\" alt=\"\"><br>\n你会发现上来就错了，提示如下：</p><pre><code>&quot;status&quot;:415,&quot;error&quot;:&quot;Unsupported Media Type&quot;,&quot;message&quot;:&quot;Content type 'text/plain;charset=UTF-8' not supported&quot;\n</code></pre><p>这里你需要注意，无论遇到什么问题，都要针对问题来处理。当看不懂问题信息时，先查资料，想办法看懂。这是处理问题的关键，我发现很多做性能测试的新同学，一旦碰到问题就懵了，晕头转向地瞎尝试。</p><p>我经常对我的团队成员说，先看懂问题，再处理问题，别瞎蒙！</p><p>上面这个问题其实提示得很清楚：“不支持的媒体类型”。这里就两个信息，一个是Content type，一个是charset。它们是JMeter中HTTP  Header里默认自带的。我们要发送的是JSON数据，而JMeter默认是把它当成text发出去的，这就出现了问题。所以我们要加一个Header，将Content type指定为JSON。</p><p>加一个HTTP Header，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/25/4c/25c8208ec31c22c07fc3a5dfd3b77b4c.png?wh=1348*209\" alt=\"\"></p><p>如果你不知道加什么样的Header，建议你用HTTP抓包工具抓一个看一看，比如说用Charles，抓到如下信息：</p><p><img src=\"https://static001.geekbang.org/resource/image/b0/57/b02a63bf056052304d1d9969a2556157.png?wh=418*151\" alt=\"\"></p><p>这时你就会知道头里的Content-Type原来是<code>application/json;charset=UTF-8</code>。这里的charset=UTF-8可以不用写，因为它和默认的一样。</p><p>这时再回放，你就会看到如下结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/19/e399b507bfb2af2996f1186c0d27e419.png?wh=541*121\" alt=\"\"></p><p>到此，一个POST脚本就完成了。是不是很简单。</p><p>在这里，我需要跟你强调的是，手工编写HTTP脚本时，要注意以下几点：</p><ol>\n<li>要知道请求的类型，我们选择的类型和后端接口的实现类型要是一致的。</li>\n<li>业务的成功要有明确的业务判断（在下面的TCP中，我们再加断言来判断）。</li>\n<li>判断问题时，请求的逻辑路径要清晰。</li>\n</ol><p>编写完HTTP脚本时，我们再来看一下如何编写TCP脚本。</p><h2>手工编写TCP脚本</h2><h3>服务端代码逻辑说明</h3><p>我在这里写一个非常简单的服务端接收线程（如果你是开发，不要笑话，我只是为了说明脚本怎么写）。</p><pre><code>package demo.socket;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class SocketReceiver {\n  //定义初始\n  public static final int corePoolSize = 5;\n  //定义最大线程池\n  public static final int maximumPoolSize = 5;\n  //定义socket队列长度\n  public static final int blockingQueue = 50;\n\n\n  /**\n   * 初始化并启动服务\n   */\n  public void init() {\n    //定义线程池\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(corePoolSize, maximumPoolSize, 0L,\n        TimeUnit.MILLISECONDS, new ArrayBlockingQueue(blockingQueue));\n    //定义serverSocket\n    ServerSocket serverSocket = null;\n    try {\n      //启动serverSocket\n      serverSocket = new ServerSocket(Constants.PORT);\n      //输出服务启动地址\n      System.out.println(&quot;服务已启动:&quot; + serverSocket.getLocalSocketAddress().toString());\n      //接收信息并传递给线程池\n      while (true) {\n        Socket socket = serverSocket.accept();\n        executor.submit(new Handler(socket));\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      if (serverSocket != null) {\n        try {\n          serverSocket.close(); //释放serverSocket\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n  //处理请求类\n  class Handler implements Runnable {\n\n    private Socket socket;\n\n    public Handler(Socket socket) {\n      this.socket = socket;\n    }\n\n    public void run() {\n      try {\n        // 接收客户端的信息\n        InputStream in = socket.getInputStream();\n        int count = 0;\n        while (count == 0) {\n          count = in.available();\n        }\n        byte[] b = new byte[count];\n        in.read(b);\n        String message = new String(b);\n        System.out.println(&quot; receive request: &quot; + socket.getInetAddress() + &quot; &quot; + message);\n\n        // 睡2秒模拟思考时间，这里是为了模拟服务器端的业务处理时间\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n\n        // 向客户端发送确认消息\n        //定义输出流outer\n        OutputStream outer = socket.getOutputStream();\n        //将客户端发送的信息加上确认信息ok\n        String response = message + &quot; is OK&quot;;\n        //将输入信息保存到b_out中\n        byte[] b_out = response.getBytes();\n        //写入输入流\n        outer.write(b_out);\n        //推送输入流到客户端\n        outer.flush();\n\n      } catch (IOException e) {\n        e.printStackTrace();\n      } finally {\n        // 关闭socket\n        try {\n          socket.close();\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n  //程序入口\n  public static void main(String[] args) {\n    //定义服务端\n    SocketReceiver receiver = new SocketReceiver();\n    //启动服务端\n    receiver.init();\n  }\n}\n</code></pre><h3>编写JMeter脚本</h3><p>首先创建TCP Sampler。右键点击Thread Group - Add - Sampler - TCP Sampler即可创建。</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/b4/a2d7a5f2b0271416f54070d42719d6b4.png?wh=792*633\" alt=\"\"></p><p>输入配置和要发送的信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/b0/b6c6435fe31916d27e3934a911d781b0.png?wh=1338*477\" alt=\"\"></p><p>IP地址和端口是必须要输入的。对于创建一个TCP协议的JMeter脚本来说，简单地说，过程就是这样的：创建连接 - 发数据 - 关闭连接。</p><p>就这样，这个手工的脚本就完成了。</p><p>你可能会问，就这么简单吗？是的，手工编写就是这么简单。</p><p>但是（对嘛，但是才是重点），通常我们在创建TCP协议的脚本时，都是根据业务接口规范来说的，<strong>复杂点其实不在脚本本身上，而是在接口的规则上</strong>。</p><h3>添加断言</h3><p>我回放了一下脚本，发现如下情况：</p><p><img src=\"https://static001.geekbang.org/resource/image/2c/3d/2cbddf1bc190c167212f14b3c6bf193d.png?wh=600*303\" alt=\"\"></p><p>都执行对了呀，为什么下面的没有返回信息呢？这种情况下只有第一个请求有返回信息，但是下面也没有报错。这里就需要注意了。</p><p><strong>测试工具的成功，并不等于业务的成功</strong>。</p><p>所以我们必须要做的就是响应断言，也就是返回值的判断。在JMeter中，断言有以下这些：</p><p><img src=\"https://static001.geekbang.org/resource/image/d4/9b/d4b8c319a6ade1344f1cced91308079b.png?wh=319*369\" alt=\"\"></p><p>因为今天的文章不是工具的教程，所以我不打算全讲一遍。这里我只用最基础的响应断言。什么是断言呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/34/84/343a993f00b5f289ed2fc76ed735c684.jpg?wh=1517*727\" alt=\"\"></p><p>断言指的就是服务器端有一个业务成功的标识，会传递给客户端，客户端判断是否正常接收到了这个标识的过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/97/c7/972884773c413e5b07ee74bf12a14ac7.png?wh=973*512\" alt=\"\"></p><p>在这里我添加了一个断言，用以判断服务器是否返回了OK。 你要注意这个“OK”是从哪来的哦，它是从服务端的这一行代码中来的。</p><pre><code> String response = message + &quot; is OK&quot;;\n</code></pre><p>请注意，这个断言的信息，一是可以判断出业务的正确性。我在工作中发现有些人用页面中一些并不必要的文字来判断，这样就不对了，我们应该用有业务含义的判断标识。</p><p>如果我们再次回放脚本，你会发现除了第一个请求，后面9个请求都错了。</p><p><img src=\"https://static001.geekbang.org/resource/image/31/37/318675c91ad46c36da9b7a9eab215737.png?wh=527*241\" alt=\"\"></p><p>所以，在做脚本时，请你一定要注意，<strong>断言是必须要加的</strong>。</p><h3>长短连接的问题</h3><p>既然有错，肯定是要处理。我们查看一下JMeter的控制台错误信息：</p><pre><code>2019-11-26 09:51:51,587 ERROR o.a.j.p.t.s.TCPSampler: \njava.net.SocketException: Broken pipe (Write failed)\n\tat java.net.SocketOutputStream.socketWrite0(Native Method) ~[?:1.8.0_111]\n\tat java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[?:1.8.0_111]\n\tat java.net.SocketOutputStream.write(SocketOutputStream.java:141) ~[?:1.8.0_111]\n\tat org.apache.jmeter.protocol.tcp.sampler.TCPClientImpl.write(TCPClientImpl.java:78) ~[ApacheJMeter_tcp.jar:5.1.1 r1855137]\n\tat org.apache.jmeter.protocol.tcp.sampler.TCPSampler.sample(TCPSampler.java:401) [ApacheJMeter_tcp.jar:5.1.1 r1855137]\n\tat org.apache.jmeter.threads.JMeterThread.doSampling(JMeterThread.java:622) [ApacheJMeter_core.jar:5.1.1 r1855137]\n\tat org.apache.jmeter.threads.JMeterThread.executeSamplePackage(JMeterThread.java:546) [ApacheJMeter_core.jar:5.1.1 r1855137]\n\tat org.apache.jmeter.threads.JMeterThread.processSampler(JMeterThread.java:486) [ApacheJMeter_core.jar:5.1.1 r1855137]\n\tat org.apache.jmeter.threads.JMeterThread.run(JMeterThread.java:253) [ApacheJMeter_core.jar:5.1.1 r1855137]\n  at java.lang.Thread.run(Thread.java:745) [?:1.8.0_111]\n</code></pre><p>从字面上来看，就是通道瓦塔（被破坏）了，Broken pipe。这个提示表明客户端上没有这个连接了，而JMeter还以为有这个链接，于是接着用这个链接来发，显然是找不到这个通道，于是就报错了。</p><p>这是一个典型的压力工具这边的问题。</p><p>而服务端，只收到了一条请求。</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/d9/b1050e9a5920bdfd84b3c78a700615d9.png?wh=374*66\" alt=\"\"></p><p>为什么会报这个错呢？因为我们代码是短链接的，服务端处理完之后，就把这个链接给断掉了。</p><p>这里是压力机上的抓包信息：</p><pre><code>//从这里开始，上面已经看到了有Fin（结束）包了，后面还在发Push（发送数据）包。显然是通不了，还被服务端啪啪抽了两次reset。\n11:58:07.042915 IP localhost.57677 &gt; 60.205.107.9.m-oap: Flags [P.], seq 34:67, ack 41, win 4119, options [nop,nop,TS val 163718903 ecr 2122793206], length 33\n11:58:07.046075 IP localhost.57677 &gt; 60.205.107.9.m-oap: Flags [FP.], seq 67:331, ack 41, win 4119, options [nop,nop,TS val 163718906 ecr 2122793206], length 264\n11:58:07.076393 IP 60.205.107.9.m-oap &gt; localhost.57677: Flags [R], seq 3986768192, win 0, length 0\n11:58:07.079156 IP 60.205.107.9.m-oap &gt; localhost.57677: Flags [R], seq 3986768192, win 0, length 0\n</code></pre><p>服务端的抓包信息：</p><pre><code>//服务端也是没有办法，只能在看到了Push包之后，给回了个Reset包。\n11:58:07.047001 IP 124.64.16.240.bones &gt; 7dgroup1.enc-eps-mc-sec: Flags [P.], seq 34:67, ack 41, win 4119, options [nop,nop,TS val 163718903 ecr 2122793206], length 33\n11:58:07.047077 IP 7dgroup1.enc-eps-mc-sec &gt; 124.64.16.240.bones: Flags [R], seq 3986768192, win 0, length 0\n11:58:07.054757 IP 124.64.16.240.bones &gt; 7dgroup1.enc-eps-mc-sec: Flags [FP.], seq 67:331, ack 41, win 4119, options [nop,nop,TS val 163718906 ecr 2122793206], length 264\n11:58:07.054844 IP 7dgroup1.enc-eps-mc-sec &gt; 124.64.16.240.bones: Flags [R], seq 3986768192, win 0, length 0\n</code></pre><p>这是为什么呢？因为在JMeter中，默认是复用TCP连接的，但是在我们这个示例中，服务端并没有保存这个连接。所以，我们应该在脚本中，把下图中的Re-use connection给去掉。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/75/71d1b52fe04ced4b3bd793b268ae5175.png?wh=1195*220\" alt=\"\"></p><p>这时再回放脚本，你就会发现10次迭代全都对了。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d2/e1/d23dddf82d073b6bffb1a25f374b5de1.png?wh=528*251\" alt=\"\"></p><p>但是，这里还有一个知识点，希望你注意。短连接的时候，必然会产生更多的TCP连接的创建和销毁，对性能来说，这会让系统变得缓慢。</p><p>所以你可以看到上面10条迭代全都对了的同时，响应时间也增加了。</p><p>可能会有人问，那这怎么办呢？长短连接的选择取决于业务的需要，如果必须用短链接，那可能就需要更多的CPU来支撑；要是长连接，就需要更多的内存来支撑（用以保存TCP连接）。</p><p>根据业务需要，我们选择一个合适的就好。</p><h3>TCP连接超时</h3><p>这个问题，应该说非常常见，我们这里只做问题的现象说明和解决，不做原理的探讨。原理的部分，我会在监控和分析部分加一说明。</p><p>下面这个错误，属于典型的主机连不上。</p><pre><code>java.net.ConnectException: Operation timed out (Connection timed out)\n\tat java.net.PlainSocketImpl.socketConnect(Native Method) ~[?:1.8.0_111]\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) ~[?:1.8.0_111]\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[?:1.8.0_111]\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[?:1.8.0_111]\n\tat java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[?:1.8.0_111]\n\tat java.net.Socket.connect(Socket.java:589) ~[?:1.8.0_111]\n\tat org.apache.jmeter.protocol.tcp.sampler.TCPSampler.getSocket(TCPSampler.java:168) [ApacheJMeter_tcp.jar:5.1.1 r1855137]\n\tat org.apache.jmeter.protocol.tcp.sampler.TCPSampler.sample(TCPSampler.java:384) [ApacheJMeter_tcp.jar:5.1.1 r1855137]\n\tat org.apache.jmeter.threads.JMeterThread.doSampling(JMeterThread.java:622) [ApacheJMeter_core.jar:5.1.1 r1855137]\n\tat org.apache.jmeter.threads.JMeterThread.executeSamplePackage(JMeterThread.java:546) [ApacheJMeter_core.jar:5.1.1 r1855137]\n\tat org.apache.jmeter.threads.JMeterThread.processSampler(JMeterThread.java:486) [ApacheJMeter_core.jar:5.1.1 r1855137]\n\tat org.apache.jmeter.threads.JMeterThread.run(JMeterThread.java:253) [ApacheJMeter_core.jar:5.1.1 r1855137]\n  at java.lang.Thread.run(Thread.java:745) [?:1.8.0_111]\n</code></pre><p>time out是个如果你理解了逻辑，就觉得很简单，如果没理解逻辑，就觉得非常复杂的问题。</p><p>要想解决这个问题，就要先确定服务端是可以正常连通的。</p><p>如果不能正常连通，那么通常都是IP不正确、端口不正确、防火墙阻止之类的问题。解决了网络连通性的问题，就可以解决connection timed out的问题。</p><h3>编写LoadRunner脚本</h3><p>针对上面这个示例，如果你要想编写一个LoadRunner的示例脚本，也是简单到不行。</p><p>首先创建一个空的winsock脚本，复制下面代码到action里面。</p><pre><code>//创建socket1\nlrs_create_socket(&quot;socket1&quot;, &quot;TCP&quot;, &quot;RemoteHost=60.205.10.9:5567&quot;, LrsLastArg); \n//走socket1, 发送buf1中定义的数据\nlrs_send (&quot;socket1&quot;, &quot;buf1&quot;, LrsLastArg ); \n//走socket1，接收数据保存在buf2中\nlrs_receive(&quot;socket1&quot;, &quot;buf2&quot;,  LrsLastArg); \n//关掉socket1\nlrs_close_socket(&quot;socket1&quot;); \n</code></pre><p>从上面的信息就可以看到，socket1这个标识是我们操作的基础。如果你在一个脚本中想处理两个socket，也是可以的，只要控制好你的标识不会乱就行。</p><p>接着再将下面的内容复制到data.ws里面。</p><pre><code>send buf1 5\n    &quot;12345&quot;\n\nrecv buf2 10\n</code></pre><p>你可能会问，这个recv怎么不写返回的值是什么？</p><p>当你手写socket脚本的时候，都还没有运行，你怎么知道返回值是什么呢？所以这里，可以不用写。</p><p>而recv 后面的10是指接收10个字节。如果多了怎么办？截掉？！不会的，LoadRunner还是会把所有信息全部接收并保存下来，除非你提前定义了截取字符长度的函数。</p><p>最后看下我们回放的结果：</p><pre><code>Action.c(6): lrs_create_socket(socket1, TCP, ...)\nAction.c(7): lrs_send(socket1, buf1)\nAction.c(8): lrs_receive(socket1, buf2)\nAction.c(8): Mismatch in buffer's length (expected 10 bytes, 11 bytes actually received, difference in 1 bytes)\n================================EXPECTED BUFFER================================\n===============================================================================\n================================RECEIVED BUFFER================================\n\t&quot;12345 is OK&quot;\n===============================================================================\nAction.c(8): callRecv:11 bytes were received\nAction.c(9): lrs_close_socket(socket1)\n</code></pre><p>看，脚本正常执行了，只是报了一个Mismatch，这是因为我们定义了buf2 是10字节，而我们实际上接收了11字节，所以这里给出了Mismatch。</p><p>到此，一个LoadRunner的手工TCP脚本就完成了。后面我们就可以根据需要，增强脚本了，加个参数化、关联、检查点等等。</p><h2>总结</h2><p>其实这篇文章只想告诉你一件事情，手工编写脚本，从基础上说，是非常简单的，只是有三点需要特别强调：</p><ol>\n<li>涉及到业务规则和逻辑判断之后，编写脚本就复杂了起来。但是了解业务规则是做脚本的前提条件，也是性能测试工程师的第一步。</li>\n<li>编写脚本的时候，要知道后端的逻辑。这里的意思不是说，你一开始写脚本的时候，就要去读后端的代码，而是说你在遇到问题的时候，要分析整个链路上每个环节使用到了什么技术，以便快速地分析判断。</li>\n<li>写脚本是以<strong>最简为最佳</strong>，用不着故意复杂。</li>\n</ol><p>脚本的细节功能有很多，而现在我们可以看到市场上的书籍也好，文档也好，基本上是在教人如何用工具，很少会从前到后地说明一个数据从哪发到哪，谁来处理这样的逻辑。</p><p>希望学习性能测试工具的你，不仅知其然，更知其所以然。</p><h2>思考题</h2><p>学习完今天的内容，你不妨思考一下，HTTP的GET和POST请求，在后端处理中有什么不同？断言的作用是什么？如何使用断言呢？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","neighbors":{"left":{"article_title":"07丨性能测试工具：如何录制脚本？","id":183349},"right":{"article_title":"09丨\b关联和断言：一动一静，核心都是在取数据","id":185029}},"comments":[{"had_liked":false,"id":167980,"user_name":"zuozewei","can_delete":false,"product_type":"c1","uid":1039631,"ip_address":"","ucode":"D594C9CBAF15A5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/0f/ee37a7fe.jpg","comment_is_top":false,"comment_ctime":1577971725,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"83182350349","product_id":100042501,"comment_content":"前面几个同学回答的蛮好，我在此补充下幂等性相关的区别吧。<br><br>## 什么是幂等性<br>一次和多次请求某一个资源应该具有同样的副作用（对资源变更带来连锁反应或影响）：f(x) = f(f(x))。<br><br>## 为什么要幂等性设计？<br>系统解耦后，系统间服务调用存在三种状态：<br>* 成功<br>* 失败<br>* 超时（中间状态）<br><br>前面两种是明确的，超时是不知道什么状态，一般引起原因:<br>* 请求没有到达服务方（网络延时或丢失）<br>* 请求达到了服务方，服务方处理超时<br>* 请求到达了服务方并且处理完返回结果，但接收方没有收到<br>相关例子：订单创建、库存扣减、订单支付<br><br>## 怎么做幂等性设计？<br>* 下游（响应方）提供查询接口，上游（请求方）对于状态疑异订单进行查询<br>* 下游（响应方）系统坐幂等性设计：确保不会重复<br>* 全局ID：Twitter 的 Snowflake 算法&#47;UUID<br>* 存储冲突来解决（唯一约束）<br>* 插入重复无效，`insert into … values … on DUPLICATE KEY UPDATE …`<br>* 更新状态：`update table set status = “paid” where id = xxx and status = “unpaid”;`<br><br>## HTTP幂等性<br>- HTTP GET 方法用于获取资源，不应有副作用，所以是幂等的。<br>- HTTP POST 方法用于创建资源，所对应的 URI 并非创建的资源本身，而是去执行创建动作的操作者，有副作用，不满足幂等性。<br>- 只有 POST 需要特殊处理，其他都具有幂等性<br>- 前端生成 token，后端存（唯一约束）<br>- PRG 模式<br>","like_count":20,"discussions":[{"author":{"id":1170955,"avatar":"https://static001.geekbang.org/account/avatar/00/11/de/0b/485945f1.jpg","nickname":"lostmango","note":"","ucode":"CA50FBD69E6DBB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176608,"discussion_content":"幂等性不是说有没有副作用来判断，有一个关键措辞是，是否有相同的副作用，如果有即是幂等，如果没有则是非幂等。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582038248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236188,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/dc/304be92b.jpg","nickname":"A洒脱的风","note":"","ucode":"1BC03EE0F9F1F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245896,"discussion_content":"每一篇,回复区学到也挺多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587709359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167518,"user_name":"善行通","can_delete":false,"product_type":"c1","uid":1785980,"ip_address":"","ucode":"AC9159314DEA5A","user_header":"https://static001.geekbang.org/account/avatar/00/1b/40/7c/43bafeb8.jpg","comment_is_top":false,"comment_ctime":1577847183,"is_pvip":false,"replies":[{"id":"65035","content":"理解的很深刻哦。<br>","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1577865482,"ip_address":"","comment_id":167518,"utype":1}],"discussion_count":2,"race_medal":0,"score":"83182225807","product_id":100042501,"comment_content":"<br>感谢高老师无私分享，在刚开始学习性能测试的时候，一直不理解做脚本为什么要这样做，也报名参加过培训机构，也许培训机构的老师都不会，或者自己没有写过后端代码，更不会讲解后端怎么实现，还有调用关系，或者根本不想让学员知道，担心教会徒弟饿死师父。<br>就像老师说的：【自己写一些 demo，去了解一些逻辑，然后在排除问题的时候，就非常清楚了】<br>要是早早听到老师这样的课程，估计自己的水平能快速提高谢谢老师分析Jmeter调用后端简单逻辑【Jmeter--&gt;controller---&gt;interface---&gt;service[业务实现层]--&gt;Mappper--&gt;DB】<br><br><br>GET请求对于springboot框架来说是通@RequestMapping(method = RequestMethod.GET)中的@GetMapping来处理，这是框架定义好的接口，关键是get执行的业务操作是什么；<br>POST请求也是springboot框架来说是通@RequestMapping(method = PostMapping.GET)中的@PostMapping处理数据；<br><br>一般来说get是获取数据数据会在url上显示，post是提交数据，提交数据不会显示到url上， 而且Get方法提交的数据大小长度并没有限制，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节；理论上讲，POST是没有大小限制的。HTTP协议规范也没有进行大小限制，起限制作用的是服务器的处理程序的处理能力【Tomcat默认2M】；对数据请求频繁，数据不敏感且数据量在普通浏览器最小限定的2k范围内，这样的情况使用GET。其他地方使用POST<br><br>断言的作用是什么？<br>理解断言是为了校验请求是否正确，只要增加合理的断言，才可以做性能测试，如果不加断言就不知道业务请求是否正确，再加没有断言TPS会很平稳，对实际压测结果意义不大。<br><br>如何使用断言呢？<br>理解：在请求结束后的响应增加断言。","like_count":19,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479888,"discussion_content":"理解的很深刻哦。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577865482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2673745,"avatar":"","nickname":"章鱼","note":"","ucode":"D44893DC2526D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557719,"discussion_content":"都是大牛，我感觉我到了高级班，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647940607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167685,"user_name":"律飛","can_delete":false,"product_type":"c1","uid":1462608,"ip_address":"","ucode":"65394E437AD2DF","user_header":"https://static001.geekbang.org/account/avatar/00/16/51/50/f5f2a121.jpg","comment_is_top":false,"comment_ctime":1577893157,"is_pvip":false,"replies":[{"id":"65148","content":"你也说的很好。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1577950757,"ip_address":"","comment_id":167685,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48822533413","product_id":100042501,"comment_content":"1.HTTP 的 GET 和 POST 请求，在后端处理中有什么不同？<br> 由于spring的RequestParam注解接收的参数是来自于requestHeader中，即请求头，也就是在url中，格式为xxx?username=123&amp;password=456，而RequestBody注解接收的参数则是来自于requestBody中，即请求体中。<br>因此如果为get请求时，后台接收参数的注解应该为RequestParam，如果为post请求时，则后台接收参数的注解就是为RequestBody。<br><br>2.断言的作用是什么？如何使用断言呢？<br>断言指的就是服务器端有一个业务成功的标识，会传递给客户端，客户端判断是否正常接收到了这个标识的过程。<br>应该用有业务含义的判断标识。需要对业务进行分析，选取合适的判断标识。<br><br>善行通已经说得很好了，画蛇添足一下。","like_count":11,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479946,"discussion_content":"你也说的很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577950757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269510,"user_name":"羊羊","can_delete":false,"product_type":"c1","uid":1162597,"ip_address":"","ucode":"B220CE8D1CA5DA","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/65/fbdf4fc1.jpg","comment_is_top":false,"comment_ctime":1608688772,"is_pvip":false,"replies":[{"id":"97798","content":"是100ms增加一个线程。增加的线程会持续运行。<br> jmeter配置递增很容易呀。只要线程数、ramp-up period、duration就行了。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1608769349,"ip_address":"","comment_id":269510,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23083525252","product_id":100042501,"comment_content":"关于递增时间，文中提到“如果我们配置了 10 线程，这里配置为 1 秒，则是 10&#47;1000=1 线程 &#47;100ms”，是指压力机会每100ms发送一个请求么？是匀速发送请求？前面的文章中老师讲到“线性递增”，根据接口不同的响应时间，配置不同的递增幅度，对应到Jmeter是如何配置？","like_count":5,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512304,"discussion_content":"是100ms增加一个线程。增加的线程会持续运行。\n jmeter配置递增很容易呀。只要线程数、ramp-up period、duration就行了。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608769349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191674,"user_name":"测试大王","can_delete":false,"product_type":"c1","uid":1210503,"ip_address":"","ucode":"3A5579E0B649BD","user_header":"https://static001.geekbang.org/account/avatar/00/12/78/87/66f6f2da.jpg","comment_is_top":false,"comment_ctime":1584789552,"is_pvip":false,"replies":[{"id":"73478","content":"这个话题太大。通常我只能建议接近生产，不然就得做大量的数据采集分析，然后建模。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1584805885,"ip_address":"","comment_id":191674,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10174724144","product_id":100042501,"comment_content":"高楼老师，请问压测环境要准备什么样的？测试环境和生产环境的服务器配置差异往往很大，在测试环境压测不一定能反应生产环境的问题。","like_count":2,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488219,"discussion_content":"这个话题太大。通常我只能建议接近生产，不然就得做大量的数据采集分析，然后建模。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584805885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186373,"user_name":"莫西 👫 小妞儿 👼 🎵","can_delete":false,"product_type":"c1","uid":1165199,"ip_address":"","ucode":"553BF89ED22111","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/8f/fcfaf45a.jpg","comment_is_top":false,"comment_ctime":1583831325,"is_pvip":false,"replies":[{"id":"71996","content":"不会，都是压力工具里判断的。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1583839327,"ip_address":"","comment_id":186373,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10173765917","product_id":100042501,"comment_content":"高老师，添加断言的话，会影响性能测试结果么？比如会影响到响应时间么？","like_count":2,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486733,"discussion_content":"不会，都是压力工具里判断的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583839327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145583,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/ef/9168ae82.jpg","nickname":"Watts","note":"","ucode":"A3D0EBC00D477C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270573,"discussion_content":"添加断言会影响 压力工具的瓶颈吗\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590026383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170584,"user_name":"Geek_5860ac","can_delete":false,"product_type":"c1","uid":1505995,"ip_address":"","ucode":"A86D581A62B666","user_header":"","comment_is_top":false,"comment_ctime":1578638722,"is_pvip":false,"replies":[{"id":"66221","content":"少了一个零。哈，马上让编辑小美女加上。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1578753606,"ip_address":"","comment_id":170584,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10168573314","product_id":100042501,"comment_content":"“如果我们配置了 100 线程，这里配置为 10 秒，那么就是 100&#47;(10s*1000ms)=1 线程 &#47;10ms”这个地方不明白，怎么算都是1线程&#47; 100ms啊，请老师指正","like_count":2,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481028,"discussion_content":"少了一个零。哈，马上让编辑小美女加上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578753606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286522,"user_name":"[root@localhost ～]#","can_delete":false,"product_type":"c1","uid":1934953,"ip_address":"","ucode":"8C83A1FAF0466F","user_header":"https://static001.geekbang.org/account/avatar/00/1d/86/69/b60d409f.jpg","comment_is_top":false,"comment_ctime":1617355739,"is_pvip":false,"replies":[{"id":"104117","content":"不需要插件。那个是html结果报告。仔细看看jmeter的report命令吧。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1617470853,"ip_address":"","comment_id":286522,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5912323035","product_id":100042501,"comment_content":"高楼老师，你好，请问你用jmeter展示tps图标用的是什么插件？而我用网上下载的插件使用会大量报错最终导致jmeter卡死。错误内容是：Error o.a.j.t ListenerNotifier: Deteced problem in Listener<br>Java.lang.NullPointer Exception: Null。请问这个该如何解决呢？多谢","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518017,"discussion_content":"不需要插件。那个是html结果报告。仔细看看jmeter的report命令吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617470853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1934953,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/86/69/b60d409f.jpg","nickname":"[root@localhost ～]#","note":"","ucode":"8C83A1FAF0466F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364498,"discussion_content":"多谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617504047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273862,"user_name":"Geek_WHY","can_delete":false,"product_type":"c1","uid":1800248,"ip_address":"","ucode":"DAEDFA330AA9D3","user_header":"https://static001.geekbang.org/account/avatar/00/1b/78/38/a3c9de1b.jpg","comment_is_top":false,"comment_ctime":1610698503,"is_pvip":false,"replies":[{"id":"99171","content":"慢慢加压，不用快。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1610704125,"ip_address":"","comment_id":273862,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5905665799","product_id":100042501,"comment_content":"高老师您好，麻烦打扰，我想问下您看我做的对不对：<br>对一种场景进行性能验证，验证系统在不同的硬件配置下，tps能达到多少。<br>我这边不确定是用阶梯性一点一点慢慢的加压，加压到一定的线程数，还是在一分钟内快速的加压到一定的线程数。<br>盼望回复，感谢～","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513839,"discussion_content":"慢慢加压，不用快。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610704125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220696,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1590309237,"is_pvip":false,"replies":[{"id":"81891","content":"基础知识体系是非常重要的部分。就像地基。<br>而上层建筑不管怎么好看，没有地基也不稳定。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1590716537,"ip_address":"","comment_id":220696,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5885276533","product_id":100042501,"comment_content":"有两点很认同：<br>第一解决问题的第一步必须是先理解问题，把问题搞清楚，这就像走路方向如果错误，越努力错的将会越离谱，看电影电视剧里都是如此，误会不解开，人生的悲剧将不可避免<br>第二原理不清楚，对于问题的理解就像男追女隔窗如隔山，超时的问题我最近也在解决一个，比较尴尬基本原理知道不过证据链还未抓到，应该是TCP&#47;IP这块原理理解不深耽误的","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496214,"discussion_content":"基础知识体系是非常重要的部分。就像地基。\n而上层建筑不管怎么好看，没有地基也不稳定。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590716537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193706,"user_name":"自渡。","can_delete":false,"product_type":"c1","uid":1907278,"ip_address":"","ucode":"3E3EB3DE28CC46","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1a/4e/a946ca99.jpg","comment_is_top":false,"comment_ctime":1584950952,"is_pvip":false,"replies":[{"id":"73772","content":"这个报告就可以。也可以用influxdb+grafana输出。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1584955233,"ip_address":"","comment_id":193706,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879918248","product_id":100042501,"comment_content":"老师，请问看TPS推荐使用什么工具看，我看的是的jmeter的reportgenerator生成的报告","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488630,"discussion_content":"这个报告就可以。也可以用influxdb+grafana输出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584955233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171443,"user_name":"songyy","can_delete":false,"product_type":"c1","uid":1007201,"ip_address":"","ucode":"34D6443B91676D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/61/985f3eb7.jpg","comment_is_top":false,"comment_ctime":1578924071,"is_pvip":false,"replies":[{"id":"66505","content":"理解的很对。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1578975327,"ip_address":"","comment_id":171443,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5873891367","product_id":100042501,"comment_content":"思考题<br>\t- HTTP 的 GET 和 POST 请求，在后端处理中有什么不同？ 其实后端处理，没有本质的不同。不同的是人们对于它的约定：GET的预期，是不进行数据修改；而POST，通常意味着创建新的数据。但实际上，后端也可以在GET的时候，进行数据修改<br>\t- 断言的作用是什么：断言可以用来判断，一个测试用例是否成功<br>如何使用断言呢：在收到返回结果后，对比结果是否和预期相符。就像写测试时候的断言（assertion）一样","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481352,"discussion_content":"理解的很对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578975327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168086,"user_name":"悦霖","can_delete":false,"product_type":"c1","uid":1786180,"ip_address":"","ucode":"6707B62806147F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/41/44/00ea2279.jpg","comment_is_top":false,"comment_ctime":1578012203,"is_pvip":false,"replies":[{"id":"65288","content":"说明需要补充网络知识。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1578020917,"ip_address":"","comment_id":168086,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5872979499","product_id":100042501,"comment_content":"抓包信息看不懂怎么办😂","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480130,"discussion_content":"说明需要补充网络知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578020917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167889,"user_name":"月亮和六便士","can_delete":false,"product_type":"c1","uid":1080894,"ip_address":"","ucode":"EFFCB9171D4B4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/3e/82202cc8.jpg","comment_is_top":false,"comment_ctime":1577958622,"is_pvip":false,"replies":[{"id":"65294","content":"1. 就是在场景执行的过程中，发现场景产生的压力和生产上比例不一致，或者有中间需要的增加的第三方压力。就需要在场景执行过程中再增加新的线程或者压力机。<br><br>2. 动态扩展是验证线上的能力。如果业务流量突增了。就需要动态扩展哇。<br><br>3. 看机制。如果不是预热类型的。 可以在每次跑之前清一下。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1578021882,"ip_address":"","comment_id":167889,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5872925918","product_id":100042501,"comment_content":"老师，我还有问题想问：前面的文章中提到过，1. 什么叫压力补偿，压力补偿的作用是什么？    2. 还有为什么要动态扩展？ 比如内存不够了，我们不应该找到谁占用了内存吗？   3.每次测试前需要清理缓存吗？比如我跑一轮脚本 就需要把redis 缓存清一下吗 ？","like_count":2,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480044,"discussion_content":"1. 就是在场景执行的过程中，发现场景产生的压力和生产上比例不一致，或者有中间需要的增加的第三方压力。就需要在场景执行过程中再增加新的线程或者压力机。\n\n2. 动态扩展是验证线上的能力。如果业务流量突增了。就需要动态扩展哇。\n\n3. 看机制。如果不是预热类型的。 可以在每次跑之前清一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578021882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167832,"user_name":"新思维","can_delete":false,"product_type":"c1","uid":1786527,"ip_address":"","ucode":"DC29CA1DB16D90","user_header":"https://static001.geekbang.org/account/avatar/00/1b/42/9f/428dbb20.jpg","comment_is_top":false,"comment_ctime":1577946597,"is_pvip":false,"replies":[{"id":"65143","content":"理解的非常对。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1577950565,"ip_address":"","comment_id":167832,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5872913893","product_id":100042501,"comment_content":"get请求，一般后端服务只是通过传过来的参数查询数据库，返回结果；post请求，一般后端服务会将请求所包含的内容更新到数据库，返回更新结果。<br><br>断言判断后端服务返回的请求是否为所期望的请求结果。涉及到业务逻辑的断言需要对响应内容进行检查，包括关键字检查、或者数据处理逻辑结果检查等。","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480015,"discussion_content":"理解的非常对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577950565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348618,"user_name":"小芽儿🍃","can_delete":false,"product_type":"c1","uid":3010901,"ip_address":"","ucode":"0E8DCAF5B59F10","user_header":"https://static001.geekbang.org/account/avatar/00/2d/f1/55/acb23006.jpg","comment_is_top":false,"comment_ctime":1655258191,"is_pvip":false,"replies":[{"id":"127098","content":"这个会影响很大吗？我没遇到过哦，你有数据来说明使用了这样的功能之后压测结果会有很大差异吗？","user_name":"作者回复","user_name_real":"编辑","uid":"1785562","ctime":1655821676,"ip_address":"","comment_id":348618,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1655258191","product_id":100042501,"comment_content":"老师，断言和提取器会影响压测结果，那我们应该怎样合理使用这两个呢","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576876,"discussion_content":"这个会影响很大吗？我没遇到过哦，你有数据来说明使用了这样的功能之后压测结果会有很大差异吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655821676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323973,"user_name":"㳤","can_delete":false,"product_type":"c1","uid":2382133,"ip_address":"","ucode":"C6D95D69FBB8AA","user_header":"https://static001.geekbang.org/account/avatar/00/24/59/35/f92768d3.jpg","comment_is_top":false,"comment_ctime":1638244978,"is_pvip":false,"replies":[{"id":"117548","content":"我理解你是需要一个支持socks5的Mock Server。如果对响应内容没有特别的要求，那倒是比较简单，直接返回固定的字符就可以了。<br>如果要对响应内容有要求，确实是需要自己写个Mock Server，来实现逻辑的判断了。具体怎么实现，你可以参考一下Moco这样的开源系统。 ","user_name":"作者回复","user_name_real":"编辑","uid":"1785562","ctime":1638253554,"ip_address":"","comment_id":323973,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638244978","product_id":100042501,"comment_content":"压测一个socks5的转发程序，发起请求过程 压测客户端--转发程序---目标服务器<br>响应返回过程相反，目标服务器是不是要写一个接收程序，咋写呢","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534661,"discussion_content":"我理解你是需要一个支持socks5的Mock Server。如果对响应内容没有特别的要求，那倒是比较简单，直接返回固定的字符就可以了。\n如果要对响应内容有要求，确实是需要自己写个Mock Server，来实现逻辑的判断了。具体怎么实现，你可以参考一下Moco这样的开源系统。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638253554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296603,"user_name":"0909","can_delete":false,"product_type":"c1","uid":1969097,"ip_address":"","ucode":"79C60A8D2B809A","user_header":"https://static001.geekbang.org/account/avatar/00/1e/0b/c9/b53037df.jpg","comment_is_top":false,"comment_ctime":1623059892,"is_pvip":false,"replies":[{"id":"107705","content":"对的。就是这个意思。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1623061088,"ip_address":"","comment_id":296603,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623059892","product_id":100042501,"comment_content":"提问：如果我们配置了 100 线程，这里配置为 10 秒，那么就是 100&#47;(10s*1000ms)=1 线程 &#47;100ms<br><br>这个是100ms增加一个线程的意思吗","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521515,"discussion_content":"对的。就是这个意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623061088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292231,"user_name":"何鹿娇","can_delete":false,"product_type":"c1","uid":1954078,"ip_address":"","ucode":"59212B46D5EA25","user_header":"","comment_is_top":false,"comment_ctime":1620729873,"is_pvip":false,"replies":[{"id":"105789","content":"取决于响应时间。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1620738387,"ip_address":"","comment_id":292231,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1620729873","product_id":100042501,"comment_content":"Number of Threads(users)：我们都知道这是 JMeter 中的线程数，也可以称之为用户数。但是在第 2 篇文章中，我已经说得非常明确了，这个线程数是产生 TPS 的，而一个线程产生多少 TPS，取决于系统的响应时间有多快。所以我们用 TPS 这个概念来承载系统的负载能力，而不是用这里的线程数。<br><br>如果是websocket协议，一个线程能产生多少TPS怎么来决定呢？还是取决于响应时间嘛？还是取决于什么时候断开长链接","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519737,"discussion_content":"取决于响应时间。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620738387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290146,"user_name":"^_^","can_delete":false,"product_type":"c1","uid":2170871,"ip_address":"","ucode":"2CF5A4DB792821","user_header":"https://static001.geekbang.org/account/avatar/00/21/1f/f7/5a010799.jpg","comment_is_top":false,"comment_ctime":1619400820,"is_pvip":false,"replies":[{"id":"105219","content":"咦，你这个用线程算？出来的结果也是线程？不是要算TPS吗？","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1619492131,"ip_address":"","comment_id":290146,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1619400820","product_id":100042501,"comment_content":"如果配置了100个线程，时间是10s，要算每个线程的响应时间，不是应该用时间&#47;线程数吗？应该是10*1000&#47;100啊。如果用线程数&#47;时间，得到的结果是0.01线程&#47;ms","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519125,"discussion_content":"咦，你这个用线程算？出来的结果也是线程？不是要算TPS吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619492131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281703,"user_name":"Agnes","can_delete":false,"product_type":"c1","uid":2064555,"ip_address":"","ucode":"75B268B55A1CCC","user_header":"https://static001.geekbang.org/account/avatar/00/1f/80/ab/d3b77fbf.jpg","comment_is_top":false,"comment_ctime":1614852509,"is_pvip":false,"replies":[{"id":"103244","content":"Zee_7D，可以加我讨论。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1616422637,"ip_address":"","comment_id":281703,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1614852509","product_id":100042501,"comment_content":"jmeter配置递增很容易呀。只要线程数、ramp-up period、duration就行了。<br><br>老师的微信是多少啊？结合前面讲的“性能分析思路”那个建议的配置表格（响应时间、递增幅度），还是不懂怎么通过线程数、ramp-up period、duration配置递增幅度。<br><br>“性能分析思路”建议递增幅度那个表，单位是什么啊？是每秒的线程递增数吗？<br><br>谢谢老师！求解答！","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516474,"discussion_content":"Zee_7D，可以加我讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616422637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280083,"user_name":"bolo","can_delete":false,"product_type":"c1","uid":1357170,"ip_address":"","ucode":"7C91CEA2F1970E","user_header":"https://static001.geekbang.org/account/avatar/00/14/b5/72/bb10f3d0.jpg","comment_is_top":false,"comment_ctime":1614071737,"is_pvip":false,"replies":[{"id":"103259","content":"你的理解就是一篇很好的文章了。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1616423023,"ip_address":"","comment_id":280083,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1614071737","product_id":100042501,"comment_content":"1、HTTP请求中的GET和POST的区别是什么？<br>业务方面：GET请求一般情况下用于获取资源，POST请求一般用于对于资源的操作（增加，修改或者删除）<br>后端接口请求处理，没有用过Java写过接口，用过Python。<br>Python的中GET请求接口的传参一般在URL中传递到服务端，后端通过字段匹配的方式获取对应的字段值，进行后续的业务逻辑处理。<br>POST请求一般用来做表单提交，用户的请求参数通过表单进行提交。常用传参方式为：application&#47;json、x-www-from-urlencoded、from-data 更为安全，没有直接暴露到URL中<br><br>2、断言的作用？<br>这个可以类比做接口自动化时候写的断言。主要是用于确保当前的接口所代表的业务逻辑是正确的。<br>比如登录接口：接口返回某个字段值，代表用户登录成功，那我们就设置该断言用于验证业务逻辑<br><br>接口返回的字段值所代表的的含义：一可以查看开发给出的接口文档，而来可以通过阅读对应的业务代码获取。<br><br>断言的使用：Jmeter中针对取样器添加ReponseAssertion  具体的匹配规则可以自行选择。","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515977,"discussion_content":"你的理解就是一篇很好的文章了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616423023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271987,"user_name":"COLDLY","can_delete":false,"product_type":"c1","uid":1248467,"ip_address":"","ucode":"B16257B2D83CC0","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/d3/0be6ae81.jpg","comment_is_top":false,"comment_ctime":1609902419,"is_pvip":false,"replies":[{"id":"98628","content":"从实现的逻辑上，你说的非常对。<br>我补充一点，在tcp的层面，post还要有psh位。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1609926618,"ip_address":"","comment_id":271987,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609902419","product_id":100042501,"comment_content":"get的请求体也可以放在body中的，后端用@RequestBody接受；反之post的请求体也可以放在请求头里，后端可以用@RequestParam或@PathVariable接受，两者没有任何区别。要说区别，可能就是约定的使用方式不同：get一般用来查询，请求体放在请求头里；post一般用来创建，请求体放在body中","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513111,"discussion_content":"从实现的逻辑上，你说的非常对。\n我补充一点，在tcp的层面，post还要有psh位。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609926618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270186,"user_name":"Geek_879900","can_delete":false,"product_type":"c1","uid":2389799,"ip_address":"","ucode":"D379275880F005","user_header":"","comment_is_top":false,"comment_ctime":1608974324,"is_pvip":false,"replies":[{"id":"97989","content":"我咋那么不信呢？从来不存在tps不变化、压力线程在增加的时候响应时间也不变化的情况。并且资源也没变化，我就更不信了，除非是你没看完所有的全局计数器。<br>你这个问题比较复杂，如果需要我帮你定位，可以在微信上找我。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1609045035,"ip_address":"","comment_id":270186,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1608974324","product_id":100042501,"comment_content":"高老师，麻烦请教一下；在做单基准测试的时候；随着压力机的线程数增加到一定数量（假设为50线程）后再持续增加线程数，但是tps没有什么变化（假设为200），响应时长也没有变化（60ms），服务端的cpu&#47;io等也没啥变化；这种情况应该有什么排查思路吗？不知道多增加的线程为啥没有对被测服务产生压力","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512547,"discussion_content":"我咋那么不信呢？从来不存在tps不变化、压力线程在增加的时候响应时间也不变化的情况。并且资源也没变化，我就更不信了，除非是你没看完所有的全局计数器。\n你这个问题比较复杂，如果需要我帮你定位，可以在微信上找我。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609045035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1977516,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/2c/ac/247288f5.jpg","nickname":"小鱼儿","note":"","ucode":"30EB95B7844556","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347699,"discussion_content":"是不是接口有报错只是没有发现？曾经碰到过接口对后端调用接口有兜底，后端其实都报错了，会出现线程增加各项指标不变甚至更优的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612313186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252409,"user_name":"路客","can_delete":false,"product_type":"c1","uid":1721812,"ip_address":"","ucode":"DE3765016947DA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/45/d4/39a662ef.jpg","comment_is_top":false,"comment_ctime":1602293081,"is_pvip":false,"replies":[{"id":"93953","content":"loop count是循环次数，一般我们在正式压力测试过程中，不会设定它，而是直接设置持续时间。<br>它的用途，我觉得在造数据和固定数据的场景下有用。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1604282073,"ip_address":"","comment_id":252409,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602293081","product_id":100042501,"comment_content":"我想问下老师，那个loop count是根据什么来设定的呢？还有设定这个loop count对前面线程启动规则和时间会有影响吗","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506767,"discussion_content":"loop count是循环次数，一般我们在正式压力测试过程中，不会设定它，而是直接设置持续时间。\n它的用途，我觉得在造数据和固定数据的场景下有用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604282073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238090,"user_name":"人心向善","can_delete":false,"product_type":"c1","uid":1197049,"ip_address":"","ucode":"6B0C01C52BF882","user_header":"https://static001.geekbang.org/account/avatar/00/12/43/f9/555d7aa0.jpg","comment_is_top":false,"comment_ctime":1596069785,"is_pvip":false,"replies":[{"id":"87991","content":"1. 我很少讲并发和在线用户之间的比例。这个完全取决于业务特性。没有固定的值。<br>2. 加ssl证书。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1596077419,"ip_address":"","comment_id":238090,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596069785","product_id":100042501,"comment_content":"老师好，在loadrunner中好像是没有用户在线的概念的，只有并发，以前听到过的就是在loadrunner中的并发和用户在线的比例关系大概是1:10或1:20，这句话我没少听到，不知道您以前在日常工作中有没有听到过这种话呢？<br><br>还有一点就是有的系统采用https协议，在loadrunner中并发https协议时往往会出现httpsrequest发送失败的问题，这个问题是由https协议引起，那么请问如何去避免这种问题呢？谢谢","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502640,"discussion_content":"1. 我很少讲并发和在线用户之间的比例。这个完全取决于业务特性。没有固定的值。\n2. 加ssl证书。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596077419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232136,"user_name":"Geek_rong0356","can_delete":false,"product_type":"c1","uid":1715715,"ip_address":"","ucode":"88CDE7EF3F1483","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJxibYhSsL4bBw9YKyT3icjj38Z0XTibG5T0LAicOp2HyuTj3icrkgrYDX7jibDvI2bcKYTpmbIY6KCObMg/132","comment_is_top":false,"comment_ctime":1593868311,"is_pvip":false,"replies":[{"id":"87971","content":"这个是场景持续时间。不是事务响应时间。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1596071379,"ip_address":"","comment_id":232136,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1593868311","product_id":100042501,"comment_content":"高老师，你好。这段话我不懂这个响应时间iteration duration，是如何判断出来的？<br>举例来说，如果设置了 Loop Count 为 100，而响应时间是 0.1 秒，那么 Loop Count * iteration duration(这个就是响应时间) = 100 * 0.1 = 10秒","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500528,"discussion_content":"这个是场景持续时间。不是事务响应时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596071379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1787221,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/45/55/97c25ffc.jpg","nickname":"薄荷微凉ζ","note":"","ucode":"F4F7508F515E9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292133,"discussion_content":"我也想问这里想说什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595088751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220010,"user_name":"Geek_8868d7","can_delete":false,"product_type":"c1","uid":1855146,"ip_address":"","ucode":"202337B7EDDEA7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLnL02lia3my7bp5YHia9L8mtIoTnVZmDDr49ibZI3uTVrkDw0qQbuIkDBjOC6jE3Zf0yfBibk7F61JjA/132","comment_is_top":false,"comment_ctime":1590134655,"is_pvip":false,"replies":[{"id":"81899","content":"你可以在微信上把相应的图发我看一下。你这样描述，我看不出来哪里不合理。还是要分析图表的曲线。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1590716868,"ip_address":"","comment_id":220010,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590134655","product_id":100042501,"comment_content":"高老师好，我们项目做的性能，领导定的指标是tps无特殊要求，并发50，90%响应时间2s以内。他们在压测时，单功能比如“”查询”，脚本设置的是50个线程，ramp-up时间1s,循环300次。我看了很多网上说的，总觉得这样很不合理。还想请教下老师是否合理？如果不合理应该设置成多少呢？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496023,"discussion_content":"你可以在微信上把相应的图发我看一下。你这样描述，我看不出来哪里不合理。还是要分析图表的曲线。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590716868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208570,"user_name":"mmf","can_delete":false,"product_type":"c1","uid":1946545,"ip_address":"","ucode":"A9E5762923F348","user_header":"","comment_is_top":false,"comment_ctime":1587384060,"is_pvip":false,"replies":[{"id":"82013","content":"完全不知道你这个问题是什么。你这样的问题，只能现场分析了。哈。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1590754515,"ip_address":"","comment_id":208570,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587384060","product_id":100042501,"comment_content":"高老师，请教一下jmeter的TCP测试查看结果树是响应成功了，查看数据库确实有数值，字节数为46，但取样器结果显示发送字节为0，聚合报告显示SentKB&#47;SEC为0.00，这边知道哪里出问题吗","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492517,"discussion_content":"完全不知道你这个问题是什么。你这样的问题，只能现场分析了。哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590754515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193160,"user_name":"自渡。","can_delete":false,"product_type":"c1","uid":1907278,"ip_address":"","ucode":"3E3EB3DE28CC46","user_header":"https://static001.geekbang.org/account/avatar/00/1d/1a/4e/a946ca99.jpg","comment_is_top":false,"comment_ctime":1584885274,"is_pvip":false,"replies":[{"id":"73719","content":"这是必须的。这么明显的性能问题，肯定要先解决。<br>解决前先判断下业务需求是什么。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1584927433,"ip_address":"","comment_id":193160,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1584885274","product_id":100042501,"comment_content":"老师你好，我是新手，请教一个问题，我要测一个系统哪些接口响应慢，我做了30个并发的demo，单场景（登录，一个页面的查询操作），tps就不涨了，登录接口的响应时间从1秒涨到10几秒，是否在这个压力下，分析哪些是慢的接口","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488514,"discussion_content":"这是必须的。这么明显的性能问题，肯定要先解决。\n解决前先判断下业务需求是什么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584927433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1907278,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/1a/4e/a946ca99.jpg","nickname":"自渡。","note":"","ucode":"3E3EB3DE28CC46","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212168,"discussion_content":"高楼老师，关于脚本设计有几个问题请教\n1.一个页面有新增4，编辑1，查询4，删除1 几个操作点（数字代表使用频率），性能脚本里要把每个操作都写到吗，还是只写常用的业务点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584942558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189709,"user_name":"小呀么小二郎","can_delete":false,"product_type":"c1","uid":1326905,"ip_address":"","ucode":"149540DCFDF43E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/39/b1558fc9.jpg","comment_is_top":false,"comment_ctime":1584541971,"is_pvip":false,"replies":[{"id":"73051","content":"认真思考了。代码必须得练习，这是做IT想生存下去逃不掉的。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1584545854,"ip_address":"","comment_id":189709,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584541971","product_id":100042501,"comment_content":"今天的思考题<br>第一个我不会，之前背接口测试面试题的时候，很常见的一道题就是GET请求和POST请求的区别，但是由于自己不会写代码（还是主观能动性不强，不会也不肯去学），也从来没有去想过，在代码层面的不同到底是什么。背了一堆，其实也没理解。我汇总了一下评论里的优秀答案，记在自己的小本本上了，也不是自己的答案，就不发了。<br><br>2、断言的作用是什么？如何使用断言呢？<br>断言指的是服务器端将业务成功的标识传递给客户端后，客户端判断是否正常接收到了这个标识的过程。<br>应该使用有业务含义的判断标识。<br><br>总结了一下老师文中提及的需要注意的地方：<br>1、写脚本需要知道接口规范和后端逻辑。<br>2、了解业务规则是做脚本的前提条件，也是性能测试工程师的第一步。<br>3、要先看懂问题，再处理问题。<br>4、测试工具的成功，并不等于业务的成功。<br>5、做脚本的时候，断言必须加。<br>6、脚本尽可能写简单。<br><br><br>作为一名真小白，感觉老师讲的非常细致，条理清楚并且有逻辑。然后还不停告诉我们，不仅要“知其然”，更要“知其所以然”。谨记老师教诲。多学习，多思考，多实践。","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487771,"discussion_content":"认真思考了。代码必须得练习，这是做IT想生存下去逃不掉的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584545854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189234,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1584491839,"is_pvip":false,"replies":[{"id":"72985","content":"再来碗胡辣汤吧。😄😄😄","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1584493694,"ip_address":"","comment_id":189234,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584491839","product_id":100042501,"comment_content":"饼大量足，吃的很饱","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487642,"discussion_content":"再来碗胡辣汤吧。😄😄😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584493694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185630,"user_name":"suke","can_delete":false,"product_type":"c1","uid":1007753,"ip_address":"","ucode":"C0287C31A4F45B","user_header":"","comment_is_top":false,"comment_ctime":1583650093,"is_pvip":false,"replies":[{"id":"71699","content":"是的。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1583655657,"ip_address":"","comment_id":185630,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583650093","product_id":100042501,"comment_content":"老师文章中测试过程中的tps 时序图是jmeter测试完成后自动生成的么？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486441,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583655657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170587,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1578639235,"is_pvip":false,"replies":[{"id":"66220","content":"这个？？？<br>10秒启动100个线程。平均下来不就是100ms启动一个线程吗？","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1578753446,"ip_address":"","comment_id":170587,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1578639235","product_id":100042501,"comment_content":"如果我们配置了 100 线程，这里配置为 10 秒，那么就是 100&#47;(10s*1000ms)=1 线程 &#47;10ms  这个公式没看懂，老师可以讲一下吗？谢谢","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481029,"discussion_content":"这个？？？\n10秒启动100个线程。平均下来不就是100ms启动一个线程吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578753446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1713957,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/27/25/14d6c358.jpg","nickname":"Geek_70990e","note":"","ucode":"E3C42E3EC79EDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372728,"discussion_content":"老师，这里指的是10S启动100个线程而不是10S运行完100个线程，可以这样理解吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620444662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170011,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1578492137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578492137","product_id":100042501,"comment_content":"断言会不会影响压测试机发虚拟用户数的速度？","like_count":0},{"had_liked":false,"id":169612,"user_name":"吴小喵","can_delete":false,"product_type":"c1","uid":1392780,"ip_address":"","ucode":"A8CB5407A89593","user_header":"https://static001.geekbang.org/account/avatar/00/15/40/8c/bc76ecd3.jpg","comment_is_top":false,"comment_ctime":1578388535,"is_pvip":false,"replies":[{"id":"65808","content":"linux下面用Tcpdump就可以。windows用wireshark。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1578395584,"ip_address":"","comment_id":169612,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578388535","product_id":100042501,"comment_content":"老师，tcp抓包用的什么工具呀","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480635,"discussion_content":"linux下面用Tcpdump就可以。windows用wireshark。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578395584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167834,"user_name":"月亮和六便士","can_delete":false,"product_type":"c1","uid":1080894,"ip_address":"","ucode":"EFFCB9171D4B4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/3e/82202cc8.jpg","comment_is_top":false,"comment_ctime":1577946769,"is_pvip":false,"replies":[{"id":"65142","content":"拆时间看哪里长。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1577950501,"ip_address":"","comment_id":167834,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577946769","product_id":100042501,"comment_content":"老师 ”要想解决这个问题，就要先确定服务端是可以正常连通的“  确定了服务端可以联通，然后怎么解决timeout？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480016,"discussion_content":"拆时间看哪里长。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577950501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167474,"user_name":"土耳其小土豆","can_delete":false,"product_type":"c1","uid":1785659,"ip_address":"","ucode":"B16574EF28525E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/3f/3b/119fd0ef.jpg","comment_is_top":false,"comment_ctime":1577835120,"is_pvip":false,"replies":[{"id":"65005","content":"话说的没毛病。不过在性能的专栏中就得说性能的话哦。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1577836932,"ip_address":"","comment_id":167474,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577835120","product_id":100042501,"comment_content":"post的请求体放到body里、get的请求的消息体放到请求头里面、所以post请求相对较安全。","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479876,"discussion_content":"话说的没毛病。不过在性能的专栏中就得说性能的话哦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577836932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}