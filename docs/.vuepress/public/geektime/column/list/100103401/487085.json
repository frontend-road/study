{"id":487085,"title":"15 | 挂起函数：Kotlin协程的核心","content":"<p>你好，我是朱涛。这节课，我们来学习协程的挂起函数。</p><p>挂起函数，是Kotlin协程当中最基础、最重要的知识点。如果对协程的挂起函数没有足够的认识，我们后续的学习将会困难重重。如果不理解挂起函数，我们将无法理解协程的非阻塞；如果不了解挂起函数，我们将无法掌握Channel、Flow等API；如果不理解挂起函数，我们写出来的代码也会漏洞百出，就更别提优化软件架构了。</p><p>相反，如果能将挂起函数理解透彻，我们后面的学习也会更加轻松一些。所以这节课，我会从应用和原理两个角度，来带你理解挂起函数，包括如何使用挂起函数来优化异步任务，以及挂起函数的CPS当中的Continuation到底是什么。通过对这两个维度的学习，你在更轻易地掌握挂起函数应用场景的同时，对它的底层原理也会有一定认识。</p><p>那么接下来，你一定要打起精神，我们一起来攻克这个关键的知识点！</p><h2>挂起函数：Kotlin协程的优势</h2><p>通过前面课程的学习，我们已经知道了：协程就像是轻量级的线程一样。用线程能实现的功能，我们借助launch和async也同样可以做到。</p><p>不过你可能会好奇，如果只是把thread{} 替换成launch{}，那协程比起线程也没什么特殊的优势吧？<strong>仅仅只是因为“轻量”“非阻塞”，我们就应该放弃线程，拥抱协程吗？</strong></p><!-- [[[read_end]]] --><p>其实，Kotlin协程最大的优势，就在于它的挂起函数。虽然很多编程语言都有协程的特性，但目前为止，只有Kotlin独树一帜，引入了“挂起函数”的概念。另外尽管有些语言的协程底层，也存在“挂起恢复”的概念，但是将这一概念直接暴露给开发者，直接用于修饰一个函数的，Kotlin算是做了一种创新。</p><p>那么，挂起函数到底有什么神奇的呢？我们先来看一段简单的Java代码：</p><pre><code class=\"language-java\">// 代码段1\n\ngetUserInfo(new CallBack() {\n    @Override\n    public void onSuccess(String response) {\n        if (response != null) {\n            System.out.println(response);\n        }\n    }\n});\n</code></pre><p>在这段代码中，我们发起了一个异步请求，从服务端查询用户的信息，通过CallBack返回response。这样的代码看起来没什么问题，平时我们写代码的时候也经常写类似的代码。不过实际的商业项目不可能这么简单，有的时候，我们可能需要连续执行几个异步任务，比如说，查询用户信息 --&gt; 查找该用户的好友列表 --&gt;拿到好友列表后，查找该好友的动态。</p><p>这样一来，我们的代码就难免会往下面这个方向发展：</p><pre><code class=\"language-plain\">// 代码段2\n\ngetUserInfo(new CallBack() {\n    @Override\n    public void onSuccess(String user) {\n        if (user != null) {\n            System.out.println(user);\n            getFriendList(user, new CallBack() {\n                @Override\n                public void onSuccess(String friendList) {\n                    if (friendList != null) {\n                        System.out.println(friendList);\n                        getFeedList(friendList, new CallBack() {\n                            @Override\n                            public void onSuccess(String feed) {\n                                if (feed != null) {\n                                    System.out.println(feed);\n                                }\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    }\n});\n</code></pre><p>只要你参与过大型软件的开发，不管你用的是什么编程语言，你大概率都见到过类似上面的代码模式：<strong>回调地狱</strong>。</p><p>我们给它取这个名字是有原因的，以上代码存在诸多缺陷：<strong>可读性差、扩展性差、维护性差，极易出错</strong>！想象一下，如果让你基于以上代码再扩展出“超时取消”“出错重试”“进度展示”等相关功能，你会不会觉得头疼？</p><p>所以这时候，就该轮到Kotlin协程出场了。让我们用协程的挂起函数，来重构上面的代码：</p><pre><code class=\"language-plain\">// 代码段3\n\nval user = getUserInfo()\nval friendList = getFriendList(user)\nval feedList = getFeedList(friendList)\n</code></pre><p>你看，是不是简洁到了极致？这就是Kotlin协程的魅力：<strong>以同步的方式完成异步任务</strong>。<br>\n注意，以上代码之所以能写成类似同步的方式，关键还是在于getUserInfo()、getFriendList()、getFeedList()这三个请求函数的定义。</p><pre><code class=\"language-plain\">// 代码段4\n\n// delay(1000L)用于模拟网络请求\n\n//挂起函数\n// ↓\nsuspend fun getUserInfo(): String {\n    withContext(Dispatchers.IO) {\n        delay(1000L)\n    }\n    return \"BoyCoder\"\n}\n\n//挂起函数\n// ↓\nsuspend fun getFriendList(user: String): String {\n    withContext(Dispatchers.IO) {\n        delay(1000L)\n    }\n    return \"Tom, Jack\"\n}\n\n//挂起函数\n// ↓\nsuspend fun getFeedList(list: String): String {\n    withContext(Dispatchers.IO) {\n        delay(1000L)\n    }\n    return \"{FeedList..}\"\n}\n</code></pre><p>从以上代码中，我们可以看到，<strong>所谓的挂起函数，其实就是比普通的函数多了一个suspend关键字而已</strong>。如果去掉这个suspend关键字，所有的函数都会变成普通函数。</p><blockquote>\n<p>代码中的withContext(Dispatchers.IO)，作用是控制协程执行的线程池，具体细节我们会在第17讲中介绍。</p>\n</blockquote><p>既然如此，那么这个suspend关键字的作用是啥呢？挂起函数到底特别在哪呢？</p><p>实际上，挂起函数最神奇的地方，就在于它的挂起和恢复功能。从字面上看，suspend这个词就是“挂起”的意思，而它既然能被<strong>挂起</strong>，自然就还可以被<strong>恢复</strong>。它们两个一般是成对出现的。</p><blockquote>\n<p>还记得我们在讲<a href=\"https://time.geekbang.org/column/article/485632\">协程思维模型</a>的时候提到的“非阻塞”概念吗？这主要就归功于Kotlin协程的挂起函数的能力。</p>\n</blockquote><p>不过，我单纯用文字告诉你Kotlin协程支持挂起和恢复，你一定没有什么概念，我做了一个小动画，描述了挂起函数整体的执行流程，同时也展示了其背后更多的细节。需要注意的是，动画当中出现的“闪烁”，模拟的是请求网络。<strong>你一定要多看几遍，确保没有遗漏其中的细节。</strong></p><p><video poster=\"https://media001.geekbang.org/10b5350f78f449eb87ac16990d70a654/snapshots/d2a4912d2a9a40d28f19c9e02e2edc70-00003.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/3164eee7-17efcb599ef-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/d9f1c79e558b4dd7a3f3bdca3dca8595/96dad61fb19940d5b29f0bd13d114e60-c6276f52ec7c29bbaf6944275b932cfc-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>然后，我也再给你重点解释下其中的关键点：</p><ul>\n<li>在IntelliJ当中，挂起函数会有一个特殊的箭头标记，这样就便于我们分辨出当前调用的函数是否是普通函数。调用挂起函数的位置，我们叫做是<strong>挂起点</strong>。</li>\n<li>另外，表面上看起来是同步的代码，实际上也涉及到了线程切换，一行代码，切换了两个线程。\n<ul>\n<li>比如“val user = getUserInfo()”，其中“=”左边的代码运行在主线程，而“=”右边的代码运行在IO线程。</li>\n<li>每一次从主线程到IO线程，都是一次协程挂起。</li>\n<li>每一次从IO线程到主线程，都是一次协程恢复。</li>\n</ul>\n</li>\n<li>挂起和恢复，这是挂起函数<strong>特有的能力</strong>，普通函数是不具备的。</li>\n<li>挂起，只是将程序执行流程转移到了其他线程，主线程不会被阻塞。如果以上代码运行在Android系统，我们的App仍然可以响应用户的操作，主线程并不繁忙。相信现在，你对协程思维模型又会有更加深刻的体会了。</li>\n</ul><p>好，挂起函数的执行流程我们已经很清楚了。借助挂起函数，我们可以用同步的方式来写异步代码，对比起前面“回调地狱”式的代码，挂起函数写出来的代码可读性更好、扩展性更好、维护性更好，并且更难出错。</p><p>这个时候，你也许会感慨：挂起函数真的是太神奇了！简直就跟魔法一样！<strong>那么，Kotlin协程到底是如何做到一行代码切换两个线程的呢？</strong></p><p>其实，Kotlin协程当中并不存在什么“魔法”。这一切的细节，都藏在了挂起函数的 <strong>suspend</strong> 关键字里。</p><h2>深入理解suspend</h2><p>到目前为止，我们已经知道了：suspend，是Kotlin当中的一个关键字，它主要的作用是用于定义“挂起函数”。不过如果你有仔细留意上节课当中的一段代码，你就会发现，同样的一个函数，加上suspend修饰以后，它的<strong>函数类型</strong>就会发生改变。</p><p>我们来回忆一下上节课的那段代码：</p><pre><code class=\"language-plain\">// 代码段5\n\nfun func1(num: Int): Double {\n    return num.toDouble()\n}\n/*\nfunc1与func3唯一的区别\n   ↓                         */\nsuspend fun func3(num: Int): Double {\n    delay(100L)\n    return num.toDouble()\n}\n\nval f1: (Int) -&gt; Double = ::func1\nval f2: suspend (Int) -&gt; Double = ::func3\n\nval f3: (Int) -&gt; Double = ::func3 // 报错\nval f4: suspend (Int) -&gt; Double = ::func1 // 报错\n</code></pre><p>可见，同样是Int作为参数，Double作为返回值，有没有suspend修饰，它们两者的函数类型是不一样的。“suspend (Int) -&gt; Double”与“(Int) -&gt; Double”并不能互相赋值。</p><p>在讲<a href=\"https://time.geekbang.org/column/article/476637\">高阶函数</a>的时候，我提到过Kotlin的函数类型，其实只跟参数、返回值、接收者相关，不过现在又加了一条：还跟suspend相关。</p><blockquote>\n<p>补充：如果你接触过<a href=\"https://github.com/JetBrains/compose-jb\">Compose</a>，你会发现其中的@Composable跟suspend一样，也可以改变一个函数的类型，不过这个并不是我们要了解的重点，这里只是帮助你建立一个知识连接，如果你将来遇到了Compose，你就可以快速理解了。</p>\n</blockquote><p><strong>那么，suspend修饰的函数，到底会变成什么类型？</strong>如果你将挂起函数与前面“回调地狱的代码”放在一起对比，再结合我们<a href=\"https://time.geekbang.org/column/article/473529\">第3讲</a>学过的Kotlin原理，应该就会找到一些头绪了：</p><p><img src=\"https://static001.geekbang.org/resource/image/08/68/08c49bd12047359fc8cea409fc6a2568.png?wh=1442x811\" alt=\"图片\"></p><p>其实，<strong>挂起函数的本质，就是Callback</strong>。</p><p>别忘了，我们还有Kotlin编译器这个“幕后的翻译官”啊！虽然我们写出来的挂起函数并没有任何Callback的逻辑，但是，当Kotlin编译器检测到suspend关键字修饰的函数以后，就会自动将挂起函数转换成带有CallBack的函数。</p><p>如果我们将上面的挂起函数反编译成Java，结果会是这样：</p><pre><code class=\"language-java\">// 代码段6\n\n//                              Continuation 等价于 CallBack\n//                                         ↓         \npublic static final Object getUserInfo(Continuation $completion) {\n  ...\n  return \"BoyCoder\";\n}\n</code></pre><p>从反编译的结果来看，挂起函数确实变成了一个带有CallBack的函数，只是这个CallBack换了个名字，叫做Continuation。我们来看看Continuation在Kotlin中的定义：</p><pre><code class=\"language-plain\">// 代码段7\n\npublic interface Continuation&lt;in T&gt; {\n// ...\n\n//      相当于 CallBack的onSuccess   结果   \n//                 ↓                 ↓\n    public fun resumeWith(result: Result&lt;T&gt;)\n}\n\ninterface CallBack {\n    void onSuccess(String response);\n}\n</code></pre><p>根据以上定义我们其实能发现，<strong>Continuation本质上也就是一个带有泛型参数的CallBack</strong>，只是它的名字看起来有点吓人而已。这个“从挂起函数转换成CallBack函数”的过程，被叫做是CPS转换（Continuation-Passing-Style Transformation）。</p><p>看，Kotlin官方要将CallBack命名为Continuation的原因也出来了：Continuation道出了它的实现原理。当然，为了理解挂起函数，我们用CallBack会更加简明易懂。</p><p>下面我用动画来演示一下挂起函数在CPS转换过程中，函数签名的变化：</p><p><img src=\"https://static001.geekbang.org/resource/image/37/92/3732f7a3473e82c5a5d109a18d87f992.gif?wh=720x405\" alt=\"图片\"></p><blockquote>\n<p><strong>注意</strong>：挂起函数CPS转换后的内部逻辑，其实要远比演示的复杂，这个我们到源码篇再深究，我们暂时只关注它<strong>函数签名</strong>的变化。</p>\n</blockquote><p>你能看到，在上面CPS转换的过程中，函数的类型发生了变化：“suspend ()-&gt;String” 变成了 “(Continuation)-&gt; Any?”。</p><p>而这就意味着，如果你在Java中访问一个Kotlin挂起函数getUserInfo()，会看到Java里的getUserInfo()的类型是“(Continuation)-&gt; Object”（即接收Continuation为参数，返回值是Object）。</p><p><img src=\"https://static001.geekbang.org/resource/image/5b/90/5b81e4a51acaafa1ce56f7a888037790.png?wh=792x286\" alt=\"图片\"></p><p>到这里，我们就只剩下最后一个问题需要搞清楚了，那就是：<strong>Continuation到底是什么</strong>？如果你查<a href=\"https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD/continuation\">词典</a>和<a href=\"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E7%BB%AD%E4%BD%93\">维基百科</a>，可能会一头雾水，因为这个词太抽象了。</p><p>让我结合前面的代码案例，用更加通俗的语言解释给你听。</p><p>首先，我们只需要把握住Continuation的词源Continue即可。Continue是“继续”的意思，Continuation则是“接下来要做的事情”。放到程序中，Continuation就代表了，“程序继续运行下去需要执行的代码”，“接下来要执行的代码”，或者是“剩下的代码”。</p><p>就以上面的代码为例，当程序运行getUserInfo()这个挂起函数的时候，它的“Continuation”则是下图红框的代码：</p><p><img src=\"https://static001.geekbang.org/resource/image/06/yb/060c08db5f586ed8e189cfa26eaa6yyb.png?wh=960x376\" alt=\"图片\"></p><p>这样理解了Continuation以后，CPS也就容易理解了，它其实就是<strong>将程序接下来要执行的代码进行传递的一种模式</strong>。</p><p>而CPS转换，就是<strong>将原本的同步挂起函数转换成CallBack异步代码</strong>的过程。这个转换是编译器在背后做的，我们程序员对此并无感知。</p><p><img src=\"https://static001.geekbang.org/resource/image/03/22/03d156ec6a31d650c6634f486dc06222.gif?wh=720x405\" alt=\"图片\"></p><p>根据这个动图，可以看到当程序执行到getUserInfo()的时候，剩下的未执行代码都被一起打包了起来，以Continuation的形式，传递给了getUserInfo()的Callback回调当中。当然，这种方式其实只是大致模拟了挂起函数的CPS转换过程，实际细节要远比这个复杂。但这对于现阶段的学习来说，已经完全够用了。</p><p>以上就是Kotlin挂起函数的核心原理，它的挂起和恢复，其实也是通过CPS转换来实现的。在后面学习源码篇的时候，我们还会继续跟Continuation继续打交道。现在我们看着CPS的过程好像很简单，等到深入底层的时候，你会发现Continuation是多么的复杂和精妙。</p><p>这里，我们再来看看之前的协程思维模型：</p><p><img src=\"https://static001.geekbang.org/resource/image/c6/1b/c6e735653c09f05ea94f5478d5e0d61b.gif?wh=1080x492\" alt=\"图片\"></p><p>所以，现在我们可以理出一条线索了：<strong>协程之所以是非阻塞，是因为它支持“挂起和恢复”；而挂起和恢复的能力，主要是源自于“挂起函数”；而挂起函数是由CPS实现的，其中的Continuation，本质上就是Callback</strong>。</p><p>读完上面的这段话，也许你会忍不住好奇：<strong>协程跟挂起函数之间是什么关系？</strong></p><h2>协程与挂起函数</h2><p>你可能觉得，既然协程和挂起函数都是支持挂起和恢复的，那它们两个是不是同一个东西呢？</p><p>答案当然是<strong>否定</strong>的。</p><p>关于协程和挂起函数的关系，我们暂时还不适合深入源码层面去做探讨。不过，从我们目前已有的信息，就可以直接推断出，它们之间肯定是有着千丝万缕的联系的。让我们来看个简单的例子：</p><pre><code class=\"language-plain\">// 代码段8\n\nfun main() {\n    getUserInfo() // 报错\n}\n\nsuspend fun getUserInfo(): String {\n    withContext(Dispatchers.IO) {\n        delay(1000L)\n    }\n    return \"BoyCoder\"\n}\n</code></pre><p>在上面的代码中，我们直接在main函数当中调用了getUserInfo()这个挂起函数，这时候，我们发现IDE会报错，报错的具体内容是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/68/aa/68010f8b8bd5de8d58dd8576828d92aa.png?wh=945x247\" alt=\"图片\"></p><p>这个报错信息的意思是：<strong>挂起函数，只能在协程当中被调用，或者是被其他挂起函数调用</strong>。这个意思也很好理解，对于这样的要求，我们很容易就能写出下面的代码：</p><pre><code class=\"language-plain\">// 代码段9\n\n// 在协程中调用getUserInfo()\nfun main() = runBlocking {\n    val user = getUserInfo()\n}\n\n// 在另一个挂起函数中调用getUserInfo()\nsuspend fun anotherSuspendFunc() {\n    val user = getUserInfo()\n}\n</code></pre><p>代码写到这里，很多人都会满足于这样的结果。但实际上，以上两种方式，它们之间是可以继续深入并且挖掘出共性的。</p><p>让我们回过头来看看runBlocking的函数签名：</p><pre><code class=\"language-plain\">// 代码段10\n\npublic actual fun &lt;T&gt; runBlocking(\n    context: CoroutineContext, \n    block: suspend CoroutineScope.() -&gt; T\n): T {\n}\n</code></pre><p>我们重点关注它的第二个参数block的类型“suspend CoroutineScope.() -&gt; T”，看到其中的suspend关键字了吗？<strong>原来block也是一个挂起函数的类型</strong>！那么，在block当中可以调用挂起函数，就一点也不奇怪了！</p><p>所以说，虽然“协程和挂起函数”都可以调用“挂起函数”，但是协程的Lambda，也是挂起函数。所以，它们本质上都是因为“挂起函数可以调用挂起函数”。</p><p>也就是说，站在目前的阶段来看，我们可以认为：<strong>挂起和恢复，是协程的一种底层能力；而挂起函数，是这种底层能力的一种表现形式，通过暴露出来的suspend关键字，我们开发者可以在上层，非常方便地使用这种底层能力。</strong></p><h2>小结</h2><p>这节课，我们主要学习了Kotlin协程当中的最核心的特性：<strong>挂起函数</strong>。</p><p>挂起函数可以极大地简化异步编程，让我们能够<strong>以同步的方式写异步代码</strong>。相比“回调地狱”式的代码，挂起函数写出来的代码<strong>可读性更好、扩展性更好、维护性更好，也更难出错</strong>。而除此之外，你也需要牢记以下这些核心要点，来更好地掌握挂起函数。</p><ul>\n<li>要定义挂起函数，我们只需在普通函数的基础上，增加一个<strong>suspend关键字</strong>。suspend这个关键字，是会改变函数类型的，“suspend (Int) -&gt; Double”与“(Int) -&gt; Double”并不是同一个类型。</li>\n<li>挂起函数，由于它拥有<strong>挂起和恢复</strong>的能力，因此对于同一行代码来说，“=”左右两边的代码分别可以执行在不同的线程之上。而这一切，都是因为Kotlin编译器这个幕后的翻译官在起作用。</li>\n<li><strong>挂起函数的本质，就是Callback</strong>。只是说，Kotlin底层用了一个更加高大上的名字，叫Continuation。而Kotlin编译器将suspend翻译成Continuation的过程，则是CPS转换。这里的Continuation是代表了，“程序继续运行下去需要执行的代码”，“接下来要执行的代码”，或者是 “剩下的代码”。</li>\n</ul><p>最后，我们还探索了协程与挂起函数之间的关系。我们发现：<strong>挂起函数，只能在协程当中被调用，或者是被其他挂起函数调用</strong>。但协程中的block，本质上仍然是挂起函数。</p><p>所以，我们可以认为：挂起和恢复是协程的一种底层能力；而挂起函数则是一种上层的表现形式。</p><p><img src=\"https://static001.geekbang.org/resource/image/19/bd/19591ff06ebc553ca6fa695a3914bdbd.jpg?wh=2000x1279\" alt=\"\"></p><h2>思考题</h2><p>前面我们提到“挂起函数只能在协程当中被调用，或者是被其他挂起函数调用”，而本质上，还是因为“挂起函数可以调用挂起函数”。那么，你能找出更加底层的证据吗？</p><p>换个方式理解就是：凭什么挂起函数可以调用挂起函数，而普通函数不能调用挂起函数？它的底层逻辑到底什么？</p><pre><code class=\"language-plain\">// 代码段11\n\nfun normalFunc() {\n    val user = getUserInfo() // 报错\n}\n\nsuspend fun anotherSuspendFunc() {\n    val user = getUserInfo() // 通过\n}\n</code></pre><p>欢迎在留言区分享你的思考和答案，也欢迎你把今天的内容分享给更多的朋友，我们一起探讨和进步。</p>","neighbors":{"left":{"article_title":"14 | 如何启动协程？","id":486305},"right":{"article_title":"16 | Job：协程也有生命周期吗？","id":487930}},"comments":[{"had_liked":false,"id":334504,"user_name":"$Kotlin","can_delete":false,"product_type":"c1","uid":2148188,"ip_address":"","ucode":"098E9C8F60D865","user_header":"https://static001.geekbang.org/account/avatar/00/20/c7/5c/94cb3a1a.jpg","comment_is_top":false,"comment_ctime":1644980062,"is_pvip":false,"replies":[{"id":"122251","content":"很棒的答案。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645062939,"ip_address":"","comment_id":334504,"utype":1}],"discussion_count":2,"race_medal":0,"score":"53184587614","product_id":100103401,"comment_content":"public interface Continuation&lt;in T&gt; {<br>    &#47;**<br>     * The context of the coroutine that corresponds to this continuation.<br>     *&#47;<br>    public val context: CoroutineContext<br><br>    &#47;**<br>     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the<br>     * return value of the last suspension point.<br>     *&#47;<br>    public fun resumeWith(result: Result&lt;T&gt;)<br>}<br>suspend函数的入参Continuation，看源码可以知道需要有一个协程上下文CoroutineContext信息，只有在协程作用域里才能传递。","like_count":13,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551566,"discussion_content":"很棒的答案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645062939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005631,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/58/3f/85a762d6.jpg","nickname":"cactus","note":"","ucode":"06F36B1D846E28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551568,"discussion_content":"很棒的答案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645063012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336275,"user_name":"Airsaid","can_delete":false,"product_type":"c1","uid":1115302,"ip_address":"","ucode":"5B90BC0044F376","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/a6/18c4f73c.jpg","comment_is_top":false,"comment_ctime":1646045283,"is_pvip":false,"replies":[{"id":"122954","content":"首先，关键字其实是更好的方案，因为它是语法级的支持，注解不是。关键字是语法的一部分，而注解只是额外标注的信息，这在编译器分析抽象语法树的时候，两者的差异是很大的。<br><br>Compose之所以使用注解，是因为Compose没有增加关键字的权限，只能通过编译器插件来实现内部逻辑。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1646135391,"ip_address":"","comment_id":336275,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40300750947","product_id":100103401,"comment_content":"老师您好，为什么 Kotlin 选择使用关键字来定义挂起函数而不是使用注解呢？（例如 Compose 就使用的是注解的方式）","like_count":10,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553931,"discussion_content":"首先，关键字其实是更好的方案，因为它是语法级的支持，注解不是。关键字是语法的一部分，而注解只是额外标注的信息，这在编译器分析抽象语法树的时候，两者的差异是很大的。\n\nCompose之所以使用注解，是因为Compose没有增加关键字的权限，只能通过编译器插件来实现内部逻辑。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646135391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334484,"user_name":"墨方","can_delete":false,"product_type":"c1","uid":1295549,"ip_address":"","ucode":"638AE114D4CAC5","user_header":"https://static001.geekbang.org/account/avatar/00/13/c4/bd/44757daf.jpg","comment_is_top":false,"comment_ctime":1644975450,"is_pvip":false,"replies":[{"id":"122254","content":"很棒的答案！","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645063147,"ip_address":"","comment_id":334484,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27414779226","product_id":100103401,"comment_content":"被调用的挂起函数需要传入一个Continuation(当然这个传入也是幕后编译做的), 没有被suspend修饰的函数是没有Continuation参数的,所以被调用的挂起函数没有办法从普通函数中获取一个Continuation。","like_count":7,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551570,"discussion_content":"很棒的答案！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645063147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345771,"user_name":"AKEI","can_delete":false,"product_type":"c1","uid":2762604,"ip_address":"","ucode":"D6836002F27010","user_header":"https://static001.geekbang.org/account/avatar/00/2a/27/6c/5abd5e9f.jpg","comment_is_top":false,"comment_ctime":1652585275,"is_pvip":false,"replies":[{"id":"126602","content":"它有非阻塞的特性，另外，它还更轻量，在特定场景下是会更好的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1653819345,"ip_address":"","comment_id":345771,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10242519867","product_id":100103401,"comment_content":"所以kotlin的挂起函数只是相当于让回调函数更简洁，相当于封装了线程池，并没有任何更高效的性能优化是吗？","like_count":3,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574071,"discussion_content":"它有非阻塞的特性，另外，它还更轻量，在特定场景下是会更好的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653819345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353459,"user_name":"郑峰","can_delete":false,"product_type":"c1","uid":1112517,"ip_address":"美国","ucode":"4D4C0C020E507C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/c5/95b97dfa.jpg","comment_is_top":false,"comment_ctime":1659475587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5954442883","product_id":100103401,"comment_content":"挂起函数有回复点，普通函数没有恢复点。挂起函数无法在普通函数中返回。","like_count":1},{"had_liked":false,"id":343130,"user_name":"Luckykelan","can_delete":false,"product_type":"c1","uid":1057080,"ip_address":"","ucode":"BC36CD8E75E11D","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/38/aad89fe5.jpg","comment_is_top":false,"comment_ctime":1650643710,"is_pvip":false,"replies":[{"id":"125648","content":"这里的挂起，有两层含义：<br><br>1. 一个是当前线程不会被阻塞，可以执行其他任务。<br>2.挂起点剩下的代码，会留到之后再执行。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1651246874,"ip_address":"","comment_id":343130,"utype":1}],"discussion_count":6,"race_medal":0,"score":"5945611006","product_id":100103401,"comment_content":"老师您好，有个问题不太清楚<br>val user = getUserInfo()<br>val friendList = getFriendList(user)<br>val feedList = getFeedList(friendList)<br>这段代码和协程思维模型那张动图一起看，代码执行到getUserInfo()函数时，这个函数就被挂起了，不是应该继续执行val friendList = getFriendList(user)吗？为什么实际上在这里没有继续执行而是等待了getUserInfo()的返回呢？","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568901,"discussion_content":"这里的挂起，有两层含义：\n\n1. 一个是当前线程不会被阻塞，可以执行其他任务。\n2.挂起点剩下的代码，会留到之后再执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651246874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2762604,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/27/6c/5abd5e9f.jpg","nickname":"AKEI","note":"","ucode":"D6836002F27010","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":572063,"discussion_content":"那如果val friendList = getFriendList(user)换成其他不依赖user的处理逻辑，是否由主线程继续往下执行，一直执行到第一个引用user的地方才会停下然后挂起主线程？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652585879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":568901,"ip_address":""},"score":572063,"extra":""},{"author":{"id":1126603,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/cb/485ad53d.jpg","nickname":"HurryYu","note":"","ucode":"12FA97B88C0D15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2762604,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/27/6c/5abd5e9f.jpg","nickname":"AKEI","note":"","ucode":"D6836002F27010","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576169,"discussion_content":"挂起的其实应该是协程，所以就算不依赖返回结果user，依然会等getUserInfo执行完成后，才会执行getFriendList","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655337742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":572063,"ip_address":""},"score":576169,"extra":""}]},{"author":{"id":1121318,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1c/26/663013c2.jpg","nickname":"    ","note":"","ucode":"274E99B7D68D5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570756,"discussion_content":"hello Luckykelan ! 上述的3个方法执行是包装在协程这个Task里面的，类比动图中的一个Task,而不是每个方法对应一个动图中的一个Task。而不阻塞线程是指执行当前这个协程的线程遇到该协程挂起之后还可以去做其他事情。等该协程恢复之后该线程再接着执行后续的方法，不知道能不能帮到你理解。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1651902797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020838,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/93/a6/679b3c6b.jpg","nickname":"Renext","note":"","ucode":"3C4418F7E86CD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121318,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1c/26/663013c2.jpg","nickname":"    ","note":"","ucode":"274E99B7D68D5A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575872,"discussion_content":"good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655167952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":570756,"ip_address":""},"score":575872,"extra":""}]},{"author":{"id":3081041,"avatar":"https://static001.geekbang.org/account/avatar/00/2f/03/51/791d0f5e.jpg","nickname":"LoneyZhou","note":"","ucode":"36B49F45760694","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591637,"discussion_content":"前面的课程案例，在一个普通方法里启动协程，协程内的代码不影响普通方法里的下一行代码（那些代码是在当前线程里执行的），而这个案例的几个方法都在协程代码块里，依托挂起函数，可以实现余下代码的挂起和恢复执行的能力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666744895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342490,"user_name":"InfoQ_0880b52232bf","can_delete":false,"product_type":"c1","uid":2066504,"ip_address":"","ucode":"F06FCC5294C260","user_header":"","comment_is_top":false,"comment_ctime":1650288865,"is_pvip":false,"replies":[{"id":"125164","content":"不错的角度，有点反证法的意思~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1650381192,"ip_address":"","comment_id":342490,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5945256161","product_id":100103401,"comment_content":"关于思考题，我想可以尝试逆向思考一下，假如普通函数可以调用挂起函数，那么会出现什么情况呢？<br>比如：我们在main方法里可以直接调用这三个挂起函数（实际不能直接调用），我们预期的结果是同步方式实现异步请求（这也是协程的特点之一），但其实按照非阻塞挂起的特点，main方法会直接打印“main end”，无法满足我们的预期：<br>fun main() {<br>    val userInfo = getUserInfo()<br>    val friendList = getFeedList(userInfo)<br>    val feedList = getFeedList(friendList)<br>    println(&quot;main end&quot;)<br>}<br><br>suspend fun getUserInfo(): String {<br>    withContext(Dispatchers.IO) { delay(1000L) }<br>    return &quot;BoyCoder&quot;<br>}<br><br>suspend fun getFriendList(user: String): String {<br>    withContext(Dispatchers.IO) { delay(1000L) }<br>    return &quot;Tom, Jack&quot;<br>}<br><br>suspend fun getFeedList(list: String): String {<br>    withContext(Dispatchers.IO) { delay(1000L) }<br>    return &quot;{FeedList..}&quot;<br>}","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565079,"discussion_content":"不错的角度，有点反证法的意思~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650381192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335377,"user_name":"Geek_Adr","can_delete":false,"product_type":"c1","uid":2876897,"ip_address":"","ucode":"129E17B7D3EB88","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e5/e1/a5064f88.jpg","comment_is_top":false,"comment_ctime":1645495971,"is_pvip":false,"replies":[{"id":"122571","content":"是的，异曲同工之妙。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645591277,"ip_address":"","comment_id":335377,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5940463267","product_id":100103401,"comment_content":"我理解 挂起函数（suspend 关键字）就类似于 注解，协程包含是具体解析与实现","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552762,"discussion_content":"是的，异曲同工之妙。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645591277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335234,"user_name":"jim","can_delete":false,"product_type":"c1","uid":1491946,"ip_address":"","ucode":"C12DB0F2B570F6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Urc67zDC8R6dh9U1ZFTF36icXewM1seehvOUYUs4hyWSsFzS5WQc2RcrE1Mzs8qtgib5SM5wFrVh22QcQd0JUUBw/132","comment_is_top":false,"comment_ctime":1645422809,"is_pvip":false,"replies":[{"id":"122451","content":":)","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645459074,"ip_address":"","comment_id":335234,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5940390105","product_id":100103401,"comment_content":"图文说明，写的真好。","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552440,"discussion_content":":)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645459074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334488,"user_name":"colin","can_delete":false,"product_type":"c1","uid":1120970,"ip_address":"","ucode":"60C4004CB755FF","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/ca/50c1fd43.jpg","comment_is_top":false,"comment_ctime":1644975847,"is_pvip":false,"replies":[{"id":"122255","content":"没错，具体的运行环境，就是Continuation还有上下文环境CoroutineContext。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645063217,"ip_address":"","comment_id":334488,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5939943143","product_id":100103401,"comment_content":"挂起函数本身并不支持挂起，所以它没法在普通函数中调用，而它之所以能在挂起函数中调用，是因为挂起函数最终都是在协程中被调用，是协程提供了挂起函数运行的环境。","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551571,"discussion_content":"没错，具体的运行环境，就是Continuation还有上下文环境CoroutineContext。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645063217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127306,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/8a/f7a3d5e6.jpg","nickname":"Allen","note":"","ucode":"3F69DAC14260DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551499,"discussion_content":"协程的本质是由 suspend 函数的挂起和恢复特性来实现的，而 suspend 挂起函数的实现又是由编译器通过 CPS 机制将同步代码转换成异步回调来实现的。\n\n挂起函数本身是支持挂起的，启动一个协程对应的 block 本身就是一个挂起函数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645025819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358943,"user_name":"Jevan Wu","can_delete":false,"product_type":"c1","uid":1510644,"ip_address":"北京","ucode":"3EAC7CCBB0B800","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/f4/6bd66c0e.jpg","comment_is_top":false,"comment_ctime":1665047812,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665047812","product_id":100103401,"comment_content":"老师您好，如果协程的挂起和恢复其实是切换线程运行，那这个过程会导致频繁线程切换，这在某些情况下会导致更多的时间和资源消耗吧？","like_count":0},{"had_liked":false,"id":353085,"user_name":"湘良君","can_delete":false,"product_type":"c1","uid":1251976,"ip_address":"陕西","ucode":"B866DFB6962E6F","user_header":"https://static001.geekbang.org/account/avatar/00/13/1a/88/81511d7b.jpg","comment_is_top":false,"comment_ctime":1659152543,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659152543","product_id":100103401,"comment_content":"请教下，有点困惑协程和suspend的关系。到底是协程的挂起能力依赖suspend来实现？还是说suspend挂起函数的实现依托于协程？","like_count":0},{"had_liked":false,"id":348396,"user_name":"余先声","can_delete":false,"product_type":"c1","uid":1509678,"ip_address":"","ucode":"1CCABE478259EF","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/2e/4badf056.jpg","comment_is_top":false,"comment_ctime":1655049782,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1655049782","product_id":100103401,"comment_content":"老师，问个问题，如果suspend里头并没有切换线程，也就是调用suspend的线程和执行suspend函数的线程是同一线程，那么suspend方法依然会阻塞当前调用线程，是这样的么？","like_count":0,"discussions":[{"author":{"id":1352254,"avatar":"","nickname":"快乐石头111","note":"","ucode":"9014A5F0442857","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592428,"discussion_content":"阻塞是针对于线程而言的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667394716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"安徽"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341512,"user_name":"20220106","can_delete":false,"product_type":"c1","uid":2884743,"ip_address":"","ucode":"DC9E91125B21C6","user_header":"","comment_is_top":false,"comment_ctime":1649666964,"is_pvip":false,"replies":[{"id":"124971","content":"没错，你可以理解为：暂停运行了。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1649953903,"ip_address":"","comment_id":341512,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1649666964","product_id":100103401,"comment_content":"小问题：挂起函数，被挂起后（被抓手）的挂起函数去干嘛了，就是暂停运行了嘛，看单词意思是这个意思。","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563253,"discussion_content":"没错，你可以理解为：暂停运行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649953903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2883914,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/01/4a/0561a54e.jpg","nickname":"小孔","note":"","ucode":"1AF3680D5F687D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":579292,"discussion_content":"有withContext(Dispatchers.IO)，是不是可以理解为在IO线程执行任务，只是在表面上是暂停运行了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657321836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":563253,"ip_address":""},"score":579292,"extra":""}]}]},{"had_liked":false,"id":340872,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1649208769,"is_pvip":false,"replies":[{"id":"124723","content":"不错的答案，赞~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1649435526,"ip_address":"","comment_id":340872,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649208769","product_id":100103401,"comment_content":"suspend 函数经过 CPS 转换，参数会多一个 Continuation 参数，其表示协程体，同时挂起函数内部会创建一个 SafeContinuaton 实例，将协程体的 continuation 保存到内部，SC 的作用是确保 resumeWith 只调用一次。","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560785,"discussion_content":"不错的答案，赞~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649435526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340860,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1649205793,"is_pvip":false,"replies":[{"id":"124725","content":"它们两者其实是差不多的，前者是Lambda，后者是函数。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1649435703,"ip_address":"","comment_id":340860,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649205793","product_id":100103401,"comment_content":"我觉得是协程体 block 才是 cotinuation 回调，suspend 函数严格意义上不是回调。","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560787,"discussion_content":"它们两者其实是差不多的，前者是Lambda，后者是函数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649435703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339076,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1647901292,"is_pvip":false,"replies":[{"id":"124005","content":"可以这么理解。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1648030066,"ip_address":"","comment_id":339076,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647901292","product_id":100103401,"comment_content":"suspend -&gt; Continuation -&gt;CoroutineContext + resumeWith<br>协程上下文才是挂起和回调的幕后黑手，😀，也就是说所有的挂起函数调用的时候最终都要依托于某个协程。<br>","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557951,"discussion_content":"可以这么理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648030066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337439,"user_name":"白泽丶","can_delete":false,"product_type":"c1","uid":1320595,"ip_address":"","ucode":"0F1C044AD1B3C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/93/b4791ee3.jpg","comment_is_top":false,"comment_ctime":1646824715,"is_pvip":false,"replies":[{"id":"123326","content":"这么理解是没错的。但还可以更接近本质一些。具体你可以参考一下其他同学的答案。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1646880441,"ip_address":"","comment_id":337439,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646824715","product_id":100103401,"comment_content":"加了 suspend 关键字的函数，才会被进行 CPS 转换，也就是说挂起函数在未编译时表现的只是表面的函数类型，最后会被翻译成另一种类型；而普通函数则一直是原来的类型，为了防止开发者误调，编译器才加了这个错误提示。suspend 应该也只是一个标记的作用，不知道这样理解对不对...","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555356,"discussion_content":"这么理解是没错的。但还可以更接近本质一些。具体你可以参考一下其他同学的答案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646880441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336116,"user_name":"的的喀喀湖","can_delete":false,"product_type":"c1","uid":1137138,"ip_address":"","ucode":"E95301D913F115","user_header":"https://static001.geekbang.org/account/avatar/00/11/59/f2/ef476ddc.jpg","comment_is_top":false,"comment_ctime":1645935465,"is_pvip":true,"replies":[{"id":"122847","content":"加油~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645967899,"ip_address":"","comment_id":336116,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645935465","product_id":100103401,"comment_content":"讲的确实不错，之前看了好多文章没看懂挂起的概念，跟着这两篇文章自己走了一遍代码终于能理解了","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553568,"discussion_content":"加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645967899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335169,"user_name":"WWWarmFly","can_delete":false,"product_type":"c1","uid":2621394,"ip_address":"","ucode":"DBACC196FADE65","user_header":"https://static001.geekbang.org/account/avatar/00/27/ff/d2/204edd23.jpg","comment_is_top":false,"comment_ctime":1645369750,"is_pvip":true,"replies":[{"id":"122453","content":"这个问题，其实我们要深入到源码层面才能很好的回答，学完课程以后相信你会有自己的答案。<br><br>总的来说，协程和挂起函数很像，但从概念上并不是一个概念，不然就取一个名字了。对吧？","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645459355,"ip_address":"","comment_id":335169,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645369750","product_id":100103401,"comment_content":"请教老师，文中有一句话     “你可能觉得，既然协程和挂起函数都是支持挂起和恢复的，那它们两个是不是同一个东西呢？”<br><br>这里说的协程支持挂起和恢复，是不是说多个协程间的？挂起函数的挂起和恢复是不是说一个协程内的？<br><br>但是多个协程间也是可以阻塞的，之前就有协程中调用sleep的例子。协程间的非阻塞其实是借助于delay，这是一个挂起函数。<br><br><br>那“你可能觉得，既然协程和挂起函数都是支持挂起和恢复的，那它们两个是不是同一个东西呢？” 是不是可以认为是同一个东西。<br>","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552443,"discussion_content":"这个问题，其实我们要深入到源码层面才能很好的回答，学完课程以后相信你会有自己的答案。\n\n总的来说，协程和挂起函数很像，但从概念上并不是一个概念，不然就取一个名字了。对吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645459355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334932,"user_name":"夜班同志","can_delete":false,"product_type":"c1","uid":1192938,"ip_address":"","ucode":"19941F1537EB7B","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/ea/373d8e6b.jpg","comment_is_top":false,"comment_ctime":1645188210,"is_pvip":false,"replies":[{"id":"122407","content":"嗯，没错。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645369974,"ip_address":"","comment_id":334932,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645188210","product_id":100103401,"comment_content":"挂起函数才有恢复的&quot;callback&quot;，普通函数没有","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552266,"discussion_content":"嗯，没错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645369974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334694,"user_name":"kevintcl24","can_delete":false,"product_type":"c1","uid":1123617,"ip_address":"","ucode":"2FB2E6C206DB81","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/vpHvsPl7ffl3ECrKxH1j0R1W8lYWc8svvlz0cahq8KZpNYMHicWiaTGJLWFyQsy8rTJcGAAVDhKCAeHRkTPKeqTQ/132","comment_is_top":false,"comment_ctime":1645081809,"is_pvip":true,"replies":[{"id":"122301","content":"这节课里的CPS其实是大大简化了的，所以，目前我们还看不到任何切换的过程。问题：“resumeWith函数的调用就已经被kotlin 切换到了主线程了吗？”简单回答的话，那就是：“是的”。但这样的回答终究不严谨，也很难一下说清楚，这个部分我会在源码篇的里讲解的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645151385,"ip_address":"","comment_id":334694,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645081809","product_id":100103401,"comment_content":"问题描述：<br>continuation后面的要执行的代码，看CPS 转换动画效果，相当于被移动到Continuation接口的resumeWith函数中。<br>我的问题是：<br>在上一个执行动画中，getUserInfo在子线程执行的。然后切换到了主线程返回结果。我想问resumeWith<br>函数的调用就已经被kotlin 切换到了主线程了吗？如果是，大概切换的外代码是怎么样的哟。<br>协程这个有点烧脑壳","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551838,"discussion_content":"这节课里的CPS其实是大大简化了的，所以，目前我们还看不到任何切换的过程。问题：“resumeWith函数的调用就已经被kotlin 切换到了主线程了吗？”简单回答的话，那就是：“是的”。但这样的回答终究不严谨，也很难一下说清楚，这个部分我会在源码篇的里讲解的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645151385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334523,"user_name":"请叫我潜水员","can_delete":false,"product_type":"c1","uid":2625788,"ip_address":"","ucode":"9AF80FF19CD6F2","user_header":"https://static001.geekbang.org/account/avatar/00/28/10/fc/213c381f.jpg","comment_is_top":false,"comment_ctime":1644985285,"is_pvip":true,"replies":[{"id":"122252","content":"这样理解没错，如果能找到源码层面的证据则更好哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645062971,"ip_address":"","comment_id":334523,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1644985285","product_id":100103401,"comment_content":"是不是因为只有协程才有恢复能力，所以挂起函数只能在协程中调用","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551567,"discussion_content":"这样理解没错，如果能找到源码层面的证据则更好哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645062971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127306,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/8a/f7a3d5e6.jpg","nickname":"Allen","note":"","ucode":"3F69DAC14260DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551500,"discussion_content":"协程是名称，挂起函数是其实现方式，这两个概念本质上是说的同一件事。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645025935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334475,"user_name":"êｗěｎ","can_delete":false,"product_type":"c1","uid":1066707,"ip_address":"","ucode":"5000233111BEFA","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/d3/e25d104a.jpg","comment_is_top":false,"comment_ctime":1644973979,"is_pvip":true,"replies":[{"id":"122253","content":"问题1：有上下文关联的。<br>问题2：一般不会，但挂起函数当中也有办法继续launch新协程。<br><br>PS：以上问题要解释原因的话，三言两语说不清，等到源码篇以后，相信你也能自己弄懂了。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645063124,"ip_address":"","comment_id":334475,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1644973979","product_id":100103401,"comment_content":"问题：continuation后面的要执行的代码，这里得代码是指有上下文关联的吗？比如后面代码要用到前面的返回值。<br>问题2: 挂起函数会主动开启新协程吗？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551569,"discussion_content":"问题1：有上下文关联的。\n问题2：一般不会，但挂起函数当中也有办法继续launch新协程。\n\nPS：以上问题要解释原因的话，三言两语说不清，等到源码篇以后，相信你也能自己弄懂了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645063124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127306,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/8a/f7a3d5e6.jpg","nickname":"Allen","note":"","ucode":"3F69DAC14260DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551506,"discussion_content":"问题 1：后面的代码指的是在同一个 suspend 挂起函数内对应的挂起点后面的代码。\n\n问题 2：挂起函数不会开启先的协程，只有调用了启动协程的方法（Launch、Async 或者 Runblocking），才会启动一个新的协程。每个协程都有一个 Dispatcher 调度器，协程运行在哪个线程是由这个调度器决定的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645026570,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}