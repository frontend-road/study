{"id":9946,"title":"第23讲 | 请介绍类加载过程，什么是双亲委派模型？","content":"<p>Java通过引入字节码和JVM机制，提供了强大的跨平台能力，理解Java的类加载机制是深入Java开发的必要条件，也是个面试考察热点。</p>\n<p>今天我要问你的问题是，<span class=\"orange\">请介绍类加载过程，什么是双亲委派模型？</span></p>\n<h2>典型回答</h2>\n<p>一般来说，我们把Java的类加载过程分为三个主要步骤：加载、链接、初始化，具体行为在<a href=\"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html\">Java虚拟机规范</a>里有非常详细的定义。</p>\n<p>首先是加载阶段（Loading），它是Java将字节码数据从不同的数据源读取到JVM中，并映射为JVM认可的数据结构（Class对象），这里的数据源可能是各种各样的形态，如jar文件、class文件，甚至是网络数据源等；如果输入数据不是ClassFile的结构，则会抛出ClassFormatError。</p>\n<p>加载阶段是用户参与的阶段，我们可以自定义类加载器，去实现自己的类加载过程。</p>\n<p>第二阶段是链接（Linking），这是核心的步骤，简单说是把原始的类定义信息平滑地转化入JVM运行的过程中。这里可进一步细分为三个步骤：</p>\n<ul>\n<li>\n<p>验证（Verification），这是虚拟机安全的重要保障，JVM需要核验字节信息是符合Java虚拟机规范的，否则就被认为是VerifyError，这样就防止了恶意信息或者不合规的信息危害JVM的运行，验证阶段有可能触发更多class的加载。</p>\n</li>\n<li>\n<p>准备（Preparation），创建类或接口中的静态变量，并初始化静态变量的初始值。但这里的“初始化”和下面的显式初始化阶段是有区别的，侧重点在于分配所需要的内存空间，不会去执行更进一步的JVM指令。</p>\n</li>\n<li>\n<p>解析（Resolution），在这一步会将常量池中的符号引用（symbolic reference）替换为直接引用。在<a href=\"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.4.3\">Java虚拟机规范</a>中，详细介绍了类、接口、方法和字段等各个方面的解析。</p>\n</li>\n</ul><!-- [[[read_end]]] -->\n<p>最后是初始化阶段（initialization），这一步真正去执行类初始化的代码逻辑，包括静态字段赋值的动作，以及执行类定义中的静态初始化块内的逻辑，编译器在编译阶段就会把这部分逻辑整理好，父类型的初始化逻辑优先于当前类型的逻辑。</p>\n<p>再来谈谈双亲委派模型，简单说就是当类加载器（Class-Loader）试图加载某个类型的时候，除非父加载器找不到相应类型，否则尽量将这个任务代理给当前加载器的父加载器去做。使用委派模型的目的是避免重复加载Java类型。</p>\n<h2>考点分析</h2>\n<p>今天的问题是关于JVM类加载方面的基础问题，我前面给出的回答参考了Java虚拟机规范中的主要条款。如果你在面试中回答这个问题，在这个基础上还可以举例说明。</p>\n<p>我们来看一个经典的延伸问题，准备阶段谈到静态变量，那么对于常量和不同静态变量有什么区别？</p>\n<p>需要明确的是，没有人能够精确的理解和记忆所有信息，如果碰到这种问题，有直接答案当然最好；没有的话，就说说自己的思路。</p>\n<p>我们定义下面这样的类型，分别提供了普通静态变量、静态常量，常量又考虑到原始类型和引用类型可能有区别。</p>\n<pre><code>public class CLPreparation {\n\tpublic static int a = 100;\n\tpublic static final int INT_CONSTANT = 1000;\n\tpublic static final Integer INTEGER_CONSTANT = Integer.valueOf(10000);\n}\n</code></pre>\n<p>编译并反编译一下：</p>\n<pre><code>Javac CLPreparation.java\nJavap –v CLPreparation.class\n</code></pre>\n<p>可以在字节码中看到这样的额外初始化逻辑：</p>\n<pre><code>         0: bipush    \t100\n     \t2: putstatic \t#2              \t// Field a:I\n     \t5: sipush    \t10000\n     \t8: invokestatic  #3              \t// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n    \t11: putstatic \t#4                  // Field INTEGER_CONSTANT:Ljava/lang/Integer;\n</code></pre>\n<p>这能让我们更清楚，普通原始类型静态变量和引用类型（即使是常量），是需要额外调用putstatic等JVM指令的，这些是在显式初始化阶段执行，而不是准备阶段调用；而原始类型常量，则不需要这样的步骤。</p>\n<p>关于类加载过程的更多细节，有非常多的优秀资料进行介绍，你可以参考大名鼎鼎的《深入理解Java虚拟机》，一本非常好的入门书籍。我的建议是不要仅看教程，最好能够想出代码实例去验证自己对某个方面的理解和判断，这样不仅能加深理解，还能够在未来的应用开发中使用到。</p>\n<p>其实，类加载机制的范围实在太大，我从开发和部署的不同角度，各选取了一个典型扩展问题供你参考：</p>\n<ul>\n<li>\n<p>如果要真正理解双亲委派模型，需要理解Java中类加载器的架构和职责，至少要懂具体有哪些内建的类加载器，这些是我上面的回答里没有提到的；以及如何自定义类加载器？</p>\n</li>\n<li>\n<p>从应用角度，解决某些类加载问题，例如我的Java程序启动较慢，有没有办法尽量减小Java类加载的开销？</p>\n</li>\n</ul>\n<p>另外，需要注意的是，在Java 9中，Jigsaw项目为Java提供了原生的模块化支持，内建的类加载器结构和机制发生了明显变化。我会对此进行讲解，希望能够避免一些未来升级中可能发生的问题。</p>\n<h2>知识扩展</h2>\n<p>首先，从架构角度，一起来看看Java 8以前各种类加载器的结构，下面是三种Oracle JDK内建的类加载器。</p>\n<ul>\n<li>启动类加载器（Bootstrap Class-Loader），加载 jre/lib下面的jar文件，如rt.jar。它是个超级公民，即使是在开启了Security Manager的时候，JDK仍赋予了它加载的程序AllPermission。</li>\n</ul>\n<p>对于做底层开发的工程师，有的时候可能不得不去试图修改JDK的基础代码，也就是通常意义上的核心类库，我们可以使用下面的命令行参数。</p>\n<pre><code># 指定新的bootclasspath，替换java.*包的内部实现\njava -Xbootclasspath:&lt;your_boot_classpath&gt; your_App\n \n# a意味着append，将指定目录添加到bootclasspath后面\njava -Xbootclasspath/a:&lt;your_dir&gt; your_App\n \n# p意味着prepend，将指定目录添加到bootclasspath前面\njava -Xbootclasspath/p:&lt;your_dir&gt; your_App\n</code></pre>\n<p>用法其实很易懂，例如，使用最常见的 “/p”，既然是前置，就有机会替换个别基础类的实现。</p>\n<p>我们一般可以使用下面方法获取父加载器，但是在通常的JDK/JRE实现中，扩展类加载器getParent()都只能返回null。</p>\n<pre><code>public final ClassLoader getParent()\n</code></pre>\n<ul>\n<li>扩展类加载器（Extension or Ext Class-Loader），负责加载我们放到jre/lib/ext/目录下面的jar包，这就是所谓的extension机制。该目录也可以通过设置 “java.ext.dirs”来覆盖。</li>\n</ul>\n<pre><code>java -Djava.ext.dirs=your_ext_dir HelloWorld\n</code></pre>\n<ul>\n<li>应用类加载器（Application or App Class-Loader），就是加载我们最熟悉的classpath的内容。这里有一个容易混淆的概念，系统（System）类加载器，通常来说，其默认就是JDK内建的应用类加载器，但是它同样是可能修改的，比如：</li>\n</ul>\n<pre><code>java -Djava.system.class.loader=com.yourcorp.YourClassLoader HelloWorld\n</code></pre>\n<p>如果我们指定了这个参数，JDK内建的应用类加载器就会成为定制加载器的父亲，这种方式通常用在类似需要改变双亲委派模式的场景。</p>\n<p>具体请参考下图：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/35/a1/35a3bc241d779ddcc357639547917ca1.png?wh=779*642\" alt=\"\" /></p>\n<p>至于前面被问到的双亲委派模型，参考这个结构图更容易理解。试想，如果不同类加载器都自己加载需要的某个类型，那么就会出现多次重复加载，完全是种浪费。</p>\n<p>通常类加载机制有三个基本特征：</p>\n<ul>\n<li>\n<p>双亲委派模型。但不是所有类加载都遵守这个模型，有的时候，启动类加载器所加载的类型，是可能要加载用户代码的，比如JDK内部的ServiceProvider/<a href=\"https://docs.oracle.com/javase/9/docs/api/java/util/ServiceLoader.html\">ServiceLoader</a>机制，用户可以在标准API框架上，提供自己的实现，JDK也需要提供些默认的参考实现。 例如，Java 中JNDI、JDBC、文件系统、Cipher等很多方面，都是利用的这种机制，这种情况就不会用双亲委派模型去加载，而是利用所谓的上下文加载器。</p>\n</li>\n<li>\n<p>可见性，子类加载器可以访问父加载器加载的类型，但是反过来是不允许的，不然，因为缺少必要的隔离，我们就没有办法利用类加载器去实现容器的逻辑。</p>\n</li>\n<li>\n<p>单一性，由于父加载器的类型对于子加载器是可见的，所以父加载器中加载过的类型，就不会在子加载器中重复加载。但是注意，类加载器“邻居”间，同一类型仍然可以被加载多次，因为互相并不可见。</p>\n</li>\n</ul>\n<p>在JDK 9中，由于Jigsaw项目引入了Java平台模块化系统（JPMS），Java SE的源代码被划分为一系列模块。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/15/79/15138305829ed15f45dd53ec38bd8379.png?wh=1600*404\" alt=\"\" /></p>\n<p>类加载器，类文件容器等都发生了非常大的变化，我这里总结一下：</p>\n<ul>\n<li>前面提到的-Xbootclasspath参数不可用了。API已经被划分到具体的模块，所以上文中，利用“-Xbootclasspath/p”替换某个Java核心类型代码，实际上变成了对相应的模块进行的修补，可以采用下面的解决方案：</li>\n</ul>\n<p>首先，确认要修改的类文件已经编译好，并按照对应模块（假设是java.base）结构存放， 然后，给模块打补丁：</p>\n<pre><code>java --patch-module java.base=your_patch yourApp\n</code></pre>\n<ul>\n<li>\n<p>扩展类加载器被重命名为平台类加载器（Platform Class-Loader），而且extension机制则被移除。也就意味着，如果我们指定java.ext.dirs环境变量，或者lib/ext目录存在，JVM将直接返回<strong>错误</strong>！建议解决办法就是将其放入classpath里。</p>\n</li>\n<li>\n<p>部分不需要AllPermission的Java基础模块，被降级到平台类加载器中，相应的权限也被更精细粒度地限制起来。</p>\n</li>\n<li>\n<p>rt.jar和tools.jar同样是被移除了！JDK的核心类库以及相关资源，被存储在jimage文件中，并通过新的JRT文件系统访问，而不是原有的JAR文件系统。虽然看起来很惊人，但幸好对于大部分软件的兼容性影响，其实是有限的，更直接地影响是IDE等软件，通常只要升级到新版本就可以了。</p>\n</li>\n<li>\n<p>增加了Layer的抽象， JVM启动默认创建BootLayer，开发者也可以自己去定义和实例化Layer，可以更加方便的实现类似容器一般的逻辑抽象。</p>\n</li>\n</ul>\n<p>结合了Layer，目前的JVM内部结构就变成了下面的层次，内建类加载器都在BootLayer中，其他Layer内部有自定义的类加载器，不同版本模块可以同时工作在不同的Layer。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/20/00/20a6a22ae11c1be3e08c6fa0bc8a8c00.png?wh=858*587\" alt=\"\" /></p>\n<p>谈到类加载器，绕不过的一个话题是自定义类加载器，常见的场景有：</p>\n<ul>\n<li>\n<p>实现类似进程内隔离，类加载器实际上用作不同的命名空间，以提供类似容器、模块化的效果。例如，两个模块依赖于某个类库的不同版本，如果分别被不同的容器加载，就可以互不干扰。这个方面的集大成者是<a href=\"http://www.oracle.com/technetwork/java/javaee/overview/index.html\">Java EE</a>和<a href=\"https://en.wikipedia.org/wiki/OSGi\">OSGI</a>、<a href=\"https://en.wikipedia.org/wiki/Java_Platform_Module_System\">JPMS</a>等框架。</p>\n</li>\n<li>\n<p>应用需要从不同的数据源获取类定义信息，例如网络数据源，而不是本地文件系统。</p>\n</li>\n<li>\n<p>或者是需要自己操纵字节码，动态修改或者生成类型。</p>\n</li>\n</ul>\n<p>我们可以总体上简单理解自定义类加载过程：</p>\n<ul>\n<li>\n<p>通过指定名称，找到其二进制实现，这里往往就是自定义类加载器会“定制”的部分，例如，在特定数据源根据名字获取字节码，或者修改或生成字节码。</p>\n</li>\n<li>\n<p>然后，创建Class对象，并完成类加载过程。二进制信息到Class对象的转换，通常就依赖<a href=\"https://docs.oracle.com/javase/9/docs/api/java/lang/ClassLoader.html#defineClass-java.lang.String-byte:A-int-int-\">defineClass</a>，我们无需自己实现，它是final方法。有了Class对象，后续完成加载过程就顺理成章了。</p>\n</li>\n</ul>\n<p>具体实现我建议参考这个<a href=\"http://www.baeldung.com/java-classloaders\">用例</a>。</p>\n<p>我在<a href=\"http://time.geekbang.org/column/article/6845\">专栏第1讲</a>中，就提到了由于字节码是平台无关抽象，而不是机器码，所以Java需要类加载和解释、编译，这些都导致Java启动变慢。谈了这么多类加载，有没有什么通用办法，不需要代码和其他工作量，就可以降低类加载的开销呢？</p>\n<p>这个，可以有。</p>\n<ul>\n<li>\n<p>在第1讲中提到的AOT，相当于直接编译成机器码，降低的其实主要是解释和编译开销。但是其目前还是个试验特性，支持的平台也有限，比如，JDK 9仅支持Linux x64，所以局限性太大，先暂且不谈。</p>\n</li>\n<li>\n<p>还有就是较少人知道的AppCDS（Application Class-Data Sharing），CDS在Java 5中被引进，但仅限于Bootstrap Class-loader，在8u40中实现了AppCDS，支持其他的类加载器，在目前2018年初发布的JDK 10中已经开源。</p>\n</li>\n</ul>\n<p>简单来说，AppCDS基本原理和工作过程是：</p>\n<p>首先，JVM将类信息加载， 解析成为元数据，并根据是否需要修改，将其分类为Read-Only部分和Read-Write部分。然后，将这些元数据直接存储在文件系统中，作为所谓的Shared Archive。命令很简单：</p>\n<pre><code>Java -Xshare:dump -XX:+UseAppCDS -XX:SharedArchiveFile=&lt;jsa&gt;  \\\n         -XX:SharedClassListFile=&lt;classlist&gt; -XX:SharedArchiveConfigFile=&lt;config_file&gt;\n</code></pre>\n<p>第二，在应用程序启动时，指定归档文件，并开启AppCDS。</p>\n<pre><code>Java -Xshare:on -XX:+UseAppCDS -XX:SharedArchiveFile=&lt;jsa&gt; yourApp\n</code></pre>\n<p>通过上面的命令，JVM会通过内存映射技术，直接映射到相应的地址空间，免除了类加载、解析等各种开销。</p>\n<p>AppCDS改善启动速度非常明显，传统的Java EE应用，一般可以提高20%~30%以上；实验中使用Spark KMeans负载，20个slave，可以提高11%的启动速度。</p>\n<p>与此同时，降低内存footprint，因为同一环境的Java进程间可以共享部分数据结构。前面谈到的两个实验，平均可以减少10%以上的内存消耗。</p>\n<p>当然，也不是没有局限性，如果恰好大量使用了运行时动态类加载，它的帮助就有限了。</p>\n<p>今天我梳理了一下类加载的过程，并针对Java新版中类加载机制发生的变化，进行了相对全面的总结，最后介绍了一个改善类加载速度的特性，希望对你有所帮助。</p>\n<h2>一课一练</h2>\n<p>关于今天我们讨论的题目你做到心中有数了吗？今天的思考题是，谈谈什么是Jar Hell问题？你有遇到过类似情况吗，如何解决呢？</p>\n<p>请你在留言区写写你对这个问题的思考，我会选出经过认真思考的留言，送给你一份学习奖励礼券，欢迎你与我一起讨论。</p>\n<p>你的朋友是不是也在准备面试呢？你可以“请朋友读”，把今天的题目分享给好友，或许你能帮到他。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"第22讲 | AtomicInteger底层实现原理是什么？如何在自己的产品代码中应用CAS操作？","id":9788},"right":{"article_title":"第24讲 | 有哪些方法可以在运行时动态生成一个Java类？","id":10076}},"comments":[{"had_liked":false,"id":19091,"user_name":"梁桦","can_delete":false,"product_type":"c1","uid":1106133,"ip_address":"","ucode":"46F83A558256CC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/d5/c74f6137.jpg","comment_is_top":false,"comment_ctime":1533679114,"is_pvip":false,"discussion_count":21,"race_medal":0,"score":"723088184842","product_id":100006701,"comment_content":"“双亲委派模型”完全是错误的翻译，麻烦老师纠正。在《深入java虚拟机》这本书里，翻译的“双亲委派模型”，英文是parents delegation model。参考国外网站，都是parent delegation model  或者classloader delegation model，翻译过来也应该是“单亲委派模型”或者类加载器委派模型，再看看实际的结构图，根本没有提现什么“双亲”，绝对是“单亲委派模型”啊！这么一个小小的错误，整个行业里都“继承”着，这是不是一种悲哀？","like_count":169,"discussions":[{"author":{"id":1467843,"avatar":"https://static001.geekbang.org/account/avatar/00/16/65/c3/5324b326.jpg","nickname":"半清醒","note":"","ucode":"119F57A160DD8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30680,"discussion_content":"为什么什么都能扯到 &#34;悲哀&#34;？","likes_number":24,"is_delete":false,"is_hidden":false,"ctime":1570850915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2289255,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ee/67/e97fea7d.jpg","nickname":"[ThumbsUp]","note":"","ucode":"428818387DE5F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325762,"discussion_content":"过度关注翻译这种细枝末节问题而不把精力放到模型本身，舍本逐末的同时又有了一点“杠”的味道","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1605427014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1052168,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0e/08/543ee1d6.jpg","nickname":"webioix","note":"","ucode":"156C9AD566E7B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2289255,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ee/67/e97fea7d.jpg","nickname":"[ThumbsUp]","note":"","ucode":"428818387DE5F7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332252,"discussion_content":"很误导人的， 大哥","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1607132523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325762,"ip_address":""},"score":332252,"extra":""},{"author":{"id":1940461,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9b/ed/e633460a.jpg","nickname":"Geek_225244","note":"","ucode":"43A0711FFAB44A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2289255,"avatar":"https://static001.geekbang.org/account/avatar/00/22/ee/67/e97fea7d.jpg","nickname":"[ThumbsUp]","note":"","ucode":"428818387DE5F7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585867,"discussion_content":"过度翻译也是问题，本来是一个字面都能理解，活生生变成了干扰项","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661856762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325762,"ip_address":"上海"},"score":585867,"extra":""}]},{"author":{"id":1182731,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0c/0b/1ccc90b7.jpg","nickname":"-Violet Evergarden-","note":"","ucode":"B483A3ACFB36F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":127,"discussion_content":"其实精确来讲是爷爸委派机制，这种东西大家都懂就好了。就像熊猫这个历史错误叫法，以及MySQL的绝大多数的“买色抠”读音其实是错误的一样","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1561122450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365680,"discussion_content":"这个双亲委派确实翻译的太草了，不就是优先从父类加载器尝试加载吗，一句话能说清楚的事情非要搞个四不像的专用名词出来。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1617865964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113249,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fc/a1/a47a8ebf.jpg","nickname":"新人注册","note":"","ucode":"2B1AD2ADF5D3AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340018,"discussion_content":"你是来搞笑的吗","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1609863120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062070,"avatar":"https://static001.geekbang.org/account/avatar/00/10/34/b6/0feb574b.jpg","nickname":"我的黄金时代","note":"","ucode":"D7825B45B372F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217678,"discussion_content":"parent  n. 父亲（或母亲）；父母亲；根源","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1585577042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2058455,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/68/d7/29025f1f.jpg","nickname":"前方的灯有点弱","note":"","ucode":"5CEDBCF3DDC991","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355535,"discussion_content":"parents 是父母的意思，父母不是双亲吗 。 。 。 。 ","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1615448606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1079811,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7a/03/c9b43b21.jpg","nickname":"BewhY","note":"","ucode":"4BC26D47A79967","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12866,"discussion_content":"这种没必要太过于解释了，因为国内流传下来的叫法了，叫这个可能大家都知道是什么，换个叫法估计一堆人懵逼，就像linux一样，我从来见过几个人能发音正确一样","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1568603916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1163335,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c0/47/dfe4a457.jpg","nickname":"黄展","note":"","ucode":"317864DF486902","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274384,"discussion_content":"国外网站都叫parent delegation model，不是parents delegation model\n叫父委派模式可能更好","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590578035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1097836,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","nickname":"随心而至","note":"","ucode":"31866865255101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15915,"discussion_content":"parent和parents没分清，技术翻译并没有做到那么严谨的，叫法统一了就不好改了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1568859582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250349,"avatar":"https://static001.geekbang.org/account/avatar/00/13/14/2d/94b8bc8e.jpg","nickname":"柯柯西55","note":"","ucode":"A334FCA61E337E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414492,"discussion_content":"我特么一直不明白双亲的“双”是什么  翻译成父代委托模型是不是好点儿","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636789506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2052476,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Qq6oLfOTgKzjiculoUDicdv7WoY1iabPfOTumibWeInVP2Mnod9XVPrNSClvIiaLbvtDlIjRnWUNaXcYwREGzlcaDog/132","nickname":"Geek_在下蟑螂王","note":"","ucode":"E1F5BBB5BC5962","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290950,"discussion_content":"理应叫委派先祖模型。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594647609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1091505,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKKOWAmUxaHaPYJbYojcxmXV6dRKicLycqZaCJwkGdAbkBAm37wFXqbiaCHK5qia0GVQMz1eXlx8pic0A/132","nickname":"dellenovo","note":"","ucode":"C0C82721EBD706","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4595,"discussion_content":"确实不喜欢这个翻译，双亲在中文语境中强调的是两个人，但实际只是一个父加载器。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565584683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206839,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/kkg4WVFplgPXNK80tttwBxj8S0ujYyewFtn7ia1gPBOhI18szQI5WNcqVvlHGFLr54zwP8M9baYvTVyNQRLO22g/132","nickname":"benjamin","note":"","ucode":"295168663D9E04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":262,"discussion_content":"bootstrap和ext class loader不就是两个亲吗？叫双亲没问题的。抠字眼没意义","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1561368037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1091505,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKKOWAmUxaHaPYJbYojcxmXV6dRKicLycqZaCJwkGdAbkBAm37wFXqbiaCHK5qia0GVQMz1eXlx8pic0A/132","nickname":"dellenovo","note":"","ucode":"C0C82721EBD706","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1206839,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/kkg4WVFplgPXNK80tttwBxj8S0ujYyewFtn7ia1gPBOhI18szQI5WNcqVvlHGFLr54zwP8M9baYvTVyNQRLO22g/132","nickname":"benjamin","note":"","ucode":"295168663D9E04","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4596,"discussion_content":"能翻译得尽量准确些不好么？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565584709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":262,"ip_address":""},"score":4596,"extra":""},{"author":{"id":1322362,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2d/7a/3a37efe4.jpg","nickname":"金霖","note":"","ucode":"8CFE41BEEB5EF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1206839,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/kkg4WVFplgPXNK80tttwBxj8S0ujYyewFtn7ia1gPBOhI18szQI5WNcqVvlHGFLr54zwP8M9baYvTVyNQRLO22g/132","nickname":"benjamin","note":"","ucode":"295168663D9E04","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361588,"discussion_content":"双亲委派模型不是指的bootstrap和ext class loader，只要符合这种加载器优先加载类的类加载器使用方式(比如自定义继承了classLoader但是没有重写loadClass方法的类加载器)，都是所谓的双亲委派模型。\n大家谈论的tomcat不遵守双亲委派模型其实跟bootstrap和ext class loader也没关系，如果按你上边的说法来看待这个概念。那么大概率用同样名词的其他人跟你说的不是一回事。。。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616694977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":262,"ip_address":""},"score":361588,"extra":""}]},{"author":{"id":3004050,"avatar":"","nickname":"Geek_a28ee0","note":"","ucode":"179D4C5F3E6503","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572089,"discussion_content":"将错就错吧，如果单从理解来说，无需纠正，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652598004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1406090,"avatar":"https://static001.geekbang.org/account/avatar/00/15/74/8a/d5b0cf30.jpg","nickname":"kyl","note":"","ucode":"DBDFD0FEB5A135","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391303,"discussion_content":"不知道这有什么好纠结的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630395002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1500391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e4/e7/31944ee7.jpg","nickname":"千军万马万马@","note":"","ucode":"0BDAD22123435A","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280989,"discussion_content":"我第一次 接触这个知识点时  我也觉得不舒服 这为啥叫双亲啊 明明是一条线的逻辑  后来我认为自己也算自己的亲？！ 😓","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591653965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033066,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/6a/3272e095.jpg","nickname":"李春恒","note":"","ucode":"F2DCA19EC66DC1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":114611,"discussion_content":"...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577975137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14203,"user_name":"Peter8015","can_delete":false,"product_type":"c1","uid":1034035,"ip_address":"","ucode":"89728C3F9D1860","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/33/80375743.jpg","comment_is_top":false,"comment_ctime":1530233006,"is_pvip":false,"replies":[{"id":"4752","content":"不错","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530235516,"ip_address":"","comment_id":14203,"utype":1}],"discussion_count":1,"race_medal":0,"score":"181918859438","product_id":100006701,"comment_content":"Jar hell jar包冲突，对于大项目或没有maven的项目是比较麻烦的。1 应用无法启动 2 编译时没问题，运行时报错。解决方法:1 改为maven 项目，使包的管理和依赖可视化2 在1的基础上，解决明显的包编译冲突 3 根据运行时报错找到冲突的包，或者要排除的包 ","like_count":41,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419908,"discussion_content":"不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530235516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17959,"user_name":"see","can_delete":false,"product_type":"c1","uid":1178402,"ip_address":"","ucode":"39D123F84885BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/22/a0ddf3ee.jpg","comment_is_top":false,"comment_ctime":1533050277,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"113202199973","product_id":100006701,"comment_content":"为什么叫双亲？  而不是单亲或者其他。 ","like_count":27,"discussions":[{"author":{"id":2068627,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/90/93/5e94be87.jpg","nickname":"钝感","note":"","ucode":"50FE1DD4EAEB78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387192,"discussion_content":"大概因为单亲太可怜了。😭","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1628043899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1091505,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKKOWAmUxaHaPYJbYojcxmXV6dRKicLycqZaCJwkGdAbkBAm37wFXqbiaCHK5qia0GVQMz1eXlx8pic0A/132","nickname":"dellenovo","note":"","ucode":"C0C82721EBD706","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4598,"discussion_content":"翻译得水平不高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565584779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14079,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1162307,"ip_address":"","ucode":"0E0D44ABB35DBB","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/43/11acdc02.jpg","comment_is_top":false,"comment_ctime":1530168625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"104609383729","product_id":100006701,"comment_content":"希望能在后面讲解一哈IOC和AOP原理，期待","like_count":25},{"had_liked":false,"id":14099,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1162307,"ip_address":"","ucode":"0E0D44ABB35DBB","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/43/11acdc02.jpg","comment_is_top":false,"comment_ctime":1530172795,"is_pvip":false,"replies":[{"id":"4762","content":"有计划提到，但暂时没计划单独讲，如果需要的朋友多，也许后期加餐吧","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530238023,"ip_address":"","comment_id":14099,"utype":1}],"discussion_count":1,"race_medal":0,"score":"87429518715","product_id":100006701,"comment_content":"还能再讲讲ORM映射的细节吗？端个小板凳准备听😁","like_count":21,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419871,"discussion_content":"有计划提到，但暂时没计划单独讲，如果需要的朋友多，也许后期加餐吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530238023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17770,"user_name":"KingJack","can_delete":false,"product_type":"c1","uid":1129445,"ip_address":"","ucode":"A3F2E28A0C07BA","user_header":"","comment_is_top":false,"comment_ctime":1532946287,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"78842357615","product_id":100006701,"comment_content":"讲的很浅，这个概念讲几句，那个概念讲几句","like_count":19,"discussions":[{"author":{"id":1079811,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7a/03/c9b43b21.jpg","nickname":"BewhY","note":"","ucode":"4BC26D47A79967","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12870,"discussion_content":"讲的深你看不懂，讲的浅又不满足，只能折中咯，文章考虑的是任何阶段的人，而不是只针对某个阶段的人来讲的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568604200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21098,"user_name":"且以深情共白头","can_delete":false,"product_type":"c1","uid":1113192,"ip_address":"","ucode":"812E00CD9413A4","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/68/9491468e.jpg","comment_is_top":false,"comment_ctime":1534912643,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"74549356675","product_id":100006701,"comment_content":"内容很多，细讲可以很深，但是都浅尝则止，","like_count":18,"discussions":[{"author":{"id":1052191,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0e/1f/d0472177.jpg","nickname":"厉害了我的国","note":"","ucode":"CD0A54A1B998AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":241715,"discussion_content":"起码要讲到能hold住面试连环炮吧，这讲的明显猴不住","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587435203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2415368,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DLcTlSKOQlrhRq1hzBNvnWfENsyFrxNnhJ5UPibPMLazy9c2nBlSd1sxHqzHaOTTaZIYkEDAby3HpdianMxt6Dsw/132","nickname":"Joey","note":"","ucode":"6856FA3A28B32C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541301,"discussion_content":"这个老师特别混，不知道在哪抄的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640326350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1079811,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7a/03/c9b43b21.jpg","nickname":"BewhY","note":"","ucode":"4BC26D47A79967","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12867,"discussion_content":"细讲？那这个文章中提到的任何一点都可能做一个专栏来讲解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568604002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1079811,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7a/03/c9b43b21.jpg","nickname":"BewhY","note":"","ucode":"4BC26D47A79967","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":152165,"discussion_content":"一言以蔽之，什么都讲了，什么都没讲明白。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579947871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":12867,"ip_address":""},"score":152165,"extra":""}]}]},{"had_liked":false,"id":31320,"user_name":"hu","can_delete":false,"product_type":"c1","uid":1110492,"ip_address":"","ucode":"57A074D5904907","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/dc/05df7333.jpg","comment_is_top":false,"comment_ctime":1539149164,"is_pvip":false,"replies":[{"id":"12424","content":"这个问题似乎比较费解，与其说缺点，不如说什么常见不适合双亲委派，例如，我们希望一个jvm能够同时加载某类的不同版本，那么双亲委派就不合适了，需要的是在不同范围内（例如模块）单独加载","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1540311793,"ip_address":"","comment_id":31320,"utype":1}],"discussion_count":2,"race_medal":0,"score":"70258625900","product_id":100006701,"comment_content":"您好，面试时，被问到：双亲委托加载的缺点。可以讲解一下么？谢谢","like_count":16,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426292,"discussion_content":"这个问题似乎比较费解，与其说缺点，不如说什么常见不适合双亲委派，例如，我们希望一个jvm能够同时加载某类的不同版本，那么双亲委派就不合适了，需要的是在不同范围内（例如模块）单独加载","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540311793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179876,"avatar":"https://static001.geekbang.org/account/avatar/00/12/00/e4/3ad00970.jpg","nickname":"明智","note":"","ucode":"FCE5E369701922","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207163,"discussion_content":"文中SPI那块提及的上下文类加载器就不适合双亲委派，而且应用服务器，Springboot都着重用到这块原理，可以说的详细点，这样离我们这些菜鸟大众更近点。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1584461196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63549,"user_name":"hankchan","can_delete":false,"product_type":"c1","uid":1199206,"ip_address":"","ucode":"C6213D656587EF","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/66/be7b4805.jpg","comment_is_top":false,"comment_ctime":1548397797,"is_pvip":false,"replies":[{"id":"23337","content":"语言功底很赞","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1549814818,"ip_address":"","comment_id":63549,"utype":1}],"discussion_count":3,"race_medal":0,"score":"53088005349","product_id":100006701,"comment_content":"看到评论说应该叫单亲的，真是挺奇怪的.....<br>好像...parent的中文翻译是父母吧？父母是不是双亲？所以就算翻译错将parent写成了parents，中文翻译成双亲，也没问题吧？","like_count":13,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437629,"discussion_content":"语言功底很赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549814818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1091505,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKKOWAmUxaHaPYJbYojcxmXV6dRKicLycqZaCJwkGdAbkBAm37wFXqbiaCHK5qia0GVQMz1eXlx8pic0A/132","nickname":"dellenovo","note":"","ucode":"C0C82721EBD706","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4599,"discussion_content":"parent指的就是父母中的某一方。并不是指两个人。请查一下字典吧。a person&#39;s father or mother，翻译成双亲确实会误导国人。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1565584978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1583833,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/E3XKbwTv6WTssolgqZjZCkiazHgl2IdBYfwVfAcB7Ff3krsIQeBIBFQLQE1Kw91LFbl3lic2EzgdfNiciaYDlJlELA/132","nickname":"rike","note":"","ucode":"920AAD0BD9245C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156463,"discussion_content":"牛津中阶英汉双解词典第3版对于parent的解释：a person&#39;s mother or father 父亲；母亲","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580367386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14057,"user_name":"Walter","can_delete":false,"product_type":"c1","uid":1142493,"ip_address":"","ucode":"2AE436899510D0","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/dd/9f6f3305.jpg","comment_is_top":false,"comment_ctime":1530155164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44479828124","product_id":100006701,"comment_content":"当一个类或一个资源文件存在多个jar中，就会出现jar hell问题。<br><br>可以通过以下代码来诊断方案：<br><br>try {<br>\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();<br>\tString resourceName = &quot;net&#47;sf&#47;cglib&#47;proxy&#47;MethodInterceptor.class&quot;;<br>\tEnumeration&lt;URL&gt; urls = classLoader.getResources(resourceName);<br>\twhile(urls.hasMoreElements()){<br>\t\tSystem.out.println(urls.nextElement());<br>\t}<br>} catch (IOException e) {<br>\te.printStackTrace();<br>}<br><br>输出结果：jar:file:&#47;D:&#47;workspace&#47;Test&#47;lib&#47;cglib-3.2.4.jar!&#47;net&#47;sf&#47;cglib&#47;proxy&#47;MethodInterceptor.class","like_count":10},{"had_liked":false,"id":175952,"user_name":"Geek_8c5f9c","can_delete":false,"product_type":"c1","uid":1596047,"ip_address":"","ucode":"70CD441EAF490F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIlZ9AObDSXrfSEibY94uyQvMQ4tOvbb7iaQH9H7QQ6ibNaqFKUGq1TboaFpBSLuP0MCcSXvmqHNg0IA/132","comment_is_top":false,"comment_ctime":1580890647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27350694423","product_id":100006701,"comment_content":"延伸问题似乎没有得到直接回答<br>问在准备阶段，常量和静态变量有什么区别？就准备阶段来说，静态原始类型的常量会被直接赋值，而静态变量或者引用类型的常量会在初始化阶段赋值。","like_count":7},{"had_liked":false,"id":14663,"user_name":"A_吖我去","can_delete":false,"product_type":"c1","uid":1133984,"ip_address":"","ucode":"AE8CEF4DD1234A","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/a0/af1f53f0.jpg","comment_is_top":false,"comment_ctime":1530588363,"is_pvip":false,"replies":[{"id":"5016","content":"试验下吧，除非你修改jdk本身实现，不然加载不了","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530755916,"ip_address":"","comment_id":14663,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18710457547","product_id":100006701,"comment_content":"老师老师，如果我写了一个java.lang.String类，怎么进行加载的，怎么跟原来的类进行区分的？","like_count":5,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420082,"discussion_content":"试验下吧，除非你修改jdk本身实现，不然加载不了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530755916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207630,"user_name":"liiiiiii","can_delete":false,"product_type":"c1","uid":1365523,"ip_address":"","ucode":"6D930B6771743C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJiaZlM5Jfa8nSkAYTXRfib3ytDLFsWNlHndBu9JbDyA8cERkmOFdqia4wfgjPzR5natDCwqicMenYBhQ/132","comment_is_top":false,"comment_ctime":1587123322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14472025210","product_id":100006701,"comment_content":"引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的<br>扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。<br>系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类<br>tomcat为每个App创建一个Loader，里面保存着此WebApp的ClassLoader。需要加载WebApp下的类时，就取出ClassLoader来使用","like_count":4},{"had_liked":false,"id":14054,"user_name":"Kyle","can_delete":false,"product_type":"c1","uid":1106079,"ip_address":"","ucode":"44198A0BEC5FB2","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/9f/9259a6b9.jpg","comment_is_top":false,"comment_ctime":1530154404,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14415056292","product_id":100006701,"comment_content":"Jar Hell问题：当一个类或一个资源文件存在多个jar中，就会出现Jar Hell问题。这不就是我们平常说的jar包冲突?<br><br>网上的解决方案都是通过写一段类加载代码将冲突的类、jar包打印出来。平常我自己的话，会利用Eclipse、IDEA里的显示jar包加载结构的插件来检查出冲突的jar。","like_count":4},{"had_liked":false,"id":14044,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1530151121,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14415053009","product_id":100006701,"comment_content":"就是一个类存在不同的jar包中，解决办法就是自己加载手动通过cassloader加载类","like_count":3},{"had_liked":false,"id":14036,"user_name":"Bug? Feature!","can_delete":false,"product_type":"c1","uid":1164531,"ip_address":"","ucode":"F8FA8A0094FBA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","comment_is_top":false,"comment_ctime":1530148593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14415050481","product_id":100006701,"comment_content":"老大666","like_count":3},{"had_liked":false,"id":68569,"user_name":"书木子谢明","can_delete":false,"product_type":"c1","uid":1259879,"ip_address":"","ucode":"3090C080A570BE","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/67/743128f7.jpg","comment_is_top":false,"comment_ctime":1550545742,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10140480334","product_id":100006701,"comment_content":"老师，我有几个小问题：<br>1. 类文件（.class）文件什么时候被加载？应用启动时？<br>2. 应用启动一段时间后（我理解为类文件已被加载），在类文件A未被使用前删掉A文件，会有什么影响？（我测试的结果是，启动应用后删除类文件会引发NoClassDefFoundError)<br>3. 类文件A被使用过一次后（生成了对象 a1 ),然后删除类文件A，a1 仍可继续使用，并且还可以继续新的A的对象（a2，a3...)，这里不太理解，希望老师能指点一二，谢谢。测试代码如下：<br>public class Test {<br>\tpublic static void main(String [] args) {<br>\t\twhile(true) {<br>\t\t\tScanner sc = new Scanner(System.in);<br>\t\t\tString s = sc.nextLine();<br>\t\t\tif(s.equals(&quot;1&quot;)) {<br>\t\t\t\tnew Test().testDelete();<br>\t\t\t}<br>\t\t}<br>\t}<br>\tpublic  void testDelete() {<br>\t\tWaitDeleted wd = new WaitDeleted(2);<br>\t\tSystem.out.println(wd);<br>\t\tSystem.out.println(wd.x);<br>\t}<br>}<br>public class WaitDeleted {<br>\tint x;<br>\tpublic WaitDeleted(int x) {<br>\t\tthis.x = x;<br>\t}<br>}","like_count":3,"discussions":[{"author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305522,"discussion_content":"启动时候加载的都是必须需要的类库，你自己定义的这部分就是动态加载了所以才有这些现象","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599981832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179876,"avatar":"https://static001.geekbang.org/account/avatar/00/12/00/e4/3ad00970.jpg","nickname":"明智","note":"","ucode":"FCE5E369701922","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207190,"discussion_content":"启动时加上 &#39;-verbose&#39; 就能看到启动时加载了哪些.class文件以及它们的顺序，应该能帮助你理解，其它的上面的老哥解释的很清楚。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584462225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1329547,"avatar":"https://static001.geekbang.org/account/avatar/00/14/49/8b/844e70df.jpg","nickname":"热心网友","note":"","ucode":"8779205D59C409","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7391,"discussion_content":"class文件被装载到JVM后，相关信息已经在内存了，此时和文件在不在没任何关系，所以对象可用；在装载前删除这种情况和那种通过编译、运行时加载时没找到对应文件一个道理，抛出NoClassDefFoundError，例如compileOnly","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567503576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23883,"user_name":"浪尖","can_delete":false,"product_type":"c1","uid":1221820,"ip_address":"","ucode":"65A009976AFC6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/a4/bc/02596f1a.jpg","comment_is_top":false,"comment_ctime":1536713996,"is_pvip":false,"replies":[{"id":"8815","content":"这个行为是为了防止应用代码获取bootstrap cl哦<br>。当然 bootstrap也没有parent","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1536809679,"ip_address":"","comment_id":23883,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10126648588","product_id":100006701,"comment_content":"我们一般可以使用下面方法获取父加载器，但是在通常的 JDK&#47;JRE 实现中，扩展类加载器 getParent() 都只能返回 null。<br><br>不应该是扩展类加载器，而是启动类加载器的父类加载器为null","like_count":3,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423767,"discussion_content":"这个行为是为了防止应用代码获取bootstrap cl哦\n。当然 bootstrap也没有parent","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536809679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14878,"user_name":"落霞与孤鹜","can_delete":false,"product_type":"c1","uid":1111004,"ip_address":"","ucode":"1F06EB86DD2E6B","user_header":"https://static001.geekbang.org/account/avatar/00/10/f3/dc/e7e5c159.jpg","comment_is_top":false,"comment_ctime":1530720634,"is_pvip":false,"replies":[{"id":"5085","content":"没有深入研究Tomcat类加载，逻辑上，这种不应该是可选吗？要么共享，要么各自一份，各有利弊的样子","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530894333,"ip_address":"","comment_id":14878,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10120655226","product_id":100006701,"comment_content":"两个war依赖相同的jar包，部署在同一个tomcat，类会重复加载吗？","like_count":3,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420159,"discussion_content":"没有深入研究Tomcat类加载，逻辑上，这种不应该是可选吗？要么共享，要么各自一份，各有利弊的样子","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1530894333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179876,"avatar":"https://static001.geekbang.org/account/avatar/00/12/00/e4/3ad00970.jpg","nickname":"明智","note":"","ucode":"FCE5E369701922","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207182,"discussion_content":"发现作者好谦虚，tomcat确实提供了公共依赖和各自独立依赖，大佬你明显知道，还说没深入研究。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584461502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196855,"user_name":"ilovealt","can_delete":false,"product_type":"c1","uid":1113180,"ip_address":"","ucode":"35CB4FD836135B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/5c/a3d42cdb.jpg","comment_is_top":false,"comment_ctime":1585318540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880285836","product_id":100006701,"comment_content":"面向对象编程，是走向架构的基础。","like_count":1},{"had_liked":false,"id":192704,"user_name":"护爽使者","can_delete":false,"product_type":"c1","uid":1275464,"ip_address":"","ucode":"12DC35DD74671C","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/48/5ab89daa.jpg","comment_is_top":false,"comment_ctime":1584869045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879836341","product_id":100006701,"comment_content":"双亲委派，依次委派给父类加载，不能加载再由子类来加载","like_count":1},{"had_liked":false,"id":60779,"user_name":"二狗子","can_delete":false,"product_type":"c1","uid":1359181,"ip_address":"","ucode":"EE0589E13C57F5","user_header":"https://static001.geekbang.org/account/avatar/00/14/bd/4d/e8a9bd17.jpg","comment_is_top":false,"comment_ctime":1547550408,"is_pvip":false,"replies":[{"id":"23330","content":"嗯呢","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1549813749,"ip_address":"","comment_id":60779,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5842517704","product_id":100006701,"comment_content":"也有人叫父类委托机制的","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436618,"discussion_content":"嗯呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549813749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1091505,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKKOWAmUxaHaPYJbYojcxmXV6dRKicLycqZaCJwkGdAbkBAm37wFXqbiaCHK5qia0GVQMz1eXlx8pic0A/132","nickname":"dellenovo","note":"","ucode":"C0C82721EBD706","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4634,"discussion_content":"这个名字好些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565609748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20651,"user_name":"Winston","can_delete":false,"product_type":"c1","uid":1165489,"ip_address":"","ucode":"69E97CF79D407F","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/b1/b47e913f.jpg","comment_is_top":false,"comment_ctime":1534643102,"is_pvip":false,"replies":[{"id":"7376","content":"这些版本是连续的，不会浪费，lts确实是未来升级的待选，可以作为重点","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1534858122,"ip_address":"","comment_id":20651,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5829610398","product_id":100006701,"comment_content":"jdk现在的更新模式变了，jdk9是不稳定版本，还需要研究吗？是不是只学习LTS的版本就好了","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422350,"discussion_content":"这些版本是连续的，不会浪费，lts确实是未来升级的待选，可以作为重点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534858122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14606,"user_name":"jacy","can_delete":false,"product_type":"c1","uid":1103456,"ip_address":"","ucode":"0022A8759DDCE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/60/f21b2164.jpg","comment_is_top":false,"comment_ctime":1530575205,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5825542501","product_id":100006701,"comment_content":"老师能否讲讲一般什么场景下需要自定类加载，有什么好处，为什么不用其他方式解决，比如jar hell,此问题可以通过其他方式直接解决，有的评论提到自定义类加载，我并不认为是比较好的解决方式。","like_count":1},{"had_liked":false,"id":14119,"user_name":"Daniel","can_delete":false,"product_type":"c1","uid":1111375,"ip_address":"","ucode":"1526A65FA13956","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/4f/e1c96c55.jpg","comment_is_top":false,"comment_ctime":1530181822,"is_pvip":false,"replies":[{"id":"4761","content":"哪一块儿，抱歉，看来需要再改进一下，感谢认可","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530237967,"ip_address":"","comment_id":14119,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5825149118","product_id":100006701,"comment_content":"感谢，这块是我需要恶补的地方，虽然很多看不懂，但是多看几遍还是有用处的. 佩服老师！","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419877,"discussion_content":"哪一块儿，抱歉，看来需要再改进一下，感谢认可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530237967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14063,"user_name":"三口先生","can_delete":false,"product_type":"c1","uid":1117257,"ip_address":"","ucode":"8E8672321FE510","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/49/d71e939d.jpg","comment_is_top":false,"comment_ctime":1530156505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5825123801","product_id":100006701,"comment_content":"jar冲突的问题，一般源于一个资源文件出现在多个jar里面啦。优先加载自己指定路径下的jar文件，如果加载不到，交给夫类","like_count":1},{"had_liked":false,"id":293044,"user_name":"未雨绸缪","can_delete":false,"product_type":"c1","uid":2061510,"ip_address":"","ucode":"4A60CAC8F3D306","user_header":"https://static001.geekbang.org/account/avatar/00/1f/74/c6/1aaad11d.jpg","comment_is_top":false,"comment_ctime":1621171787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621171787","product_id":100006701,"comment_content":"什么时候进行类加载呢 ？ 什么时候进行进行类加载的初始阶段呢 ？ ","like_count":0},{"had_liked":false,"id":288536,"user_name":"程云飞","can_delete":false,"product_type":"c1","uid":2438981,"ip_address":"","ucode":"5DFBFFBE6A521F","user_header":"https://static001.geekbang.org/account/avatar/00/25/37/45/e994c94e.jpg","comment_is_top":false,"comment_ctime":1618533174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618533174","product_id":100006701,"comment_content":"双亲委托:向上委托，向下查找","like_count":0},{"had_liked":false,"id":229175,"user_name":"承乾","can_delete":false,"product_type":"c1","uid":1997361,"ip_address":"","ucode":"79A89FFD61425D","user_header":"https://static001.geekbang.org/account/avatar/00/1e/7a/31/220c98ca.jpg","comment_is_top":false,"comment_ctime":1592917097,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1592917097","product_id":100006701,"comment_content":"请教一下老师 类加载的链接的准备阶段 类的非静态变量不会被分配内存吗？","like_count":1,"discussions":[{"author":{"id":2391701,"avatar":"","nickname":"Geek_a3890b","note":"","ucode":"BF67D080DAF96D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403901,"discussion_content":"不会，在对象初始化分配内存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634181417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189173,"user_name":"明智","can_delete":false,"product_type":"c1","uid":1179876,"ip_address":"","ucode":"FCE5E369701922","user_header":"https://static001.geekbang.org/account/avatar/00/12/00/e4/3ad00970.jpg","comment_is_top":false,"comment_ctime":1584463249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584463249","product_id":100006701,"comment_content":"我记得源码中有段注释说，（因为不理解，不知道叫平行还是并行好，暂定平行）自定义加载器如果是平行加载器，尽量保证父类也是，还有就是看了几个框架的自定义加载器也确实会在开头用静态代码块注册自己为平行加载器，为什么要这样，有什么好处，还有这样做时要注意那些小细节，希望老师说说","like_count":0},{"had_liked":false,"id":174481,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1580227009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580227009","product_id":100006701,"comment_content":"还是那个老梗，什么双亲委派模型？明显是单亲或者父亲委派模型。","like_count":0},{"had_liked":false,"id":127422,"user_name":"梅云霞","can_delete":false,"product_type":"c1","uid":1400992,"ip_address":"","ucode":"01C8F85B59A202","user_header":"https://static001.geekbang.org/account/avatar/00/15/60/a0/dc0bf77c.jpg","comment_is_top":false,"comment_ctime":1566704969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566704969","product_id":100006701,"comment_content":"是否可以帮忙回答下为什么注解的元素类型只能是原始数据类型，Class，String，enum，以及这几种类型的数组类型。为什么不可以使用复杂数据类型或者原始类型的包装类型？","like_count":0},{"had_liked":false,"id":37372,"user_name":"Phoenix","can_delete":false,"product_type":"c1","uid":1005368,"ip_address":"","ucode":"C51BE4C948755B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/38/ba6a106f.jpg","comment_is_top":false,"comment_ctime":1541560590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541560590","product_id":100006701,"comment_content":"根据上文了解到应用加载器和启动加载器负责加载不同的范围，然后产生一个疑问<br>那么根据双亲委派模型，默认的应用加载器是否也会将用户类路径（ClassPath）的类库，先委托给父加载器加载，然后因为不在父加载器的加载范围，最终还是会由应用加载器加载，<br>这种模型在保证不同范围的类库都由同一加载器加载的同时，是否会产生一些性能开销？","like_count":0},{"had_liked":false,"id":22441,"user_name":"阿巍-豆夫","can_delete":false,"product_type":"c1","uid":1005123,"ip_address":"","ucode":"732188848B0A85","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/43/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1535677494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1535677494","product_id":100006701,"comment_content":"请教下，有个类A是使用自定义类加载器加载的，那么在这个类的方法中我创建另一个类，那么这个类也是被自定义加载器加载的吗？ 或者说是否是app加在还是自定义加载取决于当前上下文的classloader？ ","like_count":0},{"had_liked":false,"id":19122,"user_name":"clz1341521","can_delete":false,"product_type":"c1","uid":1179557,"ip_address":"","ucode":"3BDB4AB454C918","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/a5/eccc7653.jpg","comment_is_top":false,"comment_ctime":1533687609,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1533687609","product_id":100006701,"comment_content":"Jar hell jar包冲突，对于大项目或没有maven的项目是比较麻烦的。1 应用无法启动 2 编译时没问题，运行时报错。解决方法:1 改为maven 项目，使包的管理和依赖可视化2 在1的基础上，解决明显的包编译冲突 3 根据运行时报错找到冲突的包，或者要排除的包","like_count":1,"discussions":[{"author":{"id":1583833,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/E3XKbwTv6WTssolgqZjZCkiazHgl2IdBYfwVfAcB7Ff3krsIQeBIBFQLQE1Kw91LFbl3lic2EzgdfNiciaYDlJlELA/132","nickname":"rike","note":"","ucode":"920AAD0BD9245C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156478,"discussion_content":"能否有自己的回答不要复制别人的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580370094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17796,"user_name":"一个坏人","can_delete":false,"product_type":"c1","uid":1032305,"ip_address":"","ucode":"4AF05BF008095A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg","comment_is_top":false,"comment_ctime":1532957129,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1532957129","product_id":100006701,"comment_content":"老师好，在准备后、初始化前这个阶段会把机器码存放在JMM模型中的方法区（元数据）？？","like_count":0},{"had_liked":false,"id":16629,"user_name":"大成","can_delete":false,"product_type":"c1","uid":1119688,"ip_address":"","ucode":"491BA2A912B16C","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/c8/1df92230.jpg","comment_is_top":false,"comment_ctime":1532056182,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1532056182","product_id":100006701,"comment_content":"老师，所谓的符号引用是什么？直接引用又是什么？？这个真是懵逼。看了书也不理解老师是否可以举个例子","like_count":0,"discussions":[{"author":{"id":1329547,"avatar":"https://static001.geekbang.org/account/avatar/00/14/49/8b/844e70df.jpg","nickname":"热心网友","note":"","ucode":"8779205D59C409","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7411,"discussion_content":"我理解的是（不一定准确哈）符号引用指的是类或接口等的全量限定名，例如包名+类名；直接引用就是内存地址；class加载后在内存里面，所以相应的符号引用的地方就会被替换为对应class的内存地址","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1567505589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1583833,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/E3XKbwTv6WTssolgqZjZCkiazHgl2IdBYfwVfAcB7Ff3krsIQeBIBFQLQE1Kw91LFbl3lic2EzgdfNiciaYDlJlELA/132","nickname":"rike","note":"","ucode":"920AAD0BD9245C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156503,"discussion_content":"看了一些说法，个人理解，符号引用就是引用了变量，因为变量的值会变，所以用符号来引用；直接引用是常量，常量值不可变，直接引用内存地址。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580372183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16082,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1531784113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531784113","product_id":100006701,"comment_content":"一知半解","like_count":0},{"had_liked":false,"id":15681,"user_name":"balance","can_delete":false,"product_type":"c1","uid":1007182,"ip_address":"","ucode":"324D909BBE69DE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/4e/85502e98.jpg","comment_is_top":false,"comment_ctime":1531383738,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531383738","product_id":100006701,"comment_content":"深奥","like_count":0},{"had_liked":false,"id":15193,"user_name":"落霞与孤鹜","can_delete":false,"product_type":"c1","uid":1111004,"ip_address":"","ucode":"1F06EB86DD2E6B","user_header":"https://static001.geekbang.org/account/avatar/00/10/f3/dc/e7e5c159.jpg","comment_is_top":false,"comment_ctime":1530976929,"is_pvip":false,"replies":[{"id":"5325","content":"回复过了，我认为应该看具体server设计，一般共享jar或者单独应该都能做得到","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1531325703,"ip_address":"","comment_id":15193,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1530976929","product_id":100006701,"comment_content":"那两个war依赖相同的jar包，运行在同一个jvm，类会重复加载吗？","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420280,"discussion_content":"回复过了，我认为应该看具体server设计，一般共享jar或者单独应该都能做得到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531325703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14818,"user_name":"perry","can_delete":false,"product_type":"c1","uid":1061037,"ip_address":"","ucode":"05FBB698154457","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/ad/38200a63.jpg","comment_is_top":false,"comment_ctime":1530676871,"is_pvip":false,"replies":[{"id":"5014","content":"同一加载器不能重复加载某个类型，既然都尽量委派给父加载器，除非它加载不了，不然就只有一份","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530755774,"ip_address":"","comment_id":14818,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1530676871","product_id":100006701,"comment_content":"请教老师，使用委派模型具体是怎么避免重复加载java类型的？","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420145,"discussion_content":"同一加载器不能重复加载某个类型，既然都尽量委派给父加载器，除非它加载不了，不然就只有一份","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530755774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}