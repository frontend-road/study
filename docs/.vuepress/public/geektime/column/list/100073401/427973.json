{"id":427973,"title":"Spark UI（上）| 深入解读Spark作业的“体检报告”","content":"<p>你好，我是吴磊。</p><p>好久不见了，距离专栏结束有不少时间了，不过这期间我一直在关注着同学们的留言。今天我就带着你的期待又来了。</p><p>在性能调优的本质那一讲（<a href=\"https://time.geekbang.org/column/article/352577\">第2讲</a>），我们说过性能调优方法论。</p><p>其中的第一条，就是根据专家经验或是运行时的诊断，来定位性能瓶颈。作为Spark内置的运行时监控界面，Spark UI是我们必须要掌握的重要工具。而且随着课程的推进，有不少同学在后台反馈，希望我补充Spark UI的课程内容。</p><p>鉴于以上两点，我用加餐的形式，把Spark UI的内容补充到课程中，希望对你有所帮助。</p><p>在日常的开发工作中，我们总会遇到Spark应用运行失败、或是执行效率未达预期的情况。对于这样的问题，想找到根本原因（Root Cause），就可以通过Spark UI来获取最直接、最直观的线索，在全面地审查Spark应用的同时，迅速定位问题所在。</p><p>如果我们把失败的、或是执行低效的Spark应用看作是“病人”的话，那么Spark UI中关于应用的众多度量指标（Metrics），就是这个病人的“体检报告”。结合多样的Metrics，身为“大夫”的开发者即可结合经验来迅速地定位“病灶”。</p><p>今天这一讲，让我们以小汽车摇号中“倍率计算”的应用（详细内容你可以回顾<a href=\"https://time.geekbang.org/column/article/374776\">第30讲</a>）为例，用图解的方式，一步步地去认识Spark UI，看一看它有哪些关键的度量指标，这些指标都是什么含义，又能为开发者提供哪些洞察（Insights）？</p><!-- [[[read_end]]] --><p>这里需要说明的是，对于Spark UI的介绍与讲解，涉及到大量的图解、代码与指标释义，内容庞杂。因此，为了减轻你的学习负担，我按照Spark UI的入口类型（一级入口、二级入口）把Spark UI拆成了上、下两讲。一级入口比较简单、直接，我们今天这一讲，先来讲解这一部分，二级入口的讲解留到下一讲去展开。</p><h2>准备工作</h2><p>在正式开始介绍Spark UI之前，我们先来简单交代一下图解案例用到的环境、配置与代码。你可以参考这里给出的细节，去复现“倍率计算”案例Spark UI中的每一个界面，然后再结合今天的讲解，以“看得见、摸得着”的方式，去更加直观、深入地熟悉每一个页面与度量指标。</p><p>当然，如果你手头一时没有合适的执行环境，也不要紧。咱们这一讲的特点，就是图多，后面我特意准备了大量的图片和表格，带你彻底了解Spark UI。</p><p>由于小汽车摇号数据体量不大，因此在计算资源方面，我们的要求并不高，“倍率计算”案例用到的资源如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/2b/0b3635aa7eb123b387c507f6caf4b22b.jpg?wh=1491x737\" alt=\"图片\" title=\"硬件资源\"></p><p>接下来是代码，在小汽车摇号应用开发那一讲，我们一步步地实现了“倍率计算”的计算逻辑，这里咱们不妨一起回顾一下。</p><pre><code class=\"language-scala\">// HDFS根目录地址\nval rootPath: String = \"hdfs://hostname:9000\"\n&nbsp;\n// 申请者数据\nval hdfs_path_apply = s\"${rootPath}/2011-2019小汽车摇号数据/apply\"\nval applyNumbersDF = spark.read.parquet(hdfs_path_apply)\n// 创建Cache并触发Cache计算\napplyNumbersDF.cache.count()\n&nbsp;\n// 中签者数据\nval hdfs_path_lucky = s\"${rootPath}/2011-2019小汽车摇号数据/lucky\"\nval luckyDogsDF = spark.read.parquet(hdfs_path_lucky)\n//创建Cache并触发Cache计算\nluckyDogsDF.cache.count()\n&nbsp;\nval result05_01 = applyNumbersDF\n&nbsp;&nbsp;&nbsp; // 按照carNum做关联\n&nbsp;&nbsp;&nbsp; .join(luckyDogsDF.filter(col(\"batchNum\") &gt;= \"201601\").select(\"carNum\"), Seq(\"carNum\"), \"inner\")\n.groupBy(col(\"batchNum\"),col(\"carNum\"))\n.agg(count(lit(1)).alias(\"multiplier\"))\n.groupBy(\"carNum\")\n// 取最大倍率\n.agg(max(\"multiplier\").alias(\"multiplier\"))\n.groupBy(\"multiplier\")\n// 按照倍率做分组计数\n.agg(count(lit(1)).alias(\"cnt\"))\n// 按照倍率排序\n.orderBy(\"multiplier\")\n&nbsp;\nresult05_01.write.mode(\"Overwrite\").format(\"csv\").save(s\"${rootPath}/results/result05_01\")\n</code></pre><p>今天我们在此基础上做一点变化，<strong>为了展示StorageTab页面内容，我们这里“强行”给applyNumbersDF 和luckyDogsDF这两个DataFrame都加了Cache。我们知道，对于引用数量为1的数据集，实际上是没有必要加Cache的，这一点还需要你注意</strong>。</p><p>回顾完代码之后，再来看看配置项。为了让Spark UI能够展示运行中以及执行完毕的应用，我们还需要设置如下配置项并启动History Server。</p><p><img src=\"https://static001.geekbang.org/resource/image/09/e9/09d9a96316b00de7a5afe015a1444de9.jpg?wh=1889x741\" alt=\"图片\" title=\"Event log相关配置项\"></p><pre><code class=\"language-scala\">// SPARK_HOME表示Spark安装目录\n${SPAK_HOME}/sbin/start-history-server.sh\n</code></pre><p>好啦，到此为止，一切准备就绪。接下来，让我们启动spark-shell，并提交“倍率计算”的代码，然后把目光转移到Host1的8080端口，也就是Driver所在节点的8080端口。</p><h2>Spark UI 一级入口</h2><p>今天的故事，要从Spark UI的入口开始，其实刚才说的8080端口正是Spark UI的入口，我们可以从这里进入Spark UI。</p><p>打开Spark UI，首先映入眼帘的是默认的Jobs页面。Jobs页面记录着应用中涉及的Actions动作，以及与数据读取、移动有关的动作。其中，每一个Action都对应着一个Job，而每一个Job都对应着一个作业。我们一会再去对Jobs页面做展开，现在先把目光集中在Spark UI最上面的导航条，这里罗列着Spark UI所有的一级入口，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/56/d2/56563537c4e0ef597629d42618df21d2.png?wh=718x52\" alt=\"图片\" title=\"Spark UI导航条：一级入口\"></p><p>可以看到，导航条最左侧是Spark Logo以及版本号，后面则依次罗列着6个一级入口，每个入口的功能与作用我整理到了如下的表格中，你可以先整体过一下，后面我们再挨个细讲。</p><p><img src=\"https://static001.geekbang.org/resource/image/yy/69/yy40a1yy06a4237dc691e197fa737569.jpg?wh=1920x811\" alt=\"\" title=\"一级入口简介\"></p><p>形象点说，这6个不同的入口，就像是体检报告中6大类不同的体检项，比如内科、外科、血常规，等等。接下来，让我们依次翻开“体检报告”的每一个大项，去看看“倍率计算”这个家伙的体质如何。</p><p>不过，本着由简入难的原则，咱们并不会按照Spark UI罗列的顺序去查看各个入口，<strong>而是按照Executors &gt; Environment &gt; Storage &gt; SQL &gt; Jobs &gt; Stages的顺序，去翻看“体检报告”</strong>。</p><p>其中，前3个入口都是详情页，不存在二级入口；而后3个入口都是预览页，都需要访问二级入口，才能获取更加详细的内容。显然，相比预览页，详情页来得更加直接。接下来，让我们从Executors开始，先来了解一下应用的计算负载。</p><h4>Executors</h4><p>Executors Tab的主要内容如下，主要包含“Summary”和“Executors”两部分。这两部分所记录的度量指标是一致的，其中“Executors”以更细的粒度记录着每一个Executor的详情，而第一部分“Summary”是下面所有Executors度量指标的简单加和。</p><p><img src=\"https://static001.geekbang.org/resource/image/05/7a/05769aed159ab5a49e336451a9c5ed7a.png?wh=1920x807\" alt=\"图片\" title=\"Executors详情页\"></p><p>我们一起来看一下，Spark UI都提供了哪些Metrics，来量化每一个Executor的工作负载（Workload）。为了叙述方便，我们以表格的形式说明这些Metrics的含义与作用。</p><p><img src=\"https://static001.geekbang.org/resource/image/f7/c8/f7373c0616470bde9eb282eefb64a2c8.jpg?wh=1920x1126\" alt=\"图片\" title=\"Executor Metrics\"></p><p>不难发现，Executors页面清清楚楚地记录着每一个Executor消耗的数据量，以及它们对CPU、内存与磁盘等硬件资源的消耗。基于这些信息，我们可以轻松判断不同Executors之间是否存在负载不均衡的情况，进而判断应用中是否存在数据倾斜的隐患。</p><p>对于Executors页面中每一个Metrics的具体数值，它们实际上是Tasks执行指标在Executors粒度上的汇总。因此，对于这些Metrics的释义，咱们留到Stages二级入口再去展开，这里暂时不做一一深入。你不妨结合“倍率计算”的应用，去浏览一下不同Metrics的具体数值，先对这些数字有一个直观上的感受。</p><p>实际上，这些具体的数值，并没有什么特别之处，除了RDD Blocks和Complete Tasks这两个Metrics。细看一下这两个指标，你会发现，RDD Blocks是51（总数），而Complete Tasks（总数）是862。</p><p>之前讲RDD并行度的时候，我们说过，RDD并行度就是RDD的分区数量，每个分区对应着一个Task，因此RDD并行度与分区数量、分布式任务数量是一致的。可是，截图中的51与862，<strong>显然不在一个量级</strong>，这是怎么回事呢？</p><p>这里我先买个关子，把它给你留作思考题，你不妨花些时间，去好好想一想。如果没想清楚也没关系，我们在评论区会继续讨论这个问题。</p><h4>Environment</h4><p>接下来，我们再来说说Environment。顾名思义，Environment页面记录的是各种各样的环境变量与配置项信息，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/83/79/83byy2288931250e79354dec06cyy079.png?wh=1920x1200\" alt=\"图片\" title=\"Environment详情页\"></p><p>为了让你抓住主线，我并没有给你展示Environment页面所包含的全部信息，就类别来说，它包含5大类环境信息，为了方便叙述，我把它们罗列到了下面的表格中。</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/4f/c9596275686485e8a9200b91403b584f.jpg?wh=1699x757\" alt=\"图片\" title=\"Environment Metrics\"></p><p>显然，这5类信息中，Spark Properties是重点，其中记录着所有在运行时生效的Spark配置项设置。通过Spark Properties，我们可以确认运行时的设置，与我们预期的设置是否一致，从而排除因配置项设置错误而导致的稳定性或是性能问题。</p><h4>Storage</h4><p>说完Executors与Environment，我们来看一级入口的最后一个详情页：Storage。</p><p><img src=\"https://static001.geekbang.org/resource/image/ff/5b/ff84db596c0c988422e3dfa86a3b865b.png?wh=1920x485\" alt=\"图片\" title=\"Storage详情页\"></p><p>Storage详情页，记录着每一个分布式缓存（RDD Cache、DataFrame Cache）的细节，包括缓存级别、已缓存的分区数、缓存比例、内存大小与磁盘大小。</p><p>在<a href=\"https://time.geekbang.org/column/article/363445\">第16讲</a>，我们介绍过Spark支持的不同缓存级别，它是存储介质（内存、磁盘）、存储形式（对象、序列化字节）与副本数量的排列组合。对于DataFrame来说，默认的级别是单副本的Disk Memory Deserialized，如上图所示，也就是存储介质为内存加磁盘，存储形式为对象的单一副本存储方式。</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/18/cd982cc408b3cdcef01018ab7e565718.jpg?wh=1920x570\" alt=\"图片\" title=\"Storage Metrics\"></p><p>Cached Partitions与Fraction Cached分别记录着数据集成功缓存的分区数量，以及这些缓存的分区占所有分区的比例。当Fraction Cached小于100%的时候，说明分布式数据集并没有完全缓存到内存（或是磁盘），对于这种情况，我们要警惕缓存换入换出可能会带来的性能隐患。</p><p>后面的Size in Memory与Size in Disk，则更加直观地展示了数据集缓存在内存与硬盘中的分布。从上图中可以看到，由于内存受限（3GB/Executor），摇号数据几乎全部被缓存到了磁盘，只有584MB的数据，缓存到了内存中。坦白地说，这样的缓存，对于数据集的重复访问，并没有带来实质上的性能收益。</p><p>基于Storage页面提供的详细信息，我们可以有的放矢地设置与内存有关的配置项，如spark.executor.memory、spark.memory.fraction、spark.memory.storageFraction，从而有针对性对Storage Memory进行调整。</p><h4>SQL</h4><p>接下来，我们继续说一级入口的SQL页面。当我们的应用包含DataFrame、Dataset或是SQL的时候，Spark UI的SQL页面，就会展示相应的内容，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/cb/dd3231ca21492ff00c63a111d96516cb.png?wh=1920x613\" alt=\"图片\" title=\"SQL概览页\"></p><p>具体来说，一级入口页面，以Actions为单位，记录着每个Action对应的Spark SQL执行计划。我们需要点击“Description”列中的超链接，才能进入到二级页面，去了解每个执行计划的详细信息。这部分内容，我们留到下一讲的二级入口详情页再去展开。</p><h4>Jobs</h4><p>同理，对于Jobs页面来说，Spark UI也是以Actions为粒度，记录着每个Action对应作业的执行情况。我们想要了解作业详情，也必须通过“Description”页面提供的二级入口链接。你先有个初步认识就好，下一讲我们再去展开。</p><p><img src=\"https://static001.geekbang.org/resource/image/84/4b/84b6f0188d39c7e268e1b5f68224144b.png?wh=1920x1200\" alt=\"图片\" title=\"Jobs概览页\"><br>\n相比SQL页面的3个Actions：save（保存计算结果）、count（统计申请编号）、count（统计中签编号）。</p><p>结合前面的概览页截图你会发现，Jobs页面似乎凭空多出来很多Actions。主要原因在于，在Jobs页面，Spark UI会把数据的读取、访问与移动，也看作是一类“Actions”，比如图中Job Id为0、1、3、4的那些。这几个Job，实际上都是在读取源数据（元数据与数据集本身）。</p><p>至于最后多出来的、Job Id为7的save，你不妨结合最后一行代码，去想想问什么。这里我还是暂时卖个关子，留给你足够的时间去思考，咱们评论区见。</p><pre><code class=\"language-scala\">result05_01.write.mode(\"Overwrite\").format(\"csv\").save(s\"${rootPath}/results/result05_01\")\n</code></pre><h4>Stages</h4><p>我们知道，每一个作业，都包含多个阶段，也就是我们常说的Stages。在Stages页面，Spark UI罗列了应用中涉及的所有Stages，这些Stages分属于不同的作业。要想查看哪些Stages隶属于哪个Job，还需要从Jobs的Descriptions二级入口进入查看。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/7d/71cd54b597be76a1c900864661e3227d.png?wh=1920x1200\" alt=\"图片\" title=\"Stages概览页\"></p><p>Stages页面，更多地是一种预览，要想查看每一个Stage的详情，同样需要从“Description”进入Stage详情页（下一讲详细展开）。</p><p>好啦，到此为止，对于导航条中的不同页面，我们都做了不同程度的展开。简单汇总下来，其中<strong>Executors、Environment、Storage是详情页，开发者可以通过这3个页面，迅速地了解集群整体的计算负载、运行环境，以及数据集缓存的详细情况；而SQL、Jobs、Stages，更多地是一种罗列式的展示，想要了解其中的细节，还需要进入到二级入口</strong>。</p><p>正如开篇所说，二级入口的讲解，我们留到下一讲再去探讨，敬请期待。</p><h2>重点回顾</h2><p>好啦，今天的课程，到这里就讲完啦。今天的内容比较多，涉及的Metrics纷繁而又复杂，仅仅听一遍我的讲解，还远远不够，还需要你结合日常的开发，去多多摸索与体会，加油！</p><p>今天这一讲，我们从简单、直接的一级入口入手，按照“Executors -&gt; Environment -&gt; Storage -&gt; SQL -&gt; Jobs -&gt; Stages”的顺序，先后介绍了一级入口的详情页与概览页。对于这些页面中的内容，我把需要重点掌握的部分，整理到了如下表格，供你随时参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/c7/e324fa0b2db69499d951290dc4351bc7.jpg?wh=1920x811\" alt=\"图片\"></p><h2>每课一练</h2><p>今天的思考题，我们在课程中已经提过了。一个是在Executors页面，为什么RDD Blocks与Complete Tasks的数量不一致。第二个是，在Jobs页面，为什么最后会多出来一个save Action？</p><p>欢迎你在留言区跟我交流探讨，也欢迎推荐你把这一讲分享给有需要的朋友、同事。</p>","comments":[{"had_liked":false,"id":318294,"user_name":"Hiway","can_delete":false,"product_type":"c1","uid":1169895,"ip_address":"","ucode":"3E97C70A04018C","user_header":"https://static001.geekbang.org/account/avatar/00/11/d9/e7/45d9e964.jpg","comment_is_top":false,"comment_ctime":1635234695,"is_pvip":false,"replies":[{"id":"115581","content":"不太对哈~<br><br>标准答案是：<br><br>第一个：每个rdd经过处理后，又可能生成其他rdd，这里的tasks显示的是整个executors处理过的任务数，跟rdd cache的blocks无关。<br><br>第二个：因为代码最后一个是save，而save的mode是overwrite，save本身会有一个action，而overwrite的过程，实际上是先在临时文件夹生成数据，然后再move到目标文件夹，有一个数据移动的动作，所以Spark也把它算做了一个Action。","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1635429588,"ip_address":"","comment_id":318294,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44584907655","product_id":100073401,"comment_content":"第一问：我的理解是RDD Blocks表示的是读入数据集时的分区数，而Complete Tasks则表示整个job完成时该Executor完成的Task数。我觉得原因有二：<br>一是spark在划分DAG时，遇到shuffle便会断开产生新的Stage，一个task只是对应一个stage里的一个partition。<br>二是如果未修改spark.sql.shuffle.partitions配置，在join的时候就会自动修改为200的并行度，对应的下一个Stage也就产生了200个task<br><br>第二问：从Executors界面看，应该是两个Executor在跑。因为是分布式所以在最后write的时候，两个Executor都进行了save操作。至于为什么是两台Executor跑，应该这样计算出来的：executor 数量 = spark.cores.max&#47;spark.executor.cores<br><br>老师，是这样吗？可以发一下你的spark-submit命令嘛?","like_count":11,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529174,"discussion_content":"不太对哈~\n\n标准答案是：\n\n第一个：每个rdd经过处理后，又可能生成其他rdd，这里的tasks显示的是整个executors处理过的任务数，跟rdd cache的blocks无关。\n\n第二个：因为代码最后一个是save，而save的mode是overwrite，save本身会有一个action，而overwrite的过程，实际上是先在临时文件夹生成数据，然后再move到目标文件夹，有一个数据移动的动作，所以Spark也把它算做了一个Action。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635429588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1028358,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b1/06/b62be1b8.jpg","nickname":"朱磊","note":"","ucode":"319D61D18DDA87","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":551254,"discussion_content":"老师，很想知道您的这些知识都是怎么获取到的，通过spark的源码吗？还是有文档或者别人文章上有这些东西，我用了一年spark了，但是您说的这两个问题我都不知道答案，也不知道怎么才能得到答案。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644940181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":529174,"ip_address":""},"score":551254,"extra":""}]}]},{"had_liked":false,"id":317913,"user_name":"onepieceJT2018","can_delete":false,"product_type":"c1","uid":1112182,"ip_address":"","ucode":"C8C214C3D5D285","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/76/3db69173.jpg","comment_is_top":false,"comment_ctime":1635049778,"is_pvip":true,"replies":[{"id":"115467","content":"Storage页面是用来显示分布式数据集缓存的，比如RDD Cache、DataFrame Cache，等等。<br><br>Hive on Spark的集成中，Spark与MapReduce、Tez都是同等的地位，都是执行引擎，而且一般Hive SQL中，并不存在分布式数据集缓存的概念，所以Storage面板空空如也倒是也不足为怪~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1635261266,"ip_address":"","comment_id":317913,"utype":1}],"discussion_count":1,"race_medal":3,"score":"23109886258","product_id":100073401,"comment_content":"不知道为什么 hive on spark的话 ui里面storage 这个面板是空白","like_count":5,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529027,"discussion_content":"Storage页面是用来显示分布式数据集缓存的，比如RDD Cache、DataFrame Cache，等等。\n\nHive on Spark的集成中，Spark与MapReduce、Tez都是同等的地位，都是执行引擎，而且一般Hive SQL中，并不存在分布式数据集缓存的概念，所以Storage面板空空如也倒是也不足为怪~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635261266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319212,"user_name":"Reiser","can_delete":false,"product_type":"c1","uid":1078669,"ip_address":"","ucode":"E5DBBBA2F86FCE","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/8d/c6a2a048.jpg","comment_is_top":false,"comment_ctime":1635677360,"is_pvip":true,"replies":[{"id":"115717","content":"哈哈，老弟喜欢就好~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1635684037,"ip_address":"","comment_id":319212,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18815546544","product_id":100073401,"comment_content":"周末回看之前的文章，看到这篇加餐有点感动。太走心了，磊哥！","like_count":4,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529545,"discussion_content":"哈哈，老弟喜欢就好~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635684037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331793,"user_name":"LR.яг ®","can_delete":false,"product_type":"c1","uid":2717560,"ip_address":"","ucode":"8C91AB8FF1AEEE","user_header":"https://static001.geekbang.org/account/avatar/00/29/77/78/e241fe80.jpg","comment_is_top":false,"comment_ctime":1642760803,"is_pvip":false,"replies":[{"id":"121404","content":"有的，不过这个限制，不是在Spark层面做的。一般在工业级，Spark一般都是用YARN来调度，YARN里面可以设置资源队列，每个队列内部，可以限制可用资源总量，不同类型的作业，比如批处理、流计算，往往是会单独创建队列来服务。所以回答你的问题，可以让运营团队设置不同的资源队列，从而达到资源隔离的目的~","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1643189212,"ip_address":"","comment_id":331793,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10232695395","product_id":100073401,"comment_content":"有一个别的组同事，每次启动spark都会把资源申请完，他的部分启动命令如下： --executor-memory 6G --num-executors 2000 --executor-cores 4。导致我每次都要去kill掉他的application。<br>请问老师，有没有什么方法可以限制启动时不允许申请这么多资源？","like_count":2,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548424,"discussion_content":"有的，不过这个限制，不是在Spark层面做的。一般在工业级，Spark一般都是用YARN来调度，YARN里面可以设置资源队列，每个队列内部，可以限制可用资源总量，不同类型的作业，比如批处理、流计算，往往是会单独创建队列来服务。所以回答你的问题，可以让运营团队设置不同的资源队列，从而达到资源隔离的目的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643189212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264318,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/be/7168674c.jpg","nickname":"锐意进取","note":"","ucode":"D38C42B6F61279","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583170,"discussion_content":"啥作用需要那么多资源，每个开发上业务的时候，都应该规划一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659939084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322954,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1637668549,"is_pvip":false,"replies":[{"id":"117435","content":"听上去不太对，你可以加我微信，把代码和截图发给我，咱们一起看看。微信搜索“方块K”或是“rJunior”","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1638066788,"ip_address":"","comment_id":322954,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5932635845","product_id":100073401,"comment_content":"老师我的executors页面为什么rdd blocks都是0？","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533998,"discussion_content":"听上去不太对，你可以加我微信，把代码和截图发给我，咱们一起看看。微信搜索“方块K”或是“rJunior”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638066788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1813026,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJO944A1HeBCrewW7YHE1Ha3OVWDEz8iaXwD23iczWrG9eG6deJ0dK5qD1qJuLB0u7LnU4ujtokvjAg/132","nickname":"keeprun","note":"","ucode":"0D1FBBB98567D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540270,"discussion_content":"原因是否是代码中没有使用rdd算子计算？看我这边的执行记录，纯SparkSQL的记录，RDD blocks均为0，而使用SparkCore的有具体的数值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640004055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2028277,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","nickname":"Unknown element","note":"","ucode":"34A129800D0238","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1813026,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJO944A1HeBCrewW7YHE1Ha3OVWDEz8iaXwD23iczWrG9eG6deJ0dK5qD1qJuLB0u7LnU4ujtokvjAg/132","nickname":"keeprun","note":"","ucode":"0D1FBBB98567D0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548061,"discussion_content":"有可能诶，我这边是用hive sql开发的，使用beeline提交到spark计算，应该是属于spark with hive的部署方式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643016325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":540270,"ip_address":""},"score":548061,"extra":""}]}]},{"had_liked":false,"id":319226,"user_name":"jerry guo","can_delete":false,"product_type":"c1","uid":1267753,"ip_address":"","ucode":"179943AFCB93F8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo2GMhevabZrjINs2TKvIeGC7TJkicNlLvqTticuM5KL8ZN80OC2CnrsUyzPcZXO4uptj4Q1S4jT2lQ/132","comment_is_top":false,"comment_ctime":1635684742,"is_pvip":true,"replies":[{"id":"115722","content":"运行的时候Spark UI看8080端口；运行结束之后，在开启History server的情况下，看18080端口~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1635687870,"ip_address":"","comment_id":319226,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5930652038","product_id":100073401,"comment_content":"spark sql job的Storage页面怎么是空白的呢？是只有运行的时候才有数据吗","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529550,"discussion_content":"运行的时候Spark UI看8080端口；运行结束之后，在开启History server的情况下，看18080端口~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635687870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317110,"user_name":"Geek_01fccd","can_delete":false,"product_type":"c1","uid":2177406,"ip_address":"","ucode":"6D5D9C2882513F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ia89MwaRSP6iaeQB4789roUntH7tia9EXyoDOnlibE8ABibAzFPiamP0SAU54NNTRiaVtkOtmLaWRH5OXbTOhUZl46scw/132","comment_is_top":false,"comment_ctime":1634690612,"is_pvip":false,"replies":[{"id":"115113","content":"是的，不同页面的统计维度不同，拿Executors页面为例，它的统计维度是Executors，相当于把其他维度（比如Jobs、Stages）就都抹掉了","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1634887799,"ip_address":"","comment_id":317110,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5929657908","product_id":100073401,"comment_content":"多个job公用一个executer，是按照executer纬度，计算的完成的task数吗？","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528659,"discussion_content":"是的，不同页面的统计维度不同，拿Executors页面为例，它的统计维度是Executors，相当于把其他维度（比如Jobs、Stages）就都抹掉了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634887799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2340596,"avatar":"","nickname":"阳台","note":"","ucode":"CD76C0917139AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406576,"discussion_content":"估计是所有task数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634798049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357618,"user_name":"ddww","can_delete":false,"product_type":"c1","uid":1184678,"ip_address":"陕西","ucode":"2871112FC9B3F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDgV2qia6eAL7Fb4egX3odViclRRwOlkfCBrjhU9lLeib90KGkIDjdddSibNVs47N90L36Brgnr6ppiag/132","comment_is_top":false,"comment_ctime":1663492423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663492423","product_id":100073401,"comment_content":"想请教一个问题，Executors页面下，Storage Memory 4.3G是怎么算出来的，这个是集群FrameWork Memory的总和吗？如果是的话，我只算出来3.1G。","like_count":0},{"had_liked":false,"id":352588,"user_name":"Van","can_delete":false,"product_type":"c1","uid":1964434,"ip_address":"","ucode":"DFA86072AB84CC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f9/92/f9e3e023.jpg","comment_is_top":false,"comment_ctime":1658798059,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658798059","product_id":100073401,"comment_content":"好东西","like_count":0},{"had_liked":false,"id":344612,"user_name":"骨汤鸡蛋面","can_delete":false,"product_type":"c1","uid":1050002,"ip_address":"","ucode":"2AC141A523E710","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/92/b609f7e3.jpg","comment_is_top":false,"comment_ctime":1651670389,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651670389","product_id":100073401,"comment_content":"请问下，spark 有没有类似prometheus metric 监控呢","like_count":0},{"had_liked":false,"id":339575,"user_name":"苏文进","can_delete":false,"product_type":"c1","uid":2045506,"ip_address":"","ucode":"E73826626AB14A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/36/42/70d01532.jpg","comment_is_top":false,"comment_ctime":1648199069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648199069","product_id":100073401,"comment_content":"老师好，我用代码算了一下storageMemory和SparkUI上的对不上，我的spark版本是3.0.0：<br>```<br>def calculateStorageMemory(<br>      executorMemory: Long = Runtime.getRuntime.maxMemory<br>  ): Unit = {<br>    val systemMemory = executorMemory<br>    val reservedMemory = 300 * 1024 * 1024<br>    &#47;&#47; User Memory 用于存储开发者自定义的数据结构，例如 RDD 算子中引用的数组、列表、映射等等。<br>    val userMemory = (systemMemory - reservedMemory) * 0.4<br>    &#47;&#47; Storage Memory 用于缓存分布式数据集，比如 RDD Cache、广播变量等等<br>    val storageMemory = (systemMemory - reservedMemory) * 0.6 * 0.5<br>    val storageMemoryAsMb = JavaUtils.byteStringAsMb(storageMemory.toLong + &quot;b&quot;)<br>    println(&quot;actual storageMemory is %d MB&quot;.format(storageMemoryAsMb))<br>  }<br><br>  calculateStorageMemory()<br>  calculateStorageMemory(1*1024*1024*1024) &#47;&#47; spark.executor.memory默认: 1g<br>```<br>打印结果：<br>actual storageMemory is 1002 MB<br>actual storageMemory is 217 MB<br>而SparkUI上显示的是2GiB.<br>我找了一下答案：<br>有的对不上是因为开了堆外内存，但是默认情况堆外内存是关闭的，这个原因排除。<br>有的对不上是SparkUI上字节到GB的换算是用的1000而不是1024，这个bug已经被修复了（https:&#47;&#47;issues.apache.org&#47;jira&#47;browse&#47;SPARK-25696），所以也被排除。<br>还有的对不上是JVM实际可用内存比spark.executor.memory的值小，而我情况是默认1g，JVM可用的内存是3个多g.<br>","like_count":0},{"had_liked":false,"id":322759,"user_name":"保护","can_delete":false,"product_type":"c1","uid":1940842,"ip_address":"","ucode":"CD59FC5E087BCB","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9d/6a/9158f399.jpg","comment_is_top":false,"comment_ctime":1637577356,"is_pvip":false,"replies":[{"id":"117411","content":"是的~","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1637986773,"ip_address":"","comment_id":322759,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637577356","product_id":100073401,"comment_content":"Job Id 为 7存在的原因 是因为保存了文件嘛","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533822,"discussion_content":"是的~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637986773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321642,"user_name":"Geek_18fe90","can_delete":false,"product_type":"c1","uid":2260535,"ip_address":"","ucode":"6BF21B093883BA","user_header":"","comment_is_top":false,"comment_ctime":1636971207,"is_pvip":false,"replies":[{"id":"116834","content":"哈哈","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1637039981,"ip_address":"","comment_id":321642,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636971207","product_id":100073401,"comment_content":"解决了我的一块心病","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530326,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637039981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317056,"user_name":"Sean","can_delete":false,"product_type":"c1","uid":2162751,"ip_address":"","ucode":"69234046BFD81B","user_header":"https://static001.geekbang.org/account/avatar/00/21/00/3f/a0f84788.jpg","comment_is_top":false,"comment_ctime":1634652846,"is_pvip":false,"replies":[{"id":"114781","content":"哈哈，绝对沙发～🛋️","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1634686679,"ip_address":"","comment_id":317056,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634652846","product_id":100073401,"comment_content":"抢个沙发先🤯🤯🤯","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528632,"discussion_content":"哈哈，绝对沙发～🛋️","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634686679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}