{"id":794450,"title":"08｜不同应用场景下的K8s资源对象","content":"<p>你好，我是雪飞。</p><p>上节课我介绍了 Deployment，这节课我们来聊聊其他几种资源对象。命名空间 Namespace 用来对 K8s 中的资源对象进行分组隔离管理，Job 和 CronJob 用来部署任务和定时任务类应用，DaemonSet 用来部署节点守护应用，ConfigMap 和 Secret 用来配置 Pod 用到的环境变量和配置文件。这些资源对象都是围绕 Pod 部署单元提供了更多强大的功能。</p><p>现在就跟我来学习今天的第一个资源对象 Namespace。</p><h2>Namespace</h2><p>之前的课程中提到过命名空间 Namespace，它用于创建 K8s 资源对象的逻辑隔离分区。对于命名空间可以设置不同的访问权限和资源配额，所以你在 K8s 集群中部署资源对象之前，就需要规划好命名空间。K8s 搭建好之后就已经自动创建了几个初始的命名空间，例如 default 是默认命名空间，kube-system 是 K8s 组件的命名空间。</p><p>命名空间常用于以下的应用场景：</p><ul>\n<li><strong>集群按照不同的项目划分命名空间</strong>：项目1命名空间 project1-ns 和项目2命名空间 project2-ns，项目1的相关资源对象部署到 project1-ns 命名空间，项目2的相关资源对象部署到 project2-ns 命名空间，这样在某个命名空间下查看和管理资源对象时，都不会影响到另一个项目。</li>\n<li><strong>集群按照不同的部署环境划分命名空间：</strong>例如开发环境命名空间 dev-ns 和测试环境命名空间 test-ns（命名空间可以划分开发环境和测试环境，但是对于生产环境和测试环境还是建议部署两套集群，从硬件方面就做到完全隔离）。</li>\n</ul><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/61/af/617aab9b12e99bf144164b623648eaaf.jpg?wh=598x512\" alt=\"图片\"></p><p>可以通过 kubectl 命令来管理命名空间。</p><pre><code class=\"language-bash\">查看命名空间：kubectl get namespace\n创建命名空间：kubectl create namespace &lt;namespace名称&gt;\n删除命名空间：kubectl delete namespace &lt;namespace名称&gt;\n</code></pre><p><strong>注意</strong><strong>：</strong>删除命名空间时，所有该命名空间中的资源对象也会被自动删除，因此请谨慎操作。</p><p>如果我们想在创建资源对象的 YAML 文件中设定它的命名空间，需要先确保 K8s 中已有这个命名空间，然后在 YAML 文件的 metadata 属性中加入一行 namespace 的属性来指定命名空间，这样资源对象就会部署到相应的命名空间中。</p><pre><code class=\"language-yaml\">...\nmetadata:\n&nbsp; name: nginx-pod\n  namespace: my-namespace # 先创建命名空间，然后在这里指定命名空间\n&nbsp; labels:\n&nbsp; &nbsp; app: nginx\n...\n</code></pre><p>你如果把资源对象部署到了某个命名空间中，记得在任何使用该资源对象的命令中都要加上 “-n &lt;namespace名称&gt;” 参数，否则会提示无法找到。</p><h2>Job</h2><p>在 K8s 集群中，我们通常需要执行一些一次性或定时的任务，例如数据处理、报表生成、定时备份等。这时，我们可以使用 Job 和 CronJob。顾名思义，Job 用于处理一次性任务，而 CronJob 则用于处理周期性的定时任务。</p><p>Job 的工作原理是创建一个或者多个 Pod 来执行一次性指定任务，如果是多个 Pod 副本，就会同时并发创建多个 Pod 执行任务。一旦所有 Pod 都成功完成，Job 的状态就会更新为成功。</p><p>Job 通过 YAML 文件进行定义，下面我们看一个 Job 的 YAML 文件（my-job.yaml）。</p><pre><code class=\"language-yaml\"># my-job.yaml&nbsp;\napiVersion: batch/v1\nkind: Job\nmetadata:\n&nbsp; name: my-job\nspec:\n  backoffLimit: 3  # Pod 失败重启次数\n  completions: 2   # Pod 副本数量\n&nbsp; template:\n&nbsp; &nbsp; spec:\n&nbsp; &nbsp; &nbsp; containers:\n&nbsp; &nbsp; &nbsp; - image: busybox\n&nbsp; &nbsp; &nbsp; &nbsp; name: my-job-c\n&nbsp; &nbsp; &nbsp; &nbsp; command: [\"/bin/sh\", \"-c\", \"sleep 30 &amp;&amp; echo 'do my job'\"]\n</code></pre><ul>\n<li><strong>backoffLimit：</strong>设置 Pod 的失败重试次数。</li>\n<li><strong>completions：</strong>指定完成 Job 需要运行多少个 Pod，就是 Pod 副本数的意思。默认是 1 个，如果设置多个，Job 将并发地运行这些 Pod，直到达到指定的数量，这也是 Job 的并发执行的特性。</li>\n<li><strong>template：</strong>定义了一个 Pod 模板，与 Deployment 中的 Pod 模板字段一样，里面定义了一个 Pod，这样 Job 就可以从这个模板中创建出 Pod。Job 不需要通过匹配标签来管理 Pod，所以 Job 中的 Pod 不需要有标签属性。</li>\n</ul><p>部署 Job 的 YAML 文件，然后我们查看一下运行结果，可以看到 Job 的状态信息，包括成功完成的任务数量和失败的任务数量。</p><pre><code class=\"language-bash\">[root@k8s-master ~]# kubectl apply -f my-job.yaml&nbsp;\njob.batch/my-job created\n\n[root@k8s-master ~]# kubectl get job\nNAME&nbsp; &nbsp; &nbsp;COMPLETIONS&nbsp; &nbsp;DURATION&nbsp; &nbsp;AGE\nmy-job&nbsp; &nbsp;2/2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;99s&nbsp; &nbsp; &nbsp; &nbsp; 2m5s\n\n[root@k8s-master ~]# kubectl get pod\nNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;READY&nbsp; &nbsp;STATUS&nbsp; &nbsp; &nbsp; RESTARTS&nbsp; &nbsp; &nbsp; &nbsp;AGE\nmy-job-h2sdr&nbsp; &nbsp; &nbsp;0/1&nbsp; &nbsp; &nbsp;Completed&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 81s\nmy-job-xng26&nbsp; &nbsp; &nbsp;0/1&nbsp; &nbsp; &nbsp;Completed&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2m10s\n</code></pre><h2>CronJob</h2><p>CronJob 是通过管理 Job 来实现对 Pod 的管理，它允许你按照预定的时间（Cron 格式）来创建和运行 Job。这种关系也体现在了 CronJob 的 YAML 文件格式中。</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/7b/d899492637063b47231269af426c027b.jpg?wh=1077x460\" alt=\"图片\"></p><p>我们来看一下 CronJob 的 YAML 文件（my-cronjob.yaml）。</p><pre><code class=\"language-yaml\"># my-cronjob.yaml&nbsp;\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n&nbsp; name: my-cronjob\nspec:\n  schedule: \"*/1 * * * *\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          restartPolicy: OnFailure\n          containers:\n          - image: busybox\n            name: my-job-c\n            command: [\"/bin/sh\", \"-c\", \"sleep 30 &amp;&amp; echo 'do my job'\"]\n</code></pre><ul>\n<li><strong>schedule：</strong>该字段用来设置 cron 定时表达式，用来指定任务的执行时间。</li>\n</ul><p>CronJob 的定时任务仅支持 5 位，表达式写法如下：</p><pre><code class=\"language-bash\">*/1&nbsp;      *&nbsp; &nbsp;   &nbsp; *&nbsp;    &nbsp; *&nbsp;     &nbsp; &nbsp;*\n&lt;分钟&gt;   &lt;小时&gt;    &lt;日&gt;    &lt;月份&gt;     &lt;星期&gt;\n# 分钟：值从 0 到 59\n# 小时：值从 0 到 23\n# 日：值从 1 到 31\n# 月：值从 1 到 12\n# 星期：值从 0 到 6, 0 代表星期日\n# “*” 可以作为通配符，“/” 表示间隔\n# 例如 “*/1 * * * *” 表示每隔1分钟，“* */2 * * *” 表示每隔2小时\n</code></pre><p>部署 CronJob 的 YAML 文件，然后我们查看一下运行结果，可以看到 CronJob 每分钟会创建一个 Job，同时这个 Job 会创建一个 Pod 来执行任务。</p><pre><code class=\"language-bash\">[root@k8s-master ~]# kubectl apply -f my-cronjob.yaml&nbsp;\ncronjob.batch/my-cronjob created\n\n[root@k8s-master ~]# kubectl get cronjob\nNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SCHEDULE&nbsp; &nbsp; &nbsp; SUSPEND&nbsp; &nbsp;ACTIVE&nbsp; &nbsp;LAST SCHEDULE&nbsp; &nbsp;AGE\nmy-cronjob&nbsp; &nbsp;*/1 * * * *&nbsp; &nbsp;False&nbsp; &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp; 0s&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2m53s\n\n[root@k8s-master ~]# kubectl get job\nNAME                  COMPLETIONS   DURATION   AGE\nmy-cronjob-28646564   1/1           51s        3m5s\nmy-cronjob-28646566   1/1           49s        65s\nmy-cronjob-28646567   0/1           5s         5s\n\n[root@k8s-master ~]# kubectl get pod\nNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; READY&nbsp; &nbsp;STATUS&nbsp; &nbsp; &nbsp; RESTARTS&nbsp; &nbsp; &nbsp; &nbsp;AGE\nmy-cronjob-28646564-jl4nv&nbsp; &nbsp; &nbsp;0/1&nbsp; &nbsp; &nbsp;Completed&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2m26s\nmy-cronjob-28646565-6qvwb&nbsp; &nbsp; &nbsp;0/1&nbsp; &nbsp; &nbsp;Completed&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 86s\nmy-cronjob-28646566-dvbcm&nbsp; &nbsp; &nbsp;1/1&nbsp; &nbsp; &nbsp;Running&nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 26s\n</code></pre><h2>Daemonset</h2><p>在 K8s 中，DaemonSet 能够确保所有节点上都运行同一个 Pod 的副本，并且当有新节点加入时，也会自动运行这个 Pod 副本，这类似于在每个节点上自动安装了一个守护应用。DaemonSet 适用于部署日志采集、系统监控和网络代理等组件，这些组件要求在每个节点上都要运行一个自己的 Pod 副本。例如，我们之前介绍过的 kube-proxy 网络代理组件就是通过 DaemonSet 进行部署的。</p><p><img src=\"https://static001.geekbang.org/resource/image/16/96/1618df90b0ff0e9e5318dcce1198bc96.jpg?wh=1251x671\" alt=\"图片\"></p><p>我们来看一个 DaemonSet 的 YAML 文件（my-daemonset.yaml）。</p><pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n&nbsp; name: my-daemonset\nspec:\n&nbsp; selector:\n&nbsp; &nbsp; matchLabels:\n&nbsp; &nbsp; &nbsp; name: my-daemonset-pod\n&nbsp; template:\n&nbsp; &nbsp; metadata:\n&nbsp; &nbsp; &nbsp; labels:\n&nbsp; &nbsp; &nbsp; &nbsp; name: my-daemonset-pod\n&nbsp; &nbsp; spec:\n&nbsp; &nbsp; &nbsp; containers:\n&nbsp; &nbsp; &nbsp; - name: nginx\n&nbsp; &nbsp; &nbsp; &nbsp; image: nginx\n</code></pre><p>DaemonSet 与 Deployment 的 YAML 文件非常相似。它也是通过匹配 Pod 的标签 Label 来管理 Pod。不过，需要注意的是，DaemonSet 不需要 “replicas” 字段，它的 Pod 副本数量通常等于集群可用节点的数量（通过污点来阻止 Pod 部署的节点除外）。</p><p>部署 DaemonSet 的 YAML 文件，然后我们查看一下运行结果，可以看到 Daemonset 在两个工作节点上都创建了一个 Pod。（因为管理节点上有污点，所以管理节点上没有运行 DaemonSet 的 Pod）</p><pre><code class=\"language-bash\">[root@k8s-master ~]# kubectl apply -f my-daemonset.yaml\ndaemonset.apps/my-daemonset created\n\n[root@k8s-master ~]# kubectl get daemonset\nNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DESIRED&nbsp; &nbsp;CURRENT&nbsp; &nbsp;READY&nbsp; &nbsp;UP-TO-DATE&nbsp; &nbsp;AVAILABLE&nbsp; &nbsp;NODE SELECTOR&nbsp; &nbsp;AGE\nmy-daemonset&nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;none&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 11s\n\n[root@k8s-master ~]# kubectl get pod -o wide\nNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; READY&nbsp; &nbsp;STATUS&nbsp; &nbsp;RESTARTS&nbsp;  AGE&nbsp; &nbsp;IP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;NODE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NOMINATED NODE&nbsp;  READINESS GATES\nmy-daemonset-7xfvk&nbsp; &nbsp; 1/1&nbsp; &nbsp; &nbsp;Running&nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 33s&nbsp; &nbsp;10.244.126.36&nbsp; &nbsp;k8s-worker2&nbsp; &nbsp;&lt;none&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;none&gt;\nmy-daemonset-pr66z&nbsp; &nbsp; 1/1&nbsp; &nbsp; &nbsp;Running&nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 33s&nbsp; &nbsp;10.244.194.92&nbsp; &nbsp;k8s-worker1&nbsp; &nbsp;&lt;none&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;none&gt;\n</code></pre><h2>ConfigMap 和 Secret</h2><p>我们来看一个开发经常遇到的场景，写代码的时候经常会用到一些配置参数，这些参数通常是 Key-Value 键值对，我们不希望写死到代码里，而是希望能有一个配置文件去存储这些配置，程序运行的时候会自动读取这些文件。</p><p>在 K8s 中，提供了 ConfigMap 和 Secret 这两种资源对象来实现这个需求。ConfigMap 是一种明文的配置参数，比如记录环境变量、文件路径、运行参数等。Secret 是使用了 base64 编码的配置参数，通常保存数据库密码、第三方的一些秘钥等。需要注意，base64 编码并非一种安全的加密方式，它仅仅是一种编码格式的转换。</p><p><img src=\"https://static001.geekbang.org/resource/image/de/e0/de3e94295f37a684d82bdb6ed654abe0.jpg?wh=771x336\" alt=\"图片\"></p><p>使用 ConfigMap 和 Secret 主要是两步：</p><ol>\n<li>第一步是在集群中创建好 ConfigMap 和 Secret。</li>\n<li>第二步是在 Pod 的 YAML 文件中使用 ConfigMap 和 Secret。</li>\n</ol><p>下面，我通过一个实验给你演示一下 ConfigMap 和 Secret 的用法。</p><h3>第一步：创建 ConfigMap 和 Secret</h3><p>使用 kubectl 命令和 YAML 文件都可以创建 ConfigMap 和 Secret。</p><p><strong>使用 “kubectl create” 命令创建ConfigMap 和 Secret。</strong></p><pre><code class=\"language-bash\"># 创建名称为 my-configmap 的 ConfigMap\n# 包含 count=10 和 path=\"/data\" 两个参数\nkubectl create configmap my-configmap --from-literal=count=10 --from-literal=path=\"/data\"\n\n# 创建名称为 my-secret 的 Secret\n# 包含 username=admin 和 password=123456 两个参数\nkubectl create secret generic my-secret --from-literal=username=admin --from-literal=password=123456\n</code></pre><p><strong>–from-literal：</strong>表示 ConfigMap 和 Secret 中存放的配置参数的键值对。</p><p>在创建 Secret 时，多使用了一个 generic 参数。这个参数表示 Secret 的类型，有以下三种类型：</p><ul>\n<li><strong>generic</strong><strong>：</strong>存放普通配置参数的 Secret 类型, 会自动对 Value 值进行 base64 编码。</li>\n<li><strong>tls</strong><strong>：</strong>存放 TLS 证书的 Secret 类型，通常用于配置 HTTPS 请求证书。</li>\n<li><strong>docker-registry</strong><strong>：</strong>存放私有镜像仓库凭证的 Secret 类型。在课程中，我们使用的镜像都是来自 Docker Hub 公开仓库的镜像，因此不需要配置凭证。但是，如果我们使用私有镜像仓库中的镜像（例如自己搭建的 Harbor 镜像仓库），就需要配置私有镜像仓库的凭证了。</li>\n</ul><p><strong>使用 YAML 文件创建 ConfigMap 和 Secret。</strong></p><p>ConfigMap 的 YAML 文件（my-configmap.yaml）如下。</p><pre><code class=\"language-yaml\"># my-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-configmap\ndata:\n  count: 10\n  path: \"/data\"\n</code></pre><p>Secret 的 YAML 文件中的参数值需要先进行 base64 编码，可以使用 “base64” 命令对数据进行编码，然后使用编码后的值作为 YAML 文件中的参数值。</p><pre><code class=\"language-bash\">[root@k8s-master ~]# echo -n \"admin\" | base64\nYWRtaW4=\n[root@k8s-master ~]# echo -n \"123456\" | base64\nMTIzNDU2\n</code></pre><p>Secret 的 YAML 文件（my-secret.yaml）如下。</p><pre><code class=\"language-yaml\"># my-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n&nbsp; name: my-secret\ntype: Opaque  # 对应命令中的 generic 类型\ndata:\n  username: YWRtaW4=\n&nbsp; password: MTIzNDU2\n</code></pre><p>部署 ConfigMap 和 Secret，然后查看结果。</p><pre><code class=\"language-bash\">[root@k8s-master ~]# kubectl apply -f my-configmap.yaml&nbsp;\nconfigmap/my-configmap created\n[root@k8s-master ~]# kubectl apply -f my-secret.yaml \nsecret/my-secret created\n\n[root@k8s-master ~]# kubectl get configmap   #查看 ConfigMap\nNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DATA&nbsp; &nbsp;AGE\nmy-configmap&nbsp; &nbsp; &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp; 10s\n[root@k8s-master ~]# kubectl get secret  # 查看 Secret\nNAME        TYPE     DATA   AGE\nmy-secret   Opaque   2      10s\n</code></pre><h3>第二步：使用 ConfigMap 和 Secret</h3><p>部署了 ConfigMap 和 Secret，我们需要在 Pod 中去使用这两种参数。有两种方式：一种是通过环境变量的方式，另一种是通过数据卷 Volume&nbsp;挂载成配置文件的方式。</p><p><strong>通过环境变量使用 ConfigMap 和 Secret。</strong></p><p>我们编写一个 busybox 镜像的 Pod 的 YAML 文件（my-pod-env.yaml），来使用刚才部署好的 ConfigMap 和 Secret。环境变量是加载到 Pod 的容器中，所以在 YAML 文件的容器层级中需要增加 env 属性，把 ConfigMap 和 Secret 的参数都引入到容器的环境变量中。</p><pre><code class=\"language-yaml\"># my-pod-env.yaml&nbsp;\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod-env\nspec:\n  containers:\n  - name: busybox-c\n    image: busybox\n    command: [\"/bin/sleep\", \"3600\"]\n    env:\n    - name: COUNT   # 最终 Pod 里的环境变量名称\n      valueFrom:\n        configMapKeyRef:\n          name: my-configmap  # 部署的 ConfigMap 名称\n          key: count   # ConfigMap 中定义的参数名\n    - name: PATH    # 最终 Pod 里的环境变量名称\n      valueFrom:\n        configMapKeyRef:\n          name: my-configmap  # 部署的 ConfigMap 名称\n          key: path   # ConfigMap 中定义的参数名\n    - name: USERNAME   # 最终 Pod 里的环境变量名称\n      valueFrom:\n        secretKeyRef:\n          name: my-secret  # 部署的 Secret 名称\n          key: username   # Secret 中定义的参数名\n    - name: PASSWORD    # 最终 Pod 里的环境变量名称\n      valueFrom:\n        secretKeyRef:\n          name: my-secret  # 部署的 Secret 名称\n          key: password   # Secret 中定义的参数名\n</code></pre><p>部署这个 Pod 资源对象，然后查看部署结果。</p><pre><code class=\"language-bash\">[root@k8s-master ~]# kubectl apply -f my-pod-env.yaml&nbsp;\npod/my-pod-env created\n[root@k8s-master ~]# kubectl get pod\nNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; READY&nbsp; &nbsp;STATUS&nbsp; &nbsp; RESTARTS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;AGE\nmy-pod-env&nbsp; &nbsp; &nbsp; 1/1&nbsp; &nbsp; &nbsp;Running&nbsp; &nbsp;1 (36s ago)&nbsp; &nbsp; &nbsp; 2m32s\n</code></pre><p>Pod 部署成功后，通过 “kubectl exec” 命令进入 Pod，然后输入 “printenv” 命令查看环境变量。此时，可以看到 ConfigMap 和 Secret 中的参数已经成功加载到环境变量中，可以直接使用了。</p><pre><code class=\"language-bash\">[root@k8s-master ~]# kubectl exec -it my-pod-env -- sh\n/ # printenv\nCOUNT=10\nPATH=/data\nUSERNAME=admin\nPASSWORD=123456\nKUBERNETES_SERVICE_PORT=443\nKUBERNETES_PORT=tcp://10.96.0.1:443\nHOSTNAME=my-configmap-pod\n...\n</code></pre><p>这里你可能会发现一个问题，我们创建 Secret 的时候使用的是 base64 编码后的数据，为什么在 Pod 的容器里看到的却是明文呢？这个问题就留给你课后思考吧。</p><p><strong>通过 Volume 挂载配置文件的方式使用 ConfigMap 和 Secret。</strong></p><p>我们同样也编写一个 busybox 镜像的 Pod 的 YAML 文件（my-pod-volume.yaml），来挂载刚才部署好的 ConfigMap 和 Secret。在讲 Pod 共享存储的时候我们已经使用过数据卷，在 Pod 里通过 volume 属性定义 configMap 和 secret 的数据卷，然后在 Pod 的容器中通过 volumeMounts 属性把这两个数据卷挂载到容器的文件目录下使用。具体的属性说明我写在 YAML 文件的注释中。</p><pre><code class=\"language-yaml\"># my-pod-volume.yaml&nbsp;\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod-volume\nspec:\n  containers:\n  - name: busybox-c\n    image: busybox\n    command: [\"/bin/sleep\", \"3600\"] # 执行程序休眠100秒\n    volumeMounts:\n    - name: my-configmap-vol   # 要挂载到本地目录的 Volume 的名称\n      mountPath: /data/config  # 本地目录地址\n    - name: my-secret-vol      # 要挂载到本地目录的 Volume 的名称\n      mountPath: /data/secret  # 本地目录地址\n  volumes:\n  - name: my-configmap-vol  # 定义一个 Volume\n    configMap:\n      name: my-configmap  # 部署的 ConfigMap 名称\n  - name: my-secret-vol  # 定义一个 Volume\n    secret:\n      secretName: my-secret  # 部署的 Secret 名称\n</code></pre><p>部署这个 Pod ，然后查看部署结果。</p><pre><code class=\"language-bash\">[root@k8s-master ~]# kubectl apply -f my-pod-volume.yaml&nbsp;\npod/my-pod-volume created\n[root@k8s-master ~]# kubectl get pod  \nNAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;READY&nbsp; &nbsp;STATUS&nbsp; &nbsp; RESTARTS&nbsp; &nbsp; &nbsp; &nbsp;AGE\nmy-pod-volume&nbsp; &nbsp; &nbsp; &nbsp;1/1&nbsp; &nbsp; &nbsp;Running&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 73s\n</code></pre><p>Pod 部署成功后，通过 “kubectl exec” 命令进入 Pod，可以在 “/data/config” 目录下看到 ConfigMap 的两个配置参数；在 “/data/secret” 目录下看到 Secret 的两个配置参数。</p><pre><code class=\"language-bash\">[root@k8s-master ~]# kubectl exec -it my-pod-volume -- sh\n/ # cd /data/config\n/data/config # ls\ncount  path\n/data/config # cat count\n10\n/data/config # cat path\n/data\n/ # cd /data/secret\n/data/secret # ls\npassword  username\n/data/secret # cat username\nadmin\n/data/secret # cat password\n123456\n</code></pre><p>总结一下 ConfigMap 和 Secret 作为环境变量和作为文件挂载这两种方式。</p><p>作为环境变量时，每个键值对会转换为容器的一个环境变量。这种方式适用于不需要频繁修改的配置参数，如 API 端口、数据库连接字符串等。作为文件挂载时，参数被加载到容器的文件目录中，每个键值对表现为一个文件，其中文件的内容是参数值。与环境变量相比，文件挂载的方式不受键值对数量的限制，并且能够处理更大量的数据。这使它非常适合于需要定期检查和重新加载配置参数的应用场景，如日志配置、缓存设置等。</p><p>ConfigMap 和 Secret 是 K8s 中的一种简单易用的管理配置参数的资源对象。它支持通过命名空间隔离，同一命名空间内的多个 Pod 可以共享访问该命名空间下的 ConfigMap 和 Secret 资源对象。这种特性可以在某种程度上替代传统的配置管理中心，实现配置文件的共享和实时更新。</p><h2><strong>小结</strong></h2><p>今天我介绍了 K8s 中几种常见资源对象，包括 Namespace、Job、CronJob、Daemonset、ConfigMap 和 Secret。</p><p>Namespace 可以帮助我们方便的对 K8s 中的资源对象进行分组隔离管理。通常会使用命名空间来分割不同项目的资源对象，或者分割不同的部署环境。</p><p>Job 用于执行一次性任务，可指定任务失败后的重试次数，以及并发运行的 Pod 任务数量。CronJob 在 Job 的基础上提供了定时任务的功能，可以根据 Cron 定时表达式定期运行任务，如每天备份、每小时生成报表等。</p><p>Daemonset 用于在集群的每个节点上都运行一个 Pod，适用于需要在每个节点都部署的系统应用，如日志采集、监控等。</p><p>ConfigMap 和 Secret 是 K8s 中两种存储配置参数的资源对象，ConfigMap 用于存储明文配置，Secret 用于存储 Base64 编码后的敏感信息，它们可以通过环境变量或挂载文件的方式被 Pod 中的容器使用。环境变量这种方式适用于启动时需要的少量配置；而挂载文件适合于需要定期检查和重新加载配置的大量参数的应用场景。</p><p>我给你展示了这些资源对象的相关命令和部署文件，希望你可以自己动手尝试部署它们，了解它们的使用场景，帮你实现更多样的部署需求。</p><h2>思考题</h2><p>这就是今天的全部内容，这节课内容比较多，我也给你留一道思考题。</p><p>我们创建 Secret 的时候使用的是 base64 编码后的数据，为什么在 Pod 的容器里看到的就是明文的参数值呢？</p><p>相信经过思考，会让你对知识的理解更加深刻。</p>","neighbors":{"left":{"article_title":"07｜无状态应用部署：Deployment","id":794207},"right":{"article_title":"09｜网络篇：通过Service访问Pod","id":794708}},"comments":[{"had_liked":false,"id":392521,"user_name":"抱紧我的小鲤鱼","can_delete":false,"product_type":"c1","uid":1014603,"ip_address":"江苏","ucode":"139780FB860FA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/4b/95812b15.jpg","comment_is_top":false,"comment_ctime":1721183965,"is_pvip":false,"replies":[{"id":142677,"content":"对的，这种机制也方便我们在容器的应用里直接使用配置参数！","user_name":"作者回复","user_name_real":"编辑","uid":1209006,"ctime":1721287508,"ip_address":"北京","comment_id":392521,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100780501,"comment_content":"Kubernetes API 服务器在创建或更新 Pod 时会自动处理 Secret 的解码工作","like_count":1,"discussions":[{"author":{"id":1209006,"avatar":"https://static001.geekbang.org/account/avatar/00/12/72/ae/cef8a848.jpg","nickname":"雪飞","note":"","ucode":"36BDFD1E35E9DA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":648257,"discussion_content":"对的，这种机制也方便我们在容器的应用里直接使用配置参数！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1721287508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}