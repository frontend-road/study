{"id":93054,"title":"22 | 细说 iOS 响应式框架变迁，哪些思想可以为我所用？","content":"<p>你好，我是戴铭。</p><p>说到iOS 响应式框架，最开始被大家知道的是 ReactiveCocoa（简称RAC），后来比较流行的是 RxSwift。但据我了解，iOS原生开发使用 ReactiveCocoa框架的团队并不多，而前端在推出React.js 后，响应式思路遍地开花。</p><p>那么，<strong>响应式框架到底是什么，为什么在iOS原生开发中没被广泛采用，却能在前端领域得到推广呢？</strong></p><p>我们先来看看响应式框架，它指的是能够支持响应式编程范式的框架。使用了响应式框架，你在编程时就可以使用数据流传播数据的变化，响应这个数据流的计算模型会自动计算出新的值，将新的值通过数据流传给下一个响应的计算模型，如此反复下去，直到没有响应者为止。</p><p>React.js框架的底层有个 Virtual DOM（虚拟文档对象模型），页面组件状态会和 Virtual DOM 绑定，用来和 DOM（文档对象模型）做映射与转换。当组件状态更新时，Virtual DOM 就会进行 Diff 计算，最终只将需要渲染的节点进行实际 DOM 的渲染。</p><p>JavaScript 每次操作 DOM 都会全部重新渲染，而Virtual DOM 相当于 JavaScript 和 DOM 之间的一个缓存，JavaScript 每次都是操作这个缓存，对其进行 Diff 和变更，最后才将整体变化对应到 DOM 进行最后的渲染，从而减少没必要的渲染。</p><!-- [[[read_end]]] --><p>React.js 的 Virtual DOM 映射和转换 DOM 的原理，如下图所示。我们一起通过原理，来分析一下它的性能提升。</p><p><img src=\"https://static001.geekbang.org/resource/image/67/a2/672e07e4347b132701c37d21ac7a44a2.png?wh=1920*1080\" alt=\"\"><br>\n可以看出，操作 Virtual DOM 时并不会直接进行 DOM 渲染，而是在完成了 Diff 计算得到所有实际变化的节点后才会进行一次 DOM 操作，然后整体渲染。而 DOM 只要有操作就会进行整体渲染。</p><p>直接在 DOM 上进行操作是非常昂贵的，所以视图组件会和 Virtual DOM 绑定，状态的改变直接更改 Virtual DOM。Virtual DOM 会检查两个状态之间的差异，进行最小的修改，所以 React.js 具有很好的性能。也正是因为性能良好，React.js才能够在前端圈流行起来。</p><p>而反观iOS，ReactiveCocoa框架的思路，其实与React.js中页面组件状态和 Virtual DOM 绑定、同步更新的思路是一致的。那<strong>为什么 ReactiveCocoa 在iOS原生开发中就没流行起来呢？</strong></p><p>我觉得，主要原因是前端DOM 树的结构非常复杂，进行一次完整的 DOM 树变更，会带来严重的性能问题，而有了 Virtual DOM 之后，不直接操作 DOM 可以避免对整个 DOM 树进行变更，使得我们不用再担忧应用的性能问题。</p><p>但是，这种性能问题并不存在于iOS 原生开发。这，主要是得易于 Cocoa Touch 框架的界面节点树结构要比 DOM 树简单得多，没有前端那样的历史包袱。</p><p>与前端 DOM 渲染机制不同，Cocoa Touch 每次更新视图时不会立刻进行整个视图节点树的重新渲染，而是会通过 setNeedsLayout 方法先标记该视图需要重新布局，直到绘图循环到这个视图节点时才开始调用 layoutSubviews 方法进行重新布局，最后再渲染。</p><p>所以说，ReactiveCocoa框架并没有为 iOS 的 App 带来更好的性能。当一个框架可有可无，而且没有明显收益时，一般团队是没有理由去使用的。那么，像 ReactiveCocoa 这种响应式思想的框架在 iOS 里就没有可取之处了吗？</p><p>我觉得并不是。今天，我就来跟你分享下，<strong>ReactiveCocoa 里有哪些思想可以为我所用，帮我们提高开发效率？</strong></p><p>ReactiveCocoa 是将函数式编程和响应式编程结合起来的库，通过函数式编程思想建立了数据流的通道，数据流动时会经过各种函数的处理最终到达和数据绑定的界面，由此实现了数据变化响应界面变化的效果。</p><h2>Monad</h2><p>ReactiveCocoa 是采用号称纯函数式编程语言里的 Monad 设计模式搭建起来的，核心类是 RACStream。我们使用最多的 RACSignal（信号类，建立数据流通道的基本单元） ，就是继承自RACStream。RACStream 的定义如下：</p><pre><code>typedef RACStream * (^RACStreamBindBlock)(id value, BOOL *stop);\n\n/// An abstract class representing any stream of values.\n///\n/// This class represents a monad, upon which many stream-based operations can\n/// be built.\n///\n/// When subclassing RACStream, only the methods in the main @interface body need\n/// to be overridden.\n@interface RACStream : NSObject\n\n+ (instancetype)empty;\n+ (instancetype)return:(id)value;\n- (instancetype)bind:(RACStreamBindBlock (^)(void))block;\n- (instancetype)concat:(RACStream *)stream;\n- (instancetype)zipWith:(RACStream *)stream;\n\n@end\n</code></pre><p>通过定义的注释可以看出，RACStream的作者也很明确地写出了RACStream 类表示的是一个 Monad，所以我们在 RACStream 上可以构建许多基于数据流的操作；RACStreamBindBlock，就是用来处理 RACStream 接收到数据的函数。那么，<strong>Monad 就一定是好的设计模式吗？</strong></p><p><strong>从代码视觉上看</strong>，Monad 为了避免赋值语句做了很多数据传递的管道工作。这样的话，我们在分析问题时，就很容易从代码层面清晰地看出数据流向和变化。而如果是赋值语句，在分析数据时就需要考虑数据状态和生命周期，会增加调试定位的成本，强依赖调试工具去观察变量。</p><p><strong>从语言发展来看</strong>，Monad 虽然可以让上层接口看起来很简洁，但底层的实现却犹如一团乱麻。为了达到“纯”函数效果，Monad底层将各种函数的参数和返回值封装在了类型里，将本来可以通过简单数据赋值给变量记录的方式复杂化了。</p><p>不过无论是赋值方式还是 Monad 方式，编译后生成的代码都是一样的。王垠在他的博文“<a href=\"http://www.yinwang.org/blog-cn/2013/03/31/purely-functional\">函数式语言的宗教</a>”里详细分析了 Monad，并且写了两段分别采用赋值和函数式的代码，编译后的机器码实际上是一样的。如果你感兴趣的话，可以看一下这篇文章。</p><p>所以，如果你不想引入 ReactiveCocoa 库，还想使用函数响应式编程思想来开发程序的话，完全不用去重新实现一个采用 Monad 模式的 RACStream，只要在上层按照函数式编程的思想来搭建数据流管道，在下层使用赋值方式来管理数据就可以了。并且，采用这种方式，可能会比 Monad 这种“纯”函数来得更加容易。</p><h2>函数响应式编程例子</h2><p>接下来，我通过一个具体的案例来和你说明下，如何搭建一个不采用 Monad 模式的函数响应式编程框架。</p><p>这个案例要完成的功能是：添加学生基本信息，添加完学生信息后，通过按钮点击累加学生分数，每次点击按钮分数加5；所得分数在30分内，颜色显示为灰色；分数在30到70分之间，颜色显示为紫色；分数在70分内，状态文本显示不合格；超过70分，分数颜色显示为红色，状态文本显示合格。初始态分数为0，状态文本显示未设置。</p><p>这个功能虽然不难完成，但是如果我们将这些逻辑都写在一起，那必然是条件里套条件，当要修改功能时，还需要从头到尾再捋一遍。</p><p>如果把逻辑拆分成小逻辑放到不同的方法里，当要修改功能时，查找起来也会跳来跳去，加上为了描述方法内逻辑，函数名和参数名也需要非常清晰。这，无疑加重了开发和维护成本，特别是函数里面的逻辑被修改了后，我们还要对应着修改方法名。否则，错误的方法名，将会误导后来的维护者。</p><p>那么，<strong>使用函数响应式编程方式会不会好一些呢？</strong></p><p>这里，我给出了使用函数响应式编程方式的代码，你可以对比看看是不是比条件里套条件和方法里套方法的写法要好。</p><p><strong>首先，</strong>创建一个学生的记录，在创建记录的链式调用里添加一个处理状态文本显示的逻辑。代码如下：</p><pre><code>// 添加学生基本信息\nself.student = [[[[[SMStudent create]\n                   name:@&quot;ming&quot;]\n                  gender:SMStudentGenderMale]\n                 studentNumber:345]\n                filterIsASatisfyCredit:^BOOL(NSUInteger credit){\n                    if (credit &gt;= 70) {\n                        // 分数大于等于 70 显示合格\n                        self.isSatisfyLabel.text = @&quot;合格&quot;;\n                        self.isSatisfyLabel.textColor = [UIColor redColor];\n                        return YES;\n                    } else {\n                        // 分数小于 70 不合格\n                        self.isSatisfyLabel.text = @&quot;不合格&quot;;\n                        return NO;\n                    }\n                }];\n</code></pre><p>可以看出，当分数小于70时，状态文本会显示为“不合格”，大于等于70时会显示为“合格”。</p><p><strong>接下来，</strong>针对分数，我再创建一个信号，当分数有变化时，信号会将分数传递给这个分数信号的两个订阅者。代码如下：</p><pre><code>// 第一个订阅的credit处理\n[self.student.creditSubject subscribeNext:^(NSUInteger credit) {\n    NSLog(@&quot;第一个订阅的credit处理积分%lu&quot;,credit);\n    self.currentCreditLabel.text = [NSString stringWithFormat:@&quot;%lu&quot;,credit];\n    if (credit &lt; 30) {\n        self.currentCreditLabel.textColor = [UIColor lightGrayColor];\n    } else if(credit &lt; 70) {\n        self.currentCreditLabel.textColor = [UIColor purpleColor];\n    } else {\n        self.currentCreditLabel.textColor = [UIColor redColor];\n    }\n}];\n\n// 第二个订阅的credit处理\n[self.student.creditSubject subscribeNext:^(NSUInteger credit) {\n    NSLog(@&quot;第二个订阅的credit处理积分%lu&quot;,credit);\n    if (!(credit &gt; 0)) {\n        self.currentCreditLabel.text = @&quot;0&quot;;\n        self.isSatisfyLabel.text = @&quot;未设置&quot;;\n    }\n}];\n</code></pre><p>可以看出，这两个分数信号的订阅者分别处理了两个功能逻辑：</p><ul>\n<li>第一个处理的是分数颜色；</li>\n<li>第二个处理的是初始状态下状态文本的显示逻辑。</li>\n</ul><p>整体看起来，所有的逻辑都围绕着分数这个数据的更新自动流动起来，也能够很灵活地通过信号订阅的方式进行归类处理。</p><p>采用这种编程方式，上层实现方式看起来类似于 ReactiveCocoa，而底层实现却非常简单，将信号订阅者直接使用赋值的方式赋值给一个集合进行维护，而没有使用 Monad 方式。底层对信号和订阅者的实现代码如下所示：</p><pre><code>@interface SMCreditSubject : NSObject\n\ntypedef void(^SubscribeNextActionBlock)(NSUInteger credit);\n\n+ (SMCreditSubject *)create;\n\n// 发送信号\n- (SMCreditSubject *)sendNext:(NSUInteger)credit;\n// 接收信号\n- (SMCreditSubject *)subscribeNext:(SubscribeNextActionBlock)block;\n\n@end\n\n@interface SMCreditSubject()\n\n@property (nonatomic, assign) NSUInteger credit; // 积分\n@property (nonatomic, strong) SubscribeNextActionBlock subscribeNextBlock; // 订阅信号事件\n@property (nonatomic, strong) NSMutableArray *blockArray; // 订阅信号事件队列\n\n@end\n\n@implementation SMCreditSubject\n\n// 创建信号\n+ (SMCreditSubject *)create {\n    SMCreditSubject *subject = [[self alloc] init];\n    return subject;\n}\n\n// 发送信号\n- (SMCreditSubject *)sendNext:(NSUInteger)credit {\n    self.credit = credit;\n    if (self.blockArray.count &gt; 0) {\n        for (SubscribeNextActionBlock block in self.blockArray) {\n            block(self.credit);\n        }\n    }\n    return self;\n}\n\n// 订阅信号\n- (SMCreditSubject *)subscribeNext:(SubscribeNextActionBlock)block {\n    if (block) {\n        block(self.credit);\n    }\n    [self.blockArray addObject:block];\n    return self;\n}\n\n#pragma mark - Getter\n- (NSMutableArray *)blockArray {\n    if (!_blockArray) {\n        _blockArray = [NSMutableArray array];\n    }\n    return _blockArray;\n}\n</code></pre><p>如上面代码所示，订阅者都会记录到 blockArray 里，block 的类型是 SubscribeNextActionBlock。</p><p>最终，我们使用函数式编程的思想，简单、高效地实现了这个功能。这个例子完整代码，你可以点击<a href=\"https://github.com/ming1016/RACStudy\">这个链接</a>查看。</p><h2>小结</h2><p>今天这篇文章，我和你分享了ReactiveCocoa 这种响应式编程框架难以在 iOS 原生开发中流行开的原因。</p><p>从本质上看，响应式编程没能提高App的性能，是其没能流行起来的主要原因。</p><p>在调试上，由于 ReactiveCocoa框架采用了 Monad 模式，导致其底层实现过于复杂，从而在方法调用堆栈里很难去定位到问题。这，也是ReactiveCocoa没能流行起来的一个原因。</p><p>但， ReactiveCocoa的上层接口设计思想，可以用来提高代码维护的效率，还是可以引入到 iOS 开发中的。</p><p>ReactiveCocoa里面还有很多值得我们学习的地方，比如说宏的运用。对此感兴趣的话，你可以看看sunnyxx的那篇<a href=\"http://blog.sunnyxx.com/2014/03/06/rac_1_macros/\">《Reactive Cocoa Tutorial [1] = 神奇的Macros》。</a></p><p>对于 iOS 开发来说，响应式编程还有一个很重要的技术是 KVO，使用 KVO 来实现响应式开发的范例可以参考<a href=\"https://github.com/ming1016/DecoupleDemo\">我以前的一个 demo</a>。如果你有关于KVO的问题，也欢迎在评论区给我留言。</p><h2>课后作业</h2><p>在今天这篇文章里面，我和你聊了Monad 的很多缺点，不知道你是如何看待Monad的，在评论区给我留言分享下你的观点吧。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":100576,"user_name":"景天儿","can_delete":false,"product_type":"c1","uid":1018983,"ip_address":"","ucode":"1A5EFE9DE2597B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/67/e91fe8d3.jpg","comment_is_top":false,"comment_ctime":1559587567,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"104638802671","product_id":100024501,"comment_content":"1 普通的函数式编程，就是函数可以作为参数、返回值。这使得:<br>1.1 链式编程成为可能，Masonry就是一个特别好的例子。<br>1.2 异步调用，函数式编程的结果很像观察者模式。<br>1.3 同步调用，函数式编程的结果有点像模板模式。<br><br>2. 稍纯一些的函数式编程，则强调只用常量，不用变量，也就是可以赋值，不能修改删除，机器学习里面基本都是这么搞。强调输入一样时，输出也一样。<br><br>3. monad，以及连赋值都不允许的函数式，之前只听过，没有研究。看了这篇文章中推荐的王垠的博文，感觉理解加深了不少，尤其是参数、局部变量、全局变量与“状态”、数据传输关系的理解上。真的是坑…<br><br>4. swift里面支持的高阶函数，有点儿像上面第二种函数式编程。<br><br>5. 我理解的响应式编程，就是分离事件的发起者和接受者。其实target-action，block，delegate，kvo，通知，都是可以看作响应式编程。<br><br>6. 从设计模式的角度来说，响应式编程与观察者模式、状态模式的思想最接近。","like_count":25,"discussions":[{"author":{"id":1027430,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ad/66/abb7bfe3.jpg","nickname":"地球洲🌎","note":"","ucode":"72E5B9A2C78252","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4528,"discussion_content":"优质评论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565521437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96527,"user_name":"Geek_45fc02","can_delete":false,"product_type":"c1","uid":1457447,"ip_address":"","ucode":"FE074A1594AC7E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJTOicFdCW2hgUwgfiaR9qSGabPvgLorp1Xcd7uLquXibWmKZxJibMsSeqibEpuHoSwusj2kOr86uLAzng/132","comment_is_top":false,"comment_ctime":1558441570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31623212642","product_id":100024501,"comment_content":"引入后RAC调试实在是太痛苦了，线程栈里嵌套了太多RAC内部的调用，很难追溯到用户真正使用的代码。","like_count":6},{"had_liked":false,"id":90766,"user_name":"bo","can_delete":false,"product_type":"c1","uid":1456491,"ip_address":"","ucode":"0D99D00E1AF5BA","user_header":"https://static001.geekbang.org/account/avatar/00/16/39/6b/5fcc65ad.jpg","comment_is_top":false,"comment_ctime":1556632842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27326436618","product_id":100024501,"comment_content":"RAC宏确实牛逼。看了源码学到了很多东西。现在公司项目中虽然没有引入 rac。但是把 rac 的宏提取出来用。自定义参数个数并依次处理，非常的方便。","like_count":7},{"had_liked":false,"id":90623,"user_name":"大土豆","can_delete":false,"product_type":"c1","uid":1121636,"ip_address":"","ucode":"67445DC3EC9DB0","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/64/52a5863b.jpg","comment_is_top":false,"comment_ctime":1556590138,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23031426618","product_id":100024501,"comment_content":"在Android开发界，RxJava是病毒一样的流行，不懂RxJava，就不要找工作了，以致于所有的东西都被RxJava化，而iOS开发界，则是天差地别","like_count":5},{"had_liked":false,"id":98969,"user_name":"xilie","can_delete":false,"product_type":"c1","uid":1013805,"ip_address":"","ucode":"AFCC4E157F7830","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJVegfjqa0gM4hcRrBhZkIf7Uc5oeTMYsg6o5pd76IQlUoIIh2ic6P22xVEFtRnAzjyLtiaPVstkKug/132","comment_is_top":false,"comment_ctime":1559121752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854089048","product_id":100024501,"comment_content":"我觉得函数响应式编程其实是简化了程序的逻辑并解耦，就拿传值来说，对象 A 将属性 a 传给对象 B，B再传给 C, C 修改 a，A 再针对 a 的修改做响应，传统的赋值，整个数据和逻辑会随着传递越多越复杂，而响应式，则很简单啊，说不清楚，反正实际开发中，确实简单了很多","like_count":1},{"had_liked":false,"id":91027,"user_name":"家有萌柴fries","can_delete":false,"product_type":"c1","uid":1048179,"ip_address":"","ucode":"EE96CBDF30E99C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/73/7c56ed19.jpg","comment_is_top":false,"comment_ctime":1556806709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5851774005","product_id":100024501,"comment_content":"ComponentKit老师有了解么？想问问看ComponentKit里面是怎么做到对state变化的监听呢？","like_count":1},{"had_liked":false,"id":90573,"user_name":"哈","can_delete":false,"product_type":"c1","uid":1453904,"ip_address":"","ucode":"3F46ADFFBC94CE","user_header":"https://static001.geekbang.org/account/avatar/00/16/2f/50/b46a9b6a.jpg","comment_is_top":false,"comment_ctime":1556583210,"is_pvip":false,"replies":[{"id":"32662","content":"两者使用场景不同，可比性不大","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1556890432,"ip_address":"","comment_id":90573,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851550506","product_id":100024501,"comment_content":"在我的理解中，Masonry也属于响应式编程，框架的作者最初貌似是写JAVA的，Masonry的响应式貌似比RAC的要轻量级…RAC用到了很多运行时方法替换，调试起来比较麻烦","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448575,"discussion_content":"两者使用场景不同，可比性不大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556890432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90567,"user_name":"贰叁","can_delete":false,"product_type":"c1","uid":1504587,"ip_address":"","ucode":"447E7E048CEFAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/4b/67495ca4.jpg","comment_is_top":false,"comment_ctime":1556580907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5851548203","product_id":100024501,"comment_content":"我的理解，观察者是实现响应式的关键，monad是实现函数式的关键。<br><br>函数式提供了  X –&gt; [X] ， –&gt; 的直观操作","like_count":1},{"had_liked":false,"id":309012,"user_name":"Donkeyman","can_delete":false,"product_type":"c1","uid":1932704,"ip_address":"","ucode":"A24ED814252FC5","user_header":"https://static001.geekbang.org/account/avatar/00/1d/7d/a0/323dea01.jpg","comment_is_top":false,"comment_ctime":1629891330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629891330","product_id":100024501,"comment_content":"真正逻辑复杂的业务逻辑中不适合使用这些花里胡哨的东西，老老实实按照可读性最高的方式去写，哪怕代码丑一点也无所谓，可读性稳定性最重要","like_count":1},{"had_liked":false,"id":295738,"user_name":"isaced","can_delete":false,"product_type":"c1","uid":1455016,"ip_address":"","ucode":"99110B8CDBA38B","user_header":"https://static001.geekbang.org/account/avatar/00/16/33/a8/a5a00407.jpg","comment_is_top":false,"comment_ctime":1622567708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622567708","product_id":100024501,"comment_content":"React 时代相比传统 Web 开发除了 Virtual DOM 带来 UI 操作性能的提升，另一个更重要的点是引入单向数据流的思想配合响应式UI更新机制，降低业务开发复杂度，提升研发效率。","like_count":1},{"had_liked":false,"id":290982,"user_name":"奈何桥上看流水","can_delete":false,"product_type":"c1","uid":2599462,"ip_address":"","ucode":"C603D56F0F975D","user_header":"https://static001.geekbang.org/account/avatar/00/27/aa/26/911065ac.jpg","comment_is_top":false,"comment_ctime":1619915519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619915519","product_id":100024501,"comment_content":"kvo如果通过keypath获取改变的，例如self.model.namedemo.name","like_count":0},{"had_liked":false,"id":278379,"user_name":"kenshin","can_delete":false,"product_type":"c1","uid":1653234,"ip_address":"","ucode":"10A09FF2097340","user_header":"https://static001.geekbang.org/account/avatar/00/19/39/f2/23506d84.jpg","comment_is_top":false,"comment_ctime":1612922808,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1612922808","product_id":100024501,"comment_content":"个人感觉RAC在MVVM下的贡献会有一些，但是在定位问题，调试的时候会比较困难。","like_count":0},{"had_liked":false,"id":273878,"user_name":"GL","can_delete":false,"product_type":"c1","uid":1877167,"ip_address":"","ucode":"B8A5D8AED2CEBA","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a4/af/25976c4d.jpg","comment_is_top":false,"comment_ctime":1610703070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610703070","product_id":100024501,"comment_content":"作者的demo使用了ReactiveCocoa，如果不使用ReactiveCocoa而只用响应式的思想怎么实现这个demo呢？","like_count":0},{"had_liked":false,"id":169276,"user_name":"Sun0010","can_delete":false,"product_type":"c1","uid":1263832,"ip_address":"","ucode":"92B35625DCEB9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/48/d8/51ab657d.jpg","comment_is_top":false,"comment_ctime":1578303801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578303801","product_id":100024501,"comment_content":"我总感觉 响应式 其实是 数据改变能够马上响应到页面； 前端的Vue 就是通过get、set方法来知道数据的改变，然后去响应页面","like_count":0},{"had_liked":false,"id":136544,"user_name":"微笑美男😄","can_delete":false,"product_type":"c1","uid":1010774,"ip_address":"","ucode":"E188923723703B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/56/07920099.jpg","comment_is_top":false,"comment_ctime":1569468373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569468373","product_id":100024501,"comment_content":"那篇宏的 没有看懂。有点难理解<br>","like_count":0},{"had_liked":false,"id":96811,"user_name":"烘哄轰、","can_delete":false,"product_type":"c1","uid":1135473,"ip_address":"","ucode":"B57568E8584ED5","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/71/4cf1b380.jpg","comment_is_top":false,"comment_ctime":1558513266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558513266","product_id":100024501,"comment_content":"React.js的Virtual DOM其实类似于JavaScript和Dom之间的一个缓存。JavaScript每次都是操作这个缓存，之后进行Diff计算和变更，最后才将整体变化对应到DOM进行最后的渲染。","like_count":1},{"had_liked":false,"id":93690,"user_name":"何乐乐","can_delete":false,"product_type":"c1","uid":1385771,"ip_address":"","ucode":"E016AEACF7A713","user_header":"https://static001.geekbang.org/account/avatar/00/15/25/2b/079d321e.jpg","comment_is_top":false,"comment_ctime":1557560235,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1557560235","product_id":100024501,"comment_content":"我觉得React还有一个很重要的点是：React框架帮我们处理 UI 和状态同步，我们不需要用命令式的方式去操作 UI，我们只需要关注状态层数据的正确性。DOM diff 只是为了性能更好的更新 UI，最小化操作 DOM。<br>而 iOS 和 Android 原生都缺少比较好的声明式 UI 布局方式，当UI 视图改变时，没有太好的方式避免视图的重复创建和渲染。我们操作 UI 大部分时候还是使用命令式的方式。","like_count":0,"discussions":[{"author":{"id":1471551,"avatar":"https://static001.geekbang.org/account/avatar/00/16/74/3f/52fa1e72.jpg","nickname":"findU","note":"","ucode":"B3F26ED4E5A29D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":716,"discussion_content":"最新的SwiftUI已经支持了声明式的布局了，还在研究中...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561975506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92236,"user_name":"SZ","can_delete":false,"product_type":"c1","uid":1108032,"ip_address":"","ucode":"AD20051B6109C2","user_header":"https://static001.geekbang.org/account/avatar/00/10/e8/40/a7fa1530.jpg","comment_is_top":false,"comment_ctime":1557209365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557209365","product_id":100024501,"comment_content":"KVO采用了isa swizzle，所以KVO过的class不能再次使用isa swizzle，这点会有限制，而且只能在objc runtime下使用，所以KVO的使用也越来越少了。","like_count":0},{"had_liked":false,"id":90724,"user_name":"木木彡","can_delete":false,"product_type":"c1","uid":1455806,"ip_address":"","ucode":"2661AC2EF856E9","user_header":"https://static001.geekbang.org/account/avatar/00/16/36/be/f68a19b1.jpg","comment_is_top":false,"comment_ctime":1556617218,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556617218","product_id":100024501,"comment_content":"使用RAC挺多的吧","like_count":0},{"had_liked":false,"id":90689,"user_name":"springxiao","can_delete":false,"product_type":"c1","uid":1143109,"ip_address":"","ucode":"1823EBB59B5A0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/71/45/ae5bb741.jpg","comment_is_top":false,"comment_ctime":1556610345,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1556610345","product_id":100024501,"comment_content":"1、RN指的是React Native，而不是ReactiveCocoa，两个不同的框架<br>2、RN前两年火了一阵，貌似现在大厂用的也很少","like_count":0},{"had_liked":false,"id":90668,"user_name":"change","can_delete":false,"product_type":"c1","uid":1455068,"ip_address":"","ucode":"616071E26C861A","user_header":"https://static001.geekbang.org/account/avatar/00/16/33/dc/5197a6b2.jpg","comment_is_top":false,"comment_ctime":1556606619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556606619","product_id":100024501,"comment_content":"大厂采用RN的理由是热跟新吗","like_count":0},{"had_liked":false,"id":90642,"user_name":"姜浩远","can_delete":false,"product_type":"c1","uid":1236739,"ip_address":"","ucode":"6ED5CA8283858B","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/03/6613bd63.jpg","comment_is_top":false,"comment_ctime":1556594052,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1556594052","product_id":100024501,"comment_content":"既然看上去存在的好处不多，但为什么一些大厂还在使用 ReactiveCocoa 呢？","like_count":0,"discussions":[{"author":{"id":1370456,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e9/58/397a4ab2.jpg","nickname":"daniel","note":"","ucode":"3516AF7F9A4DEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5121,"discussion_content":"代码减少了挺多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565961289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90621,"user_name":"彭序猿","can_delete":false,"product_type":"c1","uid":1002648,"ip_address":"","ucode":"EC59F7968147B6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/98/9845e6b5.jpg","comment_is_top":false,"comment_ctime":1556589761,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1556589761","product_id":100024501,"comment_content":"有朋友能解释下：命令式、响应式、函数式、链式这几个的区别联系吗？","like_count":0,"discussions":[{"author":{"id":1263832,"avatar":"https://static001.geekbang.org/account/avatar/00/13/48/d8/51ab657d.jpg","nickname":"Sun0010","note":"","ucode":"92B35625DCEB9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42981,"discussion_content":"我个人认为是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572837389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90593,"user_name":"ssala","can_delete":false,"product_type":"c1","uid":1005356,"ip_address":"","ucode":"CCD82C81756FC6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/2c/b0793828.jpg","comment_is_top":false,"comment_ctime":1556585473,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556585473","product_id":100024501,"comment_content":"我的理解是，逻辑复杂以后，程序的内在复杂度提升，无论采用何种编程范式，无论是面向对象还是函数式编程，都不会降低程序本身的复杂度。而至于可读性，决定因素在编写代码的人，和使用的框架，语言关系不大。","like_count":0}]}