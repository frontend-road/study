{"id":80458,"title":"春节7天练 | Day 3：排序和二分查找","content":"<p>你好，我是王争。初三好！</p><p>为了帮你巩固所学，真正掌握数据结构和算法，我整理了数据结构和算法中，必知必会的30个代码实现，分7天发布出来，供你复习巩固所用。今天是第三篇。</p><p>和昨天一样，你可以花一点时间，来完成测验。测验完成后，你可以根据结果，回到相应章节，有针对性地进行复习。</p><p>前两天的内容，是关于数组和链表、排序和二分查找的。如果你错过了，点击文末的“<span class=\"orange\">上一篇</span>”，即可进入测试。</p><hr><h2>关于排序和二分查找的几个必知必会的代码实现</h2><h3>排序</h3><ul>\n<li>\n<p>实现归并排序、快速排序、插入排序、冒泡排序、选择排序</p>\n</li>\n<li>\n<p>编程实现O(\bn)时间复杂度内找到一组数据的第K大元素</p>\n</li>\n</ul><h3>二分查找</h3><ul>\n<li>\n<p>实现一个有序数组的二分查找算法</p>\n</li>\n<li>\n<p>实现模糊二分查找算法（比如大于等于给定值的第一个元素）</p>\n</li>\n</ul><h2>对应的LeetCode练习题（@Smallfly 整理）</h2><ul>\n<li>Sqrt(x) （x 的平方根）</li>\n</ul><p>英文版：<a href=\"https://leetcode.com/problems/sqrtx/\">https://leetcode.com/problems/sqrtx/</a></p><p>中文版：<a href=\"https://leetcode-cn.com/problems/sqrtx/\">https://leetcode-cn.com/problems/sqrtx/</a></p><hr><p>做完题目之后，你可以点击“请朋友读”，把测试题分享给你的朋友，说不定就帮他解决了一个难题。</p><p>祝你取得好成绩！明天见！</p><!-- [[[read_end]]] -->","neighbors":{"left":{"article_title":"春节7天练 | Day 2：栈、队列和递归","id":80457},"right":{"article_title":"春节7天练 | Day 4：散列表和字符串","id":81008}},"comments":[{"had_liked":false,"id":65563,"user_name":"李皮皮皮皮皮","can_delete":false,"product_type":"c1","uid":1200281,"ip_address":"","ucode":"3BF1DEE4A12359","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/99/44378317.jpg","comment_is_top":false,"comment_ctime":1549456030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53089063582","product_id":100017301,"comment_content":"各种排序算法真要说起来实际中使用的最多的也就是快排了。然而各种编程语言内置的标准库都包含排序算法的实现，基本没有自己动手实现的必要。然后作为经典的算法，自己实现一遍，分析分析时间空间复杂度对自己的算法设计大有裨益。需要注意的是为了高效，在实际的实现中，多种排序算法往往是组合使用的。例如c标准库中总体上是快排，但当数据量小于一定程度，会转而使用选择或插入排序。<br>求平方根使用牛顿法二分逼近😄","like_count":13},{"had_liked":false,"id":65673,"user_name":"TryTs","can_delete":false,"product_type":"c1","uid":1036276,"ip_address":"","ucode":"1DD1E974D461A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f4/26b95f0b.jpg","comment_is_top":false,"comment_ctime":1549551944,"is_pvip":false,"replies":[{"id":"24735","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","comment_id":65673,"uid":"1058895","ip_address":"","utype":2,"ctime":1550804244,"user_name_real":"王锦"}],"discussion_count":1,"race_medal":0,"score":"23024388424","product_id":100017301,"comment_content":"虽然现在有很多排序算法自己不会亲自写，但是作为算法的基础，分治，归并，冒泡等排序算法在时间复杂度，空间复杂度以及原地排序这些算法知识上的理解非常有帮助。递归分治这些算法思想在简单的算法中也能体现出来，其实更多的是思维方式的训练。","like_count":6,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438543,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65623,"user_name":"虎虎❤️","can_delete":false,"product_type":"c1","uid":1086535,"ip_address":"","ucode":"157F261E80291A","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/47/75875257.jpg","comment_is_top":false,"comment_ctime":1549515055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18729384239","product_id":100017301,"comment_content":"基本排序算法的关注点分为：<br>1. 时间复杂度。如n的平方（冒泡，选择，插入）；插入排序的优化希尔排序，则把复杂度降低到n的3&#47;2次方；n乘以logn(快排，归并排序，堆排序）。<br>2. 是否为原地排序。如，归并排序需要额外的辅助空间。<br>3. 算法的稳定性。稳定排序（by nature）如冒泡，插入，归并。如果把次序考虑在内，可以把其他的排序（如快排，堆排序）也实现为稳定排序。<br>4. 算法的实现。同为时间复杂度同为n平方的算法中，插入排序的效率更高。但是如果算法实现的不好，可能会降低算法的效率，甚至让稳定的算法变得不稳定。又如，快速排序有不同的实现方式，如三路快排可以更好的应对待排序数组中有大量重复元素的情况。堆排序可以通过自上而下的递归方式实现，也可以通过自下而上的方式实现。<br>5. 不同算法的特点，如对于近乎有序的数组进行排序，首选插入排序，时间复杂度近乎是n，而快速排序则退化为n平方。<br><br>二分查找，需要注意 (l+r)&#47;2可能存在越界问题。<br><br>leetcode题，用二分查找找到x*x &gt; n 且(x-1)的平方小于n的数，则n-1就是结果。或者 x的平方小于n且x+1的平方大于n,则返回x。","like_count":5},{"had_liked":false,"id":67877,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550307025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14435208913","product_id":100017301,"comment_content":"#O(n)时间复杂度时间复杂度内找到一组数据的第 n大元素<br>import random<br>import time<br><br>def Array(n):<br>    a = []<br>    for i in range(n):<br>        a.append(random.randint(0 , n))<br>    return a<br>def QuickSort(n):<br>    array = Array(100)<br>    if n &gt; len(array) or n &lt; 1:<br>        print(&quot;超出范围，找不到&quot;)<br>        return<br>    n = n-1<br>    a = qsort(0 , len(array)-1 , array , n)<br>    print(sorted(array))<br>    print(&quot;-----------------------------&quot;)<br>    print(a)<br><br>def qsort(start , end , array , n):<br>    if start == end:<br>        res = array[start]<br>    if start &lt; end:<br>        key = partation(array , start , end)<br>        print(start , key , end)<br>        if key &gt; n :<br>            res = qsort(start , key-1 , array , n)<br>        elif key &lt; n:<br>            res = qsort(key+1 , end , array , n)<br>        else:<br>            res = array[key]<br>    return res<br><br>def swap(array , start , end):<br>    temp = array[start]<br>    array[start] = array[end]<br>    array[end] = temp<br><br>def partation(array , start , end):<br>    temp = array[start]<br>    while start &lt; end :<br>        while start&lt;end and array[end]&lt;=temp:<br>            end-=1<br>        swap(array , start , end)<br>        while start&lt;end and array[start]&gt;=temp:<br>            start+=1<br>        swap(array , start , end)<br>    return start","like_count":3},{"had_liked":false,"id":65584,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1549464937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14434366825","product_id":100017301,"comment_content":"牛顿法或者二分逼近都可以解决平方根问题，leetcode上有些大神的思路真的很厉害，经常醍醐灌顶","like_count":4},{"had_liked":false,"id":67251,"user_name":"TryTs","can_delete":false,"product_type":"c1","uid":1036276,"ip_address":"","ucode":"1DD1E974D461A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f4/26b95f0b.jpg","comment_is_top":false,"comment_ctime":1550115267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5845082563","product_id":100017301,"comment_content":"#include&lt;iostream&gt;<br>#include&lt;cmath&gt;<br>using namespace std;<br>double a = 1e-6;<br>double sqrt(double n){<br>\tdouble low = 0.0;<br>\tdouble high = n;<br>\t<br>int i = 1000;<br><br>\twhile(i--){<br>\t\tdouble mid = low + (high - low) &#47; 2.0; <br>\t\t&#47;&#47;cout&lt;&lt;&quot;n:&quot;&lt;&lt;n&lt;&lt;endl;<br>\t\tdouble square = mid * mid;<br>\t\t&#47;&#47;cout&lt;&lt;&quot;sq:&quot;&lt;&lt;square&lt;&lt;endl;<br>\t\t&#47;&#47;cout&lt;&lt;&quot;s:&quot;&lt;&lt;abs(square - n)&lt;&lt;endl;<br>\t\tif(abs(mid * mid - n) &lt; a){<br>\t\t\treturn mid;<br>\t\t}<br>\t\telse{<br><br>\t\t\tif(square &gt; n){<br>\t\t\t\thigh = mid;<br>\t\t\t} <br>\t\t\telse{<br>\t\t\t    low = mid; <br>\t\t\t}<br>\t\t}<br>\t}<br>\treturn -2.0;<br>}<br>int main(){<br>\tdouble t;<br>\twhile(true){<br>\t\tcin&gt;&gt;t;<br>\t\tcout&lt;&lt;sqrt(t)&lt;&lt;endl;<br>\t}<br>}","like_count":1},{"had_liked":false,"id":66998,"user_name":"Monster","can_delete":false,"product_type":"c1","uid":1257029,"ip_address":"","ucode":"31F7F86DD50A1D","user_header":"https://static001.geekbang.org/account/avatar/00/13/2e/45/d4039dd3.jpg","comment_is_top":false,"comment_ctime":1550053355,"is_pvip":false,"replies":[{"id":"24755","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","comment_id":66998,"uid":"1058895","ip_address":"","utype":2,"ctime":1550805165,"user_name_real":"王锦"}],"discussion_count":2,"race_medal":0,"score":"5845020651","product_id":100017301,"comment_content":"&#47;**<br> * O(n)时间复杂度内求无序数组中第K大元素<br> *&#47;<br>public class TopK {<br><br>    public int findTopK(int[] arr, int k) {<br>        return findTopK(arr, 0, arr.length - 1, k);<br>    }<br><br>    private int findTopK(int[] arr, int left, int right, int k) {<br>        if (arr.length &lt; k) {<br>            return -1;<br>        }<br>        int pivot = partition(arr, left, right);<br>        if (pivot + 1 &lt; k) {<br>            findTopK(arr, pivot + 1, right, k);<br>        } else if (pivot + 1 &gt; k) {<br>            findTopK(arr, left, pivot - 1, k);<br>        }<br>        return arr[pivot];<br>    }<br><br><br>    private int partition(int[] array, int left, int right) {<br>        int pivotValue = array[right];<br>        int i = left;<br><br>        &#47;&#47;小于分区点放在左边 大于分区点放在右边<br>        for (int j = left; j &lt; right; j++) {<br>            if (array[j] &lt; pivotValue) {<br>                int tmp = array[i];<br>                array[i] = array[j];<br>                array[j] = tmp;<br>                i++;<br>            }<br>        }<br>        &#47;&#47;与分区点交换<br>        int tmp = array[i];<br>        array[i] = array[right];<br>        array[right] = tmp;<br>        return i;<br>    }<br>}","like_count":1,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439007,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550805165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1357303,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKg3ia2DDFuGLZRtHw6to43icxKyia1eHbxTUh1CY1dSuTp5WmQN01A1aLAia1lkaR8EAkXD4h76n8Bog/132","nickname":"Hxd","note":"","ucode":"B8B04AA5738CC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43460,"discussion_content":"代码是不是不对。。跑出来的结果不正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572875800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66626,"user_name":"EidLeung","can_delete":false,"product_type":"c1","uid":1120259,"ip_address":"","ucode":"0F16DDB4779D1F","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/03/ef0efcc4.jpg","comment_is_top":false,"comment_ctime":1549969550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5844936846","product_id":100017301,"comment_content":"编程实现 O(\bn) 时间复杂度内找到一组数据的第 K 大元素。<br>这个的时间复杂路应该是n·logk吧？","like_count":1},{"had_liked":false,"id":66104,"user_name":"Abner","can_delete":false,"product_type":"c1","uid":1191257,"ip_address":"","ucode":"F8D34433833D7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/2d/59/b515a473.jpg","comment_is_top":false,"comment_ctime":1549878241,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5844845537","product_id":100017301,"comment_content":"java实现冒泡排序<br>代码如下：<br>package sort;<br><br>public class BubbleSort {<br><br>    public int[] bubbleSort(int[] array) {<br>        for (int i = 0;i &lt; array.length - 1;i++) {<br>            for (int j = 0;j &lt; array.length - i - 1;j++) {<br>                if (array[j] &gt; array[j + 1]) {<br>                    int temp = array[j + 1];<br>                    array[j + 1] = array[j];<br>                    array[j] = temp;<br>                }<br>            }<br>        }<br>        return array;<br>    }<br><br>    public static void main(String[] args) {<br>        int[] array = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};<br>        BubbleSort bubbleSort = new BubbleSort();<br>        int[] result = bubbleSort.bubbleSort(array);<br>        for (int i = 0;i &lt; result.length;i++) {<br>            System.out.print(result[i] + &quot; &quot;);<br>        }<br>    }<br><br>}<br>","like_count":1},{"had_liked":false,"id":66021,"user_name":"kai","can_delete":false,"product_type":"c1","uid":1018452,"ip_address":"","ucode":"443ED92B59AB8C","user_header":"","comment_is_top":false,"comment_ctime":1549852330,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5844819626","product_id":100017301,"comment_content":"实现模糊二分查找算法2:<br><br>public class BinarySearch {<br>    &#47;&#47; 3. 查找第一个大于等于给定值的元素<br>    public static int bsFistGE(int[] array, int target) {<br>        int lo = 0;<br>        int hi = array.length - 1;<br><br>        while (lo &lt;= hi) {<br>            int mid = lo + ((hi - lo) &gt;&gt; 1);<br><br>            if (array[mid] &gt;= target) {<br>                if (mid == 0 || array[mid-1] &lt; target) {<br>                    return mid;<br>                } else {<br>                    hi = mid - 1;<br>                }<br>            } else {<br>                lo = mid + 1;<br>            }<br>        }<br><br>        return -1;<br>    }<br><br>    &#47;&#47; 4. 查找最后一个小于等于给定值的元素<br>    public static int bsLastLE(int[] array, int target) {<br>        int lo = 0;<br>        int hi = array.length - 1;<br><br>        while (lo &lt;= hi) {<br>            int mid = lo + ((hi - lo) &gt;&gt; 1);<br><br>            if (array[mid] &lt;= target) {<br>                if (mid == hi || array[mid+1] &gt; target) {<br>                    return mid;<br>                } else {<br>                    lo = mid + 1;<br>                }<br>            } else {<br>                hi = mid - 1;<br>            }<br>        }<br><br>        return -1;<br>    }<br>}","like_count":1},{"had_liked":false,"id":66020,"user_name":"kai","can_delete":false,"product_type":"c1","uid":1018452,"ip_address":"","ucode":"443ED92B59AB8C","user_header":"","comment_is_top":false,"comment_ctime":1549852309,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5844819605","product_id":100017301,"comment_content":"实现模糊二分查找算法1:<br><br>public class BinarySearch {<br>    <br>    &#47;&#47; 1. 查找第一个值等于给定值的元素<br>    public static int bsFirst(int[] array, int target) {<br>        int lo = 0;<br>        int hi = array.length - 1;<br><br>        while (lo &lt;= hi) {<br>            int mid = lo + ((hi - lo) &gt;&gt; 1);<br><br>            if (array[mid] &gt; target) {<br>                hi = mid - 1;<br>            } else if (array[mid] &lt; target) {<br>                lo = mid + 1;<br>            } else {<br>                if (mid == lo || array[mid-1] != array[mid]) {<br>                    return mid;<br>                } else {<br>                    hi = mid - 1;<br>                }<br>            }<br>        }<br><br>        return -1;<br>    }<br><br>    &#47;&#47; 2. 查找最后一个值等于给定值的元素<br>    public static int bsLast(int[] array, int target) {<br>        int lo = 0;<br>        int hi = array.length - 1;<br><br>        while (lo &lt;= hi) {<br>            int mid = lo + ((hi - lo) &gt;&gt; 1);<br><br>            if (array[mid] &gt; target) {<br>                hi = mid - 1;<br>            } else if (array[mid] &lt; target) {<br>                lo = mid + 1;<br>            } else {<br>                if (mid == hi || array[mid] != array[mid+1]) {<br>                    return mid;<br>                } else {<br>                    lo = mid + 1;<br>                }<br>            }<br>        }<br><br>        return -1;<br>    }<br>}","like_count":1},{"had_liked":false,"id":66018,"user_name":"kai","can_delete":false,"product_type":"c1","uid":1018452,"ip_address":"","ucode":"443ED92B59AB8C","user_header":"","comment_is_top":false,"comment_ctime":1549852156,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5844819452","product_id":100017301,"comment_content":"实现一个有序数组的二分查找算法:<br><br>public class BinarySearch {<br>    &#47;&#47; 最简单的二分查找算法：针对有序无重复元素数组<br>    &#47;&#47; 迭代<br>    public static int binarySearch(int[] array, int target) {<br>        if (array == null) return -1;<br><br>        int lo = 0;<br>        int hi = array.length-1; &#47;&#47; 始终在[lo, hi]范围内查找target<br><br>        while (lo &lt;= hi) {<br>            int mid = lo + ((hi - lo) &gt;&gt; 1); &#47;&#47; 这里若是 (lo + hi) &#47; 2 有可能造成整型溢出<br><br>            if (array[mid] &gt;  target) {<br>                hi = mid - 1;<br>            } else if (array[mid] &lt; target) {<br>                lo = mid + 1;<br>            } else {<br>                return mid;<br>            }<br>        }<br><br>        return -1;<br>    }<br><br>    &#47;&#47; 递归<br>    public static int binarySearchRecur(int[] array, int target) {<br>        if (array == null) return -1;<br>        return bs(array, target, 0, array.length-1);<br>    }<br><br>    private static int bs(int[] array, int target, int lo, int hi) {<br>        if (lo &lt;= hi) {<br>            int mid = lo + ((hi - lo) &gt;&gt; 1);<br>            if (array[mid] &gt; target) {<br>                return bs(array, target, lo, mid-1);<br>            } else if (array[mid] &lt; target) {<br>                return bs(array, target, mid+1, hi);<br>            } else {<br>                return mid;<br>            }<br>        }<br><br>        return -1;<br>    }<br>}","like_count":1},{"had_liked":false,"id":65857,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1549702815,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5844670111","product_id":100017301,"comment_content":"这道题似乎可以等价于从1到x中找到一个数y，使得y*y小于等于x，且（y+1）*（y+1）大于x。那么可以从1到x逐个尝试，提高效率可以采用二分查找方法，时间复杂度为O（logx）。","like_count":1},{"had_liked":false,"id":65650,"user_name":"黄丹","can_delete":false,"product_type":"c1","uid":1245295,"ip_address":"","ucode":"29C209F0D78996","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/6f/aacb013d.jpg","comment_is_top":false,"comment_ctime":1549535730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5844503026","product_id":100017301,"comment_content":"王争老师初三快乐！<br>这是今天两道题的解题思路和代码<br>1. O(n)时间内找到第K大的元素：<br>解题思路：利用快排中分区的思想，选择数组区间A[0...n-1]的左右一个元素A[n-1]作为pivot，对数组A[0...n-1]原地分区，这样数组就分成了三部分，A[0..p-1],A[p],A[p+1...n-1],如果p+1=k,那么A[p]就是要求解的元素，如果K&gt;p+1,则说明第K大的元素在A[p+1...n-1]这个区间，否则在A[0...p-1]这个区间，递归的查找第K大的元素<br>2. Sqrt(x) （x 的平方根）<br>解题思路：利用二分查找的思想，从1到x查找x的近似平方根<br>代码：<br>https:&#47;&#47;github.com&#47;yyxd&#47;leetcode&#47;blob&#47;master&#47;src&#47;leetcode&#47;sort&#47;Problem69_Sqrt.java","like_count":1},{"had_liked":false,"id":65626,"user_name":"C_love","can_delete":false,"product_type":"c1","uid":1043613,"ip_address":"","ucode":"F268D1867C90C0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/9d/4d705f03.jpg","comment_is_top":false,"comment_ctime":1549515633,"is_pvip":false,"replies":[{"id":"24728","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","comment_id":65626,"uid":"1058895","ip_address":"","utype":2,"ctime":1550804053,"user_name_real":"王锦"}],"discussion_count":1,"race_medal":0,"score":"5844482929","product_id":100017301,"comment_content":"Use Binary Search<br><br>class Solution {<br>    public int mySqrt(int x) {<br>        if (x == 0 || x == 1) {<br>            return x;<br>        }<br>        <br>        int start = 0;<br>        int end = (x &gt;&gt; 1) + 1;<br>        <br>        while (start + 1 &lt; end) {<br>            final int mid = start + ((end - start) &gt;&gt; 1);<br>            final int quotient = x &#47; mid;<br>            if (quotient == mid) {<br>                return mid;<br>            } else if (quotient &lt; mid) {<br>                end = mid;<br>            } else {<br>                start = mid;<br>            }<br>        }<br>        <br>        return start;<br>    }<br>}","like_count":1,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438526,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您99元专栏通用阅码，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550804053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123741,"user_name":"Geek_86533a","can_delete":false,"product_type":"c1","uid":1610333,"ip_address":"","ucode":"6961C429E8953A","user_header":"","comment_is_top":false,"comment_ctime":1565749360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565749360","product_id":100017301,"comment_content":"不断学习，不断练习到今天。发现自己的代码能力、思考问题的能力有了明显的进步。感谢！","like_count":0},{"had_liked":false,"id":97050,"user_name":"懒猫","can_delete":false,"product_type":"c1","uid":1206544,"ip_address":"","ucode":"B4B567A11B491D","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/10/275ae749.jpg","comment_is_top":false,"comment_ctime":1558577015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558577015","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":67949,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550336166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550336166","product_id":100017301,"comment_content":"#二分查找变种<br>import random<br>import time<br><br>def Array(n):<br>    a = []<br>    for i in range(n):<br>        a.append(random.randint(0 , n))<br>    return a<br>#查找第一个值等于给定值的元素<br>def find_1(n):<br>    array = Array(100)<br>    array = sorted(array)<br>    left = 0<br>    right = len(array)-1<br>    while left &lt;= right:<br>        mid = int((left+right)&#47;2)<br>        if array[mid] &gt; n:<br>            right = mid - 1<br>        elif array[mid] &lt; n:<br>            left = mid + 1<br>        else:<br>            if mid==0 or array[mid] != array[mid-1]:<br>                return mid<br>            else:<br>                right = mid - 1<br>    print(&quot;找不到&quot;)<br>    return -1<br><br>#查找最后一个值等于给定值的元素<br>def find_2(n):<br>    array = Array(100)<br>    array = sorted(array)<br>    left = 0<br>    right = len(array)-1<br>    while left &lt;= right:<br>        mid = int((left+right)&#47;2)<br>        if array[mid] &gt; n:<br>            right = mid - 1<br>        elif array[mid] &lt; n:<br>            left = mid + 1<br>        else:<br>            if mid==right or array[mid] != array[mid+1]:<br>                return mid<br>            else:<br>                left = mid + 1<br>    print(&quot;找不到&quot;)<br>    return -1<br><br>#查找第一个值大于等于给定值的元素<br>def find_3(n):<br>    array = Array(100)<br>    array = sorted(array)<br>    left = 0<br>    right = len(array)-1<br>    while left &lt;= right:<br>        mid = int((left+right)&#47;2)<br>        if array[mid] &gt;= n:<br>            if mid==0 or array[mid-1]&lt;n:<br>                return mid<br>            else:<br>                right = mid - 1<br>        else array[mid] &lt; n:<br>            left = mid + 1<br>    print(&quot;找不到&quot;)<br>    return -1<br><br>#查找最后一个值小于等于给定值的元素<br>def find_4(n):<br>    array = Array(100)<br>    array = sorted(array)<br>    left = 0<br>    right = len(array)-1<br>    while left &lt;= right:<br>        mid = int((left+right)&#47;2)<br>        if array[mid] &lt;= n:<br>            if mid==right or array[mid+1]&gt;n:<br>                return mid<br>            else:<br>                left = mid + 1<br>        else array[mid] &gt; n:<br>            right = mid - 1<br>    print(&quot;找不到&quot;)<br>    return -1","like_count":0},{"had_liked":false,"id":67868,"user_name":"hopeful","can_delete":false,"product_type":"c1","uid":1187507,"ip_address":"","ucode":"EF02AFDD93589E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/b3/25b7984c.jpg","comment_is_top":false,"comment_ctime":1550303923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550303923","product_id":100017301,"comment_content":"#实现一个有序数组的二分查找算法<br>import random<br>import time<br><br>def Array(n):<br>    a = []<br>    for i in range(n):<br>        a.append(random.randint(0 , n))<br>    return a<br><br>def find(n):<br>    array = Array(100)<br>    array = sorted(array)<br>    left = 0<br>    right = len(array)-1<br>    while left &lt;= right:<br>        mid = int((left+right)&#47;2)<br>        if array[mid] &gt; n:<br>            right = mid - 1<br>        elif array[mid] &lt; n:<br>            left = mid + 1<br>        else:<br>            return mid<br>    print(&quot;找不到&quot;)<br>    return -1","like_count":0},{"had_liked":false,"id":67685,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1550222339,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550222339","product_id":100017301,"comment_content":"x 的平方根 go 语言实现 <br>func mySqrt(x int) int{<br><br>\tif x==0{<br>\t\treturn 0<br>\t}<br>\tmin:=1<br>\tmax:=x<br><br>\tfor {<br>\t\tmid:=min+(max-min)&#47;2<br>\t\tif mid*mid==x{<br>\t\t\treturn mid<br>\t\t}else if mid*mid&lt;x{<br>\t\t\tif (mid+1)*(mid+1)&gt;x{<br>\t\t\t\treturn mid<br>\t\t\t}else{<br>\t\t\t\tmin=mid+1<br>\t\t\t}<br>\t\t}else{<br>\t\t\tmax=mid-1<br>\t\t}<br><br>\t}<br>}","like_count":0},{"had_liked":false,"id":65850,"user_name":"molybdenum","can_delete":false,"product_type":"c1","uid":1251208,"ip_address":"","ucode":"DA24BDFCFF416C","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/88/be4fe19e.jpg","comment_is_top":false,"comment_ctime":1549700495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549700495","product_id":100017301,"comment_content":"老师新年好~这是我的作业<br>https:&#47;&#47;blog.csdn.net&#47;github_38313296&#47;article&#47;details&#47;86818929","like_count":0},{"had_liked":false,"id":65771,"user_name":"ALAN","can_delete":false,"product_type":"c1","uid":1240164,"ip_address":"","ucode":"70E3B1C730E63F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/64/7403c694.jpg","comment_is_top":false,"comment_ctime":1549632879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549632879","product_id":100017301,"comment_content":"\t&#47;&#47; find the k-th biggest number<br>\tpublic int heapsort(int[] arr, int k) {<br>\t\t&#47;&#47; build minimum heap<br>\t\tfor (int i = 1; i &lt;= k; i++) {<br>\t\t\twhile (i &#47; 2 &gt; 0 &amp;&amp; arr[i] &lt; arr[i &#47; 2]) { &#47;&#47; 自下往上堆化<br>\t\t\t\tswap(arr, i, i &#47; 2); &#47;&#47; swap() 函数作用：交换下标为 i 和 i&#47;2 的两个元素<br>\t\t\t\ti = i &#47; 2;<br>\t\t\t}<br>\t\t}<br>\t\t&#47;&#47; replace the heap top element with the new element and heapify<br>\t\tfor (int i = k; i &lt; arr.length; i++) {<br>\t\t\tif (arr[i] &lt;= arr[1])<br>\t\t\t\tcontinue;<br>\t\t\telse {<br>\t\t\t\tarr[1] = arr[i];<br>\t\t\t\theapify(arr, k, 1);<br>\t\t\t}<br>\t\t}<br>\t\treturn arr[1];<br>\t}<br><br>\tpublic void swap(int[] arr, int j, int k) {<br>\t\tint temp = arr[j];<br>\t\tarr[j] = arr[k];<br>\t\tarr[k] = temp;<br>\t}<br><br>\tprivate void heapify(int[] a, int n, int i) { &#47;&#47; 自上往下堆化<br>\t\twhile (true) {<br>\t\t\tint minPos = i;<br>\t\t\tif (i * 2 &lt;= n &amp;&amp; a[i] &gt; a[i * 2])<br>\t\t\t\tminPos = i * 2;<br>\t\t\tif (i * 2 + 1 &lt;= n &amp;&amp; a[minPos] &gt; a[i * 2 + 1])<br>\t\t\t\tminPos = i * 2 + 1;<br>\t\t\tif (minPos == i)<br>\t\t\t\tbreak;<br>\t\t\tswap(a, i, minPos);<br>\t\t\ti = minPos;<br>\t\t}<br>\t}","like_count":0},{"had_liked":false,"id":65770,"user_name":"ALAN","can_delete":false,"product_type":"c1","uid":1240164,"ip_address":"","ucode":"70E3B1C730E63F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/64/7403c694.jpg","comment_is_top":false,"comment_ctime":1549632872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549632872","product_id":100017301,"comment_content":"sort answer:<br>&#47;&#47; guibing sort<br>\tpublic int[] gbsort(int[] arr, int start, int end) {<br><br>\t\tif (start == end)<br>\t\t\treturn new int[] { arr[start] };<br>\t\tint[] l1 = gbsort(arr, start, (start + end) &#47; 2);<br>\t\tint[] r1 = gbsort(arr, (start + end) &#47; 2 + 1, end);<br>\t\treturn merge(l1, r1);<br><br>\t}<br><br>\t&#47;&#47; merge<br>\tpublic int[] merge(int[] a, int[] b) {<br>\t\tint[] c = new int[a.length + b.length];<br>\t\tint j = 0, k = 0;<br>\t\tfor (int i = 0; i &lt; a.length + b.length; i++) {<br>\t\t\tif (j == a.length) {<br>\t\t\t\tc[i] = b[k];<br>\t\t\t\tk++;<br>\t\t\t\tcontinue;<br>\t\t\t} else if (k == b.length) {<br>\t\t\t\tc[i] = a[j];<br>\t\t\t\tj++;<br>\t\t\t\tcontinue;<br><br>\t\t\t}<br>\t\t\tif (a[j] &lt; b[k]) {<br>\t\t\t\tc[i] = a[j];<br>\t\t\t\tj++;<br>\t\t\t} else {<br>\t\t\t\tc[i] = b[k];<br>\t\t\t\tk++;<br>\t\t\t}<br><br>\t\t}<br><br>\t\treturn c;<br>\t}<br><br>\t&#47;&#47; quick sort<br>\tpublic void qsort(int[] arr, int start, int end, int index) {<br>\t\t&#47;&#47; compare and swap<br>\t\tif (start &gt;= end)<br>\t\t\treturn;<br>\t\tint j = start, k = end;<br>\t\tint value = (start + end) &#47; 2;<br>\t\twhile (j &lt; k) {<br>\t\t\tfor (; j &lt; k; k--) {<br>\t\t\t\tif (k &lt;= value)<br>\t\t\t\t\tbreak;<br>\t\t\t\telse if (arr[k] &lt;= arr[value]) { &#47;&#47; from small to big &gt;=<br>\t\t\t\t\tcontinue;<br>\t\t\t\t} else {<br>\t\t\t\t\t&#47;&#47; swap<br>\t\t\t\t\tint temp = arr[k];<br>\t\t\t\t\tarr[k] = arr[value];<br>\t\t\t\t\tarr[value] = temp;<br>\t\t\t\t\tvalue = k;<br>\t\t\t\t\tbreak;<br>\t\t\t\t}<br><br>\t\t\t}<br>\t\t\tfor (; j &lt; k; j++) {<br>\t\t\t\tif (j &gt;= value)<br>\t\t\t\t\tbreak;<br>\t\t\t\telse if (arr[j] &gt;= arr[value]) { &#47;&#47; from small to big &lt;=<br>\t\t\t\t\tcontinue;<br>\t\t\t\t} else {<br>\t\t\t\t\t&#47;&#47; swap<br>\t\t\t\t\tint temp = arr[j];<br>\t\t\t\t\tarr[j] = arr[value];<br>\t\t\t\t\tarr[value] = temp;<br>\t\t\t\t\tvalue = j;<br>\t\t\t\t\tbreak;<br>\t\t\t\t}<br><br>\t\t\t}<br>\t\t}<br><br>\t\tqsort(arr, start, j, index);<br>\t\tqsort(arr, k + 1, end, index);<br>\t}<br><br><br>","like_count":0},{"had_liked":false,"id":65745,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1549616419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549616419","product_id":100017301,"comment_content":"&#47;&#47;平方根<br>&#47;&#47;递归的话会栈溢出<br>&#47;&#47;迭代法，要处理好溢出的问题，开始以为溢出时结果是负数，实测并非如此。<br>    public int sqrtLoop(int x) {<br>        return _mySqrtLoop(x,0,x&#47;2+1);<br>    }<br>    private int _mySqrtLoop(int x, int l, int r) {<br>        while(l&lt;r){<br>            int m = l+(r-l)&#47;2;<br>            long tmp = (long)m * (long)m;<br>            if(tmp==x||(tmp&lt;x &amp;&amp; (m+1)*(m+1)&gt;x)){<br>                return m;<br>            }else if(tmp&gt;x){<br>                r = m - 1;<br>            }else{<br>                l = m + 1;<br>            }<br>        }<br>        return l;<br>    }<br>","like_count":0},{"had_liked":false,"id":65707,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1549596614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549596614","product_id":100017301,"comment_content":"package com.jxyang.test.geek.day3;<br>&#47;&#47;数组中求第k大的元素<br>public class BigK {<br>    public static void main(String[] args) {<br>        int[] arr = {3,5,6,9,7,4,2,1,11,16};<br>        BigK bigK = new BigK();<br>        System.out.println(bigK.findBigK(arr,10));<br>    }<br>    private int findBigK(int[] arr, int k) {<br>        if(k&gt;arr.length||arr==null){<br>            return -1;<br>        }<br>        int m = partition(arr,0,arr.length-1,k-1);<br>        return arr[m];<br>    }<br>    &#47;*<br>        [l,r]处理数组l到r的闭区间<br>        [l+1,j] 小于arr[l],[j+1,i] 大于arr[l]<br>        循环结束，arr[l] 与 arr[j] 交换<br>        返回j<br>     *&#47;<br>    private int partition(int[] arr, int l, int r,int k) {<br>        &#47;&#47;结束条件<br>        if(l==r)<br>            return l;<br>        int j =l;<br>        for(int i=l+1;i&lt;=r;i++){<br>            if(arr[i]&lt;arr[l]){<br>                j++;<br>                int tmp = arr[i];<br>                arr[i] = arr[j];<br>                arr[j] = tmp;<br>            }else{<br>                continue;<br>            }<br>        }<br>        int tmp = arr[l];<br>        arr[l] = arr[j];<br>        arr[j] = tmp;<br>        while(j!=k){<br>            if(j&lt;k){<br>                j = partition(arr,j+1,r,k);<br>            }else{<br>                j = partition(arr,l,j-1,k);<br>            }<br>        }<br>        return k;<br>    }<br>}<br>","like_count":0},{"had_liked":false,"id":65690,"user_name":"你看起来很好吃","can_delete":false,"product_type":"c1","uid":1188854,"ip_address":"","ucode":"F9079138EC3D7C","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/f6/1ef70cab.jpg","comment_is_top":false,"comment_ctime":1549582944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549582944","product_id":100017301,"comment_content":"求平方根用python实现，基于二分查找法思想：<br>class Solution:<br>    def mySqrt(self, x: &#39;int&#39;) -&gt; &#39;int&#39;:<br>        if x == 0:<br>            return 0<br><br>        left, right = 1, x<br><br>        while True:<br>            mid = (left + right) &#47;&#47; 2<br>            if mid * mid &gt; x:<br>                right = mid<br>            else:<br>                if (mid + 1) * (mid +1) &gt; x:<br>                    return mid<br>                left = mid","like_count":0},{"had_liked":false,"id":65674,"user_name":"涤生","can_delete":false,"product_type":"c1","uid":1025437,"ip_address":"","ucode":"8281BB7345D4FA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/9d/a2f555ba.jpg","comment_is_top":false,"comment_ctime":1549552044,"is_pvip":false,"replies":[{"id":"24758","content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550805273,"ip_address":"","comment_id":65674,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549552044","product_id":100017301,"comment_content":"使用了二分法和牛顿法来解决平方根的求解问题。<br>二分法：<br>class Solution:<br>    def mySqrt(self, x):<br>        &quot;&quot;&quot;<br>        :type x: int<br>        :rtype: int<br>        &quot;&quot;&quot;<br>        if x == 1:<br>            return 1<br>        def binarysearch(l, r, x):<br>            while(l&lt;=r):<br>                mid = l + ((r-l)&gt;&gt;1)<br>                if abs(mid*mid-x)&lt;1:<br>                    return mid<br>                elif mid*mid &gt; x:<br>                    r = mid - 1<br>                else:<br>                    l = mid + 1<br>            return r<br>        return binarysearch(0, x&#47;&#47;2, x)<br>牛顿法：<br>class Solution:<br>    def mySqrt(self, x):<br>        &quot;&quot;&quot;<br>        :type x: int<br>        :rtype: int<br>        &quot;&quot;&quot;<br>        if x == 1:<br>            return 1<br>        ans = x&#47;&#47;2<br>        while(ans * ans - x&gt;0): # 可以是其他精度<br>            ans = (x &#47;&#47; ans + ans) &#47;&#47; 2<br>        return ans","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438544,"discussion_content":"感谢您参与春节七天练的活动，为了表彰你在活动中的优秀表现，赠送您10元无门槛优惠券，我们会在3个工作日之内完成礼品发放，如有问题请咨询小明同学，微信geektime002。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550805273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65662,"user_name":"ext4","can_delete":false,"product_type":"c1","uid":1180826,"ip_address":"","ucode":"FC881AECAC1974","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/9a/f2c0a206.jpg","comment_is_top":false,"comment_ctime":1549547302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549547302","product_id":100017301,"comment_content":"求平方根<br>class Solution {<br>  public:<br>    int mySqrt(int x) {<br>      if (x &lt; 2) return x;<br>      long p = 1, q = x;<br>      long mid;<br>      while (p &lt;= q) {<br>        mid = (p + q) &#47; 2;<br>        if (mid == x &#47; mid) {<br>          return mid;<br>        } else if (mid &lt; x &#47; mid) {<br>          p = mid + 1;<br>        } else {<br>          q = mid - 1;<br>        }<br>      }<br>      return q;<br>    }<br>};<br>","like_count":0},{"had_liked":false,"id":65651,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1549536773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549536773","product_id":100017301,"comment_content":"sqrt go 实现<br>package main<br><br>import &quot;fmt&quot;<br><br>func mySqrt(x int) int {<br>\tlow := float64(0)<br>\thigh := float64(x)<br>\tfor {<br>\t\tmid := low + (high-low)&#47;2<br>\t\tdelta := float64(0)<br>\t\tif mid*mid &gt; float64(x) {<br>\t\t\thigh = mid<br>\t\t\tdelta = mid*mid - float64(x)<br>\t\t} else {<br>\t\t\tlow = mid<br>\t\t\tdelta = float64(x) - mid*mid<br>\t\t}<br>\t\tif delta &lt; 0.01 {<br>\t\t\treturn int(mid)<br>\t\t}<br>\t}<br>}<br><br>func main() {<br>\tfmt.Println(mySqrt(8))<br>}<br>","like_count":0}]}