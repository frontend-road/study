{"id":11824,"title":"第34讲 | 有人说“Lambda能让Java程序慢30倍”，你怎么看？","content":"<p>在上一讲中，我介绍了Java性能问题分析的一些基本思路。但在实际工作中，我们不能仅仅等待性能出现问题再去试图解决，而是需要定量的、可对比的方法，去评估Java应用性能，来判断其是否能够符合业务支撑目标。今天这一讲，我会介绍从Java开发者角度，如何从代码级别判断应用的性能表现，重点理解最广泛使用的基准测试（Benchmark）。</p>\n<p>今天我要问你的问题是，<span class=\"orange\">有人说“Lambda能让Java程序慢30倍”，你怎么看？</span></p>\n<p>为了让你清楚地了解这个背景，请参考下面的代码片段。在实际运行中，基于Lambda/Stream的版本（lambdaMaxInteger），比传统的for-each版本（forEachLoopMaxInteger）慢很多。</p>\n<pre><code>// 一个大的ArrayList，内部是随机的整形数据\nvolatile List&lt;Integer&gt; integers = …\n \n// 基准测试1\npublic int forEachLoopMaxInteger() {\n   int max = Integer.MIN_VALUE;\n   for (Integer n : integers) {\n  \tmax = Integer.max(max, n);\n   }\n   return max;\n}\n \n// 基准测试2\npublic int lambdaMaxInteger() {\n   return integers.stream().reduce(Integer.MIN_VALUE, (a, b) -&gt; Integer.max(a, b));\n}\n</code></pre>\n<h2>典型回答</h2>\n<p>我认为，“Lambda能让Java程序慢30倍”这个争论实际反映了几个方面：</p>\n<p>第一，基准测试是一个非常有效的通用手段，让我们以直观、量化的方式，判断程序在特定条件下的性能表现。</p>\n<p>第二，基准测试必须明确定义自身的范围和目标，否则很有可能产生误导的结果。前面代码片段本身的逻辑就有瑕疵，更多的开销是源于自动装箱、拆箱（auto-boxing/unboxing），而不是源自Lambda和Stream，所以得出的初始结论是没有说服力的。</p><!-- [[[read_end]]] -->\n<p>第三，虽然Lambda/Stream为Java提供了强大的函数式编程能力，但是也需要正视其局限性：</p>\n<ul>\n<li>\n<p>一般来说，我们可以认为Lambda/Stream提供了与传统方式接近对等的性能，但是如果对于性能非常敏感，就不能完全忽视它在特定场景的性能差异了，例如：<strong>初始化的开销</strong>。 Lambda并不算是语法糖，而是一种新的工作机制，在首次调用时，JVM需要为其构建<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/CallSite.html\">CallSite</a>实例。这意味着，如果Java应用启动过程引入了很多Lambda语句，会导致启动过程变慢。其实现特点决定了JVM对它的优化可能与传统方式存在差异。</p>\n</li>\n<li>\n<p>增加了程序诊断等方面的复杂性，程序栈要复杂很多，Fluent风格本身也不算是对于调试非常友好的结构，并且在可检查异常的处理方面也存在着局限性等。</p>\n</li>\n</ul>\n<h2>考点分析</h2>\n<p>今天的题目是源自于一篇有争议的<a href=\"https://blog.takipi.com/benchmark-how-java-8-lambdas-and-streams-can-make-your-code-5-times-slower/\">文章</a>，原文后来更正为“如果Stream使用不当，会让你的代码慢5倍”。针对这个问题我给出的回答，并没有纠结于所谓的“快”与“慢”，而是从工程实践的角度指出了基准测试本身存在的问题，以及Lambda自身的局限性。</p>\n<p>从知识点的角度，这个问题考察了我在<a href=\"http://time.geekbang.org/column/article/7514\">专栏第7讲</a>中介绍过的自动装箱/拆箱机制对性能的影响，并且考察了Java 8中引入的Lambda特性的相关知识。除了这些知识点，面试官还可能更加深入探讨如何用基准测试之类的方法，将含糊的观点变成可验证的结论。</p>\n<p>对于Java语言的很多特性，经常有很多似是而非的 “秘籍”，我们有必要去伪存真，以定量、定性的方式探究真相，探讨更加易于推广的实践。找到结论的能力，比结论本身更重要，因此在今天这一讲中，我们来探讨一下：</p>\n<ul>\n<li>\n<p>基准测试的基础要素，以及如何利用主流框架构建简单的基准测试。</p>\n</li>\n<li>\n<p>进一步分析，针对保证基准测试的有效性，如何避免偏离测试目的，如何保证基准测试的正确性。</p>\n</li>\n</ul>\n<h2>知识扩展</h2>\n<p>首先，我们先来整体了解一下基准测试的主要目的和特征，专栏里我就不重复那些<a href=\"https://baike.baidu.com/item/%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95\">书面的定义</a>了。</p>\n<p>性能往往是特定情景下的评价，泛泛地说性能“好”或者“快”，往往是具有误导性的。通过引入基准测试，我们可以定义性能对比的明确条件、具体的指标，进而保证得到<strong>定量的、可重复的</strong>对比数据，这是工程中的实际需要。</p>\n<p>不同的基准测试其具体内容和范围也存在很大的不同。如果是专业的性能工程师，更加熟悉的可能是类似<a href=\"https://www.spec.org/\">SPEC</a>提供的工业标准的系统级测试；而对于大多数Java开发者，更熟悉的则是范围相对较小、关注点更加细节的微基准测试（Micro-Benchmark）。我在文章开头提的问题，就是典型的微基准测试，也是我今天的侧重点。</p>\n<p><strong>什么时候需要开发微基准测试呢？</strong></p>\n<p>我认为，当需要对一个大型软件的某小部分的性能进行评估时，就可以考虑微基准测试。换句话说，微基准测试大多是API级别的验证，或者与其他简单用例场景的对比，例如：</p>\n<ul>\n<li>\n<p>你在开发共享类库，为其他模块提供某种服务的API等。</p>\n</li>\n<li>\n<p>你的API对于性能，如延迟、吞吐量有着严格的要求，例如，实现了定制的HTTP客户端API，需要明确它对HTTP服务器进行大量GET请求时的吞吐能力，或者需要对比其他API，保证至少对等甚至更高的性能标准。</p>\n</li>\n</ul>\n<p>所以微基准测试更是偏基础、底层平台开发者的需求，当然，也是那些追求极致性能的前沿工程师的最爱。</p>\n<p><strong>如何构建自己的微基准测试，选择什么样的框架比较好？</strong></p>\n<p>目前应用最为广泛的框架之一就是<a href=\"http://openjdk.java.net/projects/code-tools/jmh/\">JMH</a>，OpenJDK自身也大量地使用JMH进行性能对比，如果你是做Java API级别的性能对比，JMH往往是你的首选。</p>\n<p>JMH是由Hotspot JVM团队专家开发的，除了支持完整的基准测试过程，包括预热、运行、统计和报告等，还支持Java和其他JVM语言。更重要的是，它针对Hotspot JVM提供了各种特性，以保证基准测试的正确性，整体准确性大大优于其他框架，并且，JMH还提供了用近乎白盒的方式进行Profiling等工作的能力。</p>\n<p>使用JMH也非常简单，你可以直接将其依赖加入Maven工程，如下图：<br />\n<img src=\"https://static001.geekbang.org/resource/image/0d/68/0dd290f8842959cb02d6c3a434a58e68.png?wh=465*253\" alt=\"\" /></p>\n<p>也可以，利用类似下面的命令，直接生成一个Maven项目。</p>\n<pre><code>$ mvn archetype:generate \\\n      \t-DinteractiveMode=false \\\n      \t-DarchetypeGroupId=org.openjdk.jmh \\\n          -DarchetypeArtifactId=jmh-java-benchmark-archetype \\\n      \t-DgroupId=org.sample \\\n      \t-DartifactId=test \\\n      \t-Dversion=1.0\n</code></pre>\n<p>JMH利用注解（Annotation），定义具体的测试方法，以及基准测试的详细配置。例如，至少要加上“@Benchmark”以标识它是个基准测试方法，而BenchmarkMode则指定了基准测试模式，例如下面例子指定了吞吐量（Throughput）模式，还可以根据需要指定平均时间（AverageTime）等其他模式。</p>\n<pre><code>@Benchmark\n@BenchmarkMode(Mode.Throughput)\npublic void testMethod() {\n   // Put your benchmark code here.\n}\n</code></pre>\n<p>当我们实现了具体的测试后，就可以利用下面的Maven命令构建。</p>\n<pre><code>mvn clean install\n</code></pre>\n<p>运行基准测试则与运行不同的Java应用没有明显区别。</p>\n<pre><code>java -jar target/benchmarks.jar\n</code></pre>\n<p>更加具体的上手步骤，请参考相关<a href=\"http://www.baeldung.com/java-microbenchmark-harness\">指南</a>。JMH处处透着浓浓的工程师味道，并没有纠结于完善的文档，而是提供了非常棒的<a href=\"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples\">样例代码</a>，所以你需要习惯于直接从代码中学习。</p>\n<p><strong>如何保证微基准测试的正确性，有哪些坑需要规避？</strong></p>\n<p>首先，构建微基准测试，需要从白盒层面理解代码，尤其是具体的性能开销，不管是CPU还是内存分配。这有两个方面的考虑，第一，需要保证我们写出的基准测试符合测试目的，确实验证的是我们要覆盖的功能点，这一讲的问题就是个典型例子；第二，通常对于微基准测试，我们通常希望代码片段确实是有限的，例如，执行时间如果需要很多毫秒（ms），甚至是秒级，那么这个有效性就要存疑了，也不便于诊断问题所在。</p>\n<p>更加重要的是，由于微基准测试基本上都是体量较小的API层面测试，最大的威胁来自于过度“聪明”的JVM！Brain Goetz曾经很早就指出了微基准测试中的<a href=\"https://www.ibm.com/developerworks/java/library/j-jtp02225/\">典型问题</a>。</p>\n<p>由于我们执行的是非常有限的代码片段，必须要保证JVM优化过程不影响原始测试目的，下面几个方面需要重点关注：</p>\n<ul>\n<li>保证代码经过了足够并且合适的预热。我在<a href=\"http://time.geekbang.org/column/article/6845\">专栏第1讲</a>中提到过，默认情况，在server模式下，JIT会在一段代码执行10000次后，将其编译为本地代码，client模式则是1500次以后。我们需要排除代码执行初期的噪音，保证真正采样到的统计数据符合其稳定运行状态。<br />\n通常建议使用下面的参数来判断预热工作到底是经过了多久。</li>\n</ul>\n<pre><code>-XX:+PrintCompilation\n</code></pre>\n<p>我这里建议考虑另外加上一个参数，否则JVM将默认开启后台编译，也就是在其他线程进行，可能导致输出的信息有些混淆。</p>\n<pre><code>-Xbatch\n</code></pre>\n<p>与此同时，也要保证预热阶段的代码路径和采集阶段的代码路径是一致的，并且可以观察PrintCompilation输出是否在后期运行中仍然有零星的编译语句出现。</p>\n<ul>\n<li>防止JVM进行无效代码消除（Dead Code Elimination），例如下面的代码片段中，由于我们并没有使用计算结果mul，那么JVM就可能直接判断无效代码，根本就不执行它。</li>\n</ul>\n<pre><code>public void testMethod() {\n   int left = 10;\n   int right = 100;\n   int mul = left * right;\n}\n</code></pre>\n<p>如果你发现代码统计数据发生了数量级程度上的提高，需要警惕是否出现了无效代码消除的问题。</p>\n<p>解决办法也很直接，尽量保证方法有返回值，而不是void方法，或者使用JMH提供的<a href=\"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-core/src/main/java/org/openjdk/jmh/infra/Blackhole.java\">BlackHole</a>设施，在方法中添加下面语句。</p>\n<pre><code>public void testMethod(Blackhole blackhole) {\n   // …\n   blackhole.consume(mul);\n}\n</code></pre>\n<ul>\n<li>防止发生常量折叠（Constant Folding）。JVM如果发现计算过程是依赖于常量或者事实上的常量，就可能会直接计算其结果，所以基准测试并不能真实反映代码执行的性能。JMH提供了State机制来解决这个问题，将本地变量修改为State对象信息，请参考下面示例。</li>\n</ul>\n<pre><code>@State(Scope.Thread)\npublic static class MyState {\n   public int left = 10;\n   public int right = 100;\n}\n\npublic void testMethod(MyState state, Blackhole blackhole) {\n   int left = state.left;\n   int right = state.right;\n   int mul = left * right;\n   blackhole.consume(mul);\n}\n</code></pre>\n<ul>\n<li>\n<p>另外JMH还会对State对象进行额外的处理，以尽量消除伪共享（<a href=\"https://blogs.oracle.com/dave/java-contended-annotation-to-help-reduce-false-sharing\">False Sharing</a>）的影响，标记@State，JMH会自动进行补齐。</p>\n</li>\n<li>\n<p>如果你希望确定方法内联（Inlining）对性能的影响，可以考虑打开下面的选项。</p>\n</li>\n</ul>\n<pre><code>-XX:+PrintInlining\n</code></pre>\n<p>从上面的总结，可以看出来微基准测试是一个需要高度了解Java、JVM底层机制的技术，是个非常好的深入理解程序背后效果的工具，但是也反映了我们需要审慎对待微基准测试，不被可能的假象蒙蔽。</p>\n<p>我今天介绍的内容是相对常见并易于把握的，对于微基准测试，GC等基层机制同样会影响其统计数据。我在前面提到，微基准测试通常希望执行时间和内存分配速率都控制在有限范围内，而在这个过程中发生GC，很可能导致数据出现偏差，所以Serial GC是个值得考虑的选项。另外，JDK 11引入了<a href=\"http://openjdk.java.net/jeps/318\">Epsilon GC</a>，可以考虑使用这种什么也不做的GC方式，从最大可能性去排除相关影响。</p>\n<p>今天我从一个争议性的程序开始，探讨了如何从开发者角度而不是性能工程师角度，利用（微）基准测试验证你在性能上的判断，并且介绍了其基础构建方式和需要重点规避的风险点。</p>\n<h2>一课一练</h2>\n<p>关于今天我们讨论的题目你做到心中有数了吗？我们在项目中需要评估系统的容量，以计划和保证其业务支撑能力，谈谈你的思路是怎么样的？常用手段有哪些？</p>\n<p>请你在留言区写写你对这个问题的思考，我会选出经过认真思考的留言，送给你一份学习奖励礼券，欢迎你与我一起讨论。</p>\n<p>你的朋友是不是也在准备面试呢？你可以“请朋友读”，把今天的题目分享给好友，或许你能帮到他。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"第33讲 | 后台服务出现明显“变慢”，谈谈你的诊断思路？","id":11651},"right":{"article_title":"第35讲 | JVM优化Java代码时都做了什么？","id":12003}},"comments":[{"had_liked":false,"id":17075,"user_name":"蔡光明","can_delete":false,"product_type":"c1","uid":1158477,"ip_address":"","ucode":"7EACC0555B4F19","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/4d/e24fc9e4.jpg","comment_is_top":false,"comment_ctime":1532421305,"is_pvip":false,"replies":[{"id":"5962","content":"我后面会有篇Spring相关，但毕竟能覆盖很有限，我自己的理解角度和业务开发可能也不太一样；<br>如果是需要整体上的对比和介绍，类似知乎、博客之类有整理完善的，请查找一下；<br>但是，真正的深入还是需要系统性学习，相关书籍，阅读源码，上手实践","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1532451371,"ip_address":"","comment_id":17075,"utype":1}],"discussion_count":1,"race_medal":0,"score":"100316669113","product_id":100006701,"comment_content":"杨老师，我今天去面试的时候，java基础知识答的还可以，就是面试官扩展着问，问到spring和springcloud框架时就有些懵了，请问我现在应该如何学习，spring一直都是懂得不是很多，仅限于会用，杨老师能推荐一些相关的学习资料吗","like_count":24,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421032,"discussion_content":"我后面会有篇Spring相关，但毕竟能覆盖很有限，我自己的理解角度和业务开发可能也不太一样；\n如果是需要整体上的对比和介绍，类似知乎、博客之类有整理完善的，请查找一下；\n但是，真正的深入还是需要系统性学习，相关书籍，阅读源码，上手实践","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532451371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17142,"user_name":"spark","can_delete":false,"product_type":"c1","uid":1116667,"ip_address":"","ucode":"2F128E884F400F","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/fb/52a662b2.jpg","comment_is_top":false,"comment_ctime":1532451004,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"57367025852","product_id":100006701,"comment_content":"专栏写的好，像流水和故事。大概技术像作者的开发人员可以毕业了","like_count":14,"discussions":[{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":154884,"discussion_content":"写的好吗？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1580195013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1116667,"avatar":"https://static001.geekbang.org/account/avatar/00/11/09/fb/52a662b2.jpg","nickname":"spark","note":"","ucode":"2F128E884F400F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":154971,"discussion_content":"我认为很不错，讲工作分解对我很有启发。不同水平的人看法不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580205055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":154884,"ip_address":""},"score":154971,"extra":""},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1116667,"avatar":"https://static001.geekbang.org/account/avatar/00/11/09/fb/52a662b2.jpg","nickname":"spark","note":"","ucode":"2F128E884F400F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":155416,"discussion_content":"也是，每个人需求不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580227128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":154971,"ip_address":""},"score":155416,"extra":""},{"author":{"id":1423993,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ba/79/5a6336f5.jpg","nickname":"Ornamentism","note":"","ucode":"1A3BFE53A3BDBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214146,"discussion_content":"不知道为啥，我读起来非常不爽，虽然看起来确实很有深度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585148210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":155416,"ip_address":""},"score":214146,"extra":""}]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174540,"discussion_content":"Oracle首席工程师，这是专家级别了，你的毕业要求真高。我也觉得写的挺好！第二次读了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581926088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1116667,"avatar":"https://static001.geekbang.org/account/avatar/00/11/09/fb/52a662b2.jpg","nickname":"spark","note":"","ucode":"2F128E884F400F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174601,"discussion_content":"作者很厉害，我读了2遍，关键是每个内容如果我们去讲，我们讲不出来","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1581929920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":174540,"ip_address":""},"score":174601,"extra":""}]}]},{"had_liked":false,"id":17094,"user_name":"yushing","can_delete":false,"product_type":"c1","uid":1108112,"ip_address":"","ucode":"244C58F218D586","user_header":"https://static001.geekbang.org/account/avatar/00/10/e8/90/d63f8347.jpg","comment_is_top":false,"comment_ctime":1532432647,"is_pvip":false,"replies":[{"id":"6053","content":"是的","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1532680257,"ip_address":"","comment_id":17094,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44482105607","product_id":100006701,"comment_content":"请问杨老师，无效代码消除后，mul的计算不执行了，那left和right也就没有使用了，是不是left和right的赋值语句也会被判断为无效代码不执行了呢？","like_count":11,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421039,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532680257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80522,"user_name":"ddv","can_delete":false,"product_type":"c1","uid":1369482,"ip_address":"","ucode":"219F56C3EFCA61","user_header":"","comment_is_top":false,"comment_ctime":1553675591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27323479367","product_id":100006701,"comment_content":"lambda这一块如果能够单独拎出来说一说<br>比如他的底层实现是如何决定了他的效率<br>以及java在函数引用这一块的尝试<br>这是一个很有意思的语言特点 希望作者有空可以做一个专集","like_count":6},{"had_liked":false,"id":17492,"user_name":"I","can_delete":false,"product_type":"c1","uid":1028272,"ip_address":"","ucode":"6F6367210ED44A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b0/b0/9335798e.jpg","comment_is_top":false,"comment_ctime":1532683017,"is_pvip":true,"replies":[{"id":"6116","content":"文章不是这个意思吧，性能影响没有那么明显，需要考虑到如此程度的是少数，易读、易维护往往更重要","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1532843845,"ip_address":"","comment_id":17492,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23007519497","product_id":100006701,"comment_content":"那就是可以使用，凡涉及性能要求严格的情况下就不用。既然这样，Java费尽力气开发出一个性能不行的东西出来，只为了减少代码量和支持函数式吗，还有并行并没有带来想象中的优势吗，所谓的免费的并行，却不可以轻易免费使用，本人基础一般，望作者指点一二，谢谢！","like_count":6,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421177,"discussion_content":"文章不是这个意思吧，性能影响没有那么明显，需要考虑到如此程度的是少数，易读、易维护往往更重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532843845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315793,"discussion_content":"我觉得初始化性能可以接受，但是可读性、维护性以及问题排查困难度才是最重要的。kiss原则吧。。除非你对自己足够足够自信，自己写的程序永远不出错，或者测试足够强大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603327637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018972,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8c/5c/3f164f66.jpg","nickname":"亚林","note":"","ucode":"4A5A6D24314B79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280997,"discussion_content":"免费的才是最贵的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591659538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296426,"user_name":"最好不过","can_delete":false,"product_type":"c1","uid":2459923,"ip_address":"","ucode":"C7DBCD08402DF8","user_header":"https://static001.geekbang.org/account/avatar/00/25/89/13/0d3c5008.jpg","comment_is_top":false,"comment_ctime":1622969447,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10212904039","product_id":100006701,"comment_content":"因为第一次调用lamda时初始化的开销比较大，会进行动态时生产lambda的相干类，加载额外的ASM框架，编译时间较长；因此如果我们测试本文的中的测试只是测试了第一次的调用的时间，当进行预热之后，lambda的测试时间和普通for循环相差不大。详细原因可以看这篇文章https:&#47;&#47;juejin.cn&#47;post&#47;6844904202439753741","like_count":3},{"had_liked":false,"id":236687,"user_name":"twc","can_delete":false,"product_type":"c1","uid":2036619,"ip_address":"","ucode":"17A92780E442C2","user_header":"https://static001.geekbang.org/account/avatar/00/1f/13/8b/422997c5.jpg","comment_is_top":false,"comment_ctime":1595500334,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5890467630","product_id":100006701,"comment_content":"“Of course it’s not always the case, but in this pretty common example, it showed it can be around 5 times worse.&quot; <br>引用的文章说 lamda 在 &quot; 普通”情况下， lamda是慢了 5倍。<br>杨老师在质疑 测试的环境不够标准，通篇读下来没有看到结论？ 不知用了lamda 到底是快了还是慢了","like_count":2,"discussions":[{"author":{"id":2322159,"avatar":"https://static001.geekbang.org/account/avatar/00/23/6e/ef/276cfba7.jpg","nickname":"Call me 无颜祖","note":"","ucode":"266B076FEA66CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338460,"discussion_content":"如果是 lamda 与 内部类 进行比较的话，二者性能类似。\n\n详情参见 Google 官方的 终结 Android 性能流言\n\nhttps://medium.com/androiddevelopers/busting-android-performance-myths-d85ae1d87f22\n\n中文版在这：\nhttps://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&amp;mid=2652075348&amp;idx=1&amp;sn=d7dfea3c84f1338d4a817703213346c7&amp;chksm=808cd511b7fb5c077f131e11a0d2675a6ae093464754d977ad618be9955ec4c8ba50c8b01a14&amp;scene=126&amp;sessionid=1609294454&amp;key=6ef12b657104c7ba497eaad92c7ef12a434c59bfd154d240bd9d121d1b7de6d50a3dc9fdc544ec1326ce8dfab43c6c374d44b5621a44f110787dbe18dacfb3d83107e5490a2e45b9048cae373f2a447eff17fd1b540d05398334d9fa877091c325ecdd86d4df61ba78402e60861f11e10be0dde38f9d2aac5bc11a18819f0a8c&amp;ascene=1&amp;uin=MTU0MjUwMjU4MA%3D%3D&amp;devicetype=Windows+10+x64&amp;version=6300002f&amp;lang=zh_CN&amp;exportkey=AXforNTiVkdlcDfHujN65sQ%3D&amp;pass_ticket=NMaYGqTXYgNkji7LFTgMncW23y1aqpNT8%2B%2FzWacUfDkikDo1RJSiHOJZNMEa8XKl&amp;wx_header=0","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609295535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1212902,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","nickname":"旅途","note":"","ucode":"5022477E8E9441","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294412,"discussion_content":"s慢了呗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595868805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218141,"user_name":"李飞","can_delete":false,"product_type":"c1","uid":1555180,"ip_address":"","ucode":"930458850AA05B","user_header":"https://static001.geekbang.org/account/avatar/00/17/ba/ec/2b1c6afc.jpg","comment_is_top":false,"comment_ctime":1589723370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884690666","product_id":100006701,"comment_content":"对性能调优这块实操涉及的不多，先做学习吧，后期再回头学第二遍","like_count":1},{"had_liked":false,"id":84149,"user_name":"张天屹","can_delete":false,"product_type":"c1","uid":1477612,"ip_address":"","ucode":"8BD6BD6DCF0F4F","user_header":"https://static001.geekbang.org/account/avatar/00/16/8b/ec/dc03f5ad.jpg","comment_is_top":false,"comment_ctime":1554794123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554794123","product_id":100006701,"comment_content":"lambda看起来有太多的缺点，那我们为什么要用他呢？我理解的是函数式编程在并行计算上的优势","like_count":0}]}