{"id":365426,"title":"14 | 用户信息查询：如何解决网络软中断瓶颈问题？","content":"<p>你好，我是高楼。</p><p>这节课我们接着来整另一个接口：用户信息查询。通过这个接口，我们一起来看看，当网络软中断过高时，会对TPS产生什么样的影响。其实对于这一点的判断，在很多性能项目中都会出现，而其中的难点就在于，很多人都无法将软中断跟响应时间慢和TPS所受到的影响关联起来。今天我就带你来解决这个问题。</p><p>同时，我也会给你讲解如何根据硬件配置及软件部署情况，做纯网络层的基准验证，以确定我们判断方向的正确性，进而提出具有针对性的优化方案。而我们最终优化的效果，会通过TPS对比来体现。</p><h2>压力数据</h2><p>我们先来看用户信息查询的压力数据情况如何。因为我们现在测试的是单接口，而用户信息查询又需要有登录态，所以我们要先跑一部分Token数据出来，再执行用户信息查询接口。</p><p>准备好Token数据后，第一次用户信息查询如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/fd/7b/fd2eb1c3a0fa2b5520a1bc93f986a37b.png?wh=1831*523\" alt=\"\"></p><p>这个步骤只是试验一下，持续时间长是为了查找问题。从上图来看，这个接口的起点不错，已经达到750左右。</p><p>不过，性能瓶颈也比较明显：响应时间随着压力线程的增加而增加了，TPS也达到了上限。对于这样的接口，我们可以调优，也可以不调优，因为这个接口当前的TPS可以达到我们的要求。只不过，本着“<strong>活着不就是为了折腾</strong><strong>”</strong>的原则，我们还是要分析一下这个接口的瓶颈到底在哪里。</p><!-- [[[read_end]]] --><p>还是按照我们之前讲过的分析思路，下面我们来分析这个问题。</p><h2>看架构图</h2><p>从链路监控工具中，我们拉出架构图来，这样简单直接，又不用再画图了，真的是懒人必知技能。</p><p><img src=\"https://static001.geekbang.org/resource/image/5c/b9/5c44dfd49128498753cd1e7dfbdb28b9.png?wh=1088*841\" alt=\"\"></p><p>从上图可以知道，用户信息查询的路径是User - Gateway - Member - MySQL。</p><p>你也许会问，图中不是还有Redis、MongoDB、Monitor吗？是的，这些我们也要记在脑子里。这个接口用到了Redis，如果接口有问题，变慢了，我们也要分析；MongoDB并没有用上，所以我们不管它；Monitor服务是Spring Boot Admin服务，我们也暂且不管它，后面需要用到的时候再说。</p><p>注意，这一步是分析的铺垫，是为了让我们后面分析时不会混乱。</p><h2>拆分响应时间</h2><p>在场景数据中，我们明显看到响应时间慢了，那我们就要知道慢在了哪里。我们根据上面的架构图知道了用户信息查询接口的路径，现在就要拆分这个响应时间，看一看每一段消耗了多长时间。</p><p>如果你有APM工具，那可以直接用它查看每一段消耗的时间。如果你没有，也没关系，只要能把架构图画出来，并把时间拆分了就行，不管你用什么招。</p><p>另外，我啰嗦一句，请你不要过分相信APM工具厂商的广告，咱们还是要看疗效。在追逐技术的同时，我们也需要理智地判断到底是不是需要。</p><p>具体的拆分时间如下：</p><ul>\n<li>User -Gateway</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/f2/07/f2bf1bd9788d1e76f8e35622ea848907.png?wh=1561*855\" alt=\"\"></p><ul>\n<li>Gateway上消耗的时间</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/5f/20/5f64cyy3efd8f411ebdfcb293dd5d920.png?wh=1881*847\" alt=\"\"></p><ul>\n<li>Gateway -Member</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/8b/y4/8b992f2331135edacf0e4b93a9d19yy4.png?wh=1584*849\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/43/f4/432ed240c57dcd81c1c13a23yy750cf4.png?wh=1596*847\" alt=\"\"></p><ul>\n<li>Member上消耗的时间</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/ae/4b/ae85fb6af7324a24d2abf2f8e679664b.png?wh=1860*849\" alt=\"\"></p><ul>\n<li>Member到DB的时间</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/da/e0/dac8d5b2c1eb5fb2c628d118567bfce0.png?wh=1574*845\" alt=\"\"></p><p>我把上述拆分后的时间都整理到我们的架构图中：</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/13/bb3676e3b24053b5b489b95012dd0613.png?wh=1104*814\" alt=\"\"></p><p>看到这张图，思路变得特别清晰了，有没有？根据上图的时间拆分，我们明显看到Member服务上消耗时间更多一点，所以下一步我们去关注Member服务。</p><h2>全局监控分析</h2><p>还是一样，我们先看全局监控：</p><p><img src=\"https://static001.geekbang.org/resource/image/7e/22/7e24929e3bb2baeaa00be336d6545d22.png?wh=1805*483\" alt=\"\"></p><p>其中，worker-8的CPU用得最多，我们先从这里下手。</p><p>这里我要跟你强调一下，<strong>在全局监控的思路中，不是说我们看了哪些数据，而是我们要去看哪些数据</strong>。这时候，你就必须先有一个全局计数器的东西。比如说在Kubernetes里，我们就要有这样的思路：</p><p><img src=\"https://static001.geekbang.org/resource/image/7c/e8/7c76b4796a4b28f2165b7fa4366d42e8.jpg?wh=2000*1928\" alt=\"\"></p><p>也就是说，<strong>我们要先把全局监控的计数器都罗列出来，然后再一个一个查去</strong>。</p><p>其实，这里面不止是罗列那么简单，它还要有相应的逻辑。那怎么弄懂这个逻辑呢？这就要依赖于性能分析人员的基础知识了。我经常说，要想做全面的性能分析，就必须具备计算机基础知识，而这个知识的范围是很大的。之前我画过一张图，现在我做了一些修正，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/08/49/08978ac7ecc8ba84045d15c48f5b7e49.jpg?wh=2000*1546\" alt=\"\"></p><p>图中这些内容，都是我们做性能分析时会遇到的东西。有人可能会说，这些已经远远超出性能工程师的技能范围了。所以我要再强调一下，我讲的一直都是性能工程。在整个项目的性能分析中，我并不限定技术的范围，只要是用得上，我们都需要拿出来分析。</p><p>前面我们说是worker-8上的CPU资源用得最多，所以我们来查一下被测的服务，也就是Member服务，是不是在worker-8上。</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/9f/ef618ccfedfcde3c16eaafd68710e89f.png?wh=1879*825\" alt=\"\"></p><p>从上图看，Member服务确实是在worker-8上。</p><p>那下一步我们就要进到这个节点查看一下。查看之后，如果全是us cpu消耗，那我觉得这个基准测试就可以结束了。因为对于一个应用来说，us cpu高本来就是非常合理的情况。</p><p>之前一个做第三方测试的人跑过来跟我说，甲方爸爸不喜欢看到CPU使用率太高，让他想尽一切办法把CPU降下来。可是他没有什么招，所以就来问我该怎么办。</p><p>我问他测试的目标是什么。他回答客户并不关心TPS啥的，只说要把CPU降下来。我说这简单，你把压力降下来，CPU不就降下来了吗？本来以为只是一句调侃的话，结果他真去做了，并且还被客户接受了！后来我反思了一下，因为自己错误引导了性能行业的发展方向。</p><p>从职业的角度来说，我们对一些不懂的客户，最好要有一个良好的沟通，用对方能听懂的语言来解释。不过，在不该让步的时候，我们也不能让步。这才是专业的价值，不能是客户要什么，我们就给什么。</p><p>现在我们来看一下这个节点的top数据：</p><pre><code>[root@k8s-worker-8 ~]# top\ntop - 02:32:26 up 1 day, 13:56,  3 users,  load average: 26.46, 22.37, 14.54\nTasks: 289 total,   1 running, 288 sleeping,   0 stopped,   0 zombie\n%Cpu0  : 73.9 us,  9.4 sy,  0.0 ni,  3.5 id,  0.0 wa,  0.0 hi, 12.5 si,  0.7 st\n%Cpu1  : 69.8 us, 12.5 sy,  0.0 ni,  4.3 id,  0.0 wa,  0.0 hi, 12.8 si,  0.7 st\n%Cpu2  : 71.5 us, 12.7 sy,  0.0 ni,  4.2 id,  0.0 wa,  0.0 hi, 10.9 si,  0.7 st\n%Cpu3  : 70.3 us, 11.5 sy,  0.0 ni,  6.1 id,  0.0 wa,  0.0 hi, 11.5 si,  0.7 st\nKiB Mem : 16266296 total,  3803848 free,  6779796 used,  5682652 buff/cache\nKiB Swap:        0 total,        0 free,        0 used.  9072592 avail Mem \n\n\n  ​PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                           \n30890 root      20   0 7791868 549328  15732 S 276.1  3.4  23:17.90 java -Dapp.id=svc-mall-member -javaagent:/opt/skywalking/agent/sky+\n18934 root      20   0 3716376   1.6g  18904 S  43.9 10.3 899:31.21 java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitFor+\n ​1059 root      20   0 2576944 109856  38508 S  11.1  0.7 264:59.42 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-\n ​1069 root      20   0 1260592 117572  29736 S  10.8  0.7 213:48.18 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.\n15018 root      20   0 5943032   1.3g  16496 S   6.9  8.6 144:47.90 /usr/lib/jvm/java-1.8.0-openjdk/bin/java -Xms2g -Xmx2g -Xmn1g -Dna+\n ​4723 root      20   0 1484184  43396  17700 S   5.9  0.3  89:53.45 calico-node -felix  \n</code></pre><p>在这个例子中，我们看到si cpu（软中断消耗的CPU）有10%多，其实这只是一个瞬间值，在不断跳跃的数据中，有很多次数据都比这个值大，说明si消耗的CPU有点高了。对于这种数据，我们就要关心一下了。</p><h2>定向监控分析</h2><p>我们进一步来看软中断的变化，既然软中断消耗的CPU高，那必然是要看一下软中断的计数器了：</p><p><img src=\"https://static001.geekbang.org/resource/image/45/5d/459c1yy79b39824f7b35d7e2c61ca85d.png?wh=989*414\" alt=\"\"></p><p>上图是一张瞬间的截图，而在实际的观察过程中，我们是要多看一会儿时间的。请你注意图中这些有白底的数字，在观察中，这些数值增加的越大说明中断越高。而我在观察的过程中，看到的是NET_RX变化的最大。</p><p>现在，从si cpu高到NET_RX中断多的逻辑基本上清楚了：因为NET_RX都是网络的接收，所以NET_RX会不断往上跳。</p><p>不过，请你注意，这个中断即使是正常的，也需要不断增加。我们要判断它合理不合理，一定要结合si cpu一起来看。并且在网络中断中，不止是软中断，硬中断也会不断增加。</p><p>从上图来看，网络中断已经均衡了，没有单队列网卡的问题。我们再看一下网络带宽。</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/09/cfe3cfb6835a90f97d64589090616b09.png?wh=1899*901\" alt=\"\"></p><p>总共用了50Mb的带宽，中断就已经达到10%，也就是说带宽没有完全用满，可是中断已经不低了，这说明我们的数据包中还是小包居多。</p><p>于是我们做如下调整。调整的方向 就是增加队列长度和缓冲区大小，让应用可以接收更多的数据包。</p><pre><code>-- 增加网络的队列长度\nnet.core.netdev_max_backlog = 10000 （原值：1000）\n- 增加tomcat的队列长度为10000(原值1000)\nserver:\n  port: 8083\n  ​tomcat\n    accept-count: 10000\n-- 改变设备一次可接收的数据包数量\nnet.core.dev_weight = 128 （原值64）\n-- 控制socket 读取位于等待设备队列中数据包的微秒数\nnet.core.busy_poll = 100 （原值0）\n-- 控制 socket 使用的接收缓冲区的默认大小\nnet.core.rmem_default = 2129920  （原值：212992）\nnet.core.rmem_max = 2129920  （原值：212992）\n-- 繁忙轮询\n net.core.busy_poll = 100\n ​这个参数是用来控制了socket 读取位于等待设备队列中数据包的微秒数\n</code></pre><p>一顿操作猛如虎之后，原本满怀希望，然而再次查了TPS曲线之后，发现并没有什么卵用，让我们把一首《凉凉》唱出来。</p><p>我仔细想了一遍发送和接收数据的逻辑。既然上层应用会导致us cpu高，而si cpu高是因为网卡中断多引起的，那我们还是要从网络层下手。所以，我做了网络带宽能达到多高的验证。我先列一下当前的硬件配置。</p><p><img src=\"https://static001.geekbang.org/resource/image/56/5f/5695abb87f22c463a5f3ffef5475015f.jpg?wh=2000*1280\" alt=\"\"></p><p>我们通过iperf3直接测试网络，试验内容如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/fb/36/fb30edf2e6e5768631e7fa15d40e6a36.jpg?wh=2000*824\" alt=\"\"></p><p>从上面的数据可以看到，在不同的层面进行纯网络测试，si是有很大区别的。当网络流量走了KVM+Kubernetes+Docker的结构之后，网络损失居然这么高，si cpu也上升了很多。</p><p>这也解释了为什么现在很多企业放弃虚拟化，直接用物理机来跑Kubernetes了。</p><p>由于当前K8s用的是Calico插件中的IPIP模式，考虑到BGP模式的效率会高一些，我们把IPIP模式改为BGP。这一步也是为了降低网络接收产生的软中断。</p><p>那IPIP和BGP到底有什么区别呢？对于IPIP来说，它套了两次IP包，相当于用了一个IP层后，还要用另一个IP层做网桥。在通常情况下，IP是基于MAC的，不需要网桥；而BGP是通过维护路由表来实现对端可达的，不需要多套一层。但是BGP不是路由协议，而是矢量性协议。关于IPIP和BGP更多原理上的区别，如果你不清楚，我建议你自学一下相关的网络基础知识。</p><p>我们把IPIP修改为BGP模式之后，先测试下纯网络的区别，做这一步是为了看到在没有应用压力流量时，网络本身的传输效率如何：</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/6a/b7a3aec6f1f2630e50f1a8958cd3486a.png?wh=1178*845\" alt=\"\"></p><p>根据上面的测试结果，将带宽在不同的网络模式和包大小时的具体数值整理如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/2b/b2578dc107ef96f9111380d3a4eacc2b.jpg?wh=2000*1026\" alt=\"\"></p><p>可以看到，BGP的网络能力确实要强一些，差别好大呀。</p><p>我们再接着回去测试下接口，结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/f9/eb/f982b49f5f5d4d8fb654a49770aa0eeb.png?wh=1807*653\" alt=\"\"></p><p>再看软中断，看一下BGP模式下的软中断有没有降低：</p><pre><code>top - 22:34:09 up 3 days, 55 min,  2 users,  load average: 10.62, 6.18, 2.76\nTasks: 270 total,   2 running, 268 sleeping,   0 stopped,   0 zombie\n%Cpu0  : 51.6 us, 11.5 sy,  0.0 ni, 30.0 id,  0.0 wa,  0.0 hi,  6.6 si,  0.3 st\n%Cpu1  : 54.4 us,  9.4 sy,  0.0 ni, 28.2 id,  0.0 wa,  0.0 hi,  7.7 si,  0.3 st\n%Cpu2  : 55.9 us, 11.4 sy,  0.0 ni, 26.9 id,  0.0 wa,  0.0 hi,  5.9 si,  0.0 st\n%Cpu3  : 49.0 us, 12.4 sy,  0.0 ni, 32.8 id,  0.3 wa,  0.0 hi,  5.2 si,  0.3 st\nKiB Mem : 16266296 total,  7186564 free,  4655012 used,  4424720 buff/cache\nKiB Swap:        0 total,        0 free,        0 used. 11163216 avail Mem \n</code></pre><h2>优化效果</h2><p>通过上面的调整结果，我们看到了软中断确实降低了不少，但是我们还是希望这样的优化体现到TPS上来，所以我们看一下优化之后TPS的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/f3/9cfdc1287577f637e4e5912961f64df3.png?wh=511*368\" alt=\"\"></p><p>si cpu有降低：</p><p><img src=\"https://static001.geekbang.org/resource/image/20/04/2074ec8982f130c9ee8b6cf572ff7b04.png?wh=541*365\" alt=\"\"></p><h2>总结</h2><p>当我们看到一个接口已经满足了业务要求时，从成本上来说，我们不应该花时间再去收拾它。但是，<strong>从技术上来说，我们对每一个接口的性能结果，都要达到“知道最终瓶颈在哪里”的程度</strong>。这样才方便我们在后续的工作中继续优化。</p><p>在这节课的例子中，我们从si cpu开始分析，经过软中断查找和纯网络测试，定位到了Kubernetes的网络模式，进而我们选择了更加合理的网络模式。整个过程穿过了很长的链路，而这个思维也是在我在宣讲中一贯提到的“<strong>证据链</strong>”。</p><p>最后，我还是要强调一遍，<strong>性能分析一定要有证据链，没有证据链的性能分析就是耍流氓。</strong>我们要做正派的老司机。</p><h2>课后作业</h2><p>我给你留两道题，请你思考一下：</p><ol>\n<li>为什么看到NET_RX中断高的时候，我们会想到去测试一下纯网络带宽？</li>\n<li>你能总结一下，这节课案例的证据链吗？</li>\n</ol><p>记得在留言区和我讨论、交流你的想法，每一次思考都会让你更进一步。</p><p>如果你读完这篇文章有所收获，也欢迎你分享给你的朋友，共同学习进步。我们下一讲再见！</p>","comments":[{"had_liked":false,"id":296180,"user_name":"分清云淡","can_delete":false,"product_type":"c1","uid":1269873,"ip_address":"","ucode":"7045AE6BF72D31","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/71/895ee6cf.jpg","comment_is_top":false,"comment_ctime":1622796636,"is_pvip":false,"replies":[{"id":"107524","content":"1. 你的理解是没错的。这和文中的描述似乎也没有冲突。后面这句“我认为改成BGP后，用在网络封包解包的CPU去掉了，这样让出了更多的CPU给US，这才是这次优化的根因，si%只是顺带的一个极小的因素”，不知道是我们思路上的不同还是对我们对中断的理解不同，在网络中的IP、TCP之间的数据传递是要靠中断来实现的，你说的封包解包的减少，也是中断的减少。所以SI CPU不是顺带的因素。<br>2. 这个是具体的监控数据，我并没有更改。并且这个也是符合逻辑的。你可以加我微信，我们详细讨论。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1622903523,"ip_address":"","comment_id":296180,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23097633116","product_id":100074001,"comment_content":"很好的案例。但是我有几点不同的意见和解读：<br>1）si% 应该只和包的数量正相关，BGP只是比IPIP多了少了一次封包解包；当然IPIP包的payload肯定要小，极少部分在IPIP模式下的2个包到BGP 合并到了1个，这样才能降si%<br>2）优化后TPS 提升了但是 US%却下降了，这么不太符合逻辑<br><br>我认为改成BGP后，用在网络封包解包的CPU去掉了，这样让出了更多的CPU给US，这才是这次优化的根因，si%只是顺带的一个极小的因素 :) ","like_count":6,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521352,"discussion_content":"1. 你的理解是没错的。这和文中的描述似乎也没有冲突。后面这句“我认为改成BGP后，用在网络封包解包的CPU去掉了，这样让出了更多的CPU给US，这才是这次优化的根因，si%只是顺带的一个极小的因素”，不知道是我们思路上的不同还是对我们对中断的理解不同，在网络中的IP、TCP之间的数据传递是要靠中断来实现的，你说的封包解包的减少，也是中断的减少。所以SI CPU不是顺带的因素。\n2. 这个是具体的监控数据，我并没有更改。并且这个也是符合逻辑的。你可以加我微信，我们详细讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622903523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1269873,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/71/895ee6cf.jpg","nickname":"分清云淡","note":"","ucode":"7045AE6BF72D31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378044,"discussion_content":"多谢老师回复\n关于1，我对si（软中断)的理解是内核收发包才会触发软中断，简单化来理解就是收到一个包触发一次软中断通知内核来读走(实际会优化多个包触发一次），而ipip封包解包跟软中断没啥关系，只是在协议栈处理包的时候多了一些封包解包的逻辑（简单理解就是多加了一次ip头), 正常的网络包也会加ip头，这肯定和软中断没关系，也就是我指出来的封包解包只是把内核的cpu消耗(sy%)降低了。\n\n关于2，绝对没有质疑这个数据被人为修改了的意思，只是比较好奇业务逻辑没变的话，上面的一系列优化只是把cpu从 si、sy赶到了us上，这样才能导致QPS 的增加。QPS加上去，而US降下来一般只有优化了业务逻辑导致总指令减少才可以做到。也许是监控误差\n，可能得和 IPC /进程级别的Profile对比着看才好理解\n\n不知道老师的微信号多少，我的微信是：zhi_xue_yuan","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623030038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2159305,"avatar":"","nickname":"Geek_c1b445","note":"","ucode":"8A2B1821E0DEAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579316,"discussion_content":"top 是实时刷的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657346297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008517,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/85/1dc41622.jpg","nickname":"姑射仙人","note":"","ucode":"3EFC1F3E592165","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547461,"discussion_content":"很好奇后续讨论是怎么样的，us降下来，idle也升上去了。第一轮也有5%左右的idle。是不是压力还没到极限。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642683420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296528,"user_name":"Geek_f93234","can_delete":false,"product_type":"c1","uid":1769504,"ip_address":"","ucode":"1E5DC903A5429E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGXndj5N66z9BL1ic9GibZzWWgoVeWaWTL2XUnCYic7iba2kAEvN9WfjmlXELD5lqt8IJ1P023N5ZWicg/132","comment_is_top":false,"comment_ctime":1623031405,"is_pvip":false,"replies":[{"id":"107661","content":"1. 这个问题，你先查一下skywalking的具体知识吧。<br>2. 标识的就是被调用方的时间。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1623040700,"ip_address":"","comment_id":296528,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5917998701","product_id":100074001,"comment_content":"老师，请教2个问题：<br>1.拆分响应时间中，Gateway -Member 中的两个图的右上角：侦察端 ，服务端，客户端这3个怎么理解？<br>2.为什么Gateway -Member之间消耗的时间取的是服务端消耗的40ms，而不是客户端消耗的60ms呢？","like_count":2,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521473,"discussion_content":"1. 这个问题，你先查一下skywalking的具体知识吧。\n2. 标识的就是被调用方的时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623040700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289795,"user_name":"道长","can_delete":false,"product_type":"c1","uid":2330999,"ip_address":"","ucode":"15B2E9CEF84634","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/KhQRc8hIxHHyPV3Og2Fc5l8w2y7ibGwGn6odmzl3wTt6fPrNv589uHmia1rgiaZhRiaLVHv9ibhzkxFx1zo42uNIS9A/132","comment_is_top":false,"comment_ctime":1619177741,"is_pvip":false,"replies":[{"id":"105108","content":"因为在这样的结构中。网络消耗不多，中断又高，所以，我们要查一下网络中断为什么那么高。对于底层网络的传输来说，中断是为了让数据可以正常让上层应用接收而用来一层层往上通知用的。<br>我们用的是KVM上面部署了K8s，k8s中的网络插件是有不同的网络模式的，所以这里只要想清楚这个层级关系，就明白了为什么要看网络模式了。对于k8s的优化，网络是非常重要的一块内容，在学习k8s的时候，你就会知道k8s网络模式有不同的实现方式，而这些实现方式的区别会导致中断数量有不同。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1619232816,"ip_address":"","comment_id":289795,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5914145037","product_id":100074001,"comment_content":"先通过top，查看到si高，再通过cat &#47;proc&#47;soft…(查看导致软中断)，查询这条的时候想看动态的变化情况，在命令前加watch cat…，查看到是RX(网络接收导致)，再查到中断消耗的带宽大小，并不大，进而想到是是由于网络小包导致，后面有点没太理解为什么想到了网络模式了问题。","like_count":2,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519020,"discussion_content":"因为在这样的结构中。网络消耗不多，中断又高，所以，我们要查一下网络中断为什么那么高。对于底层网络的传输来说，中断是为了让数据可以正常让上层应用接收而用来一层层往上通知用的。\n我们用的是KVM上面部署了K8s，k8s中的网络插件是有不同的网络模式的，所以这里只要想清楚这个层级关系，就明白了为什么要看网络模式了。对于k8s的优化，网络是非常重要的一块内容，在学习k8s的时候，你就会知道k8s网络模式有不同的实现方式，而这些实现方式的区别会导致中断数量有不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619232816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317411,"user_name":"Geek_c2089d","can_delete":false,"product_type":"c1","uid":1489545,"ip_address":"","ucode":"C66D345042525F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/4Lprf2mIWpJOPibgibbFCicMtp5bpIibyLFOnyOhnBGbusrLZC0frG0FGWqdcdCkcKunKxqiaOHvXbCFE7zKJ8TmvIA/132","comment_is_top":false,"comment_ctime":1634788456,"is_pvip":false,"replies":[{"id":"115041","content":"逻辑上似乎是合理的哟。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1634808589,"ip_address":"","comment_id":317411,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634788456","product_id":100074001,"comment_content":"为什么看到 NET_RX 中断高的时候，我们会想到去测试一下纯网络带宽？<br>回答：我们的NET_rx的中断高就说明了我们的系统在不断的做网络处理把包给上一层，然而我们在查看当前流量的时候我们发现使用的流量并不大。出现这情况是可能系统都在处理小的网络包，才会造成高频率的网络请求，但是上文已经对队列缓存都设置大了系统能处理合拼更大的包了，但是我们的处理包的频率还是不高，那么只能说我们的网络链路吞吐量就限制在这里，分析了系统中k8s的网络模型，瓶颈在系统接收包后的处理，是这样理解吗？","like_count":1,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528805,"discussion_content":"逻辑上似乎是合理的哟。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634808589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307148,"user_name":"测试中的战斗机","can_delete":false,"product_type":"c1","uid":1785962,"ip_address":"","ucode":"B0AFF7368C5072","user_header":"","comment_is_top":false,"comment_ctime":1628909982,"is_pvip":false,"replies":[{"id":"111288","content":"1. 不明白你说的哪些监控软件不能在生产上去用。生产上的监控应该比测试环境更全才对。你要具体说出哪个不能用，我才能告诉你有没有替换工具。<br>2. 我不清楚你说的具体是哪个图。我猜你说的应该是iftop。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1629076408,"ip_address":"","comment_id":307148,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628909982","product_id":100074001,"comment_content":"老师，请教您两个问题，还望解答：<br>1.我们做性能测试时有时候需要直接在生产环境去压，但生产环境有时候没法安装那些监控软件，像这种情况有什么好的办法通过别的途径获取到监控数据吗？<br>2. 上文中你截图的那些监控网络图是用什么来监控的？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525060,"discussion_content":"1. 不明白你说的哪些监控软件不能在生产上去用。生产上的监控应该比测试环境更全才对。你要具体说出哪个不能用，我才能告诉你有没有替换工具。\n2. 我不清楚你说的具体是哪个图。我猜你说的应该是iftop。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629076408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304491,"user_name":"jy","can_delete":false,"product_type":"c1","uid":1785172,"ip_address":"","ucode":"F4E179C435451B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJ6G2xZvNRmhyXBjmGbI5G8icGCCMPupr6yxZ1IcURwp7GTRHcpWGWpg9A0fLlyicmVdDwzqZqwiaOQ/132","comment_is_top":false,"comment_ctime":1627453771,"is_pvip":false,"replies":[{"id":"110167","content":"以太网包大小从64-1518字节。抓包就能看到大小。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1627473572,"ip_address":"","comment_id":304491,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627453771","product_id":100074001,"comment_content":"老师，请问下，多小算小包？如何判断出来是小包的？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524058,"discussion_content":"以太网包大小从64-1518字节。抓包就能看到大小。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627473572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294056,"user_name":"Beyond","can_delete":false,"product_type":"c1","uid":2243001,"ip_address":"","ucode":"702A6D7557AD31","user_header":"https://static001.geekbang.org/account/avatar/00/22/39/b9/536952a2.jpg","comment_is_top":false,"comment_ctime":1621737336,"is_pvip":false,"replies":[{"id":"106732","content":"如果你只想压用户信息查询，可以先造出一堆token来嘛。","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1621816918,"ip_address":"","comment_id":294056,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621737336","product_id":100074001,"comment_content":"老师，问一个小白问题就是：<br>1. 用户信息查询，我要先做登录的脚本，拿到token，然后在用户信息查询脚本中对应使用，从而才能获得对应用户信息，那在这个基准场景中，登录和获取用户信息脚本要同时跑，那这对单业务用户查询压测有影响吗，这样串联的话，有点感觉像容量场景，可能我对基准场景压测做法就是单接口但业务压测","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520491,"discussion_content":"如果你只想压用户信息查询，可以先造出一堆token来嘛。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621816918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293628,"user_name":"小鱼儿吐泡泡","can_delete":false,"product_type":"c1","uid":1031710,"ip_address":"","ucode":"2B4AA532B2B066","user_header":"https://static001.geekbang.org/account/avatar/00/0f/be/1e/94886200.jpg","comment_is_top":false,"comment_ctime":1621471641,"is_pvip":true,"replies":[{"id":"106359","content":"这个高低倒没有确切的标准，不过这里超过10%了。根据我的经验在3-5%之间比较正常。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1621487193,"ip_address":"","comment_id":293628,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621471641","product_id":100074001,"comment_content":"你好 请教下 <br><br>— si 消耗的 CPU 有点高了 —<br><br>怎么判断si是否合理？ 这个依据是 ？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520298,"discussion_content":"这个高低倒没有确切的标准，不过这里超过10%了。根据我的经验在3-5%之间比较正常。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621487193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289434,"user_name":"xhkk","can_delete":false,"product_type":"c1","uid":1093421,"ip_address":"","ucode":"B36B04D83B6C70","user_header":"https://static001.geekbang.org/account/avatar/00/10/af/2d/3dd65e6b.jpg","comment_is_top":false,"comment_ctime":1619009765,"is_pvip":false,"replies":[{"id":"105043","content":"50M的带宽在上面图中的最右下角。10%在上面的top命令中的si列。<br>命令是iftop。 ","user_name":"作者回复","user_name_real":"高楼(Zee)","uid":"1785562","ctime":1619077865,"ip_address":"","comment_id":289434,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1619009765","product_id":100074001,"comment_content":"总共用了 50Mb 的带宽，中断就已经达到 10%，也就是说带宽没有完全用满，可是中断已经不低了，这说明我们的数据包中还是小包居多。<br><br>这段话的内容是从该段话上面的图片得到的，高老师，请问图片中哪里显示了是50Mb带宽？中断达到10%又是从那个数字判断的？<br><br>另外，这个图是通过什么命令得到的？","like_count":0,"discussions":[{"author":{"id":1785562,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/da/e686a72b.jpg","nickname":"高楼(Zee)","note":"","ucode":"149202404A5ABC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518917,"discussion_content":"50M的带宽在上面图中的最右下角。10%在上面的top命令中的si列。\n命令是iftop。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619077865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}