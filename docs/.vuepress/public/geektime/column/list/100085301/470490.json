{"id":470490,"title":"用户故事｜语言不仅是工具，还是思维方式","content":"<p>你好，我是 Pedro，一名普普通通打工人，平平凡凡小码农。</p><p>可能你在课程留言区看到过我，也跟我讨论过问题。今天借着这篇用户故事的机会，正好能跟你再多聊几句。</p><p>我简单整理了一下自己入坑编程以来的一些思考，主要会从思维、语言和工具三个方面来聊一聊，最后也给你分享一点自己对 Rust 的看法，当然以下观点都是“主观”的，观点本身不重要，重要的是得到观点的过程。</p><h2>从思维谈起</h2><p>从接触编程开始，我们就已经开始与编程语言打交道，很多人学习编程的道路往往就是熟悉编程语言的过程。</p><p>在这个过程中，很多人会不适应，写出的代码往往都不能运行，更别提设计与抽象。出现这个现象最根本的原因是，代码体现的是计算机思维，<strong>而人脑思维和计算机思维差异巨大，很多人一开始无法接受两种思维差异带来的巨大冲击</strong>。</p><p>那么，究竟什么是计算机思维？</p><p>计算机思维是全方位的，体现在方方面面，我以个人视角来简单概括一下：</p><ul>\n<li>自顶向下：自顶向下是计算机思维的精髓，人脑更加适合自底向上。计算机通过自顶向下思维将大而难的问题拆解为小问题，再将小问题逐一解决，从而最终解决大问题。</li>\n<li>多维度、多任务：人脑是线性的，看问题往往是单维的，我们很难同时处理和思考多个问题，但是计算机不一样，它可以有多个 CPU 核心，在保存上下文的基础上能够并发运行成百上千的任务。</li>\n<li>全局性：人的精力、脑容量是有限的，而计算机的容量几乎是无限的；人在思考问题时，限于自己的局部性，拿到局部解就开始做了，而计算机可以在海量数据的基础上再做决策，从而逼近全局最优。</li>\n<li>协作性：计算机本身就是一件极其精细化的工程艺术品，它复杂精巧，每个部分都只会做自己最擅长的事情，比如将计算和存储剥离，计算机高效运作的背后是每个部分协作的结果，而人更擅长单体作战，只有通过大量的训练，才能发挥群体的作用。</li>\n<li>迭代快：人类进化、成长是缓慢的，直到现在，很多人的思维方式仍旧停留在上个世纪，而计算机则不同，进入信息时代后，计算机就遵循着摩尔定律，每 18 个月翻一番，十年前的手机放在今天可能连微信都无法正常运行。</li>\n<li>取舍：在长期的社会发展中，人过分喜欢强调对与错，喜欢追求绝对的公平，讽刺的是，由二进制组成的计算机却不会做出非黑即白的决策，无论是计算机本身(硬件)，还是里面运行的软件，每一个部分都是性能、成本、易用性多角度权衡的结果。</li>\n<li>So on…</li>\n</ul><!-- [[[read_end]]] --><p>当这些思维直接体现在代码里面，比如，自顶向下体现在编程语言中就是递归、分治；多维度、多任务的体现就是分支、跳转、上下文；迭代、协作和取舍在编程中也处处可见。</p><p>而这些恰恰是人脑思维不擅长的点，所以很多人无法短时间内做到编程入门。想要熟练掌握编程，就必须认识到人脑与计算机思维的差异，强化计算机思维的训练，<strong>这个训练的过程是不太可能短暂的，因此编程入门必须要消耗大量的时间和精力</strong>。</p><h2>语言</h2><p>不过思维的训练和评估是需要有载体的，就好比评估你的英文水平，会考察你用英文听/说/读/写的表达能力。那我们的计算机思维怎么表达呢？</p><p>于人而言，我们可以通过肢体动作、神情、声音、文字等来表达思维。在漫长的人类史中，动作、神情、声音这几种载体很难传承和传播，直到近代，音、视频的兴起才开始慢慢解决这个问题。</p><p>文字，尤其是语言诞生后的文字，成了人类文明延续、发展的主要途径之一，直至今天，我们仍然可以通过文字来与先贤对话。当然，对话的前提是，这些文字你得看得懂。</p><p>而看得懂的前提是，我们使用了同一种或类似的语言。</p><p><strong>回到计算机上来，现代计算机也是有通用语言的</strong>，也就是我们常说的二进制机器语言，专业一点叫指令集。二进制是计算机的灵魂，但是人类却很难理解、记忆和应用，因此为了辅助人类操纵计算机工作，上一代程序员们对机器语言做了第一次抽象，发明了汇编语言。</p><p>但伴随着硬件、软件的快速发展，程序代码越来越长，应用变得愈来愈庞大，汇编级别的抽象已经无法满足工程师对快速高效工作的需求了。历史的发展总是如此地相似，当发现语言抽象已经无法满足工作时，工程师们就会在原有层的基础上再抽象出一层，而这一层的著名佼佼者——C语言直接奠定了今天计算机系统的基石。</p><p>从此以后，不计其数的编程语言走向计算机的舞台，它们如同满天繁星，吸引了无数的编程爱好者，比如说迈向中年的 Java 和新生代的 Julia。虽然学习计算机最正确的途径不是从语言开始，但学习编程最好、最容易获取成就感的路径确实是应该从语言入手。因此编程语言的重要性不言而喻，它是我们走向编程世界的大门。</p><p>C 语言是一种<strong>命令式编程</strong>语言，命令式是一种编程范式；使用 C 写代码时，我们更多是在思考如何描述程序的运行，通过编程语言来告诉计算机如何执行。</p><p>举个例子，使用 C 语言来筛选出一个数组中大于 100 的数字。对应代码如下：</p><pre><code class=\"language-c++\">int main() {&nbsp;\n&nbsp; int arr[5] = { 100, 105, 110, 99, 0 };\n&nbsp; for (int i = 0; i &lt; 5; ++i) {\n&nbsp; &nbsp; if (arr[i] &gt; 100) {\n&nbsp; &nbsp; &nbsp; // do something\n&nbsp; &nbsp; }\n&nbsp; }\n&nbsp; return 0;\n}\n</code></pre><p>在这个例子中，代码撰写者需要使用数组、循环、分支判断等逻辑来告诉计算机如何去筛选数字，写代码的过程往往就是计算机的执行过程。</p><p>而对于另一种语言而言，比如 JavaScript，筛选出大于 100 的数字的代码大概是这样的：</p><pre><code class=\"language-javascript\">let arr = [ 100, 105, 110, 99, 0 ]\nlet result = arr.filter(n =&gt; n &gt; 100)\n</code></pre><p>相较于 C 来说，JavaScript 做出了更加高级的抽象，代码撰写者无需关心数组容量、数组遍历，只需将数字丢进容器里面，并在合适的地方加上筛选函数即可，这种编程方式被称为<strong>声明式编程</strong>。</p><p>可以看到的是，相较于命令式编程，声明式编程更倾向于表达在解决问题时应该做什么，而不是具体怎么做。这种更高级的抽象不仅能够给开发者带来更加良好的体验，也能让更多非专业人士进入编程这个领域。</p><p>不过命令式编程和声明式编程其实并没有优劣之分，主要区别体现在<strong>两者的语言特性相较于计算机指令集的抽象程度</strong>。</p><p>其中，命令式编程语言的抽象程度更低，这意味着该类语言的语法结构可以直接由相应的机器指令来实现，适合对性能极度敏感的场景。而声明式编程语言的抽象程度更高，这类语言更倾向于以叙事的方式来描述程序逻辑，开发者无需关心语言背后在机器指令层面的实现细节，适合于业务快速迭代的场景。</p><p>不过语言不是一成不变的。编程语言一直在进化，它的进化速度绝对超过了自然语言的进化速度。</p><p>在抽象层面上，编程语言一直都停留在机器码 -&gt; 汇编 -&gt; 高级语言这三层上。而对于我们广大开发者来说，我们的目光一直聚焦在高级语言这一层上，所以，高级编程语言也慢慢成为了狭隘的编程语言（当然，这是一件好事，每一类人都应该各司其职做好自己的事情，不用过多担心指令架构、指令集差异带来的麻烦）。</p><p>谈到这里，不知你是否发现了一个规律：抽象越低的编程语言越接近计算机思维，而抽象越高越接近人脑思维。</p><p>是的。<strong>现代层出不穷的编程语言，往往都是在人脑、计算机思维之间的平衡做取舍</strong>。那些设计语言的专家们似乎在这个毫无硝烟的战场上博弈，彼此对立却又彼此借鉴。不过哪怕再博弈，按照人类自然语言的趋势来看，也几乎不可能出现一家独大的可能，就像人类目前也是汉语、英语等多种语言共存，即使世界语于 1887 年就被发明，但我们似乎从未见过谁说世界语。</p><p>既然高级编程语言那么多，对于有选择困难症的我们，又该做出何种选择呢？</p><h2>工具</h2><p>一提到选语言，估计你常听这么一句话，语言是工具。很长一段时间里，我也这么告诫自己，无所谓一门语言的优劣，它仅仅只是一门工具，而我需要做的就是将这门工具用好。语言是表达思想的载体，只要有了思想，无论是何种语言，都能表达。</p><p>可当我接触了越来越多的编程语言，对代码、指令、抽象有了更深入的理解之后，我推翻了这个想法，认识到了“语言只是工具”这个说法的狭隘性。</p><p>编程语言，显然不仅只是工具，它一定程度上桎梏了我们的思维。</p><p>举例来说，使用 Java 或者 C# 的人能够很轻易地想到对象的设计与封装，那是因为 Java 和 C# 就是以类作为基本的组织单位，无论你是否有意识地去做这件事，你都已经做了。而对于 C 和 JavaScript 的使用者来说，大家似乎更倾向于使用函数来进行封装。</p><p><strong>抛开语言本身的优劣，这是一种思维的惯性，恰恰也印证了上面我谈到的，语言一定程度上桎梏了我们的思维</strong>。其实如果从人类语言的角度出发，一个人说中文和说英文的思维方式是大相径庭的，甚至一个人分别说方言和普通话给别人的感觉也像是两个人一样。</p><h2>Rust</h2><p>所以如果说思维是我们创造的出发点，那么编程语言，在表达思维的同时，也在一定程度上桎梏了我们的思维。聊到这里，终于到我们今天的主角——Rust这门编程语言出场了。</p><p>Rust 是什么？</p><p>Rust 是一门高度抽象、性能与安全并重的现代化高级编程语言。我学习、推崇它的主要原因有三点：</p><ul>\n<li>高度抽象、表达能力强，支持命令式、声明式、元编程、范型等多种编程范式；</li>\n<li>强大的工程能力，安全与性能并重；</li>\n<li>良好的底层能力，天然适合内核、数据库、网络。</li>\n</ul><p>Rust 很好地迎合了人类思维，对指令集进行了高度抽象，抽象后的表达力能让我们以更接近人类思维的视角去写代码，而 Rust 负责将我们的思维翻译为计算机语言，并且性能和安全得到了极大的保证。简单说就是，完美兼顾了一门语言的思想性和工具性。</p><p>仍以前面“选出一个数组中大于 100 的数字”为例，如果使用 Rust，那么代码是这样的：</p><pre><code class=\"language-rust\">let arr = vec![ 100, 105, 110, 99, 0 ]\nlet result = arr.iter().filter(n =&gt; n &gt; 100).collect();\n</code></pre><p>如此简洁的代码会不会带来性能损耗，Rust 的答案是不会，甚至可以比 C 做到更快。</p><p>我们对应看三个小例子的实现思路/要点，来感受一下 Rust 的语言表达能力、工程能力和底层能力。</p><h3>简单协程</h3><p>Rust 可以无缝衔接到 C、汇编代码，这样我们就可以跟下层的硬件打交道从而实现协程。</p><p>实现也很清晰。首先，定义出协程的上下文：</p><pre><code class=\"language-rust\">#[derive(Debug, Default)]\n#[repr(C)]\nstruct Context {\n   rsp: u64, // rsp 寄存器\n   r15: u64,\n   r14: u64,\n   r13: u64,\n   r12: u64,\n   rbx: u64,\n   rbp: u64,\n}\n#[naked]\nunsafe fn ctx_switch() {\n   // 注意：16 进制\n   llvm_asm!(\n       \"\n       mov     %rsp, 0x00(%rdi)\n       mov     %r15, 0x08(%rdi)\n       mov     %r14, 0x10(%rdi)\n       mov     %r13, 0x18(%rdi)\n       mov     %r12, 0x20(%rdi)\n       mov     %rbx, 0x28(%rdi)\n       mov     %rbp, 0x30(%rdi)\n\n       mov     0x00(%rsi), %rsp\n       mov     0x08(%rsi), %r15\n       mov     0x10(%rsi), %r14\n       mov     0x18(%rsi), %r13\n       mov     0x20(%rsi), %r12\n       mov     0x28(%rsi), %rbx\n       mov     0x30(%rsi), %rbp\n       \"\n   );\n}\n</code></pre><p>结构体 Context 保存了协程的运行上下文信息(寄存器数据)，通过函数 ctx_switch，当前协程就可以交出 CPU 使用权，下一个协程接管 CPU 并进入执行流。</p><p>然后我们给出协程的定义：</p><pre><code class=\"language-rust\">#[derive(Debug)]\nstruct Routine {\n   id: usize,\n   stack: Vec&lt;u8&gt;,\n   state: State,\n   ctx: Context,\n}\n</code></pre><p>协程 Routine 有自己唯一的 id、栈 stack、状态 state，以及上下文 ctx。Routine 通过 spawn 函数创建一个就绪协程，yield 函数会交出 CPU 执行权：</p><pre><code class=\"language-rust\">pub fn spawn(&amp;mut self, f: fn()) {\n     // 找到一个可用的\n     // let avaliable = ....\n     let sz = avaliable.stack.len();\n     unsafe {\n         let stack_bottom = avaliable.stack.as_mut_ptr().offset(sz as isize); // 高地址内存是栈顶\n         let stack_aligned = (stack_bottom as usize &amp; !15) as *mut u8;\n         std::ptr::write(stack_aligned.offset(-16) as *mut u64, guard as u64);\n         std::ptr::write(stack_aligned.offset(-24) as *mut u64, hello as u64);\n         std::ptr::write(stack_aligned.offset(-32) as *mut u64, f as u64);\n         avaliable.ctx.rsp = stack_aligned.offset(-32) as u64; // 16 字节对齐\n     }\n     avaliable.state = State::Ready;\n }\n\npub fn r#yield(&amp;mut self) -&gt; bool {\n     // 找到一个 ready 的，然后让其运行\n     let mut pos = self.current;\n     //.....\n     self.routines[pos].state = State::Running;\n     let old_pos = self.current;\n     self.current = pos;\n     unsafe {\n         let old: *mut Context = &amp;mut self.routines[old_pos].ctx;\n         let new: *const Context = &amp;self.routines[pos].ctx;\n         llvm_asm!(\n             \"mov $0, %rdi\n              mov $1, %rsi\"::\"r\"(old), \"r\"(new)\n         );\n         ctx_switch();\n     }\n     self.routines.len() &gt; 0\n }\n</code></pre><p>运行结果如下：</p><pre><code class=\"language-rust\">1 STARTING\nroutine: 1 counter: 0\n2 STARTING\nroutine: 2 counter: 0\nroutine: 1 counter: 1\nroutine: 2 counter: 1\nroutine: 1 counter: 2\nroutine: 2 counter: 2\nroutine: 1 counter: 3\nroutine: 2 counter: 3\nroutine: 1 counter: 4\nroutine: 2 counter: 4\nroutine: 1 counter: 5\nroutine: 2 counter: 5\nroutine: 1 counter: 6\nroutine: 2 counter: 6\nroutine: 1 counter: 7\nroutine: 2 counter: 7\nroutine: 1 counter: 8\nroutine: 2 counter: 8\nroutine: 1 counter: 9\nroutine: 2 counter: 9\n1 FINISHED\n</code></pre><p>具体代码实现参考<a href=\"https://github.com/PedroGao/rust-examples/blob/main/rsroutine/src/main.rs\">协程</a> 。</p><h3>简单内核</h3><p>操作系统内核是一个极为庞大的工程，但是如果只是写个简单内核输出 Hello World，那么 Rust 就能很快完成这个任务。你可以自己体验一下。</p><p>首先，添加依赖工具：</p><pre><code class=\"language-rust\">rustup component add llvm-tools-preview\ncargo install bootimage\n</code></pre><p>然后编辑 main.rs 文件输出一个 Hello World：</p><pre><code class=\"language-rust\">#![no_std]\n#![no_main]\nuse core::panic::PanicInfo;\nstatic HELLO:&amp;[u8] = b\"Hello World!\";\n#[no_mangle]\npub extern \"C\" fn _start() -&gt; ! {\n   let vga_buffer = 0xb8000 as *mut u8;\n   for (i, &amp;byte) in HELLO.iter().enumerate() {\n       unsafe {\n           *vga_buffer.offset(i as isize * 2) = byte;\n           *vga_buffer.offset(i as isize * 2 + 1) = 0xb;\n       }\n   }\n   loop{}\n}\n#[panic_handler]\nfn panic(_info: &amp;PanicInfo) -&gt; ! {\n   loop {}\n}\n</code></pre><p>然后编译、打包运行：</p><pre><code class=\"language-bash\">cargo bootimage\ncargo run\n</code></pre><p>运行结果如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/4e/40/4e200553acbc604a6456f8629dd30340.png?wh=1512x928\" alt=\"\"></p><p>具体代码实现参考<a href=\"https://github.com/PedroGao/rust-examples/tree/main/rkernel\">内核</a> 。</p><h3>简单网络协议栈</h3><p>同操作系统一样，网络协议栈也是一个庞大的工程系统。但是借助 Rust 和其完备的生态，我们可以迅速完成一个小巧的 HTTP 协议栈。</p><p>首先，在数据链路层，我们定义 Mac 地址结构体：</p><pre><code class=\"language-rust\">#[derive(Debug)]\npub struct MacAddress([u8; 6]);\n\t\nimpl MacAddress {\n pub fn new() -&gt; MacAddress {\n     let mut octets: [u8; 6] = [0; 6];\n     rand::thread_rng().fill_bytes(&amp;mut octets); // 1. 随机生成\n     octets[0] |= 0b_0000_0010; // 2\n     octets[1] &amp;= 0b_1111_1110; // 3\n     MacAddress { 0: octets }\n }\n}\n</code></pre><p>MacAddress 用来表示网卡的物理地址，此处的 new 函数通过随机数来生成随机的物理地址。</p><p>然后实现 DNS 域名解析函数，通过 IP 地址获取 MAC 地址，如下：</p><pre><code class=\"language-rust\">pub fn resolve(\n   dns_server_address: &amp;str,\n   domain_name: &amp;str,\n  ) -&gt; Result&lt;Option&lt;std::net::IpAddr&gt;, Box&lt;dyn Error&gt;&gt; {\n   let domain_name = Name::from_ascii(domain_name).map_err(DnsError::ParseDomainName)?;\n  \n   let dns_server_address = format!(\"{}:53\", dns_server_address);\n   let dns_server: SocketAddr = dns_server_address\n       .parse()\n       .map_err(DnsError::ParseDnsServerAddress)?;\n   // ....\n   let mut encoder = BinEncoder::new(&amp;mut request_buffer);\n   request.emit(&amp;mut encoder).map_err(DnsError::Encoding)?;\n   let _n_bytes_sent = localhost\n       .send_to(&amp;request_buffer, dns_server)\n       .map_err(DnsError::Sending)?;\n   loop {\n       let (_b_bytes_recv, remote_port) = localhost\n           .recv_from(&amp;mut response_buffer)\n           .map_err(DnsError::Receiving)?;\n       if remote_port == dns_server {\n           break;\n       }\n   }\n   let response = Message::from_vec(&amp;response_buffer).map_err(DnsError::Decoding)?;\n   for answer in response.answers() {\n       if answer.record_type() == RecordType::A {\n           let resource = answer.rdata();\n           let server_ip = resource.to_ip_addr().expect(\"invalid IP address received\");\n  \n           return Ok(Some(server_ip));\n       }\n   }\n   Ok(None)\n}\n</code></pre><p>接着实现 HTTP 协议的 GET 方法：</p><pre><code class=\"language-rust\">pub fn get(\n   tap: TapInterface,\n   mac: EthernetAddress,\n   addr: IpAddr,\n   url: Url,\n) -&gt; Result&lt;(), UpstreamError&gt; {\n   let domain_name = url.host_str().ok_or(UpstreamError::InvalidUrl)?;\n   let neighbor_cache = NeighborCache::new(BTreeMap::new());\n   // TCP 缓冲区\n   let tcp_rx_buffer = TcpSocketBuffer::new(vec![0; 1024]);\n   let tcp_tx_buffer = TcpSocketBuffer::new(vec![0; 1024]);\n   let tcp_socket = TcpSocket::new(tcp_rx_buffer, tcp_tx_buffer);\n   let ip_addrs = [IpCidr::new(IpAddress::v4(192, 168, 42, 1), 24)];\n   let fd = tap.as_raw_fd();\n   let mut routes = Routes::new(BTreeMap::new());\n   let default_gateway = Ipv4Address::new(192, 168, 42, 100);\n   routes.add_default_ipv4_route(default_gateway).unwrap();\n   let mut iface = EthernetInterfaceBuilder::new(tap)\n       .ethernet_addr(mac)\n       .neighbor_cache(neighbor_cache)\n       .ip_addrs(ip_addrs)\n       .routes(routes)\n       .finalize();\n   let mut sockets = SocketSet::new(vec![]);\n   let tcp_handle = sockets.add(tcp_socket);\n   // HTTP 请求\n   let http_header = format!(\n       \"GET {} HTTP/1.0\\r\\nHost: {}\\r\\nConnection: close\\r\\n\\r\\n\",\n       url.path(),\n       domain_name,\n   );\n   let mut state = HttpState::Connect;\n   'http: loop {\n       let timestamp = Instant::now();\n       match iface.poll(&amp;mut sockets, timestamp) {\n           Ok(_) =&gt; {}\n           Err(smoltcp::Error::Unrecognized) =&gt; {}\n           Err(e) =&gt; {\n               eprintln!(\"error: {:?}\", e);\n           }\n       }\n       {\n           let mut socket = sockets.get::&lt;TcpSocket&gt;(tcp_handle);\n           state = match state {\n               HttpState::Connect if !socket.is_active() =&gt; {\n                   eprintln!(\"connecting\");\n                   socket.connect((addr, 80), random_port())?;\n                   HttpState::Request\n               }\n               HttpState::Request if socket.may_send() =&gt; {\n                   eprintln!(\"sending request\");\n                   socket.send_slice(http_header.as_ref())?;\n                   HttpState::Response\n               }\n               HttpState::Response if socket.can_recv() =&gt; {\n                   socket.recv(|raw_data| {\n                       let output = String::from_utf8_lossy(raw_data);\n                       println!(\"{}\", output);\n                       (raw_data.len(), ())\n                   })?;\n                   HttpState::Response\n               }\n               HttpState::Response if !socket.may_recv() =&gt; {\n                   eprintln!(\"received complete response\");\n                   break 'http;\n               }\n               _ =&gt; state,\n           }\n       }\n       phy_wait(fd, iface.poll_delay(&amp;sockets, timestamp)).expect(\"wait error\");\n   }\n   Ok(())\n}\n</code></pre><p>最后在 main 函数中使用 HTTP GET 方法：</p><pre><code class=\"language-rust\">fn main() {\n   // ...\n   let tap = TapInterface::new(&amp;tap_text).expect(\n       \"error: unable to use &lt;tap-device&gt; as a \\\n   network interface\",\n   );\n   let domain_name = url.host_str().expect(\"domain name required\");\n   let _dns_server: std::net::Ipv4Addr = dns_server_text.parse().expect(\n       \"error: unable to parse &lt;dns-server&gt; as an \\\n        IPv4 address\",\n   );\n   let addr = dns::resolve(dns_server_text, domain_name).unwrap().unwrap();\n   let mac = ethernet::MacAddress::new().into();\n   http::get(tap, mac, addr, url).unwrap();\n}\n</code></pre><p>运行程序，结果如下：</p><pre><code class=\"language-powershell\">$ ./target/debug/rget http://www.baidu.com tap-rust\n\nHTTP/1.0 200 OK\nAccept-Ranges: bytes\nCache-Control: no-cache\nContent-Length: 9508\nContent-Type: text/html\n</code></pre><p>具体代码实现参考<a href=\"https://github.com/PedroGao/rust-examples/tree/main/rget\">协议栈</a> 。</p><p>通过这三个简单的小例子，无论是协程、内核还是协议栈，这些听上去都很高大上的技术，在 Rust 强大的表现力、生态和底层能力面前显得如此简单和方便。</p><p>思维是出发点，语言是表达体，工具是媒介，而 Rust 完美兼顾了一门语言的思想性和工具性，赋予了我们极强的工程表达能力和完成能力。</p><h2>总结</h2><p>作为极其现代的语言，Rust 集百家之长而成，将性能、安全、语言表达力都做到了极致，但同时也带来了巨大的学习曲线。</p><p>初学时，每天都要和编译器做斗争，每次编译都是满屏的错误信息；攻克一个陡坡后，发现后面有更大的陡坡，学习的道路似乎无穷无尽。那我们为什么要学习 Rust ？</p><p>这里引用左耳朵耗子的一句话：</p><blockquote>\n<p>如果你对 Rust 的概念认识得不完整，你完全写不出程序，那怕就是很简单的一段代码。这逼着程序员必须了解所有的概念才能编码。</p>\n</blockquote><p>Rust 是一个对开发者极其严格的语言，严格到你学的不扎实，就不能写程序，<strong>但这无疑也是一个巨大的机会，改掉你不好的编码习惯，锻炼你的思维，让你成为真正的大师</strong>。</p><p>聊到这里，你是否已经对 Rust 有了更深的认识和更多的激情，那么放手去做吧！期待你与 Rust 擦出更加明亮的火花！</p><h3>参考资料</h3><ol>\n<li><a href=\"https://os.phil-opp.com/\">Writing an OS in Rust</a></li>\n<li><a href=\"https://cfsamson.gitbook.io/green-threads-explained-in-200-lines-of-rust\">green-threads-explained-in-200-lines-of-rust</a></li>\n<li><a href=\"https://github.com/PedroGao/rust-examples\">https://github.com/PedroGao/rust-examples</a></li>\n<li>《深入理解计算机系统》</li>\n<li>《Rust in Action》</li>\n<li>《硅谷来信》</li>\n<li>《浪潮之巅》</li>\n</ol>","neighbors":{"left":{"article_title":"大咖助场｜开悟之坡（下）：Rust的现状、机遇与挑战","id":468948},"right":{"article_title":"加餐｜代码即数据：为什么我们需要宏编程能力？","id":481355}},"comments":[{"had_liked":false,"id":327868,"user_name":"安迪","can_delete":false,"product_type":"c1","uid":1023085,"ip_address":"","ucode":"BC23EA989E0A4C","user_header":"","comment_is_top":false,"comment_ctime":1640334183,"is_pvip":true,"replies":[{"id":"120785","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642309882,"ip_address":"","comment_id":327868,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5935301479","product_id":100085301,"comment_content":"谢谢分享！<br>说到计算机思维，最近正在看吴军老师的《计算之魂》这本书，书中重点讲解了如何塑造计算机思维。","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546424,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642309883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343405,"user_name":"老实人Honey","can_delete":false,"product_type":"c1","uid":1080653,"ip_address":"","ucode":"EA4AB5C0C33090","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/4d/d98865b2.jpg","comment_is_top":false,"comment_ctime":1650818335,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650818335","product_id":100085301,"comment_content":"感谢分享","like_count":0},{"had_liked":false,"id":327783,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1640306516,"is_pvip":false,"replies":[{"id":"120788","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642309985,"ip_address":"","comment_id":327783,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1640306516","product_id":100085301,"comment_content":"写的非常精彩，感谢分享","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546428,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642309985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}