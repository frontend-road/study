{"id":172300,"title":"20 | 总结（二）：分布式架构关键设计10问","content":"<p>你好，我是欧创新。</p><p>前面我们重点讲述了领域建模、微服务设计和前端设计方法，它们组合在一起就可以形成中台建设的整体解决方案。而中台大多基于分布式微服务架构，这种企业级的数字化转型有很多地方值得我们关注和思考。</p><p>我们不仅要关注企业商业模式、业务边界以及前中台的融合，还要关注数据技术体系、微服务设计、多活等多领域的设计和协同。结合实施经验和思考，今天我们就来聊聊分布式架构下的几个关键问题。</p><h2>一、选择什么样的分布式数据库？</h2><p>分布式架构下的数据应用场景远比集中式架构复杂，会产生很多数据相关的问题。谈到数据，首先就是要选择合适的分布式数据库。</p><p>分布式数据库大多采用数据多副本的方式，实现数据访问的高性能、多活和容灾。目前主要有三种不同的分布式数据库解决方案。它们的主要差异是数据多副本的处理方式和数据库中间件。</p><h3>1. 一体化分布式数据库方案</h3><p>它支持数据多副本、高可用。多采用Paxos协议，一次写入多数据副本，多数副本写入成功即算成功。代表产品是OceanBase和高斯数据库。</p><h3>2. 集中式数据库+数据库中间件方案</h3><p>它是集中式数据库与数据库中间件结合的方案，通过数据库中间件实现数据路由和全局数据管理。数据库中间件和数据库独立部署，采用数据库自身的同步机制实现主副本数据的一致性。集中式数据库主要有MySQL和PostgreSQL数据库，基于这两种数据库衍生出了很多的解决方案，比如开源数据库中间件MyCat+MySQL方案，TBase（基于PostgreSQL，但做了比较大的封装和改动）等方案。</p><!-- [[[read_end]]] --><h3>3. 集中式数据库+分库类库方案</h3><p>它是一种轻量级的数据库中间件方案，分库类库实际上是一个基础JAR包，与应用软件部署在一起，实现数据路由和数据归集。它适合比较简单的读写交易场景，在强一致性和聚合分析查询方面相对较弱。典型分库基础组件有ShardingSphere。</p><p><strong>小结：</strong>这三种方案实施成本不一样，业务支持能力差异也比较大。一体化分布式数据库主要由互联网大厂开发，具有超强的数据处理能力，大多需要云计算底座，实施成本和技术能力要求比较高。集中式数据库+数据库中间件方案，实施成本和技术能力要求适中，可满足中大型企业业务要求。第三种分库类库的方案可处理简单的业务场景，成本和技能要求相对较低。在选择数据库的时候，我们要考虑自身能力、成本以及业务需要，从而选择合适的方案。</p><h2>二、如何设计数据库分库主键？</h2><p>选择了分布式数据库，第二步就要考虑数据分库，这时分库主键的设计就很关键了。</p><p>与客户接触的关键业务，我建议你以客户ID作为分库主键。这样可以确保同一个客户的数据分布在同一个数据单元内，避免出现跨数据单元的频繁数据访问。跨数据中心的频繁服务调用或跨数据单元的查询，会对系统性能造成致命的影响。</p><p>将客户的所有数据放在同一个数据单元，对客户来说也更容易提供客户一致性服务。而对企业来说，“以客户为中心”的业务能力，首先就要做到数据上的“以客户为中心”。</p><p>当然，你也可以根据业务需要用其它的业务属性作为分库主键，比如机构、用户等。</p><h2>三、数据库的数据同步和复制</h2><p>在微服务架构中，数据被进一步分割。为了实现数据的整合，数据库之间批量数据同步与复制是必不可少的。数据同步与复制主要用于数据库之间的数据同步，实现业务数据迁移、数据备份、不同渠道核心业务数据向数据平台或数据中台的数据复制、以及不同主题数据的整合等。</p><p>传统的数据传输方式有ETL工具和定时提数程序，但数据在时效性方面存在短板。分布式架构一般采用基于数据库逻辑日志增量数据捕获（CDC）技术，它可以实现准实时的数据复制和传输，实现数据处理与应用逻辑解耦，使用起来更加简单便捷。</p><p>现在主流的PostgreSQL和MySQL数据库外围，有很多数据库日志捕获技术组件。CDC也可以用在领域事件驱动设计中，作为领域事件增量数据的获取技术。</p><h2>四、跨库关联查询如何处理？</h2><p>跨库关联查询是分布式数据库的一个短板，会影响查询性能。在领域建模时，很多实体会分散到不同的微服务中，但很多时候会因为业务需求，它们之间需要关联查询。</p><p>关联查询的业务场景包括两类：第一类是基于某一维度或某一主题域的数据查询，比如基于客户全业务视图的数据查询，这种查询会跨多个业务线的微服务；第二类是表与表之间的关联查询，比如机构表与业务表的联表查询，但机构表和业务表分散在不同的微服务。</p><p><strong>如何解决这两类关联查询呢？</strong></p><p>对于第一类场景，由于数据分散在不同微服务里，我们无法跨多个微服务来统计这些数据。你可以建立面向主题的分布式数据库，它的数据来源于不同业务的微服务。采用数据库日志捕获技术，从各业务端微服务将数据准实时汇集到主题数据库。在数据汇集时，提前做好数据关联（如将多表数据合并为一个宽表）或者建立数据模型。面向主题数据库建设查询微服务。这样一次查询你就可以获取客户所有维度的业务数据了。你还可以根据主题或场景设计合适的分库主键，提高查询效率。</p><p>对于第二类场景，对于不在同一个数据库的表与表之间的关联查询场景，你可以采用小表广播，在业务库中增加一张冗余的代码副表。当主表数据发生变化时，你可以通过消息发布和订阅的领域事件驱动模式，异步刷新所有副表数据。这样既可以解决表与表的关联查询，还可以提高数据的查询效率。</p><h2>五、如何处理高频热点数据？</h2><p>对于高频热点数据，比如商品、机构等代码类数据，它们同时面向多个应用，要有很高的并发响应能力。它们会给数据库带来巨大的访问压力，影响系统的性能。</p><p>常见的做法是将这些高频热点数据，从数据库加载到如Redis等缓存中，通过缓存提供数据访问服务。这样既可以降低数据库的压力，还可以提高数据的访问性能。</p><p>另外，对需要模糊查询的高频数据，你也可以选用ElasticSearch等搜索引擎。</p><p>缓存就像调味料一样，投入小、见效快，用户体验提升快。</p><h2>六、前后序业务数据的处理</h2><p>在微服务设计时你会经常发现，某些数据需要关联前序微服务的数据。比如：在保险业务中，投保微服务生成投保单后，保单会关联前序投保单数据等。在电商业务中，货物运输单会关联前序订单数据。由于关联的数据分散在业务的前序微服务中，你无法通过不同微服务的数据库来给它们建立数据关联。</p><p><strong>如何解决这种前后序的实体关联呢？</strong></p><p>一般来说，前后序的数据都跟领域事件有关。你可以通过领域事件处理机制，按需将前序数据通过领域事件实体，传输并冗余到当前的微服务数据库中。</p><p>你可以将前序数据设计为实体或者值对象，并被当前实体引用。在设计时你需要关注以下内容：如果前序数据在当前微服务只可整体修改，并且不会对它做查询和统计分析，你可以将它设计为值对象；当前序数据是多条，并且需要做查询和统计分析，你可以将它设计为实体。</p><p>这样，你可以在货物运输微服务，一次获取前序订单的清单数据和货物运输单数据，将所有数据一次反馈给前端应用，降低跨微服务的调用。如果前序数据被设计为实体，你还可以将前序数据作为查询条件，在本地微服务完成多维度的综合数据查询。只有必要时才从前序微服务，获取前序实体的明细数据。这样，既可以保证数据的完整性，还可以降低微服务的依赖，减少跨微服务调用，提升系统性能。</p><h2>七、数据中台与企业级数据集成</h2><p>分布式微服务架构虽然提升了应用弹性和高可用能力，但原来集中的数据会随着微服务拆分而形成很多数据孤岛，增加数据集成和企业级数据使用的难度。你可以通过数据中台来实现数据融合，解决分布式架构下的数据应用和集成问题。</p><p><strong>你可以分三步来建设数据中台。</strong></p><p>第一，按照统一数据标准，完成不同微服务和渠道业务数据的汇集和存储，解决数据孤岛和初级数据共享的问题。</p><p>第二，建立主题数据模型，按照不同主题和场景对数据进行加工处理，建立面向不同主题的数据视图，比如客户统一视图、代理人视图和渠道视图等。</p><p>第三，建立业务需求驱动的数据体系，支持业务和商业模式创新。</p><p>数据中台不仅限于分析场景，也适用于交易型场景。你可以建立在数据仓库和数据平台上，将数据平台化之后提供给前台业务使用，为交易场景提供支持。</p><h2>八、BFF与企业级业务编排和协同</h2><p>企业级业务流程往往是多个微服务一起协作完成的，每个单一职责的微服务就像积木块，它们只完成自己特定的功能。那如何组织这些微服务，完成企业级业务编排和协同呢？</p><p>你可以在微服务和前端应用之间，增加一层BFF微服务（Backend for Frontends）。<strong>BFF主要职责是处理微服务之间的服务组合和编排</strong>，微服务内的应用服务也是处理服务的组合和编排，那这二者有什么差异呢？</p><p>BFF位于中台微服务之上，主要职责是微服务之间的服务协调；<strong>应用服务主要处理微服务内的服务组合和编排。</strong>在设计时我们应尽可能地将可复用的服务能力往下层沉淀，在实现能力复用的同时，还可以避免跨中心的服务调用。</p><p>BFF像齿轮一样，来适配前端应用与微服务之间的步调。它通过Façade服务适配不同的前端，通过服务组合和编排，组织和协调微服务。BFF微服务可根据需求和流程变化，与前端应用版本协同发布，避免中台微服务为适配前端需求的变化，而频繁地修改和发布版本，从而保证微服务核心领域逻辑的稳定。</p><p>如果你的BFF做得足够强大，它就是一个集成了不同中台微服务能力、面向多渠道应用的业务能力平台。</p><h2>九、分布式事务还是事件驱动机制？</h2><p>分布式架构下，原来单体的内部调用，会变成分布式调用。如果一个操作涉及多个微服务的数据修改，就会产生数据一致性的问题。数据一致性有强一致性和最终一致性两种，它们实现方案不一样，实施代价也不一样。</p><p>对于实时性要求高的强一致性业务场景，你可以采用分布式事务，但分布式事务有性能代价，在设计时我们需平衡考虑业务拆分、数据一致性、性能和实现的复杂度，尽量避免分布式事务的产生。</p><p>领域事件驱动的异步方式是分布式架构常用的设计方法，它可以解决非实时场景的数据最终一致性问题。基于消息中间件的领域事件发布和订阅，可以很好地解耦微服务。通过削峰填谷，可以减轻数据库实时访问压力，提高业务吞吐量和处理能力。你还可以通过事件驱动实现读写分离，提高数据库访问性能。对最终一致性的场景，我建议你采用领域事件驱动的设计方法。</p><h2>十、多中心多活的设计</h2><p>分布式架构的高可用主要通过多活设计来实现，多中心多活是一个非常复杂的工程，下面我主要列出以下几个关键的设计。</p><p>1.选择合适的分布式数据库。数据库应该支持多数据中心部署，满足数据多副本以及数据底层复制和同步技术要求，以及数据恢复的时效性要求。</p><p>2.单元化架构设计。将若干个应用组成的业务单元作为部署的基本单位，实现同城和异地多活部署，以及跨中心弹性扩容。各单元业务功能自包含，所有业务流程都可在本单元完成；任意单元的数据在多个数据中心有副本，不会因故障而造成数据丢失；任何单元故障不影响其它同类单元的正常运行。单元化设计时我们要尽量避免跨数据中心和单元的调用。</p><p>3.访问路由。访问路由包括接入层、应用层和数据层的路由，确保前端访问能够按照路由准确到达数据中心和业务单元，准确写入或获取业务数据所在的数据库。</p><p>4.全局配置数据管理。实现各数据中心全局配置数据的统一管理，每个数据中心全局配置数据实时同步，保证数据的一致性。</p><h2>总结</h2><p>企业级分布式架构的实施是一个非常复杂的系统工程，涉及到非常多的技术体系和方法。今天我罗列了10个关键的设计领域，每个领域其实都非常复杂，需要很多的投入和研究。在实施的时候，你和你的公司要结合自身情况来选择合适的技术组件和实施方案。</p><h2>思考题</h2><p>在分布式架构设计时，你遇到过哪些问题？有什么样的解决方案？一起来分享一下。</p><p></p>","comments":[{"had_liked":false,"id":189492,"user_name":"狮锅艺","can_delete":false,"product_type":"c1","uid":1187577,"ip_address":"","ucode":"1B4AD130F9D0CA","user_header":"https://static001.geekbang.org/account/avatar/00/12/1e/f9/bfb54326.jpg","comment_is_top":false,"comment_ctime":1584522096,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"113253671792","product_id":100037301,"comment_content":"学完欧老师的DDD实战，在具体项目中战略设计和战术设计完成后，可以看看 https:&#47;&#47;microservices.io&#47; 这个网站，很多微服务开发部署的细节都有讲解。","like_count":27,"discussions":[{"author":{"id":1069797,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83er77H7TocrQqc0NsfkNjY4QT9llye3XxbZkIcBuX32RWwf4nA46EFvWaUncxcYZmP8wXMicz2TnkIw/132","nickname":"sum","note":"","ucode":"5058D2F417AA82","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384931,"discussion_content":"mark","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626799208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1572356,"avatar":"https://static001.geekbang.org/account/avatar/00/17/fe/04/bb427e47.jpg","nickname":"码哥字节","note":"","ucode":"362103AD52C8E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589418,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664854488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284730,"avatar":"https://static001.geekbang.org/account/avatar/00/13/9a/7a/dd08bc09.jpg","nickname":"姬","note":"","ucode":"968079E564FD2F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584656,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661006081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1074011,"avatar":"https://static001.geekbang.org/account/avatar/00/10/63/5b/062da5eb.jpg","nickname":"黑山老妖","note":"","ucode":"ED19A0D768A29C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575034,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654563670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546948,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642476472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2742084,"avatar":"https://static001.geekbang.org/account/avatar/00/29/d7/44/ca12ca07.jpg","nickname":"芮芪懿","note":"","ucode":"8DDA8808A2E858","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389878,"discussion_content":"这怎么打不开","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629459233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354058,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615222652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105102,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dc/ce/a144dea1.jpg","nickname":"yhh","note":"","ucode":"B566981788B6A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299735,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597802063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187113,"user_name":"OpenMind","can_delete":false,"product_type":"c1","uid":1058084,"ip_address":"","ucode":"AAAB50F2DD8035","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/24/4d1b5f64.jpg","comment_is_top":false,"comment_ctime":1584019305,"is_pvip":false,"replies":[{"id":"72222","content":"是的。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1584054021,"ip_address":"","comment_id":187113,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40238724969","product_id":100037301,"comment_content":"请问小表广播是什么意思？是把分布在不同库中需要连表的叫小的表在每个与他关联查询表所在的库中冗余一份吗？比如订单表和客户信息表分布在不同库内需要连表查询，客户信息表数据少，小表广播就是在订单表所在的库中冗余一份客户信息表？","like_count":9,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486995,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584054021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185164,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1583501984,"is_pvip":false,"replies":[{"id":"71819","content":"因为单元数据在其他数据中心是有多副本的，通过云计算平台可以很快的扩展出单元新的应用节点，启用新单元后，前端接入路由完成切换就可以实现多活了。带故障解除就可以重新切回原来的单元","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1583721590,"ip_address":"","comment_id":185164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35943240352","product_id":100037301,"comment_content":"老师，单元化架构中，发生故障的那个单元是如何做故障恢复的？","like_count":8,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486274,"discussion_content":"因为单元数据在其他数据中心是有多副本的，通过云计算平台可以很快的扩展出单元新的应用节点，启用新单元后，前端接入路由完成切换就可以实现多活了。带故障解除就可以重新切回原来的单元","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583721590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182441,"user_name":"钱晟龙🐲龍🐉","can_delete":false,"product_type":"c1","uid":1125387,"ip_address":"","ucode":"C602E06A3B6BBD","user_header":"https://static001.geekbang.org/account/avatar/00/11/2c/0b/ad939ef7.jpg","comment_is_top":false,"comment_ctime":1582788421,"is_pvip":false,"replies":[{"id":"70640","content":"有一些数据的写和改是在一个地方，当这些数据修改后，可以通过事件驱动的方式，将修改后的数据异步到读服务。通过这种读写分离的设计，可以提高数据库的查询性能。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1582800821,"ip_address":"","comment_id":182441,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14467690309","product_id":100037301,"comment_content":"领域事件驱动的异步方式是分布式架构常用的设计方法，它可以解决非实时场景的数据最终一致性问题。基于消息中间件的领域事件发布和订阅，可以很好地解耦微服务。通过削峰填谷，可以减轻数据库实时访问压力，提高业务吞吐量和处理能力。你还可以通过事件驱动实现读写分离，提高数据库访问性能。对最终一致性的场景，我建议你采用领域事件驱动的设计方法。<br><br>你还可以通过事件驱动实现读写分离，提高数据库访问性能，老师这个是啥意思？？没看懂。。","like_count":3,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485339,"discussion_content":"有一些数据的写和改是在一个地方，当这些数据修改后，可以通过事件驱动的方式，将修改后的数据异步到读服务。通过这种读写分离的设计，可以提高数据库的查询性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582800821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1125387,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2c/0b/ad939ef7.jpg","nickname":"钱晟龙🐲龍🐉","note":"","ucode":"C602E06A3B6BBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195991,"discussion_content":"所以读服务那边应该在分布式缓存 或者 一些类似es的服务当中么～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583326141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157387,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1575128169,"is_pvip":true,"replies":[{"id":"60356","content":"PAXOS协议的数据库还是很强大的。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1575166218,"ip_address":"","comment_id":157387,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10165062761","product_id":100037301,"comment_content":"一直尝试着建立自己的知识体系，分布式的经典问题是很重要的一环，今天看老师的这篇也有些新的收获补充进去，比如OceanBase，听过大名，但是不知道是多副本机制实现的分布式数据库。","like_count":2,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476414,"discussion_content":"PAXOS协议的数据库还是很强大的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575166218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157088,"user_name":"深山小书童","can_delete":false,"product_type":"c1","uid":1079593,"ip_address":"","ucode":"6B5DD3B3D84534","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/29/a90cf777.jpg","comment_is_top":false,"comment_ctime":1575028577,"is_pvip":true,"replies":[{"id":"60353","content":"谢谢，这里面有我的很多总结和思考。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1575165717,"ip_address":"","comment_id":157088,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10164963169","product_id":100037301,"comment_content":"这么课程就只看这两篇总结就值回票价了！前两天刚刚碰到老师说的前后序实体关联问题，也是按照领域事件来冗余实体的。","like_count":2,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476324,"discussion_content":"谢谢，这里面有我的很多总结和思考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575165717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263177,"user_name":"Eternal","can_delete":false,"product_type":"c1","uid":1188023,"ip_address":"","ucode":"EA6FE7CC98F740","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","comment_is_top":false,"comment_ctime":1606033798,"is_pvip":false,"replies":[{"id":"96487","content":"两者还是有比较大的差异的。BFF位于微服务与前端之间，它的主要职能是组合和编排多个微服务的API形成新的粗粒度的服务，然后供前端调用。微前端与微服务类似，也就是将前端微服务化，解决单体前端臃肿和集成复杂度的问题。","user_name":"作者回复","user_name_real":"欧创新","uid":"1316268","ctime":1606898992,"ip_address":"","comment_id":263177,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5901001094","product_id":100037301,"comment_content":"BFF感觉和微前端得抽象一样，不知对不对？<br>","like_count":1,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510114,"discussion_content":"两者还是有比较大的差异的。BFF位于微服务与前端之间，它的主要职能是组合和编排多个微服务的API形成新的粗粒度的服务，然后供前端调用。微前端与微服务类似，也就是将前端微服务化，解决单体前端臃肿和集成复杂度的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606898992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357141,"user_name":"killer","can_delete":false,"product_type":"c1","uid":1141036,"ip_address":"上海","ucode":"22BF63C05CFACE","user_header":"https://static001.geekbang.org/account/avatar/00/11/69/2c/046c7265.jpg","comment_is_top":false,"comment_ctime":1662988919,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662988919","product_id":100037301,"comment_content":"BFF层和新增一个微服务聚合层有什么区别？","like_count":0},{"had_liked":false,"id":327562,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1640169193,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640169193","product_id":100037301,"comment_content":"这里的分布式架构设计也是中大型公司才有机会遇到的吧，小公司不管是业务体量还是数据都没有这个必要。老师罗列的这10点，每一点单列出来都是很大的一个工程。<br><br>就算不用DDD，只要你是微服务的架构设计，当然前提是集群环境，那么肯定就会遇到这些一致性的问题，事务的问题，性能的问题。","like_count":0},{"had_liked":false,"id":325630,"user_name":"小邦plus","can_delete":false,"product_type":"c1","uid":1358564,"ip_address":"","ucode":"D84AFDE408ED98","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq6dppX1EPFeGvkUXVLHnxBBIkbz72kicGRwCW1avtccPyMj1JVR3vPFb3FBlZcgVUuSkMmnSHel0Q/132","comment_is_top":false,"comment_ctime":1639050440,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639050440","product_id":100037301,"comment_content":"你可以在货物运输微服务，一次获取前序订单的清单数据和货物运输单数据，将所有数据一次反馈给前端应用，降低跨微服务的调用。如果前序数据被设计为实体，你还可以将前序数据作为查询条件，在本地微服务完成多维度的综合数据查询。<br>老师还在看留言吗？前序实体关联这段不是很理解，可以解答一下吗","like_count":0},{"had_liked":false,"id":309696,"user_name":"花生","can_delete":false,"product_type":"c1","uid":1266634,"ip_address":"","ucode":"5397C08BD51DD4","user_header":"https://static001.geekbang.org/account/avatar/00/13/53/ca/44088dd0.jpg","comment_is_top":false,"comment_ctime":1630307474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630307474","product_id":100037301,"comment_content":"老师，有两个问题，一、对于第二类场景，对于不在同一个数据库的表与表之间的关联查询场景，你可以采用小表广播。您的意思是在每个数据库都建机构和业务表，有变化就异步更新吗。二、这一章分布式架构的问题，能否推荐一些书籍。","like_count":0},{"had_liked":false,"id":271096,"user_name":"王志","can_delete":false,"product_type":"c1","uid":2399436,"ip_address":"","ucode":"1E478572FE225E","user_header":"https://static001.geekbang.org/account/avatar/00/24/9c/cc/085b9740.jpg","comment_is_top":false,"comment_ctime":1609398655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609398655","product_id":100037301,"comment_content":"老师：我看你直接在foreach里面调用数据库查询操作，有什么原因吗？这样会导致查询很慢","like_count":0},{"had_liked":false,"id":249921,"user_name":"Hello.World.唐 ","can_delete":false,"product_type":"c1","uid":1127394,"ip_address":"","ucode":"DA192A1B9D4BD6","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/e2/4893dc25.jpg","comment_is_top":false,"comment_ctime":1600853139,"is_pvip":false,"replies":[{"id":"91627","content":"你可以通过消息中间件，采用领域事件驱动的机制，当源端共享数据发生变化时，可以通过发布订阅机制修改目的端多个共享的冗余数据。","user_name":"作者回复","user_name_real":"欧创新","uid":"1316268","ctime":1600933531,"ip_address":"","comment_id":249921,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1600853139","product_id":100037301,"comment_content":"老师好，在实际的环境中，当多个服务共享数据（非数据字典类的数据）时，目前采用的是冗余表，即将共享数据信息冗余到部分业务数据里面，避免过渡查询和服务调用。这样会有一个问题，当共享的源数据发生改变后，如何更好的通知更改其他服务中冗余的数据。或者有没有更好的方式来处理谢谢业务上的冗余数据","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506062,"discussion_content":"你可以通过消息中间件，采用领域事件驱动的机制，当源端共享数据发生变化时，可以通过发布订阅机制修改目的端多个共享的冗余数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600933531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546989,"discussion_content":"可以用上面提到的CDC技术，比如阿里的 Canal","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642488436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1707838,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/AcJM5WNhE062TQAsIE8KTxTsZMTHJHCm4LCfsjBPibZ6iaGRamfZqIRFcLXLVfAQobeCIgA9o5wiaRCKa0dNbic1iag/132","nickname":"paulmin","note":"","ucode":"6AAB20AB369E90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400686,"discussion_content":"数据变化导致冗余的表需要做大量的update的话，这种情况要怎么处理？例如mysql的cpu会涨","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633368655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177775,"user_name":"熊猫大侠","can_delete":false,"product_type":"c1","uid":1016937,"ip_address":"","ucode":"79FD66542EAA86","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/69/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1581498005,"is_pvip":false,"replies":[{"id":"69020","content":"BFF里面没有领域服务的，它的功能与应用层的功能比较接近。它主要处理企业级的跨微服务的服务编排。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1581508240,"ip_address":"","comment_id":177775,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1581498005","product_id":100037301,"comment_content":"前提：BFF层调用多个微服务，BFF主要职责是做服务聚合，流程的编排给前端 页面提供服务。像一些前端的页面逻辑，比如文案的处理，数据的筛选，BFF是否应该有领域服务层在处理这些逻辑，BFF是否应该有领域服务？这些逻辑通常在微服务不愿意做的 。","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483535,"discussion_content":"BFF里面没有领域服务的，它的功能与应用层的功能比较接近。它主要处理企业级的跨微服务的服务编排。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581508240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1707838,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/AcJM5WNhE062TQAsIE8KTxTsZMTHJHCm4LCfsjBPibZ6iaGRamfZqIRFcLXLVfAQobeCIgA9o5wiaRCKa0dNbic1iag/132","nickname":"paulmin","note":"","ucode":"6AAB20AB369E90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400687,"discussion_content":"BFF会是一层服务聚合层，技术逻辑上有可能会有性能瓶颈问题出现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633368745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016937,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/69/abb7bfe3.jpg","nickname":"熊猫大侠","note":"","ucode":"79FD66542EAA86","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168399,"discussion_content":"那页面层一些通用逻辑做在什么地方适合？ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581578952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175722,"user_name":"silentyears","can_delete":false,"product_type":"c1","uid":1061748,"ip_address":"","ucode":"6E137BFEB874CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/33/74/d9d143fa.jpg","comment_is_top":false,"comment_ctime":1580807912,"is_pvip":true,"replies":[{"id":"68998","content":"1、是的，增加了副表后，就不需要跨微服务调用了，而且微服务内部可以实现跨表查询，这样就解决了，微服务拆分后的数据联表查询的问题。<br>2、第一种场景实际上就是读写分离的方式，有一部分分散在不同微服务的数据，在进行数据归集后，就可以统一对外提供查询服务。第二种是小表广播的模式，主要解决少量数据的联表查询的问题。<br>","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1581495228,"ip_address":"","comment_id":175722,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1580807912","product_id":100037301,"comment_content":"老师好，请问：<br>1、第四点“在业务库中增加冗余的代码副表，当主表数据变化，通过消息发布和事件驱动，异步刷新所有副表数据”具体怎么理解，难道要在微服务业务库A中增加B的冗余数据存储，比方说订单库中增加冗余副表存储客户库中的客户信息？<br>2、第四点介绍的两种场景的解决方式和CORS这种技术方案有何关系?<br>谢谢","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482871,"discussion_content":"1、是的，增加了副表后，就不需要跨微服务调用了，而且微服务内部可以实现跨表查询，这样就解决了，微服务拆分后的数据联表查询的问题。\n2、第一种场景实际上就是读写分离的方式，有一部分分散在不同微服务的数据，在进行数据归集后，就可以统一对外提供查询服务。第二种是小表广播的模式，主要解决少量数据的联表查询的问题。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581495228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173337,"user_name":"YEROM","can_delete":false,"product_type":"c1","uid":1061136,"ip_address":"","ucode":"D5FD8FC04A11B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/31/10/4e2617dd.jpg","comment_is_top":false,"comment_ctime":1579506948,"is_pvip":false,"replies":[{"id":"67225","content":"网上有不少，搜BFF就可以了。每日一课里杨波有讲过。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1579526664,"ip_address":"","comment_id":173337,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1579506948","product_id":100037301,"comment_content":"BFF有没有更深入的一些资料可以参考的？","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482042,"discussion_content":"网上有不少，搜BFF就可以了。每日一课里杨波有讲过。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579526664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141036,"avatar":"https://static001.geekbang.org/account/avatar/00/11/69/2c/046c7265.jpg","nickname":"killer","note":"","ucode":"22BF63C05CFACE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587348,"discussion_content":"我理解的BFF层，可以在后端微服务聚合层做，也可以让前端做，但是前端的BFF层一致性怎么保证？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662988998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170644,"user_name":"胡鹏","can_delete":false,"product_type":"c1","uid":1326455,"ip_address":"","ucode":"52644EC57FA4DB","user_header":"https://static001.geekbang.org/account/avatar/00/14/3d/77/45e5e06d.jpg","comment_is_top":false,"comment_ctime":1578650175,"is_pvip":false,"replies":[{"id":"66120","content":"真的，是这样的。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1578659060,"ip_address":"","comment_id":170644,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578650175","product_id":100037301,"comment_content":"实战篇还得一边实践一遍反复观看才行,   直接看的话,    容易一眼就过去了而不知所云","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481052,"discussion_content":"真的，是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578659060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167526,"user_name":"quietwater","can_delete":false,"product_type":"c1","uid":1055029,"ip_address":"","ucode":"C25E2CD356D3F9","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/35/be8372be.jpg","comment_is_top":false,"comment_ctime":1577848521,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577848521","product_id":100037301,"comment_content":"干货满满，任重道远。","like_count":0},{"had_liked":false,"id":157343,"user_name":"krugle","can_delete":false,"product_type":"c1","uid":1045770,"ip_address":"","ucode":"60A7D9189C01BE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/0a/077b9922.jpg","comment_is_top":false,"comment_ctime":1575114509,"is_pvip":false,"replies":[{"id":"60354","content":"你可以通过领域建模找出实体和聚合，来划分限界上下文。建议你的边界划分和设计从领域建模开始。建立领域模型后大概就知道边界在哪里了。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1575165903,"ip_address":"","comment_id":157343,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1575114509","product_id":100037301,"comment_content":"微服务 服务要做拆分 我们做电商saas的  比如商品服务 要不要区分商城和管理后台的商品服务","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476403,"discussion_content":"你可以通过领域建模找出实体和聚合，来划分限界上下文。建议你的边界划分和设计从领域建模开始。建立领域模型后大概就知道边界在哪里了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575165903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70100,"discussion_content":"是的，商品应该是一个限界上下文。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575327512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045770,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f5/0a/077b9922.jpg","nickname":"krugle","note":"","ucode":"60A7D9189C01BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68651,"discussion_content":"我说的是假设界限已经划分好了。对于商城来说 分为买家端和卖家后台，比如商品服务 是买家端和卖家后台共用吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575214024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157315,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1575106937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575106937","product_id":100037301,"comment_content":"回答问题：<br><br>1.职位不够，很遗憾没实操过。但个人test，臆想啥的挺多。不过这里要补充就太多了。极客现在也有很多课程说这些，就不多赘述了。<br><br>2.除了这十个问题。其实还得补充点。springboot官方文档多次提到“生产就绪”的概念。这也意味着，除了ops，dev也是架构需要高度关注的重点。所以，指标收集，健康检查，外化配置管理等等应该也要算入当下架构的核心问题。","like_count":0},{"had_liked":false,"id":157303,"user_name":"FIGNT","can_delete":false,"product_type":"c1","uid":1540988,"ip_address":"","ucode":"D9DB185AE9E67C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","comment_is_top":false,"comment_ctime":1575105522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575105522","product_id":100037301,"comment_content":"虽然很对不懂，但我知道是干货","like_count":0},{"had_liked":false,"id":157084,"user_name":"张迪","can_delete":false,"product_type":"c1","uid":1104835,"ip_address":"","ucode":"6A5D44999A0FEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/c3/e11adfe8.jpg","comment_is_top":false,"comment_ctime":1575027650,"is_pvip":false,"replies":[{"id":"60273","content":"就是一个代码包，加入你的微服务工程就可以了。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1575030509,"ip_address":"","comment_id":157084,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575027650","product_id":100037301,"comment_content":"分库类库实际上是一个基础 JAR 包，与应用软件部署在一起。。这个 JAR 包是啥？","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476323,"discussion_content":"就是一个代码包，加入你的微服务工程就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575030509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157021,"user_name":"杨杰","can_delete":false,"product_type":"c1","uid":1131823,"ip_address":"","ucode":"74817EA9499843","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/2f/b0b0dd74.jpg","comment_is_top":false,"comment_ctime":1575014106,"is_pvip":false,"replies":[{"id":"60264","content":"事件数据的捕获是从事件表获取的，事件表的表结构一般不会发生变化。事件数据是在处理后写入事件表的。","user_name":"作者回复","user_name_real":"渔","uid":"1316268","ctime":1575025493,"ip_address":"","comment_id":157021,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1575014106","product_id":100037301,"comment_content":"通过事件驱动实现读写分离，提高数据库访问性能。具体实现上是指：每次写数据有变化的时候，把相关的数据变更（或捕获的SQL语句）异步发生给读数据库？如果采用这种模式那如果数据结构变化较频繁该如何处理？","like_count":0,"discussions":[{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476305,"discussion_content":"事件数据的捕获是从事件表获取的，事件表的表结构一般不会发生变化。事件数据是在处理后写入事件表的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575025493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1316268,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/ac/ba1f2494.jpg","nickname":"欧创新","note":"","ucode":"1F5AF0A327197A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65762,"discussion_content":"如果变化频繁的话，日志解析后的数据处理程序就需要同步调整。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575027379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131823,"avatar":"https://static001.geekbang.org/account/avatar/00/11/45/2f/b0b0dd74.jpg","nickname":"杨杰","note":"","ucode":"74817EA9499843","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65742,"discussion_content":"我指的不是事件表，是发生变化的表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575026123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}