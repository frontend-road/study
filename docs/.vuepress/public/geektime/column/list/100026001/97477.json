{"id":97477,"title":"14 | 乘法器：如何像搭乐高一样搭电路（下）？","content":"<p>和学习小学数学一样，学完了加法之后，我们自然而然就要来学习乘法。既然是退回到小学，我们就把问题搞得简单一点，先来看两个4位数的乘法。这里的4位数，当然还是一个二进制数。我们是人类而不是电路，自然还是用列竖式的方式来进行计算。</p><p>十进制中的13乘以9，计算的结果应该是117。我们通过转换成二进制，然后列竖式的办法，来看看整个计算的过程是怎样的。</p><p><img src=\"https://static001.geekbang.org/resource/image/49/4b/498fdfa2dc95631068d65e0ff5769c4b.jpg?wh=2523*939\" alt=\"\"></p><h2>顺序乘法的实现过程</h2><p>从列出竖式的过程中，你会发现，二进制的乘法有个很大的优点，就是这个过程你不需要背九九乘法口诀表了。因为单个位置上，乘数只能是0或者1，所以实际的乘法，就退化成了位移和加法。</p><p>在13×9这个例子里面，被乘数13表示成二进制是1101，乘数9在二进制里面是1001。最右边的个位是1，所以个位乘以被乘数，就是把被乘数1101复制下来。因为二位和四位都是0，所以乘以被乘数都是0，那么保留下来的都是0000。乘数的八位是1，我们仍然需要把被乘数1101复制下来。不过这里和个位位置的单纯复制有一点小小的差别，那就是要把复制好的结果向左侧移三位，然后把四位单独进行乘法加位移的结果，再加起来，我们就得到了最终的计算结果。</p><p>对应到我们之前讲的数字电路和ALU，你可以看到，最后一步的加法，我们可以用上一讲的加法器来实现。乘法因为只有“0”和“1”两种情况，所以可以做成输入输出都是4个开关，中间用1个开关，同时来控制这8个开关的方式，这就实现了二进制下的单位的乘法。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/02/9c/02ae32716bc3bf165d177dfe80d2c09c.jpg?wh=3115*1228\" alt=\"\"></p><center><span class=\"reference\">我们可以用一个开关来决定，下面的输出是完全复制输入，还是将输出全部设置为0</span></center><p>至于位移也不麻烦，我们只要不是直接连线，把正对着的开关之间进行接通，而是斜着错开位置去接就好了。如果要左移一位，就错开一位接线；如果要左移两位，就错开两位接线。</p><p><img src=\"https://static001.geekbang.org/resource/image/e4/95/e4c7ddb75731030930d38adf967b2d95.jpg?wh=3332*1131\" alt=\"\"></p><center><span class=\"reference\">把对应的线路错位连接，就可以起到位移的作用</span></center><p>这样，你会发现，我们并不需要引入任何新的、更复杂的电路，仍然用最基础的电路，只要用不同的接线方式，就能够实现一个“列竖式”的乘法。而且，因为二进制下，只有0和1，也就是开关的开和闭这两种情况，所以我们的计算机也不需要去“背诵”九九乘法口诀表，不需要单独实现一个更复杂的电路，就能够实现乘法。</p><p>为了节约一点开关，也就是晶体管的数量。实际上，像13×9这样两个四位数的乘法，我们不需要把四次单位乘法的结果，用四组独立的开关单独都记录下来，然后再把这四个数加起来。因为这样做，需要很多组开关，如果我们计算一个32位的整数乘法，就要32组开关，太浪费晶体管了。如果我们顺序地来计算，只需要一组开关就好了。</p><p>我们先拿乘数最右侧的个位乘以被乘数，然后把结果写入用来存放计算结果的开关里面，然后，把被乘数左移一位，把乘数右移一位，仍然用乘数去乘以被乘数，然后把结果加到刚才的结果上。反复重复这一步骤，直到不能再左移和右移位置。这样，乘数和被乘数就像两列相向而驶的列车，仅仅需要简单的加法器、一个可以左移一位的电路和一个右移一位的电路，就能完成整个乘法。</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/e9/cb809de19088d08767279715f07482e9.jpg?wh=2571*1142\" alt=\"\"></p><center><span class=\"reference\">乘法器硬件结构示意图</span></center><p>你看这里画的乘法器硬件结构示意图。这里的控制测试，其实就是通过一个时钟信号，来控制左移、右移以及重新计算乘法和加法的时机。我们还是以计算13×9，也就是二进制的1101×1001来具体看。</p><p><img src=\"https://static001.geekbang.org/resource/image/06/71/0615e5e4406617ee6584adbb929f9571.jpeg?wh=2743*2503\" alt=\"\"></p><p>这个计算方式虽然节约电路了，但是也有一个很大的缺点，那就是慢。</p><p>你应该很容易就能发现，在这个乘法器的实现过程里，我们其实就是把乘法展开，变成了“<strong>加法+位移</strong>”来实现。我们用的是4位数，所以要进行4组“位移+加法”的操作。而且这4组操作还不能同时进行。因为<strong>下一组的加法要依赖上一组的加法后的计算结果，下一组的位移也要依赖上一组的位移的结果。这样，整个算法是“顺序”的，每一组加法或者位移的运算都需要一定的时间</strong>。</p><p>所以，最终这个乘法的计算速度，其实和我们要计算的数的位数有关。比如，这里的4位，就需要4次加法。而我们的现代CPU常常要用32位或者是64位来表示整数，那么对应就需要32次或者64次加法。比起4位数，要多花上8倍乃至16倍的时间。</p><p>换个我们在算法和数据结构中的术语来说就是，这样的一个顺序乘法器硬件进行计算的时间复杂度是 O(N)。这里的N，就是乘法的数里面的<strong>位数</strong>。</p><h2>并行加速方法</h2><p>那么，我们有没有办法，把时间复杂度上降下来呢？研究数据结构和算法的时候，我们总是希望能够把O(N)的时间复杂度，降低到O(logN)。办法还真的有。和软件开发里面改算法一样，在涉及CPU和电路的时候，我们可以改电路。</p><p>32位数虽然是32次加法，但是我们可以让很多加法同时进行。回到这一讲开始，我们把位移和乘法的计算结果加到中间结果里的方法，32位整数的乘法，其实就变成了32个整数相加。</p><p>前面顺序乘法器硬件的实现办法，就好像体育比赛里面的<strong>单败淘汰赛</strong>。只有一个擂台会存下最新的计算结果。每一场新的比赛就来一个新的选手，实现一次加法，实现完了剩下的还是原来那个守擂的，直到其余31个选手都上来比过一场。如果一场比赛需要一天，那么一共要比31场，也就是31天。</p><p><img src=\"https://static001.geekbang.org/resource/image/07/ef/07f7b0eedbf1a00fc72be7e2bd0d96ef.jpg?wh=2712*1331\" alt=\"\"></p><center><span class=\"reference\">目前的乘法实现就像是单败淘汰赛</span></center><p>加速的办法，就是把比赛变成像世界杯足球赛那样的淘汰赛，32个球队捉对厮杀，同时开赛。这样一天一下子就淘汰了16支队，也就是说，32个数两两相加后，你可以得到16个结果。后面的比赛也是一样同时开赛捉对厮杀。只需要5天，也就是O(log<sub>2</sub>N)的时间，就能得到计算的结果。但是这种方式要求我们得有16个球场。因为在淘汰赛的第一轮，我们需要16场比赛同时进行。对应到我们CPU的硬件上，就是需要更多的晶体管开关，来放下中间计算结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/66/98/6646b90ea563c6b87dc20bbd81c54b98.jpeg?wh=2816*2156\" alt=\"\"></p><center><span class=\"reference\">通过并联更多的ALU，加上更多的寄存器，我们也能加速乘法</span></center><h2>电路并行</h2><p>上面我们说的并行加速的办法，看起来还是有点儿笨。我们回头来做一个抽象的思考。之所以我们的计算会慢，核心原因其实是“顺序”计算，也就是说，要等前面的计算结果完成之后，我们才能得到后面的计算结果。</p><p>最典型的例子就是我们上一讲讲的加法器。每一个全加器，都要等待上一个全加器，把对应的进入输入结果算出来，才能算下一位的输出。位数越多，越往高位走，等待前面的步骤就越多，这个等待的时间有个专门的名词，叫作<strong>门延迟</strong>（Gate Delay）。</p><p>每通过一个门电路，我们就要等待门电路的计算结果，就是一层的门电路延迟，我们一般给它取一个“T”作为符号。一个全加器，其实就已经有了3T的延迟（进位需要经过3个门电路）。而4位整数，最高位的计算需要等待前面三个全加器的进位结果，也就是要等9T的延迟。如果是64位整数，那就要变成63×3=189T的延迟。这可不是个小数字啊！</p><p>除了门延迟之外，还有一个问题就是<strong>时钟频率</strong>。在上面的顺序乘法计算里面，如果我们想要用更少的电路，计算的中间结果需要保存在寄存器里面，然后等待下一个时钟周期的到来，控制测试信号才能进行下一次移位和加法，这个延迟比上面的门延迟更可观。</p><p>那么，我们有什么办法可以解决这个问题呢？实际上，在我们进行加法的时候，如果相加的两个数是确定的，那高位是否会进位其实也是确定的。对于我们人来说，我们本身去做计算都是顺序执行的，所以要一步一步计算进位。但是，计算机是连结的各种线路。我们不用让计算机模拟人脑的思考方式，来连结线路。</p><p>那怎么才能把线路连结得复杂一点，让高位和低位的计算同时出结果呢？怎样才能让高位不需要等待低位的进位结果，而是把低位的所有输入信号都放进来，直接计算出高位的计算结果和进位结果呢？</p><p>我们只要把进位部分的电路完全展开就好了。我们的半加器到全加器，再到加法器，都是用最基础的门电路组合而成的。门电路的计算逻辑，可以像我们做数学里面的多项式乘法一样完全展开。在展开之后呢，我们可以把原来需要较少的，但是有较多层前后计算依赖关系的门电路，展开成需要较多的，但是依赖关系更少的门电路。</p><p>我在这里画了一个示意图，展示了一下我们加法器。如果我们完全展开电路，高位的进位和计算结果，可以和低位的计算结果同时获得。这个的核心原因是电路是天然并行的，一个输入信号，可以同时传播到所有接通的线路当中。</p><p><img src=\"https://static001.geekbang.org/resource/image/0c/69/0c2c69f9bbd1d8eca36f560cbe092169.jpg?wh=1920*2893\" alt=\"\"></p><center><span class=\"reference\">C4是前4位的计算结果是否进位的门电路表示</span></center><p>如果一个4位整数最高位是否进位，展开门电路图，你会发现，我们只需要3T的延迟就可以拿到是否进位的计算结果。而对于64位的整数，也不会增加门延迟，只是从上往下复制这个电路，接入更多的信号而已。看到没？我们通过把电路变复杂，就解决了延迟的问题。</p><p>这个优化，本质上是利用了电路天然的并行性。电路只要接通，输入的信号自动传播到了所有接通的线路里面，这其实也是硬件和软件最大的不同。</p><p>无论是这里把对应的门电路逻辑进行完全展开以减少门延迟，还是上面的乘法通过并行计算多个位的乘法，都是把我们完成一个计算的电路变复杂了。而电路变复杂了，也就意味着晶体管变多了。</p><p>之前很多同学在我们讨论计算机的性能问题的时候，都提到，为什么晶体管的数量增加可以优化计算机的计算性能。实际上，这里的门电路展开和上面的并行计算乘法都是很好的例子。我们通过更多的晶体管，就可以拿到更低的门延迟，以及用更少的时钟周期完成一个计算指令。</p><h2>总结延伸</h2><p>讲到这里，相信你已经发现，我们通过之前两讲的ALU和门电路，搭建出来了乘法器。如果愿意的话，我们可以把很多在生活中不得不顺序执行的事情，通过简单地连结一下线路，就变成并行执行了。这是因为，硬件电路有一个很大的特点，那就是信号都是实时传输的。</p><p>我们也看到了，通过精巧地设计电路，用较少的门电路和寄存器，就能够计算完成乘法这样相对复杂的运算。是用更少更简单的电路，但是需要更长的门延迟和时钟周期；还是用更复杂的电路，但是更短的门延迟和时钟周期来计算一个复杂的指令，这之间的权衡，其实就是计算机体系结构中RISC和CISC的经典历史路线之争。</p><h2>推荐阅读</h2><p>如果还有什么细节你觉得还没有彻底弄明白，我推荐你看一看《计算机组成与设计：硬件/软件接口》的3.3节。</p><h2>课后思考</h2><p>这一讲里，我为你讲解了乘法器是怎么实现的。那么，请你想一想，如果我们想要用电路实现一个除法器，应该怎么做呢？需要注意一下，除法器除了要计算除法的商之外，还要计算出对应的余数。</p><p>欢迎你在留言区写下你的思考和疑问，和大家一起探讨。你也可以把今天的文章分享给你朋友，和他一起学习和进步。</p>","neighbors":{"left":{"article_title":"13 | 加法器：如何像搭乐高一样搭电路（上）？","id":95883},"right":{"article_title":"15 | 浮点数和定点数（上）：怎么用有限的Bit表示尽可能多的信息？","id":97866}},"comments":[{"had_liked":false,"id":100204,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1559480603,"is_pvip":true,"replies":[{"id":"113185","content":"这里想要解决的问题是，如果电路的“层数”太深，意味着一次运算需要的时钟循环数会太多，这样CPU就会“慢”，所以我们就把原先的电路尽量展开到比较少的层数，虽然这可能意味着电路的晶体管数量的增加。<br><br>具体到这里的加法，是把两个4位的二进制数相加，一个数A，从高位到低位是 A3A2A1A0，第二个数B，从高位到低位是 B3B2B1B0<br><br>我们加完之后的和，应该是 C4C3C2C1C0，变成5位，最高位的C4是代表这两个数相加之后是否会溢出一位需要进位。<br><br>不展开的情况下，我们计算C4，需要先算出A0和B0的和，以及是否进位，然后把是否进位，再和A1和B1相加，在看是否进位，这样一层层上来，这样的话，整个计算就需要至少5层（现在图里的是3层）<br><br>但是实际上我们可以把整个电路图展开，C4这个进位，只有这几种情况：<br><br>1. A3+B3 需要进位（两个都是1）<br>2. A3+B3是1（通过一个一个异或门）并且 A2+B2 进位。这里前面的这个就是图里第二列第一行的P3，后面是同一个节点里面的G2<br>3. A3+B3是1，并且 A2+B2 是1，并且 A1+B1进位。对应的就是第二列第二行的 P3，P2，G1<br>4. A3+B3是1，并且 A2+B2 是1，并且 A1+B1是1，并且A0+B0进位。对应的就是第二列第三行的 P3，P2，P1，G1<br>5. A3+B3是1，并且 A2+B2 是1，并且 A1+B1是1，并且A0+B0是1，并且下面进位上来的标志C0是1，对应的就是第二列第四行的P3，P2，P1，P0，C0<br><br>这5个结果就是图里面的第二列的电路，都是与门。然后任意一个条件满足，C4就需要进位，所以C4是这五个 与门 并联之后的 或门。","user_name":"编辑回复","comment_id":100204,"uid":"1000473","ip_address":"","utype":2,"ctime":1631775771,"user_name_real":"郭蕾"}],"discussion_count":11,"race_medal":1,"score":"323682027803","product_id":100026001,"comment_content":"最后一个的展开电路图，没有看懂","like_count":76,"discussions":[{"author":{"id":1841096,"avatar":"","nickname":"flzs","note":"","ucode":"796344BABDA8B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364489,"discussion_content":"可以这样看：如果c4进位为1，只能是以下四种情况：\n（1）a3与b3都为1（同电路，a3 and  b3）;而不管其他低位的bit数值如何。\n（2）a3与b3如果不都为1，则需要保证至少有一个为1（a3异或b3）,此时如果a2与b2都为1则会产生c4的进位，就不需要管a1,a0,b1,b0的数值。\n（3）如果恰巧a2与b2不都为1，则重复步骤（2）的操作过程，需保证至少有一个为1，此时如果a1与b1同时为1，就会产生c4的进位。不需要管a0与b0的数值。\n（4）最后一个情况是，如果前面的高三位都是1，0的组合，那a0,b0,c0的全加器进位值必须为1","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1617502769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1116508,"avatar":"https://static001.geekbang.org/account/avatar/00/11/09/5c/b5d79d20.jpg","nickname":"李亮亮","note":"","ucode":"290907F930B261","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308630,"discussion_content":"其实不懂也没关系，知道这么干可以实现就行了。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1601013453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241121,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f0/21/7168f973.jpg","nickname":"JStFs","note":"","ucode":"636E85653555DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292494,"discussion_content":"去看北大陆俊林的计算机组成原理的视频，有很详细的讲展开的逻辑","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1595244344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1561842,"avatar":"https://static001.geekbang.org/account/avatar/00/17/d4/f2/98201045.jpg","nickname":"Jason","note":"","ucode":"63A89D36BE72E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4044,"discussion_content":"推荐你去看一看这个视频 https://www.bilibili.com/video/av12666021/?p=20","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1565078008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1400806,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5f/e6/19778e70.jpg","nickname":"Mr.埃克斯","note":"","ucode":"855BE5DFD2BB0B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1561842,"avatar":"https://static001.geekbang.org/account/avatar/00/17/d4/f2/98201045.jpg","nickname":"Jason","note":"","ucode":"63A89D36BE72E8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145560,"discussion_content":"你好，链接似乎失效了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579571015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4044,"ip_address":""},"score":145560,"extra":""},{"author":{"id":1009527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/77/c1310aad.jpg","nickname":"剑衣清风","note":"","ucode":"470CD81F6612F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1400806,"avatar":"https://static001.geekbang.org/account/avatar/00/15/5f/e6/19778e70.jpg","nickname":"Mr.埃克斯","note":"","ucode":"855BE5DFD2BB0B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":339292,"discussion_content":"https://www.bilibili.com/video/av71302902","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1609595023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":145560,"ip_address":""},"score":339292,"extra":""}]},{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452450,"discussion_content":"这里想要解决的问题是，如果电路的“层数”太深，意味着一次运算需要的时钟循环数会太多，这样CPU就会“慢”，所以我们就把原先的电路尽量展开到比较少的层数，虽然这可能意味着电路的晶体管数量的增加。\n\n具体到这里的加法，是把两个4位的二进制数相加，一个数A，从高位到低位是 A3A2A1A0，第二个数B，从高位到低位是 B3B2B1B0\n\n我们加完之后的和，应该是 C4C3C2C1C0，变成5位，最高位的C4是代表这两个数相加之后是否会溢出一位需要进位。\n\n不展开的情况下，我们计算C4，需要先算出A0和B0的和，以及是否进位，然后把是否进位，再和A1和B1相加，在看是否进位，这样一层层上来，这样的话，整个计算就需要至少5层（现在图里的是3层）\n\n但是实际上我们可以把整个电路图展开，C4这个进位，只有这几种情况：\n\n1. A3+B3 需要进位（两个都是1）\n2. A3+B3是1（通过一个一个异或门）并且 A2+B2 进位。这里前面的这个就是图里第二列第一行的P3，后面是同一个节点里面的G2\n3. A3+B3是1，并且 A2+B2 是1，并且 A1+B1进位。对应的就是第二列第二行的 P3，P2，G1\n4. A3+B3是1，并且 A2+B2 是1，并且 A1+B1是1，并且A0+B0进位。对应的就是第二列第三行的 P3，P2，P1，G1\n5. A3+B3是1，并且 A2+B2 是1，并且 A1+B1是1，并且A0+B0是1，并且下面进位上来的标志C0是1，对应的就是第二列第四行的P3，P2，P1，P0，C0\n\n这5个结果就是图里面的第二列的电路，都是与门。然后任意一个条件满足，C4就需要进位，所以C4是这五个 与门 并联之后的 或门。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1631775771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394193,"discussion_content":"这里想要解决的问题是，如果电路的“层数”太深，意味着一次运算需要的时钟循环数会太多，这样CPU就会“慢”，所以我们就把原先的电路尽量展开到比较少的层数，虽然这可能意味着电路的晶体管数量的增加。\n具体到这里的加法，是把两个4位的二进制数相加，一个数A，从高位到低位是 A3A2A1A0，第二个数B，从高位到低位是 B3B2B1B0\n\n我们加完之后的和，应该是 C4C3C2C1C0，变成5位，最高位的C4是代表这两个数相加之后是否会溢出一位需要进位。\n\n不展开的情况下，我们计算C4，需要先算出A0和B0的和，以及是否进位，然后把是否进位，再和A1和B1相加，在看是否进位，这样一层层上来，这样的话，整个计算就需要至少5层（现在图里的是3层）\n\n但是实际上我们可以把整个电路图展开，C4这个进位，只有这几种情况\nA3+B3 需要进位（两个都是1）\nA3+B3是1（通过一个一个异或门）并且 A2+B2 进位。这里前面的这个就是图里第二列第一行的P3，后面是同一个节点里面的G2\nA3+B3是1，并且 A2+B2 是1，并且 A1+B1进位。对应的就是第二列第二行的 P3，P2，G1\nA3+B3是1，并且 A2+B2 是1，并且 A1+B1是1，并且A0+B0进位。对应的就是第二列第三行的 P3，P2，P1，G1\nA3+B3是1，并且 A2+B2 是1，并且 A1+B1是1，并且A0+B0是1，并且下面进位上来的标志C0是1，对应的就是第二列第四行的P3，P2，P1，P0，C0\n这5个结果就是图里面的第二列的电路，都是 与门\n然后任意一个条件满足，C4就需要进位，所以C4是这五个 与门 并联之后的 或门","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1631775660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1599043,"avatar":"https://static001.geekbang.org/account/avatar/00/18/66/43/c3a00cb1.jpg","nickname":"小豪","note":"","ucode":"CC7C68E750610C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583010,"discussion_content":"这里讲的确实很差，花了太多的笔墨去讲道理，会导致读者不知道你在说什么。道可道非常道","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1659873746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2992138,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/a8/0a/791d0f5e.jpg","nickname":"Nolan","note":"","ucode":"5AD365C5154F0E","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570895,"discussion_content":"口诀：与门进位（逻辑结果Y=AB，就跟乘法一样，只有A和B同为1，才能进位），异或门求和","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651987425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2992138,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/a8/0a/791d0f5e.jpg","nickname":"Nolan","note":"","ucode":"5AD365C5154F0E","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570894,"discussion_content":"可以这样看，C4的进位，要么A3和B3都是1，要么两者有一个1，然后由G2的进位补上1，以此类推","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651987238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98263,"user_name":"旺旺","can_delete":false,"product_type":"c1","uid":1213887,"ip_address":"","ucode":"161B267F67EBCA","user_header":"https://static001.geekbang.org/account/avatar/00/12/85/bf/5c5e86bb.jpg","comment_is_top":false,"comment_ctime":1558944768,"is_pvip":false,"replies":[{"id":"35446","content":"总结得很好，其实这也可以认为是CISC和RISC的路线之争最朴素的由来","user_name":"作者回复","comment_id":98263,"uid":"1053568","ip_address":"","utype":1,"ctime":1559118736,"user_name_real":"徐文浩"}],"discussion_count":2,"race_medal":0,"score":"160472734720","product_id":100026001,"comment_content":"从加法到乘法，先是计算过程变得复杂了，步骤变得更多，可以像人一样，逐位计算，但线性带来时间复杂度高。从而可以考虑通过增加线路&#47;硬件复杂度，从空间换时间的思路，加快乘法速度。<br>空间 vs  时间。<br>但CPU毕竟也是很珍贵的资源，晶体管也不宜太多，这中间需要相互平衡。","like_count":37,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451623,"discussion_content":"总结得很好，其实这也可以认为是CISC和RISC的路线之争最朴素的由来","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1559118736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1655940,"avatar":"https://static001.geekbang.org/account/avatar/00/19/44/84/4da14994.jpg","nickname":"呆瓜","note":"","ucode":"C98C7B224D0640","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282354,"discussion_content":"CISC和RISC http://m.elecfans.com/article/741128.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591949878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98228,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1558937482,"is_pvip":false,"replies":[{"id":"35452","content":"👍","user_name":"作者回复","comment_id":98228,"uid":"1053568","ip_address":"","utype":1,"ctime":1559120670,"user_name_real":"徐文浩"}],"discussion_count":3,"race_medal":0,"score":"57393512330","product_id":100026001,"comment_content":"“这之间的权衡，其实就是计算机体系结构中的RISC和CISC的经典历史路线之争”<br>这句才是重点，day14 笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;10929985.html","like_count":13,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451609,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559120670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1340730,"avatar":"https://static001.geekbang.org/account/avatar/00/14/75/3a/a7596c06.jpg","nickname":"大大","note":"","ucode":"3A3DC9AC382651","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":225991,"discussion_content":"@活的潇洒 这种博客至少标明出处，作者。最基本的素质","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1586412785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2354332,"avatar":"https://static001.geekbang.org/account/avatar/00/23/ec/9c/b4acd768.jpg","nickname":"Sarah","note":"","ucode":"FDC8A0D30EAE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552598,"discussion_content":"@大大 同意你的看法，我也觉得这么做不太地道","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645521723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181677,"user_name":"Dylan","can_delete":false,"product_type":"c1","uid":1040236,"ip_address":"","ucode":"58064D0C9F9F5F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/df/6c/5af32271.jpg","comment_is_top":false,"comment_ctime":1582614114,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"53122221666","product_id":100026001,"comment_content":"CPU做除法时和做乘法时是相反的，乘法是右移，除法是左移，乘法做的是加法，除法做的是减法。除数右移，商左移，商左移后最右位补0还是1取决于，本次余数和除数相减后余数最高位，最高位1则，回退；0那么商左移后最右位补1。","like_count":12,"discussions":[{"author":{"id":1040236,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/df/6c/5af32271.jpg","nickname":"Dylan","note":"","ucode":"58064D0C9F9F5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":185340,"discussion_content":"补充一点，初始化的时候，把被除数放在存余数的寄存器上，余数左移，补充低位和被除数对齐，因为两者要做减法，具体操作跟文中乘法器硬件结构示意图很像～～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582618250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98215,"user_name":"WB","can_delete":false,"product_type":"c1","uid":1350663,"ip_address":"","ucode":"E4748BC0ECAF04","user_header":"https://static001.geekbang.org/account/avatar/00/14/9c/07/14f1088b.jpg","comment_is_top":false,"comment_ctime":1558933438,"is_pvip":false,"replies":[{"id":"35453","content":"WB同学你好，<br><br><br>最后一张图是表示如果我们不希望有太多的门延迟的情况下，我们怎么让加法器里面高位的是否获得进位，不用等待前面低位的全加器的计算结果。而不是一个完整的加法器。<br><br>我们重新复习一下 13 和 14 两讲的内容<br>完整的加法器可以由很多个全加器串联起来<br>全加器由两个半加器外加一个或门组成<br><br>半加器由一个与门和一个异或门组成<br><br>半加器只是整个加法器中最基础的一个零件<br><br>","user_name":"作者回复","comment_id":98215,"uid":"1053568","ip_address":"","utype":1,"ctime":1559120904,"user_name_real":"徐文浩"}],"discussion_count":1,"race_medal":0,"score":"48803573694","product_id":100026001,"comment_content":"最后一张图片中的加法器是一个与门和一个或门？？<br>加法器不是由一个与门和一个异或门组成的吗？","like_count":11,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451602,"discussion_content":"WB同学你好，\n\n\n最后一张图是表示如果我们不希望有太多的门延迟的情况下，我们怎么让加法器里面高位的是否获得进位，不用等待前面低位的全加器的计算结果。而不是一个完整的加法器。\n\n我们重新复习一下 13 和 14 两讲的内容\n完整的加法器可以由很多个全加器串联起来\n全加器由两个半加器外加一个或门组成\n\n半加器由一个与门和一个异或门组成\n\n半加器只是整个加法器中最基础的一个零件\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559120904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104220,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1560687958,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23035524438","product_id":100026001,"comment_content":"老师好!前面的意思大概看懂了，最后那个优化版本的加法器看不懂了。。。","like_count":5,"discussions":[{"author":{"id":2976412,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/6a/9c/de8f9280.jpg","nickname":"刚毅坚卓","note":"","ucode":"6D16E587400F6F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573240,"discussion_content":"最后一张图其实是几个全加器并联","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653290453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98112,"user_name":"愤怒的虾干","can_delete":false,"product_type":"c1","uid":1266043,"ip_address":"","ucode":"CEBD1B2BE7BCEE","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/7b/191a2112.jpg","comment_is_top":false,"comment_ctime":1558917102,"is_pvip":false,"replies":[{"id":"35513","content":"全局符号表是虚拟内存内的内存寻址和跳转。<br>页表是虚拟内存和物理内存之间的映射关系。","user_name":"作者回复","comment_id":98112,"uid":"1053568","ip_address":"","utype":1,"ctime":1559129471,"user_name_real":"徐文浩"}],"discussion_count":1,"race_medal":0,"score":"23033753582","product_id":100026001,"comment_content":"老师好，最近在看您推荐的计算机组成公开课，x86保护模式下会使用全局符号描述表寻址，同时操作系统又是使用页表来分配地址、映射物理和逻辑地址。我想问全局符号描述表和页表在寻址上有什么区别与联系？","like_count":5,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451560,"discussion_content":"全局符号表是虚拟内存内的内存寻址和跳转。\n页表是虚拟内存和物理内存之间的映射关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559129471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283158,"user_name":"冰凉的咖啡","can_delete":false,"product_type":"c1","uid":2178037,"ip_address":"","ucode":"611D948FBE4EF4","user_header":"https://static001.geekbang.org/account/avatar/00/21/3b/f5/4931260b.jpg","comment_is_top":false,"comment_ctime":1615600349,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14500502237","product_id":100026001,"comment_content":"晶体管的增加，意味着功耗的增加吧，这也就是为什么移动端的ARM架构的CPU采用的精简指令集，而PC的X86架构却采用的是复杂指令集。","like_count":3},{"had_liked":false,"id":123777,"user_name":"DreamItPossible","can_delete":false,"product_type":"c1","uid":1254103,"ip_address":"","ucode":"232FCE2BB22012","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/d7/fed46140.jpg","comment_is_top":false,"comment_ctime":1565755155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14450657043","product_id":100026001,"comment_content":"除法器算法实现描述：<br>步骤1 从余数寄存器中减去除数寄存器中的值，将结果保存在除数寄存器中；<br>步骤2 测试余数是否小于0<br>如果余数小于0，则执行步骤2b；<br>否则，执行步骤2a；<br>步骤2a 将商寄存器左移，且最低位设置为1；<br>步骤2b 将余数寄存器的值跟除数寄存器的值相加，结果存放在余数寄存器中；将商寄存器左移，最低位设置为0；<br>步骤3 将除数寄存器右移1位<br>步骤4 测试是否第N+1次执行<br>如果是，则结束；否则，跳转到步骤1执行；","like_count":3},{"had_liked":false,"id":162864,"user_name":"Become a architect","can_delete":false,"product_type":"c1","uid":1248265,"ip_address":"","ucode":"6F1C9B183095E4","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/09/a46ad0a6.jpg","comment_is_top":false,"comment_ctime":1576626592,"is_pvip":false,"replies":[{"id":"68668","content":"Become a architect同学，<br><br>你好，并发的思路是一个很直观的思路，并不是发源于乘法器，反而是乘法器设计的时候，可以去想想并发的思路。<br><br>而且这里最后的乘法器，前后的计算其实有依赖关系，我们只是通过分析电路，让部分前后的计算依赖关系解耦合，通过一个更复杂的电路来实现。","user_name":"作者回复","comment_id":162864,"uid":"1053568","ip_address":"","utype":1,"ctime":1581239453,"user_name_real":"徐文浩"}],"discussion_count":1,"race_medal":0,"score":"10166561184","product_id":100026001,"comment_content":"我想现在并发编程的思想起源于此吧。效率确实高了，但是编程的复杂度变高了。","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478167,"discussion_content":"Become a architect同学，\n\n你好，并发的思路是一个很直观的思路，并不是发源于乘法器，反而是乘法器设计的时候，可以去想想并发的思路。\n\n而且这里最后的乘法器，前后的计算其实有依赖关系，我们只是通过分析电路，让部分前后的计算依赖关系解耦合，通过一个更复杂的电路来实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581239453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137101,"user_name":"木心","can_delete":false,"product_type":"c1","uid":1043293,"ip_address":"","ucode":"538A3B9B214BF7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/5d/2467ad6c.jpg","comment_is_top":false,"comment_ctime":1569597903,"is_pvip":false,"replies":[{"id":"52595","content":"木心同学，<br>你好，这是一个问题么？电路并行这部分我已经写了，可以做到没有那么多门延迟的。","user_name":"作者回复","comment_id":137101,"uid":"1053568","ip_address":"","utype":1,"ctime":1569650685,"user_name_real":"徐文浩"}],"discussion_count":2,"race_medal":0,"score":"10159532495","product_id":100026001,"comment_content":"4位加法器的最大门延迟是进位，是2＊4＋1 9个门延迟","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468941,"discussion_content":"木心同学，\n你好，这是一个问题么？电路并行这部分我已经写了，可以做到没有那么多门延迟的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569650685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043293,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/eb/5d/2467ad6c.jpg","nickname":"木心","note":"","ucode":"538A3B9B214BF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22641,"discussion_content":"记录下9是怎么来的哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569663149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135103,"user_name":"J.D.Chi","can_delete":false,"product_type":"c1","uid":1035855,"ip_address":"","ucode":"34812AEF95C7AB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/4f/3a89d29a.jpg","comment_is_top":false,"comment_ctime":1569027261,"is_pvip":false,"replies":[{"id":"52611","content":"J.D.同学，<br><br>你好，是很像的","user_name":"作者回复","comment_id":135103,"uid":"1053568","ip_address":"","utype":1,"ctime":1569653051,"user_name_real":"徐文浩"}],"discussion_count":1,"race_medal":0,"score":"10158961853","product_id":100026001,"comment_content":"“把结果加到刚才的结果上”，想起了编程语言里的 sum = sum + i 之类的语句。","like_count":2,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468049,"discussion_content":"J.D.同学，\n\n你好，是很像的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569653051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353616,"user_name":"X","can_delete":false,"product_type":"c1","uid":1581509,"ip_address":"上海","ucode":"BE05C1D25CE313","user_header":"https://static001.geekbang.org/account/avatar/00/18/21/c5/024e1ef1.jpg","comment_is_top":false,"comment_ctime":1659604032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5954571328","product_id":100026001,"comment_content":"这章看的好吃力了，已经过了两遍了，继续加油。<br>不言放弃，这次要补回大学欠下的东西。","like_count":1},{"had_liked":false,"id":292599,"user_name":"苏格拉没底","can_delete":false,"product_type":"c1","uid":1476300,"ip_address":"","ucode":"282B56405AE1B9","user_header":"https://static001.geekbang.org/account/avatar/00/16/86/cc/d63bb0f2.jpg","comment_is_top":false,"comment_ctime":1620889478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5915856774","product_id":100026001,"comment_content":"就是时间与空间的互换,和软件中的算法一样","like_count":1},{"had_liked":false,"id":288896,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1618755739,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5913723035","product_id":100026001,"comment_content":"可以配套看视频https:&#47;&#47;www.bilibili.com&#47;video&#47;BV1VE411o7nx?p=21","like_count":1},{"had_liked":false,"id":109950,"user_name":"花仙子","can_delete":false,"product_type":"c1","uid":1249216,"ip_address":"","ucode":"9840BF416F1F0F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/c0/e6151cce.jpg","comment_is_top":false,"comment_ctime":1562138839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857106135","product_id":100026001,"comment_content":"对于最后那个优化版本的加法器，我的理解是这样的：每一位都是又全加器组成，而每个全加器由两个半加器和一个或门电路组成，其中一个半加器是计算每个位相加的和进位信息无关，所以这个半加器在各个位上可以同时并行计算，同时计算后每个位会得出相加结果Y和进位信息U，Y与上一位的进位信息W0用另一个半加器相加后得到结果Z和进位信息V，Z为此位最终相加结果，U和V通过或门电路计算可得出最终进位信息W提供给下一位进行同样的计算。这样看来似乎第二个半加器和或门电路计算还是要依赖上一位同样的计算得出的进位信息，貌似这里无法并行。但是真的就此结束了吗？看老师给出的图我的理解是这样的：每一位的运算公式是这样的：W=U||V，Z=（Y+W0）1，V=（Y+W0）2，（请允许我这里用+表示半加器，后缀1表示半加器得到的相加结果，后缀2代表半加器得到的进位信息），而W0=U0||V0，所以有Z=（Y+（U0||V0））1，W=U||（Y+W0）2，这样以来即便是最高位也能得到一个基于各位第一个半加器计算结果的逻辑表达式，对于人类来解这个表达式似乎也没有优化效果，但是正如老师所说电路的天然并行行，我们将这个很长的表达式展开，硬件就可以并行计算很多小步骤，从而得到空间换时间的巨大效率提升。","like_count":1},{"had_liked":false,"id":359336,"user_name":"张无忌","can_delete":false,"product_type":"c1","uid":1222000,"ip_address":"浙江","ucode":"87E5FC2F415774","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/70/d7b70282.jpg","comment_is_top":false,"comment_ctime":1665454307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665454307","product_id":100026001,"comment_content":"1个半加器有2个门电路：异或门+与门，1个全加器由2个半加器和1个或门组成，也就是一个全加器共有5个门，所以没太明白为什么全加器的门延迟是3T，而不是5T。希望老师解答，谢谢！","like_count":0},{"had_liked":false,"id":359265,"user_name":"张无忌","can_delete":false,"product_type":"c1","uid":1222000,"ip_address":"浙江","ucode":"87E5FC2F415774","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/70/d7b70282.jpg","comment_is_top":false,"comment_ctime":1665384047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665384047","product_id":100026001,"comment_content":"“把被乘数左移一位，把乘数右移一位”，那他们两个岂不是错开两位？","like_count":0},{"had_liked":false,"id":353692,"user_name":"X","can_delete":false,"product_type":"c1","uid":1581509,"ip_address":"上海","ucode":"BE05C1D25CE313","user_header":"https://static001.geekbang.org/account/avatar/00/18/21/c5/024e1ef1.jpg","comment_is_top":false,"comment_ctime":1659685798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659685798","product_id":100026001,"comment_content":"弄懂了7788了吧，顺序乘法器、并行乘法器，引出了门延迟和时钟频率带来的性能影响。使用“牺牲空间，追求时间”的方法，提升更多的晶体管，复杂电路的方式，追求更好的计算性能。","like_count":0},{"had_liked":false,"id":353685,"user_name":"X","can_delete":false,"product_type":"c1","uid":1581509,"ip_address":"上海","ucode":"BE05C1D25CE313","user_header":"https://static001.geekbang.org/account/avatar/00/18/21/c5/024e1ef1.jpg","comment_is_top":false,"comment_ctime":1659681074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659681074","product_id":100026001,"comment_content":"最后一个图老师画的应该是加法器的电路图？<br>全加器是一位一位的累加的，每一个进位都需要耗费3个门延迟。如果两个64位的二进制做累加，那么门延迟就需要63 * 3个。<br>除了门延迟之外就是时钟频率，每一次的开闭电路就是一次时钟频率，因为高位需要等低位的进位信息，所以说，对两个64位二进制做加法，需要等待63次进位，也就是说要63个时钟频率，而这个时钟频率是比门延迟和夸张耗时的东西。<br>所以如果单独用全加器做加法运算的话，那么会变得很耗时。需要63 *3 的门延迟还有63个时钟频率。<br>所以我们需要通过复杂电路，让其耗时更短，加法器直接做4位二进制的累加。总体速度快了很多。","like_count":0},{"had_liked":false,"id":353684,"user_name":"X","can_delete":false,"product_type":"c1","uid":1581509,"ip_address":"上海","ucode":"BE05C1D25CE313","user_header":"https://static001.geekbang.org/account/avatar/00/18/21/c5/024e1ef1.jpg","comment_is_top":false,"comment_ctime":1659680053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659680053","product_id":100026001,"comment_content":"看第三遍，终于看懂了一点。<br>继续第四遍……","like_count":0},{"had_liked":false,"id":353352,"user_name":"潮汐","can_delete":false,"product_type":"c1","uid":1042208,"ip_address":"广东","ucode":"F5E4F6DF9CEA9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/20/70a95f94.jpg","comment_is_top":false,"comment_ctime":1659399648,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1659399648","product_id":100026001,"comment_content":"第一遍没看懂，第二遍再读的时候，就明白了每一步每一步的含义，老师讲的太好了","like_count":0},{"had_liked":false,"id":340840,"user_name":"图吐兔","can_delete":false,"product_type":"c1","uid":1167662,"ip_address":"","ucode":"2395E9506CBE0E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d1/2e/d531b29b.jpg","comment_is_top":false,"comment_ctime":1649172671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649172671","product_id":100026001,"comment_content":"c4提前算出来了，但整个计算结果得要c0-c3算完才能得到，这的话整体上不就只少了一个T吗？","like_count":0},{"had_liked":false,"id":338770,"user_name":"憨豆桑","can_delete":false,"product_type":"c1","uid":2828274,"ip_address":"","ucode":"E5EDC12708DA82","user_header":"https://static001.geekbang.org/account/avatar/00/2b/27/f2/50ba2f35.jpg","comment_is_top":false,"comment_ctime":1647707116,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647707116","product_id":100026001,"comment_content":"以前觉得异步的控制电路设计得好，现在觉得同步的设计才是真大哥。","like_count":0},{"had_liked":false,"id":337377,"user_name":"伟大的疯狂","can_delete":false,"product_type":"c1","uid":2678793,"ip_address":"","ucode":"AE05DCF2D6C1FF","user_header":"https://static001.geekbang.org/account/avatar/00/28/e0/09/919e001e.jpg","comment_is_top":false,"comment_ctime":1646795072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646795072","product_id":100026001,"comment_content":"&quot;一个全加器，其实就已经有了 3T 的延迟（进位需要经过 3 个门电路）。而 4 位整数，最高位的计算需要等待前面三个全加器的进位结果，也就是要等 9T 的延迟。如果是 64 位整数，那就要变成 63×3=189T 的延迟。这可不是个小数字啊！&quot;<br>这个地方我看了北大《计算机组成》原理，不知道是不是作者计算不对，对于4位整数，最长的门延迟包括最低位的三个门和高三位的两个门，计算方法为2*4+1=9，那么对于64位整数，应该是64*2+1=129，不是63*3","like_count":0},{"had_liked":false,"id":332980,"user_name":"Prof.Bramble","can_delete":false,"product_type":"c1","uid":2503989,"ip_address":"","ucode":"7641ECE0E6BEDC","user_header":"https://static001.geekbang.org/account/avatar/00/26/35/35/9c5eb2c2.jpg","comment_is_top":false,"comment_ctime":1643910496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643910496","product_id":100026001,"comment_content":"乘法大思路还是倒数第二张图么？电路并行只是优化了原本加法电路串行导致的门延迟么？","like_count":0},{"had_liked":false,"id":295039,"user_name":"张驰","can_delete":false,"product_type":"c1","uid":1216961,"ip_address":"","ucode":"BBFD7F79C3E7EC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI0RWHypVI6QkiaeLxnOs96ZlJShWBDicwBm8fFRP2nkrpyxA03A5jnMNAEZZuS200QFM4w52vG5dwg/132","comment_is_top":false,"comment_ctime":1622192641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622192641","product_id":100026001,"comment_content":"所以各种“门”也不一定必须是两路输入信号，像 C4 有4路输入信号也是可以的是吧？","like_count":0},{"had_liked":false,"id":270221,"user_name":"吃饭睡觉打酱油","can_delete":false,"product_type":"c1","uid":1071668,"ip_address":"","ucode":"95EC98C2B5045B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5a/34/4cbadca6.jpg","comment_is_top":false,"comment_ctime":1608992881,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1608992881","product_id":100026001,"comment_content":"“一个全加器，其实就已经有了 3T 的延迟（进位需要经过 3 个门电路）”，老师，一个全加器不是由两个半加器加一个或门电路组成的么，而一个半加器又由一个异或门电路加一个于门电路成的，这里为什么是3T呢？","like_count":0,"discussions":[{"author":{"id":2222614,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/1fXYkS0UlZUQQtzUpG2TZzVhVZHarfpWT5wjO7iajw959zysQks1vLFM2uQsKnYG3uQAhzenH9LP86goiciaCDNibQ/132","nickname":"Xingyi_Xie","note":"","ucode":"D1849DB8BFB1B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530409,"discussion_content":"半加器中的“异或门”和“于门”可以同时计算，所以一个半加器是1T的门延迟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637070124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1504652,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","nickname":"抱小星","note":"","ucode":"BA7B0DAFDA4AF5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347099,"discussion_content":"进位数经过两个半加器和一个或门电路，一共三个门电路，3T","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612151711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251403,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1601529012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601529012","product_id":100026001,"comment_content":"除法器的实现和乘法器类似，也是通过位移和减法实现，只是除法器的每一位的计算必须依赖高位的结果，无法实现并行计算，这也是除法实现比较复杂的原因","like_count":0},{"had_liked":false,"id":238804,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1596322160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596322160","product_id":100026001,"comment_content":"最后的电路，好像只要与门和或门的输入足够多，三层电路可以求出任意位数加法最后的进位。老师，这个想法是否正确？","like_count":0},{"had_liked":false,"id":231100,"user_name":"d16ug-a1l","can_delete":false,"product_type":"c1","uid":1940100,"ip_address":"","ucode":"6077E36D382214","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/84/bf43d333.jpg","comment_is_top":false,"comment_ctime":1593582625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593582625","product_id":100026001,"comment_content":"”我们只要把进位部分的电路完全展开就好了。“对这个说法不是很懂，是将之前的循环使用同一个乘法器，变成了直接追加新的乘法器进行计算的意思吗？","like_count":0},{"had_liked":false,"id":228930,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1592840326,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592840326","product_id":100026001,"comment_content":"原来乘法器是用乘数的每个位乘以被乘数，得到的结果也称为中间结果，并根据乘数的位来移动这些中间结果，最后将这些问题相加得到的。这个过程只用到了移位和加法操作，只要复用加法器就可以实现。为了提升计算速度，用空间来换时间，就可以用锦标赛模型来并行计算每一位，但这就意味着需要大量寄存器（32位=32+16+8+4+2+1），而且即使是并行计算，也逃不开顺序限制，并行也得分层，最后一层只能等到倒数第二层出结果才知道是否有进位。而且更糟糕的是，门电路延迟和时钟延迟总还是无法避免的。更进一步优化的办法就是将要完成这件事的所有组件拆成最小元素，再重新设计更复杂的电路，这样做可以进一步优化延迟，但就是牺牲了简单性。这就像是嵌入式软件，它比其他应用程序更高效，但开发门槛更高。","like_count":0},{"had_liked":false,"id":226113,"user_name":"呆瓜","can_delete":false,"product_type":"c1","uid":1655940,"ip_address":"","ucode":"C98C7B224D0640","user_header":"https://static001.geekbang.org/account/avatar/00/19/44/84/4da14994.jpg","comment_is_top":false,"comment_ctime":1591953289,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591953289","product_id":100026001,"comment_content":"请问下&quot;这个延迟比上面的门延迟更可观&quot;这句话里面的&quot;可观&quot;是什么意思?<br>是指相比门延迟小还是延迟大?还是更易观察?","like_count":0,"discussions":[{"author":{"id":2976412,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/6a/9c/de8f9280.jpg","nickname":"刚毅坚卓","note":"","ucode":"6D16E587400F6F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573241,"discussion_content":"延迟时间短了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653290548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215857,"user_name":"听雨","can_delete":false,"product_type":"c1","uid":1254493,"ip_address":"","ucode":"252754F9FCFF0C","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","comment_is_top":false,"comment_ctime":1589120591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589120591","product_id":100026001,"comment_content":"老师好，时钟频率那块，为什么要“等待下一个时钟周期的到来，控制测试信号才能进行下一次移位和加法”","like_count":0},{"had_liked":false,"id":205057,"user_name":"咕咕咕","can_delete":false,"product_type":"c1","uid":1388479,"ip_address":"","ucode":"5D35932F7118EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/2f/bf/85b957fc.jpg","comment_is_top":false,"comment_ctime":1586517424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586517424","product_id":100026001,"comment_content":"最后的图是只处理进位的图<br>高位到低位从上往下<br>目的是将进位和计算本位分开达到并行效果","like_count":0},{"had_liked":false,"id":203848,"user_name":"WENMURAN","can_delete":false,"product_type":"c1","uid":1915404,"ip_address":"","ucode":"5D1CE8B41937C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXNhbTULKiakib8lYXrvGF2zPwfedooBzC2EtSv1nt1MwV1KUvTkcJrvCBFvcdwJicnr3OEXnk9GUCg/132","comment_is_top":false,"comment_ctime":1586274497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586274497","product_id":100026001,"comment_content":"乘法器<br>用两个二进制的数为例，先拿乘数最右侧的个位乘以被乘数，然后把结果写入用来存放计算结果的开关里，然后把被乘数左移一位，乘数右移一位，仍然用乘数去乘以被乘数，然后把结果加到刚才的结果上去，反复重复这一步骤，知道不能再左移和右移位置，这样，乘数和被乘数就像两列相向而驶的列车，仅仅需要简单的加法器，和一个可以左移一位的电路和一个右移一位的电路，就能完成整个乘法。<br>降低时间复杂度的方法：并行加速（单败淘汰赛）<br>门延迟和时钟频率，把进位部分的电路完全展开。","like_count":0},{"had_liked":false,"id":192673,"user_name":"杨小松","can_delete":false,"product_type":"c1","uid":1111742,"ip_address":"","ucode":"D89CAA76C60C13","user_header":"https://static001.geekbang.org/account/avatar/00/10/f6/be/e5b04e7d.jpg","comment_is_top":false,"comment_ctime":1584867504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584867504","product_id":100026001,"comment_content":"搭乐高这个比喻很棒，软件设计也是这样子的思想","like_count":0},{"had_liked":false,"id":182009,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1582691747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582691747","product_id":100026001,"comment_content":"老师讲的太好了<br>同时也感受到了老师深厚的功力  和 良苦的用心。<br><br>这一节讲了 乘法器 = 位移 + 加法<br><br>位移： 1. 可以通过改变接线方式来实现位移，但是耗费太多的晶体管，也很慢！<br>         2. 可以通过被乘数左移 乘数右移的方法来逐一进行计算 并保存计算结果 与 下一次移动计算后的结果相加<br><br>加法： 可以用我们上一讲讲到的ALU来实现，但是因为是串连的，顺序执行，速度慢。（有超前加法器）<br><br>基于电路可以天然并行的特点<br>以及 加法器 -&gt; 全加器 -&gt; 半加器 得到 半加器才是 加法的核心，只是不能处理进位<br><br>回顾一下：<br>全加器 = 两个半加器 + 一个或电路<br>半加器 = 一个与电路(进位) + 一个异或电路(当前位结果)<br><br>可以改造电路：<br>通过 半加器中的 与电路  或电路 可以早点拿到 进位结果<br><br>而同时这个电信号也可以触发其他被改造过电路，得到1位 2位 4位 8位 ...所有位的当前位<br><br>从而用比顺序计算更快的速度得到计算结果，而代价就是 更多的晶体管 + 电路改造<br><br>在物理层面上：我们想要更快的速度，就要更复杂的电路，排列更多的晶体管。<br>这也是我们为什么追求更小纳米制程的原因吧<br><br>感受到了电路的魅力 和 人类的智慧<br>真的太强大了<br><br>老师每节课后的问题 都让我脑瓜子嗡嗡的响。","like_count":0},{"had_liked":false,"id":180066,"user_name":"深水蓝","can_delete":false,"product_type":"c1","uid":1637933,"ip_address":"","ucode":"3E3B195DE54DE1","user_header":"https://static001.geekbang.org/account/avatar/00/18/fe/2d/e23fc6ee.jpg","comment_is_top":false,"comment_ctime":1582178129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582178129","product_id":100026001,"comment_content":"如果频率时钟不能提高，CPU资源再多，简单的32位加法也需要3次门延迟。但我们可以通过展开更多的门电路，使得64位甚至128位的加法也只需要3次门延迟。当我们用不上128为这么宽的数位之后，也许就诞生了SIMD了吧，利用128位加法的门电路同时计算4次32位加法？","like_count":0},{"had_liked":false,"id":145913,"user_name":"默默地付出","can_delete":false,"product_type":"c1","uid":1588122,"ip_address":"","ucode":"85D1FC806A7E84","user_header":"https://static001.geekbang.org/account/avatar/00/18/3b/9a/aab5286a.jpg","comment_is_top":false,"comment_ctime":1572401784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572401784","product_id":100026001,"comment_content":"一个全加器，其实就已经有了3T的延迟，为什么只考虑进位的3个门电路（2个与门和1个或门）,半加器中的2个异或门为什么不要考虑？","like_count":0},{"had_liked":false,"id":144820,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1572063260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572063260","product_id":100026001,"comment_content":"---总结---<br>并行化：无论是硬件还是软件层面，并行化首先就是要确认号各个模块之间的依赖关系，找出可最大并行化的分组。<br><br>---问题---<br>1. 请问下老师，移位的错开接线是如何做到的，乘法过程中会不断位移，那不是要一直重新连线？<br>2. 门延迟明白了，时钟频率的问题指的是几个操作实际耗费的时间不同，从而导致一个时钟周期内短指令的空闲期长吗？<br>3. 最后一张图的话，每一位在独立计算时，都需要同时获得前几位所得来的进位信息么？","like_count":0},{"had_liked":false,"id":133662,"user_name":"小广","can_delete":false,"product_type":"c1","uid":1263294,"ip_address":"","ucode":"9738E8DCEF9E3C","user_header":"https://static001.geekbang.org/account/avatar/00/13/46/be/d3040f9e.jpg","comment_is_top":false,"comment_ctime":1568630248,"is_pvip":false,"replies":[{"id":"52629","content":"小广同学，<br><br>你好，谢谢你，的确是笔误了，应该是C0","user_name":"作者回复","user_name_real":"徐文浩","uid":"1053568","ctime":1569657435,"ip_address":"","comment_id":133662,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568630248","product_id":100026001,"comment_content":"徐老师你好，最后那个展开图，第二列的最下面一个运算组件，标注的表达式是&quot;P3*P2*P1*P0*G0&quot;，但是我认为这里是笔误，应该是&quot;P3*P2*P1*P0*C0&quot;，应该把G0改为C0，^_^","like_count":0,"discussions":[{"author":{"id":1053568,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/80/8de66543.jpg","nickname":"徐文浩","note":"","ucode":"1D39AC564172E9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467467,"discussion_content":"小广同学，\n\n你好，谢谢你，的确是笔误了，应该是C0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569657435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121651,"user_name":"小先生","can_delete":false,"product_type":"c1","uid":1055214,"ip_address":"","ucode":"E5F2052E0323C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ee/e395a35e.jpg","comment_is_top":false,"comment_ctime":1565178719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565178719","product_id":100026001,"comment_content":"不太明白老师最后说的“门电路逻辑进行完全展开“，能再详细解释一下吗？","like_count":0},{"had_liked":false,"id":117671,"user_name":"Alery","can_delete":false,"product_type":"c1","uid":1156557,"ip_address":"","ucode":"08F3F49181E67B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/cd/3aff5d57.jpg","comment_is_top":false,"comment_ctime":1564108761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564108761","product_id":100026001,"comment_content":"老师你好，根据最后一个图所示的电路，比如我计算一个 4 位整数最高位是否进位，如上展开门电路图所示，经过的门电路不是更多了吗？文中最后所说的“我们只需要 3T 的延迟就可以拿到是否进位的计算结果”这句话怎么理解呢？","like_count":0},{"had_liked":false,"id":113089,"user_name":"瀚海星尘","can_delete":false,"product_type":"c1","uid":1024461,"ip_address":"","ucode":"90F418299EA3BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/cd/2c513481.jpg","comment_is_top":false,"comment_ctime":1562895746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562895746","product_id":100026001,"comment_content":"有种觉得二进制很优雅的感觉~","like_count":0},{"had_liked":false,"id":103642,"user_name":"庄风","can_delete":false,"product_type":"c1","uid":1267661,"ip_address":"","ucode":"21FC66BA9E7EBB","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/cd/9235341a.jpg","comment_is_top":false,"comment_ctime":1560481422,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1560481422","product_id":100026001,"comment_content":"老师，文中讲到“因为二位和四位都是 0，所以乘以被乘数都是 0，那么保留下来的都是 0000。乘数的八位是 1，我们仍然需要把被乘数1101 复制下来”。但按图上显示，被乘数13是1101，乘数9是1001。不知道是不是我思考不周，上文是否应该改为“因为二位和三位都是 0，所以乘以被乘数都是 0，那么保留下来的都是 0000。乘数的四位是 1，我们仍然需要把被乘数1101 复制下来”。","like_count":0,"discussions":[{"author":{"id":1177177,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f6/59/5d33271d.jpg","nickname":"happy-黑皮","note":"","ucode":"F1B8F18BBAC6FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65132,"discussion_content":"在十进制里从右往左是个位，十位，百位，千位，那在二进制里从右往左应该是个位，二位，四位，八位。老师说的是数位，你说的是顺序位，意思是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574985203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98379,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1558971413,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558971413","product_id":100026001,"comment_content":"大学数字电子技术课程里面也有相应的内容","like_count":0},{"had_liked":false,"id":98213,"user_name":"池小帅","can_delete":false,"product_type":"c1","uid":1451679,"ip_address":"","ucode":"110ECEF7DC82EF","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/9f/8bf0ea1c.jpg","comment_is_top":false,"comment_ctime":1558933018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558933018","product_id":100026001,"comment_content":"真棒","like_count":0}]}