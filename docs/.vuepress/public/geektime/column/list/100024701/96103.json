{"id":96103,"title":"23 | 物理内存管理（上）：会议室管理员如何分配会议室？","content":"<p>前一节，我们讲了如何从项目经理的角度看内存，看到的是虚拟地址空间，这些虚拟的地址，总是要映射到物理的页面。这一节，我们来看，物理的页面是如何管理的。</p><h2>物理内存的组织方式</h2><p>前面咱们讲虚拟内存，涉及物理内存的映射的时候，我们总是把内存想象成它是由连续的一页一页的块组成的。我们可以从0开始对物理页编号，这样每个物理页都会有个页号。</p><p>由于物理地址是连续的，页也是连续的，每个页大小也是一样的。因而对于任何一个地址，只要直接除一下每页的大小，很容易直接算出在哪一页。每个页有一个结构struct page表示，这个结构也是放在一个数组里面，这样根据页号，很容易通过下标找到相应的struct page结构。</p><p>如果是这样，整个物理内存的布局就非常简单、易管理，这就是最经典的<strong>平坦内存模型</strong>（Flat Memory Model）。</p><p>我们讲x86的工作模式的时候，讲过CPU是通过总线去访问内存的，这就是最经典的内存使用方式。</p><p><img src=\"https://static001.geekbang.org/resource/image/fa/9b/fa6c2b6166d02ac37637d7da4e4b579b.jpeg?wh=2144*995\" alt=\"\"></p><p>在这种模式下，CPU也会有多个，在总线的一侧。所有的内存条组成一大片内存，在总线的另一侧，所有的CPU访问内存都要过总线，而且距离都是一样的，这种模式称为<strong>SMP</strong>（Symmetric multiprocessing），即对称多处理器。当然，它也有一个显著的缺点，就是总线会成为瓶颈，因为数据都要走它。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/8f/49/8f158f58dda94ec04b26200073e15449.jpeg?wh=2726*1193\" alt=\"\"></p><p>为了提高性能和可扩展性，后来有了一种更高级的模式，<strong>NUMA</strong>（Non-uniform memory access），非一致内存访问。在这种模式下，内存不是一整块。每个CPU都有自己的本地内存，CPU访问本地内存不用过总线，因而速度要快很多，每个CPU和内存在一起，称为一个NUMA节点。但是，在本地内存不足的情况下，每个CPU都可以去另外的NUMA节点申请内存，这个时候访问延时就会比较长。</p><p>这样，内存被分成了多个节点，每个节点再被分成一个一个的页面。由于页需要全局唯一定位，页还是需要有全局唯一的页号的。但是由于物理内存不是连起来的了，页号也就不再连续了。于是内存模型就变成了非连续内存模型，管理起来就复杂一些。</p><p>这里需要指出的是，NUMA往往是非连续内存模型。而非连续内存模型不一定就是NUMA，有时候一大片内存的情况下，也会有物理内存地址不连续的情况。</p><p>后来内存技术牛了，可以支持热插拔了。这个时候，不连续成为常态，于是就有了稀疏内存模型。</p><h3>节点</h3><p>我们主要解析当前的主流场景，NUMA方式。我们首先要能够表示NUMA节点的概念，于是有了下面这个结构typedef struct pglist_data pg_data_t，它里面有以下的成员变量：</p><ul>\n<li>\n<p>每一个节点都有自己的ID：node_id；</p>\n</li>\n<li>\n<p>node_mem_map就是这个节点的struct page数组，用于描述这个节点里面的所有的页；</p>\n</li>\n<li>\n<p>node_start_pfn是这个节点的起始页号；</p>\n</li>\n<li>\n<p>node_spanned_pages是这个节点中包含不连续的物理内存地址的页面数；</p>\n</li>\n<li>\n<p>node_present_pages是真正可用的物理页面的数目。</p>\n</li>\n</ul><p>例如，64M物理内存隔着一个4M的空洞，然后是另外的64M物理内存。这样换算成页面数目就是，16K个页面隔着1K个页面，然后是另外16K个页面。这种情况下，node_spanned_pages就是33K个页面，node_present_pages就是32K个页面。</p><pre><code>typedef struct pglist_data {\n\tstruct zone node_zones[MAX_NR_ZONES];\n\tstruct zonelist node_zonelists[MAX_ZONELISTS];\n\tint nr_zones;\n\tstruct page *node_mem_map;\n\tunsigned long node_start_pfn;\n\tunsigned long node_present_pages; /* total number of physical pages */\n\tunsigned long node_spanned_pages; /* total size of physical page range, including holes */\n\tint node_id;\n......\n} pg_data_t;\n</code></pre><p>每一个节点分成一个个区域zone，放在数组node_zones里面。这个数组的大小为MAX_NR_ZONES。我们来看区域的定义。</p><pre><code>enum zone_type {\n#ifdef CONFIG_ZONE_DMA\n\tZONE_DMA,\n#endif\n#ifdef CONFIG_ZONE_DMA32\n\tZONE_DMA32,\n#endif\n\tZONE_NORMAL,\n#ifdef CONFIG_HIGHMEM\n\tZONE_HIGHMEM,\n#endif\n\tZONE_MOVABLE,\n\t__MAX_NR_ZONES\n};\n</code></pre><p>ZONE_DMA是指可用于作DMA（Direct Memory Access，直接内存存取）的内存。DMA是这样一种机制：要把外设的数据读入内存或把内存的数据传送到外设，原来都要通过CPU控制完成，但是这会占用CPU，影响CPU处理其他事情，所以有了DMA模式。CPU只需向DMA控制器下达指令，让DMA控制器来处理数据的传送，数据传送完毕再把信息反馈给CPU，这样就可以解放CPU。</p><p>对于64位系统，有两个DMA区域。除了上面说的ZONE_DMA，还有ZONE_DMA32。在这里你大概理解DMA的原理就可以，不必纠结，我们后面会讲DMA的机制。</p><p>ZONE_NORMAL是直接映射区，就是上一节讲的，从物理内存到虚拟内存的内核区域，通过加上一个常量直接映射。</p><p>ZONE_HIGHMEM是高端内存区，就是上一节讲的，对于32位系统来说超过896M的地方，对于64位没必要有的一段区域。</p><p>ZONE_MOVABLE是可移动区域，通过将物理内存划分为可移动分配区域和不可移动分配区域来避免内存碎片。</p><p>这里你需要注意一下，我们刚才对于区域的划分，都是针对物理内存的。</p><p>nr_zones表示当前节点的区域的数量。node_zonelists是备用节点和它的内存区域的情况。前面讲NUMA的时候，我们讲了CPU访问内存，本节点速度最快，但是如果本节点内存不够怎么办，还是需要去其他节点进行分配。毕竟，就算在备用节点里面选择，慢了点也比没有强。</p><p>既然整个内存被分成了多个节点，那pglist_data应该放在一个数组里面。每个节点一项，就像下面代码里面一样：</p><pre><code>struct pglist_data *node_data[MAX_NUMNODES] __read_mostly;\n</code></pre><h3>区域</h3><p>到这里，我们把内存分成了节点，把节点分成了区域。接下来我们来看，一个区域里面是如何组织的。</p><p>表示区域的数据结构zone的定义如下：</p><pre><code>struct zone {\n......\n\tstruct pglist_data\t*zone_pgdat;\n\tstruct per_cpu_pageset __percpu *pageset;\n\n\n\tunsigned long\t\tzone_start_pfn;\n\n\n\t/*\n\t * spanned_pages is the total pages spanned by the zone, including\n\t * holes, which is calculated as:\n\t * \tspanned_pages = zone_end_pfn - zone_start_pfn;\n\t *\n\t * present_pages is physical pages existing within the zone, which\n\t * is calculated as:\n\t *\tpresent_pages = spanned_pages - absent_pages(pages in holes);\n\t *\n\t * managed_pages is present pages managed by the buddy system, which\n\t * is calculated as (reserved_pages includes pages allocated by the\n\t * bootmem allocator):\n\t *\tmanaged_pages = present_pages - reserved_pages;\n\t *\n\t */\n\tunsigned long\t\tmanaged_pages;\n\tunsigned long\t\tspanned_pages;\n\tunsigned long\t\tpresent_pages;\n\n\n\tconst char\t\t*name;\n......\n\t/* free areas of different sizes */\n\tstruct free_area\tfree_area[MAX_ORDER];\n\n\n\t/* zone flags, see below */\n\tunsigned long\t\tflags;\n\n\n\t/* Primarily protects free_area */\n\tspinlock_t\t\tlock;\n......\n} ____cacheline_internodealigned_in_\n</code></pre><p>在一个zone里面，zone_start_pfn表示属于这个zone的第一个页。</p><p>如果我们仔细看代码的注释，可以看到，spanned_pages = zone_end_pfn - zone_start_pfn，也即spanned_pages指的是不管中间有没有物理内存空洞，反正就是最后的页号减去起始的页号。</p><p>present_pages = spanned_pages - absent_pages(pages in holes)，也即present_pages是这个zone在物理内存中真实存在的所有page数目。</p><p>managed_pages = present_pages - reserved_pages，也即managed_pages是这个zone被伙伴系统管理的所有的page数目，伙伴系统的工作机制我们后面会讲。</p><p>per_cpu_pageset用于区分冷热页。什么叫冷热页呢？咱们讲x86体系结构的时候讲过，为了让CPU快速访问段描述符，在CPU里面有段描述符缓存。CPU访问这个缓存的速度比内存快得多。同样对于页面来讲，也是这样的。如果一个页被加载到CPU高速缓存里面，这就是一个热页（Hot Page），CPU读起来速度会快很多，如果没有就是冷页（Cold Page）。由于每个CPU都有自己的高速缓存，因而per_cpu_pageset也是每个CPU一个。</p><h3>页</h3><p>了解了区域zone，接下来我们就到了组成物理内存的基本单位，页的数据结构struct page。这是一个特别复杂的结构，里面有很多的union，union结构是在C语言中被用于同一块内存根据情况保存不同类型数据的一种方式。这里之所以用了union，是因为一个物理页面使用模式有多种。</p><p>第一种模式，要用就用一整页。这一整页的内存，或者直接和虚拟地址空间建立映射关系，我们把这种称为匿名页（Anonymous Page）。或者用于关联一个文件，然后再和虚拟地址空间建立映射关系，这样的文件，我们称为内存映射文件（Memory-mapped File）。</p><p>如果某一页是这种使用模式，则会使用union中的以下变量：</p><ul>\n<li>\n<p>struct address_space *mapping就是用于内存映射，如果是匿名页，最低位为1；如果是映射文件，最低位为0；</p>\n</li>\n<li>\n<p>pgoff_t index是在映射区的偏移量；</p>\n</li>\n<li>\n<p>atomic_t _mapcount，每个进程都有自己的页表，这里指有多少个页表项指向了这个页；</p>\n</li>\n<li>\n<p>struct list_head lru表示这一页应该在一个链表上，例如这个页面被换出，就在换出页的链表中；</p>\n</li>\n<li>\n<p>compound相关的变量用于复合页（Compound Page），就是将物理上连续的两个或多个页看成一个独立的大页。</p>\n</li>\n</ul><p>第二种模式，仅需分配小块内存。有时候，我们不需要一下子分配这么多的内存，例如分配一个task_struct结构，只需要分配小块的内存，去存储这个进程描述结构的对象。为了满足对这种小内存块的需要，Linux系统采用了一种被称为<strong>slab allocator</strong>的技术，用于分配称为slab的一小块内存。它的基本原理是从内存管理模块申请一整块页，然后划分成多个小块的存储池，用复杂的队列来维护这些小块的状态（状态包括：被分配了/被放回池子/应该被回收）。</p><p>也正是因为slab allocator对于队列的维护过于复杂，后来就有了一种不使用队列的分配器slub allocator，后面我们会解析这个分配器。但是你会发现，它里面还是用了很多slab的字眼，因为它保留了slab的用户接口，可以看成slab allocator的另一种实现。</p><p>还有一种小块内存的分配器称为<strong>slob</strong>，非常简单，主要使用在小型的嵌入式系统。</p><p>如果某一页是用于分割成一小块一小块的内存进行分配的使用模式，则会使用union中的以下变量：</p><ul>\n<li>\n<p>s_mem是已经分配了正在使用的slab的第一个对象；</p>\n</li>\n<li>\n<p>freelist是池子中的空闲对象；</p>\n</li>\n<li>\n<p>rcu_head是需要释放的列表。</p>\n</li>\n</ul><pre><code>    struct page {\n    \tunsigned long flags;\n    \tunion {\n    \t\tstruct address_space *mapping;\t\n    \t\tvoid *s_mem;\t\t\t/* slab first object */\n    \t\tatomic_t compound_mapcount;\t/* first tail page */\n    \t};\n    \tunion {\n    \t\tpgoff_t index;\t\t/* Our offset within mapping. */\n    \t\tvoid *freelist;\t\t/* sl[aou]b first free object */\n    \t};\n    \tunion {\n    \t\tunsigned counters;\n    \t\tstruct {\n    \t\t\tunion {\n    \t\t\t\tatomic_t _mapcount;\n    \t\t\t\tunsigned int active;\t\t/* SLAB */\n    \t\t\t\tstruct {\t\t\t/* SLUB */\n    \t\t\t\t\tunsigned inuse:16;\n    \t\t\t\t\tunsigned objects:15;\n    \t\t\t\t\tunsigned frozen:1;\n    \t\t\t\t};\n    \t\t\t\tint units;\t\t\t/* SLOB */\n    \t\t\t};\n    \t\t\tatomic_t _refcount;\n    \t\t};\n    \t};\n    \tunion {\n    \t\tstruct list_head lru;\t/* Pageout list\t */\n    \t\tstruct dev_pagemap *pgmap; \n    \t\tstruct {\t\t/* slub per cpu partial pages */\n    \t\t\tstruct page *next;\t/* Next partial slab */\n    \t\t\tint pages;\t/* Nr of partial slabs left */\n    \t\t\tint pobjects;\t/* Approximate # of objects */\n    \t\t};\n    \t\tstruct rcu_head rcu_head;\n    \t\tstruct {\n    \t\t\tunsigned long compound_head; /* If bit zero is set */\n    \t\t\tunsigned int compound_dtor;\n    \t\t\tunsigned int compound_order;\n    \t\t};\n    \t};\n    \tunion {\n    \t\tunsigned long private;\n    \t\tstruct kmem_cache *slab_cache;\t/* SL[AU]B: Pointer to slab */\n    \t};\n    ......\n    }\n</code></pre><h2>页的分配</h2><p>好了，前面我们讲了物理内存的组织，从节点到区域到页到小块。接下来，我们来看物理内存的分配。</p><p>对于要分配比较大的内存，例如到分配页级别的，可以使用<strong>伙伴系统</strong>（Buddy System）。</p><p>Linux中的内存管理的“页”大小为4KB。把所有的空闲页分组为11个页块链表，每个块链表分别包含很多个大小的页块，有1、2、4、8、16、32、64、128、256、512和1024个连续页的页块。最大可以申请1024个连续页，对应4MB大小的连续内存。每个页块的第一个页的物理地址是该页块大小的整数倍。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/cf/2738c0c98d2ed31cbbe1fdcba01142cf.jpeg?wh=2444*1247\" alt=\"\"></p><p>第i个页块链表中，页块中页的数目为2^i。</p><p>在struct zone里面有以下的定义：</p><pre><code>struct free_area\tfree_area[MAX_ORDER];\n</code></pre><p>MAX_ORDER就是指数。</p><pre><code>#define MAX_ORDER 11\n</code></pre><p>当向内核请求分配(2^(i-1)，2^i]数目的页块时，按照2^i页块请求处理。如果对应的页块链表中没有空闲页块，那我们就在更大的页块链表中去找。当分配的页块中有多余的页时，伙伴系统会根据多余的页块大小插入到对应的空闲页块链表中。</p><p>例如，要请求一个128个页的页块时，先检查128个页的页块链表是否有空闲块。如果没有，则查256个页的页块链表；如果有空闲块的话，则将256个页的页块分成两份，一份使用，一份插入128个页的页块链表中。如果还是没有，就查512个页的页块链表；如果有的话，就分裂为128、128、256三个页块，一个128的使用，剩余两个插入对应页块链表。</p><p>上面这个过程，我们可以在分配页的函数alloc_pages中看到。</p><pre><code>static inline struct page *\nalloc_pages(gfp_t gfp_mask, unsigned int order)\n{\n\treturn alloc_pages_current(gfp_mask, order);\n}\n\n\n/**\n * \talloc_pages_current - Allocate pages.\n *\n *\t@gfp:\n *\t\t%GFP_USER   user allocation,\n *      \t%GFP_KERNEL kernel allocation,\n *      \t%GFP_HIGHMEM highmem allocation,\n *      \t%GFP_FS     don't call back into a file system.\n *      \t%GFP_ATOMIC don't sleep.\n *\t@order: Power of two of allocation size in pages. 0 is a single page.\n *\n *\tAllocate a page from the kernel page pool.  When not in\n *\tinterrupt context and apply the current process NUMA policy.\n *\tReturns NULL when no page can be allocated.\n */\nstruct page *alloc_pages_current(gfp_t gfp, unsigned order)\n{\n\tstruct mempolicy *pol = &amp;default_policy;\n\tstruct page *page;\n......\n\tpage = __alloc_pages_nodemask(gfp, order,\n\t\t\t\tpolicy_node(gfp, pol, numa_node_id()),\n\t\t\t\tpolicy_nodemask(gfp, pol));\n......\n\treturn page;\n}\n</code></pre><p>alloc_pages会调用alloc_pages_current，这里面的注释比较容易看懂了，gfp表示希望在哪个区域中分配这个内存：</p><ul>\n<li>\n<p>GFP_USER用于分配一个页映射到用户进程的虚拟地址空间，并且希望直接被内核或者硬件访问，主要用于一个用户进程希望通过内存映射的方式，访问某些硬件的缓存，例如显卡缓存；</p>\n</li>\n<li>\n<p>GFP_KERNEL用于内核中分配页，主要分配ZONE_NORMAL区域，也即直接映射区；</p>\n</li>\n<li>\n<p>GFP_HIGHMEM，顾名思义就是主要分配高端区域的内存。</p>\n</li>\n</ul><p>另一个参数order，就是表示分配2的order次方个页。</p><p>接下来调用__alloc_pages_nodemask。这是伙伴系统的核心方法。它会调用get_page_from_freelist。这里面的逻辑也很容易理解，就是在一个循环中先看当前节点的zone。如果找不到空闲页，则再看备用节点的zone。</p><pre><code>static struct page *\nget_page_from_freelist(gfp_t gfp_mask, unsigned int order, int alloc_flags,\n\t\t\t\t\t\tconst struct alloc_context *ac)\n{\n......\n\tfor_next_zone_zonelist_nodemask(zone, z, ac-&gt;zonelist, ac-&gt;high_zoneidx, ac-&gt;nodemask) {\n\t\tstruct page *page;\n......\n\t\tpage = rmqueue(ac-&gt;preferred_zoneref-&gt;zone, zone, order,\n\t\t\t\tgfp_mask, alloc_flags, ac-&gt;migratetype);\n......\n}\n</code></pre><p>每一个zone，都有伙伴系统维护的各种大小的队列，就像上面伙伴系统原理里讲的那样。这里调用rmqueue就很好理解了，就是找到合适大小的那个队列，把页面取下来。</p><p>接下来的调用链是rmqueue-&gt;__rmqueue-&gt;__rmqueue_smallest。在这里，我们能清楚看到伙伴系统的逻辑。</p><pre><code>static inline\nstruct page *__rmqueue_smallest(struct zone *zone, unsigned int order,\n\t\t\t\t\t\tint migratetype)\n{\n\tunsigned int current_order;\n\tstruct free_area *area;\n\tstruct page *page;\n\n\n\t/* Find a page of the appropriate size in the preferred list */\n\tfor (current_order = order; current_order &lt; MAX_ORDER; ++current_order) {\n\t\tarea = &amp;(zone-&gt;free_area[current_order]);\n\t\tpage = list_first_entry_or_null(&amp;area-&gt;free_list[migratetype],\n\t\t\t\t\t\t\tstruct page, lru);\n\t\tif (!page)\n\t\t\tcontinue;\n\t\tlist_del(&amp;page-&gt;lru);\n\t\trmv_page_order(page);\n\t\tarea-&gt;nr_free--;\n\t\texpand(zone, page, order, current_order, area, migratetype);\n\t\tset_pcppage_migratetype(page, migratetype);\n\t\treturn page;\n\t}\n\n\n\treturn NULL;\n</code></pre><p>从当前的order，也即指数开始，在伙伴系统的free_area找2^order大小的页块。如果链表的第一个不为空，就找到了；如果为空，就到更大的order的页块链表里面去找。找到以后，除了将页块从链表中取下来，我们还要把多余部分放到其他页块链表里面。expand就是干这个事情的。area–就是伙伴系统那个表里面的前一项，前一项里面的页块大小是当前项的页块大小除以2，size右移一位也就是除以2，list_add就是加到链表上，nr_free++就是计数加1。</p><pre><code>static inline void expand(struct zone *zone, struct page *page,\n\tint low, int high, struct free_area *area,\n\tint migratetype)\n{\n\tunsigned long size = 1 &lt;&lt; high;\n\n\n\twhile (high &gt; low) {\n\t\tarea--;\n\t\thigh--;\n\t\tsize &gt;&gt;= 1;\n......\n\t\tlist_add(&amp;page[size].lru, &amp;area-&gt;free_list[migratetype]);\n\t\tarea-&gt;nr_free++;\n\t\tset_page_order(&amp;page[size], high);\n\t}\n}\n</code></pre><h2>总结时刻</h2><p>对于物理内存的管理的讲解，到这里要告一段落了。这一节我们主要讲了物理内存的组织形式，就像下面图中展示的一样。</p><p>如果有多个CPU，那就有多个节点。每个节点用struct pglist_data表示，放在一个数组里面。</p><p>每个节点分为多个区域，每个区域用struct zone表示，也放在一个数组里面。</p><p>每个区域分为多个页。为了方便分配，空闲页放在struct free_area里面，使用伙伴系统进行管理和分配，每一页用struct page表示。</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/4f/3fa8123990e5ae2c86859f70a8351f4f.jpeg?wh=2623*1711\" alt=\"\"></p><h2>课堂练习</h2><p>伙伴系统是一种非常精妙的实现方式，无论你使用什么语言，请自己实现一个这样的分配系统，说不定哪天你在做某个系统的时候，就用到了。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎你收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习、进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","comments":[{"had_liked":false,"id":97189,"user_name":"why","can_delete":false,"product_type":"c1","uid":1012937,"ip_address":"","ucode":"C9E796E53F6F5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/c9/d3439ca4.jpg","comment_is_top":false,"comment_ctime":1558604953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"216306969753","product_id":100024701,"comment_content":"- 物理内存组织方式<br>    - 每个物理页由 struct page 表示<br>    - 物理页连续, page 放入一个数组中, 称为平坦内存模型<br>    - 多个 CPU 通过总线访问内存, 称为 SMP 对称多处理器(采用平坦内存模型, 总线成为瓶颈)<br>    - 每个 CPU 都有本地内存, 访问内存不用总线, 称为 NUMA 非一致内存访问<br>    - 本地内存称为 NUMA 节点, 本地内存不足可以向其他节点申请<br>    - NUMA 采用非连续内存模型，页号不连续<br>    - 另外若内存支持热插拔，则采用稀疏内存模型<br>- 节点<br>    - 用 pglist_data 表示 NUMA 节点，多个节点信息保存在 node_data 数组中<br>    - pglist_data 包括 id，page 数组,起始页号, 总页数, 可用页数<br>    - 节点分为多个区域 zone, 包括 DMA; 直接映射区; 高端内存区; 可移动区(避免内存碎片)<br>- 区域 zone<br>    - 用 zone 表示; 包含第一个页页号; 区域总页数; 区域实际页数; 被伙伴系统管理的页数; 用 per_cpu_pageset 区分冷热页(热页, 被 CPU 缓存的页)<br>- 页 <br>    - 用 struct page 表示, 有多种使用模式, 因此 page 结构体多由 union 组成<br>    - 使用一整个页: 1) 直接和虚拟地址映射(匿名页); 2) 与文件关联再与虚拟地址映射(内存映射文件)<br>        - page 记录: 标记用于内存映射; 指向该页的页表数; 换出页的链表; 复合页, 用于合成大页;<br>    - 分配小块内存: <br>        - Linux 采用 slab allocator 技术; 申请一整页, 分为多个小块存储池, 用队列维护其状态(较复杂)<br>        - slub allocator 更简单<br>        - slob allocator 用于嵌入式<br>        - page 记录: 第一个 slab 对象; 空闲列表; 待释放列表<br>- 页分配<br>    - 分配较大内存(页级别), 使用伙伴系统<br>    - Linux 把空闲页分组为 11 个页块链表, 链表管理大小不同的页块(页大小 2^i * 4KB)<br>    - 分配大页剩下的内存, 插入对应空闲链表<br>    - alloc_pages-&gt;alloc_pages_current 用 gfp 指定在哪个 zone 分配","like_count":50},{"had_liked":false,"id":96080,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1558322440,"is_pvip":false,"replies":[{"id":"49295","content":"一整个会议室，划分为两个1&#47;2，再划分为四个1&#47;4，两个1&#47;4就是伙伴呀","user_name":"作者回复","comment_id":96080,"uid":"1001590","ip_address":"","utype":1,"ctime":1567610379,"user_name_real":"刘超@网易云"}],"discussion_count":4,"race_medal":0,"score":"65982831880","product_id":100024701,"comment_content":"还是没理解那个“伙伴系统”为何会命名为伙伴系统，没感觉到有“伙伴”的感觉","like_count":15,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450712,"discussion_content":"一整个会议室，划分为两个1/2，再划分为四个1/4，两个1/4就是伙伴呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567610379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1472051,"avatar":"https://static001.geekbang.org/account/avatar/00/16/76/33/928ffd21.jpg","nickname":"AlexS","note":"","ucode":"3DA81A613CE645","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334389,"discussion_content":"来来来，经过一段时间的学习，我有明确的答案了。它为什么叫伙伴系统，伙伴体现在哪。\n一个page block它的buddy是唯一的，它只能和它的唯一buddy组合成大一级的page block。\n\nTwo blocks are buddies if:\n– They have the same size, e.g. b,\n– They are adjacent to each other,\n– the physical address of the first page of the first block is a multiple of 2 x b x PAGE_SIZE. \n这里考虑的是两个buddy合成的新block的首地址要是这个新block的size的整数倍。\n\nA split block can only be merged with its unique buddy block：\n为什么呢？因为每个page block的首页的起始物理地址一定要是page block size的整数倍。\n比如一个page block是16个页，那么这个page block的起始物理地址一定是16*PAGE_SIZE的整数倍。\n比如 order 为0的 page 0,1,2,3。0和1是buddy，1和2就不能是buddy。因为1和2不能merge成 order 为1的 page block，因为起始地址1不是block size 2的整数倍。\n\n下面给出如何找到一个page block的唯一buddy\nTo find the buddy block of a page block __find_buddy_pfn(page_pfn, order)     (mm/internal.h) \n\n * 1) Any buddy B1 will have an order O twin B2 which satisfies\n * the following equation:\n *     B2 = B1 ^ (1 << O)\n * For example, if the starting buddy (buddy2) is #8 its order\n * 1 buddy is #10:\n *     B2 = 8 ^ (1 << 1) = 8 ^ 2 = 10\n * 同样的若是B1是10,它的order 1 buddy B2就是8.\n *     B2 = 10 ^ (1 << 1) = 10 ^ 2 = 8\n","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1607834301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1472051,"avatar":"https://static001.geekbang.org/account/avatar/00/16/76/33/928ffd21.jpg","nickname":"AlexS","note":"","ucode":"3DA81A613CE645","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330479,"discussion_content":"我理解到的是，要128页，128页的area没空闲了，就找256页要一个128页。这样就多了个128页。这个多出来的128页，正好加入到128页的area里。你看是不是“伙伴”，我不够找你要，多出来的我来帮你管。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606633733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002005,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","nickname":"stackWarn","note":"","ucode":"89672E452DEBA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288763,"discussion_content":"在分配的过程中 如果两个128相邻可以凑成256就是伙伴了，放到256的list中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593864742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130656,"user_name":"奔跑的码仔","can_delete":false,"product_type":"c1","uid":1609871,"ip_address":"","ucode":"AB3B02B07B8B8C","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","comment_is_top":false,"comment_ctime":1567502555,"is_pvip":false,"replies":[{"id":"49001","content":"小于就没有了。如果小于没有ZONE_HIGHMEM的话，就会退而求其次，在直接映射区分配，如果分配不到，就说明没有内存了。64位就是直接映射区分配。","user_name":"作者回复","comment_id":130656,"uid":"1001590","ip_address":"","utype":1,"ctime":1567576581,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"35927240923","product_id":100024701,"comment_content":"老师，对于32bit的系统，如果物理内存大小小于896M，那物理内存区域还有ZONE_HIGHMEM吗？您的第26节课讲到内核处理匿名页的缺页中断处理时，会调用alloc_zeroed_user_highpage_movable去高端内存区域分配物理页，对于32bit系统，物理内存小于896M的情况，这时候伙伴系统去哪里分配物理页呢？对于64bit系统，没有高端内存区域，那上述函数去哪里分配高端内存的物理页呢？","like_count":8,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466051,"discussion_content":"小于就没有了。如果小于没有ZONE_HIGHMEM的话，就会退而求其次，在直接映射区分配，如果分配不到，就说明没有内存了。64位就是直接映射区分配。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567576581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155348,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1574680599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18754549783","product_id":100024701,"comment_content":"关键词：物理内存的组织+分配机制。回忆文中的图","like_count":4},{"had_liked":false,"id":119482,"user_name":"江山未","can_delete":false,"product_type":"c1","uid":1090196,"ip_address":"","ucode":"5293DD9482717F","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/94/ae0a60d8.jpg","comment_is_top":false,"comment_ctime":1564618120,"is_pvip":false,"replies":[{"id":"46382","content":"哈哈，以后先看最后的总结图。","user_name":"作者回复","comment_id":119482,"uid":"1001590","ip_address":"","utype":1,"ctime":1566297848,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"18744487304","product_id":100024701,"comment_content":"一边读一边在脑海构想结构关系图，半天不得要领。看到最后这张图才恍然大悟。艾玛，以后先看最后这张图，少分配一点脑细胞了","like_count":4,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460920,"discussion_content":"哈哈，以后先看最后的总结图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566297848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267582,"user_name":"AlexS","can_delete":false,"product_type":"c1","uid":1472051,"ip_address":"","ucode":"3DA81A613CE645","user_header":"https://static001.geekbang.org/account/avatar/00/16/76/33/928ffd21.jpg","comment_is_top":false,"comment_ctime":1607834327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14492736215","product_id":100024701,"comment_content":"来来来，经过一段时间的学习，我有明确的答案了。<br>它为什么叫&quot;伙伴系统&quot;，&quot;伙伴&quot;体现在哪。<br>一个page block它的buddy是唯一的，它只能和它的唯一buddy组合成大一级的page block。<br><br>Two blocks are buddies if:<br>– They have the same size, e.g. b,<br>– They are adjacent to each other,<br>– the physical address of the first page of the first block is a multiple of 2 x b x PAGE_SIZE. <br>这里考虑的是两个buddy合成的新block的首地址要是这个新block的size的整数倍。<br><br>A split block can only be merged with its unique buddy block：<br>为什么呢？因为每个page block的首页的起始物理地址一定要是page block size的整数倍。<br>比如一个page block是16个页，那么这个page block的起始物理地址一定是16*PAGE_SIZE的整数倍。<br>比如 order 为0的 page 0,1,2,3。0和1是buddy，1和2就不能是buddy。因为1和2不能merge成 order 为1的 page block，因为起始地址1不是block size 2的整数倍。<br><br>下面给出如何找到一个page block的唯一buddy<br>To find the buddy block of a page block __find_buddy_pfn(page_pfn, order)     (mm&#47;internal.h) <br><br> * 1) Any buddy B1 will have an order O twin B2 which satisfies<br> * the following equation:<br> *     B2 = B1 ^ (1 &lt;&lt; O)<br> * For example, if the starting buddy (buddy2) is #8 its order<br> * 1 buddy is #10:<br> *     B2 = 8 ^ (1 &lt;&lt; 1) = 8 ^ 2 = 10<br> * 同样的若是B1是10,它的order 1 buddy B2就是8.<br> *     B2 = 10 ^ (1 &lt;&lt; 1) = 10 ^ 2 = 8<br>","like_count":3},{"had_liked":false,"id":113153,"user_name":"oldman","can_delete":false,"product_type":"c1","uid":1133711,"ip_address":"","ucode":"6BACE2832B4429","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/8f/a90b3969.jpg","comment_is_top":false,"comment_ctime":1562903966,"is_pvip":false,"replies":[{"id":"46678","content":"这是物理内存呀。应用程序操作的是虚拟内存呀，虚拟内存大了去了。","user_name":"作者回复","comment_id":113153,"uid":"1001590","ip_address":"","utype":1,"ctime":1566379164,"user_name_real":"刘超@网易云"}],"discussion_count":3,"race_medal":0,"score":"14447805854","product_id":100024701,"comment_content":"老师，我这里有一个疑惑，内存的最大连续页是1024个页，也就是4MB的大小，我们知道在一般的应用程序中，数组都是一连串的内存，那我如果要申请一个大于4MB的数组呢，操作系统会怎么样来分配呢，期待老师解惑。","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458080,"discussion_content":"这是物理内存呀。应用程序操作的是虚拟内存呀，虚拟内存大了去了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566379164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738119,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/85/87/727142bc.jpg","nickname":"MacBao","note":"","ucode":"8CF51C3688C8F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212457,"discussion_content":"64位程序虚拟内存很大，但为什么也有申请失败的时候呢？尤其是申请大块连续内存的时候","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584973452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1738119,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/85/87/727142bc.jpg","nickname":"MacBao","note":"","ucode":"8CF51C3688C8F6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391180,"discussion_content":"映射区增长不了了 or 物理内存不够了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630325141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":212457,"ip_address":""},"score":391180,"extra":""}]}]},{"had_liked":false,"id":96631,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1558482412,"is_pvip":false,"replies":[{"id":"49278","content":"也不是，回收内存的时候，还合并呢","user_name":"作者回复","comment_id":96631,"uid":"1001590","ip_address":"","utype":1,"ctime":1567609474,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"14443384300","product_id":100024701,"comment_content":"伙伴系统的意思就是劫富济贫","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450942,"discussion_content":"也不是，回收内存的时候，还合并呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567609474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174823,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1580402338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170336930","product_id":100024701,"comment_content":"通过本篇文章，主要学习到的知识点：在当前的主流非连续内存模型 NUMA 中，将内存分成了三层（节点 -&gt; 区域 -&gt; 页），方便了对内存的管理；Linux 中的一页大小是 4 KB，其将空闲的页分组成了 11 个链表，当有分配内存的需求时，会从链表（大于等于分配需求，持有快最小的链表）中找出一个空闲的页块进行分配，如果没有找到空闲页块，会去更大页块的链表中进行查找，找到后进行分割等后续处理。","like_count":2},{"had_liked":false,"id":96306,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1558397638,"is_pvip":false,"replies":[{"id":"49290","content":"大小为16个页框的块,其起始地址是16*2^12的倍数.","user_name":"作者回复","comment_id":96306,"uid":"1001590","ip_address":"","utype":1,"ctime":1567610103,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"10148332230","product_id":100024701,"comment_content":"每个页块的第一个页的物理地址是该页块大小的整数倍。怎么理解","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450825,"discussion_content":"大小为16个页框的块,其起始地址是16*2^12的倍数.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567610103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239296,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e9/00/df4d1bab.jpg","nickname":"戒戒","note":"","ucode":"A017E1C7797484","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243712,"discussion_content":"这样的话，不同order的块地址就相当于是“平坦内存模型了”，不知道这么理解对不对？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587557938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339444,"user_name":"王亭亭","can_delete":false,"product_type":"c1","uid":2399333,"ip_address":"","ucode":"8A1382E358220A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjXbIia8iavTicdlGsfuTY1aVqbhN6aCdTib0hrDWYy5U7mdN0lTN9MGfKhvicwjlG0MRLugBAHFibibJ4A/132","comment_is_top":false,"comment_ctime":1648105976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5943073272","product_id":100024701,"comment_content":"free_area的管理很像包里的钱，包里一些1元、2元、4元、8...2的n次方元面额的钱。每次分配内存，就是付钱和找回零钱的过程。","like_count":1},{"had_liked":false,"id":289213,"user_name":"渣渣","can_delete":false,"product_type":"c1","uid":2430777,"ip_address":"","ucode":"0384A5859A9D39","user_header":"https://static001.geekbang.org/account/avatar/00/25/17/39/07243e20.jpg","comment_is_top":false,"comment_ctime":1618918388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5913885684","product_id":100024701,"comment_content":"有个问题请教一下，一个节点的物理内存是怎么划分为DMA，DMA32，NORMAL，HIGHMEM，MOVABLE区域的，是和虚拟内存划分一样按照地址和大小划分的吗？还有每个区域又是怎么按照可移动性分组划分为unmovable，movable，reclaimable的，也是按照地址和大小划分的吗？这个物理内存的划分和虚拟内存的划分有什么联系吗？","like_count":1},{"had_liked":false,"id":245010,"user_name":"Geek_37ea99","can_delete":false,"product_type":"c1","uid":2150142,"ip_address":"","ucode":"4CB85044FB00F6","user_header":"","comment_is_top":false,"comment_ctime":1598780705,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5893748001","product_id":100024701,"comment_content":"想问一下，如果是numa结构，kernel的代码段在哪个cpu节点的内存上？还是每个cpu节点上都有一份copy？","like_count":1,"discussions":[{"author":{"id":1066409,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","nickname":"Lorry","note":"","ucode":"BD4754D0F1D786","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390444,"discussion_content":"我觉得如果是启动的话，哪个CPU分配执行启动指令，就加载到那个CPU里面去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629848123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223169,"user_name":"注意力$","can_delete":false,"product_type":"c1","uid":1142316,"ip_address":"","ucode":"7FB3399A1EAB72","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/2c/e2f3cfc0.jpg","comment_is_top":false,"comment_ctime":1591014865,"is_pvip":false,"replies":[{"id":"83010","content":"跨节点速度慢","user_name":"作者回复","comment_id":223169,"uid":"1001590","ip_address":"","utype":1,"ctime":1591753293,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":1,"score":"5885982161","product_id":100024701,"comment_content":"老师，好多数据安装时都建议关闭numa，主要是觉得numa哪里不好呢","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497036,"discussion_content":"跨节点速度慢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591753293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160852,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1576047170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871014466","product_id":100024701,"comment_content":"&quot;ZONE_NORMAL 是直接映射区，就是上一节讲的，从物理内存到虚拟内存的内核区域，通过加上一个常量直接映射。&quot;  这里讲的有问题，ZONE_NORMAL就是一个普通的可映射的物理内存区域，而不是直接映射区","like_count":1},{"had_liked":false,"id":135258,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1569109913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5864077209","product_id":100024701,"comment_content":"老师，所有节点的可用内存的容量等于伙伴系统可用空间之和吗","like_count":1},{"had_liked":false,"id":128856,"user_name":"奔跑的码仔","can_delete":false,"product_type":"c1","uid":1609871,"ip_address":"","ucode":"AB3B02B07B8B8C","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","comment_is_top":false,"comment_ctime":1566977264,"is_pvip":false,"replies":[{"id":"48752","content":"这三种模型的区别是page不是连续的，对于zone没有影响","user_name":"作者回复","comment_id":128856,"uid":"1001590","ip_address":"","utype":1,"ctime":1567494004,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"5861944560","product_id":100024701,"comment_content":"您好，之前看过一篇文章讲解Linux内存物理模型，里面说到了三种物理模型:平坦型、非连续型、稀疏性，看完本节后，发现基于zone的buddy系统和上面讲解的几种模型的关系，理不清了。不知道，三种物理模型是不是也是基于zone的伙伴系统呢？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465137,"discussion_content":"这三种模型的区别是page不是连续的，对于zone没有影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567494004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96311,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1558397948,"is_pvip":false,"replies":[{"id":"49289","content":"关闭就smp了","user_name":"作者回复","comment_id":96311,"uid":"1001590","ip_address":"","utype":1,"ctime":1567609743,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"5853365244","product_id":100024701,"comment_content":"有些应用会要求关闭numa那么这里numanode就为1吗？这时候是所有CPU共用一个pglist?","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450826,"discussion_content":"关闭就smp了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567609743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360802,"user_name":"│．Sk","can_delete":false,"product_type":"c1","uid":2453415,"ip_address":"北京","ucode":"A2EEB2E9585A77","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/a7/565214bc.jpg","comment_is_top":false,"comment_ctime":1666861907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666861907","product_id":100024701,"comment_content":"老师您好，<br><br>“ZONE_NORMAL 是直接映射区，就是上一节讲的，从物理内存到虚拟内存的内核区域，通过加上一个常量直接映射” <br><br>请问这种说法是否有误，ZONE_NORMAL 应该不仅仅包含虚拟地址空间中的内核部分；应该也包含用户态可分配的物理内存页吧？","like_count":0},{"had_liked":false,"id":360687,"user_name":"一省吾身","can_delete":false,"product_type":"c1","uid":1676631,"ip_address":"北京","ucode":"D902357160BBD9","user_header":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","comment_is_top":false,"comment_ctime":1666761171,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1666761171","product_id":100024701,"comment_content":"本节收获:<br>  小系统通常是UMA.<br>  大系统才会考虑NUMA.<br>  针对不通场景UMA和NUMA各有优劣.<br> zone---&gt;page(向下slab,向上page块,都是为了合理而方便地分配和使用内存)<br> ps:伙伴系统将大量的页组织成不通大小的页块,根据需要快速分配拆分合并,维护相对比较方便.","like_count":0},{"had_liked":false,"id":342055,"user_name":"Geek_8d3e0a","can_delete":false,"product_type":"c1","uid":2743620,"ip_address":"","ucode":"D387929EE2B37B","user_header":"","comment_is_top":false,"comment_ctime":1649993141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649993141","product_id":100024701,"comment_content":"从隔壁操作系统45讲来的，更加理解了！谢谢老师，我一个java的学生也来搞搞内核让自己硬核！","like_count":0},{"had_liked":false,"id":330603,"user_name":"Geek_2ed874","can_delete":false,"product_type":"c1","uid":2887651,"ip_address":"","ucode":"E01E6318676727","user_header":"","comment_is_top":false,"comment_ctime":1642065322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642065322","product_id":100024701,"comment_content":"每一个 zone，都有伙伴系统维护的各种大小的队列，就像上面伙伴系统原理里讲的那样。<br>这一句不太懂，每个zone里面不是一个数组吗？","like_count":0},{"had_liked":false,"id":320569,"user_name":"hhhh","can_delete":false,"product_type":"c1","uid":1256101,"ip_address":"","ucode":"9E87017424B382","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/a5/625c0a2e.jpg","comment_is_top":false,"comment_ctime":1636382530,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636382530","product_id":100024701,"comment_content":"66666666解决了多年的困惑","like_count":0},{"had_liked":false,"id":268332,"user_name":"小j","can_delete":false,"product_type":"c1","uid":1002717,"ip_address":"","ucode":"9A51A83F149422","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/dd/6bd788ca.jpg","comment_is_top":false,"comment_ctime":1608143021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608143021","product_id":100024701,"comment_content":"每个 node（或者说是 pglist_data) 都有zone_dma 的划分。那么每个 node 里的 zone_dma 分别占多少兆？据说 zone_dma 总共才 16MB。是每个 node（pglist_data)里的 zone_dma 是 4MB么？","like_count":0},{"had_liked":false,"id":250838,"user_name":"赵国辉","can_delete":false,"product_type":"c1","uid":1166280,"ip_address":"","ucode":"390196BD3082B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/cb/c8/ff9f3ffb.jpg","comment_is_top":false,"comment_ctime":1601258520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601258520","product_id":100024701,"comment_content":"老师，pglist_data和zone中分别有node_spanned_pages,node_present_pages和spanned_pages, present_pages，这个地方一直不太理解。这几个字段是不是描述的是分配出去的物理内存，没有分配出去的不计算在内？希望老师帮忙解答一下","like_count":0},{"had_liked":false,"id":239036,"user_name":"Ironman","can_delete":false,"product_type":"c1","uid":1995068,"ip_address":"","ucode":"66F3226ACD8570","user_header":"https://static001.geekbang.org/account/avatar/00/1e/71/3c/119f00a9.jpg","comment_is_top":false,"comment_ctime":1596419974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596419974","product_id":100024701,"comment_content":"这几个图画的真好。","like_count":0},{"had_liked":false,"id":220344,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1590224881,"is_pvip":false,"replies":[{"id":"83073","content":"厉害","user_name":"作者回复","comment_id":220344,"uid":"1001590","ip_address":"","utype":1,"ctime":1591785403,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1590224881","product_id":100024701,"comment_content":"看多几遍终于稍微明白点了","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496124,"discussion_content":"厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591785403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206223,"user_name":"沐风","can_delete":false,"product_type":"c1","uid":1106568,"ip_address":"","ucode":"69A096430BC40B","user_header":"https://static001.geekbang.org/account/avatar/00/10/e2/88/d728823e.jpg","comment_is_top":false,"comment_ctime":1586825632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586825632","product_id":100024701,"comment_content":"老师，是每一个区域都有一个free_area结构？还是所有区域都指向同一个free_area结构？","like_count":0},{"had_liked":false,"id":201517,"user_name":"honnkyou","can_delete":false,"product_type":"c1","uid":1026608,"ip_address":"","ucode":"FD5EC4120EE803","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/30/acc91f01.jpg","comment_is_top":false,"comment_ctime":1585797925,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585797925","product_id":100024701,"comment_content":"&quot;从当前的 order，也即指数开始，在伙伴系统的 free_area 找 2^order 大小的页块。如果链表的第一个不为空，就找到了&quot;<br>老师这句中为什么说第一个不为空就找到了呢？不是很明白。","like_count":0,"discussions":[{"author":{"id":1000550,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/66/95976d10.jpg","nickname":"一路向前","note":"","ucode":"853B90DF308425","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298328,"discussion_content":"链表里表示空闲页块，不为空就是有可用的块","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597245536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149083,"user_name":"extraterrestrial！！","can_delete":false,"product_type":"c1","uid":1017987,"ip_address":"","ucode":"74AE07CA68F6B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/GDYkD2X7pXSKUSaUFC8u3TBPaakaibnOBV2NYDc2TNfb8Su9icFMwSod6iaQX5iaGU2gT6xkPuhXeWvY8KaVEZAYzg/132","comment_is_top":false,"comment_ctime":1573138827,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573138827","product_id":100024701,"comment_content":"请教个问题，每个numa节点有自己的内存，这是指物理上分开的内存，还是实际上就一个内存条，被多个核划分了？ 如果是物理上的多个内存，那要怎么给分布在不同节点的内存统一编页号，以及这些内存要怎么分配物理地址？","like_count":0},{"had_liked":false,"id":148673,"user_name":"柳长青","can_delete":false,"product_type":"c1","uid":1716747,"ip_address":"","ucode":"3EA2B7BD5DBCAF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1pMbwZrAl5gVy4FictX9HiaDicYOjRI2E6flxrXLhLTcneF74TowWK6rJW6oKs9iakPl0dqHsWjav0TjK6vyEZTlJA/132","comment_is_top":false,"comment_ctime":1573047501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573047501","product_id":100024701,"comment_content":"老师、提个问题：硬件的缓存是否就在内核态中","like_count":0},{"had_liked":false,"id":142663,"user_name":"冥王星","can_delete":false,"product_type":"c1","uid":1311603,"ip_address":"","ucode":"CA43C381A69736","user_header":"https://static001.geekbang.org/account/avatar/00/14/03/73/38397da1.jpg","comment_is_top":false,"comment_ctime":1571450629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571450629","product_id":100024701,"comment_content":"这里的伙伴系统和tcmalloc的运行原理很像，请问tcmalloc是不是模仿并覆盖了这里的伙伴系统？另外，伙伴系统是实现在内核里面的，还是实现在glibc库里？","like_count":0},{"had_liked":false,"id":98608,"user_name":"Virtue","can_delete":false,"product_type":"c1","uid":1441187,"ip_address":"","ucode":"67B2D1AD06D714","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKbwJ55niaS6Df8BjvKK2ug2jFibCYhicz1lx7GDYOGs9MMgbHJmWoH1DXZAR5TKsESyUz1zsaw4Flew/132","comment_is_top":false,"comment_ctime":1559040041,"is_pvip":false,"replies":[{"id":"35371","content":"赞，常复习常新","user_name":"作者回复","comment_id":98608,"uid":"1001590","ip_address":"","utype":1,"ctime":1559099988,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1559040041","product_id":100024701,"comment_content":"学了进程管理和内存管理，在看前面内核初始化的内容，感觉理解又深刻了点。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451753,"discussion_content":"赞，常复习常新","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559099988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97699,"user_name":"MARK","can_delete":false,"product_type":"c1","uid":1126900,"ip_address":"","ucode":"9F429C9C5FEE6A","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/f4/467cf5d7.jpg","comment_is_top":false,"comment_ctime":1558750975,"is_pvip":false,"replies":[{"id":"35413","content":"一个是CPU，一个是内存，比较绕，多看几遍就好了","user_name":"作者回复","comment_id":97699,"uid":"1001590","ip_address":"","utype":1,"ctime":1559110345,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1558750975","product_id":100024701,"comment_content":"周六打卡，这周的课程让我感觉自己智商欠费😂","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451377,"discussion_content":"一个是CPU，一个是内存，比较绕，多看几遍就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559110345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97169,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1558601581,"is_pvip":false,"replies":[{"id":"34856","content":"不是同一个","user_name":"作者回复","comment_id":97169,"uid":"1001590","ip_address":"","utype":1,"ctime":1558680840,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1558601581","product_id":100024701,"comment_content":"老师, 从这节课我看到 slab slob 和 slub... 这...是同一个吗? ","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451162,"discussion_content":"不是同一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558680840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96687,"user_name":"冷月流光","can_delete":false,"product_type":"c1","uid":1236420,"ip_address":"","ucode":"ECE30450D0A3EA","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/c4/794a0bd0.jpg","comment_is_top":false,"comment_ctime":1558488270,"is_pvip":false,"replies":[{"id":"34861","content":"会合并的","user_name":"作者回复","comment_id":96687,"uid":"1001590","ip_address":"","utype":1,"ctime":1558681070,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1558488270","product_id":100024701,"comment_content":"老师好，伙伴系统的页分配我好像理解了，但是它是怎么回收(回收后要合并吗？)还是没想明白，这个伙伴系统与netty的PoolChunk分配机制有什么异同？<br><br>","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450971,"discussion_content":"会合并的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558681070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96444,"user_name":"bradleyzhou","can_delete":false,"product_type":"c1","uid":1028318,"ip_address":"","ucode":"8DC89079F03A96","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b0/de/0e75d3c2.jpg","comment_is_top":false,"comment_ctime":1558425499,"is_pvip":false,"replies":[{"id":"49285","content":"伙伴系统是对半分割空间","user_name":"作者回复","comment_id":96444,"uid":"1001590","ip_address":"","utype":1,"ctime":1567609636,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1558425499","product_id":100024701,"comment_content":"感觉伙伴系统的命名是说，每次请求内存时，要么是请求到别的伙伴分剩下的内存，要么是自己切好拿走一块，剩下的给将来的伙伴。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450882,"discussion_content":"伙伴系统是对半分割空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567609636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96054,"user_name":"金子菇凉的铁粉小逗","can_delete":false,"product_type":"c1","uid":1000602,"ip_address":"","ucode":"6A2C601F6EEBB5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/9a/c03bea17.jpg","comment_is_top":false,"comment_ctime":1558316814,"is_pvip":false,"replies":[{"id":"49296","content":"是的","user_name":"作者回复","comment_id":96054,"uid":"1001590","ip_address":"","utype":1,"ctime":1567610389,"user_name_real":"刘超@网易云"}],"discussion_count":3,"race_medal":0,"score":"1558316814","product_id":100024701,"comment_content":"Linux可以理解为每页能存4KB吗？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450698,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567610389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1106343,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e1/a7/86ea68a0.jpg","nickname":"baoxin","note":"","ucode":"9CAE39985EF676","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":892,"discussion_content":"4KB应该指的是地址空间，具体能存多少还要乘以位宽，32位系统一般位宽为32，所以容量应该是4KB*32","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562140796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2178501,"avatar":"https://static001.geekbang.org/account/avatar/00/21/3d/c5/f43fa619.jpg","nickname":"🍀柠檬鱼也是鱼","note":"","ucode":"DCF033636465F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1106343,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e1/a7/86ea68a0.jpg","nickname":"baoxin","note":"","ucode":"9CAE39985EF676","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535984,"discussion_content":"不是的，就是指每页存储4KB数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638626759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":892,"ip_address":""},"score":535984,"extra":""}]}]}]}