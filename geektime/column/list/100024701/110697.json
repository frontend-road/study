{"id":110697,"title":"53 | 存储虚拟化（上）：如何建立自己保管的单独档案库？","content":"<p>前面几节，我们讲了CPU和内存的虚拟化。我们知道，完全虚拟化是很慢的，而通过内核的KVM技术和EPT技术，加速虚拟机对于物理CPU和内存的使用，我们称为硬件辅助虚拟化。</p><p>对于一台虚拟机而言，除了要虚拟化CPU和内存，存储和网络也需要虚拟化，存储和网络都属于外部设备，这些外部设备应该如何虚拟化呢？</p><p>当然一种方式还是完全虚拟化。比如，有什么样的硬盘设备或者网卡设备，我们就用qemu模拟一个一模一样的软件的硬盘和网卡设备，这样在虚拟机里面的操作系统看来，使用这些设备和使用物理设备是一样的。当然缺点就是，qemu模拟的设备又是一个翻译官的角色。虽然这个时候虚拟机里面的操作系统，意识不到自己是运行在虚拟机里面的，但是这种每个指令都翻译的方式，实在是太慢了。</p><p>另外一种方式就是，虚拟机里面的操作系统不是一个通用的操作系统，它知道自己是运行在虚拟机里面的，使用的硬盘设备和网络设备都是虚拟的，应该加载特殊的驱动才能运行。这些特殊的驱动往往要通过虚拟机里面和外面配合工作的模式，来加速对于物理存储和网络设备的使用。</p><h2>virtio的基本原理</h2><p>在虚拟化技术的早期，不同的虚拟化技术会针对不同硬盘设备和网络设备实现不同的驱动，虚拟机里面的操作系统也要根据不同的虚拟化技术和物理存储和网络设备，选择加载不同的驱动。但是，由于硬盘设备和网络设备太多了，驱动纷繁复杂。</p><!-- [[[read_end]]] --><p>后来慢慢就形成了一定的标准，这就是<strong>virtio</strong>，就是<strong>虚拟化I/O设备</strong>的意思。virtio负责对于虚拟机提供统一的接口。也就是说，在虚拟机里面的操作系统加载的驱动，以后都统一加载virtio就可以了。</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/33/1e13ffd5ac846c52739291cb489d0233.png?wh=1783*943\" alt=\"\"></p><p>在虚拟机外，我们可以实现不同的virtio的后端，来适配不同的物理硬件设备。那virtio到底长什么样子呢？我们一起来看一看。</p><p>virtio的架构可以分为四层。</p><ul>\n<li>首先，在虚拟机里面的virtio前端，针对不同类型的设备有不同的<strong>驱动程序</strong>，但是接口都是统一的。例如，硬盘就是virtio_blk，网络就是virtio_net。</li>\n<li>其次，在宿主机的qemu里面，实现virtio后端的逻辑，主要就是<strong>操作硬件的设备</strong>。例如通过写一个物理机硬盘上的文件来完成虚拟机写入硬盘的操作。再如向内核协议栈发送一个网络包完成虚拟机对于网络的操作。</li>\n<li>在virtio的前端和后端之间，有一个通信层，里面包含<strong>virtio层</strong>和<strong>virtio-ring层</strong>。virtio这一层实现的是虚拟队列接口，算是前后端通信的桥梁。而virtio-ring则是该桥梁的具体实现。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/2e/f3/2e9ef612f7b80ec9fcd91e200f4946f3.png?wh=1843*1033\" alt=\"\"></p><p>virtio使用virtqueue进行前端和后端的高速通信。不同类型的设备队列数目不同。virtio-net使用两个队列，一个用于接收，另一个用于发送；而 virtio-blk仅使用一个队列。</p><p>如果客户机要向宿主机发送数据，客户机会将数据的buffer添加到virtqueue中，然后通过写入寄存器通知宿主机。这样宿主机就可以从virtqueue 中收到的buffer里面的数据。</p><p>了解了virtio的基本原理，接下来，我们以硬盘写入为例，具体看一下存储虚拟化的过程。</p><h2>初始化阶段的存储虚拟化</h2><p>和咱们在学习CPU的时候看到的一样，Virtio Block Device也是一种类。它的继承关系如下：</p><pre><code>static const TypeInfo device_type_info = {\n    .name = TYPE_DEVICE,\n    .parent = TYPE_OBJECT,\n    .instance_size = sizeof(DeviceState),\n    .instance_init = device_initfn,\n    .instance_post_init = device_post_init,\n    .instance_finalize = device_finalize,\n    .class_base_init = device_class_base_init,\n    .class_init = device_class_init,\n    .abstract = true,\n    .class_size = sizeof(DeviceClass),\n};\n\nstatic const TypeInfo virtio_device_info = {\n    .name = TYPE_VIRTIO_DEVICE,\n    .parent = TYPE_DEVICE,\n    .instance_size = sizeof(VirtIODevice),\n    .class_init = virtio_device_class_init,\n    .instance_finalize = virtio_device_instance_finalize,\n    .abstract = true,\n    .class_size = sizeof(VirtioDeviceClass),\n};\n\nstatic const TypeInfo virtio_blk_info = {\n    .name = TYPE_VIRTIO_BLK,\n    .parent = TYPE_VIRTIO_DEVICE,\n    .instance_size = sizeof(VirtIOBlock),\n    .instance_init = virtio_blk_instance_init,\n    .class_init = virtio_blk_class_init,\n};\n\nstatic void virtio_register_types(void)\n{\n    type_register_static(&amp;virtio_blk_info);\n}\n\ntype_init(virtio_register_types)\n</code></pre><p>Virtio Block Device这种类的定义是有多层继承关系的。TYPE_VIRTIO_BLK的父类是TYPE_VIRTIO_DEVICE，TYPE_VIRTIO_DEVICE的父类是TYPE_DEVICE，TYPE_DEVICE的父类是TYPE_OBJECT。到头了。</p><p>type_init用于注册这种类。这里面每一层都有class_init，用于从TypeImpl生产xxxClass。还有instance_init，可以将xxxClass初始化为实例。</p><p>在TYPE_VIRTIO_BLK层的class_init函数virtio_blk_class_init中，定义了DeviceClass的realize函数为virtio_blk_device_realize，这一点在<a href=\"https://time.geekbang.org/column/article/109335\">CPU</a>那一节也有类似的结构。</p><pre><code>static void virtio_blk_device_realize(DeviceState *dev, Error **errp)\n{\n    VirtIODevice *vdev = VIRTIO_DEVICE(dev);\n    VirtIOBlock *s = VIRTIO_BLK(dev);\n    VirtIOBlkConf *conf = &amp;s-&gt;conf;\n......\n    blkconf_blocksizes(&amp;conf-&gt;conf);\n    virtio_blk_set_config_size(s, s-&gt;host_features);\n    virtio_init(vdev, &quot;virtio-blk&quot;, VIRTIO_ID_BLOCK, s-&gt;config_size);\n    s-&gt;blk = conf-&gt;conf.blk;\n    s-&gt;rq = NULL;\n    s-&gt;sector_mask = (s-&gt;conf.conf.logical_block_size / BDRV_SECTOR_SIZE) - 1;\n    for (i = 0; i &lt; conf-&gt;num_queues; i++) {\n        virtio_add_queue(vdev, conf-&gt;queue_size, virtio_blk_handle_output);\n    }\n    virtio_blk_data_plane_create(vdev, conf, &amp;s-&gt;dataplane, &amp;err);\n    s-&gt;change = qemu_add_vm_change_state_handler(virtio_blk_dma_restart_cb, s);\n    blk_set_dev_ops(s-&gt;blk, &amp;virtio_block_ops, s);\n    blk_set_guest_block_size(s-&gt;blk, s-&gt;conf.conf.logical_block_size);\n    blk_iostatus_enable(s-&gt;blk);\n}\n</code></pre><p>在virtio_blk_device_realize函数中，我们先是通过virtio_init初始化VirtIODevice结构。</p><pre><code>void virtio_init(VirtIODevice *vdev, const char *name,\n                 uint16_t device_id, size_t config_size)\n{\n    BusState *qbus = qdev_get_parent_bus(DEVICE(vdev));\n    VirtioBusClass *k = VIRTIO_BUS_GET_CLASS(qbus);\n    int i;\n    int nvectors = k-&gt;query_nvectors ? k-&gt;query_nvectors(qbus-&gt;parent) : 0;\n\n    if (nvectors) {\n        vdev-&gt;vector_queues =\n            g_malloc0(sizeof(*vdev-&gt;vector_queues) * nvectors);\n    }\n    vdev-&gt;device_id = device_id;\n    vdev-&gt;status = 0;\n    atomic_set(&amp;vdev-&gt;isr, 0);\n    vdev-&gt;queue_sel = 0;\n    vdev-&gt;config_vector = VIRTIO_NO_VECTOR;\n    vdev-&gt;vq = g_malloc0(sizeof(VirtQueue) * VIRTIO_QUEUE_MAX);\n    vdev-&gt;vm_running = runstate_is_running();\n    vdev-&gt;broken = false;\n    for (i = 0; i &lt; VIRTIO_QUEUE_MAX; i++) {\n        vdev-&gt;vq[i].vector = VIRTIO_NO_VECTOR;\n        vdev-&gt;vq[i].vdev = vdev;\n        vdev-&gt;vq[i].queue_index = i;\n    }\n    vdev-&gt;name = name;\n    vdev-&gt;config_len = config_size;\n    if (vdev-&gt;config_len) {\n        vdev-&gt;config = g_malloc0(config_size);\n    } else {\n        vdev-&gt;config = NULL;\n    }\n    vdev-&gt;vmstate = qemu_add_vm_change_state_handler(virtio_vmstate_change,\n                                                     vdev);\n    vdev-&gt;device_endian = virtio_default_endian();\n    vdev-&gt;use_guest_notifier_mask = true;\n}\n</code></pre><p>从virtio_init中可以看出，VirtIODevice结构里面有一个VirtQueue数组，这就是virtio前端和后端互相传数据的队列，最多VIRTIO_QUEUE_MAX个。</p><p>我们回到virtio_blk_device_realize函数。接下来，根据配置的队列数目num_queues，对于每个队列都调用virtio_add_queue来初始化队列。</p><pre><code>VirtQueue *virtio_add_queue(VirtIODevice *vdev, int queue_size,\n                            VirtIOHandleOutput handle_output)\n{\n    int i;\n    vdev-&gt;vq[i].vring.num = queue_size;\n    vdev-&gt;vq[i].vring.num_default = queue_size;\n    vdev-&gt;vq[i].vring.align = VIRTIO_PCI_VRING_ALIGN;\n    vdev-&gt;vq[i].handle_output = handle_output;\n    vdev-&gt;vq[i].handle_aio_output = NULL;\n\n    return &amp;vdev-&gt;vq[i];\n}\n</code></pre><p>在每个VirtQueue中，都有一个vring，用来维护这个队列里面的数据；另外还有一个函数virtio_blk_handle_output，用于处理数据写入，这个函数我们后面会用到。</p><p>至此，VirtIODevice，VirtQueue，vring之间的关系如下图所示。这是在qemu里面的对应关系，请你记好，后面我们还能看到类似的结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/e1/6d/e18dae0a5951392c4a8e8630e53a616d.jpg?wh=2263*1741\" alt=\"\"></p><h2>qemu启动过程中的存储虚拟化</h2><p>初始化过程解析完毕以后，我们接下来从qemu的启动过程看起。</p><p>对于硬盘的虚拟化，qemu的启动参数里面有关的是下面两行：</p><pre><code>-drive file=/var/lib/nova/instances/1f8e6f7e-5a70-4780-89c1-464dc0e7f308/disk,if=none,id=drive-virtio-disk0,format=qcow2,cache=none\n-device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x4,drive=drive-virtio-disk0,id=virtio-disk0,bootindex=1\n</code></pre><p>其中，第一行指定了宿主机硬盘上的一个文件，文件的格式是qcow2，这个格式我们这里不准备解析它，你只要明白，对于宿主机上的一个文件，可以被qemu模拟称为客户机上的一块硬盘就可以了。</p><p>而第二行说明了，使用的驱动是virtio-blk驱动。</p><pre><code>configure_blockdev(&amp;bdo_queue, machine_class, snapshot);\n</code></pre><p>在qemu启动的main函数里面，初始化块设备，是通过configure_blockdev调用开始的。</p><pre><code>static void configure_blockdev(BlockdevOptionsQueue *bdo_queue, MachineClass *machine_class, int snapshot)\n{\n......\n    if (qemu_opts_foreach(qemu_find_opts(&quot;drive&quot;), drive_init_func,\n                          &amp;machine_class-&gt;block_default_type, &amp;error_fatal)) {\n.....\n    }\n}\n\nstatic int drive_init_func(void *opaque, QemuOpts *opts, Error **errp)\n{\n    BlockInterfaceType *block_default_type = opaque;\n    return drive_new(opts, *block_default_type, errp) == NULL;\n}\n</code></pre><p>在configure_blockdev中，我们能看到对于drive这个参数的解析，并且初始化这个设备要调用drive_init_func函数，这里面会调用drive_new创建一个设备。</p><pre><code>DriveInfo *drive_new(QemuOpts *all_opts, BlockInterfaceType block_default_type, Error **errp)\n{\n    const char *value;\n    BlockBackend *blk;\n    DriveInfo *dinfo = NULL;\n    QDict *bs_opts;\n    QemuOpts *legacy_opts;\n    DriveMediaType media = MEDIA_DISK;\n    BlockInterfaceType type;\n    int max_devs, bus_id, unit_id, index;\n    const char *werror, *rerror;\n    bool read_only = false;\n    bool copy_on_read;\n    const char *filename;\n    Error *local_err = NULL;\n    int i;\n......\n    legacy_opts = qemu_opts_create(&amp;qemu_legacy_drive_opts, NULL, 0,\n                                   &amp;error_abort);\n......\n    /* Add virtio block device */\n    if (type == IF_VIRTIO) {\n        QemuOpts *devopts;\n        devopts = qemu_opts_create(qemu_find_opts(&quot;device&quot;), NULL, 0,\n                                   &amp;error_abort);\n        qemu_opt_set(devopts, &quot;driver&quot;, &quot;virtio-blk-pci&quot;, &amp;error_abort);\n        qemu_opt_set(devopts, &quot;drive&quot;, qdict_get_str(bs_opts, &quot;id&quot;),\n                     &amp;error_abort);\n    }\n\n    filename = qemu_opt_get(legacy_opts, &quot;file&quot;);\n......\n    /* Actual block device init: Functionality shared with blockdev-add */\n    blk = blockdev_init(filename, bs_opts, &amp;local_err);\n......\n    /* Create legacy DriveInfo */\n    dinfo = g_malloc0(sizeof(*dinfo));\n    dinfo-&gt;opts = all_opts;\n\n    dinfo-&gt;type = type;\n    dinfo-&gt;bus = bus_id;\n    dinfo-&gt;unit = unit_id;\n\n    blk_set_legacy_dinfo(blk, dinfo);\n\n    switch(type) {\n    case IF_IDE:\n    case IF_SCSI:\n    case IF_XEN:\n    case IF_NONE:\n        dinfo-&gt;media_cd = media == MEDIA_CDROM;\n        break;\n    default:\n        break;\n    }\n......\n}\n</code></pre><p>在drive_new里面，会解析qemu的启动参数。对于virtio来讲，会解析device参数，把driver设置为virtio-blk-pci；还会解析file参数，就是指向那个宿主机上的文件。</p><p>接下来，drive_new会调用blockdev_init，根据参数进行初始化，最后会创建一个DriveInfo来管理这个设备。</p><p>我们重点来看blockdev_init。在这里面，我们发现，如果file不为空，则应该调用blk_new_open打开宿主机上的硬盘文件，返回的结果是BlockBackend，对应我们上面讲原理的时候的virtio的后端。</p><pre><code>BlockBackend *blk_new_open(const char *filename, const char *reference,\n                           QDict *options, int flags, Error **errp)\n{\n    BlockBackend *blk;\n    BlockDriverState *bs;\n    uint64_t perm = 0;\n......\n    blk = blk_new(perm, BLK_PERM_ALL);\n    bs = bdrv_open(filename, reference, options, flags, errp);\n    blk-&gt;root = bdrv_root_attach_child(bs, &quot;root&quot;, &amp;child_root,\n                                       perm, BLK_PERM_ALL, blk, errp);\n    return blk;\n}\n</code></pre><p>接下来的调用链为：bdrv_open-&gt;bdrv_open_inherit-&gt;bdrv_open_common.</p><pre><code>static int bdrv_open_common(BlockDriverState *bs, BlockBackend *file,\n                            QDict *options, Error **errp)\n{\n    int ret, open_flags;\n    const char *filename;\n    const char *driver_name = NULL;\n    const char *node_name = NULL;\n    const char *discard;\n    QemuOpts *opts;\n    BlockDriver *drv;\n    Error *local_err = NULL;\n......\n    drv = bdrv_find_format(driver_name);\n......\n    ret = bdrv_open_driver(bs, drv, node_name, options, open_flags, errp);\n......\n}\n\nstatic int bdrv_open_driver(BlockDriverState *bs, BlockDriver *drv,\n                            const char *node_name, QDict *options,\n                            int open_flags, Error **errp)\n{\n......\n    bs-&gt;drv = drv;\n    bs-&gt;read_only = !(bs-&gt;open_flags &amp; BDRV_O_RDWR);\n    bs-&gt;opaque = g_malloc0(drv-&gt;instance_size);\n\n    if (drv-&gt;bdrv_open) {\n        ret = drv-&gt;bdrv_open(bs, options, open_flags, &amp;local_err);\n    } \n......\n}\n</code></pre><p>在bdrv_open_common中，根据硬盘文件的格式，得到BlockDriver。因为虚拟机的硬盘文件格式有很多种，qcow2是一种，raw是一种，vmdk是一种，各有优缺点，启动虚拟机的时候，可以自由选择。</p><p>对于不同的格式，打开的方式不一样，我们拿qcow2来解析。它的BlockDriver定义如下：</p><pre><code>BlockDriver bdrv_qcow2 = {\n    .format_name        = &quot;qcow2&quot;,\n    .instance_size      = sizeof(BDRVQcow2State),\n    .bdrv_probe         = qcow2_probe,\n    .bdrv_open          = qcow2_open,\n    .bdrv_close         = qcow2_close,\n......\n    .bdrv_snapshot_create   = qcow2_snapshot_create,\n    .bdrv_snapshot_goto     = qcow2_snapshot_goto,\n    .bdrv_snapshot_delete   = qcow2_snapshot_delete,\n    .bdrv_snapshot_list     = qcow2_snapshot_list,\n    .bdrv_snapshot_load_tmp = qcow2_snapshot_load_tmp,\n    .bdrv_measure           = qcow2_measure,\n    .bdrv_get_info          = qcow2_get_info,\n    .bdrv_get_specific_info = qcow2_get_specific_info,\n\n    .bdrv_save_vmstate    = qcow2_save_vmstate,\n    .bdrv_load_vmstate    = qcow2_load_vmstate,\n\n    .supports_backing           = true,\n    .bdrv_change_backing_file   = qcow2_change_backing_file,\n\n    .bdrv_refresh_limits        = qcow2_refresh_limits,\n......\n};\n</code></pre><p>根据上面的定义，对于qcow2来讲，bdrv_open调用的是qcow2_open。</p><pre><code>static int qcow2_open(BlockDriverState *bs, QDict *options, int flags,\n                      Error **errp)\n{\n    BDRVQcow2State *s = bs-&gt;opaque;\n    QCow2OpenCo qoc = {\n        .bs = bs,\n        .options = options,\n        .flags = flags,\n        .errp = errp,\n        .ret = -EINPROGRESS\n    };\n\n    bs-&gt;file = bdrv_open_child(NULL, options, &quot;file&quot;, bs, &amp;child_file,\n                               false, errp);\n    qemu_coroutine_enter(qemu_coroutine_create(qcow2_open_entry, &amp;qoc));\n......\n}\n</code></pre><p>在qcow2_open中，我们会通过qemu_coroutine_enter进入一个协程coroutine。什么叫协程呢？我们可以简单地将它理解为用户态自己实现的线程。</p><p>前面咱们讲线程的时候说过，如果一个程序想实现并发，可以创建多个线程，但是线程是一个内核的概念，创建的每一个线程内核都能看到，内核的调度也是以线程为单位的。这对于普通的进程没有什么问题，但是对于qemu这种虚拟机，如果在用户态和内核态切换来切换去，由于还涉及虚拟机的状态，代价比较大。</p><p>但是，qemu的设备也是需要多线程能力的，怎么办呢？我们就在用户态实现一个类似线程的东西，也就是协程，用于实现并发，并且不被内核看到，调度全部在用户态完成。</p><p>从后面的读写过程可以看出，协程在后端经常使用。这里打开一个qcow2文件就是使用一个协程，创建一个协程和创建一个线程很像，也需要指定一个函数来执行，qcow2_open_entry就是协程的函数。</p><pre><code>static void coroutine_fn qcow2_open_entry(void *opaque)\n{\n    QCow2OpenCo *qoc = opaque;\n    BDRVQcow2State *s = qoc-&gt;bs-&gt;opaque;\n\n    qemu_co_mutex_lock(&amp;s-&gt;lock);\n    qoc-&gt;ret = qcow2_do_open(qoc-&gt;bs, qoc-&gt;options, qoc-&gt;flags, qoc-&gt;errp);\n    qemu_co_mutex_unlock(&amp;s-&gt;lock);\n}\n</code></pre><p>我们可以看到，qcow2_open_entry函数前面有一个coroutine_fn，说明它是一个协程函数。在qcow2_do_open中，qcow2_do_open根据qcow2的格式打开硬盘文件。这个格式<a href=\"https://github.com/qemu/qemu/blob/master/docs/interop/qcow2.txt\">官网</a>就有，我们这里就不花篇幅解析了。</p><h2>总结时刻</h2><p>我们这里来总结一下，存储虚拟化的过程分为前端、后端和中间的队列。</p><ul>\n<li>前端有前端的块设备驱动Front-end driver，在客户机的内核里面，它符合普通设备驱动的格式，对外通过VFS暴露文件系统接口给客户机里面的应用。这一部分这一节我们没有讲，放在下一节解析。</li>\n<li>后端有后端的设备驱动Back-end driver，在宿主机的qemu进程中，当收到客户机的写入请求的时候，调用文件系统的write函数，写入宿主机的VFS文件系统，最终写到物理硬盘设备上的qcow2文件。</li>\n<li>中间的队列用于前端和后端之间传输数据，在前端的设备驱动和后端的设备驱动，都有类似的数据结构virt-queue来管理这些队列，这一部分这一节我们也没有讲，也放到下一节解析。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/1f/4b/1f0c3043a11d6ea1a802f7d0f3b0b34b.jpg?wh=2146*2173\" alt=\"\"></p><h2>课堂练习</h2><p>对于qemu-kvm来讲，qcow2是一种常见的文件格式。它有精妙的格式设计，从而适应虚拟化的场景，请你研究一下这个文件格式。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","comments":[{"had_liked":false,"id":131466,"user_name":"潇是潇洒的洒","can_delete":false,"product_type":"c1","uid":1250652,"ip_address":"","ucode":"CB950E0A655AA0","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/5c/aa3f8306.jpg","comment_is_top":false,"comment_ctime":1567759453,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"143301680221","product_id":100024701,"comment_content":"留个爪，虽然大部分都看不懂，但是我的初心是了解操作系统的概念，所以第一遍不关注细节，构建系统的大体框架，知道有这么个事儿就好了，好像看到这里，还能坚持的人就很少了，留个言，鼓励自己一下，希望再回来来看的时候，自己会多一些明悟。","like_count":34,"discussions":[{"author":{"id":1229171,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c1/73/a7da4215.jpg","nickname":"盖满京","note":"","ucode":"B22D394FC4327B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535220,"discussion_content":"你说的对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638371101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133967,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1568708476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14453610364","product_id":100024701,"comment_content":"老师他这个协程和go的协程对比有什么异同？","like_count":3},{"had_liked":false,"id":237837,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1007254,"ip_address":"","ucode":"E28F2602BA25DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","comment_is_top":false,"comment_ctime":1595984912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10185919504","product_id":100024701,"comment_content":"赞，之前只是粗略读了一遍，留个大概印象。最近在优化虚拟机存储性能，重新拜读，受益匪浅，理解深刻了很多。","like_count":2},{"had_liked":false,"id":307344,"user_name":"Geek_c2c8d1","can_delete":false,"product_type":"c1","uid":2325145,"ip_address":"","ucode":"60B48691C86D6C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKkF14X58pdmTgBWwWzxVicJ0LQjNXiceL3xSj73eC4AZheyIPtf8tyqTicbP4VXia1TmDlm9rlCNCuDQ/132","comment_is_top":false,"comment_ctime":1629037106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5924004402","product_id":100024701,"comment_content":"哇！看到这里的人已经越来越少了，虽然我也看不懂，但是还是想坚持看完第一遍，有个印象。这两个月在找工作，来这里打个卡。","like_count":1},{"had_liked":false,"id":289777,"user_name":"A免帅叫哥","can_delete":false,"product_type":"c1","uid":2058258,"ip_address":"","ucode":"76D2522E602AEF","user_header":"https://static001.geekbang.org/account/avatar/00/1f/68/12/031a05c3.jpg","comment_is_top":false,"comment_ctime":1619172344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5914139640","product_id":100024701,"comment_content":"这一节比内存和cpu的虚拟化简单很多。","like_count":1},{"had_liked":false,"id":124352,"user_name":"cuikt","can_delete":false,"product_type":"c1","uid":1242702,"ip_address":"","ucode":"9A1DB426CEFEEA","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/4e/0066303c.jpg","comment_is_top":false,"comment_ctime":1565865122,"is_pvip":false,"replies":[{"id":"46272","content":"谢谢","user_name":"作者回复","comment_id":124352,"uid":"1001590","ip_address":"","utype":1,"ctime":1566280669,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"5860832418","product_id":100024701,"comment_content":"留个言，讲的挺好！ ","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463130,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566280669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352854,"user_name":"Geek_cc94b0","can_delete":false,"product_type":"c1","uid":2746408,"ip_address":"陕西","ucode":"ECD1746D6CA65F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/yUAD9PkjPE1Xm6FMqgmWhhKMQf6zbyEdQO8oWJN5v020oRD8OgLScVDiatriakNlWQdo96m88GyWia3WVKCZtW5BQ/132","comment_is_top":false,"comment_ctime":1658983214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658983214","product_id":100024701,"comment_content":"看的晕，但是还是坚持下来","like_count":0},{"had_liked":false,"id":332046,"user_name":"无","can_delete":false,"product_type":"c1","uid":1015918,"ip_address":"","ucode":"CF9F79815606F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/6e/7f78292e.jpg","comment_is_top":false,"comment_ctime":1642995211,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642995211","product_id":100024701,"comment_content":"在vm里用的大部分是协程的话,是不是一些long running的服务在vm上跑会比在裸机上跑性能更好? 用户&#47;内核态之间的切换会少很多吧?","like_count":0},{"had_liked":false,"id":331981,"user_name":"luo","can_delete":false,"product_type":"c1","uid":1716827,"ip_address":"","ucode":"1A1DA8EB916ECF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/32/5b/d0c7e813.jpg","comment_is_top":false,"comment_ctime":1642939565,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1642939565","product_id":100024701,"comment_content":"讲的好","like_count":0,"discussions":[{"author":{"id":2229356,"avatar":"https://static001.geekbang.org/account/avatar/00/22/04/6c/3bfee2cd.jpg","nickname":"流云","note":"","ucode":"4D72EF9FDFAAA1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589738,"discussion_content":"精彩的还在后面，怎么能半途而废呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665294894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}