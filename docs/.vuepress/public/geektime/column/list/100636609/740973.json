{"id":740973,"title":"第 4 章 领域建模","content":"\n<p>软件开发解决的是现实世界的问题。如果不能正确理解现实世界，也就不可能产出高质量的软件。</p>\n<p>对业务的概念、概念间的关系及概念本质的认知，就是领域模型。领域模型是高质量软件开发和持续演进的基础，也是领域驱动设计方法的核心，还是微服务和云原生时代重要的基础概念。可以说，没有良好的领域模型做基础，就很难做好软件开发。</p>\n<p>本章将从三个方面介绍领域建模的相关知识和方法。</p>\n<ul>\n<li>领域模型的概念。</li>\n<li>如何获取高质量领域模型，以及领域模型的持续演进特征。</li>\n<li>如何把领域模型应用于需求分析和开发活动。</li>\n</ul>\n<h2 id=\"nav_point_83\">4.1　领域模型的概念</h2>\n<p>如果你正在开发一个模拟物体运动的软件，那么最起码要懂牛顿第二定律。如果开发的软件和航空航天等领域相关，那么还要懂万有引力、空气动力学、流体力学甚至相对论的知识。如果不懂这些知识，那开发出来的软件一定是谬误百出，无法使用。</p>\n<p>在商业领域也是一样。例如，开发一个零售系统，就需要对采购、物流、销售、客服等领域的知识有深入的了解。行行皆学问。不管开发什么系统，不重视对应领域的基本概念和业务知识，都是不行的。</p>\n<h3 id=\"nav_point_84\">4.1.1　领域模型是什么</h3>\n<p>首先我们给出领域模型的定义。</p>\n<blockquote>\n<p>领域模型定义了问题空间中的关键概念，以及这些概念之间的关系。</p>\n</blockquote>\n<p><strong>领域模型和问题空间密切相关</strong></p>\n<p>领域模型之所以有意义，是因为它在解决特定领域的问题。例如，当说到“应收账款”时，显然是在讨论财务领域，更具体地说是会计领域的问题。离开了特定领域去泛泛地讨论概念，是没有意义的。还有一种情况是，一个概念具有的意义需要有领域的限定才能说清楚。例如，当说到“轨道”时，它可能是天文学领域的行星运动轨道，也可能是铁路领域的火车轨道，只有先限定领域，这个概念才有真正的价值。</p><!-- [[[read_end]]] -->\n<p><strong>领域模型反映的是认知</strong></p>\n<p>一个好的领域模型，必然承载了有用的知识。对于不熟悉某特定领域的人来说，理解该领域的概念，往往是进入它最快的方式。例如，有这样一首儿歌。</p>\n<blockquote>\n<p style=\"text-align: center\">太阳大，地球小，地球绕着太阳跑。<br />地球大，月亮小，月亮绕着地球跑。</p>\n</blockquote>\n<p>其中就隐含着一个关于太阳、地球和月亮的领域模型。对于年龄尚小，不了解日心说的儿童而言，他可能会和古人一样仅凭直觉认为地球处在宇宙的中心。而通过背诵这个儿歌，他可以在脑海中建立全新的认知。这个儿歌暗含着一个领域模型，它承担了传承知识和升级认知的责任。</p>\n<p>这个例子还反映了很重要的一点：领域模型不拘泥于是一张图、一段文字，也可能是一首诗歌，它的表达形式并不重要，关键是能不能清晰反映认知，建立关于某个领域的共识。当然，选择一个好的表达形式，有助于传递认知、激发讨论和建立共识。</p>\n<blockquote>\n<p>领域模型反映的是认知，认知通过概念以及概念之间的关系表达。</p>\n</blockquote>\n<h3 id=\"nav_point_85\">4.1.2　使用 UML 类图表达领域模型</h3>\n<p>在大多数场景下，UML 类图是表达领域模型时的合适选择。图 4.1 和图 4.2 展示了使用 UML 类图表达的两个领域模型。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00301.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 4.1</strong>　领域模型——债务和债权</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00302.jpeg\" alt=\"\" width=\"40%\" style=\"width: 40%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 4.2</strong>　领域模型——坏账</p>\n<p>这两张图表达的概念都非常清晰。其中，图 4.1 表达的概念是：应付账款和预收账款都是一种债务，而应收账款和预付账款都是一种债权。图 4.2 表达的概念是：应收账款中可能存在一些坏账，坏账有一个逾期时长的属性，对于坏账应该基于坏账计提策略进行计提。即使对于不熟悉财务领域知识的人，只要熟悉 UML 工具的通用表示方法，就能很容易地看懂这两张图表达的意思。</p>\n<p>这是因为，UML 的类图虽然名字是“类图”，但是这个“类”并不只是软件代码中的“类”，而是“概念”。而且，UML 已经约定了概念和概念之间的关系，例如，类、属性、关联、关联的多重性、聚合、组合、泛化等，这些恰好也是我们在表达业务概念以及概念之间的关系时要用到的。</p>\n<p><strong>熟悉常见的概念间关系</strong></p>\n<p>类和属性的概念自然无须多加解释。最常用的关系的解释如下。</p>\n<ul>\n<li>关联：关联指两个概念之间存在联系。例如，“教师”和“学生”这两个概念之间存在“教学”关系。关联可以是单向的，也可以是双向的。教师和学生在教学场景中是双向关联，在两个方向上分别是“教”与“学”的关系。如果只强调“教”，那这个关系只需要从教师指向学生。如果只强调“学”，那这个关系只需要从学生指向教师。在这两种场景下，双向关系退化为了单向关系。</li>\n<li>多重性：这是指某个关系对应的两端的概念实体的数量对应关系。例如，教师和学生之间一般是多对多的关系。如果是家庭教师，就可能变成一对一。而如果是过去的私塾教育，又会变成一对多。识别关联的多重性有时候对业务分析来说特别重要。</li>\n<li>聚合和组合：聚合是一种特殊的关联，组合又是一种特殊的聚合。这两者表达的是归属关系或者所有关系。教师和学生之间虽然有关系，但是不包含归属或所有。教师和学校、学生和学校之间就存在归属或所有关系，即学校有教师、学校有学生。这种关系在 UML 表示法中被称为聚合。<span class=\"comment-number\">1</span>组合关系比聚合关系还要紧密，如“学生”和“学生成绩”之间的关系。学校和教师的关系并不是独占的，教师可以从一个学校调动到另一个学校，也就是二者的关系可以重新建立。但是学生成绩完全依附于学生，把一个学生的成绩连接到另外一个学生是完全不合理的，所以学生对学生成绩具有独占性，UML 表示法称之为组合。</li>\n<li>泛化：泛化反映了概念的抽象。最好按〈概念〉是〈抽象〉的形式读这种关系，如应付账款是一种债务。泛化对于简化概念认知来说非常重要。</li>\n<li>依赖：依赖指一个概念和另外一个概念有关。例如，坏账计提策略和坏账有关。“有关”是一种比“关联”弱得多的关系，是否需要在领域模型中表达这种关系取决于业务场景是否需要。</li>\n</ul>\n\n<p><strong>多样化的表达</strong></p>\n<p>UML 类图并不是领域模型，领域模型是认知本身。我们不应该一味地选用 UML 类图，而是应该根据场景选用恰当的工具。</p>\n<p>例如，虽然表 4.1 给出了若干业务概念，但是对于不熟悉财务领域的人，还是要解释什么是应收账款、应付账款等。表 4.1 详细地解释了这几个业务概念。</p>\n<p><strong>表 4.1</strong>　对“债务和债权”领域模型中业务概念的解释</p>\n<table width=\"90%\" border=\"1\">\n<thead>\n<tr>\n<th><p>业务概念</p></th>\n<th><p>解释</p></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>应收账款</p></td>\n<td><p>货物已经发给对方，但是尚未收到货款</p></td>\n</tr>\n<tr>\n<td><p>应付账款</p></td>\n<td><p>已经收到对方货物，但是尚未支付货款</p></td>\n</tr>\n<tr>\n<td><p>预收账款</p></td>\n<td><p>已经收到对方货款，但是尚未发货</p></td>\n</tr>\n<tr>\n<td><p>预付账款</p></td>\n<td><p>已经支付对方货款，但是尚未收到货物</p></td>\n</tr>\n</tbody>\n</table>\n<p>此外，刚才举例的那首儿歌，其中的领域模型也不太适合使用 UML 类图表达，因为其业务概念不是某一类事物，而是某一个。这时使用对象图更为合适（图 4.3 中的太阳、地球、月亮下面的下划线代表它们是一个对象，而不是一类对象）。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00303.jpeg\" alt=\"\" width=\"75%\" style=\"width: 75%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 4.3</strong>　用对象图表达业务概念</p>\n<p>对象图虽然可以用于理解问题，但是最终的软件系统开发还是要回到抽象的业务概念上来。使用 UML 类图对图 4.3 进行抽象的结果如图 4.4 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00304.jpeg\" alt=\"\" width=\"75%\" style=\"width: 75%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 4.4</strong>　从对象图抽象出的业务概念</p>\n<p><strong>多视图和刻意忽略</strong></p>\n<p>图、表、文本等都只是一种表达形式，它们提供的是一种视图，而非领域模型本身。因此，既不可能，也不需要使用一个视图面面俱到地反映业务概念。例如，图 4.2 中并没有显示所有和财务领域相关的信息，而只是集中于坏账的计提。既然如此，我们就可以选择多个视图来表达同一组业务概念。图 4.1、图 4.2 和表 4.1 就是用不同视图表达同一个领域模型。</p>\n<p>此外，如果读者有比较丰富的面向对象的经验，那么可能会纠结要不要对“方法/操作”进行建模。在“领域模型”是一种“业务概念”这个上下文中，方法/操作是开发人员的概念，没有必要在业务分析阶段进行建模。它们不是领域模型的一部分，可以在实现阶段再予以扩充。</p>\n<h3 id=\"nav_point_86\">4.1.3　领域模型反映了认知</h3>\n<p>领域模型的本质是业务认知。它在业务发展的过程中逐步演进，不断沉淀业务知识。更重要的是，它在一定时期内是较为稳定的。有没有高质量的领域模型，是企业是否可以持续沉淀业务竞争力的重要体现。</p>\n<p><strong>领域模型沉淀认知</strong></p>\n<p>一个在某领域深耕多年的企业，和一个新入该领域的企业，差距是什么？差距可能是多方面的，但最大的差距应该是“认知”。</p>\n<p>正因如此，我们经常看到，新企业追赶成熟企业的一个常用手段，就是高薪“挖角”。按理说，挖来的这些人既不能把原企业的客户带来，也不能把原企业的系统带来，那他们能带来什么呢？其实他们对新企业最大的帮助，就是能带来对特定领域的认知。</p>\n<p>在业务领域，认知是非常值钱的，而且非常稳定。我们也常常看到，一些在某领域建立了竞争优势的企业，会长期保持领先。这方面表现最突出的就是咨询类企业，因为这类企业唯一的竞争优势就是领域知识。通过提供业务领域的知识咨询服务，咨询类企业往往可以得到非常可观的收入。那认知沉淀在哪里呢？如果有维护良好的领域模型，那么领域模型就是沉淀认知的最佳位置。</p>\n<p><strong>领域模型在一定时期内保持稳定</strong></p>\n<p>领域模型的重要度还体现在它的稳定性上。尽管业务常新，但是领域模型相当稳定。例如，在财务领域，客户类型、交易形态、记账规则都可能发生变化，但是核心概念往往非常稳定。当然，真正的领域模型要比这些概念复杂得多，可这个规律是普遍适用的。</p>\n<p><strong>领域模型并非一成不变，它会持续“生长”甚至跃迁</strong></p>\n<p>领域模型的稳定不等于一成不变。人类最早期的认知并不是太阳大、地球小，而是和这恰恰相反。优秀的领域模型一定会持续“生长”，这往往需要业务能力的积累。</p>\n<p>领域模型甚至会发生本质的跃迁，如同从“地心说”发展到“日心说”。一个领域模型被推翻，往往代表发生了重大的认知升级，也往往会从根本上影响软件的各类活动，此时如果应对得当，那么和那些仍然采取旧领域模型的企业相比，将会拥有巨大的竞争优势。</p>\n<h3 id=\"nav_point_87\">4.1.4　建立高质量的领域模型</h3>\n<p>本节将使用我们在第 3 章引入的餐品预订案例，结合刚提及的领域模型的表达形式，说明如何建立高质量的领域模型。</p>\n<p>领域模型反映了关键的业务认知，但是认知并不会凭空建立。能够一上来就洞悉一切本质的场景只有两种：第一种是针对天才，这种非常罕见；第二种是面对的领域已经非常成熟，无须探索和发现。不过，成熟的领域一般也不是软件企业的核心业务及竞争力所在。认知往往来自业务场景的启发，所以领域模型的建立过程往往和需求分析同步进行。</p>\n<p>要建立好领域模型，关键是要做好“捕获、辨析、演进”。</p>\n<ul>\n<li>捕获：指的是能从需求分析和业务表述中，及时捕获可能是业务概念的信息。</li>\n<li>辨析：业务概念往往具有模糊性。要能清晰地分辨出：这个业务概念表达的是什么？它需要被分解吗？它能够被抽象吗？它和其他业务概念之间是什么关系？</li>\n<li>演进：人对业务概念的认知不是一蹴而就的，是渐进的。要随时留意，新的业务场景产生了哪些新的业务概念？加入了新的业务概念后，原有的领域模型是否需要调整？</li>\n</ul>\n<p>下面我们分三节讲解这 3 个关键概念及对应的实践方法。</p>\n<h2 id=\"nav_point_88\">4.2　捕获业务概念</h2>\n<p>最常用的从需求分析和业务表述中捕获业务概念的方式是“灵敏地听”。无论是文字描述，还是口头交流，在分析需求和表述业务时都必然会涉及业务概念。</p>\n<p>例如，图 3.8 表达了一个餐品预订的业务场景。在沟通这个场景时，可能会使用如下业务陈述：</p>\n<blockquote>\n<p>“订餐同学选择一个食堂，浏览食堂的菜单，选出希望的餐品并添加到购物车。”</p>\n</blockquote>\n<p>这个业务陈述中出现了哪些业务概念？我们发现，其中的名词就是业务概念，有下面几个。</p>\n<ul>\n<li>订餐同学</li>\n<li>食堂</li>\n<li>菜单</li>\n<li>餐品</li>\n<li>购物车</li>\n</ul>\n<p>不过，自然语言往往是不精确的。对于提取到的业务概念，一般都需要在脑海中迅速分析：它是不是一个新业务概念？它和既有业务概念有什么联系？它的名字合适吗？它的意义清晰吗？这些就是定义、分解和抽象业务概念时需要关心的问题。</p>\n<h2 id=\"nav_point_89\">4.3　辨析业务概念</h2>\n<p>我们已经获得了若干业务概念。平时应该养成一个好习惯：在捕获到业务概念的那一刻，就立即定义这个概念。如果需要分解，就立即进行业务概念的分解；如果需要抽象，就立即进行业务概念的抽象。</p>\n<h3 id=\"nav_point_90\">4.3.1　定义业务概念</h3>\n<p>我们首先来看如何定义业务概念。例如，当看到“订餐同学”这个业务概念时，脑海中可能会冒出一连串问题。比如用订餐同学称呼这个角色合适吗？教工会不会使用这个系统？如果教工现在不用，那将来会不会用？把这个角色称作订餐人是不是更合适？</p>\n<p>再例如，当同时看到“菜单”和“餐品”这两个业务概念时，会疑问：“菜单和餐品是什么关系？它们是不是一件事情？”或许很快就会发现，“菜单”并不是一个新的业务概念，它就是“餐品列表”。</p>\n<p>继续分析刚才的业务表述“订餐同学……选出希望的餐品并添加到购物车”，由此引发的疑问有：餐品可以选择多份吗？这样的问题会启发你想到添加到购物车的不是“餐品”，而是“餐品+数量”，我们可以把它概括为“购物项”。根据类似的思路，我们还可以推导出订单和订单项等业务概念。</p>\n<p>根据这个例子，相信大家很快就能发现定义业务概念从本质上讲是人类怎么认识现实世界的问题。定义的本质就是“是什么”。经过定义，我们把获得的业务概念精化为了订餐人、食堂、餐品、购物车和购物项。此外，我们进一步分析了下订单的场景，增加了订单和订单项的业务概念。复数业务概念，如“餐品列表”，则一般没有必要在业务概念中出现。对业务概念进行定义之后，我们获得的领域模型如图 4.5 所示。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00305.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 4.5</strong>　捕获业务表述中的领域概念</p>\n<h3 id=\"nav_point_91\">4.3.2　分解业务概念</h3>\n<p>我们在定义时可能会遇到难题。这是因为我们误把“本来不是一个事物”的概念理解成了一个事物。看下面的例子。</p>\n<blockquote>\n<ol>\n<li class=\"第2级有序列表\">在餐品列表上增加餐品的风味分类。如“粤菜”“川菜”，以方便订餐人的选择。</li>\n<li class=\"第2级有序列表\">食堂在每个月末都会基于风味分类进行销量统计，以了解不同风味分类的餐品的受欢迎程度。</li>\n</ol>\n</blockquote>\n<p>这两个是新增需求，都不复杂。其中出现了一个新的业务概念——风味分类，这只是对既有业务概念的扩充，影响不大。所有需求到目前为止看起来都很正常，直到把产品上线后的某一天，餐品管理员想尝试一下新的风味分类会不会对餐品销售造成影响，所以把“川菜”改为了“改良川菜”和“传统川菜”，并对餐品进行了重新分类。</p>\n<p>新的问题产生了。餐品管理员发现，即使是对重新分类前的餐品进行统计，也只剩下了“改良川菜”和“传统川菜”，原来的“川菜”类型消失了。本来期望通过统计获得的信息是分类精化会不会给餐品销售带来变化，结果现在的数据都变成了新的，期望的结果已经没法计算了。</p>\n<p><strong>警惕模糊的业务概念带来的问题</strong></p>\n<p>产生上述问题的根本原因在于业务概念的模糊。模糊的业务概念会带来一些问题，有些团队把这类问题解释为实现缺陷，并进行修复。例如，在每个月末都基于风味分类做一个统计的快照，这样看起来每次的统计结果都是基于当时的分类得到的，以为问题得到了解决。但是，这样的修复解决不了本质问题。如果把统计周期换成周，或者调整分类的时间不在月与月的边界上，问题就依然存在。</p>\n<p>其实，餐品的展示分类和餐品销售时刻的分类是两个概念。餐品的展示分类是在浏览餐品的业务上下文中，订餐人看到的即时分类，它永远是最新的。餐品销售时刻的分类是下单时刻的历史分类，即使后续餐品分类进行了重新调整，这个历史分类也应该保持不变。而经过辨析，在领域模型中不仅加入了餐品的分类信息，还明确区分了历史分类和当前分类两个更细粒度的业务概念。精化后的领域模型的一个局部如图 4.6，所以根据记录的历史和下单时间，在任何时候都能知道下订单时的餐品风味分类是什么。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00306.jpeg\" alt=\"\" width=\"85%\" style=\"width: 85%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 4.6</strong>　对领域概念中的概念进行分解</p>\n<p>请注意在这个例子的业务概念辨析和调整中，我们并没有简单地在每个订单中记录当时的餐品风味分类，而是记录了餐品的风味调整历史。大家可以自行比较二者的区别。</p>\n<p><strong>及时分解看起来相似、事实上不同的业务概念</strong></p>\n<p>相似业务概念的辨析是领域建模中最困难的部分。要想识别那些看起来很相似，事实上不同的业务概念，是需要技巧和经验的。这既需要一定的敏感性，又不能过度纠结，以免陷入分析瘫痪。</p>\n<p>保持一定的敏感性意味着要关注那些在概念表达上具有模糊性、二义性的内容，特别是如果发现业务概念之间存在矛盾，可能会“按下葫芦浮起瓢”，就往往需要认真考虑业务概念的定义以及业务概念之间的关系。</p>\n<p>不过度纠结意味着如果暂时没有更多的证据表明业务概念需要分解，就耐心等待新的业务场景。只有在具体场景中实践，才能对业务概念进行真正的检验。缺乏场景的空想，往往是不必要的。</p>\n<h3 id=\"nav_point_92\">4.3.3　抽象业务概念</h3>\n<p>抽象简化了认知。人类文明之所以能发展到今天，人类的抽象能力功不可没。可以说，没有抽象，就不可能完成对复杂系统的认知。在餐品预订的示例中，我们已经不自觉地应用了抽象，例如，把具象化的订餐同学抽象为更具备概括性的订餐人。这样，无论订餐的是同学，还是教工，甚至是更为广泛的对象，在订餐人这个抽象粒度上都是一致的。</p>\n<p><strong>如何抽象取决于特定的业务场景</strong></p>\n<p>对抽象最直观的理解，就是分类归纳。例如，我们可以把正方形和圆形都抽象为形状，把熊猫和猴子都抽象为哺乳动物。不过，在软件设计中，一个经常被忽略的问题是：抽象是为了解决特定场景下的问题而存在的，抽象的视角和抽象的层次与待解决的问题密切相关。</p>\n<p>事物具有多种不同的抽象视角。例如，图 4.7 中所示的形状，在逻辑推理类智力测验中经常出现。每个形状都有多种不同的抽象视角，可以按照形状的类型分类：正方形、圆形和三角形。也可以按照大小分类：小、中、大。还可以按照颜色分类：白、黑、灰。又或者按照位置属性分为上、中、下和左、中、右。根据要解决的问题上下文的不同，对同样事物的分类的视角可以很不相同，也就形成了不同的抽象。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00307.jpeg\" alt=\"\" width=\"60%\" style=\"width: 60%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 4.7</strong>　具有不同特征的形状</p>\n<p><strong>示例</strong></p>\n<p>图 4.7 只是一个启发性的示例，因此不做过多解释。我们还是使用餐品预订的例子来解释在领域建模过程中如何抽象。在 3.2 节曾经讲到，经过一定时间的运行，意识到在订餐业务中要引入套餐这种业务模式。我们来看在引入套餐这个概念后，会对业务概念产生哪些影响。</p>\n<p>首先，套餐是一个新的业务概念，所以要在领域模型中加入这个业务概念。其次，套餐一般包含多个单品，所以再新增一个概念——单品，这个单品和原来的餐品在事实上等价。接着，我们对比分析一下订单场景和餐品加工场景的区别。站在订单视角看，现在订单项指向了餐品。换句话说，现在还有必要区分套餐和单品吗？如果没有必要，那么只要看到餐品就够了。于是在订单场景这个上下文中，就可以用餐品作为套餐和单品的抽象。再看餐品加工场景。无论是套餐还是单品，餐品都是需要在单品粒度上加工的，所以，这个视角看到的只能是单品，而不能是经过抽象的餐品。</p>\n<p>把上面的业务概念体现到领域模型中，就得到了如图 4.8 所示的领域模型。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00308.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 4.8</strong>　加入套餐之后的领域模型的局部</p>\n<p>其中，餐品是对套餐和单品的抽象，套餐又由单品组成，菜品加工任务管理的是待加工的单品及数量。在建模过程中，合理抽象、及时抽象是很重要的活动。其关键思路就是：当出现若干看起来可能有一定共性的业务概念时，要明确思考如下问题。</p>\n<blockquote>\n<p>这些相似的业务概念，在所处的上下文中是否具有共性？有的话，可否利用这个共性简化认知？</p>\n</blockquote>\n<p>只要答案是肯定的，就存在对业务概念进行抽象的机会。在抽象过程中，要始终思考业务概念所处的上下文，能够有效避免过度抽象。举个极端一点的例子，我们当然可以把餐品和订单都抽象成“事物”，但是这样必然意味着我们失去了在特定上下文中解决问题的能力。</p>\n<p>分解和抽象业务概念的能力是需要刻意训练的。这也是在领域建模过程中，虽然强调对象是业务概念，但是如果有软件开发人员的参与，那么常常能达到更好的效果的原因之一。因为软件设计，特别是面向对象的软件设计，对提高分解和抽象业务概念的思维能力很有帮助，所以如果具有相关经验的开发人员参与了领域建模，那么往往可以获得质量更高的领域模型。</p>\n<h3 id=\"nav_point_93\">4.3.4　子域</h3>\n<p>优先按照业务领域进行分解，自然而然地就会导出子域的概念。在 Eric Evans 的经典著作《领域驱动设计》<sup>[23]</sup>中，把子域当作了一个重要的战略模式，其核心思想就是按问题域进行分解。</p>\n<p>根据子域通用程度的不同，我们把子域进一步划分为核心域、通用域和支撑域。</p>\n<ul>\n<li>核心域：核心域和产品的核心业务逻辑相关，决定了产品的核心竞争力，产品的差异性和特殊性体现在这种域中。例如，在我们的案例中，餐品目录、订单、餐品加工、取餐等都属于核心域。</li>\n<li>通用域：通用域是那些包含在大多数不同类型的产品中的子域。这种域往往没有太多个性化的诉求。例如，用户管理和评价等就属于通用域。</li>\n<li>支撑域：支撑域的通用水平尚未达到通用域，也不像核心域那样能决定产品的核心竞争力，但确实是一个完整产品所必须的。例如，一卡通支付业务在一定时期内就属于支撑域。支撑域有两种不同的演化方向：当它变得越来越重要时，就可能会演变出新的业务方向，此时便成为了核心域；当使用这个领域的业务越来越多时，它就逐渐成为通用域。</li>\n</ul>\n<p>面向我们的案例，表 4.2 给出了部分子域。</p>\n<p><strong>表 4.2</strong>　餐品预订业务的部分子域</p>\n<table width=\"90%\" border=\"1\">\n<thead>\n<tr>\n<th><p>子域</p></th>\n<th><p>类型</p></th>\n<th><p>核心目标</p></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><p>餐品目录</p></td>\n<td><p>核心域</p></td>\n<td><p>管理餐品列表的维护和展示</p></td>\n</tr>\n<tr>\n<td><p>订单</p></td>\n<td><p>核心域</p></td>\n<td><p>保证订餐交易的全生命周期的准确、高效和顺畅</p></td>\n</tr>\n<tr>\n<td><p>餐品加工</p></td>\n<td><p>核心域</p></td>\n<td><p>及时高效地生产餐品</p></td>\n</tr>\n<tr>\n<td><p>可售容量</p></td>\n<td><p>核心域</p></td>\n<td><p>管理餐品的可售数量，避免超出加工能力</p></td>\n</tr>\n<tr>\n<td><p>取餐</p></td>\n<td><p>核心域</p></td>\n<td><p>快速高效地完成餐品发放</p></td>\n</tr>\n<tr>\n<td><p>用户管理</p></td>\n<td><p>通用域</p></td>\n<td><p>管理用户注册、登录、登录状态和身份表示等能力</p></td>\n</tr>\n<tr>\n<td><p>评价</p></td>\n<td><p>通用域</p></td>\n<td><p>提供通用的反馈评价的能力</p></td>\n</tr>\n<tr>\n<td><p>一卡通支付</p></td>\n<td><p>支撑域</p></td>\n<td><p>提供使用校园一卡通进行支付的能力</p></td>\n</tr>\n</tbody>\n</table>\n<p>子域是为了控制业务复杂性所采取的分而治之策略的一部分。它还有助于我们理解第 5 章讨论的架构层次的设计和分解。</p>\n<h2 id=\"nav_point_94\">4.4　持续演进业务概念</h2>\n<p>领域模型反映的是对业务概念的理解，所以这种认知必然是渐进的。业务场景是业务认知的知识源泉，而领域模型又反过来作用于业务场景，提升认知。图 4.9 展示了领域模型和业务场景之间的这种相互促进的关系。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00309.jpeg\" alt=\"\" width=\"45%\" style=\"width: 45%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 4.9</strong>　领域模型和业务场景相互促进</p>\n<p>这种相互促进，在 4.3 节的例子中已经有所体现。例如，在“定义业务概念”中，通过辨析得到了“订餐人”的业务概念，于是后续的所有表述中都使用了订餐人；在“分解业务概念”中，发展出了“风味”和“风味历史”的业务概念，使得在下订单时，风味历史信息可以得到保留；在“抽象业务概念”中，进化出了“套餐”和“单品”的业务概念，等等。总体上说，持续演进遵循如下基本步骤。</p>\n<blockquote>\n<ol>\n<li class=\"第2级有序列表\">从需求分析和业务表述中捕获业务概念，并对其进行抽象。</li>\n<li class=\"第2级有序列表\">把业务概念及时归置到领域模型中，然后利用领域模型中的业务概念，去描述需求。</li>\n<li class=\"第2级有序列表\">如此循环往复，在持续探索需求的同时，持续精化领域模型。</li>\n</ol>\n</blockquote>\n<p>下面我们按照这个步骤分析一个下单场景，带大家体会其中的演进思路。如下为场景描述。</p>\n<blockquote>\n<p>订餐人打开购物车，勾选需要的餐品，点击下单。系统显示订单的总金额，提示订餐人选择取餐点，并给出支付链接。订餐人选择使用校园一卡通在线支付，支付成功后系统会给出取餐码信息。</p>\n</blockquote>\n<p>首先，我们注意到出现了“总金额”的业务概念。项目团队就这个业务概念进行了集体讨论。</p>\n<blockquote>\n<p>甲：“总金额是各订单项的金额之和，还是需要实际支付的金额？”</p>\n<p>乙：“总金额看起来有点模糊，我们可以把它定义为优惠前的金额，然后增加一个实际支付金额，让它代表使用各种优惠（如优惠券、满减活动等）后的金额。”</p>\n<p>甲：“优惠券功能现在要开发吗？”</p>\n<p>乙：“暂时可以不开发，不过可能很快就会有这个需求。”</p>\n<p>甲：“套餐的优惠算不算在优惠金额里面？”</p>\n<p>乙：“套餐的优惠是固定优惠，菜单中会直接显示原价和优惠后的金额，不属于订单级别的优惠。”</p>\n<p>（甲把刚才讨论清楚的业务概念，放到了领域模型的相应位置，并试着把优惠金额添加到套餐上。）</p>\n<p>甲：“单品有没有可能也有优惠？”</p>\n<p>乙：“有，我们以后会开发这个功能。”</p>\n<p>（甲把优惠金额改到了餐品上。）</p>\n</blockquote>\n<p>接着，讨论“取餐点”。</p>\n<blockquote>\n<p>甲：“我们需要为食堂增加一个维护取餐点信息的功能，如位置、照片等。”</p>\n<p>乙：“是的。”</p>\n<p>（乙记录下这个功能，以便稍后讨论。）</p>\n<p>甲：“每次都让订餐人自己选择取餐点吗？”</p>\n<p>乙：“考虑到高峰时段人会比较多，应该实现根据取餐点人的拥挤程度推荐比较空闲的取餐点。”</p>\n<p>甲：“那增加取餐点的推荐策略。”</p>\n<p>乙：“取餐点的推荐策略可能会越来越复杂。例如，要能结合订单所属的食堂、订餐人的位置等信息做进一步优化。”</p>\n<p>甲：“好的，我们可以把这个推荐策略实现得抽象一些，先基于拥挤程度进行推荐，以后再进行扩充。”</p>\n<p>（甲把刚才发现的和取餐点相关的信息加到了领域模型中。）</p>\n</blockquote>\n<p>之后，开始讨论“支付”。</p>\n<blockquote>\n<p>甲：“支付有可能不成功。”</p>\n<p>乙：“是的。我们应该为订单增加状态属性，如待支付、已支付、已发餐等。”</p>\n<p>（甲记录下订单状态。）</p>\n<p>甲：“以后也许还会有其他支付渠道，看起来‘支付’这个业务概念和订单是解耦的，我们不妨创建一个支付单的业务概念，以维护它自身的信息。”</p>\n<p>乙：“好的。”</p>\n<p>甲：“这个支付单仅仅指实际的支付金额吗？优惠券算不算一种支付？”</p>\n<p>乙：“哦，看起来有点复杂。这样吧，我们把支付单的概念扩展一下，让它代表总体的支付情况，并新增‘支付子单’的业务概念。一次支付包含使用优惠券进行的支付、使用校园一卡通进行的支付等，一种支付类型对应一个支付子单。这样扩展性会非常好，而且也可以把优惠券看作订餐人的一个支付账户，用支付渠道来抽象它。”</p>\n<p>甲：“好的，这个想法不错。”</p>\n<p>（甲把刚才发现的业务概念加到了领域模型中。）</p>\n<p>甲：“不过，这样刚才讨论的总金额和实际支付金额的区别好像没有意义了？”</p>\n<p>乙：“还是有一定意义的，虽然总金额只是在订单中的一个显示了，但是让订餐人知道自己获得了优惠。我们的实际支付金额，还是用支付单和支付子单的信息算得的。”</p>\n<p>甲：“好的。”</p>\n<p>（甲看着领域模型上的“订单”，突然有了一个问题。）</p>\n<p>甲：“现在订单项上的餐品信息是面向之前餐品的，如果以后餐品单价改了怎么办？”</p>\n<p>乙：“我们应该把下订单时刻的关键信息记录下来，如餐品单价。”</p>\n<p>甲：“好的。”</p>\n<p>……</p>\n</blockquote>\n<p>经过若干轮讨论，领域模型和需求场景都得到了进一步的扩充。图 4.10 展示了更新后的领域模型的局部。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00310.jpeg\" alt=\"{%}\" /></p>\n<p class=\"ebook-image-title\"><strong>图 4.10</strong>　进一步从需求场景扩展领域模型</p>\n<p>业务概念并不是显而易见的，是深入沟通、抽象和持续探索的结果。</p>\n<blockquote>\n<p>领域模型是深层模型，是在业务演进过程中持续加深认知的结果，它沉淀了关键的业务知识。</p>\n</blockquote>\n<p>错误的认知，必然导致开发出的软件是复杂的，也自然不可能提升开发效率。对领域模型进行讨论，不仅有助于建立正确的认知，也有助于建立完善的业务场景，给业务带来更好的支持。</p>\n<h2 id=\"nav_point_95\">4.5　用领域模型指导软件开发</h2>\n<p>领域模型代表对关键业务概念的认知，在业务发展过程中会持续演进。但是，要在实践中像关心需求那样关心领域模型，不是每个团队都能做到的。不能做到这一点的核心阻碍并不是抽象和分解领域模型时的技术门槛，而是没有充分意识到并发挥出领域模型的价值。统一语言以及对应的技术实现策略，不仅可以让领域模型发挥作用，还可以保障领域模型的持续更新。</p>\n<h3 id=\"nav_point_96\">4.5.1　领域模型和统一语言</h3>\n<p>在《领域驱动设计》<sup>[23]</sup>中，Eric Evans 提出了统一语言的概念。</p>\n<blockquote>\n<p>将领域模型作为语言的中心，确保团队在所有的交流活动和代码中都坚持使用这种语言。在画图、写文档和说话时也采用这种语言。</p>\n<p>尝试修改领域模型以及对应的语言表达，来消除不自然的地方（相应地也要修改代码，包括模块名、类名、方法等）。</p>\n</blockquote>\n<p>统一语言具有以下几个优点。</p>\n<p>(1) 提升沟通效率：由于整个团队都基于统一的业务概念交流，而这些业务概念都是经过精确定义和澄清的，因此可以大幅减少沟通中的误解，提升沟通效率。</p>\n<p>(2) 确保及时更新：统一语言“强迫”整个团队都使用领域模型表达需求，从而保证在需求分析过程中，领域模型能持续演进，不会出现领域模型在创建之后变得过时的情况。</p>\n<p>(3) 降低表示差距：通过强调在代码中也使用领域模型中的业务概念，可以缩小代码表达和业务表达的差距，提升代码的可理解性和可演进能力。</p>\n<p>把统一语言付诸实践，首先要在团队层面达成共识：任何出现在需求描述中的业务概念，都必须出现在领域模型中。如果需求描述中存在业务概念之间的关系，那领域模型中也必须有这个关系。这个要求看似简单，实践起来却比较困难。特别在刚开始的时候，团队成员可能并不适应这种做法，常常就忘记了这个准则，就需要经常纠正。但是时间一长，大家习惯后，因为所有的业务概念都已经显式化，所以日常交流活动中的误解大大减少，共识更容易达成，结果就是最后团队成员都会非常自觉地维护“统一语言”的做法。</p>\n<p>为了能在代码中便捷地使用领域模型，《领域驱动设计》中给出了一组非常有效的战术模式，如实体、值对象、领域服务和领域事件等。本书将在第 8 章介绍这部分内容。</p>\n<h3 id=\"nav_point_97\">4.5.2　避免领域建模的常见误区</h3>\n<p>领域模型的概念产生于 20 世纪 90 年代的面向对象社区。在那个时候，业务变化还不像今天这样频繁，迭代的思想也还没有完全成熟，业务人员和技术人员也没有像今天这样交流密集，所以无论是在参考书中，还是在实践中，领域建模都难免会受早年做法的影响。其中有若干误区，是在实践中应该尽量避免的。</p>\n<p><strong>避免从开发视角进行领域建模</strong></p>\n<p>常常有技术人员问“领域模型和 ER 图有什么关系？”最直接的回答就是“没有关系”。固然，我肯定知道在有了领域模型之后，设计 ER 图会更简单，或者对于一个还缺乏领域模型的遗留系统而言，研究数据库结构可以带来有效的输入，但是领域模型 和 ER 图的立足点是完全不一样的。</p>\n<p>领域模型一定要站在业务视角看，因为领域模型反映的是认知。一旦领域模型中掺杂了技术的概念，那么不仅会使它不够纯粹，还会严重影响领域模型的质量、问题发现、持续改进。因为没有软件背景的业务人员是不可能去看一个充斥着技术概念的模型的。统一语言无法建立，领域模型带来的价值就已经损失了一大部分。此外，从开发视角进行领域建模，往往会忽视业务人员的参与，而实践一再表明，资深的业务人员在领域建模时，往往能提供深入的洞察信息。总之，从开发视角进行领域建模绝对不可取。</p>\n<blockquote>\n<p>领域模型不是数据库模型。不要站在开发视角定义领域模型。</p>\n</blockquote>\n<p>此外，领域模型也不是数据库模型。有不少程序员会把领域模型和数据库模型视作相同的概念，这种观点是不对的。领域模型和数据库模型确实有着紧密的联系，确切地说，领域模型是数据库模型的输入之一，但从根本上讲，它们是不同的概念。</p>\n<p>领域模型属于问题域，所以它的重点不在于实现，而在于我们如何认识世界。对于软件开发来说，它在不同的角色之间建立了一个共同认知，如业务人员、开发人员和测试人员。</p>\n<p>数据库模型显然属于实现域。所以，除了开发人员以外，大多数角色对数据库模型并不关注。至于数据库模型和领域模型的关系，在第 8 章会有更多讨论。</p>\n<p><strong>避免建立庞大的领域模型</strong></p>\n<p>当我们说“领域”的时候，并没有限定它应该多大。究竟该把“航空”当作一个领域，还是把“航空”中的“订票”当作一个领域？</p>\n<p>此时若能想到“领域模型的核心是认知”，那答案就变得非常清楚了。领域越大，越不利于建立认知和共识。我们应该把大领域划分为小领域，然后逐个建立这些小领域的领域模型。那种“整整一面墙”的领域模型，是非常不可取的。</p>\n<p>在我们的案例中，订单、用户管理、优惠券、支付、餐品加工等，都应该作为一个小领域来分析，这也就是《领域驱动设计》<sup>[23]</sup>中的子域的概念。</p>\n<blockquote>\n<p>把大领域拆分为小的子域，并为每个子域分别建模。</p>\n</blockquote>\n<p><strong>避免只是重视文档，而忽略交流和共识</strong></p>\n<p>在 4.4 节，我使用对话的方式讲解了领域建模的过程，在实际场景中其实也是如此。</p>\n<p>领域模型的核心在于建立共同的认知，也就是共识。只把领域模型作为一种“制品”，或者某个阶段的“输出”，是非常不合适的。探索和发现最好不要独自进行，更多时候应该进行集体建模。集体建模不仅利于探索和发现，还有助于达成对于关键业务概念的共识。和第 3 章讲到的需求分析类似，作为集体建模的一个更具体化的指引，集体建模时最好的工具并不是 UML 的电子化工具，使用白板和在开放空间中进行讨论往往能够达到最好的效果。</p>\n<p>此外，领域模型一定要显式化。很多人认为自己是有业务“认知”的，甚至是有“领域模型”的。但是，如果你问他们领域模型在哪里，那答案要么是他们在某个项目曾经有过一些讨论，现在已经不知所终；要么就是虽然文档还在，但是团队的概念表达依旧混乱。没有显式化，没有把领域模型写下来，没有形成在团队中口口相传的知识，这种模型就并不是真正存在。</p>\n<h2 id=\"nav_point_98\">4.6　小结</h2>\n<p>领域模型是软件开发领域的核心概念，它反映的是认知。没有正确的领域模型，需求就很难表达清楚，设计也会缺乏依据，更难以形成业务沉淀。高质量的领域模型有利于建立更好的业务认知，让需求沟通更为顺畅，给设计实现带来指引。</p>\n<p>本章讲解了领域建模相关的概念和技术。领域建模的关键是业务概念的捕获、辨析和精化，这个过程本身也是一个探索和发现、尝试、修正甚至推翻的持续精炼的过程。图 4.11 总结了本章讲到的核心概念和方法。</p>\n<p class=\"pic\"><img img src=\"https://static001.geekbang.org/files/resource/ebook/100011/image00311.jpeg\" alt=\"\" width=\"90%\" style=\"width: 90%\" /></p>\n<p class=\"ebook-image-title\"><strong>图 4.11</strong>　领域建模</p>\n\n<br style=\"page-break-after:always\" />","comments":[{"had_liked":false,"id":392288,"user_name":"Geek_682837","can_delete":false,"product_type":"c1","uid":1715823,"ip_address":"广东","ucode":"55C29E9EDD9265","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIaxhA2xdIRKQ0rXZhrjcWPYp4hR1mjST6lcBeuYTg0Omf0hyREfr8VH8JWXEyEVq82ht7wdzWsyA/132","comment_is_top":false,"comment_ctime":1720503651,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100636609,"comment_content":"不是简单地在每个订单中记录当时的餐品风味分类，而是记录了餐品的风味调整历史，这两者有什么区别？","like_count":0}]}