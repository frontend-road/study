{"id":14008,"title":"25 | 不破不立：掌握代码级测试的基本理念与方法","content":"<p>你好，我是茹炳晟，今天我和你分享的主题是“不破不立：掌握代码级测试的基本理念与方法”。</p>\n<p>我在第三篇文章<a href=\"https://time.geekbang.org/column/article/10275\">《什么是单元测试？如何做好单元测试？》</a>中，为你介绍了单元测试的基本概念和方法，和你聊到了单元测试用例的“输入数据”和“预计输出”，也谈到了驱动代码和桩代码，其实这些概念和方法在代码级测试中也是最基本的。</p>\n<p>通常情况下，代码级测试的工作都是由开发人员完成，但是测试框架选型、覆盖率统计工具选型、测试用例设计原则等都需要资深的测试工程师或者测试架构师参与。</p>\n<p>所以，<span class=\"orange\">代码级测试这个系列，我会和你分享测试人员应该具备的代码级测试基础知识，为你呈现一幅包括代码级测试技术入门、方法论、用例设计，以及覆盖率衡量、典型难点、解决思路的全景技术视图。</span></p>\n<p>为了能更好地协助开发人员做好代码级测试，所以我今天的这次分享是根据实际工程项目中的实践，总结了五种常见的代码错误，以及对应的四大类代码级测试方法。</p>\n<p>掌握了这些错误类型、测试方法，相信你就可以搞定代码级测试了，即使自己不用去完成测试工作，也可以让开发人员对你另眼相看，可以更高效地互相配合完成整个项目。</p>\n<p>这里需要注意的是，<strong>代码级测试的测试方法一定是一套测试方法的集合，而不是一个测试方法。</strong> 因为单靠一种测试方法不可能发现所有潜在的错误，一定是一种方法解决一部分或者一类问题，然后综合运用多种方法解决全部问题。</p><!-- [[[read_end]]] -->\n<p>本着先发现问题，然后解决问题的思路，我在正式介绍代码级测试方法之前，先来概括一下常见的代码错误类型，然后我们再一起讨论代码级测试有哪些方法。这样，我们就可以清晰地看出，每一种代码级测试方法都能覆盖哪些类型的代码错误。</p>\n<p>根据过往的经验来看，代码错误，可以分为“有特征”的错误和“无特征”的错误两大类。“有特征”的错误，可进一步分为语法特征错误、边界行为错误和经验特征错误；“无特征”的错误，主要包括算法错误和部分算法错误。</p>\n<p>接下来，我将和你详细说说这五类代码错误的具体含义是什么。</p>\n<h2>常见代码错误类型</h2>\n<p><strong>第一，语法特征错误</strong></p>\n<p>语法特征错误是指，从编程语法上就能发现的错误。比如，不符合编程语言语法的语句等。</p>\n<p>如果你使用IDE环境进行代码开发，那么IDE可以提示你大部分的这类错误，而且只有解决了这类错误，才能编译通过。但是，还会有一些比较隐晦的语法特征错误，IDE不能及时发现，而且也不会影响编译，只会在运行阶段出错。</p>\n<pre><code>void demoMethod(void)\n{\n  int a[10];\n  a[10]=88;\n  ...\n}\n</code></pre>\n<p>比如，这段C语言代码就存在数据越界的问题。</p>\n<p>很显然，你从语法上很容易就能发现，这段代码初始化了一个长度为10的整型数组a，但数组下标从0开始，所以最大可用的数组空间应该是a[9]，而这里却使用了a[10]，造成数组越界，访问了未被初始化的内存空间，代码运行时（Runtime）就会造成意想不到的结果。</p>\n<p><strong>第二，边界行为特征错误</strong></p>\n<p>边界行为特征错误是指，代码在执行过程中发生异常，崩溃或者超时。之所以称为“边界”，是由于此类错误通常都是发生在一些边界条件上。</p>\n<pre><code>int Division(int a, int b)\n{\n  return a/b;\n}\n</code></pre>\n<p>这段C语言代码就存在具有边界行为特征的错误。当b取值为0时，Division函数就会抛出运行时异常。</p>\n<p><strong>第三，经验特征错误</strong></p>\n<p>经验特征错误是指，根据过往经验发现代码错误。</p>\n<pre><code>void someMethod(void)\n{\n  ...\n  if(i=2)\n  {\n    // if the value of i equals to 2, call method &quot;operationA&quot;\n    operationA();\n  }\n  else\n  {\n    // if the value of i doesn't equal to 2, call method &quot;operationB&quot;\n    operationB();\n  }\n}\n</code></pre>\n<p>这段C语言代码，就是一个典型的具有经验特征错误的代码片段。代码想要表达的意思是：如果变量i的值等于2，就调用函数operationA；否则，调用函数operationB。</p>\n<p>但是，代码中将“if(i==2)”错误地写成了“if(i=2)”，就会使原本的逻辑判断操作变成了变量赋值操作，而且这个赋值操作的返回结果永远是true，即这段代码永远只会调用operationA的分支。</p>\n<p>显然，“if(i=2)”在语法上没有错误，但是从过往经验来看，这就很可能是个错误了。也就是说，当你发现一个原本应该出现逻辑判断语句的地方，现在却出现了赋值语句，那就很有可能是代码写错了。</p>\n<p><strong>第四，算法错误</strong></p>\n<p>算法错误是指，代码完成的计算（或者功能）和之前预先设计的计算结果（或者功能）不一致。</p>\n<p>这类错误直接关系到代码需要实现的业务逻辑，在整个代码级测试中所占比重最大，也是最重要的。但是，完全的算法错误并不常见，因为不能准确完成基本功能需求的代码，是一定不会被递交的。所以，在实际工程项目中，最常见的是部分算法错误。</p>\n<p><strong>第五，部分算法错误</strong></p>\n<p>部分算法错误是指，在一些特定的条件或者输入情况下，算法不能准确完成业务要求实现的功能。这类错误，是整个代码级测试过程中最常见的类型。</p>\n<pre><code>int add(int a, int b)\n{\n  return a+b;\n}\n</code></pre>\n<p>这段C语言代码，完成了两个int类型整数的加法运算。在大多数情况下，这段代码的功能逻辑都是正确的，能够准确地返回两个整数的加法之和。但是，在某些情况下，可能存在两个很大的整数相加后和越界的情况，也就是说两个很大的int数相加的结果超过了int的范围。这就是典型的部分算法错误。</p>\n<h2>代码级测试常用方法</h2>\n<p>介绍完了语法特征错误、边界行为特征错误、经验特征错误、算法错误、部分算法错误这五类代码错误后，我们再回过头来看看代码级测试的方法有哪些，这些测试方法又是如何揭露这五类代码错误的。</p>\n<p><strong>在我看来，代码级测试方法主要分为两大类，分别是静态方法和动态方法。</strong></p>\n<ul>\n<li>静态方法，顾名思义就是在不实际执行代码的基础上发现代码缺陷的方法，又可以进一步细分为人工静态方法和自动静态方法；</li>\n<li>动态方法是指，通过实际执行代码发现代码中潜在缺陷的方法，同样可以进一步细分为人工动态方法和自动动态方法。</li>\n</ul>\n<p>这里需要注意到的是，我在这篇文章中只会和你分享这四种方法具体是什么，各有何局限性和优势，分别可以覆盖哪些错误类型。而对于，具体如何用这四种方法完成代码级测试，测试用例如何设计、常用的测试工具如何使用，我会在后面两篇文章（《深入浅出之静态测试方法》和《深入浅出之动态测试方法》）中详细展开。</p>\n<p><strong>第一，人工静态方法</strong></p>\n<p>人工静态方法是指，通过人工阅读代码查找代码中潜在错误的方法，通常采用的手段包括，开发人员代码走查、结对编程、同行评审等。</p>\n<p><strong>理论上，人工静态方法可以发现上述五类代码错误，但实际效果却并不理想。</strong> 这个方法的局限性，主要体现在以下三个方面：</p>\n<ol>\n<li>\n<p>过度依赖于代码评审者的个人能力，同样的评审流程，发现的问题却相差悬殊；</p>\n</li>\n<li>\n<p>如果开发人员自行走查自己的代码，往往会存在“思维惯性”，开发过程中没有能考虑的输入和边界值，代码走查时也一样会被遗漏；</p>\n</li>\n<li>\n<p>由于完全依赖人工，效率普遍较低。</p>\n</li>\n</ol>\n<p><strong>第二，自动静态方法</strong></p>\n<p>自动静态方法是指，在不运行代码的方式下，通过词法分析、语法分析、控制流分析等技术，并结合各种预定义和自定义的代码规则，对程序代码进行静态扫描发现语法错误、潜在语义错误，以及部分动态错误的一种代码分析技术。</p>\n<p><strong>自动静态方法可以发现语法特征错误、边界行为特征错误和经验特征错误这三类“有特征”的错误</strong>，但对于算法错误和部分算法错误这两种“无特征”的错误却无能为力。根本原因在于，自动静态方法并不清楚代码的具体业务逻辑。</p>\n<p>目前，自动静态方法无论是在传统软件企业，还是在互联网软件企业都已经被广泛采用，往往会结合企业或项目的编码规范一起使用，并与持续集成过程紧密绑定。</p>\n<p>你需要根据不同的开发语言，选择不同的工具。目前有很多工具都可以支持多种语言，比如Sonar、Coverity等，你可以根据实际需求来选择。</p>\n<p><strong>第三，人工动态方法</strong></p>\n<p>人工动态方法是指，设计代码的输入和预期的正确输出的集合，然后执行代码，判断实际输出是否符合预期。我在之前的第三篇文章<a href=\"https://time.geekbang.org/column/article/10275\">《什么是单元测试？如何做好单元测试？》</a>中介绍的单元测试，采用的测试方法本质上就是人工动态方法。</p>\n<p>在代码级测试中，<strong>人工动态方法是最主要的测试手段，可以真正检测代码的逻辑功能，其关注点是“什么样的输入，执行了什么代码，产生了什么样的输出”，所以最善于发现算法错误和部分算法错误。</strong></p>\n<p>目前，不同的编程语言对应有不同的单元测试框架，比如，对Java语言最典型的是Junit和TestNG，对于C语言比较常用的是Google Test等。</p>\n<p><strong>第四，自动动态方法</strong></p>\n<p>自动动态方法，又称自动边界测试方法，指的是基于代码自动生成边界测试用例并执行，以捕捉潜在的异常、崩溃和超时的方法。</p>\n<p><strong>自动动态方法，可以覆盖边界行为特征错误，</strong> 通常能够发现“忘记处理某些输入”引起的错误（因为容易忘记处理的输入，往往是“边界”输入）。但是它对于发现算法错误无能为力，毕竟工具不可能了解代码所要实现的功能逻辑。</p>\n<h2>总结</h2>\n<p>作为代码级测试系列的第一篇文章，我今天主要和你分享了代码级测试中的常见代码错误类型，以及常用测试方法。</p>\n<p>代码错误，可以划分为“有特征”的错误和“无特征”的错误两大类。其中，“有特征”的错误，又可以进一步细分为语法特征错误、边界行为特征错误和经验特征错误；而“无特征”的错误，主要包括算法错误和部分算法错误两类。</p>\n<p>针对这五种代码错误，我将代码级测试的方法分成了静态方法和动态方法两大类。顾名思义，静态方法不需要执行实际代码，而动态方法需要通过执行具体的代码去发现代码错误。而每一类方法又可以根据执行方式，进一步细分。也因此，每种测试方法，所能覆盖的错误类型也不同，所以进行代码级测试时，你需要综合运用这些方法，并结合所在公司或者项目的编码规范一起使用。</p>\n<p>这四类测试方法的特点，以及可以覆盖的错误类型，可以概括如下：</p>\n<ul>\n<li>人工静态方法，本质上通过开发人员代码走查、结对编程、同行评审来完成的，理论上可以发现所有的代码错误，但也因为其对“测试人员”的过渡依赖，局限性非常大；</li>\n<li>自动静态方法，主要的手段是代码静态扫描，可以发现语法特征错误、边界行为特征错误和经验特征错误这三类“有特征”的错误；</li>\n<li>人工动态方法，就是传统意义上的单元测试，是发现算法错误和部分算法错误的最佳方式；</li>\n<li>自动动态方法，其实就是自动化的边界测试，主要覆盖边界行为特征错误。</li>\n</ul>\n<h2>思考题</h2>\n<p>你所在的公司，还采用过哪些代码级测试的方法，你们又是如何具体开展的呢？</p>\n<p>欢迎你给我留言。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":21639,"user_name":"Jia","can_delete":false,"product_type":"c1","uid":1139676,"ip_address":"","ucode":"A9FA2F834D380F","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/dc/94512cff.jpg","comment_is_top":false,"comment_ctime":1535205025,"is_pvip":false,"replies":[{"id":"7740","content":"我可以去关注一下，这个我没有用过👍","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1535328979,"ip_address":"","comment_id":21639,"utype":1}],"discussion_count":1,"race_medal":0,"score":"91729518241","product_id":100009601,"comment_content":"对于自动静态测试，还有一个很好用的免费工具，Facebook出的Infer。常见的语言，C，Java, Pathon等都可以分析。","like_count":21,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422780,"discussion_content":"我可以去关注一下，这个我没有用过👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535328979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21429,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1535077632,"is_pvip":false,"replies":[{"id":"7745","content":"很棒的回复。人工动态本质上可以理解成单元测试，基本都是由开发自己来完成的。误报率的问题的确存在，但其实也可以反过来规范代码本身的写法，另外有些误报出现过一次后可以标注，下次就不会发生了","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1535329502,"ip_address":"","comment_id":21429,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48779717888","product_id":100009601,"comment_content":"1.代码级测试应该算一个比较大的话题了，有专门的公司做这种静态代码检查工具的，一套好贵的说，对于测试来说，不管是人工还是自动，如果能把这五种常见错误发现了，已经很厉害了；<br><br>2.目前的五种错误类型确实是最基本最常见的了，这也是我们测试用例设计时需要优先关注的点，如果针对专门做代码级测试的来说，需要覆盖的类型要更多，也更加具体，通用一点的比如：定义宏时应使用括号括住宏的每个参数、禁止使用不检查缓冲区长度的字符串函数、所有的循环必须有异常情况下的跳出条件等等；<br><br>3.不太清楚其他公司的单元测试开展情况如何，就我个人来看，我觉得「自动静态方法」的推广和效果，应该是优于其他方法的，因为通用性更好，部署后也可以针对每次编译的项目做自动检测，唯一的问题就是检查点的覆盖度和误报率的问题。人工动态方法如果让开发开展，推进难道比较大，让测试开展，技术难度比较大，这是一个长期投入的问题，又需要兼顾投入产出比。<br><br>以上，欢迎沟通交流，公众号「sylan215」","like_count":11,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422670,"discussion_content":"很棒的回复。人工动态本质上可以理解成单元测试，基本都是由开发自己来完成的。误报率的问题的确存在，但其实也可以反过来规范代码本身的写法，另外有些误报出现过一次后可以标注，下次就不会发生了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535329502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21482,"user_name":"Dream.","can_delete":false,"product_type":"c1","uid":1187286,"ip_address":"","ucode":"49B94CE5BA0D21","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/d6/76fe5259.jpg","comment_is_top":false,"comment_ctime":1535110410,"is_pvip":false,"replies":[{"id":"7744","content":"是的，开发人员一定要建立起这些意识，能够从文中讲到的四个方法的角度去思考，这样一定可以带来更好的代码质量，从根源上解决问题","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1535329297,"ip_address":"","comment_id":21482,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44484783370","product_id":100009601,"comment_content":"所以开发也要学点测试，这样写的程序bug才更少~学完这篇之后眼前一亮，以后自己开发要更注意了。","like_count":10,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422696,"discussion_content":"是的，开发人员一定要建立起这些意识，能够从文中讲到的四个方法的角度去思考，这样一定可以带来更好的代码质量，从根源上解决问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535329297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239323,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e9/1b/1a6938ec.jpg","nickname":"晶晶","note":"","ucode":"2D7F03BB73717C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20829,"discussion_content":"测试人员可以去影响开发人员或给开发人员制定一个checklist 让他们在编写或完成代码时按照checklist去检查这几个方面","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1569382865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88749,"user_name":"口水窝","can_delete":false,"product_type":"c1","uid":1004838,"ip_address":"","ucode":"6028B5AA10D8A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/26/154f9578.jpg","comment_is_top":false,"comment_ctime":1555991186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40210696850","product_id":100009601,"comment_content":"开发和测试必须要有共同的利益，且都把这个利益放在第一位的时候，才能共进一致的去努力。比如，开发和测试把保证产品质量放在第一位，那么就会协同起来比较好，要是连这个意识都没有，恐怕只能有无穷无尽的撕逼过程。","like_count":9},{"had_liked":false,"id":37403,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1541574612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23016411092","product_id":100009601,"comment_content":"常见代码错误类型<br>    有特征<br>        第一，语法特征错误<br>        第二，边界行为特征错误<br>        第三，经验特征错误<br>    无特征<br>        第四，算法错误<br>        第五，部分算法错误<br><br>测试方法<br>    人工静态方法<br>    自动静态方法<br>    人工动态方法<br>    自动动态方法","like_count":5},{"had_liked":false,"id":88729,"user_name":"口水窝","can_delete":false,"product_type":"c1","uid":1004838,"ip_address":"","ucode":"6028B5AA10D8A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/26/154f9578.jpg","comment_is_top":false,"comment_ctime":1555986887,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18735856071","product_id":100009601,"comment_content":"以前的公司，还听说过代码走查，代码评审的。现在的公司，都没做，都是依赖测试人员太多。只能说测试和开发依赖太大，自己的代码不太负责，都是想着反正有人测，我完成我的开发任务就好。","like_count":4,"discussions":[{"author":{"id":1198035,"avatar":"https://static001.geekbang.org/account/avatar/00/12/47/d3/cdba6d3d.jpg","nickname":"baylor","note":"","ucode":"4302A37AB8321A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":902,"discussion_content":"是的，有些开发就觉得，问题自己都解决了还要测试干嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562144765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256643,"user_name":"五花肉","can_delete":false,"product_type":"c1","uid":2190611,"ip_address":"","ucode":"2F928244E6D089","user_header":"https://static001.geekbang.org/account/avatar/00/21/6d/13/a44d9888.jpg","comment_is_top":false,"comment_ctime":1603695205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14488597093","product_id":100009601,"comment_content":"想请教老师，自动动态测试方法中：基于代码自动生成边界测试用例并执行，这是用什么工具实现呀？","like_count":3},{"had_liked":false,"id":83595,"user_name":"bolo","can_delete":false,"product_type":"c1","uid":1357170,"ip_address":"","ucode":"7C91CEA2F1970E","user_header":"https://static001.geekbang.org/account/avatar/00/14/b5/72/bb10f3d0.jpg","comment_is_top":false,"comment_ctime":1554682518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14439584406","product_id":100009601,"comment_content":"1、我们公司采用的是，一个开发写好的功能，会有其他两位开发进行代码的review，且review通过后，才能提交到测试人员这里进行测试（也分业务线，因为有的业务线代码review，仅仅是流于形式）。<br><br>2、测试人员拿到被测软件的时候，准备好了测试用例或者测试的检查点。然后基于用例的分析，重点关注核心代码逻辑的Diff查看，如果有遗漏的部分，适时补充测试用例。<br><br>3、代码执行的过程中，通过代码覆盖率工具(Java语言的 jacoco, PHP 语言的php-code-coverage），进行一些覆盖率统计，当测试用例执行完成后，查看代码覆盖率报告，是否有遗漏的分支或函数没有调用，评估风险，是否需要进行覆盖。<br><br>4、我认为，测试人员要尽可能熟悉开发语言（语法）比如主流的后端语言（PHP、Java），iOS的（OC或者swift), 前端的（HTML、CSS、JS（VUE））等，可以帮助我们更好更快的进行代码Diff，还可以很好地跟开发人员沟通~  <br>","like_count":3},{"had_liked":false,"id":34958,"user_name":"颜瑞","can_delete":false,"product_type":"c1","uid":1170056,"ip_address":"","ucode":"A837AF2DEF9558","user_header":"https://static001.geekbang.org/account/avatar/00/11/da/88/09ccab4a.jpg","comment_is_top":false,"comment_ctime":1540369756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14425271644","product_id":100009601,"comment_content":"Sonar代码扫描除了有特征点的错误类型外，目前还有安全扫描，也是代码级别的，属于“无特征”类型？","like_count":3},{"had_liked":false,"id":21651,"user_name":"元让","can_delete":false,"product_type":"c1","uid":1007149,"ip_address":"","ucode":"C84195CE61A643","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/2d/99b4675c.jpg","comment_is_top":false,"comment_ctime":1535208644,"is_pvip":false,"replies":[{"id":"7739","content":"感谢支持👍","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1535328935,"ip_address":"","comment_id":21651,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14420110532","product_id":100009601,"comment_content":"分类清晰，条理清楚，写的不错","like_count":3,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422782,"discussion_content":"感谢支持👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535328935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267607,"user_name":"zyl","can_delete":false,"product_type":"c1","uid":2268472,"ip_address":"","ucode":"224D0F43EC5D27","user_header":"https://static001.geekbang.org/account/avatar/00/22/9d/38/a67f8d3c.jpg","comment_is_top":false,"comment_ctime":1607843075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5902810371","product_id":100009601,"comment_content":"摘要：一、常见代码错误类型1.代码错误分为“有特征”错误和“无特征”错误。“有特征”错误分为语法特征错误、边界行为错误和经验特征错误。“无特征”错误分为算法错误和部分算法错误。l\t语法特征错误：从编程语法上就能发现的错误。l\t边界行为错误：代码在边界条件执行过程中发生各种异常。l\t经验特征错误：根据以往经验发现的错误。l\t算法错误：代码实现的计算和功能和预先设计的不一致。l\t部分算法错误：在特殊情况下，算法不能准确完成业务要求实现的功能。二、代码级测试常用方法代码级测试方法分为静态方法和动态方法。1.静态方法：指在不执行代码的情况下发现代码缺陷，又分为人工静态方法和自动静态方法。l\t人工静态方法：通过人工阅读代码发现代码缺陷。l\t自动静态方法：在不允许代码的前提下，通过各种技术对代码进行扫描发现错误的代码分析方法。可以发现语法特征错误、边界行为错误和经验特征错误。2．动态方法：通过执行代码发现代码缺陷，分为人工动态方法和自动动态方法。l\t人工动态方法：构建代码输入和正确输出的集合，执行代码，判断输出是否符合预期。可以发现算法错误和部分算法错误。l\t自动动态方法：基于代码自动生成边界测试用例并执行。","like_count":1},{"had_liked":false,"id":356047,"user_name":"付晓杰","can_delete":false,"product_type":"c1","uid":1869584,"ip_address":"上海","ucode":"66634A3401A176","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/FGeCDgpXdhsXseIGF3GCzZibDJlOfO4KDqPJkMra2e0TJj3QVQk4t1oEd1BuQPtYOeavFyYxicd5fTZ33tIbPOZQ/132","comment_is_top":false,"comment_ctime":1661934688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661934688","product_id":100009601,"comment_content":"代码错误，可以分为：<br>1。“有特征”的错误——语法特征错误、边界行为错误和经验特征错误<br>2.“无特征”的错误——算法错误和部分算法错误<br>代码级测试方法主要分为:<br>1.静态方法——人工静态方法和自动静态方法<br>2.动态方法——人工动态方法和自动动态方法<br>","like_count":0},{"had_liked":false,"id":341944,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1649926778,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649926778","product_id":100009601,"comment_content":"我现在所使用的代码级测试技术有：自动静态方法（golint）、人工动态和人工静态（一般是开发人员阅读代码，效率较低）。","like_count":0},{"had_liked":false,"id":325415,"user_name":"小呀么小二郎","can_delete":false,"product_type":"c1","uid":1326905,"ip_address":"","ucode":"149540DCFDF43E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/39/b1558fc9.jpg","comment_is_top":false,"comment_ctime":1638950608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638950608","product_id":100009601,"comment_content":"木有做过，打卡学习。","like_count":0},{"had_liked":false,"id":275705,"user_name":"smilekaka","can_delete":false,"product_type":"c1","uid":1501593,"ip_address":"","ucode":"C01D8020019FDC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJ5Hnw1tL9EWGdzhibCw89hibKjibwcyUBCSJsQWaxxfGu5AkBibibV0anaKqw3nf3ZP0UWy5BaEYyw2Q/132","comment_is_top":false,"comment_ctime":1611649998,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1611649998","product_id":100009601,"comment_content":"请问老师， 自己开发 自动动态方法测试工具， 怎么入手呢。 以java为例， 应该是正对 service层的方法来做边界测试吧？<br><br>怎么做呢， 我理解仅仅只能根据方法参数，来做边界测试吧， 比如 方法参数是 Integer，我就传个 Integer.MAX_VALUE 进去试试看报不报错？，","like_count":0},{"had_liked":false,"id":235607,"user_name":"捷后愚生","can_delete":false,"product_type":"c1","uid":1170483,"ip_address":"","ucode":"A1F935D39C8488","user_header":"https://static001.geekbang.org/account/avatar/00/11/dc/33/a68c6b26.jpg","comment_is_top":false,"comment_ctime":1595124738,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595124738","product_id":100009601,"comment_content":"虽然没有做代码级别的测试，但是学习这篇文章，了解代码的常见错误，代码级别测试的各种方法，增长见识也很好，至少如果在听到项目内有人在讨论代码测试，自己是知道一些的。","like_count":0},{"had_liked":false,"id":175427,"user_name":"Cuinn","can_delete":false,"product_type":"c1","uid":1543735,"ip_address":"","ucode":"1D4BD00F709BB0","user_header":"https://static001.geekbang.org/account/avatar/00/17/8e/37/fd162c2d.jpg","comment_is_top":false,"comment_ctime":1580716542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580716542","product_id":100009601,"comment_content":"我们公司没有 哈哈哈","like_count":0},{"had_liked":false,"id":46682,"user_name":"楚耳","can_delete":false,"product_type":"c1","uid":1068208,"ip_address":"","ucode":"7661633F3297C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/b0/f22017b0.jpg","comment_is_top":false,"comment_ctime":1543971163,"is_pvip":false,"replies":[{"id":"17357","content":"一般是自己开发的小工具","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1544488906,"ip_address":"","comment_id":46682,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543971163","product_id":100009601,"comment_content":"老师，文中提到的基于代码自动生成边界测试用例并执行 这个是怎么做的，用开源工具还是自己开发的工具","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431506,"discussion_content":"一般是自己开发的小工具","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544488906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":42062,"user_name":"Jalyn","can_delete":false,"product_type":"c1","uid":1079312,"ip_address":"","ucode":"588EBC9E01C384","user_header":"https://static001.geekbang.org/account/avatar/00/10/78/10/168a22b0.jpg","comment_is_top":false,"comment_ctime":1542899713,"is_pvip":true,"replies":[{"id":"15925","content":"首先需要比较深入地掌握一门语言，然后还要学习至少一个单元测试框架，接下来可能就要学着使用moke","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1543469642,"ip_address":"","comment_id":42062,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1542899713","product_id":100009601,"comment_content":"作为一个有心做好代码级测试的初级测试工程师，需要掌握哪些必备的技术技能呢？","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429983,"discussion_content":"首先需要比较深入地掌握一门语言，然后还要学习至少一个单元测试框架，接下来可能就要学着使用moke","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543469642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2337605,"avatar":"https://static001.geekbang.org/account/avatar/00/23/ab/45/363266c1.jpg","nickname":"Roy","note":"","ucode":"4CFD7344899B72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385143,"discussion_content":"是mock吧，moke是什么意思呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626918317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22617,"user_name":"arthur","can_delete":false,"product_type":"c1","uid":1116981,"ip_address":"","ucode":"EAD9D9D2837C5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/35/2c56c29c.jpg","comment_is_top":false,"comment_ctime":1535857600,"is_pvip":false,"replies":[{"id":"8311","content":"感谢支持，自动动态方法的投入产出比其实很好的，而且可以发现很多原本只有在后期才能发现的问题","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1536108568,"ip_address":"","comment_id":22617,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1535857600","product_id":100009601,"comment_content":"打卡，写的真好，目前我们产品还木有自动动态方法，学到了😁 ","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423192,"discussion_content":"感谢支持，自动动态方法的投入产出比其实很好的，而且可以发现很多原本只有在后期才能发现的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536108568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22422,"user_name":"涅槃Ls","can_delete":false,"product_type":"c1","uid":1163943,"ip_address":"","ucode":"39EDBFB303D668","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/a7/c4de1048.jpg","comment_is_top":false,"comment_ctime":1535675056,"is_pvip":false,"replies":[{"id":"8101","content":"感谢支持","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1535792101,"ip_address":"","comment_id":22422,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1535675056","product_id":100009601,"comment_content":"打卡25","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423114,"discussion_content":"感谢支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535792101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}