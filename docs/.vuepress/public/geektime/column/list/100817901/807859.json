{"id":807859,"title":"05｜动手实战：根据用户发问查询数据","content":"<p>你好，我是叶伟民。</p><p>今天这节课，我们继续动手实战，让大模型能够根据用户提问来查询数据，也就是在前面提到的“发问部分”，添加获取结构化数据查询参数的代码。</p><p>这节课是整个实战案例的核心部分，而且通用性很强，很多<strong>从数据库里检索知识的场景</strong>，你都可以参考这节课的思路来完成。</p><h2>基础部分</h2><p>我们继续打开<strong>实战案例1\\改造前\\home\\rag.py</strong> 文件，在尾部添加以下代码。</p><pre><code class=\"language-python\">def 获取结构化数据查询参数(用户输入):\n&nbsp; &nbsp; 结构化数据 = 对话模式(构造解析用户输入并返回结构化数据用的messages(用户输入))\n&nbsp; &nbsp; 查询参数 = json.loads(结构化数据)\n&nbsp; &nbsp; return 查询参数\n</code></pre><p>这段代码估计你现在已经很容易理解了。第2行代码是通过对话模式将用户输入转化为查询参数。其中对话模式我们在<a href=\"https://time.geekbang.org/column/article/807070\">第4节课</a>讲过，结构化数据相关概念我们在<a href=\"https://time.geekbang.org/column/article/806979\">第3节课</a>讲过。</p><p>大模型返回的是人类能够识别的字符串，而不是程序可以识别的形式。所以第2行代码结构化数据这个变量的值其实是字符串格式，因此我们需要通过第3行代码的json.loads函数，将结构化数据真正转化为程序真正可以识别的查询参数。</p><h2>构造messages</h2><p>前面我们知道了对话模式函数会接收messages参数，那么如何构造这个messages呢？</p><!-- [[[read_end]]] --><p>其实就是下面这个函数。我们需要在<strong>实战案例1\\改造前\\home\\rag.py</strong> 文件尾部添加它。</p><pre><code class=\"language-python\">def 构造解析用户输入并返回结构化数据用的messages(用户输入):\n&nbsp; messages=[\n&nbsp; {\"role\": \"user\", \"content\": f\"\"\"\n&nbsp; 请根据用户的输入返回json格式结果：\n\n&nbsp; 用户：{用户输入}\n&nbsp; 系统：\n&nbsp; \"\"\"},\n&nbsp; ]\n&nbsp; return messages\n</code></pre><p>代码里面的内容我们<a href=\"https://time.geekbang.org/column/article/806979\">第3节课</a>讨论过，如果你想不起来了，可以去回顾一下。</p><h2>在views.py导入</h2><p>然后我们打开<strong>实战案例1\\改造前\\home\\view.py</strong> 文件，在顶部第1行导入刚才的函数。</p><pre><code class=\"language-python\">from .rag import *\n</code></pre><p>细心的同学可能注意到了，这里的 <strong>import</strong> 后面跟着是 <em>，而不是像其他行一样明确的函数名。</em> 表示rag.py文件里面的所有函数，所以使用 * 能够一次性将rag.py文件的所有函数都导入进来，这是一劳永逸的做法。</p><h2>不能正确返回怎么办？</h2><p>然而以上函数是跑不通的，因为太简单了，我们需要补充多一点内容。所以我们需要使用第3节课里返回整数的方法，让大模型做选择题。</p><p>我们需要给出一系列选项，然后让大模型回答正确选项。于是代码就变成了下面这个模样。</p><pre><code class=\"language-python\">def 构造解析用户输入并返回结构化数据用的messages(用户输入):\n&nbsp; messages=[\n&nbsp; {\"role\": \"user\", \"content\": f\"\"\"\n&nbsp; 请根据用户的输入返回json格式结果。注意，模块部分请按以下选项返回对应序号：\n&nbsp; &nbsp;1. 销售对账\n&nbsp; &nbsp;2. 报价单\n&nbsp; &nbsp;3. 销售订单\n&nbsp; &nbsp;4. 送货单\n&nbsp; &nbsp;5. 退货单\n&nbsp; &nbsp;6. 其他\n\n&nbsp; 用户：{用户输入}\n&nbsp; 系统：\n&nbsp; \"\"\"},\n&nbsp; ]\n&nbsp; return messages\n</code></pre><p>我们在第4行添加了一句话“注意，模块部分请按以下选项返回对应序号”。然后在第5行到第10行给出了一系列选项，让大模型做选择题。</p><p>因为我们采用了序号来表示模块，所以还需要修改查询部分的代码。我们需要打开实战案例1\\改造前\\home\\search.py文件，将第5行代码改成使用序号来判断。</p><pre><code class=\"language-python\">from .models import 销售入账记录\n\ndef 查询(查询参数):\n&nbsp; &nbsp; if '模块' in 查询参数:\n&nbsp; &nbsp; &nbsp; &nbsp; if 查询参数['模块'] == 1: #'销售对账'\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if '客户名称' in 查询参数:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 客户 = 查询参数['客户名称'].strip()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 销售入账记录.objects.filter(客户__icontains=客户)\n</code></pre><h3>添加示例</h3><p>因为我们用的是免费的模型，所以完成前面的工作还不够，还需要提供一些示例给大模型。</p><p>添加示例后的代码就变成了下面这样。第12行到第15行就是我们添加的示例。</p><pre><code class=\"language-python\">def 构造解析用户输入并返回结构化数据用的messages(用户输入):\n&nbsp; messages=[\n&nbsp; {\"role\": \"user\", \"content\": f\"\"\"\n&nbsp; 请根据用户的输入返回json格式结果。注意，模块部分请按以下选项返回对应序号：\n&nbsp; &nbsp;1. 销售对账\n&nbsp; &nbsp;2. 报价单\n&nbsp; &nbsp;3. 销售订单\n&nbsp; &nbsp;4. 送货单\n&nbsp; &nbsp;5. 退货单\n&nbsp; &nbsp;6. 其他\n\n&nbsp; 示例1：\n&nbsp; 用户：客户北京极客邦有限公司的款项到账了多少？\n&nbsp; 系统：\n&nbsp; {{'模块':1,'客户名称':'北京极客邦有限公司'}}\n\n&nbsp; 用户：{用户输入}\n&nbsp; 系统：\n&nbsp; \"\"\"},\n&nbsp; ]\n&nbsp; return messages\n</code></pre><h3>添加更多示例</h3><p>那么如果给了大模型一个示例，它还是无法正确输出。这时候有什么办法解决呢？这个问题简单，一个示例不够，那就给多几个示例，但是每个示例应该是不一样的，这样才有效果。</p><p>现在我们就来添加更多示例。后面代码中，第17行到第25行就是我们添加的更多示例。</p><pre><code class=\"language-python\">def 构造解析用户输入并返回结构化数据用的messages(用户输入):\n&nbsp; messages=[\n&nbsp; {\"role\": \"user\", \"content\": f\"\"\"\n&nbsp; 请根据用户的输入返回json格式结果。注意，模块部分请按以下选项返回对应序号：\n&nbsp; &nbsp;1. 销售对账\n&nbsp; &nbsp;2. 报价单\n&nbsp; &nbsp;3. 销售订单\n&nbsp; &nbsp;4. 送货单\n&nbsp; &nbsp;5. 退货单\n&nbsp; &nbsp;6. 其他\n\n&nbsp; 示例1：\n&nbsp; 用户：客户北京极客邦有限公司的款项到账了多少？\n&nbsp; 系统：\n&nbsp; {{'模块':1,'客户名称':'北京极客邦有限公司'}}\n\n&nbsp; 示例2：\n&nbsp; 用户：你好\n&nbsp; 系统：\n&nbsp; {{'模块':6,'其他数据',None}}\n\n&nbsp; 示例3：\n&nbsp; 用户：最近一年你过得如何？\n&nbsp; 系统：\n&nbsp; {{'模块':6,'其他数据',None}}\n\n&nbsp; 用户：{用户输入}\n&nbsp; 系统：\n&nbsp; \"\"\"},\n&nbsp; ]\n&nbsp; return messages\n</code></pre><h3>对大模型结果进一步处理</h3><p>添加了多个示例之后，大模型终于能理解我们要干什么了。然而由于我们用的大模型是免费的，一分价钱一分货，这个免费的大模型往往会返回以下结果。</p><pre><code class=\"language-json\">```json\n{\"模块\": 1, \"客户名称\": \"广州神机妙算有限公司\"}\n</code></pre><pre><code>以上结果程序是无法识别的，那么下一步如何处理呢？\n\n简单！我们专门针对这种情况多添加一个函数，进一步处理 **AI返回的结果**。这里你先有个印象就行，我们后续章节再详细展开。\n\n```python\ndef 对AI结果进一步处理(AI结果):\n  处理后结果 = AI结果.replace(&quot;```json&quot;, '').replace(&quot;```&quot;, '') # 去掉json格式之外无关的内容\n  return 处理后结果\n</code></pre><p>然后我们把这个函数的调用加到对话模式里面。其中第18行就是调用代码。</p><pre><code class=\"language-python\">def 对话模式(messages):\n&nbsp; url = \"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/ernie-lite-8k?access_token=\" + get_access_token()\n&nbsp; \n&nbsp; json_obj = {\n&nbsp; &nbsp; &nbsp; \"messages\": messages,\n&nbsp; }\n\n&nbsp; playload= json.dumps(json_obj)\n&nbsp; headers = {\n&nbsp; &nbsp; &nbsp; 'Content-Type': 'application/json'\n&nbsp; }\n&nbsp; \n&nbsp; response = requests.request(\"POST\", url, headers=headers, data=playload)\n&nbsp; json_result = json.loads(response.text)\n&nbsp; if \"error_code\" in json_result:\n&nbsp; &nbsp; return json_result[\"error_msg\"] + \"：\" + playload\n&nbsp; else:\n&nbsp; &nbsp; 处理后结果 = 对AI结果进一步处理(json_result[\"result\"])\n&nbsp; return 处理后结果\n</code></pre><h3>让大模型不要那么啰嗦</h3><p>处理到现在，我们终于能够获得程序可以识别的结果了。</p><pre><code class=\"language-json\">{\"模块\": 1, \"客户名称\": \"广州神机妙算有限公司\"}\n</code></pre><p>然而大模型经常会画蛇添足添加更多内容。比如后面这样：</p><pre><code class=\"language-json\">我们识别的结果是：{\"模块\": 1, \"客户名称\": \"广州神机妙算有限公司\"}\n</code></pre><p>像这种内容，<strong>对AI结果进一步处理</strong>的函数来说，也是很难处理的。那怎么办呢？</p><p>简单！我们让大模型不要那么啰嗦就可以了。我们只需在后面第4行里多加一个相应的指令。</p><pre><code class=\"language-json\">def 构造解析用户输入并返回结构化数据用的messages(用户输入):\n&nbsp; messages=[\n&nbsp; {\"role\": \"user\", \"content\": f\"\"\"\n&nbsp; 请根据用户的输入返回json格式结果，除此之外不要返回其他内容。注意，模块部分请按以下选项返回对应序号：\n&nbsp; &nbsp;1. 销售对账\n&nbsp; &nbsp;2. 报价单\n&nbsp; &nbsp;3. 销售订单\n&nbsp; &nbsp;4. 送货单\n&nbsp; &nbsp;5. 退货单\n&nbsp; &nbsp;6. 其他\n\n&nbsp; 示例1：\n&nbsp; 用户：客户北京极客邦有限公司的款项到账了多少？\n&nbsp; 系统：\n&nbsp; {{'模块':1,'客户名称':'北京极客邦有限公司'}}\n\n&nbsp; 示例2：\n&nbsp; 用户：你好\n&nbsp; 系统：\n&nbsp; {{'模块':6,'其他数据',None}}\n\n&nbsp; 示例3：\n&nbsp; 用户：最近一年你过得如何？\n&nbsp; 系统：\n&nbsp; {{'模块':6,'其他数据',None}}\n\n&nbsp; 用户：{用户输入}\n&nbsp; 系统：\n&nbsp; \"\"\"},\n&nbsp; ]\n&nbsp; return messages\n</code></pre><p>这么做之后，大模型啰嗦的次数少了很多。然而并不能完全杜绝意外发生。</p><h3>重试</h3><p>遇到这种情况，我们可以重试。我们回到<strong>获取结构化数据查询参数</strong>这个函数，添加重试代码。</p><pre><code class=\"language-python\">def 获取结构化数据查询参数(用户输入):\n&nbsp; 重试总次数 = 2\n&nbsp; 当前重试次数 = 0\n&nbsp; while 当前重试次数 &lt;= 重试总次数:\n&nbsp; &nbsp; try:\n&nbsp; &nbsp; &nbsp; 结构化数据 = 对话模式(构造解析用户输入并返回结构化数据用的messages(用户输入))\n&nbsp; &nbsp; &nbsp; 查询参数 = json.loads(结构化数据)\n&nbsp; &nbsp; &nbsp; return 查询参数\n&nbsp; &nbsp; except:\n&nbsp; &nbsp; &nbsp; 当前重试次数 += 1\n&nbsp; \n&nbsp; return None\n</code></pre><p>其中第3行到第6行，以及第10行和第11行就是重试的代码。一般来说，重试总次数为2会比较合适，因为重试太多的话会导致用户要等很久，影响用户体验。当然你也可以根据你的实际情况来修改。</p><p>可能有同学会好奇，为什么重试策略会有用？因为在软件程序中，同样的代码再运行一遍，还是会得到同样的结果。</p><p>这就要从大模型的原理说起了。因为本质上，大模型是<strong>按照概率来生成输出结果的</strong>。那么这一次输出的结果，就可能跟上一次不一样，所以使用重试策略就可能奏效。</p><h3>以上方法试过都不行怎么办？</h3><p>如果以上方法试过都不行怎么办？</p><p>根据经验，以上这么多方法综合使用能解决大部分问题。如果还是不行，那就是量的问题。我们对症下药。</p><p>如果示例不够多，那就加示例；如果对大模型结果的进一步处理不足，那就添加对应代码；如果大模型还是出现其他意外，那就参考“让大模型不那么啰嗦”那一节，加入更多指令。</p><p>然而这里又引出了一个新的问题，用户在使用我们系统的时候，你并没有在旁边看着，怎么知道以上方法都不行呢？你又怎么知道如何改进呢？这些问题我先卖个关子，我们第7节课再探讨。</p><h2>结合之前的用户输入</h2><p>讲到现在，我们的程序可以根据后面这个问题来正确获得查询参数了。</p><pre><code class=\"language-javascript\">客户广州神机妙算有限公司的款项到账了多少？\n</code></pre><p>返回结果如下。</p><pre><code class=\"language-python\">{\"模块\": 1, \"客户名称\": \"广州神机妙算有限公司\"}\n</code></pre><p>然而这时大模型还不能根据正确获得查询参数。比如用户提问“还剩多少”，大模型就无法做出查询动作，因为仅仅根据这句话，大模型无法知道从哪个模块去查询数据。</p><p>那怎么办呢？我们把之前的问题整合进来去查询就可以了，也就是变成这样。</p><pre><code class=\"language-javascript\">客户广州神机妙算有限公司的款项到账了多少？还剩多少？\n</code></pre><p>那么我们的代码就需要做相应的修改。其中第2行和第3行就是把之前的输入都加上。</p><pre><code class=\"language-python\">def 构造解析用户输入并返回结构化数据用的messages(之前的用户输入,用户输入):\n&nbsp; if 之前的用户输入 is not None and len(之前的用户输入.strip()) &gt; 0:\n&nbsp; &nbsp; 用户输入 = 之前的用户输入 + 用户输入\n&nbsp; messages=[\n&nbsp; {\"role\": \"user\", \"content\": f\"\"\"\n&nbsp; 请根据用户的输入返回json格式结果，除此之外不要返回其他内容。注意，模块部分请按以下选项返回对应序号：\n&nbsp; &nbsp;1. 销售对账\n&nbsp; &nbsp;2. 报价单\n&nbsp; &nbsp;3. 销售订单\n&nbsp; &nbsp;4. 送货单\n&nbsp; &nbsp;5. 退货单\n&nbsp; &nbsp;6. 其他\n\n&nbsp; 示例1：\n&nbsp; 用户：客户北京极客邦有限公司的款项到账了多少？\n&nbsp; 系统：\n&nbsp; {{'模块':1,'客户名称':'北京极客邦有限公司'}}\n\n&nbsp; 示例2：\n&nbsp; 用户：你好\n&nbsp; 系统：\n&nbsp; {{'模块':6,'其他数据',None}}\n\n&nbsp; 示例3：\n&nbsp; 用户：最近一年你过得如何？\n&nbsp; 系统：\n&nbsp; {{'模块':6,'其他数据',None}}\n\n&nbsp; 用户：{用户输入}\n&nbsp; 系统：\n&nbsp; \"\"\"},\n&nbsp; ]\n&nbsp; return messages\n\n</code></pre><p>那么如何获取之前的输入呢？答案是从数据库的对话记录里面获取。</p><pre><code class=\"language-python\">from .models import 对话记录\n\ndef 获取之前的用户输入():\n&nbsp; 之前的用户输入 = \"\"\n&nbsp; 之前的messages = 对话记录.objects.filter(已结束=False).order_by('created_time')\n&nbsp; for current in 之前的messages:\n&nbsp; &nbsp; if current.role == 'user' and current.content is not None:\n&nbsp; &nbsp; &nbsp; 之前的用户输入 += current.content\n&nbsp; return 之前的用户输入\n</code></pre><p>其中第5行就是获取数据库对话记录的代码。然后第7行判断如果是用户的输入，就会获取它。</p><p>我们的获取结构化数据查询参数函数也要做相应的修改。我们在第7行添加了一个传入参数。</p><pre><code class=\"language-python\">def 获取结构化数据查询参数(用户输入):\n&nbsp; 之前的用户输入 = 获取之前的用户输入()\n&nbsp; 重试总次数 = 2\n&nbsp; 当前重试次数 = 0\n&nbsp; while 当前重试次数 &lt;= 重试总次数:\n&nbsp; &nbsp; try:\n&nbsp; &nbsp; &nbsp; 结构化数据 = 对话模式(构造解析用户输入并返回结构化数据用的messages(之前的用户输入,用户输入))\n&nbsp; &nbsp; &nbsp; 查询参数 = json.loads(结构化数据)\n&nbsp; &nbsp; &nbsp; return 查询参数\n&nbsp; &nbsp; except:\n&nbsp; &nbsp; &nbsp; 当前重试次数 += 1\n&nbsp; \n&nbsp; return None\n</code></pre><h2>小结</h2><p>好了，今天这一讲到这里就结束了，最后我们来回顾一下。这一讲我们学会了两件事情。</p><p>第一件事情是如何构造messages来获取程序可以识别的结构化结果。我们从最简单的形式开始，让大家对其核心代码有一个基本的认识。</p><p>第二件事情是当大模型不能正确返回结构化结果时，都有哪些处理方法。我们通过不同方法，一步步来指导大模型输出程序想要的结构化结果，具体包括添加示例、对大模型结果进一步处理、让大模型不要那么啰嗦、重试。</p><p>现在我们可以根据用户的提问从数据库里面查询出数据了，下一节课我们将根据这些数据去回答用户的提问，敬请期待。</p><h2>思考题</h2><p>这节课的代码只支持销售管理模块，如果需要支持其他模块，例如生产管理模块，那该如何处理？</p><p>欢迎你在留言区和我交流互动，如果这节课对你有启发，也推荐分享给身边更多朋友。</p>","neighbors":{"left":{"article_title":"04｜动手实战：UI 实现和国产免费大模型接入","id":807070},"right":{"article_title":"06｜动手实战：回答用户问题","id":808306}},"comments":[{"had_liked":false,"id":395511,"user_name":"overland","can_delete":false,"product_type":"c1","uid":1208835,"ip_address":"安徽","ucode":"609A463519E5F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/72/03/da1fcc81.jpg","comment_is_top":false,"comment_ctime":1731030636,"is_pvip":false,"replies":[{"id":143599,"content":"在“不能正确返回怎么办？”这一节里面的 search.py文件","user_name":"作者回复","user_name_real":"编辑","uid":1337319,"ctime":1731378805,"ip_address":"江苏","comment_id":395511,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"请教下老师，这个提问到查询的动作在哪里，如何实现，好像没讲到，全是讲的是直接拿到数据库结果了，丢进大模型了，那这块如何查询这块有讲吗？","like_count":0,"discussions":[{"author":{"id":1337319,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/e7/0d92745d.jpg","nickname":"Billy火炎焱燚(不羁的风)","note":"","ucode":"63DED1EB2CF6AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653643,"discussion_content":"在“不能正确返回怎么办？”这一节里面的 search.py文件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731378806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":1,"child_discussions":[{"author":{"id":1208835,"avatar":"https://static001.geekbang.org/account/avatar/00/12/72/03/da1fcc81.jpg","nickname":"overland","note":"","ucode":"609A463519E5F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1337319,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/e7/0d92745d.jpg","nickname":"Billy火炎焱燚(不羁的风)","note":"","ucode":"63DED1EB2CF6AE","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":653803,"discussion_content":"老师请教下，我感觉还不是的，这些数据是存在数据库的，应该是提问了转为sql去查吧？search里面没看到文字通过什么然后怎么查数据的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731467195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":653643,"ip_address":"安徽","group_id":0},"score":653803,"extra":""}]}]},{"had_liked":false,"id":395266,"user_name":"无处不在","can_delete":false,"product_type":"c1","uid":1157533,"ip_address":"北京","ucode":"BB535BC6F448F4","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/9d/bdfd9e58.jpg","comment_is_top":false,"comment_ctime":1729946545,"is_pvip":false,"replies":[{"id":143605,"content":"确实","user_name":"作者回复","user_name_real":"编辑","uid":1337319,"ctime":1731379177,"ip_address":"江苏","comment_id":395266,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"记得大模型出来前，我们做这种输入查询是通过NLP做的，提前把一些数据库中的词设置好词性，然后输入的时候，根据词性识别出来公司名称和指标，要是大模型在早出来1年就好了。大模型时代解决了很多问题","like_count":0,"discussions":[{"author":{"id":1337319,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/e7/0d92745d.jpg","nickname":"Billy火炎焱燚(不羁的风)","note":"","ucode":"63DED1EB2CF6AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653650,"discussion_content":"确实","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731379177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":395172,"user_name":"峰回路转","can_delete":false,"product_type":"c1","uid":1217230,"ip_address":"浙江","ucode":"59B9805D7C2D92","user_header":"https://static001.geekbang.org/account/avatar/00/12/92/ce/9d24cb2c.jpg","comment_is_top":false,"comment_ctime":1729655995,"is_pvip":false,"replies":[{"id":143618,"content":"这种方式也可以","user_name":"作者回复","user_name_real":"编辑","uid":1337319,"ctime":1731380217,"ip_address":"江苏","comment_id":395172,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"这里是不是可以把 表名称跟查询字段也加上 {{&#39;模块&#39;:1,&#39;客户名称&#39;:&#39;北京极客邦有限公司&#39;，table_name:&#39;xxx&#39;,field_name:&#39;xxx&#39;}}，这样后面可以做动态sql 执行","like_count":0,"discussions":[{"author":{"id":1337319,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/e7/0d92745d.jpg","nickname":"Billy火炎焱燚(不羁的风)","note":"","ucode":"63DED1EB2CF6AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653664,"discussion_content":"这种方式也可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731380217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394162,"user_name":"welfred","can_delete":false,"product_type":"c1","uid":3586660,"ip_address":"福建","ucode":"233D595E0233CE","user_header":"https://static001.geekbang.org/account/avatar/00/36/ba/64/9370eb63.jpg","comment_is_top":false,"comment_ctime":1726025875,"is_pvip":false,"replies":[{"id":143115,"content":"看具体的大模型而定，很多基于Mistral微调的大模型就支持得不好。\n\n有一个很实用的办法，你直接问你所用的大模型客服。我们之所以抛弃OpenAI的一个原因就是因为OpenAI的客服等于0，而我们后来选的大模型客服很给力","user_name":"作者回复","user_name_real":"作者","uid":1337319,"ctime":1726235226,"ip_address":"广东","comment_id":394162,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"请问老师，提示词使用markdown格式是否会更好呢？还是没差？","like_count":0,"discussions":[{"author":{"id":1337319,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/e7/0d92745d.jpg","nickname":"Billy火炎焱燚(不羁的风)","note":"","ucode":"63DED1EB2CF6AE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651121,"discussion_content":"看具体的大模型而定，很多基于Mistral微调的大模型就支持得不好。\n\n有一个很实用的办法，你直接问你所用的大模型客服。我们之所以抛弃OpenAI的一个原因就是因为OpenAI的客服等于0，而我们后来选的大模型客服很给力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1726235226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":395777,"user_name":"lost","can_delete":false,"product_type":"c1","uid":1024779,"ip_address":"河北","ucode":"EEC6953B901A0B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epmqtj92qU8CODjBqY3Ue7Ulp0QVMJgTU2zgFD16hrdapT1l2SXAWSf9SibPYDIWyc64EYeV4bTcfw/132","comment_is_top":false,"comment_ctime":1732024562,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"```请根据用户的输入返回json格式结果，除此之外不要返回其他内容。注意，模块部分请按以下选项返回对应序号： \n1. 销售对账 2. 报价单 3. 销售订单 4. 送货单 5. 退货单 6. 其他 \n示例1：\nxxxxx\n```\n如果这个mis系统很复杂，模块非常多，比如有成百上千个，这个时候提示词包括示例可能会非常非常的大，不可能一下子就传给大模型！\n请教一下老师，这种情况应该怎么处理","like_count":0},{"had_liked":false,"id":395454,"user_name":"Geek_fbf3a3","can_delete":false,"product_type":"c1","uid":4033130,"ip_address":"四川","ucode":"98ED0656762DE7","user_header":"","comment_is_top":false,"comment_ctime":1730864927,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100817901,"comment_content":"课后打卡：可以添加生产模块的示例吧","like_count":0}]}