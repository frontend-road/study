{"id":733840,"title":"01｜持久的传奇：Tomcat的发展历程与框架演进","content":"<p>你好，我是郭屹，从今天开始我们来学习手写 MiniTomcat。</p><p>作为使用Java语言进行Web程序开发的人来说，对Tomcat想必是不陌生的。Tomcat是一款轻量级的Java应用服务器，最早是Sun公司在1998年开发的。当时开发Tomcat的目标是成为Sun公司的Java Servlet和JSP规范的参考实现。</p><p>如今Tomcat是业务开发首选的开源Web应用服务器，在Spring MVC项目中会把它作为程序的启动容器，甚至在Spring Boot框架中直接将Tomcat内置为Web应用的启动容器，不再需要程序开发者自行配置，进一步简化了开发门槛。可以说，虽然Tomcat不是Web服务器的唯一选择，但也和Spring一样，成为了Java开发领域事实上的标准。二十五年以来长盛不衰，在日新月异的IT领域，可谓是持久的传奇。</p><h2>版本变化</h2><p>跟任何一个成功的产品一样，Tomcat也不是一诞生就是现在这个样子的，它也是经历了逐渐完善和强大的发展历程。</p><p><img src=\"https://static001.geekbang.org/resource/image/yy/ce/yy534ab3e199fe942495da89ab56bece.png?wh=1920x981\" alt=\"图片\" title=\"图片源自网络\"></p><p>Tomcat的发明人是James Duncan Davidson。他在1997年加入Sun公司，然后开始动手写Tomcat，这是Sun对外提供的一个Servlet容器的参考实现，后来大名鼎鼎的Spring发明人Rod Johnson也是Servlet专家组成员。1998年对外公开的时候标记为2.0版本，到了1999年，Sun公司就把它捐赠给了Apache基金会。</p><!-- [[[read_end]]] --><p>下面我们按照发布时间来梳理一下Tomcat的主要版本。</p><p><img src=\"https://static001.geekbang.org/resource/image/ey/17/eyy97a8bec58d154e3edf356cb8f2d17.png?wh=5120x2190\" alt=\"\"></p><p>目前正在开发中的版本是11。</p><h2>程序内部结构</h2><p>作为程序员，除了了解版本发布情况之外，我们更要仔细琢磨Tomcat程序的内部结构，因为从内部结构中我们可以收获更多的技术思想。</p><p>我们先看一下它的宏观结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/84/37/8424cda2303f030e15c0f162f16e7737.png?wh=1920x1072\" alt=\"图片\"></p><p>一眼就可以看出，Tomcat的结构出奇地简单自然，从最顶层来看，就是一个Server提供Service，在内部通过容器管理Servlet，对外通过Connector接受客户端的访问。</p><p>如果你写过服务器程序，那么你应该对这个结构一点都不陌生，几乎所有的Server软件都是这个结构。往内部再细分，一般就是通过Socket完成客户端的连接管理，由一个内部容器按照规定的生命周期管理Servlet。</p><p>我们再仔细点，看看Tomcat是如何响应请求的。</p><ol>\n<li>用户在浏览器输入地址，请求被发送到服务器端，按照Socket模型，这个访问被一个端口驻守的程序收到，如8080。在Tomcat中，负责这一块的是在那里监听的Coyote Connector。</li>\n<li>Connector解析Socket来的请求流，再将该请求交给它所在的Service的Engine来处理，并等待Engine的回应。</li>\n<li>Engine获得请求URI，匹配到合适的虚拟主机Host。</li>\n<li>这个Host获得请求串，匹配到合适的Context。</li>\n<li>在Context中寻找出对应的Servlet（其实是一个Wrapper） 处理数据。</li>\n<li>将构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用Servlet的 <code>service()</code> 执行业务逻辑、数据存储等程序。</li>\n<li>Context把执行完之后的HttpServletResponse对象返回给Host。</li>\n<li>Host把HttpServletResponse对象返回给Engine。</li>\n<li>Engine把HttpServletResponse对象返回Connector。</li>\n<li>Connector把HttpServletResponse对象序列化返回给浏览器。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/3e/df/3e9479e9ff9c440a5710c140b5c4a4df.png?wh=1920x950\" alt=\"图片\"></p><p>以上就是 Tomcat 处理一个HTTP请求的完整流程。</p><p>核心道理很简单，说白了就是一个Socket Server，但是对应到工程上却并不容易。如果这个服务器只需要响应一次请求，确实是没有什么可做的，但是现实世界并不是这样，我们还要考虑一些啰嗦事。</p><ol>\n<li>如何管理多个Servlet？</li>\n<li>如何支持多个独立的应用？</li>\n<li>大量用户请求的性能问题如何解决？</li>\n</ol><p>作为一款实用的Servlet应用服务器，考虑到这些事项，内部的程序结构会变得很复杂。这些在我们学习了Tomcat的源码后，会有很多的启发。</p><h2>程序结构的演化</h2><p>没有人能一步到达终点，软件的演化过程中有很多争论妥协，有的设计到后面又被抛弃了，反反复复。Tomcat也走过了同样的路，编程的顶级高手也是要呕心沥血才能修得正果的。接下来我们就来看一下，Tomcat是如何一步步演化的。</p><h4>第一步：设计一个简单的Socket Server</h4><p>设计一个Socket Server，启动后负责监听网络来的请求，获得一个Socket连接。然后这个Server要解析请求串，知道需要处理什么事情，然后调用相关的程序完成相关任务。最后得到返回处理结果，将这个结果再通过Socket传回客户端。</p><p>这个简单的结构很有效，也很简明，但是缺点显而易见：请求监听和处理逻辑放在一起扩展性很差。处理是一个一个串行完成的，性能不好。</p><h4>第二步：将连接与处理分离</h4><p>因为第一步显而易见的缺点，所以我们把Server拆分成两部分：Connector和Processor。Server只是一个外壳，负责启动。Connector来负责监听网络来的请求，获得一个Socket连接，解析请求后发给Processor，然后Processor调用相关的程序完成相关任务，最后得到返回处理结果，将这个结果返回给Connector，Connector再通过Socket传回网络客户端。</p><p>经过这一步的分工，Server的程序结构更加清晰，各司其职。但之前的缺点并没有完全优化，性能问题还没有解决。为了提高性能，需要设计多个Processor，放到一个池中，支持并发执行。</p><h4>第三步：多层容器Container</h4><p>为了进一步扩展，这一步我们要把后面对Servlet的处理分成多层容器，首先是直接包装Servlet的Wrapper，然后对应一个应用Context，一个Context对象会包含多个Wrapper对象，用于分别管理多个 Servlet，而Context之间是独立的，再往上抽象出Host和Engine。</p><p>结构图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/9d/d9a7502b8a368f75cb0d36454119e19d.png?wh=1920x1110\" alt=\"图片\"></p><ul>\n<li>Engine：这个是Tomcat的顶层容器，字如其义，一个 Engine就是一个完整的 Servlet 引擎，它接收来自Connector的请求，并传给合适的Host来处理，并将结果返回给Connector。</li>\n<li>Host：表示一个主机，即一个Tomcat可以管理多个虚拟的主机。</li>\n<li>Context：表示一个Web应用，即WebApp下的应用。一个Host可以有多个Context。</li>\n<li>Wrapper：表示一个Servlet，用来具体处理相应请求。一个Context可以有多个Wrapper。</li>\n</ul><p>这个多层嵌套的Container结构一直保留着，不过从实际效果上看，Engine和Host其实意义不大了，Docker技术的出现，将Tomcat的这个设计变成了鸡肋。</p><h4>第四步：Service</h4><p>现在演化到了Connecter + 多层Container这个结构，继续扩展。用Service这个概念把Connector和Container包含进去了。</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/bc/f894c7c0c8ea457cb861a6854yy904bc.png?wh=1920x1154\" alt=\"图片\"></p><p>这样在一个Server中可以包含多个Service，每一个Service都是独立的。一个Service负责维护多个Connector和一个顶层Container。当需要使用多个端口时，只需要配置多个Service。</p><p>Tomcat默认会启动一个名为Catalina的Service。</p><p><img src=\"https://static001.geekbang.org/resource/image/23/fa/23662f5cbb3abb5f347d7f5b72df27fa.png?wh=1920x944\" alt=\"图片\"></p><h4>第五步：生命周期（LifeCycle）</h4><p>Tomcat中每个组件都有生命周期。Connector和Container都实现了LifeCycle接口。生命周期有BEFORE_INIT_EVENT、AFTER_INIT_EVENT、START_EVENT等状态。生命周期相关的方法有init()、start()、stop、getState()等。</p><h4>第六步：引入NIO</h4><p>为了支持高并发，在原有的BIO模式下已经很难继续扩展这个能力，于是Tomcat 6.0之后引入了NIO的支持。结构图示如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/27/48/27368da773161e4b110a231e517b3948.png?wh=1920x605\" alt=\"图片\"></p><p>对NIO的支持，宏观上主要影响的是Connector这一部分。它是现代Tomcat对高并发提供支持的设计，Tomcat 6.0中就提供了支持，早期的server.xml文件中，我们可以看到这么一个配置：</p><pre><code class=\"language-plain\">&lt;Connector connectionTimeout=\"20000\" maxThreads=\"1000\" port=\"8080\" protocol=\"org.apache.coyote.http11.Http11NioProtocol\" redirectPort=\"8443\"/&gt;\n</code></pre><p>这就表明它使用了NIO模式。</p><p>总体来看，对大规模企业应用，NIO性能上会明显优于BIO，所以Tomcat 9.0之后干脆就不支持BIO模式了。程序模式由BIO演化到NIO，是为了多路复用，技术上是比较困难的，从实际过程来回顾，这一部分的设计也经历了反复。</p><p>开始的结构是这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/24/a5/2446a998f9b243ebb7565842bfdcfda5.png?wh=1920x923\" alt=\"图片\"></p><p>这个结构很庞大，有多个Acceptor和多个Poller，程序复杂性也高。由于复杂性以及实际效果，后面的版本将这个设计缩了回来，从Tomcat 9.0开始，NioEndpoint结构中Acceptor与Poller仅支持定义单个Acceptor和单个Poller。也就是说开始的构思有点过度设计了，可见高手也不是一次性能把事情弄好的，凡事都要不断切磋。现在的版本进一步将NIO变成了NIO2，成了完全的异步模式。</p><h2>MiniTomcat的路径</h2><p>我们自己手写MiniTomcat的目的是学习Tomcat，更好地弄懂它。我们也会按照由简到繁的过程一步步构建，因为我们知道了Tomcat本身的发展过程，所以也按照它的过程一步步走过来。自己手写一遍是最好的学习方式，纸上得来终觉浅，绝知此事要躬行。</p><p>实际上，我们只会走到第四步，也就是Connector + 多层Container。这么考虑的原因是后面的内容难度比较高，篇幅也多，应当单独成书，未来有机会我们再公布出来。到了第四步，Tomcat早期版本的核心部分也都包含进来了，对应着Tomcat 6.0之前的状况。</p><p>我们在今后的学习过程中，心里要有这个大图景。</p><h2>小结</h2><p>Tomcat获得了持久的成功，对业界影响深远。这里的关键就在于创始者James Duncan Davidson，他立意高远，眼界宏大，终成数十年以来的“名门正派”。同时，我们也看到了，顶级程序员也不是神仙，并不能一次性构建好一个Server，也需要不断尝试，不断接受真实世界的反馈并调整设计方案，NIO实现中的Acceptor和Poller池最终被废弃就是明证。</p><p>我们作为后学者要学会沿着巨人的脚步，一步步前进。对技术的高峰，或许“虽不能至，而心向往焉”，相信沿途也会收获很多悟道的喜悦。</p><h2>思考题</h2><p>你可以说一说Tomcat的内部构造是怎样的吗，共包含哪几部分？欢迎你把答案分享到评论区，也欢迎你把这节课的内容分享给其他朋友，邀他一起学习。我们下节课再见！</p>","comments":[{"had_liked":false,"id":385324,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1702448281,"is_pvip":false,"replies":[{"id":140438,"content":"Peter，高兴再见到你。你的问题涵盖了全课程，后面学了都有讲到。这里我只试着回答第一个问题，JSP确实基本被废弃了，最近些年，用单页面应用实现前后端分离。但是Tomcat服务器主要为了兼容历史，还是保留了对JSP的支持，次要的原因，JSP不能一概抛弃，任何一门技术都有适用范围，对于简单的小应用，JSP是很适合的。","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1702521773,"ip_address":"北京","comment_id":385324,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100636401,"comment_content":"请教老师几个问题：\nQ1：Tomcat为什么还支持JSP？\n第01课中提到了Tomcat的发展历史，每个版本都支持JSP，包括最新的版本10。但JSP基本已经被废弃，没有人用JSP了。为什么还要支持JSP？\nQ2：Tomcat中Engine只有一个实例吗？\nQ3：一个context对应一个web应用，context下面有多个servlet。那么，context下面的servlet数量是怎么决定的？\nQ4：端口和service对应吗？即一个端口对应一个service?\nQ5：NIO实现中，为什么抛弃多个Acceptor和Poller的方案而采用单例的方案？","like_count":3,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633709,"discussion_content":"Peter，高兴再见到你。你的问题涵盖了全课程，后面学了都有讲到。这里我只试着回答第一个问题，JSP确实基本被废弃了，最近些年，用单页面应用实现前后端分离。但是Tomcat服务器主要为了兼容历史，还是保留了对JSP的支持，次要的原因，JSP不能一概抛弃，任何一门技术都有适用范围，对于简单的小应用，JSP是很适合的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1702521774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133678,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4c/6e/5435e214.jpg","nickname":"HH🐷🐠","note":"","ucode":"C50172BDA604D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633712,"discussion_content":"Q5个人猜想是多个维护代码难度大， 而且性能并不比单个高多少。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702527566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385380,"user_name":"HH🐷🐠","can_delete":false,"product_type":"c1","uid":1133678,"ip_address":"广东","ucode":"C50172BDA604D5","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/6e/5435e214.jpg","comment_is_top":false,"comment_ctime":1702536025,"is_pvip":false,"replies":[{"id":140447,"content":"在准备，已经给几个研究生试讲过了，还没整理。之后再商量公开。","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1702560260,"ip_address":"北京","comment_id":385380,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100636401,"comment_content":"🌝🌝看了本文更加期待老师的第五和第六部分， 不知道老师是否有计划，那部分也是重头戏。","like_count":2,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633749,"discussion_content":"在准备，已经给几个研究生试讲过了，还没整理。之后再商量公开。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702560260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":1,"child_discussions":[{"author":{"id":1133678,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4c/6e/5435e214.jpg","nickname":"HH🐷🐠","note":"","ucode":"C50172BDA604D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":633777,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702615461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":633749,"ip_address":"广东","group_id":0},"score":633777,"extra":""}]}]},{"had_liked":false,"id":385390,"user_name":"Geek_50a5cc","can_delete":false,"product_type":"c1","uid":1786951,"ip_address":"北京","ucode":"0F6C1C2552261F","user_header":"","comment_is_top":false,"comment_ctime":1702548275,"is_pvip":false,"replies":[{"id":140446,"content":"赞","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1702560178,"ip_address":"北京","comment_id":385390,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100636401,"comment_content":"根据8.0的Server.xml 来看和老师讲解 的，基本上就是分为 Server,Service,Connector,Egine,Host,(Listener，Realm,Value一些小组件),Context,Servlet(Wrapper);","like_count":1,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633748,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702560179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385333,"user_name":"Martito","can_delete":false,"product_type":"c1","uid":3171426,"ip_address":"山东","ucode":"6C29938DB2A92B","user_header":"https://static001.geekbang.org/account/avatar/00/30/64/62/8b20c551.jpg","comment_is_top":false,"comment_ctime":1702455646,"is_pvip":false,"replies":[{"id":140442,"content":"赞！重要的地方记下来","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1702538989,"ip_address":"北京","comment_id":385333,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100636401,"comment_content":"Container： 用于管理 Servlet 和 JSP 的生命周期。\n\nEngine： Engine 是最高级别的容器，代表整个 Tomcat 服务器。一个 Tomcat 实例可以包含多个 Engine，每个 Engine 通常对应一个虚拟主机host。\n\nHost： Host 定义了一个虚拟主机，可以包含多个 Context。\n\nContext： Context 表示一个 Web 应用程序，每个 Context 定义了特定 Web 应用的配置信息。\n\nServlet：处理业务逻辑和数据存储的组件，通过 HttpServletRequest 和 HttpServletResponse 与客户端进行交互。","like_count":1,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633731,"discussion_content":"赞！重要的地方记下来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702538990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385979,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1068571,"ip_address":"美国","ucode":"65AF6AF292DAD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/1b/f4b786b9.jpg","comment_is_top":false,"comment_ctime":1703756778,"is_pvip":false,"replies":[{"id":140670,"content":"你的建议呢？","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1703821383,"ip_address":"湖南","comment_id":385979,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100636401,"comment_content":"老师 希望把手写系列延续出去 之后还会手写什么中间件嘛","like_count":0,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634698,"discussion_content":"你的建议呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703821383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":1,"child_discussions":[{"author":{"id":2789996,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKw8ictgYcqf6vA0VtY9iabwS2nuZ4b46RvTW8FTe9VdjouiarROhqzxdia7H65tUw65tkibyeu8a4AHDw/132","nickname":"Geek_b0e84e","note":"","ucode":"CA160DDE5A2845","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":635254,"discussion_content":"minredis或者kafka中间件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704640642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":634698,"ip_address":"安徽","group_id":0},"score":635254,"extra":""}]},{"author":{"id":1006884,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/24/1ffe5724.jpg","nickname":"爱上星云","note":"","ucode":"658529DC4D6295","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634765,"discussion_content":"手写MQ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703906901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"天津","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385431,"user_name":"张翀","can_delete":false,"product_type":"c1","uid":1241064,"ip_address":"四川","ucode":"835A01424FDD5E","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/e8/076a6f59.jpg","comment_is_top":false,"comment_ctime":1702621312,"is_pvip":false,"replies":[{"id":140468,"content":"不会详细讲，后面会简单探讨一下。这一部分应单独成书。","user_name":"作者回复","user_name_real":"编辑","uid":1864890,"ctime":1702688119,"ip_address":"北京","comment_id":385431,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100636401,"comment_content":"请问本系列课程会讲解Tomcat的nio实现和Apr等实现吗","like_count":0,"discussions":[{"author":{"id":1864890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cojb2AA3eM620kb7hj7YoOpq8XI0iaPyfajnQLO6icAhuSoYWR1vrdOZB2nmSuETxmuheo3sxec698SD6RhTFxgQ/132","nickname":"Yale Guo","note":"","ucode":"6736810620B3F0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633863,"discussion_content":"不会详细讲，后面会简单探讨一下。这一部分应单独成书。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702688119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}