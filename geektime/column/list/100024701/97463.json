{"id":97463,"title":"26 | 内核态内存映射：如何找到正确的会议室？","content":"<p>前面讲用户态内存映射机制的时候，我们已经多次引申出了内核的映射机制，但是咱们都暂时放了放，这一节我们就来详细解析一下，让你彻底搞懂它。</p><p>首先，你要知道，内核态的内存映射机制，主要包含以下几个部分：</p><ul>\n<li>\n<p>内核态内存映射函数vmalloc、kmap_atomic是如何工作的；</p>\n</li>\n<li>\n<p>内核态页表是放在哪里的，如何工作的？swapper_pg_dir是怎么回事；</p>\n</li>\n<li>\n<p>出现了内核态缺页异常应该怎么办？</p>\n</li>\n</ul><h2>内核页表</h2><p>和用户态页表不同，在系统初始化的时候，我们就要创建内核页表了。</p><p>我们从内核页表的根swapper_pg_dir开始找线索，在arch/x86/include/asm/pgtable_64.h中就能找到它的定义。</p><pre><code>extern pud_t level3_kernel_pgt[512];\nextern pud_t level3_ident_pgt[512];\nextern pmd_t level2_kernel_pgt[512];\nextern pmd_t level2_fixmap_pgt[512];\nextern pmd_t level2_ident_pgt[512];\nextern pte_t level1_fixmap_pgt[512];\nextern pgd_t init_top_pgt[];\n\n\n#define swapper_pg_dir init_top_pgt\n</code></pre><p>swapper_pg_dir指向内核最顶级的目录pgd，同时出现的还有几个页表目录。我们可以回忆一下，64位系统的虚拟地址空间的布局，其中XXX_ident_pgt对应的是直接映射区，XXX_kernel_pgt对应的是内核代码区，XXX_fixmap_pgt对应的是固定映射区。</p><p>它们是在哪里初始化的呢？在汇编语言的文件里面的arch\\x86\\kernel\\head_64.S。这段代码比较难看懂，你只要明白它是干什么的就行了。</p><!-- [[[read_end]]] --><pre><code>__INITDATA\n\n\nNEXT_PAGE(init_top_pgt)\n\t.quad   level3_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE\n\t.org    init_top_pgt + PGD_PAGE_OFFSET*8, 0\n\t.quad   level3_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE\n\t.org    init_top_pgt + PGD_START_KERNEL*8, 0\n\t/* (2^48-(2*1024*1024*1024))/(2^39) = 511 */\n\t.quad   level3_kernel_pgt - __START_KERNEL_map + _PAGE_TABLE\n\n\nNEXT_PAGE(level3_ident_pgt)\n\t.quad\tlevel2_ident_pgt - __START_KERNEL_map + _KERNPG_TABLE\n\t.fill\t511, 8, 0\nNEXT_PAGE(level2_ident_pgt)\n\t/* Since I easily can, map the first 1G.\n\t * Don't set NX because code runs from these pages.\n\t */\n\tPMDS(0, __PAGE_KERNEL_IDENT_LARGE_EXEC, PTRS_PER_PMD)\n\n\nNEXT_PAGE(level3_kernel_pgt)\n\t.fill\tL3_START_KERNEL,8,0\n\t/* (2^48-(2*1024*1024*1024)-((2^39)*511))/(2^30) = 510 */\n\t.quad\tlevel2_kernel_pgt - __START_KERNEL_map + _KERNPG_TABLE\n\t.quad\tlevel2_fixmap_pgt - __START_KERNEL_map + _PAGE_TABLE\n\n\nNEXT_PAGE(level2_kernel_pgt)\n\t/*\n\t * 512 MB kernel mapping. We spend a full page on this pagetable\n\t * anyway.\n\t *\n\t * The kernel code+data+bss must not be bigger than that.\n\t *\n\t * (NOTE: at +512MB starts the module area, see MODULES_VADDR.\n\t *  If you want to increase this then increase MODULES_VADDR\n\t *  too.)\n\t */\n\tPMDS(0, __PAGE_KERNEL_LARGE_EXEC,\n\t\tKERNEL_IMAGE_SIZE/PMD_SIZE)\n\n\nNEXT_PAGE(level2_fixmap_pgt)\n\t.fill\t506,8,0\n\t.quad\tlevel1_fixmap_pgt - __START_KERNEL_map + _PAGE_TABLE\n\t/* 8MB reserved for vsyscalls + a 2MB hole = 4 + 1 entries */\n\t.fill\t5,8,0\n\n\nNEXT_PAGE(level1_fixmap_pgt)\n\t.fill\t51\n</code></pre><p>内核页表的顶级目录init_top_pgt，定义在__INITDATA里面。咱们讲过ELF的格式，也讲过虚拟内存空间的布局。它们都有代码段，还有一些初始化了的全局变量，放在.init区域。这些说的就是这个区域。可以看到，页表的根其实是全局变量，这就使得我们初始化的时候，甚至内存管理还没有初始化的时候，很容易就可以定位到。</p><p>接下来，定义init_top_pgt包含哪些项，这个汇编代码比较难懂了。你可以简单地认为，quad是声明了一项的内容，org是跳到了某个位置。</p><p>所以，init_top_pgt有三项，上来先有一项，指向的是level3_ident_pgt，也即直接映射区页表的三级目录。为什么要减去__START_KERNEL_map呢？因为level3_ident_pgt是定义在内核代码里的，写代码的时候，写的都是虚拟地址，谁写代码的时候也不知道将来加载的物理地址是多少呀，对不对？</p><p>因为level3_ident_pgt是在虚拟地址的内核代码段里的，而__START_KERNEL_map正是虚拟地址空间的内核代码段的起始地址，这在讲64位虚拟地址空间的时候都讲过了，要是想不起来就赶紧去回顾一下。这样，level3_ident_pgt减去__START_KERNEL_map才是物理地址。</p><p>第一项定义完了以后，接下来我们跳到PGD_PAGE_OFFSET的位置，再定义一项。从定义可以看出，这一项就应该是__PAGE_OFFSET_BASE对应的。__PAGE_OFFSET_BASE是虚拟地址空间里面内核的起始地址。第二项也指向level3_ident_pgt，直接映射区。</p><pre><code>PGD_PAGE_OFFSET = pgd_index(__PAGE_OFFSET_BASE)\nPGD_START_KERNEL = pgd_index(__START_KERNEL_map)\nL3_START_KERNEL = pud_index(__START_KERNEL_map)\n</code></pre><p>第二项定义完了以后，接下来跳到PGD_START_KERNEL的位置，再定义一项。从定义可以看出，这一项应该是__START_KERNEL_map对应的项，__START_KERNEL_map是虚拟地址空间里面内核代码段的起始地址。第三项指向level3_kernel_pgt，内核代码区。</p><p>接下来的代码就很类似了，就是初始化个表项，然后指向下一级目录，最终形成下面这张图。</p><p><img src=\"https://static001.geekbang.org/resource/image/78/6d/78c8d44d7d8c08c03eee6f7a94652d6d.png?wh=2188*2623\" alt=\"\"></p><p>内核页表定义完了，一开始这里面的页表能够覆盖的内存范围比较小。例如，内核代码区512M，直接映射区1G。这个时候，其实只要能够映射基本的内核代码和数据结构就可以了。可以看出，里面还空着很多项，可以用于将来映射巨大的内核虚拟地址空间，等用到的时候再进行映射。</p><p>如果是用户态进程页表，会有mm_struct指向进程顶级目录pgd，对于内核来讲，也定义了一个mm_struct，指向swapper_pg_dir。</p><pre><code>struct mm_struct init_mm = {\n\t.mm_rb\t\t= RB_ROOT,\n\t.pgd\t\t= swapper_pg_dir,\n\t.mm_users\t= ATOMIC_INIT(2),\n\t.mm_count\t= ATOMIC_INIT(1),\n\t.mmap_sem\t= __RWSEM_INITIALIZER(init_mm.mmap_sem),\n\t.page_table_lock =  __SPIN_LOCK_UNLOCKED(init_mm.page_table_lock),\n\t.mmlist\t\t= LIST_HEAD_INIT(init_mm.mmlist),\n\t.user_ns\t= &amp;init_user_ns,\n\tINIT_MM_CONTEXT(init_mm)\n};\n</code></pre><p>定义完了内核页表，接下来是初始化内核页表，在系统启动的时候start_kernel会调用setup_arch。</p><pre><code>void __init setup_arch(char **cmdline_p)\n{\n\t/*\n\t * copy kernel address range established so far and switch\n\t * to the proper swapper page table\n\t */\n\tclone_pgd_range(swapper_pg_dir     + KERNEL_PGD_BOUNDARY,\n\t\t\tinitial_page_table + KERNEL_PGD_BOUNDARY,\n\t\t\tKERNEL_PGD_PTRS);\n\n\n\tload_cr3(swapper_pg_dir);\n\t__flush_tlb_all();\n......\n\tinit_mm.start_code = (unsigned long) _text;\n\tinit_mm.end_code = (unsigned long) _etext;\n\tinit_mm.end_data = (unsigned long) _edata;\n\tinit_mm.brk = _brk_end;\n......\n\tinit_mem_mapping();\n......\n}\n</code></pre><p>在setup_arch中，load_cr3(swapper_pg_dir)说明内核页表要开始起作用了，并且刷新了TLB，初始化init_mm的成员变量，最重要的就是init_mem_mapping。最终它会调用kernel_physical_mapping_init。</p><pre><code>/*\n * Create page table mapping for the physical memory for specific physical\n * addresses. The virtual and physical addresses have to be aligned on PMD level\n * down. It returns the last physical address mapped.\n */\nunsigned long __meminit\nkernel_physical_mapping_init(unsigned long paddr_start,\n\t\t\t     unsigned long paddr_end,\n\t\t\t     unsigned long page_size_mask)\n{\n\tunsigned long vaddr, vaddr_start, vaddr_end, vaddr_next, paddr_last;\n\n\n\tpaddr_last = paddr_end;\n\tvaddr = (unsigned long)__va(paddr_start);\n\tvaddr_end = (unsigned long)__va(paddr_end);\n\tvaddr_start = vaddr;\n\n\n\tfor (; vaddr &lt; vaddr_end; vaddr = vaddr_next) {\n\t\tpgd_t *pgd = pgd_offset_k(vaddr);\n\t\tp4d_t *p4d;\n\n\n\t\tvaddr_next = (vaddr &amp; PGDIR_MASK) + PGDIR_SIZE;\n\n\n\t\tif (pgd_val(*pgd)) {\n\t\t\tp4d = (p4d_t *)pgd_page_vaddr(*pgd);\n\t\t\tpaddr_last = phys_p4d_init(p4d, __pa(vaddr),\n\t\t\t\t\t\t   __pa(vaddr_end),\n\t\t\t\t\t\t   page_size_mask);\n\t\t\tcontinue;\n\t\t}\n\n\n\t\tp4d = alloc_low_page();\n\t\tpaddr_last = phys_p4d_init(p4d, __pa(vaddr), __pa(vaddr_end),\n\t\t\t\t\t   page_size_mask);\n\n\n\t\tp4d_populate(&amp;init_mm, p4d_offset(pgd, vaddr), (pud_t *) p4d);\n\t}\n\t__flush_tlb_all();\n\n\n\treturn paddr_l\n</code></pre><p>在kernel_physical_mapping_init里，我们先通过__va将物理地址转换为虚拟地址，然后再创建虚拟地址和物理地址的映射页表。</p><p>你可能会问，怎么这么麻烦啊？既然对于内核来讲，我们可以用__va和__pa直接在虚拟地址和物理地址之间直接转来转去，为啥还要辛辛苦苦建立页表呢？因为这是CPU和内存的硬件的需求，也就是说，CPU在保护模式下访问虚拟地址的时候，就会用CR3这个寄存器，这个寄存器是CPU定义的，作为操作系统，我们是软件，只能按照硬件的要求来。</p><p>你可能又会问了，按照咱们讲初始化的时候的过程，系统早早就进入了保护模式，到了setup_arch里面才load_cr3，如果使用cr3是硬件的要求，那之前是怎么办的呢？如果你仔细去看arch\\x86\\kernel\\head_64.S，这里面除了初始化内核页表之外，在这之前，还有另一个页表early_top_pgt。看到关键字early了嘛？这个页表就是专门用在真正的内核页表初始化之前，为了遵循硬件的要求而设置的。早期页表不是我们这节的重点，这里我就不展开多说了。</p><h2>vmalloc和kmap_atomic原理</h2><p>在用户态可以通过malloc函数分配内存，当然malloc在分配比较大的内存的时候，底层调用的是mmap，当然也可以直接通过mmap做内存映射，在内核里面也有相应的函数。</p><p>在虚拟地址空间里面，有个vmalloc区域，从VMALLOC_START开始到VMALLOC_END，可以用于映射一段物理内存。</p><pre><code>/**\n *\tvmalloc  -  allocate virtually contiguous memory\n *\t@size:\t\tallocation size\n *\tAllocate enough pages to cover @size from the page level\n *\tallocator and map them into contiguous kernel virtual space.\n *\n *\tFor tight control over page level allocator and protection flags\n *\tuse __vmalloc() instead.\n */\nvoid *vmalloc(unsigned long size)\n{\n\treturn __vmalloc_node_flags(size, NUMA_NO_NODE,\n\t\t\t\t    GFP_KERNEL);\n}\n\n\nstatic void *__vmalloc_node(unsigned long size, unsigned long align,\n\t\t\t    gfp_t gfp_mask, pgprot_t prot,\n\t\t\t    int node, const void *caller)\n{\n\treturn __vmalloc_node_range(size, align, VMALLOC_START, VMALLOC_END,\n\t\t\t\tgfp_mask, prot, 0, node, caller);\n}\n</code></pre><p>我们再来看内核的临时映射函数kmap_atomic的实现。从下面的代码我们可以看出，如果是32位有高端地址的，就需要调用set_pte通过内核页表进行临时映射；如果是64位没有高端地址的，就调用page_address，里面会调用lowmem_page_address。其实低端内存的映射，会直接使用__va进行临时映射。</p><pre><code>void *kmap_atomic_prot(struct page *page, pgprot_t prot)\n{\n......\n\tif (!PageHighMem(page))\n\t\treturn page_address(page);\n......\n\tvaddr = __fix_to_virt(FIX_KMAP_BEGIN + idx);\n\tset_pte(kmap_pte-idx, mk_pte(page, prot));\n......\n\treturn (void *)vaddr;\n}\n\n\nvoid *kmap_atomic(struct page *page)\n{\n\treturn kmap_atomic_prot(page, kmap_prot);\n}\n\n\nstatic __always_inline void *lowmem_page_address(const struct page *page)\n{\n\treturn page_to_virt(page);\n}\n\n\n#define page_to_virt(x)\t__va(PFN_PHYS(page_to_pfn(x)\n</code></pre><h2>内核态缺页异常</h2><p>可以看出，kmap_atomic和vmalloc不同。kmap_atomic发现，没有页表的时候，就直接创建页表进行映射了。而vmalloc没有，它只分配了内核的虚拟地址。所以，访问它的时候，会产生缺页异常。</p><p>内核态的缺页异常还是会调用do_page_fault，但是会走到咱们上面用户态缺页异常中没有解析的那部分vmalloc_fault。这个函数并不复杂，主要用于关联内核页表项。</p><pre><code>/*\n * 32-bit:\n *\n *   Handle a fault on the vmalloc or module mapping area\n */\nstatic noinline int vmalloc_fault(unsigned long address)\n{\n\tunsigned long pgd_paddr;\n\tpmd_t *pmd_k;\n\tpte_t *pte_k;\n\n\n\t/* Make sure we are in vmalloc area: */\n\tif (!(address &gt;= VMALLOC_START &amp;&amp; address &lt; VMALLOC_END))\n\t\treturn -1;\n\n\n\t/*\n\t * Synchronize this task's top level page-table\n\t * with the 'reference' page table.\n\t *\n\t * Do _not_ use &quot;current&quot; here. We might be inside\n\t * an interrupt in the middle of a task switch..\n\t */\n\tpgd_paddr = read_cr3_pa();\n\tpmd_k = vmalloc_sync_one(__va(pgd_paddr), address);\n\tif (!pmd_k)\n\t\treturn -1;\n\n\n\tpte_k = pte_offset_kernel(pmd_k, address);\n\tif (!pte_present(*pte_k))\n\t\treturn -1;\n\n\n\treturn 0\n</code></pre><h2>总结时刻</h2><p>至此，内核态的内存映射也讲完了。这下，我们可以将整个内存管理的体系串起来了。</p><p>物理内存根据NUMA架构分节点。每个节点里面再分区域。每个区域里面再分页。</p><p>物理页面通过伙伴系统进行分配。分配的物理页面要变成虚拟地址让上层可以访问，kswapd可以根据物理页面的使用情况对页面进行换入换出。</p><p>对于内存的分配需求，可能来自内核态，也可能来自用户态。</p><p>对于内核态，kmalloc在分配大内存的时候，以及vmalloc分配不连续物理页的时候，直接使用伙伴系统，分配后转换为虚拟地址，访问的时候需要通过内核页表进行映射。</p><p>对于kmem_cache以及kmalloc分配小内存，则使用slub分配器，将伙伴系统分配出来的大块内存切成一小块一小块进行分配。</p><p>kmem_cache和kmalloc的部分不会被换出，因为用这两个函数分配的内存多用于保持内核关键的数据结构。内核态中vmalloc分配的部分会被换出，因而当访问的时候，发现不在，就会调用do_page_fault。</p><p>对于用户态的内存分配，或者直接调用mmap系统调用分配，或者调用malloc。调用malloc的时候，如果分配小的内存，就用sys_brk系统调用；如果分配大的内存，还是用sys_mmap系统调用。正常情况下，用户态的内存都是可以换出的，因而一旦发现内存中不存在，就会调用do_page_fault。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/9a/274e22b3f5196a4c68bb6813fb643f9a.png?wh=2368*2248\" alt=\"\"></p><h2>课堂练习</h2><p>伙伴系统分配好了物理页面之后，如何转换成为虚拟地址呢？请研究一下page_address函数的实现。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎你收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习、进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","comments":[{"had_liked":false,"id":98338,"user_name":"why","can_delete":false,"product_type":"c1","uid":1012937,"ip_address":"","ucode":"C9E796E53F6F5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/c9/d3439ca4.jpg","comment_is_top":false,"comment_ctime":1558962149,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"91753275365","product_id":100024701,"comment_content":"- 涉及三块内容:<br>    - 内存映射函数 vmalloc, kmap_atomic<br>    - 内核态页表存放位置和工作流程<br>    - 内核态缺页异常处理<br>- 内核态页表, 系统初始化时就创建<br>    - swapper_pg_dir 指向内核顶级页目录 pgd<br>        - xxx_ident&#47;kernel&#47;fixmap_pgt 分别是直接映射&#47;内核代码&#47;固定映射的 xxx 级页表目录<br>    - 创建内核态页表<br>        - swapper_pg_dir 指向 init_top_pgt, 是 ELF 文件的全局变量, 因此再内存管理初始化之间就存在<br>        - init_top_pgt 先初始化了三项<br>            - 第一项指向 level3_ident_pgt (内核代码段的某个虚拟地址) 减去 __START_KERNEL_MAP (内核代码起始虚拟地址) 得到实际物理地址<br>            - 第二项也是指向 level3_ident_pgt<br>            - 第三项指向 level3_kernel_pgt 内核代码区<br>    - 初始化各页表项, 指向下一集目录<br>        - 页表覆盖范围较小, 内核代码 512MB, 直接映射区 1GB<br>        - 内核态也定义 mm_struct 指向 swapper_pg_dir<br>        - 初始化内核态页表,  start_kernel→ setup_arch<br>            - load_cr3(swapper_pg_dir) 并刷新 TLB<br>            - 调用 init_mem_mapping→kernel_physical_mapping_init, 用 __va 将物理地址映射到虚拟地址, 再创建映射页表项<br>            - CPU 在保护模式下访问虚拟地址都必须通过 cr3, 系统只能照做<br>            - 在 load_cr3 之前, 通过 early_top_pgt 完成映射<br>- vmalloc 和 kmap_atomic<br>    - 内核的虚拟地址空间 vmalloc 区域用于映射<br>    - kmap_atomic 临时映射<br>        - 32 位, 调用 set_pte 通过内核页表临时映射<br>        - 64 位, 调用 page_address→lowmem_page_address 进行映射<br>- 内核态缺页异常<br>    - kmap_atomic 直接创建页表进行映射<br>    - vmalloc 只分配内核虚拟地址, 访问时触发缺页中断, 调用 do_page_fault→vmalloc_fault 用于关联内核页表项<br>- kmem_cache 和 kmalloc 用于保存内核数据结构, 不会被换出; 而内核 vmalloc 会被换出","like_count":21},{"had_liked":false,"id":98897,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1559114188,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"87458460108","product_id":100024701,"comment_content":"决心从头把计算机所有的基础课程全部补上，夯实基础，一定要坚持到最后<br>day26笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;10931320.html","like_count":20,"discussions":[{"author":{"id":2149899,"avatar":"https://static001.geekbang.org/account/avatar/00/20/ce/0b/b1e244e6.jpg","nickname":"IMBFD","note":"","ucode":"2E7B3D01C537A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377505,"discussion_content":"坚持到最后了么？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622688413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1064375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3d/b7/d863295a.jpg","nickname":"panbook","note":"","ucode":"1B1CC0F44C41DF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274203,"discussion_content":"支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590554240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110735,"user_name":"没心没肺","can_delete":false,"product_type":"c1","uid":1258867,"ip_address":"","ucode":"121FD3AEBA3BEA","user_header":"https://static001.geekbang.org/account/avatar/00/13/35/73/46d6dadc.jpg","comment_is_top":false,"comment_ctime":1562321287,"is_pvip":false,"replies":[{"id":"46757","content":"不怕不怕","user_name":"作者回复","comment_id":110735,"uid":"1001590","ip_address":"","utype":1,"ctime":1566388299,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"74576765319","product_id":100024701,"comment_content":"好恐怖，看到这里，是硬看了","like_count":17,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457030,"discussion_content":"不怕不怕","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566388299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131300,"avatar":"https://static001.geekbang.org/account/avatar/00/11/43/24/3f9f7c70.jpg","nickname":"zixuan","note":"","ucode":"C72920DD05B074","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589460,"discussion_content":"看成看硬了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664965508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98365,"user_name":"ezra.xu","can_delete":false,"product_type":"c1","uid":1014005,"ip_address":"","ucode":"6C3E11889BC6AB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/f5/ae200a94.jpg","comment_is_top":false,"comment_ctime":1558968267,"is_pvip":false,"replies":[{"id":"35384","content":"是因为C语言编译完了就直接是硬件能够识别的二进制，不像java，需要jvm才能运行。C语言不用自举，除了第一个开发C语言的，需要用汇编来做，后面都可以用锤子造锤子","user_name":"作者回复","comment_id":98365,"uid":"1001590","ip_address":"","utype":1,"ctime":1559100578,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"65983477707","product_id":100024701,"comment_content":"内核能用c语言编写，是不是意味着用c可以直接操作物理内存，另外linux上的c语言编译器是用什么语言开发的，c语言实现了自举吗，c语言跨平台底层原理是什么，请老师答疑解惑。","like_count":15,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451660,"discussion_content":"是因为C语言编译完了就直接是硬件能够识别的二进制，不像java，需要jvm才能运行。C语言不用自举，除了第一个开发C语言的，需要用汇编来做，后面都可以用锤子造锤子","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1559100578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1995068,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/71/3c/119f00a9.jpg","nickname":"Ironman","note":"","ucode":"66F3226ACD8570","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295833,"discussion_content":"c语言是可以操作物理内存的，玩过单片机的都知道。不同架构的cpu需要不同的c编译器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596359005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155351,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1574681203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40229386867","product_id":100024701,"comment_content":"整个内存的讲解（这个专栏内容如果一下看不懂直接跳总结部分，甚至每章的最后，现有个整体认识，再返回去看细节，会容易很多）","like_count":9},{"had_liked":false,"id":115040,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1007254,"ip_address":"","ucode":"E28F2602BA25DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","comment_is_top":false,"comment_ctime":1563460006,"is_pvip":false,"replies":[{"id":"46569","content":"赞，有感觉就好，要的就是心动","user_name":"作者回复","comment_id":115040,"uid":"1001590","ip_address":"","utype":1,"ctime":1566357997,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"31628231078","product_id":100024701,"comment_content":"👍看起来很有感觉，先讲用户态、内核态虚拟内存的管理，然后讲物理内存的管理，最后讲用户态、内核态虚拟内存与物理内存如何建立关联。","like_count":7,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458941,"discussion_content":"赞，有感觉就好，要的就是心动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566357997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241075,"user_name":"garlic","can_delete":false,"product_type":"c1","uid":1019579,"ip_address":"","ucode":"FEB147EDB5774E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/bb/c039dc11.jpg","comment_is_top":false,"comment_ctime":1597182532,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"18777051716","product_id":100024701,"comment_content":"伙伴系统分配好了物理页面到虚拟地址:有两种情况<br>1. 申请时转换， <br>直接使用伙伴系统申请页,通过page_address进行地址转换，如kmalloc申请大于2个页面时<br>通过SLAB从伙伴系统申请页,创建new slab时通过page_address进行地址转换, 如vmalloc, VMA结构体申请时<br>2. 有虚拟地址挂载页面<br>有指定虚拟地址范围，再通过伙伴系统申请空间，申请释放时统一进行更新页表项, 如vmalloc<br>课堂学习笔记： https:&#47;&#47;garlicspace.com&#47;2020&#47;08&#47;12&#47;%e4%bc%99%e4%bc%b4%e7%b3%bb%e7%bb%9f%e5%88%86%e9%85%8d%e7%89%a9%e7%90%86%e9%a1%b5%e5%90%8e%e5%a6%82%e4%bd%95%e8%bd%ac%e6%8d%a2%e6%88%90%e4%b8%ba%e8%99%9a%e6%8b%9f%e5%9c%b0%e5%9d%80&#47;","like_count":4},{"had_liked":false,"id":98280,"user_name":"活的潇洒","can_delete":false,"product_type":"c1","uid":1238830,"ip_address":"","ucode":"666C30CA894754","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/2e/1522a7d6.jpg","comment_is_top":false,"comment_ctime":1558947682,"is_pvip":false,"replies":[{"id":"35386","content":"加油","user_name":"作者回复","comment_id":98280,"uid":"1001590","ip_address":"","utype":1,"ctime":1559100646,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"14443849570","product_id":100024701,"comment_content":"坚持完整的学到底，坚持完整的笔记到底<br>day26 学习笔记：https:&#47;&#47;www.cnblogs.com&#47;luoahong&#47;p&#47;10931320.html","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451629,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559100646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130641,"user_name":"奔跑的码仔","can_delete":false,"product_type":"c1","uid":1609871,"ip_address":"","ucode":"AB3B02B07B8B8C","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","comment_is_top":false,"comment_ctime":1567499946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10157434538","product_id":100024701,"comment_content":"page_address的实现如下：<br><br>```<br>&#47;**<br> * page_address - get the mapped virtual address of a page<br> * @page: &amp;struct page to get the virtual address of<br> *<br> * Returns the page&#39;s virtual address.<br> *&#47;<br>void *page_address(const struct page *page)<br>{<br>\tunsigned long flags;<br>\tvoid *ret;<br>\tstruct page_address_slot *pas;<br><br>\tif (!PageHighMem(page))<br>\t\treturn lowmem_page_address(page);<br><br>\tpas = page_slot(page);<br>\tret = NULL;<br>\tspin_lock_irqsave(&amp;pas-&gt;lock, flags);<br>\tif (!list_empty(&amp;pas-&gt;lh)) {<br>\t\tstruct page_address_map *pam;<br><br>\t\tlist_for_each_entry(pam, &amp;pas-&gt;lh, list) {<br>\t\t\tif (pam-&gt;page == page) {<br>\t\t\t\tret = pam-&gt;virtual;<br>\t\t\t\tgoto done;<br>\t\t\t}<br>\t\t}<br>\t}<br>done:<br>\tspin_unlock_irqrestore(&amp;pas-&gt;lock, flags);<br>\treturn ret;<br>}<br>```<br><br>- 如果不是高端内存，物理地址和虚拟地址之间的转换相对比较简单，直接使用lowmme_page_address进行转换，前面提到过这个函数；<br>- 对于非高端内存页，通过page_slot计算出pas，pas保存在由pagez作为key的hash表page_address_htable中；<br>- 遍历pas-&gt;lh双向链表，链表的节点保存有page的地址和page所对应的虚拟地址，通过page，可以确定page对应的虚拟地址。","like_count":2},{"had_liked":false,"id":100110,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1559446548,"is_pvip":false,"replies":[{"id":"49211","content":"初始化的时候，会检测硬件","user_name":"作者回复","comment_id":100110,"uid":"1001590","ip_address":"","utype":1,"ctime":1567603454,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"10149381140","product_id":100024701,"comment_content":"操作系统是如何知道计算机上有多少物理内存的呢？","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452414,"discussion_content":"初始化的时候，会检测硬件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567603454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339573,"user_name":"dll","can_delete":false,"product_type":"c1","uid":1264401,"ip_address":"","ucode":"5773CBC8BFB91F","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/11/d7e08b5b.jpg","comment_is_top":false,"comment_ctime":1648198836,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5943166132","product_id":100024701,"comment_content":"真的反复看了几遍，没理解init_top_pgt里的三项指的是什么，我觉得有时候文章还是有点写的词不达意，代码有点缺失，真的看起来好幸苦","like_count":1},{"had_liked":false,"id":286702,"user_name":"geek","can_delete":false,"product_type":"c1","uid":2401422,"ip_address":"","ucode":"FF0845140D72A9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/NyFOEueITjaGLpakMEuWAqVQjo1uDIXlpDdpCxXGfaWiaXzibLQ3WgOFCe8D9FvCmyjsGT7jDsLUbkt8jt2aVs9g/132","comment_is_top":false,"comment_ctime":1617513100,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5912480396","product_id":100024701,"comment_content":"page_address_map结构体中保存了page和对应虚拟地址的映射关系。<br>每个page对象保存在page_address_htable中，映射到相同slot的pages会形成一个链表。page_address方法就是根据page找到slot，遍历对应slot的链表，找到page相同的那项，返回其对应的虚拟地址。","like_count":1},{"had_liked":false,"id":215173,"user_name":"Mhy","can_delete":false,"product_type":"c1","uid":1287774,"ip_address":"","ucode":"DE19BCAD1F856E","user_header":"https://static001.geekbang.org/account/avatar/00/13/a6/5e/b05254a6.jpg","comment_is_top":false,"comment_ctime":1588920452,"is_pvip":false,"replies":[{"id":"83476","content":"不是的，mmap是系统调用，不存在内核调用他的","user_name":"作者回复","comment_id":215173,"uid":"1001590","ip_address":"","utype":1,"ctime":1592186772,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"5883887748","product_id":100024701,"comment_content":"老师，看到这里我是不是可以认为在用户态使用mmap和内核态使用mmap是两码事，我们一般应用场景比如将图片内存直接映射到用户空间上访问避免多次拷贝从而提高图片加载速度，那么这个场景是发生在用户态上面，期间不需要通过内核态吗？调用系统函数触发的mmap是发生在内核态吗，比如strace ls -l","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494342,"discussion_content":"不是的，mmap是系统调用，不存在内核调用他的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592186772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124366,"user_name":"Bing","can_delete":false,"product_type":"c1","uid":1070258,"ip_address":"","ucode":"E9F46630FB1F3A","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/b2/8811d29f.jpg","comment_is_top":false,"comment_ctime":1565867558,"is_pvip":false,"replies":[{"id":"46271","content":"当然会啊，虚拟内存嘛","user_name":"作者回复","comment_id":124366,"uid":"1001590","ip_address":"","utype":1,"ctime":1566280656,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"5860834854","product_id":100024701,"comment_content":"用malloc申请的内存，进程退出时，操作系统是否会释放","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463138,"discussion_content":"当然会啊，虚拟内存嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566280656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360681,"user_name":"Jay","can_delete":false,"product_type":"c1","uid":1070670,"ip_address":"北京","ucode":"ED9970F7E66080","user_header":"https://static001.geekbang.org/account/avatar/00/10/56/4e/9291fac0.jpg","comment_is_top":false,"comment_ctime":1666754182,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1666754182","product_id":100024701,"comment_content":"定义的数据结构名字实在太多了，看着看着就晕了，很痛苦。<br><br>还是得把内存管理的基本思想和整体流程搞清楚，最好了然于胸，读起来才舒服一些。<br><br>另外遇到这些缩写，每次都要想这到底指代什么结构，每次都得转化下，特别费脑子，想着想着就累了，一来一回，就迷失了...... 我要去隔壁专栏补一下内存的基础知识。","like_count":0},{"had_liked":false,"id":336151,"user_name":"张可夫斯基","can_delete":false,"product_type":"c1","uid":1076487,"ip_address":"","ucode":"3B8DF6D98583F2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIKoEicqUZTJly55qoUXRmK4wia7YbnibsMncJaO6tKgKAQNJRfpMsibvfeiaukIibsCsuaic8QjQ3gOoTGA/132","comment_is_top":false,"comment_ctime":1645957289,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645957289","product_id":100024701,"comment_content":"坚持只看总结。。。。","like_count":0},{"had_liked":false,"id":332489,"user_name":"@许还真","can_delete":false,"product_type":"c1","uid":1099324,"ip_address":"","ucode":"6D754D5AE44CEC","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/3c/8ab9deb0.jpg","comment_is_top":false,"comment_ctime":1643273575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643273575","product_id":100024701,"comment_content":"回来再看 ","like_count":0},{"had_liked":false,"id":306305,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1628489996,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1628489996","product_id":100024701,"comment_content":"一直有一个疑问，应用空间和内存空间有各自的页表，虚拟内存为什么要划分为用户空间和内核空间呢，有什么作用呢？内核空间和应用空间从虚拟内存看都能申请0~4G的内存（假如是32位机），会有什么问题呢？为什么为内核分配内存的时候硬要规定3G以上的才是内核用的呢？","like_count":0,"discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391603,"discussion_content":"权限问题，内核所有task为了效率要用同一个空间，而用户态要隔离，用不同的表，那两者就不可能用同一个空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630548293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250750,"user_name":"stackWarn","can_delete":false,"product_type":"c1","uid":1002005,"ip_address":"","ucode":"89672E452DEBA5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","comment_is_top":false,"comment_ctime":1601210134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601210134","product_id":100024701,"comment_content":"对于内核态，kmalloc 在分配大内存的时候，以及 vmalloc 分配不连续物理页的时候，直接使用伙伴系统，分配后转换为虚拟地址，访问的时候需要通过内核页表进行映射。 <br>kmalloc不是分配小内存的吗？？没懂这里","like_count":0},{"had_liked":false,"id":250243,"user_name":"墨渊战神01","can_delete":false,"product_type":"c1","uid":1046665,"ip_address":"","ucode":"79668ADBB2A4DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/89/7431e82e.jpg","comment_is_top":false,"comment_ctime":1601001782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601001782","product_id":100024701,"comment_content":"为什么从用户态到内核态，读写数据都需要拷贝？","like_count":0},{"had_liked":false,"id":205546,"user_name":"皮皮侠","can_delete":false,"product_type":"c1","uid":1258402,"ip_address":"","ucode":"04205990C1DE1F","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/a2/6c0ffc15.jpg","comment_is_top":false,"comment_ctime":1586669746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586669746","product_id":100024701,"comment_content":"用户态可以用kmalloc直接分配大内存么？","like_count":0},{"had_liked":false,"id":174980,"user_name":"Dylan","can_delete":false,"product_type":"c1","uid":1040236,"ip_address":"","ucode":"58064D0C9F9F5F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/df/6c/5af32271.jpg","comment_is_top":false,"comment_ctime":1580486166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580486166","product_id":100024701,"comment_content":"我记得kmalloc 分配的内存大小有限制的，128k","like_count":0},{"had_liked":false,"id":155352,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1574681276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574681276","product_id":100024701,"comment_content":"对于内存，要提醒自己内核态和用户态的概念，虚拟地址和物理地址的概念！","like_count":0},{"had_liked":false,"id":138006,"user_name":"kdb_reboot","can_delete":false,"product_type":"c1","uid":1003594,"ip_address":"","ucode":"4C56FCA563FCA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/4a/04fef27f.jpg","comment_is_top":false,"comment_ctime":1569978401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569978401","product_id":100024701,"comment_content":"老师，针对内存管理有什么资料推荐吗，看的有点晕。发现了一件事情：虽然老师讲的很好，但是如果针对个人，看专栏的话，还是有很多隐含信息需要自己去了解","like_count":0},{"had_liked":false,"id":117434,"user_name":"栋能","can_delete":false,"product_type":"c1","uid":1006849,"ip_address":"","ucode":"8BD9C939D3E8E1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5d/01/9cd84003.jpg","comment_is_top":false,"comment_ctime":1564046427,"is_pvip":false,"replies":[{"id":"46414","content":"kmalloc内核空间内存申请函数。","user_name":"作者回复","comment_id":117434,"uid":"1001590","ip_address":"","utype":1,"ctime":1566299296,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1564046427","product_id":100024701,"comment_content":"没太看懂kmalloc又是从哪里来的，是写错了么？（这个我还特意往前找了下，以为是kmmap，用于内存映射区的呢）","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459969,"discussion_content":"kmalloc内核空间内存申请函数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566299296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}