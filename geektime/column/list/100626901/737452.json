{"id":737452,"title":"26｜Rust GUI编程：用Slint为YOLOv8实现一个界面","content":"<p>你好，我是Mike。</p><p>今天我们继续用Slint做一个小项目。这个项目的目标是为我们<a href=\"https://time.geekbang.org/column/article/734943\">第 24 讲</a>实现的用YOLOv8从图片中识别出对象及姿势的小应用提供一个GUI界面。</p><p>这个GUI程序非常实用，可以以一种真观对比的形式让你看到对原始图片经过AI加工后的效果。比如像下面这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/ab/a4/ab5aebed249dc410328a4cee8305e6a4.png?wh=1825x1029\" alt=\"图片\"></p><h2>原理解析</h2><p>根据我们上节课学到的知识及第24讲里的操作流程，我们的实现应该分成4步。</p><ol>\n<li>选择一张图片，加载显示在界面左边。</li>\n<li>点击 “Detect Objects”或 “Detect Poses”。</li>\n<li>经过YOLOv8引擎计算和标注，生成一张新的图片。</li>\n<li>在界面右边加载这张新图片。</li>\n</ol><p>下面让我们开始动手操作。</p><p><span class=\"reference\">注：这节课的代码适用于 Slint v1.3 版本。</span></p><h2>分步骤实现</h2><h3>创建项目</h3><p>我们还是使用官方提供的Slint模板来创建，先下载模板。</p><pre><code class=\"language-plain\">cargo generate --git https://github.com/slint-ui/slint-rust-template --name slint-yolov8-demo\ncd slint-yolov8-demo\n</code></pre><p>运行 <code>cargo run</code> 测试一下。</p><h3>设计界面</h3><p>这个应用其实不复杂，你可以这样来分解这个界面。</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/a3/a7c4ecbf59ce56f727581577e65984a3.jpg?wh=1754x1156\" alt=\"\"></p><ol>\n<li>从上到下使用一个 VerticalBox，分成三部分：Model说明、图片显示区、按钮区。</li>\n<li>图片显示区使用一个 HorizontalBox，分成三部分：左边图片显示区、中间分隔线、右边图片显示区。图片使用 Image 基础元素来显示。</li>\n<li>按钮区，使用HorizontalBox排列三个按钮：选择图片、探测对象、探测姿势，并且左对齐。</li>\n</ol><!-- [[[read_end]]] --><p>这样界面就设计好了。</p><h3>设计回调</h3><p>这个小工具的回调任务的步骤也很清晰。</p><ul>\n<li>\n<p>界面刚打开的时候，显示空白界面。<br>\n<img src=\"https://static001.geekbang.org/resource/image/de/74/de7a2c40048a2794e5c2e0e482e84e74.png?wh=1825x1031\" alt=\"图片\"></p>\n</li>\n<li>\n<p>点击 “Select Picture”后，弹出图片选择对话框，选择一张图片，并显示在左侧。<br>\n<img src=\"https://static001.geekbang.org/resource/image/93/43/9315e64aa40a8b8abb5ec91817742943.png?wh=1825x1031\" alt=\"图片\"></p>\n</li>\n<li>\n<p>点击“Detect Objects”，生成新图片，显示在右侧。<br>\n<img src=\"https://static001.geekbang.org/resource/image/9a/e1/9a0a02da5e5f66ab8afyybed86a8b7e1.png?wh=1825x1031\" alt=\"图片\"></p>\n</li>\n<li>\n<p>点击“Detect Poses”，生成新图片，显示在右侧。<br>\n<img src=\"https://static001.geekbang.org/resource/image/17/42/178cf0f880ecbfb19827f34d0897c942.png?wh=1825x1031\" alt=\"图片\"></p>\n</li>\n</ul><p>整个项目回调的逻辑就描述完成了。</p><h3>下载模型</h3><p>我们最好先手动下载YOLOv8的两个模型文件，下载方式如下：</p><pre><code class=\"language-plain\">HF_HUB_ENABLE_HF_TRANSFER=1 HF_ENDPOINT=https://hf-mirror.com huggingface-cli download lmz/candle-yolo-v8 yolov8m.safetensors\nHF_HUB_ENABLE_HF_TRANSFER=1 HF_ENDPOINT=https://hf-mirror.com huggingface-cli download lmz/candle-yolo-v8 yolov8m-pose.safetensors\n</code></pre><p>这是为 HuggingFace candle框架定制的两个模型文件，我们下载的是 object 和 pose medium 大小的 safetensors 格式的模型文件，我们需要把它们拷贝到当前项目的根目录下。像下面这样：</p><pre><code class=\"language-plain\">$ ls -lh\ntotal 101M\n-rwxr-xr-x 1 mike mike 150K Dec  9 14:58 Cargo.lock\n-rwxr-xr-x 1 mike mike  615 Dec  9 14:58 Cargo.toml\n-rwxr-xr-x 1 mike mike 1.1K Dec  9 14:58 LICENSE\n-rwxr-xr-x 1 mike mike  747 Dec  9 18:29 README.md\ndrwxr-xr-x 2 mike mike 4.0K Dec  9 18:27 assets\n-rwxr-xr-x 1 mike mike   71 Dec  9 14:58 build.rs\n-rwxr-xr-x 1 mike mike 168K Dec  9 14:58 football.jpg\ndrwxr-xr-x 3 mike mike 4.0K Dec  9 14:58 src\ndrwxr-xr-x 4 mike mike 4.0K Dec  9 15:03 target\ndrwxr-xr-x 2 mike mike 4.0K Dec  9 14:58 ui\n-rw-r--r-- 1 mike mike  51M Dec  9 17:45 yolov8m-pose.safetensors\n-rw-r--r-- 1 mike mike  50M Dec  9 17:45 yolov8m.safetensors\n</code></pre><p>下面我们就开始动手写代码吧！</p><h2>代码实现和解析</h2><p>有了前面几讲的经验，我们应该能比较轻松地完成这次任务。</p><h3>界面文件</h3><p>我们先来看一下界面描述文件 ui/appwindow.slint 内容。</p><pre><code class=\"language-plain\">import { Button, VerticalBox , HorizontalBox} from \"std-widgets.slint\";\n\nexport component AppWindow inherits Window {\n&nbsp; &nbsp; width: 900px;\n&nbsp; &nbsp; height: 480px;\n\n&nbsp; &nbsp; in-out property &lt;image&gt; orig-image;\n&nbsp; &nbsp; in-out property &lt;string&gt; orig-image-path;\n&nbsp; &nbsp; in-out property &lt;image&gt; generated-image;\n&nbsp; &nbsp; \n&nbsp; &nbsp; callback select-orig-pic();\n&nbsp; &nbsp; callback probe-objects();\n&nbsp; &nbsp; callback probe-poses();\n&nbsp; &nbsp; \n&nbsp; &nbsp; VerticalBox {\n&nbsp; &nbsp; &nbsp; &nbsp; width: 100%;\n&nbsp; &nbsp; &nbsp; &nbsp; vertical-stretch: 1;\n&nbsp; &nbsp; &nbsp; &nbsp; Text {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text: \"Model Size: Medium\";\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; HorizontalBox {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; width: 98%;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vertical-stretch: 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Image {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; width: 49%;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; source: root.orig-image;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Rectangle {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; width: 1px;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; background: gray;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Image {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; width: 49%;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; source: root.generated-image;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; HorizontalBox {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; alignment: start;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; height: 50px;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Button {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text: \"Select Picture..\";\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clicked =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; root.select-orig-pic();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Button {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text: \"Detect Objects\";\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clicked =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; root.probe-objects();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Button {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text: \"Detect Poses\";\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clicked =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; root.probe-poses();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; }\n}\n</code></pre><p>我们设计了三个顶层应用属性。</p><pre><code class=\"language-plain\">&nbsp; &nbsp; in-out property &lt;image&gt; orig-image;\n&nbsp; &nbsp; in-out property &lt;string&gt; orig-image-path;\n&nbsp; &nbsp; in-out property &lt;image&gt; generated-image;\n</code></pre><p>注意，orig-image 和 generated-image 类型是 image，是slint语言中的图像类型。orig-image-path 类型是 string，是slint语言中的字符串类型，它与 Rust 中的字符串类型可以通过下面的代码互相转换。</p><pre><code class=\"language-plain\">slint string -&gt; Rust String:  .to_string()\nRust String -&gt; slint string:  .into()\n</code></pre><p>根据前面设计回调部分，我们对应地设计了三个回调函数。</p><pre><code class=\"language-plain\">&nbsp; &nbsp; callback select-orig-pic();\n&nbsp; &nbsp; callback probe-objects();\n&nbsp; &nbsp; callback probe-poses();\n</code></pre><p>然后，你还要注意代码里<strong>主体内容区的属性</strong>。我们使用 <code>vertical-stretch: 1;</code> 来让这个区域尽量填充，占领能够占领的最大区域，不留空白。然后我们使用 Image widget 来承载图片显示，并把它的 source 属性绑定到 root.orig-image 和 root.generated-image 上面。</p><p>然后下面的按钮区，我们使用 <code>alignment: start;</code> 将三个按钮左对齐，并给三个按钮的 clicked 回调写逻辑，调用到对应的顶层回调上面去。</p><p>这就是界面描述包含的内容。</p><h3>main.rs</h3><p>接下来，我们看main文件内容。</p><pre><code class=\"language-plain\">use std::{path::PathBuf, sync::mpsc::channel};\n\nuse native_dialog::FileDialog;\nuse slint::{Image, Rgba8Pixel, SharedPixelBuffer};\n\nslint::include_modules!();\n\nmod yolov8engine;\n\nfn main() -&gt; Result&lt;(), slint::PlatformError&gt; {\n&nbsp; &nbsp; let ui = AppWindow::new()?;\n\n&nbsp; &nbsp; let ui_handle = ui.as_weak();\n&nbsp; &nbsp; ui.on_select_orig_pic(move || {\n&nbsp; &nbsp; &nbsp; &nbsp; let ui = ui_handle.unwrap();\n\n&nbsp; &nbsp; &nbsp; &nbsp; let path = FileDialog::new()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .set_location(\"~\")\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .add_filter(\"Pics\", &amp;[\"png\", \"jpg\", \"jpeg\"])\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .show_open_single_file()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .unwrap();\n\n&nbsp; &nbsp; &nbsp; &nbsp; // if selected pic file\n&nbsp; &nbsp; &nbsp; &nbsp; if let Some(path) = path {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ui.set_orig_image_path(path.to_string_lossy().to_string().into());\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ui.set_orig_image(load_image(path));\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; });\n\n&nbsp; &nbsp; let (sender, receiver) = channel::&lt;(String, String)&gt;();\n&nbsp; &nbsp; let sender1 = sender.clone();\n&nbsp; &nbsp; let sender2 = sender.clone();\n\n&nbsp; &nbsp; let ui_handle = ui.as_weak();\n&nbsp; &nbsp; let _thread = std::thread::spawn(move || {\n&nbsp; &nbsp; &nbsp; &nbsp; loop {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let ui_handle = ui_handle.clone();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let (task, img_path) = receiver.recv().unwrap();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if task.as_str() == \"_exit_\" {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // end of this thread\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let (task, model) = if task.as_str() == \"detect\" {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yolov8engine::YoloTask::Detect,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Some(\"yolov8m.safetensors\".to_string()),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yolov8engine::YoloTask::Pose,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Some(\"yolov8m-pose.safetensors\".to_string()),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; };\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if let Ok(path) = yolov8engine::start_engine(task, model, img_path) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _ = slint::invoke_from_event_loop(move || {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let ui = ui_handle.unwrap();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ui.set_generated_image(load_image(PathBuf::from(path)));\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; });\n\n&nbsp; &nbsp; let ui_handle = ui.as_weak();\n&nbsp; &nbsp; ui.on_probe_objects(move || {\n&nbsp; &nbsp; &nbsp; &nbsp; let ui = ui_handle.unwrap();\n&nbsp; &nbsp; &nbsp; &nbsp; let img_path = ui.get_orig_image_path().to_string();\n&nbsp; &nbsp; &nbsp; &nbsp; println!(\"{}\", img_path);\n&nbsp; &nbsp; &nbsp; &nbsp; _ = sender.send((\"detect\".to_string(), img_path));\n&nbsp; &nbsp; });\n\n&nbsp; &nbsp; let ui_handle = ui.as_weak();\n&nbsp; &nbsp; ui.on_probe_poses(move || {\n&nbsp; &nbsp; &nbsp; &nbsp; let ui = ui_handle.unwrap();\n&nbsp; &nbsp; &nbsp; &nbsp; let img_path = ui.get_orig_image_path().to_string();\n&nbsp; &nbsp; &nbsp; &nbsp; println!(\"{}\", img_path);\n&nbsp; &nbsp; &nbsp; &nbsp; _ = sender1.send((\"pose\".to_string(), img_path));\n&nbsp; &nbsp; });\n\n&nbsp; &nbsp; ui.window().on_close_requested(move || {\n&nbsp; &nbsp; &nbsp; &nbsp; sender2\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .send((\"_exit_\".to_string(), \"\".to_string()))\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .unwrap();\n&nbsp; &nbsp; &nbsp; &nbsp; slint::CloseRequestResponse::HideWindow\n&nbsp; &nbsp; });\n\n&nbsp; &nbsp; ui.run()\n}\n\nfn load_image(path: std::path::PathBuf) -&gt; slint::Image {\n&nbsp; &nbsp; let mut a_image = image::open(path).expect(\"Error loading image\").into_rgba8();\n\n&nbsp; &nbsp; image::imageops::colorops::brighten_in_place(&amp;mut a_image, 20);\n\n&nbsp; &nbsp; let buffer = SharedPixelBuffer::&lt;Rgba8Pixel&gt;::clone_from_slice(\n&nbsp; &nbsp; &nbsp; &nbsp; a_image.as_raw(),\n&nbsp; &nbsp; &nbsp; &nbsp; a_image.width(),\n&nbsp; &nbsp; &nbsp; &nbsp; a_image.height(),\n&nbsp; &nbsp; );\n&nbsp; &nbsp; let image = Image::from_rgba8(buffer);\n\n&nbsp; &nbsp; image\n}\n</code></pre><p>main文件整体结构和上一讲差不多。这里我重点讲一下不同的地方。Slint里没有现成的文件选择组件，因此我们使用了 native_dialog 这个 crate，它是一个跨平台的文件选择组件。FileDialog 这一段返回后的 path 是一个 <code>Option&lt;PathBuf&gt;</code>。如果选择了文件，就会是 <code>Some(path)</code>，如果没有选择文件，比如打开了文件选择框，但是又点击了取消按钮或者关闭按钮，就返回 None。</p><p>选择图片文件后，用这种 <code>set_* API</code> 把返回的完整路径填充到应用的顶层属性orig-image-path 和 orig-image 上去。</p><pre><code class=\"language-plain\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ui.set_orig_image_path(path.to_string_lossy().to_string().into());\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ui.set_orig_image(load_image(path));\n</code></pre><p>load_image 会把文件从磁盘里读出来，转换成 Slint 的 image 类型。</p><p>后台任务和channel架构也和上节课差不多，我就不赘述了。注意这里使用了模式匹配语法来析构元组消息内容。</p><p><code>yolov8engine::start_engine(task, model, img_path)</code> 是YOLOv8任务的执行器，分别传入任务类型 task、模型名字 model 和原始图片地址 img_path 三个参数，并返回处理后的图片路径 path。然后调用 <code>slint::invoke_from_event_loop()</code> 来更新UI界面。</p><p>注意，由于我们的主要逻辑是在后台任务中处理的，不能直接在后台任务中更新 UI 界面，必须使用 <code>slint::invoke_from_event_loop()</code> 把更新界面的逻辑包起来。在slint内部，它还是通过一个 channel queue 把里面的相关值发送到主UI线程来处理。看起来整个过程是自动的，如果不加这个函数，而是直接调用 UI 对象指针，会出现什么问题呢？</p><p>没错，所有权问题！这可以看成是Rust的所有权系统在GUI领域的一次实践和验证，它可以在编译期间帮助我们发现和阻绝界面更新上的竞争问题。</p><p>这里，你可以想象一下，如果不创建后台任务，而是直接把业务逻辑写在回调函数里会怎样？也就是放在 <code>on_probe_objects()</code> 和 <code>on_probe_poses()</code> 中，你可以试一下。这里我分享一下我试验的结果：对于长时间执行的任务，Slint框架会主动把这些任务kill掉，以免对界面操作造成卡顿。</p><h3>改造 YOLOv8 示例</h3><p>剩下的主要工作就是看 <code>yolov8engine::start_engine(task, model, img_path)</code> 是怎么实现的了。</p><p>我们在<a href=\"https://time.geekbang.org/column/article/734943\">第 24 讲</a>实现的YOLOv8的工具是一个命令行界面工具，使用 clap 实现。为了能够整合进现在这个GUI程序，我们首先应该对它的Args类型进行转换，转换成普通的结构体，结构体的字段一部分固定下来，一部分从UI界面传进来。</p><pre><code class=\"language-plain\">&nbsp; &nbsp; let args = Args {\n&nbsp; &nbsp; &nbsp; &nbsp; cpu: true,\n&nbsp; &nbsp; &nbsp; &nbsp; tracing: false,\n&nbsp; &nbsp; &nbsp; &nbsp; model,\n&nbsp; &nbsp; &nbsp; &nbsp; which: Which::M,\n&nbsp; &nbsp; &nbsp; &nbsp; images: vec![img_path],\n&nbsp; &nbsp; &nbsp; &nbsp; confidence_threshold: 0.25,\n&nbsp; &nbsp; &nbsp; &nbsp; nms_threshold: 0.45,\n&nbsp; &nbsp; &nbsp; &nbsp; task,\n&nbsp; &nbsp; &nbsp; &nbsp; legend_size: 14,\n&nbsp; &nbsp; };\n</code></pre><p>如果你想让所有参数都可定制，完全可以在界面上做得更复杂，让这些参数可以通过界面上的控件来调整数值。</p><p>然后，我们再看一下模块的目录组织结构。</p><pre><code class=\"language-plain\">$ tree src/\nsrc/\n├── main.rs\n└── yolov8engine\n&nbsp; &nbsp; ├── coco_classes.rs\n&nbsp; &nbsp; ├── mod.rs\n&nbsp; &nbsp; ├── model.rs\n&nbsp; &nbsp; └── roboto-mono-stripped.ttf\n\n1 directory, 5 files\n</code></pre><p>你会发现我们使用的是 2015 edition 的风格。这样做不丢人，很多人喜欢这种目录组织风格。这种风格还有一个好处是可以把第24讲的src代码直接拷贝进来，重命名成 yolov8engine，然后把里面的 main.rs 重命名成 mod.rs。整个代码的结构就重构完成了。</p><p>然后把 mod.rs 里面的 <code>fn main()</code> 函数改成 <code>start_engine(task, model, img_path)</code> 即可，这样整个代码结构也改造完成了，剩下的就是要处理一下函数参数的输入和返回值的类型。</p><p>在第24讲的代码中，<code>run()</code> 函数没有把生成的新图片的path返回回来，我们将其返回回来，并进一步通过 <code>start_engine()</code> 函数的返回值返回给这个GUI程序的 <code>main()</code> 函数。然后整个业务就完成了。</p><p>我把完成代码整理到<a href=\"https://github.com/miketang84/jikeshijian/tree/master/26-slint-yolov8-demo\">这个地址</a>了，你可以下载下来，按照说明运行一下看看效果，也可以基于这个代码随意改改，实现你的任何想法。</p><h2>小结</h2><p><img src=\"https://static001.geekbang.org/resource/image/2c/5e/2cba65908fe6ba1f7cd6f17e8ffc885e.jpg?wh=3671x2551\" alt=\"\"><br>\n这节课我们使用Slint GUI框架为 YOLOv8 对象和姿势引擎实现了一个图形化界面。有了这个GUI工具，任何人都可以来体验Rust的图像识别能力了。相比于命令行界面，我们将用户群体扩大到了普通用户。</p><p>Rust应用的分发也很简单，将编译后的文件拷贝到另一台电脑上就可以运行了，只需要针对不同的平台分别编译不同的目标格式可执行文件。它不像Python实现的对象和姿势识别工具需要先安装一大堆依赖。</p><p>我们花了两节课的时间来熟悉使用Slint GUI框架。它是Rust社区冉冉升起的一个明星框架，目前虽然说不上成熟，但是胜在<strong>小巧、灵活，可定制性很强</strong>。如果它缺失一些控件什么的，你也可以自己实现。</p><p>我们这两节课与第23、24讲结合在一起，做了两组Rust的AI工具。<strong>AI时代刚刚来临，Rust在AI领域有着巨大的潜力和机会。</strong>AI本身覆盖面非常广，比如学术研究、算法实现、训练、推理、部署、云端计算、单机版模型、集群应用、工业应用、行业工具、终端设备、用户界面等等。未来使用Rust作为工具，也是一个相当好的切入点。</p><h2>思考题</h2><p>这节课的代码实现有一个性能上的问题，就是每次点击  Detect Objects 或 Detect Poses 的时候，实际上都重复加载了模型，你想一想如何优化这个点？欢迎你把你的想法和优化代码分享到评论区，如果你觉得对你有帮助的话，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>","comments":[{"had_liked":false,"id":385780,"user_name":"Geek_e72251","can_delete":false,"product_type":"c1","uid":3733050,"ip_address":"广东","ucode":"894904DE2E6AC0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/VF71Gcf2C2bjYPFCRv0TPfwhkJmT5WhtusltuaXQM0KMDibdallNFypqWV6v2FJ4bqNwzujiaF5LEDeia7JMZTTtw/132","comment_is_top":false,"comment_ctime":1703352218,"is_pvip":false,"replies":[{"id":140716,"content":"https:&#47;&#47;slint.dev&#47;releases&#47;1.3.2&#47;docs&#47;slint&#47;src&#47;language&#47;builtins&#47;elements#popupwindow  这里。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1704160087,"ip_address":"重庆","comment_id":385780,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"老师，怎么给组件添加鼠标右键菜单选项啊？看文档好像没这个功能。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634864,"discussion_content":"https://slint.dev/releases/1.3.2/docs/slint/src/language/builtins/elements#popupwindow  这里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704160087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385778,"user_name":"Marco","can_delete":false,"product_type":"c1","uid":1012627,"ip_address":"中国香港","ucode":"502149B57700FE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/73/93/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1703346156,"is_pvip":false,"replies":[{"id":140717,"content":"也许你想要它？https:&#47;&#47;slint.dev&#47;releases&#47;1.3.2&#47;docs&#47;slint&#47;src&#47;language&#47;builtins&#47;elements#dialog\n另外 多窗口特性的进度跟踪在这里：https:&#47;&#47;github.com&#47;slint-ui&#47;slint&#47;issues&#47;784","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1704160182,"ip_address":"重庆","comment_id":385778,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"老师，用slint如何实现多窗口呢。例如在主窗口点击某个按钮，弹出一个新的窗口","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634865,"discussion_content":"也许你想要它？https://slint.dev/releases/1.3.2/docs/slint/src/language/builtins/elements#dialog\n另外 多窗口特性的进度跟踪在这里：https://github.com/slint-ui/slint/issues/784","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704160182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385736,"user_name":"My dream","can_delete":false,"product_type":"c1","uid":1077733,"ip_address":"四川","ucode":"2FEFB344230C17","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/e5/bcdc382a.jpg","comment_is_top":false,"comment_ctime":1703199758,"is_pvip":false,"replies":[{"id":140590,"content":"目前开箱即用的功能还没有，不过理论上来说，就是通过 Image 来画。https:&#47;&#47;github.com&#47;slint-ui&#47;slint&#47;discussions&#47;1080  \n再结合 https:&#47;&#47;docs.rs&#47;pdfium-render&#47;latest&#47;pdfium_render&#47; 这种渲染库来画到Image上面就行了。\n\nSlint还比较年轻，但是社区发展很快。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703233059,"ip_address":"重庆","comment_id":385736,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"老师，用slint怎么实现浏览pdf文件啊？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634340,"discussion_content":"目前开箱即用的功能还没有，不过理论上来说，就是通过 Image 来画。https://github.com/slint-ui/slint/discussions/1080  \n再结合 https://docs.rs/pdfium-render/latest/pdfium_render/ 这种渲染库来画到Image上面就行了。\n\nSlint还比较年轻，但是社区发展很快。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703233059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1077733,"avatar":"https://static001.geekbang.org/account/avatar/00/10/71/e5/bcdc382a.jpg","nickname":"My dream","note":"","ucode":"2FEFB344230C17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634368,"discussion_content":"能专门讲个实现的实例不？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703322606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}