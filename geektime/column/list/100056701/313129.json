{"id":313129,"title":"41 |  第35～40讲课后思考题答案及常见问题答疑","content":"<p>你好，我是蒋德钧。</p><p>今天是我们最后一节答疑课，我会带你一起分析一下第35～40讲的课后思考题。同时，我还会讲解两个典型问题，分别是原子操作使用问题，以及Redis和其他键值数据库的对比情况。</p><h2><a href=\"https://time.geekbang.org/column/article/306548\">第35讲</a></h2><p>问题：假设Codis集群中保存的80%的键值对都是Hash类型，每个Hash集合的元素数量在10万~20万个，每个集合元素的大小是2KB。你觉得，迁移这样的Hash集合数据，会对Codis的性能造成影响吗？</p><p>答案：其实影响不大。虽然一个Hash集合数据的总数据量有200MB ~ 400MB（2KB * 0.1M ≈ 200MB到 2KB * 0.2M  ≈ 400MB），但是Codis支持异步、分批迁移数据，所以，Codis可以把集合中的元素分多个批次进行迁移，每批次迁移的数据量不大，所以，不会给源实例造成太大影响。</p><h2><a href=\"https://time.geekbang.org/column/article/307421\">第36讲</a></h2><p>问题：假设一个商品的库存量是800，我们使用一个包含了4个实例的切片集群来服务秒杀请求，我们让每个实例各自维护库存量200，把客户端的秒杀请求分发到不同的实例上进行处理，你觉得这是一个好方法吗？</p><p>答案：这个方法是不是能达到一个好的效果，主要取决于，<strong>客户端请求能不能均匀地分发到每个实例上</strong>。如果可以的话，那么，每个实例都可以帮着分担一部分压力，避免压垮单个实例。</p><!-- [[[read_end]]] --><p>在保存商品库存时，key一般就是商品的ID，所以，客户端在秒杀场景中查询同一个商品的库存时，会向集群请求相同的key，集群就需要把客户端对同一个key的请求均匀地分发到多个实例上。</p><p>为了解决这个问题，客户端和实例间就需要有代理层来完成请求的转发。例如，在Codis中，codis proxy负责转发请求，那么，如果我们让codis proxy收到请求后，按轮询的方式把请求分发到不同实例上（可以对Codis进行修改，增加转发规则），就可以利用多实例来分担请求压力了。</p><p>如果没有代理层的话，客户端会根据key和Slot的映射关系，以及Slot和实例的分配关系，直接把请求发给保存key的唯一实例了。在这种情况下，请求压力就无法由多个实例进行分担了。题目中描述的这个方法也就不能达到好的效果了。</p><h2><a href=\"https://time.geekbang.org/column/article/308393\">第37讲</a></h2><p>问题：当有数据访问倾斜时，如果热点数据突然过期了，假设Redis中的数据是缓存，数据的最终值是保存在后端数据库中的，这样会发生什么问题吗?</p><p>答案：在这种情况下，会发生缓存击穿的问题，也就是热点数据突然失效，导致大量访问请求被发送到数据库，给数据库带来巨大压力。</p><p>我们可以采用<a href=\"https://time.geekbang.org/column/article/296586\">第26讲</a>中介绍的方法，不给热点数据设置过期时间，这样可以避免过期带来的击穿问题。</p><p>除此之外，我们最好在数据库的接入层增加流控机制，一旦监测到有大流量请求访问数据库，立刻开启限流，这样做也是为了避免数据库被大流量压力压垮。因为数据库一旦宕机，就会对整个业务应用带来严重影响。所以，我们宁可在请求接入数据库时，就直接拒接请求访问。</p><h2><a href=\"https://time.geekbang.org/column/article/310347\">第38讲</a></h2><p>问题：如果我们采用跟Codis保存Slot分配信息相类似的方法，把集群实例状态信息和Slot分配信息保存在第三方的存储系统上（例如Zookeeper），这种方法会对集群规模产生什么影响吗？</p><p>答案：假设我们将Zookeeper作为第三方存储系统，保存集群实例状态信息和Slot分配信息，那么，实例只需要和Zookeeper通信交互信息，实例之间就不需要发送大量的心跳消息来同步集群状态了。这种做法可以减少实例之间用于心跳的网络通信量，有助于实现大规模集群。而且，网络带宽可以集中用在服务客户端请求上。</p><p>不过，在这种情况下，实例获取或更新集群状态信息时，都需要和Zookeeper交互，Zookeeper的网络通信带宽需求会增加。所以，采用这种方法的时候，需要给Zookeeper保证一定的网络带宽，避免Zookeeper受限于带宽而无法和实例快速通信。</p><h2><a href=\"https://time.geekbang.org/column/article/310838\">第39讲</a></h2><p>问题：你觉得，Redis 6.0的哪个或哪些新特性会对你有帮助呢？</p><p>答案：这个要根据你们的具体需求来定。从提升性能的角度上来说，Redis 6.0中的多IO线程特性可以缓解Redis的网络请求处理压力。通过多线程增加处理网络请求的能力，可以进一步提升实例的整体性能。业界已经有人评测过，跟6.0之前的单线程Redis相比，6.0的多线程性能的确有提升。所以，这个特性对业务应用会有比较大的帮助。</p><p>另外，基于用户的命令粒度ACL控制机制也非常有用。当Redis以云化的方式对外提供服务时，就会面临多租户（比如多用户或多个微服务）的应用场景。有了ACL新特性，我们就可以安全地支持多租户共享访问Redis服务了。</p><h2><a href=\"https://time.geekbang.org/column/article/312568\">第40讲</a></h2><p>问题：你觉得，有了持久化内存后，还需要Redis主从集群吗？</p><p>答案：持久化内存虽然可以快速恢复数据，但是，除了提供主从故障切换以外，主从集群还可以实现读写分离。所以，我们可以通过增加从实例，让多个从实例共同分担大量的读请求，这样可以提升Redis的读性能。而提升读性能并不是持久化内存能提供的，所以，如果业务层对读性能有高要求时，我们还是需要主从集群的。</p><h2>常见问题答疑</h2><p>好了，关于思考题的讨论，到这里就告一段落了。接下来，我结合最近收到的一些问题，来和你聊一聊，在进行原子操作开发时，局部变量和全局共享变量导致的差异问题，以及Redis和另外两种常见的键值数据库Memcached、RocksDB的优劣势对比。</p><h3>关于原子操作的使用疑问</h3><p>在<a href=\"https://time.geekbang.org/column/article/299806\">第29讲</a>中，我在介绍原子操作时，提到了一个多线程限流的例子，借助它来解释如何使用原子操作。我们再来回顾下这个例子的代码：</p><pre><code>//获取ip对应的访问次数\ncurrent = GET(ip)\n//如果超过访问次数超过20次，则报错\nIF current != NULL AND current &gt; 20 THEN\n    ERROR &quot;exceed 20 accesses per second&quot;\nELSE\n    //如果访问次数不足20次，增加一次访问计数\n    value = INCR(ip)\n    //如果是第一次访问，将键值对的过期时间设置为60s后\n    IF value == 1 THEN\n        EXPIRE(ip,60)\n    END\n    //执行其他操作\n    DO THINGS\nEND\n</code></pre><p>在分析这个例子的时候，我提到：“第一个线程执行了INCR(ip)操作后，第二个线程紧接着也执行了INCR(ip)，此时，ip对应的访问次数就被增加到了2，我们就不能再对这个ip设置过期时间了。”</p><p>有同学认为，value是线程中的局部变量，所以两个线程在执行时，每个线程会各自判断value是否等于1。判断完value值后，就可以设置ip的过期时间了。因为Redis本身执行INCR可以保证原子性，所以，客户端线程使用局部变量获取ip次数并进行判断时，是可以实现原子性保证的。</p><p>我再进一步解释下这个例子中使用Lua脚本保证原子性的原因。</p><p>在这个例子中，value其实是一个在多线程之间共享的全局变量，所以，多线程在访问这个变量时，就可能会出现一种情况：一个线程执行了INCR(ip)后，第二个线程也执行了INCR(ip)，等到第一个线程再继续执行时，就会发生ip对应的访问次数变成2的情况。而设置过期时间的条件是ip访问次数等于1，这就无法设置过期时间了。在这种情况下，我们就需要用Lua脚本保证计数增加和计数判断操作的原子性。</p><h3>Redis和Memcached、RocksDB的对比</h3><p>Memcached和RocksDB分别是典型的内存键值数据库和硬盘键值数据库，应用得也非常广泛。和Redis相比，它们有什么优势和不足呢？是否可以替代Redis呢？我们来聊一聊这个问题。</p><h4>Redis和Memcached的比较</h4><p>和Redis相似，Memcached也经常被当做缓存来使用。不过，Memcached有一个明显的优势，<strong>就是它的集群规模可以很大</strong>。Memcached集群并不是像Redis Cluster或Codis那样，使用Slot映射来分配数据和实例的对应保存关系，而是使用一致性哈希算法把数据分散保存到多个实例上，而一致性哈希的优势就是可以支持大规模的集群。所以，如果我们需要部署大规模缓存集群，Memcached会是一个不错的选择。</p><p>不过，在使用Memcached时，有个地方需要注意，Memcached支持的数据类型比Redis少很多。Memcached只支持String类型的键值对，而Redis可以支持包括String在内的多种数据类型，当业务应用有丰富的数据类型要保存的话，使用Memcached作为替换方案的优势就没有了。</p><p>如果你既需要保存多种数据类型，又希望有一定的集群规模保存大量数据，那么，Redis仍然是一个不错的方案。</p><p>我把Redis和Memcached的对比情况总结在了一张表里，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/29/9eb06cfea8a3ec6fced6e736e4e9ec29.jpg?wh=2791*724\" alt=\"\"></p><h4>Redis和RocksDB的比较</h4><p>和Redis不同，RocksDB可以把数据直接保存到硬盘上。这样一来，单个RocksDB可以保存的数据量要比Redis多很多，而且数据都能持久化保存下来。</p><p>除此之外，RocksDB还能支持表结构（即列族结构），而Redis的基本数据模型就是键值对。所以，如果你需要一个大容量的持久化键值数据库，并且能按照一定表结构保存数据，RocksDB是一个不错的替代方案。</p><p>不过，RocksDB毕竟是要把数据写入底层硬盘进行保存的，而且在进行数据查询时，如果RocksDB要读取的数据没有在内存中缓存，那么，RocksDB就需要到硬盘上的文件中进行查找，这会拖慢RocksDB的读写延迟，降低带宽。</p><p>在性能方面，RocksDB是比不上Redis的。而且，RocksDB只是一个动态链接库，并没有像Redis那样提供了客户端-服务器端访问模式，以及主从集群和切片集群的功能。所以，我们在使用RocksDB替代Redis时，需要结合业务需求重点考虑替换的可行性。</p><p>我把Redis和RocksDB的对比情况总结了下，如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/7c/82/7c0a225636f4983cb56a5b7265cf5982.jpg?wh=2884*656\" alt=\"\"></p><h2>总结</h2><p>集群是实际业务应用中很重要的一个需求，在课程的最后，我还想再给你提一个小建议。</p><p>集群部署和运维涉及的工作量非常大，所以，我们一定要重视集群方案的选择。</p><p><strong>集群的可扩展性是我们评估集群方案的一个重要维度</strong>，你一定要关注，集群中元数据是用Slot映射表，还是一致性哈希维护的。如果是Slot映射表，那么，是用中心化的第三方存储系统来保存，还是由各个实例来扩散保存，这也是需要考虑清楚的。Redis Cluster、Codis和Memcached采用的方式各不相同。</p><ul>\n<li>Redis Cluster：使用Slot映射表并由实例扩散保存。</li>\n<li>Codis：使用Slot映射表并由第三方存储系统保存。</li>\n<li>Memcached：使用一致性哈希。</li>\n</ul><p>从可扩展性来看，Memcached优于Codis，Codis优于Redis Cluster。所以，如果实际业务需要大规模集群，建议你优先选择Codis或者是基于一致性哈希的Redis切片集群方案。</p>","comments":[{"had_liked":false,"id":264391,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1606454218,"is_pvip":false,"replies":[{"id":"97918","content":"Redis的客户端分片方案ShardedJedis就是用的一致性哈希来进行分片的。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1608993350,"ip_address":"","comment_id":264391,"utype":1}],"discussion_count":2,"race_medal":0,"score":"91800767434","product_id":100056701,"comment_content":"使用一致性哈希不是memcached的专属方案吧，redis也可以使用一致性哈希集群","like_count":21,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510551,"discussion_content":"Redis的客户端分片方案ShardedJedis就是用的一致性哈希来进行分片的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608993350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371981,"discussion_content":"客户端分片，有点难以理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620114990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268919,"user_name":"cp★钊","can_delete":false,"product_type":"c1","uid":1275690,"ip_address":"","ucode":"6B86D4D538BDF7","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/2a/244d98aa.jpg","comment_is_top":false,"comment_ctime":1608433721,"is_pvip":false,"replies":[{"id":"97657","content":"一致性hash可以支持集群扩容，而且使用一致性哈希在进行集群扩容时，假设新加入节点在一致性哈希圆环上是A，沿逆时针方向的前一个集群节点是B，那么数据迁移只需要迁移B和A之间的数据，相比于普通的哈希后取模方法，一致性哈希能减少数据迁移量。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1608596897,"ip_address":"","comment_id":268919,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74622877753","product_id":100056701,"comment_content":"一致性hash时能否支持集群扩容，涉及到数据迁移是不是麻烦很多。","like_count":17,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512082,"discussion_content":"一致性hash可以支持集群扩容，而且使用一致性哈希在进行集群扩容时，假设新加入节点在一致性哈希圆环上是A，沿逆时针方向的前一个集群节点是B，那么数据迁移只需要迁移B和A之间的数据，相比于普通的哈希后取模方法，一致性哈希能减少数据迁移量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608596897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264518,"user_name":"杨逸林","can_delete":false,"product_type":"c1","uid":1167233,"ip_address":"","ucode":"4BF3CF3E2F1AC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/81/96f656ef.jpg","comment_is_top":false,"comment_ctime":1606486214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23081322694","product_id":100056701,"comment_content":"感谢老师的教学，一路收获很多������","like_count":5},{"had_liked":false,"id":265424,"user_name":"刘大人","can_delete":false,"product_type":"c1","uid":1577210,"ip_address":"","ucode":"F66AE613E80398","user_header":"https://static001.geekbang.org/account/avatar/00/18/10/fa/d977627e.jpg","comment_is_top":false,"comment_ctime":1606894632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10196829224","product_id":100056701,"comment_content":"打卡 ","like_count":2},{"had_liked":false,"id":268502,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1608219502,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5903186798","product_id":100056701,"comment_content":"而一致性哈希的优势就是可以支持大规模的集群 <br>老师 为什么一致性hash就可以支持大规模集群呢","like_count":1,"discussions":[{"author":{"id":1801058,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/7b/62/ec94cee4.jpg","nickname":"彭文达","note":"","ucode":"8DCC27EC5AF263","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403427,"discussion_content":"要先了解一下一致性hash的原理才更好理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634082796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264459,"user_name":" 尿布","can_delete":false,"product_type":"c1","uid":1476323,"ip_address":"","ucode":"D1C8BDA7540962","user_header":"https://static001.geekbang.org/account/avatar/00/16/86/e3/a31f6869.jpg","comment_is_top":false,"comment_ctime":1606470856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5901438152","product_id":100056701,"comment_content":"打卡","like_count":1},{"had_liked":false,"id":264293,"user_name":"林林要加油鸭","can_delete":false,"product_type":"c1","uid":2309104,"ip_address":"","ucode":"E71956CBD3BD4D","user_header":"https://static001.geekbang.org/account/avatar/00/23/3b/f0/0dd9ca93.jpg","comment_is_top":false,"comment_ctime":1606407462,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5901374758","product_id":100056701,"comment_content":"沙发","like_count":1},{"had_liked":false,"id":355682,"user_name":"弱水穿云天","can_delete":false,"product_type":"c1","uid":1190060,"ip_address":"上海","ucode":"80DC528A23ED7E","user_header":"https://static001.geekbang.org/account/avatar/00/12/28/ac/37a2a265.jpg","comment_is_top":false,"comment_ctime":1661649483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661649483","product_id":100056701,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":354606,"user_name":"伯阳","can_delete":false,"product_type":"c1","uid":1596631,"ip_address":"北京","ucode":"DBDC8735AA54AD","user_header":"https://static001.geekbang.org/account/avatar/00/18/5c/d7/3b92bb0d.jpg","comment_is_top":false,"comment_ctime":1660599376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660599376","product_id":100056701,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":336553,"user_name":"💎A","can_delete":false,"product_type":"c1","uid":1075412,"ip_address":"","ucode":"914FFA92CA2713","user_header":"https://static001.geekbang.org/account/avatar/00/10/68/d4/c9b5d3f9.jpg","comment_is_top":false,"comment_ctime":1646210946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646210946","product_id":100056701,"comment_content":"终于学完了。","like_count":0},{"had_liked":false,"id":296696,"user_name":"BertGeek","can_delete":false,"product_type":"c1","uid":1452799,"ip_address":"","ucode":"8E1D72C9F9778C","user_header":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","comment_is_top":false,"comment_ctime":1623118540,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1623118540","product_id":100056701,"comment_content":"请问老师，redis 每个实例都保存全量slot 映射信息，还是只保存自己实例的slot信息","like_count":0,"discussions":[{"author":{"id":1102245,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/a5/2bbedc3b.jpg","nickname":"over","note":"","ucode":"FE272AC19842D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387886,"discussion_content":"全量，方便redirect","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628486994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286837,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1617627731,"is_pvip":true,"discussion_count":1,"race_medal":2,"score":"1617627731","product_id":100056701,"comment_content":"最后一次对答案（后面好像还有个期末测试，蒋老师果然是学院派）<br><br>感觉这次的几道课后题自己答得比以前要靠谱一些，当然一些具体的分析可能还是不那么到位。<br><br>对于 Redis 和 Memcached 的比较，本文中讲的内容应该已经足够应付面试了。<br><br>关于 Memcached、Codis 和 Redis Cluster，老师果然还是要偏爱 Codis 一些。","like_count":0,"discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376686,"discussion_content":"redis cluster官方解决方案，集群的部署和维护相对简单","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622277923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}