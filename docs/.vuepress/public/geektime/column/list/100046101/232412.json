{"id":232412,"title":"加餐 | ZAB协议（一）：主节点崩溃了，怎么办？","content":"<p>你好，我是韩健。</p><p>咱们都知道，系统在运行中，不可避免会出现各种各样的问题，比如进程崩溃了、服务器死机了，这些问题会导致很严重的后果，让系统没办法运行。学完了15讲后，你应该还记得，在ZAB中，写请求是必须在主节点上处理的，而且提案的广播和提交，也是由主节点来完成的。既然主节点那么重要，如果它突然崩溃宕机了，该怎么办呢？</p><p>答案是选举出新的领导者（也就是新的主节点）。</p><p>在我看来，领导者选举，关乎着节点故障容错能力和集群可用性，是ZAB协议非常核心的设计之一。你想象一下，如果没有领导者选举，主节点故障了，整个集群都无法写入了，这将是极其严重的灾难性故障。</p><p>而对你来说，理解领导者选举（也就是快速领导者选举，Fast Leader Election），能更加深刻地理解ZAB协议，并在日常工作中，游刃有余地处理集群的可用性问题。比如如果写请求持续失败，可以先排查下集群的节点状态。</p><p>既然领导者选举这么重要，那么ZAB是如何选举领导者的呢？带着这个问题，我们进入今天的学习。</p><h2>ZAB如何选举领导者？</h2><p>既然要选举领导者，那就涉及成员身份变更，那么在ZAB中，支持哪些成员身份呢？</p><h3>有哪些成员身份？</h3><p>ZAB支持3种成员身份（领导者、跟随者、观察者）。</p><!-- [[[read_end]]] --><ul>\n<li>\n<p>领导者（Leader）： 作为主（Primary）节点，在同一时间集群只会有一个领导者。需要你注意的是，所有的写请求都必须在领导者节点上执行。</p>\n</li>\n<li>\n<p>跟随者（Follower）：作为备份（Backup）节点， 集群可以有多个跟随者，它们会响应领导者的心跳，并参与领导者选举和提案提交的投票。需要你注意的是，跟随者可以直接处理并响应来自客户端的读请求，但对于写请求，跟随者需要将它转发给领导者处理。</p>\n</li>\n<li>\n<p>观察者（Observer）：作为备份（Backup）节点，类似跟随者，但是没有投票权，也就是说，观察者不参与领导者选举和提案提交的投票。你可以对比着Paxos中的学习者来理解。</p>\n</li>\n</ul><p>需要你注意的是，虽然ZAB支持3种成员身份，但是它定义了4种成员状态。</p><ul>\n<li>LOOKING：选举状态，该状态下的节点认为当前集群中没有领导者，会发起领导者选举。</li>\n<li>FOLLOWING ：跟随者状态，意味着当前节点是跟随者。</li>\n<li>LEADING ：领导者状态，意味着当前节点是领导者。</li>\n<li>OBSERVING： 观察者状态，意味着当前节点是观察者。</li>\n</ul><p>为什么多了一种成员状态呢？这是因为ZAB支持领导者选举，在选举过程中，涉及了一个过渡状态（也就是选举状态）。</p><p>现在，你已经了解了成员身份，那么在ZAB中是如何变更成员身份，来选举领导者呢？接下来，我们就来看一下领导者的具体选举过程。</p><h3>如何选举？</h3><p>为了帮你更好地理解ZAB的领导者选举，我举个例子演示一下，为了演示方便和更容易理解（我们聚焦最核心的领导者PK），假设投票信息的格式是&lt;proposedLeader, proposedEpoch, proposedLastZxid，node&gt;，其中：</p><ul>\n<li>proposedLeader，节点提议的，领导者的集群ID，也就是在集群配置（比如myid配置文件）时指定的ID。</li>\n<li>proposedEpoch，节点提议的，领导者的任期编号。</li>\n<li>proposedLastZxid，节点提议的，领导者的事务标识符最大值（也就是最新提案的事务标识符）。</li>\n<li>node，投票的节点，比如节点B。</li>\n</ul><p>假设一个ZooKeeper集群，由节点A、B、C组成，其中节点A是领导者，节点B、C是跟随者（为了方便演示，假设epoch分别是1和1，lastZxid分别是101和102，集群ID分别为2和3）。那么如果节点A宕机了，会如何选举呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/46/e5/4667ae63fbdbc613e1d94667544bd0e5.jpg?wh=1142*590\" alt=\"\" title=\"图1\"></p><p>首先，当跟随者检测到连接领导者节点的读操作等待超时了，跟随者会变更节点状态，将自己的节点状态变更成LOOKING，然后发起领导者选举（为了演示方便，我们假设这时节点B、C都已经检测到了读操作超时）：<br>\n<img src=\"https://static001.geekbang.org/resource/image/2b/23/2bc48cf03938cc37d3513239da847c23.jpg?wh=2691*1472\" alt=\"\" title=\"图2\"></p><p>接着，每个节点会创建一张选票，这张选票是投给自己的，也就是说，节点B、C都“自告奋勇”推荐自己为领导者，并创建选票&lt;2, 1, 101, B&gt;和&lt;3, 1, 102, C&gt;，然后各自将选票发送给集群中所有节点，也就是说，B发送给B、C，C也发送给B、C。</p><p>一般而言，节点会先接收到自己发送给自己的选票（因为不需要跨节点通讯，传输更快），也就是说，B会先收到来自B的选票，C会先收到来自C的选票：</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/06/e32a08ca54943c96fb415a77f2fe7a06.jpg?wh=1142*585\" alt=\"\" title=\"图3\"></p><p>需要你注意的是，集群的各节点收到选票后，为了选举出数据最完整的节点，对于每一张接收到选票，节点都需要进行领导者PK，也就将选票提议的领导者和自己提议的领导者进行比较，找出更适合作为领导者的节点，约定的规则如下：</p><ul>\n<li>优先检查任期编号（Epoch），任期编号大的节点作为领导者；</li>\n<li>如果任期编号相同，比较事务标识符的最大值，值大的节点作为领导者；</li>\n<li>如果事务标识符的最大值相同，比较集群ID，集群ID大的节点作为领导者。</li>\n</ul><p>如果选票提议的领导者，比自己提议的领导者，更适合作为领导者，那么节点将调整选票内容，推荐选票提议的领导者作为领导者。</p><p>当节点B、C接收到的选票后，因为选票提议的领导者与自己提议的领导者相同，所以，领导者PK的结果，是不需要调整选票信息，那么节点B、C，正常接收和保存选票就可以了。</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/96/4c0546cfe2dbc11ed99cab414ec12e96.jpg?wh=1142*636\" alt=\"\" title=\"图4\"></p><p>接着节点B、C分别接收到来自对方的选票，比如B接收到来自C的选票，C接收到来自B的选票：</p><p><img src=\"https://static001.geekbang.org/resource/image/5d/d5/5d3fe6b30854490faf096826c62df5d5.jpg?wh=1142*573\" alt=\"\" title=\"图5\"></p><p>对于C而言，它提议的领导者是C，而选票（&lt;2, 1, 101, B&gt;）提议的领导者是B，因为节点C的任期编号与节点B相同，但节点C的事务标识符的最大值比节点B的大，那么，按照约定的规则，相比节点B，节点C更适合作为领导者，也就是说，节点C不需要调整选票信息，正常接收和保存选票就可以了。</p><p>但对于对于节点B而言，它提议的领导者是B，选票（&lt;3, 1, 102, C&gt;）提议的领导者是C，因为节点C的任期编号与节点B相同，但节点C的事务标识符的最大值比节点B的大，那么，按照约定的规则，相比节点B，节点C应该作为领导者，所以，节点B除了接收和保存选票信息，还会更新自己的选票为&lt;3, 1, 102, B&gt;，也就是推荐C作为领导者，并将选票重新发送给节点B、C：</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/77/bf70a4f1e9c28de2bbd3c134193ae577.jpg?wh=1142*605\" alt=\"\" title=\"图6\"></p><p>接着，当节点B、C接收到来自节点B，新的选票时，因为这张选票（&lt;3, 1, 102, B&gt;）提议的领导者，与他们提议的领导者是一样的，都是节点C，所以，他们正常接收和存储这张选票，就可以。</p><p><img src=\"https://static001.geekbang.org/resource/image/04/7c/04ec7fdf75160571c8689f040292d57c.jpg?wh=1142*583\" alt=\"\" title=\"图7\"></p><p>最后，因为此时节点B、C提议的领导者（节点C）赢得大多数选票了（2张选票），那么，节点B、C将根据投票结果，变更节点状态，并退出选举。比如，因为当选的领导者是节点C，那么节点B将变更状态为FOLLOWING，并退出选举，而节点C将变更状态为LEADING，并退出选举。</p><p><img src=\"https://static001.geekbang.org/resource/image/a9/03/a9113e0d2653c77ddc41778510784003.jpg?wh=1142*571\" alt=\"\" title=\"图8\"></p><p>你看，这样我们就选举出新的领导者（节点C），这个选举的过程，很容易理解，我在这里只是假设了一种选举的情况，还会存在节点间事务标识符相同、节点在广播投票信息前接收到了其他节点的投票等情况，这里你可以思考一下，课下自己动手操作一下。</p><p>为了帮你在线下更好的阅读代码，自我学习，我想补充一下，逻辑时钟（logicclock）（也就是选举的轮次），会影响选票的有效性，具体来说，逻辑时钟大的节点不会接收来自值小的节点的投票信息。比如，节点A、B的逻辑时钟分别为1和2，那么，节点B将拒绝接收来自节点A的投票信息。</p><p>在这里，我想强调的是，领导者选举的目标，是从大多数节点中选举出数据最完整的节点，也就是大多数节点中，事务标识符值最大的节点。<strong>另外，ZAB本质上是通过“见贤思齐，相互推荐”的方式来选举领导者的。</strong>也就说，根据领导者PK，节点会重新推荐更合适的领导者，最终选举出了大多数节点中数据最完整的节点。</p><p>当然了，文字和代码是2种不同的表达，一些细节，仅仅通过文字是无法表达出来的，所以，为了帮你更通透地理解领导者选举的实现，接下来，我将以最新稳定版的<a href=\"https://downloads.apache.org/zookeeper/zookeeper-3.6.0/apache-zookeeper-3.6.0.tar.gz\">ZooKeeper</a>为例（也就是3.6.0），具体说一说代码的实现。</p><h2>ZooKeeper是如何实现的？</h2><p>首先，我们来看看，在ZooKeeper中是如何实现成员身份的？</p><p>在ZooKeeper中，成员状态是在QuorumPeer.java中实现的，为枚举型变量，就像下面的样子。</p><pre><code>public enum ServerState {\n    LOOKING,\n    FOLLOWING,\n    LEADING,\n    OBSERVING\n}\n</code></pre><p>其实，在ZooKeeper中，没有直接定义成员身份，而是用了对应的成员状态来表示，比如，处于FOLLOWING状态的节点为跟随者。</p><p>在这里，我想补充一点，如果你想研究相关成员的功能和实现，那么你可以把对应的成员状态作为切入点来研究，比如，你想研究领导者的功能实现，那么，你可以在代码中搜索LEADING关键字，然后研究相应的上下文逻辑，就能得到自己想要的答案了。</p><p>如果跟随者将自己的状态从跟随者状态变更为选举状态，这就表示跟随者在发起领导者选举，那么，在ZooKeeper中，领导者选举是如何实现的呢？</p><h2>如何实现选举？</h2><p>领导者选举，是在FastLeaderElection.lookForLeader()中实现的。我来讲一下核心的流程，大概的流程，就像下面的样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/83/57/83c37bc2a25a4e892cf1a5c3a2c6c457.jpg?wh=1142*1251\" alt=\"\" title=\"图9\"></p><p>为帮助你更好的理解这个流程，我们来一起走读下核心代码，加深下印象。</p><p>1.在集群稳定运行时，处于跟随者状态的节点，在Follower.followLeader()函数中，周期性地读数据包和处理数据包：</p><pre><code>QuorumPacket qp = new QuorumPacket();\nwhile (this.isRunning()) {\n    // 读取数据包\n    readPacket(qp);\n    // 处理数据包\n    processPacket(qp);\n}\n</code></pre><p>2.当跟随者检测到连接到领导者的读操作超时了（比如领导者节点故障了），这时会抛出异常（Exception），跳出上面的读取数据包和处理数据包的循环，并最终跟随者将节点状态变更为选举状态。</p><pre><code>public void run() {\n    case FOLLOWING:\n        ......\n        finally {\n            // 关闭跟随者节点\n            follower.shutdown();\n            setFollower(null);\n            // 设置状态为选举状态\n            updateServerState();\n        }\n        break;\n    ......\n}\n</code></pre><p>3.当节点处于选举状态时，将调用makeLEStrategy().lookForLeader()函数（实际对应的函数为FastLeaderElection.lookForLeader()），发起领导者选举。</p><pre><code>setCurrentVote(makeLEStrategy().lookForLeader());\n</code></pre><p>4.在FastLeaderElection.lookForLeader()函数中，节点需要对逻辑时钟（也就是选举的轮次）的值执行加1操作，表示我们开启一轮的领导者选举，然后创建投票提案（默认推荐自己为领导者），并通知所有节点：</p><pre><code>synchronized (this) {\n  // 对逻辑时钟的值执行加一操作\n  logicalclock.incrementAndGet();\n  // 创建投票提案，并默认推荐自己为领导者\n  updateProposal(getInitId(), getInitLastLoggedZxid(),    \n                 getPeerEpoch());\n}\n// 广播投票信息给所有节点\nsendNotifications();\n</code></pre><p>5.当节点处于选举状态时，会周期性地从队列中读取接收到的投票信息，直到选举成功。</p><pre><code>while ((self.getPeerState() == ServerState.LOOKING) &amp;&amp; (!stop)) {\n   // 从队列中读取接收到的投票信息             \n   Notification n = recvqueue.poll(notTimeout, TimeUnit.MILLISECONDS);\n   ......\n}\n</code></pre><p>6.当接收到新的投票信息时，节点会进行领导者PK，来判断谁更适合当领导者，如果投票信息中提议的节点比自己提议的节点，更适合当领导者，更新投票信息，推荐投票信息中提议的节点作为领导者，并广播给所有节点：</p><pre><code>else if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) {\n  // 投票信息中提议的节点比自己提议的节点更适合作为领导者，更新投票信息，并推荐投票信息中提议的节点\n  updateProposal(n.leader, n.zxid, n.peerEpoch);\n  // 将新的投票信息广播给所有节点\n  sendNotifications();\n}\n</code></pre><p>7.如果自己提议的领导者赢得大多数选票，则执行步骤8，变更节点状态，退出选举；如果自己提议的领导者仍未赢得大多数选票，则执行步骤5，继续从接收队列中读取新的投票信息。</p><p>8.最后，当节点提议的领导者赢得大多数选票时，根据投票结果，判断当前节点的状态，领导者或跟随者，并变更节点状态，退出选举。</p><pre><code>if (voteSet.hasAllQuorums()) {\n  ......\n    // 根据投票结果，判断并设置节点状态\n    setPeerState(proposedLeader, voteSet);\n    // 退出领导者选举\n    Vote endVote = new Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch);\n    leaveInstance(endVote);\n    return endVote;\n  ......\n}\n</code></pre><p>需要你注意的是，在这里，我们只是演示一种选举情况，更多的情况，比如接收到来自逻辑时钟比当前节点小的节点的投票信息，再比如接收到来自领导者的投票信息，你可以在课下自己研究一下，遇到问题时，欢迎留言，咱们一起讨论。</p><h2>内容小结</h2><p>本节课我主要带你了解了ZAB是如何选举领导者的，以及在ZooKeeper中是如何实现的。我希望你明确这样几个重点。</p><p>1.领导者选举的目标，是选举出大多数节点中数据最完整的节点，也就是大多数节点中事务标识符值最大的节点。</p><p>2.任期编号、事务标识符最大值、集群ID的值的大小，决定了哪个节点更适合作为领导者，按照顺序，值大的节点更适合作为领导者。</p><p>学到这里，有同学可能会说：“老韩，我研究了一下，领导者是大多数节点中，已提交提案事务标识符最大的节点，因为在领导者选举的实现中，事务标识符采用的是dataTree.lastProcessedZxid的值，而这个变量标记的是已提交提案的事务标识符最大值。到底要怎么理解呢？”</p><p>我要先为你的探索和思考点个赞，我想说的是，在领导者选举的实现中，事务标识符采用的是dataTree.lastProcessedZxid的值。需要你特别注意的是，在跟随者节点正常运行时，dataTree.lastProcessedZxid表示的是已提交提案的事务标识符最大值，但当跟随者检测到异常，退出跟随者状态时（在follower.shutdown()函数中），ZooKeeper会将所有未提交提案提交，并使用lastProcessedZxid表示节点上提案（包括刚提交的提案）的事务标识符的最大值，在接下来的领导者选举中，使用的也是该值，也就是说，ZAB的领导者选举，选举出的是大多数节点中数据最完整的节点。</p><p>为了方便你理解，我举个具体的例子。</p><p>A、B、C三节点，A是领导者，B、C是跟随者，B有2个已提交提案(&lt;1, 1&gt;，&lt;1, 2&gt;)，C有4个未提交提案(&lt;1, 1&gt;，&lt;1, 2&gt;，&lt;1, 3&gt;，&lt;1, 4&gt;)，那么当A故障后，C就会当选领导者。因为C的dataTree.lastProcessedZxid值（也就是&lt;1, 4&gt;）大于B的dataTree.lastProcessedZxid值（也就是&lt;1, 2&gt;）。</p><p>最后，你可能会好奇，我为啥会写这么多内容，来分析源码实现，除了因为代码也是一种表达，能有效弥补文字的无法表达的内容之外，还因为对于一个软件来说，最准确、最新的使用手册和技术内幕就是源码。我希望你也能养成阅读源码的习惯，将源码和文档结合起来，来准确理解软件的功能和原理。</p><p>选举出了新领导者，它是不是就可以处理写请求了呢？当然不可以，因为ZAB集群还需要通过成员发现（Discovery）和数据同步（Synchronization）来恢复故障，然后领导者才能行使“领导”的职能，处理写请求，这也是我会在下一讲重点带你了解的。</p><h2>课堂思考</h2><p>既然我提到在ZAB协议中，ZAB协议是通过快速领导者选举，来选举出新的领导者的。那么你不妨想想，在选举中，会出现选票被瓜分、选举失败的问题吗？为什么呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这节课让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"15 | ZAB协议：如何实现操作的顺序性？","id":229975},"right":{"article_title":"加餐 | ZAB协议（二）：如何从故障中恢复？","id":237340}},"comments":[{"had_liked":false,"id":216219,"user_name":"Geek_yuanhe","can_delete":false,"product_type":"c1","uid":1981636,"ip_address":"","ucode":"8452947BBF1C36","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJExu8mFzkasuz32FLic5HaYMXicEBnpl63CxZoyYywLY3c59uGicCr9FmWicqKfEA73rmYgtglc1ztAg/132","comment_is_top":false,"comment_ctime":1589206482,"is_pvip":false,"replies":[{"id":"80017","content":"加一颗星:)，可以这么理解，Raft领导者选举的关键是随机超时时间、一个节点在一个任期只有一张选票、基于任期编号大小和日志完整度来投票。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589231543,"ip_address":"","comment_id":216219,"utype":1}],"discussion_count":4,"race_medal":0,"score":"70308683218","product_id":100046101,"comment_content":"韩老师您好，raft算法跟zab的选举区别，可以理解为比较大的区别就是zab是有leader PK，而raft只是先来先得，一旦该节点已经确认投票，后面即使比他任期编号大的选票再来请求投票，也会拒绝，这样理解对么？","like_count":17,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494722,"discussion_content":"加一颗星:)，可以这么理解，Raft领导者选举的关键是随机超时时间、一个节点在一个任期只有一张选票、基于任期编号大小和日志完整度来投票。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589231543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438315,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEI9Fb9tYoBrjUa8zpvOTGibnKYI9fz1QnfXO1Dy5rp5DPJ7nQOHIIXzKOXet3DMqHNYIHJHyz6bm3g/132","nickname":"胡玲玲","note":"","ucode":"BA8C5190A13A74","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343133,"discussion_content":"raft应该是同一个任期是先来先服务吧，任期号大的会进行新任期的投票，求教","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610954085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2343279,"avatar":"https://static001.geekbang.org/account/avatar/00/23/c1/6f/b29bd6dc.jpg","nickname":"YQM","note":"","ucode":"C4875BBEB92C0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1438315,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEI9Fb9tYoBrjUa8zpvOTGibnKYI9fz1QnfXO1Dy5rp5DPJ7nQOHIIXzKOXet3DMqHNYIHJHyz6bm3g/132","nickname":"胡玲玲","note":"","ucode":"BA8C5190A13A74","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":531088,"discussion_content":"Raft节点如果收到了来自更大任期节点的消息，会立即更新任期，并转换角色为follower，然后再处理消息；一个任期里每个Raft节点只有一次投票权，属于先来者先得；","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637224541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":343133,"ip_address":""},"score":531088,"extra":"{\"user_type\":1}"}]},{"author":{"id":2020029,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ799HD4ehcP4QAhic0l9A5mricoiamAf8MNiaxIGUy8qUkClEKFqXGPhU33OOqdicdFQUicRFr2NTBf0hw/132","nickname":"owonder","note":"","ucode":"F3A1F9E6568285","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277099,"discussion_content":"韩老师您好，raft算法跟zab的选举区别，可以理解为比较大的区别就是zab是有leader PK，而raft只是先来先得，一旦该节点已经确认投票，后面即使比他任期编号大的选票再来请求投票，也会拒绝，这样理解对么？ 这个理解是不对的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590999861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215393,"user_name":"zyz","can_delete":false,"product_type":"c1","uid":1019339,"ip_address":"","ucode":"0092F8C0FFA375","user_header":"","comment_is_top":false,"comment_ctime":1588986199,"is_pvip":false,"replies":[{"id":"79856","content":"加一颗星:)，其实节点的奇偶数不影响选举结果，影响的是节点故障容错能力，比如，4节点集群和3节点集群的“大多数”分别是3和2，也就是n&#47;2 + 1，都只能容忍1个节点的故障。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589118504,"ip_address":"","comment_id":215393,"utype":1}],"discussion_count":2,"race_medal":0,"score":"53128593751","product_id":100046101,"comment_content":"根据获取选举票数过半机制的原则，同时服务器数量为奇数，不会出现选举失败的情况","like_count":12,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494414,"discussion_content":"加一颗星:)，其实节点的奇偶数不影响选举结果，影响的是节点故障容错能力，比如，4节点集群和3节点集群的“大多数”分别是3和2，也就是n/2 + 1，都只能容忍1个节点的故障。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589118504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555118,"discussion_content":"主要最后还会比较节点的id，节点id一定不一样，所以肯定会选举成功啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646752282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221129,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1082132,"ip_address":"","ucode":"483350A630625E","user_header":"https://static001.geekbang.org/account/avatar/00/10/83/14/099742ae.jpg","comment_is_top":false,"comment_ctime":1590412458,"is_pvip":false,"replies":[{"id":"88113","content":"加一颗星:)，可以这么理解，每个节点维护一个投票池，每个投票池都包含自己和其他节点推荐的领导者的节点信息，如果有节点赢得大多数投票，那么这时会判断这个节点是否是自己，如果是自己，那么节点将设置自己的状态为LEADING状态，退出选举；如果不是自己，那么节点将设置自己的状态为FOLLOWING状态，退出选举。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596199881,"ip_address":"","comment_id":221129,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23065248938","product_id":100046101,"comment_content":"你好，请问投票的结果如何同步的呢？当选节点知道自己是 leader，怎么让其他节点也知道呢？","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496345,"discussion_content":"加一颗星:)，可以这么理解，每个节点维护一个投票池，每个投票池都包含自己和其他节点推荐的领导者的节点信息，如果有节点赢得大多数投票，那么这时会判断这个节点是否是自己，如果是自己，那么节点将设置自己的状态为LEADING状态，退出选举；如果不是自己，那么节点将设置自己的状态为FOLLOWING状态，退出选举。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596199881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008517,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/85/1dc41622.jpg","nickname":"姑射仙人","note":"","ucode":"3EFC1F3E592165","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354917,"discussion_content":"不是leader会知难而退，剩下的就是leader了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615361953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218464,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1589805444,"is_pvip":false,"replies":[{"id":"80771","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589822186,"ip_address":"","comment_id":218464,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23064641924","product_id":100046101,"comment_content":"不会选举失败。假设要瓜分的节点是2个，那么最终这2个还是需要pk一轮。关键是zab的选票不是一张，是改变就可以投出去。","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495469,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589822186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214439,"user_name":"竹马彦四郎的好朋友影法師","can_delete":false,"product_type":"c1","uid":1475385,"ip_address":"","ucode":"A9555AEFF90CDF","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","comment_is_top":false,"comment_ctime":1588750100,"is_pvip":false,"replies":[{"id":"79482","content":"加一颗星:)，Raft是可以的，这个特性与ZAB的设计有关，在我看来，这个设计不是很精巧，我会在接下来的加餐中，具体说说。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588806582,"ip_address":"","comment_id":214439,"utype":1}],"discussion_count":5,"race_medal":0,"score":"23063586580","product_id":100046101,"comment_content":"老师，我想问一下 &quot;选举出了新领导者，它是不是就可以处理写请求了呢？答案是不行的，比如这个时候各节点的数据副本还不一致呢，这就需要对数据做取舍，解决冲突，实现数据副本的一致&quot;<br>那是不是raft也是如此呢? 就是说raft选出的新的leader也不能立即响应写请求~ 对吗?","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494055,"discussion_content":"加一颗星:)，Raft是可以的，这个特性与ZAB的设计有关，在我看来，这个设计不是很精巧，我会在接下来的加餐中，具体说说。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588806582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1981636,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJExu8mFzkasuz32FLic5HaYMXicEBnpl63CxZoyYywLY3c59uGicCr9FmWicqKfEA73rmYgtglc1ztAg/132","nickname":"Geek_yuanhe","note":"","ucode":"8452947BBF1C36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263426,"discussion_content":"这个问题我也不明白，老师可以先解答下么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589206678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1564447,"avatar":"https://static001.geekbang.org/account/avatar/00/17/df/1f/650a1d51.jpg","nickname":"小白兔奶糖","note":"","ucode":"AD0B858CFD1304","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":1981636,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJExu8mFzkasuz32FLic5HaYMXicEBnpl63CxZoyYywLY3c59uGicCr9FmWicqKfEA73rmYgtglc1ztAg/132","nickname":"Geek_yuanhe","note":"","ucode":"8452947BBF1C36","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270771,"discussion_content":"老师在加餐 （三）里讲了…你可以看一下这个文章…😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590051660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":263426,"ip_address":""},"score":270771,"extra":""},{"author":{"id":1981636,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJExu8mFzkasuz32FLic5HaYMXicEBnpl63CxZoyYywLY3c59uGicCr9FmWicqKfEA73rmYgtglc1ztAg/132","nickname":"Geek_yuanhe","note":"","ucode":"8452947BBF1C36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1564447,"avatar":"https://static001.geekbang.org/account/avatar/00/17/df/1f/650a1d51.jpg","nickname":"小白兔奶糖","note":"","ucode":"AD0B858CFD1304","race_medal":0,"user_type":4,"is_pvip":false},"discussion":{"id":278118,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591152670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":270771,"ip_address":""},"score":278118,"extra":""}]},{"author":{"id":1092218,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/7a/ae8c247d.jpg","nickname":"指尖以东","note":"","ucode":"1DEE134FE92FD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259685,"discussion_content":"这个我理解对于raft强领导者，写请求通过代理到领导者节点的，本身它是最全的，所以它可以处理写请求了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588811108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219430,"user_name":"小波菜","can_delete":false,"product_type":"c1","uid":1938076,"ip_address":"","ucode":"14A53D3F2E13C2","user_header":"https://static001.geekbang.org/account/avatar/00/1d/92/9c/1312b3ca.jpg","comment_is_top":false,"comment_ctime":1590025261,"is_pvip":false,"replies":[{"id":"87940","content":"加一颗星:)，问题1：主要是为了避免接受到旧的投票信息；会的，具体细节，可参考FastLeaderElection.lookForLeader() 的实现。<br>问题2：是一个AtomicLong的变量（hzxid），因为领导者的存在，所以事务id，本质上是“单机”的，原子变量就可以了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596045952,"ip_address":"","comment_id":219430,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14474927149","product_id":100046101,"comment_content":"“逻辑时钟（logicclock）（也就是选举的轮次），会影响选票的有效性，具体来说，逻辑时钟大的节点不会接收来自值小的节点的投票信息。比如，节点 A、B 的逻辑时钟分别为 1 和 2，那么，节点 B 将拒绝接收来自节点 A 的投票信息。”<br>老师我想请教下，<br>1:逻辑时钟具体工作原理是什么，这边如果A的事务id大于B,B也直接拒绝吗?<br>2:事务id是如何保证全局单调递增的，类似雪花算法吗？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495804,"discussion_content":"加一颗星:)，问题1：主要是为了避免接受到旧的投票信息；会的，具体细节，可参考FastLeaderElection.lookForLeader() 的实现。\n问题2：是一个AtomicLong的变量（hzxid），因为领导者的存在，所以事务id，本质上是“单机”的，原子变量就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596045952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028940,"avatar":"","nickname":"Geek6561","note":"","ucode":"D44141D4AD2587","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320928,"discussion_content":"什么叫选举的轮次，怎么判断选举经过了一轮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604505031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230411,"user_name":"Kvicii.Y","can_delete":false,"product_type":"c1","uid":1442588,"ip_address":"","ucode":"446BFA633569EA","user_header":"https://static001.geekbang.org/account/avatar/00/16/03/1c/c9fe6738.jpg","comment_is_top":false,"comment_ctime":1593366180,"is_pvip":false,"replies":[{"id":"88051","content":"加一颗星:)，可以把逻辑时钟理解为选举的轮次，会影响选票的有效性，主要是为了避免接受到旧的投票信息。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596136661,"ip_address":"","comment_id":230411,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10183300772","product_id":100046101,"comment_content":"逻辑时钟到底是什么作用呢？我看到源码有这个东西，但是一直把他当做其他的判断条件，既然和选票PK类似，为什么不把逻辑时钟比较的逻辑加入到选票PK的逻辑totalOrderPredicate中呢？还是说这个逻辑时钟只是代表了机器的标识？","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499874,"discussion_content":"加一颗星:)，可以把逻辑时钟理解为选举的轮次，会影响选票的有效性，主要是为了避免接受到旧的投票信息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596136661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215735,"user_name":"钟友兵","can_delete":false,"product_type":"c1","uid":1866454,"ip_address":"","ucode":"BFD61236BF448E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/4uiaFspOvPSF8tzalkP0DvCDme7v53eDGkDMsZsibcm31W99Sib2thFe9m3714d4t7qtIcSeyuR1HiaTXZs4TG8enQ/132","comment_is_top":false,"comment_ctime":1589090829,"is_pvip":false,"replies":[{"id":"80026","content":"加一颗星:)，引入超时，更确切的说是读超时，读超时且没有接收到其他节点的新的选票，重新发送自己的投票，在ZooKeeper中，这个值，初始值为200ms，之后每次超时时，指数退避，增加时长，最大值为60s，具体的实现，可以参考FastLeaderElection.lookForLeader()函数。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589232649,"ip_address":"","comment_id":215735,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10179025421","product_id":100046101,"comment_content":"韩老师，如果说投票时，因为网络问题，可能出现接收到的选票出现延迟，比如，节点A只接受到自身的票，没有接收到其他节点的票，其他节点也可能出现接收到的票数不一致的情况，这种情况是如何处理，设置超时时间吗？如果是超时时间，这个值的选取一般有什么原则","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494538,"discussion_content":"加一颗星:)，引入超时，更确切的说是读超时，读超时且没有接收到其他节点的新的选票，重新发送自己的投票，在ZooKeeper中，这个值，初始值为200ms，之后每次超时时，指数退避，增加时长，最大值为60s，具体的实现，可以参考FastLeaderElection.lookForLeader()函数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589232649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213835,"user_name":"宋菁","can_delete":false,"product_type":"c1","uid":1880075,"ip_address":"","ucode":"7105B7D5B1E338","user_header":"","comment_is_top":false,"comment_ctime":1588573880,"is_pvip":false,"replies":[{"id":"79231","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588580860,"ip_address":"","comment_id":213835,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10178508472","product_id":100046101,"comment_content":"在网络通讯正常情况下，各个节点都能够收到其他节点的选票，此时必然会选出最终领导者，不会出现选票瓜分的情况，因为即便是两个节点的任期编号和事物标识符一样，集群ID大的仍然会当选，集群ID小的根据规则会选举集群ID大的节点为领导者。","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493882,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588580860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1315527,"avatar":"https://static001.geekbang.org/account/avatar/00/14/12/c7/a7a5df8b.jpg","nickname":"达子不一般","note":"","ucode":"A91C8DB45184F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400743,"discussion_content":"各个节点都能够收到其他节点的选票，此时必然会选出最终领导者。那就不是得到大多数的投票，而是得到所有的投票了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633404855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341553,"user_name":"arun","can_delete":false,"product_type":"c1","uid":1145846,"ip_address":"","ucode":"1C889D0BB036C8","user_header":"https://static001.geekbang.org/account/avatar/00/11/7b/f6/3f8f6775.jpg","comment_is_top":false,"comment_ctime":1649688427,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5944655723","product_id":100046101,"comment_content":"老师,逻辑时钟和epoch是同一个么,他们的关系是什么呢?逻辑时钟可以理解为每次leader挂掉重新选举时,逻辑时钟会重置为0,而epoch是每次触发选举都会加1,不知道理解的时候正确,谢谢老师解答","like_count":1},{"had_liked":false,"id":353224,"user_name":"Geek_c89d45","can_delete":false,"product_type":"c1","uid":2900023,"ip_address":"广东","ucode":"43BDF15D01B1D4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJnywjwpeXxRz0ibZS0ibmhVytkVnXiaTjPuicicWNcjiaUsiaicTEGQgtR4bj3ddMnUOKUiau2zcb1UG1R99g/132","comment_is_top":false,"comment_ctime":1659280315,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1659280315","product_id":100046101,"comment_content":"不会出现选票瓜分的情况，因为领导者pk总能比较出优劣，即使epoch相同、zxid相同，最终还有myid兜底，myid是一定不同的。","like_count":0},{"had_liked":false,"id":315144,"user_name":"徐同学呀","can_delete":false,"product_type":"c1","uid":1252813,"ip_address":"","ucode":"03383EE820514D","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/cd/3819726f.jpg","comment_is_top":false,"comment_ctime":1633701519,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1633701519","product_id":100046101,"comment_content":"原文：当跟随者检测到异常，退出跟随者状态时（在 follower.shutdown() 函数中），ZooKeeper 会将所有未提交提案提交<br><br>但是我并没有在源码中找到（3.7.0），哪位大佬找到了可以贴一下局部代码吗","like_count":0,"discussions":[{"author":{"id":1227789,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/0d/e65ca230.jpg","nickname":"👻","note":"","ucode":"1648C82AC73C1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560399,"discussion_content":"我也不理解这句话","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649315312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314762,"user_name":"达子不一般","can_delete":false,"product_type":"c1","uid":1315527,"ip_address":"","ucode":"A91C8DB45184F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/c7/a7a5df8b.jpg","comment_is_top":false,"comment_ctime":1633407419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633407419","product_id":100046101,"comment_content":"为什么需要领导者pk，pk结果再进行广播？<br><br>第一轮投票广播后，每个节点可以从其他节点的response中知道自己是否是数据最完备的节点及数据最完备的节点是谁，此时可以直接更新LEADING和FOLLOWING状态了","like_count":0},{"had_liked":false,"id":301441,"user_name":"Jia Tiancai","can_delete":false,"product_type":"c1","uid":2548102,"ip_address":"","ucode":"EF2F5FE8A0DF3E","user_header":"","comment_is_top":false,"comment_ctime":1625700885,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"1625700885","product_id":100046101,"comment_content":"1. 领导者选举的目标，是选举出大多数节点中数据最完整的节点，也就是大多数节点中事务标识符值最大的节点。<br>问题1：如果只有少数节点数据更新，选举出来的主节点数据可能不是最完整的吧？<br>问题2：一个任期内节点可以响应多次，那么就会存在多个节点都获取大多数选票，出现这种情况怎么处理呢？","like_count":0},{"had_liked":false,"id":293538,"user_name":"amy","can_delete":false,"product_type":"c1","uid":1106631,"ip_address":"","ucode":"C6DAA11AFD3EC9","user_header":"https://static001.geekbang.org/account/avatar/00/10/e2/c7/f671bd93.jpg","comment_is_top":false,"comment_ctime":1621423667,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1621423667","product_id":100046101,"comment_content":"韩老师，也就是在 follower 检测到 leader 崩溃退出后，follower 切换状态为选举状态并生成初始投票时，选取的事务 zxid 是所有接收到的 proposal 中最大的 zxid，尽管这个 proposal 可能还没有被 commit。 比如，除了原来旧的 leader 外，一个 proposal 仅仅只被集群中的一个 follower 收到，在重新选 leader 时，拥有这个 proposal 的 follower 会被选为新的 leader ，因为事务id zxid 最大，然后这个 proposal 会被同步到整个集群。","like_count":0,"discussions":[{"author":{"id":1181844,"avatar":"https://static001.geekbang.org/account/avatar/00/12/08/94/2c22bd4e.jpg","nickname":"克里斯","note":"","ucode":"00B755C10AC1C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531965,"discussion_content":"新的leader会检查自身有没有未被提交的提案，如果有的，则会向集群中发送请求，询问其他follow节点是否存在其提案，\n如果超过半数回复ok,则执行提交操作，之后进行数据同步操作","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637484226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279009,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1613540480,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613540480","product_id":100046101,"comment_content":"<br>epoch和逻辑时钟是什么关系？zookeeper的paper中的伪代码用round这个变量来代表逻辑时钟，其判断逻辑和文章中说的是一样的。那epoch还有什么用处？能否起到raft中term类似的作用？有点糊涂了。逻辑时钟知否只有在lookForLeader方法中才会+1？","like_count":0},{"had_liked":false,"id":276015,"user_name":"Bachue Zhou","can_delete":false,"product_type":"c1","uid":1494491,"ip_address":"","ucode":"3175754775CA32","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","comment_is_top":false,"comment_ctime":1611746367,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1611746367","product_id":100046101,"comment_content":"感觉这个选举算法好慢，中间有不少通讯其实是可以省略的，过多的通讯在网络较差的情况下必然减慢选举速度，而根据我的理解，迟迟选不出领导者，整个系统就不能写入了，也就是虽然有半数以上节点存活，系统事实上不可用。","like_count":0,"discussions":[{"author":{"id":2743526,"avatar":"","nickname":"Geek_0be686","note":"","ucode":"8308443BAD3B12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390939,"discussion_content":"zab协议是multi paxos的实践，应该可以省略准备请求阶段啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630163347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690353,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ca/f1/0981a55f.jpg","nickname":"BurukeYou","note":"","ucode":"AEE5D8C205ECD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359555,"discussion_content":"这个不是叫快速领导者选举算法吗😂应该不会慢吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616227569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259094,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1604629689,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604629689","product_id":100046101,"comment_content":"是怎么计算选票的了。每个looking节点是要记录投票信息吗？那looking节点怎么知道投票数超过大多数节点。也就是它怎么知道当前参与所有选举所有节点个数。","like_count":0},{"had_liked":false,"id":242501,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597743345,"is_pvip":false,"replies":[{"id":"90287","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1598966197,"ip_address":"","comment_id":242501,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1597743345","product_id":100046101,"comment_content":"ZAB协议中,ZAB协议是通过快速领导者选举,来选举出新的领导者的,那么会出现选票会瓜分的情况吗?<br>必然可能啊,ZAB是一种脱胎于Multi-Paxos的算法,其本质上也是一种投票选举,那么对于这种投票选举,设置不同的选举时间是一种相对较好的选择<br>看到这个选举突然想到了网络环路中STP的算法解决","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504022,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598966197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028944,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/90/2caa07d0.jpg","nickname":"Geek8815","note":"","ucode":"D5102AFFA20E7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591319,"discussion_content":"为啥会加一颗星，不是应该不会出现瓜分票数吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666495227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240757,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1597054404,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597054404","product_id":100046101,"comment_content":"逻辑时钟怎么理解，不是应该所有节点都参与选举吗，选举一次逻辑时钟加1，那所有节点的逻辑时钟不是应该相同吗","like_count":0,"discussions":[{"author":{"id":1314800,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/f0/37feaa1d.jpg","nickname":"马林","note":"","ucode":"38AA3E2EB1CC5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379890,"discussion_content":"会出现集群新加入节点跟节点故障恢复的情况","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624205298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}