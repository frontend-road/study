{"id":481607,"title":"19 | Sentinel 实战：如何为项目添加异常降级方案？","content":"<p>你好，我是姚秋辰。</p><p>上节课我们学习了如何将应用接入Sentinel实现不同的流控效果，今天我们来学习Sentinel组件另一个重要功能：降级熔断。通过这节课，你可以知道如何通过Sentinel的熔断策略处理各种调用异常。除此之外，我还会讲解Sentinel熔断器开关的状态变化过程。</p><p>在<a href=\"https://time.geekbang.org/column/article/479785\">第17课</a>中我们学习过降级和熔断的作用，今天我们就先从降级开始，了解一下如何利用Sentinel的注解指定降级方法。</p><p>这里我将以Template服务的模板批量查询接口为例，向你演示如何设置降级方法。为什么我会选择这个接口？因为券模板查询是一个基础服务，很多上游的业务场景都依赖这个接口获取模板信息，所以它的访问压力相比于其它接口就大得多了，也更容易发生各种服务超时之类的异常情况。</p><p>如果你已经准备好了，我们就从编写降级逻辑开始吧。</p><h2>编写降级逻辑</h2><p>上一节课中，我们在Template服务的批量领劵接口之上添加了一个SentinelResource注解，并在其中使用blockHandler属性指定了降级方法的名称。不过呢，这个注解可不是一个万金油注解，它只能在服务抛出BlockException的情况下执行降级逻辑。</p><p>什么是BlockException呢？这个异常类是Sentinel组件自带的类，当一个请求被Sentinel规则拦截，这个异常便会被抛出。比如请求被Sentinel流控策略阻拦住，或者请求被熔断策略阻断了，这些情况下你可以使用SentinelResource的blockHandler注解来指定降级逻辑。但是对于其它RuntimeException的异常类型它就无能为力了。</p><!-- [[[read_end]]] --><p>我们如何指定一段通用的降级逻辑，来应对BlockException以外的RuntimeException呢？你可以使用SentinelResource中的另一个属性：<strong>fallback</strong>。</p><p>以Template服务的批量查询接口为例，我通过fallback属性指定了一段降级逻辑，用来处理各种运行期异常的情况。你可以参考下面这段代码。</p><pre><code class=\"language-java\">@GetMapping(\"/getBatch\")\n@SentinelResource(value = \"getTemplateInBatch\",\n        fallback = \"getTemplateInBatch_fallback\",  \n        blockHandler = \"getTemplateInBatch_block\")\npublic Map&lt;Long, CouponTemplateInfo&gt; getTemplateInBatch(\n        @RequestParam(\"ids\") Collection&lt;Long&gt; ids) {\n    // 如果接口被熔断，那么下面这行log不会被打印出来\n    log.info(\"getTemplateInBatch: {}\", JSON.toJSONString(ids));\n}\n\n// 接口被降级时的方法\npublic Map&lt;Long, CouponTemplateInfo&gt; getTemplateInBatch_fallback(\n        Collection&lt;Long&gt; ids) {\n    log.info(\"接口被降级\");\n    return Maps.newHashMap();\n}\n</code></pre><p>在这段代码中，我通过fallback属性指定了当前资源的降级方法是getTemplatInBatch_fallback。</p><p>这里你需要注意，如果降级方法的方法签名是BlockException，那么fallback是无法正常工作的。这点和blockHandler属性的用法是不一样的。我在注解中同时使用了fallback和blockHandler属性，如果服务抛出BlockException，则执行blockHandler属性指定的方法，其他异常就由fallback属性所对应的降级方法接管。</p><p>如果你不想把降级方法定义在当前Class中，而是想新建一个Class来统一管理这些降级逻辑，那么你可以通过SentinelResource注解的fallbackClass属性指定一个保存降级逻辑的Class。</p><p>在大多数的实际场景下，我们在降级方法中执行的是静默逻辑，即<strong>尽可能返回一个可被服务处理的默认值</strong>。举个例子，对于商品详情页的营销优惠计算服务来说，如果发生了服务异常导致的降级，我们可以在服务中返回商品原价，并通过一个特殊标记或属性告诉前端优惠计算发生错误，让前端页面可以根据这个异常标记显示特定提示信息。</p><p>定义好降级逻辑，接下来我们就可以去Sentinel控制台设置熔断策略了。</p><h2>在控制台添加熔断策略</h2><p>你可以将Sentinel控制台和本地微服务模块一同启动。然后，登录Sentinel控制台并展开coupon-template-serv模块的导航栏，并在“熔断规则”面板中新建一个规则。</p><p>你会看到，Sentinel的熔断规则有3种，分别是异常比例、异常数和慢调用比例。我们可以分别看看它们是如何使用的。</p><p>首先，你可以指定以“<strong>异常比例</strong>”为熔断开关的判断逻辑。在10秒的统计窗口内，如果异常调用的比例超过了60%，并且满足请求数量&gt;=5，就开启一段为期5秒的熔断时间。</p><p>我录了一段video，你可以参考一下具体的设置规则。</p><p><video poster=\"https://media001.geekbang.org/73cab0b5fa404e74810e40057d4825b3/snapshots/d81c205dda8f4d16829b8ed47b57f6ff-00002.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/1232ec98-17e814e3169-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/55b6b10d4b47494fbe40435e860e40fe/b683dc664a6c4c0ba89992b3f412893d-300287fbe6493b36d357fd328077a060-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>在设置过程中，你一定要注意界面上显示的时间单位。<strong>“熔断时长”的时间单位是秒，而“统计窗口”的时间单位是毫秒</strong>，这两者很容易弄混。</p><p>接下来，你可以故意在代码中选择性地抛出一个RuntimeException，比如当Template服务批量查询服务的ID数量为3时抛出异常，这样你就可以验证熔断器的效果了。</p><p>我画了一张流程图，可以帮助你理解Sentinel的熔断规则的统计方式，我们一起来看一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/cd/3cdca1d704c537314b7014172245aecd.jpg?wh=1920x864\" alt=\"图片\"></p><p>从图中你可以看出，Sentinel底层通过一段跨度为10秒的滑动窗口来统计服务调用情况。在这段窗口时间内，前三个服务请求全部失败，这时失败率已经达到100%，大大超过了我们定义的60%的阈值，但是熔断开关却没有打开，这是因为统计窗口的最小请求数还没有达到设定值5。</p><p>之后又有两个请求被处理，一个成功一个失败，这时请求个数已经达到了5，失败率是80%，那么Sentinel就开启了一段5秒的熔断时间。在这段时间内，所有来访请求都不会得到真实的执行，而是转而执行降级逻辑。</p><p>为了验证在熔断期间只有降级逻辑会被执行，你可以在getTemplateInBatch方法的第一行打印一条日志信息，我们预期的结果是，在熔断期间这行日志不会被打印到控制台。</p><p>你已经了解了如何基于异常比例添加熔断规则，接下来我们就趁热打铁，去看看如何根据“异常数”和“慢调用比例”来设置熔断规则。</p><p>“<strong>异常数</strong>”熔断规则和前面我们设置的异常比例熔断规则几乎一样，唯一的区别就是“异常数”的判定条件是统计窗口内发生异常的个数，而不是去统计异常请求的比例。在下面这张图里，我设置了一个基于异常数判定的规则，即getTemplateInBatch请求在10秒内异常数&gt;2，则触发5秒的熔断窗口。</p><p><img src=\"https://static001.geekbang.org/resource/image/23/84/23a1fda671fdf4bf61c850a4yyc07a84.png?wh=683x415\" alt=\"图片\"></p><p>在这里我想提醒你注意，<strong>熔断器开启的判定条件是异常数&gt;2</strong>，注意这里是<strong>大于</strong>2而不是大于等于2。也就是说，即便在窗口期内你调用了5次接口，其中有2个接口发生了异常，那么你也要等下一次失败调用发生之后，才能满足异常数大于2的判定条件，触发熔断。</p><p>现在，你也了解了“异常数”熔断规则。那么接下来，我们就举一反三去了解如何设置基于慢调用比例的熔断规则。通常来说，慢调用请求所占比例逐渐增多，这是服务雪崩的前兆。为了将影响范围缩小，我们要做的就是<strong>尽早捕捉到慢调用请求的比例变化趋势，及时通过熔断规则对服务进行减压</strong>。</p><p>在下面的图中，我设定了一条慢调用判定条件。在10秒的统计窗口内，如果响应时间大于1000ms的请求所占总请求数量的比例超过了0.4，并且请求总数量&gt;=5，此时将触发Sentinel的熔断开关，开启5秒的熔断窗口。</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/95/cea1c964a594fc03402cc9d0156d7995.png?wh=683x415\" alt=\"图片\"></p><p>需要注意的是，当服务请求超过设置的最大响应时间，Sentinel只是会将该次请求作为一次慢响应加入到统计数据里，并不会将这个请求直接阻塞掉。因此，<strong>这里的最大RT只是一个用来做统计的条件参数，而不是超时判定的参数</strong>。</p><p>在真实业务中，“慢调用”是一个关键侦测指标，拿阿里系的应用监控为例，业务层有RT监控，DB层也有慢SQL监控，目的就是将可能的服务雪崩扼杀于摇篮之中。因为当服务响应逐渐变慢的时候，说明集群所承接的业务流量也在同步增加，当RT越来越大直到达到一个阈值的时候，集群的吞吐量必然会迎来一个拐点。这个拐点也是全链路压测时要获取的一个关键指标，它是集群吞吐量的极限。</p><p>到这里，相信你已经对Sentinel的熔断策略有了全面的了解。但是，你知道Sentinel是如何判定熔断开关的开启和关闭吗？也许你会以为只要熔断时间结束，Sentinel就会立即回到正常状态。你只答对了一半，在熔断开关的开启和关闭之间，其实还有一个半开状态。接下来我就带你去了解Sentinel的熔断状态转换规则。</p><h2>Sentinel熔断开关的状态转换</h2><p>Sentinel的熔断器会在开启、关闭和半开这三种逻辑状态之间来回切换，为了方便你理解整个过程，我画了一张图来解释熔断器的状态变化，你可以参考一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/29/3f/29a0a46092b8b3d8387bc2bea187c63f.jpg?wh=1920x632\" alt=\"图片\"></p><p>从图中你可以看出，在第一个统计窗口内熔断器是处于关闭状态的，达到熔断判定条件之后，Sentinel开启了一段熔断窗口。在这段窗口时间内，熔断器是处于开启状态的，这时新的服务请求会执行降级逻辑。待熔断窗口结束，Sentinel会将熔断器状态置为“半开”状态，这是一个介于完全开启和完全关闭之间的中间态。</p><p>在半开状态下，如果有一个新请求过来，那么Sentinel会试探性地让这个请求去执行正常的业务逻辑，如果执行成功，那么Sentinel将关闭熔断器并退出熔断状态，如果执行失败，那么Sentinel将再次开启一个新的熔断窗口。</p><p>从这里我们可以得出一个信息，当熔断器处于“半开”状态时，只要下一个请求失败，就立即打回熔断状态，并不需要再次满足熔断规则中设置的各种条件。</p><p>到这里，相信你已经对Sentinel的熔断机制都有了比较全面的认识。现在，我们就来回顾一下这节课的重点内容吧。</p><h2>总结</h2><p>今天我带你了解了Sentinel的三种熔断策略，分别是慢调用比例、异常比例、异常数，你还知道了这三种策略背后的熔断状态流转过程。借助Sentinel的三种熔断策略，我们可以对各种潜在的异常调用进行防范，并及时对异常链路做熔断处理，降低服务的访问压力。</p><p>在实际的业务场景中，<strong>慢调用比例</strong>和<strong>异常比例</strong>是两个比较常用的熔断策略。因为无论当前服务处于低水位还是高水位，百分比数据都能够从统一口径反映出服务稳定性情况。</p><p>但是对于异常数来说，在低水位和高水位下就会产生一些统计偏差，比如我设置异常数&gt;5触发熔断，在QPS=20的情况下，这个判定条件看起来没什么问题，但当QPS=200的情况下，只要有2.5%的请求失败就会进入熔断状态，这显然并不合理。</p><p>因此，我个人比较推荐你在项目中使用慢调用和异常比例策略作为容错规则，这样不管集群当前水位高还是低，都能获得一个相对准确的判定标准。</p><p>不知你是否注意到了，我们之前添加的限流规则和熔断规则都是临时数据，并没有持久化到某个存储介质中，所以每次重启控制台和应用的时候，这些规则都会消失不见，你还得去重新设置一遍，这显然是很不方便的。所以下一节课，我要带你解决这个问题，看看我们如何借助Nacos实现限流规则的持久化。</p><h2>思考题</h2><p>通过这节课的内容，你能结合Sentinel的源代码，去深入了解熔断策略的底层实现吗？我还是先把藤交到你手上，你可以先尝试找到哪个Slot类处理了熔断降级判定，再进一步了解每个不同的熔断策略对应了源码中的哪个类。如果你顺藤摸瓜往下探索，就能了解整个流程的全貌了。</p><p>好啦，这节课就结束啦。欢迎你把这节课分享给更多对Spring Cloud感兴趣的朋友。我是姚秋辰，我们下节课再见！</p>","neighbors":{"left":{"article_title":"18 | Sentinel 实战：如何实施流量整形与限流策略？","id":481074},"right":{"article_title":"20 | Sentinel 实战：如何接入 Nacos 实现规则持久化？","id":482647}},"comments":[{"had_liked":false,"id":332134,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1643034778,"is_pvip":true,"replies":[{"id":"121477","content":"1：slot可以认为是类似filter的模式；<br>2：可以添加自定义规则，定义新的slot即可；<br>3：异常处理要case by case，没有万金油方案。但很多异常是突发流量导致的，等水位下来之后就解决了","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1643301652,"ip_address":"","comment_id":332134,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18822903962","product_id":100101301,"comment_content":"Q1：Sentinel的实现原理是filter还是代理?<br>在服务调用过程中，sentinel是以filter方式对请求进行处理吗？不过，sentinel能中断正常的调用逻辑，所以感觉也不像是filter。那么，sentinel是通过代理实现的吗？<br>Q2：能增加自定义的熔断规则吗？<br>除了自带的三种熔断规则，是否能够增加自定义的熔断规则？如果能增加，有哪些常见的自定义规则？（同样地，对于流控，除了自带的三种流控方法，还可以自定义流控规则吗？）<br>Q3：服务出错最终是怎么解决的？<br>降级和熔断只是暂时的处理方法，最终是怎么处理的？最终是要靠人工处理吗？ 比如重启应用、重启机器等。在实际运营中，系统从错误恢复正常，是系统自我调整居多？ 还是人工干预居多？","like_count":5,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548675,"discussion_content":"1：slot可以认为是类似filter的模式；\n2：可以添加自定义规则，定义新的slot即可；\n3：异常处理要case by case，没有万金油方案。但很多异常是突发流量导致的，等水位下来之后就解决了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643301652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332040,"user_name":"so long","can_delete":false,"product_type":"c1","uid":1449679,"ip_address":"","ucode":"2A6B47BB32FC18","user_header":"https://static001.geekbang.org/account/avatar/00/16/1e/cf/97cd8be1.jpg","comment_is_top":false,"comment_ctime":1642993818,"is_pvip":false,"replies":[{"id":"121472","content":"如果某个异常是可以被接受的，其实就不算做异常了，应用层加个handler统一处理一下把特定异常吞掉，曲线救国：）","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1643300771,"ip_address":"","comment_id":332040,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5937961114","product_id":100101301,"comment_content":"老师，请教一个问题，代码中抛出自己封装的业务异常RuntimeException，不想被sentinel的熔断规则统计进去，应该如何处理?","like_count":2,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548670,"discussion_content":"如果某个异常是可以被接受的，其实就不算做异常了，应用层加个handler统一处理一下把特定异常吞掉，曲线救国：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643300771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332715,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1643514603,"is_pvip":false,"replies":[{"id":"121826","content":"我其实蛮喜欢用hystrix的，但它的源码里用函数式编程用魔障了，代码非常难debug跟，开源团队的维护成本肯定贼大","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1644326429,"ip_address":"","comment_id":332715,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1643514603","product_id":100101301,"comment_content":"熔断，首先要进行依赖隔离，只要分出了那些是核心的，那些非核心的，才能做好隔离，Hystrix 记得好像是采用线程池和信号量的方式进行隔离，采用线程池需要会增加线程切换的成本。Sentinel 基于信号量进行隔离，对依赖的某个资源的进行并发数量限制。<br>俩者都可以采用信号量的方式，但是 Hystrix 好像对于慢调用处理不够及时。<br><br>","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549994,"discussion_content":"我其实蛮喜欢用hystrix的，但它的源码里用函数式编程用魔障了，代码非常难debug跟，开源团队的维护成本肯定贼大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644326429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3021110,"avatar":"","nickname":"Geek_eca226","note":"","ucode":"E738A5618F3218","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580345,"discussion_content":"请问依赖隔离是什么意思啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658114842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332098,"user_name":"海阔天空","can_delete":false,"product_type":"c1","uid":1993942,"ip_address":"","ucode":"003AB0764CA7A4","user_header":"https://static001.geekbang.org/account/avatar/00/1e/6c/d6/22360bd3.jpg","comment_is_top":false,"comment_ctime":1643015864,"is_pvip":false,"replies":[{"id":"121346","content":"同学可以把配置代码和日志发出来看下，只看描述我没太明白“后面再获取dataid”是哪个场景","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1643040757,"ip_address":"","comment_id":332098,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1643015864","product_id":100101301,"comment_content":"照着代码写的，配置也是一样的（我习惯用properties格式）。服务启动的时候控制台日志 dataid为null.properties。断点进去看的的时候第一遍dataid是显示的有我配置的值，后面再获取的时候却是null.properties。。。然后又原模原样换成老师的配置，dataid也是显示null.yml。。这是为啥呢？","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548150,"discussion_content":"同学可以把配置代码和日志发出来看下，只看描述我没太明白“后面再获取dataid”是哪个场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643040757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1993942,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/6c/d6/22360bd3.jpg","nickname":"海阔天空","note":"","ucode":"003AB0764CA7A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548834,"discussion_content":"已经解决～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643419590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332095,"user_name":"请叫我和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1643014203,"is_pvip":false,"replies":[{"id":"121348","content":"感谢老铁的支持，双击666","user_name":"作者回复","user_name_real":"编辑","uid":"2819998","ctime":1643041217,"ip_address":"","comment_id":332095,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1643014203","product_id":100101301,"comment_content":"日常追更，每次做第一个打卡留言的人","like_count":0,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548152,"discussion_content":"感谢老铁的支持，双击666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643041218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}