{"id":780316,"title":"20｜映射类型（映射key）","content":"","comments":[{"had_liked":false,"id":396478,"user_name":"郑俊毅","can_delete":false,"product_type":"c3","uid":3022939,"ip_address":"重庆","ucode":"12C9ADC4A29ECD","user_header":"","comment_is_top":false,"comment_ctime":1734615061,"is_pvip":false,"replies":[{"id":143939,"content":"挺不错的解题思路和过程，值得其它同学阅读借鉴。\n\n有问题的地方在于，这个结果与题设略有不符。——尽管也正确，但确实有些背离了出题的目的了。关于这一点，在留言区中，对于Geek_aeb936的评论中也讲过，确实此题的原意是不期望大家用交叉来解题的。","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1734748514,"ip_address":"江苏","comment_id":396478,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"&#47;&#47; 官方（lib.ews5.d.ts）中ArrayLike如下：\ninterface ArrayLike&lt;T&gt; {\n    readonly length: number;\n    readonly [n: number]: T;\n}\n&#47;&#47; ai 给出的类数组，如下：\ninterface ArrayLike&lt;T&gt; {\n  readonly length: number;\n  [n: number]: T;\n}\n&#47;&#47; 官方和ai区别就是：索引签名 [n: number]: T 中的元素可以是可变的或不可变的，暂且不管\n&#47;&#47; 就以ai给的为标准\n&#47;&#47; 分析：类数组与数组的不同\n&#47;&#47; 1、类数组只有number类型的key，数组除了numbe类型的key以外还有（toString、length、splice...）；\n&#47;&#47; 2、类数组length只读，数组的length可变；\n&#47;&#47; 思路：\n&#47;&#47; 1、因为元祖T本质还是一个数组，k in keyof T时候，数组的属性和方法（toString、length、splice）都会在遍历中生成，要把和number无关的删除掉，使用never;\n&#47;&#47; 2、单独保留 length 并且 readonly\ntype TupleToArrayLike&lt;T extends unknown[]&gt;  = {\n  [k in keyof T as k extends number ? k :  never ]:T[k];\n} &amp; {readonly length:T[&#39;length&#39;]}","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":655378,"discussion_content":"挺不错的解题思路和过程，值得其它同学阅读借鉴。\n\n有问题的地方在于，这个结果与题设略有不符。——尽管也正确，但确实有些背离了出题的目的了。关于这一点，在留言区中，对于Geek_aeb936的评论中也讲过，确实此题的原意是不期望大家用交叉来解题的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1734748514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393195,"user_name":"Geek_aeb936","can_delete":false,"product_type":"c3","uid":3887128,"ip_address":"日本","ucode":"863338D4895F25","user_header":"","comment_is_top":false,"comment_ctime":1723097215,"is_pvip":false,"replies":[{"id":142806,"content":"Tuple的完全映射的结果还是Tuple，所以这个答案的最终结果还是元组与对象的“交叉类型”，算不上ArrayLike“对象类型”。","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1723110583,"ip_address":"江苏","comment_id":393195,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"type TupleToArrayLike&lt;T extends any[]&gt; = {\n    [K in keyof T]: T[K];\n} &amp; { length: T[&#39;length&#39;]; };\n\n\ntype MyTuple = [1, 2, 3, string, &#39;a&#39;, false];\n&#47;*\ntype MyArrayLike = [1, 2, 3, string, &quot;a&quot;, false] &amp; {\n    length: 6;\n}\n*&#47;\ntype MyArrayLike = TupleToArrayLike&lt;MyTuple&gt;;\n\n请问这样可以吗","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649299,"discussion_content":"Tuple的完全映射的结果还是Tuple，所以这个答案的最终结果还是元组与对象的“交叉类型”，算不上ArrayLike“对象类型”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1723110584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":3,"child_discussions":[{"author":{"id":3887128,"avatar":"","nickname":"Geek_aeb936","note":"","ucode":"863338D4895F25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":649339,"discussion_content":"type T = [1, 2, 3, string, &#39;a&#39;, false];\n\n// 定义包含额外属性的类型\ntype AdditionalProperties&lt;T extends any[]&gt; = {\n  length: T[&#39;length&#39;];\n  [n: number]: T[number];\n};\n\n// 使用映射类型处理元组的键\ntype MappedType&lt;T extends any[]&gt; = {\n  [K in keyof T as K extends `${number}` ? K : never]: T[K];\n};\n\n// 结合以上两种类型\ntype ArrayLike&lt;T extends any[]&gt; = MappedType&lt;T&gt; &amp; AdditionalProperties&lt;T&gt;;\n\ntype X = ArrayLike&lt;T&gt;;\n\nconst arrayLikeObject: X = {\n  0: 1,\n  1: 2,\n  2: 3,\n  3: &#34;hello&#34;,\n  4: &#39;a&#39;,\n  5: false,\n  length: 6\n};\n\nconsole.log(arrayLikeObject[0]); // 输出 1\nconsole.log(arrayLikeObject.length); // 输出 6\n\n老师您好 这样做是否可以？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1723180836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":649299,"ip_address":"日本","group_id":0},"score":649339,"extra":""},{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":3887128,"avatar":"","nickname":"Geek_aeb936","note":"","ucode":"863338D4895F25","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649381,"discussion_content":"怎么说呢，我明白你的思路，结果也是对的（当然如果在ArrayLike&lt;&gt;后面用Omit&lt;&gt;来抄写一下更好），但何必要用交叉来处理两个工具类型的返回呢？在一个映射过程中处理所有的过滤不是更好么？例如：\n\n```\n// 使用映射类型处理元组的键\ntype MappedType&lt;T extends any[]&gt; = {\n  [K in keyof T as K extends number|&#34;length&#34;|`${number}` ? K : never]: T[K];\n};\n\ntype ArrayLike = MappedType; // 连Omit也不需要了\n```\n\n如果不想在keyof .. as 中使用复杂表达式的话，也可以这样：\n```\ntype MappedType&lt;T extends any[]&gt; = {\n  [K in Extract&lt;keyof T, number|&#34;length&#34;|`${number}`&gt;]: T[K];\n};\n```\n\n当然，如果不考虑&#34; 使用映射类型处理&#34;这个出题目的，而只是解题的话，那也可以接用Pick：\n```\ntype ArrayLike&lt;T extends any[]&gt; = Pick&lt;T, number|&#34;length&#34;|(keyof T &amp; `${number}`)&gt;;\n```\n\n最后说明一下，其实ArrayLike这个类型不必包括number这个索引key，所以上述几个写法中，可以从筛选条件中去掉number。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1723238508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":649339,"ip_address":"江苏","group_id":0},"score":649381,"extra":""},{"author":{"id":3887128,"avatar":"","nickname":"Geek_aeb936","note":"","ucode":"863338D4895F25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":649387,"discussion_content":"确实 最近一直陷入各种交叉中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1723267124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":649381,"ip_address":"日本","group_id":0},"score":649387,"extra":""}]}]},{"had_liked":false,"id":391308,"user_name":"fatme","can_delete":false,"product_type":"c3","uid":1034451,"ip_address":"广东","ucode":"75A805D2BB2AD1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c8/d3/3020ae46.jpg","comment_is_top":false,"comment_ctime":1717919033,"is_pvip":false,"replies":[{"id":142320,"content":"如果想实现成Array类型也是可以的，只是说正常情况下不会用映射的方法。（可以用展开、交叉，以及readonly array等）\n\n在你的代码中有一行bug，`k extends number ? any ...`这里返回any是不对的，因为与T20_2对应的数组并不是Array&lt;any&gt;。Tuple[number]其实返回的会是正确的基础类型，所以直接使用T20_2[number]就可以了。\n\n在X20_1中，逐个检测`&#39;0&#39;|&#39;1&#39;| ...`这种方法也并不划算，使用前面讲的过的模板字符串字面类型就好，例如：k extends `${number}` ? ...\n\n至于问题Q，其实你已经回答过了呵。关于Tuple映射到对应的Array，如下：\n```\ntype X20_3 {\n  [k in keyof T20_2]: k extends &#39;length&#39; ? number : T20_2[k];\n}\n```\n因为tuple和array是相同的，只是length属性在tuple中被处理成了只读，并且会是一个数字字面类型。","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1718005706,"ip_address":"江苏","comment_id":391308,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"稍微改变一下作业要求，改为利用元组类型和映射，实现一个 Array 类型。\n\ntype T20_2 = [1, 2, 3, string, &#39;a&#39;, false];\n&#47;&#47; 方法 1, 在映射里面直接使用 keyof\ntype X20_1 = {\n    [k in keyof T20_2 as (\n        k extends (&#39;0&#39;|&#39;1&#39;|&#39;2&#39;|&#39;3&#39;|&#39;4&#39;|&#39;5&#39;) ? never : k\n    ) ]: (k extends number ? any : (k extends &#39;length&#39; ? number : T20_2[k]));\n}\n&#47;&#47; 方法 2，先提取 keyof 到类型变量\ntype T20_3 = keyof T20_2;\ntype X20_2 = {\n    [k in T20_3 ]: (k extends number ? any : (k extends &#39;length&#39; ? number : T20_2[k]));\n}\n\n问题：这两种方法得到的 X20_1 和 X20_2 是不同的，X20_1 的成员数量比 X20_2 少，这个是为什么呢？哪种方法更正确一点？麻烦老师解释一下，谢谢！","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646451,"discussion_content":"如果想实现成Array类型也是可以的，只是说正常情况下不会用映射的方法。（可以用展开、交叉，以及readonly array等）\n\n在你的代码中有一行bug，`k extends number ? any ...`这里返回any是不对的，因为与T20_2对应的数组并不是Array&lt;any&gt;。Tuple[number]其实返回的会是正确的基础类型，所以直接使用T20_2[number]就可以了。\n\n在X20_1中，逐个检测`&#39;0&#39;|&#39;1&#39;| ...`这种方法也并不划算，使用前面讲的过的模板字符串字面类型就好，例如：k extends `${number}` ? ...\n\n至于问题Q，其实你已经回答过了呵。关于Tuple映射到对应的Array，如下：\n```\ntype X20_3 {\n  [k in keyof T20_2]: k extends &#39;length&#39; ? number : T20_2[k];\n}\n```\n因为tuple和array是相同的，只是length属性在tuple中被处理成了只读，并且会是一个数字字面类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1718005707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":391231,"user_name":"Jack Q","can_delete":false,"product_type":"c3","uid":1160078,"ip_address":"广东","ucode":"A7DBC311884FFA","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","comment_is_top":false,"comment_ctime":1717662149,"is_pvip":false,"replies":[{"id":142282,"content":"^^. 不太对呵\n\n仔细想想，ArrayLike应该是怎样的。：）\n","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1717674577,"ip_address":"江苏","comment_id":391231,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"&#47;&#47; 作业:使用映射类型的方法，来得到一个 元组类型对应的 ArrayLike 对象类型\ntype TP = [1, 2, 3, string, &#39;a&#39;, false];\n\n&#47;&#47; 方式1:\ntype R0 = {\n  [key in keyof TP] : TP[key]\n}\n\n&#47;&#47; 方式2:\ntype ArrayLikeCondition&lt;T extends readonly any[],U extends keyof T = keyof T&gt; = {\n  [K in U]: T[K];\n};\ntype R1 = ArrayLikeCondition&lt;TP&gt;;","like_count":0,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646296,"discussion_content":"^^. 不太对呵\n\n仔细想想，ArrayLike应该是怎样的。：）\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717674577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1160078,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","nickname":"Jack Q","note":"","ucode":"A7DBC311884FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646317,"discussion_content":"看了下 ts lib 中对 ArrayLike 的定义:\ninterface ArrayLike&lt;T&gt; {\n    readonly length: number;\n    readonly [n: number]: T;\n}\n所以修改后的答案:\ntype RES = {\n  [key in keyof TP as key extends number | &#39;length&#39; ? key : never] : TP[key]; \n}\n之前的 R0 和 R1 里多了 在 Array 却不在 ArrayLike 中的属性\ntype NotInArrayLike = Exclude&lt;keyof Array&lt;any&gt;, keyof ArrayLike&lt;any&gt;&gt;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717724590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1160078,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","nickname":"Jack Q","note":"","ucode":"A7DBC311884FFA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646363,"discussion_content":"这仍然不算一个太好的答案。有两点，第一是tuple中既有的下标成员其实应该出现在新的对象类型中，第二则是length对于arraylike来说，要考虑它的类型是number，而不是number的字面量（tuple中是某个具体的字面值）。\n\n在javascript中，arraylike是“有length属性的一般对象，且成员key都是数字”。这个约定在ts lib中基本对应，但是“readonly&#34;这个性质就有点不确定性了。——这是js/ts之间的一点差异。所以这道题并没有强调readonly的使用。——当然你的答案中也没有加，这里只是提提。\n\n这个题其实可以像下面这样写，你的答案已经非常接近了。：）\n\n```\n// 1、注意keyof在取tuple的key时不会合并，所以这里也并不是必须将keyof直接用在in的右侧然后再as。\n// 2、不合并的原因，是tuple只有number类型的索引，不会合并掉类似于&#39;0&#39;,&#39;1&#39;...这样的字符串key\ntype R = {\n  [key in Extract&lt;keyof TP, &#34;length&#34;|number|`${number}`&gt;]:\n    key extends &#34;length&#34; ? number : TP[key];  // &#34;length&#34; 需要单独处理\n}\n```\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717772369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":646317,"ip_address":"江苏","group_id":0},"score":646363,"extra":""},{"author":{"id":1160078,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","nickname":"Jack Q","note":"","ucode":"A7DBC311884FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":646412,"discussion_content":"// RES 的结果 等同于 RES1\ntype RES = {\n  [key in keyof TP as key extends number | &#39;length&#39; | `${number}` ? key : never] : TP[key]; \n}\ntype RES1 = {\n    [x: number]: string | false | 1 | 2 | 3;\n    0: 1;\n    1: 2;\n    2: 3;\n    3: string;\n    4: &#34;a&#34;;\n    5: false;\n    length: 6;\n}\n// R 的结果 等同于 R1\ntype R = {\n  [key in Extract&lt;keyof TP, &#34;length&#34;|number|`${number}`&gt;]:\n    key extends &#34;length&#34; ? number : TP[key];  // &#34;length&#34; 需要单独处理\n}\ntype R1 = {\n    [x: number]: string | false | 1 | 2 | 3;\n    0: 1;\n    1: 2;\n    2: 3;\n    3: string;\n    4: &#34;a&#34;;\n    5: false;\n    length: number;\n}\n为什么 这里的 length 最后 要处理成 number 而不是 字面量 6 呢?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717945285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":646363,"ip_address":"广东","group_id":0},"score":646412,"extra":""},{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1160078,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","nickname":"Jack Q","note":"","ucode":"A7DBC311884FFA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646465,"discussion_content":"ArrayLike没有要求必须是定长数组，而Tuple是定长的。定长数组（比如说元组）不能push或者pop，因为这会改变长度。而ArrayLike数组在js中只是“像”数组，成员却是可以增删的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1718032448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":646412,"ip_address":"江苏","group_id":0},"score":646465,"extra":""}]}]},{"had_liked":false,"id":392026,"user_name":"云中行走","can_delete":false,"product_type":"c3","uid":1798511,"ip_address":"陕西","ucode":"99C0EF21FCF6B3","user_header":"https://static001.geekbang.org/account/avatar/00/1b/71/6f/0193d484.jpg","comment_is_top":false,"comment_ctime":1719761343,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"type T = [1,2,3,string,&#39;a&#39;,false]\ntype TKeys = keyof T\ntype StringIndices&lt;T extends readonly any[]&gt; = `${keyof T &amp; number}`\n\ntype x = {\n  [k in keyof T as k extends  StringIndices&lt;T&gt; | &#39;length&#39;?k:never]: T[k] \n}","like_count":0},{"had_liked":false,"id":391309,"user_name":"fatme","can_delete":false,"product_type":"c3","uid":1034451,"ip_address":"广东","ucode":"75A805D2BB2AD1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c8/d3/3020ae46.jpg","comment_is_top":false,"comment_ctime":1717920343,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"我大概明白了，是因为 X20_1 filter 走了 &#39;0&#39;|&#39;1&#39;|&#39;2&#39;|&#39;3&#39;|&#39;4&#39;|&#39;5&#39;，而 X20_2 没有。我以为 keyof 提前求值后，0 &#47; 1 &#47; 2 &#47; 3 &#47; 4 &#47; 5 会被合并到 number。但其实这 6 个都是字符，&#39;0&#39;|&#39;1&#39;|&#39;2&#39;|&#39;3&#39;|&#39;4&#39;|&#39;5&#39;，所以并不能合并到 number 里面，所以仍然会包含在 T20_3 中。","like_count":0}]}