{"id":74717,"title":"数学专栏课外加餐（二） | 位操作的三个应用实例","content":"<p>你好，我是黄申。欢迎来到第二次课外加餐时间。</p><h2>位操作的应用实例</h2><p>留言里很多同学对位操作比较感兴趣，我这里通过计算机中的位操作的几个应用，来帮你理解位操作。</p><h3>1.验证奇偶数</h3><p>在<a href=\"https://time.geekbang.org/column/article/72163\">第2节</a>里，我提到了，奇偶数其实也是余数的应用。编程中，我们也可以用位运算来判断奇偶数。</p><p>仔细观察，你会发现偶数的二进制最后一位总是0，而奇数的二进制最后一位总是1，因此对于给定的某个数字，我们可以把它的二进制和数字1的二进制进行按位“与”的操作，取得这个数字的二进制最后一位，然后再进行判断。</p><p>我这里写了一段代码，比较了使用位运算和模运算的效率，我统计了进行1亿次奇偶数判断，使用这两种方法各花了多少毫秒。如果在你的机器上两者花费的时间差不多，你可以尝试增加统计的次数。在我的机器上测试下来，同样次数的奇偶判断，使用位运算的方法耗时明显更低。</p><pre><code>public class Lesson1_append1 {\n \n public static void main(String[] args) {\n  \n  int even_cnt = 0, odd_cnt = 0;\n  long start = 0, end = 0;\n  \n  start = System.currentTimeMillis();\n  for (int i = 0; i &lt; 100000000; i++) {\n   \n   if((i &amp; 1) == 0){\n       even_cnt ++;\n   }else{\n       odd_cnt ++;\n   }\n   \n  }\n  end = System.currentTimeMillis();\n  System.out.println(end - start);\n  System.out.println(even_cnt + &quot; &quot; + odd_cnt);\n  \n  even_cnt = 0;\n  odd_cnt = 0;\n  start = 0;\n  end = 0;\n  \n  start = System.currentTimeMillis();\n  for (int i = 0; i &lt; 100000000; i++) {\n   \n   if((i % 2) == 0){\n       even_cnt ++;\n   }else{\n       odd_cnt ++;\n   }\n   \n  }\n  end = System.currentTimeMillis();\n  System.out.println(end - start);\n  System.out.println(even_cnt + &quot; &quot; + odd_cnt);\n\n }\n}\n</code></pre><h3>2.交换两个数字</h3><p>你应该知道，要想在计算机中交换两个变量的值，通常都需要一个中间变量，来临时存放被交换的值。不过，利用异或的特性，我们就可以避免这个中间变量。具体的代码如下：</p><pre><code>x = (x ^ y);\ny = x ^ y;\nx = x ^ y;\n</code></pre><p>把第一步代入第二步中，可以得到：</p><pre><code>y = (x ^ y) ^ y = x ^ (y ^ y) = x ^ 0 = x\n</code></pre><p>把第一步和第二步的结果代入第三步中，可以得到：</p><!-- [[[read_end]]] --><pre><code>x = (x ^ y) ^ x = (x ^ x) ^ y = 0 ^ y = y \n</code></pre><p>这里用到异或的两个特性，第一个是两个相等的数的异或为0，比如x^x= 0；第二个是任何一个数和0异或之后，还是这个数不变，比如0^y=y。</p><h3>3.集合操作</h3><p>集合和逻辑的概念是紧密相连的，因此集合的操作也可以通过位的逻辑操作来实现。</p><p>假设我们有两个集合{1, 3, 8}和{4, 8}。我们先把这两个集合转为两个8位的二进制数，从右往左以1到8依次来编号。</p><p>如果某个数字在集合中，相应的位置1，否则置0。那么第一个集合就可以转换为10000101，第二个集合可以转换为10001000。那么这两个二进制数的按位与就是10000000，只有第8位是1，代表了两个集合的交为{8}。而这两个二进制数的按位或就是10001101，第8位、第4位、第3位和第1位是1，代表了两个集合的并为{1, 3, 4, 8}。</p><p>说到这里，不禁让我想起Elasticsearch的BitSet。我曾经使用Elasticsearch这个开源的搜索引擎来实现电商平台的搜索。</p><p>当时为了提升查询的效率，我使用了Elasticsearch的Filter查询。我研究了一下这个Filter查询的原理，发现它并没有考虑各种文档的相关性得分，因此它可以把文档匹配关键字的情况，转换成了一个BitSet。</p><p>你可以把BitSet想成一个巨大的位数组。每一位对应了某篇文档是否和给定的关键词匹配，如果匹配，这一位就置1，否则就置0。每个关键词都可以拥有一个BitSet，用于表示哪些文档和这个关键词匹配。那么要查看同时命中多个关键词的文档有哪些，就是对多个BitSet求交集。利用上面介绍的按位与，这点是很容易实现的，而且效率相当之高。</p><h2>二分查找时的两个细节</h2><p><a href=\"https://time.geekbang.org/column/article/72243\">第3节</a>我介绍了迭代法，并讲解了相关的代码实现。其中，有两个细节我在这里补充说明一下。</p><p>第一个是关于<strong>中间值的计算</strong>。我优化了两处代码，分别是Lesson3_2的第16行和Lesson3_3的第22行。</p><p>其中，Lesson3_2的第16行由原来的：</p><pre><code>double middle = (min + max) / 2;\n</code></pre><p>改为：</p><pre><code>double middle = min + (max - min) / 2;\n</code></pre><p>Lesson3_3的第22行由原来的：</p><pre><code>int middle = (left + right) / 2;\n</code></pre><p>改为：</p><pre><code>int middle = left + (right - left) / 2;\n</code></pre><p>这两处改动的初衷都是一样的，是为了避免溢出。在第一篇加餐中，介绍负数的加法时，我已经解释了什么是溢出。那这里为什么会发生溢出呢？我以第二处代码为例来讲解下。</p><p>从理论上来说，(left+right)/2=left+(right-left)/2。可是，我们之前说过，计算机系统有自身的局限性，无论是何种数据类型，都有一个上限或者下限。一旦某个数字超过了这些限定，就会发生溢出。</p><p>对于变量left和right而言，在定义的时候都指定了数据类型，因此不会超出范围。可是，left+right的和就不一定了。从下图可以看出，当left和right都已经很接近某个数据类型的最大值时，两者的和就会超过这个最大值，发生上溢出。这也是为什么最好不用通过(left+right)/2来求两者的中间值。</p><p><img src=\"https://static001.geekbang.org/resource/image/35/cc/35e891800614511659e0cbf11060b5cc.jpg?wh=1142*487\" alt=\"\"></p><p>那么为什么left + (right -left)/2就不会溢出呢？首先，right是没有超过最大值的，那么(right -left)/2自然也就没有超过范围，即使left加上了(right -left)/2，也不会超过right的值，所以运算的整个过程都不会产生溢出。</p><p>第二个是关于误差百分比和绝对误差。在Lesson3_2中有这么一行：</p><pre><code>double delta = Math.abs((square / n) - 1);\n\n</code></pre><p>这里我使用了误差的百分比，也就是误差值占输入值n的比例。其实绝对误差也是可以的，不过我在这里考虑了n的大小。比如，如果n是一个很小的正整数，比如个位数，那么误差可能要精确到0.00001。但是如果n是一个很大的数呢？比如几个亿，那么精确到0.00001可能没有多大必要，也许精确到0.1也就可以了。所以，使用误差的百分比可以避免由于不同的n，导致的迭代次数有过大差异。</p><p>由于这里n是大于1的正整数，所以可以直接拿平方值square去除以n。否则，我们要单独判断n为0的情况，并使用绝对误差。</p><h2>关于迭代法、数学归纳法和递归</h2><p>从第3节到第6节，我连续介绍了迭代法、数学归纳法、递归。这些概念之间存在相互联系，又不完全一样，很多同学对此也有一些疑惑。所以，这里我来帮你梳理一下。</p><p>迭代法和递归都是通过不断反复的步骤，计算数值或进行操作的方法。迭代一般适合正向思维，而递归一般适合逆向思维。而递归回溯的时候，也体现了正向递推的思维。它们本身都是抽象的流程，可以有不同的编程实现。</p><p>对于某些重复性的计算，数学归纳法可以从理论上证明某个结论是否成立。如果成立，它可以大大节约迭代法中数值计算部分的时间。不过，在使用数学归纳法之前，我们需要通过一些数学知识，假设命题，并证明该命题成立。</p><p>对于那些无法使用数学归纳法来证明的迭代问题，我们可以通过编程实现。这里需要注意的是，广义上来说，递归也是迭代法的一种。不过，在计算机编程中，我们所提到的迭代是一种具体的编程实现，是指使用循环来实现的正向递推，而递归是指使用函数的嵌套调用来实现的逆向递推。当然，两种实现通常是可以相互转换的。</p><p>循环的实现很容易理解，对硬件资源的开销比较小。不过，循环更适合“单线剧情”，例如计算2^n，n!，1+2+3+…+n等等。而对于存在很多“分支剧情”的复杂案例而言，使用递归调用更加合适。</p><p>利用函数的嵌套调用，递归编程可以存储很多中间变量。我们可以很轻松地跟踪不同的分支，而所有这些对程序员基本是透明的。如果这时使用循环，我们不得不自己创建并保存很多中间变量。当然，正是由于这个特性，递归比较消耗硬件资源。</p><p>递归编程本身就体现了分治的思想，这个思想还可以延伸到集群的分布式架构中。最近几年比较主流的MapReduce框架也体现了这种思想。</p><p>综合上面说的几点，你可以大致遵循这样的原则：</p><ul>\n<li>\n<p>如果一个问题可以被迭代法解决，而且是有关数值计算的，那你就看看是否可以假设命题，并优先考虑使用数学归纳法来证明；</p>\n</li>\n<li>\n<p>如果需要借助计算机，那么优先考虑是否可以使用循环来实现。如果问题本身过于复杂，再考虑函数的嵌套调用，是否可以通过递归将问题逐级简化；</p>\n</li>\n<li>\n<p>如果数据量过大，可以考虑采用分治思想的分布式系统来处理。</p>\n</li>\n</ul><p>最后，给你留一道思考题吧。</p><p>在1到n的数字中，有且只有唯一的一个数字m重复出现了，其它的数字都只出现一次。请把这个数字找出来。提示：可以充分利用异或的两个特性。</p><p>好了，前面6讲的补充内容就到这里了。<span class=\"orange\">欢迎你留言给我。你也可以点击“请朋友读”，把今天的内容分享给你的好友，和他一起精进。</span></p>","neighbors":{"left":{"article_title":"数学专栏课外加餐（一） | 我们为什么需要反码和补码？","id":74296},"right":{"article_title":"数学专栏课外加餐（三）：程序员需要读哪些数学书？","id":79048}},"comments":[{"had_liked":false,"id":53960,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1545782256,"is_pvip":false,"replies":[{"id":"19595","content":"感谢支持，思考题分析的很透彻，各种情况都考虑到了","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545796717,"ip_address":"","comment_id":53960,"utype":1}],"discussion_count":2,"race_medal":0,"score":"203409245168","product_id":100021201,"comment_content":"我的天，昨天才为老师的加餐点过赞，今天又来一篇干货。谢谢老师，看了这两篇加餐，心里的很多疑惑被解除了。买老师的专栏，值了。<br><br>——<br>思考题：<br><br>需要考虑不同的数量级，分两种情况：<br>1. 内存能容纳这n个数<br><br>方法1：暴力查找，两层循环遍历，时间复杂度为O(n^2)，空间复杂度为O(1)<br><br>方法2：用快排先进行排序，然后遍历一次，比较前一个数和后一个数，若相等，则查找完成，时间复杂度O(nlogn)，空间复杂度为O(1)<br><br>方法3：利用hash表(或set)，进行一次遍历，同时将遍历到的数放入hash表，放入之前判断hash表是否存在，若存在，则找到了重复的数，时间复杂度为O(n)，空间复杂度为O(n)<br><br>方法4：使用位向量，遍历给到的n个数，对于出现的数，将对应位标记为1，如果已经是1则查找成功，时间复杂度为O(n)，空间复杂度为(n)，这种方法类似方法3，虽然渐进的空间复杂度和方法3相同，但是其实小很多很多，毕竟只要用1bit就能表示有或无<br><br><br>2.  内存无法容纳给到的n个数<br><br>依然可以用上述方法4来解决，其它的方法有的不能用，有的效率不高。","like_count":47,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434303,"discussion_content":"感谢支持，思考题分析的很透彻，各种情况都考虑到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545796717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1926508,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","nickname":"Geek_bb2310","note":"","ucode":"022885B257DEB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270727,"discussion_content":"注意头发啊，老兄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590042758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54055,"user_name":"科哥","can_delete":false,"product_type":"c1","uid":1035538,"ip_address":"","ucode":"279368C3F6A6C7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/12/deb6fa64.jpg","comment_is_top":false,"comment_ctime":1545789981,"is_pvip":false,"replies":[{"id":"19582","content":"很好的思路👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545795680,"ip_address":"","comment_id":54055,"utype":1}],"discussion_count":1,"race_medal":0,"score":"121804874269","product_id":100021201,"comment_content":"根据异或的两个特点，任何两个相同的数异或的结果都为0，任何数与0异或都为这个数，因此将所有的数依次异或得到的结果就是除了两个重复数的所有数的异或结果，假设为T。而将1到n依次异或的结果为T^重复数。因此，重复数=T^T^重复数。即:所有数异或的结果再异或1到n所有数异或的结果","like_count":28,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434341,"discussion_content":"很好的思路👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545795680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55409,"user_name":"胡鹏","can_delete":false,"product_type":"c1","uid":1326455,"ip_address":"","ucode":"52644EC57FA4DB","user_header":"https://static001.geekbang.org/account/avatar/00/14/3d/77/45e5e06d.jpg","comment_is_top":false,"comment_ctime":1546164013,"is_pvip":false,"replies":[{"id":"20058","content":"是的 👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546203692,"ip_address":"","comment_id":55409,"utype":1}],"discussion_count":3,"race_medal":0,"score":"117510281005","product_id":100021201,"comment_content":"看到 Brian Wang 的回答, 您说了正解, 我才想明白:<br>  推到应该是: <br>  原始数据: 1,2...m,m,...n (是否有序对此题不重要)<br>  所有数字: 1,2,...m,...n<br>因为 x^x = 0<br>令a = 1^2...^m...^n<br>   b = 1^2...^m^m...^n<br>则有: a^b = (1^2...^m...^n)^(1^2...^m...^n)^m = 0^m = m<br>","like_count":27,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434764,"discussion_content":"是的 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546203692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1915334,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/39/c6/1e12f271.jpg","nickname":"凹凸鸿","note":"","ucode":"A458BAEBF314B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330916,"discussion_content":"能看下代码吗，没搞懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606730329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186482,"discussion_content":"最佳回答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582684777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54696,"user_name":"李嘉鹏","can_delete":false,"product_type":"c1","uid":1022999,"ip_address":"","ucode":"730E44B3535DF9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/17/6ffd80f6.jpg","comment_is_top":false,"comment_ctime":1545954654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40200660318","product_id":100021201,"comment_content":"看了大家留言，1－n必须是连续以1递增才有简化解的吧。从原题并未审出这一点。","like_count":9},{"had_liked":false,"id":53984,"user_name":"Bryan","can_delete":false,"product_type":"c1","uid":1037208,"ip_address":"","ucode":"BA9D6A278609F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/98/60d13550.jpg","comment_is_top":false,"comment_ctime":1545784212,"is_pvip":true,"replies":[{"id":"19593","content":"正解","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545796210,"ip_address":"","comment_id":53984,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40200489876","product_id":100021201,"comment_content":"思考题：对于有的全部数字进行异或再和 1-n 这 n 个数字进行异或，最终得出的结果就是 m","like_count":9,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434312,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545796210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54194,"user_name":"mickey","can_delete":false,"product_type":"c1","uid":1051663,"ip_address":"","ucode":"8B490C2DDE4010","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/0f/93d1c8eb.jpg","comment_is_top":false,"comment_ctime":1545802750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31610573822","product_id":100021201,"comment_content":"&#47;**<br> 在1到n的数字中，有且只有唯一的一个数字m重复出现了，其它的数字都只出现一次。 <br>请把这个数字找出来。 <br>提示：可以充分利用异或的两个特性。<br>  *&#47;<br>public class LessonE02_2 {<br>\tpublic static void main(String[] args) {\t\t<br>\t\tint[] arr = { 6, 3, 9, 5, 4, 8, 2, 5, 7, 1 };<br><br>\t\tint temp = arr[0];<br>\t\tint max = 0;<br>\t\tfor (int i = 1; i &lt; arr.length; i++) {<br>\t\t\ttemp ^= arr[i];<br>\t\t\tmax = max &lt; arr[i] ? arr[i] : max;<br>\t\t}<br>\t\tint t = 1;<br>\t\tfor (int i = 2; i &lt;= max; i++) {<br>\t\t\tt ^= i;<br>\t\t}<br>\t\tSystem.out.println(t ^ temp);<br>\t}<br>}<br><br>题目不够严谨，m 重复偶数次才能用位运算吧。","like_count":7},{"had_liked":false,"id":54267,"user_name":"樊少皇","can_delete":false,"product_type":"c1","uid":1243453,"ip_address":"","ucode":"17D7928D8FFFDB","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/3d/3e20a86a.jpg","comment_is_top":false,"comment_ctime":1545818469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27315622245","product_id":100021201,"comment_content":"思考题：<br>public static int getSpecialNum(int[] oArr, int n){<br>\t\tint result = 0;<br>\t\tfor(int i = 0; i &lt; oArr.length; i++){<br>\t\t\tresult = (result^oArr[i]);<br>\t\t}<br>\t\tfor(int j = 1; j &lt;= n; j++){<br>\t\t\tresult = result^j;<br>\t\t}<br>\t\treturn result;<br>\t}<br><br>最开始不太理解。后来明白题意应该是说总共有n+1或者更多个数字，这些数字都在1--n内，并且除数字m外，其余的数字有且只有一个。举例：{1,2,3,4,5,5,6,7}满足条件；{1,2,3,5,5,5,6,7}不满足条件。","like_count":6},{"had_liked":false,"id":54036,"user_name":"指间砂的宿命","can_delete":false,"product_type":"c1","uid":1338245,"ip_address":"","ucode":"DFAE22BF3BD415","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/85/be43d09f.jpg","comment_is_top":false,"comment_ctime":1545788107,"is_pvip":false,"replies":[{"id":"19588","content":"嗯 异或的妙用","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545796116,"ip_address":"","comment_id":54036,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23020624587","product_id":100021201,"comment_content":"将所有结果异或再和1到n的不重复结果异或，最后剩余的值就是重复值，真的好神奇，这种异或用法","like_count":5,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434335,"discussion_content":"嗯 异或的妙用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545796116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57847,"user_name":"蜉蝣","can_delete":false,"product_type":"c1","uid":1229070,"ip_address":"","ucode":"77CF92496855D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/0e/2b987d54.jpg","comment_is_top":false,"comment_ctime":1546926599,"is_pvip":false,"replies":[{"id":"21435","content":"正确","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547403074,"ip_address":"","comment_id":57847,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14431828487","product_id":100021201,"comment_content":"如果给出的数字不连续，Python中不妨这样使用：<br>```python<br>from itertools import chain<br><br>nums_list = [1, 2, 10, 8, 2, 3]<br>nums_set = set(nums_list)<br><br>start = 0  # 任何数与 0 异或得到自己，所以作为初始值使用<br>for num in chain(nums_list, nums_set):<br>    start = start ^ num<br>    <br>print(start)<br>```","like_count":3,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435787,"discussion_content":"正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547403074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2035530,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/0f/4a/b74386b2.jpg","nickname":"木叶","note":"","ucode":"D4330399444F72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286436,"discussion_content":"这种解法是有问题，  比如 你试试  [1,2,3,4,3]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593175781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1229070,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c1/0e/2b987d54.jpg","nickname":"蜉蝣","note":"","ucode":"77CF92496855D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2035530,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/0f/4a/b74386b2.jpg","nickname":"木叶","note":"","ucode":"D4330399444F72","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286509,"discussion_content":"这种评论是有问题的，比如 你看看我说的前提","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593190018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":286436,"ip_address":""},"score":286509,"extra":""}]}]},{"had_liked":false,"id":54107,"user_name":"张雷","can_delete":false,"product_type":"c1","uid":1162661,"ip_address":"","ucode":"8A1E5C92B18712","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/a5/4b0cefed.jpg","comment_is_top":false,"comment_ctime":1545794558,"is_pvip":false,"replies":[{"id":"19579","content":"因为此时新的x值还是x^y，而新y已经是原来的x，两种异或，就是y了","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545795635,"ip_address":"","comment_id":54107,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14430696446","product_id":100021201,"comment_content":"请教老师，用异或交换两个变量值感觉不太懂：<br>第一步代入第二步时，y已经=x了，<br>再把第二步代入第三步，此时y的值已经是x，怎么还能利用它把原y值传给x呢？<br>感觉还是要临时变量做过渡啊？","like_count":3,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434359,"discussion_content":"因为此时新的x值还是x^y，而新y已经是原来的x，两种异或，就是y了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545795635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54042,"user_name":"夏飞","can_delete":false,"product_type":"c1","uid":1346023,"ip_address":"","ucode":"445B4ADF13E1E1","user_header":"https://static001.geekbang.org/account/avatar/00/14/89/e7/015d82b1.jpg","comment_is_top":false,"comment_ctime":1545788711,"is_pvip":false,"replies":[{"id":"19587","content":"10000101最高位（第8位）的1表示集合中的8，第3位的1表示集合中的3，最低位的1表示集合中的1，以此类推。然后两个集合的交集就专为两个二进制数的按位与","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545796083,"ip_address":"","comment_id":54042,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14430690599","product_id":100021201,"comment_content":"假设我们有两个集合{1, 3, 8}和{4, 8}。我们先把这两个集合转为两个 8 位的二进制数，从右往左以 1 到 8 依次来编号。<br><br>如果某个数字在集合中，相应的位置 1，否则置 0。那么第一个集合就可以转换为 10000101，第二个集合可以转换为 10001000。<br><br><br>怎么转的？没看懂","like_count":3,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434338,"discussion_content":"10000101最高位（第8位）的1表示集合中的8，第3位的1表示集合中的3，最低位的1表示集合中的1，以此类推。然后两个集合的交集就专为两个二进制数的按位与","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545796083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54030,"user_name":"风轨","can_delete":false,"product_type":"c1","uid":1185844,"ip_address":"","ucode":"7B8A5233B61EB0","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/34/c082419c.jpg","comment_is_top":false,"comment_ctime":1545787732,"is_pvip":false,"replies":[{"id":"19591","content":"很好的总结！","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545796167,"ip_address":"","comment_id":54030,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10135722324","product_id":100021201,"comment_content":"不等关系是“最没用”的关系，没有传递性，更没有序性。<br>如果没有额外空间，直接暴力比较，时间复杂度O(n平方); 如果这n个数字本身是有序的，需要时间复杂度O(n)，排序时间复杂度O(nlog(n))。<br>如果额外空间充足，在数据聚集度较高甚至连续时，可以使用桶，时间复杂度O(n);如果数据很分散，数据范围远远大于数据量，可以考虑用桶加hash，时间复杂度O(n)，但需要考虑hash碰撞问题。","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434332,"discussion_content":"很好的总结！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545796167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108043,"user_name":"I keep my ideals💤","can_delete":false,"product_type":"c1","uid":1483413,"ip_address":"","ucode":"38E68A0BCABA01","user_header":"https://static001.geekbang.org/account/avatar/00/16/a2/95/8f34237c.jpg","comment_is_top":false,"comment_ctime":1561652310,"is_pvip":true,"replies":[{"id":"39275","content":"原题可能没有说清楚，非重复的数字只异或一次，所以为0，而重复的数字会异或两次，成为最后的结果。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1561767075,"ip_address":"","comment_id":108043,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5856619606","product_id":100021201,"comment_content":"不太明白，1到n不就是所有数吗，所有数异或所有数不就是0了吗😔😔😔","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455802,"discussion_content":"原题可能没有说清楚，非重复的数字只异或一次，所以为0，而重复的数字会异或两次，成为最后的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561767075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56810,"user_name":"bnhjk76","can_delete":false,"product_type":"c1","uid":1275675,"ip_address":"","ucode":"2CB808E2FC5ED8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/mfS8oicmVTKoHkQnveMdIibF9oENB7DNRhE70eTXjkIh4iaANwvBr7X6sbQicyFOFerUr3Ur93R7JAtBnQP1ia0R6iaw/132","comment_is_top":false,"comment_ctime":1546563230,"is_pvip":false,"replies":[{"id":"20585","content":"可以把大的数切分为不同的组，例如第一个32位二进制表示前32个元素，第二个二进制表示第33到第64的元素","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546648929,"ip_address":"","comment_id":56810,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841530526","product_id":100021201,"comment_content":"集合｛1，3，8｝最大的数是8所以用8位数？那如果最大的数是999999999...那这个2进制的位数会很大，这个时候也用这个方法进行运算吗？","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435247,"discussion_content":"可以把大的数切分为不同的组，例如第一个32位二进制表示前32个元素，第二个二进制表示第33到第64的元素","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546648929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54662,"user_name":"梦开始的地方","can_delete":false,"product_type":"c1","uid":1336914,"ip_address":"","ucode":"29E7B5B4E0F655","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/52/052b84c6.jpg","comment_is_top":false,"comment_ctime":1545926224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840893520","product_id":100021201,"comment_content":"对于有的全部数字进行异或再和 1-n 这 n 个数字进行异或，最终得出的结果就是 m<br>老师，我对于两全部数字异或，在和1-n异或，就能得出m不太懂","like_count":1},{"had_liked":false,"id":54018,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1545786966,"is_pvip":false,"replies":[{"id":"19592","content":"正解","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545796190,"ip_address":"","comment_id":54018,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5840754262","product_id":100021201,"comment_content":"集合中的数字和1到n的数字组成的2n+1个数，只有m出现了3次，其他的数是2次，全部亦或一遍之后就剩下了m","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434327,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545796190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1168452,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","nickname":"Eleven","note":"","ucode":"FB4A0C8CA732BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49009,"discussion_content":"不是很明白这个解题的思路，可以详细的解释一边吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573547042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53982,"user_name":"Bryan","can_delete":false,"product_type":"c1","uid":1037208,"ip_address":"","ucode":"BA9D6A278609F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/98/60d13550.jpg","comment_is_top":false,"comment_ctime":1545784129,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5840751425","product_id":100021201,"comment_content":"思考题：把所有的数字进行异或，结果就是要的答案","like_count":1},{"had_liked":false,"id":358106,"user_name":"013923","can_delete":false,"product_type":"c1","uid":3035193,"ip_address":"上海","ucode":"1214DAADBCA848","user_header":"","comment_is_top":false,"comment_ctime":1663913230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663913230","product_id":100021201,"comment_content":"位操作应用实例学习！","like_count":0},{"had_liked":false,"id":277377,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1612398932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612398932","product_id":100021201,"comment_content":"思考题：如果这个数字m是连续重复的，即重复的数字都是相邻的，那么依次把每个数字都和其相邻的数字做异或操作，如果结果是0，那么这个数字必然是重复的。但如果重复的数字是分散在序列中的，这个方法就不适用了。分散的情况，我的思路是再用一个辅助的数组，其下标范围就是1到n，全部初始为0，然后依次对这n个数字，和辅助数组中对应其下标的元素做异或，如果没有重复，则每次操作的结果都不是0，如果某次操作后结果是0，那么这次操作的那个数字就是重复的","like_count":0},{"had_liked":false,"id":264981,"user_name":"凹凸鸿","can_delete":false,"product_type":"c1","uid":1915334,"ip_address":"","ucode":"A458BAEBF314B2","user_header":"https://static001.geekbang.org/account/avatar/00/1d/39/c6/1e12f271.jpg","comment_is_top":false,"comment_ctime":1606727384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606727384","product_id":100021201,"comment_content":"int[] dictionary = {1, 2, 3, 4, 4, 6, 7, 8};<br>        int len = dictionary.length;<br>        for(int i = 0;i &lt; len; i ++){<br>            if(i&gt;0){<br>                if( (dictionary[i] ^ dictionary[i-1]) == 0 ){<br>                    System.out.println(dictionary[i]);<br>                }<br>            }<br>        }","like_count":0},{"had_liked":false,"id":229883,"user_name":"木叶","can_delete":false,"product_type":"c1","uid":2035530,"ip_address":"","ucode":"D4330399444F72","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0f/4a/b74386b2.jpg","comment_is_top":false,"comment_ctime":1593175701,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593175701","product_id":100021201,"comment_content":"def get_repetition(_list):<br>    _val= 0<br>    for _index, i in enumerate(_list):<br>        _val = _val ^ i ^ _index<br>    return _val<br><br>aa =[ 1,2,3,4,5,6,8,7,1,9]<br>print get_repetition(aa)","like_count":0},{"had_liked":false,"id":150489,"user_name":"Eleven","can_delete":false,"product_type":"c1","uid":1168452,"ip_address":"","ucode":"FB4A0C8CA732BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","comment_is_top":false,"comment_ctime":1573544614,"is_pvip":false,"replies":[{"id":"57947","content":"因为只要看最后一位，所以&amp;1是获取最后一位，然后根据这位来判断奇偶，由于二进制，所以0表示偶数，1表示奇数","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1573584685,"ip_address":"","comment_id":150489,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1573544614","product_id":100021201,"comment_content":"老师，判断奇偶数这步操作不是看的很懂，思路不是按位与之后取最后一位么if((i &amp; 1) == 0)，这个操作不对吧？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474173,"discussion_content":"因为只要看最后一位，所以&amp;amp;1是获取最后一位，然后根据这位来判断奇偶，由于二进制，所以0表示偶数，1表示奇数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573584685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1168452,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","nickname":"Eleven","note":"","ucode":"FB4A0C8CA732BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49458,"discussion_content":"我的意思是，假设是3和1按位与，那不应该是000…11&amp;000…01么？这个结果怎么会是0或者1呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573603080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1474214,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","nickname":"骑行的掌柜J","note":"","ucode":"3163102651C653","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1168452,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","nickname":"Eleven","note":"","ucode":"FB4A0C8CA732BE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266613,"discussion_content":"我知道 其实是把 3 和1 按位与运算后得到的二进制数是 0000 0001 ，再把它转换成 十进制数，这个结果就是 1 ；\n然后你会发现 所有的奇数的二进制最后一位都是1，而偶数的二进制最后一位都是 0。所以用来判断奇偶数比较的数字就只有 0 或者 1 。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589541208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":49458,"ip_address":""},"score":266613,"extra":""}]}]},{"had_liked":false,"id":125735,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1566251733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566251733","product_id":100021201,"comment_content":"异或交换律和结合律成立","like_count":0},{"had_liked":false,"id":125734,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1566251565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566251565","product_id":100021201,"comment_content":"思考题<br>取n位二进制数，初始为0,和每个数对应位为1的二进制数异或，最后的结果有一位为0,其他位为1,取出补码对应的二进制数就是对应的位数。","like_count":0},{"had_liked":false,"id":116354,"user_name":"胡子","can_delete":false,"product_type":"c1","uid":1585854,"ip_address":"","ucode":"5B0D0714CA68EF","user_header":"https://static001.geekbang.org/account/avatar/00/18/32/be/cf4fada0.jpg","comment_is_top":false,"comment_ctime":1563843613,"is_pvip":false,"replies":[{"id":"42663","content":"确实需要附加条件，比如left必须大于等于0","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1563899827,"ip_address":"","comment_id":116354,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563843613","product_id":100021201,"comment_content":"如果right是最大的正数，left是最小的负数right-left不是会溢出吗？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459501,"discussion_content":"确实需要附加条件，比如left必须大于等于0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563899827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111812,"user_name":"John","can_delete":false,"product_type":"c1","uid":1020861,"ip_address":"","ucode":"E4ADF8488953FB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/bd/f3977ebb.jpg","comment_is_top":false,"comment_ctime":1562615758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562615758","product_id":100021201,"comment_content":"原來題目最開始給出的1...n是一個連續的正整數的數組 誤以為是散數的想法就容易誤解了 這樣兩次異或的結果是O(n)呀","like_count":0},{"had_liked":false,"id":110597,"user_name":"松霄笑","can_delete":false,"product_type":"c1","uid":1543898,"ip_address":"","ucode":"F38DBC7F014EE3","user_header":"https://static001.geekbang.org/account/avatar/00/17/8e/da/57000bab.jpg","comment_is_top":false,"comment_ctime":1562298662,"is_pvip":false,"replies":[{"id":"40330","content":"你是指每个集合包含了字符串中的字母还是其他的意思？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1562404738,"ip_address":"","comment_id":110597,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562298662","product_id":100021201,"comment_content":"针对字符串集合，是怎么采用二进制实现交集、并集的","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456958,"discussion_content":"你是指每个集合包含了字符串中的字母还是其他的意思？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562404738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102553,"user_name":"阿信","can_delete":false,"product_type":"c1","uid":1399663,"ip_address":"","ucode":"CC7B15CE63264B","user_header":"https://static001.geekbang.org/account/avatar/00/15/5b/6f/113e24e6.jpg","comment_is_top":false,"comment_ctime":1560250475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560250475","product_id":100021201,"comment_content":"另外一种思路<br>1. 思考题 求重复数<br>重复数 = 所有数字求和 - 1到N的和<br><br>2. 不借助中间变量，进行数字交换，加法、乘法也可以实现类似效果<br>如 int a, b;<br>a = a + b;<br>b = a - b;<br>a = a - b;<br>需要考虑溢出","like_count":0},{"had_liked":false,"id":94760,"user_name":"xinnong","can_delete":false,"product_type":"c1","uid":1005415,"ip_address":"","ucode":"3C1F1EB93FBA5B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/67/01d1580f.jpg","comment_is_top":false,"comment_ctime":1557890093,"is_pvip":false,"replies":[{"id":"33961","content":"应该是重复只出现一次","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1557938458,"ip_address":"","comment_id":94760,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557890093","product_id":100021201,"comment_content":"对于有的全部数字进行异或再和 1-n 这 n 个数字进行异或，最终得出的结果就是 m<br><br>--这个数字只重复出现一次么？是的话，这个思路没问题","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450196,"discussion_content":"应该是重复只出现一次","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557938458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94759,"user_name":"xinnong","can_delete":false,"product_type":"c1","uid":1005415,"ip_address":"","ucode":"3C1F1EB93FBA5B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/67/01d1580f.jpg","comment_is_top":false,"comment_ctime":1557890006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557890006","product_id":100021201,"comment_content":"--这个数可以重复出现多次吧？<br>根据异或的两个特点，任何两个相同的数异或的结果都为0，任何数与0异或都为这个数，因此将所有的数依次异或得到的结果就是除了两个重复数的所有数的异或结果，假设为T。而将1到n依次异或的结果为T^重复数。因此，重复数=T^T^重复数。即:所有数异或的结果再异或1到n所有数异或的结果<br><br>22<br>2018-12-26<br>作者回复: 很好的思路👍","like_count":0},{"had_liked":false,"id":82786,"user_name":"Jing","can_delete":false,"product_type":"c1","uid":1474491,"ip_address":"","ucode":"690067C1ACA141","user_header":"https://static001.geekbang.org/account/avatar/00/16/7f/bb/794dd610.jpg","comment_is_top":false,"comment_ctime":1554305647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554305647","product_id":100021201,"comment_content":"&#47;&#47;写完之后发现评论里brain wan的思路很好<br>public static void FindRepeateNum()<br>{<br>int[] array = { 1, 2, 3, 4, 5, 7, 8, 8, 8, 9, 10 };<br>int repeatenum = 0;<br>for (int i = 0; i &lt; array.Length - 1; i++)<br>{<br>int curNum = array[i];<br>int nextNum = array[i + 1];<br>if ((curNum ^ nextNum) == 0)<br>{<br>repeatenum = curNum;<br>break;<br>}<br>else<br>{<br>curNum = curNum ^ nextNum;<br>nextNum = curNum ^ nextNum;<br>curNum = curNum ^ nextNum;<br>}<br>}<br>Console.WriteLine(&quot;Repeate Num is &quot; + repeatenum);<br>}","like_count":0},{"had_liked":false,"id":82716,"user_name":"Eleven","can_delete":false,"product_type":"c1","uid":1168452,"ip_address":"","ucode":"FB4A0C8CA732BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/44/0ec958f4.jpg","comment_is_top":false,"comment_ctime":1554283617,"is_pvip":false,"replies":[{"id":"29912","content":"这里的主要思想是，自己和自己异或就是0，我们可以充分利用这一点。<br>例如(a^b)^a = (a^a)^b = 0^b = b<br>(a^b)^b = a^(b^b) = a^0 = a","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1554311697,"ip_address":"","comment_id":82716,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554283617","product_id":100021201,"comment_content":"老师，关于交换数字使用异或我没理解要表达的意思，可以解释下吗？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445697,"discussion_content":"这里的主要思想是，自己和自己异或就是0，我们可以充分利用这一点。\n例如(a^b)^a = (a^a)^b = 0^b = b\n(a^b)^b = a^(b^b) = a^0 = a","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554311697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70893,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1551224150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551224150","product_id":100021201,"comment_content":"异或者两个特性很神奇","like_count":0},{"had_liked":false,"id":70358,"user_name":"OP_未央","can_delete":false,"product_type":"c1","uid":1036902,"ip_address":"","ucode":"571C9E0C4E84CD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/66/811970de.jpg","comment_is_top":false,"comment_ctime":1551084492,"is_pvip":true,"replies":[{"id":"25139","content":"这也是一个方法，不过可能会溢出。而异或的方法不会。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1551116255,"ip_address":"","comment_id":70358,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551084492","product_id":100021201,"comment_content":"思考题：如果1~n数字不缺失，假设重复一次，那么，直接利用等差公式求出总和M，再o(n)时间复杂度求出1~n<br>总和N，N-M不就是重复的数字嘛？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440583,"discussion_content":"这也是一个方法，不过可能会溢出。而异或的方法不会。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551116255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69098,"user_name":"谭大码畜。","can_delete":false,"product_type":"c1","uid":1183493,"ip_address":"","ucode":"DE6952C8AF9F68","user_header":"https://static001.geekbang.org/account/avatar/00/12/0f/05/63c09d4a.jpg","comment_is_top":false,"comment_ctime":1550661225,"is_pvip":false,"replies":[{"id":"24571","content":"对的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1550682982,"ip_address":"","comment_id":69098,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550661225","product_id":100021201,"comment_content":"思考题 ：<br><br>public static void findRepeatedNumber2(int[] nums) {<br>    &#47;&#47; TODO 排序，将 nums 中的最大数放入最右边。<br>    &#47;&#47; 以 nums 中的最大值 - 1 作为数组长度。<br>    int[] map = new int[nums[nums.length - 1]];<br>    &#47;&#47; nums 中所有数(包含重复数)异或的结果。<br>    int res = 0;<br>    for (int i = 0; i &lt; nums.length; i ++) {<br>      int index = nums[i] &amp; (nums[nums.length - 1] - 1);<br>      &#47;&#47; 这里其实可以判断是否为重复数，然后直接返回了。<br>      map[index] = nums[i];<br>      &#47;&#47; 任何数与 0 进行异或，这个数都不变。<br>      res = res ^ nums[i]; <br>    }<br>    <br>    &#47;&#47; nums 中出现过的数字的异或结果。<br>    int res2 = 0;<br>    for (int i = 0; i &lt; map.length; i ++) {<br>      res2 = res2 ^ map[i];<br>    }<br>    <br>    &#47;&#47; (n ^ n) ^ m = 0 ^ m = m<br>    System.out.printf(&quot;result = %d%n&quot;, res ^ res2);<br>    <br>  }<br><br>----<br><br>写完之后才想起来，如果传入的数组中不存在重复的数，那这段代码就歇菜了。&#47;捂脸<br>不过大致用异或的思路我觉得大概是这样的 : <br>1. 找出数组出现过的数字，并对这些数字进行异或，得到结果 A。<br>2. 将数组中的所有元素进行异或，得到结果 B。&#47;&#47; 也可以看做是 A ^ m<br>3. A ^ B = A ^ A ^ m = 0 ^ m = m<br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439949,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550682982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66925,"user_name":"Sam.张朝","can_delete":false,"product_type":"c1","uid":1132448,"ip_address":"","ucode":"FB20554D94B250","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/a0/f12115b7.jpg","comment_is_top":false,"comment_ctime":1550042984,"is_pvip":true,"replies":[{"id":"23761","content":"确实需要连续，如果不连续，时间复杂度更高，异或就不是很必要了","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1550083659,"ip_address":"","comment_id":66925,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550042984","product_id":100021201,"comment_content":"1到n，数字不连续，T^(1到n异或的结果) 这样应该不可以吧？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438978,"discussion_content":"确实需要连续，如果不连续，时间复杂度更高，异或就不是很必要了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550083659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66245,"user_name":"呆","can_delete":false,"product_type":"c1","uid":1349615,"ip_address":"","ucode":"03B822CE8CF101","user_header":"https://static001.geekbang.org/account/avatar/00/14/97/ef/43b99680.jpg","comment_is_top":false,"comment_ctime":1549896539,"is_pvip":false,"replies":[{"id":"23457","content":"如果是连续数据是可以的，不连续数据就需要其他方法。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1549906012,"ip_address":"","comment_id":66245,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549896539","product_id":100021201,"comment_content":"这个直接所有数字求和 然后减去(1+n)n&#47;2不就得了","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438760,"discussion_content":"如果是连续数据是可以的，不连续数据就需要其他方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549906012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65657,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1549544528,"is_pvip":false,"replies":[{"id":"23236","content":"你说的方法是可以的，不过更简单的是直接将这n个数字异或，而且1-n也不必连续。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1549557724,"ip_address":"","comment_id":65657,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549544528","product_id":100021201,"comment_content":"<br>思考题：<br>在 1 到 n 的数字中，有且只有唯一的一个数字 m 重复出现了，其它的数字都只出现了一次。请把这个数字找出来。提示：可以充分利用异或的两个特性。<br><br>题意：1 到 n 的数字，从 1 开始，依次递增直到 n，其中 m 重复出现。<br>arr_a = [1, 2, 3, ..., m, m, m, ..., n-1, n]  # 原数组, 与顺序无关<br>arr_b = [1, 2, 3, ..., m, ..., n-1, n]  # 1 到 n 数字不重复的数组，与顺序无关<br><br>依次遍历 arr_a 中每个数字，异或，结果记为 res1<br>依次遍历 arr_b 中每个数字，异或，结果记为 res2<br>则 m = res1 ^ res2","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438538,"discussion_content":"你说的方法是可以的，不过更简单的是直接将这n个数字异或，而且1-n也不必连续。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549557724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62258,"user_name":"老姚","can_delete":false,"product_type":"c1","uid":1150339,"ip_address":"","ucode":"51A9ABBA1FFFE9","user_header":"https://static001.geekbang.org/account/avatar/00/11/8d/83/8b6972c0.jpg","comment_is_top":false,"comment_ctime":1547997017,"is_pvip":false,"replies":[{"id":"22014","content":"异或是哪里没有明白？另外这个代码是针对本节的思考题的吗？逻辑没有看得太明白","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1548008023,"ip_address":"","comment_id":62258,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547997017","product_id":100021201,"comment_content":"异或没想明白。<br>数组下标统计法：<br>bool num[n+5];<br>while(n--）<br>{<br>  cin  t;<br>  if(num[t]) cout &lt;&lt; t ；return 0;<br>else num[t]=1;<br><br>}<br><br><br> 手机打的，见谅","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437150,"discussion_content":"异或是哪里没有明白？另外这个代码是针对本节的思考题的吗？逻辑没有看得太明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548008023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61197,"user_name":"王子瑞Aliloke有事电联","can_delete":false,"product_type":"c1","uid":1249400,"ip_address":"","ucode":"9ABE8E475E336B","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/78/29bd3f1e.jpg","comment_is_top":false,"comment_ctime":1547635642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547635642","product_id":100021201,"comment_content":"异或有点绕啊","like_count":0},{"had_liked":false,"id":58479,"user_name":"西北偏北","can_delete":false,"product_type":"c1","uid":1043160,"ip_address":"","ucode":"64BD69C84EE6A1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erdpKbFgRLnicjsr6qkrPVKZcFrG3aS2V51HhjFP6Mh2CYcjWric9ud1Qiclo8A49ia3eZ1NhibDib0AOCg/132","comment_is_top":false,"comment_ctime":1547088396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547088396","product_id":100021201,"comment_content":"二进制最大溢出的循环性<br>\t有符号数相当于一个x轴。负数在左边，正数在右边。中间是0<br>\t二进制最大的数加1，会变成最小的数。如java int的最大值为：2147483647 加1变成了-2147483648 。继续加1，将相当于从x的最左边向右边移动。<br>\t二进制最小的数减1，会变成最大的树。如java int的最小值为：-2147483648 加1变成了2147483647 。继续减1，将相当于从x的最右边边向左边移动。<br><br>百分比误差：<br>\t估算值跟精确值之间的差值，占精确值的百分比。月小，说明越精确。<br><br>\t这里x为平方根，x的平方x^2为其对应估算值。所以百分比误差计算为：(n-x^2)&#47;n = 1-x^2&#47;n<br>\t由于是绝对值，所以|1-x^2&#47;n| = |x^2&#47;n-1|","like_count":0},{"had_liked":false,"id":58469,"user_name":"阿释小猫","can_delete":false,"product_type":"c1","uid":1152958,"ip_address":"","ucode":"A53E0F0E81BB3B","user_header":"https://static001.geekbang.org/account/avatar/00/11/97/be/e958f25a.jpg","comment_is_top":false,"comment_ctime":1547087399,"is_pvip":false,"replies":[{"id":"21167","content":"因为是集合，随意不能有重复的元素。对于有重复的元素，这种方法就不适用了","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547132571,"ip_address":"","comment_id":58469,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547087399","product_id":100021201,"comment_content":"集合｛1，3，8｝最大的数是8所以用8位数，如果一个集合是{1,3,3,8,8)请 问老师怎样用二进制来编码呢？谢谢","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436076,"discussion_content":"因为是集合，随意不能有重复的元素。对于有重复的元素，这种方法就不适用了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547132571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58255,"user_name":"microsnow","can_delete":false,"product_type":"c1","uid":1121444,"ip_address":"","ucode":"3C24EE8D64E5E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/1c/a4/3a7a0213.jpg","comment_is_top":false,"comment_ctime":1547020901,"is_pvip":false,"replies":[{"id":"21439","content":"我对PHP不熟悉，感觉上你的思路是逐个比较。其实把所有的数字异或一下就可以了，因为自己和自己异或就变为0了，只有一个重复的数字，那么最终的结果就是这个重复的数字。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547405781,"ip_address":"","comment_id":58255,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547020901","product_id":100021201,"comment_content":"&#47;**<br> * 利用异或方法-查找重复的数字<br> * @param  array   $nums 数字列表<br> * @param  integer $n    查找下标<br> * @return integer       找到则返回该数字，未找到则返回-1<br> *&#47;<br>function search_repeat_num($nums = array(), $n = 0)<br>{<br>    for($i = 0; $i &lt; count($nums); $i++) {<br>        if ($n == $i) {<br>            continue;<br>        }<br>        if (($nums[$n] ^ $nums[$i]) == 0) {<br>            return $nums[$n];<br>        }<br>    }<br>    if (count($nums) == ($n+1)) {<br>        return -1;<br>    } else {<br>        return search_repeat_num($nums, $n+1);<br>    }<br>}<br><br>$nums = [1, 2, 8, 3, 4, 5, 6, 1, 9, 19];<br>$result = search_repeat_num($nums);<br>var_dump($result); &#47;&#47; 1","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435973,"discussion_content":"我对PHP不熟悉，感觉上你的思路是逐个比较。其实把所有的数字异或一下就可以了，因为自己和自己异或就变为0了，只有一个重复的数字，那么最终的结果就是这个重复的数字。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547405781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57940,"user_name":"Joe","can_delete":false,"product_type":"c1","uid":1337998,"ip_address":"","ucode":"EC76699640B7BF","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/8e/7b6ea886.jpg","comment_is_top":false,"comment_ctime":1546947167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546947167","product_id":100021201,"comment_content":"C++ 实现检测连续不间断数字中出现重复偶数次<br><br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>class ByteOperation {<br> public:<br>  &#47;**<br>   * Description: 检测连续不间断数字中出现重复偶数次。<br>   * params: nums- 被测数字集合<br>   * return：重复数字。<br>   *&#47;<br>  int findRepeatNum(vector&lt;int&gt; nums) {<br>    int len = nums.size();<br>    int temp = nums[0];<br>    int max = nums[len - 1];<br><br>    &#47;&#47; 将出现偶数次重复数字去除<br>    for (int i = 1; i &lt; len; i++) {<br>      temp ^= nums[i];<br>    }<br><br>    &#47;&#47; 依次与1-max异或，相同的数去除，剩下的为前面去除的重复数字。<br>    for (int i = 1; i &lt;= max; i++) {<br>      temp ^= i;<br>    }<br><br>    return temp;<br>  }<br>};<br><br>int main(void) {<br>  vector&lt;int&gt; nums = {1, 2, 3, 3, 4, 5, 6, 7};<br>  ByteOperation test;<br>  cout &lt;&lt; test.findRepeatNum(nums) &lt;&lt; endl;<br>}","like_count":0},{"had_liked":false,"id":57186,"user_name":"涉蓝","can_delete":false,"product_type":"c1","uid":1134619,"ip_address":"","ucode":"C1321E29E01625","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLh8ubWQtDRa6exJtloSwibLliaejpF7434ficyggzukmXE63UlSPvbykoiaVDZo4CbDIIOQsCkicibyn9A/132","comment_is_top":false,"comment_ctime":1546676321,"is_pvip":false,"replies":[{"id":"20646","content":"可以多看看各种资料，经验和感觉都会得到积累","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546716441,"ip_address":"","comment_id":57186,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546676321","product_id":100021201,"comment_content":"看懂倒是看懂了<br>但是有种自己怎么都想不到那种方案的感觉<br>比如思考题 我看到第一思路还是原来的排序或者遍历 找重复的 想不到异或 看评论中的才有中恍然大悟的感觉 但是就是感觉自己想不到 心塞 这种要怎么办呢？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435450,"discussion_content":"可以多看看各种资料，经验和感觉都会得到积累","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546716441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56683,"user_name":"早睡健康长寿","can_delete":false,"product_type":"c1","uid":1338778,"ip_address":"","ucode":"11BFB7DB9A01C1","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/9a/2d73cd90.jpg","comment_is_top":false,"comment_ctime":1546522572,"is_pvip":false,"replies":[{"id":"20451","content":"1，3，8分别表示二进制数中的第1位、第3位和第8位，其中第1位表示最低位","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546540446,"ip_address":"","comment_id":56683,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546522572","product_id":100021201,"comment_content":"请问集合｛1，3，8｝是怎么转成二进制数的？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435178,"discussion_content":"1，3，8分别表示二进制数中的第1位、第3位和第8位，其中第1位表示最低位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546540446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56474,"user_name":"那又如何。","can_delete":false,"product_type":"c1","uid":1234404,"ip_address":"","ucode":"0966EE518AB2A3","user_header":"https://static001.geekbang.org/account/avatar/00/12/d5/e4/b8eaff27.jpg","comment_is_top":false,"comment_ctime":1546475290,"is_pvip":false,"replies":[{"id":"20455","content":"可以生成多个二进制数，每个二进制数只负责若干个元素，比如elasticsearch会使用一个很大的bit array。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546556188,"ip_address":"","comment_id":56474,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546475290","product_id":100021201,"comment_content":"老师，集合转二进制那个，如果集合中的数字很大，比如1000，2000那样怎么转二进制，怎么对应位数呢","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435057,"discussion_content":"可以生成多个二进制数，每个二进制数只负责若干个元素，比如elasticsearch会使用一个很大的bit array。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546556188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54923,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1545982308,"is_pvip":false,"replies":[{"id":"20070","content":"如果我理解的是对的，环探测是用于检测图里是否有环路。所以问题是如何把重复数字转换为环路？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546213339,"ip_address":"","comment_id":54923,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545982308","product_id":100021201,"comment_content":"查了一下资料，思考应该还有另外一种方法（除了老师提到的异或解法）：环探测，参考：https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Cycle_detection<br><br>老师，不知道可行否？<br><br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434613,"discussion_content":"如果我理解的是对的，环探测是用于检测图里是否有环路。所以问题是如何把重复数字转换为环路？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546213339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54819,"user_name":"小牛人","can_delete":false,"product_type":"c1","uid":1001700,"ip_address":"","ucode":"D5623BC72BF5F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/e4/974c38d0.jpg","comment_is_top":false,"comment_ctime":1545965458,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545965458","product_id":100021201,"comment_content":"假设x^y=z,那么x^z=y，y^z=x也成立。","like_count":0},{"had_liked":false,"id":54619,"user_name":"（+曦+）","can_delete":false,"product_type":"c1","uid":1337784,"ip_address":"","ucode":"8AE1A2F452FC35","user_header":"https://static001.geekbang.org/account/avatar/00/14/69/b8/1218d5b8.jpg","comment_is_top":false,"comment_ctime":1545915461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545915461","product_id":100021201,"comment_content":"从1到n有一个重复以为着长度n+1 <br>便利这个序列一直做异或运算同时也对当前下标做异或 但是不异或n+1 最后省的就是那个直<br>for(i=1:n+1)<br>f=f^a［i］<br>if i&lt;n+1<br>f=f^i<br><br><br>最后f就是重复的<br><br>","like_count":0},{"had_liked":false,"id":54607,"user_name":"鱼鱼鱼培填","can_delete":false,"product_type":"c1","uid":1195489,"ip_address":"","ucode":"5D99ED5A01AB3D","user_header":"https://static001.geekbang.org/account/avatar/00/12/3d/e1/5279ea2f.jpg","comment_is_top":false,"comment_ctime":1545913230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545913230","product_id":100021201,"comment_content":"python3<br>#-*- coding: UTF-8 -*-<br>def getRepeatNum(arr, n):<br>       if (len(arr) - n + 1) &amp; 1 == 1: #出现次数为偶数才能使用异或<br>                return <br>       result = 0<br>       for i in range(len(arr)):<br>               result = result ^ arr[i]<br>       for j in range(1, n + 1):<br>               result = result ^ j<br>       return result<br><br>print(main([1, 2, 3, 4, 4, 5], 5))","like_count":0},{"had_liked":false,"id":54544,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1545896572,"is_pvip":false,"replies":[{"id":"19775","content":"如果知道这些数字的列表 也是可以的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545899017,"ip_address":"","comment_id":54544,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545896572","product_id":100021201,"comment_content":"如果1到n不连续呢，比如1 2 3 5 8 3","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434486,"discussion_content":"如果知道这些数字的列表 也是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545899017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54429,"user_name":"大悲","can_delete":false,"product_type":"c1","uid":1341085,"ip_address":"","ucode":"3A7865964B0159","user_header":"https://static001.geekbang.org/account/avatar/00/14/76/9d/bfcdbdda.jpg","comment_is_top":false,"comment_ctime":1545869893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545869893","product_id":100021201,"comment_content":"思考题，如果数据放在数组中，且可以修改这个数组的话，还有一种时间复杂度为O(n),空间复杂度为O(1)的解法：<br>我们首先指定k应该在第k个位置上，即数组中下标为k-1的位置。从第一个数字开始检查：<br>1. 如果其已经应该在第k个位置上，检查下一个数字；<br>2. 如果其不在应该在位置上，检查应该在的那个第k个位置是否已经有对应的数字了：<br>  （1）如果是，此时检查的数字就是重复的。（因为这个数字不在第k个位置上，但是第k个位置上已经有相同的数字了）<br>    (2) 如果不是，把第k个位置上的数字交换到目前这个位置。这样当前检查的数字放到了应该在的第k位上。重新检查当下这个位置的数字（这个数字是从之前第k个位置交换过来，所以需要重新检查）。","like_count":0},{"had_liked":false,"id":54389,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1545840613,"is_pvip":false,"replies":[{"id":"19742","content":"相互异或具体是指什么？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545865858,"ip_address":"","comment_id":54389,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545840613","product_id":100021201,"comment_content":"因为自己异或自己是0。假设总共n个数，d[0]和后n-1个数，相互异或，并且还要异或对应的下标 i,最后得到的那个数就是出现两次的。因为其他都是异或了两次，它异或了三次","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434443,"discussion_content":"相互异或具体是指什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545865858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54295,"user_name":"seleven","can_delete":false,"product_type":"c1","uid":1338701,"ip_address":"","ucode":"B4D84E6B930448","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/SsJajvXghPMDicSuOcx54mV6L9zv4KSKM2bKY0gsUdAH3oGCWzfRv9Q9HRljic2IvHzYFpRECp8SXGWhiaqGWFTKg/132","comment_is_top":false,"comment_ctime":1545822398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545822398","product_id":100021201,"comment_content":"位运算在加密过程中经常用到，很多经典加密算法都是需要进行移位，变换（包括交换、矩阵变换等）等运算，而且数据量大，所以采用位运算往往能提升很大的效率。","like_count":0},{"had_liked":false,"id":54215,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1239362,"ip_address":"","ucode":"1B5EF54A2A56F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/42/1de79e71.jpg","comment_is_top":false,"comment_ctime":1545808314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545808314","product_id":100021201,"comment_content":"第一感觉对位运算有点懂了!!!","like_count":0},{"had_liked":false,"id":54144,"user_name":"张雷","can_delete":false,"product_type":"c1","uid":1162661,"ip_address":"","ucode":"8A1E5C92B18712","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/a5/4b0cefed.jpg","comment_is_top":false,"comment_ctime":1545797284,"is_pvip":false,"replies":[{"id":"19602","content":"也是可以的，可能要考虑一下溢出的时候是否也成立","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545808898,"ip_address":"","comment_id":54144,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545797284","product_id":100021201,"comment_content":"谢谢老师答疑我关于异或交换两个变量的问题。<br>感觉这个思路好巧妙，先把x变为与x和y都相关的一个中间值，再分别求出新的x和y。<br>受这个思路启发，我想是不是就用加法就能实现不用中间变量交换两个变量值：<br>1. x=(x+y);<br>2. y=x-y;<br>3. x=x-y;<br>这样好像也可以实现。请教老师这样可行吗？<br>（ps：从小学编程就有了思维定势，认为两个变量交换，必须要中间变量做过渡。老师这个思路真是让我又刷新了认知。谢谢！）","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434369,"discussion_content":"也是可以的，可能要考虑一下溢出的时候是否也成立","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545808898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54125,"user_name":"古夜","can_delete":false,"product_type":"c1","uid":1341612,"ip_address":"","ucode":"0A82D3CFCEDF07","user_header":"https://static001.geekbang.org/account/avatar/00/14/78/ac/e5e6e7f3.jpg","comment_is_top":false,"comment_ctime":1545795550,"is_pvip":false,"replies":[{"id":"19608","content":"比如社交网中好友的遍历，使用排列组合暴力破解密码等","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545809684,"ip_address":"","comment_id":54125,"utype":1}],"discussion_count":0,"race_medal":0,"score":"1545795550","product_id":100021201,"comment_content":"关于递归的实际应用老师能举个例子吗","like_count":0},{"had_liked":false,"id":54059,"user_name":"better","can_delete":false,"product_type":"c1","uid":1169063,"ip_address":"","ucode":"AF1DB566EBB8A5","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/a7/ac23f5a6.jpg","comment_is_top":false,"comment_ctime":1545790287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545790287","product_id":100021201,"comment_content":"感谢老师提供的加餐。很👍","like_count":0},{"had_liked":false,"id":53922,"user_name":"石佳佳_Gemtra","can_delete":false,"product_type":"c1","uid":1235210,"ip_address":"","ucode":"C992091D9CC8D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/0a/ce61e397.jpg","comment_is_top":false,"comment_ctime":1545755284,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545755284","product_id":100021201,"comment_content":"思考题：<br>采用冒泡排序的思路，判断条件改为 i^j == 0<br>复杂度更低的算法不太熟练，理论上也可以😳","like_count":0}]}