{"id":549422,"title":"08｜FFmpeg 和它的朋友们是怎么处理 MP4 的？","content":"<p>你好，我是刘歧。</p><p>我们日常看电视剧，录视频时，最常见的就是MP4格式了。你有没有想过，MP4格式为什么使用得这么广泛呢？</p><p>因为MP4标准非常灵活，可扩展性比较好，有很多常见的格式是基于MP4做了一些扩展，然后被应用到比较广的范围，比如CMAF、DASH、HLS。而且MP4的参考标准是一个开放的标准，我们通常以编号为ISO-14496-12来查找标准文档。因为MP4的使用范围比较广，我们在<a href=\"https://time.geekbang.org/column/article/544986\">第3节课</a>的时候，也着重讲了MP4封装容器格式，你可以回顾一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/68/6b/689b8f155c2ed9yy6dbb007fa474586b.png?wh=1920x1083\" alt=\"图片\" title=\"MP4扩展出来的格式\"></p><p>基于MP4的重要地位，我这节课来给你讲一讲，如何用FFmpeg、GPAC等工具生成与解析MP4。</p><p>尽管FFmpeg的目标是自己不去创造标准，但是难免会有一些工具或者用户会根据自己的臆测做一些定制或者修改，导致与我们公认的标准出现一些偏差。为了让MP4的标准性更好地得到验证，我们通常会选择使用多种工具，所以这节课除了给你介绍FFmpeg对MP4的mux与demux（封装与解封装）之外，我还会介绍一些其他的MP4相关的工具，例如MP4Box、Shaka- Packager。</p><p>在我们使用FFmpeg做音视频处理的时候，经常会使用FFmpeg生成MP4文件，或者使用FFmpeg输入MP4文件然后转换成其他格式。这里我们就先来了解一下FFmpeg对MP4都有哪些能力支持。这就需要用到<a href=\"https://time.geekbang.org/column/article/548420\">上节课</a>的知识了，你可以停下来先想一下我们应该怎么在FFmpeg中查找自己想要的帮助信息。</p><!-- [[[read_end]]] --><h3>用FFmpeg生成MP4文件</h3><p>首先，查看MP4的muxer对应的参数，输入ffmpeg -h muxer=mp4，看一下输出的内容。</p><pre><code class=\"language-plain\">Muxer mp4 [MP4 (MPEG-4 Part 14)]:\n    Common extensions: mp4.\n    Mime type: video/mp4.\n    Default video codec: h264.\n    Default audio codec: aac.\nmov/mp4/tgp/psp/tg2/ipod/ismv/f4v muxer AVOptions:\n  -movflags          &lt;flags&gt;      E.......... MOV muxer flags (default 0)\n     rtphint                      E.......... Add RTP hint tracks\n     empty_moov                   E.......... Make the initial moov atom empty\n     frag_keyframe                E.......... Fragment at video keyframes\n     frag_every_frame              E.......... Fragment at every frame\n     separate_moof                E.......... Write separate moof/mdat atoms for each track\n     frag_custom                  E.......... Flush fragments on caller requests\n     isml                         E.......... Create a live smooth streaming feed (for pushing to a publishing point)\n     faststart                    E.......... Run a second pass to put the index (moov atom) at the beginning of the file\n     omit_tfhd_offset              E.......... Omit the base data offset in tfhd atoms\n     disable_chpl                 E.......... Disable Nero chapter atom\n     default_base_moof              E.......... Set the default-base-is-moof flag in tfhd atoms\n     dash                         E.......... Write DASH compatible fragmented MP4\n     cmaf                         E.......... Write CMAF compatible fragmented MP4\n     frag_discont                 E.......... Signal that the next fragment is discontinuous from earlier ones\n     delay_moov                   E.......... Delay writing the initial moov until the first fragment is cut, or until the first fragment flush\n     global_sidx                  E.......... Write a global sidx index at the start of the file\n     skip_sidx                    E.......... Skip writing of sidx atom\n     write_colr                   E.......... Write colr atom even if the color info is unspecified (Experimental, may be renamed or changed, do not use from scripts)\n     prefer_icc                   E.......... If writing colr atom prioritise usage of ICC profile if it exists in stream packet side data\n     write_gama                   E.......... Write deprecated gama atom\n     use_metadata_tags              E.......... Use mdta atom for metadata.\n     skip_trailer                 E.......... Skip writing the mfra/tfra/mfro trailer for fragmented files\n     negative_cts_offsets              E.......... Use negative CTS offsets (reducing the need for edit lists)\n  -moov_size         &lt;int&gt;        E.......... maximum moov size so it can be placed at the begin (from 0 to INT_MAX) (default 0)\n  -rtpflags          &lt;flags&gt;      E.......... RTP muxer flags (default 0)\n     latm                         E.......... Use MP4A-LATM packetization instead of MPEG4-GENERIC for AAC\n     rfc2190                      E.......... Use RFC 2190 packetization instead of RFC 4629 for H.263\n     skip_rtcp                    E.......... Don't send RTCP sender reports\n     h264_mode0                   E.......... Use mode 0 for H.264 in RTP\n     send_bye                     E.......... Send RTCP BYE packets when finishing\n  -skip_iods         &lt;boolean&gt;    E.......... Skip writing iods atom. (default true)\n  -iods_audio_profile &lt;int&gt;        E.......... iods audio profile atom. (from -1 to 255) (default -1)\n  -iods_video_profile &lt;int&gt;        E.......... iods video profile atom. (from -1 to 255) (default -1)\n  -frag_duration     &lt;int&gt;        E.......... Maximum fragment duration (from 0 to INT_MAX) (default 0)\n  -min_frag_duration &lt;int&gt;        E.......... Minimum fragment duration (from 0 to INT_MAX) (default 0)\n  -frag_size         &lt;int&gt;        E.......... Maximum fragment size (from 0 to INT_MAX) (default 0)\n  -ism_lookahead     &lt;int&gt;        E.......... Number of lookahead entries for ISM files (from 0 to 255) (default 0)\n  -video_track_timescale &lt;int&gt;        E.......... set timescale of all video tracks (from 0 to INT_MAX) (default 0)\n  -brand             &lt;string&gt;     E.......... Override major brand\n  -use_editlist      &lt;boolean&gt;    E.......... use edit list (default auto)\n  -fragment_index    &lt;int&gt;        E.......... Fragment number of the next fragment (from 1 to INT_MAX) (default 1)\n  -mov_gamma         &lt;float&gt;      E.......... gamma value for gama atom (from 0 to 10) (default 0)\n  -frag_interleave   &lt;int&gt;        E.......... Interleave samples within fragments (max number of consecutive samples, lower is tighter interleaving, but with more overhead) (from 0 to INT_MAX) (default 0)\n  -encryption_scheme &lt;string&gt;     E.......... Configures the encryption scheme, allowed values are none, cenc-aes-ctr\n  -encryption_key    &lt;binary&gt;     E.......... The media encryption key (hex)\n  -encryption_kid    &lt;binary&gt;     E.......... The media encryption key identifier (hex)\n  -use_stream_ids_as_track_ids &lt;boolean&gt;    E.......... use stream ids as track ids (default false)\n  -write_btrt        &lt;boolean&gt;    E.......... force or disable writing btrt (default auto)\n  -write_tmcd        &lt;boolean&gt;    E.......... force or disable writing tmcd (default auto)\n  -write_prft        &lt;int&gt;        E.......... Write producer reference time box with specified time source (from 0 to 2) (default 0)\n     wallclock       1            E..........\n     pts             2            E..........\n  -empty_hdlr_name   &lt;boolean&gt;    E.......... write zero-length name string in hdlr atoms within mdia and minf atoms (default false)\n  -movie_timescale   &lt;int&gt;        E.......... set movie timescale (from 1 to INT_MAX) (default 1000)\n</code></pre><p>就像开头我说的那样，因为MP4的灵活性比较好，变种形态也比较多，为了方便使用，FFmpeg就增加了很多符合标准但又有可能用不到的参数，我们一会儿抽取一些例子来讲讲。</p><p>在讲例子之前，我们先看一下这个帮助信息里面的内容，帮助信息的头部给出了MP4的文件扩展名.mp4，视频默认用H.264编码，音频默认用AAC编码。</p><p>接下来我们来看一下FFmpeg封装MP4常用的参数有哪些。</p><p><img src=\"https://static001.geekbang.org/resource/image/47/a2/4788f2d19294d9f4b036bf0ed8042aa2.png?wh=2069x2864\" alt=\"图片\"></p><p>从参数的列表中可以看到，MP4的muxer支持的参数比较复杂，例如支持在视频关键帧处切片、支持设置moov容器的最大大小、支持设置encrypt加密等。下面我们用常见的参数来举几个例子。</p><h3>faststart参数</h3><p>正常情况下，FFmpeg生成moov是在mdat写完成之后，但我们可以通过参数faststart把moov容器移动到mdat前面，我们可以参考下面这个例子。</p><pre><code class=\"language-plain\">./ffmpeg -i input.flv -c copy -f mp4 output.mp4\n</code></pre><p>使用mp4info查看output.mp4的容器出现顺序。</p><p><img src=\"https://static001.geekbang.org/resource/image/59/bf/59b0386632994a0d4bba6yy7f7d958bf.png?wh=1728x1250\" alt=\"图片\"></p><p>可以看到图中moov容器是在mdat的下边，如果使用参数faststart，就会在生成上边的结构之后将moov移动到mdat前面。</p><pre><code class=\"language-plain\">./ffmpeg -i input.flv -c copy -f mp4 -movflags faststart output.mp4\n</code></pre><p>然后我们再使用mp4info查看MP4的容器顺序，可以看到moov被移动到了mdat前面。</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/94/c9bcd9d90d3a4b2d41e6472d52a3de94.png?wh=1728x1250\" alt=\"图片\"></p><h3>DASH参数</h3><p>当生成DASH格式的时候，里面有一种特殊的MP4格式，其实我们也可以把它理解成MP4切片，可以通过DASH参数生成。</p><pre><code class=\"language-plain\">./ffmpeg -i input.flv -c copy -f mp4 -movflags dash output.mp4\n</code></pre><p>使用mp4info查看容器格式的信息，稍微有些特殊，我们来看一下图片。<br>\n<img src=\"https://static001.geekbang.org/resource/image/db/ed/db6ef849yya8855082932af6807e50ed.png?wh=1728x1254\" alt=\"图片\"></p><p>从图中可以看到，这个DASH格式的MP4文件存储的容器信息与常规的MP4格式有些差别，以sidx、moof与mdat这三种容器为主。</p><p>有些时候，我们在做MP4切片操作的时候，可能会出现一些问题，例如，editlist的时间戳相关计算变量与实际数据对应的时间戳有偏差，导致视频丢帧或音画略有不同步的现象。这个时候我们可以考虑把use_edilist操作项设置成忽略。</p><p><strong>MP4切片很常用，当我们做HLS/DASH直播、生成点播内容，还有做MP4上传云端实时转码等操作时，MP4切片都是比较常见的操作。</strong></p><p>通过这些例子，相信你已经对MP4生成部分的能力有一些了解了，剩余的能力我们可以课后自己一点点挖掘。接下来我们看一下FFmpeg的MP4文件解析操作。</p><h3>用FFmpeg解析MP4文件</h3><p>首先FFmpeg在解析MP4文件格式的时候，可能会因为MP4的内容生成得不标准产生一些奇奇怪怪的问题，例如前面我们提到的音视频不同步或者视频抖动等问题。FFmpeg针对出现的这类问题也做了格式上的兼容，但用户可能需要自己手动设置一些参数，定制一下，才可以解决这些问题。</p><p>FFmpeg这么做的主要原因是之前大部分用户使用时是正常的，异常素材只有少部分用户才会遇到。为了尽量不改变原有用户的使用习惯，只能通过新用户自己设置参数的形式来避免出现异常情况。我们看一下操作选项。</p><pre><code class=\"language-plain\">Demuxer mov,mp4,m4a,3gp,3g2,mj2 [QuickTime / MOV]:\n    Common extensions: mov,mp4,m4a,3gp,3g2,mj2,psp,m4b,ism,ismv,isma,f4v,avif.\nmov,mp4,m4a,3gp,3g2,mj2 AVOptions:\n  -use_absolute_path &lt;boolean&gt;    .D.V....... allow using absolute path when opening alias, this is a possible security issue (default false)\n  -seek_streams_individually &lt;boolean&gt;    .D.V....... Seek each stream individually to the closest point (default true)\n  -ignore_editlist   &lt;boolean&gt;    .D.V....... Ignore the edit list atom. (default false)\n  -advanced_editlist &lt;boolean&gt;    .D.V....... Modify the AVIndex according to the editlists. Use this option to decode in the order specified by the edits. (default true)\n  -ignore_chapters   &lt;boolean&gt;    .D.V.......  (default false)\n  -use_mfra_for      &lt;int&gt;        .D.V....... use mfra for fragment timestamps (from -1 to 2) (default auto)\n     auto            -1           .D.V....... auto\n     dts             1            .D.V....... dts\n     pts             2            .D.V....... pts\n  -use_tfdt          &lt;boolean&gt;    .D.V....... use tfdt for fragment timestamps (default true)\n  -export_all        &lt;boolean&gt;    .D.V....... Export unrecognized metadata entries (default false)\n  -export_xmp        &lt;boolean&gt;    .D.V....... Export full XMP metadata (default false)\n  -activation_bytes  &lt;binary&gt;     .D......... Secret bytes for Audible AAX files\n  -audible_key       &lt;binary&gt;     .D......... AES-128 Key for Audible AAXC files\n  -audible_iv        &lt;binary&gt;     .D......... AES-128 IV for Audible AAXC files\n  -audible_fixed_key &lt;binary&gt;     .D......... Fixed key used for handling Audible AAX files\n  -decryption_key    &lt;binary&gt;     .D......... The media decryption key (hex)\n  -enable_drefs      &lt;boolean&gt;    .D.V....... Enable external track support. (default false)\n  -max_stts_delta    &lt;int&gt;        .D......... treat offsets above this value as invalid (from 0 to UINT32_MAX) (default 4294487295)\n</code></pre><p>从内容中可以看到，FFmpeg的MP4 demuxer里提供了editlist相关的一些操作，比如ignore_editlist、-use_tfdt等。MP4切片时，可能会遇到切片的时间戳与editlist参考计算出来的时间戳对不上的问题，用户就可以使用-use_tfdt选项，来选择是否使用tfdt里面的时间戳。</p><p>FFmpeg为什么会给MP4的demuxer加这么多兼容性的参数呢？</p><p>因为可以生成和处理MP4文件的工具不止FFmpeg，还有其他的工具，例如GPAC、Shaka-Packager。工具多了，生成出来的MP4文件可能不统一，存在一定的差异，这个差异就可能引起兼容性问题。</p><h2>如何用GPAC生成MP4？</h2><p>其实要说生成MP4更接近参考标准的，就要数GPAC了，可能你之前并没有听说过GPAC，但是GPAC里的MP4Box工具你应该听说过。下面我们先来了解一下MP4Box。和使用FFmpeg类似，我们先看一下help信息。</p><pre><code class=\"language-plain\">MP4Box --help\n</code></pre><p>这是输出的内容。</p><pre><code class=\"language-plain\">MP4Box [option] input [option]\n\n\n\nGeneral Options:\n\n-h (string):                   print help\n\t* general: general options help\n\t* hint: hinting options help\n\t* dash: DASH segmenter help\n\t* import: import options help\n\t* encode: encode options help\n\t* meta: meta handling options help\n\t* extract: extraction options help\n\t* dump: dump options help\n\t* swf: Flash (SWF) options help\n\t* crypt: ISMA E&amp;A options help\n\t* format: supported formats help\n\t* live: BIFS streamer help\n\t* core: libgpac core options\n\t* all: print all the above help screens\n\t* opts: print all options\n\t* VAL: search for option named VAL (without - or --) in MP4Box, libgpac core and all filters\n\n-hx (string):                  look for given string in all possible options\n-nodes:                        list supported MPEG4 nodes\n-node (string):                get given MPEG4 node syntax and QP infolist\n-xnodes:                       list supported X3D nodes\n-xnode (string):               get given X3D node syntax\n-snodes:                       list supported SVG nodes\n-languages:                    list supported ISO 639 languages\n-boxes:                        list all supported ISOBMF boxes and their syntax\n-fstat:                        print filter session statistics (import/export/encrypt/decrypt/dashing)\n-fgraph:                       print filter session graph (import/export/encrypt/decrypt/dashing)\n-v:                            verbose mode\n-version:                      get build version\n---  INPUT:                    escape option if INPUT starts with - character\n</code></pre><p>帮助信息里有更详细的参数帮助信息，使用-h加对应的参数就可以得到，例如MP4Box -h dash，就可以查看dash切片帮助信息了。</p><p>我们使用 MP4Box查看一下MP4文件信息。</p><pre><code class=\"language-plain\"># MP4Box -info ~/Movies/Test/ToS-4k-1920.mov\n\n* Movie Info *\n\tTimescale 1000 - 2 tracks\n\tComputed Duration 00:12:14.167 - Indicated Duration 00:12:14.167\n\tFragmented File: no\n\tFile Brand qt   - version 512\n\t\tCompatible brands: qt\n\tCreated: UNKNOWN DATE\tModified: UNKNOWN DATE\nFile has no MPEG4 IOD/OD\n1 UDTA types: A9737772 (1)\n\nTrack # 1 Info - TrackID 1 - TimeScale 24\nMedia Duration 00:12:14.166 - Indicated Duration 00:12:14.166\nTrack has 1 edit lists: track duration is 00:12:14.167\nMedia Info: Language \"Undetermined (und)\" - Type \"vide:avc1\" - 17620 samples\nVisual Sample Entry Info: width=1920 height=800 (depth=24 bits)\nVisual Track layout: x=0 y=0 width=1920 height=800\nMPEG-4 Config: Visual Stream - ObjectTypeIndication 0x21\nAVC/H264 Video - Visual Size 1920 x 800\n\tAVC Info: 1 SPS - 1 PPS - Profile High @ Level 4\n\tNAL Unit length bits: 32\n\tPixel Aspect Ratio 1:1 - Indicated track size 1920 x 800\n\tChroma format YUV 4:2:0 - Luma bit depth 8 - chroma bit depth 8\n\tSPS#1 hash: DEC7C9D830854068543D5AE5BC84AA68081EC57C\n\tPPS#1 hash: 12874FF8439E10C45D6C9B519B94BDAADC9759BD\nSelf-synchronized\n\tRFC6381 Codec Parameters: avc1.640028\n\tAverage GOP length: 17 samples\n\tMax sample duration: 1 / 24\n\nTrack # 2 Info - TrackID 2 - TimeScale 44100\nMedia Duration 00:12:14.122 - Indicated Duration 00:12:14.122\nTrack has 1 edit lists: track duration is 00:12:14.123\nMedia Info: Language \"Undetermined (und)\" - Type \"soun:mp4a\" - 31616 samples\nMPEG-4 Config: Audio Stream - ObjectTypeIndication 0x40\nMPEG-4 Audio AAC LC (AOT=2 implicit) - 2 Channel(s) - SampleRate 44100\nSynchronized on stream 1\n\tRFC6381 Codec Parameters: mp4a.40.2\nAlternate Group ID 1\n\tAll samples are sync\n\tMax sample duration: 1024 / 44100\n</code></pre><p>其实从帮助信息中我们可以看到，MP4Box也可以切DASH和HLS，除了MP4Box，我们还可以尝试使用Shaka-Packager来做对应的操作。</p><h2>Shaka-Packager的HLS与DASH</h2><p>Shaka-Packager是Google的一个开源项目，除了用FFmpeg和GPAC做HLS、DASH之外，用Shaka-Packager其实也是个不错的选择，我们稍微了解一下。</p><p>例如，用Shaka-Packager做一个HLS视频流加密操作。</p><pre><code class=\"language-plain\">packager 'input=../in.mp4,stream=video,segment_template=output$Number$.m4s,playlist_name=video_playlist.m3u8,init_segment=init.mp4'\n--hls_master_playlist_output=\"master_playlist.m3u8\"\n--hls_base_url=\"http://127.0.0.1/\" --enable_raw_key_encryption\n--protection_scheme cbcs --keys\nkey=61616161616161616161616161616161:key_id=61616161616161616161616161616161\n--clear_lead 0\n</code></pre><p>这样就可以通过Shaka-Packager生成一个DRM的HLS了，输入一个MP4文件，视频流输出m4s，列表名为video_playlist.m3u8，mp4切片的初始文件名为init.mp4，master列表名为master_playlist.m3u8，使用raw_key方式加密内容，加密保护模式为cbcs模式，密钥是61616161616161616161616161616161，切片的init之后的第一个MP4切片文件不加密，从第二片开始加密。</p><p>Shaka-Packager也是一个很大的项目，更多的能力需要你自己慢慢去挖掘。<a href=\"https://shaka-project.github.io/shaka-packager/html/\">Shaka-Packager官方文档</a>的内容也比较全，你可以参考一下。</p><p>总的来说，Shaka-Packager和GPAC比FFmpeg要简单得多，使用的API操作也比较容易，所以如果不是多格式、多codec，对兼容性要求不高且音视频应用场景简单的话，Shaka-Packager和GPAC也是不错的选择。</p><h2>小结</h2><p>MP4格式因其开放性和灵活性，使用范围非常广泛，用MP4做切片后可以封装成HLS或者DASH做分发，日常的使用频率是比较高的。因此它是我们必须要掌握的一种格式。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/fd/0a1f3cc5b0d97efaeyy3f97c69e08bfd.png?wh=1920x835\" alt=\"图片\"></p><p>能够生成和解析MP4的工具有很多，FFmpeg就是其中之一。考虑兼容性的问题，FFmpeg给出了很多参数，其中有一些比较常用的参数，如faststart（把moov容器移动到mdat前面）、DASH（兼容DASH格式的MP4分片）等参数是需要我们掌握的。除了FFmpeg之外，在简单场景下我们还可以用GPAC或者Shaka-Packager做MP4的流媒体处理。</p><p>学完今天的内容，你就可以使用FFmpeg做一些MP4的日常处理了，如果你想要获得更多的能力支持，需要再深入研究一下这三个工具的参数，并且动手去操作一下。</p><h2>思考题</h2><p>一个视频流转成MP4文件时，如何用FFmpeg对视频流内容做加密呢？加密之后如何用FFmpeg解密并顺利地播放出来呢？欢迎在评论区留下你的思考，也欢迎你把这节课分享给需要的朋友，我们下节课再见！</p>","neighbors":{"left":{"article_title":"07 | 如何高效查找并使用FFmpeg常用参数？","id":548420},"right":{"article_title":"09｜如何使用 FFmpeg 与 Handbrake 做转码？","id":550128}},"comments":[]}