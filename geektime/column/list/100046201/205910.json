{"id":205910,"title":"05 | 动态代理：面向接口编程，屏蔽RPC处理流程","content":"<p>你好，我是何小锋。上一讲我分享了网络通信，其实要理解起来也很简单，RPC 是用来解决两个应用之间的通信，而网络则是两台机器之间的“桥梁”，只有架好了桥梁，我们才能把请求数据从一端传输另外一端。其实关于网络通信，你只要记住一个关键字就行了——可靠的传输。</p><p>那么接着上一讲的内容，我们再来聊聊动态代理在 RPC 里面的应用。</p><p>如果我问你，你知道动态代理吗？ 你可能会如数家珍般地告诉我动态代理的作用以及好处。那我现在接着问你，你在项目中用过动态代理吗？这时候可能有些人就会犹豫了。那我再换一个方式问你，你在项目中有实现过统一拦截的功能吗？比如授权认证、性能统计等等。你可能立马就会想到，我实现过呀，并且我知道可以用 Spring 的 AOP 功能来实现。</p><p>没错，进一步再想，在 Spring AOP 里面我们是怎么实现统一拦截的效果呢？并且是在我们不需要改动原有代码的前提下，还能实现非业务逻辑跟业务逻辑的解耦。这里的核心就是采用动态代理技术，通过对字节码进行增强，在方法调用的时候进行拦截，以便于在方法调用前后，增加我们需要的额外处理逻辑。</p><p>那话说回来，动态代理跟 RPC 又有什么关系呢？</p><h2>远程调用的魔法</h2><p>我说个具体的场景，你可能就明白了。</p><!-- [[[read_end]]] --><p>在项目中，当我们要使用 RPC 的时候，我们一般的做法是先找服务提供方要接口，通过 Maven 或者其他的工具把接口依赖到我们项目中。我们在编写业务逻辑的时候，如果要调用提供方的接口，我们就只需要通过依赖注入的方式把接口注入到项目中就行了，然后在代码里面直接调用接口的方法 。</p><p>我们都知道，接口里并不会包含真实的业务逻辑，业务逻辑都在服务提供方应用里，但我们通过调用接口方法，确实拿到了想要的结果，是不是感觉有点神奇呢？想一下，在 RPC 里面，我们是怎么完成这个魔术的。</p><p><strong>这里面用到的核心技术就是前面说的动态代理。</strong>RPC 会自动给接口生成一个代理类，当我们在项目中注入接口的时候，运行过程中实际绑定的是这个接口生成的代理类。这样在接口方法被调用的时候，它实际上是被生成代理类拦截到了，这样我们就可以在生成的代理类里面，加入远程调用逻辑。</p><p>通过这种“偷梁换柱”的手法，就可以帮用户屏蔽远程调用的细节，实现像调用本地一样地调用远程的体验，整体流程如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/05/53/05cd18e7e33c5937c7c39bf8872c5753.jpg?wh=2508*1568\" alt=\"\" title=\"调用流程\"></p><h2>实现原理</h2><p>动态代理在 RPC 里面的作用，就像是个魔术。现在我不妨给你揭秘一下，我们一起看看这是怎么实现的。之后，学以致用自然就不难了。</p><p>我们以 Java 为例，看一个具体例子，代码如下所示：</p><pre><code>/**\n * 要代理的接口\n */\npublic interface Hello {\n    String say();\n}\n\n/**\n * 真实调用对象\n */\npublic class RealHello {\n\n    public String invoke(){\n        return &quot;i'm proxy&quot;;\n    }\n}\n\n/**\n * JDK代理类生成\n */\npublic class JDKProxy implements InvocationHandler {\n    private Object target;\n\n    JDKProxy(Object target) {\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] paramValues) {\n        return ((RealHello)target).invoke();\n    }\n}\n\n/**\n * 测试例子\n */\npublic class TestProxy {\n\n    public static void main(String[] args){\n        // 构建代理器\n        JDKProxy proxy = new JDKProxy(new RealHello());\n        ClassLoader classLoader = ClassLoaderUtils.getCurrentClassLoader();\n        // 把生成的代理类保存到文件\nSystem.setProperty(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;,&quot;true&quot;);\n        // 生成代理类\n        Hello test = (Hello) Proxy.newProxyInstance(classLoader, new Class[]{Hello.class}, proxy);\n        // 方法调用\n        System.out.println(test.say());\n    }\n}\n</code></pre><p>这段代码想表达的意思就是：给 Hello 接口生成一个动态代理类，并调用接口 say() 方法，但真实返回的值居然是来自 RealHello 里面的 invoke() 方法返回值。你看，短短50行的代码，就完成了这个功能，是不是还挺有意思的？</p><p>那既然重点是代理类的生成，那我们就去看下 Proxy.newProxyInstance 里面究竟发生了什么？</p><p>一起看下下面的流程图，具体代码细节你可以对照着 JDK 的源码看（上文中有类和方法，可以直接定位），我是按照 1.7.X 版本梳理的。</p><p><img src=\"https://static001.geekbang.org/resource/image/50/41/5042cf1b79e6b9233f2152e1e0aca741.jpg?wh=4442*926\" alt=\"\" title=\"代理类生成流程\"></p><p>在生成字节码的那个地方，也就是 ProxyGenerator.generateProxyClass() 方法里面，通过代码我们可以看到，里面是用参数  saveGeneratedFiles  来控制是否把生成的字节码保存到本地磁盘。同时为了更直观地了解代理的本质，我们需要把参数 saveGeneratedFiles 设置成true，但这个参数的值是由key为“sun.misc.ProxyGenerator.saveGeneratedFiles”的Property来控制的，动态生成的类会保存在工程根目录下的 com/sun/proxy 目录里面。现在我们找到刚才生成的 $Proxy0.class，通过反编译工具打开class文件，你会看到这样的代码：</p><pre><code>package com.sun.proxy;\n\nimport com.proxy.Hello;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.UndeclaredThrowableException;\n\npublic final class $Proxy0 extends Proxy implements Hello {\n  private static Method m3;\n  \n  private static Method m1;\n  \n  private static Method m0;\n  \n  private static Method m2;\n  \n  public $Proxy0(InvocationHandler paramInvocationHandler) {\n    super(paramInvocationHandler);\n  }\n  \n  public final String say() {\n    try {\n      return (String)this.h.invoke(this, m3, null);\n    } catch (Error|RuntimeException error) {\n      throw null;\n    } catch (Throwable throwable) {\n      throw new UndeclaredThrowableException(throwable);\n    } \n  }\n  \n  public final boolean equals(Object paramObject) {\n    try {\n      return ((Boolean)this.h.invoke(this, m1, new Object[] { paramObject })).booleanValue();\n    } catch (Error|RuntimeException error) {\n      throw null;\n    } catch (Throwable throwable) {\n      throw new UndeclaredThrowableException(throwable);\n    } \n  }\n  \n  public final int hashCode() {\n    try {\n      return ((Integer)this.h.invoke(this, m0, null)).intValue();\n    } catch (Error|RuntimeException error) {\n      throw null;\n    } catch (Throwable throwable) {\n      throw new UndeclaredThrowableException(throwable);\n    } \n  }\n  \n  public final String toString() {\n    try {\n      return (String)this.h.invoke(this, m2, null);\n    } catch (Error|RuntimeException error) {\n      throw null;\n    } catch (Throwable throwable) {\n      throw new UndeclaredThrowableException(throwable);\n    } \n  }\n  \n  static {\n    try {\n      m3 = Class.forName(&quot;com.proxy.Hello&quot;).getMethod(&quot;say&quot;, new Class[0]);\n      m1 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;equals&quot;, new Class[] { Class.forName(&quot;java.lang.Object&quot;) });\n      m0 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;hashCode&quot;, new Class[0]);\n      m2 = Class.forName(&quot;java.lang.Object&quot;).getMethod(&quot;toString&quot;, new Class[0]);\n      return;\n    } catch (NoSuchMethodException noSuchMethodException) {\n      throw new NoSuchMethodError(noSuchMethodException.getMessage());\n    } catch (ClassNotFoundException classNotFoundException) {\n      throw new NoClassDefFoundError(classNotFoundException.getMessage());\n    } \n  }\n}\n\n</code></pre><p>我们可以看到 $Proxy0 类里面有一个跟 Hello 一样签名的 say() 方法，其中 this.h 绑定的是刚才传入的 JDKProxy 对象，所以当我们调用 Hello.say() 的时候，其实它是被转发到了JDKProxy.invoke()。到这儿，整个魔术过程就透明了。</p><h2>实现方法</h2><p>其实在 Java 领域，除了JDK 默认的nvocationHandler能完成代理功能，我们还有很多其他的第三方框架也可以，比如像 Javassist、Byte Buddy 这样的框架。</p><p>单纯从代理功能上来看，JDK 默认的代理功能是有一定的局限性的，它要求被代理的类只能是接口。原因是因为生成的代理类会继承 Proxy 类，但Java 是不支持多重继承的。</p><p>这个限制在RPC应用场景里面还是挺要紧的，因为对于服务调用方来说，在使用RPC的时候本来就是面向接口来编程的，这个我们刚才在前面已经讨论过了。使用JDK默认的代理功能，最大的问题就是性能问题。它生成后的代理类是使用反射来完成方法调用的，而这种方式相对直接用编码调用来说，性能会降低，但好在JDK8及以上版本对反射调用的性能有很大的提升，所以还是可以期待一下的。</p><p>相对 JDK 自带的代理功能，Javassist的定位是能够操纵底层字节码，所以使用起来并不简单，要生成动态代理类恐怕是有点复杂了。但好的方面是，通过Javassist生成字节码，不需要通过反射完成方法调用，所以性能肯定是更胜一筹的。在使用中，我们要注意一个问题，通过Javassist生成一个代理类后，此 CtClass 对象会被冻结起来，不允许再修改；否则，再次生成时会报错。</p><p>Byte Buddy 则属于后起之秀，在很多优秀的项目中，像Spring、Jackson都用到了Byte Buddy来完成底层代理。相比Javassist，Byte Buddy提供了更容易操作的API，编写的代码可读性更高。更重要的是，生成的代理类执行速度比Javassist更快。</p><p>虽然以上这三种框架使用的方式相差很大，但核心原理却是差不多的，区别就只是通过什么方式生成的代理类以及在生成的代理类里面是怎么完成的方法调用。同时呢，也正是因为这些细小的差异，才导致了不同的代理框架在性能方面的表现不同。因此，我们在设计RPC框架的时候，还是需要进行一些比较的，具体你可以综合它们的优劣以及你的场景需求进行选择。</p><h2>总结</h2><p>今天我们介绍了动态代理在RPC里面的应用，虽然它只是一种具体实现的技术，但我觉得只有理解了方法调用是怎么被拦截的，才能厘清在RPC里面我们是怎么做到面向接口编程，帮助用户屏蔽RPC调用细节的，最终呈现给用户一个像调用本地一样去调用远程的编程体验。</p><p>既然动态代理是一种具体的技术框架，那就会涉及到选型。我们可以从这样三个角度去考虑：</p><ul>\n<li>因为代理类是在运行中生成的，那么代理框架生成代理类的速度、生成代理类的字节码大小等等，都会影响到其性能——生成的字节码越小，运行所占资源就越小。</li>\n<li>还有就是我们生成的代理类，是用于接口方法请求拦截的，所以每次调用接口方法的时候，都会执行生成的代理类，这时生成的代理类的执行效率就需要很高效。</li>\n<li>最后一个是从我们的使用角度出发的，我们肯定希望选择一个使用起来很方便的代理类框架，比如我们可以考虑：API设计是否好理解、社区活跃度、还有就是依赖复杂度等等。</li>\n</ul><p>最后，我想再强调一下。动态代理在RPC里面，虽然看起来只是一个很小的技术点，但就是这个创新使得用户可以不用关注细节了。其实，我们在日常设计接口的时候也是一样的，我们会想尽一切办法把细节对调用方屏蔽，让调用方的接入尽可能的简单。这就好比，让你去设计一个商品发布的接口，你并不需要暴露给用户一些细节，比如，告诉他们商品数据是怎么存储的。</p><h2>课后思考</h2><p>请你设想一下，如果没有动态代理帮我们完成方法调用拦截，用户该怎么完成RPC调用？</p><p>欢迎留言和我分享你的答案，也欢迎你把文章分享给你的朋友，邀请他加入学习。我们下节课再见！</p>","comments":[{"had_liked":false,"id":183317,"user_name":"邵邵","can_delete":false,"product_type":"c1","uid":1201070,"ip_address":"","ucode":"E9AAC822185AFD","user_header":"https://static001.geekbang.org/account/avatar/00/12/53/ae/26faa892.jpg","comment_is_top":false,"comment_ctime":1582993244,"is_pvip":false,"discussion_count":14,"race_medal":0,"score":"486914297692","product_id":100046201,"comment_content":"这一节RPC讲解重度依赖java知识，希望老师在后续的文章中多提炼一些跨语言层面的原理，或者用一些伪代码的方式讲解，谢谢","like_count":114,"discussions":[{"author":{"id":1221750,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a4/76/585dc6b3.jpg","nickname":"hiyanxu","note":"","ucode":"FA46A318154812","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379061,"discussion_content":"+1，同时系统大概提一下其它语言，比如的go的grpc是怎么实现的","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1623655171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1096591,"avatar":"https://static001.geekbang.org/account/avatar/00/10/bb/8f/c88a7281.jpg","nickname":"fishbubble","note":"","ucode":"4DCD26A59FFC0D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281572,"discussion_content":"对其他语言太不友好了...","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1591767154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1844464,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/24/f0/873e3355.jpg","nickname":"LL","note":"","ucode":"7105CBCD37FAA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387473,"discussion_content":"同感","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1628208818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061991,"avatar":"https://static001.geekbang.org/account/avatar/00/10/34/67/06a7f9be.jpg","nickname":"while (1)等;","note":"","ucode":"BAEC7258D65B69","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384291,"discussion_content":"没接触过java，一点都看不懂","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1626487809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259658,"avatar":"https://static001.geekbang.org/account/avatar/00/13/38/8a/4dd15bd9.jpg","nickname":"牛不才","note":"","ucode":"06C15C5B15258F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539907,"discussion_content":"可不可以不讲JAVA，这样你的局限性太大了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1639871296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048074,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/0a/0ffc8416.jpg","nickname":"关不上的窗","note":"","ucode":"7EA7BA87C680D4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297909,"discussion_content":"同感","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597109919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1114352,"avatar":"https://static001.geekbang.org/account/avatar/00/11/00/f0/fe94061e.jpg","nickname":"假装在养🐷","note":"","ucode":"D0AB9CD03E0D5B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414590,"discussion_content":"+1看不太懂了都","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636816359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1041465,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e4/39/a06ade33.jpg","nickname":"极客雷","note":"","ucode":"0DBAC4CB9C7BCD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586554,"discussion_content":"哈哈，估计作者水平和经验因所欠缺，达不到你要求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662339046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1997216,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/79/a0/8461f027.jpg","nickname":"邱宇","note":"","ucode":"148AB7971227D1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577547,"discussion_content":"是讲rpc 还是java 。哎。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656170404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1506609,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/q2HwchogzNiavKhIB4GfAxH6B88NhSoC7B7keVEUqiaP6JPokDUNJLYehocOyqYqrhA3iaxywyRXLYkYJjDUQESZw/132","nickname":"残天噬魂","note":"","ucode":"A2AD8303A4518D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545453,"discussion_content":"额，学这个课是不是需要先学JAVA？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641965481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259658,"avatar":"https://static001.geekbang.org/account/avatar/00/13/38/8a/4dd15bd9.jpg","nickname":"牛不才","note":"","ucode":"06C15C5B15258F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539908,"discussion_content":"把原理细节抽象出来讲清楚啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639871344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2639943,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/8oQ7n5tkeHsOSoyvqFpp6MSCRZicmLVCK73xgAPeh4cas0iaPP2lbzy3xwnVt5Na4PRiaXgIatIoKrShiclXDcnqUg/132","nickname":"Geek_a8b030","note":"","ucode":"A69F282C513FF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408604,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635290157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2614276,"avatar":"https://static001.geekbang.org/account/avatar/00/27/e4/04/18933a58.jpg","nickname":"心如水滴","note":"","ucode":"1E918833493152","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382875,"discussion_content":"M","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625751288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1231168,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c9/40/b2e33f00.jpg","nickname":"nuczzz","note":"","ucode":"D85DCC67AFF922","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374293,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621120863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183153,"user_name":"李玥","can_delete":false,"product_type":"c1","uid":1501046,"ip_address":"","ucode":"B19E91EE248591","user_header":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","comment_is_top":false,"comment_ctime":1582962819,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"418194790531","product_id":100046201,"comment_content":"我在工作中有幸看了不少小锋老师的代码，京东很多的基础类库中，都有小峰老师的代码。从中学到了很多。包括文章中提到的对调用方尽量屏蔽实现细节的思想，以及通过定义扩展点来剥离实现等等。","like_count":98,"discussions":[{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304366,"discussion_content":"我擦  惊险李玥老师","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1599554229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066046,"avatar":"https://static001.geekbang.org/account/avatar/00/10/44/3e/493e73fa.jpg","nickname":"灰太狼","note":"","ucode":"C17DD5D5ED9DC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318175,"discussion_content":"偶遇李钥老师，哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603672772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2052521,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/51/a9/741b5ad9.jpg","nickname":"FD","note":"","ucode":"ED396BD322489E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311533,"discussion_content":"有空搜搜两位老师的erp，去面对面学习一下。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602388631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099706,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c7/ba/4c449be2.jpg","nickname":"zhaozp","note":"","ucode":"BF390F5ED762CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303621,"discussion_content":"竟然发现玥玥老师的踪迹哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599316153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1560646,"avatar":"https://static001.geekbang.org/account/avatar/00/17/d0/46/2a4fec72.jpg","nickname":"走走～ 停停","note":"","ucode":"083B0027B2DEE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289986,"discussion_content":"一门课碰到俩老师，真值","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594291581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1723363,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/4b/e3/5f354e60.jpg","nickname":"小于","note":"","ucode":"F46D8A844277DF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580621,"discussion_content":"等李玥老师出新的课程，目前两门课都学完了，看了都两便了，收获很多。快快更新吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658298991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1635388,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f4/3c/60bf7a17.jpg","nickname":"快乐的平头哥","note":"","ucode":"D7D2FA5DA6D8BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290994,"discussion_content":"哈哈 消息队列的老师 在这里遇到了 好巧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594655939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1462076,"avatar":"https://static001.geekbang.org/account/avatar/00/16/4f/3c/296b5fa7.jpg","nickname":"mm马","note":"","ucode":"8CD674E4F61FC7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284815,"discussion_content":"竟然发现玥玥老师的踪迹","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592648612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/2d/b3b9aaf4.jpg","nickname":"小兜","note":"","ucode":"147F96339BDB81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215464,"discussion_content":"哇 这样的同学太让人羡慕了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585324016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/55/f2/ba68d931.jpg","nickname":"有米","note":"","ucode":"C9A10B7A67BC12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":199736,"discussion_content":"都是大佬哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583599895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1589989,"avatar":"https://static001.geekbang.org/account/avatar/00/18/42/e5/61cfe267.jpg","nickname":"Eclipse","note":"","ucode":"E7EB0BA99FA644","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196031,"discussion_content":"此rpc与消息队列课实战部分rpc比如何😏。感觉李玥老师那块很接地气，直接上代码！！！👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583327805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1589989,"avatar":"https://static001.geekbang.org/account/avatar/00/18/42/e5/61cfe267.jpg","nickname":"Eclipse","note":"","ucode":"E7EB0BA99FA644","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":196017,"discussion_content":"等老师您的课更新呢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583327269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194238,"user_name":"Geek_7d1d6d","can_delete":false,"product_type":"c1","uid":1163657,"ip_address":"","ucode":"9C3E2E3592A0BF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epY2JtiahsBz4LK1k00DbYoR2Zk56wnYaoBfP63v5X3Xu1kuH1ethAnMOMu6vT9eKQSqHqn3HrTK9Q/132","comment_is_top":false,"comment_ctime":1585040110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"207743470318","product_id":100046201,"comment_content":"感觉这节课的通用型不好，语言选型太侧重java，以后能不能使用伪代码讲流程呢？非常感谢老师","like_count":49},{"had_liked":false,"id":183414,"user_name":"雨霖铃声声慢","can_delete":false,"product_type":"c1","uid":1052607,"ip_address":"","ucode":"656D98310C6DA3","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/bf/ee93c4cf.jpg","comment_is_top":false,"comment_ctime":1583035209,"is_pvip":false,"replies":[{"id":"71631","content":"很棒","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1583622718,"ip_address":"","comment_id":183414,"utype":1}],"discussion_count":2,"race_medal":0,"score":"139021988681","product_id":100046201,"comment_content":"如果没有动态代理帮我们完成方法调用拦截，那么就需要使用静态代理来实现，就需要用户对原始类中所有的方法都重新实现一遍，并且为每个方法附加相似的代码逻辑，如果在RPC中，这种需要代理的类有很多个，就需要针对每个类都创建一个代理类。","like_count":33,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485682,"discussion_content":"很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583622718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2163923,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/tmKD96dzOPORx0UbbIocwUR0NO4ApBIIJZ0foOibLq2xkLgV2gficxRMreycHMErXHTQpJHDFWiablxjfhWzXRntg/132","nickname":"Geek_04789d","note":"","ucode":"9341B8934455C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544091,"discussion_content":"其实动态代理类中目标类在有些场景下是多余的，比如mybatis,直接在在InvokeHandler中实现具体业务即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641395771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302814,"user_name":"周天航","can_delete":false,"product_type":"c1","uid":2308831,"ip_address":"","ucode":"B28D84594679A6","user_header":"https://static001.geekbang.org/account/avatar/00/23/3a/df/ea0fc831.jpg","comment_is_top":false,"comment_ctime":1626396928,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"83230775552","product_id":100046201,"comment_content":"这个文章的名字应该叫《Java 中使用rpc和原理》","like_count":20,"discussions":[{"author":{"id":3210116,"avatar":"https://static001.geekbang.org/account/avatar/00/30/fb/84/73f11653.jpg","nickname":"老计伏枥","note":"","ucode":"B60A9D59344B7F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591935,"discussion_content":"应该是这门课，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666941332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184913,"user_name":"楼下小黑哥","can_delete":false,"product_type":"c1","uid":1014680,"ip_address":"","ucode":"453B099B0EE52E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/98/8f1aecf4.jpg","comment_is_top":false,"comment_ctime":1583451782,"is_pvip":false,"replies":[{"id":"71592","content":"很棒","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1583574893,"ip_address":"","comment_id":184913,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57418026630","product_id":100046201,"comment_content":"没有动态代理的情况下，最简单的情况，<br>服务消费者将类信息序列化---》按照协议拼接报文----》调用网络程序发送报文----》收到提供者返回信息----》根据协议解析出返回信息-----》再反序列化成返回结果。<br>上面每一步都挺复杂的，RPC 框架使用动态代理帮我们屏蔽这种细节。<br><br>","like_count":14,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486170,"discussion_content":"很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583574893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182683,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1464199,"ip_address":"","ucode":"854500026E2187","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhuGLVRYZibOTfMumk53Wn8Q0Rkg0o6DzTicbibCq42lWQoZ8lFeQvicaXuZa7dYsr9URMrtpXMVDDww/132","comment_is_top":false,"comment_ctime":1582849380,"is_pvip":false,"replies":[{"id":"70673","content":"相比于其他框架，其API还是很简单的。举个例子：Class&lt;? extends T&gt; clazz = BYTE_BUDDY.subclass(clz)<br>                .method(ElementMatchers.isDeclaredBy(clz))<br>                .intercept(MethodDelegation.to(new ByteBuddyInvocationHandler(invoker)))<br>                .make()<br>                .load(classLoader, ClassLoadingStrategy.Default.INJECTION)<br>                .getLoaded();<br>        try {<br>            return clazz.newInstance();<br>        } catch (Exception e) {<br>            throw new ProxyException(&quot;Error occurred while creating bytebuddy proxy of &quot; + clz.getName(), e);<br>        }","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1582856529,"ip_address":"","comment_id":182683,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57417424228","product_id":100046201,"comment_content":"Byte Buddy，老师这个后起之秀，是怎么完成动态代理的，能否剖析下，多谢！","like_count":14,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485410,"discussion_content":"相比于其他框架，其API还是很简单的。举个例子：Class&amp;lt;? extends T&amp;gt; clazz = BYTE_BUDDY.subclass(clz)\n                .method(ElementMatchers.isDeclaredBy(clz))\n                .intercept(MethodDelegation.to(new ByteBuddyInvocationHandler(invoker)))\n                .make()\n                .load(classLoader, ClassLoadingStrategy.Default.INJECTION)\n                .getLoaded();\n        try {\n            return clazz.newInstance();\n        } catch (Exception e) {\n            throw new ProxyException(&amp;quot;Error occurred while creating bytebuddy proxy of &amp;quot; + clz.getName(), e);\n        }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582856529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225736,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1591843587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27361647363","product_id":100046201,"comment_content":"补充一个动态代理实现RPC的简单例子，可以辅助理解。例子来源于隔壁王争老师的《设计模式之美》专栏。<br>https:&#47;&#47;github.com&#47;wangzheng0822&#47;codedesign&#47;tree&#47;master&#47;com&#47;xzg&#47;cd&#47;rpc","like_count":6},{"had_liked":false,"id":224435,"user_name":"Wallace Pang","can_delete":false,"product_type":"c1","uid":1081614,"ip_address":"","ucode":"6436E14695B1F9","user_header":"https://static001.geekbang.org/account/avatar/00/10/81/0e/ec667c01.jpg","comment_is_top":false,"comment_ctime":1591398308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27361202084","product_id":100046201,"comment_content":"其实在 Java 领域，除了 JDK 默认的 nvocationHandler 能完成代理功能，应该是InvocationHandler","like_count":6},{"had_liked":false,"id":224244,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1591322586,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27361126362","product_id":100046201,"comment_content":"我的jdk版本中找不到ClassLoaderUtils这个类，只能找到ClassLoader这个类，发现用下面的代码也能实现老师文中的例子。<br> ClassLoader classLoader = ClassLoader.getSystemClassLoader();","like_count":6,"discussions":[{"author":{"id":1146371,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7e/03/5397e7ec.jpg","nickname":"sunerhan308","note":"","ucode":"DE949EE2FBB53A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372885,"discussion_content":"<!-- https://mvnrepository.com/artifact/com.alipay.sofa/sofa-rpc-all -->\n<dependency>\n    <groupId>com.alipay.sofa</groupId>\n    <artifactId>sofa-rpc-all</artifactId>\n    <version>5.3.0</version>\n</dependency>\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620489344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1180915,"avatar":"https://static001.geekbang.org/account/avatar/00/12/04/f3/a621804a.jpg","nickname":"Ratatoskdeces","note":"","ucode":"D200B1C1754592","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380361,"discussion_content":"Hello test = (Hello)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), new Class[]{Hello.class}, new JDKProxy(new RealHello()));  直接这样也通","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624454162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1799983,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/77/2f/6796cde2.jpg","nickname":"大维","note":"","ucode":"3EEEBEB92764AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368635,"discussion_content":"同问，放🐶搜了一下。似乎是alipay的一个rpc repo的类。求maven 的dependencies。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618770644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216695,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1589329472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23064165952","product_id":100046201,"comment_content":"请你设想一下，如果没有动态代理帮我们完成方法调用拦截，用户该怎么完成 RPC 调用？<br>1：使用静态代理实现<br>2：远程调度的代码和业务处理逻辑写在一块，序列化、编码、网络建连、网络传输、网络断连、以及负载均衡、失败重试等等都需要写出来，这块大家都重复造轮子，上线一个RPC调用功能现在是一天之后可能是一个月<br><br>代理模式我觉得很神奇，尤其是动态代理，真像魔法一样，许多代码你看不到不是因为他不存在而是她隐藏了起来，在代码运行的时候才出现，但是计算机不可能平白无故的运行的，你不告诉它怎么运行它是不知道怎么走的。","like_count":5},{"had_liked":false,"id":229651,"user_name":"winy","can_delete":false,"product_type":"c1","uid":1100612,"ip_address":"","ucode":"04CE142A4426D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/44/22d65cf1.jpg","comment_is_top":false,"comment_ctime":1593087700,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18772956884","product_id":100046201,"comment_content":"1.静态代理的效率是远高于动态代理的<br>2.类似于lombok我们可以用注解处理器现实静态代理<br>3.因为是编译时生成的字节码，调试的时候方法间调用逻辑更简单清晰<br><br>所以我一直不明白为什么大家都用动态代理，很多框架组合起来用一层层代理下去，在调试的时候真的令人头大2333","like_count":4,"discussions":[{"author":{"id":2826205,"avatar":"","nickname":"hillwater","note":"","ucode":"FB16D5FCE8C7E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589809,"discussion_content":"动态代理用的是反射，但是jdk8的反射并不慢了，相比网络传输延时和业务处理耗时，占比小于万分之一","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665318868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210933,"user_name":"tongmin_tsai","can_delete":false,"product_type":"c1","uid":1045090,"ip_address":"","ucode":"D9423E770D5846","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/62/f873cd8f.jpg","comment_is_top":false,"comment_ctime":1587867120,"is_pvip":false,"replies":[{"id":"78542","content":"作用是一样的","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1587950152,"ip_address":"","comment_id":210933,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18767736304","product_id":100046201,"comment_content":"老师，可以理解为，动态代理生成的类，就是stub吗？","like_count":4,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493149,"discussion_content":"作用是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587950152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228982,"user_name":"cwfighter","can_delete":false,"product_type":"c1","uid":1099467,"ip_address":"","ucode":"1328C8A43EAD1B","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/cb/c7541d52.jpg","comment_is_top":false,"comment_ctime":1592875147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14477777035","product_id":100046201,"comment_content":"不太明白为啥要用运行时动态生成这么损耗性能的方式，在c&#47;c++里面都是autogen自动生成框架代码以及对应的stub调用封装，业务也不需要关心rpc调用，这种静态的方式不是更好？","like_count":4},{"had_liked":false,"id":188029,"user_name":"阿卧","can_delete":false,"product_type":"c1","uid":1229566,"ip_address":"","ucode":"68C0CC25E57707","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/fe/038a076e.jpg","comment_is_top":false,"comment_ctime":1584315447,"is_pvip":false,"replies":[{"id":"73834","content":"现在可以了","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1585007455,"ip_address":"","comment_id":188029,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14469217335","product_id":100046201,"comment_content":"从动态代理的原理和特点出发。动态代理帮我们生成代理类，屏蔽具体实现细节，在代理方法前实现统一封装。<br>如果没有动态代理，就需要手动实现每个接口类的远程调用细节了。<br>被面试官问到这个问题，没有回答上来...","like_count":2,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487320,"discussion_content":"现在可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585007455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280936,"user_name":"winfield","can_delete":false,"product_type":"c1","uid":1216930,"ip_address":"","ucode":"6A5E1B449328C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIQMh5jMlvAibnTgiaVXmsb333JBjpdvLVcptc232zQey5wkBOEPiauepQpv8UlRcOFqnTyhEQiadaHMA/132","comment_is_top":false,"comment_ctime":1614496097,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10204430689","product_id":100046201,"comment_content":"我呆的两家大厂，目前都是用静态代理，每个 rpc 的客户端都要生成代码","like_count":2,"discussions":[{"author":{"id":1196234,"avatar":"https://static001.geekbang.org/account/avatar/00/12/40/ca/1313a90b.jpg","nickname":"退役的球童","note":"","ucode":"CD5157830D9606","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380576,"discussion_content":"应该是自动生成的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624589108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204293,"user_name":"番茄炒西红柿","can_delete":false,"product_type":"c1","uid":1690242,"ip_address":"","ucode":"13F47BABAB2110","user_header":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","comment_is_top":false,"comment_ctime":1586360643,"is_pvip":false,"replies":[{"id":"76867","content":"理论上编译期创建是可以的，但实际问题就是怎么确定哪些需要创建呢","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1586733649,"ip_address":"","comment_id":204293,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10176295235","product_id":100046201,"comment_content":"为什么不用静态代理？aspectJ之类的。提前把代理类在编译的时候创建？","like_count":2,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491133,"discussion_content":"理论上编译期创建是可以的，但实际问题就是怎么确定哪些需要创建呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586733649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183583,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1583071265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10173005857","product_id":100046201,"comment_content":"其实也是看需求的。如果没有动态代理，那么调用双方可以通过定义一套消息id和消息结构（才有protobuf定义），也是可以完成远程调用的。","like_count":2},{"had_liked":false,"id":183345,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1583025655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10172960247","product_id":100046201,"comment_content":"没有动态代理的话就只能用静态代理了","like_count":2},{"had_liked":false,"id":182978,"user_name":"wusiration","can_delete":false,"product_type":"c1","uid":1104438,"ip_address":"","ucode":"A9403377054F1E","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/36/ac0ff6a7.jpg","comment_is_top":false,"comment_ctime":1582901503,"is_pvip":false,"replies":[{"id":"71841","content":"很棒","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1583733201,"ip_address":"","comment_id":182978,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10172836095","product_id":100046201,"comment_content":"如果没有动态代理完成方法拦截，那么被调用方需要有调用方的接口实现，就失去了面向接口编程的意义","like_count":3,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485519,"discussion_content":"很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583733201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1180915,"avatar":"https://static001.geekbang.org/account/avatar/00/12/04/f3/a621804a.jpg","nickname":"Ratatoskdeces","note":"","ucode":"D200B1C1754592","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380356,"discussion_content":"是调用方 需要 被调用方吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624453727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182662,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1582845968,"is_pvip":false,"replies":[{"id":"70674","content":"是的，动态代理让用户API调用透明","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1582856560,"ip_address":"","comment_id":182662,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10172780560","product_id":100046201,"comment_content":"如果没有动态代理类帮我们完成方法调用拦截，需要用户自己加入远程调用的逻辑，这样就麻烦，且使用不方便了","like_count":3,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485401,"discussion_content":"是的，动态代理让用户API调用透明","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582856560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1443145,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eozpyAUaM6ra1hqeIsd4v0fulS4zVmxDM3LQyqGo0BFM141QpQnSib6oHdQricGrRxusp5rflGn54ew/132","nickname":"甜宝仙女的专属饲养员","note":"","ucode":"6D2039BA22551F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189372,"discussion_content":"刚看了你的公众号","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582873920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004698,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","nickname":"每天晒白牙","note":"","ucode":"A1B102CD933DEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1443145,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eozpyAUaM6ra1hqeIsd4v0fulS4zVmxDM3LQyqGo0BFM141QpQnSib6oHdQricGrRxusp5rflGn54ew/132","nickname":"甜宝仙女的专属饲养员","note":"","ucode":"6D2039BA22551F","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":189392,"discussion_content":"是嘛，有缘了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582875670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":189372,"ip_address":""},"score":189392,"extra":""}]}]},{"had_liked":false,"id":183382,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1583031495,"is_pvip":false,"replies":[{"id":"71633","content":"是的","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1583622852,"ip_address":"","comment_id":183382,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877998791","product_id":100046201,"comment_content":"动态代理真是个神奇的技术，没有它的话用户就得自己写远程调用的实现了。<br>ps：SpringAOP也无从谈起了","like_count":1,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485669,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583622852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348831,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1655445222,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655445222","product_id":100046201,"comment_content":"如果不是Java代码，要实现rpc框架，怎么实现动态代理呢？","like_count":0},{"had_liked":false,"id":347272,"user_name":"言午木杉","can_delete":false,"product_type":"c1","uid":1201009,"ip_address":"","ucode":"300BEDC1B07DF1","user_header":"https://static001.geekbang.org/account/avatar/00/12/53/71/a4e9f20e.jpg","comment_is_top":false,"comment_ctime":1653893403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653893403","product_id":100046201,"comment_content":"刚开始看的时候有点困惑，因为这是围绕java而讨论的动态代理。如果是换了语言这一套应该怎么搞呢？首先动态代理和静态代码（protobuf生成）不同的地方在于，对于rpc增加或修改接口的情况，动态代理无需修改，自适应协议的变化，而静态代码需要重新生成pb覆盖调用方和服务方。如果需要开发动态代理，针对同语言的当然可以上诉java的方法，如果是跨语言的类似grpc的这种要怎么弄呢？比较遗憾的是文章并没有去说明，其实对于动态代理，要么是各种reflect逻辑从服务提供方动态获取解析类型和数据，要么就构建一堆的硬编码，可以理解为通过模板动态生成支持适配协议的相关代码。这两个的代表在grpc中分别就是 envoy 和 grpc-gateway。","like_count":0},{"had_liked":false,"id":340296,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1648725849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648725849","product_id":100046201,"comment_content":"@编辑 “除了 JDK 默认的 nvocationHandler 能完成代理功能” ，应该是InvocationHandler","like_count":0},{"had_liked":false,"id":339364,"user_name":"白晨","can_delete":false,"product_type":"c1","uid":1272026,"ip_address":"","ucode":"6D6171B8ECEDDD","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/da/5bcb83b1.jpg","comment_is_top":false,"comment_ctime":1648044385,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648044385","product_id":100046201,"comment_content":"其中this.h绑定的是刚才传入的JDKProxy对象，所以调用Hello.say() 的时候，其实它是被转发到了JDKProxy.invoke()。          这个看不懂","like_count":0},{"had_liked":false,"id":339363,"user_name":"白晨","can_delete":false,"product_type":"c1","uid":1272026,"ip_address":"","ucode":"6D6171B8ECEDDD","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/da/5bcb83b1.jpg","comment_is_top":false,"comment_ctime":1648044366,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648044366","product_id":100046201,"comment_content":"其中this.h绑定的是刚才传入的JDKProxy对象，所以调用Hello.say() 的时候，其实它是被转发到了JDKProxy.invoke()。","like_count":0},{"had_liked":false,"id":335779,"user_name":"白不吃","can_delete":false,"product_type":"c1","uid":1033578,"ip_address":"","ucode":"F019914D8819C2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/6a/7f858f1f.jpg","comment_is_top":false,"comment_ctime":1645686297,"is_pvip":true,"replies":[{"id":"122717","content":"收到，womingtianxiugaixia","user_name":"编辑回复","user_name_real":"编辑","uid":"1059377","ctime":1645716763,"ip_address":"","comment_id":335779,"utype":2}],"discussion_count":2,"race_medal":1,"score":"1645686297","product_id":100046201,"comment_content":"很难想象去年4月份就有人指出的单词错误，到现在还没修正","like_count":0,"discussions":[{"author":{"id":1059377,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2a/31/9edbf8a6.jpg","nickname":"贾静","note":"","ucode":"081E70CC01F6B8","race_medal":0,"user_type":8,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553117,"discussion_content":"收到，womingtianxiugaixia","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645716763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":1,"child_discussions":[{"author":{"id":1033578,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c5/6a/7f858f1f.jpg","nickname":"白不吃","note":"","ucode":"F019914D8819C2","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1059377,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2a/31/9edbf8a6.jpg","nickname":"贾静","note":"","ucode":"081E70CC01F6B8","race_medal":0,"user_type":8,"is_pvip":true},"discussion":{"id":556552,"discussion_content":"haodeya","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647416215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553117,"ip_address":""},"score":556552,"extra":""}]}]},{"had_liked":false,"id":318963,"user_name":"zhanyd","can_delete":false,"product_type":"c1","uid":1073845,"ip_address":"","ucode":"4C994EE512A3C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","comment_is_top":false,"comment_ctime":1635492540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635492540","product_id":100046201,"comment_content":"关于代理模式和动态代理，我写过一篇文章，大家有兴趣可以参考一下：https:&#47;&#47;blog.csdn.net&#47;zhanyd&#47;article&#47;details&#47;116210109?spm=1001.2014.3001.5501","like_count":0},{"had_liked":false,"id":285399,"user_name":"群书","can_delete":false,"product_type":"c1","uid":1437036,"ip_address":"","ucode":"BA9EE71D2D818A","user_header":"https://static001.geekbang.org/account/avatar/00/15/ed/6c/6fb35017.jpg","comment_is_top":false,"comment_ctime":1616774807,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1616774807","product_id":100046201,"comment_content":"动态代理 c++能实现吗","like_count":0},{"had_liked":false,"id":205020,"user_name":"云韵","can_delete":false,"product_type":"c1","uid":1025622,"ip_address":"","ucode":"3DE26DBAAAEDE6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/56/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1586508964,"is_pvip":true,"replies":[{"id":"76813","content":"里面的代码是可运行的","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1586690932,"ip_address":"","comment_id":205020,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1586508964","product_id":100046201,"comment_content":"何老师，可不可以提供一下本节的代码，ClassLoaderUtils这个类找不到，想自己debug一下流程","like_count":0,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491355,"discussion_content":"里面的代码是可运行的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586690932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201618,"user_name":"小兜","can_delete":false,"product_type":"c1","uid":1122861,"ip_address":"","ucode":"147F96339BDB81","user_header":"https://static001.geekbang.org/account/avatar/00/11/22/2d/b3b9aaf4.jpg","comment_is_top":false,"comment_ctime":1585812927,"is_pvip":false,"replies":[{"id":"76874","content":"很赞","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1586734132,"ip_address":"","comment_id":201618,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585812927","product_id":100046201,"comment_content":"如果没有动态代理，我们就需要自己手动的实现调用，使开发不能只关注业务了。","like_count":0,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490379,"discussion_content":"很赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586734132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193882,"user_name":"小罗希冀","can_delete":false,"product_type":"c1","uid":1311995,"ip_address":"","ucode":"88416458FF0041","user_header":"https://static001.geekbang.org/account/avatar/00/14/04/fb/40f298bb.jpg","comment_is_top":false,"comment_ctime":1584977452,"is_pvip":false,"replies":[{"id":"73813","content":"对，需要手动组合代码","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1585005695,"ip_address":"","comment_id":193882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584977452","product_id":100046201,"comment_content":"如果没有代理完成方法的调用拦截的话，那么业务代码会跟调用、解析RPC请求的代码耦合在一起","like_count":0,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488691,"discussion_content":"对，需要手动组合代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585005695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183618,"user_name":"Json Dumps","can_delete":false,"product_type":"c1","uid":1634087,"ip_address":"","ucode":"882B44D1FC3802","user_header":"https://static001.geekbang.org/account/avatar/00/18/ef/27/c48a8fb6.jpg","comment_is_top":false,"comment_ctime":1583078423,"is_pvip":false,"replies":[{"id":"71630","content":"动态代理可以面向接口编程","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1583622694,"ip_address":"","comment_id":183618,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583078423","product_id":100046201,"comment_content":"看到过，GRPC，通过proto接口，生成了客户端静态代理代码。<br>与动态代理相比，接口变化除了更新接口文件，还要重新生成静态代理代码，并更新。<br>为什么非要动态代理呢？优点是什么？","like_count":1,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485731,"discussion_content":"动态代理可以面向接口编程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583622694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182813,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1582869451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582869451","product_id":100046201,"comment_content":"还有老师我有个问题请教，对于程序里已经加了必要日志来排出问题，今天发现日志没有异常情况，但是出现了现象就是服务端一直开着，客户端大概10个左右当天关闭了，第二天连接服务端时候发现就1个客户端发生底层连接上了服务端之间socket通信，但是没有正确进入业务逻辑处理，出现问题1个客户端是随机发生的。重启服务端就好了。这个问题怎么排查，客户端嵌入式Linux，服务端win双方tcp socket通讯","like_count":0},{"had_liked":false,"id":182799,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1582868335,"is_pvip":false,"replies":[{"id":"71852","content":"找精品深入研究","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1583733863,"ip_address":"","comment_id":182799,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582868335","product_id":100046201,"comment_content":"请教老师，例如算法和开源框架源代码，你是如何学习深入理解的，毕竟我的想法自己能够灵活运用，个人能力有限的","like_count":0,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485457,"discussion_content":"找精品深入研究","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583733863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}