{"id":259675,"title":"06 | 除了授权码许可类型，OAuth 2.0还支持什么授权流程？","content":"<p>你好，我是王新栋。</p><p>在前面几讲学习授权码许可类型的原理与工作流程时，不知道你是不是一直有这样一个疑问：授权码许可的流程最完备、最安全没错儿，但它适合所有的授权场景吗？在有些场景下使用授权码许可授权，是不是过于复杂了，是不是根本就没必要这样？</p><p>比如，小兔打单软件是京东官方开发的一款软件，那么小明在使用小兔的时候，还需要小兔再走一遍授权码许可类型的流程吗？估计你也猜到答案了，肯定是不需要了。</p><p>你还记得授权码许可流程的特点么？它通过授权码这种临时的中间值，让小明这样的用户参与进来，从而让小兔软件和京东之间建立联系，进而让小兔代表小明去访问他在京东店铺的订单数据。</p><p>现在小兔被“招安”了，是京东自家的了，是被京东充分信任的，没有“第三方软件”的概念了。同时，小明也是京东店铺的商家，也就是说软件和用户都是京东的资产。这时，显然没有必要再使用授权码许可类型进行授权了。但是呢，小兔依然要通过互联网访问订单数据的Web API，来提供为小明打单的功能。</p><p>于是，为了保护这些场景下的Web API，又为了让 OAuth 2.0 更好地适应现实世界的更多场景，来解决比如上述小兔软件这样的案例，OAuth 2.0体系中还提供了资源拥有者凭据许可类型。</p><!-- [[[read_end]]] --><h2>资源拥有者凭据许可</h2><p>从“资源拥有者凭据许可”这个命名上，你可能就已经理解它的含义了。没错，资源拥有者的凭据，就是用户的凭据，就是用户名和密码。可见，这是最糟糕的一种方式。那为什么OAuth 2.0还支持这种许可类型，而且编入了OAuth 2.0的规范呢？</p><p>我们先来思考一下。正如上面我提到的，小兔此时就是京东官方出品的一款软件，小明也是京东的用户，那么小明其实是可以使用用户名和密码来直接使用小兔这款软件的。原因很简单，那就是这里不再有“第三方”的概念了。</p><p>但是呢，如果每次小兔都是拿着小明的用户名和密码来通过调用Web API的方式，来访问小明店铺的订单数据，甚至还有商品信息等，在调用这么多API的情况下，无疑增加了用户名和密码等敏感信息的攻击面。</p><p>如果是使用了token来代替这些“满天飞”的敏感信息，不就能很大程度上保护敏感信息数据了吗？这样，小兔软件只需要使用一次用户名和密码数据来换回一个token，进而通过token来访问小明店铺的数据，以后就不会再使用用户名和密码了。</p><p>接下来，我们一起看下这种许可类型的流程，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/cd/e9/cd596cfd73a42449a39342f951c5cce9.png?wh=1662*1054\" alt=\"\" title=\"图1 资源拥有者凭据许可类型的流程\"></p><p>步骤1：当用户访问第三方软件小兔时，会提示输入用户名和密码。索要用户名和密码，就是资源拥有者凭据许可类型的特点。</p><p>步骤2：<strong>这里的grant_type的值为password</strong>，告诉授权服务使用资源拥有者凭据许可凭据的方式去请求访问。</p><pre><code>Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();\nparams.put(&quot;grant_type&quot;,&quot;password&quot;);\nparams.put(&quot;app_id&quot;,&quot;APPIDTEST&quot;);\nparams.put(&quot;app_secret&quot;,&quot;APPSECRETTEST&quot;);\nparams.put(&quot;name&quot;,&quot;NAMETEST&quot;);\nparams.put(&quot;password&quot;,&quot;PASSWORDTEST&quot;);\n\nString accessToken = HttpURLClient.doPost(oauthURl,HttpURLClient.mapToStr(params));\n</code></pre><p>步骤3：授权服务在验证用户名和密码之后，生成access_token的值并返回给第三方软件。</p><pre><code>if(&quot;password&quot;.equals(grantType)){\n    String appSecret = request.getParameter(&quot;app_secret&quot;);\n    String username = request.getParameter(&quot;username&quot;);\n    String password = request.getParameter(&quot;password&quot;);\n\n    if(!&quot;APPSECRETTEST&quot;.equals(appSecret)){\n        response.getWriter().write(&quot;app_secret is not available&quot;);\n        return;\n    }\n    if(!&quot;USERNAMETEST&quot;.equals(username)){\n        response.getWriter().write(&quot;username is not available&quot;);\n        return;\n    }\n    if(!&quot;PASSWORDTEST&quot;.equals(password)){\n        response.getWriter().write(&quot;password is not available&quot;);\n        return;\n    }\n    String accessToken = generateAccessToken(appId,&quot;USERTEST&quot;);//生成访问令牌access_token的值\n    response.getWriter().write(accessToken);\n}\n</code></pre><p>到了这里，你可以掌握到一个信息：如果软件是官方出品的，又要使用OAuth 2.0来保护我们的Web API，那么你就可以使用小兔软件的做法，采用资源拥有者凭据许可类型。</p><p>无论是我们的架构、系统还是框架，都是致力于解决现实生产中的各种问题的。除了资源拥有者凭据许可类型外，OAuth 2.0 体系针对现实的环境还提供了客户端凭据许可和隐式许可类型。接下来，让我们继续看看这两种授权许可类型吧。</p><h2>客户端凭据许可</h2><p>如果没有明确的资源拥有者，换句话说就是，小兔软件访问了一个不需要用户小明授权的数据，比如获取京东LOGO的图片地址，这个LOGO信息不属于任何一个第三方用户，再比如其它类型的第三方软件来访问平台提供的省份信息，省份信息也不属于任何一个第三方用户。</p><p>此时，在授权流程中，就不再需要资源拥有者这个角色了。当然了，<strong>你也可以形象地理解为 “资源拥有者被塞进了第三方软件中” 或者 “第三方软件就是资源拥有者”</strong>。这种场景下的授权，便是客户端凭据许可，第三方软件可以直接使用注册时的app_id和app_secret来换回访问令牌token的值。</p><p>我们还是以小明使用小兔软件为例，来看下客户端凭据许可的整个授权流程，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/ff/cbc8cc1e03cb1d0a2f945ffd9dbb37ff.png?wh=1498*748\" alt=\"\" title=\"图2 客户端凭据许可授权流程\"></p><p>另外一点呢，因为授权过程没有了资源拥有者小明的参与，小兔软件的后端服务可以随时发起access_token的请求，所以这种授权许可也不需要刷新令牌。</p><p>这样一来，客户端凭据许可类型的关键流程，就是以下两大步。</p><p>步骤1：第三方软件小兔通过后端服务向授权服务发送请求，<strong>这里grant_type的值为client_credentials</strong>，告诉授权服务要使用第三方软件凭据的方式去请求访问。</p><pre><code>Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();\nparams.put(&quot;grant_type&quot;,&quot;client_credentials&quot;);\nparams.put(&quot;app_id&quot;,&quot;APPIDTEST&quot;);\nparams.put(&quot;app_secret&quot;,&quot;APPSECRETTEST&quot;);\n\nString accessToken = HttpURLClient.doPost(oauthURl,HttpURLClient.mapToStr(params));\n</code></pre><p>步骤2：在验证app_id和app_secret的合法性之后，生成access_token的值并返回。</p><pre><code>String grantType = request.getParameter(&quot;grant_type&quot;);\nString appId = request.getParameter(&quot;app_id&quot;);\n\nif(!&quot;APPIDTEST&quot;.equals(appId)){\n    response.getWriter().write(&quot;app_id is not available&quot;);\n    return;\n}\nif(&quot;client_credentials&quot;.equals(grantType)){\n  \tString appSecret = request.getParameter(&quot;app_secret&quot;);\n    if(!&quot;APPSECRETTEST&quot;.equals(appSecret)){\n        response.getWriter().write(&quot;app_secret is not available&quot;);\n        return;\n    }\n    String accessToken = generateAccessToken(appId,&quot;USERTEST&quot;);//生成访问令牌access_token的值\n    response.getWriter().write(accessToken);\n}\n</code></pre><p>到这里，我们再小结下。在获取一种不属于任何一个第三方用户的数据时，并不需要类似小明这样的用户参与，此时便可以使用客户端凭据许可类型。</p><p>接下来，我们再一起看看今天要讲的最后一种授权许可类型，就是隐式许可类型。</p><h2>隐式许可</h2><p>让我们再想象一下，如果小明使用的小兔打单软件应用没有后端服务，就是在浏览器里面执行的，比如纯粹的JavaScript应用，应该如何使用OAuth 2.0呢？</p><p>其实，这种情况下的授权流程就可以使用隐式许可流程，可以理解为第三方软件小兔直接嵌入浏览器中了。</p><p>在这种情况下，小兔软件对于浏览器就没有任何保密的数据可以隐藏了，也不再需要应用密钥app_secret的值了，也不用再通过授权码code来换取访问令牌access_token的值了。因为使用授权码的目的之一，就是把浏览器和第三方软件的信息做一个隔离，确保浏览器看不到第三方软件最重要的访问令牌access_token的值。</p><p>因此，<strong>隐式许可授权流程的安全性会降低很多</strong>。在授权流程中，没有服务端的小兔软件相当于是嵌入到了浏览器中，访问浏览器的过程相当于接触了小兔软件的全部，因此我用虚线框来表示小兔软件，整个授权流程如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/y0/c957860d09beb8777c59978f3b9e2yy0.png?wh=1492*730\" alt=\"\" title=\"图3 隐式许可授权流程\"></p><p>接下来，我使用Servlet的Get请求来模拟这个流程，一起看看相关的示例代码。</p><p>步骤1：用户通过浏览器访问第三方软件小兔。此时，第三方软件小兔实际上是嵌入浏览器中执行的应用程序。</p><p>步骤2：这个流程和授权码流程类似，只是需要特别注意一点，<strong>response_type的值变成了token</strong>，是要告诉授权服务直接返回access_token的值。随着我们后续的讲解，你会发现隐式许可流程是唯一在前端通信中要求返回access_token的流程。对，就这么 “大胆”，但 “不安全”。</p><pre><code>Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();\nparams.put(&quot;response_type&quot;,&quot;token&quot;);//告诉授权服务直接返回access_token\nparams.put(&quot;redirect_uri&quot;,&quot;http://localhost:8080/AppServlet-ch02&quot;);\nparams.put(&quot;app_id&quot;,&quot;APPIDTEST&quot;);\n\nString toOauthUrl = URLParamsUtil.appendParams(oauthUrl,params);//构造请求授权的URl\n\nresponse.sendRedirect(toOauthUrl);\n</code></pre><p>步骤3：生成acccess_token的值，通过前端通信返回给第三方软件小兔。</p><pre><code>String responseType = request.getParameter(&quot;response_type&quot;);\nString redirectUri =request.getParameter(&quot;redirect_uri&quot;);\nString appId = request.getParameter(&quot;app_id&quot;);\nif(!&quot;APPIDTEST&quot;.equals(appId)){\n\t\treturn;\n}\n\nif(&quot;token&quot;.equals(responseType)){\n    //隐式许可流程（模拟），DEMO CODE，注意：该流程全部在前端通信中完成\n    String accessToken = generateAccessToken(appId,&quot;USERTEST&quot;);//生成访问令牌access_token的值\n\n    Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();\n    params.put(&quot;redirect_uri&quot;,redirectUri);\n    params.put(&quot;access_token&quot;,accessToken);\n\n    String toAppUrl = URLParamsUtil.appendParams(redirectUri,params);//构造第三方软件的回调地址，并重定向到该地址\n    response.sendRedirect(toAppUrl);//使用sendRedirect方式模拟前端通信\n}\n</code></pre><p>如果你的软件就是直接嵌入到了浏览器中运行，而且还没有服务端的参与，并且还想使用OAuth 2.0流程的话，也就是像上面我说的小兔这个例子，那么便可以直接使用隐式许可类型了。</p><h2>如何选择？</h2><p>现在，我们已经理解了OAuth 2.0的4种授权许可类型的原理与流程。那么，我们应该如何选择到底使用哪种授权许可类型呢？</p><p>这里，我给你的建议是，在对接 OAuth 2.0 的时候先考虑授权码许可类型，其次再结合现实生产环境来选择：</p><ul>\n<li>如果小兔软件是官方出品，那么可以直接使用资源拥有者凭据许可；</li>\n<li>如果小兔软件就是只嵌入到浏览器端的应用且没有服务端，那就只能选择隐式许可；</li>\n<li>如果小兔软件获取的信息不属于任何一个第三方用户，那可以直接使用客户端凭据许可类型。</li>\n</ul><h2>总结</h2><p>好了，我们马上要结束这篇文章了，在这之前呢，我们一直讲的是授权码许可类型，你已经知道了这是一种流程最完备、安全性最高的授权许可流程。不过呢，现实世界总是有各种各样的变化，OAuth 2.0也要适应这样的变化，所以才有了我们今天讲的另外这三种许可类型。同时，关于如何来选择使用这些许可类型，我前面也给了大家一个建议。</p><p>加上前面我们讲的授权码许可类型，我们一共讲了4种授权许可类型，它们最显著的区别就是<strong>获取访问令牌access_token的方式不同</strong>。最后，我通过一张表格来对比下：</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/4d/3ee0ceff6c543157a51aae985756454d.jpg?wh=2000*1225\" alt=\"\" title=\"图4 OAuth 2.0的4种授权许可类型对比\"></p><p>除了上面这张表格所展现的4种授权许可类型的区别之外，我希望你还能记住以下两点。</p><ol>\n<li>所有的授权许可类型中，授权码许可类型的安全性是最高的。因此，只要具备使用授权码许可类型的条件，我们一定要首先授权码许可类型。</li>\n<li>所有的授权许可类型都是为了解决现实中的实际问题，因此我们还要结合实际的生产环境，在保障安全性的前提下选择最合适的授权许可类型，比如使用客户端凭据许可类型的小兔软件就是一个案例。</li>\n</ol><p>我把今天用到的代码放到了GitHub上，你可以点击<a href=\"https://github.com/xindongbook/oauth2-code/tree/master/src/com/oauth/ch06\">这个链接</a>查看。</p><h2>思考题</h2><p>如果受限于应用特性所在的环境，比如在没有浏览器参与的情况下，我们应该如何选择授权许可类型呢，还可以使用授权码许可流程吗？</p><p>欢迎你在留言区分享你的观点，也欢迎你把今天的内容分享给其他朋友，我们一起交流。</p>","neighbors":{"left":{"article_title":"05 | 如何安全、快速地接入OAuth 2.0？","id":257767},"right":{"article_title":"07 | 如何在移动App中使用OAuth 2.0？","id":260670}},"comments":[{"had_liked":false,"id":234147,"user_name":"Geek_4b64df","can_delete":false,"product_type":"c1","uid":1816105,"ip_address":"","ucode":"CDE18B9E58D756","user_header":"","comment_is_top":false,"comment_ctime":1594604884,"is_pvip":false,"replies":[{"id":"86571","content":"是的","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594776080,"ip_address":"","comment_id":234147,"utype":1}],"discussion_count":3,"race_medal":0,"score":"53134212436","product_id":100053901,"comment_content":"可以，微信小程序就用的授权码，通过ajax获取code","like_count":12,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501300,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594776080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1903226,"avatar":"","nickname":"ddosyang","note":"","ucode":"DE0FBAB888AA7F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291822,"discussion_content":"小程序是否也用到了客户端凭据许可，因为在微信公众平台注册了app_id和app_secret","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594962315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1798726,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/72/46/0674a5ed.jpg","nickname":"潮落舟漾","note":"","ucode":"82C4AE4BBA46A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1903226,"avatar":"","nickname":"ddosyang","note":"","ucode":"DE0FBAB888AA7F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354086,"discussion_content":"你没有看懂","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1615250194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":291822,"ip_address":""},"score":354086,"extra":""}]}]},{"had_liked":false,"id":234422,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1594689162,"is_pvip":false,"replies":[{"id":"86698","content":"sessionid和access_token是两个完全不同的事物，sessionid是会话，access_token不能等同于会话，它是第三方软件代表用户访问数据的凭证。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594826281,"ip_address":"","comment_id":234422,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40249394826","product_id":100053901,"comment_content":"感觉用户名密码获取到的access_token，和sessionid很像，只是session id只要用户有操作，就会自动续约，但access_token，会定期更新？","like_count":9,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501385,"discussion_content":"sessionid和access_token是两个完全不同的事物，sessionid是会话，access_token不能等同于会话，它是第三方软件代表用户访问数据的凭证。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594826281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241799,"user_name":"stg609","can_delete":false,"product_type":"c1","uid":1073025,"ip_address":"","ucode":"FB70A75A891BB8","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/81/1c614f4a.jpg","comment_is_top":false,"comment_ctime":1597449577,"is_pvip":false,"replies":[{"id":"89360","content":"1、也是按照第三方应用提前在平台上申请好的appid来判断验证。<br>2、是的。<br>3、必须的。<br>4、PKCE后面课程有介绍，这是一个增补协议，并不是授权许可类型之一。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1597625173,"ip_address":"","comment_id":241799,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18777318761","product_id":100053901,"comment_content":"写的很不错！ 有几个疑问:<br>1. 使用隐式许可类型的时候，在请求授权服务器的时候，redirect uri 并不是必须的，而且也没有app secret, 那授权服务器是如何验证client的合法性的？ 随便给一个 app id 如何？ <br>2. 除了隐式许可不需要app secret，其他几种是否都是强制的 <br>3. 授权码及隐式许可类型在注册 client 的 时候，redirect uri 是否都是必须的？但是在第一次访问授权服务器的时候redirect uri 都不是必须提供？<br>4. 对于SPA, 隐式许可现在已经不再推荐了，更推荐 使用PKCE 的授权码模式，课程是否有介绍？","like_count":4,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503848,"discussion_content":"1、也是按照第三方应用提前在平台上申请好的appid来判断验证。\n2、是的。\n3、必须的。\n4、PKCE后面课程有介绍，这是一个增补协议，并不是授权许可类型之一。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597625173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239862,"user_name":"龙堂修罗","can_delete":false,"product_type":"c1","uid":1006609,"ip_address":"","ucode":"0F51D4A20C3D71","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/11/7198f98e.jpg","comment_is_top":false,"comment_ctime":1596678989,"is_pvip":true,"replies":[{"id":"89115","content":"隐式许可类型的初衷是为了让嵌入到浏览器内应用也能够使用上OAuth2.0的方案，那么在”基础设施“都欠缺的情况下，比如就是没有或者不用服务端这样的时候，也能有一个选择。一般这样的应用使用时长都会很短暂，用完即走。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1597214185,"ip_address":"","comment_id":239862,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18776548173","product_id":100053901,"comment_content":"隐式授权使用appid请求acesstoken是不是有点多余，因为appid肯定会被抓到的。这种方式是不是就没用了","like_count":4,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503252,"discussion_content":"隐式许可类型的初衷是为了让嵌入到浏览器内应用也能够使用上OAuth2.0的方案，那么在”基础设施“都欠缺的情况下，比如就是没有或者不用服务端这样的时候，也能有一个选择。一般这样的应用使用时长都会很短暂，用完即走。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597214185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1704822,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIphXibtzjFZnvwy0pBBOyjeVmLFqhD92QHhDCoGrULX3Pia5dh6Zcjx1w8723PIualKg4mZicjYrncA/132","nickname":"kevin","note":"","ucode":"C9CE7995B30327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537172,"discussion_content":"自己没有图片服务器，图片存储到三方云服务器，比如阿里云。开发上传图片的功能，那么有一种方式就是前端直接使用 阿里云的js sdk上传图片到服务器【我理解这种就是隐士授权吧】，然后再将图片url告诉服务器。 这种图片一般就不怕别人知道，比如 一个商品的图片。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638976855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235014,"user_name":"suhuijie","can_delete":false,"product_type":"c1","uid":1999277,"ip_address":"","ucode":"DC5A2F27E11DB2","user_header":"","comment_is_top":false,"comment_ctime":1594869499,"is_pvip":false,"replies":[{"id":"86735","content":"<br>登录和授权是两个通路的事情，任何授权都是在用户登录之后进行的。<br><br>用户的用户名和密码是来进行登陆的，appID和秘钥是用来换取访问令牌的。<br><br>授权的本质是令牌，令牌是怎么换来的呢，是用户登录之后的授权，那生成令牌的时候是怎么跟用户的登录关联上的呢，因为授权和登录的后台处理都是”一家“的。<br><br>并不是说后端服务绕一圈再去登录，而且生产中登录和授权本来也是有分别的系统来进行处理。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594876076,"ip_address":"","comment_id":235014,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18774738683","product_id":100053901,"comment_content":"资源拥有者凭据许可，直接用用户名密码是前端登陆还是后端登陆？例子中还需要携带appID和秘钥，那就是需要后端登陆。那这样的情况就是，官方出品所的产品都要自己提供登录接口，然后后端服务绕一圈去登录？能否直接在前端直接用用户名和密码登录？","like_count":4,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501577,"discussion_content":"\n登录和授权是两个通路的事情，任何授权都是在用户登录之后进行的。\n\n用户的用户名和密码是来进行登陆的，appID和秘钥是用来换取访问令牌的。\n\n授权的本质是令牌，令牌是怎么换来的呢，是用户登录之后的授权，那生成令牌的时候是怎么跟用户的登录关联上的呢，因为授权和登录的后台处理都是”一家“的。\n\n并不是说后端服务绕一圈再去登录，而且生产中登录和授权本来也是有分别的系统来进行处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594876076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690759,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cc/87/2a196164.jpg","nickname":"小石头","note":"","ucode":"7B2EC4C8C6192F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372861,"discussion_content":"登录时也颁发token，这块的token跟oauth里的token有何差别呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620481360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233722,"user_name":"leros","can_delete":false,"product_type":"c1","uid":1021455,"ip_address":"","ucode":"02F018C58337E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/0f/d9d878f8.jpg","comment_is_top":false,"comment_ctime":1594415905,"is_pvip":false,"replies":[{"id":"86700","content":"在07我们讲到了不需要浏览器参与使用授权码的场景。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594826704,"ip_address":"","comment_id":233722,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18774285089","product_id":100053901,"comment_content":"理论上讲，没有浏览器的情况下，也可以实现授权码许可流程。这种流程需要一个user agent让用户和第三方软件互动，并接受来自授权服务器的重定向，而浏览器只是最常见的user agent，不过不太清楚具体实践中这一块怎么处理的。","like_count":4,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501142,"discussion_content":"在07我们讲到了不需要浏览器参与使用授权码的场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594826704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234342,"user_name":"蒋胜琳","can_delete":false,"product_type":"c1","uid":2052127,"ip_address":"","ucode":"E0786D90BAA3A5","user_header":"https://static001.geekbang.org/account/avatar/00/1f/50/1f/5563ddc2.jpg","comment_is_top":false,"comment_ctime":1594650669,"is_pvip":false,"replies":[{"id":"86515","content":"感谢支持","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594702376,"ip_address":"","comment_id":234342,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14479552557","product_id":100053901,"comment_content":"搜索了好多博客，都没有把各种许可讲明白的，在这里可算明白了","like_count":3,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501358,"discussion_content":"感谢支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594702376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240874,"user_name":"CC","can_delete":false,"product_type":"c1","uid":1021014,"ip_address":"","ucode":"2B732860C4231B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/56/4b8395f6.jpg","comment_is_top":false,"comment_ctime":1597108820,"is_pvip":true,"replies":[{"id":"89073","content":"你说的可以称为借助了OAuth的理念，并不是严格意义上的授权。另外用户登录跟授权是两个不同的事情。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1597149112,"ip_address":"","comment_id":240874,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10187043412","product_id":100053901,"comment_content":"有一个疑问想请教老师：用户登录是否应该采用 OAuth 的形式？<br><br>假如一个 React Web App 应用，自己有后端，用户注册、登录以及获取受保护资源都是采用 OAuth 的方式。比如，用户登录成功后，后端直接给前端返回 access token，前端把 access token 保存在内存中（比如 Redux Store）里面。<br><br>这种案例还属于「授权」吗？如果是，又是属于什么类型呢？<br><br>看到老师在评论里面回复，“登录和授权是两个通路的事情，任何授权都是在用户登录之后进行的。” 根据这点，我认为例子中的登录即使采用 OAuth，也可能不属于 OAuth 的讨论范围，但不是很确定。","like_count":2,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503582,"discussion_content":"你说的可以称为借助了OAuth的理念，并不是严格意义上的授权。另外用户登录跟授权是两个不同的事情。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597149112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240409,"user_name":"Geek_9d0e04","can_delete":false,"product_type":"c1","uid":1902220,"ip_address":"","ucode":"F5560CE5BDB125","user_header":"","comment_is_top":false,"comment_ctime":1596892568,"is_pvip":false,"replies":[{"id":"89088","content":"无论哪种许可方式都会生成access_token，在生成access_token的时候，对应的权限也都在用户授权的那一刻分配好了，要么是用户显式的在页面上选择了授权的权限内容，要么是后台默认采用了事先平台分配给应用的权限内容。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1597193238,"ip_address":"","comment_id":240409,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10186827160","product_id":100053901,"comment_content":"使用 资源拥有在凭据许可和隐式许可 方式时，没有了最终用户选择授权的过程，都是直接获取access_token，那授权服务做权限校验时，如何控制呢？？","like_count":2,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503433,"discussion_content":"无论哪种许可方式都会生成access_token，在生成access_token的时候，对应的权限也都在用户授权的那一刻分配好了，要么是用户显式的在页面上选择了授权的权限内容，要么是后台默认采用了事先平台分配给应用的权限内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597193238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240714,"user_name":"Geek_7b4330","can_delete":false,"product_type":"c1","uid":1784642,"ip_address":"","ucode":"B13CC6C810A9A4","user_header":"","comment_is_top":false,"comment_ctime":1597043747,"is_pvip":false,"replies":[{"id":"89076","content":"如果使用了微信登录就走了OAuth2.0流程，自身的登录没有。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1597149463,"ip_address":"","comment_id":240714,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5892011043","product_id":100053901,"comment_content":"老师，如果小兔是京东的官方APP，然后小兔本身除了账号密码登录，还集成了微信登录，登录流程又会是怎样呢？","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503538,"discussion_content":"如果使用了微信登录就走了OAuth2.0流程，自身的登录没有。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597149463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169313,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","nickname":"bigben","note":"","ucode":"DBD15A6C8E2590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367180,"discussion_content":"比如有账号+密码登录，手机号+验证码登录，每个官方app都要实现一遍所有的登录吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618283841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237686,"user_name":"tongmin_tsai","can_delete":false,"product_type":"c1","uid":1045090,"ip_address":"","ucode":"D9423E770D5846","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/62/f873cd8f.jpg","comment_is_top":false,"comment_ctime":1595925750,"is_pvip":false,"replies":[{"id":"88268","content":"我尝试理解你是说重置【access_token】的过期时间么，这个过期时间不能被重置，但可以使用刷新令牌来更换一个新的access_token。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1596416055,"ip_address":"","comment_id":237686,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890893046","product_id":100053901,"comment_content":"老师，如果类似于传统使用session那样，如果我每次使用access_token请求后，希望重置过期时间，怎么做才是最佳实践？","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502504,"discussion_content":"我尝试理解你是说重置【access_token】的过期时间么，这个过期时间不能被重置，但可以使用刷新令牌来更换一个新的access_token。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596416055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235606,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1215139,"ip_address":"","ucode":"258880ACE79448","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/a3/aee7ded7.jpg","comment_is_top":false,"comment_ctime":1595124737,"is_pvip":false,"replies":[{"id":"88114","content":"由于是公司内部系统，可以使用OAuth2.0的简化模式，也就是隐式许可类型，但是像通过微信、微博这样的方式就要使用授权码许可类型。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1596200266,"ip_address":"","comment_id":235606,"utype":1}],"discussion_count":6,"race_medal":0,"score":"5890092033","product_id":100053901,"comment_content":"王老师，公司内部的统一登录，一般选用OAuth那种验证类型呢?","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501787,"discussion_content":"由于是公司内部系统，可以使用OAuth2.0的简化模式，也就是隐式许可类型，但是像通过微信、微博这样的方式就要使用授权码许可类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596200266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1046390,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f7/76/c3404ae2.jpg","nickname":"Ferris","note":"","ucode":"7E80EAA3561F09","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":532688,"discussion_content":"这种场景下隐式授权是否是将统一认证页面的登录态传递给需要授权的应用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637666741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":501787,"ip_address":""},"score":532688,"extra":"{\"user_type\":1}"}]},{"author":{"id":1637085,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fa/dd/f640711f.jpg","nickname":"哈德韦","note":"","ucode":"E7C9B3D087D2D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588173,"discussion_content":"其实对内的认证授权往往比对外认证授权场景更加复杂。准确地说，是授权更加复杂。当然，统一登录如果只看登录的话，那只是认证过程，那么也可以使用 OIDC 流程。对于 Web 一般也是授权码流程（比如一般都会对接 Azure AD，这其实就是 Azure AD 提供的 OIDC 服务），对于客户端，可以使用设备码流程（一个设备码的例子：对接 Keycloak 设备码授权流程 - https://zhuanlan.zhihu.com/p/488194876），而对于 api 资源，则会使用到 client_credentials。\n\n也有不使用 OIDC 的，比如 SAML、ADFS 等等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663586981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"美国"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1235750,"avatar":"https://static001.geekbang.org/account/avatar/00/12/db/26/3c8d68fb.jpg","nickname":"天使梦泪","note":"","ucode":"782991747DD424","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294804,"discussion_content":"用户名，密码的方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596004496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1735740,"avatar":"","nickname":"Geek_bb8d16","note":"","ucode":"964BD4DB3D9653","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293171,"discussion_content":"公司内部统一登陆只有登陆这个服务，而没有授权这个服务，除了平台，一般公司都不需要授权这个服务吧，不知这样理解对不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595468239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1965699,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","nickname":"慎独明强","note":"","ucode":"DC2F7F2C0C8F60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293091,"discussion_content":"应该是资源拥有者凭据类型吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595430572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234928,"user_name":"al-byte","can_delete":false,"product_type":"c1","uid":1466744,"ip_address":"","ucode":"D0298A02E9259D","user_header":"https://static001.geekbang.org/account/avatar/00/16/61/78/e7aa4e04.jpg","comment_is_top":false,"comment_ctime":1594827720,"is_pvip":false,"replies":[{"id":"86713","content":"感谢支持","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594859633,"ip_address":"","comment_id":234928,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5889795016","product_id":100053901,"comment_content":"在这里系统的学习了一下oauth2.0，讲的很清楚，收获很多","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501550,"discussion_content":"感谢支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594859633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234207,"user_name":"Geek_9ae2b9","can_delete":false,"product_type":"c1","uid":2058357,"ip_address":"","ucode":"E4BB2299AF2646","user_header":"","comment_is_top":false,"comment_ctime":1594619988,"is_pvip":false,"replies":[{"id":"86557","content":"只有客户端凭据许可不需要","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594774211,"ip_address":"","comment_id":234207,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5889587284","product_id":100053901,"comment_content":"对比了授权码许可类型，本文介绍的三种授权流程中，都不需要经过用户小明的“授权”操作吗？","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501318,"discussion_content":"只有客户端凭据许可不需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594774211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233915,"user_name":"hhhh","can_delete":false,"product_type":"c1","uid":1256101,"ip_address":"","ucode":"9E87017424B382","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/a5/625c0a2e.jpg","comment_is_top":false,"comment_ctime":1594517902,"is_pvip":false,"replies":[{"id":"86345","content":"隐式许可类型实际应用在生产环境中的机会非常小了，比如直接嵌入浏览器这样的应用，在我们的实际生产环境中很少。因此，大家的重点不要放在这个授权许可类型上。<br><br>所以，在这节课的最后，我们建议：【所有的授权许可类型中，授权码许可类型的安全性是最高的。因此，只要具备使用授权码许可类型的条件，我们一定要首先授权码许可类型。】","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594562534,"ip_address":"","comment_id":233915,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5889485198","product_id":100053901,"comment_content":"对于授权服务而言，支持隐式类型还要对注册的域名增加跨域支持吧？","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501215,"discussion_content":"隐式许可类型实际应用在生产环境中的机会非常小了，比如直接嵌入浏览器这样的应用，在我们的实际生产环境中很少。因此，大家的重点不要放在这个授权许可类型上。\n\n所以，在这节课的最后，我们建议：【所有的授权许可类型中，授权码许可类型的安全性是最高的。因此，只要具备使用授权码许可类型的条件，我们一定要首先授权码许可类型。】","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594562534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290596,"discussion_content":"可以看那个 隐式授权类型的时序图， 第三方软件和授权服务是没有交互的， 都是通过浏览器，所以不需要添加跨域支持的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594544641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233766,"user_name":"Zhou","can_delete":false,"product_type":"c1","uid":2052325,"ip_address":"","ucode":"D3B7057B26E39E","user_header":"https://static001.geekbang.org/account/avatar/00/1f/50/e5/4048aa15.jpg","comment_is_top":false,"comment_ctime":1594440886,"is_pvip":false,"replies":[{"id":"86308","content":"不用，token有有效期，一段时间内都可用。<br>password模式支持refresh_token，四种基本授权许可类型中隐式许可和客户端凭据许可没有refresh_token。<br>","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594469101,"ip_address":"","comment_id":233766,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5889408182","product_id":100053901,"comment_content":"client_credential不需要refresh_token，是不是意味着每次调用api之前都要调用auth server拿token?password模式还是需要refresh_token的吧？","like_count":1,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501159,"discussion_content":"不用，token有有效期，一段时间内都可用。\npassword模式支持refresh_token，四种基本授权许可类型中隐式许可和客户端凭据许可没有refresh_token。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594469101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f9/6d/b623562a.jpg","nickname":"霹雳大仙pp","note":"","ucode":"F654FD9AEC1D56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290414,"discussion_content":"client_credential不需要每次调用api前换token，第一次换取token后，token被第三方应用缓存，后续调用只要根据appid从缓存中取出对应token即可，\n通过在即将过期前，重新换取新token方式来刷新token；\nauthorization_code模式因为凭证和授权码分离，第三方应用只能通过授权码换取的refresh_token来刷新token；\npassword不需要refresh_token，第三方应用获取了用户凭证，可以直接通过凭证刷新token。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594463825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359212,"user_name":"码小呆","can_delete":false,"product_type":"c1","uid":2055809,"ip_address":"广东","ucode":"44532D6ABF9340","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","comment_is_top":false,"comment_ctime":1665327357,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1665327357","product_id":100053901,"comment_content":"看了一下公司的用户中心项目,终于明白了,以前对一些字段,理念都不是很清楚,终于有点清晰了","like_count":0},{"had_liked":false,"id":347522,"user_name":"平凡之路","can_delete":false,"product_type":"c1","uid":1669273,"ip_address":"","ucode":"96CE12339BD5FD","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/99/6060eb2d.jpg","comment_is_top":false,"comment_ctime":1654127326,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654127326","product_id":100053901,"comment_content":"老师，您好，oauth怎么实现sso呢","like_count":0},{"had_liked":false,"id":338524,"user_name":"18610296143","can_delete":false,"product_type":"c1","uid":1067994,"ip_address":"","ucode":"1D4C68E468C871","user_header":"https://static001.geekbang.org/account/avatar/00/10/4b/da/c93eaab5.jpg","comment_is_top":false,"comment_ctime":1647538557,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647538557","product_id":100053901,"comment_content":"老师好，有两个问题想请教一下，我们现在的公司想做一个开放平台，主要包含两方面业务：<br>1、将用户的报表数据通过接口的方式暴露出去；<br>2、输出自己的计算能力，用户输入一些数据经过我们计算之后将结果返回给用户；<br>第一种业务场景很容易联想到授权码许可模式；<br>第二种业务场景我不能确定是使用哪一种授权模式；<br><br>我的问题：<br>1、第二种场景使用哪种方式比较好？（感觉应该是资源拥有者凭据许可）<br>2、如果使用的是资源拥有者凭据许可，那么password应该传什么？<br>3、这种场景下如果要使用授权码模式，应该怎么使用？<br><br>麻烦解答一下困惑，谢谢！<br>","like_count":0},{"had_liked":false,"id":335678,"user_name":"聪亮","can_delete":false,"product_type":"c1","uid":2118334,"ip_address":"","ucode":"FDF53FE8FE7CCD","user_header":"https://static001.geekbang.org/account/avatar/00/20/52/be/dcf03363.jpg","comment_is_top":false,"comment_ctime":1645622899,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645622899","product_id":100053901,"comment_content":"每种许可类型，是不是在授权平台能使用的scope也不一样，另外access_token也需要记录对应的许可类型。否则会存在通过 不安全 的 隐式许可授权拿到的 access_token，去访问其他安全性要求高的资源接口。","like_count":0},{"had_liked":false,"id":333337,"user_name":"jiangb","can_delete":false,"product_type":"c1","uid":1030861,"ip_address":"","ucode":"A09415749CA88D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrqLEic7DVicYY1s9ldH0vGBialDoplVGpicZUJ0Fdaklw27Frv8Ac67eicb5LibhL74SUxAzlick2nfltA/132","comment_is_top":false,"comment_ctime":1644299392,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644299392","product_id":100053901,"comment_content":"老师说的很明白。","like_count":0},{"had_liked":false,"id":319209,"user_name":"熊能","can_delete":false,"product_type":"c1","uid":1135024,"ip_address":"","ucode":"1019EA97062AC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/b0/d32c895d.jpg","comment_is_top":false,"comment_ctime":1635676877,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635676877","product_id":100053901,"comment_content":"请教下老师，为啥只有授权码模式有scope，其他三种都没有？所有的授权应该都会有一个授权范围的呀","like_count":0},{"had_liked":false,"id":275302,"user_name":"胖子","can_delete":false,"product_type":"c1","uid":1037760,"ip_address":"","ucode":"E6371346288A87","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIuRQaZX70dsBg6khub2VPM1eQAP9IWRWxgOFed3ia4kXyNJInFRicWJ0ibf2YmLsOvJa1sGygGpmJg/132","comment_is_top":false,"comment_ctime":1611458823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611458823","product_id":100053901,"comment_content":"隐式许可授权流程提及第三方软件小兔实际上是嵌入浏览器中执行的应用程序，不是十分理解。代码示例是Servlet，在浏览器中能运行吗？还会出现两次重定向吗？","like_count":0},{"had_liked":false,"id":271874,"user_name":"风行者","can_delete":false,"product_type":"c1","uid":1541934,"ip_address":"","ucode":"F058640CF77A35","user_header":"https://static001.geekbang.org/account/avatar/00/17/87/2e/ea54c240.jpg","comment_is_top":false,"comment_ctime":1609848864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609848864","product_id":100053901,"comment_content":"老师一再强调登录认证和授权是两回事。让我对很多糅杂在一起的场景突然清晰了起来。<br>授权码模式是否能应用在无浏览器场景，目前还未在PC里应用过，希望有类似的应用案例","like_count":0},{"had_liked":false,"id":264232,"user_name":"八面玲珑","can_delete":false,"product_type":"c1","uid":1022422,"ip_address":"","ucode":"B2AD9AD095BF76","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/d6/5edc9af1.jpg","comment_is_top":false,"comment_ctime":1606385428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606385428","product_id":100053901,"comment_content":"老师你好，如果小兔软件是官方，在进行用户授权前，有不需要用户授权的资源访问，这时使用客户端凭据许可。同时当有需要用户授权的资源访问时，需要使用资源拥有者凭证许可，这个时候需要维护两个access_token吧，怎么处理这种情况呢？","like_count":0},{"had_liked":false,"id":255403,"user_name":"电光火石","can_delete":false,"product_type":"c1","uid":1013160,"ip_address":"","ucode":"3AD33BB4AA940F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/a8/dfe4cade.jpg","comment_is_top":false,"comment_ctime":1603337037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603337037","product_id":100053901,"comment_content":"客户端许可类型，因为token是直接返回给小兔软件后端的，所以返回的直接是token，也不需要授权码是吗？","like_count":0},{"had_liked":false,"id":254246,"user_name":"长脖子树","can_delete":false,"product_type":"c1","uid":1182802,"ip_address":"","ucode":"D9090EF67EEB1B","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/52/f25c3636.jpg","comment_is_top":false,"comment_ctime":1603090673,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603090673","product_id":100053901,"comment_content":"资源拥有者凭据许可流程里面<br>官方软件(比如是一个手机app)在获得了用户名密码之后, 传到后台,  后台系统带上app_id&#47;app_secret 向授权服务请求, 然后生成 access_token, 最后将access_token 返回给官方软件的后台系统<br>这里的用户名密码及其验证都是授权服务完成的么? 相当于用户登录?<br>还是说跟登录毫无关联, 那官方软件的登录应该是怎么样的流程?<br>比如后面讲到的 OIDC 系统里, 还会返回一个 id_token 用于用户登录态验证, 这个id_token 会返回官方软件app , 而 access_token 仅仅用来关联给这个用户, 存在官方的当前系统中, 以便访问官方的其他系统<br>这部分内容比较困惑, 希望老师解答下","like_count":0},{"had_liked":false,"id":248716,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1600269519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600269519","product_id":100053901,"comment_content":"思考题，可以的，APP客户端，相当于浏览器，接收授权码，再发给授权服务。类似微信和小程序的关系。从安全角度考虑，授权码许可流程最安全，公网应当经量使用该流程","like_count":0},{"had_liked":false,"id":242334,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1597673975,"is_pvip":false,"replies":[{"id":"89457","content":"app_secret 是三方应用的秘钥，其它三种都需要。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1597712005,"ip_address":"","comment_id":242334,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1597673975","product_id":100053901,"comment_content":"突然有个疑问❓app secret是干啥的？隐式授权不需要那么其他三种授权怎么用呢？","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503983,"discussion_content":"app_secret 是三方应用的秘钥，其它三种都需要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597712005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1616954,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ODqoBdTKsL1jW4m72BZ0ibECEtWPq0N1tAIlbzjsq6mcJiavT2CKtx0ejpIqQdHbRXdMWH0I1jpI2ZiawFIkF1icsQ/132","nickname":"白中白","note":"","ucode":"95F9DABEBEFAAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310263,"discussion_content":"app secret 在实际应用一般都是做请求签名，不需做参数传递，比如支付宝支付","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601721701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236735,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1595514216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595514216","product_id":100053901,"comment_content":"OAuth 2.0授权码许可类型，这个是最安全的，需要用户登录与授权，返回授权码给第三方软件，第三方软件再去换取token和刷新token。 资源拥有者访问类型：用户 第三方软件与授权服务都是官方的，那么用户通过输入用户名和密码，去授权服务拿到token。","like_count":0},{"had_liked":false,"id":234372,"user_name":"Ryan Pan","can_delete":false,"product_type":"c1","uid":1964309,"ip_address":"","ucode":"235BA0C2AA03A5","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f9/15/584103d6.jpg","comment_is_top":false,"comment_ctime":1594657234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594657234","product_id":100053901,"comment_content":"资源拥有者凭据许可是用用户帐户密码取得token，那有没有从第三方帐户（微信等）取得token的方式呢？<br>例如用从第三方取得的access_token换授权服务的token之类的","like_count":0},{"had_liked":false,"id":234146,"user_name":"Geek_4b64df","can_delete":false,"product_type":"c1","uid":1816105,"ip_address":"","ucode":"CDE18B9E58D756","user_header":"","comment_is_top":false,"comment_ctime":1594604694,"is_pvip":false,"replies":[{"id":"86521","content":"感谢支持","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594703833,"ip_address":"","comment_id":234146,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594604694","product_id":100053901,"comment_content":"您是 隐式许可 讲的最透彻的一位老师","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501299,"discussion_content":"感谢支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594703833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233934,"user_name":"DB聪","can_delete":false,"product_type":"c1","uid":2051350,"ip_address":"","ucode":"F48257394F7054","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4d/16/848d2722.jpg","comment_is_top":false,"comment_ctime":1594522953,"is_pvip":false,"replies":[{"id":"86343","content":"感谢指正，这里是一个错误。<br><br>在如何选择，这一段，应该更正为：【如果小兔软件是官方出品，那么可以直接使用资源拥有者凭据许可；】<br><br>其实，我们在刚开始的时候一直在讲官方出品-资源拥有者凭据许可。再次感谢，已做修改。<br><br>","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594561578,"ip_address":"","comment_id":233934,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1594522953","product_id":100053901,"comment_content":"请问”如果小兔软件是官方出品，那么可以直接使用客户端凭据许可；”是否应该是”如果小兔软件是官方出品，那么可以直接使用资源拥有者凭据许可；”？","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501220,"discussion_content":"感谢指正，这里是一个错误。\n\n在如何选择，这一段，应该更正为：【如果小兔软件是官方出品，那么可以直接使用资源拥有者凭据许可；】\n\n其实，我们在刚开始的时候一直在讲官方出品-资源拥有者凭据许可。再次感谢，已做修改。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594561578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290595,"discussion_content":"对，你是对的，看的仔细","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594544519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233927,"user_name":"Geek_9d0e04","can_delete":false,"product_type":"c1","uid":1902220,"ip_address":"","ucode":"F5560CE5BDB125","user_header":"","comment_is_top":false,"comment_ctime":1594521099,"is_pvip":false,"replies":[{"id":"86344","content":"感谢指正，这里是一个错误。已联系更正修改。<br><br>针对隐式许可类型的场景的特点是，浏览器内的应用都是短暂运行，只会在被加载到浏览器的这期间保持会话，所以刷新令牌在这里的作用很有限。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594562046,"ip_address":"","comment_id":233927,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594521099","product_id":100053901,"comment_content":"总结部分：如果小兔软件是官方出品，那么可以直接使用客户端凭据许可；这个写错了吧，应该是使用资源拥有者凭证许可。还有一个问题，隐式许可时，没有refresh_token，那accesss_token过期了，每次过期都需要资源拥有者参与，再走一遍认证过程嘛？？这不是没法在生产中使用吗","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501219,"discussion_content":"感谢指正，这里是一个错误。已联系更正修改。\n\n针对隐式许可类型的场景的特点是，浏览器内的应用都是短暂运行，只会在被加载到浏览器的这期间保持会话，所以刷新令牌在这里的作用很有限。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594562046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233824,"user_name":"大秦皇朝","can_delete":false,"product_type":"c1","uid":1301113,"ip_address":"","ucode":"0F72D0D2FAEAF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/da/79/9b093890.jpg","comment_is_top":false,"comment_ctime":1594464618,"is_pvip":false,"replies":[{"id":"86309","content":"“因为使用授权码的目的之一，就是把浏览器和第三方软件的信息做一个隔离，确保浏览器看不到第三方软件最重要的访问令牌 access_token 的值。”<br>这句话呢是在解释【授权码许可流程】中【授权码】的作用之一，也是在反向说明【隐式许可】不需要授权码了。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594469530,"ip_address":"","comment_id":233824,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594464618","product_id":100053901,"comment_content":"老师好，文中说的“因为使用授权码的目的之一，就是把浏览器和第三方软件的信息做一个隔离，确保浏览器看不到第三方软件最重要的访问令牌 access_token 的值。”，这个没有理解，因为没有后台服务呀，直接请求完的access_token不直接返回给浏览器了么？为什么浏览器看不到access_token？","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501179,"discussion_content":"“因为使用授权码的目的之一，就是把浏览器和第三方软件的信息做一个隔离，确保浏览器看不到第三方软件最重要的访问令牌 access_token 的值。”\n这句话呢是在解释【授权码许可流程】中【授权码】的作用之一，也是在反向说明【隐式许可】不需要授权码了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594469530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233818,"user_name":"岁月不饶人","can_delete":false,"product_type":"c1","uid":1107456,"ip_address":"","ucode":"8B1C8F83F81E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/00/39c7a054.jpg","comment_is_top":false,"comment_ctime":1594463330,"is_pvip":false,"replies":[{"id":"86568","content":"隐式许可的特点是第三方软件无法对浏览器隐藏任何秘密，因为第三方软件的任何信息都暴露在了浏览器里面，第三方软件也就没有办法，也无必要再持有秘钥，失去了一层保护，授权服务会直接返回access_token给到“嵌入”浏览器中的第三方软件，但是用户授权的动作还是要有的，用户不授权，授权服务不颁发access_token，当然这个access_token也暴露在了浏览器下面，所以隐式许安全性低了很多，另外也有它的使用局限性，仅仅在浏览器短暂运行的第三方软件的场景。<br><br>内部服务之间的鉴权的时候，【一般】的做法是这样，比如服务A调用服务B，B 要对 A 鉴权，当A申请去调用B的时候，B会”留下“A的app_id，同时会告知一个token，某种【层度】上跟隐式许可类似，这里没有了秘钥，但隐式许可是需要【用户】这个角色参与的，所以严格上来说不是OAuth 2.0 里面的隐式许可授权类型。倒是有点像失去了秘钥的客户端凭据许可。<br><br>OAuth 2.0 从思想层面来理解是包含了一种授权的思想，可以【简单的理解】就是用令牌代替**去访问**。","user_name":"作者回复","user_name_real":"王新栋","uid":"1352303","ctime":1594775759,"ip_address":"","comment_id":233818,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594463330","product_id":100053901,"comment_content":"如果内网两个服务器需要鉴权通信，就可以使用隐式授权？","like_count":0,"discussions":[{"author":{"id":1352303,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a2/6f/d239ed80.jpg","nickname":"王新栋","note":"","ucode":"0A5D089B8E1E9D","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501176,"discussion_content":"隐式许可的特点是第三方软件无法对浏览器隐藏任何秘密，因为第三方软件的任何信息都暴露在了浏览器里面，第三方软件也就没有办法，也无必要再持有秘钥，失去了一层保护，授权服务会直接返回access_token给到“嵌入”浏览器中的第三方软件，但是用户授权的动作还是要有的，用户不授权，授权服务不颁发access_token，当然这个access_token也暴露在了浏览器下面，所以隐式许安全性低了很多，另外也有它的使用局限性，仅仅在浏览器短暂运行的第三方软件的场景。\n\n内部服务之间的鉴权的时候，【一般】的做法是这样，比如服务A调用服务B，B 要对 A 鉴权，当A申请去调用B的时候，B会”留下“A的app_id，同时会告知一个token，某种【层度】上跟隐式许可类似，这里没有了秘钥，但隐式许可是需要【用户】这个角色参与的，所以严格上来说不是OAuth 2.0 里面的隐式许可授权类型。倒是有点像失去了秘钥的客户端凭据许可。\n\nOAuth 2.0 从思想层面来理解是包含了一种授权的思想，可以【简单的理解】就是用令牌代替**去访问**。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594775759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}