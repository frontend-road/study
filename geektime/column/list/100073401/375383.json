{"id":375383,"title":"31 | 性能调优：手把手带你提升应用的执行性能","content":"<p>你好，我是吴磊。</p><p>在上一讲，我们一起完成了小汽车摇号趋势分析的应用开发，解决了5个案例。今天这一讲，我们逐一对这5个案例做性能调优，一起把专栏中学过的知识和技巧应用到实战中去。</p><p>由于趋势分析应用中的案例较多，为了方便对比每一个案例调优前后的性能效果，我们先来对齐并统一性能对比测试的方法论。</p><p>首先，我们的性能对比测试是以案例为粒度的，也就是常说的Case By Case。然后，在每一个案例中，我们都有对比基准（Baseline）。<strong>对比基准的含义是，在不采取任何调优方法的情况下，直接把代码交付执行得到的运行时间。</strong>之后，对于每一个案例，我们会采取一种或多种调优方法做性能优化，每一种调优方法都有与之对应的运行时间。最终，我们将不同调优方法的运行时间与对比基准做横向比较，来观察调优前后的性能差异，并分析性能提升/下降的背后原因。</p><p>话不多说，我们直接开始今天的课程吧！</p><h2>运行环境</h2><p>既然调优效果主要由执行时间来体现，那在开始调优之前，我们有必要先来交代一下性能测试采用的硬件资源和配置项设置。硬件资源如下表所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/07/efa374437bb4df18b80145133a1cd807.jpeg?wh=1214*584\" alt=\"\" title=\"硬件资源配置\"></p><p>为了避免因为实验本身而等待太长的时间，我使用了比较强悍的机器资源。实际上，为了跑通应用，完成性能对比测试，你使用笔记本也可以。而且为了给后续调优留出足够空间，除了必需的运行资源设置以外，其他配置项全部保留了默认值，具体的资源配置如下表所示。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/9a/f2/9a98c20b0d391910fa88a6df4a2641f2.jpeg?wh=1339*378\" alt=\"\" title=\"资源配置项设置\"></p><p>另外，由于调优方法中涉及AQE和DPP这些Spark 3.0新特性，因此，我建议你使用3.0及以上的Spark版本来部署运行环境，我这边采用的版本号是Spark 3.1.1。</p><p>接下来，我们就Case By Case地去回顾代码实现，分别分析5个案例的优化空间、可能的调优方法、方法的效果，以及它们与对比基准的性能差异。</p><h2>案例1的性能调优：人数统计</h2><p>首先，我们先来回顾案例1。案例1的意图是统计摇号总人次、中签者人数，以及去掉倍率影响之后的摇号总人次，代码如下所示。</p><pre><code>val rootPath: String = _\n \n// 申请者数据（因为倍率的原因，每一期，同一个人，可能有多个号码）\nval hdfs_path_apply = s&quot;${rootPath}/apply&quot;\nval applyNumbersDF = spark.read.parquet(hdfs_path_apply)\napplyNumbersDF.count\n// 中签者数据\nval hdfs_path_lucky = s&quot;${rootPath}/lucky&quot;\nval luckyDogsDF = spark.read.parquet(hdfs_path_lucky)\nluckyDogsDF.count\n \n// 申请者数据（去掉倍率的影响）\nval applyDistinctDF = applyNumbersDF.select(&quot;batchNum&quot;, &quot;carNum&quot;).distinct\napplyDistinctDF.count\n</code></pre><p>从上面的代码实现中，我们不难发现，短短的几行代码共有3个Actions，也就是3个不同数据集上的count操作，这3个Actions会触发3个Spark Jobs。其中，前2个Jobs都是读取数据源之后立即计数，没什么优化空间。第3个Job是在applyNumbersDF之上做去重，然后再统计计数。结合上一讲对于不同案例的讲解，我们知道，applyNumbersDF、luckyDogsDF和applyDistinctDF这3个数据集，在后续的案例中会被反复引用。</p><p>因为上述3个数据集的引用次数过于频繁，所以我们甚至都不用去计算“运行成本占比”，就可以判定：利用Cache一定有利于提升执行性能。</p><blockquote>\n<p>使用Cache的一般性原则：<br>\n如果RDD/DataFrame/Dataset在应用中的引用次数为1，那么坚决不使用Cache<br>\n如果引用次数大于1，且运行成本占比超过30%，应当考虑启用Cache</p>\n</blockquote><p>因此，对于第3个Job，我们可以利用Cache机制来提升执行性能。调优方法很简单，我们只需在applyNumbersDF.count之前添加一行代码：applyNumbersDF.cache。</p><p>由于这个案例中性能对比测试的关注点是第3个Job，那为了方便横向对比，我们先把不相干的Jobs和代码去掉，整理之后的对比基准和调优代码如下表所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/97/eff724754dca03dd1c937ab8ec003c97.png?wh=1828*973\" alt=\"\" title=\"对比基准与调优代码\"></p><p>然后，我们把这两份代码分别打包、部署和执行，并记录applyDistinctDF.count作业的执行时间，来完成性能对比测试，我把执行结果记录到了下面的表格中。</p><p><img src=\"https://static001.geekbang.org/resource/image/1f/fb/1fdcca072cd48e694b9fa507e9bcd4fb.jpeg?wh=1412*554\" alt=\"\" title=\"性能对比\"></p><p>从中我们可以看到，相较于对比基准，调优之后的执行性能提升了20%。坦白地说，这样的提升是我们意料之中的。毕竟前者消耗的是磁盘I/O，而调优之后计数作业直接从内存获取数据。</p><h2>案例2的性能调优：摇号次数分布</h2><p>接下来，我们再来分析案例2。案例2分为两个场景，第一个场景用于统计申请者摇号批次数量的分布情况，第二个场景也是类似，不过它的出发点是中签者，主要用来解答“中签者通常需要摇多少次号才能中签”这类问题。</p><h3>场景1：参与摇号的申请者</h3><p>我们先来回顾一下场景1的代码实现。仔细研读代码，我们不难发现，场景1是典型的单表Shuffle，而且是两次Shuffle。第一次Shuffle操作是以数据列“carNum”为基准做分组计数，第二次Shuffle是按照“x_axis”列再次做分组计数。</p><pre><code>val result02_01 = applyDistinctDF\n.groupBy(col(&quot;carNum&quot;))\n.agg(count(lit(1)).alias(&quot;x_axis&quot;))\n.groupBy(col(&quot;x_axis&quot;))\n.agg(count(lit(1)).alias(&quot;y_axis&quot;))\n.orderBy(&quot;x_axis&quot;)\n \nresult02_01.write.format(&quot;csv&quot;).save(&quot;_&quot;)\n</code></pre><p>因此，场景1的计算实际上就是2次Word Count而已，只不过第一次的Word是“carNum”，而第二次的Word是“x_axis”。那么，对于这样的“Word Count”，我们都有哪些调优思路呢？</p><p>在配置项调优那一讲，我们专门介绍了Shuffle调优的一些常规方法，比如调整读写缓冲区大小、By Pass排序操作等等。除此之外，我们的脑子里一定要有一根弦：<strong>Shuffle的本质是数据的重新分发，凡是有Shuffle操作的地方都需要关注数据分布。所以对于过小的数据分片，我们要有意识地对其进行合并</strong>。再者，在案例1中我们提到，applyNumbersDF、luckyDogsDF和applyDistinctDF在后续的案例中会被反复引用，<strong>因此给applyDistinctDF加Cache也是一件顺理成章的事情</strong>。</p><p>调优的思路这么多，那为了演示每一种调优方法的提升效果，我会从常规操作、数据分区合并、加Cache这3个方向出发，分别对场景1进行性能调优。不过，需要说明的是，咱们这么做的目的，一来是为了开阔调优思路，二来是为了复习之前学习过的调优技巧。</p><p>当然了，在实际工作中，我们一般没有时间和精力像现在这样，一个方法、一个方法去尝试。那么，效率最高的做法应该是遵循我们一直强调的调优方法论，也就是<strong>先去应对木桶的短板、消除瓶颈，优先解决主要矛盾，然后在时间、精力允许的情况下，再去应对次短的木板</strong>。</p><p>那么问题来了，你认为上述3种调优思路分别应对的是哪些“木板”？这些“木板”中哪一块是最短的？你又会优先采用哪种调优技巧？接下来，我们就带着这些问题，依次对场景1做调优。</p><h4>思路1：Shuffle常规优化</h4><p>刚刚咱们提到，Shuffle的常规优化有两类：一类是By Pass排序操作，一类是调整读写缓冲区。而By Pass排序有两个前提条件：一是计算逻辑不涉及聚合或排序；二是Reduce阶段的并行度要小于参数spark.shuffle.sort.bypassMergeThreshold的设置值。显然，场景1不符合要求，计算逻辑既包含聚合也包含排序。所以，我们就只有调整读写缓冲区这一条路可走了。</p><p>实际上，读写缓冲区的调优也是有前提的，因为这部分内存消耗会占用Execution Memory内存区域，所以提高缓冲区大小的前提是Execution Memory内存比较充裕。由于咱们使用的硬件资源比较强劲，而且小汽车摇号数据整体体量偏小，因此咱们还是有一些“资本”对读写缓冲区做调优的。具体来说，我们需要调整如下两个配置项：</p><ul>\n<li><strong>spark.shuffle.file.buffer，Map阶段写入缓冲区大小</strong></li>\n<li><strong>spark.reducer.maxSizeInFlight，Reduce阶段读缓冲区大小</strong></li>\n</ul><p>由于读写缓冲区都是以Task为粒度进行设置的，因此调整这两个参数的时我们要小心一点，一般来说50%往往是个不错的开始，对比基准与优化设置如下表所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/52/ea/5219a7da76db953d42f485aa334b15ea.jpeg?wh=1792*448\" alt=\"\" title=\"对比基准与优化设置\"></p><p>两组对比实验的运行时间，我记录到了下面的表格中。从中我们不难发现，上述两个参数的调整，对于作业端到端执行性能的影响不大。不过，这种参数调了半天，执行效率并没有显著提升的场景，肯定让你似曾相识。这个时候，最好的办法就是我们继续借助“木桶短板”“瓶颈”以及“调优方法论”，去尝试其他的调优思路。</p><p><img src=\"https://static001.geekbang.org/resource/image/52/f1/52910d40292653054040bb58950380f1.jpeg?wh=1509*446\" alt=\"\" title=\"性能对比\"></p><h4>思路2：数据分区合并</h4><p>接着，我们再来说第二个思路，数据分区合并。首先，咱们先来一起分析一下，场景1到底存不存在数据分片过小的问题。为了方便分析，我们再来回顾一遍代码。因为场景1的计算基于数据集applyDistinctDF，所以要回答刚刚的问题，我们需要结合数据集applyDistinctDF的存储大小，以及Shuffle计算过后Reduce阶段的并行度一起来看。</p><pre><code>val result02_01 = applyDistinctDF\n.groupBy(col(&quot;carNum&quot;))\n.agg(count(lit(1)).alias(&quot;x_axis&quot;))\n \n.groupBy(col(&quot;x_axis&quot;))\n.agg(count(lit(1)).alias(&quot;y_axis&quot;))\n \n.orderBy(&quot;x_axis&quot;)\n \nresult02_01.write.format(&quot;csv&quot;).save(&quot;_&quot;)\n</code></pre><p>并行度由配置项spark.sql.shuffle.partitions决定，其默认大小为200，也就是200个数据分区。而对于数据集存储大小的估算，我们需要用到下面的函数。</p><pre><code>def sizeNew(func: =&gt; DataFrame, spark: =&gt; SparkSession): String = {\n \n  val result = func\n \n  val lp = result.queryExecution.logical\n \n  val size = spark.sessionState.executePlan(lp).optimizedPlan.stats.sizeInBytes\n \n  &quot;Estimated size: &quot; + size/1024 + &quot;KB&quot;\n \n}\n</code></pre><p>给定DataFrame，sizeNew函数可以返回该数据集在内存中的精确大小。把applyDistinctDF作为实参，调用sizeNew函数，返回的估算尺寸为2.6 GB。将数据集尺寸除以并行度，我们就能得到Reduce阶段每个数据分片的存储大小，也就是13 MB（也就是2.6 GB / 200）。通常来说，数据分片的尺寸大小在200 MB左右为宜，13 MB的分片尺寸显然过小。</p><p>在调度系统那一讲（第5讲），我们说过，如果需要处理的数据分片过小，相较于数据处理，Task调度开销将变得异常显著，而这样会导致CPU利用降低，执行性能变差。因此，为了提升CPU利用率进而提升整体的执行效率，我们需要对过小的数据分片做合并。这个时候，AQE的自动分区合并特性就可以帮我们做这件事情。</p><p>不过，要想充分利用AQE的自动分区合并特性，我们还需要对相关的配置项进行调整。这里，你直接看场景1是怎么设置这些配置项的就可以了。</p><p><img src=\"https://static001.geekbang.org/resource/image/13/7a/1395a687a08dc14291d835e5f5a91e7a.jpeg?wh=1920*649\" alt=\"\" title=\"对比基准与优化设置\"></p><p>一旦开启AQE机制，自动分区合并特性会自动生效。表格中的配置项有两个需要我们特别注意，一个是最小分区数minPartitionNum，另一个是合并之后的目标尺寸advisoryPartitionSizeInBytes。</p><p>我们先来看最小分区数，也就是minPartitionNum。minPartitionNum的含义，指的是分区合并之后的分区数量，不能低于这个参数设置的数值。由于我们计算集群配置的Executors个数为6，为了保证每个CPU都不闲着、有活儿干，我们不妨把minPartitionNum也设置为6。</p><p>接下来是分区合并的目标尺寸，我们刚刚说过，分区大小的经验值在200 MB左右，因此我们不妨把advisoryPartitionSizeInBytes设置为200 MB。不过，为了对比不同分区大小对于执行性能的影响，我们可以多做几组实验。</p><p>配置项调整前后的几组实验效果对比如下，可以看到，调优后的运行时间有所缩短，这说明分区合并对于提升CPU利用率和作业的整体执行性能是有帮助的。仔细观察下表，我们至少有3点洞察。</p><p><img src=\"https://static001.geekbang.org/resource/image/08/80/088372fe46a2f2b1839962c5c7232c80.jpeg?wh=1814*703\" alt=\"\" title=\"性能对比\"></p><ul>\n<li><strong>并行度过高、数据分片过小，CPU调度开销会变大，执行性能也变差。</strong></li>\n<li><strong>分片粒度划分在200 MB左右时，执行性能往往是最优的。</strong></li>\n<li><strong>并行度过低、数据分片过大，CPU数据处理开销也会过大，执行性能会锐减。</strong></li>\n</ul><h4>思路3：加Cache</h4><p>最后一个思路是加Cache，这个调优技巧使用起来非常简单，我们在案例1已经做过演示，因此，这里直接给出优化代码和运行结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/95/0e/951e97585829030d57e4371bef07690e.jpeg?wh=1851*1023\" alt=\"\" title=\"对比基准与调优代码\"></p><p>可以看到，利用Cache机制做优化，作业执行性能提升得非常显著。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/4d/3af1af36af6f51e9776ff990c602ab4d.jpeg?wh=1882*524\" alt=\"\" title=\"性能对比\"></p><p>到此为止，我们尝试了3种调优方法来对场景1做性能优化，分别是Shuffle读写缓冲区调整、数据分区合并，以及加Cache。第1种方法针对的是，Shuffle过程中磁盘与网络的请求次数；第2种方法的优化目标，是提升Reduce阶段的CPU利用率；第3种方法针对的是，数据集在磁盘中的重复扫描与重复计算。</p><p>实际上，根本不需要做定量分析，仅从定性我们就能看出，数据集的重复扫描与计算的开销最大。因此，在实际工作中，对于类似的“多选题”，我们自然要优先选择能够消除瓶颈的第3种方法。</p><h3>场景2：幸运的中签者</h3><p>完成了场景1单表Shuffle的优化之后，接下来，我们再来看看场景2，场景2的业务目标是获取中签者的摇号次数分布。我们先来回顾场景2的代码实现，场景2的计算涉及一次数据关联，两次分组、聚合，以及最终的排序操作。不难发现，除了关联计算外，其他计算步骤与场景1如出一辙。因此，对于场景2的优化，我们专注在第一步的数据关联，后续优化沿用场景1的调优方法即可。</p><pre><code>val result02_02 = applyDistinctDF\n.join(luckyDogsDF.select(&quot;carNum&quot;), Seq(&quot;carNum&quot;), &quot;inner&quot;)\n.groupBy(col(&quot;carNum&quot;)).agg(count(lit(1)).alias(&quot;x_axis&quot;))\n.groupBy(col(&quot;x_axis&quot;)).agg(count(lit(1)).alias(&quot;y_axis&quot;))\n.orderBy(&quot;x_axis&quot;)\n \nresult02_02.write.format(&quot;csv&quot;).save(&quot;_&quot;)\n</code></pre><p>参与关联的两张表分别是applyDistinctDF和luckyDogsDF，其中applyDistinctDF是去重之后的摇号数据，luckyDogsDF包含的是中签者的申请编号与批次号。applyDistinctDF包含1.35条数据记录，而luckyDogsDF仅仅包含115万条数据记录。很显然，二者之间的数据关联属于数仓中常见的“大表Join小表”。</p><p>遇到“大表Join小表”的计算场景，我们最先应该想到的调优技巧一定是广播变量。毕竟，我们一直都在不遗余力地强调Broadcast Joins的优势与收益。在这里，我再强调一次，你一定要掌握使用广播变量优化数据关联的调优技巧。毫不夸张地说，广播变量是“性价比”最高的调优技巧，且没有之一。</p><p>要利用广播变量来优化applyDistinctDF与luckyDogsDF的关联计算，我们需要做两件事情。<strong>第一件，估算luckyDogsDF数据表在内存中的存储大小。第二件，设置广播阈值配置项spark.sql.autoBroadcastJoinThreshold。</strong></p><p>对于分布式数据集的尺寸预估，我们还是使用sizeNew函数，把luckyDogsDF作为实参，调用sizeNew函数，返回的估算尺寸为18.5MB。有了这个参考值，我们就可以设置广播阈值了。要把applyDistinctDF与luckyDogsDF的关联计算转化为Broadcast Join，只要让广播阈值大于18.5MB就可以，我们不妨把这个参数设置为20MB。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/4f/f5f7bee0dcf83197b57674194047eb4f.jpeg?wh=1701*407\" alt=\"\" title=\"对比基准与优化设置\"></p><p>我把配置项调整前后的实验结果记录到了如下表格，显然，相比默认的Shuffle Sort Merge Join实现机制，Broadcast Join的执行性能更胜一筹。</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/4d/b81a0ffc8f2a2ab26fca1f31c7ac7d4d.png?wh=1762*575\" alt=\"\" title=\"性能对比\"></p><h2>案例3的性能调优：中签率的变化趋势</h2><p>案例3的业务目标是洞察中签率的变化趋势，我们先来回顾代码。要计算中签率，我们需要分两步走。第一步，按照摇号批次，也就是batchNum分别对applyDistinctDF和luckyDogsDF分组，然后分别对分组内的申请者和中签者做统计计数。第二步，通过数据关联将两类计数做除法，最终得到每个批次的中签率。</p><pre><code>// 统计每批次申请者的人数\nval apply_denominator = applyDistinctDF\n.groupBy(col(&quot;batchNum&quot;))\n.agg(count(lit(1)).alias(&quot;denominator&quot;))\n\n// 统计每批次中签者的人数\nval lucky_molecule = luckyDogsDF\n.groupBy(col(&quot;batchNum&quot;))\n.agg(count(lit(1)).alias(&quot;molecule&quot;))\n\nval result03 = apply_denominator\n.join(lucky_molecule, Seq(&quot;batchNum&quot;), &quot;inner&quot;)\n.withColumn(&quot;ratio&quot;, round(col(&quot;molecule&quot;)/col(&quot;denominator&quot;), 5))\n.orderBy(&quot;batchNum&quot;)\n \nresult03.write.format(&quot;csv&quot;).save(&quot;_&quot;)\n</code></pre><p>由于2011年到2019年总共有72个摇号批次，因此第一步计算得到结果集，也就是apply_denominator和lucky_molecule各自有72条数据记录。显然，两个如此之小的数据集做关联不存在什么调优空间。</p><p>因此，对于案例3来说，调优的关键在于第一步涉及的两个单表Shuffle。关于单表Shuffle的调优思路与技巧，我们在案例2的场景1做过详细的分析与讲解，因此，applyDistinctDF和luckyDogsDF两张表的Shuffle优化就留给你作为课后练习了。</p><h2>案例4的性能调优：中签率局部洞察</h2><p>与案例3不同，案例4只关注2018年的中签率变化趋势，我们先来回顾案例4的代码实现。</p><pre><code>// 筛选出2018年的中签数据，并按照批次统计中签人数\nval lucky_molecule_2018 = luckyDogsDF\n.filter(col(&quot;batchNum&quot;).like(&quot;2018%&quot;))\n.groupBy(col(&quot;batchNum&quot;))\n.agg(count(lit(1)).alias(&quot;molecule&quot;))\n\n// 通过与筛选出的中签数据按照批次做关联，计算每期的中签率\nval result04 = apply_denominator\n.join(lucky_molecule_2018, Seq(&quot;batchNum&quot;), &quot;inner&quot;)\n.withColumn(&quot;ratio&quot;, round(col(&quot;molecule&quot;)/col(&quot;denominator&quot;), 5))\n.orderBy(&quot;batchNum&quot;)\n \nresult04.write.format(&quot;csv&quot;).save(&quot;_&quot;)\n</code></pre><p>从代码实现来看，案例4相比案例3唯一的改动，就是在luckyDogsDF做统计计数之前增加了摇号批次的过滤条件，也就是filter(col(\"batchNum\").like(\"2018%\"))。你可能会说：“案例4的改动可以说是微乎其微，它的调优空间和调优方法应该和案例3没啥区别”。还真不是，还记得Spark 3.0推出的DPP新特性吗？添加在luckyDogsDF表上的这个不起眼的过滤谓词，恰恰让DPP有了用武之地。</p><p>在DPP那一讲，我们介绍过开启DPP的3个前提条件：</p><ul>\n<li>事实表必须是分区表，且分区字段（可以是多个）必须包含Join Key</li>\n<li>DPP仅支持等值Joins，不支持大于、小于这种不等值关联关系</li>\n<li>维表过滤之后的数据集，必须要小于广播阈值，因此，你要注意调整配置项spark.sql.autoBroadcastJoinThreshold</li>\n</ul><p>那么，这3个前提条件是怎么影响案例4的性能调优的呢？</p><p>首先，在上一讲，我们介绍过摇号数据的目录结构，apply和lucky目录下的数据都按照batchNum列做了分区存储。因此，案例4中参与关联的数据表applyDistinctDF和luckyDogsDF都是分区表，且分区键batchNum刚好是二者做关联计算的Join Key。其次，案例4中的关联计算显然是等值Join。</p><p>最后，我们只要保证lucky_molecule_2018结果集小于广播阈值就可以触发DPP机制。2018年只有6次摇号，也就是说，分组计数得到的lucky_molecule_2018只有6条数据记录，这么小的“数据集”完全可以放进广播变量。</p><p>如此一来，案例4满足了DPP所有的前提条件，利用DPP机制，我们就可以减少applyDistinctDF的数据扫描量，从而在整体上提升作业的执行性能。</p><p><img src=\"https://static001.geekbang.org/resource/image/40/ba/40663f7678edb280174663eabec114ba.jpeg?wh=1776*601\" alt=\"\" title=\"对比基准与DPP优化\"></p><p>DPP的核心作用在于<strong>降低事实表applyDistinctDF的磁盘扫描量</strong>，因此案例4的调优办法非常简单，只要把最初加在applyDistinctDF之上的Cache去掉即可，如上表右侧所示。同时，为了公平起见，对比基准不应该仅仅是让DPP失效的测试用例，而应该是applyDistinctDF加Cache的测试用例。与此同时，我们直接对比DPP的磁盘读取效率与Cache的内存读取效率，也能加深对DPP机制的认知与理解。</p><p>把上述两个测试用例交付执行，运行结果如下。可以看到，相较对比基准，在DPP机制的作用下，案例4端到端的执行性能有着将近5倍的提升。由此可见，数据集加Cache之后的内存读取，远不如DPP机制下的磁盘读取更高效。</p><p><img src=\"https://static001.geekbang.org/resource/image/83/1a/831514d82a07d6ded4986c83660byy1a.jpeg?wh=1800*576\" alt=\"\" title=\"性能对比\"></p><h2>案例5的性能调优：倍率分析</h2><p>案例5也包含两个场景，场景1的业务目标是计算不同倍率下的中签人数，场景2与场景1相比稍有不同，它的目的是计算不同倍率下的中签比例。</p><p>尽管两个场景的计算逻辑有区别，但是调优思路与方法是一致的。因此，在案例5中，我们只需要对场景1的性能优化进行探讨、分析与对比，我们先来回顾一下场景1的代码实现。</p><pre><code>val result05_01 = applyNumbersDF\n.join(luckyDogsDF.filter(col(&quot;batchNum&quot;) &gt;= &quot;201601&quot;)\n.select(&quot;carNum&quot;), Seq(&quot;carNum&quot;), &quot;inner&quot;)\n.groupBy(col(&quot;batchNum&quot;),col(&quot;carNum&quot;))\n.agg(count(lit(1)).alias(&quot;multiplier&quot;))\n.groupBy(&quot;carNum&quot;)\n.agg(max(&quot;multiplier&quot;).alias(&quot;multiplier&quot;))\n.groupBy(&quot;multiplier&quot;)\n.agg(count(lit(1)).alias(&quot;cnt&quot;))\n.orderBy(&quot;multiplier&quot;)\n \nresult05_01.write.format(&quot;csv&quot;).save(&quot;_&quot;)\n</code></pre><p>仔细研读代码之后，我们发现场景1的计算分为如下几个环节：</p><ul>\n<li>大表与小表的关联计算，且小表带过滤条件</li>\n<li>按batchNum列做统计计数</li>\n<li>按carNum列取最大值</li>\n<li>按multiplier列做统计计数</li>\n</ul><p>在这4个环节当中，关联计算涉及的数据扫描量和数据处理量最大。因此，这一环节是案例5执行效率的关键所在。另外，除了关联计算环节，其他3个环节都属于单表Shuffle优化的范畴，这3个环节的优化可以参考案例2场景1的调优思路与技巧，咱们也不多说了。因此，对于案例5的性能优化，我们重点关注第一个环节，也就是applyNumbersDF与luckyDogsDF的关联计算。</p><p>仔细观察第一个环节的关联计算，我们发现关联条件中的Join Key是carNum，而carNum并不是applyNumbersDF与luckyDogsDF两张表的分区键，因此，在这个关联查询中，我们没有办法利用DPP机制去做优化。</p><p>不过，applyNumbersDF与luckyDogsDF的内关联是典型的“大表Join小表”，对于这种场景，我们至少有两种方法可以将低效的SMJ转化为高效的BHJ。</p><p><strong>第一种办法是计算原始数据集luckyDogsDF的内存存储大小，确保其小于广播阈值，从而利用Spark SQL的静态优化机制将SMJ转化为BHJ。第二种方法是确保过滤后的luckyDogsDF小于广播阈值，这样我们就可以利用Spark SQL的AQE机制来动态地将SMJ转化为BHJ。</strong></p><p>接下来，我们分别使用这两种方法来做优化，比较它们之间，以及它们与对比基准之间的性能差异。在案例2场景2中，我们计算过luckyDogsDF在内存中的存储大小是18.5MB，因此，通过适当调节spark.sql.autoBroadcastJoinThreshold，我们就可以灵活地在两种调优方法之间进行切换。</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/6c/cedbf6c7c5d8c18d4bd3b0fc30bb9a6c.jpeg?wh=1920*521\" alt=\"\" title=\"对比基准与优化设置\"></p><p>将3种测试用例付诸执行，在执行效率方面，SMJ毫无悬念是最差的，而AQE的动态优化介于SMJ与Spark SQL的静态转化之间。毕竟，AQE的Join策略调整是一种“亡羊补牢、犹未为晚”的优化机制，在把SMJ调整为BHJ之前，参与Join的两张表的Shuffle计算已经执行过半。因此，它的执行效率一定比Spark SQL的静态优化更差。尽管如此，AQE动态调整过后的BHJ还是比默认的SMJ要高效得多，而这也体现了AQE优化机制的价值所在。</p><p><img src=\"https://static001.geekbang.org/resource/image/82/0c/8236c8d518534f2b9caa49d921878b0c.jpeg?wh=1892*612\" alt=\"\" title=\"性能对比\"></p><h2>小结</h2><p>今天这一讲，我们结合以前学过的知识点与调优技巧，以小汽车摇号为例Case By Case地做性能优化。涉及的优化技巧有Shuffle读写缓冲区调整、加Cache、预估数据集存储大小、Spark SQL静态优化、AQE动态优化（自动分区合并与Join策略调整）以及DPP机制。为了方便你对比，我把它们总结在了一张脑图里。不过，我更希望你能自己总结一下，这样才能记得更好。</p><p><img src=\"https://static001.geekbang.org/resource/image/5d/eb/5dd4d43670ceee45d9fdbc38f100f9eb.jpeg?wh=1920*320\" alt=\"\"></p><p>最后我想说，很遗憾我们没能在这个实战里，把专栏中所有的调优技巧付诸实践，这主要是因为小汽车摇号应用相对比较简单，很难覆盖所有的计算与优化场景。对于那些未能付诸实战的调优技巧，只能靠你在平时的工作中去实践了。</p><p>不过，专栏的留言区和咱们的读者群，会一直为你敞开，尽管我不能做到立即回复，但我可以承诺的是，对于你的留言，我只会迟到、绝不缺席！</p><h2>每日一练</h2><ol>\n<li>你能参考案例2场景1，完成案例3中applyDistinctDF和luckyDogsDF两张表的单表Shuffle优化吗？</li>\n<li>你能参考案例5场景1，综合运用AQE、Broadcast Join等调优技巧，对案例5场景2做性能优化吗？</li>\n</ol><p>期待在留言区看到你的优化结果，也欢迎你随时提问，我们下一讲见！</p>","comments":[{"had_liked":false,"id":332041,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1642993826,"is_pvip":false,"replies":[{"id":"121410","content":"好问题，像reduceByKey这些操作，确实本身并不需要排序，但是，在Spark的实现里面，其实很多地方都需要排序，比如说，data文件和index文件的merge。bypass的要求，其实是不允许有map端的combine，简单理解，就是操作本身不能带Aggregate。<br><br>原因在于，如果操作有Aggregate的话，那么在实现层面，Spark会用AppendOnlyMap来缓存RDD分片中的数据，随着分片不断填充，AppendOnlyMap的内容会溢出，这些temp file最终会merge到一起，这些内容merge的话，其实sort merge是最经济实惠的。不管是data文件、还是index文件，都是这样。另外一个方面，就是复用sort shuffle manager的代码，提高代码复用率。","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1643193653,"ip_address":"","comment_id":332041,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14527895714","product_id":100073401,"comment_content":"老师您好，问下 bypass 排序操作为什么要求计算逻辑不涉及聚合呢？reduceByKey 感觉也不需要排序啊。。","like_count":4,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548443,"discussion_content":"好问题，像reduceByKey这些操作，确实本身并不需要排序，但是，在Spark的实现里面，其实很多地方都需要排序，比如说，data文件和index文件的merge。bypass的要求，其实是不允许有map端的combine，简单理解，就是操作本身不能带Aggregate。\n\n原因在于，如果操作有Aggregate的话，那么在实现层面，Spark会用AppendOnlyMap来缓存RDD分片中的数据，随着分片不断填充，AppendOnlyMap的内容会溢出，这些temp file最终会merge到一起，这些内容merge的话，其实sort merge是最经济实惠的。不管是data文件、还是index文件，都是这样。另外一个方面，就是复用sort shuffle manager的代码，提高代码复用率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643193653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295427,"user_name":"斯盖丸","can_delete":false,"product_type":"c1","uid":1168504,"ip_address":"","ucode":"B881D14B028F14","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/78/66b3f2a2.jpg","comment_is_top":false,"comment_ctime":1622427520,"is_pvip":false,"replies":[{"id":"107247","content":"好问题，200M是无数次调优得来的经验值~ 128MB是HDFS的推荐大小，用在Spark的Task上，有些偏小了。","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1622457730,"ip_address":"","comment_id":295427,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14507329408","product_id":100073401,"comment_content":"老师，我看到很多hdfs源的spark job，它们task建议的大小是128M，也就是一个HDFS block的大小。请问咱们这边说的一个task最佳大小是200多M是怎么来的？","like_count":4,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521077,"discussion_content":"好问题，200M是无数次调优得来的经验值~ 128MB是HDFS的推荐大小，用在Spark的Task上，有些偏小了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622457730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028277,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","nickname":"Unknown element","note":"","ucode":"34A129800D0238","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548008,"discussion_content":"hive.exec.orc.default.block.size 的默认值是 256M","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642994126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351559,"user_name":"淡C","can_delete":false,"product_type":"c1","uid":2696647,"ip_address":"","ucode":"046DE6F5301044","user_header":"https://static001.geekbang.org/account/avatar/00/29/25/c7/edd74dfb.jpg","comment_is_top":false,"comment_ctime":1657898716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5952866012","product_id":100073401,"comment_content":"作为一个准大四的学生，一开始学习了spark基础之后，很荣幸遇到磊哥的两个spark专栏，这两个专栏让我对spark的理解有了全新的理解，起码让我在实习的时候可以正式员工battle，值得二刷，spark调优甚至值得三刷，争取二刷之后我也可以称自己为spark初学者了。","like_count":2},{"had_liked":false,"id":346208,"user_name":"会飞的企鹅","can_delete":false,"product_type":"c1","uid":2561034,"ip_address":"","ucode":"9C389F960CDA74","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/tYopaQ4kGyuG9GCmfUxicicReIZZqhBZNDv5Yp7AQ5B4lLS0mIicgYUsMfkcKAn27CQ1eAM7CQpibF7Rk7yP2uVEpw/132","comment_is_top":false,"comment_ctime":1652896343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652896343","product_id":100073401,"comment_content":"老师 我想问了：怎么评估spark所需的资源。需要多少cpu和mem？","like_count":0},{"had_liked":false,"id":338890,"user_name":"wayne","can_delete":false,"product_type":"c1","uid":1811813,"ip_address":"","ucode":"988E1F2F0B419A","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a5/65/898bc6c5.jpg","comment_is_top":false,"comment_ctime":1647777226,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1647777226","product_id":100073401,"comment_content":"老师，请问如何注册永久的pyspark<br>pandas_udf，比如使用sparksql 都可以自动加载","like_count":0,"discussions":[{"author":{"id":2379572,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zWLzhGrHubcMJnNFz0s0akeMpefNBVy2jic3rxetxHIjy1icPjJBXFQc78AW10icVN47BLrWicHcSm9MOfG38J2kKw/132","nickname":"Geek_278a2c","note":"","ucode":"7EC0366896F0E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572214,"discussion_content":"这个没办法，通过代码注册的udf都是temp的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652663472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309477,"user_name":"边边爱学习","can_delete":false,"product_type":"c1","uid":2126965,"ip_address":"","ucode":"3B091043B0E1EC","user_header":"","comment_is_top":false,"comment_ctime":1630154631,"is_pvip":false,"replies":[{"id":"112510","content":"shuffle read 时间长，可能只是个表象，至少有两种可能。一个是磁盘读取效率低，这个把spark.local.dir设置到SSD可能会有改善。另一个是，map端输出的就慢，也就是上个stage计算本身就慢，所以下一个stage的reduce task再去拉数据，就会“看上去”很慢。所以不妨看看上一个stage在干嘛，有哪些比较heavy的计算负载？<br><br>另外，这里面有没有失败重试，shuffle read过程中有没有频繁失败、然后又尝试，如果有的话，那就更复杂，就要看是哪些tasks失败，是不是有数据倾斜，等等。","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1630766733,"ip_address":"","comment_id":309477,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630154631","product_id":100073401,"comment_content":"磊哥，shuffle read blocked time 特别长，占据任务的70%以上的时间，应该尝试哪方面的优化呀","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525889,"discussion_content":"shuffle read 时间长，可能只是个表象，至少有两种可能。一个是磁盘读取效率低，这个把spark.local.dir设置到SSD可能会有改善。另一个是，map端输出的就慢，也就是上个stage计算本身就慢，所以下一个stage的reduce task再去拉数据，就会“看上去”很慢。所以不妨看看上一个stage在干嘛，有哪些比较heavy的计算负载？\n\n另外，这里面有没有失败重试，shuffle read过程中有没有频繁失败、然后又尝试，如果有的话，那就更复杂，就要看是哪些tasks失败，是不是有数据倾斜，等等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630766733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306259,"user_name":"felicity","can_delete":false,"product_type":"c1","uid":1691623,"ip_address":"","ucode":"B4D4088C5ABFC1","user_header":"https://static001.geekbang.org/account/avatar/00/19/cf/e7/4c2323ba.jpg","comment_is_top":false,"comment_ctime":1628476344,"is_pvip":false,"replies":[{"id":"111181","content":"版本是2.x的话，其实不妨关注下专栏中除了AQE的部分。因为3.x的话，其实主要AQE、DPP是亮点，把这两个拿掉，其余的优化手段和方法，都适用于2.x。更何况DPP本身坦白说还是有些鸡肋的，因此主要是AQE。<br><br>像大表关联小表、大表关联大表、内存利用率、CPU利用率，这些都是比较常规的调优手段。","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1628835829,"ip_address":"","comment_id":306259,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628476344","product_id":100073401,"comment_content":"老师你好，这里的例子是基于spark3.0的版本讲的，已经有了aqe，但是我们公司使用的spark版本还是2系列的，短时间内也不会升级到3，像aqe这种，2系列没有，能否讲解一下针对spark2版本的优化思路，谢谢","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524689,"discussion_content":"版本是2.x的话，其实不妨关注下专栏中除了AQE的部分。因为3.x的话，其实主要AQE、DPP是亮点，把这两个拿掉，其余的优化手段和方法，都适用于2.x。更何况DPP本身坦白说还是有些鸡肋的，因此主要是AQE。\n\n像大表关联小表、大表关联大表、内存利用率、CPU利用率，这些都是比较常规的调优手段。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628835829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295423,"user_name":"斯盖丸","can_delete":false,"product_type":"c1","uid":1168504,"ip_address":"","ucode":"B881D14B028F14","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/78/66b3f2a2.jpg","comment_is_top":false,"comment_ctime":1622426721,"is_pvip":false,"replies":[{"id":"107248","content":"前面回复过了哈，无数次实战得到的经验值~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1622457770,"ip_address":"","comment_id":295423,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622426721","product_id":100073401,"comment_content":"老师，请问数据分片200mb是最佳的，这个结论是如何得出的？因为我自己也试过几次发现确实如此，一旦分片数再大执行时间反而更慢。很好奇老师是怎么知道这个知识点的，我去stackoverflow上查过，没有什么收获","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521074,"discussion_content":"前面回复过了哈，无数次实战得到的经验值~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622457770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}