{"id":631382,"title":"03｜顺序表（下）：常用操作合集与复杂度分析","content":"<p>你好，我是王健伟。</p><p>上节课，我们实现了向顺序表中插入元素的操作。</p><p>这节课，我们继续探讨顺序表的不同操作，和上节课一样，先从抽象模型开始理解，分析元素在不同操作下可能会发生的情况以及我们需要注意到的细节，再去理解操作的实现的代码。通过时间复杂度的分析，为我们提供优化操作的思路。</p><p>我们先从顺序表中元素的删除操作开始说起。</p><h2>顺序表元素删除操作</h2><p>因为顺序表中每个数据元素在内存中是连续存储的，所以如果删除某个位置的元素，则需要依次把该位置后面的元素依次向前移动。如图5所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/7b/42/7b02c394566f4ed71a7695e247a34642.jpg?wh=1719x447\" alt=\"图片\" title=\"图5&nbsp; 顺序表删除元素10前后的元素位置对比图\"></p><p>在图5中，如果要将第3个位置的元素10删除，为了保证元素之间内存的连续性，需要将原来第4个位置以及第4个位置之后的所有元素依次向前移动1个位置，以保证元素之间的内存紧密相连。</p><p>那么这里就有几个需要考虑的问题了。</p><ul>\n<li>先从谁开始移动呢？</li>\n</ul><p>在移动3、4、5这几个元素时，需要先把元素3移动到第3个位置，再把元素4移动到第4个位置，最后把元素5移动到第5个位置，也就是先从数组中要删除元素位置的后面一个位置的元素开始依次向前移动，且不可先把元素5移动到第5个位置，因为这样会把本来在第5个位置的元素4直接覆盖掉。</p><ul>\n<li>另一方面，所要删除的位置必须有元素才可以删除。</li>\n</ul><!-- [[[read_end]]] --><p>理清头绪之后，我们看一下删除操作ListDelete的实现代码。</p><pre><code class=\"language-plain\">//删除第i个位置的元素\ntemplate &lt; typename T&gt;\nbool SeqList&lt;T&gt;::ListDelete(int i)\n{\n\tif (m_length &lt; 1)\n\t{\n\t\tcout &lt;&lt; \"当前顺序表为空，不能删除任何数据!\" &lt;&lt; endl;\n\t\treturn false;\n\t}\n\tif (i &lt; 1 || i &gt; m_length)\n\t{&nbsp;\n\t\tcout &lt;&lt; \"删除的位置\" &lt;&lt; i &lt;&lt; \"不合法，合法的位置是1到\" &lt;&lt; m_length &lt;&lt; \"之间!\" &lt;&lt; endl;\n\t\treturn false;\n\t}\t\t\n\tcout &lt;&lt; \"成功删除位置为\" &lt;&lt; i &lt;&lt; \"的元素，该元素的值为\" &lt;&lt; m_data[i - 1] &lt;&lt; \"!\" &lt;&lt; endl;\n\t//从数组中第i+1个位置开始向后遍历所有元素，分别将这些位置中原有的元素向前移动一个位置\n\tfor (int j = i ; j &lt; m_length; ++j)\n\t{\n\t\tm_data[j-1] = m_data[j];\n\t}\n\tm_length--;&nbsp; &nbsp; &nbsp; &nbsp;//实际表长-1\n\treturn true;\n\t}\n</code></pre><p>在main主函数中，继续增加代码测试元素删除操作。</p><pre><code class=\"language-plain\">seqobj.ListDelete(1);\n</code></pre><p>新增代码的执行结果如下。</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/32/d992dc4d8a71a3aedcff508a37ddca32.jpeg?wh=1723x96\" alt=\"图片\"></p><p>分析一下ListDelete的时间复杂度，只需要关注for循环的执行次数与问题规模n的关系，问题规模n在这里指的是顺序表的当前长度m_length。</p><ul>\n<li><strong>最好情况时间复杂度</strong></li>\n</ul><p>如果要删除顺序表尾部的元素，则其他已有的顺序表中元素都不需要移动，for循环一次都不会执行，这是最好情况时间复杂度O(1)。</p><ul>\n<li><strong>最坏情况时间复杂度</strong></li>\n</ul><p>如果删除顺序表头部的元素，则其他已有的顺序表中所有元素<span class=\"reference\">（n-1个）</span>都需要依次前移，for循环执行的次数就是n-1次，这是最坏情况时间复杂度O(n)。</p><ul>\n<li><strong>平均情况时间复杂度</strong></li>\n</ul><p>如果假设删除任何一个位置元素的概率相同，那么删除位置1，2，……，m_length的概率就都为$\\frac{1}{n}$，如果删除第一个位置的元素，则需要把后面n-1个元素依次前移，也就是for循环会执行n-1次，如果删除第二个位置的元素，则需要把后面n-2个元素依次前移，也就是for循环会执行n-2次……以此类推，如果删除最后一个位置<span class=\"reference\">（尾部）</span>的元素，则for循环会执行0次。</p><p>把每种情况下循环的次数累加起来，再除以n，就得到了数组中元素前移次数的平均值<span class=\"reference\">（平均循环次数）</span>$\\frac{n-1}{2}$。又因为大O时间复杂度表示法中，系数、常量可以忽略掉，所以平均情况时间复杂度为O(n)。</p><p><img src=\"https://static001.geekbang.org/resource/image/24/f2/240c003a3c3b763ab8e6b76435d7fef2.jpeg?wh=1704x675\" alt=\"图片\"></p><p>你会发现，时间开销主要源于元素的移动。</p><p>我们算了这么多的时间复杂度，有什么用呢？</p><p>思考一下，如果是连续删除顺序表中几个紧挨着的元素，那么每删除其中一个元素就会做一次剩余元素的移动操作，效率显然比较低。</p><p>所以，我们可以<strong>将几个连续的元素全部删除后，一次性完成剩余元素的移动操作，以此提高程序的执行效率。</strong></p><h2>顺序表元素获取操作</h2><p>关于元素获取操作，我们分为两种情况来讨论：按位置获取，以及按元素值获取。</p><p>首先看一下如何<strong>按位置获取</strong>顺序表中元素值，下面是具体代码。</p><pre><code class=\"language-plain\">//获得第i个位置的元素值\ntemplate&lt;class T&gt;\nbool SeqList&lt;T&gt;::GetElem(int i, T&amp; e) //参数e是引用类型参数，确保将该值带回调用者\n{\n\tif (m_length &lt; 1)\n\t{\n\t\tcout &lt;&lt; \"当前顺序表为空，不能获取任何数据!\" &lt;&lt; endl;\n\t\treturn false;\n\t}\n\t\t\n\tif (i &lt; 1 || i &gt; m_length)\n\t{\n\t\tcout &lt;&lt; \"获取元素的位置\" &lt;&lt; i &lt;&lt; \"不合法，合法的位置是1到\" &lt;&lt; m_length &lt;&lt; \"之间!\" &lt;&lt; endl;\n\t\treturn false;\n\t}\n\te = m_data[i-1];\n\tcout &lt;&lt; \"成功获取位置为\" &lt;&lt; i &lt;&lt; \"的元素，该元素的值为\" &lt;&lt; m_data[i - 1] &lt;&lt; \"!\" &lt;&lt; endl;\n\treturn true;\n\t}\n</code></pre><p>在main主函数中，继续增加如下代码测试按位置进行元素获取操作。</p><pre><code class=\"language-plain\">int eval = 0;\nseqobj.GetElem(1, eval); //如果GetElem()返回true，则eval中保存着获取到的元素值\n</code></pre><p>新增代码的执行结果如下。</p><p><img src=\"https://static001.geekbang.org/resource/image/7c/a6/7c868e6f26fb921a2c5b173b8daacba6.jpeg?wh=1452x94\" alt=\"图片\"></p><p>显然，按位置获取顺序表元素操作的时间复杂度为O(1)。</p><p>再来看一看<strong>按元素值查找</strong>其在顺序表中第一次出现的位置的代码。</p><pre><code class=\"language-plain\">//按元素值查找其在顺序表中第一次出现的位置\ntemplate&lt;class T&gt;\nint SeqList&lt;T&gt;::LocateElem(const T&amp; e)\n{\n\tfor (int i = 0; i &lt; m_length; ++i)\n\t{\n\t\tif (m_data[i] == e)\n\t\t{&nbsp;\n\t\t\tcout &lt;&lt; \"值为\" &lt;&lt; e &lt;&lt; \"的元素在顺序表中第一次出现的位置为\" &lt;&lt; i+1 &lt;&lt; \"!\" &lt;&lt; endl;\n\t\t\treturn i + 1;&nbsp; //返回的位置应该用数组下标值+1\n\t\t}\n\t}\n\tcout &lt;&lt; \"值为\" &lt;&lt; e &lt;&lt; \"的元素在顺序表中没有找到!\" &lt;&lt; endl;\n\treturn -1;&nbsp; //返回-1表示查找失败\n\t}\n</code></pre><p>在main主函数中，继续增加如下代码测试按元素值查找其在顺序表中第一次出现的位置。</p><pre><code class=\"language-plain\">int findvalue = 10; //在顺序表中要找的元素值\nseqobj.LocateElem(findvalue);\n</code></pre><p>新增代码的执行结果如下。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/d0/e2faa799d1ca4d31a2eab53ef824d5d0.jpeg?wh=1478x132\" alt=\"图片\"></p><p>同样，我们分析一下LocateElem的时间复杂度。这里只需要关注for循环的执行次数与问题规模n的关系，问题规模n在这里指的是顺序表的当前长度m_length。</p><ul>\n<li>如果要查找的元素值正好位于顺序表头部，则for循环只需要执行一次，这是最好情况时间复杂度O(1)。</li>\n<li>如果要查找的元素值正好位于顺序表尾部，则for循环需要执行n次，这是最坏情况时间复杂度O(n)。</li>\n<li>如果假设要查找的元素出现在任何一个位置的概率相同，因为顺序表中有n个元素，也就是出现在任何一个位置的概率都为$\\frac{1}{n}$，如果要查找的元素值位于第一个位置，则for循环会执行一次，如果要查找的元素位于第二个位置，则for循环会执行2次…，以此类推，如果要查找的元素位于最后一个位置，则for循环会执行n次，把每种情况下循环的次数累加起来，再除以n，就得到了查找元素次数的平均值$\\frac{n+1}{2}$。因为大O时间复杂度表示法中，系数、常量可以忽略掉，所以平均情况时间复杂度为O(n)。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/0c/cc/0c5c6530eaeaf68e1a392bd7c6yy32cc.jpeg?wh=1742x535\" alt=\"图片\"></p><h2>顺序表元素的其他常用操作</h2><p>目前为止，我们已经了解了顺序表基本框架的搭建，元素的插入、删除、获取操作，除此之外，顺序表还有其他一些常用操作，比如输出所有元素、获取顺序表长度、翻转顺序表等等。我们来看一下它们的具体实现。</p><p>1.&nbsp;输出顺序表中的所有元素DispList</p><pre><code class=\"language-plain\">//输出顺序表中的所有元素，时间复杂度为O(n)\ntemplate&lt;class T&gt;\nvoid SeqList&lt;T&gt;::DispList()\n{\n\tfor (int i = 0; i &lt; m_length; ++i)\n\t{\n\t\tcout &lt;&lt; m_data[i] &lt;&lt; \" \";&nbsp; //每个数据之间以空格分隔\n\t}\n\t\tcout &lt;&lt; endl; //换行\n\t}\n</code></pre><ol start=\"2\">\n<li>获取顺序表的长度ListLength</li>\n</ol><pre><code class=\"language-plain\">//获取顺序表的长度，时间复杂度为O(1)\ntemplate&lt;class T&gt;\nint SeqList&lt;T&gt;::ListLength()\n{\n\treturn m_length;\n}\n</code></pre><p>3.&nbsp;翻转顺序表ReverseList</p><p>所谓翻转顺序表，就是把顺序表中元素的排列顺序反过来，比如原来存放的元素是1、2、3、4、5，那么翻转后存放的元素就是5、4、3、2、1。如图6所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/67/87/67342c8fb2514b7092ea6ffbd4336c87.jpg?wh=1719x552\" alt=\"图片\" title=\"图6&nbsp; 顺序表中元素翻转前后对比图\"></p><p>解决这种问题并不难，在图6中，只需要将第1个元素和第5个<span class=\"reference\">（最后一个）</span>元素交换位置，第2个元素跟第4个<span class=\"reference\">（倒数第二个）</span>元素交换位置，第3个元素保持不动即可。</p><pre><code class=\"language-plain\">//翻转顺序表，时间复杂度为O(n)\ntemplate&lt;class T&gt;\nvoid SeqList&lt;T&gt;::ReverseList()\n{\n\tif (m_length &lt;= 1)\n\t{\n\t\t//如果顺序表中没有元素或者只有一个元素，那么就不用做任何操作\n\t\treturn;\n\t}\n\tT temp;\n\tfor (int i = 0; i &lt; m_length / 2; ++i)\n\t{\n\t\ttemp = m_data[i];\n\t\tm_data[i] = m_data[m_length - i - 1];\n\t\tm_data[m_length - i - 1] = temp;\n\t}\n\t}\n</code></pre><p>另外，我们还可以扩展出其他常用操作，相关代码你可以自行实现。</p><ul>\n<li>LocateElem和ListDelete配合可以实现按值删除顺序表中指定元素。</li>\n<li>如果ListLength返回0就可以确定顺序表为空或者专门实现一个判断顺序表是否为空的成员函数。</li>\n<li>在顺序表头部或者尾部插入或者删除元素的成员函数。</li>\n</ul><p>在main主函数中，继续增加代码对上述已经实现的函数进行测试。</p><pre><code class=\"language-plain\">seqobj.ListInsert(2, 100);\nseqobj.DispList();\ncout &lt;&lt; seqobj.ListLength() &lt;&lt; endl;\nseqobj.ReverseList();\n\tseqobj.DispList();\n</code></pre><h2>顺序表的扩展操作</h2><p>最后，我们说一下顺序表的扩展操作。</p><p>扩展是什么意思呢？比如在前面针对插入函数ListInsert的代码实现中，如果顺序表已经存满了数据，那就不允许再插入新数据了，这造成了一些使用中的不便，这个时候，我们当然希望顺序表能够自动扩容。</p><p>具体的实现思路，就是重新new一块比原顺序表所需内存更大一些的内存以便容纳更多的元素，然后把原来内存中的元素拷贝到新内存<span class=\"reference\">（这一步动作如果元素很多将很耗费时间）</span>并把原内存释放掉<span class=\"reference\">（当然，这样做也是比较影响程序执行效率的）</span>。为此，引入成员函数IncreaseSize，代码我也放在了下面。</p><pre><code class=\"language-plain\">//当顺序表存满数据后可以调用此函数为顺序表扩容，时间复杂度为O(n)\ntemplate&lt;class T&gt;\nvoid SeqList&lt;T&gt;::IncreaseSize()\n{\n\tT* p = m_data;\n\tm_data = new T[m_maxsize + IncSize]; //重新为顺序表分配更大的内存空间\t\n\tfor (int i = 0; i &lt; m_length; i++)\n\t{\n\t\tm_data[i] = p[i];&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //将数据复制到新区域\n\t}\n\tm_maxsize = m_maxsize + IncSize;&nbsp; &nbsp; &nbsp;//顺序表最大长度增加IncSize\n\tdelete[] p;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //释放原来的内存空间\n\t}\n</code></pre><p>现在，就可以修改插入函数ListInsert的代码，以达到当顺序表满之后再插入数据时能够自动扩容的目的，你可以看一下原ListInsert代码的第一个if判断语句<span class=\"reference\">（判断顺序表是否已满）</span>内容。</p><pre><code class=\"language-plain\">//如果顺序表已经存满了数据，则不允许再插入新数据了\nif (m_length &gt;= m_maxsize)\n{\n\tcout &lt;&lt; \"顺序表已满，不能再进行插入操作了!\" &lt;&lt; endl;\n\treturn false;\n\t}\n</code></pre><p>只需要对上述if判断语句进行简单修改，其他代码不变，下面是修改后的代码。</p><pre><code class=\"language-plain\">//如果顺序表已经存满了数据，则不允许再插入新数据了\nif (m_length &gt;= m_maxsize)\n{\n\t//cout &lt;&lt; \"顺序表已满，不能再进行插入操作了!\" &lt;&lt; endl;\n\t//return false;\n\tIncreaseSize();\n}\n</code></pre><p>在main主函数中，继续增加如下代码对上述函数进行测试就可以了。</p><pre><code class=\"language-plain\">for (int i = 3; i &lt; 30; ++i)\n{\n\tseqobj.ListInsert(i, i*2);\n}\n\tseqobj.DispList();\n</code></pre><h2><strong>小结</strong></h2><p>这节课我们继续通过代码详细实现了顺序表的元素删除、获取操作以及各种其他常用操作，包括输出顺序表中的所有元素、获取顺序表的长度、翻转顺序表。在顺序表扩展操作这个话题中，用代码实现了向顺序表插入数据时如果发现顺序表已满如何进行顺序表的自动扩容。</p><p>这里可以总结一下顺序表的几个重要的特点。</p><ul>\n<li>通过下标<strong>随机访问</strong>数组元素的时间复杂度仅为<strong>O(1)</strong>。</li>\n<li>存储的数据紧凑，表中的元素在内存中紧密相连，无须为维持表中元素之间的前后关系而增加额外的存储空间<span class=\"reference\">（后面学习到链表时会看到增加额外存储空间来维持表中元素前后关系的情形）</span>。</li>\n<li><strong>插入和删除操作</strong>可能会<strong>移动大量元素</strong>导致这两个动作<strong>效率不高</strong>。</li>\n<li>需要大片<strong>连续</strong>的内存空间来存储数据。</li>\n<li>动态分配内存的方式实现的顺序表在扩展顺序表容量时扩展的空间大小不好确定，分配太多内存容易造成浪费，分配太少内存就会导致new和delete被频繁调用，影响程序执行效率。而且扩展顺序表容量操作的时间复杂度也比较高。</li>\n</ul><p>正如我们所见，顺序表要求内存中数据连续存储，这既带来了定位元素的便利，同时也拖慢了插入和删除元素的速度。</p><p>值得说明的是，对于多数需要使用顺序表的场合，直接使用标准模板库中的vector容器即可，其丰富的接口会给开发带来更多的便利。</p><p>如果是对于性能要求极其严苛的底层开发，而且通过测试确定了自己编写的代码执行效率比vector容器更高，也可以利用这节讲解的知识自行实现顺序表。</p><h2><strong>课后思考</strong></h2><p>在STL<span class=\"reference\">（标准模板库）</span>中，提供了一个基于数组的容器vector，你知道vector容器存储数据是什么样子的吗？vector容器的优缺点和使用场合是什么呢？此外，vector容器中的reserve方法、capacity方法是用来做什么的呢？</p><p>欢迎你在留言区和我互动。如果觉得有所收获，也可以分享给更多的朋友一起学习。我们下一讲见！</p>","neighbors":{"left":{"article_title":"02｜顺序表（上）：如何实现快速地随机访问？","id":630683},"right":{"article_title":"04｜单链表：如何通过指针提升插入、删除数据的速度？","id":631872}},"comments":[{"had_liked":false,"id":368803,"user_name":"阿阳","can_delete":false,"product_type":"c1","uid":1165817,"ip_address":"江苏","ucode":"20A35FB86B1C5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/f9/39492855.jpg","comment_is_top":false,"comment_ctime":1676730027,"is_pvip":false,"replies":[{"id":134320,"content":"没区别，在模板定义开头这个位置，class和typename可互换，当然，其他位置class 和typename一般是不互换的。","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1676769644,"ip_address":"广东","comment_id":368803,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"老师，在这节课中，定义模板函数前面使用template&lt;class T&gt;，而上一节课中使用的是template &lt; typename T&gt;。请问这两种方法有什么联系和区别吗？","like_count":3,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605579,"discussion_content":"没区别，在模板定义开头这个位置，class和typename可互换，当然，其他位置class 和typename一般是不互换的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676769644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368705,"user_name":"徐石头","can_delete":false,"product_type":"c1","uid":1035885,"ip_address":"湖南","ucode":"D8FA8A64FB7E33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/6d/530df0dd.jpg","comment_is_top":false,"comment_ctime":1676603759,"is_pvip":true,"replies":[{"id":134297,"content":"我懂你的意思，但作为传播知识的人，把知识简单讲是他的责任。我们用new扩容一下，总比我们给学友们介绍容器的size,capacity,reserve,是什么含义要简单直观得多，在我看来，很多时候讲的少就是讲的多。","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1676629462,"ip_address":"广东","comment_id":368705,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"vector跟Java的ArrayList、Go的slice作用类似。\n以go的slice举例，它是在静态数组基础上增加扩容机制后的动态数组，存储的数据在静态数组上。由3个部分组成，data 是指向数组的指针;len 是当前slice的长度；cap 是当前slice的容量。\n优点是自动扩容机制让开发者不用手动管理内存，在业务开发中不确定数据数量的时候用slice。\n缺点是如果存储的数据很多，要经常扩容，每次扩容需要 1.开辟更大内存空间，2.移动所有元素到新数组，3.释放旧数组空间内存。扩容对性能影响比较大，扩容次数的时间复杂度是O（logn），所以我们在初始化的时候如果元素数量是确定的就要指定容量，避免扩容，优化性能。\nvector 容器中的 reserve 方法设置容量大小，capacity 方法获取当前vector 容量","like_count":2,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605448,"discussion_content":"我懂你的意思，但作为传播知识的人，把知识简单讲是他的责任。我们用new扩容一下，总比我们给学友们介绍容器的size,capacity,reserve,是什么含义要简单直观得多，在我看来，很多时候讲的少就是讲的多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676629463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370370,"user_name":"ikel","can_delete":false,"product_type":"c1","uid":1009002,"ip_address":"上海","ucode":"1D5CE7803C1C2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/6a/be36c108.jpg","comment_is_top":false,"comment_ctime":1678761792,"is_pvip":false,"replies":[{"id":135081,"content":"vector容器用起来简单，但误用也挺影响效率。reverse 理解为new，可以的。但capacity我记得返回的是new出来的大小。size才相当于m_length，capacity相当于m_maxsize。","user_name":"作者回复","user_name_real":"作者","uid":1104356,"ctime":1678840791,"ip_address":"广东","comment_id":370370,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"vector 容器存储数据类似于数组，reserve 方法相当于new，capacity相当于m_length","like_count":1,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609106,"discussion_content":"vector容器用起来简单，但误用也挺影响效率。reverse 理解为new，可以的。但capacity我记得返回的是new出来的大小。size才相当于m_length，capacity相当于m_maxsize。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678840791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":392797,"user_name":"Fang","can_delete":false,"product_type":"c1","uid":3540228,"ip_address":"上海","ucode":"6F026565387364","user_header":"https://static001.geekbang.org/account/avatar/00/36/05/04/8deca125.jpg","comment_is_top":false,"comment_ctime":1721805461,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"还是最好在尾部插，减少复杂度","like_count":0}]}