{"id":468066,"title":"46｜软件架构：如何用Rust架构复杂系统？","content":"<p>你好，我是陈天。</p><p>对一个软件系统来说，不同部门关心的侧重点不同。产品、运营和销售部门关心产品的功能，测试部门关心产品的缺陷，工程部门除了开发功能、解决缺陷外，还要不断地维护和优化系统的架构，减少之前遗留的技术债。</p><p>从长远看，缺陷和技术债对软件系统是负面的作用，而功能和架构对软件系统是正面的作用。</p><p>从是否对用户可见来说，相比可见的功能和缺陷，架构和技术债是不可见的，它们往往会被公司的决策层以各种理由忽视，尤其，当他们的 KPI / OKR 上都布满了急功近利的数字，每个季度或者每半个财年都是生死战（win or go home）的时候，只要能实现功能性的中短期目标，他们什么都可以牺牲。<strong>不可见并且很难带来直接收益的架构设计，往往是最先被牺牲掉的</strong>。</p><p>但架构以及架构相关的工作会带来长期的回报。</p><p>因为平时我们往系统里添加新的功能，会不可避免地增加系统的缺陷，潜在引入新的技术债，以及扰乱原本稳定的架构。这是一个熵增的过程。缺陷会拖累功能的表现，进一步恶化系统中的技术债；而技术债会延缓新功能的引入，放大已有的和未来的缺陷，并破坏现有的架构。这样一直持续下去，整个系统会进入到一个下降通道，直到无以为继。</p><p>为了避免这样的事情发生，<strong>我们需要通过对架构进行维护性的工作，来减少缺陷，修复技术债，改善功能，最终将整个系统拉回到上升通道</strong>。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/4b/61/4b6463f536428989d418aefa38ef3561.jpg?wh=1920x1223\" alt=\"图片\"></p><p>在我看来，软件系统是架构、功能、缺陷，以及技术债之间共同作用，互相拉扯的一个结果。</p><p>在一个项目的初期，为了快速达到产品和市场的契合（product market fit），引入技术债来最大程度提高构建的速度，是最佳选择。但这并不意味着我们可以放弃架构的设计，埋头码字。</p><p>过去二十年时间，敏捷宣言（Agile Manifesto）和精益创业（Lean startup）对软件社区最大的负面影响就是，一大堆外行或者并没有深刻理解软件工程的从业者，过分追求速度，过度曲解 MVP（Minimum Viable Product），而忽视了从起点出发前，必不可少的架构和设计功夫，导致大部分技术债实际上是架构和设计阶段的债务。</p><p>但产品初期，在方向并不明朗的情况下，我们如何架构系统呢？</p><p>类似瀑布模型那样的迭代方式，在产品的初期花费大量的精力做架构和设计，往往会导致过度设计，引入不必要的麻烦和可能永远用不上的“精妙”结构；但过分追求敏捷，干了再说，又会让技术债很快就积累到一个难以为继的地步。</p><p>所以，对于这样的场景，我们应该采用<strong>渐进式的架构设计，从 MVP 的需求中寻找架构的核心要素，构建一个原始但完整的结构（primitive whole），然后围绕着核心要素演进。</strong>比如（图片来源：<a href=\"https://commons.wikimedia.org/wiki/File:From_minimum_viable_product_to_more_complex_product.png\">维基百科</a>）：</p><p><img src=\"https://static001.geekbang.org/resource/image/0e/91/0eb74319e30e7ae164f94ba43a5bbd91.png?wh=1060x216\" alt=\"图片\"></p><p>今天我们就来讲一讲怎么考虑架构设计，以及如何用Rust构建出一些典型的架构风格，希望你在学完这一讲最大的体会是：做任何开发之前，养成习惯，首先要做必要的架构和设计。</p><h2>如何考虑架构设计？</h2><p>架构设计是一个非常广泛的概念，很难一言以蔽之。在《Fundamentals of Software Architecture》一书中，作者从四个维度来探讨架构，分别是：</p><ul>\n<li>Structure：架构的风格和结构，比如 MVVM、微服务</li>\n<li>Characteristics：架构的主要指标，比如可伸缩性、容错性和性能</li>\n<li>Decisions：架构的硬性规则，比如服务调用<strong>只能</strong>通过接口完成</li>\n<li>Design Principles：架构的设计原则，比如<strong>优先</strong>使用消息通讯</li>\n</ul><p>可以对照下面这张图理解，我们一个个说（来源：<a href=\"https://book.douban.com/subject/34464806/\">Fundamentals of Software Architecture</a>）：</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/ca/dd64c19e17dfbe45d922c3d1cb6495ca.png?wh=1420x1104\" alt=\"图片\"></p><h3>Structure架构的风格</h3><p>首先是架构的风格。实战课中我们一直在迭代的 KV server，就采取了分层的结构，把网络层、业务层和存储层分隔开。</p><p><img src=\"https://static001.geekbang.org/resource/image/82/2c/82da823b4eb16935fdeyy727e3b3262c.jpg?wh=1920x1145\" alt=\"图片\"></p><p>虽然最开始网络层长什么样子我们并不清楚，但这种分层使得后来不断迭代网络层的时候，不管是加入 TLS 的支持，还是使用 yamux 做多路复用，都不会影响到业务层。</p><p>一个复杂的大型系统往往可以使用分治的原则处理。之前展示过这样的图，一个互联网应用的最基本、最普遍的结构：</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/db/a774a2ccd5a960d35f4b44248d2180db.png?wh=1482x807\" alt=\"图片\"></p><p>从业务的大方向上，我们可以进行分层处理，每层又可以选择不同的结构，比如微服务结构、事件驱动结构、管道结构等等，然后拆分出来的每个组件内部又可以用分层，比如把数据层、业务逻辑层和接口层分离，这样一层层延展下去，直到拆分出来的结果可以以“天”为单位执行。</p><p>在执行的过程中，我们可以选取跟 MVP 有关的路径进行开发，并在这个过程中不断审视架构的设计，做相应的修改。你如果回顾一下 KV server 的演进过程，从最初构造到目前这个几乎成型的版本，就可以感受到一开始有一个完整但原始的结构，然后围绕着核心演进的重要性。</p><h3>Characteristics架构的主要指标</h3><p>再来看架构的主要指标。就像图中展示的那样，一个系统有非常多的指标来衡量其成功，包括并不限于：高性能、可用性、可靠性、可测性、可伸缩性、安全性、灵活性、容错性、自我修复性、可读性等等。</p><p><img src=\"https://static001.geekbang.org/resource/image/c6/80/c66069481e9319d9f0dc74f5107c3180.png?wh=710x552\" alt=\"图片\"></p><p>不过，这些指标并不是平等的关系，不同的系统会有不同的优先级。</p><p>对于 KV server 来说，我们关心系统的性能 / 安全性 / 可测性，所以使用了最基本的 in-memory hashmap 来保证查询性能、使用 TCP + yamux 来保证网络性能、使用 channel  和 dashmap 来保证并发性能，以及使用 TLS 来保证安全性。同时，一直注重接口的清晰和可测试性。</p><p>可以看到，一旦我们做出了架构指标上的决定，那么进一步的设计会优先考虑这些指标的需求。</p><h3>Decisions架构的硬性规则</h3><p>在架构设计的过程中，引入硬性约束或者原则非常重要。它就像架构的“基本法”，不可触碰。<strong>很多时候，当你引入了某个结构，你也就引入了这个结构所带来的的约束</strong>，比如微服务结构，它的约束就是：服务间的一切访问只能通过公开的接口来完成，任何服务间不能有私下的约定。</p><p>这个现在看起来很容易理解的决定，在差不多二十年前，是振聋发聩的呐喊。2002 年，亚马逊还是一家小公司，贝佐斯还离首富差了几个比尔盖茨。作为一个不是特别懂技术的 MBA，他撰写了一个划时代的备忘录，并在亚马逊强制执行，这个备忘录很简单，看它的原文：</p><blockquote>\n<ol>\n<li>All teams will henceforth expose their data and functionality through service interfaces.</li>\n<li>Teams must communicate with each other through these interfaces.</li>\n<li>There will be no other form of interprocess communication allowed: no direct linking, no direct reads of another team’s data store, no shared-memory model, no back-doors whatsoever. The only communication allowed is via service interface calls over the network.</li>\n<li>It doesn’t matter what technology they use. HTTP, Corba, Pubsub, custom protocols — doesn’t matter.</li>\n<li>All service interfaces, without exception, must be designed from the ground up to be externalizable. That is to say, the team must plan and design to be able to expose the interface to developers in the outside world. No exceptions.</li>\n<li>Anyone who doesn’t do this will be fired.</li>\n<li>Thank you; have a nice day!</li>\n</ol>\n</blockquote><p>这个备忘录促成了 AWS 这个庞大的云服务帝国的诞生。贝佐斯对架构的视野，至今还让我啧啧称奇。他精准地“看”到了云服务的未来，并以架构的硬性约束来促成三个要点：独立的服务、服务间只能通过接口调用、服务的接口要能够被外部开发者调用。</p><h3>Design Principles架构的设计原则</h3><p>最后，我们简单说说架构的设计原则。和架构的硬性约束不同的是，设计原则更多是推荐做法，而非不可触碰的雷区。我们在构建系统的时候，要留有余地，这样在开发和迭代的过程中，才能根据情况选择合适的设计。</p><p>比如对于 KV server 来说，推荐使用 TCP / yamux 来处理网络，但并不是说 gRPC 甚至 QUIC 就不能使用；推荐用二进制的 protobuf 来在客户端/服务器传输数据，但在某些场景下，如果基于文本的传输方式，或者非 protobuf 的二进制传输方式（比如 flatbuffer）更合适，那么未来完全可以替换这部分的设计。</p><h2>如何用 Rust 构建典型的架构风格？</h2><p>再复习一下刚才聊的架构设计的四个方面：</p><ul>\n<li>Structure架构的风格和结构</li>\n<li>Characteristics架构的主要指标</li>\n<li>Decisions架构的硬性规则</li>\n<li>Design Principles架构的设计原则</li>\n</ul><p>其中后三点架构的指标、硬性规定以及设计原则，和具体项目的关联度很大，我们并没有模式化的工具来套用它。但架构风格是有很多固定的套路的。这些套路，往往是在日积月累的软件开发实践中，逐渐形成的。</p><p>目前比较普遍使用的架构风格有：分层结构、流水线结构、插件结构、微服务结构、事件驱动结构等。</p><p>微服务结构相信大家比较熟悉，这里就不赘述；事件驱动结构可以通过 channel 来实现，我们在KV server 中构建的 pub/sub 就有事件驱动的影子，但一个高性能的事件驱动结构需要第三方的消息队列来提供支持，比如 <a href=\"https://kafka.apache.org/\">kafka</a>、<a href=\"https://nats.io/\">nats</a> 等，你可以自己去看它们各自推荐的事件驱动模型。</p><p>不过不管你用何种分布式的架构，最终，每个服务内部的架构还是会使用<strong>分层结构、流水线结构和插件结构</strong>，我们这里就简单讲讲这三者。</p><h3>分层结构</h3><p>开头已经谈到了分层，这是最朴素，也是最实用的架构风格。软件行业的一句<a href=\"https://en.wikipedia.org/wiki/Indirection\">至理名言</a>是：</p><blockquote>\n<p>All problems in computer science can be solved by another level of indirection.</p>\n</blockquote><p>这种使用分层来漂亮地解决问题的思路，贯穿整个软件行业。</p><p>操作系统是应用程序和硬件的中间层；虚拟内存是线性内存和物理内存的中间层；虚拟机是操作系统和裸机的中间层；容器是应用程序和操作系统的中间层；ISO 的 OSI 模型，把网络划分为 7 层，这让我们至今还受益于几十年前就设计出来的网络结构。</p><p>分层，意味着明确每一层的职责范围以及层与层之间接口。一旦我们有明晰的层级划分，以及硬性规定层与层之间只能通过公开接口调用，且不能跨层调用，那么，系统就具备了很强的灵活性，某层的内部实现可以完全被不同的实现来替换，而不必担心上下游受到影响。</p><p><strong>在 Rust 下，我们可以用 trait 来进行接口的定义，通过接口来分层</strong>。就像 KV server 展现的那样，把网络层和业务层分开，网络层或者业务层各自的迭代不会影响对方的行为。</p><h3>流水线结构</h3><p>大部分系统的处理流程都可以用流水线结构来表述。我们可以把处理流程中的要素构建成一个个接口一致、功能单一的组件，然后根据不同的输入，来选择合适的组件，将它们组织为一个完整的流水线，然后再依次执行。</p><p>这样做的好处是，在执行过程中，我们不需要对输入进行判断来决定执行什么代码，要执行的代码已经包含在流水线之中。而流水线的构建，在编译期、加载期就可以预处理好最常见的流程（fast path），只有不那么常见的输入，才需要在运行时构建合适的流水线（slow path）。一旦一个新的流水线被构建出来，还可以缓存它，下一次就可以直接执行（fast path）。</p><p>我们看一个流水线处理的典型结构：</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/44/3ce79a54e9e70ac9bb39b85c43aa9b44.jpg?wh=1920x1028\" alt=\"图片\"></p><p>这种结构在实战中非常有用，比如 Elixir 下处理网络流程的 <a href=\"https://hexdocs.pm/plug/readme.html\">Plug</a>。下图是我之前在处理区块链的 TX 时设计的流水线结构：</p><p><img src=\"https://static001.geekbang.org/resource/image/6f/23/6f83ae231406885cd184235658bd7623.png?wh=1474x938\" alt=\"图片\"></p><p><strong>流水线可以是架构级的宏观流水线，也可以是函数级的微观流水线。它最大的好处是通过组合不同的基本功能，完成各种各样复杂多变的需求</strong>。就像乐高积木，最基本的积木组件是有限的，但我们可以创建出无穷多的组合。</p><p>使用 Rust 创建流水线结构并不复杂，你可以利用 enum / trait 构造。比如下面的实例（<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7a08a1385214271d393399e638caa36e\">代码</a>）：</p><pre><code class=\"language-rust\">use std::fmt;\n\npub use async_trait::async_trait;\npub type BoxedError = Box&lt;dyn std::error::Error&gt;;\n\n/// rerun 超过 5 次，就视为失败\nconst MAX_RERUN: usize = 5;\n\n/// plug 执行的结果\n#[must_use]\npub enum PlugResult&lt;Ctx&gt; {\n    Continue,\n    Rerun,\n    Terminate,\n    NewPipe(Vec&lt;Box&lt;dyn Plug&lt;Ctx&gt;&gt;&gt;),\n    Err(BoxedError),\n}\n\n/// plug trait，任何 pipeline 中的组件需要实现这个 trait\n#[async_trait]\npub trait Plug&lt;Ctx&gt;: fmt::Display {\n    async fn call(&amp;self, ctx: &amp;mut Ctx) -&gt; PlugResult&lt;Ctx&gt;;\n}\n\n/// pipeline 结构\n#[derive(Default)]\npub struct Pipeline&lt;Ctx&gt; {\n    plugs: Vec&lt;Box&lt;dyn Plug&lt;Ctx&gt;&gt;&gt;,\n    pos: usize,\n    rerun: usize,\n    executed: Vec&lt;String&gt;,\n}\n\nimpl&lt;Ctx&gt; Pipeline&lt;Ctx&gt; {\n    /// 创建一个新的 pipeline\n    pub fn new(plugs: Vec&lt;Box&lt;dyn Plug&lt;Ctx&gt;&gt;&gt;) -&gt; Self {\n        Self {\n            plugs,\n            pos: 0,\n            rerun: 0,\n            executed: Vec::with_capacity(16),\n        }\n    }\n\n    /// 执行整个 pipeline，要么执行完毕，要么出错\n    pub async fn execute(&amp;mut self, ctx: &amp;mut Ctx) -&gt; Result&lt;(), BoxedError&gt; {\n        while self.pos &lt; self.plugs.len() {\n            self.add_execution_log();\n            let plug = &amp;self.plugs[self.pos];\n\n            match plug.call(ctx).await {\n                PlugResult::Continue =&gt; {\n                    self.pos += 1;\n                    self.rerun = 0;\n                }\n                PlugResult::Rerun =&gt; {\n                    // pos 不往前走，重新执行现有组件，rerun 开始累加\n                    self.rerun += 1;\n                }\n                PlugResult::Terminate =&gt; {\n                    break;\n                }\n                PlugResult::NewPipe(v) =&gt; {\n                    self.pos = 0;\n                    self.rerun = 0;\n                    self.plugs = v;\n                }\n                PlugResult::Err(e) =&gt; return Err(e),\n            }\n\n            // 如果 rerun 5 次，返回错误\n            if self.rerun &gt;= MAX_RERUN {\n                return Err(anyhow::anyhow!(\"max rerun\").into());\n            }\n        }\n\n        Ok(())\n    }\n\n    pub fn get_execution_log(&amp;self) -&gt; &amp;[String] {\n        &amp;self.executed\n    }\n\n    fn add_execution_log(&amp;mut self) {\n        self.executed.push(self.plugs[self.pos].to_string());\n    }\n}\n</code></pre><p>你可以在 playground 里运行包括完整示例代码的<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=4c0a642205a816f3fbf95e86f2856134\">例子</a>。</p><p>开始的时候，初始化一个包含 [SecurityChecker, Normalizer] 两个组件的流水线。在执行 SecurityChecker 过程中，流水线被更新为 [CacheLoader, DataLoader, CacheWriter] 的结构，然后在执行到 DataLoader 时，出错退出。所以整个执行流程如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/cb/1c/cb33da7d36eecf7405ffd56cec4e1c1c.jpg?wh=1920x1028\" alt=\"图片\"></p><h3>插件（微内核）结构</h3><p>插件结构（Plugin Architecture）也被称为微内核结构（Microkernel Architecture），它可以让你的系统拥有一个足够小的核心，然后围绕着这个核心以插件的方式注入新的功能。</p><p>我们平时使用的 VS Code 就是典型的插件结构。它的核心功能就是文本的编辑，但通过各种插件，它可以支持代码的语法高亮、错误检查、格式化等等功能。</p><p>在构建插件结构时，我们需要设计一套足够稳定的接口，保证插件和核心之间的交互；还需要设计一套注册机制，让插件可以被注册进系统，或者从系统中删除。</p><p>在 Rust 下，除了正常使用 trait 和 trait object 来构建插件机制，在系统内部使用插件结构外，还可以通过 WebAssembly（通过 wasmer 或 wasmtime） 或者 rhai 这样的嵌入式脚本来允许第三方通过插件来扩展系统的能力：</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/f5/bb0cf05d0e1a4d85f60794569c9819f5.jpg?wh=1920x1028\" alt=\"图片\"></p><h2>小结</h2><p>架构是一个复杂的东西，它充满了权衡（trade-off）。我非常推崇 Clojure 创造者 Rich Hickey 的一句话，大意是说“你只有有了足够的替代方案，才谈得上权衡”。</p><p>我们在做软件开发时，不要着急上来就甩开膀子写代码，要先让需求在大脑中沉淀，思考这个需求和已有的哪些需求相关、和我见过的哪些系统类似，然后再去思考都有什么样的方案、它们的利弊是什么。</p><p>好的架构师了解足够多的架构风格，所以不拘泥于某一种，也不会手里拿着锤子，看什么都是钉子。好的架构师平时还有足够多的阅读、足够多的积累，这样在遇到架构问题时，可以迅速和曾经遇见的系统联系和类比。这也是为什么我非常建议你们多阅读市面上优秀的代码，因为广泛且有深度的阅读才能拓宽你的眼界，才能帮你累积足够多的素材。</p><p>当然，阅读仅仅是第一步。<strong>有了阅读的基础，你可以多进行“纸上谈兵”的脑力训练</strong>，看到一个系统，就尝试分析它的架构，看看自己能不能自圆其说，架构出类似的产品。这样的脑力训练除了可以更好地帮助你提升架构分析能力外，还可以帮你学到“你不知道你不知道的事情”。</p><p>比如我曾经花了些功夫去研究 Notion，顺着这条线更深入地探索 OT 和 CRDT 算法，在深入探索中，我遇见了 <a href=\"https://github.com/yjs/y-crdt\">yjs</a>、<a href=\"https://github.com/automerge/automerge-rs\">automerge</a>、<a href=\"https://github.com/josephg/diamond-types\">diamond-types</a> 等优秀的工具，这些都是我之前从未使用过的东西。</p><p>最后，你还需要去真正把自己设计的架构落地，应用在某些项目中。一个人一生中可以主导某些大项目架构的机会并不多，所以，<strong>在机会来临时，抓住它，把你平生所学应用上去，此时你会渐渐感受到头脑中的架构和真正落地的架构之间的差异</strong>。</p><p>有同学可能会问，如果机会没有来临怎么办？那么就在业余时间去写各种你感兴趣的东西，以此来磨练自己的能力，默默等待属于自己的机会。当年明月写《明朝那些事儿》，刘慈欣写《三体》，也并不是他们在工作中得到的机会。兴趣最好的老师，热爱是前进的动力。</p><h3>思考题</h3><p>请花些时间阅读《Fundamentals of Software Architecture》这本书。</p><p>欢迎在留言区分享你今天的学习收获或感悟。如果你觉得有收获，也欢迎分享给身边的朋友，邀他一起讨论。我们下节课见。</p>","neighbors":{"left":{"article_title":"45｜阶段实操（8）：构建一个简单的KV server-配置/测试/监控/CI/CD","id":466825},"right":{"article_title":"大咖助场｜开悟之坡（上）：Rust的现状、机遇与挑战","id":468940}},"comments":[{"had_liked":false,"id":326482,"user_name":"胡小涵","can_delete":false,"product_type":"c1","uid":2004538,"ip_address":"","ucode":"2E750C65EC282C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/3a/e06f8367.jpg","comment_is_top":false,"comment_ctime":1639538896,"is_pvip":false,"replies":[{"id":"118792","content":"我考虑一下，回头看看这个需求有多少。最初的计划有宏，但因为这是入门的课程，所以砍掉了。","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639803751,"ip_address":"","comment_id":326482,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27409342672","product_id":100085301,"comment_content":"老师，有空的时候能不能出一些宏的教程，声明宏还好，在网上一直没有找到比较好的过程宏的教程。因为之前接触过QT，了解到一些c++框架在用自己的方式（宏加上关键字扩展）对语言或程序的行为进行很有意义的扩展，所以感觉宏这一块还是大有可为的，不知道老师有空时能不能略授一二。","like_count":6,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539665,"discussion_content":"我考虑一下，回头看看这个需求有多少。最初的计划有宏，但因为这是入门的课程，所以砍掉了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639803751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347740,"user_name":"阳阳","can_delete":false,"product_type":"c1","uid":2716386,"ip_address":"","ucode":"5E61EF18F08DF2","user_header":"https://static001.geekbang.org/account/avatar/00/29/72/e2/9a19b202.jpg","comment_is_top":false,"comment_ctime":1654385359,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"18834254543","product_id":100085301,"comment_content":"强烈要求老师出新课程，架构课程和Rust高级。","like_count":4},{"had_liked":false,"id":326549,"user_name":"给我点阳光就灿烂","can_delete":false,"product_type":"c1","uid":1462209,"ip_address":"","ucode":"F3B0439BE0D062","user_header":"https://static001.geekbang.org/account/avatar/00/16/4f/c1/7f596aba.jpg","comment_is_top":false,"comment_ctime":1639558702,"is_pvip":true,"replies":[{"id":"118790","content":"如果是内部的 plugin 结构，其实很简单，用 trait 和 trait object 处理即可；如果是外部的 plugin，稍微麻烦，这里有个例子：https:&#47;&#47;github.com&#47;luojia65&#47;plugin-system-example","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639803618,"ip_address":"","comment_id":326549,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14524460590","product_id":100085301,"comment_content":"老师，可不可以具体给一个项目代码，关于插件架构的，特别好奇这种架构是怎样实现的<br>","like_count":3,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539663,"discussion_content":"如果是内部的 plugin 结构，其实很简单，用 trait 和 trait object 处理即可；如果是外部的 plugin，稍微麻烦，这里有个例子：https://github.com/luojia65/plugin-system-example","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639803619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358748,"user_name":"inmo","can_delete":false,"product_type":"c1","uid":1159530,"ip_address":"北京","ucode":"A9590E563C93CC","user_header":"https://static001.geekbang.org/account/avatar/00/11/b1/6a/b1e05143.jpg","comment_is_top":false,"comment_ctime":1664682034,"is_pvip":false,"replies":[{"id":"130514","content":"加油，进一步有进一步的乐趣，国庆快乐","user_name":"编辑回复","user_name_real":"编辑","uid":"2547771","ctime":1664710650,"ip_address":"北京","comment_id":358748,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1664682034","product_id":100085301,"comment_content":"努力消化","like_count":0,"discussions":[{"author":{"id":2547771,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e0/3b/8ec916b2.jpg","nickname":"多少","note":"","ucode":"0A6EF7AA6E4BB7","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589343,"discussion_content":"加油，进一步有进一步的乐趣，国庆快乐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664710650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329842,"user_name":"Geek_4ca442","can_delete":false,"product_type":"c1","uid":2860513,"ip_address":"","ucode":"637CE0FC836D89","user_header":"","comment_is_top":false,"comment_ctime":1641566949,"is_pvip":false,"replies":[{"id":"120738","content":"如果同一个数据要被用多次，可以使用引用。如果多次使用都需要所有权，那么只能 clone。如果要减少数据本身的 clone，可以用 Rc&#47;Arc","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642307593,"ip_address":"","comment_id":329842,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641566949","product_id":100085301,"comment_content":"老师请教个问题：如果在 kvServer 中保存的是一个结构体，value字段是要存储的值。<br>类似下面的功能该如何实现？传进来的参数val需要用到两次，尽管逻辑上只可能用到一次。<br>或者在 if ... else 语句中有类似的情况，如何实现比较好？是不是只能clone？<br><br>pub fn set&lt;T: Any + Send + Sync, K: Into&lt;String&gt;&gt;(&amp;self, key: K, val: T) {<br>        self.map.entry(key.into())<br>        .and_modify(|o| {<br>            *o.value = val;<br>            &#47;&#47; ...一些其它相关的处理<br>        })<br>        .or_insert(Value {<br>            count: 0,<br>            value: val,<br>        });<br>}","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546375,"discussion_content":"如果同一个数据要被用多次，可以使用引用。如果多次使用都需要所有权，那么只能 clone。如果要减少数据本身的 clone，可以用 Rc/Arc","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642307593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329092,"user_name":"gnu","can_delete":false,"product_type":"c1","uid":1631832,"ip_address":"","ucode":"B598402D9377D9","user_header":"https://static001.geekbang.org/account/avatar/00/18/e6/58/a0f74927.jpg","comment_is_top":false,"comment_ctime":1641114316,"is_pvip":false,"replies":[{"id":"120745","content":":)","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642307712,"ip_address":"","comment_id":329092,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641114316","product_id":100085301,"comment_content":"没想到 rust 课程还藏有架构设计思想的 bonus！惊喜了","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546383,"discussion_content":":)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642307712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327020,"user_name":"0@1","can_delete":false,"product_type":"c1","uid":1549191,"ip_address":"","ucode":"932A4139DB8169","user_header":"https://static001.geekbang.org/account/avatar/00/17/a3/87/eb923eb3.jpg","comment_is_top":false,"comment_ctime":1639841484,"is_pvip":false,"replies":[{"id":"120825","content":"暂时还没有，也许以后有","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1642311545,"ip_address":"","comment_id":327020,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1639841484","product_id":100085301,"comment_content":"老师，有没有出Rust高级课程的计划","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546470,"discussion_content":"暂时还没有，也许以后有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642311545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1214893,"avatar":"https://static001.geekbang.org/account/avatar/00/12/89/ad/4efd929a.jpg","nickname":"老荀","note":"","ucode":"C32E743518DECD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":563557,"discussion_content":"同求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650023921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":546470,"ip_address":""},"score":563557,"extra":""}]},{"author":{"id":2716386,"avatar":"https://static001.geekbang.org/account/avatar/00/29/72/e2/9a19b202.jpg","nickname":"阳阳","note":"","ucode":"5E61EF18F08DF2","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580490,"discussion_content":"同求再出一套Rust教程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658213976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326668,"user_name":"幻境之桥","can_delete":false,"product_type":"c1","uid":1061517,"ip_address":"","ucode":"F9F4DD94CB554E","user_header":"https://static001.geekbang.org/account/avatar/00/10/32/8d/91cd624b.jpg","comment_is_top":false,"comment_ctime":1639624837,"is_pvip":false,"replies":[{"id":"118779","content":"嗯","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639792464,"ip_address":"","comment_id":326668,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639624837","product_id":100085301,"comment_content":"插件化设计主要是把系统的核心能力提炼出来，供插件开发者使用，让他们的奇思妙想壮大系统生态","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539630,"discussion_content":"嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639792464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326667,"user_name":"幻境之桥","can_delete":false,"product_type":"c1","uid":1061517,"ip_address":"","ucode":"F9F4DD94CB554E","user_header":"https://static001.geekbang.org/account/avatar/00/10/32/8d/91cd624b.jpg","comment_is_top":false,"comment_ctime":1639624429,"is_pvip":false,"replies":[{"id":"118781","content":"看具体的应用场景。一般来说，流水线中的 building blocks  处理的是相同的数据，如果结构差异非常大的数据被同一个流水线处理，那么要么这个流水线的粒度太大（可能需要分成不同的流水线），要么这个架构本身不适合流水线","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639792880,"ip_address":"","comment_id":326667,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639624429","product_id":100085301,"comment_content":"流水线那个例子 Context 会不会很复杂，所有 Plug 之间感觉只能通过这个 Context 交互","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539632,"discussion_content":"看具体的应用场景。一般来说，流水线中的 building blocks  处理的是相同的数据，如果结构差异非常大的数据被同一个流水线处理，那么要么这个流水线的粒度太大（可能需要分成不同的流水线），要么这个架构本身不适合流水线","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639792880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1061517,"avatar":"https://static001.geekbang.org/account/avatar/00/10/32/8d/91cd624b.jpg","nickname":"幻境之桥","note":"","ucode":"F9F4DD94CB554E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":540033,"discussion_content":"感谢老师指导！清晰多了😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639924021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539632,"ip_address":""},"score":540033,"extra":""}]}]},{"had_liked":false,"id":326479,"user_name":"光华路小霸王","can_delete":false,"product_type":"c1","uid":1582623,"ip_address":"","ucode":"80EB89CAAAB193","user_header":"https://static001.geekbang.org/account/avatar/00/18/26/1f/1af5d4ed.jpg","comment_is_top":false,"comment_ctime":1639538361,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639538361","product_id":100085301,"comment_content":"敏捷很大程度上降低了质量，对 client 端开发确实很痛苦","like_count":0},{"had_liked":false,"id":326472,"user_name":"乌龙猹","can_delete":false,"product_type":"c1","uid":2739949,"ip_address":"","ucode":"43F94A0DEC54BE","user_header":"https://static001.geekbang.org/account/avatar/00/29/ce/ed/3dbe915b.jpg","comment_is_top":false,"comment_ctime":1639536972,"is_pvip":false,"replies":[{"id":"118794","content":"谢谢支持！","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639803787,"ip_address":"","comment_id":326472,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639536972","product_id":100085301,"comment_content":"今天这篇更新不仅属于干货 还非常硬  实在是不想结束这段学习之旅  虽然rust 只是刚入门  但老师深入浅出地规划了 rust 的roadmap  日后定当反复研读 以求融会贯通。最后 非常期待老师未来能推出elixir 编程第一课  到时候一定支持  也该有人来向国内开发者推荐推荐 elixir 这门语言了  ","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539667,"discussion_content":"谢谢支持！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639803787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326470,"user_name":"overheat","can_delete":false,"product_type":"c1","uid":2675695,"ip_address":"","ucode":"DD82D9194C26D0","user_header":"https://static001.geekbang.org/account/avatar/00/28/d3/ef/b3b88181.jpg","comment_is_top":false,"comment_ctime":1639536571,"is_pvip":true,"replies":[{"id":"118799","content":"Rust 下涌现出很多不错的嵌入式语言（都继承了 Rust 的安全性），rhai 我比较喜欢。casbin-rs 的 expression evaluator 使用了 rhai。handlebars-rust 的 scripting 支持，也使用了 rhai","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639804277,"ip_address":"","comment_id":326470,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639536571","product_id":100085301,"comment_content":"Rhai看描述不错哦，类javascript，有人深度使用过吗？","like_count":0,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539672,"discussion_content":"Rust 下涌现出很多不错的嵌入式语言（都继承了 Rust 的安全性），rhai 我比较喜欢。casbin-rs 的 expression evaluator 使用了 rhai。handlebars-rust 的 scripting 支持，也使用了 rhai","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639804277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326451,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1639532369,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1639532369","product_id":100085301,"comment_content":"你只有有了足够的替代方案，才谈得上权衡。","like_count":0},{"had_liked":false,"id":326450,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1639532367,"is_pvip":false,"replies":[{"id":"118800","content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":"1079375","ctime":1639804297,"ip_address":"","comment_id":326450,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639532367","product_id":100085301,"comment_content":"过去二十年时间，敏捷宣言（Agile Manifesto）和精益创业（Lean startup）对软件社区最大的负面影响就是，一大堆外行或者并没有深刻理解软件工程的从业者，过分追求速度，过度曲解 MVP（Minimum Viable Product），而忽视了从起点出发前，必不可少的架构和设计功夫，导致大部分技术债实际上是架构和设计阶段的债务。<br><br>不能再认同了～","like_count":1,"discussions":[{"author":{"id":1079375,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/4f/e74f870c.jpg","nickname":"Tyr","note":"","ucode":"EAAFC8063202E0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539673,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639804297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326416,"user_name":"彭亚伦","can_delete":false,"product_type":"c1","uid":2425378,"ip_address":"","ucode":"77A32C73A23F72","user_header":"https://static001.geekbang.org/account/avatar/00/25/02/22/19585900.jpg","comment_is_top":false,"comment_ctime":1639524249,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639524249","product_id":100085301,"comment_content":"茅塞顿开了属于是~","like_count":0}]}