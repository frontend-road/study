{"id":7489,"title":"第6讲 | 动态代理是基于什么原理？","content":"<p>编程语言通常有各种不同的分类角度，动态类型和静态类型就是其中一种分类角度，简单区分就是语言类型信息是在运行时检查，还是编译期检查。</p>\n<p>与其近似的还有一个对比，就是所谓强类型和弱类型，就是不同类型变量赋值时，是否需要显式地（强制）进行类型转换。</p>\n<p>那么，如何分类Java语言呢？通常认为，Java是静态的强类型语言，但是因为提供了类似反射等机制，也具备了部分动态类型语言的能力。</p>\n<p>言归正传，今天我要问你的问题是，<span class=\"orange\">谈谈Java反射机制，动态代理是基于什么原理？</span></p>\n<h2>典型回答</h2>\n<p>反射机制是Java语言提供的一种基础功能，赋予程序在运行时<strong>自省</strong>（introspect，官方用语）的能力。通过反射我们可以直接操作类或者对象，比如获取某个对象的类定义，获取类声明的属性和方法，调用方法或者构造对象，甚至可以运行时修改类定义。</p>\n<p>动态代理是一种方便运行时动态构建代理、动态处理代理方法调用的机制，很多场景都是利用类似机制做到的，比如用来包装RPC调用、面向切面的编程（AOP）。</p>\n<p>实现动态代理的方式很多，比如JDK自身提供的动态代理，就是主要利用了上面提到的反射机制。还有其他的实现方式，比如利用传说中更高性能的字节码操作机制，类似ASM、cglib（基于ASM）、Javassist等。</p>\n<h2>考点分析</h2>\n<p>这个题目给我的第一印象是稍微有点诱导的嫌疑，可能会下意识地以为动态代理就是利用反射机制实现的，这么说也不算错但稍微有些不全面。功能才是目的，实现的方法有很多。总的来说，这道题目考察的是Java语言的另外一种基础机制： 反射，它就像是一种魔法，引入运行时自省能力，赋予了Java语言令人意外的活力，通过运行时操作元数据或对象，Java可以灵活地操作运行时才能确定的信息。而动态代理，则是延伸出来的一种广泛应用于产品开发中的技术，很多繁琐的重复编程，都可以被动态代理机制优雅地解决。</p>\n<p>从考察知识点的角度，这道题涉及的知识点比较庞杂，所以面试官能够扩展或者深挖的内容非常多，比如：</p>\n<!-- [[[read_end]]] -->\n<ul>\n<li>\n<p>考察你对反射机制的了解和掌握程度。</p>\n</li>\n<li>\n<p>动态代理解决了什么问题，在你业务系统中的应用场景是什么？</p>\n</li>\n<li>\n<p>JDK动态代理在设计和实现上与cglib等方式有什么不同，进而如何取舍？</p>\n</li>\n</ul>\n<p>这些考点似乎不是短短一篇文章能够囊括的，我会在知识扩展部分尽量梳理一下。</p>\n<h2>知识扩展</h2>\n<p>1.反射机制及其演进</p>\n<p>对于Java语言的反射机制本身，如果你去看一下java.lang或java.lang.reflect包下的相关抽象，就会有一个很直观的印象了。Class、Field、Method、Constructor等，这些完全就是我们去操作类和对象的元数据对应。反射各种典型用例的编程，相信有太多文章或书籍进行过详细的介绍，我就不再赘述了，至少你需要掌握基本场景编程，这里是官方提供的参考文档：<a href=\"https://docs.oracle.com/javase/tutorial/reflect/index.html\">https://docs.oracle.com/javase/tutorial/reflect/index.html</a> 。</p>\n<p>关于反射，有一点我需要特意提一下，就是反射提供的AccessibleObject.setAccessible​(boolean flag)。它的子类也大都重写了这个方法，这里的所谓accessible可以理解成修饰成员的public、protected、private，这意味着我们可以在运行时修改成员访问限制！</p>\n<p>setAccessible的应用场景非常普遍，遍布我们的日常开发、测试、依赖注入等各种框架中。比如，在O/R Mapping框架中，我们为一个Java实体对象，运行时自动生成setter、getter的逻辑，这是加载或者持久化数据非常必要的，框架通常可以利用反射做这个事情，而不需要开发者手动写类似的重复代码。</p>\n<p>另一个典型场景就是绕过API访问控制。我们日常开发时可能被迫要调用内部API去做些事情，比如，自定义的高性能NIO框架需要显式地释放DirectBuffer，使用反射绕开限制是一种常见办法。</p>\n<p>但是，在Java 9以后，这个方法的使用可能会存在一些争议，因为Jigsaw项目新增的模块化系统，出于强封装性的考虑，对反射访问进行了限制。Jigsaw引入了所谓Open的概念，只有当被反射操作的模块和指定的包对反射调用者模块Open，才能使用setAccessible；否则，被认为是不合法（illegal）操作。如果我们的实体类是定义在模块里面，我们需要在模块描述符中明确声明：</p>\n<pre><code>module MyEntities {\n    // Open for reflection\n    opens com.mycorp to java.persistence;\n}\n</code></pre>\n<p>因为反射机制使用广泛，根据社区讨论，目前，Java 9仍然保留了兼容Java 8的行为，但是很有可能在未来版本，完全启用前面提到的针对setAccessible的限制，即只有当被反射操作的模块和指定的包对反射调用者模块Open，才能使用setAccessible，我们可以使用下面参数显式设置。</p>\n<pre><code>--illegal-access={ permit | warn | deny }\n</code></pre>\n<p>2.动态代理</p>\n<p>前面的问题问到了动态代理，我们一起看看，它到底是解决什么问题？</p>\n<p>首先，它是一个<strong>代理机制</strong>。如果熟悉设计模式中的代理模式，我们会知道，代理可以看作是对调用目标的一个包装，这样我们对目标代码的调用不是直接发生的，而是通过代理完成。其实很多动态代理场景，我认为也可以看作是装饰器（Decorator）模式的应用，我会在后面的专栏设计模式主题予以补充。</p>\n<p>通过代理可以让调用者与实现者之间<strong>解耦</strong>。比如进行RPC调用，框架内部的寻址、序列化、反序列化等，对于调用者往往是没有太大意义的，通过代理，可以提供更加友善的界面。</p>\n<p>代理的发展经历了静态到动态的过程，源于静态代理引入的额外工作。类似早期的RMI之类古董技术，还需要rmic之类工具生成静态stub等各种文件，增加了很多繁琐的准备工作，而这又和我们的业务逻辑没有关系。利用动态代理机制，相应的stub等类，可以在运行时生成，对应的调用操作也是动态完成，极大地提高了我们的生产力。改进后的RMI已经不再需要手动去准备这些了，虽然它仍然是相对古老落后的技术，未来也许会逐步被移除。</p>\n<p>这么说可能不够直观，我们可以看JDK动态代理的一个简单例子。下面只是加了一句print，在生产系统中，我们可以轻松扩展类似逻辑进行诊断、限流等。</p>\n<pre><code>public class MyDynamicProxy {\n    public static  void main (String[] args) {\n        HelloImpl hello = new HelloImpl();\n        MyInvocationHandler handler = new MyInvocationHandler(hello);\n        // 构造代码实例\n        Hello proxyHello = (Hello) Proxy.newProxyInstance(HelloImpl.class.getClassLoader(), HelloImpl.class.getInterfaces(), handler);\n        // 调用代理方法\n        proxyHello.sayHello();\n    }\n}\ninterface Hello {\n    void sayHello();\n}\nclass HelloImpl implements  Hello {\n    @Override\n    public void sayHello() {\n        System.out.println(&quot;Hello World&quot;);\n    }\n}\n class MyInvocationHandler implements InvocationHandler {\n    private Object target;\n    public MyInvocationHandler(Object target) {\n        this.target = target;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args)\n            throws Throwable {\n        System.out.println(&quot;Invoking sayHello&quot;);\n        Object result = method.invoke(target, args);\n        return result;\n    }\n}\n\n</code></pre>\n<p>上面的JDK Proxy例子，非常简单地实现了动态代理的构建和代理操作。首先，实现对应的InvocationHandler；然后，以接口Hello为纽带，为被调用目标构建代理对象，进而应用程序就可以使用代理对象间接运行调用目标的逻辑，代理为应用插入额外逻辑（这里是println）提供了便利的入口。</p>\n<p>从API设计和实现的角度，这种实现仍然有局限性，因为它是以接口为中心的，相当于添加了一种对于被调用者没有太大意义的限制。我们实例化的是Proxy对象，而不是真正的被调用类型，这在实践中还是可能带来各种不便和能力退化。</p>\n<p>如果被调用者没有实现接口，而我们还是希望利用动态代理机制，那么可以考虑其他方式。我们知道Spring AOP支持两种模式的动态代理，JDK Proxy或者cglib，如果我们选择cglib方式，你会发现对接口的依赖被克服了。</p>\n<p>cglib动态代理采取的是创建目标类的子类的方式，因为是子类化，我们可以达到近似使用被调用者本身的效果。在Spring编程中，框架通常会处理这种情况，当然我们也可以<a href=\"http://cliffmeyers.com/blog/2006/12/29/spring-aop-cglib-or-jdk-dynamic-proxies.html\">显式指定</a>。关于类似方案的实现细节，我就不再详细讨论了。</p>\n<p>那我们在开发中怎样选择呢？我来简单对比下两种方式各自优势。</p>\n<p>JDK Proxy的优势：</p>\n<ul>\n<li>\n<p>最小化依赖关系，减少依赖意味着简化开发和维护，JDK本身的支持，可能比cglib更加可靠。</p>\n</li>\n<li>\n<p>平滑进行JDK版本升级，而字节码类库通常需要进行更新以保证在新版Java上能够使用。</p>\n</li>\n<li>\n<p>代码实现简单。</p>\n</li>\n</ul>\n<p>基于类似cglib框架的优势：</p>\n<ul>\n<li>\n<p>有的时候调用目标可能不便实现额外接口，从某种角度看，限定调用者实现接口是有些侵入性的实践，类似cglib动态代理就没有这种限制。</p>\n</li>\n<li>\n<p>只操作我们关心的类，而不必为其他相关类增加工作量。</p>\n</li>\n<li>\n<p>高性能。</p>\n</li>\n</ul>\n<p>另外，从性能角度，我想补充几句。记得有人曾经得出结论说JDK Proxy比cglib或者Javassist慢几十倍。坦白说，不去争论具体的benchmark细节，在主流JDK版本中，JDK Proxy在典型场景可以提供对等的性能水平，数量级的差距基本上不是广泛存在的。而且，反射机制性能在现代JDK中，自身已经得到了极大的改进和优化，同时，JDK很多功能也不完全是反射，同样使用了ASM进行字节码操作。</p>\n<p>我们在选型中，性能未必是唯一考量，可靠性、可维护性、编程工作量等往往是更主要的考虑因素，毕竟标准类库和反射编程的门槛要低得多，代码量也是更加可控的，如果我们比较下不同开源项目在动态代理开发上的投入，也能看到这一点。</p>\n<p>动态代理应用非常广泛，虽然最初多是因为RPC等使用进入我们视线，但是动态代理的使用场景远远不仅如此，它完美符合Spring AOP等切面编程。我在后面的专栏还会进一步详细分析AOP的目的和能力。简单来说它可以看作是对OOP的一个补充，因为OOP对于跨越不同对象或类的分散、纠缠逻辑表现力不够，比如在不同模块的特定阶段做一些事情，类似日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等，你可以参考下面这张图。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/ba/2b/ba9a5b6228b188f5b9b15017e29a302b.png?wh=800*575\" alt=\"\" /></p>\n<p>AOP通过（动态）代理机制可以让开发者从这些繁琐事项中抽身出来，大幅度提高了代码的抽象程度和复用度。从逻辑上来说，我们在软件设计和实现中的类似代理，如Facade、Observer等很多设计目的，都可以通过动态代理优雅地实现。</p>\n<p>今天我简要回顾了反射机制，谈了反射在Java语言演进中正在发生的变化，并且进一步探讨了动态代理机制和相关的切面编程，分析了其解决的问题，并探讨了生产实践中的选择考量。</p>\n<h2>一课一练</h2>\n<p>关于今天我们讨论的题目你做到心中有数了吗？留一道思考题给你，你在工作中哪些场景使用到了动态代理？相应选择了什么实现技术？选择的依据是什么？</p>\n<p>请你在留言区写写你对这个问题的思考，我会选出经过认真思考的留言，送给你一份学习鼓励金，欢迎你与我一起讨论。</p>\n<p>你的朋友是不是也在准备面试呢？你可以“请朋友读”，把今天的题目分享给好友，或许你能帮到他。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"第5讲 | String、StringBuffer、StringBuilder有什么区别？","id":7349},"right":{"article_title":"第7讲 | int和Integer有什么区别？","id":7514}},"comments":[{"had_liked":false,"id":8925,"user_name":"肖一林","can_delete":false,"product_type":"c1","uid":1113317,"ip_address":"","ucode":"1DE45D906EB836","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/e5/605f423f.jpg","comment_is_top":false,"comment_ctime":1526522496,"is_pvip":false,"replies":[{"id":"2694","content":"谢谢反馈，类似ASM这种字节码操纵是有单独章节覆盖的，前面基础篇有个整体印象，免得陷入细节；Java内部动态生成还有其他领域，比如Lambda实现机制，个人认为一起分析会连贯一些<br>","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526593610,"ip_address":"","comment_id":8925,"utype":1}],"discussion_count":16,"race_medal":0,"score":"2758895526528","product_id":100006701,"comment_content":"提一些建议：应该从两条线讲这个问题，一条从代理模式，一条从反射机制。不要老担心篇幅限制讲不清问题，废话砍掉一些，深层次的内在原理多讲些（比如asm），容易自学的扩展知识可以用链接代替<br>代理模式（通过代理静默地解决一些业务无关的问题，比如远程、安全、事务、日志、资源关闭……让应用开发者可以只关心他的业务）<br>    静态代理：事先写好代理类，可以手工编写，也可以用工具生成。缺点是每个业务类都要对应一个代理类，非常不灵活。<br>    动态代理：运行时自动生成代理对象。缺点是生成代理代理对象和调用代理方法都要额外花费时间。<br>        JDK动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。新版本也开始结合ASM机制。<br>        cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。<br>Java 发射机制的常见应用：动态代理（AOP、RPC）、提供第三方开发者扩展能力（Servlet容器，JDBC连接）、第三方组件创建对象（DI）……<br>我水平比较菜，希望多学点东西，希望比免费知识层次更深些，也不光是为了面试，所以提提建议。","like_count":643,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417903,"discussion_content":"谢谢反馈，类似ASM这种字节码操纵是有单独章节覆盖的，前面基础篇有个整体印象，免得陷入细节；Java内部动态生成还有其他领域，比如Lambda实现机制，个人认为一起分析会连贯一些\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526593610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193535,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4SnkQH9e89DBAHLHa2Xob1Z2J0sErvjKhA2AvCrKn1T5gqicrHH3NCrQY1jDXzkBkhyPjQuNeCKA/132","nickname":"思绪飘飞","note":"","ucode":"08C5553F8898A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269690,"discussion_content":"原来大家都觉得讲的不好，我还以为我水平不够","likes_number":24,"is_delete":false,"is_hidden":false,"ctime":1589938253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2033215,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/06/3f/5e1e5846.jpg","nickname":"skr","note":"","ucode":"46E74A5C55AF38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295641,"discussion_content":"确实，花钱看废话","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1596271655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026894,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ab/4e/82e9657c.jpg","nickname":"jeff","note":"","ucode":"68456DD035BDF4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224559,"discussion_content":"比文章内容好太多了应该退你钱的","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1586315314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026894,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ab/4e/82e9657c.jpg","nickname":"jeff","note":"","ucode":"68456DD035BDF4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224556,"discussion_content":"的确废话贼多","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1586315213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169341,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d7/bd/50d98f9e.jpg","nickname":"黑马有点白986","note":"","ucode":"C24216CBD5D7CC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213078,"discussion_content":"这个评论很牛，大赞","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1585048632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1423993,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ba/79/5a6336f5.jpg","nickname":"Ornamentism","note":"","ucode":"1A3BFE53A3BDBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205357,"discussion_content":"看评论学习","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584287190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87492,"discussion_content":"建议很棒加一","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576670765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111870,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2Az5uTh9ZGVA7yQCj1BXtXuicPRkvJicA97AoN9xX3bnPcUYglTMXJeZeoVbPQeJA7ICvQhR3KQ0w/132","nickname":"日不落帝国","note":"","ucode":"6A11ABBD8AC438","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4280,"discussion_content":"建议很棒","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565270378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2054568,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/59/a8/797c75b3.jpg","nickname":"秦淮","note":"","ucode":"9568CA31D16A34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584429,"discussion_content":"总结的比文章还好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660813025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2410746,"avatar":"https://static001.geekbang.org/account/avatar/00/24/c8/fa/baf9847c.jpg","nickname":"吕成 Zero","note":"","ucode":"5665769CC41329","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396957,"discussion_content":"很棒的建议！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632531779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378060,"discussion_content":"建议很棒，作者很忙不会再重新更新文档\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623037429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1971613,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/15/9d/dfd612fe.jpg","nickname":"颇风","note":"","ucode":"AF5EE13248C9E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349155,"discussion_content":"反射写成发射了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612938293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297112,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ca/d8/b109ed85.jpg","nickname":"Jack","note":"","ucode":"F3863DAEF449D5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320332,"discussion_content":"建议很棒，你总结得很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604321582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234280,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/68/af1682f1.jpg","nickname":"jackLee","note":"","ucode":"720304AB76D9FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157875,"discussion_content":"课代表，反射机制，动态代理，动态代理的实现（JDK,cglib），动态代理的应用（AOP,RPC）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580528325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147621,"discussion_content":"建议很棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579662608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8894,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1526517102,"is_pvip":true,"discussion_count":20,"race_medal":0,"score":"1650793958766","product_id":100006701,"comment_content":"反射与动态代理原理<br><br>1 关于反射<br>反射最大的作用之一就在于我们可以不在编译时知道某个对象的类型，而在运行时通过提供完整的”包名+类名.class”得到。注意：不是在编译时，而是在运行时。<br><br>功能：<br>•在运行时能判断任意一个对象所属的类。<br>•在运行时能构造任意一个类的对象。<br>•在运行时判断任意一个类所具有的成员变量和方法。<br>•在运行时调用任意一个对象的方法。<br>说大白话就是，利用Java反射机制我们可以加载一个运行时才得知名称的class，获悉其构造方法，并生成其对象实体，能对其fields设值并唤起其methods。<br><br>应用场景：<br>反射技术常用在各类通用框架开发中。因为为了保证框架的通用性，需要根据配置文件加载不同的对象或类，并调用不同的方法，这个时候就会用到反射——运行时动态加载需要加载的对象。<br><br>特点：<br>由于反射会额外消耗一定的系统资源，因此如果不需要动态地创建一个对象，那么就不需要用反射。另外，反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题。<br><br>2 动态代理<br>为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在两者之间起到中介的作用（可类比房屋中介，房东委托中介销售房屋、签订合同等）。<br>所谓动态代理，就是实现阶段不用关心代理谁，而是在运行阶段才指定代理哪个一个对象（不确定性）。如果是自己写代理类的方式就是静态代理（确定性）。<br><br>组成要素：<br>(动态)代理模式主要涉及三个要素：<br>其一：抽象类接口<br>其二：被代理类（具体实现抽象接口的类）<br>其三：动态代理类：实际调用被代理类的方法和属性的类<br><br>实现方式:<br>实现动态代理的方式很多，比如 JDK 自身提供的动态代理，就是主要利用了反射机制。还有其他的实现方式，比如利用字节码操作机制，类似 ASM、CGLIB（基于 ASM）、Javassist 等。<br>举例，常可采用的JDK提供的动态代理接口InvocationHandler来实现动态代理类。其中invoke方法是该接口定义必须实现的，它完成对真实方法的调用。通过InvocationHandler接口，所有方法都由该Handler来进行处理，即所有被代理的方法都由InvocationHandler接管实际的处理任务。此外，我们常可以在invoke方法实现中增加自定义的逻辑实现，实现对被代理类的业务逻辑无侵入。","like_count":384,"discussions":[{"author":{"id":1391748,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","nickname":"连边","note":"","ucode":"54B5DA38449728","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":139675,"discussion_content":"还是大哥厉害。比老师讲得是好，老师讲感觉东扯西扯的。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1579310843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1684297,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b3/49/79024ed2.jpg","nickname":"Tr丶Zoey","note":"","ucode":"34A30F97E5A9DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301817,"discussion_content":"我已经开始每一讲打开直接看评论了。。。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1598670187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234280,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/68/af1682f1.jpg","nickname":"jackLee","note":"","ucode":"720304AB76D9FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157877,"discussion_content":"课代表","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1580528473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2033215,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/06/3f/5e1e5846.jpg","nickname":"skr","note":"","ucode":"46E74A5C55AF38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295643,"discussion_content":"感觉像是花了钱看了一场不应该花钱的电影。。。着实被您的才华惊艳到了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596272103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2556554,"avatar":"https://static001.geekbang.org/account/avatar/00/27/02/8a/49bf37eb.jpg","nickname":"yooo🦁","note":"","ucode":"599CBE483BA383","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366082,"discussion_content":"完爆作者","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617956408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1686410,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bb/8a/d33d9d3f.jpg","nickname":"小菠萝🍍","note":"","ucode":"DA814203C6C062","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292669,"discussion_content":"讲的比文章好","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595302129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1409357,"avatar":"https://static001.geekbang.org/account/avatar/00/15/81/4d/5f892de2.jpg","nickname":"Echo","note":"","ucode":"F04C6BC4E288A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47415,"discussion_content":"这位大神，希望你一直存在在这个课里，这个老师讲的我更蒙了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573348637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1012988,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/74/fc/d3250404.jpg","nickname":"OoFriday","note":"","ucode":"A1CFAB190E1769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":32272,"discussion_content":"连续看了几篇你的评论，思路清晰，腻害","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571020824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1164531,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","nickname":"Bug? Feature!","note":"","ucode":"F8FA8A0094FBA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8920,"discussion_content":"老哥哪里都有你啊，都是一大堆。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568100754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1970536,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/11/68/ac0d2b05.jpg","nickname":"柯伟","note":"","ucode":"92BFAA8B85E5E8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388380,"discussion_content":"花钱是来看你的总结的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628738648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1992461,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/67/0d/ffa5cd9b.jpg","nickname":"oldjii","note":"","ucode":"70EC36B322C522","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387595,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628273601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098358,"avatar":"","nickname":"！巴甫洛夫的狗","note":"","ucode":"C8F8874F08EB45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359376,"discussion_content":"我是新手小白，看您的总结看懂了，看老师的没搞懂，真大神！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616167903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166140,"avatar":"https://static001.geekbang.org/account/avatar/00/21/0d/7c/abd3b64e.jpg","nickname":"letter","note":"","ucode":"C0A89172910C4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307452,"discussion_content":"讲的比文章好多了，看文章我斗看得我怀疑人生了~每次最后看到您我才回过神来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600655363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/90/900ce74c.jpg","nickname":"Dougleas","note":"","ucode":"FF22E2E7C5BA30","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302033,"discussion_content":"总结的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598767479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1563245,"avatar":"https://static001.geekbang.org/account/avatar/00/17/da/6d/7c8fdb14.jpg","nickname":"嗯。","note":"","ucode":"30FC6EF9A01070","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291875,"discussion_content":"老哥你出书吧，我买","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594982646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2048299,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/41/2b/86ac4707.jpg","nickname":"惊蛰","note":"","ucode":"B5D02585D15A54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286822,"discussion_content":"课代表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593305586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1957598,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/de/de/3130064f.jpg","nickname":"鑫晟","note":"","ucode":"4CC99854C54D96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242180,"discussion_content":"豁然开朗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587469419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1737846,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/84/76/6091523d.jpg","nickname":"进击的小明","note":"","ucode":"7C9A774C504177","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55912,"discussion_content":"比老师讲的还好 ：D","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574411824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1596640,"avatar":"https://static001.geekbang.org/account/avatar/00/18/5c/e0/b7139a5e.jpg","nickname":"Sunshine","note":"","ucode":"9C9862F957C3E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50266,"discussion_content":"看你的评论思路一下就清晰了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573698066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1611979,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqZ5HngdIUkXqeRMXuMH2IQFOt1KsVroLWc4G40LGbCKzhibHlbNjqKib3WdHSyrRCTYGliaz4KDfqRg/132","nickname":"courage66","note":"","ucode":"161FE55424C144","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15004,"discussion_content":"总结的挺好的，理解的这么清晰还花钱看专栏呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568794603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9114,"user_name":"刘方杰","can_delete":false,"product_type":"c1","uid":1115449,"ip_address":"","ucode":"017D78407BC5D3","user_header":"https://static001.geekbang.org/account/avatar/00/11/05/39/22db0dee.jpg","comment_is_top":false,"comment_ctime":1526612114,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"675836477586","product_id":100006701,"comment_content":"哎，阅读越来越困难了，我离核心是不是太远了。","like_count":157,"discussions":[{"author":{"id":1423993,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ba/79/5a6336f5.jpg","nickname":"Ornamentism","note":"","ucode":"1A3BFE53A3BDBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205347,"discussion_content":"我读起来也很困难，主要是文章没写清楚，思路不清晰，可能作者思路清晰，但是写的不够让我能清晰吧","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1584286823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2029976,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f9/98/53740221.jpg","nickname":"齐大柱","note":"","ucode":"694BBCA988C1DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289396,"discussion_content":"对啊，真的看不懂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594088021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181304,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/78/8f5435e3.jpg","nickname":"毛开头","note":"","ucode":"BC14DF90D801D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295945,"discussion_content":"是这样的 我一开始看不懂 看到这就不看了 然后面试被问懵逼了以后回来看 有这种感觉：噢 原来这里讲的就是那个反射","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596392043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8914,"user_name":"天使","can_delete":false,"product_type":"c1","uid":1069842,"ip_address":"","ucode":"74F10EE17DD77F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/12/783f6294.jpg","comment_is_top":false,"comment_ctime":1526519590,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"585642071846","product_id":100006701,"comment_content":"没涉及到原理，proxy到底是如何实现的，运行时拦截？cglib是编译时对类进行织入？要是更细一些就好了","like_count":136,"discussions":[{"author":{"id":1028394,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b1/2a/c1432fff.jpg","nickname":"Yano","note":"","ucode":"742EA1602E9A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":254420,"discussion_content":"同感啊，最近想重新看看，发现讲得很表面~文章只是讲了这几个名词，具体实现确实没有","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588324884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169341,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d7/bd/50d98f9e.jpg","nickname":"黑马有点白986","note":"","ucode":"C24216CBD5D7CC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213081,"discussion_content":"讲的比较浅，反射这块没讲透","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585048786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12052,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1528537395,"is_pvip":false,"replies":[{"id":"3952","content":"非常感谢，读者基础不同，我尽量兼顾并增加基础的介绍，因为也有反馈希望可以更全面、深入...<br>有好的建议请不吝赐教","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1528593672,"ip_address":"","comment_id":12052,"utype":1}],"discussion_count":6,"race_medal":0,"score":"267816509747","product_id":100006701,"comment_content":"看了好多篇文章，总体感觉是比较累，无论读者是否具有java背景，都应该让他看懂，而不是越看越糊涂，疑问反而更多了","like_count":62,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419096,"discussion_content":"非常感谢，读者基础不同，我尽量兼顾并增加基础的介绍，因为也有反馈希望可以更全面、深入...\n有好的建议请不吝赐教","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528593672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1196266,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ5ricEp2SDpA2d2iaw6TOVaPfmeicDicP34bamibX1JbHEkJl8wDQOK3ia4vic9WacKjFia9wibeG3nwOIiafA/132","nickname":"hunter","note":"","ucode":"EFBF6071BFCE10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":555522,"discussion_content":"但是反馈看不懂的占大多数","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646958846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":419096,"ip_address":""},"score":555522,"extra":""}]},{"author":{"id":1533328,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/G8zjBRQRR2pvyAicHwz5vyqCN94PuBu23utbomAtmXNCfxDKRG7B0qDOGlmN7ibcBlIp2kibMSXVIG8xrKrU9paww/132","nickname":"Geek_e82e64","note":"","ucode":"BAFE7AD30EC8BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141522,"discussion_content":"自己读下来感觉抓不中重点","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1579428644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1563245,"avatar":"https://static001.geekbang.org/account/avatar/00/17/da/6d/7c8fdb14.jpg","nickname":"嗯。","note":"","ucode":"30FC6EF9A01070","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291873,"discussion_content":"没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594982325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1423993,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ba/79/5a6336f5.jpg","nickname":"Ornamentism","note":"","ucode":"1A3BFE53A3BDBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205348,"discussion_content":"是的+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584286851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1562562,"avatar":"https://static001.geekbang.org/account/avatar/00/17/d7/c2/f7583f83.jpg","nickname":"邓慧永","note":"","ucode":"CE373A63351DB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198176,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583484555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9389,"user_name":"ai~ wen","can_delete":false,"product_type":"c1","uid":1113564,"ip_address":"","ucode":"29DD610E751EA6","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/dc/dc8754e3.jpg","comment_is_top":false,"comment_ctime":1526859948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"181915486380","product_id":100006701,"comment_content":"对于我这初学者，读着就懵了","like_count":42},{"had_liked":false,"id":8900,"user_name":"Douglas","can_delete":false,"product_type":"c1","uid":1073027,"ip_address":"","ucode":"CFDE3D76B9DAE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/83/bb728e53.jpg","comment_is_top":false,"comment_ctime":1526517946,"is_pvip":false,"replies":[{"id":"2642","content":"谢谢反馈，字节码操作、运行时拦截、加载期编织 、Java agent等，会和Aop单独介绍，那些内容不是几句话说得完","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526519616,"ip_address":"","comment_id":8900,"utype":1}],"discussion_count":1,"race_medal":0,"score":"147555406010","product_id":100006701,"comment_content":"好像和啥原理没啥关系吧，总结来说就是jdk 自身的反射机制或用第三方库，哪哪看到的都这样说，一笔带过","like_count":34,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417894,"discussion_content":"谢谢反馈，字节码操作、运行时拦截、加载期编织 、Java agent等，会和Aop单独介绍，那些内容不是几句话说得完","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526519616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8907,"user_name":"Douglas","can_delete":false,"product_type":"c1","uid":1073027,"ip_address":"","ucode":"CFDE3D76B9DAE6","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/83/bb728e53.jpg","comment_is_top":false,"comment_ctime":1526518908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"104605734012","product_id":100006701,"comment_content":"比较期待大神讲讲动态代理的原理是什么，对性能会带来什么影响，有没有什么问题需要规避，谢谢","like_count":24},{"had_liked":false,"id":9578,"user_name":"雷赟","can_delete":false,"product_type":"c1","uid":1124197,"ip_address":"","ucode":"23886C368BD370","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/65/c53a3221.jpg","comment_is_top":false,"comment_ctime":1526955964,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"91721269180","product_id":100006701,"comment_content":"何为反射？\r<br>反射是指计算机程序在运行时可以访问、检测和修改它本身状态或行为的一种能力。比喻来说，反射就是程序在运行的时候能够“观察”并且修改自己的行为。\r<br>文章中提到了“自省”它与反射是有区别的，“自省”机制仅指程序在运行时对自身信息（元数据）的检测，而反射机制不仅包括要能在运行时对程序自身信息进行检测，还要求程序能进一步根据这些信息改变程序状态或结构。\r<br>通过反射的运行时可以访问、检测和修改自身状态的特性，也就出现了动态代理。\r<br>一个小白对反射的使用场景（受限于业务能力）：\r<br>在一个程序中有两个类A、B，整个程序的运行都由 B 类来承担，A 类的所要做的工作是满足B的要求，如果在没有反射这种机制的条件下实现这个程序就会，既要把 B 类中的对整个程序运行逻辑进行编写，还要回到 A 类中对 B 的工作进行人工手动辅助，这时只要 B 的任何改动都会影响到 A 。\r<br>若在有了反射或代理之后 A 的代码就可以自己去访问、检测 B ，从而自动的修改 A 自身的状态来辅助 B。\r<br>\r<br>作者在评论中提到实现后续单独说明，我想到时就可以知道：代码是如何实现程序在运行时的访问、检测和行为的修改了。","like_count":21,"discussions":[{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576604,"discussion_content":"你这里例子不是很明白，b调用a，b修改为啥会影响a，反射，a自己检测b又是啥意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655701017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541386,"avatar":"https://static001.geekbang.org/account/avatar/00/17/85/0a/e564e572.jpg","nickname":"N_H","note":"","ucode":"109B67557AB3CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416,"discussion_content":"下面的例子举得很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561539377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8877,"user_name":"言志","can_delete":false,"product_type":"c1","uid":1122185,"ip_address":"","ucode":"4ABEB6ABB3A6CC","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/89/de5b1fab.jpg","comment_is_top":false,"comment_ctime":1526513787,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"91720827003","product_id":100006701,"comment_content":"采用cglib方式的动态代理还有个缺点：不能应用到被代理对象的final方法上。<br>我在多数据源项目中自动切换数据源功能用到了","like_count":21,"discussions":[{"author":{"id":1541386,"avatar":"https://static001.geekbang.org/account/avatar/00/17/85/0a/e564e572.jpg","nickname":"N_H","note":"","ucode":"109B67557AB3CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413,"discussion_content":"final方法没法被重新","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1561538995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576605,"discussion_content":"那如何解决","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655701046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2450893,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/L8EpqHoAnmvkzCIsdOkv5QvhIzu5tMaF2FDusXShqukv5ZBkS8DbicWaErjnYydibiaqBrs70wQ8P6axvC2FbWpbQ/132","nickname":"Geek_d3928c","note":"","ucode":"7CB09FD1F7CB23","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554818,"discussion_content":"private方法也不行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646630046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15271,"user_name":"bigfish","can_delete":false,"product_type":"c1","uid":1113863,"ip_address":"","ucode":"030BE0E311857A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83errHypG6kuO0YHqYqJ8EltP8Zm6nb0lWBPHQnsUDyHGQZeBicbnfY2U1I2NO08BhsSWgN5jkCXicmkA/132","comment_is_top":false,"comment_ctime":1531062732,"is_pvip":false,"replies":[{"id":"5315","content":"谢谢反馈，后面类加载章节介绍了两者底层机制，照顾下不同基础的读者","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1531322914,"ip_address":"","comment_id":15271,"utype":1}],"discussion_count":2,"race_medal":0,"score":"87430408652","product_id":100006701,"comment_content":"本来资质愚笨，看不懂很多东西的原理.想进来学习一下，jdk动态代理的原理和cglib代理原理等一些原理性的东西（其他章节也是如此）.发现听到原理性的东西不多都是一带而过.其实您做的课件针对很多点都是一带而过，听到某个名词一下来了兴趣继续一听结束了.我们都知道Java很大很多可以研究的，其实我们想听的很多是一些点的原理，讲完原理在结合实际应用阐述一下.也许我们就会有些豁然明朗的感觉.希望能理解一下！！！","like_count":20,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420315,"discussion_content":"谢谢反馈，后面类加载章节介绍了两者底层机制，照顾下不同基础的读者","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531322914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541386,"avatar":"https://static001.geekbang.org/account/avatar/00/17/85/0a/e564e572.jpg","nickname":"N_H","note":"","ucode":"109B67557AB3CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414,"discussion_content":"感觉老师的课件适合有一些基础的读者，有些总结性的点睛之笔","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1561539042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":18467,"user_name":"正光","can_delete":false,"product_type":"c1","uid":1112994,"ip_address":"","ucode":"6DC29994D0F379","user_header":"","comment_is_top":false,"comment_ctime":1533348617,"is_pvip":false,"replies":[{"id":"6464","content":"具体底层细节在jvm字节码操纵那一讲，难度把握不准请见谅","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1533400582,"ip_address":"","comment_id":18467,"utype":1}],"discussion_count":2,"race_medal":0,"score":"70252825353","product_id":100006701,"comment_content":"整体感觉讲的太浅，水上漂的感觉","like_count":16,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421541,"discussion_content":"具体底层细节在jvm字节码操纵那一讲，难度把握不准请见谅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533400582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1962416,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/f1/b0/d1b545ab.jpg","nickname":"きぃ","note":"","ucode":"770B4CF5E83934","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381807,"discussion_content":"是啊只给了个名词，解释都没有打着面试精选的噱头，还是要自己查，花着钱干啥啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625219299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19179,"user_name":"yoo","can_delete":false,"product_type":"c1","uid":1184367,"ip_address":"","ucode":"38F4F2EA09488A","user_header":"","comment_is_top":false,"comment_ctime":1533694772,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"57368269620","product_id":100006701,"comment_content":"您好，我一直关注您的文章，但是每次都觉得不是很理解。可不可以在以后的文章中讲一些实际的应用场景。","like_count":13,"discussions":[{"author":{"id":1324314,"avatar":"https://static001.geekbang.org/account/avatar/00/14/35/1a/9fa38dc9.jpg","nickname":"子瞻","note":"","ucode":"5C26FF10934534","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349710,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613472674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8901,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1526518134,"is_pvip":false,"replies":[{"id":"2701","content":"1.基本如此；反射是相对保证类型安全的，我觉得要比较也是和methodhandle之类对比，那个更是接近jvm内部的黑盒，性能更好<br>2.你是说lambda？也是需要jvm生成call site，然后invokedynamic之类调用，所以首次调用开销明显，C#不了解，不过动态生成的感觉都是如此吧；<br>这东西目前没有cache，如果你说的是存储在文件系统；未来，嘿嘿……<br><br>这些太零碎，说过了会有单独章节介绍，不然没基础的就晕了，还用不上<br><br><br>","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526599003,"ip_address":"","comment_id":8901,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53066125686","product_id":100006701,"comment_content":"先回答问题：<br>99%的Java程序员应该都间接使用了AOP。自己项目里直接编写的，比如调用追踪，通用日志， 自动重试<br>反射和AOP真是双刃剑效果拔群的技术。从MVC开始约定胜过配置的开发理念大行其道，ORM自动映射，plugin模式，到现在的spring + boot +cloud 的declarative编程大量基于此实现，可以说没有反射和AOP就没有Java的今天。反面就是，自己想进行定制化的改造封装真挺苦逼<br>再提问题：<br>1. 听到过个说法，反射慢因为一是获取Field，Method等要进行元数据的查找，这里有字符串匹配操作。二是Invoke时，要进行一些安全性上的检查。这种说法对么？JVM在解释执行的时候就不做一些操作内存操作的检查了么？如果不对，那原因是什么？还有没有其他？<br>2. 以前写C#的，里面可以拼表达式树，运行时生成一个函数（不需要有对象），理论上性能是和手写代码一样的，但可以缓存起来。这解决的是手写中间代码太难的问题。请问Java有这种类似的功能嘛？<br>","like_count":12,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417895,"discussion_content":"1.基本如此；反射是相对保证类型安全的，我觉得要比较也是和methodhandle之类对比，那个更是接近jvm内部的黑盒，性能更好\n2.你是说lambda？也是需要jvm生成call site，然后invokedynamic之类调用，所以首次调用开销明显，C#不了解，不过动态生成的感觉都是如此吧；\n这东西目前没有cache，如果你说的是存储在文件系统；未来，嘿嘿……\n\n这些太零碎，说过了会有单独章节介绍，不然没基础的就晕了，还用不上\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526599003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49389,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1544678113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40199383777","product_id":100006701,"comment_content":"恩，如大部分同学的感受一样，不够细致，一些概念点到为止了<br>当然，对于开阔眼界是大大的帮助的，动态代理这个平时编码没直接写过，各种框架的实现是基本用到的，感觉都是针对字节码进行的操作，可能操作的方式有些不同。JAVA源码是写个人看的，是编译器的输入材料，Java字节码是准备给JVM来加载识别的，是机器码的待转换材料，主要是JVM来操作。<br>框架为了其通用性，一定是不知道对应业务代码都是有哪些类和名字的，不过类想发挥作用总是要到JVM内才行的，类的全路径名为寻找对应的提供了线索，所以，将类名告诉框架，然后按照约定的形式编写，框架就能执行一些只有到执行时才知道的类的功能了。<br>这个就是我对动态代理和框架功能的理解，至于怎么获取类名，以及如何获取对应的在执行时才知道的类，估计就复杂了，至少对人如此，对JVM可能简单一些。反射是一种方式，直接根据类名的字节码也许也能找到吧！这个就是底层的原理啦！这也是期待从老师那里了解的","like_count":9},{"had_liked":false,"id":8952,"user_name":"THROW","can_delete":false,"product_type":"c1","uid":1112141,"ip_address":"","ucode":"A3C089A8F5F941","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/4d/4b748ff1.jpg","comment_is_top":false,"comment_ctime":1526539529,"is_pvip":false,"replies":[{"id":"2696","content":"没问题，喜欢底层，去查查JavaOne，FOSDEM，jvmsummit等","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526594040,"ip_address":"","comment_id":8952,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40181245193","product_id":100006701,"comment_content":"老师可以在分享结束时推荐一些好的文章，书籍甚至演讲之类的么？","like_count":9,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417918,"discussion_content":"没问题，喜欢底层，去查查JavaOne，FOSDEM，jvmsummit等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526594040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49129,"user_name":"Loren","can_delete":false,"product_type":"c1","uid":1330316,"ip_address":"","ucode":"672280193FEAA5","user_header":"https://static001.geekbang.org/account/avatar/00/14/4c/8c/44b88ce8.jpg","comment_is_top":false,"comment_ctime":1544608154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27314411930","product_id":100006701,"comment_content":"我把文章中的代理的代码copy到本地运行，debug运行时我打了几个断点，运行后输出了很多次Invoking sayHello是为什么","like_count":6},{"had_liked":false,"id":263495,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1606143132,"is_pvip":true,"discussion_count":2,"race_medal":2,"score":"18786012316","product_id":100006701,"comment_content":"以前对反射这部分的概念就不是特别的了解，看完了这篇专栏文章之后，感觉专栏似乎高估了读者的水平。如果专栏改名为“Java 高阶面试指南”，可能会少一些争议。<br><br>我觉的专栏采用提纲挈领的方式讲解面试题，看起来确实过瘾，但是对于像我这样的 Java 小白，确实有很多空白的地方没能补上。<br><br>一方面对于文中的内容能看懂，但似乎并不是特别的清晰；另一方面，留言里面有很多精彩的补充。<br><br>反射可以在运行时通过“包名+类名.class”加载一个类，获悉其构造方法，并生成其对象实体，能对其 fields 设值，并唤起其 method。<br><br>动态代理是方便运行时动态构建代理、动态处理代理方法调用的机制。<br><br>如果要是让我在面试的时候去讲反射和动态代理的关系，我还是没法说明白。","like_count":4,"discussions":[{"author":{"id":2744868,"avatar":"","nickname":"麻花","note":"","ucode":"FCCD929A8B47DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391909,"discussion_content":"+2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630684337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347717,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d2/c5/e0531b7f.jpg","nickname":"自由档","note":"","ucode":"9607A3028AC560","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332690,"discussion_content":"+1。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607312052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175921,"user_name":"卡卡","can_delete":false,"product_type":"c1","uid":1166013,"ip_address":"","ucode":"6C1579EDE69CB6","user_header":"https://static001.geekbang.org/account/avatar/00/11/ca/bd/409d9c6a.jpg","comment_is_top":false,"comment_ctime":1580886348,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18760755532","product_id":100006701,"comment_content":"感觉看评论还更能学习到，或许还是我太菜了吧","like_count":4,"discussions":[{"author":{"id":1110662,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f2/86/d689f77e.jpg","nickname":"Hank_Yan","note":"","ucode":"86899B561C502B","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284160,"discussion_content":"我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592460428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8892,"user_name":"灰飞灰猪不会灰飞.烟灭","can_delete":false,"product_type":"c1","uid":1127314,"ip_address":"","ucode":"FF9FB4C902D1F5","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/92/99530cee.jpg","comment_is_top":false,"comment_ctime":1526516951,"is_pvip":false,"replies":[{"id":"2700","content":"计划单独介绍","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526597720,"ip_address":"","comment_id":8892,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18706386135","product_id":100006701,"comment_content":"cglib是怎么实现对目标对象的拦截的呢？","like_count":4,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417890,"discussion_content":"计划单独介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526597720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17160,"user_name":"clz1341521","can_delete":false,"product_type":"c1","uid":1179557,"ip_address":"","ucode":"3BDB4AB454C918","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/a5/eccc7653.jpg","comment_is_top":false,"comment_ctime":1532478014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14417379902","product_id":100006701,"comment_content":"spring是通过设置target-class是否为true，来决定是否强制使用cglib。<br>静态代理：事先写好代理类，可以手工编写，也可以用工具生成。缺点是每个业务类都要对应一个代理类，非常不灵活。<br>    动态代理：运行时自动生成代理对象。缺点是生成代理代理对象和调用代理方法都要额外花费时间。<br>        JDK动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。新版本也开始结合ASM机制。<br>        cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。<br>Java 发射机制的常见应用：动态代理（AOP、RPC）","like_count":3},{"had_liked":false,"id":17513,"user_name":"Darcy","can_delete":false,"product_type":"c1","uid":1188358,"ip_address":"","ucode":"CFC39EA9EC15FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/22/06/9549f55d.jpg","comment_is_top":false,"comment_ctime":1532699223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10122633815","product_id":100006701,"comment_content":"感觉读起来很抽象，还是没搞懂动态代理的真正实现方式？😔","like_count":2},{"had_liked":false,"id":10292,"user_name":"蒙奇D路飞","can_delete":false,"product_type":"c1","uid":1099618,"ip_address":"","ucode":"3A6F82688C2711","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/62/f93c4b0f.jpg","comment_is_top":false,"comment_ctime":1527463831,"is_pvip":false,"replies":[{"id":"3258","content":"谢谢反馈，有章节介绍类似字节码操纵之类底层技术，照顾不同基础","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527490077,"ip_address":"","comment_id":10292,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10117398423","product_id":100006701,"comment_content":"感觉细节层面缺少具体描述，希望后续对底层原理的描述更细致些~","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418428,"discussion_content":"谢谢反馈，有章节介绍类似字节码操纵之类底层技术，照顾不同基础","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527490077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295740,"user_name":"非洲黑猴子","can_delete":false,"product_type":"c1","uid":2639724,"ip_address":"","ucode":"F5FEAC07D562E0","user_header":"https://static001.geekbang.org/account/avatar/00/28/47/6c/78184d19.jpg","comment_is_top":false,"comment_ctime":1622574460,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"5917541756","product_id":100006701,"comment_content":"老师您好，能详细讲一讲新版的JDK对于反射都做了哪些优化吗？谢谢","like_count":1},{"had_liked":false,"id":268796,"user_name":"acqierement","can_delete":false,"product_type":"c1","uid":1234980,"ip_address":"","ucode":"AC8DA74B9CB924","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/24/f48a38f4.jpg","comment_is_top":false,"comment_ctime":1608352410,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5903319706","product_id":100006701,"comment_content":"反射：在运行时动态获取类的相关信息，字段、构造函数、方法，甚至可以修改访问权限。主要是用于一些通用框架中，可以根据配置文件，动态加载对象信息。但是反射会额外的消耗系统资源，并且可以修改访问权限，是不安全的。<br>动态代理：调用者通过代理对象去调用目标对象。调用者根本不知道目标对象的存在。实现阶段不关心代理的是哪个，运行阶段在明确代理的具体目标对象。代理对象内部含有目标对象的引用，提供一个与目标对象相同的接口，在调用目标对象方法之前可以执行特定操作。","like_count":1},{"had_liked":false,"id":145111,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1572209753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867177049","product_id":100006701,"comment_content":"反射是在运行阶段修改程序的代码状态，例如增加，修改函数实现。<br>动态代理是引入新的一层来隔离目标类，使得目标类的新版本更切合于现在的业务逻辑。","like_count":1},{"had_liked":false,"id":72722,"user_name":"嗨!","can_delete":false,"product_type":"c1","uid":1434858,"ip_address":"","ucode":"2078394E61455D","user_header":"https://static001.geekbang.org/account/avatar/00/15/e4/ea/1e3c8bbd.jpg","comment_is_top":false,"comment_ctime":1551703848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5846671144","product_id":100006701,"comment_content":"比如，在 O&#47;R Mapping 框架中，我们为一个 Java 实体对象，运行时自动生成 setter、getter 的逻辑，这是加载或者持久化数据非常必要的，框架通常可以利用反射做这个事情，而不需要开发者手动写类似的重复代码。<br>您好，请问利用反射自动生成get和set方法的实际工作场景是什么呢？我都是自己生成的啊，难道不生成也可以吗？","like_count":1},{"had_liked":false,"id":70812,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1551187983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5846155279","product_id":100006701,"comment_content":"我们的业务在使用日志，授权，事务等用到了代理，由于使用到了spring.就很自然用到了AOP，各种检验，日志输出少了很多，代码也简洁了不少","like_count":1},{"had_liked":false,"id":45553,"user_name":"吴冉波","can_delete":false,"product_type":"c1","uid":1003352,"ip_address":"","ucode":"81B4528B3FBC29","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/58/5c0d9562.jpg","comment_is_top":false,"comment_ctime":1543671431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838638727","product_id":100006701,"comment_content":"看代理这个例子的样子和JavaScript的Monky Patch很像，代理就是JavaScript的Monkey Patch么？","like_count":1},{"had_liked":false,"id":42567,"user_name":"陈坤","can_delete":false,"product_type":"c1","uid":1044533,"ip_address":"","ucode":"DADE8D9C40B2F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f0/35/a5ded70c.jpg","comment_is_top":false,"comment_ctime":1542971575,"is_pvip":false,"replies":[{"id":"15383","content":"谢谢，第24讲补充了一些底层原理性分析","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1543156235,"ip_address":"","comment_id":42567,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5837938871","product_id":100006701,"comment_content":"说的很多都是表层的！比如可以针对cglib，深入讲讲原理","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430131,"discussion_content":"谢谢，第24讲补充了一些底层原理性分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543156235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37705,"user_name":"Lyre","can_delete":false,"product_type":"c1","uid":1275759,"ip_address":"","ucode":"61AB16508AFFDA","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/6f/454951d2.jpg","comment_is_top":false,"comment_ctime":1541687723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5836655019","product_id":100006701,"comment_content":"很有深度","like_count":1},{"had_liked":false,"id":17274,"user_name":"锅盖","can_delete":false,"product_type":"c1","uid":1086226,"ip_address":"","ucode":"232CF1455C96C0","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/12/0bc8bc56.jpg","comment_is_top":false,"comment_ctime":1532532751,"is_pvip":false,"replies":[{"id":"6051","content":"jvm章节有底层原理，照顾不同基础的读者","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1532680037,"ip_address":"","comment_id":17274,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5827500047","product_id":100006701,"comment_content":"确实只是个概述 没涉及到原理 希望可以深入些","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421103,"discussion_content":"jvm章节有底层原理，照顾不同基础的读者","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532680037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10780,"user_name":"Geek_c1b553","can_delete":false,"product_type":"c1","uid":1117297,"ip_address":"","ucode":"7B0733DF4803BE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2u0tANjkVlFdOXGoTticXCm7504pWG107OJcZr9oPTG8Iae0ofrlSfegW5dbicHXnFfVP72v01uNg/132","comment_is_top":false,"comment_ctime":1527694431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5822661727","product_id":100006701,"comment_content":"mysql主从库通过aop动态切换","like_count":1},{"had_liked":false,"id":9118,"user_name":"龙猫","can_delete":false,"product_type":"c1","uid":1112490,"ip_address":"","ucode":"FD726CC969EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","comment_is_top":false,"comment_ctime":1526614442,"is_pvip":false,"replies":[{"id":"2738","content":"AspectJ 我理解是确实能力更全面一些；比如，它可以compile-time，binary，还有用Javaagent作load-timeweaving；<br>cglib 更是runtime weaving","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526629077,"ip_address":"","comment_id":9118,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5821581738","product_id":100006701,"comment_content":"我们使用spring中的aspect来成权限控制，通过切点表达式和注解以更加细粒度的方式控制。","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417974,"discussion_content":"AspectJ 我理解是确实能力更全面一些；比如，它可以compile-time，binary，还有用Javaagent作load-timeweaving；\ncglib 更是runtime weaving","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526629077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8999,"user_name":"jutsu","can_delete":false,"product_type":"c1","uid":1124574,"ip_address":"","ucode":"95CEDEF5D085CF","user_header":"https://static001.geekbang.org/account/avatar/00/11/28/de/54667f13.jpg","comment_is_top":false,"comment_ctime":1526565971,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5821533267","product_id":100006701,"comment_content":"老师的讲解和大神的评论学习很多","like_count":1},{"had_liked":false,"id":8936,"user_name":"OnE","can_delete":false,"product_type":"c1","uid":1006058,"ip_address":"","ucode":"5D10DB1CBE6DCF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/ea/38c063d5.jpg","comment_is_top":false,"comment_ctime":1526528294,"is_pvip":false,"replies":[{"id":"2693","content":"我的理解，核心功能需要最小依赖关系，性能也不错<br>","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526592453,"ip_address":"","comment_id":8936,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5821495590","product_id":100006701,"comment_content":"为什么JDK Proxy是基于反射实现的呢？这其中有啥考量呢？为什么不基于其他呢？","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417910,"discussion_content":"我的理解，核心功能需要最小依赖关系，性能也不错\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526592453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349746,"user_name":"顾君谟","can_delete":false,"product_type":"c1","uid":2529123,"ip_address":"","ucode":"FEF8D396FABC6D","user_header":"https://static001.geekbang.org/account/avatar/00/26/97/63/7c0eec80.jpg","comment_is_top":false,"comment_ctime":1656302834,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656302834","product_id":100006701,"comment_content":"不错，讲的很好","like_count":0},{"had_liked":false,"id":323137,"user_name":"未见","can_delete":false,"product_type":"c1","uid":1939320,"ip_address":"","ucode":"EC8F9B0E5F3D9A","user_header":"https://static001.geekbang.org/account/avatar/00/1d/97/78/9229749e.jpg","comment_is_top":false,"comment_ctime":1637741442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637741442","product_id":100006701,"comment_content":"我更多时候做笔记不是看文章，而是看评论，作者应该构思下自己如何短、精、美，而不是长、繁、乱，每次看完好几篇文章，感觉自己更多是在跟着评论学习。希望作者能想想如何用简短的语言去描述一块知识点。。。","like_count":0},{"had_liked":false,"id":293171,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1621252189,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1621252189","product_id":100006701,"comment_content":"做spring开发，aop必须用到，日志，鉴权，统一异常处理！","like_count":0},{"had_liked":false,"id":283787,"user_name":"林毅鑫","can_delete":false,"product_type":"c1","uid":1917916,"ip_address":"","ucode":"1BB3D186E90D96","user_header":"https://static001.geekbang.org/account/avatar/00/1d/43/dc/95d4f2c5.jpg","comment_is_top":false,"comment_ctime":1615936092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615936092","product_id":100006701,"comment_content":"有点蒙，反射和注入有点混。","like_count":0},{"had_liked":false,"id":280802,"user_name":"铭命鸣","can_delete":false,"product_type":"c1","uid":1360689,"ip_address":"","ucode":"0C2823131FA604","user_header":"","comment_is_top":false,"comment_ctime":1614396833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614396833","product_id":100006701,"comment_content":"编译时就会提示异常，是静态类型。运行时提示异常，是动态类型。","like_count":0},{"had_liked":false,"id":276298,"user_name":"立广","can_delete":false,"product_type":"c1","uid":1282664,"ip_address":"","ucode":"4CCDE80E06D9B5","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/68/c5cca8cc.jpg","comment_is_top":false,"comment_ctime":1611882050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611882050","product_id":100006701,"comment_content":"反射<br><br>      Reflection机制允许程序在正在执行的过程中，利用Reflection APIs取得任何已知名称的类的内部信息，包括：package、 type parameters、 superclass、 implemented interfaces、 inner classes、 outer classes、 fields、 constructors、 methods、 modifiers等，并可以在执行的过程中，动态生成instances、变更fields内容或唤起methods。","like_count":0},{"had_liked":false,"id":256466,"user_name":"皓月冷千山","can_delete":false,"product_type":"c1","uid":2168352,"ip_address":"","ucode":"44D2E02F61279C","user_header":"https://static001.geekbang.org/account/avatar/00/21/16/20/77d41677.jpg","comment_is_top":false,"comment_ctime":1603631068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603631068","product_id":100006701,"comment_content":"一、代理模式（通过代理静默地解决一些业务无关的问题，比如远程、安全、事务、日志、资源关闭等）<br>    ①静态代理：事先写好代理类，可以手工编写，也可以用工具生成。缺点是每个业务类都要对应一个代理类，非常不灵活。<br>    ②动态代理：运行时自动生成代理对象。缺点是生成代理代理对象和调用代理方法都要额外花费时间。<br>    ③JDK动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。新版本也开始结合ASM机制。<br>    ④cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。<br>Java 反射机制的常见应用：动态代理（AOP、RPC）、提供第三方开发者扩展能力（Servlet容器，JDBC连接）、第三方组件创建对象（DI）……<br>二、关于反射<br>反射最大的作用之一就在于我们可以不在编译时知道某个对象的类型，而在运行时通过提供完整的”包名+类名.class”得到。注意：不是在编译时，而是在运行时。<br><br>功能：<br>•在运行时能判断任意一个对象所属的类。<br>•在运行时能构造任意一个类的对象。<br>•在运行时判断任意一个类所具有的成员变量和方法。<br>•在运行时调用任意一个对象的方法。<br>利用Java反射机制我们可以加载一个运行时才得知名称的class，获悉其构造方法，并生成其对象实体，能对其fields设值并唤起其methods。<br>应用场景：<br>反射技术常用在各类通用框架开发中。因为为了保证框架的通用性，需要根据配置文件加载不同的对象或类，并调用不同的方法，这个时候就会用到反射——运行时动态加载需要加载的对象。<br>特点：<br>由于反射会额外消耗一定的系统资源，因此如果不需要动态地创建一个对象，那么就不需要用反射。另外，反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题。","like_count":0},{"had_liked":false,"id":248611,"user_name":"妥协","can_delete":false,"product_type":"c1","uid":1249656,"ip_address":"","ucode":"7201DFE9C12669","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/78/4f0cd172.jpg","comment_is_top":false,"comment_ctime":1600241080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600241080","product_id":100006701,"comment_content":"请教老师，动态代理，是如何替代目标被代理对象的，本来调用被代理对象目标方法的调用，如何变成调用代理对象的方法了？？","like_count":0},{"had_liked":false,"id":202327,"user_name":"阿土","can_delete":false,"product_type":"c1","uid":1183019,"ip_address":"","ucode":"2DBEAD80B0CA3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/2b/4814d3db.jpg","comment_is_top":false,"comment_ctime":1585968746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585968746","product_id":100006701,"comment_content":"Observer使用代理实现？有案例么？好想学习下","like_count":0},{"had_liked":false,"id":200983,"user_name":"地表十进制","can_delete":false,"product_type":"c1","uid":1855791,"ip_address":"","ucode":"C3B5B60748CE67","user_header":"","comment_is_top":false,"comment_ctime":1585702693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585702693","product_id":100006701,"comment_content":"在开发业务系统的实际工作中，需要自己写动态代理的很少，大部分使用springaop功能。比如对controller层的参数打印log日志，对返回结果进行处理(特别是异常抛出后)","like_count":0},{"had_liked":false,"id":196226,"user_name":"ilovealt","can_delete":false,"product_type":"c1","uid":1113180,"ip_address":"","ucode":"35CB4FD836135B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/5c/a3d42cdb.jpg","comment_is_top":false,"comment_ctime":1585262757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585262757","product_id":100006701,"comment_content":"老师的内容都比较有含金量，起码得听3遍。","like_count":0},{"had_liked":false,"id":190929,"user_name":"xuwei","can_delete":false,"product_type":"c1","uid":1164626,"ip_address":"","ucode":"07268C1743839F","user_header":"https://static001.geekbang.org/account/avatar/00/11/c5/52/63008fc7.jpg","comment_is_top":false,"comment_ctime":1584710184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584710184","product_id":100006701,"comment_content":"动态代理的实现方式由多种，所以不能简单回答原理是反射","like_count":0},{"had_liked":false,"id":185316,"user_name":"Seven.Lin澤耿","can_delete":false,"product_type":"c1","uid":1181192,"ip_address":"","ucode":"4CAB732CD6F149","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/08/855abb02.jpg","comment_is_top":false,"comment_ctime":1583560329,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583560329","product_id":100006701,"comment_content":"你在工作中哪些场景使用到了动态代理？相应选择了什么实现技术？选择的依据是什么？<br>工作中很少直接手写动态代理的实践，大部分都是基于框架，如Spring的AOP，Spring Data JPA的Repository，默认都是基于JDK的动态代理来实现，当然，Spring支持修改动态代理的模式，可以切换成cglib来实现。","like_count":0},{"had_liked":false,"id":150321,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1573519103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573519103","product_id":100006701,"comment_content":"6 反射和动态代理 6.1 反射可以直接操作类和对象，可以通过对象获取类定义，获取类的属性，调用类的方法，还可以在运行时动态创建类的实例，还可以在运行时追改类的属性。动态代理是一种方便运行时动态构建代理，动态处理代理方法调用的机制，比如RPC调用，面向切面编程等。6.2 动态代理 是 先实现InvocationHandler，将目标对象代入，然后构建代理的实例，再进行代理的目标调用。动态代理就是根据类在内存中加载的class类创建运行时对象，调用代理类的方法和属性。","like_count":0},{"had_liked":false,"id":148944,"user_name":"I♂佑","can_delete":false,"product_type":"c1","uid":1121548,"ip_address":"","ucode":"D6EA7A7B8E8E6C","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/0c/0054dbd2.jpg","comment_is_top":false,"comment_ctime":1573114671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573114671","product_id":100006701,"comment_content":"我一学Android的，感觉有点看不懂","like_count":0},{"had_liked":false,"id":135543,"user_name":"周星星","can_delete":false,"product_type":"c1","uid":1172160,"ip_address":"","ucode":"ABE0F46B92795D","user_header":"https://static001.geekbang.org/account/avatar/00/11/e2/c0/5579d983.jpg","comment_is_top":false,"comment_ctime":1569207844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569207844","product_id":100006701,"comment_content":"这篇文章完全扛不住面试官的深度轰炸...","like_count":0},{"had_liked":false,"id":130679,"user_name":"Asanz","can_delete":false,"product_type":"c1","uid":1005200,"ip_address":"","ucode":"430AB7ED59EE3F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/90/be01bb8d.jpg","comment_is_top":false,"comment_ctime":1567508192,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1567508192","product_id":100006701,"comment_content":"好了，那动态代理到底是什么原理？","like_count":0,"discussions":[{"author":{"id":1169341,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d7/bd/50d98f9e.jpg","nickname":"黑马有点白986","note":"","ucode":"C24216CBD5D7CC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213089,"discussion_content":"浅尝辄止","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585049692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126582,"user_name":"扬～","can_delete":false,"product_type":"c1","uid":1208163,"ip_address":"","ucode":"6FA7D8FE188341","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/63/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1566432888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566432888","product_id":100006701,"comment_content":"感觉只是点了一下，没说newprocxy的底层呀，还是不明白动态代理在java中怎么实现的<br>","like_count":0},{"had_liked":false,"id":103252,"user_name":"小一","can_delete":false,"product_type":"c1","uid":1240201,"ip_address":"","ucode":"E92DB9907C2076","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/89/681d9b13.jpg","comment_is_top":false,"comment_ctime":1560403878,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560403878","product_id":100006701,"comment_content":"1. 使用场景：网络请求框架，Retrofit。<br>2. 技术：JDK Proxy。<br>3. 依据：面向接口编程，符合规范，可读性可维护性高。","like_count":0},{"had_liked":false,"id":92559,"user_name":"PoL","can_delete":false,"product_type":"c1","uid":1416147,"ip_address":"","ucode":"72BA3C2D50D463","user_header":"https://static001.geekbang.org/account/avatar/00/15/9b/d3/41d04923.jpg","comment_is_top":false,"comment_ctime":1557301024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557301024","product_id":100006701,"comment_content":"jdk自带基于反射机制，cglib asm字节码方式 需要深入","like_count":0},{"had_liked":false,"id":90443,"user_name":"Tao","can_delete":false,"product_type":"c1","uid":1516198,"ip_address":"","ucode":"50C8B56E8A798F","user_header":"https://static001.geekbang.org/account/avatar/00/17/22/a6/fe17743b.jpg","comment_is_top":false,"comment_ctime":1556521309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556521309","product_id":100006701,"comment_content":"基本蒙圈了,只知道代理使用了反射,ASM字节码操作.也知道名词.反射会破坏封装性,我在项目中就使用SpringAop来记录操作日志功能","like_count":0},{"had_liked":false,"id":88164,"user_name":"傲娇的小宝","can_delete":false,"product_type":"c1","uid":1493922,"ip_address":"","ucode":"C079B19BCC1B7C","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/a2/5e7c557e.jpg","comment_is_top":false,"comment_ctime":1555862944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555862944","product_id":100006701,"comment_content":"我的理解是动态代理和包装模式一样，都是对原有类进行功能的增强。只是动态代理的通用性更强，可以节省很多重复代码。","like_count":0},{"had_liked":false,"id":86629,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1555414248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555414248","product_id":100006701,"comment_content":"对于动态代理，一直有一个疑问，希望老师可以帮忙解释一下。<br>就是为何JDK默认要实现一个接口才能进行代理呢？<br>这种设计的出发点是什么呢？<br>是权衡了哪些利弊呢？<br>感谢！","like_count":0},{"had_liked":false,"id":71583,"user_name":"[耶]友超","can_delete":false,"product_type":"c1","uid":1400962,"ip_address":"","ucode":"890572F77C3670","user_header":"https://static001.geekbang.org/account/avatar/00/15/60/82/9a43504b.jpg","comment_is_top":false,"comment_ctime":1551394358,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1551394358","product_id":100006701,"comment_content":"好难呀","like_count":0},{"had_liked":false,"id":65728,"user_name":"free zyq","can_delete":false,"product_type":"c1","uid":1141823,"ip_address":"","ucode":"F1414E56313CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/3f/718038ac.jpg","comment_is_top":false,"comment_ctime":1549606742,"is_pvip":false,"replies":[{"id":"23352","content":"表达的是一个意思，可能我的用词不够准确，不同技术的能力范围是可能有区别的","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1549819262,"ip_address":"","comment_id":65728,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549606742","product_id":100006701,"comment_content":"老师您好，文章中提到：“反射可以运行时修改类定义”。我查阅了一些资料，我认为除了字节码工具（javaassist,asm等）其他途径（例如反射）是无法修改类的定义的（类的定义包含的是方法的行为和属性的类型和数目）<br><br>参考资料：<br>https:&#47;&#47;stackoverflow.com&#47;questions&#47;20817033&#47;using-reflection-to-modify-the-structure-of-an-object","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438567,"discussion_content":"表达的是一个意思，可能我的用词不够准确，不同技术的能力范围是可能有区别的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549819262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61765,"user_name":"larry","can_delete":false,"product_type":"c1","uid":1123412,"ip_address":"","ucode":"3D32D7CD112C1C","user_header":"https://static001.geekbang.org/account/avatar/00/11/24/54/a801a01b.jpg","comment_is_top":false,"comment_ctime":1547795846,"is_pvip":false,"replies":[{"id":"23332","content":"24讲概要性的介绍了一下","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1549814350,"ip_address":"","comment_id":61765,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1547795846","product_id":100006701,"comment_content":"哪个单独章节覆盖了ASM字节码操作？","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436983,"discussion_content":"24讲概要性的介绍了一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549814350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57853,"user_name":"几近虚年","can_delete":false,"product_type":"c1","uid":1355831,"ip_address":"","ucode":"28CD6486EED8E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/b0/37/d654fbac.jpg","comment_is_top":false,"comment_ctime":1546929608,"is_pvip":false,"replies":[{"id":"23316","content":"谢谢反馈，也是文章表达需要改进","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1549806882,"ip_address":"","comment_id":57853,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546929608","product_id":100006701,"comment_content":"看到很枯燥，对于基础不好的我简直是折磨...<br>但是也必须要经过这些折磨，才能多学一点技术知识，继续啃。","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435793,"discussion_content":"谢谢反馈，也是文章表达需要改进","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549806882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57046,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1546607079,"is_pvip":false,"replies":[{"id":"23310","content":"1，第24讲补充了部分原理；<br>2，也不见得，要看产品依赖的类库、平台的情况，通常框架层面会屏蔽很多技术实现细节。目前已经有部分jdk 11在大数据等生产系统实践的实例了，总的代码变化是可控的","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1549806301,"ip_address":"","comment_id":57046,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546607079","product_id":100006701,"comment_content":"1、讲得太深，听不懂了<br>2、若改用了JDK9，是不是以前代码需要重构","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435376,"discussion_content":"1，第24讲补充了部分原理；\n2，也不见得，要看产品依赖的类库、平台的情况，通常框架层面会屏蔽很多技术实现细节。目前已经有部分jdk 11在大数据等生产系统实践的实例了，总的代码变化是可控的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549806301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":18739,"user_name":"绍晖","can_delete":false,"product_type":"c1","uid":1194932,"ip_address":"","ucode":"4196CF795417EC","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/b4/b8d0f8c8.jpg","comment_is_top":false,"comment_ctime":1533560783,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1533560783","product_id":100006701,"comment_content":"动态代理的实际应用场景，spring aop，某些情况下，接口不适用，需要代理处理的时候","like_count":0},{"had_liked":false,"id":16888,"user_name":"Dean","can_delete":false,"product_type":"c1","uid":1178744,"ip_address":"","ucode":"23B6BE5CAEE11C","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/78/ef1cb09c.jpg","comment_is_top":false,"comment_ctime":1532279196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532279196","product_id":100006701,"comment_content":"思考题：用过cglib实现过全动态的类，依据元数据信息生成类实例。性能是比较大的问题，没记错的话实例话1w个动态类比直接new慢了100倍。","like_count":0},{"had_liked":false,"id":16337,"user_name":"小飞哥 ‍超級會員","can_delete":false,"product_type":"c1","uid":1110049,"ip_address":"","ucode":"417F9563B3005B","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/21/104b9565.jpg","comment_is_top":false,"comment_ctime":1531887561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1531887561","product_id":100006701,"comment_content":"我们大多使用sp中的拦，处理一些用户请求和用户<br>还有动态根据请求区分处理类不一样","like_count":0},{"had_liked":false,"id":13961,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1162307,"ip_address":"","ucode":"0E0D44ABB35DBB","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/43/11acdc02.jpg","comment_is_top":false,"comment_ctime":1530086018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1530086018","product_id":100006701,"comment_content":"文章可以推荐一些关于java的一些前沿技术的网站，想提高一下技术敏感性，请不吝赐教！","like_count":0},{"had_liked":false,"id":13862,"user_name":"沈琦斌","can_delete":false,"product_type":"c1","uid":1160094,"ip_address":"","ucode":"6C97F7C7A9ED0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/9e/c88ac921.jpg","comment_is_top":false,"comment_ctime":1530028207,"is_pvip":false,"replies":[{"id":"4644","content":"我理解是，不需要依赖目标类的实现，框架使用限制少些，例如，不再要求实现了setter","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530116746,"ip_address":"","comment_id":13862,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1530028207","product_id":100006701,"comment_content":"老师，我有个疑问。一些ORM框架比如mybatis，我们在使用过程中已经指定如何进行映射的时候，为什么不直接new一个类对象，然后调用setter方法赋值，而要用动态代理呢？这样设计的好处是什么?水平比较菜，还请谅解，谢谢","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419790,"discussion_content":"我理解是，不需要依赖目标类的实现，框架使用限制少些，例如，不再要求实现了setter","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530116746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13861,"user_name":"沈琦斌","can_delete":false,"product_type":"c1","uid":1160094,"ip_address":"","ucode":"6C97F7C7A9ED0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/9e/c88ac921.jpg","comment_is_top":false,"comment_ctime":1530028206,"is_pvip":false,"replies":[{"id":"4652","content":"已回答","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530117898,"ip_address":"","comment_id":13861,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1530028206","product_id":100006701,"comment_content":"老师，我有个疑问。一些ORM框架比如mybatis，我们在使用过程中已经指定如何进行映射的时候，为什么不直接new一个类对象，然后调用setter方法赋值，而要用动态代理呢？这样设计的好处是什么?水平比较菜，还请谅解，谢谢","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419789,"discussion_content":"已回答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530117898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12504,"user_name":"chris","can_delete":false,"product_type":"c1","uid":1109640,"ip_address":"","ucode":"6663E3E09457E3","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/88/a890b41e.jpg","comment_is_top":false,"comment_ctime":1528871744,"is_pvip":true,"replies":[{"id":"4127","content":"我后面会介绍字节码操纵相关，还有类似jdk里怎么生成lambda的代码等，不过jdk是用的asm","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1528897175,"ip_address":"","comment_id":12504,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1528871744","product_id":100006701,"comment_content":"之前项目中用到javaassist，在通用业务流程中埋了一个扩展点，通过xml配置具体实现类来做定制业务处理，大概是类加载时会把对应定制代码生成字节码织入进去，老师可以讲讲javaassist原理吗？","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419279,"discussion_content":"我后面会介绍字节码操纵相关，还有类似jdk里怎么生成lambda的代码等，不过jdk是用的asm","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528897175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12397,"user_name":"煎饼果子小神","can_delete":false,"product_type":"c1","uid":1100980,"ip_address":"","ucode":"8CA7F8AF6716B4","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/b4/c6566bc0.jpg","comment_is_top":false,"comment_ctime":1528796634,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1528796634","product_id":100006701,"comment_content":"感觉还是书看少了，如果看过书，有过业务经验，再来看作者的分享，兴许会有另一种收获。","like_count":0,"discussions":[{"author":{"id":1063422,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/fe/99465085.jpg","nickname":"Adrian","note":"","ucode":"C11789EA4AFC69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394365,"discussion_content":"看书是其次，基于实践去看才会加深理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631857282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10015,"user_name":"George","can_delete":false,"product_type":"c1","uid":1103468,"ip_address":"","ucode":"6BD24945AC8253","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/6c/874ca8ad.jpg","comment_is_top":false,"comment_ctime":1527223718,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1527223718","product_id":100006701,"comment_content":"一个类的属性copy到另外一个类，使用cglib，先完成属性的拷贝","like_count":0},{"had_liked":false,"id":9621,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1114542,"ip_address":"","ucode":"29FA49EEDBFF92","user_header":"https://static001.geekbang.org/account/avatar/00/11/01/ae/f298ef27.jpg","comment_is_top":false,"comment_ctime":1526991577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526991577","product_id":100006701,"comment_content":"代理的作用，使调用着和实现着之间解藕","like_count":0},{"had_liked":false,"id":9620,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1114542,"ip_address":"","ucode":"29FA49EEDBFF92","user_header":"https://static001.geekbang.org/account/avatar/00/11/01/ae/f298ef27.jpg","comment_is_top":false,"comment_ctime":1526991256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526991256","product_id":100006701,"comment_content":"反射的作用：发射使得我们可以在运行的时候再去加载类，创建对象，并能访问到类中的私有属性和方法","like_count":0},{"had_liked":false,"id":9618,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1114542,"ip_address":"","ucode":"29FA49EEDBFF92","user_header":"https://static001.geekbang.org/account/avatar/00/11/01/ae/f298ef27.jpg","comment_is_top":false,"comment_ctime":1526990785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526990785","product_id":100006701,"comment_content":"JAVA是静态的强类型，也就是说JAVA的类型在编译时确定（静态语言），不同类型之前的变量转换需要强制转换（强类型）","like_count":0},{"had_liked":false,"id":9617,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1114542,"ip_address":"","ucode":"29FA49EEDBFF92","user_header":"https://static001.geekbang.org/account/avatar/00/11/01/ae/f298ef27.jpg","comment_is_top":false,"comment_ctime":1526990672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526990672","product_id":100006701,"comment_content":"不同类型变量赋值时，是否需要强制转换来区分语言是强类型还是弱类型","like_count":0},{"had_liked":false,"id":9616,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1114542,"ip_address":"","ucode":"29FA49EEDBFF92","user_header":"https://static001.geekbang.org/account/avatar/00/11/01/ae/f298ef27.jpg","comment_is_top":false,"comment_ctime":1526990604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526990604","product_id":100006701,"comment_content":"语言类型信息在什么时候检查来区分语言是动态类型还是静态类型","like_count":0},{"had_liked":false,"id":9385,"user_name":"iiiDragon","can_delete":false,"product_type":"c1","uid":1012171,"ip_address":"","ucode":"C49416C1CA4C5D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/71/cb/4375b358.jpg","comment_is_top":false,"comment_ctime":1526855822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526855822","product_id":100006701,"comment_content":"老师，多些代码示例。看的时候懂，看完又啥不懂","like_count":0},{"had_liked":false,"id":9368,"user_name":"Ransang","can_delete":false,"product_type":"c1","uid":1133041,"ip_address":"","ucode":"DB67566A627DF2","user_header":"https://static001.geekbang.org/account/avatar/00/11/49/f1/bd61dbb1.jpg","comment_is_top":false,"comment_ctime":1526824132,"is_pvip":false,"replies":[{"id":"2812","content":"具体哪些方面？反射还是动态代理？动态代理可以看看AOP的书籍或文章<br><br><br>字节码操纵，不用太担心，我这章没有写太多，就是担心基础不一样，搞糊涂了，毕竟真正开发中做这个是小众的，大多数不会直接用","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526837425,"ip_address":"","comment_id":9368,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1526824132","product_id":100006701,"comment_content":"听不懂啊，怎么办……该从哪里补课","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418045,"discussion_content":"具体哪些方面？反射还是动态代理？动态代理可以看看AOP的书籍或文章\n\n\n字节码操纵，不用太担心，我这章没有写太多，就是担心基础不一样，搞糊涂了，毕竟真正开发中做这个是小众的，大多数不会直接用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526837425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169341,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d7/bd/50d98f9e.jpg","nickname":"黑马有点白986","note":"","ucode":"C24216CBD5D7CC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213093,"discussion_content":"其实我觉得反射这块没有将明白，比如：如果没有反射，应该怎么实现，现在有反射了，可以使用反射完成。做出差异对比，通过例子能挺熟易懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585049924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9026,"user_name":"王磊","can_delete":false,"product_type":"c1","uid":1050085,"ip_address":"","ucode":"A4DE9804642A08","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/e5/aa579968.jpg","comment_is_top":false,"comment_ctime":1526593498,"is_pvip":false,"replies":[{"id":"2763","content":"我理解没区别","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526671220,"ip_address":"","comment_id":9026,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526593498","product_id":100006701,"comment_content":"反射加载的类和常规通过new对象加载的类，在资源消耗上有什么不同？我理解他们的效果是相同的，只是加载方式不同;加载到内存的区域也是相同的，metaspace。理解对吗?","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417950,"discussion_content":"我理解没区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526671220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9025,"user_name":"王磊","can_delete":false,"product_type":"c1","uid":1050085,"ip_address":"","ucode":"A4DE9804642A08","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/e5/aa579968.jpg","comment_is_top":false,"comment_ctime":1526593001,"is_pvip":false,"replies":[{"id":"2766","content":"纠结于细节无助于说明问题，个人认为最好看主要路径实现机制","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1526671740,"ip_address":"","comment_id":9025,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526593001","product_id":100006701,"comment_content":"关于如下的原文，有些疑惑。两种方式的实现是这么泾渭分明吗，例如jdk代理根据接口生成实现类，不也操作字节码了吗，为什么只强调如cglib; 反过来，cglib既然能通过指定类生成子类，加载父类如果不是反射，那用的是什么? 希望老师把这里澄清一下。<br><br><br>&#39;实现动态代理的方式很多，比如 JDK 自身提供的动态代理，就是主要利用了上面提到的反射机制。还有其他的实现方式，比如利用传说中更高性能的字节码操作机制，类似 ASM、cglib（基于 ASM）、Javassist 等。&#39;","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417949,"discussion_content":"纠结于细节无助于说明问题，个人认为最好看主要路径实现机制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526671740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}