{"id":528619,"title":"01｜初识容器：万事开头难","content":"<p>你好，我是Chrono。</p><p>在课前准备里，我们使用VirtualBox/VMWare搭建了Linux虚拟机环境，有了这个基础，今天我们就开始正式的学习。</p><p>俗话说：“万事开头难”，对于Kubernetes这个庞大而陌生的领域来说更是如此，如何迈出学习的第一步非常关键，所以，今天我们先从最简单、最基本的知识入手，聊聊最流行的容器技术Docker，先搭建实验环境，再动手操作一下，进而破除它的神秘感。</p><h2>Docker的诞生</h2><p>现在我们都已经对Container、Kubernetes这些技术名词耳熟能详了，但你知道这一切的开端——Docker，第一次在世界上的亮相是什么样子的吗？</p><p>九年前，也就是2013年3月15日，在北美的圣克拉拉市召开了一场Python开发者社区的主题会议PyCon，研究和探讨各种Python开发技术和应用，与我们常说的“云”“PaaS”“SaaS”根本毫不相关。</p><p>在当天的会议日程快结束时，有一个“闪电演讲”（lighting talk）的小环节。其中有一位开发者，用了5分钟的时间，做了题为 “The future of Linux Containers” 的演讲，不过临近末尾因为超时而被主持人赶下了台，场面略显尴尬（你可以在<a href=\"https://www.youtube.com/watch?v=wW9CAH9nSLs\">这里</a>回看这段具有历史意义的视频）。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/a1/3e/a13b7a5d4582170ab40cd824cc3edb3e.png?wh=1588x1124\" alt=\"图片\"></p><p>相信你一定猜到了，这个只有短短5分钟的技术演示，就是我们目前所看到的、席卷整个业界的云原生大潮的开端。正是在这段演讲里，Solomon Hykes（dotCloud公司，也就是Docker公司的创始人）首次向全世界展示了Docker技术。</p><p>5分钟的时间非常短，但演讲里却包含了几个现在已经普及，但当时却非常新奇的概念，比如容器、镜像、隔离运行进程等，信息量非常大。</p><p>PyCon2013大会之后，许多人都意识到了容器的价值和重要性，发现它能够解决困扰了云厂商多年的打包、部署、管理、运维等问题，Docker也就迅速流行起来，成为了GitHub上的明星项目。然后在几个月的时间里，Docker更是吸引了Amazon、Google、Red Hat等大公司的关注，这些公司利用自身的技术背景，纷纷在容器概念上大做文章，最终成就了我们今天所看到的至尊王者Kubernetes的出现。</p><h2>Docker的形态</h2><p>好了，下面我们就要来一个“情境再现”，在我们的Linux虚拟机上搭建一个容器运行环境，模拟一下当年Solomon Hykes初次展示Docker的场景。</p><p>当然，如今的Docker经过了九年的发展，已经远不是当初的“吴下阿蒙”了，不过最核心的那些概念和操作还是保持了一贯性，没有太大的变化。</p><p>首先，我们需要对Docker的形态有所了解。目前使用Docker基本上有两个选择：<strong>Docker Desktop</strong>和<strong>Docker Engine</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/cd/a5b2525e1f38279e36097e60yy5fc1cd.png?wh=1920x570\" alt=\"图片\" title=\"图片来自网络\"></p><p>Docker Desktop是专门针对个人使用而设计的，支持Mac和Windows快速安装，具有直观的图形界面，还集成了许多周边工具，方便易用。</p><p>不过，我个人不是太推荐使用Docker Desktop，原因有两个。第一个，它是商业产品，难免会带有Docker公司的“私人气息”，有一些自己的、非通用的东西，不利于我们后续的Kubernetes学习。第二个，它只是对个人学习免费，受条款限制不能商用，我们在日常工作中难免会“踩到雷区”。</p><p>Docker Engine则和Docker Desktop正好相反，完全免费，但只能在Linux上运行，只能使用命令行操作，缺乏辅助工具，需要我们自己动手DIY运行环境。不过要是较起真来，它才是Docker当初的真正形态，“血脉”最纯正，也是现在各个公司在生产环境中实际使用的Docker产品，毕竟机房里99%的服务器跑的都是Linux。</p><p>所以，在接下来的学习过程里，我推荐使用Docker Engine，之后在本专栏内，如果没有什么特别的声明，Docker这个词通常指的就是Docker Engine。</p><h2>Docker的安装</h2><p>在课前准备里，我们已经在Linux虚拟机里安装了一些常用软件，用的是Ubuntu的包管理工具apt，所以，我们仍然可以使用同样的方式来安装Docker。</p><p>先让我们尝试输入命令 <code>docker</code> ，会得到“命令未找到”的提示，还有如何安装的建议：</p><pre><code class=\"language-plain\">Command 'docker' not found, but can be installed with:\nsudo apt install docker.io\n</code></pre><p>所以，你只需要按照系统的提示，“照葫芦画瓢”输入命令，安装 <code>docker.io</code> 就可以了。为了方便，你还可以使用 <code>-y</code> 参数来避免确认，实现自动化操作：</p><pre><code class=\"language-plain\">sudo apt install -y docker.io #安装Docker Engine\n</code></pre><p>刚才说过，Docker Engine不像Docker Desktop那样可以安装后就直接使用，必须要做一些手工调整才能用起来，所以你还要在安装完毕后执行下面的两条命令：</p><pre><code class=\"language-plain\">sudo service docker start         #启动docker服务\nsudo usermod -aG docker ${USER}   #当前用户加入docker组\n</code></pre><p>第一个 <code>service docker start</code> 是启动Docker的后台服务，第二个 <code>usermod -aG</code> 是把当前的用户加入Docker的用户组。这是因为操作Docker必须要有root权限，而直接使用root用户不够安全，<strong>加入Docker用户组是一个比较好的选择，这也是Docker官方推荐的做法</strong>。当然，如果只是为了图省事，你也可以直接切换到root用户来操作Docker。</p><p>上面的三条命令执行完之后，我们还需要退出系统（命令 <code>exit</code> ），再重新登录一次，这样才能让修改用户组的命令 <code>usermod</code> 生效。</p><p><strong>现在我们就可以来验证Docker是否安装成功了，使用的命令是 <code>docker version</code> 和 <code>docker info</code>。</strong></p><p><code>docker version</code> 会输出Docker客户端和服务器各自的版本信息：</p><p><img src=\"https://static001.geekbang.org/resource/image/fa/f9/fa0088c858d63d6b423155f854a1ddf9.png?wh=1262x1746\" alt=\"图片\"></p><p>下面是我从中摘出的比较关键的版本号和系统信息。可以看到，我使用的是Docker Engine 20.10.12，系统是Linux，硬件架构是arm64，也就是Apple M1：</p><pre><code class=\"language-plain\">Client:\n&nbsp;Version:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;20.10.12\n&nbsp;OS/Arch:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;linux/arm64\nServer:\n&nbsp;Engine:\n&nbsp; Version:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 20.10.12\n&nbsp; OS/Arch:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; linux/arm64\n</code></pre><p><code>docker info</code> 会显示当前Docker系统相关的信息，例如CPU、内存、容器数量、镜像数量、容器运行时、存储文件系统等等，这里我也摘录了一部分：</p><pre><code class=\"language-plain\">Server:\n&nbsp;Containers: 1\n&nbsp; Running: 0\n&nbsp; Paused: 0\n&nbsp; Stopped: 1\n&nbsp;Images: 8\n&nbsp;Server Version: 20.10.12\n&nbsp;Storage Driver: overlay2\n&nbsp; Backing Filesystem: extfs\n&nbsp;Cgroup Driver: systemd\n&nbsp;Default Runtime: runc\n&nbsp;Kernel Version: 5.13.0-19-generic\n&nbsp;Operating System: Ubuntu Jammy Jellyfish (development branch)\n&nbsp;OSType: linux\n&nbsp;Architecture: aarch64\n&nbsp;CPUs: 2\n&nbsp;Total Memory: 3.822GiB\n&nbsp;Docker Root Dir: /var/lib/docker\n</code></pre><p><code>docker info</code> 显示的这些信息，对于我们了解Docker的内部运行状态非常有用，比如在这里，你就能够看到当前有一个容器处于停止状态，有8个镜像，存储用的文件系统是overlay2，Linux内核是5.13，操作系统是Ubuntu 22.04 Jammy Jellyfish，硬件是aarch64，两个CPU，内存4G。</p><h2>Docker的使用</h2><p>现在，我们已经有了可用的Docker运行环境，就可以来重现9年前Solomon Hykes的那场简短的技术演示了。</p><p>首先，我们使用命令 <code>docker ps</code>，它会列出当前系统里运行的容器，就像我们在Linux系统里使用 <code>ps</code> 命令列出运行的进程一样。</p><p>注意，所有的Docker操作都是这种形式：以 <code>docker</code> 开始，然后是一个具体的子命令，之前的 <code>docker version</code> 和 <code>docker info</code> 也遵循了这样的规则。你还可以用 <code>help</code> 或者 <code>--help</code> 来获取帮助信息，查看命令清单和更详细的说明。</p><p>因为我们刚刚安装好Docker环境，这个时候还没有运行任何容器，所以列表显然是空的。</p><p><img src=\"https://static001.geekbang.org/resource/image/00/97/007f6c4fee5cda75b8210d72ff217197.png?wh=1844x126\" alt=\"图片\"></p><p>接下来，让我们尝试另一个非常重要的命令 <code>docker pull</code> ，从外部的镜像仓库（Registry）拉取一个busybox镜像（image），你可以把它类比成是Ubuntu里的“apt install”下载软件包：</p><pre><code class=\"language-plain\">docker pull busybox      #拉取busybox镜像\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/b9/b9/b9f2fde7f366fd5f1b65b4d953c6a6b9.png?wh=1920x387\" alt=\"图片\"></p><p><code>docker pull</code> 会有一些看起来比较奇怪的输出信息，现在我们暂时不用管，后续的课程会有详细解释。</p><p>我们再执行命令 <code>docker images</code> ，它会列出当前Docker所存储的所有镜像：</p><p><img src=\"https://static001.geekbang.org/resource/image/06/7c/068da8888c510364bbae0ecd0237707c.png?wh=1712x186\" alt=\"图片\"></p><p>可以看到，命令会显示有一个叫busybox的镜像，镜像的ID号是一串16进制数字，大小是1.41MB。</p><p>现在，我们就要从这个镜像启动容器了，命令是 <code>docker run</code> ，执行 <code>echo</code> 输出字符串，这也正是Solomon Hykes在大会上所展示的最精彩的那部分：</p><pre><code class=\"language-plain\">docker run busybox echo hello world\n</code></pre><p>这条命令会在我们的终端上，输出计算机世界最著名的语句“hello world”：</p><p><img src=\"https://static001.geekbang.org/resource/image/69/40/69d706450c4fb732a4f0f66462a74f40.png?wh=1324x126\" alt=\"图片\"></p><p>然后我们再用 <code>docker ps</code> 命令，加上一个参数 <code>-a</code> ，就可以看到这个已经运行完毕的容器：</p><p><img src=\"https://static001.geekbang.org/resource/image/97/c5/97d5e4e1280cfc8f178c3521a9cc68c5.png?wh=1920x112\" alt=\"图片\"></p><p>以上的这些，基本上就是Solomon Hykes闪电演讲的全部内容了。</p><p>初次接触容器的你可能会感到很困惑，这些命令都做了什么？看起来并没有展示出什么特别神奇的本领啊？可能还不如直接写一个Shell脚本来得省事。</p><p>有同样感想的不止你一个，也许PyCon2013当时绝大部分的现场观众也都有这样的疑问。不要着急，我们在后续的课程再逐步讲解这其中的奥妙。</p><h2>Docker的架构</h2><p>这里我再稍微讲一下Docker Engine的架构，让你有个初步的印象，也为之后的学习做一个铺垫。</p><p>下面的这张图来自Docker官网（<a href=\"https://docs.docker.com/get-started/overview/\">https://docs.docker.com/get-started/overview/</a>），精准地描述了Docker Engine的内部角色和工作流程，对我们的学习研究非常有指导意义。</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/fe/c8116066bdbf295a7c9fc25b87755dfe.jpg?wh=1920x1048\" alt=\"图片\"></p><p>刚才我们敲的命令行 <code>docker</code> 实际上是一个客户端client ，它会与Docker Engine里的后台服务Docker daemon通信，而镜像则存储在远端的仓库Registry里，客户端并不能直接访问镜像仓库。</p><p>Docker client可以通过 <code>build</code>、<code>pull</code>、<code>run</code>等命令向Docker daemon发送请求，而Docker daemon则是容器和镜像的“大管家”，负责从远端拉取镜像、在本地存储镜像，还有从镜像生成容器、管理容器等所有功能。</p><p>所以，在Docker Engine里，真正干活的其实是默默运行在后台的Docker daemon，而我们实际操作的命令行工具“docker”只是个“传声筒”的角色。</p><p>Docker官方还提供一个“hello-world”示例，可以为你展示Docker client到Docker daemon再到Registry的详细工作流程，你只需要执行这样一个命令：</p><pre><code class=\"language-plain\">docker run hello-world\n</code></pre><p>它会先检查本地镜像，如果没有就从远程仓库拉取，再运行容器，最后输出运行信息：</p><p><img src=\"https://static001.geekbang.org/resource/image/2b/06/2b1c5561438a7bdb6243dcb450e5c006.png?wh=1920x1014\" alt=\"图片\"></p><h2>小结</h2><p>好了，今天我们初步了解了容器技术，再简单小结一下主要的内容：</p><ol>\n<li>容器技术起源于Docker，它目前有两个产品：Docker Desktop和Docker Engine，我们的课程里推荐使用免费的Docker Engine，它可以在Ubuntu系统里直接用apt命令安装。</li>\n<li>Docker Engine需要使用命令行操作，主命令是 <code>docker</code>，后面再接各种子命令。</li>\n<li>查看Docker的基本信息的命令是 <code>docker version</code> 和 <code>docker info</code> ，其他常用的命令有 <code>docker ps</code>、<code>docker pull</code>、<code>docker images</code>、<code>docker run</code>。</li>\n<li>Docker Engine是典型的客户端/服务器（C/S）架构，命令行工具Docker直接面对用户，后面的Docker daemon和Registry协作完成各种功能。</li>\n</ol><h2>课下作业</h2><p>最后是课下作业时间，给你留两个思考题：</p><ol>\n<li>学完了这节课，你对容器技术和Docker有什么样的认识和感受？</li>\n<li>Docker Engine为什么要设计成客户端/服务器（C/S）架构？它有什么样的好处？</li>\n</ol><p>欢迎在留言区发言参与讨论，如果觉得有收获，也欢迎你转发给身边的朋友一起学习。我们下节课见。</p><p><img src=\"https://static001.geekbang.org/resource/image/04/9e/04f0947d7c65dcb8d3736f2f68344f9e.jpg?wh=1920x3210\" alt=\"\"></p>","neighbors":{"left":{"article_title":"课前准备｜动手实践才是最好的学习方式","id":528614},"right":{"article_title":"02｜被隔离的进程：一起来看看容器的本质","id":528640}},"comments":[]}