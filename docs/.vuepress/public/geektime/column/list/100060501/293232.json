{"id":293232,"title":"09｜子序列问题：详解重要的一大类动态规划问题","content":"<p>你好，我是卢誉声。</p><p>我们曾在上一课中提到，有两类重要的动态规划问题需要掌握，其中一个是子数组问题，另一个是子序列问题。今天，我们将深入讲解动态规划中的另一个经典问题，即子序列问题。</p><p>相较于子数组问题而言，子序列问题要更复杂一些，这是由子序列的特性决定的。不过有一点比较类似，那就是我们仍然需要小心定义备忘录结构和其对应值的含义。</p><p>你应该注意到了，我们把子数组问题和子序列问题放在一块儿讲，这意味着它们之间是有联系的。因此，在开始今天的课程前，我提出这样一个问题：<strong>子数组和子序列问题在求解时有什么异同呢？</strong></p><p>接下来就让我们带着这个问题，开始今天的学习之旅吧。</p><h2>什么是子序列问题？</h2><p>类似的，我们要明确一下什么是动态规划中的子序列问题。首先，相较于子数组问题而言，子序列问题要更复杂一些。这是因为，子数组问题是连续的，而子序列问题是不连续的。比如说字符串 “I wanna keep a giraffe in my backyard” 的一种子序列就可以是 “Igbackd”。</p><p>因此，你可以看到，子序列不再要求答案是一个连续的串。即便用穷举的思路求解问题，我们都不一定知道该从何下手解决。特别的，当涉及到两个数组或字符串作为输入的情况时，如果没有处理经验，真的不容易想到解法。</p><!-- [[[read_end]]] --><p>其次，一个字符串的子序列，是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。举个例子，“ace” 是 “abcde” 的子序列，但是 “aec” 就不是 “abcde” 的子序列。</p><p>再次，如果一个问题涉及以下特征，那么它大概率需要使用动态规划来进行求解：</p><ol>\n<li>题目涉及子序列；</li>\n<li>问题符合动归典型特征，特别是求“最”优解问题（最大值和最小值）；</li>\n<li>题目的答案是题设数组的子序列，或者来源于子序列。</li>\n</ol><p>其实，一旦技术面试问题涉及子序列，你都几乎不需要考虑动态规划以外的解法了。为什么这么说呢？你考虑一下，一个数组或字符串子序列的组合数肯定是指数级别的，如果想依赖纯粹的穷举来进行求解，从时间复杂度上看，几乎没有求解的可能性。</p><p>所以啊，我们虽然说动态规划中的子序列问题是经典动归问题，但它不同于0-1背包这种经典问题，事实上它并不好解决。不过我们都学到这了，你应该坚信再难的动归问题都应该有模板可以应对。</p><p>没错，今天就让我们用两个经典的案例，来找出解决子序列问题的思路。</p><h2>最长回文子序列</h2><p>如果问题含有最长子序列这样的提法，那么它一定是动态规划问题。现在，先让我们一起来看一看最长“回文”子序列问题的描述。</p><p>问题：给定一个字符串 s ，找到其中最长的回文子序列，并返回该序列的长度。可以假设 s 的最大长度为 1000。</p><pre><code>示例1：\n\n输入：&quot;asssasms&quot;\n输出：5\n解释：一个可能的最长回文子序列为 &quot;sssss&quot;，另一种可能的答案是 &quot;asssa&quot;。\n</code></pre><pre><code>示例2：\n\n输入：&quot;abba&quot;\n输出：4\n解释：有三个子序列满足题设要求：&quot;aa&quot;、&quot;bb&quot; 和 &quot;abba&quot;，因此答案为 4。\n</code></pre><h3>算法问题分析</h3><p>还记得在解决回文子串时给出的那个简单例子么？我们当时有提到过 “子数组问题的特征是答案也必须是连续的”。显然，子序列问题的特征发生了变化，它的答案可以是连续的，也可以是不连续的。</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/b2/bbec56f66358506ba5952efc9c0293b2.png?wh=596*156\" alt=\"\"></p><p>我现在输入的字符串是 “abca”，那么 “aca” 是原问题的答案吗？在子数组问题中不是；但现在，“aca” 是原问题的答案了。</p><p>我在前面曾提到过涉及子序列的问题基本上全部都是动态规划问题。那么这个问题符合动态规划问题的特征吗？我们来看一下：</p><ol>\n<li>重叠子问题：在穷举的过程中肯定存在重复计算的问题。这是因为各种排列组合间肯定存在重叠子问题的情况；</li>\n<li>无后效性：对不是最长的回文子序列来说，它一定被包含在更长的回文子序列中。而更长的回文子序列不会包含在较短的回文子序列中，依赖是单向的；</li>\n<li>最优子结构：对整个字符串，其最长的回文子序列肯定包含了更短长度字符串中的回文子序列，因此子问题可以递归求解。</li>\n</ol><p>既然是动归问题，接下来我们看看该如何写出状态转移方程吧。</p><h3>写出状态转移方程</h3><p>首先，我们先来确定<strong>初始化状态</strong>。从问题的示例就可以看出（当然也很容易想到），单个字符一定是它自己的回文。</p><p>接着，再来确定<strong>状态参数</strong>。跟回文子串问题类似，我们需要确定子序列的位置：一个是起始位置，另一个是结束位置。在算法的执行过程中，起始和结束位置是变化的，因此它们是状态参数。</p><p>既然有两个状态，我们用二维数组来定义备忘录。设 <strong>$DP[i][j]$，其对应的值是字符串 $i…j$ 中最长回文子序列的长度</strong>。你可能会问，为何要这样设计备忘录的定义呢？我们曾在讲解子数组问题时讨论了 “备忘录定义对编写代码的影响”，这里的影响其实并不直接是代码，主要影响的是状态转移方程的设计（因为有了状态转移方程，才能编写代码嘛）。</p><p>现在让我们回到动态规划问题的本质问题上来。动态规划是数学归纳法的一种很好的体现，即如何从已知的答案推导出未知的部分。回到最长回文子序列问题上来，如果知道了 $s[i+1 … j-1]$ 中最长回文子序列的长度（即 $DP[i+1][j-1]$），我们能通过它推导出 $s[i … j]$ 中最长回文子序列的长度（即 $DP[i][j]$）吗？</p><p><img src=\"https://static001.geekbang.org/resource/image/03/46/03732428e6aa1e2880d7c2b50dcf7546.png?wh=1502*788\" alt=\"\"></p><p>根据以上决策示意图，我们显然可以通过 $DP[i+1][j-1]$ 求出 $DP[i][j]$。这是因为状态转移是连续的，我们可以通过向左移动一位或向右移动一位，得到更大规模子问题的答案。</p><p>那么让状态转移的<strong>决策</strong>是什么呢？其实这里的决策跟回文子串问题类似，当前子问题的答案就是通过前面的子问题 ➕ 当前的决策推导出来的。</p><p>而当前的<strong>决策</strong>就是：计算出向子问题的两边分别扩充一个元素后得到的答案。你可以参考示意图来更好地理解这个状态转移过程。</p><p>一切就绪了，现在就可以给出回文子串问题的状态转移方程了。我们仍然把字符串当作数组来访问，并考虑当 $s[i] == s[j]$ 和 $s[i] != s[j]$ 两种情况进行讨论：</p><ol>\n<li>如果 $s[i] == s[j]$（示意图是相等的），那么 $DP[i][j] = 2 + DP[i+1][j-1]$；</li>\n<li>如果 $s[i] != s[j]$，就意味着 $s[i]$ 和 $s[j]$ 是不可能同时出现在 $s[i  … j]$ 的最⻓回文子序列中的。这时我们该怎么做？这里需要进一步作出决策。</li>\n</ol><p>既然 $s[i] != s[j]$，我们可以考虑把 $s[i]$ 和 $s[j]$ 分别放入 $s[i+1 … j-1]$ 中试试，这样就会产生两个子状态，其中状态A：$s[i … j-1]$；状态B：$s[i+1 … j]$。接着，再看看哪个子串产生的回文子序列更⻓，即 max(状态A, 状态B)。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/ea/276bf4ed8234cef82cd2125a5e7955ea.png?wh=1502*481\" alt=\"\"></p><p>这个过程可以用以上示意图进行描述。在示意图中，状态A：$DP[0][4] = 5$；状态B：$DP[1][5] = 4$。因此，这里通过决策后得到的状态应该是 max(状态A, 状态B) = 5。</p><p>$$DP(i, j)=\\left\\{\\begin{array}{c}<br>\n2 + DP[i+1][j-1],\\  s[i]==s[j]\\\\\\<br>\nmax(DP[i+1][j], DP[i][j-1]),\\ s[i] \\ne s[j]<br>\n\\end{array}\\right.$$</p><h3>编写代码进行求解</h3><p>所有先决条件都解决了，现在我们来看一下如何用动归来求解此问题，我直接给出代码。</p><p>Java 实现：</p><pre><code>int getLongestPalindromeSubseq(String s) {\n    int n = s.length(); if (0 == n) return 0;\n\n    int[][] dp = new int[n][n]; \n    for (int[] row : dp) { Arrays.fill(row, 0); }\n    for (int i = 0; i &lt; n; i++) dp[i][i] = 1; // 初始化状态\n\n    for (int i = n-1; i &gt;= 0; i--) {\n        for (int j = i+1; j &lt; n; j++) {\n            if (s.charAt(i)==s.charAt(j)) {\n                dp[i][j] = 2 + dp[i+1][j-1];\n            } else {\n                dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]); // 作出进一步决策\n            }\n        }\n    }\n\n    return dp[0][n-1]; // 输出答案\n}\n</code></pre><p>C++ 实现：</p><pre><code>int GetLongestPalindromeSubseq(string s) {\n    int n = static_cast&lt;int&gt;(s.size());\n    if (0 == n) return 0;\n\n    int dp[n][n]; memset(dp, 0, sizeof(dp));\n    for (int i = 0; i &lt; n; i++) dp[i][i] = 1; // 初始化状态\n\n    for (int i = n-1; i &gt;= 0; i--) {\n        for (int j = i+1; j &lt; n; j++) {\n            if (s[i]==s[j]) {\n                dp[i][j] = 2 + dp[i+1][j-1];\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]); // 作出进一步决策\n            }\n        }\n    }\n\n    return dp[0][n-1]; // 输出答案\n}\n</code></pre><p>在代码实现中，我们先进行了初始化状态的操作，将备忘录初始化为全 0 （编程习惯）。此外，单个字符一定是它自己的回文，因此备忘录中的对角线都是 1。</p><p>除此之外，你有没有发现这里对字符串迭代的顺序作了特别处理？没错，这是刻意为之的。为什么我们需要这样迭代字符串呢？这就涉及到了动态规划的计算方向问题了。</p><p>这是我们第一次在专栏中提出<strong>计算方向</strong>的概念，这是彻底理解动态规划问题的重中之重。如果你仔细阅读了之前课程中的状态转移图，你就会发现，我曾多次在图中用红色的箭头标出状态转移的方向。</p><p>事实上，那就是计算方向了，只不过对于我们之前遇到的问题来说，都是从左上到右下进行计算的。</p><p>对于回文子序列问题来说，根据备忘录的定义，由于我们最终需要的答案存放在 $DP[0][n-1]$中，因此需要从最右下角反向推导：$DP[i][j]$ 需要的是其左侧 $DP[i][j-1]$、左下角 $DP[i+1][j-1]$ 以及正下方 $DP[i+1][j]$ 的值来满足上述状态转移方程。</p><p><img src=\"https://static001.geekbang.org/resource/image/db/c5/dbdedd4d624cb7aa6bb734c15a2f0bc5.png?wh=1738*622\" alt=\"\"></p><p>按照图片所展示的，$DP[0][7]$ 是根据 $DP[0][6]$、$DP[1][6]$ 和 $DP[1][7]$ 推导出来的。</p><p>当前子问题的计算，需要依赖于哪些更小的子问题推导出来呢？寻找这个线索，你应该能够找出备忘录上的计算方向。</p><p>如果你还没有完全理解计算方向这个问题，也不需要担心，在后续的课程中我们还会遇到这个问题，而且还有专题去彻底讲清楚计算方向这个概念。</p><h2>最长公共子序列</h2><p>刚才我们有提到过，当涉及到两个数组或字符串作为输入的情况时，问题会变得比较复杂。而最长公共子序列（Longest Common Subsequence，LCS）问题就需要从两个字符串中寻找公共子序列。让我们来看看这个问题的描述。</p><p>问题：给定两个字符串 $text1$ 和 $text2$，返回这两个字符串的最长公共子序列的长度。若这两个字符串没有公共子序列，则返回 0。其中：</p><ul>\n<li>1 ≤ text1.length ≤ 1000；</li>\n<li>1 ≤ text2.length ≤ 1000；</li>\n<li>输入的字符串只含有小写英文字符。</li>\n</ul><pre><code>示例1：\n\n输入：text1 = &quot;abcde&quot;, text2 = &quot;ade&quot; \n输出：3  \n解释：最长公共子序列是 &quot;ade&quot;，它的长度为 3。\n</code></pre><pre><code>示例2:\n\n输入：text1 = &quot;abc&quot;, text2 = &quot;def&quot;\n输出：0\n解释：显然，两个字符串没有公共子序列，返回 0。\n</code></pre><h3>算法问题分析</h3><p>一般来说，在处理多个字符串的动态规划问题时，如果用数组作为备忘录的基本数据结构，那么它的维度则跟字符串的个数是线性相关的，即有几个字符串待解决，我们就创建几维的数组。当然也有例外，有些问题可能是将多个字符串进行合并，然后达到降维的目的。</p><p>一个数组或字符串子序列的组合数肯定是指数级别的。如果想依赖纯粹的穷举来进行求解，从时间复杂度上看，几乎没有求解的可能性。因此我们几乎可以“武断”地判断该问题需使用动态规划来进行求解。</p><p>你可以根据我们多次提到的判断方法，来判断该问题是否满足重叠子问题、无后效性和最优子结构这几个特征。然后，再接着往下看。</p><p>在这个问题中，我们需要创建一个二维数组作为我们的备忘录来存储中间计算的状态。既然已经确定了是二维数组，那么我们该如何理解备忘录的定义呢？</p><p>由于这个问题较为复杂，需要一些技巧，因此我在这里先给出备忘录的定义，解完题目之后我们再倒回来理解为何要这样设计。</p><h3>写出状态转移方程</h3><p>现在，我直接给出最长公共子序列问题的备忘录定义。<strong>$DP[i][j]$ 表示的是 $text1[0 … i]$ 和 $text2[0 … j]$ 的最长公共子序列的长度</strong>。</p><p>如果我们以示例 1 中的输入作为例子，就可以画出备忘录。</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/64/1e4f673ac02e7c69e97f0b5dde46f564.png?wh=1472*454\" alt=\"\"></p><p>其中红色箭头展示了状态转移的<strong>计算方向</strong>。从图中可以得知，$DP[2][4] = 2$，其含义是 “ad”（即 $text2[0 … 2]$）和 “abcd”（即 $text1[0 … 4]$）的最长公共子序列的长度；$DP[3][5] = 3$ 即 “ade”（即 $text2[0 … 3]$）和 “abcde”（即 $text1[0 … 5]$）的最长公共子序列的长度，即原问题的答案。</p><p>通过上图的展示，你可能会产生一个疑问，那就是为何要设计一个空字符作为计算开始的位置。这其实是<strong>初始化状态</strong>的一部分。当两个字符的其中一个为空串，或同时为空串时，原问题的答案肯定是 0。显然，一个字符串与空串的公共子序列肯定是空的。与此同时，这样的设计还能让真正的字符串迭代拥有能够推导计算的初始化值。</p><p>接着，我们再来看<strong>状态参数</strong>。根据前面的描述，我们用变量 $i$ 和变量 $j$ 描述了整个问题的求解空间，备忘录是基于二维数组构建的。因此，我们的状态参数就是变量 $i$ 和变量 $j$。</p><p>最后，我们该如何<strong>决策</strong>状态的转移？对于 $text1$ 和 $text2$ 这两个字符串中的每个字符 $text1[i]$ 和 $text2[j]$，其实只有两种选择：</p><ol>\n<li>$text1[i-1] == text2[j-1]$，即当前遍历的两个字符在最长公共子序列中，此时 $DP[i][j] = 1 + DP[i-1][j-1]$；</li>\n<li>$text1[i-1] != text2[j-1]$，即当前遍历的两个字符<strong>至少有一个不在</strong>最长公共子序列中。仿照最长回文子序列的处理方法，由于两个字符至少有一个不在，因此我们需要丢弃一个。因此在不等的情况下，需要进一步作出决策。</li>\n</ol><p>由于我们要求的是最长公共子序列，因此哪个子问题的答案比较长，就留下谁：$max(DP[i-1][j]$, $DP[i][j-1]$)。通过以上线索，我们得出了求解该问题的状态转移方程。</p><p>$$DP(i, j)=\\left\\{\\begin{array}{c}<br>\ndp[i][j] = 1 + dp[i-1][j-1],\\ text1[i]==text2[j]\\\\\\<br>\nmax(dp[i-1][j], dp[i][j-1]),\\ text1[i] \\ne text2[j]<br>\n\\end{array}\\right.$$</p><h3>编写代码进行求解</h3><p>我直接给出状态转移方程对应的求解代码。</p><p>Java 实现：</p><pre><code>int getLongestCommonSubsequence(String text1, String text2) {\n    int m = text1.length(), n = text2.length();\n    int[][] dp = new int[m + 1][n + 1];\n    for (int[] row: dp) { Arrays.fill(row, 0); }\n\n    for (int j = 1; j &lt;= n; j++) {\n        for (int i = 1; i &lt;= m; i++) {\n            if (text2.charAt(j - 1) == text1.charAt(i - 1)) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n\n    return dp[m][n];\n}\n</code></pre><p>C++ 实现：</p><pre><code>int GetLongestCommonSubsequence(string text1, string text2) {\n    int m = text1.size(), n = text2.size();\n    int dp[m+1][n+1]; memset(dp, 0, sizeof(dp)); // 多一行一列为了 i, j=1 时有 base value\n\n    for (int j = 1; j &lt;= n; j++) {\n        for (int i = 1; i &lt;= m; i++) {\n            if (text2[j-1]==text1[i-1]) {\n                dp[i][j] = dp[i-1][j-1] + 1;\n            } else {\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n    }\n\n    return dp[m][n];\n}\n</code></pre><p>在代码中，我们先进行了初始化状态的操作，将备忘录初始化为全 0 （编程习惯）。</p><p>接着，我们分别遍历两个字符串，外层循环遍历第一个字符串，从 1 开始到 n（第一个字符串长度）为止；内层循环遍历第二个字符串，从 1 开始到 m（第二个字符串长度）为止。</p><p>每次先比较一下两个字符串的当前字符：</p><ol>\n<li>如果当前字符相同，那么说明当前遍历的两个字符均在最长公共子序列中，因此需要将当前序列长度加 1。由于之前的序列长度在 $dp[i-1][j-1]$，因此结果是 $dp[i-1][j-1] + 1$；</li>\n<li>如果当前字符不同，我们需要从之前的序列中选取一个最大的，也就是从 $dp[i-1][j]$ 和 $dp[i][j-1]$ 中取最大值。</li>\n</ol><p>求解结束后，原问题的答案存储在 $dp[m][n]$ 中。</p><h2>课程总结</h2><p>动态规划领域中，所谓子序列问题，就是从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列；而对子数组问题，则是从给定的序列中提取连续的序列。</p><p>所以，子序列问题往往比子数组问题要复杂一些，因为求解的子问题可能不是连续的字符串。但是，对于动态规划来说，处理问题的思路往往是不变的，其实只是换一种思路去寻找子问题罢了。</p><p>从我们分析的两个问题中基本可以看出子序列问题的处理模板，在子序列问题中由于暴力求解的代价更高，因此动态规划带来的价值也就更高。对于全面总结的处理子序列问题的动归套路，我会在下一个模块中进行讲解。</p><h2>课后思考</h2><p>对于这一课讲解的最长公共子序列问题，我们对最直接的解决方案进行了讲解。但实际上，代码还可以作出进一步优化。请你思考一下，如何优化这个方案的时间复杂度和空间复杂度？并给出改进后的算法代码。</p><p>欢迎留言和我分享你的想法，我们一同交流！</p>","neighbors":{"left":{"article_title":"08｜子数组问题：从解决动归问题套路到实践解题思路","id":292667},"right":{"article_title":"10｜面试即正义第二期：常见的动态规划面试题串烧","id":293536}},"comments":[{"had_liked":false,"id":251561,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1601690083,"is_pvip":true,"replies":[{"id":"92692","content":"没有问题，正确。顶上去，赞。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1602856839,"ip_address":"","comment_id":251561,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27371493859","product_id":100060501,"comment_content":"空间复杂度的压缩状态，dp[i][j]中的j只有两种状态，当前和前一个，使用j%2和j-1%2就可以在两者之间切换。i不可以压缩，因为内层每一轮循环，都要用到之前所有行的两个列状态，这两个列状态是只之前推到出的，不是本轮内层循环推到出的。<br>int getLongestCommonSubsequence(String text1, String text2) {<br>\tint m = text1.length(), n = text2.length();<br>\tint[][] dp = new int[m + 1][2];<br>\tfor (int[] row: dp) { Arrays.fill(row, 0); }<br><br>\tfor (int j = 1; j &lt;= n; j++) {<br>\t\tint a = j % 2;<br>\t\tint b = (j - 1) % 2;<br>\t\tfor (int i = 1; i &lt;= m; i++) {<br>\t\t\tif (text2.charAt(j - 1) == text1.charAt(i - 1)) {<br>\t\t\t\tdp[i][a] = dp[i - 1][b] + 1;<br>\t\t\t} else {<br>\t\t\t\tdp[i][a] = Math.max(dp[i - 1][a], dp[i][b]);<br>\t\t\t}<br>\t\t}<br>\t}<br><br>\treturn dp[m][n%2];<br>}","like_count":6,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506543,"discussion_content":"没有问题，正确。顶上去，赞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602856839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252067,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1602085697,"is_pvip":false,"replies":[{"id":"92685","content":"的确状态转移方程不一致，已修正。感谢反馈。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1602856586,"ip_address":"","comment_id":252067,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18781954881","product_id":100060501,"comment_content":"又学到了新知识，开心。<br><br>老师的第一个状态转移方程与实际代码不匹配，代码中是正确的。<br>dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]);<br>而dp方程是<br>dp[i][j] = Math.max(dp[i+1][j], dp[i][j+1]);","like_count":4,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506706,"discussion_content":"的确状态转移方程不一致，已修正。感谢反馈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602856586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315091,"user_name":"振兴","can_delete":false,"product_type":"c1","uid":1454304,"ip_address":"","ucode":"84F2225684F96C","user_header":"https://static001.geekbang.org/account/avatar/00/16/30/e0/0920ee4f.jpg","comment_is_top":false,"comment_ctime":1633685120,"is_pvip":false,"replies":[{"id":"118240","content":"因为0是一个空状态，遍历是[1,i]和[1,j]。所以实际比较的时候在索引上都需要减去1。","user_name":"作者回复","user_name_real":"编辑","uid":"1006976","ctime":1639321565,"ip_address":"","comment_id":315091,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10223619712","product_id":100060501,"comment_content":"if(text2[j-1]==text1[i-1])，这个不对吧，不是应该判定text2[j]==text1[i]吗？这里不太懂为什么减1，麻烦老师解说一下","like_count":2,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538083,"discussion_content":"因为0是一个空状态，遍历是[1,i]和[1,j]。所以实际比较的时候在索引上都需要减去1。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639321565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251483,"user_name":"群","can_delete":false,"product_type":"c1","uid":1843313,"ip_address":"","ucode":"F8A363F19DAB9B","user_header":"https://static001.geekbang.org/account/avatar/00/1c/20/71/ad3465c0.jpg","comment_is_top":false,"comment_ctime":1601608070,"is_pvip":false,"replies":[{"id":"92693","content":"你说的对。<br>改成这样比较容易理解：<br>text1[i-1] == text2[j-1]<br>text1[i-1] != text2[j-1]<br> <br>","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1602856905,"ip_address":"","comment_id":251483,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5896575366","product_id":100060501,"comment_content":"老师您好，在第二个问题求解最长公共子序列中，开始定义的dp[i][j]表示text1[0][i]与text2[0][j]的最长公共子序列，但是实际代码中返回的是dp[m][n]，这与预定义的不符合吧,text1[m]与text2[n]应该越界了吧．<br>而且我们定义dp数组时，也是添了一行一列，不如定义dop[i][j]为text1的前i个字符和text2的前j个字符所对应的最长公共子序列，既然dp添了一行一列，那么text1与text2也在开头添一个字符，这样所有的下标都是从1开始，会不会好一点．<br>在处理动规问题时，下标从0开始还是从1开始，我觉得对我来说也是一个很大的坑，容易陷进去，希望老师后续可以讲一下这一点的注意事项．","like_count":1,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506514,"discussion_content":"你说的对。\n改成这样比较容易理解：\ntext1[i-1] == text2[j-1]\ntext1[i-1] != text2[j-1]\n \n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602856905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336498,"user_name":"绘世浮夸 つ","can_delete":false,"product_type":"c1","uid":1763933,"ip_address":"","ucode":"6A3960195753BA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ea/5d/ccb4c205.jpg","comment_is_top":false,"comment_ctime":1646190639,"is_pvip":true,"replies":[{"id":"126438","content":"文中的确是说这里dp[2][4]的值是2，然后dp[3][5]的值是3，可以再仔细看一下。","user_name":"作者回复","user_name_real":"编辑","uid":"1006976","ctime":1653378945,"ip_address":"","comment_id":336498,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646190639","product_id":100060501,"comment_content":"在最长公共子序列的画的表中的dp[2][4]不应该是2嘛，ad和abcde中最长的ad都只有2，怎么来的3啊老师，是错了还是什么","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573362,"discussion_content":"文中的确是说这里dp[2][4]的值是2，然后dp[3][5]的值是3，可以再仔细看一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653378945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318177,"user_name":"Sam Fu","can_delete":false,"product_type":"c1","uid":1112676,"ip_address":"","ucode":"EA285A4943271F","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","comment_is_top":false,"comment_ctime":1635172960,"is_pvip":true,"replies":[{"id":"117237","content":"以后会考虑通过更加丰富的方式来讲解算法。","user_name":"作者回复","user_name_real":"编辑","uid":"1006976","ctime":1637675417,"ip_address":"","comment_id":318177,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635172960","product_id":100060501,"comment_content":"讲算法还是视频形式好","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532731,"discussion_content":"以后会考虑通过更加丰富的方式来讲解算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637675417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1914504,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","nickname":"Simon","note":"","ucode":"A8A2E3E57BD029","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571660,"discussion_content":"只要图够了，文本就很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652335126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293070,"user_name":"Shine","can_delete":false,"product_type":"c1","uid":1184853,"ip_address":"","ucode":"BF3DB5ADF2B153","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ydVBBkofXDqCyP7pdwkicHZ9xtyEEuZvzrrkeWcnQjZ1ibEgG60eLotQTsKJFpWibuf6e7G9r0I1xaribUAQibPMl7g/132","comment_is_top":false,"comment_ctime":1621182540,"is_pvip":false,"replies":[{"id":"108594","content":"这里j应该从i+1开始遍历。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1624693471,"ip_address":"","comment_id":293070,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621182540","product_id":100060501,"comment_content":"在最长回文子序列问题中，对于dp[i][j], 当i&gt;j时，都是无效子串吧，值都为0，遍历的时候i是不是只要从i-2开始遍历就行<br>","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520055,"discussion_content":"这里j应该从i+1开始遍历。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624693471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289355,"user_name":"Geek_531e37","can_delete":false,"product_type":"c1","uid":2299399,"ip_address":"","ucode":"1988FE31CCC290","user_header":"","comment_is_top":false,"comment_ctime":1618988188,"is_pvip":false,"replies":[{"id":"105346","content":"要求解此问题，从我们构建出来的状态转移方程可以看出，其包含了两个状态，在正文中可以看到我们最终构建的备忘录是二维的，因此为了能够到达所有状态的计算位，我们需要两层for循环来进行遍历、计算。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1619704359,"ip_address":"","comment_id":289355,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618988188","product_id":100060501,"comment_content":"for (int i = n-1; i &gt;= 0; i--) { for (int j = i+1; j &lt; n; j++) ，这两个for循环，我有点看不懂？？？","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518889,"discussion_content":"要求解此问题，从我们构建出来的状态转移方程可以看出，其包含了两个状态，在正文中可以看到我们最终构建的备忘录是二维的，因此为了能够到达所有状态的计算位，我们需要两层for循环来进行遍历、计算。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619704359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289315,"user_name":"Geek_531e37","can_delete":false,"product_type":"c1","uid":2299399,"ip_address":"","ucode":"1988FE31CCC290","user_header":"","comment_is_top":false,"comment_ctime":1618975731,"is_pvip":false,"replies":[{"id":"105347","content":"最终结果在右上角，其原因在于备忘录的定义，以及计算方向的设计问题。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1619704433,"ip_address":"","comment_id":289315,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618975731","product_id":100060501,"comment_content":"当s[i]!=s[j]，为什么要向前后一步呢？为什么最终结果会在左上角获取？","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518881,"discussion_content":"最终结果在右上角，其原因在于备忘录的定义，以及计算方向的设计问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619704433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265669,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1606976908,"is_pvip":true,"replies":[{"id":"101328","content":"没有问题。顶上去！","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1613370385,"ip_address":"","comment_id":265669,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606976908","product_id":100060501,"comment_content":"可以空间优化，只需要一维数组。划好状态矩阵，可知下一行状态就是上一行和左边的数据分析后的结果，所以需要临时变量存储左上角的状态。具体代码如下。<br>public  int longestCommonSubsequence(String text1, String text2) {<br>        int n1 = text1.length();<br>        int n2 = text2.length();<br>        int[] dp = new int[n1 + 1];<br>        for (int i = 0; i &lt; n1 + 1; i++) {<br>            dp[i] = 0;<br>        }<br>        for (int i = 1; i &lt; n2 + 1; i++) {<br>            int temp = 0;<br>            int cp = 0;<br>            for (int j = 1; j &lt; n1 + 1; j++) {<br>                if (text1.charAt(j - 1) == text2.charAt(i - 1)) {<br>                    temp = cp + 1;<br>                } else {<br>                    temp = Math.max(dp[j - 1], dp[j]);<br>                }<br>                cp = dp[j];<br>                dp[j] = temp;<br>            }<br>        }<br>        return dp[n1];<br>    }<br>","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511010,"discussion_content":"没有问题。顶上去！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613370385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258231,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1604332264,"is_pvip":false,"replies":[{"id":"94248","content":"已修正描述，同学可以再看一下，现在清楚了。","user_name":"编辑回复","user_name_real":"王冬青","uid":"1356014","ctime":1604635078,"ip_address":"","comment_id":258231,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1604332264","product_id":100060501,"comment_content":"最后一张图（2，5）座标处值应该是2吧，好像画错了","like_count":0,"discussions":[{"author":{"id":1356014,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b0/ee/d0871efd.jpg","nickname":"冬青","note":"","ucode":"14576781B499FB","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508587,"discussion_content":"已修正描述，同学可以再看一下，现在清楚了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604635078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252411,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1602294706,"is_pvip":false,"replies":[{"id":"92680","content":"DP[0][4]的确是5。已修正，感谢反馈。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1602856434,"ip_address":"","comment_id":252411,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602294706","product_id":100060501,"comment_content":"最长回文子序列里，状态 A：DP[0][4] = 3，为啥不是5呢？","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506768,"discussion_content":"DP[0][4]的确是5。已修正，感谢反馈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602856434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251460,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1601590045,"is_pvip":false,"replies":[{"id":"92694","content":"是的。没有问题。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1602856916,"ip_address":"","comment_id":251460,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1601590045","product_id":100060501,"comment_content":"个人以为最长子序列问题时间复杂度O(mn)很难优化，但是空间复杂度可以优化为O(1),因为当前要计算的元素只依赖于邻近的三个元素。","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506501,"discussion_content":"是的。没有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602856916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051003,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4b/bb/46c739c4.jpg","nickname":"空壳的豆子","note":"","ucode":"5BE0DB8AB69278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342610,"discussion_content":"请问空间怎么优化成O(1)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610728806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}