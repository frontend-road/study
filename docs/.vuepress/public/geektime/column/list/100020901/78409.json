{"id":78409,"title":"27 | 案例篇：为什么我的磁盘I/O延迟很高？","content":"<p>你好，我是倪朋飞。</p><p>上一节，我们研究了一个狂打日志引发 I/O 性能问题的案例，先来简单回顾一下。</p><p>日志，是了解应用程序内部运行情况，最常用也是最有效的工具。日志一般会分为调试、信息、警告、错误等多个不同级别。</p><p>通常，生产环境只用开启警告级别的日志，这一般不会导致 I/O 问题。但在偶尔排查问题时，可能需要我们开启调试日志。调试结束后，很可能忘了把日志级别调回去。这时，大量的调试日志就可能会引发 I/O 性能问题。</p><p>你可以用 iostat ，确认是否有 I/O 性能瓶颈。再用 strace 和 lsof ，来定位应用程序以及它正在写入的日志文件路径。最后通过应用程序的接口调整日志级别，完美解决 I/O 问题。</p><p>不过，如果应用程序没有动态调整日志级别的功能，你还需要修改应用配置并重启应用，以便让配置生效。</p><p>今天，我们再来看一个新的案例。这次案例是一个基于 Python Flask 框架的 Web 应用，它提供了一个查询单词热度的 API，但是API 的响应速度并不让人满意。</p><p>非常感谢携程系统研发部资深后端工程师董国星，帮助提供了今天的案例。</p><h2><strong>案例准备</strong></h2><p>本次案例还是基于 Ubuntu 18.04，同样适用于其他的 Linux 系统。我使用的案例环境如下所示：</p><ul>\n<li>\n<p>机器配置：2 CPU，8GB 内存</p>\n</li>\n<li>\n<p>预先安装 docker、sysstat 等工具，如 apt install <a href=\"http://docker.io\">docker.io</a> sysstat</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>为了方便你运行今天的案例，我把它打包成了一个 Docker 镜像。这样，你就只需要运行 Docker 命令就可以启动它。</p><p>今天的案例需要两台虚拟机，其中一台是案例分析的目标机器，运行 Flask 应用，它的 IP 地址是 192.168.0.10；而另一台作为客户端，请求单词的热度。我画了一张图表示它们的关系，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a8/bf/a8cc1b02b8c896380d2c53b8018bddbf.png?wh=1752*1040\" alt=\"\"></p><p>接下来，打开两个终端，分别 SSH 登录到这两台虚拟机中，并在第一台虚拟机中，安装上述工具。</p><p>跟以前一样，案例中所有命令都默认以 root 用户运行，如果你是用普通用户身份登陆系统，请运行 sudo su root 命令切换到 root 用户。</p><p>到这里，准备工作就完成了。接下来，我们正式进入操作环节。</p><blockquote>\n<p>温馨提示：案例中 Python 应用的核心逻辑比较简单，你可能一眼就能看出问题，但实际生产环境中的源码就复杂多了。所以，我依旧建议，操作之前别看源码，避免先入为主，而要把它当成一个黑盒来分析。这样，你可以更好把握，怎么从系统的资源使用问题出发，分析出瓶颈所在的应用，以及瓶颈在应用中大概的位置。</p>\n</blockquote><h2><strong>案例分析</strong></h2><p>首先，我们在第一个终端中执行下面的命令，运行本次案例要分析的目标应用：</p><pre><code>$ docker run --name=app -p 10000:80 -itd feisky/word-pop \n</code></pre><p>然后，在第二个终端中运行 curl 命令，访问 <a href=\"http://192.168.0.10:1000/\">http://192.168.0.10:1000/</a>，确认案例正常启动。你应该可以在 curl 的输出界面里，看到一个 hello world 的输出：</p><pre><code>$ curl http://192.168.0.10:10000/ \nhello world \n</code></pre><p>接下来，在第二个终端中，访问案例应用的单词热度接口，也就是 <a href=\"http://192.168.0.10:1000/popularity/word\">http://192.168.0.10:1000/popularity/word</a>。</p><pre><code>$ curl http://192.168.0.10:1000/popularity/word \n</code></pre><p>稍等一会儿，你会发现，这个接口居然这么长时间都没响应，究竟是怎么回事呢？我们先回到终端一来分析一下。</p><p>我们试试在第一个终端里，随便执行一个命令，比如执行 df 命令，查看一下文件系统的使用情况。奇怪的是，这么简单的命令，居然也要等好久才有输出。</p><pre><code>$ df \nFilesystem     1K-blocks    Used Available Use% Mounted on \nudev             4073376       0   4073376   0% /dev \ntmpfs             816932    1188    815744   1% /run \n/dev/sda1       30308240 8713640  21578216  29% / \n</code></pre><p>通过df我们知道，系统还有足够多的磁盘空间。那为什么响应会变慢呢？看来还是得观察一下，系统的资源使用情况，像是 CPU、内存和磁盘 I/O 等的具体使用情况。</p><p>这里的思路其实跟上一个案例比较类似，我们可以先用 top 来观察 CPU 和内存的使用情况，然后再用 iostat 来观察磁盘的 I/O 情况。</p><p>为了避免分析过程中curl 请求突然结束，我们回到终端二，按 Ctrl+C 停止刚才的应用程序；然后，把curl 命令放到一个循环里执行；这次我们还要加一个 time 命令，观察每次的执行时间：</p><pre><code>$ while true; do time curl http://192.168.0.10:10000/popularity/word; sleep 1; done \n</code></pre><p>继续回到终端一来分析性能。我们在终端一中运行 top 命令，观察 CPU 和内存的使用情况：</p><pre><code>$ top \ntop - 14:27:02 up 10:30,  1 user,  load average: 1.82, 1.26, 0.76 \nTasks: 129 total,   1 running,  74 sleeping,   0 stopped,   0 zombie \n%Cpu0  :  3.5 us,  2.1 sy,  0.0 ni,  0.0 id, 94.4 wa,  0.0 hi,  0.0 si,  0.0 st \n%Cpu1  :  2.4 us,  0.7 sy,  0.0 ni, 70.4 id, 26.5 wa,  0.0 hi,  0.0 si,  0.0 st \nKiB Mem :  8169300 total,  3323248 free,   436748 used,  4409304 buff/cache \nKiB Swap:        0 total,        0 free,        0 used.  7412556 avail Mem \n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND \n12280 root      20   0  103304  28824   7276 S  14.0  0.4   0:08.77 python \n   16 root      20   0       0      0      0 S   0.3  0.0   0:09.22 ksoftirqd/1 \n1549 root      20   0  236712  24480   9864 S   0.3  0.3   3:31.38 python3 \n</code></pre><p>观察 top 的输出可以发现，两个CPU的 iowait 都非常高。特别是 CPU0， iowait 已经高达 94 %，而剩余内存还有 3GB，看起来也是充足的。</p><p>再往下看，进程部分有一个 python 进程的CPU使用率稍微有点高，达到了 14%。虽然 14% 并不能成为性能瓶颈，不过有点嫌疑——可能跟 iowait 的升高有关。</p><p>那这个PID 号为 12280 的 python 进程，到底是不是我们的案例应用呢？</p><p>我们在第一个终端中，按下 Ctrl+C，停止 top 命令；然后执行下面的 ps 命令，查找案例应用 <a href=\"http://app.py\">app.py</a> 的 PID 号：</p><pre><code>$ ps aux | grep app.py \nroot     12222  0.4  0.2  96064 23452 pts/0    Ss+  14:37   0:00 python /app.py \nroot     12280 13.9  0.3 102424 27904 pts/0    Sl+  14:37   0:09 /usr/local/bin/python /app.py \n</code></pre><p>从 ps 的输出，你可以看到，这个 CPU 使用率较高的进程，正是我们的案例应用。不过先别着急分析 CPU 问题，毕竟 iowait 已经高达 94%， I/O 问题才是我们首要解决的。</p><p>接下来，我们在终端一中，运行下面的 iostat 命令，其中:</p><ul>\n<li>\n<p>-d 选项是指显示出 I/O 的性能指标；</p>\n</li>\n<li>\n<p>-x 选项是指显示出扩展统计信息（即显示所有I/O指标）。</p>\n</li>\n</ul><pre><code>$ iostat -d -x 1\nDevice            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util \nloop0            0.00    0.00      0.00      0.00     0.00     0.00   0.00   0.00    0.00    0.00   0.00     0.00     0.00   0.00   0.00 \nsda              0.00   71.00      0.00  32912.00     0.00     0.00   0.00   0.00    0.00 18118.31 241.89     0.00   463.55  13.86  98.40 \n</code></pre><p>再次看到 iostat 的输出，你还记得这个界面中的性能指标含义吗？先自己回忆一下，如果实在想不起来，一定要先查看上节内容，或者用 man iostat 查明白。</p><p>明白了指标含义，再来具体观察 iostat 的输出。你可以发现，磁盘 sda 的 I/O 使用率已经达到 98% ，接近饱和了。而且，写请求的响应时间高达 18 秒，每秒的写数据为 32 MB，显然写磁盘碰到了瓶颈。</p><p>那要怎么知道，这些 I/O请求到底是哪些进程导致的呢？我想，你已经还记得上一节我们用到的 pidstat。</p><p>在终端一中，运行下面的 pidstat 命令，观察进程的 I/O 情况：</p><pre><code>$ pidstat -d 1 \n14:39:14      UID       PID   kB_rd/s   kB_wr/s kB_ccwr/s iodelay  Command \n14:39:15        0     12280      0.00 335716.00      0.00       0  python \n</code></pre><p>从 pidstat 的输出，我们再次看到了PID 号为 12280的结果。这说明，正是案例应用引发I/O 的性能瓶颈。</p><p>走到这一步，你估计觉得，接下来就很简单了，上一个案例不刚刚学过吗？无非就是，先用 strace 确认它是不是在写文件，再用 lsof 找出文件描述符对应的文件即可。</p><p>到底是不是这样呢？我们不妨来试试。还是在终端一中，执行下面的 strace 命令：</p><pre><code>$ strace -p 12280 \nstrace: Process 12280 attached \nselect(0, NULL, NULL, NULL, {tv_sec=0, tv_usec=567708}) = 0 (Timeout) \nstat(&quot;/usr/local/lib/python3.7/importlib/_bootstrap.py&quot;, {st_mode=S_IFREG|0644, st_size=39278, ...}) = 0 \nstat(&quot;/usr/local/lib/python3.7/importlib/_bootstrap.py&quot;, {st_mode=S_IFREG|0644, st_size=39278, ...}) = 0 \n</code></pre><p>从 strace 中，你可以看到大量的 stat 系统调用，并且大都为 python 的文件，但是，请注意，这里并没有任何 write 系统调用。</p><p>由于 strace 的输出比较多，我们可以用 grep ，来过滤一下 write，比如：</p><pre><code>$ strace -p 12280 2&gt;&amp;1 | grep write \n</code></pre><p>遗憾的是，这里仍然没有任何输出。</p><p>难道此时已经没有性能问题了吗？重新执行刚才的 top 和 iostat 命令，你会不幸地发现，性能问题仍然存在。</p><p>我们只好综合 strace、pidstat 和 iostat 这三个结果来分析了。很明显，你应该发现了这里的矛盾：iostat 已经证明磁盘 I/O 有性能瓶颈，而 pidstat 也证明了，这个瓶颈是由 12280 号进程导致的，但 strace 跟踪这个进程，却没有找到任何 write 系统调用。</p><p>这就奇怪了。难道因为案例使用的编程语言是 Python ，而Python 是解释型的，所以找不到？还是说，因为案例运行在 Docker 中呢？这里留个悬念，你自己想想。</p><p>文件写，明明应该有相应的write系统调用，但用现有工具却找不到痕迹，这时就该想想换工具的问题了。怎样才能知道哪里在写文件呢？</p><p>这里我给你介绍一个新工具，  <a href=\"https://github.com/iovisor/bcc/blob/master/tools/filetop.py\">filetop</a>。它是 <a href=\"https://github.com/iovisor/bcc\">bcc</a> 软件包的一部分，基于 Linux 内核的 eBPF（extended Berkeley Packet Filters）机制，主要跟踪内核中文件的读写情况，并输出线程ID（TID）、读写大小、读写类型以及文件名称。</p><p>eBPF 的工作原理，你暂时不用深究，后面内容我们会逐渐接触到，先会使用就可以了。</p><p>至于老朋友 bcc 的安装方法，可以参考它的 Github 网站 <a href=\"https://github.com/iovisor/bcc\">https://github.com/iovisor/bcc</a>。比如在 Ubuntu 16 以上的版本中，你可以运行下面的命令来安装它：</p><pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4052245BD4284CDD \necho &quot;deb https://repo.iovisor.org/apt/$(lsb_release -cs) $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/iovisor.list \nsudo apt-get update \nsudo apt-get install bcc-tools libbcc-examples linux-headers-$(uname -r)\n</code></pre><p>安装后，bcc 提供的所有工具，就全部安装到了 /usr/share/bcc/tools 这个目录中。接下来我们就用这个工具，观察一下文件的读写情况。</p><p>首先，在终端一中运行下面的命令：</p><pre><code># 切换到工具目录 \n$ cd /usr/share/bcc/tools \n\n# -C 选项表示输出新内容时不清空屏幕 \n$ ./filetop -C \n\nTID    COMM             READS  WRITES R_Kb    W_Kb    T FILE \n514    python           0      1      0       2832    R 669.txt \n514    python           0      1      0       2490    R 667.txt \n514    python           0      1      0       2685    R 671.txt \n514    python           0      1      0       2392    R 670.txt \n514    python           0      1      0       2050    R 672.txt \n\n...\n\nTID    COMM             READS  WRITES R_Kb    W_Kb    T FILE \n514    python           2      0      5957    0       R 651.txt \n514    python           2      0      5371    0       R 112.txt \n514    python           2      0      4785    0       R 861.txt \n514    python           2      0      4736    0       R 213.txt \n514    python           2      0      4443    0       R 45.txt \n\n</code></pre><p>你会看到，filetop 输出了 8 列内容，分别是线程ID、线程命令行、读写次数、读写的大小（单位KB）、文件类型以及读写的文件名称。</p><p>这些内容里，你可能会看到很多动态链接库，不过这不是我们的重点，暂且忽略即可。我们的重点，是一个 python 应用，所以要特别关注 python 相关的内容。</p><p>多观察一会儿，你就会发现，每隔一段时间，线程号为 514 的 python 应用就会先写入大量的 txt 文件，再大量地读。</p><p>线程号为 514 的线程，属于哪个进程呢？我们可以用 ps 命令查看。先在终端一中，按下 Ctrl+C ，停止 filetop ；然后，运行下面的 ps 命令。这个输出的第二列内容，就是我们想知道的进程号：</p><pre><code>$ ps -efT | grep 514\nroot     12280  514 14626 33 14:47 pts/0    00:00:05 /usr/local/bin/python /app.py \n</code></pre><p>我们看到，这个线程正是案例应用 12280的线程。终于可以先松一口气，不过还没完，filetop 只给出了文件名称，却没有文件路径，还得继续找啊。</p><p>我再介绍一个好用的工具，opensnoop 。它同属于 bcc 软件包，可以动态跟踪内核中的 open 系统调用。这样，我们就可以找出这些 txt 文件的路径。</p><p>接下来，在终端一中，运行下面的 opensnoop 命令：</p><pre><code>$ opensnoop \n12280  python              6   0 /tmp/9046db9e-fe25-11e8-b13f-0242ac110002/650.txt \n12280  python              6   0 /tmp/9046db9e-fe25-11e8-b13f-0242ac110002/651.txt \n12280  python              6   0 /tmp/9046db9e-fe25-11e8-b13f-0242ac110002/652.txt \n</code></pre><p>这次，通过 opensnoop 的输出，你可以看到，这些 txt 路径位于 /tmp 目录下。你还能看到，它打开的文件数量，按照数字编号，从 0.txt 依次增大到 999.txt，这可远多于前面用 filetop 看到的数量。</p><p>综合 filetop 和 opensnoop ，我们就可以进一步分析了。我们可以大胆猜测，案例应用在写入 1000 个txt文件后，又把这些内容读到内存中进行处理。我们来检查一下，这个目录中是不是真的有 1000 个文件：</p><pre><code>$ ls /tmp/9046db9e-fe25-11e8-b13f-0242ac110002 | wc -l \nls: cannot access '/tmp/9046db9e-fe25-11e8-b13f-0242ac110002': No such file or directory \n0 \n</code></pre><p>操作后却发现，目录居然不存在了。怎么回事呢？我们回到 opensnoop 再观察一会儿：</p><pre><code>$ opensnoop \n12280  python              6   0 /tmp/defee970-fe25-11e8-b13f-0242ac110002/261.txt \n12280  python              6   0 /tmp/defee970-fe25-11e8-b13f-0242ac110002/840.txt \n12280  python              6   0 /tmp/defee970-fe25-11e8-b13f-0242ac110002/136.txt \n</code></pre><p>原来，这时的路径已经变成了另一个目录。这说明，这些目录都是应用程序动态生成的，用完就删了。</p><p>结合前面的所有分析，我们基本可以判断，案例应用会动态生成一批文件，用来临时存储数据，用完就会删除它们。但不幸的是，正是这些文件读写，引发了 I/O 的性能瓶颈，导致整个处理过程非常慢。</p><p>当然，我们还需要验证这个猜想。老办法，还是查看应用程序的源码 <a href=\"https://github.com/feiskyer/linux-perf-examples/blob/master/io-latency/app.py\">app.py</a>，</p><pre><code>@app.route(&quot;/popularity/&lt;word&gt;&quot;) \ndef word_popularity(word): \n  dir_path = '/tmp/{}'.format(uuid.uuid1()) \n  count = 0 \n  sample_size = 1000 \n   \n  def save_to_file(file_name, content): \n    with open(file_name, 'w') as f: \n    f.write(content) \n\n  try: \n    # initial directory firstly \n    os.mkdir(dir_path) \n\n    # save article to files \n    for i in range(sample_size): \n        file_name = '{}/{}.txt'.format(dir_path, i) \n        article = generate_article() \n        save_to_file(file_name, article) \n\n    # count word popularity \n    for root, dirs, files in os.walk(dir_path): \n        for file_name in files: \n            with open('{}/{}'.format(dir_path, file_name)) as f: \n                if validate(word, f.read()): \n                    count += 1 \n    finally: \n        # clean files \n        shutil.rmtree(dir_path, ignore_errors=True) \n\n    return jsonify({'popularity': count / sample_size * 100, 'word': word}) \n</code></pre><p>源码中可以看到，这个案例应用，在每个请求的处理过程中，都会生成一批临时文件，然后读入内存处理，最后再把整个目录删除掉。</p><p>这是一种常见的利用磁盘空间处理大量数据的技巧，不过，本次案例中的 I/O 请求太重，导致磁盘 I/O 利用率过高。</p><p>要解决这一点，其实就是算法优化问题了。比如在内存充足时，就可以把所有数据都放到内存中处理，这样就能避免 I/O 的性能问题。</p><p>你可以检验一下，在终端二中分别访问 <a href=\"http://192.168.0.10:10000/popularity/word\">http://192.168.0.10:10000/popularity/word</a> 和 <a href=\"http://192.168.0.10:10000/popular/word\">http://192.168.0.10:10000/popular/word</a>  ，对比前后的效果：</p><pre><code>$ time curl http://192.168.0.10:10000/popularity/word\n{ \n  &quot;popularity&quot;: 0.0, \n  &quot;word&quot;: &quot;word&quot; \n} \nreal    2m43.172s \nuser    0m0.004s \nsys    0m0.007s\n</code></pre><pre><code>$ time curl http://192.168.0.10:10000/popular/word\n{\n  &quot;popularity&quot;: 0.0,\n  &quot;word&quot;: &quot;word&quot;\n}\n\nreal    0m8.810s\nuser    0m0.010s\nsys    0m0.000s \n</code></pre><p>新的接口只要8秒就可以返回，明显比一开始的 3 分钟好很多。</p><p>当然，这只是优化的第一步，并且方法也不算完善，还可以做进一步的优化。不过，在实际系统中，我们大都是类似的做法，先用最简单的方法，尽早解决线上问题，然后再继续思考更好的优化方法。</p><h2>小结</h2><p>今天，我们分析了一个响应过慢的单词热度案例。</p><p>首先，我们用 top、iostat，分析了系统的 CPU 和磁盘使用情况。我们发现了磁盘 I/O 瓶颈，也知道了这个瓶颈是案例应用导致的。</p><p>接着，我们试着照搬上一节案例的方法，用 strace 来观察进程的系统调用，不过这次很不走运，没找到任何 write 系统调用。</p><p>于是，我们又用了新的工具，借助动态追踪工具包 bcc 中的 filetop 和 opensnoop ，找出了案例应用的问题，发现这个根源是大量读写临时文件。</p><p>找出问题后，优化方法就相对比较简单了。如果内存充足时，最简单的方法，就是把数据都放在速度更快的内存中，这样就没有磁盘 I/O 的瓶颈了。当然，再进一步，你可以还可以利用 Trie 树等各种算法，进一步优化单词处理的效率。</p><h2>思考</h2><p>最后，给你留一个思考题，也是我在文章中提到过的，让你思考的问题。</p><p>今天的案例中，iostat 已经证明，磁盘 I/O 出现了性能瓶颈， pidstat 也证明了这个瓶颈是由 12280 号进程导致的。但是，strace 跟踪这个进程，却没有发现任何 write 系统调用。</p><p>这究竟是怎么回事？难道是因为案例使用的编程语言 Python 本身是解释型？还是说，因为案例运行在 Docker 中呢？</p><p>这里我小小提示一下。当你发现性能工具的输出无法解释时，最好返回去想想，是不是分析中漏掉了什么线索，或者去翻翻工具手册，看看是不是某些默认选项导致的。</p><p>欢迎在留言区和我讨论，也欢迎把这篇文章分享给你的同事、朋友。我们一起在实战中演练，在交流中进步。</p><p></p>","neighbors":{"left":{"article_title":"26 | 案例篇：如何找出狂打日志的“内鬼”？","id":77885},"right":{"article_title":"28 | 案例篇：一个SQL查询要15秒，这是怎么回事？","id":78633}},"comments":[{"had_liked":false,"id":62348,"user_name":"划时代","can_delete":false,"product_type":"c1","uid":1061454,"ip_address":"","ucode":"9554CE2F83B77F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2o1Izf2YyJSnnI0ErZ51pYRlnrmibqUTaia3tCU1PjMxuwyXSKOLUYiac2TQ5pd5gNGvS81fVqKWGvDsZLTM8zhWg/132","comment_is_top":false,"comment_ctime":1548036328,"is_pvip":false,"replies":[{"id":"22134","content":"👍 ","user_name":"作者回复","comment_id":62348,"uid":"1001282","ip_address":"","utype":1,"ctime":1548116346,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"504059209960","product_id":100020901,"comment_content":"赞同在strace -p PID后加上-f，多进程和多线程都可以跟踪。","like_count":117,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437177,"discussion_content":"👍 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548116346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1229617,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK009KMmXKFVSEdjicpDD4ick3NZpM3JdIUibWGB03lG6yicibad0tGmQD7E3DpZ0sVRenxWNfd7iaPdp7g/132","nickname":"小小菜鸟","note":"","ucode":"1CECC0A664CFD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390649,"discussion_content":"strace -f -tt -p ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629952183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62318,"user_name":"jeff","can_delete":false,"product_type":"c1","uid":1063344,"ip_address":"","ucode":"3B13989DF44D6C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJSGU1LkzTK76HicuZ1IbiboziakPmL6KzcmlvgIibZ7tq0Tlt6OwhRKLAaTttbY6vSPY5XupEAWjT0eg/132","comment_is_top":false,"comment_ctime":1548031746,"is_pvip":false,"replies":[{"id":"22136","content":"👍 默认选项是不开启线程的","user_name":"作者回复","comment_id":62318,"uid":"1001282","ip_address":"","utype":1,"ctime":1548116479,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"293605807874","product_id":100020901,"comment_content":"写文件是由子线程执行的，所以直接strace跟踪进程没有看到write系统调用，可以通过pstree查看进程的线程信息，再用strace跟踪。或者，通过strace -fp pid 跟踪所有线程。","like_count":68,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437169,"discussion_content":"👍 默认选项是不开启线程的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548116479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63019,"user_name":"郭江伟","can_delete":false,"product_type":"c1","uid":1313994,"ip_address":"","ucode":"613D638619B5A2","user_header":"https://static001.geekbang.org/account/avatar/00/14/0c/ca/6173350b.jpg","comment_is_top":false,"comment_ctime":1548228754,"is_pvip":false,"replies":[{"id":"22345","content":"赞，很好的思路","user_name":"作者回复","comment_id":63019,"uid":"1001282","ip_address":"","utype":1,"ctime":1548252571,"user_name_real":"倪朋飞"}],"discussion_count":3,"race_medal":0,"score":"117512345746","product_id":100020901,"comment_content":"strace -p -f可以查看进程的所有线程信息，本例中python进程下可能同时存在两个线程，一个线程是socket相关，一个是跟文件读写相关，与文件读写相关的会频繁变化，只需跟踪进程树的最后一个线程就可以。<br>可以用pstree -p 查看Python的进程树，然后strace -p 线程号，不过本例中线程消失非常快，需要写个脚本才行 比如：Python进程号是13205 strace -p `pstree -p  13205 | tail -n 1 |  awk -F &#39;(&#39; &#39;{print $NF}&#39; | awk -F &#39;)&#39; &#39;{print $1}&#39;","like_count":27,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437440,"discussion_content":"赞，很好的思路","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548252571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1461349,"avatar":"https://static001.geekbang.org/account/avatar/00/16/4c/65/93557eb9.jpg","nickname":"aChan","note":"","ucode":"22BEC3055D5AE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374186,"discussion_content":"strace -p  是跟踪进程的堆栈信息，默认是跟踪那个线程啊，就如本例，strace -p  12280，这个是进程id，是进程的堆栈？具体对应哪一个线程呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621055048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099379,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/73/abb7bfe3.jpg","nickname":"疯琴","note":"","ucode":"82ACAA4A27753D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364108,"discussion_content":"应该是每个请求都启一个线程处理吧😉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617366552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62754,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1548148781,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"78857560109","product_id":100020901,"comment_content":"[D27打卡]<br>还好我平常习惯用 `pidstat -wut 1` 既可以看上下文切换 又可以看cpu使用统计 还可以看各线程.<br><br>今天又见识到了两个工具:<br>filetop:可以查看进程操作的文件名称等信息<br>opensnoop:甚至连操作的文件路径也有.<br><br>看评论还知道了 strace 可以追逐子线程.<br>` strace -p 3387 -f 2&gt;&amp;1 | grep write `<br>这样之后就可以搜索到很多系统调用了.<br><br>应该跟什么语言运行 和 在哪运行没关系,最终都是要落实到系统调用上去的吧.<br>","like_count":18,"discussions":[{"author":{"id":1284474,"avatar":"https://static001.geekbang.org/account/avatar/00/13/99/7a/558666a5.jpg","nickname":"AceslupK","note":"","ucode":"048F84D019CBBB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391790,"discussion_content":"看来应该时刻关注线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630635909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63078,"user_name":"萧易客","can_delete":false,"product_type":"c1","uid":1061552,"ip_address":"","ucode":"ABE0FE9C73CBDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/32/b0/74f1e266.jpg","comment_is_top":false,"comment_ctime":1548245777,"is_pvip":false,"replies":[{"id":"22350","content":"嗯嗯，谢谢分享新的思路。<br><br>不过perf report 更多的是统计上的分析，而 strace 则是可以看到每一个调用的细节。","user_name":"作者回复","comment_id":63078,"uid":"1001282","ip_address":"","utype":1,"ctime":1548252985,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"61677787921","product_id":100020901,"comment_content":"perf record -e &#39;fs:*&#39; -ag<br>perf report<br>使用perf命令可以从kernel层级记录文件系统的内核事件，相对strace我觉得perf还有一个优势就是对系统的消耗更低，更利于在生产环境使用。<br>http:&#47;&#47;www.brendangregg.com&#47;perf.html","like_count":14,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437461,"discussion_content":"嗯嗯，谢谢分享新的思路。\n\n不过perf report 更多的是统计上的分析，而 strace 则是可以看到每一个调用的细节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548252985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269400,"user_name":"KennyQ","can_delete":false,"product_type":"c1","uid":1449481,"ip_address":"","ucode":"5F9AFFCBC086DB","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIt0nAFvqib3fpf9AIKUrEJMdbiaPjnKqCryevwjRdqrbzAIxdOn3P5wCz28MNb5Bgb2PwEdCezLEWg/132","comment_is_top":false,"comment_ctime":1608633022,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"48853273278","product_id":100020901,"comment_content":"strace万能命令：<br>strace -T -f -tt -e trace=all -p pid -o xxxx.txt<br>","like_count":11},{"had_liked":false,"id":200875,"user_name":"怀揣梦想的学渣","can_delete":false,"product_type":"c1","uid":1916685,"ip_address":"","ucode":"2349B9F4F6FDE3","user_header":"https://static001.geekbang.org/account/avatar/00/1d/3f/0d/1e8dbb2c.jpg","comment_is_top":false,"comment_ctime":1585665349,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"44535338309","product_id":100020901,"comment_content":"看的时候头脑清晰，放到实战环境就脑子开始犯浑了","like_count":10},{"had_liked":false,"id":62789,"user_name":"双","can_delete":false,"product_type":"c1","uid":1031605,"ip_address":"","ucode":"D0AC0A69A611C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bd/b5/b8dfa30a.jpg","comment_is_top":false,"comment_ctime":1548157679,"is_pvip":false,"replies":[{"id":"22343","content":"简单场景一条 lsof 就解决了，但复杂的场景则还需要更多的步骤","user_name":"作者回复","comment_id":62789,"uid":"1001282","ip_address":"","utype":1,"ctime":1548252389,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"31612928751","product_id":100020901,"comment_content":"不用那么麻烦吧，一般看用户进程cpu高的，iowait显著的话，直接lsof -p就能找到了什么文件了","like_count":7,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437350,"discussion_content":"简单场景一条 lsof 就解决了，但复杂的场景则还需要更多的步骤","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548252389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78316,"user_name":"Geek_00d753","can_delete":false,"product_type":"c1","uid":1253949,"ip_address":"","ucode":"2ED08B1A425994","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUP6ibuQssqJBNtQdSaFNhzzibdf7I3nyVGCeJPoDYqfsRndqRY19GpOJCOibMXQmOv2EchtHh0SXow/132","comment_is_top":false,"comment_ctime":1553130118,"is_pvip":false,"replies":[{"id":"29609","content":"很好的问题。多个工具对比计算的时候一定要使用相同的时间间隔，间隔不同时，很可能就会碰到这个问题","user_name":"作者回复","comment_id":78316,"uid":"1001282","ip_address":"","utype":1,"ctime":1554018849,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"18732999302","product_id":100020901,"comment_content":"老师，请教个问题。在cpu密集型任务中一个进程的cpu利用率是各cpu的us%+sy%之和。但当iow%高的时候，这个进程的cpu利用率是怎么算的呢？就像第一个例子中，进程cpu利用率14%，比两个cpu的us%+sy%大很多。我之前理解的iow状态，进程在等io资源，这个时候应该是off-cpu的，是不是我理解错了。难道iow%有一部分也算是cpu占用的吗？那又是怎么计算的呢？谢谢","like_count":4,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444046,"discussion_content":"很好的问题。多个工具对比计算的时候一定要使用相同的时间间隔，间隔不同时，很可能就会碰到这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554018849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62744,"user_name":"仲鬼","can_delete":false,"product_type":"c1","uid":1314692,"ip_address":"","ucode":"DB1CD7052D5BA6","user_header":"https://static001.geekbang.org/account/avatar/00/14/0f/84/d8e63885.jpg","comment_is_top":false,"comment_ctime":1548146878,"is_pvip":false,"replies":[{"id":"22336","content":"应该反过来，进程大量的 I&#47;O 时，自己可能问题不大，但却导致了其他进程出现问题","user_name":"作者回复","comment_id":62744,"uid":"1001282","ip_address":"","utype":1,"ctime":1548251800,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"18728016062","product_id":100020901,"comment_content":"老师好，案例里pidstat的iodelay为0，kB_wr&#47;s也有300MB，是否说明应用程序写文件的性能没有收到影响，造成进程响应慢的可能是其他问题（如系统调用、打开文件等）？","like_count":4,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437333,"discussion_content":"应该反过来，进程大量的 I/O 时，自己可能问题不大，但却导致了其他进程出现问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1548251800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187535,"user_name":"Acter","can_delete":false,"product_type":"c1","uid":1082561,"ip_address":"","ucode":"EF747BEAD2A797","user_header":"https://static001.geekbang.org/account/avatar/00/10/84/c1/dfcad82a.jpg","comment_is_top":false,"comment_ctime":1584154014,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14469055902","product_id":100020901,"comment_content":"第三遍读本文，真是每一遍都有收获，感恩😄。","like_count":3},{"had_liked":false,"id":62504,"user_name":"仲鬼","can_delete":false,"product_type":"c1","uid":1314692,"ip_address":"","ucode":"DB1CD7052D5BA6","user_header":"https://static001.geekbang.org/account/avatar/00/14/0f/84/d8e63885.jpg","comment_is_top":false,"comment_ctime":1548077047,"is_pvip":false,"replies":[{"id":"22127","content":"别急，工具是有的，但旧版本的工具难用的多，所以从简单易用的开始讲起","user_name":"作者回复","comment_id":62504,"uid":"1001282","ip_address":"","utype":1,"ctime":1548115908,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"14432978935","product_id":100020901,"comment_content":"老师，线上环境kernal版本4.1以上的很少，能不能同时讲一些2.6、3.1等版本的替代工具？提一下名字也好，不然学半天原理，还是不能“实战”啊！","like_count":3,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437242,"discussion_content":"别急，工具是有的，但旧版本的工具难用的多，所以从简单易用的开始讲起","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548115908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62310,"user_name":"ninuxer","can_delete":false,"product_type":"c1","uid":1243135,"ip_address":"","ucode":"5394ADAF2667D6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKQMM4m7NHuicr55aRiblTSEWIYe0QqbpyHweaoAbG7j2v7UUElqqeP3Ihrm3UfDPDRb1Hv8LvPwXqA/132","comment_is_top":false,"comment_ctime":1548030699,"is_pvip":false,"replies":[{"id":"22138","content":"嗯，不过注意strace默认不跟踪子线程的系统调用","user_name":"作者回复","comment_id":62310,"uid":"1001282","ip_address":"","utype":1,"ctime":1548116560,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"14432932587","product_id":100020901,"comment_content":"打卡day28<br>我一般用strace -cp 来看系统调用的统计信息，然后用-e 查看对应调用的详情","like_count":3,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437166,"discussion_content":"嗯，不过注意strace默认不跟踪子线程的系统调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548116560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581961,"discussion_content":"加上-f, 可以打开线程跟踪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659086492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62309,"user_name":"远方","can_delete":false,"product_type":"c1","uid":1064732,"ip_address":"","ucode":"244C74F9857196","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/1c/1e4dfbc9.jpg","comment_is_top":false,"comment_ctime":1548030610,"is_pvip":false,"replies":[{"id":"22139","content":"👍","user_name":"作者回复","comment_id":62309,"uid":"1001282","ip_address":"","utype":1,"ctime":1548116573,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"14432932498","product_id":100020901,"comment_content":"使用strace时，没有加-f选项查看线程","like_count":3,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437165,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548116573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62741,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1548146526,"is_pvip":false,"replies":[{"id":"22333","content":"谢谢分享","user_name":"作者回复","comment_id":62741,"uid":"1001282","ip_address":"","utype":1,"ctime":1548251601,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"10138081118","product_id":100020901,"comment_content":"[D27打卡]<br>Ubuntu 18.04在安装bcc时出错,然后参考[https:&#47;&#47;www.codetd.com&#47;article&#47;3092913]可以成功安装.<br><br>因为ppa:hzwhuang&#47;ss-qt5 并没有18.04版本的源，因此会出现<br>E: 仓库 “http:&#47;&#47;ppa.launchpad.net&#47;hzwhuang&#47;ss-qt5&#47;ubuntu bionic Release” 没有 Release 文件 的错误。<br>这时，只要编辑&#47;etc&#47;apt&#47;sources.list.d&#47;hzwhuang-ubuntu-ss-qt5-bionic.list 文件，将bionic (18.04版本代号)改成xenial（16.04版本代号）<br>然后再执行第二三步骤即可。","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437331,"discussion_content":"谢谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548251601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62314,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1548030997,"is_pvip":false,"replies":[{"id":"22137","content":"strace默认不跟踪子线程的系统调用","user_name":"作者回复","comment_id":62314,"uid":"1001282","ip_address":"","utype":1,"ctime":1548116543,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"10137965589","product_id":100020901,"comment_content":"是不是strace要增加-f","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437168,"discussion_content":"strace默认不跟踪子线程的系统调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548116543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82244,"user_name":"大乌贼 (\\(●-●)&#47;)","can_delete":false,"product_type":"c1","uid":1207293,"ip_address":"","ucode":"B1FB489558F176","user_header":"https://static001.geekbang.org/account/avatar/00/12/6b/fd/14e1f6bb.jpg","comment_is_top":false,"comment_ctime":1554168614,"is_pvip":true,"replies":[{"id":"29839","content":"嗯，很有可能，试试把数据量再增大一些，iowait应该会跟着升高","user_name":"作者回复","comment_id":82244,"uid":"1001282","ip_address":"","utype":1,"ctime":1554210175,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"5849135910","product_id":100020901,"comment_content":"不知道是不是我ssd的原因，iowait只有一点几，反而上下文切换过多导致sy很高","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445521,"discussion_content":"嗯，很有可能，试试把数据量再增大一些，iowait应该会跟着升高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554210175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81919,"user_name":"大飞","can_delete":false,"product_type":"c1","uid":1320080,"ip_address":"","ucode":"2D98888FC63CA9","user_header":"","comment_is_top":false,"comment_ctime":1554082554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5849049850","product_id":100020901,"comment_content":"打卡","like_count":1},{"had_liked":false,"id":62761,"user_name":"腾达","can_delete":false,"product_type":"c1","uid":1079876,"ip_address":"","ucode":"72F9CFBA44FDEE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL9hlAIKQ1sGDu16oWLOHyCSicr18XibygQSMLMjuDvKk73deDlH9aMphFsj41WYJh121aniaqBLiaMNg/132","comment_is_top":false,"comment_ctime":1548150671,"is_pvip":false,"replies":[{"id":"22575","content":"这里是多个文件的I&#47;O，不同文件的读写位置可能不是顺序的。如果要制造顺序I&#47;O，需要直接操作裸磁盘，从某个地址开始顺序写数据就可以（比如使用dd或者write()系统调用）。","user_name":"作者回复","comment_id":62761,"uid":"1001282","ip_address":"","utype":1,"ctime":1548575604,"user_name_real":"倪朋飞"}],"discussion_count":2,"race_medal":0,"score":"5843117967","product_id":100020901,"comment_content":"这样的写文件是随机io，还是顺序io？如何能制造出一个顺序io？","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437340,"discussion_content":"这里是多个文件的I/O，不同文件的读写位置可能不是顺序的。如果要制造顺序I/O，需要直接操作裸磁盘，从某个地址开始顺序写数据就可以（比如使用dd或者write()系统调用）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548575604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2016221,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c3/dd/33648195.jpg","nickname":"金刚","note":"","ucode":"9657132D6E5D9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586691,"discussion_content":"#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;string.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/stat.h&gt;\n\n#define DISK_PATH\t&#34;/dev/sda&#34;\n#define MAX_WRITE\t16\n#define WRITE_SIZE\t0x200\n\nunsigned int DISK_SIZE_GB ;\nunsigned int DISK_SIZE_MB ;\n\nvoid *write_disk_thread(void *offset)\n{\n\tint fd;\n\tchar *buff;\n\tunsigned int loffset = *(unsigned int *)offset;\n\tbuff = (char *) malloc(sizeof(char)*WRITE_SIZE);\t//write block data(512Byte)\n\tif (!buff) {\n\t\tprintf(&#34;Malloc area for buff failed!\\n&#34;);\n\t\texit(1);\n\t}\n\n\tmemset(buff, 0, sizeof(buff));\n\t\t\n\tfd = open(DISK_PATH, O_WRONLY|O_SYNC);\n\tif (fd &lt; 0) {\n\t\tprintf(&#34;Open disk failed\\n&#34;);\n\t\texit(1);\n\t}\n\n\t//set offset of fd\n\tlseek(fd, loffset, SEEK_SET);\n\twrite(fd, buff, strlen(buff));\n\tclose(fd);\n}\n\n\nint main(void)\n{\n\tpthread_t write_thread[MAX_WRITE];\n\tint i,ret, res;\n\tunsigned int address;\n\tDISK_SIZE_GB = system(&#34;./parted -l|grep /dev/sda | awk &#39;gsub(/[^[:digit:]]/,&#34; &#34;,$0)&#39;&#34;);\n\tDISK_SIZE_MB = DISK_SIZE_GB*1024;\n\n\tprintf(&#34;Disk Size in system is %dMB\\n&#34;, DISK_SIZE_MB);\n\t//硬盘全盘测试\n\twhile (1) {\n\t\tfor (i = 0; i &lt; MAX_WRITE; i++) {\n\t\t\t\tret = pthread_create(&amp;write_thread[i], NULL, (void *)write_disk_thread, &amp;address);\n\t\t\t\taddress += 1;\n\t\t\t\t\n\t\t\t\tif (address &lt; DISK_SIZE_MB)\n\t\t\t\t\taddress += 1;\n\t\t\t\telse {\n\t\t\t\t\tprintf(&#34;write disk offset%d\\n&#34;, address);\n\t\t\t\t\tprintf(&#34;All disk write done\\n&#34;);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\n\t\t\t\tif (ret != 0) {\n\t\t\t\t\tprintf(&#34;Create pthread %d error!\\n&#34;,i);\n\t\t\t\t\texit(1);\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tres = pthread_join(write_thread[i], NULL);\n\t\t\t\tprintf(&#34;The result is %d\\n&#34;, res);\n\t\t}\n\t}\n\n\tprintf(&#34;ALL disk multithread write doned!\\n&#34;);\t\n}\n\n老师这个多线程写对吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662437666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"安徽"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62464,"user_name":"伍六七","can_delete":false,"product_type":"c1","uid":1257909,"ip_address":"","ucode":"1660D841731935","user_header":"https://static001.geekbang.org/account/avatar/00/13/31/b5/72bee483.jpg","comment_is_top":false,"comment_ctime":1548063382,"is_pvip":false,"replies":[{"id":"22133","content":"pidstat加上 -t 线程选项试试","user_name":"作者回复","comment_id":62464,"uid":"1001282","ip_address":"","utype":1,"ctime":1548116325,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"5843030678","product_id":100020901,"comment_content":"大佬，有时间介绍一下，脏页数据，缓存，现在用dstat 发现不定时有100 util 但是通过iotop pidstat 监控不到是哪个进程引起的","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437225,"discussion_content":"pidstat加上 -t 线程选项试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548116325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354356,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"湖南","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1660295500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660295500","product_id":100020901,"comment_content":"手动单次访问再strace和lsof都可以检测到写文件，shell 循环访问就检测不到。","like_count":0},{"had_liked":false,"id":322507,"user_name":"古月弓虽1993","can_delete":false,"product_type":"c1","uid":1237500,"ip_address":"","ucode":"86122CC701F02A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3jSpV7VvK6NaUH6X1LNYWGsQdFSTu4SwTZ0nQlSYGTOY2FrDCcMic9qFXnu2ZGR88hBlUQK28Whg/132","comment_is_top":false,"comment_ctime":1637429112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637429112","product_id":100020901,"comment_content":"我理解线程是进程的一部分，为什么strace跟踪不到呢","like_count":0},{"had_liked":false,"id":320278,"user_name":"geektime_zpf","can_delete":false,"product_type":"c1","uid":1041743,"ip_address":"","ucode":"FD61BCAD02CA54","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/4f/731ef2c1.jpg","comment_is_top":false,"comment_ctime":1636194782,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1636194782","product_id":100020901,"comment_content":"案例中docker run设置的hostPort=10000, curl的端口=1000, 需要修改一致..","like_count":0},{"had_liked":false,"id":255879,"user_name":"14155084066","can_delete":false,"product_type":"c1","uid":2245375,"ip_address":"","ucode":"EF5BFE8773578C","user_header":"https://static001.geekbang.org/account/avatar/00/22/42/ff/2a067d5d.jpg","comment_is_top":false,"comment_ctime":1603449756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603449756","product_id":100020901,"comment_content":"lsof放在while循环里也可以看到有文件生成","like_count":0},{"had_liked":false,"id":251368,"user_name":"Geek_a16bbc","can_delete":false,"product_type":"c1","uid":2008721,"ip_address":"","ucode":"6F12AFEF638413","user_header":"","comment_is_top":false,"comment_ctime":1601502214,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1601502214","product_id":100020901,"comment_content":"python codes裡面沒有用thread, 為何寫入文件是由thread來執行的呢？","like_count":0,"discussions":[{"author":{"id":1017245,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/9d/e6d3998e.jpg","nickname":"薛亮亮","note":"","ucode":"04696A6192BE93","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310407,"discussion_content":"猜测Flask 每个Request是new Thread来处理的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601818178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205855,"user_name":"刘友淙","can_delete":false,"product_type":"c1","uid":1620058,"ip_address":"","ucode":"97F3A69A308313","user_header":"","comment_is_top":false,"comment_ctime":1586747362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586747362","product_id":100020901,"comment_content":"D12 打卡","like_count":0},{"had_liked":false,"id":202053,"user_name":"斑马Z","can_delete":false,"product_type":"c1","uid":1500262,"ip_address":"","ucode":"ABB55B4652452F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0K9AM6xxDzVV6pF66jyus5NuuxZzT9icad8AQDMKibwUOy3UnoZIZdyKIKd9sA06rgFnIWwiakSeOQ/132","comment_is_top":false,"comment_ctime":1585894321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585894321","product_id":100020901,"comment_content":"这个案例我在最开始做的时候也是先用top、iostat、pidstat、strace一步一步来，找到问题进程，至于老师后面用到的filetop 和 opensnoop，我一开始不了解这个应用，当strace追踪不到时，我用了lsof 发现了在&#47;tmp下有文件生成然后消失，但是频次不如老师说的两个命令来的直观。","like_count":0},{"had_liked":false,"id":167211,"user_name":"永","can_delete":false,"product_type":"c1","uid":1297269,"ip_address":"","ucode":"F1737EBDB046FB","user_header":"https://static001.geekbang.org/account/avatar/00/13/cb/75/0106cd63.jpg","comment_is_top":false,"comment_ctime":1577717790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577717790","product_id":100020901,"comment_content":"了解到了，filetop 和 opensnoop工具，写入了大量的临时文件导致的。磁盘空间处理大量数据的技巧是好的。但是太多的写入了。","like_count":0},{"had_liked":false,"id":135591,"user_name":"NoBody","can_delete":false,"product_type":"c1","uid":1173766,"ip_address":"","ucode":"72E1B4FCDA2469","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/06/038a9cea.jpg","comment_is_top":false,"comment_ctime":1569222947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569222947","product_id":100020901,"comment_content":"老师你好。我想问一下如何定位那种快速消亡的线程tid，来查找pid。我根据上面的步骤以后。filetop结束以后用ps -efT已经获取不到pid了。最后搜索用ps -eLo pid= -o tid= | awk &#39;$2 == xxx{print $1}&#39;成功输出pid。但是如果线程如果消亡更快的话，应该怎么定位？","like_count":0},{"had_liked":false,"id":96113,"user_name":"Musisan","can_delete":false,"product_type":"c1","uid":1500498,"ip_address":"","ucode":"A9A9FE56AABEBA","user_header":"https://static001.geekbang.org/account/avatar/00/16/e5/52/35bc9c07.jpg","comment_is_top":false,"comment_ctime":1558334875,"is_pvip":false,"replies":[{"id":"34563","content":"试试重启docker","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1558447703,"ip_address":"","comment_id":96113,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558334875","product_id":100020901,"comment_content":"docker: Error response from daemon: driver failed programming external connectivity on endpoint app (175d6e56d8b0ac97ae0ae46a8b809785dcca95481147f73b71d01670d0546ad4):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0&#47;0 --dport 10000 -j DNAT --to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain&#47;target&#47;match by that name.<br> (exit status 1)).<br><br>老师，创建docker镜像时候出现这个，无法运行成功","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450725,"discussion_content":"试试重启docker","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558447703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75202,"user_name":"如果","can_delete":false,"product_type":"c1","uid":1320638,"ip_address":"","ucode":"138A3EEEE50850","user_header":"","comment_is_top":false,"comment_ctime":1552363284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552363284","product_id":100020901,"comment_content":"DAY27,打卡","like_count":0},{"had_liked":false,"id":65413,"user_name":"饼子","can_delete":false,"product_type":"c1","uid":1085953,"ip_address":"","ucode":"981A44836A5216","user_header":"https://static001.geekbang.org/account/avatar/00/10/92/01/c723d180.jpg","comment_is_top":false,"comment_ctime":1549340369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549340369","product_id":100020901,"comment_content":"打卡学习","like_count":0},{"had_liked":false,"id":63169,"user_name":"zzl","can_delete":false,"product_type":"c1","uid":1324898,"ip_address":"","ucode":"35096E644D853E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJibNCmnayibgDna5zJJC8jWWzRq3nA5NtsiasjvqYa5vU6QudUNwm8B1B5naz5cib0fjU2YzVUajrhLw/132","comment_is_top":false,"comment_ctime":1548292841,"is_pvip":false,"replies":[{"id":"22580","content":"对数据库来说，I&#47;O问题除了硬件错误之外，很有可能问题处在数据库本身的使用上。所以，可以从数据库的使用上去排查，比如表结构、SQL、慢查询等等","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1548576255,"ip_address":"","comment_id":63169,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1548292841","product_id":100020901,"comment_content":"老师您好，你讲的这个正常磁盘瓶颈情况，而我经常遇到的不是这样。比如我是用的中高端存储阵列，跑的是oracle数据库，突然出现io慢的问题，查看磁盘使用率100%，io等待时间很高，io读写只有每秒几K到几兆，磁盘队列正常，完全达不到存储阵列应有的样子，而数据库方面只给出了io读写缓慢导致数据库访问缓慢，让检查系统磁盘io，应用层则是表示最近没有任何变化，突然就变慢了。遇到这种情况，没什么办法，看下存储硬件没问题就不知道该怎么办了。您看这种情况应该怎搞清楚具体底层的原因呢","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437488,"discussion_content":"对数据库来说，I/O问题除了硬件错误之外，很有可能问题处在数据库本身的使用上。所以，可以从数据库的使用上去排查，比如表结构、SQL、慢查询等等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548576255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2016221,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c3/dd/33648195.jpg","nickname":"金刚","note":"","ucode":"9657132D6E5D9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586692,"discussion_content":"最近遇到类似问题，嵌入式方面的，和@zzl 遇到情况类似，上层向存储硬盘中写数据，但运行一段时间后，硬盘io接近100%，iostat查看硬盘iowait90%多，在scsi驱动层加打印:scsi_execute函数前后加入计时打印，发现这个执行很慢；至于到libata层scsi与ata命令转换以及map到taskfile执行还没做统计计时功能，目前尚不可知，但scsi层确实执行时间比正常时慢了几十倍不止，这就导致了io写慢。。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662438018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"安徽"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62778,"user_name":"code2","can_delete":false,"product_type":"c1","uid":1281792,"ip_address":"","ucode":"BBA5748FB6A01C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8OPzdpDraQMvCNWAicicDt54sDaIYJZicBLfMyibXVs4V0ZibEdkZlbzxxL7aGpRoeyvibag5LaAaaGKSdwYQMY2hUrQ/132","comment_is_top":false,"comment_ctime":1548155609,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1548155609","product_id":100020901,"comment_content":"观察数据库系统的I&#47;O问题时，是否注意力应集中在数据库进程上？","like_count":0,"discussions":[{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587587,"discussion_content":"有可能被其它进程影响，还是按部就班稳妥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663157910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}