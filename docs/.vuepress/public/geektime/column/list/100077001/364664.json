{"id":364664,"title":"导读｜5分钟轻松了解Spring基础知识","content":"<p>你好，我是傅健。</p><p>在开始我们第一章的学习之前，我想为你总结下有关Spring最基础的知识，这可以帮助我们后面的学习进展更加顺利一些。</p><p>就第一章来说，我们关注的是Spring核心功能使用中的各类错误案例。针对问题的讲解，我们大多都是直奔主题，这也是这个专栏的内容定位。所以对于<strong>很多基础的知识和流程</strong>，我们不会在解析过程中反复介绍，但它们依然是重要的，是我们解决问题的前提。借助这篇导读，我带你梳理下。</p><p>回顾Spring本身，什么是Spring最基础的知识呢？</p><p>其实就是那些<strong>Spring最本质的实现和思想</strong>。当你最开始学习的时候，你可能困惑于为什么要用Spring，而随着对Spring原理的深入探究和应用，你慢慢会发现，最大的收获其实还是对于这个困惑的理解。接下来我就给你讲讲。</p><p>在进行“传统的”Java编程时，对象与对象之间的关系都是紧密耦合的，例如服务类 Service 使用组件 ComponentA，则可能写出这样的代码：</p><pre><code>public class Service {\n    private ComponentA component = new ComponentA(&quot;first component&quot;);\n}\n</code></pre><p>在没有Spring之前，你应该会觉得这段代码并没有多大问题，毕竟大家都这么写，而且也没有什么更好的方式。就像只有一条大路可走时，大家都朝一个方向走，你大概率不会反思是不是有捷径。</p><!-- [[[read_end]]] --><p>而随着项目的开发推进，你会发现检验一个方式好不好的硬性标准之一，就是看它<strong>有没有拥抱变化的能力</strong>。假设有一天，我们的ComponentA类的构造器需要更多的参数了，你会发现，上述代码到处充斥着这行需要改进的代码：</p><blockquote>\n<p>private ComponentA component = new ComponentA(\"first component\");</p>\n</blockquote><p>此时你可能会想了，那我用下面这种方式来构造Service就可以了吧？</p><pre><code>public class Service {\n    private ComponentA component；\n    public Service(ComponentA component){\n      this.component = component;\n    }\n}\n</code></pre><p>当然不行，你忽略了一点，你在构建Service对象的时候，不还得使用new关键字来构建Component？需要修改的调用处并不少！</p><p>很明显，这是一个噩梦。那么，除了这点，还有没有别的不好的地方呢？上面说的是非单例的情况，如果ComponentA本身是一个单例，会不会好些？毕竟我们可能找一个地方new一次ComponentA实例就足够了，但是你可能会发现另外一些问题。</p><p>下面是一段用“双重检验锁”实现的CompoentA类：</p><pre><code>public class ComponentA{  \n    private volatile static ComponentA INSTANCE;  \n     \n    private ComponentA() {}  \n     \n    public static ComponentA getInstance(){  \n        if (INSTANCE== null) {  \n            synchronized (ComponentA.class) {  \n                if (INSTANCE== null) {  \n                    INSTANCE= new ComponentA();  \n                }  \n            }  \n        }  \n        return INSTANCE;  \n    }  \n}\n</code></pre><p>其实写了这么多代码，最终我们只是要一个单例而已。而且假设我们有ComponentB、ComponentC、ComponentD等，那上面的重复性代码不都得写一遍？也是烦的不行，不是么？</p><p>除了上述两个典型问题，还有不易于测试、不易扩展功能（例如支持AOP）等缺点。说白了，所有问题的根源（之一）就是<strong>对象与对象之间耦合性太强了</strong>。</p><p>所以Spring的引入，解决了上面这些零零种种的问题。那么它是怎么解决的呢？</p><p>这里套用一个租房的场景。我们为什么喜欢通过中介来租房子呢？因为省事呀，只要花点小钱就不用与房东产生直接的“纠缠”了。</p><p>Spring就是这个思路，它就像一个“中介”公司。当你需要一个依赖的对象（房子）时，你直接把你的需求告诉Spring（中介）就好了，它会帮你搞定这些依赖对象，按需创建它们，而无需你的任何额外操作。</p><p>不过，在Spring中，房东和租房者都是对象实例，只不过换了一个名字叫 Bean 而已。</p><p>可以说，通过一套稳定的生产流程，作为“中介”的Spring完成了生产和预装（牵线搭桥）这些Bean的任务。此时，你可能想了解更多。例如，如果一个Bean（租房者）需要用到另外一个Bean（房子）时，具体是怎么操作呢？</p><p>本质上只能从Spring“中介”里去找，有时候我们直接根据名称（小区名）去找，有时候则根据类型（户型），各种方式不尽相同。你就把<strong>Spring理解成一个Map型的公司</strong>即可，实现如下：</p><pre><code>public class BeanFactory {\n\n    private Map&lt;String, Bean&gt; beanMap = new HashMap&lt;&gt;();\n    \n    public Bean getBean(String key){\n      return beanMap.get(key) ;\n    }\n\n}\n</code></pre><p>如上述代码所示，Bean所属公司提供了对于Map的操作来完成查找，找到Bean后装配给其它对象，这就是依赖查找、自动注入的过程。</p><p>那么回过头看，这些Bean又是怎么被创建的呢？</p><p>对于一个项目而言，不可避免会出现两种情况：一些对象是需要Spring来管理的，另外一些（例如项目中其它的类和依赖的Jar中的类）又不需要。所以我们得有一个办法去标识哪些是需要成为Spring Bean，因此各式各样的注解才应运而生，例如Component注解等。</p><p>那有了这些注解后，谁又来做“发现”它们的工作呢？直接配置指定自然不成问题，但是很明显“自动发现”更让人省心。此时，我们往往需要一个扫描器，可以模拟写下这样一个扫描器：</p><pre><code>public class AnnotationScan {\n    \n    //通过扫描包名来找到Bean\n    void scan(String packages) {\n         //\n    }\n\n}\n</code></pre><p>有了扫描器，我们就知道哪些类是需要成为Bean。</p><p>那怎么实例化为Bean（也就是一个对象实例而已）呢？很明显，只能通过<strong>反射</strong>来做了。不过这里面的方式可能有多种：</p><ul>\n<li>java.lang.Class.newInsance()</li>\n<li>java.lang.reflect.Constructor.newInstance()</li>\n<li>ReflectionFactory.newConstructorForSerialization()</li>\n</ul><p><strong>有了创建，有了装配，一个Bean才能成为自己想要的样子。</strong></p><p>而需求总是源源不断的，我们有时候想记录一个方法调用的性能，有时候我们又想在方法调用时输出统一的调用日志。诸如此类，我们肯定不想频繁再来个散弹式的修改。所以我们有了AOP，帮忙拦截方法调用，进行功能扩展。拦截谁呢？在Spring中自然就是Bean了。</p><p>其实AOP并不神奇，结合刚才的Bean（中介）公司来讲，假设我们判断出一个Bean需要“增强”了，我们直接让它从公司返回的时候，就使用一个代理对象作为返回不就可以了么？示例如下：</p><pre><code>public class BeanFactory {\n\n    private Map&lt;String, Bean&gt; beanMap = new HashMap&lt;&gt;();\n    \n    public Bean getBean(String key){\n       //查找是否创建过\n       Bean bean = beanMap.get(key);\n       if(bean != null){\n         return bean;\n       }\n       //创建一个Bean\n       Bean bean = createBean();\n       //判断要不要AOP\n       boolean needAop = judgeIfNeedAop(bean);\n       try{\n           if(needAop)\n              //创建代理对象\n              bean = createProxyObject(bean);\n              return bean;\n           else:\n              return bean\n       }finally{\n           beanMap.put(key, bean);\n       }\n    }\n}\n</code></pre><p>那么怎么知道一个对象要不要AOP？既然一个对象要AOP，它肯定被标记了一些“规则”，例如拦截某个类的某某方法，示例如下：</p><pre><code>@Aspect\n@Service\npublic class AopConfig {\n    @Around(&quot;execution(* com.spring.puzzle.ComponentA.execute()) &quot;)\n    public void recordPayPerformance(ProceedingJoinPoint joinPoint) throws Throwable {\n      //\n    }\n}\n</code></pre><p>这个时候，很明显了，假设你的Bean名字是ComponentA，那么就应该返回ComponentA类型的代理对象了。至于这些规则是怎么建立起来的呢？你看到它上面使用的各种注解大概就能明白其中的规则了，无非就是<strong>扫描注解，根据注解创建规则</strong>。</p><p>以上即为Spring的一些核心思想，包括<strong>Bean的构建、自动注入和AOP</strong>，这中间还会掺杂无数的细节，不过这不重要，抓住这个核心思想对你接下来理解各种类型的错误案例才是大有裨益的！</p><p>你好，我是傅健，这节课我们来聊一聊  Spring Bean  的初始化过程及销毁过程中的一些问题。</p><p>虽然说  Spring  容器上手简单，可以仅仅通过学习一些有限的注解，即可达到快速使用的目的。但在工程实践中，我们依然会从中发现一些常见的错误。尤其当你对  Spring  的生命周期还没有深入了解时，类初始化及销毁过程中潜在的约定就不会很清楚。</p>","neighbors":{"left":{"article_title":"开篇词｜贴心“保姆”Spring罢工了怎么办？","id":364661},"right":{"article_title":"01｜Spring Bean 定义常见错误","id":364761}},"comments":[{"had_liked":false,"id":289067,"user_name":"undefined","can_delete":false,"product_type":"c1","uid":1100750,"ip_address":"","ucode":"768098DBDBE333","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/ce/d9e00eb5.jpg","comment_is_top":false,"comment_ctime":1618840522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"66043349962","product_id":100077001,"comment_content":"掌握了核心思想，下一步就是挑战魔鬼细节了。<br><br>The devil is in the details<br><br>[2021-04-19 21:55:05]","like_count":15},{"had_liked":false,"id":291692,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1620437127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31685208199","product_id":100077001,"comment_content":"用了这么多年的spring，也看过相关书籍。但就是没底，所以我来了","like_count":7},{"had_liked":false,"id":289122,"user_name":"阳阳","can_delete":false,"product_type":"c1","uid":1159221,"ip_address":"","ucode":"BD7404A3AE79E4","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/35/44e5516e.jpg","comment_is_top":false,"comment_ctime":1618882307,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"31683653379","product_id":100077001,"comment_content":"Spring核心思想：Bean的创建、自动注入、AOP","like_count":7},{"had_liked":false,"id":289675,"user_name":"LGY001","can_delete":false,"product_type":"c1","uid":1188176,"ip_address":"","ucode":"29CA0F9501D3EC","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/50/265671fd.jpg","comment_is_top":false,"comment_ctime":1619140288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27388944064","product_id":100077001,"comment_content":"老师讲的很清晰明白，之前都是一直知道怎么用，但是不知道为什么是这样，希望我能坚持学下去！！！","like_count":6},{"had_liked":false,"id":290354,"user_name":"jjn0703","can_delete":false,"product_type":"c1","uid":1076652,"ip_address":"","ucode":"83AF403AC7DFB7","user_header":"https://static001.geekbang.org/account/avatar/00/10/6d/ac/6128225f.jpg","comment_is_top":false,"comment_ctime":1619513177,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"23094349657","product_id":100077001,"comment_content":"清晰明了！","like_count":5},{"had_liked":false,"id":290022,"user_name":"民鹏","can_delete":false,"product_type":"c1","uid":1400841,"ip_address":"","ucode":"7E5E3C2C2EFA62","user_header":"https://static001.geekbang.org/account/avatar/00/15/60/09/90d9d988.jpg","comment_is_top":false,"comment_ctime":1619326342,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10209260934","product_id":100077001,"comment_content":"怀着空杯心态，学起来！","like_count":2},{"had_liked":false,"id":289798,"user_name":"心宇","can_delete":false,"product_type":"c1","uid":1296562,"ip_address":"","ucode":"5D43058CFEB1AE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wSdBrrprKiafx6c39iadevT47l2ibpZco9HRdKsjSdkeceF8QPNjXa9BOSic75PI0qiamoibOqUdOyYnGyTpTKtg2zfQ/132","comment_is_top":false,"comment_ctime":1619179127,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10209113719","product_id":100077001,"comment_content":"老师讲的很好，通俗易懂，期待下一章节","like_count":2},{"had_liked":false,"id":329784,"user_name":"William","can_delete":false,"product_type":"c1","uid":2540514,"ip_address":"","ucode":"AD099FA172BCCA","user_header":"","comment_is_top":false,"comment_ctime":1641537724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5936505020","product_id":100077001,"comment_content":"我纯粹是为了抢沙发来的","like_count":1},{"had_liked":false,"id":297484,"user_name":"伟伟","can_delete":false,"product_type":"c1","uid":1450367,"ip_address":"","ucode":"59BE820B03B97F","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/7f/efda2a64.jpg","comment_is_top":false,"comment_ctime":1623574953,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5918542249","product_id":100077001,"comment_content":"老师总结的很好","like_count":1},{"had_liked":false,"id":290375,"user_name":"zhongmin","can_delete":false,"product_type":"c1","uid":1265621,"ip_address":"","ucode":"C7AB10205A4F04","user_header":"https://static001.geekbang.org/account/avatar/00/13/4f/d5/1666b7d0.jpg","comment_is_top":false,"comment_ctime":1619518287,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"5914485583","product_id":100077001,"comment_content":"不是常说，放射影响性能，那岂不是Sprint创建的Bean的性能消耗，远大于直接new的对象","like_count":1,"discussions":[{"author":{"id":1156039,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a3/c7/eeecb1d9.jpg","nickname":"左耳粉丝","note":"","ucode":"A3A6D54C1DC60C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377114,"discussion_content":"需要被注入的bean对象都被项目启动的初期就加载到了内存","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1622511746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1754063,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/c3/cf/b7cf4eae.jpg","nickname":"null","note":"","ucode":"CF93143E303DAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372621,"discussion_content":"这一句话两个错别字，一不小心就看不懂了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1620394304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1077538,"avatar":"https://static001.geekbang.org/account/avatar/00/10/71/22/b8c596b6.jpg","nickname":"风","note":"","ucode":"104638BF19B048","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372040,"discussion_content":"spring中的对象基本都是单例","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620136851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548520,"discussion_content":"哇 如果是 你自己写过一些注解相关工作就很容易明白 你可以自定义加载顺序，比如考前靠后，甚至容器起来之后再做。。取决于你自己","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643247057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1079495,"avatar":"https://static001.geekbang.org/account/avatar/00/10/78/c7/083a3a0b.jpg","nickname":"新世界","note":"","ucode":"4473DC1505F158","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389391,"discussion_content":"如果是singleTon的对象，启动前就进行了初始化，如果是protype类型的bean，每次需要反射初始化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629259600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289121,"user_name":"Krystal","can_delete":false,"product_type":"c1","uid":1441810,"ip_address":"","ucode":"A8986403DE927C","user_header":"https://static001.geekbang.org/account/avatar/00/16/00/12/7048984b.jpg","comment_is_top":false,"comment_ctime":1618881848,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5913849144","product_id":100077001,"comment_content":"期待","like_count":1},{"had_liked":false,"id":361128,"user_name":"我吹呀吹","can_delete":false,"product_type":"c1","uid":1016322,"ip_address":"上海","ucode":"F5100C7066EECF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/82/02/a4e3e68e.jpg","comment_is_top":false,"comment_ctime":1667262746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667262746","product_id":100077001,"comment_content":"看起来Spring就是把平时重复的工作做了封装而已，核心是通过注解来自动化所有操作，编码-配置注解-依赖注入-代理包装","like_count":0},{"had_liked":false,"id":359927,"user_name":"棒棒糖","can_delete":false,"product_type":"c1","uid":2107111,"ip_address":"浙江","ucode":"7DFFE4B517FCDA","user_header":"https://static001.geekbang.org/account/avatar/00/20/26/e7/1c2c341d.jpg","comment_is_top":false,"comment_ctime":1666066341,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1666066341","product_id":100077001,"comment_content":"老师讲的很好，晚上回去按照该思路，画个流程图！","like_count":0},{"had_liked":false,"id":335978,"user_name":"程序员阿杜","can_delete":false,"product_type":"c1","uid":2717502,"ip_address":"","ucode":"701F330435A784","user_header":"https://static001.geekbang.org/account/avatar/00/29/77/3e/d89c0fff.jpg","comment_is_top":false,"comment_ctime":1645801154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645801154","product_id":100077001,"comment_content":"清晰明了！","like_count":0},{"had_liked":false,"id":332428,"user_name":"walle斌","can_delete":false,"product_type":"c1","uid":1062848,"ip_address":"","ucode":"0DB3243004951F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","comment_is_top":false,"comment_ctime":1643247066,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643247066","product_id":100077001,"comment_content":"spring核心 IOC DI AOP。。。","like_count":0},{"had_liked":false,"id":327502,"user_name":"、、cryAllen","can_delete":false,"product_type":"c1","uid":1017204,"ip_address":"","ucode":"50032F6E2DDB4B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/74/e70862a2.jpg","comment_is_top":false,"comment_ctime":1640152663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640152663","product_id":100077001,"comment_content":"简洁明了。","like_count":0},{"had_liked":false,"id":309937,"user_name":"Geek_926921","can_delete":false,"product_type":"c1","uid":2532285,"ip_address":"","ucode":"51C3B0178D77E1","user_header":"","comment_is_top":false,"comment_ctime":1630400870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630400870","product_id":100077001,"comment_content":"之前都是面试而去看spring，没有进行过系统化的学习，趁现在找到工作后系统化学习一遍，防止下次出现面试前又得去看别人写的。","like_count":0},{"had_liked":false,"id":290166,"user_name":"Chen","can_delete":false,"product_type":"c1","uid":1107621,"ip_address":"","ucode":"CC751EC1E93531","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/a5/1eba0386.jpg","comment_is_top":false,"comment_ctime":1619411907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619411907","product_id":100077001,"comment_content":"期待","like_count":0},{"had_liked":false,"id":289418,"user_name":"路奇","can_delete":false,"product_type":"c1","uid":1617589,"ip_address":"","ucode":"C7B7D5CD6E35C2","user_header":"https://static001.geekbang.org/account/avatar/00/18/ae/b5/63ebf87d.jpg","comment_is_top":false,"comment_ctime":1619004493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619004493","product_id":100077001,"comment_content":"通俗易懂 但是需要细节","like_count":0},{"had_liked":false,"id":289334,"user_name":"黑白颠倒","can_delete":false,"product_type":"c1","uid":2167240,"ip_address":"","ucode":"E79D2540C3F668","user_header":"https://static001.geekbang.org/account/avatar/00/21/11/c8/889846a7.jpg","comment_is_top":false,"comment_ctime":1618980091,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618980091","product_id":100077001,"comment_content":"Spring的核心思想是IOC：将类交由Spring托管","like_count":0},{"had_liked":false,"id":289238,"user_name":"小学生","can_delete":false,"product_type":"c1","uid":1166994,"ip_address":"","ucode":"6EF88756389547","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/92/f53c41ee.jpg","comment_is_top":false,"comment_ctime":1618929779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618929779","product_id":100077001,"comment_content":"催更催更！","like_count":0},{"had_liked":false,"id":289229,"user_name":"逗逼师父","can_delete":false,"product_type":"c1","uid":1017863,"ip_address":"","ucode":"ECC2D82F83CBE6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/07/7804f4cc.jpg","comment_is_top":false,"comment_ctime":1618924600,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618924600","product_id":100077001,"comment_content":"不写查哇好多年，现在回来重新学。","like_count":0},{"had_liked":false,"id":289068,"user_name":"潘登","can_delete":false,"product_type":"c1","uid":2171872,"ip_address":"","ucode":"3354FFF1DEE93F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/gq1EeEEFPQicEQA1C1xxe4BpYdWoKhfxX4nIm40RvbqKbI3IBrpFRv7hAXfvA7cUoWePq2iaL5NU2mscb4T0wp7w/132","comment_is_top":false,"comment_ctime":1618840754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618840754","product_id":100077001,"comment_content":"通俗易懂","like_count":0},{"had_liked":false,"id":289053,"user_name":"Bug? Feature!","can_delete":false,"product_type":"c1","uid":1164531,"ip_address":"","ucode":"F8FA8A0094FBA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","comment_is_top":false,"comment_ctime":1618834804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618834804","product_id":100077001,"comment_content":"Mark","like_count":0}]}