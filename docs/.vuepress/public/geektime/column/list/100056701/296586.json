{"id":296586,"title":"26 | 缓存异常（下）：如何解决缓存雪崩、击穿、穿透难题？","content":"<p>你好，我是蒋德钧。</p><p>上节课，我们学习了缓存和数据库的数据不一致问题和应对方法。除了数据不一致问题，我们常常还会面临缓存异常的三个问题，分别是缓存雪崩、缓存击穿和缓存穿透。这三个问题一旦发生，会导致大量的请求积压到数据库层。如果请求的并发量很大，就会导致数据库宕机或是故障，这就是很严重的生产事故了。</p><p>这节课，我就来和你聊聊这三个问题的表现、诱发原因以及解决方法。俗话说，知己知彼，百战不殆。了解了问题的成因，我们就能够在应用Redis缓存时，进行合理的缓存设置，以及相应的业务应用前端设置，提前做好准备。</p><p>接下来，我们就先看下缓存雪崩的问题和应对方案。</p><h2>缓存雪崩</h2><p>缓存雪崩是指大量的应用请求无法在Redis缓存中进行处理，紧接着，应用将大量请求发送到数据库层，导致数据库层的压力激增。</p><p>缓存雪崩一般是由两个原因导致的，应对方案也有所不同，我们一个个来看。</p><p>第一个原因是：缓存中有大量数据同时过期，导致大量请求无法得到处理。</p><p>具体来说，当数据保存在缓存中，并且设置了过期时间时，如果在某一个时刻，大量数据同时过期，此时，应用再访问这些数据的话，就会发生缓存缺失。紧接着，应用就会把请求发送给数据库，从数据库中读取数据。如果应用的并发请求量很大，那么数据库的压力也就很大，这会进一步影响到数据库的其他正常业务请求处理。我们来看一个简单的例子，如下图所示：</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/74/2e/74bb1aa4b2213e3ff29e2ee701e8f72e.jpg?wh=3000*2250\" alt=\"\"></p><p>针对大量数据同时失效带来的缓存雪崩问题，我给你提供两种解决方案。</p><p>首先，我们可以避免给大量的数据设置相同的过期时间。如果业务层的确要求有些数据同时失效，你可以在用EXPIRE命令给每个数据设置过期时间时，给这些数据的过期时间增加一个较小的随机数（例如，随机增加1~3分钟），这样一来，不同数据的过期时间有所差别，但差别又不会太大，既避免了大量数据同时过期，同时也保证了这些数据基本在相近的时间失效，仍然能满足业务需求。</p><p>除了微调过期时间，我们还可以通过服务降级，来应对缓存雪崩。</p><p>所谓的服务降级，是指发生缓存雪崩时，针对不同的数据采取不同的处理方式。</p><ul>\n<li>当业务应用访问的是非核心数据（例如电商商品属性）时，暂时停止从缓存中查询这些数据，而是直接返回预定义信息、空值或是错误信息；</li>\n<li>当业务应用访问的是核心数据（例如电商商品库存）时，仍然允许查询缓存，如果缓存缺失，也可以继续通过数据库读取。</li>\n</ul><p>这样一来，只有部分过期数据的请求会发送到数据库，数据库的压力就没有那么大了。下面这张图显示的是服务降级时数据请求的执行情况，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/a8/4ab3be5ba24cf172879e6b2cff649ca8.jpg?wh=1910*1685\" alt=\"\"></p><p><strong>除了大量数据同时失效会导致缓存雪崩，还有一种情况也会发生缓存雪崩，那就是，Redis缓存实例发生故障宕机了，无法处理请求，这就会导致大量请求一下子积压到数据库层，从而发生缓存雪崩。</strong></p><p>一般来说，一个Redis实例可以支持数万级别的请求处理吞吐量，而单个数据库可能只能支持数千级别的请求处理吞吐量，它们两个的处理能力可能相差了近十倍。由于缓存雪崩，Redis缓存失效，所以，数据库就可能要承受近十倍的请求压力，从而因为压力过大而崩溃。</p><p>此时，因为Redis实例发生了宕机，我们需要通过其他方法来应对缓存雪崩了。我给你提供两个建议。</p><p><strong>第一个建议，是在业务系统中实现服务熔断或请求限流机制。</strong></p><p>所谓的服务熔断，是指在发生缓存雪崩时，为了防止引发连锁的数据库雪崩，甚至是整个系统的崩溃，我们暂停业务应用对缓存系统的接口访问。再具体点说，就是业务应用调用缓存接口时，缓存客户端并不把请求发给Redis缓存实例，而是直接返回，等到Redis缓存实例重新恢复服务后，再允许应用请求发送到缓存系统。</p><p>这样一来，我们就避免了大量请求因缓存缺失，而积压到数据库系统，保证了数据库系统的正常运行。</p><p>在业务系统运行时，我们可以监测Redis缓存所在机器和数据库所在机器的负载指标，例如每秒请求数、CPU利用率、内存利用率等。如果我们发现Redis缓存实例宕机了，而数据库所在机器的负载压力突然增加（例如每秒请求数激增），此时，就发生缓存雪崩了。大量请求被发送到数据库进行处理。我们可以启动服务熔断机制，暂停业务应用对缓存服务的访问，从而降低对数据库的访问压力，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/17/b5/17d39f6233c3332161c588b42eccaeb5.jpg?wh=1687*1692\" alt=\"\"></p><p>服务熔断虽然可以保证数据库的正常运行，但是暂停了整个缓存系统的访问，对业务应用的影响范围大。为了尽可能减少这种影响，我们也可以进行请求限流。这里说的请求限流，就是指，我们在业务系统的请求入口前端控制每秒进入系统的请求数，避免过多的请求被发送到数据库。</p><p>我给你举个例子。假设业务系统正常运行时，请求入口前端允许每秒进入系统的请求是1万个，其中，9000个请求都能在缓存系统中进行处理，只有1000个请求会被应用发送到数据库进行处理。</p><p>一旦发生了缓存雪崩，数据库的每秒请求数突然增加到每秒1万个，此时，我们就可以启动请求限流机制，在请求入口前端只允许每秒进入系统的请求数为1000个，再多的请求就会在入口前端被直接拒绝服务。所以，使用了请求限流，就可以避免大量并发请求压力传递到数据库层。</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/54/d5a0928e1d97cae2f4a4fb5b93e5c854.jpg?wh=3000*2250\" alt=\"\"></p><p>使用服务熔断或是请求限流机制，来应对Redis实例宕机导致的缓存雪崩问题，是属于“事后诸葛亮”，也就是已经发生缓存雪崩了，我们使用这两个机制，来降低雪崩对数据库和整个业务系统的影响。</p><p><strong>我给你的第二个建议就是事前预防。</strong></p><p>通过主从节点的方式构建Redis缓存高可靠集群。如果Redis缓存的主节点故障宕机了，从节点还可以切换成为主节点，继续提供缓存服务，避免了由于缓存实例宕机而导致的缓存雪崩问题。</p><p>缓存雪崩是发生在大量数据同时失效的场景下，而接下来我要向你介绍的缓存击穿，是发生在某个热点数据失效的场景下。和缓存雪崩相比，缓存击穿失效的数据数量要小很多，应对方法也不一样，我们来看下。</p><h2>缓存击穿</h2><p>缓存击穿是指，针对某个访问非常频繁的热点数据的请求，无法在缓存中进行处理，紧接着，访问该数据的大量请求，一下子都发送到了后端数据库，导致了数据库压力激增，会影响数据库处理其他请求。缓存击穿的情况，经常发生在热点数据过期失效时，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/d4/4b/d4c77da4yy7d6e34aca460642923ab4b.jpg?wh=3000*2250\" alt=\"\"></p><p>为了避免缓存击穿给数据库带来的激增压力，我们的解决方法也比较直接，对于访问特别频繁的热点数据，我们就不设置过期时间了。这样一来，对热点数据的访问请求，都可以在缓存中进行处理，而Redis数万级别的高吞吐量可以很好地应对大量的并发请求访问。</p><p>好了，到这里，你了解了缓存雪崩和缓存击穿问题，以及它们的应对方案。当发生缓存雪崩或击穿时，数据库中还是保存了应用要访问的数据。接下来，我向你介绍的缓存穿透问题，和雪崩、击穿问题不一样，缓存穿透发生时，数据也不在数据库中，这会同时给缓存和数据库带来访问压力，那该怎么办呢？我们来具体看下。</p><h2>缓存穿透</h2><p>缓存穿透是指要访问的数据既不在Redis缓存中，也不在数据库中，导致请求在访问缓存时，发生缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据。此时，应用也无法从数据库中读取数据再写入缓存，来服务后续请求，这样一来，缓存也就成了“摆设”，如果应用持续有大量请求访问数据，就会同时给缓存和数据库带来巨大压力，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/46/2e/46c49dd155665579c5204a66da8ffc2e.jpg?wh=3000*2250\" alt=\"\"></p><p>那么，缓存穿透会发生在什么时候呢？一般来说，有两种情况。</p><ul>\n<li>业务层误操作：缓存中的数据和数据库中的数据被误删除了，所以缓存和数据库中都没有数据；</li>\n<li>恶意攻击：专门访问数据库中没有的数据。</li>\n</ul><p>为了避免缓存穿透的影响，我来给你提供三种应对方案。</p><p><strong>第一种方案是，缓存空值或缺省值。</strong></p><p>一旦发生缓存穿透，我们就可以针对查询的数据，在Redis中缓存一个空值或是和业务层协商确定的缺省值（例如，库存的缺省值可以设为0）。紧接着，应用发送的后续请求再进行查询时，就可以直接从Redis中读取空值或缺省值，返回给业务应用了，避免了把大量请求发送给数据库处理，保持了数据库的正常运行。</p><p><strong>第二种方案是，使用布隆过滤器快速判断数据是否存在，避免从数据库中查询数据是否存在，减轻数据库压力。</strong></p><p>我们先来看下，布隆过滤器是如何工作的。</p><p>布隆过滤器由一个初值都为0的bit数组和N个哈希函数组成，可以用来快速判断某个数据是否存在。当我们想标记某个数据存在时（例如，数据已被写入数据库），布隆过滤器会通过三个操作完成标记：</p><ul>\n<li>首先，使用N个哈希函数，分别计算这个数据的哈希值，得到N个哈希值。</li>\n<li>然后，我们把这N个哈希值对bit数组的长度取模，得到每个哈希值在数组中的对应位置。</li>\n<li>最后，我们把对应位置的bit位设置为1，这就完成了在布隆过滤器中标记数据的操作。</li>\n</ul><p>如果数据不存在（例如，数据库里没有写入数据），我们也就没有用布隆过滤器标记过数据，那么，bit数组对应bit位的值仍然为0。</p><p>当需要查询某个数据时，我们就执行刚刚说的计算过程，先得到这个数据在bit数组中对应的N个位置。紧接着，我们查看bit数组中这N个位置上的bit值。只要这N个bit值有一个不为1，这就表明布隆过滤器没有对该数据做过标记，所以，查询的数据一定没有在数据库中保存。为了便于你理解，我画了一张图，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/98/68/98f7d32499e4386b40aebc3622aa7268.jpg?wh=2953*1342\" alt=\"\"></p><p>图中布隆过滤器是一个包含10个bit位的数组，使用了3个哈希函数，当在布隆过滤器中标记数据X时，X会被计算3次哈希值，并对10取模，取模结果分别是1、3、7。所以，bit数组的第1、3、7位被设置为1。当应用想要查询X时，只要查看数组的第1、3、7位是否为1，只要有一个为0，那么，X就肯定不在数据库中。</p><p>正是基于布隆过滤器的快速检测特性，我们可以在把数据写入数据库时，使用布隆过滤器做个标记。当缓存缺失后，应用查询数据库时，可以通过查询布隆过滤器快速判断数据是否存在。如果不存在，就不用再去数据库中查询了。这样一来，即使发生缓存穿透了，大量请求只会查询Redis和布隆过滤器，而不会积压到数据库，也就不会影响数据库的正常运行。布隆过滤器可以使用Redis实现，本身就能承担较大的并发访问压力。</p><p>最后一种方案是，在请求入口的<strong>前端进行请求检测。</strong>缓存穿透的一个原因是有大量的恶意请求访问不存在的数据，所以，一个有效的应对方案是在请求入口前端，对业务系统接收到的请求进行合法性检测，把恶意的请求（例如请求参数不合理、请求参数是非法值、请求字段不存在）直接过滤掉，不让它们访问后端缓存和数据库。这样一来，也就不会出现缓存穿透问题了。</p><p>跟缓存雪崩、缓存击穿这两类问题相比，缓存穿透的影响更大一些，希望你能重点关注一下。从预防的角度来说，我们需要避免误删除数据库和缓存中的数据；从应对角度来说，我们可以在业务系统中使用缓存空值或缺省值、使用布隆过滤器，以及进行恶意请求检测等方法。</p><h2>小结</h2><p>这节课，我们学习了缓存雪崩、击穿和穿透这三类异常问题。从问题成因来看，缓存雪崩和击穿主要是因为数据不在缓存中了，而缓存穿透则是因为数据既不在缓存中，也不在数据库中。所以，缓存雪崩或击穿时，一旦数据库中的数据被再次写入到缓存后，应用又可以在缓存中快速访问数据了，数据库的压力也会相应地降低下来，而缓存穿透发生时，Redis缓存和数据库会同时持续承受请求压力。</p><p>为了方便你掌握，我把这三大问题的原因和应对方案总结到了一张表格，你可以再复习一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/b5/e1/b5bd931239be18bef24b2ef36c70e9e1.jpg?wh=2843*1243\" alt=\"\"></p><p>最后，我想强调一下，服务熔断、服务降级、请求限流这些方法都是属于“有损”方案，在保证数据库和整体系统稳定的同时，会对业务应用带来负面影响。例如使用服务降级时，有部分数据的请求就只能得到错误返回信息，无法正常处理。如果使用了服务熔断，那么，整个缓存系统的服务都被暂停了，影响的业务范围更大。而使用了请求限流机制后，整个业务系统的吞吐率会降低，能并发处理的用户请求会减少，会影响到用户体验。</p><p>所以，我给你的建议是，尽量使用预防式方案：</p><ul>\n<li>针对缓存雪崩，合理地设置数据过期时间，以及搭建高可靠缓存集群；</li>\n<li>针对缓存击穿，在缓存访问非常频繁的热点数据时，不要设置过期时间；</li>\n<li>针对缓存穿透，提前在入口前端实现恶意请求检测，或者规范数据库的数据删除操作，避免误删除。</li>\n</ul><h2>每课一问</h2><p>按照惯例，我给你提个小问题。在讲到缓存雪崩时，我提到，可以采用服务熔断、服务降级、请求限流的方法来应对。请你思考下，这三个机制可以用来应对缓存穿透问题吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得今天的内容对你有所帮助，也欢迎你分享给你的朋友或同事。我们下节课见。</p>","neighbors":{"left":{"article_title":"25 | 缓存异常（上）：如何解决缓存和数据库的数据不一致问题？","id":295812},"right":{"article_title":"27 | 缓存被污染了，该怎么办？","id":297270}},"comments":[{"had_liked":false,"id":253697,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1602834807,"is_pvip":true,"discussion_count":25,"race_medal":0,"score":"1354517533047","product_id":100056701,"comment_content":"是否可以采用服务熔断、服务降级、请求限流的方法来应对缓存穿透问题？<br><br>我觉得需要区分场景来看。<br><br>如果缓存穿透的原因是恶意攻击，攻击者故意访问数据库中不存在的数据。这种情况可以先使用服务熔断、服务降级、请求限流的方式，对缓存和数据库层增加保护，防止大量恶意请求把缓存和数据库压垮。在这期间可以对攻击者进行防护，例如封禁IP等操作。<br><br>如果缓存穿透的原因是，业务层误操作把数据从缓存和数据库都删除了，如果误删除的数据很少，不会导致大量请求压到数据库的情况，那么快速恢复误删的数据就好了，不需要使用服务熔断、服务降级、请求限流。如果误操作删除的数据范围比较广，导致大量请求压到数据库层，此时使用服务熔断、服务降级、请求限流的方法来应对是有帮助的，使用这些方法先把缓存和数据库保护起来，然后使用备份库快速恢复数据，在数据恢复期间，这些保护方法可以为数据库恢复提供保障。<br><br>还有一种缓存穿透的场景，我们平时会遇到的，和大家分享一下。<br><br>对于一个刚上线的新业务模块，如果还没有用户在这个模块内产生业务数据，当用户需要查询这个业务模块自己的数据时，由于缓存和数据库都没有这个用户的数据，此时也会产生缓存穿透，但这种场景不像误删数据和恶意攻击那样，而是属于正常的用户行为。<br><br>这种场景采用服务熔断、服务降级、请求限流的方式就没有任何意义了，反而会影响正常用户的访问。这种场景只能使用缓存回种空值、布隆过滤器来解决。<br><br>可见，服务熔断、服务降级、请求限流的作用是，当系统内部发生故障或潜在问题时，为了防止系统内部的问题进一步恶化，所以会采用这些方式对系统增加保护，待系统内部故障恢复后，可以依旧继续对外提供服务，这些方法属于服务治理的范畴，在任何可能导致系统故障的场景下，都可以选择性配合使用。<br><br>另外，关于文章所讲的由于“Redis缓存实例发生故障宕机”导致缓存雪崩的问题，我觉得一个可以优化的方案是，当Redis实例故障宕机后，业务请求可以直接返回错误，没必要再去请求数据库了，这样就不会导致数据库层压力变大。当然，最好的方式还是Redis部署主从集群+哨兵，主节点宕机后，哨兵可以及时把从节点提升为主，继续提供服务。<br><br>关于布隆过滤器的使用，还有几点和大家分享。<br><br>1、布隆过滤器会有误判：由于采用固定bit的数组，使用多个哈希函数映射到多个bit上，有可能会导致两个不同的值都映射到相同的一组bit上。虽然有误判，但对于业务没有影响，无非就是还存在一些穿透而已，但整体上已经过滤了大多数无效穿透请求。<br><br>2、布隆过滤器误判率和空间使用的计算：误判本质是因为哈希冲突，降低误判的方法是增加哈希函数 + 扩大整个bit数组的长度，但增加哈希函数意味着影响性能，扩大数组长度意味着空间占用变大，所以使用布隆过滤器，需要在误判率和性能、空间作一个平衡，具体的误判率是有一个计算公式可以推导出来的（比较复杂）。但我们在使用开源的布隆过滤器时比较简单，通常会提供2个参数：预估存入的数据量大小、要求的误判率，输入这些参数后，布隆过滤器会有自动计算出最佳的哈希函数数量和数组占用的空间大小，直接使用即可。<br><br>3、布隆过滤器可以放在缓存和数据库的最前面：把Redis当作布隆过滤器时（4.0提供了布隆过滤器模块，4.0以下需要引入第三方库），当用户产生业务数据写入缓存和数据库后，同时也写入布隆过滤器，之后当用户访问自己的业务数据时，先检查布隆过滤器，如果过滤器不存在，就不需要查询缓存和数据库了，可以同时降低缓存和数据库的压力。<br><br>4、Redis实现的布隆过滤器bigkey问题：Redis布隆过滤器是使用String类型实现的，存储的方式是一个bigkey，建议使用时单独部署一个实例，专门存放布隆过滤器的数据，不要和业务数据混用，否则在集群环境下，数据迁移时会导致Redis阻塞问题。","like_count":316,"discussions":[{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337029,"discussion_content":"1）、缓存雪崩还有一个场景，是一致性hash环的集群特性导致的。集群中 某个主从节点挂掉了，请求分散到其他集群，但是量极大，把其他集群也都冲垮了。\n解决办法，如果场景是热的极热 冷的极冷，不建议使用 一致性hash环的集群玩法，直接使用逻辑分组，挂掉的就暂时挂掉，后续人工恢复。  总比打垮整个系统的好\n\n2）、缓存击穿  不只有不写过期时间，也可以对读数据做预判，例如主动给某些热的数据做 过期时间延期操作。\n\n3）、布隆过滤器介绍  最后一部分 关于命中这部分缺少了，如果都是1 那么结果返回 存在，但是真正存在吗？ 不一定，可能是由于其他value的hash函数填充的，所以  对于 布隆过滤器 返回存在的，我们要穿透到缓存与db中查询。\n像一个极端情况，如果 整个bit数组 都是1 或者大部分都是1的场景，这说明什么？ 说明布隆过期已经基本被填满了，也说明超出了布隆过滤器 一开始预期的大小，没错 布隆过滤器是需要事先预知 总容量大小与误判率预期的，否则就会出现 误判率极高 基本等于 没有作用的情况\n\n4）、redis实现布隆过滤器 是bigKey，但是是string 的数据结构，整体而言 问题不是特别大，从redis4.0 lazy-free 删除string结构 并不是在子线程而主线程直接删除就能看出来，网上也有很多实现 string的删除耗时并没有随着value大小增加而增加太多，当然 如果能单独创建实例最好。\n\n5）、布隆过期率场景应用很常见，例如 hbase的MemStore读之前一定会先查询布隆过滤器。再举一个实际的业务场景，微博 微信 每一条数据都要展示，你是否对某个数据赞过，这点 明显用布隆过滤器 比传统的缓存+db 好多了。因为绝大部分信息你都没有点过赞","likes_number":36,"is_delete":false,"is_hidden":false,"ctime":1608773959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/81/ad80f427.jpg","nickname":"Lane","note":"","ucode":"F70459D1BBD9F4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321893,"discussion_content":"关于误判的补充：如果布隆过滤器说有，那不一定有，如果说没有，那一定是没有。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1604646339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1008257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/81/ad80f427.jpg","nickname":"Lane","note":"","ucode":"F70459D1BBD9F4","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":321897,"discussion_content":"是的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604647271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":321893,"ip_address":""},"score":321897,"extra":""}]},{"author":{"id":1325816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","nickname":"君哥聊技术","note":"","ucode":"2C9A22BCE4C79E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313004,"discussion_content":"恶意攻击的情况我觉得可以在网关进行判断和拦截，就不用让它到业务系统了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1602906864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1325816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","nickname":"君哥聊技术","note":"","ucode":"2C9A22BCE4C79E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313009,"discussion_content":"是的，最好在最前面拦截。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602909402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":313004,"ip_address":""},"score":313009,"extra":""},{"author":{"id":1113937,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/51/9d5cfadd.jpg","nickname":"好运来","note":"","ucode":"F469ED6CEFEF30","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":316756,"discussion_content":"那这样做网关不是和业务有点耦合了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603450360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":313009,"ip_address":""},"score":316756,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1113937,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/51/9d5cfadd.jpg","nickname":"好运来","note":"","ucode":"F469ED6CEFEF30","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":316760,"discussion_content":"网关服务和业务服务分别独立的，通过网关后才会调用业务系统。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603450932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":316756,"ip_address":""},"score":316760,"extra":""}]},{"author":{"id":1307497,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f3/69/7039d03f.jpg","nickname":"书策稠浊","note":"","ucode":"A29875CE15FDA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554045,"discussion_content":"买一篇专栏送一篇专栏","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1646196238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553670,"discussion_content":"评论太精彩了，mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646020783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1589523,"avatar":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","nickname":"树心","note":"","ucode":"6C329F0FF798B9","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540981,"discussion_content":"优质评论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640224995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1334377,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5c/69/1a4fa7d9.jpg","nickname":"beslet","note":"","ucode":"6A95C896558C11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403050,"discussion_content":"新业务上线可以考虑缓存预热","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634001667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1262808,"avatar":"https://static001.geekbang.org/account/avatar/00/13/44/d8/1a1761f9.jpg","nickname":"James_Shangguan","note":"","ucode":"F5855BC008DDEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1334377,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5c/69/1a4fa7d9.jpg","nickname":"beslet","note":"","ucode":"6A95C896558C11","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413055,"discussion_content":"缓存预热+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636373109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":403050,"ip_address":""},"score":413055,"extra":""}]},{"author":{"id":2371496,"avatar":"https://static001.geekbang.org/account/avatar/00/24/2f/a8/48f18389.jpg","nickname":"Doraemon","note":"","ucode":"C0825997B58734","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341244,"discussion_content":"麻烦请教一下？如果布隆过滤器存在误判，那么如果就是正常请求此时布隆过滤器误判了没有此数据（实际是有的），此时用户看到不就是没有数据，数据上却存在数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610359470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2371496,"avatar":"https://static001.geekbang.org/account/avatar/00/24/2f/a8/48f18389.jpg","nickname":"Doraemon","note":"","ucode":"C0825997B58734","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341250,"discussion_content":"布隆没有肯定是没有。\n\n误判的是布隆说有，可能是没有的，这种情况依旧查数据库就行，业务不会有问题。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1610361575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341244,"ip_address":""},"score":341250,"extra":""},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":347377,"discussion_content":"如果是因为redis宕机数据丢失导致的误判呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612225286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341250,"ip_address":""},"score":347377,"extra":""},{"author":{"id":1173894,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","nickname":"heyman","note":"","ucode":"92EF9EF1B1B1B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363168,"discussion_content":"不同范畴","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617118396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":347377,"ip_address":""},"score":363168,"extra":""}]},{"author":{"id":1403926,"avatar":"https://static001.geekbang.org/account/avatar/00/15/6c/16/1ab3a06e.jpg","nickname":"克罗地亚狂想曲","note":"","ucode":"79CBA38A2F15D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323249,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604906965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1148845,"avatar":"https://static001.geekbang.org/account/avatar/00/11/87/ad/50a85a04.jpg","nickname":"hao","note":"","ucode":"997F2B57E2F556","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321972,"discussion_content":"理解到位了的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604656456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2205307,"avatar":"https://static001.geekbang.org/account/avatar/00/21/a6/7b/1b581f07.jpg","nickname":"思变","note":"","ucode":"DE73A587523739","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318743,"discussion_content":"为什么用三个哈希函数呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603842590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2205307,"avatar":"https://static001.geekbang.org/account/avatar/00/21/a6/7b/1b581f07.jpg","nickname":"思变","note":"","ucode":"DE73A587523739","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318795,"discussion_content":"降低哈希冲突的概率。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603851332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318743,"ip_address":""},"score":318795,"extra":""}]},{"author":{"id":1446644,"avatar":"https://static001.geekbang.org/account/avatar/00/16/12/f4/1bf8568e.jpg","nickname":"学要有所用","note":"","ucode":"7CB34E7DE21558","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318729,"discussion_content":"建议使用时部署一个实例，是指部署一个redis实例还是指部署布隆过滤器的实例？集群环境下迁移数据为何会导致redis阻塞？是因为数据迁移时，redis缓存无法进行？小白一枚，望指点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603815797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1446644,"avatar":"https://static001.geekbang.org/account/avatar/00/16/12/f4/1bf8568e.jpg","nickname":"学要有所用","note":"","ucode":"7CB34E7DE21558","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318797,"discussion_content":"布隆过滤器的实例单独部署，不和业务实例混用。\n\n集群多个节点之间迁移一个key会同时阻塞这两个节点，直到这个key迁移完成，如果是bigkey阻塞时间会更久，影响业务。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1603851486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318729,"ip_address":""},"score":318797,"extra":""}]},{"author":{"id":1530379,"avatar":"https://static001.geekbang.org/account/avatar/00/17/5a/0b/ff309add.jpg","nickname":"Franklin","note":"","ucode":"E4580C46DB00EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312877,"discussion_content":"布隆过滤器实际的业务中用的多吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602841760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1530379,"avatar":"https://static001.geekbang.org/account/avatar/00/17/5a/0b/ff309add.jpg","nickname":"Franklin","note":"","ucode":"E4580C46DB00EE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312878,"discussion_content":"很多的，很多数据库引擎也用到了布隆过滤器。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1602841875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312877,"ip_address":""},"score":312878,"extra":""}]}]},{"had_liked":false,"id":254014,"user_name":"徐培","can_delete":false,"product_type":"c1","uid":1281480,"ip_address":"","ucode":"0020C302D02C34","user_header":"https://static001.geekbang.org/account/avatar/00/13/8d/c8/3ffed92b.jpg","comment_is_top":false,"comment_ctime":1603016393,"is_pvip":true,"replies":[{"id":"93762","content":"回答的非常好！看到了缓存穿透的本质，也看清了和击穿、雪崩情况的区别。","user_name":"作者回复","comment_id":254014,"uid":"1609687","ip_address":"","utype":1,"ctime":1604027295,"user_name_real":"蒋德钧"}],"discussion_count":10,"race_medal":0,"score":"551358830281","product_id":100056701,"comment_content":"        我觉得并没有必要：采用服务熔断、服务降级、请求限流的方法来应对缓存穿透的场景；<br>        因为缓存穿透的场景实质上是因为查询到了Redis和数据库中没有的数据。<br>        熔断、降级、限流，本质上是为了解决Redis实例没有起到缓存层作用这种情况；在损失业务吞吐量的代价下，在时间的作用下，随着过期key慢慢填充，Redis实例可以自行恢复缓存层作用。<br>        而缓存穿透的场景，是因为用户要让Redis和数据库提供一个它没有的东西。这种场景下，如果没有人工介入，不论时间过去多久，都不太可能会自然恢复。<br>        采用这种有损业务吞吐量的行为，会拖慢系统响应、降低用户体验、给公司一种系统“勉强能用”的错觉；但对问题的解决没有帮助。<br>        最好的办法是事前拦截，降低这种类型的请求打到系统上的可能。布隆过滤器虽然判别数据存在可能有误判的情况，但判别数据不存在不会误判。可以降低数据库无效的访问。","like_count":129,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507252,"discussion_content":"回答的非常好！看到了缓存穿透的本质，也看清了和击穿、雪崩情况的区别。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604027295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327955,"discussion_content":"熔断、降级、限流 并非本质上是为解决缓存层失效的吧，这3种机制主要还是为了保证系统整体的稳定性而存在，如果缓存穿透的出现会影响到系统的稳定性，我觉得是考虑的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1606026072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1281480,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8d/c8/3ffed92b.jpg","nickname":"徐培","note":"","ucode":"0020C302D02C34","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328067,"discussion_content":"那么这种情况下系统不稳定的根源在哪呢……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606047822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327955,"ip_address":""},"score":328067,"extra":""}]},{"author":{"id":1342429,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7b/dd/f33a0855.jpg","nickname":"机智的小俊俊","note":"","ucode":"16DFBC3A9E60AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373147,"discussion_content":"用罗翔老师的话就是：“允许，但不提倡”","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620631549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1342429,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7b/dd/f33a0855.jpg","nickname":"机智的小俊俊","note":"","ucode":"16DFBC3A9E60AD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":551924,"discussion_content":"哈哈哈，法外狂徒张三。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645175743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":373147,"ip_address":""},"score":551924,"extra":""}]},{"author":{"id":3067096,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/cc/d8/6cdd4b15.jpg","nickname":"一如往常i","note":"","ucode":"C9A5AEA38B3E97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585715,"discussion_content":"这才是正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661770168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622448,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c1/b0/b52d9ade.jpg","nickname":"苏彧","note":"","ucode":"C016B28DF7449C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559300,"discussion_content":"布隆过滤器虽然判别数据存在可能有误判的情况，但判别数据不存在不会误判。这句话没太理解\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648694385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2039219,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/1d/b3/05729e06.jpg","nickname":"阿飞","note":"","ucode":"CD3293EEC33F14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1622448,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c1/b0/b52d9ade.jpg","nickname":"苏彧","note":"","ucode":"C016B28DF7449C","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":583859,"discussion_content":"布隆过滤器判断数据存在时，数据可能存在，但不一定存在，但是判断数据不存在时，数据一定不存在，这是布隆过滤器的特点，所以说会存在误判。“判别数据不存在不会误判”这句就很好应证了布隆过滤器判断数据不存在时的特点","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1660450801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":559300,"ip_address":"广东"},"score":583859,"extra":""},{"author":{"id":3067096,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/cc/d8/6cdd4b15.jpg","nickname":"一如往常i","note":"","ucode":"C9A5AEA38B3E97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2039219,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/1d/b3/05729e06.jpg","nickname":"阿飞","note":"","ucode":"CD3293EEC33F14","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585719,"discussion_content":"牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661771561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":583859,"ip_address":"湖南"},"score":585719,"extra":""}]},{"author":{"id":2309475,"avatar":"https://static001.geekbang.org/account/avatar/00/23/3d/63/b4466457.jpg","nickname":"tardis","note":"","ucode":"F33411288D5E27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390210,"discussion_content":"听大师一席话,胜读十年书","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629714109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269728,"user_name":"walle斌","can_delete":false,"product_type":"c1","uid":1062848,"ip_address":"","ucode":"0DB3243004951F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","comment_is_top":false,"comment_ctime":1608773545,"is_pvip":false,"replies":[{"id":"97923","content":"很赞的内容补充！谢谢。","user_name":"作者回复","comment_id":269728,"uid":"1609687","ip_address":"","utype":1,"ctime":1608994500,"user_name_real":"蒋德钧"}],"discussion_count":4,"race_medal":0,"score":"207767203753","product_id":100056701,"comment_content":"1）、缓存雪崩还有一个场景，是一致性hash环的集群特性导致的。集群中 某个主从节点挂掉了，请求分散到其他集群，但是量极大，把其他集群也都冲垮了。<br>解决办法，如果场景是热的极热 冷的极冷，不建议使用 一致性hash环的集群玩法，直接使用逻辑分组，挂掉的就暂时挂掉，后续人工恢复。  总比打垮整个系统的好<br><br>2）、缓存击穿  不只有不写过期时间，也可以对读数据做预判，例如主动给某些热的数据做 过期时间延期操作。<br><br>3）、布隆过滤器介绍  最后一部分 关于命中这部分缺少了，如果都是1 那么结果返回 存在，但是真正存在吗？ 不一定，可能是由于其他value的hash函数填充的，所以  对于 布隆过滤器 返回存在的，我们要穿透到缓存与db中查询。<br>像一个极端情况，如果 整个bit数组 都是1 或者大部分都是1的场景，这说明什么？ 说明布隆过期已经基本被填满了，也说明超出了布隆过滤器 一开始预期的大小，没错 布隆过滤器是需要事先预知 总容量大小与误判率预期的，否则就会出现 误判率极高 基本等于 没有作用的情况","like_count":48,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512365,"discussion_content":"很赞的内容补充！谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608994500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1227366,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ba/66/7d9f45e7.jpg","nickname":"太空牛仔","note":"","ucode":"0205635C3854AF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546703,"discussion_content":"无限加机器能不能解决问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642396724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2041396,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","nickname":"宙斯","note":"","ucode":"80DF36BAD298AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388768,"discussion_content":"你的补充角度很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628942596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354392,"discussion_content":"哇 被蒋老师翻牌啦~~激动ing~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615285723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258396,"user_name":"单小灰","can_delete":false,"product_type":"c1","uid":1067354,"ip_address":"","ucode":"59C4523FF1B5DB","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/5a/67b5f0b1.jpg","comment_is_top":false,"comment_ctime":1604409014,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"57438983862","product_id":100056701,"comment_content":"老师，我有个疑问，使用布隆过滤器来应对缓存穿透，那当应用刚启动的时候，布隆过滤器全是0，这样不是所有请求都会被判断为数据不存在就都直接返回了？难不成要预加载，把数据库的数据都来过滤器这边设置一遍？","like_count":13,"discussions":[{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361384,"discussion_content":"如果是历史数据。。是的。。所以有不少组件都是基于redis 优化为bloomfilter，而且 如果场景需求是 按照日期来的那就更好了，redis的底层一些都可以抛弃了，例如随机剔除啥的。。只用最关键的单线程架构以及 rdb aof这套来保证，缓存异常重启的数据恢复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616657218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043475,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","nickname":"neohope","note":"","ucode":"C0268F6E7E2B6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348676,"discussion_content":"Redis预加载的时候，布隆过滤器也要初始化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612675565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254839,"user_name":"大饶Raysir","can_delete":false,"product_type":"c1","uid":1589208,"ip_address":"","ucode":"0AFA191420A30D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTITcwicqBDYzXtLibUtian172tPs7rJpqG1Vab4oGjnguA9ziaYjDCILSGaS6qRiakvRdUEhdmSG0BGPKw/132","comment_is_top":false,"comment_ctime":1603197817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53142805369","product_id":100056701,"comment_content":"可以记录ip和穿透访问的次数，频率超过阈值的ip直接拉黑","like_count":12},{"had_liked":false,"id":288639,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1618572773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44568245733","product_id":100056701,"comment_content":"先来自己理解一下这四个问题的表现吧: <br>1，缓存数据与数据库数据不一致，这个就很容易理解了，就是数据出现偏差了，导致的原因是在数据变动时只更新了其中一个<br> 2，缓存雪崩呢？缓存挂了，或者大部分key都失效了，这一下请求都打到数据库，它累了<br> 3，缓存击穿:热点数据的失效，就像针一样同样的请求一下子刺穿了数据库的心脏<br> 4，缓存穿透，key根本就存在无论是缓存还是数据库，但是请求一直来，这就很恶心 为什么要起<br>其实明白这些，一些常用的手段也就呼之欲出了。真不明白起这么多装逼的名字干嘛，不就是因为流量大了，缓存因自身限制而导致的一些现象吗？","like_count":10},{"had_liked":false,"id":266291,"user_name":"cp★钊","can_delete":false,"product_type":"c1","uid":1275690,"ip_address":"","ucode":"6B86D4D538BDF7","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/2a/244d98aa.jpg","comment_is_top":false,"comment_ctime":1607272570,"is_pvip":false,"replies":[{"id":"97994","content":"穿透很多时候还是指较少的数据需要到后端DB查询，如果DB还能撑住，采取的措施可以少些。雪崩就像这个名字一样，影响范围很大了，大量的数据都失效了，都要到后端DB去查询了，会给DB带来很大压力。","user_name":"作者回复","comment_id":266291,"uid":"1609687","ip_address":"","utype":1,"ctime":1609053823,"user_name_real":"蒋德钧"}],"discussion_count":1,"race_medal":0,"score":"18787141754","product_id":100056701,"comment_content":"关于穿透和雪崩，可以理解为数据的缓存命中率的不同程度的表现。雪崩代表此时命中率很低或者为0，已经到了影响DB的程度了。<br>同理，发生了缓存穿透，我觉得要看穿透的严重程度，可以统计命中率，在db还能抗住的情况下，可以不用熔断、降级、和限流，否则影响体验。假设命中率已经到了极限值，那这时候穿透问题上升为雪崩级别了，则可以按需要选择熔断、降级或者限流等策略","like_count":4,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511200,"discussion_content":"穿透很多时候还是指较少的数据需要到后端DB查询，如果DB还能撑住，采取的措施可以少些。雪崩就像这个名字一样，影响范围很大了，大量的数据都失效了，都要到后端DB去查询了，会给DB带来很大压力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609053823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256675,"user_name":"Geek3113","can_delete":false,"product_type":"c1","uid":1983256,"ip_address":"","ucode":"6FF73FECB05923","user_header":"","comment_is_top":false,"comment_ctime":1603704192,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14488606080","product_id":100056701,"comment_content":"布隆过滤器保护的数据只能加不能删，如果用来保护的业务数据会有删除的情况怎么办呢？","like_count":3,"discussions":[{"author":{"id":2552742,"avatar":"https://static001.geekbang.org/account/avatar/00/26/f3/a6/1dd784f6.jpg","nickname":"里河","note":"","ucode":"0A05A5F7A19EFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367529,"discussion_content":"计数布隆过滤器","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618387871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384858,"discussion_content":"删除也没事啊。。布隆过滤器 告诉你 有 是不对的。。。没有才是对的。。\n你想 你添加进去，布隆过滤器告诉你有，没用，你还得去穿透缓存+db。。。\nok   你又删除了。。这个时候布隆过滤器 告诉你没有了，那不就是真么有吗。。\n\n嘿嘿嘿这个理解要逆着来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626774079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371762,"discussion_content":"布谷鸟过滤器\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619960410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280036,"user_name":"寒三石","can_delete":false,"product_type":"c1","uid":1376404,"ip_address":"","ucode":"A25BD34DE8610B","user_header":"https://static001.geekbang.org/account/avatar/00/15/00/94/91bd7001.jpg","comment_is_top":false,"comment_ctime":1614062603,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10203997195","product_id":100056701,"comment_content":"作者提到解决缓存击穿使用手段是不给热点数据设置过期时间，但确定哪些数据是热点数据本身也是个问题，热点数据后续也有可能不再是热点数据，一直占着内存也不好","like_count":2,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531106,"discussion_content":"可以采用定时任务在redis从节点上运营monitor命令，统计出热点key，然后将热点key对应的缓存时间延长","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637231419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3005487,"avatar":"","nickname":"Geek_0727b2","note":"","ucode":"9C097EAC92C27B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573963,"discussion_content":"redis底层不是有基于lru淘汰吗，不热门的最终也会给热门的腾位置","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653747790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253672,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1602825810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10192760402","product_id":100056701,"comment_content":"思考题：服务熔断、服务降级、请求限流，相当于减少了数据库的压力，对于缓存穿透也是可用的。<br><br>雪崩：一批次的key同一时间失效或者redis宕机，导致同一时间有大量请求打到数据库，造成数据库很大的压力。解决方案是设置key过期时间的时候加一个随机值，或者服务熔断、服务降级、请求限流等方案；<br>击穿：访问非常频繁的热点数据失效，解决方案是热点数据不设置过期时间；<br>穿透：数据库里面没有目标数据，解决方案是布隆过滤器或者前端做验证。","like_count":2},{"had_liked":false,"id":253645,"user_name":"wesley","can_delete":false,"product_type":"c1","uid":1439353,"ip_address":"","ucode":"102E5F24FE7EBD","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/79/43fc66d3.jpg","comment_is_top":false,"comment_ctime":1602818654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10192753246","product_id":100056701,"comment_content":"个人理解，缓存穿透即相当于没有缓存，所有的压力都放在了数据库上。<br>服务熔断、服务降级、请求限流都能保证数据库的访问变少，如果是从表面上也能解决数据库的访问问题<br>这三种处理都是在缓存之前的、有损的且不是能自主恢复的(比如雪崩，在限流一段时间后缓存正常了就可以放开)，并且降级和限流都无法避免重复且无效的查询，最后的结果可能还是服务基本不可用<br>所以综合来讲，个人的看法是可以用来应对，但绝对不是很好的方案","like_count":2},{"had_liked":false,"id":315377,"user_name":"camel","can_delete":false,"product_type":"c1","uid":1117530,"ip_address":"","ucode":"D0D698CD74388F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0d/5a/e60f4125.jpg","comment_is_top":false,"comment_ctime":1633869456,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5928836752","product_id":100056701,"comment_content":"缓存雪崩和缓存击穿有点像，都是大量请求的数据缓存里没有，对数据库造成压力。不同的是雪崩的原因是缓存大量失效，而穿透的原因是热点缓存失效。","like_count":1},{"had_liked":false,"id":307971,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1629343881,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5924311177","product_id":100056701,"comment_content":"这几种方案本身就是饮鸩止渴,对于缓存穿透中可能出现的恶意攻击,是可以利用限流和熔断,降级避免应用崩溃,但是也对正常的用户体验下降了,所以还是考虑从客户请求校验这一层次考虑更好","like_count":1,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554673,"discussion_content":"从请求前端进行参数检验，再加上布隆过滤器应该还就差不多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646545484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532636,"discussion_content":"安全机制需要贯穿整个链路,靠单层拦截总有漏网之鱼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637657993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296099,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1622762708,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5917730004","product_id":100056701,"comment_content":"课后题：在讲到缓存雪崩时，我提到，可以采用服务熔断、服务降级、请求限流的方法来应对。请你思考下，这三个机制可以用来应对缓存穿透问题吗？<br><br>我觉得有必要。<br>但是这是一种治标不治本的方案。<br>因为缓存穿透本质上是因为缓存和数据库都没有这个key，导致每次都要去查数据库而且还做了无效的查询，还把性能拖慢了。如果没有人工介入是没有办法恢复的。<br><br>所以要找到是哪个数据没有还被访问，然后缓存和数据库增加这个key，value为空值或缺省值。<br><br>另外还可以用布隆过滤器来判断是否没有。布隆过滤器虽然对数据“存在”有误判，对数据“不存在”是没有误判的，快速返回判断结果，就不用到数据库查询了。<br>还有种方案就是改前端代码了，请求这些没有的数据时做合法性校验。比如数据库中只有key=1-1000的数据，如果前端访问超过1000的key的请求，前端直接拦截这些请求。","like_count":1},{"had_liked":false,"id":270026,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1608881443,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5903848739","product_id":100056701,"comment_content":"我有个缓存击穿的解决方案二，靠谱吗？如下：<br>分布式锁。来个请求后先锁住，然后去db查，查到后再将数据set到redis里。只有当redis里getKey没拿到数据需要请求db的时候才加锁。不影响Redis里有数据的时候处理高并发请求，也能保证db不会被打垮。<br><br>","like_count":1,"discussions":[{"author":{"id":1665902,"avatar":"https://static001.geekbang.org/account/avatar/00/19/6b/6e/22f4d026.jpg","nickname":"小王想学习","note":"","ucode":"D1DF4DE9CF7D38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584400,"discussion_content":"这个方案可行的，保证了强一致性，在缓存重建期间，其它的的线程是阻塞的，牺牲了一点可用性。还有一种逻辑过期时间方案，不加锁，保证了可用性，缓存重建期间返回旧数据（因为是逻辑过期，不是真正的key过期，）是最终一致性的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660805268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268756,"user_name":"Andrew.Fang","can_delete":false,"product_type":"c1","uid":2359194,"ip_address":"","ucode":"1D754BBFC223F4","user_header":"https://static001.geekbang.org/account/avatar/00/23/ff/9a/f7d84a69.jpg","comment_is_top":false,"comment_ctime":1608340611,"is_pvip":false,"replies":[{"id":"97649","content":"Redis的布隆过滤器是通过module进行安装的，可以下载module源码编译，然后通过下面启动方式加载这个功能<br>redis-server --loadmodule .&#47;redisbloom.so<br><br>加载module后，可以用BF.ADD加入数据，BF.EXISTS判断数据是否存在。<br><br>可以参考这个链接<br>https:&#47;&#47;oss.redislabs.com&#47;redisbloom&#47;","user_name":"作者回复","comment_id":268756,"uid":"1609687","ip_address":"","utype":1,"ctime":1608595504,"user_name_real":"蒋德钧"}],"discussion_count":1,"race_medal":0,"score":"5903307907","product_id":100056701,"comment_content":"布隆过滤器怎么用你，Redis有没有命令","like_count":1,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512023,"discussion_content":"Redis的布隆过滤器是通过module进行安装的，可以下载module源码编译，然后通过下面启动方式加载这个功能\nredis-server --loadmodule ./redisbloom.so\n\n加载module后，可以用BF.ADD加入数据，BF.EXISTS判断数据是否存在。\n\n可以参考这个链接\nhttps://oss.redislabs.com/redisbloom/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608595504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358925,"user_name":"孙长平  ","can_delete":false,"product_type":"c1","uid":1216161,"ip_address":"北京","ucode":"412B7B3899AE6B","user_header":"","comment_is_top":false,"comment_ctime":1665032642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665032642","product_id":100056701,"comment_content":"老师前面讲缓存类型时候提到只读缓存，查询缓存是否存在不存在查询数据库，然后数据库存在更新到缓存。如果有数据变更或者删除动作会要求删除数据库和缓存中的数据。在缓存穿透动讲到布隆过滤器，那么只读缓存类型可以使用布隆过滤器吗，如何避免数据在缓存中不存在，在数据库中存在的情况？","like_count":0},{"had_liked":false,"id":357147,"user_name":"人如墨","can_delete":false,"product_type":"c1","uid":1129010,"ip_address":"湖北","ucode":"A6399D10C5C19D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3a/32/d1a3ed4d.jpg","comment_is_top":false,"comment_ctime":1662992010,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662992010","product_id":100056701,"comment_content":"恶意攻击的请求是不是也可以进行黑白名单校验，判断是否让其进行查询","like_count":0},{"had_liked":false,"id":356556,"user_name":"Geek_b14c55","can_delete":false,"product_type":"c1","uid":2027632,"ip_address":"浙江","ucode":"C98EAEC045F13D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MOuCWWOnoQjOr8KjicQ84R7xu6DRcfDv3VAuHseGJ1gxXicKJboA24vOcrcJickTJPwFAU38VuwCGGkGq7f8WkTIg/132","comment_is_top":false,"comment_ctime":1662395974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662395974","product_id":100056701,"comment_content":"请求限流是可以实现解决缓存穿透的，服务降级和熔断也可以解决，但是服务降级和熔断更多指的是服务不可用，缓存穿透在没有打挂掉数据库时，是没有这个问题的。","like_count":0},{"had_liked":false,"id":350516,"user_name":"菜鸟葫芦娃","can_delete":false,"product_type":"c1","uid":1701051,"ip_address":"","ucode":"B402A23D3F1381","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK28icgzo9R0rT9h0Q7iaYkJQtCPa0oriaDfFdaQMUibnnH7BW2CU9yKwDUvou63AmoGGIPgZJDyjMRJA/132","comment_is_top":false,"comment_ctime":1656982163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656982163","product_id":100056701,"comment_content":"随着时间点推移，布隆过滤器会有短暂的浪费空间，哪些空间如何再利用呢？","like_count":0},{"had_liked":false,"id":349011,"user_name":"笑地","can_delete":false,"product_type":"c1","uid":1103478,"ip_address":"","ucode":"2CD6F5BCAAC2C8","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/76/be6fc02e.jpg","comment_is_top":false,"comment_ctime":1655641081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655641081","product_id":100056701,"comment_content":"建议更新数据库和缓存时加个分布式锁，更新前设置缓存N秒后过期，再更新数据库","like_count":0},{"had_liked":false,"id":341938,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1649925582,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649925582","product_id":100056701,"comment_content":"对于缓存穿透的场景，熔断、降级、限流只是兜底手段","like_count":0},{"had_liked":false,"id":337570,"user_name":"Yusan、","can_delete":false,"product_type":"c1","uid":1100167,"ip_address":"","ucode":"108AEA72EA4093","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/87/17053a50.jpg","comment_is_top":false,"comment_ctime":1646898575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646898575","product_id":100056701,"comment_content":"这一节满满的干货","like_count":0},{"had_liked":false,"id":327647,"user_name":"Aprelude","can_delete":false,"product_type":"c1","uid":1658796,"ip_address":"","ucode":"840D3F7A35AEEF","user_header":"https://static001.geekbang.org/account/avatar/00/19/4f/ac/80439ba7.jpg","comment_is_top":false,"comment_ctime":1640220784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640220784","product_id":100056701,"comment_content":"用roraingbitmap也行吧","like_count":0},{"had_liked":false,"id":323151,"user_name":"InfoQ_小汤","can_delete":false,"product_type":"c1","uid":1739070,"ip_address":"","ucode":"E4C30DB7A9B54C","user_header":"https://static001.geekbang.org/account/avatar/00/1a/89/3e/0dd8e96b.jpg","comment_is_top":false,"comment_ctime":1637744581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637744581","product_id":100056701,"comment_content":"有关缓存击穿 针对redis主从(多从)模式会有这种现象，主节点写入某个key 从节点未同步完成就从节点读取这个key也会出现缓存不存在直接访问数据库的情况。","like_count":0},{"had_liked":false,"id":322916,"user_name":"下个目标45k","can_delete":false,"product_type":"c1","uid":1066508,"ip_address":"","ucode":"193BA8C3AA9A61","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","comment_is_top":false,"comment_ctime":1637657872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637657872","product_id":100056701,"comment_content":"缓存雪崩场景还可以采用 共享调用机制防止多个相同的请求打到DB,多个并发请求共享一次请求结果即可.","like_count":0},{"had_liked":false,"id":320356,"user_name":"右耳朵猫咪","can_delete":false,"product_type":"c1","uid":1014984,"ip_address":"","ucode":"3AB186CC780FBB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/c8/8627f5c1.jpg","comment_is_top":false,"comment_ctime":1636274696,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1636274696","product_id":100056701,"comment_content":"请教一下redis的令牌桶算法如何实现？","like_count":0},{"had_liked":false,"id":296840,"user_name":"manatee","can_delete":false,"product_type":"c1","uid":1041112,"ip_address":"","ucode":"708D90E7A265BD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e2/d8/f0562ede.jpg","comment_is_top":false,"comment_ctime":1623198470,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1623198470","product_id":100056701,"comment_content":"请问老师，为什么要用布隆过滤器这种方式呢，直接在redis中存储一个key表识数据库中是否存在不可以吗","like_count":0,"discussions":[{"author":{"id":2793822,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/a1/5e/4c53cb49.jpg","nickname":"helloWorld","note":"","ucode":"E7D28A9F456959","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572718,"discussion_content":"bigkey会影响Redis主从同步，碎片处理，内存淘汰，RDB文件加载等等的性能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652929743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554674,"discussion_content":"如果有上亿个key，你得消耗redis多少内存啊。布隆过滤器可以在允许的误判率下，有效的降低内存空间消耗。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646545696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284672,"avatar":"https://static001.geekbang.org/account/avatar/00/13/9a/40/b746dc09.jpg","nickname":"twogozi","note":"","ucode":"C272B0745EF514","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390109,"discussion_content":"空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629677063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293105,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1621219108,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1621219108","product_id":100056701,"comment_content":"在缓存击穿的解决方法：不给热点数据设置过期时间，怎么知道一个数据是否是很热点的数据呢？","like_count":0,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554675,"discussion_content":"通过monitor命令可以找出热点key","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646545808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291854,"user_name":"何磊","can_delete":false,"product_type":"c1","uid":1047604,"ip_address":"","ucode":"78934C3ED4A342","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/34/c733b116.jpg","comment_is_top":false,"comment_ctime":1620550791,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1620550791","product_id":100056701,"comment_content":"热点数据不设置过期时间并不是一个好方案，因为既然是热点不可能一直是热点。更常规可行的方案是热数据主动加载，保持在内存中访问。一旦确定不热了就不再主动加载。","like_count":0,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554676,"discussion_content":"有一个更好的方案是所有key都要设置过期时间，定期动态统计热点key，动态的延长这些热点key的过期时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646545911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288637,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1618572418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618572418","product_id":100056701,"comment_content":"聊点个人体会:<br>1，做系统设计应该从悲观的视角出发去进行思考，一切都是最坏的打算，最全的准备，这也是针对缓存问题预防的策略<br>2，理解一门技术的原理应该有微观的心里准备，粗枝大叶什么都看不到，这也是学习并发多线程的基础","like_count":0},{"had_liked":false,"id":288636,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1618572198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618572198","product_id":100056701,"comment_content":"穿透归根到底还是数据的问题吧，没必要让应用为数据来埋单。不同的问题有不同的解决方案，这个杀鸡用牛刀一个道理","like_count":0},{"had_liked":false,"id":286296,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1617244233,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1617244233","product_id":100056701,"comment_content":"缓存雪崩的概念比较形象化，容易理解。<br><br>服务降级和请求限流有点类似，但是处理方式不同，服务降级是将非核心业务暂停，而请求限流则不区分业务类型，直接限制进入系统（后端）的请求数。<br><br>缓存击穿和缓存雪崩有点类似，如果从字面上理解，雪崩是大面积的缓存失效（超期）造成的，而击穿可能是针对热点数据（超期或无法处理）。<br><br>缓存穿透的概念我之前没有想的特别清楚，在这里得到了解惑。<br><br>布隆过滤器在这里的解释比较简单，如果想要详细的说明，出门右转《数据结构与算法之美》专栏里面有详细的说明。<br><br>对于课后题，应对缓存穿透问题，服务熔断、服务降级和请求限流都可以使用，能够在一定程度上保证系统的最小可用性，但是并不能有效的解决穿透的问题。<br><br>课代表补充一种缓存穿透的场景，就是用户在新业务模块没有业务数据的情况，不过我觉的这个严格来说应该不算是缓存穿透，可能归类到缓存冷启动更合适。<br><br>其实不光是应对缓存的故障，对于大一些的分布式系统，应对各类故障可能都会考虑请求限流、服务降级和服务熔断策略。","like_count":0},{"had_liked":false,"id":285610,"user_name":"yu","can_delete":false,"product_type":"c1","uid":1083356,"ip_address":"","ucode":"3AFACB060085DD","user_header":"https://static001.geekbang.org/account/avatar/00/10/87/dc/85515477.jpg","comment_is_top":false,"comment_ctime":1616919919,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616919919","product_id":100056701,"comment_content":"服务熔断、服务降级、请求限流永远都是有用的 防止系统跪总比损失用户体验强","like_count":0},{"had_liked":false,"id":278846,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1613384583,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1613384583","product_id":100056701,"comment_content":"缓存雪崩：原因之一可能是redis宕机。<br>请问，都宕机了，代码程序异常了，后续流程如何流转？ <br>程序如何判定redis 是宕机了呢？ <br>","like_count":0,"discussions":[{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370140,"discussion_content":"1.redis 连接异常断开或者连不上。2.redis 请求超时。3.redis 返回错误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619310063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278704,"user_name":"曾泽浩","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1613215826,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1613215826","product_id":100056701,"comment_content":"老师，你好，在缓存穿透的处理方案中，缓存直接返回默认值。这个方案是什么时机要返回默认值呢，如果是发生在缓存穿透时，要怎么是判断系统发生了缓存穿透，老师有什么现成的框架去自动或者配置实现这个方案吗？","like_count":0,"discussions":[{"author":{"id":1896933,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZBe7lmwPf33yS7btnXuwv2bvfC7zfKibcZfPUQKTlbJgZeKY0wX70LUsej8EX14rYcCZ5Gk02YTQ/132","nickname":"aworker","note":"","ucode":"DCF95BC2087D35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358703,"discussion_content":"可以看下阿里的开源框架sentinal","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616032891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276988,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1612225362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612225362","product_id":100056701,"comment_content":"布隆过滤器的方案中，如果由于redis宕机，持久化的数据恢复后丢了1-2秒的，那这段时间内的添加到布隆过滤器的数据岂不是永远也查不到了？是不是后台还要跑一个对账的任务？","like_count":0},{"had_liked":false,"id":270643,"user_name":"InfoQ_52198370e321","can_delete":false,"product_type":"c1","uid":1288383,"ip_address":"","ucode":"B1D1592962D2D0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/FmwWpyD4ym73Kbrhlgl1wXZHPgyDS7DxRlaTibbT8oQyvibnJ1SD6nDxxuFIUqFlElxxIU8FZfiamDGX3YYSYrrZQ/132","comment_is_top":false,"comment_ctime":1609204547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609204547","product_id":100056701,"comment_content":"如果加到了布隆过滤器里面以后，如果此时有新数据进来，怎么去更新过滤器呢？","like_count":0},{"had_liked":false,"id":270085,"user_name":"Geek_e8d55e","can_delete":false,"product_type":"c1","uid":1602239,"ip_address":"","ucode":"5F13626B0E1E45","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyobcyicicCQoldZofsS36xrjA2R2hk2F89pu1hCqwjlRaRG4xKkgCicZibEVdOwpfN5rWjEchrsxicSQ/132","comment_is_top":false,"comment_ctime":1608896265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608896265","product_id":100056701,"comment_content":"前端如何判断有没有发生雪崩，从而进行服务限流等操作呢？","like_count":0},{"had_liked":false,"id":264394,"user_name":"前方的灯有点弱","can_delete":false,"product_type":"c1","uid":2058455,"ip_address":"","ucode":"5CEDBCF3DDC991","user_header":"https://static001.geekbang.org/account/avatar/00/1f/68/d7/29025f1f.jpg","comment_is_top":false,"comment_ctime":1606454978,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1606454978","product_id":100056701,"comment_content":"以前有一次我处理缓存的时候，设置了一个永久的和一个有时间的，如果过期了就去取永久的，然后再去让另外一条线程设置一个时间缓存和永久缓存，永久缓存就像数据库，这样就没办法访问的mysql里面了","like_count":0,"discussions":[{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359534,"discussion_content":"何不直接使用永久的？！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616221711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261733,"user_name":"Reborn 2.0","can_delete":false,"product_type":"c1","uid":1977474,"ip_address":"","ucode":"BA506E7455D91C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","comment_is_top":false,"comment_ctime":1605508358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605508358","product_id":100056701,"comment_content":"思考题:<br>不可以, 雪崩是DB压力大, 但DB有数据, 穿透即使访问DB也没数据, 即使放过这些DB请求也是无用功. ","like_count":0},{"had_liked":false,"id":258900,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1604577935,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604577935","product_id":100056701,"comment_content":"布隆过滤器是个好东西，我们一般设置多大呢？","like_count":0},{"had_liked":false,"id":257406,"user_name":"李","can_delete":false,"product_type":"c1","uid":1213082,"ip_address":"","ucode":"6C9B199BEC52E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/82/9a/cd3fff4d.jpg","comment_is_top":false,"comment_ctime":1603961025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603961025","product_id":100056701,"comment_content":"布隆过滤器真是个好功能","like_count":0},{"had_liked":false,"id":257373,"user_name":"devilyaos","can_delete":false,"product_type":"c1","uid":1064902,"ip_address":"","ucode":"5FE075608F03F7","user_header":"https://static001.geekbang.org/account/avatar/00/10/3f/c6/c2bf55bd.jpg","comment_is_top":false,"comment_ctime":1603949505,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603949505","product_id":100056701,"comment_content":"当发生异常时先启动限流，再判断是否需要升级成降级，开启降级后再判断是否需要升级成熔断，逐步减少调用，这样逐步降低调用是不是平滑一点？","like_count":0},{"had_liked":false,"id":256726,"user_name":"dfuru","can_delete":false,"product_type":"c1","uid":2110772,"ip_address":"","ucode":"0222FADA093D95","user_header":"","comment_is_top":false,"comment_ctime":1603717506,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603717506","product_id":100056701,"comment_content":"1.判断数据不在布隆过滤器中，一定不在数据库中，直接返回。判断在布隆过滤器中，可能误判，不一定在数据库中，若不在数据库中仍然发生缓存穿透，然后缓存空值或缺省值。","like_count":0},{"had_liked":false,"id":254141,"user_name":"Bug? Feature!","can_delete":false,"product_type":"c1","uid":1164531,"ip_address":"","ucode":"F8FA8A0094FBA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","comment_is_top":false,"comment_ctime":1603071149,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1603071149","product_id":100056701,"comment_content":"缓存雪崩，缓存击透，缓存穿透都是平时经常遇到的面试考点！","like_count":0,"discussions":[{"author":{"id":1665922,"avatar":"https://static001.geekbang.org/account/avatar/00/19/6b/82/7143f7d9.jpg","nickname":"学啊学","note":"","ucode":"D7E3DFB1757004","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342745,"discussion_content":"机灵鬼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610803472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253692,"user_name":"sid","can_delete":false,"product_type":"c1","uid":1388092,"ip_address":"","ucode":"3D1F9169A19D29","user_header":"https://static001.geekbang.org/account/avatar/00/15/2e/3c/eae43616.jpg","comment_is_top":false,"comment_ctime":1602833933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602833933","product_id":100056701,"comment_content":"服务熔断、服务降级、请求限流这三个机制不适合来处理缓存穿透的场景。<br>三个机制都是在服务不可用时来减少影响的，缓存穿透的场景下，本质上服务是可用的，如果使用上述三个机制会影响其他正常的请求。","like_count":0},{"had_liked":false,"id":253663,"user_name":"Geek_9a0c9f","can_delete":false,"product_type":"c1","uid":2159835,"ip_address":"","ucode":"2A6078F740881F","user_header":"","comment_is_top":false,"comment_ctime":1602821321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602821321","product_id":100056701,"comment_content":"发生redis宕机可以采用熔断方式，那如果redis服务没有宕机，发生缓存雪崩的时候，后面如何处理？？？？？redis的缓存如何恢复可用？","like_count":0}]}