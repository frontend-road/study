{"id":283062,"title":"09 分析篇 | 如何对内核内存泄漏做些基础的分析？","content":"<p>你好，我是邵亚方。</p><p>如果你是一名应用开发者，那你对应用程序引起的内存泄漏应该不会陌生。但是，你有没有想过，内存泄漏也可能是由操作系统（内核）自身的问题引起的呢？这是很多应用开发者以及运维人员容易忽视的地方，或者是相对陌生的领域。</p><p>然而陌生的领域不代表不会有问题，如果在陌生的领域发生了问题，而你总是习惯于分析应用程序自身，那你可能要浪费很多的分析时间，却依然一无所获。所以，对于应用开发者或者运维人员而言，掌握基本的内核内存泄漏分析方法也是必需的，这样在它发生问题时，你可以有一个初步的判断，而不至于一筹莫展。</p><p>内核内存泄漏往往都会是很严重的问题，这通常意味着要重启服务器来解决了，我们肯定并不希望只能靠重启服务器来解决它，不然那就只能没完没了地重启了。我们希望的应该是，在发生了内存泄漏后，能够判断出来是不是内核引起的问题，以及能够找到引起问题的根因，或者是向更专业的内核开发者求助来找到问题根因，从而彻底解决掉它，以免再次重启服务器。</p><p>那么，我们该如何判断内存泄漏是否是内核导致的呢？这节课我们就来讲一讲内核内存泄漏的基础分析方法。</p><h2>内核内存泄漏是什么？</h2><p>在进行具体的分析之前，我们需要先对内核内存泄漏有个初步的概念，究竟内核内存泄漏是指什么呢？这得从内核空间内存分配的基本方法说起。</p><!-- [[[read_end]]] --><p>我们在<a href=\"https://time.geekbang.org/column/article/280455\">06基础篇</a>里讲过，进程的虚拟地址空间（address space）既包括用户地址空间，也包括内核地址空间。这可以简单地理解为，进程运行在用户态申请的内存，对应的是用户地址空间，进程运行在内核态申请的内存，对应的是内核地址空间，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/41/d9/41909181c0f6aa0958c33df52cd626d9.jpg?wh=3700*2809\" alt=\"\"></p><p>应用程序可以通过malloc()和free()在用户态申请和释放内存，与之对应，可以通过kmalloc()/kfree()以及vmalloc()/vfree()在内核态申请和释放内存。当然，还有其他申请和释放内存的方法，但大致可以分为这两类。</p><p>从最右侧的物理内存中你可以看出这两类内存申请方式的主要区别，kmalloc()内存的物理地址是连续的，而vmalloc()内存的物理地址则是不连续的。这两种不同类型的内存也是可以通过/proc/meminfo来观察的：</p><pre><code>$ cat /proc/meminfo\n...\nSlab:            2400284 kB\nSReclaimable:      47248 kB\nSUnreclaim:      2353036 kB\n...\nVmallocTotal:   34359738367 kB\nVmallocUsed:     1065948 kB\n...\n</code></pre><p>其中vmalloc申请的内存会体现在VmallocUsed这一项中，即已使用的Vmalloc区大小；而kmalloc申请的内存则是体现在Slab这一项中，它又分为两部分，其中SReclaimable是指在内存紧张的时候可以被回收的内存，而SUnreclaim则是不可以被回收只能主动释放的内存。</p><p>内核之所以将kmalloc和vmalloc的信息通过/proc/meminfo给导出来，也是为了在它们引起问题的时候，让我们可以有方法来进行排查。在讲述具体的案例以及排查方法之前，我们先以一个简单的程序来看下内核空间是如何进行内存申请和释放的。</p><pre><code>/* kmem_test */\n#include &lt;linux/init.h&gt;\n#include &lt;linux/vmalloc.h&gt;\n\n#define SIZE (1024 * 1024 * 1024)\n\nchar *kaddr;\n\nchar *kmem_alloc(unsigned long size)\n{\n        char *p;\n        p = vmalloc(size);\n        if (!p)\n                pr_info(&quot;[kmem_test]: vmalloc failed\\n&quot;);\n        return p;\n}\n\nvoid kmem_free(const void *addr)\n{\n        if (addr)\n                vfree(addr);\n}\n\n\nint __init kmem_init(void)\n{\n        pr_info(&quot;[kmem_test]: kernel memory init\\n&quot;);\n        kaddr = kmem_alloc(SIZE);\n        return 0;\n}\n\n\nvoid __exit kmem_exit(void)\n{\n        kmem_free(kaddr);\n        pr_info(&quot;[kmem_test]: kernel memory exit\\n&quot;);\n}\n\nmodule_init(kmem_init)\nmodule_exit(kmem_exit)\n\nMODULE_LICENSE(&quot;GPLv2&quot;);\n</code></pre><p>这是一个典型的内核模块，在这个内核模块中，我们使用vmalloc来分配了1G的内存空间，然后在模块退出的时候使用vfree释放掉它。这在形式上跟应用申请/释放内存其实是一致的，只是申请和释放内存的接口函数不一样而已。</p><p>我们需要使用Makefile来编译这个内核模块：</p><pre><code>obj-m = kmem_test.o\n\nall:\n        make -C /lib/modules/`uname -r`/build M=`pwd`\nclean:\n        rm -f *.o *.ko *.mod.c *.mod *.a modules.order Module.symvers\n</code></pre><p>执行make命令后就会生成一个kmem_test的内核模块，接着执行下面的命令就可以安装该模块了：</p><pre><code>$ insmod kmem_test\n</code></pre><p>用rmmod命令则可以把它卸载掉：</p><pre><code>$ rmmod kmem_test\n</code></pre><p>这个示例程序就是内核空间内存分配的基本方法。你可以在插入/卸载模块前后观察VmallocUsed的变化，以便于你更好地理解这一项的含义。</p><p>那么，在什么情况下会发生内核空间的内存泄漏呢？</p><p>跟用户空间的内存泄漏类似，内核空间的内存泄漏也是指只申请内存而不去释放该内存的情况，比如说，如果我们不在kmem_exit()这个函数中调用kmem_free()，就会产生内存泄漏问题。</p><p>那么，内核空间的内存泄漏与用户空间的内存泄漏有什么不同呢？我们知道，用户空间内存的生命周期与用户进程是一致的，进程退出后这部分内存就会自动释放掉。但是，内核空间内存的生命周期是与内核一致的，却不是跟内核模块一致的，也就是说，在内核模块退出时，不会自动释放掉该内核模块申请的内存，只有在内核重启（即服务器重启）时才会释放掉这部分内存。</p><p>总之，一旦发生内核内存泄漏，你很难有很好的方法来优雅地解决掉它，很多时候唯一的解决方案就是重启服务器，这显然是件很严重的问题。同样地，我也建议你来观察下这个行为，但是你需要做好重启服务器的心理准备。</p><p>kmalloc的用法跟vmalloc略有不同，你可以参考<a href=\"https://www.kernel.org/doc/htmldocs/kernel-api/API-kmalloc.html\">kmalloc API</a>和<a href=\"https://www.kernel.org/doc/htmldocs/kernel-api/API-kfree.html\">kfree API</a>来修改一下上面的测试程序，然后观察下kmalloc内存和/proc/meminfo中那几项的关系，我在这里就不做演示了，留给你作为课后作业。</p><p>内核内存泄漏的问题往往会发生在一些驱动程序中，比如说网卡驱动，SSD卡驱动等，以及我们自己开发的一些驱动，因为这类驱动不像Linux内核那样经历过大规模的功能验证和测试，所以相对容易出现一些隐藏很深的问题。</p><p>我们在生产环境上就遇到过很多起这类第三方驱动引发的内存泄漏问题，排查起来往往也比较费时。作为一个解决过很多这类问题的过来人，我对你的建议是，当你发现内核内存泄漏时，首先需要去质疑的就是你们系统中的第三方驱动程序，以及你们自己开发的驱动程序。</p><p>那么，我们该如何来观察内核内存泄漏呢？</p><h2>如何观察内核内存泄漏？</h2><p>在前面已经讲过，我们可以通过/proc/meminfo来观察内核内存的分配情况，这提供了一个观察内核内存的简便方法：</p><ul>\n<li>如果/proc/meminfo中内核内存（比如VmallocUsed和SUnreclaim）太大，那很有可能发生了内核内存泄漏；</li>\n<li>另外，你也可以周期性地观察VmallocUsed和SUnreclaim的变化，如果它们持续增长而不下降，也可能是发生了内核内存泄漏。</li>\n</ul><p>/proc/meminfo只是提供了系统内存的整体使用情况，如果我们想要看具体是什么模块在使用内存，那该怎么办呢？</p><p>这也可以通过/proc来查看，所以再次强调一遍，当你不清楚该如何去分析时，你可以试着去查看/proc目录下的文件。以上面的程序为例，安装kmem_test这个内核模块后，我们可以通过/proc/vmallocinfo来看到该模块的内存使用情况：</p><pre><code>$ cat /proc/vmallocinfo | grep kmem_test\n0xffffc9008a003000-0xffffc900ca004000 1073745920 kmem_alloc+0x13/0x30 [kmem_test] pages=262144 vmalloc vpages N0=262144\n</code></pre><p>可以看到，在[kmem_test]这个模块里，通过kmem_alloc这个函数申请了262144个pages，即总共1G大小的内存。假设我们怀疑kmem_test这个模块存在问题，我们就可以去看看kmem_alloc这个函数里申请的内存有没有释放的地方。</p><p>上面这个测试程序相对比较简单一些，所以根据/proc/vmallocinfo里面的信息就能够简单地看出来是否有问题。但是，生产环境中运行的一些驱动或者内核模块，在逻辑上会复杂得多，很难一眼就看出来是否存在内存泄漏，这往往需要大量的分析。</p><p>那对于这种复杂场景下的内核内存泄漏问题，基本的分析思路是什么样的呢？</p><h2>复杂场景下内核内存泄漏问题分析思路</h2><p>如果我们想要对内核内存泄漏做些基础的分析，最好借助一些内核内存泄漏分析工具，其中最常用的分析工具就是<a href=\"https://www.kernel.org/doc/html/v4.10/dev-tools/kmemleak.html\">kmemleak</a>。</p><p>kmemleak是内核内存泄漏检查的利器，但是，它的使用也存在一些不便性，因为打开该特性会给性能带来一些损耗，所以生产环境中的内核都会默认关闭该特性。该特性我们一般只用在测试环境中，然后在测试环境中运行需要分析的驱动程序以及其他内核模块。</p><p>与其他内存泄漏检查工具类似，kmemleak也是通过检查内核内存的申请和释放，来判断是否存在申请的内存不再使用也不释放的情况。如果存在，就认为是内核内存泄漏，然后把这些泄漏的信息通过/sys/kernel/debug/kmemleak这个文件导出给用户分析。同样以我们上面的程序为例，检查结果如下：</p><pre><code>unreferenced object 0xffffc9008a003000 (size 1073741824):\n  comm &quot;insmod&quot;, pid 11247, jiffies 4344145825 (age 3719.606s)\n  hex dump (first 32 bytes):\n    38 40 18 ba 80 88 ff ff 00 00 00 00 00 00 00 00  8@..............\n    f0 13 c9 73 80 88 ff ff 18 40 18 ba 80 88 ff ff  ...s.....@......\n  backtrace:\n    [&lt;00000000fbd7cb65&gt;] __vmalloc_node_range+0x22f/0x2a0\n    [&lt;000000008c0afaef&gt;] vmalloc+0x45/0x50\n    [&lt;000000004f3750a2&gt;] 0xffffffffa0937013\n    [&lt;0000000078198a11&gt;] 0xffffffffa093c01a\n    [&lt;000000002041c0ec&gt;] do_one_initcall+0x4a/0x200\n    [&lt;000000008d10d1ed&gt;] do_init_module+0x60/0x220\n    [&lt;000000003c285703&gt;] load_module+0x156c/0x17f0\n    [&lt;00000000c428a5fe&gt;] __do_sys_finit_module+0xbd/0x120\n    [&lt;00000000bc613a5a&gt;] __x64_sys_finit_module+0x1a/0x20\n    [&lt;000000004b0870a2&gt;] do_syscall_64+0x52/0x90\n    [&lt;000000002f458917&gt;] entry_SYSCALL_64_after_hwframe+0x44/0xa9\n</code></pre><p>由于该程序通过vmalloc申请的内存以后再也没有使用，所以被kmemleak标记为了“unreferenced object”，我们需要在使用完该内存空间后就释放它以节省内存。</p><p>如果我们想在生产环境上来观察内核内存泄漏，就无法使用kmemleak了，那还有没有其他的方法呢？</p><p>我们可以使用内核提供的内核内存申请释放的tracepoint，来动态观察内核内存使用情况：</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/8c/4c434f56b5c41f9cc2eb53a2c98f948c.jpg?wh=1977*1133\" alt=\"\"></p><p>当我们使能这些tracepoints后，就可以观察内存的动态申请和释放情况了，只是这个分析过程不如kmemleak那么高效。</p><p>当我们想要观察某些内核结构体的申请和释放时，可能没有对应的tracepiont。这个时候就需要使用kprobe或者systemtap，来针对具体的内核结构体申请释放函数进行追踪了。下面就是我们在生产环境中的一个具体案例。</p><p>业务方反馈说docker里面的可用内存越来越少，不清楚是什么状况，在我们通过/proc下面的文件（/proc/slabinfo）判断出来是dentry消耗内存过多后，写了一个systemtap脚本来观察dentry的申请和释放：</p><pre><code># dalloc_dfree.stp\n# usage : stap -x pid dalloc_dfree.stp\nglobal free = 0;\nglobal alloc = 0;\n\nprobe kernel.function(&quot;d_free&quot;) {\n        if (target() == pid()) {\n                free++;\n        }   \n}\n\nprobe kernel.function(&quot;d_alloc&quot;).return {\n        if (target() == pid()) {\n                alloc++;\n        }   \n}\n\nprobe end {\n        printf(&quot;alloc %d free %d\\n&quot;, alloc, free);\n}\n</code></pre><p>我们使用该工具进行了多次统计，都发现是dentry的申请远大于它的释放：</p><pre><code>alloc 2041 free 1882\nalloc 18137 free 6852\nalloc 22505 free 10834\nalloc 33118 free 20531\n</code></pre><p>于是，我们判断在容器环境中dentry的回收存在问题，最终定位出这是3.10版本内核的一个Bug： 如果docker内部内存使用达到了limit，但是全局可用内存还很多，那就无法去回收docker内部的slab了。当然，这个Bug在<a href=\"https://lwn.net/Articles/628829/\">新版本内核上已经fix了</a>。</p><p>好了，我们这节课就讲到这里。</p><h2>课堂总结</h2><p>这节课我们讲了一种更难分析以及引起危害更大的内存泄漏：内核内存泄漏。我们还讲了针对这种内存泄漏的常用分析方法：</p><ul>\n<li>你可以通过/proc/meminfo里面的信息来看内核内存的使用情况，然后根据这里面的信息来做一些基本的判断：如果内核太大那就值得怀疑；</li>\n<li>kmemleak是内核内存分析的利器，但是一般只在测试环境上使用它，因为它对性能会有比较明显的影响；</li>\n<li>在生产环境中可以使用tracepoint或者kprobe，来追踪特定类型内核内存的申请和释放，从而帮助我们判断是否存在内存泄漏。但这往往需要专业的知识，你在不明白的时候可以去请教一些内核专家；</li>\n<li>内核内存泄漏通常都是第三方驱动或者自己写的一些内核模块导致的，在出现内核内存泄漏时，你可以优先去排查它们。</li>\n</ul><h2>课后作业</h2><p>我们这节课讲的内容对应用开发者会有些难度，对于运维人员而言也是需要掌握的。所以我们的课后作业主要是针对运维人员或者内核初学者的：请写一个systemtap脚本来追踪内核内存的申请和释放。欢迎你在留言区与我讨论。</p><p>感谢你的阅读，如果你认为这节课的内容有收获，也欢迎把它分享给你的朋友，我们下一讲见。</p>","neighbors":{"left":{"article_title":"08 案例篇 | Shmem：进程没有消耗内存，内存哪去了？","id":282129},"right":{"article_title":"10 分析篇 | 内存泄漏时，我们该如何一步步找到根因？","id":283787}},"comments":[{"had_liked":false,"id":247841,"user_name":"stackWarn","can_delete":false,"product_type":"c1","uid":1002005,"ip_address":"","ucode":"89672E452DEBA5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","comment_is_top":false,"comment_ctime":1599886372,"is_pvip":false,"replies":[{"id":"91581","content":"大概看了下，应该是跟module_exit有关，在exit后kprobe就无法追踪到这个模块了，你可以分析下modlue_exit的逻辑。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1600861198,"ip_address":"","comment_id":247841,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10189820964","product_id":100058001,"comment_content":"根据本文写的一篇实验博客，链接 https:&#47;&#47;0xfe.com.cn&#47;post&#47;b6ee23d8.html<br>末尾碰到个问题，不知道有没有老师帮忙解惑！！","like_count":2,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505510,"discussion_content":"大概看了下，应该是跟module_exit有关，在exit后kprobe就无法追踪到这个模块了，你可以分析下modlue_exit的逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600861198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247062,"user_name":"jssfy","can_delete":false,"product_type":"c1","uid":1137238,"ip_address":"","ucode":"F16353CFE607B7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/56/115c6433.jpg","comment_is_top":false,"comment_ctime":1599574990,"is_pvip":false,"replies":[{"id":"91117","content":"这需要看slab alloc和free，不过这些函数会调用的特别频繁。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1599976653,"ip_address":"","comment_id":247062,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10189509582","product_id":100058001,"comment_content":"请问找到dentry的申请和释放函数有什么常规的套路吗? 因为这次是dentry下次可能是inode或者其他cache","like_count":2,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505300,"discussion_content":"这需要看slab alloc和free，不过这些函数会调用的特别频繁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599976653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247302,"user_name":"从远方过来","can_delete":false,"product_type":"c1","uid":1797551,"ip_address":"","ucode":"4791DBC7E05B1D","user_header":"","comment_is_top":false,"comment_ctime":1599653636,"is_pvip":false,"replies":[{"id":"91119","content":"这些tracepiont都在&#47;sys&#47;fs&#47;kernel&#47;debug&#47;tracing&#47;events这个路径，你也可以通过perf来查看。<br>很多情况下不需要看内核源码才能用，主要看你用他来做什么，看内核源码是为了了解内核的细节。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1599976866,"ip_address":"","comment_id":247302,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5894620932","product_id":100058001,"comment_content":"老师，不同版本的内核都提供了那些tracepoint呢？在哪里有记录么？     然后每个tracepoint的使用是需要看内核源码才知道怎么用么？","like_count":1,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505369,"discussion_content":"这些tracepiont都在/sys/fs/kernel/debug/tracing/events这个路径，你也可以通过perf来查看。\n很多情况下不需要看内核源码才能用，主要看你用他来做什么，看内核源码是为了了解内核的细节。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599976866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1235551,"avatar":"https://static001.geekbang.org/account/avatar/00/12/da/5f/3c68103d.jpg","nickname":"郭梓良","note":"","ucode":"50E57E6A723E14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358228,"discussion_content":"需要挂载debugfs，才会有这个目录。mount - debugfs debugfs /sys/kernel/debug","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1615949632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1797551,"avatar":"","nickname":"从远方过来","note":"","ucode":"4791DBC7E05B1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305519,"discussion_content":"没有这个目录😰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599981416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1717529,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/35/19/769a9a88.jpg","nickname":"Haonan","note":"","ucode":"E6C31AC6190C69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305111,"discussion_content":"在Documentation/trace文件夹里会有详细讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599787452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349816,"user_name":"风清扬","can_delete":false,"product_type":"c1","uid":1047043,"ip_address":"","ucode":"651F1390B64953","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/619e3e48.jpg","comment_is_top":false,"comment_ctime":1656345642,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656345642","product_id":100058001,"comment_content":"有没有朋友遇到make报错的情况，这种如何解决呀？<br>make -C &#47;lib&#47;modules&#47;`uname -r`&#47;build M=`pwd`<br>make[1]: Entering directory &#39;&#47;usr&#47;src&#47;linux-headers-5.15.0-39-generic&#39;<br>make[2]: *** No rule to make target &#39;&#47;root&#47;workspace&#47;cpp&#47;kmalloc&#47;kmem_test.o&#39;, needed by &#39;&#47;root&#47;workspace&#47;cpp&#47;kmalloc&#47;kmem_test.mod&#39;.  Stop.<br>make[1]: *** [Makefile:1875: &#47;root&#47;workspace&#47;cpp&#47;kmalloc] Error 2<br>make[1]: Leaving directory &#39;&#47;usr&#47;src&#47;linux-headers-5.15.0-39-generic&#39;<br>make: *** [Makefile:4: all] Error 2<br>root@52coder:~&#47;workspace&#47;cpp&#47;kmalloc#","like_count":0},{"had_liked":false,"id":346135,"user_name":"lJ","can_delete":false,"product_type":"c1","uid":2562558,"ip_address":"","ucode":"CC29D06A16FF93","user_header":"https://static001.geekbang.org/account/avatar/00/27/19/fe/d31344db.jpg","comment_is_top":false,"comment_ctime":1652852914,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652852914","product_id":100058001,"comment_content":"老师，根据代码在自己虚拟机实验了一下，kmem_test安装前后，VmallocUsed始终都是0，只有MemFree、MemAvailable发生了1G左右的变化，其它指标无明显变化。‘’<br><br>[root@rune32bit module]# uname -r<br>4.18.9-1.el7.elrepo.x86_64","like_count":0},{"had_liked":false,"id":334336,"user_name":"MiraClei","can_delete":false,"product_type":"c1","uid":1969284,"ip_address":"","ucode":"EA28F32A8A3B5D","user_header":"https://static001.geekbang.org/account/avatar/00/1e/0c/84/8542f966.jpg","comment_is_top":false,"comment_ctime":1644892560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644892560","product_id":100058001,"comment_content":"docker 内部的 slab无法回收问题，是在内核什么版本修复的。我们使用的CentOS7.6 内核版本:3.10.0-957.21.3.el7.x86_64，存在类似问题，free看到的cache持续增高超过系统50%，docker启动的容器频繁的被系统kill后重启，此cache手动无法释放掉，必须重启服务器才能释放掉此部分内存","like_count":0},{"had_liked":false,"id":334335,"user_name":"MiraClei","can_delete":false,"product_type":"c1","uid":1969284,"ip_address":"","ucode":"EA28F32A8A3B5D","user_header":"https://static001.geekbang.org/account/avatar/00/1e/0c/84/8542f966.jpg","comment_is_top":false,"comment_ctime":1644892381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644892381","product_id":100058001,"comment_content":"请问下docker 内部的 slab无法回收的问题，是在内核什么版本上修复的","like_count":0},{"had_liked":false,"id":311629,"user_name":"A免帅叫哥","can_delete":false,"product_type":"c1","uid":2058258,"ip_address":"","ucode":"76D2522E602AEF","user_header":"https://static001.geekbang.org/account/avatar/00/1f/68/12/031a05c3.jpg","comment_is_top":false,"comment_ctime":1631352803,"is_pvip":false,"replies":[{"id":"112937","content":"多谢指出来","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1631437365,"ip_address":"","comment_id":311629,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631352803","product_id":100058001,"comment_content":"内核代码少了 #include &lt;linux&#47;module.h&gt;","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526685,"discussion_content":"多谢指出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631437365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287410,"user_name":"Ilovek8s","can_delete":false,"product_type":"c1","uid":1542450,"ip_address":"","ucode":"64DF0F7D0CF0B0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/a8PMLmCTCBa40j7JIy3d8LsdbW5hne7lkk9KOGQuiaeVk4cn06KWwlP3ic69BsQLpNFtRTjRdUM2ySDBAv1MOFfA/132","comment_is_top":false,"comment_ctime":1617935101,"is_pvip":false,"replies":[{"id":"104504","content":"可能是系统内存不够用了？","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1618146687,"ip_address":"","comment_id":287410,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1617935101","product_id":100058001,"comment_content":"编译完之后，加载到内核模块，提示kmalloc失败，麻烦老师指点一下","like_count":0,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518299,"discussion_content":"可能是系统内存不够用了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618146687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246902,"user_name":"冬风向左吹","can_delete":false,"product_type":"c1","uid":1066928,"ip_address":"","ucode":"376C45C5134F93","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/b0/a9b77a1e.jpg","comment_is_top":false,"comment_ctime":1599527904,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1599527904","product_id":100058001,"comment_content":"涨见识了","like_count":0,"discussions":[{"author":{"id":1309948,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fc/fc/1e235814.jpg","nickname":"耿长学","note":"","ucode":"C7A262812854D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347873,"discussion_content":"老师，怎么激活kmemleak这个模块，CentOS7.2上过来config-3.10.0-327-e17.x86_64结果是#CONFIG_DEBUG_KMEMLEAK is not set","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612347943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}