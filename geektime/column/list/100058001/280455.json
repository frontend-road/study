{"id":280455,"title":"06  基础篇 | 进程的哪些内存类型容易引起内存泄漏？","content":"<p>你好，我是邵亚方。今天我们进入课程的第二个模块，来聊一下内存泄漏的话题。</p><p>相信你在平时的工作中，应该遇到过下面这些场景：</p><ul>\n<li>伴随着服务器中的后台任务持续地运行，系统中可用内存越来越少；</li>\n<li>应用程序正在运行时忽然被OOM kill掉了；</li>\n<li>进程看起来没有消耗多少内存，但是系统内存就是不够用了；</li>\n<li>……</li>\n</ul><p>类似问题，很可能就是内存泄漏导致的。我们都知道，内存泄漏指的是内存被分配出去后一直没有被释放，导致这部分内存无法被再次使用，甚至更加严重的是，指向这块内存空间的指针都不存在了，进而再也无法访问这块内存空间。</p><p>我们平时遇到的内存泄漏可能是应用程序的内存泄漏，也可能是内核（操作系统）的内存泄漏；而应用程序的内存泄漏可能是堆内存（heap）的泄漏，也可能是内存映射区（Memory Mapping Region）的泄漏。这些不同类型的内存泄漏，它们的表现形式也是不一样的，解决方案也不一样，所以为了更好地处理内存泄漏问题，我们首先就需要去了解这些不同的内存类型。</p><p>这些不同的内存类型都可以理解为是进程地址空间(Address Space)的一部分，那地址空间是怎么工作的呢？</p><h2>进程的地址空间</h2><p>我们用一张图，来表示进程的地址空间。图的左侧是说进程可以通过什么方式来更改进程虚拟地址空间，而中间就是进程虚拟地址空间是如何划分的，右侧则是进程的虚拟地址空间所对应的物理内存或者说物理地址空间。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/c3/32/c321c56a7b719bf14b0b5133d0a66132.jpg?wh=2948*1964\" alt=\"\"></p><p>我们来具体聊一下这个过程。</p><p>应用程序首先会调用内存申请释放相关的函数，比如glibc提供的malloc(3)、 free(3)、calloc(3)等；或者是直接使用系统调用mmap(2)、munmap(2)、 brk(2)、sbrk(2)等。</p><p>如果使用的是库函数，这些库函数其实最终也是对系统调用的封装，所以可以理解为是应用程序动态申请释放内存，最终是要经过mmap(2)、munmap(2)、brk(2)、sbrk(2)等这些系统调用。当然从库函数到系统调用，这其中还涉及到这些库本身进行的一些内存层面的优化，比如说，malloc(3)既可能调用mmap(2)，又可能会调用brk(2)。</p><p>然后这些内存申请和释放相关的系统调用会修改进程的地址空间 (address space)，其中brk(2)和sbrk(2)修改的是heap(堆)，而mmap(2)和munmap(2)修改的是Memory Mapping Region（内存映射区）。</p><p>请注意这些针对的都是虚拟地址，应用程序都是跟虚拟地址打交道，不会直接跟物理地址打交道。而虚拟地址最终都要转换为物理地址，由于Linux都是使用Page（页）来进行管理的，所以这个过程叫Paging（分页）。</p><p>我们用一张表格来简单汇总下这些不同的申请方式所对应的不同内存类型，这张表格也包含了我们在课程上一个模块讲的Page Cache，所以你可以把它理解为是进程申请内存的类型大汇总：</p><p><img src=\"https://static001.geekbang.org/resource/image/85/0f/85e7da0e15587c6a1d31f7e60e1ab00f.jpg?wh=3002*2208\" alt=\"\"></p><p>这里面涉及很多术语，我们对其中重要的部分做些简单介绍，来看看这张表里的哪些部分容易出现内存泄漏。</p><p>进程运行所需要的内存类型有很多种，总的来说，这些内存类型可以从是不是文件映射，以及是不是私有内存这两个不同的维度来做区分，也就是可以划分为上面所列的四类内存。</p><ul>\n<li><strong>私有匿名内存</strong>。进程的堆、栈，以及mmap(MAP_ANON | MAP_PRIVATE)这种方式申请的内存都属于这种类型的内存。其中栈是由操作系统来进行管理的，应用程序无需关注它的申请和释放；堆和私有匿名映射则是由应用程序（程序员）来进行管理的，它们的申请和释放都是由应用程序来负责的，所以它们是容易产生内存泄漏的地方。</li>\n<li><strong>共享匿名内存</strong>。进程通过mmap(MAP_ANON | MAP_SHARED)这种方式来申请的内存，比如说tmpfs和shm。这个类型的内存也是由应用程序来进行管理的，所以也可能会发生内存泄漏。</li>\n<li><strong>私有文件映射</strong>。进程通过mmap(MAP_FILE | MAP_PRIVATE)这种方式来申请的内存，比如进程将共享库（Shared libraries）和可执行文件的代码段（Text Segment）映射到自己的地址空间就是通过这种方式。对于共享库和可执行文件的代码段的映射，这是通过操作系统来进行管理的，应用程序无需关注它们的申请和释放。而应用程序直接通过mmap(MAP_FILE | MAP_PRIVATE)来申请的内存则是需要应用程序自己来进行管理，这也是可能会发生内存泄漏的地方。</li>\n<li><strong>共享文件映射</strong>。进程通过mmap(MAP_FILE | MAP_SHARED)这种方式来申请的内存，我们在上一个模块课程中讲到的File Page Cache就属于这类内存。这部分内存也需要应用程序来申请和释放，所以也存在内存泄漏的可能性。</li>\n</ul><p>了解了进程虚拟地址空间这些不同的内存类型后，我们来继续看下它们对应的物理内存。</p><p>刚刚我们也提到，进程虚拟地址空间是通过Paging（分页）这种方式来映射为物理内存的，进程调用malloc()或者mmap()来申请的内存都是虚拟内存，只有往这些内存中写入数据后（比如通过memset），才会真正地分配物理内存 。</p><p>你可能会有疑问，如果进程只是调用malloc()或者mmap()而不去写这些地址，即不去给它分配物理内存，是不是就不用担心内存泄漏了？</p><p>答案是这依然需要关注内存泄露，因为这可能导致进程虚拟地址空间耗尽，即虚拟地址空间同样存在内存泄露的问题。我们在下节课的案例篇中，也会分析对应的案例 ，这里先不展开描述了。</p><p>接下来，我们继续用一张图片来细化一下分页的过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/68/5e2dacf3890cd9d508d3e0181a8ac868.jpg?wh=3000*1526\" alt=\"\"></p><p>如上图所示，Paging的大致过程是，CPU将要请求的虚拟地址传给MMU（Memory Management Unit，内存管理单元），然后MMU先在高速缓存TLB（Translation Lookaside Buffer，页表缓存）中查找转换关系，如果找到了相应的物理地址则直接访问；如果找不到则在地址转换表（Page Table）里查找计算。最终进程访问的虚拟地址就对应到了实际的物理地址。</p><p>了解了地址空间的相关知识之后，你就能够对进程的地址空间做一个合理的规划，或者说合理的控制了。这样出现问题时，不至于产生太严重的影响，你可以把规划好进程的地址空间理解为是进程内存问题的兜底方案。Linux上最典型的规划进程地址空间的方式就是通过ulimit，你可以通过调配它，来规划进程最大的虚拟地址空间、物理地址空间、栈空间是多少，等等。</p><p>对于进程地址空间相关的知识我们先聊到这里，接下来我们看下如何使用工具来观察进程的地址空间。</p><h2>用数据观察进程的内存</h2><p>学会观察进程地址空间是分析内存泄漏问题的前提，当你怀疑内存有泄漏时，首先需要去观察哪些内存在持续增长，哪些内存特别大，这样才能够判断出内存泄漏大致是出在哪里，然后针对性地去做分析；相反，如果你在没有仔细观察进程地址空间之前，就盲目猜测问题出在哪，处理问题很可能会浪费大量时间，甚至会南辕北辙。</p><p>那么都有哪些观察进程的工具呢？我们常用来观察进程内存的工具，比如说pmap、ps、top等，都可以很好地来观察进程的内存。</p><p>首先我们可以使用top来观察系统所有进程的内存使用概况，打开top后，然后按g再输入3，从而进入内存模式就可以了。在内存模式中，我们可以看到各个进程内存的%MEM、VIRT、RES、CODE、DATA、SHR、nMaj、nDRT，这些信息通过strace来跟踪top进程，你会发现这些信息都是从/proc/[pid]/statm和/proc/[pid]/stat这个文件里面读取的：</p><pre><code>$ strace -p `pidof top`\nopen(&quot;/proc/16348/statm&quot;, O_RDONLY)     = 9\nread(9, &quot;40509 1143 956 24 0 324 0\\n&quot;, 1024) = 26\nclose(9)                                = 0\n...\nopen(&quot;/proc/16366/stat&quot;, O_RDONLY)      = 9\nread(9, &quot;16366 (kworker/u16:1-events_unbo&quot;..., 1024) = 182\nclose(9)\n...\n</code></pre><p>除了nMaj（Major Page Fault， 主缺页中断，指内容不在内存中然后从磁盘中来读取的页数）外，%MEM则是从RES计算而来的，其余的内存信息都是从statm文件里面读取的，如下是top命令中的字段和statm中字段的对应关系：</p><p><img src=\"https://static001.geekbang.org/resource/image/a9/1d/a9615117becc0244a2a23802a9cf5c1d.jpg?wh=3175*1210\" alt=\"\"></p><p>另外如果你观察仔细的话，可能会发现，有些时候所有进程的RES相加起来要比系统总的物理内存大，这是因为RES中有一些内存是被一些进程给共享的。</p><p>在明白了系统中各个进程的内存使用概况后，如果想要继续看某个进程的内存使用细节，你可以使用pmap。如下是pmap来展示sshd进程地址空间里的部分内容：</p><pre><code>$  pmap -x `pidof sshd`\nAddress           Kbytes     RSS   Dirty Mode  Mapping \n000055e798e1d000     768     652       0 r-x-- sshd\n000055e7990dc000      16      16      16 r---- sshd\n000055e7990e0000       4       4       4 rw--- sshd\n000055e7990e1000      40      40      40 rw---   [ anon ]\n...\n00007f189613a000    1800    1624       0 r-x-- libc-2.17.so\n00007f18962fc000    2048       0       0 ----- libc-2.17.so\n00007f18964fc000      16      16      16 r---- libc-2.17.so\n00007f1896500000       8       8       8 rw--- libc-2.17.so\n...\n00007ffd9d30f000     132      40      40 rw---   [ stack ]\n...\n</code></pre><p>每一行表示一种类型的内存（Virtual Memory Area），每一列的含义如下。</p><ul>\n<li><strong>Mapping</strong>，用来表示文件映射中占用内存的文件，比如sshd这个可执行文件，或者堆[heap]，或者栈[stack]，或者其他，等等。</li>\n<li><strong>Mode</strong>，它是该内存的权限，比如，“r-x”是可读可执行，它往往是代码段(Text Segment)；“rw-”是可读可写，这部分往往是数据段(Data Segment)；“r–”是只读，这往往是数据段中的只读部分。</li>\n<li><strong>Address、Kbytes、RSS、Dirty</strong>，Address和Kbytes分别表示起始地址和虚拟内存的大小，RSS（Resident Set Size）则表示虚拟内存中已经分配的物理内存的大小，Dirty则表示内存中数据未同步到磁盘的字节数。</li>\n</ul><p>可以看到，通过pmap我们能够清楚地观察一个进程的整个的地址空间，包括它们分配的物理内存大小，这非常有助于我们对进程的内存使用概况做一个大致的判断。比如说，如果地址空间中[heap]太大，那有可能是堆内存产生了泄漏；再比如说，如果进程地址空间包含太多的vma（可以把maps中的每一行理解为一个vma），那很可能是应用程序调用了很多mmap而没有munmap；再比如持续观察地址空间的变化，如果发现某些项在持续增长，那很可能是那里存在问题。</p><p>pmap同样也是解析的/proc里的文件，具体文件是/proc/[pid]/maps和/proc/[pid]/smaps，其中smaps文件相比maps的内容更详细，可以理解为是对maps的一个扩展。你可以对比/proc/[pid]/maps和pmaps的输出，你会发现二者的内容是一致的。</p><p>除了观察进程自身的内存外，我们还可以观察进程分配的内存和系统指标的关联，我们就以常用的/proc/meminfo为例，来说明我们上面提到的四种内存类型（私有匿名，私有文件，共享匿名，共享文件）是如何体现在系统指标中的。</p><p><img src=\"https://static001.geekbang.org/resource/image/9a/9f/9afa1845b3a308e2ae5b84a8b798f49f.jpg?wh=2855*1917\" alt=\"\"></p><p>如上图所示，凡是私有的内存都会体现在/proc/meminfo中的AnonPages这一项，凡是共享的内存都会体现在Cached这一项，匿名共享的则还会体现在Shmem这一项。</p><pre><code>$ cat /proc/meminfo\n...\nCached:          3799380 kB\n...\nAnonPages:       1060684 kB\n...\nShmem:              8724 kB\n...\n</code></pre><p>同样地，我也建议你动手写一些测试用例来观察下，这样你理解得就会更深刻。</p><p>我们对进程的内存管理相关的基础知识就先讲到这里，在下节课我们来讲一讲内存泄漏的实际案例以及其危害。</p><h2>课堂总结</h2><p>这节课我们讲述进程内存管理相关的一些知识，包括进程的虚拟内存与物理内存，要点如下。</p><ul>\n<li>进程直接读写的都是虚拟地址，虚拟地址最终会通过Paging（分页）来转换为物理内存的地址，Paging这个过程是由内核来完成的。</li>\n<li>进程的内存类型可以从anon（匿名）与file（文件）、private（私有）与shared（共享）这四项来区分为4种不同的类型，进程相关的所有内存都是这几种方式的不同组合。</li>\n<li>查看进程内存时，可以先使用top来看系统中各个进程的内存使用概况，再使用pmap去观察某个进程的内存细节。</li>\n</ul><p>进程的内存管理涉及到非常多的术语，对于常用的一些术语，比如VIRT、RES、SHR等，你还是需要牢记它们的含义的，只有熟练掌握了它们的含义，你在分析内存问题时才会更加地得心应手。比如说，如果RES太高而SHR不高，那可能是堆内存泄漏；如果SHR很高，那可能是tmpfs/shm之类的数据在持续增长，如果VIRT很高而RES很小，那可能是进程不停地在申请内存，但是却没有对这些内存进行任何的读写操作，即虚拟地址空间存在内存泄漏。</p><p>同样地，我希望你自己可以写一些测试用例来观察这些指标的变化。</p><h2>课后作业</h2><p>课后你可以写一些测试程序，分别分配我们这堂课提到的四种不同类型的内存，观察进程地址空间的变化，以及系统内存指标的变化。欢迎你在留言区与我讨论。</p><p>感谢你的阅读，如果你认为这节课的内容有收获，也欢迎把它分享给你的朋友，我们下一讲见。</p>","comments":[{"had_liked":false,"id":245934,"user_name":"Geek_9bf0b0","can_delete":false,"product_type":"c1","uid":2134137,"ip_address":"","ucode":"158F40BE995D2D","user_header":"","comment_is_top":false,"comment_ctime":1599114739,"is_pvip":false,"replies":[{"id":"90428","content":"很赞！你理解的很对，如果是读的话，那读出来的内存其实是跟file cache共享的，只有真正去写他的时候，才会真正分配给进程地址空间private的内存，这个细节我疏于描述了，你在这里能够指出来很赞！另外，看得出来你对内核代码研究的也很深入，加油！<br>","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1599145597,"ip_address":"","comment_id":245934,"utype":1}],"discussion_count":3,"race_medal":0,"score":"74613558771","product_id":100058001,"comment_content":"邵老师，对于私有文件映射的页面是file page还是anon page，是要区分文件本身是否可写入权限的吧。<br>如果该文件是不可写的，那么内核应该会把该页面归为file page。<br>do_read_fault()<br>        do_set_pte(vma, address, fault_page, pte, false, false)<br><br>如果该文件是可写入的，那么内核会将相应文件高速缓存页面的内容复制到新的页面中，并将新页面归为anon page。<br>do_cow_fault()<br>       do_set_pte(vma, address, new_page, pte, true, true)","like_count":18,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505014,"discussion_content":"很赞！你理解的很对，如果是读的话，那读出来的内存其实是跟file cache共享的，只有真正去写他的时候，才会真正分配给进程地址空间private的内存，这个细节我疏于描述了，你在这里能够指出来很赞！另外，看得出来你对内核代码研究的也很深入，加油！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599145597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1929884,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/72/9c/6731b18d.jpg","nickname":"Oops...","note":"","ucode":"E141955EA670AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308985,"discussion_content":"老师，那进程的data段属于文件页面，text段属于匿名页面，这样理解对吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601140323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307786,"discussion_content":"java程序员表示敬佩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600759774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245529,"user_name":"jssfy","can_delete":false,"product_type":"c1","uid":1137238,"ip_address":"","ucode":"F16353CFE607B7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/56/115c6433.jpg","comment_is_top":false,"comment_ctime":1598968705,"is_pvip":false,"replies":[{"id":"90370","content":"私有文件映射会把文件内容给读到进程地址空间，但是由于这个映射是私有的，也就是其他进程不可见，所以它的内容不会回写到文件，所以内核会把它的属性设置为anonpage。你可以写个测试用例来看看是不是这样。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1599058319,"ip_address":"","comment_id":245529,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27368772481","product_id":100058001,"comment_content":"凡是私有的内存都会体现在 &#47;proc&#47;meminfo 中的 AnonPages 这一项：<br>私有的也有文件映射，感觉体现在anonpages里有点想不通","like_count":7,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504909,"discussion_content":"私有文件映射会把文件内容给读到进程地址空间，但是由于这个映射是私有的，也就是其他进程不可见，所以它的内容不会回写到文件，所以内核会把它的属性设置为anonpage。你可以写个测试用例来看看是不是这样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599058319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246386,"user_name":"ray","can_delete":false,"product_type":"c1","uid":1717235,"ip_address":"","ucode":"10962C711CBC11","user_header":"","comment_is_top":false,"comment_ctime":1599304685,"is_pvip":false,"replies":[{"id":"90947","content":"会包含的。RSS是指进程地址空间已映射的物理内存，这个物理内存有可能是Shared方式来映射的，那这块物理内存就是Shared memory。也就是说RSS的本质是物理内存是否映射到了进程的地址空间，而和映射属性无关。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1599798105,"ip_address":"","comment_id":246386,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18779173869","product_id":100058001,"comment_content":"老师您好，<br>请问我们平常看到的RSS（进程实际占用的物理内存）会包含shared memory吗？<br><br>谢谢老师的解答^^","like_count":5,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505126,"discussion_content":"会包含的。RSS是指进程地址空间已映射的物理内存，这个物理内存有可能是Shared方式来映射的，那这块物理内存就是Shared memory。也就是说RSS的本质是物理内存是否映射到了进程的地址空间，而和映射属性无关。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599798105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308133,"user_name":"伟伟","can_delete":false,"product_type":"c1","uid":1450367,"ip_address":"","ucode":"59BE820B03B97F","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/7f/efda2a64.jpg","comment_is_top":false,"comment_ctime":1629425449,"is_pvip":true,"replies":[{"id":"112936","content":"后面的数字代码该函数&#47;命令所属的领域，比如：<br>1 - 用户命令<br>2 - 系统调用<br>3 - 库函数<br>等等<br>可以参考： https:&#47;&#47;www.kernel.org&#47;doc&#47;man-pages&#47;","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1631437333,"ip_address":"","comment_id":308133,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10219360041","product_id":100058001,"comment_content":"老师好，想请问一下c的函数名后面带个小括号，里面有个数字，这个是什么意思呢，比方说malloc(3)，其他内核的书里也经常看到","like_count":2,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525403,"discussion_content":"后面的数字代码该函数/命令所属的领域，比如：\n1 - 用户命令\n2 - 系统调用\n3 - 库函数\n等等\n可以参考： https://www.kernel.org/doc/man-pages/","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631437333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1961445,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/ed/e5/1350cbd7.jpg","nickname":"DP","note":"","ucode":"80C4227555A029","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392540,"discussion_content":"你可以用命令行看一下\n$man man\n1\tExecutable programs or shell commands\t标准Linux命令\n2\tSystem calls\t系统调用（内核）\n3\tLibrary functions\t库函数\n4\tSpecial devices\t设备说明（通常在/dev下可以找到）\n5\tFile formats\t文件格式\n6\tGames\t游戏娱乐等\n7\tMiscellaneous\t杂乱项\n8\tSystem administration commands\t系统管理员命令（通常针对root用户）\n9\tKernel routines\t常规内核文件","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631031157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254686,"user_name":"我能走多远","can_delete":false,"product_type":"c1","uid":1240465,"ip_address":"","ucode":"07DF5D5DADFA3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/91/1d332031.jpg","comment_is_top":false,"comment_ctime":1603168361,"is_pvip":false,"replies":[{"id":"92996","content":"嗯 只能保证2M是物理内存连续的 整个的1G是由很多2M连续物理内存组成。","user_name":"作者回复","user_name_real":"邵亚方","uid":"1981399","ctime":1603289080,"ip_address":"","comment_id":254686,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10193102953","product_id":100058001,"comment_content":"mmap映射了1g的虚拟内存。在使用中，如果大页是2M大小。哪是不是物理内存不是连续的","like_count":2,"discussions":[{"author":{"id":1981399,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/3b/d7/9d942870.jpg","nickname":"邵亚方","note":"","ucode":"CDFABCB81B9782","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507486,"discussion_content":"嗯 只能保证2M是物理内存连续的 整个的1G是由很多2M连续物理内存组成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603289080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276494,"user_name":"Geek_b8749d","can_delete":false,"product_type":"c1","uid":2423086,"ip_address":"","ucode":"C93277F1E329A7","user_header":"","comment_is_top":false,"comment_ctime":1611973348,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5906940644","product_id":100058001,"comment_content":"邵老师，在代码中调用read接口读文件，文件的内容会进入pagecache吧，这部分内存包含在top中的VIRT中吗？可以让read接口读文件时文件内容不进入pagecache吗？","like_count":1,"discussions":[{"author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","nickname":"Richard","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575870,"discussion_content":"根据我的个人理解回答一下：第一个问题会进入pagecache，但不包含在进程的virt中，因为pagecache属于内核空间，不属于进程的用户态地址空间！第二个问题通过direct io可以绕过文件系统缓存，文件内容就不会被读到page cache中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655167199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348819,"user_name":"Bachue Zhou","can_delete":false,"product_type":"c1","uid":1494491,"ip_address":"","ucode":"3175754775CA32","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","comment_is_top":false,"comment_ctime":1655435187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655435187","product_id":100058001,"comment_content":"老师，请教下，00007ffd9d30f000 132 40 40 rw--- [ stack ] 像这种 stack 内存，一定不会是文件映射吧？那这种情况下，为什么 dirty pages 不是 0 呢？Dirty page 对于非文件映射的内存代表什么含义呢？","like_count":0},{"had_liked":false,"id":320441,"user_name":"姑射仙人","can_delete":false,"product_type":"c1","uid":1008517,"ip_address":"","ucode":"3EFC1F3E592165","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/85/1dc41622.jpg","comment_is_top":false,"comment_ctime":1636333794,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1636333794","product_id":100058001,"comment_content":"RES和RSS是怎样的关系？","like_count":0,"discussions":[{"author":{"id":2000271,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKq0bDOugh0VhTeh0Hawia4bOx7aplBTNUJN8BjpiaPicxiasZp3xiaY44X1vD8NbqibyMmpGPsIXLqSSBg/132","nickname":"雷鹏飞","note":"","ucode":"CE32E20A65F8AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556644,"discussion_content":"是一个东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647435303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}