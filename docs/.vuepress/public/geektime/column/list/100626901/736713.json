{"id":736713,"title":"25｜Rust GUI编程：用Slint为Chatbot实现一个界面","content":"<p>你好，我是Mike。今天我们一起来学习如何用Rust进行GUI开发，我们用的GUI库是Slint。</p><p>GUI开发非常有趣，它能让你看到立竿见影的效果。这是为什么很多人学习编程喜欢从GUI开发开始（Web开发也是类似的道理）。而且GUI库还能用来做点小游戏什么的，非常有趣。而这两年，Rust生态中冒出来几个非常不错的GUI库，比如Slint、egui、Makepad等，今天我们就以Slint为例来讲讲。</p><p>学完这节课的内容，你就能使用Rust动手编写GUI程序了。</p><h2>Slint简介</h2><p>Slint是一个轻量级的GUI框架，使用Rust实现，提供了Rust、CPP、JavaScript接口。对，你没看错，你也可以用JavaScript来调用Slint库做GUI开发。Slint的架构简洁优美，你可以在1～2天的时间里掌握它的理念和编程方法。</p><p>Slint的两位创始人之前是QT的核心开发者，因此从Slint上可以看到非常浓厚的QT（主要是QML）风格。QT是目前IT业界最流行的品质最好的开源跨平台GUI库，可以说Slint继承了QT的最佳实践，同时又与编程语言界的最佳实践Rust结合起来，得到了一个相当优美的GUI框架。</p><!-- [[[read_end]]] --><p>Slint可以在Windows、macOS、Linux、浏览器，以及各种嵌入式平台上运行，现在也在做Android和iOS的适配工作。Slint支持多国语言，它是使用gettext这种传统的Linux方式来做的。</p><p>这是Slint的<a href=\"https://slint.dev\">官方地址</a>，你可以在浏览器里面体验它的 <a href=\"https://slintpad.com/\">demos</a>，还有2个比较重要的资料，就是 <a href=\"https://slint.dev/releases/1.3.2/docs/slint/src/language/\">reference</a> 和 <a href=\"https://docs.rs/slint/latest/slint/index.html\">Rust API</a>，你可以点击链接了解一下。</p><p><span class=\"reference\">注：这一讲的代码适用于 Slint v1.3 版本。</span></p><h3>界面语言 slint</h3><p>Slint自己设计了一门界面描述语言 slint，界面描述文件以 .slint 后缀结尾。slint看起来是下面这个样子：</p><pre><code class=\"language-plain\">component MyButton inherits Text {\n    color: black;\n    // ...\n}\nexport component MyApp inherits Window {\n    preferred-width: 200px;\n    preferred-height: 100px;\n    Rectangle {\n        width: 200px;\n        height: 100px;\n        background: green;\n    }\n    MyButton {\n        x:0;y:0;\n        text: \"hello\";\n    }\n    MyButton {\n        y:0;\n        x: 50px;\n        text: \"world\";\n    }\n}\n</code></pre><p>slint 这门“新语言”只是用于界面描述的，并不是真正的编程语言，因此你可以把它当作HTML这种Markup语言来看待。</p><p>界面相关的基础设施在slint里面都有，比如用来布局的 HorizontalLayout、VerticalLayout、GridLayout、对齐、stretch、字体、各种属性设置、各种基本控件等等。</p><h3>Component</h3><p>你的所有界面都应该放在一棵Component组件树里面。比如上面的示例中，MyApp 继承自 Slint 提供的 Window 组件，也叫基础元素 Element，MyButton 继承自Text基础元素。MyApp中可以包含Slint基础元素或自定义的其他组件。这样就形成了一棵界面的组件树。</p><p>export 关键字用来表明这个组件可以被外部 .slint 文件使用，这样就可以用来开发界面库，供其他应用使用。</p><h4>Property</h4><p>属性分为基础预定义属性和自定义属性。</p><pre><code class=\"language-plain\">export component Example inherits Window {\n    width: 42px;\n    height: 42px;\n}\n</code></pre><p>例子里的width和height就是基础属性。</p><pre><code class=\"language-plain\">export component Example {\n    property&lt;int&gt; my-property;\n    property&lt;int&gt; my-second-property: 42;\n}\n</code></pre><p>代码里的 my-property 和 my-second-property 就是自定义属性，用 <code>property&lt;T&gt;</code> 的形式来定义。属性可以用 in、out、in-out、private等修饰符修饰。</p><pre><code class=\"language-plain\">export component Button {\n    in property &lt;string&gt; text;\n    out property &lt;bool&gt; pressed;\n    in-out property &lt;bool&gt; checked;\n    private property &lt;bool&gt; has-mouse;\n}\n</code></pre><p>其中：</p><ul>\n<li>in：表示这个属性只能被这个组件的用户（比如Rust代码）修改，或者以绑定的形式被修改，在.slint文件内不能用赋值语句修改这个属性。</li>\n<li>out：表示这个属性只能被这个组件内部修改，也就是在.slint文件中定义的逻辑去修改，在外部使用的时候，比如Rust语言中，只能读，不能改。</li>\n<li>in-out：内部外部都能改，也都能读。</li>\n<li>private：这个属性只能由本组件在内部访问，不能由这个组件的父组件访问，也不能在Rust中访问。</li>\n</ul><h4>绑定</h4><p>与React等现代Web前端框架类似，Slint中也有绑定概念。绑定给编程带来了很好的体验，比如下面代码：</p><pre><code class=\"language-plain\">import { Button } from \"std-widgets.slint\";\nexport component Example inherits Window {\n    preferred-width: 50px;\n    preferred-height: 50px;\n    Button {\n        property &lt;int&gt; counter: 3;\n        clicked =&gt; { self.counter += 3 }\n        text: self.counter * 2;\n    }\n}\n</code></pre><p>Button的text属性，就随着 counter 属性的变化而自动变化，Slint在内部自动做了重新计算和更新状态的通知，不用我们操心。</p><p>更棒的是还有双向绑定这个东西，看下面的示例：</p><pre><code class=\"language-plain\">export component Example  {\n    in property&lt;brush&gt; rect-color &lt;=&gt; r.background;\n    r:= Rectangle {\n        width: parent.width;\n        height: parent.height;\n        background: blue;\n    }\n}\n</code></pre><p>双向绑定用 <code>&lt;=&gt;</code> 符号，表示这两个属性始终同步。上面的示例里，Example component的rect-color属性和它的子元素 Rectangle r 的background 双向绑定上了，因此它们任何一方变化了，另一方就会自动跟着变化。这里 <code>r := Rectangle</code> 这个语法表示给这个子元素命名为 r，然后这个 r 就可以在这个 component 里的其他地方引用，用来指代这个子元素。</p><p>有了绑定，我们写业务就能节省大量样板代码，而且不容易出错。</p><h4>Callback</h4><p>回调用于这个component内部元素之间，以及和外部Rust代码之间进行交互。看下面代码：</p><pre><code class=\"language-plain\">export component Example inherits Rectangle {\n    callback hello;\n\n    area := TouchArea {\n        clicked =&gt; {\n            root.hello()\n        }\n    }\n}\n</code></pre><p>代码定义了callback hello。TouchArea 子元素有个 clicked 预定义的 callback，点击的时候会触发，触发时执行Example组件中的hello回调，就是我们刚才定义那个callback hello。</p><p>可以看到 hello 回调还没有回调体实现，我们可以使用下面这种形式，在这个组件内部或者在 Rust 侧进行实现。</p><pre><code class=\"language-plain\">ui_handle.on_hello(move || {\n    //\n});\n</code></pre><p>写的时候在Rust侧自动加上 <code>on_</code> 前缀，给这个组件定义一个回调的函数内容。</p><h3>内置Widgets</h3><p>Slint内置了一些控件，它们就是预定义的组件实现。现在控件不算多，还需要继续努力开发。目前就是下面这些。</p><ul>\n<li>AboutSlint</li>\n<li>Button</li>\n<li>CheckBox</li>\n<li>ComboBox</li>\n<li>GridBox</li>\n<li>GroupBox</li>\n<li>HorizontalBox</li>\n<li>LineEdit</li>\n<li>ListView</li>\n<li>ProgressIndication</li>\n<li>ScrollView</li>\n<li>Slider</li>\n<li>SpinBox</li>\n<li>Spinner</li>\n<li>StandardButton</li>\n<li>StandardListView</li>\n<li>StandardTableView</li>\n<li>Switch</li>\n<li>TabWidget</li>\n<li>TextEdit</li>\n<li>VeticalBox</li>\n</ul><p>如果你以前有过GUI开发的经验，通过这些名字应该能知道它们是什么。如果没有，可以看看Slint官方的详细说明。这些控件虽然不算太多，但是基本够用。并且在Slint中开发新控件很简单，你可以看<a href=\"https://slint.dev/releases/1.3.2/docs/slint/src/recipes/recipes#custom-widgets\">自定义控件介绍</a>，参考<a href=\"https://github.com/Surrealism-All/SurrealismUI\">这个链接</a>里的内容为Slint做一个第三方的控件库扩展库。</p><h3>编程范式</h3><p>Slint的编程范式和其他很多GUI框架有些不同，整体显得非常扁平。比如，在Slint中你无法在Rust代码中通过查找拿到某一个element的handle，而是要把element需要交互的属性映射到顶层component的属性上去，通过顶层 App 的 handle 去交互。</p><p>Slint页面描述语言显得相当内聚，在Rust代码里（目前）只能通过顶层 App handle 与页面进行交互，而在页面内部则可以充分展开绑定、更新、callback调用等工作。我们在后面的示例里可以充分感受到。</p><h3>扩展样式</h3><p>一般，Slint编译出来的界面样式是地道的，也就是说，在哪个平台上就是哪个平台的风格，但是也可以手动选择样式。目前支持 fluent、material、cupertino、qt等几种样式。你可以点击<a href=\"https://slint.dev/releases/1.3.2/docs/slint/src/advanced/style\">链接</a>了解更多。</p><p>在了解了Slint的基本概念之后，下面我们开始实操。</p><h3>IDE插件</h3><p>VS Code有Slint的插件，对于编写界面和Rust逻辑代码来说非常方便，一定得用。</p><h2>Chatbot实战</h2><p>我们要把<a href=\"https://time.geekbang.org/column/article/734931\">第 23 讲</a>的chatbot命令行程序做成一个GUI程序，双击就可以运行。下面的示例我在Windows上实现，但是代码是跨平台的，不用做任何改动，你可以在其他系统上做实验，如果有问题可以在评论区留言反馈。</p><h3>创建项目</h3><p>Slint官方提供了一个Rust项目模板，我们直接用那个。</p><p>我们使用 cargo-generate 下载这个模板。如果没有安装这个工具，请执行下面这行命令。</p><pre><code class=\"language-plain\">cargo install cargo-generate\n</code></pre><p>安装后下载模板。</p><pre><code class=\"language-plain\">cargo generate --git https://github.com/slint-ui/slint-rust-template --name my-project\ncd my-project\n</code></pre><p>这里面实现了一个简单的计数器示例。你可以用 <code>cargo run</code> 运行一下，看一下能否弹出来窗口界面。</p><pre><code class=\"language-plain\">cargo run\n</code></pre><p>只要你之前安装好了Rust，运行这个命令会自动下载依赖并编译，最后能顺利弹出GUI App程序。你可以回忆一下，以前为了开发Windows GUI程序，是不是得下载一堆玩意儿，还得自己一个一个安装并配置。所以这里你就能看到，用Rust开发真的是太方便了。</p><h3>依赖库</h3><p>我们打开 Cargo.toml 文件看一下，发现依赖只有下面两个。</p><pre><code class=\"language-plain\">[dependencies]\nslint = \"1.0\"\n\n[build-dependencies]\nslint-build = \"1.0\"\n</code></pre><h3>添加代码</h3><p>我做了一份<a href=\"https://github.com/miketang84/jikeshijian/tree/master/25-slint-chatbot-demo\">样例代码</a>，你可以把代码和对应的模型文件下载下来，然后执行命令。</p><pre><code class=\"language-plain\">cargo run --release\n</code></pre><h3>运行效果</h3><p><img src=\"https://static001.geekbang.org/resource/image/d2/66/d2d37a5cb5c776b0eba5b91d4ffd1166.png?wh=1025x1171\" alt=\"图片\"></p><p>可以看到，这只是一个简单的聊天对话窗口，一个简单的GUI应用。它也是一个单机版的大语言模型聊天机器人，用的LLM是OpenChat 3.5 量子化Q4版本。请一定要按照这个仓库里的指令下载相关模型文件。</p><h3>代码详解</h3><h4>appwindow.slint</h4><pre><code class=\"language-plain\">import { Button, VerticalBox, TextEdit } from \"std-widgets.slint\";\n\nexport component AppWindow inherits Window {\n&nbsp; &nbsp; title: \"OpenChat Bot\";\n&nbsp; &nbsp; width: 500px;\n&nbsp; &nbsp; height: 550px;\n&nbsp; &nbsp; forward-focus: ed2;\n\n&nbsp; &nbsp; in-out property&lt;string&gt; dialog;\n&nbsp; &nbsp; in-out property&lt;string&gt; input-ask;\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; callback send-ask-content(string);\n\n&nbsp; &nbsp; VerticalBox {\n&nbsp; &nbsp; &nbsp; &nbsp; Text {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text: \"Model: openchat_3.5.Q4_K_M.gguf\";\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; ed1 := TextEdit {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; font-size: 15px;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; width: parent.width - 20px;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vertical-stretch: 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; read-only: true;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text: root.dialog;\n&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; ed2 := TextEdit {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; font-size: 15px;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; width: parent.width - 20px;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; height: 100px;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text &lt;=&gt; root.input-ask;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; Button {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text: \"Send\";\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clicked =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; root.send-ask-content(root.input-ask);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ed2.text = \"\";\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}\n</code></pre><p>我来解释一下这段代码。</p><p>代码开头，也就是第1行，从 std-widgets.slint 基础控件库中引入Button、VerticalBox、TextEdit三种控件。然后第3行定义 AppWindow，从Window中继承过来。</p><p>第4～6行，设置窗口相关基本属性。第7行的作用是把窗口打开后的焦点传递到ed2里，往下看，ed2就是我们的聊天语句输入框。</p><p>第9～10行，定义两个应用级别的属性（顶层自定义属性），dialog表示信息窗口的内容，input-ask表示问题窗口的输入内容。第12行定义一个callback，这里只有签名，没有具体实现，具体实现在后面的Rust代码中来填充。第14行使用VerticalBox进行垂直布局。第15～17是文本标签控件，用于显示当前用的什么模型。</p><p>第18～24，用TextEdit控件表示对话消息显示窗口。可以看到，它的text属性被绑定到了上层属性 root.dialog。dialog属性的更新会导致这个TextEdit的text显示内容自动更新。这里这个root表示当前component的顶层，这里也可以用 parent.dialog，表示当前元素的上一层。这里的 vertical-stretch 表示扩展填充，方便布局。这个控件元素用 <code>:=</code> 符号命名为 ed1。</p><p>第25～30行，用TextEdit控件表示聊天输入窗口。它的text属性被绑定到了 <code>root.input-ask</code>。用的双向绑定 <code>&lt;=&gt;</code> 符号。这个意思是，聊天输入窗口的内容变了，<code>root.input-ask</code> 属性自动同步，反过来也是这样。</p><p>第31～37行，定义了一个按钮Button。实现了其clicked回调，当被点击的时候，会调用这个回调。这个回调里面，调用了顶层定义的回调函数 <code>root.send-ask-content(root.input-ask)</code>，同时将聊天输入框中的内容清空。</p><p>只有这么三十几行代码，所以这个界面本身是比较简单的。下面我们来看一下对应的 Rust 文件。</p><h4>main.rs</h4><pre><code class=\"language-plain\">#![allow(unused)]\nuse std::sync::mpsc::channel;\n\nmod token_output_stream;\nmod llmengin;\n\nslint::include_modules!();\n\nfn main() -&gt; Result&lt;(), slint::PlatformError&gt; {\n&nbsp; &nbsp; let ui = AppWindow::new()?;\n\n&nbsp; &nbsp; let ui_handle = ui.as_weak();\n&nbsp; &nbsp; let (sender, receiver) = channel::&lt;String&gt;();\n&nbsp; &nbsp; let sender1 = sender.clone();\n\n&nbsp; &nbsp; let _thread = std::thread::spawn(move || {\n&nbsp; &nbsp; &nbsp; &nbsp; if let Err(_) = llmengin::start_engine(ui_handle, receiver) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // process before exit.\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; });\n\n&nbsp; &nbsp; let ui_handle = ui.as_weak();\n&nbsp; &nbsp; ui.on_send_ask_content(move |content| {\n&nbsp; &nbsp; &nbsp; &nbsp; update_dialog(ui_handle.clone(), content.to_string());\n&nbsp; &nbsp; &nbsp; &nbsp; sender.send(content.to_string()).unwrap();\n&nbsp; &nbsp; });\n\n&nbsp; &nbsp; ui.window().on_close_requested(move || {\n&nbsp; &nbsp; &nbsp; &nbsp; sender1.send(\"_exit_\".to_string()).unwrap();\n&nbsp; &nbsp; &nbsp; &nbsp; slint::CloseRequestResponse::HideWindow\n&nbsp; &nbsp; });\n\n&nbsp; &nbsp; ui.run()\n}\n\nfn update_dialog(ui_handle: slint::Weak&lt;AppWindow&gt;, msg: String) {\n&nbsp; &nbsp; _ = slint::invoke_from_event_loop(move || {\n&nbsp; &nbsp; &nbsp; &nbsp; let ui_handle = ui_handle.unwrap();\n&nbsp; &nbsp; &nbsp; &nbsp; let old_content = ui_handle.get_dialog();\n&nbsp; &nbsp; &nbsp; &nbsp; ui_handle.set_dialog(old_content + &amp;msg + \"\\n\");\n&nbsp; &nbsp; });\n}\n\nfn update_dialog_without_ln(ui_handle: slint::Weak&lt;AppWindow&gt;, msg: String) {\n&nbsp; &nbsp; _ = slint::invoke_from_event_loop(move || {\n&nbsp; &nbsp; &nbsp; &nbsp; let ui_handle = ui_handle.unwrap();\n&nbsp; &nbsp; &nbsp; &nbsp; let old_content = ui_handle.get_dialog();\n&nbsp; &nbsp; &nbsp; &nbsp; ui_handle.set_dialog(old_content + &amp;msg);\n&nbsp; &nbsp; });\n}\n</code></pre><p>第4～5行引入大模型引擎实现模块。第7行用 <code>slint::include_modules!()</code> 将编译后的slint界面资源文件加载进来。</p><p>第10行创建 AppWindow 实例，这个 AppWindow 就是前面 slint 文件中定义的 AppWindow 组件，也就是当前应用。第12行获得 AppWindow 实例的弱引用。弱引用在Rust中是一种智能指针，用来防止产生循环引用。我们这里照做就行了。</p><p>第13～14行创建一个 MPSC 的 channel。这个channel 是Rust 标准库里的，用于在线程间进行通信。</p><p>第16～20行启动一个新的系统线程。我们这个是一个本地大模型推理应用，大模型的推理是非常消耗资源的，我们不应该放在主线程（主循环，同时负责渲染UI）中，而应该放在后台信息中执行。<code>llmengin::start_engine()</code> 就用于启动这个后台任务。可以看到，我们将弱引用 <code>ui_handle</code> 传了进去，用于在后台任务中拿到主线程的句柄，方便更新内容。同时，我们把 receiver 传了进去，这样后台任务就可以接收UI主线程发来的消息了。</p><p>第22～26行的 <code>on_send_ask_content()</code> 用来填充 slint 界面文件中定义的 <code>send-ask-content(string)</code> 回调函数，给这个回调函数填充具体的执行逻辑。这个函数名是按映射规则由slint自动为我们生成的，也就是在前面加了 <code>on_</code> 前缀，并且把 - 号替换成了 _ 号。具体来说执行了两个任务，一是把聊天输入框的内容更新到消息对话窗口中，二是用channel 的 sender 向后台任务发送消息。</p><p>第28～31行用来处理当窗口关闭时的行为，因为我们有后台任务，后台任务与前台main loop任务都是两个loop在无限跑，我们不能对后台任务用 join 方法，因为那样会阻塞主线程循环。在主线程循环退出的时候，也要通知后台任务退出，这样才安全。</p><p>剩下的 <code>update_dialog()</code> 和 <code>update_dialog_without_ln()</code> 就是用来更新消息对话窗口的内容的。<code>slint::invoke_from_event_loop()</code> 可以在任何线程中调用，它保证这个函数中的闭包会在主线程循环中被调用。</p><p>这里其实在它内部用了一个 <strong>channel queue</strong> 来实现。也就是说，后台任务的输出结果，不需要我们手动地传回到主线程中来操作了，只需要调用这个函数，就可以将界面上对应的内容更新。更新UI的逻辑，实际的执行还是在主线程中做的。<code>ui_handle.get_dialog()</code> 和 <code>ui_handle.set_dialog()</code> 是 slint 自动帮我们生成的，就是在顶层属性 dialog 上自动生成了 getter 和 setter。</p><h4>llmengin.rs</h4><p>llmengin.rs 代码行数比较多，你可以打开<a href=\"https://github.com/miketang84/jikeshijian/blob/master/25-slint-chatbot-demo/src/llmengin.rs\">链接</a>查看。代码大体上和<a href=\"https://time.geekbang.org/column/article/734931\">第 23 讲</a>是一样的，不过有几处更改。</p><pre><code class=\"language-plain\">// 这几行代码片段从llmengin.rs文件中的第99行开始\nsuper::update_dialog_without_ln(ui_handle.clone(), \"&gt; \".to_string());\n\nlet ask = receiver.recv().unwrap();\nif ask == \"_exit_\" {\n&nbsp; &nbsp; return Err(anyhow::anyhow!(\"exit\".to_string()));\n}\nlet prompt_str = format!(\"User:{ask}&lt;|end_of_turn|&gt;Assistant:\");\n</code></pre><p><a href=\"https://github.com/miketang84/jikeshijian/blob/master/25-slint-chatbot-demo/src/llmengin.rs#L101\">第101行</a>使用了 <code>let ask = receiver.recv().unwrap();</code> 来从channel中接收信息，也就是从主线程中接收聊天输入消息。第102～104行是用来处理退出后台线程的指令。在这里你可以看到 <code>anyhow!</code> 的用法。</p><p>其他的就是把 <code>print!()</code> 代码全部换成了 <code>super::update_dialog_*()</code> 相关代码，用来把输出结果更新到界面上去。</p><p>整体来说，还是非常简单的。</p><h2>小结</h2><p>这节课我们通过这短短几十行代码，就使用Slint框架，用Rust做了一个GUI应用。而且整个过程中，我们甚至不需要手动下载额外的依赖安装包，一个命令 <code>cargo run</code> 就搞定了。这就是Rust相比于C++甚至Python更方便的地方。</p><p>在这个示例里，我们对<a href=\"https://time.geekbang.org/column/article/734931\">第 23 讲</a>的chatbot代码做了一些改造，主要的变化在输入和输出上面。改的也不多，只有几行。</p><p>后台任务是一个重要概念，因为GUI界面需要有一个系统线程主循环来负责更新，耗时比较多的任务不应该放在这个线程里运行，不然会让界面显得很卡。<strong>我们应该使用 <code>std::thread::spawn</code> 创建一个新的系统级线程来运行</strong>。</p><p>通过这个示例，我们了解了Slint GUI框架的基本概念、编程范式。Slint确实是一个非常简单明了的框架。在熟悉它的规则之后，用它来开发GUI程序是非常快速便捷的。更可喜的是，用Slint编程的程序可以在各大主流平台上运行，还能在网页上运行，快速分发部署，非常方便。</p><p>Slint的设计风格延续了Qt（QML）的风格，可以说是业界的最佳实践。使用 <strong>Rust + Slint</strong>，我们能非常快速地实现我们的想法。还等什么，用Slint做一些有趣的东西吧！</p><h2>思考题</h2><p>这节课的示例非常原型化，代码还有很多可以改进的地方，请你思考一下并指出一两处。欢迎你把你的想法分享到评论区，也欢迎你把这节课的内容分享给需要的朋友，邀他一起学习Rust，我们下节课再见！</p>","comments":[{"had_liked":false,"id":385710,"user_name":"尤达","can_delete":false,"product_type":"c1","uid":1025516,"ip_address":"上海","ucode":"54C880010B5D0F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/ec/5508ec31.jpg","comment_is_top":false,"comment_ctime":1703151011,"is_pvip":false,"replies":[{"id":140587,"content":"你装的什么环境？我在linux下和win msvc 上都没有装 Qt，能跑。当然装了Qt，就会以Qt为backend。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703232525,"ip_address":"重庆","comment_id":385710,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"slint依赖qt吗？cargo run报错：\n= note: LINK : fatal error LNK1181: 无法打开输入文件“Qt5Cored.lib”\n","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634337,"discussion_content":"你装的什么环境？我在linux下和win msvc 上都没有装 Qt，能跑。当然装了Qt，就会以Qt为backend。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703232525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1979955,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/36/33/3411df0d.jpg","nickname":"seven9t","note":"","ucode":"B7CA7D62C56938","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635954,"discussion_content":"Mac M1: error: linking with `cc` failed: exit status: 1 ... ld: framework not found QtCore","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705396666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389268,"user_name":"beshall","can_delete":false,"product_type":"c1","uid":1901674,"ip_address":"四川","ucode":"BED7E04836F3F8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/04/6a/6aa6c0ea.jpg","comment_is_top":false,"comment_ctime":1711988651,"is_pvip":false,"replies":[{"id":141739,"content":"https:&#47;&#47;github.com&#47;slint-ui&#47;slint&#47;issues&#47;1190  根据这个可解。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1713027814,"ip_address":"加拿大","comment_id":389268,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"老师，问个小问题，slint我编出来的程序打开有控制台窗口，这个怎么去除？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641820,"discussion_content":"https://github.com/slint-ui/slint/issues/1190  根据这个可解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713027815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"加拿大","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386056,"user_name":"哄哄","can_delete":false,"product_type":"c1","uid":3779530,"ip_address":"北京","ucode":"F75FB23BEDC60A","user_header":"https://static001.geekbang.org/account/avatar/00/39/ab/ca/32d6c05d.jpg","comment_is_top":false,"comment_ctime":1703937806,"is_pvip":false,"replies":[{"id":140711,"content":"gui的话，msvc是windows平台原生api，gnu可能得安装gtk，qt之类的。推荐使用 msvc 安装","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1704027662,"ip_address":"重庆","comment_id":386056,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"老师，代码用x86_64-pc-windows-gnu编译无法在Windows上运行，用msvc可以","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634830,"discussion_content":"gui的话，msvc是windows平台原生api，gnu可能得安装gtk，qt之类的。推荐使用 msvc 安装","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704027663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385735,"user_name":"My dream","can_delete":false,"product_type":"c1","uid":1077733,"ip_address":"四川","ucode":"2FEFB344230C17","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/e5/bcdc382a.jpg","comment_is_top":false,"comment_ctime":1703199614,"is_pvip":false,"replies":[{"id":140586,"content":"代码已经升级到 1.3.2。其实就升级版本号就行了，代码是可用的。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703232482,"ip_address":"重庆","comment_id":385735,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"老师，你可以以最新版1.3.2来讲吗？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634336,"discussion_content":"代码已经升级到 1.3.2。其实就升级版本号就行了，代码是可用的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703232482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385683,"user_name":"十八哥","can_delete":false,"product_type":"c1","uid":1027167,"ip_address":"天津","ucode":"C0130252F97814","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/5f/894761f8.jpg","comment_is_top":false,"comment_ctime":1703084450,"is_pvip":false,"replies":[{"id":140556,"content":"是的，在快速发展中。迭代很快的。slint目前功能还不够多。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703122521,"ip_address":"重庆","comment_id":385683,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"Slint好像实现多窗口还是比较麻烦啊","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634231,"discussion_content":"是的，在快速发展中。迭代很快的。slint目前功能还不够多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703122522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385669,"user_name":"刘丹","can_delete":false,"product_type":"c1","uid":1081922,"ip_address":"广东","ucode":"66594D1C957E15","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/42/8b04d489.jpg","comment_is_top":false,"comment_ctime":1703072318,"is_pvip":false,"replies":[{"id":140554,"content":"目前社区比较好的原生的有：egui，makepad 等。基于web的有 iced, tauri 等。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703122469,"ip_address":"重庆","comment_id":385669,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"请问老是，Rust 的 GUI 框架除了 Slint，还有其它推荐吗？","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634229,"discussion_content":"目前社区比较好的原生的有：egui，makepad 等。基于web的有 iced, tauri 等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703122469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385643,"user_name":"不忘初心","can_delete":false,"product_type":"c1","uid":3737491,"ip_address":"四川","ucode":"8262D42405F4E2","user_header":"https://static001.geekbang.org/account/avatar/00/39/07/93/710c7ee2.jpg","comment_is_top":false,"comment_ctime":1703036006,"is_pvip":false,"replies":[{"id":140550,"content":"商用需要付费，价格套餐在这里：https:&#47;&#47;slint.dev&#47;pricing\n另外，有忠诚计划，可以免费申请：https:&#47;&#47;slint.dev&#47;community#royalty-free-license","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703122307,"ip_address":"重庆","comment_id":385643,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"商用slint需要官方授权吗? 有无法律风险?","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634225,"discussion_content":"商用需要付费，价格套餐在这里：https://slint.dev/pricing\n另外，有忠诚计划，可以免费申请：https://slint.dev/community#royalty-free-license","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703122307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385639,"user_name":"tianyu0901","can_delete":false,"product_type":"c1","uid":1393132,"ip_address":"上海","ucode":"31FFE97C4025AF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epvZCxlwoJpxVgG4zCsCpsmqfqxHic82ukC3LOloI5OG7IgVEmNos7gnSYnN9LCjxRCicQxyjVhlx6w/132","comment_is_top":false,"comment_ctime":1703033562,"is_pvip":false,"replies":[{"id":140549,"content":"Slint基本学的Qt路线，分为社区免费和商业收费。价格套餐在这里：https:&#47;&#47;slint.dev&#47;pricing\n另外，有忠诚计划，可以免费申请：https:&#47;&#47;slint.dev&#47;community#royalty-free-license","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703122229,"ip_address":"重庆","comment_id":385639,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"想了解下Slint许可证问题，什么情况下商用要付费？谢谢老师！","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634224,"discussion_content":"Slint基本学的Qt路线，分为社区免费和商业收费。价格套餐在这里：https://slint.dev/pricing\n另外，有忠诚计划，可以免费申请：https://slint.dev/community#royalty-free-license","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703122230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}