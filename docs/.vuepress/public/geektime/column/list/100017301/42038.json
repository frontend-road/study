{"id":42038,"title":"13 | 线性排序：如何根据年龄给100万用户数据排序？","content":"<p>上两节中，我带你着重分析了几种常用排序算法的原理、时间复杂度、空间复杂度、稳定性等。今天，我会讲三种时间复杂度是O(n)的排序算法：桶排序、计数排序、基数排序。因为这些排序算法的时间复杂度是线性的，所以我们把这类排序算法叫作<strong>线性排序</strong>（Linear sort）。之所以能做到线性的时间复杂度，主要原因是，这三个算法是非基于比较的排序算法，都不涉及元素之间的比较操作。</p><p>这几种排序算法理解起来都不难，时间、空间复杂度分析起来也很简单，但是对要排序的数据要求很苛刻，所以我们<strong>今天的学习重点是掌握这些排序算法的适用场景</strong>。</p><p>按照惯例，我先给你出一道思考题：<strong><span class=\"orange\">如何根据年龄给100万用户排序？</span></strong> 你可能会说，我用上一节课讲的归并、快排就可以搞定啊！是的，它们也可以完成功能，但是时间复杂度最低也是O(nlogn)。有没有更快的排序方法呢？让我们一起进入今天的内容！</p><h2>桶排序（Bucket sort）</h2><p>首先，我们来看桶排序。桶排序，顾名思义，会用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了。</p><p><img src=\"https://static001.geekbang.org/resource/image/98/ae/987564607b864255f81686829503abae.jpg?wh=1142*705\" alt=\"\"></p><p>桶排序的时间复杂度为什么是O(n)呢？我们一块儿来分析一下。</p><!-- [[[read_end]]] --><p>如果要排序的数据有n个，我们把它们均匀地划分到m个桶内，每个桶里就有k=n/m个元素。每个桶内部使用快速排序，时间复杂度为O(k * logk)。m个桶排序的时间复杂度就是O(m * k * logk)，因为k=n/m，所以整个桶排序的时间复杂度就是O(n*log(n/m))。当桶的个数m接近数据个数n时，log(n/m)就是一个非常小的常量，这个时候桶排序的时间复杂度接近O(n)。</p><p><strong>桶排序看起来很优秀，那它是不是可以替代我们之前讲的排序算法呢？</strong></p><p>答案当然是否定的。为了让你轻松理解桶排序的核心思想，我刚才做了很多假设。实际上，桶排序对要排序数据的要求是非常苛刻的。</p><p>首先，要排序的数据需要很容易就能划分成m个桶，并且，桶与桶之间有着天然的大小顺序。这样每个桶内的数据都排序完之后，桶与桶之间的数据不需要再进行排序。</p><p>其次，数据在各个桶之间的分布是比较均匀的。如果数据经过桶的划分之后，有些桶里的数据非常多，有些非常少，很不平均，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到一个桶里，那就退化为O(nlogn)的排序算法了。</p><p><strong>桶排序比较适合用在外部排序中</strong>。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p><p>比如说我们有10GB的订单数据，我们希望按订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百MB，没办法一次性把10GB的数据都加载到内存中。这个时候该怎么办呢？</p><p>现在我来讲一下，如何借助桶排序的处理思想来解决这个问题。</p><p>我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后我们得到，订单金额最小是1元，最大是10万元。我们将所有订单根据金额划分到100个桶里，第一个桶我们存储金额在1元到1000元之内的订单，第二桶存储金额在1001元到2000元之内的订单，以此类推。每一个桶对应一个文件，并且按照金额范围的大小顺序编号命名（00，01，02...99）。</p><p>理想的情况下，如果订单金额在1到10万之间均匀分布，那订单会被均匀划分到100个文件中，每个小文件中存储大约100MB的订单数据，我们就可以将这100个小文件依次放到内存中，用快排来排序。等所有文件都排好序之后，我们只需要按照文件编号，从小到大依次读取每个小文件中的订单数据，并将其写入到一个文件中，那这个文件中存储的就是按照金额从小到大排序的订单数据了。</p><p>不过，你可能也发现了，订单按照金额在1元到10万元之间并不一定是均匀分布的 ，所以10GB订单数据是无法均匀地被划分到100个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会很大，没法一次性读入内存。这又该怎么办呢？</p><p>针对这些划分之后还是比较大的文件，我们可以继续划分，比如，订单金额在1元到1000元之间的比较多，我们就将这个区间继续划分为10个小区间，1元到100元，101元到200元，201元到300元....901元到1000元。如果划分之后，101元到200元之间的订单还是太多，无法一次性读入内存，那就继续再划分，直到所有的文件都能读入内存为止。</p><h2>计数排序（Counting sort）</h2><p>我个人觉得，<strong>计数排序其实是桶排序的一种特殊情况</strong>。当要排序的n个数据，所处的范围并不大的时候，比如最大值是k，我们就可以把数据划分成k个桶。每个桶内的数据值都是相同的，省掉了桶内排序的时间。</p><p>我们都经历过高考，高考查分数系统你还记得吗？我们查分数的时候，系统会显示我们的成绩以及所在省的排名。如果你所在的省有50万考生，如何通过成绩快速排序得出名次呢？</p><p>考生的满分是900分，最小是0分，这个数据的范围很小，所以我们可以分成901个桶，对应分数从0分到900分。根据考生的成绩，我们将这50万考生划分到这901个桶里。桶内的数据都是分数相同的考生，所以并不需要再进行排序。我们只需要依次扫描每个桶，将桶内的考生依次输出到一个数组中，就实现了50万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是O(n)。</p><p>计数排序的算法思想就是这么简单，跟桶排序非常类似，只是桶的大小粒度不一样。<strong>不过，为什么这个排序算法叫“计数”排序呢？“计数”的含义来自哪里呢？</strong></p><p>想弄明白这个问题，我们就要来看计数排序算法的实现方法。我还拿考生那个例子来解释。为了方便说明，我对数据规模做了简化。假设只有8个考生，分数在0到5分之间。这8个考生的成绩我们放在一个数组A[8]中，它们分别是：2，5，3，0，2，3，0，3。</p><p>考生的成绩从0到5分，我们使用大小为6的数组C[6]表示桶，其中下标对应分数。不过，C[6]内存储的并不是考生，而是对应的考生个数。像我刚刚举的那个例子，我们只需要遍历一遍考生分数，就可以得到C[6]的值。</p><p><img src=\"https://static001.geekbang.org/resource/image/ad/c9/adc75672ef33fa54b023a040834fcbc9.jpg?wh=1142*289\" alt=\"\"></p><p>从图中可以看出，分数为3分的考生有3个，小于3分的考生有4个，所以，成绩为3分的考生在排序之后的有序数组R[8]中，会保存下标4，5，6的位置。</p><p><img src=\"https://static001.geekbang.org/resource/image/36/29/361f4d781d2a2d144dcbbbb0b9e6db29.jpg?wh=1142*412\" alt=\"\"></p><p>那我们如何快速计算出，每个分数的考生在有序数组中对应的存储位置呢？这个处理方法非常巧妙，很不容易想到。</p><p>思路是这样的：我们对C[6]数组顺序求和，C[6]存储的数据就变成了下面这样子。C[k]里存储小于等于分数k的考生个数。</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/1f/dd6c62b12b0dc1b3a294af0fa1ce371f.jpg?wh=1142*244\" alt=\"\"></p><p>有了前面的数据准备之后，现在我就要讲计数排序中最复杂、最难理解的一部分了，请集中精力跟着我的思路！</p><p>我们从后到前依次扫描数组A。比如，当扫描到3时，我们可以从数组C中取出下标为3的值7，也就是说，到目前为止，包括自己在内，分数小于等于3的考生有7个，也就是说3是数组R中的第7个元素（也就是数组R中下标为6的位置）。当3放入到数组R中后，小于等于3的元素就只剩下了6个了，所以相应的C[3]要减1，变成6。</p><p>以此类推，当我们扫描到第2个分数为3的考生的时候，就会把它放入数组R中的第6个元素的位置（也就是下标为5的位置）。当我们扫描完整个数组A后，数组R内的数据就是按照分数从小到大有序排列的了。</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/84/1d730cb17249f8e92ef5cab53ae65784.jpg?wh=1142*1522\" alt=\"\"></p><p>上面的过程有点复杂，我写成了代码，你可以对照着看下。</p><pre><code>// 计数排序，a是数组，n是数组大小。假设数组中存储的都是非负整数。\npublic void countingSort(int[] a, int n) {\n  if (n &lt;= 1) return;\n\n  // 查找数组中数据的范围\n  int max = a[0];\n  for (int i = 1; i &lt; n; ++i) {\n    if (max &lt; a[i]) {\n      max = a[i];\n    }\n  }\n\n  int[] c = new int[max + 1]; // 申请一个计数数组c，下标大小[0,max]\n  for (int i = 0; i &lt;= max; ++i) {\n    c[i] = 0;\n  }\n\n  // 计算每个元素的个数，放入c中\n  for (int i = 0; i &lt; n; ++i) {\n    c[a[i]]++;\n  }\n\n  // 依次累加\n  for (int i = 1; i &lt;= max; ++i) {\n    c[i] = c[i-1] + c[i];\n  }\n\n  // 临时数组r，存储排序之后的结果\n  int[] r = new int[n];\n  // 计算排序的关键步骤，有点难理解\n  for (int i = n - 1; i &gt;= 0; --i) {\n    int index = c[a[i]]-1;\n    r[index] = a[i];\n    c[a[i]]--;\n  }\n\n  // 将结果拷贝给a数组\n  for (int i = 0; i &lt; n; ++i) {\n    a[i] = r[i];\n  }\n}\n</code></pre><p>这种利用另外一个数组来计数的实现方式是不是很巧妙呢？这也是为什么这种排序算法叫计数排序的原因。不过，你千万不要死记硬背上面的排序过程，重要的是理解和会用。</p><p>我总结一下，<strong>计数排序只能用在数据范围不大的场景<strong><strong>中</strong></strong>，如果数据范围k比要排序的数据n大很多，就<strong><strong>不</strong></strong>适合用<strong><strong>计数</strong></strong>排序了。而且，<strong><strong>计数</strong></strong>排序只能<strong><strong>给</strong></strong>非负整数<strong><strong>排序</strong></strong>，如果要排序的数据是其他类型的，要<strong><strong>将</strong></strong>其在不改变相对大小的情况下，转化为非负整数。</strong></p><p>比如，还是拿考生这个例子。如果考生成绩精确到小数后一位，我们就需要将所有的分数都先乘以10，转化成整数，然后再放到9010个桶内。再比如，如果要排序的数据中有负数，数据的范围是[-1000, 1000]，那我们就需要先对每个数据都加1000，转化成非负整数。</p><h2>基数排序（Radix sort）</h2><p>我们再来看这样一个排序问题。假设我们有10万个手机号码，希望将这10万个手机号码从小到大排序，你有什么比较快速的排序方法呢？</p><p>我们之前讲的快排，时间复杂度可以做到O(nlogn)，还有更高效的排序算法吗？桶排序、计数排序能派上用场吗？手机号码有11位，范围太大，显然不适合用这两种排序算法。针对这个排序问题，有没有时间复杂度是O(n)的算法呢？现在我就来介绍一种新的排序算法，基数排序。</p><p>刚刚这个问题里有这样的规律：假设要比较两个手机号码a，b的大小，如果在前面几位中，a手机号码已经比b手机号码大了，那后面的几位就不用看了。</p><p>借助稳定排序算法，这里有一个巧妙的实现思路。还记得我们第11节中，在阐述排序算法的稳定性的时候举的订单的例子吗？我们这里也可以借助相同的处理思路，先按照最后一位来排序手机号码，然后，再按照倒数第二位重新排序，以此类推，最后按照第一位重新排序。经过11次排序之后，手机号码就都有序了。</p><p>手机号码稍微有点长，画图比较不容易看清楚，我用字符串排序的例子，画了一张基数排序的过程分解图，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/df/0c/df0cdbb73bd19a2d69a52c54d8b9fc0c.jpg?wh=1142*511\" alt=\"\"></p><p>注意，这里按照每位来排序的排序算法要是稳定的，否则这个实现思路就是不正确的。因为如果是非稳定排序算法，那最后一次排序只会考虑最高位的大小顺序，完全不管其他位的大小关系，那么低位的排序就完全没有意义了。</p><p>根据每一位来排序，我们可以用刚讲过的桶排序或者计数排序，它们的时间复杂度可以做到O(n)。如果要排序的数据有k位，那我们就需要k次桶排序或者计数排序，总的时间复杂度是O(k*n)。当k不大的时候，比如手机号码排序的例子，k最大就是11，所以基数排序的时间复杂度就近似于O(n)。</p><p>实际上，有时候要排序的数据并不都是等长的，比如我们排序牛津字典中的20万个英文单词，最短的只有1个字母，最长的我特意去查了下，有45个字母，中文翻译是尘肺病。对于这种不等长的数据，基数排序还适用吗？</p><p>实际上，<strong>我们可以把所有的单词补齐到相同长度，位数不够的可以在后面补“0”</strong>，因为根据<a href=\"https://zh.wiktionary.org/wiki/US-ASCII\">ASCII值</a>，所有字母都大于“0”，所以补“0”不会影响到原有的大小顺序。这样就可以继续用基数排序了。</p><p>我来总结一下，<strong>基数排序对要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果a数据的高位比b数据大，那剩下的低位就不用比较了。除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到O(n)了</strong>。</p><h2>解答开篇</h2><p>今天的内容学完了。我们再回过头来看看开篇的思考题：如何根据年龄给100万用户排序？现在思考题是不是变得非常简单了呢？我来说一下我的解决思路。</p><p>实际上，根据年龄给100万用户排序，就类似按照成绩给50万考生排序。我们假设年龄的范围最小1岁，最大不超过120岁。我们可以遍历这100万用户，根据年龄将其划分到这120个桶里，然后依次顺序遍历这120个桶中的元素。这样就得到了按照年龄排序的100万用户数据。</p><h2>内容小结</h2><p>今天，我们学习了3种线性时间复杂度的排序算法，有桶排序、计数排序、基数排序。它们对要排序的数据都有比较苛刻的要求，应用不是非常广泛。但是如果数据特征比较符合这些排序算法的要求，应用这些算法，会非常高效，线性时间复杂度可以达到O(n)。</p><p>桶排序和计数排序的排序思想是非常相似的，都是针对范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以划分成高低位，位之间有递进关系。比较两个数，我们只需要比较高位，高位相同的再比较低位。而且每一位的数据范围不能太大，因为基数排序算法需要借助桶排序或者计数排序来完成每一个位的排序工作。</p><h2>课后思考</h2><p>我们今天讲的都是针对特殊数据的排序算法。实际上，还有很多看似是排序但又不需要使用排序算法就能处理的排序问题。</p><p>假设我们现在需要对D，a，F，B，c，A，z这个字符串进行排序，要求将其中所有小写字母都排在大写字母的前面，但小写字母内部和大写字母内部不要求有序。比如经过排序之后为a，c，z，D，F，B，A，这个如何来实现呢？如果字符串中存储的不仅有大小写字母，还有数字。要将小写字母的放到前面，大写字母放在最后，数字放在中间，不用排序算法，又该怎么解决呢？</p><p>欢迎留言和我分享，我会第一时间给你反馈。</p><hr><p><span class=\"orange\">我已将本节内容相关的详细代码更新到GitHub，<a href=\"https://github.com/wangzheng0822/algo\">戳此</a>即可查看。</span></p>","neighbors":{"left":{"article_title":"12 | 排序（下）：如何用快排思想在O(n)内查找第K大元素？","id":41913},"right":{"article_title":"14 | 排序优化：如何实现一个通用的、高性能的排序函数？","id":42359}},"comments":[{"had_liked":false,"id":33864,"user_name":"wucj","can_delete":false,"product_type":"c1","uid":1054399,"ip_address":"","ucode":"DBB0FA0CCD30DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/16/bf/9ca879b7.jpg","comment_is_top":true,"comment_ctime":1539912374,"is_pvip":false,"discussion_count":30,"race_medal":0,"score":"9.2233763849015992e+18","product_id":100017301,"comment_content":"用两个指针a、b：a指针从头开始往后遍历，遇到大写字母就停下，b从后往前遍历，遇到小写字母就停下，交换a、b指针对应的元素；重复如上过程，直到a、b指针相交。<br>对于小写字母放前面，数字放中间，大写字母放后面，可以先将数据分为小写字母和非小写字母两大类，进行如上交换后再在非小写字母区间内分为数字和大写字母做同样处理","like_count":1013,"discussions":[{"author":{"id":1100064,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","nickname":"zj","note":"","ucode":"E3329CCF694AC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222241,"discussion_content":"这就是快排的partition，未分区的和已分区的\n","likes_number":22,"is_delete":false,"is_hidden":false,"ctime":1586103041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082000,"avatar":"https://static001.geekbang.org/account/avatar/00/10/82/90/e4a08b0e.jpg","nickname":"KangShan","note":"","ucode":"07497A7AC92238","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277635,"discussion_content":"也就是当只有两个大类时优先考虑使用交换位置的算法，这样可以实现原地排序，最小空间复杂度。当类型超过时同时是少量时优先考虑使用桶排序实现。","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1591084902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1243179,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f8/2b/f404c4a4.jpg","nickname":"彻夜繁星","note":"","ucode":"E74446F3B70961","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265022,"discussion_content":"其实第二个问题还可以优化一下，借助插入排序的思想，用两个指针分别从数组的最前面和最后面向中间遍历，这两个指针分别标记小写字母区间的最右侧和大写字母的最左侧；当小写字母和小写字母分居两侧后，中间部分自然就是数字了。时间复杂度为O(n)。","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1589368410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1374471,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f9/07/6eefba21.jpg","nickname":"李之其","note":"","ucode":"32305F009C5481","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1243179,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f8/2b/f404c4a4.jpg","nickname":"彻夜繁星","note":"","ucode":"E74446F3B70961","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295880,"discussion_content":"这个好像是快排思想吧，左右指针分别维护小写字母和大写字母的边界，然后依次遍历数组，进行交换，插入排序主要是数据移动，不是交换","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596373847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":265022,"ip_address":""},"score":295880,"extra":""}]},{"author":{"id":1014550,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/16/ca250e8c.jpg","nickname":"王木公","note":"","ucode":"F049AEBFA0338D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6192,"discussion_content":"这不就是快排的partition么","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1566779886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1683130,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","nickname":"乾坤瞬间","note":"","ucode":"15BDCF29CBF8EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1014550,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/16/ca250e8c.jpg","nickname":"王木公","note":"","ucode":"F049AEBFA0338D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43870,"discussion_content":"个人觉得，这个是快速partition中的一种技巧，partition还有一种更笨的方法，是创建两个数组的那种","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1572914742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6192,"ip_address":""},"score":43870,"extra":""},{"author":{"id":1243570,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f9/b2/2ed800b4.jpg","nickname":"社会你强哥","note":"","ucode":"325B9005588D9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1683130,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","nickname":"乾坤瞬间","note":"","ucode":"15BDCF29CBF8EB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":117448,"discussion_content":"快排有个中间点，但是这个中间点是一个数字区间。规定不要用快排。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578116397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43870,"ip_address":""},"score":117448,"extra":""}]},{"author":{"id":1684311,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","nickname":"姜川","note":"","ucode":"0F8A349623EAB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34245,"discussion_content":"大写一个桶，小写一个桶，然后读出小写的，在读出大写的","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1571187194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1236079,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","nickname":"短迪大魔王","note":"","ucode":"37E8117E0495B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1684311,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","nickname":"姜川","note":"","ucode":"0F8A349623EAB5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":152401,"discussion_content":"空间复杂度高","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579960636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":34245,"ip_address":""},"score":152401,"extra":""}]},{"author":{"id":1456586,"avatar":"https://static001.geekbang.org/account/avatar/00/16/39/ca/cdc58834.jpg","nickname":"黄金果","note":"","ucode":"329811FF99F4B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346089,"discussion_content":"三色旗问题","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1611856752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1309297,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fa/71/56999f7b.jpg","nickname":"洋洋","note":"","ucode":"5BAF2252738CA8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71518,"discussion_content":"不用排序算法，就直接遍历一遍，比较ASCII码","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1575429350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1359658,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/2a/e56244c8.jpg","nickname":"彭昀磊","note":"","ucode":"1B12F73B56ABBB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1309297,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fa/71/56999f7b.jpg","nickname":"洋洋","note":"","ucode":"5BAF2252738CA8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200003,"discussion_content":"这就是变相的桶排序嘛","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583644176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":71518,"ip_address":""},"score":200003,"extra":""},{"author":{"id":2259116,"avatar":"https://static001.geekbang.org/account/avatar/00/22/78/ac/21753f0e.jpg","nickname":"shx","note":"","ucode":"CD5BA8A38EC8BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1309297,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fa/71/56999f7b.jpg","nickname":"洋洋","note":"","ucode":"5BAF2252738CA8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320540,"discussion_content":"我也是这么想的，分三个桶，根据ascii码决定放到哪个桶，最后把三个桶合并成一个","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604394508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":71518,"ip_address":""},"score":320540,"extra":""}]},{"author":{"id":1347240,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8e/a8/c9819e37.jpg","nickname":"时光","note":"","ucode":"1087509C209C54","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180030,"discussion_content":"这样做的话，如何保证小写字母之间，大写字母之间原本次序问题呢？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1582272650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1446784,"avatar":"","nickname":"Geek_3ba85e","note":"","ucode":"106586BF969A80","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1347240,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8e/a8/c9819e37.jpg","nickname":"时光","note":"","ucode":"1087509C209C54","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":244203,"discussion_content":"题目要求不管内部顺序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587570418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":180030,"ip_address":""},"score":244203,"extra":""},{"author":{"id":1336634,"avatar":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","nickname":"mqray","note":"","ucode":"15664507AD7033","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1446784,"avatar":"","nickname":"Geek_3ba85e","note":"","ucode":"106586BF969A80","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263163,"discussion_content":"题目中不是说“小写字母内部和大写字母内部不要求有序”，意思应该是说保持大小写元素原本的顺序应该保留（不用对大小写部分排序），是这个意思吧","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1589181588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":244203,"ip_address":""},"score":263163,"extra":""},{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336634,"avatar":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","nickname":"mqray","note":"","ucode":"15664507AD7033","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362694,"discussion_content":"这里&#34;有序&#34;要么指ASCII码，要么指原有顺序，不管是哪种，都是不要求有序嘛","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617013303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":263163,"ip_address":""},"score":362694,"extra":""}]},{"author":{"id":2033770,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/08/6a/20500b73.jpg","nickname":"rice","note":"","ucode":"7F50AEABE82BB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297607,"discussion_content":"/**\n * @Description 对字符串进行排序\n * 要求: 小写字母的放到前面，大写字母放在最后，数字放在中间，不用排序算法，要怎么解决呢？\n * 运用双指针进行处理, 首先对小写字母和数字与大写字母进行区分,然后在对小写字母与数字进行区分\n * 而双指针的终止条件是头尾指针相遇\n * @Author rice\n * @Date 2020-08-09 15:24:35\n */\npublic class HandleLetterAndNumber {\n\n    public static Character[] handleLetterAndLetter(Character[] originalArray) {\n        // 小写字母和数字与大写字母进行区分, 并获取两种数据的分界线\n        int tail = handle(originalArray, c -> Character.isLowerCase(c) || Character.isDigit(c), originalArray.length - 1);\n        // 小写字母与数字进行区分\n        handle(originalArray, Character::isLowerCase, tail);\n        return originalArray;\n    }\n\n    private static <T> int handle(T[] originalArray, Predicate<T> conditions, int tail) {\n\n        int head = 0;\n        while (head != tail) {\n            if (!conditions.test(originalArray[head])) {\n                if (conditions.test(originalArray[tail])) {\n                    swap(head, tail, originalArray);\n                } else {\n                    tail--;\n                }\n            } else {\n                head++;\n            }\n        }\n        return tail;\n    }\n\n    private static <T> void swap(int beforeSwapIndex, int afterSwapIndex, T[] swappingArray) {\n        T temp = swappingArray[afterSwapIndex];\n        swappingArray[afterSwapIndex] = swappingArray[beforeSwapIndex];\n        swappingArray[beforeSwapIndex] = temp;\n    }\n\n    public static void main(String[] args) {\n        Character[] afterHandleLetterAndLetter = handleLetterAndLetter(new Character[]{&#39;a&#39;, &#39;A&#39;, &#39;1&#39;, &#39;b&#39;, &#39;B&#39;, &#39;g&#39;, &#39;6&#39;, &#39;t&#39;, &#39;8&#39;, &#39;L&#39;, &#39;d&#39;});\n        System.out.println(Arrays.toString(afterHandleLetterAndLetter));// [a, d, t, b, g, 8, 6, 1, B, L, A]\n    }\n}","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1596983779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1717549,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/35/2d/a2bde67e.jpg","nickname":"SapereAude","note":"","ucode":"C5D61C535B7B10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52730,"discussion_content":"鄙人到圣地一游","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574081492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019069,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8c/bd/4895b166.jpg","nickname":"Chelizi","note":"","ucode":"B90CFDB5F7B900","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258566,"discussion_content":"// Java 实现\n@Test\n    public void partitionArray() {\n        // 将其中所有小写字母都排在大写字母的前面，但小写字母内部和大写字母内部不要求有序\n        Character[] letters = new Character[]{&#39;D&#39;, &#39;a&#39;, &#39;F&#39;, &#39;B&#39;, &#39;c&#39;, &#39;A&#39;, &#39;z&#39;};\n        partitionArray(letters, Character::isLowerCase);\n        System.out.println(Arrays.toString(letters)); // [z, a, c, B, F, A, D]\n\n        // 小写字母的放到前面，大写字母放在最后，数字放在中间，不用排序算法\n        Character[] letters2 = new Character[]{&#39;D&#39;, &#39;a&#39;, &#39;F&#39;, &#39;B&#39;, &#39;c&#39;, &#39;A&#39;, &#39;z&#39;, &#39;1&#39;, &#39;e&#39;, &#39;2&#39;, &#39;W&#39;, &#39;b&#39;, &#39;F&#39;, &#39;3&#39;};\n        partitionArray(letters2, Character::isLowerCase, Character::isDigit);\n        System.out.println(Arrays.toString(letters2)); // [b, a, e, z, c, 3, 2, 1, F, B, W, D, F, A]\n    }\n\n    /**\n     * 根据指定条件对数组元素进行分区\n     *\n     * @param elements   待分区的数组\n     * @param conditions 分区条件\n     * @param <T>           元素类型\n     */\n    public <T> void partitionArray(T[] elements, Predicate<T>... conditions) {\n        int p = 0;\n        for (Predicate<T> condition : conditions) {\n            int q = elements.length - 1;\n            while (p != q) {\n                if (!condition.test(elements[p])) {\n                    if (condition.test(elements[q])) {\n                        T tmp = elements[p];\n                        elements[p] = elements[q];\n                        elements[q] = tmp;\n                    } else {\n                        q--;\n                    }\n                } else {\n                    p++;\n                }\n            }\n        }\n    }","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588692965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019069,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8c/bd/4895b166.jpg","nickname":"Chelizi","note":"","ucode":"B90CFDB5F7B900","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294322,"discussion_content":"不是稳定排序","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1595854948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":258566,"ip_address":""},"score":294322,"extra":""}]},{"author":{"id":1528555,"avatar":"https://static001.geekbang.org/account/avatar/00/17/52/eb/eec719f3.jpg","nickname":"开水","note":"","ucode":"651491C38B925B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358848,"discussion_content":"我也是觉得这个方法不稳定","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616063455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2655916,"avatar":"https://static001.geekbang.org/account/avatar/00/28/86/ac/d77f5d46.jpg","nickname":"神经蛙","note":"","ucode":"3A655AEF65A94C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413317,"discussion_content":"跟leetcode荷兰国旗问题有点像","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636444259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2798455,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/b3/77/cb9ca598.jpg","nickname":"Stockholm","note":"","ucode":"5F6501554B631E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411907,"discussion_content":"剑指Offer 面试题21","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636030940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1691315,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ce/b3/2ae52d00.jpg","nickname":"田源 Roy Tien","note":"","ucode":"3606CA041A03F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291086,"discussion_content":"三向快排？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594704170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2046036,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/sOuSC65kXWdWBAIIs6uXAD41Ed8Wo8tib81LLVOQJ2oK23TgPDy6x0PGmp7rXwLR3BHOicaKx1zib1DyfpCITK3dw/132","nickname":"GeekYanger","note":"","ucode":"E674B7D25261CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290198,"discussion_content":"打卡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594373888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1711450,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/1d/5a/937f0d4c.jpg","nickname":"yin","note":"","ucode":"9F3D55A1D435A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60342,"discussion_content":"递归","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574728418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153707,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/ab/fd201314.jpg","nickname":"小耿","note":"","ucode":"1C8B66C738D33B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3403,"discussion_content":"直接用三个指针好像也行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564458072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1759112,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d7/88/d459fc12.jpg","nickname":"拼命吃草","note":"","ucode":"2A717B61F757A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1153707,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/ab/fd201314.jpg","nickname":"小耿","note":"","ucode":"1C8B66C738D33B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78921,"discussion_content":"我觉得三个指针的方法应该是更快一些的吧(没有深入思考过)，不过就是有的时候要交换2次","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576032647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3403,"ip_address":""},"score":78921,"extra":""},{"author":{"id":1494808,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cf/18/16ec075e.jpg","nickname":"飒～","note":"","ucode":"20F99478B44F3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1153707,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/ab/fd201314.jpg","nickname":"小耿","note":"","ucode":"1C8B66C738D33B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158959,"discussion_content":"我也觉得三个指针可以，先用快慢指针找一下三个点，然后开始遍历和交换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580643961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3403,"ip_address":""},"score":158959,"extra":""}]}]},{"had_liked":false,"id":33809,"user_name":"伟忠","can_delete":false,"product_type":"c1","uid":1112089,"ip_address":"","ucode":"FE77CF20ED6065","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","comment_is_top":false,"comment_ctime":1539906670,"is_pvip":false,"discussion_count":18,"race_medal":0,"score":"2617174989934","product_id":100017301,"comment_content":"课后思考，利用桶排序思想，弄小写，大写，数字三个桶，遍历一遍，都放进去，然后再从桶中取出来就行了。相当于遍历了两遍，复杂度O(n)","like_count":609,"discussions":[{"author":{"id":1339586,"avatar":"https://static001.geekbang.org/account/avatar/00/14/70/c2/0df5cc71.jpg","nickname":"Melon","note":"","ucode":"8E4A96B3BA0239","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375084,"discussion_content":"空间复杂度O(n)，是稳定排序；交换指针空间复杂度O(1)，但不稳定","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1621477228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153707,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/ab/fd201314.jpg","nickname":"小耿","note":"","ucode":"1C8B66C738D33B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3402,"discussion_content":"你这个方法太简单了，好气啊，哈哈","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1564458036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1400962,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/82/9a43504b.jpg","nickname":"[耶]友超","note":"","ucode":"890572F77C3670","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1153707,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/ab/fd201314.jpg","nickname":"小耿","note":"","ucode":"1C8B66C738D33B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4610,"discussion_content":"理解了知识点就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565594289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3402,"ip_address":""},"score":4610,"extra":""},{"author":{"id":1180460,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/2c/33ba4d12.jpg","nickname":"山中无老虎 😪","note":"","ucode":"594247C3A976DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1153707,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/ab/fd201314.jpg","nickname":"小耿","note":"","ucode":"1C8B66C738D33B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4760,"discussion_content":"这方法并不对，题目有要求不使用排序算法，看下面的留言荷兰国旗的才是正解","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1565705731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3402,"ip_address":""},"score":4760,"extra":""},{"author":{"id":1593200,"avatar":"","nickname":"Geek_3152d5","note":"","ucode":"743B87DBC697D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180460,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/2c/33ba4d12.jpg","nickname":"山中无老虎 😪","note":"","ucode":"594247C3A976DE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7214,"discussion_content":"不使用排序算法是小题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567420225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4760,"ip_address":""},"score":7214,"extra":""}]},{"author":{"id":1630053,"avatar":"https://static001.geekbang.org/account/avatar/00/18/df/65/e93cd7dc.jpg","nickname":"听风的歌","note":"","ucode":"51C2ADF6ECE781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544717,"discussion_content":"我想了一下也是这个思路，只是用了桶的思路，其实没有排序，大道至简","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1641655553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296053,"discussion_content":"优秀，学以致用。我只想到了双指针的方法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596440254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1689380,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c7/24/19d0683e.jpg","nickname":"crossing","note":"","ucode":"3B66CFFF38BA67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74431,"discussion_content":"桶排序，一种桶内相同数据不排序就是计数排序，另一种是桶内不同数据不排序","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575644587,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69298,"discussion_content":"em，就是桶排序的变种 计数排序","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575279788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210699,"avatar":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","nickname":"-W.LI-","note":"","ucode":"3556786538664F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24837,"discussion_content":"空间复杂度太高。。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570282146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1593200,"avatar":"","nickname":"Geek_3152d5","note":"","ucode":"743B87DBC697D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7215,"discussion_content":"我也是这么想的，不过我觉得这算是堆排序，只分堆，堆内不排序","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567420319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1789481,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/4e/29/adcb78e7.jpg","nickname":"静心","note":"","ucode":"B80DE4B5C923D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540124,"discussion_content":"牛啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639965330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165817,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/f9/39492855.jpg","nickname":"阿阳","note":"","ucode":"20A35FB86B1C5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393529,"discussion_content":"大聪明！学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631489154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284647,"avatar":"https://static001.geekbang.org/account/avatar/00/13/9a/27/4b81bce5.jpg","nickname":"笑","note":"","ucode":"C91EAFAB88E5AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320323,"discussion_content":"用了桶的思想不错，但这里不涉及排序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604319962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1930723,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/75/e3/ef489d57.jpg","nickname":"Roy","note":"","ucode":"909B8B605C317A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258686,"discussion_content":"桶排序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588723268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1214755,"avatar":"https://static001.geekbang.org/account/avatar/00/12/89/23/73569bd7.jpg","nickname":"xj_zh","note":"","ucode":"190609F7AE67CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251345,"discussion_content":"这里应该用基数排序吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588081167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1257418,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","nickname":"梦想的优惠券","note":"","ucode":"D3B44F6C618CA7","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72586,"discussion_content":"打卡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575506927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1218937,"avatar":"https://static001.geekbang.org/account/avatar/00/12/99/79/74d4f24f.jpg","nickname":"anker","note":"","ucode":"6EDF1FB9D45238","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46034,"discussion_content":"挺妙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573113233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33826,"user_name":"","can_delete":false,"product_type":"c1","uid":1031328,"ip_address":"","ucode":"1B73BA45ACD06C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/a0/97c7679b.jpg","comment_is_top":false,"comment_ctime":1539908643,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"1779656369187","product_id":100017301,"comment_content":"渐渐有些掉队的趋势","like_count":415,"discussions":[{"author":{"id":1211359,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/df/876dd9cc.jpg","nickname":"kings","note":"","ucode":"D478306EBF582E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77584,"discussion_content":"车门焊死了，谁也不能掉队","likes_number":28,"is_delete":false,"is_hidden":false,"ctime":1575906374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1683063,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/QYKSUV20DMgBHAPLfgngdw4N8FHRCSBLCJueVRu9Ya1Ba2x4icx70zoVVFOZtG1K6TkHj5CFbuztQhRFyCjWXHQ/132","nickname":"zaab","note":"","ucode":"EE846895FF0C85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24550,"discussion_content":"你们还好，还在道路上，然而我已经脱轨了。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1570176228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1075472,"avatar":"https://static001.geekbang.org/account/avatar/00/10/69/10/0c6f68d7.jpg","nickname":"wanggw","note":"","ucode":"82FF3F87827D9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":85790,"discussion_content":"后尾灯快看不到啦","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576575686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1238166,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/96/a5d775e9.jpg","nickname":"牧凉","note":"","ucode":"1F57A16E37C668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1075472,"avatar":"https://static001.geekbang.org/account/avatar/00/10/69/10/0c6f68d7.jpg","nickname":"wanggw","note":"","ucode":"82FF3F87827D9B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379153,"discussion_content":"笑死了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623729222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":85790,"ip_address":""},"score":379153,"extra":""}]},{"author":{"id":1620507,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epTx3WM1A1hxjOmtfQNa0QQ01QUlhaaSHrZ3OcnzYibY1gFeNFAcZ7yQpxZsbyk7D9m6JA9X5j44tA/132","nickname":"糖醋排骨","note":"","ucode":"00ED918A220077","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8015,"discussion_content":"感觉背影都快看不到了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567758038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1238166,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/96/a5d775e9.jpg","nickname":"牧凉","note":"","ucode":"1F57A16E37C668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1620507,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epTx3WM1A1hxjOmtfQNa0QQ01QUlhaaSHrZ3OcnzYibY1gFeNFAcZ7yQpxZsbyk7D9m6JA9X5j44tA/132","nickname":"糖醋排骨","note":"","ucode":"00ED918A220077","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379154,"discussion_content":"哈哈哈哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623729231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8015,"ip_address":""},"score":379154,"extra":""}]},{"author":{"id":1593085,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4e/fd/c2c330d5.jpg","nickname":"为此","note":"","ucode":"2E0331524A7CFD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370233,"discussion_content":"干就完事儿了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619340909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2532285,"avatar":"","nickname":"Geek_926921","note":"","ucode":"51C3B0178D77E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573763,"discussion_content":"已经看得一脸懵逼了，为啥把数据放到桶里面就顺序了，每个桶不得再排序一次吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653633148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1347740,"avatar":"https://static001.geekbang.org/account/avatar/00/14/90/9c/53d0f906.jpg","nickname":"黄豆豆","note":"","ucode":"5D47A4E3BAD3D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566057,"discussion_content":"看完这节一脸懵逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650593256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1320487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","nickname":"罗杰","note":"","ucode":"96BAFAA147341F","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542742,"discussion_content":"这节课的确讲的有点糟心，跳跃的太快，希望后面不是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640832761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1971269,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oltLEqTrmHm2aJP99BK6tHu5h7hp4aj08wR5Wt6H31iadFduDAVvjYKmhQ2nvGbLV3lkVdiat2GRasgWXoJeTibUg/132","nickname":"杨","note":"","ucode":"7EFEFE285975C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410099,"discussion_content":"要自己写一次算法  你才能理解的深   后面复习起来就会很轻松","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635599915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238166,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/96/a5d775e9.jpg","nickname":"牧凉","note":"","ucode":"1F57A16E37C668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379152,"discussion_content":"评论好笑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623729188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2464744,"avatar":"https://static001.geekbang.org/account/avatar/00/25/9b/e8/4f0173ef.jpg","nickname":"OldFriend","note":"","ucode":"33B88002F684C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357713,"discussion_content":"加油啊兄弟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615858293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c2/fb/3b64b8dd.jpg","nickname":"Eason","note":"","ucode":"25644E24732D1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349034,"discussion_content":"难顶啊兄弟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612855848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1915698,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3b/32/3d0cc333.jpg","nickname":"北野豪横","note":"","ucode":"275229F4B048D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283133,"discussion_content":"脱轨 脱轨","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592192151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33911,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1539917456,"is_pvip":false,"discussion_count":11,"race_medal":0,"score":"804698801808","product_id":100017301,"comment_content":"排序算法基本上算是学完了，昨天我在实践快排的时候 我就发现这样一个问题，虽然理解了原理 但是写起来还不是很顺畅，如果写出来的代码跟老师的一模一样 那就不叫理解了原理 那叫背代码，我昨天也去翻了大话数据结构里面的快排 发现代码又不一样，所以我觉得接下来的时间就应该根据思路多实现一下这些排序代码，不能死记硬背代码，多理解原理","like_count":187,"discussions":[{"author":{"id":1952958,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJE5Y62XOTFc7B25pqzmI6nqInMmVNSAic8Yg3hsDbgtVb3ovFib4wUUwOficbKkuicOGvCqm8r761Fw/132","nickname":"Geek_0de10a","note":"","ucode":"ECA4552867055C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224753,"discussion_content":"这是道  与 术 的区别， 从 不同的术去比较理解道","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1586329732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181206,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/16/e85c1fa8.jpg","nickname":"滴答丶滴","note":"","ucode":"2093C2948B4327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301362,"discussion_content":"我也是，思路大体都懂了。但是实现还是有些困难","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598502197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1898292,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/jibauP3icEFic4w56L2ddVghL7h2gGKhFdW8lBfE9rpwwRgzUKkLFY9wb4w70AXz7retME96a6EBRTA0LvSLn0ib8A/132","nickname":"jack","note":"","ucode":"A2253AC8570C5E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303680,"discussion_content":"先接受再优化","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599348614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299347,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d3/93/c3fb8566.jpg","nickname":"ProcessIsTheKey","note":"","ucode":"BE02EFD75F7D98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552401,"discussion_content":"感觉归并、快排已经到了自己的理解力盲区了，归并的递归三行代码，脑子里想不出来具体过程，debug日志显示先递归左侧，然后合并左侧，再递归右侧，然后合并右侧，然后左右再合并...搞不清楚递归及合并函数执行顺序为啥是这样...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645449895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2851005,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/e3TIKUiaUMfWNnoDPvydj0icJUc34vmA925kiceZe9WHC8uu9Wpbo4PJv0ibLhyhZ2aibd9FhCYMDu9r6KaynaiaWjOQ/132","nickname":"Geek_83306a","note":"","ucode":"A55C31D4130EC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1299347,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d3/93/c3fb8566.jpg","nickname":"ProcessIsTheKey","note":"","ucode":"BE02EFD75F7D98","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564189,"discussion_content":"你这是不理解递归，建议先刷二叉树的题目，刷10道就能理解递归了，刷完再刷回溯算法的题目，会更深入了解递归","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650183075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552401,"ip_address":""},"score":564189,"extra":""}]},{"author":{"id":2055017,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5b/69/477a9071.jpg","nickname":"璟","note":"","ucode":"EA244A298C262B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297312,"discussion_content":"基数排序和堆排序都i不是很好写感觉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596871756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204442,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/da/00189b80.jpg","nickname":"Yan1","note":"","ucode":"286B59FDC55A44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78716,"discussion_content":"根据专栏的思路，用选择排序的原理，一步一步实现出来代码和专栏的不会差太多。实现完调试完，我也去网上搜索快排代码，是和大话...一样的写法，才想起来以前学过，但是细节太多，学了就忘，不容易记住实现的细节思路。当然实现的细节里相同的原理都包括跳跃的交换。这个是快排之所以快的一个优势。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575994315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268892,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/9c/c5528d9f.jpg","nickname":"天空","note":"","ucode":"9C721B726A55D1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77506,"discussion_content":"不管怎么写思想都没变吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575904953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1482915,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","nickname":"业余爱好者","note":"","ucode":"A890935A982988","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71934,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575465970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58103,"discussion_content":"计算机概论 计算机原理 哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574652221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1647703,"avatar":"https://static001.geekbang.org/account/avatar/00/19/24/57/b8609e97.jpg","nickname":"任耀坤🔥","note":"","ucode":"53F265520353DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40825,"discussion_content":"大大除了大话数据结构还有没有什么适合自学计算机的阅读的基础书籍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572273062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33995,"user_name":"胡二","can_delete":false,"product_type":"c1","uid":1085227,"ip_address":"","ucode":"BE1E71EF51AC07","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/2b/e514c8f0.jpg","comment_is_top":false,"comment_ctime":1539941498,"is_pvip":false,"replies":[{"id":"12205","content":"可以的 只不过就不是稳定排序算法了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540050038,"ip_address":"","comment_id":33995,"utype":1}],"discussion_count":24,"race_medal":0,"score":"568475624570","product_id":100017301,"comment_content":"计数排序中，从数组A中取数，也是可以从头开始取的吧","like_count":132,"discussions":[{"author":{"id":1794349,"avatar":"","nickname":"sivagZhang","note":"","ucode":"95FB725C8F895C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104861,"discussion_content":"本来我也想为什么要从后面开始遍历，因为我门看的是简单的数字，哪个3和另一个3都长的一样，觉得无所谓。后来看网易公开课的MIT《算法分析》课程里，老师在讲述基数排序之前，特别说明了一下计数排序是一个稳定排序算法。这也就是为啥从后开始遍历的原因。因为这样使得原数组里在后的元素，在排序后的数组也放在后边。","likes_number":21,"is_delete":false,"is_hidden":false,"ctime":1577453293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1898292,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/jibauP3icEFic4w56L2ddVghL7h2gGKhFdW8lBfE9rpwwRgzUKkLFY9wb4w70AXz7retME96a6EBRTA0LvSLn0ib8A/132","nickname":"jack","note":"","ucode":"A2253AC8570C5E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1794349,"avatar":"","nickname":"sivagZhang","note":"","ucode":"95FB725C8F895C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305245,"discussion_content":"原来这就是举例中多个0、2、3的原因啦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599825667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":104861,"ip_address":""},"score":305245,"extra":""}]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427095,"discussion_content":"可以的 只不过就不是稳定排序算法了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1540050038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030657,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","nickname":"Leoorz","note":"","ucode":"8912628AD6ADE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63856,"discussion_content":"刚看的时候就在想为什么要从后往前遍历，又学到了，效率/稳定/原地  在排序算法中要始终考虑","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574916905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1031734,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/36/abb7bfe3.jpg","nickname":"xenoblade3","note":"","ucode":"620DD0491EEFF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1507,"discussion_content":"老师的这个回答给出了为什么要从尾部遍历数组A的原因，看文章就是要思考算法为什么要这么做，提炼过的知识就是需要我们多思考，赞。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1562668138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299160,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/eEBwOT9gbj3gRtD79LsFQUW0F0Pph3m3RoW0QL5O9fXogicG8xicciaj6qcpvbhwv3iapWe0R7iazDugMzK61v2GNNg/132","nickname":"Geek_56013e","note":"","ucode":"FF25787D443CC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380397,"discussion_content":"从前往后取值和从后往前取值，遇到的第一个3对应都是7，都是放在3的最后一个位置，所以前往后不稳定，第一个3排在最后一个3的位置","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1624465673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1258957,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/cd/5bb487a0.jpg","nickname":"荣思敏","note":"","ucode":"50689C9D89846A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55889,"discussion_content":"原来是这样！争哥牛🐮","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574409986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1457551,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/8f/4d1ffc7f.jpg","nickname":"Geek_麟凤来思","note":"","ucode":"7ADF5585765A42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1563,"discussion_content":"因为取数过程是出栈思维，所有要从尾部开始。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1562687526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1153707,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/ab/fd201314.jpg","nickname":"小耿","note":"","ucode":"1C8B66C738D33B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1457551,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/8f/4d1ffc7f.jpg","nickname":"Geek_麟凤来思","note":"","ucode":"7ADF5585765A42","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3401,"discussion_content":"啥是出栈思维？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564457763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1563,"ip_address":""},"score":3401,"extra":""},{"author":{"id":1181206,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/16/e85c1fa8.jpg","nickname":"滴答丶滴","note":"","ucode":"2093C2948B4327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1153707,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9a/ab/fd201314.jpg","nickname":"小耿","note":"","ucode":"1C8B66C738D33B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301373,"discussion_content":"栈的特性，先入后出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598508511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3401,"ip_address":""},"score":301373,"extra":""}]},{"author":{"id":1172677,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e4/c5/2b3c6085.jpg","nickname":"dada","note":"","ucode":"DBB05DB032EC90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347688,"discussion_content":"其实从前往后遍历可以是稳定的，但是曲解了数组c[]本身的含义 :)\n\n借用老师的例子，a[] = {2, 5, 3, 0, 2, 3, 0, 3}\n\nc[2]为4，表示2分以内的有4个人，c[3]为7，表示3分以内的有7个人，说明得3分的3个人就要分别对应第5, 6, 7个位置。\n\n如果是从后往前，遇到3时，依次存入r[6], r[5], r[4]，下标则从c[3]-1的值(6)开始取，每次c[3]--就好。\n对应代码 r[c[a[i]] - 1] = a[i]; c[a[i]]--;\n\n如果从前往后，遇到3时，只需要将第1个3存入r[4]，下标直接从c[2]的值(4)开始取，每次c[2]++就好。\n对应代码 r[c[a[i] - 1]] = a[i]; c[a[i] - 1]++;\n\n但如果按这种思路就要单独处理c[0]，因为我们正向遍历时遇到0的时候要从0号开始存，而数组c[]中没有0这个数据_(: 」∠)_\n\n于是为了避免单独处理0，于是你处理c[k]时变成了记录小于分数k的人数而非小于等于，而c[k]作为桶就是要装分数k啊，记录不包含分数k的数据显然就跟c[]这个数组本来存在的意义无关了啊。\n\n身为强迫症这是不能忍的ヽ(*。>Д<)o゜！（但我们仍然可以利用逼死强迫症的方法来实现计数排序正向遍历的稳定性）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612281725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1299160,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/eEBwOT9gbj3gRtD79LsFQUW0F0Pph3m3RoW0QL5O9fXogicG8xicciaj6qcpvbhwv3iapWe0R7iazDugMzK61v2GNNg/132","nickname":"Geek_56013e","note":"","ucode":"FF25787D443CC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1172677,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e4/c5/2b3c6085.jpg","nickname":"dada","note":"","ucode":"DBB05DB032EC90","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380395,"discussion_content":"这里是说不该动其他代码，只从前取值来排序，你代码都全改了，而且时间复杂度还更高。而且你从前便利的代码好像有问题，2排完顺序后，计数减一，到3排序时取不到2对应的4了，除非你一开始缓存了各个数值末位位值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624464976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":347688,"ip_address":""},"score":380395,"extra":""}]},{"author":{"id":2184481,"avatar":"","nickname":"Geek_524379","note":"","ucode":"778358DA65A50A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310674,"discussion_content":"老师说的不对吧，怎么就不稳定了呢，把- -换成++就是稳定的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601991001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2292072,"avatar":"https://static001.geekbang.org/account/avatar/00/22/f9/68/66fb097b.jpg","nickname":"辛大人","note":"","ucode":"1360D3C7BD729D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2184481,"avatar":"","nickname":"Geek_524379","note":"","ucode":"778358DA65A50A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322423,"discussion_content":"准确说是把c[--a[n]]换成c[a[n-1]++]","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604741557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310674,"ip_address":""},"score":322423,"extra":""}]},{"author":{"id":1181206,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/16/e85c1fa8.jpg","nickname":"滴答丶滴","note":"","ucode":"2093C2948B4327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301374,"discussion_content":"是不是因为C数组是累加的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598508538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1748244,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOz2PzU4u9WQjLWBjRKQY8ZHtWSEYSZtX1DCSLwgSalIaRh0ggPgBC9K3yOibPYQlu504NibMUtibUQ/132","nickname":"Geek_ec6cd9","note":"","ucode":"FB45195FC91EF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77666,"discussion_content":"我觉得王争老师这个问题不完全对吧，或者说没有弄清楚这个同学的意思，事实上如爱你3000遍同学所说，这样并没有影响稳定性。我反复思考的想法是，之所以从后向前遍历，如Geek_麟凤来思同学所述是一种出栈思维，其实构想一下如果按照爱你3000遍同学的方法，每正向取一个数就在c数组对应位置+1，那么最后的c数组是什么样呢，起码是不美观的一组含义不是很直观的数字。而如果按照反向遍历的话，最后c数组会是一个全0数组，从性能上没差异，但是会更优美。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575909942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1347469,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8f/8d/5b82d3f7.jpg","nickname":"小细胞","note":"","ucode":"576E429FE658C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1748244,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOz2PzU4u9WQjLWBjRKQY8ZHtWSEYSZtX1DCSLwgSalIaRh0ggPgBC9K3yOibPYQlu504NibMUtibUQ/132","nickname":"Geek_ec6cd9","note":"","ucode":"FB45195FC91EF8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109407,"discussion_content":"hi~最后一句没太明白，为什么最后C数组会是全0数组，看文中的图排序结束以后，C数组并没有变成全0啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577691762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":77666,"ip_address":""},"score":109407,"extra":""},{"author":{"id":1181206,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/16/e85c1fa8.jpg","nickname":"滴答丶滴","note":"","ucode":"2093C2948B4327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1347469,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8f/8d/5b82d3f7.jpg","nickname":"小细胞","note":"","ucode":"576E429FE658C7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301372,"discussion_content":"可能是因为C数组是累加的?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598508386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":109407,"ip_address":""},"score":301372,"extra":""}]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69301,"discussion_content":"那样就逆序了。。不稳定\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575279927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205724,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/dc/d0c58ce5.jpg","nickname":"cccccc","note":"","ucode":"BDEFB01B75EBC1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41518,"discussion_content":"老师是从后往前做减法，确定该值可以放的最大下标。\n从前往后做加法，可以确定该值可以放的最小下标但是C数组的值就表示小于分数k的个数，这样就确定了每个数的起始下标，然后每次都加一，这样也是稳定排序吧，不知道我想的对不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572444230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1205724,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/dc/d0c58ce5.jpg","nickname":"cccccc","note":"","ucode":"BDEFB01B75EBC1","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":69303,"discussion_content":"点赞，这样正序也可以的，只不过我们都习惯于直接逆序吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575280125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41518,"ip_address":""},"score":69303,"extra":""},{"author":{"id":1347469,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8f/8d/5b82d3f7.jpg","nickname":"小细胞","note":"","ucode":"576E429FE658C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1205724,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/dc/d0c58ce5.jpg","nickname":"cccccc","note":"","ucode":"BDEFB01B75EBC1","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":109409,"discussion_content":"不太明白，求问正序的情况下C数组应该怎么存，每次遍历都往C数组大于当前分数k的几个位置里加一还是？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577691972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41518,"ip_address":""},"score":109409,"extra":""},{"author":{"id":1050777,"avatar":"https://static001.geekbang.org/account/avatar/00/10/08/99/6ab45a2f.jpg","nickname":"小时候可鲜啦","note":"","ucode":"C88B3EDF758230","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1205724,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/dc/d0c58ce5.jpg","nickname":"cccccc","note":"","ucode":"BDEFB01B75EBC1","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":304952,"discussion_content":"拿课程里老师的例子来说数组A：2，5，3，0，2，3，0，3，如果从后往前那么第三个3（a[7])会放在第7个位置（r[6]）,反过来从前往后遍历第1个3会放在第7个位置（r[6]），相对位置明显就颠倒了，因此从前往后是不稳定的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599720605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41518,"ip_address":""},"score":304952,"extra":""}]}]},{"had_liked":false,"id":34581,"user_name":"姜威","can_delete":false,"product_type":"c1","uid":1244051,"ip_address":"","ucode":"C58EB9A5AD634D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/93/f19a5364.jpg","comment_is_top":false,"comment_ctime":1540212792,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"461101713464","product_id":100017301,"comment_content":"总结：桶排序、计数排序、基数排序<br>一、线性排序算法介绍<br>1.线性排序算法包括桶排序、计数排序、基数排序。<br>2.线性排序算法的时间复杂度为O(n)。<br>3.此3种排序算法都不涉及元素之间的比较操作，是非基于比较的排序算法。<br>4.对排序数据的要求很苛刻，重点掌握此3种排序算法的适用场景。<br>二、桶排序（Bucket sort）<br>1.算法原理：<br>1）将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行快速排序。<br>2）桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了。<br>2.使用条件<br>1）要排序的数据需要很容易就能划分成m个桶，并且桶与桶之间有着天然的大小顺序。<br>2）数据在各个桶之间分布是均匀的。<br>3.适用场景<br>1）桶排序比较适合用在外部排序中。<br>2）外部排序就是数据存储在外部磁盘且数据量大，但内存有限无法将整个数据全部加载到内存中。<br>4.应用案例<br>1）需求描述：<br>有10GB的订单数据，需按订单金额（假设金额都是正整数）进行排序<br>但内存有限，仅几百MB<br>2）解决思路：<br>扫描一遍文件，看订单金额所处数据范围，比如1元-10万元，那么就分100个桶。<br>第一个桶存储金额1-1000元之内的订单，第二个桶存1001-2000元之内的订单，依次类推。<br>每个桶对应一个文件，并按照金额范围的大小顺序编号命名（00，01，02，…，99）。<br>将100个小文件依次放入内存并用快排排序。<br>所有文件排好序后，只需按照文件编号从小到大依次读取每个小文件并写到大文件中即可。<br>3）注意点：若单个文件无法全部载入内存，则针对该文件继续按照前面的思路进行处理即可。<br>三、计数排序（Counting sort）<br>1.算法原理<br>1）计数其实就是桶排序的一种特殊情况。<br>2）当要排序的n个数据所处范围并不大时，比如最大值为k，则分成k个桶<br>3）每个桶内的数据值都是相同的，就省掉了桶内排序的时间。<br>2.代码实现（参见下一条留言）<br>案例分析：<br>假设只有8个考生分数在0-5分之间，成绩存于数组A[8] = [2，5，3，0，2，3，0，3]。<br>使用大小为6的数组C[6]表示桶，下标对应分数，即0，1，2，3，4，5。<br>C[6]存储的是考生人数，只需遍历一边考生分数，就可以得到C[6] = [2，0，2，3，0，1]。<br>对C[6]数组顺序求和则C[6]=[2，2，4，7，7，8]，c[k]存储的是小于等于分数k的考生个数。<br>数组R[8] = [0，0，2，2，3，3，3，5]存储考生名次。那么如何得到R[8]的呢？<br>从后到前依次扫描数组A，比如扫描到3时，可以从数组C中取出下标为3的值7，也就是说，到目前为止，包括自己在内，分数小于等于3的考生有7个，也就是说3是数组R的第7个元素（也就是数组R中下标为6的位置）。当3放入数组R后，小于等于3的元素就剩下6个了，相应的C[3]要减1变成6。<br>以此类推，当扫描到第二个分数为3的考生时，就会把它放入数组R中第6个元素的位置（也就是下标为5的位置）。当扫描完数组A后，数组R内的数据就是按照分数从小到大排列的了。<br>3.使用条件<br>1）只能用在数据范围不大的场景中，若数据范围k比要排序的数据n大很多，就不适合用计数排序；<br>2）计数排序只能给非负整数排序，其他类型需要在不改变相对大小情况下，转换为非负整数；<br>3）比如如果考试成绩精确到小数后一位，就需要将所有分数乘以10，转换为整数。<br>四、基数排序（Radix sort）<br>1.算法原理（以排序10万个手机号为例来说明）<br>1）比较两个手机号码a，b的大小，如果在前面几位中a已经比b大了，那后面几位就不用看了。<br>2）借助稳定排序算法的思想，可以先按照最后一位来排序手机号码，然后再按照倒数第二位来重新排序，以此类推，最后按照第一个位重新排序。<br>3）经过11次排序后，手机号码就变为有序的了。<br>4）每次排序有序数据范围较小，可以使用桶排序或计数排序来完成。<br>2.使用条件<br>1）要求数据可以分割独立的“位”来比较；<br>2）位之间由递进关系，如果a数据的高位比b数据大，那么剩下的地位就不用比较了；<br>3）每一位的数据范围不能太大，要可以用线性排序，否则基数排序的时间复杂度无法做到O(n)。<br>五、思考<br>1.如何根据年龄给100万用户数据排序？<br>2.对D，a，F，B，c，A，z这几个字符串进行排序，要求将其中所有小写字母都排在大写字母前面，但是小写字母内部和大写字母内部不要求有序。比如经过排序后为a，c，z，D，F，B，A，这个如何实现呢？如果字符串中处理大小写，还有数字，将数字放在最前面，又该如何解决呢？","like_count":107,"discussions":[{"author":{"id":1380312,"avatar":"https://static001.geekbang.org/account/avatar/00/15/0f/d8/9286b272.jpg","nickname":"leetcode","note":"","ucode":"3B8C3668A0DE74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244780,"discussion_content":"课代表","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1587629873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1643806,"avatar":"https://static001.geekbang.org/account/avatar/00/19/15/1e/bd860187.jpg","nickname":"刘博","note":"","ucode":"1063396D64E783","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264543,"discussion_content":"其实我觉得老师文笔已经挺简洁的了，这就是为什么虽然你总结了，但是篇幅仍然较大。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1589332850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1986687,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/mOTyOP13icx9VfocebibnVrxtuEic8lXjNCb7pNTuibM6okPd57ONazfFeZrZUdaOxbRibg7yOoHNBygr9hJL71GSPw/132","nickname":"Alexander.H","note":"","ucode":"ABEDECA459BBC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1643806,"avatar":"https://static001.geekbang.org/account/avatar/00/19/15/1e/bd860187.jpg","nickname":"刘博","note":"","ucode":"1063396D64E783","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275220,"discussion_content":"说明干货比较多","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1590677324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":264543,"ip_address":""},"score":275220,"extra":""}]},{"author":{"id":1284647,"avatar":"https://static001.geekbang.org/account/avatar/00/13/9a/27/4b81bce5.jpg","nickname":"笑","note":"","ucode":"C91EAFAB88E5AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320325,"discussion_content":"其实不涉及比较操作是不准确的，比如桶排序里每个桶里要进行快排的话不就涉及比较了吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604320196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1494622,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ce/5e/b103d538.jpg","nickname":"大明猩","note":"","ucode":"61D330B42AE3C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382747,"discussion_content":"课代表","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625711177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2264092,"avatar":"https://static001.geekbang.org/account/avatar/00/22/8c/1c/8003fa15.jpg","nickname":"Rondo","note":"","ucode":"656EBD9FFBF186","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351550,"discussion_content":"文字纯享版","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614322406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052863,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bf/a3a3c6d0.jpg","nickname":"胜杰","note":"","ucode":"401806B1660784","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298443,"discussion_content":"计数排序这部分看了你的评论才明白，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597299761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34389,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1540138529,"is_pvip":false,"replies":[{"id":"12267","content":"1）这一节课的重点是应用场景<br>2）关于时间 空间 稳定性分析确实没有前面两节详细。不过通过前两节的学习 这三种排序算法的时间 空间 稳定性分析应该简单多了<br>3）你说的对 要用归并 <br>4）桶的大小设置的原则 权衡空间 时间复杂度 在你能接受的执行时间和内存占用下完成就可以 并没有一个标准答案<br>5）是的 要么用链表 要么用动态扩容的数组","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540173646,"ip_address":"","comment_id":34389,"utype":1}],"discussion_count":3,"race_medal":0,"score":"259238176289","product_id":100017301,"comment_content":"老师，个人感觉这节没有以往章节的细致了，拿桶排序来举例：<br>1、自问的三个问题只有了时间复杂度分析，少了是否为稳定排序算法和空间复杂度两个问题。<br>1.1）稳定性，若单个桶内用归并排序，则可保证桶排序的稳定性；若使用快排则无法保证稳定性。<br>1.2）空间复杂度，桶都是额外的存储空间，只有确定了单个桶的大小才能确定空间复杂度；n个元素假设分为m个桶，每个桶分配n&#47;m个元素的大小？个人觉得单个桶的大小不好确定，但是范围应该在n&#47;m~n之间<br>2、没有伪代码实现，自己在代码实现中遇到了一些问题<br>2.1）桶个数的设置依据什么原则？<br>2.2）桶大小的设置，让桶的能动扩容？<br>望回复，谢谢！","like_count":60,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427193,"discussion_content":"1）这一节课的重点是应用场景\n2）关于时间 空间 稳定性分析确实没有前面两节详细。不过通过前两节的学习 这三种排序算法的时间 空间 稳定性分析应该简单多了\n3）你说的对 要用归并 \n4）桶的大小设置的原则 权衡空间 时间复杂度 在你能接受的执行时间和内存占用下完成就可以 并没有一个标准答案\n5）是的 要么用链表 要么用动态扩容的数组","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1540173646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1692886,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKx6EdicYYuYK62r5aphMtYw6HskzPhbI3xRicxWticwKMhaO3Z63OYmr55FcjvNRClg93yhQ1U2BQXw/132","nickname":"chuck","note":"","ucode":"2229324EB1CD8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320906,"discussion_content":"本来计数排序，基数排序就是非常特殊的场景下使用的排序算法，这个排序算法使用的前提上，已经有了很多的前提和假设，或者可以说这种前提和假设就是直接导致了最好情况的排序时间复杂度了，没有最坏情况时间复杂度这么一说了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604502051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1686409,"avatar":"https://static001.geekbang.org/account/avatar/00/19/bb/89/c080540d.jpg","nickname":"红桃K-","note":"","ucode":"2B6B71EEF1F07F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":182651,"discussion_content":"没懂你空间复杂度是如何分析的，桶排序空间复杂度至少都是O(n)吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582445414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36465,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1106954,"ip_address":"","ucode":"A21E45F4AD1F74","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/0a/d3081e3d.jpg","comment_is_top":false,"comment_ctime":1541121472,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"246354257344","product_id":100017301,"comment_content":"我觉着可以把大小写字母根据对应的ASCII值转化成数字，然后遍历一遍就可以了吧。","like_count":57,"discussions":[{"author":{"id":1115041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","nickname":"Sid","note":"","ucode":"0461B574B2736B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31593,"discussion_content":"我第一反应也是这个，但其实不行。转成数字后，65～90为26个大写英文字母，97～122为26个小写英文字母，比方说，转换后出现了数字65，怎么断是数字65还是字母A。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1570938149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1514608,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1c/70/4e7cb85a.jpg","nickname":"neepoo","note":"","ucode":"55E9B083F2F3F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1115041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","nickname":"Sid","note":"","ucode":"0461B574B2736B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297669,"discussion_content":"是都转成ASCII码，数字也有对应的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597021999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":31593,"ip_address":""},"score":297669,"extra":""}]},{"author":{"id":2536563,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b4/73/48f6361b.jpg","nickname":"牧鱼羊","note":"","ucode":"C65615756785AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366650,"discussion_content":"读取两边分别输出小写和大写，空间使用很少，或者缓存两个依次输出\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618145182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1571460,"avatar":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","nickname":"Simple life","note":"","ucode":"1902D7F72FB43F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194544,"discussion_content":"题目的前提是不用排序算法，如果这样就涉及到排序了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583230660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1952958,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJE5Y62XOTFc7B25pqzmI6nqInMmVNSAic8Yg3hsDbgtVb3ovFib4wUUwOficbKkuicOGvCqm8r761Fw/132","nickname":"Geek_0de10a","note":"","ucode":"ECA4552867055C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1571460,"avatar":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","nickname":"Simple life","note":"","ucode":"1902D7F72FB43F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224758,"discussion_content":"如果连比较都不能用的话？那么根本无法做吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586329888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":194544,"ip_address":""},"score":224758,"extra":""},{"author":{"id":2818727,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/02/a7/a17dfba3.jpg","nickname":"Valentine","note":"","ucode":"971CA6B44A3191","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1952958,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJE5Y62XOTFc7B25pqzmI6nqInMmVNSAic8Yg3hsDbgtVb3ovFib4wUUwOficbKkuicOGvCqm8r761Fw/132","nickname":"Geek_0de10a","note":"","ucode":"ECA4552867055C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535266,"discussion_content":"桶排序考虑一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638380795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":224758,"ip_address":""},"score":535266,"extra":""}]},{"author":{"id":1661456,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","nickname":"Geek_b25f99","note":"","ucode":"6F7BEAB2C31528","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":16981,"discussion_content":"我也想到这个方法，因为需要新建数组保存结果，但是空间复杂度是O（n）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568939610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34039,"user_name":"seniusen","can_delete":false,"product_type":"c1","uid":1237719,"ip_address":"","ucode":"93F98AE01BA69F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/d7/7f95119d.jpg","comment_is_top":false,"comment_ctime":1539960882,"is_pvip":false,"replies":[{"id":"12199","content":"可以的 但就不是稳定排序算法了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540048167,"ip_address":"","comment_id":34039,"utype":1}],"discussion_count":4,"race_medal":0,"score":"169043685426","product_id":100017301,"comment_content":"计数排序中可以从头向后取数据吗？个人感觉似乎是一样的过程。","like_count":39,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427106,"discussion_content":"可以的 但就不是稳定排序算法了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540048167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165774,"discussion_content":"如果从头往后取，在定位r数组位置的时候需要r[c[a[i]]-c[a[i-1]]+1] = a[i]，意思是要定位a[i]在c数组区间的第一个位置，这样遍历的顺序和元素放置的顺序一致，故稳定了。从后往前取是定位最后一个位置，遍历顺序和放置顺序一致，故稳定。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581325555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1485820,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ab/fc/38ccd186.jpg","nickname":"123456","note":"","ucode":"9F7C4F3E4416BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":125886,"discussion_content":"相同大小的数据，从前往后每一位进行排序的时候都在同一个桶里面，都保持相同的先后顺序，为何最后会不稳定呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578494878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1888579,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/d1/43/8a2028df.jpg","nickname":"盐言","note":"","ucode":"00A025C1A6C66A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1485820,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ab/fc/38ccd186.jpg","nickname":"123456","note":"","ucode":"9F7C4F3E4416BE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329822,"discussion_content":"c数组里存的是小于等于该值的数量，作为r中的下标，先取出的放后面，所以要从右往左遍历a数组","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1606464502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":125886,"ip_address":""},"score":329822,"extra":""}]}]},{"had_liked":false,"id":36467,"user_name":"Ant","can_delete":false,"product_type":"c1","uid":1079563,"ip_address":"","ucode":"07E6374F91F61E","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/0b/4346a253.jpg","comment_is_top":false,"comment_ctime":1541121679,"is_pvip":false,"replies":[{"id":"12954","content":"如果之前没基础 想掌握牢固 起码看一个礼拜吧😄","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541123801,"ip_address":"","comment_id":36467,"utype":1}],"discussion_count":9,"race_medal":0,"score":"130390140559","product_id":100017301,"comment_content":"看了俩小时","like_count":30,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427877,"discussion_content":"如果之前没基础 想掌握牢固 起码看一个礼拜吧😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541123801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1966569,"avatar":"","nickname":"李远之","note":"","ucode":"5B781FD1C03F10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382184,"discussion_content":"看到老师说一个人礼拜我就放心了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1625466435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299347,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d3/93/c3fb8566.jpg","nickname":"ProcessIsTheKey","note":"","ucode":"BE02EFD75F7D98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552403,"discussion_content":"一个礼拜，顿时有信心了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645450375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1630053,"avatar":"https://static001.geekbang.org/account/avatar/00/18/df/65/e93cd7dc.jpg","nickname":"听风的歌","note":"","ucode":"51C2ADF6ECE781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544718,"discussion_content":"看了1小时，边看边自己想，接下来打算用代码实现一遍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641656012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2103542,"avatar":"https://static001.geekbang.org/account/avatar/00/20/18/f6/db57fef1.jpg","nickname":"WSZ","note":"","ucode":"AB092B48C52D47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408006,"discussion_content":"只要看这篇没超过一个礼拜，我都能接受自己","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635166599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2715388,"avatar":"","nickname":"Geek8535","note":"","ucode":"D1919541632C95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406596,"discussion_content":"看了2天","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634801956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","nickname":"o0oi1i","note":"","ucode":"D1F6AD4AAEAFBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247243,"discussion_content":"赞👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587806046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1308713,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f8/29/42939298.jpg","nickname":"金","note":"","ucode":"5856138D760C02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190886,"discussion_content":"看了一天，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582981325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69306,"discussion_content":"哈哈，同样没基础，边看边想，很费时间，然后自己想完，发现下面老师给答案了，em。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575280348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33835,"user_name":"伟忠","can_delete":false,"product_type":"c1","uid":1112089,"ip_address":"","ucode":"FE77CF20ED6065","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","comment_is_top":false,"comment_ctime":1539908963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"130388927843","product_id":100017301,"comment_content":"以前了解桶排序，以为计数排序就是桶排序的优化，很简单，没想到里面用&quot;顺序求和&quot;快速得出值对应的原排序对象位置(有多个相同值的时候是这个值在排序后的数组中的最后位置，用一次以后减少1)，这样就可以用对象属性来将对象进行排序了，这波操作666<br><br>基数排序用了排序算法的稳定性，排多次","like_count":30},{"had_liked":false,"id":33843,"user_name":"徐凯","can_delete":false,"product_type":"c1","uid":1244991,"ip_address":"","ucode":"12F82BA3649CD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/3f/bbb8a88c.jpg","comment_is_top":false,"comment_ctime":1539910069,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"117504027061","product_id":100017301,"comment_content":"包含数字的话。其实就是一个荷兰国旗问题 思路与第一题类似 一个指针控制左边界 一个指针控制右边界 左边界控制小写字母 右边界控制大写字母 另外一个指针扫描 遇到小写字母跳过 遇到大写字母则将右边界-1的元素交换过来 此时q指针应保持原位置不动 因为右边还未扫描过 交换过来的元素无法保证就是小写字母 ","like_count":27,"discussions":[{"author":{"id":1988075,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJX4ZU53F8hBHicctluqK6Ef3U0ib40bq1vFyAvqV0wu3GaPuWbj967OdMT7k0gl3OMxsfopvbk9veQ/132","nickname":"Geek_dd8b2b","note":"","ucode":"CBEF7C39075A96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285710,"discussion_content":"双指针，a指向当前的小写字母，b前进，遇到小写字母就与a的下一位交换，a前进一位，b继续前进。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592918701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177602,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f8/02/a02d127d.jpg","nickname":"Treasure","note":"","ucode":"4211ECEB347C3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301234,"discussion_content":"荷兰国旗问题是基于比较的，这里要求是不用排序算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598449194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1716067,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","nickname":"梨子苹果","note":"","ucode":"3666813FEE31D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60403,"discussion_content":"q指针是啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574730551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1047685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/85/976cb865.jpg","nickname":"青柠","note":"","ucode":"11409980EF3A38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1716067,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","nickname":"梨子苹果","note":"","ucode":"3666813FEE31D3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62468,"discussion_content":"“另外一个指针扫描”提到的那个指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574845590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":60403,"ip_address":""},"score":62468,"extra":""}]}]},{"had_liked":false,"id":48674,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1544512679,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"91738825895","product_id":100017301,"comment_content":"桶排序------&gt;分桶+快速排序--&gt;取出结果<br>计数排序------&gt;分桶+计数--&gt;<br>先统计计数，再取出来，实现排序<br>基数排序------&gt;在每个位上桶排序--&gt;","like_count":21,"discussions":[{"author":{"id":1994946,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/70/c2/d3b890ec.jpg","nickname":"刘晓冬","note":"","ucode":"0AC9F3B87FB9C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299287,"discussion_content":"桶排序------>分区间桶+快速排序（归并排序（稳定性））-->取出结果\n计数排序------>分单个桶+计数-->\n先统计计数，再取出来，实现排序\n基数排序------>在每个位上桶排序-->","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597642855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1291529,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b5/09/874f7275.jpg","nickname":"G~旖旎中子","note":"","ucode":"9E15D7CF3AC78D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":35843,"discussion_content":"总结得不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571309052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72575,"user_name":"林贻民","can_delete":false,"product_type":"c1","uid":1202213,"ip_address":"","ucode":"F7185C61CAE4D0","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/25/2088864b.jpg","comment_is_top":false,"comment_ctime":1551670237,"is_pvip":false,"replies":[{"id":"26801","content":"👍 你说的没错，在实践中，桶排序可能更实用些：）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1551925193,"ip_address":"","comment_id":72575,"utype":1}],"discussion_count":6,"race_medal":0,"score":"74566114269","product_id":100017301,"comment_content":"老师你好,觉得计数排序可以完全被桶排序取代,由于计数排序对数据的要求是范围不大,不妨设为k,那完全可以分为k个桶,遍历一遍待排序列,将对应元素放入相关桶中,最后在按顺序遍历一次,即可得到顺序序列.在时间复杂度,空间复杂度上与计数排序一样,但是在代码编写上要比计数排序要简单的多.","like_count":17,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441643,"discussion_content":"👍 你说的没错，在实践中，桶排序可能更实用些：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551925193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2680235,"avatar":"https://static001.geekbang.org/account/avatar/00/28/e5/ab/cece3199.jpg","nickname":"jason","note":"","ucode":"0886E1D88BB7CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532197,"discussion_content":"计数排序不更节省空间吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637553121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2162521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MaX06SRk19zM2lAaymYylpXD6LMtIPFlDyxZKgRhmZCjhNE4nIdDGBmh08razhebVCgAv54xialYBBIIwmleBew/132","nickname":"Geek_6d1382","note":"","ucode":"B61E65CFEB684F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385118,"discussion_content":"我觉得把，桶排序时间复杂度要O(n),你的桶m 和 数据量n要无限接近啊，计数就没这个限制了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626884880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2145095,"avatar":"https://static001.geekbang.org/account/avatar/00/20/bb/47/b60ae3eb.jpg","nickname":"你好，阳光","note":"","ucode":"1A2F487C57F7D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2162521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MaX06SRk19zM2lAaymYylpXD6LMtIPFlDyxZKgRhmZCjhNE4nIdDGBmh08razhebVCgAv54xialYBBIIwmleBew/132","nickname":"Geek_6d1382","note":"","ucode":"B61E65CFEB684F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543504,"discussion_content":"桶范围粒度为1的桶排序不需要m接近n，时间复杂度就是O(n)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641184889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":385118,"ip_address":""},"score":543504,"extra":""}]},{"author":{"id":1692886,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKx6EdicYYuYK62r5aphMtYw6HskzPhbI3xRicxWticwKMhaO3Z63OYmr55FcjvNRClg93yhQ1U2BQXw/132","nickname":"chuck","note":"","ucode":"2229324EB1CD8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320910,"discussion_content":"老师说了计数排序是特殊的桶排序，在单纯的桶排序中，单个桶中元素的颗粒度可以比较大，而计数排序的时候，单个桶中元素都是一样的了。\n桶排序和计数排序都要求数据处于一个范围不太大的空间内。\n使用桶排序的时候，最好要考虑到每个桶内的元素个数是相同的，也就是每个桶内的元素分布较为均匀。而计数排序不存在啥均不均匀了，比较一个桶内存的都是相同数值元素值的总数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604502385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202325,"avatar":"https://static001.geekbang.org/account/avatar/00/12/58/95/640b6465.jpg","nickname":"fmouse","note":"","ucode":"9A8858CFFAB858","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":253477,"discussion_content":"代码上简单并且好理解。但是话说回来，桶排序和计数排序还有什么区别的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588237661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46158,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1543857368,"is_pvip":false,"replies":[{"id":"16523","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543887608,"ip_address":"","comment_id":46158,"utype":1}],"discussion_count":4,"race_medal":0,"score":"74558301400","product_id":100017301,"comment_content":"哈哈，老师，我把你的计数排序的代码关键代码处优化了下，并且加了中文注释，应该可以很好理解了。<br>public class CountingSort {<br>    &#47;**<br>     * 计数排序<br>     *<br>     * @param arr 要排序的数组大小<br>     * @param n   数组元素个数<br>     *&#47;<br>    public static void sort(int[] arr, int n) {<br>        if (n &lt;= 1) {<br>            return;<br>        }<br><br>        &#47;&#47;默认数组最大的元素为数组第一个元素<br>        int max = arr[0];<br>        &#47;&#47;遍历数组的所有的元素，找到最大的元素<br>        for (int i = 1; i &lt; n; i++) {<br>            &#47;&#47;若后面的元素大于指定的数组元素，则把元素进行交换<br>            if (arr[i] &gt; max) {<br>                max = arr[i];<br>            }<br>        }<br><br>        &#47;&#47;申请一个计数数组，下标从0~max。<br>        int[] c = new int[max + 1];<br><br>        &#47;&#47;遍历数组，将每个元素的个数放入到计数数组中，比如分数为0的元素，在c[0]就累加1，依次类推<br>        for (int i = 0; i &lt; n; i++) {<br>            c[arr[i]]++;<br>        }<br><br>        &#47;&#47;开始重新整理c[]数组，将c[]数组顺序求和，比如分数0的个数1，分数为1的个数为3。那么重新整理后，分数&lt;=0的为1，分数&lt;=1人数诶1+3=4个，因为包含了&lt;=0的个数，依次类推<br>        &#47;&#47;所以终止条件为i&lt;=max<br>        for (int i = 1; i &lt;= max; i++) {<br>            c[i] = c[i] + c[i - 1];<br>        }<br><br>        &#47;&#47;这时候开始进行排序，创建一个跟要排序的数组一样大小的数据空间<br>        int[] temp = new int[n];<br><br>        &#47;&#47;开始循环需要排序的数据<br>        for (int i = 0; i &lt; n; i++) {<br>            &#47;&#47;计算出需要往temp临时数组哪个索引位置存放arr[i]的值。<br>            &#47;&#47;根据原始数组的值找到计数数组的对应值的计数个数，得到c[arr[i]]的值，也就是temp数组从0开始，所以需要减一<br>            int index = c[arr[i]] - 1;<br>            temp[index] = arr[i];<br>            &#47;&#47;每次循环，计数数组的元素值减一，因为数组放到了temp数组中<br>            c[arr[i]]--;<br>        }<br><br>        &#47;&#47;重新赋值<br>        for (int i = 0; i &lt; n; i++) {<br>            arr[i] = temp[i];<br>        }<br>    }<br>}<br>","like_count":17,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431357,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543887608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1299347,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d3/93/c3fb8566.jpg","nickname":"ProcessIsTheKey","note":"","ucode":"BE02EFD75F7D98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552404,"discussion_content":"的确不是稳定排序了，从头遍历的，还是老师的代码更优一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645450618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1409180,"avatar":"https://static001.geekbang.org/account/avatar/00/15/80/9c/2dead628.jpg","nickname":"依依","note":"","ucode":"248323E961BF81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":231672,"discussion_content":"我怎么觉得你的算法不是稳定排序了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586826194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/8d/8601f035.jpg","nickname":"淞淞同学","note":"","ucode":"529A326B898008","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":84046,"discussion_content":"这叫优化吗.....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576483580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50589,"user_name":"叶明","can_delete":false,"product_type":"c1","uid":1274237,"ip_address":"","ucode":"E9BF73B2C443F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/7d/43c27c12.jpg","comment_is_top":false,"comment_ctime":1545013306,"is_pvip":false,"replies":[{"id":"18570","content":"如果你排序的不是单纯的数字 而是一个对象呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545185912,"ip_address":"","comment_id":50589,"utype":1}],"discussion_count":12,"race_medal":0,"score":"70264490042","product_id":100017301,"comment_content":"老师，你好，有个疑问：<br>在计数排序中，第一次得到数组int[] c = new int[]{2,0,2,3,0,1}之后，<br>能不能直接遍历数组c，<br><br>int j=0;<br>for(int i=0; i&lt;c.length; i++){<br>    int count = c[i];<br>    for(int k=0;k&lt;count;k++){<br>        a[j++] = i;<br>    }<br>}<br>这样不是也对所有的分数进行排序了吗？这个不知道可以不？第一次发言，希望能回复下","like_count":16,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433032,"discussion_content":"如果你排序的不是单纯的数字 而是一个对象呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545185912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238585,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e6/39/1dad4153.jpg","nickname":"niexia","note":"","ucode":"FB95E807E0B1BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38737,"discussion_content":"排序的是整数那是没有问题的，但是比如排序的是一个对象，还是以考生为例，每个考生包含多个信息，例如: {score: &#39;&#39;, name: &#39;&#39;}\n所以这个 8 个考生表示为：\nA[8] = [\n  {score: 2, name: &#39;x&#39;},\n  {score: 5, name: &#39;x&#39;},\n  {score: 3, name: &#39;x&#39;},\n  {score: 0, name: &#39;x&#39;},\n  {score: 2, name: &#39;x&#39;},\n  {score: 3, name: &#39;x&#39;},\n  {score: 0, name: &#39;x&#39;},\n  {score: 3, name: &#39;x&#39;}\n]\n这个时候得到的 C[6] 是一样的：\n\nC[6] = [2, 0, 2, 3, 0, 1]\n\n按照这种方法是不行的，因为 i 对应的是分数，但是不是学生。\n\n\nfor (int k = 0; k < count; k++) {\n  a[j++] = i;\n}\n\n那么每次都要根据 i 遍历去找到对应的学生，需要找到这个分数的所有学生 d。那就变成：\nvar count = c[i]\nvar d = A.filter(item => item.score === i)\nfor (var k = 0; k < count; k++) {\n  a[j++] = d[k];\n}\n\n这个时间复杂度更高了。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1571826833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1238585,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e6/39/1dad4153.jpg","nickname":"niexia","note":"","ucode":"FB95E807E0B1BF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580865,"discussion_content":"那么问题来了，老师的那个解法，就没有这个问题了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658390874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":38737,"ip_address":""},"score":580865,"extra":""}]},{"author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58257,"discussion_content":"我也想到你一样的方法，认为只需要遍历数组c,但是自己在试着把老师的思路自己用代码码一边的时候，突然明白了老师说非数字而是对象排序的意思了。如果是对象数组的话，计数数组c 中存储的值只是对用用来排序的某个字段的值的一个统计，比如说，是一个订单数字，c中存储的值可能就只是订单中金额字段的计数了，我们根据金额字段并不能找到对应的订单对象，还是要根据原始订单数组遍历来排序。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1574662743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580862,"discussion_content":"我也有这个疑问。但是你们说的单纯的数字和对象差别，我也没能从作者的那种排序中看出来对对象类型的有什么优势，还不是需要跟进对象的某一个属性来判断吗？想不通","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658390735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010957,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6d/0d/e3fa096f.jpg","nickname":"拓","note":"","ucode":"AC1940ECC25436","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76243,"discussion_content":"反而没看懂这位网友的。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575813994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1304236,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e6/ac/5b99aa18.jpg","nickname":"小k","note":"","ucode":"AE0C5ADEB489F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1952,"discussion_content":"单纯的数字和对象区别在哪呀老师，我想到的也是上面这位网友的，对象不能用这个吗老师？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563117118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1631591,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e5/67/55aab38b.jpg","nickname":"BAKEZQ","note":"","ucode":"87C7E0E0F9422F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1304236,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e6/ac/5b99aa18.jpg","nickname":"小k","note":"","ucode":"AE0C5ADEB489F5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":152784,"discussion_content":"只有对象稳定才有意义，一个int稳不稳定没任何意义，总之目的两相同值的对象排序后保原序","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579981745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1952,"ip_address":""},"score":152784,"extra":""},{"author":{"id":1652836,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epKJlW7sqts2ZbPuhMbseTAdvHWnrc4ficAeSZyKibkvn6qyxflPrkKKU3mH6XCNmYvDg11tB6y0pxg/132","nickname":"pc","note":"","ucode":"1AD538B9A900B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1631591,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e5/67/55aab38b.jpg","nickname":"BAKEZQ","note":"","ucode":"87C7E0E0F9422F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232378,"discussion_content":"可别再说话了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586867954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":152784,"ip_address":""},"score":232378,"extra":""},{"author":{"id":1061748,"avatar":"https://static001.geekbang.org/account/avatar/00/10/33/74/d9d143fa.jpg","nickname":"silentyears","note":"","ucode":"6E137BFEB874CA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1304236,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e6/ac/5b99aa18.jpg","nickname":"小k","note":"","ucode":"AE0C5ADEB489F5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245132,"discussion_content":"需要遍历原数组a，当时比较对象时","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587651166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1952,"ip_address":""},"score":245132,"extra":""}]}]},{"had_liked":false,"id":109501,"user_name":"邓海涵","can_delete":false,"product_type":"c1","uid":1473900,"ip_address":"","ucode":"DCCA91C3B4CBAE","user_header":"https://static001.geekbang.org/account/avatar/00/16/7d/6c/e7163342.jpg","comment_is_top":false,"comment_ctime":1562046125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57396620973","product_id":100017301,"comment_content":"看到有些朋友的留言是在地铁上上下班拿出来看看。有些朋友觉得自己掉队了。这些东西思想之精妙有趣，岂是一天半天能够掌握~给自己多一点耐心，多看几遍，换个安静的环境静下心来慢慢揣摩，这些东西总会内化到你的思想里的。","like_count":13},{"had_liked":false,"id":35954,"user_name":"coulson","can_delete":false,"product_type":"c1","uid":1125035,"ip_address":"","ucode":"ADBC6AEED866FC","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/ab/6b2475e9.jpg","comment_is_top":false,"comment_ctime":1540870942,"is_pvip":false,"replies":[{"id":"12828","content":"多看几遍 确实不好理解","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540950410,"ip_address":"","comment_id":35954,"utype":1}],"discussion_count":8,"race_medal":0,"score":"57375445790","product_id":100017301,"comment_content":"老师，你讲的一会数组C,一会数组R，一会数组A，已经被绕晕了，咋办？跟不上节奏了","like_count":13,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427718,"discussion_content":"多看几遍 确实不好理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540950410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039902,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/de/1e/4e3d207f.jpg","nickname":"Shaohong","note":"","ucode":"CFC342E182357B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":115244,"discussion_content":"A: Array 原始待排序数组\nC: Counter 计数数组\nR: Result 结果数组\n名字应该是这么来的。读算法的时候就不会太晕了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578004156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1039902,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/de/1e/4e3d207f.jpg","nickname":"Shaohong","note":"","ucode":"CFC342E182357B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":178676,"discussion_content":"不错.老师应该有个前提.不然理解费时间在这种上面.","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582188108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":115244,"ip_address":""},"score":178676,"extra":""}]},{"author":{"id":1281118,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8c/5e/750ef462.jpg","nickname":"飞翔神话","note":"","ucode":"ADBBF299C3CD04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":16285,"discussion_content":"哈哈，我也有同感，可以拿纸和笔记记下试试","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568881991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1692886,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKx6EdicYYuYK62r5aphMtYw6HskzPhbI3xRicxWticwKMhaO3Z63OYmr55FcjvNRClg93yhQ1U2BQXw/132","nickname":"chuck","note":"","ucode":"2229324EB1CD8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320908,"discussion_content":"A是原始数组，C是计数的数组，R是最终排好序的数组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604502113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1199969,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4f/61/00083e41.jpg","nickname":"小白","note":"","ucode":"7ACE14C0C4AE61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287585,"discussion_content":"建议可以说个前提，不然之前没看过这些算法的人很难理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593486097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1442605,"avatar":"https://static001.geekbang.org/account/avatar/00/16/03/2d/404627dc.jpg","nickname":"Anryg Zhun","note":"","ucode":"76DF8560BA9D14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201058,"discussion_content":"动手写 其义自见","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583757598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58107,"discussion_content":"计数排序那个图我对着老师的代码，盯了半小时。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574652388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":41765,"user_name":"ning~","can_delete":false,"product_type":"c1","uid":1108374,"ip_address":"","ucode":"0ED5894F05BF90","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/96/38f54972.jpg","comment_is_top":false,"comment_ctime":1542849822,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"53082457374","product_id":100017301,"comment_content":"https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;KU-AUGOnLeRtE_hivl2uSA<br><br>这是一个仁兄写的计数排序，感觉是不是理解简单点？","like_count":12,"discussions":[{"author":{"id":1143980,"avatar":"https://static001.geekbang.org/account/avatar/00/11/74/ac/b9c2e028.jpg","nickname":"塘桥挨踢男","note":"","ucode":"9D47449E2EE0EF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53727,"discussion_content":"很多时候我们是根据一行数据中的某个key来排序，最终需要的是排序后的所有数据，而不仅仅是排序后的key","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574212058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2659807,"avatar":"https://static001.geekbang.org/account/avatar/00/28/95/df/a69492c2.jpg","nickname":"charles.ky","note":"","ucode":"F04D82B9B772E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536913,"discussion_content":"面试别说话，大眼瞪小眼系列……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638890928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1944895,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/ad/3f/b5eabecf.jpg","nickname":"王川","note":"","ucode":"AED1548E793EB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364002,"discussion_content":"我看懂了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617347052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014550,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/16/ca250e8c.jpg","nickname":"王木公","note":"","ucode":"F049AEBFA0338D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265827,"discussion_content":"这种简单的计数排序没有考虑排序算法稳定性问题，本文中复杂的计数排序是考虑了的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589443175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36783,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1541326593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48785966849","product_id":100017301,"comment_content":"桶排序: <br>1. 原理: 根据数据范围，分成若干个数据段的桶，通过遍历讲数据放到对应的桶中。每个桶里都进行快排或归并。<br>2. 时间复杂度: 最好o(n), 最坏o(nlogn), 平均o(n)，一般桶分的越细越多复杂度就会最好。<br>3. 内存消耗: o(n)<br>4. 稳定性: 取决于每个桶的排序方式，快排就不稳定，归并就稳定。<br>5. 适用场景: 数据范围不大的。内存吃紧的，如磁盘的读写可以分成多个小文件并对每个小文件排序，然后直接写到大文件里，这个时候内存消耗不再是o(n)了。<br><br>计数排序:<br>1. 原理: 特殊的桶排序，即每个下标代表一个数据范围，其值就是这个数据的个数。<br>2. 时间复杂度: 都是o(n)<br>3. 内存消耗: o(n)<br>4. 稳定性: 稳定，只要整理最后结果时从后开始遍历即可。<br>5. 适用场景: 数据范围不大的，如年龄排序。<br><br>基数排序: <br>1. 原理: 对数据的每一位进行桶排序或计数排序，对每位排序后结果就是有序的。<br>2. 时间复杂度: 最好o(n), 最坏o(nlogn), 平均o(n)<br>3. 内存消耗: o(n)<br>4. 稳定性: 稳定。否则就排不成的。<br>5. 适用场景: 是在桶排序和计数排序基础上进行的，保证每位数据范围不大，并且位数也不是很多。<br>","like_count":11},{"had_liked":false,"id":134829,"user_name":"Geek_b25f99","can_delete":false,"product_type":"c1","uid":1661456,"ip_address":"","ucode":"6F7BEAB2C31528","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","comment_is_top":false,"comment_ctime":1568940781,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"35928679149","product_id":100017301,"comment_content":"看到留言很多人问为啥从尾部取数？原因是数组保存的是次数累加结果（是从左开始累加的），也就是原数据的位置累加，现在要恢复到结果当然需要从尾部退格，这样才能位置对应，否则相等的数据时位置恰恰都是反着，比如原数组有两个2，累加结果是位置是6和7，你若是从左边取数，这两个2最后放的位置不就反了吗","like_count":8,"discussions":[{"author":{"id":1115041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","nickname":"Sid","note":"","ucode":"0461B574B2736B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31607,"discussion_content":"如果就这么反着来，也能保证每次排序的结果是一致的。不是稳定排序会有什么问题吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570939468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1625589,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cd/f5/49e65d7a.jpg","nickname":"小鲨鱼。","note":"","ucode":"E0607C8C0F13B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1115041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","nickname":"Sid","note":"","ucode":"0461B574B2736B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63339,"discussion_content":"当然，假如考试中按学生总分排名，总分相同的取数学成绩最高的为前一名，在已经按照数学成绩排名的情况下，如果用了不稳定排序，不是打乱了原本已经排序好数据的顺序吗。其实老师说的基数排序要使用稳定排序算法也是一个意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574869711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":31607,"ip_address":""},"score":63339,"extra":""},{"author":{"id":1211359,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/df/876dd9cc.jpg","nickname":"kings","note":"","ucode":"D478306EBF582E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1115041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","nickname":"Sid","note":"","ucode":"0461B574B2736B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77637,"discussion_content":"逆序加，从头排也可以٩̋(๑˃́ꇴ˂̀๑)可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575907196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":31607,"ip_address":""},"score":77637,"extra":""}]}]},{"had_liked":false,"id":37123,"user_name":"烈冬冰夏","can_delete":false,"product_type":"c1","uid":1060113,"ip_address":"","ucode":"F2875FC596D4FA","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/11/0ecbe9ea.jpg","comment_is_top":false,"comment_ctime":1541465122,"is_pvip":false,"replies":[{"id":"13240","content":"每一位排序用的是O（n）时间复杂度的桶排序或者计数排序","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541467634,"ip_address":"","comment_id":37123,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35901203490","product_id":100017301,"comment_content":"老师 您好。您说的手机号码排序伪代码向下面这样<br>sort(array,comparator)&#47;&#47;对比第11位<br>sort(array,comparator)&#47;&#47;对比第10位<br>sort(array,comparator)&#47;&#47;对比第9位<br>sort(array,comparator)&#47;&#47;对比第8位<br>sort(array,comparator)&#47;&#47;对比第7位<br>sort(array,comparator)&#47;&#47;对比第6位<br>sort(array,comparator)&#47;&#47;对比第5位<br>sort(array,comparator)&#47;&#47;对比第4位<br>sort(array,comparator)&#47;&#47;对比第3位<br>sort(array,comparator)&#47;&#47;对比第2位<br>sort(array,comparator)&#47;&#47;对比第1位<br><br>我不太明白这和直接对比手机号码大小有什么区别<br>sort(array,comparator)&#47;&#47;对比手机号码","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428183,"discussion_content":"每一位排序用的是O（n）时间复杂度的桶排序或者计数排序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541467634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2322244,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/mxxEd3scP7RUgoh9oXWqUZDU5fIabDIh0ALAcvGZy4GXJYiazicd2ARGodujqU77fbGHatPyZMdVSQ04Y0qNDWaA/132","nickname":"zzzzzc","note":"","ucode":"9F58C0BD30E300","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354838,"discussion_content":"是排序，不只是比大小，还要移动，比如冒泡排序，插入排序，选择排序等，这些时间复杂度都是O(n^2)","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1615348027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33992,"user_name":"Kudo","can_delete":false,"product_type":"c1","uid":1036948,"ip_address":"","ucode":"21965914B72AEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/94/8bd217f1.jpg","comment_is_top":false,"comment_ctime":1539940754,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"31604711826","product_id":100017301,"comment_content":"关于思考题：<br>如果分为三个桶（大写、小写、数字），那么时间复杂度应该不会达到O(n)，因为O(nlog(n&#47;m))中的m只有3，时间复杂度会退化到O(nlogn)。如果要达到O(n)的复杂度，我认为应该使用计数排序，将A-Za-z0-9作为62个桶，这样遍历一次就可以完成排序。（如果上述理解有偏差，请作者务必指出，多谢！）","like_count":7,"discussions":[{"author":{"id":1596047,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIlZ9AObDSXrfSEibY94uyQvMQ4tOvbb7iaQH9H7QQ6ibNaqFKUGq1TboaFpBSLuP0MCcSXvmqHNg0IA/132","nickname":"Geek_8c5f9c","note":"","ucode":"70CD441EAF490F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6142,"discussion_content":"桶内无序，所以是O(n)","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1566723055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2449060,"avatar":"https://static001.geekbang.org/account/avatar/00/25/5e/a4/d48b8298.jpg","nickname":"Geek_sz","note":"","ucode":"72E86D7D6554CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587189,"discussion_content":"死学第一名","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662879079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69326,"discussion_content":"em，前面桶排序 是理想的平均划分为 m个桶。。且桶内无序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575281049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33838,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1539909188,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"31604680260","product_id":100017301,"comment_content":"思考题，快排划分的思想分成两半，分成三份(双轴)，只不过固定选取一个合适的pivot就ok。","like_count":7},{"had_liked":false,"id":33820,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1539908046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31604679118","product_id":100017301,"comment_content":"根据acill码的天然顺序，分三个桶就可以把","like_count":7},{"had_liked":false,"id":163941,"user_name":"万历十五年","can_delete":false,"product_type":"c1","uid":1122150,"ip_address":"","ucode":"3D8CF5DF847AE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/66/59e0647a.jpg","comment_is_top":false,"comment_ctime":1576831775,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27346635551","product_id":100017301,"comment_content":"1.为什么快排和归并排序时间效率好于插入和选择排序？<br>因为快排和归并排序每次遍历都把所有待排数据进行一次几乎均匀分类，产生若干个有序类，如此这样的迭代或递归，这样的遍历，时间效率高；而插入和选择排序每次遍历所有待排数据只能从无序数组中产生一个有效数据，这样的遍历，时间效率低<br>2.为什么桶排序时间效率好于快排和归并？<br>因为桶本身有序，一次遍历扫描就把所有待排数据直接分成有序类<br>","like_count":6,"discussions":[{"author":{"id":1202325,"avatar":"https://static001.geekbang.org/account/avatar/00/12/58/95/640b6465.jpg","nickname":"fmouse","note":"","ucode":"9A8858CFFAB858","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":253532,"discussion_content":"感觉都是分布式计算的思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588241252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33816,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1539907760,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27309711536","product_id":100017301,"comment_content":"学了算法以后，很容易把简单问题搞复杂😃","like_count":6,"discussions":[{"author":{"id":1683130,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","nickname":"乾坤瞬间","note":"","ucode":"15BDCF29CBF8EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44737,"discussion_content":"应该是还原看起简单地问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572963419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134901,"user_name":"Geek_b25f99","can_delete":false,"product_type":"c1","uid":1661456,"ip_address":"","ucode":"6F7BEAB2C31528","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","comment_is_top":false,"comment_ctime":1568948802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23043785282","product_id":100017301,"comment_content":"需要纠正一下老师的问题，经过查看资料，发现基数排序确实存在两种方式，MSD从高位开始进行排序，LSD从低位开始排序，排序过程中每个桶都是采用的队列的思想先进先出，所以都是稳定算法，只是在代码实现的时候MSD比较复杂，在从高位排序时候，高位相同时，再将他们的低位进行排序。","like_count":5},{"had_liked":false,"id":33927,"user_name":"kaka","can_delete":false,"product_type":"c1","uid":1182770,"ip_address":"","ucode":"AD6741BE18D832","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/32/dff3eb37.jpg","comment_is_top":false,"comment_ctime":1539919459,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18719788643","product_id":100017301,"comment_content":"感谢 @徐凯，搜索了下荷兰国旗问题，按照该思路写了份 C++ 代码<br><br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br><br>int main(int argc, char **argv) {<br>    vector&lt;char&gt; test = {&#39;D&#39;, &#39;a&#39;, &#39;3&#39;, &#39;F&#39;, &#39;1&#39;, &#39;B&#39;, &#39;c&#39;, &#39;A&#39;, &#39;z&#39;, &#39;2&#39;};<br><br>    int lower_letter = -1, upper_letter = test.size() - 1, current = 0;<br>    while (test[upper_letter] &gt;= &#39;A&#39; &amp;&amp; test[upper_letter] &lt;= &#39;Z&#39;) upper_letter--;<br>    while (current &lt;= upper_letter) {<br>        if (test[current] &gt;= &#39;0&#39; &amp;&amp; test[current] &lt;= &#39;9&#39;) {<br>            current++;<br>        }<br>        else if (test[current] &gt;= &#39;a&#39; &amp;&amp; test[current] &lt;= &#39;z&#39;) {<br>            swap(test[current], test[lower_letter + 1]);<br>            current++;<br>            lower_letter++;<br>        } else {<br>            swap(test[current], test[upper_letter]);<br>            while (test[upper_letter] &gt;= &#39;A&#39; &amp;&amp; test[upper_letter] &lt;= &#39;Z&#39;) upper_letter--;<br>        }<br>    }<br><br>    for (auto c : test) {<br>        cout &lt;&lt; c &lt;&lt; &quot; &quot;;<br>    }<br>    cout &lt;&lt; endl;<br>    return 0;<br>}","like_count":4,"discussions":[{"author":{"id":1716067,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","nickname":"梨子苹果","note":"","ucode":"3666813FEE31D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60448,"discussion_content":"#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main(int argc, char **argv) {\n    vector<char> test = {&#39;D&#39;, &#39;a&#39;, &#39;3&#39;, &#39;F&#39;, &#39;1&#39;, &#39;B&#39;, &#39;c&#39;, &#39;A&#39;, &#39;z&#39;, &#39;2&#39;};\n\n    int lower_letter = -1, upper_letter = test.size() - 1, current = 0;\n    while (test[upper_letter] >= &#39;A&#39; &amp;&amp; test[upper_letter] <= &#39;Z&#39;) upper_letter--;\n    while (current <= upper_letter) {\n        if (test[current] >= &#39;0&#39; &amp;&amp; test[current] <= &#39;9&#39;) {\n            current++;\n        }\n        else if (test[current] >= &#39;a&#39; &amp;&amp; test[current] <= &#39;z&#39;) {\n            swap(test[current], test[lower_letter + 1]);\n            current++;\n            lower_letter++;\n        } else {\n            swap(test[current], test[upper_letter]);\n            while (test[upper_letter] >= &#39;A&#39; &amp;&amp; test[upper_letter] <= &#39;Z&#39;) upper_letter--;\n        }\n    }\n\n    for (auto c : test) {\n        cout << c << &#34; &#34;;\n    }\n    cout << endl;\n    return 0;\n}\n\n这位kaka兄弟讲的比较好，其实就是三个指针，两个用于控制边界，一个用于扫描数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574731955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1716067,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","nickname":"梨子苹果","note":"","ucode":"3666813FEE31D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60431,"discussion_content":"最主要的是，如果current是大写字母，交换后current不能变，因为这时候交换过来的也可能是小写字母","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574731629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1716067,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","nickname":"梨子苹果","note":"","ucode":"3666813FEE31D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60423,"discussion_content":"赞，其实就是定位三个指针，a b c ，分别控制数字/小写字母，小写字母/大写字母边界，此外每次都有一个指针在扫描数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574731351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306183,"user_name":"陈威洋","can_delete":false,"product_type":"c1","uid":2264679,"ip_address":"","ucode":"DCF84B4D3A7354","user_header":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","comment_is_top":false,"comment_ctime":1628423891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14513325779","product_id":100017301,"comment_content":"牛B的人写牛B的代码，我非常喜欢这篇，尤其是计数排序的技巧，对于范围不大的排序需求，这个技巧是非常好用，也很喜欢争哥写的计数排序的代码，我抄了几遍，越来越喜欢，感觉能够写这样的代码，而感到无比荣幸！~","like_count":3},{"had_liked":false,"id":194877,"user_name":"励研冰","can_delete":false,"product_type":"c1","uid":1106394,"ip_address":"","ucode":"FCBC8266018FA0","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/da/d7f591a7.jpg","comment_is_top":false,"comment_ctime":1585114045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14470015933","product_id":100017301,"comment_content":"之前看数据结构仅仅是为了应付面试，等面试结束了基本就忘了，因为根本就不知道为什么会有这样那样的数据结构，又能解决什么样的问题！最近静下心来学习数据结构收益良多，慢慢的有点喜欢上这东西","like_count":3},{"had_liked":false,"id":131664,"user_name":"Geek_d4f974","can_delete":false,"product_type":"c1","uid":1591783,"ip_address":"","ucode":"F91D0CD09CB13E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/NTSD503ibERiba4wcsoiaezDrjLMOVVlAlliagHc6ic3icWFfuzaFWaHwuULQDo22mPiabicImFTB7ial82OuBD96bl4RTQ/132","comment_is_top":false,"comment_ctime":1567840680,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14452742568","product_id":100017301,"comment_content":"设置两个指针i和j，首先两个指针都指向开头，若i指向的是大写字母，j往后移动，寻找小写字母，发现，则交换i和j的元素。i向后移动一格，依此类推","like_count":3,"discussions":[{"author":{"id":1716067,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","nickname":"梨子苹果","note":"","ucode":"3666813FEE31D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":59778,"discussion_content":"这个明白了和快排差不多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574693968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58670,"user_name":"小志","can_delete":false,"product_type":"c1","uid":1037841,"ip_address":"","ucode":"11C9EAB9746D8B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d6/11/808eb5f8.jpg","comment_is_top":false,"comment_ctime":1547171656,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14432073544","product_id":100017301,"comment_content":"课后思考：我觉得一种方法是，不用借鉴本章介绍的算法。具体做法：弄两个数组 A 和 B，遍历原始数据，将小写字母放入 A 中，大写字母放入B中，然后将A B 合并；","like_count":3,"discussions":[{"author":{"id":1353786,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a8/3a/db0af289.jpg","nickname":"Yvan","note":"","ucode":"665FB1C526807C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203825,"discussion_content":"这不就是2个桶吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584087642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48808,"user_name":"想当上帝的司机","can_delete":false,"product_type":"c1","uid":1239378,"ip_address":"","ucode":"D8251388854911","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/52/f07e9001.jpg","comment_is_top":false,"comment_ctime":1544540342,"is_pvip":false,"replies":[{"id":"17738","content":"从第一位往后算法不正确 你可以自己写写代码或者例子看下","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544667061,"ip_address":"","comment_id":48808,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14429442230","product_id":100017301,"comment_content":"基数排序为什么最后一位往前而不是从第一位往后","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432362,"discussion_content":"从第一位往后算法不正确 你可以自己写写代码或者例子看下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544667061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39388,"discussion_content":"如果从第一位开始的话，虽然第一位排序已经有序了但是第二位排序的时候有肯能就把第一位已经排好的序给打乱了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571920807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121677,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/8d/9717e593.jpg","nickname":"一枝梅","note":"","ucode":"7DCE43B638EA6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4084,"discussion_content":"基数排序要从最低有效位开始。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565099623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35656,"user_name":"李靖峰","can_delete":false,"product_type":"c1","uid":1139247,"ip_address":"","ucode":"AA4DE3E91A1FFA","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/2f/6fe8ee9e.jpg","comment_is_top":false,"comment_ctime":1540732055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14425633943","product_id":100017301,"comment_content":"遍历，遇到小写并且上一个不是小写扔前面，遇到数字继续遍历，遇到大写扔后面。序列最好用链表","like_count":3},{"had_liked":false,"id":34413,"user_name":"程序员大天地","can_delete":false,"product_type":"c1","uid":1249001,"ip_address":"","ucode":"7A21F15FEE2D5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/e9/98b6ea61.jpg","comment_is_top":false,"comment_ctime":1540167403,"is_pvip":false,"replies":[{"id":"12264","content":"实际上 左右指针移动交换更巧妙 留言区也有人给出答案","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540173271,"ip_address":"","comment_id":34413,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14425069291","product_id":100017301,"comment_content":"非常棒，理解更深刻了，关于课后思考我首先想到的是应用快排的分区思想，然后看了评论，感觉桶排序更好理解！","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427201,"discussion_content":"实际上 左右指针移动交换更巧妙 留言区也有人给出答案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540173271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33937,"user_name":"Feliscatus","can_delete":false,"product_type":"c1","uid":1257464,"ip_address":"","ucode":"B5A8562A2324D1","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f8/4f202e6f.jpg","comment_is_top":false,"comment_ctime":1539921538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14424823426","product_id":100017301,"comment_content":"基数排序那个图最后一步不是h在i前面吗(从小到大排序)","like_count":3},{"had_liked":false,"id":276824,"user_name":"重洋","can_delete":false,"product_type":"c1","uid":1698679,"ip_address":"","ucode":"B896A81B579BEA","user_header":"https://static001.geekbang.org/account/avatar/00/19/eb/77/ffd16123.jpg","comment_is_top":false,"comment_ctime":1612146710,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10202081302","product_id":100017301,"comment_content":"记一次思维误区：排序的是对象，不是数字。   基数排序最后一步是用来移动原元素的位置，目的是移动；若直接遍历C数组去堆叠整数到R数组，整数就是新生成的了，就是“造对象”，是不对的。","like_count":2},{"had_liked":false,"id":115246,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1563517688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10153452280","product_id":100017301,"comment_content":"算法_013<br># 作业<br>现实中的很多需求也不是排序，而是分组。<br>与桶排序思路相似，建3个链表，分别插入小写字母，数字和大写字母，最后依次连接即可。<br><br># 内容<br><br>- 线性排序：时间复杂度O(n)<br>- 桶排序<br>\t- 场景：订单金额等<br>- 计数排序(特殊的桶：桶内元素完全相同)<br>\t- 场景：分数排名<br>- 基数排序<br>\t- 场景：手机号排序<br><br># 感想<br><br>分组思想的核心难题是，把无序的数据分组，如何保证两组之间的交叉性，同时想要保证O(n)的时间复杂度，又不能采用元素间比较，最终的解决方案是：在某些情况下，用数学上的特征来代替元素间比较，这样单次遍历就可以产生没有交叉的分组。<br><br>让我联想到，虽然在通用技术没有显著成果的当下，在垂直领域依然大有可为，就是因为特殊的场景产生了特殊的需求和数据，可以采用专门适用于该场景的新的算法和能力提高技术能力，在效率和稳定性上建立壁垒，这个是垂直领域的优势和逻辑。","like_count":2},{"had_liked":false,"id":83890,"user_name":"NXGG","can_delete":false,"product_type":"c1","uid":1345269,"ip_address":"","ucode":"192333E9DF5417","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJbk2RB8AHkxjM164WiaFianNt63xMMJxqGTtic051RqQhb0JFrSLibnrvcyVKFlg3tdTo1e0f2B3tcXw/132","comment_is_top":false,"comment_ctime":1554730043,"is_pvip":false,"replies":[{"id":"31018","content":"这个时候，就不能通过数学公式来化简了。要单独再分析n==m情况下的时间复杂度。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1555381469,"ip_address":"","comment_id":83890,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10144664635","product_id":100017301,"comment_content":"老师，您在分析桶排序的时间复杂度时：“当桶的个数m接近数据个数n时，log(n&#47;m)就会是个非常小的量“<br>此处存疑：如果m→n,则n&#47;m→1，那么log(n&#47;m) →0，那么“桶排序的时间复杂度就接近O(n)”这种结论是如何得出的呢？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446173,"discussion_content":"这个时候，就不能通过数学公式来化简了。要单独再分析n==m情况下的时间复杂度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555381469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476450,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","nickname":"曙光","note":"","ucode":"04D65BF7F19845","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73392,"discussion_content":"也就是说，m等于n时，又回到nlogn了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575558750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1476450,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","nickname":"曙光","note":"","ucode":"04D65BF7F19845","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165789,"discussion_content":"是O(n)。最理想状态m==n，且每个桶里一个数据，直接把数连起来就好了，一共两次遍历。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581329154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73392,"ip_address":""},"score":165789,"extra":""}]}]},{"had_liked":false,"id":73823,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1552010468,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10141945060","product_id":100017301,"comment_content":"<br>用三个桶，分别是小写字母、大写字母、数字，遍历所有字符放在对应桶中，最后按小写字母、大写字母、数字的顺序合并桶","like_count":2},{"had_liked":false,"id":35369,"user_name":"痛改前非","can_delete":false,"product_type":"c1","uid":1005412,"ip_address":"","ucode":"4509CB0BB892EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/64/064dc124.jpg","comment_is_top":false,"comment_ctime":1540526201,"is_pvip":false,"replies":[{"id":"12744","content":"你可以举个例子自己画画 纯粹文字描述的话比较难懂","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540812415,"ip_address":"","comment_id":35369,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10130460793","product_id":100017301,"comment_content":"我有一个地方没有看懂，关于排序稳定性这块。请问手机号为什么要从最后一位依次往前面排序，而不是从第一位开始排序？这个稳定性没理解。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427522,"discussion_content":"你可以举个例子自己画画 纯粹文字描述的话比较难懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540812415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34077,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1539990107,"is_pvip":false,"replies":[{"id":"12198","content":"哈哈 也是哈 它的意思是说主排序思想是非比较的 你懂就好 不用计较概念","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540048118,"ip_address":"","comment_id":34077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10129924699","product_id":100017301,"comment_content":"王老师，为什么说桶排序是非比较的呢？桶内用快速排序，不是需要比较么？即使是计数排序找出最大值不也要比较。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427110,"discussion_content":"哈哈 也是哈 它的意思是说主排序思想是非比较的 你懂就好 不用计较概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540048118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34030,"user_name":"子 非 ","can_delete":false,"product_type":"c1","uid":1236439,"ip_address":"","ucode":"BAB9EFE40470EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/d7/8faa8bde.jpg","comment_is_top":false,"comment_ctime":1539956439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10129891031","product_id":100017301,"comment_content":"对于链表的反转问题，看了您的git代码，用的是双重指针，因为对这块不太熟悉，所以没看明白。就从网上找到了其他算法，可能不是最简单的，但是还比较清晰<br>linkList reverse(linkList head){<br>  linkList p,q,pr;<br>  p = head-&gt;next;&#47;&#47;p一直往下走，当指向null时结束<br>  q = NULL;&#47;&#47;q指向反转后第一个结点<br>  head-&gt;next = NULL;<br>  while(p){<br>    pr = p-&gt;next;&#47;&#47;pr暂存p的原始下一个结点<br>    p-&gt;next = q;<br>    q = p;<br>    p = pr;<br>  }<br>  head-&gt;next = q;&#47;&#47;头指针指向反转后的第一个结点<br>  return head;<br>}<br>参考链接:https:&#47;&#47;blog.csdn.net&#47;blioo&#47;article&#47;details&#47;62050967","like_count":2},{"had_liked":false,"id":33984,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1539938354,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10129872946","product_id":100017301,"comment_content":"很奇怪，为啥我看到别人描述的说的计数排序不是这样的，不是要顺序求和，而是求出C[6]中每个位置分数出现过的次数，然后按照次数，直接从C[0]遍历到C[6]，每个位置的分数出现过几次就遍历几次，就完成排序了","like_count":2,"discussions":[{"author":{"id":1754583,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/c5/d7/cd076f3a.jpg","nickname":"D","note":"","ucode":"858CAC2BDAFFC6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571286,"discussion_content":"应该是写错了，每个位置分数出现过几次就输出几次，时间复杂度是O(n)吧，其本质也是遍历了一遍数组","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652169224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1156074,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","nickname":"HoSalt","note":"","ucode":"610B03E2A002D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247985,"discussion_content":"「每个位置的分数出现过几次就遍历几次，就完成排序了」时间复杂度就变为O(n*n)了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587829053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33978,"user_name":"GrubbyLu","can_delete":false,"product_type":"c1","uid":1063483,"ip_address":"","ucode":"1B471210A668EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/3a/3b/3a6efa8f.jpg","comment_is_top":false,"comment_ctime":1539936635,"is_pvip":false,"replies":[{"id":"12206","content":"嗯嗯 可能例子举的导致你误解了。我的订单的例子主要是体现可以用在外排序中。当然 如果能分成10万个桶最好不过了。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540050228,"ip_address":"","comment_id":33978,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10129871227","product_id":100017301,"comment_content":"王老师，看完专栏之后，对于桶排序有个疑问，您文中讲到“当桶的个数 m 接近数据个数 n 时，这个时候桶排序的时间复杂度接近 O(n)。”  但是在您下面的举例中，10GB 的订单数据只分100个桶，即便增加到1千或者1万个桶，桶和数据个数之间还是有很大的差距。而且您最后的总结中也说到“桶排序是对针对范围不大的数据”，是不是可以理解为桶应该设置的尽量小，这样在大数量的情况下时间复杂度就很难接近 O(n)了，希望您能予以解答，多谢。<br><br>","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427091,"discussion_content":"嗯嗯 可能例子举的导致你误解了。我的订单的例子主要是体现可以用在外排序中。当然 如果能分成10万个桶最好不过了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540050228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240330,"user_name":"犀利鬼","can_delete":false,"product_type":"c1","uid":1600746,"ip_address":"","ucode":"E02388EC88D4ED","user_header":"https://static001.geekbang.org/account/avatar/00/18/6c/ea/65cfa066.jpg","comment_is_top":false,"comment_ctime":1596863775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5891831071","product_id":100017301,"comment_content":"可以弄3个长度为字符串长度的数组，分别是小写，数字，大写字母数组，遍历一遍字符串，分别放进不同的数组中，在把数组中分别遍历一遍","like_count":1},{"had_liked":false,"id":172599,"user_name":"小宽宽与他的白日梦","can_delete":false,"product_type":"c1","uid":1618781,"ip_address":"","ucode":"C16F595EE4E11A","user_header":"https://static001.geekbang.org/account/avatar/00/18/b3/5d/a97e5045.jpg","comment_is_top":false,"comment_ctime":1579231056,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5874198352","product_id":100017301,"comment_content":"计数排序我还是没太理解。请问顺序求和：<br><br>C[6] = [2，0，2，3，0，1]<br>是怎么变成<br>C[6]=[2，2，4，7，7，8] 的？","like_count":1,"discussions":[{"author":{"id":1320090,"avatar":"https://static001.geekbang.org/account/avatar/00/14/24/9a/c933f702.jpg","nickname":"行者","note":"","ucode":"646558AF9803EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236301,"discussion_content":"楼上正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587086049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008343,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/d7/48a7fb45.jpg","nickname":"Edward","note":"","ucode":"4ABF119D75C46F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209931,"discussion_content":"C[k]里存储小于等于分数 k 的考生个数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584691306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157912,"user_name":"Swing","can_delete":false,"product_type":"c1","uid":1330065,"ip_address":"","ucode":"55FCA9ECEFBBEB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","comment_is_top":false,"comment_ctime":1575281342,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5870248638","product_id":100017301,"comment_content":"求老师解惑：<br>“所以整个桶排序的时间复杂度就是 O(n*log(n&#47;m))。当桶的个数 m 接近数据个数 n 时，log(n&#47;m) 就是一个非常小的常量，这个时候桶排序的时间复杂度接近 O(n)。”<br>m接近于n的时候，不意味着 n&#47;m 缩小到 1吗，那 log(n&#47;m) 不就是趋近于log1 = 0 吗？<br>那 复杂度 也趋向于 0了啊 ？？？<br>有点钻牛角尖了。。。<br><br>","like_count":1,"discussions":[{"author":{"id":1373893,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f6/c5/6329ddcc.jpg","nickname":"阿冰777","note":"","ucode":"F365EB44F971F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73914,"discussion_content":"这里的log(n/m)是指单个桶内的排序时间，n=m 时，相当于每个桶内只有一个元素，就是O(1) 所以是趋向于1 的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575609589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1373893,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f6/c5/6329ddcc.jpg","nickname":"阿冰777","note":"","ucode":"F365EB44F971F3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":75258,"discussion_content":"也对，可以这么理解，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575728024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73914,"ip_address":""},"score":75258,"extra":""}]}]},{"had_liked":false,"id":156244,"user_name":"帽子丨影","can_delete":false,"product_type":"c1","uid":1225395,"ip_address":"","ucode":"2B34892A2DE83E","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/b3/798a4bb2.jpg","comment_is_top":false,"comment_ctime":1574842052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869809348","product_id":100017301,"comment_content":"在理解计数排序时，一直有一个困惑，就是完成计数后其实已经可以完成排序了，没必要再进行老师说的最巧妙的那两步了。后来在理解基数排序的 想通了，因为我们要排序的不一定是数字，如果只是对数字进行排序的话，计数完就行了。","like_count":1},{"had_liked":false,"id":138097,"user_name":"Geek_d8b539","can_delete":false,"product_type":"c1","uid":1685389,"ip_address":"","ucode":"FC9F8E08FB6F89","user_header":"","comment_is_top":false,"comment_ctime":1570022749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5864990045","product_id":100017301,"comment_content":"虽然看完了但是感觉脑子跟不上","like_count":1},{"had_liked":false,"id":137661,"user_name":"Joiner","can_delete":false,"product_type":"c1","uid":1071941,"ip_address":"","ucode":"7F67D4C325E71F","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/45/5dc5437e.jpg","comment_is_top":false,"comment_ctime":1569814453,"is_pvip":false,"replies":[{"id":"53636","content":"😁，好像也是哈，9001个就够了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570582887,"ip_address":"","comment_id":137661,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5864781749","product_id":100017301,"comment_content":"老师，计数排序最后那里，&quot;比如，还是拿考生这个例子。如果考生成绩精确到小数后一位，我们就需要将所有的分数都先乘以10转化成整数，然后再放到 9010 个桶内&quot; 这里为什么是9010个桶，而不是9001个桶？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469199,"discussion_content":"😁，好像也是哈，9001个就够了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570582887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248730,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0d/da/906dce6a.jpg","nickname":"sudo","note":"","ucode":"1936F782F914D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60580,"discussion_content":"😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574739265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112848,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1562831186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857798482","product_id":100017301,"comment_content":"字母大小写分类器可以考虑桶为二的技术排序<br>字母大小写加数字分类器可以考虑桶为三的计数排序。复杂度都O(n).","like_count":1},{"had_liked":false,"id":110975,"user_name":"大大大侠饶命","can_delete":false,"product_type":"c1","uid":1253975,"ip_address":"","ucode":"9C59655D514AA2","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/57/0ecc24e8.jpg","comment_is_top":false,"comment_ctime":1562406171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857373467","product_id":100017301,"comment_content":"老师，有个建议，就是复杂的地方能不能分步骤用1，2，3标注一下。眼花撩乱的","like_count":1},{"had_liked":false,"id":106454,"user_name":"kdb_reboot","can_delete":false,"product_type":"c1","uid":1003594,"ip_address":"","ucode":"4C56FCA563FCA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/4a/04fef27f.jpg","comment_is_top":false,"comment_ctime":1561306202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856273498","product_id":100017301,"comment_content":"感觉思考题完全可以像上一节一样，通过划分排序区间来解啊，三类字符的话就划分三个区间","like_count":1},{"had_liked":false,"id":43490,"user_name":"origin","can_delete":false,"product_type":"c1","uid":1086653,"ip_address":"","ucode":"BEE45728683452","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/bd/3b61c1c1.jpg","comment_is_top":false,"comment_ctime":1543233011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838200307","product_id":100017301,"comment_content":"1. 线性排序:桶排序，计数排序，基数排序，都不是比较排序<br>2. 桶排序: 所有元素尽量均匀的分配到各个桶内<br>3. 计数排序: 每个桶相同数值的多个元素，年龄排序，考分排序<br>4. 基数排序: 分别对多位数中的每个位进行计数排序，从后往前进行，排序必须稳定","like_count":1},{"had_liked":false,"id":34707,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1540263667,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5835230963","product_id":100017301,"comment_content":"计数排序为何必须是非负整数？<br>我的理解是假如数据在 [-9000, -8000] 和 [8000, 9000] 范围内，如果拿负数直接参与运算，会出现[-9000, 9000] 的范围，所以需要转成非负整数，缩小计数范围。如果按照我理解的这样，感觉老师举的例子 [-1000, 1000] 有些不恰当，让人难以想明白。<br>希望老师解惑。","like_count":1,"discussions":[{"author":{"id":1156074,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","nickname":"HoSalt","note":"","ucode":"610B03E2A002D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248010,"discussion_content":"C中数组的下标和数据中的值是一一对应的，下标是不能为负的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587829236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34274,"user_name":"三忌","can_delete":false,"product_type":"c1","uid":1235739,"ip_address":"","ucode":"3533C304CB8A6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/1b/999ae851.jpg","comment_is_top":false,"comment_ctime":1540082107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835049403","product_id":100017301,"comment_content":"基数排序的图 是要从下到大排序还是从大到小排序啊？ 但不管是从小到大还是从大到小 图都不对","like_count":1},{"had_liked":false,"id":34129,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1540013987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5834981283","product_id":100017301,"comment_content":"思考题: 先遍历一边，统计出大写，小写，数字的个数，这样就可以确定每种数据应该放在哪个位置了。用三个索引分辨记录各个种类的起始位置，第二遍遍历就可以直接将数据放到对应位置了","like_count":1},{"had_liked":false,"id":33887,"user_name":"格曼","can_delete":false,"product_type":"c1","uid":1051030,"ip_address":"","ucode":"0F7BD1F74CB9F2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKPQTq629hImYfpLSWBTmnPwNRRK5WtLXXfTK7cic3DmrXTakWWPLPhBf1Dh6yialXBTewtSAKEfbFw/132","comment_is_top":false,"comment_ctime":1539915377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5834882673","product_id":100017301,"comment_content":"文中提到基数排序可由每一位进行稳定排序算法的排序，比如计数排序，可是文中计数排序算法的实现方式是不稳定的，c[a[i]]记录的是小于等于a[i]的数的个数，每次将a[i]放到r[c[a[i]]–1]的位置实际上就是将该数放在了最末尾的位置，也就是说如果几个数相等，排序的过程中先出现的数反而排完序之后会到后面去，这样是不稳定的。实现的过程可以改成这样，每次将a[i]放到r[c[a[i]-1]]处，也就是所有小于a[i]的数的个数的后面一位，执行完之后c[a[i]-1]]++，这样可以保证相同的数是按照原有顺序一个个放置的，从而保证算法的稳定性。","like_count":1},{"had_liked":false,"id":33883,"user_name":"Jimbol","can_delete":false,"product_type":"c1","uid":1178008,"ip_address":"","ucode":"8D9190B3B3E08B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/98/95b13446.jpg","comment_is_top":false,"comment_ctime":1539914725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5834882021","product_id":100017301,"comment_content":"课后思考：在字符串开始和结束的地方设置两个指针，p1从前往后走，p2从后往前走，如果p1是大写并且p2是小写，则互换位置,否则移动p1或p2。时间复杂度O(n)，空间O(1)。如果有数字，先遍历一次统计大写字母，小写字母和数字的个数，计算新字符串中分别对应的区间范围，然后再分别遍历原字符串的三个区间，把不属于本区间的放到该放的区间，时间O(n)空间O(1)。","like_count":1},{"had_liked":false,"id":33804,"user_name":"大可可","can_delete":false,"product_type":"c1","uid":1186458,"ip_address":"","ucode":"BC635013E7B87E","user_header":"https://static001.geekbang.org/account/avatar/00/12/1a/9a/7b246eb1.jpg","comment_is_top":false,"comment_ctime":1539905887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5834873183","product_id":100017301,"comment_content":"正则表达式替换为空再连起来就可以吧","like_count":1},{"had_liked":false,"id":33793,"user_name":"farFlight","can_delete":false,"product_type":"c1","uid":1245211,"ip_address":"","ucode":"B0872D3ECBEC38","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbRibsic15KXfGEN3SSjnLhXGyhK2Uyrj5ibBJsKAjicNqtafDaQOLH4xpSJRZD1vmibFPJER1ySmwP9A/132","comment_is_top":false,"comment_ctime":1539901943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5834869239","product_id":100017301,"comment_content":"小写字母26个，大写26个，数字0-9一共10个，那么用计数排序，把它们分入62个桶里就行了","like_count":1},{"had_liked":false,"id":360506,"user_name":"码狐","can_delete":false,"product_type":"c1","uid":1234879,"ip_address":"新加坡","ucode":"A4666D3AF30D6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/bf/9d8984b7.jpg","comment_is_top":false,"comment_ctime":1666604863,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1666604863","product_id":100017301,"comment_content":"1. 桶排序，大写一个桶，小写一个桶<br>2. 快速排序的分区思想，双指针 i 指向大写字母头节点，j 遍历数组","like_count":0},{"had_liked":false,"id":360047,"user_name":"微尘","can_delete":false,"product_type":"c1","uid":1667439,"ip_address":"北京","ucode":"F9CB2CEE9F19B9","user_header":"https://static001.geekbang.org/account/avatar/00/19/71/6f/07e1452a.jpg","comment_is_top":false,"comment_ctime":1666150647,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1666150647","product_id":100017301,"comment_content":"两个桶 ，然后根据AsII码进行区分即可。","like_count":0},{"had_liked":false,"id":359368,"user_name":"GT","can_delete":false,"product_type":"c1","uid":2933354,"ip_address":"云南","ucode":"318D7AFA2C832A","user_header":"https://static001.geekbang.org/account/avatar/00/2c/c2/6a/91b3d330.jpg","comment_is_top":false,"comment_ctime":1665478306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665478306","product_id":100017301,"comment_content":"关于课后思考【将小写字母的放到前面，大写字母放在最后，数字放在中间，不用排序算法】<br>菜鸟发言，不对望指正：<br>定义三个数组（arr1，arr2, arr3）,扫描字符串，ascii码值61-7A的放在arr1,41-5A的放在arr3,其余的放在arr2，依次合并arr1,arr2,arr3","like_count":0},{"had_liked":false,"id":358448,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1664330102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664330102","product_id":100017301,"comment_content":"总结：<br>特殊排序<br>1. 桶排序，计数排序：排序的值范围不能过大，数据分布比较均匀<br>2. 基数排序：按位比较，同时值范围不能过大。<br>疑问：基数排序不也是涉及比较了么？怎么会说是不涉及比较的算法？","like_count":0},{"had_liked":false,"id":355839,"user_name":"~patience","can_delete":false,"product_type":"c1","uid":1614285,"ip_address":"四川","ucode":"8D9BC78A241CEA","user_header":"https://static001.geekbang.org/account/avatar/00/18/a1/cd/bc74741c.jpg","comment_is_top":false,"comment_ctime":1661779685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661779685","product_id":100017301,"comment_content":"老师能不能讲解一下github基数排序代码的countingSort方法里面<br>   for (int i = 1; i &lt; c.length; i++) {<br>            c[i] += c[i - 1];<br>        }<br>为什么要这一步操作啊,感觉好难懂","like_count":0},{"had_liked":false,"id":354341,"user_name":"孙新","can_delete":false,"product_type":"c1","uid":2875594,"ip_address":"辽宁","ucode":"A80038A479B943","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e0/ca/adfaa551.jpg","comment_is_top":false,"comment_ctime":1660291977,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1660291977","product_id":100017301,"comment_content":"桶排序我第一反应就是小时候的水浒卡。因为108张打乱了。我发现我10岁的时候就发现了桶排序。捡出来1-9、10-19、20-29...以此类推，然后分组给排好了，最后再合到一起。挺有意思。","like_count":0},{"had_liked":false,"id":352920,"user_name":"阿白","can_delete":false,"product_type":"c1","uid":3046147,"ip_address":"陕西","ucode":"76F74FDD597AF6","user_header":"https://static001.geekbang.org/account/avatar/00/2e/7b/03/02f74a86.jpg","comment_is_top":false,"comment_ctime":1659010979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659010979","product_id":100017301,"comment_content":"为什么其他两种排序没有代码呢","like_count":0},{"had_liked":false,"id":352118,"user_name":"老大不小","can_delete":false,"product_type":"c1","uid":1295609,"ip_address":"","ucode":"35BCDD3CB13467","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","comment_is_top":false,"comment_ctime":1658391326,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658391326","product_id":100017301,"comment_content":"我有和叶明同学一样的疑问，并且看了老师和同学的解答，还是没能明白为什么对象不能直接扫描计数数组来还原原数组，得到已排好序的数组。<br><br>老师，你好，有个疑问：<br>在计数排序中，第一次得到数组int[] c = new int[]{2,0,2,3,0,1}之后，<br>能不能直接遍历数组c，<br><br>int j=0;<br>for(int i=0; i&lt;c.length; i++){<br>    int count = c[i];<br>    for(int k=0;k&lt;count;k++){<br>        a[j++] = i;<br>    }<br>}<br>这样不是也对所有的分数进行排序了吗？<br><br>如果你排序的不是单纯的数字 而是一个对象呢？ -- 这个何解，有例子吗？<br>","like_count":0},{"had_liked":false,"id":348320,"user_name":"Geek_32cca0","can_delete":false,"product_type":"c1","uid":2743957,"ip_address":"","ucode":"A24204F2C0485E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJF8vUICSb6yEleDjtsTe8OrwqmpaoxlicHB7NutCwMMs5ZvsQrguEJ3VL0x5I85jS6xlbrWcMdWKA/132","comment_is_top":false,"comment_ctime":1654957655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654957655","product_id":100017301,"comment_content":"使用前面讲的快排使用的partion也是可以在O(n)解决的。","like_count":0},{"had_liked":false,"id":339170,"user_name":"xiaoyan","can_delete":false,"product_type":"c1","uid":2615905,"ip_address":"","ucode":"B41CE7CD5F48D4","user_header":"https://static001.geekbang.org/account/avatar/00/27/ea/61/607e0a2a.jpg","comment_is_top":false,"comment_ctime":1647954965,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647954965","product_id":100017301,"comment_content":"对于解答开篇，我刚开始还以为是需要按照出生日期进行排序，所以想到的是用基数排序，把所有的生日当做一个八位数，比如19980829，用基数排序可以解决这个问题","like_count":0},{"had_liked":false,"id":338610,"user_name":"另一条路","can_delete":false,"product_type":"c1","uid":2917986,"ip_address":"","ucode":"3BCA0B8966A727","user_header":"https://static001.geekbang.org/account/avatar/00/2c/86/62/50b18047.jpg","comment_is_top":false,"comment_ctime":1647594148,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1647594148","product_id":100017301,"comment_content":"为什么计数排序不能给负整数排序呢？我觉得也是可以的啊，还有我认为小数也是可以使用计数排序的，希望老师能够抽时间帮忙解答下","like_count":0,"discussions":[{"author":{"id":1754583,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/c5/d7/cd076f3a.jpg","nickname":"D","note":"","ucode":"858CAC2BDAFFC6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571288,"discussion_content":"因为是用数组下标表示待排序的数据的，负数和小数不能用数组下标表示呀，不过是不是用字典就可以实现了呢，字典的key表示数据，value表示出现的次数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652169612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337716,"user_name":"201202077","can_delete":false,"product_type":"c1","uid":2881261,"ip_address":"","ucode":"2FB173EB6A9A2E","user_header":"","comment_is_top":false,"comment_ctime":1646986707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646986707","product_id":100017301,"comment_content":"大小子母排序，减去最小小写字母看是否小于0，小于零的是大写字母<br>大小写子母加数字排序，使用中间的两个界限，跟两个界限比较，进行分类","like_count":0},{"had_liked":false,"id":336822,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1646383861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646383861","product_id":100017301,"comment_content":"线性排序的方式有三种： <br><br>1. 桶排序：要求数据能很容易划分 m 个桶，桶和桶之间有着天然的大小顺序，比较适合用在外部排序中<br>2. 计数排序：要求数据范围不能太大，计数只能给非负整数，要排序的数据是其他类型，可以先转成非负整数<br>3. 基数排序：要求数据可以按位来比较，位之间有递进关系，先比较低位，再比较高位；而且每一位的数据范围不能太大，要可以用线性排序算法来排序<br><br>思考题： 非正整数数字，没有明显的递进关系，小写和大写字母有天然的顺序关系，适合用桶排序<br><br>","like_count":0},{"had_liked":false,"id":335973,"user_name":"路在哪","can_delete":false,"product_type":"c1","uid":1816609,"ip_address":"","ucode":"A4822AD07AD102","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b8/21/f692bdb0.jpg","comment_is_top":false,"comment_ctime":1645799359,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645799359","product_id":100017301,"comment_content":"可以创建一个数组，然后遍历字母，遇到小写，就从头开始放入，遇到大写就从尾部开始放入","like_count":0},{"had_liked":false,"id":334232,"user_name":"Kylin。","can_delete":false,"product_type":"c1","uid":1514053,"ip_address":"","ucode":"C02B16B79C7141","user_header":"https://static001.geekbang.org/account/avatar/00/17/1a/45/5c11e1d2.jpg","comment_is_top":false,"comment_ctime":1644823787,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644823787","product_id":100017301,"comment_content":"计数排序算法可视化：<br>https:&#47;&#47;www.cs.usfca.edu&#47;~galles&#47;visualization&#47;CountingSort.html<br>希望老师精选","like_count":0},{"had_liked":false,"id":332288,"user_name":"咦？","can_delete":false,"product_type":"c1","uid":1256450,"ip_address":"","ucode":"D9E632CEB0143C","user_header":"https://static001.geekbang.org/account/avatar/00/13/2c/02/c152161e.jpg","comment_is_top":false,"comment_ctime":1643160738,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643160738","product_id":100017301,"comment_content":"思考题，快排思想，左右双指针，分成两个区间，a区间元素都＜b区间元素","like_count":0},{"had_liked":false,"id":328874,"user_name":"KW💤","can_delete":false,"product_type":"c1","uid":1109389,"ip_address":"","ucode":"290DD7016F4EE0","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","comment_is_top":false,"comment_ctime":1640922599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640922599","product_id":100017301,"comment_content":"以下这两段话有点问题，基数排序每一位的比较是要基于稳定排序的，桶排如果桶内排序用的是快排，那就不是稳定排序了，桶排也是线性排序。<br>“除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到 O(n) 了。”<br>“因为基数排序算法需要借助桶排序或者计数排序来完成每一个位的排序工作。”<br>另外，强调了两次“如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了”，事实上基数排序是由低位开始执行排序的，无论高位如何，它都需要对每一位都要执行排序","like_count":0},{"had_liked":false,"id":326408,"user_name":"zy","can_delete":false,"product_type":"c1","uid":1127202,"ip_address":"","ucode":"3DDC2A99AC2122","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKAWr5qia3EibrcHHKWHYPFpZGX4AbaTvg2XPCZKficPiaNEme1zNPvaqlWpmvpVSDCfITLWm5Lpm0dMA/132","comment_is_top":false,"comment_ctime":1639498914,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639498914","product_id":100017301,"comment_content":"订阅晚了，我说下对于课后思考我的看法，我觉得还是用基数排序就好了，只是每一位不是排一遍，而是排两边，头一遍搞定大小写和数字排序，第二遍做稳定重排","like_count":0},{"had_liked":false,"id":326028,"user_name":"三金ฅฅ*","can_delete":false,"product_type":"c1","uid":1238672,"ip_address":"","ucode":"BAE2BC013590D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/90/a4fb7dca.jpg","comment_is_top":false,"comment_ctime":1639319169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639319169","product_id":100017301,"comment_content":"注意课后思考题目中“小写字母内部和大写字母内部不要求有序”，如果要求内部相对有序，不能用双指针交换，应该用类似插入排序的方法来做。","like_count":0},{"had_liked":false,"id":325428,"user_name":"rookielink","can_delete":false,"product_type":"c1","uid":2704810,"ip_address":"","ucode":"23B6E9F2D1D34D","user_header":"","comment_is_top":false,"comment_ctime":1638955664,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638955664","product_id":100017301,"comment_content":"想问一下，基数排序那个手机号的例子，从开头往后排，和从后面往开头排有啥区别吗？如果没有区别，排牛津字典是不是就可以不用补全了呢？","like_count":0},{"had_liked":false,"id":324956,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1638754898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638754898","product_id":100017301,"comment_content":"课后问题<br>把小写字母放一个桶，<br>大写字母放一个桶，<br>数字放一个桶，<br>然后根据需求按顺序组合桶的数据输出。<br>例如需求是小写字母在前，数字在中，大写字母在后。<br>那可以按这个顺序，先输出小写字母的桶数据，再输出数字的桶数据，最后输出大写字母的桶数据。","like_count":0},{"had_liked":false,"id":324869,"user_name":"雪碧心拔凉","can_delete":false,"product_type":"c1","uid":1161522,"ip_address":"","ucode":"D13EEBAA0F443B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b9/32/84346d4a.jpg","comment_is_top":false,"comment_ctime":1638694639,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638694639","product_id":100017301,"comment_content":"按照桶排序，分成三个桶，小写字母，数字，大写字母","like_count":0},{"had_liked":false,"id":324348,"user_name":"Valentine","can_delete":false,"product_type":"c1","uid":2818727,"ip_address":"","ucode":"971CA6B44A3191","user_header":"https://static001.geekbang.org/account/avatar/00/2b/02/a7/a17dfba3.jpg","comment_is_top":false,"comment_ctime":1638381125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638381125","product_id":100017301,"comment_content":"桶排序吧，直接建立三个桶，以对应的ASCII码区分大写和小写和数字（0-9），三个模糊桶容纳上述三种元素，安装小写桶 数字桶 大写桶的顺序输出到结果数组中就行了。双指针也可以。","like_count":0},{"had_liked":false,"id":323896,"user_name":"雪落十三","can_delete":false,"product_type":"c1","uid":2776072,"ip_address":"","ucode":"436DEB10902CC4","user_header":"https://static001.geekbang.org/account/avatar/00/2a/5c/08/52f15be4.jpg","comment_is_top":false,"comment_ctime":1638198899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638198899","product_id":100017301,"comment_content":"小争哥的那个计数排序代码，对a[i]从后往前遍历，原来是为了保证计数排序算法的稳定性呀","like_count":0},{"had_liked":false,"id":322694,"user_name":"jason","can_delete":false,"product_type":"c1","uid":2680235,"ip_address":"","ucode":"0886E1D88BB7CC","user_header":"https://static001.geekbang.org/account/avatar/00/28/e5/ab/cece3199.jpg","comment_is_top":false,"comment_ctime":1637553004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637553004","product_id":100017301,"comment_content":"老师有点不懂这个解释-基数排序对要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了；那看现在的比较都是从最低位开始排序，压根适用不了你说的这个情况，能举个不用比较的例子吗","like_count":0},{"had_liked":false,"id":321815,"user_name":"歌歌哥哥哥","can_delete":false,"product_type":"c1","uid":2635058,"ip_address":"","ucode":"4CE1E904C31C86","user_header":"https://static001.geekbang.org/account/avatar/00/28/35/32/7064592a.jpg","comment_is_top":false,"comment_ctime":1637052804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637052804","product_id":100017301,"comment_content":"这里的计数排序为什么要从后往前进行遍历，是为了保证排序算法的稳定性。","like_count":0},{"had_liked":false,"id":320416,"user_name":"枫之林","can_delete":false,"product_type":"c1","uid":2570817,"ip_address":"","ucode":"8BE10E7A808AAF","user_header":"https://static001.geekbang.org/account/avatar/00/27/3a/41/a0b59351.jpg","comment_is_top":false,"comment_ctime":1636299831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636299831","product_id":100017301,"comment_content":"课后题很简单，只需要根据不同的分类分配相应的桶，然后轮询数组，把数组元素放入相应的桶。最后再根据要求，把桶里的数据根据要求依次放回数组。","like_count":0},{"had_liked":false,"id":319177,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1635660512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635660512","product_id":100017301,"comment_content":"最后的思考题可以用快排的思路来做，有个参数temp记录小写字母的最后位置，数组从0位置开始，小写字母，temp++，如果是大写字母就继续遍历，碰到小写的，就和temp+1替换，然后temp++。<br>如果加入数字的话，除了temp，再加一个temp2，记录大写字母的最小位置。然后遍历","like_count":0},{"had_liked":false,"id":316057,"user_name":"乌云下的风","can_delete":false,"product_type":"c1","uid":1541522,"ip_address":"","ucode":"5FF34726A9519D","user_header":"https://static001.geekbang.org/account/avatar/00/17/85/92/9f7c43ef.jpg","comment_is_top":false,"comment_ctime":1634117619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634117619","product_id":100017301,"comment_content":"    public static void main(String[] args) {<br>        int[] a={2,5,3,0,2,3,0,3};<br>        countingSort( a, 6);<br>        System.out.println(JSONObject.toJSONString(a));<br>    }<br>输出结果是：[0,2,2,3,3,5,0,3]  对不对啊<br>&#47;&#47; 计数排序，a是数组，n是数组大小。假设数组中存储的都是非负整数。<br>public void countingSort(int[] a, int n) {<br>  if (n &lt;= 1) return;<br><br>  &#47;&#47; 查找数组中数据的范围<br>  int max = a[0];<br>  for (int i = 1; i &lt; n; ++i) {<br>    if (max &lt; a[i]) {<br>      max = a[i];<br>    }<br>  }<br><br>  int[] c = new int[max + 1]; &#47;&#47; 申请一个计数数组c，下标大小[0,max]<br>  for (int i = 0; i &lt;= max; ++i) {<br>    c[i] = 0;<br>  }<br><br>  &#47;&#47; 计算每个元素的个数，放入c中<br>  for (int i = 0; i &lt; n; ++i) {<br>    c[a[i]]++;<br>  }<br><br>  &#47;&#47; 依次累加<br>  for (int i = 1; i &lt;= max; ++i) {<br>    c[i] = c[i-1] + c[i];<br>  }<br><br>  &#47;&#47; 临时数组r，存储排序之后的结果<br>  int[] r = new int[n];<br>  &#47;&#47; 计算排序的关键步骤，有点难理解<br>  for (int i = n - 1; i &gt;= 0; --i) {<br>    int index = c[a[i]]-1;<br>    r[index] = a[i];<br>    c[a[i]]--;<br>  }<br><br>  &#47;&#47; 将结果拷贝给a数组<br>  for (int i = 0; i &lt; n; ++i) {<br>    a[i] = r[i];<br>  }<br>}","like_count":0},{"had_liked":false,"id":314816,"user_name":"Aurora.","can_delete":false,"product_type":"c1","uid":2718869,"ip_address":"","ucode":"8A908805080E74","user_header":"https://static001.geekbang.org/account/avatar/00/29/7c/95/db224274.jpg","comment_is_top":false,"comment_ctime":1633449791,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1633449791","product_id":100017301,"comment_content":"有个疑问，既然基数排序每个“位”要用桶排序，而桶排序每个桶底层要用快排实现，这不是与基数排序需要稳定的排序算法矛盾了吗","like_count":0,"discussions":[{"author":{"id":2776072,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/5c/08/52f15be4.jpg","nickname":"雪落十三","note":"","ucode":"436DEB10902CC4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534492,"discussion_content":"感觉没问题，快排老师讲过就是一个稳定的排序算法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638199050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314060,"user_name":"拓山","can_delete":false,"product_type":"c1","uid":1545647,"ip_address":"","ucode":"11FE9CF3821898","user_header":"https://static001.geekbang.org/account/avatar/00/17/95/af/b7f8dc43.jpg","comment_is_top":false,"comment_ctime":1632821673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632821673","product_id":100017301,"comment_content":"计数排序 我反复看了很久。有一种思路会不会更简洁一些：<br>1、C[6]只计算到按照成绩分桶即可，例如到c[6]={2,0,2,3,0,1} 不在计算<br>2、根据c[6]下标 一个个还原不就行了，完全不用再做举例里那么复杂的操作，例如c[0] = 2 说明得0分的有两个人，那么直接映射为 r[0] =0,r[1] = 0。<br>3、c[1] = 0 说明得1分的没人，那么跳过，读取 c[2] = 2，继续依次赋值 r[2]=2,r[3] = 2 <br>4、剩下的依次赋值，直到拼装r数值完全体得到{0,0,2,2,3,3,3,5}<br>","like_count":0},{"had_liked":false,"id":313226,"user_name":"MWM1C","can_delete":false,"product_type":"c1","uid":2621546,"ip_address":"","ucode":"734BD1FC119481","user_header":"https://static001.geekbang.org/account/avatar/00/28/00/6a/28659622.jpg","comment_is_top":false,"comment_ctime":1632317765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632317765","product_id":100017301,"comment_content":"终于遇到一个自己会的课后问题了QAQ，典型的前后双指针算法","like_count":0},{"had_liked":false,"id":311199,"user_name":"Tachikoma","can_delete":false,"product_type":"c1","uid":2728319,"ip_address":"","ucode":"F433B88A29D01E","user_header":"https://static001.geekbang.org/account/avatar/00/29/a1/7f/ccace689.jpg","comment_is_top":false,"comment_ctime":1631100529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631100529","product_id":100017301,"comment_content":"为了防止数据集中造成均分桶失衡，是否可以像计数排序一样先变成构建元素个数的数据，然后计算概率分布，再根据概率分布进行分桶？","like_count":0},{"had_liked":false,"id":311003,"user_name":"EveryDayIsNew","can_delete":false,"product_type":"c1","uid":1316926,"ip_address":"","ucode":"776B81EF6830FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/18/3e/f8632713.jpg","comment_is_top":false,"comment_ctime":1631013636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631013636","product_id":100017301,"comment_content":"这一篇文章就够本了","like_count":0},{"had_liked":false,"id":310347,"user_name":"癡癡的等你歸","can_delete":false,"product_type":"c1","uid":1334321,"ip_address":"","ucode":"AF950FDE0C736C","user_header":"https://static001.geekbang.org/account/avatar/00/14/5c/31/d7b92b6b.jpg","comment_is_top":false,"comment_ctime":1630601449,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630601449","product_id":100017301,"comment_content":"手机号码的那个例子，如果把手机号码转成long类型，再用数字的方式去排序是否可行？缺点是什么呢？","like_count":0},{"had_liked":false,"id":309616,"user_name":"李叶","can_delete":false,"product_type":"c1","uid":1470449,"ip_address":"","ucode":"41B33FA8526E48","user_header":"https://static001.geekbang.org/account/avatar/00/16/6f/f1/35f9f16f.jpg","comment_is_top":false,"comment_ctime":1630279129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630279129","product_id":100017301,"comment_content":"桶排序 计数排序 基数排序","like_count":0},{"had_liked":false,"id":307663,"user_name":"Juniper","can_delete":false,"product_type":"c1","uid":1174794,"ip_address":"","ucode":"1BC24554034BD3","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/0a/18201290.jpg","comment_is_top":false,"comment_ctime":1629193420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629193420","product_id":100017301,"comment_content":"感觉基数排序并不是个算法啊，它只是一个排序规则","like_count":0},{"had_liked":false,"id":307329,"user_name":"小黄鸭","can_delete":false,"product_type":"c1","uid":2708370,"ip_address":"","ucode":"2800E3A723AEBD","user_header":"https://static001.geekbang.org/account/avatar/00/29/53/92/21c78176.jpg","comment_is_top":false,"comment_ctime":1629031783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629031783","product_id":100017301,"comment_content":"老师老师，我想知道，既然桶排序内部其实是使用快排的，而快排又并非稳定，那么基数排序就不能使用桶排序才对吧？","like_count":0},{"had_liked":false,"id":306133,"user_name":"alee","can_delete":false,"product_type":"c1","uid":1128103,"ip_address":"","ucode":"7E264F4145C79E","user_header":"https://static001.geekbang.org/account/avatar/00/11/36/a7/b8c037ed.jpg","comment_is_top":false,"comment_ctime":1628397845,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628397845","product_id":100017301,"comment_content":"关于桶排序的思考<br>关于先定义桶的数量还是先定义桶的容量的问题，这个还是根据数据的有序性。<br><br>对于数值的问题，我的一种思路是可以先定义桶的数量<br>int bucketCount = 数组元素个数开方 + 1<br><br>然后元素映射通下标函数用到的 key<br>int key = (max - min) &#47; bucketCount + 1;<br><br>每个桶预设容量<br>int bucketSize = key &#47; 2 + 1;<br><br>元素映射到第 result 个桶的算法<br>int bucketIndex = (arr[i] - min) &#47; key;<br><br>当然这里面有很多动态的地方。如何优化桶大小和数量，根据数组中元素设计合理的元素映射通下标函数，对于同一个桶的排序算法选取+对于数据结构（数组还是链表）都用很多考究的地方。","like_count":0},{"had_liked":false,"id":305725,"user_name":"佳成_Cahen","can_delete":false,"product_type":"c1","uid":2324353,"ip_address":"","ucode":"88091603E3AD9B","user_header":"https://static001.geekbang.org/account/avatar/00/23/77/81/9bc87164.jpg","comment_is_top":false,"comment_ctime":1628134271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628134271","product_id":100017301,"comment_content":"用条件判断语句，没得到一个小写字母就放入数组A,否则放入数组B，然后合并","like_count":0},{"had_liked":false,"id":305266,"user_name":"Benson_Geek","can_delete":false,"product_type":"c1","uid":1519415,"ip_address":"","ucode":"D95B5C2BA09961","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/dr34H3hOMVsibL0XV1iaBWFiaTnYssX8sNjmJDpiaBUVv2X39nFzDjNpe288cKkZfH3P9sVRxZ1lzYZEcRR3vJNYtA/132","comment_is_top":false,"comment_ctime":1627896076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627896076","product_id":100017301,"comment_content":"计数排序基本过程：<br>1. 将要排序的数组中的值，作为新数组的key值，统计各个值在原数组A中出现的次数记录成新数组的value，新数组为C。<br>2. 再将新数组进行顺序求和，比如新数组是[1,2,3]，则顺序求和后变成[1,3,5]，每个值代表当前及前面所有的key在原来数组中出现的次数总和。<br>3. 遍历原数组，根据原数组A的value，在C中找到对应key = value的值，则这个value在排序后的数组中的位置index = C[A的value] - 1，<br>后再把C的对应值-1，表示数据减少一个。","like_count":0},{"had_liked":false,"id":303918,"user_name":"钠镁铝硅磷😒","can_delete":false,"product_type":"c1","uid":1575196,"ip_address":"","ucode":"40B91112F1F969","user_header":"https://static001.geekbang.org/account/avatar/00/18/09/1c/40a47446.jpg","comment_is_top":false,"comment_ctime":1627095646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627095646","product_id":100017301,"comment_content":"计数排序的统计数组还可以优化。比如数据分布在90~100之间，不需要长度为100的数组，长度为10就够了，数组下标就是元素的值和最小元素的差值。比如a[0]统计的就是90的个数，a[1]统计91的个数。","like_count":0},{"had_liked":false,"id":302972,"user_name":"Geek_9258fc","can_delete":false,"product_type":"c1","uid":2142284,"ip_address":"","ucode":"BE1C46704B2481","user_header":"","comment_is_top":false,"comment_ctime":1626488684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626488684","product_id":100017301,"comment_content":"老师，我很困惑数据分桶不需要时间吗？","like_count":0},{"had_liked":false,"id":300142,"user_name":"木木","can_delete":false,"product_type":"c1","uid":2097185,"ip_address":"","ucode":"B34D52A63FF25F","user_header":"https://static001.geekbang.org/account/avatar/00/20/00/21/88940570.jpg","comment_is_top":false,"comment_ctime":1625020190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625020190","product_id":100017301,"comment_content":"对于计数排序的理解：<br>计数排序需要计数也就是统计每份分布的个数， 然后求和， 再对原数组从后往前进行遍历， 以保证排序前后相同数字的相对顺序不变进而保证稳定性。<br>---<br><br>算法理解：<br>1、排序时候比如对C[3]中的3进行排序， C[&gt;3]处保持不变，这里不妨把C[]数组理解成这些数字在排序之后的分布个数，比如C[3]表示 &lt;= 3 的数据在排序后数组中最多占前C[3]个位置；<br><br>2、如果目前排了3这个数字，说明已经排下了一个数字3那么C[3]相应-1， C[&lt;=2]因为是对&lt;=2的数据进行排序会占用的个数，已经放置的3对它没有影响，同时对C[4]来讲，排下3对于C[4]没有影响，因此C[&gt;3]保持不变；<br><br>3、我们发现，这样排序，排序到数字 i 时，只需修改C[i]即可；","like_count":0},{"had_liked":false,"id":298039,"user_name":"🇨 🇨 🇨 明丶丶丶","can_delete":false,"product_type":"c1","uid":2571672,"ip_address":"","ucode":"474D802F6C1801","user_header":"https://static001.geekbang.org/account/avatar/00/27/3d/98/cf195379.jpg","comment_is_top":false,"comment_ctime":1623895382,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623895382","product_id":100017301,"comment_content":"课后思考<br>利用桶排序思想，有小写，大写，数字三个桶，根据ASSIC码将字符对应放入桶中，然后再从桶中取出来就行了。复杂度O(n)","like_count":0},{"had_liked":false,"id":297987,"user_name":"阿文","can_delete":false,"product_type":"c1","uid":1467219,"ip_address":"","ucode":"B53454CA52BD7E","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/53/b4590ccc.jpg","comment_is_top":false,"comment_ctime":1623860758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623860758","product_id":100017301,"comment_content":"没看懂计数排序为什么不能处理负数？不想看了，看累了。<br>D，a，F，B，c，A，z... 这个字符串进行排序的问题的问题，我觉得就可以用计数排序啊，而且空间复杂度稳定O(1)。就是技术排序的思想，准备一个c[3] 的数组。遍历第一遍字符串的字符时，判断属于哪一类统计3类字符的个数……准备一个字符串长度的数组a[str.length]，再次遍历字符串，判断字符类型，根据c 放到指定a的指定位置。<br>想法有毛病吗？","like_count":0},{"had_liked":false,"id":297670,"user_name":"dreamcasher","can_delete":false,"product_type":"c1","uid":2046980,"ip_address":"","ucode":"2AE26895FC191A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3c/04/398d2157.jpg","comment_is_top":false,"comment_ctime":1623721650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623721650","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":297630,"user_name":"Freya","can_delete":false,"product_type":"c1","uid":2004148,"ip_address":"","ucode":"BABE08587B961D","user_header":"https://static001.geekbang.org/account/avatar/00/1e/94/b4/2569f930.jpg","comment_is_top":false,"comment_ctime":1623679412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623679412","product_id":100017301,"comment_content":"我有个疑问，关于“基数”排序的例子里提到每位再按照“桶排序”或者“计数”排序进行排序，并要求该排序算法是稳定的，但是“桶排序”每个桶里是使用“快排”进行排序，而“快排”是不稳定排序，这个感觉是不可行的呀～","like_count":0},{"had_liked":false,"id":294753,"user_name":"何小明","can_delete":false,"product_type":"c1","uid":1284162,"ip_address":"","ucode":"6E544266EB00F9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/j73RKC9WPibn23aVSianxGWeG4uqbd9lEyb9UJIEhawKAwjLb2uW3HBFWgXYPXpjX7ahN30u9kDGmh7lBaribIaZA/132","comment_is_top":false,"comment_ctime":1622081919,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622081919","product_id":100017301,"comment_content":"很棒，排序算法又多会了几种。","like_count":0},{"had_liked":false,"id":294352,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1621910746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621910746","product_id":100017301,"comment_content":"课后思考：可以按照小写字母一组，大写字母一组，数字一组。分为三组。我们去遍历字符串，属于哪个组就分到哪个组中，最后遍历完毕，把三个组串起来。时间复杂度O(n),但是需要占用额外的空间，所以空间复杂度也是O(n)。不知道这样思考是否正确。","like_count":0},{"had_liked":false,"id":293491,"user_name":"吴里斯蒂亚诺.翀纳尔多","can_delete":false,"product_type":"c1","uid":1800243,"ip_address":"","ucode":"8DB9EC2AC456E2","user_header":"https://static001.geekbang.org/account/avatar/00/1b/78/33/4a91bf3d.jpg","comment_is_top":false,"comment_ctime":1621408038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621408038","product_id":100017301,"comment_content":"&#47;&#47;这是main方法<br>public static  void main(String[]args){<br>        String str=&quot;DaFBcAz14R5&quot;;<br>        char[] old=str.toCharArray();<br>        sort(old);<br>        for (char a:old){<br>          System.out.print(a+&quot;,&quot;);<br>        }<br>        System.out.println();<br>    }<br><br>&#47;&#47;这是排序方法<br> public static void sort(char[] old){<br>        int i=0;<br>        int k=old.length-1;<br>        for (int j=0;j&lt;old.length;j++){<br>            if (i==k){<br>                break;<br>            }<br>            if (old[j]&gt;=97&amp;&amp;old[j]&lt;=122){<br>               char change=old[i];<br>               old[i]=old[j];<br>               old[j]=change;<br>               i++;<br>            }else if (!Character.isDigit(old[j])&amp;&amp;j&lt;k){<br>                char change=old[k];<br>                old[k]=old[j];<br>                old[j]=change;<br>                k--;<br>            }<br>        }<br>    }<br><br>&#47;&#47;总结<br>这是通过快排思想写的代码，至于如何不通过排序算法来排序，我表示没想到。","like_count":0},{"had_liked":false,"id":293059,"user_name":"旻言","can_delete":false,"product_type":"c1","uid":1018724,"ip_address":"","ucode":"563E6A83A50EC9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/64/d8bf2f6f.jpg","comment_is_top":false,"comment_ctime":1621177678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621177678","product_id":100017301,"comment_content":"感觉桶排序的复杂度少了算了下，分桶时的时间复杂度，因为n个元素，划分到m个桶中，那么一个元素找到具体桶时间复杂度应该是O（m）（假设这里线性查找，当然可以建立起二分查找就是O（logm）），那么分桶的整个时间复杂度就是O（n*m），那么整个桶排序应该是O（n*log（n&#47;m））+O（m*n），而当m无线接近于n时，那时间复杂度是不是O（n^2），是不是我哪里思考有问题？？😅","like_count":0},{"had_liked":false,"id":292891,"user_name":"iron bo","can_delete":false,"product_type":"c1","uid":2094925,"ip_address":"","ucode":"4BFB1331637AA3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","comment_is_top":false,"comment_ctime":1621056067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621056067","product_id":100017301,"comment_content":"有一个问题，对于计数排序就是粒度最小的桶排序，我每个桶用队列来实现，保证先进先出，这样我是不是只要入桶后扫描一遍就是排好顺序的数组了，还能保证稳定性","like_count":0},{"had_liked":false,"id":291239,"user_name":"朱磊","can_delete":false,"product_type":"c1","uid":1028358,"ip_address":"","ucode":"319D61D18DDA87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b1/06/b62be1b8.jpg","comment_is_top":false,"comment_ctime":1620136147,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1620136147","product_id":100017301,"comment_content":"老师，我觉得非负整数的排序好像也可以用基数排序来做啊？","like_count":0},{"had_liked":false,"id":291023,"user_name":"双木公子","can_delete":false,"product_type":"c1","uid":1116567,"ip_address":"","ucode":"751885864D3AB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/97/4314e2d8.jpg","comment_is_top":false,"comment_ctime":1619947009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619947009","product_id":100017301,"comment_content":"https:&#47;&#47;blog.csdn.net&#47;BruceLee1314&#47;article&#47;details&#47;116353965?spm=1001.2014.3001.5502，相关算法总结。老师辛苦了","like_count":0},{"had_liked":false,"id":290421,"user_name":"梦幻","can_delete":false,"product_type":"c1","uid":2587331,"ip_address":"","ucode":"C5566040B8744F","user_header":"https://static001.geekbang.org/account/avatar/00/27/7a/c3/f036e75f.jpg","comment_is_top":false,"comment_ctime":1619535390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619535390","product_id":100017301,"comment_content":"第一遍遍历统计大小写字母的个数,然后判断是大小写字母还是数字往数组里塞数据就可以了?","like_count":0},{"had_liked":false,"id":290401,"user_name":"ฅSlekฅ","can_delete":false,"product_type":"c1","uid":2436755,"ip_address":"","ucode":"B732C672B3D301","user_header":"https://static001.geekbang.org/account/avatar/00/25/2e/93/81e3e4ca.jpg","comment_is_top":false,"comment_ctime":1619526083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619526083","product_id":100017301,"comment_content":"计数排序秒啊","like_count":0},{"had_liked":false,"id":288037,"user_name":"RyuGou","can_delete":false,"product_type":"c1","uid":1200793,"ip_address":"","ucode":"8D424CB6005DD7","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/99/4a7f2fc9.jpg","comment_is_top":false,"comment_ctime":1618278853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618278853","product_id":100017301,"comment_content":"计数排序那个，50万考生排序，直接没个分数一个桶，每个人的分数扔桶里，再把每个桶连起来，不就完成了吗","like_count":0},{"had_liked":false,"id":287389,"user_name":"长艺佳人","can_delete":false,"product_type":"c1","uid":1168228,"ip_address":"","ucode":"94981E9FDFFF75","user_header":"https://static001.geekbang.org/account/avatar/00/11/d3/64/2c7324eb.jpg","comment_is_top":false,"comment_ctime":1617929131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617929131","product_id":100017301,"comment_content":"第二个问题，设立三个数组，大小分别为26、26、10，分别存放大写字母、小写数字、数字。遍历原字符串，如果是字母，就将其减去A（a）之后放到数组对应下标位置；如果是数字，则也放到对应下标的位置。如果存在相同元素，则在相应位置指向一个链表，将其插入链表开头。<br><br>最后将三个数组的元素依次取出。","like_count":0},{"had_liked":false,"id":287107,"user_name":"帝江","can_delete":false,"product_type":"c1","uid":1590610,"ip_address":"","ucode":"93CBA4E4D05DA5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B9vSOjMc2a86kYA8R5yDkVdFiaj2JeBZ1PuI9oUKhbnvuZwuibdUam6FTcGzDaiaFdk2GWJveUGhfCVpv4KaOdicoQ/132","comment_is_top":false,"comment_ctime":1617778499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617778499","product_id":100017301,"comment_content":"好像抓住了什么<br>排序的本质是将所有元素放到正确的位置上.<br>所谓基于比较的排序.其实是位置不确定.所以需要通过比较来确定位置.公式:元素☆元素=&gt;位置<br>而本节课将的是位置已经确定了.这时候只需要完成把元素放到正确的位置上就可以了.元素=&gt;位置.<br>计数排序之所以说不是基于比较的排序.是因为元素之间没有比较.但是位置(桶)与位置(桶)之间排序了.所以我认为也是一种基于比较的排序.只不过不是元素比较.而是位置比较.","like_count":0},{"had_liked":false,"id":286388,"user_name":"椰子Tyshawn","can_delete":false,"product_type":"c1","uid":1241147,"ip_address":"","ucode":"137F129D2AB3FC","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/3b/f5c4cd81.jpg","comment_is_top":false,"comment_ctime":1617276253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617276253","product_id":100017301,"comment_content":"基数排序<br>public static void ratioSort(int[] nums) {<br>        int max = 0;<br>        for (int i = 0; i &lt; nums.length; i++) {<br>            if (nums[i] &gt; max) {<br>                max = nums[i];<br>            }<br>        }<br><br>        int len = String.valueOf(max).length();<br><br>        &#47;&#47;123<br>        int j = 1;<br>        while (len-- &gt; 0) {<br>            Map&lt;Integer, List&lt;Integer&gt;&gt; bucket = new HashMap&lt;&gt;();<br>            for (int i = 0; i &lt; 10; i++) {<br>                bucket.put(i, new ArrayList&lt;&gt;());<br>            }<br><br>            for (int i = 0; i &lt; nums.length; i++) {<br>                int k = (nums[i] &#47; j) % 10;<br>                bucket.get(k).add(nums[i]);<br>            }<br>            int k = 0;<br>            for (int i = 0; i &lt; 10; i++) {<br>                for (int r = 0; r &lt; bucket.get(i).size(); r++) {<br>                    nums[k++] = bucket.get(i).get(r);<br>                }<br>            }<br><br>            j *= 10;<br>        }<br>    }","like_count":0},{"had_liked":false,"id":285740,"user_name":"James Deng","can_delete":false,"product_type":"c1","uid":1109553,"ip_address":"","ucode":"7B63984F2C2C52","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/31/8a5cd41d.jpg","comment_is_top":false,"comment_ctime":1616997939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616997939","product_id":100017301,"comment_content":"老师，c[6] 顺序求合后后的值是怎么计算来的，没有很理解。","like_count":0},{"had_liked":false,"id":285711,"user_name":"草鱼禾","can_delete":false,"product_type":"c1","uid":2184778,"ip_address":"","ucode":"06865069745DBF","user_header":"https://static001.geekbang.org/account/avatar/00/21/56/4a/6e3e0bbd.jpg","comment_is_top":false,"comment_ctime":1616987611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616987611","product_id":100017301,"comment_content":"设计一个长度为123的数组char[123]，然后遍历。碰到数字就停下，取得对应的ascii值，再+43,得到下标，再讲数字存入到对应下标中。若遇到大写字母则取得ASCII十进制值，再+32，得到下标，再将大写字母存入对应下标中。若遇到小写字母则取得ASCII十进制值，再-32，得到下标，再讲小写字母存入对应下标中。最后遍历输出数组。","like_count":0},{"had_liked":false,"id":285203,"user_name":"Superh","can_delete":false,"product_type":"c1","uid":2304810,"ip_address":"","ucode":"B6394479A3AB1E","user_header":"https://static001.geekbang.org/account/avatar/00/23/2b/2a/51e51255.jpg","comment_is_top":false,"comment_ctime":1616664828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616664828","product_id":100017301,"comment_content":"桶排序是不是要n的时间复杂度，咋不强调一下","like_count":0},{"had_liked":false,"id":283986,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":2009059,"ip_address":"","ucode":"E4E5A25AF08961","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLT5FUVKibUC0YcbkIkDmaoXBTP872icNbL4mTgiaQO97yOZ6Ff5r3IhYibpInia153858libloqw7n2obw/132","comment_is_top":false,"comment_ctime":1616030342,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1616030342","product_id":100017301,"comment_content":"桶排序：将数据划分为m个桶分别进行排序，适用于外部数据较大且容易划分<br>计数排序：桶排序的特例，m不大的情况，桶内部无需排序，只做计数<br>基数排序：数据不同位之间具有递进关系，可以按位排序","like_count":0},{"had_liked":false,"id":283952,"user_name":"鲸与海","can_delete":false,"product_type":"c1","uid":2391640,"ip_address":"","ucode":"240FD9F861649B","user_header":"https://static001.geekbang.org/account/avatar/00/24/7e/58/b3f42974.jpg","comment_is_top":false,"comment_ctime":1615993835,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615993835","product_id":100017301,"comment_content":"有java写的嘛","like_count":0},{"had_liked":false,"id":283877,"user_name":"CoffeeMilk","can_delete":false,"product_type":"c1","uid":1522119,"ip_address":"","ucode":"EC3B6AD4FD392A","user_header":"https://static001.geekbang.org/account/avatar/00/17/39/c7/cf40613f.jpg","comment_is_top":false,"comment_ctime":1615970035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615970035","product_id":100017301,"comment_content":"请问一下桶排序中的数组扩容函数里面【int[] tempArr = buckets[bucketIndex表示什么含义？];】其中【int[][] buckets是二维数组】","like_count":0},{"had_liked":false,"id":283281,"user_name":"lamb","can_delete":false,"product_type":"c1","uid":1788774,"ip_address":"","ucode":"ED67FDCA8BB85F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4b/66/bac3697b.jpg","comment_is_top":false,"comment_ctime":1615687678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615687678","product_id":100017301,"comment_content":"<br>10g数据并不是按金额排序的，一次扫描筛选出放入不同bucket，这些bucket是全部驻在内存，内存大小是不够的","like_count":0},{"had_liked":false,"id":279644,"user_name":"徐改","can_delete":false,"product_type":"c1","uid":1298380,"ip_address":"","ucode":"82276A584AC602","user_header":"https://static001.geekbang.org/account/avatar/00/13/cf/cc/8de5007b.jpg","comment_is_top":false,"comment_ctime":1613888528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613888528","product_id":100017301,"comment_content":"可以借用桶排序的思想，划定范围：<br>如果只有大小写字母，那需要使用到两个桶，第一个桶存储的是ASCII码在97~122之间的字符，第二个桶存储的是ASCII码在65~90之间的字符。然后遍历给定的数组，将每个字符对应的ASCII码放入相应的桶中，然后顺序取出桶中的元素，即可完成分类。<br>如果又包含了数字，那再使用一个桶，存储的是ASCII码在48~57之间的字符，那便可以实现小写字母在前，数字在中，大写字母在后的分类要求。","like_count":0},{"had_liked":false,"id":276258,"user_name":"king","can_delete":false,"product_type":"c1","uid":1100439,"ip_address":"","ucode":"FFC090D0EF1F80","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/97/5042c207.jpg","comment_is_top":false,"comment_ctime":1611849618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611849618","product_id":100017301,"comment_content":"桶排序是稳定的，那它内部用快排不就不稳定了？---------每个桶内部使用快速排序，时间复杂度为 O(k * logk)。m 个桶排序的时间复杂度就是 O(m * k * logk)，因为 k=n&#47;m，所以整个桶排序的时间复杂度就是 O(n*log(n&#47;m))。当桶的个数 m 接近数据个数 n 时，log(n&#47;m) 就是一个非常小的常量，这个时候桶排序的时间复杂度接近 O(n)。","like_count":0},{"had_liked":false,"id":276095,"user_name":"Jason.li","can_delete":false,"product_type":"c1","uid":2353767,"ip_address":"","ucode":"A7C99173BC1C06","user_header":"https://static001.geekbang.org/account/avatar/00/23/ea/67/9f3ca37c.jpg","comment_is_top":false,"comment_ctime":1611793844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611793844","product_id":100017301,"comment_content":"思考题，分3类，丢3个桶里，然后并在一起","like_count":0},{"had_liked":false,"id":273958,"user_name":"ano","can_delete":false,"product_type":"c1","uid":1783342,"ip_address":"","ucode":"7DE64BDFA78550","user_header":"https://static001.geekbang.org/account/avatar/00/1b/36/2e/376a3551.jpg","comment_is_top":false,"comment_ctime":1610766735,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610766735","product_id":100017301,"comment_content":"public class CountingSort {<br>    public void sort(int[] ary, int n) {<br>        if (n &lt;= 1) return;<br><br>        int max = getArrayMax(ary);<br>        int[] counts = new int[max + 1];<br><br>        initCounts(counts);<br>        storeCounts(counts, ary);<br>        accumulateCounts(counts);<br><br>        int[] result = new int[n];<br>        generateResult(result, ary, counts);<br><br>        arraycopy(result, 0, ary, 0, n);<br>    }<br><br>    private void generateResult(int[] result, int[] ary, int[] counts) {<br>        int n = ary.length;<br>        for (int i = n - 1; i &gt;= 0; --i) {<br>            final int cur = ary[i];<br>            int index = counts[cur] - 1;<br>            result[index] = cur;<br>            counts[cur]--;<br>        }<br>    }<br><br>    private static void arraycopy(int[] src, int srcPos, int[] dest, int destPos, int length) {<br>        for (int i = 0; i &lt; length; i++) {<br>            dest[destPos + i] = src[srcPos + i];<br>        }<br>    }<br><br>    private void initCounts(int[] counts) {<br>        for (int i = 0; i &lt; counts.length; ++i) counts[i] = 0;<br>    }<br><br>    private void storeCounts(int[] counts, int[] ary) {<br>        for (int e : ary) counts[e]++;<br>    }<br><br>    private void accumulateCounts(int[] counts) {<br>        for (int i = 1; i &lt; counts.length; ++i) counts[i] += counts[i - 1];<br>    }<br><br>    private int getArrayMax(int[] ary) {<br>        int max = ary[0];<br>        for (int i = 1; i &lt; ary.length; ++i) {<br>            if (ary[i] &gt; max) max = ary[i];<br>        }<br>        return max;<br>    }<br>}","like_count":0},{"had_liked":false,"id":273541,"user_name":"tonight","can_delete":false,"product_type":"c1","uid":1693785,"ip_address":"","ucode":"9D51BB923621E1","user_header":"","comment_is_top":false,"comment_ctime":1610630318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610630318","product_id":100017301,"comment_content":"桶排序为什么不适合用于数据范围较大的数据呢？是因为数据范围太大会导致空间复杂度过高吗？","like_count":0},{"had_liked":false,"id":272995,"user_name":"宙斯","can_delete":false,"product_type":"c1","uid":2041396,"ip_address":"","ucode":"80DF36BAD298AD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","comment_is_top":false,"comment_ctime":1610381757,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1610381757","product_id":100017301,"comment_content":"最后思考题解答：<br>用三个桶来保存小写数字和大写字母。<br>最后将三个桶一次遍历覆盖以前位置上的字符即可","like_count":0},{"had_liked":false,"id":271744,"user_name":"Geek_f309ca","can_delete":false,"product_type":"c1","uid":1635588,"ip_address":"","ucode":"E656C6A4AC3795","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/mib9kN41T9grP3g7gkvLnqH8rFyRs2W2CAT5tibVy1k5S8BZjT3P7kWHpAfOPiaWryXM1jtMpvl4HytXIYTyLmPhQ/132","comment_is_top":false,"comment_ctime":1609773624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609773624","product_id":100017301,"comment_content":"老师，那个给10万个手机号码 排序的问题，需要先分桶？ 如果分桶 该怎么分 比较合适呢？ 一个位分一个桶？需要考虑 位与位之间的组合？","like_count":0},{"had_liked":false,"id":269175,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1608547042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608547042","product_id":100017301,"comment_content":"课后思考：通过分类，数字是一组，小写字母是一组，大写字母是一组。最后按照小写字母在前，大写在后，数字中间排序就可以了。时间复杂度O(n).","like_count":0},{"had_liked":false,"id":269146,"user_name":"YUAN元","can_delete":false,"product_type":"c1","uid":2278571,"ip_address":"","ucode":"3E61E785BAA7AB","user_header":"https://static001.geekbang.org/account/avatar/00/22/c4/ab/49f21c62.jpg","comment_is_top":false,"comment_ctime":1608538743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608538743","product_id":100017301,"comment_content":"基数排序为什么不是从前往后排？这样效率更高。比如你举的字母的例子，从前往后两次排序就完成了。第三次只需比较，不需要交换。如果是四位的话，可以加入变量，当第三次没有交换的时候，就可以结束排序，不需要后面的第四次。如果从后往前就必须是四次。而且从前往后，也是稳定排序啊。","like_count":0},{"had_liked":false,"id":269041,"user_name":"秀强","can_delete":false,"product_type":"c1","uid":1206297,"ip_address":"","ucode":"D8840D21CDF14F","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/19/ee4b7586.jpg","comment_is_top":false,"comment_ctime":1608483960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608483960","product_id":100017301,"comment_content":"计数排序的代码建议大家对着图看，就非常容易理解了。","like_count":0},{"had_liked":false,"id":268970,"user_name":"性感码农在线 Coding","can_delete":false,"product_type":"c1","uid":1516678,"ip_address":"","ucode":"49739A61040C5A","user_header":"https://static001.geekbang.org/account/avatar/00/17/24/86/5e94cca6.jpg","comment_is_top":false,"comment_ctime":1608453042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608453042","product_id":100017301,"comment_content":"思考题这个感觉用正则匹配的方式就可以了吧。。<br>String seedData = &quot;DaFBcAz&quot;;<br>Pattern lowerLetter = Pattern.compile(&quot;[a-z]&quot;);<br>Pattern higherLetter = Pattern.complie(&quot;[A-Z]&quot;);<br>Matcher lMatch = lowerLetter.match(seedData);<br>String low = &quot;&quot;;<br>for ... low += match.group() ...<br>Matcher hMatch = higherLetter.match(seedData);<br>String high = &quot;&quot;;<br>for ... high += match.group() ....<br>String finalResult = low + high;","like_count":0},{"had_liked":false,"id":268707,"user_name":"尼丘士多","can_delete":false,"product_type":"c1","uid":1652071,"ip_address":"","ucode":"234FAD63EB7E49","user_header":"https://static001.geekbang.org/account/avatar/00/19/35/67/725354db.jpg","comment_is_top":false,"comment_ctime":1608299605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608299605","product_id":100017301,"comment_content":"用快排思想，取最后一位作为标准元素，将其他元素与标准元素对比，小写放左边，大写放右边，最后标准数放中间。","like_count":0},{"had_liked":false,"id":268290,"user_name":"余涛","can_delete":false,"product_type":"c1","uid":1934021,"ip_address":"","ucode":"4D046B22A887C4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo0uvib9FemSaZOI3GA0cI9GicO5XBqibun8PfmckAh6Oof7U5nUHlfXhFwNqvLzhVbch70COqWQr7Ag/132","comment_is_top":false,"comment_ctime":1608126195,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608126195","product_id":100017301,"comment_content":"有个问题，120个桶，怎么确定放哪个桶啊？如果你比对的话，每个元素最差可能要比120次，如果直接用年龄作为桶数组下标，那这应该叫索引散列法啊","like_count":0},{"had_liked":false,"id":266810,"user_name":"徐志超-Klaus","can_delete":false,"product_type":"c1","uid":2343086,"ip_address":"","ucode":"CF26B39965F2A2","user_header":"https://static001.geekbang.org/account/avatar/00/23/c0/ae/e5e62510.jpg","comment_is_top":false,"comment_ctime":1607494322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607494322","product_id":100017301,"comment_content":"思路：<br>基数排序=&gt;稳定排序低位到高位=&gt;稳定计数排序低位到高位<br>步骤：<br>1）设对数组 A[n] 排序<br>2）新建数组 R[n]<br>3）新建数组 B[10]<br>4）遍历数组 A[n] 根据个位数，在 B[10] 里计数<br>5）数组 B[10] 里执行累加操作<br>6）倒着遍历数组 A[n] ，根据 B[10] 里的数放入 R[n] ，使 R[n] 里个位有序（倒着遍历为了稳定性）<br>7）再使用上述456步骤的方法，将R[n]里的数据，放入 A[n] 里，使 A[n] 里 个位、十位 有序，以此类推<br>8）关于 A[n] 数组和 R[n] 数组之间的切换，使用环形链表.next来实现，思路相对简洁清晰<br><br>时间复杂度O(kn)其中k为最大位数；空间复杂度O(n+baseNum)，此处基数baseNum为10<br>一点愚见，想到就来评论了，未尝试，望指正、讨论。","like_count":0},{"had_liked":false,"id":264497,"user_name":"小彬","can_delete":false,"product_type":"c1","uid":2063911,"ip_address":"","ucode":"8688FD8E7BAA4F","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7e/27/c2502abf.jpg","comment_is_top":false,"comment_ctime":1606479824,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606479824","product_id":100017301,"comment_content":"技术排序为什么要累加一次呢？直接遍历技术数组，根据下标将数字填充指定个数个不就可以了吗？","like_count":0},{"had_liked":false,"id":262594,"user_name":"你微笑时好美","can_delete":false,"product_type":"c1","uid":1508661,"ip_address":"","ucode":"BC18A533DC9410","user_header":"https://static001.geekbang.org/account/avatar/00/17/05/35/970beb60.jpg","comment_is_top":false,"comment_ctime":1605775601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605775601","product_id":100017301,"comment_content":"思考题可以考虑使用栈来实现，先倒序遍历大写字母依次压栈。再顺序遍历小写字母，小写字母遍历完毕，再依次弹栈。","like_count":0},{"had_liked":false,"id":260619,"user_name":"ɴɪᴋᴇʀ","can_delete":false,"product_type":"c1","uid":1616622,"ip_address":"","ucode":"DB7D92CBB5FD15","user_header":"https://static001.geekbang.org/account/avatar/00/18/aa/ee/15c328ca.jpg","comment_is_top":false,"comment_ctime":1605072139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605072139","product_id":100017301,"comment_content":"个人觉得可以先做一下LeetCode移动零的题目。对于小写字母，数字，大写字母，可以先用双指针正向扫描，移动小写字母到最前。再用双指针逆向扫描，移动大写字母到最后，就ok了。","like_count":0},{"had_liked":false,"id":260107,"user_name":"dyh_zero","can_delete":false,"product_type":"c1","uid":2052088,"ip_address":"","ucode":"98029D72597EF2","user_header":"","comment_is_top":false,"comment_ctime":1604924784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604924784","product_id":100017301,"comment_content":"老师计数排序，得到C[6]={2,.,2,3,0,1}  应该可以直接得到排序后的数据。  感觉后面是多余的处理","like_count":0},{"had_liked":false,"id":259937,"user_name":"Nullptr","can_delete":false,"product_type":"c1","uid":1911665,"ip_address":"","ucode":"8EC72438680F8D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLpCwvSDHKuwJklN3gosIbJh0AX97ULSXw4cgopjU28eQHR7DxcCWDFSBv7ZQJElBuCFu58xoWaTg/132","comment_is_top":false,"comment_ctime":1604891933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604891933","product_id":100017301,"comment_content":"用两个指针，一个在前指向大写字母，一个在后指向小写。如果是这样就交换，然后前的加加，后的减减","like_count":0},{"had_liked":false,"id":259489,"user_name":"辛大人","can_delete":false,"product_type":"c1","uid":2292072,"ip_address":"","ucode":"1360D3C7BD729D","user_header":"https://static001.geekbang.org/account/avatar/00/22/f9/68/66fb097b.jpg","comment_is_top":false,"comment_ctime":1604735462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604735462","product_id":100017301,"comment_content":"我们只需要依次扫描每个桶，将桶内的考生依次输出到一个数组中，就实现了 50 万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是 O(n)。<br>这里将50万考生划分到这 901 个桶里不需要时间的吗？求解......","like_count":0},{"had_liked":false,"id":258120,"user_name":"杨逸林","can_delete":false,"product_type":"c1","uid":1167233,"ip_address":"","ucode":"4BF3CF3E2F1AC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/81/96f656ef.jpg","comment_is_top":false,"comment_ctime":1604305599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604305599","product_id":100017301,"comment_content":"我怎么越看桶排序越像 HBase 里面用到的，先按照 RowKey 分桶，然后比较 RowKey 的 ASCII 码值，实现快速查找。如果分桶策略不好，每个分桶数据的数据差很多，会导致查询缓慢。","like_count":0},{"had_liked":false,"id":257216,"user_name":"菜帅帅帅","can_delete":false,"product_type":"c1","uid":1037687,"ip_address":"","ucode":"A70D1BD8DFA8F1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d5/77/fbbd42f8.jpg","comment_is_top":false,"comment_ctime":1603885013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603885013","product_id":100017301,"comment_content":"课后思考题，双指针解法：<br>&#47;&#47; 测试数据<br>&#47;&#47; var arr = [&#39;D&#39;, &#39;a&#39;, &#39;F&#39;, &#39;B&#39;, &#39;c&#39;, &#39;A&#39;, &#39;z&#39;];<br>&#47;&#47; var arr = [&#39;d&#39;, &#39;a&#39;, &#39;q&#39;, &#39;B&#39;, &#39;c&#39;, &#39;A&#39;, &#39;z&#39;];<br>&#47;&#47; var arr = [&#39;A&#39;, &#39;M&#39;, &#39;D&#39;, &#39;a&#39;, &#39;q&#39;, &#39;B&#39;, &#39;c&#39;, &#39;A&#39;, &#39;z&#39;, &#39;r&#39;];<br><br>function letterSort(arr) {<br><br>  &#47;** 判断是否是小写 *&#47;<br>  function isLowerCase(str) {<br>    return str === str.toLowerCase();<br>  }<br><br>  &#47;**<br>   * 下标i之前都是已经放置好的小写字母<br>   * 下标j负责遍历所有元素<br>   *&#47;<br>  let i = 0, j = 1;<br>  while(j &lt; arr.length) {<br>    const iIsLower = isLowerCase(arr[i]);<br>    const jIsLower = isLowerCase(arr[j]);<br>    &#47;&#47; 如果j是大写，j继续向前<br>    if (!jIsLower) {<br>      j++;<br>    } else {<br>      &#47;&#47; 如果j是小写 那么在i是大写的情况下 需要交换<br>      if (!iIsLower) {<br>        [arr[i], arr[j]] = [arr[j], arr[i]];<br>      }<br>      i++;<br>      j++;<br>    }<br>  }<br><br>  console.log(&#39;result=&gt;&#39;, arr);<br>}","like_count":0},{"had_liked":false,"id":254989,"user_name":"拉布拉多","can_delete":false,"product_type":"c1","uid":1204353,"ip_address":"","ucode":"637A88D9F29F57","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","comment_is_top":false,"comment_ctime":1603245636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603245636","product_id":100017301,"comment_content":"我们从后到前依次扫描数组 A。----请问为什么？因为计数排序是稳定排序？那跟从前、或从后开始有啥关系？难道从前面开始就不能保证前面的数排序后还在前面，那就不是稳定排序了？","like_count":0},{"had_liked":false,"id":254828,"user_name":"Geek_1d3fdc","can_delete":false,"product_type":"c1","uid":2223198,"ip_address":"","ucode":"A9E79B272B3608","user_header":"","comment_is_top":false,"comment_ctime":1603195571,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603195571","product_id":100017301,"comment_content":"课后思考题：1）用桶排序，准备两个桶，遍历一遍数组，一个装大写字母，另外一个装小写字母。最后依次取出来即可。","like_count":0},{"had_liked":false,"id":253890,"user_name":"zmou-d","can_delete":false,"product_type":"c1","uid":1031912,"ip_address":"","ucode":"0364B73B308B61","user_header":"https://static001.geekbang.org/account/avatar/00/0f/be/e8/868f1349.jpg","comment_is_top":false,"comment_ctime":1602938032,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602938032","product_id":100017301,"comment_content":"大小写字母和数字排序，可以借助快排的那个中间步骤，第一轮先把所有小写字母放到最前面，非小写字母放到后面，然后第二轮对非小写字母集合再次应用刚刚的过程，把数字放到当前集合的前面，非数字（此时也就是大写字母）放到后面；最终就是小写字母 - 数字 - 大写字母","like_count":0},{"had_liked":false,"id":253134,"user_name":"灯盖","can_delete":false,"product_type":"c1","uid":1482839,"ip_address":"","ucode":"0F8455A593D60C","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/57/3a729755.jpg","comment_is_top":false,"comment_ctime":1602627446,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1602627446","product_id":100017301,"comment_content":"打卡20201014","like_count":0},{"had_liked":false,"id":252926,"user_name":"张浩","can_delete":false,"product_type":"c1","uid":1001225,"ip_address":"","ucode":"DBEAFFB7660813","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/09/316b0aa1.jpg","comment_is_top":false,"comment_ctime":1602517158,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1602517158","product_id":100017301,"comment_content":"桶排序的原理，像是先把有相同属性的元素分在一起进行排序，然后再把不同属性的元素集合进行排序，分而治之的思想，也在其中提现了。","like_count":0},{"had_liked":false,"id":252454,"user_name":"追梦","can_delete":false,"product_type":"c1","uid":1197685,"ip_address":"","ucode":"634A19055525B3","user_header":"https://static001.geekbang.org/account/avatar/00/12/46/75/9f80409f.jpg","comment_is_top":false,"comment_ctime":1602307549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602307549","product_id":100017301,"comment_content":"您好，对于计数排序仅支持非负整数这点有个疑问，我认为如果基于数组实现，由于值作为数组下标那么计数排序仅支持非负整数毋庸置疑。但倘若基于map实现，是不是计数排序就没有仅支持非负整数这个限制了呢？","like_count":0},{"had_liked":false,"id":251024,"user_name":"jiaozhuchen","can_delete":false,"product_type":"c1","uid":1510471,"ip_address":"","ucode":"65A696D75C0577","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI9cqxrtYLlu0XvlU6J7LwEn67cL9fbnJrI6UjankWwbhiaeDQ8fI2LtjMMVMFIGKSlUyeKmN29SMg/132","comment_is_top":false,"comment_ctime":1601335442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601335442","product_id":100017301,"comment_content":"高考相同分数的，会按单科分数排序，所以高考名次，其实是一种基数排序？先按英语有序，再数学有序，……，再总分有序，借助稳定性，所有考生有序","like_count":0},{"had_liked":false,"id":249412,"user_name":"星朝","can_delete":false,"product_type":"c1","uid":1848539,"ip_address":"","ucode":"DFCF2512D6DAE0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/LqGZd83zp1y9fpbliaSgGh5qib5eGzU41xibTzib06ZAlaiaJibkJB89JuVEozCScUsVK90jpq7Na30AHDngQzI7YwiaA/132","comment_is_top":false,"comment_ctime":1600651758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600651758","product_id":100017301,"comment_content":"先用ASCII码补零后排序大小写字母，然后数字单独出来","like_count":0},{"had_liked":false,"id":246392,"user_name":"A.黄老邪","can_delete":false,"product_type":"c1","uid":2159710,"ip_address":"","ucode":"1B9D2DFFD07BA6","user_header":"https://static001.geekbang.org/account/avatar/00/20/f4/5e/a60128ca.jpg","comment_is_top":false,"comment_ctime":1599306677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599306677","product_id":100017301,"comment_content":"感觉基数排序，就是桶排序的嵌套用法","like_count":0},{"had_liked":false,"id":246143,"user_name":"王世林","can_delete":false,"product_type":"c1","uid":1076155,"ip_address":"","ucode":"2BB56D0FD71417","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/bb/10aaf123.jpg","comment_is_top":false,"comment_ctime":1599188158,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599188158","product_id":100017301,"comment_content":"工作4年左右，业务代码写烦了，看算法吸收快了","like_count":0},{"had_liked":false,"id":246142,"user_name":"王世林","can_delete":false,"product_type":"c1","uid":1076155,"ip_address":"","ucode":"2BB56D0FD71417","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/bb/10aaf123.jpg","comment_is_top":false,"comment_ctime":1599188053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599188053","product_id":100017301,"comment_content":"快排代码<br><br>public static void main(String[] args) {<br>    int[] a = {1,4,2,0,4,9,3,7,10,20,30,11};<br>    quickSort(0, a.length -1, a);<br>    System.out.println(Arrays.asList(a));<br>}<br><br>private static void quickSort(int i, int j, int[] a) {<br>    if (i &gt;= j) {<br>        return;<br>    }<br><br>    int votIdx =  j;<br>    int vot = a[votIdx];<br><br>    int m = i;<br>    for (int n = i; n &lt;= j; n++) {<br>        if (a[n] &lt; vot) {<br>            swap(m, n, a);<br>            m++;<br>        }<br>    }<br>    swap(m, votIdx, a);<br>    quickSort(i, m-1, a);<br>    quickSort(m+1, j, a);<br>}<br><br>private static void swap(int i, int j, int[] a) {<br>    int value = a[i];<br>    a[i] = a[j];<br>    a[j] = value;<br>}","like_count":0},{"had_liked":false,"id":245936,"user_name":"Mr.Archer","can_delete":false,"product_type":"c1","uid":1693832,"ip_address":"","ucode":"B1768E5B3088DD","user_header":"https://static001.geekbang.org/account/avatar/00/19/d8/88/61a274a6.jpg","comment_is_top":false,"comment_ctime":1599115046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599115046","product_id":100017301,"comment_content":"我想请问下，在描述桶排序的那个部分，说了臊面磁盘文件将10GB的数据放到100个文件中，因为10GB的数据时放在磁盘中的，这个分文件的过程会有大量的IO操作吧，这个操作产生的资源消耗和时间消耗应该计入到桶排序的过程中吗","like_count":0},{"had_liked":false,"id":244467,"user_name":"庄坤","can_delete":false,"product_type":"c1","uid":1610407,"ip_address":"","ucode":"5E1C3E234BB793","user_header":"https://static001.geekbang.org/account/avatar/00/18/92/a7/b16dfff3.jpg","comment_is_top":false,"comment_ctime":1598526825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598526825","product_id":100017301,"comment_content":"如果桶排序的时间复杂度为O(n)，我们要对数据进行分桶也只需要O(n)，加起来也就2n，为什么桶排序不能用来代替快排呢，分桶好像不难啊，不是很理解","like_count":0},{"had_liked":false,"id":244222,"user_name":"随风","can_delete":false,"product_type":"c1","uid":1476862,"ip_address":"","ucode":"037CE3554D8AB9","user_header":"https://static001.geekbang.org/account/avatar/00/16/88/fe/c18a85fe.jpg","comment_is_top":false,"comment_ctime":1598432746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598432746","product_id":100017301,"comment_content":"计数排序最后为什么要从后往前遍历呢？从前往后也一样可以。","like_count":0},{"had_liked":false,"id":244024,"user_name":"随风","can_delete":false,"product_type":"c1","uid":1476862,"ip_address":"","ucode":"037CE3554D8AB9","user_header":"https://static001.geekbang.org/account/avatar/00/16/88/fe/c18a85fe.jpg","comment_is_top":false,"comment_ctime":1598356041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598356041","product_id":100017301,"comment_content":"def sortLetter(s:str):<br>    arr = list(s)<br>    left = 0<br>    right = len(arr) - 1<br><br>    # 先把小写字母数字和大写字母分开(右侧大写字母，左侧小写字母和数字)<br>    while left &lt; right:<br>        if not arr[left].isupper():<br>            left += 1<br>        else:<br>            if arr[right].isupper():<br>                right -= 1<br>            else:<br>                _swap(arr, left, right)<br>    print(left)<br>    # 再把小写字母和数字分开<br>    seq = left - 1<br>    left = 0<br>    right = seq<br>    while left &lt; right:<br>        if arr[left].islower():<br>            left +=1<br>        else:<br>            if arr[right].isdigit():<br>                right -= 1<br>            else:<br>                _swap(arr, left, right)<br><br>    return &#39;&#39;.join(arr)","like_count":0},{"had_liked":false,"id":243405,"user_name":"快乐的大⭐","can_delete":false,"product_type":"c1","uid":2128340,"ip_address":"","ucode":"9C460C4E714C51","user_header":"","comment_is_top":false,"comment_ctime":1598090543,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598090543","product_id":100017301,"comment_content":"直接基数排序，根据首字母的ASIC码表的大小排序，数字相对于小，大写字母中间，小子字母最大","like_count":0},{"had_liked":false,"id":242981,"user_name":"theory18","can_delete":false,"product_type":"c1","uid":1339502,"ip_address":"","ucode":"F3C96051F563F8","user_header":"https://static001.geekbang.org/account/avatar/00/14/70/6e/8f9d9fe9.jpg","comment_is_top":false,"comment_ctime":1597910921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597910921","product_id":100017301,"comment_content":"实际上，根据年龄给 100 万用户排序，就类似按照成绩给 50 万考生排序。我们假设年龄的范围最小 1 岁，最大不超过 120 岁。我们可以遍历这 100 万用户，根据年龄将其划分到这 120 个桶里，然后依次顺序遍历这 120 个桶中的元素。<br><br>突然想到，100万用户中最大年龄可能会超过120，导致我们无法准确获知桶的数量。想了一个方法，超过120岁的人占少数，我们可以单独用一个最小堆来存储超过120岁的，不超过120岁的还是使用桶排序，这样通过多少分离的方式就可以完美解决年龄排序的问题了","like_count":0},{"had_liked":false,"id":240582,"user_name":"rice","can_delete":false,"product_type":"c1","uid":2033770,"ip_address":"","ucode":"7F50AEABE82BB5","user_header":"https://static001.geekbang.org/account/avatar/00/1f/08/6a/20500b73.jpg","comment_is_top":false,"comment_ctime":1596983668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596983668","product_id":100017301,"comment_content":"&#47;**<br> * @Description 对字符串进行排序<br> * 要求: 小写字母的放到前面，大写字母放在最后，数字放在中间，不用排序算法，要怎么解决呢？<br> * 运用双指针进行处理, 首先对小写字母和数字与大写字母进行区分,然后在对小写字母与数字进行区分<br> * 而双指针的终止条件是头尾指针相遇<br> * @Author rice<br> * @Date 2020-08-09 15:24:35<br> *&#47;<br>public class HandleLetterAndNumber {<br><br>\tpublic static Character[] handleLetterAndLetter(Character[] originalArray) {<br>\t\t&#47;&#47; 小写字母和数字与大写字母进行区分, 并获取两种数据的分界线<br>\t\tint tail = handle(originalArray, c -&gt; Character.isLowerCase(c) || Character.isDigit(c), originalArray.length - 1);<br>\t\t&#47;&#47; 小写字母与数字进行区分<br>\t\thandle(originalArray, Character::isLowerCase, tail);<br>\t\treturn originalArray;<br>\t}<br><br>\tprivate static &lt;T&gt; int handle(T[] originalArray, Predicate&lt;T&gt; conditions, int tail) {<br><br>\t\tint head = 0;<br>\t\twhile (head != tail) {<br>\t\t\tif (!conditions.test(originalArray[head])) {<br>\t\t\t\tif (conditions.test(originalArray[tail])) {<br>\t\t\t\t\tswap(head, tail, originalArray);<br>\t\t\t\t} else {<br>\t\t\t\t\ttail--;<br>\t\t\t\t}<br>\t\t\t} else {<br>\t\t\t\thead++;<br>\t\t\t}<br>\t\t}<br>\t\treturn tail;<br>\t}<br><br>\tprivate static &lt;T&gt; void swap(int beforeSwapIndex, int afterSwapIndex, T[] swappingArray) {<br>\t\tT temp = swappingArray[afterSwapIndex];<br>\t\tswappingArray[afterSwapIndex] = swappingArray[beforeSwapIndex];<br>\t\tswappingArray[beforeSwapIndex] = temp;<br>\t}<br><br>\tpublic static void main(String[] args) {<br>\t\tCharacter[] afterHandleLetterAndLetter = handleLetterAndLetter(new Character[]{&#39;a&#39;, &#39;A&#39;, &#39;1&#39;, &#39;b&#39;, &#39;B&#39;, &#39;g&#39;, &#39;6&#39;, &#39;t&#39;, &#39;8&#39;, &#39;L&#39;, &#39;d&#39;});<br>\t\tSystem.out.println(Arrays.toString(afterHandleLetterAndLetter));&#47;&#47; [a, d, t, b, g, 8, 6, 1, B, L, A]<br>\t}<br>}","like_count":0},{"had_liked":false,"id":239809,"user_name":"艺比天高","can_delete":false,"product_type":"c1","uid":1282162,"ip_address":"","ucode":"F52AC257F834A2","user_header":"https://static001.geekbang.org/account/avatar/00/13/90/72/e17e7c61.jpg","comment_is_top":false,"comment_ctime":1596653854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596653854","product_id":100017301,"comment_content":"因为分桶规则的不同，不同数据有不同的桶排序。","like_count":0},{"had_liked":false,"id":238961,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1596381680,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596381680","product_id":100017301,"comment_content":"今天下午，在咖啡馆里认真的学习了下","like_count":0},{"had_liked":false,"id":238959,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1596381313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596381313","product_id":100017301,"comment_content":"可以使用桶排序，根据asci码值，进行分割，最后依次把这几个桶里面的值读取出来","like_count":0},{"had_liked":false,"id":238655,"user_name":"小苏","can_delete":false,"product_type":"c1","uid":1063597,"ip_address":"","ucode":"B21A5233D07124","user_header":"https://static001.geekbang.org/account/avatar/00/10/3a/ad/0ceeaa44.jpg","comment_is_top":false,"comment_ctime":1596249983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596249983","product_id":100017301,"comment_content":"<br>思考题：使用计数排序的思想，统计出大小写，数字个数，其实就是得到了各个区间的长度了，再遍历一次，按照各个区间放数据就可以了。","like_count":0},{"had_liked":false,"id":238316,"user_name":"Wipeher","can_delete":false,"product_type":"c1","uid":1108731,"ip_address":"","ucode":"A5D7451D95F42C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wIWrciav7DRkOaD7vUtr084sxprq2U4obfH1ibls4RIsAw5foQlDGIt98x1RHATznNbh0iasibWV2Y7I7QpyFJ4TVA/132","comment_is_top":false,"comment_ctime":1596119501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596119501","product_id":100017301,"comment_content":"图的顺序怎么辣么奇怪，为啥指针跑到c数组的一号位去了","like_count":0},{"had_liked":false,"id":238226,"user_name":"田","can_delete":false,"product_type":"c1","uid":1669795,"ip_address":"","ucode":"2CC99CC96D59CC","user_header":"https://static001.geekbang.org/account/avatar/00/19/7a/a3/19d9bf76.jpg","comment_is_top":false,"comment_ctime":1596097641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596097641","product_id":100017301,"comment_content":"基数排序，手机号码中同位的比较，要求稳定性，使用插入排序是最合适的吗","like_count":0},{"had_liked":false,"id":237979,"user_name":"对白","can_delete":false,"product_type":"c1","uid":1268797,"ip_address":"","ucode":"3183E5ADBC794B","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/3d/e8325811.jpg","comment_is_top":false,"comment_ctime":1596020269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596020269","product_id":100017301,"comment_content":"九种排序算法的python实现可以参考我的：https:&#47;&#47;github.com&#47;lijinze9456yy000&#47;algorithm_practice","like_count":0},{"had_liked":false,"id":236776,"user_name":"邹","can_delete":false,"product_type":"c1","uid":1184406,"ip_address":"","ucode":"06BB69F19CA34F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJyibojtJCnzALT1CleOHlTfS1XpFQHibXA7B2j631I2icHL2Uy5XvvviaEXBWPSNkU5G7LQP3JJHicgzQ/132","comment_is_top":false,"comment_ctime":1595545531,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595545531","product_id":100017301,"comment_content":"课后思考：<br>创建结果数组，遍历原始数组。大写字母从后往前放到结果数组，小写字母从前往后放到结果数组。时间复杂度O(n)，空间复杂度O(n)","like_count":0},{"had_liked":false,"id":236306,"user_name":"sibyl","can_delete":false,"product_type":"c1","uid":1323652,"ip_address":"","ucode":"0D142011860D69","user_header":"","comment_is_top":false,"comment_ctime":1595388503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595388503","product_id":100017301,"comment_content":"动手实现基数排序<br><br>&#47;**<br> * 基数排序<br> *<br> * 基于计数排序(稳定排序)进行逐层排序，适用于有层级关系的元素<br> *&#47;<br>public class RadixSort{<br><br>    &#47;&#47;对手机号码进行排序<br>    public static void sort(String[] phones) {<br>        for (int i = phones[0].length()-1; i&gt;=0; i-- ){<br>            countSort(phones, i);<br>        }<br>    }<br><br>    &#47;**<br>     * 计数排序<br>     * @param phones 待排序手机号数组<br>     * @param compIndex 用于比较的下标<br>     *&#47;<br>    private static void countSort(String[] phones, int compIndex){<br>        String max = phones[0];<br>        for (String phone : phones){<br>            if (phone.charAt(compIndex) &gt; max.charAt(compIndex)){<br>                max = phone;<br>            }<br>        }<br>        &#47;&#47;计数<br>        int[] c = new int[intValue(max, compIndex) + 1];<br>        for (String phone : phones){<br>            c[intValue(phone, compIndex)]++;<br>        }<br>        &#47;&#47;累加<br>        for (int i=1; i&lt;c.length; i++){<br>            c[i] = c[i] + c[i - 1];<br>        }<br>        &#47;&#47;辅助数组排序<br>        String[] temp = new String[phones.length];<br>        &#47;&#47;倒序，保证排序稳定<br>        for (int i = phones.length - 1; i &gt;= 0; i--){<br>            String phone = phones[i];<br>            int cIndex = intValue(phone, compIndex);<br>            temp[c[cIndex] - 1] = phone;<br>            c[cIndex]--;<br>        }<br>        &#47;&#47;更新源数组<br>        for (int i = 0; i &lt; temp.length; i++){<br>            phones[i] = temp[i];<br>        }<br>    }<br><br>    private static int intValue(String phone, int compIndex){<br>        return Integer.valueOf(String.valueOf(phone.charAt(compIndex)));<br>    }<br><br>    public static void main(String[] args) {<br>        String[] phones = new String[7];<br>        phones[0] = &quot;91111111111&quot;;<br>        phones[1] = &quot;18111111111&quot;;<br>        phones[2] = &quot;11711111111&quot;;<br>        phones[3] = &quot;11161111111&quot;;<br>        phones[4] = &quot;11115111111&quot;;<br>        phones[5] = &quot;11111411111&quot;;<br>        phones[6] = &quot;11111131111&quot;;<br>        sort(phones);<br>        for (int i = 0; i &lt; phones.length; i++) {<br>            System.out.println(phones[i]);<br>        }<br>    }<br><br>}<br><br>控制台输出<br><br>11111131111<br>11111411111<br>11115111111<br>11161111111<br>11711111111<br>18111111111<br>91111111111","like_count":0},{"had_liked":false,"id":236278,"user_name":"sibyl","can_delete":false,"product_type":"c1","uid":1323652,"ip_address":"","ucode":"0D142011860D69","user_header":"","comment_is_top":false,"comment_ctime":1595383276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595383276","product_id":100017301,"comment_content":"刚开始一直疑惑为什么不能像下面这样直接计算呢？\t<br>\t\tint num = 0;<br>\t\tfor (int i = 0; i &lt; n; i++){<br>            for (int j = 0; j &lt; c[i]; j++){  <br>                a[num] = i;<br>                num++;<br>            }<br>        }<br>是因为这里有双重循环么？时间复杂度是O(n^2)么？<br>但是虽然这里是双重循环，但是时间复杂度实际是 O(n)<br>因为循环次数等于c[0] + c[1] + c[2] + ... + c[max] = n&#47;<br><br>那不是因为时间复杂度，是因为什么呢？原来是因为这种方式仅适用于数字这种元素！<br>因为是重新计算的呀！实际上原来的元素直接丢弃了！<br>而实际应用中排序的元素很可能不是一个数字呀","like_count":0},{"had_liked":false,"id":234650,"user_name":"beyond","can_delete":false,"product_type":"c1","uid":1962858,"ip_address":"","ucode":"89185FC5C39067","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f3/6a/66b6472b.jpg","comment_is_top":false,"comment_ctime":1594741658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594741658","product_id":100017301,"comment_content":"课后思考题可以利用快排的分区思想,i左边为小写,i右边为大写.j遍历整个字符串.当s[i]&gt;=97,i与j交换,i++","like_count":0},{"had_liked":false,"id":234296,"user_name":"蒙奇.D","can_delete":false,"product_type":"c1","uid":1133786,"ip_address":"","ucode":"48CE09A33AFE07","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/da/c0258b6f.jpg","comment_is_top":false,"comment_ctime":1594635085,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1594635085","product_id":100017301,"comment_content":"课后思考，用快排的pattiton思想，时间复杂度O(n)空间复杂度O(1)：<br> public static void main(String[] args) {<br>        char[] a = {&#39;a&#39;, &#39;c&#39;, &#39;D&#39;, &#39;F&#39;, &#39;R&#39;, &#39;u&#39;, &#39;p&#39;};<br>        int i = 0;<br>        int j = 0;<br>        for (; j &lt; a.length - 1; j++) {<br>            if (Character.isUpperCase(a[j])) {<br>                char temp = a[i];<br>                a[i++] = a[j];<br>                a[j] = temp;<br>            }<br>        }<br>        System.out.print(&quot;-----------&quot;);<br>        for (int m = 0; m &lt; a.length; m++) {<br>            System.out.print(a[m]);<br>        }<br>    }","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294417,"discussion_content":"代码有误\n1.是从小到大排列应该用lowercase判断，未排序区如果为小写就与已排序区的边界a[i]交换\n2.循环的边界应该是是j < =a.length - 1，因为它不像快排把最后的a[a.length-1]个设为了pivot，这里这个a[a.length-1]是需要参与遍历去判断是否为小写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595871202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233643,"user_name":"GeekYanger","can_delete":false,"product_type":"c1","uid":2046036,"ip_address":"","ucode":"E674B7D25261CC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/sOuSC65kXWdWBAIIs6uXAD41Ed8Wo8tib81LLVOQJ2oK23TgPDy6x0PGmp7rXwLR3BHOicaKx1zib1DyfpCITK3dw/132","comment_is_top":false,"comment_ctime":1594373895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594373895","product_id":100017301,"comment_content":"打卡！打卡！打卡！","like_count":0},{"had_liked":false,"id":232229,"user_name":"ncubrian","can_delete":false,"product_type":"c1","uid":1123342,"ip_address":"","ucode":"24EF941A24D8A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/24/0e/c6e1f9ea.jpg","comment_is_top":false,"comment_ctime":1593930827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593930827","product_id":100017301,"comment_content":"<br>func rearrange(in []byte) string {<br>\tl, r := 0, len(in)-1<br>\tfor i:=0; i&lt;r; i++ {<br>\t\tif in[i] &gt;= &#39;A&#39; &amp;&amp; in[i] &lt;= &#39;Z&#39; {<br>\t\t\ttmp := in[i]<br>\t\t\tin[i] = in[l]<br>\t\t\tin[l] = tmp<br>\t\t\tl++<br>\t\t}<br>\t\tif in[i] &gt;= &#39;a&#39; &amp;&amp; in[i] &lt;= &#39;z&#39; {<br>\t\t\ttmp := in[i]<br>\t\t\tin[i] = in[r]<br>\t\t\tin[r] = tmp<br>\t\t\tr--<br>\t\t\ti--<br>\t\t}<br>\t}<br>\t<br>\treturn string(in)<br>}","like_count":0},{"had_liked":false,"id":229396,"user_name":"beyond","can_delete":false,"product_type":"c1","uid":1962858,"ip_address":"","ucode":"89185FC5C39067","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f3/6a/66b6472b.jpg","comment_is_top":false,"comment_ctime":1592984694,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592984694","product_id":100017301,"comment_content":"如果只是区分大小写字母,可以借助快速排序算法中的分区思想.","like_count":0},{"had_liked":false,"id":229183,"user_name":"Geek_dd8b2b","can_delete":false,"product_type":"c1","uid":1988075,"ip_address":"","ucode":"CBEF7C39075A96","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJX4ZU53F8hBHicctluqK6Ef3U0ib40bq1vFyAvqV0wu3GaPuWbj967OdMT7k0gl3OMxsfopvbk9veQ/132","comment_is_top":false,"comment_ctime":1592918716,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1592918716","product_id":100017301,"comment_content":"双指针，a指向当前的小写字母，b前进，遇到小写字母就与a的下一位交换，a前进一位，b继续前进。","like_count":0,"discussions":[{"author":{"id":1988075,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJX4ZU53F8hBHicctluqK6Ef3U0ib40bq1vFyAvqV0wu3GaPuWbj967OdMT7k0gl3OMxsfopvbk9veQ/132","nickname":"Geek_dd8b2b","note":"","ucode":"CBEF7C39075A96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285711,"discussion_content":"数字  小写字母和大写字母是一样的 ，因为从ascii码上看都是一样的 并无不同 不需要额外处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592918935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228240,"user_name":"极客学子","can_delete":false,"product_type":"c1","uid":1149510,"ip_address":"","ucode":"40051597564EB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/46/71747b18.jpg","comment_is_top":false,"comment_ctime":1592622167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592622167","product_id":100017301,"comment_content":"可以参照快速排序的分区方法，用两个指针即可区分大小字母，加上数字的话有两种方式，一种是先区分小写字母和大写字母数字，然后在区分大写字母和数字；另一种是在快排分区的基础上加一个尾部指针，即头部指针区分数字和小写字母，尾部指针区分数字和大写字母","like_count":0},{"had_liked":false,"id":227429,"user_name":"夕阳武士","can_delete":false,"product_type":"c1","uid":1480522,"ip_address":"","ucode":"DDCF11F69CDAB5","user_header":"https://static001.geekbang.org/account/avatar/00/16/97/4a/0da51831.jpg","comment_is_top":false,"comment_ctime":1592378483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592378483","product_id":100017301,"comment_content":"王老师，你好，对于思考题我是这样想的，并没有用到这次课程的排序算法，用的是java语言。<br>第一个，仅有大小写字母的。申请一个char类型的临时数组，与字符串等长。遍历字符串，如果是小写的字符，就从临时数组的头部开始插入，从前往后插；如果是大写的字符，就从临时数组的尾部开始插入，从后往前插。<br>第二个，数字大小写字母都有的。申请两个char类型的临时数组A和B，都与字符串等长，临时数组A建立两个指针，startIndex=0和endIndex=数组长度-1，遍历字符串，如果是小写的字符，就从临时数组A的头部开始插入，从前往后插，临时数组A的startIndex++；如果是大写的字符，就从临时数组A的尾部开始插入，从后往前插，临时数组A的endIndex--；如果都不是（说明是数字），就插入临时数组B。遍历完以后，此时临时数组A中间是空的，而上述的步骤记下临时数组A的指针startIndex和endIndex正好是A数组中间空的部分的起始索引，最后遍历临时数组B的赋值给临时数组A中间空的部分即可。 <br>时间复杂度是O(n) ，下面是代码：<br>public static String sort(String str) {<br>        int length = str.length();<br>        char[] array = new char[length];<br>        int start = 0;<br>        int end = length - 1;<br>        for (int i = 0; i &lt; length; i++) {<br>            char s = str.charAt(i);<br>            if (Character.isUpperCase(s)) {<br>                array[end--] = s;<br>            } else {<br>                array[start++] = s;<br>            }<br>        }<br>        StringBuffer sb = new StringBuffer();<br>        for (char c : array) {<br>            sb.append(c);<br>        }<br>        return sb.toString();<br>    }<br><br>    public static String numStrSort(String str) {<br>        int length = str.length();<br>        int start = 0;<br>        int end = length - 1;<br>        char[] charArray = new char[length];<br>        char[] temp = new char[length];<br>        int tempIndex = 0;<br>        for (int i = 0; i &lt; length; i++) {<br>            char c = str.charAt(i);<br>            if (Character.isLowerCase(c)) {<br>                charArray[start++] = c;<br>            } else if (Character.isUpperCase(c)) {<br>                charArray[end--] = c;<br>            } else {<br>                temp[tempIndex++] = c;<br>            }<br>        }<br>        tempIndex = 0;<br>        for (int y = start; y &lt;= end; y++) {<br>            charArray[y] = temp[tempIndex++];<br>        }<br>        StringBuffer sb = new StringBuffer();<br>        for (char c : charArray) {<br>            sb.append(c);<br>        }<br>        return sb.toString();<br>    }<br>","like_count":0},{"had_liked":false,"id":227216,"user_name":"Geek_849f9f","can_delete":false,"product_type":"c1","uid":2027473,"ip_address":"","ucode":"67601F35A91999","user_header":"","comment_is_top":false,"comment_ctime":1592315644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592315644","product_id":100017301,"comment_content":"桶排序、计数排序，都是基于数据量不大的前提，将数据切分放到桶里进行排序；基数排序要求排序数据位数相同","like_count":0},{"had_liked":false,"id":226129,"user_name":"worthto","can_delete":false,"product_type":"c1","uid":1387712,"ip_address":"","ucode":"41D7ABBBD2E7FF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N6yjnrLnMW4XVSkBr3f0N3F962l35b5j0kib9VSlAqqbf6iaoCPicL1WnJ9KjgT4egQ7A2G0Zx3OayaK4yuoZrUVA/132","comment_is_top":false,"comment_ctime":1591956866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591956866","product_id":100017301,"comment_content":"客后思考题：三个桶，一个小写字母桶，一个大写字母桶，一个数字桶。遍历一遍，最终合并一下桶","like_count":0},{"had_liked":false,"id":225877,"user_name":",","can_delete":false,"product_type":"c1","uid":1439568,"ip_address":"","ucode":"191431A878D7B6","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/50/cbfe1bc0.jpg","comment_is_top":false,"comment_ctime":1591880795,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591880795","product_id":100017301,"comment_content":"第三次复习，每一次都有不同收获，这一次发现了以前没有思考到的细节。在桶排序部分，将数据分成100个桶，那怎样将数据依次放到这100个桶里面呢？第一直觉是写100个if判断订单金额所属的桶，显然这种方法不优秀。经过思考之后发现，每个桶的金额区间是1000，那可以将100个桶编号为1-1000，每次对读取的金额&#47;1000，得到便是桶的编号，这样能解决问题。但如果每个桶的金额区间不一样，这个时候应该怎样做呢？老师和各位同仁有没有好的办法？","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294598,"discussion_content":"桶都是等分的，每个桶的bucketSize是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595938414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222900,"user_name":"怕什么，抱紧我","can_delete":false,"product_type":"c1","uid":1318633,"ip_address":"","ucode":"CBCEA76E9EF33B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/e9/dcc63d8f.jpg","comment_is_top":false,"comment_ctime":1590947324,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1590947324","product_id":100017301,"comment_content":"老师,感觉基数排序和桶排序没什么关系啊,为什么放在这里!","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294599,"discussion_content":"都是线性排序啊大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595938447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222569,"user_name":"LIKE","can_delete":false,"product_type":"c1","uid":1254252,"ip_address":"","ucode":"9DAB7F9051648A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/6c/82ba5e1f.jpg","comment_is_top":false,"comment_ctime":1590836391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590836391","product_id":100017301,"comment_content":"100w按年龄排序，从yyyy-MM-dd维度可以使用基数排序？","like_count":0},{"had_liked":false,"id":222113,"user_name":"唯心主义蠢货🍁","can_delete":false,"product_type":"c1","uid":1941034,"ip_address":"","ucode":"836B09E0459953","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9e/2a/f1d8913f.jpg","comment_is_top":false,"comment_ctime":1590678827,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1590678827","product_id":100017301,"comment_content":"思考题：两个都是快排partition的思路，<br>第一个问题是基本思路，左右指针，交换位置<br>第二个问题感觉相当于快排存在相同值的情况，通过三个指针，左指针记录到小写字母的最右，右指针记录到大写字母的最左，然后中间指针对内容进行遍历<br><br>这里有一个原地交换遍历的过程，即遍历到一个大写字母时，跟后边的节点进行交换，然后再次判断当前节点是否为大写字母<br><br>let threePointSort = (arr)=&gt;{<br>    let first = 0;<br>    let second = arr.length-1;<br>    console.log(first,second);<br>    for(let i = 0; i &lt; arr.length; i++){<br>        if(i &gt;= second){<br>            break;<br>        }<br>        while( (&#39;A&#39; &lt;= arr[i] &amp;&amp; arr[i] &lt;= &#39;Z&#39;) &amp;&amp; i &lt; second){<br>            swap(arr,second--, i);<br>        }<br>        if( (&#39;a&#39; &lt;= arr[i] &amp;&amp; arr[i] &lt;= &#39;z&#39;) ){<br>            swap(arr,first++, i);<br>        }<br>    }<br>}","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294609,"discussion_content":"测试了你的代码，有点小问题边界问题，循环终止条件应该是i>second,因为当i=second时，大写字母的左边界的这个值可能是个数字，需要进入循环判断是否小写字母，只有当i移动到大写字母区间即i>second时就可以确保i右边的值都为大写字母了从而不需要分区了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595941810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221378,"user_name":"李艺轩","can_delete":false,"product_type":"c1","uid":1375756,"ip_address":"","ucode":"EF387413327B1D","user_header":"https://static001.geekbang.org/account/avatar/00/14/fe/0c/f9cb1af4.jpg","comment_is_top":false,"comment_ctime":1590485209,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1590485209","product_id":100017301,"comment_content":"计数排序那里，得到 C = [2, 0, 2, 3, 0, 1] 之后不是可以直接得到R了吗，也不需要对C求和<br>let res = [];<br>C.forEach((e, i) =&gt; {<br>    for(let j = 0; j &lt; e; j++) {<br>        res.push(i)<br>    }<br>})","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294597,"discussion_content":"这种事非稳定的排序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595938246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218820,"user_name":"Geek_b6e449","can_delete":false,"product_type":"c1","uid":1740368,"ip_address":"","ucode":"8296078ED23637","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhr1LrBZQTnn5PgyuHUtia6j6tiahZyk44BWeB5LQIqMgTDBdibGKVVopbJWbz83ZWvyVPz9fBl69rw/132","comment_is_top":false,"comment_ctime":1589880367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589880367","product_id":100017301,"comment_content":"这里为什么是从后往前遍历 是因为这样的话 可以使计数排序的算法是稳定的","like_count":0},{"had_liked":false,"id":218343,"user_name":"808吴彦祖","can_delete":false,"product_type":"c1","uid":2005154,"ip_address":"","ucode":"0EBBB00F76EA39","user_header":"https://static001.geekbang.org/account/avatar/00/1e/98/a2/9703bb00.jpg","comment_is_top":false,"comment_ctime":1589784498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589784498","product_id":100017301,"comment_content":"是否可以先算出hash值再进行排序呢？","like_count":0},{"had_liked":false,"id":217873,"user_name":"Geek_jerry","can_delete":false,"product_type":"c1","uid":1736148,"ip_address":"","ucode":"684923936D7849","user_header":"","comment_is_top":false,"comment_ctime":1589635903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589635903","product_id":100017301,"comment_content":"桶排序的内部不是用快排吗？快排不是稳定算法啊，如何在基数排序的每一位用桶排序呢？","like_count":0},{"had_liked":false,"id":217695,"user_name":"Pisces","can_delete":false,"product_type":"c1","uid":1504705,"ip_address":"","ucode":"B1E98AC36BDD0C","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/c1/b92153c6.jpg","comment_is_top":false,"comment_ctime":1589591664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589591664","product_id":100017301,"comment_content":"使用三个桶来分别存储小写字母，数字，大写字母。","like_count":0},{"had_liked":false,"id":217505,"user_name":"笑颜","can_delete":false,"product_type":"c1","uid":1432770,"ip_address":"","ucode":"155DBD67447C15","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLQaVdxtvDRRxv4e2qkdzWNtiaIzk4Qeicia75Jndh6NF4ruibiakoHdsVd1hbIZhSfy2cVyBXk3lc4CicQ/132","comment_is_top":false,"comment_ctime":1589520404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589520404","product_id":100017301,"comment_content":"基数排序中的例子，为什么没采用从高位到低位排序呢？？","like_count":0},{"had_liked":false,"id":217198,"user_name":"王木公","can_delete":false,"product_type":"c1","uid":1014550,"ip_address":"","ucode":"F049AEBFA0338D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/16/ca250e8c.jpg","comment_is_top":false,"comment_ctime":1589438617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589438617","product_id":100017301,"comment_content":"开始很纠结计数排序为什么找这么麻烦的办法来合并每个桶里的数，完全可以把每个桶都遍历一遍，直接输出结果就可以了。<br>其实麻烦的办法考虑了算法稳定性的问题，简单的办法就破坏了稳定性","like_count":0},{"had_liked":false,"id":216730,"user_name":"Geek_fab8cd","can_delete":false,"product_type":"c1","uid":1618011,"ip_address":"","ucode":"C2735706639A2E","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83epXKqVY7H7L0dg94R7ico3OS58D6keMujUbVKCJdsIPYJJhQ8ERUiaiaYsnictuzYvldicC0xDvO02YStQ/132","comment_is_top":false,"comment_ctime":1589333475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589333475","product_id":100017301,"comment_content":"看完排序了，大学的时候一直有参加ACM，排序的算法都是死记硬背的，有时候快排跟归并老是混淆，现在工作5年了，又回来学习算法了，每天在公交上都想一下每种排序算法的原理以及他们的优缺点，知道了原理，就算一次性手写代码最不到全对，但是debug一下已经能把每种排序算法写对了。收获颇丰。","like_count":0},{"had_liked":false,"id":216051,"user_name":"花子翁","can_delete":false,"product_type":"c1","uid":1073674,"ip_address":"","ucode":"A687441DC6894F","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/0a/26d00cb9.jpg","comment_is_top":false,"comment_ctime":1589175087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589175087","product_id":100017301,"comment_content":"桶排序中举的订单金额例子：先扫描一遍文件，看订单金额所处的数据范围，不还是得把文件加载到内存中读取订单金额所处的数据范围吗？这个疑惑帮忙解答下","like_count":0},{"had_liked":false,"id":215236,"user_name":"jefferylan","can_delete":false,"product_type":"c1","uid":1501722,"ip_address":"","ucode":"27F099AC798B14","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL1NTmO15o4bhsuRd4bo21WjPNPb5At7D2u8ibJThiaptnxXwmaoLQOaoibTX3C5GGDJ6wFsjSAYWwYQ/132","comment_is_top":false,"comment_ctime":1588936235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588936235","product_id":100017301,"comment_content":"关于思考题:由于内部不要求有序，可分3个桶，分别小写字母，数字，大写字母，通过ascii码判断属于哪个桶，然后把三个桶连接起来即可","like_count":0},{"had_liked":false,"id":214676,"user_name":"叶紫真","can_delete":false,"product_type":"c1","uid":1547763,"ip_address":"","ucode":"9CD7567FDB7F1F","user_header":"https://static001.geekbang.org/account/avatar/00/17/9d/f3/3f6dd32b.jpg","comment_is_top":false,"comment_ctime":1588780377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588780377","product_id":100017301,"comment_content":"老师,计数排序根本不需要那么麻烦啊,C[6]不都已经出来了吗,直接遍历C[6],考0分的有两个人,就是0,0,考一分的人没有,考二分的人有两个,就是2,2,考三分的人有3个,就是3,3,3,考四分的人没有,考五分的一个,就是5,连起来就是0,0,2,2,3,3,3,5,那个算法为什么搞这么复杂?不是很明白","like_count":0},{"had_liked":false,"id":214482,"user_name":"叶紫真","can_delete":false,"product_type":"c1","uid":1547763,"ip_address":"","ucode":"9CD7567FDB7F1F","user_header":"https://static001.geekbang.org/account/avatar/00/17/9d/f3/3f6dd32b.jpg","comment_is_top":false,"comment_ctime":1588756111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588756111","product_id":100017301,"comment_content":"老师，这100w人用计数排序岂不是更好？","like_count":0},{"had_liked":false,"id":214248,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1588683955,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588683955","product_id":100017301,"comment_content":"学习感悟:<br>一、 桶排序<br>1. 桶排序是将数据丢到有序的桶里面，然后桶内排序，再将桶依次输出<br>2. 当桶较多是，时间复杂度接近O(n)<br>3. 限制：数据容易分桶且数据能大致均匀的分到各个桶中<br>4. 应用：内存外排序。可以一个桶一个桶的排序。举例：10G订单数据，按金额排序。<br>5. 技巧：桶内数据可以再运行桶排序<br>6. 个人分析：稳定不稳定得看桶是怎么实现的。空间复杂度肯定是O(n)。如何实现分桶？大问题，不懂<br>二、 计数排序<br>1. 将桶的个数设定为数据的数据范围。遍历数据，桶数组对应的数据位置依次+1，得到一个数组，第k个位置记录了数据中等于k的数的个数。将桶数组依次累加，桶数组第k个位置的数字，就是k在原数组中的顺序位置。说起来很绕，但应该没说错。<br>2. 计数排序对数据要求更苛刻：数据范围不能太大，否则桶太多，不划算。只能对非负整数排序，需要预先对数据进行处理。<br>3. 举例：250w考生按成绩排序。<br>4. 个人分析：时间复杂度O(n)，空间复杂度得看数据范围。稳定的排序算法。<br>三、基数排序<br>1. 原理：在数据存在很多位时，从最小位开始排序。当然需要用稳定排序算法，组合计数排序完美。<br>2. 应用：每个数据很长，不能用计数排序。例如：根据电话号码排序。<br>3. 复杂度：看你用哪个稳定排序算法了。<br>思考题：<br>大小写字母排序，可以用快排中的分割算法。<br>大小写加上数字的话，可以用桶排序的思想。<br><br>","like_count":0},{"had_liked":false,"id":213579,"user_name":"李润东","can_delete":false,"product_type":"c1","uid":1972505,"ip_address":"","ucode":"65CFEA3C8B27C4","user_header":"https://static001.geekbang.org/account/avatar/00/1e/19/19/d82e24fb.jpg","comment_is_top":false,"comment_ctime":1588482311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588482311","product_id":100017301,"comment_content":"开篇的思考题，既然每个年龄一个桶，为什么不用计数排序呢？","like_count":0},{"had_liked":false,"id":212920,"user_name":"艺比天高","can_delete":false,"product_type":"c1","uid":1282162,"ip_address":"","ucode":"F52AC257F834A2","user_header":"https://static001.geekbang.org/account/avatar/00/13/90/72/e17e7c61.jpg","comment_is_top":false,"comment_ctime":1588238388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588238388","product_id":100017301,"comment_content":"先用桶排序，每个桶放相同的类型，然后桶内再用计数排序","like_count":0},{"had_liked":false,"id":212806,"user_name":"ysl","can_delete":false,"product_type":"c1","uid":1580127,"ip_address":"","ucode":"4592EE802C325C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ6IY49GzBCdJ79ma7jytia2vXVs2ZpwTMaFXRq6oNq7NVqj1QUY0sduskV4sH5B0JSB71VVziaNrlw/132","comment_is_top":false,"comment_ctime":1588213940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588213940","product_id":100017301,"comment_content":"计数排序，每个桶中数据都一样，怎么排名呢，就如同考生排名，同一分数的考生特别多，怎么分谁前谁后呢？","like_count":0},{"had_liked":false,"id":211010,"user_name":"默默","can_delete":false,"product_type":"c1","uid":1006635,"ip_address":"","ucode":"AF798B9D327F24","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/2b/8b771383.jpg","comment_is_top":false,"comment_ctime":1587880890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587880890","product_id":100017301,"comment_content":"将小写、数字、大写，放入3个不同的桶中，然后顺序合并3个桶中的元素","like_count":0},{"had_liked":false,"id":210955,"user_name":"HoSalt","can_delete":false,"product_type":"c1","uid":1156074,"ip_address":"","ucode":"610B03E2A002D1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","comment_is_top":false,"comment_ctime":1587870044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587870044","product_id":100017301,"comment_content":"尝试实现下桶排序，发现太难了，桶排序的思想感觉只适合每个桶只有一个单独的数据的情况，但这种情况下或许用计数排序排序效果更好<br>遇到的问题是，我如何才能把一个数精确的放入对应的桶里面，每次都需要遍历桶，那复杂度就高了？<br>还有就是桶排序是O(n)是桶的个数接近于每个桶只有一个数据才行，而这反而会导致将数据放入桶中的操作时桶遍历的复杂度增加，综合下来个人感觉或许比归并或快排性能更差<br>望老师能解惑","like_count":0},{"had_liked":false,"id":210833,"user_name":"HoSalt","can_delete":false,"product_type":"c1","uid":1156074,"ip_address":"","ucode":"610B03E2A002D1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","comment_is_top":false,"comment_ctime":1587831624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587831624","product_id":100017301,"comment_content":"老师桶排序的桶里面的数据是不是要先用链表来存数据，避免频繁的数组扩容问题，排序的时候再将链表转化为数组？","like_count":0},{"had_liked":false,"id":210398,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1587737909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587737909","product_id":100017301,"comment_content":"60天攻克算法打卡行动第11-12天<br>桶排序、计数排序、计数排序 三种时间复杂度是O(n)，因为这些排序算法时间复杂度是线性的，所以把这类排序算法叫做线性排序。今天学习重点的是掌握这些排序算法的使用场景。<br>昨天白天加了一天班，只是扫了几眼没来得急认真看，今天不去上班晚上抽点时间好好看了，发现只有真的静下心来看才能看懂这计数这块。<br>桶排序<br>hive中的数据分桶一个概念，每个数据属于哪个分区哪个桶，每个桶是一个范围，符合这个范围的数据进来。n个元素，m个桶，每个桶的 个数 k = n&#47;m 。每个桶内部使用快速排序也就是 O(klogk),m个桶就是m*klogk =&gt; nlogn&#47;m,也就是当 m 个桶个数接近n个数的时候时间复杂为 O(n),因为 logn&#47;m 此刻是一个非常非常小的数，可以忽略。桶排序要求严格，桶之间有序，桶内有序，并且桶之间的分布要求均匀，所以感觉桶不是很好实现，应用起来很繁琐。那么它的场景更适合在磁盘中外排序。大致分好m个桶，桶内进行快速排序（取一个数左右两边为比它小的和比它大小的这样排序下去得到最终排序结果），某个桶如果分配数据特别，那么里面再进行分桶，知道内存可以读取的大小为止。<br><br>计数排序<br>A【8】 ={2,5,3,0,2,3,0,3}<br>C[6] = {2,0,2,3,0,1} 整理后 C[6]={2,2,4,7,7,8}<br>R[8] ={0,0,2,2,3,3,3,5}<br>则是在桶排序的基础上，数据所处范围并不大，按照最大数分最大桶，比如：k最大，那么就分k个桶。所以排序适合只这几遍历扫描也就是时间复杂度O（n）。<br>文章例子：A[8]对应是8个考生的成绩，c[6]数组是分数0 到 5 分的数据，一开始c数组中的值是对应下标分数的人数，那么如何计算其中每个分数人对应最后的排序好的下标呢，其实很简单比如 c[0] 里面有2个人，那么这两个人就是倒数第1 2的人，那么c[1] 如果有0个人那么就是 索引 3 位置没写呢， c\t[2] 有两人2人，那么索引位置 3 4 就是。所以我们会发现一个规律，其实也就是取A[8]中查看对应人的分数排序位置，就是 c 中 顺序 前者 + 当前者的和为索引。所以遍历 A[8] 如果第一个遍历是 3 ，那么取c下标 3 查看 所以是几开始，因为程序数组是 0 索引开始，所以这个数要减去1得到最后 数组 r 的位置，同时 c 这个位置的数据要减1，因为已经确定了一个就要把那个索引锁定。<br>切记：只适合用在数据范围 不大的场景中，而且只能给非负整数排序。<br><br>基数排序<br><br>看到这里我有点想骂人，（画的什么xx。。。）果断搜索百度，网上一看就明白了基数排序。https:&#47;&#47;www.runoob.com&#47;w3cnote&#47;radix-sort.html，然后再回来看这个图也就知道了按照一行是一个数据，先比较最后一列也就是倒数第一个数，再比较倒数第二个，最后再比较第一列也就是第一个数。但还是不如网上的这个动态图来的直接。文中的每次要保持稳定排序，也就是相同的不能更换前后位置。<br><br>最后的作业，其实正则匹配出来小写字母，大写字母，数字，分别放到三个桶里，桶内进行快速排序，得出来后按照小写字母在前，数字中间，大写字母最后就可以了。","like_count":0},{"had_liked":false,"id":209949,"user_name":"吴同学","can_delete":false,"product_type":"c1","uid":1528737,"ip_address":"","ucode":"9103EB5FD43ECD","user_header":"https://static001.geekbang.org/account/avatar/00/17/53/a1/1a7bd68a.jpg","comment_is_top":false,"comment_ctime":1587639210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587639210","product_id":100017301,"comment_content":"思考题本质上可用快排partition函数解决，感觉这是一种技巧，能在O(1)空间复杂度上将数组按某种条件分为两块，核心还是分区的思想！","like_count":0},{"had_liked":false,"id":209908,"user_name":"russellyue","can_delete":false,"product_type":"c1","uid":1541894,"ip_address":"","ucode":"0758ACF772F9C1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epIMwPE6FwsicZ6bjhu7ZpWLnoib8G76sA1XL8y5W8GxqfQEjBub6g57E60mzjWzrA6icMRw1QT5CpyA/132","comment_is_top":false,"comment_ctime":1587634306,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1587634306","product_id":100017301,"comment_content":"线性排序：时间复杂度为O(n)的排序。桶排序（bucket sort）：假设有n个数据，那么将数据分到m个桶中，这m个桶是有顺序的。然后再分别对每个桶内的数据进行快速排序。最后再依次将每个桶内的数据读取出来。时间复杂度分析：将数据分到m个桶的过程，其实是依次读取每个数据，然后比较得出该数据应该存在哪个桶里。这个过程的时间复杂度为O(n)。然后我们假设分到每个桶内的数据是均匀的，也就是k = n&#47;m, 那么每个桶内执行快速排序的时间复杂度为O(klogk), 针对k个桶的话就是O(mklogk)，也就是O(nlog(n&#47;m))，如果m足够大，也就是桶足够多的话，log(n&#47;m)就足够小，就是一个常数项了，所以桶排序的时间复杂度就是O(n)。但是桶排序有个缺点就是，要求数据分布比较均匀，如何数据不均匀，最坏的情况就是所有数据集中在一个桶里面，那么时间复杂度就退化成快排的时间复杂度。当然另一个优化的方式是，针对数据特别多的桶再进行分桶。计数排序：假设数据存储在数组A中，数据的范围为0..k, 那么就开辟出一个下标为0..k的数组c，c里面对应的下标就存储对应下标代表的数据的个数。再对c顺序求和。再开辟出一个数组R拿来存储排序后的数据。从后向前扫描数组A（为了保证排序算法的稳定性），每碰到一个数据t，就将 R[c[t]] = t, 并将c[t] - 1。计数排序的时间复杂度为O(n)。但是要求数据的范围小，并且要求数据都为非负整数，原因就是要直接将数据值作为计数数组C的下标。当然可以通过将数据转换为非负整数的方式解决这个问题。基数排序（Radix Sort）：当数据有一定的位数，并且每个位有递进关系的时候，可以使用基数排序。假设数据一共有k位，那么根据高位（对顺序影响权重较高的位）进行排序，可以使用桶排序或者计数排序这种O(n)的排序。然后再依次每位排序下去。这里有个要求，那就是排序算法必须是稳定算法，要不然后一次排序就会影响到前一次的排序。那么最终的时间复杂度就为O(k*n)。当k足够小时，那么时间复杂度就是O(n)。基数排序有一个问题，那就是，如果数据每位是有递进关系的，但是数据件间的位数不一样。这种时候，就可以通过补位0的方式解决这个问题。","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294666,"discussion_content":"是R[c[t]-1] = t","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595952159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209822,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1587620757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587620757","product_id":100017301,"comment_content":"“我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后我们得到，订单金额最小是 1 元，最大是 10 万元。我们将所有订单根据金额划分到 100 个桶里，第一个桶我们存储金额在 1 元到 1000 元之内的订单，第二桶存储金额在 1001 元到 2000 元之内的订单，以此类推。每一个桶对应一个文件，并且按照金额范围的大小顺序编号命名（00，01，02…99）。”刚读到这里，怎么个扫描法？金额肯定是在文件里面的，并且订单金额只是订单结构的一个字段罢了，10g的文件，100兆的内存该如何扫描，这里写的不是很明白！","like_count":0},{"had_liked":false,"id":209784,"user_name":"安阳","can_delete":false,"product_type":"c1","uid":1801242,"ip_address":"","ucode":"A9C2D37EB3693E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7c/1a/72ca657f.jpg","comment_is_top":false,"comment_ctime":1587615490,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1587615490","product_id":100017301,"comment_content":"小写字母、数字、大字字母它们ASCII码高四位范围不同，用十六进制表示是数字（30-39）、小写字母(41-5A)、大写字母(61-7A).可以与0xf0做位与，然后小于0x40的是数字、大于0x40小于0x60是小写字母、大于0x60是大字字母。（以前学单片机看过大小写字母转换方法，通过位与实现很简单）","like_count":0},{"had_liked":false,"id":209605,"user_name":"Geek_3ba85e","can_delete":false,"product_type":"c1","uid":1446784,"ip_address":"","ucode":"106586BF969A80","user_header":"","comment_is_top":false,"comment_ctime":1587570258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587570258","product_id":100017301,"comment_content":"1:纯字母串处理： 字符串转为数组，新建一个一样大的数组，两个指针分别指向新数组首尾，遍历原数组，小写字母放头部，大写字母放尾部，直到遍历完成。再把结果转为字符串。<br>2.字母+数字：字符串转为数组，同时申请3个一样大的数组。遍历原数组，小写字母进1号，数字进2号，大写字母进3号，最后把三个数组转为字符串相加。  或者改进一下申请2个新数组，数字单独放一个，字母放另一个。然后转成字符串的时候按照空格拆分第一个字符串再3个拼接、","like_count":0},{"had_liked":false,"id":209574,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1587567546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587567546","product_id":100017301,"comment_content":"课后思考题：<br>把不同类型字符放入不同的桶里，每个桶用队列，放入过程即入队操作。最后把几个队列头尾相连即可。","like_count":0},{"had_liked":false,"id":209571,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1587567389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587567389","product_id":100017301,"comment_content":"计数排序建立二维链表（链表的链表）来实现，代码的可懂度应该更好吧，不用那个R和C的数组啊。","like_count":0},{"had_liked":false,"id":209298,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1587531525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587531525","product_id":100017301,"comment_content":"桶排序感觉就是分类","like_count":0},{"had_liked":false,"id":208833,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1587445943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587445943","product_id":100017301,"comment_content":"思考题，先用两个指针less，more，less指向数组最左边并-1  more指向最右边。<br>从左遍历数组，当小写，less++，当前元素与less交换，当大写，当前元素与more交换，more--, 当数字时，继续遍历。","like_count":0},{"had_liked":false,"id":208562,"user_name":"Hubbert伟涛","can_delete":false,"product_type":"c1","uid":1303556,"ip_address":"","ucode":"000C6A0BD4A102","user_header":"https://static001.geekbang.org/account/avatar/00/13/e4/04/05677b68.jpg","comment_is_top":false,"comment_ctime":1587381847,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587381847","product_id":100017301,"comment_content":"王争老师您好，想请教一下文中“计数排序只能用在数据范围不大的场景中，如果数据范围 k 比要排序的数据 n 大很多，就不适合用计数排序了。”不太理解。如果数据范围大，时间复杂度也是O(n)。为什么这个算法只适用于数据范围不大的情况，谢谢~","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294810,"discussion_content":"数据范围大很多即k>>n，那么o(k)>>o(nlogn),","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596006964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208089,"user_name":"Clement","can_delete":false,"product_type":"c1","uid":1325624,"ip_address":"","ucode":"45BE6D2FDDF6FC","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/38/1e8a1760.jpg","comment_is_top":false,"comment_ctime":1587272905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587272905","product_id":100017301,"comment_content":"void sortChar(char str[])<br>{<br>\tint j = 0;<br>\tchar temp;<br>\tint len =strlen(str);<br>\tfor (int i = 0; i &lt; len; i++)<br>\t{<br>\t\tif (str[i] &gt; 96)<br>\t\t{<br>\t\t\ttemp = str[i];<br>\t\t\tif (j != i)<br>\t\t\t{<br>\t\t\t\tstr[i] = str[j];<br>\t\t\t\tstr[j] = temp;<br>\t\t\t\tj++;<br>\t\t\t}<br>\t\t}<br>\t}<br>}<br><br>int main()<br>{<br>\tchar str[] = { &#39;D&#39;,&#39;a&#39;,&#39;F&#39;,&#39;B&#39;,&#39;c&#39;,&#39;A&#39;,&#39;z&#39;,&#39;\\0&#39;};<br>\tsortChar(str);<br>        return 0;<br>}","like_count":0},{"had_liked":false,"id":207978,"user_name":"宋超","can_delete":false,"product_type":"c1","uid":1303327,"ip_address":"","ucode":"ECA6126F076AB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/e3/1f/bfea2679.jpg","comment_is_top":false,"comment_ctime":1587225270,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587225270","product_id":100017301,"comment_content":"大家好，看了github中C样例程序，不太明白桶排序中在求桶个数的时候为什么要max - min + 1，烦请大家给解答一下，谢谢。 ","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294809,"discussion_content":"应该是(max - min) / bucketSize + 1，比如数据从2到6，桶容量为2，就分成3个桶吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596006568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207826,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1587191309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587191309","product_id":100017301,"comment_content":"桶排序、计数排序和基数排序的方法真是巧妙，是对数据集的特点进行深入分析后，才可能想到的办法，可见对数据集的分析是很重要的。<br>平时工作中的需求也往往是个性化的，需要根据数据特点选择合适的排序算法，可能事半功倍。","like_count":0},{"had_liked":false,"id":207197,"user_name":"holtonzh","can_delete":false,"product_type":"c1","uid":1959913,"ip_address":"","ucode":"B79CC623ED2108","user_header":"","comment_is_top":false,"comment_ctime":1587022606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587022606","product_id":100017301,"comment_content":"课后思考，有点类似快排3-way的思想，用两个指针将数据分成三堆，小于pivto、等于pivot、大于pivot。<br>如果更复杂，还可以用双标兵，将数据分成五堆。","like_count":0},{"had_liked":false,"id":207016,"user_name":"Xiaoman","can_delete":false,"product_type":"c1","uid":1072429,"ip_address":"","ucode":"54FE261583E16E","user_header":"https://static001.geekbang.org/account/avatar/00/10/5d/2d/4c3a1aa2.jpg","comment_is_top":false,"comment_ctime":1586996831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586996831","product_id":100017301,"comment_content":"计数排序有点难理解，类似于桶排序对数组A[n]排序，算法如下：<br>1）从小到大每个数一个桶，用数组C[m]表示桶，桶的下标表示被排序用到的数，C[i]的值是这个数的个数;<br>2）因为第i个数在最终排序的位置是当前这个数的个数加上前一个数的最大下标值，所以重新修改C[m]数组里的值为当前下标的值可能在排序中的位置C[i]=C[i]+C[i-1]<br>3）定义一个数组R[n]，倒序遍历A[n],找到A[i]的值k,找index=C[k]-1，把K放到R[index]的位置，直到第一个元素完成排序","like_count":0},{"had_liked":false,"id":206800,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1586937294,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586937294","product_id":100017301,"comment_content":"思考题用三个指针 i, j,k 其中i前面表示小写字母区间， k后面表示大写字母区间，j为遍历指针，遇到小写字母则跟swap (i, j), 遇到大写字母则swap(k, j);","like_count":0},{"had_liked":false,"id":206531,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1586875839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586875839","product_id":100017301,"comment_content":"看到计数排序就在想，直接分n桶(0-5)，比对插入对应的桶，然后合并就可以了。时间复杂度是O(5n) 也就是O(n) 。","like_count":0},{"had_liked":false,"id":206371,"user_name":"梅端","can_delete":false,"product_type":"c1","uid":1525335,"ip_address":"","ucode":"FEC08731457770","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/57/fe38a6db.jpg","comment_is_top":false,"comment_ctime":1586849318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586849318","product_id":100017301,"comment_content":"线性排序还没有怎么研究过，听完之后能懂，但是感觉实现起来还有些困难，看来还需要多多练习才行","like_count":0},{"had_liked":false,"id":206059,"user_name":"王££","can_delete":false,"product_type":"c1","uid":1322881,"ip_address":"","ucode":"9DADA7C5218A15","user_header":"https://static001.geekbang.org/account/avatar/00/14/2f/81/131ea1e4.jpg","comment_is_top":false,"comment_ctime":1586782108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586782108","product_id":100017301,"comment_content":"课后思考可以参考这个 https:&#47;&#47;github.com&#47;alonWang&#47;algorithm_study&#47;blob&#47;master&#47;src&#47;main&#47;java&#47;com&#47;github&#47;alonwang&#47;problem&#47;DutchNationalFlagProblem.java","like_count":0},{"had_liked":false,"id":204165,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1586344158,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586344158","product_id":100017301,"comment_content":"关于计数排序：当分数相等时，我们想要知道原始的排列顺序，就需要图中作者所说的机制了。即计数排序是一个稳定的排序算法。","like_count":0},{"had_liked":false,"id":204151,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1586342224,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1586342224","product_id":100017301,"comment_content":"计数排序懂了，但是作者的这句话没看明白：所以，成绩为 3 分的考生在排序之后的有序数组 R[8]中，会保存下标 4，5，6 的位置。","like_count":0},{"had_liked":false,"id":201725,"user_name":"慕华","can_delete":false,"product_type":"c1","uid":1128579,"ip_address":"","ucode":"3026277274798B","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/83/cf789e0e.jpg","comment_is_top":false,"comment_ctime":1585825922,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585825922","product_id":100017301,"comment_content":"先按照原本的顺序排序，然后把大写字母按+32进行插入排序","like_count":0},{"had_liked":false,"id":201069,"user_name":"大禾","can_delete":false,"product_type":"c1","uid":1742323,"ip_address":"","ucode":"841369DDF985A8","user_header":"https://static001.geekbang.org/account/avatar/00/1a/95/f3/2fcbeb0a.jpg","comment_is_top":false,"comment_ctime":1585711890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585711890","product_id":100017301,"comment_content":"在leetcode 的 #912 排序数组 尝试了2个写法的桶排序还有基数排序， https:&#47;&#47;leetcode-cn.com&#47;problems&#47;sort-an-array&#47;solution&#47;kuai-su-pai-xu-tong-pai-xu-he-ji-shu-pai-xu-de-shi&#47;","like_count":0},{"had_liked":false,"id":200806,"user_name":"ZMH.","can_delete":false,"product_type":"c1","uid":1753115,"ip_address":"","ucode":"D45D6CEDFDF8F5","user_header":"https://static001.geekbang.org/account/avatar/00/1a/c0/1b/319baf9d.jpg","comment_is_top":false,"comment_ctime":1585653910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585653910","product_id":100017301,"comment_content":"计数排序为什么要从后往前依次遍历数组A呢","like_count":0},{"had_liked":false,"id":200710,"user_name":"山鬼谣","can_delete":false,"product_type":"c1","uid":1543162,"ip_address":"","ucode":"E25F498B85A01B","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/fa/103e6900.jpg","comment_is_top":false,"comment_ctime":1585641571,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585641571","product_id":100017301,"comment_content":"“10GB 的订单数据”先进行文件扫描，可是内存只有几百 MB，这样也能扫描吗？<br>难道是人为用眼睛查看，订单数据在什么范围？ ","like_count":0},{"had_liked":false,"id":198816,"user_name":"不要怂，就是干！！","can_delete":false,"product_type":"c1","uid":1161890,"ip_address":"","ucode":"4EE97CD0760331","user_header":"https://static001.geekbang.org/account/avatar/00/11/ba/a2/9d999739.jpg","comment_is_top":false,"comment_ctime":1585469431,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585469431","product_id":100017301,"comment_content":"&#47;**<br>     * 基数排序<br>     *<br>     * @param array 数组<br>     * @param start 开始下标<br>     * @param end   结束下标<br>     *&#47;<br>    private static void jishuSort(String[] array, int start, int end) {<br>        &#47;&#47;获取元素的长度<br>        int length = array[start].length();<br>        &#47;&#47;从优先级低的位数开始<br>        for (int i = length - 1; i &gt;= 0; i--) {<br>            jishuSortByOne(array, start, end, i);<br>        }<br>    }<br><br>    &#47;**<br>     * 按位排序 必须是稳定的排序<br>     *<br>     * @param array 数组<br>     * @param start 开始下标<br>     * @param end   结束下标<br>     * @param x     位<br>     *&#47;<br>    private static void jishuSortByOne(String[] array, int start, int end, int x) {<br>        &#47;&#47;用来存储排好序的对象<br>        String[] temp = new String[end - start + 1];<br>        &#47;&#47;采用计数排序<br>        &#47;&#47;找到数组在i位的最大和最小值<br>        int max = array[start].charAt(x);<br>        int min = array[start].charAt(x);<br>        for (int i = start; i &lt;= end; i++) {<br>            if (array[i].charAt(x) &lt; min) {<br>                min = array[i].charAt(x);<br>            }<br>            if (array[i].charAt(x) &gt; max) {<br>                max = array[i].charAt(x);<br>            }<br>        }<br>        if (max == min) {<br>            return;<br>        }<br>        &#47;&#47;定义桶<br>        int[] bucket = new int[max - min + 1];<br>        &#47;&#47;初始化桶的值<br>        for (int i = start; i &lt;= end; i++) {<br>            bucket[array[i].charAt(x) - min]++;<br>        }<br>        &#47;&#47;累加桶的值<br>        for (int i = 1; i &lt; bucket.length; i++) {<br>            bucket[i] = bucket[i - 1] + bucket[i];<br>        }<br>        &#47;&#47;遍历数组，元素添加到临时数组中<br>        for (int i = end; i &gt;= start; i--) {<br>            temp[bucket[array[i].charAt(x) - min] - 1] = array[i];<br>            bucket[array[i].charAt(x) - min]--;<br>        }<br>        &#47;&#47;临时数组的数据替换排序数组<br>        for (int i = start; i &lt;= end; i++) {<br>            array[i] = temp[i - start];<br>        }<br>    }","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294827,"discussion_content":"你这个方法把基数桶和计数全部囊括进来了啊卧槽,但是你完全没利用桶排序啊,你那个桶bucket容量为1,装的也是array[i]对应位的出现次数,其实就相当于计数数组的作用,套了一个桶的名字而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596010238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197219,"user_name":"Geek_ttjjttjj","can_delete":false,"product_type":"c1","uid":1714081,"ip_address":"","ucode":"6FE6FC8BBF0EBC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJu4p8ZheJ4KCLo6gI6VficSp1U4XCicfquprCavib6Xm0iaoXuwlLDgXxcosUSfiawfE1qFZhp9TG86Rg/132","comment_is_top":false,"comment_ctime":1585363703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585363703","product_id":100017301,"comment_content":"手机号码有 11 位，范围太大？不太理解，11个数大吗？","like_count":0},{"had_liked":false,"id":195693,"user_name":"JY","can_delete":false,"product_type":"c1","uid":1645413,"ip_address":"","ucode":"54DF39E40C0F20","user_header":"https://wx.qlogo.cn/mmopen/vi_32/OWO43KiahibaWnZWkEzXfNQCAqAvVNia44HLxzaNbPKZxiaic3ameJ72dLros26ibxuCL1B5pl7MRlOVrqutNsTOXegQ/132","comment_is_top":false,"comment_ctime":1585212227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585212227","product_id":100017301,"comment_content":"let arr = [&#39;D&#39;, &#39;E&#39;, &#39;B&#39;, &#39;c&#39;, 3, 4, &#39;a&#39;, &#39;b&#39;, &#39;C&#39;, 5, &#39;z&#39;];<br>let sortFunc = (arr)=&gt;{<br>    let APoint = 0;<br>    let zPoint = 0;<br>    for(let i = 0; i&lt; arr.length; ++i){<br>         let temp = arr[i];<br>         if(&#47;[A-Z]|[0-9]&#47;.test(arr[i])){<br>               APoint++;<br>         }else if(&#47;[a-z]&#47;.test(arr[i])){<br>               arr[i] = arr[zPoint];<br>               arr[zPoint++] = temp;<br>         }<br>    }<br>    let numPoint = zPoint;<br>    APoint = zPoint;<br>    for(let j = zPoint; j&lt; arr.length; ++j){<br>         let temp = arr[j];<br>         if(&#47;[A-Z]&#47;.test(arr[j])){<br>               APoint++;<br>         }else if(&#47;[0-9]&#47;.test(arr[j])){<br>               arr[j] = arr[numPoint];<br>               arr[numPoint++] = temp;<br>         }<br>    }<br>    return arr;<br>}<br>console.log(sortFunc(arr));<br>","like_count":0},{"had_liked":false,"id":195083,"user_name":"骋","can_delete":false,"product_type":"c1","uid":1241618,"ip_address":"","ucode":"6FC534BA9FCE3C","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/12/50eff143.jpg","comment_is_top":false,"comment_ctime":1585134256,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585134256","product_id":100017301,"comment_content":"计数排序代码：<br>public static int[] countSort(int[] array) {<br>        &#47;&#47; 1.得到数列最大值和最小值，并算出差值d<br>        int max = array[0];<br>        int min = array[0];<br>        for (int i = 1; i &lt; array.length; i++) {<br>            if (array[i] &gt; max) {<br>                max = array[i];<br>            }<br>            if (array[i] &lt; min) {<br>                min = array[i];<br>            }<br>        }<br><br>        &#47;&#47; 2.创建统计数组并统计对应元素个数<br>        int d = max - min;<br>        int[] countArray = new int[d + 1];<br>        for (int i = 0; i &lt; array.length; i++) {<br>            countArray[array[i] - min] ++;<br>        }<br><br>        &#47;&#47; 3.统计数组做变形，后面的元素等于前面的元素之和<br>        int sum = 0;<br>        for (int i = 0; i &lt; countArray.length; i++) {<br>            sum += countArray[i];<br>            countArray[i] = sum;<br>        }<br><br><br>        &#47;&#47; 4.倒序遍历原始数列，从统计数组中找到正确位置，输出到结果数组<br>        int[] sortedArray = new int[array.length];<br>        for (int i = array.length - 1; i &gt;=0; i--) {<br>            &#47;&#47; 原始数列在统计数组中的位置<br>            int k = countArray[array[i] - min] - 1;<br>            sortedArray[k] = array[i];<br><br>            &#47;&#47; 统计值减1<br>            countArray[array[i] - min]--;<br>        }<br><br>        return sortedArray;<br>    }","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294814,"discussion_content":"你这个挺优的,考虑到了最小值,节省了计数数组容量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596008150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194021,"user_name":"punnpkin","can_delete":false,"product_type":"c1","uid":1691517,"ip_address":"","ucode":"E635BD016D892F","user_header":"https://static001.geekbang.org/account/avatar/00/19/cf/7d/d9085aaa.jpg","comment_is_top":false,"comment_ctime":1585015501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585015501","product_id":100017301,"comment_content":"这节课讲的太好了","like_count":0},{"had_liked":false,"id":193783,"user_name":"Geek_d3daca","can_delete":false,"product_type":"c1","uid":1494587,"ip_address":"","ucode":"37CA9C6FCDBF0E","user_header":"","comment_is_top":false,"comment_ctime":1584963197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584963197","product_id":100017301,"comment_content":" 荷兰国旗问题，加速快排的技巧。","like_count":0},{"had_liked":false,"id":191964,"user_name":"烈鸟","can_delete":false,"product_type":"c1","uid":1160050,"ip_address":"","ucode":"F568728E862D50","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/72/8c6366aa.jpg","comment_is_top":false,"comment_ctime":1584806099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584806099","product_id":100017301,"comment_content":"这篇讲的3种排序我还看懂了，上一篇讲的归并排序一直没看懂。。估计卡在递归了","like_count":0},{"had_liked":false,"id":190512,"user_name":"黄昏鹿场","can_delete":false,"product_type":"c1","uid":1269801,"ip_address":"","ucode":"BC331B34E878CE","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/29/4564caba.jpg","comment_is_top":false,"comment_ctime":1584666280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584666280","product_id":100017301,"comment_content":"准备K个栈","like_count":0},{"had_liked":false,"id":187345,"user_name":"JuneMare","can_delete":false,"product_type":"c1","uid":1891472,"ip_address":"","ucode":"4A3437B3CEF544","user_header":"","comment_is_top":false,"comment_ctime":1584088239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584088239","product_id":100017301,"comment_content":"课后题可以用ascll编码的范围来搞，比较简单。前面讲的算法我觉得有难度。理解了算法思路还是写不出来，我太菜了。","like_count":0},{"had_liked":false,"id":186470,"user_name":"Liuhs","can_delete":false,"product_type":"c1","uid":1458595,"ip_address":"","ucode":"2E68908A00A7B0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoibxk1VYE5jnPib4SZ93LTUj27Gic1MXEPWrjY8ljPqO0YbcI1NmgnkJTEmUL7tVMj9ian7ic7MgHZR3A/132","comment_is_top":false,"comment_ctime":1583849826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583849826","product_id":100017301,"comment_content":"桶排序的时间复杂度分析提到，每个桶的排序使用快排，每个桶的排序时间复杂度就可以达到nlogn。但是这里有个问题，如果分成m个桶使用了快排，而快排是不稳定的排序算法，那么桶排序不也不稳定了吗？","like_count":0},{"had_liked":false,"id":185945,"user_name":"cloydlau","can_delete":false,"product_type":"c1","uid":1069785,"ip_address":"","ucode":"C21E29ABC754F2","user_header":"","comment_is_top":false,"comment_ctime":1583729330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583729330","product_id":100017301,"comment_content":"写了篇文专门讲哨兵版的归并排序 附JS完整代码<br>https:&#47;&#47;juejin.im&#47;post&#47;5e65bb3f518825490e4570dc","like_count":0},{"had_liked":false,"id":184883,"user_name":"Nikola","can_delete":false,"product_type":"c1","uid":1337553,"ip_address":"","ucode":"5E3AA9B8A45924","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/d1/9550690a.jpg","comment_is_top":false,"comment_ctime":1583424267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583424267","product_id":100017301,"comment_content":"计数排序搞复杂了吧。有必要把C数组求和么，不求和也可以输出你要的排序啊","like_count":0},{"had_liked":false,"id":184873,"user_name":"shelldon","can_delete":false,"product_type":"c1","uid":1054598,"ip_address":"","ucode":"BF8FE102D6DD1B","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/86/416f772e.jpg","comment_is_top":false,"comment_ctime":1583422266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583422266","product_id":100017301,"comment_content":"- partition：执行一次 partition 区分小写字母和非小写字母，再在非小写字母区执行一次 partition 区分数字和大写字母，缺点是非稳定排序。<br>- 桶排序：扫描字符串分成三个桶，分别是小写字母桶、数字桶和大写字母桶，桶可以有 vector 或者 list 实现，最后将三个桶顺序输出，是稳定排序。<br>- 计数排序：字符串看成 A[n]，每个字符一个桶，共 10+26+26 个桶，统计 C[n]，从后到前（为了稳定性）扫描 A[n]，结合 C[n]，得到 R[n]。<br>- 基数排序：对于字符的 ASCII，数字 &lt; 大写字母 &lt; 小写字母。扫描一遍字符串将小写字母映射到数字之前，而数字和大写字母映射到 ASCII，七位二进制数，每位独立，位与位之间有递进关系，从第 0 位到第 6 位，执行七次稳定排序。","like_count":0},{"had_liked":false,"id":184721,"user_name":"hex","can_delete":false,"product_type":"c1","uid":1757301,"ip_address":"","ucode":"B983D40DCD159F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d0/75/3e034f71.jpg","comment_is_top":false,"comment_ctime":1583391119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583391119","product_id":100017301,"comment_content":"只能上午学算法,下午看别的了.头疼这几节!","like_count":0},{"had_liked":false,"id":183780,"user_name":"The Answer","can_delete":false,"product_type":"c1","uid":1664773,"ip_address":"","ucode":"1ECF369780BFA9","user_header":"https://static001.geekbang.org/account/avatar/00/19/67/05/a0315f44.jpg","comment_is_top":false,"comment_ctime":1583132920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583132920","product_id":100017301,"comment_content":"老师， 基数排序也不一定不能用于负数排序吧，下面的方法应该是可以的吧，望指教<br>void countSort(int *arr, int n)<br>{<br>\tint max = getMax(arr, n);<br>\tint min = getMin(arr, n);<br>\t<br>\tint *sortedArr = new int[n + 1];<br>\tint count[max - min + 1];<br>\t<br>\tfor(int i = 0; i &lt; max - min + 1; i++)<br>\t\tcount[i] = 0;<br>\t<br>\tfor (int i = 0; i &lt; n; i++)<br>\t\tcount[arr[i] - min] ++;<br><br>\tfor (int i = 1; i &lt; (max - min + 1); i++)<br>\t\tcount[i] += count[i - 1];<br><br>\tfor (int i = n - 1; i &gt;= 0; i--)<br>\t{<br>\t\tsortedArr[count[arr[i] - min] - 1] = arr[i];<br>\t\tcount[arr[i] - min]--;<br>\t}<br>\tfor(int i = 0; i &lt; n; i++)<br>\t{<br>\t\tarr[i] = sortedArr[i]; <br>\t} <br>\tdelete sortedArr;<br>}","like_count":0},{"had_liked":false,"id":183467,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1109290,"ip_address":"","ucode":"6ABF229E31BC09","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/2a/9151d888.jpg","comment_is_top":false,"comment_ctime":1583047562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583047562","product_id":100017301,"comment_content":"线性排序当中的C数组换种理解方式就是：索引值i代表的那个元素经过排序后最后一次出现是第C[i]个(从1开始数)。如例子中C[3] = 7，那么排序后3这个元素最后一次出现是第6个。其实我觉得还能直接用C数组就能排出来，比如C[5]=8，C[4]=7，那么值为5的元素就是8-7=1个，接下来C[3]=7，表示值为4的元素是7-7=0个，C[2]=4，表示值为3的元素是7-4=3个，以此类推。","like_count":0},{"had_liked":false,"id":183384,"user_name":"小肥羊","can_delete":false,"product_type":"c1","uid":1081582,"ip_address":"","ucode":"9F44BAA1A59FAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/80/ee/bbee3ec1.jpg","comment_is_top":false,"comment_ctime":1583031590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583031590","product_id":100017301,"comment_content":"课后思考题，拿眼一塔直接就Partitoin方法。但是看了评论里，有个哥们用桶排序的，瞬间感觉桶排序，在不改变时间复杂度的情况下，提升了稳定性、代码理解、逻辑理解，但空间复杂度高了。不用排序算法， 就我个人理解，想进行排序，用的方法，是不是都可以叫排序算法？","like_count":0},{"had_liked":false,"id":183223,"user_name":"Eternal","can_delete":false,"product_type":"c1","uid":1188023,"ip_address":"","ucode":"EA6FE7CC98F740","user_header":"https://static001.geekbang.org/account/avatar/00/12/20/b7/bdb3bcf0.jpg","comment_is_top":false,"comment_ctime":1582976130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582976130","product_id":100017301,"comment_content":"课程中推荐的学习计划中排序属于E等级，也就是最简答的一类，然而在这一节感觉有点掉队，需要多看几遍","like_count":0},{"had_liked":false,"id":182749,"user_name":"发霉的宅大人","can_delete":false,"product_type":"c1","uid":1738243,"ip_address":"","ucode":"6757E30FE5E48D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/03/95004954.jpg","comment_is_top":false,"comment_ctime":1582859747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582859747","product_id":100017301,"comment_content":"思考题：<br>小写字母，数字，大写字母各一个桶<br>从头到尾遍历数据，放入桶中。<br>如果桶中也需要排序，<br>那么遍历到每一个数据都选择一个桶，然后再在桶中从头遍历插入对应的位置。","like_count":0},{"had_liked":false,"id":180348,"user_name":"起而行","can_delete":false,"product_type":"c1","uid":1131399,"ip_address":"","ucode":"4F116B0B740776","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/87/7604d7a4.jpg","comment_is_top":false,"comment_ctime":1582264814,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582264814","product_id":100017301,"comment_content":"可以设置三个桶，小写字母，大写字母和数字各放在三个桶中，桶内不需要排序，直接讲三个桶按照小写，大写和数字的顺序输出即可","like_count":0},{"had_liked":false,"id":179942,"user_name":"木子00","can_delete":false,"product_type":"c1","uid":1314724,"ip_address":"","ucode":"8F78CA722EB29B","user_header":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","comment_is_top":false,"comment_ctime":1582124527,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1582124527","product_id":100017301,"comment_content":"看不懂啊?<br>好多地方都是这样的. 从上下文根本看不出来的某一句话是怎么来的!!!<br>比如本章节:<br>&lt;p&gt;思路是这样的：我们对 C[6]数组顺序求和，C[6]存储的数据就变成了下面这样子。&lt;&#47;p&gt;<br>原 C[6]:    [2,0,2,3,0,1]<br>后 C[6]:    [2,2,4,7,7,8]<br>后来的C[6] 是怎么的得到的啊. <br>会有人说不需要知道怎么来的. <br>但是我就想说直接给你看结果就好.干嘛要推导呢.<br><br>还有一些 a,b,k啊等字母不做解释的.需要多读才能理解.或者理解不了.在学习的时候就很吃力.花在不需要关注的地方! 浪费了.<br>音频与文字的都不对应.(我觉得无关紧要,我刚开始一遍看文字一遍听音频,听着听着就听差了.后来就只看文字了.)<br>不知道是我理解的问题还是什么的.反正我从第一章到本章.最直观的感觉了. ","like_count":0,"discussions":[{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214256,"discussion_content":"经过一些努力看懂了。果然语言精简干练。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585152419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179435,"user_name":"是茜茜啊","can_delete":false,"product_type":"c1","uid":1685428,"ip_address":"","ucode":"7A5EBB87C8FBFA","user_header":"https://static001.geekbang.org/account/avatar/00/19/b7/b4/f870dc5f.jpg","comment_is_top":false,"comment_ctime":1582003265,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582003265","product_id":100017301,"comment_content":"思考题1可以考虑类似快排的思路，设置两个pivot，pivot内是所有待排序的字符。通过双指针方法，使得pivot1前都是小写，pivot2后都是大写，如果遇到指针遍历过程中不满足上述条件的，则通过交换保证条件依然得到满足，直到两个pivot相遇。","like_count":0},{"had_liked":false,"id":179172,"user_name":"starty156","can_delete":false,"product_type":"c1","uid":1268547,"ip_address":"","ucode":"C26FCEB8E8228E","user_header":"","comment_is_top":false,"comment_ctime":1581931182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581931182","product_id":100017301,"comment_content":"写Java代码应该尽量用native方法，比如数组拷贝System.arraycopy","like_count":0},{"had_liked":false,"id":178902,"user_name":"Kvicii.Y","can_delete":false,"product_type":"c1","uid":1442588,"ip_address":"","ucode":"446BFA633569EA","user_header":"https://static001.geekbang.org/account/avatar/00/16/03/1c/c9fe6738.jpg","comment_is_top":false,"comment_ctime":1581850337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581850337","product_id":100017301,"comment_content":"到这节为止基本的排序算法应该就结束了。<br>现在的面试一般都有手写基本算法的白板题，主要的是哪几个呢？？<br>","like_count":0},{"had_liked":false,"id":178719,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1723812,"ip_address":"","ucode":"36BBA79BBFEA8B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/4d/a4/d28eb55d.jpg","comment_is_top":false,"comment_ctime":1581785739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581785739","product_id":100017301,"comment_content":"不能理解【主要原因是，这三个算法是非基于比较的排序算法，都不涉及元素之间的比较操作。】<br>能麻烦您解释下，为什么这个不涉及元素之间的比较吗？不比较的话，怎么能确定元素间的大小关系呢？<br>对于桶排序和计数排序还比较好理解，每个桶中只有一个元素的话，因为桶之间是有序的，可以不去比较元素间的大小。<br>那基数排序是怎么能不比较元素的大小呢？","like_count":0},{"had_liked":false,"id":178712,"user_name":"lpf32","can_delete":false,"product_type":"c1","uid":1039717,"ip_address":"","ucode":"E1B127FDFF74BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/65/3b4a2930.jpg","comment_is_top":false,"comment_ctime":1581783346,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581783346","product_id":100017301,"comment_content":"分类小写，大写，数字桶，然后遍历小写，数字，大写桶。时间复杂度是O(n)，空间复杂度是O(n)","like_count":0},{"had_liked":false,"id":178693,"user_name":"lpf32","can_delete":false,"product_type":"c1","uid":1039717,"ip_address":"","ucode":"E1B127FDFF74BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/65/3b4a2930.jpg","comment_is_top":false,"comment_ctime":1581780043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581780043","product_id":100017301,"comment_content":"对于计算算法还有一个笨办法。数组C不进行累加，而是从头遍历，遇到有值的就放到R中，也是稳定排序","like_count":0},{"had_liked":false,"id":177017,"user_name":"谢真","can_delete":false,"product_type":"c1","uid":1124650,"ip_address":"","ucode":"8C3402DE107C9F","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/2a/9079f152.jpg","comment_is_top":false,"comment_ctime":1581249554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581249554","product_id":100017301,"comment_content":"用2个桶，大写字母一个桶，小写字母一个，放入不同的桶，然后合并桶，增加数字后增加一个数字桶","like_count":0},{"had_liked":false,"id":175960,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1580892751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580892751","product_id":100017301,"comment_content":"老师,你提到了基数排序的适用范围,我想了想,对于比较键只有一个的情况，我能想到的排序场景都满足这个范围。你能举出一个真实的反例吗？用基数排序不能解决的。<br>排序时，我能想到的比较键只有数字类型（数字类型一般进制为2，8，10，16等）或字符串类型，而这两种都满足基数排序的适用条件。我这个理解对吗？（此处没有考虑按多个键比较的情况，比如对用户，先按年龄，再按城市排序）","like_count":0},{"had_liked":false,"id":173444,"user_name":"Kyle","can_delete":false,"product_type":"c1","uid":1106079,"ip_address":"","ucode":"44198A0BEC5FB2","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/9f/9259a6b9.jpg","comment_is_top":false,"comment_ctime":1579544212,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579544212","product_id":100017301,"comment_content":"总觉得计数排序这里搞复杂了。因为实际排名的时候，会有并列，所以直接把分数k之前C数组中的所有值加起来，就可以得到分数为k的学生的并列排名了。","like_count":0},{"had_liked":false,"id":170879,"user_name":"pikachu122","can_delete":false,"product_type":"c1","uid":1689365,"ip_address":"","ucode":"43FE4DBC872FFA","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/15/24bf166a.jpg","comment_is_top":false,"comment_ctime":1578747628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578747628","product_id":100017301,"comment_content":"1、桶排序、计数排序和基数排序是三种非基于比较的排序算法。因为它们的时间复杂度为O(n)，所以被称为线性排序。它们对数据的要求比较严苛，所以应用范围较窄。<br>2、桶排序就是将数据分到一系列具有大小关系的“桶”里，分别将桶内元素快速排序，最后将数据依次取出。<br>3、桶排序要求数据可以容易地被划分为m个桶，且桶和桶之间有天然的大小顺序，每个桶内的元素分布比较平均。<br>4、桶排序常用于处理外部排序（大量数据存储在硬盘中，无法一次性全部加载到内存中的情况）。<br>5、计数排序可以认为是一种特殊的桶排序。它将相同数值的元素放在同一个桶中。用一个桶数组表示不同的桶，桶中每个数代表该元素出现的个数。对桶数组顺序求和，这样桶中的值代表数组中小于等于该值的个数。最后反向遍历数组，它在新的有序数组中的位置就是它对应的桶的值-1，最后将桶中的值-1。<br>6、计数排序只适用于数值范围不大的数组，且只能用于非负整数的排序（如果出现负数和小数，需要将它们通过加法或乘10转换为非负整数）。<br>7、基数排序是一种按位比较的排序算法，如果前几位a比b大，那么后面几位就可以不用看了。基数排序的按位排序需要使用桶排序或计数排序等线性排序算法，才能保证时间复杂度为O(n)。<br>8、基数排序要求数据必须可以分割成位来比较，且位之间具有递进关系，并且每一位的数据范围不能太大，要可以采用线性排序算法。<br>9、课后思考题：建立一个与原数组相同大小的新数组。遍历原数组，如果看到小写字母，就从头依次往后放，如果看到大写字母，就从后依次往前放（因为内部不要求有序）。如果有数字，先把数字单独储存起来，在大小写字母排完以后将数字放在中间。","like_count":0},{"had_liked":false,"id":169243,"user_name":"yuan","can_delete":false,"product_type":"c1","uid":1207302,"ip_address":"","ucode":"EA3D0573478EC7","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/06/2ac17d5a.jpg","comment_is_top":false,"comment_ctime":1578300486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578300486","product_id":100017301,"comment_content":"请问基数排序从高位开始 和 从低位开始有什么区别吗？","like_count":0},{"had_liked":false,"id":168921,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1578217115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578217115","product_id":100017301,"comment_content":"计数排序代码如下 使用的是 jdk1.8 支持 负整数到正整数:<br> private static void countSort(int[] arr) {<br><br>        int max = Arrays.stream(arr).max().getAsInt();<br>        int min = Arrays.stream(arr).min().getAsInt();<br>        int range = max - min + 1;<br>        int [] count = new int[range];<br>        int [] output = new int[arr.length];<br>        for (int i1 : arr) {<br>            count[i1 - min]++;<br>        }<br><br>        for (int i = 1; i &lt; count.length; i++) {<br>            count[i] += count[i - 1];<br>        }<br><br>        for (int i = arr.length - 1; i &gt;= 0; i--) {<br>            output[count[arr[i] - min] - 1] = arr[i];<br>            count[arr[i] - min]--;<br>        }<br><br>        &#47;&#47; 数组拷贝<br>        System.arraycopy(output, 0, arr, 0, arr.length);<br><br>    }<br><br>    private static void printArray(int[] arr) {<br>        for (int i1 : arr) {<br>            System.out.print(i1 + &quot; &quot;);<br>        }<br>        System.out.println(&quot;&quot;);<br>    }<br><br>    public static void main(String[] args) {<br><br>        int[] arr = {-5, -10, 0, -3, 8, 5, -1, 10};<br>        countSort(arr);<br>        printArray(arr);<br>    }<br>","like_count":0},{"had_liked":false,"id":168621,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1578124999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578124999","product_id":100017301,"comment_content":"给扑克牌排序的时候就是用的桶排序的思想。","like_count":0},{"had_liked":false,"id":168590,"user_name":"社会你强哥","can_delete":false,"product_type":"c1","uid":1243570,"ip_address":"","ucode":"325B9005588D9B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/b2/2ed800b4.jpg","comment_is_top":false,"comment_ctime":1578116686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578116686","product_id":100017301,"comment_content":"嗯，弄3个桶，把a到z, 0到9, A到Z, 把数据放进去，然后按照这个顺序拿出来。","like_count":0},{"had_liked":false,"id":168324,"user_name":"小夏","can_delete":false,"product_type":"c1","uid":1110755,"ip_address":"","ucode":"D87444ADC28C6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/e3/c1a88a64.jpg","comment_is_top":false,"comment_ctime":1578047214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578047214","product_id":100017301,"comment_content":"只用单个指针是否可以，先新建两个数组，大小与原数组相等，然后用单个指针轮询原数组，遇到小写时丢入第一个新建数组，遇到大写复制到第二个数组，全部处理完毕以后，再对两个新建数组进行轮询整合。空间复杂度是O(2n)，时间复杂度是O(n2)","like_count":0},{"had_liked":false,"id":168047,"user_name":"Shaohong","can_delete":false,"product_type":"c1","uid":1039902,"ip_address":"","ucode":"CFC342E182357B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/de/1e/4e3d207f.jpg","comment_is_top":false,"comment_ctime":1578004289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578004289","product_id":100017301,"comment_content":"计数排序（Counting sort）例子里面的计数数组C相当于考分分布的一个直方图(histogram)。每个bin对应一个考分。对待排序数组A一次遍历以后，计数数组C每个bin的值记录的是每个分数出现的次数。算法接着把C由一个普通的直方图转化为一个累加直方图(Cumulative Histogram). 这时直方图里面每一个bin的值表示小于等于该考分出现的次数。算法接着对待排序数组进行第二次遍历，根据这个累加直方图为每个考分直接找到其在最终排序数组中对应的下标。在遍历过程中对累加直方图的修改是一种优化操作以方便一步定位某一考分的最终下标，要不然的话通过累加直方图我们只知道一个考分最终下标的范围，在插入分数的时候还需对最终数组在下标范围内进一步遍历以找到空位。","like_count":0},{"had_liked":false,"id":164346,"user_name":"许灵","can_delete":false,"product_type":"c1","uid":1059926,"ip_address":"","ucode":"0296EC9929B570","user_header":"https://static001.geekbang.org/account/avatar/00/10/2c/56/ff7a9730.jpg","comment_is_top":false,"comment_ctime":1576941486,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576941486","product_id":100017301,"comment_content":"老师，我觉得基数排序也可以从高位开始，利用分治思想，岗位桶排序后，可以在桶内再排序。最后再合并。最后可能出现位数*数据范围个桶。就是桶比较多","like_count":0},{"had_liked":false,"id":161860,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1194572,"ip_address":"","ucode":"FBFAE23E8E48B7","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/4c/b6200773.jpg","comment_is_top":false,"comment_ctime":1576381629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576381629","product_id":100017301,"comment_content":"桶排序中，扫描数据往桶内分数据的复杂度咋不算了，不是未放入桶的每个数据都需要跟桶的临界值进行比较？","like_count":0},{"had_liked":false,"id":161787,"user_name":"Allen_","can_delete":false,"product_type":"c1","uid":1677187,"ip_address":"","ucode":"CA5E00E4644CD5","user_header":"https://static001.geekbang.org/account/avatar/00/19/97/83/845b48e2.jpg","comment_is_top":false,"comment_ctime":1576327385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576327385","product_id":100017301,"comment_content":"分享几种不同的解法<br>def binarySearch(arr, target, lRange=0, rRange=0):<br>    <br>    low = lRange<br>    high = rRange if rRange else len(arr) - 1<br>    while low &lt;= high:<br>        mid = low + (high - low) &#47;&#47; 2<br>        if arr[mid] == target:<br>            return mid<br>        elif arr[mid] &lt; target:<br>            low = mid + 1<br>        else:<br>            high = mid - 1<br>    return -1<br><br>def bsFirstElement(arr, target):<br>    candidate = -1<br>    leftExist = binarySearch(arr, target)<br>    while leftExist != -1:<br>        candidate = leftExist<br>        leftExist = binarySearch(arr[:leftExist], target)<br>    return candidate<br><br>def bsLastElement(arr, target):<br>    candidate = -1<br>    rightExist = binarySearch(arr, target)<br>    while rightExist != -1:<br>        candidate = rightExist<br>        rightExist = binarySearch(arr, target, rightExist+1)<br>    return candidate <br><br>def bsLastElementTwo(arr, target):<br>    <br>    low = 0<br>    high = len(arr) - 1<br>    while low &lt;= high:<br>        mid = low + (high - low) &#47;&#47; 2<br>        if arr[mid] == target:<br>            if mid == len(arr) - 1 or arr[mid+1] != target: return mid<br>            low = mid + 1<br>        elif arr[mid] &lt; target:<br>            low = mid + 1<br>        else:<br>            high = mid - 1<br>    return -1","like_count":0},{"had_liked":false,"id":161753,"user_name":"追风","can_delete":false,"product_type":"c1","uid":1640670,"ip_address":"","ucode":"A9659BA22E4C85","user_header":"https://static001.geekbang.org/account/avatar/00/19/08/de/3eea926d.jpg","comment_is_top":false,"comment_ctime":1576316521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576316521","product_id":100017301,"comment_content":"我的想法就是多定义几个临时数组1个是寸全部大写26个字母， 1个全部小写26个字母， 1个存0-9数组， <br>1个存大写的， 1个存小写的， 1个存数字<br>然后在遍历数组判断是大写的就放在大写数组中， 小写就放在小写数组中， 数字就放在另一个中， 最后三个数组合并下就好了","like_count":0},{"had_liked":false,"id":161571,"user_name":"sun","can_delete":false,"product_type":"c1","uid":1716706,"ip_address":"","ucode":"B4F40050EF1F80","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/m6s0APjAF4rHRgn7e0tQw1eEuQGrOMlWyWrGrlnStxHDiaOces1059OsDfSEjFBL6J155upQNNg7xkh4hicJvqlg/132","comment_is_top":false,"comment_ctime":1576234974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576234974","product_id":100017301,"comment_content":"各位大佬C[6] = [2，0，2，3，0，1] 一直不懂为什么 对C[6]数组顺序求和则C[6]就等于[2，2，4，7，7，8]了  顺序求和 是如何做的？","like_count":0},{"had_liked":false,"id":160710,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1576024537,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576024537","product_id":100017301,"comment_content":"桶排序，计数排序，基数排序<br>\t三者的时间复杂度都为O(n)。因为这些排序算法的时间复杂度是线性，所以这类排序算法叫做线性排序（Linear sort）。<br>\t之所以能做到线性的时间复杂度，主要原因是，这个三个算法不是基于比较的排序算法，都不涉及元素之间的比较操作。但对要排序的数据要求苛刻<br><br>（8）桶排序（Bucket sort）<br>\t1，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据单独进行排序。再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了。<br>\t<br>\t2，时间复杂度分析：<br>\t\t（1）如果要排序的数据有n个，将它们均匀的划分到m个桶里，每个桶里就有k=n&#47;m个元素。<br>\t\t（2）每个桶内部使用快速排序，时间复杂度为O(k* logK)。M个桶的时间复杂度就是O(m*k*logk)。<br>\t\t（3）因为k=n&#47;m，所以整个桶排序的时间复杂度就是O(n*log(n&#47;m))。当桶的个数m接近数据个数为n时，log(n&#47;m)就是一个非常小的常量，此时桶排序的时间复杂度接近O(n)。<br><br>\t3，桶排序的特性：<br>\t\t桶排序看起来很优秀，那么他是否可替代其他的排序算法？<br>\t\t答：不能，桶排序对要排序的数据要求非常苛刻。<br>\t\t（1）要排序的数据需要很容易就能划分成m个桶，并且，桶与桶之间有着天然的大小顺序。这样每个桶内的数据排序完后，桶于桶之间的数据不需要在进行排序。<br>\t\t（2）数据在每个桶之间的分布是比较均匀的。如果数据经过桶的划分之后分布很不均，那么桶内数据排序的时间复杂度就不是常量级的了。在极度情况下，如果数据都被划分到了一个桶里，那就退化为O(nlogn)的排序算法。<br>\t\t（3）桶排序比较适合用在外部排序中。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。<br><br>（9），计数排序（Counting sort）<br>\t计数排序是桶排序的一种特殊情况。<br>\t1，当要排序的n个数据，所处的范围并不大时，假设最大值是k，就将数据划分成k个桶。每个桶内的数值相同，省掉桶内排序的时间。<br>\teg: 高考成绩的范围是0~900。这个数值范围很小，就可以将几百万的考生划分到这901个桶里。对这些考生的排序，因为只涉及扫描遍历操作，所以时间复杂度是O(n)。<br><br>\t2，计数排序中的“计数”的含义：<br>\t\t要想明白这个问题，就要看计数排序算法的实现方法。<br>\t\t①：假设有8个考生，分数在0到5分之间 ==》 A[8] = 2，5，3，0，2，3，0，3。<br>\t\t②：使用数组C[6]表示桶，其中下标对分数。C[6]内存储的是分数对应的考生人数。<br>\t\t③：从A[8]中可知，分数为3的考生有3个，所以在成绩排序后有序数组R[8]中，会保存在下标为4，5，6的位置。<br>\t\t<br>\tA：那么该如何快速计算出，每个分数的考生在有序数组中对应的存储位置？<br>\t\t对C[6]数组顺序求和，C[6]存储的数据就变成了：<br>\t\t <br>\t<br>\t\tC[k]里存储了小于等于分数k的考生个数。<br>\t\t<br>\tB：排序过程：<br>\t\t从后到前依次扫描数组A。如，当扫描到3时，我们可以从数组C中取出下标为3的值7，即到目前为止，包括自己在内，分数小于等于3的考生有7个，也就是说3是数组R中的第7个元素。当3放入到数组R中后，小于等于3的元素就只剩下了6个，所以相应的C[3]要减一，变成6。<br>\t\t<br>\t\t以此类推，当我们扫描到第2个分数为3的考试时，就会把它放入数组R中的第6个元素的位置。当扫描完整个数组A后，数组R内的数据就是按照分数从小到大有序排列的了。<br><br>\t3：适用场景<br>\t\t计数排序只能用在数据范围不大的场景中，如果数据范围k比要排序的数据n大很多，就不适合用计数排序了。<br>而且，计数排序只能给非负整数排序，如果排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。<br><br>（10）基数排序（Radix sort）<br>\t\t场景：如何对10万个手机号从小到大排序？<br>\t\t解决思路：先按照最后一位来排序手机号，然后在按照倒数第二位重新排序，以此类推，最后按照第一位重新排序。经过11次排序之后，手机号码就有序了。<br>\t\t<br>\t\t算法分析：<br>1，桶排序或计数排序的时间复杂度可以做到O(n)。如果要排序的数据有k位，那我们就需要k次桶排序或计数3排序。总的时间复杂度是O(k*n)。<br>2，当k不大时，如手机号排序，k最大就是11，所以基数排序的时间复杂度就近似于O(n)。<br>\t\t<br>\t\t适用范围：基数排序对要排序的数据有要求，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果a数据的高位比b数据大，那剩下的地位就不用比较了。除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到O(n)了。<br>","like_count":0},{"had_liked":false,"id":160384,"user_name":"Panda🐟","can_delete":false,"product_type":"c1","uid":1002401,"ip_address":"","ucode":"C6007A3192516A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/a1/c2719a5a.jpg","comment_is_top":false,"comment_ctime":1575943596,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575943596","product_id":100017301,"comment_content":"思考题 大写、小写分两个桶。 大写、小写、数字分三个桶","like_count":0},{"had_liked":false,"id":160023,"user_name":"Ronnyz","can_delete":false,"product_type":"c1","uid":1488280,"ip_address":"","ucode":"9F34527B1D343D","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/98/ffaf2aca.jpg","comment_is_top":false,"comment_ctime":1575858795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575858795","product_id":100017301,"comment_content":"借助荷兰国旗思想，设置low,high,current三个指针可以遍历一遍实现排序","like_count":0},{"had_liked":false,"id":159890,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1575817985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575817985","product_id":100017301,"comment_content":"分类大小写字母和数字，用排序的话桶排序可以解决，不用排序的话可以使用头尾指针遍历方法进行前后元素交换来实现分类。","like_count":0},{"had_liked":false,"id":159834,"user_name":"Alpha 👀","can_delete":false,"product_type":"c1","uid":1200971,"ip_address":"","ucode":"3C0BAD36550718","user_header":"https://static001.geekbang.org/account/avatar/00/12/53/4b/28991f30.jpg","comment_is_top":false,"comment_ctime":1575806216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575806216","product_id":100017301,"comment_content":"老师您好，有个地方不理解，桶排序，10GB的数据，内存限制比如1GB，所有桶都在内存中，不是应该分不了吗？","like_count":0},{"had_liked":false,"id":159819,"user_name":"晨风破晓","can_delete":false,"product_type":"c1","uid":1321464,"ip_address":"","ucode":"F2BC46428A97B5","user_header":"https://static001.geekbang.org/account/avatar/00/14/29/f8/561c5be1.jpg","comment_is_top":false,"comment_ctime":1575799648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575799648","product_id":100017301,"comment_content":"桶排序：将数据分到有序的桶里，再对桶里的数据进行排序，然后将数据按桶顺序取出组成的序列就是有序的。<br>限制条件：数据分布均匀，不会造成某些桶的数据过多一些又过少；桶之间的数据有大小关系，不用取出后还要进行排序。<br>使用场景：适合使用在外部排序：数据存储在外部磁盘，数据量很大，内存有限，无法将数据全加载在内存中。<br>计数排序：桶排序的一种特殊情况：数据的最大值不是很大，比如最大值为K，则即可将数据分布到K个桶中，保证每个桶内的数据同样大小，剩去了桶内排序的时间。<br>限制条件：值的范围不会太大，且数据都是非负整数或是能转换成非负整数。<br>基数排序：分割出独立的位进行比较，而且位之间有递进关系，如果a数据的高位比b数据的大，那剩下的地位就不用比较了。且每一位的数据范围不能太大，可以使用线性排序算法来排序，否则基数排序的时间复杂度就无法做到O(n)。数据如果不等长可以添0补充。","like_count":0},{"had_liked":false,"id":159645,"user_name":"唯威奋斗","can_delete":false,"product_type":"c1","uid":1329103,"ip_address":"","ucode":"B6BC3B145D1593","user_header":"","comment_is_top":false,"comment_ctime":1575713066,"is_pvip":false,"replies":[{"id":"61138","content":"那应该怎么弄呢？没太看懂你说的 ","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575897455,"ip_address":"","comment_id":159645,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1575713066","product_id":100017301,"comment_content":"计数排序中计算排名时，C[k] 里存储小于等于分数 k 的考生个数=C[0]....C[k-1]累加起来可以吗？不用这么麻烦吧，请老师赐教","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477131,"discussion_content":"那应该怎么弄呢？没太看懂你说的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575897455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1329103,"avatar":"","nickname":"唯威奋斗","note":"","ucode":"B6BC3B145D1593","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77240,"discussion_content":"不好意思，是我搞错了，后来看懂了，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575897568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159516,"user_name":"big智慧","can_delete":false,"product_type":"c1","uid":1202616,"ip_address":"","ucode":"272C32E19EAE1A","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/b8/2a4624c3.jpg","comment_is_top":false,"comment_ctime":1575644061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575644061","product_id":100017301,"comment_content":"打卡Day11：<br>1、日期：<br>* 2019年12月5日<br><br>2、是什么：<br>* 特殊场景下，时间复杂度为O(n)的桶排序、计数排序、基数排序<br><br>3、分析两种排序算法：<br>* 桶排序：需要数据可以分成区间、数据的范围不是跨度很大、分布比较均匀 <br>* 计数排序：数据范围不是很大、值需要是非负整数（或者处理成非负整数后范围不是很大） <br>* 基数排序：数据的位数需要相同（或者可以处理成相同的位数）、高位的数据大时 数据就大、每一位的数据范围跨度不是很大  <br>4、项目管理模式的选择和排序算法选择的类似场景：<br>* 在需求粒度小、单周多次发布的场景下，选择看板拉动的模式 <br>* 在需求粒度大、团队有固定的周期、可以做到1个周期1次发布的场景，选择Scrum模式 <br><br>5、关注点：<br>* 关注点：场景分析、选择","like_count":0},{"had_liked":false,"id":159458,"user_name":"WSJay","can_delete":false,"product_type":"c1","uid":1454676,"ip_address":"","ucode":"BD1656298FBC1E","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/54/19bbc3bb.jpg","comment_is_top":false,"comment_ctime":1575627450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575627450","product_id":100017301,"comment_content":"使用Swift实现计数排序算法：<br>&#47;&#47; 计数排序<br>&#47;&#47; 查找list的范围：最大值max&#47;最小值min<br>func findListRange(list:[Int])-&gt;(Int,Int){<br>    <br>    var min:Int = 0<br>    var max:Int = 0;<br>    for i in 0..&lt;list.count {<br>        <br>        if list[i] &lt; min {<br>            <br>            min = list[i]<br>        }else if list[i] &gt; max {<br>            <br>            max = list[i]<br>        }<br>    }<br>    return (min,max)<br>}<br><br>&#47;&#47; 根据list的最大值max创建一个长度为（max+1）的数组：A<br>&#47;&#47; 数组A的下标为list中的元素<br>&#47;&#47; 计算list中相同元素的个数，存储到数组A中<br>func findSameElementCount(list:[Int])-&gt;[Int]{<br>    <br>    let max:Int = findListRange(list: list).1<br>    var countList:[Int] = [Int].init(repeating: 0, count: max+1)<br><br>    for i in 0..&lt;list.count{<br>        <br>        let index:Int = list[i]<br>        countList[index] += 1<br>    }<br>  <br>    return countList<br>}<br><br>&#47;&#47; 将保存list中相同元素个数的数组A按顺序求和<br>func addElementCount(list:[Int])-&gt;[Int]{<br>    <br>    var temp:[Int] = findSameElementCount(list: list);<br>    <br>    for i in 1..&lt;temp.count {<br>        <br>        temp[i] += temp[i-1]<br>    }<br>    <br>    return temp<br>}<br><br>&#47;&#47; 计数排序算法<br>func count_sort(list:[Int])-&gt;[Int]{<br>    <br>    var countList:[Int] = addElementCount(list: list)<br>    var temp:[Int] = [Int].init(repeating: 0, count: list.count)<br>    for i in (0..&lt;list.count).reversed() {<br>        <br>        let index = list[i]<br>        let count = countList[index]<br>        <br>        if count &gt; 0 {<br>            temp[count-1] = index<br>            countList[index] -= 1<br>        }<br>    }<br>    <br>    return temp<br>}","like_count":0},{"had_liked":false,"id":159388,"user_name":"秀秀","can_delete":false,"product_type":"c1","uid":1145162,"ip_address":"","ucode":"9D4D327324570B","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/4a/10348395.jpg","comment_is_top":false,"comment_ctime":1575612746,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575612746","product_id":100017301,"comment_content":"public char[] sortChar(char[] chars) {<br>\t\tint i = 0;<br>\t\tint j = chars.length - 1;<br><br>\t\twhile(i != j) {<br>\t\t\tif (chars[i] &gt;= &#39;a&#39; &amp;&amp; chars[i] &lt;= &#39;z&#39;) {<br>\t\t\t\t&#47;&#47; <br>\t\t\t\ti ++;<br>\t\t\t} else {<br>\t\t\t\t&#47;&#47; swap i, j--<br>\t\t\t\tchar tmp = chars[i];<br>\t\t\t\tchars[i] = chars[j];<br>\t\t\t\tchars[j] = tmp;<br>\t\t\t\tj --;<br>\t\t\t}<br>\t\t}<br>\t\t<br>\t\tfor (; j&lt; chars.length; j++) {<br>\t\t\tif (chars[j] &gt;= &#39;0&#39; &amp;&amp; chars[j] &lt;= &#39;9&#39;) {<br>\t\t\t\t&#47;&#47; swap i, j<br>\t\t\t\tchar tmp = chars[i];<br>\t\t\t\tchars[i] = chars[j];<br>\t\t\t\tchars[j] = tmp;<br>\t\t\t\ti++;<br>\t\t\t}<br>\t\t}<br>\t\treturn chars;<br>\t}","like_count":0,"discussions":[{"author":{"id":1145162,"avatar":"https://static001.geekbang.org/account/avatar/00/11/79/4a/10348395.jpg","nickname":"秀秀","note":"","ucode":"9D4D327324570B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":75061,"discussion_content":"解释一下：头尾两个指针，head &amp; tail，head找到非小写字母就跟tail交换数据，tail-1；不交换数据就head+1，直到头尾相接；\n\n从相接处往后，tail往后，找到数字就跟head交换，head+1，找不到就继续后移，直到末位\n\n时间复杂度，也就遍历一遍多，O（n），原地排序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575720817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159376,"user_name":"秀秀","can_delete":false,"product_type":"c1","uid":1145162,"ip_address":"","ucode":"9D4D327324570B","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/4a/10348395.jpg","comment_is_top":false,"comment_ctime":1575610797,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575610797","product_id":100017301,"comment_content":"外层桶排序-内层基数排序","like_count":0},{"had_liked":false,"id":159324,"user_name":"小雷","can_delete":false,"product_type":"c1","uid":1682698,"ip_address":"","ucode":"D326F0871DA62A","user_header":"https://static001.geekbang.org/account/avatar/00/19/ad/0a/4ced2bcb.jpg","comment_is_top":false,"comment_ctime":1575599148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575599148","product_id":100017301,"comment_content":"先分别查出来小写字母、大写字母、数字的ascii码值范围，使用三个桶（数组）分别存储小写字母、大写字母、数字，遍历这个字符串，基于每个字符的ascii码放到对应的桶中，最后按顺序把小写字母桶、数字桶、大写字母桶拿出来放到一个桶里就行了。","like_count":0},{"had_liked":false,"id":159240,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1575590578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575590578","product_id":100017301,"comment_content":"方法了解个大概，就差实现了","like_count":0},{"had_liked":false,"id":159205,"user_name":"testerman","can_delete":false,"product_type":"c1","uid":1473556,"ip_address":"","ucode":"8DDC62262FA5DE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoDbVIx6bXBFTCDtBUPXzIJzEiaSCfjP7wRA95dGIAGJRnOCutFcIRFkEaUqrEF2fE0HJ1WaFsKn8w/132","comment_is_top":false,"comment_ctime":1575559848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575559848","product_id":100017301,"comment_content":"桶排序<br>数据分别入有序区间桶，桶内排序，合并桶<br><br>计数排序<br>数据差个粒度为1的桶，根据数值入桶计数，由前往后计数求和，下标即为数值排位。再取等大排序数组，从后往前遍历原数组，数组值在排位数组中找排位，入排序数组排位减一索引位，排位数组对应值减一。遍历完成后，排序数组排序亦完成。","like_count":0},{"had_liked":false,"id":159043,"user_name":"test","can_delete":false,"product_type":"c1","uid":1129610,"ip_address":"","ucode":"C57A175CBC6547","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/8a/900ca88a.jpg","comment_is_top":false,"comment_ctime":1575522324,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575522324","product_id":100017301,"comment_content":"老师后续能提供更加真实的实验数据或数据库吗，可以是随机产生的，比如分数，电话号码等等，一想到没数据测试就不知道干嘛了","like_count":0},{"had_liked":false,"id":158996,"user_name":"港","can_delete":false,"product_type":"c1","uid":1122464,"ip_address":"","ucode":"35931FC6198180","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/a0/1fca96c0.jpg","comment_is_top":false,"comment_ctime":1575512387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575512387","product_id":100017301,"comment_content":"可以按照小写字母与大写字母分成两个桶，使用桶排序，如果有数字，就加一个数字的桶就可以了","like_count":0},{"had_liked":false,"id":158925,"user_name":"刘丶小备","can_delete":false,"product_type":"c1","uid":1102106,"ip_address":"","ucode":"F4D5EF592B7030","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/1a/3564c9da.jpg","comment_is_top":false,"comment_ctime":1575502678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575502678","product_id":100017301,"comment_content":"可以准备三个桶：a-z，A-Z，0-9，然后将数据遍历放入桶中，然后再从桶中取出，即可。","like_count":0},{"had_liked":false,"id":158441,"user_name":"毛启圣","can_delete":false,"product_type":"c1","uid":1330056,"ip_address":"","ucode":"233DA95ED28C11","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/88/272b4562.jpg","comment_is_top":false,"comment_ctime":1575370854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575370854","product_id":100017301,"comment_content":"ascill 码，第一次 用5 ascill code做比较值。再两边分别 以 大小写字母 Z、z 的 ascill code做比较值。进行块排 中的一趟比较交换<br>","like_count":0},{"had_liked":false,"id":158226,"user_name":"杰洛特","can_delete":false,"product_type":"c1","uid":1098146,"ip_address":"","ucode":"46D0574654F8AC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqEacia8yO1dR5Tal9B7w8PzTRrViajlAvDph96OqcuBGe29icbXOibhibGmaBcO7BfpVia0Y8ksZwsuAYQ/132","comment_is_top":false,"comment_ctime":1575353908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575353908","product_id":100017301,"comment_content":"请问老师，为什么计数排序要求是非负的？负整数就不能用计数排序了吗？","like_count":0},{"had_liked":false,"id":157506,"user_name":"Sudouble","can_delete":false,"product_type":"c1","uid":1365574,"ip_address":"","ucode":"B369B09DAF8D20","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/46/5eb5261b.jpg","comment_is_top":false,"comment_ctime":1575180690,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575180690","product_id":100017301,"comment_content":"根据大小写字母和数字，将种类分为3种，使用radix排序即可","like_count":0},{"had_liked":false,"id":156351,"user_name":"viola(ludan)","can_delete":false,"product_type":"c1","uid":1000704,"ip_address":"","ucode":"7552857D9524CD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/00/2112c55e.jpg","comment_is_top":false,"comment_ctime":1574860834,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574860834","product_id":100017301,"comment_content":"https:&#47;&#47;www.cnblogs.com&#47;onepixel&#47;p&#47;7674659.html<br>这里关于计数算法比老师这个写的好理解。<br><br>function countingSort(arr, maxValue) {<br>    var bucket = new Array(maxValue + 1),<br>        sortedIndex = 0;<br>        arrLen = arr.length,<br>        bucketLen = maxValue + 1;<br> <br>    for (var i = 0; i &lt; arrLen; i++) {<br>        if (!bucket[arr[i]]) {<br>            bucket[arr[i]] = 0;<br>        }<br>        bucket[arr[i]]++;<br>    }<br> <br>    for (var j = 0; j &lt; bucketLen; j++) {<br>        while(bucket[j] &gt; 0) {<br>            arr[sortedIndex++] = j;<br>            bucket[j]--;<br>        }<br>    }<br> <br>    return arr;<br>}","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294834,"discussion_content":"这种不是稳定的排序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596012579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155648,"user_name":"梨子苹果","can_delete":false,"product_type":"c1","uid":1716067,"ip_address":"","ucode":"3666813FEE31D3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/2f/63/7a048d46.jpg","comment_is_top":false,"comment_ctime":1574732506,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574732506","product_id":100017301,"comment_content":"参考https:&#47;&#47;blog.csdn.net&#47;weixin_41722370&#47;article&#47;details&#47;82812226<br><br>定义红=1白=0 蓝=2<br>代码<br>import java.util.Arrays;<br>import edu.princeton.cs.algs4.StdRandom;<br>public class DutchNationalFlag { <br>\t&#47;* 荷兰国旗问题，有红白蓝三种小球在数组中随机排列，我们的目的是<br>\t * 将三种球按红白蓝三种顺序排好，而且要求只遍历数组一次 *&#47;<br>\tpublic static final int red = 0;<br>\tpublic static final int white = 1;<br>\tpublic static final int blue = 2;<br>\tprivate int n;<br>\tprivate int[] buckets;<br>\tpublic DutchNationalFlag (int[] buckets)<br>\t{ &#47;&#47; 创建一个数组<br>\t\tn = buckets.length;<br>\t\tthis.buckets = buckets;<br>\t}<br>\tpublic void sort()<br>\t{<br>\t\tint lo = 0; &#47;&#47; 白球的起始分界点<br>\t\tint hi = n-1; &#47;&#47; 白球的终止分界点<br>\t\tint current = lo; &#47;&#47;当前指针<br>\t\twhile (current &lt;= hi)<br>\t\t{<br>\t\t\tswitch(color(current))<br>\t\t\t{<br>\t\t\tcase red:<br>\t\t\t\tif (current != lo) <br>\t\t\t\t\tswap (current , lo);<br>\t\t\t\tcurrent ++;<br>\t\t\t\tlo ++;<br>\t\t\t\tbreak;<br>\t\t\tcase white:<br>\t\t\t\tcurrent ++;<br>\t\t\t\tbreak;<br>\t\t\tcase blue:<br>\t\t\t\tswap (current , hi);<br>\t\t\t\thi--;<br>\t\t\t\tbreak;<br>\t\t\t}<br>\t\t}<br>\t\t<br>\t\t<br>\t}<br>\tprivate void swap(int a, int b) {<br>\t\t&#47;&#47; 交换两个位置的元素<br>\t\tint temp = buckets[b];<br>\t\tbuckets[b] = buckets[a];<br>\t\tbuckets[a] = temp;<br>\t\t<br>\t}<br>\tprivate int color(int c) {<br>\t\t&#47;&#47; 检测当前位置的颜色<br>\t\treturn buckets[c];<br>\t}<br>\tpublic static void main(String[] args) {<br>\t\tint n = 10;<br>\t\tint [] buckets = new int[n];<br>\t\tfor (int i = 0; i &lt; n; i++)<br>\t\t{<br>\t\t\tbuckets[i] = StdRandom.uniform(3);<br>\t\t}<br>\t\tDutchNationalFlag s = new DutchNationalFlag (buckets);<br>\t\tSystem.out .println(Arrays.toString(buckets));<br>\t\ts.sort();<br>\t\tSystem.out .println(Arrays.toString(buckets));<br>\t\t<br>\t\t<br>\t}<br> <br>}","like_count":0},{"had_liked":false,"id":155536,"user_name":"Geek_d4fb46","can_delete":false,"product_type":"c1","uid":1744103,"ip_address":"","ucode":"69BE7B4DBB6DAF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ePdic5bvt1mhBC4j2P2IibIVQDCzM3O8rjmGkmFQkHdhbKbKMKsMRmYxm8QE1ibQn1VQ9QfsCfgwlzuGRHkxW9AXw/132","comment_is_top":false,"comment_ctime":1574696077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574696077","product_id":100017301,"comment_content":"老师给的基数排序的方法利用了稳定排序的特征，低位先排序后，在排高位时由于稳定性，在高位相同时低位保持原来大小，以此类推最终按照大小顺序排列。<br>还有一种从高到低的思路，需要排列高位后，对每个相同高位数字内部再次排序，直到最后一位。","like_count":0},{"had_liked":false,"id":155344,"user_name":"渴望做梦","can_delete":false,"product_type":"c1","uid":1398219,"ip_address":"","ucode":"9EB47530A69C91","user_header":"https://static001.geekbang.org/account/avatar/00/15/55/cb/1efe460a.jpg","comment_is_top":false,"comment_ctime":1574680454,"is_pvip":false,"replies":[{"id":"60056","content":"不行，要从低位开始排序，你可以找个例子自己排排看看","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574858537,"ip_address":"","comment_id":155344,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574680454","product_id":100017301,"comment_content":"老师，手机号的排序那里为什么要从最后一位开始排序呢，从第一位不行吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475726,"discussion_content":"不行，要从低位开始排序，你可以找个例子自己排排看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574858537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154670,"user_name":"随而","can_delete":false,"product_type":"c1","uid":1737966,"ip_address":"","ucode":"52AF006AEFC25F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/84/ee/f090938d.jpg","comment_is_top":false,"comment_ctime":1574504687,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574504687","product_id":100017301,"comment_content":"思想基本很容易理解，就是代码不行，怎么办","like_count":0},{"had_liked":false,"id":152981,"user_name":"握不住手中沙","can_delete":false,"product_type":"c1","uid":1097132,"ip_address":"","ucode":"F194E47C4D42C9","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/ac/49494ed8.jpg","comment_is_top":false,"comment_ctime":1574133181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574133181","product_id":100017301,"comment_content":"思考题：桶排序方式，分为小写字母，数字，大写字母三个桶，将数组的字符分别放入三个桶中，再依次取出桶中的数据即可","like_count":0},{"had_liked":false,"id":151826,"user_name":"leesofte","can_delete":false,"product_type":"c1","uid":1014626,"ip_address":"","ucode":"41F327F87C515A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/62/80d0d8d2.jpg","comment_is_top":false,"comment_ctime":1573797540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573797540","product_id":100017301,"comment_content":"用ascii码划分，partition一次，时间O(n)，空间O(1)","like_count":0},{"had_liked":false,"id":150793,"user_name":",","can_delete":false,"product_type":"c1","uid":1439568,"ip_address":"","ucode":"191431A878D7B6","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/50/cbfe1bc0.jpg","comment_is_top":false,"comment_ctime":1573610850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573610850","product_id":100017301,"comment_content":"talk is cheap, shoe me code<br>void<br>exchange_two_order(vector&lt;char&gt; &amp; chars, int n = -1)<br>{<br>    &#47;&#47; A n d U E d i O E k d H A B d a e k d<br>    if(n &lt; 0)<br>        n = chars.size();<br>    int p1{0};<br>    char swap_val;<br>    for(int i = 0; i &lt; n; i++)<br>    {<br>        if(chars[i] &gt;= &#39;a&#39; &amp;&amp; chars[i] &lt;= &#39;z&#39;)<br>        {<br>            swap_val = chars[i];<br>            chars[i] = chars[p1];<br>            chars[p1] = swap_val;<br>            p1++;<br>        }<br>    }<br>}<br><br><br>void<br>exchange_three_order(vector&lt;char&gt; &amp; chars, int n = -1)<br>{<br>    &#47;&#47; A n d 2 3 U E 4 d 2 i O 3 E 9 k 3 d 8 H 1 A B d 9 a 6 e k d<br>    int p1{0};<br>    char swap_val;<br>    for(int i = 0; i &lt; chars.size(); i++)<br>    {<br>        if(!(chars[i] &gt;= &#39;0&#39; &amp;&amp; chars[i] &lt;= &#39;9&#39;))<br>        {<br>            swap_val = chars[i];<br>            chars[i] = chars[p1];<br>            chars[p1] = swap_val;<br>            p1++;<br>        }<br>    }<br>    exchange_two_order(chars, p1);<br>}","like_count":0},{"had_liked":false,"id":149601,"user_name":"vvvvv呀","can_delete":false,"product_type":"c1","uid":1708223,"ip_address":"","ucode":"D1239EC975670D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/10/bf/45ad6573.jpg","comment_is_top":false,"comment_ctime":1573288795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573288795","product_id":100017301,"comment_content":"认真学完这课 将8个排序算法用python实现了一遍(老师的Github上面只有一个计数排序)，感觉收获很大","like_count":0},{"had_liked":false,"id":149597,"user_name":"narcos","can_delete":false,"product_type":"c1","uid":1244286,"ip_address":"","ucode":"725A8944BAA993","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/7e/0cc5a187.jpg","comment_is_top":false,"comment_ctime":1573287984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573287984","product_id":100017301,"comment_content":"计数排序（counting sort）感觉和扑克牌排序一样，有一批扑克，然后要按照顺序排序，一般都是同样的数字放在一组，然后按照顺序排","like_count":0},{"had_liked":false,"id":149435,"user_name":"Geek_b25f99","can_delete":false,"product_type":"c1","uid":1661456,"ip_address":"","ucode":"6F7BEAB2C31528","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epYAmnyHBCVY7YicTF3IXa39mvVTuyum9yicPyFG5amXuo6R2QOTicX0iaXLicH8CTktC7XHruv81ichgkg/132","comment_is_top":false,"comment_ctime":1573217979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573217979","product_id":100017301,"comment_content":"基数排序要求数据可以划分成高低位，位之间有递进关系。比较两个数，我们只需要比较高位，高位相同的再比较低位。这是从左向后（即高位到低位）的方式排序，这种思想算法代码实现起来比较复杂，文中老师所讲的基数排序是从右往左（从低位向高位）的方式，和订单排序思想一样，代码实现起来容易。","like_count":0},{"had_liked":false,"id":149359,"user_name":"贝克水母","can_delete":false,"product_type":"c1","uid":1425849,"ip_address":"","ucode":"8D431C5FC07521","user_header":"https://static001.geekbang.org/account/avatar/00/15/c1/b9/4bba336f.jpg","comment_is_top":false,"comment_ctime":1573201389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573201389","product_id":100017301,"comment_content":"桶排序其实也是用的分治的思想","like_count":0},{"had_liked":false,"id":149134,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1573164031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573164031","product_id":100017301,"comment_content":"针对思考题，进行双指针交换<br><br>def sorting_Ucase_Lcase_digit(nums):<br>    if not nums:<br>        return []<br><br>    idx, left, right = 0, 0, len(nums) - 1 <br><br>    while idx &lt;= right:<br>        if ord(nums[idx]) &lt;= 122 and ord(nums[idx]) &gt;= 97:<br>            nums[left], nums[idx] = nums[idx], nums[left]<br>            idx += 1 <br>            left += 1 <br>        <br>        elif ord(nums[idx]) &lt;= 90 and ord(nums[idx]) &gt;= 65:<br>            nums[right], nums[idx] = nums[idx], nums[right]<br>            right -= 1  <br><br>        else:<br>            idx += 1<br>            <br><br>    return nums <br><br><br>nums = [&#39;D&#39;, &#39;a&#39;, &#39;1&#39;, &#39;F&#39;, &#39;4&#39;, &#39;B&#39;, &#39;c&#39;, &#39;6&#39;, &#39;A&#39;, &#39;z&#39;]<br>nums = sorting_Ucase_Lcase_digit(nums)<br>print(nums)","like_count":0},{"had_liked":false,"id":149117,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1573143658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573143658","product_id":100017301,"comment_content":"在用python实现老师的counting sort代码时，复制操作要特别注意，貌似只有遍历r[i]且赋值a[i]才能成功改变a的值且保持a的引用地址。其他的赋值方法因为都更改了a的地址，但在函数外面并没有改变a的引用地址，所以无法更新。<br><br>import copy<br>def counting_sort(a):<br>    n = len(a)<br>    if n &lt;= 1:<br>        return <br><br>    ## 查找数组中数据的范围<br>    max = a[0]<br>    for i in range(n):<br>        if max &lt; a[i]:<br>            max = a[i]<br><br>    c = [0 for _ in range(max + 1)]<br><br>    ## 计算每个元素的个数，放入c中<br>    for i in range(n):<br>        c[a[i]] += 1 <br><br>    ## 依次累加<br>    for i in range(1, max + 1):<br>        c[i] += c[i-1]<br><br>    ## 临时数组r，存储排序后的结果<br>    r = [0 for _ in range(n)]<br>    ## 计数排序的步骤<br>    for i in range(n-1, -1, -1):<br>        idx = c[a[i]] - 1 <br>        r[idx] = a[i]<br>        c[a[i]] -= 1 <br>    <br>    ## 将结果拷贝给a数组<br>    <br>    print(r)<br>    print(id(r))<br>    print(id(a))<br>    # a = list(r)<br>    # a = r[:]<br>    # a = copy.copy(r)<br>    # a = copy.deepcopy(r)<br>    for i in range(n):<br>        a[i] = r[i]<br>    print(a)<br>    print(id(a))<br>    # a = r <br>    # return a<br><br>a = [2, 5, 3, 0, 2, 3, 0, 3]<br># a = counting_sort(a)<br>counting_sort(a)<br>print(a)<br>print(id(a))","like_count":0},{"had_liked":false,"id":149084,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1573139034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573139034","product_id":100017301,"comment_content":"老师写的计数排序的代码中，为何在函数参数中设定n呢？感觉这个函数输入只有数组a更自然一点，n可以在函数中用n=size(a)得到","like_count":0},{"had_liked":false,"id":148711,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1573052765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573052765","product_id":100017301,"comment_content":"【针对这些划分之后还是比较大的文件，我们可以继续划分】这里应该可以利用递归思想吧","like_count":0},{"had_liked":false,"id":148270,"user_name":"乾坤瞬间","can_delete":false,"product_type":"c1","uid":1683130,"ip_address":"","ucode":"15BDCF29CBF8EB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","comment_is_top":false,"comment_ctime":1572966640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572966640","product_id":100017301,"comment_content":"思考题<br><br>#include &lt;iostream&gt;<br>template &lt;typename T&gt;<br>void swap(T &amp;left, T&amp; right) {<br>        T  temp = left;<br>        left  = right;<br>        right = temp;<br>}<br>&#47;&#47; a = 97<br>template &lt;typename T&gt;<br>void patition_main(T &amp; arr, int n = 10 ) {<br>    int slow = 0;<br>    <br>    for(int i = 0 ; i &lt; n ; i++){<br>        int fast = i;<br>        int hasswap = false;<br>        while(fast  &gt; slow &amp;&amp; arr[fast] &gt;=97 &amp;&amp; arr[--fast] &lt; 97){<br>            swap(arr[fast], arr[fast + 1]);<br>            hasswap = true;<br>        }<br>        if (hasswap) slow++;<br>    }<br>} <br>int main(int argc, char const *argv[])<br>{<br>    char str[] = {&#39;b&#39;,&#39;a&#39;,&#39;F&#39;,&#39;B&#39;,&#39;c&#39;,&#39;A&#39;,&#39;z&#39;};<br>    &#47;&#47; &#39;a&#39; =  97 , <br>    patition_main(str,7);<br>    std::cout &lt;&lt; str&lt;&lt; std::endl;<br>    return 0;<br>}","like_count":0},{"had_liked":false,"id":147433,"user_name":"Geek_5dd7ea","can_delete":false,"product_type":"c1","uid":1587779,"ip_address":"","ucode":"48956BCA4FF77A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er0gpDoqDibrXFic3eX1qvzxf3bE45fCK3jJvM7rPtOP4FpTmAFwKOGP45qiaBLXMrTNytXAF04kX5uw/132","comment_is_top":false,"comment_ctime":1572863726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572863726","product_id":100017301,"comment_content":"计数排序处理的优点复杂了，感觉不是太好理解，这样处理会不会更容易理解些：<br>public static int[] couontSort(int[] arr) {<br>    if(arr == null || arr.length &lt; 2) return arr;<br>    int n = arr.length;<br>    int min = arr[0];<br>    int max = arr[0];<br>    &#47;&#47;寻找数组的最大值与最小值<br>    for (int i = 1; i &lt; n; i++) {<br>        if(max &lt; arr[i]) {<br>            max = arr[i];<br>        }<br>        if(min &gt; arr[i]) {<br>            min = arr[i];<br>        }<br>    }<br>    int d = max - min + 1;<br>    &#47;&#47;创建大小为max的临时数组<br>    int[] temp = new int[d];<br>    &#47;&#47;统计元素i出现的次数<br>    for (int i = 0; i &lt; n; i++) {<br>        temp[arr[i] - min]++;<br>    }<br>    int k = 0;<br>    &#47;&#47;把临时数组统计好的数据汇总到原数组<br>    for (int i = 0; i &lt; d; i++) {<br>        for (int j = temp[i]; j &gt; 0; j--) {<br>            arr[k++] = i + min;<br>        }<br>    }<br>    return arr;<br>}","like_count":0},{"had_liked":false,"id":146804,"user_name":"💜","can_delete":false,"product_type":"c1","uid":1718191,"ip_address":"","ucode":"BD0F01FDA7A129","user_header":"https://static001.geekbang.org/account/avatar/00/1a/37/af/a31cca7f.jpg","comment_is_top":false,"comment_ctime":1572662489,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572662489","product_id":100017301,"comment_content":"def sort(arr):<br>    i = 0<br>    j = len(arr) - 1<br>    while i &lt; j:<br>        while i &lt; j and arr[i].islower():<br>            i += 1<br>        while i &lt; j and not arr[j].islower():<br>            j -= 1<br>        arr[i], arr[j] = arr[j], arr[i]<br>    j = len(arr) - 1<br>    while i &lt; j:<br>        while i &lt; j and arr[i].isdigit():<br>            i += 1<br>        while i &lt; j and not arr[j].isdigit():<br>            j -= 1<br>        arr[i], arr[j] = arr[j], arr[i]<br>    return arr<br><br>arr = list(input().split(&quot; &quot;))<br>print(sort(arr))<br>","like_count":0},{"had_liked":false,"id":146348,"user_name":"一笔荒芜","can_delete":false,"product_type":"c1","uid":1695627,"ip_address":"","ucode":"73B049AF0E4FD5","user_header":"https://static001.geekbang.org/account/avatar/00/19/df/8b/534bab21.jpg","comment_is_top":false,"comment_ctime":1572503643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572503643","product_id":100017301,"comment_content":"其实吧，我觉得在老师这种大神面前觉得很简单可能没有讲解地十分完全，但对我们这些小白来说，太难了","like_count":0},{"had_liked":false,"id":146010,"user_name":"向科","can_delete":false,"product_type":"c1","uid":1294797,"ip_address":"","ucode":"6EFC2C4FB11A24","user_header":"https://static001.geekbang.org/account/avatar/00/13/c1/cd/cdb510ae.jpg","comment_is_top":false,"comment_ctime":1572418414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572418414","product_id":100017301,"comment_content":"设计三个桶，分别对应数字的计数，数字+小写字母的计数，数字+小写字母+大写字母的计数。然后从后向前遍历输入的字符串，如果是大写字母，那么它在数组中的存储位置就是第三个桶的计数值-1，完成一个字符的存储后，把当前桶内的计数值-1，","like_count":0},{"had_liked":false,"id":144433,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1571921057,"is_pvip":false,"replies":[{"id":"55982","content":"我么看到单词排序的啊","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572230368,"ip_address":"","comment_id":144433,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571921057","product_id":100017301,"comment_content":"老师有个疑问：对于文中所说的对单词排序的问题，应该是在前面补0吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471937,"discussion_content":"我么看到单词排序的啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572230368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40532,"discussion_content":" 老师有可能是您忘记了，我这里说的排序指的是您说的这个“实际上，我们可以把所有的单词补齐到相同长度，位数不够的可以在后面补“0” ”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572230687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144073,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1571839724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571839724","product_id":100017301,"comment_content":"数字、大写字母、小写字母三种的ASCII码范围分别是：0-9,65-90,97-122。创建三个范围的三个桶，遍历所有元素，放入指定桶，排序后，将三个通过按要求的顺序合并。","like_count":0},{"had_liked":false,"id":143820,"user_name":"Mew151","can_delete":false,"product_type":"c1","uid":1002201,"ip_address":"","ucode":"D4793F5874F345","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/d9/75dd7cf9.jpg","comment_is_top":false,"comment_ctime":1571795457,"is_pvip":false,"replies":[{"id":"56468","content":"就不是稳定排序算法了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572487809,"ip_address":"","comment_id":143820,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571795457","product_id":100017301,"comment_content":"想问一下：“我们从后到前依次扫描数组 A。”——这里，从前到后扫描应该也是可以的吧？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471705,"discussion_content":"就不是稳定排序算法了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572487809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143193,"user_name":"学个球","can_delete":false,"product_type":"c1","uid":1019725,"ip_address":"","ucode":"7343F3C0CA981D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/4d/65fb45e6.jpg","comment_is_top":false,"comment_ctime":1571644896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571644896","product_id":100017301,"comment_content":"对于桶排序的时间复杂度分析有一些疑问<br>    对m个桶都进行快排，如果每个桶都“可以同时”进行快排，那时间复杂度还需要用 m*nlogn吗？这个m不是可以省略吗？<br>","like_count":0},{"had_liked":false,"id":142916,"user_name":"Mercury","can_delete":false,"product_type":"c1","uid":1664015,"ip_address":"","ucode":"EE5ACA444C754C","user_header":"https://static001.geekbang.org/account/avatar/00/19/64/0f/12b1b224.jpg","comment_is_top":false,"comment_ctime":1571584418,"is_pvip":false,"replies":[{"id":"55210","content":"嗯嗯，快排确实不妥。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1571614912,"ip_address":"","comment_id":142916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571584418","product_id":100017301,"comment_content":"电话号码问题里，桶排序每个桶不是用了快排吗，快排不稳定啊，那怎么能用桶排啊","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471323,"discussion_content":"嗯嗯，快排确实不妥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571614912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142376,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1571361262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571361262","product_id":100017301,"comment_content":"a-z A-Z 0-9 分别建桶(初始化空), 然后遍历字符串 存储每个字符至相应桶, 最后把所有桶按次序分别遍历","like_count":0},{"had_liked":false,"id":142155,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1571301240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571301240","product_id":100017301,"comment_content":"对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加） 这样理解C[6] 数组顺序求和","like_count":0},{"had_liked":false,"id":141442,"user_name":"方晓斌","can_delete":false,"product_type":"c1","uid":1042367,"ip_address":"","ucode":"A26FA55F05FE9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/bf/b6dd86f4.jpg","comment_is_top":false,"comment_ctime":1571154932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571154932","product_id":100017301,"comment_content":"思考题其实可以参考快排那一节的分区函数处理方法","like_count":0},{"had_liked":false,"id":140505,"user_name":"李贵興","can_delete":false,"product_type":"c1","uid":1540775,"ip_address":"","ucode":"8C8843AE980818","user_header":"https://static001.geekbang.org/account/avatar/00/17/82/a7/d608fced.jpg","comment_is_top":false,"comment_ctime":1570970808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570970808","product_id":100017301,"comment_content":"思考题我有个大胆的想法，把全部需要排序的字符拼接成一个字符串，然后用三个正则全局匹配，时间复杂度O(1)，空间复杂度O(1)","like_count":0},{"had_liked":false,"id":139126,"user_name":"Lance","can_delete":false,"product_type":"c1","uid":1686840,"ip_address":"","ucode":"CCE52F86EEBBED","user_header":"https://static001.geekbang.org/account/avatar/00/19/bd/38/6d436088.jpg","comment_is_top":false,"comment_ctime":1570550525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570550525","product_id":100017301,"comment_content":"计数排序中从尾部开始遍历数据是出栈思维，保证稳定排序。","like_count":0},{"had_liked":false,"id":138101,"user_name":"coldpark","can_delete":false,"product_type":"c1","uid":1058331,"ip_address":"","ucode":"D1B0F343B384F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/26/1b/4caf36bd.jpg","comment_is_top":false,"comment_ctime":1570024116,"is_pvip":false,"replies":[{"id":"53768","content":"你是说的基数排序吗？排序算法的选择跟怎么比较是两回事呀","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570661015,"ip_address":"","comment_id":138101,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570024116","product_id":100017301,"comment_content":"如果只有字母又不要求组内有序，为什么不用直接用字符串ASCII比较？大于z的放在后面，小于等于z的放在前面。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469385,"discussion_content":"你是说的基数排序吗？排序算法的选择跟怎么比较是两回事呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570661015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138036,"user_name":"黑洞","can_delete":false,"product_type":"c1","uid":1451364,"ip_address":"","ucode":"840A4330B1B2F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/64/d66ea739.jpg","comment_is_top":false,"comment_ctime":1569988494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569988494","product_id":100017301,"comment_content":"桶排序算法：<br>将要排序的全部数据平行处理一下就可以基本均匀放入多个桶里，那么桶的个数和每个桶的数据范围的设计很有讲究，最好是能够找到一个通过直接计算就能将一个数据精准地放置到一个桶中，而不是通过一段一段地比较操作来决定。比如把金额在0~99元之间的50笔交易排序，就可以设置10个桶编号从0到9，范围分别为0~9，10~19，20~29，…，90~99。那么对任意一个金额比如57，就可以通过公式“金额&#47;10”计算得出桶号为5，就可以直接放到第5号桶中，这就是说让每一个数据入桶都是O(1) 操作，从而全部数据入桶就是一个O(n)操作。当然有时候具体的案例，待排序的数据并不是平均分布的，比如订单金额，而是呈现一定的概率分布比如正太分布或者泊松分布等等，所以如何设置桶才能把全部数据比较均匀地划入各个桶中，其实是个很考验智慧和经验的事情，而不至于出现个别桶中数据特别多，而大多数桶中数据很少的情况。","like_count":0},{"had_liked":false,"id":136693,"user_name":"gh1989","can_delete":false,"product_type":"c1","uid":1178127,"ip_address":"","ucode":"DFEAAAA049408E","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/0f/7b6b3e96.jpg","comment_is_top":false,"comment_ctime":1569491735,"is_pvip":false,"replies":[{"id":"52476","content":"要看n大小了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1569534345,"ip_address":"","comment_id":136693,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569491735","product_id":100017301,"comment_content":"桶排序的O（n）本来就是近似的，手机号再进行11次O（n）。相当于至少O(11n)了。 多数情况下不一定比快速排序快吧。只是稳定一些。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468757,"discussion_content":"要看n大小了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569534345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135861,"user_name":"David","can_delete":false,"product_type":"c1","uid":1023472,"ip_address":"","ucode":"1C76747719CD3B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/f0/6c34b90f.jpg","comment_is_top":false,"comment_ctime":1569289562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569289562","product_id":100017301,"comment_content":"把大小写字母数字转换成ascii码，再通过已排好序的ascii码表排序","like_count":0},{"had_liked":false,"id":133847,"user_name":"杜川🐱","can_delete":false,"product_type":"c1","uid":1358490,"ip_address":"","ucode":"D15DFBC2E14E4F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ba/9a/42a2e35f.jpg","comment_is_top":false,"comment_ctime":1568683558,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568683558","product_id":100017301,"comment_content":"最后的思考题用两个栈存数字和大写字母，一个临时数组存小写字母。","like_count":0},{"had_liked":false,"id":133641,"user_name":"Hwan","can_delete":false,"product_type":"c1","uid":1205627,"ip_address":"","ucode":"A728C6790511BD","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","comment_is_top":false,"comment_ctime":1568626653,"is_pvip":false,"replies":[{"id":"51420","content":"因为我们排序的是基础数据，比如int、long类型的，排序算法的稳定性体现不出来作用。如果排序的是对象，那两个对象的key值虽然一样，但对象本身是有区别的，这个时候，是否稳定排序才会有区别。你可以看下这篇文章：<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;PdvdZoa-SGk_Ojkv2pC2tQ","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1568761429,"ip_address":"","comment_id":133641,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568626653","product_id":100017301,"comment_content":"我们从后到前依次扫描数组 A<br><br>争哥，你好，我想了这句话，然后自己试了下文中的例子，不过我是从前到后依次扫描数组A的，然后也可以，然后想问下，这个从前到后和从后到前是不是都是可以的呢，我感觉没啥区别呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467459,"discussion_content":"因为我们排序的是基础数据，比如int、long类型的，排序算法的稳定性体现不出来作用。如果排序的是对象，那两个对象的key值虽然一样，但对象本身是有区别的，这个时候，是否稳定排序才会有区别。你可以看下这篇文章：\nhttps://mp.weixin.qq.com/s/PdvdZoa-SGk_Ojkv2pC2tQ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568761429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132673,"user_name":"李勇","can_delete":false,"product_type":"c1","uid":1122136,"ip_address":"","ucode":"B5AE3D070D9269","user_header":"https://static001.geekbang.org/account/avatar/00/11/1f/58/ade4475d.jpg","comment_is_top":false,"comment_ctime":1568189752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568189752","product_id":100017301,"comment_content":"不理解计数排序","like_count":0},{"had_liked":false,"id":129599,"user_name":"冰风落叶","can_delete":false,"product_type":"c1","uid":1128059,"ip_address":"","ucode":"E4DE480B95A17D","user_header":"https://static001.geekbang.org/account/avatar/00/11/36/7b/3788ca13.jpg","comment_is_top":false,"comment_ctime":1567166509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567166509","product_id":100017301,"comment_content":"一、线性排序<br>1. 线性排序算法包括：桶排序、计数排序、基数排序<br>2. 线性排序由于不涉及元素间的比较，所以能做到线性时间复杂度O(n)<br>3. 对要排序的数据要求很苛刻<br><br>二、桶排序<br>1. 原理：将数据分到若干个有序的桶里，每个桶里单独排序，之后再将每个桶里的数据顺序取出，组成的序列就是有序的了。（分桶，每个桶内快排）<br>2. 对数据的要求：首先，数据必须很容易就分成若干个桶，并且桶和桶之间存在天然的大小顺序；其次，数据在各个桶的分布是比较均匀的。<br>3. 时间复杂度：最好为O(n)，最坏为O(nlogn)，取决于桶的划分，如果桶适量且数据分布均匀则为O(n)；如果数据全在一个桶里，然后桶内部排序用了快排，则为O(nlogn)<br>4. 空间复杂度：O(n&#47;m)，n为数据规模，m为桶的数量<br>5. 稳定性：如果每个桶内部都用归并的话，是稳定的，如果用快排的话，就是不稳定的<br>6. 适用场景：例如：外部排序，也就是数据存储在外部磁盘，且数据量较大，而内存有限，无法将数据全部加载到内存中。<br><br>三、计数排序<br>1. 原理：计数排序其实就是特殊的桶排序，划分若干个桶，让每个桶内的数值都是相同的，省去桶内排序的时间 （按值分桶，每个桶内值相同，通过统计计数，实现排序）<br>2. 对数据的要求：只能用在数据范围不大的场景中，并且数据范围要与数据规模相差不大，并且只能给非负整数排序<br>3. 时间复杂度：O(n)<br>4. 空间复杂度：O(n)<br>5. 稳定性：稳定<br><br>四、基数排序<br>1. 原理：按照位进行排序，从后往前一位一位的排序 (在每一位上桶排序)<br>2. 对数据的要求：数据必须可以分出独立的位来，并且位之间有递进关系，高位大则低位就不用比较了，并且每一位的数据范围不能太大，要可以用线性算法排序。<br>3. 时间复杂度：O(n)<br>4. 空间复杂度：O(n)<br>5. 稳定性： 稳定","like_count":0},{"had_liked":false,"id":129441,"user_name":"我不是凯丁","can_delete":false,"product_type":"c1","uid":1636231,"ip_address":"","ucode":"33B3DA141313B3","user_header":"","comment_is_top":false,"comment_ctime":1567129456,"is_pvip":false,"replies":[{"id":"48489","content":"为啥O（nlog n）&lt; O(nlog 10**11) 这个不成立啊，如果n是很大很大呢","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1567378331,"ip_address":"","comment_id":129441,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567129456","product_id":100017301,"comment_content":"老师您好，我自己分析了下，发现手机号排序的例子用归并排序，时间和空间复杂度不会比基数排序差，您可以帮忙看一下吗？<br>        归并排序的时间复杂度O（nlog n）&lt; O(nlog 10**11)=O(n) * 11 * log10<br><br>        基数排序时间复杂度=O（n）*11<br>空间复杂度都是O(n)","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465470,"discussion_content":"为啥O（nlog n）&amp;lt; O(nlog 10**11) 这个不成立啊，如果n是很大很大呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567378331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1636231,"avatar":"","nickname":"我不是凯丁","note":"","ucode":"33B3DA141313B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7101,"discussion_content":"谢谢老师的回复。\n因为手机号的例子里，号码不重复，N最大不超过10**11","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567386091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128774,"user_name":"森鱼","can_delete":false,"product_type":"c1","uid":1638587,"ip_address":"","ucode":"6AF86EB05088F4","user_header":"https://static001.geekbang.org/account/avatar/00/19/00/bb/25a29311.jpg","comment_is_top":false,"comment_ctime":1566961001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566961001","product_id":100017301,"comment_content":"计数排序那里，倒着遍历是为了保证算法的稳定性，即值相同的元素相对位置保持不变","like_count":0},{"had_liked":false,"id":125421,"user_name":"bin zi 98","can_delete":false,"product_type":"c1","uid":1155080,"ip_address":"","ucode":"8A84E75A298222","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/08/6ae95537.jpg","comment_is_top":false,"comment_ctime":1566182436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566182436","product_id":100017301,"comment_content":"课后题：可以利用两个队列来存放大写字母和小写字母。遍历字符串，遇到小写字母，入队到小写字母队列，大写字母入队到大写字母队列。扫描结束后，再分别清空小写字母队列和大写字母队列。如果有数字的话，可以再加一个数字队列。","like_count":0},{"had_liked":false,"id":124304,"user_name":"走马","can_delete":false,"product_type":"c1","uid":1251016,"ip_address":"","ucode":"EEFE8F7590FFA4","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/c8/980776fc.jpg","comment_is_top":false,"comment_ctime":1565856606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565856606","product_id":100017301,"comment_content":"分数字、小写、大写 三个桶进行排序处理，依次读出就可以","like_count":0},{"had_liked":false,"id":124064,"user_name":"JackLei","can_delete":false,"product_type":"c1","uid":1099989,"ip_address":"","ucode":"01128A61A9E80F","user_header":"https://static001.geekbang.org/account/avatar/00/10/c8/d5/e88c1805.jpg","comment_is_top":false,"comment_ctime":1565800982,"is_pvip":false,"replies":[{"id":"45699","content":"堆排序？插入排序？选择排序？要看你具体需求了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1565909728,"ip_address":"","comment_id":124064,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565800982","product_id":100017301,"comment_content":"如果50万考生，要实时排序呢？假设成绩并不是同一个时间出来，是分时间段出来的，如何做到实时，我想不出答案","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462991,"discussion_content":"堆排序？插入排序？选择排序？要看你具体需求了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565909728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122801,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1565529878,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565529878","product_id":100017301,"comment_content":"计数排序是稳定的排序，嗯，因为是 c 数组里面记录的是相同值在 r 数组中的下标，然后又是倒序遍历 a，所以能保证相同值的稳定性；","like_count":0},{"had_liked":false,"id":121509,"user_name":"Geek_2e5e67","can_delete":false,"product_type":"c1","uid":1598101,"ip_address":"","ucode":"4CD1553DF1E223","user_header":"","comment_is_top":false,"comment_ctime":1565149539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565149539","product_id":100017301,"comment_content":"只说实现思想，不给出实现过程的话，我们会有点懵","like_count":0},{"had_liked":false,"id":121278,"user_name":"一枝梅","can_delete":false,"product_type":"c1","uid":1121677,"ip_address":"","ucode":"7DCE43B638EA6A","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/8d/9717e593.jpg","comment_is_top":false,"comment_ctime":1565092813,"is_pvip":false,"replies":[{"id":"44733","content":"那是因为要保证排序算法的稳定性呢","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1565219600,"ip_address":"","comment_id":121278,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565092813","product_id":100017301,"comment_content":"为什么计数排序最后一步要倒着遍历数据，和正着遍历数据有什么不同么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461721,"discussion_content":"那是因为要保证排序算法的稳定性呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565219600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118268,"user_name":"字节情怀","can_delete":false,"product_type":"c1","uid":1144914,"ip_address":"","ucode":"6C9AB8C844F4C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/78/52/116508b8.jpg","comment_is_top":false,"comment_ctime":1564305962,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564305962","product_id":100017301,"comment_content":"老师，为什么手机号码不是从第一个开始比较，而是从最好一个开始比较？","like_count":0,"discussions":[{"author":{"id":1519395,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2f/23/b23dd0b4.jpg","nickname":"Geek_熊","note":"","ucode":"43B6609264D048","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22669,"discussion_content":"第一位开始比较  不是稳定排序","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569668725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117644,"user_name":"于无声处听惊雷","can_delete":false,"product_type":"c1","uid":1238872,"ip_address":"","ucode":"F2A6718BC2F1B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/58/0b494b16.jpg","comment_is_top":false,"comment_ctime":1564104735,"is_pvip":false,"replies":[{"id":"43283","content":"你可以看下这篇文章，看是否对你有启发：<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;PdvdZoa-SGk_Ojkv2pC2tQ","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1564266323,"ip_address":"","comment_id":117644,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564104735","product_id":100017301,"comment_content":"计数排序中最后一部分从后到前扫描数组a的泳用意是什么，从前往后也没区别呀。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460065,"discussion_content":"你可以看下这篇文章，看是否对你有启发：\nhttps://mp.weixin.qq.com/s/PdvdZoa-SGk_Ojkv2pC2tQ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564266323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115048,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1563460996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563460996","product_id":100017301,"comment_content":"去年买的课程，我可能今天是第一次看这篇文章。","like_count":0},{"had_liked":false,"id":111008,"user_name":"凉凉","can_delete":false,"product_type":"c1","uid":1325256,"ip_address":"","ucode":"FCCF976E41EF71","user_header":"https://static001.geekbang.org/account/avatar/00/14/38/c8/972a5024.jpg","comment_is_top":false,"comment_ctime":1562419981,"is_pvip":false,"replies":[{"id":"40493","content":"算的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1562543429,"ip_address":"","comment_id":111008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562419981","product_id":100017301,"comment_content":"桶排序那块：‘’我们可以先扫描一遍文件，看订单金额所处的数据范围‘’ 这个扫描文件的时间复杂度不算吗？<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457172,"discussion_content":"算的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562543429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107135,"user_name":"salmonl","can_delete":false,"product_type":"c1","uid":1010160,"ip_address":"","ucode":"0F85E5AD2C52B2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/69/f0/714c2f83.jpg","comment_is_top":false,"comment_ctime":1561464810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561464810","product_id":100017301,"comment_content":"不管是桶排序，还是计数排序，考虑时间负责度的时候，不考虑前置工作即把数据分到各个桶中的时间开销么？<br><br>思考🤔了下，好像也是O（n）","like_count":0},{"had_liked":false,"id":106606,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1561355106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561355106","product_id":100017301,"comment_content":"桶排序适用场景：数据能划分成桶且桶之间有天然的大小关系；数据在桶之间的分布是均匀的<br>计数排序适用场景：数据范围不大；非负整数排序<br>基数排序使用场景：数据可以分割出单独的“位”；位之间有递进关系；位的数据范围不能太大，保证可以用线性排序算法来排序","like_count":0},{"had_liked":false,"id":103341,"user_name":"Geek_lls","can_delete":false,"product_type":"c1","uid":1574751,"ip_address":"","ucode":"7E429A0031CA74","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUMp5g21eMibL2RSEFTWezJVhdx3AYTyy9hNTSAxWIcVMiavfqNvAy8gHEficYQ8svmTIn9lS35z83A/132","comment_is_top":false,"comment_ctime":1560417004,"is_pvip":false,"replies":[{"id":"37583","content":"需要的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560562943,"ip_address":"","comment_id":103341,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560417004","product_id":100017301,"comment_content":"桶排序，将数据划分到每一个桶里的时间复杂度需要计算吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453837,"discussion_content":"需要的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560562943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102297,"user_name":"0|1","can_delete":false,"product_type":"c1","uid":1450669,"ip_address":"","ucode":"43E63B54C126DE","user_header":"https://static001.geekbang.org/account/avatar/00/16/22/ad/44944465.jpg","comment_is_top":false,"comment_ctime":1560179681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560179681","product_id":100017301,"comment_content":"看到老师这么详劲的算法，看明白后有一种醍醐灌顶的感觉，这钱，花了，好值","like_count":0},{"had_liked":false,"id":101984,"user_name":"JGOS","can_delete":false,"product_type":"c1","uid":1237592,"ip_address":"","ucode":"46A905A169408F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/58/2468a5e9.jpg","comment_is_top":false,"comment_ctime":1560086771,"is_pvip":false,"replies":[{"id":"36905","content":"是可以的，只不过空间复杂度就高了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1560210858,"ip_address":"","comment_id":101984,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560086771","product_id":100017301,"comment_content":"老师,基数排序既然是o(n),为什么不普遍用于int类型的排序呢,高位补0不就行了吗?","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453204,"discussion_content":"是可以的，只不过空间复杂度就高了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560210858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101759,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1559962786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559962786","product_id":100017301,"comment_content":"老师举的这个例子是数据分类 而不是排序","like_count":0},{"had_liked":false,"id":101758,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1559962664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559962664","product_id":100017301,"comment_content":"转换成assic码就可以 不需要排序","like_count":0},{"had_liked":false,"id":100117,"user_name":"郑印","can_delete":false,"product_type":"c1","uid":1005282,"ip_address":"","ucode":"181B0FDE5E1532","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/e2/2dcab30d.jpg","comment_is_top":false,"comment_ctime":1559449435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559449435","product_id":100017301,"comment_content":"根据Ascii码分层两组，把小写的放前面，大写的放后面，在合并成一组就可以了","like_count":0},{"had_liked":false,"id":99956,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1559371809,"is_pvip":false,"replies":[{"id":"36028","content":"不对，计数排序的空间复杂度也并不是o（1）","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559514743,"ip_address":"","comment_id":99956,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559371809","product_id":100017301,"comment_content":"计数排序的空间复杂度是O（1），桶排序的空间复杂度是O（n），计数排序是桶排序的升级版，这样理解对吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452338,"discussion_content":"不对，计数排序的空间复杂度也并不是o（1）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559514743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99948,"user_name":"川子","can_delete":false,"product_type":"c1","uid":1083534,"ip_address":"","ucode":"5EFEC192D06A16","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/8e/9562b0a7.jpg","comment_is_top":false,"comment_ctime":1559368218,"is_pvip":false,"replies":[{"id":"36260","content":"我们有可能处理的不是基础类型的数据，有可能处理的是对象，你可以看下这个link：<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;PdvdZoa-SGk_Ojkv2pC2tQ","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559611684,"ip_address":"","comment_id":99948,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1559368218","product_id":100017301,"comment_content":"计算排序算法有一个疑问，从其它地方看到，得出C[6]后 直接遍历c[6],  然后根据数量输出下标到一个新数组里就完成了排序，这样做是否有问题？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452335,"discussion_content":"我们有可能处理的不是基础类型的数据，有可能处理的是对象，你可以看下这个link：\nhttps://mp.weixin.qq.com/s/PdvdZoa-SGk_Ojkv2pC2tQ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559611684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1180460,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/2c/33ba4d12.jpg","nickname":"山中无老虎 😪","note":"","ucode":"594247C3A976DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5307,"discussion_content":"假设你有一个 ArrayList<User> 需要根据年龄排序，你定义出来的计算数组 C[N] 只会存储年龄吧，所以没办法拿这个C[N]，直接定位回原始数据，所以才需要重新遍历一下原始数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566147915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99765,"user_name":"郭俊杰","can_delete":false,"product_type":"c1","uid":1082785,"ip_address":"","ucode":"D328E5738A4413","user_header":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","comment_is_top":false,"comment_ctime":1559294311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559294311","product_id":100017301,"comment_content":"看完课程后，只关注一下老师有回复的问题，效率高，哈哈","like_count":0},{"had_liked":false,"id":98974,"user_name":"Geek_cf29f0","can_delete":false,"product_type":"c1","uid":1337800,"ip_address":"","ucode":"F635968AE2656C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bWpFdAQwTzBg70ib6QTQomfQV3Ak1CFQPXun20w2Kz3PCLtsV75nNrqBuDEvehtlCoTkyT3icNWnvO7nPMc1RFfg/132","comment_is_top":false,"comment_ctime":1559122262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559122262","product_id":100017301,"comment_content":"public static void main(String[] args) {<br>        char[] array = {&#39;D&#39;,&#39;a&#39;,&#39;F&#39;,&#39;B&#39;,&#39;c&#39;,&#39;A&#39;,&#39;z&#39;};<br>        array = sort(array);<br>        for (char item : array){<br>            System.out.println(item);<br>        }<br>    }<br><br><br>    private static char[] sort(char[] array){<br>        int length = array.length;<br>        int i = 0;<br>        int j = length-1;<br>        char[] result = new char[length];<br>        for (int k=0; k&lt;length; k++){<br>            if (Character.isLowerCase(array[k])){<br>                result[i] = array[k];<br>                i++;<br>            }else {<br>                result[j] = array[k];<br>                j--;<br>            }<br>        }<br>        return result;<br>    }<br>使用两个下标处理，保证稳定排序，时间复杂度与空间复杂度都是o(n)","like_count":0},{"had_liked":false,"id":98973,"user_name":"Geek_cf29f0","can_delete":false,"product_type":"c1","uid":1337800,"ip_address":"","ucode":"F635968AE2656C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bWpFdAQwTzBg70ib6QTQomfQV3Ak1CFQPXun20w2Kz3PCLtsV75nNrqBuDEvehtlCoTkyT3icNWnvO7nPMc1RFfg/132","comment_is_top":false,"comment_ctime":1559122193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559122193","product_id":100017301,"comment_content":"public static void main(String[] args) {<br>        char[] array = {&#39;D&#39;,&#39;a&#39;,&#39;F&#39;,&#39;B&#39;,&#39;c&#39;,&#39;A&#39;,&#39;z&#39;};<br>        array = sort(array);<br>        for (char item : array){<br>            System.out.println(item);<br>        }<br>    }<br><br><br>    private static char[] sort(char[] array){<br>        int length = array.length;<br>        int i = 0;<br>        int j = length-1;<br>        char[] result = new char[length];<br>        for (int k=0; k&lt;length; k++){<br>            if (Character.isLowerCase(array[k])){<br>                result[i] = array[k];<br>                i++;<br>            }else {<br>                result[j] = array[k];<br>                j--;<br>            }<br>        }<br>        return result;<br>    }<br>使用两个下标来处理，保证稳定排序，时间复杂度o(n)，空间复杂度o(n)","like_count":0},{"had_liked":false,"id":98720,"user_name":"Geek_18b741","can_delete":false,"product_type":"c1","uid":1368496,"ip_address":"","ucode":"097BA0C2F44150","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLlztvlBgajZMEph8AvkP2pfoqNCGtYSalIKgrCbCg0MWDZJgJwqVRfWA6cgIoZicL6dKibfK0zjsWg/132","comment_is_top":false,"comment_ctime":1559080922,"is_pvip":false,"replies":[{"id":"35619","content":"O（n+max）","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559172402,"ip_address":"","comment_id":98720,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559080922","product_id":100017301,"comment_content":"计数排序的时间复杂度应该是：mValue = Math.max(n,max), O(mValue)吧。看n和最大值哪个大。这种时间复杂度是这样表示吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451806,"discussion_content":"O（n+max）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559172402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98242,"user_name":"覃钰栋","can_delete":false,"product_type":"c1","uid":1251835,"ip_address":"","ucode":"19080C463658EF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/oiboHpgukqib2ASXeU0H7W1ibgRMqyrNE5KaWicicPEDy0ia8YdoneZAtvW0EFIiaqZJp2OS4dnweOgXaJ5EjJicicEqic5A/132","comment_is_top":false,"comment_ctime":1558940405,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1558940405","product_id":100017301,"comment_content":"根据@wucj的思路来实现“小写字母在前，数字在中间，大写字母大后”<br> \t&#47;&#47;将小写字母与非小写字母进行指针交换（小写字母在前，非小写字母在后）<br>    public static String[] sort(String[] array){<br>        &#47;&#47;寻找小写的指针<br>        int low = 0;<br>        &#47;&#47;寻找大写的指针<br>        int high = array.length-1;<br>        String upper = &quot;QWERTYUIOPASDFGHJKLZXCVBNM&quot;;<br>        String lower = &quot;qwertyuiopasdfghjklzxcvbnm&quot;;<br>        while (low &lt; high ){<br>            &#47;&#47;找到大写<br>            while (upper.indexOf(array[low]) == -1 ){<br>                low++;<br>            }<br>            &#47;&#47;找到小写<br>            while (lower.indexOf(array[high]) == -1 ){<br>                high--;<br>            }<br>            if (low &lt; high){<br>                String temp = array[high];<br>                array[high] = array[low];<br>                array[low] = temp;<br>            }<br><br>        }<br>        return array;<br>    }<br><br>  \t&#47;&#47;将数字与大写字母进行指针交换（数字在前，大写字母在后）<br>    public static String[] sort2(String[] array){<br>        int low = 0;<br>        int high = array.length-1;<br>        String upper = &quot;QWERTYUIOPASDFGHJKLZXCVBNM&quot;;<br>        String number = &quot;1234567890&quot;;<br>        while (low &lt; high){<br>            &#47;&#47;找到大写<br>            while (upper.indexOf(array[low]) == -1){<br>                low++;<br>            }<br>            &#47;&#47;找到数字<br>            while (number.indexOf(array[high]) == -1 ){<br>                high--;<br>            }<br>            if (low &lt; high){<br>                String temp = array[high];<br>                array[high] = array[low];<br>                array[low] = temp;<br>            }<br>        }<br>        return array;<br>    }<br>","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294843,"discussion_content":"while条件写反了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596013838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97115,"user_name":"lzh","can_delete":false,"product_type":"c1","uid":1336951,"ip_address":"","ucode":"C3D83DF4230109","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","comment_is_top":false,"comment_ctime":1558591663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558591663","product_id":100017301,"comment_content":"计数排序那里,其实把数量统计完,得到C[6]数组后,就可以进行还原排序了,只不过为了保证稳定性,才要再次加工C[6],再逆向遍历原始数据与C[6]对比排序,于是就有了后面那波比较复杂的操作","like_count":0},{"had_liked":false,"id":96588,"user_name":"SunshlnW","can_delete":false,"product_type":"c1","uid":1211252,"ip_address":"","ucode":"7B82BBC5F30633","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/74/63563202.jpg","comment_is_top":false,"comment_ctime":1558454236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558454236","product_id":100017301,"comment_content":"计数排序统计完C数组直接整体后移一位就可以了啊","like_count":0},{"had_liked":false,"id":93495,"user_name":"莫小鹏","can_delete":false,"product_type":"c1","uid":1158881,"ip_address":"","ucode":"0EE0654FD0FB85","user_header":"https://static001.geekbang.org/account/avatar/00/11/ae/e1/78701ecf.jpg","comment_is_top":false,"comment_ctime":1557480917,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557480917","product_id":100017301,"comment_content":"使用快排的划分算法实现","like_count":0},{"had_liked":false,"id":93388,"user_name":"Rookie","can_delete":false,"product_type":"c1","uid":1229032,"ip_address":"","ucode":"893C46F39346AF","user_header":"https://static001.geekbang.org/account/avatar/00/12/c0/e8/bf987d79.jpg","comment_is_top":false,"comment_ctime":1557461906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557461906","product_id":100017301,"comment_content":"学到了","like_count":0},{"had_liked":false,"id":92870,"user_name":"AllenGFLiu","can_delete":false,"product_type":"c1","uid":1221991,"ip_address":"","ucode":"90FA8A619A2629","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","comment_is_top":false,"comment_ctime":1557359349,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557359349","product_id":100017301,"comment_content":"原本想的方法是遍历和判断，然后分别存放，好理解到但空间复杂度高啊，评论区里的双指针交换的想法真好。","like_count":0},{"had_liked":false,"id":91976,"user_name":"你微笑时好美","can_delete":false,"product_type":"c1","uid":1508661,"ip_address":"","ucode":"BC18A533DC9410","user_header":"https://static001.geekbang.org/account/avatar/00/17/05/35/970beb60.jpg","comment_is_top":false,"comment_ctime":1557146929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557146929","product_id":100017301,"comment_content":"思考题可以用队列实现，含数字的可以用两个队列。","like_count":0},{"had_liked":false,"id":91878,"user_name":"猪猪男孩","can_delete":false,"product_type":"c1","uid":1461246,"ip_address":"","ucode":"E853E29182C6B5","user_header":"https://static001.geekbang.org/account/avatar/00/16/4b/fe/048ad222.jpg","comment_is_top":false,"comment_ctime":1557125716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557125716","product_id":100017301,"comment_content":"def Partition(a):<br>    if not a:<br>        return<br>    i = 0<br>    j = len(a)-1<br><br>    while i &lt; j:<br>        while i &lt; j and ord(a[j]) &gt;= ord(&#39;A&#39;) and ord(a[j]) &lt;= ord(&#39;Z&#39;):<br>            j -= 1<br>        <br>        while i &lt; j and ord(a[i]) &gt;= ord(&#39;a&#39;) and ord(a[i]) &lt;= ord(&#39;z&#39;):<br>            i += 1<br>        <br>        t = a[j]<br>        a[j] = a[i]<br>        a[i] = t","like_count":0},{"had_liked":false,"id":90270,"user_name":"ThinkingMan.","can_delete":false,"product_type":"c1","uid":1217603,"ip_address":"","ucode":"722674A8BACA85","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/43/6e68c860.jpg","comment_is_top":false,"comment_ctime":1556463796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556463796","product_id":100017301,"comment_content":"虽然这些我们很少直接用上，但思想真的值得借鉴，值得学习。","like_count":0},{"had_liked":false,"id":89381,"user_name":"半湖思絮","can_delete":false,"product_type":"c1","uid":1236746,"ip_address":"","ucode":"ECE58303541E59","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/0a/4084d5fa.jpg","comment_is_top":false,"comment_ctime":1556161470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556161470","product_id":100017301,"comment_content":"计数排序变换示意的图C[6]和R[8]可能更容易看懂些","like_count":0},{"had_liked":false,"id":89374,"user_name":"zjhiphop","can_delete":false,"product_type":"c1","uid":1007091,"ip_address":"","ucode":"F4B8FF50364214","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5d/f3/e12aee93.jpg","comment_is_top":false,"comment_ctime":1556160036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556160036","product_id":100017301,"comment_content":"大写字母的asc码范围： 65-90<br>小些字母的asc码范围： 97-122<br>数字的asc码范围：       48-57<br><br>遍历一次， 按小写字母，大写字母，数字分成3类， 然后再进行组合，可以保证顺序和稳定性<br>时间复杂度 o(n)<br>","like_count":0},{"had_liked":false,"id":89181,"user_name":"orcababyface","can_delete":false,"product_type":"c1","uid":1217755,"ip_address":"","ucode":"FF7660EBF4ABB1","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/db/f5844528.jpg","comment_is_top":false,"comment_ctime":1556100441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556100441","product_id":100017301,"comment_content":"二刷，看了下留言没有解决思考题的很好的方法，我觉得可以用快速排序中分区函数的思想解决，时间复杂度O(n)，空间复杂度O(1)：<br>package problem;<br><br>&#47;**<br> * 问题：把字母序列<br> * 解决方法：快速排序的分区元思维<br> * Created by orca on 2019&#47;4&#47;24.<br> *&#47;<br>public class BigAndSmal {<br>    public static void main(String args[]){<br>        char[] alpha = {&#39;a&#39;,&#39;C&#39;,&#39;b&#39;,&#39;D&#39;,&#39;e&#39;,&#39;F&#39;};<br>        sort(alpha);<br>        for(int i = 0;i&lt;=alpha.length-1;i++){<br>            System.out.println(alpha[i]);<br>        }<br>    }<br><br>    public static void sort(char[] chars){<br>        int j = 0;<br>        for(int i =1;i&lt;=chars.length-1;i++){<br>            if(chars[i]&gt;=&#39;a&#39;&amp;&amp;chars[i]&lt;=&#39;z&#39;){<br>                char tmp = chars[j];<br>                chars[j] = chars[i];<br>                chars[i] = tmp;<br>                j++;<br>            }<br>        }<br>    }<br>}<br><br>","like_count":0},{"had_liked":false,"id":87872,"user_name":"博 博","can_delete":false,"product_type":"c1","uid":1103069,"ip_address":"","ucode":"1043A324E14D8F","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/dd/ee2c9095.jpg","comment_is_top":false,"comment_ctime":1555737963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555737963","product_id":100017301,"comment_content":"笔记<br>主讲内容<br>      1.桶排序 平均复杂度o(n) 极端nlgn<br>      2.计数排序<br>      3.基数排序<br> 划重点 10万个电话号码排序的好方法 基数排序  50万考生成绩排序思路<br> 课后思考题 三个桶放入 小写 大写 数字 桶 遍历放入 遍历两次 ps:参考二楼回答","like_count":0},{"had_liked":false,"id":87233,"user_name":"dovefi","can_delete":false,"product_type":"c1","uid":1007670,"ip_address":"","ucode":"9F8C59F095B187","user_header":"https://static001.geekbang.org/account/avatar/00/0f/60/36/1848c2b7.jpg","comment_is_top":false,"comment_ctime":1555551525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555551525","product_id":100017301,"comment_content":"计数排序算法，从后往前扫描那一步，有点像出栈的操作，前面的相加就是入栈，一下子就明白了","like_count":0},{"had_liked":false,"id":87195,"user_name":"沙加","can_delete":false,"product_type":"c1","uid":1250003,"ip_address":"","ucode":"265953125C599E","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/d3/6c201082.jpg","comment_is_top":false,"comment_ctime":1555547181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555547181","product_id":100017301,"comment_content":"思考题，我觉得可以用计数排序，小写，大写，数字。C3。需要把小写，大写，数字分别计数","like_count":0},{"had_liked":false,"id":86737,"user_name":"虹","can_delete":false,"product_type":"c1","uid":1439788,"ip_address":"","ucode":"916FEDA3FFC21E","user_header":"https://static001.geekbang.org/account/avatar/00/15/f8/2c/dd3b85cf.jpg","comment_is_top":false,"comment_ctime":1555442069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555442069","product_id":100017301,"comment_content":"我的思路是用两个指针a和b，从头开始往后遍历，a只记录小写的字母的索引，把索引记录下来放到一个数组里，b只记录大写的字母的索引，放到另一个数组里。再根据索引取元素完成排序。之前元素的相对位置不会改变。","like_count":0},{"had_liked":false,"id":84919,"user_name":"涛涛","can_delete":false,"product_type":"c1","uid":1180810,"ip_address":"","ucode":"747C4B1F20A2D3","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/8a/ff94bd60.jpg","comment_is_top":false,"comment_ctime":1554945367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554945367","product_id":100017301,"comment_content":"老师，你这个数组acr确实讲的不好啊。a数组突然就冒出来了。","like_count":0},{"had_liked":false,"id":82991,"user_name":"立冬","can_delete":false,"product_type":"c1","uid":1467313,"ip_address":"","ucode":"287FA88D933FD5","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/b1/a6103703.jpg","comment_is_top":false,"comment_ctime":1554367112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554367112","product_id":100017301,"comment_content":"计数记忆方法 xy坐标轴 x是桶 y是当前桶的总值 根据该坐标倒序遍历数组 找到每个点对应的y 填充 之后y-1 思考题 不用排大小的话 就当成3个桶 或 计数 ","like_count":0},{"had_liked":false,"id":81802,"user_name":"会飞的鱼","can_delete":false,"product_type":"c1","uid":1257205,"ip_address":"","ucode":"BA3FC4E0BF7B39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erloYzyia2hRy19E3aCtc0pf10MiaGmzEcXw8UZ3jC3LAibD8icWAFVCXGAlAic3mpjBUrHvyreyhAjIFw/132","comment_is_top":false,"comment_ctime":1554038247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554038247","product_id":100017301,"comment_content":"转换成ASCII码，sort排序，之后搬移顺序即可","like_count":0},{"had_liked":false,"id":80208,"user_name":"MComposer","can_delete":false,"product_type":"c1","uid":1444585,"ip_address":"","ucode":"9765490D5A4FEE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/XIb39iaecNKHYwVxtryzgB4ibnfqyOmBG6Oy1XXXGT7cbsBMicNX3gBzgJfp8Uic3uQlGW6csBXEdL5xq5clx2KkrQ/132","comment_is_top":false,"comment_ctime":1553621013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553621013","product_id":100017301,"comment_content":"荷兰国旗问题","like_count":0},{"had_liked":false,"id":79944,"user_name":"Coder","can_delete":false,"product_type":"c1","uid":1251224,"ip_address":"","ucode":"70A8F12B864E4D","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/98/5386341d.jpg","comment_is_top":false,"comment_ctime":1553578142,"is_pvip":false,"replies":[{"id":"29247","content":"解释起来比较麻烦，请看我微信公众号（小争哥）中的解释。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553649084,"ip_address":"","comment_id":79944,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553578142","product_id":100017301,"comment_content":"请问，为什么 计数排序中要算累计值？<br>&#47;&#47; 依次累加<br>  for (int i = 1; i &lt;= max; ++i) {<br>    c[i] = c[i-1] + c[i];<br>  }<br><br>我觉得直接把计数数组转化为结果数组更容易理解。<br><br>    public static int[] countingSort1(int[] a) {<br><br>         if(a == null || a.length == 0){<br>             return a;<br>         }<br>         int n = a.length;<br>        &#47;&#47; 查找数组中数据的范围<br>        int max = a[0];<br>        for (int i = 1; i &lt; n; ++i) {<br>            if (max &lt; a[i]) {<br>                max = a[i];<br>            }<br>        }<br><br>        int[] c = new int[max + 1]; &#47;&#47; 申请一个计数数组 c，下标大小 [0,max]<br>        for (int i = 0; i &lt;= max; ++i) {<br>            c[i] = 0;<br>        }<br>        &#47;&#47; 计算每个元素的个数，放入 c 中<br>        for (int i = 0; i &lt; n; ++i) {<br>            c[a[i]]++;<br>        }<br>        &#47;&#47;转成排序后的数组 r<br>        int[] r = new int[n];<br>        int i = c.length - 1;<br>        int j = n - 1;<br>        while(i &gt;= 0){<br>            int num = c[i];<br>            while(num &gt; 0){<br>                r[j] = i;<br>                num--;<br>                j--;<br>            }<br>            i--;<br>        }<br>        <br>        &#47;*<br>        &#47;&#47; 依次累加<br>        for (int i = 1; i &lt;= max; ++i) {<br>            c[i] = c[i-1] + c[i];<br>        }<br><br>        &#47;&#47; 临时数组 r，存储排序之后的结果<br>        int[] r = new int[n];<br>        &#47;&#47; 计算排序的关键步骤，有点难理解<br>        for (int i = n - 1; i &gt;= 0; --i) {<br>            int index = c[a[i]]-1;<br>            r[index] = a[i];<br>            c[a[i]]--;<br>        }<br><br>  *&#47;<br>        return r;<br>        &#47;*<br>        &#47;&#47; 将结果拷贝给 a 数组<br>        for (int i = 0; i &lt; n; ++i) {<br>            a[i] = r[i];<br>        }<br>        *&#47;<br>    }","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444696,"discussion_content":"解释起来比较麻烦，请看我微信公众号（小争哥）中的解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553649084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78783,"user_name":"Geek_68a3d8","can_delete":false,"product_type":"c1","uid":1244905,"ip_address":"","ucode":"A8D4DF5460F50B","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/e9/8fc7a875.jpg","comment_is_top":false,"comment_ctime":1553240419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553240419","product_id":100017301,"comment_content":"计数排序<br>public void countingSort(int[] array, int length) {<br>    &#47;&#47; 找最大值<br>    int max = array[0];<br>    for (int i = 1; i &lt; length; i++) {<br>        if (max &lt; array[i]) {<br>            max = array[i];<br>        }<br>    }<br><br>    &#47;&#47; 创建统计元素个数的数组<br>    int[] temp = new int[max + 1];<br>    for (int i : array) {<br>        temp[i] = temp[i] + 1;<br>    }<br><br>    &#47;&#47; 叠加元素个数<br>    for (int i = 1; i &lt; temp.length; i++) {<br>        temp[i] = temp[i - 1] + temp[i];<br>    }<br><br>    &#47;&#47; 创建存储结果的临时数组<br>    int[] result = new int[length];<br>    for (int i : array) {<br>        result[temp[i] - 1] = i;<br>        temp[i] = temp[i] - 1;<br>    }<br><br>    &#47;&#47; 将result拷贝到array中去<br>    for (int i = 0; i &lt; array.length; i++) {<br>        array[i] = result[i];<br>    }<br>}<br><br>@Test<br>public void countingSort() {<br>    int[] array = {2,6,7,3,1,5,3,2,3};<br>    System.out.println(Arrays.toString(array));<br>    countingSort(array,array.length);<br>    System.out.println(Arrays.toString(array));<br>}","like_count":0},{"had_liked":false,"id":78428,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1553145853,"is_pvip":false,"replies":[{"id":"28616","content":"外部排序可以看下桶排序和归并排序的思路","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553217896,"ip_address":"","comment_id":78428,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553145853","product_id":100017301,"comment_content":"老师你好,计数排序有一个疑问,就是每年假设1000w的考生,那就是1000w的数据,如果用计数排序,那个临时的数组岂不是会超过内存。能不能展示一下考虑外部排序的方案","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444092,"discussion_content":"外部排序可以看下桶排序和归并排序的思路","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553217896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78030,"user_name":"菜瓜布","can_delete":false,"product_type":"c1","uid":1391437,"ip_address":"","ucode":"41B1B4B4954F58","user_header":"https://static001.geekbang.org/account/avatar/00/15/3b/4d/b8bd5051.jpg","comment_is_top":false,"comment_ctime":1553058202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553058202","product_id":100017301,"comment_content":"确实有点慢了，上一节就看了很久，这次感觉需要更久","like_count":0},{"had_liked":false,"id":77234,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1552894004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552894004","product_id":100017301,"comment_content":"用桶排序，几种类型对应几个桶，依次遍历放到对应桶里","like_count":0},{"had_liked":false,"id":76465,"user_name":"李永康Leo","can_delete":false,"product_type":"c1","uid":1035988,"ip_address":"","ucode":"464974917B0A72","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/d4/99c857e8.jpg","comment_is_top":false,"comment_ctime":1552614367,"is_pvip":false,"replies":[{"id":"28114","content":"那就不能用快速排序了，可以换其他稳定的排序算法。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552874760,"ip_address":"","comment_id":76465,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552614367","product_id":100017301,"comment_content":"桶排序每个桶的排序使用快速排序，快速排序是非稳定的，那么桶排序应该也是非稳定的吧，那么基数排序的每一位排序还可以使用桶排序吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443318,"discussion_content":"那就不能用快速排序了，可以换其他稳定的排序算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552874760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76341,"user_name":"better","can_delete":false,"product_type":"c1","uid":1169063,"ip_address":"","ucode":"AF1DB566EBB8A5","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/a7/ac23f5a6.jpg","comment_is_top":false,"comment_ctime":1552574078,"is_pvip":false,"replies":[{"id":"27832","content":"别急，慢慢来","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1552574507,"ip_address":"","comment_id":76341,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1552574078","product_id":100017301,"comment_content":"计数有2点特别重要，理解这2点，就比较好办了，我搞了几天了。。。笨死了。。。<br> 1. 数据重复时，为保证稳定性，所以从后开始遍历 a 数组；<br> 2. 如果知道数组里有多少项小于或等于该元素。那就能准确地给出该元素在排序后的数组的位置","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443265,"discussion_content":"别急，慢慢来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552574507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75194,"user_name":"豆豆老豆","can_delete":false,"product_type":"c1","uid":1326157,"ip_address":"","ucode":"384934D4661B86","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqicVWyt6diaHMh0poLIl03XteyhwJGJ25dNex5uaWc8gOJNGapicXzkiaHtVsXWRwlpJ2bBEeTjFlCZQ/132","comment_is_top":false,"comment_ctime":1552361968,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552361968","product_id":100017301,"comment_content":"计数排序<br><br>在得到原数组数据范围的频率分布后，也就是数组c: 2,0,2,3,0,1  可以不可以直接按频率出现的次数重新存储到原数组，比如下面这样：<br><br>int index = 0;<br>for (int i = 0; i &lt; max+1; i++) {<br>    for(int j = c[i]; j &gt; 0; j--){<br>        a[index++] = i;<br>    }<br>}<br>return a;<br> ","like_count":0},{"had_liked":false,"id":73292,"user_name":"Robert","can_delete":false,"product_type":"c1","uid":1057914,"ip_address":"","ucode":"594538993C02ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/7a/6ee10cc8.jpg","comment_is_top":false,"comment_ctime":1551852680,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551852680","product_id":100017301,"comment_content":"说看不懂的朋友们，建议找排序的动态图去看，结合着会容易理解的多。","like_count":0},{"had_liked":false,"id":73074,"user_name":"等待戈多","can_delete":false,"product_type":"c1","uid":1445564,"ip_address":"","ucode":"80092A3352F9AA","user_header":"https://static001.geekbang.org/account/avatar/00/16/0e/bc/97606317.jpg","comment_is_top":false,"comment_ctime":1551791560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551791560","product_id":100017301,"comment_content":"感觉 计数排序的 第一个图是从算法导论上的摘下来的图吧","like_count":0},{"had_liked":false,"id":72928,"user_name":"咖啡猫口里的咖啡猫🐱","can_delete":false,"product_type":"c1","uid":1036565,"ip_address":"","ucode":"FE2441B3A40375","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d1/15/7d47de48.jpg","comment_is_top":false,"comment_ctime":1551756204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551756204","product_id":100017301,"comment_content":"取数组middle长度，双指针边遍历，swap交换位置","like_count":0},{"had_liked":false,"id":72566,"user_name":",","can_delete":false,"product_type":"c1","uid":1439568,"ip_address":"","ucode":"191431A878D7B6","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/50/cbfe1bc0.jpg","comment_is_top":false,"comment_ctime":1551668585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551668585","product_id":100017301,"comment_content":"置顶方案复杂度:<br>空间:O(1)<br>时间:O(n)<br><br>第二个方案复杂度:<br>空间:O(n)<br>时间:O(n)<br><br><br>","like_count":0},{"had_liked":false,"id":72322,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551586405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551586405","product_id":100017301,"comment_content":"字母直接转成acill码，分三个桶就行了","like_count":0},{"had_liked":false,"id":69352,"user_name":"朱坤","can_delete":false,"product_type":"c1","uid":1098637,"ip_address":"","ucode":"65224DA2456EAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/8d/214ad614.jpg","comment_is_top":false,"comment_ctime":1550722890,"is_pvip":false,"replies":[{"id":"24633","content":"可以的","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1550724569,"ip_address":"","comment_id":69352,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1550722890","product_id":100017301,"comment_content":"老师你好，不知课程结束后发的留言，老师是否还能看到。我按照课程中的案例，实现了用桶排序完成100万年龄的排序，计数排序对100万分数排序，效果都比js自带的数组排序时间复杂度低。。但是到用基数排序对100万手机号排序时，实现方式是按位从后往前做11次桶排序。得出的消耗时间与系统自带的差不多。刚开始我觉得可能是时间复杂度都变成了O(n logn)，现在我想了下应该是基数排序的时间复杂度是k*O(n)，因为这里的k是11所以造成在100万级1000万时，每次需要11次桶排序，造成速度慢。。如果减少k，或者加大n的量级，才能体现出基数排序的优势？我现在吃饭时间调成了1亿量级，让他跑一会。。","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440076,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550724569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68374,"user_name":"一零","can_delete":false,"product_type":"c1","uid":1245896,"ip_address":"","ucode":"76228A1CD2CBE8","user_header":"https://static001.geekbang.org/account/avatar/00/13/02/c8/a79b5838.jpg","comment_is_top":false,"comment_ctime":1550490364,"is_pvip":false,"replies":[{"id":"24716","content":"估计不行。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550802849,"ip_address":"","comment_id":68374,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550490364","product_id":100017301,"comment_content":"请问老师，计数排序可以写成原地且稳定排序吗？我自己写了一个原地排序，但是就不再是稳定排序了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439654,"discussion_content":"估计不行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550802849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68267,"user_name":"闲着嘚瑟的喵喵","can_delete":false,"product_type":"c1","uid":1385422,"ip_address":"","ucode":"3F31F62063E228","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/ce/3c6cf24a.jpg","comment_is_top":false,"comment_ctime":1550473026,"is_pvip":false,"replies":[{"id":"24715","content":"对的，你理解的没错！","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550802815,"ip_address":"","comment_id":68267,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550473026","product_id":100017301,"comment_content":"计数排序为何必须是非负整数？<br>这个是因为源数据要能当数组的下标才必须转换成非负整数吧？不知道我理解的对不对？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439599,"discussion_content":"对的，你理解的没错！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550802815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67495,"user_name":"晓龙","can_delete":false,"product_type":"c1","uid":1004576,"ip_address":"","ucode":"78CDCEBD183D3A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/20/93c79f7c.jpg","comment_is_top":false,"comment_ctime":1550161087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550161087","product_id":100017301,"comment_content":"大小写字母排序比较简单：<br>思路是：遍历一遍数组，将大于等于a小于等于z的插入数组头部，大于等于A小于等于Z的插入数组尾部。<br><br>大小写加数字的排序：<br>思路是：遍历一遍数组，将小写，大写，数字分别放入三个子数组中，然后合并数组即可","like_count":0},{"had_liked":false,"id":66138,"user_name":"Pre-Y","can_delete":false,"product_type":"c1","uid":1396900,"ip_address":"","ucode":"A13D13A37F3ABC","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/a4/8d2e454b.jpg","comment_is_top":false,"comment_ctime":1549883881,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549883881","product_id":100017301,"comment_content":"今日份的打卡。<br>对于计数排序刚看没反应过来老师是从后往前排的，看着图示自己动手排一遍后才明白原理，<br>理解前两个排序后基数排序感觉就是水到渠成。","like_count":0},{"had_liked":false,"id":65025,"user_name":"镞砺括羽","can_delete":false,"product_type":"c1","uid":1309089,"ip_address":"","ucode":"EC4CD773CA06EA","user_header":"https://static001.geekbang.org/account/avatar/00/13/f9/a1/0396e1fb.jpg","comment_is_top":false,"comment_ctime":1549006214,"is_pvip":false,"replies":[{"id":"23039","content":"没事啊 慢慢来","user_name":"编辑回复","user_name_real":"王锦","uid":"1058895","ctime":1549007424,"ip_address":"","comment_id":65025,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1549006214","product_id":100017301,"comment_content":"实在不好意思，计数排序看了3遍才看懂，真是笨啊","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438283,"discussion_content":"没事啊 慢慢来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549007424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64691,"user_name":"vaccywen","can_delete":false,"product_type":"c1","uid":1115128,"ip_address":"","ucode":"077FDB50831921","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/f8/f98df0a7.jpg","comment_is_top":false,"comment_ctime":1548860133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548860133","product_id":100017301,"comment_content":"计数排序认认真真的看了一个多小时终于开窍了，看的脑仁儿疼，35岁了脑子有点跟不上了。顺序求和用的太巧妙了！","like_count":0},{"had_liked":false,"id":64651,"user_name":"uyong","can_delete":false,"product_type":"c1","uid":1024665,"ip_address":"","ucode":"FA08C838F2A0F3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKTAKspiaW6t3GY9Ht5aWqoJartZYqA3ROTlJgBKK41icia7a5BrcvKnILzzRk4cVBg0DRPhiacl7BgPQ/132","comment_is_top":false,"comment_ctime":1548842919,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1548842919","product_id":100017301,"comment_content":"今日学习：桶排序，计数排序，基数排序<br>用Java实现了一遍，包含测试用例：https:&#47;&#47;gitee.com&#47;uyong&#47;study.datastruct.algorithm","like_count":0},{"had_liked":false,"id":64127,"user_name":"Aaaaaaaaaaayou","can_delete":false,"product_type":"c1","uid":1073601,"ip_address":"","ucode":"67BA315B87587D","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/c1/93031a2a.jpg","comment_is_top":false,"comment_ctime":1548672450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548672450","product_id":100017301,"comment_content":"我说计数排序最后为什么要那么麻烦呢，原来是要考虑到排序的元素不仅仅是单个数，而是对象的某个属性。","like_count":0},{"had_liked":false,"id":63913,"user_name":"vaccywen","can_delete":false,"product_type":"c1","uid":1115128,"ip_address":"","ucode":"077FDB50831921","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/f8/f98df0a7.jpg","comment_is_top":false,"comment_ctime":1548591262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548591262","product_id":100017301,"comment_content":"试着写了选择排序，应该还有优化的地方<br>public static void main(String[]args){<br>    int[] arr = {4,5,6,7,3,8,2,1};<br>    for(int i=0;i&lt;arr.length;i++){<br>        int j=arr.length-1;<br>        for(;j&gt;=i;j--){<br>            if(arr[i]&gt;arr[j]){<br>                int temp = arr[i];<br>                arr[i] = arr[j];<br>                arr[j] = temp;<br>            }<br>        }<br>    }<br>}","like_count":0},{"had_liked":false,"id":63715,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1548473171,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1548473171","product_id":100017301,"comment_content":"可以通过快排中每次确定轴后的分区的操作进行实现。","like_count":0},{"had_liked":false,"id":63605,"user_name":"天空","can_delete":false,"product_type":"c1","uid":1322744,"ip_address":"","ucode":"F9987C673EEFBE","user_header":"https://static001.geekbang.org/account/avatar/00/14/2e/f8/2516c815.jpg","comment_is_top":false,"comment_ctime":1548413423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548413423","product_id":100017301,"comment_content":"好的。看了几遍总算明白了。就是关于桶排序的，区间的大小。原数据放到哪个桶子。这些不会算。","like_count":0},{"had_liked":false,"id":63550,"user_name":"天空","can_delete":false,"product_type":"c1","uid":1322744,"ip_address":"","ucode":"F9987C673EEFBE","user_header":"https://static001.geekbang.org/account/avatar/00/14/2e/f8/2516c815.jpg","comment_is_top":false,"comment_ctime":1548397851,"is_pvip":false,"replies":[{"id":"22469","content":"从c到r，我不是举了一个例子吗？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1548403938,"ip_address":"","comment_id":63550,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548397851","product_id":100017301,"comment_content":"老师。数组c大小为6，怎么就有c［6］了？还有排序的时候，得出计数排序结果的数组r，是不是有点太突然了。至少把数组c存了啥，怎么的处理写下。人太蠢了。。绕不过来","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437630,"discussion_content":"从c到r，我不是举了一个例子吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548403938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63201,"user_name":"落","can_delete":false,"product_type":"c1","uid":1240710,"ip_address":"","ucode":"EA306D36D818BC","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/86/9f47c0dc.jpg","comment_is_top":false,"comment_ctime":1548297871,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548297871","product_id":100017301,"comment_content":"思考题，根据计数排序写的答案。<br><br>&#47;&#47;这块用String不用char，是为了想说明排序的是对象<br>\t\tString[] A = new String[]{&quot;1&quot;, &quot;a&quot;,  &quot;D&quot;, &quot;c&quot;, &quot;z&quot;, &quot;3&quot;, &quot;B&quot;, &quot;A&quot;, &quot;2&quot;};<br>\t\tint n = A.length;\t\t<br>\t\tfor (int i = 0; i &lt; A.length; i++) {<br>\t\t\tSystem.out.println(&quot;排序前 &quot;+A[i]+&quot;,&quot;+System.identityHashCode(A[i]));<br>\t\t}<br>\t\t<br>\t\t&#47;&#47;桶范围为3： 小写，大写，数字（3个计数桶）<br>\t\tint[] C = new int[]{0, 0, 0}; \t\t<br>\t\tint max = C.length;<br>\t\t<br>\t\t&#47;&#47;顺序遍历要排序对象，找到每个对象对应的桶，累加计数<br>\t\tfor (int i = 0; i &lt; n; i++) {\t\t\t\t\t\t<br>\t\t\tint a =  A[i].charAt(0);<br>\t\t\tif (a&gt;=97 &amp;&amp; a&lt;=122) {<br>\t\t\t\tC[0]++;<br>\t\t\t}else if (a&gt;=65 &amp;&amp; a&lt;=90) {<br>\t\t\t\tC[1]++;<br>\t\t\t}else{<br>\t\t\t\tC[2]++;<br>\t\t\t}<br>\t\t}<br>\t\t<br>\t\t&#47;***<br>\t\t * 遍历桶，将每个桶中的数目变为包含它和它之前的数目总和。 <br>\t\t *&#47;<br>\t\tfor (int j = 1; j &lt; max; j++) {\t\t\t<br>\t\t\tC[j] = C[j]+C[j-1];\t\t\t<br>\t\t}<br>\t\t<br>\t\t&#47;***<br>\t\t * 倒着遍历要排序的对象，可以保证是稳定排序，每次通过-1来排序。<br>\t\t * 个人理解：<br>\t\t * 1.3个计数桶通过上面的累加前面桶后，其实每个桶的数目已经算出了次范围桶中最大（靠后）的位置，所以每次排一个后，要-1迁移一位；<br>\t\t * 2.为什么要倒着遍历，因为，每次排的时候，放入的位置是次范围最大（靠后）的位置，所以保证了稳定性。<br>\t\t * 举个例子：<br>\t\t * 1.大写计数桶的数字现在为6，那么大写放入的最大（最后面）的位置就是第6个，即数组的下标5.<br>\t\t * 2.如果从前面排序，那么D就放入下标5里，B放入下标4，A放入下标3,此时排序后三者的顺序为ABD。<br>\t\t * 这个跟原有顺序DBA是不一样的，所以是不稳定排序，反着遍历就是稳定排序了<br>\t\t *&#47;\t\t<br>\t\tString[] r = new String[n];<br>\t\tfor (int i = (n-1); i&gt;=0; i--){<br>\t\t\tint a =  A[i].charAt(0);<br>\t\t\tif (a&gt;=97 &amp;&amp; a&lt;=122) {<br>\t\t\t\tint index = --C[0];<br>\t\t\t\tr[index] = A[i];\t\t\t\t<br>\t\t\t}else if (a&gt;=65 &amp;&amp; a&lt;=90) {\t\t\t\t<br>\t\t\t\tint index = --C[1];<br>\t\t\t\tr[index] = A[i];<br>\t\t\t}else {\t\t\t\t<br>\t\t\t\tint index = --C[2];\t\t\t\t<br>\t\t\t\tr[index] = A[i];<br>\t\t\t}<br>\t\t}<br>\t\t<br>\t\tfor (int i = 0; i &lt; n; i++) {<br>\t\t\tA[i] = r[i];<br>\t\t}<br>\t\tSystem.out.println(&quot;-------------------------------------&quot;);<br>\t\t<br>\t\tfor (int i = 0; i &lt; A.length; i++) {<br>\t\t\tSystem.out.println(&quot;排序后 &quot;+A[i]+&quot;,&quot;+System.identityHashCode(A[i]));<br>\t\t}","like_count":0},{"had_liked":false,"id":62943,"user_name":"Madeline","can_delete":false,"product_type":"c1","uid":1233943,"ip_address":"","ucode":"FA6EDA5B987167","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/17/f502e3c1.jpg","comment_is_top":false,"comment_ctime":1548211645,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548211645","product_id":100017301,"comment_content":"桶排序的时间复杂度低，但空间复杂度有O(n), 也是用空间换时间了","like_count":0},{"had_liked":false,"id":62450,"user_name":"黄均鹏","can_delete":false,"product_type":"c1","uid":1131636,"ip_address":"","ucode":"27F852817B9B98","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/74/f98299ee.jpg","comment_is_top":false,"comment_ctime":1548060587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548060587","product_id":100017301,"comment_content":"哈哈，订阅晚了。现实生活可以解决这个问题。假设第一种情况（只有大小写字母数字A），新建一个数组B，长度和B一致，我可以肯定B的最右边是大写字母（A存在大写字母的前提下），遍历A，小写字母左边开始存储，大写字母右边开始存储。第二种情况（含有大小写字母和数字），一样思想，重复A，int类型数字可以用临时数组存储tempArr，最后顺数的head至倒数的tail直接插入tempArr即可","like_count":0},{"had_liked":false,"id":61751,"user_name":"JStFs","can_delete":false,"product_type":"c1","uid":1241121,"ip_address":"","ucode":"636E85653555DD","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/21/7168f973.jpg","comment_is_top":false,"comment_ctime":1547790724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547790724","product_id":100017301,"comment_content":"计数排序的关于计数的小技巧确实巧妙，但总感觉不需要这样，扫描一遍之后，再依次输出也是稳定的，并且空间复杂度也是O（n），为什么一定要计数呢","like_count":0},{"had_liked":false,"id":61230,"user_name":"青山","can_delete":false,"product_type":"c1","uid":1131070,"ip_address":"","ucode":"749BAD1834AC0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/3e/c1f76202.jpg","comment_is_top":false,"comment_ctime":1547641969,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1547641969","product_id":100017301,"comment_content":"老师我有个问题:有位同学说&quot;桶里面用归并排序&quot;,你肯定了,但是在上一章中你又说,归并排序没有快排应用广泛,我可以理解为,在原地排序与稳定排序,选择前者比较好?为什么在桶中有选择归并排序?","like_count":0},{"had_liked":false,"id":59589,"user_name":"紫色和风","can_delete":false,"product_type":"c1","uid":1128718,"ip_address":"","ucode":"2A2F6F36B86680","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epRso6cg3yA8iaPWiblqsaFTiadAvXLY5phCc7pSP52txfBPPic1MJk8rKNq776r6eyN9XWhCS5LpobfQ/132","comment_is_top":false,"comment_ctime":1547389655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547389655","product_id":100017301,"comment_content":"老师您好. 我有个问题. 在&quot;计数排序&quot;中. 我们依次累计完成C[6]之后. 那么这个C[6]数组中就包含了, 每个每个元素的数量(C[]元素值), 以及需要排序数组(A[])包含的值(C数组的下标). <br><br>那么我们遍历这个C[6]数组, 按照元素的大小及遍历时C下标值, 放到R[8]数组就就好了. 我感觉不需要再倒叙遍历A[]数组. 麻烦老师给解答一下. 谢谢. ","like_count":0},{"had_liked":false,"id":58589,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1547125327,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1547125327","product_id":100017301,"comment_content":"堆排序:100万人按年龄排序；<br>计数排序:50万学生成绩排序；<br>基数排序:100万人电话号码排序。","like_count":0},{"had_liked":false,"id":58161,"user_name":"曹宇","can_delete":false,"product_type":"c1","uid":1354271,"ip_address":"","ucode":"0CDF9B3806FB32","user_header":"https://static001.geekbang.org/account/avatar/00/14/aa/1f/38b1bb9e.jpg","comment_is_top":false,"comment_ctime":1547004424,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1547004424","product_id":100017301,"comment_content":"根据线性排序算法的约束条件的思考：<br><br>当要对一组数据进行排序时，首先要了解其规模，如果规模较小，排序算法是很好选择的，<br><br>但是如果规模较大，需要对排序数据本身做分析，观察其值域（数据取值范围），及数据分布<br><br>如果能够小成本的获取数据的相关信息，则可以选择线性排序算法。<br><br>另外还可以考虑通过非线性变换（变换后任意两个数据的大小比较不变），压缩其值域或使数据尽量分布。<br><br>","like_count":0},{"had_liked":false,"id":57433,"user_name":"Donkey","can_delete":false,"product_type":"c1","uid":1255373,"ip_address":"","ucode":"49BAB021262624","user_header":"https://static001.geekbang.org/account/avatar/00/13/27/cd/aa796a0d.jpg","comment_is_top":false,"comment_ctime":1546790685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546790685","product_id":100017301,"comment_content":"C[k] 里存储小于等于分数 k 的考生个数，多看了几遍才反应过来。小于等于，包含前面的考生数。<br>","like_count":0},{"had_liked":false,"id":55932,"user_name":"张豪","can_delete":false,"product_type":"c1","uid":1341792,"ip_address":"","ucode":"BB82AE8F1C7E1B","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/60/391490d2.jpg","comment_is_top":false,"comment_ctime":1546349560,"is_pvip":false,"replies":[{"id":"20176","content":"是的 👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546393789,"ip_address":"","comment_id":55932,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546349560","product_id":100017301,"comment_content":"计数排序时，需要从后往前扫描数组A，是不是因为根据从前往后扫描原始数组A，来生成排序数组R，则会导致排序后不稳定？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434889,"discussion_content":"是的 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546393789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55250,"user_name":"Yeir","can_delete":false,"product_type":"c1","uid":1072999,"ip_address":"","ucode":"3A325B919C66B9","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/67/8552dab9.jpg","comment_is_top":false,"comment_ctime":1546077474,"is_pvip":false,"replies":[{"id":"20247","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546418010,"ip_address":"","comment_id":55250,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546077474","product_id":100017301,"comment_content":"计数排序还是挺简单了. 看了一下算法描述没看代码, 自己一下就写出来了还没有bug.......","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434714,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546418010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55055,"user_name":"young阳","can_delete":false,"product_type":"c1","uid":1246723,"ip_address":"","ucode":"CBE792E83FC8FE","user_header":"https://static001.geekbang.org/account/avatar/00/13/06/03/83f4ff25.jpg","comment_is_top":false,"comment_ctime":1546011646,"is_pvip":false,"replies":[{"id":"20249","content":"是有点像 都是利用分治思想","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1546418155,"ip_address":"","comment_id":55055,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546011646","product_id":100017301,"comment_content":"桶排序分桶，然后在桶内排序，最后合并。整个这个操作感觉和mapreduce很像，我的理解有误么？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434662,"discussion_content":"是有点像 都是利用分治思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546418155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54957,"user_name":"Ben","can_delete":false,"product_type":"c1","uid":1252353,"ip_address":"","ucode":"70351D4FAE47F7","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/01/5aaaf5b6.jpg","comment_is_top":false,"comment_ctime":1545988632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545988632","product_id":100017301,"comment_content":"感觉又可以吹一波python了<br>def countingSort(arr):<br>    &#39;&#39;&#39;<br>    计数排序: 桶排序的特殊情况, 将数据值的范围作为索引, 反过来进行排序<br>    适合值的范围有限且均为正整数的数据<br>    适用的实际情况:对考试分数排序<br><br>    要求:待排序数组的值均为正整数(不包含0)<br>    排序前格式化数组: <br>        存在小于1的整数, 数组的每个值都增加最小值绝对值+1, 使最小值为1<br>        存在小数, 同时扩大倍数:小数位数*10<br>    &#39;&#39;&#39;<br>    arrLength = len(arr)<br>    countArrLength = max(arr)<br>    countArr = [0]*countArrLength<br>    # [2, 2, 3, 2, 0, 0, 0, 0, 1]<br>    for i in range(arrLength):<br>        countArr[arr[i]-1] += 1<br>    # [2, 4, 7, 9, 9, 9, 9, 9, 10]<br>    for i in range(1, countArrLength):<br>        countArr[i] += countArr[i-1]<br>    # 进行排序, 为了稳定性,从后向前遍历数据,<br>    #     根据数据的值从桶里取数,这个数就是排序后的数据位置,<br>    #     取数后要将桶的数的值减一, 这就是当前桶对应的待排序数据的下一个数据位置, 也是当前数据对应的已排序数组索引<br>    sortedArr = [0]*arrLength<br>    for i in arr[::-1]:<br>        countArr[i-1] = countArr[i-1] - 1<br>        sortedArr[countArr[i-1]] = i<br>    return sortedArr<br>print(countingSort([1, 2, 3, 4, 9, 3, 4, 1, 2, 3]))","like_count":0},{"had_liked":false,"id":54851,"user_name":"远方夕阳","can_delete":false,"product_type":"c1","uid":1122317,"ip_address":"","ucode":"EEBCD53B2B5D3E","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/0d/93967314.jpg","comment_is_top":false,"comment_ctime":1545969882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545969882","product_id":100017301,"comment_content":"我们可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫...<br><br> 主要是这个过程不理解具体是如何扫描范围，以及如何找到桶对应的一批订单","like_count":0},{"had_liked":false,"id":54848,"user_name":"远方夕阳","can_delete":false,"product_type":"c1","uid":1122317,"ip_address":"","ucode":"EEBCD53B2B5D3E","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/0d/93967314.jpg","comment_is_top":false,"comment_ctime":1545969691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545969691","product_id":100017301,"comment_content":"我们可以先扫描一遍文件，看订单金额所处的数据范围。<br>老师，请问是如何扫描呢，如何得到这个范围的呢，能详细一点吗<br> ","like_count":0},{"had_liked":false,"id":54773,"user_name":"JUNrey.","can_delete":false,"product_type":"c1","uid":1237788,"ip_address":"","ucode":"7E3DF6855EBCE9","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/1c/1b29ac88.jpg","comment_is_top":false,"comment_ctime":1545961463,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545961463","product_id":100017301,"comment_content":"个人认为计数排序从数组A从头取也是可以的，只是找下标的时候从小的开始找。另外手机号基数排序从开头取的弊端不是稳定性的问题，应该是实现复杂度的问题，因为要从前一个数字的某区间取数集进行排序。","like_count":0},{"had_liked":false,"id":54336,"user_name":"zhaimy","can_delete":false,"product_type":"c1","uid":1080524,"ip_address":"","ucode":"E40607BC994D66","user_header":"https://static001.geekbang.org/account/avatar/00/10/7c/cc/140c4b61.jpg","comment_is_top":false,"comment_ctime":1545831187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545831187","product_id":100017301,"comment_content":"不知道怎么回复老师的留言，所以新写了一个留言。最后扫描到的2填入到r8后，对应c6中的3是不是要减1？","like_count":0},{"had_liked":false,"id":53819,"user_name":"zhaimy","can_delete":false,"product_type":"c1","uid":1080524,"ip_address":"","ucode":"E40607BC994D66","user_header":"https://static001.geekbang.org/account/avatar/00/10/7c/cc/140c4b61.jpg","comment_is_top":false,"comment_ctime":1545734992,"is_pvip":false,"replies":[{"id":"19675","content":"为啥勒？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545829306,"ip_address":"","comment_id":53819,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545734992","product_id":100017301,"comment_content":"c[6]应该是022477吧","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434251,"discussion_content":"为啥勒？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545829306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51924,"user_name":"喂韦","can_delete":false,"product_type":"c1","uid":1314560,"ip_address":"","ucode":"49E7734EA1D52D","user_header":"https://static001.geekbang.org/account/avatar/00/14/0f/00/ee0f6e61.jpg","comment_is_top":false,"comment_ctime":1545276750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545276750","product_id":100017301,"comment_content":"计数排序<br>function counttingSort(arr) {<br>\t\t<br>\t\tvar max=arr[0];<br>\t\tfor(var i=0;i&lt;arr.length;i++){<br>\t\t\tif(max&lt;arr[i]){<br>\t\t\t\tmax=arr[i];<br>\t\t\t}<br>\t\t}<br>\t\tvar arr1=new Array(max+1);<br>\t\tfor(var i=0;i&lt;arr1.length;i++){<br>\t\t\tarr1[i]=0;<br>\t\t}<br>\t<br>\t\tfor(var j=0;j&lt;arr.length;j++){<br>\t<br>\t\t\tarr1[arr[j]]++;<br>\t\t}<br>\t<br>\t\tfor(var i=1;i&lt;arr1.length;i++){<br>\t\t\tarr1[i] = arr1[i] + arr1[i-1];<br>\t\t}<br>\t\tvar arr2=[];<br>\t\tfor(var i=0;i&lt;arr.length;i++){<br>\t\t\t<br>\t\t\tvar index=arr1[arr[i]]-1;<br>\t\t\tarr2[index] = arr[i];<br>\t\t\tarr1[arr[i]]--;<br>\t\t}<br>\t\treturn arr2;<br>\t}<br>\tvar arr=[3,6,1,4,34,2,5,65,12,73];<br>\tvar newarr=counttingSort(arr);<br>\tconsole.log(newarr)","like_count":0},{"had_liked":false,"id":50571,"user_name":"crazyone","can_delete":false,"product_type":"c1","uid":1115042,"ip_address":"","ucode":"705E34642E41F5","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/a2/ceb37046.jpg","comment_is_top":false,"comment_ctime":1545010636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545010636","product_id":100017301,"comment_content":"想当上帝的司机<br>基数排序为什么最后一位往前而不是从第一位往后<br>-------------------------<br>从第一位往后算法不正确 你可以自己写写代码或者例子看下<br><br>------------------------<br>第一位开始排序，后面的如果在前位已排序的基础上再排序，应该也是正确的吧。类似数据库的分组排序","like_count":0},{"had_liked":false,"id":49890,"user_name":"匆匆","can_delete":false,"product_type":"c1","uid":1333414,"ip_address":"","ucode":"4DB39C6CD5743B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/H8NxrljQXliccaT5fjdXJQYS3ou3Z9ykAuKw6EgicicEA9L4jQLz3h85P0odgDSaK0cA9oTyUKibbiagdNvnHuuV5mQ/132","comment_is_top":false,"comment_ctime":1544785205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544785205","product_id":100017301,"comment_content":"桶排序：将数据分成有序的几块，然后分别在几块中快排，最后拼接即可。<br><br>计数排序：很巧妙，没很理解，后面再看。<br><br>基数排序：后面再看。","like_count":0},{"had_liked":false,"id":48830,"user_name":"拔剑四顾心惘然","can_delete":false,"product_type":"c1","uid":1246309,"ip_address":"","ucode":"80BC9A68935190","user_header":"","comment_is_top":false,"comment_ctime":1544545472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544545472","product_id":100017301,"comment_content":"思考题：<br>用线性排序：<br>c[3] :c[0] 表示小写个数， c[1]表示数字个数；  c[2]表示大写个数；<br>假设n个字符放在： char a[n]中， 工作数组r[n];<br><br>1. 遍历a[n], 填写c【3】；<br>2. 累加c[3];<br><br>3. <br>for (i=n-1; i&gt;=0; i--)<br>{<br>\tif (a[i] is 小写)<br>\t\tr[c[0] - 1] = a[i]<br>\t\tc[0] --;<br>\t\t<br>\tif (a[i] is 数字)<br>\t\tr[c[1] - 1] = a[i]<br>\t\tc[1] --;    <br><br>\tif (a[i] is 大写)<br>\t\tr[c[2] - 1] = a[i]<br>\t\tc[2] --;<br>}<br><br>4. r[n] 赋给-&gt; a[n]","like_count":0},{"had_liked":false,"id":48797,"user_name":"eason","can_delete":false,"product_type":"c1","uid":1340823,"ip_address":"","ucode":"0B4D5627AAE4CF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIlSe5wRWM6EnVpVOkmJ9HoBpBaqgQK7ZYlAsVl40CVs0picrma5Aq90ffiaAUBHra1Idag4KyBSCXA/132","comment_is_top":false,"comment_ctime":1544538847,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544538847","product_id":100017301,"comment_content":"课后思考题：准备3个桶，将小写字母，数字，大写字母分别放到三个桶中，然后再依次取出。","like_count":0},{"had_liked":false,"id":46163,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1543859296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543859296","product_id":100017301,"comment_content":"思考题，在不使用排序的算法下，直接申请三个临时数组，用于存放，小写字母，大写字母，数字，遍及一次原始数组，用三个条件，将符合的元素分别存放三个数组。然后再根据最终规则合并。","like_count":0},{"had_liked":false,"id":46160,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1543857911,"is_pvip":false,"replies":[{"id":"16682","content":"👍 非常好。有一点纠正下 第二步 数组大小是 最大值+1","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543974877,"ip_address":"","comment_id":46160,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543857911","product_id":100017301,"comment_content":"老师，我总结了计数数组的执行步骤。看下总结的对不对？<br>- 1).找出需要排序的数组的最大值<br>- 2).声明一个新的数组c，用于计数数组使用。此时申请的数组大小为第一步得出的最大值<br>- 3).遍历原始数组，将所在的计数数组的对应的下标的值进行累加1<br>- 4).遍历计数数组，将数组从1开始往后累计，<br>- 5).创建跟原始数组大小空间的临时数组<br>- 6).遍历原始数组，根据原始数组值找到对应计数的数组的所对应的下标，并且减一（数组从0开始）<br>- 7).将临时数组拷贝到原始数组<br><br>总结：此处使用创建2次原始额外空间，所以计数数组，使用场景只能是排序的数组原始范围不大，但是数据量非常大的场景，使用场景非常有限","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431359,"discussion_content":"👍 非常好。有一点纠正下 第二步 数组大小是 最大值+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543974877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46129,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1543850959,"is_pvip":false,"replies":[{"id":"16525","content":"并列第一","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543887650,"ip_address":"","comment_id":46129,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543850959","product_id":100017301,"comment_content":"老师。关于你举得计数排序的例子，让人很容易理解，计数排序的原理。但是突然想抬杠的问下，如果总共第900的桶里，有10个学生，都是考了满分，那么如何取第一名呢？？？考运气，谁在第一个就选谁，那么对于其他的来说就显得不公平呀？？望老师解惑！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431348,"discussion_content":"并列第一","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543887650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45866,"user_name":".Yang","can_delete":false,"product_type":"c1","uid":1149154,"ip_address":"","ucode":"68E917693D97A6","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/e2/002b04c6.jpg","comment_is_top":false,"comment_ctime":1543805392,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1543805392","product_id":100017301,"comment_content":"感觉到了数学思维的重要性。再来4年大学绝对不逃课了","like_count":0},{"had_liked":false,"id":45230,"user_name":"aguan(^･ｪ･^)","can_delete":false,"product_type":"c1","uid":1107177,"ip_address":"","ucode":"04833EF2D18E1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/e9/0dd3829f.jpg","comment_is_top":false,"comment_ctime":1543563085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543563085","product_id":100017301,"comment_content":"思考题<br>1、建三个数组a[],b[],c[]分别存放小写字母，数值，大写字母<br>2、遍历初始的数组,将数据中的元素按类型放入到对应数组a,b,c中<br>3、最后按a,b,c顺序分别取数","like_count":0},{"had_liked":false,"id":43690,"user_name":"allean","can_delete":false,"product_type":"c1","uid":1051470,"ip_address":"","ucode":"A0D2DB4F219EAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/4e/fd946cb2.jpg","comment_is_top":false,"comment_ctime":1543281250,"is_pvip":false,"replies":[{"id":"15585","content":"这个没有标准的实现，要根据具体问题，具体来做。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543284356,"ip_address":"","comment_id":43690,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543281250","product_id":100017301,"comment_content":"请问老师桶排序和基数排序的代码在哪里啊？没找到😭","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430459,"discussion_content":"这个没有标准的实现，要根据具体问题，具体来做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543284356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":43508,"user_name":"冷谦","can_delete":false,"product_type":"c1","uid":1238093,"ip_address":"","ucode":"AC38FFE7B36AAA","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/4d/0f8bbda1.jpg","comment_is_top":false,"comment_ctime":1543234515,"is_pvip":false,"replies":[{"id":"15590","content":"高位开始也是可以的，但是实现起来就稍微繁琐些。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543284764,"ip_address":"","comment_id":43508,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543234515","product_id":100017301,"comment_content":"老师 我没太想明白为什么基数排序不从高位先开始排 感觉这样不是更符合人脑逻辑吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430408,"discussion_content":"高位开始也是可以的，但是实现起来就稍微繁琐些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543284764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":42946,"user_name":"李朋远","can_delete":false,"product_type":"c1","uid":1241782,"ip_address":"","ucode":"A8C1AEDD10973F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/b6/d3afc1ec.jpg","comment_is_top":false,"comment_ctime":1543116364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543116364","product_id":100017301,"comment_content":"个人觉得计数排序中应考虑，1.数组a【8】在算法中是下标无关的不一定要倒序扫描，2.忽略了数组最小值的问题，这个算法都假设最小值为0，若为非0，则算法中求最大值时应考虑求最小值，并求数组r时进行考虑","like_count":0},{"had_liked":false,"id":41751,"user_name":"我是陈艺文是我","can_delete":false,"product_type":"c1","uid":1116751,"ip_address":"","ucode":"428C0B7565CD63","user_header":"https://static001.geekbang.org/account/avatar/00/11/0a/4f/91d1d2aa.jpg","comment_is_top":false,"comment_ctime":1542848713,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1542848713","product_id":100017301,"comment_content":"也可以借鉴快排的思想：挑一个flag，让它左边都是小写，右边都是大写(与快排的大小值不同)，这样在O(n) 的时间复杂度 O(1) 的空间复杂度下也可以完成排序。","like_count":0},{"had_liked":false,"id":41481,"user_name":"Alrt","can_delete":false,"product_type":"c1","uid":1250196,"ip_address":"","ucode":"F808A5BD351121","user_header":"https://static001.geekbang.org/account/avatar/00/13/13/94/2af20174.jpg","comment_is_top":false,"comment_ctime":1542791073,"is_pvip":false,"replies":[{"id":"15065","content":"因为要借助数组 数组的下标就是要排序的数据 所以不能是负数","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542885542,"ip_address":"","comment_id":41481,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542791073","product_id":100017301,"comment_content":"有个问题想不明白，为什么计数排序只能为非负整数排序，按照分成m个有序桶以及用桶的边界下标定位index的思想，也可以为负整数或者小数进行排序呀。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429816,"discussion_content":"因为要借助数组 数组的下标就是要排序的数据 所以不能是负数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542885542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40389,"user_name":"李小草","can_delete":false,"product_type":"c1","uid":1240476,"ip_address":"","ucode":"83DAA0BFDC2068","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/9c/7afa883f.jpg","comment_is_top":false,"comment_ctime":1542613383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542613383","product_id":100017301,"comment_content":"课后思考：可以new三个数组用于存放数字，小写和大写字母，遍历原数据数组，判断字母或者数字的ASCII码，然后放到对应的数组中，最后合并这三个数组！","like_count":0},{"had_liked":false,"id":38668,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1542101391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542101391","product_id":100017301,"comment_content":"个人理解： 今天的三个算法，个人认为依旧是基于分治思想实现的。<br>都是属于，K值不允许太大的情况才适用，并且要求数据分布要相对均匀。<br>拿最后一个年龄的问题举例子，1-120岁时适用的，但是如果进一步精确到，出生年月日，甚至有可能的话再精确到时分秒，今天的排序方法就不一定高效了。<br>就今天的题目，又想到了上一节的寻找数组中的第K大元素，实际上，特定情况下也可以用桶排序的思维方式进一步优化。假设有均匀分布的数据0-5w 共1w条，要寻找第5000个元素的元素。其实也可以先分成10个桶（每1w的数据区间划分一个桶），假设每个桶各1000条，只需要寻找第五个桶的第一条数据就是第五千个，并且第五个桶还可以进一步分桶，个人认为，理论上讲可以做到常数的时间复杂度。<br>请问老师，这样理解的思维方式对嘛？","like_count":0},{"had_liked":false,"id":38654,"user_name":"Geek_79e9a4","can_delete":false,"product_type":"c1","uid":1255796,"ip_address":"","ucode":"43154A9E2F54F4","user_header":"https://static001.geekbang.org/account/avatar/00/13/29/74/e13b112e.jpg","comment_is_top":false,"comment_ctime":1542096803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542096803","product_id":100017301,"comment_content":"可以按照桶排序的思想，从头扫描数组，如果是小写字母放到一个桶里，大写字母放到一个桶里，然后，按照小桶和大桶的顺序遍历，加了数字的就分3个桶","like_count":0},{"had_liked":false,"id":38107,"user_name":"Macro","can_delete":false,"product_type":"c1","uid":1122474,"ip_address":"","ucode":"242B04398B6DA5","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/aa/f7fde266.jpg","comment_is_top":false,"comment_ctime":1541939390,"is_pvip":false,"replies":[{"id":"13705","content":"怎么求出来的你可以看看代码 会更清楚些。原始的c6是为了计算最后的c6做的一个铺垫","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541985861,"ip_address":"","comment_id":38107,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541939390","product_id":100017301,"comment_content":"老师，C[6]是怎样计算出来的，原始的C[6]和按顺序求和得出的C[6]有何作用？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428605,"discussion_content":"怎么求出来的你可以看看代码 会更清楚些。原始的c6是为了计算最后的c6做的一个铺垫","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541985861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38009,"user_name":"ZX","can_delete":false,"product_type":"c1","uid":1235583,"ip_address":"","ucode":"0D2622FE6D1774","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/7f/8069035d.jpg","comment_is_top":false,"comment_ctime":1541856572,"is_pvip":false,"replies":[{"id":"13713","content":"时间复杂度已经不好度量这部分了 考量外部算法 也就是需要访问磁盘的代码的性能的时候 是要重点考虑io","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541987108,"ip_address":"","comment_id":38009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541856572","product_id":100017301,"comment_content":"老师，桶排序的文件IO操作耗时也要考虑到时间复杂度里面吧","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428561,"discussion_content":"时间复杂度已经不好度量这部分了 考量外部算法 也就是需要访问磁盘的代码的性能的时候 是要重点考虑io","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541987108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37429,"user_name":"游走走","can_delete":false,"product_type":"c1","uid":1235708,"ip_address":"","ucode":"4EE71739815241","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/fc/6c2255a6.jpg","comment_is_top":false,"comment_ctime":1541583507,"is_pvip":false,"replies":[{"id":"13450","content":"m=1那就不是桶排序了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541641566,"ip_address":"","comment_id":37429,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541583507","product_id":100017301,"comment_content":"m 个桶排序的时间复杂度就是 O(m * k * logk)，因为 k=n&#47;m，所以整个桶排序的时间复杂度就是 O(n*log(n&#47;m))。<br><br>整个桶的排序时间感觉应该是n+nlog(n&#47;m)<br>当m-&gt;n，O(n)<br>当m-&gt;1，O(nlogn)","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428336,"discussion_content":"m=1那就不是桶排序了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541641566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37315,"user_name":"无名","can_delete":false,"product_type":"c1","uid":1110113,"ip_address":"","ucode":"2D2E877CF97138","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/61/68462a07.jpg","comment_is_top":false,"comment_ctime":1541549770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1541549770","product_id":100017301,"comment_content":"数据库表查询时数据的排序是外部排序吗？或者说根据数据级别不一样选择不同的排序？","like_count":0},{"had_liked":false,"id":36680,"user_name":"烈冬冰夏","can_delete":false,"product_type":"c1","uid":1060113,"ip_address":"","ucode":"F2875FC596D4FA","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/11/0ecbe9ea.jpg","comment_is_top":false,"comment_ctime":1541233279,"is_pvip":false,"replies":[{"id":"13103","content":"用什么排序算法对比大小呢 时间复杂度不能做到O（n）吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541383400,"ip_address":"","comment_id":36680,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541233279","product_id":100017301,"comment_content":"老师，知道手机号排序为什么不直接对比手机号码的大小的，这和您说的方法有什么差别呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427968,"discussion_content":"用什么排序算法对比大小呢 时间复杂度不能做到O（n）吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541383400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36472,"user_name":"Ant","can_delete":false,"product_type":"c1","uid":1079563,"ip_address":"","ucode":"07E6374F91F61E","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/0b/4346a253.jpg","comment_is_top":false,"comment_ctime":1541122541,"is_pvip":false,"replies":[{"id":"12951","content":"写的话 2 3个小时就够了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1541123690,"ip_address":"","comment_id":36472,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1541122541","product_id":100017301,"comment_content":"老师你写一次这个文章要多久","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427880,"discussion_content":"写的话 2 3个小时就够了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541123690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36139,"user_name":"Crystal","can_delete":false,"product_type":"c1","uid":1247231,"ip_address":"","ucode":"EF548F665DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/13/07/ff/24f6f14c.jpg","comment_is_top":false,"comment_ctime":1540952426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540952426","product_id":100017301,"comment_content":"思考题 中用字符串正则去匹配也可以的吧？","like_count":0},{"had_liked":false,"id":36006,"user_name":"If_","can_delete":false,"product_type":"c1","uid":1270862,"ip_address":"","ucode":"EBE721D0A120A4","user_header":"https://static001.geekbang.org/account/avatar/00/13/64/4e/0b9afa5e.jpg","comment_is_top":false,"comment_ctime":1540888107,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1540888107","product_id":100017301,"comment_content":"一个栈，先便利入栈小写字符，再入栈大写字母，在弹栈，如果需要顺序的华，还需要一个栈。这样想，是不是没有用但今天学的东西。","like_count":0},{"had_liked":false,"id":35780,"user_name":"Wilson","can_delete":false,"product_type":"c1","uid":1007140,"ip_address":"","ucode":"3ADBE962C67B8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/24/040855d3.jpg","comment_is_top":false,"comment_ctime":1540796866,"is_pvip":false,"replies":[{"id":"12841","content":"内存不够？你是说桶排序适合外部排序对吧。不冲突的。对于非常大的数据的排序 数据本身就放不进内存 不管用什么排序算法都不好使 这个时候就可先分桶","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540951493,"ip_address":"","comment_id":35780,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540796866","product_id":100017301,"comment_content":"老师，从桶排序，计数排序的代码来看。为了提高实际复杂度为O（nlogn）,相当于是空间换时间。每次都要建立一个同样大小的数组来缓存。跟文章前面说的桶排序和计数排序主要用于内存不够的情况有点冲突？这里有点疑惑，是我理解错了？还麻烦老师解答下。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427664,"discussion_content":"内存不够？你是说桶排序适合外部排序对吧。不冲突的。对于非常大的数据的排序 数据本身就放不进内存 不管用什么排序算法都不好使 这个时候就可先分桶","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540951493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35745,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1540780770,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1540780770","product_id":100017301,"comment_content":"小写字母，大写字母  和数字都有对应得ascii 值<br>创建三个桶 分别是 小写&#47;数字&#47;大写的，再对应的桶内排序，然后按照顺序合并 时间复杂度还是 O(n)","like_count":0},{"had_liked":false,"id":35659,"user_name":"李靖峰","can_delete":false,"product_type":"c1","uid":1139247,"ip_address":"","ucode":"AA4DE3E91A1FFA","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/2f/6fe8ee9e.jpg","comment_is_top":false,"comment_ctime":1540732252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540732252","product_id":100017301,"comment_content":"遍历数组，分别将大小写和数字三种类型推入三个队列中，最后依次从小写、数字、大写三个队列中取出数据","like_count":0},{"had_liked":false,"id":35628,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1540717667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540717667","product_id":100017301,"comment_content":"计数排序：举例：n个考生的分数排序，假设分数范围 0-100。<br>1、所有考生分数存储在数组 A[n] 中（无序）；<br>2、数组C[101] 分别统计并存储每个分数值的考生个数（下标=分数）；<br>3、数组C[101]中的元素依次累加，如 C[1]=C[0] + C[1]; C[2]=C[1] + C[2]; ... C[100]=C[99] + C[100]; 则每个元素值的含义变为分数值小于等于数组下标的考生个数；<br>4、利用步骤3中的数组C的特点，对数组A[n]中的分数排序，存储在数组 R[n] 中；<br>5、将 R 拷贝给 A 。<br>","like_count":0},{"had_liked":false,"id":35568,"user_name":"景页","can_delete":false,"product_type":"c1","uid":1188798,"ip_address":"","ucode":"DC9C2AD52A9E4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/be/9a083ea1.jpg","comment_is_top":false,"comment_ctime":1540663582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540663582","product_id":100017301,"comment_content":"计数排序中，从数组A中取数，也是可以从头开始取的吧。答:可以的 只不过就不是稳定排序算法了","like_count":0},{"had_liked":false,"id":35567,"user_name":"景页","can_delete":false,"product_type":"c1","uid":1188798,"ip_address":"","ucode":"DC9C2AD52A9E4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/be/9a083ea1.jpg","comment_is_top":false,"comment_ctime":1540663054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540663054","product_id":100017301,"comment_content":"笔记:1.桶排序是非比较排序，桶天然有序，桶内可能要用到上一节的快排等比较排序，如果桶内对象等价，无需比较，就成了计数排序。<br>2.计数排序。对于学生成绩计数排序，我觉得根本没有必要找到每个分数在数组里的位置，，因为每个元素出现的次数已经知道了，只有for循环每个数字出现的次数，依次填充数组就可以了！，希望老师解答。答:我们排序的是考生 是个对象 不是单纯的数字","like_count":0},{"had_liked":false,"id":35552,"user_name":"Random.nextName()","can_delete":false,"product_type":"c1","uid":1244960,"ip_address":"","ucode":"8D18D91B8D3BC7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ0lHhbutibIdWRv0pm2EPtvxqcVz0PblEic7GDxHK8JUSkyuWQl1B1NVQTzEowQIxfOf3saRBOTtog/132","comment_is_top":false,"comment_ctime":1540653301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540653301","product_id":100017301,"comment_content":"感觉前一堂课留的课后思考题（合并十个日志文件并按时间戳排序）非常适合用基数排序来解决啊。首先依次读取十个文件，遍历每一项，按照时间戳最后一位分别输出到0-9的十个文件中。接下来继续遍历这十个文件，然后按照时间戳的倒数第二位分别输出到0-9的十个文件中。以此类推，一直到时间戳的第一位。然后合并这十个文件就好了。是不是可行的？","like_count":0},{"had_liked":false,"id":35398,"user_name":"double牛","can_delete":false,"product_type":"c1","uid":1235195,"ip_address":"","ucode":"8DD1A9DC1448D1","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/fb/7d125186.jpg","comment_is_top":false,"comment_ctime":1540540893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540540893","product_id":100017301,"comment_content":"字符串排序问题，我的想法是两个计数变量，一个从头开始遍历，一个从尾部开始遍历，头部遍历到第一个大写字母，尾部遍历寻找到第一个小写字母，然后进行交换。循环进行，直到两个计数变量值相等退出循环。","like_count":0},{"had_liked":false,"id":35259,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1540478582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540478582","product_id":100017301,"comment_content":"计数排序的关键步骤里，数组 A 需要从后往前遍历，这是为了保证排序算法的稳定性。","like_count":0},{"had_liked":false,"id":35250,"user_name":"张斌","can_delete":false,"product_type":"c1","uid":1114994,"ip_address":"","ucode":"87ADFCA3BA1F9A","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/72/938c4beb.jpg","comment_is_top":false,"comment_ctime":1540476340,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1540476340","product_id":100017301,"comment_content":"关于大小写字母排序的思路,能不能分为两个桶,根据相应的ASCII 来分桶,然后再把两个桶合并,时间复杂度基本就是O(n)。","like_count":0},{"had_liked":false,"id":35222,"user_name":"inspired","can_delete":false,"product_type":"c1","uid":1237008,"ip_address":"","ucode":"06C196CCF230AA","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/10/e9dacf2a.jpg","comment_is_top":false,"comment_ctime":1540466271,"is_pvip":false,"replies":[{"id":"12570","content":"怎么放都可以的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540515933,"ip_address":"","comment_id":35222,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540466271","product_id":100017301,"comment_content":"最难理解的那部分没看懂，要么从前往后放，要么从后往前放，怎么先放了个3，还先放在数组中间","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427481,"discussion_content":"怎么放都可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540515933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35134,"user_name":"行走着的宋公子","can_delete":false,"product_type":"c1","uid":1002416,"ip_address":"","ucode":"3FA47B1580A327","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/b0/2ae78627.jpg","comment_is_top":false,"comment_ctime":1540433434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540433434","product_id":100017301,"comment_content":"三个桶放不同类型数据，再拼接上。","like_count":0},{"had_liked":false,"id":35132,"user_name":"zjh","can_delete":false,"product_type":"c1","uid":1125747,"ip_address":"","ucode":"3AB3862247BEF9","user_header":"","comment_is_top":false,"comment_ctime":1540432803,"is_pvip":false,"replies":[{"id":"12582","content":"不是稳定性的问题。你这样子排序没问题的 但代码实现比较繁琐 不如我讲的那种方法简洁","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540516919,"ip_address":"","comment_id":35132,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540432803","product_id":100017301,"comment_content":"想知道手机号排序为什么不从第一位开始排序，是因为要考虑稳定性吗，不然感觉从第一位排序更合适啊，因为把第一位按照桶排序后，不同桶之间已经是有序的了，只需要在把每个桶内的数据在进行排序就可以了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427458,"discussion_content":"不是稳定性的问题。你这样子排序没问题的 但代码实现比较繁琐 不如我讲的那种方法简洁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540516919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35008,"user_name":"blacksmith","can_delete":false,"product_type":"c1","uid":1241139,"ip_address":"","ucode":"63E0F325B706B3","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/33/7eea7af1.jpg","comment_is_top":false,"comment_ctime":1540380508,"is_pvip":false,"replies":[{"id":"12494","content":"可以用归并排序 这样就稳定了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540394281,"ip_address":"","comment_id":35008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540380508","product_id":100017301,"comment_content":"老师我想问个问题。既然桶排序应用了快排，说明其是一个不稳定的排序算法，那是不是不能用在基数排序按照每位排序的算法中呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427414,"discussion_content":"可以用归并排序 这样就稳定了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540394281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34925,"user_name":"sky","can_delete":false,"product_type":"c1","uid":1060892,"ip_address":"","ucode":"B29CA98AC45F88","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/1c/e160955d.jpg","comment_is_top":false,"comment_ctime":1540355827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540355827","product_id":100017301,"comment_content":"遍历一遍获取大写字母，小写字母和数字的个数，然后再遍历一遍，把他们依次放入对应的区间","like_count":0},{"had_liked":false,"id":34924,"user_name":"sky","can_delete":false,"product_type":"c1","uid":1060892,"ip_address":"","ucode":"B29CA98AC45F88","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/1c/e160955d.jpg","comment_is_top":false,"comment_ctime":1540355650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540355650","product_id":100017301,"comment_content":"我觉得桶排序排出来顺序会反吧，这样遍历应该从末尾开始遍历","like_count":0},{"had_liked":false,"id":34762,"user_name":"不似旧日","can_delete":false,"product_type":"c1","uid":1161271,"ip_address":"","ucode":"DF4C5E3AB9570C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","comment_is_top":false,"comment_ctime":1540287580,"is_pvip":false,"replies":[{"id":"12508","content":"哈哈 不用动用数据库这么重的工具 如何来解决呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540394964,"ip_address":"","comment_id":34762,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540287580","product_id":100017301,"comment_content":"10GB的订单数据如果存在数据库中是不是通过sql就解决了排序问题了?<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427326,"discussion_content":"哈哈 不用动用数据库这么重的工具 如何来解决呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540394964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34758,"user_name":"qzq","can_delete":false,"product_type":"c1","uid":1130407,"ip_address":"","ucode":"334B5E522EBF1C","user_header":"https://static001.geekbang.org/account/avatar/00/11/3f/a7/a378347f.jpg","comment_is_top":false,"comment_ctime":1540285557,"is_pvip":false,"replies":[{"id":"12509","content":"你说的是那里订单的例子吧 是有点 都是分治的思想","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540395006,"ip_address":"","comment_id":34758,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540285557","product_id":100017301,"comment_content":"怎么听着有点儿MapReduce的意思？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427324,"discussion_content":"你说的是那里订单的例子吧 是有点 都是分治的思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540395006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34610,"user_name":"@@fighting","can_delete":false,"product_type":"c1","uid":1236394,"ip_address":"","ucode":"7235C1E74549AE","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/aa/859544fd.jpg","comment_is_top":false,"comment_ctime":1540218195,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540218195","product_id":100017301,"comment_content":"借助桶排序的思想，分为大小写两个桶，然后遍历一次就可以实现大小写排序；加入数字后分三个桶即可","like_count":0},{"had_liked":false,"id":34582,"user_name":"姜威","can_delete":false,"product_type":"c1","uid":1244051,"ip_address":"","ucode":"C58EB9A5AD634D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/93/f19a5364.jpg","comment_is_top":false,"comment_ctime":1540212811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540212811","product_id":100017301,"comment_content":"计数排序代码实现：<br>&#47;&#47; 计数排序，a 是数组，n 是数组大小。假设数组中存储的都是非负整数。<br>public void countingSort(int[] a, int n) {<br>  if (n &lt;= 1) return;<br>  &#47;&#47; 查找数组中数据的范围<br>  int max = a[0];<br>  for (int i = 1; i &lt; n; ++i) {<br>    if (max &lt; a[i]) {<br>      max = a[i];<br>    }<br>  }<br>  int[] c = new int[max + 1]; &#47;&#47; 申请一个计数数组 c，下标大小 [0,max]<br>  for (int i = 0; i &lt;= max; ++i) {<br>    c[i] = 0;<br>  }<br>  &#47;&#47; 计算每个元素的个数，放入 c 中<br>  for (int i = 0; i &lt; n; ++i) {<br>    c[a[i]]++;<br>  }<br>  &#47;&#47; 依次累加<br>  for (int i = 1; i &lt;= max; ++i) {<br>    c[i] = c[i-1] + c[i];<br>  }<br>  &#47;&#47; 临时数组 r，存储排序之后的结果<br>  int[] r = new int[n];<br>  &#47;&#47; 计算排序的关键步骤，有点难理解<br>  for (int i = n - 1; i &gt;= 0; --i) {<br>    int index = c[a[i]]-1;<br>    r[index] = a[i];<br>    c[a[i]]--;<br>  }<br>  &#47;&#47; 将结果拷贝给 a 数组<br>  for (int i = 0; i &lt; n; ++i) {<br>    a[i] = r[i];<br>  }<br>}","like_count":0},{"had_liked":false,"id":34458,"user_name":"咖啡巧克力丶","can_delete":false,"product_type":"c1","uid":1241940,"ip_address":"","ucode":"C205E66058859B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f3/54/bcad6e64.jpg","comment_is_top":false,"comment_ctime":1540177933,"is_pvip":false,"replies":[{"id":"12332","content":"不是 因为存储的不一定是整数 有可能是对象","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540258769,"ip_address":"","comment_id":34458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540177933","product_id":100017301,"comment_content":"看了@有铭 同学的留言想了一下 。文中的技术排列：C[6]数组可以理解成，储存的是各个区间值的偏移量。 既然可以实现划分最大值为k个桶，桶中储存其个数，最后根据这个个数输出岂不是更好。降低了实现的难度。唯一的不一样的点就是变成了不稳定的排序方法？？ 是这样吗  ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427216,"discussion_content":"不是 因为存储的不一定是整数 有可能是对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540258769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34319,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1540106860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540106860","product_id":100017301,"comment_content":"课后题：<br>1，用两个桶，每个字母跟ASCII码值做比较，&gt;=97且&lt;=122的为小写字母，放到第一个桶，&gt;=41且&lt;=90的为大写字母放到第二个桶，最后两个桶按先后顺序合并。<br>2，同样也是判断是否在对应的ASCII码值区间，分为3个桶，如果要对桶内元素排序，就分别再用计数排序，最后合并。","like_count":0},{"had_liked":false,"id":34318,"user_name":"D→_→M","can_delete":false,"product_type":"c1","uid":1184017,"ip_address":"","ucode":"5EFDE9E2ED2C8B","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/11/52a78856.jpg","comment_is_top":false,"comment_ctime":1540104742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540104742","product_id":100017301,"comment_content":"关于课后思考有一些想法，既然不要求顺序，在有大写、小写和数字的况下，可以先定义三个空字符串，分别代表大写、小写和数字，然后遍历这个字符串，获取每一个字符进行判断是大写就加到大写字符串中、小写就加到小写字符串中，数字就放到数字字符串中，最后将这三个字符串按顺序拼接即可。不知是否正确，希望作者指正。","like_count":0},{"had_liked":false,"id":34291,"user_name":"Super~琪琪","can_delete":false,"product_type":"c1","uid":1039225,"ip_address":"","ucode":"5A0FCD19B24EAF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/79/9426c6ce.jpg","comment_is_top":false,"comment_ctime":1540089348,"is_pvip":true,"replies":[{"id":"12278","content":"是的 都需要比较 会有一点浪费时间","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540175018,"ip_address":"","comment_id":34291,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540089348","product_id":100017301,"comment_content":"基数排序是从低位往高位排序？那么是不是每个位置都需要比较？<br>还有电话号码这个问题，高位已经比较出来。计数排序从低位排的话是否是浪费时间了？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427163,"discussion_content":"是的 都需要比较 会有一点浪费时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540175018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34273,"user_name":"RuntimeError","can_delete":false,"product_type":"c1","uid":1042643,"ip_address":"","ucode":"3F7D772B55A450","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/d3/df6a4da1.jpg","comment_is_top":false,"comment_ctime":1540081972,"is_pvip":false,"replies":[{"id":"12347","content":"是的 谢谢指出 已改正","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540259133,"ip_address":"","comment_id":34273,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540081972","product_id":100017301,"comment_content":"计数排序过程分解图 最后一组i和h是不是颠倒了","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427161,"discussion_content":"是的 谢谢指出 已改正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540259133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34183,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1238703,"ip_address":"","ucode":"C5EB025A9D1301","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/af/e94ef6d8.jpg","comment_is_top":false,"comment_ctime":1540034036,"is_pvip":false,"replies":[{"id":"12189","content":"看你内存能不能放下吧，对空间的占用能不能接受吧，具体没有可以量化的值","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540047537,"ip_address":"","comment_id":34183,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540034036","product_id":100017301,"comment_content":"&quot;计数排序只能用在数据范围不大的场景中，如果数据范围 k比要排序的数据 n 大很多，就不适合用计数排序了。&quot;<br>请问这个范围是多大呢，有没有具体的边界值呢？<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427145,"discussion_content":"看你内存能不能放下吧，对空间的占用能不能接受吧，具体没有可以量化的值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540047537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34182,"user_name":"锐雨","can_delete":false,"product_type":"c1","uid":1123139,"ip_address":"","ucode":"1B332E35C6A16D","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/43/0fa84f5c.jpg","comment_is_top":false,"comment_ctime":1540033847,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540033847","product_id":100017301,"comment_content":"其实我觉得也可以用计数排序，望各位交流指正：<br>\tpublic static String countingSort(String content) {<br>\t\tif (null == content || content.length() &lt; 2) {<br>\t\t\treturn content;<br>\t\t}<br>\t\tchar[] chars = content.toCharArray();<br>\t\t&#47;** 用于表示3类数据:小写字母,数字,大写字母 *&#47;<br>\t\tint[] category = new int[3];<br>\t\t&#47;** 开始对每一种类型的数据计数 *&#47;<br>\t\tfor (char c : chars) {<br>\t\t\t&#47;* 隐隐约约感觉如下判断有点挫 *&#47;<br>\t\t\tif (c &gt;= 48 &amp;&amp; c &lt;= 57) {<br>\t\t\t\t&#47;&#47;数字<br>\t\t\t\tcategory[1]++;<br>\t\t\t} else if (c &gt;= 65 &amp;&amp; c &lt;= 90) {<br>\t\t\t\t&#47;&#47;大写字母<br>\t\t\t\tcategory[2]++;<br>\t\t\t} else {<br>\t\t\t\t&#47;&#47;小写字母(97-122按套路出牌了,就不考虑还有其它类型了)<br>\t\t\t\tcategory[0]++;<br>\t\t\t}<br>\t\t}<br>\t\tfor(int i = 1; i &lt; 3; i++){<br>\t\t\tcategory[i] += category[i-1]; <br>\t\t}<br>\t\tchar[] sortChars = new char[chars.length];<br>\t\tfor(int i = chars.length - 1; i &gt;= 0; i--){<br>\t\t\tchar c = chars[i];<br>\t\t\t&#47;** 根据char的类型来映射在category里的下标index *&#47;<br>\t\t\tint index;<br>\t\t\t&#47;* 好吧,再挫一遍,起码可以抽公用方法 *&#47;<br>\t\t\tif (c &gt;= 48 &amp;&amp; c &lt;= 57) {<br>\t\t\t\t&#47;&#47;数字<br>\t\t\t\tindex = 1;<br>\t\t\t} else if (c &gt;= 65 &amp;&amp; c &lt;= 90) {<br>\t\t\t\t&#47;&#47;大写字母<br>\t\t\t\tindex = 2;<br>\t\t\t} else {<br>\t\t\t\t&#47;&#47;小写字母(97-122按套路出牌了,就不考虑还有其它类型了)<br>\t\t\t\tindex = 0;<br>\t\t\t}<br>\t\t\t&#47;** 要存放到sortChars当中的下标 *&#47;<br>\t\t\tint targetPos = --category[index];<br>\t\t\tsortChars[targetPos] = c;<br>\t\t}<br>\t\treturn new String(sortChars);<br>\t}","like_count":0},{"had_liked":false,"id":34169,"user_name":"微秒","can_delete":false,"product_type":"c1","uid":1249195,"ip_address":"","ucode":"65A2E8B565B191","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/ab/9748f40b.jpg","comment_is_top":false,"comment_ctime":1540028525,"is_pvip":false,"replies":[{"id":"12190","content":"不一样的，必须从低位先排序，在排序高位。否则，算法并不work。你可以举个例子看下。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540047616,"ip_address":"","comment_id":34169,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1540028525","product_id":100017301,"comment_content":"针对基数排序，从最低位往最高位排序与从最高位往最低位排序，效果应该是一样的吗？？？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427142,"discussion_content":"不一样的，必须从低位先排序，在排序高位。否则，算法并不work。你可以举个例子看下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540047616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34141,"user_name":"高斌","can_delete":false,"product_type":"c1","uid":1234665,"ip_address":"","ucode":"FBAAD707CEE869","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/e9/8d84adf0.jpg","comment_is_top":false,"comment_ctime":1540019408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540019408","product_id":100017301,"comment_content":"桶排序被应用到数据库领域就是柱状图，它能快速的识别列中的pop value，给优化器提供准确的统计信息。谢谢老师的讲解，看来学习算法和数据结构还能对很多产品有更好的理解","like_count":0},{"had_liked":false,"id":34102,"user_name":"seniusen","can_delete":false,"product_type":"c1","uid":1237719,"ip_address":"","ucode":"93F98AE01BA69F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/d7/7f95119d.jpg","comment_is_top":false,"comment_ctime":1540003077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540003077","product_id":100017301,"comment_content":"思考题，遍历字符串，将小写字母、大写字母和数字分别放在一个数组里，然后再依次拼起来即可。","like_count":0},{"had_liked":false,"id":34100,"user_name":"komo0104","can_delete":false,"product_type":"c1","uid":1084059,"ip_address":"","ucode":"90C40C69F7CC93","user_header":"https://static001.geekbang.org/account/avatar/00/10/8a/9b/feb182d3.jpg","comment_is_top":false,"comment_ctime":1540002728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540002728","product_id":100017301,"comment_content":"建个map，key是类型，（大写字母小写字母数字，或者以后任意增多的类型），value是一个list，储存数据。把所有数据populate进map后，按要求的类型顺序拿出来放入新的list。<br><br>当然，以上和其他几个人提的桶排序是一个性质。","like_count":0},{"had_liked":false,"id":34027,"user_name":"勤劳的小胖子-libo","can_delete":false,"product_type":"c1","uid":1158344,"ip_address":"","ucode":"5BB20CD5A56568","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/c8/4b1c0d40.jpg","comment_is_top":false,"comment_ctime":1539954670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539954670","product_id":100017301,"comment_content":"使用三个桶（可以是三个数组或者链表），一个放数字，一个放小写字母，一个放大写字母；每读取一个字符，判断然后决定放入哪一个桶，最后把三个桶的数据拷贝到原数组中。<br><br>时间复杂度就是O(N),空间复杂度也是O(N).<br>","like_count":0},{"had_liked":false,"id":34026,"user_name":"liangjf","can_delete":false,"product_type":"c1","uid":1058812,"ip_address":"","ucode":"681A6CCF098F55","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/fc/b8d83d56.jpg","comment_is_top":false,"comment_ctime":1539954115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539954115","product_id":100017301,"comment_content":"今天的思考题终于很快想出来了。借助桶排序思想，分为大，小写，数字三个桶，遍历一遍，放进各自的桶，直到没数据。再从三个桶中取出放进一个数组中。遍历了两次，时间复杂度是2n，去掉常系数，时间复杂度是O(n)。<br>如果是要求各自排序，加多一个步骤:各个桶内部排序。","like_count":0},{"had_liked":false,"id":34024,"user_name":"Tenderness","can_delete":false,"product_type":"c1","uid":1124304,"ip_address":"","ucode":"840A6104972502","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/d0/7e18e9a2.jpg","comment_is_top":false,"comment_ctime":1539952949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539952949","product_id":100017301,"comment_content":"桶排序，数组长度为3，a-z、数字、A-Z。遍历一边，就知道对应的有多少个了，然后利用计数排序知道了位置，然后新建N个长度的数组放入就行了。至于仅有大小写字母，利用这种方式也可以的。不用排序的话，那就新建n长的数组，两个指针i和j，一前一后，对应大小写字母插入。如果中间要插入数字的话，那记录下i j的位置，再遍历一边就可以咯","like_count":0},{"had_liked":false,"id":34001,"user_name":"唯她命","can_delete":false,"product_type":"c1","uid":1240398,"ip_address":"","ucode":"8F687E8D306840","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/4e/ef406442.jpg","comment_is_top":false,"comment_ctime":1539944207,"is_pvip":false,"replies":[{"id":"12202","content":"我们排序的是考生 是个对象 不是单纯的数字","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540049908,"ip_address":"","comment_id":34001,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539944207","product_id":100017301,"comment_content":"对于学生成绩计数排序，我觉得根本没有必要找到每个分数在数组里的位置，，因为每个元素出现的次数已经知道了，只有for循环每个数字出现的次数，依次填充数组就可以了！，希望老师解答","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427098,"discussion_content":"我们排序的是考生 是个对象 不是单纯的数字","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540049908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33998,"user_name":"我是辣妈","can_delete":false,"product_type":"c1","uid":1239283,"ip_address":"","ucode":"F1576240250AFA","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/f3/01ce824b.jpg","comment_is_top":false,"comment_ctime":1539943271,"is_pvip":false,"replies":[{"id":"12203","content":"因为从前往后遍历的话 就不是稳定排序算法了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1540049949,"ip_address":"","comment_id":33998,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1539943271","product_id":100017301,"comment_content":"关于第二个计数排序的栗子，遍历原数组把它们按照正确的顺序位置放入临时数组的时候，为什么要从后向前遍历呢？从前向后遍历也是一样的呀，是因为程序执行时最近刚被使用的将来很可能也会被使用吗，增加CPU缓存命中率？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427096,"discussion_content":"因为从前往后遍历的话 就不是稳定排序算法了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540049949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":33964,"user_name":"asdf100","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","comment_is_top":false,"comment_ctime":1539931080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539931080","product_id":100017301,"comment_content":"思路是这样的：我们对 C[6] 数组顺序求和，C[6] 存储的数据就变成了下面这样子。C[k] 里存储小于等于分数 k 的考生个数。<br>------------------<br>这个数组顺序求和是什么意思？ c[0]  + c[1] 这类的？","like_count":0},{"had_liked":false,"id":33956,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1539929854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539929854","product_id":100017301,"comment_content":"计数排序的空间复杂度应该怎么算呢？似 O(N) 又非 O(N)，如果数据量比较小可以全部读入内存，那么空间复杂度是 O(N)，如果数据量非常大，只能分批读取再处理，那临时数组的空间可以复用上一次的，空间复杂度该怎么算呢？","like_count":0},{"had_liked":false,"id":33944,"user_name":"Rain","can_delete":false,"product_type":"c1","uid":1238221,"ip_address":"","ucode":"6A270D922A3B9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/cd/5363c8fa.jpg","comment_is_top":false,"comment_ctime":1539924792,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539924792","product_id":100017301,"comment_content":"这个是不是会改变元素本来的排列顺序（不稳定）？<br>----<br>用两个指针a、b：a指针从头开始往后遍历，遇到大写字母就停下，b从后往前遍历，遇到小写字母就停下，交换a、b指针对应的元素；重复如上过程，直到a、b指针相交。","like_count":0},{"had_liked":false,"id":33938,"user_name":"小君","can_delete":false,"product_type":"c1","uid":1238712,"ip_address":"","ucode":"60413CE07D1711","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/b8/e600b872.jpg","comment_is_top":false,"comment_ctime":1539921967,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539921967","product_id":100017301,"comment_content":"public class Sort {\r   &#47;&#47;字数限制，注释和main函数都被我删除了\r    public static String digitSort(String str , int n ){\r        int digitNums = 0;\r        int lowerCaseNums = 0; \r        int capitalCaseNums = 0;\r        for (int i=0;i&lt;n;i++){\r            int temp = str.charAt(i);\r            if (temp &gt;= 48 &amp;&amp; temp &lt;=57){\r                digitNums++;\r            }else  if(temp &gt;= 65 &amp;&amp; temp &lt;=90){\r                capitalCaseNums++;\r            }else{\r                lowerCaseNums++;\r            }\r        }\r        char [] digit = new char[digitNums];\r        char [] lowerCase = new char[lowerCaseNums];\r        char [] capitalCase = new char[capitalCaseNums];\r        int b = 0;\r        int m = 0;\r        int p = 0;\r        for (int l=0;l&lt;n;l++){\r            int temp = str.charAt(l);\r            if (temp &gt;= 48 &amp;&amp; temp &lt;=57){\r                digit[b++] = (char)temp; \r            }else  if(temp &gt;= 65 &amp;&amp; temp &lt;=90){\r                capitalCase[m++] = (char)temp;\r            }else{\r                lowerCase[p++] = (char)temp;\r            }\r\r        }\r        String digitSorted = insertionSorts(digit,digit.length);\r        String lowerCaseSorted = insertionSorts(lowerCase,lowerCase.length);\r        String capitalCaseSorted = insertionSorts(capitalCase,capitalCase.length);\r        return lowerCaseSorted + digitSorted+capitalCaseSorted;\r    }\r    private static String  insertionSorts(char [] a,int n){\r        if (n &lt;= 1){\r            return &quot;&quot;;\r        }\r        for (int i=1;i&lt;n;i++){\r            int j = i-1;\r            int value = a[i];\r            for(;j &gt;=0 ;j--){\r                if (a[j] &lt; value){\r                    a[j+1] = a[j];\r                }else{\r                    break;\r                }\r            }\r            a[j+1] = (char)value;\r        }\r        StringBuffer sb = new StringBuffer();\r        for (int i=a.length-1;i&gt;=0;i--){\r            sb.append((char)a[i]);\r        }\r        return sb.toString();\r    }\r}","like_count":0},{"had_liked":false,"id":33931,"user_name":"滴水成海","can_delete":false,"product_type":"c1","uid":1116413,"ip_address":"","ucode":"F6463126DCCFC8","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/fd/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1539920426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539920426","product_id":100017301,"comment_content":"计数排序逻辑写的的好复杂。为什么不直接遍历C数组（不累加），从第一个下标开始，如果不为0，在在R数组添加C数组的下标，如果为0，则忽略。比如C数组=[2,0,2,3,0,1],从第一个下标0开始，C[0]=2,<br>那么可以在R数组，连续前两位添加0，即：R[0]=0,R[1]=0。到第二个下标1，C[1]=0,则不添加。到第三个下标2，C[2]=2,那么R数组，连续添加两位，即R[2]=2,R[3]=2。依次类推，到结束。逻辑很简单（也就是数C数组中，每个下标对应的值为n,那么在R数组中连续添加n个该下标。<br><br>","like_count":0},{"had_liked":false,"id":33926,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1539919396,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1539919396","product_id":100017301,"comment_content":"周三习题应该也可以用桶排序实现，遍历每份大文件时候再将其根据桶的数据范围放到不同桶里面，这个桶排序应该还可以利用文件是有序的再优化，内部排序文件的时候可以二分查询减少数据的比较。将一个范围的数据放到桶里面，每个桶再进行快排。<br>电话号码排序可以用bitmap去实现。具体是从10000000到99999999划分在这个bitmap里面。<br>文中对单词排序还可以考虑字典排序，使用trie树建立好所有数据，再遍历。<br>本文中习题使用桶排序，将字符串转换为ascii码，数字范围为48-57，小写字母为97-122，大写字母为65-90，分为三个桶，将这些数据放到桶里。再按桶的顺序遍历数据。","like_count":0},{"had_liked":false,"id":33924,"user_name":"Ricky","can_delete":false,"product_type":"c1","uid":1238256,"ip_address":"","ucode":"0B29C730CAD29C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/f0/82281239.jpg","comment_is_top":false,"comment_ctime":1539919241,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539919241","product_id":100017301,"comment_content":"思考题，如果只有大小写字母，则可以采用稳定比较算法进行排序，比较规则是大小写字母比较，小媳写优于大写或者采用桶排序，大写一个桶，小写一个桶，感觉这里有点类似用哈希表存储; 如果还有数字可以用桶排序，分为三个桶，大写字母桶，小写字母桶，数字桶，其中桶的顺序为小写←数字←字母，亦或采用稳定的比较排序算法，比较规则是桶的顺序规则，或者直接哈希表存储即可，个人理解感觉桶就与哈希表有点类似，不同在于数据结构不同罢了","like_count":0},{"had_liked":false,"id":33907,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1539916899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539916899","product_id":100017301,"comment_content":"思考题中 只有小写字母和大写字母中我们可以取两个数组 然后用ascii吗把小写字母放到前面的数组中，大写字母放到后面的数组中 有点类似桶排序，只是数组内部不在需要排序了<br><br>如果是小写字母 和数字 加大写字母 我则选择用三个数组(桶)然后合并就行了","like_count":0},{"had_liked":false,"id":33901,"user_name":"港","can_delete":false,"product_type":"c1","uid":1122464,"ip_address":"","ucode":"35931FC6198180","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/a0/1fca96c0.jpg","comment_is_top":false,"comment_ctime":1539916445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539916445","product_id":100017301,"comment_content":"课后思考：当只有小写字母与大写字母的时候，我们使用a和b分别存储字符串第一个位置指针和最后一个位置指针，a往后遍历，b往前遍历，如果a所指的是小写字母，b所指的是大写字母，那就a往后移一位，b往前移一位，如果a不是小写字母，那就停止。如果b不是也同理。当a,b所指同时不符合，那就将a,b所指地址里的内容交换，然后继续遍历，直到a&gt;=b停止。时间复杂度为O(n)<br>当有数字时，我们可以先把数字和小写字母归为一类，按照上述方法遍历完成，然后再针对数字和小写字母，再用上述方法将数字和小写字母分开。","like_count":0},{"had_liked":false,"id":33891,"user_name":"刘远通","can_delete":false,"product_type":"c1","uid":1253307,"ip_address":"","ucode":"4D3EE819E4B235","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/bb/c488d5db.jpg","comment_is_top":false,"comment_ctime":1539915552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539915552","product_id":100017301,"comment_content":"最后一个基数排序是考虑的字典排序，而不是数字排序。比如20&gt;123?","like_count":0},{"had_liked":false,"id":33872,"user_name":"曹源","can_delete":false,"product_type":"c1","uid":1042459,"ip_address":"","ucode":"A0A982159FF758","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/1b/9d1c6077.jpg","comment_is_top":false,"comment_ctime":1539913355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539913355","product_id":100017301,"comment_content":"大写一个桶，小写一个桶，加多数字就加多一个桶。","like_count":0},{"had_liked":false,"id":33868,"user_name":"朱月俊","can_delete":false,"product_type":"c1","uid":1017707,"ip_address":"","ucode":"4DA0728B862FBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","comment_is_top":false,"comment_ctime":1539912884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539912884","product_id":100017301,"comment_content":"可以利用基数排序的一些步骤，统计小写字母，大写字母，特殊字符的数量，从而确定在最终数组中的位置范围，然后遍历原来数据存放即可。<br>也可以利用快排思想，先将小写字母和大写字母以及特殊字符区分开，然后再将大写字母和特殊字符区分开来。","like_count":0},{"had_liked":false,"id":33863,"user_name":"Rain","can_delete":false,"product_type":"c1","uid":1238221,"ip_address":"","ucode":"6A270D922A3B9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/cd/5363c8fa.jpg","comment_is_top":false,"comment_ctime":1539912105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539912105","product_id":100017301,"comment_content":"看到要求不用排序算法，我用单链表写了一下：<br><br>char[] arr = D a F B c A z<br>sortArr(arr);<br>&#47;&#47; ------------<br>&#47;&#47; 按照小写字母-数字-大写字母排序<br>private static char[] sortArr(char[] arr) {<br>\tNode lowerHead = null;<br>\tNode lowerTail = null;<br><br>\tNode numberHead = null;<br>\tNode numberTail = null;<br><br>\tNode upperHead = null;<br>\tNode upperTail = null;<br><br>\tint len = arr.length;<br><br>\tfor (int i = 1; i &lt; len; i++) {<br>\t\tchar c = arr[i];<br>\t\tNode cNode = createNode(c);<br><br>\t\tif (isLowerCase(c)) {<br>\t\t\tif (lowerHead == null) {<br>\t\t\t\tlowerHead = cNode;<br>\t\t\t\tlowerTail = cNode;<br>\t\t\t} else {<br>\t\t\t\tlowerTail.next = cNode;<br>\t\t\t\tlowerTail = cNode;<br>\t\t\t}<br>\t\t} else if (isNumber(c)) {<br>\t\t\tif (numberHead == null) {<br>\t\t\t\tnumberHead = cNode;<br>\t\t\t\tnumberTail = cNode;<br>\t\t\t} else {<br>\t\t\t\tnumberTail.next = cNode;<br>\t\t\t\tnumberTail = cNode;<br>\t\t\t}<br>\t\t} else if (isUpperCase(c)) {<br>\t\t\tif (upperHead == null) {<br>\t\t\t\tupperHead = cNode;<br>\t\t\t\tupperTail = cNode;<br>\t\t\t} else {<br>\t\t\t\tupperTail.next = cNode;<br>\t\t\t\tupperTail = cNode;<br>\t\t\t}<br>\t\t}<br>\t}<br><br>\t&#47;&#47; concat numberPart and upperPart<br>\tif (numberHead != null) {<br>\t\tnumberTail.next = upperHead;<br>\t} else {<br>\t\tnumberHead = upperHead;<br>\t}<br>\tif (lowerTail != null) {<br>\t\tlowerTail.next = numberHead;<br>\t}<br><br>\tNode head = null;<br>\tif (lowerHead != null) {<br>\t\thead = lowerHead;<br>\t} else if (numberHead != null) {<br>\t\thead = numberHead;<br>\t}<br><br>\tSinglyLinkedList sll = new SinglyLinkedList(head);<br>\tchar[] sortedArr = convertToCharArray(sll);<br>\treturn sortedArr;<br>}<br><br><br>static boolean isLowerCase(char c) {<br>\treturn c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39;;<br>}<br><br>static boolean isUpperCase(char c) {<br>\treturn c &gt;= &#39;A&#39; &amp;&amp; c &lt;= &#39;Z&#39;;<br>}<br><br>static boolean isNumber(char c) {<br>\treturn c &gt;= 0 &amp;&amp; c &lt;=9;<br>}<br><br>static char[] convertToCharArray(SinglyLinkedList sll) {<br>\tchar[] arr = new char[sll.length];<br>\tNode cNode = sll.head;<br>\tint i = 0;<br>\twhile (cNode != null) {<br>\t\tarr[i] = cNode.value;<br>\t\tcNode = cNode.next;<br>\t\ti++;<br>\t}<br>\treturn arr;<br>}","like_count":0},{"had_liked":false,"id":33855,"user_name":"彬","can_delete":false,"product_type":"c1","uid":1243302,"ip_address":"","ucode":"3AFFFABEFE0264","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/a6/84539fc1.jpg","comment_is_top":false,"comment_ctime":1539911343,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539911343","product_id":100017301,"comment_content":"对于只有大小写字母的情况，可以利用快排的partion思想，选择‘a’对应的ASCII码作为pivot；对于有大小写字母和数字的情况，可以用桶排序，分成三个桶","like_count":0},{"had_liked":false,"id":33841,"user_name":"徐凯","can_delete":false,"product_type":"c1","uid":1244991,"ip_address":"","ucode":"12F82BA3649CD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/3f/bbb8a88c.jpg","comment_is_top":false,"comment_ctime":1539909736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539909736","product_id":100017301,"comment_content":"思考题：采用类似快排的思路 p指针控制左边界范围内的小写字母 另外一个q指针不断扫描 扫描到大写字母则跳过 扫描到小写字母 将p边界右边一个元素与当前q所指元素交换 直至q扫描到结尾","like_count":0},{"had_liked":false,"id":33834,"user_name":"王先统","can_delete":false,"product_type":"c1","uid":1236218,"ip_address":"","ucode":"4D208672C0D359","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/fa/3975f8da.jpg","comment_is_top":false,"comment_ctime":1539908884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539908884","product_id":100017301,"comment_content":"思考题: 分桶当然可以，但是对于题中分组数小于等于3的情况目测可以原地完成划分，大于3就需要额外分配空间了，请老师指正一下","like_count":0},{"had_liked":false,"id":33817,"user_name":"伟忠","can_delete":false,"product_type":"c1","uid":1112089,"ip_address":"","ucode":"FE77CF20ED6065","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","comment_is_top":false,"comment_ctime":1539907773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539907773","product_id":100017301,"comment_content":"那我们如何快速计算出，每个分数的考生在有序数组中对应的存储位置呢？这个处理方法非常巧妙，很不容易想到。<br><br>思路是这样的：我们对 C[6] 数组顺序求和，C[6] 存储的数据就变成了下面这样子。C[k] 里存储小于等于分数 k 的考生个数。<br><br>C[6] 2 2 4 7 7 8 顺序求和后<br>C[6] 0 1 2 3 4 5 序号","like_count":0}]}