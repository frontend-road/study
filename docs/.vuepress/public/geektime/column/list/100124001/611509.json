{"id":611509,"title":"26｜高并发爬虫：模型、控制与冲突检测","content":"<p>你好，我是郑建勋。</p><p>上一节课，我们看到了协程和调度器的工作原理，协程的特性决定了我们无法保证协程之间的执行顺序，然而在真正的实践中，协程是无法完全隔离的。它们通常需要完成数据的共享，或者说要完成某种通信，而这又会导致数据的并发安全等新的问题。</p><p>所以，如何合理地组织大量的协程，协程之间如何进行通信，协程怎么优雅退出，如何保证并发安全，这些是我们在设计高并发的模型时需要考虑的问题。好的并发模型能够提升程序的性能、扩展性与安全性。</p><p>这节课，我们就来看看一些富有表现力的高并发模型。让我们先从并发带来的问题说起。</p><h2>数据争用</h2><p>在Go 语言中，当两个以上协程同时访问相同的内存空间，并且至少有一个写操作时，就可能会出现并发安全问题，这种现象也被叫做数据争用。在下面这个例子中，两个协程共同访问了全局变量count。这个程序其实是有数据争用的，因为 count 的最终结果是不明确的。</p><pre><code class=\"language-plain\">var count = 0\nfunc add() {\n\tcount++\n}\nfunc main() {\n\tgo add()\n\tgo add()\n}\n</code></pre><p>count++操作看起来是一条指令，但是对 CPU 来说，需要先读取 count 的值，执行 +1 操作，再将 count 的值写回内存。大部分人期望的操作可能是： R←0 代表读取到0，w→1 代表写入count 为1；协程 1 写入数据 1 后，协程 2 再写入，count 最后的值为 2。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/f2/b3/f29cafb185aabae82214yye4040a82b3.jpg?wh=1920x595\" alt=\"图片\"></p><p>但是当两个协程并行时，情况开始变得复杂了。如果执行的流程如下所示，那么 count 最后的值为1，这说明如果并发设计不合理会带来不确定性的结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/6d/e4/6dabd7026c17570bb8e50c7782d4b4e4.jpg?wh=1920x595\" alt=\"图片\"></p><p>数据争用可谓高并发程序中最难排查的问题。因为它的结果是不明确的，而且可能只在特定条件下出错。这就导致很难复现相同的错误，在测试阶段也不一定能测试出问题。而要解决数据争用问题，我们需要一些机制来保证某一时刻只能有一个协程执行特定操作，我们比较熟悉的传统解决手段就是锁，它包括原子锁、互斥锁与读写锁。</p><h2>原子锁</h2><p>就像我们刚才看到的，即便是简单的像 count++ 这样的操作，在底层也经历了读取数据、 更新 CPU 缓存、存入内存这一系列操作。这些操作如果并发进行可能出现严重错误。这种情况就可以用原子锁来保证并发的安全。</p><p>还有一些更加复杂的场景需要用到原子锁。许多编译器（在编译时）和CPU 处理器（在运行时）通过调整指令顺序进行优化，因此指令执行顺序可能与代码中显示的不同。例如，如果已知有两个内存引用将到达同一位置，并且没有中间写入会影响该位置，那么编译器可能只使用最初获取的值。又如，在编译时，a + b + c 并不能用一条 CPU 指令来执行，所以按照加法结合律，它可能被拆分为 b+c 再+a 的形式。这种非原子性的操作就可能会遇到并发问题。</p><pre><code class=\"language-plain\">sum = a + b + c;\n=&gt;\nsum = b + c;\nsum = a + sum;\n</code></pre><p>另外，在 CPU 执行过程中，不仅可能出现编译器执行顺序混乱的问题，也可能发生与程序中执行顺序不同的内存访问。例如，许多处理器包含存储缓冲区，这个缓冲区会接收对内存的挂起写操作，写缓冲区基本上是&lt;地址，数据&gt;的队列。通常，这些写操作可以按顺序执行，但是如果随后的写操作地址已经存在于写缓冲区中了，那可以将此写操作与先前的挂起写操作组合在一起。</p><p>还有一种情况是，处理器高速缓存未命中。这时，许多处理器在等待当前指令从主内存中获取数据时，为了最大程度地利用资源， 会继续执行后续指令，导致操作乱序。因此需要有一种机制解决并发访问时数据冲突及内存操作乱序的问题，即提供一种原子性的操作。这通常依赖硬件的支持，例如X86 指令集中的LOCK 指令，对应到 Go 语言就是 sync/atomic 包。</p><p>下面这个例子使用 atomic.AddInt64 函数将变量增加了 1，这种原子操作不会发生并发时的数据争用问题。</p><pre><code class=\"language-plain\">var count int64 = 0\nfunc add() {\n\tatomic.AddInt64(&amp;count,1)\n}\nfunc main() {\n\tgo add()\n\tgo add()\n}\n</code></pre><p>sync/atomic 包中还有一个重要的功能：CompareAndSwap，它能够对比并替换元素值。<br>\n下面这个例子中，atomic.CompareAndSwapInt64 会判断flag 变量的值是否为0，如果是，则将flag 的值设置为1。这一系列操作都是原子性的，不会发生数据争用，也不会出现内存操作乱序问题。通过sync/atomic 包中的原子操作，我们能构建起一种自旋锁，只有获取该锁，才能执行区域中的代码。下面这段代码使用一个 for 循环不断轮询原子操作，直到原子操作成功才获取该锁。</p><pre><code class=\"language-plain\">var flag int64 = 0\nvar count int64 = 0\nfunc add() {\n\tfor {\n\t\tif atomic.CompareAndSwapInt64(&amp;flag, 0, 1) {\n\t\t\tcount++\n\t\t\tatomic.StoreInt64(&amp;flag, 0)\n\t\t\treturn\n\t\t}\n\t}\n}\nfunc main() {\n\tgo add()\n\tgo add()\n}\n</code></pre><p>这种自旋锁的形式在 Go 源代码中随处可见。其实，原子操作是保证同步的最基本的技术，通过原子操作可以构建起许多同步原语，例如自旋锁、信号量、互斥锁等。</p><h2>互斥锁</h2><p>通过原子操作构建起的自旋锁，虽然简单高效，但是它并不是万能的。例如，当某一个协程长时间霸占锁的时候，其他协程仍在继续抢占锁，这会导致 CPU 资源持续无意义地被浪费。同时，当有许多协程都在获取锁的时候，可能会有协程始终抢占不到锁。</p><p>为了解决这种问题，操作系统的锁接口提供了终止与唤醒的机制（例如 Linux 中的pthread mutex），这就避免了频繁自旋造成的浪费。不过，调用操作系统级别的锁会锁住整个线程使之无法运行，另外锁的抢占还会涉及线程之间的上下文切换。而Go语言借助协程实现了一种比传统操作系统级别的锁更加轻量级的互斥锁，它的使用方式如下：</p><pre><code class=\"language-plain\">var count int64 = 0\nvar m sync.Mutex\nfunc add() {\n\tm.Lock()\n\tcount++\n\tm.Unlock()\n}\nfunc main() {\n\tgo add()\n\tgo add()\n}\n</code></pre><p>这里，sync.Mutex 构建起了互斥锁，在同一时刻，只会有一个获取了锁的协程会继续执行任务，其他的协程将陷入等待状态。借助协程的休眠与调度器的调度，这种锁会变得非常轻量。</p><h2>读写锁</h2><p>当然，互斥锁也并不总是最好的。由于在同一时间内只能有一个协程获取互斥锁并执行操作，那么在多读少写的情况下，如果长时间没有写操作，读取到的会是完全相同的值，使用互斥锁就显得没有必要了。这个时候，使用读写锁则更加恰当。</p><p><strong>读写锁通过两种锁来实现，一种为读锁，另一种为写锁。</strong>当进行读取操作时，需要加读锁，而进行写入操作时则需要加写锁。多个协程可以同时获得读锁并执行。如果此时有协程申请了写锁，那么该协程会等待所有的读锁都释放后，才能获取写锁并执行。如果当前的协程申请读锁时已经存在写锁，那么读锁会等待写锁释放后再获取读锁并执行。</p><p>总之，读锁必须能观察到上一次写锁写入的值，写锁则要在之前的读锁释放后才能写入。可以有多个协程获得读锁，但只有一个协程可以获得写锁。</p><p>举一个简单的例子，哈希表并不是并发安全的，它只能够并发读取，一旦并发写入就会出现冲突。一种简单的规避方式是，在获取 Map 中的数据时加入RLock 读锁，在写入数据时使用Lock 写锁。</p><pre><code class=\"language-plain\">type Stat struct {\n\tcounters map[string]int64\n\tmutex sync.RWMutex\n}\nfunc (s *Stat) getCounter(name string) int64 {\n\ts.mutex.RLock()\n\tdefer s.mutex.RUnlock()\n\treturn s.counters[name]\n}\nfunc (s *Stat) SetCounter(name string){\n\ts.mutex.Lock()\n\tdefer s.mutex.Unlock()\n\ts.counters[name]++\n}\n</code></pre><p>借助原始的并发控制手段，Go提供了一些好用的并发控制工具，包括了sync.WaitGroup，sync.Once、sync.Pool、sync.Cond。下面我们分开来看一下。</p><h2>Go并发控制库</h2><h3>sync.WaitGroup</h3><p>先来看这样一个场景。在加载配置的过程中，我们希望可以让多个协程同时加载不同的配置文件，但是却希望等到所有协程都加载完毕后才让程序提供服务，这可以加快程序的运行。</p><p>这时，一种方案是使用sleep休眠，但这是一种低效的解决方法。更高效的方法就是使用Go标准库中的<code>sync.WaitGroup</code> ，它会等待所有的协程执行完毕后退出。</p><p><code>sync.WaitGroup</code>  提供了3个API。其中，<code>WaitGroup.Add</code> 代表将等待的数量加1，<code>WaitGroup.done</code> 代表将等待的数量减1，<code>WaitGroup.Wait</code> 代表陷入等待，直到等待的数量为0。所以我们一般在开启协程之前调用 <code>WaitGroup.Add</code> ，然后开启多个工作协程；在每一个协程结束时延迟调用<code>WaitGroup.done</code> ， 在末尾调用 <code>WaitGroup.Wait</code> 陷入堵塞，等待所有协程执行完毕。示例代码如下：</p><pre><code class=\"language-plain\">package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\n\nfunc worker(id int) {\n    fmt.Printf(\"Worker %d starting\\\\n\", id)\n\n    time.Sleep(time.Second)\n    fmt.Printf(\"Worker %d done\\\\n\", id)\n}\n\nfunc main() {\n\n    var wg sync.WaitGroup\n\n    for i := 1; i &lt;= 5; i++ {\n        wg.Add(1)\n\n        i := i\n\n        go func() {\n            defer wg.Done()\n            worker(i)\n        }()\n    }\n\n    wg.Wait()\n\n}\n</code></pre><h3>sync.Once</h3><p>sync.Once 则可以保证某一个操作只能执行一次，它在实践中的使用也非常广泛。例如，我们希望配置的加载、日志的初始化只在初始化时加载一次。又如在释放资源时，我们希望文件描述符与通道只关闭一次，这时候都可以用到 sync.Once。在下面这个例子中，使用sync.Once只允许MysSQL数据库打开一次。</p><pre><code class=\"language-plain\">var (\n    once  sync.Once\n)\n\nfunc DbOnce() (*sql.DB, error) {\n    once.Do(func() {\n        fmt.Println(\"Am called\")\n        db, dbErr = sql.Open(\"mysql\", \"root:test@tcp(127.0.0.1:3306)/test\")\n        if dbErr != nil {\n            return\n        }\n        dbErr = db.Ping()\n    })\n    return db, dbErr\n}\n</code></pre><h3>sync.Cond</h3><p><code>sync.Cond</code> 是Go提供的一种类似条件变量的同步机制，它能够让协程陷入阻塞，直到某个条件发生后再继续执行。</p><p><code>sync.Cond</code> 包含了3个重要的API：<code>Cond.Wait()</code>、<code>Cond.Signal()</code> 和 <code>Cond.Broadcast()</code> 。其中，<code>Cond.Wait()</code> 表示陷入等待，<code>Cond.Broadcast()</code> 会唤醒所有等待的协程，<code>Cond.Signal()</code> 只唤醒一个最先等待的协程。要注意的是，使用<code>Cond.Wait()</code> 之前必须要调用<code>Cond.L.Lock()</code>进行加锁，在结束后还需要调用 <code>Cond.L.UnLock()</code> 进行解锁。</p><p>一般使用 <code>sync.Cond</code> 的正确姿势是： 协程A会用for循环判断是否满足 Condition条件，如果不满足则陷入休眠。协程 B 会在恰当的时候调用 c.Broadcast() 唤醒等待的协程。使用 for 循环是因为当协程被唤醒时，并不能保证当前条件是满足的。这样做也可以实现某种程度上的解耦，消息的发出者并不需要知道具体的Condition条件是怎样的。</p><pre><code class=\"language-plain\">    // 协程A\n    c.L.Lock()\n    for !condition() {\n        c.Wait()\n    }\n    ...\n    c.L.Unlock()\n\n  \n   // 协程B\n   ...\n   c.Broadcast()\n</code></pre><p>不过，在实践中并不经常使用 <code>sync.Cond</code> ，因为在很多场景下，我们都可以使用更为强大的通道。不过为了更透彻地讲解 <code>sync.Cond</code>，我们再来看几个可能会用到 <code>sync.Cond</code> 的例子。</p><p>第一个场景是这样的。我们设计的营销策略希望当在线用户达到100人之后，对前10位用户进行奖励。代码如下所示。</p><p>这里的判断条件就是，用户是否达到100人。如果用户没有达到100人，执行就会陷入堵塞。 而另一个程序，每个用户上线后都会发送通知信号，唤醒等待的协程。</p><pre><code class=\"language-plain\">// 协程A\ncond.L.Lock()\nfor len(users) &lt; 100 {\n    cond.Wait()\n}\ngivePrizes(users[:10])\ncond.L.Unlock()\n\n// 协程B\ncond.L.Lock()\nusers = append(users, newUser)\ncond.L.Unlock()\ncond.Signal()\n</code></pre><p>另外，如果程序收到了终止信号（例如开发者按下了Ctrl+C）, 我们也希望程序能够通知所有协程关闭资源并退出。这时，我们需要增加判断条件，只有当在线用户小于100人并且程序没有终止时才会陷入堵塞。代码修改如下：</p><pre><code class=\"language-plain\">cond.L.Lock()\nfor len(users) &lt; 100 &amp;&amp; !shutdown {\n    cond.Wait()\n}\nif shutdown {\n    cond.L.Unlock()\n    return\n}\ngivePrizes(users[:10])\ncond.L.Unlock()\n</code></pre><p><code>sync.Cond</code> 有堵塞与唤醒的语义，并且可以将通知者与等待者解耦，通知者不必知道具体的条件细节，所以程序会更加灵活。如果我们遇到了类似的场景，可以在合适的情况下使用 <code>sync.Cond</code> 。 不过我们也要小心，一旦忘记了释放锁或者忘记了唤醒协程，<code>sync.Cond</code> 可能遇到死锁问题。</p><p>我们还可以参考Go源码对 <code>sync.Cond</code> 的使用。例如<a href=\"https://github.com/golang/net/blob/28c70e62bb1d140c3f2579fb7bb5095134d9cb1e/http2/pipe.go\">Go在构建内存管道时</a>使用了 <code>sync.Cond</code>。其中，pipe.Read方法会循环读取管道中的数据，如果没有数据，则陷入到等待中。</p><pre><code class=\"language-plain\">func (p *pipe) Read(d []byte) (n int, err error) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\tfor {\n\t  ...\n\t\tif p.b != nil &amp;&amp; p.b.Len() &gt; 0 {\n\t\t\treturn p.b.Read(d)\n\t\t}\n\t\tp.c.Wait()\n\t}\n}\n</code></pre><p>而 pipe.Write 则会在管道另一端写入数据后，唤醒第一个等待读取的协程。</p><pre><code class=\"language-plain\">func (p *pipe) Write(d []byte) (n int, err error) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\tif p.c.L == nil {\n\t\tp.c.L = &amp;p.mu\n\t}\n\tdefer p.c.Signal()\n\tif p.err != nil {\n\t\treturn 0, errClosedPipeWrite\n\t}\n\tif p.breakErr != nil {\n\t\tp.unread += len(d)\n\t\treturn len(d), nil // discard when there is no reader\n\t}\n\treturn p.b.Write(d)\n}\n</code></pre><h2>Go并发模型</h2><p>之前我们讲了很多传统的同步模式，但是我们在实践中去协调协程时，使用得最多的还是通道。 就像Go语言圈子中的名言所说的那样：<strong>不要通过共享内存来通信，通过通信来共享内存。</strong></p><p>通道的厉害之处在于，在通信的过程中完成了数据所有权的转移。数据只可能在某一个协程中执行，这就在无形中消除了并发访问数据的问题，数据争用问题仍然存在，例如通道内部仍然需要使用锁，但Go语言已经为我们屏蔽了底层锁实现的细节。借助通道，我们可以创造出许多有表现力的高并发模型。</p><h3>ping-pong模式</h3><p>ping-pong模式即乒乓球模式，它比较形象地呈现了数据之间一来一回的关系。收到数据的协程可以在不加锁的情况下对数据进行处理，而不必担心有并发冲突。</p><p><img src=\"https://static001.geekbang.org/resource/image/7e/57/7ec1514a0d294c7f0958d1e836370657.jpg?wh=1920x1412\" alt=\"图片\"></p><p>实例代码如下所示。两个协程player就相当于两个球员，而通道table则类似于球桌。</p><pre><code class=\"language-plain\">func main(){\n\n\tvar Ball int\n\n\ttable:= make(chan int)\n\n\tgo player(table)\n\tgo player(table)\n\n\ttable&lt;-Ball\n\n\ttime.Sleep(1*time.Second)\n\t&lt;-table\n\n}\nfunc player(table chan int) {\n\tfor{\n\t\tball:=&lt;-table\n\t\tball++\n\t\ttime.Sleep(100*time.Millisecond)\n\t\ttable&lt;-ball\n\t}\n}\n</code></pre><p>你可以想一想，如果我们把两个 player 扩展为多个 player，是不是就有点像很多人在踢毽子了。当我们遇到类型的问题，可以用这一简单的模式来进行抽象。</p><h3>fan-in 模式</h3><p>fan-in模式又叫扇入模式，意思是多个协程把数据写入到通道中，但只有一个协程等待读取通道数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/a9/28/a9cc4213619ed3bedc6a660a6fe4bc28.jpg?wh=1920x1242\" alt=\"图片\"></p><p>这种模式在实践中有很多应用场景。举个例子，我们想查找某一个文件夹中有没有特殊的关键字。当文件数量很多时，我们可以用并发的方式去查找，找到结果后输出到相同的通道中打印出来。</p><pre><code class=\"language-plain\">func search(ch chan string, msg string) {\n\tvar i int\n\tfor {\n    // 模拟找到了关键字\n\t\tch &lt;- fmt.Sprintf(\"get %s %d\", msg, i)\n\t\ti++\n\t\ttime.Sleep(1000 * time.Millisecond)\n\t}\n}\n\nfunc main() {\n\tch := make(chan string)\n\tgo search(ch, \"jonson\")\n\tgo search(ch, \"olaya\")\n\n\tfor i := range ch {\n\t\tfmt.Println(i)\n\t}\n}\n</code></pre><p>不过，fan-in模式在读取数据时，并不总是只有一个通道。它也可以同时读取多个通道的内容，以多路复用的形式存在。让我们把上面的例子改造一下，现在search函数会返回一个新的通道，并新建协程把数据写入到这个通道中。在读取数据时，我们要监听ch1、ch2两个协程，并使用select来实现多路复用。</p><pre><code class=\"language-plain\">func search(msg string) chan string {\n\tvar ch = make(chan string)\n\tgo func() {\n\t\tvar i int\n\t\tfor {\n\t\t\tch &lt;- fmt.Sprintf(\"get %s %d\", msg, i)\n\t\t\ti++\n\t\t\ttime.Sleep(100 * time.Millisecond)\n\t\t}\n\t}()\n\treturn ch\n}\n\nfunc main() {\n\tch1 := search(\"jonson\")\n\tch2 := search(\"olaya\")\n\n\tfor {\n\t\tselect {\n\t\tcase msg := &lt;-ch1:\n\t\t\tfmt.Println(msg)\n\t\tcase msg := &lt;-ch2:\n\t\t\tfmt.Println(msg)\n\t\t}\n\t}\n}\n</code></pre><p>fan-in模式比较清晰，在实际中也是很常见的。例如我们之后在项目中会看到，通过fan-in模式来整合爬取到的数据，并存储起来。</p><h3>fan-out 模式</h3><p>fan-out模式与fan-in模式相反，它描述的是一个协程完成数据的写入，但是多个协程抢夺同一个通道中的数据的场景。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/84/e335ba2984438618a5f51a44342de084.jpg?wh=1920x1242\" alt=\"图片\"></p><p><strong>Fan-out模式通常会用在任务的分配中。</strong>比方说，程序消费Kafka、NATS等中间件的数据，多个协程就会监听同一个通道中的数据，读到数据后立即进行后续的处理，处理完毕后再继续读取，循环往复。</p><p>以下面的代码为例。多个Worker监听同一个协程，而 <code>tasksCh &lt;- i</code> 会把任务分配到Worker中去。fan-out模式使 Worker 得到了充分的利用，并且任务的分配也实现了负载均衡，哪一个 Worker 闲下来了就会自动去领取新的任务（注意，示例代码中的 sync.WaitGroup 只是为了防止main函数提前退出）：</p><pre><code class=\"language-plain\">func worker(tasksCh &lt;-chan int, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tfor {\n\t\ttask, ok := &lt;-tasksCh\n\t\tif !ok {\n\t\t\treturn\n\t\t}\n\t\td := time.Duration(task) * time.Millisecond\n\t\ttime.Sleep(d)\n\t\tfmt.Println(\"processing task\", task)\n\t}\n}\n\nfunc pool(wg *sync.WaitGroup, workers, tasks int) {\n\ttasksCh := make(chan int)\n\n\tfor i := 0; i &lt; workers; i++ {\n\t\tgo worker(tasksCh, wg)\n\t}\n\n\tfor i := 0; i &lt; tasks; i++ {\n\t\ttasksCh &lt;- i\n\t}\n\n\tclose(tasksCh)\n}\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\twg.Add(36)\n\tgo pool(&amp;wg, 36, 50)\n\twg.Wait()\n}\n</code></pre><p>在生产实践中，我们还可以在上面这个例子的基础上构建出更复杂的模型，例如每一个Worker中还可以分出多个Subwoker。</p><p><img src=\"https://static001.geekbang.org/resource/image/77/75/77f551c2e5040bf455eb6d9f16bb5d75.jpg?wh=1920x1027\" alt=\"图片\"></p><p>接下来我们就尝试在前例的基础上构建出具有Subworker的并发模式。</p><p>如下所示，Worker也变成了类似调度的模式，Worker创建出了多个Subworker的工作线程，并通过subtasks &lt;- task1将任务分发到了Subworker中。</p><pre><code class=\"language-plain\">const (\n\tWORKERS    = 5\n\tSUBWORKERS = 3\n\tTASKS      = 20\n\tSUBTASKS   = 10\n)\n\nfunc subworker(subtasks chan int) {\n\tfor {\n\t\ttask, ok := &lt;-subtasks\n\t\tif !ok {\n\t\t\treturn\n\t\t}\n\t\ttime.Sleep(time.Duration(task) * time.Millisecond)\n\t\tfmt.Println(task)\n\t}\n}\n\nfunc worker(tasks &lt;-chan int, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tfor {\n\t\ttask, ok := &lt;-tasks\n\t\tif !ok {\n\t\t\treturn\n\t\t}\n\n\t\tsubtasks := make(chan int)\n\t\tfor i := 0; i &lt; SUBWORKERS; i++ {\n\t\t\tgo subworker(subtasks)\n\t\t}\n\t\tfor i := 0; i &lt; SUBTASKS; i++ {\n\t\t\ttask1 := task * i\n\t\t\tsubtasks &lt;- task1\n\t\t}\n\t\tclose(subtasks)\n\t}\n}\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\twg.Add(WORKERS)\n\ttasks := make(chan int)\n\n\tfor i := 0; i &lt; WORKERS; i++ {\n\t\tgo worker(tasks, &amp;wg)\n\t}\n\n\tfor i := 0; i &lt; TASKS; i++ {\n\t\ttasks &lt;- i\n\t}\n\n\tclose(tasks)\n\twg.Wait()\n}\n</code></pre><h3>pipeline模式</h3><p>pipeline模式即管道模式，指的是由通道连接的一系列连续的阶段，以类似流的形式进行计算。每个阶段是一组执行特定任务的协程，每个阶段的协程都会通过通道获取从上游传递过来的值，经过处理后，再把新的值发送给下游。</p><p><img src=\"https://static001.geekbang.org/resource/image/97/f8/974340f7b922112b8eeyy9605ee381f8.jpg?wh=1920x428\" alt=\"图片\"></p><p>其实我们平时的四则运算就很像一个管道。举个例子，我们要计算 2*(2*number+1) 这串数字就可以用下面的方式实现。可以看到，<code>multiply(v, 2)</code> 首先被计算出来，计算的结果会紧接着被送入add函数中执行加1操作。之后，生成的结果将继续作为multiply函数的参数被处理。</p><pre><code class=\"language-plain\">func main() {\n\tmultiply := func(value, multiplier int) int {\n\t\treturn value * multiplier\n\t}\n\n\tadd := func(value, additive int) int {\n\t\treturn value + additive\n\t}\n\n\tints := []int{1, 2, 3, 4}\n\tfor _, v := range ints {\n\t\tfmt.Println(multiply(add(multiply(v, 2), 1), 2))\n\t}\n}\n</code></pre><p>《Concurrency in Go》 这本书中给出了将上例的算术操作转换为pipeline模式的例子，如下所示，我们梳理一下这段代码。</p><p>在这里，generator、multiply、add是三个函数，代表管道的不同阶段。每个阶段会返回一个通道供下一个阶段消费。其中，multiply代表乘法操作；add代表加法操作 ；generator是管道的第一个阶段，代表数据的产生。而在代码的最后，<code>for v := range pipeline</code> 代表管道的最后一个阶段，消费最后产生的结果。通道 done 则是为了实现协程的退出而设计的。</p><pre><code class=\"language-plain\">func main() {\n\tgenerator := func(done &lt;-chan interface{}, integers ...int) &lt;-chan int {\n\t\tintStream := make(chan int)\n\t\tgo func() {\n\t\t\tdefer close(intStream)\n\t\t\tfor _, i := range integers {\n\t\t\t\tselect {\n\t\t\t\tcase &lt;-done:\n\t\t\t\t\treturn\n\t\t\t\tcase intStream &lt;- i:\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t\treturn intStream\n\t}\n\n\tmultiply := func(\n\t\tdone &lt;-chan interface{},\n\t\tintStream &lt;-chan int,\n\t\tmultiplier int,\n\t) &lt;-chan int {\n\t\tmultipliedStream := make(chan int)\n\t\tgo func() {\n\t\t\tdefer close(multipliedStream)\n\t\t\tfor i := range intStream {\n\t\t\t\tselect {\n\t\t\t\tcase &lt;-done:\n\t\t\t\t\treturn\n\t\t\t\tcase multipliedStream &lt;- i * multiplier:\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t\treturn multipliedStream\n\t}\n\n\tadd := func(\n\t\tdone &lt;-chan interface{},\n\t\tintStream &lt;-chan int,\n\t\tadditive int,\n\t) &lt;-chan int {\n\t\taddedStream := make(chan int)\n\t\tgo func() {\n\t\t\tdefer close(addedStream)\n\t\t\tfor i := range intStream {\n\t\t\t\tselect {\n\t\t\t\tcase &lt;-done:\n\t\t\t\t\treturn\n\t\t\t\tcase addedStream &lt;- i + additive:\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t\treturn addedStream\n\t}\n\n\tdone := make(chan interface{})\n\tdefer close(done)\n\n\tintStream := generator(done, 1, 2, 3, 4)\n\tpipeline := multiply(done, add(done, multiply(done, intStream, 2), 1), 2)\n\n\tfor v := range pipeline {\n\t\tfmt.Println(v)\n\t}\n}\n</code></pre><p>在管道中还有一个经典的案例：求素数。对于一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数就叫做素数。那我们怎么利用管道来计算前1万个素数呢？</p><p>我们可以在管道的每一个阶段都进行筛选。第一个阶段为数字的生成器，第二个阶段我们首先找到第1个素数2，在这个阶段过滤出所有能够被2整除的数，这样我们就过滤出了 4、6、8 等偶数。这样我们也就能找到第一个不能被2整除的数字3，可以推断出它一定是素数。因此第三个阶段，我们要排除所有能够被3整除的数字，这样就能够排除9、15等数字，而下一个不能被3整除的数是5，它也一定是素数。把它作为第四个阶段筛选的依据，以此类推。</p><p><img src=\"https://static001.geekbang.org/resource/image/b3/be/b3a0877c44cb343c77f0f08d887cdebe.jpg?wh=1920x1242\" alt=\"图片\"></p><p>这个过程我们要怎么用代码实现呢？这段代码非常巧妙，我建议你细细品味一下：</p><pre><code class=\"language-plain\">// 第一个阶段，数字的生成器\nfunc Generate(ch chan&lt;- int) {\n\tfor i := 2; ; i++ {\n\t\tch &lt;- i // Send 'i' to channel 'ch'.\n\t}\n}\n\n// 筛选，排除不能够被prime整除的数\nfunc Filter(in &lt;-chan int, out chan&lt;- int, prime int) {\n\tfor {\n\t\ti := &lt;-in // 获取上一个阶段的\n\t\tif i%prime != 0 {\n\t\t\tout &lt;- i // Send 'i' to 'out'.\n\t\t}\n\t}\n}\n\nfunc main() {\n\tch := make(chan int) \n\tgo Generate(ch)     \n\tfor i := 0; i &lt; 100000; i++ {\n\t\tprime := &lt;-ch  // 获取上一个阶段输出的第一个数，其必然为素数\n\t\tfmt.Println(prime)\n\t\tch1 := make(chan int)\n\t\tgo Filter(ch, ch1, prime)\n\t\tch = ch1 // 前一个阶段的输出作为后一个阶段的输入。\n\t}\n}\n</code></pre><p>前面我们讲解了许多经典的并发模型。实际上，充满创意的并发模式还有很多，例如 or-channel模式、or-done-channel模式、tee-channel模式、bridge-channel模式等。在实际生产中也可能存在多种模型的组合。受到篇幅限制我就不再做过多讲解了，如果你对这方面有兴趣也可以继续深挖，相信一定会有所启发。</p><h2>并发检测</h2><p>Go 1.1 版本之后提供了强大的检查工具 race 来排查数据争用问题。race 可以被用在多个 Go 指令中，当检测器在程序中找到数据争用时，会打印报告。这个报告会包含发生 race 冲突的协程栈，以及此时正在运行的协程栈。</p><pre><code class=\"language-plain\">$ go test -race mypkg\n$ go run -race mysrc.go\n$ go build -race mycmd\n$ go install -race mypkg\n</code></pre><p>我在后面的课程中还会介绍race的用法。</p><h2>总结</h2><p>好了，这节课的内容比较多，总结一下。</p><p>并发协程间的数据通信让我们不得不考虑并发安全的问题。解决这一问题的方式有很多。我们可以使用传统的同步手段，例如原子锁、互斥锁、读写锁，或者是sync标准库中的sync.Once、sync.Cond、sync.WaitGroup工具。当然，在Go语言中使用最多的还是通道，我们可以借助通道来实现不需要加锁的并发模型，例如fan-in、fan-out、pipeline等，你可以根据自己的实际需求进行灵活的组合。</p><h2>课后题</h2><p>学完这节课，请你思考下面这个问题：</p><p>你认为什么时候应该使用锁，什么时候应该使用通道？</p><p>欢迎你在留言区与我交流讨论，我们下节课见！</p>","neighbors":{"left":{"article_title":"25 | 运筹帷幄: 协程的运行机制与调度器原理","id":610599},"right":{"article_title":"27｜掘地三尺：实战深度与广度优先搜索算法","id":612328}},"comments":[{"had_liked":false,"id":364955,"user_name":"Geek_c16d38","can_delete":false,"product_type":"c1","uid":2726606,"ip_address":"中国台湾","ucode":"A8B1EB366FCD98","user_header":"","comment_is_top":false,"comment_ctime":1671781544,"is_pvip":false,"replies":[{"id":134141,"content":"👌","user_name":"作者回复","user_name_real":"编辑","uid":1903914,"ctime":1676216702,"ip_address":"北京","comment_id":364955,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"\nfunc worker(tasksCh &lt;-chan int, wg *sync.WaitGroup) {\n  defer wg.Done()\n  for {\n    task, ok := &lt;-tasksCh\n    if !ok {\n      return\n    }\n    d := time.Duration(task) * time.Millisecond\n    time.Sleep(d)\n    fmt.Println(&quot;processing task&quot;, task)\n  }\n}\n\nfunc pool(wg *sync.WaitGroup, workers, tasks int) {\n  tasksCh := make(chan int)\n\n  for i := 0; i &lt; workers; i++ {\n    go c(tasksCh, wg)\n  }\n\n  for i := 0; i &lt; tasks; i++ {\n    tasksCh &lt;- i\n  }\n\n  close(tasksCh)\n}\n\nfunc main() {\n  var wg sync.WaitGroup\n  wg.Add(36)\n  go pool(&amp;wg, 36, 50)\n  wg.Wait()\n}\n\n這個go c錯了要修正","like_count":0,"discussions":[{"author":{"id":1903914,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0d/2a/dcb935cf.jpg","nickname":"时间为我们证明","note":"","ucode":"299438152D9F3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603465,"discussion_content":"👌","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676216702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1903914,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0d/2a/dcb935cf.jpg","nickname":"时间为我们证明","note":"","ucode":"299438152D9F3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603464,"discussion_content":"好的👌","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676216611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364092,"user_name":"Realm","can_delete":false,"product_type":"c1","uid":1081299,"ip_address":"浙江","ucode":"30CBEBE619D1A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/d3/b5896293.jpg","comment_is_top":false,"comment_ctime":1670511448,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"数据需要传递的时候用channel；\n数据不动的时候，如获取、修改状态，用锁；","like_count":6},{"had_liked":false,"id":366160,"user_name":"konyo","can_delete":false,"product_type":"c1","uid":1222996,"ip_address":"江苏","ucode":"51DF79A52336B4","user_header":"https://static001.geekbang.org/account/avatar/00/12/a9/54/76b680bc.jpg","comment_is_top":false,"comment_ctime":1673428368,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"最后的例子好难懂啊","like_count":0},{"had_liked":false,"id":364035,"user_name":"shuff1e","can_delete":false,"product_type":"c1","uid":1756280,"ip_address":"北京","ucode":"85601271951B5A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep075ibtmxMf3eOYlBJ96CE9TEelLUwePaLqp8M75gWHEcM3za0voylA0oe9y3NiaboPB891rypRt7w/132","comment_is_top":false,"comment_ctime":1670466704,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"func pool(wg *sync.WaitGroup, workers, tasks int) { tasksCh := make(chan int) for i := 0; i &lt; workers; i++ { go c(tasksCh, wg) } for i := 0; i &lt; tasks; i++ { tasksCh &lt;- i } close(tasksCh)}\n\ngo c改成go worker？","like_count":0,"discussions":[{"author":{"id":1903914,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0d/2a/dcb935cf.jpg","nickname":"时间为我们证明","note":"","ucode":"299438152D9F3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603463,"discussion_content":"好的👌","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676216606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}